The vast majority of this type of content has been done with Flash for the last ten years. It has a pretty robust, and well tested display list API for doing this type of work, which makes it really easy to do dynamic drawing and animation. I think that it is only natural that people who know Flash would take this knowledge and begin to apply it to JavaScript / Canvas. Second, the developer who made the library is a Flash developer, and thus isn't one of the people crying about Flash (although plenty of people are). As far as the framerate in the example, it is running full speed, but given the speed that I set the ball at, and the short distance it has to travel, it looks like it jumps a bit. You can tweak this in the code by changing this line: circle.x += 10; (just set 10 to something smaller, and it will move smoother). You can also adjust the framerate, and run a higher frame rate, which will increase CPU usage, but make for a smooth animation: Tick.setInterval(1000 / 24); //24 frames per second http://easeljs.com/docs/symbols/Tick.html#.setInterval mike 
I've used Fusion Charts before and it can do this. It uses flash, however the newer version detects when flash is not available and switches to highcharts, so I'd say there is a good chance highcharts can do this.
oh man, that's perfect. thanks so much for that link!
Fixed, thanks.
My startup's bandwidth and data heavy web-app is currently running completely on a single Node.js instance. We recently got an nice amount of unexpected press and our server is getting slammed pretty strongly as a result. Node process line from top: PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 29025 www 20 0 181m 140m 5040 S 20.3 8.2 22:54.66 node Its handling the most load we've ever seen and I'm so not worried about it I'm three beers in, browsing Reddit. Love this thing.
&gt; I've just been creating a different html page for each one but I realize that's kind of retarded. I see nothing wrong with that. I don't see an immediate need to have JavaScript do this when the browser can do it.
This is seriously awesome - today I was going to look into having QUnit tests run from command line and PhantomJS made it [trivial](https://gist.github.com/796548). Would be great if the whole project could be moved to GitHub (docs and stuff).
I'm surprised that the difference between jQuery and MooTools is so huge.
I read that as squirt()
:D
I use it now for JS scripting. It's easier than installing another JS engine.
Here's my implementation var math = { sqrt: function(x) { return Math.sqrt(x); } } Pretty sweet if I do say so myself.
I woud fire any employee of mine who asked this as an interview question. This is likely due to mathematical rigor not being part of day to day activities at my company. It's not even creative problem solving. *** Edit: Ok, "fire" is a bit strong, but I wouldn't ask him to do anymore interviews in the future.
The only complaint I ever hear from developers using Backbone is that there aren't enough intro guides for using it. Very happy to see more people start to discover and play around with it. 
Really? I'm surprised people still make libraries other than jQuery (though I'm glad they do). Can't remember the last time I used anything else on a job, or saw any other library in code I've been asked to work on.
I like how you're replacing `Math.sqrt()` with `math.sqrt()`. Here's an even shorter version: math = Math;
But that adds all the baggage of the Math object. Do you know _anything_ about performance?
Keeping a very open mind, there is a difference between: &gt; Write a good implementation of `Math.sqrt` in Javascript because it's an approximation of what you will do working here. We'll fail you if we don't like your answer and plan to bombard you with questions about its memory footprint, performance characteristics, and most especially argue with your code formatting choices. and: &gt; In the strictly hypothetical case that you had to write your own `Math.sqrt` in Javascript, walk us through your thinking so we can get an idea of how you approach programming. Obviously we don't re-invent the wheel here, but we wanted a small problem that everybody understands fairly well.
FYI, response from the author, Ariya Hidayat: "The re-execution is not a design choice, it's a workaround to the technical limitation. Essentially the script runs in a context of a web page, so it's thrown away after another page is loaded."
Nice hack
It's a very common interview question actually. It checks to see if they can do a simple binary search in code.
 text-align justify is really horrible
thank you was thinking the same thing. The article looked interesting but i couldn't read it all.
The problem is, I want to eventually have like 100 videos, and I want to be able to add them quickly, so it seems to me like javascript is the way to go. Also I want some more abilities, like being able to navigate the page with the cursor arrows, and to my knowledge you can't do that with just html. 
Used to be MooTools, now it's hands down jQuery.
 That depends on how you [implement square root](http://en.wikipedia.org/wiki/Methods_of_computing_square_roots). If I implement it as the identity: sqrt(x) = e^((1/2) *ln(x)) You learn nothing of my programming ability, other than I know some math. I've interviewed at dozens of places and the only place that gave me that question is Google.
There are far better ways to determine if an interviewee can perform a simple binary search that can be made somewhat relevant to the type of work they would do on a day to day basis (without being completely explicit about it, i.e. - "Add a binary search method to the Array class")
So I'm stuck somewhere in the middle. I understand the example mostly, but I'm having difficulty converting it to a video. I think my problem is in defining the video source. Would you mind [taking a look](http://www.outoffocus.tv/gallery.html) and seeing if you see the problem? 
uh... var sqrt = function(x) {return x^0.5;}
there is no power operator such as '^' in Js.
Doesn't work in Firefox, but it looks to be running as intended in Chrome. No suggestions off the top of my head, well done.
I always fix things like that with Firebug, but why the f- do I have to do that? `text-align:justify` negatively affects reading speed. For people with dyslexia this effect is even worse. It just doesn't work without proper hyphenation. You can forget about it on the web. It doesn't work. Maybe browsers will add some hyphens on their own in the future, but right now they don't. Yea, I really really hate it. Sorry for that. ;)
Can you get it working in a browser other than Chrome? Safari 5 errors out pretty early because Safari doesn't implement `Function#bind` yet. (Test for its existence and if it's not there, [use this version](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind#Compatibility).) EDIT: A nitpick: if (initFn == undefined) { This line is nearly useless, by which i mean it's almost equivalent to saying `if (initfn)`. `undefined == null` is `true`, so all you're doing is checking that the value is falsy, and there are more concise ways to do the same thing. Also, `undefined` isn't a named value in JavaScript the way `null` is, so you probably want this line to read `if (typeof initFn === "undefined")`. EDIT 2: Your JavaScript isn't getting served as UTF-8, so the up and down arrow glyphs you're using in the source code [look like this](http://i.imgur.com/hYmpn.png).
Seriously. It's like employees have absolutely no ability to see it from the perspective of the guy on the other side of the table.
$.extend($.fn,{'sqrt':function(){return this.each(function(){window.console&amp;&amp;console.log(Math.sqrt(this));});}});
Thanks! I hadn't thought a lot about Safari; I'm happy to relearn JS in a way that's fairly modern, but I'm keen to support Safari/Firefox. I always thought that undefined was a constant, but if it's not - I'll fix it. 2: Thanks. I'm not sure actually how I'd get JS to load up a specific code point as I would do in HTML, ala &amp;amp;amp;#8123; or something like that. Any ideas?
I am so going to dig that game out again now :D Edit: [Found it!](http://www.abandonia.com/en/games/341/SimTower+-+The+Vertical+Empire.html)
hey thanks! (i think)
well bugger I. brb got some shit to recode :D
A really important hint and suggestion: Do use a framework. It's good to toy around with some algorithms to get the idea of the language. But alone to avoid the headache of browser independence, you really should use one. (See the others having trouble running it on Firefox). Spend some time with JQuery, Dojo and Mootools to get a feeling for the different approaches.
If you're you're into python [mochikit](http://mochi.github.com/mochikit/) might be a nice framework
Commenting for download tonight. Thanks for ruining my weekend ;)
Not working in Opera.
Also: * [Part II][pii] * [Part III][piii] [pii]: http://github.com/raganwald/homoiconic/tree/master/2011/01/misadventure_part_ii.md#readme [piii]: http://github.com/raganwald/homoiconic/tree/master/2011/01/misadventure_part_iii.md#readme
Code looks fine, but you should really invest sometime into learning something like backbone.js which will let you structure it much better. 
So it looks like this is the relevant code you want: var mt = map.getMapTypes(); // Overwrite the getMinimumResolution() and getMaximumResolution() methods for (var i=0; i&lt;mt.length; i++) { mt[i].getMinimumResolution = function() {return 7;} mt[i].getMaximumResolution = function() {return 11;} } Play with changing the 7 and 11 values in the return statements to adjust the zoom in out. It should be called right after you initialize the map variable
Thanks, I'll take a look. Although I suspect the RESTful stuff as part of backbone will go to waste since I don't really care about persisting my state anywhere. I actually also like it's underlying helper file - underscore.js - seems concise when I don't care at all about the DOM for writing Canvas stuff.
I've seen this one before, although I'm hesitant since it goes along and pollutes the JS namespace a whole ton. This is probably a religious issue for some people and a non-event for others. I probably haven't made my decision about that yet.
Polluting the global namespace was mentioned, but not the fact that your own code does it. That may be intentional and you don't care, but I'm just pointing it out. Maybe that is more of an issue for library code intended to be used by others (e.g., some of Google's ridiculous old JS code created mass amounts of globals which I think made them look stupid. They seem to be fixing that.).
I think you get more information about a person when you ask them a problem without explicitly saying they need a binary search. For example, you learn if they can see a situation where a binary search would be useful, which is what they have to do in real programming.
Try this jQuery maps plugin. The last example I think might be what you're looking for. http://gmap.nurtext.de/examples.html
[Here's how Unicode escapes work](https://developer.mozilla.org/en/JavaScript/Guide/Values,_Variables,_and_Literals#Unicode_Escape_Sequences).
Since others will probably weigh in on this, here's my point of view: it's not a big deal. "Polluting" the global namespace is a sizable concern when you're running CNN.com, but not when you're making something specialized. It's your code, after all.
No, I get it. That's why I said "without being completely explicit". But the sqrt problem is a terrible problem to ask it for, because it isn't particularly relevant to what most programmers do day to day, and there are several ways to mathematically solve it without using a binary search algorithm. You can craft a much more interesting problem where they have to conceptualize a scenario and decide that a binary search is an efficient method for solving it.
Here's how I've done it before: function makeIcon(letter) { if (typeof letter === 'number') { letter = String.fromCharCode("A".charCodeAt(0) + i); } var CODE_A = "A".charCodeAt(0), CODE_Z = "Z".charCodeAt(0); var code = letter.charCodeAt(0), url; if (code &gt; CODE_Z || code &lt; CODE_A) { // If it's outside the A-Z range, return an ordinary marker. url = "http://www.google.com/mapfiles/marker.png"; } else { url = "http://www.google.com/mapfiles/marker" + letter + ".png"; } return new google.maps.MarkerImage(url, new google.maps.Size(20, 34), null, new google.maps.Point(9, 34), null); } You can give it either a letter or a number (`0` will give you A, `1` will give you B, etc.) Then, when you create the marker, pass the `MarkerImage` you got from that function as the `icon` option.
&gt; Unfortunately they want to add numbers or letters to the pins. Is [MarkerWithLabel](http://google-maps-utility-library-v3.googlecode.com/svn-history/r256/trunk/markerwithlabel/examples/basic.html) what you're looking for? It's for Google Maps API v3.
no, there isn't
regular expressions, this is a super trivial example, I think you should be able to figure the specific regex on your own. http://regexpal.com will help.
 &gt;&gt;&gt; /^[0-9]$/.test('foo') false &gt;&gt;&gt; /^[0-9]$/.test('22') false &gt;&gt;&gt; /^[0-9]$/.test('2') true That's one way to work with regexp and this way will work just fine in your case. Now, the only thing missing is the correct regular expression (the thing between those two slashes).
You don't need to create your own character class to match numbers, you can use the shorthand \d instead. (Also, OP be sure to check out \w.)
 /^\s*(\d\w\d{3})\s*$/ is the polite way to match OP's pattern... never punish the user for putting spaces at the beginning or the end of an entry, just trim them off. EDIT: Formatting (Reddit squashed the asterisks I put in there and made the whole thing italic, therefore giving a regexp that REQUIRED a single space instead of trimming them.)
Why stop at trimming one space? /^\s*(\d\w\d{3})\s*$/ edit: and with zomgondo's edit, my comment is now useless :(
This isn't polite, it actually requires a space.
Why bother? Trim outside the RE like sane people do: myRe.test(myString.trim());
That's not only extra typing, it also forces the JavaScript engine to do extra work by making a new copy of the string... fine if you're just checking a form, but if you're doing a lot of string processing in a loop (i.e. parsing a file with node.js or something) it can make a big difference. Also, /^\s*(your pattern here)\s*$/ is *so* common in the world of regexps that it's a perfectly sane thing to do.
See my edit above :)
Fav JS Lib: Raphael. Fav Framework: jQuery. 
I guess so. I used to do a lot of regexp work (and I still do here and there), and I find using native functions makes things clearer usually. If there is \s* in the RE, it *may* be a requirement of the pattern *or* a convenience for users; if user input is trimmed before it reaches the RE validation validates what it needs to, not caring about tolerating user "mistakes". Didn't mean to be offensive by saying "like sane people do"; sorry about that.
A JavaScript library is like contracting another man to pleasure your girl. In other words, *I GOT THE SKILLZ MUTHEFUCKA*. The Web is *my* bitch; ain't no man going to fuck it like I do. 
&gt;i.e. parsing a file with node.js **Everything** should be optimized for the flavor of the week! Now let's argue about the performance hit of using " vs ' in PHP, readability be damned.
It was just an example. I didn't want to do his homework, just point him in the right direction.
Fixed now. I think it was my failed assumption that every modern browser had a .bind function on the Function type.
node.js was used as an example because JS in a browser can't do file IO. As far as optimization goes, "don't do in two steps what you can easily do in one" is about as esoteric as "declare loop variables outside the loop body." It's a general best practice, not something to get livid about.
Eh, I run into way too many instances where someone is getting a string ready for a regex instead of just writing a proper regex to begin with... for example I see this *all the time* in Perl: while ($foo = &lt;STDIN&gt;) { $foo =~ s/^\s+//g; # trim off any leading whitespace $foo =~ s/\s+$//g; # trim off any trailing whitespace if ($foo =~ /some easy pattern/) # do something } It works great when someone tests it... then it gets put into production and months later I have to go figure out why it's so slow. I don't expect everyone to be a master of using regexes but there are lot of cases that make me go *you have to be kidding me*. My other big complaint is people overusing hashes, but that's another topic :)
Bullshit. A pro would pleasure your girl much better than you do. He has more experience with a variety of different girls. It can do things you never even thought of. Actually that metaphor works pretty well to describe why you SHOULD use third party libraries.
This is JS, not Perl. There's a handy `String.prototype.trim` built in. =] Also, you know what they say about premature optimization. Often you don't really care though (as in the OP's case); as long as it works it's okay.
&gt;don't do in two steps what you can easily do in one is a general best practice No it isn't. Performance is not the only thing in the whole world that matters. &gt;browser can't do file IO It can read files now ([HTML5 FileReader](http://www.w3.org/TR/FileAPI/)) and writing is coming in a few years, but that's pretty irrelevant to this discussion either way. The point is you had to pick a use case that is the minority by *far* to make your premature optimization seem valid. If you don't *ever* want to call a function under any circumstances because you think the overhead is deadly and everything should be shoehorned between / /, you should try Perl.
No it doesn't, it tests whether they understand the underlying mathematics of the square root function, and *then* whether they can implement a binary search....assuming they choose that particular solution to this problem with many possibilities. If you ask this of front-end web developers who are just going to write shiny JQuery widgets anyway, you're an asshole. ------------------------------------ (And by all means retort with "I wouldn't hire you if you think this makes me an asshole", because I don't want to work for you. I'm not a piece of meat, I'd rather go somewhere more fulfilling)
Evidently [Facebook asks it](http://twitter.com/#!/phoboslab/status/24910672471007232)
I don't think **x bitwise-XOR 0.5** will do it....
Great, but don't ask them a theoretical mathematical question they shouldn't be expected to know. Why not just ask them to prove Thermat's Last Theorem in Javascript?
If the programmer doesn't know what a square root is, don't hire that programmer. If they DO know what it is, they can figure out a way to calculate it. The most straight forward way is to guess and then binary search your way to it. This is a great interview sized problem that is abstract enough to hopefully reduce the amount of textbook / buzzword crap that some programmers spew when asked a technical question. I'm just saying, it seems good to me. But you have to put yourself in their shoes.
The linked jsDatePick.Full.1.3.js gives me a 404. It's probably correct for your local machine but not on the remote box. Double-check your path and give it another go.
Hmm, when I type the filepath in the address bar I get a 404 too, but I can see it in the directory when I check my FTP. Is it possible that it isn't compatible somehow?
http://jonathanjocham.com/vividpaint/jsDatePick.full.1.3.js Works. It's "full" instead of "Full". Apache is case sensitive. Windows' file system for example isn't.
Aha! A golden star to you for solving problem #1. And now I've learnt a thing. I've uploaded this fix to the original link.
Seeing as your first problem was solved, I'll give your REAL problem a shot. line 713: aDayDiv.onmousedown = function(){ This is triggered when a user clicks a date. This would be where you hook in your own functionality. It has a gRef object with a current[Day/Month/Year]. From there you can do: var selectedDate = new Date(year, month, day); to get a date object. Now all you need to do is find your input field (id or class will do) and do: inputfield.value = selectedDate.toUTCString(); And format the date however you want. 
Okay I have a few questions. Do I add the second line of code you mentioned just to the bottom of the javascript that is in bookaconsultation.html? And where do I place the inputfield.value part? I am still confused about what I should be coding in to the &lt;input&gt; tag that will allow it to display the date object. edit: I re-read it and now I think maybe you are saying that I need to plug the var selectedDate part in to the .js file?
First of all, you need to give your date field an ID in HTML. This way you can use getElementByID to get the node. The function that is triggered on a date click starts at line 713 and ends at line 730. Somewhere in here you want to use getElementById to get your inputfield and set its value. To make it easy, just place this on a new line after line 729: document.getElementById("dateInputField").value = new Date(gRef.currentYear, gRef.currentMonth, gRef.currentDay).toUTCString(); Just make sure you inputfield has the id "dateInputField". You might also want to set it to readOnly, as it will be getting its contents from the calendar anyway. &lt;input type="input" id="dateInputField" size="30" readonly="true"&gt; 
This worked! Thanks a lot. I have another problem though, it also displays the time and time zone. Where has it gathered this information from? Is this a JS function that causes that format? Ideally, I would like it to display as "Monday, February 28 2011". It doesn't seem to be gleaning its formatting from the line of code you had me add, so which portion is instructing that?
Format date in plain Javascript is always annoying. All you really get is the day/month/year as integer. Most developers either use a simple third party script to get a formatDate function or make one themselves. You make an array as such: var months = ['January','February','March','April','May', 'June','July','August','September','October','November','December']; var days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']; Add this right before your previously added line. And then construct the string using days[gRef.currentDay]+', '+months[gRef.currentMonth]+' '+gRef.currentDay+' '+gRef.currentYear instead of the new Date() part.
This addition seems to have stopped it from displaying anything. The variables already exist at the top of the .js so I tried to reference those, ending up with the following code: document.getElementById("dateInputField").value = new Date(DAYS_3[gRef.currentDay]+', '+MONTHS [gRef.currentMonthObject]+' '+gRef.currentDayObject+' '+gRef.currentYearObject).toUTCString(); Also, before the full additions when it stopped displaying, I noticed that no matter what link I clicked on, it kept displaying Mon Feb 28 2011.
Leave the new Date().toUTCString() out. document.getElementById("dateInputField").value = DAYS_3[gRef.currentDay]+', '+MONTHS[gRef.currentMonthObject]+' '+gRef.currentDayObject+' '+gRef.currentYearObject;
Still displays nothing. I had another look through the code, and changed it to selectedDate.day etc because I thought that might be what it should have been?
Both DAYS_3 and MONTHS are outside of your function's scope. You can use Firebug to put a breakpoint at your newly added line to see how what's happening.
Playing the old switcheroo, are you!?
Okay I got firebug and it is enlightening, but I have not figured out how to display anything. I noticed that at line 841 there is a function that formats the date depending on what you've selected in the part of the js that is in the html file. It boils it down into a variable called "dateStr", is this what I should be setting the new dateinputfield value to somehow? I tried moving that line down to there, but I'm not sure it's formatted correctly.
&gt; Apache is case sensitive. As someone else who (many years ago) started learning web design on Windows boxes, generally just assume "*the internet* is case-sensitive" and it'll save you a lot of trouble in the long run. ;-)
this is not just javascript in the command line, it's a whole browser in the command line. including (invisible) rendering. want to turn html into pdfs or pngs without awkward, buggy tools that implement small parts of html and css? 16 loc script.
the difference between this and the likes of v8, rhino etc.: phantomjs is the whole browser, the others are just the js engines. this means: phantomjs is also able to render the html (and output it to a file). including PDF (as if you'd use the browsers print-function)! also, theres native, accessible DOM. e.g. printing ... basically it works like this: phantomjs loads the webpage (html), including all linked files (images, css, js, etc). as soon as it's finished the DOM is accessible in the window context phantomjs provides. the webpages scripts also run, of course they're sandboxed to the window context. go to sleep for 2 seconds (phantomjs.sleep(2000);), and the website changes in between according to the script running inside (aka ajax calls, settimeouts etc). afterwards: phantomjs.render('output.pdf'); ... tadaaaa! sooooo pretty!
at least the code's already there: [github.com/ariya/phantomjs](https://github.com/ariya/phantomjs)
ProtoVis, gRaphael, Flex charting, etc.
Ok, well, I've been programming for 25 years... I think I'll take my own advice on what is good style and what is not, thanks. Enjoy spouting off the next thing your CS professor tells you.
&gt;I need to disable text highlighting [...] Eh. Why? Also, why do you try to apply CSS rules via JavaScript... instead of, y'know, CSS?
It's disabling input selection because it's disabling selection on the inputs parent elements. You can try going through afterwards and doing jQuery('body').children('input').enableSelection(); 
s/children/find But +1 to tylermenezes. Don't do this to your users.
Disabling highlight only gives a facade of protection from copy. The mere fact they can see the content enables copying. If you have a client requesting this, advise they cannot prevent copying. If it's your idea FTFY
Not my choice so you all know. Its requested by a billing system handling the site, I have no control over it, without it they will not approve it. But thanks.
I sympathize with all the people saying you're making a mistake by doing this. It's a terrible, rotten, useless activity for normal websites. Seriously, stop. But, I've had to do it in an HTML5 game. Click and drag is interpreted by a browser as attempting to select stuff. When you intend it to do something else (like actually dragging something,) you have to override the default behavior. I did it via event handlers, since I was handling those events anyway.
Should be entitled "Javascript Closures for C Programmers."
yep, my bad. I'm used to prototype/mootools
Gotta love clients like that =), at a web firm I worked at it seemed like half of all clients couldn't live without right click disabled. First few months I'd tell them why I thought it was bad, most of the time it didn't work, eventually just gave up
Was just going to say roughly the same thing. When creating a "draggable" interface the browser often interprets the drag as a text highlight (Or even worse on OS X as a native drag+drop event.) In cases like that this is a benefit for the user, but doing it to try and stop text copying is just silly.
I make a class like this to get Chrome and Safari to stop highlighting things in my app when someone double clicks a grid row: .webkit-noselect { -webkit-user-select:none; }
Just wanted to say nice work, man! This looks great.
this is really nifty. does it trawl the history for links? the interface is sweet but it didn't find anything to populate the desktop with
It seems like people who have programmed in C long enough just don't grasp a lot of Javascript, especially closures. Their code is where you will find many global variables all named a certain way so you can tell they're global.
&gt; Their code is where you will find many global variables all named a certain way so you can tell they're global. So you're arguing that "dummies" *was* appropriate.
Yea, you can still copy just fine - you just don't see what you've selected. Now, some people might think it's not that bad, since (they might think) the user shouldn't copy anything anyways. However, many people use highlighting as a temporary marker. E.g. if they get a phone call, some email, IM, or if they are interrupted in any other way. Or if they want to open some link which was one or two screens back. Select the text to mark your position, scroll up, mmb the link, and then you can scroll back to that highlighted text. I do this fairly often. There are also some people who habitually select text as they scroll and these people get *seriously* irritated if it's broken.
Thanks, tried this with the find and children, strangely its not working. Hmm any ideas?
it needs openid support, i don't wanna register to another service again... 
jQueryUI/Core contains an undocumented function called disableSelection, which does exactly what you want but in javascript. disableSelection: function() { return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) + ".ui-disableSelection", function( event ) { event.preventDefault(); }); },
Gracias
It attempts to detect visit sites with a CSS trick. Basically, it detects if the :visited style is in effect for a given url. Unfortunately (for me) browsers are starting to close this loophole. The history detection still works with Firefox (3.6). Later versions, I can't be sure.
No, because that doesn't make sense. String.charAt() returns a single value. Passing multiple indexes in should return an array... Btw, you're lucky, learning JavaScript in school?? Is this high school? College? What's the name of the course?
I hadn't considered that there were actual uses for this. I was apparently limited by my imagination and experience (having not tried an HTML5 game yet). I offer an upvote for the example as well as the information.
Thanks for the explanation. I'd like to be snarky and say that it's bad design but, given the clients that I've worked with, I understand. Just a thought: If you argued that a user could always attempt to print the page and render it as PDF (from which they could then copy and paste), would the discussion be moot or would this client then ask you to find a way to try to prevent printing?
In some cases is it a very good thing to disable text highlighting, especially in complex web applications that are supposed to perform like desktop applications. You don't always want every element selected when your user drags something around, or clicks somewhere and drags a bit, selecting irrelevant dom objects and text.. it just looks bad for some web applications to allow highlighting. It isn't always about content stealing, web applications need to be usable and text highlighting doesn't fit many web app use cases. It actually annoys me when I see a web app UI that someone created and they didn't disable highlighting - it can really screw with usability if highlighting is not disabled in some cases.
You got any specific way you want people involved in contributing? I've written a ton of frameworks for js and yet had no idea this was possible. 
I hope you charge them extra for the effort required to implement the evil solution ;)
For what it's worth [Runestone Wisp](http://runestonewisp.appspot.com) is where I used it.
Doesn't seem to work with the latest Chrome(9.0.597.83 beta).
Afaik the scope of the anonymous function that you add as a click event handler will make 'this' reference to the element it has been fired from. The following should work: for(i in links) { $('#'+links[i]+'_link').click(function(){ $('.divs').hide(); // use 'this' instead of your selector by id $(this).show(); }); } Also, since you're using jQuery, why go through all the hassle in the first place. After all you could just select all 'links' divs by a shared classname through jQuery: $('.myLinkClassName').click( function() { $('.divs').hide(); $(this).show(); });
Kudos, it looks really nifty. Most programmers take a look at someone's project and immediately launch into reasons why it sucks/is irrelevant/doesn't use the right framework/etc. but I think you made something unique and interesting.
Before you even ask for it, here's a demo youtube video of it running: http://www.youtube.com/watch?v=YR3z3PHG3rI Test site (git repo's code is updated from here): http://www.grantgalitz.org/gameboy/
kudos sir; great idea for a project. i played this game a lot back in the day. 
Client is picky yes, he has to meet requirements sent to him by a 3rd party billing manager... I make a lot of porn websites, and thats what most of either the clients want or the billing managers the clients chose. I think its stupid to do it, wasted my time on it, finally found a solution to it though, thanks all :)
Ah thanks, this helps a lot :) ended up adding a class to disable what I wanted and left the forms open to selection.
Haha, little extra for the time, its something I commonly do with the porn sites I work with, just the other sites only want certain text to not be selectable, in this case, the client and 3rd party billing system requires the entire site, so its a little more difficult to put in lol Thanks :)
Not really. When I was working on it, I was hoping it would be commercial. But there is no way of monetizing it that I can see. I'm basically hoping someone pics it up and starts adding new features.
Thanks. We engineers are a critical bunch!
Do you mean the history sniffing doesn't work? That's to be expected unfortunately. The irony is I agree that the loophole should be closed. For every legitimate use for JS being able to detect the user's history, there are a hundred evil uses.
what is this! this is awesome!
&gt; Friday, September 25, 2009 I think he might have gotten a few things wrong ... seeing as entire web applications can run on nothing except javascript now, and do it today. Secure and well.
An alarmist who doesn't understand technology? Yeah, we could use a few more of those.
He lost all credibility as soon as he started crying about JavaScript being 14 years old. I got news buddy, UNIX is older than Windows 95, guess which one is more secure? The best point he had, I think, is the inability to distinguish actual user generated inputs from synthesized input.
It's been patched in Firefox4. [https://developer.mozilla.org/en/CSS/Privacy_and_the_%3avisited_selector](https://developer.mozilla.org/en/CSS/Privacy_and_the_%3avisited_selector)
I've tried placing it in a few places, but am obviously incorrect. Where should it go in the file? I've either seen no change or had it fail. (I'm doing the same thing the OP is, using the same software, so her code is the same as mine, more or less). TY &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt; &lt;html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml"&gt; &lt;head&gt; &lt;meta http-equiv="content-type" content="text/html/xml; charset=utf-8"/&gt; &lt;meta name="author" content="Richard Milton, Centre for Advanced Spatial Analysis (CASA), University College London (UCL)"&gt; &lt;meta name="description" content="Page automatically created by GMapImageCutter created by CASA"&gt; &lt;meta name="keywords" content="Google, Maps, Image, Images, Tile, Cutter, GMapImageCutter, GMapCreator"&gt; &lt;title&gt;Picture Viewer&lt;/title&gt; &lt;style type="text/css"&gt; v\:* { behavior:url(#default#VML); } &lt;/style&gt; &lt;script src="http://maps.google.com/maps?file=api&amp;v=2.x&amp;key=ABQIAAAA9ED3lcBCtIal44tqpJeTqRRwNOJSzcBm25LgLCzWw1f7gAnLahSmpSrSKGlJbr914Qjmsp163Ls45Q" type="text/javascript"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; //&lt;![CDATA[ var centreLat=0.0; var centreLon=0.0; var initialZoom=1; var imageWraps=false; //SET THIS TO false TO PREVENT THE IMAGE WRAPPING AROUND var map; //the GMap2 itself ///////////////////// //Custom projection ///////////////////// function CustomProjection(a,b){ this.imageDimension=65536; this.pixelsPerLonDegree=[]; this.pixelOrigin=[]; this.tileBounds=[]; this.tileSize=256; this.isWrapped=b; var b=this.tileSize; var c=1; for(var d=0;d&lt;a;d++){ var e=b/2; this.pixelsPerLonDegree.push(b/360); this.pixelOrigin.push(new GPoint(e,e)); this.tileBounds.push(c); b*=2; c*=2 } } CustomProjection.prototype=new GProjection(); CustomProjection.prototype.fromLatLngToPixel=function(latlng,zoom){ var c=Math.round(this.pixelOrigin[zoom].x+latlng.lng()*this.pixelsPerLonDegree[zoom]); var d=Math.round(this.pixelOrigin[zoom].y+(-2*latlng.lat())*this.pixelsPerLonDegree[zoom]); return new GPoint(c,d) }; CustomProjection.prototype.fromPixelToLatLng=function(pixel,zoom,unbounded){ var d=(pixel.x-this.pixelOrigin[zoom].x)/this.pixelsPerLonDegree[zoom]; var e=-0.5*(pixel.y-this.pixelOrigin[zoom].y)/this.pixelsPerLonDegree[zoom]; return new GLatLng(e,d,unbounded) }; CustomProjection.prototype.tileCheckRange=function(tile,zoom,tilesize){ var tileBounds=this.tileBounds[zoom]; if (tile.y&lt;0 || tile.y &gt;= tileBounds) {return false;} if (this.isWrapped) { if (tile.x&lt;0 || tile.x&gt;=tileBounds) { tile.x = tile.x%tileBounds; if (tile.x &lt; 0) {tile.x+=tileBounds} } } else { if (tile.x&lt;0 || tile.x&gt;=tileBounds) {return false;} } return true; } CustomProjection.prototype.getWrapWidth=function(zoom) { return this.tileBounds[zoom]*this.tileSize; } //////////////////////////////////////////////////////////////////////////// function customGetTileURL(a,b) { //converts tile x,y into keyhole string var c=Math.pow(2,b); var d=a.x; var e=a.y; var f="t"; for(var g=0;g&lt;b;g++){ c=c/2; if(e&lt;c){ if(d&lt;c){f+="q"} else{f+="r";d-=c} } else{ if(d&lt;c){f+="t";e-=c} else{f+="s";d-=c;e-=c} } } return "Typecity2-tiles/"+f+".jpg" } function getWindowHeight() { if (window.self&amp;&amp;self.innerHeight) { return self.innerHeight; } if (document.documentElement&amp;&amp;document.documentElement.clientHeight) { return document.documentElement.clientHeight; } return 0; } function resizeMapDiv() { //Resize the height of the div containing the map. //Do not call any map methods here as the resize is called before the map is created. var d=document.getElementById("map"); var offsetTop=0; for (var elem=d; elem!=null; elem=elem.offsetParent) { offsetTop+=elem.offsetTop; } var height=getWindowHeight()-offsetTop-16; if (height&gt;=0) { d.style.height=height+"px"; } } function load() { if (GBrowserIsCompatible()) { resizeMapDiv(); var copyright = new GCopyright(1, new GLatLngBounds(new GLatLng(-90, -180), new GLatLng(90, 180)), 0, "&lt;a href=\"http://www.casa.ucl.ac.uk\"&gt;CASA&lt;/a&gt;"); var copyrightCollection = new GCopyrightCollection("GMapImgCutter"); copyrightCollection.addCopyright(copyright); //create a custom picture layer var pic_tileLayers = [ new GTileLayer(copyrightCollection , 0, 17)]; pic_tileLayers[0].getTileUrl = customGetTileURL; pic_tileLayers[0].isPng = function() { return false; }; pic_tileLayers[0].getOpacity = function() { return 1.0; }; var proj=new CustomProjection(8,imageWraps); var pic_customMap = new GMapType(pic_tileLayers, proj, "Pic", {maxResolution:7, minResolution:0, errorMessage:"Data not available"}); //Now create the custom map. Would normally be G_NORMAL_MAP,G_SATELLITE_MAP,G_HYBRID_MAP map = new GMap2(document.getElementById("map"),{mapTypes:[pic_customMap]}); map.addControl(new GLargeMapControl()); map.addControl(new GMapTypeControl()); map.addControl(new GOverviewMapControl()); map.enableDoubleClickZoom(); map.enableContinuousZoom(); map.enableScrollWheelZoom(); map.setCenter(new GLatLng(centreLat, centreLon), initialZoom, pic_customMap); ///////////////////////////////////////////////////////////////////////////////////// //Add any markers here e.g. // map.addOverlay(new GMarker(new GLatLng(x,y))); ///////////////////////////////////////////////////////////////////////////////////// } } //]]&gt; &lt;/script&gt; &lt;/head&gt; &lt;body onresize="resizeMapDiv()" onload="load()" onunload="GUnload()"&gt; &lt;div id="map"&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 
That globe is starin' at me funny.
Reminds me of troll face.
college, SAIT in alberta
I follow the rule that *everything ever* is case sensitive when it comes to computers. You will never be wrong.
+1: &gt; I’ve never once heard anything from a security expert that would even remotely work to fix the XSS problem we have in web development.
 for (i = 500; i &lt;= 1400; i += 100) setTimeout("hidediv('fadeout')",i); 
 for(var i=500;i&lt;1600;i+=100){ setTimeout(function(){ console.log('hidediv') },i); } But I recommend you to use a pure asynchronous solution for accuracy
using a for loop for a series of timeout's doesn't make much sense when you could simply use a setInterval like so: var fadeInterval = setInterval(function(){ hidediv('fadeout'); if(obj.opacity) &lt;= 0.1){ clearInterval(fadeInterval); } },100); But personally, the code has a few other issues that may cause you problems in the future. Since "obj" is a global variable (and a fairly common name) it may cause issues with other scripts you are running. It would also prevent your from fading multiple elements at once. It would make the most sense to combine all of this into a single function that can be called and have an ID passed to it. This would encapsulate all fading code in one place and allow for it to be called on multiple elements at the same time. For example: var fadeEl = function(id){ var elToFade = document.getElementById(id); var counter = 0; elToFade.style.opacity = 1; var fadeInterval = setInterval(function(){ elToFade.style.opacity -= 0.1; counter++; if(counter &gt;= 10){ elToFade.style.display = "none"; clearInterval(fadeInterval); } },100); } // call this whenever you want to fade an element fadeEl("idOfElement"); 
agree, but if I don't remember bad, recursive setTimeout is more accurate...
Thanks this works great and speeds things up.
I'm framework-averse, partly because they tend to come with bloat. And that includes feature detection for features I'll never use. For my purposes, I end up testing for about 2 or 3 features, which takes much, much less than the 30ms he mentions. Now, if you must use some heavy framework like jQuery or dojo, you might have a significant problem. From my reading of the article, he's ruling out caching, because it's too little benefit, too late. Instead, he's advocating a two-tier model. Tier 1: Performance constrained or extremely common browsers. Do no feature testing on the browser. Send enough information about the browser that you can configure your platform without it. This could be done either by server-side UA-string matching, or client-side. If you choose to do it on the client side, the bandwidth is going to be lost for all that feature-detection you aren't using, along with all the feature set lists for the browsers they aren't using. Tier 2: Any other browser gets normal feature detection and pays the penalty for it. Now, I think this is a crappy solution, because you're spending time specifically building up this list of tier-1 browsers, which immediately becomes obsolete as soon as the browser-vendor pushing an auto-update and everyone is suddenly back to tier-2. You actually end up penalizing them again when you push the fix without feature detection as they must download a new version of your library. Stick to feature detection. In the long run, it's less stress.
Tier 2 is "now". How is "now" with a *promotion* to "fast" (tier 1) where possible/supported stressful "in the long run"?
Remember, performance is always relative. When people get a new browser version, they expect things to go faster, or at least not slow down. They already know how fast it should be, and if it was tier 1, they're about to be very disappointed when it suddenly becomes tier 2. The promotion isn't the problem. It's the fact that you cannot keep them on tier 1, so they get demoted. Demotion looks REALLY bad. (And to fix that back to tier 1, you force everyone to download a new copy of the library, which isn't fast, especially on those mobile platforms that are so important to you.) Demotion is a bug, which may need to be fixed very quickly and cause a whole release cycle which can be VERY stressful. Failure to promote someone from tier 2 to tier 1 in the first place might be considered a missing feature, but it's better than a visible slowdown. Tier 2 is NOT "now" for me, because I'm not using a bloated library with 30 ms (or more) of feature detection. 
Just discovered this 2 posts made me very eager to start playing around with it :).
That was probably the day I was servicing the server infrastructure :)
Great job! I thought it was an original gameboy one so I was thinking.. more of the same, but noticed its Gameboy Color, even better!
so how long till jQuery UI 1.9
Features list, for those of us that haven't been keeping up?
There is no official features list yet, but I guess the most important change is [the complete rewrite of the AJAX architecture](http://bugs.jquery.com/ticket/7195).
[blog.jquery.com](http://blog.jquery.com/) will probably have more, soonish.
Seriously, you couldn't link to the changelog?
It's not on [google](http://code.google.com/apis/libraries/devguide.html#jquery) yet.
There is no change log, because they released before writing it.
This is ridiculous. Is this guy writing javascript to run on browsers embedded on wrist watches or something? Feature detection might seem like a waste except when you compare it to actually USING your library, which will take orders of magnitude more time making the feature detection waste irrelevant. Unless you're including 6 libraries to use 1 function from each of them like an idiot, I don't buy this. This is an optimization where one is not needed. The reason feature detection is used is because its really easy to do and will always work. The investment of time in doing this 2 tier approach is going to add more opportunities for bugs while giving a probably unnoticeable performance improvement. That time would better be spent doing other types of optimizations. IMHO. 
Well now that's just silly.
http://blog.jquery.com/2011/01/31/jquery-15-released/ is the permalink
&lt;?php 02. 03.// input username baru 04.// input password asli baru ($passAsli) 05. 06.$passEnkrip = md5($passAsli); 07. 08./* procedure simpan data username 09.dan password hasil md5() ke db */ 10. 11.?&gt;
I had to install jquery on a project this morning. I didn't even notice the point release :P
He does work at Google, which probably means his version of the cost/benefit equation might look a little different than yours or mine. Google seems willing to spend immense resources in order to reduce startup time.
**PROMISES!** Finally!
Another demo video: http://www.youtube.com/watch?v=OIiz5ih2IBo
http://www.reddit.com/r/programming/comments/fc2pr/what_is_the_javascript_equivalent_of_java_class/ That site be stealin' articles.
there's more than just that. jQuery's blog has a bunch of the changes http://blog.jquery.com/2011/01/31/jquery-15-released/
More like, jQuery wrapped in regions. (C#)
Why are they two input fields? I don't know too much about tricky stuff like this, but It seems like there would be no way for the browser to report that you're dragging across both of them at the same time, unless you wrote your own input fields from scratch.
There are reasons. There are... Reasons... I have a feeling I'm gonna end up having to mess with mouse positioning.
I don't think this is possible. You can only select text in 1 input at a time. You would need to write a completely custom control to do this, and that's a tonne of work.
you can only do this with a textarea. Worst case scenario, you can format your text area using css (background image, font) to make it *look* like multiple text boxes. Otherwise, browsers won't let you select across text boxes. Think about it, you highlight 2 boxes then start typing, which one would it write in? Which one has focus? Can you explain a little more of what you're doing and what you hope to accomplish, maybe we can think of a hack possibly using divs, table cells, spans, and some crazy css tricks. 
As someone else mentioned, I don't think you can select text in two seperate input fields at once.* What about using contenteditable? *(you could fake highlighting by setting background color though. really hard to pull it off partially in a input field though - move around a background image. which will make it almost impossible to hit the letters precisely)
Haven't other than copying/pasting scripts to use, but Adobe's site has a few resources and samples: * http://www.adobe.com/devnet/illustrator/scripting.html What sort of scripting are you trying to do?
That's the documentation to which I was referring. Nothing to complex just helping to optimize the work flow for some of my co-workers. They are production artists with a lot of repetitive tasks. I'm not trying to do any art with it.
Ahh yes, ExtendScript. Evil, pure evil. Grab the ExtendScript editor, it is terrible and broken but you'll need its debugger for anything longer than 5 lines. Pick a few of the main types of object you're going to be interacting with (document, textframe, path, etc.) and read through their property and method docs 2 or 3 complete times. Use the appendixes and reference links to clear up whatever terms you don't get on the second pass through. Read the top levels regardless of what you are working with, the app namespace is useful to understand for just about everything. Be very careful with your references and keep memory allocations in mind, you will make Illustrator leak memory like a sieve even if you are careful so don't make it any worse than it has to be. Some part so the API will throw uncatchable exceptions, read them carefully because they will normally inform you of some undocumented conditions or restrictions about data availability or set/get orders. Good luck :)
It isn't a ton of work, and its probably what he needs to do. The only thing I can think of that has similar behavior is a spreadsheet, where each cell is an input. Don't tables allow selecting text across cells? If so, it would be trivial to make each cell editable oh click, and use CSS to make cells look like text inputs.
I'll pass, thanks :) 
Pure evil sums it up rather nicely.
[This](http://extendables.org/) brings me some hope. Needs more work though.
a.) Look at the markup, look for 'onclick' (I know that one is sort of obvious) b.) look at the div ID on the markup, search source code for event listeners. Good luck, this is all I got, I am curious to hear some answers on this as well
where's the link? the first thing I thought when you said "multiple instances" is Object Oriented. If you are not using "new FunctionName(data)" in your code then that's your main problem.
how do they attach handlers to events? If that is done in any consistent way, you may be able to hook into that routine.
I did it years ago with Adobe Photoshop. Worked quite well at the time. 
Duh! 1. Go to [moxiecode.com](http://tinymce.moxiecode.com/). Try and run the TinyMCE rich text editor. 2. Try to debug it. Whoops! No "onclick" or even any other "on..." event at all. 
It's very likely there are no 'onclick' attributes in the markup. In fact, there probably *shouldn't* be any onclick attributes in the markup.
Yeah, looking for onclick would only work on shitty sites. We bind all our events to IDs on document.ready with observers. 
I'm not sure if this helps, but Firebug has a way to set breakpoints on DOM elements on a page. It's saved me countless hours of searching through someone else's code for the bit of code interacting with the specific DOM element.
[Visual Event](http://www.sprymedia.co.uk/article/Visual+Event)
Linked to in my original thread. So yeah, I use it. But it usually points too far up the stack to be of any use (e.g., showing me the prototype bind function, rather than the actual function doing the binding). 
Yep, I mentioned setting breakpoints in my OP, and it's certainly helpful, but not ideal. For the record, I think webkit's inspector does a far better job of JS debugging than firebug.
Ah I missed that. Yeah getting down the stack can be a pain. I have solved this problem in the past. When I get back to my desk I'll have a dig around and see if I can remember how I did it.
Hoping you enjoy this (open source) tool I wrote for writing "self-documenting" JavaScript snippets. Next step: building a plugin architecture for domain-specific-language extensions to MarkDown documents.
Seriously, you're making this too easy. *smh* function postMessageAskingForHelp( hasLinkToCode ) { return hasLinkToCode ? "Help is on it's way" : "n000000000000b!"; } alert( postMessageAskingForHelp( false ) );
The debugging in chrome 9+ has event breakpoints. Go to the script tab click on the event listener breakpoints check the relevant events and you should be able to work from there. 
Um, missed a link i think? 
I'd appreciate that if you could take a look. I haven't had any luck. Thanks!
HUH. Well look at that. I'm in safari most of the time and assumed it and chrome shared the same debugger. This is huge! Thank you!
Lets troll the rest of reddit by upvoating this. The joke will be getting people to see what's so interesting, then they come in here and there is NOTHING HERE LOLOLO! Problem? Then they get in on the joke and upvoat + add a comment.
you know, sticking to one tool or browser for debugging isn't trying very hard. i use all the browsers and their debugging tools, and i find firebug to have many features webkit is lacking. great news chrome now supports this, i did think firebug was the only tool that did this, but now we have a new tool in the box for webkit. btw, i have found many places in the webkit inspector that are inelegant and just wonky compared to firebug, but to each their own...
Looks great.
Moleskine?
Is that javascript? i thought javascript look more like: (function a(v){return v ? "Help is on it's way":"n000000000000b!";}alert(a(false)))(); 
reminds me a little of aspect oriented programming. There's a great jquery plugin called jQuery.aop that allows you to watch any function call whatsoever. for example, send logging GA logging to after all existing $.get() calls: jQuery.aop.around( {target: $, method: 'get'}, function(invocation) { _gaq.push(['_trackPageview'], invocation.arguments[0]); return invocation.proceed(); } ); ...but i digress 
Quick tip: that's how CSS works period. *facepalms*
upboat time
I love Java! I thought it was a JavaScript emulator until I visited Gameboy Online... It's nice to see Applets haven't died out yet.
Can't tell if trolling.
I found myself wanting to scroll the gallery images directly by dragging them, rather than using the scroll bar below. That would be especially useful if this plugin was to be used on a mobile device like the iPhone or iPad. The images can be dragged but as currently implemented there doesn't seem to be any place to drop them.
Sorry, I edited the post and I lost the links as a result. I've put them back in. Thanks.
Thanks, I don't think I am using this convention. The links are there now, if you can take a look.
fixed. Thanks for the lashing.
It may take some time to wrap your head around it but it's worth it. Do a search for OO Javascript, or Object Oriented JavaScript, or search for John Ressig's Pro Javascript Techniques. The idea is fairly simple: function Chair(colour){ this.colour = colour; this.set_color = function(new_colour) { this.colour = new_colour; }; return this; } var blueChair = new Chair('blue'); blueChair.colour // =&gt; blue var anotherBlueChair = new Chair('blue'); blueChair == anotherBlueChair; // =&gt; false var redChair = new Chair('red'); redChair.colour // =&gt; red redChair.set_colour('green'); redChair.colour // =&gt; green 
Am I alone in thinking it's nuts to select all 'p' elements and then see if they're a child of an element with a given id?? WTF jQuery?
That was very cool. Understandably, it sucked up cpu usage on my netbook. I'll try later on a more powerful computer. [Link](http://www.grantgalitz.org/gameboy/)
Oh yeah!
All the examples within the book were also really awesome. Every one I thought to myself, where can I incorporate these into my apps.
WTF CSS, actually.
Is there some statistical reason as to why this is faster however counter intuitive?
Some brand of note-taking booklets popular with Ruby rockstars, JavaScript ninjas and people who collect iOS devices, I hear.
No! I'm serious. I love programming in Java. It gets a lot of hate. =(
Because this isn't Java, it's JavaScript and HTML5 with no plugins. Check the code yourself: https://github.com/grantgalitz/GameBoy-Online Don't confuse this with a java gameboy emulator.
Finally!
You mean Awwwwwwww Yeeeaaaah
-1 for bad code that throws a Syntax Error. I believe what you're trying for is: alert((function a(v){return v ? "Help is on it's way":"n000000000000b!";})(false));
Third demo I tried locked up Chrome (unresponsive plugin, all of Chrome frozen). That's certainly a new experience for me, but I wouldn't consider it an improvement.
They've disabled the option to ignore the system-specified proxy server, which means that 99% of the Internet is now blocked for me in Chrome. I used Chrome for the past 6 months... but oh well, back to Firefox.
That's most likely a driver issue. (I.e. it's your fault.)
It's _always_ the user's fault.
They can't update your drivers. Bad drivers do horrible things. With my old ATI card I could trigger a bug (via CSS, Firefox, and window resizing) which crashed my machine so hard that it was unable to reboot. I had to flip the power switch of the PSU, wait a few seconds, and only then I was able to reboot. This was 100% reproducible. It always crashed. Mozilla surely wasn't to blame for this. It worked just fine on any other machine with the same OS and browser version. Update your drivers if possible.
I don't think that's the case. rauschma apparently just submitted his article to a different site. But it's definitely a dup! Rabble Rabble!
Even though there's an optimization for a selector that starts with an ID, like $('#box p'), that approach is still significantly slower than using $('#box').find('p'). For example, on my computer the results were: 7,278 ops/sec vs. 34,358 (78% slower).
I wish the article didn't use __proto__ in its examples since that property isn't cross-browser compatible.
Fix it
[I did.](http://www.mozilla.com/en-US/firefox/)
I'd have to go with some kind of optimisation as to how the user agent builds the dom. Perhaps they have lookup tables that can very quickly return all 'p' tags, for example. Another optimisation might involve automatically adding all css classes to elements in an 'inherited' field, which would again make knowing if a given element is a child of a given class simple. Having said all that, this only helps the CSS engine itself, it almost certainly isn't available to JavaScript and the Sizzle engine, although naturally querySelector would get the benefit.
WebGL works on Mac but 2D canvas is still not hardware accelerated. :(
Really nice idea! Could be a very nice plugin for Wordpress or something, would be a godsend for JavaScript bloggers
pro dude..pro
I'll just leave this here: http://api.prototypejs.org/dom/Event/on/
Is there a reason you want to use the href instead of the onclick? One thing you could try is: href="javascript:return myScroll('showframe', 630,820); 
are you serious? i can make 1000 comments as to how bad this is....but i'll be nice. see where you have name="showframe" for your iframe. name != to id. add id="showframe" better solution...use web standards, drop the iframes. 
Thanks for the quick answer, but it didn't help. It just opens new blank tab...
Did you try changing: &lt;a class="locind" href="javascript:myScroll('showframe', 630,820);" &gt;Hotel Bosna&lt;/a&gt; To: &lt;a class="locind" href="#" onclick="javascript:myScroll('showframe', 630,820);" &gt;Hotel Bosna&lt;/a&gt;
yes, and nothing happens (even in FF). As if browser can't find iframe named showframe. I added id attribute with same parameters; didn't help...
Your reply is unhelpful and your tone is unpleasant.
 onclick="myScroll('showframe', 630,820);" event handlers don't need the javascript: prefix.
If you'd like to consider dropping the iframe: &lt;div id="mapContainer"&gt; &lt;img id="map" src="map.jpg" alt="" /&gt; &lt;/div&gt; Then in JS var mapElement = document.getElementById('map'); function moveMapTo(x,y) { mapElement.style.left = x + 'px'; mapElement.style.top = y + 'px'; } With some action html: &lt;a href="" onclick="moveMapTo(-100,-100)"&gt;Move!&lt;/a&gt; And some CSS: #mapContainer { position: relative; width: 200px; height: 200px; overflow: hidden; } #map { position: absolute; top: 0px; left: 0px; } Note that when moving the map "up" and "left" you'll have to use negative coordinates (cause you're really setting the left and top values). If you wanted to keep "center on X,Y location" functionality, you could code the moveMapTo() function to be a little bit more intelligent, but that's up to you. And if you wanted it to animate from location to location (eg: slide between location clicks), get a library that can tween style changes (jquery can do that pretty easy) :) *Please excuse any bugs, I'm writing this off the top of my head.*
Actually, I think adding an id to the iframe would do the trick - but yeah... unpleasant tone
Ah, the joys of copy/paste. Thanks for the clarification for those who didn't know.
They really need to fix touch event handling, it's soo slow (I can't believe they tagged this release without fixing it first): https://github.com/jquery/jquery-mobile/issues/#issue/854
No! I saw..... In work... the "Java" window appeared, and the notched loading circle.... OHHHHHHH! http://www.gameboyonline.com/pokemon-puzzle-challenge-u How on earth did I end up there... I suppose I googled the site name instead of looking at the URL in the YouTube video in 720p.... AWESOME! Coooooool! Javascript... I'm off to look through it... thanks for pointing out my mistake. 
=3 it's all commented. 
LOL at two completely different gameboy color emulators being called by with the same name.
this is why reddit goes down all the time XD. assuming a site had enough visitors, it would be like a ddos. 
what a great idea!
Instead of downvoting, please explain why this isn't true. It seems like this would have to constantly refresh to get new reddit submissions. Sounds like a DDOS to me.
Did anyone else read that as Open Cobweb at a glance? Then Screw it up again as Open Cow Ebb? And for the dyslexics amongst us, OpenCowed.
It's not a DoS attack but it is designed poorly. There is no caching of results and you shouldn't need to be requesting every 5 seconds. You want a minute or two, at least.
like i said, with enough visitors it _would_ be basically a ddos. it may not be a typical ddos attack (like syn flood) but with enough people requesting x amount of reddit posts just by visiting a page could easily take down fragile reddit. add in some code that refreshes the posts from that service on an interval and anyone who leaves that page open are now a ddos botnet.
Are any of those good, or is that just a linkdump?
OK guys, which one of you did [this](http://i.min.us/ieuWpM.png) ?
yep you are right. Even though my point was about reading too much non-beautified javascript, i have to admit that i was too lazy to test proof my example code ... and also too lazy to beautify js when needed.
caching makes this a non-issue
If it's true then so is hotlinking a 14kb image.
thanks!
Nice! - I was trying to mock ajax just the other day with jasmine-ajax - but it mocked *all* ajax calls, even those used by the jasmine-jquery plugin to load fixtures. Will try to give this a go on Monday.
If you're a jQuery user, most presentation videos will hold something of interest for you. I personally really enjoyed Doug Neiner's [Contextual jQuery](http://events.jquery.org/2010/boston/video/video.php?talk=doug-neiner), Rebecca Murphy's [Functionality Focused Code Organisation](http://events.jquery.org/2010/boston/video/video.php?talk=rebecca-murphey) and Garann Means' [talk about jQuery templating](http://events.jquery.org/2010/boston/video/video.php?talk=garann-means). edit: Karl Swedberg's [jQuery Effects](http://events.jquery.org/2010/boston/video/video.php?talk=karl-swedberg) talk is a great tutorial about the ins and outs of jQuery.animate().
Google to the rescue... http://atanashristov.blogspot.com/2011/02/tdd-with-yui-3-find-image-size-with.html
correct.
I saw [cofoja](http://code.google.com/p/cofoja/) this afternoon, and realised it would be good to be able to code like that, but since I spend my days doing mostly Javascript I wouldn't get to use it. So I've basically just ported it across. It's just an afternoon's work so it's probably incredibly bug ridden - don't even consider thinking about using it for real production code! There are some other libraries that do the same thing for Javascript, [cerny](http://www.cerny-online.com/cerny.js/), [ecmaDebug](http://weblogs.mozillazine.org/weirdal/archives/016921.html) and one also called [jsContract](http://kinsey.no/projects/jsContract/) (oops - - looks like I might have to change my name...) ) The difference with these is they all expect you to call a special library within your functions. My library takes the cofoja approach, where you keep your function the same, but wrap it up with annotations that specify the contracts. You can even turn contracts off completely, by setting a variable. It has some tests there, but they aren't in jsUnit - I'll do that tomorrow. My next step is to put contracts on each of its own functions, just to prove it works.
Yeah baby yeah!
&gt;That's 24 bytes right there. Stamp semicolons everywhere and run it through a minifier: &gt; &gt; var a=1;var b=2;var c=3; You're doing it wrong. Minified that should be var a=1,b=2,c=3; 
While it's interesting that syntax can be simplified in javascript, including leaving out curly closures in may places, leaving them in makes sense for many reasons. Mostly, it helps eliminate very hard to debug compiler/minifier errors. Secondly, it helps readability (imo). The entire premise of the site is flawed as appears to state that the use of semicolons is wrong universally. I think if they want to waste their time on something, there are many more severe problems with most of the javascript code that I see. Semicolons have to be the least important problem I can think of.
Personally, I prefer using semicolons to significant whitespace.
I think actually that they state that it should be left up to the author of the code.
&gt; Yes, it's quite safe, and perfectly valid JS that every browser understands. Closure compiler, yuicompressor, packer, and jsmin all can properly minify it. I can assure you that packer requires semi-colons. It won't in the next release but you definitely need them if you are using the current online version.
What a waste of space. This is why the JavaScript community can't get their shit together. Do some real leading and pick a style guide and quit wasting everyone's time with this "its up to the programmer if they should use a semicolon or not" bull shit. "Bike shed painters" is open for business! You're K I L L I N G ME. Leadership?!?!?
Yes, and also very self congratulatory for having figured out something very basic. I honestly find the authors formatting and coding style quite unreadable. Here is an example https://github.com/isaacs/npm/blob/master/npm.js
In a language like javascript, where whitespace is not as restrictive as languages like python, I find that semicolons help with readability. The case made here http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding with point 4 is still a valid reason to use semicolons. Personally, when reading a line of code, it is nice to be able to read till the semicolon and know that it has definitely ended that statement. The author argues that having a semicolon in front is an improvement to readability. My opinion is that just isn't true. Since it would require me to read the second line in order to figure that out. A semicolon prefix gives me no useful information about the statement while scanning through my code. I realize what i'm talking about might be unique to me. But I like my code pretty, unique, and regular (not with seemingly random semicolon prefixes).
Yeah, I feel weird picking at the author's code though when our code isn't out. I think JavaScript needs to just pick a style guide, I could even sacrifice some readability if it just became consistent although it would be nice to kill two birds(readability and consistency) with one stone(guide). I know the record is almost broken but Python's community follows a style guide and maybe its not perfect but it really helps to have a baseline so people don't go off and waste hours(days, weeks?) sorting out if a single character should be used or not.
I'm having trouble taking advice from someone who can't create a proper link. From the source: &gt;&lt;a href="Do you recommend using semicolons after every statement in JavaScript?"&gt;Stack Overflow: Do you recommend using semicolons after every statement in JavaScript?&lt;/a&gt; 
Commas first looks terrible! I get that it allows you to organize/add/remove lines more freely, but I find it much easier to just remember to leave off the last comma. It must take forever to organize it that way. I mean, any (decent) IDE will yell at you if you leave a trailing comma on the end anyways.
BTW, this is the author of one of the linked blogs but I'm not sure about this website compilation.
I use semicolons because the compressor removes it anyways. And besides, it's habit from being a php developer. Context switching is not always easy.
They are necessary in some special cases. Since only a few people are aware of those special cases, it will save time to put semicolons everywhere and be done with it. Use minifiers for minification. Don't waste anyone's precious time with this pointless shit. Same thing goes for hugging braces. You don't need to use hugging braces everywhere. But it's of course easier to use hugging braces everywhere. Or things like `==` and `!=`. Very few people memorized those massive result tables. Don't use that crap. (Use `===` and `!==` instead.) Or operator precedence. Just add some parens to make clear what happens. Run-of-the-mill source code isn't the place to show how clever you are. To be honest, it will make you look just plain stupid. Don't do things that are harmful to the productivity of the whole team. Don't do things that are harmful to your productivity. Don't do things that require additional attention - attention is a very limited resource.
Nobody argues it isn't valid to omit semicolons. People recommend against it because it is a mind-blowingly braindead language "feature" that should not exist in the first place, and can cause confusing errors and other problems. Fuzzy ambiguous syntax *may* have a place in content (e.g. markup), but it sure as hell has no place in programming language syntax. The tragedy of Javascript is that underneath the awful veneer is a pretty elegant language...
Maybe it's just me but I find [this code](https://github.com/isaacs/npm/blob/master/npm.js) to be really, really ugly and inelegant.
Meh. Are we going to have an "IsTheWithStatementWorkingInJavascript.com" next? Maybe I should rush to register "CanEvalReallyCompileScriptFragments.com" first. I can see it now. Blurbs after blurbs of exposing the Lies of the Leaders, claiming those features are broken, when they *clearly* work. Read the spec, people! Alright, fine, I'll be serious for a sec. Sure, you don't have to use semi-colons. The brokenness of magic semi-colon insertion rules on a multi-line return statement is pretty contrived, so you can totally be okay without them. In fact, if you're Isaac, you'll do just fine. But if you're on my team, you're going to run jslint on every one of your source files many times a day. And any non-default jslint option is going to have a very good reason for being set. You see, my team has all kind of folks on it. Folks that have written in C++ for most of their lives. Folks that just graduated. It's a huge time saver to have one clear, non-debatable style for all our JS code. It's also a huge time saver to be able to express 80% of that style as "JSLint must like your code." - No lies. 
If you prefix ( and [ with semicolons you're good to go. Nowhere else are they needed, and the problems with ASI aren't solved by using semicolons everywhere. e.g. function foo() { return { something: 'here' } } Using semis everywhere doesn't save you from ASI, you just have to be careful about line breaks. Whether you use semis or not. The problem isn't omitting semicolons, it's inserting spurious newlines. Keep braces on the same line as returns or wrap the returned expression in parens, `return (...`. http://inimino.org/~inimino/blog/javascript_semicolons http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding You have to know the rules either way. It doesn't matter whether or not you use them, it's purely a style thing. Either way we shouldn't try to make anyone else conform to our preferred style unless they're contribution to a project. edit: Downvotes but no rebuttals. If you ask me that's pretty telling.
The simple solution is to use only minifiers that actually parse JS properly.
Try coding VB.NET for a few months and then going back to PHP etc and your code is so crap and you wonder why it won't compile. Oh missed 5 semicolons. It takes weeks to get back into the habit of rembering to use semicolons again. I can imagine if you start leaving them out in JS while you're doing PHP or CSS your code will start erroring out due to forgetting the semicolons. Keep it consistent throughout the site.
I welcome you to write a JavaScript parser that parses JS properly.
It's a brain dead feature and it shouldn't be there. Everybody who ever wrote a JavaScript parser can agree to that. Don't use it, it kills little kittens.
Of all the pedantic, bullshit, petty things to pick on...
I read that domain as **arse**blah**colon**blah.com
An example that does unexpected things without semicolons: var a = myFunc (someBool ? someFunc : someOtherFunc).apply(... myFunc will be called with the value from the tertiary as the first argument. This is a little contrived, but there care cases where you want to start a line with parenthesis, and it really sucks to try to figure out why it's not working.
The problem/example you describe is a *symptom* of the flawed delimiters in Javascript, not an argument in support of it.
 Love javascript but hate semicolons? There's a language for that: [**CoffeeScript** is a little language that compiles into JavaScript.](http://jashkenas.github.com/coffee-script/) Underneath all of those embarrassing braces and semicolons, JavaScript has always had a gorgeous object model at its heart. CoffeeScript is an attempt to expose the good parts of JavaScript in a simple way. The golden rule of CoffeeScript is: "It's just JavaScript". The code compiles one-to-one into the equivalent JS, and there is no interpretation at runtime. You can use any existing JavaScript library seamlessly (and vice-versa). The compiled output is readable and pretty-printed, passes through JavaScript Lint without warnings, will work in every JavaScript implementation, and tends to run as fast or faster than the equivalent handwritten JavaScript. 
&gt;The tragedy of Javascript is that underneath the awful veneer is a pretty elegant language Where everything is globally scoped. Ugh.
&gt; A mis-assumption that is commonly made, is that number literals cannot be used as objects. That is because a flaw in JavaScript's parser tries to parse the dot notation on a number as a floating point literal. Is that a flaw? Maybe, but for that to change the syntax for numbers also needs to change, for instance: var foo = 5.e2; That equates to 500, so there can't be any properties starting with 'e' otherwise there's ambiguity. I guess a fairly simple solution is to require a digit after a decimal and before the exponent. He has switched the 'call' and 'apply' methods ('apply' should get the array): &gt; Explicit setting of this &gt; &gt; function foo(a, b, c) {} &gt; &gt; var bar = {}; &gt; &gt; foo.call(bar, [1, 2, 3]); &gt; foo.apply(bar, 1, 2, 3); Here the author probably should have ommitted the parenthesis on the first line: &gt; Assigning methods &gt; &gt; Another thing that does not work in JavaScript is assigning a method reference to a variable. &gt; &gt; var test = someObject.methodTest(); &gt; test(); Fairly good document though, haven't got time to read the rest.
This is basically my reply to this stupid question
Why? At least several exist and you can just use one of them. And if you need a minifier use yuicompressor or Closure compiler. They parse real JS not just some subset of it.
ASI isn't going anywhere, we are stuck with it. I don't care if people use semis or not, but rallying for one side or the other is silly. This subject has been discussed to death on the Node mailing list, in blogs, on IRC and twitter many times over. Unless there are new arguments on either side there's no real point discussing this. People who don't really understand ASI need to stop spreading FUD on the issue. Make no mistake, claiming that always using semis is going to "save you from ASI" is pointless. It does nothing to educate people on the real pitfalls of ASI and essentially is nothing but FUD.
For understanding why virtual semicolon insertion is retarded.
Yes, they are necessary: http://oss.org.cn/ossdocs/web/js/es4/rationale/syntax.html (Unfortunately they are not, but if we all would place them properly we might be able to get rid of virtual semicolon insertion at one point.)
Actually go and read the virtual semicolon heuristic that the various (open source) javascript engines do. Not only is it a good idea to do the semicolons yourself, pretty much every javascript engine implements a different heuristic.
I'm not disputing that it's a misfeature, but it is a part of JS nonetheless. If you minify a subset of JS then you don't minify JS, period.
If we get rid of ASI it'll be a backwards incompatible change and you will have to opt-in to the new syntax, just like the [syntactic changes proposed for ES Harmony by Brendan Eich](http://brendaneich.com/2011/01/harmony-of-my-dreams/). Using semis now would make porting current code to this new syntax easier, but there isn't even a strawman or proposal to remove ASI. Discussion on the ES list indicates that ASI is not going anywhere in the foreseeable future. http://old.nabble.com/Rationalizing-ASI-%28was:-simple-shorter-function-syntax%29-td29256435.html Once again the reasons brought up for using semicolons are completely bogus and not based in reality. Again, I don't have an axe to grind here except stopping this proliferation of misinformation. It's bullshit, please stop. Believe it or not [Crockford is just a man](http://crockfordfacts.com/) and isn't right about everything.
The only reason few people are aware that you only need semis before lines beginning with ( and [ is because instead of educate people about the actual language all we seem to do is spread misinformation and FUD about semicolons in ES. It's so incredibly easy. That anyone thinks it's a lot to remember is utterly ridiculous. Doubly so in the context of software development. 1 measly rule, that's it. Instead of saying "Sure use semis if you want, but be aware of ASI and that it may surprise you. Or leave them out except on lines beginning with ( and [, and be aware that ASI may surprise you sometimes. The canonical surprise cited is return\n{ but in practice nobody actually writes code like that so take the warning with a grain of salt.", we instead [support this theory](http://www.penny-arcade.com/comic/2004/3/19/).
Implicit variable assignments, weird scoping for eval, with and a lot more was also part of JavaScript and is gone in the strict mode. What's your point?
&gt; If we get rid of ASI it'll be a backwards incompatible change and you will have to opt-in to the new syntax You already do for strict mode. The only difference here would be that strict mode can be enabled on a per-scope basis and a change to the syntax rules would have to be file global. That however would not mean that nobody could implement that. You could still write JavaScript with semicolons in proper places and by not placing newlines in wrong places and it would work in a strict semicolon context and outside ofit. &gt; Once again the reasons brought up for using semicolons are completely bogus and not based in reality. That is bullshit. There are a lot of reasons why virtual semicolon insertion is a problem. For instance I wrote a tool that extracts translatable strings from JavaScript and writing a proper parser that would support virtual semicolons would be far too complex. Both for semicolons and regular expressions it is basically guessing which is wrong. &gt; It's bullshit, please stop. Believe it or not Crockford is just a man and isn't right about everything. I don't give a flying rat's ass about Crockford. I had to parse JavaScript myself and I can tell you that it's incredible painful and far too complex for a lot of situations where people do parse JavaScript.
This isn't a religious issue. Don't try to make it look like one. Since I'm not anonymous here (5 minutes of detective work will tell you that I'm Jos Hirth)... are you trying to say that you're a "total fuckwad"?
&gt; because instead of educate people about the actual language all we seem to do is spread misinformation and FUD about semicolons in ES. It's so incredibly easy. It's easy? Let me quote the specification for you: &gt; Rules of Automatic Semicolon Insertion &gt; &gt; * When, as the program is parsed from left to right, a token (called the offending token) is encountered that is not allowed by any production of the grammar, then a semicolon is automatically inserted before the offending token if one or more of the following conditions is true: &gt; &gt; 1. The offending token is separated from the previous token by at least one LineTerminator. &gt; 2. The offending token is }. &gt; &gt; * When, as the program is parsed from left to right, the end of the input stream of tokens is encountered and the parser is unable to parse the input token stream as a single complete ECMAScript Program, then a semicolon is automatically inserted at the end of the input stream. &gt; &gt; * When, as the program is parsed from left to right, a token is encountered that is allowed by some production of the grammar, but the production is a restricted production and the token would be the first token for a terminal or nonterminal immediately following the annotation “[no LineTerminator here]” within the restricted production (and therefore such a token is called a restricted token), and the restricted token is separated from the previous token by at least one LineTerminator, then a semicolon is automatically inserted before the restricted token. &gt; &gt; However, there is an additional overriding condition on the preceding rules: a semicolon is never inserted automatically if the semicolon would then be parsed as an empty statement or if that semicolon would become one of the two semicolons in the header of a for statement (section 12.6.3). 
I think you're missing the point here. ASI/Semicolons are not the problem. Here is the problem: "Either way we shouldn't try to make anyone else conform to our preferred style unless they're contributing[contribution] to a project." This kind of shit just wastes everyone's time because every project then spends hours debating the same shit when each member did something different in the last project. Personally I don't find the location of semicolons in my code a way of expressing myself. The debate on the node list, irc and twitter that you mention is case in point. This is the kind of shit that REAL leadership would eliminate. Crockford almost was able to get everyone together but apparently he failed because it says all over his site to just use semicolons and a lot of other things that people don't follow because they want to express themselves with fancy semicolon placement, dropping braces and pushing around whitespace. If you like JavaScript then you're only hurting its progress with this shit. Right now we could be talking about how to improve modularization of JavaScript, improve sharing of JS between frameworks or even handle future integration of new features but instead we are all talking about total bullshit. I think the phrase is "can't see the forest for the trees". Take one for the team and always use semicolons. The problem has already been solved: http://javascript.crockford.com/code.html Now, let's go write some libraries, plugins and apps!
What's my point? What's your point? You're not even talking about parsing anymore, completely irrelevant.
Sorry I'm honestly not trying to make this a religious issue. And I'm not anonymous either. I don't care whether people use semis or not. It'd be like caring about brace style, it's purely aesthetic. I just don't like the misinformation. Sami Samhuri http://samhuri.net http://twitter.com/_sjs
Fair enough, it's hard to parse. I'm curious why you didn't just use an existing parser but I'll give you the benefit of the doubt and assume you had a good reason.
samhuri.net is a parked domain, in case you didn't notice.
I *am* talking about parsing. Because it's very damn common to parse programming languages: * string extraction for internationalization * static analysis * implementing an actual interpreter (necessary sometimes) * detecting end of statements for feeding an interactive interpreter * parsing javascript for automatic comment and function signature extraction (documentation tools) And a lot more. JavaScript is suppose to be a language that is somewhat easy to implement, easy to sandbox and works the same in different interpreters. Semicolon insertion, the weird rules for the regular expression literal, weird rules for function statements versus function expressions and more are standard features that often work different in different implementations of ECMAScript. You *will* run on different implementations, for that the language is just too damn common. So save yourself the trouble and write with semicolons. A lot of tools will not do the extra trouble and implement semicolon insertion. And if they do, chances are they do it wrong and might choke on your code.
&gt; This kind of shit just wastes everyone's time because every project then spends hours debating the same shit when each member did something different in the last project. There's no debate. Founders of a project choose the style and contributors conform. It's just polite. Anyway we're in total agreement.
Sorry I mean easy to use, not implement.
Because there is no parser for JavaScript in Python for instance. Which was the language of choice for the last two times I had to deal with JavaScript (Sphinx for documentation extraction and Babel for gettext string extraction). In fact, there are damn few proper JavaScript parsers available. I don't know any except for the one in narcissus which is written in JavaScript and the ones that are shipping with the JavaScript engines themselves. And you can't generate parsers automatically because of semicolon insertion. All ANTRL grammars you find for JavaScript for instance will ignore or improperly implement virtual semicolons.
It's also not easy to use. Some of the rules are completely backwards. Easy to use would be: "a newline outside of braces or parentheses ends a statement unless the newline was escaped with a backslash. Alternatively a semicolon might be used to end a statement." Instead JavaScript is specified as: "semicolons are mandatory. However if you forget, keep the following 6 special syntax rules in mind and under the following conditions we will add one for you". That's just not very friendly for developers.
What browser are you using? Try adding an error handler and logging whatever error object you get.
I hadn't thought of browser, I'm using chrome right now. edit: also tried in Firefox, Added erroHandler, and response back into original post. (I'm getting [object Object] as the first default jQuery error, and nothing for the second two, although they pop up)
Crap, I forgot about that. Waiting on the registar to sort that out (and to transfer the domain...), expired end of Jan and the reminders went to my old email address from school so I didn't notice until it was parked :/ https://github.com/samsonjs is the next best I've got.
It doesn't look like you're passing in the arguments when the success and error functions get called up top.
Are you bound to XML? Utilizing JSON is much easier.
You're missing a closing brace in your **errorHandler**, that's all.
Re-read the description. That's not the issue, just a copy-paste error.
That's all I had to fix to get it working.
To the OP, here's my version of your code, works on Firefox and Chrome. I've added a function to log debug messages to the body itself, but the only thing I had to change to get your code working was add the missing closing brace. &lt;script src="jquery.js"&gt;&lt;/script&gt; &lt;script&gt; $(document).ready(function () { $.ajax({ type: "GET", url: "./peakflow.xml", dataType: "xml", success: parseXml, error: errorHandler }); }); function parseXml(xml) { dbg("parseXML called"); $(xml).find("reading").each(function () { $("#date").append('&lt;h3&gt;Reading ID: ' + $(this).attr("id") + '&lt;/h3&gt;'); }); } function errorHandler(a,b,c) { dbg(a); dbg(b); dbg(c); } function dbg(str) { var d = document.createElement("h6"); d.innerHTML = str; document.body.appendChild(d); } &lt;/script&gt; &lt;div id="date"&gt; &lt;h1&gt;Readings should go here&lt;/h1&gt; &lt;/div&gt; &lt;!-- end date --&gt; 
Odd, your code seems to work perfectly fine for me in Firefox. As safer mentioned Chrome doesn't like doing Ajax requests from the file:// protocol, but Firefox is fine with it. I see the "go 2" alert, and then the div in the body has "037" inserted into it. Here is the full source of my test: **HTML:** &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(document).ready(function(){ $.ajax({ type: "GET", url: "./peakflow.xml", dataType: "xml", success: parseXml, error: errorHandler }); }); function parseXml(xml){ alert("go 2"); $(xml).find("reading").each(function() { $("#date").append($(this).attr("id")); }); } function errorHandler(a,b,c){ alert(a); alert(b); alert(c); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="date"&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; **XML:** &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;peakflow&gt; &lt;reading id="037"&gt; &lt;time&gt;1725&lt;/time&gt; &lt;volume&gt;490&lt;/volume&gt; &lt;/reading&gt; &lt;/peakflow&gt; 
I tried to get this to work, but I was also having issues. Seems to be an issue related to the new version of JQuery (1.5) which had a large rewrite to the ajax module. I did a little research and found that others were having problems with ajax requests to local files: http://blog.jquery.it/2011/01/24/jquery-15rc-1-released/#comment-525396 http://bugs.jquery.com/ticket/8125 Works fine for me in 1.4.4, so you might want to use that version instead: &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"&gt;&lt;/script&gt;
[safer's comments](http://www.reddit.com/r/javascript/comments/fghj5/a_little_help_needed_jquery_and_xml/c1frqoa) explain the likely problem the OP is having. I have had this issue myself, even.
Learn to use Firebug or chrome's developer tools, where you can load the javascript, set breakpoints, look at variables, etc. It really helps to make sure code is actually being run, and to see what values are being passed back. You can single-step, change variables, etc.
Fixed it for me too. 
Thanks for the help. I'm learning most of this as I go, so all of your comments have been helpful.
I haven't looked into JSON, but I'll look it up today. (Basically, I know nothing, and until you mentioned it, didn't know JSON was an alternative.)
Yup, difference is jQuery 1.4.4 vs 1.5. Working in Firefox for me now.
Depending on the data you're processing, JSON is usually a better method of passing the data into an array.
A couple of related resources (no writeup, though): * http://en.wikipedia.org/wiki/Comparison_of_JavaScript_frameworks * http://matthiasschuetz.com/javascript-framework-matrix/en/ * https://github.com/bebraw/jswiki/wiki/Application-Frameworks Hopefully those help.
Interesting framework! Now we don't have to rely on Flash to do these things. :P But it is still quite a technical process though, as in the person working on the magazine project needs extensive knowledge with HTML/CSS/JS. Will be interesting if someone ports this into a CMS :) 
Pretty impressive looking results from the first sample but some pages with not enough content look unfinished (see Horns of a Melon). Also, there's no way to search a magazine - although that could be coming later in an update? Still, very nice looking stuff -- the pages really do look like a magazine! I also wonder if this could be modified to work with something like Wordpress. 
 Posts like this remind me that Delphi doesn't always suck. 
I'm planning on not very long from now producing a video highlighting the good and bad of Delphi. In short, Delphi is still good for single developers targeting Windows desktop applications. It's best where interop with native APIs is preferred, including COM and native dlls. Delphi is horrible for web pages, services, and working in a team environment.
There are not enough upvotes for you. Thank you
I let the author know of these issues. They should be fixed now. :) In case you find more issues, feel free to use the [issue tracker](https://github.com/BonsaiDen/JavaScript-Garden/issues) directly.
All that fading and choppy animation and no way to turn it off? What an unpleasant experience. I have to be sure to blink every time I change pages so I don't get disoriented.
It's a trick question, Math.sqrt() is part of the javascript engine, which means it's compiled from a lower level language and you wouldn't want to implement it in JS, it would be slower by a factor of at least 5. I'd ask the question to see if someone tried to answer. If they tried, I wouldn't hire them.
 I definitely agree here. It's good for COM, and for native windows development. Some things though, like unicode support, should have come years ago. The class library could use some work too, and TApplication shouldn't have such a strong role as it does now. They should not need tricks like MainFormOnTaskbar := true, but due to how TApplication handles the message loop, they do. If you stick to what it's good for, it can be a decent alternative to c++. 
Yeah, it was pretty choppy, and I'm on a very beefy computer. Hope they can get the kinks worked out; seemed like a decent idea.
No place for JS? &gt;[JavaScript] is only used on web sites. Oh. Never mind. Turns out the author is just plain stupid.
Hey, could you let me which browser are you using so I can hunt down the performance issue? Thanks!
I love it. Anyone tried it with Phonegap yet?
var f = function(){} var x = 9 syntax error. Downvotes explained.
The page turning ability seemed a bit buggy (using chrome). The page numbers would fluctuate from 1 of 2 to 1 of 1.
A friend of mine asked me what the communities current choice in JS testing frameworks is. And I am eager to know.
I had the same issue on Chrome (linux) and FF (mac) both latest versions
 var inc = (function () { var c = 0; return function () { return c++; }; }()); console.log(inc()); // 0 console.log(inc()); // 1 console.log(inc()); // 2
Boom! Closure!
This code is wrong. The point he is trying to illustrate is adding a property to an arbitrary object (and JavaScript functions are objects), but in the code he "correctly" Checks and initiates myFunction.myStaticVar, but then tries to alert and increment myStaticVar, a local variable which ultimately is treated as a global variable (if you get past the reference error) The better solution for things like this is to use a closed local variable from a self executing anonymous function like skeww has demonstrated. Doing it as a property of the function can tough because have coupled the innards of your function with the name of the function itself.
I see what you all are saying (especially the obvious error in his code creating a global variable and ignoring the static). But this really has nothing to do with closures, or at least not in the way skeww has done it. He means static variable as in class variables for reference counting, etc. You could put your class constructor in a function and use a closed variable that way, sure, but either way you have to add a getter for any external code to have access to that, which is not what he's trying to show. The idea is to be able to do something like this: var foo = new Foo(); console.log(Foo.numRefs); //output 1 var foo2 = new Foo(); console.log(Foo.numRefs); //output 2 Sure, he did it wrong, but you can't accomplish that with closures alone, you must use the function as an object.
That's a nice closure you made, but that really isn't what the guy was trying to do.
I also have this issue in Chrome and Firefox in Windows with a pretty high end machine. Tried with IE 7 just for laughs but the page doesn't load.
Same effect and cleaner code.
Sure thing, it's Chrome on Windows 7, running on a ThinkPad W510 (NVIDIA Quadro FX 880M). But no matter how smooth you make the animation, I just don't want it - even a perfectly smooth scroll of that magnitude is going to be uncomfortable for me - so I'd really like an easy-to-find end user option to turn it off. Thanks!
I think it can surely be made to work with Wordpress. After all, it just grabs what's between the &lt;article&gt; tags and then proceeds to format. It's still too early to tell how much, but I don't doubt that someone (maybe me?) will make a Wordpress theme out of it.
hehe yep I agree. I guess that's the easy part, the hard part is defining the various styles for various articles... perhaps through defining category styles then? the theme IMO needs to be custom built for the magazine for it to work really well, but we can always come up with a framework for people to setup their Treesaver Wordpress theme. :) 
That's a straw man, nobody writes code like that. You should be writing it one of these ways: var f = function(){}, x = 9 or var f = function(){} var x = 9 If you want to write it on one line you obviously need a semi colon. But if anyone wrote code like that in a project I worked on I would fix it, that's just stupid unless it's something trivial like `var a = 1, b = 2` which would still be only one statement.
The author seems to be ok with a public static var, and if he corrected the mistakes in his code it would achieve that. Private/protected static vars are much harder, but most JS devs would argue that you don't need these and can instead rely on conventions such as prefixing "private" properties with an underscore or two. Sorry, I've wandered off a bit... This still isn't the same as a static member in Java as if you subsequently add methods to the prototype they can't see the "static" var. Maybe someone can improve on this. var Foo = (function() { var c = 0 return function() { c += 1 this.foo = 'blah' } }()) 
I may have misunderstood. I was thinking you were implying this code would work minified, when it wouldn't. But I see somewhere else you said that the minifier should be a proper javascript parser (the more popular ones aren't, hence the argument). So n/m. But semicolon insertion is a mis-feature anyway. White space should either be significant or not, not sometimes significant.
No, not same effect. Unrelated effect. I'm not saying getters and setters are a huge problem, but your way requires them, and the OP way does not. Edit: Also, I love closures, don't get me wrong. But they are absolutely in no way cleaner. We're talking "Foo.bar" vs. "foo.bar()" (where Foo is the class/function name, and foo is an instance of Foo).
Crosspost from /r/funny
if someone writes "Use jQuery" as a tip on learning JS it does not deserve my attention.
&gt;No, not same effect. My function behaves exactly the same as his. The only noteworthy difference is that my counter variable is private. You can of course also change it to attach the counter to the function itself. E.g. like this: var inc = (function () { var i = function () { return i.c++; }; i.c = 0; return i; }()); console.log(inc.c); // 0 console.log(inc()); // 0 console.log(inc()); // 1 console.log(inc()); // 2 console.log(inc.c); // 3 But why would you want that?
I'm learning jQuery first and it's motivating me to learn JS. That's actually one of the points of the article... learn a library but try to make use of actual JS when possible so as to minimize the bloating and over-dependence of libraries.
[If you work with browsers and the DOM] You should use some kind of base library, which takes care of normalization. You can either write your own or you can use an existing one (like jQuery or YUI or whatever) and benefit from their hard work. There are many resources available, there is documentation, and they also do excessive testing.
True, the scope thing is pretty... wow. I suppose it'd be more accurate to say underneath there is a language that is very close to being a pretty elegant language...
Examples where lacking semicolons can cause problems are well-known and used by those who disagree with you. You are beating on a straw man anyway, nobody claims that using semicolons is going to solve *all* the related problems - but it solves some. Can you provide an example where using explicit semicolons causes problems but omitting them does not?
&gt; Examples where lacking semicolons can cause problems are well-known and used by those who disagree with you. Besides lines beginning with ( and [ I bet you cannot name one. Because that's the only one. I don't have to provide examples where using semis causes problems because I never made that claim. That would be a ridiculous claim. edit: I can't believe I'm getting sucked back into this. Go ahead and spread your misinformation then, I can't reason someone out of an idea that they weren't reasoned into.
Just open up google and look up "static variable" and hit "I'm feeling lucky." There you will find that indeed there is a programming construct called a static variable. That is what the OP posted about and which your construct does not match. What you have made is a private static variable. Don't argue about whether you would want to make it public, just understand that there may be a case where one would want it public. 
&gt;you will find that indeed there is a programming construct called a static variable Yes, but that concept doesn't really exist in JavaScript. Trying to mimic concepts (or using patterns) from one language in another is usually a bad idea. Using the constructs which are directly provided by the language usually works better. Your team should be familiar with them, which makes it more maintainable. Attaching properties to functions (or regular expressions or arrays) is generally a sorta weird thing to do. &gt;understand that there may be a case where one would want it public It is public in my second example. The difference here is that setting it to `undefined` will break it, since the increment function doesn't do any checks.
In other words, no, you can not. QED.
I'm somewhat of a newbie so I'm hoping you js gurus can enlighten me. In the article, he defined his closure as: // Define the Employee class function Employee(num, fname, lname) { this.getFullName = function () { return fname + " " + lname; } }; // Instantiate an Employee object var john = new Employee("4815162342", "John", "Doe"); What is the advantage of that over this (which is what I'm used to doing): var Employee = function(num, fname, lname){ var _num = num; var _fname = fname; var _lname = lname; return {getFullName: function(){ return _fname + " " + _lname; } }; }; var John = Employee("23", "John", "Doe"); I've always thought that closures are made when a function is returned, am I wrong? 
Wow, very well done!
You should not use any libraries if you don't have any idea what is going on 'inside' it. If you know jQuery it doesn't mean you know Javascript. Yesterday, @VeganBen twitts about that - "Hiring a dev because of their skills with a library is like hiring someone to drive your wife to the maternity ward because they rock at GTA" (http://twitter.com/#!/VeganBen/status/34707394856493056), and I completely agreed with him. 
jQuery is written in JavaScript, so a closure is the same in both. jQuery has its own ways to handle the gotchas of closures, but I'll let a jQuery expert answer to that. As to closures in general, I tried to give a reasonable concise explanation a little while back (let me know if any of it is unclear): http://davidbcalhoun.com/2011/what-is-a-closure-in-javascript It doesn't go into the details of where you'll have problems with closures (event handlers, timeouts, "this" scope in instances, etc.), but it's a start.
we use [jsdoc toolkit ](http://code.google.com/p/jsdoc-toolkit/) and are happy with it. maybe take a look at [this comparision](http://www.slideshare.net/ted.husted/api-doc-smackdown-ae2009)
I'm surprised by how much contention this is causing. What the OP posted is a well known fact about javascript and I would assume anyone would see similar code and know what it is and what it's for. I thought the post was not worthwhile because it is like saying "check out this feature: the if statement". This isn't bolting on some feature to a language where it doesn't match. This is exactly what a static class variable is in any language. It is part of the language it just doesn't have a keyword "static" to make it explicit. Example: http://ejohn.org/apps/learn/#19 Again, I'm not saying this construct should be used for all things. Sometimes a closure is better. But it is a feature and should at least be known.
To answer your question, there are 2 definitions of "closure". The correct definition, and wrong ones. To call a self executing function a closure is misleading. Closures are useful when they actually contain a stack frame that is not deallocated like you said. That doesn't require a self executing function. Example: (function() { alert('hello world'); }()); This self executing function does not create a closure. However, the meaning of what you read was probably referring to using a closure as a way of keeping variables out of the global namespace, e.g.: (function() { var myPluginVar = 12; //define my jQuery plugin here }()); When you define your plugin in that function, it can use myPluginVar as if it were global although myPluginVar is not global. That is a suggested practice because otherwise every plugin you used would add misc. variables to your window which have the potential of colliding.
&gt;You should not use any libraries if you don't have any idea what is going on 'inside' it. That's incorrect. You're basically saying one shouldn't use a JPG encoder/decoder library (for example) if you can't write one yourself. Of course you're also utilizing APIs from the operating system (directly or indirectly), but that doesn't mean that you absolutely need to be able to write your own operating system (and BIOS of course) from scratch just because you want to write a little application. But it's of course a good idea to take a closer look at the libraries you're using if you want to learn what makes them tick. &gt;If you know jQuery it doesn't mean you know Javascript. Obviously. &gt;"Hiring a dev because of their skills with a library [...]" What a silly thing to say. Of course no one would do that. But if a developer (also) happens to be familiar with the libraries you're using, it's definitely a plus.
Your understanding of closures is, for the most part, correct. Your confusion with jQuery's use of the term "closure" is this: jQuery's docs are saying that you should *create* a closure by writing a "self executing function" (`(function(){}())` or `(function(){})()`). This is a good practice because: 1. You are less likely to pollute the global namespace (on accident), and 2. You can write your code (plugin) assuming `$` refers to the jQuery object even if the user of your library overwrote the `$` global object.
I'm not sure of other reasons, but the first version allows you to access the constructor from an instance. E.g. var e = new Employee(1,'my','self'); e.constructor === Employee; // true Whereas the other one does not: var e = new Employee(1,'my','self'); e.constructor === Employee; // false e.constructor === Object; // true However, what I like about the second version is it makes the **new** operator optional: var e = Employee(1, 'my', 'self'); e.getFullName(); //returns full name
The function that is assigned to the object during construction is a closure. So in this case getFullName encloses fname and lname when they are passed into the constructor. The function is not returned but continues to exist because it is retained on the object itself as a property. I don't like either of these forms. The best and most straight-forward version of JS OO I have seen has been refined by Crockford and can be found here: http://javascript.crockford.com/prototypal.html You will have to apply any kind of initialization yourself. In the world of prototypes it doesn't always make as much sense to initialize something as it does in classical inheritance. Crockford's version is kind of the best of both worlds though(the article and your code). You don't have to knot your brain everytime you need "new" but you still get to use inheritance. In your example the variables prefixed with _ are unnecessary since num, fname and lname are already only bound in the constructor's scope and can be used in your getFullName closure. Also your example doesn't use inheritance, so you can't go around later attaching things on Employee that will show up in all employees which could be done with real prototype inheritance. Also you can't extend Employee with another constructor in a way that doesn't just copy everything from Employee every time rather than sharing it(bean counters gotta count). Its arguable if that is a good idea though. This kind of class/instance example doesn't really show off the features of prototypal inheritance. Ha its also arguable if anyone has ever come up with an example that did. I guess I would go so far as to say that it is over-rated.
&gt;What the OP posted is a well known fact about javascript [...] Yes. Same as adding properties to arrays or regular expressions. But that doesn't mean it's a good idea to do that and it also doesn't mean that it's a popular pattern. &gt;This is exactly what a static class variable is in any language. Usually they are attached to classes (or instances thereof), not functions. &gt;Example: http://ejohn.org/apps/learn/#19 Again it's an example where that thing probably shouldn't be public.
I really like that way of doing it. I tend to mix and match the different OO patterns in JS as I need them, but Crockford's object function is very short and powerful. I will use something like that from now on probably.
Functions **ARE** classes in javascript. They are the constructors, i.e. the only thing that could be considered the class. When you say "new Foo", Foo is the function, ergo the class. Yeah, that is an example. Examples are usually contrived to be simple. But my point was to demonstrate that this is a feature of the language and it has its uses. The only reason not to attach properties to arrays or regular expressions is if you are working with badly written third party code that doesn't know how to deal with that. Of course it should be done with caution if at all, but you sound more like you're just attacking it from a religious point of view.
I hate websites that have it when I have an image I really want to use. Tell me which page I should avoid.
&gt; This self executing function does not create a closure. I would say it can create an *empty* closure. But otherwise I agree 100% with the rest of your comment.
Thanks for your helpful reply! That really helps me understand more of JS's little tendrils. I definitely need to read more on this.
`/* Like so. */`
The point is that disabling right click doesn't actually prevent people from downloading images. 
You can still get around that, you might lose some clarity but you will still get the image u want
&gt;Functions ARE classes in javascript. Functions are objects (and so are arrays and regular expressions). There are no classes in JavaScript. &gt;When you say "new Foo", Foo is the function, ergo the class. It's a constructor function (hopefully), not a class. &gt;you sound more like you're just attacking it from a religious point of view. I'm not attacking anyone. **Edit:** http://www.phpied.com/3-ways-to-define-a-javascript-class/ (He wrote JavaScript Patterns - a very nice book) &gt;It's important to note that there are no classes in JavaScript. Functions can be used to somewhat simulate classes, but in general JavaScript is a class-less language. Everything is an object. And when it comes to inheritance, objects inherit from objects, not classes from classes as in the "class"-ical languages.
Doh I read left click.
That doesn't stop them either.
Hey, while you are at it, you should also prevent people from right-clicking and viewing source.
How many clarities are we talking? Five? Eight?!?
Then what the hell am I thinking of...
Maybe you could tell the CEO this: Those who won't be able to take our images due to right-click disabling are not the same people who we should worry about taking our images. Obviously this won't always hold true, but it might be a start. EDIT: Also, if it is image theft he is worried about, the only way to guarantee the images aren't stolen is to never let them be seen or downloaded at all.
You could render the images in a SVG/VML object. But that wouldn't prevent people from taking screenshots.
you could also place an absolute span on top of the image so that when the user clicks there's no 'view background image' or 'save image as..' options. it still won't stop someone who really wants the image, it will still piss off some of your users, but I think it's a nicer solution
This article makes me cry inside. I won't nit-pick, but some things (mostly misinformation) really bothered me. &gt; Object-oriented programming basically represents physical, real-world objects that you want to work with in code. No one writes OO code like this. &gt; In order to create objects, you need to first define them by writing what's called a class. Not in JavaScript. In traditional OOP languages, yes, but that isn't a requirement of OOP. Although the author corrects himself later, the claim was still alarming. There are some missing semicolons in the examples, but that's forgivable. (Please, let's not get into the semicolon argument; I just like to see code *consistent*, especially for articles explaining a language, more than being of a certain style.) var data = []; data['type'] = type; This is ridiculous. It's not just a typo; it's deliberate that the author used an *array* as a hashmap, and it's deliberate that the author used a hashmap instead of (more statically safe) plain variables! &gt; using the *this* operator. For one, `this` is a keyword, not an operator. For two, it's more correct to say the `this` value or object, as you're really talking about modifying the object to which `this` refers. For three, sometimes you don't even use `this` or a reference to `this` for public members (as @lemonizer mentioned implicitly). &gt; If `data['fname']` returns a value, it gets set. Otherwise, it doesn't, and nothing breaks. This is a really bad way of saying this. `data['fname']` *does* always evaluate (not "return") to some value. If the `fname` property wasn't defined, it evaluates to the undefined value. `this.fname` *is* set; you can check using the `Object#hasOwnProperty` function or the `is` operator. I do give the article credit for encouraging an event-driven class design, however. Good job there! 
I can't tell if you are baiting me or not here but sadly I go for both synthetic and live bait. I don't think we are quite in agreement. I'm saying that ALL JavaScript developers should strive to all follow the EXACT same conventions not just whatever that project founder feels like. Founders can have styles for whatever higher level patterns they want but letting project founders all make up their own low level coding conventions just creates fragmentation. I hate this stupid website because all it does is open this crap up for debate for every founder rather than just letting the JS community globally finally agree on one damn thing. The tone of this discussion is a good sign though that people are finally coming together behind something. It gives me hope. Its small but everything has to start somewhere. The JavaScript community, as represented in this discussion, is waiting for you to get on board.
Just to add to the rest of helpful comments, closures in javascript are used to provide scope. Scope is what vectorjohn said about variables and the global namespace. As it is, only functions have their own scope in javascript so its common to use the terms "closure" and "scope" as if they are the same thing. It doesn't need to be self executing function, really. That is just a way of coding. All you need is to pass a variable to a function, at which point a copy of it is made and is only accessible within that function.
YUI Doc, because it supports things like `@config`, which is kinda essential for our module thingies. Downsides are speed and the amount of dependencies. It's pretty annoying to setup.
You don't need to do declare _fname, _lname etc in the function again since these variables are passed in the function and they are enclosed. You are duplicating code basically.
LOLOLOLOLOLOL. the only real thing that matters is to block hotlinking. that's a valid concern, but again, not a javascript block, should be server side.
The main point about closures is functions can always access variables defined in their surrounding context. var greeter = (function(name) { var greeting = "Hello "; return function() { var out = greeting + name; greeting = "Bonjour "; return out; }; })("reddit"); alert(greeter()); alert(greeter()); The closure returned from the first anonymous function and stored in "greeter" can access the local variables and arguments of the outer function, even after this has been executed and is no longer accessible. 
think its usually around 5...
You should give him a demonstration of how easy it is to "download images" with right click disabled.
Make sure you also prevent ctrl-U and ctrl-shift-U
Main point against it: most right click script also have annoying alerts when you try to right click to open a link in a new tab... big usability concern. For the rest, like people have already mentioned, there's so many ways around it that there's no point really. 
Should crosspost this to r/programming. Very impressive!
Thanks for posting this!
I did that, but apparently File &gt; Save As... was too complicated for the average user to figure out.
You can't view an image without downloading it. Your boss is horribly misguided, and this will do *nothing* but bad for your site and business.
not as funny the second time.
Your lack of logical reasoning is remarkable. Yes, you win. Uncontested. Good job, 10 internets to you sir.
...and disable access to the internet for the website entirely, or it's all in vain and THEY"RE GONNA MOVE YOUR GODDAMN CHEESE
What about a screenshot?
I'm not trolling. And we're not quite in agreement. I appreciate your point of view but I don't think it's realistic. &gt; I'm saying that ALL JavaScript developers should strive to all follow the EXACT same conventions not just whatever that project founder feels like. That would be great, but without a BFDL to mandate 4 spaces or whatever like Guido can do for Python that is just a pipe dream. Some people indent with 2 spaces, some with 4, some with tabs. Some like hanging braces and some don't, some like spaces around operators and some don't. Some like spaces between keywords and conditions, some don't. The semicolon thing is a non-issue in comparison! Generally people use them and that's that. I personally don't use them in my JS unless it's an open-source library that I want others to use. I make a pragmatic decision to include them because some will turn up their nose if they don't see any semis. It's ridiculous, but I do it anyway because people don't understand the issue and when people don't see semis they get uncomfortable because they don't understand the rules about when they're necessary. It's easy to tell them the rules, but their minds have been tainted by all the misinformation out there. I'm trying to put a stop to the misinformation but everyone here is putting their fingers in their ears and going "LA LA LA!" ... which is why I've given up trying to reason with them.
* Screenshots. * File -&gt; Save As. * Drag/drop image to desktop/folder. * Print Screen. * CTRL+U (etc...) * Inspector/Firebug (Also, working in a large corporate office, i'm still amazed how many people "save an image" by Print Screen + paste into Word, save as DOC then email to friends... *bangs head on desk*)
Or watermark them...
Your head is broken, give up.
It was cross-posted yesterday, actually, just not very popular there :) http://www.reddit.com/r/programming/comments/fhc1k/maze_generation_in_javascript/
Note that the mazes are actually implemented in CoffeeScript, which then compiles down to Javascript. Thus, the JS sources are not particularly readable, since they aren't meant to be maintained directly. The CoffeeScript code for the mazes, if anyone is interested, is at http://github.com/jamis/csmazes.
I had a tech savvy boss once that spent at least 2 months trying to achieve this for legitimate anti-competitive reasons. He gave up because it is impossible to do (at that time.)
Why does this site redirect to Google the second I click on it?
CTRL-I is my favorite for that (Tools-&gt;Page Info) Then choose media and you have a great list.
It sure is nice when people just keep telling you that it is retarded even after you stated that you agree. I believe you want: &lt;img src="..." oncontextmenu="return false;"&gt; To everybody just complaining about it: we developers don't always get to make the right decision about this kind of thing. [You gotta do what you gotta do](http://i.imgur.com/DVBQt.jpg).
You're right to point out that your CEO is a bit naive, but this is a real concern people have. Obviously, keeping your files inaccessible while trying to serve them on a public site is sort of a paradox, but you should try to make the effort to avoid being raided by bots or a wget statement that can strip your entire site's content. I haven't actually tried this, but can you load an image through a canvas element, and will that prevent people from saving the image?
Start looking for a new job. If the CEO is able to trump knowledgeable developers so easily, then this is only the beginning. I'm 100% serious. It's a great market for developers right now. You don't have to work at a crappy company.
Your CEO should have *no say* in anything involving the internet. Some people should just NEVER be allowed to make decisions about this kind of thing. He is internet cancer.
&gt; He gave up because it is impossible to do (at that time.) Don't worry, still impossible.
I think it is naive to think the boss doesn't have a point. I have seen many websites that have stolen media used on their own sites and flyers. and a simply onclick return false script will solve his issue without affecting his customers. put a click handler which popups a smooth little error in the bottom right that fades away. it's easy to weigh up my head. Disabling images = "no harm done to anyone, boss is happy, possibly noob competitors which there are thousands of in the SMB world now cannot figure out how to use your graphic" Not disabling images = "..."
honestly, I would say you might be better off with a water mark. People will take images if they want them, but a water mark with your address will bring people to your site if the image is really worth taking. 
Depends on how big the pic is!
Load up Chrome 8. Drag the goddam image from the webpage to your desktop.
wow, this would be a *really really* petty thing to quit over. 
It's a sign of bigger issues with the company, is his point.
Don't forget Command+U!
That's a comment, not documentation.
Best you can do is add a fully opaque watermark to the image that isn't easily cropped out, even then if someone is determined and has the skills they can often remove it to the point most people wouldn't be able to tell. 
Any browser with scripting disabled would bypass any right-click block. Opera also directly allows the user to block website from interfering with right-clicks. Edit: The more effective way to block image saving is to make the whole webpage Flash which is a horrible thing to do anyway. Then again, they could always decompile the Flash file and see what they can find.
He has a demonstration of an iFrame on his page which is google.com Google doesn't like being iFramed in (for user security issues) and busts out of the iFrame redirecting to Google
i understand your pain, but honestly, it's not that hard to do oncontextmenu="return false;". works in enough browsers that he should be happy enough. 
Um, no.
Well, you can still printscreen. A much better solution would be to instantly trace every IP, find their address and send psychopathic people with big muscles and iron bars that usually clean their teeth with barb wire to watch them while they browsed the page.
Excellent. Except for people using IE. And people using FF who get 'Save Image As' as a right click option. 
I can't really think of a better way to track state on a page where most of the work happens on the client. You either lose the speed benefit of JavaScript with a full postback to update the url, or you decorate the url with hash tags along the way so you can share that same state with others. Who runs with JavaScript completely disabled in this day and age anyways? 
Ok, you're splitting hairs. It is important to note that there are no classes strictly speaking, but the constructor **is** the class. Just because javascript doesn't call the constructor a class doesn't change the fact that that is exactly what it is. Bottom line is, there is no functional difference between setting attributes on a javascript constructor (function) and setting attributes on a class in a language that supports "classes" (i.e. one that uses the name class instead of function). &gt; Functions can be used to somewhat simulate classes... This statement proves my point. Since functions can simulate classes, the logical place to put static variables is on the function. This is a perfectly legitimate and straightforward implementation of static variables. 
Ok, you're splitting hairs. It is important to note that there are no classes strictly speaking, but the constructor **is** the class. Just because javascript doesn't call the constructor a class doesn't change the fact that that is exactly what it is. Bottom line is, there is no functional difference between setting attributes on a javascript constructor (function) and setting attributes on a class in a language that supports "classes" (i.e. one that uses the name class instead of function). &gt; Functions can be used to somewhat simulate classes... This statement proves my point. Since functions can simulate classes, the logical place to put static variables is on the function. This is a perfectly legitimate and straightforward implementation of static variables. 
Simply dragging the image into the address bar/new tab is my favourite.
Unless you're a software _engineer_. Then you can and must rebel against things you honestly believe are wrong.
Selectively disabled, yes, because people can't seem to prevent themselves from being annoying using Javascript. If your page gives me what I want without Javascript, I keep blocking it. If I'm following a link from someone else and your page won't load without it, I leave. I only turn on Javascript if I get direct benefit I want (if you're Google Docs, for example). If you're using it to serve me ads from off your domain, sorry. I might turn it on to support you if your site is worth looking at more than once, I might turn on javascript at the third visit. Those are the rules. So yes, I don't look at lifehacker or gawker anymore. Not that I looked at them that much in the first place, especially Gawker, whose entire site seemed to hover 1mm above classification as spam.
And also make sure that Printscreen is disabled!
&gt;Bottom line is, there is no functional difference between setting attributes on a javascript constructor (function) and setting attributes on a class in a language that supports "classes" (i.e. one that uses the name class instead of function). There are no access specifiers (and no class based inheritance). Usually you want these things to be private. It also only makes sense if you use a "class"-ical programming style. But even then you usually don't want to break encapsulation. A closure is a better choice in both examples. Things like the "Yahoo module pattern" also utilize closures to make things a bit nicer. I'd rather go that route. &gt;This is a perfectly legitimate and straightforward implementation of static variables. *Non*-`final` `public static`, that is. Aka the thing you virtually never want.
People need to grow up and enable Javascript. Stop expecting things to work without it, eventually more sites are going to do this. It is 2011, your browser is more than an HTML renderer. The whole argument about "their site had a Javascript error so their content was all missing, therefore javascript was the problem" makes no sense. If there is any error on the server side, the content will all be missing, it has nothing to do with where the error happens.
I only browse the web on vinyl. If your website doesn't come on vinyl, I leave.
Well until now the Gawker group of sites with the new system is still pretty buggy. I hope they will fix the bugs soon... sidebars that doesn't load, and just now when I scrolled down Lifehacker the ad on the sidebar scrolls up with the main content as well making it floating out of the sidebar box, lol. Not to mention the design itself is really kinda disappointing... the typography is the same for all the network of sites, looking like they're coming out of the same free theme from freewpthemes or something. :/ 
`history.pushState` would be a much better way.
I recently made a site which i think personally does it in a better way, I have a normal url as the links, so google can crawl it. and the server checks whether the request is an ajax request and serves up either the whole page or just the content required(via xmlhttprequest) ref: bbc.co.uk/music/showcase
can't say that really inspires much confidence in his javascript analysis abilities.
There were plenty of reasons in the linked article that have nothing to do with the typical end user having JavaScript enabled.
Use client.send()
Yup. And so so easy. Sadly I think it's only supported by webkit atm?
Screen readers can't read javascript content.
Post this comment to r/netsec ... see what kind of responses you get ;)
best practice is to store a list of logged on users along with their sessionId so you can make sure the use you're doing a client.send to is always the right user.
I think what he's trying to do is not to make it impossible to download the images, but to add a barrier to it so most users won't be able to do it.
This technique isn't horrible as long as it's implemented to fallback gracefully. All your URLs should point to actual content. The one thing this article gets wrong is that Twitter does this properly. If you go to http://twitter.com/tputh/status/35308646145466368 (no hashbang) with javascript disabled, you get the tweet just as you would with http://twitter.com/#!/tputh/status/35308646145466368 with javascript enabled. Same thing with Facebook. The hashbangs are only in effect for javascript enabled browsers to enhance the experience, they do not fundamentally break the sites. This is not true with the Gawker sites, and a miserable mistake as the article so perfectly outlines.
Done. Don't really get why I'm getting downvoted for being confused though.
Firefox 4 supports it. Opera 11.01 (current stable) doesn't support it yet. (I expect that they will add it within the next 3 months.) IE9 doesn't support it yet. There is also no official statement available. A demo page can be found over here: http://html5demos.com/history
I've seen some dubious attempts at this over the years. A certain big dating site does this with profile images. It puts a transparent div over the image, so the right click doesn't hit the image. A piece of piss to circumvent for the tech savy. The most devious method I saw was a commercial technology that split the images in to strips of a few pixels high. So you could right click the image, but you would only save a tiny portion of the image. Back in the day (I'm old), there was a browser plugin that rendered images in an 'overlay', which is stored in a separate area of video memory. The only reason for this was that when you saved a screenshot, the plugin content appeared as a blank square. I wouldn't recommend the OP look for a new job over this. Honestly, if you quit everytime your boss makes a stupid request, you will barely make it past lunch.
even easier is simply inspect the html source and find the url of the image. Simply put that url in the browser and viola, there ya go.
What's the site url? After you disable right-clicking, I'll grab all available images and email them back to the CEO.
I agree with you. This post is full of high and mighty "revolt! Quit your job! This is an outrage!" posts. Of course, someone like ourselves who *really* wants that picture will have many ways to get it. But your average non-techy fool may be foiled by simply having this one thing disabled. I work in market research and occasionally we will do research for clients that includes images of concept products. Think: a new candy bar for Hershey's or a new line of dog treats for Pedigree. Clients require image protection, and we tell them that nothing is 100% but we do make an honest effort to cut off as many 'save' methods that are possible. It wouldn't really be very good for us to scoff in their face and call them fools for even suggesting such a silly idea. Chances are that the only people who would want to save our concept images are competitors or people who want to distribute those concept images, and chances are pretty good that they're not going to fire up firebug and root through the html structure to find the image path. Chances are they don't even know what Firefox *is*.
I still remember years ago someone I knew tried to achieve the same thing (preventing people from downloading the images), but he found a different solution: he had cut the images (fortunately, there weren't many of them) into many, many small pieces and used html tables to reconstruct them. I still remember the hate in the guy's eyes after he had spent hours putting everything together, and I just asked him "What about print screen?"
&gt;This technique isn't horrible as long as it's implemented to fallback gracefully. The point is: It's not possible. A hash doesn't point to a specific resource. The hash also isn't sent to the server. If JS is disabled it simply won't work. &gt;The one thing this article gets wrong is that Twitter does this properly. If you go to http://twitter.com/tputh/status/35308646145466368 (no hashbang) with javascript disabled, you get the tweet just as you would with http://twitter.com/#!/tputh/status/35308646145466368 with javascript enabled. Eh. Yea. Now go to the second one with JavaScript disabled.
I had a client that demand disabling all right clicks. I feel your pain. 
Regardless of the progressive enhancement argument (which I support for a blog site), the problem with this gawker update is the horrible implementation. Their site is slow, the implementation gets in the way of me doing what I want, e.g. The sidebar breaks if I am zoomed in at all. Also, if an article starts to load from using the keyboard shortcuts, I get blocked until the full article loads. I am a developer that understands the importance of a redesign, but when your implementation is so poorly done and you don't follow basic ux patterns to the point where you piss off the people that know what's going on behind the scenes, you deserve to get users that are raging. So yes ms. Trapani, I did give a week for the new design (I frequent io9) and my final response is own up to the mistake and tell us how gawker is fixing it because your content is worth it IMO.
I'm amish, I don't believe in graven images, so if your site has any pictures of people I leave. Also I leave when my kids get tired of walking on the treadmill to power my generator.
Or just place all images in a seperate div and display them with background-image I like your idea though
But you're not going to get the second one from a search engine, and there IS a canonical URL for each page.... which was the bulk of the article's argument. The article was not against enhanced AJAX sites, it was against non-canonical URLs and lack of search engine visibility. Hash-bang with proper canonical URLs is the best way to handle AJAX loaded content. I would go as far as to say it's the only way to handle AJAX loaded content while maintaining the ability to link to specific "pages" or "states". It's not perfect, but I think in that scenario the benefits outweigh the con that someone with a JS-enabled browser sends a friend a hash-banged link who has JS turned off in their browser.
&gt;Hash-bang with proper canonical URLs is the best way to handle AJAX loaded content. As I already [mentioned](http://www.reddit.com/r/javascript/comments/fht5b/breaking_the_web_with_hashbangs_gawker_like/c1g2mdn), `history.pushState` is better. From a technical standpoint, that is - not a practical one.
then use an animated gif with interlaced lines, flickering at 20ms intervals. If you want to prevent your images from being shared, make them butt-ugly.
&gt; But you're not going to get the second one from a search engine Search engines are not the only source of links on the web. Say I, average user with JavaScript enabled, want to link to a tweet from my blog. I go to the tweet, copy and paste the URL from my address bar into the article I'm writing, and publish it. Now somebody with JavaScript unavailable reads your blog and clicks the link. What do they get? A blank page. Same goes for practically every source of links in existence. With the sole exception being Google, because Google wrote this spec that was intended as a last resort and were the only people to implement it. &gt; Hash-bang with proper canonical URLs is the best way to handle AJAX loaded content. It's really not. Proper canonical URLs using pushState to reflect any Ajax transitions are the best way of handling Ajax loaded content - when Ajax is appropriate. If you are loading more-or-less the entire page content with Ajax, like Gawker, it's pretty pointless. 
Cool cool cool.
Oh, we can do better than that--find your favorite torrent site and contribute some cool pictures!
Also stop any JS consoles, like Firebug or native Chrome!
Yes, we do. It's called a free market economy. If the job is imposing ethical dilemmas on you, why should you continue working there? Awful.
At that point, they probably deserve to show it off as their own work, having put some 10 hours into it by then...
pushState is only available to ~20% of web users right now (http://caniuse.com/), and it's unclear if IE will even support it in IE9. There are far more users with browsers that don't support pushState than there are people who turn off Javascript in their browsers. With that in mind, #! is the only practical way until pushState is at LEAST supported by current versions of all major browsers.
http://labs.learnboost.com/socket.io/ Google is your friend
Wouldn't practicality count towards what's "best"? Breaking your site for 80% of visitors versus breaking it for the 0.01% who disable JS in their browser?
You can check if `history.pushState` is available. &gt;0.01% who disable JS in their browser? Typically it's around 2-3%. Some ecommerce sites get more than 10%.
... and once all browsers support that, I agree.
Yes, you can check - but what do you do if it isn't available? Fall back to Hash-bangs? If so, you're not solving any of the problems. ...and if you're in a market where up to 10% of your visitors won't have JS enabled, you aren't going to use JS period for anything critical. That doesn't support the "pushState is best" argument :P
I don't know what what Node provides for server-side mechanics, but with EventMachine I've done what you want using a "subscription" (this is our protocol) message to connect a user to a particular EM::Channel. Whenever a message is sent to a channel, only people subscribed to that channel get the message. It scales from 2 users - (a lot) without a hiccup.
 &gt; There are far more users with browsers that don't support pushState than there are people who turn off Javascript in their browsers. That isn't really relevant; if you use Ajax where pushState is available and fall back to normal links where it isn't, it works for everybody. I'm not proposing using pushState and leaving everybody else out in the cold. &gt; With that in mind, #! is the only practical way There are plenty of "practical" ways, for some values of "practical". All of them bar one break one thing or other, making them a bit less practical in my view. The most practical way of going from page to page on a website is via a simple link. Having a single *actual* page and emulating link-following behaviour with JavaScript is a colossal hack, and adding fixes on top of a faulty foundation isn't going to fix that. 
&gt;Fall back to Hash-bangs? Either that or non-ajax. &gt;If so, you're not solving any of the problems. Good browsers will display proper URLs. Users with those browsers will copy/paste proper URLs (which will work for people without JS). By the end of this year about 70% of the German users will have a browser which supports `history.pushState`. So yea, it does (gradually) solve a problem and over time it's getting better at this. &gt;if you're in a market where up to 10% of your visitors won't have JS enabled, you aren't going to use JS [...] for anything critical Progressive enhancement is a wonderful thing.
Do you think your response means anything? All your attempt at reductio ad absurdum means is that you're unwilling to take seriously what I wrote. In the end, it's a question of only letting code run on my computer if I judge that I get some value out of it (leaving aside any potential security issues). If you don't care about that sort of thing, good for you, but people who run websites should know that there are people who do, if only to get them to think a little more about their use of javascript; a site that only displays when javascript is being used could hardly be said to serving anyone's interest well.
I had a client demand this as well. They created jewelry patterns and constantly had little old women saving/printing/using their patterns. I argued up and down that there are countless ways to bypass any attempts to stop this. Their point (which is 100% valid) was that these little old ladies wouldn't know how to get around it. I started with a js method which destroyed my soul. I later rewrote things, removed the js and layered a transparent image. Any attempt to right click would result in them saving trans.png.
Firefox isn't a good browser now? The end of this year isn't today. There's progressive enhancement and there's pre-emptive enhancement.
How does this affect your experience as a user? I don't see Javascript being used for client side validation being harmful. A quick AJAX call after I enter my user name to tell me it's already taken is helpful, as well as dynamically updating a shopping cart or removing elements from the page. I'm a developer and it just seems absurd to take a whitelist approach to Javascript when it's such a huge part of the web experience today.
Yes, website - we're talking about web applications here. Not the same thing. Also works vs works well isn't a trivial distinction either. Frankly I'd be a hell of a lot more concerned that my Firefox users are able to enjoy the same usability as my Chrome/Safari users than I am about people using ScriptBlock. ...and in some sectors, preventing ScriptBlock users access to your site might be a good thing depending on how heavily you rely on ad revenue. To be clear, I'm not defending the Gawker redesign or use of #! - I think it's a complete blunder especially considering the basic rules of using #! aren't even being followed. I just don't think #! is a blanket no-no.
&gt;Firefox isn't a good browser now? "will" Firefox 4 supports it. &gt;The end of this year isn't today. Why would you make a website which won't even last till the end of the year?
A website using hash-bangs works today in all browsers, and will continue to work tomorrow. It's not like once FF4 comes out hash-bangs magically stop working.
Yes. The point was to generate/use real URLs if possible. Right now: Users who use Chrome/Safari will copy/paste real URLs. Soon: Firefox and Opera (and maybe IE9) users will do the same. `history.pushState` should be your first choice. It does exactly what you need.
Also make sure to disable wget and curl. 
And if you dont, you're only dragging the whole profession down the shitters. In the future that guy on the image might be you instead of this [guy](http://www.kelleytown.com/images/Simpsons/Scorpio.jpg)
As long as they aren't relying on javascript for validation *only* it's perfectly fine.
[SocketManager](http://brianstoner.com/blog/multi-channel-websockets-with-nodejs-and-socketio) will be able to you what you want with some modifications. I have a modified version that stores sessions and channels in MongoDB
Unless it is "remove the context menu, and rape children" I don't see the problem. anybody we has never had a job that forced them to do something they didn't 100% agree with is one lucky asshole. I would not agree with this, I would argue against it, but quit my job? It is hardly that big of a deal.
thank you. People who work for people OFTEN find the things they want their superiors to do to be petty or just plain stupid. If you quit every time you have to do something stupid that your boss wants, you'll be quitting an awful lot of jobs. I have a great job, I always have to do stupid things. In fact, I've had a couple great jobs, and in all of them I had to do things I thought were pointless or stupid. Also, quitting over this?? Quit if there's a problem, not if there *might* be a problem down the line.
I think that's the crux of the issue. #! is great for web applications (Gmail, twitter, etc), but horrid for websites like Gawker. They're cool and being tried out in all sorts of places where they make no sense, like every other piece of web technology before it.
so why quit now? Why not quit if one of the other problems this is supposedly a sign of comes out? 
They did move my cheese!
I used Socket.IO source as docs :\ Don't know if situation is changed since then.
&gt; Yes, website - we're talking about web applications here. Not the same thing. When did we stop talking about websites? Gawker's a website and you were talking about search engines earlier, which is usually relevant to websites not web apps. &gt; Also works vs works well isn't a trivial distinction either. Yes. Links work well for going from page to page. Ajax does not. 
I like saying FU Google and just ignore hash-bangs completely for ajax sites. 
Great article. I've been saying this is bad for the Web for at least two years. I knew it was going to catch on when I saw Facebook's total dependence on JavaScript being touted as cool. 
Also, there is the browser cache that people can go by.
I don't know much about this API, but it looks like it sets the video ID property when a new YT.Player object is created. Could you just set player to a new object with your second video's ID inside of the 'onPlayerStateChange' function?
Because by then, it could be too late.
I would love to interview the guy at the next job after they quit. "So, Mothium, what made you leave your last job?" "They made me remove the context menu from images, and that was too much for me." "...I think we are done here"
you've run into a common problem, and the most common solution is to create the *illusion* that things are working slower than they are - that is, add in a small timer that has to run its course as a minimum before the lightbox drops. it's generally enough, and many studies have found that the delay gives people the sense that real work is being done (not that it isn't). basically, call the ajax function, set the animation, set a timer (doesn't even have to be long, 1-2 seconds) that then looks to see if the job is done and hides the animation if it is, or waits for the ajax success response. you're also checking on ajax success to see if the timer has run its course.
Too late for what, exactly? To quit?
I tried this function rescanstart(){ setTimeout (showlight(),1); setTimeout (rescan(),500); } but it didn't do it. I'm guessing you're saying make a while(lightbox is not visible){ A=A+1;} or something like that right? I'll give that a shot. edit: nope.. didn't work.. the property is being set, but the screen isn't updating.. any kind of delay I put in there like a pause is just more intensive code that doesn't result in anything. Grrr. everything runs exactly the way I want it to, it's just not redrawing the window to show the lightbox. 
i got tons of downvotes for bringing that up, but seriously, who the fuck has a job that their superiors NEVER ask them to do something they think is pointless. I work for a university, a good 25% of my day is spent doing things I *shouldn't* have to do because some director somewhere thought it would be a good idea. And, this is an AWESOME job. I find it funny because my job before this was working for a web development shop, and I would put that snippet of code on sites all the time. I know it doesn't *actually* stop image thieves but it makes the client happy.
I am not defending Gawker's moronic decision to turn their blogs into a set of web apps. I'm against the notion that hash-bangs "break the web". Did Gawker break their site with their poor implementation? Absolutely. Did Facebook and Twitter? No.
&gt; When did we stop talking about websites? Gawker's a website Web applications are more general use. The concept that data is served via http from a resource does not mean website. An API that has services for a multitude of devices, that do not expect (nor require) strict HTML, is distinct from a website. YMMV
&gt; I don't see Javascript being used for client side validation being harmful. A quick AJAX call after I enter my user name to tell me it's already taken is helpful, as well as dynamically updating a shopping cart or removing elements from the page. I never complained about this. My major complaint is people who use javascript to do url routing so that you see nothing unless it's turned on. Likewise for those who use javascript as a method for delivering what can be done with CSS. When I want to use a shopping cart, I turn Javascript on, I have no problem with that. How many times do you actually buy on a site when a site you visit has one? Why should I care if the cart is operational when I'm not buying? Why should you? It's just bad business to break the site and prevent browsing from people who are doing research with javascript turned off. I'll just go "down the street" to a more user-friendly competitor's site. &gt; I'm a developer and it just seems absurd to take a whitelist approach to Javascript when it's such a huge part of the web experience today. This says it all. Javascript makes your life easier, so you don't see why you shouldn't be able just to jam it down your users' throats because you want to. The fact you must understand is that however responsible, competent and/or ethical you may be with Javascript, there are lots out there who aren't and they give people reason to be circumspect about the idea of allowing others to run code on their computers without some pretty strong assurances that it's not going to screw something up. It's bad user experience design to use Javascript to do what can be done without it or to have a site break because javascript is not turned on when javascript is not essential to the site's functioning, and you just have to face up to that fact and integrate it into your work.
This is bloody annoying. In Chrome, it's not even redrawing the button up after the click until after my code completes. it's an xmlhttprequest btw. 
finally after much chewing of furniture and cursing of Google devs and pulling of hair. try{ window.setTimeout("showlight()",1); window.setTimeout("rescan()",750); } finally{hidelight();} } this did the trick. The rescan() function is the intensive code. 
No, to miss all the other opportunities. The job market could have changed. If he needs to get out quickly he doesn't have a second gig lined up already. Any number of things.
Try this: function rescanstart() { setTimeout(showlight, 1); setTimeout(rescan, 500); } You have to pass it the reference to the function. Before you were sending it the result of the function call.
The documentation wasn't all that clear to me at first either. Each client has a send method (unicast to that particular client) and a broadcast method (broadcast to all clients, including the client whose method you're invoking, if I'm not mistaken). You could just access the clients array that socket.io maintains (.clients) and append a "channel" property to each client when they connect, then clients.forEach(function(c) { if (c.channel==='channel_on_which_message_was_received') { c.send('message'); } }); Alternatively you could filter the entire map and pass a second argument to the broadcast method which is an array of sessionID's to exclude. i.e. if (channel!='whatever') excluded.push(client); 
Ah.. I see.. learn something new every day.. I've wondered about that.. in this case, the functions don't return anything, they just do their thing, but I can see where that would be a problem.. Thanks for the tip. 
The downvotes are odd - it would be a stupid thing to quit over, and not knowing how the rest of the company/job is this could just be an odd-ball outlier case of the CEO meddling where he shouldn't. Some times you gotta deal with a bit of shit for an otherwise good job. Now, if it was the head of your development team doing this, then yes - that'd be raising some serious red flags. But when you have someone that is fairly far removed from the technology aspects, they are bound to have a few stinkers for ideas. If the OP had a serious issue with it, he should bring it up with is manager and have his manager push back for him as they tend to have a bit more pull with higher level executives. But even then - some times you just gotta deal with shit. 
Perhaps if it was the head of the development team. CEO's, especially if it's not a tech-oriented company can have some pretty odd-ball ideas and some times, it's just worth it to suck it up. Especially for such a minor issue. Now, if the CEO was trying to force the development team to make an Enterprise scale application in VB script because that's what he learned in a 2 day seminar of Microsoft Office training - then I'd be getting out of there quick.
This is one of my favorite online javascript learning resources. The interactive console and code blocks are great.
no.
Gotta love a book about JavaScript that says OO is fad that happened to catch on.
is this just a completely invalid design pattern? I'm been looking into using something like backbone.js
And then... &gt;Object-orientation's longevity can largely be explained by the fact that the ideas at its core are very solid and useful. In this chapter, we will discuss these ideas, along with JavaScript's (rather eccentric) take on them. The above paragraphs are by no means meant to discredit these ideas. What I want to do is warn the reader against developing an unhealthy attachment to them. I think his description is pretty fair, and really applies to many ideas in programming, as well as a lot of programming languages themselves. People tend to become more interested in evangelizing and attacking various dogmas rather than thinking objectively (hah) about the concepts. It's refreshing to see someone be honest about that in a programming book.
Ask yourself whether you're happy to have visitors to your webapp execute any arbitrary query against your database. 
This would be a perfect use case for CouchDB as it is built upon apache and is thus accessible through HTTP be it client-side or server-side: http://couchdb.apache.org/ http://guide.couchdb.org/draft/why.html
thats why I'm asking about access control. I've been thinking about it, and I think what I'm actually looking for is an API. Since this is just a small experiment site I'm planning, I think I'm going to build the (external) API first, and then just create a web interface with that API
Additionally, I would check out these sources on ways to add access control to CouchDB: http://blog.couchone.com/post/1027100082/whats-new-in-couchdb-1-0-part-4-securityn-stuff http://guide.couchdb.org/draft/security.html http://wiki.apache.org/couchdb/How_to_add_client-side_security
thanks a ton for the links! CouchDB does seem to be exactly what I'm looking for, particularly couchapps. I've been thinking about it though, and I think I'm just going to implement an API (with some auth) over redis using Flask, and then just use that API from the webpage. This will involve me just serving a static webpage and do all the templating and rendering in javascript. This might be bad practice, but I'll have a full featured API, so I don't think its a cardinal sin, esp just for an experimental learning project.
As far as redis + Flask, I don't think there's anything wrong with that and should give you some extra flexibility. As far as rendering client-side, A LOT of Javascript devs and major sites are doing this now such as Twitter which uses Mustache.js, my personal preference. Other pure JS templating recommendations would be: HAML.js - https://github.com/creationix/haml-js Handlebar.js - http://yehudakatz.com/2010/09/09/announcing-handlebars-js/ and the Underscore.js' built-in templating system, which would be highly compatible with backbone.js as it will already be included: http://documentcloud.github.com/underscore/#template 
thanks for the comments, everyone. I think I have much clearer understanding of what "closure" means in the context of jQuery as well as in the broader sense. 
Link to the actual [library](http://www.limejs.com)
Your weird personal obsession/hangup/history/whatever... thing... with this issue does not make me illogical. It's not my fault you've pissed away however many hours hand-waving about semicolons.
Awesome book, that said, I think it could do with being typeset a little better for the sake of clarity and readability.
I bought the book not knowing it was available online. However, no regrets. There are some areas that will require some re-reading on my part. Too bad Javascript is looked down upon by a good number of the web population -- apparently some people surf the net with javascript intentionally off.
I'm sure it's mentioned multiple times in the provided links, but checkout couchapp http://couchapp.org/ Also, anytime you have questions, also checkout the irc channel and mailing lists. IRC channel is on irc.freenode.net #couchdb
Thank you CrabDude, you have been really helpful. I was looking around, and I think I like jQuery's templating system the best, so I'll probably use that. I'm used to my Jinja2 templates from Python, and in as non-insulting as way as possible, I don't think any of the javascript templating solutions come near that.
From all the logs I've looked at on sites I've built only about 1% of users do not have Javascript enabled. Faith restored?
Suggestions are very welcome. (If you mean the online version. The paper one is out of my control.)
Seconded. He really helped me learn a lot about javascript. I'd been meaning to donate to him for a while; instead I just went and bought the book.
The Amish have broadband now and downvoted you.
Thanks for sharing, am gonna start readnig it now...! :D I started doing Javascript from jQuery, so yeah I'm the kind of designer that backtracks from jQuery to Javascript lol. This will help a lot!
I'm just curious.. how exactly did you make the HTML version of the book? edit: for me these changes make it a bit more readable: book.css &gt; line 5 (div.content): color: #353535; font-family: arial,sans-serif; line-height: 150%; book.css &gt; line 69 (code): background-color: #eee; color:#666; 
Heh. What a coincidence. I was about to ask for a book which is suitable for people who are completely new to programming. My little brother wants to start with JS and all of my JS books¹ are written for people who already know how to program. [¹ JavaScript: The Good Parts (Crockford), High Performance JavaScript (Zakas), and JavaScript Patterns (Stefanov). I can recommend all of them. They were very useful.]
I wrote http://eloquentjavascript.net/book.txt , and a Haskell script that munges that into the appropriate HTML.
Be warned though, while the book starts from the basics, it ramps up pretty steeply. Depending on your brother's character, this will either frustrate or delight him.
He generally reads pretty tough books (economics, politics, statistics, voting systems, city planning, and other weird stuff). He should be fine, I guess. I always preferred concise books myself. I only read technical books though.
Thanks. I like the bigger line height. Applied some of your changes.
My reaction came from a Reddit thread from yesterday on Gawker. A good number of people said they surfed with Javascript off. I know -- data sample and all that.
Haha, good to hear this. The chapter on OOP has me all puzzled. The same thing happened when I covered OOP on PHP. I guess I just gotta play with it and accept it.
Long answer: yes.
The big annoyance about this article for me, was the use of this.method = function() within an object instead of using ObjName.prototype.method = function(){...}. Why? Because methods that are attached using this.method will have a new copy of that method created in memory every time an object with that prototype is created. Using ObjName.prototype will not expose you to this memory leak (I'll call it a memory leak because most people don't understand the difference, and therefore see it as simply favoring a certain syntactic convention without understanding the implications of using that convention). example: var Person = function(age) { this.age = age; this.getAge = function() { return this.age; } } Every time a new person is created, each individual object has in memory its own copy of .getAge. This is nonsensical and is a memory leak (at least until there are no more references to the objects and GC finally cleans it all up). Define it as: var Person = function(age) { this.age = age } Person.prototype.getAge = function() { return this.age; } And all instances of person will share a single method allocated in memory for getAge (in both cases, the individual objects can override the "prototype" getAge by setting this.getAge explicitly, so there is no difference there. However, using .prototype prevents those methods from accessing private variables within the object (for example, this will not work): var Person = function(myAge) { var age = myAge; } Person.prototype.getAge = function() { return age; } But this will work: var Person = function(myAge) { var age = myAge; this.getAge = function() { return age; } } It took me a long time to understand this distinction and it pretty much cleared up for me why I should be using .prototype for almost all cases where I need to create a whole lot of an object (say a game object created for each instance of a 2-player boardgame, or multiple chat room instances, etc).
Fear mongering about ASI is bullshit. It's not a "weird personal obsession" about semicolons, it's a "weird personal obsession" with the truth. If you tried to tell me that dinosaurs lived on Earth 6000 years ago I'd react the same way. I'd also like to point out that I've mentioned the single case where you *need* semicolons, and nobody has been able to identify any others (because there aren't any). I'm not the one hand-waving here. Forget it, I can't believe I'm still biting.
Looks like there's something with jQuery UI called "draggable". Might this work?
Already made, I don't know (there may or may not be something close)... but you can find code that you can build on (maybe like the one Clayburn mentioned). Can you provide more of the use case? Is this personal or something you want to make?
I find it hard to trust anyone touting a new script when they haven't even implemented it on their own site.
Yes, if I'm understanding what you want to do correctly the 'draggable' method in jQuery UI will do the trick very simply.
Why do I keep seeing videos of a gameboy emulator running in a web browser? I feel like I missed a class.
Because every time grantg changes a line of code he makes a video and spams Reddit. This is only a slight exaggeration.
So true (Insert karma-whore reason or self-circlejerk reason)
Cuz Grant is spelled with a G.
what
It's a play on words
this is so screwed up. It's a play on words for HTML, written in SQL, posted in the wrong subreddit.
You could have used Markdown or reST, you know? That would have saved you the trouble of writing your own converter. I'm pretty sure there are tools to convert either into LaTeX and HTML.
Yes, but the issue was mostly that Gawker created a load of crap. It's bad practice to make your _website_ entirely dependent on JavaScript, especially if it's just a blog. A good case can be made for webapps like GMail or the internals of Twitter (even so, the public-facing bits should at least remain crawlable, which is where hashbangs come in to save Twitter's arse). You should learn about unobtrusive JavaScript and graceful degradation (if not progressive enhancement) before you go wild with JS in your designs.
Your biggest problem is you need to restrict the actual queries that are available from the web. This is probably why some suggested CouchDB with CouchApps. The traditional approach is writing a thin API layer that interacts with the DB and handles auth/auth itself. Exposing your database directly is always a bit risque.
Where's the fun in that? I needed a project to learn Haskell.
Fair enough.
nice thinking, comparing offsetWidth of two different key characters, nice implementation.
Yeah, it was a dumb joke the second I thought about it. Though, I do have float in there.... Well, I rightly got downvoted. Thanks to the community for keeping my bullshit in check.
"Japanese" and "Hieroglyphs" both show Katakana, and Hiragana isn't shown anywhere at all
I've got no problem with this, but I don't have the power to bring you into the positive alone.
I've added support for detection of Hiragana. The unicode used for the detection of Japanese &amp; Egyptian Hieroglyphs are completely different.
I appear to have working fonts for Glagolitic, Gothic, Hieroglyphs, Hiragana and Osmanya (at least, correct glyphs are displayed next to the name), yet they appear in red, so something is probably wrong with the tests. Maybe an incorrect assumption that the fonts shouldn't be fixed width. Also, "Aramaic" is misspelled.
&gt; Languages that cannot be detected: &gt; &gt; * Bopomofo Mind explaining why you can't detect Bopomofo? Also, why do you detect by language instead of by block? What if I want to detect support for Unicode arrows? Edit: I just noticed that your script relies on `fontExists = charA.offsetWidth !== charB.offsetWidth`, so it's completely broken for monospace fonts. A better solution is to compare characters to the missing character replacement using a canvas.
Looks like you want [node.js](http://nodejs.org) Server side javascript, nice api, should be very easy to pick up. 
I suggest Rhino as File I/O Javascript solution. Blogpost about standard input&amp;output in Rhino: http://michalbe.blogspot.com/2011/01/javascript-from-command-line-standard.html
In Windows you can use JScript, which is basically Javascript with COM access so you can work with the file system and interact with various other classes. [Here's a JScript filesystem example.](http://ns7.webmasters.com/caspdoc/html/jscript_filesystemobject_object.htm) The setup is similar to VBScript, but the syntax is more like JavaScript. You would execute it with C:&gt;wscript myscript.js or simply double-click on the js file.
Well said. I use javascript for UI and C# for the backend in my projects.
Clearly you don't understand some of the benefits an all JavaScript stack provides. * Your models/view models can be shared without maintaining them in different languages. * Validation does not need to be duplicated across languages. * Templating can be the same across your application. * Less knowledge required to do the job means it should be easier to hire people (Try finding plenty of qualified people both excellent at client-side JS and a server-side language to fill a medium company in a non-tech hub)
You forgot to mention that node.js is also nice for command line tools. Another option is [phantomjs](http://code.google.com/p/phantomjs/), which is basically a headless Webkit thingy ([recent thread](http://www.reddit.com/r/javascript/comments/f8xbh/phantomjs_minimalistic_headless_webkitbased/)).
I second node. It's pretty awesomesauce. In addition to being a slick environment, it also has a great community. If you do IRC, check out #Node.js on freenode.
so sad you are getting downvoted because of C# :-(
It depends on what you want to do really. For general system scripting, or for web programming node.js or some other flavor of SSJS is probably your best bet. For more app-y type things you have options like Adobe AIR, Mozilla Prism, XULRunner, Rhino, etc etc. There's also a wide variety of things that have JS bindings or are scriptable with JS, so you can do things like write Windows Desktop Gadgets. There's tons of other stuff I've forgotten I'm sure.
It seems you've been the serious victim of downvote-because-I-disagree sydrome. I don't fully agree with what you're saying, but it is definitely true that JavaScript was designed for that one specific purpose. JS is evolving rapidly to meet a host of other demands, but it's immature at best at the moment.
I don't know why you are getting down voted. My work has gone the same route, it actually works really well.
If you want to to do systems programming, use [node.js](http://nodejs.org/) If you want to build GUI applications you can use [appcelerator](http://www.appcelerator.com/) It can even make applications for the iPhone and Android.
Oi... that Titanium stuff looks great!
Try http://ringojs.org 
almost all the characters in the 'Bopomofo' block have the same width, so detection becomes difficult. As you've said this detection will fail for Mono Spaced fonts. As this is a work in progress all the drawbacks will be fixed and the detection will be made robust. Any contribution to make this library better would be most welcome. I thought of detecting using canvas, but I didn't venture in that direction as there is no canvas support in IE 6, 7 &amp; 8. But I think, I should give it a try.
&gt; [ECMAScript/JavaScript] is neither intended nor particularly well suited for wide use outside of a browser environment Care to back up those claims? I'm interested in how you came to this conclusion. AS3, for example, is used in Flash, which spans across web and desktop environments.
Apart from Node.js there is also Seed (GNOME + SquirrelFish Extreme) and Gjs (GNOME + SpiderMonkey). The latter is used in the GNOME shell. I tried it, but as of now I think it isn't mature enough.
Have you seen Rebecca Murphey's [jQuery Fundamentals](http://jqfundamentals.com/book/book.html)? It focuses on jQuery but there's a good JavaScript introduction.
definitely
So sad that the circle-jerkers don't care that using it on Windows is a non-trivial task and has no chance being used in a business environment already using C#.
Downvoted, not because I disagree (which I don't) but because this is _ad hominem_. Just saying.
Or, you know, node.js. This just seems like perl bindings to Mozilla SpiderMonkey.
I just get annoyed when people write javascript that uses no jQuery and make it into a jQuery plugin. All you have done is prevented people not using jQuery from being able to use it. If course jQuery is so "hot" right now that everybody just seems to look for a plugin first, even when it clearly has no business being one.
This. A thousand times this. Why would I want to tack 25kb of code onto my already functional script?
While it may be true that the set of features for a given combination of ua / version doesn't change; things can be turned off or configured to behave differently. Isn't the main point of using feature detection the fact that it determines whether the features needed **can actually be used**, not whether the user agent supports them? 
So noobs can feel comfortable with it. 
phantomjs is great, tested it out and really like it. will be using it more in the future.
Looks useful, thanks.
WebGL is hot shit! In a year or two when it's in every non-ie browser we're going to see some amazing stuff. You should cross post this to r/threejs - nice job!
You get much more bang for your buck with JScript.NET. It's so easy to use and so powerful, I never use JScript scripting any more. Here is example code I wrote to create a simple windows form using JScript.NET. This demonstrates a few simple things; a text input box, a button with an event handler, command line arguments. import Accessibility; import System; import System.Drawing; import System.Windows.Forms; import System.IO; package JScriptNET_Demo { class JScriptNET_form extends System.Windows.Forms.Form { //global variables var demoTextBox = new TextBox; var demoButton = new Button; var args var appPath function JScriptNET_form() { // Main application entry //get command line arguemts if there are any args = Environment.GetCommandLineArgs(); if (args.length==1) {args=undefined} //get the path that the app is running from appPath = String(Application.ExecutablePath) // Setup Form this.Text = "JScript.NET form demo" this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog this.MaximizeBox = false this.MinimizeBox = true this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen this.ClientSize= new System.Drawing.Size(250,100); //Setup form textbox demoTextBox.Text = "hello world" demoTextBox.Location = new Point(5,5) demoTextBox.ReadOnly = true demoTextBox.Width = 170 demoTextBox.Height= 40 this.Controls.Add(demoTextBox) //Setup form button, with click event demoButton.Text = "CLICK ME" demoButton.Location = new Point(5,35) demoButton.Width = 110 demoButton.Height = 20 demoButton.BackColor = System.Drawing.Color.Green demoButton.ForeColor = System.Drawing.Color.White demoButton.add_Click(demoButton_Clicked); this.Controls.Add(demoButton) } //this is an 'Click' event handler function demoButton_Clicked(o : Object, e : EventArgs) { //display either the arguments passed in, or the path the program is being executed from demoTextBox.Text = args || appPath //show a message box with a list of files in the folder MessageBox.Show(getfilearray(String(appPath).split("\\").slice(0,-2).join("\\"),"" ).join("\n")) } // File System Functions function getfolderarray(thisfold,filter) { if (filter=="") {filter="*"} var getfolders = Directory.GetDirectories(thisfold,filter); getfolders.sort() return getfolders } function getfilearray(thisfold,filter) { if (filter=="") {filter="*"} var getfolder = new DirectoryInfo(thisfold) var getfiles = getfolder.GetFiles() return getfiles } } } Application.Run(new JScriptNET_Demo.JScriptNET_form()); To compile, you have to have at least .NET 2.0 installed on the computer, and you should have jsc.exe in the path. jsc.exe /t:winexe demo.js This will compile the source to a file called demo.exe I've built many applications with JScript.NET including ffmpeg front-ends, GPS tracking software, multi-axis robotic control with many serial port I/O channels, all with JScript.NET. It runs as fast as any other .NET supported language (C#, VB.NET, etc), and almost all of my front-end javascript browser code will run in it without many modifications (mostly just removing/emulating dependencies on DOM stuff the browser has) *Edit - Added some file system functions 
Nice demo. You have a twisted mind. I like it.
I won!
 # Xs that you must Y is always blogspam. Write a substantial article if you want hits.
I like to play with (or try) new technologies and I really enjoyed creating this. But I am not sure if i like the idea that browser does everything. And does it less than half good as native apps do (for example video). If You look at WebGL from browser perspective than, yeah, it looks amazing and futuristic. But if You look at current WebGL demos (the ones circulating the web) from PC perpective it looks so... So 1999-ish. So there is a lot of to catch up and I am not as optimistic about it's future as You are.
bad ass. time for me to learn some WebGL. at first I wondered why there was no jump key, then I realized I couldn't actually visualize a giraffe jumping. The carrots are an acceptable alternative.
just added a bunch of these to my Google Reader. Thanks, OP.
will give it a try.. looks interesting.
If you are going with CouchDB and haven't gotten too far along in the JS development look at the CouchDB + backbone.js bindings. https://github.com/janmonschke/backbone-couchdb Very slick
Interesting... it says it uses [Wesnoth Map Editor](http://www.wesnoth.org/)! Do you know what was it used for?
It is half-joke... Wesnoth Map Editor was used to paint ground's texture. The one that says "giraffe from hell". Other textures was painted with GIMP.
We will probably also see some annoying stuff. WebGL might become the next &lt;blink\&gt; tag. Prepare to deal with websites that insist on using if for basically everything. You click a link and the pages fly around the screen. It will be great until you have seen it a few times then you will just curse the delay, reduced readability, cpu usage, lack of accessibility options for the disabled, extra bandwidth as you download all those textures and mesh data. Then again when you try and view it on your netbook or mobile phone with underpowered hardware and tiny screens. Quite a bit of that can be resolved with some smart thinking about how you would go about applying such effects. For example at least offer an option to enable 2D mode (which will be needed anyway to handle all the nonWebGL systems and IE). On first visit do some quick benchmarking on the hardware to see if it's fast enough before enabling 3D. Ensure the 3D stuff isn't messing with the basic HTML formatting so things like accessibility don't break. Be sane with textures (try doing most of it procedurally with shaders). Hopeful most devs will remain sane, a small 3d animated logo might not be so bad (although can still be distracting if it's doing too much). Some subtle 3d effects that don't distract from things such as a subtle 3D background. Of course for every sane developer is a advertiser trying to deliberately distract you as much as possible.
It all depends upon what you're using it for, IMO. The most basic usecase for 3D, as I see it, is getting a better look at items in a webshop. With laser scanners today, we should expect them to present us with a 3D model you can zoom in on and inspect in detail. I think it's better to get the support in the browsers now instead of doing catchup after all of them have been doing it in flash for 5 years. That's what happened to video, and I'd rather not have more sites requiring me to run a plugin.
Where is the section for "Html programming"?
How was this ad hominem?
Got to hear John Resig speak at a talk recently. Good list!
I wonder how this compares to gamejs ad propulsionjs
Or that vast section many clients somehow know about: Make me a fancy website by tomorrow thanks to your magic stick and being able to read my mind, kthxbye. It would be good to torch that section.
can I haz javascripts too?
The selection is still pretty good, the labeling on the other hand...
Bad news. Your giraffe is retarded and can't walk backwards.
They have better selection than even they know. Back when I was working in Pick BASIC I went around to all the local stores looking for a reference book and finally found one tucked away with the Oracle books at Microcenter. The book actually wasn't in their computer system anymore. They said it was probably supposed to have been returned to the publisher for not selling. But they let me have it for cover price anyway.
I code in HTML. Am I missing something? ;)
Let me disregard live() and delegate for a bit to ask... is there a diference between using bind('click'...) and click()?
No. Methods like click() are shortcuts offered to make your code a little more concise and readable for the most common use cases.
What wparsons said. also, there is no difference between $(s).trigger('click'); and $(s).click();
Very nice writeup, thanks!
I've read/skimmed about a half dozen of these articles and never seen any of them present a case where .live() is preferable to .delegate(). But neither have they said "live is just old baggage, always use delegate instead". This one says that .delegate() is "generally preferred" and gives good justification, but then has section titled "Why .live() or .delegate() instead of .bind()" - implying that .live() is not completely useless. So can anyone think of a use case for .live()? It would be pretty disappointing if all these articles are trying to get you to use .live() without any justifiable reason..
jQuery is so confusing to me as a MooTools user. MooTools has two methods to add events, addEvent and addEvents. Delegation works with those methods //basic event addition element.addEvent('click', fn); //delegate element.addEvent('click:relay(selector)', fn); I'll just use bind and delegate if I have to use jQuery. Honestly jQuery feels like it has excess methods in its api
This is the only example. Lines starting with ( and [ need a semicolon at the beginning. That's the only rule you need to know to omit semicolons.
I have not used MooTools so I can't really compare the two libraries, but I think direct binding and adding a delegate are different enough to justify distinct methods. I like that the method name spells out which is being in done, instead of having it in part of a string. That said I don't really object the MooTools way either. It has the added benefit of displaying how delegates actually work, which probably makes it easier to learn and understand than jQuery delegates.
"[Traditionally](http://ejohn.org/apps/learn/#2)" bind meant changing the scope of 'this' in an object, jQuery used that verb as a shortcut of addEvent[Listener]. The only reason that I say that is because I think of binding as doing something totally different than adding an event listener. Event delegation isn't that much different than adding an event, its just that the event isnt fired unless the target matches whatever you defined. So, I totally see why the MooTools devs chose to make it the same method as non-delegated events. It keeps the api consistent, and like you said; it shows what is happening element.addEvent('click:relay(a)', fn); Easily translates to "for all As clicked that exist in element, run fn" jQuery having multiple functions that basically do the same thing is not at all a good design decision to me. It is confusing and allows for "best practices" articles like the one linked. Why not just include the "best practice" as the only way? 
Xhtml programming FTFY
At this point, live() is really unnecessary, and you should not use it. If you think you need it, you don't, and even if you do, you can achieve the same thing as live() with $(document).delegate(), and you do not have the wasted selection. If you need me to say it, I will: live is just old baggage, always use delegate instead.
XSLT programming.
Usually the Javascript books are filed under "Java"...
Node.js, webos, appcelerator come to mind 
Well, the MooTools way is more verbose, which goes against jQuery philosophy: "Write less, do more". You are free to disagree with the jQuery philosophy, but it is what it is.
every single technology used in webdev...if we're talking JSON too.... i think you could reword your question as to say, what technologies can't JavaScript touch? or What makes JavaScript so powerful that it can interact with so many technologies? but i think this one is mo betta: What are some JavaScript(s) that allow technologies to be more than regular (and/or basic implementation) Technologies? node.js, html5.js, etc. not saying you're wrong or trying to be snarky. just think that JavaScript is the heir apparent; all the rest are merely her subjects. 
Come on man, verbosity has nothing to do with this $('#container').delegate('a', 'click', function() { alert("That tickles!") }); vs $('container').addEvent('click:relay(a)', function() { alert("That tickles!")}); One looks like the way single events are added to any other element, one looks foreign. jQuery's whole argument overloading makes for a very confusing api, but for some reason the devs chose not to implement it in this case opting for a new method that looks nothing like bind/click/live. Dont get me wrong, the jQuery guys are leagues beyond me when it comes to javascript, but its shit like this $('a', $('#container')[0]).live('click', fn); 
 $( 'a', $('#container')[0] ).live( 'click', fn ); That's a terrible bit of code. Nobody would ever write that if they knew what they were doing. It has not one, but *two* jQuery features that no one should ever use under any circumstances. The first is the use of `.live()`. Never use `.live()`. That API was simply a mistake that has been corrected with the availability of `.delegate()`. The other is this jQuery call: $( 'a', $('#container')[0] ) There is never any reason to use this form of the jQuery call: $( selector, context ) That is simply a confusing "shortcut" for this much more readable call: $(context).find(selector) But in this particular case, the call can be simplified much more than that: $('#container a') 
great! this summer I'll start a programming project with the kid. Basic programming helped me understand geometry and trigonometry in my day…
For some reason I find the formatting/style of that site really annoying.. I wish theyd update it ... Finding the Mozilla guide/ref teh best one really, as its very readable
Better late than never: http://docs.mobl-lang.org/cli
&gt; There is never any reason to use this form of the jQuery call: $( selector, context ) Except specifically with live. Adding the delegate event handler to other node than *document* can save jQuery from having to examine and filter a ton of events. Before we had .delegate, *$( 'a', $('#container')[0] ).live( 'click', fn );* was absolutely the correct way to add delegates. So really there is only one thing wrong about that code, using .live(). 
Or how some people e-mail a screenshot of the address bar of a network folder instead of just sending me the god damn text to copy/paste it in explorer. For some reason this only happens with Mac users.
Im confused, again, is using $(selector, context).live('click', fn); worse than using $(context).delegate(selector, 'click', fn); if so, why?
I really do think that JavaScript + canvas makes a great modern day QBasic.
The setup phase is slower with live because it performs a useless selection (though in many (most?) cases the difference is negligible). The actual event handling should be the same. The main point about live is that *without context* it's bad because it has to handle extra events. With context live should be roughly the same as delegate. But even so I just consider live deprecated (hence "wrong"), it only exists for backward compatibility.
I see you haven't read [JavaScript: The Good Parts](http://oreilly.com/catalog/9780596517748).
Cool story, bro.
The same used to be said about Perl, when it was the most popular and almost only language in use to build CGI scripts. It's not the language, it's [the 90% crud rule](http://en.wikipedia.org/wiki/Sturgeon%27s_Law). If C# were more popular, you'd have the same problem.
I am interested in your opinions and would like to subscribe to your newsletter. 
CoffeeScript - http://jashkenas.github.com/coffee-script/ A new language that compiles down to plain old javascript, but adds features such as splats, destructuring assignment and existential operator to allow you to write better code.
you suck
Stop reading W3CSchool - it's awful and outdated. Instead read the MDC: https://developer.mozilla.org/en-US/
I'm pretty certain $('#container a') maybe shorter, but performs worse than $('#container').find('a'). jQuery reads from right to left, much like browsers do. IIRC I tested this out personally and found .find is faster in that example.
&gt; Before we had .delegate, `$( 'a', $('#container')[0] ).live( 'click', fn );` was absolutely the correct way to add delegates. Sorry, but that's not true. It is certainly *a* way to get what you want here, but it's not the fastest, simplest, or most readable way. Before explaining, I'd like to apologize for this comment in my first post: "That's a terrible bit of code. Nobody would ever write that if they knew what they were doing." That was uncalled-for, and I apologize to the author. So on to the real question... First, let's forget about the `.live()` part, since that is not relevant. To prove that, split the code into two parts instead of chaining: Change this: $( 'a', $('#container')[0] ).live( 'click', fn ); to this: var $anchors = $( 'a', $('#container')[0] ); $anchors.live( 'click', fn ); That runs exactly the same code as before, but by using an intermediate variable instead of chaining, we can see more clearly that `.live()` is not a factor in the original jQuery selector call. It comes *after* that first call is completed. So let's look at this part: $( 'a', $('#container')[0] ) When you make that call, jQuery internally does the equivalent of: $( $('#container')[0] ).find('a') See lines 181-185 of jquery-1.5.js where this conversion is done: // HANDLE: $(expr, context) // (which is just equivalent to: $(context).find(expr) } else { return this.constructor( context ).find( selector ); } `$(expr,context)` version is just a slower and less clear way of doing `$(context).find(expr)`. Now, since we know that there is (or should be) only one DOM element with `id="container"`, we can simplify this part: $( $('#container')[0] ) to: $('#container') and it will give the same result. So, the original code: $( 'a', $('#container')[0] ) truly is equivalent to: $('#container').find('a') In my previous comment, I also mentioned that you could simplify it further to: $('#container a') but as [Akkuma](http://www.reddit.com/user/Akkuma) points out, [this call is slower](http://www.reddit.com/r/javascript/comments/fklgb/the_difference_between_jquerys_bind_live_and/c1gqyre) than the `.find()` version. (Thanks Akkuma for the correction.) I believe the latest versions of jQuery optimize this case so that it doesn't go right-to-left when the selector begins with a #id, but I don't know exactly when this fix went in. But in any case, `$('#container').find('a')` would be the fastest of these.
Well, if it makes you happy, a large part of the .NET information is also crap. Maybe written by Microsoft-don't-ever-think-by-yourself-fanboys, rather than eleven year olds, which makes it seem more legit. But still the same crap.
You are right! Thanks for catching that. I'm pretty sure that in the most recent versions of jQuery this particular common case has been optimized to go left-to-right, but I don't know exactly which version fixed this. And even with this optimization, `$('#container').find('a')` would probably still be faster. edit: This may also vary depending on the browser. In browsers that support it, jQuery uses `querySelectorAll()` and may just rely on the browser to optimize - or not optimize - the search strategy.
Very nice, is it GPL license only, or is BSD an option?
Hey, sorry if that section caused confusion. Basically, I was summarizing two points: 1. (delegate || live) &gt; bind 2. delegate &gt; live Therefore, yes, the logical conclusion is: delegate &gt; live &gt; bind Delegate can do pretty much anything you need and is preferable in most cases I've come across. I guess live is nice because it's clean and clear in that it hides the assumed part where you're attaching the event to the document root.
I'm not overly familiar with the different licensing options. GPL seems to be the most used license, so I read it and it seems a good license for releasing jQuery plugins and PHP classes so I went with it. Why specifically do you prefer BSD?
&gt; That's a terrible bit of code. Nobody would ever write that if they knew what they were doing. I agree. It is not the most readable, and you'd probably never see this in any of my production code. I only mentioned it in the article for completeness sake. However, the reason for it existing is because it accepts a jquery object, which could be found with a function. Something like: $('a', function() { // do something crazy to return an object }).live(...); You'll notice that this example you gave... $('#container a').live(...) ...actually does something completely different than... $('a, $('#container')[0]).live(...) The former attaches the event handler to the root document and then tries to match '#container a' to the target of any events that bubble up to document. The latter actually attaches the event handler to the '#container' element and then tries to match 'a' to the target of any events that bubble up to '#container'.
&gt; That was uncalled-for, and I apologize to the author. No worries, I took no offense ;-) &gt;$( 'a', $('#container')[0] ) truly is equivalent to: $('#container').find('a') This is not totally true for the reasons I pointed out in [my other comment](http://www.reddit.com/r/javascript/comments/fklgb/the_difference_between_jquerys_bind_live_and/c1grlmn) The former example passes both the target and the context to the .live() method call. The latter only passes a collection of 'a' elements to the .live() call (the collection resulting from the .find() method) method call. Which would actually NOT work, because one of the shortcomings of .live() is that it ONLY works on a CSS selector string; .live() does not know what to do with a collection of jQuery objects. So, while your cleaner code would work for many other method calls where the result set is all we care about, it would not work for methods that actually look at the context, like .live().
I have no preference, but jQuery itself is dual-licensed as GPL and MIT (which I confused with BSD in my question, though they are extremely similar.) The dual-licensing allows for commercial use of the code as well as traditional open source usage.
I did some cheking in to the source as you suggested and it turns out that context is NOT the same as using a complex selector or using .find() (even though i've also read this many many times). Take this simple HTML: &lt;body&gt; &lt;div id='d'&gt; &lt;i&gt;iiiiii&lt;/i&gt; &lt;b&gt;bbbbbb&lt;/b&gt; &lt;/div&gt; &lt;div&gt;Clicking here should not wake up liveHandler&lt;/div&gt; &lt;/body&gt; Now run this JS: var $a = $('#d i'); var $b = $('#d').find('i'); var $c = $('b', $('#d')[0]); console.log($a.context); console.log($b.context); console.log($c.context); Result in firebug console: Document jq.html Document jq.html &lt;div id="d"&gt; Clearly there is already a difference. The thing is that live attaches its event listener to the context element. That means that if you .live() $a or $b, jquery will internally recieve more events than if you do $c.live(). You can verify this by adding the line *console.log(event.type);* to the top of jQuery's *liveHandler(...)* function. Then set two live listener like this: $a.live('mousedown', function() { }); $c.live('mouseup', function() { }); If you click the &lt;i&gt; or &lt;b&gt; elements, you'll see lines "mousedown" and "mouseup" alternating in the console log. But if you click the extra &lt;div&gt;, you'll only see mousedown events. This is because $a.live() causes jQuery to listen mousedown event on the document node, while $c.live() will listen mouseup events only on the &lt;div id='d'&gt; node. 
GPL does not allow redistributing in commercial software.
Yes it does. http://www.gnu.org/philosophy/selling.html
Yea sorry, I guess this was way to simplistic. I should have said: GPL forces you to include the source when redistributing in commercial software. Any changes to the code must be GPL'ed again. Therefore (in my opinion) it's easier to include MIT and BSD-licensed software in commercial software.
Absolutely correct. I thought about including the whole nine yards in my post, but I'm lazy and it's Monday. I'd much rather use BSD or MIT-licensed code in my work, just to avoid the potential headaches the GPL entails. Not that I have anything against the GPL, I'm just lazy.
Nice job keeping it a11y compliant. 
I like the part where the bottom sliders don't work in Firefox EDIT: I don't know where that 2 came from... Firefox 3.6.13 OS X
Oh man. You are completely right. I feel like a fool for trying to re-educate everyone on something I had totally wrong. The key point that I missed is that when you use `$(selector,context)`, jQuery saves the `context` argument as a `.context` property of the returned jQuery object, just as your tests show. D'oh! Teaches me to make silly claims without checking to see what the code actually does!
Whoa, firefox 2? Didn't they do a forced upgrade to Firefox 3?
Oh my, you are right, and I had this totally wrong! Now I owe you apologies not only for my tone (glad you took no offense!) and for "correcting" you when you had it right in the first place. [kinnu's comment](http://www.reddit.com/r/javascript/comments/fklgb/the_difference_between_jquerys_bind_live_and/c1grps2) has some good tests that illustrate what is going on here - the `$(selector,context)` call saves the `context` argument as a `.context` property on the returned jQuery object, and `.live()` uses that. Sorry again about the false claims - but I guess we all learned something new - or at least I did! :-)
3.6.13 OS X They work horizontally, but not along the slider track
Works on winblows. They just reset whenever one is chosen.
Downvote for not upgrading.
Oh, Paul.
I'm running the current stable release. I could run 4b but I'd like to have a platform similar to that of my clients.
I read the convo below and decided to dual license my jQ plugins, because the intention is to make this code as easy to use as possible. * @license http://www.gnu.org/licenses/gpl-3.0.html * @license http://www.opensource.org/licenses/mit-license.php
Lol, I love the text on the control buttons.
the text being unselectable makes it a no-go. if you positioned the canvas over the text it would be better.
I know it seems crazy and all, but they are using javascript server side these days.
CoffeeScript is also good way to remove yourself from the javascript ecosystem and add unnecessary complexity to your workflow. CoffeeScript is an attempt at making programming javacsript easier, while in fact there is no net gain from it considering all negative things that come with abstracting a well known language into a 'made up' language (in the words of it's creator). CoffeeScript doesn't make JavaScript 'more than regular JavaScript', in fact it detracts from JavaScript in measurable ways - debug time, code compatibility, existing programming tools, encumbering data formats with needless abstraction, etc, etc. No matter what the noobs say, it is not a net gain in performance or ease of use. 
this broke my iPhone
No need to apologize, I'm happy I could help someone learn something new. And of course, in making me think through it, it became even clearer in my mind, so everyone wins. Free rainbow sprinkles for everyone!
Hmm.. Installed IE6 and pages using scripts don't seem to work for me. [Win7 64x]
It's not the only example, lines starting with a regex also usually need a semicolon, as well as a host of other things like: +userInput &lt; 10 ? a() : b(); // '+' to cast to string to number
&gt; Oh man. You are completely right. I feel like a fool for trying to re-educate everyone on something I had totally wrong. Well, who hasn't done that at some point?-) I'm actually glad we got to have this exchange. When I read your reply I had a similar feeling to yours, and really had to go in to the source and see if was talking out of my ass. I've read about using context with live but never thought about how it really works. When you said "we can see more clearly that .live() is not a factor in the original jQuery selector call" I just thought oh damn, that's totally correct. I never actually knew how context works internally and pretty much considered it as just a selection thing and doing "something" in conjunction with .live(). Now I know and that feels nice. This may actually help fix a problem I've been having with iframes in a big jQuery project. I already have a workaround for it but it's somewhat inelegant, it would be really great if I can fix it simply by setting a proper context. 
in [this](http://jsperf.com/jquery-string-of-selectors-v-find) example, $('#container').find('a') narrowly edges out $('a', '#container') and (not surprisingly) $('#container a') is a distant third.
IE6 emulation is working perfectly then!
Interesting. However, what's the point? No one has to care about UA stylesheets anymore, thanks to today's CSS resets.
Sliders are acting crazy in firefox 3.6.8 on ubuntu. 
cool stuff. recently did the same type thing for a site that im working on 
Can't access the bottom right slider in Chrome. Really great idea though
I wrote [a little tutorial](http://nixtu.blogspot.com/2011/02/how-to-structure-your-application-using.html) showing how to structure your single page app using RequireJS. I posted it here too but for some reason it never made it to the frontpage... If you develop anything bigger with JavaScript, RequireJS is well worth checking out. It's almost guaranteed to make your life a little bit easier. :)
Seconded, RequireJS is splendid to work with! The combination lazy-loading files while developing, and then minimizing and aggregating in production is very helpful and promotes rapid development.
You're right, other unary operators such as ++ and -- need them as well (when used in prefix position). Less common in practice but I stand corrected nonetheless.
.net, y u no test models instead?
Well, comparing .NET and JavaScript is not fair. They are two different things. Things that can be done with .NET are not supposed to be done in JS or vice versa. JS have proved already its value and gaining it popularity quite fastly these days. If you feel that JS is a nonsense thing it doesn't mean that JS is nonsense thing, it is just your feeling and mostly that feeling comes from the lack of knowledge in JS. Once you get a grip on JS you'll feel otherwise. http://www.howtocreate.co.uk/tutorials/javascript/important - Here is one good place where you can start learning quality JS (If you are interested). 
CoffeeScript has a lot going for it, but until I can get line numbers in my stack traces to correspond to the code, it's a very mixed bag -- I like coding it, but hate debugging it. Based on that I'd have trouble believing the blog author has done more than dabble in CoffeeScript to make such a dramatic proclamation. A lot of things look all dreamy until you deal with them in anger. As an aside, the conflation of variable definition and assignment bothers me, especially when ECMAScript 5 is moving in the right direction with strict mode. I hope CoffeeScript's author fixes that soon, but based on his posts in proggit is doesn't seem like there's much hope.
Upvote for "without jQuery"
Turtles all the way down.
A little bit too much of "What if ... what if ... what if ... let's ignore ..."
CoffeeScript is good but the title suggests a more meaty, convincing post. Can't imagine many potential users being attracted by the faint promise of 'rubyesque', and some vague references to not worrying about undefined. Where's the beef?
&gt; As an aside, the conflation of variable definition and assignment bothers me, especially when ECMAScript 5 is moving in the right direction with strict mode. I hope CoffeeScript's author fixes that soon, but based on his posts in proggit is doesn't seem like there's much hope. Yep, one of the things they definitely should not have lifted from Python/Ruby.
&gt; What we've discovered &gt; &gt; [snip] &gt; &gt; * jQuery—or whichever one is your favourite library—is just JavaScript [snip] WTF.
GWT FTW
I for one already have a language with higher-order functions, objects and the like. It's called JavaScript!
I tried setting the IE8 css file as the base one on my website at work and it completely changes the look of the site when viewed in IE8.. Doesn't make sense as it shouldn't have any effect, if this is effectively what is already at the base of every page rendering.
What exactly is the point of this? Javascript is a great language - why would you want to hide that under a pointless abstraction layer? This won't make coding JS faster - it's just another layer to debug. You often find yourself dancing around these things trying to get it to generate the final output you need instead of just writing the script you need! Why are so many so-called developers so terrified of Javascript?
That puzzled me too. Most of the people I know who criticise Javascript either don't know it very well, don't understand prototype-based inheritance or are mistakenly criticising the (language-agnostic) DOM API, not actually Javascript. The closest the author comes to enumerating his criticisms of JS is: &gt; undefined oddities, antiquated array manipulation, limited standard library, strange object models, and for me personally as a Python programmer the mess of braces and semi-colons peppering my code with distracting syntax. ... and I have to confess I'm mystified by most of these points. What's he complaining about regarding "undefined"? What's wrong with the array manipulation/standard library/object model? And if you're still getting confused by trivial syntactical issues like braces, semi-colons or significant whitespace, it's usually a sign you haven't learned a language well enough to aspire to hold *any* valid opinions on it. I'm not saying aspects of Javascript can't be improved, but I am deeply suspicious of someone who criticises a language without getting used to it first, or can't simply and clearly articulate any real faults with it before dismissing it... &lt;:-/
I think part of the problem is that Coffeescript is generally lacking in beef. Javascript has quirks, but nothing I've ever encountered that would offset the enormous annoyance of using another language that then compiles to Javascript. The debugging headaches *alone* that that kind of compilation causes are ten times worse than any JS annoyance I've ever run across. At least as regards client-side web development, Coffeescript just seems to be a solution in desperate search of a problem. :-/
Its not often a problem for me to have assignment and definition combined in Python. Do you have a different experience? Can you elaborate on the changes in strict mode that could not be harnessed?
I created http://twitpipe.com ... did it a bit differently though 
There's no such thing as "destructuring assignment." You probably meant destructive assignment, which Javascript already has, or pattern matching, which ... Javascript already has. Yes, I know Mozilla Developer Center has a page that talks about destructuring assignment. That's called pattern matching. Stop learning computer science from the web.
I found it to be the most fun when [doing server-side node.js stuff](http://github.com/dpritchett/chatbox). Once I got rolling the client-side JS (with jQuery) came pretty naturally. Admittedly, my example is a toy.
This kind of thing is all over the place and it's a big pet peeve of mine. Language-xenophobic developers, when forced to use a new language, or a language that's not high-brow enough for them, will sometimes shit all over it in a futile quest to transform it into their favorite language. Usually it's little pointless macros/aliases but sometimes it's projects like this that really only serve to make things more complicated. I see this a lot lately with the Python community. Personally, I like Python. I think it's a great language. Unfortunately I can't say the same about its overenthusiastic proponents. Dear Python zealots, please stop trying to turn everybody into a "Pythonista" just because you hate curly braces.
Wow. Nowadays doing something without jQuery is considered an achievement. Jeezes, Javascript is a much nicer language than this weird concoction... And yet, the bulk of that project is all jQuery...
am I the only one who finds C-style braces and semicolons preferable to languages like Ruby? I'm obsessive about code organisation, indenting, readability and so forth. Perhaps it's just a matter of personal experience, growing up on C and its ilk.. but I feel like braces add a *comforting* structure to control blocks, function definitions, etc. Proper indenting + braces makes it very easy to skim a lot of source and see what the flow or logical separation is like. Even if I don't know the API I'm looking at. I'm not sure what was 'wrong' with the type of syntax we see in JS/C/C#/Java/et al. Something that prompted a huge number of developers to adopt languages with loose (or nearly no) syntax and structure.
Thank you, I'd never thought about it that way.
What's your opinion on jquery then?
&gt; Do you have a different experience? Yep. :) The most obvious benefit for separating declaration and assignment is that typos of variable names are always caught immediately; the compiler guaranteeably catches them, not maybe 10s later in tests if that piece of code is covered (or blow up in production if it wasn't and QA missed it, which I've seen a few times). And the price for this is very low: two or three non-whitespace characters. It won't catch misnamed method invocations due to dynamic dispatch, but for that the language must become fundamentally different -- statically typed. Variable typos happen to me quite often. I hear the "it doesn't happen to me" refrain a lot, but it doesn't jive with my own experience, so I suspect it's more a case of people not paying attention. Fixing a typo after a test run might be the programming equivalent of successfully walking to a destination while thinking about something else. For Python specifically, Python 2 definitely had a problem as a result of conflation, which is why the "nonlocal" keyword was introduced in Python 3. I used to code Python 2 in a rather Scheme-like style (doctor: then don't do that!), so this brokeness was obvious since I'd need to resort to the list hack to disambiguate whether a scalar assignment was in a new scope or not. I consider "nonlocal" a bandaid since it doesn't help with typos. Something we all do constantly -- so it's a part of all our experiences -- is reasoning about a program, even though it's informal. In a language which doesn't make the conflation mistake, it's obvious what the bound and free variables are, and where the scope of local variables start and end. This is particularly important in a language where deep function nesting is common, like Javascript. Python isn't bitten as badly since it's mostly methods and almost no nesting, so a Python hacker would barely feel this part. As an aside, I used to be a Perl hacker, and the Perl community was given the choice between strict mode and not. We voted with the code we wrote: strict mode or die. Nowadays only a completely clueless neophyte learning from bad webpages from a decade ago writes Perl programs without strict mode. I strongly suspect the Javascript community will go the same way. However, to be fair, CoffeeScript's scoping isn't as bad as Perl's and JS's non-strict modes (Lua's as well, but they don't offer a strict mode yet). &gt; Can you elaborate on the changes in strict mode that could not be harnessed? It's not a matter of "could not". CoffeeScript could have it for locals today, without JS's strict mode underneath, if the author wanted it to. Well, assuming CoffeeScript's compiler is written sanely, which I don't know. **Edit:** I neglected to mention in the part about Python's scoping that CoffeeScript has it a lot worse: Python at least assumes an assigned variable is in local scope, while CoffeeScript does the following: _Because you don't have direct access to the var keyword, it's impossible to shadow an outer variable on purpose, you may only refer to it. So be careful that you're not reusing the name of an external variable accidentally, if you're writing a deeply nested function._ I don't have sufficient experience with CoffeeScript's scoping breaking things to definitively say this is a bad idea (unlike the stack-trace line-mismatch), but that looks nasty.
Anyone who whines about curly brackets and semicolons is not a real programmer.
Upvoted for bravery.
Something like this: http://www.dhtmlgoodies.com/index.html?whichScript=ajax_chained_select should get you going.
Don't you just need to call your setOptions function when the page has loaded? Like by putting it in the body tag: &lt;body onload="setOptions(blah blah blah);"&gt;
I agree with you completely.
JQuery is javascript. I happen to prefer Mootools... which is also still just javascript. Both frameworks are just glorified DOM manipulation packages. They don't fundamentally change how js is written or can be used. You lose nothing by using a JS framework. 
 It won't make anyone's development workflow any easier. It is not a net-positive in terms of improving a web developer's workflow. Considering all the additional hoops to deal with - debugging problems, copying and pasting code and running it without having to first 'compile' it, having to reformat json data to fit into your new coffeescript world, and not being able to copy and paste and use that data, etc, - I just don't see why there are so many articles coming out with such frequency trying to sell people on this bad idea. It isn't helping JavaScript, but it is confusing to noobs who always want to jump on the latest bandwagon no matter where it is headed. 
Python is a language of compromises. I think an exception occurring when accessing an undefined variable will prevent 98% of the typos. Rarely in Python do I have the case where 1. there are two variables in the same function with different names, 2. both are defined, 3. both should be the same variable and 4. the function still runs without some related error. It does happen but it just doesn't happen that often to merit typing out and maintaining declarations for every variable used in every function. Yeah I know the nonlocal issue you're talking about but that really doesn't happen during regular development, right? I think Python's current behavior fits with the language. On the other hand, JavaScript until recently did not exhibit an exception upon access of an undefined variable, attribute or function. Which made debugging it horrible. I think strict mode helps with those cases. So you are saying CoffeeScript should implement that always? I agree but I don't think that exactly relates to the combination of declaration versus assignment. Like I said for Python, if accessing undefined things explodes then most cases are covered without declarations. Also unless I misunderstood you, I think this is what you wanted Python to do by default instead of needing the nonlocal keyword: &gt; Because you don't have direct access to the var keyword, it's &gt; impossible to shadow an outer variable on purpose, you may only &gt; refer to it. So be careful that you're not reusing the name of an &gt; external variable accidentally, if you're writing a deeply nested &gt; function. 
Some of that is unfair to CoffeeScript, depending on where you're using it. For the browser, I'd generally concur. I mostly use it in node though. With node the explicit compile phase can be eliminated with a _require('coffee-script')_; everything required after that gets compiled internally at require time by CoffeeScript if the file ends in .coffee. Also, in my experience CoffeeScript handles JSON just fine. I'd happily use CoffeeScript over regular Javascript in node.js if the debugging was pleasant. For one thing, code is less noisy -- anonymous function signatures are shorter and there are no terminating braces -- which node desperately needs due to the deep nesting. I sorely miss multiline strings in Javascript as well. But then I come back to debugging and variable handling...
&gt; I think an exception occurring when accessing an undefined variable will prevent 98% of the typos. Indeed, but you're giving up guaranteed and immediate detection of this error. This slows down your dev cycle and makes this error plausible on production. If this were a discussion about something as dramatic as static versus dynamic typing, I'd leave the argument alone. But it's a trivial change that in no other way alters the nature of the language, and eliminates a class of bugs. &gt; I think this is what you wanted Python to do by default instead of needing the nonlocal keyword No, the way CoffeeScript handles scope is worse than Python because it's much less clear what the scope is. There's no way to guarantee the scope of a variable is local in CoffeeScript; in Python the default scope _is_ local. To take an extreme case: if I make a global variable 'x' in CoffeeScript and in some deeply-nested function go 'x = 1', I've just overwritten that global, even when I only meant to create a local x. With Python, the global remains untouched. The only x that changes is the x in the deeply nested function. If I want to change that outer x, I need to explicitly request it. This is similar to the argument against globals: it makes reasoning about the program hard. **Edit:** I feel bad arguing without at least giving an example. Here's CoffeeScript as it is now: app.post '/:board/:thread_id/:post_id/report', (req, res) -&gt; [post_id] = util.getArgs(req, 'post_id': Number) ip = util.ipToNum(req.socket.remoteAddress) db.execute 'insert into reports ("post_id", "ip") values (?, ?)', [post_id, ip], (error, _) -&gt; if error then throw error res.send(204) Personally I prefer my declarations to be obvious so I can see at a glance what came from where. But let's say we want to be very lightweight on declaration. Here then is a version that declares using a colon: app.post '/:board/:thread_id/:post_id/report', (req, res) -&gt; [:post_id] = util.getArgs(req, 'post_id': Number) :ip = util.ipToNum(req.socket.remoteAddress) db.execute 'insert into reports ("post_id", "ip") values (?, ?)', [post_id, ip], (error, _) -&gt; if error then throw error res.send(204) No visual difference, and only two extra characters, but _poof_ there went a class of bugs.
I tried that, only works if the user changes it after everything is loaded.
Say you write your coffeescript and your data is in coffeescript too (json). What you have now is coffeescript, not json. the json the compiler generates and your app sends down the pipe is no longer coffeescript. say you want to tweak something and copy and paste it back into your source. well, now you have json, not coffeescript. so the time you've just spent writing your data format in coffeescript has been wasted because now you would like to copy and paste some json back to the source code, but what you want to copy and paste is json, not coffeescript. clusterfuck. Abstracting things into coffescript is not a good idea. This is one simple example that I run into daily, hourly even. This would cause a lot of frustration in my own development flow and it is something that occurs often enough for me to be able to forsee a problem with it if I were using coffeescript to abastract my javascript and json. Another thing I do frequently is write small bits of javascript in firebug's console, say maybe 30 to 100 or so lines, tweaking it quickly in firebug and running it quickly to test - then I typically copy and paste that code into my sourcecode when it is working.. well, the coffeescript way would mean that I now should rewrite this code into coffeescript. clusterfuck. Similarly, I can't take a piece of coffeescript source and paste it into firebug's console to quickly debug or tweak it without first compiling it. This is something I do often, and it works effectively, speeding up my development cycle. Using coffeescript would be a major hindrance.
In Python I'm not sure they would be enforceable before the actual mistake, ie. they might only be triggered during lookup which means that its even less likely that the functionality would stretch beyond the 98% I mentioned earlier. After using JavaScript I too want to go and turn the strictness knob of everything to MAX but I think we are going overboard with this declaration idea. We aren't making spaceships, we still want convenience and I think its a good compromise to not have declaration IF exceptions are raised when accessing things that are not defined. You seem reasonable though, I will think about it. Maybe I'm just another rabid Python zealot defending the nest? We are on the same page with regards to scoping. Your in depth discussion of nonlocal confused me earlier. **Edit:** WRT the examples: I just want to point out that the declaration here actually would not stop any bugs that an uninitialized exception would not stop IF both errors occur on lookup/access. Just sayin'.... 
&gt; What you have now is coffeescript, not json. the json the compiler generates and your app sends down the pipe is no longer coffeescript I don't follow. This is valid JSON, Javascript and CoffeeScript: {"a": 1, "b": [1, 2, 3]} As far as I can tell, valid JSON is always valid CoffeeScript as well. &gt; Another thing I do frequently is write small bits of javascript in firebug's console, say maybe 30 to 100 or so lines, tweaking it quickly in firebug and running it quickly to test I can see why it'd be a problem for the area you work in. I'd definitely not use in in the browser, it has problems enough on the server side. :) At least on the server there's a coffee REPL: coffee&gt; x = 1 1 coffee&gt; y = (z) -&gt; x * z function (z) { return x * z; } coffee&gt; y(2) 2 The existing coffee REPL leaves a bit to be desired though, to be sure. &gt; It isn't for serious development projects No argument there. If they fix the line-number and declaration problems it'd be an acceptable server-side language though.
I'm using Appcelerator right now and I'm... semi impressed with it.
That's why he said "start looking for a job", not "quit now".
&gt; In Python I'm not sure they would be enforceable before the actual mistake I'd be very surprised if PyPy wasn't constantly juggling variable scope under the covers. There's just no way for them to effectively optimize otherwise; inline caches can only take you so far. The way CPython is implemented, you could well be right. &gt; Maybe I'm just another rabid Python zealot defending the nest? No way, man. This has been a pleasant argument. :) &gt; I just want to point out that the declaration here actually would not stop any bugs that an uninitialized exception would not stop IF both errors occur on lookup/access. Certainly, but again this depends on your tests running that chunk of code. I don't agree there's a tradeoff, because I think it's like worry about a grain of sand on a beach. We'll just have to disagree. That's okay, there's plenty of languages to go around (none perfect!). :)
Javascript isn't difficult, it's just not the same as what you have been doing. It would take me far longer to learn CoffeeScript than it would to just use js properly,
I think using -Infinity is a much more elegant solution. It's shorter, cleaner, and relevant (math-based, not OOP-based).
(what (about (people (who (whine (about (all (the (damn (parens))))))))))
I've changed my mind many times about Coffeescript, but in the end I've decided to more or less stay way from it. It has a tendency to lead to a lot of inconsistencies that are a real pain in the ass. One of the more frustrating ones is this: In ruby, both of the following are function calls: fcn fcn 1,2 In Coffeescript, only the second one is a function call. The first one does absolutely nothing - it's just a reference to the function, not an invocation. The worst part about it is that it doesn't cause any errors.
I much prefer Mootools to jQuery, but then again, I taught myself Mootools (and much more than I already knew about JS) with a book, a good editor, and brute force. I prefer Mootools because the code is much more readable. I have a book on jQuery, but just can't get into it, being that the syntax feels really obtuse. Not to say that I haven't been impressed many times by jQuery. The more sites I see that use it in creative ways, the more I'd like to learn it - I just wish it didn't confuse me as much. Mootools just seems to make more sense when reading it.
still too much in the way of developing javascript. Coffeescript is cruft. no way around the fact that all the bullshit you have to do in order to work with Coffeescript instead of developing javascript, just adds cruft/complexity to a developers workflow. any small perceived benefit you think you are getting from coffeescript is countered by the additional cruft/complexity that you have to deal with when debugging anything longer than a few hundred lines of code. even if all the problems were eventually solved, coffeescript still isn't a standard like ECMA, and you lose something by devoting time and resources to developing code in coffeescript. 
Why would one need to differentiate between, or even use, -0 and +0 ?
It could be important in some rare mathematical cases, but even then there's usually some other data that can be tested to resolve the same information, it's really just a hobbyist type question.
Coffeescript is for Ruby programmers who don't want to learn Javascript. These coffeescript articles belong in r/ruby more than they do in r/javascript. It seems most people who read r/javascript are interested in javascript, not ruby or coffeescript. This article for example, is much more likely to find readers in r/ruby. I'm not interested in learning ruby, and my guess is most people who read r/javascript are not that interested in learning ruby or coffeescript. For example, I wouldn't go posting about a 'made up language' in something like, say, perl and post it to r/javascript expounding on the wonderfulness that is perlscript and why i'll never write javascript again, to r/javascript. 
The only phrase I like less is, "codes."
I think that most of the time, using javascript math would defeat the rare mathematical cases anyways. Note that 1/0 = Infinity in JS rather than NaN. I got bit by this recently and just about died, since when does 1/0 = Infinity.
It's reassuring to see that I haven't completely lost it.. javascript itself has my back. my post was certainly a rant, of sorts, but I'm hoping that someone will still make a case for the opposite side of the argument that I can at least appreciate. I won't agree with them, but I'd like to talk to someone who is a C/Java/et al. veteran who decided to turn in their semicolons.
Apologies if it falls over sometimes. I've got a memory leak error getting thrown out of Node.js on the listening sockets via socket.io. It's on auto restart, so just reload if it breaks.
Did you post this to /r/node? I'm sure they'd be interested.
derp?
I might be being dim, but I don't see why this is unexpected?
&gt; Not liking something is not the same thing as "being confused by". Generally I find people don't like brackets and braces or significant whitespace because they find the unfamiliar syntax annoying. They're such trivial details once you're used to them that this is pretty much the *only* thing someone can criticise about whichever they don't like. So I'd argue that unless someone has some pretty unusual, well-argued points regarding B&amp;B or SW, they're probably complaining because they're unfamiliar, not because there's anything actually wrong with them... and that's a fault with the developer, not the language. &gt; One could easily make snarky jokes about "those who need braces to hold their hands and guide them". I think you've mistaken my post for a reaction against criticism of B&amp;B, but that's unwarranted. Notice how I carefully equated brackets-and-braces and significant-whitespace, so no matter which type of language you prefer you couldn't assume I was taking sides. Rather, I was criticising people who get hung up on *either one*, because when you've spent enough time with a language you get used to it, and trivial syntax details like that stop bothering you. Hence my characterisation of most criticism of *either* B&amp;B or SW as simply a lack of familiarity with the language(s) concerned. &gt; CS lets you use comprehensions See, *that's* a good example of something Javascript doesn't do yet (although JS 1.8 [does in fact include](http://en.wikipedia.org/wiki/List_comprehension#Javascript_1.8) list comprehensions). &gt; [The standard library is] "limited" in that it doesn't have some things some people want. Right, but (as I already pointed out) if people could humour us with specifics it would go infinitely further towards refuting my point than any amount of re-iterating the (unsupported, hypothetical) point that JS is inadequate in this respect. &lt;:-) When someone says "What's wrong with the... standard library" the best way to answer them is to... well... *answer them* - not to continue to waffle about generalities. &lt;:-) &gt; Sometimes you want more "classical" inheritence and CS simplifies the creation thereof. Hmmm. I'm torn on this - certainly prototypical inheritance is weird to begin with for someone coming from a more classical OOP language, but you can emulate much of the more classical OOP style in Javascript in [only a few lines of code](http://www.nurelm.com/themanual/2010/09/01/javascript-as-a-classical-oop-language/) (ie, minimal run-time *or* developer overhead). Again, I can see how people might prefer a non-prototypical language, but does it really give that much more power that it's worth the trade-off of things like endless headaches during debugging? &gt; How much time did you spend familiarizing yourself with CS? :-D Admittedly I didn't spend long learning it, because it has clear and obvious downsides and I couldn't see (or even find anyone articulating) any clear faults with JS that CS fixed. Even in this thread you've only managed to dredge up some relatively trivial syntactic sugar, more hand-wavy (and still frustratingly non-specific) assertions about the standard library, and a desire to program in a non-prototypical-OOP language. Of those I'd say the only thing that even came *close* to offsetting the additional complications CS brings (like breaking the link between the code you write and the code that you have to debug in the browser) is the desire to program in a non-prototypical language... and even that's of dubious validity as an argument, considering there's no "objective" argument I'm aware-of that classical OOP is in any way better. &gt; Brenden Eich (the creator of JS) calls it a "polyfill", which is the same category as many libraries. That's kind of my point... but most libraries don't break the link between "code you wrote" and "code you're debugging", or add additional binary requirements, or add additional steps to the workflow required to push changes out from your IDE to the live web. I'm open to the idea CS satisfies people's personal preferences... I just think those preferences are usually baseless value-judgements, and are *often* (though not always) born of insufficient familiarity with JS in the first place... and hence CS doesn't really anything much to the table that's noticeably better than the very definite drawbacks it also brings. &lt;:-)
This is a far better explanation than what was provided in the OP's link
FWIW I grew up on C/C++/Java/Javascript and the like, so I also find brackets-and-braces more comfortable, and I'll admit that picking up languages like Python or Ruby was a bit uncomfortable at first. However, it's very important to learn to differentiate between *different* and *worse*. Significant whitespace is *different*, but I don't know of any reason it's objectively "worse" than brackets and braces (or vice-versa). I think the trouble is that people on both sides of the issue confuse irrelevant *personal familiarity* with *objective merit*. All things being equal there's nothing wrong with taking into account personal familiarity when making a choice, but when all things *aren't* equal personal preferences can blind people to even really quite huge advantages/disadvantages between tools. For example, as in the article, someone apparently trading his *personal preference* for no brackets and braces for the *objective fact* that he's complicating and adding dependencies to his toolchain, increasing the size and complexity of his compilation system and making debugging on the client much harder than necessary.
This is actually pretty nifty, exe it generates is quite small (which makes sense). Not quite 4k material but close. EDIT: upon doing some reading, it seems it can be considered almost depreceated as a .NET language, it does not fully support the kitchen sink..
That's more valid but still, it's like being a mechanic and whining about oil and grease. It comes with the territory. If you don't like it you're in the wrong field.
LOL
Done!
I won't repost, but I wrote up an explanation [here](http://www.reddit.com/r/programming/comments/fmyy6/what_happens_when_a_javascript_constructor_returns/c1h79ua). It actually is a bit deceptive until you realize what the JS interpreter is doing for you when you return undefined. At least, it was for me.
You're right, JavaScript isn't difficult and I've been using for 6+ years, and I wrote off CoffeeScript for months. But then I actually sat down with it one weekend, and basically learned it in that time. I'm still discovering new things, and it's not always perfect but in all honesty I still find it a useful language.
How do you refer to a function in Ruby without invoking it?
The limit of 1/x as x goes to zero is equal to infinity so maybe that's why someone thought it was a good idea. Ie. 1/(1/2) is 2, 1/(1/4) is 4, 1/(1/500000) is 500000. More than likely though this behavior (1/0=Infinity) will just silently cover up errors and make them hard to find. 
I can't believe setting an attribute on a frozen object has a special case for when the property has the same value. That seems idiotic to me. Maybe its some implementation problem. Does anyone know why such behavior exists? Seems like it should throw an error no matter what, case closed.
The article is ok (anyone who did any serious web development knows about this stuff), but **why the hell people are using `alert()` in their examples?** It's not 1999 anymore, ffs. Even IE9 has `console`. *rage over*
Thanks for sharing this. It introduced me the Smoothie Charts, which I spent an hour integrating into an internal network monitoring tool this morning. Works like a charm.
Not a bad post, but you make too many generalization about the requirements of page and therefore limit yourself in your solutions. For example, putting your JavaScript at the end of the page and not the header. This maybe a userful tip for a small webpage that loads some jquery to make the site look and funciton better. This however breaks down once you have pages that are mainly driven by javascript. The HTML that is loaded in a lot might not make sense till it is processed by javascript, so displaying that before any processing would actually look pretty unprofessional. &gt;Do not force login. Again this is based on your business model. Some applications require you to authenticate before displaying any sensitive data. But over all decent points. 
thanks for the insightful reply - I made a few minor changes.
"But wouldn’t it be great if we had a generic, reusable JavaScript function which could detect changes to any form, worked in all browsers and didn’t require a chunky library? Keep an eye on SitePoint — it’ll be coming very soon!…" WTF wall of text then "please wait til' next time for the solution!" ? 
Even IE8 has console. However if the developer tools are not installed or open (not sure which) then console.log() throws an error. I recently spent too much time debugging an IE error that I couldn't replicate (all of the IEs I used had the console open...) anymore I write a function like this to avoid that. function clog(logMessage){ try{console.log(logMessage);}catch(var e){} }
coffeescript != javascript. saying that 'coffeescript ultimately IS javascript' with IS in caps is not going to make coffeescript == javascript. You can't run it in a web browser, because it isn't javascript. 
Yeah - you will get that if Firefox doesn't have Firebug installed. I always have this in production JS: if (typeof window.console == 'undefined') { var die = function() {}; window.console = { log : die, dir : die } }; 
Clearly that's a stupid statement. But JS can't be used in mobile apps the way it can on web sites. Well, iOS and Android at least, which are the two that matter.
I tend to use alert() sometimes just to avoid having to write functions like that. 
 But if by a mistake you push your `alert` to production server, that doesn't look good. When using `console` override the users will not see anything, worst thing that can happen is some debug in their JS consoles (webkit-based browsers). 
That's the point - it's a lot easier to spot an alert() that shouldn't be there. Most of us will have Firebug enabled when we test so we won't notice the error that gets thrown when console.log() is called on a non-Firebug browser. Making a test function super in your face can actually help you remember it's there.
Here's a solution using markup and the XSLTForms package, which puts a markup-based front end onto JavaScript and XHR. http://xformstest.org/klotz/2011/02/book-list/list.xml You can use view-source to see how it works. The list of book chapters is loaded from here: http://xformstest.org/klotz/2011/02/book-list/book.xml It uses the chapter and title names, but it's fairly easy to change the book format to what you want and change the value to a number instead of the actual title. When you change the selected chapter, the relevant sections are displayed automatically because of the use of predicates in the binding of the second select to the data. There's a separate binding that says that the section isn't relevant if the chapter is empty, though you could remove that, or you cold make it so that the the section is readonly if the chapter is empty. The only slightly unpleasant bit is the line that says whenever the chapter changes to set the section to the current chapter's first section. 
Completely agree. Personal preferences and familiarity with syntax are valuable in terms of productivity (which includes a person's enjoyment of developing in a language.) But that is not a factor in whether a language is objectively superior or not, because the familiarity will vary from person to person based on their experience with other languages. I'll admit I haven't given it a real try, but for me it seems that CoffeeScript doesn't add anything productive to JS that couldn't have been accomplished by extending the prototypes in a way that would have preserved debugging (and linting/IDE usefulness/etc)..
There's a little known project called [JSDB](http://www.jsdb.org) that's cross platform and really useful for general purpose scripting server side type stuff in Javascript. Don't be scared by the horrendous homepage. It's good stuff and it's super easy to get started. It uses Spidermonkey under the hood so you get a lot of nice modern Javascript (1.7, 1.8, etc) additions too. 
I'd say that, realistically, Chrome needs to handle this. If it's suddenly using unknown OpenGL drivers, it should handle a situation where those drivers do not behave.
This is true of nearly all programming languages that use floating point numbers, since it's part of the IEEE standard for floating point arithmetic. As plantian says, it ensures certain relations stay consistent at the edges and limits. For example, if (1/very_small_number) is too large to be represented in floating point, it will be equal to Infinity. This preserves the expected relation (1/very_small_number &gt; 1/not_so_small_number). See the comments on the blog post for more examples.
There are dozens or even hundreds of different drivers per graphics card and of course you also need to throw different operating systems into the mix. There is no f-ing way to test this.
Off the top of my head, I'm not actually sure. It's not as common a task in ruby as it is in JavaScript, since you'd typically use blocks, lambdas or `Proc`'s instead of using anonymous functions all over the place like you do in JS. I'm sure there's some relatively standard way of doing it though.
I've gotta disagree to some extent. Removing things which are unnecessary is a pretty universal staple of programming. I mean, sure, you can throw a semicolon on the end of every statement in python to make it obvious it's the end of a statement, but why? Just because it comes with the territory doesn't necessarily mean it has to. Developing tools to avoid the things you don't like in the territory is pretty common. A while back people could've complained that staring at monochrome text on a screen was part of the territory until someone had the bright idea of build syntax highlighting.
The prior art combined with the ridiculous ambiguity of the trademark terms should put this one to rest without much effort.
You like it? I've never seen it before and am really considering doing something cool with it.
Yeah, it was straightforward to integrate. I had to dig into the source a bit to learn about all the options, but it's a well put together piece of code.
via: http://cometdaily.com/2011/02/17/game-closure-real-time-javascript-game-engine/
So, Python throws an error, but C which I'm sure does the IEEE Floating Point standard gives infinity. That said, I don't like it, personally. I realize it's probably to deal with cases as x -&gt; 0 in sequence, but it really bothers me, I would rather have a divide by 0 error... Again, this is personal preference more than anything, I rarely want to silently eat a divide by 0, especially when it was hiding a bug that was a real problem, and figuring out that it was happening was confusing.
There's an online-based IDE for server-side JS (based on the RingoJS engine) where you can also host your apps. You can try it at http://www.erbix.com/ .
iScroll Inc. is based in the USA. Cubiq.org is run by a guy in Italy. What are they going to do if he doesn't comply with the C&amp;D? Extradite him? Just how far does the reach and jurisdiction of the USPTO go?
Only for someone with lots of money to pay lawyers with?
When you're dealing with floating point, it's important to remember that a float does not represent some exact number, but rather a range of numbers. For example, a floating point value like "0.5" does not mean precisely 1/2, but rather 1/2 plus or minus a certain amount. Every real number from 0 to 1e-38 (approximately) is represented as "+0" in IEEE single-precision floating point. Every number larger than 3e38 (approx.) is represented as "+Infinity." When you start thinking about it this way, certain things make a lot more sense. For example, when you perform operations on these values, you can't expect a "right" answer but instead a "close" answer that is within the range of possible answers. Python hides some of this complexity by refusing to do certain operations at all, but you still [need to know](http://floating-point-gui.de/) about this stuff if you ever work with floating point numbers in any language.
alright, next weekend I have free I will give it a shot
Remember that they are purely examples to show output. They work in any browser regardless of what console you have installed. It's not production code.
This article shows the solutions and gotchas when checking every input type. You could easily use it to write your own custom function but that'll be done for you in the next article.
I would also say that whining about lack of syntax highlighting in a given situation is also a sign of a non-programmer. Yes syntax highlighting is better than lack of syntax highlighting. And yes dropping superfluous, extraneous clutter is good too. But anyone who *whines* about curly brackets and semicolons (or lack of syntax highlighting) instead of just getting the job done is not a programmer. Like I said, it's like a mechanic who whines about grease and oil. Sure it's better to stay clean, but getting some muck on you is part of the job.
Personally would use GPL.. and then MIT... 
text-shadow on body text? Really?
Ah. Good. I thought my eyesight was getting worse.
Do not want comments like jQuery, or PHP for that matter. There is no ranking or anything, so every amateur who just learned about prototypes will end up posting some code full of terrible practices for everyone else to mimic.
Personally, I have found MDC to be a great resource. They do label what is specific to to their engines... and I don't know of many resources that are as good. The author seems to offer no alternative either.
I agree. At least the wiki can be maintained by sane people. I think his idea about an independent site is a good idea but difficult because the community is so fragmented about high and low level concepts.
I got dizzy scrolling up and down the page.
I'm firmly convinced that half the shitty PHP code that gets written in the world is a direct result of clueless amateurs "helpfully" posting bad code in comments on PHP documentation pages, and other clueless amateurs assuming that the posted code is good to use "because it's on the official PHP docs site". It's like a self-validating perpetual circle-jerk of terrible programming practices.
&gt; **Update:** &gt; Chris from Mozilla points out that actually the PromoteJS effort wasn’t Mozilla. Hmm, good point. I was distracted by the friendly dinosaur. That means PromoteJS couldn’t fix MDC, and vice versa. So, er, yeah Nice research there, Kenneth.
I don't really understand the difference here. Isn't JSHint just more of a single developer's opinions? Are there options that it provides that JSLint does not provide? What basis/background do they have for their opinions? Is more and more flexible linters really a good thing? I think the point of Crockford's linter was to try to pull people people towards writing clean code and following a style guide based on what was determined to be best practices after years of use and experience. Creating a linter that just enforces bad practices or whatever practices people like at the time isn't going to help anyone. Another linter will just create more fragmentation. Why not try to move more mainstream JavaScript libraries towards the high standards that JSLint sets rather than undercut those standards?
I agree with [this article](http://badassjs.com/post/3364925033/jshint-an-community-driven-fork-of-jslint)'s comments on Crawford's opinionatedness.
&gt; Crockford's linter was to try to pull people people towards writing clean code and following a style guide based on what was determined to be best practices after years of use and experience. jsLint goes beyond practice. The default settings enforce a programming *style* that is not everyone's up of tea.
An entirely different linter was created to change the defaults? Who decides what "practice" is and what is their basis for that decision? I just don't understand the justification but please elaborate on which defaults have proven to be ineffective.
you'd rather have w3schools?
I thought it only output errors, not trivial matters like using curly braces or not.
&gt;The default settings enforce a programming style that is not everyone's up of tea. That's what I *like* about JSLint. It makes working in a team a lot easier.
I've seen this countless times everywhere on the web, lots of noobs leading noobs. I've developed a bullshit detector and can swiftly bypass the junk, though, a lot of the problems I encounter aren't ones that less experienced coders are asking questions about, so typically the answers I need are also sought by experienced coders and the solutions are often found pretty handily. Though living on the cutting-edge, I come up against problems that nobody has solutions for all too often.
I'm unclear as to your point in replying to my comment, unless it was just an excuse to say "I'm a fucking awesome programmer" for five consecutive lines. &lt;:-/
I team, likely wasting a lot of time getting their code to pass Lint.
In my experience using JSLint *saves* a lot of time. I'm using a plugin for Komodo and an on-before-save trigger. It doesn't complain about anything most of the time. Needless to say that I also use it for my own projects.
I suppose, if you're used to writing in a style that adheres, it wouldn't be too big of a hassle. Single line if statements forever! :)
I used 3 different indent styles for a couple of years each. Any somewhat sane style is usable. There are always enough visual hooks available. The only important thing is consistency.
We use JSLint in the real world, it's tyranny enforces standards which results in easier to maintain code. Sure it's opinionated but it's mostly right. Every time I have to debug someone else's Javascript I make it pass the lint and more often than not that fixes the problem
From what I gather JSHint only outputs errors that will break the code, not those that go against Crockford's style. I've seen several programmers who prefer that as they can use their own style while still following the required rules to make code work. To each their own - that seems to be the idea.
I'm sorry that is the way you took it, but that is not how it was intended. I believe my post was on-topic and not aggrandizing my skills as a programmer, I was only trying to relate something I've experienced that I felt was related to issues you brought up. But thanks for being a bit of a bit of a douche for calling me out on something that probably wasn't intended the way you perceived it. upvote removed.
Without going into a discussion about writing better (or at least more re-usable) code and just focusing on the question at hand; you might be able to get away with simply passing a parameter in with the functions. Are all the images named using the same convention? If so, you could get away with this: function mouseOver(x) { document.getElementById("about").src ="images/splash_up_"+x+".png"; } And then in the JavaScript you've got inline in your HTML, you can do: onmouseover="mouseOver('04')" Note: Most people will dissuade you from using JavaScript "inside" your HTML like you are doing. If you were already using a javascript supportive library (like jQuery) this could be done with relatively little, and much cleaner, code. Of course, something like jQuery is a lot to pile on for the sake of 5 buttony things. 
I would argue it's more like a mechanic whining about working in poor lighting conditions. Yes, he can still get the job done, but it's a waste of his time if better lighting is available.
Apologies - I shouldn't have been so harsh, but I honestly couldn't see anything in the last couple of sentences apart from (what looked like) bragging. Sorry again for being a dick, though. :-(
&gt; To each their own - that seems to be the idea. Everyone knows that individuality is what coding conventions/style are all about.
I think this is a game changer - unless they charge an arm and a leg....
I'm looking forward to hearing what that "one very opinionated person" has to say about JSHint. In the past, he's had some snide things to say about "ninjas" and "AJAX library developers." 
Maybe if we had a fast server side DOM. jsdom is way too slow for this type of thing for anything more than demonstration purposes.
Well I was thinking more in-house and organization level style but yes, your point is well made and the levity is appreciated.
That's the problem I see in most implementations like this. In theory, they are the way to go, but in reality most of them are nowhere near as fast as typical implementations. It is analogous to database normalization. It is the way to go, but at some point you may have to denormalize for the sake of speed. Additionally, as a front-end developer I would expect **real** ones to be able to handle a templating language. If you hire one who cannot handle a templating language, I'm sure their JavaScript skills are atrocious as well meaning they have very limited skills not suitable for the role.
Zope Page Templates have done exactly this for about a decade, FYI. &lt;div tal:condition="options/show_the_div" tal:content="container/render_div_contents"&gt; Placeholder text gets replaced. &lt;/div&gt;
And how unpleasant that was to work with...
Err.. no. No, that's not the death of "micro templates". Instead of doing the usual mistake of putting too much application logic into templates, you're now putting presentation logic into the application. How is that an improvement? Besides, the entire approach relies on having _full_ templates. If your project is like most websites, you'll have a common layout with some special content. The different templates will inherit from a common template (or include a header and footer if your template language doesn't have inheritance) and only contain the part that actually makes them different. So you now have a bucket full of HTML snippets that lack the ugly template code (eww!) but don't contain the common structure (including stylesheets etc) either. How is that an improvement? And you still can't rely on checking the templates if you are tripped up by a DOM issue in the production version: the templates are still ~~mangled~~ modified by the view functions (except they now do so inside backend code rather than in a template language)! You should think of turning static designs into templates as equivalent to turning PSDs into HTML+CSS. You wouldn't expect a Photoshop designer to "debug" a design problem in HTML+CSS, so why would you expect a pure front-end designer to debug a layout problem in production code? There is no clear difference between front-end and back-end development. A good front-end coder should be able to work with templates. In big projects you may even have distinctions between various levels of "back-end" code (think MVC on acid). It just doesn't make sense to pretend templates are just static HTML -- they're not. They contain loops and variables and such -- none of which exist in HTML itself. This is why you need a template language. Hiding it all in the view code (or controller code -- depending on how you apply the MVC terminology to your architecture) doesn't make it disappear -- which doesn't necessarily help when trying to debug it. If your process requires that your front-end development happens outside a development server (which may be perfectly appropriate), the resulting HTML files are still to the final templates what the PSD design was to the finished HTML+CSS. They most likely contain lots of blind copy and dummy data which does not make sense in a template and they still need "cutting" just like the original PSD needed to be turned into a workable layout. It's the same relation, exactly. __tl;dr__: Either the "solution" doesn't address the problem the article's introduction pretends it does, or it's not a very good solution for the problem. I'd argue there actually isn't any problem and the template system has its own merits without this silly context.
That has been a major argument in Python's template languages, too. Some people argue "XML-style" template languages are cleaner because they don't clutter the templates with magical plaintext and theoretically allow viewing HTML templates as proper HTML in a browser (in practice they might not, for example when resource URLs are generated by function calls rather than being hardcoded in the templates, plus all the other problems I list in my other comment). Generally "plain text" template languages are much easier too parse and don't require the overhead of generating a full DOM. I would argue that you're actually _doing it wrong_ if you're trying to look at the templates themselves in a browser. CSS aside, you should be able to _read_ HTML to understand its structure. And looking at the styling normally requires at least some dummy content. For loops, you probably also want to look at different cases: an empty dataset, a small one, a big one, etc. The same goes for conditionals (true/false) and their various possible combinations. You just _can't_ do that just by looking at a plain template, even if it's valid XHTML 1.9000 SuperStrict+.
Except for unique fancy crap, any developer should be able to adapt to simple DSLs like most template languages quite easily. Especially if they already know one -- there are exactly two wide-spread approaches (XML vs text) and all the rest tends to be a matter of vocabulary and conventions (e.g. `else if` vs `elif`, `%` vs `$`, `{}` vs `()`, and so on). I would argue XML based template languages are generally overengineered to address a problem that doesn't really exist. Removing the template logic completely from the templates is a bit like removing all primitive literals from your source code -- sure, string extraction is a best practice in compiled languages and nobody likes magic numbers, but that removing all your literals and loading them dynamically really doesn't help anyone.
Yeah, well, I liked working with it. Stockholm syndrome, maybe... There is a reason why so many templating systems do exactly what this Node.js article is criticizing: it almost always sucks less.
&gt; I would argue that you're actually doing it wrong if you're trying to look at the templates themselves in a browser. CSS aside, you should be able to read HTML to understand its structure. The original argument that I heard (about a decade ago) was that a designer could mock-up everything in Dreamweaver, hand it off to a developer who would insert the namespaced XML attributes, and then continue to refine the page without needing to go back and forth with the dev. This was because adding the attributes changed the DOM, which Dreamweaver understood. But yes, loops and such sort of make it fall apart. Then you have to engineer some new solution to the same problem.
Yes
Not to sound to harsh, but that is probably one of the most fundamental things JavaScript is absolutely able to do. A rough understanding indeed. It is quite possible. It seems that perhaps you meant to ask how to do it, not if it is possible. ;) edit: http://stackoverflow.com/questions/3865173/how-do-i-set-up-an-automated-quote-of-the-day This might be of use to you.
Very simple to do, jQuery would make it even easier. Use this as a project to begin learning jQuery, it will be easier than you think.
While the OP may seem a bit clueless, give them a break. We've all seen people who get suckered into purchasing Java or Flash apps for similar functionality. At least this person is asking around first.
I understand that jQuery is a more quick and simpler form of javascript? Is this correct? Does one need to know javascript first before learning?
I kind of agree, but at the same time... this is the equivalent of modern illiteracy if you have to ask about something that a simple google query could answer for you. http://www.google.com/search?q=javascript%20quote%20rotator
Although most would say you should, and it might help, jQuery can be so simple that for basic stuff it is all you need.
Oh I'm sorry were you born with all the things you know about programming? No, you learned as I am doing now. 
 &lt;div id="quotes"&gt;&lt;/div&gt; &lt;script&gt; var qElement = document.getElementById('quotes'); var quoteList = [ 'Quote 1' , 'Another famos quote' , 'A not so heard of quote' ]; // randomly //setInterval(function(){ // qElement.innerHTML = quoteList[Math.floor(Math.random() * quoteList.length)]; //}, 2000); // in order var place = 0; setInterval(function(){ if (typeof quoteList[place] !== 'string') { place = 0; } qElement.innerHTML = quoteList[place++]; }, 1000); &lt;/script&gt; A few notes: * The qElement and quoteList are "global" variables. This is considered bad practice, but I don't feel like writing a closure right now, and those are probably beyond you for the time being. * They are done OUTSIDE the loop because it is more efficient to not have the loop recreating them every time it iterates. * There are two routines here -- one randomizes the quote, the other does them in order (by creating another global variable to track the current quote position.) * Add more entries to the quote array as needed. * Make sure the quotes element exists before the script runs, or it won't be able to find it when it tries, and thus will fail. Have fun!
Sometimes when learning you don't yet know how to even ask the right question -- even after 10 years of working in this stuff, I still can't google a solution till 2 days later when an alternative way of referring to it is uncovered. Suddenly, google reveals all at that point. Before, however, face smash keyboard. :/
you're a good man
Yes but at the risk of sounding smug, I learned mostly on my own by being able to form a well worded Google query. Sure not everyone is good at that, and perhaps it can be hard to know what to google at first... but if you would have put any number of combination of the words in your original post, in to google, you would have been met with many many many tutorials and examples of exactly this. If you can type a reddit post, you can type a google query.
Yes true, but this isnt exactly some complicated problem with a complicated solution. If the OP would have put any number of combination of the words he took the time to type out in this reddit post, into Google, he would have come up with thousands of pages of tutorials and examples of exactly this. And if he has at least a "rough" understanding, im going to assume he's done a few tutorials... in which case he should very well know javascript can control the DOM and accomplish something like this. He's just fishing for someone to post the code and do it for him
I asked reddit because I like asking the best. Sue me.
I may not agree with what you post, but I will defend to the death your right to post it. (but that doesnt mean i wont give you a hard time about being a better Googler ;))
when you said at that last part to make sure the quotes element exists. Is this done in the body or header? Am i supposed to be calling it like this, "window.onload=quotes;"
Fair fight. I'll never have your google expertise it seems.
jQuery is a library that sits "on top" of JavaScript. Learning it does not teach you JavaScript; it teaches you jQuery. Anyone recommending you learn it before learning JavaScript is a scrub and you should ignore them.
does the [marquee tag](http://en.wikipedia.org/wiki/Marquee_element) still work? Maybe you should look into that instead of that newfangled javascript stuff. \*troll-face\*
You can directly copy the code above and drop it into your HTML. What I mean by the last part is this: Drop the code in, but try putting the script tag in the &lt;head&gt; instead of *after* the div like I have it up there. It will stop working because the script executes before the page render has reached the div tag. 
I've set it up properly but I am getting no output. I have the script in my head with the correct type labeled. Do I need to call a function to get it to run in my body?
Not to be rude, but you clearly did not read my last post at all.
You'd actually have to allow adding dummy nodes in a loop that would be recognized as such by the template language -- and at that point you should be realizing you're overengineering. Besides, your designers shouldn't be working with a WYSIWYG editor anyway and if they are code-savvy enough to wrangle with pure HTML, they should be savvy enough to deal with a template language, too. Also, inheritance makes this point moot.
Don't be a dick. Not everyone know's what direction they're supposed to look in when figuring shit out.
giggety
That game is kind of addictive.
Ah, great point. :(
&gt; There is a reason why so many templating systems do exactly what this Node.js article is criticizing: it almost always sucks less. I'm [trying to come up with a semi-usable API for defining templates entirely in JavaScript](https://github.com/insin/DOMBuilder/issues/#issue/4/comment/793739) without *needing* any sort of DOM and I'm starting to come to the same conclusion. Wrap reminds me of [QueryTemplates](http://tobiasz123.wordpress.com/2008/11/19/pure-html-templates-theory/), but with what looks like less hellacious binding. 
&gt;A good front-end coder should be able to work with templates. To be honest, that template stuff is piss-easy and those few things you need to know typically fit on a postcard. This stuff doesn't even amount to 1% of the things you should know. And yes, that DOM stuff can be nice indeed. For some things, that is. E.g. if you write a code generator, there will be only one node which will be filled with text. DOM based templating won't help at all in that case. Regular (string based) templating, however, will work just fine in this case. Same deal if you want to generate a plain text email. There won't be any nodes to work with. Text with placeholders is your only choice.
Thank you. I get really tired of people always responding to JavaScript questions with 'you should use jQuery'.. Is it really necessary to load a 70KB library to perform a task that can be done in less than a dozen lines of code?
Think Vitamin has a great post on learning JavaScript - [Tips on Learning JavaScript](http://thinkvitamin.com/uncategorized/tips-on-learning-javascript/)
Read [the ECMA specification](http://www.ecma-international.org/publications/standards/Ecma-262.htm). Without that it's just a bunch of whatever random bloggers say. With that, you start to know the difference between a bug in your code and the browser. After that, the best tool there, in my opinion, is [the Quirksmode compatability table set](http://quirksmode.org/compatibility.html).
The ECMA spec is a good idea. Thanks for that one.
Almost anything written by Douglas Crockford on the subject is mind shifting.
What a terrible article. The first two aren't about the language. The third says "use a library." The fourth says "don't use libraries." The fifth is a technique to avoid, the sixth is "check your work" and the seventh is "use comments." None of that has anything at all to do with learning JavaScript.
presuming you want to do front end work with it be sure to play around a lot with [firebug](http://getfirebug.com/) and these references helped me a lot to get started: [mozilla](https://developer.mozilla.org/en/Gecko_DOM_Reference) &amp; [msdn](http://msdn.microsoft.com/en-us/library/ms533050.aspx) Also I can concur with elg0nz... Douglas Crockford is really good... but maybe his [talks](http://developer.yahoo.com/yui/theater/) are a bit advanced when you are just starting. Reading the ecma specification to learn Javascript personally seems to me like learning a language by reading a dictionary... no fun and highly inefficient. It's a great language... I am having lot's of [fun](http://www.tomsplanner.com) with it.
Most specs are so verbose that you won't gain much by reading them unless you have a solid grasp on the language already. Most of my visits to specs are for specific things.
Learning by asking people is just as valid as learning by asking machines.
If you're going to look through the spec, best to use [5.1](http://wiki.ecmascript.org/lib/exe/fetch.php?id=start&amp;cache=cache&amp;media=resources:tc39-2010-062-rev5p.pdf)[PDF]. It has errata built in. Also see this [HTML version of 5.1](http://es5.github.com/). I don't think the spec is the best way to learn, though. You won't retain much after reading it.
I agree too. However, I think I am a victim of years and years of c-style syntax. I look at ruby or cobol and get annoyed at all the *words* in the code. And I look at Perl or Haskell and get annoyed at all the *noise* in the code. Whereas C-style seems perfect. I think I'm just old and biased.
Every other day, I think significant whitespace is brilliant. Yeah, weekends mess me up.
**Read other people's code.** Read jQuery's source; read Node's source (the JavaScript parts). Read other OSS code. Then, use their code. See how their code interacts with your code. Try adopting some ideas (such as "immediate execution" functions, "default" parameters, promises/deferreds). Figure out what works when and what doesn't work then. Then read some more code and continue the cycle.
Build things. Seriously - think of something cool, and try to build it. It's the best way to learn.
Don't read the ECMA spec. That is absurd. It is like telling someone to learn English by reading the dictionary. Use it as a reference when you have a specific question maybe.
Read *Javascript: The Good Parts*, it will give you a whole new understanding of the language and will teach you the proper way to write Javascript. Also, as an added bonus PROTIP: never assign variables to the global (window) scope unless you absolutely need to. Far too often do I see Javascript beginners define tons of vars without encapsulating them. Remember, while Javascript may have C-like syntax, C has block level scope and JS has function-level scope. It's easy to forget that. Closure is your friend.
&gt; It is like telling someone to learn English by reading the dictionary. No, it isn't. The dictionary isn't definitive and only covers word definitions. The specification is definitive and covers the entire language. Don't downvote advice because you disagree with it.
Sooner or later, the spec will have to be read. While I wouldn't recommend it as an introduction to the language, it's required to go from advanced coder to master. pro-tip: Since the spec is a wee bit dry, read it with a purpose: Write a javascript interpreter. That's what the spec is meant for, and it will make you aware of many subtle things you would otherwise probably never think about even as your daily js code relies on it.
I downvoted it because it was bad advice. And I didn't say it was === to reading a dictionary, I only said it was == reading it. Nobody 'masters' a programming language by reading the spec. It *might* be handy as a reference, and that is just a maybe. The spec is written for language implementors, not as a useful guide to knowing the language.