[removed]
[removed]
Here's another example (my own site): http://pakastin.fi All JS here: http://pakastin.fi/js/main.js All CSS here: http://pakastin.fi/css/main.css ;)
[removed]
Firstly, thanks a lot for the help. super appreciated! !e.range.getValue()) return - - was setup so that when i delete text within a cell that is obeying an onEdit function it would not place a new time stamp when the cell was emptied (recognizing deletion as an edit). I tried your suggestions. Seems like the code wanted parenthesis around the if (!e.range.getValue()) return; Unfortunately while the code was clean and running it seemed to cancel out the time stamp function that I had going on.
My company just convert a Babel based project to use TypeScript. We tried Flow, but the currently tooling (3rd party typing, IDE support, OS support) around Flow is rather lacking. We have 2 implementations * TypeScript -&gt; ES6 -&gt; ES5 * TypeScript -&gt; ES5 Since we don't use any ES6 feature thats currently not supported by TypeScript, we don't have any issue with either of those setups. We found that Babel tend to do an interoperable implementation of ES6, while TypeScript follows a stricter interpretation. (e.g. modules, `new`ing non-void functions)
Right, so debugging using two compilers is as easy as debugging a normal .js file that I include in a script tag?
By using source maps, it doesn't matter how many compilation steps or transformations your scripts go through, you can debug your script in the way you've written it.
Looks like that's got it working! Thanks guys, was unaware that i could have an if statement within an if statement.
I only somewhat agree with your concerns with microlibrary approaches. The major reason I won't adopt angular or other opinionated frameworks that are designed solely to work together (and not really play nice with anything else) is that when there's a feature I need to build and library x is the reason I cannot build it due to bugs or gaps in the product, I need to be able to replace it. With opinionated frameworks, this means a complete rewrite of our application. With microlibraries, my rewrite is much more limited in scope, sometimes resulting in a complete eradication of a library in hours, not days or weeks or years. Ideally, the big opinionated frameworks would be damned near perfect, and ng-repeat would perform well and 2.0 will have a compatible upgrade path and blah blah blah. We are at least five years from most popular frameworks and libraries reaching a level of maturity that I would bet my job on adopting one jack-of-all-trades framework. Glue code can be reusable too, you know? There are patterns for such things.
Writing your own DOM-traversal library must be so much fun! I have to maintain an ass-old WebForms app but I get to write RESTful services and use Knockout.js wherever if I can get dev time on it before my boss notices. Funny shit.
[removed]
[removed]
Are you going to be working on this code base with other human beings? Use TypeScript. Otherwise, Babel. That's my personal decision procedure.
What exactly are you asking? Do you want this written for you?
They work very differently under the hood though, I believe. I think Flow is built with OCaml, heavily using pattern matching.
I'm a big fat dirty liar. It works great. I was hit by a firewall. This is excellent.
Would love to go but $1120 for a one-day workshop that was just posted this morning is steep. That's more than a conference like ng-conf which included meals and room. Hopefully the content will be posted online afterward.
As people have mentioned here, your best bet is to either use a module system like require.js and some sort of build tool that puts them all together nicely. Typically I like to have one main function which kicks off my program and I break everything else into components or helpers. I prefer Makefiles for building (just to keep it simple), but there are many others like Gulp, Grunt, and of course, DIY build tools. Although, it's really important to understand that just splitting things up into different files doesn't provide you all the tools you need for making a JS application scale. You should also think about how to manage state. A lot of frameworks do this pretty okay (Angular, Backbone, React, Ember, etc) but I recommend looking into Backbone or React. They have low learning curves and will give you big bang for your buck with reasoning about your application state. React more so than backbone. People have mentioned IIFE's here but I'm not sure that is a solution to your problem. That should be thought of as a way to encapsulate a lexical scope, but shouldn't be thought of as "the way to manage complexity". You can also use languages that compile to JS for various reasons. Often times these other languages can have nice abstractions that JS doesn't provide out of the box (like a real module system, more namespacing, immutability, etc). I would look at CoffeeScript (although, this is just prettier really), TypeScript, JSX (with React), Js_of_ocaml, Elm, Dart... and many more. Those communities and the types of problems those languages solve best should be examined before you pick. 
the wording must be confusing then so I'll change it to only reflect the sponsored rates
Plop is usually the sound my JavaScript makes when it comes out.
Writing a complex web application in jQuery is like describing a mathematical algorithm with an infinite series of "if/else if" statements that dont mix very well.
Writing a complex web application in jQuery is like creating a Pivot table in Excel and copy and pasting values as soon as you're done. Using a web framework (properly) is like keeping the pivot table intact.
Your code is missing a closing "}". So I don't think it'll run as is, anyway.
You have a couple problems with your code. Firstly, you're attempting to return your resourceListArray while inside the callback for execute. You need to pass in your own callback to the getResourceList function. Secondly, you're returning while still in the for loop. Silly mistake, but that's fine. I made some slight adjustments but didn't test so feel free to debug further if this doesn't work. function getResourceList(args) { var callback = args.callback || function () {}; var request = gapi.client.calendar.calendarList.list({ 'fields': 'items(id,summary,backgroundColor)' }); request.execute(function (resp) { var resourceList = resp.items; if (resourceList.length &gt; 0) { var resourceListArray = []; for (i = 0; i &lt; resourceList.length; i++) { var resourceItem = resourceList[i]; var resourceSplit = splitResource(resourceItem.id, '@'); var calendarIDN = splitResource(resourceSplit[0], '_'); if (resourceSplit[1] == "resource.calendar.google.com") { var resourceObj = {}; resourceObj.key = i; resourceObj.label = resourceItem.summary; resourceListArray.push(resourceObj); } } callback(resourceListArray); } else { callback(null); console.log('No resources detected!'); } }); } getResourceList({ callback: function (list) { console.log(list); } }); 
&gt;Seriously? I just finished building a fully featured CRM for a regional chain using Javascript and it took about 2 months Ok give me the address where I can send cookies. &gt; If it takes you 12-18 months to build an application in Javascript, you a likely not qualified to take on this task How arrogant are you to say something like this without knowing the size of the application? 
&gt; 12-18 months just for a rewrite is insane. Arrogant to say that without knowing the scale of the current application
We are 4 people but only two of us will work with the rewrite. The other guys will work with maintaining the current version. I'll gladly listen to any tips you have rearding required dev time etc. We will most likely go with either Angular or Ember but platform is not yet decided.
Wil je een plopkoek?
Building something new is _easy_. Transitioning existing data/tools/behavior to a new system is difficult. 1 year to transition a large project with a lot of data, and do so while maintaining the needed behavior and data is reasonable for a small team. It can take 2-3 months just to prototype it, which is what it sounds like you did. If you really did perform a comprehensive transition in 2 months then that is extremely impressive, and kudos to you -- I would love to hear more about how you accomplished it.
Thank you for this answer. More and more people are suggesting swapping out little by little, but I question the possiblity to use something like Ember *inside* of our jQuery soup. I sense a lot of temporary glue code being needed in order to make the unholy union work in this transition period. But you've given me much to think about. I thought to myself: "Hey if they are willing to invest 12-18 months in this, let's just rewrite from scratch." Obviously some people discourage me from this. I will do some more soulsearching.
&gt;Ok give me the address where I can send cookies. Oatmeal ones please &gt;How arrogant are you to say something like this without knowing the size of the application? It is not arrogance, it is practicality. If it takes you 12-18 months to re-write a web app using JS for anything short of a Facebook clone or a banking website - you are either using the wrong tools or you lack sufficient experience. If my subordinates came to me and asked for up to 18 months to rewrite one of our key applications, I would send him/her back to the drawing board to come up with and present more practical alternatives.
Its not really possible to write a web app exclusively in jQuery unless you don't plan on doing anything other than "dumb" DOM manipulation.
Great comment. Thank you. 
im not sure how to create the form, or imput the figures
Sure, but you can maintain your own private plugins/addons/patches for a framework. At least that way you're only maintaining a delta on top of a framework, rather than your own ad hoc framework.
You do know that Google crawls javascript rendered content now, right?
and the benefit of using this over Yeoman? &gt; I did wrote a Yeoman generator for the project before. It was concretely unused by the team. What is this supposed to mean? From the README: &gt; Yes, yeoman has sub generators that do a similar job. However, if you're like me, you will continually tweak structure and code throughout the project till the sub generators that came built into your yeoman seed are no longer valid. WAT?! This is when you refactor the sub-generators, just like anything else. I must be missing something b/c this I do this exact thing in Yeoman and it's quite easy. Project-specific (sub-)generators should evolve over time, just like the codebase. If you're using someone else's generators for your big company project, you're doing it wrong. Just create your own.
This is a very good first step which will greatly improve the structure of your code. The next step would be true modules which also ged rid of the global namespace pollution.
Yeah, there's many different solutions, but patching an totalitarian, opinionated framework is considerably riskier than patching out methods in a smaller library. I mean, it is absolutely trivial for us to snap out underscore and snap in lodash. Upgrade our views to react from backbone to improve performance and gain componentization? Sure, can we keep the backbone model code? Sure! Well, what about all our jquery? Uh, we removed jquery last summer. Awesome. I'm sorry, I know what you're trying to say, but it's really not as clear cut. Code should be modular and portable, and not dependent on non-mature opinionated frameworks.
I'd say it depends on the modularity of your current code base. If you can separate some smaller parts of your current code from each other, you can then start on migrating one part without interfering too much with the rest of the code. If it is just one big mess of code, you might still be able to identify separate functional units in your application and then first work on separating out one such unit, before moving it over to Ember or Angular. The best way to spend your time now is figuring out a roadmap and detailing the initial part of that roadmap to a level where you can say what will be done in the next week or next two weeks.
Redrawing insteas of translate was better idea(400x200 map). Atm switched to canvas, before I move onto WebGL
At current state, I draw map once, and only update few cells / turn. Works smooth as charm even on my crap ass pc(simple enemyAI included) What exactly update is going to be, if it's not secret?
Are you trying to build it from scratch as a learning experience, or do you just want to have a blog built on Node? If it's the latter, check out Ghost.
Why is my opinion arrogant? Spending 1 year+ of dev time to re-implement a business critical app with no visible benefit for the users does not sound like an attractive idea for business. If you want more constructive advice, I would consider isolating and refactoring parts of the aplication. Maybe there are some parts of the app that don't change much and you can just leave the legacy code sitting there. Or maybe you could just start writing new parts of the application in a modern codebase.
Visual Studio Code has great typescript support and is for free!
Event delegation is the right strategy. To match different elements, you can use [Element.matches](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches) if you have a set of whitelisted selectors, or [Element.closest](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest) with a single selector (the class of the green boxes) if you want to know which green box the user clicked on.
wow great, I didn't know all that. Thanks! :D
At this point flow needs to adopt the typescript one to benefit from DefinitelyTyped
I can't help much on the technical side, but I have heard some scary things about EmberJS (and great promise) while Angular seems to be rock solid. (You're not really escaping JQuery though, since Angular uses a portion of it.) But, I can give some more general tips about how to make the presentation itself. When making any technical presentation to management: * Repeat the benefits and objectives at least twice. (Cost savings!) * Be sure to include a gradual transition plan that allows maintaining existing functionality as the new features are in progress. I really recommend software developers find and join a Toastmaster's club. It's helped me a lot so far. 
Which features? I didn't look too deeply into it, only that vscode autocomplete in tsconfig.json shows the different compile options going down to ES3
use Dart, or if you have already too much code, use typescript
If the rest of the job posting sounds like something you can do and you want to try, just apply. There's no standard meaning of expert and so no matter what they will assess your skills as part of the interview. If you do get an interview and you don't get the job it's still a learning experience. You can ask yourself (and the company if they are willing to answer) how you could have done better and use that as a direction for continuing to develop your skills.
Did you invent a framework yet? /s
What? Why?
I like asking candidates to explain this -- what are .bind(), .call(), and .apply() used for? how are they different? Most candidates have trouble with this, but it's not a trick question or anything. It's very much related to the philosophy of Javascript's design as a language and its predisposition to functions / closures / scope / and hoisting. Someone that can explain these well gets a gold star for more interviewing.
I just moved something fairly small from jQuery to Angular. It's taken 3 or 4 times longer then I thought it would.. partly because I am learning Angular along the way but also because shifting from jQuery to Angular is not quite that simple - thought it would take maybe 1-2 times but it's taken about a week so far. If I was in your shoes, I would identify a part of your existing website that would be a really good candidate for dropping in Angular. One of the challenges is honestly that it's just not just porting stuff over, it's re-thinking the entire design and organization of the code and all the re-thinking time is the price you will pay. you'll probably have better luck doing some Angular on the side then go work somewhere that'll hire you for it. I'd be surprised if your employer thought it was a good idea. Instead of telling them you want to rewrite the entire site in 12-18 months do something small first that would be an ideal fit for Angular but never present it as a major rewrite. then do a little bit more in Angular then over time you'll get their buy-in on Angular. Take baby steps. Don't say anything about 12-18 months because they'll likely say no. 
Framework will be butter if can !?
Is it bad if I still have to use MDN to remember which one is which between call() and apply()?
OK but help me to make blog with Node.js and we see later The SGBD
Use a mnemonic device. call() = comma, apply() = array.
We used to have a "rate yourself system". Was 1 - 10. I look at what others rated themselves and they all said 8,9,10. So I opened up the chrome console and fiddle around and I make myself 11. Week or so later my boss is going over it with me and he sees 11/10. Asks how I was able to make it 11. I said I'm 11 at Javascript that's how.
I'm an expert! I attach JS functions with onclick DOM events. 
Also in addition to my other comment I also felt like that many years ago in my early days of web development. Learning something new, something exciting! In my case I simply wanted to learn something else like Ruby or Python or whatever. I wanted to become an expert in something else instead of continuing with the inferior language PHP. PHP was only inferior because I saw it that way. Ultimately it's just a language and can get me a job and a life. The people I've seen who have jumped onto new technology will often work on or learn this new technology outside of work. They create the change they wanted to make instead of making pitches to their employer about rewriting their entire website. They make the choice to redirect their life how they wanted. Some of them would pick up freelance gigs and use these technologies on their freelance, others I knew just had pet projects that would allow them to use whatever they wanted. So... you too have a choice if your employer says no or refuses changes,... make the choice to create the reality you want instead of allowing your employer to lead you in a direct you're not interested in.
I would say first get better at using jQuery with a modular pattern for organization (getting rid of the spaghetti), then combine it with Vue.js to handle your ViewModel.
I would just ignore the current insanity to have a new framework, new module loader, new package manager, etc, every month. I get the feeling that new people getting into web development must be confused as hell nowadays.
Today I saw a post asking for at least 3 years of experience with ReactJS. I was pretty baffled, considering React was only released June 2013...
Thanks! That finally will help me remember. 
I consider myself a junior, but have been trying to learn more about these methods, although I haven't seen their relevance just yet since my applications aren't very complex. I'm also learning more about design patterns, and finally started consistently using the module pattern. Do you like to ask people about design patterns? Thanks!
Thanks, this was something I needed to hear. I have been writing all my stuff in VanillaJS and have been trying to take myself to the next level by writing more Object Oriented Javascript. Sometimes job postings can just be intimidating because as a developer it can feel like the more you learn the less you seem to actually know haha.
Then I would go with express and postgreSQL. Express does routing and file serving and middleware for you. Middleware is like extensions and gives cookie parsing and file uploads and sessions and things like that. PostgreSQL is like the standard multi-user relational database. I'm not sure how nice express plays with postgre, I don't really use node for stuff like this. A lot of people like using mongo with node, but noSQL is kind of limited in uses and isn't really meant for making blog apps. Node isn't really meant for that either, but whatever. 
Easier for me to remember that `call` is the one I always use, and `apply` the one I don't :)
I have been at it for 3 years now and I can't even imagine starting in this madness. Great great things are happening but we need to better understand all the things that make us say "wat" about JS. Effectively read kyle simpsons books, become an engineer that actually knows what is going on instead of a framework / library junkie. Not saying there is not value in using others work and contributing to open source etc but i think there is a difference between someone who mindlessly uses a thing without understanding what is actually going on and someone who takes care and precision to write something that is the correct solution for the problem. Phrases that come to mind: "When you have a hammer everything becomes a nail" and "software is more often read than written" 
I so wish I could pull that one where I work, if only to troll my coworkers :)
On the flipside some frameworks really can help and some aren't quite what you wanted in the first place and can inhibit you, if that is the case you SHOULD switch to something that works, but don't do it to have cool shit.
Read [this book](http://www.amazon.com/gp/aw/d/0131177052/). Then, after reading the whole thing cover to cover, start working on your proposal. From some of the questions you're asking about jQuery integrating with a framework, it's clear that some more basic concepts of how to isolate legacy code and migrate piece-by-piece would be very helpful. Also, just a suggestion, but I'd highly recommend doing the new development in TypeScript. It'll compile to play nice with any other code you might need it to, but will offer you some awesome tooling that will help in maintaining your project moving forward.
I'm the opposite, I use apply all the time and call hardly ever.
That's really common in resumes. It's just another form of expert, mid, junior. They are not going to check that you have X number of years. People usually get better at something the longer they've been doing it.
I'm jobless right now.. the fact that I already know all of the answers to the javascript ones there makes me feel like I should apply to some javascript jobs, especially since I really love it (now). (this came from the fact that I lothed it initially and wanted to know as much as I could about it...)
Yeah I totally understand -- I didn't realize the need for these until my brain sync'd with the "essence" of JavaScript. you can't explain essence well, but you can start by thinking about functions in a different way. I'll answer your pattern question too, give me a minute. This will be a long post but I feel like talking about JavaScript a lot tonight. Everyone uses functions, right? But often they are treated like something really simple and kind of trivial in the grand scheme of things, like traffic cones. You've got this complex processing to do, so you sorta just split it up into manageable pieces and call each piece a function and then call them in order, and maybe combine stuff in the end. Nothing wrong with that, right? You get your lanes of data traffic separated and go about your coding. No one thinks hard about how traffic cones should work. Really, there's not anything wrong with that, modularity is necessary. But functions aren't just for dividing up and processing data traffic. In JavaScript they are like little machines that are tangible and have a time and place in a 3 dimensional coding world. I just made that up but it's true! Functions have their code, they have their context (scope), and they have a time(s) at which they are executed. When you think about functions in a naive traffic cone manner, you will think that all three of these things are tightly coupled and bound together forever, but in JavaScript they can each be manipulated separately. And that is super powerful and it is enabled by having things like .bind() and .call() / .apply() and many others. So, a generic example of a pattern I've used before -- you can have a factory function that returns new dynamically created functions, each with their own bits of customized code, their own customized scope that will stay put and follow them no matter where they are actually executed, and then they can be picked up by the callee of the factory function and stored somewhere, like inside an object literal, and then taken "off the shelf" of the object literal later and executed with the context that was assigned previously, which was actually far far away in "time and space" from the current location in the code. In fact, if a value in that far far away context changes, your function that was built there, and boxed somewhere else, and actually used much later still has access to that value, even the updated value -- like reaching through a wormhole and grabbing something on the other side of the universe like it was just a cup on your coffee table. That makes JavaScript sound awesome right?? Maybe? I think so... Anyway, as soon as my brain sync'd with the idea of (my ad-hoc analogy) 3 dimensional function machines, my code started to flow much more effortlessly and I was avoiding problems that would have been real pains if I hadn't switched my paradigm. Like I've been peddling really really hard on a bicycle for a long time and just now realized I could have taken a car instead. So about patterns -- that example I gave before with the function factory is a pattern that I actually used. And here is the crazy case where I used it -- read this carefully -- It was needed to let a parent browser window control a websocket client library, that was embedded in an iframe, that had every function call designed to use a callback, which was a serious issue because postMessage(), the only way to communicate between parents and iframes, only accepts strings and not function references. By creating function factories I could reference function callbacks on either end with strings that were used as object properties with the functions stored as values. Is that even understandable? I read it three times to make sure I wrote it correctly, but that's an accurate explanation of what I built. Holy cow that's really obscure and complicated. There wasn't a book I could read called "Standard JavaScript Patterns" and find that pattern in there and be like, oh exactly what I needed! But understanding the essence of Javascript, I managed to build something unique that solved my problem. That true story is a good allegory for how I feel about "patterns". They can be useful for seeing how the essence of a language can be applied, but taking your current problem at hand and trying to squeeze it into some sort of generic pattern seems backwards to me. If you're really understanding your problem and the affordances that your language grants you, then a solution should be readily emergent. If it's not, you need to understand the problem better or the language better, and maybe reading a book of patterns gets you there... but personally I don't like memorizing them and using them like recipes. TLDR; interviewing a programmer that was a "recipe book memorizer" instead of a "chef" would give me a very different impression of skill level. Also, JavaScript functions are like quantum entangled 3 dimensional code machines. Ooh, sound cool? Read the whole post! If anyone read that whole thing, thanks! 
&gt; Some fucking asshole pulled that question on me at an interview and then didn't even bother to call afterward. Oh, sorry that after 5+ years in enterprise development I've literally never had to use any of those methods. If you haven't used `call`, `apply`, or `bind` in five years of JavaScript development then I'd say your development is pretty questionable/suspect. This isn't a hard or complicated question, this is super basic, especially for anyone who has any knowledge of functional programming (i.e. third year computer science students).
Yeah don't worry about that, recruiters tend to have no idea what they're talking about, and are basically just throwing out a wishlist of what the IT manager would ideally like to find, resulting in a job description which no individual human being can ever hope to fulfil all the requirements for, at least not without a time machine. Just fill your resume with as many buzzwords, technologies, frameworks and libraries as you can think of, and try to get past the HR drones and get an interview with someone who knows what a computer is. Be careful, if you put Javascript on your resume, you might accidentally get an interview for a position as a Java developer. Also do make a point of knowing jQuery and other libraries/frameworks, because the same recruiters who think that Javascript and Java are the same, will think that Javascript and jQuery are completely different things, and will turn you away because you're a Javascript developer and they're looking for a jQuery developer. Then once you get the interview its their job to determine whether you're enough of an expert. Probably by making you sort an array or something. Even if you're not as much of an expert as they want, they might have a more junior position that you could be suitable for. So apply anyway.
I am have yet to really dive into ES6, this is a kick in the butt to learn more! thanks!
Same here. Arrays have some useful tools and passing the items of those arrays as parameters can be fun. Especially with `...`
No one should be discounted in an interview just because they didn't know one answer. I really do like asking about bind/call/apply but there is a lot more to talk about in an interview than just certain language features. 
Oh okay. I just misunderstood then. I thought he was saying I shouldn't attach events to the DOM at all. I was just reading about virtual DOM so that is prob why I took it that way.
As simple as changing a value field before form submission?
Erm, 3/8 of them aren't even JS tools... Homebrew, Fish, and iTerm are no more JS tools than notepad.exe is a JS tool. The article was still fairly-well written, it's just that the title isn't entirely accurate.
A lot of frameworks would provide easy methodologies for this sort of thing, but you could always just have a class/factory that generates everything you need for a new input, which you can then push to an array (or a service if you want to get fancy) which can be managed easily with CRUD methods and whatever else you need. With regards to how to name/keep track of each new input, you'd probably want to use the unique name or id that you (programmatically or otherwise) give each field. If it's easiest to resort to input1, input2, etc., then so be it. Use those names as the value of a property on the parent object you store in your array/service, or as the key itself if you use a bare object to store the items.
I think Ember uses jQuery extensively, so in theory not at all.
The words "apply" and "array" have the same number of letters. I don't know why it helps me remember but it does.
# Some cats like to eat or chew on other things, most commonly wool, but also plastic, cables, paper, string, aluminum foil/Christmas tree tinsel, or even coal. 
Depending on what level of abstraction you are working at it can be common or uncommon.
You want to know the greatest example of this? Solve this: "figure out which key was pressed". What you said is literally true in this case. The MDN pages for all the existing methods - `e.keyCode`, `e.which`, etc - have a huge red **Deprecated** warning plastered over them. And the only non-deprecated method, `e.key`, isn't implemented anywhere but Firefox and IE. And the fucking implementations have as many differences as all five of the past "solutions". And last time I checked a month ago they were telling me to use `e.char`, all traces of which have now vanished from the web.
It's not really microservices if they're sharing the same node instance, all you're doing is separating them into modules. Which is what people do even in "monoliths".
why do this? button.on('press', function () { kart.add(product); }); when you can do this? button.on('press', kart.add.bind(kart, product)); 
I've been doing js dev for 5 years, and I can think of use cases but I prefer other ways of solving those problems. If you're writing with a trend towards less OO and more functional code there are a lot of solutions that don't involve using `this` and instead of calling methods from objects have objects with methods and objects with data. Since the methods are never interacting with `this` but being given a value to check/augment/operate on you never worry about the context of `this` and don't need bind. 
&gt; big boss http://orig08.deviantart.net/772f/f/2015/245/9/d/big_boss_by_kr0npr1nz-d986gz6.jpg
I need only that to get next interview?? Brb, switching countries, I hate mine now.
All those replies makes me feel like I could go for expert. Except in my country everyone wants 4++ years non-freelancer experience. **everyone**.
I've generally used knockout.js for this type of work.
I remember reading about this sort of thing in *Professional JavaScript for Web Developers* by Nicholas C. Zakas and the solution was a confusing mess of feature-testing even in 2012; it's like the well-worn fa&amp;ccedil;ades for event registration, only even more complicated and still relevant for modern Web browsers.
actual what?
Understanding on paper and using appropriately are two different things. But cool for you! Just make sure you understand closures well :)
Most of languages do not have ability to change contexts etc. If you can't live without bind, you're doing something wrong.
Ever since I saw how `call` can be implemented in terms of `apply` (put the `arguments` object into a new array, then use the `apply` method on `Function.prototype.apply` itself) I've used the latter when I only use the `this`-binding, even though IIRC every platform that supports `apply` also supports `call` natively. I first saw this in Douglas Crockford's presentation, Crockford on JavaScript, Act III: Function the Ultimate (code altered somewhat from presentation): if (typeof Function.prototype.call !== 'function' &amp;&amp; typeof Function.prototype.apply === 'function') { (function (funcProto, slice) { // gets around IE issues with NFEs 'use strict'; // in case you test this in a modern browser, setting Function.prototype.call = null; function call(oThis) { if (typeof this !== 'function') throw new TypeError('Function.prototype.call must be called on a callable object.'); return funcProto.apply.apply(this, slice.apply(arguments)); } // oThis parameter ensures length property is 1 funcProto.call = call; // Most functions should have names. })(Function.prototype, Array.prototype.slice); }
 button.on('press', e =&gt; kart.add(product));
Actual frameworks, not like home-made &lt;1000 LoC ones.
It is not hard to pour obsessively over [Dr. Axel Rauschmayer's blog](http://www.2ality.com) for a day and not learn more than most, at least as far as ES6 goes
The property name is `contentEditable`.
I consider them legacy in my project because we're moving on to something else. Of course if you're still happily using them, they might not be legacy to you :)
Haven't seen this before.. thanks for the link, it's awesome.. have some /u/changetip 300 bits! 
Doubt they had server validation on a hasty form created for internal self-evaluation.
 document.addEventListener('click', clickHandler, false) function clickHandler(e) { if (e.target === 'whateverthefuckyouwant') { doStuff(); } } Event delegation FTW
react/reflux. reflux has a simple syntax and is easy to wire things up with. very convenient for small to middle sized apps. That said, now i will try redux and see what it brings but i guess both are worth learning. as many people said these are implementations and the underlying pattern is the same.
You really think it's ok to start coding a complex project without first writing down the architecture and how you're going to do things? I don't follow how a lack of documentation ala LAMP has anything to do with not writing specs...? This is a highly complex MEAN app with lots of maths. It absolutely isn't the kind of thing you can make up as you go along.
The code I used does event delegation... That's why I had the whole "CLOSEST_CONTAINER_SELECTOR". Also, the false isn't necessary in the addEventListener. Does ANYONE use event capturing?
You also have flame charts and heap allocations that you can review from chrome dev tools. If you want to master the chrome dev tools, The Breakpoint series on YouTube is good, or even any video with Addy Osmani or Paul Irish.
If it's that complex a project and you only hired one person to do it I think you should be grateful that it got done at all. If he'd spent enough time writing all the documentation you're expecting there'd probably be 0 code written so far.
I'm seeing them a lot in React patterns, particularly .bind(), alongside new es6/7 features. What is destructuring?
That's not true is it? Destructuring has little to do with any of this and arrow functions have a much narrower use case than .call and apply 
I'm trying to learn--extreme, extreme newbie. How did you make the cool effects when you click on Sign up. thanks
There's so many use cases for being able to call a function with a context of this, or even just being able to coerce variables. For example: // Find the max value of a static array // Without 'apply' const arr = [1,2,3,4,5,6,7,8,9,10]; console.log(arr.reduce(function(prev, cur){ return (prev &gt; cur) ? prev : cur; })); // With 'apply' const arr = [1,2,3,4,5,6,7,8,9,10]; // console.log(Math.max.apply(null, arr)); // Returns 10
Sounds like the [Dunning-Kruger effect](https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect)
Fixed elements do not scroll. If you want delay when you scroll, you should make it a non-fixed element and use your JavaScript to scroll/position it.
From the given information I would blame the developer 20% and those who employed him 80%. I'm totally on the side of writing documentation - &gt;70% of my LoC are explanations, and I mean *meta* explanations, not what the code does, which the code already says about itself. However, I'm reluctant to blame a guy who was left alone for a year. Sure, the best will still deliver, but the *average* human being when faced with such a lack of interest in what they are doing will get more and more sloppy. The same person might be capable of providing excellent work in an environment where they feel more included and valued. Most work is mostly human psychology. Putting a lone guy on a project all by himself and only finding out what he's done after a year provides enough of a prediction of how this will probably fail. People can complain about "but professionalism" etc. all they want - it's humans and it's human, and one could just as well ask how professional it was to select an average person and even worse letting it get so out of hand. "I hired somebody, now I don't need to think about it any more!" TL;DR: Too late, any attempts now at slightly improving the situation will fail. Take it as a learning experience, you can't just leave things alone for that long.
You can create a function that build a default row: function createDefaultRow() { return '&lt;tr&gt;...&lt;/tr&gt;' // Just an example } And then create a listener for field 3: field3.addEventListener('keydown', function() { createDefaultRow(); // you should validate to execute only once }) This code is rough, i've done just to show an idea... i hope it helps you.
Hey, does anyone have an example in Jsfiddle of this? I need to implement this requirement in a project too.
Great :)
We can live with Assembly! We chose to use .bind / .call / .apply because they have interesting use cases. If all you are doing is coding JS as if it was C# or Java, then you're missing out!
You don't use bind to create partially applied functions?
You have moved from "unconscious incompetence" to "conscious incompetence". This is a good thing. Next is" conscious competence ". https://en.m.wikipedia.org/wiki/Four_stages_of_competence
That's not right. In January the index for previous month would be -1. Here, I fixed it for ya: MonthNames[(CurMonth + 11) % 12], MonthNames[CurMonth], MonthNames[(CurMonth + 1) % 12]
No, this is why a micro framework solving the specific problem above is relevant.
Ramda, _.curry, etc, use the amazing tools (libs) available to you.
https://www.youtube.com/watch?v=v0TFmdO4ZP0
a properly bound callback that you don't have to use `bind` on is what i'd call the canonical use case for autobinding arrow functions. 
&gt;If you haven't used call, apply, or bind in five years of JavaScript development then I'd say your development is pretty questionable/suspect. disagree completely. A different programming style, not based on OO and storing references might not need to make heavy use of these methods. The point is, it's silly to make that kind of sweeping statement based on two sentences. &gt;This isn't a hard or complicated question, this is super basic, especially for anyone who has any knowledge of functional programming (i.e. third year computer science students). what's the point of this part? Is it to make yourself feel better? It doesn't add anything, it doesn't help anyone, it's just insulting to people who don't know what you know.
You can try put an event listener before plugins listener (if its possible) form.addEventListener('submit', function(evt) { evt.preventDefault(); doYourStuff(); if (needToStop) evt.stopPropagation() // this will not trigger plugin submit event }); canvasPluginRegisterEvents(); // Your plugin bootstrap (just an example) PS: My examples are in native Javascript, avoiding any library... Your case its very specific and maybe you'll use an "alternative" way :(
I didn't understand well your problem, but i think it's a sorting problem... You can sort then using Array.prototype.sort methd: dates.sort(function(x, y) { return x.order - y.order; // will sort ascending }); Sorry if wasn't this.
That's EXACTLY what I was needing!!! thank you!!!!!
I found [this article](https://medium.com/lexical-labs-engineering/redux-best-practices-64d59775802e) to be quite good.
http://sd.keepcalm-o-matic.co.uk/i/keep-calm-and-plop-6.png
...until you run into dozens of these and it makes more sense to just use a bigger library like jQuery to save development time and possibly other issues. I'm running vanilla JavaScript on my portfolio site but you can bet your ass I'm utilising jQuery on my company's (comparatively much bigger and more advanced) CMS.
I disagree as well. You rarely have to use these unless there's a specific reason. Within your codebase most of your functions should know what "this" is, but there's only a rare few that need to be based on another "this". I've been a Javascript/web developer for over 15 years and have probably used these less than 10 times.
Would be nice to have an online tool for transposing an array of JSON objects to an object of arrays, and back again. It can really reduce data size. It's only a few lines of JS. Maybe I could write a bookmarklet.
Curious, what are the limitations of NoSQL in blog apps?
In my world, the hiring company does the specs, otherwise how would I know what to build? I'm constantly asking for clarification, and in an ideal world there is a trail of tickets outlining all the work. If your company didn't provide specs, or set up ticket tracking, QA, bugs, etc, how could they verify it does what they want? Especially with complex math involved, how can you know its right? In my experience, there way more supposed bad code than supposed good code out there. Its annoying and frustrating, but thats unfortunately the reason why our work is in demand and pays a lot.
I'm currently the "owner" of an app that's in a condition not unlike what you describe. I am also the guy who took it over many years ago and had to fix the documentation, clean up the code, and update the system over the years. Like your system, a lot of it *was* made up as the original developer went along - and this is **not at all uncommon** in the real world. TL;DR: There were failures by numerous people over the course of the development of this application, and you are not right in thinking that he has to atone for all of those sins. There are other people who bear responsibility as well. ------------------------ A refactor in 6 weeks is just not going to happen. It's unreasonable to demand it of him, and it's unreasonable for him to do it when he's already got one foot out the door. The quality will be terrible and you may end up with a broken system. You have a system that works today. *Don't break it* when he's already checked-out for the sake of making the code pretty. Especially if you can't adequately **test** your refactored code. Documentation, same thing. If he didn't do it yet, he's going to do a poor job of it in this time crunch with demands being placed upon him. While a professional *should* document what he does as he goes along, if management doesn't push for it and explicitly state that it's required, it's going to fall by the wayside. I would not call it "totally unacceptable" and lay 100% of the blame at his feet. Your best course of action now is to spend time - **a lot** of time - with him over these next few weeks. Ask him to walk you though the system. Explain why things are the way they are. How Tab A fits into Slot B. **You** will be recording all of this, building the documentation - at least enough documentation for someone to be able to navigate the code and understand how the app works. Ask **tons** of questions. Basically, get a braindump out of him without calling it such. As you're working through that process, identify **small** refactoring tasks that can be undertaken without completely upsetting everything. Ask "if we did X here instead of Y, moved A over to B, how do you think that would work out?" Things like that. Do you have an issue tracker or ticketing system for user reports? Go through that. Ask about the thought process that went though the resolution of those issues. How did he know that he had to do L, M and N to fix problem Q?
Please don't make me click on a link to get *any* information on what this is and/or does. Repost with a more meaningful title, such as; **"A library for making labels on a timeline - Labella.js"**
Thanks for the tip) Even though I got banned there during registration process. Hope you had fun time solving this puzzle.
Thanks for the response. I only worked with a big team once (very well known brand) and was kind of amazed how much everyone knew, but everyone definitely had their specialties and somehow they kept track. At the same time, I do remember a couple of the people I got friendly with for the duration of the projection mentioned how they were told to learn this or that and just expected to do so. What I remember specifically was SpringMVC, Drupal templates (which everyone hated), a C guy having to understand how Javascript works (he hated it) and everyone simply had to learn GIT quickly if they didn't already know it or else they couldn't do their work and would definitely get the boot.
I hope you do not use any of the fast food frameworks, http://love2dev.com/#!article/Yes-Fast-Food-Frameworks-Cost-Too-Much. Instead use good architecture and small, microJS libraries to give you the best application possible. Remember it is about your customers/users not your desire to pad your resume or look cool to your other developer buddies. http://love2dev.com/#!article/React-AngularJS-Backbone-and-Ember-The-Bad-Parts Unless you are planning on build a SPA and I think every application should be a SPA http://love2dev.com/#!article/When-Should-You-Use-A-Single-Page-Application Ask yourself if you even need any client-side JavaScript. You can achieve most classic web site front-end UX with just CSS. Take research like Paul Lewis' where he shows the impact fast food frameworks have on the load and run-time, https://aerotwist.com/blog/the-cost-of-frameworks/. He does not go into the memory leak issue, which all the fast food frameworks suffer from.
If you use an Ember addon like [ember-islands](https://github.com/mitchlloyd/ember-islands) you can incrementally replace complex workflows with Ember components, without having to rewrite an entire page using Ember. The key, I've found, is making sure there are defined boundaries between the "old" code and the new code. If you need to access something in the window object, create a special [service](http://guides.emberjs.com/v2.2.0/applications/services/). If you need to respond to a global event, create a special service. That way you know that the hellish mix of code occurs in very specific places.
In reality, `.apply()` is implemented in terms of `.call()` (and call is implemented in terms of an inner [[call]] function) Also, `.call()` is an order of magnitude faster than `.apply()`,
You're right, there are some examples in the React doc where bind is used. Especially with event handlers. React does no magic though, and you can definitely replace their binds with lambdas. &lt;MyComponent onClick={ this.myClickHandler.bind(this) } /&gt; Can be replaced by &lt;MyComponent onClick={ () =&gt; this.myClickHandler() } /&gt; And it's perfectly valid. I've yet to come across a use case that required me to use either call, apply or bind in ES6. Destructuring and lambdas should cover those.
t... thanks, bot.
Why do you expect the developer to write the spec -- that should have been given to him by YOU (or your company). Fortunately you have 6 weeks with him. As others have suggested, use this time to work with him and get as much documented as possible. Focus on the business problems that the code is solving more than how the code actually works. A good developer who comes in later will be much better served by knowing the WHY of the code as opposed to the HOW. Writing a bunch of tests for the code would also be an excellent use of time as this can serve as a sort of documentation AND help out when refactoring is needed later on.
&gt; Why do you expect the developer to write the spec -- that should have been given to him by YOU (or your company). No no. Developers write the technical specs. Business analysts write the functional specs. We have lots of functional specs, no problem. Thanks for the advice.
I think this is the route I will go. Thank you.
I think most developers (rightly or wrongly) consider the code itself to be the technical spec. So I don't think this person did anything unusual by building the project without documentation. But you have time to fix this -- for the next 6 weeks your job is to develop the docs with him.
I would also want to add that moving back to my old project dependencies "babel-core": "^5.8.25", "babel-loader": "^5.3.2", makes it work. I think I am just missing a some tiny bit of config value, but I am googling it and cannot find one.
So to continue that OT train of thought, [this links to an award-winning documentary](http://jezebel.com/a-chat-with-malcolm-brenner-man-famous-for-having-sex-1685059436). It's the opposite of the username but in the exact same context.
Are you using babel 6? It was a big upgrade and now requires you to download some presets to do ES6 conversion as everything is plugin based. npm install babel-preset-es2015 babel-preset-stage-0 Then in your root you'll need a .babelrc file with: { "presets": ["es2015", "stage-0"] } 
&gt; I haven't been doing JS for ten years, but isn't iterating over an object as simple as using for...in? yup... yeah it's kinda pathetic. I think a lot of "web development" is basically glorified wordpress stuff so people get really far into their careers just pasting some jQuery around once in a while. Then they apply for a senior position somewhere that extensively uses javascript and they hit a brick wall. Don't be that person. &gt;Also, isn't debugging a page as simple as going through the network activity tab and monitoring loading resources to identify errant code/resources? That's a little bit of it. You can also use the Timeline to figure out if you have memory/cpu bottlenecks.
Yeah, idk about other places but that's an acceptable answer at my workplace. We usually preface our interview questions with "use whatever utility libraries you're familiar with"
well apply can be replaced by the spread operator for many cases. `superCoolFunction(...[thing1, thing2, thing3])`
Thank you and appreciate the help, but if I asked you to give me an advice to make a personal blog what advice would you recommend ; except (PHP and Mysql)
I'm a Full-stack dev with 4 years experience. I usually love to understand any snippet (JS or otherwise) before slapping it onto even the staging app. Thanks, I need to delve deeper into Chrome Dev tools since I've mostly debugged the back-end using logs, etc.
You will not get approval for a non-incremental rewrite. I've been in your position about ten times in my 15 year career**. I've gotten thumbs up for a big bang rewrite once in six attempts and that was a 6 week project while I'm 3 for 4 incrementally. Big rewrites are seen as incredibly risky. As an example, I put ~200 hours into a prototype for a big bang rewrite of a 125k LoC JS app, was showing a roughly 80% code reduction, had been the senior js dev on the project for two years, pitched it to a CEO who was a programmer, and got turned down. Incremental rewrites look like slower feature delivery to a business. They can handle slower feature delivery and attribute the cost as an investment towards faster product velocity in the future. They cannot handle a pipeline stall and they doubly can't handle it for an unknown quality result. When you start, you know you're going to be successful (I'm at 100% success rate) but they do not. There is no set of promises you can make that they have not heard if they've worked with programmers for any length of time. They see it as a risk and I have yet to work at a place where a risk to your core product is acceptable. On your "hellish mix" comment: Incremental rewrites are annoying. They're triple the work of a big bang rewrite even when a codebase is reasonably well factored because you have to shim between things. I've mentioned this every time and business doesn't care. Whatever you move to should have a strong architecture** and your thought patterns should be in that architecture. You can keep coherent in the process by converting what you have to something that makes sense in what you're moving to. Pick a *corner* of the app and start there. Starting in the middle is tempting but in practice is sneaking in a big-bang rewrite and you won't be able to drop it to get in a new feature or hit an iteration deadline. Figure out how to interface back and forth between your jQuery code and start writing your shims in their own set of files. Move on to parts that require the least amount of new shimming and convert those. The pieces will eventually collide and you can start throwing out the shims where they do. Eventually you'll get to the point where converting the core of the app can fit in a week or two and from there it's downhill. It is, however, really tedious since I always feel like I'm done once the core coverts but the rewrite keeps going. ** Yes, I have been mocked about wanting to rewrite everything by my coworkers at more than one company. ** My preference is re-frame in clojurescript, the closest in js land is React+Redux but I recommend against microlibs and angular because they don't provide strong architectural guidelines.
Yeah there are some great tutorials if you google around a bit
I first read that as labia.js and thought we really must be running out of words to use as names for Javascript frameworks and libraries.
Three years of development. I work in enterprise software, codebases can be 15 or more years old, and expect to continue to grow. I have roadmaps longer than three years, and I need to put things in place that won't require a complete redesign just because a monolithic-but-popular opinionated framework goes a completely different direction and doesn't have an upgrade path while abandoning the previous branches. Sure, you can bolt on d3 - Can you snap out angular's idea of scope and DI when they fail you? Nope. &gt; If we ran into some fundamental limitation in Angular's core functionality Like, oh, performance?
I'm in agreement with this. I switch languages a lot and increasingly find syntax is the least important thing to remember. Syntax problems are the easiest class of problems to solve, and a half decent editor should be doing most of the work here. Humans make great conceptualisers, but terrible compilers. I certainly would prefer to be tested on general language knowledge and idioms rather than syntax.
Thank you!
Doing an advanced Javascript tutorial as a stop-motion animated hedgehog, using a high-pitched voice throughout the entire thing... Its a bold strategy Cotton, lets see if it pays off for him.
&gt; Is it bad if I still have to use MDN to remember which one is which between call() and apply()? Apply = Array, Call = Couldn't you just use apply.
Good, seems Ember is more flexible than I realized, so indeed some of my arguments are invalid. My bad! Indeed I haven't used Ember, though I spent an hour yesterday reading up on some guides and checking out its API... Obviously that wasn't enough as I got quite a different impression :) Still, I have some reservations: &gt; &gt; Can you replace the view library in Ember.js? &gt; Yes, see above. For another example, here are the Node tests for Ember showing that you can render just-a-component on the server-side: https://github.com/emberjs/ember.js/blob/master/tests/node/component-rendering-test.js. Being able to render a component on the server is quite a far fetch from replacing the view library. For example, can you explain to me how I would use React.js as a view library with Ember? If I do that, would it even still qualify as Ember? If not, I think my point still stands that you can't really mix and match, and you're more flexible with micro-frameworks. Also, you still haven't convinced me about the original claim how micro-frameworks are going to need so much more glue code :)
It isn't like image cropping is a built in browser function. 27kb, about 3000 lines of JS code, not bad at all for a generic tool with no dependancies. 
One example I wrote a while ago was function that would take a function that returned a promsie, and, if the promise rejected, would retry the function after a specified time period. Basically, you'd call it like waitThenRetry(func, args, 2000). Now, there were a few other functions used to write it, but the basic implementation was: return func.apply(null, args).then(null, waitToRetry); Call and apply are pretty awesome when you start passing functions around as parameters.
Mmmmmmmmm I love that spread operator. Can't wait for ES6 to gain some traction! Though that won't stop me using it with Babel =)
Joel on Software has lots of great advice, and plenty of cherry-picked advice that he assumes applies to everyone. You're right in that 'he's not wrong', but he's assuming that companies always mean a total, absolute, slash and burn rewrite when they say they're going to 'rewrite the code from scratch'. Yes, total suicide to start from square one on the entire app. But not at all suicide to re-write almost entire layers of core functionality from the ground up, and for many projects I have seen this done for it results in huge benefits in productivity and stability. He's assuming that those companies have only certain kinds of test suites in place; that we're talking about tests that cannot themselves be adapted to test the redesign. I absolutely understand his caution, but like so many topics he tackles with his belief that he is absolutely right... heeding his advice to avoid things because some companies failed at it can cost considerably more money than a successful execution would. And I mean that; I've seen "failed" redesigns. They often still come out with some degree of success. Teams really do learn from the mistakes of the past... sometimes.
Add an onerror handler to the iframe once it is added to the DOM? document.querySelector("#myIframe").addEventListener("error", function() { alert("Iframe failed to load") })
Thanks!
I find this particularly elegant but I think it's just an aesthetic preference at this point: &lt;MyComponent onClick={::this.myClickHandler} /&gt; Is there any reason to not use binds?
My advice is to be kind to the developer, you don't know the environment in which this product was created and if there are no docs/tests/specs then there's a chance this person is leaving because the job was miserable. Lack of oversight means nobody is giving this person atta-boys when they're good, nor are they correcting the issues as they come up. Lonely life. On to the good news! First off, you have a functional application. Being able to complain about software quality on a working product is a pretty enviable position to be in, congrats! I've worked on a few projects where the original developer left, mid-stream, and we could only guess at what the rest of the architectural decisions would have been. Second, if the project is only a year old, it's still a baby. I expect code to look like shit at that stage, especially if it's complicated. There's a good chance that you'll be able to make a huge improvement in the structure and legibility with a minor investment in effort. This will go faster with automated tests, hopefully you have some. Lastly, if you need technical specs and an overview of the architecture, you have the developer and you have the working system. Sure, it's a PITA to reverse-engineer the code and infrastructure to figure out how things work, but it can absolutely be done. That's probably a couple of weeks of discovery and writing, nothing crazy. If this application is currently in production, without specifications and without tests, it shows a concerning lack of formality in your organization's software development processes. The state of this application is a potential symptom of a larger problem. Root out the issues in the process and try to shore those up first, it's entirely likely that multiple applications suffer from similar rot. Hard to blame an individual developer if it's a company-wide problem. Happy hacking! 
You mean what would I use for a blog?
why? 
+1, moment is awesome. IMO overriding default Date is definitely not a road you want to go down. If you don't want to use a library, I would write some helper functions that use Date and return strings but don't mess with Date.prototype
I've been in web development for years and I'm confused as hell nowadays.
Basically what this guy said, but instead of keydown use keyup.
perhaps if you have a private registry?
Make sure that is done in a place where the code definitely runs before the iframe is rendered, or there is a chance that the error event will have already happened and you'll have missed it. If you want to trap the iframe taking too long to load as well as just if there is an error that stops it completely, you could have the iframe communicate with the parent to set a flag once loaded, and a timeOut in the parent to check if that has happened in time and give a warning that things are going unexpectedly slowly to the user if not.
I literally *just* learned React and RoR in a bootcamp program, so take heed that I've not worked with redux at all. IF you're using flux, then the directory structure I learned is separate dirs for (I could DM you a repo if you want): * actions * utils * Constants * dispatcher (only one file tho) * stores * components What have you been using? I'll be following this thread closely because I am still trying to learn more. e: these are all in the assets/javascripts folder, where I also have my mine app component (and maybe my auth redirect component too) just chilling.
There is (or will be, when Angular 2 is ready) a [documented and Google supported](http://blog.thoughtram.io/angular/2015/10/24/upgrading-apps-to-angular-2-using-ngupgrade.html) upgrade path from Angular 1 to Angular 2, that allows you to run both side by side, or one inside the other, while you perform a gradual conversion. So unless you're talking about some other framework, I'm not sure what you mean? I'm not sure what you mean by "snapping out" a DI framework? You don't have to use what Angular gives you if you don't want to. There's nothing stopping you using some other DI library. I develop each component as a separate ES6 module and tend to use a mixture of Angular injected services and ES6 imports for things like 3rd party libraries (d3), domain classes, utilities, etc. I'm really don't understand what kind of wall you could hit with DI anyway? It's just a fancy factory. As for scope, again, there's nothing stopping you writing some or most of your application using regular DOM APIs if you want. You need a couple of lines of glue to make Angular aware of things that sit outside of scope, but it's no problem. For example, I use the [ag-grid datagrid component](http://www.ag-grid.com/) that uses this approach: The core component is implemented in regular JS, but with bindings to Angular. And performance, again, I've had no problems, and unless computers are suddenly going to get a lot slower, I don't see why I run into any. So long as you apply the most basic common sense, as in not trying to render a list containing a million items, there's no problem. Of course there's a theoretical performance hit compared to doing everything in raw JS, but again there's nothing stopping you from dropping down to that where you need to. I'd rather do that in the cases where I need to, and enjoy the benefits of easier development and greater productivity elsewhere. It seems like you have a number of mistaken prejudices about how Angular, and perhaps similar frameworks, actually work in practice. I'd suggest you try building something reasonably complicated in one, even as a side project, rather than relying on received wisdom from reddit and hacker news. 
Lol bye
I think I'll stick with regular JavaScript.
From Labella to Labia? You're clearly trying too hard there...
Awesome! Thanks so much. You're the man.
Do you fit this description of "Javascript Expert": * transcends reliance on rules, guidelines, and maxims * "intuitive grasp of situations based on deep, tacit understanding" * has "vision of what is possible" * uses "analytical approaches" in new situations or in case of problems or are you more: * holistic view of situation * prioritizes importance of aspects * "perceives deviations from the normal pattern" * employs maxims for guidance, with meanings that adapt to the situation at hand or possibly one of the other level of proficiency defined by the [Dreyfus model](https://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition). BTW, most people over estimate their proficiency by at least a level 
Wow, what a write-up! I totally get your example and what you're saying re: design patterns. Learning about design patterns has definitely exposed me to a deeper understanding of JS, but I'll stay aware of squeezing problems into generic patterns. I would hope to be more of a chef than a recipe book memorizer :). I guess the more exposure I get to JS, projects and problems, the more I'll be able to understand what to do 
Well done. I'd never seen that, but I can absolutely see how it applies to me. The problem with a lot of people, and I think it's the spirit of his question, is that they're squarely in between the 2 'conscious' labels on that scale. This may sounds stupid, and I'm really not trying to be funny... but . . . "I", *know* what I know, and I *know* there's things that I don't know. But, obviously . . . I *don't know* what I don't know. ***And***, I don't know how my knowledge and lack of knowledge compare to each other. Abstractly: What part of my knowledge is greater? The knowledge? or the lack of knowledge? Specifically: When (and to a greater extent how) do I know when I could consider myself "proficient" with Javascript? Those 2 questions are the ones that echo thruout my head on a daily basis. Imposter syndrome? Shit I wish. That is a purely symptom of having had confidence enough to try to get interviews and presence enough to actually get hired. I haven't the slightest idea what level I should even be applying for. Or where. Or how. 
Electron should be named "muon" or even worse "tau"
or [jspm](https://github.com/jspm/jspm-cli) to load them separately/minified in your browser. If you plan to leverage http2, JSPM gives your users much better caching.
&gt; For example, can you explain to me how I would use React.js as a view library with Ember? Someone has already written the "glue code" to do this. https://github.com/ghempton/ember-react
Vue.js is even easier to explain than React.
Enough with the Angular vs React, it's apples to oranges. But sure if you want to be naive and assume React is better just because you can explain it in less words, be my guest. /s
I tend to dislike video tutorials but this was great. The speed of it was amazing.
Maybe yes
thanks for developing!
https://www.reddit.com/r/LearnJavascript
I have been coding since I was a kid and left a job of three years professionally coding to start a site with ... a real straight shooter who then disappeared on me. Whoops. =( I'll never do that again, I tell you that. Also, I'm in Columbus, but thank you!
Last time I saw a comment like this I went through and linked each word to its library, if one existed. About half the words were links.
Ok, thanks, with the last question, if I bind it to an instance method on the class is it the same thing? If I bound input.blur(this.some_method) would it need to be input.blur(ClassName.some_method) for it to only be in memory once?
Yeah but they are dead simple. React is going to be harder for someone new to web development to learn in my opinion.
Though I agree with the article it's way too opinionated (duh, it's totally fine for a personal blog anyway -- not a good food for thoughts..). BTW a newcomer may struggle with managing scattered state, which would introduce **flux schema**, a hot potato that may or may not require a hell lot of work to make it work. Many geniuses made it work out of the box these days (e.g. Redux, Reflow, Alt...), but researching/combining them and picking the right one would be *almost* as intimidating as many alternative frameworks. On top of that, leaving *ye olde cozy jQuery plugins land* may be also required to avoid memory leaks. That'd be same for many other frameworks though.
The voice is really annoying, but this type of javascript functional programming is really interesting. /u/drboolean What are your thoughts on functional javascript vs just making the jump to [PureScript](http://www.purescript.org/) or [Elm](http://elm-lang.org/)?
Vue.js is yet another programming-language in the template approach. At least with JSX it's just tags and JavaScript.
Yes, but the method will not have instance properties and "this" will be an element. You will need to use "bind" method of Function: input.blur(Class.methodName.bind(classInstance)) EDIT: This os wrong because bind will return to a new function and you'll get the same problem as anonymous function
You can do that in thirty lines of JS and server-side. Use `canvas.toDataURL()` and then AJAX to send the image and upload it.
Even in those rare times when they are like Lego blocks, just as with the real thing it's often non-trivial removing a single block from the middle of a construction.
Is the iframe on the same domain? If it isn't, there is no way to catch the error. http://stackoverflow.com/questions/12062081/catch-x-frame-options-error-in-javascript
iframes are useful for a lot of things right now until the web providers better alternatives. WYSIWYG editors use them. It is also very useful for sandboxing third party javascript code
Yes, it fails to discuss what Netflix is actually doing. They are using a wrapper called Gibbon instead of a browser around React on the front end. Node.js is a very small but important part of the back end stack. They have a system called Falcon written in javascript on Node.js which is a central exchange and caching system for api calls. However, Falcor then connects to scores of services that manage things like account information, account movie metadata like when the viewer left off watching, media metadata, ect.. Almost all these services are written in Java or Python. Although Node.js is central to the system and plays a very important role in client server communication as this is an advantage to using Node.js, it is only like a corner stone in a stone bridge. All database related code is written in Java. Netflix does a very good job using the appropriate language for different components.
I'll go ahead and bite. I have been developing iOS apps as a hobby/side projects and was interested in web development. Read a little about it determined it might be interesting and decided to jump in. Let me preface the next paragraph with some backstory: The only time I have developed really anything for the web was in like 2006/2007. If I remember correctly People were complaining A LOT about .pngs, IE6, debating photoshop vs fireworks and something about using a clearfix. I think. Anyway it was REALLY easy to pick up. Now, I decided to dive deep this time, and honestly...I'm fucking lost, and its not a happy lost like I was with iOS programming where I just kept searching. Like a frustrated lost where I just feel like going back to not thinking about it. Once you get past the basics/everyone telling you to just read Eloquent JS you're suddenly thrown into this world of non-stop debate with no foundation. I honestly can't remember half of the frameworks. Because everywhere I go theres debate I have no idea if the decisions I'm making are good or bad, and decisions I have made already might just be the worst decisions to make. Theres literally no foundation that I can find other than 'barebones' JS, and no one is talking about that. Every stackoverflow I go to is just telling people to look at their frameworks to solve a problem someone has, and while that can be found in any language it seems almost rampant here in JS. /incoherent rant TL;DR: I can't seem to find any form of foundation after learning the basics of JS. The community while helpful, is frustrating to deal with. I really don't know what to think about JS at this point.
Why can't fruit be compared?
Glad to hear it!
mem-fs-editor, haven't had a need for something like this so far. Probably because plop doesn't address the "generate an entire site" use case, only the code structures within the site (which are much smaller). I'll look into it though. Plop works fine on Windows, I haven't tested it on Linux, but it will probably work there as well (yay node!).
Another boilerplate for those who prefer Gulp as build system. https://github.com/Kflash/gulps https://www.npmjs.com/package/gulps
This is the next-generation JavaScript obfuscator.
If you can avoid it, and instead refer to a named variable that is created once and executed five times, that would be better.
Yeah, no mention of flux n this explanation.
If it's on JSFiddle, that probably means you're trying to run this JS in a browser, and for security reasons, browser JS does not have direct hardware access. Anyway, you could use the same sort of technique that miners and professional password-crackers use: parallel computation on the GPU. This sort of thing is beyond the scope of this subreddit. Now you could potentially set up some script to run in Node to coordinate the work of several GPU hash-crackers, whether on your local network or on a cloud service, but most of the hard work is still best done in a language that compiles to binary code, rather than in JS.
Angular is cruft though, which is why they decided to scrap it all with 2.0.
Using HTML and CSS for the outputs and styling. GPU is fairly expensive and nvidia cards don't do well with hashes from what I can tell unless you use cuda which seems like a big PITA.
i wonder if it could be minified
I believe the output is minified by default (at least as far as keeping the 6-character set goes), but gzip in particular will work wonders.
Does anybody have a demo of this in action? 
the term "unopinionated" is so fotm. but nice library, gonna try to see how this might work on a calendar app i'm building. 
I think you should make a gulp plugin 
How does ![] eval to false? I'm just so confused. 
There is no "how" in this article.
Seems like [ReactEurope](https://www.react-europe.org/) is missing from the list... :-\
What? Why? I thought the only remaining draw of 2.* was libraries that somehow haven't updated yet.
Eh, it depends. Most UI libraries are opinionated, especially when it comes to CSS and markup, so I'm always happy to come across one that isn't. I never want to override tons of CSS styles, just because they looked good at the time the library was written doesn't mean they look good now (I'm looking at you jQuery UI). If a JS library needs "themes", run away.
Lotta Netflix stuff around here, hmm
The crazier thing is how they manage to represent individual characters, and I think it relies on the ability to use index notation on strings (like coercing `undefined` and `false` and `true` to strings, then using index notation with integers to pick out a, d, e, f, i, l, n, r, s, t, and u, which you can at least make `return` with inside a `Function`-constructed body).
I can't decide if this article shows intellectual dishonesty or lack of knowledge.
Protip, dont put the output in the source.
I know we all have different experiences and you may be some kind of genius, etc but fwiw I've been at this for a long time and I have never seen a web app of moderate complexity get built in anywhere near 2 months, regardless of the size of the team, without it being a disaster. It may technically satisfy some high-level functional requirements that allow some to formally proclaim "mission accomplished", but it will be ugly (ui, code, architecture), suffer from performance, maintainability, and ux issues, and be replete with edge-case bugs. I've seen many apps delivered by devs/teams that are proud of their output (and how quickly they produced it) that fail under reasonable scrutiny and are unusable, ultimately wasting time in the long run with support issues, fixes, rewrites, abandonment, etc. This may not be the case for your 2 month app... if so, it is the first such example I've heard of in 16 years. In any case, I know better than to believe it without seeing it myself.
Jesus Christ - My problem seems like nothing now.. Why do you work there? :(
I too am going to give this one a try. Thanks for your efforts!
qed in my book.
There is some experiment using GPU computing in javascript: https://github.com/stormcolor/webclgl, demo: https://rawgit.com/stormcolor/webclgl/master/demos/benchmarks/index.html It won't provide access to bitcoin miner, but probably much better than raw CPU.
&gt; The server will only really need to host the JSON file According to what you write this is not true: &gt; and then push some data back thus the server needs to accept new data and update the file. NodeJS + Express if you want to do this in JS.
Martin Kleppe's got some interesting talks on Youtube. [Here's one](https://www.youtube.com/watch?v=RTxtiLp1C8Y). In it there's an explanation of JSFuck. It's well worth a watch.
Bitcoin miners use SHA-256 not MD5. They're not general purpose compting units that can change what they work on, they're a hardware implementation of SHA-256, and that's all they can do.
Reddit cleverly used it a couple of years back in one of their blog posts about a frontend job.
To the author... Whats with the... querySelector = 'querySelector' global.document[querySelector](ids[0]).parentNode ...why [querySelector]...is it just to make it minify smaller? and why the global.document, whats with the global? Oh and very cool, needed something like this many times.
Yes, it's also a valid alternative
Don't know what the consensus is, but someone started using [apidocjs](http://apidocjs.com/) at work and we all like it. Not sure how it handles typescript though.
This post was not written by bot dear but was written by human :)
It's kinda unfortunate that TypeScript doesn't this in the same manner as Dart does. Dart has a standardized doc comment syntax (which supports Markdown), official guidelines, and a doc generator. Well, VS Code will at least show the contents of `/** ... */` blocks in call-tips and tool-tips. That's something, I guess. https://github.com/Microsoft/TypeScript/issues/10
Why do you need a webserver to read and write a JSON file? Aren't the [storage](https://cordova.apache.org/docs/en/latest/cordova/storage/storage.html) or [cordova-file-plugin](https://www.npmjs.com/package/cordova-plugin-file) capabilities enough?
&gt; no real benefit. lulz is a HUGE benefit! 
Well aren't you just mister fun hater.
I really like the guys that have text versions of the vids for skimming the important info. I wish this did
 var test; &gt; 11169 chars ಠ_ಠ
 typeof(Array.apply) //function (typeof Array.apply).charAt(0) //"f" meaning we can extract letters (typeof Array.apply).charAt(3) + (typeof Array.apply).charAt(6) + (typeof Array.apply).charAt(7) //"con" Were on our way to creating the word 'console'. We do this for every symbol within "console.log('lol')" We grab the 'l' from fa'l'se, the 'g' from strin'g', etc... Then we eval it. 
Okay, I've never worked with either of those and I'm starting to think I'm over my head with this one... butttt.. I just require them in my application.js, then Rails transpiles them (or so I thought). My application.js looks like this: &gt; //= require jquery &gt; //= require jquery_ujs &gt; //= require jquery.serializeJSON &gt; //= require react &gt; //= require react_ujs &gt; //= require flux &gt; //= require eventemitter &gt; //= require ReactRouter &gt; //= require components &gt; //= require_tree . e: I thought I might include the rails auto-generated comments at the top of applciation.js: &gt; // This is a manifest file that'll be compiled into application.js, which will include all the files listed below. Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts, or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
No that wouldn't make much sense. Gibbon is a heavily stripped down Webkit which uses JSON to describe the DOM. They've now built a React implementation on top of it because the virtual DOM diffing keeps processing low on a device that has very little power. Their iOS app is probably written in Objective C, but it wouldn't surprise me if they've looked at React Native. 
It would be best if you posted a link to a [jsbin](http://jsbin.com/) or [jsfiddle](http://jsfiddle.net/) with your code to make it easier for us to debug.
I love how dart automatically makes documentation from source :)
I'm a little confused on what you mean. I organize my components directory in that way, but the actions/constants/utils and stores are organized based on what data I'm passing around in my JSON API. e: so if I organize based on header, and I've written my authentication in React, and want to display the current user's name in the header -- you're saying I ought to put my CurrentUserStore, actions, etc, all under the header directory?
[jsfiddle](https://jsfiddle.net/yj8c9aef/2/) this should do it: var slideimages = []; function addSlideImage(src) { var i = new Image(); i.src = src; slideimages.push(i); } for(var i = 1; i &lt;= 7; i++) { addSlideImage("MST3k" + i + ".jpg"); } var step = 0; var img = document.getElementById('slide'); function slideit(){ img.src = slideimages[step].src; if(step &lt; slideimages.length-1) { step++; } else { step = 0; } setTimeout(slideit, 2500); } slideit();
It certainly isn't developer centric. I remember it being pretty beard strokey and only concerned with the state of the web, content, and design. I think it largely comes down to who they have speaking at the particular AEA you attend.
[Here is an in depth explanation.](https://www.youtube.com/watch?v=eNC0mRYGWgc) Netflix runs in React on top of DOM in iOS and Android. They initially created a custom streamlined version of Webkit called Gibbon for TVs. Most of the video is explaining how they got React to run in Gibbon so they are running the Netflix app across all platforms and devises in React.
 var sixMonths = 1000 * 60 * 60 * 24 * 180, newDate = new Date(myDate.valueOf() + sixMonths);
I figured it out, i moved the script below the image that contains the slide show. Thanks though!
What an ignorant post.
If you uncheck "eval source" it spits out the string directly, so you can see how they're built. e.g. `a` gives: (![]+[])[+!+[]] `![]` is the boolean value false, because arrays are objects and thus truthy (false + [])[+!+[]] Adding a boolean and an array coerces both to strings (false.toString() + [].toString())[+!+[]] `false` coerces to the string `"false"`. Arrays turn into strings by joining their contents with `","`. But `[]` is empty, so `[].join(",")` = `""` ("false" + "")[+!+[]] "false"[+!+[]] `+[]` coerces the array to a number by first stringifying the array as above (to `""`). `""` coerces to `0`. "false"[+!0] `0` is falsy, so `!0` is `true` "false"[+true] `+` coerces `true` to a number, 1! "false"[1] And strings can be accessed like arrays, getting the character at that position. So this gives us `"a"`! Of course, a was pretty easy to find. How do you get a z? (+(!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]) I'll leave this one as an exercise to the reader.
Absolutely! However, this was for a client and was under constraints that made it just easier at the time to write a few methods to handle it (especially since it was only encoding). Also, im pretty sure the extra header is non-standard, but perhaps I might contribute to the gem in the future.
&gt; I'm working on a science project about how easy it is to crack a MD5 hash I'll just leave that there. For science.
"some men just want to watch the world burn"
Fantastic talk. Very worthwhile even if you don't use nodejs.
But I'm looking for an *insane* way to manage my redux actions!
I generally operate under a "I can't be the first person that's needed this" mindset, so hopefully your contributions could help others in the future.
I actually attended this event. Very interesting and informative to learn about Node applications on an extremely large scale and how they handle errors in production. With something as big as Netflix, it's easy for something small to be overlooked and cause huge performance issues. Flame graphs are brilliant and I can't wait to implement them myself.
 alert("Please enter a valid gear selection); no closing quote
Wow, I really need to get better at this. I spent a lot of time looking through this simple code and did not find that. Thanks!
I copied the "jsfuck.js" (7.88 KB, 304 lines) file from the site into the input with "eval" checked on a 4.5GHz Xeon E5-1650v3. I then proceeded to have breakfast, work through email, have a few meetings, write up a doc, and then wait some more. Out came a little over 10MB of text in a single line. LZMA2'd down to 9.39 KB. If I didn't have anything to do until the heat death of the universe I'd repeat.
The answer here adds 180 days, which is a rough approximation, but may not be what you're looking for. Try this link: http://lmgtfy.com/?q=javascript+add+six+months+to+a+date&amp;l=1
A better approximation might be half the average year in the Gregorian calendar; the average year in this calendar is 365.2425 days, which is close to the average astronomical year (any way you define it).
After reading through it, it doesn't just declare a variable. Rather, it evals "var test;" ans has to put together all 9 of those characters into the eval statement. Some are harder to do than others. Some are impossible so it uses a complicated piece of code to turn a char number into a string all in the 6 characters. 
With [VS Code](https://code.visualstudio.com/): http://i.imgur.com/xyHiw11.gif
You mean like a [quine](https://en.wikipedia.org/wiki/Quine_(computing\))?
Use latitude and longitude to check distance between said area and the user. HTML5 geolocation api can get you the user coords while you already have the area's coords/location.
Thanks for that great info! Actually I don't want user's location. I want to create a "service providing area" i.e in which area the service is available and that should be in the backend(code). SO that when people opens the website and they are inside that area, it will show them "service available" else "not available". Hope i could make you understand. So the aim is to make the region B in the example.
Dave Rupert, cohost of Shoptalkshow, is switching from mac to window for a while and has talked about his setup on shoptalkshow and his blog. http://shoptalkshow.com/episodes/186-dave-goes-windows/ http://daverupert.com/2015/08/dave-is-going-windows/ 
How does this compare to the redux-thunk approach? https://github.com/gaearon/redux-thunk
jshint.com works here at work. } while (confirm("Your character's finalized stats are:\nAttack Damage: " + characterStats[0] + "\nAttack Speed: " + characterStats[1] + "\nHero Defense: " + characterStats[2] + "\n\nTo accept this character click OK. To restart the character creator click on Cancel.") == 0); //when i use === 0 it does not loop again clicking cancel? // === false, ==flase works and == 0 works As you can read in my comments "=== 0" was not working for this. The do loop did not loop back if cancel was hit. jshint.com tells me to use "===0", is this correct?
Cmder provides some of the unix terminal features you will probably need the most.
Also as a general rule if the information in an array represents different distinct pieces of information like attack, speed, defense. You probably want to use an object instead of an array to attach context to the numbers so you don't have to comment the array everywhere you use it :) if (gearChoice === "1") { //long bow characterStats = {atk:4, spd:7, def:4}; loopy = 0; } and if you're doing long amounts of if(foo === "a") { } else if(foo === "b") { } else if(foo === "c") { } else if(foo === "d") { } make it easier to read quickly and just use a switch instead switch(foo) { case: "a": break; case: "b": break; case: "c": break; case: "d": break; }
silly rabbit
Highly recommend this episode if you're starting web development on a Windows. It's a great resource!
objects are super easy var obj = {key: value, key2: value2}; console.log(obj.key); //value and you're done, because this is js you can also cheat a little and use a string to access them console.log(obj["key2"]); //value2 in fact, thats the way for in loops work for(var n in obj) { console.log(n, obj[n]); } //key value //key2 value2 The only thing to watch out for is that a "for in" will not always give you the properties back in the order you expect them. so don't rely on order EVER with a "for in".
I really like [ConEmu](https://conemu.github.io/) for cmd prompt. It provides a great tabbed command line experience; instead of many windows, you have many tabs just like in your browser. I highly recommend just getting used to the DOS based commands, though. It's weird at first, but then it'll make it so much easier down the line than using unix aliases. And beyond that, many of the CLIs that JS devs use are written with npm so they share the same syntax on Mac and Windows. As for editors, I use Sublime Text and Visual Studio code. There's not too many tricks -- the great thing about web development is that it's a mostly lightweight setup. All you need is a cmd prompt and a text editor to get going. :-)
I'd love to see a similar curated list for JS conferences. This seems mostly design and CSS focused. Anyone got any links?
I use windows 10, chrome, git w/ tortoise git gui, notepad++. I still have a ubuntu vm set up if I need to, but 99% of the time i'm in windows
WebStorm (or PHPStorm) is cross-platform, and might give you all the tools you need totally in the IDE.
Thanks for the links, it was helpful.
Hi, tonicdev dev here. We ac ally run the code in a container, that way you can use modules that are written in C++, or fork the process, or write to the file system, or whatever you want. There's a pretty good write up here: http://blog.tonicdev.com/2015/09/10/time-traveling-in-node.js-notebooks.html
yes, with cmder2 / git / atom 
Worth checking - http://jamesknelson.com/using-es6-in-the-browser-with-babel-6-and-webpack/
Well to do that, you'd need to know where the user is. You can do all the calculation on the backend, but you'll have to ask the client for their location at some point. Otherwise, you won't know if the user is inside the valid area.
Could you copy/paste or screenshot the `console` output? Also what exactly do you mean by "2d JSON array"? Is that a 2d array of JSON strings? What your error is saying is that `VKeys.keys[matchTarget]` is equal to `undefined`. You could do something like: var keysMatchTarget = VKeys.keys[matchTarget]; if (keysMatchTarget) keysMatchTarget.push(element[0]); That would add an `undefined` check before trying to push anything.
I used to use Cygwin, but eventially changed to Git Bash. It covers most the unix commands I need. Cygwin is a bit too much of a whole unix environment with its own file permissions system, but I still keep it around for some things. npm doesn't always work with cygwin or git bash (or other posix-style terminals) so you'll also need to use the command prompt/powershell from time to time. For day-to-day use I actually prefer Windows, I find the OS faster with snappier UI for the most part. I can't believe Apple still refuses to implement a directory tree in the finder. Plus you get... PC games. I've used Windows since 95 though, and it's funny you can really feel that it's not the primary target of developers anymore. Still waiting on React Native and Flow, for example! I've played around with Virtual boxes as well. They're neat and fun; you get a whole unix box if you need it. Overall though, I find maintaing a whole other OS becomes a time-sink of tweaks, adjustments and irritation. I use WAMP to host projects locally. I serve small projects in subdirectories or create local virtual hosts for longer-term projects. I don't need to spin up individual commandline http servers and everything's always available. Then I do that all over again with IIS, running on another port. :D Because 90% of my work these days is writing .NET apps.
Stop trying to persuade others that they're coding style is the only way to do something?
whats wrong with for loops?
Give sublime text a look, it's pretty popular and has some great plugins to make it even better. I have a jshint plugin installed that lets me hint my code when I run into issues like this. Notepad++ is a decent editor too, that was what I used when I started out.
The only thing I can think of is that he think's it slow. https://jsperf.com/fastest-array-loops-in-javascript/2
I have no idea. There is no way in hell I would pay money to post this though. The only reason I posted it is because I made it at work and I can't email outside of work and pastebin is blocked! I wanted to save it just in case I want to work on it more.
I use Windows at work. Win8 right now. What were you curious about? Almost all the major front-end tools are x-plat. The exception maybe anything that builds iOS apps (like React Native). 
I used to think it was a circle jerk too. Then I tried react + redux / react + rxjs. I honestly never post here so it's news to me there's a circle-jerk for react in r/javascript. It used to be other way around; it used to be a circle-jerk for Angular, up until Angular 2.0 was announced. Honestly, go ahead and use whatever you want. That's your prerogative. I on the other hand will never create an Angular project again. It sucks. I know because I added Angular to our stack at my work ~6 months ago and it has been a pain ever since. Absolute cruft.
Yea I totally get you! That is very interesting, maybe they just pick things at rando.
I considered using a similar library but redux-thunk makes everything so easy that I didn't bother. The amount of code saved wasn't worth the extra dependency.
I don't really understand what the problem is. The code you gave works fine and to add the average function isn't difficult. [Here's an example of both working](http://codepen.io/short/pen/PZoQWj?editors=101). If that doesn't answer your question (or you have more) feel free to let me know!
I like that one 
....use youtube-dl to grab them all! -- `brew install youtube-dl &amp;&amp; youtube-dl &lt;pluralsight-course-page-url&gt;`
WebStorm, VS Code, or Visual Studio itself. If you're on a windows OS, imo nothing (not even WebStorm) beats Visual Studio. It is still hands down the best IDE with the most extensibility. When I'm on my Mac, I tend to use VS Code or WebStorm. You can install Git Bash and get the terminal experience to go along with any of the IDEs.
Who does this? (aside from noobs)
Yeah I just use thunks and haven't found the need for a promise middleware or what have you.
Why? Even react, considered by most the best thing since sliced bread, does that.
Well, yeah he linked to his book... 
I've been using vanilla js on webkitgtk recently and stuff like Promise, Array.from, element's matches, closest, remove, after, classList, nextElementSibling, dataset are really cool. Fetch also is cool but not yet in webkitgtk and need a streaming xml parser, so i'm still sticking to Xhr's responseXML. The actual only thing that is painful is the "querySelectorAll" method name which is too long to type.
That's why he wrote person....
See the star after the timestamp? It indicates that the post was edited. The star doesn't show up if you edit it within ~2 minutes ("ninja edit").
As is becoming traditional at this point, I'm here for questions if anyone has them. I work on Chakra (and, it goes without saying, am realllllly excited about this announcement)!
If I'm understanding right, this will allow chakra to be used as a scripting engine in standard .net applications. That is awesome. Is there any documentation on how this will integrate and how .net objects will be exposed to the JavaScript engine? I'd like to read up on it now and be ready to integrate when the code goes public.
1. What are the main reasons behind open sourcing only the core components? 1. Are there plans to open source the entire Edge browser? 1. Everything still good with working at MS?
Would you rather fight a Google-sized GNU, or a hundred GNU-sized Googles?
The dispatcher allows you to maintain proper separation of concerns between stores and actions. With a dispatcher your actions don't have to know about your state structure, and your store/reducer doesn't have to know about what happens in the actions. That separation of concerns will lead to easier to maintain code, and the first place you'll notice it is testing. It's much easier to write tests for actions and stores when they are separate peices. Dispatcher also allows multiple stores/reducers to respond to the same action without knowing about each other, which is especially helpful for example if you have real-time messages effecting multiple parts of the ui as they come in.
Is Edge's js engine built from scratch, or is it somewhat based on Internet Explorer code?
I appreciated the honest opinions in the github readmes for each framework. In particular I have the same frustrations as you with React, having played with it for a while. I just don't like JSX and the whole thing feels pretty bloated considering it's intended to be just a view layer. That said I do appreciate the philosophical concerns React brought to the table. Flux/Redux and component-driven building make so much sense. Will be curious to see if your thoughts change after rebuilding it. I hope smaller frameworks like Vue and Mithril catch on but I expect they won't ever gain the traction React has simply due to the fact they're not backed by a monolithic organization. As a side note when Aurelia releases v1.0 I'd like to see your implementation of it! 
Chakra was started around 2008 as a from-scratch rewrite of the legacy JScript engine. IE9 was the first browser to host Chakra. Since then there have been no more rewrites thankfully :)
Any plans for a Chakra node.js compatibility layer? I see a lot of support for node coming out of the Typescript and VSCode teams so I assume there's a fair amount of node use internally at MS.
Will it be possible to build a shared library than runs on linux ? a debian package ? Will it be possible to link the Node.js port of microsoft to chakra against it ?
It already exists and will become a pull request soon! https://blogs.windows.com/buildingapps/2015/05/12/bringing-node-js-to-windows-10-iot-core/ I use Node pretty much all day (at least when I'm not doing spec editing). There is a ton of usage at MS, you are right.
Will we be able to use Chakra outside of Windows? Do you know under which license it will be released?
You might end up with an AMA anyway.
Do you think this will help Edge adopt new HTML5 features?
Sorry if this has been answered elsewhere but I'm laying in bed and a little hungover and I'm on my phone.... Is there any plans to support ASM or WebRTC?
If by ASM you mean asmjs, it's already supported. WebRTC is a browser thing, but is also already supported in Edge via the Object RTC API. Anyone curious about Edge platform support can check out the [status page](https://dev.windows.com/en-us/microsoft-edge/platform/status/). You can narrow to just JS tech if you're curious.
im not even moderately new to js but this is the first ive even heard of the elm architecture
Actually you are write. Also I am able to find the user's location here: http://codepen.io/anon/pen/JGjKoW if you click on the image beside landmark.(which is geolocation). So the target is to build the region and link it with this. So is a way for it? Any starting point? Thanks!
&gt; In other words, just a redditor trying to share some free stuff. Yep. Just sharing info I find that I think others might be interested in. Pluralsight is a great resource and here it is for free for 6 months. I've also made a shit ton of submissions to /r/javascript, just [start paging through here](https://www.reddit.com/r/javascript/search?q=author%3Amagenta_placenta&amp;restrict_sr=on)
Will Chakra replace cscript/WScript sometime?
How does this compare with Github Electron? Or it is more like it compares directly with Chrome's V8?
It compares directly with V8.
Decent, as in the same one that was in use before 2002? If it's indeed the same as Java's, then it's just a LCG. That is decidedly **not** decent quality.
Do you think that JavaScript has a future? What improvements would you like to see in the language? If the answer to the first question is no, what language should replace JS? Most mainstream languages have too much boilerplate IMHO; I would like to see something succinct if JS gets replaced.
I've read your post twice and I'm not sure I really understand your approach, though perhaps I just haven't grasped what you're trying to build. A patch is a collection of changes. It is a diff. It contains the new values of properties that may or may not have existed previously. We would hope that the properties different patches implement are orthogonal, so that users can pick and choose features as they will. In which case, all we have to do is merge our base object and patch objects before runtime. Prototypes can do this, but object assign is simpler: const gameDefaults = { enemyHealth : 1, encounterRate : 1, playerStrength : 2 }; const hardMode = { enemyHealth : 2, encounterRate : 2 }; const game = Object.assign(gameDefaults, hardMode); Sometimes we might have conflicts. We can detect that. We can apply our patches by first creating an 'appliedPatches' object that we merge patches into, and then check that subsquent patches don't have any keys already in the appliedPatches diff. This is a very simple mechanism, but reading your post I'm not very clear what else you'd like to implement. It sounds like you might have some patches that actually affect the game's mutable state, and that you'd only like patches to do this once. Am I correct? That makes it sound like your patches are scripts with logic as much as configuration changes, and that needs to be handled separately through scripting rather than through a convoluted model for changes to consts. 
My day-to-day work is actually the editor of the ECMAScript standard itself. I am very bullish on JavaScript's future. As for improvements, I have many ideas (too many to list), but a short list is: * Async functions (supported in Chakra) * Some notion of observables * Private/protected state for classes * RegExp improvements (look-behinds, named capture groups, and a few other features). * Value types * New number types (decimal, bignum, int64/uint64) * Decorators Probably many others I missed. I'm excited about many proposals!
How do you get into building JavaScript engines? I'm a web dev who writes a disgusting amount of JavaScript and I've always been curious as to how that works behind the scenes 
Check out careers.microsoft.com (you can search for Chakra if you're interested in our team :-D) or send me a pm/tweet/email with a bit about yourself and your resume. Your peers would be jealous, probably ;)
I got hired into it, but there are other ways! Working on OSS is a very good way to go. JavaScript engines are similar to compilers but are in general just very large software projects anyone can work on. I would suggest starting with making a JSRT app to get an idea for the basics of JavaScript outside the browser. From there you could probably ramp up on simpler features like new library methods pretty quickly - it's fairly simple C++ code in our case (until you start to optimize it). Things like JIT optimizations can require specialized knowledge and lots of experience, but there is plenty of engine work that isn't at that technical depth.
Typed objects and type annotations are two orthogonal concepts. Typed Objects (now called value types) are about how to provide new and custom primitives to JS and have reasonable semantics for operators. Type annotations are all about giving developers errors early and potentially allowing runtimes to optimize better. Value types I'm super bullish on and hope to get a proposal moving soon. Standard type annotations I've talked a lot about and is something that would be nice I think, but I'm not pushing it too hard at this point. If I could make breaking changes to JS, I would make so many changes.... alas :(
Thanks for taking time to answer my questions! I do appreciate it. I have just one more, then I will leave you alone: Typed arrays now exist, but how about typed dictionaries? It would allow many interesting concepts, for example database-like constructs in memory (I can use dictionary key like a primary key). Sure, one can do that today w/o types but JS is not really optimized to work that way.
No need to leave me alone. If it isn't abundantly clear by now, I love talking about this stuff. I don't know what a typed dictionary is but if you mean struct-like types, I hope those are included in the value types proposal. I've showed examples in some previous talks of mine, but this gist is you could create a new value type like: let Point = ValueType({x: int64, y: int64}); let p = Point({x: 1, y: 1}); p.x; // 1 p.x = 2; // throws, or maybe returns a new point, but primitives are immutable Of course this is very early but I hope something like this is workable.
`for` loops also have superior performance to `map` and `forEach` in many cases (i.e. large lists). Theres a time and place to use Array methods and a time and place for `for` loops. The sudden obsession in the js community for everything to be as functional as possible seems a bit over the top at times. As a language, it hasn't been designed for purely functional use, and often, imperative methods are the better choice. (full disclosure: I enjoy writing haskell and elm - just don't think js is always the right place to practice fp)
By Typed dictionary I mean a dictionary that can only store values of one type. To expand your example: let polygon = TypedDictionary({key : integer, value:Point}); polygon.push(0, {x: 4, y: 7}); polygon.push(1, {x: 9, y: 10}; polygon.push(2, {x: 10, y: 17}); polygon.push(3, {x: 43, y: 5}); Any plans for this or something like this?
Ahh, no, nothing like that yet that I'm aware of. Value types will certainly have the notion of vector/tuple types which are like a fixed length version of what you're asking for IIUC (SIMD vectors are examples of these types).
The problem is that it would limit the use of Value types to single objects or fixed length collections (ie typed arrays) and we are stuck with dynamic types for anything variable-length. Which is less than ideal. Something to consider, I think. I can think of many use cases for my idea, if you are interested.
dae microsoft evil
One second, I'll show you a live example **EDIT**: I finished it, but had to run out of the house before I could push the changes, so it'll be a little longer :(
Currently, Node has v8 baked in, but do you see potential for Node to switch out engines? If not, do you think Microsoft would consider publishing a version of Node using Chakra? Is it even in the cards?
While we're comparing vowel-counting implementations, here are mine: function countVowels(str) { const vowels = 'aeiou'; return str.split('').reduce((l, n) =&gt; { if (vowels.match(n)) { l[n] = (l[n] || 0) + 1; } return l; }, {}); } function countVowels2(str) { return str.split('').reduce((l, n) =&gt; { if (l[n] &gt; -1) l[n]++; return l; }, { a: 0, e: 0, i: 0, o: 0, u: 0 }); }
I'm good.
Alright thanks! I'll definitely play around and at least try a couple projects in it. 
No issues. But please get me the example as soon as you get time. Very eager to see it and then i'l move ahead with it.
From the author: "Vanilla JS does not mean “use no abstractions”. Programming is all about abstractions! The Vanilla JS movement, is about favoring speed, smaller abstractions and understanding of the Web Platform, over big libraries that we treat as a black box. It’s about using libraries to save time, not to skip learning." http://lea.verou.me
[Alright, here you go](https://github.com/jakehamilton/node-geolocation-example). I updated the repo with a pure backend example. Just install like in the `README.md` and run it!
i see that's a good approach.
&gt; the algorithm should recurse through that object property to update its contents rather than replacing it I don't see the distinction. You are writing properties to a map of values either way. &gt; A (highly contrived) example of this in a TES/Fallout game... I don't yet see why you can't simply iterate through a set of objects that contain these diffs and apply them one by one to the working data structure. There is no 'recursion' involved here. &gt; You do occasionally get conflicts, and all sorts of weird things can happen if you uninstall patches while directly referencing data from them, such as the item you're holding. I'm still not sure whether you are au fait with that behaviour or are looking for a solution to it.
If a straight-up property replacement like object.assign was done in the root of the game object, no mod would ever be able to change anything within "entities" as soon as a savegame was made and loaded, as the savegame would replace the entire entities tree. I might not be being clear or misunderstanding what object.assign does, (it looks like angular.extend; a one-level property replace based on a template object) but in TES/Fallout you can install mods 100 hours into a savegame, and the changes they describe are applied as though they were there when the game was started. Thanks for your patience and the feedback!
Imagine you needed to get something from an api, without this you would need to do something like this to have a snappy feeling app: const getUsers = () =&gt; dispatch =&gt; { dispatch({type: GET_USERS_PENDING}); return fetch('/users') .then(res =&gt; res.json()) .then(res =&gt; dispatch({type: GET_USERS_SUCCESS, payload: res})) .catch(e =&gt; dispatch({type: GET_USERS_FAIL, payload: e})); }; And you would need to have your reducers handle all these actions, with this all you need to do is: const getUsers = () =&gt; { return { type: GET_USERS, AWAIT_MARKER, payload: { users: fetch('/users').then(res =&gt; res.json()) } }; } Imagine how much easier the unit tests for this will be
No problem. I just wasn't 100% sure what you were trying to implement at first.
Would using Chakra with Node allow me to run TypeScript programs on the server directly without needing to compile them first?
It helped. Thank you. This problem was driving me crazy, and since I don't really understand what the problem is or was (still don't, really), I had no clue what to search for to get any help.
(My boss)
Yeah, but it's the only thing responsible for mutating that state, so that's okay. The issue is when every module in your codebase is using the DOM like a big unstable tree of mutable global variables.
&lt;!doctype html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Registration Form&lt;/title&gt; &lt;!--[if lt IE 9]&gt; &lt;script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;link rel="stylesheet" href="css/newform.css"&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Script 10.6 - register.html --&gt; &lt;form action="#" method="post" id="theForm"&gt; &lt;fieldset&gt;&lt;legend&gt;Register&lt;/legend&gt; &lt;p&gt;All fields are required.&lt;/p&gt; &lt;div class="two"&gt;&lt;label for="firstName"&gt;First Name&lt;/label&gt;&lt;input type="text" name="firstName" id="firstName" required&gt;&lt;/div&gt; &lt;div class="two"&gt;&lt;label for="lastName"&gt;Last Name&lt;/label&gt;&lt;input type="text" name="lastName" id="lastName" required&gt;&lt;/div&gt; &lt;div class="two"&gt;&lt;label for="userName"&gt;User Name&lt;/label&gt;&lt;input type="text" name="userName" id="userName" required&gt;&lt;/div&gt; &lt;div class="two"&gt;&lt;label for="email"&gt;Email Address&lt;/label&gt;&lt;input type="email" name="email" id="email" required&gt;&lt;/div&gt; &lt;div class="two"&gt;&lt;label for="phone"&gt;Phone Number&lt;span class="tooltip"&gt;In the format XXX XXX XXXX or XXX-XXX-XXXX or XXXXXXXXXX.&lt;/span&gt;&lt;/label&gt;&lt;input type="text" name="phone" id="phone" required&gt;&lt;/div&gt; &lt;div class="two"&gt;&lt;label for="city"&gt;City&lt;/label&gt;&lt;input type="text" name="city" id="city" required&gt;&lt;/div&gt; &lt;div class="two"&gt;&lt;label for="state"&gt;State&lt;/label&gt;&lt;select name="state" id="state"&gt; &lt;option value=""&gt;Select a State&lt;/option&gt; &lt;option value="AL"&gt;Alabama&lt;/option&gt; &lt;option value="AK"&gt;Alaska&lt;/option&gt; &lt;option value="AZ"&gt;Arizona&lt;/option&gt; &lt;option value="AR"&gt;Arkansas&lt;/option&gt; &lt;option value="CA"&gt;California&lt;/option&gt; &lt;option value="CO"&gt;Colorado&lt;/option&gt; &lt;/select&gt;&lt;/div&gt; &lt;div class="two"&gt;&lt;label for="zip"&gt;Zip Code&lt;/label&gt;&lt;input type="text" name="zip" id="zip" required&gt;&lt;/div&gt; &lt;div class="one"&gt;&lt;input type="checkbox" name="terms" id="terms" required&gt; I agree to the terms, whatever they are.&lt;/div&gt; &lt;div class="one"&gt;&lt;input type="submit" value="Register" id="submit"&gt;&lt;/div&gt; &lt;/fieldset&gt; &lt;/form&gt; &lt;script src="js/utilities.js"&gt;&lt;/script&gt; &lt;script src="js/errorMessages.js"&gt;&lt;/script&gt; &lt;script src="js/register.js"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
http://jsfiddle.net/
You need a decent reference. I prefer MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr Also I would not use `substr` or `substring` (they both work, but differently.) Stick with [slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice)
I really think the OP might have been more accurate with 'For Each' loops, instead of 'For' loops, since 'While' loops are a bit faster. With the improvements in JS engines, it's less and less so. https://jsperf.com/for-vs-foreach/66
Please let us know if you intend to hold one, we'll support you however we can (such as an announcement sticky a few days in advance, stickying the AMA itself, etc.).
Those aren't modules. That's the inconveniently named "module pattern". http://www.2ality.com/2014/09/es6-modules-final.html Also check MDN's description of Promises: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
i have.... i just cant figure out the last part. how do you think all my code got here?
X-Post referenced from /r/aureliajs by /u/Davismj [Aurelia dbmonster](https://www.reddit.com/r/aureliajs/comments/3vn0aj/aurelia_dbmonster/) ***** ^^I ^^am ^^a ^^bot ^^made ^^for ^^your ^^convenience ^^\(Especially ^^for ^^mobile ^^users). ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher)
And somewhere even that is specifically forbidden in the contract.
So do you want you output to look like this? newData === { one: 'car', two: 'three' } Or maybe: newData === { one: 'car', two: undefined }
Awesome! 
Are there any plans for supporting Web Assembly?
having isDisplay on every image could accidentally result in two images having isDisplay set to true. I would have another property outside the images array that points to the display image via id or index. That way you ensure only one displayImage. And this also makes it so you dont have to loop through all the images and set isDisplay to false every time you change the display image. { images: [{ "image": imgFile, id: 123 }], displayImage: 123, }
Its a standard implementation of the revealing module pattern and was the goto way of separating concerns before we had the luxury of CommonJS and AMD. Which were both pretty recent in the grand scheme of things. I would argue that these can still be considered modules, but to each their own I guess
&gt; One explains how to use object.assign Sounds like that one is about multiple inheritance. [Object composition](https://en.wikipedia.org/wiki/Object_composition) is about making your objects own instances of other objects. http://gameprogrammingpatterns.com/component.html See also: https://www.reddit.com/r/javascript/comments/3oy9c3/composition_vs_eric_elliott/
&gt; but I would not be surprised if it was considerably slower An escape hatch is to perform type checking and immutability in development and strip them out in production https://github.com/gcanti/tcomb#speed
Perhaps there is a failure loading the results for the AS code. Have you tried putting a logging statement in a fail callback on the JSONP promise? There might also be a problem with the JSONP as Promise implementation. For example, if it reuses a promise or a deferred for multiple return values, then the function will only work once.
I would look at the response from the second request is it returning valid json?
Your best bet is the sadly underated `tcomb` library, which adds excellent type safety around basic `Object.freeze` based immutability. The other option is the `typed-immutable` library, which is a half-completed and apparently abandoned attempt at adding type safety to the Immutable.js Record class. I like the idea of Immutable.js, but `tcomb` is working, solid, and has a lot of polish (really good error messages, for example). I'm not sure if it plays nicely with Typescript, but it's a very good choice if you're writing ES6 code.
It is.
i know this isn't your job, but can you inform microsoft that we hate windows 10? specific issues: 1. cortana fucking blows. seriously, if i type a question in the box i'm looking for local shit. i can search in my web browser. 2.the context list doesnt work for most apps(list when rightclicking a taskbar icon) in win8 you could right click an item in pageant and automatically connect to that server. using tab and the arrow keys a developer could ssh into server without leaving the keyboard. this no longer works. 3. the little hover windows on taskbar icons fucking blow. people are not idiots we don't need the window. we see the icon. this annoys me to know end when i'm trying to quickly navigate between programs. the animation timeouts just make it worse too. 4. skype is a slow piece of shit. it also leaks memory during videocalls. 5. the calculator is a piece of shit compared to the old one. 6. fonts are pixelated and all the UI of the modern apps just looks bad honestly, mostly because of the odd gray background and pixelated fonts. just give us windows 8 without the windows 8 start menu. 7. right clicking on a folder icon in a vertically scrolling explorer window scrolls the menu all the way to the right. 8. no one uses the modern apps. please give us a way to uninstall them 9. no one uses the tiles on the new start menu. i've looked at it maybe twice since upgrading, one of those times was now. 10. the outlook mail app sucks and crashes alot. its generally slow. 11. changing default file extensions and and default programs is a pain in the ass. pisses me off to no end. 12. no way to change file extension of files. give us a an advanced user mode. jesus. A few good things: 1. Most used programs in start menu is cool. 2. Performance during most situations is much better on Windows. 3. Edge is a good product, just ugly. but it has good speed. the dev tools suck still. 4. Quick Access bar in Explorer windows is great. In Summation, the only reason i'm using Windows is that Linux file system permissions is generally meticulous, so windows is easier for opening and editing files easily. It's still a very good operating system but it is alienating developers and power users who aren't here for the animations and the pretty colors.
You sound like you need a Mac!
Sorry wrong reply [image](http://i.imgur.com/TjYMbHt.png) When i just put console logs it seems to work fine left side returns te correct json. but when i add a little more code and load a similar function but for an other json it stops working
I'm making http get requests in node.js. Depending on the type of resource it will get either json or a html page. I thought it would be nice to switch out the request function depending on each situation. In the case of the html page the information needs to be scraped which is an extra step. Then the several different ways to format the information so that response to the client app is the same. I thought it would be cool to be able to change out different request functions -- some of the requests are to the same service, in some cases an html parser function will be required but not other if the response is already in json, and to have different format functions so the returned object is the same. Composition seems like it might be the correct pattern to use. I just don't understand it.
So can we see someone making a fork that makes it compatible with OSX / Linux and ultimately making a browser around it ? 
In proving me wrong you've just proved that the OPs code adheres to the module pattern, thus proving yourself wrong
Why skype? Post your questions in [/r/LearnJavascript](http://reddit.com/r/LearnJavascript)
No. No one can help you.
New frontend for zombo
However you are pedantically and wrongfully speaking for everyone. You subjectively feel it is inconvenient, but the code still fits the definition of modular.
I've been trying to wrap my mind around this all night. Here are a couple example of what Object.assign does. From [Javascript Function Composition](https://wearetuple.co/2015/javascript-function-composition) at the most basic reduce is used to call an array of function names in order. function addTwo(x) { return x + 2; } function timesFive(x) { return x * 5; } function runStep(intermediate, step) { return step(intermediate); } function addTwoThenTimesFive(initialValue) { var steps = [addTwo, timesFive]; return steps.reduce(runStep, initialValue); } addTwoThenTimesFive(5); This can be refactored to a single pipeline function. However, this reduces from left-to-right so for composition use reduceRight for right-to-left. function pipeline() { var steps = [].slice.call(arguments, 0); return function(input) { return steps.reduce(function(val, step) { return step(val); }, input); }; } Compare this to the polyfill for Object.assign from [Understanding Prototypes Delegation Composition](http://www.datchley.name/understanding-prototypes-delegation-composition/). They are very similar using reduce to create a new object with properties of all the objects that are parameters to Object.assign when called. As a note, I'm not entirely certain, it's been a long night, but I think delegation is inheritance by setting the prototype of a child object as the parent object it inherits from. However, the author makes it clear that delegation is not inheritance because constructor functions are not used. I don't understand that because Object.create encapsulates using the new keyword which makes an instance of the object with the this keyword. Therefore, this blog post is using a hybrid approach with Object.create to set delegation and Object.assign to set composition. if (!Object.prototype.assign) { Object.prototype.assign = function() { var args = [].slice.call(arguments), target = args.shift(); return args.reduce(function(base, obj) { Object.keys(obj).forEach(function(prop) { if (obj.hasOwnProperty(prop)) { base[prop] = obj[prop]; } }); return base; }, target); } } Here is the example with multilevel delegation (pseudo-classical inheritance?) with state added using composition. var Animal = { who: function() { return this.name; }, speak: function(s) { console.log(this.who() + ": " + s); } } var Dog = Object.create(Animal, { bark: { value: function() { this.speak("woof!"); } } }); var spot = Object.assign(Object.create(Dog), { name: "Spot" }); var fluffy = Object.assign(Object.create(Dog), { name: "Fluffy" }); spot.bark(); fluffy.bark(); I don't think that last example makes it clear that this is composition. The next example will and I think it very closely resembles the example you provided using the compose method from Ramda. I just looked at Ramda.compose method on Github and it seems they use a pipe function and then reverse it similar to the first example I added. Here is an example of using Object.assign that looks like your example. // A base object so we can create people var Person = { who: function(){ return this.name; }, init: function(name) { this.name = name; } }; // Factor out common functionality into their own // objects var canSpeak = { speak: function(s) { console.log(this.who() + ": " + s); } }; var canWalk = { walk: function() { console.log(this.who() + " is walking..."); } }; var canBuild = { tools: ['hammer', 'pliers'], use: function(tool) { this.tools.push(tool); }, build: function(thing) { var withTool = parseInt(Math.round(Math.random() * this.tools.length)); console.log(this.who() + " is building a " + thing + " using " + this.tools[withTool]); } }; // Can we build it?... var bob = Object.assign(Object.create(Person), canSpeak, canWalk, canBuild); bob.init("Bob the Builder"); bob.speak("Hi there!"); bob.walk(); bob.use("stapler"); bob.build("web site"); 
*When you say "module" today, everyone will think of ES6's modules. Just like everyone will think of ES6's classes when you mention classes. If you mean something else than the standard stuff, you need to be more specific.* &gt; You subjectively feel it is inconvenient *That's the* **inconveniently named** *"module pattern".* Now, what could I *possibly* mean with that?
I think going out of your way to be diverse is wrong. The best candidate should always get the job. I was pressured by management to hire women. The woman we hired has been a wrecking ball. But yay! We hired a woman! Personally, I couldn't care less about the gender, race, or age of a prospective hire, so long as they are proficient and a good culture fit.
Your first problem is that your second block of JS after your HTML markup needs to be wrapped in a script tag.
Their question was already answered. That's why I told them about ES6's modules and where to learn more about Promises.
thanks :)
thank you.
At first it seemed like a joke, but it appears to be a quick reference to a bunch of sample code for people to contribute /sandbox. Not quite "JavaScript: the good parts" but would be a nice intro for a noob to understand what the purpose of GitHub and contributing to code can look like. 
Is it just me or are the YouTube and inline-embed options in the codepen examples not working? But damn this is cool! Especially the google maps one!
In typescript having only private members without setters, and only getters, and setting all parameters in the constructor (or static builder functions) achieves this pretty easily. Since property getters are accessed as variables, this is a pretty transparent way. There is no other way really, that is close to native. Of course the best way to get type safety and immutability is to compile Scala to js.
I'm definitely interested in TypeScript (with its amazing advancements in the last months) so I'm trying to write a quality definition file for tcomb. FWIW they seem to play together fairly well and IDE support is not bad, at least VS Code displays useful type hints. 
This just sounds like a merge to me? If we do _.merge( { "entities": { "testChest": { "lockLevel": 75, "location": "testHouse", "contents": { } } } }, { "entities": { "testChest": { "contents": { "orange": 3 } } } }, { "entities": { "testChest": { "location": "fredHouse" } } }, { "entities": { "testChest": { "lockLevel": 100 } } }, { "entities": { "testChest": { "lockLevel": null, "contents": { "banana": 7 } } } } ); We end up with: { "entities": { "testChest": { "lockLevel": null, "location": "fredHouse", "contents": { "orange": 3, "banana": 7 } } } } Is that not correct?
We don't do any C# dev work, but you can check our open positions and apply of course! I think the lowest title we have openings for is SDE2.
Good way for people to pad their resume I guess.
Being diverse just to be diverse does not bring anything on the table, for sure. But you could see that the other way and think about what diversity brings on the table. New ideas, sometimes new angle on things.
^(I hope this still works - *addendum: apparently not...*) +/u/CompileBot JavaScript `print((Math.random() &gt; 0.5) ? 'Google-sized GNU' : 'A hundred GNU-sized Googles');`
I'm not going to lie it started out as a joke but I've realized a lot of people contributing haven't actually done it before on GitHub. It's a good way to learn how it works I guess.
Ok, got that I missed out the script tags. But just wanted to understand the working of controllers, so I put that addition part into it. I would like to know why simply adding the numbers in the controller did not work. How to acheive that in controller. A code snippet will be useful. I am totally new to angular js.
Well I can't speak for Java script or python but typing your variables provides two things, one it helps with documation and two it won't let you do math on a string datatype I kind of see it as a self protection thing 
&gt;But, AFAIK, large enough JS projects have been built successfully without the need for types. Not really. A vast majority of all web apps out there use some sort of type system. It's all about developer experience. All the time. New languages and tools evolve because we want to write more effective, bug-free code in less lines. Coding is also about intent, and showing through the use of syntax how the code is meant to be used. Comments, public/private methods, design patterns et al. are all about expressing to your future self and other developers what the code is doing, and limiting possible ways of doing something wrong. Type systems are great for both those things. We get compile-time errors when we assign incorrect types, and we express what type of data is supposed to flow through our application. Less debug time and happier developers, what's not to love?
&gt; A vast majority of all web apps out there use some sort of type system. No idea where you got this statistic from. I don't have data on this, but I'm almost certain this is wrong. Most popular server-side languages used for web development are dynamically typed (Ruby, PHP, Python, etc) and most people aren't using TypeScript, so the front end code is mostly dynamically typed as well.
Yeah that's bang-on! Didn't know that function existed in lodash/underscore! Thanks!
It will work. But keep in mind its event driven so its only going to calculate on the page load. You havent set the variables in the controller for scope.a or scope.b so it dones't have anything to evaluate
As someone else pointed out, for this use case you don't need a controller and can (and should) just do the addition in the view. That said, probably the simplest way to accomplish what you want with a controller, is to call a scope function from the view that returns the sum of the variables, [like so](http://jsfiddle.net/vaskemaskine/fLrywr8z/1/). You could also accomplish the same result using `$watch` to watch for changes on your variables and do something when they are updated.
Everything's better embed.
Thanks for the pointers, I was trying some possibilities, and it seems with the immutable.js Record class its possible to do something reasonable. For example: import {List,Record} from 'immutable'; const TodoRecord = Record({ id: 0, description: "", completed: false }); export class Todo extends TodoRecord { id:number; description:string; completed: boolean; constructor(props) { super(props); } } This creates an immutable Todo class based on Record, and we add some properties with types. This way the Todo class objects are immutable and the class can used in a type-safe way, meaning the types of Todo are recognised by intellisense and by the compiler. Still a bit of boilerplate but seems more or less manageable
Imagine a scenario where you are writing safety-critical software. Safety critical meaning that if a bug occurs someone could be severely injured or killed. Now imagine you have a configuration file containing both strings and also numerical values that are supposed to be represented as integers. In non type-safe languages, were they to even be used in this context, there would have to be some sort of checking and verification going on to ensure that the config file being consumed has been consumed according to its proper type. Remember if that integer goes into your system as a string instead of an integer, someone dies. In systems such as these, the type checking would be at a compiler level and the compiler would also have to be verified before it could be used in such a setting. But you can see the benefit of using a verified compiler because then you get to avoid having to deal with type checking variables all over the whole world. In reality certainly critical sections of that code would still have lots of checking going on anyway but it's nice to know that the compiler has your back. 
Windows only ?
`&lt;button onclick="bubbleSort()"&gt;Bubble Sort&lt;/button&gt;`
So how are you doing compile time type checking in JavaScript?
https://news.ycombinator.com/item?id=10686397
I for one would love to see this. I know it's a bit different than the one in elixir, but I love it there. For my non-functional coworkers, it would really help them quickly understand what I'm doing instead of using composition. 
Pipelines are a superbly expressive and clear. I think this is a wonderful idea, minus a small reservation about the `|&gt;` token, but maybe this is something that I can get used to.
&gt; At my work [...] we use Java on the server-side, so I'll never use any of the trans-piling stuff you see going on (Babel, TypeScript, etc). What does that first half of the sentence have to do with anything? Do you think this stuff is Node-only?
This is blog spam, and is just a copy+paste job from the official Aurelia blog: http://blog.durandal.io/2015/12/04/aurelia-repaint-performance-rules/
It looks really good to me.
This is like Clojure's thread first macro: https://clojuredocs.org/clojure.core/-%3E Absolutely love it
Your impression is valid, but don't make the mistake of applying it to type systems in general. Java's type system is verbose and primitive; it makes you write out all your types (i.e. no type inference), and allows you to circumvent type safety entirely by passing in `null` to any function (very bad). Modern type systems are much safer and less verbose; they are certainly worth taking a look at.
There's no such thing as an *untyped* value. You either have a string *OR* a boolean. So you're asking about why types are good, but types are utterly unavoidable. Better questions might be: * Is there an advantage to making types explicit, or is it better to keep them hidden? * Is there a reason why I might want to store multiple types of values in a single variable, or is it better to have variables dedicated to a single type? * Is it valuable to be able to implicitly convert between types, or is it better to make that explicit? * Can my IDE or editor provide helpful hints about what functions accept or return, or do I always need to go read a function definition to figure that out? You can't just decide "oh, I don't need types"; at best you can decide that you want everything hidden, with lots of implicit casts and mystery-meat variables that you never quite know what they'll contain, and no hand holding support from your IDE. Which...doesn't sound very appealing, does it? :) &gt; But, AFAIK, large enough JS projects have been built successfully without the need for types. Large applications have been written in assembler too. This is a terrible, terrible argument. "I saw a youtube video of some guy cooking a three course meal over an open fire; kitchen appliances are just a waste of money!" That being said, using something like TypeScript has costs, and you can certainly just keep track of everything in your head. *But that's what you'll be doing*; everything TypeScript does is something you would otherwise need to handle yourself. When you come back in six months, you won't recall what that obscure utility function returns, but TypeScript will. It's simply untrue that TypeScript does anything optional or that doesn't need to be done; it's a question of whether your want your toolchain to do it, or whether you want your programmers to do it.
Looks really useful! Reminds me slightly of the [ES7 bind operator](https://github.com/zenparsing/es-function-bind). Personally though I hope they change what the operator looks like; typing `|&gt;` on a nordic keyboard requires four keypresses!
Yea, only small startups like Microsoft or Google use this stuff. "Corporate" doesn't equal antiqued infrastructure.
I absolutely love the syntax. It visually mirrors method chaining which has been idiomatic JavaScript for fifteen years. Function composition is great but the common syntax in JS reads backward and requires a bit of set-up to use. The main question I have with this proposal is optimisation for long chains and large datasets. The `chain` operator in Lodash does some amazing things to loop over the data as few times as possible over the whole chain (compared to looping over the dataset in each and every function in the pipeline with composition). I know some optimizations are possible within the engine -- Lua has some lazy evaluation capabilities built-in -- but I'm curious how this proposal might compare or hinder Lodash's approach.
You named two tech companies who develop packages for NPM... Anyway, I suppose you work in a big corporate environment and use NPM there. Right on.
I would never, ever consider type checking a safety net. Using your example, say you are properly using an int32, and in the same scenario, even with a strongly typed language there would have to be some sort of checking and verification going on. Would an integer overflow not cause the same type of chaos and resulting death?
The `|&gt;` token is already used in other functional languages for the same purposes. At least F#, Elixir that I know of.
&gt;I know it's a bit different than the one in elixir In case someone doesn't know how this differs from other implementations, here's the proposed syntax: var newScore = person.score |&gt; double |&gt; score =&gt; add(7, score) |&gt; validateScore Compare this to F# (where all functions are curried unless explicitly accepting of tuples): let newScore = person.score |&gt; double |&gt; add 7 |&gt; validateScore Or livescript (which uses _ for partial application and placeholders): new-score = person.score |&gt; double |&gt; add 7 _ |&gt; validate-score I personally use it all of the time in F#, and whenever I'm using livescript. A personal favorite use so far is with something like `setTimeout` or a lodash `throttle` etc function: -&gt; console.log 'hi' |&gt; setTimeout _, 500 Is the same thing as: setTimeout(function() { console.log('hi'); }, 500); Only easier to read, particularly when you do multiple calls.
Livescript, a coffeescript descendant, also uses this operator, which I believe it copied the semantics from the F# version.
And we shouldn't forget Elm
Looks good! 
Blog author here. I wrote the post for my blog (danyow.net) and it was cross-posted to the official aurelia blog. A number of my posts and other Aurelia team member posts have been cross-posted to the official blog.
It does? That's interesting. Haskell which it takes so much syntax from prefers "free point" style.
&gt; without parentheses or brackets That's just a side-effect, not the goal. The goal is to let you write your code in the order in which it is relevant (and is read), rather than nesting everything. &gt; that makes for a weird sign that looks like a some sort of an "or-less-than?" thingy. I would expect it to do maybe bitwise magic, not calling a function. I think what you'd actually do is look it up. Every symbol is new at some point, that's not a reason not to add it. &gt; It's also a pain to type on non-US keyboard layout Both characters are already in common use in JavaScript (and most other programming languages). *If* this is an issue, it's one that programmers have already been forced to accept and/or find workarounds for. &gt; `new Thing("hello").doubleSay().capitalize().exclaim();` That's not the same thing. The example demonstrates functions belonging to the current scope, you're demonstrating functions belonging to `Thing`. No matter how OOP-focused you are, not all functions that handle an instance of a class belong in that class. &gt; I just wish the syntax ends up sane. Do agree there. As issue #4 points out, making `fn(arg)` no longer necessarily pass only `arg` to `fn` would be pretty bad. Placeholders are better. Another idea is just not supporting passing multiple args, letting people use binding if they really need to.
Is this standard lodash or the functional version that does the minimized looping? 
Why not -&gt; ?
I assume you mean pointfree style? This _is_ a form of pointfree style. In Haskell, you usually write it with `.`, which is `|&gt;` the other way around: "hello" |&gt; doubleSay |&gt; capitalize |&gt; exclaim in Haskell would be (exclaim . capitalize . doubleSay) "hello" which is the mathematical composition you might have learned in high school (f o g). Both of the above are equivalent to exclaim(capitalize(doubleSay("hello")))
100% agree. Diversity is preferable to homogeaty.
Did that end up helping?
This looks completely stupid and unnecessary. What problem is this solving, what value is it adding? I hope this guy isn't part of TC39.
|&gt; and &lt;| aren't valid Haskell - that's why you've never seen it used ;) I personally don't really like |&gt; mainly because I think function application should go in the opposite direction. I'm a-ok with &lt;| though. 
Is this rendered on the server or on the client?
ah yes, another variant of the anythingbot https://github.com/botwillacceptanything/botwillacceptanything
Oh the inline one is working now! However the [YouTube](https://i.imgur.com/P5lWQKb.png) one still isn't working for me! Itni formality nahi chahiye bhai hum bhi desi hi hai :P :P
To be clear, with the current proposal (ignoring issue #4) `fn(arg)` will always pass `arg` into `fn`. Using the pipeline operator will flip the *invocation*. For example: `table('users') |&gt; select('name')` is equivalent to: `select('name')( table('users') )` Thus, `select('name')` is semantically consistent with the rest of the language; there are no hidden arguments in addition to what you see (a single `'name'` argument passed to a `select` function). With that said, issue #4 discusses potential alternatives. Personally I prefer the simplicity of the original proposal, but I do recognize the need for us to discuss and flesh out potential alternatives.
Ok, looks like I missed that that approach to multiple arguments exists only in the issue, not the proposal as it now stands. I was actually going to comment suggesting just going with no support for multiple arguments - it's inefficient when you need to create wrappers, but `map` already tolerates that inefficiency. Looks like I need to read better.
Why not introduce infix function declaration and get all this arbitrary cherry picking of operators out of the way?
Can it truly be said to be an 'operator' if it is comprised of two characters ('|&gt;')? I &lt;3 pipes in Unix.
I would also lean towards `.` since it is not currently in use in JS and both `|` and `&gt;` are.
Plus one in my book. I was looking for said functionality but alas I could find no library to make such magic happen so I created [teFlow](https://github.com/artisin/teFlow); a function wrapper to create a _functional pipeline for control and flow_.
`.bind()` is horrible for partial application and in addition it's an order of magnitude (10-20x) slower than `.apply()` and between 100-300x slower than `.call()` which is still a little slower than native calls. Almost any other partial application or auto-curry function will be faster.
&gt; That's not the same thing. The example demonstrates functions belonging to the current scope, you're demonstrating functions belonging to Thing. Yeah, it was just a side note to compare to existing constructs in existing languages that I know. I'm certainly no advocate to OOP and I would like to have a similar construct to use in any scope instead of having to first write an interface for a class to achieve that kind of flexible pipelining. &gt; Both characters are already in common use in JavaScript (and most other programming languages). If this is an issue, it's one that programmers have already been forced to accept and/or find workarounds for. Indeed, but an operator requiring two different modifier keys is a bit of a hassle, no doubt it would become muscle memory at some point but still, less weird characters would be nicer. Also easier to read - just compare to what C++ looks like these days, I don't think there's anything to look up to down that path.
Standard [Lodash provides lazy evaluation](http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/) via the chain operator.
They could be though. Just define `&lt;|` and `|&gt;` and you're going. |&gt; :: a -&gt; (a -&gt; b) -&gt; b |&gt; = flip fmap &lt;| :: (a -&gt; b) -&gt; a -&gt; b &lt;| = fmap I *think* but it's late and I've not done any haskell in about a year
If they add something like that, I really hope they add something that captures the "pipe or abort" semantics of the Promise api. That's the thing that the old shell pipe operator didn't have... a way to turn the pipe chain into a DAG, based on the failure of a given stage in the primary pipe. IMO the Promise api is one of the cleaner (though probably not *cleanest*) attempts at capturing that style within a very simple "do this when done" / "do this on error" chaining styles. It reminds me a bit of Erlang's exception handling semantics. Working that into the pipe markup in some clear way would be a very new construct, not just a recreation of a semi-useful old one. And it could help provide an easy-to-use yet powerful way to deal with exceptions (something I've always felt are second class in javascript, and need a little more attention to begin with). 
It's the difference between these: function multiply(x) { return function(y) { return x * y } }; function add(x) { return function(y) { return x + y } }; var double = multiply(2); var arr = [0,1,2]; arr .map(multiply(2)) .map(add(5)) .map(double); arr.map(x =&gt; x |&gt; multiply(2) |&gt; add(5) |&gt; double); The new syntax makes it much easier to avoid the intermediate mappings. Observables / Streams provide a similar benefit.
Sort of. AMD was a module format created specifically with the browser in mind. Node's `require`, which is slightly different than CommonJS was created with server-side JavaScript in mind, which is why it is a synchronous operation as opposed to AMD which is asynchronous. ES6 Modules are much more similar to CommonJS/Node's require, and there is no implementation finished in any of the major browsers. If you want to use it today, you currently need to transpile it using something like Babel into either CommonJS or AMD format, which have bundlers which can package it for the browser (Webpack, Browserify, r.js, RequireJS, etc.). These days,you should probably just write ES6 module code, and use a compilation step. It's nice, you won't regret it.
Really wish this would come to Java.
The date picker doesn't work as expected: * going forward doesn't seem to work at all * going backward, the URL gets out of sync with what is shown I'm learning a lot looking through the source. Thanks for posting!
the worst part is if you hold shift with your pinky it is awkward to get to the '|'. what about something like :&gt; instead of |&gt;
Now see to me, |&gt; looks very much like the viking runic letter [Thurisaz](https://en.m.wikipedia.org/wiki/File:Runic_letter_thurisaz.svg). So naturally I figured you would have a dedicated key for it on your modern-day nordic keyboard :) Alas, it's 3-4 keystrokes for the rest of us as well.
Hey, you need to change the "if" statements to "else if":s, so that the structure is: IF field1 ELSE IF field2 ELSE IF field3 ELSE everything ok! edit: here is a working example: http://jsfiddle.net/mb7m3mca/ for some reason the onclick didn't work, so i changed that also :)
What do you mean?
Or, if you don't want to mess with the built in prototypes, you could do something like function p(value) { return { pipe: function(fn) { this.value = fn(this.value); return this; }, value: value }; } 
It will actually be `$` instead of `fmap`.
AMD is dead (was killed by Node-compatible bundlers). CommonJS is dead (was killed by Node). Node uses something that looks like CommonJS and is commonly called CommonJS but isn't actually CommonJS (there's a spec for CommonJS imports and Node knowingly violates good chunks of it). ES6 imports aren't currently natively supported in any JS engine I know of. They can however be translated to Node-style "CommonJS" and there are bundlers that support them directly. As for what CommonJS is: CommonJS was an effort to define common standards for the various competing server-side JavaScript environments that existed at the time (including well-known but now mostly obsolete stuff like Rhino as well as a few lesser known alternatives to Node that have died out). Node mostly won, so the new common standard is "whatever Node does". One of the reasons AMD failed was that it is a lot more complex than the alternative. AMD is intended to be asynchronous at runtime. This means it not only defines dependencies, it also conflates the issue of lazy loading dependency bundles. As it turned out, lazy loading dependency bundles at runtime is a difficult, rare and heterogeneous enough problem that a module system can't easily solve it. But having this kind of complexity in it meant that it was effectively overengineered for the more common simple problems. That said, if you write code today, just use either Node-style imports directly or a tool like Babel that translates ES6 imports to Node-style ones.
I think you said it yourself, it looks short and nice. That code you linked as an example was easily readable because of their use. There is a small adjustment when you first encounter them as they look at bit alien but once used to them they just become part of your workflow.
As you have shown, the benefit can also be achieved with composition if some thought is given to the process. The two following are equivalent, imagine `compose` is a `foldl`: var process = compose(map(multiply(2)), map(add(5)), map(double)); vs. var process = map(compose(multiply(2), add(5), double)); Example 1 requires iteration over the supplied dataset for each function, that is mapped. However, example 2 maps over the dataset once with a composed function.
No because that syntax is not supported, but you can use flow annotations and this babel plugin to do it: https://github.com/codemix/babel-plugin-typecheck
[removed]
I agree there it would look better, I would have to guess and say maybe it's so the devs can stick to one convention, arrow functions or full function definitions, rather than mixing the two.
&gt; It seems like everyone started using them everywhere in place of anonymous functions. Yes, use them for all anonymous functions. &gt; const someFunction = (state, opts) =&gt; {...} Use a regular function declaration instead. With objects, default to shorthand methods.
Personally, I do think the look short and nice. I also think we're overusing them too. This is what I do: I only use arrow functions for those functions that receive parameter(s) and return something in the first statement. Why? Because Arrow functions should be used to quickly process, and return, values received in callbacks. Like functions in arithmetics. For example, I prefer this: someArrayOfNumbers.reduce((previous, current) =&gt; previous + current); Over this: someArrayOfNumbers.reduce(function(previous, current) { return previous + current; }); But I prefer this: someArrayOfNumbers.reduce(function(previous, current) { if (hasSomeCondition(previous)){ return previous*2; } return previous + current; }); Over this: someArrayOfNumbers.reduce((previous, current) =&gt; { if (hasSomeCondition(previous)){ return previous*2; } return previous + current; }); And prefer this: somePromise('...').then(function() { doSomethingThatDoesNotEvenNeedToBeReturned(arbitraryParameter); }); Over this: somePromise('...').then(() =&gt; doSomethingThatDoesNotEvenNeedToBeReturned(arbitraryParameter)); 
you have to make the form full of controls with html first, or does this main function you are calling does all that?
Yep, which is interesting, because `$` is just an operator for "function application" (`f $ x = f(x)`, that's the whole definition). The so-called pipeline operator is literally just (flipped) function application! (and `flip`ping a function is just` f(a, b) = f(b, a)`)
Fixing `this` in theory allows js engines to emit more efficient code since there's no possibility of it changing but in practice I'd be surprised if it made any difference since it should be just a guard that is correctly guessed by the branch predictor all the time. I've gone back and forth on which type of function to use in general. At the moment I use named functions for everything but single expressions because they [show up correctly in core dumps](http://techblog.netflix.com/2015/12/debugging-nodejs-in-production.html) and I no longer care about IE6's named function expression problem. The only problem with using arrow functions is using them with `const` since it means you can't re-bind the functions later so you're opting that function out of hot loading permanently. In theory it's more efficient but like the `this` case above I don't expect it to make a difference for the same reason.
 var trim = function(str) {return str.replace(/^\s*|\s*$/g, '');}; var capitalize = function(str) {return str.toUpperCase();}; var convert = trim . capitalize; convert(' abc def ghi '); 
*Clicks "get started" and a file starts downloading...* Umm no, that's not how to get me started, the first step is to give me some information and documentation on what the library or framework actually does. &gt; TODO: Add the fucking documentation Right ok, why even post this here?
* || * &amp;&amp; * != * == * === * &gt;= * &lt;=
I like syntax. It is shorter and easier on the eyes. 
It is possible to do that, but you'd want to surround your operator in () and use $ instead of fmap. 
When typescript compiles arrow functions (in es5 output mode at least), it only adds extra code if you use the this keyword inside the function. Otherwise it just outputs a regular function. So i definitely overuse them, but the compiler fixes things for me in the background. Not sure how it behaves in es6 output mode though
Yeah, it works fine for livescript since it's already a whitespace-significant language. It's even more nuanced since single-spaced closes implicit function calls, so $ 'p' .find 'a' .click! Is the same as $('p').find('a').click() and $ 'p'.find 'a'.click! is the same as $('p'.find('a'.click()))
Out of curiosity, are you aware of Entity Component Systems? How close is Bethesda engine to that? http://t-machine.org/index.php/2007/09/03/entity-systems-are-the-future-of-mmog-development-part-1/
I would avoid Math.random() - some implementations are decent but some are not, so for cross-platform usefulness finding a better RNG library (and being careful how you seed it) is the way to go.
I completely agree with you. Arrow functions even look uglier in some cases. It seems like some people are just using them because they are new. For example, look at airbnb's enzyme framework: https://github.com/airbnb/enzyme
You are missing the point. The most important part of arrow functions is binding 'this'. In your example, you use the reduce method and say you prefer function()... over () =&gt; ... which is fine as long as you understand the reason why to use arrow functions and when to not. Many times you will be using 'this' inside the reduce callback function. someArrayOfNumbers.reduce(function(previous, current) { if (hasSomeCondition(previous)){ return previous*2; } return previous + current; }.bind(this)); This is what you would need to do. And anybody that uses var self = this, even before arrow functions, was doing it incorrectly. 
Nice explanation and all, but a bit overkill with the "disgusting" comment and general assholery. OPs post mentions several times that the purpose is retaining *this*.
They're pretty sweet for functions that return functions. At least that's why I really like them. // sum.js module.exports = a =&gt; b =&gt; a + b Edit: The desugared alternative to this is: // sum.js module.exports = function (a) { return function (b) { return a + b } } 
1.There is nothing like this context , 'this' means 'context' . 2. Arrow function don't keep this or context . Infact Arrow functions have no context , this(or context) resolves like a normal variable . [Read More here](http://blog.getify.com/arrow-this/)
Rather than binding `this`, arrow functions don't do *anything* with `this` or `arguments`, which means they are light-weight functions that (in theory) take less time to invoke, since less work needs to be done.
Alright, I took it off, sorry, didn't mean to be assholery. I missed the first line of OP. I guess I just read through several of the comments and the reasoning people had for using or not using arrow functions and it blew my mind. There needs to be way more education and explanation in the JavaScript world about why we have things like arrow functions. But I guess that's JavaScript, the largest diversity of programming ability probably than any other language. 
I do think that "the hate" was a conversation starter at conferences for some people because people just like to hate :) Programmers are no different people. Good share.
Nice share and a great timing! Original content? There is a minor typo in "6 Conclustion".
agreed on 'this' typically when i see it something is "off"
Take a look at Object.assign since it allows you to avoid prototype chains entirely. The problem with long prototype chains is that it takes longer to access properties higher in the chain than it does to access properties closer to the actual object. In your case, since you are essentially hiding the updated properties, your new state object doesn't need to include the overwritten properties at all. This is a perfect scenario for Object.assign.
Point 2 is not correct, mori does support ES6 Map/Set interface: https://github.com/swannodette/mori#es6-mapset-inspired-interfaces
Is there a way of extending that script to work independently for different buttons? I like the idea of setting a state and toggling that, I used to use that way back coding ActionScript
Would be much preferred imo. Not sure what the cost would be to the parser implementations.
This is way better than pipelining. You can defer the function and compose more if you want. All the same reasons why clojure devs usually move beyond threading macros and end up using function composition. I really don't want JS to repeat this smell.
The controls are written in the form in the html file, but only what is in the main function is displayed on the page. Can I get the form to load without including it in &gt;body onLoad="main()"&gt; ?
For example with babel it doesn't matter if you use fat arrow or not, the built result is the same (except if you use ```this```). So why not use it?
Not in this subreddit. 
By golly gee wilikers you hit the nail on the head. Google is the bestest ever! There's an upvote for ya'!! (Yeah, I get your sarcasm, too :) )
Someone made a PR for exactly this for coffeescript a few weeks ago https://github.com/jashkenas/coffeescript/pull/4144
I use arrow functions by default. Lexical `this` is nearly always the behavior I want, and by being consistent with using arrow functions (and method shorthand), the `function` keyword becomes very rare and I 1) miss a lot of bugs that occur from forgetting `.bind(this)` on a normal functions. 2) highlight cases where a callback needs a bindable `this`, which is quite handy when reading code. Also, it's possible that arrow functions can be faster because they don't need a bindable this. I haven't seen this confirmed in benchmarks yet though.
I hate dynamic typing. It just doesn't scale well. Everything else about Javascript I can live with.
I develop using windows 10 at home (work gave me a nice macbook). * I use cygwin with `/home/$USERNAME` mapped to `C:\Users\$USERNAME` so I don't have to maintain two home directories. * I have PuTTY's pageant and cygwin's openssh running in lockstep via `ssh-pageant` which shares the ssh-agent between the two, allowing for the same key-based login in both the cygwin terminal and something like WinSCP. * I use ansible to spin up vagrant boxes where my code runs since it's going to run on a linux server anyway, but I used gVim inside windows to do the majority of my work. * I sometimes need to use the git-bash command prompt as some windows cli apps, specifically npm and vagrant, do not like the cygwin terminal
Instead of swapping 2 different classes, you can simplify things by assuming a default state for the button, and then toggling a single class for the alternative state. This way, you can leverage `element.classList` to very easily add or remove the class: **HTML:** `&lt;a href="#" id="thisButtonID" class="button blue"&gt;Button&lt;/a&gt;` **JS:** `document.getElementById('thisButtonID').classList.toggle('down');`
I think that's super useful too, but we don't know yet exactly what the spec will say that should do (assuming class properties makes it in). Being as the arrow function is in the class *definition* (is it treated as being in the context of the constructor function?) and because arrow functions are not *exactly* equivalent to substituting `function () {}.bind(this)` in their place (even though that's essentially how they're getting transpiled). See http://blog.getify.com/arrow-this/ ...
[Global support stands at 90%](http://caniuse.com/#search=ClassList), so I would suggest shim: https://developer.mozilla.org/en-US/docs/Web/API/Element/classList 
Lexical scope and context are slightly different things. Both types of function formats preserve lexical scope. Only one guarantees context.
OC here, happy to answer questions anyone has about how this was made.
I thought this was/r/interestingasfuck for a second. You should definitely post it there as well.
It's already up at /r/space and /r/dataisbeautiful, didn't want to push it!
&gt; But I prefer this: someArrayOfNumbers.reduce(function(previous, current) { if (hasSomeCondition(previous)){ return previous*2; } return previous + current; }); &gt; Over this: someArrayOfNumbers.reduce((previous, current) =&gt; { if (hasSomeCondition(previous)){ return previous*2; } return previous + current; }); . (lol reddit quoted code formatting) or you could just someArrayOfNumbers.reduce((prev, curr) =&gt; return hasSomeCondition(prev)? prev*2 : prev+curr);
like this? http://codepen.io/anon/pen/bENBjv
TIL lambda is arrow in js. 
not sure that's true, it just requires you name your function. So you can do `callSomeFunc(arg, function handler(){ ... })` and it lints fine.
Can you elaborate? 
What if i have like A paragraph then a image , then another paragraph and some &lt;code&gt; . All are mixed then how can i represent it?
npm emails you if you have sensitive info in your package. You should already have a global `~/.gitignore` that prevents such files from even being checked into the repo. (please do if you don't!!) npm supports a local `.npmignore` but a global `~/.npmignore` would be a tremendous help, however it's still a ["feature request"](https://github.com/npm/npm/issues/5673)
Is it open source? I'd love to see the code behind it.
Then just encode the HTML and place it inside a single JSON property, which you probably should be doing anyway for something like the main content of a blog post, for example.
&gt; lol reddit quoted code formatting It's done by starting each line with "&gt;", followed by 1 space, followed by 4 spaces or 1 tab. It's pretty inconvenient.
That would be wonderful.
Another [post](http://aricedev.com/building-a-model-layer-with-rxjs/) on using Rx + React.
At any point in the code I never really know what the object contains. I have to run the code and pause and use an inspector to check what the objects contain. This tends to lead to having a bunch of duplicate data sitting around because you don't always know what objects are in scope and what those objects contain.
Fewer characters = less parsing /s
Private attributes _are_ properties. That's part of the reason I think the accessor without explicit context (`#privateVar`) is weird. Personally I would have rather seen them go with `this.privateVar` because that's the most consistent, but I understand the concern with not wanting to cause problems with older browsers that do not support private properties. That's part of my concern about the proposed `this.#privateVar` flavor. You could conceivable use `this['#privateVar']` in a browser that has no concept of private vars- and it would "work" but without the scope protection. At least with `this#privateVar` you'd get an error immediately because older browsers would not recognize the syntax.
You should.... post it?
I don't much like arrow functions, either, because terseness is not the same as elegance. Or, to put another way, if "brevity is the soul of wit" was as true of programming languages as it is at cocktail parties, then we'd all be programming in Perl or Lisp or APL. For me arrow syntax has its place but I've seen it too often used as nothing more than a secret handshake of coolness. So, if people want to code in hipster hieroglyphics instead of readable JavaScript, that's fine. I'd just rather they did that through a transpiler like CoffeeScript instead of polluting the core language.
&gt; 1.There is nothing like this context , 'this' means 'context' Right, thanks! I wasn't sure how to best phrase it so it'd be clear what I was talking about. &gt; Arrow function don't keep this or context . Infact Arrow functions have no context Now here I would argue that "keeping the context" and "having no context" is pretty much the same thing since the outer scope's `this` is used when there is "no context". But thanks a lot for the article! It was very interesting, well-written and helpful!
I was going to wait and see if someone would be willing to look at it before I posted it but I guess I might as well just go ahead and post it haha, my bad. This is it: // ==UserScript== // @name DCI New HIT Monitor - Party Edition - Delay // @author DCI // @author Mralaska - saqfish // @namespace DCI // @description Scans first 3 pages of new HITs for your search terms. // @version 1.9 // @include https://www.mturk.com/mturk/viewsearchbar?searchWords=&amp;selectedSearchType=hitgroups&amp;sortType=LastUpdatedTime%3A1&amp;pageNumber=2&amp;searchSpec=HITGroupSearch%23T%231%2310%23-1%23T%23%21Reward%216%21rO0ABXQABDAuMDA-%21%23%21LastUpdatedTime%211%21%23%21 // @include https://www.mturk.com/mturk/viewsearchbar?searchWords=&amp;selectedSearchType=hitgroups&amp;sortType=LastUpdatedTime%3A1&amp;pageNumber=3&amp;searchSpec=HITGroupSearch%23T%232%2310%23-1%23T%23!Reward!6!rO0ABXQABDAuMDA-!%23!LastUpdatedTime!1!%23! // @include https://www.mturk.com/mturk/viewsearchbar?searchWords=&amp;selectedSearchType=hitgroups&amp;sortType=LastUpdatedTime%3A1&amp;pageNumber=1&amp;searchSpec=HITGroupSearch%23T%233%2310%23-1%23T%23!Reward!6!rO0ABXQABDAuMDA-!%23!LastUpdatedTime!1!%23! // @require http://code.jquery.com/jquery-latest.min.js // @grant GM_getValue // @grant GM_setValue // ==/UserScript== // Bookmark the following link and use it to activate the script // https://www.mturk.com/mturk/viewsearchbar?searchWords=&amp;selectedSearchType=hitgroups&amp;sortType=LastUpdatedTime%3A1&amp;pageNumber=1&amp;searchSpec=HITGroupSearch%23T%233%2310%23-1%23T%23!Reward!6!rO0ABXQABDAuMDA-!%23!LastUpdatedTime!1!%23! var DAL = []; if (localStorage.getItem("DCI_delay") === null) { if(localStorage["DCI_delay"] === ""){ localStorage.setItem("DCI_delay", JSON.stringify(["1234"])); }else{ localStorage.setItem("DCI_delay", JSON.stringify(["1234"])); } } if (localStorage.getItem("DCI_runs") === null) { localStorage.setItem("DCI_runs","0" ); }else if(localStorage["DCI_runs"] === ""){ localStorage.setItem("DCI_runs", "0"); } var runs = localStorage.getItem("DCI_runs"); DAL = JSON.parse(localStorage["DCI_delay"]); //Delay array var delay = 5; // Delay in MS SleepTime = 5; //seconds HIT Monitor sleeps after an alert ScanTime = 2; // Seconds between scans var needles = [ // Add search terms here. // You can use any text found on the search page or inside of links // This includes requester names, HIT names, text from descriptions, keywords, requester IDs and HIT IDs // All search terms must be in quotes and separated by a comma "ACME Data Collection", "agent agent", "AJ Ghergich", "jon brelig", "Andy K", "BICC", "Bluejay Labs", "carnegie mellon social computing group", "Christos Koritos", "Dan Shaffer", "David Mease", "Funicular Heavy Industries", "Heather Walters", "JASON W GULLIFER", "Jeff Foster", "jesse egbert", "Jonathan Frates", "Leonid Sigal", "nabirds", "Parisa", "pickfu", "Procore", "Project Endor", "Project Gandolph", "Sergey Schmidt", "SIRIUSProject", "Smartsheet", "Spreecast", "Two Lakes", "User Manual", "vaplab", "Wharton", "x8 data" //==[Be careful not to put a comma after the last item on your list]==\\ ]; function searchterms(){ needles = needles.filter( function( o ) { return DAL.indexOf( o ) &lt; 0; }); console.log(needles); console.log(DAL); console.log(runs); if(runs == delay){ localStorage.setItem("DCI_runs","0"); DAL = []; localStorage.setItem("DCI_delay", JSON.stringify(["1234"])); }else{ runs++; localStorage.setItem("DCI_runs",runs ); } var haystack = document.body.innerHTML; var my_pattern, my_matches, found = "", foundlink=""; for (var i=0; i&lt;needles.length; i++){ my_pattern = eval("/" + needles[i] + "/gi"); my_matches = haystack.match(my_pattern); if (my_matches){ DAL.push(needles[i]); localStorage.setItem("DCI_delay", JSON.stringify(DAL)); //runs++; // for Alert found += "\n" + my_matches.length + " found for " + needles[i]; // for link page option searchString = needles[i].replace(/ /g,"+"); foundlink += "\n \(Total queries="+ needles.length +"\) " + my_matches.length; foundlink += " matches for &lt;a target=_blank href=https://www.mturk.com/mturk/searchbar?selectedSearchType=hitgroups&amp;searchWords="; foundlink += searchString +"&gt;"+ needles[i] +"&lt;/a&gt;"; foundlink += " \(alt srch if &lt;a target=_blank href=https://www.mturk.com/mturk/searchbar?selectedSearchType=hitgroups&amp;requesterId="; foundlink += searchString +"&gt;ID&lt;/a&gt; provided\) "; foundlink += time()+"&lt;br&gt;"; } } BellSound = new Audio("http://static1.grsites.com/archive/sounds/musical/musical002.wav"); if (found != ""){ BellSound.play(); LinkAlert(foundlink); setTimeout("location.reload(true);",SleepTime*1000);} else secondpage();} function secondpage(){ var textsearch = $( ":contains('1-10')" ); if (textsearch.length){ setTimeout(function(){(window.location.replace("https://www.mturk.com/mturk/viewsearchbar?searchWords=&amp;selectedSearchType=hitgroups&amp;sortType=LastUpdatedTime%3A1&amp;pageNumber=2&amp;searchSpec=HITGroupSearch%23T%231%2310%23-1%23T%23%21Reward%216%21rO0ABXQABDAuMDA-%21%23%21LastUpdatedTime%211%21%23%21"))},ScanTime*1000);} else thirdpage();} function thirdpage(){ var textsearch = $( ":contains('11-20')" ); if (textsearch.length){ setTimeout(function(){(window.location.replace("https://www.mturk.com/mturk/viewsearchbar?searchWords=&amp;selectedSearchType=hitgroups&amp;sortType=LastUpdatedTime%3A1&amp;pageNumber=3&amp;searchSpec=HITGroupSearch%23T%232%2310%23-1%23T%23!Reward!6!rO0ABXQABDAuMDA-!%23!LastUpdatedTime!1!%23!"))},ScanTime*1000); } else firstpage();} function firstpage(){ var textsearch = $( ":contains('21-30')" ); if (textsearch.length){ setTimeout(function(){(window.location.replace("https://www.mturk.com/mturk/viewsearchbar?searchWords=&amp;selectedSearchType=hitgroups&amp;sortType=LastUpdatedTime%3A1&amp;pageNumber=1&amp;searchSpec=HITGroupSearch%23T%233%2310%23-1%23T%23!Reward!6!rO0ABXQABDAuMDA-!%23!LastUpdatedTime!1!%23!"))},ScanTime*1000); } } function time(){ var d = new Date(), minutes = d.getMinutes().toString().length == 1 ? '0'+d.getMinutes() : d.getMinutes(), hours = d.getHours(), //.toString().length == 1 ? '0'+d.getHours() : d.getHours(), hours = hours &gt; 12 ? hours - 12 : hours, hours = hours &lt; 1 ? hours + 12 : hours, seconds = d.getSeconds().toString().length == 1 ? '0'+d.getSeconds() : d.getSeconds(), ampm = d.getHours() &gt;= 12 ? 'pm' : 'am', //months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'], days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']; //return days[d.getDay()]+' '+months[d.getMonth()]+' '+d.getDate()+' '+d.getFullYear()+' '+hours+':'+minutes+":"+seconds+" "+ampm; return days[d.getDay()]+' '+(d.getMonth()+1)+'/'+d.getDate()+'/'+d.getFullYear()+' '+hours+':'+minutes+':'+seconds+' '+ampm; } function LinkAlert(foundlink){ var LinkWindow = window.open("","MturkHitSearch"); LinkWindow.document.body.innerHTML += (foundlink); LinkWindow.scrollTo(0,document.body.scrollHeight); checkTitle(LinkWindow,"Mturk Search Results"); LinkWindow.document.close(); } function checkTitle(win,tit) { if(win.document) { // if loaded win.document.title = tit; // set title } else { // if not loaded yet setTimeout(check, 10); // check in another 10ms } } searchterms(); document.title = "New HIT Monitor"; 
Ha, nice one. Although to me, the "arrow" `=&gt;` looks ugly, not the `function` :) Matter of taste.
http://i.imgur.com/BSUYOQ7.png
Now this one definitely should **not** be the reason for using anything. Good programming doesn't come from saving a few characters in syntax, it comes from being explicit and clear. If you said that you prefer typing less, that'd be a good reason. But "parsing less bytes"? Leave that task to minifyers, build systems and compiler engines. Programming languages are made to be written and *read* by people.
It's not malicious, you can use it 
You're assuming that the way arrow functions set `this` introduces overhead, is this actually true? edit: a [quick test](http://jsperf.com/lkekj4k2j4fk4) has arrow functions running 13% *faster* in Chrome and 89% slower in Firefox.
Better question is why didnt js steal the skinny arrow from coffeescript too?
Chrome debugger and various other tools infer the name of anonymous functions based on assignment, but unfortunately this isn't part of the engine so profiles and core dumps don't pick up on it. I would actually love to see a babel plugin that re-writes arrow functions with reasonable named functions for this reason.
I've been developing for the better part of my 37 years on the planet. I started on a TRS-80 in BASIC, worked on Mainframe COBOL (barf) and touched MANY languages through that time (C, C#, BASIC, Common Lisp, ActionScript 3 [which is essentially strictly typed JavaScript using Classical Inheritance], something called ASPECT Script, Python, and a host of other languages...) so I'm well aware of what strict typing gets me. I just have not found a need for it in any of the projects I've been privileged to work on in JavaScript.
Yes, you need to know CSS to be a web developer. It is the basis for layout and styling. 
It can't hurt. You could get by with a basic understanding.
Well.. I think that if you want to be a good front-end of full stack developer... I would say ...yes! You need to know CSS in order to give style to your apps. But if you are just going to focus on backend I would say it's not necessary ...anyway css it's not difficult to learn and you will have fun seeing all the nice things you can do with CSS3 ;)
The `const` approach fits better into a language with first class functions, and it shares a useful symmetry with expressions that give `someFunction` a different value. For example, I often find I want to expand an existing function to have some private variables/constants/helpers/cache, which means wrapping it in an IIFE, which means I need to switch to the `const` approach. Using `function`, then, risks me needing to rewrite as `const` later, and leads to codebases that create functions in two ways (`function` and `const`) rather than one (`const`). Also, `function` does not (cannot) enforce that its value is actually constant, which is usually desirable.
HTML &amp; CSS are very easy compared to an actual programming language and essential skills when working with the web. Just do it!
you need to know at least a little bit. at bare minimum you need to understand how CSS selectors work, and know the basics of the various display modes (e.g. block vs. inline). this should be accessible enough. developing a detailed knowledge of css properties and how they all interact, and how each browser varies slightly in implementation, is where it gets hard and nasty. but that's not really necessary and is kind of a specialty niche. what's absolutely necessary is understanding the basic mechanics of how CSS works. you can't really say you understand the DOM in JS unless you also know that.
I too am tired of simple English words, punctu@+ion-0n1y is mu&lt;h b3++3r! % @ %&amp;?
I wouldn't say it blew up. I fixed it and moved on. That 5 minute mistake didn't make me think that I needed to include another 30 minutes of declaring my type definitions. As a matter of fact, it's led to some humorous and learning moments for both me and my juniors. Edit: To clarify. If it takes you more than a few minutes to track the problem, there's most likely an abstraction problem. You've probably too deeply nested a dependency or the callee knows too much about the caller (or vice versa).
I'd suggest them to visit and make live tutorial in KnockoutJS webpage. It takes around ~30-60 minutes and it really explains why should we use a JS framework instead of raw jQuery. You dont even have to choose this one framework in future, but KO has such great tutorial that introduced me into declarative UI programming instead of jQuery'ing everything, so you can use this tutorial to just give them an idea. http://learn.knockoutjs.com/
er, i prefer the latter - the only part of that which i contributed i'm also not sure why you're comparing a function to an operator. no part of running a reduce over a range, and using a selection criterion inside by operator to choose between which of two further maths, also done by operator, seems to fit your question.
I don't think we really understand what it is exactly you're doing/trying to do. Please post a fiddle with all the relevant code :)
For such a large code dump, might I suggest something like pastebin or gist? Also, you have to insert a linebreak before your list for it to render correctly: Text: &lt;- linebreak here * one * two * ...
Is this something that only Internet Explorer is exposed to? I was under the impression Javascript was never allowed access to the file system. I wasn't aware of another "ActiveX-like" spawn.
This JS file is meant to be executed via Windows Script Host (WSH). I think Windows XP executed JS files via WSH when double clicked. I don't know what Windows 8 does by default because Brackets hijacked the file association without asking.
Indeed, WScript can only be used from ActiveX enabled browsers, such as IE, but since 5 - 10% (changed as per comment below) of the world still use IE (as of August 2015, source: Wikipedia), millions of people are still exposed to such vulnerabilities, but regardless, the virus depends on WSH invocation upon double-click, so it's completely another story. Still, everyone, STOP USING BUGGY INSECURE IE!!!
Extend the schema to make it fit your needs. You could create a single function that takes this object and calls itself recursively to parse nested blocks of content and uses recursion depth to generate \&lt;h1 - *n*&gt; tags for 'title'. var json = { 'title':'article title', 'image': { 'url':'http://www.online-image-editor.com//styles/2014/images/example_image.png', 'alt':'some alt text' }, 'text':'this is the intro', 'content':[{ 'block':{ 'title':'subhead', 'text':'paragraph text goes here', 'image':{ 'url':'http://www.online-image-editor.com//styles/2014/images/example_image.png', 'alt':'alt text' }, 'content':[{ 'block':{ 'title':'nested title', 'text':'nested paragraph', 'image':{ 'url':'http://www.online-image-editor.com//styles/2014/images/example_image.png', 'alt':'alt text' } } }] } },{ 'block':{ 'title':'another subhead', 'image':{ 'url':'http://www.online-image-editor.com//styles/2014/images/example_image.png', 'alt':'blah blah' }, 'text':'more paragraphs' } }] };
I see, that makes sense!
The default for .js files on Windows 10 is `C:\Windows\System32\WScript.exe "%1" %*`, presumably Windows 8 was the same.
The typical delivery for something like this would be to send an email with ExcitingFileName.jpeg.js as an attachment. People click that thinking it's a .jpeg or whatever, but instead WScript picks it up and runs the .js file.
When the user clicks the file out of curiosity, WSH gets invoked. Yes, there we see the old adage in action: "curiosity killed the cat!"
Neat, I learned something today :)
That number (24.9%) is for government websites, which was found here: https://en.wikipedia.org/wiki/Usage_share_of_web_browsers. Actual IE usage is somewhere between 5 and 10%. sources: http://www.w3schools.com/browsers/browsers_stats.asp http://caniuse.com/usage-table
Also, the rise of JIT and on the run optimizations allowed code to be larger and less spaghetti.
I was just suggesting a question we should ask. But no, I think the takeaway is that arrow functions are not necessarily slower, and that speed differences depend on the engine.
If your question is of the form "Should I learn x" where x is some technology at least loosely relevant to building applications for the web, the answer is always YES.
The compiler in a statically typed language catches a whole class of bugs. This means in js you have to write bunch more tests to catch these things. Also, as another comment said, function APIs are almost undefined. This makes it hard to reason about what is getting passed to a function. These problems aren't a huge deal for most of the time, but the larger the application grows the more of a problem they become.
Half of my webapp's user base is on IE6.. 
You certainly want someone with that username working for your company!
A (pretty naive) implementation of [the FLIP principles](https://aerotwist.com/blog/flip-your-animations/), which allow you to animate layout changes (in this case only position/scaling changes). Paul explains it excellently in his blog post, but the basic idea is: 1. Record the position of the element before doing the layout change 2. Do the layout change 3. Calculate the change in position 4. Use `transform` to move the element back to its old position 5. Animate the transform until the element is back at its new position This implementation definitely has some shortcomings (such as not supporting elements with existing `transform` or `transition`'s), but it isn't really meant for production - just a quick way to mess around with the idea.
Heh, I won't judge, I've got a questionable not-for-work reddit account as well ;)
Who cars
Not surprised that M$ Wanblows will not hesitate to execute remote binary.
IE (and Chakra) dropped support for ActiveX for Edge. And even then, the ActiveX object had to be marked "Safe for Scripting", which shell was certainly not (so you couldn't actually go to a website that could spawn executables even in ActiveX supporting browsers :-P)
no, it won't overwrite it in the current scope unless you explicitly overwrite `global['_']`... and inside a view, it's using global `_` I realized this later after the fact, but you can just add it as a local to the view in `./config/views.js` under `locals` The real burn is if you include a mixin for lodash, i.e. `_.mixin({myFancyFunction: function (){}})` it'll be available on the lodash that you have required -- if it's the global and and you later require local one, it won't be there (!).
Regardless of what browser or e-mail client you use, the issue is downloading the JS file and double-clicking it so the Windows Script Host (which is independent of a browser) runs it; some people are stupid enough to actually do this.
I remember seeing posts like this on Sophos Naked Security (mostly about obfuscated *machine code* but still), good times.
The point is that that's the only context in which `let` blocks *ever* reliably worked, because they were only ever supported in Firefox, and old-style Firefox extensions were not expected to have cross-browser code. I've actually never developed a Firefox extension either, but I noticed this curiosity when I learned about the `let` keyword in ES6.
From console, you can call getComputedStyles (element) for a full list of styles on an element. It's not possible without running the code on the page to presage what code might be applied to it, but you can use getEventListeners to capture that (may also need jquery.data (events) if stuff is done via that).
Oh, I thought you meant something like adding a custom boolean property to a DOM node to track whether your code has already visited it, with a sufficiently random (or symbol-keyed if possible) name so it doesn't conflict with any pre-existing properties. I did this with my Emoji Polyfill UserScript, and Chromoji (which it was forked from) did something similar but with a fixed name beginning with `$`.
5 to 10% is still millions of people.
You can make a highly minimalist site without CSS or presentational markup (I remember some coder's blog is like that, just HTML with the default styling), but CSS is needed for anything significant.
My guess is so that expressions like `a--&gt;2` would be less ambiguous.
Netflix is where I'd love to work one day.
&gt; Don’t think this the wrong way. I love React, I use it in my personal projects. But I also like freedom, and the idea of tying my application to a framework React is not a framework
It's a pretty common notation in math. I bet it goes back a hundred years.
Further down, someone mentioned optimazation by the run time. That sounds like a string argument to me.
B-b-but it works on my machine. What browser are you using?
Client rendered.
Pretty sure he was referring to Relay.
Exactly, the orgs that show up here and other places online represent less than 1% of the companies that are doing cool shit. &gt; being "big" comes with many BIG disadvantages too. It certainly does, as a general rule, the larger the org the slower everything moves. You can also end up getting stymied on a cool project because of intraoffice politics, executives changing their minds, poor management, lack of resources, you name it... not to mention that larger orgs are much more likely to be "locked-in" to technology choices, which no longer make sense but which costs too much for the entire org to upgrade. Typically smaller orgs won't suffer these problems, or at least not to the same degree. 
Isn't it technically CommonMark now?
That's not a bad idea. We'll take a look at that.
Yes, it's not very clear but he must be referring to the part right before, "Relay and React-Transmit..."
My dad ain't no idiot, but no computer literate. He actually double clicked one of these, and got a bogus AV requesting 300 € (yes, I'm from Europe) for removal of purported "viruses"!
Same here, threading macros give me lots of joy.
I *wish* I was fluent in machine code, but I'd rather do C++. Writing software in machine code, I think, is a fun challenge, but actually using it to make proper software (incl. debugging etc.) would be a torture!
&gt;people ftfy. it takes one click for the chain to start, once you give a program access anything goes.
I'm glad to see this! I was searching for different documentation generators out there and couldn't find anything appealing. JSDoc doesn't seem to provide an actual API, and there doesn't seem to be a good solution unless you're writing an Angular app and can use their built in documenter or docco (which doesn't really allow for more rigid structure). This looks really promising however, and I'll have to take a look at the [api](https://github.com/documentationjs/documentation/blob/master/docs/NODE_API.md) when I get the chance.
Why not Tilde? I think Yehuda Katz is in the TC-39 group or at least contributing to it. I think that would be a nice mecca-like place to work for JavaScript
You are referencing getNato from the MainController, but you never set MainController.getNato to the MainModel.getNato.
Since we switched to typescript, refactoring has been much better. Typescript's type system isn't "poor", I'd say. It's actually pretty advanced, and the fact that it's optional also means you don't end up with super verbose redundant type annotations everywhere (like e.g. Java). What are the things that make you say they're poor/bad?
EDIT: Was thinking about python, not javascript. I'm not very bright... Is there a specific reason why you want to use jade? I really like jade as a template for HTML and PHP, but from personal experience i have found that Jade does not work that well with JavaScript bundlers, Jade wasn't made to be converted to javascript. Something like underscore templates or handlebars are much better suited to be translated to javascript. Are you using a framework, if so what are you using? It greatly affects what template engines are best suited for the job.
I was going to write up couple of options, if you still wanted to use jade on client side templates, but found this (awesome) link that explores all the options: http://timnew.me/blog/2014/05/26/use-jade-as-client-side-template-engine/ And also jadeify, it appears they have solved this problem for you: https://github.com/domenic/jadeify Hope this helps.
Object.assign does what I need. It is a shame to have to use a pollyfill but it works fine and on the standards track is obviously the right way
This may seem petty but I don't like the bad rep of eval(). It isn't evil in this case, it's doing exactly what is intended. The payload is evil. eval is only bad when used by developers when used poorly. As for that script - that's nasty. Hopefully most people will have the right security settings to not execute arbitrary JS from their attachments :).
&gt; Don't really know why this has less upvotes than Netflix. I can't judge whether Facebook or Netflix is better to work at. But if we assume they are equally attractive, one possible reason why the "Facebook" comment has less upvotes than the "Netflix" comment is that the "Netflix" comment was posted 14 hours before "Facebook". So all the users who read this post in between 18 hours ago and 14 hours ago didn't see the "Facebook" comment and therefore also didn't have the chance to up or down vote it. As of now "Netflix" has 4 points and "Facebook" has two points, so Facebook is currently on the winning track with 0.5 points per hour while Netflix has 0.22 points per hour.
RxJS &gt; React
I'm not comparing their purpose , I'm comparing the idea . The concept of RxJS is more revolutionary than the idea behind React . 
By the way, this isn't a virus. It's a so-called "dropper". A dropper is a program which is used to install malware. The malware is either included in the dropper or downloaded.
What's in the main() functions? Also onLoad isn't something you absolutely must need, you can just have the &lt;body&gt; tag.
Quite a bold statement, isn't it? I usually don't agree with such "absolute" assertions. In order to compare two ideas, you have to know them both in depth. And the more you know about them, the hard it is to actually decide which is "more revolutionary". But each with his own, I guess.
Thank You @neanderthalensis, I managed even to push some options through CLI: `browserify -t [jadeify --pretty false --debug true] scripts/main.js &gt; ./bundle.js -d` But that's not the point. I wanted in Handlebars manner use templates in string compile stage such as: var jade = require('jade'); var compile = jade.compileClient(input_component, {pretty: true, debug: true}); var html = compile(author); document.body.innerHTML = html; and still I don't know how to do that with `browserify` and why I cannot do this way :-( 
&gt; i have found that Jade does not work that well with JavaScript bundlers Jade works fine with bundlers. I use Jade for all html on my Angular apps with Webpack using the `jade-loader`. &gt; Jade wasn't made to be converted to javascript. You realize Jade was created by TJ Holowaychuk right? Prolific JavaScript developer, mostly in the Node.js world. Jade IS a JavaScript template language. It is MEANT to be used for JavaScript.
Not sure reduce is the right term, but I get what you're saying. Yeah, it's basically the same thing. However, as I'm the only guy who likes functional practices on our team (of two) the idea of composition really confused the heck out of our other dev when looking over my pull requests. He still has trouble grokking compositions at a glance so something like this would make it a little clearer for him. That said, as long as I can compose, I'm happy either way. I just really like this operator in elixir and would love to be able to use it in vanilla js. Edit: I'm sure I could build it with sweet js or something, but that's just one more build step on top of everything else already. 
Someone correct me if I'm wrong, but I thought modern browsers actively prevented things like this (see [clickjacking](https://en.m.wikipedia.org/wiki/Clickjacking)).
can you just delete wscript.exe from windows or is it actually needed?
Oh, I see what you mean. So I added in the controller: this.getNato = function() { return MainModel.getNato; } and it did not work. Where can I learn more to fix this?
NaN == NaN // =&gt; false Fuck you.
You can't, browsers don't let you to use resources of iframes that isn't yours... May have CORS policy envolved...
[torture you say?](http://www.menuetos.net/)
If the content of the iframe is from the same host, you could probably use JavaScript to trigger the players (this would be specific to the API the player makes available). If it's in a different host, you'll run into cross-domain scripting issues. You'll want to read up on CORS.
Yeah... Look at hello world in machine code! If this takes *so* much for *such* a simple thing as to output the words "hello world" to a console, then I cannot fathom how a "real" program would look like! org xor ax, ax mov ds, ax mov si, msg boot_loop:lodsb or al, al jz go_flag mov ah, 0x0E int 0x10 jmp boot_loop go_flag: jmp go_flag msg db 'hello world', 13, 10, 0 times 510-($-$$) db 0 db 0x55 db 0xAA Although hats off to the developer(s) of MenuetOS... How long they took to complete it, I wonder...
they certainly pay the most
another build system! 
I've never used the A/V DOM methods before but I was curious. . .is there a reason you can't just create a function that triggers two .play()'s, one for each video and have it triggered by your one button? function playTwoVids(vid1,vid2){ vid1.play(); vid2.play(); }
Big doesn't always mean great. I work at a relatively small company and love it as the projects that we work on are awesome! 
Microsoft. They created TypeScript and the Azure portal is a modern marvel.
Are you just copying code from somewhere? Don't do that without understanding what each line is doing. I think your tests are wonky, and I'm not sure exactly what you're trying to do. 
Hey, any chance you could give a quick explanation on what specific problems this is trying to solve -- and what makes this different than other build systems?
Changing the default behavior of JavaScript is a general no-no and is considered "bad practice" by many. If you're the only one using it, it does not really matter. It may introduce headaches later when you use libs/frameworks. Why not just write a wrapper for Date?
It's the same dropper as this one (just with different URLs): https://www.reddit.com/r/javascript/comments/3vu2qd/deobfuscating_and_interpreting_a_malicious_email/
&gt; If I select them all using the ''getElementbyTagName'', I basically got them in a array. getElement**s**byTagName returns a live HTMLCollection. It's not an actual array nor does it extend array. This means you can't use array methods like "map" and "forEach". However, it's "array-like" which means that it has a "length" property and you can access its items by index. &gt; when I click one of the image I want a thing to happens to this images. You can do that via "event delegation". Register a listener further up in the tree and inspect the "target" property of the event to figure out if this event originated from the right kind of element and then do something with that element if this is the case. http://jsfiddle.net/kLgrdtky/
&gt; Viewer - ~~JavaScript~~ image viewer. &gt; Viewer - ~~jQuery~~ image viewer. ftfy Viewer - JavaScript jQuery Plugin image viewer. ftfy 
Thanks!
Npm scripts fulfill pretty much exactly what you're trying to do here. There are even plugin packages for running scripts in a variety of ways 
Agree. npm scripts are great but for simple processes. If you need more flexibility/logic/more complicated build/concurrency you either end up with really long lines in npm scripts or many separate script files which is not really readable/convenient approach. Same goes for watch mechanism.
function theScore() { $('#score').html('&lt;p&gt;Your Score:' + humanScore + '&lt;/p&gt;'); } function ColourChanger() { var button = document.getElementById("c1"); currentColour = (currentColour+1) % colours.length; button.setAttribute("fill", colours[currentColour]); humanScore+=1; theScore(); } function init() { document.getElementById("c1").addEventListener("click",ColourChanger); }
Maybe just not run malicious JScript files in the first place?
Provide a minimal test case. Use JSBin, JSFiddle, or CodePen.
Console says: ReferenceError: init is not defined Put the "init()" call at the very bottom and it will work fine.
just tried it, it didn't work
Ah yes, bathroom humor
Thank you for the feedback however the post is about PrimeUI not PrimeFaces. PrimeUI is a set of jQuery Plugins that has no dependency to a server side tech like java, widgets can consume rest services via json. Many demos especially use a rest service, there are many PrimeUI users in .net world as well.
Something I am working on using http://trackingjs.com/examples/face_tag_friends.html but help is always appreciated 
Console says: Uncaught ReferenceError: $ is not defined jQuery isn't included. Well, you don't really need it for something as simple as that. function theScore() { humanScore += 1; document.querySelector('#score').innerHTML = '&lt;p&gt;Your Score: ' + humanScore + '&lt;/p&gt;'; } Simple enough, right?
I wouldn't say it "failed" necessarily as much as just being superseded by newer techniques. Just like AMD and CommonJS superseded older script loading techniques. Where AMD really helped was with those people transitioning from JS as an interpreted language run entirely client side (i.e. using requirejs to manage dependency loading asyncrhonously) and those people making their first steps into JS as a compiled language (i.e. optimizing script concatenation using r.js and node, using coffeescript, etc.) You have to remember that not every organization enables teams with all the bells and whistles they want or need. So there's still room for solutions like AMD and CommonJS and many js libraries still include support for both via UMD wrappers. 
There is no difference between those IIFEs (immediately invoked function epxressions). The wrapping parenthesis isn't even required [**edit:**] in all cases. It's used by convention to make it clear *at the very first line* that this is an IIFE and not a regular function declaration or function expression. Without those extra parens, you'd only see that it's an IIFE once you've reach the very end.
Pro-tip: Always check the console for errors. Press F12 to open your browser's dev tools and then click on the "console" tab. Errors and stuff you write via `console.log` will show up there.
I think the wrapping parens are required - expressions cannot begin with `function` [among other things](http://tc39.github.io/ecma262/#prod-ExpressionStatement).
Ah, so a program running in node wouldn't block those requests from coming through?
Well, depends on where you put it. (Added a "in all cases" to make it a bit clearer.) E.g. this works the same without the parens: var x = (function() { return 5; }());
Yeah, the thing is that the email came in with an invoice topic, around an hour after i ordered some parts online. Beeing a zip file and an unusual domain all the warning signs was there, but i figured for once to just educate my self in what it actually did.
https://www.reddit.com/r/javascript/comments/3ouez8/understanding_minified_code_why_are_they_doing/
Btw, did you notify the seller? They might want to know if their site / email is vulnerable.
Great help! Thanks!
A quick look over the Github repository doesn't link to any example HTML (although the theming document does include a small screenshot). I think that's a shame - looking at a single demo page says more than a feature list of any size. Perhaps you could build out something based on an existing OSS project?
I don't think this is possible with just javascript because of CORS. About the only thing I could suggest is make a server-side script to scrape the content of the external page and then just host it (temporarily) on your own site.
since you probably can't control the 3rd party iframe you need to do everything on your end. what I would try doing is make your video unclickable with css pointer-events: none; so that all clicks go through to the iframe. not sure if this next part would work but might be worth a try. add an click event listener to your iframe element and get the mouse position of that click event. if the mouse position matches the area that you want clickable then you can assume the other video has started and then trigger yours to start. if they are videos though they might load at different times and you might not know when the other starts playing
Yeah, that was the best course of action for me. Thank you.
If you have an event handler associated with a DOM node event the `this` keyword in your handler (the function that fires from the interaction) points back to that DOM node. Example: var handler = function () { console.log(this); }; myImage.onclick = handler;
If you're going to advertise "screaming fast" you need to show benchmarks. (And if you really want to impress me, compare it to native operations within ranges that native operations are correct. It'll be slower, sure, but without comparing it I'm going to assume it's about 0.1% as fast - get 20% and you have me sold.)
Could you explain a little bit further? You mean I should create a class that uses the `Date` object for generating new calendar?
Most people recommend using `addEventListener` for binding events. I, personally, find that sloppy and instead prefer to bind events directly: myDOMNode.onkeyup = myHandler; //where myHandler is a reference to a function Then inside your event handler you have to write your logic to push dots onto the image.
Some explanation here: http://stackoverflow.com/questions/1565164/what-is-the-rationale-for-all-comparisons-returning-false-for-ieee754-nan-values
so what's your take on bignumber.js?
A rough example for part 1 var countriesText = document.getElementById('par').innerHTML , countriesArr = countriesText.split(' ') , min = 2 , max = 5 , list = [] ; countriesArr.forEach(function (c) { if(c.length &gt;= min &amp;&amp; c.length &lt;= max) list.push(c); });
I'm trying to understand why the virus author(s) needed to include try-catch blocks - to avoid detection in case of exceptions, I guess.
Your code is a huge obfuscated/minified file that I am not going to reverse engineer. Codepen has a panel for JavaScript. Put your JavaScript there. This panel allows people to modify the code and see the rendered result (bottom panel) change.
Yeah, your one getNato spied and expect to be called test confused me, albeit I'm not the best with writing tests :p Glad you figured it out! 
BigFloat is faster. I used a small Mandelbrot set calculation for benchmarking, and it took 50 milliseconds with BigFloat, 200 milliseconds on bignumber.js.
Indeed. Rather than the error being intercepted by WSH (risk of detection), the try-catch blocks take care of exceptions within the script. Hence, even an error would not blow its cover!
Is there any way to then easily test files which `require` `.jade` templates as dependences? We couldn't find an easy solution to use `browserify` loaders in tests (using mocha) so moved to using https://github.com/HenrikJoreteg/templatizer
this is for a really intro class so i'm not entirely sure what some of that means but thanks haha, right now for the first part im making a function with (originalList, min, max) then setting an empty array as a variable. I used a for statement and if statement inside that but im not sure how to make it so that it counts the length of the string. i've tried i.length&gt;=min and stuff but that doesnt seem to be working
x-skeww was right, the source you posted uses a really simple obfuscation that boils down to var badStringArr = ["13", ..., "10"]; function getBadString(badStringData) { result= ''; for (index = 0; index &lt; badStringData.length; index += 1) { result += String.fromCharCode(badStringData[index]); } return result; } eval(getBadString(badStringArr)); This evaled code includes these urls... var r = "prestakitchen.com/wp-includes/pomo/85.exe? acsbrokerage.com/css/fonts/__pages_sources/85.exe? aboutacquisitions.com/wp-includes/theme-compat/85.exe? 46.151.52.197/85.exe?".split(" "); The first two domains are listed as possibly hacked on google, the third (aboutacquisitions.com) is not. It might be a good idea for somebody to contact the registered owner and let them know.
[**@malyw**](https://twitter.com/malyw): &gt;[2015-12-08 22:10:45 UTC](https://twitter.com/malyw/status/674350427845042178) &gt;Chrome Update: &gt;Promise rejection tracking events &gt;[*chromestatus.com*](https://www.chromestatus.com/feature/4805872211460096) &gt;[#webdev](https://twitter.com/search?q=%23webdev) [#chrome](https://twitter.com/search?q=%23chrome) [@ChromiumDev](https://twitter.com/ChromiumDev) [*pic.twitter.com*](http://pbs.twimg.com/media/CVvGI-WWoAAERVl.png) [^[Imgur]](http://i.imgur.com/uSkNomQ.png) ---- [^[Mistake?]](/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/3vznaf%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
I hope you are joking... 
I feel like there is a place for such a tool. npm scripts get out of hand quickly and are hard to read, npm-run-all does not work so well specially if you want for example to launch a live-server in a separate process. gulp files seem overly complex for what they do and the plugin ecosystem adds a layer of complexity towards the simple command line tools underneath. The documentation is not always up to date and the plugin does not always use the latest version of the tool. Grunt files are super verbose. Also gulp can bite you with launching too many tasks in parallel and then you need the runSequence plugin. I think this tool fills a very needed middle ground: the build is in js but its easy to understand and scales well but still calls the command line tools directly. The OS dependency I would not worry about it, many developers in windows have Git bash installed which does not require admin privileges and so is a viable option in enterprises. Its a great way to have a solid command line in windows. So thanks for sharing, i'll definitely try this in my next project and report issues if found.
I've tried to use npm-run-all to launch both a watch typescript compiler and a live-server in parallel which is a very common setup, and the live server just hangs. I could not make npm script scale in my attempts beyond the most simple of scenarios, and even then these things occur. A large npm scripts setup is very hard to read. For a small library, npm scripts if possible, but for a project of a couple of developers better put gulp from the start. This runjs thing looks like a good middle ground, i'll give it a shot definitely.
This was a great article, thanks for the link.
I don't though. If it ever came down to me needing two separate actions for a given event I would manage this appropriately in my one handler. That way I know exactly what is going on the code instead of guessing and bullshitting with a dozen breakpoints, which is what I call sloppy.
You have a better answer or are you merely being rhetorical?
This is awesome. Thanks!
Ok, so going to assume you aren't joking. This is a really bad idea. Each DOM node only has one `onkeyup` property. If something overrides your `onkeyup` assignment then your handler won't run. Sure, you can say that that won't happen but that is a really dangerous attitude to have as a programmer and it is bound to bite you in the ass at some point. There's nothing sloppy about using `addEventListener`.
[Is this what you are looking for?](http://codepen.io/short/pen/wMBZow?editors=101) 
How is this better than [big.js](https://github.com/MikeMcl/big.js/)?
&gt; If something overrides your onkeyup assignment Then you have far greater problems that merely event delegation. Assuming the best you are completely mismanaging your own code. A lot of times there is all kinds of code on the page that isn't yours. This suggests you are allowing foreign code to perform malicious actions to your application, which is far worse. &gt; There's nothing sloppy about using addEventListener. Allowing your code to be so completely mismanaged and potentially insecure is sloppy. Pretending there is no sloppiness merely because a work around is present is just lazy.
For greatest cross-browser support, set up two collections, one for links and one for images (and also placeholders for a counter, a length, and the URL, to minimize DOM accesses): var links = document.getElementsByTagName('a'), imgs = document.getElementsByTagName('img'), i, len, url; This presumes that you weren't relying on anything fancy like the `picture` element or CSS background images, but you might be able to handle them as special cases. Then set up a function to test a URL for the presence of the old site (the one I have presumes that the hostname is precisely `example.com` and not a subdomain, and that no explicit port was used; modify slightly if this is not the case): function fromOldSite(url) { 'use strict'; return url.indexOf('//example.com/') !== -1; } Finally, set up the `for` loops: for (i = 0, len = links.length; i &lt; len; i++) { url = links[i].href; if (fromOldSite(url)) { links[i].href = url.replace('//example.com/', 'mytestserver.com/example/'); } } for (i = 0, len = imgs.length; i &lt; len; i++) { url = imgs[i].src; if (fromOldSite(url)) { imgs[i].src = url.replace('//example.com/', 'mytestserver.com/example/'); } } Have this script run on `load` or on `DOMContentLoaded`; you can use cross-browser shims for `DOMContentLoaded` or for event-registration generally, but a quick and dirty cross-browser way is to wrap up all the previous code into a function (say, `redirectOldSite`) and then do this: if (typeof window.addEventListener === 'function') { // most browsers window.addEventListener('load', redirectOldSite, false); } else if ('attachEvent' in window) { // OldIE window.attachEvent('onload', redirectOldSite); } else if (window.onload) { // even older browsers, with existing onload handler var load = window.onload; window.onload = function () { load(); redirectOldSite(); }; } else { // even older browsers, no existing onload handler window.onload = redirectOldSite; } However, if you place the script at the bottom, below any links or images, and you're sure that other scripts won't be generating other links or images referring to the old domain, you can just run the code without wrapping it in a function or using event handlers (using an IIFE, an immediately invoked function expression, is still a good idea so that you don't pollute the global namespace: Just put a `;(function () {` in a line above all of the code and a `})();` in a line below all of it). Below I'll post the full code, which, again, you should tweak in case you use images other than via the `img` element, or you regularly used subdomains of your original domain or explicit ports in your URLs, and so on; this is wrapped in an IIFE that uses the method of passing in global values as parameters. --- ;(function (window, document, undefined) { 'use strict'; function redirectOldSite() { var links = document.getElementsByTagName('a'), imgs = document.getElementsByTagName('img'), i, len, url; function fromOldSite(url) { return url.indexOf('//example.com/') !== -1; } for (i = 0, len = links.length; i &lt; len; i++) { url = links[i].href; if (fromOldSite(url)) { links[i].href = url.replace('//example.com/', 'mytestserver.com/example/'); } } for (i = 0, len = imgs.length; i &lt; len; i++) { url = imgs[i].src; if (fromOldSite(url)) { imgs[i].src = url.replace('//example.com/', 'mytestserver.com/example/'); } } } if (typeof window.addEventListener === 'function') { window.addEventListener('load', redirectOldSite, false); } else if ('attachEvent' in window) { window.attachEvent('onload', redirectOldSite); } else if (window.onload) { var load = window.onload; window.onload = function () { load(); redirectOldSite(); }; } else window.onload = redirectOldSite; })(window, document);
Well I have to say thank you first of all. You seem to have covered it... and I am surprised this is not already an article I thought I would have Googled days ago. What is funny is I thought about the `quick and dirty cross-browser` method you mentioned. Though I didn't know how to take that from start to finish, I am glad I held out because I will definitely try your method. lewisje, well done sir.
Most sources only go as far as covering `addEventListener` and `attachEvent`, and more modern sources just use `addEventListener` because screw IE8.
Try this, the for loops are broken in that one. ;(function (window, document, undefined) { 'use strict'; function redirectOldSite() { var links = document.getElementsByTagName('a'), imgs = document.getElementsByTagName('img'), i, len, url; function fromOldSite(url) { return url.indexOf('//example.com/') !== -1; } for (i = 0, len = links.length; i &lt; len; i++) { url = links[i].href; if (fromOldSite(url)) { links[i].href = url.replace('//example.com/', 'mytestserver.com/example/'); } } for (i = 0, len = imgs.length; i &lt; len; i++) { url = imgs[i].src; if (fromOldSite(url)) { imgs[i].src = url.replace('//example.com/', 'mytestserver.com/example/'); } } } if (typeof window.addEventListener === 'function') { window.addEventListener('load', redirectOldSite, false); } else if ('attachEvent' in window) { window.attachEvent('onload', redirectOldSite); } else if (window.onload) { var load = window.onload; window.onload = function () { load(); redirectOldSite(); }; } else window.onload = redirectOldSite; })(window, document); 
You should really update the title, I'm sure most people have no idea what FRZR is.
You can click the link to find out ;) No, but seriously I think it's not possible to update the title. But I'll repost when there's more tutorials or even a blog post / screencast available..
But basically FRZR is a VanillaJS view library. Weights &lt;7 kb (depending on which parts you import) and is super fast and easy to use with minimal code. Previous version was 2.5 x faster than Angular and 5 x faster than React (reordering DOM elements). I will create a new benchmark for this new version, which should be even faster, because it uses the same techniques and optimizations, but is even simpler than the previous version.
I'm ranking this post a par 2 in What-the-hell-is-this-anyway golf. Meaning I had to click through two links/pages to get to a page which would explain what the hell Arva actually was. 
I know it's silly but anyone else come across articles like this, that can't type out the word hamburger and instead use a god damn emoji, and just immediately close it down? I can't for the life of me figure out what the hell we're forcing emojis into everything for
Are the links hardcoded in the template, or are they fetched from a database? If they are in files, why can't you just use a search replace operation?
I was gonna type the same reply. It isn't clear for vanilla scripters.
Hm even the angular team suffers from this error it seems :P
Is this part supposed to be where you set the margins? div.content { left: 215; right: 25; } The left and right properties are used to set the position of the div, not the margins. If you want margins you should have something like this: div.content { margin-left: 215px; margin-right: 25px; } But I've got to admit, I can't imagine why adding a script tag would change it at all, so I'm not sure if changing that will fix your problem. Where are you adding the script tag? Also, not sure if this is related to your problem but I noticed this: nav.a { This means a nav element, with the class "a". I'm assuming you meant to match A elements that are children of nav? In that case it should look like this nav a { or (for only top level children) nav &gt; a { Hope some of that helps
I was a big fan of the god damn emoji
Edited to include the complete code of the css and index pages. I was trying to type just the important parts and messed up with the nav.a, sorry! No clue why this is happening though. EDIT: You're amazing! apparently it is about the units. margin-left: 215; margin-right: 25; This seems to cause a problem. Adding "px" as follows: margin-left: 215px; margin-right: 25px; This seems to fix the issue for reasons unknown why it would work normally without that tag.
Works fine now, you probably caught them while they were doing a release.
Very well articulated -- thank you! I'm working on a code base that, by standard, is limited to error-first callbacks, and [async](https://github.com/caolan/async). I'm using a lot of `async.waterfall` to mimic `promise.then` behavior, but dealing with the "dependency graph" issue has become a real pain. [co](https://github.com/tj/co) is a really nice tool for dealing with complex eventual-value-dependencies: co(function* () { const food = yield obtainFood(); const rating = yield Rate(food); return Blog(food, rating); }); It mimics the syntax of the ES7 async/await spec, so I don't feel too guilty using it.
Are these PDFs scanned documents or textual? (i.e. is it possible to highlight the text and copy it successfully?) If it's the latter it shouldn't be too difficult. Since I don't use Acrobat, someone else will have to fill you in on the details. If you don't need to rely on Acrobat, Mozilla's PDF.js will also let you extract text from a PDF.
Oh my fucking god it's a 3D panoramic gif.
Great ! Thanks for all these answers, I will be taking a good look at the code and implement soon. Great work !
People think they're fun. 
Well, I thought "identity" means *the identity of what I specify as an argument*, meaning my argument itself. Okay. That the entire argument is *used* (it is used to check if its callable) but then ignored is.. unexpected, and I don't quite like the logic. If I specify something that's not callable then just pass through whatever the last result was? Well, when I put it that way, it does make more sense... but why not just raise an error? It's a useless `then()` step. What is a possible use case? Right now I would see a use case for my interpretation "identity of the argument", for example, I could use it to chain promises without wrapping one in `() =&gt; myPromise`. I can't think of a use case for the actual behavior, except that I could have a function *that is executed right away* so that the `then` gets that functions return value as its argument. /u/Rhomboid
Yeah, each page of every medical application has the page number in the footer. When you say "go and extract the number from the footer", do you mean manually? Or play with Acrobats page number tool to assign? The hang up is each application that answered "Yes" is going to either be 8 pages long, 9, 10, 11 etc. No consistency, and those are the ones I need. What I want/need is every full application (page 1 through X) if yes was answered on page 4. Is Acrobat/JavaScript my only option? I thought about maybe exporting everything to Excel and maybe issuing some sort of function to capture what I need and then reconvert the excel applications back to PDF. 
&gt; but why not just raise an error? Because it's not an error. Remember that this is the mechanism used for the error callback as well. It's what makes it so that you can call `.then(success)` or `.then(success, err)`. JavaScript doesn't distinguish between an argument not existing and it being `undefined`, so when you call `then()` with a single argument, you get the behavior that's enabled by &gt; 4\. If IsCallable(onRejected) is false, then &gt; &gt; a\. Let onRejected be "Thrower". I.e. this is establishing default behavior. It makes it so that you could also write `.then(undefined, function(...) { ... })` if you just want to add an error callback and let the success value pass through unchanged. 
Thanks for mentioning. And having patience clicking through. For those that don't know. Arva is an ES6 frontend Development framework / pure Javascript.
Ah okay.
Have you tried the Express generator? From the command line run: # express (comes with jade templates, "express -e" for ejs version) and then: # npm install --save angular Don't forget to add to your html head: &lt;script src="/node_modules/angular/angular.js"&gt;&lt;/script&gt; or require('angular') if you're using browserify. 
&gt; When you say "go and extract the number from the footer", do you mean manually? Extract using JavaScript. I'm guessing there's a way to "read" the content from different sections of the page; the footer should be no exception. Once you've done that you can identify which page you're on and then look for "Yes" in the form on that page if the page number is 4. Acrobat JavaScript is not your only option. There are other programming tools for manipulating PDF files. I do most of my coding in Python so that's what I'd use but if you have a background in a different programming language, see if they have a PDF library in that language you can use. Again the steps would be the same: - go to a specific page in the PDF document - read the page number in the footer - if the page number is 4 extract the content from that page to see if the answer is yes or not - if it is, add that page number to the pages to keep - loop through the next pages until you get to one that is "page 1" again, and start over from the beginning 
It looks like a bug in v8 implementation. Firefox and WebKit make no difference with arrow functions with or without argument. Both throw a SyntaxError if you don't wrap them in parentheses.
In order to execute JavaScript you need an execution context, or rather an application (like a JIT compiler or interpreter) that consumes the JavaScript code. There are a number of applications that fall into that classification: * nw.js * electron * node.js The Dell support app probably installs one of those shells and then runs JavaScript inside. These environments provide a set of APIs that JavaScript interfaces with.
I can reproduce in node-v4.2.3 / v8-v4.5.103.35 on OSX. Behaves as expected in Chrome canary.
You are right. It's already can perform some basic audit for the issues described in https://github.com/ChALkeR/notes/blob/master/Do-not-underestimate-credentials-leaks.md. E.g. it performs check for the untracked files in the working tree, that ensures that you don't leak logs or any other auto generated stuff. I'll contact with the article author, maybe he will suggest some advanced audit scenarios.
One of the key aspects that's missing here is that I load the templates from a file. When I code, I don't use peach.add(), I use peach.load(templateFile, callback) and this gives you that clean multiline syntax you like. Except that we are limited here in JSFiddle.
Hi /u/jhammerb, last warning about posting your own site. domain submitted from|count|% :-|-:|-: [hammerlab.org](/search?q=%28and+site%3A%27hammerlab.org%27+author%3A%27jhammerb%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|16|94%
Ah works surrounded by parens after updating chrome. Works in node. Good catch, though there shouldn't be a need for them
Yea, I'm actually not sure why you need them in this case. This kind of thing works fine, for example: &gt; true ? () =&gt; 4 : null () =&gt; 4 &gt; 0, x =&gt; x x =&gt; x
It falls out from the syntax. Arrow functions are an AssignmentExpression (which has very high precedence), the binary operator operands are lower precedence.
What's the problem with people submitting their own content? I didn't see anything against it in the [Subreddit Guidelines](http://www.reddit.com/r/javascript/wiki/index). 
You're almost there but the search is not like http://codepen.io/anon/pen/JGjKoW. This is a google map auto complete search box. When you write 3-4letters of any place, it displays all the related options and then clicking on it the pointer points to that area. Can you please put this search box instead of that one or make that search box to work like this? Otherwise it's almost done
It wasnt the multiline thing it was all the functions for one thing being all over the place and stuff like that. In the future if you want to show your load function then host it on plunker, you can do that there.
&gt; Then write your own... Oh please, thats so gay. And any way, I did.... https://gist.github.com/PAEz/9cc3558bb55af5646715 ...it sucked! ;P 
Did you skip the entire "Posting: Advertising &amp; Self-Promotion" section?
&gt; I've got 2 arrays which, as you can see in lines 1 and 2 of the code below, contain a list of serial numbers. No, I cannot see anything like that. The first two lines are comments which do not contain arrays filled with serial numbers. Your code contains further crap which would prevent it from being executed. Provide a minimal test case. Use JSFiddle, JSBin, or CodePen. let a = [...'abc123']; let b = [...'ac345']; let c = a.filter(v =&gt; b.indexOf(v) !== -1); console.log(c); // a c 3 Something like that?
I saw that but it seemed like most of it doesn't apply since this is a non-commercial blog post. In the linked to [What constitutes spam?](https://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) section, I do see: &gt;If over 10% of your submissions and conversation are your own site/content/affiliate links, you're almost certainly a spammer. I disagree with this (it seems silly to remove decent original content that isn't advertising anything commercial) but I can also see a case for consistency of moderation. 
sweet, good stuff man
nope, dom gets rendered first
I apologize [if](https://en.wikipedia.org/wiki/Non-apology_apology#The_.22if_apology.22) I hurt your precious feelings. Look, it works like this, you post some code using one of those sites I mentioned above and then people can look at it (Syntax highlighting! Woo!), fix it, and paste the link here. It's very streamlined and very simple. The code you posted is incomplete. It doesn't include any arrays and it's using some "gs.print" method which isn't included. So, anyone who'd want to run it would have to supply some test data and replace all those "gs.print" methods. What a fucking waste of time. Also, you didn't answer my question. Your comment was maximally useless.
I can easily make it so that nobody can ever post your site to this subreddit if you want, or you can follow the guidelines like everyone else. Your call.
It's also function in jquery, if it's available.
you are totally right, the problem was caused by the ITSM platform I was using :o 
You could use something like iText or iTextSharp: http://sourceforge.net/projects/itextsharp/ Basically an open source library for reading PDF files. 
I don't find my code particularly difficult to read. To put it into a project context, the folder structure I would use would be like this: - todo-list/ - controllers/todoList.js - templates/todoList.html - render/todoList.js - helpers/todoList.js The separation of things becomes nice and modular.
 var arr1 = [1234, 12345, 123456, 14678, 12, 1382, 56, 78954, 1287]; var arr2 = [1238, 1239, 12345, 1287, 1829, 12]; var arr3 = []; for (var i = 0; i &lt; arr1.length + arr2.length; i++) { console.log(arr1[i]); if (arr2.indexOf(arr1[i]) &gt;= 0) { arr3.push(arr1[i]); } } This will log the numbers from "arr1" followed by 6 times `undefined`. You only have to iterate over the items from array A and check if array B contains it. Check my example above if you want to see how to do it via "filter".
Save your beer money and checkout the Javascript channel on [Freenode](http://webchat.freenode.net/). Make a username, join the `##javascript`channel, and ask away! Alternatively, ask your question here. After all, that's what we are here for :)
I don't see the issue. It's shorter than the normal placeholder names we use like 'foo', just as meaningful, and makes it clear that it's not actually about hamburgers, or a real variable name that you're meant to copy and paste and use in your code. You suggest the author should have typed out the word hamburger, but frankly that seems like it would have made the article *more* confusing.
Fixed with a quick `map.setCenter(ptLocation);` I just appended the same codepen: http://codepen.io/short/pen/LGVbKp?editors=101
I thank you so much, Sir. And respect for understanding my explanation. Thanks to you I am a bit closer to learn working with loops.
How about this? http://codepen.io/short/pen/LGVbKp?editors=001
Super! ;) Anyway to put up the exact location name in the "search box" instead of "your location" once i hit "locate me" ? Toast should remain like "you are in /not in polygon". 
Ah... okay. I wasn't sure if one being longer than the other and not knowing ahead of time which one that is would be a problem or not. Thanks for clarifying! I'll check out your solution using filter!
I think you'd actually want it to look like this (in TypeScript rather than ES6): function p&lt;T&gt;(value: T) { return { pipe: function&lt;U&gt;(fn: (t: T) =&gt; U) { return p(fn(value)); }, value }; } let pipeline = p(10) let pipeline1 = pipeline.pipe(x =&gt; x.toString().length) let pipeline2 = pipeline.pipe(x =&gt; x * 2) // Expect this to be 2, but is 4 with yours let pvalue1 = pipeline1.value // Expect this to be 20, but is 4 with yours let pvalue2 = pipeline2.value The reason why is if you change the value in the original as you pipe, you end up with mutable odd states.
It's java or C#. For large bulk operations, it works well.
I think technically you can but it would be pointless due to the DOM having already rendered by that point. I was hoping that a bound event listener might be a way to do it, but even then, I think it's the same story...
I once switched to Dart for this reason (also supported by Webstorm). People are crazy about ES6, typescript or whatever, but nothing beats Dart me. Easy to install, easy to setup in Webstorm and everything you need works out of the box (statement completion, parameter lookup, refactoring, quick docs, await/async). If you don't need debugging, Atom also supports Dart very well. Just saying ...
Yeah, that's a good point. I was about to do it without mutable state but though that it would be slightly faster to not create a new object every time you call pipe. I should *really* have known better than that at this point. Still, the intended use is to just wrap a value, call pipe a bunch of times and then retrieve it, which works, but it's probably better to cover edge cases than some completely trivial performance boost.
Hi /u/muccapazza, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Huh? They use React primarily. I have several engineering friends that have gone to Facebook, some of them specifically to work with React (not on the framework itself but on things built with it). They may _also_ use Polymer but I think it's pretty common for large companies to use a mix of technologies.
Asm.js is a set of techniques within regular js that is fast and can be made even faster as browser makers do certain specific optimizations to their js engines. Already available. Emscripten turns c++ and many other languages' code into js, often the asm.js subset. Already available. Webassembly is the formalization of this idea, sorta, by making first a binary version of js (usually asm.js subset), then expanding to allow for a generalized binary representation of low level commands. This would eventually mean any language could be compiled to run in the browser without first being compiled to js. In doing so, js will be just another language that runs in the browser, albeit the one with the greatest connection to its built in features such as the DOM and WebGL. Before that, even just a binary representation of js would be helpful because it is slightly smaller in download size and much faster to parse (than strings of characters that make up the source code). Webassembly is being actively worked on. This presentation appears to first explain these concepts, then pushes a stopgap solution that gives some (all?) of the benefits today, prior to official standardization, a working prototype.
/u/Dwighthouse probably did a good explanation, but I'll explain it from what I know. Asm.js is a specific subset of javascript intended for faster calculations. Compilers like V8(google), Spidermonkey (Mozilla) or Chakka (microsoft) can target this javascript code specifically making it much much faster then normal javascript. Basically if you restrict your code or the part of your code that needs it to asm.js friendly code, that code will be more optimized then normal javascript. Browser makers have either supported asm.js directly, or just optimized their code to work with asm.js just for feature parity. It's like if you restricted the english language to specific words. While certain things would be much harder to say, some sentences would be understood a lot faster. E.g I need to go to the bathroom, vs I have to poop. Both can be understood, but poop just gets straight to the point. asm.js is still javascript, but javascript specifically intended to be executed faster than standard javascript. Emscripten is a fancy transpiler, basically like google translate converts a sentence from english to spanish, emscripten converts code from C++ (or another LLVM supported language) to javascript. So you in practice can have games like quake 3 running inside the browser because it's been converted into javascript code. Rather than having a plugin inside the browser, the code just runs inside the browser instead. http://www.quakejs.com/ I like to include examples because seeing is believing. https://github.com/kripken/emscripten/wiki/Porting-Examples-and-Demos You might recognize some programs and games, and for the demos that are still up you can also play with them. Web assembly is a special language intended to run even faster then javascript. Not to replace it but to work at a lower level. From what I understand, javascript will still be used for most things, but web assembly will be used when you need to be very fast, for things like games in the browser that need to be even faster then what current javascript execution can allow. Webassembly is still in development and as such it's not quite finalized yet, but it will be interesting to see what kind of demos and creations people will make with it. For the record I don't have a record in systems programming or compilers, except for some vb/web design classes, but I have a general interest in web stuff because of all the neat demos and projects.
Polymer is awesome. React is awesome. They are not the same thing. React is not a framework. There are many technologies, patterns, and architectural styles that react developers follow, but react itself is not a framework. It's sad that no one took the time to say the simplest possible thing, that they should not be compared. They have some overlap, but they are more different than the same. 
Not surprising. Not all projects at Google use Angular either. No big deal there.
Because this post poses it as an "either-or"question
Almost zero projects at Google use Angular. It's kinda sad really. 
Several do. Some are too old and/or too large to (like Maps). I worked at Google on Cloud Platform (which uses Angular) and my fiancée works on the internal CRM (which also uses Angular).
Really? But those are relatively small compared to, say, Gmail.
The CRM is surprisingly big (~300,000 lines of code). console.developers.google.com is also fairly large, considering how many features it has. Their _usage_ isn't as large as Gmail though. (Maybe that's what you were talking about?) :)
Missing "/" in type="" prevents script from running at all: &gt; &lt;script type="textjavascript"&gt; Missing assignment operator in: &gt; var binOne[firstOctect]; Array is assigned to variable "binOne" not "binOne[]" in: &gt; document.getElementById("binConv").value=binOne[];
Partially, yes. Overall, I imagine the projects probably make up less than 1% of the total front-end code. Is that correct? 
The original post is also nearly 2 years old, and both technologies have changed significantly.
Mozilla will be supporting x-tag and not polymer. Forget safari while you are at it
Had to look at the address bar to make sure I wasn't in /r/shittyprogramming. First rule of programming: If your code doesn't work, you *stop* adding (unnecessary) new code and fix the code you have until it works. In this case, your code stops working before any line of Javascript is even interpreted at all, namely, here: &gt;&lt;script type="textjavascript"&gt; That should be "text/javascript" (with a slash). As it is, the browser doesn't even know what to do with everything between the &lt;script&gt; tags. After that, there's a bunch of other bizarre stuff, for instance: &gt;firstOctect - (2\^(7-i)) &gt;var binOne[firstOctect]; &gt;document.getElementById("binConv").value=binOne[]; I have no idea where you got this nonsense from, and I'm skeptical it will run at all, much less do what you want it to. But in any case, once you get those &lt;script&gt; tags working, your browser should alert you to actual Javascript syntax errors, so you can go through them and fix them one at a time.
Technically, Polymer is not a framework either. Polymer provides the view or model-view features of a broader client stack. It's reasonable for someone to find this comparable to the role React plays in the stack.
you would be better off actually reading it.
TL;DR: RTFA
Is the server blocking the request or is the browser? By default, the browser will block AJAX requests to hosts other than the one that served the current page as a security measure. Look into JSONP to circumnavigate this.
I'm not a JS noob, so no thanks, I have the luxury of not needing to read it
The idea of how to visually compose Web components and fill in the gap with code that glues things together is partially resolved in Structor so far. In short, Structor has the source code generators, which are the glue for components and other parts of Web app (framework parts). Could you tell what kinds of generators will be useful? For example: a) Infrastructure generators: * Generate REST service with Swagger docs by entered in Swagger configuration format. * Generate GraphQL server by entered data structure in GraphQL schema format b) Component generators: * Generate Redux wrapped components connected to existing REST API * Generate Relay wrapper components connected to existing GraphQL server Any other ideas?
Thank you for the kind words. I hope you find it useful.
So true. I'm using Polymer and React at the same time. Comparing them feels like people asking which bicycle is best: a Cessna Skyhawk or Nike Shoes. Both are not bicycles. Both can be used together, or stand-alone.
Is my font broken? Where are the emojis?
`$resource` service in Angular also uses `delete` method. I see nothing wrong in it.
I think it's perfectly fine but I generally avoid them in production code. The minifier we use in production will break when using reserved words without using the `userService['delete']()` notation.
That doesn't seem strange to me, it looks like the expected behaviour.
There are a few options: * Use routing. Depending on the path (e.g. "/home" etc) your app does something specific. * jQuery-style: Always check if the element exists before you interact with it. With jQuery, this happens automatically. If no matching element exists, you get an empty collection and operating on one of those is a no-op. * Have some sort of "components" which are configured via inlined JavaScript. When the document is ready, you iterate over the configurations and initialize whichever component was mentioned with the supplied settings.
https://www.npmjs.com/package/sinopia
Thanks for quick response guys. It was very helpful. It looks much more elegant now. I used: if($('#table')) { do_thing_with_table(); }
Look into require.js and pub/sub patterns. 
you can try this free [online javascript minifier](http://www.online-code.net/minify-js.html) to compress your js code.
_.findWhere will return either an Object or undefined. So if you 'not' that with the ! operator it will become false or true respectively. Hence the !._findWhere will return true if it does not find the object in the array2, therefore by returning true to the filter predicate function, the filter method. So if you have differences you should get an array of items in array2 that are not in array1 returned by _.filter
Yeah, me too. I know jQuery so I don't need that shit, amiright?
Rails uses destroy. I think Ember may use destroy as well. I don't like naming this method delete because often it doesn't actually delete, but rather set an isDeleted flag or whatnot. Use destroy and caulk it up as decoupling interface from implementation. 
@hahaNodeJS While that is true under `ES3` it is no *entirely* longer true under `ES5`. Keywords can be used as property names.
Create Read Update Destroy is how I've always learned it. I have always felt like "delete" was a little off limits, just as an intro programmer.
Yes, but it's not pretty. You have to call a click on your submit button. Make sure you `event.preventDefault()` in your submit button when `checkValidity()` function returns false. I made a library that clicks that button (or creates one if no submit button is found) for you: [`transForm.js`](https://github.com/A1rPun/transForm.js) usage: transForm.submit(el, true);
Well.. it's certainly not uncommon to call it that. [1](http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.5), [2](https://github.com/estree/estree/blob/master/spec.md#property). 
Citation needed.
I don't know how reddit handles mailto: links but I should start by getting that e-mail of the internet before your inbox gets flooded with spam. Let this comment section help you or private messages if it leads to a discussion :) From what I read you trying to solve a difficult problem with minimum knowledge. I'll advise to slice your problem in smaller problems and work from there. Try to figure out what JWT really does and what the philosophy behind it is. I have no concrete answers for you.
Thank you. This is exactly what I am doing, I even created some examples using jwt. erased email.
&gt; So Polymer has no future as the whole idea is for it to be fully replaced by native WC/shadow DOM implementation, and React is the band-aid to allow us to have high-performance SPA views TODAY but whose concepts like Virtual DOM certainly have a future regardless. Why would Polymer have no future when web components are supported by all browsers? They provide a large set of pre-built web components that you can start using right out of the gate. To me, Polymer is very much relevant in the future, it will just require less polyfills. 
You described basically how Redux works. Yes, you can write it on your own. Sooner or later you want to move boilerplate into a separate kind of module to not being forced to write it over and over again. Suddenly you have a framework. Or you could just use Redux if you do not want to write it on your own. But why would you want to use Flux/Redux in the first place? In my opinion, it makes the complicated parts (state management) more predictable and easier to reason about. Makes it easier to maintain in some cases. And I have written so many Angular and Backbone/Marionette apps, I just needed something different. That's why I use it.
Things I see wrong: * Does not handle data with separator characters in the field data. * Does not handle data with quoting characters ([RFC](https://tools.ietf.org/html/rfc4180#page-2)) in the field data. * Does not correctly handle data with newlines. * Does not follow [RFC 4180](https://tools.ietf.org/html/rfc4180) which specifies CRLF line endings. This isn't a complicated spec, but still your code follows almost none of it.
But why?
ISUD, USUD, we all SUD.
About remembering visitor visit, you can use [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage)
I agree completely. At Netflix we're working on our own internal suite of React components that are aimed to be reusable and help us create consistent interfaces. I find this a little shortsighted though, especially since as you say, Web Components are the future (track to standardization), while React components are not. I've been working on a side project called diffHTML (that is still early alpha), https://github.com/tbranyen/diffhtml which could be a browser API some day in the future. Native Virtual DOM &amp; Custom Elements are pretty much all I need to create an interface. Wire in Redux and a decent Router and you're basically ready to make a SPA.
Why not? If you have to ask then you are not part of the targeted audience.
Honestly asking myself similar questions. I feel like immutability helps a few situations really gracefully: * It is easy to know when something changes * It prevents some side effects (changing an object doesn't affect others with the old object) But also: * It adds more overhead than just mutating state * It hides some intended side effects (changing an object to the correct state doesn't affect others with the instance reference) * If you use immutable.js, it requires loosely bound data access which fights against having/using typescript types, and type safety is very nice to have. * Adds more mental hurdles to leap through, as changing one boolean now needs to reset the entire app state object to a new instance. Without immutable.js you might end up going the deepcopy route, creating a copy of the original state on every tiny mutation, which is very straining on GC. 
How about: Chapter 25, “[New in ECMAScript 5](http://speakingjs.com/es5/ch25.html)”. Other than that, I don’t think there are books that just cover what’s new in ES5.
I understand the elegancy of such solutions, plus it's almost always better to use a well known library instead of a handmade module. But changing a whole state is overhead in my opinion. For example, Vue.js in such cases re-evaluates the whole data store (even though it's smart enough to prevent complete re-rendering). So I keep reading these articles and thinking, maybe there is something in it I don't see yet.
I think there is an issue specific to bluebird.
Reading the article made me hungry for a hamburger. :)
`input.setCustomValidity(message)` could be used to set a custom error message. However it seems to be supported only in Firefox (and maybe IE10+) and not for example in Chrome. [Here's an example from MDN](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation). HTML5 form stuff is generally inconsistent even on modern browsers so doing it yourself or with a library can be a better option.
Thanks for the help, but I meant using touchstart and touchend events to open a link automatically when the page first loads.
Thanks for the links! I'm more sure that it actually was TypeScript now. I remembered the name as being something like "Type.js", so I thought it was Node.js for a while, but TypeScript seems to match.
As far as I know touch events cannot be fired from code. This will require some actual interaction.
You are missing my point. It's okay(and expected) for someone unfamiliar with the technologies to assume they are comparable. It is the responsibility of someone who knows both technologies to come in and say that they are not the same, and explain what the difference is. &gt;In terms of what people use them for they're not very different. They are completely different... For you to even say that shows that you are ignorant of the two technologies. There's nothing wrong with that, but I also don't expect you to answer the question on stack exchange. The top voted answer was very comprehensive, but it's misinformation. It contributes to the idea that they two technologies are similar, when they aren't comparable. I can't say that enough times. Working with React requires much more learning &amp; development time. There are many technologies, patterns, and architectures that come with writing ReactJS. I'm just disappointed that the top voted answer is some guy trying really hard to compare two things that are very different. 
Pretty sweet! I love your latest commit... https://github.com/sagnew/Twilio-IP-Messaging-Plays-Pokemon/commit/612c0516932c36f979e396055e82964969081904 
&gt; In my opinion, it makes the complicated parts (state management) more predictable and easier to reason about. My favourite thing is that it treats asynchronous actions as user input. `TODO_CLICKED`, `TODOS_RETRIEVE_SUCCESS`, `TODOS_RETRIEVE_FAIL`. One comes from the user, two come from a remote server response, but all three are handled the same way. This makes it insanely easy to write tests.
People that like to make stuff just because they can for no other reason. 
I quite like Sequelize + Postgres. MassiveJS seems less robust than Sequelize.
I use a custom Flux framework at my day job and use Redux exclusively in the few projects I work on at home. The Redux documentation's examples include an API client that is implemented as middleware. I've also seen the event creation handled inside of action creators. For example, you'd call the `createUser(user)` action creator and it would perform the request and then create the success or failure action. And so I searched NPM looking for things that manage side effects in redux and found: https://github.com/salsita/redux-side-effects Hah! Read through the code and I like the approach. I'll probably give the package a try in one of my apps this weekend. :) I look forward to your next post.
My guess is that /u/dizzr is saying that if your store is sending data to two different components, and one of them alters that data, the second component will not be aware of that change. Of course that's really doing it the wrong way. If the data needs to be altered, an event should fire to notify the store of the necessary change, and it can send the transformed/updated data as necessary.
That only makes it work on older crappier JS engines. It's perfectly legal to use keywords in property names in JS engines that implement ES5 I think.
Everyone already wrote a lot of words. My team has completely changed to flux. We are experienced writing big front-end applications. Over time, they get really hard to manage and debug; there are a lot of discrepancies between data and views. Flux, specially Redux, solves most of our biggest pains. Try it out, you'll see the difference once you start dealing with the hard problems.
 &gt; 20 &gt; 10 true &gt; '20' &gt; '10' true &gt; 10 &gt; 5 true &gt; '10' &gt; '5' false That's the problem, basically. You're comparing strings, not numbers. Comparing strings is about the sorting order. The solution is to turn those strings into actual numbers. &gt; parseFloat('10') &gt; parseFloat('5') true So, write: var whatever = parseFloat(prompt(...)); https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/parseFloat
There is always the option to just use a for-loop and concatenation: for(var i = 0; i &lt;= 15; i++) { $('.section_container_' + i).etc(...); ... } You don't need "each", by the way. Just using "on" on the collection will have the same effect. The listener will be registered for every item. The jQuery methods work like that in general. They are applied to all items in the collection (if any). **Edit:** I should probably mention that there is usually a better way to do that kind of thing. You can usually use a single listener and event delegation. There is also a function called "index" to get the index of your element. So, the first thing would have the index 0 and so on. Well, since you didn't provide a test case, I can't show you how that would actually look like.
They help you catch a class of errors, e.g. calling `document.querySelector('.foo')` and forgetting to handle the case where it doesn't match anything.
There are different levels of static typing, I would argue that there are very real differences.
There are also practical considerations: It's much easier to find a JS developer than an OCaml or Closure(script)/Scala(js) developer. JS with Flow is still very familiar. Of course not all type systems are created equal, but flow seems exceptionally expressive compared to, say, TypeScript. 
It is a shame TS didn't implement that. I'm on Windows and Flow isn't even available. That and the compile times are a bit too offputting.
https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-js
de1337 is an extremely acceptable substitute. 
Why not use JSFiddle or something?
Make sure you're running `flow status`, rather than `flow check` (the article discusses this). Incremental compiles should be &lt;1sec.
If a company gave me code like that in an assessment I would not longer want to apply there.
I was thinking the same thing.It's a group collab page though so there are a bunch of people playing with it. 
Type "babel calc.js -o calc-bundle.js" in the command line and tell us what the message is
jawn
i didn't install babel-cli and that's why got the error. Is there any tutorial that explains how to use various attributes like -o etc?
*read the documentation*
i can't find on their website where it explains -o and other params, how to use presets, etc.,
Curious, raw dataset freely available?
Why are you trying to load the HTML to do Javascript unit testing?
[removed]
I expect babel to expose an executable like other projects do. Thus, this should (also?) work: ./node_modules/.bin/babel calc.js -o calc-bundle.js This operating system accident named _Windows_ seems to have problems with relative paths, though.
To interact with the input and button componentsm
Well, you have managed to find the npm package which is meant for the next post :-) Anyway, little spoiler here. Yes, the standard Redux approach is treating Action creators as Command handlers (using `thunk-middleware`). There are obviously some problems with this approach, for example: mixing service layer with domain layer, writing unit tests and also replay after hot-reload might not always be ideal.
What about when you want to remove a dependency?
Do you mean like remove all instances of a dependency? I can't think of how that process would be affected by the dependency being declared as a global in an external file, you'd have to do a painstaking folder-wide search regardless, no?
&gt; I'm on Windows and Flow isn't even available. [Not true for a few days now](https://www.reddit.com/r/javascript/comments/3wcjng/there_are_flow_windows_binaries_again/).
[I followed the github issue about windows builds and a few days ago they posted this](https://github.com/facebook/flow/issues/6#issuecomment-161998858) :) It's declared as alpha but based on the current flow master.
Use [nvm](https://github.com/creationix/nvm). It installs a local node version (along with npm). You can choose between node versions, install packages globally with npm (it will install to $HOME/.nvm/), etc. curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash nvm install 5.0 nvm use 5.0 npm install jquery Don't forget reading through carefully [the docs](https://github.com/creationix/nvm/blob/master/README.markdown).
I think the official nomenclature is EcmaScript 2015, now.
If you are on OS X I'd also recommend Homebrew.
This actually sounds quite reasonable for a fizzbuzz. Of course, if you only have 30 mins to code it, it would be rough. I would fail it because I am not a webdev so would have to look up bunch of stuff on DOM manipulation. How much time were you given?
Emscripten
The 100% safe solutions are (because they are standards): * ES6 Promises * co + ES6 generators Still fairly safe (probably standardized soon): * Async functions The code you write with co has almost the same structure as the one you write with async functions, so upgrading later on is simple. I’m using co in a project right now and it’s great how simple it is to switch between sync and async for parts of one’s code.
I like csp like in go. Here it uses sweet.js so no garbage in syntax https://github.com/srikumarks/cspjs
Well, I don’t, I use co. If I did, I’d use Babel + [babel-preset-es2015-node5](https://github.com/alekseykulikov/babel-preset-es2015-node5) + [babel-plugin-transform-async-functions](https://www.npmjs.com/package/babel-plugin-transform-async-functions).
you know what will happen over time ? because the object you get out of the store is mutable, code will start popping up that modifies it directly at the component level. If you pass on a copy, there will be code that modifies the copy. Over time and in a large team, allowing the state to be changed from anywhere will cause maintenance problems. If the state that comes out of the store is immutable you are sure it can only be modified inside the store. Another advantage for large apps is performance: modern frameworks like React or Angular 2 can be configured to optimize their change detection mechanism to take advantage of the fact that the input of components is immutable. Components can detect change everywhere via reference comparison with === only. I would say if you put state inside a store but don't make it immutable, might as well not put it inside a store. The main idea was to ensure that the state is only changed in a controlled way, but if the state can be freely mutated from outside the store, that guarantee is lost. I think the main goal is to ensure we can always reason easily about the application no matter how big the code or the team, more than the performance aspect. We will probably never hit a use case where that actually makes a difference, still its one the things usually mentioned in these discussions.
We are working on it. Thanks for asking
Might be worth looking into jQuery Validation. http://jqueryvalidation.org/
What if I told you you should really be structuring your app like that even when you're not using redux/flux? There is no obstacle prohibiting you doing it that way without redux/flux
My eyes will parse javascript faster with the use of semicolons. If they are omitted, I (as human) must place the semicolon in my head, which slows things down. The article had a perfect example. What if I wrote this comment without periods? You, the reader, have to think where I intended the sentence would end. I know the compiler doesn't care but please do care about people that manage your code :)
Correct? Safe? Control flow libraries such as async (callbacks) / promises. To use generators / ES7 async await stuff you need to transpile. From what I saw callbacks and promises are the most used.
&gt; A single data store for an entire application is great. But I can [reimplement redux myself] Yes, you really could. But you might be surprised how much code you have to write to cover odd corner cases, or how much time you can save by being able to use libraries like `redux-form`. But yeah, if you have a global state atom and an event bus and are careful to be disciplined about data flow and so on, then no, you don't need redux *as well*. &gt; But do I need it? Do I need this predictability and undo/redo features? * Undo/redo, maybe not. It makes a great little demo to show off to your boss, but I don't find it actually helps me debug stuff to speak of. * Really good hot loading, yes. Being able to fix a bug and see the results almost instantly using current app state is *nice*. * Predictability...um, of course? Debugging is always harder that writing; anything that helps me reason about what's going on is awesome. Really, redux is a pattern for structuring apps. It's a very, very good pattern for many purposes, but you don't need to use the actual redux code to implement it. On the other hand, why wouldn't you? Yeah, you *can* toss out some useful redux features and still be okay, but what do you gain? "Can I rewrite a bunch of fiddly code on my own, making a few small changes so it won't work as well?" Sure, but maybe you should have a solid reason for it first? In one of your comments you say: &gt; Basically, it addresses all the issues I have with Redux. What issues *are* those, exactly?
funny i read the redux source a while back and did not notice this until now
Do you really have trouble parsing one line statements? When I'm looking at code I'm completely unaware of whether there are semicolons or not because I'm considering the content of the statements, not what happens to be at the end.
A major one I know off the top of my head is npm.
Wow really? TIL
I prefer them because they convey meaning as to the end of a sentence I mean can you imagine opening a book and not knowing where a line ends and where it doesn't It would be as if the entire book is just one long continuous sentence There would be no trouble reading that now would there.
Now try to redo your demonstration, but use a separate line for each sentence. If one is too long, indent the following lines. Is it really a problem to see where each sentence ends?
I dont need them because they don't convey meaning as to the end of a sentence I mean can you imagine reading a series of lines and being confused where they end? And having sentence fragments How would we know where paragraphs in books end if we don't have a paragraph end character? We would though Silly arguments are fun to deconstruct
I used to agree for javascript. Until it bit me in the ass. I always use semicolons for javascript now. Always.
Sure. Lets take a random excerpt from a book like War and Peace. &gt; By morning the night's fog had left only hoarfrost turning into dew on the heights, but in the hollows the fog still spread its milk-white sea. Nothing could be seen in that hollow to the left, into which our troops had descended and from which came the sounds of gunfire. Over the heights was a dark, clear sky, and to the right-the enormous ball of the sun. Far ahead, on the other shore of the sea of fog, one could make out the jutting, wooded hills on which the enemy army was supposed to be, and something was discernible. To the right the guards were entering the region of the fog, with a sound of tramping and wheels and an occasional gleam of bayonets; to the left, beyond the village, similar masses of cavalry approached and disappeared into the sea of fog. In front and behind moved the infantry. The commander in chief stood on the road out of the village, letting the troops pass by him. Kutuzov seemed exhausted and irritable that morning. The infantry going past him halted without any command, apparently because something ahead held them up. Now lets convert it to new lines. &gt;By morning the night's fog had left only hoarfrost turning into dew on the heights, but in the hollows the fog still spread its milk-white sea &gt;Nothing could be seen in that hollow to the left, into which our troops had descended and from which came the sounds of gunfire &gt;Over the heights was a dark, clear sky, and to the right-the enormous ball of the sun &gt;Far ahead, on the other shore of the sea of fog, one could make out the jutting, wooded hills on which the enemy army was supposed to be, and something was discernible &gt;To the right the guards were entering the region of the fog, with a sound of tramping and wheels and an occasional gleam of bayonets; to the left, beyond the village, similar masses of cavalry approached and disappeared into the sea of fog &gt;In front and behind moved the infantry &gt;The commander in chief stood on the road out of the village, letting the troops pass by him &gt;Kutuzov seemed exhausted and irritable that morning &gt;The infantry going past him halted without any command, apparently because something ahead held them up 
Thank you, as we can see, it's perfectly clear where each sentence starts and ends.
Man, I never liked Visual Basic. Without the semicolon it seemed wrong, and many time would I end the line with a semicolon and have a compiler error. I always write a semicolon at the end of a line in js, and never will stop doing it. This got me thinking, and I don't recall reading it on the post. How does minification is handled when there's no semicolon and newline is used to determine when a line of code ends?
I think this article missed the best reasons to use semicolons: explicitness and minification. 
Implicit semicolon insertion in javascript has some weird rules. I don't remember precisely where I missed one which I needed, but I *do* remember spending (read: "wasting") several hours finding the cause.
Thank you for your answer! I'll try to find out where I can buy those books, especially first one interest me! About frameworks, perhaps I have used wrong term, but I was thinking about full-contained frameworks, not SPA frameworks. Umm.. I come from PHP world where the typical workflow starts with selecting one of full featured framework like Laravel, Yii, Phalcon or Symfony, and then build your application. As PHP Laravel programmer, I feel express + various 3rd party modules a bit lacking. Its like, I do not have any tool that is ready, I must wire one by one all things and they are only a bit compatabile with themeselves. For example I've used Sequelize for SQL database managment in my app. And I am also using moment.js for everything related to time/date. It is ok, but when I am saving something with datetime field in db I must always use moment.toDate() function because Sequelize wont accept moment.js. These are small things that are ready in PHP frameworks so my question is about is there a full featured framework for Node.js that has all frequently used features like view templates, orm, cache, session managing, events, controllers, authentication, etc. inside as one. (I think I am just asking if there is a Laravel for node.js :P) Or perhaps I am thinking in wrong way and I should just find out building blocks (ie express modules) and wire them by hand? Thanks for your answer!
The only times it can "fail" is if you start a line with `(` or `[` and to fix that you just add one before them, so `;(` or `;[` That's it... And when you hit that it's generally pretty obvious what happened. I personally don't care what you or anyone else uses (as long as it's consistent in a project), but the fear mongering about it isn't productive.
Cool, even better, stage 3 means we are pretty much set for this being final.
&gt; I always write a semicolon at the end of a line in js, and never will stop doing it. then pls do continue. &gt; How does minification is handled when there's no semicolon and newline is used to determine when a line of code ends? all minification tools handle it fine (its described in the spec how ASI works)
Express isn't really a framework from that standpoint. You have to assemble everything yourself. Although I have never used it, I believe that [**Sails.js**](http://sailsjs.org/) is a popular choice. It actually uses Express under the hood. 
Nifty! It'd be nice to see the squares respond to key presses in addition to the mouse, and you could go to down with CSS transitions and animations.
Oh no, I don't think it's far-fetched at all! I think it's realistic enough for me to rationalise always using semicolons in js :-)
Yeah, of course. I wouldn't just put them any old place! The same can be said for "return".
Not every new line is the end of a statement. When you put a semicolon you state that this is in fact an end of a statement. You can obviously parse with your eyes to find that out on your own but this is one small magical character to tell you that you likely do not need to look any further, this is in fact the end of a statement.
&gt; ...and don't do it because it's "safer". I do it because it's safer. Know why? *Because it's safer!* :-) OP's article linked to Schlueter's article that went over some of the scenarios where \n will *not* terminate the line. One of them is: &gt; The next line starts with [, (, +, *, /, -, ,, ., or some other binary operator that can only be found between two tokens in a single expression. Are you going to remember those every time? Schlueter didn't even list all the possible operators that would cause the problem. He basically said "etc". Don't make it easier for silly mistakes to happen. Make it *harder* for silly mistakes to happen.
My last comment got alot of downvotes so I will explain what I think is wrong with this discussion. I see most comment assume we code in an environment where the whole team (or individual) is writing perfect code and follows all best practices, but unfortunately for me I don't code in such environment. My team follows the [airbnb coding guidelines](https://github.com/airbnb/javascript#semicolons) but I was asking myself: why would I use semicolons? I was hoping I could find a comment of someone who can convince me to stop using semicolons... but the reasons not too use it are the same for me to convince to use them. So it's all about preference for me. 
http://dilbert.com/strip/1994-06-08
That's one thing I definitely wants to implement man, having tons of fun messing around with it.
**Finally** a topic everybody can "contribute" to! Much easier than the "technical stuff", which requires way too much knowledge and thought and effort. And the best part: Whatever you say, you are always right! No test that can prove you wrong, you find enough citations for whatever you feel like! /s . **[Parkinson's law of triviality](https://en.wikipedia.org/wiki/Parkinson%27s_law_of_triviality)** &gt; Parkinson's law of triviality, also known as bikeshedding, bike-shed effect, and the bicycle-shed example, is C. Northcote Parkinson's 1957 argument that organisations give disproportionate weight to trivial issues.[1] Parkinson observed and illustrated that a committee whose job was to approve plans for a nuclear power plant spent the majority of its time on discussions about relatively trivial and unimportant but easy-to-grasp issues, such as what materials to use for the staff bike-shed, while neglecting the non-trivial proposed design of the nuclear power plant itself, which is far more important but also a far more difficult and complex task to criticise constructively. &gt; &gt; The law has been applied to software development[2] and other activities. The term "bikeshedding" was coined as a metaphor to illuminate Parkinson's law of triviality; it was popularised in the Berkeley Software Distribution community by Poul-Henning Kamp[3] and has spread from there to the software industry as a whole. and &gt; There are several other principles, well known in specific problem domains, which express a similar sentiment. &gt; &gt; In the context of programming language design, one encounters "Wadler's law", named for computer scientist Philip Wadler.[7] This principle asserts that the bulk of discussion on programming language design centers around syntax (which, for purposes of the argument, is considered a solved problem), as opposed to semantics. &gt; &gt; Sayre's law is a more general principle, which holds (among other formulations) that **"In any dispute, the intensity of feeling is inversely proportional to the value of the issues at stake";** many formulations of the principal focus on academia.
Exactly. Just get Greensock (GSAP) it's much better anyway. Edit: OP has a point tho'. CSS animations suck, unless you keep them very simple.
&gt; Just get Greensock (GSAP) it's much better anyway. Could you elaborate? Always looking for constructive criticism. 
It's the same model as MySQL? 
Which points do you specifically disagree with? "The worst" is tongue-in-cheek but they're also all correct.
And how is that different with the case where you use semicolons everywhere, and forgot the exact same one?
If you have a linter that will catch those cases, then my opinion goes back to neutral. Can you point me to the linting rule that catches those?
Oh I liked what I read but they were all biased :) They didn't show what could have been improved in the CSS spec but that there is a library (shameful self promotion) which handles it better for you.
The point is I don't think these things can or will or even should be improved in the CSS spec (with the exception of individual transform properties - which apparently is on the way and I do mention that) Do we need physics in CSS? Input tracking? Not really. And yes this library will handle that for you, if you want it.
In reality, the "feature" that makes semicolons "optional" (in some cases the lack of a semicolon will lead to ambiguity) was the idea that programming is hard, so for people new to programming could be helped by making the semicolons they are sure to leave off as optional. The "legacy" notion has nothing to do with why they are optional, and this design choice is yet another language feature that adds to the reason people look poorly on javascript. ECMA5 strict mode was created for a reason.
&gt; Array.from(Set(myarr)) This didn't work for me. I just got a new a copy of an array with the duplicate objects.
I couldn't stop using semicolons in JS if I tried. It's too automatic. And I prefer it with it.
As someone studying music, the fact that the scale doesn't return to the tonic bothers me a lot. :'( Nice work though, mate. Been thinking of making something like this for myself. EDIT: Hold the note so long as the key is pressed down, then stop once the key is released. Will make playing more natural. 
Can you post your gulpfile?
Here it is: https://gist.github.com/anonymous/c0a2f7ee8e5967f77cd2
Windows 7 64bit Yes, tried killing all related processes, but it didn't help.
I find it extremely interesting that in almost all instances of something like this being argued, where the consensus is split, the opposition will always be the loudest. Had the article been pro-leaveSemicolonsOff you'd have a ton of developers calling the author mad, and stating all the reasons why you SHOULD use them, as apposed to why it's OKAY to leave them off. Every passionate developer is has a tiny bit of neckbeard in them. 
Isn't the correct comparison something more like: By morning the night's fog had left only hoarfrost turning into dew on the heights, but in the hollows the fog still spread its milk-white sea Nothing could be seen in that hollow to the left, into which our troops had descended and from which came the sounds of gunfire Over the heights was a dark, clear sky, and to the right-the enormous ball of the sun Far ahead, on the other shore of the sea of fog, one could make out the jutting, wooded hills on which the enemy army was supposed to be, and something was discernible To the right the guards were entering the region of the fog, with a sound of tramping and wheels and an occasional gleam of bayonets; to the left, beyond the village, similar masses of cavalry approached and disappeared into the sea of fog In front and behind moved the infantry The commander in chief stood on the road out of the village, letting the troops pass by him Kutuzov seemed exhausted and irritable that morning The infantry going past him halted without any command, apparently because something ahead held them up 
Yeah. It’s in the form. Still only borders the input element. &lt;body&gt; &lt;h1&gt;Number Test&lt;/h1&gt; &lt;form action="numberTest.html" method="get" id="numForm"&gt; &lt;label for="num"&gt;Number: &lt;/label&gt;&lt;input name="num" id="num" type="number" min="0" max="100" step="1" value="0" /&gt; &lt;input type="submit" id="submitNum" /&gt; &lt;/form&gt; &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"&gt;&lt;/script&gt; &lt;!-- 2.1.4 is current --&gt; &lt;script type="text/javascript"&gt; $(function() { $('#num').on('change', checkNumber); $('#numForm').on('submit', function(e) { e.preventDefault(); console.log('submit?') }); }); var checkNumber = function() { console.log('Checking Numbers'); var numInput = $("#num"); if (numInput.val().match(/(^\d+%?\s*$)/) == null) { console.log('Invalid! Stop Right There!'); numInput[0].setCustomValidity("Input must be a number!"); $('#submitNum').click(); } else { console.log('Valid! Go, Team!') numInput[0].setCustomValidity(''); } if (!($('#numForm')[0].checkValidity())) { $('#submitNum').click(); } return; }; &lt;/script&gt; &lt;/body&gt;
Ah I get ya. Yeah fair enough - I did think it'd be a bit shitty of me to just list a bunch of things that were wrong with CSS transitions without providing any solutions though, and I made this framework to be those solutions. But I do take your point, and will consider it next time I write a blog post.
There are clear rules for commas in English, yours are not adhering to those.
I didn't mean to insinuate that Popmotion was bad. In fact, I really like the .calc functions. I think I first tried them when the library was called somethingsomething Red? But Greensock has the most powerful timeline that I've used. I can't tell you how important that is for me.
Yeah Redshift, them good ol' days! I made a Sequence class to tackle this that handles tweens, physics and custom callbacks, but it isn't quite the scrubbable timeline you imagine as it has to handle all kinds of non-animation things. Popmotion is more for interface elements whereas Greensock obviously shines for longer, pure animations, but I should look into a Tween-only timeline soon. Anyway thanks for your feedback man, I take everything on board.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/webdev] [\[Help\] My gulp ecosystem locks some js\/jsx files until machine reboot](https://np.reddit.com/r/webdev/comments/3wdysx/help_my_gulp_ecosystem_locks_some_jsjsx_files/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)