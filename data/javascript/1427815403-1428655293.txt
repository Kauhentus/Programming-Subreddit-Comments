Of course there is. Most redditors trip over themselves when Microsoft speaks and are ignorant of Microsoft's history. Look at the downvotes as evidence of this. "IE7 is the Firefox killer!" from years ago. Then it was, "IE8 is the Chrome killer!" Don't make me laugh. I'm not a fool.
Your staunch opinion and 2006 graphics are really swaying me. 
&gt; Why would anyone pay that much for a js library Ignorant Project Managers, Bad Programmers. I have both of those in on my dev team.
Read my other responses and you'll see why it's a wasted effort. Then wait till the end of the year when Windows 10 and Spartan really are out and then let's do our tests.
Um, no. Spartan is a beta or alpha version on an unreleased version of Windows. Get your head out of your ass. I may be an ass but I'm not stupid. We've gone through this all in the past. This is nothing new. We had these same threads back in the days of IE7 and every release since.
The exact same thing ! I plan to make a couple of other musical libraries like this one that I will use to do algoraves using this site (beware: long beep) : http://studio.substack.net/
Sounds like you *want* to stay in a world where IE9 is installed on every PC and you have to go uninstall the Ask toolbar from your mother's computer every other week. 
Uh. Web standards are written and voted on by committee and don't become part of the spec until there are at least two complete implementations. Any browser vendor can implement whatever they want but if no other vendor wants to go along then it won't become part of the standard.
http://js.syncfusion.com/demos/web/#!/azure/gantt/defaultfunctionalities Syncfusion has a community license available where you can get the script for this. 
Show me results from something other than a lab setting.
You sound like an idiot but you always have.
WebStorm is really an awesome product. Love how they manage to keep up with a fast moving language and ecosystem (not easy to do)
Okay, go hit up remote.modern.ie (or better yet, fetch the Win10 preview build and eliminate the lag of remote) and find some Unity3D game, see how it feels. 
The problem is Chrome is so prevalent developers can get away with using its nonstandard features.
Wasn't there something recently about videos? I wonder if that one worked out well.
Then it's really fascinating. That's a massive massive performance improvement (assuming they aren't cheating).
Google moves forward without waiting and I am glad they have. Look at what happen with SPDY. Google moved forward, the standards finally caught up, Google switched to the standard HTTP/2. Not sure what else people could ask for, IMO. BTW, if you look at any of sites that measure standard adherence and functionality Chrome usually comes out on top. Web components, service workers and web workers is the big ones the other browser vendors need to get going on. As far as I know MS has not committed with Spartan. They flag as under consideration.
There's also some desire to have some tests that are less representative of what JS is on the web today but what we suspect people might do in the future; for example when the V8 benchmark was written it was far longer lived scripts than almost anything on the web. Of course, V8 doesn't contain anything that is more representative, and nor does SunSpider really.
What tool do you use to generate the reports. They look so cool, like from the 70s :) 
To be fair, Web Components is a slightly odd case — there was lots of waiting for feedback, waiting, waiting, waiting… There was general agreement it was the right approach at the high-level, and eventually after years of waiting for any other real implementation feedback it came only after it had shipped. Ultimately partly this is down to resources (the Chrome team is only exceeded in size by the IE team, as far as I'm aware, and the latter are still to some extent playing catch-up after IE6), but it's hard to know what to do. Do you wait indefinitely or do you just ship?
You know, most of those attributes already exist in HTML5: &lt;input type="text" required="required" maxlength="99" pattern="[a-z]{3}" ... /&gt; Most of the validation is automatically done on the client-side too.
I liked the style guide. A lot. I try not to use inline if() but the rest I tend to agree on. There are parts that do not really deal with style, they are more like specific patterns (such as string concatenation) that I tend to manage using templates rather than inlining stuff. I've been trying to use *_this* instead of *self*, but as a long time user of underscore/lodash I keep typing *_.this*
Dont think of it as a career change. You are merely expanding your skills as a software engineer.
Yes, I do know, but... [current support](http://caniuse.com/#search=form) specially on mobile is very sketchy. I *wish* we could rely on that but the truth is *at this moment* we cannot count on native support for that.
The downvotes are evidence that people think you're being ridiculous. There's no conspiracy theory. People just don't like your attitude.
I made switch from CakePHP -&gt; ExtJS about 4y ago. Was a $0 change when I took the job but it's had more growth potential since. I didn't know Ext when I took the job (employer knew it.)
I'm happy for IE team. Better technology is better for everyone, including the the competition. But come on, numbers lie all the time.
I think it's a fair distinction to make. If tests are predictable, then it can be possible to game them. For example, suppose one test is to see how long it takes to compute the square root of 2. The expectation is that the candidate will use some general algorithm for computing the square root of any arbitrary number. But a candidate could also game this system by coding in a special case like: function sqrt(n) { if (n == 2) { return 1.414; } // algorithm for computing general answer }
Cool. Try it and let me know if it works for you.
Typescript 1.5 has been released already?
I had to make a projects.js file containing your markers, as a mockup of the actual ```projectsService.projects``` http://bl.ocks.org/amenadiel/83a4eda7ee36c312c7a6 Remember that, once the markers are inside a cluster, you won't be able to click on them individually. 
About as fast as Safari is on Windows.
Yeah but IE11 has memory leaks when it comes to data blob generation, try running this jsperf on IE11 more than once, then try to browse the web after getting the memory errors. You have to completely close the browser to bring it back, in fairness I'm doing something that browsers were never intended to do really but it's an interesting comparison none the less. http://jsperf.com/javascript-multi-threading/3 
English only, please.
It's mostly done. There should be a beta soon. https://github.com/Microsoft/TypeScript/wiki/Roadmap Not closed/merged yet: * ES6 Modules * ES7 Decorators
Yes, we could. Not for all of the validations we have, but for some we could indeed. We did, in fact, think about it and discuss the options. In the end, we decided that that would mean some validations set up one way and some others in another way. As we wanted to facilitate the possibility of adding or modifying some of the validations by our backend people without needing our help, we thought it best to make it uniform for all validations. Also, the native validation is not particularly good, not only because of support. Our UX department had their own requirements on how erroneous fields should be treated so... Again, I'm not saying this is the best way. Feel free to use native HTML5 validation if it works for you. We had various goals and some meant doing some sacrifices. Such is life.
Look at spectral-norm numbers. They are not the same in IE11 and Spartan. Not even close.
Dat infinite throughput. Really, though, it's just a timing problem on the part of the benchmark. Javascript timers don't have sub-millisecond precision.
&gt; ES7 Decorators ah, I'm guessing this the AtScript influence. 
Please refrain from personal attacks.
Hi /u/givanse, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `givan.se`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [givan.se](/search?q=%28and+site%3A%27givan.se%27+author%3A%27givanse%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|5|63%
Hi /u/tregoning, thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `jt.io`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [jt.io](/search?q=%28and+site%3A%27jt.io%27+author%3A%27tregoning%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|5|100%
Same accuracy, faster algorithm. Looks like a real optimization. The problem arises with the loose expectations. [Precomputation](http://en.wikipedia.org/wiki/Precomputation) and [inline expansion](http://en.wikipedia.org/wiki/Inline_expansion) are valid optimizations. I would consider this "gaming" if the algorithm only worked within the benchmark scenario and no real-world scenarios.
We used the [constraint validation API](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms/Data_form_validation#Validating_forms_using_JavaScript) like this to get the native validations working with our custom error display: var patternError = 'Please enter a valid '+this.title+'.'; if (this.input.validity) { var is = this.input.validity; if (this.input.validationMessage) { if (is.patternMismatch &amp;&amp; !is.typeMismatch) { errors.push(patternError); } else { errors.push(this.title + ': ' + this.input.validationMessage); } } } else if (this.input.pattern) { var pattern = new RegExp(this.input.pattern); if (!pattern.test(this.input.value)) { errors.push(patternError); } }
I don't even know what my point was, but it worked, I got karma!
Tis pretty cool, would like to see possibly some sort of non-touchscreen browser fall backs for pinch zooming and rotation though (unless they're in there just not explained?). 
&gt; a higher order function is a function that takes a function **as an argument** Still pedantic. With the availability of lexical scope you don't need to pass a function into another function. A function referenced (internally in another function) as a closure achieves a near identical result except that it is a bit more efficient at execution time.
&gt;With the availability of lexical scope you don't need to pass a function into another function. A function referenced (internally in another function) as a closure achieves a near identical result except that it is a bit more efficient at execution time. I'm not sure how you're attempting to modify my statement; are you saying that a closure that captures a function is effectively a higher-order function?
I understand your point, but I don't think it applies in this case. To just look at the example where the square root of 2 has a fast path while all other numbers take the generic route, that's not an optimization unless you know in advance (from the source of the benchmark suite, for example) that the number 2 will be a common input. If not, well, branches aren't free, so you've made the method slightly slower for every other input.
thank - you very much for your advice :)
A bit buggy on iOS 
When the only benchmark available is something like this, yes.
Yes, and .... expanding his skills is a thing he will have to do more or less steadily, without end, if he wants to thrive in this career. 
You are right in that the examples, as you have written it, will produce the same output. But the code is not identical and closure does not solve the same problem as higher order functions (or first class functions if you will). One integral part is missing from your code: reusability. In the latter example, you can reuse `lowerCaseLastName` (which should have a different name in this case) to fetch the lower cased first name instead of the last name. Your code is equal, in the same way that this code is equal: var a = 1; function add2_1 () { return a + 2; } // versus function add2_2 (a) { return a + 2; } Which is clearly not the same.
Interesting, so is it supposed to be a web component frontend framework tied with a meteor-like backend? Also, if you're propagating changes to all the clients, wouldn't that mean that a single change from one user would fan-out to all connected users? Wouldn't that impact your server's performance?
why wouldn't everyone get PhpStorm then? are these missing features really that resource intensive or did I wake up in the 90's?
Looks really cool! Glad you have an option to disable inertia. I can see most use cases not wanting it, but a cool feature none the less! Haven't tried it on mobile yet though.
Well, it would only be one event broadcast on the server. The clients are connected via WebSockets and listening for that one event. The impact on server performance would be very minimal.
I'm seconding a call for non-touchscreen fall backs.
Ok, let me be more precise in what I mean by reusable: reusable in different ways with different passed inputs, instead of just bound to a value in the parent scope in which it is declared. &gt; Your code examples are a flawed comparison because you are changing the scope of declaration for variable a, which is an unrelated conversation. Maybe the use of the same variable name was unfortunate, but the example shows two different ways of doing it (as tried to illustrate by calling the functions `add2_1` and `add2_2`), not necessarily something that happens side by side. And it doesn't change any of the scope (as javascript has lexical scope, you can't change scope as with dynamic scoping (unless you do `eval` variations /`with`/`new Function`)). The parameter `add2_2 (a)` would do a new declaration of a new variable named `a` in the scope of the function `add2_2` instead of the global scope in this particular case. This is called shadowing, the newly created `a` doesn't resolve to the same variable as the first `a` during a "LHS" look-up. &gt; The only functions that are not reusable are immediate invocations Following the pedantic thread; this is not correct. You could have a immediately invoked function with a name (which is declared in the functions scope) which can be called inside it's own body. This is often used in recursion to avoid possible re-references of variables to functions. I.e. (function myNamedFunction () { // some where down the line setTimeout(myNamedFunction, 1000); }()); Closures isn't an alternative to passing arguments to a function. Closures is a very nice tool for using with functions, but it can't replace your API. The two aren't tools used to solve the same problem. 
I like it but I wish it had better support for Ember JS.
I appreciate that you provided a source. I didn't know that they did that already and, while I assumed they did once I thought of it, now I have proof. On the other hand, you could've said it better. It sounded like you were just correcting the guy's obvious sarcasm.
Oh I know I'm just lazy. Just wondered if anyone knew of any presets or anything. 
Yup - [the 2 extensions the angular team had made to traceur](https://docs.google.com/document/d/1uhs-a41dp2z0NLs-QiXYY-rqLGhgjmTf4iwBad2myzY/mobilebasic) were annotations/decorators and run-time type checking. Once TypeScript was willing to add those in 1.5, it was a viable alternative.
It's because of Chrome's process-per-tab design. It's great for not crashing your session when an individual tab acts up but that model starts breaking down when you have more than a few tabs open. Firefox is so much better when it comes to memory usage. 
I think there's 2 separate things here: - supports the 1.5 syntax in the editor experience - supports 1.5 with the built-in compiler Since most of the 1.5 changes are supporting ES6 (AFAICT) and WebStorm has had ES6 editing support for awhile (a very pleasant surprise when I first started using traceur), that should have been low-hanging fruit. To get it to work with current WebStorm 10 means pointing it to an external compiler (like you had to with WS9). Full 1.5 support will mean not having to rely on that external compiler. It might be the same situation with 1.6 since traceur has had generator and async/await support for years and I think WS9's editor handled it fine, so the WebStorm 10 editor might support it quickly (maybe even already does?) but their compiler will likely have to lag behind a little, waiting for 1.6 to RTW if nothing else. :)
Apologies if this seems nit-picky, but while WebStorm definitely lacks those PhpStorm features, it's not frontend-only, and works beautifully with node. I haven't used WS with a meteor app yet, so I'm not sure if it has any special support for meteor's use of MongoDB or not.
Haven't tried it, but a Google search turns up this project which seems like it'd be useful when switching: https://github.com/ShawnMcCool/PHPStorm-SpacePeacock
[**@pemrouz**](https://twitter.com/pemrouz/) &gt; [2015-03-19 19:11 UTC](https://twitter.com/pemrouz/status/578634826560995330) &gt; Thanks @leeb! I agree with your thoughts. Noted https://github.com/pemrouz/ripple/issues/18. Will address next refactor. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Because PHP is dying out for one and the Apache server and db stuff is a different ballgame from the JavaScript/front-end centric Webstorm.
actually i understand everything up til the 4th line from the bottom with the &gt;&gt;
TypeScript: The beginning of the end.
Interesting. Thanks for the correction! :)
If I have PHPStorm am I missing out on anything?
I don't mean to argue, and frankly, I haven't posted a link yet, but I looked through both links (reddit rules and /r/JavaScript guidelines) you provided and don't see anything about diversity of domains. Can you either reference the specific item, update the guideline, or change this message (I've seen it twice tonight) to reflect where this is actually coming from, so that we can understand and comply? Thanks! 
It's been a long time since i've seen tge expression "man up" on reddit
My file saves take over 10 seconds. 
It does. Thank you.
Microsoft should work on their IE debugger before they start "contributing" to javascript.
Not sure about sublime specifically but it does have like 3 different presets. Mac/windows and something else I think. The up sides to it are worth your time rebinding. 
If you have the new PHPStorm, no. PHPStorm is a Webstorm with PHP support.
I wonder how fast Spartan runs on Linux. ...Wait...?
Yep and judging by the amount of websites built in PHP , it will take a really long time if ever. 
I'm more than thankful! Managed to make it work, had some problems with pasting the code, after that with linking the markers to the projects, but now everything is working more than good. Thank you!
&gt;"All examples also conveniently leave out any real API communication." As far as I can tell this is like the dirty secret of Flux -- that it makes dealing with external APIs absurdly complicated compared to how it would be with something like Backbone models and collections. For instance: I'm supposed to have actions like this: MYMODEL_LOAD_STARTED MYMODEL_LOAD_SUCCESS MYMODEL_LOAD_FAILED But then what if I have 10 different types of models and I want to CRUD each plus a bunch of other custom methods tacked onto the api. And now how to handle errors as well? It just seems to get out of hand. If I'm wrong I'd love to know but I've just spent the last day looking for a good example of how to do this and I haven't seen it yet.
Off the top of my head, the two most important ones are: 1. As developers stop testing in other browsers, users will be back to not being able to pick a browser of choice, as many websites won't work on it. On desktop, it's not this bad yet, but e.g. Firefox for Android has many compatibility problems (e.g. with Google products). When sites are tested in multiple browsers, the odds are increased that they will also work in untested browsers. (Although admittedly, I don't think it's feasible for new, from-scratch rendering engines will appear now. Too bad Opera did not release the source code of theirs.) 2. Bugs in such a dominant browser will start to become the standard. We've been there before - IE6 was terrible, but developers adapted their websites to work especially there. This resulted in Firefox, apart from trying to support standards, _also_ had to accommodate for weird rendering on IEs part (as did, then, Chrome and newer versions of IE). Resulting in a "quirks mode", where browsers detect that sites relied on odd behaviour and then rendered differently.
Well, you were given a function that takes a number and returns a nicely formatted string with commas, so the hard part has been done for you! You just have to plug in the number and print what the function returns. If you don't know about functions in Javascript, read more here. www.w3schools.com/js/js_functions.asp
Where in that line of code do I punch in the number? 
I'm not interested in development, I have to take this for my science/math credit and I'm trying my best but I just don't understand. I see I'm missing the " in that line of code but that wasn't my question...any chance you want to help me with what I asked?
Thank you for this information! I already had contact with Twitch.tv Support and they said it's not malicious and a fail coding of this google-doubleclick advertisement. And since it's google, and I fully cleaned my Mac and reinstalled everything, it shouldn't be dangerous.
Semi-related: http://utf-8.jp/public/aaencode.html
 function formatNumber(num) { return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") } document.write("The number 987654321 formatted with commas is: " + formatNumber(987654321));
&gt; I can call digit_name(3) for example, but in the outer function we never specified we expected a parameter. How is the number 3 carried to the inner function ? What is the generic syntactic rule for function parameters ? What is the purpose of the seemingly dangling last pair of parens ? The last pair of parentheses are a function call. They are invoking the function expression that precedes them, and the return value from that call is assigned to `digit_name`. This is an immediately invoked function expression (IIFE). `digit_name` equals whatever the outer function returned, which is the inner function. When you call `digit_name(...)` you are calling the inner function. The outer function no longer exists. (However, a copy of its execution environment as it existed at the time of the call sticks around, associated with that particular instance of the inner function.) &gt; I tried, and so far failed, to make this more explicit by forgoing lambdas and using named functions. How would you do this ? In JavaScript parlance it's more common to talk about anonymous vs. named functions. The term 'lambda' implies some special syntax that a language supplies for creating anonymous functions, but the syntax in JavaScript for anonymous functions is the same as that for named functions. Anyway, here is one version that names the things that were anonymous: var digit_name_maker = function() { var names = [ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']; var inner = function(n) { return names[n]; }; return inner; }; var digit_name = digit_name_maker(); There are a variety of ways of writing this, depending on whether you want to use function expressions or function declarations (or even named function expressions.) 
Personally I'd do something like: &lt;div id="num"&gt;javascript disabled&lt;/div&gt; &lt;script&gt; [document.getElementById](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById)("num").[innerHTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML) = [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)(987654321).[toLocaleString()](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString); &lt;/script&gt; 
for anyone interested in how that regular expression works any why it's broken: http://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript
Hah. I somehow don't think they will read any of those though. When your first reaction is to post your question to Reddit because you don't want to learn...
No, it compiles mid-rendering, more like Khan academy's CS program, or Bret Victor's live coding/interaction demos. Essentially if you were building a game, you could edit the code and rebuild while playing to test out new physics rules or whatnot. Or in webland, rewrite modules and hot-load the changes to fix bugs that are several interactions deep in a page.
You can do what AmokJS does in DevTools (baked into Chromium/Chrome) and, with varying degrees of success, many of the editors that connect over V8's remote debugging protocol (like Brackets or WebStorm). It sounds like AmokJS is trying to leverage this existing functionality to make something that works efficiently across different editors. Supposedly with DevTools' workspaces feature you can do that. You are supposed to be able to configure a workspace, then edit your file, and Chrome will auto-detect it and hot-swap the code. That's the promise. In my experience workspaces are very buggy. I can see value in having something that does this more reliably. Personally I use DevTools and just cmd+s/ctrl+s when I want to save. This still works to hot swap code, but I don't have to deal with all the bugginess of workspaces. 
Yes, I am complaining about Chrome - just because it helped the web move forward, doesn't mean that it can't do anything wrong anymore :) (In fact, this isn't even necessarily something Chrome's doing wrong, just an unfortunate situation the web is finding itself in.)
One inch closer to seeing the light. Thanks ! Thank you specially for outlining the phrase *immediately invoked function expression*. In hindsight, I think Crockford mentions this in his lecture, but I didn't realized it was [a distinct concept](http://benalman.com/news/2010/11/immediately-invoked-function-expression/).
But you are now saying Chrome is doing it wrong. Are you complaining because Chrome is able to create a lot of things faster than others or are you complaining because you think the things they create are bad? Remember, Microsoft did next to nothing for the web. It wasn't until Firefox came along that Microsoft reacted somewhat. However, Mozilla is a small company of about 60 people so their resources are limited. That is one of the reasons Google got involved in the browser business. Google funded Mozilla long before Chrome but they realized they could get more done themselves, hence, the creation of Chrome. While Firefox knocked IE, which held back the web, off its 95% market share down to about 70% on its own, Chrome implemented and pushed for so many of the great things now available to us on the web that Mozilla, up against Microsoft, would never accomplish on their own. What you, unfortunately, may be reading is that a lot of developers worry about whether their site works in Chrome, or not, before the other browsers and, in a couple of cases I've never been able to find, a site that only works in Chrome. I'm not sure those exist but only a bad developer targets a browser while a good developer targets standards. Even Google preaches this and actively supports other browsers (Google still funds Mozilla and even makes announcements about IE coming out with new stuff). So I don't understand what you mean when you say Google is doing things wrong. If anything, it's some developers doing things wrong and Google has no control over that.
I'm interested how it handles browserify, uglification and things like that.
Is this an April Fool's joke?
I read this as ArmokJS and thought somebody made a JS modding tool for Dwarf Fortress, should have known better.
it's not bad if what you want to do is practice using the MEAN stack. It is bad if you're actually using it for a solution because you think it's the right solution. :-D
I could say you should use the right tools and go minimal, but the more reasonable option seems to be to use whatever grows your personal experience. These stacks will not survive the tooth of time anyway and you won't be working with the same code in 5 years no matter which frameworks you pick right now. Pick what interests you, suck experience from it, move on.
I would say that using some JavaScript framework is a very good thing. It allows you to create very user-friendly interactive searching and filtering that some similar sites miss. Keep in mind that there's plenty of libraries other than AngularJS you could use for the job. Experiment with different options and find something you like. Using MongoDB will work but isn't always the right choice. Adding search with multiple criteria combined with categories, user accounts, reviews and such, a relational database might be a better option. Finally, I wouldn't care too much about SEO for now. You always need a functional site first.
PHP is actually experiencing a small renaissance. The language is getting a lot of updates and performance boosts, there's Composer, there's Laravel (PHP on Rails), and tools like Forge and Envoyer. The biggest threat to PHP is that most popular stuff uses old versions. Wordpress uses 5.2 IIRC. 5.2 stopped being supported in 2011!
Zendesk has an open source library that does just this. https://github.com/zendesk/cross-storage
&gt; it is unfortunate when there is only one browser that people are testing against - especially when they are using e.g. only -webkit-prefixed CSS But this is not true. No web developer worth his salt would do such a thing. Complaining about the whole thing based on a few bad apples is pointless. They won't be in this business three years from now anyway and I'm betting it's done by clueless amateurs. In my 10 years of running a web dev company, I have never seen that and only hear about it on reddit and without links to such things. btw, Chrome will no longer create any new vendor prefixes so the point, as far as Chrome is concerned, is moot. I don't know what you mean about Firefox or Facebook. And your point about users making Chrome a de facto standard doesn't make sense to me either. Chrome doesn't have a monopoly on the web.
&gt; What is the purpose of the seemingly dangling last pair of parens ? Immediate invocation. The function executes the moment it is interpreted and if it is associated with an assignment expression the reference identifies its type not as a function but as the value returned from the function (which in this case is still a function). &gt; What is the generic syntactic rule for function parameters ? Parameters, or rather function arguments, are a named reference like a variable declaration and follow the same syntax requirements as a variable name. &gt; How is the number 3 carried to the inner function ? You example code would be executed as: `digit_name(3)`. It returns a function that expects to receive an argument. The flow control is that the outer function executes immediately and returns an anonymous function. Since the anonymous function is the return value the variable `digit_names` thinks it is literally assigned that anonymous inner function. The only real trick here is the `names` variable, which survives in memory because it is referenced by the inner function even though the outer function and the associated scope no longer exist. &gt; How would you do this ? I would make this more explicit by changing what you use as a closure: var names = [ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine' ], digit_name = function (n) { return names[n]; }; This code is more explicit but it also pollutes the global scope with an additional reference.
github repo is [here](https://github.com/BrockBeldham/threejs-solar-system-experiment)
The author should check out Etherpad as the editor for the application, that way multiple authors can collaborate on some code at the same time..
disclosure: self-submission
 var c = 'constructor'; console.log(c[c][c]('return 7 * 5')()); // 35 That's basically the same as: console.log(new Function('return 7 * 5')()); // 35 There is also setTimeout/setInterval/setImmediate: setTimeout('alert("ohai")', 0) https://developers.google.com/caja/ http://www.adsafe.org/ Some more: http://www.slideshare.net/x00mario/es6-en
There's also creating a DOM node and adding handlers. And a bunch of other stuff. Basically, you can't prevent that. Don't allow user inserted JavaScript in your pages. 
Nope, it's a repost though
You can find Sublime Text inspired keymaps for WebStorm on GitHub (e.g. https://github.com/ProLoser/IntelliJ-SubliMate)
Isn't this just hotloading (webpack)? Example here: https://gaearon.github.io/react-hot-loader/
And things are going to be even better - check info here: https://github.com/go-lang-plugin-org/go-lang-idea-plugin
Still have a interest? I can help
Very nice work ! It would be nice if we could select every planets/sun and centering the view on them.
Could you provide some reference about DOM/handles and a bunch of other stuff techniques ? 
Amazing work!
this is in my "mental road map" for this project
I was bored in a meeting.... enjoy. https://jsfiddle.net/f3p2mgg0/
It is absolutely a security concern. Read this article. http://techcrunch.com/2015/03/31/google-says-5-of-web-browsers-have-ad-injectors-installed/?ncid=rss&amp;utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+Techcrunch+%28TechCrunch%29&amp;utm_content=FaceBook#KehKi2:O0u4
You are wonderful
I'm not sure if I understand exactly what you're trying to do... but perhaps this can help you out: function statistic(rolls, percentage){ var successfulRolls = 0; for(var i = 0;i&lt;rolls;i++){ var randomPercentage = Math.round(Math.random()*100); if(randomPercentage &lt;= percentage){ successfulRolls++; } } return (succesfulRolls + "/" + rolls); } statistic(10, 50); The function *statistic* takes two parameters, one for the amount of seperate *rolls* you want to go through, the second is how much chance, in *percentage*, the roll has at being succesfull. It then returns the amount of succesfull rolls as a string, showing how many attempts were succesful in hitting the right number/percentage - though you can obviously just change this into returning the plain number. So if we call the function, tell it to roll 10 times with a 50% chance of success each roll, as shown above, we can expect the result to be: &gt;5/10 
Originally I tried to mangle to Emoji, but it turned out that they are illegal JS identifiers. function log(🌵){for(var 🐧=0;🐧&lt;🌵;++🐧)console.log(🐧)}log(10); I kinda wish JS7 or whatever would allow that to happen
I'm not really sure if there are alternative ways to loop that speed up the process significantly. The *while* and *for* loop are fairly identical in speed, everything else such as **jQuery**'s *each()* is guaranteed to be slower, even if just a tiny bit. So perhaps the loop isn't the right place to try and gain some performance speed. Maybe it would be possible to call the function less often, to combine some of the percentage calculations? Perhaps you could even look into the speed of the *Math.random()* function, you could generate the range of numbers *(percentages)* beforehand, so you could select them with some other *semi-random* function afterwards - but perhaps that becomes too predictable when repeated enough. I'm not even sure if it would be a lot faster either, I've never had to write such code - but it would be a possible direction to look in. Just sharing some ideas, best of luck with your project!
I just think that a framework like angular has quite a bit of overhead. For a small webapp you're better off with something minimal like backbonejs. If you know neither, then it may not make a difference because you'll have the overhead of learning everything anyway. 
http://www.codecademy.com/tracks/javascript
Sweet, thank you again very much for the help!
Meetings suck. And just a couple of reports, a final project and a presentation to finish up. Also, it's not homework, I am merely choosing to finish it off at home ;)
Well done! We just need asteroids and lasers to shoot them with!
zoom in a little closer, the asteroid belt is there, just a need ship and lasers.
Yeah, for me inertia almost always feels better when something's being dragged around the screen, even if it's just barely noticeable. However, it's not so great with something like a painting application or drawing a selection box so it makes a lot of sense to be able to disable it.
Are you running the Javascript before the list has been loaded, by any chance?
yes. it its loaded through the html page at the top &lt;!DOCTYPE html&gt; &lt;html lang="en-US"&gt; &lt;head&gt; &lt;title&gt;Admin Page&lt;/title&gt; &lt;link rel="stylesheet" type="text/css" href="admin.css"/&gt; &lt;script src="admin.js"&gt;&lt;/script&gt;
cool. Distances are to scale?
ahh i see. I moved the script sourse to the bottom of the html page and it works now. Going to make it a habbit to be putting the scripts at the bottom. thanks
There's a reason your "functional mixin" is overlooked. It creates new function objects for every method of your mixin. Your 'Extending Objects' Superhero does not.
Glad to help. You should also check out the onload event and such things. It allows you to load the script before content is loaded but delay execution. This should be a good start: http://www.kirupa.com/html5/running_your_code_at_the_right_time.htm
Wow. Pretty cool :)
Great idea and concept. I enjoy the fact that each planet has dynamic shadow. Regarding the asteroid belt --- are those "known" asteroid orbits, or are they just randomly generated in a general area? Also: Any plans for moons?
Yeah...and the teacher is doing a shit job. Looking at properly done examples on here helps me learn. Get off your high horse.
Nice, I made [something similar](http://people.df.uns.ac.rs/~dusan.randjelovic) for a friend couple of years ago. Its Jupiter and its moons, not in real scale and all but it was fun nevertheless. There are also controls if you get lost. And tech was X3DOM, would never use it nowdays though :) 
 addvalue = Number(input1.value) + Number(input2.value; missing a ) on the end, plus that line is repeating the line before it.
Press `Ctrl+Shift+J` in Chrome. This will get you the JavaScript console. You will see errors there, such as those /u/psy-borg described. Before continuing in your learning, dedicate one or two hours to use your browser's developer tools (such as the console). You will surely find benefit in doing so. Chrome's Developer Tools: https://developer.chrome.com/devtools (There are sections in that page with links to some videos and blog posts) Firefox's Developer Tools: https://developer.mozilla.org/en-US/docs/Tools
Relevance? Pretty obvious spam account if you ask me; link removed as spam on /r/technology, so sybalasa tries submitting at random other tech subreddits. 
Reduce the amount of repetitive task. Increase the amount of reusable code overall. Decrease the amount of new code that needs to be written. Follow Unix philosophy: Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams, because that is a universal interface.
100% agree, but if I put on my “leadership” hat this doesn’t seem compelling. The problem now is there are only a handful of developers in the company (out of many hundreds of developers overall) who can currently write the sort of code (e.g. Single Page App) the company is looking for. 
If the webpage is yours, easy... if(navigator.javaEnabled()) alert("Nothing to see./nJava not enabled on this browser."); If it's not, look into GreaseMonkey or TamperMonkey to inject scripts on page load.
He didn't include Pluto =( #NeverForget Love this! Might be cool to center the sky-sphere around the camera (disable z-buffer updating for the render, don't translate it with camera position) so that moving the camera doesn't seem so wonky.
It's a tough problem, because developer growth and progress is only really shown in code. If you see quality code, you know there was improvement. The thing is, developers are knowledge workers. You can't really quantify their skills, unless you can also quantify thoughts. Knowledge workers don't make the same thing over and over again. They use their thoughts to increase productivity, and trying to introduce some way of quantifying this can only reduce productivity. I'm sorry this isn't the answer you were looking for, but that's what I think.
No, none of the asteroids are known orbits, just 2000 randomly sized spheres placed randomly in a ring. They are technically inside the sun object and their orbit is caused by the sun's rotation (hopefully that makes sense). I was going to add earth's moon because I have its 3dmodel skin, but at this scale it would go largely unnoticed.
Most definitely the second one. The sizes are to scale the distances between objects however is roughly 1/4 scale. The scale distances between planets make the application impossible to use because you can't find planets.
Nice work.
 * str is a String * `str.split("")` creates an array, doesn't assign it anywhere * `str.reverse()` calls reverse on str, a String. Strings don't have a reverse function so its undefined * `str.join("")` calls join on str, a String. Strings don't have a reverse function so its also undefined You probably want something more like var arr = str.split(""); // do stuff with arr, an array...
nice work and very cool. since the real scale of the planets are so massively different, its still hard to find any of the smaller planets. Maybe add a menu on the side which lists all the planets and clicking each menu item centers the camera on that planet. Then you could put the distances at the correct scale and the user would get a sense of both scale and distance from each planet.
I'm still enjoying this series. This particular one leaves little room for discussion, which since you're writing a book, I guess that's a good thing.
awesome
Pretty awful site on mobile
Looks like it's to scale when comparing planets and the sun, but of course the distances are compacted. The Earth is about 100 suns from the sun.
You're also polluting the global scope with FirstReverse :) To my knowledge, the cleanest ES5 compliant solution is as follows. (function () { /** * Returns a {string} of characters from str in reverse order; otherwise null if not {string}. * @param {string} str * @return {(string|null)} */ var FirstReverse = function (str) { return (typeof str === 'string') ? str.split('').reverse().join('') : null; }; var olleH = FirstReverse('Hello'); }()); 
thats sick, but it could be optimized better as it runs slow af on one of my machines, on the other one though it looks amazing, nice work 
Works on iPhone 5! Nice work. 
 var reverse = function (str) { return [].reduceRight.call(str, function(a, b) { return a + b; }); } var str = 'foo'; reverse(str); // oof Looping the length of the string 3 times (split, reverse, join) is overkill. How about just once.
I feel a little bad, because it seems like you're actually trying to share a personal project of yours, and that project looks like it might be pretty neat. But you went about it not just by submitting something that looks like it's from a clickbait website, not just by fabricating a company, but also by making up an investment into that company? Hype about investment into a no-name company is the last thing I want to read on /r/javascript. Personal projects are shared here all the time. They don't always get the _best_ reception, as you discovered with the jquery joke, but it's a good place for honest feedback so if you participate here your personal projects are welcome. The irony is that from what I can tell the project works pretty well, or at least well enough for you to obscure what it is you're trying to share. Get a few upvoted comments here, clean up your clonezone repo with a Readme and so on, and submit that repo. I can't say you'll get showered with upvotes, but I at least want to know more. 
Semi-colon usage has decreased by 99%
There's a technique I used for a game to make asteroids more interesting. First, thanks to three.js's odd spheres, you want to merge redundant vertices (essentially any two vertices that vary by, for example, less than 0.01 along each axis). Then move each vertex along each axis by some random amount. Then "squash" them along one random axis by some random amount. It makes for some cool-looking asteroids, with very little effort.
http://esprima.org/
Your use of reduceRight is interesting, but what do you mean by "overkill"? In Chrome 41, your solution is around 71% slower than a split, reverse, join solution (see http://jsperf.com/reduceright-vs-split-reverse-join). Or putting that another way, split, reverse, join is a bit over 3 times faster! 
Tell your superiors that the production of widgets has increased 35%, SLOC per hour is now negative, and that you've gotten the time it takes to make a baby down to 6 months by throwing a team of Top Men at it. In all seriousness, this is fundamentally unquantifiable. All that really matters is the rate of delivery of features. You can't measure things like "features per month" because now two features are equal. Every metric in development is qualitative.
There are plenty of tools for static analysis of javascript. A few things worth measuring: - Percentage of code covered by unit tests (branch coverage is a good one) - Number of linting errors per lines of code - Code complexity - Copy/paste detection - Percentage of code executed under "use strict" Some less-precise and indirect measurements include: - Number of bugs reported per week - Average bug turnaround time - Site performance - Percentage of site downtime - Number of deployment rollbacks - Employee turnover rate - Employee promotion rate There are a lot of interesting ways to measure if the training is paying off for the company. At the end of the day, the company is asking "does this investment result in happier customers" and if they take the long view most likely they'll see that it will.
ah, thanks :) its also april fools, hence the click baity post lol will definitely share it in a less trolly way once a few of the kinks are ironed out
Just an FYI. Insulting a member of our community isn't going to inspire anyone to help you.
1) Learn functional programming. 2) Learn how to use modern javascript tooling effectively (build systems, linters, testing infrastructure) 3) And the most important tip of all: DON'T WRITE COMPLEX APPLICATIONS IN JAVASCRIPT. Write many small, simple modules that can be stitched together to form an application (while of course leaning on the rich and diverse ecosystem of modules you'll find on npm) Good luck!
This smells like homework...
You have entered the realm of the dark arts. I mean, if estimating is a dark art, what kind of ruinous magics is "developer skill" supposed to be? This is a chance to summon your legion of demons and dominate your persecuters. Embrace it. It really depends on the technical sophistication of your target audience, like doing a magic trick. You can come up with all kinds of numbers and spin it to your benefit. The last time I had to quantify code productivity, it was was for some contractors that specialized in valuing companies for bank loans. They didn't care at all about the BS levels of this stuff, since they made a ton of cash either way for each contract. So we used that ancient, abominable spell called SLOC, with their approval. I actually had a lot of pleasure summoning this fell beast. Sure, one could write a loop, or one could write out every single element of the data structure by hand for 500 more LOC or whatever, like back in the good old days when IBM thought this was a reasonable way to measure productivity. So completely meaningless. This is what they get for whispering that black tongue of metrics in these lands. 
&gt; But this is not true. No web developer worth his salt would do such a thing. That is purely speculative and anecdotal. Mozilla, on the other hand, [collected data](https://wiki.mozilla.org/Platform/Layout/CSS_Compatibility#Q_and_A). And they decided it was significant enough that they [felt forced to implement -webkit-equivalents](http://alistapart.com/article/the-vendor-prefix-predicament-alas-eric-meyer-interviews-tantek-celik). And yes, this specific issue won't be one anymore as browser vendors stop using prefixes, but it is merely an example to illustrate how a large user base causes harmful behaviour by web developers. The harmful effects can be felt there, they were felt on the desktop when IE6 was dominant, so I think it's entirely reasonable to hope the same won't happen with Chrome on the desktop. As for Firefox and Facebook/Gmail/etc: I meant Firefox for Android, sorry for that. On desktop, it's not that bad, but on mobile, Webkit is extremely dominant.
Why not conform to Leaflet's naming scheme? You'll have to query the data from the server somehow so you're probably going through $http or $resource. There's a transformRequest/Response property that you can use to transform the data to rename them with lat's and lng's, then back to your naming scheme on POST/PUT. Also, it looks like "lat" and "lng" seem to be the popular naming scheme from what I've seen in other libs, so why not follow the popular pattern?
I know, as everything is security, there is no 100% security, there is more or less security and it's degree of security is usually equal to the available effort spendable on the initiative/task.
I just had a quick look and they seem to be static analysis tool **but not SECURITY static analysis tools** (security focused static analysis tools).** 
why wouldn't those things be immediately obvious?
It's that at a lower level (and not specific to React, but for any js code)
It smells like ass
The infrastructure is there already. Adding a new music provider is not a big deal. I just curious because I haven't use last.fm before and if they provide an API?
Nicely done, good job! 
I made a script to paste into the console window. The script checks the value of the minute and second box and if they fulfill the condition it calls the doEvent and it clicks the button. var element = document.getElementById("thebutton"); function clickPLS() { var min = document.getElementById("thebutton-s-10s").innerHTML; if(min == 0) { var sec = document.getElementById("thebutton-s-1s").innerHTML; if(sec &lt; 2) { doEvent(element, "click"); console.log("NOW I CLICKED!"); } } window.setTimeout(clickPLS, 100); } function doEvent(element, type) { trigger = document.createEvent('HTMLEvents'); trigger.initEvent(type, true, true); element.dispatchEvent(trigger); } window.setTimeout(clickPLS, 100); I clicked the button on accident with my script... Apparently the script goes past the "Unblock" button so I only got the 58 s flair :&lt; But it works! EDIT: formatting and explanation. EDIT2: open console on chrome with Ctrl+Shift+J, paste the code and press enter: free win!
http://www.last.fm/api Or more specifically: http://www.last.fm/api/show/track.scrobble
Thanks for the links. Any idea where last.fm should fit into the current extension? I've just come up with the idea user enter something in the search box, and the radio will start...
Obviously just use lines per day, that will be the best approach. -- Management
Oh man, thanks thanks thanks!!!
Hmm these engines must be optimized to do that then... I updated to see if I could get it faster. http://jsperf.com/reduceright-vs-split-reverse-join/3 In Firefox, it's faster to do what you did, than use a while loop and concatenate the string...
I am going to take a look. I have done some medium projects with NodeJS before for a startup in a very much "learn it as I go" fashion so my knowledge has a lot of holes. Good opportunity. One recommendation: make a playlist for the tutorials and update it as you go. It took me a few seconds to find the first tutorial on your channel.
fiddle at http://jsfiddle.net/409gxzm6/
Another good and new one I've seen. Especially love the maturity of design and customizability. [PykCharts](http://pykcharts.com/)
Great video! Makes me want to explore react. 
thanks!
Is it only for small images? ;) Nah, seriously... It looks cool, but it looks like you have a typo in two of the filters. Can't do a pull request, but it's pretty easy... File: JSProcess/JsProcess.js: line 67 (GreyScale) - _pixelData[1+2] = greyWeight; //Blue + _pixelData[i+2] = greyWeight; //Blue File: JSProcess/JsProcess.js: line 86 (InvertColors) - _pixelData[1+2] = 255 - _pixelData[i+2]; //Blue + _pixelData[i+2] = 255 - _pixelData[i+2]; //Blue 
Given that the world has now given up and accepted that Javascript is "The Assembly For the Web", I'm not sure why we should be surprised at this...
because there is no engineering rationale behind making transpilers over sandboxed VMs for other languages.
I am not inherently opposed to the idea of languages that compile to Javascript. I use and advocate the use of SASS/LESS which sit in a very similar boat. However, the amount of them that has popped up over the last 2-3 years is extreme - there are dozens if not hundreds of these languages, and most of the time they barely offer anything except for not being Javascript. Many will die out over time when their authors jump over to the next fancy language, so the incentive to use them in anything serious is close to zero. So, the emphasis of my original post was not on "a language that compiles to JavaScript" but "yet another one of them in sea of languages no one needs".
I opened an issue so I wouldn't forget to fix it thanks again mate!
Would it not be more effective using pure React? What's the cost of the overhead having the two frameworks?
I found this: http://everythingfrontend.com/posts/studying-javascript-eval.html are there other ways ? someone have enumerated all way ? 
Was that recorded anywhere that you know of? Wouldn't mind seeing it.
You can use iframe RPC if you can wash the stink off yourself afterwards ;-)
http://www.folklore.org/StoryView.py?story=Negative_2000_Lines_Of_Code.txt
Sounds like leadership has found the best answer to the training question. I must admit, I like your Leadership. Truth is, training rarely does anything to improve developer skills, and they've figured this out. Now, rather than telling you "no" and looking like assholes, they've asked you to prove that it actually does something, making you the asshole when you can't prove it. Brilliant.
Why does every tutorial tell people to `npm install -g`? That's terrible advice. Install things into your project. Otherwise, you miss out on the whole point of npm.
This is fantastic.
&gt; That ship sailed a decade ago. iOS browsers = no plugins = nobody is ever seriously going to build anything on a platform that can't be installed on the #1 smartphone and tablet on the market. iOS and Android (which is the market leader and far more flexible than iOS) both offer the ability for apps to hook into browsers. If you install the youtube app on iOS then visit youtube.com to watch videos, you'll watch them on the youtube app. And even then, the mobile world is not the end-all be-all of web application development. 
Running the following script in your browser's console will click the button when there is less than one second left. (function(){ var tens = document.getElementById('thebutton-s-10s'); var ones = document.getElementById('thebutton-s-1s'); var hundredsMs = document.getElementById('thebutton-s-100ms'); var tensMs = document.getElementById('thebutton-s-10ms'); var button = document.getElementById('thebutton'); var timeToClick = 0; // setTimeToClick variable above to be the seconds on the countdown when you'd like // the button to be clicked. // // If you use 0 -- it will click the button when the countdown is under one second. // If you use 5 -- it will click the button when the countdown is less than or equal to 5 seconds. function getTimeLeft(){ return parseInt(tens.innerText + ones.innerText + '.' + hundredsMs.innerText + tensMs.innerText); } function clickTheButton(){ button.click(); console.log('Button was clicked with ' + getTimeLeft() + ' seconds left.'); } function checkTimeLeftOnTheButtonCountdown(){ if (getTimeLeft() &lt;= timeToClick){ clickTheButton(); } } function init(){ window.setInterval(checkTimeLeftOnTheButtonCountdown, 250); } init(); })(); 
This might help? [JSON Resume](https://jsonresume.org/)
Having used a few of these, I've found that it's better to just use vanilla D3. The off-the-shelf charts are great until you need to make one minor tweak that isn't supported. Then you're stuck attempting to hack it in in a disgusting way (assuming that's even possible, sometimes it's not). Of course the draw of using an off-the-shelf library is that D3 is very difficult to learn (IMO), but struggling through it for multiple weeks was rewarding in my experience.
Why? The DOM makes perfect sense for websites as it's semantic.
The DOM obviously does a great job for its majority of uses, however, it is also used to an increasing degree by applications which have little use of a semantic model. That's why there's plenty of work being done trying to circumvent the DOM. However, they are all still built on top of it. I wouldn't say that the DOM should be retired, but there should exist alternatives - developed with other priorities in mind. 
The usual caveats to quantifying code quality apply, but if you really need a number, I would expect [Cyclomatic Complexity](http://en.wikipedia.org/wiki/Cyclomatic_complexity) to go down, as developer skill improves. I'm sure there are other complexity metrics, but Cyclomatic is the one that comes to mind, and most languages have some kind of tool for measuring it.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Cyclomatic complexity**](https://en.wikipedia.org/wiki/Cyclomatic%20complexity): [](#sfw) --- &gt; &gt;__Cyclomatic complexity__ is a [software metric](https://en.wikipedia.org/wiki/Software_metric) (measurement), used to indicate the complexity of a program. It is a quantitative measure of the number of linearly independent paths through a program's [source code](https://en.wikipedia.org/wiki/Source_code). It was developed by Thomas J. McCabe, Sr. in 1976. &gt;Cyclomatic complexity is computed using the [control flow graph](https://en.wikipedia.org/wiki/Control_flow_graph) of the program: the nodes of the [graph](https://en.wikipedia.org/wiki/Graph_(mathematics\)) correspond to indivisible groups of commands of a program, and a [directed](https://en.wikipedia.org/wiki/Directed_graph) edge connects two nodes if the second command might be executed immediately after the first command. Cyclomatic complexity may also be applied to individual [functions](https://en.wikipedia.org/wiki/Function_(computer_science\)), [modules](https://en.wikipedia.org/wiki/Modular_programming), [methods](https://en.wikipedia.org/wiki/Method_(computer_science\)) or [classes](https://en.wikipedia.org/wiki/Class_(computer_science\)) within a program. &gt;One [testing](https://en.wikipedia.org/wiki/Software_testing) strategy, called [basis path testing](https://en.wikipedia.org/wiki/Basis_path_testing) by McCabe who first proposed it, is to test each linearly independent path through the program; in this case, the number of test cases will equal the cyclomatic complexity of the program. &gt;==== &gt;[**Image**](https://i.imgur.com/acYO2Kx.png) [^(i)](https://commons.wikimedia.org/wiki/File:Control_flow_graph_of_function_with_loop_and_an_if_statement_without_loop_back.svg) --- ^Interesting: [^Weighted ^Micro ^Function ^Points](https://en.wikipedia.org/wiki/Weighted_Micro_Function_Points) ^| [^PMD ^\(software)](https://en.wikipedia.org/wiki/PMD_\(software\)) ^| [^Synchronization ^complexity](https://en.wikipedia.org/wiki/Synchronization_complexity) ^| [^Basis ^path ^testing](https://en.wikipedia.org/wiki/Basis_path_testing) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cpz5aob) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cpz5aob)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I don't build websites, I build serious enterprise software that, by nature of business requirements, lives inside a browser. The DOM made sense for websites, but when it comes to building GUIs it is obvious that I'm forced to use it in ways that were never intended.
Just looked at your 10 video and the sound is good quality. Haven't look at previous videos yet.
My blog is specially written in Spanish because I know that there is a need for this kind of content in that language. Is it mandatory to link to posts written in English? Hope you understand. Thanks!!
I'm surprised [Highcharts](http://www.highcharts.com/) wasn't listed.
In Alien Blue's UI web view, live is 50% slower than offscreen, however in Mobile Safari live is 7% faster. My guess is that the JIT is speeding up onscreen canvas.
Actually I've began poking the subject to find answer to another question which is: is it more efficient to scale canvas with CSS than ctx.scale() if you happen to already solved that I will be more than glad to read your reasoning.
Well then. Were in the same line of business. I'm tools lead on a bigger Swedish software company. What is keeping you from some other platform? We switched to building native apps as soon as we saw the need. The web is the web and there's only so much you can do before it gets overly complicated.
https://github.com/wycats/javascript-decorators You never sleep, do you, Yehuda?
True, I think it should be more like FRPHire.com
Of course it's an implementation issue so things might vary massively over time and browsers. I tested this a few years ago with rendering to offscreen canvas then transferring to the onscreen canvas either CSS scaled or image copy scaled. CSS was way (orders of magnitude) faster, There was clearly an HW acceleration aspect that the CSS was managing that the image copy was not. I suspect the balance is much more even now. CSS has the advantage that it can play fast and loose with accuracy. I have noticed in some situations both Chrome and Firefox will do a quick and dirty transform and then fix it up when the page isn't so busy. It improves framerate in some circumstances (usually transitions) but the snap from low quality to high quality is Jarring. Really, on modern GPUs, scaling should be pretty much a free-action. 
Thanks for the reply. I was getting the impression this was the case. It sucks because I'm going for a job that uses all JavaScript but I'm slowly starting to dislike the language somewhat. Oh well, I guess there's always personal projects I can work on!
yeah, sorry mate, the whole no semicolons thing is pretty much a no-go for any development sans ironic mustache.
So, does this preserve all styling from CSS? Edit: Also, I noticed the [fonts and images are blurry](http://i.imgur.com/SiuAGhP.png). Is there any way to make it sharper? I'm on a MBP Retina using Chrome.
I think it is only helpful when off-screen canvas is reused, because drawing shapes and text is much more expensive than drawing an image or another canvas.
Now make a script that runs the button's ajax code to click the button and hide it in a fake link, so we can get rid of some non pressers.
+1 for react only :-) 
&gt; It sucks because I'm going for a job that uses all JavaScript ES6 and TypeScript are viable incremental upgrade routes. Making the switch is always an option.
Huh, I can see how this would apply to refreshing full-screen graphics every 33ms, but my understanding was that in practice the benefit came from arranging your code such that only graphics that need an update would get re-drawn. A side-scroller where Mario changes from running to jumping is one (simplistic) example.
That's... pretty cool
Stupid question but how do you guys use `babel-node` in production? Forever doesn't kill the process properly, never tried anything else.
"Standard"? Most obnoxious name ever. And no, omitting semicolons is pretty much the opposite thereof.
apply displacement and rgb splitter -&gt; have lsd trip ;)
I don't think you have anything to worry about, with libs like this and true javascript multi-threading is already here so there is hardly any reason not to get the performance you want out of your apps
I'm not the author however something i know about webGL is that you can send floats but you will only get integers in return so your accuracy of rendering goes down
Cool, I've updated the Babel for Meteor support https://github.com/grigio/meteor-babel
That has to do with devicePixelRatio, which isn't taken into account yet (I actually [created an issue](https://github.com/PixelsCommander/HTML-GL/issues/38) about this).
I would suggest sticking to the technologies you need, and only introducing others as and when they are needed. There are a couple of reasons for this: 1. You will learn about the tradeoffs between various technologies 2. You will be able to focus on SEO, and gain some valuable experience you will otherwise deliberately miss out on 3. You will improve your portfolio by proving that you can work in a variety of technologies and make sound decisions in context. I would not be impressed by a candidate who failed to articulate when and why their favourite technologies are appropriate. 4. You might encounter other technologies (relational databases, lightweight MVC frameworks, plain jQuery) and learn something valuable. I suppose it all depends what you're really trying to achieve. Is this side project valuable in its own right? If so, I would choose whatever technologies are directly relevant and concentrate on getting it done and expanding features. Or are you engaging in this project because you don't feel confident creating an Angular / Node application? If that's your real motivation, then go practice with those technologies.
Oh, I get the performance, but the DOM doesn't help. We do take advantage of concurrency and do our best to write V8-friendly code, but that doesn't change the fact that those of us creating web software are using something (the DOM) that was never designed for what we do.
&gt;Feel free to use CSS, images and all you are common to in HTML/CSS world. &lt;textarea&gt;&lt;/textarea&gt; aaaaand it's broken.
This is just because I am a fan of Angular :D I use it from the beginning to develop this extension. Yeahh, I am also very interested in React version of this :)
Well yeah that's fair however I wasn't talking about concurrency I was talking about function level parallelism 
And we're talking about the DOM
if you dont want to precompile you can try using the require hook. see: http://babeljs.io/docs/usage/require/ this way you can run you app using regular `node` 
Yeah, I would start by using adblock.
Pee-compiling is the way to go. Pretty much any project that I'm using node for the backend has client and server directories. Then again, I'm not always using node for the backend but am almost always using babel for the frontend, so it seems normal to me. YMMV, but a single bundle.js that's been minified and gzipped is great for production rather than having to dynamically assemble things every request (though, caching can help here).
`"string".constructor.constructor == Function`, nice.
Works with any function. &gt; Math.sin.constructor('return 5 * 7')() 35
It would do. Anything.constructor.constructor == Function.
They got rid of bind? Isn't that part of the es5 core?
babel had had a special operator for extracting and binding methods so you could do stuff like `arrayOfStrings.filter(/a regex/#test)` var x; var a = x#foo var b = x#bar(1, 2) var c = #spam var d = #eggs(1, 2) becomes var x; var a = x.foo.bind(x); var b = x.bar.bind(x, 1, 2); var c = (_args = [], function (_val) { return _val.spam(); }); var d = (_args2 = [1, 2], function (_val2) { return _val2.eggs(_args2[0], _args2[1]); });
That's actually kind of fun, although I wish that they'd encourage sane coding practices since beginners are likely to be using it as a learning tool. For instance, this is the sample code for the ConnectFour bot: if (board[0][3]=="null") return 4; else return 1; :(
Thanks! It's indeed very simple, but it actually works. I still need to write the assembler.
Cheers guys. All I needed to do was to convert the userID into a string.
Thanks for your feedback :) Can you give me a few ideas to practise my JS skills with?
Todo lists seem to be a popular in the JS world. Perhaps check out something like http://www.codecademy.com/ for tutorials. There's a few sites like this (just do a search).
Okay. Thanks :)
Technically the fastest method for a large-enough sample is probably to offload the work to the cloud and send back the result. That being said - I don't know if this link will work but I managed to do it about 3X faster than you (757 vs 2322). The caveat being the code is pretty specific to this exact test. http://jsperf.com/canvas-2d/13 var test1 = function() { var width = canvas.width; for (var y = 0; y &lt; canvas.height - canvas.height%5; y++) { var scan = y * width; for (var x = 0; x &lt; canvas.width - canvas.width%5; x++) { if(x % 5 &lt; 3 &amp;&amp; y % 5 &lt; 3) { pixels[x+scan] = 255 &lt;&lt; 24 | (0.5 + 0.8 * 255); } } } context.putImageData(imagedata, 0, 0); };
Just a couple of details about `context.fill()`. First is that for this particular operation you should really use [`fillRect`](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect). It is about 2x faster than doing `rect()` and then `fill()`. The second thing is that what you're doing in the other tests does not compare 1-1 to what you do with `rect() + fill()`. In your tests you only paint back to the `canvas` *once*, while using `rect` and `fill` paints to the canvas live, *once per rectangle* (actually *twice* per rectangle without `fillRect`). So, of course, it's faster, but mostly because of that. EDIT: As an aside, the *test* itself would benefit a lot if you [didn't create a new canvas](http://jsperf.com/canvas-2d/14) for each sample run. I'm inclined to think this is penalizing tests that run last, against those that run first because the page has been loaded with hundreds of canvases when the later tests are run.
You're right. I should work on cleaning up the repeated code. I'll definitley do it before moving onto my next project. Thanks :)
But does it come with ES1 compatibility? ;) Edit: just noticed that on the example for 0 class property you define a class Person but instantiate a Foo
I've got your point and I agree - but it's not the point of the benchmark. Many people will advise you to render the whole scene offscreen because they believe it triggers double-buffering (page-flipping). 
When I'm hiring, which I'm doing right now so this is fresh in my mind, I care that someone knows about the why, not so much the how. I can easily teach people how to get something done if they have the drive and basic knowledge, but sometimes people just aren't going to get the why. It isn't enough to learn just how to use a framework, instead, as you are, ask yourself why they made these design decisions.
I remember a discussion I had with a friend about this topic. Disclaimer: I don't use JS libraries/frameworks/whatever while my friend does. It was a while back when IE6 was still the mainstream browser and JavaScript wasn't yet considered like it is today. Libraries were few and small. We were debating the pros and cons of using a library and it was mostly 50%-50% until I brought an issue I had a few days earlier. I asked him to create a password input in IE6 with the library of his choice. Surprisingly, the library could not do it. It just returned a basic text input. No matter how you tried, it was impossible for the library to do it. You had to revert to the "native" way. See, at the time, changing the "type" property on an input was forbidden in IE6: var node = document.createElement('input'); node.type = 'password'; alert(node.type); // "text" in IE6 The "correct" way to do that in IE6 was like this: var node = document.createElement('&lt;input type="password"&gt;'); alert(node.type); // "password" in IE6 It's ugly, yes, thanks Microsoft! What I'm saying is that you may know 100% of a library and still have problems elsewhere that can't be solved. When I encountered the problem, I could almost instantly pinpoint it down to its origin. Having deep knowledge of the language and runtime is more important than libraries. Libraries live and die. Since I started with JavaScript, I could have learned about 5 or 6 different libraries, one after the other becomes obsolete. I'm not interested in learning the same thing 5 or 6 times, thanks. Once is enough.
And you have NeIH syndrome. Neither are good.
The new features are ES7 proposals.
Ah good catch. Fixed, thanks!
Example excerpted from [HERE](http://stackoverflow.com/questions/14540356/javascript-sorting-decimal-numbers-correctly) function numstring_sort(a, b) { var parts = { a: a.split('.'), b: b.split('.') }; if (parts.a[0] == parts.b[0]) // strings are the same return parseFloat(parts.a[1]) - parseFloat(parts.b[1]); // sort by number return parts.a[0] &gt; parts.b[0] ? 1 : -1; // sort by string } var arr = ["1234.1", "1234.10", "1234.2", "1234.a", "1231.a", "123a.1"]; arr.sort(numstring_sort); console.log(arr);
If it's like IntelliJ, you can install it on as many computers as you like but only use it on one at a time.
Ah, I see now. Basically scrobbling is just one way communication between our app and last.fm. It should be easy to integrate. However, what I want is to get recommendation from last.fm and this seem to be impossible.
psy, I posted a github link in the post. It's marked as htmlpage1.html. 
 document.getElementById("ButtonOpen").src =img.src; That should replace the image or the only existing one I see. You don't have to create the image now though. Just need the src. if (response == "Garage Door Is Closed") { var src = "images/doorstatus1.png"; } else{ var src = "images/doorstatus0.png"; } document.getElementById("ButtonOpen").src = src; 
There is a lot of hyperbole in this post. Like the 24 hour news networks which seek to shock and awe the viewer into hypnosis, the author of this post is trying to be extra **provocative**. Realistically, the author is creating a false dichotomy here, are you a cleaver developer that understands architecture and the "WHY" of your code or are you a code monkey sitting around stamping out cookie cutter framework solutions. But developers span the gambit. And the projects being worked on also span a gambit. Would i roll my own code for an enterprise solution? Hell no, the nightmare of getting an enterprise team on the same page is had enough when there are books and blog post on the subject. But the argument can be stretch a bit more. If we take the view that javascript is the assembly of the internet, can't we view frameworks as the higher order abstractions the same way higher order languages improved on assembly? ".sort()" is a great example, should I write my own quick sort? Test it, validate it, document it, just because i know how it works? No, the sort is tool, which i use to solve bigger business problems, and is already implemented for me by .Net which has a lot more testing resources then I do. More over, i am not getting paid to solve the problem of sorting, i am being payed to solve some business problem, and solving the sorting artificially inflates my billable time. A good thing if you want to milk your customers for every last penny, but a bad things if you want to deliver quality with minimal effort. TL,DR; Just because you can put together a promise library in 10 min doesn't mean that you should waste that time, Q has done a nice enough job. The sign of a good engineer, ability to get the work done with minimal effort. 
Could you tell how does it fail? I'm curious, as I seem to agree with the post.
Yeah, but the pain point of roll your own libraries at large companies is not the distribution. I totally agree, NPN and Nuget along with TeamCity and Artifactory or what ever other tools used by your company infrastructure makes using internal libs simple. The pain point is in training. Say, i write my own version of angular for my company to use. It can be faster, smaller, cleaner and have the code smell of a bacon flavored roses, but as one man, i can't match the volume of documentation being generated for Angular or Backbone or Spine or Ember or ...... public open source library. I also can't match the amount of product testing being done by all the users of that open source library.
Agree. The article is written by a well educated person who find it easier that way. In real life people need Frameworks to not mess everything 
 document.getElementById("ButtonOpen").src = src; try it with just 'src' 
So since you touched on NIH syndrome I'm going to hijack your comment. NIH syndrome is what is commonly used by people who use FOSS frameworks in order to never evolve as a team or as a company. For example I am currently writing a large Restful API using Hapi. Hapi is great but Hapi relies heavily on context rebinding, which is shitty when you're trying to keep up with nodeunit tests for great test coverage, documentation for functions classes modules process chains, and keeping the code organized and consistent. So if I wrote my code like the Hapi tutorial I would quickly end up with an intangible mess of functions some of which would take very long because the tutorial doesn't have the best practices in mind for callbacks. For example I define internal classes for plugins, and on top of those i compose internal classes for defining API services. I also have some base classes for specialized API services composed from my general API service classes. Likewise the initialization of the server is abstracted out as well to keep the init code clean. Likewise I need to document and explain the context rebinding that goes on in Hapi and bootstrap certain function contexts sometimes to keep consistency. If I wrote it like the tutorial I would have a mess of functions and objects. That is where the architecture counts, if you don't understand Hapi's use of context rebinding and it's strong adherence to the event loop, you're not going to be able to contiguously organize your services and you won't be able to compose the right objects for Hapi. You also won't be able to design a long lasting organized design. This is where architecture counts. It also counts when you're trying to compose new features that don't exist in your libraries. For example I wrote a complex querying interface on top of MyBatis/Oracle in Java. Which would generate queries on the fly to be able to reach near SQL functionality within the API. Without knowing architecture and the internals of the frameworks I am using and be able to make educated guesses about their layout there was no way to do it, which is why it was never done in my company. Beyond that when you're building a robust product your library choices matter because you are essentially trusting those libraries and their developers to keep them working. Sometimes for smaller things you don't want to trust a random npm package and would rather keep the functionality in house.
My perspective with nearly 19 years experience: If you're a grunt engineer, the most important thing to learn is the patterns and practices that YOUR TEAM uses to solve problems that you're getting paid to solve. If you're using Angular, learn Angular. Generally, in teams like this we do NOT want super clever engineers rolling their own code to solve a problem that a more mature library already solves. Thanks to Angular and Node.js I've rarely had to think about the intricacies of the "this" keyword on the job in quite a while, much less think about how I should create my own module, or routing pattern, etc. That's ON the job. At home though, I definitely need to learn those sorts of things, or I kill any chance I have of getting another job. But, IF you want to write your own npm modules, or you want to create pretty much any sort of library or framework that can be re-used by others, then you MUST know the basics as this article talks about. My wife's team is currently looking to hire javascript engineers to help with a front-end framework used by her entire company. They have a difficult time finding Javascript engineers who really understand the language and/or have any experience working outside of existing frameworks. 
This isn't a one size fits all issue. When learning something new, learning the framework is the way to go. An existing framework built by a team of people is going to use established practices and architecture that you can pick up as you go. Dive into the code as necessary, and learn the architecture from the framework. As your abilities grow, learning the architecture becomes more important. Just for getting things done, though, it doesn't really matter. Rolling your own is never a good idea. You will simply repeat the same mistakes dozens of open source projects have been making for years. You are not smarter than the open source collective. Save your peers and future maintainers the hassle. I find that gluing together modular components offers the most flexibility while maintaining my sanity.
Building your own transpiled language is a great accomplishment. These days I'm weary of transpiling my JS from anything other than ES6 using Babel. At least this way I know my code is mostly future proof.
I don't understand why people even consider learning jQuery to be on par with learning JavaScript. jQuery is a great library that makes doing certain things a lot simpler, but that's all it is, a library. If I want to animate a bunch of elements with CSS or make a couple AJAX calls then yea I'm going to use jQuery because it'll save me from xhr (can't wait for fetch to be a thing) and selecting elements using document.findElementBy. It's just a tool and in no way anything like actually learning the language.
I work with a lot of 10xers. One person can work on 10x the stack as me. Another person understands 10x the domain as me. Another person can make UX that's 10x nicer than mine. One person can handle inter- &amp; intra-team personal issues 10x as well as me, luckily they are my manager. Come to think of it, everyone I work with is a 10xer in some way...
The progression I've seen over fifteen years of writing software is... 1. try to do it all from scratch. fail miserably because you're a beginner and don't know anything, so eventually you... 2. wise up and use a framework. which works until you run into scenarios your chosen framework was never meant to address, and you struggle along fighting the framework until you... 3. chuck the framework and go it alone. this time with some knowledge of how things ought to work and why. This can be a very happy place for a programmer, until you realize one day that what you really want to be doing is solving bigger problems and not be down in the weeds designing a framework, which brings us to... 4. Just use a framework.
I'm not trying to argue your point because it's very true in a lot of cases. I just want to throw out there that my team has been working in a sans-framework, service-oriented architecture for the past year and we'll never go back. It was a lot of extra work at first to setup the most basic services like models, database adapters, etc. but the internals of those services are being fulfilled by 3rd party libraries so it's not like we're having to re-invent anything. We just have to re-test it. I don't like the tone of this article because it implies that this stuff is easy or even appropriate for all projects. If a problem domain is simple, frameworks are the way to go because it is over-engineering to build out a service layer in that case. If the problem domain is complex, service oriented architecture is a wonderful way to organize that complexity into something easily tested and reused. Furthermore, our services can easily be converted into a Microservice Architecture because of the encapsulated nature of services to begin with. The article may be pretentious, but the techniques do work in many common cases where domain complexity needs to be reeled in.
I think the point of the article is that most people become the half of the good developer that knows how to use the frameworks after reading the documentation, and it's trying to bring balance to that. Rather than a developer that can incorporate his own knowledge to make using frameworks effective. &gt; But contrary to the original article, learning frameworks is a good way to learn about these things I disagree, very few frameworks make sure you understand the core components and concepts because their documentation is focused on "doing" because that's what their customers demand. There is a huge contingent of coding and marketing for libraries that essentially boils down to "write a full SPA in 30 minutes after reading our documentation for 15 minutes".
I lead a sans-framework custom software team. The truth is that we only architect the public API of a service, while the internals are still all run by a 3rd party library/framework. The result is that it's unnecessary to hire only senior level developers. For example, we have a database client service, but internally it's still knex. We have a router service, but internally it's express. My point is that it's not necessary to reinvent libraries in order to take advantage of Service-Oriented or Microservice Architecture. We've never had a problem hiring coders either in the US or abroad due to a lack of architecture experience. They aren't even more expensive than coders that only know frameworks. It's common for us to say, "We need an X service", then quickly stub a spec for it's public methods, choose a 3rd party library to fulfill the internal functionality, then make the spec pass with ease. Those that use frameworks directly don't have to go through those steps, but then again we don't have to go through any steps to completely swap out a 3rd party library or framework for another. For example, if we were to drop express.js for another library like it, our app logic and specs require zero refactoring. It's all swapped out in the private functionality of the router service. Of course all of this is massive overengineering for a simple project, but is very useful for complex problem domains.
Not to mention how often you end up writing standard JavaScript inside your jQuery code.
I have implemented exactly the system that you outlined under one idea. Our setup: * Main SPA using Angular * Bootstrap angular with our core modules + per-tenant custom addons (using syntax like ```angular.bootstrap(document.body, [... dynamically generated list here...]```); * Have a private bower registry (using private-bower) to host addon packages * Front-end servers use bower to get all packages and place the distribution files into a publicaly accessible folder Avoid git sub-modules. We have tried them before and the biggest problem with them is the tedious nature of having to commit items in the proper order. This gets exponentially more tiresome if you are using branches (e.g. git-flow). Our next step is investigating webpack to load the modules in proper order on the front-end automatically.
Does anybody have some good resources on architecture? Frameworks are great, but only when you're trying to do what they're designed for. I'd really love to touch up my architecture skills outside the framework realm.
See the [top comment on HN](https://news.ycombinator.com/item?id=9314636).
Renaming the current task at the top of the page starts a new one. This is a confusing aspect of the program, and it will be changed in the next iteration. (To rename your current task, you can double click the cells below in the table).
&gt; gives it a variable name Do you want an array? If you need an arbitrary amount of "things", you don't generate identifiers for those. Instead, you just stick them all into some kind of list and access them via their index.
Use a loop and store the instances in an array: var players = [], i; for (i = 0; i &lt; numberOfPlayers; i++) { players.push(new Player()); }
Just wondering, why bower over npm? I would think managing modules that require other modules would be easier with npm, as demonstrated in this article: http://maxogden.com/nested-dependencies.html Unless dependencies management isn't really an issue :)
http://jsfiddle.net/ is great for testing out interactions between JavaScript and HTML. I use it as a sandbox, where I can experiment and explore ideas as I learn them.
And good luck hiring someone who's already familiar with SergeiGolosJS
Fuck off 
I knew I was gonna get that question. Its really not core to my issue right now, but in short: We have previously used bower for front-end dependencies and there is a lot of new stuff for us in this project. As such don't want to try to focus on too much at once. It does sound like pure npm is the cool kid on the block right now, and probably the better choice however. Damn front-end hipster tech-stack changes so quick its hard to keep up ;-)
I use this at work. I sold my boss on buying this after doing some research... A year later it has been a game changer for us.
Hi /u/yashghelani, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Correct, good catch. Now removed from es6-features.org. Thanks for the hint.
Yup, this.
For those who are interested in trying this themselves, check out the exercise in shader-school: https://github.com/stackgl/shader-school Specifically Intro 5: Loops and the GPGPU exercise on Game of Life.
Nice overview! Thank you, I find it very helpful.
&gt; are you a cleaver developer I don't feel comfortable with that terminology, but I do find myself slashing things, both forward and back.
Agreed, with you I mean. Learning principles is important but refusing to use frameworks sounds a bad solution, there are many reasons why having an unified way of working with millions other developers in the world is a good idea. He brought up debugging in AngularJS as a downside, like if his code could be any better. I sense a lot of arrogance on him. edit: I'm not an AngularJS fan, just using an example, we use Angular in a few projects, handlebars in others and a many custom solutions for other specific things.
The security implication is that you trust the service you're calling enough to let it run JavaScript on your page. That's it. You expect it to execute a specific call and nothing else. Nothing else but trust "guarantees" it will happen that way.
We allow 3rd parties to create modules for our web app. That works by registering their github repo in our private registry and loading their modules dynamically. We have a node server running close to our web servers that checks out the registered modules from our private bower repo using bower and makes the right version of the files available to the Web server.
You can dynamically generate the list of modules and pass it in as an array instead of hard coding everything as dependency of your main app module.
Consider working in reverse? working towards 0 seems to work better than incrementing towards an arbitrary condition. I think JIT's seem to expect mutations along the way with incrementing as opposed to decrementing.
I know of nobody that does consider learning jQuery as the same as learning JavaScript. jQuery is great for initial learners because you can quickly make some real changes without running into a thousand little things you didn't know. I learned this way, then got into actual JS. I found it to be good training wheels when I was first starting out.
Not a ton of details, but I'd recommend checking out [knockout](http://knockoutjs.com/). It's a MVVM library (not a framework), does pretty much one thing (2-way data binding), can be easily incorporated into any project and has a low learning curve. I'd also recommend using knockout's mapping plugin which takes care of mapping your json data to your view model.
Just started this... wish the UI wasn't so clunky. Re-validating all the steps all the time is slowing it down, and I am getting "Aw, snap! There's an error in the exercise. Please try again later." in header even when I do not see any error and I can proceed with assignments.. Also.. this is just a first screen, so maybe it will change, but so far I am just typing some stuff in and nobody tells me why.
Thanks for your updated jspref test /u/g3bj45hg34857. I couldn't work out why it was creating so many canvas at the bottom of the page, you seem to have fixed that. Also thanks everyone for the fillRect suggestion, yes I agree I should have been comparing against that all along. So with all that test5() in version 14 of the jspref tests, is still the fastest method. 
Thanks for adding that test in version 13 of the jspref tests /u/Hax0r778, it is most definitely the fastest isolated solution. But I was looking at a generic rect() function that takes min, max coordinates and colour. 
Sounds like you want some kind of model. And collections that contains those models. There are many different libraries / bigger frameworks for that, a popular option would be [Backbone.js](http://backbonejs.org/).
It seems to me that this does not exactly solve any problems in existence. We already know that almost everyone scrolls (http://www.hugeinc.com/ideas/perspective/everybody-scrolls). Is there a reason people need to know exactly how much more content there is to the end, and I've never found issue with the scrollbar tell me that information. I'm having trouble seeing what problem this solves.
The solved issue is the indication of a scrolling state. It's not new, and for sure scrollbar solves it as well. But the message of the text and the demos on intence is to demonstrate that it solves the issue in a better, more efficient and intuitive way.
Not interested. The environments in which I have to work never are quiet enough for error-free speech recognition, and they other people in those places would not like it if I'd start shouting into my computer.
Would you like it if you can chat with it ? Its not really like other website builders. It has memory and knowledge about the sites it has built. 
Chat with it? As a replacement for chatting with a fellow colleague? That could be interesting for those moments I don't have a colleague around. And you said in another comment it remembers previous projects? That means it would learn and remember things I might have forgotten already, because I use them rarely, and because it's Siri (or something like it), it can access the KB articles I would have written about such rare features and provide hints? Yeah, I would like that.
should work in safari 7+ on ipad, just tested
Yes. Someone, somewhere has to teach it a trick once and it will remember it - and help anybody else with the same problem. It works almost like a hivemind in this respect. 
Well, that worked better than I expected. Next step, Skyrim in css + html only. 
You will have to use 'this' to reference the variable, though. this.player1, etc. What the OP is looking for is not possible (nor necessarily should it be). The OP can either push players on to an array or an object, and if i'm being honest the "this" object is probably the least preferable object, as you could (though really unlikely) end up with a property naming collision.
[**@malyw**](https://twitter.com/malyw): &gt;[2015-04-03 22:55:48 UTC](https://twitter.com/malyw/status/584127186879250432) &gt;Chrome [#DevTools](https://twitter.com/search?q=%23DevTools) Update: &gt;Costly functions chart on Timeline &gt;\(find costly JS functions easily\) &gt;[#webdev](https://twitter.com/search?q=%23webdev) [@ChromeDevTools](https://twitter.com/ChromeDevTools) [*pic.twitter.com*](http://pbs.twimg.com/tweet_video_thumb/CBs8lHIW0AA3bbE.png) [^[Imgur]](http://i.imgur.com/dYi7X75.png) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/31d5t8%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
*This* *is* *an* *automatic* *TL;DR*, [*original*](http://azure.microsoft.com/blog/2015/03/24/announcing-azure-app-service/) *reduced* *by* *92%*. ***** &gt; Accompanied by a comprehensive marketplace of API App connectors, Logic Apps can integrate your data and services from your SaaS apps like SalesForce, DropBox and Office 365 to your favorite Azure PaaS Services and others from the likes of Twilio and Twitter. &gt; With API Apps, developers can select from a rich library of existing on-premises and cloud APIs as well as contribute their own APIs easily for public or private use by Logic, Web, and Mobile apps in Azure App Service. &gt; With App Service, you can host any number of app types on a single App Service plan, and pay just one low price. ***** [**Extended Summary**](http://np.reddit.com/r/autotldr/comments/31d6z0/microsoft_announcing_azure_app_service/) | [FAQ](http://np.reddit.com/r/autotldr/comments/31b9fm/faq_autotldr_bot/ "Version 1.5, ~1726 TL;DRs so far.") | [Theory](http://np.reddit.com/r/autotldr/comments/31bfht/theory_autotldr_concept/) | [Feedback](http://np.reddit.com/message/compose?to=%23autotldr "PMs and comment replies will be read by the bot admin, constructive feedback is welcome.") | *Top* *five* *keywords*: **App**^#1 **Service**^#2 **API**^#3 **mobile**^#4 **cloud**^#5 Post found in [/r/microsoft](/r/microsoft/comments/3051qs/microsoft_announcing_azure_app_service/), [/r/AZURE](/r/AZURE/comments/3066bl/announcing_azure_app_service/) and [/r/javascript](/r/javascript/comments/306f8c/announcing_azure_app_service/).
you have x and o both set to number values of 0. You're checking them [strictly, using ===] against characters in a string so neither will ever be matched and incremented so at the end they're both 0 and will match, meaning true is always returned. Set x and o to strings - separate strings at that, like "a" or "b" etc and you should get better results.
I see serious privacy/disclosure concerns with this. Do end users know you are using their bandwidth for personal profit? Also, does the transmission stop when users leave the page? If so, this only helps for assets with high concurrent users. The types of pages that have high concurrent users are already using a CDN, so who is this for?
I think the term '10xers' actually comes from a book called 'Peopleware'. I'm reading it right now, so it could be selective bias, but overall 10xers are far more productive around other 10xers. The higher the productivity the cheaper things become, in the long run. Though this is just a book, I've experienced it first hand at a digital company where they wanted cheaper developers instead of good ones. The crazy thing is that it actually costs them more in the long run. 
This specific example is not a performance concern since it does not use a class instantiated with new. Also, for minor cases you really shouldn't care about performance until it becomes a problem. Just something to be aware of
Could someone recommend a good book for this approach? 
The problem is hackathons I think. People trying to learn to make a website for the first time and seeing jQuery and thinking this is all I need.
Yes, Last.fm is basically a service that tracks everything you listen to (if you let it) and gives you recommendations based on your listening habits. The process of submitting tracks to Last.fm is called "scrobbling". There are 2 API methods relevant to scrobbling: [track.updateNowPlaying](http://www.last.fm/api/show/track.updateNowPlaying) signals that you are currently listening to said track but it does not yet count as "listened to" or scrobbled. You'd call this method at the beginning of the track. The track will show up on a user's page as "now playing". And then there is [track.scrobble](http://www.last.fm/api/show/track.scrobble) which you call on the same track when it's done playing. It means adding the track to the history. To get artist recommendations for a user you can call [user.getRecommendedArtists](http://www.last.fm/api/show/user.getRecommendedArtists). This data is only available after a user has listened to a certain amount of tracks. There doesn't seem to be an API method to get recommended tracks or albums though. Even without recommendations users like to have their listening habits recorded so they can get recommendations from the Last.fm website. Many desktop audio players support scrobbling as well as Spotify. I created [SomaScrobbler](http://somascrobbler.com/). It's a service that scrobbles the tracks of certain SomaFM radio stations to Last.fm. There's also an [API](http://api.somascrobbler.com/). I also write an easy to use [wrapper library for Last.fm](https://www.npmjs.com/package/lastfmapi). Though, I've only used it in Node. I've never tried browserifying it. If you want to implement scrobbling in to your Chrome extension and need any help please feel free to PM me.
Wow, thanks for the gold, I didn't expect that. That's my first gilding ever.
It took me way longer than it should have to figure out why you called your NES emulator "SNES". Now I feel dumb
I think modern compilers move the length evaluation outside of the loop. Maybe there's a related jsperf test somewhere.
That is incredibly well done!
The companies that repeat the "10xers" meme don't have 1/10th of the employees, which tells you all you need to know. Some programmers are running backs, some are linemen. Some write 10x the code, while others might be more deliberate, but save you from the nightmare scenarios and fuckups that can cause a team's productivity to plummet 10x. They don't always get appreciated equally, but you need them both to succeed. The people who glorify the "10xers" are the people who judge a programmer's value by the number of lines he can write in a day (i.e. managers with no programming experience). Besides, if there are any *real* 10xers, they are probably running their own business (or should be), because anyone who can do the work of ten programmers is a small-to-medium-sized development company with the overhead of a single freelancer would be an unstoppable money-making machine.
Wow, 1000 thanks for this! I'll contact you when I start with last.fm feature!
&gt; Browser sniffing instead of feature detection? It detects features, and then disables some particular browsers, where feature is detected, but is not fully implemented.
https://blog.mozilla.org/blog/2014/03/12/mozilla-and-epic-preview-unreal-engine-4-running-in-firefox/
 function Thing(name) { this.name = name; } var thing = new Thing(‘name’);
sweet cocktail
&gt; if(hash.window.location.search.length) Can't you check if hash.window is defined and then do the above?
Its completely editor, workflow and framework agnostic which is where it really shines :)
This, needs to happen!
No Its legit.
This is a really cool idea. Ive sent him the link tot his post and i should imagine he will see your suggestion. If you wanna be more direct im sure you could suggest it here https://github.com/caspervonb/amok/issues. 
I had the same issue. I guess nes.js (and snes.js for snes) would be more conventional.
Just to add to the above :) Devtools reloading only reloads properties, it also forces you to work within work spaces. Amok reloads control flow changes and object structures too. Although depending on chrome specific APIs to run (meaning you'll be using chrome) its editor, workflow and framework agnostic. This means you can work within any environment you want without being forced to work within workspaces. If your only a Frontend Developer you wont find this an issue as your only working inside front end code. If your Fullstack then the freedom amok gives you is a BIG deal. Thik of it like an extraction of workspaces functionality and an evolution as well. 
I'm still very new to all this, but what I got from the article was that he wasn't experiencing any problems solving complex issues in a timely manner without a framework, and that by knowing the principle of the framework you could actually write better, longer lasting code without it.
I'll try to quickly hit most of your points. I'm sure others will have additional information as well. 1) As far as ES6 classes being a standard, not really. ES6 is almost officially here, but even when it comes, it will take some time for adoption to reach critical mass. Things like Babel help, but its an extra dependency that is needed in development making it harder for existing projects to pick up if not already using it (plus adoption from the developers themselves). As for what most devs are using, that's hard to tell. A lot of that depends on the framework, many of which have their own syntax or helper functions for defining JS classes. Prototypes are being used, but usually hidden behind some other API. What you need to know depends on how involved you want to get. Is it good to know about what prototypes are and how they work? Absolutely. Can you get by with just the basics? Absolutely. Some, more complicated circumstances may benefit from knowing the ins and outs though, but that can be said for just about anything. 2) Most of the time this is what you want, as long as you're calling a method from your class instance. If not, one way to correct this is with Function.bind to create a version of that method where this is always what you want. Its not uncommon to also see functions defined within a scope containing a reference of `this` that it can use in place of what `this` actually is when called var _this = this var fn = function () { _this.foo() } (Personally I tend to go with bind; call and apply are similar utilities for helping maintain this during call time) 3) super isn't a direct reference to the parent class. It depends on context. In constructors its the parent class constructor (`super(arg1, arg2)`). In methods, its more like the parent class's prototype (`super.myMethod()`) 4) As far as I know you should be able to use arrow functions as an iife. 5) Best practice for ES6 is basically use const. When you can't use const use let. When you can't use let use var. Generally its good practice to keep your variables close to where you use them as well, but given the nature of hoisting, it doesn't hurt to explicitly define them where they're being hoisted for clarity. 6) If you port old code that happens to use the formatting "${name}" for some text that is used, for example with some templating engine, then that will break moving to ES6. The backticks prevent this (there may be some other reason on top of this...) 7) Object.create creates a new object with that prototype. This is used for inheritance so a new class prototype can be given a value that extends from, but is not exactly, a prototype of a parent class. For example you might think to do something like this Child.prototype = Parent.prototype for inheritance, since, afterall, the child gets all the inherited prototyped members of the parent. But once you start adding child members to Child.prototype, you're also affecting Parent.prototype since they're the same object. What you want is a new object for child that inherits from Parent but has a place for its own members. This is preferred over the older style of doing Child.prototype = new Parent() This does something similar since the new object for Child.prototype is a separate object and inherits the parent members, but this has the adverse effects of making Child.prototype a full instance of Parent, including what magic may have existed in the parent constructor (maybe adding the instance to a registry to keep track of all Parent instances? - something you wouldn't want for prototype objects). Edit: typo
to be fair, the author states himself that he is attempting to be provocative.
I don't think that's the case. He mentioned using the basic Observer pattern, and sticking to modulating the code to each module only performing one action, which sounds to me like anyone who can read javascript could easily read that code, especially if it was documented properly. Would that not be the case?
Are you joking hash is a string variable it has no window or any other child objects. You just need to check that ? and = exists //check if there is a query string withing that hash. if((hash.indexOf("?") &gt; -1) &amp;&amp; (hash.indexOf("=") &gt; -1)) { Or even better solution would be to regex it var hsh_vs = hash.match(/([^?&amp;=#]+)=([^&amp;#]*)/g); //check if there is a query string withing that hash. if(hsh_vs.length) { Also try using console.log(variables) and developer console (F12 hotkey) would be much faster that way.
If you're using node you can use the url module. 
Well first thing is to get the basics in order. Put it in a form. Drop the buttons and use a radio input for Volatility. Prevent form submission (just did that onsubmit instead of in the function). comment out this line since it's throwing an error : //var rndm = Math.random() 0 &lt;= rndm &lt; 1.0; (actually remove the old function entirely after I copied out the useful bits) Create the actual function used in the eventListener. Change the eventListener to the form submit. Grab the initial price and volatility and assign to vars. Create the prices array and assign the initial price as the first array item. Use a loop to get 4 prices. Return some results which are all jumbled and ugly looking. You can take it from here : http://jsfiddle.net/malwinsc/fq3m48vL/ 
I wrote this bad boy for you for funsies https://gist.github.com/davydog187/dc5b228991c306261d21 EDIT code: var exampleInputs = [ "http://example.com/", "http://example.com/#hash", "http://example.com/#hash?something=hello", "http://example.com/#hash?something=hello&amp;else=hi" ]; function getHashValueFrom(url, hashIndex, queryStringIndex) { if (hashIndex === -1) { return ""; } if (queryStringIndex === -1) { return url.substr(hashIndex + 1); } return url.substring(hashIndex + 1, queryStringIndex); } function getQueryStringFrom(url, hashIndex, queryStringIndex) { if (queryStringIndex === -1) { return {}; } return url.substr(queryStringIndex + 1).split("&amp;").reduce(function(result, current) { var keyValuePair = current.split("="); result[keyValuePair[0]] = keyValuePair[1]; return result; }, {}); } function getStateFrom(url) { var queryStringIndex = url.lastIndexOf("?"); var hashIndex = url.lastIndexOf("#"); return { hash: getHashValueFrom(url, hashIndex, queryStringIndex), queryString: getQueryStringFrom(url, hashIndex, queryStringIndex) } } exampleInputs.forEach(function(url) { console.log(getStateFrom(url)); });
The unreal engine port requires asm.js which isn't well supported yet. Definitely awesome though!
Thank you very much for the the response. I have to keep the buttons, is there a way to press the button then press simulate and get the answers. Also the answer in the code comes with a negative but the sequence should be 10+(10*.02) and so on for five times.
Sooo... how do you actually turn this on? I don't have an option for this in 43.0.2357.2 on OS X, with the 'Developer Tools experiments' flag enabled.
I'm sorry I'm a little confused. If i assign it to a global variable say var = volatility, would I have to make a different variable fo each of the three buttons?
And what are the metrics behind these measurements?
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Data structure**](https://en.wikipedia.org/wiki/Data%20structure): [](#sfw) --- &gt; &gt;In [computer science](https://en.wikipedia.org/wiki/Computer_science), a __data structure__ is a particular way of organizing [data](https://en.wikipedia.org/wiki/Data_(computing\)) in a computer so that it can be used [efficiently](https://en.wikipedia.org/wiki/Algorithmic_efficiency). &gt;Different kinds of data structures are suited to different kinds of applications, and some are highly specialized to specific tasks. For example, databases use [B-tree](https://en.wikipedia.org/wiki/B-tree) indexes for small percentages of data retrieval and [compilers](https://en.wikipedia.org/wiki/Compiler) and databases use dynamic [hash tables](https://en.wikipedia.org/wiki/Hash_table) as look up tables. &gt;Data structures provide a means to manage large amounts of data efficiently for uses such as large [databases](https://en.wikipedia.org/wiki/Database) and [internet indexing services](https://en.wikipedia.org/wiki/Web_indexing). Usually, efficient data structures are key to designing efficient [algorithms](https://en.wikipedia.org/wiki/Algorithm). Some formal design methods and [programming languages](https://en.wikipedia.org/wiki/Programming_language) emphasize data structures, rather than algorithms, as the key organizing factor in software design. Storing and retrieving can be carried out on data stored in both [main memory](https://en.wikipedia.org/wiki/Main_memory) and in [secondary memory](https://en.wikipedia.org/wiki/Secondary_memory). &gt;==== &gt;[**Image**](https://i.imgur.com/10Ag6u8.png) [^(i)](https://commons.wikimedia.org/wiki/File:Hash_table_3_1_1_0_1_0_0_SP.svg) - *A hash table* --- ^Interesting: [^Graph ^\(abstract ^data ^type)](https://en.wikipedia.org/wiki/Graph_\(abstract_data_type\)) ^| [^Tree ^\(data ^structure)](https://en.wikipedia.org/wiki/Tree_\(data_structure\)) ^| [^Hash ^tree ^\(persistent ^data ^structure)](https://en.wikipedia.org/wiki/Hash_tree_\(persistent_data_structure\)) ^| [^Persistent ^data ^structure](https://en.wikipedia.org/wiki/Persistent_data_structure) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cq0ykcx) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cq0ykcx)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Lol, you must think I'm very stupid but I'm plain lost.
Forget these guys who say use a framework. Use a framework next time, but figure this out and learn from it this time. Your variable *hash* is just a string. You try to access its *window* property at one point. That's not going to work, as strings don't have properties (at least none like window). At that point you want to be breaking the string up, searching it for stuff, etc. 
Pretty cool and has quite a few good tips. I learned a bit of ES6 that I didn't know from reading this.
I don't think you're stupid. I do believe your dev education was a little lacking. But I don't know what I can tell you to help you past what I posted. The structure's in the fiddle I posted. You can file this piece of information away : The most common method to get values from the DOM (the page) is by using `document.getElementById('ID_NAME').value` To reduce typing you can create a variable to access that id repeatedly `var myElement = document.getElementById('ID_NAME')` which will let you access the value by just typing `myElement.value` . The other thing that will help you is the console. If you're using Firefox just right click select 'inspect Element'. That will open up the web dev console and you can see the HTML source for the page. Click the tab 'Console' , if there's errors with your javascript it will show up there. It's your best tool for figuring out what's going wrong. 
In that thread there's a whole lot of undefined terms like "the community" and "corporate interests" which are really just catch words to say you can't argue against me because ____ term. It has no meaning. I read through two pages of comments and there was only one person talking about what really matters – the users. Which, by the way, is defined. Grunt/Gulp/Meteor/MEAN and on and on and on. There is just no real practical way for users to make that switch from node to io unless they're the types of developers or shops that has complete and total autonomy on when/where/how they can use frameworks. And that is rare. So if all those dudes think they've already "won" (also undefined) they should be happy merging back into node to avoid the fragmented ecosystem they are already creating.
Running and running well are two different things. That said, eventually everyone will be forced to support it very well.
As I've described below, I'm looking for something that can repeatedly create new variable names, theoretically infinitely. The question has been answered though. Thanks anyways!
Agh, I'm so stupid! Why didn't I think of that earlier? XD Thanks a lot!
I'm not sure about the variable names (you might have used different ones) but it looks like it could work. 
Yup, pretty close. //var simulated_string = prices.toString(); //return simulated_string; var span = "[" + prices.join(",") + "]"; return span; And //var volatility = document.querySelector('input[name="vol"]:checked').value; var volatility = document.getElementById('hiddenField').value; And after the last button in the HTML : &lt;input type="hidden" id="hiddenField" name="hiddenField" value=".02" /&gt; You also might catch the fact that clicking the 'low,medium,high' buttons will trigger the output. 
Today, the honour of being “That Redditor” falls upon me. Perhaps posts like this belong in [/r/LearnJavaScript](http://reddit.com/r/LearnJavascript), rather than the more widely-read JavaScript forum. Although there are fewer people there to help, the subject-matter is right on topic there and everyone reading the forum is either trying to learn or trying to teach. Whereas, this forum has more of a focus on things that appeal to a wide variety of JavaScript programmers.
its just everyone here has been very helpful, and is why I continued here.
I think it is the case. He makes the common mistake of assuming all developers are equal and, for lack of a better word, skilled. For some his procedures will just add a lot of development time, for others you will end up with poorly designed architecture. It's easy to be uncompromising and say all developers working should be able to do what he describes -- but this is simply not reality. Having well written preexisting libraries and frameworks can help mitigate.
It should be there already. I populated the first element of the array with the base_price and started the for loop at 1. Or , are you saying you need it to be base_price * day * percent ? Or in english : the amount should be include the previous day(s)? 
Everyone here *is* very helpful. It’s a great forum!
absolutely, thanks for the insight. 
um not sure but maybe ? for(i=1;i&lt;5;i++) { prices[i] = base_price + (base_price * percent_change); }
The fact that this post includes 'window' should clue you into the fact that this is more than likely browser js. 
There's a lot of good information in here, but this is much more than a styleguide.
He could potentially be using browserify though. Just a suggestion. 
That's fair
interesting
Here is how I would explain it. By "Knowing" I mean - everything there is to know about the codebase itself. It will be an expert navigator of the code. Think custom queries - things you can probably do with grep / awk / sed if you are an advanced user. It will know what has been used where. Lets say - AuthenticationService - for example. It will know where are the points in the project anyone has used it ( because you / another programmer asked it to use AuthenticationService at all those places and it remembers it! ). It knows the methods exposed by AuthenticationService. It knows their parameters and probably even their parameter types. This is all information that exists in the project when we build it -all information we expect a programmer to have in his head - and any new programmer coming into a project to find out. What it WONT know is the domain knowledge of the app you are building. For example if you are building a Financial Trading app - it wont know what swaps are , what a future is - for example. It will have no idea about the domain models. What it will also know is - everything about web development itself. HTML, CSS and JS. Think of it like a one way compiler - from your intention to HTML, CSS and JS. Grabbing intention from an already coded app is hard. But if you start with this from the start - it will know everything you do - because you are no longer going to the nitty gritties of things ( margin-left : 10px ) but rather conveying your intentions ( should have a 10px gap on the left - or something to that effect.. ). 
The main thing I am currently using es6 for really in production is ES6 in node for generators via koa and its siblings. Fuck callback hell, man. Generators are the way to sanity.
Interesting read. I'm about half-way through so far, and I agree with much of what I'm reading. I understand being wary of new features with potential performance issues as long as we're transpiling, which realistically we obviously will be for some time. I'm not sure I'd go as far as recommending against any use of features like generators just on that basis, though. This seems an oddly backward-looking philosophy given their comments about, for example, sticking to ES6 module syntax and relying on the transpiler to convert it to whatever you use today. The only thing I've seen that I really dislike is the comments on equality comparisons, and particular the advice to use shortcuts, e.g., // bad if (name !== '') { // ...stuff... } // good if (name) { // ...stuff... } // bad if (collection.length &gt; 0) { // ...stuff... } // good if (collection.length) { // ...stuff... } JavaScript's equality operators and truthy/falsey behaviour are notorious for introducing surprising behaviour, so as a matter of style I default to not relying on truthy/falsey conversions at all. That means any expression of the form `if (x)` or `if (!x)` where `x` isn't really a boolean value is suspect, and for me their "bad" examples are much better form here, being more explicit about what is really going on. For example, what if instead of the familiar `if (collection.length)` we saw `if (collection.size)` -- are we testing for a size greater than zero or the existence of a function here?
window.location.search will be empty because it will be part of the hash. Somthing like var params = window.location.hash.split('?'); var hash = params[0]; //should be #hash var search = params[1]; //should be something=hello&amp;else=hi should work EDIT: Or, if you put the hash at the end, it'll just contain #hash and window.location.search will contain the query string 
tl;dr Place the #hash at the end of the URL and your problem is solved: http://example.com/?something=hello#hash Your issue is actually a really simple one. Your URL's are formatted incorrectly. The thing you're calling a 'hash' is actually called a fragment identifier (http://www.w3.org/TR/xhtml1/#C_8). Lets remember why they were added in the first place. To allow the browser to anchor to a particular section in the document. To work properly, your fragment identifier must be exactly equal to that of an element's id attribute, most commonly. In your case, your fragment identifier for number 2 is #hash. Looks good. For number 3 it's #hash?something=hello. That's probably not what you want. The way the algorithm works to identify the correct fragment identifier and the correct search string in the URL requires the fragment identifier to come last. Therefore, all you have to do is place #hash at the end of the URL and voila, problem solved! Here's an example: // example window.location.href = 'http://example.com/?some=query#somehash' const search = window.location.search //=&gt; ?some=query const hash = window.location.hash //=&gt; #somehash 
But changing it this way _will_ reload the page if the query string changes, whereas the way it's done now a change will not trigger a reload automatically. And that's the only possibly undesirable sideeffect I can think of.
On a non-technical note, I don't see this being popular in Germany due to the translation of "Mist". Essentially, the name of the cdn is translated to "CrapCDN". It is a bit like the reason the Chevy Nova didn't sell in Central America.
I suppose I'd disagree your reasoning on a few different grounds here. Firstly, I'm not sure I accept your premise about 99% of cases. If you're talking about a simple variable, as in the first example, then I accept that with a dynamic type system there is an argument for treating the various base cases the same way. However, if you're talking about a member of an object, as in the second example, there is a question of testing the value itself vs. testing for its existence. Secondly, my view on this isn't just about what works but also takes into account writing code that can be easily understood later. Even with a dynamic type system, at some point you still need to know what kind of data you're working with, and leaving that unnecessarily vague is a maintenance hazard. Finally, we'd all like to be programmers with perfect knowledge of all the edge cases in our chosen languages, but in reality none of us are. This is why I tend to prefer languages with static type systems, where you can prove in advance that certain failure modes can't happen. Since we're talking about JS, that isn't an option here, but you can at least code defensively so that any consequences of unexpected types happen as early as possible. Better that than having values that aren't quite what you thought they were slowly propagating through your design until eventually you hit an observable bug but by then you're 10 levels and 3 async-mechanisms down the function stack and it takes you a few hours to trace it back to the root cause.
That's a bit contextual, but what I'm getting at is that a lot of young developers know how to use design patterns, but they dont know why you use them. A few, I asked if they could explain function.bind, function.apply, function.call. most knew what they did, the good ones then also told me why they would use them. Does that makr more sense?
Here's one: https://jsperf.com/array-length-vs-cached/36 It is still often faster to cache the length. _However_ this type of loop is already going to be really fast, so the difference is not likely to matter to your application.
Wow ... thank you for all your help.
My guess is it would've said "A Java based SNES emulator" in that case.
I'd like to see more explanation behind not using generators. Blog post, please?
I was referring to a simple variable. They made the decision for 'good' in the second case because length is guaranteed to be an integer and I agree with this decision as well. It's redundant to use strict equality checks in that case. I think we can assume airbnb has a solid team of js devrlopers, but in general we need to get past this "not everyone is an expert javascript developer and knows the minutia of the language". The front end is its own ecosystem now and only experts should be dealing with it or your company is doing it wrong. Furthermore, the type system (in every language) is not minutia. Its rudimentary, fundamental, level 101 stuff that everyone should know if they are developing professionally with it or they shouldn't be. The example mentioned above is one of the things that makes js flexible and powerful and we shouldn't handicap the language because some people haven't bothered to learn it in 2015. That's an indicator of bad managers allocating the wrong resources to the wrong work, not an indicator of poor language design.
-runjs console.log("is this thing still on?") -endjs
1) Open DevTools 2) Open "Experiments" tab 3) Press "Shift" 6 times =&gt; Hidden options will appear. There is "Costly functions" between them. 
&gt; I was referring to a simple variable. They made the decision for 'good' in the second case because length is guaranteed to be an integer and I agree with this decision as well. It's redundant to use strict equality checks in that case. The thing is, even in this specific case, it *isn't* guaranteed to be an integer. Here: a = { length: function() { return 'banana'; } } Will every major browser run this code? Yes. Will `a.length` then be a function that returns `'banana'`? Yes. Of course in this specific case we would probably agree that this code is poor style, and hopefully someone would object to using `length` in this way at code review. But this is not true in general, as in the superficially similar `collection.size` example I gave before, and adopting a coding style that can have very different implications depending on context is rarely a good idea, in my experience. &gt; in general we need to get past this "not everyone is an expert javascript developer and knows the minutia of the language". The front end is its own ecosystem now and only experts should be dealing with it or your company is doing it wrong. Programming is programming. The tools change. Styles come and go. Every once in a while, someone has a genuinely new idea that really does change things. But mostly the same issues come up time and again, and right now a whole industry full of enthusiastic but relatively inexperienced JS programmers is learning the same lessons that the rest of the programming world has spent the last 50+ years learning. I've heard similar arguments to yours from C++ programmers, who came from a C background and didn't find RAII intuitive. "We know the language properly, we can write exception-safe code anyway." (People have given entire conference talks, or written large parts of books, on how easy it is to get that one wrong in reality.) I've heard similar arguments from Java programmers, who came from a C++ background. "With Java we have GC, so no matter what data structures we use, we won't leak memory." (And then they get the cache algorithm wrong in their long-running server code and memory usage rises and rises until something breaks.) I've heard similar arguments from Python programmers. "We use a high level language, so we don't need to worry about crashes due to memory bugs." (Cue stack overflows due to ill-considered recursion, OS killing the process that tried to allocate too much memory on the host system, and segfaults because while their Python code is high level the DB library API they just passed incorrectly-typed values into was written in C.) How many of these people do you think ever survive a debate with the bug tracker? There aren't many universal rules in a field as vast as software development, but one of the closest things I have ever seen to an absolute truth is that if your language or library admits a certain class of failure then sooner or later someone will write code that fails in that way. It doesn't matter how good they are, how comprehensive your test suite is, or how much you all think code reviews are great. These all improve your odds, but in the end, *everyone* makes mistakes. The only way to avoid this is to design out the failure case, so it is impossible for any programmer to make the mistake in the first place. And yes, even then you are trusting that your tools work properly, but this is typically several orders of magnitude more likely than your human developers not making the mistake themselves. &gt; Furthermore, the type system (in every language) is not minutia. Its rudimentary, fundamental, level 101 stuff that everyone should know if they are developing professionally with it or they shouldn't be. That is a cute sound-bite that in reality excludes most professional programmers using most of the major programming languages today. In some cases the only people who truly understand all the details of a type system and how it interacts with all the different language features are the language lawyers who write the spec, and as anyone who's ever participated in a language standardisation effort can tell you, even those guys miss an edge case from time to time. In any case, the concern with a dynamically typed language like JS isn't not knowing the type system, it *is* the type system. The style proposed makes code more ambiguous than it needs to be, and consequently will allow some failure modes that are not uncommon in practice to propagate further through the code, just to save a few characters of typing. That is rarely a good trade-off in any language. [Edit: Minor phrasing changes.]
Your PHP is throwing an error somewhere with HTTP code 200 (OK), and your JavaScript is expecting a JSON response and doesn't know what to do with the bad response. Also, in your catch block, you're embedding a PHP method call into a string - I don't believe this is possible. What I suggest: In your catch block, set a server header status code of 500. Then, just do echo $failures.getMessage(); instead of putting that inside the string. You should also be using some form of developer tool by Chrome or Firefox to inspect the network request going back to your server, and see what the actual response is. Or, if you don't know how to use developer tools, just type in your actual PHP file into your browser (something like http://localhost/server.php - whereever it's hosted) and see what output you get that way. It might help in showing exactly what error PHP is throwing.
Why would you suggest a library to solve this issue? Honest question. I agree, dont reinvent the wheel, but by all means don't introduce a dependency when it's not needed. All OP wants to do is access .hash and .search of the location object. Functionality that already exists in the browser. 
ahh fantastic. I found the problem by seeing the output like you suggetsed. instead of while ($row = $result-&gt;fetch()) { its meant to be while ($row = $stmt-&gt;fetch()) { 
Aww, too bad. 
localstorage is limited to 5MB so I'm I bit confused as to the usefulness of this library. 
Set a left padding or margin on the second element.
It's a [CSS 3d transform](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transforms). Create the CSS, add a transition, and add the class to apply the effect (or alternately, you could do it as an animation). Honestly though, that particular effect looks pretty bad. [This effect](http://www.turnjs.com/) looks much better and is on github if you want to study it.
But dear lord the examples they picked killed the readability of the for of loop. 
Wow, TurnJS is very nice! Thank you!
because, its common for Java programmers to learn JavaScript as Web developer and knowing couple of key differences help to learn the language better. 
Why not just use webpack and inline everything with data urls? What advantage does this provide over a proper build system?
If a value is allowed to be any of the six falsey values and you write code that tests it against one and gets unexpected results, you haven't introduced a problem, you've caught it. The programmer being unaware of an input's possible values is the problem, and it needs to be fixed, not swept under the rug to accumulate.
Convert it with [JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) var obj = JSON.parse(string); Then access it: obj.item[0].type === "GroupItem"
it was an example. The string is very long. That is the second item, and so on.
You didn't understand that the {next item, etc} was simply a way of shortening the example code, instead of using "..."?
&gt; var array = JSON.parse Tried it var array = JSON.parse(data); console.log(array); returns [PHONE] pebble-app.js:?: JS: Hello JS: [object Object]
Okay bro, hope you made a difference on the internet today
running var obj = JSON.parse(data); var item = obj["item"]; var link = item["link"]; console.log(obj); console.log(item); returns [PHONE] pebble-app.js:?: JS: Hello JS: [object Object] [PHONE] pebble-app.js:?: JS: Hello JS: [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object] 
When you argue with trolls they will beat you down with experience. How far can we go to get the last word?
Don't worry, I've upvoted you up, and thanks for the response, but please see below, I've tried it.
omg, you're a geninus! Thank you! I didn't know I could run obj.item[0].property This works, I can handle it from here! Thank you again! 
It works, thanks!
Can you please help me with one more thing? I'm trying to see the length of my new array. Array.length doesn't return anything. Now I'm trying: var array = JSON.parse(data); console.log(array.item[0].name); var len = Object.keys(array).length; console.log("LENGHT IS " + len); but this returns "1"
No problem. `array.item` is the array. So it's `array.item.length`. Also I think that the variable name is kind of confusing in this situation.
You're the man!
And the performance.
The simple answer is 'get the text out of the #p1 and #p2 entities individually, instead of together, and add space manually'. There are a lot of ways to do this. One simple way is to get the text out as an array and then join it together with spaces as the separator: var elements = $("#p1, #p2"); var texts = elements.map(function (i, el) { return $(el).text(); }); var joinedText = texts.join(" "); $("textarea").text(joinedText); 
I see your point. Even with a fallback to regular loading, Safari in private mode reports localstorage as enabled.
Not if you're using localstorage for other things too. 
You have to be careful with something like this. There are a lot of middlemen (proxies especially, but I've seen other stuff mess with it) that compress PNGs. Also things like Opera Turbo will screw this up for users that don't even know what it does.
I'm not in the DevTools team. As I understand, it works as you described + the most costly functions are shown at the top (no matter what was the functions call order).
Only thing I can see is that you're calling options plural in one place and singular in another - is this just a typo in the question or actually the code?
Yep, that was it. I don't know how I missed it. Thank you!
What I'm about to say will not be popular. You've been warned. **Don't learn any frameworks.** ^^^Yet. Don't learn any JS frameworks, until you know the language. It goes without saying that JavaScript can be "weird" at times, but I love that. Knowing how JavaScript's data types work, how its inheritance system works, understanding hoisting and closures, etc. will help MASSIVELY in the long run. (And when I say "know" closures, I mean, know what's going on with the stack frames). That's the level of understanding you should strive for. If you go ahead and just do a framework, you'll encounter weird bugs that might be annoying to analyze. A lot of that framework's design choices won't be as apparent. You'll just be learning how to use the framework more than anything, and picking up a new framework will be harder, since there may be little common ground outside of the language they're for.
I'm going to counter pickgaurd with the exact opposite advice. **Learn all the frameworks!** Meteor is an incredibly easy framework to get a grip on. The learning curve is crazy low. If you follow along with the tutorials on the site, or a book like Discover Meteor, you'll learn how to write full stack JavaScript through Meteor in a weekend. Absolutely recommended. I'm not really sure what pickguard's suggesting that you do. There's no reason that learning a particular framework will obfuscate JavaScript, but it's certainly unwise to learn one and only one. There are like billion of them out there now, so learn as many as you can, get really good at a few of them, and in the time between learn JavaScript design patterns and 'The Good Parts'.
I'm going to write a (insert adjective) article! At least I'm admitting it!
I'm a bit fed up with this "You must learn Javascript from the ground up first" talk. I say go ahead and try a framework. Meteor is an exellent and fun choice. Tinker with it. Break some stuff. Find out what you "don't know you don't know". Get stuck and then go learn some basic javascript when you see the need. Just my 2c
Sorry I wasn't entirely clear. I suggested that OP learn JS without frameworks initially. Before I took the time to learn the language, I was essentially gluing frameworks and APIs together without *really* knowing what I was doing, which led to all sorts of ugly bug fixes and the like. After I spent some time studying the language and using it without the aid of frameworks, picking up new frameworks became much easier. Given how quickly JS frameworks come and go, it really does help to know the core language, in my opinion.
I wouldn't call this solved just yet. 1) Check the server headers for a return type of "application/json". 2) Check the expected return type in your Javascript. Depending on the framework, you would set the dataType to "JSON", assuming the headers are correct. 3) If the headers are not correct then you should figure out how to correct them at the server, assuming you have control over that. 4) If you can't control the server then use JSON.parse('JSONstring').
The json was correct. I didn't understand initially how json.parse worked. After it was explained here, I got it, and managed to map my values in my app. Thank you!
I'm trying to point out that JSON.parse is unnecessary if the server datatype is correct and the expected datatype from your javascript is correct. The AJAX code for most frameworks automatically parses the JSON, so all you have to do is make the request. Look at JQuery for example: [$.getJSON('url', function(obj){})](http://api.jquery.com/jquery.getjson/) Or the more verbose version of [$.ajax()](http://api.jquery.com/jquery.ajax/) $.ajax({ url: "/api/getItems", dataType: "json" //uses an intelligent guess by default }).done(function(obj){ //do something with obj here }).fail(function(err){ //notify the user })
This is decent advice, but I'd like to add that Meteor is one of those frameworks that is much more vanilla JS. It uses a lot of basic, native JS patterns. So for that reason I think it's a good candidate for beginner framework as opposed to something like Angular or Ember with their own idiosyncratic object systems and such. 
And more details on why not http://kukuruku.co/hub/programming/do-not-learn-frameworks-learn-the-architecture
200
Yeah, I would rather spend my time coding then talking to a library that I code. I think side projects like these come up a lot, just to distract from real work that needs to be done.
Look. You're not wrong. In fact, your perspective makes you very hireable. But sometimes even doing it wrong is good. You learn what poorly architectured and unmaintainable code feels like, and you'll learn to recognize flawed reasoning simply because you've been there before. That said, taking the bottom-up approach is good, and if your talent and motivation is high enough, a guaranteed payoff. The problem, in my opinion, is rarely about what you learn or how you learn it, it's about if you learn it at all. Motivation is just as relevant as methodology or curriculum, and I can only say for myself that building (and maintaining!) something interesting is a high motivator for me.
lol. its ok mate. had a look on the manual for the $_GET array and learnt new things. well appreciated 
It's not so much "steering others away" as it is "please learn from my mistakes." Given OP described themselves like this: &gt; someone who normally glues JS together I assumed they had done some JS and are capable of getting a holistic understanding of the language, since they're at least somewhat comfortable working with it. You're right, going through that journey can be a huge part of growing as a developer. But if there's any way to still have that journey more efficiently, then it's a win for OP! I did a lot more floundering than I should have, which is why I wish someone had given me the advice I'm giving OP.
For anyone struggling with the concept of Monads, I read this some time ago and found it helpful: http://blog.jorgenschaefer.de/2013/01/monads-for-normal-programmers.html. It's nice to have articles like this shared here, among all the framework debate and other things. I find more and more that whilst libraries provide lots of awesome abstractions for us, it is almost always the case that any domain specific application will require you to build up some of your own APIs. Lots of skills go in to building good APIs for a team of developers to use, but among them are learning concepts like these as opposed to _just_ the language fundamentals of javascript.
Hi. Some might be already familiar with the framework that was previously been a part of [CanvasQuery](http://canvasquery.com/). I took it to the next level which involves decoupling from canvasquery and letting you bind any renderer - as an example [integration with Three.js](http://playgroundjs.com/three) The difference between most engines out there is... that it's not an engine. There are no collisions, physics or entities. It's designed to encourage experiments, modularity, reinventing the wheels when they are square - or using great self-contained libraries that are already hanging around. [Three.js](http://threejs.org/docs/#Manual/Introduction/Creating_a_scene) [Tiny-ECS](https://github.com/bvalosek/tiny-ecs) [Makr](https://github.com/makrjs/makr) [Cannon.js](http://cannonjs.org/) to name some.
WONDERFUL. got it to work now. using the $_POST[] array. thank you very much
I've been programming for many years now and I am not convinced that either approach gives you better or worse architecture, more or fewer bugs. In the beginning you fuck up a lot and then it gets less. That's just how it is. If you start by reading a lot, you might make a few wiser decisions but not necessarily enough to recover the time you spent reading. You only *truly* learn when you encounter a problem and solve it.
I have draggable divs that coincide with color pickers. The colors merge together when the divs are moved accross one another. I need a way to pick the color that is created, think a painters palette mixing colors to get a certain color. I need a way to grab the hex code and post it to a text box.
I've tried before posting to use dataType, but it did not have any effect on the response object. Also, I have no control over what the server responds, it's just an application with a public API.
So you have a bunch of colored boxes (DOM elements) that have a slight opacity which you can stack? Then you'd have to go with the method which I described in your other post. Generate a canvas image from the entire page (or just the container that the boxes are in), pick a coordinate and extract the color value.
&gt; And when I say "know" closures, I mean, know what's going on with the stack frames Do you have a link or something to learn about this? 
You could also possibly calculate the color by finding out which order these boxes intersect and blend the colors together with some math. I don't know how to to that however... Edit: Found this http://meyerweb.com/eric/tools/color-blend/
Or, skip all the time wasted doing things the wrong way and learn some basic JavaScript? I think most people who have been programming in JS for a while all wish they had gone back and actually learned vanilla JS when they started out. I do. I wasted a bunch of time not knowing what the heck I was doing. Had I begun with vanilla JS then I would have saved a lot of time. 
I would definitely try stepping through your code in a debugger and examining variables to see what they contain. You'll find that you say: Base64._keyStr.charAt But it's actually defined as `Base64.keyStr`. So that will cause an error. You also try to log `input`, but it's in quotes so you just log the string `input`. Or even better (if this isn't just for educational purposes), use the built-in functions `atob` and `btoa`, and a polyfill library for older browsers such as https://www.npmjs.com/package/Base64
Here's your problem: ` input = Base64._utf8_encode(input);` At this point in your code, `Base64` is *declared*, but not yet defined (you're in the middle of defining it). 
Sorry, that was something I've tried before posting here. The code I got is with _keyStr.charAt I've updated the post.
Learn it :) It's the best general web app framework available to developers right now.
This isn't the reason. The functions are not called until after `Base64` has been defined. It's perfectly correct for them to refer to `Base64` internally.
Okay, now your code appears to work when I paste it into the Chrome console. Have you figured out how to work your debugger yet? Most likely you are not loading the code, so `Base64` is not defined when you try to call it elsewhere.
I guess I feel like you can't really be more efficient through that journey though, which was where I was coming from. I feel like being shitty at devel is like having an addiction. You have to want to get better before any advice or help you get from anyone really makes a difference. That means you have to hit rock bottom. I say let 'em hit rock bottom. :P
Interesting concept. I see how it can be really useful for games as OP mentions.
If you need me, I'll be writing "I will not comment on coding questions without loading the code" on the chalkboard 100 times.
"var string" is mine, used for debug purposes. The rest of the Base64 code is from stack overflow. But thanks for the hint!
Ah, finally, the long awaited sequel. 
I think you should start from ES5. It's a living standard and for a few next years it'll be common. Some things are really cool in ES6 and you can use them today with 6to5 transpiler, but I'd recommend to start with ES5 and keep an eye on news about ES6.
I've been lately writing very similar tool to encode data straight into spritesheets and premultiplied alpha caused me to investigate my all in all good alghorithms for hours.
We use Meteor for a pretty big app at my company right now and everyone loves it to death. I think the only complaint they've had is that it can be a bit resource hungry because of the real-time aspect and having to load all the resources it needs at startup (or something like that)
 module.js:322 throw err; ^ Error: Cannot find module './block-statement.js' at Function.Module._resolveFilename (module.js:320:15) at Function.Module._load (module.js:262:25) at Module.require (module.js:349:17) at require (module.js:368:17) at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/xto6/lib/syntax/function-expression.js:15:38) at Module._compile (module.js:444:26) at Object.Module._extensions..js (module.js:462:10) at Module.load (module.js:339:32) at Function.Module._load (module.js:294:12) at Module.require (module.js:349:17) at require (module.js:368:17)
Meh, I disagree. This whole thing reminds me of ruby/rails. We had a large rails population that didn't know how to write ruby. Why is that bad? Well, you hire people that can write rails apps but when you need other work done it's just ... face palm. So, if you're learning for fun.. do whatever you want.. if you're doing it to solve a personal problem.. do whatever you want.. if you want job security.. learn the fucking language.
http://en.wikipedia.org/wiki/Closure_(computer_programming)#Implementation_and_theory Although I think the original comment overstates the importance of knowing what's going on exactly behind the scenes.
I'm with you. Still learning, though! I've tried both ways -- I spent a long time trying to work through basic JS tutorials, avoiding jQuery, etc. and I just never got anywhere with it. I'd abandon tutorials and never actually wrote much more than a few lines in a console. On the other hand, when I tried to build something and had the "build it and finish it" objective in mind (as opposed to "learning the **right** way" in mind) I used whatever I had to use to finish the project... and actually finished stuff. Oh no, I used some jQuery! Oh well? I was actually able to add a few bits of useful, small functionality to my websites, making them look and act better. I built an age calculator for a game. I made a neat image map thing that I was actually *paid* for. That's like -- a hundred times more than the few shitty lines I wrote into console when trying to go through JS tutorials and "learn the right way." It hasn't mattered (yet) how poorly written it is. I know I'm not writing good code, and I wouldn't call myself a JavaScript developer. I wouldn't try to build anything incredibly complex -- simple projects, so that what I don't know I don't know has less chance of biting me in the ass. Is that gonna make things harder for me later, in un-learning some bad stuff? Sure, yup. But the alternative, at least for me, is slogging through JavaScript 101 tutorials for the rest of my life and making zero progress. I think I'll take what I've got.
is it just my imagination or is everyone suddenly discovering haskell at the same time now?
AS3? No, you probably shouldn't learn AS3 nowadays. Flash is pretty much dead. ES4 never made it into browsers. It was never finalized. As far as the current EcmaScript timeline goes, ES4 doesn't exist.
are you serious? please explain, what's the difference?
 &lt;input type="color"&gt;
With your background I would consider using EmberJS. It's built to be essentially the Rails of front end frameworks, and might feel familiar. In the end though you're probably best off doing a bit of research into each one to figure out what will work best for you and your organization.
in JS build tooling we already practically configure entire programs using JSON instead of XML, so we're reinventing the worst parts of the java ecosystem already
And circling back to the point about functional programming... XSLT is functional *and* homoiconic!
um, "view source" or https://github.com/olegberman/ascii-flappy-bird/blob/master/index.html
As a matter of practice, you should not name your IDs "#anything", they should always be just "anything". Hashtag is the ID selector notation that CSS and the query selector use to denote an ID. Along the same vane, you should never name a class ".anything" in the HTML ID. 
This sub is pretty interesting for it's diversity. In one post we're debating whether promises have "truly" monadic interfaces, in another, some guy is trying to wire up a basic html page. Maybe this would be more appropriate in /r/learnprogramming ?
You should at least invest time into learning the development and troubleshooting tools. While you can get off the ground without it, knowing what's going on under the hood is important, and is a critical tool for troubleshooting. This has never been more true than with the introduction of ES6, where the [temporal dead zone](http://es6rocks.com/2015/01/temporal-dead-zone-tdz-demystified/) can throw ReferenceErrors, WeakMap/WeakSet will garbage collect your data, and minor lunacy like the [global symbol registry](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for) which includes this Java-esque gem: &gt; To avoid name clashes with your global symbol keys and other (library code) global symbols, it might be a good idea to prefix your symbols The additional language Accumulated knowledge, experience, and tinkering allow you to make educated guesses about malfunctions that would otherwise cost hours or days to find and fix. Two months ago, Chrome 40 started throwing errors on some core functionality code I helped write. Chrome 39 worked. So did Safari and Firefox. It was initially chalked up to browser error, but even if the browser is wrong, we can't really leave the site broken. We found that we had passed a variable to a .then() of a Promise two lines before we declared it, and it was basically by the grace of JavaScript optimization that caused it to work in *any* browser. Two weeks ago a vendor shipped code like this: JSON.parse(readCookie('myCookie'); Without checking that the cookie existed. If it returned `null` like our cookie library, it would have worked. Instead it returned an empty string, which provides this "helpful" console message: SyntaxError: Unexpected end of input (program):1 If you are only accustomed to working within a framework or a library, you could spend a lot of time flailing rather than fixing.
Probably not. edit: yeah, not possible: https://code.google.com/p/chromium/codesearch#chromium/src/content/browser/frame_host/debug_urls.cc&amp;q=kChromeUICrashURL&amp;sq=package:chromium&amp;type=cs&amp;l=153
nice explaination
Why can't this stay here? Does this subreddit need to cater to your level of skill? We were all beginners once. I'm genuinely curious what the problem is.
Sounds like you need to spend some time reading the manual... Here is a link to the leaflet plugins page: http://leafletjs.com/plugins.html As for what you are trying to achieve (drawing some given route) you are going to draw a polyline, and that doesn't require any sort of plugin. http://leafletjs.com/reference.html#polyline
with jsFiddle, you have to pull up the browser console to see console logs though. It also has less room for each panel (code, html, css).
ES5 then ES6 because ES6 is mostly sugar.
No problems brah, just saying...
I can dig this.
Whoops, of course. Thanks!
Seconded, with enthusiasm. **Fail first, fail better, fail often!**
Ah well the resource hungry bit was only really an issue because we had multiple instances of our app running because we had a few people working and testing on separate branches. I think we ended up just not running like 4 instances of it on one machine now lol
Pretty nice game! However have you even tested it many different browsers? On Firefox it doesn't center properly and cuts the top off. Adding `height: 100%` to `body` should do it.
You can get started with this quiz too. http://www.hackandlearn.com/quiz/view/2/javascript-beginners-test
I feel like many of these are out of date questions that shouldn't be "taught" to beginners. e.g. "how to write Hello World" -- no, please don't ever use `document.write`. A lot of the others have almost no relevance (1, 7, 9, 10, etc) or repeat the same info again and again (24, 25, 27, 28, 29), are far too basic... I like that you're doing this, don't get me wrong, but the quality of the questions could be better.
What? You are off your rocker.
There seems to be some opinion that promises are over-engineered, or something like that. There was a similar post on here a few weeks ago and when I questioned the logic of re-implementing promises the response I got was basically "Well this does less" :/
Thanks for your response. I will take these points into consideration and try to improve better in the next quiz. For now, we were just trying to get use response about the content and UI, also UX.
The "What best describes the void" question made me laugh, one of the answers should be this quote “There is, in every event, whether lived or told, always a hole or a gap, often more than one. If we allow ourselves to get caught in it, we find it opening onto a void that, once we have slipped into it, we can never escape. "
It would be useful to mention that the questions can have more than one answer.
Sorry, forgot to mention it in the description.
I disagree with this advice. Learn to write code that can be used. This means either ES5, node+harmony, or an ES6 transpiler.
This is an algorithmic problem that is specific to how your color picker works. There is no way to just "get the color", you have to calculate it. If you post more details about your color picker / link a demo, we might be able to help more.
Whuh? I can't translate that into anything meaningful. How would (for example) just using rest parameters by themselves, result in code that cannot "be used"?
Nice slides. Your ES6 stuff can be written using `yield *`, no need to wrap with co, etc.
It is outdated now. Sorry for that question.
Or a community college course?
"Hey look, JSON is replacing XML!" -- 10 years later, let's write an article about it... &gt;_&lt;
Good job there. And sorry for my harsh 1999 comment. I think the constructive criticism regarding the questions was already given.
Could you be more specific? You should easily be able to achieve the desired feature set with basic leaflet classes. Unless there's something I'm missing. 
What is something awesome you learned recently? Now; write that down and share it at the conference! Seriously; There will most likely be a lot of people there who have not yet had that "Ah-hah!" moment, and since it's still fresh and exciting in your mind, it's the perfect time to share it.
Aside from the valid criticisms already given, which I am partially going to blame for my score, I thought it was fun. Got a 17.
wow this sux
I think this is the best suggestion. +1! Conference speaking is not about what the audience thinks they want to hear: If I’m interested in subject X, I can read about it on my own. And if lots of people want to learn about something (like ES-6 generators or promises), well then, lots of other people will have talks about it and you will find a bunch of people thinking that your talk is a rehash of the same thing they read and see everywhere else. The most important thing about your talk is that it must be personal. It must be a talk that nobody else could have delivered the exact same way you delivered it. If it is about a popular topic, it must present a new perspective, one that incorporates your experience.
... No need to insult me just because you incorrectly use spaces to indent code ;) Maybe a talk called "How to cause a riot in a room full of JS devs"? Tabs vs Spaces, comma-last vs comma-first, one vs multiple vars, hoisted vs non-hoisted vars, var vs let, brace positions... and then you show code with all of these styles mixed together.
Sounds like you need to spend more time reading the users questions :) he has just the coordinates of the bus stops, not the routes – so drawing a polyline (given only bus stop coordinates) will result in a "route" that will probably cross buildings and whatnot. I think he'll need to find the actual routes the buses follow (for instance, from the bus company site), or at least try to compute them using something like https://github.com/Turistforeningen/leaflet-routing even if, in such case, there will be no guarantee that the computed route will by the one actually followed by the bus. 
Can you elaborate on what part of Promises you think he's missing the point of?
All of my rage. 
^ future title of a dev sitcom.
A cool one to do I think we be on functional programming in JavaScript. Basically walk through the basics, or just an intro saying what functional programming means, then go into it's benefits. Then go into javascript examples, maybe start just Array.prototype.map(); Maybe some stuff about Immutable data structures. Then of course end it with a cool example. It'd be sweet to show them a simple app, and break something intentionally, and show them how easy it is to debug and find the source of the problem when everything is 'functional'. Depends on your audience though, they may just want to learn next weeks framework of the month, and not about programming. 
I don't think you want me to answer that... ^goes ^^off ^^^to ^^^^get ^^^^^gun
Use webservices to serve your content. Umbraco is a great cms for this.
Thanks much for the suggestion. Unfortunately, I presented this in another conference last year.
Just riffing off this bit from the article: "He may even tell me something like You're Missing the Point of Promises." The author has written a long dissertation on a problem that's already solved, and then described a solution that already exists, and for some reason intentionally avoided mentioning the alternative pre-existing solution until the very end of the article, and only to talk about how it isn't the same thing, except that it is the same thing. And if the author doesn't think that it's the same thing, then the author doesn't understand promises. Now I'd agree that generally, promises aren't sold very well. People explore the syntax and semantics of promises without going into their more theoretical underpinning or describing the actual problems they solve. [Trust me, I beat that drum too.](http://lazysimian.tumblr.com/post/115128560455/selling-promises-correctly) But this article just seems to muddy the waters by introducing the same concepts with different names and a slightly different syntax.
You could use CSS to solve this, if each cloned element is able to have a class. .cloned-element { some-css-variable: yes; } .cloned-element:after { content: " "; } Maybe not a JS solution, but should solve the issue. 
Promises really don't do much...
I'm planning to do so in the next few months..
This was the case, because I did not know about the modules in ES6. Thanks
Thanks for the link to cycle.js.
Thanks for the book recommendation.
true, is it possible to disable a iframe so users cannot interact with it?
Yes, I agree point D is not 100% true .
"the best"
Just to clarify, when you say you sent "more than 9 email templates", do you actually mean you sent more than 9 custom emails through a single template? I'm no mandrill expert, only used it a little bit, but I found it pretty straightforward. I'm using it for password reset emails, so each one has to be customized, both the mailto and the body. I have not attempted to sent more than 1 email at a time, but I would expect the API could support sending 400 messages without any weird rate limiting issues. Are you getting error messages back from Mandrill when the messages stop flowing? That would be helpful to know too.
&gt; What is something awesome you learned recently? Now; write that down and share it at the conference! Even if (maybe even especially if) it's something that you think is "basic" or "well, *everyone* knows this, who would come to this talk?" There's *always* some group of people who are relative newcomers who will eat up entry-level stuff because that's the level they need right now. I was at a 1-day database conference about 2 months ago and one of the beginner-level sessions was on data types. I sat in on it, hoping to learn something about types I hadn't used before; instead, about 2/3 of the hour was spent on `varchar`, `nvarchar`, `char` and `nchar`. Including trade-offs to consider when choosing one over the other, how special cases need to be handled, etc. For an experienced developer or DBA, this sort of stuff is second-nature to them. **But everyone has to start somewhere.** The room was *packed* and most of the people in there took valuable information from it. Even if it's a topic other people have spoken about, you'll have a different take on it and people want to hear it!
I wholeheartedly agree that the code for this game is ugly as sin and would never be acceptable in a professional environment. However, as this is not a professional environment, it can be very fun to write minimized code like this. I've found it fun to create convoluted one liners (especially ones that are recursive!) just to see how much I can cram into the smallest space possible. I would still call this 30 lines of code. 
I agree. I like matrices ever since Neo, but you know, _what_ can Neo do for me?
I'm making a static (but responsive) official website for a law firm this summer and was wondering how I should go about setting up my stack. I have a bootstrap template that I have downloaded which has a normal hierarchy. I'm using pure HTML and CSS and JS. Should I just use Grunt to minify the js and css?
Wow, I remember seeing this back when it had almost been launched. I have to admit that I pretty much wrote it off since it was just this one guy running it back then. It seems to have gained a lot of traction since then and it's amazing to see the amount of documentation. I was wrong. I'll probably try it out for my next project. Looking at it again, I definitely think something like this has a place. Angular and React are awesome. But let's be honest... they're both gigantic projects. I mean, I totally understand where they come from. Google and Facebook are huge companies with a gazillion developers each, building monster size websites. Both will lock you in a lot more than previous frameworks. Just look at the Angular 2.0 fuss. This makes a lot of sense for big companies where you need a lot more structure but do the rest of us need it? On top of this, both throw any kind of conventional terminology out the window for no obvious reason other than sounding novel. When working with some of those frameworks on smaller projects, I can't help feeling like I'm trying to build a robot that can weld me a titanium scooter. I'll never need a titanium scooter. Perhaps I just needed a bicycle in the first place. I feel the same way about the HTML5 boilerplate. Are we perhaps getting lost in frameworks that mostly make sense for big companies, sacrificing modularity and agility in small companies? Sorry for the long rant. JS is more exciting than ever but I'm just wondering if we are currently making things more complicated than necessary? Perhaps I'm just too concerned.
I still like it better than JSX because its easier to read and write by hand (without needing an external build tool). I'm comparing that to JSX output such as `React.createElement("div", null, "Hello ", this.props.name);`. It's still workable (as is JSX) and there are already some tools out such as [MSX](https://github.com/insin/msx) or an [HTML to mithril](https://lhorie.github.io/mithril/tools/template-converter.html) converter. In the end, it boils down to a matter of preference, I think.
https://www.youtube.com/watch?v=CUPDRnUWeBA
Only ever 9 seem to send, as if it's a cap of some kind. eg I attempt to send 400, 9 only send. I attempt to send 10, 9 only send. In this case I am using 3 different templates, to which different templates go to different users. Though right now only 1 is being used and the only difference between the sending of them is the recipient. Also there are no error messages, I put a wait command between each email send to see if it was because it was the Parse Job cutting off the sending of them, but only 9 sent still. And I know it's not a looping problem for the logs catch every cycle through the loop.
I can comment on "more than 9 email templates", he means sending a total of 9 custom emails through anywhere from 1-4 templates (depending on how new each user's accounts are). 
I will take your advice and keep on learning ES5. And from time to time I will look into ES6. What transpiler would you recommend?
Unrelated question: How did you manage to pipe XMPP to the browser? Did you use WebSockets or something? I'd love to see how you architected it.
Interesting. I have not used Backbone/Angular/React, but Mithril looks a lot like Ember, which is the MVC framework I use for JavaScript. it would be interesting to see how Mithril compares to Ember. EDIT: Sorry, not entirely related, I just have never seen Mithril before. 
I find that the community is very vocal about the new feature/framework/buzz word, and that there's an amazing number of tutorials on these concepts, but they are NEVER stretched far enough to actually be useful. For example, I had to recently build a hangouts-like application using webRTC whilst knowing nothing on webRTC. I googled a lot and found a ton of resources, bookmarked them and started reading them all while building the application. At first, I made amazing progress. There seemed to be an unlimited amount of information covering webRTC and I was able to build a working application from scratch after a couple of days. Then it all went downhill. When I tried the app on the wild, rather than on my intranet, it didn't work. Here everything started going downhill. There's a LOT of things that the community does not tell you about webRTC, and a lot of misinformation. Some samples: * WebRTC does not need a server! - This seems to be more a hype thing people like to say, but it's far from the truth. If you want webRTC to actually work in the real world, you NEED servers. And not just one, you need at least 3 different kind of servers (assets server, signaling server, STUN server). And setting them up SUCKS. * Build a video-chat in 10 minutes! - Doing a quick video chat sample is really easy. There's a bazillion articles and tutorials that explain how to build one. But they only work locally. The big problem is, the article does NOT address what you need to do to actually have it work on a server, how to deploy, how to not rely on that third party, etc. etc. * Frameworks are the solution! - Frameworks should make our lives easier, but the sheer amount of them makes it hard to pick one and, for some techs (like WebRTC), the options are few and scattered around. Everyone says "Use our framework! is amazing!" but very few explain exactly what is going on under the hood. It took weeks of browsing through the source to figure out what the heck was going on and why it wasn't working. Personally, I'd love to see these things addressed in a JavaScript conference. I don't care how great and hype webRTC is in the wild. I care about it's shortcomings and how exactly you address them to make a REAL and WORKING project. Alternatively, I'd love to see people encouraging developers to NOT use a framework. Frameworks should be a LAST alternative and a very well-thought one. Why do you want to use a framework rather than building it yourself? Is it WORTH it? Are you aware of the shortcomings of the framework? Does it adapt to your project ore are you adapting to the framework? Are you adding thousands of lines of code to your assets just to use one small function? Frameworks are the new jQuery plugins.
I thought this said "Building a TreeView in Australia". Couldn't figure out what the difference was. 
Wow. After writing that code, you would think you'd suddenly become aware of something seriously wrong with your framework if you were one of the architects.
Why 10.2 - 10 = 0.199999999999999999999993
Interesting read, thanks for the article. Sounds like it may be worth giving React a closer look before we take the plunge and update our app to Angular 2.0. 
I assume you'd say the same thing to the React developers?
Can we at least see a newsletter from a previous week so that we can get some idea of whether it is worth signing up? 
Have you checked Ember with HTMLBars vs React out? I remember it being on-par with React.
1st issue will be out soon and will be available from the website. You can also unsubscribe with no fuss at anytime. It will have the top few links (5 or 6) from the past week or so.
You could stick everything other than for-loops on one line separated with commas, that doesn't make it "one line of code": a &amp;&amp; b, c(), d(), e=f(), g || h &amp;&amp; i Most code competitions that count lines of code count commas (outside of for-loops) as a new line of code. Same for things line functions calls on one line, brace-less if statements, etc.
https://babeljs.io/ this one is the best
The showed and wrote only a little bit about it. But as nusclyde said, there will be a virtual DOM, too. Here is the design doc if you're interested: https://docs.google.com/document/d/1M9FmT05Q6qpsjgvH1XvCm840yn2eWEg0PMskSQz7k4E/edit#heading=h.nhg64961z5gu
TIL this is even possible. 
His name was Robert Paulson
The joke isn't really applicable to a subreddit _devoted_ to javascript discussion.
Right click in the login form and select "view source" However, all of their code looks to be minified, so unless they have it published on an open source platform somewhere (like github) you're not going to get much out of it.
Well, yeah, he dead. 
That does look insane. But if you're using a language better than javascript (like coffeescript or whatever), it can be really nice. Better than html even! `Coffeescript + JSX` is a complicated mess. `Coffeescript + Mithril` is a perfect match. That looks like todo code. My favorite todomvc implementation was made using mithril https://github.com/farzher/mithril-livescript-todomvc 
Interesting article, but I disagree with most of it. Especially regarding performance. Ember and Angular clearly have learned from React and plan to make massive optimizations inspired by the React model.
What the heck, his last commit was yesterday, did he die today or something? That's sad.
&gt; Robert Paulson Nevermind, googled it.
You should watch the movie. 
you people disgust me.
And while it correctly identifies the issues with angular 1, the reasoning is painfully narrow minded and misinformed...
"I dont know how x works, but I dont care because I am here to tell you y is better" :S
Sheesh, he's just brainstorming. 
My experience has been more like: 1. try to do it all from scratch. Because you're a beginner and don't know anything, Google for the solution to your problem. 2. Use the result from the Google search, which will not be "use a framework".
It can be confused with React. I mean there are something that is similar here.
Thanks for a constructive feedback!
I'll definitely suggest using grunt. Don't minify the js during development as it's not the fastest process -- not to mention it's not very helpful for debugging; only minify for production. Make sure you use "watch" in Grunt for development and its livereload feature while working on the front-end so that edits are visible instantly instead of having to refresh after every edit. I'll also suggest writing your stylesheet in SASS and transpiling it to CSS via grunt on watch. SASS lets you write much intuitive CSS as it provides features such as nesting and variables. I might also suggest writing your HTML in Jade since it has a much cleaner syntax and lets you reuse repetitive html components (header, footer, etc.) via templates/includes. This transpilation can also be automated in Grunt. Let me know if you have any questions :)
This was pretty good. I know if I used this as an interview/quiz tool, a lot of self-proclaimed "fluent in JS" folks would get spanked. Some questions seemed dated, but this is a beginner quiz --- you should know what document.write does even if it's not the best way to output HTML. I got 27; the Math.max() I did not know/never used, but I should have gotten the void as operator and the multiple choice (JS is not OO - should have marked) How about a beginner jQuery quiz?
Check out the web audio api -- you can do even more. It even does hrtf for you. It's pretty impressive.
Thanks for the reply. I downloaded the template online so would it be wise to use a converter for the html/css? Manually converting it would take ages. Also, does the grunt command automiatically minify js? If so, how do I disable it until production. And if not, how would I go about enabling it? Also, how should I go about setting up grunt on an already existing project? Thanks!
And then wait a few years to get a job using ES6 as most companies won't use it for another few years.
&gt;$Class imitates **PHP 5's** OOP [Screams Internally] More seriously though, I actually *like* prototypes in javascript. If I really want a class I'll use a compile-to like ES6, typescript, livescript, coffeescript. But usually it is more efficient to write compose-able functions and use mixins, and take advantage of the duck typing in JS.
pong with the canvas is always fun.
Woah! Wasn't expecting anyone to know what livescript is :D (which is why I mentioned `coffeescript` instead (even though livescript is much better))
that does sound like fun. I'm taking team treehouse courses and worked with the canvas to make a digital marker board. Thanks shadetheartist!
Creating a simple Forum with a client and server is pretty rewarding, and a good introduction to the types of problems you're likely to be solving in web development.
I'm guessing that you already have a heap of C# classes with various properties, and you don't want to duplicate that work in a new JS application. You could generate the JS model from your C# classes. You could use a T4 template and reflection to create .js files with declared observables - but that's not going to get you dependencies or computeds. To do that, you would need to add some property attributes to the C# classes. The attributes would contain a list of dependent properties that could be used to generate the computed's in your T4 templates. That seems like a lot of work for not much gain. Alternatively you could parse the non-compiled C# files, and figure out what the declarations are - then generate the js based on that. That would be quite complex, and probably a waste of your time. Can you give some background on this?
`fs.readFile` is what is calling the callback, so I believe that `msg_list` is being returned to `fs.readFile` instead of being assigned to `msg_list`. Can't you just emit `log-message` directly from your callback? I'm still a little new at this myself.
Your loadLog function needs a callback because it contains functions within it that are asynchronous and it's immediately (and invisibly) returning an undefined. You have a few solutions: 1. Use fs.readFileSync 2. Turn your loadLog function into something like this: code: function loadLog(callback){ fs.readFile('message.txt', function(error, result){ if(error){ return callback(error); } return callback(null, data.toString().split('\n')); }) } and call it like this: loadLog(function(error, result){ if(error){ //handle error }else{ msg_list = result; //Emit whatever you want now as msg_list //should contain your data } }); An alternative: Since you'll be buffering the entire file in ram anyway when you read it, you can just keep a copy of msg_list in memory and push new messages into it. Then you can flush it to disk whenever.
Usually people present a project they're working on, or a specific technique/architecture/etc. that they've figured out works really well. But it's usually something *they* made/discovered.
I've used it in a couple small projects and overall, I like using the framework. My biggest issue is the source code itself. It doesn't follow usual JS coding guidelines (eg. [this line](https://github.com/lhorie/mithril.js/blob/next/mithril.js#L98) which has a try, if statement, and catch all on the same line of code). I understand that mithril advertises its small code base, but to me, easy maintenance is very important. 
&gt; web audio api -- you can do even more. It even does hrt wow, I never realised ...
Ok, I admit that I've never even heard of this method, much less used it, and there's not a whole lot coming up on the 'net... I can see how it could be useful in some DOM-walking exercises, giving you an iterative approach over recursion, though I can't recall ever having to do that in the modern era outside of firedrill debugging. QSA works great for most things I might use this for. Anyone know of any practical uses for it?
&gt; Its paid well because it adds value, not because its fun. Yes; but it's fun because it adds value. One of my favorite jobs ever was working at Starbucks. All day I smiled and made coffee for nice people. It was fun because it was useful. So with programming. My favorite thing about programming is the feeling of power. That power is what they pay you for.
There's [Ironbane](http://ironbane.com/) ([additional info](http://davidwalsh.name/3d-websockets)), though it looks to be dieing out, so it may not give a very good approximation of performance with respect to the multiplayer aspect. The generic answer might be that it's possible, given current-gen devices and a simple game engine and graphics.
A lot of this you can do in React with a much cleaner api. Content tags in React for example is just a message prop passed in to a component, or even using {this.props.children}. The only thing that I think is really neat is having sandboxed CSS, but you might as well just use this project to inline your CSS as JSON: https://github.com/js-next/react-style.
FYI beepjs.com is blocked by malwarebytes as a malicious website. Maybe by mistake but I thought if OP has anything to do with the project he should know.
Yep, it's called [arrow syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions). Support is not very widespread yet, as it is ES6, but you can use it by compiling with [babel](http://babeljs.io/). It's mostly just a shorter replacement for anonymous functions, but it does have some cool features/caveats to look out for. someIntegerArray.map( (integer) =&gt; integer * 2 ); will return a new array with each value multiplied by two, because a one-statement arrow function with no curly braces will automatically return the result. function test() { setInterval( () =&gt; { this === "Hello world"; // true }, 1000); } // call with `this === "Hello world"` test.call("Hello world"); Arrow functions also are automatically bound to the outer scope, meaning the `this` value within it will be the same as the `this` value outside.
https://www.youtube.com/watch?v=apER2Xgnd3g We would also appreciate actual feedback about the commenting library itself :) 
I'm a strong proponent of diving in to whatever challenge faces you, not taking things one step at a time. In 2002 I was a back-end dev (classical ASP/MSSQL at the time) and started messing around with some JS -- really basic stuff like form validations for some of our sites. My first "real" JS project was implementing a calculator that used AJAX (years before the term was coined) to fetch prices / inventory from the server. I then implemented some comet stuff using long polling, the first js file uploader with live status, the first "photoshop-esque" color picker, etc. About a month after I first really touched JS I developed a t-shirt/label designer app that allowed you to drag images around, resize them, rotate them, place them in regions, add text, etc. This was pre-canvas/svg, so it was all done with DIVs and a server running ImageMagick with server-side JS powering the API. My point is -- don't ask what the "next step" is, find something you want/need to do and do it.
Wow, and FFT so you can do audio analysis? That is indeed impressive. 
ascii penis that extended when you ran your mouse cursor over it. I learned the basics of jquery that way.
if you're writing browser-side code, i would say es5. if you're working in iojs though, it cant heart to give es6 a spin. i think there are es6-es5 polyfills, if you are really determined, though
I'm using it for a personal fun project - keeping track of the # of pull-ups me and my friends do. Been a while since I spent time on it but I really enjoyed working with Mithril! :) http://app.dvk.co/ PS. To watch the actual Mithril app you need to login with FB, no special permissions are needed though. It just grabs your first name &amp; profile picture (no link).
Polymer seems like a much better managed project. riotjs has had breaking changes with minor version bumps that screwed shit up. When they first released the example on the README didn't even work. I really like the syntax, but I feel like it's way overhyped because of it's really nice site and good timing on hackernews. That said, there are other ways to get components. Someone mentioned React, you can do directives in angular (it's not as clean but very doable. but might as well not do it and wait for angular 2), and there are a lot of other similar libraries that are more mature. If I were you I would probably go React because it has the best docs and a very active community. 
Right callbacks are not fail safe as they will silently ignore an error, but the sync version won't ignore it. You can get node.js to be fail safe by either - using a linter like eslint that prevents your code from running if you have any unhandled errors in the callbacks - using promises and having a handler for the uncaughtRejection event which will throw an error if you ever don't handle an error.
Hardly any of the claims made on that page are properly referenced. The section about "failsafe I/O" is pretty much [original research](http://en.wikipedia.org/wiki/Wikipedia:No_original_research) and so shouldn't really be on Wikipedia anyway. The idea of a language having "failsafe I/O" is a conflation of two things: 1. Does the language have something akin to non-local exception handling? If so, 2. Does the language have built-in I/O capabilities that take advantage of the exception handling facility? So for example, the language C does not have built-in IO capabilities. It has a standard library that does IO, but that's distinct from the language (C is frequently used to develop operating systems in which kernel components do not have access to the standard type of IO, as part of the kernel's job is to *implement* that concept, so the standard library is not linked to). The same distinction is key to C++, JS and many others. So I'd disregard that section of the page (and take the rest of it with a huge pinch of salt as well).
In the scope above your click function add a variable to store the last jquery object: var $lastMenuLink; in click: ( remove toggle, so just remove the last, and activate the new one ) $lastMenuLink.removeClass('.li_lista_izbor_a'); $lastMenuLink = $(this); $(this).addClass('.li_lista_izbor_a'); ..
Or you could just remove the class from everything, and only activate the clicked one :D
Depends how you have done your HTML, and CSS
Are you trying to hack yourself past this count down? I doubt that that would work. And why that big hurry anyways?
Not likely. There is a large group of people who really want to have types in JavaScript. This combined with the fact that Angular 2.0 is using TypeScript and the fact that TypeScript is becoming rapidly more popular recently make me doubt it's going away any time soon.
Es 6 doesn't have static types, so I'll still use TS for the tooling. 
They are different technologies. TypeScript at a minimum is like a linter that will check one's code for mistakes, even going against some JavaScript standards if needed just to warn against potential issues sooner. In a way it goes beyond what a normal JavaScript linter would attempt. Also TypeScript will "package up" one's code to be compatible with ECMAScript 5 deployed versions of JavaScript engines. There are browsers out there that haven't been updated in a while and to them ES5 is all they will understand for many years. If we use something like BabelJS to package up the ES6 code into a ES5 version, it's already an annoyance just like using TypeScript would be. Lastly, TypeScript gives developers a way to add type annotations to their APIs. At large companies that is a standard practice even if it makes code more bloated. At large companies they will create code bases in the millions of lines of code very easily with things like TypeScript, whereas by default in JavaScript people would hate those large code bases. So conceptually TypeScript is just its own thing. ES6 cannot really replace it. It is hard to change the web by just creating new versions of things. It takes a while for those new versions to gain traction. Even early deployments of ES6 will not change the web overnight. Meanwhile TypeScript will be creating ES5 compatible code. Or BabelJS if you use that. If Google can come up with a "strong mode" for JavaScript, then ES6 + that strong mode would give us a little bit more of what TypeScript does by default. Because then mistakes could be detected sooner in the JavaScript standard.
I think this will be awesome for something like D3.js where you constantly do quite verbose stuff like .text(function(d) { return d.text; }); compared to .text(d =&gt; d.name); This is just one line but often you might have 10 of these chained per element, resulting in a lot of clutter compared to arrow functions.
disclosure: self-submission
Personally, TypeScript reduces the effort to understand someone-else's JavaScript. Say you're looking at a fairly complex project. At first, only the maintainer *should* understand the *context* of every variable being passed around. But to the new-comer, you really have to read the code to understand what parameters are expected (unless documented). For instance: function add(a, b) { if (typeof a !== 'number' || typeof b !== 'number') { throw new Error('Not a number'); } return a + b; } It's much easier to understand that this add function should only apply to numbers, when written this way and errors at compile time if used incorrectly: function add(a: number, b: number): number { return a + b; }
I highly recommend using the excellent underscore.js utility library. in particular, it has a function called isNaN that should do exactly what you want http://underscorejs.org/#isNaN edit: why is this being downvoted? I honestly answered the question, and provided a link to an extremely useful library. what do you all think downvotes even mean? 
This angers me ;) What way is the DOM API better than jQuery's API? If you say performance, at least consider that the jquery API would be implemented directly in the interpreter.
A cool side-effect is you can also use it to very easily create curry-able functions, syntax reminiscient of Haskell, e.g. - let add = x =&gt; y =&gt; x + y let plusTwoTo = add(2) let plusTenTo = add(10) plusTwoTo(4) // returns 6 plusTenTo(23) // returns 33 [1,2,3,4,5].map(plusTenTo) // returns [11,12,13,14,15] You can read that first line as: let `add` be a function that takes an `x` and returns a function that takes a `y` that returns a function that returns `x + y` 
NaN is the only value not strictly equal to itself. &gt; v !== v will be true if v is NaN. Both node and browser environment also have a isNaN function, no need to get lodash for that.
Are you saying you want to create websites with this "backbone of the web" language that will run on Android, iOS, and Windows? Or are you wanting to use the backbone of the web to create non-web native apps? Sounds like the latter. While there isn't necessarily a standardized platform for doing that, there are a number of solutions you can look into for this, including PhoneGap, NativeScript, and others which you could find and compare with some searching. My bias is towards PhoneGap, but I haven't used it in years, so I can't say how well it stacks up to the competition. PhoneGap has been around for a while, so my guess is that it would be the easiest to get into since you're just now trying to get back into the swing of things. But if you want to go bleeding edge, you could look into something called React Native. All the cool kids are doing it.
Probably the best approach is to transpile on [prepublish](https://docs.npmjs.com/misc/scripts) to Node's CommonJS/ES5. You can use Babel for sourcemaps and clean transpiling. Then encourage users to use a tool like webpack or browserify to consume your npm package. 
If you don't mind checking types all the time (i.e. if your code doesn't need to be _that_ fast), you could do this now with some generic objects and proxies. Something like: ints.x = 42; ints.y = Math.PI; // 3 ints.z = 'foo'; // error or even just: vars.x = 42; // int vars.y = Math.PI; // float vars.x = 'foo'; // error, x is an int or something like one of: vars.x = vars.int; vars.x = vars.int( 42 ); vars.x = int`42`; vars.x.int = 42; // I think I prefer this one, since you could also just do: vars.x.int; vars.int.x = 42; // confusing since you'd access via vars.x Or you could "freeze" all the types of an object: let vars = toStrongTypes( someObject );
I also don't really want "next java." But optional static typing isn't it. Java is bureaucratic and verbose for many reasons, only one being types.
Here's a couple of good ES6 links: * http://es6-features.org * https://leanpub.com/understandinges6/read/
Brilliant. I need to hack my app to play certain sounds when stuff happens - would be interesting to develop an app with audio feedback on the processes that happen.
I vaguely recall there was some sort of normalization confusion that arise when using isNaN() vs Number.isNaN(). If anyone else knows for sure I'd really be interested. I'm usually checking for [isNumber](http://node-modules.com/search?q=lodash.isNumber) rather than NaN so it's a problem I rarely encounter.
Can we take any song and convert it to a Beep.js score? I mean apart from vocals, which should be possible to replicate but not to modify(?), theoretically it's possible to reconstruct every song written, no?
I see what you mean. What about type guards then? I would really like types for some things (like interfacing with stuff that is static, for instance) without trowing out the whole language. Java treats programmers like children and its code is often impossibly bloated. This is bad. On the other hand, existence of IDEs don't automatically turn people into children, I think. There has to be a way for optional strictness w/o breaking everything JS stands for. Pattern matching to augment nested objects might be a way to keep jQuery "feel" and possibility of creating DSLs would maybe be a way forward. I also think that removing "with" was a mistake.
yes. read the documentation. \_.isNaN(object) will return _false_ when the object is undefined (or anything besides the literal NaN). 
Publish a pre-transpiled CommonJS version to npm (it doesn't need to be for the server to use npm as a package manager) and transpile &amp; UMD bundle any files you distribute yourself/via a CDN.
I think there is one thing that is grossly overlooked with dynamic vs. static typing: &gt; How do you prevent a developer from shooting themselves in the foot? With dynamic typing, a developer can pass boolean values to a function that requires numbers. A library maintainer can't be expected to handle **every** case of misuse. So where do you draw the line? Extensive, verbose, and hundreds of test cases? Why not push that problem onto the developer? &gt; This function only handles numbers. TypeScript applies the *it's still JavaScript* fundamentals, with the `any` type, so you still have the freedom to point that gun at your shoe. It's not all about the IDE. To me, it's about a safer context and reducing the need to understand someone-else's code.
I'm happy to encourage - but personally I'm not sure how I feel about 100% forcing everyone to have a build step. Also - if they're going to use Webpack/Browserify anyways - is there really *that* much value in pre-transpiling to CommonJS (as opposed to letting them do it straight from the ES6)?
So here's the deal about "ES6 replacing language XYZ": **It won't happen**. In the case of TypeScript, the user wants a type system, either out of preference or to meet a design requirement. Going further, realize that the compile-to-js guys will ALWAYS be able to add features to their language faster than the folks writing the JS language specs will. That's just the reality of maintaining browser compatibility. You have to update the language slowly. You can't add features hastily to native browsers or expect a governing body to be able to make huge decisions over night. That's not the case for the maintainers of compile-to-js languages. They can deliberate quickly, add new features and fix mistakes overnight. And they can ship a new version of the language every day. That's why I'm not buying in to the hype that ES6 will be a savior for compile-to-js users. I've been using arrow functions, string interpolation and classes in Coffeescript for years- we're just seeing them on a select few browsers today, and compatibility is still not at 100%. Sure, you can add a build step with tools like 5to6 and keep compatibility, but at that point, it's no different than if you were using a compile-to-js language: you still have an extra build step. **TL;DR** No, because the typescript community will be able to adapt to ES6 features incrementally, provide a superset of features not available natively and react to changing user needs faster than ES6 will.
Transpile to ES5 with UMD syntax and bundle with Webpack or Browserify into a `dist/` directory. I'd recommend [Webpack](http://webpack.github.io/) with the [babel-loader](https://github.com/babel/babel-loader) to do it all in one fail-swoop. Both webpack and browserify will handle the UMD/AMD/CommonJS/window['lib'] usages for you. Webpack can act more like ES6 modules as you can provide multiple entry points (or multiple bundles). This way, you just point the bower source at the `dist` folder. The alternative, is use [jspm](http://jspm.io/) package manager which provides an implementation of the [System](https://github.com/systemjs/systemjs) UMD loader. This is the ES6-ish way, but it's fairly new and doesn't have much traction outside of experimental ES6 testing.
Heh, yeah, I've written too much code to always remember what the hell everything does...
Just wondering. What is a practical application for something like this?
The boundary is the VM or the interpreter. If they can handle type misuse, it is still good. If they have to triple check it anyway, it would still be worse than double checking it or just checking it once. If the language was stricter and the VM could reject code that did not apply the types well enough, then it would be a different context. But simply making them optional would not fix that. Checking for correct types is not free of costs. For a language that is compiled/evaluated at runtime like JavaScript, those costs are not negligible in the least. With complex types like classes, creating the correct context is even more difficult. When I first started wondering about optional types I thought about them in the context of primitive types like ints, booleans etc. But with classes it's a different game altogether. Soon enough developers start to wonder about things that take multiple types or union types. And what if some of those APIs change in some dynamic library that you depend on? Will it break your code like in a cascade effect? For classes then people want greater care with what methods are private, protected, overriden, etc. Making their types more complex. So again, the issue is very much compounded. That's why people compare it to Java. The day JavaScript demands an IDE by default, I guess both Visual Studio and IntelliJ IDEA will be very happy indeed.
Runtime type checking can be done even now. I guess it is the preferred approach in dynamic languages. But it changes the issue so that checking for types is only done 10% of the time. People do use typeof quite a lot. I guess the problem is checking the type of functions or classes with typeof. They may explore that way of doing things, indeed.
Thanks :). I'm still very much learning in my free time... and the type annotation's actually optional and inferred for those wondering, but I've felt it's helped me write better code. 
IMO it's better to use something like [this](https://javascriptweblog.wordpress.com/2010/06/14/dipping-into-wu-js-autocurry/) to curry your functions so that you can still call them like `add(a, b)`
From what you've mentioned it sounds like a use case for WebSockets. 
Nope. Use a static type checker if you want that so for now, all ES6 is infringing on is Coffeescript.
FYI it is also syntactic sugar in TypeScript to preserve lexical scope (the "this" keyword) similar to ES6, however it compiles out to var _this = this;
Well I'm still on the fence about runtime type checking, as you're probably correct, it is not free of costs. I'm definitely a proponent of compile time (or source) type-checking, like TypeScript. In reality, it's almost no different than a linter, except for the fact that it does provide context (and in TypeScripts case, code generation). Be wary of what you call a primitive in JavaScript. Everything is an Object, *à la* **the** super class (regardless of OOP design). They change less often (probably never), but they still have properties that may get iterated on with a new version of ECMA. If a dependent library changes, I think it would break your code in a cascading effect regardless. Actually, you might be more susceptible to the change because now this "linter" is warning you of incompatibilities... You can compare it to Java, but you could more-so easily compare to it C++. C++ generally abides by the philosophy that if you can perform the necessary determinations statically (i.e. at compile time), you're better off doing that than paying the runtime cost of determining them dynamically. JavaScript at the moment only has type coercion to offset any issues with types, and it's almost too relaxed that you won't get notified when things get awry. function add(a, b) { return a + b; } add("foo", 6); // "foo6" At least python let's you know this is illegal, but at a loss of performance.
The main reasons for ES5 when publishing to npm is: - users can consume your library without any additional setup on their part. Just "npm install" and go. - the library works across frontend and backend apps (i.e. "isomorphic"), and its easier to integrate into Node/io.js testing and CI If you want, you can maintain a UMD build for those afraid of modern workflows. But you shouldn't force UMD on everybody. I've given up maintaining UMD files since I have hundreds of modules, and most of them are fairly useless without a build step anyways (since they are intended to be composed with other modules).
I made this library to resolve exactly this issue: https://github.com/bishopZ/Typecast.js Lots of people will explain how you can "do it right" even though it will involve unreadable olympics in ES5. Use a library, if not mine then $.type or underscore.js.
Is this like https://babeljs.io/repl/ ?
This is awesome. I'v been wanting to get into the basics of vanilla WebGL/OpenGL but like your paragraph states at the top there is a lot of dated material out there. I hope to see many more tutorials like theses ones.
oh that's cool!
I noticed that something like: Mouse.prototype = new Animal(); Does not translate to: Class Mouse extends Animal
How does this help with refactoring, won't unit tests help much more in that case?
That to me is weird. I would expect something that is undefined to not be a number.
A common thing I do when refactoring C++ code, is make a change, say changing a function's argument type from Blah to Butts, then recompiling to reveal all the places I need to alter code. This is pretty caveman-style, and many tools provide more automatic refactoring, but it illustrates pretty well how static typing helps out when refactoring. And all without writing a unit test. 
alright... of course there seems to be an infinite amount of websocket libs. do i go fancy pants or vanilla?
Websockets is a good place to start, but for completeness I'll mention SSEs (server-sent events). If your client-&gt;server communication consists of sending occasional commands, rather than a continuous stream of two-way dialogue, then SSEs might be an option. I like SSEs for displaying streams of data (like on a dashboard) where the client is 95%+ consuming data and only occasionally changing the display parameters. It would also work well for chat, where each new message is a discrete command from client-&gt;server and then a bunch of server-&gt;client update messages following. Websockets are optimized for full two-way communication where the clients are talking a lot, possibly just as much as the servers. SSEs are for server-&gt;client updates with only occasional client-&gt;server messages (which are sent out of band, typically via a separate http request). SSEs are somewhat simpler, give you slightly more structure in the message format, and are more resistant to firewall nonsense -- but are one-way and need a polyfill in IE. They are both pretty easy to get going, both on the JS side and in whatever server language. 
You could theoretically include React into any project as a 'web component - ish' module using browserify or webpack. Either way you have to include either the react or polymer libs (or both of you combine them). IMO jsx precompilation is cleaner than an html import.
Go with the most vanilla option you can find that manages connections for you and provides broadcast functionality. You probably don't want to mess with that yourself.
I actually put this together yesterday to save myself time in the future as it's how I've been writing all of my recent module: https://github.com/dustinhayes/open-temp For your use case, write in es6 and allow for browser consumption, I use browserify's --standalone, or -s, which compiles to UMD and allows me to specify the global name. &gt; browserify src/index.js -s global-name &gt; dist/global-name.js
Class constraints are wonderful, but sometimes I wish it were possible to make a "class constraint synonym" so I'm not constantly typing `(Num a, Ord a, Fractional b, Show b) =&gt; ...` or something like that. (Maybe that capability exists in some GHC extension somewhere idk).
Why would you do that??? if (isNaN(mynumber) === true) { //not a number condition //something } else { //is a number condition //blah } If there is no `else` condition then just if (isNaN(mynumber) === false) { //is a number Extremely straight forward
No, I mean underscores implementation basically returns that undefined is _NOT_ not a number (and therefore _IS_ a number?). That's what's weird.
I think this is kind of like posting a link to jQuery...
Um.... writtenNumber(1234); // =&gt; 'one thousand and thirty-three'
Let's go backwards!! &gt; writtenNumber( 1234567890123456 ) "one quadrillion two hundred thirty-four trillion five hundred sixty-seven billion eight hundred ninety million one hundred twenty-three thousand four hundred and fifty-six" &gt; parseNumericString( writtenNumber( 1234567890123456 ) ) 1234567890123456 function parseNumericString( str ){ var numbers = /\b(?:(one)|(two)|(three)|(four)|(five)|(six)|(seven)|(eight)|(nine)|(ten)|(eleven)|(twelve)|(?:(?:(thir)|(four)|(fif)|(six)|(seven)|(eigh)|(nine))teen)|(?:(?:(twen)|(thir)|(fou?r)|(fif)|(six)|(seven)|(eigh)|(nine))ty)|(hundred)|(thousand)|(?:(?:(mi)|(bi)|(tri)|(quadri)|(quinti)|(sexti)|(septi)|(octi)|(noni)|(deci))llion))\b/gi , total = 0 , part = 0 , match, i, l, power ; while( match = numbers.exec( str ) ){ for( i=0, l=match.length; i&lt;l; i++ ){ if( !match[i] ){ continue; } // 1-19 if( i&lt;20 ){ part += i; // 20, 30..90 }else if( i&lt;28 ){ part += 10 + 10 * ( i-19 ); // hundred }else if( i===28 ){ part *= 100; // thousand-decillion }else{ var power = Math.pow( 1000, i-28 ); // e.g. million ... thousand if( total &gt; power ){ total += part * power; // e.g. thousand ... million }else{ total += part; total *= power; } part = 0; } } } return total+part; }
 I wanted to see if the bot would actually manage to get to the `omg` part. :-)
&gt; You could theoretically include React into any project as a 'web component - ish' module using browserify or webpack. How would I interact with it? If it doesn't create a Custom Element (or extends one of the native elements), I can't just talk to it via the DOM. How would I use this "component" in a Angular/Backbone/Ember application?
Is there a reason why you're using hashes instead of dynamically loading content, then manipulating the URL with window.pushState() ?
Haha... Silly me; I've fixed it, thanks.
ES6 still doesn't offer good tooling. Classes and modules surely help, but without optional types it's just not good enough. ES6 is fine for small self-contained things like native Web Components. There is only your class and that tiny DOM subtree. That's all there is. That's totally manageable even with bad/nonexistent tooling. ES8+ *might* be a lot closer to TypeScript and Dart, but at this point this is completely speculative.
Hi /u/Pixels4Kids, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
No., do ES6 have static typing?
I have a use case. Say I want to allow marketing folks to throw together Google forms. Then eventually they want that data imported into longer term persistence system or to perform one time operations on the data, say sending emails. Also some mapping libraries would love this for simpler integrations with drive.
There is nothing mutually exclusive between a type system and unit testing. They both provide certain assurances about the correctness of the program, but do so in complementary ways. The unit tests can never check every single invocation of the function, but can verify the algorithm works for a variety of common and edge cases. The type system can never test the algorithm, but it can verify that every single invocation is sensible. Use both together to achieve the highest confidence in code.
meh, at least people who are new to javascript, or have not discovered this yet, will benefit.
I hate this shorthand function syntax. Hopefully I get used to it as ES6 comes to pass.
That one only transforms ES6 to ES5 code, it does not let you code in JS/ES6 with HTML, CSS.
Will ES5 make ES6, ES7 irrelevant?
Now this is a perfect SO question.
[Visual Event](https://sprymedia.co.uk/article/Visual+Event+2)
The comment wasn't only directed at you. I know people that really think JavaScript doesn't have types and like to actively hate on "anything with types". Sigh.
In Firefox right click -&gt; inspect, then in the DOM inspector click on the &lt;ev&gt; tag on the right of the element. In Chrome right click -&gt; inspect, then "Event Listeners" tab.
If you are using Chrome, you can find these by using the built in developer tools. Open up the "Event Listeners" tab.
I have been using, [nightwatchJS](nightwatchjs.org) for a while not and it works great for simple syntax browser based testing. If thats what you are looking. 
Better to think of it as scoping "this" differently rather than binding since "arguments" also carries through into arrow functions.
Thanks, nightwatch seems like a great tool. It's a little heavy for what I'm looking for though. I don't really need to assert values in the browser. Just something that will run a test file(s) in various environments. Similar to testling.
Yeah I mean it's not like any big projects like say Angular 2 are being written in Typescript. 
I see. So our company uses Google products but we lack automation because we can't query spreadsheets outside of Google services. Would this make it possible? I wouldn't have to download the data to access it?
Using a type system is not and should not be a replacement for a good documentation.
Hehe, yeah I think I got the idea from Crockford.
If you're using TS, you would have to transpile down to JavaScript 
Dependency update checking, CI, and API coverage checking. A bit too much for a simple function?
I've used jasmine and have been able to run tests both in the browser and under node.
Pretty interesting read, surprising the number of mistakes in the code.
I used Nightwatch a few months ago, and recently switched to Intern.io. I enjoyed both of them, but Nightwatch is sub 1.0.0 release (0.6.1 currently) and shows it. I kept having weird little bugs and found myself wanting more functionality. The flavor of Intern.io is a little different, but it's a lot more flexible. Of course, if you don't want something too heavy I suppose that won't matter :P Nightwatch is the lightest gui testing program I know of. 
Source code is available on github: https://github.com/ornicar/lila/blob/master/public/javascripts/big.js#L958-L960
Not native, but similar idea in Bluebird's [`.error()`](https://github.com/petkaantonov/bluebird/blob/master/API.md#error-rejectedhandler----promise) method.
I don't do much professional work in JavaScript, but in other environments I always have the debugger pause on thrown exceptions regardless of whether it would be handled or not. This does require your code base to only be using exceptions for actually exceptional things though.
Not really caveman style, its the most universal way to do it assuming you have typing enforced. 
Remove all new lines
if i go with one lib, do i have to use it on both sides, or can i for example go with sockets.io on the server and then use vanilla websockets on the client?
http://lmgtfy.com/?q=How+do+you+find+what+events+are+attached+to+an+element+on+a+web+page%3F
Right. You could have mentioned coercion, at least. Your comment did sound uninformed, hence the downvotes.
I didn't quite get MithrilJS until I found this guy's quickstart project which covers routing, modules, and authentication: https://github.com/konsumer/mithril-quickstart Also, the dependencies on node are almost non-existant. I had very little trouble ripping out the node code for a golang backend.
TLDR they use Rails and chose Ember. 
Although I do agree with the final conclusion... these "bullet points" are a bit hokey and the voting system is pretty jacked. Some important aspects left out: * Webpack can bundle multiple entry points. * Webpack and Browserify allow you to share code on server/client. * Webpack and Browserify support CommonJS **and AMD** (browserify uses deamdify). * RequireJS works with IE6. * RequireJS can work with CommonJS if you wrap it in a `define`. They are mostly interchangeable with each other. Also, I don't see how `gulp` or `grunt` hinder these tools... Webpack and Browserify both have watch systems with incremental compiling so the speed concern is minimal. What about jspm? Seems like a reasonable alternative. 
https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isnan
How does it sound uninformed? 
While quickly scanning the code it's incredible how little javascript changed in 9 years :|
This is bizarre. Why would he put the annotations on a crappy social annotations site, especially when he's annotating his *own content*?
None of the mentioned module loaders pollute the global namespace - both webpack and browserify wrap the resulting code in a closure before bundling.
You'd be really surprised now...
I don't know, man, I was drunk. Strong typing something, bla. I don't know. Flow is cool. Sometimes I like strongly typed languages. Sometimes I don't. Fuck Salesforce. Fuck Angular. Fuck javascript, but I love it.
Oh wow. A link to a link to a link leads me to here: http://ejohn.org/projects/flexible-javascript-events/ &gt;It works in all of the modern browsers: Windows IE 5+, Mozilla, Opera, and Safari I forgot that at one point in time, Chrome did not exist.
I see, could I compare it to what Visual Studio is to VB or .NET? Does it compile my javascript or is that done by the browser? 
I've never been there before. Wonder what it's like.
Couldn't you just extend jQuery to do this?
Possibly. But I only need it once in a very specific context. It was quicker to just write that one line.
 return this.each(function(){ // }) Is this only for chaining? This "syntactic sugar" is to not have to write: this.each(function(){}) return this; 
[/r/javascript/comments/31ucp9/rjavascript_a_subreddit_about_the_javascript/cq53up0](/r/javascript/comments/31ucp9/rjavascript_a_subreddit_about_the_javascript/cq53up0) An inception-like comment about "A subreddit about the JavaScript programming language".
Hate to break it to you, but that's rather terrible code. Types should be consistent. It should be either always be a string or always be a number. If you flipflop types, the code becomes very hard to follow and it also negatively affects performance. Speaking of performance, you're also always calling val() twice. Protip: Whenever you feel proud for writing something "clever", you should probably rewrite it in a way which doesn't require a comment.
I wish I had a special 100x upvote for cases like these. Instead, I'm writing this comment.
Hey, has anyone here ever used a computer or smartphone? You can access this site called reddit and read all sorts of useless posts!
\&gt; implying Angular 2 is relevant
&gt; Protip: Whenever you feel proud for writing something "clever", you should probably rewrite it in a way which doesn't require a comment. It's amazing how people will sometimes spend ages optimizing something like simple evaluations that has almost no performance overhead anyway. The next guy who bumps into it will then spend ages deciphering what is going on. Sure, sometimes we do heavy calculations that might require optimization but let's be honest: we're making websites, not a 3D engine for the latest Crysis game. Maintainability and readability is far more important. You can always optimize those 5 lines later if they pose a problem.
Sounds like your drunk because you work with Salesforce :D
Most are described within the annotations, like forcing "block" on show(); A lot are just better coding techniques, like simplifying plugins.
It's not a checkbox or a radio button hack. It's a full-featured library for toggle switches.
I gave that a try, however with my app the extension gets stuck in a error throwing loop and fails. Probably something wrong with my app not the extension. 
Why would you maintain the upstream codebase?
Hi, I haven't used flexslider yet. But i can tell you some main features of lightslider Please have a look at this link https://github.com/sachinchoolur/lightslider#main-features
It takes only a few commands to have all of that. `mocha-spec-cov-alt` the Mocha reporter I wrote, which outputs the coverage report for coveralls.io, sets itself-up running `mocha-spec-cov-alt`. `travis` sets itself up with `travis init`. The rest is just a matter of copy and pasting the badges. I've done this a couple of times now, so I'll generally just choose the last project I wrote, copy the headers and do `:%s/old_project/new_project`. You should do it too :D
The result is an additional programming language called template language. In Mithril there is just plain Javascript. To me that is a benefit that outweighs the use of m function calls.
Wouldn't traceur be properly pronounced as "truh-SOOR" rather than "tray-SOOR"? Also I thought the traceur devs had established that despite the French spelling it's meant to be pronounced exactly like "tracer" (i.e. "TRAY-ser"). EDIT: Can't find anything indicating either way, but at least one other article shows OP's pronunciation, so I guess I misremember.
You are, of course, correct. I was more amazed at how ridiculous you can be with javascript and still get something that would be quite a bit more verbose in other languages done in a single line of disgusting and yet, somehow, beautiful code. It won't make it to production like that, but the first pass code just amazed me.
Sounds like an amazing idea! I've heard about the old version of the game but this new one sounds great! I think it will be challenging but quite fun!
what about: var val = $target.val(); ?
I've only dabbled in Ember so my experience and knowledge is somewhat limited. However the limitations I encountered had to do with the "convention over configuration" debate that is mentioned in the article. Ember (like Rails) was great _until_ I had to step away from the conventions. At that point I was fighting with the framework and it was making me _less_ productive. Other less strict frameworks allow you to break away from the conventions (for better or worse).
Maybe start with what is padding/margin? :) Good article though.
Question is, do you really have more than 100kb in settings? That's 1/6 of your extension's size. Otherwise, unless the userbase grows really fast, Parse.com is a good alternative. Consider also Google Drive / OneDrive APIs, I've seen a few apps storing settings there. Really nice extension BTW. Have you considered porting to packaged app?
I've used mongolab.com in this situation. It puts an unfair amount of work on the user, since you won't want to hardcode creds in your app, but you can get to it from JS.
Version 0.0.3b, no documentation or examples? I'll pass.
Your idea seems very cool! http://www.aisheep.com/ has a few games you can write JavaScript AI bots for as well.
Ah, ok :-) Then what about var val = isNaN(+(val=$target.val())) ? val : +val; ?
The article mentions Backbone, which I have a little more familiarity with (along with [Marionette](http://marionettejs.com/)). You get some conventions and a basic idea of how to go about building your app, but it's much less of a "one true way" approach. With these it's up to you to develop the conventions and hope that you and your team follow them.
That sounds fun! I'd especially like to practice what I've watched from the edX AI course.
In a webbrowser you can set global objects by storing them on 'window'. Creating objects in javascript is as easy as '{ key1: value1, ... }' So between those two things you can do what you want. Is the data static? then just create the array once like this: window.myDataCollection = [ { name: "some name", lore: "some lore", link: "some link" }, ... // create as many of these as you want ]; If you _don't_ have all your data up front then you can create the array empty and create a function to add items to it as they become available: window.myDataCollection = []; // empty array window.addItemToDataCollection = function (name, lore, link) { window.myDataCollection.push({ name: name, lore: lore, link: link }); }; 
This sounds great and I'd gladly participate!
I need to use the data from the array in multiple functions to compare them to something else or add objects. What method should I use and how do I get the data to compare?
Hi /u/KreshnikH, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `libtrends.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [libtrends.com](/search?q=%28and+site%3A%27libtrends.com%27+author%3A%27KreshnikH%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|5|83%
[hello.js](http://adodson.com/hello.js/)
I understand *what* this accomplishes. What I don't understand is *why* it accomplishes it. &gt; A compact human-readable data serialization format especially designed for shell. The "compactness" achieved by eliminating single-element nested objects is trivial. And the savings from replacing commas with spaces is simply non-existent. Per the example, I don't see the readability advantage of this; endpoint:id:wikipedia pages:[Malta Prague "New York"] vs this; [{endpoint:{id:"wikipedia"}},{pages:["Malta","Prague","New York"]}] Also, optional quotes are crazy. Then again, maybe I don't understand what "design for shell" means, exactly. I read that as a terminal/CLI -- is there another meaning I'm missing?
Another solution for case B could be that **B** loses the tile and it becomes disputed between **A** and **C**. **A** and **C** would then have to keep attacking that tile until one of them gets the most hits.
Clever!
Um... what? function add( a, b ){ return a+b; } What kind of screwed up examples are you looking at where they're not using the parameters?
Just so I'm not missing anything, this is a for-pay solution, right?
 &gt; $ uson '[Malta true 1 undefined false NaN Number null 0 !0 !!0 -1, foo bar]' [["Malta",true,1,"undefined",false,"NaN","Number",null,0,"!0","!!0",-1,"foo","bar"]] ugh...
You should post to /r/Simulate - you might find some traction there. I hope I can remember this project to see how it turns out. I love all things voronoi. One thing I've always wanted to see is something resembling Conway's Automata in a Voronoi game - where different types of automata inherit each cell - and their behavior determines the shape of the cell or the ability to tunnel away through a barrier and adapt or defeat the new cell's rules.
Ah, I misunderstood a few things. A(Red)-B(Green)-C(Blue) | D(Orange) Case C) A attacks B x1 C attacks B x1 D attacks B x1 Result=??? and Case D) A attacks B x3 B attacks A x3 Do they simply swap positions? If so, you'll end up in an infinite tie game :/ --- I despise the idea of an RNG existing within what would otherwise be a deterministic game :(
Case C) Not certain. This has to do with the question I posed in case A). Either nothing (no one side has 3 attacks), or it turns neutral (there are 3 attacks, but nobody "won") Case D) Yes, they swap. In practice, however, this will rarely happen enough for it to result in a tie game. Most cells will have a "defensive line" behind them that are "attacking" their own cells, thus defending them. And with the randomness of the cells sizes/# of neighbors, you'll rarely (if ever) run into a case where you have a clean cycle of cells swapping. Though yes, it is possible that two AIs will just do something stupid ad-infinum until the turns run out it generally only happens with dumb-ass AIs that I'm likely to write as samples :)
Can you explain your game more? What do you mean automata? Like the "spaceship" shapes from game of life that repeat ad-infinitum? I don't follow the rest of the instructions either, but it sounds neat and maybe I'll build it if you can convince me ;)
KISJ - Keep it Simple JSON?
Please refrain from personal attacks.
It also would be a tighter payload across the wire. I looked at compressed size a couple years ago and was surprised to see that XML payloads were on average smaller than JSON for objects with a reasonably large number of date/time properties. Unfortunately I don't think this model addresses that issue.
&gt;JavaScript is indeed fail-safe as every error (syntax, type, etc.) that occurs that the programmer has chosen not to ignore (through try{}catch(e){}) is in fact thrown. So if your hard drive fails it throws a catchable exception in your code? No, I think you're completely misunderstanding what fail-safe means.
Don't do this, there are other ways of submitting a form aside from clicking on the submit button.
Don't do this, there are other ways of submitting a form aside from clicking on the submit button.
I don't follow? The question was how to react to the click without submitting, not how to trigger submit
Drop a custom (triangle shaped) marker at the point you want it, it'll stay the same size at every zoom.
As Pumpli was pointing out, your IIFE - the (function(){ ... })() part - is missing the last () to be called so that the whole code could be executed : [jsFiddle](https://jsfiddle.net/topheman/p5mfo8sp/4/)
If you only listen on the click of the submit button you won't catch people: pressing enter while the form has focus, tabbing through the inputs until they get to the submit button and press the spacebar, or some other javascript triggering the form submission itself. That is why you listen for the submit event and never rely on the submit button being clicked.
That is correct.
Definitely [leveldb](http://leveldb.org/)! It's absolutely awesome for these little one-off scenarios. It's an embedded database that works as a key-value store. You can: `db.get()` `db.put()` `db.del()` It get's better. `db.batch()` `db.createReadStream()` LevelDB is highly modular and fits really well with the io.js /node.js way of doing things. To get started: `npm install level` then in your js file: var level = require('level') var db = level('./name-of-your.db') // this will create your database if you don't have one. */ put some data in /* db.put('key', 'value', function (err) { if (err) console.error(err) }) */ get some data out /* db.get('key', function (err, value) { if (err) console.error(err) else console.log('value = ', value) }) 
While I do not disagree with the article, it seems to miss out on `_.partial()` which makes some of this stuff a bit easier to do in Underscore. Take the summation function. Here is a much simpler way to implement it: var add = function(a, b) { return a + b; }; var sum = _.partial(_.reduce, _, add, 0);
Do you know how to write a function? If so you'll just need to to use an operator to combine the names, the extra space and the comma: http://www.w3schools.com/js/js_operators.asp
I'd call this more of command than a question. Extra credit command.
 function makeFullName(first, last) { return [last, first].join(', '); }
Maybe you can just make transparent DIV outside map container and position it via CSS z-index above the map. If you need it as part of map component, then you can have two options: - use Custom Control element (which is normal DOM element): https://developers.google.com/maps/documentation/javascript/examples/control-custom - use Custom Overlay and in the draw method implement the correct size you want: https://developers.google.com/maps/documentation/javascript/examples/overlay-hideshow 
Depending on how many you need, and the accuracy of your azimuth, you could pre-make a bunch of markers, and change up which one you use based on the data. 
Extjs (Sencha) was pretty pricey when it was still relevant. 
I think canonical Flux is great if your actions trigger things like API calls and other "async" writes. Since it protects your store by only allowing a single change at a time (at least according to their specs), then it makes sense. If you don't _need_ all that, then you can probably use something _much_ simpler. I've recently implemented uni-directional data flow by using a project called [Baobab](https://github.com/Yomguithereal/baobab), which essentially allows you to piece out chunks of data from a large glob of data. This allows you to give components references to certain parts of data, and enact actions upon only those pieces, which is sort of similar to how dispatchers work. I think the idea of uni-directional data-flow is where the secret lies. Having all of your business logic in one place makes for much easier debugging and testing. Small, dumb view components that merely represent data at a slice of time also makes _them_ a lot easier to debug and test as well. React is really the gateway drug to what is one-way flow of data, which is a breath of fresh air compared to components that house their own business logic.
I used angular and backbone strictly for the client side. So there's no interaction with a server. For example, using the ng directives in Angular as well as creating directives, services, etc.
***Full New code with Workaround:*** javascript : (function() { //If the Script is not currently present, append to head. if (document.getElementById('rsbScript') == null) { var el = document.createElement('script'); el.type = "text/javascript"; el.name = "rsbScript"; el.id = "rsbScript"; el.innerHTML = GetRSBText(); document.getElementsByTagName('head')[0].appendChild(el); //Since bookmarklet that doesn't reference external sources, load contents of RSBScriptText function GetRSBText() { var s = String(RSBScriptText); s = s.substring(s.indexOf('{')+1); s = s.substring(0,s.lastIndexOf('}')); return s; } } RSBRun(); //This should have been appended to the head in the rsbScript script tag. //Code inside this function gets appended to head. function RSBScriptText() { var loc = window.location; var rsbStyle = document.getElementsByTagName('rsbStyle')[0]; var head = document.getElementsByTagName('head')[0]; var body = document.getElementsByTagName('body')[0]; function RSBRun() { RSBInit(); rsbStyle.active = !rsbStyle.active; RSBYouTube(); RSBReddit(); RSBImgur(); RSBxdaDevelopers(); RSBStackOverflow(); }; function RSBInit() { if (rsbStyle == null) { var style = document.createElement('rsbStyle'); style.type = 'text/css'; style.innerHTML = '.myPlaceHolder { min-width: 100vw; min-height: 56.25vw; max-height: 100vh; max-width: 177.78vh; margin: auto; position: absolute; top:0;bottom:0; left:0;right:0; } '; head.appendChild(style); rsbStyle = document.getElementsByTagName('rsbStyle')[0]; rsbStyle.active = false; } }; function RSBInitJQuery(callback) { if (document.getElementById('jQuery') == null) { var s = document.createElement("script"); s.id = "jQuery"; s.type = "text/javascript"; s.async = true; s.src = "https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"; s.onload = s.onreadystatechange = function () { var _success = false; if (!_success &amp;&amp; (!this.readyState || (this.readyState == 'complete'))) { _success = true; callback(); //Doesn't ever work. Still get "$ is undefined" on first click of bookmarklet. } } document.getElementsByTagName('head')[0].appendChild(s); } }; function RSBFloatLeft() { if (rsbStyle.active) { rsbStyle.style.float = body.style.float; body.style.float = 'left'; } else { body.style.float = rsbStyle.style.float; } }; function RSBYouTube() { if (loc.hostname == "www.youtube.com") { //There is an issue here, callback never works RSBInitJQuery(RSBYoutubeHelper()); } }; function RSBYoutubeHelper() { var height = window.screen.availHeight * .925; var width = window.screen.availWidth * .985; try { $('#masthead-positioner').css({ 'position' : 'relative' }); $('.player-width').css({ 'width' : width }); $('.player-height').css({ 'height' : height }); $('.player-api').css({ 'marginLeft' : '-25%' }); $('.player-api').css({ 'marginTop' : '-1%' }); $('.video-stream').css({ 'width' : '100%', 'height' : '100%' }); $('#player').insertBefore($('#early-body')); $('.skip-nav').hide(); $('.video-stream').click(); } catch (err) { alert(err); } }; function RSBReddit() { if (loc.hostname == "www.reddit.com") { var content = document.querySelector('div.content'); if (rsbStyle.active) { rsbStyle.oldMargin = content.style.marginLeft; content.style.marginLeft = '3'; } else { content.style.marginLeft = rsbStyle.oldMargin; } $('.side').toggle(); $('#header-img').toggle(); $('#siteTable_organic').toggle(); $('.listing-chooser').toggle(); $('.thumbnail').toggle(); if (loc.pathname === '/' | loc.pathname === '/r/all/') { document.getElementById('viewImagesButton').click(); } } }; function RSBImgur() { if (loc.hostname == "imgur.com") { var content = document.getElementById('content'); $('.right').toggle(); if (rsbStyle.active) { content.className = ''; content.style.width = '95%'; $('.panel').addClass("myPlaceHolder").removeClass("panel"); $('.main-image').removeClass("left"); $('.image').css('text-align', 'left'); } else { content.className = 'two-column'; $('.myPlaceHolder').addClass("panel").removeClass("myPlaceHolder"); $('.main-image').addClass("left"); $('.image').css('text-align', 'center'); } RSBFloatLeft(); } }; function RSBxdaDevelopers() { if (loc.hostname == "forum.xda-developers.com") { var sidepanel = document.getElementById('sidepanel'); var content = document.querySelector('div.page-showthread'); if (rsbStyle.active) { sidepanel.style.display = 'none'; content.className = 'page-showthread'; } else { sidepanel.style.display = ''; content.className = 'page page-showthread'; } RSBFloatLeft(); } }; function RSBStackOverflow() { if (loc.hostname == "stackoverflow.com") { if (rsbStyle.active) { document.getElementById('sidebar').style.display = 'none'; var w = 1050; body.style.minWidth = w; $("#mainbar").width(w); $("#content").width(w); $("#answers").width(w); $('#question').width(w); $(".container").width(w); $('.comments').width(w); $('.post-text').width(w); $('.answer').width(w); $('.question').width(w); } else {} RSBFloatLeft(); } }; }; })();
Original code before trying to implement workaround. javascript : (function myfunc() { var loc = window.location; var rsb = document.getElementsByTagName('rsbStyle')[0]; var head = document.getElementsByTagName('head')[0]; var body = document.getElementsByTagName('body')[0]; if (loc.hostname == "www.youtube.com") { InitJQuery(); repoYoutubeVideo(); } else { if (rsb == null) { var style = document.createElement('rsbStyle'); style.type = 'text/css'; style.innerHTML = '.myPlaceHolder { min-width: 100vw; min-height: 56.25vw; max-height: 100vh; max-width: 177.78vh; margin: auto; position: absolute; top:0;bottom:0; left:0;right:0; } '; head.appendChild(style); rsb = document.getElementsByTagName('rsbStyle')[0]; rsb.active = false; } rsb.active = !rsb.active; if (loc.hostname == "www.reddit.com") { var content = document.querySelector('div.content'); if (rsb.active) { rsb.oldMargin = content.style.marginLeft; content.style.marginLeft = '3'; } else { content.style.marginLeft = rsb.oldMargin; } $('.side').toggle(); $('#header-img').toggle(); $('#siteTable_organic').toggle(); $('.listing-chooser').toggle(); $('.thumbnail').toggle(); if (loc.pathname === '/' | loc.pathname === '/r/all/') { document.getElementById('viewImagesButton').click(); } } else { if (rsb.active) { rsb.style.float = body.style.float; body.style.float = 'left'; } else { body.style.float = rsb.style.float; } } if (loc.hostname == "imgur.com") { var content = document.getElementById('content'); $('.right').toggle(); if (rsb.active) { content.className = ''; content.style.width = '95%'; $('.panel').addClass("myPlaceHolder").removeClass("panel"); $('.main-image').removeClass("left"); $('.image').css('text-align', 'left'); } else { content.className = 'two-column'; $('.myPlaceHolder').addClass("panel").removeClass("myPlaceHolder"); $('.main-image').addClass("left"); $('.image').css('text-align', 'center'); } } if (loc.hostname == "forum.xda-developers.com") { var sidepanel = document.getElementById('sidepanel'); var content = document.querySelector('div.page-showthread'); if (rsb.active) { sidepanel.style.display = 'none'; content.className = 'page-showthread'; } else { sidepanel.style.display = ''; content.className = 'page page-showthread'; } } if (loc.hostname == "stackoverflow.com") { if (rsb.active) { document.getElementById('sidebar').style.display = 'none'; var w = 1050; document.getElementsByTagName('body')[0].style.minWidth = w; $("#mainbar").width(w); $("#content").width(w); $("#answers").width(w); $('#question').width(w); $(".container").width(w); $('.comments').width(w); $('.post-text').width(w); $('.answer').width(w); $('.question').width(w); } else {} } } function InitJQuery() { if (document.getElementById('jQuery') == null) { var s = document.createElement("script"); s.id = "jQuery"; s.type = "text/javascript"; s.src = "https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"; document.getElementsByTagName('head')[0].appendChild(s); } } function repoYoutubeVideo() { var height = window.screen.availHeight * .925; var width = window.screen.availWidth * .985; try { $('#masthead-positioner').css({ 'position' : 'relative' }); $('.player-width').css({ 'width' : width }); $('.player-height').css({ 'height' : height }); $('.player-api').css({ 'marginLeft' : '-25%' }); $('.player-api').css({ 'marginTop' : '-1%' }); $('.video-stream').css({ 'width' : '100%', 'height' : '100%' }); $('#player').insertBefore($('#early-body')); $('.skip-nav').hide(); $('.video-stream').click(); return '1'; } catch (err) { return '0'; } } })();
Everything in Ramda is curried so you can usually skip that `partial()` function. It's not missing it, but rather fully embracing it by default. This makes your code cleaner and more terse while expressing the same idea. You can use its placeholder, `R.__`, to partially apply in a curried function when needed.
But but... The documentation is inline with the code. I'll bite! Literally the first comment I look at says... /** * Set limit to 'max' 1600 HTML created at once * else ' new Array' will throw, and the whole * process will become slow if more then 1800. */ if ( num &gt;= 1600 ) num = 1600;
This article is a breath of fresh air in the world of JavaScript where it seems the solution to any problem is some new framework. The question of How can we solve problems with a better pattern and nothing more should be asked more often.
Classes are syntactic sugar meant to increase readability and therefore make it easier to write and understand code. If factory functions are perfectly readable to you and whoever is working with your code then this may not be a big pull. Private members are different in classes. You can use Symbol to create private members in a way that can be examined from a developer console or, if you are using modules, you can simply not export whatever is meant to be private from the module.
Classes don't offer any advantage. A good number of developers, however, are familiar and comfortable with classes. I suspect that's why they're being introduced. It's a shame, really. We'll have another lost generation, stuck with those outdated concepts.
I have no control over the API I am connecting to
I'm not sure I see how this helps me with waiting for a group of ajax calls to finish regardless of failure.
 booksAvailable[books[i]] = true; equals booksAvailable[books[books.length]] = true; Doesn't look very useful, does it?
No IE support.
fair enough, but still irrelevant. 
what the callback functions on the ajax request are doing, have nothing to do with the problem I'm trying to solve! for (var i = 0; i &lt; 10; i++) { $.ajax('/url/' + i'); } Happy now?
??? What I'm trying to figure out, is an alternative to $.when() so that I can execute a callback when ALL ajax requests complete, not just when ALL are successful, or ANY have failed.
Just use a counter or a library (e.g. Jake Archibald's Promise polyfill). Either way, you'll still have to take care of the thing I just mentioned. You can't close over the same counter variable in your callbacks.
Two main things. Firstly classes attach methods to the prototype of the generated object, meaning that there only needs to be one copy of the method in memory. Secondly, because of this use of prototypes, classes support inheritance which I imagine would be a bit more tricky with the factory pattern. This is the reason React is using classes, because your components *extend* the existing React Component class. Also I personally believe that calling `var s = new SomeClass()` is more explicit than just `var s = makeSomething()`, but I know that this is debatable (although for people coming from any other language `new` is probably more familiar) I should add that private variables can be achieved with classes as well. If you have the class in a module you can just keep a private variable in the closure that is the module. So this happens automatically if you're using CommonJS or AMD modules, but you can do explicitly like this: var MyCounter = (function() { var counter = 0; //private variable return class MyCounter { count() { //public method return counter ++; } } })(); var counter = new MyCounter(); console.log(counter.count()); //Returns 0, because it's publicly accessible console.log(counter.counter); //Returns undefined, because it's a private variable console.log(counter.count()); //Returns 1, because it's publicly accessible
Just use JSON. Nobody needs uson. 
according to google there is a complete callback, similar to success and error, just put it after error
[fiddle](https://jsfiddle.net/e4xbj14d/2/)
So here's how I would fix your situation: 1) Your &lt;button&gt; is inside a &lt;form&gt;. That means when you click it, its going to submit the form before it executes your javascript. What you want to do is remove the onclick attribute from the &lt;button&gt; and then set up something to catch the click event, prevent the form from submitting and then execute your function. e.g HTML: &lt;button id="coolAs"&gt; e.g JS: var submitBtn = document.getElementById('coolAs'); submitBtn.onclick = function(e) { e.preventDefault(); /* Prevents default button behaviour */ first(a, b, c); } 2) You should move your &lt;script&gt; from within the &lt;head&gt; tag to just before the ending &lt;/body&gt; tag. So this way you know the DOM elements have been rendered before you assign them anywhere. 3) Define your form fields as global variables for simplicity. e.g var drinkEl = document.getElementById('drink'); var shotsEl = document.getElementById('shots'); var customerEl = document.getElementById('customer'); This way you can access the values of each field from within any function (e.g customerEl.value). 4) In your function, you're passing the DOM elements as parameters. You should change this to pass through the field values instead. e.g. first( drinkEl.value, shotsEl.value, customerEl.value); This way you know you're only dealing with strings and not mixed &amp; matched types.
Fair enough. Though I wouldn't say that your example of private variables really compares with private instance variables which are really what I meant. You're only ever going to have one `counter` regardless of how many `MyCounter`s you make.
Excellent advice. I think it is also worth mentioning that - * `null` and `'null'` are not the same thing * there is a capitalized `price` in the code. be careful, javascript is case sensitive
&gt; Composition is not about being implicit and abstract. It's about small systems composing a larger system. The distinction escapes me.
who else would a javascript library be for?
Abstract in the sense that it doesn't serve a concrete purpose on its own such as an abstract class. In this case, I'm talking about a sub-system or module being fully functional in its own right. Then a larger system is built via cross module communication and a bit of additional business logic. Consider how you might build a directory searching program by combining "ls" and "grep". Both functional on their own but composable.
I've written a library that costs $1 billion US dollars to license for a single user. I require payment in advance before I can reveal its purpose.
Surprisingly lodash/underscore didn't make the list.
Something like this: function readPostsWhile(condition) { return new Promise(function(resolve, reject) { var postsSoFar = [], after; function repeat() { getPosts(after).then(function(batch) { postsSoFar = postsSoFar.concat(batch.posts); after = batch.after; if (condition(postsSoFar)) { repeat(); // loop again } else { resolve(postsSoFar); // we're done } }, reject); // if getPosts rejects, pass it back } repeat(); // start the loop }); } Example usage: readPostsWhile(function(posts) { return posts.length &lt; 100; }).then(function(posts) { }); If you use Babel or TypeScript you'll be able to shorten it by using arrow functions. Or even better, if you enable experimental `async`/`await`, you can write it like this: async function readPostsWhile(condition) { var postsSoFar = [], after; do { var batch = await getPosts(after).posts; postsSoFar = postsSoFar.concat(batch); after = batch.after; } while (condition(postsSoFar)); return postsSoFar; } 
&gt; Both functional on their own Again - that is not implicit and abstract?
Tip #1 fails completely: `array.valueOf()` does not convert to string. Splitting example returns array of strings with extra spaces. Also joining and splitting are enough only for very simple CSV strings: they don't take into account commas, quotes and newlines inside cells. Tip #2 involves bad practices: sticking values (function someFunction) onto the global scope (window). Tip #3 is an UX annoyance. Please don't do that. Tips #6 and #7 work only in ES6. While tip #8 works as advertised, you may want to switch it to a simpler and more obvious `array=[]`. This also helps you if you want to switch to immutable data structures. Tip #9 is a WTF: it has a syntax error (`"""`) and does not replace anything, but just wastes CPU cycles.
When you say the same functionality? Do you mean, handling the same thing? One of the first big drawbacks would be an increased amount of work and overhead for the same thing. 
So many years of NO! Don't mix your JS into your HTML! Now this... Eh?
Since updated with both.
Moment is great but it doesn't get my locale's date format right, so I can't use the automatic formatting.
Again. The problem is not what I expect the variable to contain.
As mentioned before, I want to react after a series of Ajax requests complete, successfully or otherwise. Any other detail is not relevant. I essentially want a fault tolerant $.when()
if they do the same thing for your needs, just pick one. Jquery is mildly opinionated, angular is highly opinionated and its ugly work to combine them. also, if you do this "just cuz" and I have to maintain it after you... -.-
This is great feedback. The article is a wiki type format and has been updated to reflect your points.
I had thought about that, but wouldn't this create a race condition? If I make only two requests and they both complete at exactly the same time, I may not actually reach that point.
Oh.. my ... god... I knew it had to be something stupid and simple... thank you!! Follow up question: How would I disable submitting the form by pressing enter?
hey @kuenx, last.fm scrobbling is now on board :) https://chrome.google.com/webstore/detail/soundcloudify/boblphpidkohagaoinepjgecndchlnbk
&gt; hey @sp4_dayz, last.fm scrobbling is now on board :) https://chrome.google.com/webstore/detail/soundcloudify/boblphpidkohagaoinepjgecndchlnbk 
Now this is the proper solution. Thank you for staying on topic!
I'm actually surprised to see moment being well liked. I am no expert with it, but the semantics for some operations has been very frustrating when I've needed to use it. One example: someMomentVar.startOf('year') is a mutating operation.
I didn't make it, no credit taken. Link to play: http://wizardwarz.nergal.se/
I haven't tested this, but what if you tried something like: var deferreds = $.map(books, function (book) { return $.ajax('/books/' + book) .done(function () { booksAvailable[book] = true; }) .error(function () { booksAvailable[book] = false; }); }); which maps your list of books into a list of ajax requests. Each gets dealt with in their own way, and sets `booksAvailable` accordingly. Then you do: $.when.apply(deferreds).always(function (/* ... responses */) { // I run when all the ajax calls complete. }); which will run separately once they have all completed in some fashion.
That's not how JavaScript works. Read about the [event loop](https://www.google.com/search?q=javascript+event+loop).
Ill prepare a proper demo that uses the module in a few hours.
Works wonderfully on my Windows 8.1 hybrid laptop! Also: What's North Kingdom?
I mentioned a few additional resources to my team in an email... But you're right, I should definitely include resources on the slides as well. Thanks!
Cool! I'll make sure to check it out. You might know this already, but GitHub has a hosting service. If you make a branch called `gh-pages` it will automatically serve it up under `yourusername.github.io/projectname`. I frequently use it for demos.
You can use Firebase, that takes care of the back end for you.
Why grunt over gulp?
Yea, I was trying to find out which service provider he's working with. Thanks for pointing that out!
I'll give you performance, tooling is debatable. Brevity, however, is right out. Documentation is nonsense.
the site looks nice. I think you can add something like an arrow (&lt; &gt;) for navigation purposes. I felt hungry after hearing the crunching sound at the dinning area. 
So cool! It works! However, the "now playing" indication doesn't seem to work yet. Awesome extension. I also like how it looks. Well done.
This isn't a "larger scale" though, that's the problem. Let's say this game runs for a maximum of 100 turns. The first 10 turns are unlikely to have any ties (as they're just going to involve players taking over empty space), and just an educated guess says roughly every-other turn after that might have a tie. So we're talking a maximum of ~45 ties in a game. If the game is actually "won" by an algorithm instead of timing out, there might be far less, 10-20. But for the sake of argument let's take a nice number like 30. I wrote a quick script to "flip a coin" 30 times, and ran it 10 times. Here are the statistics of one side vs the other (H, T, whatever): 0.366 0.566 0.5 0.666 0.366 0.533 0.333 0.4 0.333 0.433 You'll note that most of these are undesirable results in what should be a "deterministic" game. Further, even if they eventually even out you run into the common case where the _first_ few turns are very uneven. If you had results like `HHTHH` to start, and a small board (20 tiles), you're suddenly giving one player a 23-17 advantage, or 35%. This could be huge. For instance, the same idea over the first 6 ties yields: 0.666 0.666 0 0.5 0.5 0.5 0.666 0 0.166 0.5 You'll notice 2 _very_ undesirable `0`'s in there, and a `.166`
Moment is great if you're planning on doing a lot of date manipulation. For most applications just having a prettyPrint function and using getTime() for comparisons is more than enough. Which, funny enough, is all the functionality this article touches on anyway.
It sounds like you're drawing the triangles as an actual piece of polygon geometry. Handling scale changes is a huge problem with that technique. Instead you could use a [marker](https://developers.google.com/maps/documentation/javascript/reference#Marker) or even just a raw point and style it to represent the azimuth.
&gt;You're preloading 12MB in 121 requests. Ah, this was on my list and I completely forgot. Thanks for this. &gt;You need a proper loading bar. Know any that are easy/quick to implement? &gt;If anything, just use the requester's IP address for geolocation Yeah, I know that both time and geolocation can be faked, but surely a location via IP address would be pretty inaccurate on a whole? Anyone using a VPN for example...
Sorry, I didnt get it
I'd need a few thousands of markers...
Any supposed gains offered by virtual dom are erased by other bad design decisions. There's always a trade-off, but in this case the consequences just don't fit with the needs. Very few projects will benefit from the virtual dom, if any. "But, it's faster!" But, you've broken some important rules to get there. The noobs will win in the end, and they'll get every half-baked idea they never knew they didn't want. 
Thank you. Yes, it is possible to make them expand automatically. Not sure if I'll continue to work on this thing though.
Yes, that sounds like a pity. IIRC, Java has or is getting a new Date library which is based around immutable dates. 
The fact that it's ambiguous. You have to memorize that undefined gets set to a string and null to null.
I quite agree, but I still think it's worth a try. I do not want to replace JSON in generally but to create an effective extension for specific use, like writing objects in command-line or passing simple arguments.
Thank You! It now works on first execution in the console! But as a bookmarklet I still get "Uncaught SyntaxError: Unexpected identifier". If I implement your fix in my old version of the bookmarklet that does not persist to the header, I get "TypeError: undefined is not a function". So I assume my workaround of persisting to the header was the correct thing to do? I wasn't sure if it was accomplishing anything because it was only a guess that bookmarklet code does not stick around for callbacks. Also is there a better subreddit to ask questions and get help for this? I assume my question isn't relevant here so it's being downvoted. 
No but even with good documentation and comments, the more information to help you understand the flow of data the better. 
"Except here's the rub, as with my jQuery code, I've gotten a little too generous with moment, and now I'm seeing one of our production projects with the CPU running at 100+%" kill me
Hi /u/tonyfreed, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `tonyfreed.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [tonyfreed.com](/search?q=%28and+site%3A%27tonyfreed.com%27+author%3A%27tonyfreed%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|4|100%
Hi /u/gooserider, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I must agree with you, but this rarely happens in real life. People think it's enough to have types annotations everywhere. They put some comments of the sort "returns something" or "does something" and that's all. Some time ago I had to evaluate a library written by supposedly smart men. They overused interfaces and lambdas, had no comments and very poor documentation. The library was turned into spaghetti by these very facts. The type system could not help. We had to write our own simpler solution just to get our things working. So my comment is from a personal experience.
yep. as from version 8. and before Joda time, java's Date was a complete screw-up for years.
Yum!
and this: http://dreamsware.info/bahrio/bchm/ 
the blank canvas syndrome... never fear, it bugs most of us from time to time.
First, you must accept the fact that you will probably throw away a portion of whatever you write. Often times this is a problem for people just starting out; trying to find the "best" point of entry to avoid "wasting" time or effort. Two reasons for this: 1. Unless the problem space is very familiar to you, you will discover issues and new information that require you to redesign pieces that you thought were "done". 2. While writing an algorithm, you are *inventing* it. Only after it's finished do you have some understanding of how it works. You may decide to rewrite it immediately, using your new found knowledge. This is much like how we're taught to revise papers in school (ostensibly. I was never very good at that myself). Second, you need to decompose your application into chunks. I don't mean this in any technical way. Take "This application does A through Z" and break it down into things like "This button needs to do L + M + N when clicked". A single huge task is daunting, but many small tasks are solvable. So, with that in mind, there are really no "good" places to start. Mostly it comes down to preference. Pick a thing, any thing. Write it out. Even if you have to leave pieces commented out because you don't know how to do them yet. Even if it doesn't run! You will learn about your application and what it needs to be. Come back later and maybe the code will still be good. Maybe you'll have discovered something and realized that none of your assumptions apply anymore. Maybe you'll print the codebase out and set it on fire. This is all part of the process. 
Objects are inherently anti-modular. I'm not sure where you came up with that?
When you're drawing on the map, you're using the map's coordinate system. As you want your markers to be the same size on-screen regardless of scale, you need to convert between the map's coordinate system and your screen's coordinate system. This will change when you zoom in or out. So you'll need to adjust your markers on zoom change events. A quick look at API turns up this: https://developers.google.com/maps/documentation/javascript/reference#Projection Which should give you all the data you need to properly size your markers. 
Mainly for size - obj-stream was built for front-end apps, and's about 5-ish KB as apposed to ~120KB if you were to use node streams via browserify. 
great suggestion. thank you.
[wow](http://dogr.io/wow/muchdemo/suchscale/veryrotate.png)
why canvas? You couldve done this with the ancient art of image maps.
Uh... what?
But you don't put your logic in your view, you put the javascript that handles presentation with the view. Let us take a normal shopping cart for example. The normal way of doing it would be: 1. A view with some template language. This will contain logic such as loops and ifs. 2. A separate javascript file that will hook up on html-elements to hide and show etc. That is not separation of concerns that is separation of technologies. In react you would put that in one component file. But you will not have any logic that handles storage or removing/adding items etc. You would just call action creators. A/B testing is not very difficult either.
Give this video a chance and they will explain why they think it is a good idea. "Rethinking best practices": https://www.youtube.com/watch?v=DgVS-zXgMTk 
It works exactly like I wanted, thank you very much I'll rewrite my stuff with ES6 once I have some time
There is plenty of logic intermixed with html in the examples. Once you have an "if" statement, you have logic, and combining that with html the way react does is regressing 10 years, back to concatenating html in javascript. It's practically the same thing people were doing 10 years ago, only with a fancy new framework under it. In a few years people will come to their senses, and the same ones using React today will learn from their mistakes, and they'll be the ones pushing back against this idea, and no doubt other frameworks will replace React. It's the cycle of derp. 
k
I don't think an image map could have afforded the same structure and navigation, but I may be wrong. Can you explain more?
How did you generate that? Did you do that by hand or is there some reddit magic that automagically does this?
Maybe I'm missing something. You hover over different parts of the photo, click on a hitbox when you find one, then it fades into another photo depending on which hitbox you click, rinse n repeat. is that correct?
When I began to work with Ramda, I was a little bit lost in the API and I was reading the docs every 2 minutes to see if there was a more efficient way. Though, after some experiments it became more and more natural. The only problem is debugging. The code is much cleaner (because of the choices made for the API) but when it doesn't work it's a little bit hard to find what's wrong. Anyway, this is a pretty cool library I recommend everytime I can :)
Yes, and there are also nav buttons that return to homescreen, etc, as well as Web Audio API stuff throughout. Might have been able to do it via an image map, but it probably would have been more complicated than it's worth... What's your hesitation towards using the canvas?
well the DOM wouldve given you for free: hitboxes, hover and click events on hitboxes, linking from hitbox to next img using named anchors. You probably couldve done the whole visual implementation in 10 lines of JS, without Flash CC and CreateJS. (Disregarding the audio.) I mean it's perfectly fine if you did it as a learning exercise. You probably know more about Flash CC and CreateJS than me now.
Ohhhhhh you don't have to use JSX syntax, that was one of my main issues with it. JSX looks like you're basically storing a multi-line 'template' in a string variable with some placeholders in it. I think I see the idea a lot clearer now, thanks for the link. I will now have to waste my Saturday experimenting though haha
I'm not sure what you mean, a lot of libs are objects. They can be self contained namespaces with methods and options. If your lib is made out of objects that are self contained you can use that to structure your options and docs. Maybe modularization isn't the best term here but I'm not sure why it doesn't fit. 
Im pretty sure local storage is considered insecure so storing any session/login auth seems like a pretty bad idea to me.
Seems like `disableDayFn` only gets called whenever the picker is opened, which is probably why you didn't see anything. Here's a fiddle showing how it works: http://jsfiddle.net/jpwk4wpv/
ES5 does not have classes. Its has objects and prototypal inheritance. Don't try to use those as if they were classes. Its just not the same thing. Its possible to use some libraries to give you some behavior that might feel a little bit more like Java classes. For example [underscore.js has a helper function called extend](http://underscorejs.org/#extend) that you might find useful. Its still not exactly a Class, in the traditional OO sense, but the implementation of extend here will give you something closer to the style of inheritance you're used to.
Fortran is the future
&gt; ES5 implements classes Well, there's your first hurdle. Maybe you should consider starting with [ES6, it has classes](http://javascriptplayground.com/blog/2014/07/introduction-to-es6-classes-tutorial/). The real problem is the name *Java*Script. Javascript has fuck all to do with Java. The change from [LiveScript to "Java"Script](http://en.wikipedia.org/wiki/JavaScript#Beginnings_at_Netscape) was some marketing ploy to increase adoption. My advice: Treat Javascript like a completely new language (to you) and start with ES6. You'll need to know about [Babel](https://babeljs.io/) or another downpiler if you are writing code that needs to run in browsers. 
http://www.nczonline.net/blog/2010/04/13/towards-more-secure-client-side-data-storage/ just one example but there are plenty more post out there explaining the problems
ha. lol'd
I'd suggest just learning ES6. You can use Babel.js to compile to ES5 when needed.
And here I was thinking that you should just use NodeGit cause it's awesome and then you were! Thanks for contributing to that project it's helped a lot with our cloud deployment strategy. 
I agree. You will also be ahead of the curve when es6 is formally adopted!
That is my only gripe with it. We have someMomentVar.clone().whatever littered everywhere.
One big difference is js does not have classes, but rather objects are created directly from other objects. As has been said, ES6 is supposed to have classes, but if you want them now, you might look into TypeScript. It will give you classes all the way down to ES3, if I recall right. 
I couldn't help myself, so I created a function that works they way one might expect $.when to work. [reusable fiddle](https://jsfiddle.net/9wz1p0p2/)
Hah! That's great to hear man. I'm glad it's working out well for you. If you ever have trouble feel free to stop on by https://gitter.im/nodegit/nodegit
&gt; [JavaScript] just feels like unfinished product. Something that was thrown in at the last minute. That's exactly what it is, actually. It was thrown together in about 2 weeks and it was supposed to look somewhat like Java. Anyhow, I also recommend to use ES6. There are classes, modules, and block scope (use `let` instead of `var`). **Edit:** Thanks for all the downvotes, but that's what JS is. It really was quickly thrown together (in 10 days, supposedly) and it really was meant to resemble Java (superficially, that is). http://en.wikipedia.org/wiki/Javascript#Beginnings_at_Netscape
Change the title 
I'm in Aus at work, your site only works at night .. I won't be coming back. No one is going to come back. And, even more so when you don't say ANYTHING apart from only working at night. Overall, I'd give it about a -2/10 from the experience I've had so far. You've actually made it worse by showing no information to tell me what this is all about.
I've been using Google's traceur for the past several months and love it... https://github.com/google/traceur-compiler/wiki/LanguageFeatures 
I can't think of any. It does claim that it [isn't evil](http://sugarjs.com/native).
What garbage.
Backbone has all of that. It's very lightweight. You could read through all the source code and the documentation in an hour or two. It's not as full fledged as Angular or Ember (I don't know much about React). But I've done a small project with backbone and it was pretty simple to get going and understand. 
(disclosure: author of article [and of Ramda] here) While that is a clear improvement, it's neither the general way people use Underscore, at least in my experience, nor as clean as a simply curried version as in Ramda: var sum = R.reduce(add, 0); And it also misses the important link between the function `sum` and the total for a specific list, which in Ramda would just be var total = R.reduce(add, 0, list); In Ramda this connection is very obvious: Drop the list parameter and you get a new function. In this Underscore partial version, it's not nearly as clear: var total = _.reduce(list, add, 0); var sum = _.partial(_.reduce, _, add, 0); I've meant no critique of Underscore in this. I believe it's done amazing things for the JS community. I started Ramda, though, because I wanted to move off in new directions that Underscore didn't -- and in all fairness, probably couldn't -- support.
Thanks. I don't disagree, I started this thread to get some articles on getting the right mind set for OO developer, but received some helpful information on how to tackle shortcomings of ES5. I plan on learning ES5 of course, but as I do, I get a feeling that ES5 is trying to be something it's not, and ES6 addresses that.
Agree wtih you on this. The component invoking the service and then listening for the error seems to go against Flux design patterns. Having the actions as you stated is the way I understand things should work. Beyond that, wouldn't this problem be better solved in the router? I don't see why this requires wrapping components. Listen for route changes and authenticate routes as needed, redirecting to login if it ever fails.
&gt; I wouldn't hire an ES6-only developer. At the rate the web moves it wouldn't be practical for at least another 5 years. Today, there is Babel and in less than a year people will start to deploy "raw" ES6. There are more up-to-date environments like Node/Io, Firefox OS, Chrome OS, or Intel's Crosswalk. And even on the browser side, some people will make the jump. Not everyone supports older browsers and many go at most one version back. Anyhow, for a large "JavaScript" project, I'd go with TypeScript either way. If we don't expose some JS API to others and if there is little interaction with other JS libs, I'd go with Dart.
Seriously impressive :D
Java is to Javascript, as Car is to Carpet.
Mind if I attempt to throw it up on http://edit.js.io?
I have also programmed mostly in Java and only recently started looking more deeply into JavaScript. This presentation helped me a lot: Douglas Crockford: The JavaScript Programming Language -- https://www.youtube.com/watch?v=v2ifWcnQs6M Even if it's a fairly old presentation Crockford shows how JavaScript is actually an advanced language with powerful functions, closures and object prototyping.
LOL is this a troll post? Java is just short for javascript -____-; *facepalm*
Made me chuckle
Man, dates are always a pain in the ass.
I don't know the level of Java you've written but you might be more comfortable transitioning from Java to TypeScript. [This](http://www.johnpapa.net/typescriptpost3/) probably looks a lot more like what you're used to seeing in the Java world.
I think your comment on ES5 being something it's not, that is solved by ES6 is that you are trying to write Java code in JavaScript. To write proper JavaScript code you don't need classes or inheritance at all. It's there, but you'd be better off trying a more functional approach.
Argh, what is the difference?
Do learn vanilla JS. But you might enjoy TypeScript after that - it's an MS JavaScript extension language of a sort, and has a lot of concepts you'll be familiar with.
You have a couple of options here: 1. Go with a full stack FW, like Ember, Angular, BB, Aurelia etc. You will get a lot, but have to code in the FW style. 2. Go with a lib approach, pick and choose and glue it together. You could choose, say Knockout for data binding, pager/director/page for a router and other libs you need for ajax etc. Both have pros and cons, IMHO the lib approach is nicer, it gives you all the freedom to to things your way. You should also work out your build process, take a look a Browserify, its a very good piece of software, and i use in production. The bonus being you can use commonjs style modules (including node ones) in your app.
I'd stick with React + React Router for that (not least because I already [ported](https://github.com/insin/newforms/) Django's form library to JavaScript + React!), but [Mithril](http://lhorie.github.io/mithril/) fits most of your criteria.
These aren't really what I would call "shortcomings of ES5". It sounds to me like you may be trying to use OOP in places where it is awkward or not needed, getting slightly frustrated at it, and then blaming the language rather than the approach. Don't get me wrong, I like OOP as well, but in the right places. You might want to try solving problems in JavaScript by coming at them from a functional / composition viewpoint rather than an OO / inheritance viewpoint.
It's nice for your own applications but people will be upset if you use it with in a library you intend for other people to use (even if it's not evil I'd personally feel a bit violated if a library touched my globals)
This is a great comment, I'm really happy to see it. Design patterns are great tools in object oriented languages if the problem fits the pattern. That's why its called a pattern in the first place, since the same solution works over and over again in similar situations. Its what the terms actually mean, for chrissakes. It blows me away how often I see devs not give due emphasis to requirements analysis/design as part of the traditional software development model. It is the most important part of development, yet people just want to skip to implementation and plug in some framework or library just because its popular and fast to do. Then months later, everyone is tearing their hair out since the tool was not the best one for the job. Fast? maybe its fine for tiny widgets or whatever, but if the project is a sizeable app, the amount of crap that has to be done to get around the careless design decisions at the start will slow develpment down more than anything. I'm on a rant mainly because ES6 with its more OO syntax has me thinking there will be a lot more use of design patterns in the future. And it would be ideal if people understood the "design" part of the concept as the primary point. This happens all the time with lower level language projects. Misapplying design patterns is the best way to obfuscate your code and confuse the crap out of anyone else that has to look at it. Bad code is bad code, but if its OOP Design Pattern bad code, it's on another level.
That's something an evil framework would say.
I know. But I've been using it in apps for a couple of years and so far it hasn't murdered me in my sleep. So far. [cue sinister music]
ham or hamster... as long as it's dead and tastes yummie, it's the same to me.
They probably won't replace it, but what you are already seeing is that NodeJS is becoming the middle "communication" layer between the Enterprise core apps and the various channels required for the web. The API layer, etc. And Node fits that niche really well. That is why companies like MasterCard, PayPal and Netflix (just to name a few) are all using Node.
Pretend that the javascript is the template logic. You have more than one javascript file and instead of separating your technologies (putting some view logic in the view and some in a javascript file, for example hiding and showing a div) you put all your view logic in one file. And all your "real" logic in another file. You don't need to do it this way for some virtual dom, it is just a nice way to structure your code.
Ehhh React is a view model and Angular is a framework. Comparing the two would be like comparing a rainbow to aquamarine.
Correct, more features in the future would include sql like queries. And getting nested json.
Nice !
It does, though. With Crockford's closure inheritance you can emulate static, private and public methods and variables. I'm not actively using it, since I haven't really found a good reason to adopt it fully, but in principle it works quite well.
this is already happening actually. source:work for very big enterprise vendor. wish i could give more details but lets just say this, if you master javascript you could also have a very cushy job in the enterprise market very soon if you want. frankly im amazed about how much html5/javascript is replacing at least in terms of guis and frontend. 
I'm using react-router and my top-level route handlers (which are react components I call "sections") have an authentication mixin which determines if they or their children need 'authentication'. Much like the article's approach. I think it's pretty much the same approach as you stated, but you just need to consider the top-level components to be the glue between your actual views and the routes (i.e. route-handlers). I'm about to make this a lot more complex by adding roles and permissions, don't see any problems yet... (If you do, I'd love to hear it :-)
&gt; Using a map function inside a react class, and other react requirements of the this keyword, causes me to spend an hour every couple days debuging why my value is missing "when it's clearly right there, I'm looking at it." This is a solved problem. Use arrow functions for lexical `this` - if you're using React's JSX transpiler, use its `harmony` flag. If you're using Babel, it's already there. Failing that, write all your modules in strict mode to turn missing "this" context into an error. 