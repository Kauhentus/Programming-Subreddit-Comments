You can use a free XP VM from [modern.ie](http://modern.ie/) which will run older versions of Netscape Navigator. [A function inside another function is a syntax error in Navigator 3.04.](http://i.imgur.com/QDxUKAh.png) but not in 4.08. I haven't gone through the individual 4.0x versions, though.
If you're a software engineer and your preferred platform is Windows, then you have bigger problems than whether or not you can compile your code with Flow. :)
Then you're going to have to divide up your problem into different domains. You need basic background materials on how to program in javascript, and good articles the use text/point-and-click adventure game development as the basis for teaching programming. The concepts involved will be very generic, it doesn't really matter if the coding examples aren't in javascript. edited to add: I found a [related thread from a year ago in /r/learnprogramming](https://www.reddit.com/r/learnprogramming/comments/2da0v6/sample_code_of_textbased_adventure_game/).
Nitpick addendum: :-p You're absolutely right that closures are created at the moment the function itself is created. OP and others can probably be nitpick-safe and still keep their overall point by instead saying closures **become interesting** when a function creates and returns another function, because it's only then that we can make local, scoped variables outlive their scope, and that's the magic closures provide.
Not entirely sure how garbage collection is implemented in JS/CoffeeScript or which `require` implementation you're using (webpack/browserify/duo), but `require`ing jQuery reads the contents of the object from an external file. As jQuery is a sizable chunk of code, if you are that concerned with memory, you would probably be better off creating a base-level instance as in the second example. This way you wouldn't have to worry about reading from the jQuery file every time you call the function. Unless, of course, you are only calling this method a few times - in which case it probably won't make a difference. Also, is this really the only instance in your code where you use jQuery? If so, you may want to find a more lightweight way to accomplish what you want here.
I've gone back and forth on this issue and come to the conclusion that postcss is just too much to give up at this point, if/when js-css tooling becomes as powerful as postcss I will consider taking another look.
Then how didn't this come up? http://www.ranviermud.com/
hahahaha holy fuck, I screamed. that's cute.
in your console, write `new Date()` you should see something like the following: `Date 2015-10-31T08:38:48.391Z` This is a utc time. When you send it to the server, it will likely come through as a string that looks like that, the server will recognize it as being whatever time it is, timezone independent. That said, moment is so useful for creating, modifying, formatting and comparing dates -- it's super-useful. Even though, without it, the fundamentals of dates in javascript are pretty sound -- it's all UTC. For fun, you can write `(new Date()).toString()` -- this will show a formatted localized date time string that takes into account your time zone.
If you appreciate your precious time enough, moment.js is the best way to go.
I know ng1.x, but ng2 is an entirely different framework (though I've dabbled). I'll restate for clarity: &gt;is there a clear migration from 1.x to 2.0?
I know ng 1.x, but 2.x is an entirely different framework. Apparently conveying my reservations in a sentence was unclear, so I will restate as a self-quote for clarity: &gt; is there a clear migration from 1.x to 2.0?
2.0 will be very different, but they'll be able to exist within the same application according to the angular devs. The same principles will still apply in 2.x that were there in 1.x as well, just different syntax or execution. Flex your mind, learn angular 1.4 and then 2.0 when it comes out. Make money switching sites over from 1 to 2. Etc...
To add to this: http://yellerapp.com/posts/2015-01-12-the-worst-server-setup-you-can-make.html
I have no ambition for making money, only making great applications. I already know 1.4, and see a lot of benefits in ng2's performance, but I can't afford to invest much time in an alpha lib without clear direction. 
The bug is a feature
The location of the require is of no consequence since the module system has to cache the evaluation result / export of the module per commonjs spec. So whereever you require jquery, it will be held somewhere in that cache. Of course requiring it in a method and then not calling the method will not load jQuery if it is not loaded elsewhere. 
Understandable. OOP in JavaScript is not like OOP in other languages. I think there is a natural inclination to want to program in an object-oriented style if that is what you know of programming. If you are new to JavaScript I strongly recommend **not** immediately jumping into OOP. In JavaScript the scope model and the inheritance model are not the same. The scope model is an absolutely inescapable feature of this language, where on the other hand you are not forced to use inheritance, so therefore inheritance is optional. This is wildly different from a language like Java where everything is a class. Baby steps. Learn the primitive and foundational concepts of this language first. As you build up momentum (and confidence) ease into OOP. If your application has no OOP conventions it might still be an ok application while an application that is entirely OOP might still be complete garbage (OOP is a stylistic convention of choice and is not a safety net).
What frameworks do you work with? Maybe do a framework specific course and get natural with a particular system. Meteor can be pretty quick to get started with if you're used to Javascript syntax. I think it clicked for me I got working with PassportJS - the learning curve covered routing, authentication, front end development and by the end I felt like I understood and could fap out whatever simple ideas I had. 
ES1 didn't even have function expressions
&gt; 1. What skills should I display in a resume/portfolio? What type of position are you after? Strictly javascript developer? Front end? Full stack? Portfolio itself should/could be developed by you to display ability to create a website which fulfills the 'build a website' skill. Optional parts : Front end - a basic grid system library/framework using SASS or LESS. Front end - a template configuration UI, make it work on the existing page. Javascript Developer - An application which does something. Just spit balling - a text editor like TinyEditor (but modern) : https://github.com/jessegreathouse/TinyEditor Javascript Developer - An application focused on an API (TMDB, Twitter, pick one) Full stack - CRUD front end and backend - todo list, task list whatever. Just be sure to limit the scope cause it can get away from you. Full stack - Build an API and a simple front end to consume it. &gt; 2. What will truly take my code to the next level while I'm making a portfolio? I have no idea where your code is currently. Start building complete projects, increase the scope of the projects beyond what you've already done. Solidify it as a process (document the process, use versioning, build tools, etc). &gt; 3. How do you get yourself out of a rut and figure out what you want to develop on your "free-time"? Getting out of a rut is usually just letting time pass for me. I don't have a problem with the latter. Problem for me is finding projects I can develop that can generate revenue. &gt; 4. What made it just "click" for you? Were there multiple "clicks" that happened as time went on? I'm not sure it ever clicked. Some things didn't make sense until I used them multiple times but it was never like 'ah that explains everything'. Don't think that will ever happen.
Horrible APIs are just hard to use, not impossible to use. There is some production code out there with over 100 parameters. Using that many does of course totally work. The maximum number of positional parameters is usually 255+. Most style guides suggest a limit of 7. Some believe that 4 is already stretching it (e.g. *Clean Code* by Robert C. Martin). Passing objects with a zillion properties to functions which only need a few of them is a bad idea. For example: showContextMenu(mouseEvent) How can you possibly test this kind of function? Which properties do you actually need? How do you call this in response to a KeyboardEvent? Things are much clearer if you're explicit about the things you actually need: showContextMenu(x, y) See also: https://en.wikipedia.org/wiki/Law_of_Demeter This "law" may sound like idealism, but there is a very good reason for this rule of thumb. Things really do get weird if you hand over too much information. You see, if all this information is available, you'll feel inclined to make use of it (and you will). The result is strong very bizarre coupling, which is extremely hard to untangle.
I'm not a JS expert by any means, but I also try to avoid jQuery mostly because the few features I would like to use from it have had equivalents in most browsers for quite some time now (e.g., XMLHttpRequest and document.querySelector).
Definitely My back end is built in java so I serve up jsp's which are populated with reusable jspf's where possible as I try to keep that balance of DRY and easily readable. I read it from this [blog](https://scotch.io/tutorials/angularjs-best-practices-directory-structure) and really liked the pattern. So my index.jsp may look something like this: &lt;!DOCUMENT html&gt; &lt;html&gt; &lt;head&gt; &lt;%@included file="WEB-INF/app/shared/headStyles.jspf"%&gt; &lt;%@included file="WEB-INF/app/shared/headScripts.jspf"%&gt; &lt;/head&gt; &lt;body&gt; &lt;%@include file="WEB-INF/app/component/nav.jspf"%&gt; &lt;%@include file="WEB-INF/app/component/myWebAppComponent.jspf"%&gt; &lt;%@include file="WEB-INF/app/component/footer.jspf"%&gt; &lt;%@include file="WEB-INF/app/shared/bodyScripts.jspf"%&gt; &lt;/body&gt; &lt;/html&gt; Now all of my jsp fragments link out to the jsp page within the components folder which is a self-contained component. Notice I have a headScripts file which will hold any javascript that is needed for the pre-load part of my page (like angular), otherwise I like to make sure all of my javascript stays at the end of the body to speed up rendering of the page. Inside each component it would have the controller.js for that immediate controller. This has allowed me to pick up a web component out of the "components" folder, keep all of the functionality with it, and only have to ensure dependencies are established in my package.json or bower.json files (such as js libraries or css). So each component has a folder structure as if it were an ngApp all by itself (Just know that you will have to bootstrap each one). There has been a big push in my corporation towards a microservice architecture and modularity using things like Cloud Foundry or Heroku PaaS. We have heard of other companies running their entire infrastructure with under 10 people able to handle the load of the old-school Waterfall "Phase Gating" strategy which took exponentially more people. Even Agile or the many hybrids of Agile can be bastardized to create too much process and checks and balance. I have been forced into a position where I have to build an app almost as fast as someone can talk to me so I have to constantly try and find ways that everything I write can be re-used if possible, otherwise I need to consider other approaches. This has been helpful as I can now build applications almost as soon as my meetings with business are done, bringing in my components as if they were independent packages themselves. I hope this helped to make sense of my approach....my markdown may be needing some tweaks. *EDIT: Tweaks
&gt; What skills should I display in a resume/portfolio? Applications, modules, or libraries. The more unique and original the idea the better. The more independent, vanilla, and simple the code the better. For portfolio applications you want things that are immediately clear (as to their purpose/goal/problem solved). Your applications should also execute immediately without a build process (or if it must have a build process ensure the instructions can be followed by a 12 year old). &gt; What will truly take my code to the next level while I'm making a portfolio? The challenge you are attempting to solve and how you go about solving it. If you can solve expensive challenging problems with a super simple approach people will be impressed. For example, management always seems to be impressed with this little tool: https://github.com/prettydiff/semanticText and it only took me 90 minutes to write. Original mega primitive solution for identifying how HTML could be more accessible when only looking at tag names. &gt; How do you get yourself out of a rut and figure out what you want to develop on your "free-time"? Consider the open source applications you use frequently. Go become a contributor. Solve some of their most challenging problems, or fork the project and make it your own. You learn all kinds of things unrelated to writing code from taking ownership of problem spaces like this. &gt; What made it just "click" for you? Were there multiple "clicks" that happened as time went on? I personally get these little epiphanies every once in a while. My latest major epiphany occurred two weeks ago. I write open source parsers for my code hobby and I realized the secret to making the best parsers is predictability. The more predictable you can make things the less algorithmic support you need. There are always edge cases where algorithms don't solve every problem and you can waste a lot of time making your algorithms more brilliant. Stupid and primitive code is easier to maintain and more inviting to contributors. If your code becomes fabulous at prediction then it can otherwise be stupid as hell and still become far more stable and accurate. When these little epiphanies come together you get a concept called wisdom. Normally this happens more quickly by talking with people and sharing lessons learned, but sometimes the more valuable ones occur from an original idea to prevent you from constantly repeating the same mistakes. It sounds like these little realizations should be simple (and they are often very simple) and obvious. They are never obvious. In fact, strike the word obvious from your vocabulary. That word either unintentionally insults people with faulty assumptions or proclaims your vast ignorance. &gt; I don't know where I should go from here, I am probably answering my own question regarding how to progress, but would like to get advice from more experienced programmers. Find a valid problem to solve and solve it well. Don't over think this.
&gt;all that abstraction and extra code adds a lot of weight and performance latency to a site. ++
The concepts learned in 1.x are still good to learn. It's going to be a long time still until 2.
I did not know anything about this. This is awesome. 
&gt; So what's the good way to handle dates? A date (aka datestamp, timestamp, unix time, etc.) **appears** to describe a single moment in time; these moments of time would be something like "3pm, Friday, 30th Oct, 2015", and we would naively assume that we could compare these moments to other moments and be able to say stuff like "the one on the left occured earlier". ...this isn't true at all. A date describes a single moment in time **at a particular geographic spot**. Strip that location away (by, eg, omitting the timezone) and you actually only have half a datestamp. "3pm, 30th Oct, 2015 *in New Zealand*" is actually a useful timestamp, and we could compare it to another one like "2pm, 30th Oct, 2015 *in Singapore*". Leave off the location, and it describes a time range. The most common mistake new developers make is assuming that the location isn't integral. Every single date you ever store or process should have an explicit timezone attached to it. (The second most common mistake is thinking that they can handle the comparisons themself, and that date parsing or date comparisons, or figuring out how many days exist between two dates is something that can be solved by mere mortals. They aren't, use a date library.) Example: At my day job, we want to send some reports at 6am on the 1st day of every month. If you have a spare few minutes you can try and figure out how many times that means we'll send reports, and how many hours will separate the first and last report we send each month. It's actually a much more complicated question than you might think. And no, the answer isn't 24 times; there's actually something like 40 different timezones, meaning that "6am" on any given day actually happens 40 different times, over a period of more than 24 hours. Yes, that's insane. And countries actually change what timezone their in way more often than you might imagine too. So to answer your question, if I run `moment().toString()` right now on my local machine, I get "Sun Nov 01 2015 02:37:33 GMT+1300". That's a useful date string, and I can store it in a DB and compare it to other date strings, including ones from different timezones. I could normalize it to UTC if I wanted via `moment().utc(0).toString()` and get something like "Sat Oct 31 2015 13:37:33 GMT+0000"; I would lose some information from this (I would no longer know the timezone it was generated in), but I could still do date comparisons, because I still have the location data attached (even if it's now for a different location). To put it another way, since there are 40 different timezones, there are 40 different ways to refer to a specific date. If we care about the location, only one of those is correct, but if we don't then we can use them interchangeably. But without a location (either implicit or explicit), then the date can never be correct. If I was prepared to live dangerously, I could even normalize every single date, enforce a hard rule that every date stored in the DB must already be converted to UTC, and store something like "Sat Oct 31 2015 13:37:33", and then be super careful that I turned that back into a date object in the UTC timezone. Eg, something like `moment(dateFromDB + ' +0000')` might work, but `moment(dateFromDB)` is asking for trouble, because if you ever run that code in a non-UTC environement it'll assume the date is in the local timezone, and at that point everything is wrong. (Don't do this. For a dozen different reasons, not least of which is that any DB engine worth using has native date support anyhow, and you shouldn't be storing dates as strings.) In short: 1. Use moment 2. Make sure you always *always* keep a timezone attached 3. Let moment do the heavy lifting. As long as you keep the timezone attached, you'll be okay.
30 KB isn't a lot of weight and performance is pretty much irrelevant for the things which are usually done with jQuery. The code which drives your carousel or accordion could be a hundred times slower and no one would be able to notice the difference.
Few languages have truly great date support out of the box. PHP has Carbon for that. Python has Arrow. In JavaScript, we have moment :P
The Google Closure Compiler may have a good library for DOM manipulation. The advanced mode goes through your code and cuts out everything that hasn't been explicitly called, so you can have a really small package. I feel like it may be hard to hand-write code that will work with the compiler, but languages like Clojure (no relation) compile to JS with the Closure Compiler, so it does the dirty work for you. 
I've found the following "ground rules" really helpful: * Server-side "domain" code always, *always* speaks UTC only. * Server sends down date+time *with* timezone information (in ISO6801 format), and Client adjusts received date+time accordingly * Server sends down just-date as YYYY-MM-DD, and Client must respect that date *without* trying to timezone-adjust. * Client sends up date+time in full ISO6801 (with timezone info), and Server adjusts it to UTC before doing anything else with it * Client sends up just-date as YYYY-MM-DD and Server *does not adjust it*. This might sound difficult, but it's really not that difficult: * On the client-side, use Moment.js, and `moment(receivedFromServer).toDate()` * On the server side....well, it varies based on your server-side stack; in Java-land you can set Jackson serializers/deserializers for LocalDate and LocalDateTime that do what you want. Not sure about what the nodejs-server story is for that. In any case, when you're not talking to a specific client, it should always always be UTC, because that's the "neutral point" from which you timezone-adjust. If your server is running in, say, GMT-3, and your client is in GMT+4, now you have to figure out your own timezone reliably *and* the client's timezone reliably, so there's lots of room for error. 
This sub is about writing JavaScript and the JavaScript ecosystem. It's not a support forum for Reddit or for plugins by McAfee. This thread got downvoted because it's off-topic and completely irrelevant to this sub's userbase. If this were caused your own open source addon and you had trouble debugging it, it would be a legitimate question for this sub.
http://tapiov.net/unicodetiles.js/ Its text character based tile engine. Maybe what you're looking for.. Here are some examples: http://tapiov.net/unicodetiles.js/examples/ Source code: https://github.com/tapio/unicodetiles.js EDIT: The source code is pretty well documented. Going through this will help creating a similar engine on your own.
Came here to say moment.js as well. 
I didn't even know about that. Thanks!
Yup! It's sadly not supported in IE yet, but the polyfill is pretty damn lightweight.
&gt; So, the key is not the moment when the scope is created, but the moment in which the scope is not destroyed. I think we're actually saying the same thing. &gt; ...when a function creates and returns another function, because it's only then that we can make local, scoped variables **outlive their scope**, and that's the magic closures provide. So, yes, I absolutely agree that the moment the scope is not destroyed is the key moment. That's when closures become interesting.
It's thinking like that that now gives us 2MB web pages and 4GB requirements for operating systems. Instead of using helpers for everything, do what Sir Laurence Olivier told Dustin Hoffman and, "Learn to code, dear boy".
google closure compiler doesn't have any libraries at all
this is a great resource to learn from, thanks for posting
Doesn't jQuery 1.x only support down to IE8?
&gt; most browsers don't do es6 Is this so? The linked article seems to imply only dinossaurs don't do ES6.
GitHub decided to write Atom.io in CS and now they are in a world of hurt attempting to convert everything back to ES6. Edit: autocorrect
Oh my god like his third slide is already showing signs of terribleness.
http://kangax.github.io/compat-table/es6/ There's a lot of red, all over the place. Even transpilers don't support 100% of ES6 yet. Edge (surprisingly) is getting the closest. I can almost guarantee you that anyone writing ES6 right now (including me) is using a transpiler. Probably babel.
There is *partial* support in all modern browsers. Edge is currently the browser with the "most" ES6 support. It really depends what you're looking for though. For instance Edge does not support any form of destructuring. https://kangax.github.io/compat-table/es6/
jQuery 1.x was basically created so that you could sanely use IE6. Somewhat sanely anyway.
ES6 is a superset of ES5, ie. anything that is valid ES5 is also valid ES6, therefore a mix is fine.
I agree, you should be fine. In fact, if everything you have is written in ES5, babel should (more or less) not even touch it, and I know I've seen examples of people using angular 1 with babel and es6 syntax. Something else has to be going on.
You might be thinking of jQuery 2.+ that supports ie9+. 1.x supports back to ie6 (which, amazingly we actually still have 1000s of people using, primarily in China). 
&gt; If you just run simple onclick scripts, you never run into closures Oh you would, you definitely would. For example: function addLinks () { for (var i=0, link; i&lt;5; i++) { link = document.createElement("a"); link.innerHTML = "Link " + i; link.onclick = function () { alert(i); }; document.body.appendChild(link); } } window.onload = addLinks; This code would create links that would always alert "5" when you click them. Why? The short answer is - Closures. Read this post to see the reason: http://www.mennovanslooten.nl/blog/post/62
Uh, you want to ditch jQuery, because it's slow on old phones, but you want to use ES6, which old phones do not support at all?
Try it yourself: https://babeljs.io/repl/ Most of the new language features add very little overhead. With the regenerator runtime, core.js, and other polyfills, you easily end up with more than 30 KB overhead though.
https://developers.google.com/closure/?hl=en
Heh looks like we are the same person. Everything you have described happened to me and I reacted by doing exactly what you have done... Except in the .NET framework.
...and Angular.
why not make a function then you can var url = "http://www.orthobullets.com/testview?qid="+randomInt(lower, upper) I don't think you can get simpler than that.
I recently built a Universal React app that has static HTML output that is served by the web server and then, if the user has JavaScript enabled, attaches itself to the rendered output, as if it were built completely client-side, seamlessly.
`var url = "https://www.reddit.com/r/javascript" + (Math.floor(Math.random() * 5001));`
Because everyone is using transpilers. No one (well, almost no one) is deploying actual es6 to production -&gt; they transpile it down to es5 first.
This depends on your markup. Assuming the hrefs are inline boxes with borders for the blue bottom, it would be a simple matter of changing the background color. Here's an example: http://plnkr.co/edit/GSxJ9PQ5ZXC2ssxvnG6E?p=preview
Not sure why I didn't use that in the first place, could you direct me on what "rule" would be used to make after its clicked it stays that color? Is it active? Thanks in advanced.
Here is a simplified way to do it: http://codepen.io/anon/pen/xwzQbJ
Figured out why it wasn't working on the others, still no clue how to make it stay on other pages.
Awesome, appreciate the help, do you by chance have any clue how I could make it so that after I've clicked it that the color stays until I've clicked another one.
Which you need a shim for if you want to support more than the newest browsers.
Yeah man, tell me about it! I was recently hired as a junior dev and I'm getting Imposter Stress Disorder Syndrome (or whatever it's called) so hard right now! I literally can't even complete the basic tasks they give me.
The best approach here largely depends on what framework(s) you're using. Most single page app frameworks support the notion of an active route/state, in which case you could just key off of that to set an additional CSS class for the "active" link.
REPLs and breakpoint debuggers are your best friends. I find that a lot of junior devs try so hard to come up with entire solutions and get brainlocked. My advice is to constantly confirm your suspicions by firing up a REPL and writing a few lines, see if you get the result you thought you would. Then when you're writing app code, break into functions and look around to see that it's doing what you thought it was doing. This approach allows you to write more complex code incrementally without needing to know the exact answers right away. 
Please, stop reading stupid articles and making decisions based on their narrow views and lame arguments. Seriously, do you still think this is a valid reason to not use jQuery? "older, but still popular, BlackBerry devices for example) can take up to 8 seconds just to parse jQuery." Who. Gives. A. Fuck? Look if you're developing some shitty app in some bizarro scenario where all your target devices are BBs, then fine. Otherwise, stop looking for fixes to problems you don't have which will end up creating actual problems for you.
Thanks for the info! It turns out that you're right, I had accidentally added an opening parenthesis instead of a closed one :P. Also thanks for the info on formatting while typing code reddit, as that will most definitely come in handy for me!
I'm not using a transpiler, but yet again, I'm targeting only Node.js 4.0 (Chrome 45) and up, as well as doing it only for a demo / proof of concept, not production. And to stay on track: Babel is great, but jQuery (or ES5 vanilla if feasible) is still the way to go.
Do you ever find that this train of thought actually leads to code bloat? I've heard "If you can't explain how it works to a 5 year old then it's to complex" but on the other hand, explaining serial protocols to a 5 year old can be hard. 
Most browsers are dinosaurs. [No current browser exceeds 72% support](https://kangax.github.io/compat-table/es6/). If you take into account the average web traffic browser breakdown as claimed by Alexa, average support is (arguably) somewhere in the 30% range.
hey author here, built this because because I curious how much time i spend installing node modules, it seems like everyday i spend more and more time installing modules. Let me know if you have any questions or comments, like to get some feedback. 
I'll remove this post ASAP, I love this subreddit and I really don't want to flood it with unrelated questions :)
Change var within_y = (my &gt;= this.canvas_loc_y &amp;&amp; mx &lt;= end_num_y); to var within_y = (my &gt;= this.canvas_loc_y &amp;&amp; my &lt;= end_num_y); :/
Not using browserify/webpack? There's [bableify](https://github.com/babel/babelify) for browserify and [babel-loader](https://github.com/babel/babel-loader) for webpack
Do katas and post them on stackoverflow code review. Do the same problem everyday until you have an elegant solution that you can create from memory. Then move on to the next one.
This is the correct answer.
Very neat, I was using angular2-webpack-starter so far, but I'll keep this one around.
And if you name variables/functions well you need fewer comments. The code becomes the "comment" and adding comments would just be redundant.
[Read Eval Print Loop](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop). The console in your browser's dev tools is a REPL. If you type `node` from the command line, you'll enter a JavaScript REPL. [This is a site that has REPL's for many popular languages, including JavaScript](https://repl.it/languages/javascript). It's great for checking syntax, testing native functions and much more!
Nope not using either. Not sure if I see the benefit to adding another complexity to the build process. All of our images are svg and they get packaged into the css as a data-uri and js comes in one file. Whole app has 2 requests to the server for everything.
You don't have to go into the part about point at which you don't pay because that's simple: that was the point at which you left the store. So it's better to speak affirmatively in that sense, meaning, the moment you leave the store without paying, it becomes theft. It is now clear to me exactly what you are getting at. Thank you for the thorough and detailed reply. :)
the hardest part about all this is just experience with "oh, hey this is new"... within a few weeks repetitive tasks just become normal and harder tasks become easier as you go because it all related to fundamental knowledge 
Yes. Electron has full access to the OS.
Sorry to be the bearer of bad news - but you are too inexperienced for Imposter Syndrome to actually apply. I think this is a term that is getting over-used, but if your a jr just hired dev - yes, you don't know anything, you need to learn, you will probably fuck up - but that's OK. To be the bearer of good news - if you got hired by a good company, they should be pretty patient with jr developers. When I hire jr people that are very new / fresh out of school / have been self taught - they are hired more for my faith that they can learn fast, grow quickly and do well - not hired for what they already know. If you can demonstrate passion, a willingness to learn, open to criticism and can adapt quickly - that's what matters. Some of the best hires I've made have been some rather green-JRs that grew faster than expected and ended up being awesome. Some of the worst hires I've made have been really SR people that are too rigid in their ways, think they know better - and end up digging their heels in at every corner if it's 'not their way'.
Sure, that looks plausible. I think the lesson here is that CS's scoping rules are just black magic that will work right about 99% of the time, and then create the most baffling bugs the second you do something complicated. The interaction of CS and JS rules on hoisting and shadowing combine to create something that can't be easily reasoned about, can't be easily communicated to newcomers, and can't be fixed by a linting rule.
Thanks!
Exactly. The rest of my robotics team always tells me to comment everything, and complains cause the code I write doesn't have a whole lot of comments (every 5 lines or so on average). What I always think, yeah, it's important to comment code so you understand it. But don't comment *everything*. Comment the stuff that needs explaining. Don't name functions and variables vaguely and then comment next to them, Name them properly. Good code should have ample comments, but it should also have few at the same time. If your code has a comment every other line, it's not good code. Even if it's good code, the comments are bad. I was told by my team to comment as though someone who has no idea what any of this is can understand it. That's not how I work. If there's enough commentary to explain everything to everyone, it's too much. The comments should be concise and only used when necessary to explain stuff to the programmer. I shouldn't have to explain why every single variable is set to the value it is. If you need explanation on why ten different variables with self explanatory names are set to the values they are, you probably shouldn't be mucking about in the code. Take this for example. This was how I was required by the rest of my team to comment a bit of code from a function last year: task integrateGyro() { //Initialize vaiables float delTime = 0; //Time slice float prevHeading = 0; //Previous gyro heading float curRate = 0; //Current rate float curTime = 0; //Current time float prevTime = 0; //Previous time HTGYROstartCal(HTGYRO); //Start calibration PlaySound(soundBlip); while(bSoundActive) EndTimeSlice(); wait10Msec(100); //Wait a bit after calibration and tell the rest gyroReady = true; //of the program that we're ready time1[T1] = 0; //Zero out our time while (true) { curRate = HTGYROreadRot(HTGYRO); //Read the current rate if (abs(curRate) &gt; 0) { prevHeading = currHeading; //Grab the rate again, and turn it into a degree value currHeading = prevHeading + curRate * delTime * 0.001; //to update the current position } wait1Msec(10); //Wait a bit, and then manipulate the time curTime = time1[T1]; //And repeat the cycle delTime = curTime - prevTime; /?Grab new time slice prevTime = curTime; //Update previous time } } Not even kidding. I, on the other hand, would have commented it like so: task integrateGyro() { //Initialize vaiables float delTime = 0; //Time slice float prevHeading = 0; float curRate = 0; float curTime = 0; float prevTime = 0; //Start calibration, and alert user HTGYROstartCal(HTGYRO); PlaySound(soundBlip); while(bSoundActive) EndTimeSlice(); //Paue long enough to calibrate //wait10Msec(100); gyroReady = true; time1[T1] = 0; while (true) { //Read rate, and manipulate it with the current time slice to update our degree position curRate = HTGYROreadRot(HTGYRO); if (abs(curRate) &gt; 0) { prevHeading = currHeading; currHeading = prevHeading + curRate * delTime * 0.001; } //Pause, and update time slice wait1Msec(10); curTime = time1[T1]; delTime = curTime - prevTime; prevTime = curTime; } } The comments are not as abundant, but they're more straightforward. You don't need to explain things like `HTGYROstartCal()`, because of course that starts the calibration of the gyro.
You got this! Make incremental growth and just keep moving forward. Be a sponge and learn everything from the devs at your first gig. It's hard to correlate to code but you [must fake it until make it](https://www.ted.com/talks/amy_cuddy_your_body_language_shapes_who_you_are?language=en)
Since OP doesn't need to support old browsers, he could save a few keystrokes with var url = "http://www.orthobullets.com/testview?qid="+Date.now();
Congrats on the new gig! I've been doing web dev for a bit now and here's a few things I've learned. 1. Don't be afraid to ask for help. There's probably people around you that have already went through this. If there isn't ask online. 2. It's a bit cliche, but work on soft skills. Master talking to people and treat everyone like they'll be your boss some day. You'll be surprised how far having this attitude will take you. 3. Memorizing everything is impossible. Leverage Google as much as possible and try to teach yourself the best search terms for the given task at hand. With out Google, none of us would be doing this. Well we would, but damn it would be so much harder. 4. If you have the time, run through programming challenges. A github repo was created for this just a few days ago and it looks really promising. https://github.com/jlem/WebDevChallenge 5. Give it time. After a year or two, you'll be blasting through tasks like it's taking out the trash. You can do this! Good luck! 
YOU'RE AWESOME!! KEEP UP THE GOOD WORK, GOD DAMNIT!!!
Does backtick support for import path strings make sense?
nice eye
Build something to completion. It should be only slightly more complex than the last thing you built to completion (if thats nothing, then build something very simple). It doesn't matter if it already exists. Then you post it on your resume, and build something slightly more complex. The more things you build, the better you get, and (until you get whatever job you want), the better ideas you'll get for what to build next. 
Never be afraid to admit you don't understand something and ask for help. The best thing about working in an office is having other people to bounce ideas off of and review your code. Being a good coder is approaching everything as if you know nothing and coming to a consensus with others about the most maintainable way to write something. It will take years to get to the point where your reading something you wrote three years ago and you get to experience figuring out what worked and what didn't when it come to maintainability. Don't give up and don't doubt that you'll figure it out eventually. 
You mean template strings? If you do, then no it doesn't make sense as imports/exports are meant to be static.
Where are they attempting to get things back to ES6? From what I've seen they're taking the worst possible option, and pushing CoffeeScript as the default and offering ES6 as an alternative way to write plugins.
This is a result of the new `class-constructor-call` which is in the `stage-1` preset which you are requiring via the `stage-0` preset. See this issue: https://github.com/babel/babel/issues/2700 Will be fixed soon. Sorry about that.
Thanks
lol eh, while that definitely fucked up my debugging to a degree (so thank you for that!), I didn't make that mistake in the actual contains() method. Still have the issues with the x and y axis that I was having before. Thank you for pointing that out though! it was a silly issue! 
ES6 adds Array.from() for easy conversion :) http://www.2ality.com/2014/05/es6-array-methods.html
The amount of things developers should know is overwhelming. It gets better over time but there will always be things that you want to know but don't have the time to learn. It's ok though, the important thing is to want to learn new stuff, and to practice development. Some things that will make you a better dev (at any level, really, not just for noobs): * Read good code – read code of open source projects that you're using (start with something simple, not super complex ones like angular). You'll get a better understanding of how your tools work, and you'll learn some useful coding patterns and tricks. * Get feedback on your code (code reviews, or just ask someone). This helps you improve. Once you get more senior, make sure to be on the other side of this, reviewing others' code as well. * Read some good books, e.g. Javascript: The Good Parts. Also something on common software development patterns. * Try to find a work environment where you are not ridiculed / punished for not knowing some things. No one should expect any dev to know everything. It's fucking impossible. * Write code in your free time that pushes your limits. In your case it might be as simple as implementing secure file uploads (and reading everything about how to do that). For more advanced devs that could be trying out some esoteric languages or design patterns or some niche fields like machine learning. * Learn about commonly used tools and frameworks and try them out, but don't waste time on chasing the latest fancy thing – JS libraries have a notoriously short hype half-life. * It should be obvious, but don't overwork / overstress yourself. Get enough sleep. It will be fine.
OP said he only had 3 months of experience with JS. For impostor syndrome to apply, you actually have to have external validation of your skills.
Fake it till ya make it :) As they say in the creative world. 
Um no. This is the kind of shit bad developers tell themselves to make them feel good about their low experience/skills coupled with a moderately high level of motivation.
I may, actually, be wrong about that. It may be that they are writing docs for JS. I read it somewhere though. 
Lol.
I was browsing the Electron documentation and didn't see any commands showing outright where to lock the computer. Can you possibly point me in the right direction? 
As long as you didn't lie about how much experience you have, then your new employer knows exactly what they've done. When I interview junior people, I'm primarily looking for sparks of intelligence, hunger for growth, and great personality. Having a small amount of experience isn't really even a consideration, because we know what we're getting. Have they paired or grouped you up with senior people to mentor you? When you feel like you're running into a wall, or "down the rabbit hole" go see a senior resource on your team and explain why you're troubled. If they refuse to help or get crabby about being asked for advice, well then they are the problem, not you.
Your username fits right into that post.
If Array.isArray (ES5) returns true, it's an array. Array-like objects like arguments and NodeList were a mistake. Well, the good news is that arguments can be replaced with rest and NodeList will probably extend Array (and thus inherit its methods) in the future. An array-like object has a "length" property and there also might be some properties which use toString'd integer keys ('0', '1', ...). You can convert array-likes via `[...foo]` (ES6) or Array.from (ES6). If you only want to iterate over it, use for-of (ES6). for(let el of document.querySelectorAll('.foo')) { el.whatever(); }
Wasn't his external validation getting a job doing something he just learned 3 months ago? 
Okay, so ir came out a bit weird as I was tired. I do try and convince them, and I'll work how they want me to, but if I could convince them, that's what I'd do, I'd that makes any sense.
Such articles are counter to the waaay too often, automated statement that life does not exist without the required jQuery/d3/Angular/[insert framework or library here].
&gt; but is anyone else getting really tired of "you may not need x" hah! Why stop there right? All you need is food, water and shelter. Everything else is extraneous.
For me reading your code, the right amount is somewhere between the two. Of course float curTime = 0; //Current time is unnecessary, but on the other hand I would say that for float prevHeading = 0; //Previous gyro heading the comment is a good idea - how would I know that it's a gyro heading from the variable name? Of course *you* know that, and the rest of your team probably does too, but what about the new developer you hire in 6 months? Or what if you need to go over this code quickly in 2 years? Comments like these reduce the mental load of reading over code and understanding what it does. 
+1. Performance impact is negligible unless you're writing extremely front-end intensive code, and network overhead is negligible 'cause there's a 99.999% chance the user has already cached jQuery from one of the popular CDNs. 
I actually just done this, I can do some JS, but I wanted to pick up a better understanding of the fundamentals. I felt CodeAcademy done this really well. It's fairly simple, Math.Random() returns a result between 0 and 1. You need to create an if/else if/else statement of dividing the range into three equal parts and assign a new string to the variable, IE. ROCK/PAPER/Scissors. At least, that's what I got from it, but it's a good teaching platform. 
It's not very hard, but it's needlessly complicated. Drawing images is super easy with the Canvas API. Just draw images instead. In DOS and whatever, printing colored characters anywhere on the screen was the easy thing to do. It was done via ANSI escape codes: https://en.wikipedia.org/wiki/ANSI_escape_code Loading images and drawing them on the screen, on the other hand, was a major pain in the ass. Nowadays, it's the other way around.
You can definitely use ES6 today. I've have code in production for ~4 months that is written in ES7 and compiled by Babel (stage 0) down to ES5. The transpilers and polyfills are production-ready today and the adoption of ES5 is solid* (*at least amongst my users).
Absolutely. Babel is fantastic, and I've personally found that having the transpiling stage in the build actually catches bugs earlier, because some code you write just doesn't transpile instead of failing at runtime in the browser. I think the point from before was about using it natively instead though, without the need for the transpiling step.
Could you describe what this list is doing a bit more? Sounds kind of xy problem right now. Maybe JavaScript's new `Map` or `Set` objects could be useful in this case.
All you need is Chrome's DevTools
Damn... that would be tedious *and time consuming! You can add actual images to a webpage incredibly simply via html: `&lt;img src='url of image goes here' id='myImg'&gt;`. And then manipulate it with javascript with something like `document.getElementById("myImg").style.property.value` or get more sophisticated and add css classes. You can also draw easy shapes with html &lt;div&gt; and also &lt;svg&gt; elements.
Does the client HAVE to access the unit by its index? Is this a constraint you are forced to deal with? Or are you able to change it so that the client can access the array element by a unique identifier? That way you can do whatever you want to the array on the server without needing to update anyone.
I thought this article was awesome, and agree that your title is better. A lot of these headlines are made by editors instead of the actual person who wrote the article (b/c it gets clicks)...but since this is just this dude's website he sadly doesn't have that excuse. If you want to get your article seen a clickbait headline is a proven way to do it, it's just unfortunate.
If you're new to react, I would legit just start out with by rendering your app in index.js and separating your components into different files. You can get very far with just react, a way of fetching data e.g $.getJSON or fetch, and a router like react-router. Eventually you might want to add a flux framework or ampersand or something, but those all still revolve around components so it's not too difficult to integrate them once you're ready. In terms of build tools, you can get *very* far with webpack alone (which imo is used the most in the react community). Basically just start small, people tend to make this shit way too complicated way too fast
I've been developing with React for a few months and found that [thereactivestack:kickstart-hugeapp](https://github.com/thereactivestack/kickstart-hugeapp) boilerplate is pretty good. It separates out apps into modules, each of which has their own client/collection/methods/server structure. Webpack is already built-in as well. The same people also have a [simpler one](https://github.com/thereactivestack/kickstart-simple) if you're just looking to get your feet wet and see what React is like.
You aren't using curl? You monster! 
No, that only shows that he can seem like he knows what he's doing in an interview. That's the whole crux of imposter syndrome: you find yourself thinking "maybe I just seem like I know what I'm doing" when inside you're lost and afraid to reveal how little you feel you know. Luckily for a Jr dev the solution is just to embrace saying "I don't know" a lot and EXPECTING sr people to explain things because you're junior and that's how you and your team get better
What you could do is create a mock XHR that has basically the same API but in addition to grabbing files, etc. (using original xhr) you can log requests and modify the payload in certain cases.
You can replace core functionality as you wish by modifying prototype chains. Notice this here: http://stackoverflow.com/questions/7775767/javascript-overriding-xmlhttprequest-open
Also try solving Project Euler problems one by one.
ncat master race
Not the same thing. You need water/javascript. You don't need soda/jquery.
Add "you're doing it xyz wrong" and that's the full collection of blog titles that irk me to no end.
&gt; there will be no particular problem with DOM events or manipulation I'm not sure if this is accurate -- you still need to output the text to the screen, clear it out each iteration &amp; paint a-new. Text nodes are still DOM nodes. it would probably be pretty each though, if you have a string for what you want to be the page, just set a `&lt;pre/&gt;`element's innerHTML to it. Some of those videos have different spots on the screen for things like gold, statuses/etc. that would still require some slight dom selection/manipulation to keep them up to date.
"You may not need Internet" - an article published by USPS
It's straight up trivial. Also, look into ZAngband - more content, less trying to be funny. The phrase you're looking for is "roguelike development." This turns out to be a long standing dev community (except for the javascript part.) Edit: I probably should mention that I'm keeping a github repo up to date, so that you can compare against [my "official" code](https://github.com/StoneCypher/rogue_demo/) if you get stuck. You can also look at [the individual commits](https://github.com/StoneCypher/rogue_demo/commits/master) to get any individual step along the way. ---- # Getting started Anyway, suppose you have a map that looks like ##+######### #@....###### #...R.##...# #.$...##.w.# ###+####...# ###....=..w# ########...# ############ Rendering that is easy a zillion ways. Since you're new, I think you should use a `&lt;table&gt;`, because that's easy to wrap your head around; an experienced person would probably instead absolutely position `&lt;span&gt;`s inside a fixed-size scrollable container, but let's not bother with that for now. Baby steps. First, you need the map data as a value in your JavaScript. For now we'll just use that fixed map; making your own map is one of the fun parts. Note: \n means "new line." It's like hitting return. var map = '##+#########' + // todo: remove player, creatures, objects '\n#@....######' + '\n#...R.##...#' + '\n#.$...##.w.#' + '\n###+####...#' + '\n###....=..w#' + '\n########...#' + '\n############'; A good design wouldn't use the letters to store the map state, and neither will we, but this gets us a place to start. I often proceed by putting bullshit in place, then writing notes reminding me what to remove, then removing that as I go; it lets me work in a more "complete" space, where things are (fake) already in place, which I find easier. If you do this, *don't* skip the reminder comments. ---- # Having a page to draw into Next, let's draw that in our document. We'll need a host document (`index.html`,) which might look something like this: &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;script defer type="text/javascript" src="rogue_demo.js"&gt;&lt;/script&gt; &lt;link rel="stylesheet" type="text/css" href="rogue_demo.css"/&gt; &lt;title&gt;Rogue demo&lt;/title&gt; &lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt; At this point, please put a simple `window.alert('hello');` in the relevant javascript file, and set the body background color to orange in the relevant CSS file, and load the result. This ensures that all files are in appropriate places, that the tags have the filenames and attributes correct, et cetera. Assuming those both go well, remove the alert and the orange, and let's please continue. ---- # The worst looking render A simple way to get some satisfaction immediately - and don't underestimate how important that is - is to throw that map on screen, so that you know you're getting something. Let's do that. Please put the map variable from above in, and then what we'll do is write two functions - `MapDraw` and `onStart`. ## MapDraw The first function, `MapDraw`, we'll start in idiot-simple territory. We're going to create an HTML element `&lt;pre&gt;`, which makes fixed-width non-scrolling non-stripped text, and we're going to fill it with the map text, then return that. function MapDraw(map) { return '&lt;pre&gt;' + map.toString() + '&lt;/pre&gt;'; } Later we'll replace this with a much better one. ## onStart This is sort of our checkered flag to go. Web browsers will emit an event called `window.onload` when everything's ready to begin. What we need to do is create a function (we'll call it an "event handler", which doesn't have a technical meaning in this language, but rather reminds us of its purpose) whose goal is to hook `window.event` and do our setup tasks. At this time that only means drawing the map, though that will be a growing list. function onStart() { document.body.innerHTML = MapDraw(map); } And we also need to assign that to `window` as the function meant to handle that event, like so: window.onload = onStart; ## And that's a soup Your end result should look something like this: var map = '##+#########' + // todo: remove player, creatures, objects '\n#@....######' + '\n#...R.##...#' + '\n#.$...##.w.#' + '\n###+####...#' + '\n###....=..w#' + '\n########...#' + '\n############'; function MapDraw(map) { return '&lt;pre&gt;' + map.toString() + '&lt;/pre&gt;'; } function onStart() { document.body.innerHTML = MapDraw(map); } window.onload = onStart; Save that and the HTML in some directory (the HTML source expects the JS to be called `rogue_demo.js`,) and open the index; you should now see a shitty, fully JS map being rendered. Doing this in chunks, more momentarily
I don't understand why this was done. It effectively requires anyone using babel for anything to update their code, and the reason is that downloads were too large... or something. It's a hugely breaking change for some nebulous gain that most users won't care about.
hmm..so you don't use CSS classes? with jsx one could do &lt;div class="vbox cross-center main-center" style={divStyle}&gt;Hello World!&lt;/div&gt; 
# An Aside &gt; Why not just keep it in a `&lt;pre&gt;` forever, then? Because having individually placed cells is easier to hook events (click, hover, touch, etc) to, and for spells, that needs to include empty floor and walls, so that's everything, not just items and monsters, so wrapping everything in `&lt;span&gt;`s quickly becomes silly. . &gt; But I heard that `&lt;table&gt;` was bad Uh huh. . &gt; Why not just place `&lt;span&gt;`s directly? Oh, you can. That's actually a good route. But it involves math, bounding boxes, forced empty rendering, and some hairy portability things, and this is a noob, so I'm trying to keep it simple. Tables are simple. . &gt; Flexbox? Shut up. ---- # It looks weird I know. It's the web. Let's start fixing that. Make a CSS file called `rogue_demo.css` and let's put a starting step towards it. body, html, pre { margin: 0; padding: 0; border: 0; } That's CSS-ese for "don't put any spacing or lines around these three tags." Save that, reload, and watch it look slightly less terrible. We're going to start putting effort into the appearance later. For now, it's good enough to see that it's under control. Effort expended now would be wasted; we're about to change how that map is drawn. ---- # Less-bad map There are a tremendous number of ways to represent a map, and some of the most interesting roguelike design can be found in fundamental map representation. However, that's a difficult topic. Today we'll do a straightforward map. There are two approaches to a straightforward map. Each has their upsides and downsides. You see the other above: a string representation. That's a good approach, actually, for a lot of things, particularly for hand-drawn special regions. However, it also has a whole *lot* of problems, like that it makes procedural generation, your bread and butter, borderline impossible. The reason it's such a great first step, though, is actually very compelling: you take a look at it and you know exactly what you're looking at. High class roguelikes (the Angband, Crawl, Hack, ADOM, Torchlight, and Diablo families, for example) have a whole lot of fixed special areas; a few of them (FTL, X-Com, Syndicate) are made entirely or nearly entirely out of fixed special areas. These are very powerful tools, and you want to be able to make them quickly, easily, and while having fun, yeah? Let's start by showing the other approach; after that, I can explain how we'll handle the dichotomy. (Pro tip: we're gonna cheat.) ## Map-as-a-grid The closest thing we have to a grid in JavaScript is an array-of-arrays, unless you're going off into the woods and implementing some shit in classes or decorators or whatever, which, y'know, don't. Why this approach is better is simple: you get to refer to cells like map[3][5], which means drawing a box here and a line there and a random cloud over yonder is pretty straightforward, because numbers. If you were trying to do that on a string, you'd have to do a bunch of math to figure out where in the string it went (and by the way, javascript strings aren't iteration-fast, because of unicode technicalities, so that'll be slooooow.) So that looks something like (don't worry, I'll de-horrible this afterwards): var map = [ [ '#', '#', '+', '#', '#', '#', '#', '#', '#', '#', '#', '#' ], // todo: remove player, creatures, objects [ '#', '@', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#' ], [ '#', '.', '.', '.', 'R', '.', '#', '#', '.', '.', '.', '#' ], [ '#', '.', '$', '.', '.', '.', '#', '#', '.', 'w', '.', '#' ], [ '#', '#', '#', '+', '#', '#', '#', '#', '.', '.', '.', '#' ], [ '#', '#', '#', '.', '.', '.', '.', '=', '.', '.', 'w', '#' ], [ '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '#' ], [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' ], [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' ], [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' ], [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' ], [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' ], ]; Now, obviously you don't want to write maps like that by hand. But, already some improvements are obvious: the newlines are gone, the math to see what's north or south is just add one or subtract one, it's straightforward to blot out regions, et cetera. Later, we'll go back and resurrect map strings, because they matter a lot. But for now, let's get this new one working. ## Now we render this new map as a `&lt;table&gt;` Since we have to gut and redo the map draw, this is as good a time as any to switch to `&lt;table&gt;`, too. It's actually easier for this map type anyway. Let's write a few simple arrow functions to handle this for us. An arrow function is an anonymous function that takes either a bare argument or a list of arguments, then implicitly returns the statement you issue. If there's only one argument you can skip the `()` framing on the arglist, and if there's only one statement you can skip the `{}` framing on the body. This leads to extremely terse lambdas. Check it out: var RenderCell = cell =&gt; '&lt;td&gt;' + cell.toString() + '&lt;/td&gt;', RenderRow = row =&gt; '&lt;tr&gt;' + (row.map(RenderCell).join('')) + '&lt;/tr&gt;', RenderMap = mapdata =&gt; '&lt;table&gt;&lt;tbody&gt;' + (mapdata.map(RenderRow).join('')) + '&lt;/tbody&gt;&lt;/table&gt;'; That says * RenderCell is an arrow function, taking cell, yielding the cell to string framed in a `&lt;td&gt;` * RenderRow is an arrow function, taking a row, which maps the row as an array with `RenderCell`, joins the result with nothing inbetween, and frames it in a `&lt;tr&gt;` * RenderMap is an arrow function, taking a mapdata, which maps the mapdata as an array with `RenderRow`, joins the result with nothing inbetween, and frames it in `&lt;table&gt;&lt;tbody&gt;`. This work is all currently done with strings. That won't stay true forever, but it works for now. At this point the new map renders, but is no longer in a fixed-width font; on most systems the `@` is much wider than the other characters, and so the map will appear to be slightly broken. That's okay; this is a progress point `:)` We also update our `onStart` to call `RenderMap` instead of `MapDraw`. The new JS should look something like this: var map = [ [ '#', '#', '+', '#', '#', '#', '#', '#', '#', '#', '#', '#' ], // todo: remove player, creatures, objects [ '#', '@', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#' ], [ '#', '.', '.', '.', 'R', '.', '#', '#', '.', '.', '.', '#' ], [ '#', '.', '$', '.', '.', '.', '#', '#', '.', 'w', '.', '#' ], [ '#', '#', '#', '+', '#', '#', '#', '#', '.', '.', '.', '#' ], [ '#', '#', '#', '.', '.', '.', '.', '=', '.', '.', 'w', '#' ], [ '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '#' ], [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' ], [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' ], [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' ], [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' ], [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' ], ]; var RenderCell = cell =&gt; '&lt;td&gt;' + cell.toString() + '&lt;/td&gt;', RenderRow = row =&gt; '&lt;tr&gt;' + (row.map(RenderCell).join('')) + '&lt;/tr&gt;', RenderMap = mapdata =&gt; '&lt;table&gt;&lt;tbody&gt;' + (mapdata.map(RenderRow).join('')) + '&lt;/tbody&gt;&lt;/table&gt;'; function onStart() { document.body.innerHTML = RenderMap(map); } window.onload = onStart; And now our map is rendered as a `&lt;table&gt;`, which has important benefits coming up. Except &amp;hellip; we've lost string maps `:(` More in a bit! ***String maps will be avenged***
Checkout [react-typescript-webpack](https://github.com/tomastrajan/react-typescript-webpack) example project (Todos)
First, in the `RenderMap` arrow function, let's give the `&lt;table&gt;` an `id` that we can hook rules to shamelessly. RenderMap = mapdata =&gt; '&lt;table id="gamemap"&gt;&lt;tbody&gt;' + (mapdata.map(RenderRow).join('')) + '&lt;/tbody&gt;&lt;/table&gt;', Next, in the CSS, let's start by enforcing an actual square grid. Let's also make the page background slightly gray, and the default map cell white text on black background, which is obviously wrong. More on that soon. body { background-color: #eee; } #gamemap { border-collapse: collapse; } #gamemap td { height: 1em; width: 1em; background-color: black; color: white; } Let's also add some rules to the map cells that prevent overflow, that strip out default extra spacing and border lines, and that center text both horizontally and vertically within the cells (the last piece won't work outside table cells.) #gamemap td { height: 1em; width: 1em; background-color: black; color: white; overflow: hidden; margin: 0; padding: 0; border: 0; text-align: center; vertical-align: middle; } Now things look dramatically less awful. Let's get some active map behavior in, so that we can get properly started. Fortunately we can start making faster steps now, too. ---- # Let's interpret the map So right now we're having the map fly blind on strings. That's awful. It's a nice bootstrapping notation but it won't do properly. Let's have it be interpreted into something reasonable, instead; then we can get a better map to be rendered. We need two pieces to safely undo that; afterwards we can do whatever dumb thing we like. First, we need to make a cell object, instead of just some single letter string; second, we need to modify the table builder to call the ostensible method on the cell class which tells it what to contain. Honestly I'd like to do the cell object as an ES6 class, but your browser probably doesn't support them by default yet, and I don't want to cover `babel` this morning. ## Making a map cell First, the `cell` is (initially) simple enough: take an input, bind it to a closure variable, return an object that craps out the closure variable on request. Cool. function cell(input) { var content = input; return { htmlRepresentation: function() { return content; } }; } 
It would be a lot easier to evaluate the usefulness of this if it were formatted like its predecessor, [You may not need jQuery](http://youmightnotneedjquery.com/). I do agree with what he says in the intro, that it's a bad idea to learn D3 before learning JS/SVG/HTML/the DOM, but I'm not sure this is a helpful way to discourage that.
[This] (https://github.com/gaearon/react-hot-boilerplate) one seems to have quite a bit of activity on github and is really good, and also is the one I have been using.
# Using the map cell It's time to start actually leveraging our map. Next we change the string map consumer to apply the individual characters as the cell argument, instead of to just return them as an array. Simple enough: map that array with the `cell` call. mapStringToGameMap = mapString =&gt; mapString.split('\n').map( row =&gt; row.split('').map(chr =&gt; cell(chr)) ); Concomitantly, we need to alter the cell renderer to use the representation method, since it's no longer able to just dump in string contents. RenderCell = cell =&gt; '&lt;td&gt;' + cell.htmlRepresentation() + '&lt;/td&gt;', And if we look, we *now* have a semi-real game map with active cells. For example, let's do (in a bad way) a little work to highlight the player. First, we'll add another instance variable to the cell (**temporarily**) called isPlayer, and if it's there, we'll change the cell color. function cell(input) { var content = input, isPlayer = (input === '@'); return { htmlRepresentation: function() { return isPlayer? ('&lt;span style="color:blue"&gt;' + content + '&lt;/span&gt;') : content; } }; } This is fairly useless and terrible, but it shows that our map is actively being interpreted. Styling inside the table cells is silly. Let's style the table cells directly. That means transferring the ownership of the `&lt;td&gt;` into the class, so let's start there. First, the representation call changes as so (we'll change it to green so we know it's the new code working): htmlRepresentation: function() { var style = isPlayer? 'color: green' : ''; return '&lt;td style="' + style + '"&gt;' + content + '&lt;/td&gt;'; } Next, `RenderCell` kind of doesn't need to exist anymore: all it did was wrap the `cell` class' render method in a `&lt;td&gt;`, and that is now provided. So we can call the `cell` class' render method directly with an arrow function to make the access, and burn `RenderCell`. RenderRow = row =&gt; '&lt;tr&gt;' + (row.map( cell =&gt; cell.htmlRepresentation() ).join('')) + '&lt;/tr&gt;', This now means that the `cell` can style the table cell directly. Let's teach it about that.
I just roll a d6 and halve the result.
I highly recommend you take a look at survivejs.com if you're new to react. It has been my personal go to resource for understanding react along side the react docs themselves. It's comprehensive in a way they explain why they use what and even shows a conversion to flux using alt. The author I believe also has redux demo of the app if you want to see an example on the survivejs github. Although it is an ebook you can buy the author offers it for free. It goes through why webpack is the preferred choice in http://survivejs.com/webpack_react/webpack_compared/ How to develop a react component like you would. Meaning you don't just clump everything into a single file, the actual multicomponent, props/state, and build. To be honest I could list more but it's useless if you see all it's offering for yourself. Edit: Oh ya, my favorite part. It's actively worked on, meaning it's not a blog/tutorial that was written a couple of months ago and abandoned.
I'd say skip the starter kit, and do it yourself until you understand exactly what is going on. It may take more time, but you'll be in a much better position to support your own application when you're done. My personal suggestion would be to use babel so you can use the jsx syntax, and some sort of build utility to assist with that (I prefer gulp, but any will do).
Please post your code on an online service like https://jsfiddle.net/ or https://codepen.io/pen/ so we can see what it's doing and what not :)
I looked at the place you showed me, and I still can't figure out how to reposition the "custom colors".
Let's start in the CSS by creating a few rules. One for walls, one for floors, one for players, one for doors, one for monsters (just for now,) one for items (also for now), and one for simple treasure. Initially we'll start with walls, floors, and the player, to get the infrastructure together; then we'll do the rest. We're going to need effectively two styles for every cell: the base and the top. This is because the base will be the tile type (floor, lava, grass, trap, water, whatever), and there might be something (or many things) on top of it, such as a monster or treasure or whatever. Usually, though not always, the top style will let the bottom background color through; rarely, but occasionally, it will also let the bottom foreground color through. Each of these should be possible in our system. It would also be nice if either could do other things, such as invoking font styling or whatever. One way to achieve this is through CSS precedence. Make a slightly more specific rule for top rules (we will use `&lt;tr&gt;` in the top rules but not in the bottom rules to get this result.) Let the cascade handle the rest. #gamemap td.wall { background-color: dimgray; color: silver; } #gamemap td.floor { background-color: saddlebrown; color: moccasin; } #gamemap tr td.player { color: cyan; } This allows the player to stand on floor and get a brown background, but to override the floor's yellowish foreground with cyan. Now we extend this to the other rules we want initially: body, html, pre { margin: 0; padding: 0; border: 0; } body { background-color: #eee; } #gamemap { border-collapse: collapse; } #gamemap td { height: 1em; width: 1em; background-color: black; color: white; overflow: hidden; margin: 0; padding: 0; border: 0; text-align: center; vertical-align: middle; } /* withhold a tr from the rule for tilekinds to force a precedence loss */ #gamemap td.wall { background-color: dimgray; color: gray; } #gamemap td.floor { background-color: saddlebrown; color: moccasin; } #gamemap td.grass { background-color: green; color: lawngreen; } #gamemap td.water { background-color: dodgerblue; color: darkturquoise; } #gamemap td.lava { background-color: crimson; color: tomato; } /* add a tr to the rule for topkinds to force a precedence win */ #gamemap tr td.player { color: cyan; } #gamemap tr td.person { color: white; } #gamemap tr td.reptile { color: green; } #gamemap tr td.worm { color: puce; } #gamemap tr td.item { color: blue; } #gamemap tr td.treasure { color: gold; } #gamemap tr td.door { color: silver; font-weight: bold; } ---- # Why are items map features? So, they aren't, is the short version. Let's change `@` to mean "forced player starting point on this map," which suggests it's optional; let's change the monster symbols to mean "this is a forced monster spawn," treasure to mean treasure spawn, &amp;amp;c. Then we can just have the map scanner instantiate things it finds. `:)` First let's free the player from their being a map feature. When we render a cell, currently we ask the cell what it contains. That means the cell is responsible for knowing where things are, instead of the (currently non-existent) feature containers. This is a mistake. Let's make feature containers (items, monsters, traps, &amp;amp;c.) There is only one player, so the feature container for a player is a singleton. Initially we will track nothing but their location, which we will default to `(0,0)` for now. We will take an options argument to allow that default location to be overridden. function makePlayer(opts) { return { x: opts.x || 0, y: opts.y || 0 }; } var player = null; Next let's beef up the row that creates from an '@' cell in the string map, to instead actually create a player object after validating that's the right thing to do: case '@' : if (player) { throw 'cannot have two player spawn points on one stringMap!'; } player = makePlayer({ x: i, y: j }); tileKind = 'floor'; tileSymbol = '.'; break; Next we need to add some goo in `htmlRepresentation` that checks the other sources (currently only player) before deciding what to render. htmlRepresentation: function() { var isPlayer = (player !== null) &amp;&amp; (i === player.x) &amp;&amp; (j === player.y), uTopKind = isPlayer? 'player' : topKind, uTopSymbol = isPlayer? '@' : topSymbol, tclass = (uTopKind? (uTopKind + ' ') : '') + tileKind, tconts = (uTopSymbol? uTopSymbol : tileSymbol); return '&lt;td class="' + tclass + '"&gt;' + tconts + '&lt;/td&gt;'; } If you save and load now, the player is no longer a map feature, but there's no way to see that &amp;hellip; until you make them move. At this time I'm going to add a keyboard handling library called "mousetrap" to the HTML, to handle key binding. And then we'll give this hilariously incorrect initial implementation of movement: Mousetrap.bind('up', function() { player.y -= 1; Render(); }); Mousetrap.bind('right', function() { player.x += 1; Render(); }); Mousetrap.bind('down', function() { player.y += 1; Render(); }); Mousetrap.bind('left', function() { player.x -= 1; Render(); }); We should also split the render apart from the initial string parse, and track the map and string map separately, because that matters now: var player = null, map = null, str_map = '##+#########' + // todo: remove player, creatures, objects '\n#@....######' + '\n#...R.##...#' + '\n#.$...##.p.#' + '\n###+####...#' + '\n###....+..p#' + '\n########...#' + '\n############'; function Render() { document.body.innerHTML = RenderMap(map); } function onStart() { map = mapStringToGameMap(str_map); Render(); } And now your little dude can move - though he has no bounds, like walking through walls, or off of the map. Let's fix that next.
Oh, my bad. Fortunately, I figured out what was wrong, but I'll do that in the future. Thanks.
Redesign and rewrites are important parts of development. To paraphrase from the mythical man month -- you're not going to get it right the first time. Just pick a few tools and get going.
Doesn't mean anything. Many sites use Angular and some don't. Many sites use jQuery and some don't.
# Gulp Actually I lied. Twice. First I said I didn't want to set up a babel system, and then I said let's fix movement next. The thing is, a lot of this is easier if we have full ES6, and the code is getting a little bit cumbersome; I'd like to break it up. So let's build a quick gulp system (this implies having `node.js` set up) that uses `babel` to take modern code you write and "transpile" (convert) it to older JS that all browsers can eat; then let's also use `browserify` to package that up so that we don't have to think about it. So. I will assume that you have `node.js` installed, which comes with `npm`, a package manager. If not, [go here and install it](https://nodejs.org/en/download/) before continuing. It's quite easy. Go into a console or command prompt, and go into your project directory. Type `npm init`. You can hit return and accept all those default values if you want to, or you can add descriptive text and whatever (probably just hit return until it shuts up.) Now if you look again, it created a file called `package.json`. That is the way that an `npm` project is defined. Please next type `npm install`. That should appear to do nothing. If you look, it'll create an empty directory called `node_modules`. That's where things that `npm` installs go. The current behavior is because the current project's install list is empty. Let's add a few things to that install list - specifically 1. `gulp` - an automation tool so that we can not hand-do things 1. `gulp-babel` - a gulp wrapper for a tool that converts modern JS (and other things) to portable JS 1. `browserify` - a tool that packages your various JS together 1. `del` - a tool for deleting directories How? `npm install --save-dev gulp gulp-babel browserify del` (this may take a bit) When you write `--save-dev` you're telling the system to save this as a "dev dependency." A dependency is something `npm` will install in production. A dev dependency is something `npm` will only install on developer machines. So for example, if you use a documentation generation tool, it should be a dev dependency, because production doesn't need it. (Most things should be dev dependencies.) ## Gulpfile The `gulpfile.js` is where you keep the various steps that the build system will take for you. We'll just start it out with saying hello, to show that it works. Please create a `gulpfile.js` with the following contents: var gulp = require('gulp'); gulp.task('default', function() { console.log('hello, i am gulp'); }); A "gulp task" is gulp's concept of a unit of work; that's something it's meant to go get done. They always have a name, and they may have either a list of other tasks to be done first, or a function that is what they do, or both. One task name is special: 'default', which is the task that gets run if you don't name one specifically. Well written gulpfiles almost always have a default task. Now go to your console and type gulp from your project directory, which should say something like John@SINISTAR4000 /c/projects/rogue_demo (master) $ gulp [13:51:33] Using gulpfile c:\projects\rogue_demo\gulpfile.js [13:51:33] Starting 'default'... hello, i am gulp [13:51:33] Finished 'default' after 5.18 ms We now have a trivial, pointless, working gulpfile. Let's give it a raison d'être. First, a simplistic build system. We'll begin with a thing that destroys a build directory that doesn't yet exist. var gulp = require('gulp'), del = require('del'); gulp.task('clean', function(cb) { return del(['./build'], cb); }); gulp.task('default', ['clean'], function() { console.log('hello, i am gulp'); }); Notice that we have added an array as a second parameter to the original 'default' task. That's the list of other tasks to get done first, which we'd mentioned earlier. Notice also that the new gulp task takes `cb` as an argument, whereas the other did not. This is because the gulp task needs a way to know when `del` is done before allowing it to declare itself done, and `cb` (callback) is how `del` tells `gulp` what's going on. The task needs that to ensure that the lists of predecessor tasks are finished before the current task starts (so that we know that we've finished compiling stuff before we copy the results, or whatever.) Now, if you go into your project directory and create a subdirectory called build, and run gulp, you'll notice it's silently destroyed, along with anything inside it. That's our goal; we want to "nuke it from orbit, [as] that's the only way to be sure." The 'build' directory will be automatically made and destroyed, and you shouldn't interact with it except to load its current contents in a browser. Let's next actually have the gulp system make that directory, too. For now it's just one directory: gulp.task('make-dirs', ['clean'], function(cb) { fs.mkdirSync('./build'); return cb(); }); Also, we need to add `fs` into the require list (but we don't need to `npm install` it because it's a standard part of node.) var gulp = require('gulp'), del = require('del'), fs = require('fs'); Finally, because `clean` will be run by `make-dirs`, then we can just make the `default` task run `make-dirs` and not worry about it: gulp.task('default', ['make-dirs'], function() { At this point, if you make a build directory, throw stuff into it, then run `gulp`, your build directory should be emptied destroyed silently, and a new empty one made in its place. Next let's put a lame proof-of-concept `babel` build system in place `:)` 
Okay, great that you found it out yourself!
https://github.com/davezuko/react-redux-starter-kit Has everything you need.
is this a copy paste from your blog or something or is this all original content in response to this post? I'm confused
Other direction. This is all original content, and later when I clean it up, will be going onto some page.
To me, writing a full video game in a matter of hours seems trivial. (shrugs)
I recently went through this process and the survivejs tutorial was easily the most comprehensive. It explained more the webpack parts which I found the most confusing to begin with. I actually think the dev tools for front end development are more complicated then the actual library/frameworks themselves.
https://www.codeschool.com/paths http://www.codewars.com/ http://www.codecademy.com/learn https://www.bento.io/tracks 
We're all very impressed. But OP said he was a JS noob but you are already overwhelming him with totally unnecessary ES6 shit, and you still havent even gotten to collision detection which is the crux of the task.
Feel free to write a comparative tutorial that you think is better aligned, if you like. I don't feel that collision detection is actually the crux of the task, and I have a reason that I'm going through this in the order that I am. Thank you for the commentary.
Cool. I like it. Was the motivation for this library to add Rx natively to React + stateless components?
Um, why?
This is a lot of rambling nonesense
Well, at least the author of the article agrees with you... &gt;In fact, in many ways, the goal of this article is to make it clear that there is no such thing as a Higher Order Class, that term is total gibberish
Most of the article is him apologizing about that. Wasn't sure what he wanted us to get out of this content-wise.
What why ?
Why do we need a single page app to render static content?
## What was that `browserify` bit? So, the loading of scripts situation in Javascript is just a mess. There are several competing historical third party standards; no browser supports those directly; there is an ES6 standard; no browser supports that directly outside experimental mode; and `babel` can translate the ES6 system back to the `node.js`-relevant third party ES5 system. So if we load a packager for that specific ES5 system ("commonjs,") then `babel` can handle the rest, and we're good to go. There are a lot of such packagers, such as `webpack`, `jspm`, `requirejs`, `qoopido.demand`, and so on. We're going to go with `browserify`, because compared to the others it's simpler. It is still, admittedly, a little complex. What these things actually do is accept a list of places they should start looking, then dig through them looking for `require()` calls, then load those targets, then dig, then ... , building out a physical dependency tree; then they package up all those dependencies inside some boilerplate that all makes it work from inside a single file. And pow: there's your one script with its nine libraries and fifty subscripts in a single file. The reason we care about this is that our current single file is getting ungainly, stupid, and overcomplicated, and it barely even exists yet. It's chopping time. First, we need a minimalist file to package to show a running package. We create a `src/app.js` that just contains `window.alert('app!');` so that we can see the bundle running once it starts. Next, a couple detail tools. var production = true, errorHandler = function(err) { console.log(err.toString()); this.emit("end"); }; Next, add a tool called `vinyl-source-streams` to your gulpfile under the name `source`. var source = require('vinyl-source-stream'); Next, a `gulp task`, so that we don't actually have to think about it at all. gulp.task('browserify', ['babel'], function() { return browserify(browserify_cfg, { "debug" : !production }) .require("./build/js/app.js", { "expose" : "app" }) .bundle() .on("error", errorHandler) .pipe(source("bundle.js")) .pipe(gulp.dest('./build/js')); }); What this does: 1. `browserify()` is the packaging system we discussed 1. The `production` bit mostly just tells it whether to write sourcemaps (not today thanks) 1. The `.require` tells it to use `app.js` as a module, and the `expose` tells it to make that module available to others under that name 1. `.bundle()` is the "ok it's time to go" flag 1. `source("bundle.js")` is using a tool called "vinyl source streams" to provide the single packaged up file (weird name, I know) 1. And the `.dest` puts it on disk under that name in the build location. Notice also that there's a `browserify_cfg` there. That's a JSON config file, like the `babel` one, and we ought to set it up too. So go make a `config/browserify.json`, and toss this inside: { "entries" : ["./build/js/bootstrap.js"] } &gt; "What is bootstrap.js?" It's a new file. Its only purpose is to invoke `app` so that browserify will build a `require()` tree there. This is an artifact of browsers not having modern ES6 packaging support. Just make a `src/bootstrap.js` and toss in `var App = require('app');`, and we're good. Update your gulpfile's default task to point at `browserify`, and continue: gulp.task('default', ['browserify']); Now, in theory, we have a running packaging system. We'll need to add a line to our HTML to point at the bundle now: &lt;script defer type="text/javascript" src="build/js/bundle.js"&gt;&lt;/script&gt; And if you reload, you should get an alert box with your existing roguelike. Which means your `browserify` and `babel` setup are done. `:D` &gt; "What the hell was that for?" That's coming next `:D` 
Native JS `Date` objects are always expressed in the browser's system timezone. You can use `date.toISOString()` to serialize it as a string in utc. `Date.parse()` will convert an iso string into a `Date` expressed as the same moment in time in the browser's system timezone. As long as your server always inputs and outputs as utc iso you'll be all good. Input and output as utc iso strings, live dates as native js `Dates`. Use `Intl` (official js api for localization) to format dates as strings. Safari and &lt; IE11 need a polyfill. `formatjs` and `moment` provide '10 hours ago' formatters. I would prefer `formatjs` over `moment`, because `formatjs` also has tools to help you use `Intl`, while `moment` has it's own homegrown localization solution. My suggestion is to keep it simple and use the built-in js api tools as much as possible without relying on 3rd party libs like `moment`. `moment` is an excellent lib, but if you need it within the browser, you're probably doing something complicated that will bite you in the ass later down the road IMHO from fixing lots of date/time defects.
thanks for your reply .Sorry for my late reply. 
I probably should mention that I'm keeping [a github repo](https://github.com/StoneCypher/rogue_demo) up to date, so that you can compare against my "official" code if you get stuck. Alternately, [here's a timeline](https://github.com/StoneCypher/rogue_demo/commits/master), so that you can see the individual steps along the way. Just edited this into the original post, too.
I'm a big fan of [Este.js](https://github.com/este/este). 
I have guests unexpectedly, and will resume this later. There are two more posts already mostly-written.
great collection! ever find a good resource on combinatory logic? Not necessarily looking for something in js or a c-family language, but I'm having trouble wrapping my head around lambda calculus, or SKI etc. without more concrete examples. Raganwald has Allonge w/ a bit of an intro and I'm diving into his Kestrels... with the little Ruby I have, but just wondering if anyone had come across a good intro
Sure, but it seems to me like you're getting caught on framework overload. I had the same problem, and the best thing I did during that time was to just pick a couple and start. Just my two cents. And, I gave you my personal suggestion - babel and gulp. I've used traceur, grunt, jspm, systemjs, webpack... Probably others, but those are the ones that come to mind. I prefer babel, and I prefer to use gulp to push my code through babel's transpilation process.
if you're into redux, this is one of the best architectural starters: https://github.com/erikras/react-redux-universal-hot-example. Mildly opinionated, but its a great universal implementation of react + redux + redux-router.
&gt; The random() method returns a random number from 0 (inclusive) up to but not including 1 (exclusive). Source: http://www.w3schools.com/jsref/jsref_random.asp
[`Math.random()` returns a number in the range \[0, 1\)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random). The upper end point is exclusive, which means it can't return 1. 
Ah that makes sense, thanks!
Thanks!
[removed]
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/bestof] [\/u\/StoneCypher spends a 'trivial' amount of time and effort to make a game with text-based graphics in javascript, and then spends several hours worth of comments explaining how.](https://np.reddit.com/r/bestof/comments/3r8xmy/ustonecypher_spends_a_trivial_amount_of_time_and/) - [/r/depthhub] [\/u\/StoneCypher says "it's straight up trivial" to make a game with text-based graphics in javascript, and then spends several hours worth of comments explaining how.](https://np.reddit.com/r/DepthHub/comments/3r5qsm/ustonecypher_says_its_straight_up_trivial_to_make/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Thanks for the help. I live in Shanghai and my company actually hosts our local JS Meetup and JS Conf China. I'll ask around locally and see if anyone knows some more! 
It seems like you're missing most of the logic of the program... tempting as it may be to do someone's school project for them, I'm going to go ahead and pass.
One day some aspects of your ES2015 code will actually run on all of your target browsers and you will want to stop transpiling any specific number of features into ES5.
StoneCypher said a lot of important things, but good fucking luck parsing it all.
Likely a newb question, but is this an alternative to https + standard auth headers? I've probably got more questions depending on the answer.
I'm firmly on the single page app bandwagon when it comes to building web *applications*, not wordpress sites
lol the funny thing is people who do this will end up with a SPA front facing site and an old fashion non SPA backend.... it's a little backwards
Js is faster than you give it credit for. Filtering a list of objects by some predicate is pretty fast. 
I'd advise you to be careful to dismiss this "boilerplate". It's served me well with a real project. This combined with the react-router "huge app" example. EDIT: the only thing that bugs me with these generic solutions is that never show production builds. Remind me in a day and I will show you how easy it can be.
Guilty as charged.
Holy shit this is the most high effort reddit post I've ever seen! Have some gold.
&gt; not using the var keyword several times I actually hate this about CS, it makes reading code much harder because you can't differentiate between reassignment and variable initialization.
&gt; I don't understand why there was even a need for immutable-js to be made when mori was available. While mori apparently is older, there are a few problems with its internet presence. Most notably it is - not written in javascript - seemingly not committed to keeping API as it is from between versions (0.3.x ... if your library is battle tested for four years, just call it 1.0 ... don't go all Google Labs on it being "beta":) - not too well "known"; 1800+ stars, 70ish watchers compared to immutable's 9400+ stars and nearly 300 watchers. - not too easy to find with Google unless you're specifically looking for it by name (on the blurp the author mentions once "persistent data structures", which is not exactly the same thing as "immutable data structure") First few of the bullets are quite subjective things. Personally, if I am writing a JavaScript-project, I prefer to have all the code (including third party libraries) in that language to begin with - in order to have everything properly debuggable. Mori supposedly ships with a minified js-file (despite what all the documentation says, it actually doesn't, you really need to build it yourself - adding another layer of complexity to the equation) Also, not being as known as the competition doesn't help mori's case a lot either. Further the fact that mori currently lists "immutable" as one of its devDependencies (probably by accident) certainly doesn't help :)
Pretty good read actually. Learned a lot. If only there was a code snippet on the decode step, it would've been the icing on the cake.
Some good reasons. But, this part just doesn't make any sense: &gt; Further the fact that mori currently lists "immutable" as one of its **devDependencies** (probably by accident) certainly doesn't help :) Anything listed in `devDependencies` would not be part of the exported library. Thus, doing `require('mori');` wouldn't import any `immutable` code. 
Thanks! I don't know ES6... would be interesting to look in to! What do you mean by magic strings?
As of right now, Immutable JS has higher adoption, and a more JS-like API. As far as being "battle tested", I suspect Immutable is probably in more production applications than Mori. (At least if you don't count code using the Clojure version of the data structures, but I don't think you should; it's a different code base. And while Clojure's data structures are very similar to Mori's in terms of algorithms and structure, both are alo very similar to Immutable's, so it's all a wash in my view. They're all just implementing the same tries, hashes, collections, etc.) The benchmarks are an interesting point, although I'd actually be very interested by any links you have; my experience is that such libraries are hard to benchmark usefully. (Also, immutable libraries will never be faster than raw mutable operations; in any performance critical section you should be dropping down to mutable operations.) &gt; Are there any reasons for using immutable-js over mori other than the syntax perhaps being more familiar to those already using Javascript? More people are using Immutable; that's a pretty big reason. There's more documentation, more eyes looking for bugs, more tutorials, more libraries that interoperate, more support from third party tools, etc.
*raises hand* What's a web token? 
Why would one need this?
Damn. /u/MoTTs_ has made it his duty to set the record straight as far as this composition versus inheritance stuff goes.
The core reason is probably about staying idiomatic to JS. Lee Byron spoke about this after being asked at a talk: https://youtu.be/kbnUIhsX2ds?t=47m41s As someone who loves ClojureScript, I'm just glad Lee was focused on doing the thing that made sense for mainstream adoption of immutability in the JS community. It's technically a slower reimplementation with a facelift, but hey, it got everyone to look at it.
Sounds like something PHP would do. You'd then have to pass in an extra Boolean to get it to exclude the 1. 
WordPress is not static :) you can add feature to the pages,like random article, article from the same author, and so on . Anyway your consideration is not totally wrong. On my plan there is a nodejs application that take content from Wp and transform it to static html. I' be already made a node/redis little middleware to serve page from memory cache ( angular.codetutorial.io use it and the results are some thing like 100x faster )
Where are all these jobs at? Obviously I need to move.
It goes without saying that this on its own does not hide any personal sensitive information sent during a request. Probably obvious to most but just thought I'd make this explicit.
I'm procrastinating another task involving JS and jQuery. I'm a noob, and have already found things in this tutorial that have demystified parts of my task that I've not yet gotten to. Thank you.
Having used both in React projects I can tell you some of the real differences: 1) The "idiomatic JS stuff" is not a very strong argument for me, given that you'll be using Babel to write "future" Javascript that will get transpiled into real, current Javascript. What's "Idiomatic" in JS changes every 12 months. :) 2) However, when using maps (Immutable.Map vs mori hashMap) you may find that getting values out of it (immap.get('foo')) instead of calling mori for every operation (mori.get(map, 'foo')) may be more confortable. React components won't need to import/require Immutable just to read values from an immutable map - and that will be 95% of its usage inside React. And the interface is compatible with standard ES2015 Map. 3) On the other hand, the fact that mori operations are all performed via functions allows you to do some functional kung-fu I don't think you could with Immutable, like composition, pipeline, partial, currying... 4) Using mori may have the side effect of providing you with some familiarity with Clojure's data structures. For me it's been a nice thing, for hardcore JS purists it probably won't be. :) 5) There's an ugly webpack warning using mori because it's expecting a JS source code and mori isn't available in that format. Also, there are some statements in mori's README on Github that aren't simply true. Immutable looks like it's being taken care of with detail. 6) Immutable is from Facebook and it's being pushed and presented in every conference about React since the beginning. That may explain the stars and watchers in github.
Well It's at least N times slower than array access
Does it have to be Javascript? I made crude CSV -&gt; MySQL converter in PHP a while ago and therefor know that works. Don't have the code uploaded anywhere though. Otherwise, if you can use Node JS I'm sure it wouldn't be too hard to do with [FS](https://nodejs.org/api/fs.html).
I wish they would have talk about security more. Like if you go this route you need to set the expire time time low. Less then a day or if someone gets the token they can act like them till it expires. I also would lock it down to only that same IP Address and device can use the same token.
&gt; React library it is not a react library. React-like library maybe
Yes, that is correct. I believe /u/Cody_Chaos is correct that it is possibly included for benchmarking purposes. It just looks a bit strange.
All I was trying to do was help people understand how to approach this pattern with ES6's classes... since there seems to be quite abit of confusion as to how to approach them. If it was clear to you beforehand - thats great for you, but to go so far as to call it nonsense? Explain why instead of blindly bashing.
Ridiculously helpful ... good work! I look forward to seeing the finished article :)
I think it's unfortunate the concept of reactive programming shares a name with a framework. Does cause some confusion.
For cross-browser compatibility and standards conformity, a CSS table ```display``` would be just as easy to understand and tenfold better than using an actual ```&lt;table&gt;``` element. &lt;div class="table"&gt; &lt;div class="table-row"&gt; &lt;div class="table-cell"&gt; ... .table { display: table; } .table-row { display: table-row; } .table-cell { display: table-cell; }
&gt; Why would one need this? ELI5: You want a difficult to forge bit of persistent state which can be checked without talking to a database. For example, a blob which represents the claim "this is user alice" which is passed via a HTTP header or cookie. Discussion: Of course, one *could* do this without JWT by a) generating a random blob, b) recording in the (possibly in-memory) database that said random blob is valid for user "alice" for the next hour and c) checking the blob given to you against the database on each request claiming to be from "alice". (This being a common pattern for persistent sessions over HTTP[S].) JWT uses cryptographic techniques to allow you to verify the "this is alice" blob[0] without having to talk to the DB. Depending on your setup this could be a strong advantage or perhaps this offers no particular advantage. That's where you'll need to apply good Engineering principles to your use case.[1] There may also be other advantages or disadvantages to using JWT depending on your setup. More generally, JWT provides a standard method for encoding and signing a chuck o'JSON so that you may subsequently verify that you were the one who originally encoded it. [0] And also a standard way to encode any other "claim" you wish. [1] For example, the storage cost of recording the blob/user association is O(number of logged in users) and requires that your web frontends have access to a shared mutable state. The storage cost for JWT approach is O(1) and requires only a shared immutable secret. You can envisage application areas where this is strongly advantageous or utterly irrelevant.
Are you attempting to do this all on the browser side? If you have a node js server running I highly recommend this library for working with csv: https://www.npmjs.com/package/csv 
By "magic strings" I'm talking about things like `user === "paper"`. Suppose you want to translate the game into french, or klingon. How might you get around the fact that paper is no longer "paper"? You might change the input from a `prompt()` to buttons, perhaps. Or you might use a different data structure to model the game components so it's easier to internationalise. Then you might think about how you could extend the game to support variants of rock, paper, scissors. Like [rock, paper, scissors, lizard, Spock](http://www.samkass.com/theories/RPSSL.html) 
I... didn't even know I _had_ questions.
How are we supposed to know what happens in bot.sendMessage() ?
Looks like asynchronous code to me. That means it is not guaranteed, that sendMessage function is being executed in the order it was defined.
I stumbled onto json web tokens when I was researching how to maintain login sessions on mobile apps and I'm trying to get used to the idea. With session cookies, I would normally read the session ID that I set in the cookie, then look it up on my data store on the server to retrieve the user ID associated with it. The way I understand JWT, I sign the JWT on the server which contains the user ID, send it to the client (in my case, a mobile app), then save the JWT on the device. At this point, when the mobile device sends a request to my server with the JWT in the authorization header, my server can check if the JWT has been tampered with and if not, believe the JWT's user ID claim without having to look it up and verify it in a data store. Is that pretty much the gist of it? Is the main benefit of JWT not having to look up in a data store and verify a user for every request to the server and simply believe who the user claims to be? If I want to be able to de-authorize a token, I assume I would still have to store the token on a data store to then look up whether or not a token is still valid or is there another way to do that with JWT without having to do the lookup?
This post is godlike. Truly. I love how you came in here and just demolished it. Its like in a comic book when New Bad Guy shows up and handily defeats all the heroes in a few blows.
Great response, lots of detail for a simple question. Thanks! 
Unless you generate a new web token on every request :)
Not sure if you're using discord.js, but that method `sendMessage` is [an async post request.](https://github.com/hydrabolt/discord.js/blob/2eed36d297031c03cd029a827d4c8f4d0441d79a/src/internal.js#L115-L130)
Wouldn't you then need to send username/password every time to get a new token, which would cancel out any benefits of jwt?
http://www.jquery.com
&gt; Sure, but it seems to me like you're getting caught on framework overload. Fair point, but the other side of that is that you made some bad decisions early on and end up paying for those mistakes big-time later on. I guess it's a compromise between those two extremes.
What's the difference between this and OAuth?
That doesn't guarantee it either. You need to pass a callback function to the method and use it to trigger the next sendmessage. I suggest looking up javascript async tutorials if that doesn't make sense to you.
I really think this is a good list, but one nit pick is the fact fantasy-land isn't just a standardisation, but in fact a set of well rounded libraries as well. Consider [free-monads](https://github.com/fantasyland/fantasy-frees) implementation or the [cofree](https://github.com/fantasyland/fantasy-cofrees) implementation as well. I personally would say the implementations in fantasy-land are better than others in some regards. Although it's no purescript, but it's not a bad alternative.
If that `sendMessage` method returns a promise, here's what I would to keep the order [1...10].reduce(function(promise, value) { return promise.then(function(){ return bot.sendMessage('some-channel', value) }) }, Promise.resolve()).then(function() { console.log("all done") }) If it doesn't return a promise and provides a success callback, I'll just replace the `return bot.sendMessage` part with return new Promise(function(resolve, reject) { bot.sendMessage('some-channel', value, function(err) { if (err) { reject(err) } else resolve() }) }) References: [Array.prototype.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) [Promise](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise) [Promise.resolve](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve)
Something like `mapM_` from haskell.
You can just make an AJAX request to the page, and if it doesn't have an API attached, you'll just get the web page returned. This is how you scrape webpages. From there you can just iterate over nodes or whatever information you need.
And all of my questions will lead to more questions. 
The problem has nothing to do with the well-known loop plus closure problem. The problem is related to async message sending. 
[**@kuizinas**](https://twitter.com/kuizinas): &gt;[2015-11-02 15:23:40 UTC](https://twitter.com/kuizinas/status/661202017277333504) &gt;I would ❤ to see [#javascript](https://twitter.com/search?q=%23javascript) support function level static variables, e.g. [*gist.github.com*](https://gist.github.com/gajus/b3cb2578ea9d114a567e) Would you? ---- [^[Mistake?]](/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/3r7wop%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Kind words; thanks
I don't see the point of reinventing table with `div`s when there's already a perfectly good `table`. Using the table is the sloppy approach; if you want to do something better, use a different approach instead of nicing this one up, in my opinion.
Thanks :)
Whenever you are doing anything over a network you need to check whether it is being done synchronously or asynchronously. 
Basically, anything we call JavaScript is actually ECMAScript. JavaScript as a name is actually copyrighted, so it cannot be used as the official name of the language. ECMA, the group that maintains and updates the specifications for the language, lends their name to the newer specifications, resulting in the ECMAScript name. This is why the new version of JavaScript is referred to as ES6 or ES2015.
Sorry, I meant maximum a couple thousand, not hundreds of thousands. I'm building the "original" simulations in python with the tricky parts in C. This would be simplified versions for communication/demonstration purposes only.
That's with an old version of V8 though. The current one is 4.6.
as long as labdas are `async` one can `await` in them. I use it all the time
Totally agree: when starting, the existing boilerplates are all too complex - just go check their package.json for an idea. Start with a minimal Webpack and configure it (webpack.config.js) to work with Babel and pure JS, then pure JSX. Then add React to that.
I have two code sections, first one assumes `sendMessage` returns a promise. If you patch the first one with second one, you get a version that works with callbacks.
It's questionception!
This library does not use React.
No point in using JWT if you are going to do that.
If you are doing mobile then yes you can't lock it down as much.
What do you mean when you say they can't be async? I'm able to await an async fat arrow function as well as await from within an async fat arrow function.
Matter.js?
[JavaScript is not asynchronous.](http://stackoverflow.com/questions/2035645/when-is-javascript-synchronous)
yaaaay, another library which doesn't really solve anything!
You would need to use WebGL(most importantly GLSL Shading Language) to achieve such graphically intensive simulations.. Here is a demo with particle physics simulations (It uses Plain WebGL): https://github.com/skeeto/webgl-particles You could use libraries like ThreeJS,PixiJS or even plain WebGL if you can invest some time to learn the low-level apis. EDIT: ThreeJS has a dedicated physics plugin http://chandlerprall.github.io/Physijs/ http://webglfundamentals.org/ is a great resource to get started on WebGL. 
Talking about performance so early in the process doesn't really mean much. In the long term, the native support for "async-await" will have an advantage over the library enhancements simply because language features can be enhanced at a lower level. I fully anticipate the initial implementation to have subpar performance which will get optimized as time goes by. It's really going to be a wait-and-see type of deal.
I was really looking forward to async/await, but to be honest once I started using them they felt kind of bulky and inconvenient. The fact that you can't have async fat arrow functions is part of it, but what seemed like the biggest disadvantage over promises was that you have to go back to using try/catch for error handling. Since then I've just been using promises and they serve their purpose well.
How do I play this? It's weird that it seems to be a library but not a fully implemented game. Is there a demo somewhere that I can actually play?
This stack overflow answer is very insightful and everyone here should probably read it if they want the short version of how JavaScript isn't async, but it is a little old. We generally say "js is async" as shorthand for what his answer describes. Most things in life come with caveats to simple labels and definitions, but those simple labels and definitions allow us to communicate effectively. Comparing 2010 (when that was written) to 2015, we use those edge cases as the norms now. So I think it is fair today to say in conversation that JavaScript applications run asynchronously. 
In the place with the insane climbing rents, of course! SF Bay Area, until the bubble collapses (again). I give it until 2017, personally.
This makes it a publicly accessible data.
&gt; No, because ES6 already severely complicates what was a comparably simple language Anything specific you have in mind?
Nobody stipulated that it had to be private...
Performance to start with will be similar to promises and generators. Chakra's implementation even starts with effectively a source transform from async functions to generators + promises, so it's clear performance will be about the same. Over time, though, I would expect async functions to get better. That said, I wouldn't expect the async await machinery to be a significant bottleneck in any sense. I don't see a reason to use Co or similar libraries personally, but I may be somewhat biased :)
I think he means something like this: async function makeRequests(){ //Use await to read in a list of URLs from a file var file = await fs.readFileAsync("file.txt"); //Split the file by line var urls = file.split('\n'); //Iterate over these URLs urls.forEach(url =&gt; { //Oh no! We can't use await in a normal function! var data = await request(url); }); } In this case the lambdas can't be async since they're being passed into the forEach method.
Given the choice I would always use async/await over generators, unless you have a really specific use case. I don't think async/await is a 100% replacement for promises but certain code scenarios are just so much more readable with them (the code that follows is not real, but a common pattern). let connection = await redis.connect(options); let session = await connection.session(); let results = await session.query(); for result of results: console.log(result); 
I accidentally called them "JSON webkit tokens" once and will never not be able to call them that again. With that said, a little deeper explanation of security and scalability tradeoffs (vs. something like cookies / session storage) would have been nice. Otherwise, this is probably one of the better introductory articles I've seen on them.
Technically speaking ECMAScript is just the specification. JavaScript is a "dialect" of that specification. Others include JScript, ActionScript, and Lua. For all intents and purposes, you can pretty safely assume they are the same. 
It's a rebranding of JavaScriptMVC, which housed many of its sub-projects, but to call it a "rebranding" isn't fair. It's far more than a rebranding in two ways. First, it adds a ton of features that JavaScriptMVC never had. Server-side rendering, and builds to cordova/nw being the biggest of these. Second, the integration of MV* and Module loader means it makes things easy that no one else is doing. The primary example is being able to progressively load modules from the template, and then have them automatically built into high-performance bundles. Another example is the automatic packaging of server-side data with the page response. I could go on, but the article makes a lot of these things clear. StealJS is better then those alternatives in four key ways: 1. It's automatic bundler means your site will load faster w/o any configuration. 2. It works without needing a server, meaning you can make individual demo pages / test pages easily. 3. It can easily export your project to other formats. 4. It's hot-module swapping works server-side, and when you install new packages.
They are basically just pure JavaScript objects with some functions and a few "magic values" such as length. When you make a lookup on an array it converts the key to a string and uses that like it would for other object keys. var a = [4]; console.log(a[0]); // 4 console.log(a["0"]); // 4 var b = {a: 4}; console.log(b["a"]); // 4 a.foo = 5; // the array object "a" now has a new key "foo" console.log(a); // [4] console.log(a.foo); // 5 console.log(a["foo"]); // 5 console.log(a.length) // 1 a[3] = 3; // this creates a hole in the array where a[1] and a[2] haven't been created and there aren't any keys for the values in the array object
Aww, I was really looking forward to being able to build something with O.o.
Yes, several things: destructuring, generators, symbols, arrow functions, block-scope, proxies, and classes in particular, complicate JavaScript. I don't have a problem with these additions [1]; most are useful. But they make JS a less minimal language, and minimalism is a important quality of a language. This is not a rant against arrow functions or block-scope, or against ES6 or complexity, just an explanation of the 'specific things' I had in mind. 1. Arrow Functions In ES5 you can use the 'var self = this' renaming to allow inner functions to use outer function's 'this' and 'argument' values. This is tidy use of lexical scope, a general, cross-language feature. function foo ( ) { this.counter = 0 var self = this setInterval(function ( ) { ++self.counter }, 1000) } ES6 arrow functions receive 'this' and 'arguments' lexically. This removes the need to rebind these values to a different name, but at the expense of creating an entirely new class of function; the function expression/statement behaves one way, and the arrow function behaves another, and any mixup creates bugs that are quite hard to find. An entirely new class of bug to avoid, all for the benefit of removing one line of boilerplate. function foo ( ) { this.counter = 0 setInterval(( ) =&gt; { ++this.counter }, 1000) } I think arrow functions will probably create more bugs than they'll solve, at least based from my experience with them. They fall into the same camp as 'with' and 'switch'; they are temptingly terse, but also prone to cause certain bugs. This brings the list of ways to create functions up to... function foo (x) { ... } var foo = function (x) { ... } var foo = Function('x', '...') // not common var foo = x =&gt; { ... } var foo = x =&gt; ... // behaves differently than above line. And this is ignoring the new generator functions! 2. Block-Scoped variables 'let' and 'const' are block-scoped, not function-scoped. This has good uses, but it complicates the language and requires you to reason about two forms of scoping simultaneously. The old style of using IIFE's to create private variables is ugly, but also simple. The new form is pretty but more complex. var exportData = ( function ( ) { var privateData = { } return foo(privateData) })( ) { let privateData = { } var exportData = foo(privateData) } My point in using these specific examples is just to show that ES6 adds complexity to JS at the language-level (not just adding new methods), and for the sake of minimalism I dislike the idea that even more sugar be piled onto ES6 classes, especially where existing general-purpose language features work fine already. [1] I do dislike the keyword-heavy classes, since they strongly tie you into one model of Java-style OOP. For the most part, JS is like Scheme in being a 'write your own language' language, and I think hard-coding one style of classical OOP cuts against this principle. Perhaps for the better, given the many disparate classical OOP implementations available in JS frameworks. [2] In case people comment of the lack of semicolons, I commented on https://news.ycombinator.com/item?id=9151479 with the same user name. 
Can't you just do this? //Iterate over these URLs urls.forEach(async url =&gt; { //Oh no! We can't use await in a normal function! var data = await request(url); });
This is ~~only sort of~~ correct. The JavaScript Engine can represent arrays however it likes under the hood, it's implementation specific. It only needs to conform to the spec for how the array should behave. Many engines will treat array objects that are known to behave like vectors (e.g. no arbitrary properties) as actual vectors. Edit: Did not read last sentence of post correctly -- this accurate.
Finally, a React Material Design UI framework that doesn't suck (I'm looking at you, Material UI).
I don't think you can, although I'm not 100% sure how async will work. You certainly can't with generators which is what I'm basing this off because forEach doesn't take a generator function. 
And now I need to know who this popular blogger is. 
Under the hood, array-backed data structures are used and engines use heuristics to figure out which implementation to use. So, if you create an array and set its millionth value to something, you don't actually create an array of that size. Instead, a sparse array of some sort will be used. Which internal representations are available and which will be chosen is up to the implementations. They can do whatever they want for as long as the semantics of the language are preserved. Linked lists are rarely used in general, because they are typically one of the slowest options.
You can do that, sure, but just note that the requests will all be sent in parallel. If you want them to be sent in parallel and you don't want to accumulate all the return values in some way, that code will work fine.
This is really surprising
Yes! Decision fatigue has put us in a place where it's going to take more than a press release to get our attention.
I'm currently building a SPA with Laravel for the back end and React JS for the front. I handle authentication using JWTs. Works really nicely. Here's a great tutorial on using JWTs with Laravel and Angular which helped me out a lot when I wanted to implement this feature; http://www.toptal.com/web/cookie-free-authentication-with-json-web-tokens-an-example-in-laravel-and-angularjs
Thats not 1 to 10
Still not 1 to 10 *Edit original was var number = 0; number &lt; 10 ... 
This is really great. I love the ability to live edit components in the playground.
It's a full stack from code generators (if that's your thing) all the way to build and deployment tools. It does everything fashionable frameworks do right and everything they don't cover. Kick decision fatigue out the window. There's a [quick start guide](http://donejs.com/Guide.html) that walks you through making a chat app -- can be done in under an hour. It starts at an empty directory and walks you all the way through deploying and generating Android, iOS, and Desktop clients from the same code base. There's also an [in-depth guide](http://donejs.com/place-my-order.html) that walks you through making a restaurant ordering site.
How would someone "get the token"?
Please remember to Edit your original answer before committing any code changes. Seriously - there's a major error being made by a guy new to coding and its that his comments don't match the result - this shit causes late night, slipped deadlines, work arounds and all sorts of crap when you're doing code for a living.
&gt; But an implementation is free to actually use a real array if you never do any of the things that require hash-map like behavior. Said more strongly, ALL major implementations will use a contiguous chunk of memory as the backing store if no funny business is detected. This is critical for performance reasons.
I am cool with this argument if we ignore the fact that a proposal for class Foo { static bar = 'BAR'; } already exists (stage-0) and is equivalent to function Foo () {}; Foo.bar = 'BAR'
Can you expand on your comment? What is it about material-ui that you don't like? I was thinking of using it so i'd love to hear about your experience with it. Thanks!
Makes sense to leave data-binding to the libraries and frameworks
Mocking circumvents everything generally, it's basically a way of replacing whatever method you are mocking, with some pre-canned responses, instead of it performing its original functionality. You understood it right, you configure a mock for bookshelf so that it returns some value so that your unit under test can function. If you can show an example of what you want to test, I can try to provide a more accurate response.
&gt; I'd love to ignore the fact that exists; unless it actually has the memory / threading benefits It does not.
According to the latest comment in that thread (at the time of this writing) Object.observe is an unflagged v8 feature in all of the recent stable versions of node.js, including the recent 30 month LTS release. This is going to be interesting...
Angular 2 had a pretty strong dependence on this. Curious as to how this will impact the project. But I can’t say I’m surprised. There was very limited scope for this and would be a big undertaking to implement.
Look into proxies
Yup: http://pastebin.com/wNryS9bM
No, it uses watchtower, which is basically a O.o polyfill. I remember seeing a presentation when they starting the project, they were trying to be really forward thinking and guess what JavaScript would look like when they were ready to release.
I wouldn't say that it's complicated. An array is a specialization of an object that has this `length` property that automatically observes the highest seen numeric index. And of course due to `Array.prototype`, array objects have a bunch of methods that regular objects don't have. 
You can test API endpoints too, at that point I would call it end to end tests though. In that case, you don't mock anything, you just send real HTTP requests to the endpoints in question, with something like supertest, and then write assertions on the responses. Keep in mind that this gets complicated quickly, because you have to put your database in a state that the endpoint can actually serve something (eg. if your endpoint lists registered users, you would have to get some users into the db first), and you have to reset the database in between every request, because previous requests might modify it, and you don't want to depend on your tests being run in the same order every time.
/u/rauschma made an interesting observation that you might be able to `await` an `async` function without the Promise wrapper in between. I think that would improve performance drastically. It definitely seems like an optimization transpilers might be able to do. https://twitter.com/rauschma/status/661099101732368384
`forEach` doesn't handle Promises. You'd have to do something like this: //Iterate over these URLs await Promise.map(urls, async function (url) { var data = await request(url); }); But I'm not sure arrow functions can be `async`. **EDIT:** [They can't.](https://github.com/tc39/ecmascript-asyncawait/issues/7)
Cheers for that, interesting quirks indeed.
Huh? Why is there no point to using JWTs if the token is refreshed on each request? The flow is like this; * User logs in and gets a token * token is stored on the client * on each request the token is validated by the server then refreshed and sent back to the client * lather, rinse, repeat, always repeat
I'm actually kind of glad -- this would really negatively impact performance. And they're right -- libraries have found better ways to do this -- there is no need to support this at the language level.
Ok I follow you. So here is an example of a query from an API endpoint: function *create(next) { let props = R.pick(safeKeys, this.request.body); let location = new Location(props); ... this.body = yield location.save(); } So how would I test this functionality? I tried to pick a simple example. Some queries get more complicated than this and this hides some validation processes that take place when saving a model.
I'm honestly curious. Did you read the article? I tried very hard to write up a bunch of things that it does that other frameworks don't do as well. I'm wondering if this response is due to my writing skills, or that the "framework fatigue" means people don't even bother reading the article.
What's supposed to happen? Walk me through it...
The user put s in information to the fields(name, address, etc.) when the "preview order" button is pressed, it calls the processDeliveryInfo function, which takes the value each field and adds a property to the delivInfo object(delivInfo.name/address/city/email/phone) and adds the "&lt;p&gt;" and "&lt;/p&gt;" tags to the beginning and end of the property and adds it to delivSummary, which changes the style of the element with the id "summaryPane" to "block". that's basically it for this part of my project, its making the object, filling it, and displaying it as a preview for the "order".
That's great. Thanks. So if end to end tests are done, is it even necessary to test the internals or is end to end considered enough?
Yup sorry poor choice of words maybe
Okay... I think I can help with that. I'm at work but headed home... I'll check back in about 35 mins...
By using vanilla callbacks? If so that would make things very different, because unlike callbacks, Promises callbacks are queued as jobs aka microtasks. And if not, if they're using observer patterns, they might as well just use Promises in the first place since they're essentially event emitters. Whatever the implementation, I'm really curious about this as well
This is exactly what I needed! Thank you so much!
No, no its not. Even if you tweet it. Its not.
Meteor is so much fun though and has come a long ways. I think I'm going to pull a wildcard though and give DoneJS a try (if what was said above is true, an hour intro app tutorial is easily worth my time and a great way to show off a frameworks abilities). 
If you want some help understanding the synchronous/asynchronous -divide in JS, try reading up about the JS event-loop. Or, watch this video which does an awesome job ;-) https://www.youtube.com/watch?v=8aGhZQkoFbQ
What the hell?? This was the single most important update for ES in a long time. I have been anticipating the release for two years already. It would completely change the overhead required to implement complex data-driven UIs without the need for bloated frameworks. Beyond just UI implementations there are numerous other uses including monitoring changes in databases / memory stores on the server to rapidly emit changes to clients. Where are the statistics on performance issues? How could it possibly be less efficient than dirty checking on the client in non-native methods? It seems like more is going on here, almost to the point that we are being forced into using a big name framework.
That would be fine except that you can add any property to the array e.g. arr.myprop = "Hello" but it's not really part of the array but rather part of the containing object. I'm not saying it's imposible to understand but that you wouldn't invent a language like that from scratch unless you were a madman.
Thanks
Right, I meant "Hey wouldn't it be nice if React had...", so I made this library, kind of thing.
This make sense: http://codepen.io/anon/pen/JYBNaM
It's nearly impossible for a non multi-billion dollar company to produce the hype that Angular and React have. We're the underdog at 40 people, but have been doing open source JS for 8 years. But what we lack in budget, we have made up for in persistence. We don't care about search ads or your social graph. We only care about helping people make amazing applications. We are the tortoise. If you use DoneJS now, you will still have something awesome to upgrade to 8 years from now. Btw, we are doing free one day trainings across the US. Checkout if there's one near you: http://www.meetup.com/find/?allMeetups=false&amp;keywords=donejs&amp;radius=Infinity&amp;sort=recommended&amp;eventFilter=mysugg
I thought you were implying that the tokens could be hijacked, which is potentially possible but not really the fault of using JWTs. In any case you would be refreshing tokens on every request.
These aren't books but might get you started: - [module-basics](https://github.com/Jam3/jam3-lesson-module-basics) - [module-best-practices](https://github.com/mattdesl/module-best-practices) - [module-creation](https://github.com/Jam3/jam3-lesson-module-creation)
I mean, Meteor can deploy to android and iOS as well. I'm just thinking this might be good for a very small team. Bigger corporations wouldn't use these small frameworks bc there's no format or structure so they can't easily bring on new developers once the code base starts really growing. I could be wrong, just throwing it out there. I've been hard pressed to find an NPM package that doesn't address a specific issue I have a hard time or don't have time to code myself. Really not trying to talk down your guys hard work you just have to understand how hard it is for Javascript developers to keep up with all these new frameworks that seem to address things that the big frameworks are integrating and patching pretty frequently, maybe just not as quickly as a smaller company can. On top of that, if I only have so much time in a week to work on my portfolio, I'd rather focus on the bigger frameworks first bc that's where the jobs are at.
React Toolbox has a different approach, for example use SaSS with CSSModules (new technique) instead of a inline style (material-ui). Also all the components are totally decoupled and you can theme them so easy (with a unique sass config file). We have tried respect all the material design spec (we love each pixel of this spec :)
Glad to hear it. The important stuff is on its way when I stop being lazy
You solution is so cute and short compared to OPs haha
For me at least, it really does come down to framework fatigue. It feels like every week *some new* JS framework is coming out that does everything different and better. Hell, one of my most upvoted posts recently [was just whinging](https://www.reddit.com/r/webdev/comments/3q2ro2/knockout_34_rc_is_available_with_performance/cwbnzuh?context=3) about how many decisions you have to make when starting a new JS project. Also, the article is quite long! That encourages skimming, which is a problem, because: * This framework looks quite large/monolithic. I don't know if that was intended, because that can definitely not be a good thing for something with a smaller community. * I don't want to learn StealJs. I just want to use the module loaders I've gotten used to. This "progressive loading" looks an awful lot like what webpack does with code splitting. * I don't want to hear the same preachy stuff that node does about async page rendering. * Why on earth is downloading from a CDN being listed as a feature? This sounds like when people say that someone has "good teeth" because they can't think of anything else nice to say about a person. * Handlebars syntax is going to be controversial in the age of angular attribute templating and react. * Why is Ajax being presented as real-time updates? That's not what real-time means. If this isn't just Ajax, then don't compare it to jQuery post/get. Even if all of these immediate thoughts are not at all justified and I'm being totally unfair, it still discouraged me from digging much deeper. And I doubt I'm the only one with hesitation on new frameworks! A shorter, much more focused article can help to get people like me interested in digging into the other documentation a bit more. 
&gt; maintains and updates the specifications for the language To further clarify, ECMAScript is a scripting **language specification** and JavaScript is an **implementation** of that specification. iirc.
Parsimony!
Check out [Learning Javascript Design Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/). It's a free e-book that sounds like exactly what you are looking for.
I made an ES5 Compatible version
 &gt; Create a web app written in Node.JS using ... MySQL. &gt; Use NPM to declare all dependencies so that we can run it in a test environment. I'm assuming that they didn't mean to use npm to install/configure MySQL?
This may be a little off-topic, but has anyone seen a module loader that will load a module from a variable? I'm building a code editor app, and I need to let the user edit code in a textbox, and then execute that code in the same browser without sending it to a server.
Not the database in particular. I just used Sequelize and had a local db set up to test with. Then in the ReadMe I wrote that they should put their db information in the config file. Here is my stuff, if you wanna check if out [here](https://github.com/Justinbrumley/samurai-survey).
Did you get a weekend? This could be done relatively easily in a day or so. You could use a turnkey setup that already has almost everything configured. 
Strangely enough, ActionScript (the Flash scripting language) is also a dialect of ECMAScript, although a much older version.
Jafar Husain (who sits on the working committee) was interviewed on JavaScript Jabber recently and he [touched on the state of object.observe](https://devchat.tv/js-jabber/168-jsj-the-future-of-javascript-with-jafar-husain) (around 34:48). tl;dl (from memory): It sort of lost a champion to push it through. As people started getting experience building large apps with O.o it started losing it's appeal as being hard to juggle and fragile. Unidirectional, React-style techniques largely stole most of the attention by virtue of being so much simpler to use and implement. Other techniques such as immutable data structures and reactive Observables also have gained in popularity and either don't mesh well with O.o or bypass the need for it entirely.
that's not readable
&gt; var startPoint = [a,y]; &gt; ... &gt; y++; That `y++` doesn't change your array values, the `startPoint` array will _always_ be `[0, 2]` with this code.
Check out flow/typescript/whatever else if you want to ensure types in JS. Personally I never bother; unit and e2e tests perform a similar duty. Also, try to avoid multiple return types.
&gt; Check out flow/typescript/whatever else if you want to ensure types in JS JavaScript has a good, native way to handle types. Why use something else? &gt; Also, try to avoid multiple return types This was an example I wrote in 5 seconds on my phone, but there's nothing wrong with returning mixed types at all.
Honestly, this is pretty in depth. When I have had to do something like this, they at least offered to pay me for my interview time. While I definitely respect and understand what they are trying to accomplish, I am not sure how fair it is to expect someone to do something, from scratch, that would take several hours outside of a schedule interview session.
So, Apple pretty heavily uses CanJS, which is a big part of DoneJS. Their online store is built with it. This framework's roots aren't new either. Grooveshark was built in it. If you checkout the features page, there's a huge amount of structure and discipline around the framework. Checkout the testing feature: http://donejs.com/Features.html#section=section_ComprehensiveTesting and the modlet feature: http://donejs.com/Features.html#section=section_Modlets. JavaScriptMVC's motto, which DoneJS is based, was "develop with direction". It's a big part of the framework. How do you do progressive loading? How do you do server-side rendering? These are not things that a `npm` package can usually solve simply. Also, compared to meteor, our real-time solution is more straightforward allowing it to against any backend quite easily.
&gt; If an argument isn't of the type I want it to be, then the function should fail. Yes, but premature optimizations are the root of all evil :) The vast majority of code doesn't need to be type-checked at run-time because you should know what your types are to begin with! You should be type-checking external input (user, ajax, etc), but not internally as it just creates spaghetti code. All those checks should be left to linters and the like. &gt; can't have functional tests written against them? functional tests != functional programming, and that was just an example. getThings() .filterBy(value) .doSomething() You can't do that if `getThings` returns either an array or a boolean. Functions should have static signatures so you know how to interact with them. But whatever, I don't really care how you write your code :P
- The framework is broken into many individually useful pieces: http://canjs.com/, http://stealjs.com/, http://funcunit.com/, http://documentjs.com/, and more. - There's nothing to learn about "stealjs". You can use the module syntax you are used to. Webpack doesn't automatically figure out the most optimal bundles for you the way steal does. - On node "preachy" stuff ... this isn't about node, it's about how it's very hard to achieve the same thing with React. W/ react it's very hard to render in pieces. - We make deploying to a CDN stupid easy. It can sometimes be tricky to move from a development mode (loading locally), to getting everything loading right from a CDN. We make it brainless. - That's not what real-time means. You are right. But, it's an example of how we use set-theory to make "automatic" real time possible. We understand the post/gets you make and automatically can update your data. Everyone has different things they are looking for. What do you think we should focus on? 
This seems like an internal tool they want to use. I'd be asking for a contracting fee, as well. 
&gt; premature optimizations are the root of all evil This is not an optimization. It does not yield performance gains. It is a way to ensure that things fail when they need to fail. &gt; you should know what your types are to begin with That's a very dangerous attitude to have. &gt; You can't do that if `getThings` returns either an array or a boolean That sequence should fail if any method along in the process doesn't return the result needed for the next method in the chain. What happens when the wrong kind of argument is passed into `filterBy`? Does your app just not work? Or do you check the type of `value` and return some kind of meaningful error message? I don't care how you write your code either, but I don't agree with much that you are saying. 
I don't think it's that in depth. I mean, there a Yeoman generator that will take care of all the setup (generator-express). I can see why they're give this as an interview project because it touches on the full stack without being overly complex.
It's kind of tight. But, maybe as a sr position? 
Hi /u/Howzieky, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
the spec - https://tc39.github.io/ecmascript-asyncawait/#prod-AsyncArrowFunction
Yeah, I figured there was more nuance to those concerns and there would be answers around in the docs or upon thorough reading of the article. But I'm not always going to have the time or will to do that, and you're not always going to be around to give a quick little bullet point on a reddit comment. That's why I recommended something much more condensed and bite-sized, more like DoneJs' home webpage for people you're introducing to the framework for the first time. However, I would *personally* appreciate most to see code examples. A lot of the current documentation is very wordy and light on code. That's why I like the landing pages of things like [riot js](http://riotjs.com/) and [mithril](http://mithril.js.org/), as I'm almost immediately presented with code examples and can recognize right off of the bat how different and *clean* things can be. That's how I came to care about mithril. I was using react but saw how much more simple my code could be by using mithril. Just in their little toy example it was able to illustrate the differences in philosophy. But I'm not going to be interested at all if I have to spend 45 minutes just to see what some practical code examples look like. Something more quick, in the 5-minute range, to get immediate exposure to the code philosophy. For example, the [knockout tutorials](http://learn.knockoutjs.com/#/?tutorial=intro) do a very good job of showing me what knockout can do and easing into the more complicated features without bogging me down with a bunch of setup and scrolling. Within seconds I'm using it! Especially if your framework has something to show, like easy live updates. That can really help to separate it from the herd. Hope any of this helps!
Thanks for posting your questions, it's always nice to see what companies seem to want interviewers to know. For my first entry level job they only asked me three javascript questions. What are the ways you can define a "class," which way is faster, and what is the difference between == and ===. I was kind of disappointed to realize no one I interviewed with look at my github profile but I guess the discussions I had with them proved I wasn't a babbling idiot.
This seems like a pretty reasonable request that could be built out in an afternoon by an experienced dev. Is this supposed to seem outlandish?
It's funny actually, learning iOS has made me a better javascript developer by introducing concepts like view controller hierarchy that do a really good job of forcing seperation of concerns if you do it right. 
Tons of experienced programmers don't have GitHub profiles, and plenty of experienced programmers with GitHub profiles don't know what they're doing. Just some experience after having interviewed people myself (for asp though).
Don't worry too much about not knowing the answers. One of the key to be confident while searching for a job is to plan study time ahead in order to master or at least feel more confident about difficult questions you could be asked with only a pen and a paper. Then even if an interviewer asks you something you don't know, at least you trained to handle the situation and it will be visible. I personnally created my own "interview questions database" in which I put every question I could be asked about a technical subject (internet is plenty of those), and try to find the answers on my own before anyone asks. After that, I added the questions I was asked during my job interviews and trust me, this database has been and will keep being very useful. I encourage every dev/ingineer to do so even when not looking for a job.
Can you expand on number 2? Do you mean within the strings themselves or do you mean there are copies of strings in a large array? Also thanks for the questions.
I recently went through the interview process as well -- I ended up with 8 phone screens, 5 onsites, and 3 offers, and I accepted a job at a startup in SF. &gt;An assessment of Github / portfolio links would be a more ideal measure of progress but doesn't seem to count for everything. One of the things that annoyed me is that some companies aren't interested in your projects even when you have them *and* when they're very recent and relevant to what the company is doing -- they'd still rather make you do a bunch of whiteboarding or whatever. Broadly speaking, the questions I got asked fit into one of three categories: 1) **JS language questions.** Knowing the difference between == and ===, call/apply/bind, hoisting, closures, etc. all fit in here. More than once I was asked to create buttons inside a loop that would alert their index when clicked. I was once asked to implement the game snake to a particular spec that involved only making certain methods and variables public. 2) **DOM manipulation.** Working with the browser without relying on libraries. I was once asked to implement `jQuery.scrollTop()`without using jQuery. I was asked to create an element that looked like normal text, then when clicked would become an editable input, then when blurred would go back to normal text. I was once asked to create animated progress bars with increasingly complex functionality -- at the end there was supposed to be a button that would add a progress bar on each click, and the progress bar would animate from 0 to 100% full in 3 seconds, but only 3 progress bars could animate at a time, and as they finished the next one would begin. 3) **Algorithms/data structures.** This is basically CS and has nothing to do with front-end or JS specifically. I had to study a bunch of this stuff specifically for interviewing because I'd never used it in my previous 1.5 years of professional experience as a front-end dev. I was asked to write an insert method for a binary search tree. (Not that hard, but I just didn't know it at the time). I was once asked, in a phone interview that involved no coding, to describe an algorithm that would determine, given a binary tree, if it was a binary search tree. I had to provide its time and space complexity (big O notation). The method I described wasn't efficient enough so I was asked for a better one. I was asked for an algorithm for detecting spam comments, where comments were objects with an author and id, and any comments with the same author and id were considered spam.
I've found your brain can really fall apart during interviews. It helps to take your time and break down the steps rather than do everything at once. I wonder if sometimes interviewers just want to see how you deal with problems when you get stuck. For me the way out was to write the simplest recursive function I could, log the sequence 1 to n, and then edit the function from there.
Sure, I mean the array given to the function would be of format `['cat', 'dog', 'dog', 'rabbit']` and your function should return `'dog'` as it is the most commonly occurring string. 
Job hunting fucks with your brain. I have a hard time sleeping soundly when I know I have an interview in the morning, which doesn't help my interview performance. On top of that, you're in a tiny room with someone judging your every keystroke and asking you to solve a completely arbitrary, out-of-context problem in an unfamiliar environment in 45 minutes flat.
I could give a pretty damn good answer for all of those questions. And I'm unemployed. Ffffff. Doesn't help that I have no idea how to market myself...
Where are you located?
Boston, as of a few days ago; recently escaped a tiny web dev job in a tiny town, but have been in the market for a B-town job for a few weeks now.
Ah, yeah. Sorry, not in my area. Keep at it. If you can answer all those, and are pretty decent with the ones I added, you're really rolling the dice when you interview in hopes that the person on the other side of the table is competent enough to ask the right questions. If you're not getting callbacks at all though, you might have resume issues. Make sure you have your skills prominently listed, make sure your work experience shows how you used those skills, things you've accomplished, what *your* role is, vs what happened at the company while you were there. There's a huge shortage for well qualified javascript devs. If you know your stuff, and keep applying, you'll find something.
I learned a lot by reading: 1) the [jQuery source](https://code.jquery.com/jquery-2.1.4.js) although I dislike the style conventions with the spacing around function parameter names and such but beside that it has been pretty heavily commented from day one. 2) the [YUI source](https://github.com/yui/yui3/blob/master/src/yui/js/yui.js) - that's been discontinued but the source is an interesting read anyways 3) the [Knockout source](http://knockoutjs.com/downloads/knockout-3.4.0rc.debug.js) - it hasn't a vast amount of comments but the comments that are there are pretty good and the code speaks for itself - imho this is like it should be. 4) the [RequireJS](http://requirejs.org/docs/release/2.1.20/comments/require.js). I'd also try and grab the current version of ExtJS, they've got a decent class creation/module loading mechanism that is worth knowing about - even if you're not using it, I never did but trying to reimplement parts of these libraries on my own taught me a lot. Hope this helps! Happy coding 
Could you really build this in an afternoon? I think I could maybe do it with Meteor, but express? The boilerplate alone would take all day...
I actually implemented deep observe with O.o here: https://github.com/capaj/observe-deep Quite possible to accomplish with Weakmaps. Or another implementation: https://github.com/aheckmann/observed
Here's some answers to the coding questions if anyone wants some: #Return n lines of Pascal's Triangle Solution Time: 6 minutes. This is one I've never done before. I just made it however so that the first and last elem in each array group is a 1, and then everything else is just the sum of ([x] + [x - 1]). function pascal (lines) { var arr = [[1],[1,1]]; for (var x = 2; x &lt; lines; x++) { arr[x] = []; for (var y = 0; y &lt; arr[x - 1].length + 1; y++) { if (!arr[x - 1][y - 1] || !arr[x - 1][y]) { arr[x][y] = 1; } else { arr[x][y] = arr[x - 1][y - 1] + arr[x - 1][y]; } } } return arr; } #Find most common string in array Pretty easy to use hash tables for this. Solution Time: 4 minutes. function findMostCommon (arr) { var table = {}, max = 0, index = null; arr.map(function (i, o) { if (table[i]) table[i]++; else table[i] = 1; }); for (var x in table) { if (table[x] &gt; max) { index = x; max = table[x]; } } return index; } #Fibonnacci with Recursion Solution Time: 3 minutes. (Inclusive of memoization) I only could do this because I've done it before. Wouldn't know this fundamental way of solving fib otherwise. The memoization is implicitly helpful in larger calculations though. function fibRecursion (num) { this.table = {}; this.recurse(num); } fibRecursion.prototype = { recurse: function (num) { if (num === 0 || num === 1) { return num; } else if (this.table[num]) { return this.table[num]; } else { this.table[num] = this.recurse(num - 1) + this.recurse(num - 2); return this.table[num]; } } };
Use Moment.js - http://momentjs.com/
&gt; what hard problems have you solved I hate this question. My answer: I debugged the code and looked into the source and proved with test cases and assertions and shit. What I actually did: Stack Overflow and forgot about that problem forever before moving onto the next in the line of endless problems. 
I'm not sure your Fibonnacci one works.
You might be viewing the question too narrowly, though admittedly, I didn't actually ask you a real question, just made a note :) I like to hear about solving a real problem. If I had to answer it personally, I'd probably give an example of retraining developers from other technologies to web technologies/javascript--or more widely stated, how we took a company that didn't do modern web apps and got them to do that. We ended up building a "boot camp" style training program that was around 30 hours, built project teams mixed with product experts and some freshly brought in javascript experts, filled out with with other devs that were either cross-trained or hired new as beginners. Other answers I'd consider, would be things like building out a single-page app framework/architecture from the ground up back before that was a thing, before there were off the shelf frameworks that did it :) We learned lots doing that, we ended up building an async dependency manager much like what require.js became. We got that part right, but we also made mistakes, which are good to mention, as you learn from them. Just find a way to make the question something you *want* to answer, even if it isn't exactly what you're asked :) Otherwise, interviewers know that there are some questions that are hard for people. Different people have trouble with different questions, so good interviewers will just gloss over it and move on to the next question. It's not about tripping you up, it's about using both your time and theirs as effectively as possible to figure out whether you could do the job.
Mostly they're looking at your problem solving ability. As an interviewer, I don't really care that you've memorized a particular framework's abilities (unless it's clearly listed as a requirement on the job description). Algorithms, especially ones you're not familiar with, provide a great way to demonstrate a candidate's ability to break down a process into logical steps.
I agree with you. Algorithms have their place, but I generally don't ask them... I just generally have too many other more pertinent things to ask. That said, interviewing is hard, and people do what they learned from others.
What do you mean the time stamp would drift by a few ms?
.... right, silly me, I wasn't expecting to have to instantiate it :P. Consider: function fib(n) { var results = [1,1]; (function _fib(n) { if (n &gt; 0) { results.push(results[results.length - 1] + results[results.length - 2]); _fib(n-1); } })(n-2); return results; }
Yeah hah it was my 3 minute solution. :P But yeah yours looks quote good.
Ah, you're right, of course - I'm just a bitter interviewee with a 'us vs. them' mentality. It's far healthier to bear in mind that both parties have interests to fulfill. I've been on both sides of the interview table and while this isn't a question I'd ask myself, I've definitely *been asked* enough times to have developed my own way of answering.
When you are using `document.body.innerHTML` and rewriting the entire body, you are deleting all the nodes on the page. JavaScript events connect to those nodes, so if you delete them and then re-add them, the animations won't be able to find the nodes anymore. Find a way to do whatever it is that you are doing without using `document.body.innerHTML`.
TIL you can use JS in Photoshop. You've changed my life.
Is the correct answer through a hashtable? Or maybe a lexicographical binary tree? (Or would that actually be an equivalent solution?)
In that case there is no need to write it out. Just ask for solution. Yes, i would need to prove my skill, but that is not the way to get any logical conclusion out of my skills. It says nothing. And trust me, I've done interviews on both sides of the table. 
Worth noting on your "most common word" solution, since it is time restricted: `array.map` is considerably slower than a standard `for` loop, and your second loop is unnecessary if you keep track of the current count leader in your first loop. function findMostCommon(arr) { var table = {}, max = 0, index, i, j; for (j = 0; j &lt; arr.length; j++) { i = arr[j]; if (table[i]) { table[i]++; } else { table[i] = 1; } if (table[i] &gt; max) { index = i; max = table[i]; } } return { word: index, count: max }; } I'm getting about 20% faster results with that on large (10,000,000) word sets.
&gt; then expect the stored timestamp to equal a generated timestamp after an unanticipated (at time of generation) leap second, the two numbers will not be equal. What? Yes they will. Computers have no concept of leap seconds, they don't adjust their count of seconds since 1970 when one occurs. The only entities that have any concept of a leap second are the global time servers. 946,728,000,000 is Jan 1, 2000 (30 years after Jan 1, 1970, `1000*60*60*24*365.25*30`). Multiply that by 2 and you get Jan 1, 2030. That never changes.
I will walk out of an interview if they pose test questions, period. Look at my portfolio and my github, the rest is on stackoverflow. My code style is there and my understanding of the technology. If they are too lazy or incapable to scrutinise all I've already given them, they are probably mindless HR staff filling technical departments with the kind of people I can't work with. Job satisfaction is massively important to me and this kind of recruitment technique is a big sign that I will be working for a company with broken systems inside. You are interviewing them as much as they are interviewing you. These are fun challenges, but red flags in an interview situation.
Hahaha I'm obviously terrible at attention to detail ;) Did it also ask to skip 0? Or is this often the case? I'm not a math dude.
Most of the instances of the Fibonacci sequence I've seen start with 1,1. No reason you can't start at 0,1 though.
I'm curious if you know why this variant of the code is unreliable in node? It hangs before finishing most of the time. var Promise = require('promise'); function promiseTimeout(time, action){ return new Promise(function(resolve, reject) { setTimeout(function(){ action(); resolve(); }, time); }); } [1,2,3,4,5,6,7,8,9,10].reduce(function(promise, value) { return promise.then(function(){ var time = 100*Math.random(); console.log("Queuing "+value +" " +time); return promiseTimeout(time, function(){console.log(value)}); }) }, Promise.resolve()) 
[underscore annoted source](http://underscorejs.org/docs/underscore.html) can be helpful too !
Yes, we are going to support mobile soon recall this is the first version and it's not even finished yet! That's why the playground doesn't look good on mobile yet. Thanks!
Looking at github profiles implies I'm looking for younger white men who happen to have had a prior position that allows them the luxury of working on open source. That's hugely limiting a candidate pool. The technical coding interview has its issues, but it is a form of interviewing that I can apply consistently across candidates of any background.
This was one in the online quiz, I brute forced it, checking every value in the array in the against every other value in the array. Something like this: function mostCommon(arr){ let index = 0, max = 0, container = arr.map(x =&gt; [x, 0]); arr.map((x, i) =&gt; { arr.map((y, j) =&gt; { if (i !== j &amp;&amp; x === y) { container[i][1]++; } if (container[i][1] &gt; max) { [max, index] = [container[i][1], i]; } }) }) return container[index][0]; } In hindsight this was really inefficient and I lucked out that it didn't go over the execution limit. It also doesn't check for ties. /u/PM_ME_INSIDER_INFO has a really nice solution using hash tables. I'll have to remember that for next time.
Both your solutions are working, there's no dispute on that. But I think recursion would have been a better choice than the double loop in the first exercise. function pascal(len, arr) { if (len == 0) return; if (!arr || !arr.length) arr = [[1]]; if (arr.length &gt;= 1 &amp;&amp; len!=1) { var nl = []; for(var i=0, t=arr[arr.length-1]; i&lt;=t.length; i++) { nl[i] = (t[i-1]||0) + (t[i]||0); } arr.push(nl); } if (arr.length &lt; len) pascal(len, arr); return arr; } As for your most common, I would avoid creating a large object to store counts and then iterate over it. Something like : function findMostCommonString(arr) { var a = arr.sort(); var res = ''; for (var i=0, c=0, best=0; i&lt;=a.length; i++) { if (a[i] != a[i-1]) { if (c&gt;best) { best = c; res = a[i-1]; } c = 0; } c++; } return res; }
I ask #9 as a phone screen question, and I get a lot of candidates that are completely stumped by it. A variation of it is "if you could be paid to learn one new language, framework or technology, what would it be?" I get dead air on the phone of blank stares in the interview. One guy's perplexed response was "I'd learn whatever the project required." Don't be a robot. Show me a little passion for programming!
I also think it's probably because it makes them feel smarter. The places where I've worked we would invite promising candidates for a day on the job as a kind of 2nd interview. There they would complete a task, like write a small calendar app in JS or implement a feature in an in-house software we're working on. At the end we'd have them walk us through it, which was more important than the actual result itself. This gives much more insight into what a candidate is capable of, how they work and the code they write. It also gives them and your team a chance to get to know each other.
That's great and a lot cleaner than what I initially came up with. I was fascinated with this problem after it was asked, there are so many properties of Pascal's triangle you can exploit to come up with a solution. Here's an inefficient one I made just cause, using binomials and recursion: function pascal(n, i = 1, container = []){ let row = [1], x = 0; if (i &lt;= n) { while(x++ &lt; i - 1) row.push(row[x-1] * (i - x) / x); container.push(row); pascal(n, i + 1, container); } return container }
I realise I'm not as active here as I should be for self-posting - I'm only putting this here because I posted the first part here some months ago, got decent feedback, and feel guilty to have left people dangling for the second part. Hope that's not too terrible reddiquette on my part - and apologies in advice if it is. 
5 years ago when I started working in the field I had an hour long interviews with pseudo-code solutions and a long discussion about this and that. Today you apply for a job and you have to pass HR interview, home quiz, technical discussion interview, and a 2-3 days long project just so they would give you an offer. I too go through these with a fake smile on my face, but honestly I have a job during weekdays and better things to over the weekend than implementing a whole application just so I could hear what prospect might the position offer.
now the question i am sitting with, why? 
What he said isn't wrong, though. Using Github absolutely does mean you're filtering to candidates with enough time and/or money to contribute to something open source. Even a cursory glance would show you that is overwhelmingly a population of young white men. No one is saying that the white man should be punished for it, just that it's something some people might not realise. Considering diversity of experience when you're looking for candidates is hardly a bad thing.
&gt; Show me a little passion for programming! Uhm... how about *you* show some more... reason, rationality and - intelligence and empathy (I hope you know what "empathy" means, it has nothing to do with a "soft hard")? Because for qiute a few other people your reasoning sounds just *stupid-arrogant* (arrogant alone is fine - for people *who can afford it* because they are that good). I once visited another company and in their lab worked with a guy who was responsible for making Oracle truly "unbreakable". They developed cluster software for Oracle, later they were bought by HP. At a time when it cost 6-digit figures they had RAM disks, and they'd have automated processes to randomly cut power on a random number of cluster members and try to get their code to fail. As soon as we left the building we didn't talk about *anything* IT. We had dinner and spent hours talking, about his (Oregon) forests, bears and whatever. Not one word about IT. That guy was not just *good*, he was *great*, one of the best in the high-end cluster market, and to him his work was just that - *work*, a job. Good people *do* have a life outside IT. I am certain he would be one of the people you would reject. It's been similar with many top IT guys I met, and since it was my job to go to lots of companies and present and write whitepapers together with them I had plenty of interactions with the core developers in those companies. In summary, it seems to me *you* have some growing up to do. Also, it is *much* easier to work with people who are professionals rather than "passionate". What the f.. are you passionate about, it's just computers! I reserve my passion for the things I can do with IT, and I mean everything *human-oriented*. How passionate does a stone mason have to be about his chisels and hammers? A lot of great people reserve their passion for friends and family and treat their profession as just that. 
Question updated. I want to download images from the server. But the *download* attribute in *a* tag supports only for chrome and Firefox. 
I wish more companies did this (presuming you pay the candidates for their time). It would help both employers and candidates. As a candidate you're still making your mind up about whether you can spend 2-5+ years of 40 hour weeks at a company, and generic interview questions don't tell you anything about the product or the culture you'll be working with. 
How... unexpected! Let's say you have lots of potential. That's the positive side of being at the bottom. How stupid is that reply? It had already been clear where you are standing, the reason why I wrote a reply in the first place.
Yep, I cant say I'd ever bother asking a Candidate to answer dry questions like these, I prefer to show them the technology stack, then... A good candidate will ask questions, make observations, and then when I ask them how they'd implement a current or new feature they'll be showing me how the systems interact and we can have a discussion.
the key word that stuck out to me is young. time is a luxury. I doubt older coders of either gender have the time to contribute to open source projects in their leisure time, but probably also have a pragmatic and laser like focus on solving the task at hand as efficiently as possible and cutting through the bs because they have other responsibilities.
Yes sure I will try using this
It could be a problem with your polyfill library. Works well with native promises in node v4 /tmp ❯❯❯ cat test.js function promiseTimeout(time, action){ return new Promise(function(resolve, reject) { setTimeout(function(){ action(); resolve(); }, time); }); } [1,2,3,4,5,6,7,8,9,10].reduce(function(promise, value) { return promise.then(function(){ var time = 100*Math.random(); console.log("Queuing "+value +" " +time); return promiseTimeout(time, function(){console.log(value)}); }) }, Promise.resolve()) /tmp ❯❯❯ node test.js Queuing 1 41.37238117400557 1 Queuing 2 39.48433785699308 2 Queuing 3 1.458240463398397 3 Queuing 4 84.43878768011928 4 Queuing 5 9.626065380871296 5 Queuing 6 66.38254595454782 6 Queuing 7 67.15026758611202 7 Queuing 8 21.097100572660565 8 Queuing 9 93.80954802036285 9 Queuing 10 91.25637281686068 10
&gt; Job hunting fucks with your brain. I'm really surprised by how good it feels to hear someone else acknowledge that
Heh i love it when i get asked the palindrome question in ruby. Sure, here you go: def palindrome?(word1, word2) word1 == word2.reverse end But yeah those are good questions. One that's more general problemsolvey, and another that's applicable to the job.
&gt; Uncaught TypeError: Object.assign is not a function This is Chrome 44 on Ubuntu. Guess I need to update...
These sort of technical interviews have been going on for a while now, I'd be interested in hearing from interviewers how accurate they are at identifying successful candidates.
&gt; ...makes you feel like your time wasn't respected. Your time *wasn't* respected, and I'm not sure that this was ever the case. I don't think interviews have ever been all that courteous; but once upon a time the big shots at companies of any kind had secretaries, and it was the secretaries who took care to extend the courtesy of sending out the "Thank you for your interest...; we regret to inform you..." letters. Now that secretaries are mostly a thing of the past, that little nicety has become a relic. It sucks. There is no other way to say it. It's a cruel world. But don't let that get you down :-)
Maybe. I've used Express, but not Sequelize. I've been deep in Meteor territory for the last year. I do remember some dandy yeoman/slush generators though. Those might shorten the dev time substantially. 
I'd say coming up with the right answer isn't important (though impressive if done for a hard problem on the spot). It's more seeing how they work through the problem. If they have real experience they'll likely be able to atleast break up the problem into its parts and work out how a solution should look, even if they don't actually arrive at a solution in the end.
Those look like fine questions for any role. I can determine your skill level and most suitable role based on your responses to those questions. Remember, it's not always about getting everything right. Sometimes the interviewer only wants to understand your competency and where you're at in your career so they can determine where you might fit into their team.
I think it comes down to being somewhat familiar with the framework(s) in the exercise. Someone who's never worked with Express before and doesn't know what Sequelize does will require more time, even if he's quite experienced in other frameworks (e.g. Meteor, Sails, Koa, ...). The same would hold true for the inverse situation, if the question asked to do it in Meteor, but all you're familiar with is Express, then it would take you more time as well.
&gt; The only thing that matters is if you can ship a big product on time with a good standard. That's hardly the only thing that matters. You need to be able to understand the requirements, translate those requirements into quality, supportable code, build testing around that code that proves it works, deliver that code, work amicably with teammates, with product managers, with QA testers.... One poisoned apple can ruin the entire well. I need to know that you'll fit my company's culture. That's far more important than your ability to ship a big product. I can find uses for a junior dev with the right attitude, and I can teach people the skills they are missing, but I can not fix a person's lousy attitude that's bringing down the team's morale.
I would expect, for a project like that where it would easily take one to three 8 hour work days, some sort of compensation regardless if you got an offer or not. 
Describe JavaScript in one sentence.
You're really missing the point of the question though. Nobody is saying that you should be able to solve the Fibonacci sequence and push it out to our production website... It's simply just a tool to assess your ability and understanding. The interviewer probably just picked a question they are comfortable with, and can introduce different scaling of difficulty / move on to harder questions if needed. I've run lots of interviews where people can't get past what I consider to be a "simple recent cs graduate" problem... so it's been very useful in my assesments.
Wouldn't (word) =&gt; word.toLowerCase().split('').reverse().join('') === word be better, as something like Eye would return false? 
Thank you! I just have to remind myself it's going to take a lot longer than I had hoped. This is why I do see the benefit of things like bootcamps, for the structure. I very much am in the position of running around like a chicken without its head, not knowing what I need to learn next, how to learn it, gaps, etc. Posts like this make me realize I know next to nothing.
&gt; If you're an employer, please make sure to get back to the candidates you've interviewed It's a nice thought, but this probably isn't going to happen. Not in the US, at least. As a company, there's absolutely nothing to gain from contacting someone you don't intend to hire, but plenty of opportunity to open yourself up to a lawsuit. It's a shitty situation, but it is what it is. If you ever get a confirmation from a place you interviewed at that they're taking a pass on you, consider yourself lucky.
&gt; they'll likely be able to atleast break up the problem into its parts and work out how a solution should look I don't know if that's always the case. For someone who is not used to competitive programming that can be really tough. Some interviewers forget that the people who came out with the solutions for some algorithms are either academics or really interested in that part of programming. It's relatively easy to look up a hard problem on the internet and read the solution before asking a candidate. But when it comes to solving it it's not as easy. Some candidates don't do well under pressure and particularly on brain intensive tasks, having someone breathing down your neck. Others are maybe very good at researching, which is an important skill when it comes to solving problems. But that is not evaluated via a whiteboard problem. 
Seriously. Pascal's Triangle? For a javascript developer? I want to see developers who know what validation you should have on a basic shipping address form. I DGAF if you know your trigonometry.
And then also pay them for working for the company. That part is missing from most of these types of tryouts.
 function flip(n) { let r = [0, 0]; for(let i = 0; i &lt; n; i++) { r[Math.random() * 2 | 0]++; } console.log(r); } flip(10); flip(1000); flip(1000000); Possible output: [8, 2] [483, 517] [499807, 500193] As you can see, the distribution is fairly uniform, but you need larger sample sizes for that. If you want to alternate between links, you'll need to store the state on the server side. Increase a counter and then use `% 2` to figure out which "bucket" to use. Or, if you can access the stats, link to the survey with fewer completions. If both numbers are the same, pick one at random. See also: https://en.wikipedia.org/wiki/A/B_testing
Try: https://github.com/mahonnaise/jquery.easyPrint.js It copies the stuff you want to print into an invisible iframe. **Edit:** You might want to remove that "if ($.browser.opera)" stuff. `$.browser` was removed and that workaround isn't necessary anymore anyways.
You can't get it to alternate perfectly, as the JS only runs on the client - each client doesn't know what addresses the other clients have loaded. It seems close enough to 50% to me: https://jsbin.com/tiqolokono/edit?html,js,console
Oh yes, excellent point about applying it to both sides! I've been up all night and completely missed that. This is the code I had written for it when going through this post: function pal(str) { return str.toLowerCase() === str.toLowerCase().split('').reverse().join('') ? true : false; } pal("racecaR") 
Came here to say this! :) Never heard of Pascal's Triangle before this, and I had a fun time figuring it out.
While I agree, some of these questions do show general problem solving skills. Fibo sequences isn't really that hard and probably something people have been exposed to plenty of times to answer the question pretty well. The frequently occuring string inside an array questions is also pretty decent. The first time I solved it I did it pretty inefficiently, realized my it was bad, and re-wrote it. If someone had the same realization in an interview and rewrote it better on the spot it would tell you a lot about what kind of programmer they are, in a good way.
You include it after jQuery and then you register a click handler, which calls $('someSelectorHere').easyPrint(). You could do it like the demo does it. That is, register one generic handler and put the selector of the element(s) you want to print into a data attribute.
And a good interviewer will be able to see the differences in those people. Making an attempt, blundering through it, and failing is ok. You still see how they work. But I've had people just totally half ass it and you can tell they don't have any idea/don't care. And those are exactly the people I'm trying to weed out.
&gt; ability to break down a process into logical step Us too. We also use these kinds of questions as a setup to talk about the code they just wrote. How would you unit test this? Why did you do it this way? Can you make it faster? Use less memory? We also try to make suggestions or point out problems, see how they react and respond. It's that stuff we're really after... However, I try to ask programming questions that are less "computer sciency" or math-based (process elements in an array, parse a string, etc) - but other developers here ask questions almost exactly like what we're talking about. They say new grads with a BS or masters in Comp Sci shouldn't have an issue with those types of questions...
More and more business logic is moving from the server to the client. The front end is about to get really hard for people who don't know how to solve business logic problems. It's not just about tricky CSS anymore. 
Then I imagine you're doing very different work than the person who is asking algorithm questions. Which is ok.
Which is a disaster, from a security perspective. The client shouldn't be trusted.
Ordinarily I'd agree with what you're saying, but OP's title is the issue here; "front-end engineer" doesn't imply "javascript graphics".
I like to ask questions relating to their Javascript coding experience, like "What is an alternative pattern to using a closure? What would be the purpose for using this pattern?" This throws people for a loop... 
Insulting people doesn't make a good reply.
Edge has proxies? Wow... Didn't know
You're mutating the passed in array in your findMostCommonString function, which is unacceptable imo. Given that the stipulation was execution time rather than space I'd say the original answer wins out over multiple iterations (the space efficient method). 
Intended as constructive criticism: Using map in the fmc method seems wrong (although it works) as you're not mapping anything. Use forEach or just a for loop instead. Also, you call the word that you're picking out "index", but it isn't an index it's a word (or at least a key). fibRecursion being a constructor seems bizarre! Use a closure or a state parameter instead ( ie fibRecursion(num, state) and initialize state if it's undefined). Also, an array seems like a slightly clearer table than an object. edit: If I'm being really nitty then pascal doesn't work for n=1 (or n=0). Oh, and in the y loop, the condition can just be y&lt;=x, no need to get the length of the previous array.
No it doesn't. You're testing whether the candidate is good at your job interview, not whether they'll be good at the actual job. It really has nothing to do with anything I've ever encountered in my time as a front-end dev. Ask them questions about architecture, that's where the real problem lies.
"stuff like big O" is really important. It's NOT important until it is, and then you write a bunch of crappy code that's subtly way slower than it needs to be. And responsiveness matters.
Exactly. Once they start with that bullshit you know that they have no idea what the actual requirements for a good js dev are.
But that doesn't mean the client has to be unaware. The best user experience is usually achieved with a frontend which correctly predicts the backend's response. 
I interview front end engineers and we always ask the palindrome question and this is a common answer. The follow up then is can you make it faster? Something along the lines of: function isPal(word) { for(var i = 0, l = word.length / 2; i &lt; l; i++) { if(word[i] !== word[word.length - 1 - i]) { return false; } } return true; } 
Pascal's triangle has nothing to do with trigonometry - it is more like a two-dimensional fibonacci sequence. And it's not about knowing it by heart, but about being able to construct a pretty basic self-referential structure. I have little hope for someone who cannot manage to write even a woefully inefficient implementation. 
There is a difference between solving business problems and implementing a Fibonacci algorithm. 
Don't play yourself down, you have experience writing hello world in C? Add it to your programming languages. Don't tell people you're rusty in whatever.
As a backend dev I've pretty much nailed all of these, except for module loading/dependency management. That in JS has always confused me. I've looked at Browserify and AMD/require/CommonJS but I just don't get it. If I could get my head around that I think I'd call myself a full-stack probably. 
No I have written tries, linked lists, hash tables and most of the classic sorting algorithms in C. It's where I learned programming, but I am rusty in the fact that if I write C code i'll have to look up some syntax, for example creating a struct or other things. But Rusty as in give me a day or two and I am back in action. 
There's [SPA](https://en.wikipedia.org/wiki/Single-page_application) if they're single-page apps.
My first idea would have been to sort the array (depending on how efficient the JS engine can do it) and count the consecutive occurrences of each string. Aside from the sort, don't have to store information for every string, only the one with the most occurrences.
I'd troll the question and google the general equation for the nth row of Pascal's Triangle.
I think this is a good one, and I did get asked it in the interview for my current job. The question is, how do you reverse a string in one line? The answer is, `myString.split('').reverse().join('')`. (But that's not very interesting.) The follow up question is, are there any problems with doing it this way? And the answer to that demonstrates that you understand how JS represents strings, at least on some level. In my opinion you should know this, it actually does come up (though usually not in the context of simple string reversal) and it's important. Know what surrogate pairs and code units and unicode and UTF-16 are.
ugh, that's just awful
Oh yeah you're right I had language specs mixed up. Thanks!
All of those things are JavaScript number values which are 64-bit IEEE754 floating points. If you want to convert a number value to a hex string representation, use toString(16).
Rich Web Application. The term seems to have fallen out of fashion a bit though. 
So I wanted to try out the pascal triangle thing since I didn't event know what it was before this. http://codepen.io/jpsierens/pen/mejzZv nice excercise!
Use a module system, to allow you to write code once and use it anywhere you want. The new ES2015 (the new JavaScript spec) has a module syntax that you can use if you use the Babel tool, which transpiles ES2015 to be able to run in browsers that don't support the new JavaScript yet. Or you can use the Browserify tool which lets you use CommonJS modules, I prefer Browserify personally but I may be in the minority. This solves both of your problems. Instead of polluting the global namespace you import/require a module and use it like so var something = require('myModule'); something.someMethod(); And you can write your re-used methods inside a module, then just require/import them and use them in various places while only defining them once. You can also build modules with plain old JS, but the newer ES2015 module system or CommonJS modules are nicer to work with.
&gt; I want to see developers who know what validation you should have on a basic shipping address form. JavaScript development is way more than form validation these days of full-blown SPAs. Validating a shipping address? That's a pretty low bar.
Hi /u/velmu3k, I'm having a hard time seeing how this specifically relates to /r/javascript -- can you help me out? I've removed your post in the interim.
I bought the team license for my team. I'm a big fan of the way Wes teaches (his [flexbox](http://www.flexbox.io) and [command line](http://commandlinepoweruser.com/) video series' were both great (and free!)). I've been waiting for him to release this ever since he first teased it in his newsletter. The timing is perfect for us, too. 👍
[YAGNI](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it)
Display Pascal's triangle modulo 2, you get Sierpinski :-)
Was this after the regular technical interview? I'm guessing this would be impractical to do for everyone who passed a phone screen.
they're kinda SPA apps, its like 3 SPA apps in one, since the app is too big to fit on one Dashboard layout without being confusing and weird. 
~~I passed it the selector string ("#myDiv"). Was that not right?~~ Oh, whoops! Okay... I think I see it now. Thank you!!
I'd be worried about them reinventing wheels out of boredom.
Post the jsperf link, there's much more to improve here.
on a side note, it looks like your demo is in the `test` directory. typically actual tests (unit tests, integration tests, etc) are in a `test` directory, maybe you should put it in a `demo` or `example` dir instead to avoid confusion
Articles like this make me believe that jQuery is the PHP of JavaScript.
On the other hand, if you can't do the fibonacci sequence then that's a red flag.
My guess would be that the very point is to choose a problem that is unlikely to occur in your natural habitat, to make it more likely what is being observed is problem solving skills, not memorization.
You're right, those are good points. I'm not a fan of algorithm/memorization questions either in interviews.
It can be trusted with its own presentation... Where I work we have tons of client side logic... Mostly around rendering views of large datasets - Angular, React, d3.js... Nothing the the client does with that could hurt anybody else - it will just mess up their own rendering. How is that dangerous?
Exactly! The candidate should be analysing your stack and your business and working out what they can do that hopefully exceeds the value of hiring them. Front end is business, you can't just isolate yourself and be a great coder that knows all the jargon. You should be trying to help your company achieve its goals.
GPU rendering maybe ? https://github.com/jdomingu/ThreeGeoJSON
Squeaked out an additional 10%: This destroys the input array tho, but that may not matter. function mostCommon(arr) { var count = {}, item, countItem, highest, currentHighest = 0; while(item = arr.pop()) { countItem = (count[item] || 0) + 1; if (countItem &gt; currentHighest) { currentHighest = countItem; highest = item; } count[item] = countItem; } return highest; } 
This comes down to the very common theme of discarded information. `foo.bar = 10` discards information: amongst other things, after that line you no longer know what was changed. Sure you can recover that information with metaprogramming like `Object.observe`, but to the program proper, you've discarded it. So now you need that information, and you have two options. Option one is duplicate, poll, and diff, the old standby for making things work until you can figure out how to make things work. As a rule, polling is always a bad solution but sometimes necessary when the thing being polled won't cooperate. Option two, keep the information. `foo.bar = 10` discards it, but `set(foo, 'bar', 10)` allows you to insert arbitrary logic which could choose to keep it. Or the OOP way, `foo.bar.set(10)` or `foo.setBar(10)`. The syntax doesn't matter, it's that you are invoking a function that you wrote. In other words, you need to stop manipulating state directly and instead use accessor functions that take appropriate notes.
Yeah I'm realising it's an industry norm. But honestly, briefly reaching out to the candidate shouldn't be a major hassle. Technical interviews are usually the second or third round of interviews, both parties have invested several hours into the process at this point. I get that companies wouldn't feel like they have anything to gain, but where I'm from in New Zealand the developer community is quite small, and so if you treat candidates well it could be really beneficial in the long term both for reputation and if the candidate might be considering reapplying after a few years of experience.
There's definitely things that V8 will optimize, but it can only optimize certain things that won't have any logical impact on your code.
I guess it depends on what's included in 'business logic'. 
Those are pretty large sites and took a very long time to get just right. I would look for something smaller. Keep in mind the amount of time you have for this project as well. You could start small and always build up.
I bought this earlier. I've only watched the first video but so far so good!
Would case matter in the question and just be solved by word = word.toLowerCase(); before the loop? I love this solution and it's given me a new way to approach comparing strings and arrays by cutting the search time in half for true cases. Thank you!
Oh true, fair enough. Yeah, similarly I've found babel-eslint to be fantastic for catching bugs + keeping code style consistent.
For the DOM manipulation, do they allow you access to API documentation? If not, that's bullshit. No one should have to remember ask that shit.
Fair. Thanks for the advice!
&gt; this won't work in older browsers, and setting up shims or babel.js is outside the scope of this discussion. dealwithit.jpg Yea, "older browsers", like latest Chrome.
[dealwithit.jpg](http://i.imgur.com/QXdqtkP.jpg) --- ^(*Feedback welcome at /r/image_linker_bot* | )[^(Disable)](https://www.reddit.com/message/compose/?to=image_linker_bot&amp;subject=Ignore%20request&amp;message=ignore%20me)^( with "ignore me" via reply or PM) 
Did not know that - Thanks again :)
I think that's a legit solution if capitalization doesn't matter.
I think i understood your point. It's just that I disagree with having setter and getter functions being "good information management" because then your data is no longer pure, and rather it's wrapped in a bunch of accessors. I like my data to be in pure object literals, for game state anyway, because it's easy to transport, easy to manipulate, to save and load. In a way, I'm hoping the language evolves a way that does what your describing much more cleanly, rather than having to architect my own ad-hoc observers.
console.dir(document.getElementById("myDiv"));
Ugh, as a front-end developer with over 10 years experience who manages a small team myself I would struggle with a few of these questions. What's with the algorithm questions, are you expecting the front-end developer you're looking to hire to write genome sequencers in Javascript? This is everything wrong with interviewing front-end developers. Maybe things have changed since I last interviewed for a job, but I have never asked anyone these types of questions and would never expect a front-end developer to know anything about algorithms. Q1. I would have no idea. Q2. I would be able to solve this. Q3. No idea. Q4. With the advent of ECMAScript 2015, using bind is redundant and can cause serious performance issues to the point where you should avoid it altogether. Apply and call I rarely ever use day-to-day. Q8. What a stupid question. Q10. Given the recent backlash against class in Javascript, this is a good question. Most questions like the Pascal's triangle one are just the interview trying to show how smart they are. It's a dick measuring contest that only ends up resulting in the interview hiring someone who is like them. The only question I think that matters that would be considered algorithm-like is: FizzBuzz. If a candidate can FizzBuzz, then their chances shoot up 85% because a lot of developers can't even do a FizzBuzz, let alone some obscure algorithm they will never use day-to-day. In-fact, I use FizzBuzz to create a shortlist of candidates. We have a chat, I ask them to do a basic FizzBuzz and that pretty much guarantees a callback for a second interview. The best screening method I find is asking the candidate (after building a shortlist of candidates) to come in for a couple of hours and sit alongside another developer and see how they work on a real problem the team is trying to solve. I don't care if you can write some fancy method that can perform a Fibonacci sequence or memorise obscure Javascript API methods, I want to know if you can solve real problems and work well with others. Nothing tells you more about a person than seeing them work on actual problems with the very team they will be working with (if hired).
ES6 const lets you manipulate object internals. The const just means you can't swap out the entire state variable with some other object. You may be thinking of object.freeze().
I wouldn't want to work with you.
Never had I seen .dir.
The difference is the attitude of the person being asked to solve the problem. 
[removed]
So, you're a copy and paste kind of developer. 
Cheers! :)
Did we get the completion to this set of tutorials? You were doing so well...
Latest Chrome does most of the ES6 I've used here, actually
It talks to your experience if you know those off the back of your hand or not. If you've worked on systems with a heavy engineering and architecture focus you'd be able to list several examples of how you are using them on a daily basis to implement common engineering patterns. Similarly, terms like delegation, message bus or service lookup are industry standard depending on the roles you've been in. If any candidate isn't familiar with the term, I'll always work with them to find out if they understand the concept and how it's used. If their knowledge is sound then it doesn't matter, but it's still an indicator of experience.
You'll probably want to use something like [THREE.js](http://threejs.org/) and render the points on the GPU by using a particle system (now called Points in the latest version). [Check this out.](http://d1noqwlehza4b5.cloudfront.net/?SetupFromURL=true&amp;Alpha=0.3&amp;DrawingRule=Elevation&amp;MaxZ=2540&amp;Geometry=Circle&amp;PointSize=4.5&amp;LightOn=true&amp;LevelOfDetail=1.8)
It's extremely rare that an interviewer won't be willing to clarify questions and help you work through a difficult problem, ESPECIALLY if they're asking you about something specific. "Sorry, I don't remember what that algorithm is specifically but if you can describe what it does I can try to figure out a way to replicate it." A good attitude and problem solving ability is what they're asking you to show, not memorization of random algorithms.
Commenting to find back later. You're awesome :)
I also coded a small app that offered ítem recommendations. The back end was Node and frontend with Angular, later ditched Angular and used React. We used mongo to store all the data. What I loved about using React was the fact that you can have nice reusable components. Good luck.
Ok, thanks! Between you and me (at least for now), [this](http://jdhcodelab.com/test/gravity/) is the page that I have deobfuscated code on. It is also the page that I test on, so it COULD be unstable. Should I post that link instead?
https://github.com/tmcw/awesome-geojson
Honestly, writing a clear function that does something simple is pretty rare. 
Thanks for your feedback, but Angular isn't close at all to DoneJS in scope. Angular is 90% view bindings with dirty checking. Angular compares to CanJS in scope which is just one part of DoneJS. We have a similar examples to what you are looking for on http://canjs.com. But that type of example doesn't fit DoneJS because it's much more than an view-bindings library. Showing off that part isn't what DoneJS is about. It's about the glue between the code you write, how it's tested, how it's rendered server-side, how it's built to load quickly, how it's documented, etc. 
I recently fucked up the other way. I have a queatiin that i always ask because its obscure but has a commin pattern. We recently hired a guy who "got" it righit away. But, he missed a requiremwnt. And, didnt listen when i was talking about the problem. Hes been a nightmare to work with because he keeps on not listenimg and missing requirements. 
Wes is great, and does great stuff!
I love you all for your comments on this. I've been doing interviewing lately. What I have seen: 1. Companies who are really looking for contractors. They want an exact set of skills that meet what they want today, and nothing more. You see their jobs postings for months and months. 2. They don't seem to understand how people use Google. I know I have a memory like swap. I need to do something, I load it into memory, solve the problem, dump swap... 3. The algorithm questions... I talked with 4 people in a company and they each asked a different question. A better question.. Why shouldn't I spend a bunch of time optimizing something, what should I optimize... 4. I have interview anxiety. Breaking stuff down the way they want isn't how I think. I can't describe how my brain solves problems, and it will usually just confuse you. I have been out of college for a long time so I don't remember all of these things. You want me to sort an array of numbers in Java... Ok. Arrays.sort()... Done. I had to do a bubble sort because that's the only simple enough for me to think off the top of my head :( 5. Trivia.. What is the difference between obscure X and obscure Y? 6. You code crashes in a 3rd party library with no source. What do you do? Um.. I use my debugger and figure it out. WTF do you want me to say? We all have different styles. I've tracked down a lot of other peoples bugs, and they are all different.... The best interviews are where we can talk about what the interviewer is doing and what their App uses. You see what they actually need, you can talk about how you did that, and I've had cases where I could suggest other ways they could do something.
Thanks! I'm part of the JS community. I'm too narcissistic to hate myself. 
^^ This person right here gets it. 
It's a way of basically injecting dependencies into variables instead of just having everything live on window because a script tag got thrown on an html file. It allows you to say "this script represents my application, if can fend for itself and get its own dependencies as necessary". It also encourages you to write smaller scripts because you don't have to manage those pesky script tags anymore and make sure the order is all lined up. Imagine you had a script one.js that you needed to define and use. RequireJS/amd defines a define() function that takes a takes a function that will return a module definition. I.e. define(function(require){return 1}) And var one = require("one") when used CommonJS uses modules.export. I.e. module.exports = 1 And var one = require("one") Es6 has its own thing (the first module loading ever to be supported natively by JavaScript) I.e. export default 1 And import one from "one" This is probably a tad over simplified, but think of it as a way to load dependencies that you define yourself instead of some series of script tags loading them to a namespace you don't control for you!
So ... are you saying that you don't factor in a candidate's github profile at all, if it exists? What about linkedIn or a personal website? I guess I'm wondering if you limit yourself to a resume and the subsequent interviews. I feel that a github page is useful to gauge a candidate's personal motivation and ability over time, though alone it probably is not enough to go on. As for not having the time to work on open source due to closed source employment, I intuitively have to say that this probably just depends on the individual.
[Papa Parse](http://papaparse.com/) FTW. Seriously, i used it for a project, and it was incredibly easy to load in a csv file with it, have it tell me at the end which lines had issues, etc. Also on [GitHub](https://github.com/mholt/PapaParse) and my favorite CDN, [CDNjs](https://cdnjs.cloudflare.com/ajax/libs/PapaParse/4.1.2/papaparse.min.js) 
You are going to have to expand upon this question a *lot* more if you want help.
OK -- I was originally using a magnetic USB swiper that doesn't require any drivers/API/software -- you swipe, and it will turn put the card# into any input box I have selected ("Credit Card #" box, for example). Swipe and the #'s show up, instead of typing it manually. This is called a "keyboard emulation" feature, where it's not bound to specific software or drivers - whatever form I have selected, I swipe the card and it will "dumbly" (again, no drivers/software-specific) enter the numbers without any further features. Now I'm looking for a new card reader that supports EMV/chips and confused by the terminology: Are these the same thing? 1. EMV Card reader 2. Smart Card reader 3. IC Card Reader If not, what's the difference?
Ugh!!!!! I feel your pain. In the past I've asked candidates, what's your favorite website? This stumped people. I asked the dumbest, "you just have to know what the interwebz are" question only to get blank stares. The question used to be "What's your favorite website, from a tech perspective?" .... personally I was thinking Google Maps, but hell, I would've taken ANY website if they would have spoke up!
I don't see why there's continually a debate over this. The important part is that you're consistent and understand your choice. With or without both functionally work.
The last-gen cards (pre-OCT 2015) are magnetic card readers, if in USA. Now, it's 100% EMV, with about a 30% possibility of NFC as an additional option. It's completely different schema -- it won't read via magnetic readers. EDIT: Wait , are you saying they are KEEPING the magnetic stripe on the cards? If this is true then... problem solved :)
Not a debate. I'm sure we all understand that there's no harm in either preferences, I'm just really curious to see the stats. Edit: looks like I'm wrong about this.
[The live results](https://docs.google.com/forms/d/18NrIRCIW4UoFq377thPOF7JxoxNQQenl_5uZ7Ag4pHo/viewanalytics?usp=form_confirm) Edit: removed wrong details
You need an option for something like "Try to"
okay I'll add that
Maybe ByteArrays would help. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays
Nice, that works then. Cheers 
That's a really good point.
I've been using an observing proxy to track changes of component view model. Very handy indeed. Here's a [link](https://github.com/ytiurin/observingproxy).
And this article sums up why not pretty well: http://jamesknelson.com/why-you-shouldnt-style-with-javascript/
[Aww yiss](http://imgur.com/SQ49kbA) And yes, semicolons *should* be used. if you're optimizing your code as you write anyway, why not optimize the compiler (or something) as you go along anyway?
It would be the final project of my degree so I have enough time to do it. 
I agree, but the laptop I use "technically" isn't mine. I have it in my possession 99.999% of the time, but that 0.001% when it's not could cause that to flip if I removed certain things and McAfe is one of those. Thank god I don't have to pay the subscription though.
I don't know, sometimes you have to be direct. If I misunderstand a concept, I'm not angry if somebody tells me so. Programming is not really the topic for being cryptic to be nice, a clear understanding is more important. The sentence &gt; Does the client HAVE to access the unit by its index? Is this a constraint you are forced to deal with? Or are you able to change it so that the client can access the array element by a unique identifier? clearly implied that azium did not know what an array in JS was, which turned out to be a misunderstanding. But if I had not clearly told him how I thought about his answer, he may not have gotten my point and pointed me to Map / Set which in the end is what I was actually looking for. So, yes I may be a bit rude, but it's for the sake of making things as clear as possible. Programming is very prone to misunderstanding, especially when communicated via text on the Internet. PS: I still don't think an object or a "unique identifier" is a useful solution when performance is an issue, since it boils down to a complexity of O(N) which is just terrible for access (compared to O(1) in arrays).
its like english or any spoken written language really the reason we use punctuation is to give greater clarity to our intent while leaving it out makes things complicated and kinda broken even if you can sorta get the gist of what was meant to be conveyed its more understandable with correct punctuation
&gt; Minify your code and report back... Guy that doesn't use semi-colons here. I don't get how this is upvoted. Which minifier are you using which breaks without semi-colons? All the major ones should work fine (closure compiler certainly does which is my favorite). If your minifier breaks when semi-colons are missing then it doesn't fully parse JavaScript. If it doesn't fully parse JavaScript then I wouldn't trust it to alter my code.
`npm install babel-plugin-transform-es2015-modules-commonjs --save`
there is no significant advantage for not using semicolons only significant disadvantages. Since majority of the coders are familiar with semicolons statement ending, why create new issues (or high probability of something that could go wrong?) while there is none to begin with? 
The upside is that you'd be doing what all the cool kids are doing
There's a fork called semi-standard which is exactly that, but honestly just use the airbnb eslint preset and call it a day in my opinion. 
Things that pass tests can still have ambiguity, unit tests tend to ignore side effects. You're making a *lot* of assumptions just to get to that point - that the ambiguity is non-problematic, that the tests were written correctly, etc. it's always better to be safe than sorry, and not using semis is negligent at best.
Not a real world example. You don't/should not start your statements with [, { or ( very often. When that happens, the quirky part is that statement beginning by [, {, ( and *not* what the previous line does or does not.
Saving keystrokes is the reason people gave me for using HAML. Just like those who think semicolons are optional, they are wrong.
Do people do not use semicolons?
 $ npm install jshint $ jshint Just do what it says to do. That's usually a good start.
So is any perceived "gain" from not using them in the first place.
I can't think of any cases where a linter will miss a needed semicolon. Even typescript is intelligently semicolon-agnostic and will tell you when you need one.
Semicolons let my code pass JSLint/JSHint tests. So yes.
I did read the issue, and I understand their reasoning. I was just hoping there was some opt-in flag somewhere, as the previous behavior was way more convenient when moving from an ES5 commonjs structure to ES6 modules.
Not using a linter is your bigger problem IMO.
You sure you're not talking about JSLint? The whole point of JSHint was to allow configuration so that people could lint their code with their own style preferences.
Might work: find "./src" -name "*.js" -exec sed -i '' "s/require/require default/g" {} \; However, I would bite the bullet and move to es6. You might look for some scripts/regexes that would change the imports (or at least change as many as possible automatically), or try doing it by hand. If you can change all of the imports/exports to es6 in one branch/pull request, and no other code, it could easily pass inspection. I agree that incremental changes are the smoothest, but occasionally the Big Leap is the best answer. 
Only on reddit would not using semi-colons be a topic. How brain dead must one be to not use them? In programming, handling every potential error is taught with rigor, yet, here are people saying to ignore semi-colons and let some other software handle that... you hope.
If you have to rely on hope that other people's software will handle this case then you're doing it wrong.
Yeah, I'd love to, but there are features to deliver, versions to ship! Some day in the near future I'll probably do the big leap, but it looks like for now I'll just have to stick to the older version of babel, sadly.
I'm guessing most people here downvoted you after reading just the first sentence.
&gt; it's relative: it maybe true if you're used to C++ or PHP relative my ass, uh... tell me that there are more semicolons-less javascript on the internet than semicolons ended javascript... Also, C/C++, C#, Java, PHP all of them are semicolons ended.... you're saying all these languages combined are still less popular than Python and CoffeeScript?
Yeah, we're using babel but Object.observe getting turfed threw me off a bit... good to know it's there though and I'll probably use it anyway as it's a quick change back to what I have above if it ever gets dropped. Cheers!
No, any minifier capable of parsing JavaScript will work correctly with optional semicolons. Edit: &gt; Your minifier will get things right most of the time, but there's a chance it won't. If the minifier parsed JS wrong, then it's a bug.
Not all semicolons are optional in JavaScrupt. Forget certain ones and strange things happen. http://stackoverflow.com/a/8108912
Needs "yes, unless I'm contributing a project where they don't". I would hope that almost all of the yeses would actually be this.
I've personally always liked underscore_case for most things, like C and Python. Except TitleCase for classes in the latter case.
not sure about keystrokes but i agree with the improved readability
I agree it's best to use semicolons but still, if your unit tests don't fail when you remove a semicolon at a place where the meaning then becomes different, there's probably something wrong with the unit tests themselves. E.g.: var a = c; [a, 1].map(function); If your unit tests don't fail when you remove the semicolons in that example, the tests are broken. And it's probably the same conclusion for every other conceivable scenario.
Hi, I am the [printThis](https://github.com/jasonday/printThis) author. From the repo: &gt; Please read: &gt;I ask all users reporting bugs to: &gt; * create a jsfiddle (http://www.jsfiddle.net) or give an example url &gt; * set the option "debug: true" and inspect the iframe created by printThis and report on what is contained in the iframe &gt;I am unable to debug with limited information and need each user to actively participate in the debugging process. Additionally, I have alerts set up on stackoverflow.com for questions relating to printThis. Either way, asking questions relating to issues with a jQuery plugin is a two way street. You need to provide enough information and context so that the author &amp; community can help you debug. 
&gt; Which minifier are you using which breaks without semi-colons? All the major ones should work fine. Yeah OP is confused or something. You're not going to get an answer. There's no such minifier. Just a lot of confused people on this.
https://en.wikipedia.org/wiki/Parkinson%27s_law_of_triviality
Upvotes are too often placed with simplistic measures of rightness; as are semicolons. 
In this case, "ASI Style" still requires a semi-colon preceding the open bracket. Linters like `standard` warn against this, and in this style it becomes plainly obvious when writing code where your semi-colons are needed.
&gt; not sure about keystrokes you're not sure that it helps you that you don't have to type them or not sure of it saves keystrokes? Because it does save keystrokes without any doubt
Premium content is fine, just want to give a head's up to others that you have to pay to do this video course.
My main problem with JSLint is it forces you to use spaces instead of tabs which i find infuriating to work with.
Semi-colons should be used, ***always***. Why? Because using them is stupidly simple and prevents mistakes. Why on earth would you use a practice that can easily introduce errors?
My main issue with not using semi-colons is based around the fact that without them it's possible for the operation of one existing line of code to be altered by adding a new line of code. That's absurd, and it's so stupidly simple to prevent by just using semi-colons.
This is, to be frank, horrible logic. You very rarely get into a car accident so you shouldn't wear a seat belt. And Typescript, uggghhhh... (but that's just my opinion) Granted, code errors aren't as serious :D But depending on your code base it's significantly more often than "very rarely", and expecting all devs on a team to memorize and understand *exactly* when semi-colons are needed and when they're not is just ridiculous. Require them always and be done with it all.
He might be referring to the Hacker News thread/Github PR hullaballoo on the Bootstrap repo where Douglas Crockford got all huffy and said he wasn't fixing JSMin to account for some guy's "insanely stupid code". https://news.ycombinator.com/item?id=3842713 That was years ago though. JSMin got fixed eventually and this argument is no longer relevant.
&gt; If your minifier doesn't work with semi-colons missing then don't use it. Again to my point. You are relying on an outside program to adjust to your code. A dangerous proposition. &gt;I find the the 'this is what happens when a semi-colon is missing' bugs extremely rare But they exist and you are relying on their non-existance. A dangerous proposition. &gt;Some people argue it's useful for readability. We already have good mechanisms for showing the relationship of code through correct indentation and formatting of code. What happens when I don't use that same mechanism? I presume you mean some IDE or editor. &gt;one place you get a bug is And then you give an example of a problem caused by lack of semi-colons. &gt;these days I use TypeScript for most of my work. Yes, you are cheating. You can't use TypeScript as an example for JavaScript. &gt;If you do get a missing semi-colon related bug then it becomes a type error and I'm told immediately in Visual Studio as I'm writing the code. And now another example of why you should use semicolons. 
Would this work: http://stackoverflow.com/a/1266154?
How is an absence of semicolons more readable?
My employer blocks Google docs. (Idiots think it's less secure than the shit our IT department comes up with.) Yes, semicolons. Use them.
If you want to create an array based on a transformation of each value of your object, then you can do the following: Object.keys(myObj).map(key =&gt; transform(myObj[key])) For instance, if `myObj = { a: 1, b: 2 }` and `transform = x =&gt; x*2`, the above code will produce the array `[ 2, 4 ]`. If you are looking for a way to retain the structure of your object, I've been using this pattern: Object.keys(myObj).reduce((newObj, key) =&gt; { newObj[key] = transform(myObj[key]); return newObj; }, {}); Using the same object and transform function, the above code will produce the object `{ a: 2, b: 4 }`. If efficiency is a major concern, you should use the more procedural `for-in` loop. You can easily wrap that in a function to provide a more functional interface (similar to lodash): // map values to an array function map(myObj, transform) { let arr = []; for (let key in myObj) { arr.push(transform(myObj[key])); } return arr; } // Retain object structure function mapValues(myObj, transform) { let newObj = {}; for (let key in myObj) { newObj[key] = transform(myObj[key]); } return newObj; } You can use them as such: let arr = map(myObj, x =&gt; x*2); let newObj = mapValues(myObj, x =&gt; x*2); Hope this helps.
As /u/oofki mentioned, you can do this with lodash/underscore: _.values({ foo: 'bar' }). map(val =&gt; val.toUpperCase()); // ['FOO'] // or just _.map({ foo: 'bar' }, val =&gt; val.toUpperCase()); // ['FOO'] You could also do: Object.keys(obj). // map keys to values map(key =&gt; obj[key]). map(value =&gt; {/* whatever */}); // Or if you want to avoid the extra iteration // (but V8 is fast, so unless you're dealing with huge dataset, you don't care) Object.keys(obj). map(key =&gt; { var value = obj[key]; /* whatever */ }); // You could also make your own utility function values(obj) { return Object.keys(obj).map(key =&gt; obj[key]); } 
http://sideeffect.kr/popularconvention/#javascript have you seen this?
Tons of the top npm packages don't use semi-colons, are they broken? Understand your code, and JavaScript and semi-colons or not, your code will work how it is intended. 
Always use, and lint to enforce.
I am not sure what you are getting at with the outside program being a bad thing. Are you saying that relying on using a minifier to adjust my code is a bad thing? They are very common and a standard part of web development.
Again, you're making a big pile of assumptions as I outlined above, meanwhile it's far safer just to use semicolons and not have those assumptions tested in production. I really don't understand why anyone is arguing *for* removing them. It's like driving without a seatbelt. Sure, your airbag will probably save you, but why would you want to test that hypothesis? 
This is literally the dumbest excuse to use semicolons I've ever seen. A good developer won't complain when they see semicolons or not, they adjust their workflow to use or not use them, that's it. My personal projects I use standardjs.com which means no semicolons. But If a project I contribute to uses semicolons, guess what? I use them. The debate is dumb, whether you use semicolons or not, the biggest thing is understand what JavaScript is doing.
&gt; If you aren't using them... Minify your code and report back... A good minifier solves this problem.
Hey I'm trying out flow and was curious how people are using custom types. Do you guys define your own classes and use them in type annotations? Or do you rely on Flow's type alias for that kind of thing?
I bet you use notepad.exe too, because your fancy editors and IDE's are for the birds! 
This has to do with how the value of `this` is defined in javascript. If you search google for "javascript this", you can probably find a ton of great articles. For me, the easiest way for me to understand `this` is that `this` is always equal to the object which is calling the function. var objA = { fruit: 'apple' }; var objB = { fruit: 'banana' }; function logMyFruit() { console.log(this.fruit); } objA.logMyFruit = logMyFruit; objB.logMyFruit = logMyFruit; objA.logMyFruit(); // 'apple' objB.logMyFruit(); // 'banana' So in this example, the value of `this` in the `logMyFruit()` function resolves to either `objA` or `objB`, depending on which one is calling `logMyFruit()`. If there is no object calling the method, javascript defaults to the global scope (`window`, in the browser) // so this... logMyFruit(); // undefined // ...is the same as this window.logMyFruit(); // undefined // which logs undefined, because window.fruit is undefined // You can verify this like so window.fruit = 'purple'; window.logMyFruit(); // 'purple' logMyFruit(); // 'purple' There are a couple of ways in javascript that you can manually specify the value of `this` in a function: // Use `call` or `apply` to invoke the function in a given context logMyFruit.call(objA); // 'apple' logMyFruit.apply({ fruit: 'orange' }); // 'orange' // Create a copy of logMyFruit, which will // always be called in the given context var logMyApple = logMyFruit.bind(objA); var logMyWatermelon = logMyFruit.bind({ fruit: 'watermelon' }); logMyApple(); // 'apple' logMyWatermelon(); // 'watermelon' 
&gt; Semi-colons should be used, always. [Tell that to all these people.](https://gist.github.com/feross/e0882df2fe673d6ce064#file-2-standard-dependents-by-popularity-txt)
You can use [MarkerCluster](https://github.com/Leaflet/Leaflet.markercluster) or a non-Leaflet clustering equivelent if you are willing to cluster your points at higher zoom levels. It'll make things a lot quicker while still getting your point across. If you are willing to do this, I think it's the way to go. You could also use [TileMill](https://www.mapbox.com/tilemill/) to generate tiles, basically embedding your point data into a PNG overlay layer, so you're just loading a bunch of images rather than thousands of points. This will be really quick and all of your points will be on the map, but you'd lose interactivity on the points. You can style points according to your variable though and have a good legend. Your data looks like a good candiddate for [UTFGrid](https://www.mapbox.com/guides/an-open-platform/#utfgrid) if you really need to keep interactivity.
I could do a click every one second with `setInterval(function() {element.click()}, 1000);` But I don't know how I'd make it click where ever your cursor is... maybe someone else can help with that... *see below: var x, y; onmousemove = function(e) { x = e.clientX; y = e.clientY; } setInterval(function() { document.elementFromPoint(x, y).click(); }, 1000); Thanks, /u/jodraws!
Déjà vu
I use them all the time simply because it doesn't make think of the way javascript gets parsed. Just put a semicolon automatically and that's it. There's a good [write up](http://benalman.com/news/2013/01/advice-javascript-semicolon-haters/) about the subject.
https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint
 use encodeURIComponent, since encodeURI will try to detect some components of your URI (such as "http://" or "#" and overlook them). Source : http://stackoverflow.com/questions/75980/best-practice-escape-or-encodeuri-encodeuricomponent?answertab=votes#tab-top 
That's like 0.27% of all NPM modules. I think perhaps "all these people" is a bit of an overstatement.
&gt; Are you saying that relying on using a minifier to adjust my code is a bad thing? &gt;You are relying on an outside program to adjust **to** your code.
`map` is used for `array -&gt; array`, it's used to map the value of a position in an array to a new value in the same position in a new array. `reduce` can be used for `array -&gt; *`, it's used to reduce an array into another type of object/string. You can even write a `map` function with `reduce`. In fact you can write `filter` with `reduce` too, not that you'd actually want to. Map with reduce: const map = (arr, callback) =&gt; arr.reduce((output, item) =&gt; { output.push(callback(item)); return output; }, []) Filter with reduce: const filter = (arr, predicate) =&gt; arr.reduce((output, item) =&gt; { if (predicate(item)) output.push(item); return output; }, []);
My guess that you have completely missed the idea that JavaScript is single threaded -- meaning that, in a loop, nothing else happens. Users can't enter commands, they can't interact with the browser or anything else. It freezes. There are a few ways to handle them, all of them involve `async` code. You could use `setTimeout` to look and see if players are ready then you could call a callback, perhaps called `nextTurn`. Writing the same thing in Promise-based coding will be cleaner in the long run.
&gt; You are relying on an outside program to adjust to your code. Compilers, module bundlers and minifiers are all accepted and essential tools to development. All of them are modifying your code. &gt; What happens when I don't use that same mechanism? I presume you mean some IDE or editor. Or a linter, which are an essential tool, too.
Damn, I was really looking forward to it.
Thanks /u/forscale and /u/jodraws but if I've to be honest i can't really code. I be willing to pay 1 dollar for a script that works and fulfills my requirements, I do not know if that is much or matters. Coded in tampermonkey, or chrome console would be nice. Also finding a chrome extension that will work for my purpose with success, will also mean I will pay. 
In this language scope and inheritance are not similar. The `this` keyword is not a declared reference bound to the scope model. &gt; The nested Next() function is obviously not in scope (rather context? Im guessing). Not possible. In this language you are always in either a local scope or the global scope. I wrote a tool to help understand scope in this language using colors. Paste your code into here: http://prettydiff.com/?m=beautify&amp;jsscope
Hehe one dollar is cute yet insulting. You'd probably have better luck asking for it for free. The going rate of a JavaScript developer is $50+ an hour. It would probably take 10-30min to write/test the code properly.
Hmmm… maybe change indentation to just 1 space if that's how you roll? 
Ah I see, I didn't see the 'to'. In my opinion a minifier should be able to fully parse JavaScript. I don't see how you could ever trust a minifier that didn't. So I don't see how it's having to adjust to my code. How could I trust the output of a minifier which didn't fully parse JavaScript? It's also a non-issue because all the good and popular minifiers do fully parse JavaScript correctly.
But it's not guessing. There are rules in place.
This is a good thing!
Sure, I'm just saying that using the number of adopters as an argument for adopting ```standard``` kind of requires that number to be considerable in some way. The page you linked to also contains the top 100 dev dependencies, of which ```standard``` is the least standard linter in the list: - 12. jshint - 28. eslint - 43. jscs - 73. standard I'm not saying that being the 73rd dev dependency is not an achievement or anything but considering that the poll in this topic is at like 88% *for* semicolons, the number of people in support of semicolons vastly outnumber those who do not. Number of adopters is not really a valid argument yet.
&gt; Do you want your code to crash because of someone else's bug? Skipping semi-colons doesn't make the minifier more buggy. Either it works correctly or it doesn't.
I wish I'd seen this post earlier. I've been saying some fairly similar things for a while. Elliot is a zealous self-promoter and uses this subreddit for the more-or-less exclusive purpose of publicizing his own content. He has presented himself as representing a consensus that he doesn't really own, and presents some rather opinionated articles as the aggregation of 'best practices' when they're really just that - opinions. Some of the things Eric Elliot writes are good. Some of them are less so. But what I object to is the way he misleads his readers into thinking his peculiar approach is an industry standard, and the way he poses old inventions as his own (his 'functional composition' is really just a buzzword-friendly decorator pattern). I don't hate Eric Elliot. I just want him to stop talking about himself.
OP here. So I'm a programmer as a hobby and I love to invent from scratch. I've never seen the actual code behind Game of Life but I decided to take my best guess at it. I'm just wondering if there is a better way. I plan to duplicate these results in C# sometime soon and I want to know I'm on the right track. 
Thank you =) Other than that, am I doing it right? Is my code sensible? Also I'm wondering, if I wanted another .js file with the same namespace (util) how would I define it so it works in multiple files without overwriting itself?
Why does your tool say new is unnecessary on new Util.ZipFile?
Looks like the majority of GitHub users are somewhat sane with their conventions. The *only* listed category in which I'm not with the majority is single vs. double quotes. That doesn't dislodge me from my high horse though, because eslint's [*quotes* rule](http://eslint.org/docs/rules/quotes.html) defaults to "double" :) As for semicolons, I use them because: - Someone will most likely be touching my code later. It's in my and their best interest to have the same coding conventions, which is closely related to: - I use ESLint. So should you. - I sometimes copy&amp;paste bits of code from the Internet/older projects/other's projects. Omitting semicolons would lead to a lot of maintenance or inconsistencies. - Semicolons are not *really* optional, even if omitting them rarely causes errors. - I can do better search&amp;replace operations. And this: kumquats() bananas.kiwis() .apples() pine.apples() Did I just make a typo? The intent is not clear and there might or might not be an error if it really was a typo. kumquats(); bananas.kiwis() .apples(); pine.apples(); Now there's no room for interpretation, because I'm using semicolons consistently throughout the source. Of course, proper indentation would help in this scenario too. 
You can freeze a loop and obtain user input with `prompt()`. for (var i = 1; i &lt; 11; i++) { var user = "!ready"; if (i === 6) { user = prompt("Are you !ready?"); } if (user === "!ready") { document.body.innerHTML += "&lt;h3&gt;" + i + "&lt;/h3&gt;"; } else { break; } }
Thank you for the quick primer, explains why I see bind so much in jscript libraries :P I must say it's taking some time wrapping my head around some of the js squirks coming from C++/C#.
Lets say you leave out semi-colons. The minifier should parse your code *the same way* that the browser does. If it generates a different AST then the minifier is just wrong and buggy. The browser doesn't add semi-colons randomly. There is a defined system in place. So the minifier should also get it right. If it can't then I wouldn't trust the code it produces. But most of all; all of the popular minifiers are fine. People are making up issues with minifiers in this thread which don't exist. Maybe if you are making your own minifier it will but you should use an off the shelf one anyway (or an off the shelf JS parser for your minifier).
Thanks, looks like I'll have to read up some more on javascript.
[*Real* programmers](https://xkcd.com/378/) lint in their heads.
Because it causes confusion for people new to the language. If you were not using `new` and `this` (OOP inheritance) your application would simply work exactly as you intend and it would be easier for everybody to read. I make an exception for these references: * ActiveXObject * ArrayBuffer * AudioContext * Canvas * CustomAnimation * DOMParser * DataView * Date * Error * EvalError * FadeAnimation * FileReader * Flash * Float32Array * Float64Array * FormField * Frame * Generator * HotKey * Image * Iterator * Intl * Int16Array * Int32Array * Int8Array * InternalError * Loader * Map * MenuItem * MoveAnimation * Notification * ParallelArray * Point * Promise * Proxy * RangeError * Rectangle * ReferenceError * Reflect * RegExp * ResizeAnimation * RotateAnimation * Set * SQLite * ScrollBar * Set * Shadow * StopIteration * Symbol * SyntaxError * Text * TextArea * Timer * TypeError * URL * Uint16Array * Uint32Array * Uint8Array * Uint8ClampedArray * URIError * WeakMap * WeakSet * Web * Window * XMLHttpRequest 
Thoughts? http://codepen.io/anon/pen/RWYrep
Pretty cool. How are you doing the drag and drop? Are you using the pure HTML5 apis or a library like React D&amp;D?
This could help: https://vimeo.com/105955605 (Mary live-codes a JavaScript game from scratch – Mary Rose Cook at Front-Trends 2014)
As far as I know the US Military has been using CAC for over a decade and is the only US entity using this technology until recent banking failures in the past 18 months. Sad, considering Europe has been using this technology for a long time. Although the cards are far more expensive to produce there is a substantial reduction in liability (at all ends) and so the banks actually end up saving money. When I use my CAC in all the DOD systems some kind of helper software has to be used to accept the pin number and authenticate against the certificate. Here is what I know and don't know: * Physical specification of CAC is standard * There is no standard certification/encryption format for CAC, but the certificates on my CAC do conform to open standards * Based upon the prior point there is no standard means to authenticate pin to PKI certificate validation, because at the very least you would need to know the encryption type and would likely need to know some protocol/validation scheme to negotiate the PKI sequence. * There is not likely a JavaScript API for this. DTS uses some old Java application and most of the other stuff I use uses an installed desktop application The cool things about a CAC is that your log in for both software and hardware is a physical portable token which eliminates the need for passwords. It can also serve as an informal kind of SSO provided the session acknowledgement (pin validation) is temporarily stored on the card.
Maybe this guy likes Flux so much he doesn't want any other way of handling app state to bother him.
Here: https://chrome.google.com/webstore/detail/custom-javascript-for-web/poakhlngfciodnhlhhgnaaelnpjljija Same code I gave you before; just copy and paste it in the custom javacript extension. I'll take reddit gold!
Okay.
- 12. jshint / 1,882,082 downloads - 28. eslint / 1,040,936 downloads - 43. jscs / 617,666 downloads - 73. standard / 127,319 downloads ```standard``` = 3.47% Better than 0.27% though. I know there might be some overlap but I still don't see how the number of adopters should in any way be in favor of ```standard``` (yet). I'd love to see something like this for no-semicolons though: https://www.reddit.com/r/javascript/comments/3rgama/made_a_survey_to_determine_how_many_of_us_use/cwo7rzl
I felt really nervous about leaving out semicolons for a long time, and I thought the people who did it were just being dumb cool kids, potentially causing problems in order to make their code 3% prettier. But I stopped using them about a year and a half ago and I love it. In practice it causes no problems, and I/my team simply don't run into any of the goofy corner cases people use to show that it's a bad idea.
I can't use prompt, because input is through a different stream. 
If ZipFile is a function it can be referenced as many times as you wish without needing any kind of poly-instantiation. JavaScript does not have a concept of explicit public/private. Everything is either public or private due to where a reference is declared compared to where that reference is called. Reference resolution occurs across something called the *scope chain*. If the reference cannot be found in the scope chain it is `undefined`, which in a manner of speaking is privacy. Here is an example: var x = "global", a = function () { var y = "in the scope of `a`", b = function () { var z = "in the scope of `b`"; console.log("y - " + y); //no problem. y is in the scope chain of `b` console.log("x - " + x); //no problem. X is global and is available universally }; console.log(z); //uh oh. z is declared in the scope of `b`, which is not available to `a` };
lol I'm upvoting this because he brought up the point that I think is foremost on everyone's mind: Black people don't use Github. Wait, how do you inflect sarcasm on Reddit?!
Because I cannot imagine a bunch of object watchers increasing execution performance.
Yeah it feels more natural to just rely on built in language constructs like classes instead of a "type alias" that is specific to Flow. Thanks for the info.
Yeah, down with punctuation in books I say! Dwn wth thr slss stff
&gt; But will each ZipFile reference have unique property values? No. Tell me why you want that and I can advise an alternate approach. &gt; And will methods of ZipFile get the right value If you pass the value into the method as a function argument then the value will always be exactly what you specify at each reference. Example: ZipFile.myMethod("myvalue");
You can have them in the component without having inline styles. EDIT: tried to find the tool, but couldn't find it. I know I saw it somewhere. There is a tool that pulls out the CSS into external files and pacomo's everything. 
Simply trying to wrap zip.js into a self-contained object. I have a list of image URLs I feed into zip.js which it downloads (via ajax I think) and zip. The problem is I have multiple list of images (unknown number of lists can be anything from 1 list to 100 lists) and if I just feed all those into zip.js it puts all of them into the same zip file. So my plan was to create ZipFile as a sort of wrapper object for each zip, so I set the zipname and imagefiles into it and that then calls zip.js calls to download and create the zip, so it's selfcontained. So I have say imageChapters which is an array of imageList ({ name: filename, url: http://www.imgurl.com/imgxxx.jpg }) and if I just create one Zip Object of zip.js and use the addfile method of it it treats it all as one big zip file. Hence why I wanted to make a ZipFile "class" to wrap zip.js with it's own instantiation/instance of zip.js writer.
I don't know why you are being downvoted. A VM ( or any program really ) literally *is* a set of rules. There is no guessing involved. 
It just depends whether you need that last increment of performance over all of the other benefits to RethinkDB
I recognize why you want to use sarcasm there. GitHub's [annual developer survey](http://stackoverflow.com/research/developer-survey-2015#profile) didn't ask users to report race or ethnicity, but it does confirm my assertion that GitHub users are younger men. The results from the GitHub survey generally match the results of a [2013 Census Bureau](https://www.census.gov/prod/2013pubs/acs-24.pdf)(pdf) report, which puts white non-hispanic at 70% of the STEM workforce. (I recognize that GitHub usage is worldwide; this is meant as a general trends and not an exact statistics.) I don't think it's inappropriate to extrapolate. The ability to participate in open source projects is a luxury and a privilege. I explain in another comment why I prefer to not use GitHub to make hiring decisions.
The biggest difference is probably that Gitboard is a **standalone-app** that runs **entirely inside your browser**, i.e. there is no third-party server between you and Github. So if you wanted you could download the Gitboard files and open them from your hard disk to access the tool. Waffle (and Huboard) work by accessing your Github account via their REST API (using an OAuth token) and store your issue data on their servers before they show it to you via their web service. Gitboard, on the other hand, communicates directly with Github without any third party in between, which is **more secure** and was one of my main motivations when building it. Other solutions unfortunately require you to give them read/write access to your source code repositories just to manage your issues, which is not ideal (they are not to blame though since the Github permissions model is not very flexible). Please note: Some users were concerned that Gitboard asks them to enter their Github username and password (which is required to generate an access token), which is why I added the option to log in using an access token as well. Again, the communication here is directly between your browser and Github, so your password and username do not get disclosed to any other party and are not stored anywhere after the access token has been generated. I'm thinking about adding a "Login via Github" button, but in my opinion this would only degrade security at the expense of (a little) convenience.
There are a bunch of different ways to go about this. You will need some multidimensional data structure of some kind. Personally I would just use a multidimensional array, because its the most software friendly approach but its certainly not the most human friendly way to go about this. Plan out how you want to organize your data first. This will determine how your application works.
Sure feel free, it's licensed under AGPL so if you have any improvements please make a pull request, will be happy to merge it in: https://github.com/adewes/gitboard
&gt; I still dismiss your claim that young white males are directly the blame for the lack of women in STEM fields. Ah, that's an issue. I never made that claim. I claimed that, as an interviewer, I prefer to limit my hiring decisions based purely on the level playing field I can present in the interview session. I do this because it is one thing that I can do individually to encourage diversity in this field, which I find valuable because of the economic benefits diversity brings.
I feel your pain, I just converted around 300k lines across 761 files to es2015 module syntax by hand. In my case, many times the files didn't have an iife style module, let alone cjs. At least 90% had a consistent namespace on window...
So &gt; var one = 1; reads as "var one equals one semicolon"?
Yes, you can only refer to the named class `h` inside that class, so that means the variable `h` isn't defined. Meaning that `typeof h` **is** undefined.
&gt; whole privilege aspect Or, you know, people with hobbies outside of coding. 
Look's like Tape! If CircleCI has an option for it I might start using it.
That too! There's a whole slew of reasons why you shouldn't base someone's merit as a developer based on OSS contributions. In the end, there's way too many variables to do that.
ES6 is strict always, isn't it?
He suggested using array indices, but you could also use object references.
I'll have to read the spec more closely, but I'm inclined to think the first question reveals a bug in babel. Consider, if we give babel: // source function returnX(x, f) { var x; return x; } Then babel gives us the same thing back, and everything works as expected. // babel out function returnX(x, f) { var x; return x; } The `var x` is redundant but otherwise harmless. But if the parameter `f` is defaulted to a function that returns `x`? // source function returnX(x, f = function () { return x }) { var x; return x; } Then suddenly the `var x` isn't harmless anymore in the following babel output: // babel out function returnX(x) { var f = arguments.length &lt;= 1 || arguments[1] === undefined ? function () { return x; } : arguments[1]; return (function () { var x; return x; })(); } EDIT: Confirmed different behavior in Firefox than in babel. I can run the following code in Firefox and get back 42. function returnX(x, f = function () { return x }) { var x; return x; } returnX(42); But the same code through babel will produce undefined. EDIT2: Submitted an issue to babel. https://github.com/babel/babel/issues/2828 EDIT3: It was a legit issue, but it was already reported a month ago and a fix committed. ¯\\\_(ツ)_/¯
I agree, when you're using a language with significant whitespace where indentation is enforced by the compiler/interpreter.
That rules set is the guessing due to mistakes you can make in code. 
I assume this is for something like Clicker Heroes, which uses Flash, so there's not really anything you can do in JavaScript. If your target isn't using Flash, however (right click on the game and see whether you get a Flash context menu (Play/Loop/Zoom/About Flash/etc iirc) or the regular browser context menu (Back/Reload/Inspect Element/etc)), ForScale's answer might work. Press F12 on the target page and paste his/her code into the JS console to use it.
It already uses your last mouse position to determine where to simulate a click &gt;when enabled it clicks where my mouse-curser were last placed (or clicked - does not matter) To change it to use your last **clicked** position, change `onmousemove` to `onmousedown`. Modifying that Steam game script is insane overkill. Its functionality *is* what ForScale wrote with extras pertaining specifically to that game. Remove the game-specific stuff and you're basically left with ForScale's code. Note that the Steam game is a JS app so JS can interact with it seamlessly, whereas most clicker games are Flash, over which JS has very little control. It's also possible your game does use JS but needs a more detailed event than a click (such as event coords for a canvas mousedown event). We can't do anything in that case without knowing and researching the target.

Manually writing object watching code is much worse. 
This sucks. What I really want is a consistent way to watch objects and Dom elements for changes. Never understood why we needed two separate interfaces. 
No version of Angular makes use of O.o
Look here for the cookies/session vs jwt analysis https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/ 
The problem manifests when two independently-minified files are concatenated together. If the first file does not have a trailing semicolon, and the second file does not have a leading newline, the two files can produce something that in the best case isn't syntactically valid JavaScript, and in the worst case runs but doesn't do what you expect. In the name of saving a byte per file a bunch of tools and libraries get problem reports. If you have never seen this, you should thank all the people providing your tools who have managed to shield you from it! https://github.com/madskristensen/BundlerMinifier/issues/50 https://github.com/components/zepto/pull/3 https://github.com/substack/node-browserify/issues/1351 https://github.com/PrismJS/prism/issues/273 
Yes it is. O.o really is a hack. It's not solving any new problems, just making JS more forgiving towards bad application architecture. Also as /u/achen2345 pointed out, it's a shortcut that would undoubtedly slow down performance.
So.. Four separate interfaces? Proxies are much harder to shim. 
Even taking out proxies, you still have options. Sure, MutationObserver is only supported IE11+, but defineProperty can be used in place of Object.observe in almost all cases.
No reason to use the IIFE in ES6 code. Bundlers should take care of that for you if you want to bundle. Also note that ES6 modules are strict mode by default so your directive prologue is doing nothing.
Alright I just went ahead and rewrote it for shits and giggles. The CSS has not been changed. The most important thing I did was separate the *logic* of The World from the *user interface* (a.k.a. the view) of The World. They are in different files: world.js and world-view.js. In world.js I do NOT use jQuery to interact with the DOM in any way. I only interact with the DOM in world-view.js. The World holds no references to The World View. It is not aware of any user interface. The World triggers an event when something changes. The World View then responds to this event by re-rendering. I added a button to the HTML that causes The World to update, so you can see how The World View re-renders via event handling. The World contains the logic for finding neighboring cells, in the getNeighbors function. No other part of the code contains this logic. This logic is NOT in the cells themselves, and cells do not have references to other cells. The World View calls The World's getNeighbors function in order to highlight the correct DOM elements. Note that all the functions are small and simple -- only a few lines long. Even the event handlers. In the event handlers I do NOT do any greps or looping in order to find the correct cell. I have getCell functions that do a simple array lookup, which is much faster (constant time) for a very large grid. Of course there are other ways of avoiding greps and looping. I'm pasting here because like I said I don't want to post on codepen or github. Unless someone knows about anonymous codepens.
Not harder, impossible. At least when not using a preprocessor. And yes, four separate interfaces for four separate things.
No no. No. What do you think is happening here, that the interpreter first runs around your code splicing in characters before passing it to the interpreter proper? No, what's happening is that the interpreter, upon seeing a character that cannot be a continuation of the current statement, terminates the current statement before processing the character. There's no extra step and no performance penalty. All of that's no argument for omitting semicolons, I'm just trying to keep from doing the right thing for the wrong reasons.
I think CoffeeScript is just JavaScript with a different syntax. Check it out and see if you like it. Your question piqued my interest in checking out CoffeeScript. And after a brief search, I stumbled upon this article that pretty well summarizes the syntactical differences: http://www.maori.geek.nz/why_should_you_use_coffeescript_instead_of_javascript/
I thought you could fork pens, rewrite, save and share the link without signing up. Oh... didn't know about the zip exports... neat!
Cool stuff as always sindresorhus. I remember wanting parallel tests and starting to write m2, don't know why I ever stopped... Is there an interface for this to be used as a drop in for mocha?
Noticing the same thing here, trying to run the code from the quiz through babel and getting different results.
You probably can. I'm a codepen newb, which I guess my lack of account makes pretty obvious
Start calling it a "leaf" and see if he cares.
Chrome has an older version of proxies so the shim works pretty well 
nice
The function length is useful sometimes. For instance Express allows you to [define error handling middleware](http://expressjs.com/guide/error-handling.html) by passing a function that takes four arguments instead of three.
ESLint is both updated regularly and popular. It also has a decent Sublime plugin under Sublime Linter.
ECMAScript is the **specification** of a prototype language. JavaScript is one **implementation** of that specification.
This would annoy me.
Truthfully, I led my team to try essentially this 10 years ago (yes, really!) They weren't "micro-libraries" per se, but we took a "best of breed" approach. So, if dHTMLx had the best menu bar, we used it. If ExtJS had the best grid, we mixed that in. jQuery best for generic DOM work? Throw it in there! Dojo's charting the best? Yep, add it in. Yes, we had all of it working together with no real problems because we were real careful about it and always thought about clean architecture first. It worked, and the business loved the result. But, over time, it became more and more of a hassle. Dealing with all the different disparate communities when we needed help was a pain. Dealing with integration issues when we did updates was sometimes a headache. Just mentally switching between the different paradigms each presented was a bitch. Dealing with different contracts and licensing and whatnot was a pain. Basically, it turned out to not be worth it. We went all ExtJS (because it was and I believe still is the most robust of all the major frameworks) and it's been the best decision. I would NOT want to go back to all that mixing ad matching for all the tea in China. There's just too much headache when you have a large, complex code base. 
Just ask him why he calls it that instead of the name given to it by ecma standards. Maybe ask why would we invent new names for things that already have names? If that fails...maybe make jokes with him by renaming common things to other things ;-) But if he doesn't stop...Yea just ignore it and move on.
Yes you're being too picky. Get on with doing something useful.
Hi /r/javascript! Toc is a project I've been working on for more than a year now. I'd love to hear what you guys think about it. =) Toc is a proof-of-concept distributed messaging app designed from the ground up to support user data synchronization for use across multiple devices. It uses Telehash for its messaging stack, and is built on top of an Om-inspired architecture oriented around a central app state tree that gets encrypted using a custom encryption layer for persistence locally, and then synchronized seamlessly between devices using remoteStorage. Originally, Toc started as our group's fourth year Computer Engineering design project at the University of Waterloo. After we graduated in May, I wanted to polish it up a bit before releasing, but evidently went a bit overboard and ended up working on it for another six months (albeit with a healthy dose of procrastination sprinkled throughout that period). Toc is only a proof-of-concept, and has a list of awful issues that makes it rather unsuitable for long term general use. However, I'm hoping that by releasing Toc, we can bring more attention to the awesome technologies for building great decentralized applications that Toc uses, and inspire more developers to take another serious look at building distributed apps, as I hope we have demonstrated with Toc that a decentralized app can in fact have great UX if you design your apps with UX in mind from the start. With that said, I am now officially looking for work. If you have any openings for a ClojureScript frontend project, or a React project that makes heavy use of functional techniques and immutable data, I'd love to hear about it. You can reach me through the email on my [GitHub profile](https://github.com/lewisl9029), through reddit, or or through [my Toc account](http://toc.im/?inviteid=9b0d50b86dd596aa8c7a94bd116c2ed4a24ffb0f2d88d44231d3747f655fb27a). ;) (disclaimer: that last option might not be completely reliable)
I believe i can. Our team is currently moving a very large code base from coffeescript to es6 so i have experience with this and our decisions. In short, coffeescript does not look like it is going to be supporting es6 abilities anytime soon and additional features of es6 such as symbol, generators, etc... cant be used. So it just looks dead in the water with no future to us. We want to use those features now and cant! In long, most coffee script features such as structuring and destructuring are now in es6. Fat arrows as well. The "for of" and "for in" is flipped but oh well. Also there are awesome tools such as eslint and esdoc that we can finally use which have awesome es6 support. Lastly, its about hiring others. The trend is es6 and beyond...hiring devs who know es6 is going to get easier than trying to hire coffee script enthusiasts. Oh....edit here....we are able to mix es6 and coffescript at the moment so we can migrate. Also...es6 classes are just as good as coffee scripts and has better syntax features imho.
Modules and class bodies are always strict. Scripts can still be sloppy.
This is a good example of 'this' and how it works. If i may suggest taking a read at [You Don't Know JS - this and Object.prototype](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/ch2.md), in chapter two (that link is chapter 2) he talks about how the call site affects what 'this' is. Basically you have to look at the call site of the function, //...other code test: function() { alert("test: " + this._variableA); function Next() { alert("Next1: " + this._variableA); this._variableA = "value"; alert("Next2: " + this._variableA); } Next();//here the call site is plain and undecorated -&gt;window is the object. } so whats happening is implicit binding lost, and when that happens, it refers back to the global scope (i.e. window, or if strict mode is on, undefined). chapter 2 talks about this and you can see some code with it! good luck :)
He's just using an uncommon but valid synonym, so yes. That said, I find it hard to tolerate the endless spew of 'going forwards' and 'disrupting Xs' and other buzzword prattle I've heard from the tech world, so I can sympathise.
An obvious question is, why does this interest you? Is it for some kind of computer forensics analysis? Whatever the reason, I don't see any way to measure the delay between a physical keystroke and the keydown event with software alone. You'd need to hardwire some circuit or instrument to do that and your results could vary wildly between different computers, keyboards and operating systems. Does keyboard activity impact processor performance? Probably, not much. Not only do keyboards themselves buffer keystrokes but then the data is gated through USB circuitry and handled by low-level interrupt services all before the processor is even aware of the event. I bet the vast majority of time spent handling a keystroke in a web app is spent delivering it to the JavaScript engine and then shoving pixels around (assuming characters are being written to the screen).
Maybe this is too blunt of an answer, but my expectation is that in two years you will be writing in JavaScript features that make you forget about CoffeeScript and no compilation down to ES5 will be needed. For me that was enough of a reason to not really dive into CoffeeScript in the first place.
thank you for your help
I just noticed this, while this hides the sub name, it doesn't hinde the "self.jokes" or "self.antijokes" Do you know how do I hide that?
&gt; $('.subreddit, .domain').hide();
Thanks four your answer! For analyzing the keystroke patterns it is important for me to know how much the keystroke event delay can vary if the cpu workload is high. Let's say User A has a Dipgraph Latency (Elapsed Time between KeyDown of Key x and KeyUp of consecutive Key y) of 40ms and User B has the Digraph Latency of 30ms for the same keys (because he types faster than User A). Then it would be bad if the cpu workload of User B could cause a delay of 10ms because it would cause a wrong pattern which would not differ anymore from User A (very simplified...). I'm doing the research for a student project and before I can analyze the keystroke patterns I have to check if it's even possible to measure it accurate enough with javascript.
Here are a couple of questions I have been asked at front end interviews. More CSS oriented since I feel the JS questions have been beaten to death. When using media queries, which of the following is NOT a valid media type? - tv - all - voice - print - braille - tty - embossed What is the CSS at-rule that can allow you to define the character encoding of a stylesheet? Given the following 2 elements and their associated styles which would appear higher on top of the other. &lt;body&gt; &lt;div style=“position: absolute; left: 0; top: 0; width: 100px; height: 100px; z-index: 3;”&gt; &lt;div style=“position: fixed; left: 0; top: 0; width: 100px; height: 100px; z-index: 3;”&gt; &lt;/body&gt; 
very sexy. good job.
Still an awesome find \m/(&gt;.&lt;)\m/ 
I'm a heathen, I still use JSHint.
Adding new properties ad-hoc to objects is in itself an anti-pattern.
Agreed. I don't agree with him 100% of the time, but I really like how informative his books are and at least the fact that he has an opinion is better than some authors who just throw information at you and hope you figure out how to get it to work IRL
Our group has stopped using them as well. We haven't had a single instance of something funky happening. But we also lint our code which would catch any potential mistake and fail the build. So there really isn't any difference other than not typing a character. The back end code is mostly groovy and they have rules set up to not use semicolons there either. That's the primary reason we started omitting them on the front end too. Before I started here I was all for semicolons but I kinda prefer omitting them now. 
ESLint supports omitting them too and enforcing it. Also, it would have caught your indent mistake too and made it just as clear without semicolons. They really are optional. And it really is an opinion. You're entirely fine using them. Just as I'm entirely fine not. 
No, not really. The benefits of converting are there, though.
Angular was partially designed around the idea of transitioning to Object.observe. There are branches that are built to use it, but they were abandoned years ago.
Or just name the variable previousGyroHeading. Unless you're typing out every variable name completely, letter by letter, you're not saving any time using abbreviated, vague variable names.
If you sliced up that function into smaller functions with descriptive names and used more descriptive, unabbreviated variable names, you wouldn't even need most of the comments in your more concise example. The problem isn't comments, it's capturing the meaning of the code. Whenever I have to write lots of comments, it's a code smell to me that the chunk of code I'm working with needs to be refactored for clarity. 
Not when the object is being used as a cache or map. 
Totally my point. If you need that many comments, you don't really need that many comments.
Then use a WeakMap or a Map (or a polyfill of those in old browsers) 
What you're looking for is [event.preventDefault()](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)
Excellent work! When dragging tasks to another lane, the card doesn't move. Would it be hard to have the same drag and drop as trello? Material Design looks professional, but the colors make it look a little bit too business like. Might soften it up a bit with other colors than cold blue. 
It's not a game. Just a website. http://i.imgur.com/eBKBXxE.png I want the mouse to click on this button
The test syntax is inspired by node-tap/tape. According to http://blog.circleci.com/announcing-automatic-test-balancing/ you can request it. &gt; We will be working on adding support for more test runners soon–please drop us a line at sayhi@circleci.com if you’d like to request support for a particular runner! Please do! ;)
Your problem may be that the event handler doesn't return immediately. You can prepare a function with all the info (a "closure") and have that get called later with `window.setTimeout`, and immediately return false. Something like: form.onsubmit = function() { if(!validate(this)) { var form = this; window.setTimeout(function() { alert("Error on " + form.name) }, 0); // example return false; } } 
The first issue you linked to *does* have semi colons at the end of the file. It's the minifier which is removing them not the author of the code. Anyway, the issue you describe is also only an issue when you are concatenating by hand (like a cat *.js). That's because you are altering the code with a tool that makes no effort at understanding the code. So yeah if you are just concatenating files by hand then it may go wrong. So don't. Pass then all to the minifier and have it concat for you. If it can't then that's a bug in the minifier. It's a strawnan argument to me that people keep bringing up minification because using a bad minifier is worse and a bigger issue IMO.
I'm thinking the doc part. But that should be expected. But so is being a team player. 
So does this mean Angular 2 is dead?
Isn't that relying on Object.observe()?
Until you set up an example that actually validates, I doubt anyone will lose time to help you out. I know you need help with this but you are more likely to get help if people see you are trying. Laziness rarely inspires help.
Great idea! I've found a bug: if you click a card, it opens up the card in a modal with a shadow. If you click part of the shadow that's on top of another card and start dragging, you'll be dragging most of the window. :D At least in Chrome on Debian.
sublime-linter + sublime-linter-jshint
Thanks for sharing, the discussion has brought Proxies to my attention. Looks like I'll be replacing all my observers with proxies and a polyfill. https://github.com/tvcutsem/harmony-reflect
the equation is size`*`size, while size=4+step`*`n, until n &lt;= limit `for (var n = size; n &lt;= limit; n += step)` (this is the while -&gt; until part). pretty good reverse engineering experiment. good luck.
&gt;Maybe my benchmark is flawed in some way I'm not seeing I think it is. The entire concept is flawed because you're basing a decision to use a style of programming not on how it will affect your code, or how it will change the way you architect your system, but on looping over an array with a lot of members. Are you doing a lot of looping over 4000 member collections in JavaScript? &gt;Maybe the performance hit due to functional programming is not as important as this benchmark leads me to think, or maybe it matters less than what I intuitively feel It matters way less than what you intuitively feel, I think. How often are you looping over huge collections in JavaScript? What are you looping over on the front end that you need to show 4000 of in one go? What collections would you use on the backend that would be so huge and need to be rendered in real time? Maybe I'm way off base here, but in a decade of working in million + hits a day ecommerce and high scale email sending, I've never once had to render that many things. &gt;Functional-style programming is pervasive, and it would make my app extremely hard to refactor, should I need to. I think you're getting way too hung up on definitions and dogma. The whole point of adopting a style is to make things easier for yourself. If you think that adopting a more imperative style would be better, then do it. That, in my mind, is the main consideration. Not the performance, not that the 'community' thinks it's 'better' to have a more functional style. If something doesn't work for you, don't force it cause a blogger says you're supposed to. &gt;I guess my bottom-line question would be: Can I just use a functional style programming in Javascript (in a large app that would essentially be very very hard to refactor to imperative-style) and not worry about it? Would functional-style be suitable for performance critical apps (think, for example, game engine)? Or should it be reserved to the parts of code that don't do much (i.e., favor readability and debuggability over performance)? Depending on how you build an app, it'll be easy to change the architectural style if you need to, or it will be hard to, it all depends on how you've managed your dependencies and interactions. I've used a bit of functionally-inspired code in a [Canvas game](https://github.com/hoorayimhelping/Arty) I've been playing around with. The [render function](https://github.com/hoorayimhelping/Arty/blob/master/js/game/renderables.js#L13) maps a specific rendering call to each object in the game world that needs to be drawn. There are similar ones for updating and doing [repetitive movement](https://github.com/hoorayimhelping/Arty/blob/master/js/game/timed_movement.js) - this one also has a filter function before it maps the functions to the objects. Doesn't seem to affect the performance any more than a for loop, but if I notice those parts eating performance, I have options to change it without abandoning the entire application. &gt;I tend to think I'm much better off not adopting a functional style, and not worry about it. Bottom line, use what works for you. You've already answered the question in your head - you don't really like the functional style. That's fine. You don't need our justification or blessing to go forward and code the way you like.
That is interesting indeed, I didn't know that.
Alright, you have gone above and beyond. Your rewrite definitely steps into some rooms I'm not familiar with and probably some fundamentals I should know. I'm going to thank you at length when I can sit down and really take this apart, but for now THANK YOU SO MUCH! My next step is to have some interactions happening on a timed loop. Each cell will be a square of the world and I'll track some variables like grass height, water saturation, etc. When I get that far I hope you're around! You got an SO account? 
Rocket Raccoon: [about Drax] His people are completely literal. Metaphors go over his head. Drax the Destroyer: *Nothing* goes over my head...! My reflexes are too fast, I would catch it.
I've read/heard people describe JavaScript as a 'multi paradigm' language rather than a functional language. Judging by your question at the end I think you already know what to do.
[This](http://www.2ality.com/2015/06/tail-call-optimization.html) might be of interest.
Ha damn the nodejs REPL module is somewhat broken at the moment. Will be better when fixed.
I am originally from EU, how I did it: sign up to upwork.com -&gt; create awesome profile -&gt; accept small projects just to get reviews -&gt; increase you hourly rate so that its among the top (40-100$/hr)-&gt; offer top quality for the price -&gt; someone from USA will find you because in USA there are no good people -&gt; work for them for few months until they grow in bigger company -&gt; request relocation to USA -&gt; profit I have one of the top profiles on the upwork with about more then 2k hours logged and I started about 15 months before.
I edited my OP to make my question clearer. What I mean is, I'd like to use function paradigms everywhere, but I don't know if I should allow myself to.
Very interesting approach, I'll look into this, thanks. Did you do this full time or was it a part time gig?
&gt; Your example is slow because the js equates to 3 for loops and 1 object wrapping I realize, but that's exactly my point. There is a push in the media for using functional-style and ES6 features such as spread, but those equate to little losses of performance in every function call. I fear these little losses rack up to something significant over a large codebase.
When I started creating a profile there I did it over nights in my free time. Once I build momentum on upwork I quit my job and worked full time through upwork. Currently I still use it because it gives me nice income bonus since my profile is among the best so I get the best job opportunities.
exactly for (var _len2 = arguments.length, xs = Array(_len2), _key2 = 0; _key2 &lt; _len2; _key2++) { xs[_key2] = arguments[_key2]; } this is the babel compiler and array destructuring. my only suggestion is not use destructuring if performance matters. (i didnt know this either). the v8 is gonna outperform babel there. ASM.js has a better compiler, uses arrays/vectors not objects, and a tighter/more optimized js+math lib, I think some parts of your app would speed up. But the object wrapping from filter/map is gonna be the bottleneck again. you would have to rewrite a custom version (or try lodash?). idk if ASM.js implemented a map/reduce/filter. probably the same unless you write a custom filter/map so asm.js can optimize it. just my 2c
Angular 2 does not use Object.observe and did not plan on using it. They have their own change detection algorithm that is reactive and more performant than what they were seeing in O.o.
&gt; Counting on someone else's program to know what you mean is a dangerous situation. I'm not counting on it to know what I mean. I'm counting on it parsing JavaScript correctly. If I miss out a semi-colon there is only 1 way that code should be parsed. The behaviour of semi-colons in JavaScript (including what happens when they are missing) is well defined. It's not a guessing game.
Your recursive method creates a new stack entry every time, so it's slow. Native reduce is *very* slow because it deals with a lot of weird edge cases. Most third-party implementations of reduce use a loop internally, so they are pretty much as performant as the loop, but with the ability to use nicer constructs that don't require tracking a few extra variables every time. Most code in a program doesn't execute that much making fast vs slow far less important than readability and ease of testing. Even in large applications, only small parts of them will run at any given time. I generally use a functional approach then run through a profiler and fix any problem areas. If I were making a game engine, then a functional paradigm wouldn't be on the table because an imperative style offers other things like less GC pressure and easier performance prediction (there's far less guessing about optimization -- fewer "why isn't this inlining" issues). In addition, I would probably write it in something like flow or typescript because guaranteeing types also guarantees a lot of VM optimizations. That said, I would still give serious consideration to making the external API more functional. TL;DR -- If you have a high-performance library, then use the imperative, static tools and techniques that yield high-performance code. If you have huge codebases that can outsource the heavy lifting to high-performance libraries, then functional tools and techniques that are faster to develop, easier to maintain, and easier to test while not being that much slower.
Awesome, thanks for the info. I normally write PHP and I feel like a fish out of water when it comes to JS. Good to know IIFEs aren't necessary in ES6.
Cool, good to know about strict and ES6 modules.
That's why I wrap all onsubmit functions in a try/catch that reports the error and returns false.
It's true that such decision would lead to easier refactoring. It's actually close to how I do it myself (without giving it much thought either), but I'm actually wondering about "making the jump" to using functional style everywhere.
&gt; You said it modifies your code. It can't do that without knowing your intent. Did leaving out semicolons indicate an error? Or did you do that intentionally? What will your minifier do? What if you put some in there after some lines but not others? How does it know your intent? But it works out the intent from the AST. Regardless of coding style the semi-colons are long gone by that time. Do you realize a minifier will essentially throw the original text away? i.e. it does not work through string manipulation (stuff like *'code.replace( " ", "" )'* ). Maybe old crude minifiers did but a modern minifier will *not* work on your text as a string directly. It'll parse your code, turn it into an AST, perform the minifications, and then generate totally *new* source code from fresh (or some equivalent to that process). The whole semi-colon stuff is done in the parsing phase. It's gone long before minification changes are made.
UI data: places = list of places GA data markers = list of markers iterate places and for each one -&gt; a)create your html list item with id attribute the place id+ b)create a marker object and set a custom attribute with value the ID of the place (Google Marker is a JavaScript object, you may add custom information in the form key: value)+ var marker = new google.maps.Marker({ map: map, position: new google.maps.LatLng(0, 0), placeId: 56+ }); c)create an infowindow object var infowindow = new google.maps.InfoWindow({ content: 'info for place with id 56' }); d)add a click listener on the html list item from step a) with infowindow.open(map, marker)// assuming map is a global variable so why the id? if you add this step to your procedure d) add a click listener on the marker with alert(marker.placeId) then you know which element this marker refers to from you places list. anyways if you just want to show infowindow on every list item click skip lines with + good luck too lazy to paste you code, i m sick of JS 
For anyone else interested, this would mean you become eligible for an intra-corporation L1 visa (if I recall). I'm considering it myself, as another UK-based dev.
It is better to ask this kind of question in one of the other subreddits like /r/learnprogramming or /r/LearnJavascript . 
I can't deny that's a bit of a catch-22.
&gt; someone from USA will find you because foreign freelancers are cheaper FTFY 
I agree.
Here ya go, buddy! http://codepen.io/anon/pen/wKEydY
Correct. I'm actually watching the [video](https://www.youtube.com/watch?v=65-RbBwZQdU) recommended by /u/KPABA, and yeah. It leads to madness.
So I get that arrays are actually objects, but the above code isn't valid, at least in fiddles I've tried. Edit: Or wait, is the map you listed map in the functional sense and not the actual Array.prototype.map?
This looks fantastic. While I somewhat agree with [mtaon's comment](https://www.reddit.com/r/javascript/comments/3k2r1m/simple_vimjs_for_web_textarea_and_input/cuuhnt9), I also think this is great and *a* right way to provide better text editing.
You are correct that static typing doesn't automatically create VM optimizations. It does facilitate them though. Let's look at a few basic optimizations and how static types facilitate them. To optimize functions in current JITs, you need to avoid using `arguments`, the arity (number of parameters) can't change, and the types passed to the functions cannot change. To optimize objects, they need to be treated more like C structs. The number of properties shouldn't change and the types of the properties shouldn't change. `delete` and similar should not be used. Functions that accept objects need to accept an object with the same data type (type signature). To optimize arrays, their length shouldn't change (not completely solved by static types) and they should only hold one type of data (enforced by static typing). As you can see, several of these important optimizations are enforced by static types. These same things can be achieved without types, but can be harder given differences in developer skill. That said, these static supersets still can't deal with a large number of other unoptimized cases though. try..catch..finally, getters/setters, eval, switches with more than 128 options, generators (barely optimized), etc will all cause your function to not optimize. Inlining is also not dependent on static typing with heap variables, function length, AST size, and even comments can affect optimization. If speed isn't an issue in your application, then I believe that static typing (as provided by something like flow or typescript) is unnecessary overhead (not to start a holy war, but these type systems are very weak compared to ML-style systems -- still waiting on purescript). Unless a particular function is running a hundred times or so, it won't be optimized anyway. Even slow JS is still very fast compared to languages like python. Careful consideration and profiling is necessary before going down the rabbit hole.
Ah cool - I only see backend positions in the careers section right now but I'll keep my eyes open.
What?.. Use the cjs Chrome extension I identified earlier. Copy and paste the code in there and then visit the page you want it to run on and make sure the extension is enabled. You may have to wrap the entirety of the code in window.addEventListener("DOMContentLoaded", function() { //code goes in here });
Interesting idea, but would be a lot easier to digest if there were some code samples. &gt; * No more `.set()` and `.get()`; instead, just use the model's `attr` directly, as `'Object.observe'` is observing changes. Two things: 1. The author may want to revisit this on account that the [Object.observe proposal has been withdrawn from TC39](https://esdiscuss.org/topic/an-update-on-object-observe), i.e. it's dead-on-arrival. 2. Why not just use getters/setters instead? If you're already going to use classes, why not take full advantage of them? For one-way data-binding, it'd accomplish the same thing, no? 
&gt; alert("It's working!") Ye I got that. 
Hmm... Okay, can you link me to the site on which you're running the scripts? I'll try to mess around with the local code to make sure what I gave you works...
They were talking about making use of it in Angular 2
You wouldn't have permission. but you know what, it does not matter because I found a workaround. I could not use the script because the website "opened" a different site when I entered the script. So here is your reddit gold, its more than the one dollar but you saved me a lot of clicks ;) Thank you /u/ForScale for all your help - oh and this is going to be my frist reddit gold that I will give, but I dont even understand why you want it other than it supports the website. 
This will probably save me from a few days of work for a project I'm working on. 
they just laid off like 300 devs... and the company is not doing so great at the moment
Thank you, sir! I do appreciate it! And feel free to reach out to me anytime for help with code... I'm no expert, but I'll certainly give it a shot! Gold gives you a few perks, nothing too special. And it does help reddit. Again, I appreciate it! :) Take care; hit me up anytime!
where exactly does the xml come into play?
This looks great except I believe Object.observe is aiming to be removed by the end of the year though.
I disagree.
I came here to post almost the exact same thread in reverse! Gonna take a few tips from this thread and apply them to trying to find work in the UK as an American. Thanks everyone!
I know but what if user perform some action which depends on jquery before jquery is loaded ?
Very useful, thanks!
related: http://www.2ality.com/2014/12/es6-proxies.html
I didn't downvote you but React is just a view library. Backbone has models, controllers, collections and even a router making it a little more similar to a framework.
this is cool. I made a barebones tool for myself a while ago that generated the clip rect css for an image that you uploaded. But it's nowhere near the complexity a feature-richness of Cropper. 
It may not be true in the most recent versions of v8, but one of the v8 rules for inlining a function is that the total number of characters (it does something close to `myFunc.toString()`) including both whitespace and comments exceeds 600. In addition, if the resulting crankshaft AST (abstract syntax tree) greater than 196 nodes, then inlining will not happen. As you might guess, some performance issues can be very difficult to discover and fix (especially across browsers).
You fucking asshole feel insulted? Oh my, how... horrible! You little child, I'm soooo sorry for you little piece of shit! Let's say you piece of shit have lots of potential. That's the positive side of being at the bottom. How stupid is that reply? It had already been clear where you are standing, the reason why I wrote a reply in the first place.
&gt; Show me a little passion for programming! Uhm... how about *you* show some more... reason, rationality and - intelligence and empathy (I hope you know what "empathy" means, it has nothing to do with a "soft hard")? Because for qiute a few other people your reasoning sounds just *stupid-arrogant* (arrogant alone is fine - for people *who can afford it* because they are that good). I once visited another company and in their lab worked with a guy who was responsible for making Oracle truly "unbreakable". They developed cluster software for Oracle, later they were bought by HP. At a time when it cost 6-digit figures they had RAM disks, and they'd have automated processes to randomly cut power on a random number of cluster members and try to get their code to fail. As soon as we left the building we didn't talk about *anything* IT. We had dinner and spent hours talking, about his (Oregon) forests, bears and whatever. Not one word about IT. That guy was not just *good*, he was *great*, one of the best in the high-end cluster market, and to him his work was just that - *work*, a job. Good people *do* have a life outside IT. I am certain he would be one of the people you would reject. It's been similar with many top IT guys I met, and since it was my job to go to lots of companies and present and write whitepapers together with them I had plenty of interactions with the core developers in those companies. In summary, it seems to me *you* have some growing up to do. Also, it is *much* easier to work with people who are professionals rather than "passionate". What the f.. are you passionate about, it's just computers! I reserve my passion for the things I can do with IT, and I mean everything *human-oriented*. How passionate does a stone mason have to be about his chisels and hammers? A lot of great people reserve their passion for friends and family and treat their profession as just that. 
Thanks. Do you have authors/newsletters that you recommend? 
That would actually be kind of cool, if you could Airbnb your right to work in a particular country.
This is probably the answer he is after, seeing as this sounds like a homework problem
Or the *hearts*?
If they remove any more dev support im gunna start my own twitter 
The problem with Backbone is not that it's written in ES5 (or 3 or whatever)
Sure there are negative metrics but they only just got Jack Dorsey back as full-time CEO, I've got confidence in that. Plus rounds of layoffs (particularly in a different country) aren't always a cause for fear. The BBC for instance just cut a shit load of jobs, but they were middle managers, they slimmed down their layers.
what's wrong with Backbone?
No worries. A good question. 1) often times in development, you are building up a suite of components. React helps you break down your website into components that can be more simply reused. 2) Often times you are try to bind data structures to a view, and React provides a templating engine that allows you to not only bind data to your html, but also functions as handlers of certain events. It does this more easily than using jquery to target a peice of html using JSX which can be thought of as a templating langauge. 3) In order to really understand how to build React apps, it would be useful researching Flux unidirectional data architecture. React tends to be built with a certain architecture in mind. Google "Reflux React"
- Uses lots of inline styles, impossible to customize. - Poor internationalization support. - Light / dark theme using React context?!
- Uses lots of inline styles, impossible to customize. - Poor internationalization support. - Light / dark theme using React context?!
You can build an entire very complicated website with just 10 lines of html and reactjs. It has all of the tools to handle events, css(albeit not entirely a good idea to do the inline css that reactjs provides the option for), generation of html, selecting dom elements and editing them etc. You can add denlillemand31 on skype, i have quite a bit of experience in reactjs and dont mind spending 1-2 hours with you. 
Three words question. Very frowned upon as a is a common troll. I just upvoted you to compensate. But try not to do that in the future...
You can try base64 encoding your CSV with [`btoa`](https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa) instead of using `encodeURI`. Out of curiosity, what are you using to generate the CSV? I've used [d3 to generate CSVs](https://github.com/mbostock/d3/wiki/CSV) with much success. 
Well, even the FE work at Twitter involves a fair amount of Scala. It's a thin-client shop. But it looks like they took the FE listings down.
Or use Proxies.
What makes React interesting isn't ES6 or the virtual DOM, it's that it enables a more functional style of writing UI components on the web, with a clear hierarchy of encapsulated components, receiving props and emitting DOM elements. What makes Backbone somewhat tedious to work with (especially on larger apps) isn't the technology behind it, it's that it pushes you towards an architecture that had an unfortunate tendency to devolve into a complex sea of events bubbling in unexpected ways, memory leaks if you don't dispose of event handlers properly, weird bugs because event handlers weren't re-attached properly, etc. You can write good Backbone code or terrible React code, but the difference isn't "ES5 versus ES6", but more about "imperative versus declarative", or "procedural versus functional". 
Have you considered moving to Diet America? Toronto/Montreal are nice cities. You'll fit right in with complaining about the weather as a national passtime. Alternatively somewhere like St. John's or Halifax on the east coast are incredibly cheap places to live by comparison and you could probably find work fairly easily. Avoid Vancouver, too expensive. Calgary may be an option. Might be too cold for you though.
I use canjs since 2 years ago and Im very glad to see DoneJS release, it realy helps to get Applications done with enhancement of the workflow from developement, testing, documenting to deploying with all this CanJS does everything other frameworks/libraries can do in much simpler way.
Yes it does, as to insert to Maps you have to use `#set()`. And Maps can be converted to objects via a simple `for ... of` loop and then serialized.
So your answer is "one character per line" Mmmmkay
Very cool idea. I'd also like to see something like a Gmail / conversation client done in TodoMVC style as well.
Me, as a German, wouldn't recommend to move to Germany. Even so they say we would need so many people in tech, I can say, it's just a lie to make the industry look better. I know a lot of people with a CS degree that getting no jobs at all or get pretty pad paid (about 40k and that's not much if you consider to live in a bigger town. And if you get a family it's just a joke) A lot of Germans want to leave Germany, especially the younger generations.
[Firebase](https://www.firebase.com/)
Nothing better :( I moved onto haxe with nape physics engine - it's more mature. Box2d emscripten ports are not bad, but have their quirks
I just moved from the UK to Barcelona, to work remotely over here. It's amazing, everybody who can should do it (it it's easier than you think, even reasonably easy for my gf who does comms for pharma, decidedly outside the tech scene) The UK is just crazy expensive, and the world is full of drastically cheaper and more lovely places you can live. We've doubled the size of our flat, moved from the edge of London to the nicest bit of Barcelona, halved our livings costs, and massively improved our quality of life. Go for it.
There's no functional reason to have them nowadays. It's a religious debate. You can't argue for or against. The only important thing is lint to ensure it's correct.
You would if everything in your language is objectable. 
Let me know so I can take the username @realDonaldTrump. It'll be great, that I can tell you. And Mexico will pay for it, believe me.
Proxies can do anything O.o can.
Is the idea that you'll use an idiomatic approach to these implementations? I did a quick audit of the React example. I've never heard of [Grapnel](https://www.npmjs.com/package/grapnel), but [ReactRouter](https://www.npmjs.com/package/react-router) is exceptionally popular. I'd recommend switching to it. The main idea of React is that your UI is a simple transform of your application state - any time the data changes the UI should too. I've never seen anyone use `forceUpdate` or `self.render`. (I didn't even realize `forceUpdate` existed). - If you want to focus on purely React (with no Flux implementation), your data should be passed down as a prop. - If you're using Flux (which is common when your app grows to be larger than a demo), you can integrate [Redux](https://www.npmjs.com/package/redux) and use its `&lt;Provider /&gt;` controller to pass in your data. The Redux docs give a [really good example](http://redux.js.org/docs/advanced/AsyncActions.html) of how to integrate an external API. No matter which route you choose - embrace props! [You should never call `forceUpdate`](https://facebook.github.io/react/docs/component-api.html#forceupdate). ----- One final change, this one's a nit: `Home.arr` should probably be `threads.map(...)` with either a meaningful variable name or inlined in the `return`.
A textarea with its height and width set to 100% should do the trick. Make sure the body's height and width are set too.
Are you recommending overriding the native Map.set function? Yes, we can write functions to convert maps to and from JSON. You know what's easier? Just using objects and arrays to begin with. 
This has actually been one of the things preventing me from devoting the time to learn it. I feel like I need a complicated project in order to properly learn React, but I can't quite decide what would be worth it. Any thoughts on first project ideas? I have been learning Node.js with some minor projects, but none of those have required and heavy data binding that I couldn't handle with regular old jQuery.
Call a head-hunter aka recruiter. Like Robert Half International. They will help you do everything you need including filing government paperwork.
This is NOT correct. Have you considered the corner case where two individuals call the web page at the same moment and receive the same time value? Very possible, because even if the web server served the pages at different times (half-second apart) time offsets between the two client computers could be such that the same number will be generated. Instead use one of the several GUID builder libraries: http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript 
I'd recommend Redux. If your point is to show how people'd actually write a business-class app, you should use best-practices for data management (e.g. Redux). On the other hand, if you just want to focus on React (without any of the optional bits), having a simple store is fine. In fact, the guy who distilled and open-sourced React thinks [too many people start with Flux](https://twitter.com/floydophone/status/649786438330945536?lang=en). As for ReactRouter, I've never had that problem. My stuff is isomophic - I render my app on the server, backfilling with a pushState-powered browser history on the client. They just shipped ReactRouter 1.0 with a new API. Here's a note on [how to create a browser history object](https://github.com/rackt/react-router/blob/master/docs/guides/basics/Histories.md) in the new version.
SWEET! Thanks dude! I *knew* there was "something like this" out there, and I've seen this before but I just couldn't remember the name. Thanks again!
I think there's certainly a benefit to having a React-only example, but like I said, I really liked what I saw in Redux. 
1. Move to Austin, Texas. 2. Say "I know Javascript." 3. Profit.
I believe this is something an IDE or similar should put work in to handle appropriately, if you ask me. Once your tool has scanned all your project's dependencies it should be able to map any exported object to its source module. 
I agree you can do that, but in different scenarios it's going to be more useful one way or the other. If you know the name of the function, then this way is pretty nice -- it can list all the closest matches, and show you what module they are in, and selecting it can autocomplete the rest of the import statement. But what if you know the module but not the name? Now you're stuck looking at the module and trying to find it manually. That said, it could be purely an IDE thing. You could just have a plugin that allows you to type modules the other way and then flips them after you hit enter. Another downside is that for large projects it's going to be prohibitively time consuming to load every single file in the project. Going the other way you can easily look things up on demand to keep the IDE light on resources and happy.
[Cracking the Coding Interview](http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X)
Depends, my job is entirely development. We have a designer who does all of our design work.
That really depends on the job you take. If you were applying for a job as a "front end web developer" at a moderate sized company I would expect the roles to be completely separate. At my current position the closest I come to designing is providing guidance about what can and cannot be achieved with the technologies available through the browsers we support.
Thank you
When you pass `remove()` as an argument, what it is actually doing is _running_ the `remove();` function and passing whatever that function returns (in this case I think it'd just be `undefined`) into the `setAttribute` function's 2nd argument. So, what I think you want, is to pass the _string_ `'remove()'` as the 2nd argument so it doesn't get evaluated. I'm on mobile so can't test, but I think that'd be your issue. 
Thank you! That did the trick!
Is there a reason you can't use `helpMenu.addEventListener('click', remove);` instead? If you're using javascript to setup the callback anyways, I think you're better off using `addEventListener`. Unless I'm missing something.
You don't need to if it's not what you do. Simply respond saying that it's not your expertise. If the questions stay focused on what you're not interviewing you for they're crappy interviewers. That being said, I do expect most front-end devs to have programming knowledge, including some fairly complex algorithms. So to me it comes down to whether you're interviewing as a front end developer or a "jQuery/etc script builder".
"Impossible" is a bit of an exaggeration, I have no issues changing colors globally with the Theme or on a per-component basis with inline styles. Are inline styles considered bad? Seems like lots of smart people are using them. I'd love to switch to something like CSS Modules but it's more of a proof of concept at this point. 
You two are wonderful. Thank you so very much. You have saved me a large amount of headaches with this! I appreciate it.
Would love to see implementations as branches to allow /compare/ to work to some degree on GH
"Web Development" definitely means programming. That said, how much designing you do on top of that is going to vary hugely place to place. It's on you to feel out what they'll expect and compare it to your comfort levels.
Yes, but assume you can guarantee that an array is precisely an array of numbers (usually represented as `number[]` or `Array&lt;number&gt;`) and definitely not an Array of numbers or possibly null or undefined and there is no way in the language to delineate the difference between the two. In JavaScript, a `number` and a `null` are two very different things and should be represented as such. If you explicitly want a nullable number, that should be doable within a good type system, but should be opt-in, not default.
i agree with you, i do want to improve this aspect of my interviewing. If i were to interview someone out of the front end scope, i would also ask them generic based problem questions. May i ask what would be algorithms that i must know?
TypeScript is just a static compile-time type checking system on top of JavaScript, a dynamic language. If you really want a run-time type safe array in JavaScript, stick with the [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)'s (`Int8Array`, `Float32Array`, etc.) or use [Flow](http://flowtype.org/docs/about-flow.html#_), which has type inference to deduce those kinds of issues. Even Java is not type safe, `List&lt;Integer&gt;` allows `null` values; generics can be abused... There is a big difference between type checking and type inference. Either way, I think you are targeting a very small use case. Sparse arrays are fairly uncommon.
&gt; improve this aspect of my interviewing While I think it's great that you're trying to learn, in my opinion you have the wrong objective. You do interviews likely once every 1-5 years, depending on the person. I'd focus on improving your skills in areas of front-end-development that you might be weak on, which will naturally lead to you being a better interviewee. That may sound like the "same thing", but I think it's the difference between potentially changing your focus/scope of work vs memorizing facts. &gt; May i ask what would be algorithms that i must know? I usually wouldn't ask a front-end dev questions about specific algorithms, I'd ask problems that lead there. I'll use Amazon's menu system as an example: - Draw a menu on the whiteboard with 10 top level elements and a child menu to the right. Basic discussion here about how it should work with hover states, etc. - Now what happens when they move the mouse from the parent menu to the sub-menu, but accidentally drag the mouse over a different parent menu getting there? This leads to discussions over things like hover delays, etc. - Try to push them to the ultimate "correct" solution seeing how long it takes for them to figure it out, and whether or not they would be capable of implementing it once we get there (it requires some basic trig).
K calm down. I write react for a living and am the author of a major React library
Angular
React Edit: I in no way suggest learning react, I think it's a waste of time. Anything Facebook does should be avoided. The only reason I posted this was to cash-in on the imaginary internet points the circle-jerks bring.
First, they're not completely comparable. Angular does everything while React is "simply" responsible for rendering views and does so in a very simple and efficient way. React+Flux/Relay is closer as the latter two handle a data layer. Right now Angular is still much stronger in the job market, but that's largely because lots of apps are already written with it and companies have invested some resources into using it. My own opinion -- I hate Angular, I love React. Angular is a clusterf*** of chaos with the wrong things auto-managed, holes in patterns that you have to hack around, etc (to be fair I haven't touched it in &gt; 2 years, so some of that may have changed). The learning curve is _steep_, definitely the steepest, by a long shot, of any framework out there. The documentation is (was?) _horrible_, using their own internal vocabulary to describe other concepts. It's like writing "To understand flimgits you must understand woozles first. Woozles are factories that create smuggles". React is beautiful. You get data, you render a state, and it just works. Relay is making the data connections part of that even more beautiful. I have nothing but kudos for the FB team that seriously stepped back, ignored all existing practices and said "Okay, how _should_ this work?" And if anything my Bias should be the other way as I worked at Google and love the company.
Thanks!
Thanks a bunch! 
I'm also the react guy, figured i'd cash-in on the circle-jerk.
This. Seriously, anything more than a cold and you're pretty much bankrupt. 
Lolwut. Don't do this. Don't think about doing this. It's very wrong.
Your logic is fine, but repeating it 5 times?!? var links1 = [...]; var links2 = [...]; function pickRandomLink(links) { ... } pickRandomLink(links2); The reason it doesn't work is you're re-using the `randomLinks` variable.
There are many companies with a JavaScript backend running on nodejs. 
Thank you so much! I'll go with React. I have a hard time grasping things at first until I have my lightbulb moment, so it sounds like Angular's documentation alone would hold me back. Thank you again so much for the wonderful and thoughtful reply!
Well read a bit about both and make up your own mind. This is just my opinion :) Other people love Angular. https://egghead.io/ has a bunch of free videos about both. I'd suggest spending maybe an hour watching some of the "how it works" lessons on each.
Seems to work fine. Tried a different browser?
I picked up an angular job a month or so ago and I would not consider angular friendly at all for someone who is not really familiar with a lot of programming concepts. Sure it's easy to do some flashy simple stuff at first- but as soon as you want to do a big project it gets complex really fast. Just the way even everything is split up services/controllers / filters/directives is kind of infuriating. 
Oh, I personally do not! It's part of the curriculum for the program I'm about to begin (bootcamp). I'm just trying to plan ahead a bit so when it's time to choose, I make an informed decision!
Thank you very much! This answer is really helpful. 
That's what I thought! The general consensus regardless of if one likes Angular or not seems to be that it's not very beginner-friendly. Thank you!
The current way it easier to parse (and implement syntax highlighting for). That might not be the reason though.
Thanks - hadn't realised that was an option!
So webpack your code (with `NODE_ENV = "production"`) before you deploy it. `babel-loader` will munch on the JSX for you. `production` also disables some sanity checking, so your performance metrics will improve.
Yeah I'm sure healthcare is a nightmare and I don't intend on retiring there. It's not a reason to never live somewhere or you'd have very few places left in the world. The difference between the US and the UK politically is that in America controversial changes in social law can still take place whereas in the UK everything has to be a matter of course before it happens. This I suppose is largely a result of the relatively devoluted federal system. 
Thanks, I'll see if I can implement that!
thanks, much appreciated!
By super thorough I mean one step below the ES6 standard. But in a much more approachable style than standardese. I came across the blog today when I found [this article](http://www.2ality.com/2014/12/es6-proxies.html) on ES6 proxies. By top notch I mean one of the best, most in depth articles on JavaScript I've ever read. It was *everything* I ever wanted to know about proxies. It was beautiful. And there are many others. I saw he wrote two books, one on ES5 and one on ES6 (the new stuff, not the whole language). I saw that chapter 28 of the ES6 book was pretty much the content of the article I just read. So the book is probably the aggregation of many articles plus some new content. The blog article + chapter 28 of the book is enough to convince me of the quality. I find them so good that I almost feel obligated to link them here. I understand that I'm some random internet stranger and people don't trust me or my motives. But seriously, anyone who knows their way around JavaScript can verify what I'm saying for themselves.
Yep; it's a drastic improvement on JavaScript, but it's not a drastic improvement over the status quo for popular statically typed languages everywhere, sadly. Definitely better than Java et al, but not quite up with Swift/Scala/Rust. Does a very good job of handling standard JS idioms effectively in the type system though, it's just sad that building accessibility for JS developers comes with a cost in how ambitious they can easily be.
that's not as easy as it sounds. You can not goto a business and ask, hey, how much your developers make? Well, you actually can but it's awkward. 
http://media.giphy.com/media/DsdVe5jhHWNC8/giphy.gif
That sounds better, 22-24k €uros to a junior position. But the reality it's quite difficult to find that. (if you're a junior of course).
Thanks, now I see it's a general problem that developers have.
Thanks! I'm going to read your article this weekend.
Thanks for your comment. Maybe in BCN area can we get remote jobs from US with that budget? (50k€). Or that it's for only US location jobs.
That guy is a little condescending. 
Sure you can- your city has a subreddit right? Does your country have a subreddit? Your closest major city? Just post a thread there asking how much js developers there make where they went to school, etc. You could always create a free survey at surveymonkey and then post the link on your local subreddits. Plus the results are viewable once they answer so it'll be interesting to compare their earning to their contemporaries.
I hate all these dumb hacks. Just use react, don't make another shitty clone of it.
In the US $60k is about average, with NYC/LA being closer to $80-90k and Silicon Valley being $100-$250k DOE. Most of Europe is notoriously low for dev salaries.
It's not a clone. The Scala.Js React wrapper is using FB React, just adding typing and some extra features.
Yeah depends on the job, your employer, etc. I've had jobs where some design is required, and I suck at it. I've had more jobs where no design is required and I try to keep to those jobs. I don't want, or need to know how to make pixel perfect templates for example. I suck at it. So I avoid css related activities at all costs. 
Check out [`nyc`](https://github.com/bcoe/nyc) for code coverage with AVA.
I think the best way to do this would be to add an event listener to the `body` element. Within this listener, you can then see if the thing that was clicked on is a link that contains a CSS class indicating that it should be randomly censored. If you're already using jQuery, you can add this to the bottom of your page: &lt;script&gt; $(document).ready(function() { var censoredUrl = 'censored.html'; var censoredClass = 'maybe-censor'; $('body').click(function(e) { var $el = $(e.target); var isLink = ($el.prop('tagName') === 'A'); var isCensorable = ($el.hasClass(censoredClass)); if (isLink &amp;&amp; isCensorable) { e.preventDefault(); var shouldCensor = (Math.random() &lt; 0.5); window.location = (shouldCensor) ? censoredUrl : $el.attr('href'); } }); }); &lt;/script&gt; Then to randomly censor any link, simply add the `maybe-censor` class: &lt;a href="normal-url.html" class="maybe-censor"&gt;This link will be randomly censored&lt;/a&gt; &lt;a href="normal-url2.html"&gt;This link will never be censored&lt;/a&gt; Any link with the `maybe-censor` class now has a 50% chance of being redirected to the censored page, while all other links will function normally.
example of how i find jobs in Sydney on a local job site called [seek](http://www.seek.com.au/jobs-in-information-communication-technology/in-new-south-wales-nsw/#dateRange=999&amp;workType=0&amp;industry=6281&amp;occupation=&amp;graduateSearch=false&amp;salaryFrom=100&amp;salaryTo=999999&amp;salaryType=hourly&amp;advertiserID=&amp;advertiserGroup=&amp;keywords=javascript+3+month&amp;page=1&amp;displaySuburb=&amp;seoSuburb=&amp;where=New+South+Wales+-+NSW&amp;whereId=3101&amp;whereIsDirty=false&amp;isAreaUnspecified=false&amp;location=3101&amp;area=&amp;nation=&amp;sortMode=KeywordRelevance&amp;searchFrom=quick&amp;searchType=) Also [Glassdoor](http://glassdoor.com/) has the pay rates for many companies
I'm using tv4, https://github.com/geraintluff/tv4. Not sure why I chose it, but I have no complaints. Here is another one that I was looking at recently, https://github.com/tgriesser/checkit
coz u can
Maybe you don't have enough experience for that job.
He doesn't seem to explain, maybe he mean html tag?
Interesting difference between types. Since JS is rather open and free, you can still set everything with "var" and there's little-to-no meaning behind it. I like that this dev differentiates between the types for the benefit of other developers' understanding to what s/he was trying to do.
Ah, our weekly front end framework :)
Yeah I'm wondering the same thing. Looks to me like a few syntactical features but nothing that says "next-gen". At least React brought a fresh perspective on how to structure applications.
 var myArr = [1, true, "OP's Post", 42]; myArr.splice(2, 1); ;) People may be thinking it's a bit too basic. Post might be better received in /r/learnjavascript.
[JavaScript is Assembly Language for the Web](http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx) :p
I'm not sure if you're serious or not, but they are exactly the same difficulty to parse and implement syntax highlighting for. 
Yeah and O.o is missing from those browsers. Your point?
Fair point. I'll admit: JQuery is a bit of a crutch for me. However, over the past while, it has made me want to step away from that type of development and solve problems differently. JQuery allows for shortcuts, made accessing the DOM easier (at least for me), but I do agree with the dev in this video that things languages and frameworks are constantly changing for the better and that's the way things go.
Looks like Swift is a real language now.
Its similar approach like reactjs
O.o is going to be missing from all browsers, and proxies work only in Fx and Edge. What's /your/point?
Hi /u/R4ph4e1, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/bytearcher, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `bytearcher.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [bytearcher.com](/search?q=%28and+site%3A%27bytearcher.com%27+author%3A%27bytearcher%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|7|78%
Hi /u/ericwnormand, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `lispcast.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [lispcast.com](/search?q=%28and+site%3A%27lispcast.com%27+author%3A%27ericwnormand%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|35|88%
Saw the title and thought this must have been posted in /r/programmingcirclejerk Was very surprised to see it wasn't. It really does belong there though.
Have anyone of those here claiming Scala.Js is a framework actually seen the video? It is a language, just like Typescript, Dart or Closurescript. React, Angular etc. could be used with Scala.Js, best using a wrapper to have type safety.
As soon as he started with val content = div(cls:...) I was done with it
Our weekly *next-gen* front end framework :)
interesting indeed....
There are many crazy semantics here. It was very hard to figure out how to add block-scoped function declarations in ES6 given that browsers have always allowed it and have different behaviors. See also: 1. Spec for hoisting in browsers with some discussion of interoperable semantics: https://tc39.github.io/ecma262/#sec-block-level-function-declarations-web-legacy-compatibility-semantics 2. On-going discussion about an additional case that wasn't handled in ES6: https://github.com/tc39/ecma262/issues/162 
Don't know anything about adwords, but I'm guessing this line: adGroup.setName(adGroup.getName()+"TESTAG-111"); Should just be this: adGroup.setName("TESTAG-111"); 
I believe you meant your comment towards TypeScript, promoted by Microsoft and Google these days :)
Agreed. Also love it when you come across Javascript tutorials, and they start off with "And for this tutorial, we'll be using CoffeeScript...". Dear JS devs who want to help people learn JS: Can you please teach JS without incorporating a bunch of noise that distracts from the core lesson you're trying to teach? "Today we're going to teach you HTML. And to do that, we're going to use HAML" -_-
I'm not too concerned with browser support. It appears to be working on IE11. If I had to support older browsers, I would probably just use jQuery's source code or something similar.
I'm not sure whether to laugh, cry, or applaud. It seems like they are trying to have their cake, and fuck us too... but I'm not really all that sure what's going on here. I'm not sure why they have a 5.x branch - and it really sounds to me like a branch, not version - that is only supported for a short time when they have an older version supported for longer. This sounds like a plan to fail horribly.
Go for it. It must be done.
Why did you write the transpiler in JS?
You are expecting to get numbers like this: 4 but you are getting them like this: "4" That's the different between an integer (number) and a string (a letter or word). When you use the plus symbol (+) on two numbers, it adds them together exactly like you expect. However, when you use the same symbol on two strings, it smashes them together ("12"). To get the behavior you expect, you need to convert your strings into numbers so they can be added together. The way to do this is with parseInt() You give parseInt your strings, and it will give you back numbers. So: var number3 = parseInt(number1, 10)+parseInt(number2, 10); alert("The sum of the two numbers is "+number3);
http://33.media.tumblr.com/f0e37a49e72d225a344ce3c390f627af/tumblr_n4jtwp1eV61qm7cjco1_250.gif
Does not equal, the tutorial series I'm watching said this was valid, is that incorrect?
 for (let li of document.querySelectorAll('.li')) { li.classList.add('new'); }
See link above. == and != coerce types, === and !== do not. &gt; 5 == '5' true &gt; 5 === '5' false
So, instead of doing if (Q1 == "1918") { alert("Question 1 was correct!"); } if (Q1 =/= "1918") { alert("Question 1 was incorrect! It was 1918!"); } I need to do if (Q1 === "1918") { alert("Question 1 was correct!"); } if (Q1 !== "1918") { alert("Question 1 was incorrect! It was 1918!"); } ? 
My latest project I made for my sister who is learning to type faster. I am open to feedback/suggestion/criticism. I am fairly new to JavaScript so any tips are appreciated!