If you are having performance issues, I have 2 recommendations. The first is that DOM operations kill you and should be done as little as possible. The second is lodash. I put together a [fiddle](http://jsfiddle.net/y6Fnq/5/) that demonstrates how effiently lodash can handle these situations. It randomly creates, renders, and groups (by phone and email) 1000 of the records you describe in far less than a second. The best part is that I didn't have to worry about the performance, because lodash is built for speed. My guess is that it could be done more efficiently, but I often find that I needn't bother with optimization when using lodash.
Would there have been a 13th ammendment if it weren't for dissent?
You should read his initial response on the matter. I've followed Eich for over a decade at least and have never heard of him speaking a single word of hatred or malice toward anyone. He made a donation and someone made an error that showed the donation was from Mozilla which caused this. Part of the issue is what is 'public life' for these people. The ultimate irony here is he was far from the only high ranking (especially at the time ) tech officer of a popular company on that list and at least he isn't still actively supporting PACs with those same values to this day which can't be said of everyone who still has their job in this field...In terms of keeping his private life private which is all that should be required of a *potential future* CEO he did all the right things and I truly believe he has no hatred for any group. Someone made a clerical error or no one would've ever even noticed this. That's the odd part of it.
Things weren't any easier prior to 2000. 
Works in Safari as well.
There are two issues here at play that need to be addressed separately: 1) Did Mozilla make the correct business decision in pushing Eich out? The consensus is yes. 2) Is it *acceptable* that such pressure exists, making pushing out an otherwise highly qualified CEO the correct business decision? I hear a lot of discussion about the first, not a lot about the second. ^edit: ^wording
&gt;&gt;social progress has nothing to do with freedom of speech Wat? Done. 
Missleading title.
FWIW, I've been calculating how full a container is in JS. Again, simple arithmetic. If you want to do graphics or animation with canvas or svg, you're almost definitely going to hit some trig.
How awesome would it be to create a game using HTML5/JS to remake this: https://www.youtube.com/watch?v=ErLNHK-F6bM
Ok. Let me make this clear for you. Freedom of speech is a phrase. It means you are free from retaliation based on giving voice to something. It's sometimes politically protected as in the U.S. (what you are describing is the first ammendment not the philosophical idea of the freedom of speech. The ammendment does use that phrase, however.). Freedom of speech/expression is a social contract. We (and by we I mean humans...It's common in tribal communities as well) up hold the contract because it has been the basis of our social progress in this and many other countries. You'll notice it's not there in non progressive society as not a political right because society and government are linked in incredibly in depth ways (your example of France ...got a modern indictment you can point to on that one? You'd probably be shocked by some of the shit still on the books in this country if you looked). Anyway the point is freedom of speech has always been an inherent social contract that, yes was codified in the United States. It's absolutely the basis for all social progress across the globe and history. I don't see how anyone could deny that. Where does social progress make birth then? How do mindsets change on such divisive topics over time then in your mind? This is sociology 101 material.
A lot of the compared functionality was already available in plain PHP and the author states as much, so I find the title somewhat lacking...
"Thought policing"? No, not really. It's just that things are a bit different if you're a public figure like the face of some large company. You represent that company. Whatever you do, it reflects on that company. You have to be politically correct and diplomatic. For that kind of job, you have to be that kind of person. It's a prerequisite. Brendan Eich simply isn't that kind of person. As a CEO, you can only have publicly known controversial opinions if those are aligned with the vision of the company. E.g. as the CEO of *Abort-o-tron Vacuums and Coat-hangers*, saying that you're "pro choice" would be totally okay. However, doing the same as the CEO of some multinational retail corporation could be a bit of a problem. A significant portion of your customers would strongly oppose that kind of opinion.
&gt; 2) Is it acceptable that such pressure exists, making pushing out an otherwise highly qualified CEO the correct business decision? I think you might be begging the question here ... Eich's actions (even ones from 6 years ago) factor into whether he was qualified or not given that CEO is a highly political position that's just as much about appearances as it is about substance. We can't separate his public opinions from our judgement of his qualification, and this episode (IMHO) is evidence of that idea. I'd also put forth the idea that if you accept that CEO is an inherently political position, that his failure to handle the backlash in a politically expedient manner also shows his lack of polish in front of the public at large. He could have simply given a heartfelt apology and said he'd made a mistake and changed his mind (true or not), and I personally think all would have been forgiven. TLDR; The unpopular opinions that were easily tied to him and his inability to handle the backlash imply that he wasn't "highly qualified" to be CEO. 
That's not an error, that's a practical law to prevent organizations from exceeding donation limits by having all of their employees donate on their behalf. 
Hey thanks! I'll definitely consider doing this! I have to actually use Git with the job I just got..along with Drupal modules.. and possibly even php as well.. so I definitely have more than a full workload ahead of me.. but I'll enjoy it overall for sure. I REALLY want to do this github thing, I think I'll do this when I start my 8 week reading period in the summer- the github project ideas combined with me reading will help keep myself accountable since they are both sort of dependent on each other for both to be able to work out. And the treehouse trial thing sounds great, itll be nice to see something that is hopefully of better quality than codeacademy or codeschool. And also hey, keep in touch, you and I could be millionaires some day. For now, its noob web developer time 
And Netscape.
I wonder how many js devs are actually capable of writing an MVC framework, templating engine, or a dependency management system, or even a tiered events module on their own. This shit pisses me off because any idiot can use an API, but very few people can write one.
ES6 is the language, Javascript is an implementation of ES6. I think is more like: *Hack is to PHP what CoffeeScript is to Javascript (ES6).*
Are you the author? How would I render a texture onto the simple sphere to look like land.
Is there any video available for this perhaps? Anyway, thanks for the share. EDIT: Nevermind, I found it: https://www.youtube.com/watch?v=C7wWakRMAUY
You're an idiot. This is not an issue of "free speech". Nobody is telling Eich he can't have the views he does, nobody is telling him he can't use his money to for whatever purpose he wants. But there are consequences for all things, action and reaction. Everyone chastising Eich over his biggotry are also exercising free speech, so who is right and who is wrong? I can tell you it is not the one who spends $1000 hoping to prevent a specific segment of people he doesn't like from pursuing happiness. free speech is guaranteed but nothing was ever mentioned about "fear of retribution" - if you say something vile, you certainly can expect people to call you out on that. If you spend money trying to change laws, you can expect others to counter that action. There are no guarantees that you can say something without fear of retribution, who the fuck told you that? Are you making this shit up in your head?? Nobody is preventing Eich from persuing happiness or from speaking out about his homophobic views. He volunteered to step down as CEO, he was not coerced in any way. I think what you said is full of shit and I will downvote you for it. There's some retribution for you.
&gt;The error was that the data contained the Mozilla foundation alongside his name which made people think the donation came from Mozilla and not Eich personally You seem to know as much about the law as you do about free speech. You also seem to be making shit up to support your argument. It's really time you sit down and shut up about this.
So... the problem you are having is that the code inside your loop is taking too long to execute when you have 1000+ elements in the loop? To solve this problem then, you are going to have to iterate over portions of the data set instead of the entire data set in an asynchronous manner (chunking). You could use promises or setTimeout, I've created a jsbin here to give you a very naive implementation of how this might work: http://jsbin.com/nupoj/1/edit?js,console As you can see when you press run, it takes about a second to iterate over this set, you can try playing with the executionTime and pageSize variables to tweak this to your codes needs. 
&gt; Freedom of speech is a phrase. It means you are free from retaliation based on giving voice to something This is so much bullshit it is just batshit crazy. You clearly have absolutely no clue what the fuck you are talking about! Ok. Let me make this clear for you. [http://en.wikipedia.org/wiki/Freedom_of_speech](http://en.wikipedia.org/wiki/Freedom_of_speech) *" Freedom of speech is the political right to communicate one's opinions and ideas using one's body and property to anyone who is willing to receive them."* *"The right to freedom of expression is recognized as a human right under Article 19 of the Universal Declaration of Human Rights and recognized in international human rights law in the International Covenant on Civil and Political Rights (ICCPR). Article 19 of the ICCPR states that "[e]veryone shall have the right to hold opinions without interference"* **"without interference" does not mean without retaliation.** I think you are confused about what free speech is. Nobody is interfering with Eich's freedom of speech. He is still free to donate all of his money to whatever cause he wants to. I think you seriously need to do some reading about the history and meaning of "freedom of speech" instead of shooting off your mouth and embarrasing yourself. 
His free speech was never threatened. Users and colleagues exercised their free speech as well and he stepped down. Homophobia-phobia is a good thing. Like being prejudiced against racists. If he had donated to a group for pro segregation there would have been 0 discussion or silliness calling this 'political differences'. He was and still is an opponent of full equality and calling it just 'political' is silly.
Awesome...although the fan on my ancient work PC now sounds like a jet engine!
If you say so buddy. If you truly think society and politics as re wholly unrelated entities that have no bearing on one another....that's your opinion.
This is exactly why powerful business people and politicians tend to be type-A or simply psychopathic individuals. Instead of the most capable people, who almost certainly have some controversial views or at least lack public tact, we collectively decide to hire the kind of **people who spend their entire lives cultivating a public image** to maximize public appeal so they can gain the most public-facing power. People wonder why corporations screw humans and politicians don't give a damn about the people they govern. We require them to be perfect. **Only the kind of people who audit and maintain their own perfection routinely make it to power**. Do you think people like that dwell too long on ethics or on their engineering discipline or otherwise make the *right choice* when weighing power or wealth vs. people, science or anything else? It's a perfect example of insanity and self-destructive behavior for our society to behave this way. The most capable people should lead, even if people are offended by their beliefs. Thanks to the outcry over this, instead of a capable engineer and open source leader running an engineering and open source company, our society has sent yet another strong signal that **we prefer to have politically-correct squeaky-clean shills in power.** Nothing changes.
What? I didn't say anything about the law....that's just what happened in the case with some bookkeeping gone wrong and the fact that this is open data. It looked like Mozilla was the donor but it was a personal donation from Eich.
No your personal donations don't automatically get tied to your employer though which is what happened here. 
Brandon Eich privately donated a measly 1k to a group in support of proposition 8. I think we are taking the ramifications of that speech a bit too far here. If not, a massive part of the higher ups in large industries in this country are in trouble. Part of this is "Our backyard" I think. 
The man is an internet tech superstar. So what he made a unfortunate choice once, that is only human. People do worse shit all the time, including CEO's, presidents and everybody else. He exercised his freedom, and was honest about it. It is the grudge mob that is offending me more. Over-reacting and politicising is the scourge of modern media.
The self documenting code is easily understood and shows attention to detail. Nice work.
Intolerance and dismal of diversity are ugly things regardless of the justifications. &gt; Like being prejudiced against racists. Being racist against racist is still racism, and it is not helpful either way. &gt; He was and still is an opponent of full equality and calling it just 'political' is silly. It is just political. Liberty is a necessary precursor to equal protection unless you fashion totalism (nazism). This entire issue is an abuse of liberty: http://ebooks.adelaide.edu.au/m/mill/john_stuart/m645o/chapter2.html
This subject is blowing up on Twitter: https://twitter.com/search?q=%23firefoxboycott&amp;src=hash
If you are developing for touch UIs, I'd also recommend checking out [topcoat.io](http://topcoat.io/) it is a CSS framework built around speed.
Some of these are quite obscure, it would be nice to have explanations. 
I was initially disappointed that he got railroaded out of his job because of a personal belief. But if you put it into a different perspective, such as what if he donated money to a group that espouses any other bigoted belief - such as white supremacy or neo-nazis or all kittens must die. Is it okay then? His personal beliefs about gay marriage may be socially acceptable at the moment, but he's still a bigot. There are consequences to actions, and this is one of them. Instead of apologizing and saying he made a mistake (which he didn't do) he resigned. Nuff said there. 
 self Is for scope correction. this Wouldn't work at the tail end of your code example (self.someOtherMethod()). If "this" were in place there (this.someOtherMethod()), "this" would reference the someEl dom element. The **"self"** reference (note the comment): anotherMethod: function () { var self = this; this.someVar1 = 'whatever'; // is it more cost-effective to use self.someVar1 = 'whatever'??? this.someVar2 = 'whatever'; this.someMethod(); this.someEl.addEventListener("click", function() { //"self" is a reference to anotherMethod self.someOtherMethod(); }, false); } The **"this"** reference (note the comment): anotherMethod: function () { var self = this; this.someVar1 = 'whatever'; // is it more cost-effective to use self.someVar1 = 'whatever'??? this.someVar2 = 'whatever'; this.someMethod(); this.someEl.addEventListener("click", function() { //"this" is a reference to someEl this.someOtherMethod(); }, false); } **self** allows nested functions to access the parent/containing scope. You might also see the following out in the wild, which is doing the same thing (scope correction): var that = this;
I really don't think it matters. In JavaScript, objects of any type are assigned by reference. The only memory you're using is the memory taken up by the reference. In web-stack JavaScript development, I think you'd be better suited worrying about common choke points such as DOM manipulation efficiency instead of minutia such as this. Example: [https://developers.google.com/speed/articles/javascript-dom](https://developers.google.com/speed/articles/javascript-dom) Personally, I use standard keywords and conventions until forced to do otherwise, meaning that I will use "this" until it is impossible to do so any longer. Code coloring in modern IDEs is a big factor, as is readability. The only thing I would have done differently in your case is that I would have put the "var self = this" assignment directly above the function in which you use the "self" variable. Collocation eases the maintainer's search for new/unknown variables when they are encountered.
The short answer is, you *shouldn't*. Attempting to sniff particular browsers broke big parts of the web in the past (and still continues to this day). What you should be testing for, in the few cases that you need it, is *capabilities*, but if you're in a beginner Javascript class, then at this stage you either shouldn't be there yet, or you should be abstracting it with something like JQuery. If your teacher is starting off by parsing the UA string, then I suggest they're a bit behind the times. The only time you should need to collect specific browser types is for statistical purposes - "our site was visited by 30% IE, 30% Chrome etc", and even that's only useful in a few marketing or "'net-interest"-type scenarios.
The line that assigns `var self = this;` would generate absolutely negligible overhead (like, a couple ticks). *Accessing* properties via `self` or `this`, there's no difference whatsoever. `self` and `this` are both just variables that exist in the scope of the function. The same exact steps are done, just at a different spot on the stack. Worrying about performance of `self` vs. `this` is wasted effort, it will never be your bottleneck. It's more a question of correctness and clarity.
Mostly true, except that what "this" refers to depends on how anotherMethod was called. For example if you invoked anotherMethod like so: someNamespace.anotherMethod(); than "this" would refer to someNamespace, not anotherMethod.
Nnnnooo...? Seriously, I could use some pointers on appropriate style for this app. I'm unhappy with the default buttons, the main table needs multi-column sort feature, not sure what font is good for the descriptive blurb. I'm looking for constructive criticism...
[https://yourlogicalfallacyis.com/strawman](https://yourlogicalfallacyis.com/strawman) Yeah kinda, if you rely entirely on other people's javascript to make you a good javascript developer. You're not a good javascript developer. You might be really good at using angular directives or super awesome at using jquery animate? But what if I told you we need to ship a project for raspberry PI or chromecast with a footprint of less than 100kb that should implement MVC, templating, dependency management, DOM traversal, etc that's extremely performant. 99% of devs would just shrug and walk away.
Not publicly expressing your controversial opinions does not make you a psychopath. Many developers generally do not talk about religion or politics, because it can only make things worse. The next time you discuss something technical, this crap will leak into the opinion-forming process. Some people will now be more likely to agree with you while others will be less likely. Either outcome is unfavorable.
Within the *someMethod*, *someOtherMethod* and *anotherMethod*, *this* points to *someNameSpace*. The reason you use *self* in stead of *this* inside the listener function is that *this * does not point to *somenamespace* anymore, but points to the event. Try *console.log(this)* inside the listener function and it will show you the event object. *self*, however, still points towards *someNamespace*, so you can use it as a substitute. There is an alternative to the *var self = this*, which is function binding. Each function is bound to an object, to which you can refer with *this*. You can, however, bind the function to another object (in this case, *someNamespace* using *.bind(this)*. this.someEl.addEventListener("click", function() { this.someOtherMethod(); }.bind(this), false); The binding with the event is lost, though, so you can't get any information about the event anymore. This is no problem for some events, but it breaks functionality for keydown event listeners which check the key, for example.
The question you pose is not the right one. In the example you provide it would be silly to use `self.someVar2` vs `this.someVar2` ... When you are in the same execution context where `this` is what you need then you use `this`. The `self` var comes into play when you are not in the same context, like for example inside the callback that you rightly use `self.someOtherMethod()`. The reason you would want to use `self` over a `bind()` method is purely because not all implementations of `.bind()` are optimized. Read more about this [in this SO question](http://stackoverflow.com/questions/17638305/why-is-bind-slower-than-a-closure/17638540#17638540). Once all implementations have ironed out the `.bind()` method, then there should be no performance gains to using `self` and we can put it to rest for ever.
&gt; Knowing what browser your client is using will indicate which features you will be able to use, No it won't, unless you've got a huge table of browser versions vs capabilities. Knowing what *features* the client has is the thing, as your code shows. You wouldn't want to implement functions like "SupportsLocalStorage()" with a huge bunch of "return( Webkit &amp;&amp; version &gt; x.y ) || (IsIE &amp;&amp; version &gt; 5 &amp;&amp; !WinNT) || (Gecko &amp;&amp; version &gt; 1.2.3) etc. You test for the existence of the API, or try { localStorage.set/getItem }catch {} or whatever.
You're right -- I rushed my answer and made a fool of myself there. Sorry, and thanks for clarifying.
Their feedback isn't great at the moment: https://input.mozilla.org/en-US/
One reason for assigning `this` to another var is that minification cannot rename `this` because it is a keyword. If `this` is assigned to `self`, `self` can be shortened. Take the following code: function doFunStuff(something, somethingElse){ this.something = something; this.somethingElse = somethingElse; this.asploder = new Asploder(); // nonsense! } doFunStuff.prototype.asplode = function(){ // more nonsense this.asploder.asplode(this.something.name, this.somethingElse.id); } Which uglifies to: function doFunStuff(a,b){this.something=a,this.somethingElse=b,this.asploder=new Asploder}doFunStuff.prototype.asplode=function(){this.asploder.asplode(this.something.name,this.somethingElse.id)}; That's a savings of 156 characters. Now the same code with `self = this`: function doFunStuff(a,b){var c=this;c.something=a,c.somethingElse=b,c.asploder=new Asploder}doFunStuff.prototype.asplode=function(){var a=this;a.asploder.asplode(a.something.name,a.somethingElse.id)}; A savings of 204 characters. It's small here, but imagine the savings in a large library like jquery UI. Obviously readability is more important than optimization most of the time, but maybe you're working in a code base that really benefits from that optimization. 
We are free to associate with who we want, and if people don't want to associate with that person, or their business, that's their prerogative. Brandon could go all westboro and his speech would be protected, but that wouldn't protect him from people thinking he is a dickbag and using their wallet accordingly. 
In the internet school of argument, where linking to a page describing a logical fallacy is considered a relevant rejoinder, no one probably would bother correcting these things but I used to teach argumentative writing and philosophy, so I will be happy to help out a bit here. Straw man would imply I was entirely misrepresenting your argument (i.e. building a new argument that did not exist), when in fact, I was merely exaggerating exactly your point (that more devs need to know how to build the tools they're using) for comedic effect. That my core concept is accurate is evident in your admitted 'yeah, kinda.' The way to characterize my response is to call it 'hyperbole', and your best response is to call it an exaggeration. To make this argument, there is no need to link to a website describing 'hyperbole'. You can merely say, "you are exaggerating." At that point, I would say, "yeah, but if we follow your point to its logical conclusion, this is where we'd end up." At which point, then, you could perhaps accuse me of being reductive or consequentialist, or, possibly even overly interpretively strict.
You're confused, I think. When you assign this to a var like self it's so that you have a reference to the original this which can change. Has nothing tot do with performance. 
&gt; I would have put the "var self = this" assignment directly above the function in which you use the "self" variable Good point. I always keep vars at the top because it's how they'll be hoisted anyway. But for readability, your change would be better.
Right. My comment here should sort of clarify what I was asking. I was just wondering if it would save a lookup behind the scenes. http://www.reddit.com/r/javascript/comments/226v14/question_about_using_var_self_this_and_js/cgk0a7i
x.prototype = {/*stuff*/}; That is BAD DESIGN!!! It creates a **new object** which screws with .__proto__ and .constructor http://zeekat.nl/articles/constructors-considered-mildly-confusing.html
Yes but javascript objects are pointers – when you type `var self = this;` you are not creating a new object, `self` is just a reference to `this`. However, when you create a jQuery object, `$('.el')`, you're traversing the dom and finding that object each time you call it. That's why caching the jQuery reference is much faster. You absolutely should be utilizing the first jQuery example and shouldn't worry too much about using `self` in your code. Hopefully that makes sense.
Gzip will probably negate that
That isn't what happened in this case though. One other for profit company essentially called for his resignation so he stepped down to not cause the foundation anymore trouble. This isn't the free market speaking out..and things may have gone very differently if we had actually gotten to see how that played out. Who knows. 
I see you're using Angular, maybe check out AngularUI? It has a data grid with sorting (although I don't prefer their implementation). Also, I would add an explicit button to add a person, it's not obvious to press enter.
Despite what others are saying, there is actually noticeable overhead with closure capture. If you're super perf sensitive you should avoid closure capturing as much stuff as possible. However, for most projects you would probably not care about this perf penalty.
It's not professional discretion that I'm criticising. Its the person that grooms themself for public scrutiny from a young age, whose every decision is first weighed against public perception, who is reluctant to accept or extol unpopular views strictly because it will affect their ambitions. I think that personality is effective at achieving power, but it is not the chief quality of a person we want in a role demanding strong scientific and engineering principles.
Thanks, it is true, is just a demo. You can find the source code at github.com
I respect his right to exercise his rights - but that doesn't mean he's morally right on this issue. People threatening to boycott Mozilla are also exercising their rights. I think Brendan should've evaluated his beliefs and perhaps apologized for donating money to repress the rights of others. 
Save your mental cycles for making sure all of your algorithms are as close to O(1) as possible. For web development, I promise you that almost ALL of the processing time will be used either manipulating the DOM or streaming AJAX. IO always dominates. You may run a test that shows X is faster than Y by some margin, but in real programs it's less than negligible.
275 Lines of Code. 0 Libraries imported. (•_•) ( •_•)&gt;⌐■-■ (⌐■_■) 
awesome!!! :-D
All OkCupid did was was raise awareness (and I do think they kinda went overboard, but whatever) and people spoke out. 
Granted, but PHP is still 10 times the dumpster fire that javascript is.
They asked there users to boycott all products from a non profit...
Your view is somewhat inverted. You have to go out of your way to make things public and to create an image of yourself. Sharing your opinion is something you have to do yourself. It's not something you are, it's something you do. It's your choice.
And people willingly agreed to do so.
This is book that I am using http://www.amazon.com/The-Book-JavaScript-2nd-Edition/dp/1593271069 What source do you suggest, for the latest method being used?
And I'd wager to say the same spot actually. This is an object as well and thus a reference type. So, when you assign this to self you are just assigning the reference and therefore effectively the same thing is looked up. 
It's not because this is a reference as well. The only cost you incur would be the assignment of the reference to self and a new node in the object memory graph (I can't say for certain how that'd work but I assume self would just be an internal alias to the reference. Certainly it's not like an extra copy of everything this references is put into the scope chain). 
Interesting note to add is that while I don't think there is any performance cost to what you mention I did once see a situation where .bind () used to set the context of a function was causing a massive old generation gc pause in Chrome whereas using self to reference it didn't cause the same problem. Probably very specific to the context of the code but it was interesting. 
Wow, that is great!! I am currently making my own text-adventure game for an school project. If it isn't to much to ask, would it be possible for you to take a look at mine? There are some bugs in it, and it currently does not run, but i'd love to hear some idea's on why it wont run, because I cannot figure it out for the life of me.
I am using a pretty old book. http://www.amazon.com/The-Book-JavaScript-2nd-Edition/dp/1593271069 Published in 2006.
`this` and `self` are references to the same object, but the two references are located at different spots on the stack. Which is why you could later set `self = 'foo';` and it wouldn't change the value of `this`. :)
That would only be true, if the 'this' we care for would be inside the function body. It is however in the body of an anonymous function, that we pass to the click event. That function will be called somewhere else, and will carry whatever its caller decides to.
Thanks!
NV.D3.js?
Everyone has a public face. I just think someone principally concerned with managing their perception to suit their ambition is less likely to serve as a capable leader than someone who focuses on their work and is less concerned with their perception who may have some known controversial views because of it.
Exaggeration is by definition a form of misrepresentation. The "yeah, kinda" Was my way of saying "Sure if you accept the premise that if being able to use code other people create makes you yourself a good coder, then what you've said is valid...but I don't". I linked to the website to point out that you were misrepresenting my argument and though that misrepresentation implied (comedically or not) that it wasn't very cogent. But you're correct, I could have said "you are exaggerating", but that doesn't carry with it the implication that what you've said wasn't really refuting what I'd said, but refuting an exaggeration of what I'd said. Of course there's no need to link to the website, but for that matter there really isn't a need for either of us to engage in this discussion. When it comes to the internet "need" is a pretty meaningless term. And you could say "this is where we'd end up" And I'd bring up slippery slope, and then we could argue the proper application of that term. And then at some point we can bring up Nazis and the internet will have claimed two more victims. In any case, I think we can agree that the more skilled developers there are who are capable of creating or at least understanding useful tools, the less time folks like you and I have to explain to some idiot that... for (var i = 0; i &lt; divs.length; i++) { $(divs[i]).css({ "top": (i * 20) + "px", "left": "0px", "width": "100px", "height": "20px" }); } ...makes things shitty for everybody.
&gt; self is just a reference to this. Even less than that in fact. `self` is a reference to the *same space* that `this` is a reference to. Using either is therefore wholly equivalent [edit: performance-wise].
Yep, I would say so. Binding 1500 elements with Knockout can really hurt your sites performance. [Here is something](http://stackoverflow.com/questions/2402953/javascript-data-grid-for-millions-of-rows) that might help you get started with handling big amounts of data
Thanks. I'm attempting to learn Knockout with a real project, and when I saw the spike, I figured it just might be a fundamental idea. I just wanted to make sure. I'll probably take this in an entirely different direction. I don't need to see the grid at all I don't really think. At the very least I want to ask the question.
&gt; but prefer performance over simple readability Never sacrifice code readability for minor performance tweaks where it is not absolutely necessary.
No the reality is people who were already not using Firefox continued to not use Firefox rofl.
Well right that's probably the best way to say it. They'd reference the same memory on the heap but the pointer to that memory in this and self would be stored separately on the stack. Right on.
Some people vote against things they fear. If Brendan feared that his kids or grand-kids would turn out gay, because you know - all the gay propaganda in the schools, or whatever was being presented by the political right to scare the people into voting (as it happens when the politicians manipulates the church goers to get votes), the result was - he voted this way. Someone successfully played on his fears for their own ends. Simple as that. Ignorant? Yes! Deserving backlash as if he's Satan or Hitler in the Incarnate? Don't think so.
I'm glad we agree.
though .bind does often have a performance hit
Looks good!
My recommendation is to not do OOP in this language.
That is an insanely old book in web development time. 
The function you pass the anonymous function to can invoke it however it wants.
One time one of our customer relations people asked me if there was a difference and I started saying something like "well java is a classed based language whereas javascript allows you to use the functional...I'm sorry...If someone calls and asks something like that just know they are completely different things and it's OK to disable java, but never let them disable javascript".
I would just define the Entity class separately, instead of as a property on Engine. If you really need it to be private, define both Entity and Engine in an IIFE and only expose Engine: (function(){ // "var" makes this class local. var Entity = ... // "window." makes this explicitly global (just for clarity). window.Engine = ... })();
Ahh, that makes everything much prettier. Thanks!
Where do you people find these ancient books? What's wrong with online material and courses?
to my knowledge (and I could be wrong off the top of my head) but I think knockout renders as soon as the model (array) is updated. So if you push a single value 1500 times it will crush the browser as it inserts over and over and over. What you can do to ease the rendering hit is take the new data and make a new array and then set the bond array = to the new array so it's one big insert. This is one of the biggest differences between knockout angular and ember. I think angular actually waits 4ms between model changes before rendering to make sure there are more on the way to reduce com manipulations. EDIT:[This video](https://www.youtube.com/watch?v=mVjpwia1YN4) does a spectacular job breaking down some of the key differences. IMPORTANT PART is at 8:45
FYI, you don't need to use hasOwnProperty for arrays. Only for objects. And in modern JS, there is Array.forEach(). As for inheritance and OOP... I was in the same boat as you, wanting to do things properly but not quite seeing how to map things onto a clean architecture. I was much more comfortable just writing procedural code. What set me on the wrong track was to try and create objects for the major parts of my program. i.e. To have an "object engine" and a "sound manager" and a "graphics layer". For sure, you want to divide stuff up at a high level, but it's not enough. Even your core engine is several different things. You have a model of objects with properties (entities). You have some simulation logic to evolve and change those properties (spawn, kill). You can trigger events (onupdate, onkeypress). And even those can be divided. Only objects that animate need update events. Only objects that are interactive need to respond to keys. You may have any number of such 'traits' that objects can have, and trying to fit them into a single class hierarchy is difficult. You can try and solve this with mixins, composing your classes on the fly, but you end up with a list or tree of objects that each double as models, controllers, event queues, etc. When really, you want a list of data, a loose set of controllers to modify it, and clean and centralized event dispatch. It is better to follow the Lego approach. Each real-life "object" can be a little cluster of objects in code, connected in a simple way through minimal interfaces—just a handful of properties or methods. e.g. If your object is interactive, have it listen to events from a single "interaction" manager. Which key maps to what should be the manager's responsibility, it is not something the objects themselves should directly care about. They shouldn't monitor 'on keypress', they should monitor 'on command'. A benefit is e.g. that if all your data is separate from the objects that manipulate it, then suddenly loading and saving games becomes much easier.
Are you asking for a real world example of using math? This isn't even a coherent question. Are you one of those people that has always just shaken their head and said, "Oh.. No, no... I'm bad at math."?
http://eloquentjavascript.net/
It's worth mentioning that mobile Chrome v32+ doesn't have the delay anymore (and the library deals with that) for zoomable pages. Non-zoomable have been dealt with in that browser for a while. iOS Safari won't get fixed any time soon due to the double tap being a scroll event in that browser. So this is mainly for older browsers like Android stock / iOS. On a related note, you can disable the delay in Windows Touch devices by including touch-action: none; in CSS (plus the -ms prefix as well to be sure) on the html / body selector to try for a bit of homogeneity (the script checks for that as well)...
Yep, definitely helps and makes sense. Thanks.
And if you have someNamespace.anotherMethod.call(this) the scope is again different.
&gt;There is the more practical use case of using the variable inside an event handler where this would become a different object altogether due to scope. Aye. In OP's example, `this` (and therefore `self`) would usually (eg without `bind()` or `call()/apply()` overriding it) refer to the `someNamespace` object, whereas a `this` inside the closure would refer, at calltime, to `someEl`.
You don't get it. There is a HUGE difference between donating for some self serving political issue—get more tax breaks, reduce regulation on their business, etc.—and ***donating money to deny an entire class of citizens their constitutional rights***. Why is that so hard to understand?
Hm, so by overriding the prototype it adds a whole other level to the lookup chain. Probably not a good idea to do that then. Other than that it still functions exactly the same. Thanks for the info.
just to emphasize: $ is a function that is defined by jquery. it is not javascript syntax. So the reason to not use it multiple times, is because it is a function call that does complicated stuff. e.g. function bla() { // do some complicated stuff and return an object ... return { test: function(){} test2: function(){} }; } then if we call it like this: bla().test(); bla().test2(); bla will be executed twice. But if we do this: var b = bla(); b.test(); b.test2(); bla will only be executed once. Because bla is an expensive method, the second snippet is better because it will only be executed once. With `var self = this;` you are not executing a method, but just have an assignment. Assignments are extremely cheap computing wise so you will not ever see that come up as a problem. The reason why a lot of code does have that line though, is because of closures. `this` is a predefined variable that points to the object on which the method is called. Because of that `this` can't be pulled into a closure because it will be overwritten by the caller. To work around that a lot of scripts assign `this` to a local variable called `self`(or whatever they want to call it) and use that in the closure instead of this. This you see in your example. `self` is only used in the event listener callback. In the anotherMethod function itself it uses `this`.
YES. READ MORE DISCWORLD.
If this runs frequently, you can optimize that by doing `this.someOtherMethod = this.someOtherMethod.bind(this)` in the constructor, and avoid the `bind` call each time you call. This can even be better than `var self = this` in some high performance situations, because `var self = this` requires the function literal to allocate a closure, which increases GC pressure. OTOH calling a bound method is slightly slower, and theres no guarantee that a bound method wont allocate when it's called. My experience is that it depends on the implementation. (Which is fine, as I usually am using v8 bundled in a larger app, so I don't have to worry about other implementations so much).
From a teaching standpoint, I think it's more beneficial to know what's happening behind that framework. I'd probably build the whole thing from the ground up. Getting a simple "game loop" is only a few lines of code. Even if you started with that, so they have a better understanding of the connection between animation loops and the canvas, and then moved on to a framework might be a good idea.
For some reason I hate var that = this; But I saw someone do this at work and it's my new favorite: var _this = this;
Word of advice after spending a ton of time building a WYSIWYG editor for mobile while using Fastclick: Attach it to the elements that will be clicked, not document.body. Otherwise you will run into some freaky bugs on iOS (not really Fastclick's fault though). Also: don't build a fucking WYSIWYG editor for mobile.
Writing a response give me some time (I am probably gonna stop to get dinner before I post it). Just wanted to put something so you don't feel like you are being ignored if no one answers by the time I do.
/u/radhruin is correct, but the difference is negligible. JavaScript walks up a tree to discover where the variable is defined, and this takes cycles. Don't really worry about it for performance though. One thing you should think about, however, is how the various JavaScript VMs clean up memory from closed variables.
Oh wow. Thank you. No rush, at all. Take your time.
http://jsfiddle.net/SALVr/ Let me know if you need help with your exercise. I am going to make sure it can actually be done and check if there are any bugs &gt;.&lt;
I must be one of the few people that has had nothing but trouble whenever I try to implement fastclick. In one app it was buggy in conjunction with Google Autocomplete (causes Autocomplete to fail to work), and in another it caused a double-click to be fired on some mobile browsers which is worse in my view than the 300ms delay. (I wasn't the dev for the second, but I believe it was because the app was listening for touch and click events (on the same element) and that was not possible to change because of other things.) I'll probably keep trying to use it, I hear it's integrated into the latest version of Foundation, for example. But so far, it's been nothing but a headache.
I will. I'm taking a break for the evening, but I'll give this a try in the morning. Thanks for the help.
I don't think there should be a performance difference between self.foo and this.foo in the same function, since they are both local variables. What will impact performance is identifier resolution that traverses the scope chain (referencing 'self' in closure). I am not sure how to avoid this since this is the whole point of scope correction.
Well, I hope it does!
[Here's](http://codepen.io/baileyburritt/pen/JzEmA) what I'm working with. It's a joke interactive thank you letter for my wedding reception. I'm still getting all the content worked out, but I want to get the functionality down as much as possible first. So, they get the link, and the show up to a basic page, pretty much as is, and they input all the variables I ask for, and they get a heart felt computer generated thank you letter. Thankfully our family have a sense of humor, and realize I'm a huge nerd. I just want them to not have to click on the input form every time they advance. I'm still learning. And realizing I know so much less than I had originally thought. So, I thank you for helping me out with this personal project. 
How does android avoid this? Is their design missing the double-click?
I just tried it in iPad mini retina iOS 7 and see no special performance improvements over Bootstrap or Foundation. The benchmarks only show Nexus. Have you used it on mobile Safari?
Thank you for this thoughtful explanation. I'm sort of in the same boat as the OP, I've read plenty of resources that explain the technical execution of OOP in Javascript but not so much the less tangible aspects that you described such as how to conceptualize the code.
There's a review there from 2007 saying how outdated or is...
I believe that it's something to do with the inherent difficulty in detecting a "double-tap" on UI screens (primarily for zooming). Once a user "clicks" a screen, there's no other alternative for checking if it's a double-tap than to wait a certain length of time before actioning the first click. I think in the latest versions of mobile Chrome, they've simply removed "double-tap zoom" - http://updates.html5rocks.com/2013/12/300ms-tap-delay-gone-away
Thank you for this. I've been trying to read up on some Module Patterns for Javascript and honestly I was a little intimidated by [this](http://addyosmani.com/resources/essentialjsdesignpatterns/book/). But this bite sized post was really clear and to the point. 
Hi, I was looking for something similar to what [webpagetest.org](http://www.webpagetest.org/) provides. Particularly taking screenshots while your application loads into the browser, so you can get visual report of what user observes accessing your app. So I implemented Grunt task for that. It works fine, but still it's WIP. Currently you can throttle downstream and upstream connection as well as set custom latency. Also there's a list of predefined connection type profiles, like 3G, 4G, Fiber, etc. Basically you provide desired connection setup, target url and this will take a set of screenshots while loading. Optionally the task can generate GIF animation, just make sure you have imagemagick installed. Also you can set viewport size (screenshot size), this is useful for testing responsive design and the overall performance in combination with mobile-like network profiles. Any suggestions, improvements and PRs are welcome!
I'm pretty sure V8 aliases outer scope variables after the first lookup anyway.
Quick comment - I may be wrong, but it sounds like you might think variable initialisations are hoisted, but they aren't. Only declarations are hoisted; all that means is that a var called early will resolve to *undefined* rather than a referenceException. I don't think it's all that great to shove all vars to the top of a function; the only reason that's a convention is because C compilers used to require it.
It's worth remembering that quite a few JS engines these days will alias lookups to outer scopes, and I suspect V8 might even do it AOT. So the difference shouldn't even cone into play.
Both are pointers to a map which will be traversed (pretty quickly if it's a hash implementation). Neither will make any difference to 'caching' or 'lookups'. However, using 'self' in the way you describe will mean that the event handler will do a scope walk, though this is pretty much unavoidable if you want to make the handler respect the context of its assignment. Plus, scope lookups get aliased by JS engines anyway.
My recommendation would be D3. It has all sorts of beautiful transitions with no jQuery including sliders. It takes a little getting used to (I'm learning it now), but there are tons of great examples and the end results are really nice. http://d3js.org/
&gt; alert('Off to the Book of JavaScript!'); That's your JavaScript. Try onclick "example();" And in your &lt;script&gt; define example = function() { //do something }
So I think I heard two questions in there. First, why does onClick work? The answer to this is that your alert is in fact JavaScript and it's being executed on a JavaScript event handler. The onClick attribute of some HTML tags is interpreted as JavaScript even though it's not explicitly defined within &lt;script&gt; tags. If, for example, you wanted to use onClick="myFunction()" then myFunction would need to be defined within &lt;script&gt; tags, but if the onClick script is self-contained than you're good to go. The second question was why do both onClick and the link work? Both are independent event which happen on click, so they both still happen. I'm not entirely sure what determines the order (though I'm not surprised the JavaScript fired first), but both events are bound to the &lt;a&gt; tag.
Yes, the JavaScript fires first. You could even do a _return false_ in the onclick handler to cancel the default action. That is, to cancel the link from actually going to the URL. This would essentially be a dead link: &gt; &lt;a href="http://example.com" onclick="return false"&gt;link&lt;/a&gt; 
Yeah event attributes are generally Javascript, as are (by default) script tags. You can place any JS you like in an onclick; `onclick="for(var k in this) if(typeof this[k] == 'string') alert(k + " = " + this[k]);"`.
It works because the alert() method is part of the standard and is available in virtually every browser. If you try to call a non-standard function, meaning one you've created, but it's not defined in a script tag, then you will throw an error. Also, JavaScript itself isn't something you define or have to import into a page. It's an engine that loaded and available in browsers.
I take it day by day.
So there's no point in minifying beforehand then?
You should call preventDefault on the event instead of returning false. The latter is deprecated.
Minifying is still something you should do, because it is lossy, whereas zip must be lossless - the decompressed output must be exactly the same as the input. Zipping won't remove things like whitespace or comments, and some minifiers like the Google closure compiler can even prune redundant code. Zipping can't do that - it can just replace long strings of text with substitution symbols, maybe spot a few patterns common in certain types of files. However, what zip *can* do that minification cannot is perform substitutions on keywords and operators (e.g. replace all instances of the phrase "function(" with a symbol). And that's why, for production, you should use both. In fact, because minifying makes a file more 'uniform' (cases like "function(x" and "function ( x" are replaced with the first, shorter version), minifying first makes gzipping even better, as there are fewer symbols to replace.
If you want to stick with JS' semantics, I'd either use ES6/Traceur or TypeScript. OOP in ES5 is too annoying because everyone is doing their own thing. As a direct consequence, your tools also don't know what's going on. It's very inconvenient. Everything works much better if there is one standardized declarative way to do it.
The lightbox plugin thing really needs to stop 
Just curious, why no jQuery? 
Why do you prefer d3 to jquery?
Do you have an example of one of the reports?
Here's one [http://imgur.com/SZ7Vwn8](http://imgur.com/SZ7Vwn8). This GIF made from 9 taken screenshots using 2G network profile. The application here is bootstrapped angular-fullstack with Yeoman.
My only complaint is that the items are case sensitive in commands... Otherwise, this is awesome!
Granted, learning about "classes" right now may confuse him, if learning OO javascript is his goal,
Detecting browsers is useful if, like Google, you're only supporting recent versions of browsers. I no longer support IE9 or Safari 5 on my sites. I _could_ use feature detection to warn my users, but considering that my sites are **guaranteed** to break in those browsers, why try to detect all 20 features when it's easier to just warn if their browser is old? Usually, I get the response of "what if they're using an obscure browser?". In that case, browser detection doesn't work. But considering how few of my sites users will be using an obscure browser, and the chance of somebody using one already knowing the pitfalls of using it, I don't really care. TL;DR: browser detection used to be taboo, nowadays, it's not that bad. Just make sure you're aware of and accept the downsides of using it.
Upvote for mentioning the layers here. I think new comers get really confused by the interaction between all of the moving parts. It's hard to immediately understand that javascript is just a language that the browser makes apis available to through the dom. I think node is helping there thoug.
I don't prefer D3, they both have their own uses. In my current project I'm using both.
Well, you should avoid onclick handlers altogether and use addEventListener instead. 
Not necessarily.
I am adding a slideshow to an already built web-app and don't want to load the jQuery librairy solely for this purpose.
Thanks for the sugestion but I am affraid that d3 would be "too much" only to build a basic slideshow...
One other possible consideration with an extremely large insert is to put it in something other than a table (if it gets updated periodically). Tables are essentially the only case where the internal engine may actually need 2 passes to relayout and repaint. This could be extremely costly in this case. It sounds like what you are doing is going to cause a large relayout anyway (I.e. It's unavoidable there so you don't have to go to great lengths to remove the table I just wanted to mention it as a consideration). I just think it's always important to remember how you'd approach the problem of you weren't using the framework because the same browser performance gotchas are still there. Either way, binding that many elements with knockout will become slow. Think about mobile! If you can find a way to do it incrementally you should (consider for example whether a real user actually *needs* access to all 1500 items straight away. There are tricks to make them *think* everything is there when it's not)
 "paper"); { ... "rock"); { Semi-colons should not follow the condition. There is also at least one missing bracket. I leave that for you to debug.
I thought it was just playing an audio file, but it appears to be created in the browser using the AudioContext. If I'm correct, that some cool stuff.
Found it. Cheers. 
Indenting 4 spaces will give you code formatting. How many books are we talking about? The trade off between memory consumption used vs. Improved performance through caching is an age old problem. The best thing to do is try both approaches and do some testing with the development tools to find out which approach is the most performant. Buffering the data you've received with each page click may prove to be the fastest and a good compromise but that's why it's so great we have the tools we do for front end development. 
All I hear is stuttering static. Chrome ver 33
Lags terribly in Firefox. Chrome played it fine, though.
Try refreshing. Pretty sure cos it uses Math.random BTW, no I didn't make this. Not sure where I found it from, originally I was reading [Recreating the THX Deep Note](http://www.earslap.com/instruction/recreating-the-thx-deep-note).
Not really, because WinJS is just acting as a layer between your app and the core. What you build on top of WinJS would work, but you need to use each devices backend in someway. My comment was aimed at the guy who thought it was for web pages and was complaining about browser compatibility.
Maybe I'm dumb but I have no idea what I'm doing. Also it seems that the directions for left/right clicking are backwards.
Awesome. I was looking into Travis-CI just couple of weeks ago. I would love to give this a try.
I don't know if this is something you're targeting but if your array is changing constantly then you can actually control the rate of limit to notify the subscriber. `myViewModel.myObservableArray.extend({ rateLimit: 50 });` [Source](http://knockoutjs.com/documentation/observableArrays.html) at the bottom.
Sorry that the directions aren't totally clear. The goal of the game is to break up each triangle into its primary colors and move those colors to their respective corners. When breaking up a triangle (right click) the primary colors of that triangle pass through the border of the same color into the adjacent triangles. Keep 'moving' the color from one triangle to the next until the color reaches its respective corner. Each split counts as a move and you should try for the minimum number of moves. Thanks for the left/right find.
[This excellent book just came out](http://jstesting.jcoglan.com/). It's a little pricey for an e-book, but it's very very very worth it.
http://www.codecademy.com/tracks/javascript
Looks like fun. I'm going to give this a whirl and see if I can contribute some code to track code coverage and benchmark results.
Crashes every tab in the window it's opened in -- cool! Chrome 33.0.1750.152 
yauh is the site being linked...
Works great in alien blue's built in browser. 
Then it worked!
Honestly I used to be the same. I started adding tests to my work project in Node, and I haven't looked back. Mocha and Should. Use Nyan test reporter. Success.
I have an *extensive* screencast on test-driven development with JavaScript: http://www.letscodejavascript.com (Full disclosure: it's subscription-based, but worth it.) JavaScript is both harder to test than other languages, and no different. It's harder because you're almost always testing UI code, you've got to deal with the DOM, and you've got cross-browser compatibility issues. It's the same because you're still doing basically the same thing: setting up your test environment (in this case, by creating the DOM elements you need), calling your production code (sometimes, by firing DOM events), and making assertions about the results. The skills you need for testing JS are the same skills you need for any language: working in small, incremental pieces, keeping your design clean, and sweating the details. I have a blog entry about the tools I recommend for JavaScript, including testing tools. It's here: http://www.letscodejavascript.com/v3/blog/2014/03/dependency_recommendations 
Poorly worded yes..... For example the one formula they showed was to make 1+2=3 instead of 12. I can't see the use for this or where it would be needed.
That's a stuttering mess. /firefox
Works fine in FF 27 and Chrome 33 on linux, fwiw. 
"There are a small subset if event handlers that can be used inside HTML tags." Alright, thanks.
Sounded pretty good, but there were a few pops, firefox 28 / chrome canary 36 - 4core i7 probably helps.
I created a port of a simple skiing game from the 90s using JS: https://github.com/basicallydan/skifree.js the code is all there. I used no frameworks, just Canvas. IMO it's a fairly good bit of code but I look at it now and see few oddities since I wrote it over a year ago. Also there's lessmilk games, by a chap named Thomas Palef who puts all his games on his site lessmilk.com - http://www.lessmilk.com/3/ is boxjump and is really simple. He doesn't appear to link to code anywhere but if you do the good ol' fashioned viewing of source you should be able to find it fairly easily. He uses a framework which does a lot of the heavy lifting as far as drawing and loops are concerned so you might want to check that out.
This looks pretty exciting! I'm gonna try and find some time to deploy it on my server. Nice work :)
Sounds like an example would help get you pointed in the right direction. Check out [wellTested](https://github.com/lazd/wellTested/tree/phantomcss) for a dead-simple app that has unit testing, end-to-end testing, visual testing, code coverage reporting, and continuous integration.
Epic :D
Works pretty fucking well considering I'm on mobile Chrome! 
Easy, just put your script tag at the end of your body, just before the closing tag. Tell me if it worked. Always consider puting your scripts after your HTML right before &lt;/body&gt; it'll save you a lot of trouble.
u prolly dont want to start from 0 in game development. I recommend using pixi.js (usin it myself) or try pandajs (looks promising) to do all the nasty rendering work, so you are not forced to dive into all the nasty canvas/webgl apis. Go thru the examples, that should help a lot. 
Mocha and Should are obvious, Upvote for Nyan though!
Yup. Also the "cdnjs suddenly got blocked by China firewall".
Note that if (choice2 === "scissors") { return "rock wins."; } else { return "paper wins."; } is the same as writing if (choice2 === "scissors") { return "rock wins."; } return "paper wins."; 
Shit I really need to rename this page something clever...
1) Your demo has a `debugger;` statement. 2) There are cross-origin problems with the demo, preventing it from accessing https://xkcd-imgs.herokuapp.com/
I'm getting nothing. Sensing a YHBT here...
Needs an id parameter to set a specific xkcd image
Oops! I knew I forgot to do something to the food! I'll amend as soon as possible. ^Currently ^food ^is ^glued ^to ^you
Thanks - yeah I'll take a look, where is it? :)
Sure, will add that thanks.
I am not getting any compiler error.
awesome!
&gt;When I test the above scenario in a self containing page away from the project environment, it works. But in project page, it does not. There's the smoking gun. If the code above works standalone, then in all probability, it's nothing to do with the code above. When you say "project page" - does that include any libraries? Is "popup()" getting clobbered by something else? Have you tried a console.log inside popup to ensure that it's actually being called?
Yes and it is being called and executed but the popup does not show. I used the IE tool to step through code.
Travis CI is open source. If you don't want to pay them to host it for you, host it yourself. Hint: it will probably be more expensive.
You can check the code from my game using firebug. Not a simple game, but most of it is written in javascript. A lot of jquery, too. More than 60k lines of code there. www.nevergrind.com
Needs a 2x speed up.
Hmm, thanks. I already run a pretty big server for other purposes so I guess in that case it shouldn't add much to my existing costs?
Same here in Firefox, works better when the setup is separated from the actual run: http://jsbin.com/wurozesi/1/ 
Just by skimming over the sample chapter I like how the book is explaining all the details. I'll check this book out. Thanks.
Thanks! 
Not my first language. I come from C background and quite frankly I wasn't doing much testing there either, maybe couple of asserts here and there. I agree that testing shouldn't take much time but do believe that it doesn't have to be like this. 
Well that's because there isn't a compiler. JavaScript likes to fail silently anyway.
Yes!! I often learn well by playing with other people's code. Thank you for this.
What justifies google code's existence at this point? Even a sizable majority of Google's own projects are hosted on GitHub.
&gt; Mocha and Should Personally I like Mocha and [power-assert](https://github.com/twada/power-assert) much more. No funky syntax and the asserts are really helpful nevertheless.
Git &amp; Github is where it is at these days, it is a lot nicer to use :) If you're on windows then both TortoiseSVN and TortoiseGIT are very good, they integrate in Windows Explorer (with small icon overlays, right-click menu etc).
Hm, I wonder.... tap with your finger, and then press another finger down, anywhere on the device... that could work? Fuck it........ Apple, it's MY concept, I'm patenting it...... sod off.
Cool game! Any reason why you chose the RGB color model (versus HSB or HSV)? This may just be me, but I find it difficult to conceptually decompose colors in RGB. It's easier for me to reason "brown" as a dark, moderately saturated orange (HSB) than for me to think of it as a mix of 50% red, 25% green and 12.5% blue (RGB).
I'LL also add a link to the original Page, you know, netiquette.
Thanks! I picked RGB because it was the logical choice from a coding perspective, not necessarily a playing perspective. I'll take a look at HSB, maybe it can be a setting.
There seems to be a lot of conflation between pure custom elements and polymer elements. I never know whether there's a polymer dependency when I see "custom element" anymore.
I agree with you there. If you aren't writing an SPA, its' a lot harder to write your stuff out to be testable, sometimes forcing yourself to add test flags. I do know of a few headless browser options you can use with Node to test, but that's a lot of work for not a huge payoff (again, if not a SPA). You might be interested in [Gremlins.js](https://github.com/marmelab/gremlins.js) if you haven't seen it.
On every page I would invite them to do something specific. I typed in 5+5 into the text box and nothing happened. The input box was really small and there was no code. Turns out that there are some issues in Chrome. It makes much more sense in Firefox. Resource interpreted as Script but transferred with MIME type text/plain: "https://raw2.github.com/biwascheme/biwascheme/master/release/biwascheme-0.6.1-min.js". sachinhosmani.github.io/:43 Refused to execute script from 'https://raw2.github.com/biwascheme/biwascheme/master/release/biwascheme-0.6.1-min.js' because its MIME type ('text/plain') is not executable, and strict MIME type checking is enabled. sachinhosmani.github.io/:1 Uncaught ReferenceError: Set is not defined scheme.js:6 Uncaught TypeError: Cannot read property 'editor' of undefined (index):162
Your first step would be to understand how you would craft that particular HTML markup by hand. Once you know what should be output, you can use document.write() to build it for you. I'd recommend using a fixed-width font (like the &lt;pre&gt; tag will do) and you can either end each line with a &lt;br /&gt; or use &lt;p&gt;. A table cell or floated &lt;div&gt;s can be used to contain each "letter".
That's the one I've got! It's nice! I couldn't get github working. I'm a simple, quite dim person. =(
Same here. I was all psyched about it, too!
Here's a free course I did on Udemy: https://www.udemy.com/free-prep-for-html5-game-development/#/ This course uses basic games to teach HTML5, CSS3, and JavaScript from the beginning, and introduces my free HTML5 game engine. Learn these basics first, then decide if you want to use my other course or book to go all the way to 2D web and mobile games. I also have dozens of examples on my site, which you are welcome to even if you don't take the course or read my book: http://www.aharrisbooks.net/h5g/
The only drawback being that you need some code transformation step for it to really work, so it needs to be integrated in your build-process. e.g. for gulp you need gulp-espower apart from the usual gulp-mocha, other instrumentors are documented on that page. 
These frameworks exist because smart people made them. To say they exist because MVC is hard is retarded. To say they exist because people need them to is putting the cart before the horse. 6 years ago people didn't "need" angularjs, but now they "need" it because it exists...not the other way around. We agree there is no point in reinventing the wheel. Nor am I saying that. I'm saying the focus for developers trying to learn should be core principles, not the flavor of the month-automatic-two-way-binding-namespaced-events-mustache-style-templated pile of shiny crap that no one is going to give a fuck about 6 months from now because there will be another one that uses more buzzwords. 
Here's the demo: http://addyosmani.github.io/google-signin/demo.html
Check out some of the [Code inComplete](http://codeincomplete.com/) articles. He writes an HTML5 game, then over a series of posts dives into how it all works. 
$50 for a self-published ebook?
Aye, with SPAs it isn't so bad. I'm writing a PhoneGap application at the mo, so it's an SPA. But I'm concerned slightly about all the custom phonegap stuff that gets injected. I should probably just go ahead and do it, and it'll probably be okay!
Try Chrome or Firefox. I think their dev tools are way beyond IE. Also, when your code fails inside an event, it will fail silently. Wrap the ShowPopup call in the popup function in a try/catch block: function popup() { try { ShowPopup('popupArea); catch(e) { console.log(e); } } The error should appear in your JavaScript console in your browser. 
It's not just you edit: It looks great now!
Are you using Chrome?
Yes.
It would be nice to submit your twitter archive and see similar stats. Other additional stuff that could be cool: * Most used hashtags * Most favorites * Average tweets per day of the week * Average tweets per hour of the day * Filtering replies out of your data * Most mentioned users in your tweets I know of a similar project: http://www.tweetstats.com/ Also: http://favstar.fm/ 
While you can host Travis CI yourself you probably shouldn't. It isn't really a project designed to be used on hardware outside of the infrastructure they created. It's open sourced as a nicety, not as a project meant to be run by a ton of individuals. This being said I haven't put much effort into hosting it myself, outside of pulling down the main gems and already having issues. If you're looking for free and easy I would recommend Jenkins. It isn't pretty, but it works as well as any other CI tool available for self hosting. I've looked at quite a few - Bamboo, circle CI, Travis CI, Hudson and Jenkins to list a few - and while Travis CI is the best in usability, Jenkins won overall in terms of easy setup, ease of use, and customizability.
Oh I'm very familiar with SkiFree! The code is still a little over my head, but I have it bookmarked for when I'm ready to tackle it. Thanks for introducing me to lessmilk, very good simple game resource and I can't wait to go through his flappy bird tutorial. 
http://arcturo.github.io/library/coffeescript/ Is a good place to start, in my experience. Without having looked into it, another guess would be http://autotelicum.github.io/Smooth-CoffeeScript/ Edit: I'm not sure why I thought this was a self post asking for resources, but I guess my suggestions stand.
Perfect! Definitely going to go through this 2048 course on Udacity. Also going to look up some bouncing ball tutorials for starters. :)
Definitely going to go through this Udemy course! Thank you very much, this is exactly the kind of thing I'm looking for.
Perfect, I'll be going through these very soon. thank you
Hack is to Php what Typescript is to JavaScript. 
Go on...?
Nice try, Mr. Coglan.
How important is it to learn coffeescript? 
I just worked on a google signin button for my company and we're also very interested in polymer. This is awesome, I'll check it out
Try adding an attribute to the img elements, something like data-mouseover-src='images/Biohazard.jpg' Get the attribute value in your changePic_onmouseover function, set it as the src if present. 
If you're going to have people do your homework for you at least display an attempt at solving the problem.
Not at all. It's more important to learn to post coffeestrip articles in /r/coffeescript.
Fuck Coffeescript. Seriously, do we have to go over this again? Coffeescript posts belong in /r/coffeescript.
Server side PHP and client-side Javascript are separated by a network. On the network there are bytes. Your problem necessarily presents itself as either or both of PHP mis-interpreting or mis-generating bytes. Therefore I would strongly suggest you debug your problem by looking at the bytes and seeing which of the two parties is incorrect according to your goals. Seldom is it a good idea to focus on the two code components on either side of the wire without looking at the bytes on the wire. It's a much slower process. If you don't know how to look at the bytes on the wire then that is another problem which will bite you in the butt over and over. Generally your browser's devtools are sufficient.
Currently every tile is a single png (any image would work) or an rgba color. However it has quite a bit of logic for handling resizing, so if you stick in a larger image than your set sizes it will handle the scaling on every draw. It uses the same syntax for the zooming. I'm going to look into sprite sheets soon, make it divide each into it's own image and hopefully it will just work the same. Rather than keeping it to one sprite sheet and just doing offsets within the imageDraw.
The php is serving up what it is supposed to, it is the way the includes are engineered to serve up through ?page=, if I change it straight page.php it would work without problem but since it serves up the entire page before the JS can get to it I have to add the extra parameter (page + " .guts") which strips out all JS inside the content being loaded. I know what the problem is, it is just that I can not find a way to fix it, if there indeed is a way to fix it.
There's also Jenkins for CI and you might want to look at SonarQube for static analysis as well. 
Apologies for my ignorance, but am I supposed to know who James Coglan is?
I tend to use tiled for this kind of stuff as opposed to hand crafting it
?
Took a giant step toward solving this problem. I am using jquery tabs. The popup is showing up in the tab that isn't active when the function is called. So after clicking the button, and I click on the other tab, the popup is there. Thanks for all your help.
Unfortunately for me nothing is being misinterpreted I am just experiencing behavioral quirks. Probably due to my lack of knowledge in this area, I have been researching this for quite awhile and have yet to come up with a straight answer as to why it works this way.
I really liked this article by Bret Victor some time ago. http://worrydream.com/#!/LearnableProgramming It would be cool to see some visualizations to run alongside the code. 
You could have ten HTML pages, each with a different problem. Each page will have the question in text, with an input field below and a button. On click of the button check to see that the number in the input is the correct answer. If it is redirect to the next page, otherwise show a message. There will be a little bit of repeated code, but I trust for this assignment the solution doesn't have to be perfect, instead just functional. That would be the simplest way to achieve the result in my opinion. 
Thanks so much! Is there I can do it with only one HTML page that you know of? Like I was thinking doing an onclick that has it so when they click submit, it will check the problem. If it is wrong, there will be an alert. If it is write, I can do document.getElementById("x").style.visibility="hidden"; and then advance to the next one and it will display via document.getElementById("x").style.visibility="visible"; Do you think that is fine, or is that too messy? And if anybody has any start up codes for me to use, I will appreciate it. Thank you
You could either have hidden divs and as you suggest show and hide them based on the question. The other way, and the way I would do it though would be to have a json structure with questions and answers and call the relevant set. This way if you want to ever add questions you could just append to the json object. 
Additionally you could use a prompt box that prompted the question then on correct answer prompted the next. There is a whole slew of ways to approach this, but figured I'd offer up another simple option.
I'm going through the same process as you and have started my very own small game! It is so unfinished that I never thought I would post it anywhere but since you are in the same boat as me, why not! You can check it out : https://github.com/NicolasPoirierB/spacebar , no framework no nothing, just pure canvas. See you around! Edit : Oh yeah, there might be 1 or 2 comments in French left, but the rest should be in English! Sorry 'bout that!
/r/learnprogramming is a better place to ask this type of question.
Coffee script is an abstraction, so if you know what you're doing it can be incredibly helpful. But to use it safely and effectively it requires you to know what the JavaScript you're generating is doing and what you're actually writing. It's not important to learn, but it's important to learn about, if you don't want to end up blindly hating it for its syntax, like most of the JS community seems to.
This is really cool! What are you planning to do next?
Thanks will add cc
Looks interesting. You would get bonus points if you'd take a few seconds to enable it on the non-prefixed webAudioAPI as well, so FireFox likes it too.
For extra nostalgia: 1) start at 0 hertz 2) Start synth 3) hold down the up button until it hits about 100 hertz 4) [click here](http://www.emuparadise.me/GameBase%20Amiga/Screenshots/F/Formula_1_Grand_Prix_1.png) 
I plan on hooking it upto geolocation.accuracy, compass and the gyro and make those assignable to random bits of the oscillators. also maybe use the webkit speech synthesis api and add speech to the mix. basically fuck shit up sonically.
Does the voice synthesis use the same British female voice as Muse did for 2nd Law (used in World War Z soundtrack)? "In an isolated system, entropy can only increase" sounds uncannily similar...
He's asking a javascript question, I think this question is very relevant. 
The second one is more re-usable, but many times you don't need to reuse the object. Often you need a tuple, an object with two or three values, and creating a constructor for that is a bit overkill. The advantage of a constructor is that it is easier for someone else to read your code and see what fields are required for the constructor. Code that receives a JSON object from the server could write that JSON to an object with a constructor, and now you don't have to look to the server side or run the code to know what fields the JSON object contains. 
VOLUME
Thanks for the suggestion I have a better idea now of how to structure a lesson plan 
This. Also, functions have significantly greater memory overhead than object literals. In addition, there are compiler-level optimizations that are applied to objects that contain properties of the same type. Creating a function when you only need an object prevents these kinds of optimizations. IMHO, the only time a constructor would be more useful than an object literal is when there is some specific logic or instruction that should occur when a new object is created. Besides, which of your two examples took longer to type? Sometimes the best choice is the one with fewer keystrokes ;)
Unlike some languages like Python or Java, Javascript does not have any concept of classes, a.k.a blueprints to create categories of objects. It does not mean however that Javascript does not have objects. Creating an object simply does not require to define it's class before. var user = { firstName: 'Tata', lastName: 'de La Rochette de Rochegonde', toString: function() { return this.firstName + ' ' + this.lastName; } }; If you are creating a single object, that's fine. Sometimes, however, you have to create more than one objects. In Javascript, you can simply define a function to do so. var makeUser = function(firstName, lastName) { return { firstName: firstName, lastName: lastName, toString: function() { return this.firstName + ' ' + this.lastName; } }; }; var tata = makeUser('Tata', 'de La Rochette de Rochegonde'); var toto = makeUser('Toto', "d'Aumont de Rochebaron"); This pattern is so common that it is embedded in the Javascript syntax as the contructor pattern. var User = function(firstName, lastName) { this.firstName = firstName; this.lastName = lastName; this.toString = function() { return this.firstName + ' ' + this.lastName; }; }; var tata = new User('Tata', 'de La Rochette de Rochegonde'); But this pattern is not strictly equivalent to the one before. Creating an object with `new` also have the effect of binding it to the prototype of the function you use as a constructor. It means that when you try to access a property of the object, and that property does not exist, then Javascript will look for it in the linked prototype. This is one of the code reuse pattern in javascript. var User = function(firstName, lastName) { this.firstName = firstName; this.lastName = lastName; }; User.prototype.toString = function() { return this.firstName + ' ' + this.lastName; }; var tata = new User('Tata', 'de La Rochette de Rochegonde'); tata.toString(); // Tata de la Rochette de Rochegonde So, to answer your question, there is no need to define a constructor if you are only creating a simple object. If you need to create several objects with more complex set up and / or share code and properties between them, a constructor is appropriate. Hope that makes things clearer.
It's probably worth mentioning that `new` does more than just create a new object: it creates a new object _with its `[[Prototype]]` property set to the constructor's `prototype` property_. This is what makes the property lookup deferral magic happen. The same can be achieved with `Object.create`, which again has its own use cases independently of when you might want to use `new`. I think this is less of a case of "There Is More Than One Way To Do It" and more of having a number of tools at your disposal and being able to pick whichever one fits your situation best.
that game was awesome
If your assignment is to use `document.write()` please either switch schools or complain (loudly). It shouldn't be used *ever* and is only still around for compatibility with legacy code. EDIT: Also, as far as web assignments go, that's probably one of the most inane ones I've ever heard of. What can this possibly try to teach you in terms of conceptual or practical knowledge?
I wonder where this information comes from. The author doesn't seem to be affiliated with LinkedIn and some of the claims seem a bit odd (V8 to render templates on the server? V8 itself? Seems strange when you already have Node.js (which runs on V8) on the server).
too late. my ears!
In a nutshell, knowing your users' browsers is about knowing your audience. If your 90% of your users are on IE 6, good luck trying to build a modern web app for them. If 90% of your users are on Chrome, Firefox and Safari, you'll likely be able to get away with using tons of bleeding-edge stuff. But this is unrelated to what your book tries to tell you. The book dates back to the year IE 7 was released and Firefox was slowly gaining popularity (two years after its rename from "Firebird"). Chrome wouldn't be around for another two years. At that point "knowing your browser" meant being able to tell whether you used Internet Explorer or "Netscape" (originally a divide created by the war between Netscape Navigator and Microsoft Internet Explorer in the late 1990s). Because there were only two browsers with a noteworthy market share you could generally predict the browser's capabilities by merely knowing which one of the two browsers it identified itself as and what version number it had. That was seven years ago. If we consider the years following 1994 (the year Netscape Navigator 1.0 was released) as the web's infancy, the time between the book's release and now made up a third of the web's current lifetime. A lot of things have changed. TL;DR: Buy a better book. Or [read one online](http://eloquentjavascript.net/).
Oh wow. You're right, I had a different understanding of hoisting. Thanks for clarifying... that helps a lot.
And the W3C not giving a fuck because surely everybody will follow their pipe dream and create the Semantic Web out of XML and RDF.
Doesn't load for me in latest Chrome and crashes in Firefox 26.0, but works fine on Firefox 28.0 Windows 8.1 64-bit
My buddy who's an electrical engineer and musician has this sitting in his living room (it works). I wanted to tinker with Web Audio, so I told him to send me on/off pictures of it.
Vague question, so vague answer: directives in angular.js. Edit: I missed that this was an SO url. After reading your question (briefly), same answer: use angular directives. 
&gt; Am I wrong if I say that the second solution is more re-usable? No, but you probably don't need reusability here, for a trivial data holder or map-type construct the literal syntax is simpler, more readable and can be done in a single expression.
"Creating a function when you only need an object prevents these kinds of optimizations." That is incorrect. 
Post your code.
 function forLoop() { var el = document.getElementById('display'); for (var i = 100; i &gt; 0; i -= 10) { el.innerHTML += i + '&lt;br/&gt;'; } }
No, it's not. But if you want a recommendation, that's the direction I'd go. Alternately, you could build objects that have a `drawAt` function that know how to render themselves. I have some objects like this in my current codebase. I pass in jquery in the constructor, load up some data, then tell the object to draw (or redraw, if new data is inbound). Here's a sample: var GasGauge, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }; GasGauge = (function(_super) { __extends(GasGauge, _super); function GasGauge(_arg) { this.utilLib = _arg.utilLib, this.logger = _arg.logger, this.config = _arg.config, this.htmlLib = _arg.htmlLib ; this.model = { width: 250, height: 250, data: [] }; } return GasGauge; })(Widget); And the `draw` function takes in a selector string and uses Jquery (`htmlLib`) to build the HTML. Really though, Angular is a better separation-of-concerns solution; it's useful in many other ways too, worthwhile to learn. 
Neither is a [singleton](https://en.wikipedia.org/wiki/Singleton_pattern). The ``new Object`` version is trivially not a singleton and the literal version also constructs a new instance each time it is evaluated: // foo.js function a() { return { x: 10 }; } var A = a(), B = a(); B.x = 20; console.log('A', A); console.log('B', B); Running ``foo.js``: $ node foo.js A { x: 10 } B { x: 20 } Each evaluation of the object literal creates a new object. 
The main problems with IE then were: 1. While it was better than Netscape in many ways, there were **gaping** security holes, and MS was doing their best to convince people to use things that were intended to remain proprietary to IE. 2. We all hated the fact that, despite the above, we had to accept that Microsoft was probably going to save us in some way.
We may have a nomenclature issue here but ``var my_object = { x : 10 }`` does indeed create a new object each time it is executed. To demonstrate this, insert it in the ``a()`` function above and return ``my_object``. It's not a strict singleton by virtue of not being a singleton. I'm not a prescriptivist for natural language but technical terms have definitions for a reason :).
when exactly did it crash ? Yes, its made im canvas. I don't use any frameworks or libs (apart from jquery)
crashed my browser and almost my whole os. Win 7 FF 26
I actually saw this when you posted it in /r/starcraft :o I played against the AI and he went castle first - I almost lost :&lt; game is hard. Keep it up!
Sorry, I meant &gt; var my_object = { x : 10 } then used like &gt; my_object.x Does not create new instances each time it is invoked. Better explained with a function: &gt; var NamespaceOne = { &gt; someFunc: function(param){ &gt; } &gt; } &gt; &gt; NamespaceOne.someFunc(); Nothing "new" is being created when you "use" it. Perhaps a better way to explain the original point is: "If you COULD use a singleton, this format works like one, without the complexity" Again, I only use it for namespacing, and code seperation. I Think the primary reason I have gone done this avenue of discussion is because in the OP I did not see him instantiate the my_object, I assume he was just straight up using it; like I do. Perhaps with better context I would not have gone on this tangent
Yeah, it is by no way an end product yet. :) But I just wanted some ideas on how students can use it to learn programming.
No. Javascript is a client side language, you need a server side language to send email. The best you could do is open an email window with the content for them to send. http://stackoverflow.com/questions/271171/sending-emails-with-javascript
What do you anticipate this being used for? Something like a static analyzer for JS code, written in JS? A replacement for jshint or something similar? When you say "AST syntax" and "AST API" in the readme, what are you referring to? An AST is a theoretical data structure, it doesn't have syntax or an API... Are you working around an existing AST library?
It was crashing repeatedly when I was playing the single player first map. I switched from Chrome to Safari and it was fine. This was the issue I got https://support.google.com/chrome/answer/95669?hl=en
This is not a sustainable way to test your code -- I don't want to add script includes to an HTML file or bother refreshing my browser when I change files. Mocha, Chai, and Sinon are great, but it makes much more sense to use a test runner such as [Karma](http://karma-runner.github.io/0.12/index.html) that will run your tests on multiple browsers, watch files for changes, and provide your assertion libraries and test harnesses with plugins. Also, OP, your code samples have random `&lt;img&gt;` tags in them.
This isn't meant to be an exhaustive list, rather some points that made some big changes in my dev approach.
Didn't look into this project much but I suspect AST API is referring to the Mozilla AST Format (which is what tools like esprima produce). It's the defacto standard JS AST format.
Might as well just use global interceptors
Watchers are not sustainable either. How can you debug and fix complex apps if the watch keeps triggering on every edit? You basically give up your console.
Like radhruin said, it is based on the Mozilla AST syntax. This syntax became pretty standard within AST tooling because of Esprima http://esprima.org/ (Esprima is the parser engine used internally by AST-Query). The issue with Esprima is that it creates a node three. If you want to edit it, you need to traverse the three and check for nodes matching a pattern using if/else. This works well enough for finding patterns (to use with beautifier, format converter, ES6 &gt; ES5 compiler, etc). But it doesn't work as good to modify code source. (Worth noting that Brian Ford created Astral https://github.com/btford/astral which is an AST tool to easily find and replace patterns) The main goal of AST-Query was to allow easy edition of source file. I built it with the idea of creating a Gruntfile edition API we could use internally inside Yeoman. You can checkout our implementation here: https://github.com/SBoudrias/gruntfile-editor/blob/master/index.js You'll see that the complexity is quite reduced compare to using the raw AST: https://github.com/bezoerb/gruntfile-api/blob/master/lib/api.js (this other project has the same goal but is built directly on top of Esprima)
Awesome! Let me know if you have any issues.
I see where you're coming from, here's how you do it: * Start Karma and let it launch a browser * Open the console in the browser Karma launched * Place a `debugger` statement at the start of the test you're interested in debugging * Hit save, the test will start running but the browser will pause at the `debugger` statement * Add breakpoints wherever you like, hit play, and debug at will. Additionally, you can stop watching and perform a single test run with `karma start` if the constant failures while editing bugs you.
Impressive! It was good enough that I played through a whole 30 minute 4 player ffa vs computers. I found that tower rushing them was extremely effective; it annihilated the first two. I took out the last one with catapults because I wanted to explore the tech, and used archers to take out their units that responded. It was a lot of fun =]
Congrats on getting permission to make it public. Some company's policies make this a challenge.
Sure you can work around it, but even so: I need my system for my tools and services and VM's and such. I use fat IDE's an big codebases and different projects at once (and 20 browser tabs and managers and everything). Having builds running constantly is such a waste of resources.
Amazing job, well done! - How many hours did this take? - Does it work on touch devices? - How do you handle the fullscreen canvas positioning and scale? You should release this as an app! 
Looks like you're covered in terms of debugging and integration if you use WebStorm: [Running JavaScript tests with Karma in WebStorm 7](http://blog.jetbrains.com/webstorm/2013/10/running-javascript-tests-with-karma-in-webstorm-7/)
Haha will do! Gotta love the chill vibe start ups have.
This is awesome, thanks for sharing it. Any chance we could get more info on the physical therebin?
Sure, I think everyone who was around at the time remembers ActiveX and the horrible, horrible so-called HTML some popular Microsoft products produced (Frontpage, Word, ...). But the MS hate most web developers share in their collective DNA stems from IE 6 after Firefox had gained traction, not the browser wars themselves (or post-war era rather -- Netscape 4 was awesome when it was released and everybody hates IE 4, but IE updated and by the time new "Netscape" versions hit the scene they were mostly recognized as cheap knock-offs of Mozilla's browser with extra bugs).
Is there another way for me to save the results of the quiz? I picked sending an email because I thought that would have been simpler I'm open to any other way. I need a way to save the answers and go over them later. If I have to have a backend to do this what is the simplest most barebones way?
Congrats, that sounds like an awesome exercise for you. However, I loathe your coding style. Nested conditionals without curly braces, single letter variable names, no comments, no spacing what-so-ever. Nobody will benefit from looking at this as a result. Math is tough enough anyway, why should your code look like it has been minified? Why not make your code beautiful and expressive?
&gt; Coffeescript posts belong in /r/coffeescript. Speaking as a fellow who wrote a book about CoffeeScript and a different book about JavaScript, I agree. After all, I didn't write one book about both syntax families! I had a different perspective when there wasn't a CoffeeScript subreddit, but now that there is... The vast majority of CoffeeScript posts belong there.
Creator of Faye, one of the most popular websocket servers in use, and testjs, a JavaScript testing library.
I always laugh at those preposterous french last names.
Can confirm. As a newbie to programming, OPs style hurt my brain. 
He may have minified it to keep the question to it a secret since it seems he doesn't want to spoil anyone's fun :)
If you look below his mouth, you'll see a switch, and below that a little circle. That circle is actually a light sensor. It's not a true theremin, but rather it uses the amount of light it sees to change the pitch. This happens to work well as a fake theremin, since the closer your hand is, the more light you are blocking. Here's his blog post about it: http://eli-savage.tumblr.com/post/80658307692/there-bin-was-a-project-that-culminated-with-me
Thanks for letting me know about the &lt;img&gt; tags. Fixed it! There's another blog post about Frontend JavaScript testing on the blog. It's also about Nicolas Perriault. 
This works on touch devices as well. If you press any letters on your keyboard, it'll change the sound. On a touch device, shake it to change the sound.
I would think that canJS would deserve a mention no?
strange I didn't have any problems in the same situation, however I only played for 15 minutes so far.
Really great job. Wish it was isometric in its graphics style, but even I'd have trouble rigging that up perfectly. 
Calling it plain implies there are other object subtypes. It's just an object. An object is an object. You just have an unusual way of describing these concepts that makes it unclear what you mean.
wow. as an aspiring JS dev, well done!
There are some points that I disagree with: caching selectors - this works well with an ID but may not work as you think if your DOM is changing. If you're getting DOM that isn't static you need to run the selector again. chaining - looks better on new lines: $(“selector”) .show() .addClass(“active”) .css(“width”,”100%”); but I'd still be careful. Don't throw everything in to a chain - use a different chain for different things (dom manip vs animation vs events) tags before classes - yes they're faster but then they'll limit what you can use in the template. You get faster selectors but then you can't change the div to a span or anything else. Blob HTML For a Single DOM Insertion - why an array and not a string if you're just joining it anyway? string concatenation is now faster than array join and has been for a while 
Great job. I played for almost 1 hour and enjoyed it a lot. The game is light weight and I wonder how it dint crash my browser or made it slow.Good work keep it up. 
Thanks for your feedback. Overall, these points are in a general context. It is easy to find specific examples where these approaches don't always hold up. Caching Selectors - I agree, that is scenario where a cached selector doesn't work. Chaining - I also agree that looks better, and still achieves the same effect. I would also say that if a chain's length is getting out of control then there is probably a larger issue with that piece of the application design. Tags before classes - I don't think this limits what you can use. It instead makes you think through your HTML formatting and CSS namespacing ahead of time. Dom Insertion - I stand corrected on this, thanks, I'll make an update to the post.
Something's up with the code-formatting plugin, the only ones working for me are the blocks for _"Caching selectors"_; the rest are just plain, unstyled text. Also, the opening code block is a little funky; if you're using RequireJS, then you should either load jQuery independently (prior to loading require.js) -- if you do this, then RequireJS will see jQuery and automatically shim it -- or, you can manually shim it yourself and then use RequireJS to include it. You have some sort of mixed setup whereby jQuery is apparently global (you reference it as `jQuery`), but you're still including it as a dependency in the require() call. For RequireJS dependencies, they're passed to the callback as arguments. Basically, it should look like this: define(['vendor/jquery'], function($){ // do something with $ here }); ---- **Use a Closure Instead of $(document).ready** &gt; Using a closure instead of `$(document).ready` or the `$(function(){})` shortcut is a more efficient and defensive approach to initializing a script file. This is, well, pretty much wrong, or at least, very misleading... you're talking about 2 different patterns used for completely different things. You shouldn't use `$(function(){})` to initialize anything other than code that depends on the DOM -- if you're putting the entire contents of a JS file inside of this, you're most likely doing something drastically wrong. While an [IIFE](http://en.wikipedia.org/wiki/Immediately-invoked_function_expression) can be used to create a new scope, so that you don't bleed globals, which is also useful in narrowing your [scope chain](http://jibbering.com/faq/notes/closures/) to make variable lookups (_'identifier resolution'_) a teeny-tiny bit more efficient. Yes, they can also be used to alias variables within the context, but that's hardly a concern for most sites in the modern era. Now, if you have code that depends on the DOM, and you move it to an IIFE, you're going to have a bad time. Don't do that! If something depends on the DOM, then it should be wrapped in a `$(function(){})` (or similar construct from another lib or `window.onload`). ---- **Chaining** I'm pretty sure chaining has no noticeable performance impact (as you note though, caching selectors does have a considerable impact). ---- **Blob HTML For a Single DOM Insertion** Just use [documentFragment's](http://ejohn.org/blog/dom-documentfragments/); you get all the DOM features and none of the repaint/reflow performance issues. You can even [use them with jQuery](https://github.com/k3n/LoL-ARAM-Helper/blob/master/src/js/app.js#L99).
The term plain object is not very unusual. http://api.jquery.com/jquery.isplainobject/
thank you - alot, working on it for 3/4 year now. Couple of hours every day on everage - not really, but i will make it eventually - canvas is just resized when window size changes
Thank you for this feedback, these are really solid points. Use a Closure Instead of $(document).ready - My intent was not to be misleading on this point. It was to advocate moving to a modular pattern, and potential adoption of require.js. I have not run into any issues using this pattern with footer loaded scripts (which I neglected to mention) when not using require.js. Chaining - The point here is more on readability and less redundant code with the nice side effect of a slightly more efficient code. Blob HTML For a Single DOM Insertion - I was not familiar with documentFragments, thanks for the share on that.
PowerStatus.prototype.bindUIActions = function () { this.settings.mainDiv.on("click", this.divclick); }; The context of this.divclick is the node element and not the PowerStatus object.Change context using $.proxy PowerStatus.prototype.bindUIActions = function () { this.settings.mainDiv.on("click", $.proxy(this,this.divclick)); }; 
There's no way to save information on the site, or send emails containing the information you want to save, without a server-side scripting language. You could save the individual results per-user, but no one would be able to see anyone else's answers, including you.
Love it, really nice job!
I consistently get [this](http://i.imgur.com/wwEVBEU.png) (on Chrome, OS X).
very, very cool. I had a few problems where i tried to move my mouse to the edge of the screen and end up clicking on a different window though.
Looks cool. How about a live graph for each line of code to show the timing and frequency of execution. If the code returns or assigns a value you could overlay the value on the graph. 
well made! there was a lot of UI components I didn't expect but were functional. Things like control click to select units by type, setting/managing control groups, rally points, etc. The AI is a bit easy (beat 3v1 using a touch pad) but can't fault you for that. AI is probably one of the most difficult things. I only played one game so take it with a grain of salt. 
I'm very impressed. Is it open source?
do you get it straight away when you load the page or a little bit later when youre already in the game ?
thank you. No, sorry, atm it isnt. Maybe at some point in the future. But dont know yet.
Straight away. Or, rather, a few seconds after the game page begins loading, ~~but before the game appears~~. **Edit:** After testing it again, it shows a panel where I'm able to enter a player name (I assume) for just about a second before it crashes. 
AI is in fact very simple, its not really what i focus on, main focus is multiplayer.
Sure. What technologies did you employ? Any frameworks? How about surprising problems encountered along the way? Just wondering. :) I'm not a game dev, but I make http://streamus.com and enjoy programming! :)
Just javascript and html5 canvas, no engines or frameworks. I'd say there were no really surprising problems. Also this is my first realtime game. All i did before, was a browsergame (php, text-based) and some small things, so i didnt really know what to expect. The hardest thing ive encountered (and am still encountering) is the problems with js math determinism. My game needs to be 100% deterministic, because only player input is transmitted in multiplayer games.
For me, I can click play, and then single player, but it crashes on me as well. Chrome, OS X.
Makes sense... did you consider using KineticJS? I was on the ground with that when it was first getting started... OOP in Canvas is a nice touch. I could see the deterministic needs being an issue mostly when needing to recover from a bad state. Works great when it works great, but what if you get conflicting information -- is one of the players the point of truth?
This is really awesome --- can't wait to try it out
This irks me to no end. This is due to being ignorant of where the value lies in the technology. It's also a huge missed opportunity for positive free advertising. I hope the OP's company realizes the world doesn't end if you hit the "Make Public" button and decides to open source more useful code in the future.
atm i dont have a recovery mechanism implemented. When its out of sync, its dead. The initial plan was, to make this impossible to happen. But this turns out harder than i expected, so now i have to think about some way of recovery. I also plan to let the server have a game instance running too, to prevent cheating. And then, of course, server will be the point of truth.
same, still no picture of the graph
Really, very cool. Good job.
If you don't get it ... it's a play on the triple equals equality operator (===). I know you got it, though.
That's fantastic! Is this a solo effort? Did you create the assets also?
Wow, this is fun. I just played a match against the computer and had a fun ol' comp stomp. I look forward to playing this extensively over time. Really excellent job. I like how quick it is (only gold, no gold, wood, oil, sweat, fur, etc). I love the graphics. The 1 thing I can think of that might improve the experience a bit is to differentiate the buildings a little bit more, but its a WIP so you probably already have that on your hit list. The zoom is real nice. It doesn't seem like zooming in and out of a pixel art game would make much of a difference but I tweaked the zoom as I played. It seemed like at the different levels of base complexity a different zoom level was comfortable.
I've used and love (or at least don't-hate) non-ALGOL languages like Lisps, Haskell, Forth, Erlang, and Prolog but no matter how much time I've spent reading and writing CoffeeScript I still find it inscrutable. I'm also not sure how CoffeeScript is any less ALGOL-like than something like Ruby or Python.
You might be able to find an example of something similar by searching http://codepen.io. You could achieve this with just CSS though.
Wouldn't it be writing bad code in the first place to be exposing potentially important state information to the public?
Yeah, I do know my code is terrible, but I write in this way to reduce the amount of typings (I code in Google Chrome JS console directly, moves to text editor if the code becomes sufficiently large), and partly because (like /u/kaz3work said) I do not want others to directly read and copy my algorithms without thinking how the problem can be solved. Unfortunately, I love nested conditionals or loops without curly braces if it's not too confusing. I personally think that `for(i=2; i&lt;=4; i++) if(a[i]){...}` (even `for(...) if(...) ...;`) is not too confusing. (Of course, if I was working with others, I would write `for(...){ if(...){...} }`.
Awesome! Really enjoyable. How did you start this?
Not in straight-up javascript. Also, you'll need to persist the prototype chain, so your subclass should be: var RequestOptions = function() { MyOptions.call(this); }; RequestOptions.prototype = Object.create(MyOptions.prototype); RequestOptions.prototype.method = null; RequestOptions.prototype.uri = null; Then the 3 lines of assigning to the prototype could be simplified with an object merge onto the prototype, like you could do with underscore: var RequestOptions = function() { MyOptions.call(this); }; RequestOptions.prototype = _.extend(Object.create(MyOptions.prototype), { method: null, uri: null }); Personally, I'd shy away from classical inheritance entirely, but that's [just my opinion](http://c2.com/cgi/wiki?LimitsOfHierarchies).
Really, really fun. Great job!
Otherwise `instanceof` will not work correctly: http://jsbin.com/ferijita/1/edit
Also, the properties will not inherit correctly. In your code, without that line, the following would return undefined: var instance = new RequestOptions(); console.log(instance.max); // "should" be 1000, but since the prototype chain is not carried through, it is undefined 
I like CoffeeScript and use it at work, but to me it's simply "better JS." But still JS. So I can totally get people who say, "Since it's just JS, why not use JS?" Whereas if you really break with ALGOL, you get infix parameters like SmallTalk, or homoiconicity and macros like Lisp. Something really big. CoffeeScript isn't really big.
That's bloody excellent!
Really great! I played a quick game against the computer on one of the tiny maps and really enjoyed it. I thought the little touches like the foundation remaining for a bit after taking down a building and the way the ground showed wear after a lot of units moved over the area was an especially nice touch
I really enjoyed this. I played against the comp on the tiny map, and I won. Next up: multiplayer!
It always baffles me when folks refer to javascript and jquery as separate things. 
This game is amazing. I want more levels. Hire some writers or steal the plot to the matrix. Do you accept money?
Since this link seems to have gone down, here's the gh-pages version: http://alexnisnevich.github.io/untrusted/
This is awesome. 
i quit after 36 solved problems ... could you explain your way of handling big numbers in javascript?
I use two ways to store big numbers: (mostly) string, (sometimes when numbers are not too big but speed is important) a small array. I have written small set of functions (`strCmp`, `strPlus`, `strMinus`, ...) to handle big numbers as strings, and even though these are quite slow, most times handling big numbers is not the bottleneck, so I use them. If numbers are not too big (less than 2^64 but greater than 2^(53)) and handling big numbers is the bottleneck, then I use an array with two numbers (`[123,45]` represents `123*M+45`, where `M` is a large number such as `1e8`). If big numbers are required because of answers in form of `mod N` where `N` itself is not too large but `N`^2 is (such as `1e8`), then I use functions such as `modProd` (which calculates `a*b mod N`; naive `a*b%N` fails when `a*b` is greater than 2^(53)).
This is amazing! I've been waiting for games like this since a couple years now.
&gt; Backbone was a nice choice and it was the closest thing to our vision. However, when I introduced AbsurdJS we decided to use it. Why didn't you use Backbone with Marionette or something? Or React? You glossed over that. Just easier to invent your own thing than learn the details of an existing framework? I have come to that conclusion before myself, but I don't think it is really the right conclusion. What problems did you have with AngularJS? You also mention Polymer but only in passing. People keep saying it isn't "ready" but my testing with new browsers has been successful. Was Polymer an option or did your application have to work in "all" browsers? For me, Polymer is the best option out there for web components, if you can take it. 
2^1000 is small enough to calculate and represent in string. I just coded this (as if I am re-doing the problem) and gives the correct answer (I think 16 is not hard enough - even WolframAlpha can be used if one want). `prodDigit` is the function I wrote a few years ago (multiply `string` `a` by single digit `number` `d`). function prodDigit(a,d){ if(d==0) return '0'; if(d==1) return a; for(var s='',i=a.length-1,c=0;i&gt;=0;i--){ var r=a[i]*d+c; c=~~(r/10); r%=10; s=r+s; } return c?c+s:s; } for(var i=0,s='1';i&lt;1000;i++) s=prodDigit(s,2); console.log(s.split('').reduce(function(a,b){return +a+(+b)})); This is "less shitty" version. // a: a number (in string) to multiply, d: a single digit number to multiply var prodDigit = function prodDigit(a, d){ // Trivial cases if(d==0) return '0'; if(d==1) return a; var s='', i, carry=0; for(i=a.length; i--&gt;0;){ // Computes ith digit (from front) var digit = parseInt(a[i])*d + carry; // Computes carry carry = Math.floor(digit/10); s = (digit%10).toString() + s; } // Adds carry if(carry&gt;0) s = carry.toString()+s; return s; }; var singleDigitPow = function(d, i){ var x='1'; while(i--&gt;0) x = prodDigit(x, d); return x; }; console.log(singleDigitPow(2, 1000).split('').reduce(function(a,b){return parseInt(a)+parseInt(b)}));
Same issue here -- crashed as soon as I hit "start".
its not necessarily behind the building, it depends on from where he came. When he comes from the south and starts constructing, then he usually spawns at the south after the building is done. But of course i get your point.
thanks!
We choose AbsurdJS over Backbone because it compiles JSON to HTML and CSS which eliminates the usage of external CSS files and defining the templates into the DOM or as strings. I personally tried Angular, Ember and Backbone and none of them fit in the strange nature of the project. Angular is designed for SPAs. However our site was a mixture and we have some static elements. There are few things like creating controllers dynamically or custom bootstrapping which we were able to solve but don't like the solutions. Polymer looks promising and we have a solid debate about it. However we have to support a wide range of browsers and decided to postpone its usage for a while.
I just sat down one day and started coding... or what do you mean ?
Absolutely fantastic work. Shame the source is minified, though - I was looking forward to having a nosey ;)
That's pretty damn sweet. Just played a full game and won. Your gold numbers start to overflow out of the container when I reach 10000 though.
Its all in a github repo by the same name. :) I was gonna clean up the source before making a little blog post. Thanks!
a couple of the workers spawning from a castle adjacent to a forest ended up trapped in the woods for me.
catapults are very overpowered from what I saw :P
Very cool! I like the twist. I think Thomas gets this a lot but the deaths in his games are always far too abrupt in my opinion. In this case, faster switching of direction for the snake would be better - it's far too easy to crash into the wall and unnecessarily difficult to make quick, sudden turns. Very cool though, nice job.
What are you using for controls? I've seen those controls some other places, is it a library?
It's not that I don't understand that jQuery is javascript, the separation in terms is for discussing topics specific to the jQuery library.
Dat.gui, pretty handy lib
I hope to be sending you a pull request in the next hour for this, think I've managed something useful for this....
Cool! For sure!
What do you mean to say ?
or you could write in a language that was more expressive with less punctuation....
So, in 2000, Netscape had lost, right? I mean, they'd been purchased by AOL, jwz was off running the DNA Lounge, and the Mozilla project was underway. Release .8 was out that year, and usable, and standards-compliant. IE continued to try to run away with the ball for several years after that. The browser wars weren't ~2000, really. They were 1996-1998.
Bravo then :) Your effort shows.
Removed since there's nothing obviously related to JS for us to discuss.
Fair enough :)
There was a period where Netscape were outwardly saying that everything was fine, but in reality their codebase was an unmaintainable pile of hacks and they were starting to work on Mozilla - but hadn't announced it. Source: An ex-Netscape guy I was working with in 1996... I'm not sure what point you're trying to argue, though.
What IDE do you use?
same here. Keeps crashing on chrome osx
Right, I'm not trying to make the next great million dollar idea. I am just looking for dumb simple projects (that have probably been done hundreds of times) to learn how APIs work. The reason I am asking for suggestions is because I'm not familiar enough with how social APIs work to know what kinds of things I could build.
I guess the point is that the question asks "what was the trouble with supporting JS and the DOM in ~2000" and all the old guys in this sub are coming in here and talking about the 96-98 browser wars. If anything, the answer is "Netscape was dead, Mozilla was still a baby project, and Microsoft was still trying to use its OS market share to steal the web."
This links to a blog post which links to another blog post which has [TJ Holowaychuk's video](http://vimeo.com/56166857) embedded. 
Of course, the day after I painfully figure out how to really make gup and browserify combine their forces while appeasing uglify, a blog post surfaces here and robs me of my achievement.
Cool, I have a similar setup and indeed gulp + browserify takes some time to get right, particularly when you want to include your own common library from an outside repo as many browserify modules rather than just a big library, so that you can require only what you need
Fair enough, sorry that I'm not more experienced with those API's to offer more concrete advice. Perhaps [some of the projects](https://github.com/search?q=social+media&amp;ref=cmdform) on Github could spur an idea?
ng-table http://bazalt-cms.com/ng-table/
I found the upgrades the most powerful. The same building was able to upgrade attack for all my units, but +6 will give you double the base damage of all your units; pretty fun actually.
Hm... maybe catapults seems so strong because I started building them after I started researching upgrades.
Anyone got experience with both this and http://angular-ui.github.io/bootstrap/ ?
I'd recommend listening to JSJ podcast which features the author of AngularUI http://javascriptjabber.com/095-jsj-angularui-with-dean-sofer/ He describes the differences between the two. I've used angular-ui before, including the bootstrap version. It does what is it expected. I would also highly recommend looking into angular-ui router.
Or just shim some big libs to cut down on your build times.. yeah.. can be a big PITA, especially since gulp-browserify is so unhelpful in this regard and only does a half-assed job at integrating browserify-shim. So for the record and potential benefit of ppl here, here is a project template setup: [gulp + browserify + uglify + mocha + power-assert and a global-scope shimed pixie.js](https://github.com/fforw/gulp-browserify-shimed-pixie).
Really neat and pretty unique. Was surprised when the code window appeared to the right.
**Are the above examples considered ok outside of academia, would/should this pass code review?** Absolutely not. **Or are they result of ~mediocre programmers, simple as that?** Yeah, that just might be. I wouldn't be surprised if the backend code was as bad. I've seen all the things you mentioned during my years as a developer. I've done the things myself. And I can honestly say that the main reasons for all of those things are: laziness, lack of refactoring (laziness / tight schedule), no code reviews obviously and in some cases doing before thinking which brings us back to the lack of refactoring. I can understand why people leave their code unminified. Because they have been working on the project for months with their clumsy development environment and they just want to get rid of it. And they are lazy.
html5 does not need saving.
/r/nodejs
https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events
Got to level 8, and then tab crashed because it "ran out of memory". Had to start over. -.- Still, I thought it is a lot of fun. :D
just *use strict*
There are a number of reasons for suboptimal code showing up in web pages: * Code generation. A CMS may offer sustainable, sensible customization handles yet produce so~so front view HTML code. Especially ones developed in house. What you see when you do *View source* in your browser has been largely assembled by software. Nobody lovingly crafts HTML pages by hand anymore. * Legacy code. Some best practices may have emerged fairly recently. Big Rewrites are risky and costly. Ugly code that does the job is still code that does the job. * Lack of familiarity with the language. A good programmer with little knowledge of Javascript may have had to whip up something fast. * Code rot. As successive programmers intervene in a code base with little or no knowledge of the original design choices, code degrades. IMHO there are many more difficult working contexts than there are mediocre programmers.
I'm not sure what that would do exactly and just tried enabling strict, but it made no difference on the level I'm stuck on. 
What did you do for level 4, the multipication level? EDIT: Also, there is a menu button to let you select levels. I crashed it with an infinite loop and was able to re-select my starting level from there. 
This is standard JavaScript and how the language behaves overall. You overwrote that property, simple as that. I can do this and then claim that the language should account for it, but in reality, I just wrote my code poorly using reserved names. For example: // This is my fault for using a reserved word document['write'] = 'My string to write to the document'; document.write(document['write']); TypeError: Property 'write' of object #&lt;HTMLDocument&gt; is not a function If the language was to implement a "fix" to this, by let's say prefixing all the elements, than that would have unintended side-effects as well. The next time someone tried to access the element in the defined JS manner, it would fail since it would need to be prefixed. Additionally, any other fixes that avoid this solution will require extra memory constraints and processing power for almost no gain. The only logical answer here is don't use reserved words, this is the case in any language. I see no complaints that this is restricted from the syntax: var var = 4; So I'm not too sure what the complaint is here. 
The post just explained a history for the non technical IMO. Based on the extreme headline I was hoping for a technical review with examples.
You... multiply... the... exits. Good luck with the rest dude.
Yep, I really love angular-ui-router and angular-ui-bootstrap, I tried angularstrap before and it bugged out for me, but maybe i wasn't using it properly, had messed up my environment/code organization? i dunno 
None of those variables are exposed for me though. EDIT: Turns out you can just add another exit. This only works on some levels though which is why I did not try. 
Interesting podcast, but from the [discussion on hackernews](https://news.ycombinator.com/item?id=7552561), sounds like the angular-ui guy is under the impression that jquery-ui and bootstrap javascript are dependencies when it isn't.
I see a lot of the third point. Loads of server side developers hired for enterprise/corporate websites know just enough to scrape by. Same for html, i've worked with enough people throwing font tags into a page to want to go on a rampage. It's just the way i guess.
Thanks for the link =] Funnily enough a load of the Self Service checkouts that have been popping up in every uk retailer also run off the back of XP.
I really enjoyed [this](http://carnotaurus.philipcarney.com/post/3010984357/classes-versus-prototypes-some-philosophical-and) post about classes versus prototypes generally speaking.
&gt;You're conflating two different things here: JavaScript the language vs. the DOM API. JavaScript started as a scripting language to interact with the DOM. That is its primary purpose in your use case. The JS DOM API specification specifically states to do this. You are interacting with the language that adheres to those specifications. Therefore, that is the syntax you are dealing with. I wouldn't necessarily call that implicit, the same way I wouldn't call jQuery binding your delegated jQuery events to the document implicit. As far as the library goes, I think this is overkill. Again, how would you stop someone from saying: var var = new Library(); You won't and they are using the language wrong. I appreciate you trying to make your library flawless, but is it not possible you are wasting processing power to account for a few people using the language wrong? EDIT: Since you have since edited your reply, I will need to edit mine. &gt;Here form.method would return the input element, but form.getAttribute("method") returns post like you would expect. I didn't even suggest prefixing any elements; that is a horrible solution. An analogous getProperty(str) that works like getAttribute(str), would help. The problem is that all attributes are also implemented as properties. Avoiding this collision would require extra processing and memory. It is easier to just not use clashing property names. The attribute method can work around this since the DOM is at its disposal and can actually check the markup itself for the attribute. This is not the case with properties. This would either require property cloning or prefixing, I don't see a way around that without re-designing the entire language. Also, I don't see a purpose since it can be easily implemented by the developer when needed. 
AngularUI worked fine for me, aside from a nesting bug with tabs that has subsequently been fixed. If you like bootstrap, I see no reason not to start with angular-ui and customize as needed.
&gt; JavaScript started as a scripting language to interact with the DOM. Which has nothing to do with the language itself. JavaScript *the language*, is different from the DOM API. Where in the ECMAScript specification does it define the DOM API as being part of the language? The only mention is with regard to the `window` object, where it specifies that in the DOM, `window` is analogous to the global object (i.e., holding the global scope). JavaScript as a language exists in different runtimes. You have it in Rhino, you have it in Node, and you have it in Nashorn. In none of these environments do you have access to the DOM API, quite simply because there *is* no document. &gt; That is its primary purpose and in your use case, the language. The JS specification specifically states to do this. You are interacting with the language that adheres to those specifications. As I mentioned before, there is nothing in the *language* specification itself that describes or condones such behavior. What you're seeing is an artifact of the early DOM implementation (I'm talking 1.0 days). In the late 90's and the early 2000's (before jQuery even existed), form elements were easily be accessed by simply doing `document.form.elementName`. &gt; Therefore, that is the syntax you are dealing with. I wouldn't necessarily call that implicit, the same way I wouldn't call jQuery binding your delegated jQuery events to the document implicit. This has nothing to do with syntax. This is behavior. It is most definitely implicit because you aren't writing *actual* and *explicit* JavaScript code to reassign the `tagName` property (for example) to the `input` element. This is an artifact of how the HTML document itself is processed, reified, and represented into the DOM. &gt; As far as the library goes, I think this is overkill. Again, how would you stop someone from saying: var var = new Library(); I wouldn't have to since that would result in a parsing error pretty much instantly. &gt; You won't and they are using the language wrong. They aren't even using the language at that point, are they? All they did was write some HTML where the name of the `input` element happened to correspond with a native property of the `form` object. What JavaScript did they write to do this? From the perspective of my library, I am trying to access `element.tagName`, which I would assume would give me the actual `tagName`. However, if a user had an `input` element for that form with the `name` attribute set to `tagName`, I would be getting *that* input element instead of the actual `tagName`. &gt; I appreciate you trying to make your library flawless, but is it not possible you are wasting processing power to account for a few idiots using the language wrong? Again, no one is even using the language "wrong" at this point. This is due to an interaction between HTML and how the document is represented (as the DOM). Honestly, the overhead of cloning a single element (which is pretty much GC'ed soon after the function goes out of scope) simply to be able to get the *actual* native property of the object, isn't that much. Furthermore, it really *is* a limitation because this obviously violates the principle of least surprise. I wouldn't expect a native property to be *implicitly* overridden like that, and at the very least I would expect some way to be able to access the *actual* native property. I hope that at some point in the future they deprecate this method of accessing forms and their input elements.
As someone who has crawled tons of JS code looking for various patterns (mostly to check for breaking changes for the TC39 committee), I can confirm that code in production even just in the top 10k websites is, overall, **frighteningly disgusting**. My favorite example is that there are a number of these websites that use naked string literals as comments, i.e. "call foo"; foo(); Tons of sites with functions declared in blocks, functions declared in loops, disgusting with hacks...
It's mostly time. A lot of people have javascript written years ago, especially in big products. It was written once and the schedule doesn't allow for refactoring, updating etc - probably better to start over than add to the pile. That's what happens to successful businesses - if it aint broken dont fix it. Of course everyone would love all the latest best practices to be added, but when activity A produces money and activity B produces developer happiness, you can be sure its A that will be done. 
I just read (skimmed really) that thread, but it wasn't quite so clear to me. Who is the `angular-ui` guy in that hn conversation? Looks like *olouv* is the author of AngularStrap, but there doesn't appear to be an official representitive of *Angular-ui*
&gt; You simply have to go look at the original ECMAScript specification and you'll see what I'm saying :) I've seen it, I'm just saying, working with-in the DOM and knowing the DOM specifications, you would know this would happen. &gt;No, it doesn't actually. This behavior is actually rather specific to forms and input elements, which use the name property. I also know quite well that this happens. The problem is that not everyone knows what name values are illegal. Can you, off the top of your head, list every single native property of the form object that cannot be used as a value for name? Also, me trying to handle this situation is me noting that this can happen. Notice that I'm not denying that this happens. I'm simply stating that I think that this behavior isn't very helpful. I agree it is not very helpful, but it is not limited to form and input elements. This happens with all attributes and properties that conflict, it is just exasperated by the fact that forms also get it's input children implemented as properties. This collision can also be seen with variable names and element ID's. The solution is to work around it. &gt;What you have there is legal, syntactically-valid HTML. JavaScript doesn't even come into the picture at this point. The problem arises when this HTML is parsed and converted into the DOM. Sure, it is legal HTML. The are a lot of jQuery/JS applications that need specific markup to work, not just valid. This is common. You can easily give off a warning to the end user if the name is restricted, but I don't disagree that method sucks. I'm not really sure what we are debating here. Is the DOM implementation archaic? Yes, I don't dispute that. Would it be nice to have a nativeProperty() method to help fix this? I don't disagree with that point either. Is this possible within the current implementation in regards to a practical solution? I don't think so nor do I think it is important enough to address. I can understand the issue you are having and why it is not intuitive, but I don't think its a huge deal. It's always been like that and it is nothing new. It is one of the parts of JavaScript we all learn to deal with. Anyway, your original comment seemed to be more of a complaint, in which I get annoyed at all the hate on JS when it mostly seems to be a lack of understanding. Clearly, this is not the case here. I also may have been quick to judge in which I apologize. Although, we definitely have a dispute about the definition of JavaScript dependent upon it's use case :) I can see why you would classify them together, but to me, it's not the same thing. Different run times, different compilers, different environment implementations, etc. I'd personally consider one of them a DSL or dialect, but then again, I always have weird classifications that tend to just work within the confines of my own mind. 
&gt; I've seen it, I'm just saying, working with-in the DOM and knowing the DOM specifications, you would know this would happen. Lol :), yes I agree. I *should* know, and I *do* know. I'm just saying that it's not helpful. &gt; I agree it is not very helpful, but it is not limited to form and input elements. This happens with all attributes and properties that conflict, From within HTML? If you have an attribute, you can still access it with `getAttribute()`. &gt; This collision can also be seen with variable names and element ID's. I'm not sure what you mean here. How can a variable in JavaScript conflict with an element's ID that is defined in HTML? &gt; The solution is to work around it. Which is exactly what I was asking for! :) &gt; I'm not really sure what we are debating here. Is the DOM implementation archaic? Yes, I don't dispute that. Would it be nice to have a nativeProperty() method to help fix this? I don't disagree with that point either. Is this possible within the current implementation in regards to a practical solution? I don't think so nor do I think it is important enough to address. I can understand the issue you are having and why it is not intuitive, but I don't think its a huge deal. It's always been like that and it is nothing new. It is one of the parts of JavaScript we all learn to deal with. Haha, I don't know either. We seem to be talking past each other. I think it is important to address just from the perspective of having an API that makes sense. It's an edge case to be sure, but it is annoying when encountered. &gt; Anyway, your original comment seemed to be more of a complaint, in which I get annoyed at all the hate on JS when it mostly seems to be a lack of understanding. Clearly, this is not the case here. I also may have been quick to judge in which I apologize. Although, we definitely have a dispute about the definition of JavaScript dependent upon it's use case :) I can see why you would classify them together, but to me, it's not the same thing. Different run times, different compilers, different environment implementations, etc. I'd personally consider one of them a DSL or dialect, but then again, I always have weird classifications that tend to just work within the confines of my own mind. Oh, no worries :). I wasn't complaining. I quite like JavaScript and I do develop in it quite a bit. I like the language, but most of what I have issues with (and what most people have issues with) is the DOM implementation. However, to be honest it is much better than the IE6 days or the days before that. Nowadays it is more-or-less similar across browsers on the core parts at least.
&gt; I'm not sure what you mean here. How can a variable in JavaScript conflict with an element's ID that is defined in HTML? All element ID's are implemented as variables in the global scope. So if I had the following element: &lt;div id="hello"&gt;&lt;/div&gt; I could then use the `hello` var in JS to access it: hello.style.display = 'block'; That's all I meant by that. To newcomers, it may cause unintended side effects or weird issues. Scoping prevents this from being too much of an issue, but it does arise from time to time. There are a couple aspects of DOM implementation in JS that can easily conflict with user data. This is also even the case with CSS and people using generic class names and breaking elements on other pages. After all the JS woes I've had related to this, I usually just make my names slightly obscured knowing there will be no conflicts and move on. I just group all of these problems to be within web development and not JavaScript itself. As you said, in different run times, JS is not susceptible to these oddities. Anyway, I just love JavaScript and I'm always quick to defend it. Critiquing you was never my intention, just protecting the JS reputation :)
Buttons cause the page to scroll to the top on mobile 
Ahh, ok I see what you are talking about. I think I *vaguely* recall that behavior from probably a long time ago. I haven't had to deal with that in years. Then again, I never use global variables :) &gt; Anyway, I just love JavaScript and I'm always quick to defend it. Critiquing you was never my intention, just protecting the JS reputation :) No worries :) It was a fun discussion and I totally understand about defending JS. I think it gets a lot of undeserved hate. 
I haven't really user angular-ui, but angularstrap is pretty nice. I used it before they went native and it was relatively clunky. Now that it's native, and no longer relies on jquery or bootstrap.js, it's snappy and looks good, especially paired with [angularmotion](http://mgcrea.github.io/angular-motion/). The code is also clean and organized well.
Sorry for the delay! But yes, I did what /u/joeframbach said: multiplied the exit. I think I might try the game again soon, and I hope the tab doesn't crash... 
Awesome-o. Thanks!
There is a special place in my shit list for "all-in-one" starter repos that completely ignore testing.
I would rework it in this way: (trying to keep it simple for you) var router = new Router({ routes: { '/' : 'home', '/projects' : 'projects', '/projects/:name' : 'project' }, controllers: { home : function () { ... } projects : function () { ... }, project : function (attrs) { ... } } }); router.addRoute('/blog', 'blog'); router.addController('blog', function () { ... }); router.start(); router.navigate('project', { name: 'jim' }); // goes to `/projects/jim` Internally the constructor can just call `addRoute` and `addController` for the `routes` and `controllers` passed to it. You could even break it apart into 'addRoutes' and 'addControllers', which could become convenience methods for adding multiple routes and controllers at the same time. var Router = function (options) { this.root = options.root || ''; this.routes = []; this.controllers = []; this.addRoutes(options.routes); this.addControllers(options.controllers); }; Router.prototype.addRoutes = function () { ... } Router.prototype.addRoute = function () { ... }; Router.prototype.addControllers = function () { ... }; Router.prototype.addController = function () { ... }; Router.prototype.start = function () { ... }; Router.prototype.navigate = function () { ... }; // convention for internal methods Router.prototype._matchRoute = function () { ... }; Router.prototype._loadRoute = function () { ... }; I like to simplify this with something like [underscore](http://underscorejs.org): _.extend(Router.prototype, { addRoutes : function () { ... }, addRoute : function () { ... } ... }); You will also want to add these methods to the prototype of Router and not as instances. You may want to take a look at the [source code](http://backbonejs.org/docs/backbone.html#section-155) for [Backbone.History](http://backbonejs.org/#History), and the [source code](http://backbonejs.org/docs/backbone.html#section-168) for [Backbone.Router](http://backbonejs.org/#Router). It's similar enough to what you have here, that you'll probably get a lot out of it. 
No need to start over from the beginning - your progress is saved in the Menu (Ctrl+0).
Your article is the motivation behind React. Everything is a component with a well defined structure. You don't put your CSS inside of the component yet, but that would be a great addition
looks good! I can dig it.
This isn't true everywhere, but production code is generally pretty messy. Changing requirements, collaboration between developers with varying skill levels, deadlines, budget limitations, etc. all affect the quality of code. Economically speaking, this isn't necessarily a bad thing. It's usually far better to have something messy that works than half of something that's written elegantly. 
another?
I don't know if you're the author or not, but it's not Twitter Bootstrap anymore. It's just Bootstrap.
Why did you link to a blog post that wants us to sign up for a JavaScript bootcamp instead of the actual documentation? Also, I'm never going to use this.
The Framework Formerly Known as Twitter Bootstrap. 
Saw one of the Walmart self checkout machines booting up the other day and it appeared to be xp as well. I don't go there often but it's the worst system I've ever seen in that sector as well. You'd think Walmart would have the engineers to out do Cub foods or even Super one but it's clearly a really shoddy system. 
We write much of our JavaScript (frontend embedded webapps) in the open so we're extra conscious of modularity, composability, documentation, and overall code quality. e.g. https://github.com/Livefyre/streamhub-sdk
The angular-ui guy was on the podcast and the angular strap guy was on hacker news.
OK vote me to hell but I gotta comment. *Inline JS i everywhere. I agree, this is dumb. *including js files in the head. There are plenty of reasons for doing this especially when the script will influence how the html will render. Anyway, modern browsers load multiple resources at the same time, its not that big of a render speed gain any more. This is now an unnecessary "best practice". *Nobody had any minified code. *Lots of code comments and commented out code left in. I agree. Dumb. *Didn't find a single use of === === is mostly unnecessary. You rarely need to care about the 'type' of JavaScript variables. If your code does then there's a problem. Its not any faster. It tends to cause problems in NodeJS where you're dealing with I/O. '0' == 0 is something you usually want in that case. This is another one of those "best practices" that are unnecessary and at time harmful. *Multiple dom manipulations instead of batching. Dumb yes, but could be the result of a CMS. *Accessing Object.length in every loop iteration. Dumb. Or Object.length changes in the loop body *(styling html directly in js rather than using css, not sure if this is considered ok?) * One snippet that really stood out was: + var COUNT_DIRECTION = 1; + var SetTimeoutPeriod = (Math.abs(COUNT_DIRECTION) - 1) * 1000 + 990; + and SetTimeoutPeriod was used only once after that(not as a constructor:) ), COUNT_DIRECTION none. I would bet the is the result of a CMS setting COUNT_DIRECTION in the backend render. This is common. Get over yourself and contribute something productive, not some smug "look at me, can't you tall how many javascript books I read?" rant.
Including JS in the head is fine. `===` isn't always needed. Sometimes, it's appropriate to directly manipulate styles with JavaScript. There's a lot of crappy developers and crappy code out there. This problem is not isolated to just JavaScript or web development either. 
I've quickly come to the realization that all-in-one repos solve a very different problem: spinning up a quick prototype. I don't know of any that are meant to evolve into bigger applications; the closest is angular-seed, which is still pretty abysmal (no out-of-the-box build, concerns separated into 5 primary files). I don't think I'd ever use one for a project meant to scale. Getting the foundation right is so much more important than getting started quickly.
It looks nice, but it's terribly slow. First, _draw in Field.js is where pretty much all of the time is being spent. Also, it's a gigantic function! If you broke it up into smaller functions, it would be easier for the compiler to optimize, and you'd get better profiling results. Second, you seem to use Array.map a lot, but don't use the return value. Why not use Array.forEach instead? It'll be a bit faster, and produce less garbage to clean up. (It's also more "correct".) Third, reordering the loops in your main draw function might help reduce cache misses. Put the layers loop on the outside. Fourth, it looks like you're calculating lighting every frame for what appears to be a static scene. Could you pre-calculate that at the beginning and just look it up? It's hard to tell if that's a hot zone though because it's grouped under _draw. (See the first suggestion.)
Quick prototypes rapidly turn into rushed releases. I think it's very important to lay the foundation for testing in seed projects like these. Having testing setup from the start removes a psychological barrier for engineers; there's no excuse to not write well-tested code when the plumbing is there. I've setup a repo that does nothing but test: &gt; [github.com/lazd/wellTested](https://github.com/lazd/wellTested). The repo shows a very simple todo app with unit tests, end-to-end tests, visual tests, code coverage reporting and tracking, and continuous integration. It's not complete, however. There's no server for it and, therefore, no server-side unit tests. It could use some examples of how to test drag &amp; drop and touch UIs. It could help to show an example of running tests as a pre-deployment hook. PRs welcome.
Everyone wants cheap programmers, and fast iterations. Cheap programmers are mostly very bad, to the point of being unable to do computer-related things at all (believe me, I've seen it). And pushing lots of bad code in production fast – that's indeed a recipe for today's sorry state of great many websites. (Also many companies don't consider their website a mission-critical part of business, so it sounds completely logical for them to minimize costs. Like, you know, getting a somewhat shittier pizza for a free on-site lunch.)
&gt; Is there a workaround? The easiest one? Don't do that.... you can give your elements a name of anything, but you use the same names as the DOM API? 
Another one of their "scrape mailing lists and create lists" websites. http://www.reddit.com/domain/webdesignporto.com/ CTRL + F: "wdpttt". Recently posted here: http://www.reddit.com/r/javascript/comments/22k6ie/react_js_learn_the_basics_the_right_way_knowledge/ edit: Just realised kenman actually reported this a month ago, but for codegeekz not webdesignporto
Sorry, I meant "You don't put the CSS ... [in React]"
This one is again teaching the broken "gulp-browserify" way of doing things. Better keep to the solutions outlined in [this post / my comment](http://www.reddit.com/r/javascript/comments/22iwgu/gulp_browserify_the_everything_post/cgncheg?context=1).
angular-ui-bootstrap doesn't require jquery-ui or bootstrap's javascript - i'm currently using it in a project without either one.
Agreed. Also [this](https://github.com/gulpjs/gulp/blob/master/docs/recipes/fast-browserify-builds-with-watchify.md)
Sounds like it might be interesting, but the site is completely unusable on mobile, unfortunately 
`123 == "123"` If you understand the type-conversion that will take place, why not?
it's unusable on desktop as well
[Indeed.](http://i.imgur.com/MhOonvJ.jpg)
Any performance hit would be trivial. If you do manual type casting, it will have the same effect. I guess my point is that if you know how strict vs non-strict equality operators work in JavaScript, you won't really run into any issues.
Sorry, I fixed that and slide size is responsive now. I hope it's fine now
Does anyone know if it is possible to use coffeescript and a CSS or Stylus inliner with browserify? [edit] I'm not that happy right now. I just got into the node/npm world and I've learned so many damn funny named projects that my head is spinning. I learned requirejs and was getting into grunt and then I learned that those are probably not the best anymore. So its concentrated evil time now.
That is probably the most annoying webpage I've ever visited in my life. Seriously, 20 seconds of animation crap before *any* content is displayed? I can't believe it's not April 1st, because that's the biggest joke I've ever seen.
No problem. I doubt I spent more than 5 minutes on it. Chrome's profiling tool is pretty awesome. The [flame chart](https://developers.google.com/chrome-developer-tools/docs/flame-chart) view is especially handy.
Check http://www.monoslideshow.com (does not depend on jQuery) *disclaimer: I made this*
Yeah there's definitely something going on here, thanks for the info!
It's scaling for me, everything's still bunched up in the center of the page wih no way to read it. This is on a relatively small smartphone.
&gt; Everyone wants cheap programmers, and fast iterations. It's all too often a case of "get it done, right" not "get it done right"
Works now. Can generators themselves handle async operations, because every article I've read has them used with promises it seems.
It works now - for me at least. But having to swype to the next slide step all the time still makes for a pretty sad reading experience imo.
This isn't *me* doing it. I have a library that can potentially encounter code written like this.
http://www.reddit.com/domain/webdesignerdepot.com/ http://www.reddit.com/domain/codecondo.com/ http://www.reddit.com/user/skillcode This is getting out of hand.
Hello! Thanks about the warning. I will not post anymore then... :/
Hello! I'm the guy from webdesignporto. I'm just posting my own content, what I've been writing. I've also posted a post as guest author (he asked me to do it) on the CodeGeekz.com http://codegeekz.com/react-js-tutorial/ so this is my only link with them. About "another new user, /u/wdpttt, suspiciously posts a lot of links to the geekz sites, as well as webdesignporto.com..." I've only posted one link to codegeekz, that was my own post. The rest of the posts are from my own website webdesignporto.com I hope there are no doubts about who I am. Anyway it seems that I cannot post anymore, as I've been warned in a comment about a possible ban, but then I might think: nobody will see my posts. Anyway I have to figure out something that has nothing to do with reddit... And I only use this account.
Do you miss next &amp; previous buttons? What would make experience better?
They can be tricked to do so. I explain it in that slide: http://medikoo.com/asynchronous-javascript-interfaces/generators-co/?notes For dedicated async handling generator-like way there's Async Functions proposal for ECMAScript 7 https://github.com/lukehoban/ecmascript-asyncawait
I like the idea of write X lines of code per day. I struggle with just starting at-home projects sometimes, so just setting a goal like that is a good starting point.
You can definitely still post, it's just that you need to behave like a normal redditor, and not someone just trying to drive traffic to their own site. As I alluded to in that [other comment](http://www.reddit.com/r/javascript/comments/22k6ie/react_js_learn_the_basics_the_right_way_knowledge/cgo3gll), you need to only submit your own site 10% of the time (at most). Your submissions have been fairly successful, and you do participate in discussions (which is good), it's just that it _appears_ that the only reason you're here is to promote your site, which is the wrong reason to be here. If all you really want is web traffic, reddit has [an advertising program](http://www.reddit.com/ad_inq/), but by posting so many links to your own site you make it unfair to those who do pay for advertising (as well as rob reddit of money it could use). That's why it's such a touchy issue and why the admins take it seriously.
[Indeed.](http://i.imgur.com/Yjrx6u3.gif)
Yay... I knew all of this.
You're so smart, you must be rich.
It's not that, I was just commenting on the general idea of over-complicating things for no good reason. JavaScript just happens to be an *extremely* popular choice amongst web developers who like to make everything as complex as possible without any reason to do so. It could be any language. If somebody read an article about how cool and hip Python is and decided to convert their whole code-base to Python without having a single good reason to do it, that would be the same thing. I think JavaScript just makes it easier to fall into this trap because it can co-exist with existing code rather than requiring it to be entirely replaced. JavaScript also gives you *visual* feedback on your changes because it is a client-side language after all. That form you converted to AJAX for absolutely no reason now has a progress bar that fades in and darkens the background... before refreshing the page anyway! These are the kinds of silly things I'm talking about. JavaScript is awesome, just not necessary as frequently as people think it is.
There wasn't a clear illustration of why closures are useful. All we get is a related assertion by the author. &gt; Although by no means exclusive to JavaScript, closures are a particularly useful construct for many modern day JavaScript programming paradigms. Closures can serve as private static properties in prototypical languages, coming from a "c-style" OOP language. This allows for generic factories and a number of other tricks that are frustrating to debug in larger projects.
I hate interview questions like this too. If I ever get to a management level, I'll just ask a candidate to write a small simple app or demo page. I'd judge on the candidate on how they solved the problem and what resources they used. 
The things your are describing have nothing to do with the programming language and everything to do with the the programmer. JavaScript doesn't work by copy / pasting snippets from StackOverflow or some random design site's demo.
Including "trick" questions is a waste of everyone's time. As part of my consultancy, I get brought in to help orgs assess interview candidates. 8/10 times, I have to talk down HR or a hiring manager from dismissing a highly qualified candidate because they stumbled on some bullshit question from "Cracking the Coding Interview".
If they didn't have any business plan, no one would have funded them ;). The first commercial product the Meteor team is working on will be called Galaxy, which will be an advanced deployment/scaling/hosting tool: &gt; Meteor will always be free and open-source. Eventually, we plan to make a commercial product too, called Galaxy. Galaxy will be a product that the operations department at a large company might buy. It'll be an enterprise-grade, multi-tenant hosting environment for Meteor apps. In other words, it'll let you run a private, centrally controlled "meteor deploy"-like service for your company, on your own hardware. You'll be able to manage how your apps are distributed across your datacenters, perform capacity planning, and enforce controls and policies that are appropriate to your organization. Google and Facebook have these tools — why shouldn't your organization? If your company is not large enough to have an operations department, it's unlikely that you'd want to buy Galaxy. Anyway, Meteor is quite easy to learn and do some really powerful things with very quickly. I'd wager that it takes less time to learn than most other large JavaScript frameworks. They've really put a lot of effort into making some great, developer-friendly APIs. The biggest hurdle in learning Meteor is learning "the Meteor way" of developing apps, but once you wrap your mind around it development becomes very enjoyable. The caveat is that it's actually a paradoxically thin framework - although it is a full-stack solution with full templating, accounts, and real-time data systems, you are left mostly on your own (for now) to implement things like routing, models, forms, validation, pagination, internationalization, and even the general directory structure conventions of your app. I would argue that this is a good thing, as they are paying attention to the various third-party solutions on [Atmosphere](http://atmosphere.meteor.com) for inspiration on adding some of these features to core. For example, it is very possible that Iron Router, the de facto Meteor routing package, may eventually be merged into the Meteor core (or simply supported as a standard package) at some point after 1.0 is released. The other caveat is that you're pretty much stuck with MongoDB for now, but that will be changing after 1.0.
Yes. I agree with you. We're saying exactly the same thing. Some developers write code that works, and some write code that is fancy. JavaScript happens to be a popular choice amongst the latter group. I was merely expressing my frustration with this particular type of behavior and this particular language because it's so pervasive right now. I really don't think it's possible for me to spell this out any clearer than I already have.
One huge improvement would be to only have one step per slide. Doing a swype and then only seeing two extra words appear on the screen is redundant and makes me feel like I'm doing way too much work. When doing an actual presentation I find it to be a poor choice as well as it makes the slide too busy.
make the duration quicker
That's not really the point of jQuery, but you really shouldn't be against using jQuery in a project, that's just silly. using `this.routes = []` and `this.controllers = []` probably wasn't the best idea, they are probably better as objects than arrays. Normally for this sort of thing I include underscore: addRoutes({ '/' : 'home', '/projects' : 'projects', '/projects/:name' : 'project' }); addRoutes: function (controllers) { _.each(controllers, function (controller, path) { this.addController(controller, path); }, this); } addRoute: function (controller, path) { this.routes[ controller ] = { path: path // &lt;&lt; create regex }; } addControllers({ home: function () {}, projects: function () {}, project: function (attrs) {} }); addControllers: function (controllers) { _.each(controllers, function (fn, name) { this.addController(name, fn); }, this); } addController: function (name, fn) { this.controllers[ name ] = { fn: fn }; } Then the lookup for a route would be something like _matchRoute: function (route) { _.each(this.routes, function (params, controller) { if (params.path.test(route)) { // extract route params to attrs object somehow this._loadRoute(controller, attrs); } }, this); } _loadRoute: function (controller, attrs) { this.controllers[controller](attrs); } 
I missed that one because when I read the code my brain parsed it as `map['foo']` instead of `map[foo]`. It wasn't until I read it the third time that I realized what I wasn't seeing.
I don't think the articles purpose is to educate the reader on the benefits of closures, only why an experienced JS developer should understand them. To whit, the article is not trying to teach people JS, it just explains what a good and bad answer to the questions are.
I'm surprised there wasn't any questions about type coercion. They covered `==` vs `===`, and why using non-strings as object keys is bad, but nothing about why certain conversions happen. Such as why you should always use parseInt with a radix, or why `'12' == [12]`
The proper answer to `alert(map[foo]);` question is "Don't do that stupid thing and you won't care or need to know about that stupid thing".
I agree. I thought "why might you want to use them?" would have resulted in some kind of answer to the question asked...that's all. It's a topic of interest to me.
While these are good to know, most of them are just situation-specific trick questions that rarely come up in a project—and when they do, the debugging usually only involves a 5 second google search, and after that you never need to look it up again. If I were hiring a JS developer I would test more for conceptual programming knowledge as a whole (time complexities, asynchronous data, front-back persistence etc), rather than these intentional curveballs. I'd much rather have a developer who sees the larger picture and has a good debugging ethic than one who prides themselves line-to-line syntax.
That's because if you'd written the code you would have written it correctly (key string) the first time you wrote it. I would have, too. These trick questions don't test programming ability, they test how well you debug when someone teasing you with a living wage is looking over your shoulder. Most of these are worthless.
Yeah, I think I made that mistake too. By the way, I now remember that I've used .toString() on plain objects for type checking.
I agree that the code samples are a nuisance since they're basically counting on you catching something that's been deliberately obscured, but I wouldn't say they're worthless. The ability to debug stupid mistakes like this is definitely a skill worth selecting for. As for the relevance of the questions... I've been in and heard of a lot of interviews where the person claimed to be experienced but couldn't have answered even one of these questions. Some people think that "know how to make jQuery do something" is the same as "know how to program in JavaScript".
Eh, don't do this. Having them take time out of their schedule to write an app is a waste of their valuable time if you find a candidate that is more to your liking. Tell them to choose something that they've already built and have them walk through the code and explain what they did and why. Anything that is outdated, they would point at and say "Hey, this is how I did it, but I've found a better way." And if they're simply copy and pasting someone else's code you'll find out pretty quickly.
This looks like an awesome tool. I wonder if they will port the same features to intellij as I could use this In several projects. 
I agree with silly trick questions being worthless, but honestly, the majority of these questions are about topics the developer should be familiar with. The only one I thought was utterly pointless was the one about the hash table. You should have a solid understanding of the prototype chain, closures, type coercion, etc. What questions did you specifically take issue with? 
It was zoomed in only seeing the center of the page. Works fine now though.
I'm not sure what you have on MediaFire, but I can tell you a majority of people here will never even look at it. If you have code to share, put it on Github, or one of the many fiddlers (jsfiddle.net, plnkr.co, etc.), some sort of pastebin service, or even in the text of your post/comment (if you indent with 4 spaces, it formats it as `code`). Also, this sub isn't really a "code request" service. Yes, we will help you if you're stuck, or give pointers, discuss the relative merits of one approach over another, etc. but most here have our own work to do.
seriously, came here to say that. why use objects as hash keys in a language that can't support it?
I feel like unless you're in a location where there are tons of developers available, these tricky/nichey type questions are only an exercise in how to end up with no remaining candidates.
The most important part of this was closures, specifically the button example and the fix that followed. Know that and you're good to go in most JS jobs.
The closure question and function declaration example were not tricks. Those probably account for a majority of JS specific bugs these days. The object as a key one was a bit silly.
I guess what I was saying that considering any one of these to be a deal breaker is a mistake for an employer. Personally I think someone's own projects should be the determinant of their skills as a programmer, and the in-person interview should be to see if they're likable enough to work with. It's a shame seeing a good programmer with social nerves slip up and lose an opportunity they're more than qualified for.
Their first example of prototypical inheritance struck me as odd. I'd appreciate if someone more qualified could comment on whether this is good practice compared to the way I would write this (below). function Animal() { this.eatsVeggies = true; this.eatsMeat = false; } function Herbivore() {} Herbivore.prototype = new Animal(); function Carnivore() { this.eatsMeat = true; } Carnivore.prototype = new Animal(); var rabbit = new Herbivore(); var bear = new Carnivore(); console.log(rabbit.eatsMeat); // logs "false" console.log(bear.eatsMeat); // logs "true" This is setting an object's prototype to a new instance of another object. The way this is set up, you need to consider at least these: * Animal's internals are hidden. You can't examine the object or class Animal and know that it contains two properties. In fact, Animal (the class) does not contain any properties. During construction, it defines and initializes two properties. * Herbivore and Carnivore aren't inheriting from Animal. Their prototype is being assigned to the object returned by new. Instantiating a new object like this may have a performance impact, and consumes more memory. * You cannot make changes to Animals prototype or properties and expect them to be inherited by derived classes or objects. Some examples: Animal.eatsMeat = true; function a() {}; a.prototype = new Animal(); -&gt; Animal {eatsVeggies: true, eatsMeat: false} b = new a(); -&gt; a {eatsVeggies: true, eatsMeat: false} b.eatsMeat -&gt; false Animal.prototype.eatsMeat = true; a.prototype = new Animal(); -&gt; Animal {eatsVeggies: true, eatsMeat: false} b = new a(); -&gt; a {eatsVeggies: true, eatsMeat: false} b.eatsMeat -&gt; false a.eatsMeat -&gt; undefined a.prototype.eatsMeat -&gt; false So here's how I handle a classes prototypal inheritance. function Animal() {} Animal.prototype = { eatsVeggies: true, eatsMeat: false }; function Herbivore() {} Herbivore.prototype = Animal.prototype; function Carnivore() { this.eatsMeat = true; } Carnivore.prototype = Animal.prototype var rabbit = new Herbivore(); var bear = new Carnivore(); console.log(rabbit.eatsMeat); // logs "false" console.log(bear.eatsMeat); // logs "true" I've now gained the following: * Animal's prototype and properties are not hidden. I can access them through Animals.prototype. * In derived classes that do not specifically set properties, I am able to change values in many objects by changing Animal's prototype. If this is undesired, the prototype can be copied through methods like backbone's `extend`. Here's an example. Animal.prototype.eatsMeat = true console.log(rabbit.eatsMeat); // logs "true" console.log(bear.eatsMeat); // logs "true" Animal.prototype.eatsMeat = false console.log(rabbit.eatsMeat); // logs "false" console.log(bear.eatsMeat); // logs "true" * This definitely uses less memory as new fields are not defined and initialized during construction.
Get on GitHub and watch jsconf talks to hear about exciting new stuff or new spins on old stuff. 
There was. Towards the end. 
None of their questions were tricks, all were incredibly easy to answer, at least they should be if you know your shit.
Blasting notepad++, booooo. I want to seethe and say f0_k yououuuuu!!!! but you get the point. For the record, I use/have to use 3-4 different editors in a normal day --- Eclipse in linux, gedit or leafpad in linux if I just want to edit something outside eclipse, vi on the command line because I'm ssh'd into another machine from my linux desktop, and then notepad++ on windows, AND google chrome canary developer tools, mapping files to my apache server root so I can edit them and see changes, etc. I'll add another one besides firebug/chrome dev tools --- fiddler2 proxy. Habits?! Cigarettes and coffee? Late late nights? The X lines of code per day was one of the better points of the article. It's simple to say and not so simple to do. 
That really is the proper answer, but knowing that it's a stupid thing to do is half the battle. The other half is being able to recognize why WTF code has stopped working after an innocuous change happens elsewhere.
That's just a poor programmer. AJAX can, and usually does, make web forms much more user friendly.
None of these are trick questions or some BS like trying to make someone code a quicksort from memory in 10 minutes. These are all solid assessments of someone's **javascript** skills. Ask a Crockford, a Resig, or an Ashkenas these questions and they'll give you the answer in a snap. Ask your avergage jQuery jockey and they'll get them 100% wrong or fudge up the answers. Like the guy said, if you're looking for someone who understands the language, these are the types of questions you ask.
How I'd respond to these if they were asked during an interview: - "Your solution for inheritance is flawed and rookie." - "JavaScript doesn't have hashtables, why are you trying to make us both feel dumb here?" - "`alert is undefined`" - "Are you nesting closures like this in your code? If so, I probably don't want to work here." - "The difference between the two functions isn't just hoisting, you're creating an anonymous function and assigning it to a variable, versus declaring a named function." - "IIFE is good." - "You don't know the actual difference between == and === so why are you trying to test me on it?" - "Close, but no cigar on use strict either." I feel like these questions are attempting to insult the intelligence of anyone who attempts to hone their craft as JavaScript engineers. What we have done in our interviews is a mini library with unit tests. You assemble the library and get the tests to pass. We allow you to use Google, MDN, whatever it takes for you to accomplish the tests. This is real world. We want to see how someone thinks and how they approach a problem. It's a conversation, we want to see how you work on a team. We don't care if you've mastered the language. This is why we don't ask these asinine questions. Basically if you want to be a smug and clever know-it-all when it comes to "what really happens", you should actually know.
i like how people here are getting defensive upon realising they don't know javascript &gt;b-but this doesn't count!
&gt;None of these are trick questions or some BS like trying to make someone code a quicksort from memory in 10 minutes. One interview wanted me to write working code for a node walker *on a whiteboard*. I got a job somewhere else...
"First to really break Event emitter (as a solution for everything) pattern was Node.js callbacks style" Couldn't possibly be: $(function() { }); $.get("/", function() { }); Callbacks have existed forever. Node didn't popularize anything, except for (err, value)
Keys in true JSON need quotes as well...
&gt;None of these are trick questions or some BS like trying to make someone code a quicksort from memory in 10 minutes. I agree none of these are on the same level as something like writing quicksort on a whiteboard during an interview (I've seen people subjected to that as well). The map question is purposely written to be superficially confusing. It's using the same words for object names, and string values. A better question would have been "why is the output *X*". The value of a technical interview comes from being able to accurately assess a candidate's demonstrable, practical knowledge of a subject. Not in putting them on the spot or subjecting them to brain teasers.
Pasting my other reply: The map question is purposely written to be superficially confusing. It's using the same words for object names, and string values. A better question would have been "why is the output X". The value of a technical interview comes from being able to accurately assess a candidate's demonstrable, practical knowledge of a subject. Not in putting them on the spot or subjecting them to brain teasers.
Interviewing for a languages is a ridiculous concept. It's like saying you want a plumber, and judging the plumber based on his knowledge of wrenching. If you want to hire good developers, give them questions that test their knowledge of concepts. Have them work out algorithms, design systems, and figure out if they're going to be of any use to you beyond the immediate task at hand. Let them choose whatever language they want, because if they're actualy good they can learn questions like the ones from this blog in no time. If you don't do that, you'll get narrowly focused developers that might be great at wrenching, but they can't do much else. They'll try to turn every problem into a wrenching problem. When tides change and wrenching is no longer relevant, you either lay them off or have a team full of dead weight as you frantically try to hire putty specialists.
There's a lot of exaggeration and marketing hyperbole going on here. I was part of the famous beta- there's no voodoo going on behind the scenes. It's just a wrapper for a lot of known tricks that improve the performance of web rendering. There's no 'side stepping' of WebKit or gecko or any other rendering engine on the browser. It still relies on the browsers rendering engine to draw on screen. The wrappers for css3d transforms and matrix math are nice but nothing you need famous for. They're just trying to make a nice framework for conveniencing it all. 
You are correct, setting the prototype to a new instance of the "base class" isn't correct, since you don't actually want to run the constructor on the prototype. Instead you want to set it to Object.create(baseClass.prototype). So the new prototype is in the baseClass's prototype chain, but no instance of the baseClass is. 
&gt;You dont ask tricky questions just for the sake of tricking candidates They were not tricky, at all. &gt;Most of these questions are just javascript anti patterns. who would use an object as a key in a javascript object? that's totally stupid to ask that. And someone that does not understand javascript would not know this. And again, you do not understand what this article was about. They are offering questions to help weed out people that don't understand javascript, that is all.
Ah, I hadn't seen Object.create on the prototype like that before. Is it correct to assume this does a copy of the prototype?
Object.create creates an object who's prototype is set to the first argument. This is similar to 'new BaseType' except new actually runs the new object throught the constructor function. Imagine if that function called console.log (toy example), you wouldn't want that to happen when you're defining types that derive from BaseType, so 'new BaseType' makes no sense to use. A more practical reason: Imaging you wanted to have a constructor that took a non-optional argument. What would you pass in for that argument if you were new'ing one to act as the prototype of a derived type? It makes no sense, and isn't correct.
IMO trick questions are great for brown bag discussions, not interviewing. Some, perhaps, can show a potential employees thought process in why they answered (possibly) incorrect, and then you can see what they say when you give them the correct answer and ask "why?" IMO the critical thinking/explaining a debug process matters more than getting every question right. 
Please don't ever ship a project you write in NodeJS. Please! ...and you're wrong about the browser. It still downloads the content while scripts load. The resource downloads is most of the time taken in the render. 
On the other side of the coin you have people fellating themselves in front of everyone for knowing all the right answers.
Just begin loading the image, the image object contains width and height.
&gt; Youtube Center Does it remove adds, support prevent autoplay, pre-buffering, and auto chose HD initially? Just so need something that has at least the 2 first ones.
We can agree to disagree here. You are mad and want to argue with someone. I am done obliging.
Or, why would I need the " " in the if statement: var name = prompt("Your first name?"); if (name !== "Tyler") { alert("No match!"); }
So, comparing gender is comparing to "female" in the first example. Whereas in the second example, gender is only comparing to the stored variable...which could be anything? So, does a string ("female") make something more defined (when being compared)?
&gt; employed by many popular JavaScript libraries (jQuery, **Node.js**, etc.) Depending on how things are going in the interview, name-dropping like that might make me dock a point, especially since application-wrapping IIFEs are not used in Node.js (hello, CommonJS and `module.exports`!).
No problem! [This](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) is also a good resource for understanding what a string really is. It may help you with your understanding! 
Thanks! I'll definitely read up on this!
&gt;stringify doesn't accept JSON, it accepts JavaScript objects and converts them to JSON. No keys quotes are necessary. Yeah, I know. Just throwing it out there...
I didn't know html5 needed saving?
vars can contain a bunch of different data types. The one with "" is a string. It's literally just whatever text you stick between the parenthesis var thisVar = "Some text"; //this puts text in it var thisVar1 = true; //this sets the var equal to a boolean value true. Booleans can only be either true or false so true and false don't need "" var thisVar2 = 2; //this one puts a number in it. (the numbers can be decimals too so be wary of that_ var thisVar3 = thisVar2; //this one sets the var equal to the other var and thus equal to 2 (the data type is Object if you want to get technical var thisVar4 = function(){ //this one sets the var equal to a function. probably more advanced than what you need right now though. If you were to print out the value of this variable, it would return a 3 thisVar3 = 3; return thisVar3; }
Asking a trick question about code makes more sense than asking silly shit like "how would you design a spice rack for the blind?" or "how much does the building we're in right now weigh?". The coding trick question is an unexpected question to which the response is interesting regardless of whether the answer is correct. Additionally, if the candidate does answer correctly it shows his mastership. However, I think an interview shouldn't contain more than one or two of these trick questions as they don't tell the full story about the skills of the candidate in front of you.
Knowledge of the nuances of a language is not a measure of someone's skill in actually using the language. A high school English teacher may be an expert on grammar but that doesn't qualify them as a great author. Nonetheless, I agree being able to answer questions about a language can be an indicator of possible skill level and can be a good screener that should be coupled with things like code samples, take-home exercise, interviews, etc. 
I think these kind of trick questions are fine as long as they are used as a tool by the interviewer to open up dialogue with the candidate about problem solving and how they would handle troubleshooting or debugging code. If the "trick" question was answered correctly or not should be irrelevant to the outcome of the interview. It's really up to the interviewer to interpret the response and not to just score on a black and white, correct or incorrect bias.
&gt; The trick is that the Famo.us framework relies on JavaScript [mfw](http://www.reactiongifs.us/wp-content/uploads/2014/03/lol_star_trek_tng.gif)
It's not just about callbacks, event emitter is also callbacks based. It's about how to *fully* process single asynchronous request (it must include error handling as well). There's no simpler pattern than one that node.js provided.
That's a pretty neato trick!! This javascripts thing seems to be catching on
&gt;What made the Internet great was that anybody could right click on a Web page, view the source, and learn to code in HTML. Native apps are a closed environment. You can’t right click on them and see source code. On this point: when was the last time you've seen any source worth viewing on a production site that wasn't minified? Competent front enders have build processes.
Am I the only one who thinks yeoman is kind of useless? What's wrong with git clone?
You need to host your site on a public URL, no way in hell is anyone downloading that thing.
It's just a fad. Java applets are the wave future.
Does anyone know the difference between BoxJS and [RequireJS](http://requirejs.org/)? Or why would I use BoxJS if I already use RequireJS?
var key1 = JSON.stringify({nope: "it can't"}); var key2 = JSON.stringify({nope: "it can't"}); var obj = {}; obj[key1] = true; obj[key2] = false;
Ha, I had exactly that too. It was an interview for this dinky little start-up a bunch of undergrads were doing. Worst interview I've been in. It felt like they based their hiring process off of The Social Network.
At the end of the day, you have to remember that it's hard to remember things in an interview, it's hard to remember little syntax things you haven't cared about for years, and most of all most developers suck.
I did, I asked because I am not keen on using their CDN &gt;**I'm not keen on using your CDN** &gt;Whilst Boxjs is pretty reliable, we can totally understand. Fortunately it couldn't be easier than simply copying the output that you get back and saving it locally. &gt;We have plans to implement a more elegant solution to this in the future. Sorry for not mentioning this not-so-tiny detail, my bad. My aim was to start a discussion about it.
What is this "JavaScript" thing? Some new version of Java?
I have been a long time user of YUI3 and their comboloader (which does the same thing as BoxJS) is one of the reasons why I stayed with the library when JQuery has a lot more and higher quality community widgets and components. This might actually sway me away from YUI3. I do hope they make it configurable in the future so that we can host our own backend to concatenate and minify (much like YUI3's self-hosted combo services) rather than relying on their CDN.
Thanks about the tip (no shim required). I've also enjoyed the "simplified CommonJS form of AMD", but I will stick to the requirejs style.... OR not, excuse me, this feels a lot better than the requirejs way. WOW. The problem with requirejs way is when you have too many requires and have to match the string to the argument, but your solution solves this problem. Now I've been replaced completely this system. Now I made a custom route proxy that works both on server and on client and is asynchronous. You can see an example here: http://playszone.com/
what's wrong with 2 spaces for indentation?
Why is someone doing car._mileage = "owned"; a problem but Reflection.set(car, "_milage", "owned"); (or similar - available in all mainstream languages with "true private" in one way or another) is not? 
Well nothing I suppose, but when everything else was wrong though. It did just look like a wall of text with 0 legibility. Needless to say I had to pretty much rewrite all the code, as it was poorly done and was very slow to decipher what any of it was supposed to do.
This is what I'm getting: You really like JS and you want to get better at it and start using it more often, but your company requires you to be a generalist and there's nobody else around you from whom you could learn JavaScript. So here's some suggestions based on that. Sorry if I'm reading you wrong. You could stick it out where you are and start attending local meetup groups to do with JavaScript. There'll be some inspiring projects there and people talking about JavaScript who might have a better understanding of it than you. You could start working on some JavaScript projects in your spare time and posting them here on /r/javascript for us to discuss and critique - after all, we're you're peers :) Alternatively, if you're feeling gutsy you could apply for a job as front-end developer somewhere and do your very best to get it. You'll learn faster in the deep end. You could get a new job somewhere that you know has good JS developers from whom you could learn but it may be difficult to position yourself within the company that way if they want you for your PHP skills. At the very least I'd recommend this: work on some JS projects in your spare time and open-source them, put them on your github.com profile (if you don't have one, get one!). Think of things you've done in PHP and re-implement them in JavaScript. Make sure you open-source as much as possible. You'll be much better poised for taking a pure JS job if you've done this. Hope that helps.
Yeah isn't this this the reason we use Express with node?
 function getImageSize(url, callback) { var image = new Image(); image.onload = function() { callback({width:this.width, height:this.height}); } image.src = url; } getImageSize('http://blah.blah/foo.jpg', function(imageSize) { alert( imageSize.width, imageSize.height ); }); 
I disagree with the idea that we need privacy in Javascript. First of all, _nothing_ is private in Javascript, since I can modify the script any way I want before I run it. Second, encapsulation doesn't have to be enforced by anything more than good manners. The common idiom is to add an underscore in front of a property to mark it as private/protected, and that's all you need. If somebody wants to go around that and use it anyway, _that's their problem_. Python has no private members at all, Java has them but they can be circumvented with reflection and C++ members are open to anybody who knows the class layout in memory. The point is that you should **stop worrying about encapsulation**. It's not necessary and you're using valuable development time protecting against something that is easily circumvented anyway.
So you are saying lower the bar? When someone says they know JavaScript and then can't solve a simple closure problem, they should get a job.
&gt; If somebody wants to go around that and use it anyway, that's their problem. Well, actually... If you are working on a team, and the team values encapsulation, then you have a number of tools available to you to "enforce" encapsulation. I personally take the view that hard-core enforcing encapsulation is a culture smell. Why is this other person checking in code without somebody reviewing it and complaining about their choices? Convention helps with culture. All those little underscores reminds everyone that the team values encapsulation. There are fancier encapsulation techniques that are valuable for other purposes, and they also serve to signal what you value. But it isn't so much about preventing someone from doing something as it is having your code clearly indicate how it expects to be used. 
If I'm using a dependency management tool, then I do not keep copies in my repo. Otherwise, I keep a copy of the non-minified version.
&gt; The reason this works (and actually provides privacy) is because the only way to access the private instance is with the key function, and the only way to access the key function is to be in the scope where its declared. If you always define your classes/modules within a closure, and your key function is within that closure, you can have truly private members. What this appears to be suggesting is this: If I use a closure for every object, I can have private data, but at the expense of making a new function instance for each method of each instance I create. I can't add new methods after the fact that access private data, because they aren't in the scope of the closure for each object. If I use a closure for defining the method in my prototype *and* I use `PrivateProperty`, I don't need to create a closure for each instance I create. I still can't add new methods after the fact that access private data, because they aren't in the scope of my `_` accessor function. This is an improvement on vanilla JavaScript, but we still need to be aware that it does not fully interoperate with certain types of JavaScript "metaprogramming." If I understand this correctly, you cannot add a method to a prototype after the fact that accesses private data.
In GitHub, if you keep the dependency, the diff will be very ugly and redundant :(
You should *not* be keeping dependency files in your project repo (for webapps), as this can lead to stale libraries. [Edit] Libraries are obviously a totally different ballgame. Use [Bower](http://bower.io/) to manage the dependencies in a `bower.json` file, and be sure to add the `bower_components` directory to your `.gitignore` file. As long as that `bower.json` file is in the repo, anyone who clones your project will be able to obtain the dependencies. Remind potential contributors to run `bower install` after cloning the repo. Alternatively, use a CDN. 
hmmmmm. At the moment im working on finishing updating a project I have been working on :) Obviously I should maintain the best/favourite project though :) So do you think its worth throwing up rough project concepts on Github even if I dont think I will do much more with them? Would releasing loads of small, not finished projects be a good idea or would it look bad for me if I have loads of small rough little projects?
Hmmmm yeah thats the sort of thing im starting to think at the moment. I know my employer wont give me a payrise/promotion at the moment as its not quite viable. There should be no reason to do so in a month or two though, so I may see if I can incentivise them if they dont start atleast bringing up the subject. &gt; once you get a better offer elsewhere you can use that to incentivize your current employer to pay you more now. So if I was to do that, would it be best to say, go for an interview and get an offer then tell my employer? Or look for other jobs and then tell them, "I could probably apply for x job which is better and probably get it"?
It depends on the type of the project. If it's a library that's intended to be consumed by other projects, then the dependencies shouldn't be checked in to the repo. But if it's a standalone web application, they should be. From Bower's homepage: &gt; N.B. If you aren't authoring a package that is intended to be consumed by others (e.g., you're building a web app), you should always check installed packages into source control. Addy Osmani has written a more detailed blog post about this: http://addyosmani.com/blog/checking-in-front-end-dependencies/ 
The official Bower advice is to check the dependencies into source control if your project is a web app. If it's a library that will be used by others, in that case *don't* check them in.
That is awesome, thank you!
&gt; If you want private properties, use property descriptors &gt; if you want private methods, man up and use priviledge methods to access with private methods. Don't both of these techniques have the tradeoff of requiring a closure for each object you create? I'm not saying that's a bad thing, but unless I misunderstand what you're saying, there is a tradeoff involved as the technique in the article avoids requiring a closure per object.
This would be good advice if the bower (or npom or whate ever) packages were not so full of cruft and bloat. The amount of unnecessary files you see in your modules folders is astounding. Why the fuck do people publish their unit tests in the distributable? Why do we need the source, the concat, the UMD wrapper and the minified versions all at once? What is all this junk doing in my repos? 
The project is Corvus. At the moment the Github doesnt have an actual README, so it doesnt really say much about what it does. https://github.com/ilikeprograms/corvus Its basically a Content Management System for Portfolios, im using it to power my website/portfolio at the moment. Looking forward to finishing the update so I can push it to my own site :) Im redesigning it and hopefully bringing the standard of the code up, making it use twitter Bootstrap and redesigned the front/backend. Im practially finished updating it, but I do need to finish a few more things, then do the README etc and maybe look at making a website for it using Github Pages. Heres some screenshots: http://imgur.com/a/jFxof#0 and heres my website (as you can see in need of a redesign :) http://ilikeprograms.com/
&gt; You should not be keeping dependency files in your project repo, as this can lead to stale libraries. This is wrong. Even NPM states that, except for libraries, you should check in your packages. https://www.npmjs.org/doc/misc/npm-faq.html#Should-I-check-my-node_modules-folder-into-git The part about "stale libraries" confuses me. It's not any different than specifying which version of a package you're using in a project. You're doing this, right? Updating packages just because a new version is available is, in most cases, is the wrong approach. Visual Studio and NuGet check dependencies in by default. Most common Linux distributions check their dependencies in (can you imagine having to download all of them before installing). PHP projects using composer? You betcha.
Just FYI, beware posting so many links to your own site, reddit admins ban for this all the time. The general rule of thumb is that 10% or less of your submissions should be for your own site (see [/wiki/selfpromotion](http://www.reddit.com/wiki/selfpromotion)).
I agree 100%. It's astounding the amount of crap that gets pulled down for a bower install.
&gt;Updating packages just because a new version is available is, in most cases, is the wrong approach. That's why it's important to use the `bower.json` file and specify which version of the dependency is necessary for the project. 
Using $.get() you are essentially requesting a page from the server via XMLHttpRequest (XHR or more commonly known as AJAX). [Link](https://developer.mozilla.org/en/docs/AJAX) 
My best advice to you is to be proactive and communicate openly and honestly with the people in leadership at your company. Explain that you want to grow and learn more in the area of JavaScript development and ask people in leadership if there will be opportunity to do that. Discuss how you feel you've added value to the company and come up with a plan on how you want to direct your future growth in a way that will help add more value. Don't just quit or start entertaining the mindset that you are going to switch jobs, figure out what's most important to you and make a goal list. Timebox it, 1 month, 3 months 6 months, 1 year: where do you want to be in those timeframes? Bring that to the people in leadership and give them a chance to help you achieve those goals. Then, wait and see what the response is; re-evaluate your objectives and the outcomes after 1 month and then 3 months, if it's not working and you aren't growing then at least you will have concrete things to say to leadership if you do end up leaving :)
&gt; How is this not server side work? It seems like, via JavaScript, that its connecting to the server, and running a PHP script. This is true. But it's true in the same way that a browser does it when you type in a url. The browser isn't doing server work, it's requesting something from the server, after which the server does the work. Think of it this way; When your toilet is broken, you call a plumber. The plumber fixes your toilet. You didn't fix your toilet *just* because you called, but the toilet was fixed because you made a request for someone else to do that work.
You're welcome, but FYI I *am* the author. And thank you for recommending "JavaScript Allongé!" Reminder: It's free to read online https://leanpub.com/javascript-allonge/read
"receiver[kemethodNamey] = template[methodName].bind(privateProperty);" I imagine kemethodNamey should just be methodName. Great article though.
&gt; kemethodNamey Thank you!
I don't think it's necessary to keep the dependencies in version control of the application itself. Instead, they should be bundled with the *build*. One can keep the builds in version control, or store them somewhere else.
I've used mixins as the basis for my little library http://www.github.com/Akkuma/Rome (it could be improved, since I built it for a commercial project and haven't had too much more time to work on it) after being inspired by Angus Croll's approach that you referenced. Both myself and the other dev loved this approach as it kept things DRY and it didn't have the penalty of any deep prototype chains. This was a great article to read on some other approaches with similar benefits.
When you perform a get, you are "invoking" server side work. JavaScript is not DOING the work, it's merely asking the SERVER to do the work. Big difference.
You, sir, are responsible for catalyzing my growth as a JavaScript developer. And now I see you have a blog with so much more deep knowledge than most js resources out there. Double awesome.
That doesn't answer his question and, in general, is not a productive way to answer someone's question even if it did correctly address it.
Another technique is to use singleton prototypes: var singletonPrototype = {}; var object = Object.create(singletonPrototype); extend(singletonPrototype, MixinOne, MixinTwo, MixinThree); You have the flexibility of mixins and can still use things like `hasOwnProperty` to distinguish domain properties form behaviour.
Also "This is not how out .bind system worked above." Out should be our. Just proof reading for you haha
You can, you just have to have a way to control the private key. The Mozart project inked in the article is an example of this. Subclassing extends the prototype after the fact and uses some metaprogramming as well.
Also on your "another way to achieve privacy through objects" example the forward function is actually broken (has a close }); uncessarily) and also attaches 0,1 as methodNames since you're passing in an array.
Great catch, thanks!
In the wee hours, I converted a .forEach to a `for` loop thinking it would make the essay more accessible. Not only is that not true, but it's broken. I've reverted that code.
I think this is really useful. Any reason for the downvotes? Is there a better way to obfuscate your data in JS?
Good analogy!
AH, I'm a fool. You were likely trying to do a closure to preserve the methods[methodName] otherwise netWorth function will always be called regardless.
+1 for toilet analogy. :)
Host a private bower instance so you always have a Bower available.
You rock! Thank you. If I had money I would give you gold.
Which I can only commend. Although I can't wait for ES6 and lazy iteration being better integrated in the language.
I guess I should've also mentioned that I'm doing it in svg. Svg you need to define image width and height in the image tag. And to make it dynamic I needed to figure out a way to adjust the svg image element on the fly.
Trick questions test the candidate's ability to catch trick questions. I suppose that's applicable if your company prefers tricky code.
Bad habits from early exposure to Smalltalk and Scheme.
Honestly, it's much simpler to check out the (basically static) dependencies into your VC at that point
I don't know about you, but with a project that's about 3mb, I'd rather not tack on another 20-30mb of dependencies. It is much easier to set up a private bower, especially when working in a professional environment. 
&gt; A better question would have been "why is the output X". That's a good point. If they can discern that the issue with the code is that all of the keys will be the output of Object.toString they know what they need to know.
Kind of a self defeating and useless article about hiring. Good study guide though.
Only useful knowledge this isolates is what is the result of Object.toString will be, which could have been more directly gleaned by asking what would be the output of foo+'';
You can compress a whole project to a one minified file using [grunt-contrib-requirejs](https://github.com/gruntjs/grunt-contrib-requirejs)
"Most developers suck" Ah, there's the reassurance I needed today! At least it's not just me! 
&gt; What we have done in our interviews is a mini library with unit tests. You assemble the library and get the tests to pass. We allow you to use Google, MDN, whatever it takes for you to accomplish the tests. This is real world. That's beautiful.
the browser is able to send HTTP requests over the network. your AJAX call isn't doing any work on the server. its just asking a server to do some work for you. the request is sent out and then the browser waits for the response. because its an AJAX request the browser will receive the response and store it in the background instead of reloading and rendering a web page. 
As far as client side application goes, it's not really obfuscating since they can always just inspect your source to find out what your hash is. It might instill a false sense of security but if someone really wants to grab your data, they can. The backend applications have far more use, and in those cases, these technologies often have encoding standards of their own.
Not a single line of code, this is more like an overview of the concepts behind writing a chrome extension. 
why would you check in your dependencies? Just curious. The only advantage i can see is you wouldn't have to run 'bower install' everywhere. i suppose it would protect you if you're deploying and bower is offline also but is that it? Personally I don't find either of those reasons compelling enough to justify all those noise it creates in your history but maybe I'm missing something. 
&gt; Remind potential contributors to run bower install after cloning the repo. You'd be surprised (or maybe you wouldn't) how many times I've had that break the build for the new contributor due to these package authors making backwards-compatibility-breaking changes in minor version updates. 
WHAT?????!!!!
Raganwald: May I ask how you have so much insight into the javascript language, and what your background is in general? You're one of the few writers who can publish something where I learn something new, or change my previous pattern of thinking after reading every other paragraph. I'm a huge fan of Allonge, and found myself sitting on a beach in Maui a few weeks ago, absolutely glued to my kindle the whole week of my stay; probably the most enjoyment i've gotten out of 'technical book' in years.
This is avoidable by specifically listing dependency versions in `bower.json`. I think a lot of problems come about when people have something like this: "jquery": "2.*" or "jquery": "~2.1" They really should be specifying exactly which version they want. 
**Why the fuck not?!!?!?** Do you know how hard it is to go X versions back, on 8 different websites, for the dependencies? Some fuckers remove old versions..... the new versions don't compile with the project...... **Put your dependencies in your fucking project so people don't have to play "Hunt the X Version dependency from 2012!** for 18 fucking days. Do you know how fun it is to ask on Stack Overflow, then Experts Exchange, then Reddit for a fucking dependency version that you can't find online any more?! Do you? If you did, you'd know to INCLUDE THE FUCKING DEPENDENCIES WITH THE FUCKING PROJECT. FUUUUUUUUCK. Edit: Oh, JavaScript... I thought we were talking compiled libraries for Android or Linux or such....
Was just about to type this exact comment in. With amazing tools like browserify + npm for dependency management and gulp (or grunt) for build automation; what value do I get with a service that provides a severely watered down version of the tools I mentioned above and introduce another point of failure in your stack?
I hate interview questions like these. They are modeled wrongly after tests that are given in school. It would be far better to talk about these subjects with the candidate. Ask them what their thoughts are on prototypical inheritance. Or how they would explain to a junior programmer about hoisting or closures. You would learn so much more from about how that person thinks. And how a person thinks is far far more important than understand some stupid language idiosyncrasy.
Passionate response
It is avoidable by doing that, but I shouldn't need to. They allow ~2.1 for a purpose: so I can get updates and fixes to my packages that don't break backwards compatibility. If i'm going to start pinning it to exact package versions I might as well just copy the built library directly into my repo. http://en.wikipedia.org/wiki/Semantic_versioning#Semantic_versioning
Maybe because the title doesn't explain anything at all?
&gt; Edit: Oh, JavaScript... I thought we were talking compiled libraries for Android or Linux or such.... LOL Although, given how nice NPM and Bower are for JS dependencies, I wonder why nothing similar has taken off in the Java/Android world....
Unfortunately, there's no quick win with this - Prototype augments JS primitives and has a very specific API that relies on that. To be fair, you would have the same time switching from most JS DOM centric libraries. JQuery is not a framework per se, and I would recommend moving to a modern MV* framework rather than just moving to jQuery, as most of them abstract DOM interaction and HTTP to some degree - which will hide you from the specifics and perhaps give you a bit more flexibility to change your stack at a later date. Don't get me wrong, if you get into bed with something like Angular, you're definitely writing against an idiosyncratic API, but the core of your logic will not be tied up in DOM manipulation. 
Yep. I've actually made a sheet of things I need to look for but it'd be awesome if I could run some kind of check against it that can return "Yep, no prototype functionality is still in use. Mission complete." The system is quite large so testing everything manually will be exhaustive and it's entirely possible we might miss something. Down side to that is, we only release once or twice a year so it missing anything would be less than ideal. :) I've looked into JSHint and I think we're going to add that to the build regardless. It'll definitely be a step in the right direction to a better code base.
I've rarely seen an app fully based on webviews work well. Almost always slow and buggy. Instead of trying to be all things to all platforms, go native and pull in webviews where it makes sense. 
I use this: http://anthonyterrien.com/knob/ Works really well.
I hadn't thought of that. Though, editorialized titles are often way worse, IMO.
I wrote the code for a semi cool extension, but I was really put off by the needed screen shots, promo image, upload process, and I gave up.
Nice. I can't see the docs :( it says my number in line is 73972. wtf. This framework better be good.
You do not "decrypt" a hash. If you can, it's not a hash. 
I maintain a lot of old Rails applications from when prototype.js was built in, but prefer jQuery. What I do is just include both and then call: jQuery.noConflict(); Then when I want to replace some prototype.js code with jQuery I just wrap the code like so: (function($) { // jQuery stuff. You can use $(...). })(jQuery); Eventually once all the prototype.js code is replaced that wrapping code can be removed.
Yes. Like /u/SarahC said, "Why the fuck not?" Keep everything together in a single repository. It's easy and saves endless hassle down the road. Even if you use a dependency manager like Bower, there's lots of ways that can fail you. See http://www.letscodejavascript.com/v3/blog/2014/03/the_npm_debacle for details. *Edit:* Things are more complicated when you're shipping libraries for use with a dependency manager, but that doesn't sound like what you're doing.
I just want to say I am a huge fan of yours and your writings. And almost all I know about applying functional programming in JavaScript is thanks to you.
maven?
&gt; because x() cannot reach back and touch a’s private state. giggity? yeah ok I'll grow up some other time
Both ends of the spectrum I guess. I had to check which subreddit it was before I considered clicking on into it.
I think there was at least one version of that copy that used an expression like "fiddle with `a`'s naughty bits."
I'm curious about languages and libraries, especially if they have some new semantics. I remember what when I was a kid, I was mystified by SNOBOL and just worked on it until it clicked. Later I got interested in thinking, and I now find semantics interesting because they say something about us and the way we think. I find that writing code and/or words really forces me to think a thing through, so that's why I try to blog.
&gt; It seems like, via JavaScript, that its connecting to the server Yup, a connection to the remote server is initiated by a function call in your javascript &gt;and running a PHP script This is where your understanding got muddled; the javascript that made the request isn't "running" the PHP script; the web server hosting the PHP script is "running" it... the javascript just asked it to do that.
You're can start by formatting your code so that we can read it (see the formatting help link).
Dammit. Because span doesn't have any children. ul is a child of li, not span. Still, I'd appreciate help fixing it. 
Got that, too... $('.top span').click(function(){$(this).parent().children('ul').slideToggle('fast')}); I'll leave my derp here in case it helps someone someday.
Just for the record, it's actually pretty specific to prototype. Jquery and most modern frameworks leave primitives alone. Backbone is a nice MV* abstraction on top of JQuery. In fact, most mv* frameworks use jquery as their base so sooner or later you end up using it's API. Backbone has an easier learning curve than Ember or Angular, you might find it a good starting point. 
That isn't the point of this article. It isn't about finding good software engineers, it is not about finding problem solvers, it is not about anything but finding people that understand JavaScript. Take it at face value and stop reading into it. I have had to say this so many fucking times in this thread, the one and only goal of this article was to give tips for employers to weed out people that do not know JavaScript. That is it.
alright done!
I use == 99.9% of the time. It does exactly what I want. Honestly if your code actually requires === to work, there is an incredibly high chance that you are doing something you shouldn't. Maybe it comes from loving statically typed languages, but I really think you should know what types you are comparing before you do so.
May I ask, why are you promoting the concept of *avoiding* prototypes? The more we tell newcomers to JavaScript to "avoid the confusing parts", the less we encourage people to actually think and learn about the language they're using. Prototypes are beautiful. They're elegant. They allow us to avoid Object notation which can be messy. We can write code that works with constructors, which is a familiar breath of fresh air. They're explicit, with the exception of having to set MyObject.prototype.constructor when dealing with inheritance. They're more memory efficient. And mixins can still be used effectively, if you feel most comfortable using them. I understand the goal of this blog post is primarily to teach, but "... Without prototypes" makes it seem like you're encouraging people to avoid an extremely useful and robust part of the language.
I did answer the question. I said... &gt;It uploads your files to the BoxJS servers. Files are then minified, compiled (if coffeescript), concatenated and cached. The single compressed file is served from the boxjs server. That is what is different about BoxJS vs RequireJS.
should be `.top li span`
I simply cannot ignore it as GitHub list all the diff in one page. I do not like to see the diff which are not mine.
i am 5872.. hehe 
/r/LearnJavascript is thattaway
I feel like Grunt will be seen as "betamax" while Gulp is VHS http://en.wikipedia.org/wiki/Videotape_format_war 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Videotape format war**](https://en.wikipedia.org/wiki/Videotape%20format%20war): [](#sfw) --- &gt; &gt;The __videotape format war__ was a period of intense competition or "[format war](https://en.wikipedia.org/wiki/Format_war)" of incompatible models of consumer-level [analog video](https://en.wikipedia.org/wiki/Analog_video) [videocassette](https://en.wikipedia.org/wiki/Videocassette#Cassette_formats) and [video cassette recorders](https://en.wikipedia.org/wiki/Video_cassette_recorders) (VCR) in the late 1970s and the 1980s, mainly involving the [Betamax](https://en.wikipedia.org/wiki/Betamax) and [VHS](https://en.wikipedia.org/wiki/VHS) formats. VHS ultimately emerged as the pre-eminent format. &gt;==== &gt;[**Image**](https://i.imgur.com/Rmvd4ex.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Betavhs2.jpg) - *A Betamax cassette \(top\) and a VHS cassette.* --- ^Interesting: [^VHS](https://en.wikipedia.org/wiki/VHS) ^| [^Betamax](https://en.wikipedia.org/wiki/Betamax) ^| [^HD ^DVD](https://en.wikipedia.org/wiki/HD_DVD) ^| [^JVC](https://en.wikipedia.org/wiki/JVC) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgpf6i9) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgpf6i9)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
&gt; weed out people that do not know JavaScript. Are you aware of any skills tests out there that cover these subjects? Interesting that "knowing" JavaScript would require familiarity with subjects not covered by any such tests.
Dude, I am sick of arguing with people about this. If you don't want to take the article at face value, then don't but I am done with people in this thread. edit: Not to mention whether or not something is or is not on a test is a stupid fucking metric to decide if that thing qualifies as knowledge on a subject.
I usually add the library itself to the repo and don't commit the bloat of other files bower loves to add. Only downside to this is you still have a shitload of files on your local that can never go away. bower will immediately re-download everything if you delete the crap and go download another dependency.
they just added the documentation: https://github.com/Famous/famous/blob/master/README.md
Look into TamperMonkey. It's a chrome extension that allows you to run UserScripts that use all the native GreaseMonkey APIs in Chrome
I love a good toilet analogy.
So you are checking to see what shade (1-6) a wall is based on how far away from it you are?
Exactly my reaction. Why do I have to take so many screenshots with so many different sizes. 2 of my promo images were rejected because there was too much text in the Images. :P I still made the plugin...not so cool plugin but comes handy for my purpose when working on responsive sites. Here: https://chrome.google.com/webstore/detail/responsive-view/hgeefdjnmmeindmchabjodoggbfkhaam
I've never used Dart before, and I've never researched the technology behind it, but if I had to guess, the better GC implemented and optimizing VM (which I'm reading as a VM that does JIT compilation) lets it be nearly as fast as NodeJS. Keep in mind that NodeJS still has quite a few layers of Javascript between the user's code and the HTTP request/response, so that will incur some overhead. 
Well there's your problem. Stop using GitHub for viewing diffs.
:)
What the rules of the game are was quite clear. I made a lot of mistakes due to clicking the right button though.
link to it since this is a self post: [WinJS](http://msdn.microsoft.com/en-us/windows/dn632015)
Oops! And there's no way to change that once its been posted. Added it to the post comment, thnks.
I'll be brief, there is a new JS framework that promises a new approach that could appeal to you. The beta started yesterday so there is not much info except for a full doc and some guides. It is called Famous : https://github.com/famous/famous
Also note that Chrome doesn't keep track of how many times you've injected your script. You can inject duplicate event handlers and weird things will happen. The idea is to send a message to the page first. If there is no response, inject your script that has a listener for the message. The second time you try to inject the script the existing script will respond with a message that prevents duplication.
This is a really good write up on it: http://addyosmani.com/blog/checking-in-front-end-dependencies/
&gt; dart was written in dart and nodejs was created in c The Dart VM and V8 are both written in C++. Both VMs are libraries which can be embedded in other applications. That's what Node.js did. It embedded V8 and exposed some new hosts objects for doing IO to scripts running in the VM. The standalone version of the Dart VM, which is shipped with the Dart SDK, allowed you to do IO from the very beginning. (The SDK is also shipped with a package manager and a tool for generating documentation.) In browsers, the 'dart:io' package isn't available (for obvious reasons). So, Node.js and the standalone version of the Dart VM are conceptually actually very similar. Since the Dart language was designed with performance in mind, it's easier to generate fast code and you also only need to generate about 1/3 of the code you'd have to generate with JS. That's the kind of advantage you get if you keep some things simpler. For more, see slide #35 and up: http://commondatastorage.googleapis.com/io-2013/presentations/209%20-%20fast-code-is-always-in-fashion.pdf ([talk](http://www.youtube.com/watch?v=huawCRlo9H4))
I suspect there's a slight confusion here. In Javascript (and most common languages), `\n` inside a string literal isn't placing \ and n in the string at all; `\n` inside a string literal is converted when your code is parsed, and understood as an actual newline; the string in memory *contains* an actual newline character. HTML doesn't do this, so the `\n` inside your HTML code is simply understood as `\` and `n`. When your JS reads a string from any source that isn't a string literal (quoted text inside JS code) it is not parsed, it does not convert escape codes, it takes the string as is. In general, it doesn't make much sense to convert `\n` to NL in strings from other sources because those sources can generally include NL characters directly. There are, of course, potential situations where, for some reason, the source can't contain newlines, but as it stands [your fiddle isn't one of them](http://jsfiddle.net/uW7Fv/1/). `\u0027s`: HTML has its own escaping technique (entity codes) to encode unicode characters. In HTML's case, they are parsed and converted **as they are rendered to screen**; `element.innerHTML` will return a string containing these codes in their original form. If all you're going to do with these strings in the end is place them back into the HTML that's totally fine, as they will still be decoded before they are shown to the user. But if, for example, you intend to perform a per-character operation against the string, you probably want them to contain the proper unicode characters. There are ways to read decoded text from elements if that's really what you need. Ultimately, an HTML document should contain HTML encoded text.
I'm browsing on mobile now and their doc site doesn't render well in safari. Maybe not the best choice for a mobile UI framework but I'm still interested in checking it out once I can read the docs..
I literally was just laying in bed thinking about something like this
Use Google maps and it's associated api.
Cool, I couldn't watch the video at the time. Thank you.
create the html/css structure (left and right) and bind an event on hover. You can have all the right boxes hidden or use a json to load the correct information inside a single box
Winjs already showed up on this and a few other sub's. Many people have complained about how many features are IE specific still.
Why not use github issues?
Imagine, if you will, a book about making wooden chairs. It will describe many designs and discuss many, many different construction techniques. Screws, glue, dowels, cookies, dovetails, all sorts of techniques. It will discuss hardwoods, softwoods, bent plywood, everything. If you try to furnish a house using all of the techniques in that book, you'd get a horrible and over-the-top mishmash. And you'd wonder what is the point. You might look at a standard wooden dining room chair, and ask "What the hell does the author have against a perfectly good and time-tested design?" And the answer is, absolutely nothing. The idea is really to go ahead and build a standard wooden chair, but to understand what the benefits of the chair are relative to all the other ways to build a chair. And maybe, once in a while, you might make this instead, but only once in a while, not every day: http://www.bonluxat.com/a/Gerrit_T._Rietveld_Zig_Zag.html (I have two of these in my little cottage, I use them as end tables.)
Has anyone tried it yet? This project has had the vaporware stink on it from the beginning, so if it actually turns out to be good it would be very interesting to see.
My bias leans towards not checking in dependencies with libraries. My reasoning is that with a library you can support a wide range of versions and want to be as compatible as possible. If you checked in Backbone for your plugin you'd be working with a different Backbone object and the one included by the developer would not be augmented. With applications, I've been on the fence about checking in dependencies. If you're simply using Bower and NPM for developer dependencies, it's probably fine to not check them in. If your CI fails because a package manager was down, it's easier to trigger a build restart. What you don't want to happen, is deploy to staging and have everything work fine and then push to production and have a build fail because of a package manager or GitHub or something external going down. It should be locked. There should be no chance of a package being deleted from under you or a version mismatch causing failures.
I like having the issues/feature ideas in my own database :) 
That's probably a bit overkill for something this small. 
You say you have a solid knowledge of html/css. Great, that's all you need. You can use an unordered list. The UL is positioned relative and has the map as its background; the LIs are positioned absolute. When you hover over an LI its background image changes (flashing icon) and the LI's content becomes active/visible just as it does on the flash version.
do I need yeoman for it? Never used it^^ I am just wondering if I should take a look at it b4 im actually thru that q
upvoting for clever.
I don't think the information in the "superclasses are not encapsulated" section is entirely correct. Classes and subclasses don't always share access to private properties. For example in Java, this is simply not true. Private properties in a base class are private to that class, that's it. So I don't think the reasoning based on that assumption holds water very well.. Other than that I do agree with class hierarchies being a too simplistic and a mostly harmful semantic tool, in programming.
I'd probably use ULs for the content on the right, but use the MAP tag for the actual map, revealing the related LIs on the right on hover. All done with still HTML/CSS. MAP tag, that's what it's for, after all. edit: it's a popular question on SO. http://stackoverflow.com/questions/15649184/image-hover-when-over-area-map
It seems to me that an image map would add more complexity when it is perfectly fine for the hover area to be a rectangle. Additionally, you'd want the information to be available on hover, not on click; it's been a long time since I've used image maps, but clicks are the default IIRC... for hover support you'd need to include some JS or even nastier HTML/CSS.
I don't think I would hand this article to a Javascript newcomer. And it didn't seem to me that the author was discouraging the use of prototoypes. I heavily rely on prototype/pseudo-OOP-style architecture in the library I'm working on, but I've always felt a little dirty about the way I use mixins. Thanks to the author for helping me articulate why I feel this way, and providing some alternate paradigms to consider.
1. this isn't my book. 2. I'm not sure what comment you're talking about. I don't remove any comments except for spam or ludicrous comments with no ground to stand on. 3. I haven't done a giveaway in over a year. 4. I didn't realize having a review of a book and then a giveaway for a book was "spamming". 
area:hover can show content without js, when area is a self-closing tag? Please provide working example.
The AREA tag supports all the global attribute and events in HTML and 5. I don't know why you're demanding it be without javascript, the OP is fine with it. I've never tried AREA:HOVER, so I don't know if it'd work - he does have onmouseout/onmouseover events that bind to the element. He'd get irregular polygons out of it (whereas the absolutely positioned elements are only going to produce square/rectangles). How is it :hover works for IMG, then -- that's also self-closing. :-/ 
thanks for the kind words, already figured out how to use the library by myself :D And I had one of this "i-should-have-a-blog" moments... I could have posted a "how to"... 
thanks... :S 
For the first part, just do a setInterval to increment the counter by 3 every second. Having everyone see the same number would require the counter to be running on the server, and the current number passed to the client on page load. Or just use websockets.
Technically yes, but how meaningful do you want/need it to be? My thoughts are you would actually calculate the counter value on the server side. Each client would pull this value down on page load, with some JS to "live update" the value every 1/3 of a second. This should be fairly accurate depending on how long the user has the page loaded. If you need to ensure further accuracy, a simple query to the server to reload a new initialization time value could be done, at which point the JavaScript takes over again and continues adding to the value. The server itself should not need to actually count anything, instead it would just use a unix time stamp with calculation to derive the value you want. I don't think you can guarantee the value be synced to the second over multiple clients, since the master timer will always be a second or two ahead (think: page load latency, browser overhead).
The string is coming from a java entity that was JSONified. JSON.parse was the correct solution. To resolve string starting with a T, you have to wrap the string in quotes, because valid JSON must start with a literal quote if it is a single string. Thanks for taking the time to answer!
Yup you're correct - as I was posting the question stack overflow I asked "is there a way to unescape the newlines?" which made me consider doing a string.replace('\\\n','\n') which worked. So I did the same for \r and \u but unicode doens't work that way, the entire sequence is a special character that needs to be replaced. \\\u0027, \u0027 but then I saw an answer about JSON.parse and that fixed everything.
Sorry, but famous is nothing of the kind. It promises to be a renderer for graphics and a physics engine in HTML independent from canvas/webgl. It does nothing for interaction between a native backend and a HTML/CSS/JS frontend. Even the claims it does (rendering in HTML with physics on non-webgl devices with superior performance) are highly dubious and have not been proven. If they succeed I will be very happy and try to learn it promptly but don't spout it as the end-all-be-all of application development without it being proven. If you disagree I would love to see where in the [docs](http://famo.us/docs/0.1.1/core/Context/) you see native integration. I would love to be proven wrong on famous capabilities since it's promises are revolutionary. We simply haven't seen it yet.
so... bootstrap?
You could use the current time. Create an offset and a multiplier (3 per second would mean multiplying the current time by 3 / 1000) and you'd have each client synced without a server. An equation for today being zero would be function getCounter() { return (new Date().getTime() - new Date("April 11, 2014 13:40:00").getTime()) * 3 / 1000) }
excuse my ignorance but is this like jekyll but running with gulp? or more like [kalei](http://kaleistyleguide.com/)?
Appears to be more like Kalei. It builds documentation sites such as http://resource.github.io/fabricator/toolkit/index.html
I went to the github page, and read through the wiki a bit, and I still have no idea what this project is supposed to do for me.
It builds documentation sites such as http://resource.github.io/fabricator/toolkit/index.html I agree that their github page leaves a lot to be desired, but it's a pretty new project that I stumbled across and thought I'd share. I'm building a style guide documentation for my company and tried a lot of different tools such as Styledocco, KSS, and others. I came across this, and it worked the way I expected it to out of the gate. Still some bugs, being that it's still a juvenile project, but it's a pretty great start! 
Claiming to create "websites, style guides, documentation, xyz" is confusing. It would be better to just claim "documentation style websites". Seems to be very basic documentation with no search as well... 
Precisely. Do you have one in mind you would suggest for improvement?
If you're so bored, rewrite them in angular way.
Good thinking in general. I disagree about the experience being bad when the password is not in the field on refresh, however. Storing passwords in cookies or sessions securely is a non-trivial problem. I'm perfectly content with re-entering my password and knowing that its plain-text representation is not stored anywhere.
let me know when the star in GitHub is 66297 https://github.com/winjs/winjs/
Thank you. I wasn't 100% sure, and was confused by the random console print of 50. It's already hard enough when I'm trying to teach myself, I'm hoping the computer doesn't lead me astray :P thanks
Oops. I guess I assumed, since all you posted was a link to github. We see that a lot in /r/javascript, and it's usually the project creator.
CoffeeScript and HAML. Hurray! /s
I think they call your function twice more to check the right result. So the first result is the function call from your code and the other results are from the testing program.
Actually - you know what? They might be running your function through multiple iterations to make certain that you're coding it correctly instead of hardcoding the return value. So they might have done: orangeCost(5) And orangeCost(10) To make sure you didn't just have a function that has console.log(25)
http://weknowmemes.com/generator/meme/427780/
It seems that Codecademy calls your function twice to test if it works. The first result is your own call, the second 25 and the 50 is from Codecademy. If you change the code like this: var orangeCost=function(p){ console.log(p*5); } orangeCost(3); The output will be: 15 25 50 and it still passes. Actually you can even output a lot of additional nonsense. Actually even this code passes: var x = 0; var orangeCost=function(p){ x += 1; console.log("test: " + x); console.log(x * 25); } orangeCost(123); output: test: 1 25 test: 2 50 test: 3 75 though it has nothing to do with the task. 
It's a another module-starter with a stupid fucking name. Shit is getting old.
I guess I could see building out API documentation and such on this. Being that it's open source and a junior project, feel free to contribute and add in search ;) 
I thought Blog Spam was bad, so no point in linking to a blog post I never wrote. We've already established their project github page is pretty limited, so no point in linking to that. Basically leaves linking to github. I can't be held responsible because someone refuses to read anything, research anything, and then assume everything. Not you, but original OP. I can see how you're just trying to help :D
***CleverTech***??? Are they serious? Since when is being *clever* a good sign in software? It is the scourge of interns and juniors everywhere. If you're above junior level and dare to be *clever* your seniors should have a little talk. Anyway, I see a lot of buzzwords and a colorful screen design. If you think the video is cool you need to watch more videos, I think it shows nothing that impressive. (well, the automated narration voice is cool, wonder where they had that done) &gt; CleverStack Modules &gt; ***Failed to load modules list :(*** Yea, about that..
Have you checked out the cousin of 'setInterval()' : 'setTimeout()'?
Not bored, plenty inspires me, just not in the realm of jQuery plugins as of late.
Same thing I ended up having to do. This tool made it really simple, separated the concerns of CSS, HTML, and Notes (markdown). 
Is that literally your code there? If so you're missing {} after the IF and ELSE. The behavior you're describing suggest that the interval is being called multiple times, so it might appear to speed up. Where is your setInterval code? You might want to place it in the onload call.
&gt;Failed to load modules list Didn't notice that; apparently they have their own module repository as well... looks like they didn't learn anything from the Meteor folk
That's why client side validation is so important for the UIs. It's not there for security, it's there to provide immediate feedback about the form completion, therefore improving the user experience.
&gt; Meteor Oh dear god help us. They have this tagline: &gt; Explore the most popular, trusted, and reliable packages to install in your apps. While in reality most of it is packaged together regular npm/bower stuff some kid wrapped up and dumped on their custom walled garden package manager.
I do not think you should store a password in cookies or session. I used localStorage for other form data. For a password, if you are doing server side rendering you can just re-fill the form field when you render the page again. But a better approach would be to use Javascript to validate before the form is submitted so that the server doesn't have to respond with a negative.
Derrick Bailey has a new blog, that doesn't mention [Marionette.js](http://marionettejs.com/) at all? [Announcement](http://lostechies.com/derickbailey/2014/04/01/leaving-lostechies/) He also seems to have left Kendo. I really do love marionette, I hope it didn't just lose it's author. 
Of course not. I'm more trying to point out that handling secure data is a difficult problem, and the safest solution is to not handle it whenever possible. I would argue that passing the password back in the form is unsafe. Why transmit it twice? I agree with the JavaScript part. I'm only talking about non-ajax submits.
drunkenfaggot [BEAST] you win handle of the year
wat
Read the documentation for mouseover/mouseout, the event handler takes an Event object which has a reference to the element that triggered the event.
Any notes on performance? How much slower is this to a basic (non-private) prototypal inheritance strategy?
Can someone please explain how this is correct? var testValue; !function test() { testValue = 3; }();
I had already tried event, and evt.target/currentTarget, but I couldn't work it out.
&gt;What's wrong with just git clone'ing a project you want to use as a template and just hacking on that instead of buying into some company's vision for how projects should be structured Nothing. Projects like this actually seem to demonstrate that people *aren't* using project generators in production. Everyone is releasing projects like these, because they all assemble their own tooling.
evt.target is your best bud here. I'd recommend using it with classes for your image sizing, rather than hardcoding your values in the JS where it might be more difficult to track down later. [demo](http://jsbin.com/naseg/5/edit)
`function test() { testValue = 3 }` is a function declaration (not an expression), so if you tried to add `()` to the end of it, you get a syntax error. Adding ! to the beginning converts the declaration into an expression and it is therefore immediately invoked without having to add parentheses around the function declaration. You can do the same with `(function test(){ testValue = 3 })();` but the single exclamation saves a byte. Useful if you're writing 1k JS apps. 
I find it very confusing that I can submit almost every random answer and it still say's that it's correct.
Parent is right, and your question is kind of unclear. You only want it to flip once, period? Use setTimeout. Want it to keep flipping until some point? When you declare your setInterval, give it a variable name. Then later you can say clearInterval(interval); Here's a [demo](http://jsbin.com/guvix/3/edit) of the 2nd method.
Huh, that is one of the weirdest bits of JavaScript trivia I have seen. From my (admittedly naive) understand of parsing, I would think that if `!` starting an expression treats the following function declaration as part of that expression, the `!` must be binding more tightly than the invoking parenthesis `()`. I would expect `!function test(){ x = 1 }()` to be equivalent to `(!(function test(){ x = 1 }))()`. That does *not* work because it reduces to `(false)()` which raises a `TypeError` for obvious reasons. Instead, `!function test(){ x = 1 }()` appears to be equivalent to `!((function test(){ x = 1 })())`. That is, the function declaration is evaluated as an expression, then invoked, then the result is negated. I would think that writing a parser that handles that case correctly is much more difficult, since it must track context during parsing that influences the parsers behaviour. TIL 
http://i.imgur.com/7Xqnlww.png &lt; Pff. I got this down.
Don't write jquery plugins. Write modules and publish them to npm.
"this is one of the causes that it should not be to operate with floats" -- wat
"'This is happening because the hoisting problem. Remember that in Javascript there are no block variables.'" I put "hoisting" and it said incorrect. You should be looking for keywords or just do multiple choice. Does your code expect the user to put in that exact sentence?
\#4: "Fix the code to :" -- Fix the code to what? You've got a fair number of typos dude. 
Lots of sites do it, and it's horrible. However, they're not doing it correctly... they should be replacing the browser state, not pushing new ones onto the stack.
I think you need to change your project. What you are describing sounds reasonably complex to program, and to try and go from zero knowledge of programming to the level required in a month would be nearly impossible.
a pic with blocks over it that disappear on button click? just make a div with a set width and height, set background to image. add other divs with set width and height to block squares (think checkers board) of the image. use display:inline-bock on them so they fall into the correct place (provided you set width and height correctly and corresponding to width of parent div). set their id's to 0-8 or however many blocks you want to cover. can do that in a for loop, just "for 0-8: append div with ID". add class "block" to these divs. set class block to have solid bg color that will obscure image. For the reveal pattern just have an array of the order you want the images to disappear in, on button click pop int from array, set block with id == that int transparent. edit: looked at your pics lol. something totally different. If you don't know where to start with that I think you'll need to work with someone in person! 
http://imgur.com/mEbbLZD Hmm.
I need a plugin that can attach to &lt;select&gt; &lt;option&gt; in a dropdown. 
link to demo?
Try: Videos[i].getElementsByTagName("media:player")[0].getAttribute("url") 
thank you :) I ended up using the ID instead, which is laid out the same way as the title. it has the bonus of not having to filter out on both ends of the videos unique code, as i only have to add each character from the end until i hit the '/' and then stop using that string. then i am using it with youtubes embed code var unProcessedURL = (Videos[i].getElementsByTagName("id")[0].childNodes[0].nodeValue); var processedURL = ""; for (j = unProcessedURL.length - 1; j &gt;= 0; j--) { if(processedURL[0] != '/') { processedURL = unProcessedURL[j] + processedURL; } } processedURL = '&lt;iframe width="560" height="315" src="//www.youtube.com/embed' + processedURL +'" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;'; document.write(processedURL);
I've never used a `&lt;select&gt;` list with "many, many" items -- does the `multiple` attribute get inefficient when there are a lot of elements ? edit: ah, I read the readme -- this is more about retrieving elements that have been selected.... something like [HTMLSelectElement selectedOptions](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-button-element.html#dom-select-selectedoptions)? For my two cents, if I needed a polyfil for this, I'd add the method to the prototype and use `querySelectorAll` looking for `:checked` elements.
A generic form pluginn that warns users when they have changed any value before leaving the page with out submitting the form. Any changed form-element 's borders could be colored differently after changing its value. Made one myself once but never got it really working on select and checkbox items.
This book doesn't really teach, but inspires to think about and look up certain things that are tricky but mostly useful knowledge about javascript. It's still very rough on the edges. I send you some pull requests to improve it...
I don't think YouTube et al encrypt their IDs at all. I think they're just using random hashes as IDs in the first place (makes it easier when you're using a distributed database and auto-incrementing isn't really possible). Also, if your "hashes" (OP seems to think "hash" just means "opaque alphanumeric string") are persistent, they're effectively identical to IDs, so unless you switch the key frequently or per-user, you're not really obfuscating anything other than the exact internal IDs the strings map to.
Then split the commits.
One option is to use a [canvas](https://en.wikipedia.org/wiki/Canvas_element) element, and this way you can the feedback for drawing (lines, points, highlighting) easily. You'll probably want to use a library to save time. [PaperJS](http://paperjs.org/examples/) is one option, but there are many these days, and I'm out of touch with the latest&amp;greatest. Some of the libraries help handle mouse events, with others you'd have to program this yourself.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Canvas element**](https://en.wikipedia.org/wiki/Canvas%20element): [](#sfw) --- &gt; &gt;The __canvas [element](https://en.wikipedia.org/wiki/HTML_element)__ is part of [HTML5](https://en.wikipedia.org/wiki/HTML5) and allows for dynamic, [scriptable](https://en.wikipedia.org/wiki/Scripting_language) [rendering](https://en.wikipedia.org/wiki/Rendering_(computer_graphics\)) of 2D shapes and [bitmap](https://en.wikipedia.org/wiki/Bitmap) images. It is a low level, procedural model that updates a [bitmap](https://en.wikipedia.org/wiki/Bitmap) and does not have a built-in [scene graph](https://en.wikipedia.org/wiki/Scene_graph). &gt; --- ^Interesting: [^HTML5](https://en.wikipedia.org/wiki/HTML5) ^| [^Scalable ^Vector ^Graphics](https://en.wikipedia.org/wiki/Scalable_Vector_Graphics) ^| [^WebGL](https://en.wikipedia.org/wiki/WebGL) ^| [^Comparison ^of ^layout ^engines ^\(HTML5 ^canvas)](https://en.wikipedia.org/wiki/Comparison_of_layout_engines_\(HTML5_canvas\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgqi9ed) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgqi9ed)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Pollyfilling host objects, such as HTML elements, is unreliable. Lots of troubles with IE.
To be honest I would just use nginx for SSL termination and upstream requests into node JS listening on a local port. But nice to know it can be done fully via Node. 
change setInterval to setTimeout. this will fire only the first time, not multiple times. 
It should just be a "simple" matter of editing the .js files. Not sure how it works with safari, but for chrome we can access all the files in each extension and edit them anyway we see fit. It's just that i'm kind of very crappy at javascript. Else I would've done it my self :(
Yes i can unpack the ext and i see the files. Just have to figure out what to edit. Sucks, because the previous version of the ext was fine, then it auto updated and i lost it with no way to revert or re download the previous one =(
thanks, i was hoping to find 1.8.165 which was the last one this month before the "paid" update
&gt; code for IE6, IE5 Really? 
I don't get it. John's "solutions" to his stress problems would make me even more stressed out.
Same here!
Getting stressed over work... Work more!
You might get better results posting your question in [/r/learnjavascript](http://reddit.com/r/LearnJavascript) or [/r/jquery](http://reddit.com/r/jquery).
I never really thought about it until I needed it, but you can't actually work with 64-bit integers in JavaScript. Which can be a hassle when you're reading files or interacting with network protocols that use 64-bit integers. So I wrote this library. :)
For not filling up the history, we use `replaceState` which just replaces the URL without pushing on the stack. It works great! As for the banking one, the solution in that case is partially server side. When the user gets to the credit card form they are given a unique id for the transaction. If they submit it again or refresh the server sees the id already is in use and just shows the spinner animation again or "finished transaction." 
the TL;DR / point of what he was saying is that, instead of putting off your side projects until the weekend and then "code-cramming" all day to make progress (and ultimately be disappointed when you're unable to achieve the expectation you set for yourself that day), a healthier approach is to simply put in a small amount of time (he said at least half an hour) daily to make smaller but continual progress. Basically the "slow and steady wins the race" mentality. I think it's pretty beneficial, I've been trying to incorporate something similar into my routine. A half an hour a day is not very much and allows you to feel each "little accomplishment" more.
I think it makes sense that if the source of your stress is "not getting things done," then the solution would involve dedicating more time to working on projects, and putting a little bit of structure around it. An alternative for some people might be to just accept that you're not going to do all of the things you want to do, and start removing projects that aren't as important to you.
The beauty is that he is not dedicating that much more time to work on projects. He just split the time over the whole week. Instead of going at it full time most of the weekends he does a little every day. Instead of going at it over the weekend for 16+hours you can go at it 1 hour a day. If you now go and work on maybe one day on the weekend in addition to that you still reach about 16 hours of work, but got a whole day on your weekend off to relax. If you skip that extra side project day (except for the daily hour) on the weekend you even got 2 days to fully relax and still got the feeling that your side project is going along.
I agree completely. When you're trying to accomplish your goals, when you don't work (at least in my case) my stress level goes up a lot.
I hope you realize CommonJS (not common.js) is a specification for a system level library in JS. It's not really a single library, but rather it has several implementations. The most popular implementation of these is Node.
This is silly. Part of the reason Mozilla may not be interested in Shadow DOM is because I brought it to the attention of several Mozilla developers on their IRC service that Shadow DOM may conflict with my patent application. This means that if the patent is granted they could be at risk in the future, so proceed with caution. A more valid reason for Mozilla to not adopt Shadow DOM, or anybody else for that matter, is that it is only immediately beneficial for serving interactive media, particularly advertising, that is not associated with the content of the page. There are all kinds of potential malicious traps in that regard considering legitimate ad purchases have been used to serve malware and fund RBNs in the past. The bottom line is that Shadow DOM is not catching on because it is a bad idea and nobody benefits from it more than Google.
* Don't use document.write. I really mean **NEVER**. * If the XML is received asynchronously then it needs to be parsed. There is not a standard way to do this, but it is not hard. Look at the JavaScript in this tool I wrote as an example **http://mailmarkup.org/xyz/** Look at lines 1796-1807. * Once the XML is parsed you can navigate its DOM exactly like you would an HTML page.
Is this book downloadable? Is it free temporarily, or is it always free? I hope the author doesn't take the site down.
There was a reply here, but I guess it was deleted. I wrote a lengthy response, so here is how I am responding to the reply that would have been. _____________________________________________________________ I have removed my downvote. I am really biased on this subject for emotional reasons. Here is the back story if you are interested. 6 and a half years I started working at my previous employer. Before this previous employer I came from the email world. I had to write HTML and CSS to be embedded in email. This was the year that IE7 came out and I had to simultaneously support the wrong box model of IE6 and then everything else. I remember people crying about cross browser support on the web because there were like 4 web browsers. Boohoo, in email there are dozens of clients, mutilation from the servers, and then there is webmail which was really tough. I managed to figure out how write dependable durable CSS for that environment, so when I came to doing web work anything related to CSS was cake. At this previous employer on day 3 of employment I was asked to write the code to style the CEOs internal news letter. After providing very specific delivery instructions to the design manager I was promptly ignored, the code went out, and its presentation was not stellar or durable. I attempted to explain why this occurred to the design manager, why my instructions were important, the nature of the situation. Again, I was ignored, and clearly this failure was my fault. At this moment I had a series of epiphanies. * When the complexity is no longer interesting to presentation or interaction you will always be wrong with regard to web technologies. * This is clearly a technical problem that I had spent very long learning to mitigate. * The combination of the two prior revelations suggests I should attempt to solve the problem. I set about trying to create a markup language for email. In writing my new language I would eventually discover that this had been attempted a few times in the past, but the prior attempts did not actually address the technical problems that would require a markup language in the first place. It took me a about a year and half of my own time outside the office, but I did solve this problem. I created a markup language that could replace the text formats described by RFC 822/2822/5322. There were several novelties, at least I think so (you can never really be sure) in this language, because if I needed something and I could not find appropriate guidance I would just make up my own solution. There are two extremely valuable novelties in this language: * An extension to the DOM so that an encapsulating DOM contained island children who had barriers to prevent their collusion apart from each other. This was necessary to preserve the integrity of communications in the conversation of an email thread. * I created a content structure so that a markup language could very easily be made accessible out of the box by default without any effort from a code author. The first of those two points is documented in several claims of the patent application. This was exceedingly important to me, because I feared the web would screw this up in an effort to increase ad revenue. The best way to protect the concept from abuse was to patent it so that I could release later under a restrictive FRAND license so that it is still royalty free, but used as intended to do good and not evil. The second of those points is not described anywhere and is not protected. I cannot foresee its abuse and consider accessibility to be an absolute and inherit good that web developers have long forgotten. I recognized in reading the HTML specs a conflict of language. HTML is supposedly not a presentation language but the structure of its elements are defined as block or inline where those terms are defined in presentation terms. There are elements like *p* that are defined as a block level element, but cannot contain other block elements, so somehow this element is different than other block elements without so being described. My solution was to call this out specifically with a structure of complex blocks, simple blocks, and inline elements. Complex blocks could contain complex blocks or simple blocks but not text. Simple blocks could only contain text and inline blocks. Inline blocks could only contain text. If this structure is broken the schema definition would break and the document would not render. I am emotional about this subject because I see a tremendous amount of potential in processing the data that is on the web in a way that only the current giants achieve and struggle to barely do this. Interpreting web data and cross referencing such are capabilities that should be open to everybody provided cheap software and a sturdy data foundation. For a long while I could not get the time of day on this from anybody except the corporate lawyers. It bothered me that the only people who saw potential in this were a small handful of people with no technical background. In the past few weeks I have strongly considered moving forward with idea as a startup, but I need to find some cofounders who can program in Java, C++, or the like.
I wrote about compiling 'common.js'--it's in quotes on purpose.
 var chase = bruiser.chase chase()
You never used the 'that' variable in your code. The extra reference to _this_ is needed when you return another function from one of your methods called in context. For instance, if you called 'dog.play()` and that returns a function, 'stopPlaying'. For the 'stopPlaying' method to have a reference to dog, you would need to give it a reference to _this_ in a closure. this.play = function() { this.playing = true; return function stopPlaying(){ that.playing = false; }; }; 
I write code everyday on my side projects. It is my way to relax. I find it an escape to work with an incredibly architected codebase with streamlined processes using advanced tools and libraries. My day job is challenging, but frustrating sometimes.
Perused quickly and looks really good. Bookmarked for later. This is the sort of stuff we need. 
Oh god, please, no. People need to stop telling people how to work on the assumption that their way will fix all their problems. If you want to be a workaholic, or if this works for you - good! I'm happy for you. But personally I'd rather kick back and let my brain rest for the weekend so I can come back and be productive on Monday. This is just ridiculous.
This is correct. You'd have a change each of the methods to return `that`. There are other ways aside from using `that` at all. * Bind each method to `this` when assigning them to `this.instanceMethod` in the constructor. `this.chase = function(){ … }.bind(this)` * Bind `bruiser.method` to `bruiser` when assigning it to the outside variable. `var chase = bruiser.chase.bind(bruiser)`
Ahhh ok, I see the danger now when returning a function. This is a perfect practical example, thanks! 
Or you can have a life away from computers sometimes...
I've heard of using bind - I'll study that more. But I'm a little confused about the other code causing an error... this seems to work fine with what I currently have: [fiddle test](http://jsfiddle.net/phillipkregg/d3eYp/) Since it's a constructor function the 'new' keyword sets the binding. At least that's the way I understand it. That's why I was originally unsure of what purpose using 'that' would play. But autosponges comment below cleared it up for me.
Traits and talents look really good, and are 100% compatible with prototype chains, classes ES6, &amp;c. Have your cake and eat it too!
It's module pattern doesn't really solve the same corner of the problem that commonjs/require.js do. The marionette modules really have almost nothing to do with loading the modules, but are really about what 'running' a module means. I use them primarily because they allow for : 1. __the fact that they can be nested and auto initialize__ _(so creating App.System.Subsystem automatically creates a App.System module if not yet created)_. 1. __allow for initializers/finalizers__ _(so they can start and stop)_ 1. __They are all event aggregators.__ Meaning you can route events between subsystems very easily. (so you can have an App.Storage or App.Auth subsystem). I do hear you about the frameworkiness though. While they could probably be broken up a lot more, the way it's packaged now only has slightly wider scope than backbone itself. It packages some new base views, a little bit of event magic, a little bit of router stuff and one actual new top entity: the module/app. It doesn't have anything relating to models. 
The problem shows up when you try to do `chase().testfunc()`.
Yeah, why not right?
Ah, brilliant - makes perfect sense now! Cheers!
Alright. I'll look into that.
I'm interested in helping with this; I had a similar idea a few weeks ago but never did anything with it, it wouldn't take me very long, and I need some more material for my portfolio; this would be a great opportunity to learn the MEAN stack better. First, would it be considered cheating to get external help on implementing this, or is the grade for the idea and the film frames? Do you have an appearance for it in mind already? How would you like the input? It could either show you a space for each individual letter in the title (like Wheel of Fortune) or just have a normal text input that ignores capitalization and punctuation (but not give the user a clue on the length of each word) Were you thinking of having it be a fixed course (linear progression through a certain number of levels?) or just have a pool of levels, choosing random ones so the game is different each time? With the second plan, you could have difficulty levels (5, 10, 15 movies?) and be able to add levels at any time. Do you need a high score board? You can reach me at brianrowe@alumni.ecu.edu to answer these questions and ask some if needed.
ok, im trying to use that for the viewcount, but its not working. i even tried it with media:player and url to see if that would do it, but that didnt work either.
This is another example of when you could use bind instead of `that`. this.play = function() { this.playing = true; return function(){ this.playing = false; }.bind(this); };
~~so i should use element.innerhtml instead?~~ nevermind, found the relevant lines in your code
&gt; Interestingly, in both cases the this value will refer to the Constructor object, which will be myConstructor. wut? The following should be all any developer needs to know about `this` `obj.function() =&gt;` `this` refers to `obj` `function() =&gt;` `this` refers to the global object `Function.prototype[call || apply || bind] =&gt;` you get to say what `this` is 
Can't help but hear this in Nate Dogg's voice.
http://pastebin.com/HfzXBcUA hows that? takes a lot longer to write, and appears to give the same result.
achen2345 i'm going to repost this elsewhere i have posted the link for this petition. your story deserves visibility. my apologies for deleting the thread i did not consider this.
Despite the arguably linkbaity title, I don't think John is talking to you here. "Write code every day" *is* ridiculous advice for most developers, but "write code every day if you're passionate about your side projects and your current habits prevent you from relaxing with friends on the weekends" is pretty reasonable. If you don't have the same problem John has, then he's not recommending this solution.
Lol damn you beat me to it!
Way to contradict yourself.
Code generated by Emscripten must have a similar 64 bit integer emulation layer, do you know if they separated it out to a library?
Excepting, of course, when you write: obj.fn.bind(other) obj.fn() =&gt; this refers to other, not obj
You've found the trick I think. Programming can be fun if it is to the exclusion of everything else on the 'free time' schedule. 
Working on what John works on, I am thankful that he is this much committed. He is cutting through the dark miasma of the future when he codes. I can only respect the way he navigates those full stops that stump him. I know I could only code comfortably in my side projects when people have gone before me and shown the way.
They apparently just [reuse the code](https://github.com/kripken/emscripten/blob/master/src/long.js) from [Google closure compiler's library](http://docs.closure-library.googlecode.com/git/class_goog_math_Long.html).
Woah. It hadn't occurred to me it's possible to inject traits in that way. This is sick.
Heatmapping by line is great as displayed in the gif, but does it work by expression? A good part of code coverage is revealing which statements are always true or false, those are points to optimize.
I think they have a 64-bit math library of some kind yes (seems to be modified Google Closure Library + asm.js from a C library): - https://github.com/kripken/emscripten/blob/master/src/long.js - https://github.com/kripken/emscripten/blob/master/src/fastLong.js
Douglas Crawford, JavaScript Huru.
Does ES6 dependency injection fulfill the same role as angular's? He defines his todo class in a separate file and exports it to the controller, whereas your might use a factory or service in current ecmascript angular. edit: also in the class TodoList, the author comments "this.todos" could be a map if traceur supported maps, but you can't/shouldn't iterate over maps in angular with ng-repeat anyways. Spent like 20 minutes trying to make it a map https://github.com/angular/angular.dart/issues/359
&gt; `Function.prototype[call || apply || bind] =&gt;` you get to say what `this` is 
I'd use the yeoman community generator "angular-fullstack" and swap out the mongo for the mysql. It's a full app boilerplate ready to go, maybe it will help you.
If you're using Angular, you can use ui-router.
I'm new to Javascript, but my native language is C, so I'm always concerned about optomization. What makes this faster than my solution? My guess is the use of .next() rather than .children('ul').
I think it works either way, but this is probably cleaner from a style perspective.
Your solution is executing two selector functions: `parent()` first and then `children('ul')` to search for the `&lt;ul&gt;` element you want. With `next()` you are only using one selector function to get the DOM element you want. You can even use `next("ul")` if you have more than one element next to the `&lt;span&gt;`, so it means you are searching only for the next element that is a `&lt;ul&gt;`. Update: [Here is a test case](http://jsperf.com/parent-find-vs-next-ikertxu), each new browser you test this with will be added to the chart.
One question: Is this compatible with Node's Buffer type and if not, why?
Yes, you can use Buffer as underlying type (as well as simple Array of bytes, binary String, Uint8Array etc.) and work with it through high-level API.
Sorry. That's not what I meant. I was asking if it was a drop-in for the Buffer API in the browser.
Nope. Buffer API is much more low-level and there are already polyfills (i.e., https://github.com/toots/buffer-browserify) for it if that's all what you need. Also, you might better want to check out DataView (http://www.khronos.org/registry/typedarray/specs/latest/#8) - aka-Buffer native replacement for browser, brought by WebGL, and there is jDataView (https://github.com/jDataView/jDataView) library that combines and polyfills them both through single DataView-compliant (and somewhat extended) API so you can use DataView API in any browser or Node.js. On other hand, jBinary uses jDataView for providing developers easy way to describe any file format and use it in their web apps without any need for native extensions or even directly in browser.
You can very easily configure express to use ejs which uses old school erb style tags like &lt;%= %&gt; if that's what you are into. Otherwise good ole handlebars and mustache can be used. It sounds like plain html with tags to insert the values is what you want right? 
Are you having this problem on a website you're creating, or on every website you visit? If it's the latter, it sounds like a rogue plugin doing something it shouldn't - disable them one at a time until you find the one that's causing it. If it's the former, we need to see the code and what line number the error is being thrown on.
1. Try disabling any addons (including greasemonkey etc.) 2. Clear your cache (Ctrl + Shift + Delete) 3. Update flash player 4. Restart browser
I am not creating a website, I just want to view videos, which are not loading for me if they're not on youtube.
The easiest way to get around using jade is to just 'include index.html' from within your index.jade file.
Only plugin I have is adblock which I just installed after this post.
I think you want /r/chrome.
If I take a link that doesn't work in Chrome, it works and loads instantly on Internet Explorer, I haven't tried Firefox as Chrome is always what I have used.
I usually use [EJS](https://github.com/visionmedia/ejs) for the main view, then let Angular handle the rest of the routing (standard HTML templates).
Never, EVER use IE as a reference for things that should work.
The error you see if something coded by the site and doesn't have anything to do with Chrome. The problem is the site owner's alone. Tell them to fix their code. However, the error you show may or may not have anything to do with the problem you are having.
"Never, EVER use IE as a reference for things that should work." Well it works on Internet Explorer so explain that then. Mozilla Firefox also does not work, but again Internet Explorer works. 
Well the sites work fine for my friend and he uses Chrome as well, videos load instantly for him. As I said, if a video loads, that error never shows, but when a video does NOT load and eventually shows "video file not found" that syntax error is present. 
Yep, I plan to support that as well. We're already getting the instrumentation for free with istanbul, its just a matter of exposing that functionality to the user.
Assuming you are looking for honest opinions, it's pretty bad. The font (VT323) is awful and weirdly aligned, and that bright green background isn't doing it any favors either. I would pick a cleaner font, make sure the padding of the box is more consistent, and choose a less harsh color combination. I'd also recommend you check with /r/design_critiques , they are usually pretty helpful. Edit: I'm posting this because I noticed you are getting a lot of down-votes without explanation, and assume this is why -- just trying to help.
Yes, that's correct. I am having trouble separating the {{mydata}} used in Angular from what I need to use in the templating language to define my layout, header, footer, content, etc. I am thinking I only need EJS (et al.) to generate my templates, beyond that Angular's data tags will suffice.
I will give this a try, thanks.
I am on the same page. I will try to implement that approach. Just enough to establish the templating and partials, then let Angular handle the rest. Thanks for the reply.
I will have to read up on ui-router. Thanks.
Since you are new to the MEAN stack, I recommend you taking a look at Meteor(www.meteor.com) - it is a different node.js based framework which already comes with MongoDB support, view engine, data synchronization, asset pipeline, etc.
IE is an inept browser. The web developer's mantra is, "If it works in IE, but not another browser, your code is wrong." If it works in IE, then it was by luck and not design.
Then the problem is your installation or your computer but this is the wrong forum for your question. It is not a javascript issue nor something you can fix with it.
See also [Big.js](https://github.com/MikeMcl/big.js/)
Welp, thanks I guess, I've removed java/chrome/firefox and all multiple times for fresh installs and still same issue is that one syntax error in the console.
Pretty interesting .. I worked on something pretty similar a few months ago, which I hope may be of interest to you: [link](https://github.com/omphalos/earhorn) I'd put that project and this one in the same category as [theseus](https://github.com/adobe-research/theseus). In general, I think instrumentation is a powerful and underutilized tool for JavaScript. With an instrumentation-based tool that's sophisticated enough, we could have something far better than what static analysis provides for JavaScript. Imagine instant execution (like a properly-scoped REPL) and 100% accurate autocomplete. This could all be done by instrumenting functions with references to eval, and remotely calling the correct eval from your editor whenever you want to instantly-execute or perform an autocompletion. You'd be doing your coding against a live environment instead of just the a representation of one ... 
I would reccomend the ByteWiser tutorial on http://nodeschool.io/ for those wanting to work with binary in js
That's super cool!
Yes use what will make you productive then. I will mention if you find the time, jade does have some good properties and in some ways can enforce good practices on you so its worth digging into. However, I also like the idea react is propagating where being able to render the same content on the client and server through the same execution path will become more and more important overtime. While its possible with jade, it adds a bit of complexity to share templates on both imo. Anyway...the one thing to consider is that ejs will not allow partials in the current version iirc. However, express will essentially let you use whatever view engine you want with a bit of configuration. There are even some modules for using underscore templates. Its just really seeamless with ejs and jade.
I don't think you'll need a templating engine. If you're using express 4.0, you can send down the static HTML file that has all your includes and stuff easily. Check out **res.sendfile()** Currently I have an index.html file in a client/ folder, so I'm just sending that down through res.sendfile, and that page has all my JS includes, default stylesheets, title, main ui-view for my app, etc. Angular should handle all your templating needs.
Nice, thanks! jDataView / jBinary actually allow not to dive deeply into each specific implementation and not to care about APIs - Buffer API, DataView API, Typed Arrays, binary strings, FileReader API, XMLHttpRequest2 etc. - everything is incapsulated through feature detection under single API (backward compatible with DataView in jDataView and JavaScript-compatible declarative syntax in jBinary) but understanding how every implementation works inside (and not just using APIs) is for sure important for any good developer.
One post above, I linked the version i got from their website on like April 2nd. I'm not sure when they released 1.8.165. Maybe 1.8.165 was only a Chrome store release and not the "full" website version. The linked 1 allows you to sideload the extension, however it seems that the auto quality and download links do not work.
At least it scales pretty nicely, but it's not pretty. It's not a "bad" logo. But if you;re going for nice, pretty etc. than you should probably ask a designer or illustrator to make something for you :)
No, you really shouldn't. It's just painful to use compared to jQuery, with no real advantages that I'm aware of. 
As in the framework: http://prototypejs.org/ ? Or as in the internal JavaScript thing? e.g. var Person = function (options) { this.name = options.name; this.hourlywages = options.wages; } Person.prototype.salary = function () { return this.hourlywages * 8 * 5 * 4; // day week 4-week-month } var john = new Person({name: 'John Doe', wages: 20}); john.salary(); // returns 3200; As for the framework, I wouldn't know. As for the internal, I'd say that depends. What are you building, making? I find it really useful, if you make something from scratch, or if you're playing around with a a pseudo Object Oriented approach. Other than that, I can't really say. So my question back to you, what do you think you need it for? Or why do you ask? **Edit:** If you're interested look at the Mozilla Docs, they're quite thorough: [MDN: Prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype)
https://github.com/janl/mustache.js or google "javascript templating" for more options If you wanna build your own, the css display:none, element.innerHTML and RegEx are your friends...
React, open source lib from FB, can do it very well. I'm not sure what level of experience you have, there may be 'quicker' solutions, but react is very interesting and I'm surprised it's not mentioned more here.
Doesn't it depend on what someone is using it for? I find jQuery very painful for lots of situations.. 
If you're talking about the framework Prototype.js, then probably not. Prototype.js was mainly used in the days before JQuery - now most of what you would have used Prototype for has been improved upon by JQuery, although there are a few niche things that people still use Prototype for, mainly because it's more lightweight than JQuery.
I particularly use [Handlebars](http://handlebarsjs.com/)