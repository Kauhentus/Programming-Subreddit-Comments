The magic is really more in Chrome (and soon, Firefox) than jQuery.
Brevity.
Very true, jQuery is just following the spec. However, for many this may be the first time they've seen or heard the concept. Since jQuery decided to use it I would imagine more people will be exposed to it, which is great!
You are actually correct, it is indeed a singleton, though I think you're getting downvotes because that's not the pattern in question.
Others have provided an answer, but I'd like to bring up one con that isn't mentioned: it breaks `instanceof` (every object will simply be an _object_), as well as prototypal inheritance. If you don't need either of those, then the revealing module implemented as a singleton should be fine. 
Not going to keep replying to FUD, but I just wanted to point out that you never actually say __why__ any of this is bad. Saying "it's bad because it has recursion/custom elements/is unhealthy" is the same as "it's bad because it's bad." &gt; If HTML is gaining recursion without gaining formal admission to the Turing-complete pantheon... I'm assuming you're just trolling at this point.
When setting up variables / properties that have to be filled later, I assign null to them. That way, if I later use them and they are null, I know that the code that should have put values in them hasn't run. If they are undefined, however, that means there is a bug in the code that should assign values to them. This works well in modules and makes debugging them much easier because I should already have an idea where to look for errors in the code.
yep &gt; TypeError: "undefined" is read-only
It's ridiculous, is what it is. You can get the exact same public and private segmentation with a bog-standard constructor function. function constructorFunc() { var myPrivateVar = "foo"; this.myPublicVar = "bar"; function myPrivateFunc() { return myPrivateVar; } this.myPublicFunc = function myPublicFunc() { return this.myPublicVar; }; return this; } But you can do that one better by pulling your public methods out and attaching them to the prototype (that still works!) and only construct those functions once (assuming they don't need any of the private methods). function anotherConstructor() { this.publicVar = "foo"; return this; } anotherConstructor.prototype.publicFunc = function publicFunc() { return this.publicVar; }; Either of the methods above have the exact same impact on global scope as this "pattern" has, while these don't break prototypal inheritance and should construct faster on V8 (and probably other JS engines by now) because V8 can optimize it into a C++-style class.
Oh ok, in the network tab I'm seeing the GET request each time, but the status says "cancelled". Not sure what could be causing that. EDIT: Chrome seems to delete pending requests, setting it to run Async solves this, however my requests get no response data. 
I've been avoiding it because on the project I'm working towards, I've already learnt quite a few new frameworks and languages, which are some what time consuming. I don't think I have enough time to learn another.
...well clearly, but what I'm asking for is thoughts on difficulties, edge cases, or complexities when using Angular and canvas rendering. If you say "There are none!" then I'm going to expect some reasons why.
xmlhttp isn't being use anywhere else, and I've declared it with var now, still no change.
honestly, a homegrown solution will suck more than any off the shelf product.
Labeling the last argument to a function as 'undefined' makes it far too easy to accidentally define it. i.e. call the function with (stuff, true) and now undefined===true in that function. When you're tossing functions-as-objects around your app and passing arrays of args it's really easy to overlook an unexpected extra declared argument. I've never understood why 'undefined' isn't a language literal like 'null'.
Time constraints of learning a new framework/library/language.
Thanks for all the help guys, it's working now, heres my fix: Added response header from the server "Access-Control-Allow-Origin: *". This stops the domain policy problem. After this it works in Firefox, Chrome and IE9. 
Fixed now, that was basically the origin of my problem, thanks a bunch!
Yeah, [I know about CommonJS and NPM](https://npmjs.org/~dfellis), as well as that misguided concept AMD -- this ain't it. Look at the source code again; it doesn't specify anything as being exported, and the very last line is some jQuery that *assumes* it will be run in a browser context and makes itself run on the ``ready`` event. This is very simply a bastardization of the AMD pattern recreating a constructor function singleton, poorly. (No V8 class-style optimization possible here so it will have to do hash-based lookups on every method call.)
Well, you kinda need a function scope to have a module, the fact that it's immediately invoked isn't related to the pattern, it usually happens with a require() call but those are implementation details. The author here chooses to create and immediately invoke the module to get the exports so that's fine, but it's not exactly a module wrapped in an IIFE. If it were wrapped in an IIFE then you'd need a second function wrapping the module function. So maybe it's an IIMD (Immediately Invoked Module Definition) :P or maybe I'm overthinking this.
Yeah, I guess technically the Function Expression from the IIFE *is* the module, not really wrapping the module. Talking about patterns is harder than using them.
Wait, 40% of developers don't have a special place in hell!? 
&gt; In your function, undefined is now === `null` instead of `undefined`. So this function should write 'true' to the console, is that right? (function() { var undefined; console.log( undefined === null ); })(); 
You're confusing the module pattern with the implementations of it. There is no AMD pattern. There is an implementation of the module pattern called AMD. It all boils down to a function scope and some exports. Clearly, there is a module being defined which immediately exports out to className and is used directly below in the document ready. Just because the author isn't using CJS or AMD doesn't make it less of a module. And I'm pretty sure it's being optimized by V8. CJS and AMD are _exactly_ like this, you just don't see the decorator function on CJS modules and you don't need to return but the effect is the same. So if you say it isn't optimizing, then all of npm is screwed which is not the case.
Actually I just found out the answer to the first part of my question. I can use DOMNodeInsertedIntoDocument event (src: http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-MutationEvent) to catch all newly inserted nodes and look for event attribute this way. However I still can't find a way to differentiate static nodes from dynamically inserted nodes...
No, they will have to wait in line for a regular place in hell.
This isn't the comment you're looking for, but I noticed one bit of formatting style in your code samples that you ought to change: Put the open curly brace on the line above instead a line of its own. There are some advantages to the style you're using where the brace is on its own line, and in most curly-brace languages it's just a stylistic preference either way. But in JavaScript it will break your code. Try this example (you can copy and paste it into the Chrome console or whatever): // Return an object with x and y properties containing random numbers. function randomXY() { return { x: Math.random(), y: Math.random() } } console.log( randomXY() ); Oops, we get this in Chrome: SyntaxError: Unexpected token : JavaScript's semicolon insertion has changed the `return` line to `return;` which separates it from the object we're trying to return. And it now tries to parse the object as code statements instead of an object and doesn't know what to do with the `:`. I guess we're lucky it *is* a syntax error, otherwise we'd have a bit of debugging to do before we noticed the unexpected `undefined` return value when we call this function somewhere in our code. So at least on the `return` line we need to move the brace up: // Return an object with x and y properties containing random numbers. function randomXY() { return { x: Math.random(), y: Math.random() } } console.log( randomXY() ); Now it runs as expected. But two different brace styles in the same code would be inconsistent and error-prone. Better to go all the way and adopt the same style everywhere: // Return an object with x and y properties containing random numbers. function randomXY() { return { x: Math.random(), y: Math.random() } } console.log( randomXY() ); 
Actualy, I have. In a function where the first argument is optional, I check for this by checking the type is undefined, or an appropiate value for the next argument. In some cases, one of those is null, 
Thanks for the comment, though I was already aware of that gotcha. However, to improve readability, I first save any object in a variable before returning it, that way my returns are always 1 line long and no risk of breaking :) Also, I use jsHint to check for semilocons anyway :P
Ah, very good, then you're already a step ahead of me! Since the problem I mentioned only affects the `return` statement, you're fine as long as you always use a variable as you described. If I follow you, you might write my example something like this: // Return an object with x and y properties containing random numbers. function randomXY() { var xy = { x: Math.random(), y: Math.random() }; return xy; } console.log( randomXY() ); Nothing wrong with that! So let my comment just be a caution to anyone reading the thread - if you prefer braces on their own line, be sure to use a variable or other technique instead of trying to returning an object directly.
is this your code, or are you writing some sort of a script to deal with someone else code?
By your definition, then, a constructor function is a module pattern because the only thing added to the outer scope is the name of the constructor function. How 'bout you actually [read up on the engine you're using](http://www.html5rocks.com/en/tutorials/speed/v8/)? The reason why V8 better optimizes constructor functions over this equivalent, poorly conceived alternative, is because V8 can translate it into what they term a "hidden class". Any object being constructed by a constructor function is instead built by a C++ class, so instantiation is faster, and method calls on that object are faster because they're turned into C++ methods, rather than taking the method name as a string key for a hash table and then getting the relevant function pointer. The reason Node.js is perfectly fine with the CommonJS module pattern is because Node is *intimately tied* to V8 and has optimized it. But you can still defeat its optimizations by doing: (function singleton() { var privateVar = "foo"; var publicVar = "bar"; function privateMethod() { return privateVar; } function publicMethod() { return publicVar; } module.exports = { publicVar: publicVar, publicMethod: publicMethod }; })(); Which will return a raw object instantiation that has to do hash table lookups for all of the relevant methods and properties. AMD also has such performance issues if what is returned is a raw object instead of an instantiated object (or the constructor function for the end user to do the instantiation. The outer function of AMD-style modules is the only way for browsers, which have no concept of modules, to simulate them using a closure's scope (the closure being what is returned, not the outer function), but it doesn't mean closures are fast. V8 and other engines do their best to optimize a closure, but it can never be as fast as the constructor function, in the theoretical sense, as the engine has to allocate new memory for the newly-created scope, and its internal functions have to be re-evaluated within that new scope context. You can't use the previously generated functions in case the outer scope's outer scope has changed between closure instances in a way to alter the behavior of the code inside. Constructor functions avoid this because there's no intermediate scope being created, just a function being evaluated that produces an object with pre-defined properties, from the perspective of the JS engine. Closures make sense when you have several inter-related constructor functions (or singleton objects) you need to instantiate, but only want to expose one of them to the user of your library (like jQuery), and you don't get the essentially free scoping Node.js provides for CommonJS modules. That's the only part of that abomination called AMD that makes any sense.
Simply put, jQuery is MUCH more than just an animation tool. Also, Greensock is not as open as jQuery is. It may indeed run your animations faster, but honestly, if you have enough going on to slow down jQuery, I think you have problems besides what library you are using.
Probably the most important difference is jQuery is FOSS and GreenSock is not. If your animations are simple, you should try CSS3 animations instead. Also, if you're using so many animations on a single page that it's causing significant slowdown, you might want to reconsider the usefulness of the animations.
I'm writing a library so someone else's code
http://api.jquery.com/jQuery.noConflict/ I used this for about a year while slowly transitioning out of prototype. No problems using the two together.
I would do css3 animations, but lack of compatibility concerns me. As far as FOSS goes, while it's nice to use open source when I can, if there is a competing product which is better and free for my purposes I have no qualms with using it. Also it's not like I'm going crazy overboard with the animations, it's mainly due to the fact that the website is one page with multiple subpages that slide in and out, a couple with thumbnail galleries that have [this](http://tympanus.net/TipsTricks/DirectionAwareHoverEffect/) effect which I'm considering scrapping on them
Why? What do you need this for? Is there any difference between events registered from the HTML document and from the DOM API anyway? Can you even guarantee your code will get to touch the DOM tree before some events like Load get fired?
jQuery Transit http://ricostacruz.com/jquery.transit/ It's a jquery plug-in that basically accomplishes jquery animations using CSS3. $(*selector*).transition(*syntax*); The *syntax* is exactly the same is if you were using .animate. Also, this plug-in will default to .animate for older browsers that don't support css3.
Yes! Thanks I have been looking for something like this for awhile now. 
From what I understand, the DOMNodeInsertedIntoDocument has been deprecated. However, David Walsh has another method for detected it here. http://davidwalsh.name/detect-node-insertion And here's the W3 article about it being deprecated (it was way too slow) http://www.w3.org/2008/webapps/wiki/MutationReplacement
Wow, all of the current comments completely miss the point that Greensock offers a much better animation platform than jQuery. jQuery is a broad framework that solves lots of problems and is wonderful, however Greensock enables many types of animations that would be very difficult to reproduce with jQuery's one lone animate function().
I hate domain policy, but understand why it's there.
You have mixed formatting in your code. function Order() { } and function Direction () { } 
Done! Thanks jcdang.
Greensock's main goal is speed, it does lots of things inside it's code base to get there. If animations are overloading you then by all means it's your best target.
It may interest you that Mootools wrapup recently added support for source map https://github.com/mootools/wrapup
On linux, inotify / inotify-wait (from inotify-tools rpm) can do this and is hooked into the kernel.
I'm writing a library for Content Security Policy, they block inline handlers from executing
I did not mean to brow-beat, I just wanted to remind you. If this is for a commercial project, you will need to purchase a license for GreenSock if I remember their licensing model correctly. I also wanted to remind you to carefully consider the user experience as a whole. Even with GreenSock, as a developer, you probably have a faster computer than most, and running jQuery and GreenSock together won't give you as much performance benefit as using GreenSock on its own. It is a very impressive library, but it is not a drop-in replacement for jQuery, which means your web page will also need to take the time to load both libraries, at least the first time it comes up. I have actually looked in to, and played a little with GreenSock, and it's very impressive, but that doesn't make it a magic bullet.
The whole point is that you create your own scope by wrapping it in a function which **you** call in order to create. Nobody else. Therefore it is absolutely safe to assume that undefined is actually undefined in your scope and nobody is able to change that.
I'll be better as a single HTML page with descriptions, highlighted problems and solutions. PDF is not very convenient for searching and copying text.
Lines starting with four spaces are treated like code: if 1 * 2 &lt; 3: print "hello, world!"
Sorry if I was a little harsh in my reply, as it wasn't so much your comment but the combination of the first few replies here that irked me. Thanks again for your input. I think I will give transferring at least part of my code over a try and seeing how it works.
I don't know GreenSock (for javascript, that is), but you could create a jQuery plugin. Maybe call it "animateGreenSock"? (function($) { $.fn.animateGreenSock = function(options) { //translate jQuery.animate's options to greensock equivilant //make sure to implement the callback, or return a promise! }; })(jQuery); 
There's a few libraries that make type inheritance easier, google around for them, it's also very worthwhile giving CoffeeScript a go, it has a type inheritance style built in, which then transcodes to JavaScript. 
GSAP12 is pretty much all I use for animation. It's licensing is pretty open as long as you do not plan to use in a template that you plan to resell. But even with a license fee, it's so far above jQuery as an animation platform that it makes it a no brainier for me over jQuery.
This is great! Thanks a lot
If it's a case where you found a CMS that is well designed but maybe doesn't have everything (features, extensions) you need, have you considered maybe building off of that CMS instead? That way you get the best of both worlds. Whatever CMS you choose (if it's well designed) will give you a solid foundation and you can focus on just building out the features you need. 
That's it! Let's just say that this project just made it big.
In this case wouldn't a local variable be just as efficient and clearer, with no added risk? Not even one extra char if you put all your variable declarations together... minifiers will still be able to shorten it.
That would end up generating a much larger javascript file if you used the `?` more than a few times.
Can you put them in a slightly easier to read format... like some sort of website?
AngularJS doesn't introduce recursion in HTML, it just gives you a way of recursively adding DOM nodes. It's nothing new, AngularJS just makes it simpler.
If I'm reading it correctly, yes it is. The problem seems better then the solution in that case, which makes me think I'm missing something...
It's a great goal to build tiny components instead of one big monolithic app, but if you take modularization too far, your application can become difficult to understand. Even though you probably can divide your application into small components, those components still need to talk to each other in some way. If they don't have any knowledge of each other, that communication can become too abstract (and a bit fragile). In some cases it makes perfect sense to create a narrowly-defined component that does exactly one thing and doesn't know anything about the rest of your app, and in some cases it makes more sense sacrifice modularization for explicitness.
Just Fixed. Thanks for your suggestion.
This will be the next step. :)
If you're new to web dev, try: php + ajax also, try to google for "html contenteditable"
Done! 
just lovely!
It looks like you didn't indent your "code" block enough. It only worked for the deeper indented code. So, try one more leading space, maybe 2.
If this is just a hobby project, he probably *should* use PHP - it's the cheapest and easiest to deploy, and quick to learn. Since there's less Magic, it debatably easier to pickup symfony than rails, too. I can't imagine why you'd want to subject him to java for this! I personally prefer rails and django, but lets call a spade a spade here.
Just keep in mind that 1) this would be an *uncommonly used pattern* that you came up with and may be hard to understand for other programmers, 2) linting tools may dislike it because you never set the variable and 3) you cannot forsee how *aggressive* minification tools choose to optimize it.
Agreed on all points, I only provided him a list of his options. ^^^Personal ^^^advice ^^^would ^^^be ^^^a ^^^python ^^^framework, ^^^because ^^^you ^^^can ^^^do ^^^so ^^^much ^^^more ^^^with ^^^this ^^^language ^^^&amp;#3232;\_&amp;#3232;
If only python were easy to deploy! If you want a drop-in deployment, Heroku is pretty much your only option. I'd also say you can scaffold web apps much faster with Rails than Django. Python is more flexible for other tasks, but it's not my first choice for the web.
Yep. RoR seems to be all the rage nowadays. http://www.indeed.com/jobtrends?q=ruby+on+rails%2C+python+django&amp;l= http://www.google.com/trends/explore#cat=0-5&amp;q=ruby%20on%20rails%2C%20python%20django&amp;date=today%2012-m&amp;cmpt=q I work in academia though, where python is a revered tool for data manipulation.
Not sure if I understand everything but I'll try this. Thanks!
I wish I could read it without the hungarian notation making my eyes bleed.
Java and JavaScript are as similar as Ham and Hamster. They are **completely different languages**. Please do not mix up those two terms.
Yeah I know that, silly mistake.
Ahh, nice... I hadn't seen that! thanks for the heads up
I also apologize, my original comment was a bit on the trite side as well. Good luck!
that is very trivial why not writing your own? :)
please specify what it is that you want help with. The code does not run for me.
Do you consider Facebook to be a small website? 
You could just remove it as soon as it's created I suppose. Only problem is that it would still be inserted for a split second.
Well, for small-to-medium webapps Flask is perfectly fine. For a DB layer there's Flask-SQLAlchemy. And I think there are also some extensions for easy RESTful APIs with different return types.
so long as you've included Greensock's CSS plugin you'd just need : $(".circle").click(function(evt) { TweenLite.to( $(evt.currentTarget), 10, { css : {"height": "310px", "width": "310px", "top": "18px", "left": "10px" } } ); }); Edit : scope
I think I just covered all of that - again, in the end, you don't save any time. At least that's been my experience. Try it for yourself and see! 
 /^\/(((\w|\\.)+|\[.*\])\+?\*?\?*)+\/[gi]*?$/ 45 chars. passes all tests
Maybe because rendering of DOM structures is highly optimized and fast - whereas canvas operation performance probably varies somewhat from browser to browser due to their relatively immature implementations.
I second this. It would be extremely useful.
Thank you, I'll search for that.
Page 25:Do not dynamically create the content of the &lt;script&gt;...&lt;/script&gt; tag. http://www.ipa.go.jp/security/vuln/documents/website_security_en.pdf The approach seems rife with security concerns.
From an aesthetic point of view, I prefer to load the data in to placeholder elements rather than populate a script tag. It creates an logical disconnect in the JS because now you're requiring an inline script to be populated instead of working with your separate JS codebase. From a security point of view, loading data straight in during page load is a relatively hefty security risk (but in some cases, a necessary evil). If at all possible, it's preferable to load any server side data in via AJAX because at least then you restrict the data to the JavaScript sandbox and run in much lower risk of modifying the DOM itself in nefarious ways. Edit: Fixed a typo.
Here's a [great video](http://youtu.be/i_qE1iAmjFg) which has a small section which goes over why you would do this (basically, ensure that undefined hasn't been tampered with) but also filled with all kinds of other JS goodies.
Hell, it's about time.
Too bad most jQuery plugins are utter crap. jQuery makes it too easy for novice developers to start "contributing" without any knowledge of proper design patterns.
Trivial or not, it still takes time to write and debug. Why invent your own wheel when it's easy to look up somebody else's?
Awesome - I did this with a hidden text field and it worked fine, but I like this approach more. On the server side, this is all you need to save it to the file system: $img =imagecreatefromstring(base64_decode($_POST['image_data'])); imagejpeg($img, UPLOAD_DIRECTORY . 'images/image1.jpg');
How is it too late? It seems to me than only bad code (that defined the global) would break, and that's broken anyway if the value is sealed. Would making the jitters treat it as a literal rather than a variable reference really change anything? (I'm enough of a CS language purist to understand if there is some subtle behavior change that would result, though I can't think of one readily... and enough of a hacker not to care all that much about breaking crazy code.) I get that it would break code that tries to use undefined as a parameter or variable name, but if we didn't worry about that, (or ignored it in a quirks mode) then... other problems?
Well just changing `undefined` to be a keyword would render any existing code like (function(jQuery, undefined){ /*...*/ })(jQuery) into an error. And since that piece of code exists in every jQuery ever, then it's not viable to turn that into an error (not to mention a lot of other code). The web doesn't have versions. There's no way to turn something in JS that wasn't previously an error into an error unless it affects &lt; 0.01% of websites.
Looks useful for quick smaller projects. Thanks. FYI Your Reddit post is more detailed than your GitHub readme.
Thanks! And yeah I know, it's very alpha imo at the moment because I won't be able to test it properly on multiple devices until later in the week. I was mostly looking for opinions on it in principle of whether it's a good idea or not :)
To essentially echo TheNosferatu, I view undefined and null in two different lights. I use undefined for when something is, well, undefined. Nothing has ever existed in that position. This is perfect for checking if objects contain certain properties (although you can do if('property' in object) but I prefer to be more explicit). I use null for the situations where a value either hasn't been set but it should be or if it previously had a value but has since been cleared out. Each of these have very different implications from if the value never existed at all i.e. is undefined. There's no rule set in stone saying you should do it that way but I feel like it makes my intentions in code clearer.
why would you need javascript for this? other than making the form auto-save without a submit button... but that's more of an ajax sort of thing ever think of just setting up a google doc and giving certain people access?
Can you please give an example of placeholder elements? re sec concerns i have to create an [update](http://thanpol.as/javascript/passing-data-from-server-to-javascript-on-page-load/#addressing_security_concerns) addressing the concerns.
 &lt;input id="server_data" data-foo="&lt;?= $foo ?&gt;" data-bar="&lt;?= $bar ?&gt;" /&gt; Or you could go even more simple and do something like: &lt;input id="server_data" value="&lt;?= $my_data ?&gt;" /&gt; This still opens you to a security risk (just make sure to scrub your data squeaky clean before doing anything like this) but at least it seems more cohesive. So from your separate JS file you would grab it in a manner similar to this: // Assuming jQuery var foo = $("#server_data").data('foo'), bar = $("#server_data").data('bar'); // Going pure vanilla var foo = document.getElementById('server_data').getAttribute('value'); At least then, if something goes wrong in printing out the server-side data, you don't try to access an object which doesn't properly exist. On a similar note, if your data doesn't come out as expected when making an object literal, your code may not be syntactically correct and would make JavaScript stop dead in its tracks.
I see. Looks a lot more verbose but like you said it's an aesthetic point of view. In the case of data not coming out as expected, the Object Literal's declaration would be dropped and no more harm done as your JS App is isolated from this.
Yes, I am familiar with semicolon insertion; that's why I commented on the OP's curly brace style. I don't recommend it either because of the `return` object problem, but OP prefers it and presumably uses code like my `var` example to avoid the `return` problem.
"Package" dependency management is just part Yeoman, and really that's all handled by Bower. I spent a good hour looking through Yeoman the other day, and it seems to just be a workflow that uses some other tools and intelligent defaults. You'd never know it from the description, though.
I can make an object. {}
{obj:{obj:{obj:{}}}} objception
No.I don't plan on giving access to "certain people", I want to make it public. With all due respect, if I wanted to create a shared google document, I would've made it. I wouldn't be asking for suggestions on here. Underestimating people or their intentions is as wrong or unfair as overestimating, really. I certainly do not want to create a shared rtf, thank you very much.
THANK YOU A MILLION TIMES. REALLY. REALLY. E-HUGS YOUR WAY.
This will be very helpful actually. Thank you very much!
Quite impressive! I think I have a lot of changes to make in our libraries.
Start with: &gt; No matter where I look &gt; I try to start a song &gt; But I always end up &gt; In a programming nook
Since you're asking in r/javascript, I'll try to give a relevant answer. Most songs of anger or depression focus on the suffer himself, "I." In JavaScript, an object refers to itself with the `this` keyword. As a juxtaposition of programming concepts and depression, may I suggest a song about self-destruction: &gt; `this` is more than I can take &gt; I'm losing what's at stake &gt; `destruct`ion I will make Or, in code: if (this.value &gt; this.max) { delete this.stakes; this.destruct(); }
Okay, as someone just learning JavaScript, perhaps someone can illustrate the differences between prototypal and composition; they strike me as the same thing. In Python (the language I use most often), I can define methods as if they were functions, and then assign them to each class or object as I construct it, and this (in my limited understanding) seems to be what prototypal systems are. # An example of the Python I'm speaking of. def some_method(self): print("Hello world") def a_setter_method(self, var): self.a_var = var class SomeClass(): assigned_method = some_method class AnotherClass(SomeClass): another_method = a_setter_method an_instance = SomeClass() an_instance.assigned_method() # =&gt; "Hello world" another_instance = AnotherClass() another_instance.assigned_method() # =&gt; "Hello world" another_instance.another_method("string") print(another_instance.a_var) # =&gt; "string" Naming a book that does a good job laying the foundation would be splendid as well. Edit: Added an example of what I meant in regards to the Python composition. The syntax is relatively straightforward, but if anyone needs an explanation, I'd be happy to do so.
I would just like to suggest that Google use Python extensively and it is one of the main languages used for writing appengine apps. Dropbox is also another major user of Python. I would say that makes it far from niche. 
your vague description is pretty much google docs. maybe instead you should have said "I want to have a single-post blog to which people can anonymously submit new content"
Not really, the reference resides in the `SomeClass` class. Look what happens when I change `assigned_method` in `SomeClass`: def printer_meth(self): print(self.a_var) SomeClass.assigned_method = printer_meth another_instance.assigned_method() #=&gt; "string" The instance that already exists (assume that the above is a continuation of the previous environment) uses the method reference from `SomeClass`, which is made obvious due to the new behavior when I change that class' `assigned_method` reference to the new function. I just tested this in my interpreter (Python 3) to be sure of the behavior. It really seems like the same thing.
http://blog.alexmaccaw.com/a-javascript-security-flaw Simply spitting JSON into the page isn't good enough. You must ensure that it doesn't contain script tags, because the parser of the browser does not care that it's inside some JS string (it has no concept thereof).
Assuming wkt is defined in the traditional way... // Polyfill Object.create if (!Object.create) { Object.create = function (o) { function F() {} F.prototype = o; return new F(); }; } // New class constructor function function NewClass() { // Call super constructor wkt.apply(this, arguments); } // Inherit from super prototype NewClass.prototype = Object.create(wkt.prototype); NewClass.prototype.constructor = NewClass; // Override read method NewClass.prototype.read = function () { // ... };
with( feature.deprecated ) { "I can only long for the day I could still use"; label: "instead I have to" break; and do with a continue; }
sfsfsfsf
re #8, you talking about `Query.learn` sugar?
Apparently you don't understand what "niche" means, then? You've reiterated my point, actually - Dropbox and Google's uses for Python are grounded in it's nice file handling and ability to be compiled nicely for binary distribution. Those are not, **at all** the *normal* usecase for the average web developer, those are very *high-end*, specific uses.
&gt; 6\. Begin to notice actual applications that are best moduled with prototype chains. Well... no. For the same reason they're considered not optimal in the non-prototype OO world. In the end prototypical inheritance is inheritance. It might be more flexible, but it is nevertheless just as brittle -- you just arrive at the prototype OO version of [the super class problem](http://en.wikipedia.org/wiki/Fragile_base_class). The solution is similar: Favor composition over inheritance. Often a "has-a" will bring you much less problems than an "is-a".
Google App Engine was actually the main thing I was pointing to in regards to it not being niche. There are a whole lot of sites built on python using Google App Engine. 
Thank you for your help :D
Let me try this another way: App Engine is a **single platform**, a drop in a sea of options. Google is the only one that provides it. Heroku is the only other service that allows drop-in deployment of Python. That says a *lot* about the ecosystem. If you've spent any time in the Python world, you know that most of the web-packages are either still beta (Flask), abandonware, or total crap. If this were a flourishing language, I think we'd have more than just Django (and *maybe* Pyramid) as an option.
Then you know. I should not have to tell you. :)
Is there a best practice solution (in JavaScript) that solves this fragile base class problem? Thanks!
With prototype inheritance, each function / method exists only once, in the prototype. The instance gets the method via the prototype chain. We need to step a bit away from the code itself a little here. With inheritance, you create a hierarchy of things that inherit specific aspects / members / methods from the level above. One of the problems that can occur is that you need to add functionality at the lower level with contradicting behavior in the extending classes or differentiate things that used to be the same. This leads to a nightmare code maintenance wise. Now when you compose your objects you get a shallow (maybe even just 1 level deep) collection of objects where some objects use a common other object to do things instead of trying to squeeze everything into a grand but brittle hierarchy. 
kangaxx, that example is just something I'm experimenting right now, it uses monads (from fp) and normal prototypes. As you already said, basically learn is sugar to append methods to Query.prototype that amplify the Query object. What I meant with my comment is that once you hit any point you will end experimenting other things, and then using it to augment you knowledge by mix and match and then repeat... 
For class based OO, composition is often taught as only relating to interfaces. Instead of subclassing something, the class implements several interfaces. This is of course not applicable to Javascript. Javascript would use object composition. Instead of setting up a deep prototype chain (e.g. something like FancyLink -&gt; ClickableWidget -&gt; Widget ) where the clickable widget would contain all the methods that deal with clickable widgets, you would just create a shallow hierarchy (FancyLink -&gt; Widget) and give FancyLink (and others) a member of the type "ClickableBehavior" that can handle clicks on widgets.
Personally I've come to prefer mixins and closure-binding (don't use **this** unless you have to) over prototype style programming. It's just simpler and works just as well. If a function never refers to **this**, then you will not have any surprises when it's being called from libs/frameworks and their events etc. asSomeTypeOfObject = (obj, constructorParam) -&gt; obj.someAttribute = constructorParam obj.someFunction = -&gt; return obj.someAttribute or "foo" # Example of binding obj instead of this return obj There are of course more advanced ways to do mixins, with name collision detection and so on.. but usually the straight-forward approach works well and is very easy to understand by other programmers. I basically only use prototypes when there's a performance/memory aspect of object construction, like when creating many, many objects with the same function members. 
Yeaaaah I don't get it.
I get what you're saying but I think you're saying it pretty poorly. I don't think you can blame jquery for being too easy or for new developers wanting to contribute to the community. Hopefully this new system allows the truly good plugins to rise to the top and provide feedback to the less well written ones.
How's [this](http://jsfiddle.net/Pilate/PgJvs/1/)?
Thanks for trying this! This issue with this is that is doesn't call to my Div's which exist in the HTML. In the click listener, when I call this: var content = document.getElementById('div'+i); content.style.display='block'; It's getting a Div with the ID "div0" or "div1" based on the position of it's corresponding marker in the array. So, nothing to do with the infowindow, but everything to do with showing and hiding these outside divs. Basically, I need to put content.style.display='hide'; in there somewhere in order to hide the 'div0' and open 'div1'.
I think I get it. The easiest solution is probably to select by class name and hide all '.featured_window' elements before showing the one you want. var featureds = document.getElementsByClassName("featured_window"); for (var i=0; i&lt;featureds.length; i++) { featureds[i].style.display="none"; } var content = document.getElementById('div'+i); ... 
Watch your browser console. :) SyntaxError: syntax error ele.style.display= = "none"; from: function toggle() { var ele = document.getElementById('div'+i); ele.style.display= = "none"; } 
TIL: Actually read a comment thread before replying to it. :)
Thank you! That could explain why that function isn't functioning. 
they dont have colors :-(
just open 2 browsers with the same color and start writing! wohooooo!
yes they do.
Thanks @fforw :) I'll have to try and use this pattern more often.
The main difference is the idea behind it. Using classes, you create a class (a sort of "blueprint") that explains how to constuct, say, `Car` objects. You then use this "class" thing to create objects (instances) that follow this blueprint. Using prototypes, you construct a prototypical `Car` *object*, and then you create new objects and set them up to inherit from that `Car` object. (This is purely discussing the philosophy behind the two approaches, and not the implementation. In the case of Python, the implementation of classes does indeed remind one a lot of how JS implements prototypal OOP.) The insight here is that whereas classical OOP keeps the blueprints and instances apart (a class isn't necessarily an object itself), you only have objects in prototypal OOP. [This lengthy blog post](http://killdream.github.com/blog/2011/10/understanding-javascript-oop/) explains prototypal OOP from the bottom and up. Otherwise maybe reading through [the wikipedia article](http://en.wikipedia.org/wiki/Prototype-based_programming) on the paradigm would help a bit.
do media queries not work for your cases? For example: http://www.getskeleton.com/
This is obviously a simplification of the system that you're describing, so I'll refrain from attempting to poke holes. However, your two sentences describing prototype inheritance still seem exactly like the Python I've shown in my posts. I think that I'll just have to gain experience and continue learning before I an differentiate. Still, from my examples, there is only one method for all of the objects that inherit from `SomeClass`: SomeClass.assigned_method is another_instance.assigned_method #=&gt; True another_instance.assigned_method is some_method #=&gt; True In testing for identity of an object, this suggests that the method/function exists exactly once. I'm not making copies, just references. This is what is confusing the difference for me. Edited: Grammar
Media Queries work just fine. The problem lies in the reality of dealing with displays whose dpis differ tremendously. Retina-class displays have way higher resolutions than the 320px widths that older and lower end smartphones use. This makes a tremendous difference when the phone is nearly the same size, but the text is half as big on some devices as a result, as well as layout issues with fitting elements in at smaller resolutions, etc. It overcomplicates it tremendously, especially when your designer doesn't get the concept of fluid layout. The reality, I've found, is that usually there's a vision of your site on mobile that you just want to work on all similarly sized devices (actual screen dimensions, not resolution), and there's currently no way to do that effectively. This at least manages to ballpark it.
That makes more sense, but I don't see a reason that one system should be heralded as better or even significantly different if the fact that one system doesn't use blueprints of type `type` is the only difference. I mean, it would be vastly different if Python classes were not first class objects, but they are. I'm more trying to grasp at the increased utility of prototypal inheritance, but I appreciate your description. Yours is so far the only explanation that suggests even a little difference between the two. I think that I'm simply going to have to continue learning about JS to fully understand things. Thanks for the links, they'll help to that end.
You may want to take a look at Highcharts. I have not done dragging with bar charts, but I have with line charts so I imagine it is possible. Good luck!
Hehe some months ago I had a similar experience with "Uncaught TypeError: Object has no method 'lenght' " I don't recall if it was on a Friday or not though Yours is much more funny though
"splice"? Or class with method "spice" that wasn't being instantiated?
yeah, I meant it to be splice. just thought it was something bigger. 
After writing all of the above, I realized it may not be a leak but something else. I ran everything through the debugger and it looks like the code is breaking in this (really ugly) function: function updateCollectionTotals(change) { var rawText = $("#action-chart").find("a").text(); var currentTotal = rawText.substring(rawText.indexOf("$")+1, rawText.indexOf(")")); var newTotal = (parseFloat(currentTotal) + parseFloat(change)).toFixed(2); var newText = rawText.substring(0,rawText.indexOf("$")+1) + newTotal + rawText.substring(rawText.indexOf(")"), rawText.length); $("#action-chart").find("a").text(newText); $("#collectionGraphForm").find("h3").text("Current Value: $" + newTotal); } Perhaps it's just choking on the parsefloat...
I LOVE plugins because I view them as a way of quickly prototyping functionality. If it's something I want to keep, I then dig into the plugin to see how it ticks, grab the 3 lines of code I need and discard the rest. I've done this just recently for infinite scrolling and a modal lightbox/dialog thing. There's one I just saw for increasing touch-click speed which looks interesting, if it really increases responsiveness I'll rip that one apart soon too. 
http://stackoverflow.com/questions/371875/local-file-access-with-javascript Edit: But with HTML5... http://www.html5rocks.com/en/tutorials/file/dndfiles/
You're probably doing way too much DOM manipulation. I haven't looked at your code, but by the fifteenth or eighteenth click, if I click really fast, the memory usage climbs up to over 200MB. Again: I suspect all your jquery DOM searches are destroying you, because if you take it slow, all those objects seem to get Garbage Collected.
That's really useful to know - thank you very much. I'll refactor some of the code to do less searching. When you say memory usage, are you looking at the entire chrome process or just the heap space? Thanks again for the help!
I guess you could say... it didn't "parse"ley...
Thanks. That is a good start. Are there direct ways to parse csv files and sort them or query them in memory?
I tried to set the height and weight of a div earlier...
Once spent ages looking at code wondering why "onlick" didn't fire an event...
I installed it on my EEE PC. There was no binary package available. It took me over three and a half days to compile Chromium with my 900MHz processor and 1GB of RAM. I don't really update it, and probably never will until it stops doing what I need it to.
Give it time... It will be an event some day... Imagine the pawno!
The easiest way to achieve scrolling movement in canvas games that I have found, is to keep the player centered in the screen and move the entire screen around the player... I made a demo of this [here](http://skellsskills.net/code/rpg.html). In short the whole map is an array and only the parts of the array are rendered on the screen if they are in the players view! This means you can develop your own array-based map editor for super fast loading times!
It took me a good couple of reads to finally notice s/weight/width/g... Like the others have been say, it's Friday's fault.
button is here github.com/ether/etherpad-lite
BOOOOOOOOOO
 var parsedCSV = csvData.split(","); Voila, a parsed CSV file.
Man, with your name no wonder you're poo poking other people's comments. 
At this point I am starting lots of projects but I can see how it would be less helpful to those who primary work on existing projects. For me the convenience of getting precompiler out of the box along with live reload is huge. The amount of time spent configuring all that for a new project makes it worth using yeoman even if its only for a small number of projects. 
Ah, the advantage of commuting by bus.
Why do people insist on just remaking the same things over and over? I'm not saying that no-one should make build tools for JavaScript, I just think it would be nice if it did something different rather than just being a cut down, less mature Grunt. Innovation, people! Otherwise just contribute to the projects that already do the same thing rather than diluting the effort for no benefit. 
You can also use the experimental Webkit scrollbar properties to alter how scrollbar looks in Webkit browsers. Here's how you can do it: http://css-tricks.com/custom-scrollbars-in-webkit/
I think that indicators are not included because scrolling has become an intuitive action, the action of scrolling is driven by intuition rather than by a visual mark.
true, but if a scrollable area is within the page, it still needs a way to show it can be scrolled, whether a scrollbar or a purposefully cut off image or line of text.
I've used [jScrollPane](http://jscrollpane.kelvinluck.com/#) and with some basic CSS you can get the effects you demonstrate. Also, the CSS for webkit's scrollbars is useful, but takes some time to get used to, and of course only works in webkit.
Be cool to see this built into https://github.com/johnmclear/draw No mention of a repo or license, not open source or?
You can use TinyScroller.
good work! now in python!
Hate those, design your site properly instead.
I think designers are avoiding these so they can scrollbars instead of a "load more" style solution
This is awesome! Good work, and thanks for sharing
Install node.js :)
This is one reason I love using the Closure Compiler. It catches these mistakes for you, before you try to actually run your code.
One of my favorite tricks is using `Object.defineProperty` to sniff out when a property is unexpectedly changing on you. You break and `foo.bar` is 1, then the next time you break it's suddenly 2? foo.__bar = foo.bar; Object.defineProperty(foo, 'bar', { get: function() { return this.__bar; }, set: function(b) { this.__bar = b; debugger; } });
This man is very particular about his penis drawings!
javascript prototype based inheritance explanation
I highly recommend Angular.js for this sort of thing. Learn and refactor one bit of your code; you'll be amazed how little plumbing code you need to write. I have a huge application that used to be a jQuery mess. Rewrite in angular was about one ninth the size. I will have trouble going back.
The difference is that higher order functions — like adverbs — aren't valid when used by themselves.
Not directly related to code-reuse, but I'd cache or chain the jQuery methods in your second function. Not only is it faster because it doesn't have to do a DOM lookup each time, it reduces the size of the code too. function handleBasicFormSubmit(data) { var $basicForm = $('#basic-form'), $message = $basicForm.find('.message'); if (data.success == false) { // shows the error message with styling $message.text(data.message) .removeClass('alert-success') .addClass('alert-error') .css('display', 'block'); $basicForm.closest('.adm-pane').addClass('adm-pane-error'); } else { // shows a success message with styling $message.text(data.message) .removeClass('alert-error') .addClass('alert-success') .css('display', 'block'); } }
A valid question. I had a couple reasons for making this, [listed out in the readme](https://github.com/paulstraw/grind#why-didnt-you-just-use-othertool-instead-of-making-this). Being able to set up project configs in under a minute is super handy for me; I don't want to think about my build tools any more than absolutely necessary. Beyond that, though, I feel like a tiny tool that does exactly what I want falls pretty well under the Unix mentality.
I was going to recommend angular. Take a look (and try out) the tutorial. It's a really simple way to compartmentalize your web app while it grows large.
Yeah, and not always we need all the other things.
That's completely possible. Might have to give that a shot myself.
there is fbcmd or whatever it was called. a full blown cmd line interface to FB.
Started learning angular about a month ago. Gets better daily.
Awesome job! Can we see and learn how you did it?
Here's an example of how to submit forms in a more generic way: $('body').delegate('form', 'submit', function(e) { var $form = $(this); var formData = $form.serializeArray(); $.ajax({ url: $form.attr('action'), type: 'POST', data: formData, complete: handleBasicFormSubmit }) e.preventDefault(); }); 1.) Delegate is nice because you only have to do it once and it will bind to everything matching the selector (in this case everything in the "body" tag that is "form"), even forms which are put on the page after you do the delegate. 2.) .serializeArray() makes an object out of all the inputs in the form so you don't have to do it all by hand. Basically I'd suggest coding all your forms as if they were going to be submit without ajax, tends to make everything easier in the end.
Thanks! I partially implemented code to make the spacebar more dynamic for starting and restarting the game, but it's not fully developed. I have a long way to go on this. I'm thinking of switching it up and trying something like Tetris instead, but keeping the same look and feel.
Well, it's all JS, CSS, and HTML, so you can look at the source (at your own risk) and see how the sausage is made. In a nutshell, each letter is a span, and the game engine contains objects representing the various entities (the player character, the enemies, the background) that know their coordinates, which translate into a certain set of spans on the board. The engine tells each of them to progress a step every certain amount of time, and then checks them for collisions and other events. They render onto the spans by changing the CSS class for a span they are on to their color.
How is the accuracy calculated? 
Great game, feels good. Just wish I had a chat function.
yeah, like dawnerd said, it's possible. i can just port this one for Reddit as well, if anyone wants one. :D
yeah, i should write one in python just to practice my python-fu! 
except for the lag spikes.
Really cool! A lot of fun too.
Awesome. Add a chat, a small tutorial and force players to use username.
That totally woulda worked if you were working with something that was instanceof Dog.
I would never have guessed how to scroll on that thing without your highlighting what it does. :/
Absolutely. I wanted to gloat and had no outlet. :) Thanks.
I agree, I'll be adding chat.
Haha I could've swore that your ign was LuckySperm. Also I saw people with name... was that the game devs or is there something I'm missing about getting a name?
The green things are power ups and yes, looks like the need to be buffed. Once increases your top speed and one increases your "grip". Based on the suggestions I'll be adding chat and a short tutorial. I also plan on adding doors and switches to open them to add more opportunity for team work. 
Ha, nope - I've always been LuckySpammer. A name gifted to me from my Unreal Tournament days.
Great idea. I think I'll implement that and see how it works out. 
One of my coworkers taught me this one. You have to **not** be in strict mode for it to work. If you do `console.log` but set the thing you're logging to a variable, you'll have access to that variable in the console. Try it! console.log(myObj = $('#something')); Then in your console type: myObj; or myObj.hide();
I'm a bit late to the party: ^((1\d\d\d|20(10|11|12|0\d))/(0[1-9]|1[0-2])/(0[1-9]|1\d|2\d|30)\s([0-1]\d|2[0-3])\:([0-5]\d)(\:([0-5]\d))?)$
There's a lot of suggestions for doing this manually in this thread. While that's all fine if you're into doing it by hand, there's also [this excellent AJAX form plugin](http://malsup.com/jquery/form/). It's not exactly compact as far as libraries go, but it gzips decently and lets you write a bare minimum of code to do what you're asking. Can't really argue with $(document).ready(function() { // bind 'myForm' and provide a simple callback function $('#myForm').ajaxForm(function() { alert("Thank you for your comment!"); }); }); for brevity.
That will work, but not because there's anything magical about `console.log()`. And it's easy to do the same thing in strict mode. Your code: console.log( myObj = $('#something') ); is exactly the same as: myObj = $('#something'); console.log( myObj ); So, you could leave out the `console.log()` call entirely and just do: myObj = $('#something'); and you would still have `myObj` available for later use as you described. But why doesn't it work in strict mode? Strict mode doesn't let you create a global variable by just assigning into a name like that. If you were writing code at the global level (not inside a function), you could use `var` to do that: var myObj = $('#something'); But I think you're talking about test code that you may be adding inside a function. `var` would create a local variable inside that function, which isn't what you want. Instead, do this: window.myObj = $('#something'); That will work inside a function or anywhere, and afterward you can refer to `myObj` in the console.
We use it at work, it's called [jQuery TinyScrollbar](http://baijs.nl/tinyscrollbar/)
Yup, for [50 DOM elements](https://github.com/jquery/sizzle/wiki/Sizzle-Documentation#wiki-internal-api) per jQuery instance.
We produce an alternative library called mxGraph, https://github.com/jgraph/mxgraph, which we started about 7 years ago. In terms of yFiles for HTML, I've never used it myself, but yWorks, the parent company, have a history of producing some outstanding layouting engines, so I suspect that trend will continue in the HTML product.
It freezes after about 5 seconds for me. Firefox 18/Ubuntu 64.
Stalkers gonna stalk
wow wow wow ... very nice - how did I miss this with my survey I don't know! edit: the documentation stylesheet is really difficult on my eyes ... I had to override it. There's no shame in black text and bright blue links for documentation. I see the pricing here ... what if I don't want any support?
it's down! turn it back on! :P
Everything you've said is correct. However, *the whole point here* is that you're able to inspect a live object without cluttering your global namespace. 
It's quite bad pattern. You shouldn't make a new prototype as an instance of Animal, you should Object.create the Animal.prototype. And it's also better to write some easy system for creating objects: var Animal = construct({ init: function () { }, members: { age: 5 } }); var Bird = construct({ inherits: Animal, init: function () { }, members: { canFly: true } });
Impressive! A few things: * If I set the render distance higher than the default, I can see "chunks" of the world suddenly appearing in the distance. * By default, render mode is set to "plain" when it actually is "textured". edit: oh and you're an EPFL student! hello colleague ;-)
When you got high fps the gravity fails, for the rest it seems nice. ***Edit*** I fixed and forked it. Or pulled, whatever it is called.
Do you see any JS error messages?
It uses WebGl
Very impressive - good job. 
It's back up for a while. 
great idea, nice implementation :)
You forked it, fixed it, and issued a pull request?
Go back and re-read my comment. The reason this thing is useful is that you can use it in any scope to be able to introspect and manipulate an object.
Thanks, I'm having a lot of fun working on it . 
don't dig down....
It's not public yet. But I am considering open sourcing it. Thanks. 
Interesting idea, but I struggle to think of any practical use for this.
I'm sorry i put this here but the people a Jquery weren't responding.
Ah, neato.
THANK YOU SO MUCH!
"#submit" should be replaced with whatever ID you provide to the button that you click on to publish a post.
I re-read each of your comments carefully, and it's not clear what you are trying to say. In your first comment: &gt; If you do `console.log` but set the thing you're logging to a variable, you'll have access to that variable in the console. Try it! &gt; `console.log(myObj = $('#something'));` Yes, but the same thing is true if you *don't* do `console.log()`. The reason this code makes `myObj` available in the console is that it creates a global variable named `myObj`. It's this code that does it, and it works the same with or without the `console.log()`: myObj = $('#something'); Or to make it work in strict mode: window.myObj = $('#something'); That also would work the same way inside the `console.log()`: console.log( window.myObj = $('#something') ); In your second comment: &gt; However, *the whole point here* is that you're able to inspect a live object without cluttering your global namespace. But this code *does* create a global variable. And your third comment: &gt; The reason this thing is useful is that you can use it in any scope to be able to introspect and manipulate an object. Yes, of course that's true. It just has nothing to do with `console.log()`, and it most definitely creates a global variable, just like the standalone version: window.myObj = $('#something'); So, what am I missing?
Ah, I didn't realize that it was all being handled by the CPU. Thanks for the response. So, when someone uses something like WebGL can they still claim that a project is 'javascript' only since it is just an API for Javascript? I also found it interesting that when increasing the Render Distance my FPS took a rather massive hit, but my CPU did not seem to work much harder based on CPU Usage in Task Manager. What would be the limiting factor for something like that?
Fuck that.
What about Mootools for the job? It's a little heavier, but can also do more things.
Amazing job. Amusingly, the "render distance" slider also doubles as a fan speed slider.
Webkit &amp; Gecko are website render engines. Chrome uses V8 engine for javascript, and firefox uses IonMonkey ** Pokes glasses, closes wikipedia **
What I really meant was that I wanted to simplify the process of extending classes. To extend JavaScript's "classes", you have to clone the prototype of one function to the prototype of another. This just does that for you so that it's a little bit easier to see what's really happening. It also manages super calls, which is nice.
There are countless other libraries out there that also happen to provide classes, that's true. I wanted one that looked more like Java, as I spend a lot of my time knee-deep in Java code. I also just prefer declaring the classes the way that diegojs/Java does, and find it much easier to manage.
i noticed it, it's really cool! nice job...
As far as I know, normal game code is still similarly provided, but is simply in a more obfuscated compiled form. Using a obfuscater on javascript code can sort of achieve the same effect. In the end, whatever the client can do, they have the code for. I think that's why game crackers can't really be stopped, since the code is all there, just in a lower level language.
You've got our attention over in the voxel.js freenode IRC channel. You've got a few things going on that voxelJS doesn't yet (smooth collisions, water, fogging...)
Looks cool. I'm going to clean up my jQuery mess just to get the new design out the door, and then take a stab at a complete overhaul using Angular.js afterwards. Thanks!
Woah, .serializeArray() is a huge help, thanks!
I had no idea you could chain those methods. Thanks for the tip!
The problem isn't with the people at r/jQuery, it's with your post.
That for some reason that self-closes its tab every like 20 seconds while doing stuff.
Three.js has a canvas renderer. Not saying it's a good idea to use, but it exists.
Delete system 32
The jump gravity isnt as good and how do you place blocks 
Yeah, it doesn't take much. I made http://reasoner.comoj.com/swarm and struggle to get 60fps, despite that being 2d dots. Then again, I made it hastily and it's badly optimized. But yeah, javascript is fairly slow.
An external database means a server + AJAX, or similar. Basically, you'll want a function to send the password to the server, a program on the server that will receive this and send back a response, then another "callback" function that checks the response and acts accordingly. There are many ways of achieving this , depending on whether you want to use a library like jQuery to do the ajax, or to "roll your own", but there are plenty of examples online - try a google for "ajax authentication".
Just a bad practice.
It's basically copied from another site, I have only just started learning JavaScript and am trying to develop something for work.
Yeah. I've been trying to find good resources on functional programming in javascript, so I was excited to see this one. 
Awesome. Might I recommend adding [Marionette](https://github.com/marionettejs/backbone.marionette) as well? It'll help with a lot of the scaffolding nonsense that backbone requires.
* Don't use inline events (`onclick="..."`); register them using [`elem.addEventListener(...)`](https://developer.mozilla.org/en/DOM/element.addEventListener) instead. * Don't escape quotes. You can use both `"` and `'` in HTML/JavaScript to avoid it. * Don't use `href="javascript:whatever"`. Use `href="#"` if the link is JS-only and `return false` from the event handler to avoid the `#` from showing up in the URL. * Use English in your code - for both comments and identifiers. * Store the data as JSON instead of a CSV-ish file. Easy to parse using `JSON.parse()`
Great idea. I haven't personally used Marionette yet, but I have heard great things about it. Let me look into it and I will add it fairly soon :) Any other frameworks/tools you think might be useful to include?
you might be a fan of Yeoman, http://yeoman.io/
Very nice. Not to rain on your parade, but I think you are unintentionally re-inventing the [Yeoman][yy] project. I believe it will let you just do: yeoman init backbone And it will scaffold a backbone project for you. [yy]: http://yeoman.io/
How about: butHereIsMyNumberSoCallMeMaybe But yeah, I am guilty of the `doSomething(callback)` type thing. :P
This is actually a solid recommendation as it gives clear implication when and how the callback is going to be used. 
Doesn't do obscenities? Challenge accepted! 
I am a fan of yeoman, but it doesn't do require/backbone projects very well with the default settings. Granted I could have created my own generator, but thought a bespoke solution may be more appropriate to start new projects with. Yeoman.io is awesome for the majority of cases though!
a "no music" option would be nice
It's kinda a point of the game.... but I guess it could be done.
It just takes one NaN to fubar everything else.
for me I use camelCase and typically use the "on" prefix...but i think thats because jquery and node have spoiled me into thinking that way $(document).on("keydown",onKeyDown); 
I learned to change my font in my editor to avoid that error...sometimes I didnt even get an error just...not working 
Some DOM api's behave differently in mobile OS's. After a few minutes of googling, your answer seems to be here: http://joemaller.com/503/getselection-workaround/ Basically, window.getSelection isn't working they way you are expecting.
Their interface doesn't work for me at all. 
If it doesn't matter what the callback is/does, then I call it `callback` or `fn`. There's no point in calling it anything more elaborate. function callAsynchronously(fn) { setTimeout(0, fn); } If the callback has a specific purpose, e.g. to be run when there's a success/error, but we don't know what it otherwise does, then I call it something like `successHandler` or `errorHandler`. function simulateFlakyConnection(successHandler, errorHandler) { if (Math.random() &gt; 0.25) { successHandler(); else { errorHandler(); } }
Sometimes to meet deadlines you have to prioritize; anyone who forgot their password on day 1 or 2 can email an admin IMO.
Your facetious example reminds me of the `switch` alternative in ["If PHP were British"](http://www.addedbytes.com/blog/if-php-were-british/).
This is exactly how I do it. Granted I'm more event oriented in my code so it makes more sense that way.
1m new users day one and pretty serious registration/login issues and it's easier to "email admins" then build some very simple and standard features into the website ahead of time. I'll admit, I speak from the point of view of a .NET developer, I'm some what limited in my experiences with JSON via AJAX (used it about 4-5 times on live sites), but I really don't believe that it is so much work that it should be prioritized below flashy graphics or fancy HTML5 transitions.
[NaN](http://en.wikipedia.org/wiki/NaN), not as tasty as [naan](http://en.wikipedia.org/wiki/Naan).
[Relevant](http://static.fjcdn.com/pictures/Naan_fd2a2f_2379404.jpg)
It doesn't matter if you like a .NET stack, RoR, django, or what: every major website platform has pre-existing code you can use for this kind of core functionality. That said, it depends on who you've got on hand: adding in flashy graphics and HTML5 transitions is a different skillset than making functional websites.
Leaving off the 'forgot password' option is intentional: &gt; Unfortunately, your MEGA password is not just a password - it is the master encryption key to all of your data. If you lose it, you lose access to all of your files that are not in a shared folder and that you have no previously exported file or folder key for. This is part of their way absolving any knowledge of what the users are uploading.
That's interesting, I hadn't heard that explained. Does that imply that there will never be a way to even reset your password? It doesn't seem unreasonable that MEGA could reset all the keys with the new master encryption key that is generated by a password reset. They would still have the same information they had prior to the password reset. Although, I may be totally not considering some security issue there. I'm just thinking the process through as I would implement it but, perhaps that is why I don't have a site that has 10 Gb of network usage.
If I correctly understand how MEGA works, you can't change your password. Your encryption keys are stored on MEGA's servers, to prevent them and anyone else from getting access to your keys they are encrypted using a hash derived from your password. Changing your password would effectively lock you out of all of your content.
An excellent point. Sometimes dev availability is more of driving force than required functionality - especially when major deadlines are pending.
There's probably an easier way to do it. Parsing HTML with regular expressions is usually not a good idea. Could you give some broader context as to what you're trying to accomplish?
This is indeed the reason. If you're interested [ars](http://arstechnica.com/business/2013/01/megabad-a-quick-look-at-the-state-of-megas-encryption/) has a pretty in depth coverage of what they're doing and why.
"Resetting the key to all of those existing files" would mean that they know the original key. It is likely unknown to them and therefore impossible to re-encrypt. They probably just keep the hash of your key for login purposes. This means, as I replied in your other comment, that resetting your password would be the same as creating a new account as your old resources would be inaccessible.
There are techniques that use a level of indirection to the master key. I remember hearing about them on the 'Security Now' podcast awhile back. I'll see if I can look up the episode. Although, just from what we see, MEGA doesn't implement this.
I call it making NaN bread. Just add a pinch of NaN and the entire thing turns into a loaf.
+1; would be nice to this added to Yeoman.
Impersonation? Notification? 
Can someone help tie this together for me? I know that functional programming doesn't touch the global scope as much as possible (pure and without side effects). In other words, object goes in a function, modified object comes out. Nothing is changed outside of that function. This very very narrow scope is what is so appealing about functional programming to me. Am I understanding that correctly? Many of the articles I've read about functional programming talk about lambda calculus and the more practical ones (like this one) show examples of functions that return values rather than modifying anything outside of their own scope, but I feel like I'm missing some fundamental discussion about functional patterns. Any help? [edit] This is the sort of discussion I am referring to: http://stackoverflow.com/questions/13107734/how-does-functional-programming-avoid-state-when-it-seems-unavoidable . I would love to see this in a javascript context. [edit edit] I guess I like the idea of being "as pure as possible" and I want to write more code that is as pure as it can be without becoming obtuse or verbose.
Nor I.
Yes it does.
It's *the worst* API I have seen.
Maybe i dont get it, but surely Mega can just decrypt your stuff then encrypt it again with the new key?
No. That defeats the purpose of resetting your password. You don't remember your current password when you do it. You're just talking about changing your password. And yes, they could do what you're saying, however, that's not what we're talking about. 
Only if they have your old password. (Which they don't store.) Like any good security system, the password they store is actually a hash of your password which cannot be used to regenerate your password. Generating the hash from your password is non-reversible.
&gt; If I correctly understand how MEGA works, you can't change your password OP's original comment. He was talking about changing passwords.
Oh i see, the hash for the password is different from the hash the key uses?
You can use a SVG as proposed here and actually draw that onto a canvas. Support in browsers will actually vary though. For an example see here: https://developer.mozilla.org/en/HTML/Canvas/Drawing_DOM_objects_into_a_canvas, or have a look how I've done it here: https://github.com/cburgmer/rasterizeHTML.js
If you edited your comment to this, I'd agree completely: &gt; Oh i see, the hash for the password is different from the ~~hash~~ [password] the key uses? The cryptographic key probably does not use a hash of the password. It most likely uses the password directly.
I had emailed them about that. I was curious to see what could be done with the API.
And computationally expensive. 
Ah i see, so in theory, a password change could be possible, if you knew your old password still.
Technically, since `NaN !== NaN`, `NaN` isn't even as tasty as `NaN`.
You might also want to check out my [Stash](https://github.com/hash-bang/jQuery-Stash) JS library which combines AJAX pull requests with local storage to keep data fresh.
How can they decrypt it? They don't actually store your password, rather they store files that are encrypted by you using your password. Your original password is used to encrypt all your files. If you lose the encryption key its very difficult to decrypt the files. 
It takes few before you get batman's attention.
this is not a reasonable offer unless the project takes less than 2 hours.
Not quite sure I follow but give this a try: /^http.*?(http.*?\.swf)/
I don't believe that your password is your key, rather your real key is encrypted with your password. If your password was your then key then brute-forcing would be feasible. However, a random key encrypted with your password makes it less so (depending, of course, on the key generation mechanism). This is actually the mechanism the Windows Crypto Store uses (or it did last time I checked).
Exactly.
https://mega.co.nz/#developers - read the Authentication section and tell me how you'd log in. I didn't think I was that bad a developer but I can't work out where the cs/token parameters come from. The JS has a lot of uncommented crypto, so I'm hoping when they release the libraries it'll make more sense.
this doesn't work
Maybe you can be more explicit. I'm sure you'd get a lot more suggestions if more of us could figure out exactly what it was that you wanted.
Looks nice, but why is it a jQuery plugin? It doesn't seem to use a lot of jQuery methods?
it's easier to notice where the callback is invoked if the parameter is named callback, cb, fn or func. please don't use anything else.
which ones?
Not 100% sure on this but from what I gather your password is used to encrypt the master key, which is then used to encrypt the files, (Truecrypt uses a similar approach), to update the password you just need to re-encrypt the master 2048 bit key, but not the files, So its not a big deal to change passwords - just need to re-suppy another encrypted key. However this would need to be done client side - probably too hard basket at this stage....
Took a week off to think of a better challenge. Any feedback / ideas for future challenges?
The 3 month support package will change to being no support on 1st March, so technically that meets your requirements :D. What searches did you do that didn't show us up?
&gt; I know that functional programming doesn't touch the global scope as much as possible (pure and without side effects). In other words, object goes in a function, modified object comes out. Nothing is changed outside of that function. That really is the big core lesson of FP and the most important thing to 'get'. A lot of the other stuff around FP is in service to this main idea or is intended to make composing functions easier. In a language like JavaScript which is 'dirty' the best advice I have is to write pure functions when ever possible, avoid ~~immutability~~ mutability and state. You will still need to do 'dirty' things (i.e. change state in place, like the DOM) but try to minimise the amount of this code. Aim for a thin 'dirty' shell of code which calls into the pure FP code. The FP code does computation and the outer shell code does updates based on the results. Disclaimer: I'm still slowly learning this stuff myself. 
I know /r/netsec was playing with it (for different reasons, but still). You might want to look there for some more info.
I'm not overly familiar with JavaScript/jQuery, but I notice a few optimizations you could be able to make it in this function. If these actually make no difference, I would love to know (I welcome the JS/jQ professionals to correct me). Wouldn't storing the results of $("#action-chart").find("a"), which you re-use in this same method, save you a second execution of find? Also, do these anchors appear one step below or in multiple levels below the action-chart or collectionGraphForm? If it was only one, you could use the space separator in the selector and you won't iterate over the entire collection of elements below those tags. Finally, I'm not exactly sure why you're having to parse out a field in the way you are. Is the current total calculated elsewhere? Could it not be stored in a global variable to save you from having to do string manipulations to get a value you already calculated and allow you to simply write it out to the anchor tag with a .empty() and format print? I definitely welcome some more seasoned advice here! P.S. I'm stuck at work with an older version of IE, so I will stray away from visiting your site, ignore if this is irrelevant.
I will see what I can do ;)
Anybody got any idea what those phones will cost? I understand companies have to hype a little but some pricing would be nice. 
Nice. Thanks. To supplement this: You can get any arbitrary distribution as long as you can compute the CDF of it: http://en.wikipedia.org/wiki/Inverse_transform_sampling 
You mean "avoid *mutability*" I think.
&gt; In other words, object goes in a function, modified object comes out. That's a step in the right direction, but it isn't quite pure yet. In functional programming, you don't modify anything (except when you have to). If your function accepts an object, then, if it is going to be "pure", it returns something entirely new: a value, an object. That means that the same function called on the same object will always return the same thing. So you never have things like `++globalVar;`, since that would alter state outside of the function.
This is really useful if you want uneven distributions. I only miss this distribution: #### ### ## # ## ### ####
&gt; (pure and without side effects). In other words, object goes in a function, modified object comes out To say it a little differently than skillet-thief, modifying a parameter object counts as a side effect and should not be done. Some one else could have a reference to that object and they would be impacted by your function (i.e. a side effect). 
I honestly don't blame you after reading this. But it was a simple misunderstanding of the logic they were using and which items were being encrypted. I didn't realize the encrypted the files I thought the files had a key and the key was encrypted. Hence you could reset the key without affecting the actual files.
Oh, I see. Yeah, definitely need to deep copy the object first then.
I take it your port wasn't going so well ;)
You could maybe try Math.max(Math.rand(), Math.rand()) * (Math.rand() &gt;= .5 ? 1 : -1).
hahahah
Ah. Yes I think I remember this being explained using some kind of dart-throwing analogy. [edit] Never mind I'm thinking of rejection sampling.
Are you running this JavaScript on the page where the `&lt;object&gt;` lives, or from an external scraper of some kind?
I find porting HTML5 into native app more frustrating than adjusting website for IE6
I would do something like [this](http://jsfiddle.net/mkantor/FZWGX/9/), assuming you're running the script from the page where the stuff you want to scrape lives. If not, you could build your own DOM and use the same method. On that page I've included a bunch different ways to embed flash content for test cases. It's possible I missed some variants, but you can add more URL grabbers for other cases.
external, anyway tnx all for help, i got it solved now: http://stackoverflow.com/questions/14454230/getting-http-url-using-regex-when-there-are-multiple-http-urls
how old are you? 12?
It would be interesting to see how others would handle HL7 parsing, namely segments/fields parsing 
wanna be my friend? \o/
My main problem was that I couldn't tell if you were writing a Chicken Soup for the Developer's Soul story or tips/highlights on upgrading to v1.9.
Good point. The goal was to just show that upgrading anything causes a mix of emotions that I think we all go through so I thought v1.9 might be a fun example to explore that concept.
And by the way, Chicken Soup for the Developer's Soul is a great idea. Does that exist or did you just make it up? ;)
Did we really need another post about closures and scope?
&gt; As well as the question if the critical mass of developers are willing to use HTML/CSS/Javascript to achieve platform indepence, instead of using Java/Android SDK or Objective C &amp; iOS SDK. [They already do](http://phonegap.com/).
+1
I wish that firebug and all the tools were just integrated in my IDE perfectly
You have a number of problems with your code: 1) The MakeComputerMove function has this: case 0: { if (a0.value == " ") { squareClicked("0_0"); got = true; } break; } This isn't going to work like you'd expect - the extra set of {} means that the "break" statement doesn't do anything useful, so all of the cases will get evaluated. 2) You have variables xTurn and computerTurn that are simply the inverse of each other. You could use !computerTurn in place of xTurn. 3) You call checkWin() to see if there's a winner, then report the game as a tie if 9 moves have been made. These two checks should be completely separate. If you have a winner, it doesn't matter how many moves have been made. 
I personally would rather see more posts about "DON'T DO THIS, IT'S CONFUSING" rather than yet another explaining potentially confusing code.
The main issue I have with upgrades to jQuery is that my code isn't the only code that needs upgraded. I'm stuck with 1.8.3 until all my jQuery dependent libraries and plugins are also updated. It's even worse when updates to jQuery and jQuery UI happen at the same time.
Check out backbone and require.js 
 var a0 = document.getElementById("0_0"); var a1 = document.getElementById("0_1"); var a2 = document.getElementById("0_2"); var a0 = document.getElementById("1_0"); var a1 = document.getElementById("1_1"); var a2 = document.getElementById("1_2"); var a0 = document.getElementById("2_0"); var a1 = document.getElementById("2_1"); var a2 = document.getElementById("2_2"); Another piece that is obviously wrong, you're declaring and assigning the same, 3 variables 3 times each. Broadly, I think you should separate the logic of the game from the interaction with the dom, e.g. read the board-state from the dom and then deal with it. function getBoardState() { var rows = [], y, x, id; for (y = 0; y &lt; 3; y++) { rows[y] = []; for (x = 0; x &lt; 3; x++) { id = y + '_' + x; rows[y][x] = document.getElementById(id).value; } } return rows; } 
I did spend some time with backbone about half a year ago, and I struggled a bit in part because I had never spent much time working with Javascript before and thus wasn't always clear on how parts of it worked. Also the fact that there's no "idiomatic" way of writing a backbone app gives me too much rope to hang myself with at this point. I'd like to get my JS foundations together first before building on top of them.
Not exactly what you're looking for, but a *great* read for wanting to jump into the deep end with JS is [JavaScript - The Good Parts](http://www.amazon.ca/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=sr_1_1?ie=UTF8&amp;qid=1358908491&amp;sr=8-1). It doesn't hold your hand, and assumes you understand how to code. &gt;*"Most programming languages contain good and bad parts, but JavaScript has more than its share of the bad, having been developed and released in a hurry before it could be refined. This authoritative book scrapes away these bad features to reveal a subset of JavaScript that's more reliable, readable, and maintainable than the language as a whole-a subset you can use to create truly extensible and efficient code."* I think it'd be a good resource for you. Good luck man! :)
Why are you stuck? Did you try 1.9 with the migration plugin? 
Secrets of the JavaScript ninja. http://jsninja.com/ written by John Resig, author of jQuery. I'm waiting on my copy from Amazon but a friend sent me a link to their early addition copy and I've made it half way through and I enjoy it a lot. I think it takes you to a new level with JS dev.
codecademy.com
I almost find it faster too look things up in the definitive guide than in Google...
I'm getting a lot out of [Effective Javascript](http://effectivejs.com/). Compelling review [here](https://github.com/raganwald/homoiconic/blob/master/2013/01/effective-javascript.md).
So it's Folding@Home for browsers. Neat!
Personally, I have memcached small templates that I use with backbone applcations. That might be one reason to store the templates server side.
http://eloquentjavascript.net/contents.html Try this guy out. Even has a built in console to test the code out.
Awesome! Now get this thing to work on mining up some bitcoins!
... you're the second person who has come up with this idea today. Maybe there will be profit making in this project after all...
Having spent a day debugging code which turned out to be caused by type coercion related bug, it made me remember this post. The whole point is that using === removes the risk of creating the bug. That's the whole thing with bugs. They creep up on you. Please take my advice and start using it as standard practice! If you're committed to writing good JS, you'll be linting your code, and thus triggering the "double equals" check anyway.
I like the challenge of finding a regexp that satisfies a set of requirements, but I don't like reverse engineering the requirements form a set of examples. Could the challenges specify why, e.g. `callum!callum@lynx.io PRIVMSG #(cm) :Test` is not valid? Is it because the channel name contains parenthesis? But then why is `callum!callum@lynx.io PRIVMSG #()"';:&lt;&gt; :Test` valid?
How are you defining a valid IRC message? I started off with [RFC 1459](http://www.irchelp.org/irchelp/rfc/chapter2.html), but some of your examples don’t seem to match that standard. For example, `|\^!abc@test PRIVMSG #chat :Test should not be valid because the pipe character (“|”) is not a valid special character, and because a &amp;lt;nick&gt; is required to start with a letter.
http://es5.github.com/
I accidently off the map.... infinite falling.
I use [jQuery deferred](http://api.jquery.com/category/deferred-object/) to prevent callback hell. What does bacon.js do what jQuery's deferred cannot?
I just bought this as well - very interesting read. Definitely not a book to start off on though - you won't be able to appreciate a lot of the advice till you know the basics (e.g. currying, type coercion, etc)
read the spec. http://www.ecmascript.org/docs.php
And back when Android came out people were calling it a "blatant iOS rip-off"... and though I love Android, they had a [pretty strong point](http://www.technobuffalo.com/2011/10/27/android-before-and-after-the-iphone/). Fashions change, interfaces evolve, what works becomes widely adopted and what doesn't dies out. I strongly doubt there's no difference at all between the FfOS and Android UIs, so criticising it on the basis it merely looks similar to Android seems a bit irrelevant.
You didn't specify which version of IE you're having problems with, but for IE9 and below, you could use Conditional Commments: https://en.wikipedia.org/wiki/Conditional_comment I would encourage you to try fixing the actual bug, though, rather than just disabling functionality in IE.
Yes I prob. gonna have to. Whats the point in having all the javafiles when the viewers of this site is prob. just using IE. You convinced me!!!
Cant resolve it. :(
Let me just call my guy there.
The name you should be looking for is **Douglas Crockford**
That is an amazing suggestion. 
I've fixed that case - it was supposed to be without the hash. Thanks! I'll document what needs doing better in the future.
again?
I still consider the comp.lang.javascript [FAQ about closures](http://jibbering.com/faq/notes/closures/) to be the most comprehensive source.
Don't worry, tomorrow we'll tackle `How to do OO with Prototypes` and then we'll round out the week with a post on `Understanding 'this'` for Friday. Next week, we'll just go over the same topics again in case you missed it (or the search feature suddenly stops working).
It seems very cool but I think you'd also have a ton of complexity in your programs to do anything "large scale" with it correct? Since the browser nodes only speak back to the server and not to each other. Also it kind of seems like a bad thing for some users on metered internet or limited bandwidth if their sites are doing some network activity in the background - esp if it gets up there in terms of bandwidth. Nothing more than some ramblings :) Great project idea very forward thinking!
So I guess the next best thing is to embed an IDE into your browser? That's essentially what this is, if I understand it correctly.
This is going to be so awesome.
&gt; Since the browser nodes only speak back to the server and not to each other. This might not be the limitation you think it is. A lot of worker models are built like this, with the server acting as a central broker passing messages between workers. A little roundabout maybe, and I'm not familiar enough with queen's api to comment on how hard it is to do this with queen, but it's certainly doable with this general arrangement. **edit:** In fact, in practice peer-to-peer is significantly harder than a client/server model. That said, there is a limitation to what you can do in a browser when it comes to scientific computing (ie, what f@h and similar do). See, most of the code that scientists use for their numerical methods are written in C or fortran, and higher-level numerical methods libraries are generally based largely on bindings to these libraries. For example, iirc [numpy](http://numpy.org) requires [a BLAS implementation](https://en.wikipedia.org/wiki/Automatically_Tuned_Linear_Algebra_Software) and [LAPACK](https://en.wikipedia.org/wiki/LAPACK). That said, browsers aren't completely hosed. There's [at least one reasonable linear algebra library](http://sylvester.jcoglan.com/) for javascript which should be fine given the sizes of datasets you'd reasonably trust a browser to handle anyway, and I hear this [emscripten thing](https://github.com/kripken/emscripten/wiki) is pretty sweet. &gt; Also it kind of seems like a bad thing for some users on metered internet or limited bandwidth if their sites are doing some network activity in the background - esp if it gets up there in terms of bandwidth. Similar projects to queen have been done before, though the ones I've seen were either less general or less polished. Generally, these followed a policy of being explicit about when a page was running a job and when it was not. Throttling isn't the worst idea, either.
Also see my other post introducing the distributed execution platform Thrill utilizes: http://www.reddit.com/r/javascript/comments/173qkp/introducing_queen_a_distributed_platform_using/
Gotta get them page views
Basically just another introduction to AngularJS, would have been nice with a bit more depth.
If you want to remove the JS from the source on this page, that's something you'll have to do in the Zendesk configuration of that particular script - telling it only to load where needed. If you don't mind the script being in the source, but want to stop its execution, you can use an if statement and the window.location.href object, like such: if (window.location.href != "http://www.yoursite.com/yourpage.html") { // Do stuff }
Do not allow listing of server directories from web. If templates are good, do not have logic(much) inside, then I see no reason why to hide them? User will get them eventually anyway. Other way is to have controller/module in application which will check user privileges for every request and then decide what to serve. That way you can hide CMS templates from anyone who not logged in CMS right now for example. But this will be slower and consume more server resources than straight web server response.
c9.io will suite your needs. 
I'm the creator of Plunker. You can collaborate by starting a 'stream' and sharing that stream id with others who can then join the 'stream' and thereby collaborate. See: http://plnkr.co/edit/?p=streamer **DEMO**: http://plnkr.co/edit/?p=preview&amp;s=does_anyone_know_of_a_mutliuser_collaborative PS: What sort of issues did you experience when it was not working for you?
Wow, do I ever have a solution for you! Check out [Plunker](http://plnkr.co/edit/?p=streamer). It should give you exactly what you're looking for. More info+demo on my response to danmofo: http://www.reddit.com/r/javascript/comments/174snc/does_anyone_know_of_a_mutliuser_collaborative/c827x5r
That did it! Excellent suggestion!
Great tool!
Deferred can't deal with streams of events. It doesn't help you if you'd like to deal with unknown number of e.g. mouse clicks and how to drive app behavior based on these.
Yes. Embed an IDE in the browser that of course has an IDE embedded in it with an embedded browser :D
Looks nice! Would love to see this ported to node.js as well.
Every damn week there is a new angular post. We get it already. 
If your worried about possible embedded code in the image, just make sure your config file for whatever the language you use never executes anything in a directory that users can upload to.
You should definitely name it "theCallbackThatWeShouldCallAfterWeFinishHere".
[Coda](http://panic.com/coda/) and [SubEthaEdit](http://www.codingmonkeys.de/subethaedit/) are Mac code editors which share the same live editing engine, and it works *wonderfully* well. I can't compare to Plunker since I haven't used it, but if you're on OS X those two definitely are the best you can find.
http://collabedit.com/ is what I use. I especially like that it doesn't require you to login
what you want is st.replace(/ /g, "+") You don't need to put quotes around a regex, use the style above, it is called a regex literal. I don't think `String.prototype.replaceAll` is standard at all in JS. AFAIK it's a java thing, or maybe IE only. It's undefined in chrome.
Without knowing the specifics, it could be that the only way to validate the data is to perform the algorithm on the server side. Can you validate the input to the graphs? Then generate the graphs on the server side with [node-canvas](https://github.com/LearnBoost/node-canvas) in JavaScript on the server. 
Thanks! That works.
When I was tutoring someone on html, I used http://htmlpad.org/. It's a simple etherpad that hosts a corresponding html file. It may not have syntax highlighting, but it works for simple needs.
Any chance you could make tab spacing configurable? Maybe even the choice for hard versus soft tabs? You picked my least favorite indention (2 space soft tabs), so I usually find myself choosing some other tool over Plunkr for that simple fact. Otherwise, great work on a great tool!
There is no point in using parseInt there. The `i` counter starts at 0. Integers work just fine up to 2^53 (= 9,007,199,254,740,992).
It's probably just porting garbage or something like that. Shit happens. Well, it doesn't break the code. It just takes that number, turns it into a string, and then turns it back into that very same number again.
I agree. This makes no sense. parseInt() does return a number object so could be used as a kind of cast operation. However, it is a mystery why they'd need it in the temp[i+1] expression but not in temp[i].
Check out http://beta.plnkr.co/edit/ I've got you covered 
Awesome! That page comes up blank for me now (Chrome and FF) but I trust it will be worked out in time. Thanks.
&gt; parseInt() does return a number object It looks like it returns a primitive to me. This code: console.log(typeof parseInt(1)); prints "number".
You are not the only one. Chrome here, blank page.
Using it as a debugging tool is what it's for, but production code should never reference `console` (unless you're writing a debugging library or something).
You can never learn too much regex.
&gt; "10" is the default radix, but the guy probably added it anyways because jshint complains that it must be declared. It's actually not the default. The default behavior is to try to determine the radix based on the input string. Usually it guesses base 10, but if the string starts with a "0", it will be interpreted as octal. The fact that so many people believe what you just said is why jshint requires it. But that's not even relevant here, because there is no scenario in which `i` can be anything other than a Number.
Ah thanks i appreciate you pointing that out.
&gt; it doesn't break the code. It just takes that number, turns it into a string, and then turns it back into that very same number again. That sounds like the kind of hack (some) people use in place of `wait()`. Is it possible there's some scenario in which the code was running too fast? &gt; It's probably just porting garbage That makes the most sense yet, especially considering it isn't commented. But I'm still wondering ...
&gt;That sounds like the kind of hack (some) people use in place of wait(). It's just marginally slower. You can probably do this kind of thing over a million times a second.
Share a tmux session. Launch emacs. Done! 
Nice article. Wish d3 were in the mix. 
Hey mate, anyone can add a new "Viewpoint" if you think something is missing (blue button on left). Happy to help flesh it out if you get it started. (disclosure: Friends with the founders)
I'm not sure on how you think it's working. If you use httpRequest again, you won't be running that function every time. The function will run right away, and assign it's return to httpRequest. From then on, httpRequest contains that single value. The function doesn't get run every time.
As long as your server side script is returning a hard-coded filename and mime-type, or one from a strict list, and it's just an image (not something like an HTML or PDF that can contain instructions), you should be fine. The worst case would be a malformed image, AFAIK. (Obviously, someone correct me if I'm wrong.) Just make sure the "identifying" elements (file name, MIME type) are not directly specified.
Looks pretty cool! Reminds me of the goodness that is [JSTestDriver](http://code.google.com/p/js-test-driver/). I'll have to give this a go.
For a beginner, I think closures are difficult to grasp -- definitely spend some time on that. Also, maybe point out some of the [good parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=sr_1_1?ie=UTF8&amp;qid=1359006794&amp;sr=8-1&amp;keywords=javascript+the+good+parts) of JavaScript.
Array[1] vs Object[1] can get hairy
* First-class functions * Closures and their use * Function scope (not block scope) * Truthy/falsey values * Call, apply, bind * Single-threadedness and event queuing/handling * Asynchronous; callbacks/anonymous functions
Beautiful. brb implementing [FEM](https://en.wikipedia.org/wiki/Finite_element_method) in javascript
Cloud9 does this, I believe. https://c9.io/
That a function is a object, I think this is one of the biggest strengths in JS and its also quite different from most mainstream languages.
Plus another one for scope. Talk about lexical scope, and how no matter how or where or when a function is called, it always "sees" the variables in its lexical environment, aka where it lives in the written code. I wish I had understood this earlier in my career. It goes hand-in-hand with closures too.
I'll compile something public definitely. Most likely I'll just start a wiki on top of GitHub during the weekend and work on it there. :) I have a [brief list of starting points](https://github.com/bebraw/jswiki/wiki/Beginner%27s-Resources) available. I hope that helps in the meantime!
codepen.io has a premium mode for this
jQuery, and the advantages it brings over 'vanilla' JavaScript. Make it clear there is no need to write your own Ajax-library for instance.
Looks nice. On the Queen page it says I can connect SauceLab browsers, how exactly do I do that? 
 $ browserify &lt;(echo) | gzip | wc -c 3418
===, !==
I know it's not the javascript that's interesting here, per se, but I wanted to share it anyway. And I also know that it's not JSON that's actually returned, but we wanted it to work for people that didn't have a JSON printer installed in their browser.
For books you missed the js bible. The good parts
Very nice! A few suggestions for improvement: - Make it a true jQuery plugin. - Make the lens size adjustable (via an option hash). - It would be nice if the plugin built the DOM structure for you, and you just needed to use an API that looked something like this: $('img.zoomie').zoomie({ fullSrc: &lt;full-sized image url&gt;, lensSize: &lt;diameter of the lens&gt; });
Corollary: vanilla JavaScript and the advantage of writing less than 12 lines of code to implement basic ajax functionality in browsers down to IE 5 rather than blindly including a library.
Good point! Added.
Thank you! I like these suggestions and I'm going to implement them asap.
I'm coming from a .NET MVC direction and a controller to serve templates (and check user rights) was the route I was headed which is what spawned this question. I'm trying to work it so I can send down a request for N number of templates instead of doing a get for 1 at a time. 
Agreed. At the very least understand what is going on cross browser. 
THANK YOU. I really needed something like this for a data-driven app I've been asked to make. Much appreciated!
&gt;Single-threadedness and event queuing/handling maybe along with that also Workers?
That's a good project, but unless they've rewritten it recently, I don't think it'd be a viable alternative if you require integration with Backbone.
I do not have any projects on the go that need something like this (I have one that is using a crappy zoom, but I am not upgrading it yet). I have definitely saved this for later down the road. It is small and super easy to implement. I like it!
Inheritance. What throws a lot of people off is the fact that arrays inherit from objects, meaning you can apply attributes to them. var arr = [ "Zero", "One", "Two", "Three" ]; arr["Zero"] = 0; arr.Zero != arr[0]; big fat mess.
Maybe you can add some double hash check. Generate a hash of some image vars(width, size, height, some data vars, a uuid ( eg. session token) and the vars to generate the image. Verify server side if the same hash comes out? Or am I missing something here?
Ah, ask and ye shall receive!
Hi Redditors! Project author here. I spent the last 2 months working on this project which was extracted from an inventory tracking app I wrote. The reason I wrote this was because I was quite disappointed by the web-based grid libraries out there. I really needed something that doesn't use Hungarian notation, generates plain HTML tables, flexible but light-weight and works on mobile. It should be well-tested and well-documented too. I couldn't find any that satisfy all of these requirements so I rolled my own. I'm seeing a lot of traffic from Google Analytics now. I'm glad you guys like it! By the way, if you guys also happen to be looking for a Backbone.Collection extension that works well as a paginator, check out this project too: https://github.com/wyuenho/backbone-pageable Ask me any questions about Backgrid and/or Backbone-Pageable!
Y.Anim was written a long time ago (more than 4 years ago from the commit history), and probably ported from YUI2. It's likely just a fragment from an old browser bug back then.
I have seen one of those js bitcoin things but it isn't very economical. The electricity vs money rate isn't good enough.
Oh crap I think it was 20kb minified, not gzipped. It's not on cdnjs and the cdn link on your page didn't work when I wanted to find out.
&gt; Share a tmux session. Launch **vim**. FTFY ;)
In you case you could just set the httpRequest variable directly though. IIFEs are for creating new variable scopes but I don't nee any variables in your code that need to be hidden: var httpRequest = null; if (...) { httpRequest = ... } else if (...) { httpRequest = ... } That said, your example code should work perfectly fine so there is nothing to worry about. The only thing I would nitpick is that, for stylistic reasons, I personally prefer doing (function(){ ... }()) instead of (function(){ ...})()
This looks fantastic. Great work! The documentation you supply looks very comprehensive and full of useful examples. I will definitely be looking at this for a few projects I'm working on.
To be fair, the library OP linked to would probably be better for a project where the "grid" isn't the main focus. SlickGrid has a lot of overlapping functionality with Backbone, but SlickGrid is probably the best "grid" component for extremely large data sets. I previously was using DataTables (which is also very well written and has exquisite documentation), but decided to switch to SlickGrid because it provided more control over the styling (since it isn't using HTML `&lt;table&gt;` elements) and it allowed for much smoother scrolling of large sets of data since it's virtualizing the scrolling internally (instead of replacing `&lt;tr&gt;` nodes in the DOM which will lock the UI for a split second due to the action being synchronous).
For this sort of generic JS issues, I am a big fan of I am a big fan of the [jqfundamentals](http://jqfundamentals.com/chapter/javascript-basics) tutorial. It does a good job of covering common "JS" gotchas and it also includes many links to other useful references.
vim, emacs, as long as they don't make me use Windows, I'm good.
You are spot on. Backgrid.js was designed for displaying and editing a moderate amount of data at a time both on desktop and mobile. Special emphasis was placed on making sure you can display multiple grids on a single page. The Backgrid.js FAQ explicitly states that it will never be a library for building a spreadsheet. That said, when I started developing Backgrid, I hadn't created Backbone-pageable yet. Backbone-pageable is an offshoot of Backgrid when I was looking around for a backing store for the paginator extension, and then I got carried away and made it support infinite paging. So the infrastructure IS there now to support much smoother scrolling (which reminds me I should probably remove that part of the FAQ). Appending &lt;tr&gt; elements while rendering the grid is not a requirement for this project. If you are using Backbone.PageableCollection in infinite paging mode or client mode, I should be able to double (multiple?) buffer the page fetching and inject all the detached but rendered rows into a document fragment in one go. This way scrolling should feel much much faster for paginating large result sets. This will be a very nice thing to have for version 0.3.
I'm kind of in the same boat, working to remove the remaining DataTables usage in favor of SlickGrid. We plan to move to Backbone eventually, just can't yet because we have more expensive technical debt to pay down :\
If the "full size" image is equal or smaller than the on-page image than the magnifying glass is meaningless, so it exits (on purpose). I should comment this code better! Edit: Word typo
&gt; You can actually find job listings that does not list javascript as a skill but list jQuery. I don't know if this is a reflection of HR's incompetence at listing job requirements ("5 years of Windows 95 experience ... in 1998"), jobs with easier requirements, or simply jQuery's popularity.
Prompts: [https://developer.mozilla.org/en-US/docs/DOM/window.prompt](https://developer.mozilla.org/en-US/docs/DOM/window.prompt) For loops: [https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for) Alerts: [https://developer.mozilla.org/en-US/docs/DOM/window.alert](https://developer.mozilla.org/en-US/docs/DOM/window.alert) If you read each of those you should have everything you need. Here's how I'd do it (in english) * Place output of prompt in a variable * Use variable in the condition of the for loop * Inside for loop display the alert You might also want to read [Mozilla's Javascript Guide](https://developer.mozilla.org/en-US/docs/JavaScript/Guide). Let me know how it goes!
The image inside `.zoomie` always fills `.zoomie` completely, and `.zoomie` can have any width you wish. Now: The script calculates all the ratios when the full image loads in the JS, so it's slightly later than the page load event. If you resize the window and the width of the container changes, the ratios won't be recalculated, that is true! As per a suggestion in these comments, I'm going to make this into a proper jQuery plugin. I'm going to implement a method that you could attach to the window resize event to recalculate everything. (Or make it a default? I'm not sure).
That, and also jQuery implies JavaScript, so I think it's reasonable.
Ie8 and Ie9 don't support pushstate, don't think there's a way around that. You should do a website that works without pushstate, just use normal a href urls and change them with pushstate with a jquery code. So if pushstate is not supported you have the website working in old fashion http request, back button included.
This is the jquery code i use to change the normal links to pushstate if(!!(window.history &amp;&amp; history.pushState)){ // hasPushstate $(document).delegate('a', 'click', function(e){ var url = $(this).attr("href"); if(url.indexOf(baseurl) != -1 // if has baseurl || (url.indexOf("//") == -1 &amp;&amp; url.indexOf(":") == -1 &amp;&amp; url.indexOf("#") == -1)){ // or if it's relative url var title = $(this).attr("title"); history.pushState({'url':url, 'title':title}, null, url); e.preventDefault(); return false; } }); } 
Fair enough. Then again, even before jQuery we had the copy-and-paste "coders". Now it's become "How do I do a loop in jQuery???" -_- Maybe it's not even very important whether JavaScript, or jQuery, or both are listed in job ads; any recruitment process that will allow a copy-and-paster where a developer is needed deserves what they get IMHO.
A tip for your example code, make the table headers "cursor: pointer" in your css if you can click on them to change the order. Looks much more polished.
Damn good looking site.
Took a look at the code and poked around the demo simulating touch events in Chrome (24.0.1312.56) and the iOS simulator, my experience with the demo was that it felt a little rough around the edges. The motion was janky and I couldn't seem to get a fine level of control with the joystick so the camera just kind of panned all over the place. Some helpful suggestions: - Make a demo specifically for the joystick feature that has it already enabled. - Create a 2D environment that features the joystick, I was interested in seeing how it would perform for a side scroller. Minor nits: SQUARIFIC.framework.TouchControl - 3 naming styles here, ALL CAPS, lowercase, and CamelCase Keep working at it (I'd love to see some refinements to sensitivity on the joystick!), the code is pretty small for what it's able to do which is a huge plus :D
There is nothing awkward about this at all, the author is pretty misinformed here. Just use a simple conditional comment and you're done. (And the issues stated pretty much only burned idiots using "jquery-latest".)
The logic for that is that SQUARIFIC is important so it has to stand out, framework is one word so it is lowercase and TouchControl is a constructor so it is CamelCase. I might fix that in the next release though cause it indeed is a bit messy. That it works a bit annoying is because the speed of the cubeengine scrolling is set too high. I'll make a demo for this project only tommorow so hopefully that will make it give a better feeling.
Thanks for explaining your reasoning, that makes sense. It was hard to glean whether there was a reason for the differences because I didn't have any other code from .framework to compare it with. A better demo that requires less user setup would definitely help, and please do one with a 2D side scroller :)
Something which supports partials should work. Try Handlebars.
&gt; how I need to handle underscore templates now because some of my templates start with a space or tab How about $( _.template($("#content").html(),{}).trim()); Or just add a wrapping element $('&lt;div&gt;', { html: _.template($("#content").html(),{}) }); &gt; First is it’s not going to change... If you need the old API, then use an old version. Google's CDN serves older versions of jQuery up to 1.2.6. &gt; ...and secondly it’s compatible cross-browser. Don't use 2.0. Is it really that hard? jQuery is old, and as a result it comes with a lot of cruft. [Zepto.js](http://zeptojs.com/) showed how light jQuery *could* be if it left some of those behind. Certainly nobody's *forcing* you to use the latest and greatest version. 
you could use this: http://labs.codecademy.com/#:workspace then whenever you do changes it will create a new link that you could send the other when you want him to look at what you've done and he can make changes to that one and change you a link back which will be the same but with a different version number noticable by the #
To be honest once it was announced they were removing support for IE8 I couldn't think of a single reason to use 2.0. When IE8 loses some more market share there wont be a need to worry about js cross browser compatibility as much, vanilla JS all day baby.
Take a look at brunch.io
Thanks, I did look at brunch and http://chaplinjs.org/ at some point but since I included the various components one by one, at the end it didn't really make sense to migrate to a framework.
talked on irc, stackoverflow, reddit, news groups, meetups, twitter, g+, my fb friends. looked at freshcode, sf.net, github, google code, etc. searched for things like "diagramming library" "graph library" "graphic library" "vector library" ... searched for code that had nodes and edged prominent ... I did a lot. Wait so you mean it will be "no support" AND $4,000 or "no support" and something far closer to 0 (I have the money either way ... I just want to know what I'll be looking at in March because I also have the talent) 
It seems like there is a lot of negative press around this whole breaking ie change in 2.0, but I see this as a big win. 1. Get ride of live(): IMHO worse addition to the api ever. 2. API is the same between 1.9/2.0: I don't have to serve unnecessary code to modern browsers. Zepto.js is nice, but it's subset approach to the jQuery api means you can't just 'drop it in'. jQ 2.0 does exactly that.
There isn't necessarily a good way to do this with just a templating engine, though I'd look into x-skeww's Handlebar recommendation (I don't use Handlebars). Recursion is a 'smart' activity, and templates are traditionally 'dumb.' I'm in the process of writing an article comparing recursive views in Angular and Backbone. Maybe I'll PM you when it's finished. 
&gt; and templates are traditionally 'dumb.' This kind of bugs me a bit actually. If point of templates is to decouple the business and the presentation logic, how is making control flow arbitrarily harder helping? For an example of what makes me feel this way, Mustache says in its documentation that it is proud to not include an if statement. However it is still full of features (sections, inverted sections) that do just that but in a clumsy way.
The data source is one of my favorite things about KendoUI, having multiple controls share single data source and having changes cascade across both is pretty amazing. At every user group where I've showed KendoUI, people really get excited about the data source. Personally I fell in love with the data source when I realized I could extract data out of it. I built a site where I had a kendo grid and an export button that would take the data as json and post it back to a controller action method that would generate an excel file for download. The client loved it!
&gt; Ie8 and Ie9 don't support pushstate, don't think there's a way around that. You should do a website that works without pushstate Example #9374 of how IE holds back the web.
&gt;If point of templates is to decouple the business and the presentation logic, how is making control flow arbitrarily harder helping? Now we might be using two different definitions of 'template.' It sounds like you want templates to contain presentation _logic_, making them somewhat like a strong View. I use Backbone Views. The View javascript is responsible for formatting data--whether it be from Models, Collections, or its own rendering state--and passing an object to the templates. In other words, I think of a template as a stamp, and the View determines the color of the ink. Mustache _does_ have a limited control flow. But it's confined, you see, you can only check if a property is present. {{#name}} {{name}}{{/name}} is possible; {{#name=="bob}}{{name}}{{/name}} is not. 
The only reason is so you can keep using 1.9 with conditional comments. Otherwise just HTMLElement.prototype.on = (jQuery on) and leave jQuery behind.
Is a declarative language something like a template? Is a template just a declarative language? I'm thinking what could happen if we applied Prolog to templating? Just a thought, nothing more
Hi, new programmer here. I'd just like to check my understanding of closures. Basically a closure is a way to pass in state to a function? Eg, if you call a function with certain parameters, the values of those params can get passed into a different function, even after the parent function has already returned? I find grokking closures to be similar to understanding monads: eveytime I think I understand what's going on and then the rug gets pulled out from under me.
Prolog has weird backtracking. If I would go into that direction I would serach for something that looked like the lambda calculus.
If you are coding the presentation logic in JS then why bother with a template then? It would just be an extra layer. &gt; and passing an object to the templates. But then if your templating language is too limited then you need to do some unnatural preprocessing to the object. &gt; But it's confined, you see, you can only check if a property is present. So instead of doing a natural switch over the value of my "type" property now I need to reencode the object to use "is_type1=true" properties and other things like that. The branching functionality is still there so all this limitation is doing is complicating my code :(
Meh. It's worth it if you want to use of the existing MVC frameworks out there like ember, that have a special brunch edition.
Never again telerik never again... 
Getting 404 when I click your link :(
The 3d text for the logo instantly makes it different. Another thing is the color scheme: bright colors stand out a lot and are hard to make look minimalist.
Not a method, just a property... also love that the value is a String.
Make Boolean a String, get free press on Reddit. I think the devs are doing it right.
I misinterpreted you intention with the post =D Whoops!
 $ browserify &lt;(echo) | uglifyjs | wc -c 4980 Which cnsjs link on my page? I haven't heard of cdnjs before.
This might be really helpful: http://www.greensock.com/jquery-gsap-plugin/ It's a plugin that hijacks the jQuery.animate() method so that it uses GSAP under the hood which speeds things up a lot and lets you tween additional stuff like colors, transforms (2D and 3D), boxShadow, borderRadius, etc. It should make it super easy to drop into your project if you're already using jQuery.animate() or if you prefer that syntax/workflow. 
er yeah, that.
I like how the top feature is 'No hungarian notation,' I'm guessing you suffered through jQuery DataTables as well at some point? ;)
Among the many jQuery plugins that seem to be made out of spaghetti :P
var poo
Not a method but the strings I pass between scripts are quotes from game npc's usually portal
I like the minimalism! You should also make a demo with http://voxeljs.com
Wrote a controller for several loosely coupled instances that we didn't want to have to all know about each other, but that also were mutually exclusive for a particular state - so they had to somehow negotiate only one of them existing in this state at a time. .thereCanBeOnlyOneHighlander() 
A method or property name should ideally explain why it exists and what it does, without the need for a comment. A better name would be: dwr.engine._allowGetInsteadOfPostForSafariButMakeForgeryEasier = "true" This tells me that there are probably some issues using POST on Safari that can be avoided when we use GET instead, but there are some risks involved so I should probably check before setting the value to `true`. One brief Google later: Versions of Safari (up to 1.2) and Opera Mobile (up to at least 8.6.5) have buggy XHR implementations that claim to support GET and POST, however the body of POST requests is lost. To work around this limitation DWR automatically detects buggy versions of Safari and switches from POST (the default) to GET. There are 2 downsides of GET: * There is a limit to the amount of data that can be passed in a GET request, and it's not hard to hit that limit. * GET requests are a lot easier to forge than POST requests. POST is still forgable using DOM form manipulation (in fact DWR does this to submit iframe/POST requests) however it is more work, so it will slow attackers down.
The jQuery API has changed over time. Only because the last few versions were comparably tame in terms of breaking established APIs, doesn't mean that we haven't seen a few changes here and there. However, the main point on the agenda of the developers is performance. Supporting obsolete browsers has a negative impact, so eliminating said support is imperative in order to achieve the desired performance. The developers realized that there were cases in which obsolete browsers are still required and therefore introduced the current compatibility version. In addition, most reasonable people don't upgrade the instant a new jQuery version comes around, but wait until they've seen the changes.
I've written über long method names which are relevant but not whacky... as least not at the time.
var justsomerandomvariablewithnousebutisneededfortesting = "poo" I dont remember the exact situation where I used that one. But I do remember that I just needed a variable, it didn't matter what. So I named it that.
Yep I checked slickback and SlickGrid before diving into Backgrid. There's also another project called recline.js. Slickback hasn't seen any new development for 9 months and it's still pegged to Backbone 0.9.1. It also reinvented a lot of stuff to glue Backbone and SlickGrid together, which as noted by jcready, does have a lot of functionality overlapped with Backbone. I reeeeealllly wanted something very light-weight that you can just dropped in a Backbone.Collection instance, some minimal configuration and bam you have a fully sortable and editable grid. SlickGrid also generates a lot of nested &lt;div&gt;s. Recline.js has a less complex integration with Backbone.js and SlickGrid, but it's documentation is essentially RTFS. I'm also not sure whether it works with the latest Backbone changes as the tutorial suggests it is pegged on Backbone 0.5.3 and the project's last release was in September.
Well, there's a tradeoff between names that are descriptive and names that are short, IMO. A short name has the benefit of being easier to recognize when looking through code (just like we recognize words by shape when reading text, too). I'd probably use a shorter name, but I'd definitely explain the rationale of the property in a comment near where it's defined. It's a pity that this wouldn't be introspectable from the value though. :( Oh, and regarding the forgery point, wouldn't a forged request just directly send a request to the server resource? I don't see how a JS property would make things more secure--even if someone isn't on Safari, one could still read through the code to figure out the location that accepts GET requests, and use that anyway? The size limit is a good point, though.
"jQuery will never reach version 2.0" - John Resig
On the other hand, the IDE could probably fix that spelling error in a matter of seconds...
And that it did, was a pretty hilarious find by one of our contractors though lol
Completely right about sending requests directly. I just copied the text out of the docs for dwr.
&gt;If you are coding the presentation logic in JS then why bother with a template then? It would just be an extra layer. Yes. The template layer in HTML is somewhat analogous to the pixel grid in a 3D renderer: it's the final state of the View. The presentation logic is what takes both presentation state and data state and provides the template layer with prepared data. &gt;But then if your templating language is too limited then you need to do some unnatural preprocessing to the object. And if your template language is powerful, then it's _doing_ the "unnatural" processing and you're **still going to have to tell it how.** &gt;So instead of doing a natural switch over the value of my "type" property now I need to reencode the object to use "is_type1=true" properties and other things like that. This is the point at which I don't have a grasp on the shape of the data you're working with. But this doesn't sound like a good solution to me. You want a single template for every possible value of "tag"? You need a template for every possible type of tag. I mean, now that I look at it, if "mycustomtag" is a widget then it's a separate bit of javascript code, right? How do you expect a template to be able to switch to arbitrary views? I'm tempted to tell you to look at Angular, whose 'templates' are extremely powerful--to an uncomfortable extent. Actually, yeah. Look at Angular. [Here's a demonstration of recursive Angular templates.](http://jsfiddle.net/brendanowen/uXbn6/8/) I strongly advise against using Angular. &gt;The branching functionality is still there so all this limitation is doing is complicating my code :( I'm only saying that you've got a complex problem and you're going to have to face it. While I may be wrong, I don't think a particular template library is going to save the day. 
Nothing too crazy lately..... Person.cakeOrDeath? 
Thanks for the info. It will be $4k and no support, but if you reference this thread we'll do it for $3k without support. You will find that somewhat cheaper than yFiles HTML complete, you can check that pricing here http://www.yworks.com/en/products_yfileshtml_commercialinfo_order.php .
Mine is: GetBodyParts() It was for an accident reporting application I wrote for work.
Did you have a Japanese programmer? To him, "cart" and "cat" would sound pretty much the same. 
Closures are actually quite simple, but their implications can be pretty tough to swallow. A closure is a function within a function. The special part is that the closure has access to the variables (and scope) of the outer function, even after the outer function finishes! If you would like some more clarification or examples, comment and when I get up I'll explain some more :)
 function delet\u0065(){ // ... } Not in IE, but works in V8 and Spidermonkey
"WHAT IS A MAN, BUT A MISERABLE PILE OF SECRETS?"
I'm just letting everyone know that I updated the code to be a proper jQuery plugin. There is a `radius` setting for the lense radius and it recalculates its coordinates when resizing the window, so it should work on fluid layouts just fine.
It has 8 directions but that is only for games that wanna spend only 10 seconds setting it up. I will add a way to get the angle and the distance but this is more easily integrated into an already existing game.
*"Neko"* is cat *"Ka-to"* is cart
Thanks for the example!
usually when I just need a variable with no purpose I name it "x"
How is this related to JavaScript?
 function outOfIdeas() { //crazy shit to fix something }
Looks pretty nice! It breaks Ctrl+A (selecting everything in the input) though.
Thank you. It works if you let go of A before Ctrl... I'll have to do some thinking about the best way to handle it.
Just fixed it, thanks again.
Except, I don't mean the Japanese word for cat (neko) or cart (niguruma?), but rather, how the English words sounds to a native Japanese speaker: _"Kyatto"_ (キャット) is cat _"Ka-to"_ (カート) is cart Sound similar, no? In both cases, they start with _"k"_, have an _"a"_ sound in the middle, and end on _"t"_. K-A-T → cat The misspelling was "cat" for "cart", i.e. _"Ka-to"_ → "ca-t" → "cat". 
Would love to hear any suggestions/advice on making the project better and developing it further.
Nevermind, found the issue. Javascript is late binding in scope and I need to introduce a new scope for each anonymous function.
Exactly. This "feature" drives me nuts.
&gt; POST is still forgable using DOM form manipulation (...) however it is more work, so it will slow attackers down. Security through laziness?
"Ka-ru-tu" for cart?
Does using "strict" solve this?
try www.jsdb.io instead. does that work? What device/browser are you using?
Except you used the Japanese word for cart and not how the english word sounds. You mixed and matched. It would be more similar to Ka-ru-to wouldn't it?
Yea, that works. Mac OSX Chrome Version: 26.0.1392.0
I set up a redirect from jsdb.io to www.jsdb.io. Hopefully that fixes things. Its probably a case of me having a cname on the root dns entry. Thanks for catching that!
You're 17?! What do you do for a living?
If you don't have a particular reason for javascript I'd point you to Python instead. Lots of libraries for you to take advantage of for this (I'd suggest BeautifulSoup and csv for saving)
readDatFile() It reads .dat files.
No, i just completed the codecademy course on javascript and would like to apply what i learned to a project I would enjoy. I'm open for suggestions
Thanks I wanted to mean JavaScript in the title
Looks pretty nice, could be really handy when I'm trying to remember that library I saw last week that does X... Couple of things I'd personally change: I think the "About" tab should be the default when expanding a library, rather than "Comments" (Which I personally don't see the point of). Unless it's because of the following error? "Ajax Error: Please check your Browser's Javascript Console: " Also, clicking any of the filters on the sidebar changes the whole content pane, including the header, which feels a little jarring. Maybe move the header outside of the list? EDIT: Oh, a cdnjs link where available would be nice too ;)
that's awesome, did you guys just make that?
Yep, works now. :)
I'm going to be reading all my code with accents now. get(datFile); // mmmhmmm backup(datFile); // over here, honey! examine(datFile); // and show-me-whachya-workin'-wit!
JavaScript would be more appropriate for making some neat interactive displays of the data you collect, maybe. It's not really designed to do what you described, though, and I think you'll quickly end up frustrated as you hit roadblock after roadblock. If you are dedicated to seeing this project through and enjoyed codeacademy you could always head back: http://www.codecademy.com/tracks/python There are other languages which would be perfectly acceptable for web scraping, but in my opinion Python is perfect for the job you described. JavaScript wouldn't be on my list, though. Not for this.
Also, here are two very simple projects that do some basic web scraping in Python (both written for /r/somebodymakethis) to give you an idea of what it would look like: https://github.com/pbaehr/wootbot/blob/92fd8d2732a391dfcd3c0f4f688647f7b58eaf30/wootbot.py (this is an early version which was later changed to use the woot API) https://github.com/pbaehr/termgoogler/blob/master/termgoogler.py
Thanks for the reply! So the closure a function that is statically scoped from within it's parent function? int foo(inta, intb){ int bar(inta){ //do stuff } } like in this example, the `inta` that gets passed into `bar()` will still hold the value that it had when it got passed into `foo()`, and later if you call `bar(inta)` after foo has returned? or does foo need to return bar for it to work? Btw, i realize this is horrible examples. thanks for taking the time to help. 
If I'm feeling particularly daring I might use a temporary variable of "banana."
nice explanation
is it no longer open source? That's a deal breaker unfortunately.
Yes, that's what I have been doing - but the document structure seems to be needlessly complicated and much of it, based on a cursory look at the github repo, seems to be generated on the fly using javascript. I'm making slow progress ...
Yep, sure did. Just for you :)
For all the reporting stuff I work on, I regurally have "code names" and "code sections" of my code. Since I work on some pretty advanced analytics reports that have many sections in them. I can't just have barCharts(), areaChart(), lineChart(). I can't even have leftAreaBars(). Or impsBarCharts(). Since over the course of the development of the report, PM will change the way the report works, and those names won't mean anything anymore. So I've come up with code names for every section. My largest report had a concert section (all names were like formBand(), populateAudience(), playMusic() intermission()) That's probably the most politically correct section of code I had.
I'm not working on it at the moment... I'm hoping to get back to it this evening (in 5 hours or so...) or tomorrow. As I mentioned in a previous comment, I started working on it http://jsbin.com/avuded/3/. I sort of reproduced the look - there are still some small "flaws" that I want to fix eventually, but it does not do any interactions ... so that is what I will be working on next. In addition to using jQuery, I will likely use jqueryUI, following http://jsfiddle.net/QkZL8/15/ to enable resizing of visible panels; I was hoping to avoid having to load another javascript library just for handling resizing and toggling of panels, but I suspect I may have no choice unfortunately. The slightly trickier part will be to code the interaction between the "anchor buttons" and the activation/opening of the panels. One thing that really puzzles me is the use, on jsbin, of anchors of the form "base_url?panel_name" . Naively, I am thinking that this is a convenient way of doing this and that the correct link is resolved by doing some string splitting ... but there might be something more profound that I am missing. EDIT: I should have added that I will eventually embed editors, using codemirror, but I have done that before for a few other learning projects, and I don't expect any challenge there.
No, "ka ru tu" would be the katakana of "Kalts". You really need the "to" instead of "tu" ("tsu").
"Extracting data from a webpage" is commonly referred to as "scraping a web page." Searching for articles on how to "scrape" a page in JavaScript will get you a bit further. I'd check out Max Ogden's blog post about [scraping with node](http://maxogden.com/scraping-with-node.html). It has some pretty good advice. Cheers!
For some reason I have never seen the use of "masked" in such a literal sense. But i figgured it out after looking at the demo. I assumed this was similar to the pattern attribute in HTML.
Living off of my parents :p
I'll look into it asap.
I now note it on the demo to. 
Unfortunately not. Oddly enough, the spec demands that the line "use strict" itself be followed be a semicolon. 
I recently came across fuckedUpSafariBugCanStrokeDeezNutz method in DeviantArt's muro
Yes, but with strict directive "The semicolon may appear explicitly or may be inserted by automatic semicolon insertion."
Agreed, but then cat is translated to neko. The words cat and cart share more similarities in english than they do to a "Japanese Programmer". I do feel a bit silly, he made a joke that I thought was a bit derpy and I replied for no particular reason. Sorry about all this.
lol no problem, I just get where he comes from. If a japanese programmer were coding, it's pretty likely that they will spell cart as cat, not because he's thinking about a neko, but rather because he was thinking of kaato, probably remembered cart starts with a c, ended with cat rather than cart. although it'll most likely be failCaato() in that case, but yeah you get the point :)
Not bad and I'll avoid echoing LukaLightBringer and talk about your errors. **But** where are your semi-colons? [You should never rely on automatic semi-colon insertion](http://isotope11.com/blog/a-guide-to-automatic-semicolon-insertion-in-javascript) and it makes your code seem inconsistent by only having semi-colons on some lines.
You are on the right track, but I'm not sure what you mean by statically scoped. Here's an example to read through slowly: function getCounter() { var currentCount = 0; return function increment() { return currentCount++; } } I've touched on a couple of things here, so read carefully. What does `getCounter()` return? Another function! This is totally okay in languages that support first-class functions. Note that, inside `getCounter`, I'm *not* executing the `increment` function, merely returning it to the caller. Let's see how to use this: var addOne = getCounter(); // addOne is now a function addOne(); // execute; returns 0 addOne(); // execute; returns 1 addOne(); // execute; returns 2 ... And so on. What's happening here? Let see what `addOne` contains: console.log(addOne); This prints out: function increment() { return currentCount++; } Cool, so we are 100% sure that `addOne` is a function. Here's where it's a bit magical. If `currentCount` only exists inside `getCounter`, which has already finished execution, how can we access that variable when the scope in which it was defined doesn't even exist any more? The answer: **closure**. `increment` is a closure, and therefore maintains access to the variables of the outer function `getCounter`, even after `getCounter` has finished executing. In this case, the closure is useful because now we've essentially created a *private variable* -- we can't access the `currentCount` variable whatsoever, except via the `increment` function, which will always return `currentCount + 1`. If you a more serious example, I'm happy to provide it. Questions and comments, welcome. Cheers!
What language are they using on khan academy? Sorry if that's a dumb question, but I am just beginning to learn, and it doesn't say. Are these functions common to all languages?
The code is excerpted from a book about functions in JavaScript. Some books choose to say, "do such and such like this." I chose to work up from very simple functions, so I explain how to create objects without prototypes and show what the limitations are before showing how prototypes and constructors provide a solution. There's another section that discusses fully encapsulating data that comes before this one, so what you're seeing is part-way along a transition from objets that use closures to hide data to objects that are open but share methods.
No, it's transliterated as "Ka-to", because the "R" sound before a consonant isn't clearly heard by Japanese speakers. http://translate.google.com/#en/ja/Cart Follow that translation link and click the "Ä" button to see the standard transliteration of English "cart".
I know you didn't mention semicolons but I just figure it's best to use them anyway. No need to encourage bad practices. As for the actual subject matter, it's a great read :)
http://benalman.com/news/2013/01/advice-javascript-semicolon-haters/
Wouldn't minifying javascript without semicolons be impossible unless the minifier automatically stuck semicolons in the right places?
hey, one issue I've been having is animating color change doesn't seem to work, here's an example: [jquery](http://jsfiddle.net/gzXQG/1/) [GSAP](http://jsfiddle.net/fzDny/1/) edit: I made a forum post here http://forums.greensock.com/topic/7159-new-jquerygsap-plugin-color-animation/ edit 2: turns out I was still using an older version of gsap. thanks again for the plugin
Yep.
That's actually the source of a rather infamous "discussion" on twitter bootstraps javascript modules. They don't use semicolons and Douglas Crackford was mentioned, then came in and told them that they're being idiots.
Looks cool. Found a bug at "Development Aids". See [QUnit](http://www.jsdb.io/view/qunit) for instance. Its category links to "Development Aids" -&gt; "Testing" now. Getting an "Application Error" now so I cannot give more feedback... Feel free to copy our categorization over at [jster](http://jster.net/). You should find a couple of libraries to add to yours there as well. :)
Yea i found a few things that seemed odd to me and looked like they would throw errors but i ran out of time and i think the queue object suggestion i made would fix them
Why would people not use semicolons? I get it if your just writing a bit of code to test something and not publish it. But if your gonna release any code and not use semicolons in it, you make the code harder to read, more error prone, and almost impossible to minify.
I'd really like to be able to tag libraries instead of just classifying a library to a number of preset categories. Many libraries fit in more than one category and I don't see a way to do that.
Nifty solution! May I know what's the purpose of the tilde before 'speeds.indexOf'?
Oh, okay, thanks!
https://github.com/piranna/ShareIt
And plumbing, too, cause it's so hard to find a good plumber. 
Even if you put semi-colons in, the ASI mechanism still has to go through and check - is it really that much faster? EDIT: According to JSPerf, there is no difference: http://jsperf.com/semicolonvsnot
http://jsperf.com/asi-versus-msi
It's really not that hard to skip the semi-colons, just use [Michaeljohn Clement's advice](http://inimino.org/~inimino/blog/javascript_semicolons): &gt;insert them immediately before the opening parenthesis or square bracket in any statement that begins with one of those tokens, or any which begins with one of the arithmetic operator tokens /, +, or - if you should happen to write such a statement Smart people already said "fuck this argument" and jumped ship to CoffeeScript so no one would bitch at them about skipping semi-colons. Move on to more interesting debates - if your minifier can't parse JavaScript then it's broken.
Even if you end all your statements with semicolons, you *still* have to memorize the automatic semicolon insertion rules by heart; otherwise, one day, you're bound to write something like return { key: "value" }; and, later that day, spend half an hour debugging the issue. It would have been nice for `"use strict"` to warn developers about missing semicolon, but alas.
Well, newlines that imply ASI could be kept instead of replacing it with a semicolon. The net size is the same. So I don't think it's *required*, although it might be simpler to just perform an ASI step before the minifying. What I find amusing is that many popular minifiers actually misbehave when given valid but "semicolon-less" code as input (or at least they used to--it was a while since I checked).
That biased test case merely shows that omitting a var statement is slower. Correct that, and they're the same: http://jsperf.com/asi-versus-msi/4
placing code after a return statement without a closing bracket and/or semicolon is a recipe for disaster.
Interesting that there's never been a real semicolon flamewar on /r/javascript despute it being such a popular drama. I use them even though I never minify my code, just habit from other languages. 
The argument about readability isn't about how hard it is to scan (though a trailing semicolon can't possibly be *that* hard to scan as compared to no trailing semicolon). It's about how hard it is to figure out what the code is doing. In one case (ASI), you have to remember a bunch of arcane and seemingly arbitrary rules. In the other, you don't. Re: minification -&gt; It might be the tool's fault, but it's your life being made ever-so-slightly less convenient because you insist on "using" an error correction heuristic.
Wow, I'm fairly new to javascript and I didn't realize this was such a big deal. Can anyone expand upon all this semicolon hatred? 
I personally don't think it's easier to read. Whenever I see a statement that doesn't end with a semicolon, I assume it's an error. By relying on ASI, you are expecting the interpreter to fix your errors for you by automatically inserting semicolons in the correct places.
It is rather easy, if you want to be lazy/don't like that your sentences end with a punctuation then don't use a semicolon. If you want to be sure that your program works then do add one.
But, minifiers all output code with semicolons.
Semicolons make the code unambiguous with only a single rule instead of many rules and ambiguous code. I can't think of a single reason for doing a bunch of weird workarounds like occasionally prefixing certain types of code with a semicolon (which looks hideously ugly) just because you don't like using them elsewhere. It's stupid and makes your code more error-prone.
Switching to coffeescript cause you hate semi-colons is anything but smart.
Maybe it's a misunderstanding on my part.
The lack of semicolons is admittedly a fringe benefit compared to some of the other gains.
I think that I've just fallen in love the the `unary` function. *Goes off to read Raganwald's JS book in order to understand how it works.*
Thanks, that cleared it up a lot for me. I really appreciate you taking the time to help a beginner out. Cheers!
The good ones do, but not all of them. Jsmin does not.
Not really "shorthand", *per se*, but I find this much cleaner... switch(fanSpeed) { case "high": case "medium": return blah; break; }
I am a semicolon hater, but this is not a valid argument. You should be running your code through a minifier like YUI before deploying it, if you really are concerned about load times and saving bytes. YUI will take care of the semicolons and alert you if there is a problem in the code. Obsessing about semicolons is a waste of time if you know how ASI works, and I do. It is exremely rare that I ever encounter a case where a missing semicolon caused a problem. It just doesn't happen to me because I do not use cases such as those described in the article. The first example in the article is just plain stupid and only used to illistrate a case where ASI would break. I would never code in that style to begin with.
Even if you're just writing "a bit of code to test something" I would still add semicolons. More often than not it starts as some test code that gets bigger and bigger test code then becomes a project you want to continue. Now you have 100+ lines of JS that you've gotta go through and add semicolons to.
&gt; Whenever I see a statement that doesn't end with a semicolon, I assume it's an error. You must have started programming in a language that required semicolons, and then come to javascript. &gt;By relying on ASI, you are expecting the interpreter to fix your errors for you by automatically inserting semicolons in the correct places. It is not an error to leave out a semicolon. ASI is **a feature** of the javascript language, if it weren't then interpreters wouldn't consistently employ it. ASI is part of the language specification. It saves programmers time because it doesn't complain every time an unnecessary semicolon is missing like other languages do. You can still use semicolons if you can't wrap your head around ASI, and that's fine too. 
Crockford isn't the last word in Javascript, but he probably thinks he is, likely because some people wrongly worship him. Some of us have been coding Javascript just as long as he has, though we may not have written a book about it, so if he starts preaching it gets annoying. He's got his ideas, and other people have other ideas. He doesn't deserve any special protection just because he's Crockford.
Here's some quick annotations to help you on your way. /** * Ensure that the given function is always invoked * with no more than one parameter. **/ function unary (fn) { // Ensure that fn is a function ... I think. fn = functionalize(fn); // Get the arity of the function fn, i.e. how many parameters it expects // https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function#Function_instance-Properties var fnLength = fn.length; if (fn.length == 1) { // fn already only expects 1 parameter // [This is an optimization over the general case.] return fn } else { // Create a wrapper function for fn // which only passes in the first parameter return function (something) { return fn.call(this, something) } } } You could also extend this to the general case like [FireyFly's `limit(fn, n)` function](http://www.reddit.com/r/javascript/comments/17bdbq/the_madness_of_king_javascript/c83ywcy), which puts the onus of setting the number of parameters on the developer, not the function, and removes the optimization.
A semicolon is an extra byte, and the job of a minifier is to cut down the size of the code. Removing unnecessary semicolons is a completely valid thing for a minifier to do. I would actually prefer that a minifier remove unneeded semicolons.
&lt;half joke&gt;The only thing I hate more than semicolon haters is a language that gueses where I was supposed to put my semicolons;
&gt; Edit: Your `if (fn.length == 1) { return fn }` check might be a bit harmful if `fn` relies on `arguments` to take a variable number of arguments. Consider for instance the `Array` builtin, and what `[1,2,3].map(unary(Array))` would do. If you're applying `unary` to a function which is variadic, that sounds like you're trying to use a hammer on a screw.
Use 1TBS style and these problems probaly won't ever happen.
&gt;It is rather easy, if you want to be lazy/don't like that your sentences end with a punctuation then don't use a semicolon &gt;If you want to be sure that your program works then do add one FTFY
AFAIK you usually need a carriage return instead of the semicolon, so where's the savings?
I've been coding Javascript, every single day since it was first released. I actually anticipated it's release after using Lynx for so many years and then Netscape, and then finally I could script the front-end. Nobody gives a crap what I think, and I don't expect them to. And I could care less what Crockford thinks about the semicolon issue. There are plenty of other issues to focus on in Javascript, semicolons are about the least significant.
...and people wonder why Google created Dart. I for one welcome our new overlords.
Hm, it makes perfect sense to me... I mean, that seems like the whole idea--to take a variadic function and make sure that it receives only a single argument. Whether the variadic-ness is of the form "optional arguments" or "trailing repeated sequence of arguments" shouldn't really matter, I think.
Despite your snark about not being able to wrap my head around ASI, I respectfully disagree with your point on the purpose of it. It's an error correction procedure. See: [http://brendaneich.com/2012/04/the-infernal-semicolon/](http://brendaneich.com/2012/04/the-infernal-semicolon/)
Never happens to me because I use `variadic` from [allong.es](http://allong.es) for all forms of variadic functions: // ### "Ellipses" or "Variadic" // // fn = variadic(function (args) { return args }) // // fn() //=&gt; [] // fn(1) //=&gt; [1] // fn(1, 2) //=&gt; [1, 2] // fn(1, 2, 3) //=&gt; [1, 2, 3] // // fn = variadic(function (first, rest) { return [first, rest]}) // // fn() //=&gt; [undefined, []] // fn(1) //=&gt; [1, []] // fn(1, 2) //=&gt; [1, [2]] // fn(1, 2, 3) //=&gt; [1, [2, 3]] // // fn = variadic(function (first, second, rest) { return [first, second, rest]}) // // fn() //=&gt; [undefined, undefined, []] // fn(1) //=&gt; [1, undefined, []] // fn(1, 2) //=&gt; [1, 2, []] // fn(1, 2, 3) //=&gt; [1, 2, [3]] function variadic (fn) { fn = functionalize(fn); var fnLength = fn.length; if (fnLength &lt; 1) { return fn; } else if (fnLength === 1) { return function () { return fn.call(this, __slice.call(arguments, 0)) } } else { return function () { var numberOfArgs = arguments.length, namedArgs = __slice.call(arguments, 0, fnLength - 1), numberOfMissingNamedArgs = Math.max(fnLength - numberOfArgs - 1, 0), argPadding = new Array(numberOfMissingNamedArgs), variadicArgs = __slice.call(arguments, fn.length - 1); return fn.apply(this, namedArgs.concat(argPadding).concat([variadicArgs])) } } };
I don't believe anything that comes out of Eich's mouth post-coffeescript. He drank the kool-aid. As far as I'm concerned, he's lost the plot. 
Hmm. I see what you mean; I wasn't thinking broadly enough. However, the only "harm" I could see is an extra function call on the stack from unary's wrapper function -- but that's a necessary evil. You're only missing out on an optimization for functions which are already unary.
What you might call "Doing the right thing for the wrong reasons." (ducks!)
That were 2 lines, you didn't make a point.
The point is the comma isn't a new statement delimiter, only a period is. There aren't two types of semicolon in javascript, there is only one type of semicolon. Two lines are correct, and counting the comma as three would be incorrect. I'll take my downvote back because you're only 17 and I've been coding javascript since before you were born (and I've been waiting to say that! haha!).
I've written a book. I used to disagree with Crockford on quite a lot of the stuff he said. The more experienced I get, however, the more I start to agree with him on various issues - while I still don't agree with him on `i++`, I agree with pretty much all of his other "bad parts". I completely agree with his thoughts on the ASI mechanism.
I could write a dozen books on Javascript but it wouldn't make my opinions any more correct than yours or Crockford's. I'll still voice my opinion that if your coding style is good then semicolons are an annoyance that nothing will complain about except other programmers who wrongly think they are mandatory. At the end of the day, I've written so much code and the pace of start-up life is so fast that a few missing semicolons shouldn't really surprise or bother anyone. The code changes as fast as the business requirements, so worrying about semicolons is like treading water. Your company's competition certainly doesn't care if you use semicolons or not. I'd rather get a product to market and have it be stunning than worry about if I left out a semicolon here or there all the time.
I know you are, but what am I? :P
I would just referring to this quote: &gt; though we may not have written a book about it Semi-colons, as demonstrated by the article, should be used, and not using them in a library like Bootstrap will just encourage new coders to leave them out. They won't understand ASI, and I have never seen a book which covers it in the first chapter. We, as experienced coders, should not be encouraging new coders to develop bad habits which will lead them into issues in the future.
This seems like a side effect but its hardly an example of JS being broken. Map provides 3 arguments. ParseInt takes 3 arguments. ...so?
None of these jsperf pages are relevant -- they all seem to assume the code is interpreted each pass of the loop, but it's only compiled once. If you want jsperf to test this you'll need to use eval()
New coders will (and need to) learn about ASI the first time they make a mistake involving bad coding practices such as those outlined in the article. var a = obj [a].forEach(logProp) // 'fail' this is just bad form, and I would never ever code something in this way. var a = [obj] a.forEach(logProp) // 'win' This works, and it's the way I would have coded it. I'd never start off a new line with a bracket or anything else that could break ASI. 
I don't think JS is broken, but I do feel that the design of map passing three arguments is overloaded. The title is meant to be a joke.
Yeah, that's the thing that jumped out at me. After having been bitten strange parseInt errors that took quite a while to track down I now make sure to provide a radix, and see any instances without it as a possible bug.
Oh look. This again. I could have sworn that all the programming hipsters made the migration over to coffeescript already. For real, people. Leaving off the semicolon for no other reason than "because I can and because it irritates you" is asinine. By adding the useless layer of ASI rules to your code, you're putting cleverness and your opinion on aesthetics over productivity. In short, use coffeescript or use semi colons and get real work done.
Can you clue me in on how why Crockford dislikes `i++`? I remember seeing references to it in the Good Bits and JSlint, but I never learned why.
Lordie, it's like trying to read the old-timey Bibles that omitted all the punctuation and vowels. I didn't get into professional programming to become a monk, just a wizard.
Rephrase that as "Doing it differently for the wrong reasons" and you won't have to [avoid shoes](http://i.imgur.com/8rgJjQl.gif).
I haven't had many problems with "real" code re: function arity in JS in fact I generally take advantage of it's flexibility; but it did start to get me wistful for something more statically typed when I was writing an interpreter for a stack-based language for fun. I wanted to allow interop with JS functions from the environment, the issue is figuring out how much stack to allow them to consume. In addition to arity being flexible it's sometimes reported oddly. For example if you check console.log.length you get 0. To me this seems wrong as I can't imagine why you would call console.log without at least 1 argument...but I can see various arguments to be made to the contrary.
That's why I never rely on ASI :)
great to hear, thanks for the support!
Aha! good catch... Thank you! Also, great work on jster; I actually found the service yesterday, after I launched JSDB. Definitely will take some pointers from your approach :)
This is definitely in the works/road map. I was really focusing on a mvp to get this thing out the door and get peoples' reactions. Im considering ways to better inter-link synonymous libraries (jquery &lt;-&gt; mootools &lt;-&gt; zepto etc). I want to hopefully launch this functionality soon!
A-hah. It feels to me like a lot of JSlint is trying to protect C programmers from JavaScript's gotchas.
What colour should we paint the semicolons? (Update: I added lots of superfluous semicolons. If I've missed any, please submit a pull request.)
Thanks! The extra comments make it much easier to follow. :-)
FWIW I've used `console.log()` occasionally to just produce a line break as output.
You missed one in the `applyLast` example, for the `require('allong.es')` line. Oh, and I just noticed: there's a "`porseInt`" that should be `parseInt`, and "`.parseInt` works just fine with one parameter" shouldn't have a dot. 
I don't really care too much about it though, I tried to be as non offensive as possible. That is why I just typed as I did. The debate about semicolons is stupid. Neither side has a very good convincing argument, so it should have just stayed like it was until there actually is a reason to switch.
Whut?
That example is simplified. You obviously wouldn't use a forEach loop for an array that's never longer than 1. So, a more realistic example might look like this: var a = obj; [a, 'propName2', 'propName3'].forEach(function () {}); In which case you would need to write this to avoid semicolons: var a = obj, props = [a, 'propName2', 'propName3'] props.forEach(function () {}) So basically, by saying "I'd never start off a new line with a bracket" you're saying you would create superfluous variables just to avoid writing a single character.
Retina doesn't increase resolution. Just pixel ratio, which you can check for. 
What are the problems with it in C?
When they switch to a language which doesn't have this issue.
What exactly do you think resolution is? iPhone 3GS: 320x480-pixel resolution at 163 ppi iPhone 4: 640×960 resolution at 326 ppi
Excellent analogy. Just as in JavaScript, the result of replacing periods with newlines is text that is grammatically incorrect, looks like a kid wrote it, and is readily misinterpreted. As a matter of fact, reddit itself will misinterpret that text. Try posting it outside a quote. Oh, and it prevents you from distinguishing paragraphs.
It's not an issue.
ASI adds a bunch of rules. This adds complexity without giving you anything in return. Plus, people have pointless discussions about it. Apparently, this is an issue. In languages where semicolons aren't "optional" (yes, I'm doing air quotes) people aren't having this kind of discussion.
There's [a very short interactive presentation](http://raimohanska.github.com/bacon.js-slides/) linked from the main GitHub page which does a spectacular job of showcasing what this lib is attempting to solve. It takes just a few minutes to skim through. I'm wowed by how tersely FRP techniques can make tracking multiple events.
&gt; You missed one in the applyLast example, for the require('allong.es') line. Which, ironically, is one of the only places that the lack of a semicolon actually created a bug.
Sounds like you want some sort of backend to handle the file rw. Make an ajax request to the server when the graph is "saved".
... well that was easy. Thanks. (not sure what painting refers to though ...)
You want to look into the [FileAPI](http://www.w3.org/TR/FileAPI/) https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications It works in any modern browser (which means it doesn't work in IE, of course).
Sorry. Resolution as in , things getting smaller as res goes higher. Not the case on retina displays , as I'm sure your aware. Text always seems fine , retina or not. I guess I could have say this thread out, apologies. 
I am **not** a javascript expert ... However, I believe that you are extremely misguided in your quest for "shorthand" technique, many of which will turn out to be clever things that definitely do not enhance readability. Let's just go back to your original code. You use two = signs to check for equality; the recommended way of doing this is to use a triple = sign. You also write "or" which is not part of javascript but is very reminiscent of Python. So, your first example should be written instead as if (fanSpeed === "high" || fanSpeed === "medium") { return blah; } This **might** perhaps be made more readable if it is written like the following if ( fanSpeed === "high" || fanSpeed === "medium" ) { return blah; } which mimics the switch statement example given by *letsgetrandy*, at the cost of a non-standard indentation. In either case (the example just above or the switch statement) it is fairly easy to add one more condition while keeping the lines short and readable. Clever shorthand tricks can be neat, but you will likely find that they are not really quicker when it comes to change your code (and you will likely change it and improve it) and the extra time it will take you to "grok" your code when you go over it a few days/weeks/months later will likely far exceed the time saved by using some clever trick to save a few keystrokes.
That's because Apple essentially scales everything back up to make it looks the same. Which is precisely what this script does. Compared two iPhones with those resolutions to two Android phones and you'll see that they do not behave the same way regarding browser content scaling, unless you want to set target density dpi to low on Android. But windows phone has the same issue and doesn't support that setting, etc. Hence the whole point of this script :) Everyone supports viewport scale, so it uses that to level the playing field, so to speak.
Depends on the user. I prefer JS without semi-colons, and have no issue reading JS with or without. I fail to see why it's a big issue when it comes to reading.
Its a good habit, your code is likely to be far less error prone.
Obviously braces don't need them, but there's one right there before "alert". The minifier also could also output this as: function a(c){return c+1}var b=2 alert(a(b)) It would have the same byte count (assuming Unix CR) and actually be partially legible.
Backbone is the way to go on the client side... Some prefer angular, but Backbone is the shiz, hands down.
Also, it's not just for SPAs...
This isn't the best use-case for javascript. That's not to say it can't be done, but I think you're reaching for a rather advanced task -- perhaps one a little too advanced for a newbie, and possibly too advanced for javascript. What are your requirements? Is this meant to be viewed and edited by many people (ie, online)? Or is this something that will be done by one person?
What does the code do, and why?
In terms of the API; chrome's docs for example describe console.log as: &gt; The console.log() method takes one or more expressions as parameters and writes their current values to the console. So I don't think it's unreasonable to think of it as something like: console.log( exp, [...rest expr] ); I agree with your reasoning as well, it's just there are other functions that are variadic that will report a length of say, 1, because they have named parameters. One could argue that's incorrect on the part of whoever wrote that function, and I might agree, but I think it demonstrates what the OP article is getting at. It's all a bit clunky in JS because you don't have solid tools for dealing with these sorts of issue. You have to sort of suss it out yourself by checking arguments and what not; the language doesn't provide you with great tools for that (though generally you can write your own as in OP). For example, you can't even set the length property of a function if you feel it should be something else. Like I said, generally I take advantage of the flexibility and have no issues with it; but every now and then I do miss some other language features.
It handles the creation/fetch/cleanup of your models/views/collections. It's pretty easy in Backbone to keep calling new View/Model/Collection without recycling the previous one(s), essentially causing a memory leak and multiple unlinked instances of your objects. This ensures that you only create one instance of your objects, recycles your objects when you navigate around, and returns previously instances objects (you can specify to reset them instead). It also adds a bit of structure to your model/view/collection organization. It's still in a bit of a rough state and I haven't written any documentation
It was perfectly tongue-in-cheek, and a reasonable point--that's why I added more semi-colons. I just wanted to reply with a touch if humour as well. After all, this isn't exactly life-and-death miscalculating radiation does stuff here. No need to take personally!
Wait a second, are there languages where you can change a function's arity after the fact? I'm not even sure what behavior I would expect out of that.
It's not changing the arity of the function, it's changing the **what gets reported as the arity** (probably not even that technically). The whole point here is that arity is a pretty loosey-goosey concept in JS. It's existence in the language itself is pretty weak; it's mostly something that exists as part of your API/logic. Given that, I don't think it's unreasonable to be able to say "You've decided this function has a length of 3, but it should be 0". &gt; I'm not even sure what behavior I would expect out of that. Nothing, that's the point. Your functions would behave the same, it's just you'd be able to write code to take advantage of the more "accurate" length property. I'd rather not rely on .length **at all**; I was just making a point that it's one of the few tools you have and even that is somewhat inflexible. I don't consider any of this a deficiency in JS; I'm contrasting it with other possibilities.
I wonder how feasible it is monkeycode in a `Function.prototype.length` read-write property... that seems a bit too lispy for JavaScript, though.
I can think of a few ways maybe: one way would be with callable Proxies. I haven't kept up with the spec so I'm not sure if those are coming or not. Or you could just have your own .takes (or whatever) that you use to keep track of how many arguments a function takes (falling back on .length). In most cases I'd probably just embrace the dynamic nature of JS. You can always come up with solutions using function composition and whatnot. Languages that have a strong sense of arity do have some nice features though. It's nice to be able to do partial application implicitly for example. They have drawbacks of their own though.
For single line if's like that you can remove the { } which makes it a bit cleaner IMO...others might not like it though: if (fanSpeed == "high" || fanSpeed == "medium") return blah; Sometimes you can shorten a bit using short-circuiting: (fanSpeed == "high" || fanSpeed == "low") &amp;amp;&amp;amp; return blah; I **don't** recommend that though; it's too hacky. In general instead of trying to get cute with syntax tricks you should think about your design. For example, most fans have 3 speeds...so maybe something like: if ( fanSpeed !== "low" ) return blah; Instead of checking if it is "high" or "medium". Another option would be to use numbers instead of strings, then you could do something like: if ( fanSpeed &amp;gt; LOW ) return blah; Also, factor out your logic if it gets too complicated. You could do something like: function isFast( speed ) { return (speed == "high") || (speed == "med"); } Then you can do: if ( isFast(fanSpeed) ) return blah; In this case, I don't think that's necessary...but sometimes the logic gets a bit out of hand and factoring it out helps. 
I don't know, but the only time I REALLY have to watch for that is when endianness matters. I think that rule needs a touch more context than a straight detect. Even if he is self-enforcing the rule, JSLint has a long history with OBOEs in the line count. They seem to crop up with annoying frequency, which means he still doesn't have iteration down pat. Otherwise i++ is perfectly fine in a for statement's iterator section or as an individual operation. I see no reason to flag those.
Half a tick, what's an OBOE? My [usual approach](http://www.google.com/) didn't get [very far](http://xkcd.com/55/).
You've just suffered from it, in a way. Add 'programming' to your search. ;)
im seriously confused about what this is... explainer somewhere?
All good points, but one improvement to your suggestions. Instead of: if (x === y) return true; return false; Just use: return x === y;
Ahm. I think you're just slightly confused by this. You aren't supposed to do anything with the minified code. It's a one-way route. You always keep the original source code (in git, SVN, etc). That minified unreadable crap is automatically produced by some built/deploy script. If necessary, minified code can be debugged via source maps. Simply debugging the non-minified code locally is usually good enough though. Minifiers rarely introduce errors.
Can you give a use case? maybe change h2 to and h3 but keep any other properties like data attributes or classes?
Minified/Uglified javascript is lossy compression; compressors take strings in your code like variable references and function names and shortens those to the shortest variables available. Simplistic example: function myVerboseFunctionName(myVerboseParameter){} becomes function a(b){} The only way to reverse it and have the same legibility would be if you saved a reference to all of the changes. **IF you really want this** and only want some of the advantages of minification, you can change the formatter of your IDE; used spaces instead of tabs and then delete all of the spaces; then hope that you can set up the formatter to auto indent functions, etc.
I didn't write this stuff, but yes, I think that it the point they are trying to make.
Not sure why you would even want to do that much.
Theoretically yes, that is the intent. I haven't tested as to whether this works, but the methods seem sound in my head. First argument accepts an actual html element. Second argument is a string of the new element name you would like. The function creates a new element with the string and copies over the attributes and child nodes and returns it. Some use cases I have in mind are changing font to span, applet to object, etc. H2 to H3 is doable. Checking the validity of the HTML and the application of css after the operation is still on the user. Might explode in IE and it's funky attribute handling (as in list every goddamn one of its attributes) now that I think about it, but fuck IE.
It is a bit of a niche case.
Do you have a specific place where you want to use it yourself?
What I do is use a web debugging proxy to intercept the request to my JS file and replace it with the unminified version on my hard drive, unbeknownst to my browser. That way I can also edit&gt;reload as much as I want, on the production website. Turns day-long debugging tasks into five minute jobs.
Ha yea it's after midnight here.
&gt;I wouldn't classify minification as lossy Well, you'd be wrong. Minification is a lossy transformation. Comments are discarded and, wherever possible, identifiers get changed to something shorter, too.
If all you want from a minifier is white-space removal I'm not convinced it's worth the trouble. Gzip (which I hope and assume you are using) already does a pretty good job at that.
If you don't uglify/compress, and only strip out whitespace+concatenate, chrome's dev tools can pretty effectively re-beautify things and make them readable again. This doesn't give you a nice output file like some tools might, but it's a useful trick to keep up your sleeve.
Fair enough. Using eval: http://jsperf.com/semicolonvsnot/2 They're the same. Dunno what it would be like in other browsers, though.
lossless compression of images refers to discarding useless data, which is like discarding code comments, and also storing image data efficiently to be displayed at a certain quality, which is like rewriting local variables in functions but keeping the functions effects and purpose exactly the same. For minification to be classified as lossy, the result of running the minified code would be different.
Not exactly, because for source maps, you still need the original sources. Source maps are not for reversing minification, they are meant to debug minified code. However, most minifiers/compressors have some options to only remove comments/whitespaces/line breaks.
http://darcyclarke.me/development/front-end-job-interview-questions/
Uglyfier makes code ugly, which can save quite a bit of byts. For example, the following pairs of code are equivalent: //This if(a == 5){ doSomething(); } //is the same as a == 5 &amp;&amp; doSomething(); Combine this, and other such tricks, with minifying the names of variables and functions, and you can reduce the file size quite a bit.
That link gets posted here a lot, but I think a lot of those questions are just pretentious. I've been doing webdev for nearly two decades and I don't throw around phrases like "What is the arity of a function?" on a daily basis. If they ask you that in an interview, best to head for the door - you don't wanna work there anyway.
Some of these are a bit vague but will give you an idea: * Explain how to prototypal inheritance works. * Explain function hoisting * Explain how ‘this’ works in JavaScript? * Explain event delegation (what's the difference between on and bind is in jQuery) * How do you go about testing your JavaScript? * AMD v CommonJS * What are promises? * What is an immediately invoked function expression or self executing function and why are they used? Edit - someone asked for answers... these are off the top of my head so its probably best to google and fully understand the related area than relying on my answer as it may be wrong or incomplete: * Every object in JavaScript has a prototype that is shared between all objects of the same type. Properties can be added to the prototype or an individual object. Although not a great comparison you could say in this respect the prototype acts like a class in more "classical" object oriented programming. * Function definitions (and vars for that matter) are processed before the rest of the script which means if you define a function with a name the ordering doesn't matter. That's a particularly bad description. * Unlike other object oriented languages "this" does not necessarily relate to the surrounding object, it is the current context of the executing code. Call and apply can be used to change the meaning of "this". * Events in javascript "bubble up" which means that when you click on an element the click is also passed to the parent and the parents parent until a handler processes the click and stops the delegation. The difference between bind and on is that bind attaches many functions to all matching elements where on will attach on function to a parent wait for clicks from the right sub element. This is more efficient than binding to many elements * Qunit or Mocha are my preferred means of testing. I use spy etc to mock out things. * These are module loading strategies. CommonJS is used in node, the script returns its public properties by adding to the modules.export variable. RequireJS uses a function call (define) to give your code a namespace. This is a pretty terrible answer. * I'll come back to promises, I've got to go and they require some proper explanation. * IIFE's are a way of namespacing variables. By default all javascript variables are global and are added to window, if you define them inside a function it stops polution of the global namespace.
No offense... but with ECMA5, there is a lot more functional stuff in the spec, which means things like arity are valuable concepts to understand. In my humble opinion, anyway!
That's actually pretty good advice for English. Your job as a communicator is to remove obstacles to understanding. If you're sharing a codebase with other people, your job is to communicate with them, and you are now requiring that they understand bit level representations of numbers for a special case comparison against an integer. It's nice that you understand it, but it's a bad assumption that the people reading your code would, and it's inconsiderate to make them consult a reference if they don't, when bit level operations aren't necessary. Furthermore, if at some point down the line, they decide to change how numbers are encoded, without planning for this kind of regression (and why should they?), this will break, because you didn't code what you actually meant.
Object.transmogrify (did some kind of wacky transformation) And Object.pinch (delete a key, but return the value)
Have a look at Phantom / Casper JS
While some are very specific, if you understood the people who came up with the question, it's a pretty good place to mine some questions to ask a candidate.
You shouldn't have to "mine" any questions - you know what you're hiring for, so ask job-relevant questions.
I'm not arguing *that*, I'm simply pointing out that these questions are the sort of thing you'd ask to sound smart but have very little to do with most day-to-day jobs - short of working for Google, that is.
I also like this as a resource to make sure your knowledge is covered (not strictly interview questions). https://github.com/rmurphey/js-assessment
Could you please add a sample answer to the points you have mentioned? I'd really appreciate it (I don't have an interview btw)
Closures. We do an "algorithm" section / live coding as well. Differences / benefits disadvantages between CoffeeScript / JS. Performance (ie- minification, combo loading). --Robert
True, but when I first started interviewing people, this was a nice resource to see the nature of questions front end developers I respect are asking.
I'd throw in a question to see whether the OP understands how variable name scoping work in JavaScript.
There can't be any reasonable uses for this...
Why are you comparing apples and oranges? Hydra could be used in one application that uses Backbone and RequireJS. You can write your own Backbone or Knockout using Hydra. Backbone needs jQuery/Zepto and Underscore.
In actual interviews, you get a lot of simpler questions like: * Name some javascript libraries. * what is minifying and why do we do it? * Do you think agile works well with front-end/javascript development? (and explain) Just a couple I thought I'd add to go along with the technical ones already posted... A lot of shops may want to get a feel for your approach to the code instead of worrying if you 100% understand closures. They want to be able to work with you; they can correct your code at code reviews.. 
I just ran another test and got the one without semicolons as slightly faster. A 0.8% difference is most likely just stuff happening in the background which slows operations down by a couple nanoseconds.
Actual questions from a JavaScript oriented position I interviewed for last week: --- 1.) Given an input object interface of a reducible, e.g. var reducible = { reduce: function(callback, initial){ /***/ } } Implement `map(reducible, callback)` and `filter(reducible, callback)` without knowing anything else about the input. --- 2.) Assuming use of [esprima](http://esprima.org) to parse JS source into AST, write an algorithm to find declared but never used variables by analyzing the AST. --- 3.) Assuming you have an input [Node.js Stream](http://nodejs.org/api/stream.html), implement the function `getRandomByte(stream, callback)` that chooses a single random byte from the whole input stream (potentially multiple buffers of varying sizes), and does it without keeping the buffers tied up in memory while the stream is still streaming.
&gt; I've been doing webdev for nearly two decades Tim?
I interview a lot of people for consideration on my UI team. Admittedly, I think differently from most people, but I feel like my way works. Javascript is a skill that *most* developers have, to some degree, but which few developers really ever learn to do well. With that in mind, I rarely ask technical, quiz-type questions, or "gotcha" questions. Rather, I want to know that a person has a solid understanding of where JS fits in the world, and a good mind for team-style development. Technical skills can be molded and improved, so I worry less about them. I try to ask questions like: * explain your strategy for function naming * at what point is it better to create a class than to use a bare function * how comfortable are you with code review? * what are some things you can do to improve page loading speed? * what are some examples of how differences in browsers have affected the javascript you've written? * what libraries and/or frameworks have you worked with? which do you like best? * what web sites do you visit most when you're working on something new in javascript? where do you go for answers? I find that this line of questioning gives me a much better insight into a person's ability to fit in my team. Technical understanding of a "closure" or "function hoisting" might make you smart, but it doesn't make you a good developer.
it depends on which minifier you are using. some will use a carriage return, others will keep everything on a single line using semicolons. Minified code is not meant to be legible, not at all in fact.
You should learn them, most of this is essential to efficient JavaScript. It also cures a lot of "wtfmate?!" moments.
and in ECMA6, we'll finally get tail-call recursion.
Hey, I started writing [the wiki](https://github.com/bebraw/js-dev-survival-guide/wiki) as promised. It's still very preliminary. I have a rough outline I'll follow. I'll take your feedback in count of course. I will keep on adding content there as time allows. :)
Yeah, naming is a Big Deal™ for me. I find well-named functions and variables make code instantly readable and far more maintainable, without the need for the cumbersome clutter of comments. I expect a good developer to spend more time thinking of a good name for a function than he spends actually writing the function. Make sure that *the next guy* who touches this file easily understands exactly what *you* were doing. *edited for grammar*
If you really want to measure this with some consistency, it's probably worthwhile to come up with a test that spends more time parsing. It might also be worthwhile to try to make the parser work harder, along the lines of this article: http://isotope11.com/blog/a-guide-to-automatic-semicolon-insertion-in-javascript
Maybe I'm blind, but I haven't seen anyone here say this: NEVER DO ANY AUTHENTICATION ON THE CLIENT That's because, if it's not obvious, the javascript code on the client can be read by hackers. That's why JohnStow's answer talks about having a server authenticate the user.
That's one of the reasons I wanted to reference a hidden external file for the passwords. It would only be used for an invite only customer survey hosted on a forum anyway.
Chrome only means I don't look. 
 &gt;Even if you put semi-colons in, the ASI mechanism still has to go through and check Actually, no. ASI is only invoked when an illegal token is encountered. If the code has semicolons (and is otherwise syntactically correct) then the parser never has to invoke the ASI handler.
The `removeChild` is unnecessary; inserting a node automatically removes it from its old parent. I don't see why the clone is useful.
People still use this?
wow, pretty sweet! are you using a CubeGeometry for each voxel or doing some sort of chunking?
For a list of questions created by some very experienced JavaScript developers, that has a surprising number of fundamental mistakes in it. &gt; * When would you use document.write()? &gt; * Correct answer: 1999 – time to weed out the junior devs That's not just snarky, but wrong. True, in many cases there are better alternatives, but there certainly are valid use cases for `document.write()`. &gt; Make this work: &gt; `[1,2,3,4,5].duplicator(); // [1,2,3,4,5,1,2,3,4,5]` `.duplicator()` is a very un-idiomatic name for this function. JavaScript methods are generally not named with nouns, they are named with verbs or verb-like phrases. Arrays don't have `.pusher()`, `.popper()`, and `.reverser()` methods, they have `.push()`, `.pop()`, and `.replace()`. There are exceptions like `.indexOf()`, but this `.duplicator()` method should be named `.duplicate()` or something like that. &gt; * Why is it called a Ternary statement, what does the word “Ternary” indicate? There is no ternary statement in JavaScript. There is a ternary *expression*. &gt; `~~3.14` &gt; Question: What value is returned from the above statement? That is an expression, not a statement. Statements do not return values; expressions do. (The next question has the same error.) &gt; `( window.foo || ( window.foo = "bar" ) );` &gt; Question: What is the value of window.foo? &gt; Answer: “bar” The correct answer is "I don't know, and you don't either." The value of `window.foo` cannot be determined by reading this code alone. What if I had previously executed this: `window.foo = 'oops';` Now if I run the sample code in the question, the value of `window.foo` will still be 'oops'. 
I'm using a buffer geometry (which was recently updated to automatically handle indices, kinda nice!).
Nope, it is available in Firefox as well: [MDN article](https://developer.mozilla.org/en-US/docs/API/Pointer_Lock_API)
Yeah, I think this just encourages bad practice. Using a template engine like [mustache.js](https://github.com/janl/mustache.js) or underscore's [template function](http://underscorejs.org/#template) would be a much better way to go.
Incidentally, it's a library -- not a framework. but yeah. it's nice and all, but reinventing the wheel.
Which ones use carriage returns? I need to know, because my IDE sometimes automatically opens minified versions in text editors while doing global searches, and grinds to a halt trying to deal with 100,000 columns in a single row of text.
Actually, it's supported in IE10+.
This is a perfectly fine use case for JS. JS has a number of host environments that provide native file IO. Maybe it's not the best fit for JS running in a browser, but that is hardly the only place JS is found!
pretty sure YUI doesn't use carriage returns.
Perhaps you didn't read the entire post then. The OP wants to not only read a file, but then use the info to build an editable graph. Yes, I am aware of node.js, and phantom.js, and several years ago I even compiled V8 locally so I could have javascript-based shell scripting capabilities. Trust me, *I know* that there are a number of host environments for JS. But as a programmer who cares about the project more than the language in which it is written, I stand by my original statement: This is not the best use-case for javascript. There are many other options that would make this much easier to do.
Right, it does not. That's the one I'm using now that's creating single-line 250KB files. :-(
caniuse says it's only partially supported. Didn't look too hard but couldn't find anything that says IE10 fully supports it. Microsoft's own docs can't be trusted to tell the whole truth.
I hardly think this is a hard problem for javascript to solve. Unless I am misunderstanding you, you are either claiming that file IO is harder in JS than in other languages, or that building an editable graph is harder than in other languages. Personally, I see nothing inherent in JS that makes it bad for either of those purposes. Perhaps typical JS host environments are not amenable, but if that's the case you should say that. In any case, I'm having a hard time thinking of a platform easier to implement this in than, say, a Windows 8 app. File IO... trivial. Editable graph... easy, there are libraries for the web platform already in existence to help with this. So, I'm curious, what "advanced" features would JS need to add in order for you to consider it appropriate for solving this problem?
It looks like you modify the Backbone.View prototype. I'd encourage you to declare your own classes. I'm doing some similar code with View._configure for a View tree declaration helper, but my new classes call it when they override _configure, not by modifying a parent class. I'd worry about our code colliding based on which script was included first, is all. A side note, [this quick/dirty console.log](http://koglerjs.com/example/memleak/) is my best understanding of Backbone memory leaks, I'd love to hear what you have to say about it, or perhaps how your library would help out. 
#1 is confusing to me... May I ask what you had answered? I understand map, and filter... I don't understand what is being asked for. =/
I don't know why it says partial, IE10 supports Blobs and Files, Blob URLs, and the file reader API. Not sure what else there is, are you? I'm not intimately familiar with the spec so maybe there are some corner cases missing, or maybe it has something to do with the fact that everything is vendor prefixed? In any case, the examples from MDN should all work fine in IE. I'm curious what MSDN documentation you are aware of are incorrect or misleading? These can definitely be fixed. We work really hard to make that documentation as useful and accurate as can be (though there are sometimes errors).
it creates globals when you call hoe.init() without any parameters. You can create these functions in a namespace, define wich functions will be created or even dont create them at all. Did you check the API docs? [hoe.init](http://hoejs.schettino72.net/api/symbols/hoe.html#.init) It also has a tuutorial and a complete test suite, what kind of documentation are you looking for?
I sincerely hope that's an exaggeration ;)
Tests YOU and Microsoft write?!!! Talk about bald-faced lies and half-truths. Leave anything out of those tests, did ya? Isn't it great that IE passes all the tests that Microsoft wrote for IE?! (Yeah, I'm no random teenager here. I know about that.) How about writing tests for things in the standard that only IE would fail because it doesn't support it? You guys haven't the guts to publish those. You guys don't have the guts to publish anyone else's comprehensive tests. And I'd LOVE to see what Brendan Eich has to say about Microsoft's WONDERFUL support for ECMAScript! (I already know that truth, too.) And then you guys have the balls to diss caniuse and HTML5test.com and all the other web sites that show what we all know from experience and without your lies: IE10 is STILL the worst browser on the planet. Inept and incompetent. Known. Provable. Verifiable.
Closure: A stuffed animal is trapped within a lego house that no one can see into. The animal knows what's in the house, can move the lego furniture and lego lamps. The outside world isn't affected by the changes to the lego furniture.
I cross posted this to /r/fizzbuzz where you can make various technical interview related posts.
There's a joke about Hungarian notation in there somewhere...
Definitely this. In both interviews I did relating to JavaScript, closures were on there.
I've definately been asked prototype related questions on interviews before i find that its rare that people actually use them in code.
Completely agree. These might qualify if you are looking for a Node.js backend engineer.. None of these test any kind of DOM manipulation syntax or knowledge.
The only modification I do is adding a "remove" event trigger to the views, but I was thinking about doing the extend method. As long as you load underscore -&gt; backbone -&gt; main.js -&gt; everything else, you're fine. It should prevent the memory leak, as long as you load your views/models/collections through it because it prevents duplicate/orphaned views from being created. Basically whenever you use the get method, it looks in the instances object for one that matches, if it does, it returns it, otherwise it creates a new one and adds it to the instance object. You will always only have 1 instance in memory, it also listens for the destroy (and added view remove event) in order to clear any invalid instances if the related model/collection/view gets recycled.
Okay, slow down. First, let's look at what was said: He wants to develop an application. Yes, "application" can have several meanings, so we won't make assumptions. All we know is that he wants to read a file, edit a graph, and save the data. The OP has still not addressed my initial questions -- does this need to be edited by several people, or will it just be for one person? So let's consider the possible permutations of this question. (Again, without making assumptions.) * If this is meant for use by a single person, the term app is probably best interpreted as a program running on one machine. Without knowing what type of machine, we only know that there needs to be a UI (that is, this can't be a command line program, because we need to edit a graph). A web app here is overkill. * It could be a multi-user app in which the users are all be editing the same data. In that case, it's more likely meant to be a web app, with a file on a server. But do they save the file back to the server? Or do they save the file back to the client? (This answer matters in terms of how we access the filesystem.) * It could be a multi-user app in which the users are only able to view, edit, and save their own graph. In this case, again, the manner of file I/O is much more specific. If the second or third scenarios happen to be the case, then yes... a javascript-based web app (based on node or something similar) might be just fine. However, if the first scenario turns out to be the desire, then you must certainly concede that the work of setting up and maintaining a web server on the localhost machine for the purpose of editing a graph is, at the very least *overkill*, if not what you, personally, deem to be "advanced". If the OP happens to be a Windows user, he might find it much easier to whip out a quick VB app. Or, as you suggested, a Windows 8 app might even be easier. On Mac or Linux, this might be easier to do with a bit of python and some hooks into a GUI library. In any case, I can't help feeling like you're invoking a bit of a religious war here, dogmatically defending Javascript as a one-size-fits-all solution, rather than considering that sometimes there are better tools for certain tasks... and all of this is happening before anyone even knows the details of this person's particular situation and the requirements for this project.
A windows 8 app is basically like a .html with script in it, perfect for the single-user scenario... But that's not really what I'm interested in. You said this project was possibly too advanced for Javascript, so I'm wondering what features you would like to see added (or changed?) in JavaScript that would make building this sort of application easier. But I get the sense you're actually talking about JS hosting environments not being up to the task. If that's the case, I'm happy to agree to disagree there :)
A closure is like having an invisible friend. He goes everywhere you go, but nobody else can see him, or talk to him. He can give you information, but he can't help anyone else. Prototype inheritance is like having a magical cookie recipe that has the power to change all cookies, even after they're baked. If you add more sugar to the recipe, *every* cookie in existence gets more sugar.
Solutions for file access are fairly easy in just about any programming language -- provided that you're not limited by a sandbox, such as in a web app. But when it comes to editing graph data (that is, numbers) I feel that Javascript's math is inherently flawed. From its pseudo floating point numbers to its incongruent parseInt() behavior, everything about math in Javascript is infuriating.
Interesting, what do you mean by pseudo floating point? JS uses IEEE 754 which seems pretty good for the 99.9% use case (maybe not good if you're doing something you might instead use scipi for or whatever). Is the incongruous parseInt behavior you mean the behavior where a string prefixed with a 0 would be treated as octal? That was fixed in ES5, and at least the IE &gt; 8 implements the fixed behavior (eg. parseInt("09") === 9). One thing the committee has approved that might improve math in JavaScript is a number of new built-ins (see latest [spec draft](http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts)) such as hyperbolic trig functions and inverses, log2, log10, etc. Is there anything else you would recommend fixing? There's probably not time to get anything more into ES6, but ES7 is just around the corner ;)
I always ask people to explain closures. Even if they don't know where to start, it opens a good discussion. You can see how much they really know pretty quickly. 
What about the context of the question implied that it led to right and wrong answers? 
Hello world?
thisll make a lotta money
TIL about function.length
Recall that jQuery's $(document).ready(function() {...}); is (roughly) equivalent to the raw JS: document.addEventListener('DOMContentLoaded', function() {...}); It just means that the function() you'd like to run will be executed following the 'DOMContentLoaded' event, which occurs, well, when the DOM loads, usually just few milliseconds after the client has loaded the page. Without first waiting for that event to be fired, you can't be guaranteed that the DOM has loaded and calls like $('#main-div') might fail because you're trying to find an element that hasn't yet been added to the DOM. You're certainly welcome to execute JS before the DOMContentLoaded event, but don't do anything that requires the existence of elements to be loaded on the page. In your example, getting the date the writing to the document doesn't require the existence of anything on the DOM, so it's fine, but once you start manipulating elements in your document, you're going to have to wait for that DOMContentLoaded event.
Hey man, you are doing somethings wrong here: Like, you are encapsulating the new Date(); object in a function printToday(), but not calling it! $(document).ready(function(){ }); is jquery code stating that document is loaded and ready, you can write window.onload = event; with js, Write this: $(document).ready(function() { printToday(); function printToday() { var today = new Date(); document.write(today.toDateString()); } }); OR $(document).ready(function() { var today = new Date(); document.write(today.toDateString()); }); It will work, and just for good practices, include all scripts to the bottom of the page like this, &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt; &lt;script src="program.js" type="text/javascript"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
Thanks, but what I don't understand is -- why does my code work without the document ready? Shouldn't it also work if I include document ready? Even something like alert("Hello"); doesn't show up if I put in document ready. 
[It's been done](http://mochi.github.com/mochikit/doc/html/MochiKit/DOM.html). In the end, it just becomes a pain to work with.
You need to learn about [scope](https://www.google.com/search?q=js+scope). When you define printToday inside an anonymous function like that, it is no longer accessible once the function has finished. To access it later, you would need to extend a global object: $( document ).ready( function() { window.printToday = function() { ... }; }); However, you shouldn't need to define functions inside jQuery's `ready()` anyway. The point of `ready()` is that you get your environment set up (variables, functions, libraries) and then wait for the DOM to load before initiating them. So instead, try: function today() { return (new Date).toDateString(); } $( document ).ready( function() { document.write( today() ); });
Ok I'm sorry but I'm very confused with what you just wrote, which sucks because it seems I don't have a handle of JS at all :( My code, which I got from the book JavaScript &amp; jQuery: The Missing Manual, works if I exclude the $(document).ready(function(){ }); function. If I just do: function printToday() { var today = new Date(); document.write(today.toDateString()); } It shows up fine. If you mean by "calling it," in the HTML I wrote: &lt;p&gt;Today is &lt;strong&gt;&lt;script&gt;printToday();&lt;/script&gt;&lt;/strong&gt;&lt;/p&gt; I just don't understand why the date does not show up when I put document ready but does when I don't put that in. Also, I've never heard about putting the scripts on the bottom of the page. Does that mean you put the scripts twice? Why at the bottom? Thanks for your help! 
Paste the code that isn't working. `alert()` should always work, so there must be something else going on. Simply calling `alert()` inside `ready()` should look like: $( document ).ready( function() { alert( "hello" ); });
I pasted your code in with nothing else and it doesn't pop up... :( If I take away the $( document ).ready( function() { and the }); then the alert function works... wtf 
Optimally, the best way to do something like this is to make the modification to the data server-side, so that you get both the player's data and their scores together in the same JSON object, and then create one Model for that. This minimizes the number of HTTP requests you have to make, which will also make your application load the data faster. I know that might not be possible with a service like Parse (or your API has a strictly separated representation of each resource), though, so an idiomatic way of handling that in Backbone is to use a composite view, with two child views, a PlayerView representing a single Player model, and a ScoresView representing the Score collection for that player. Your composite view then stitches the two together however you'd like, and you render both of those subviews inside the composite view's render method. This is actually a fairly common problem people run across in more complex Backbone applications, and it's been addressed by some of the other frameworks that have been built on top of Backbone, such as Backbone.Marionette. You can check out the [documentation for Marionette's CompositeView](https://github.com/marionettejs/backbone.marionette/wiki/Use-cases-for-the-different-views), and I think you'll find that the CompositeView's use case is very similar to what you want to do. If you don't want to use Marionette, there's a lot of discussion about how to best handle child views in a complex Backbone application, which you can find a bunch of examples of in [this StackOverflow question](http://stackoverflow.com/questions/9271507/how-to-render-and-append-sub-views-in-backbone-js). I'm partial to the second method of rendering child views in that question, but each has its own pros and cons. Hope that helps!
When you declare your function in $(document).ready(), it isn't defined until after the page loads. Your call to printToday() happens as the page is loading. At that time, printToday() hasn't been defined yet. Either that or jQuery isn't loaded.
Oh wow.............. I had accidentally deleted the closing tags in the html file of the CSS script... the /&gt; in the line before! It works now! THANK YOU! I have a couple questions for you, since you seem kind: 1) I am looking to become a web designer and front-end developer (all self taught). I have a good grasping of HTML, CSS, and for the most part (I think) jQuery. Do I need to really know JavaScript? What are the advantages of really knowing JavaScript? 2) I was going to create a geography game using mostly JavaScript (except for transitions) but it now seems out of my league. It would have had a few different options, but I was going to start off with simply matching countries with capitals. So I was thinking of creating some kind of list like a Europe section, which has something like country = (France, Paris) Then the program would randomly choose a country, it would pop up, and the user would type in the answer. However, after examining some things... this may be completely out of my league. Would this be as difficult to do as I am not realizing? 
You're not calling the printToday function.. you only declared it. on the first line try: $(document).ready(function() { printToday(); (printToday gets hoisted folks )
Putting them at the bottom is a close equivalent to using the "defer" attribute (even more info here). This is similar to how a browser cannot continue with page layout unless IMG tags have width and height information -- if the included javascript generates content, then the browser can't continue with layout until it knows what is there, and how big everything is. So long as your javascript doesn't need to run before the onload event happens, you should be able to either place the script tags at the end, or use the defer attribute. http://developer.yahoo.com/performance/rules.html#js_bottom
This is easily the worst purpose library I have seen.
Nearly everyone will say that you need to become a JS expert before even touching jQuery, but I don't share that opinion. Unless you're making highly graphic intensive games, you can get away with just a basic understanding of JS and jQ for most web applications. That said, if you have a genuine passion for front-end development, you should *want* to learn the hell out of JS. And a better understanding of the language will mean drastically reduced turnaround times on projects, and infinitely fewer headaches when something doesn't work. As for your game, it's a lot easier than you're thinking. Don't talk yourself out of doing it by making things more complicated than they need to be. This should get you started and looking in the right places: &lt;div id="country"&gt;&lt;/div&gt; &lt;input id="answer" type="text"&gt; So you now have a spot to display the country, and a spot for the user to type their answer. You can store your countries and capitals in an array. The easiest way is to use a simple array of arrays, knowing that the first value is going to be the country, and the second is the capital. var capitals = [ [ "New York", "Albany" ], [ "Washington", "Olympia" ] ]; You'll use [`Math.random()`](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/random) to get a random number. So if the number is 1 and we set that to a variable called `rand`, then this piece of code will get `Washington`: capitals[ rand ][ 0 ] You'll then use jQuery's [`html()`](http://api.jquery.com/html/) to change the text inside the country div. Use [`on()`](http://api.jquery.com/on/) with the `keypress` event to detect when the user has typed something into the input box. Then use [`val()`](http://api.jquery.com/val/) to get what they typed, and check it against the real answer. When it matches, you can reset the input box using `val( "" )`.
Ah right, sorry I missed the namespace. That *is* nice. I was looking for the 'class' that defined the different tags that are available, but I see that is done dynamically. Nice going putting this out there, I haven't seen any library like this before.
There's [a lot of good stuff in YUI](http://www.reddit.com/r/javascript/comments/wj3z6/is_there_any_particular_reason_why_yui_isnt/c5dsnnr), which people tend to overlook because they tend to associate YUI3 with the verbosity of YUI2. The main benefits for YUI, at least for me, is that it requires you to structure your code well, and has a much more consistent API than any other JavaScript library. Granted, it's not as easy to just drop in and use like other libraries, but I think it's well worth the tradeoffs, especially when you're developing on a larger team.
These three questions are probably the coolest out of the ones I've seen so far. They're basically traditional advanced computer science/networking questions, but with a nice JavaScript twist on all of them.
Believe me, this is not to discourage you, but rather to put you on the right track: I wouldn't hire you if you only knew how to use jQuery. Pick up Douglass Crockford's books, get to know Chrome Developer Tools (or The Firebug extension for Firefox), and start learning. 
You can modify the server side to return one nested json like the other commenter suggested, or you can just have a chatty API, and make one call to get the player list, and a call each, for each player's stats. Yes, that is very inefficient, but unless you service is getting hammered, not a huge difference. My policy is generally have the front end be chatty by default, so my backend API is simple. Once there is actual usage demand for efficiency, reduce the http requests. In the mean time, keep it chatty and simple and test more user features. 
Basically boils down to "how do you implement `map` and `filter` using the `reduce` function", but without assuming the collection you're working with is a standard javascript array (so there are a few things you *can't* do). Assuming the output can be an array (?), this would look like: function map(reducible, callback) { return reducible.reduce(function(prev, cur) { prev.push(callback(cur)); return prev; }, []); } function filter(reducible, callback) { return reducible.reduce(function(prev, cur) { if (callback(cur)) { prev.push(cur); return prev; } }, []); }
Admittedly these questions were probably especially targeted given my background. I have implemented my own [ECMAScript 6 Engine](http://benve.github.com/continuum) and quizzing me on minute details of how JS works would only serve to reiterate what code on Github already shows. The purpose of the questions was more generally to see how I was able to do problem solving on my feet.
Perhaps the OP, like me, struggled to figure out from the website what it actually does, and what problem it solves?
I forgot, it was also specified that it should be done lazily (the originating topic was monads). The answer was as follows, (also as a gist: https://gist.github.com/4654927) function map(reducible, mapcb){ return { reduce: function(reducecb, initial){ return reducible.reduce(function(accum, item){ return reducecb(accum, mapcb(item)); }, initial); } }; } function filter(reducible, filtercb){ return { reduce: function(reducecb, initial){ return reducible.reduce(function(accum, item){ return filtercb(item) ? reducecb(accum, item) : accum; }, initial); } }; } function toArray(reducible){ return reducible.reduce(function(accum, item){ accum.push(item); return accum; }, []); } function x10(x){ return x * 10; } function even(x){ return !(x % 2); } console.log(toArray(map([1, 2, 3, 4, 5], x10))); // [10, 20, 30, 40, 50] console.log(toArray(filter([1, 2, 3, 4, 5], even))); // [2, 4] The beauty of this is twofold: it can work with any kind of input data as long as it exposes a way to be reduced, and it only requires iterating through the dataset a single time to perform multiple transformations (as opposed to applying them in sequence, requiring an iteration per transformation).
This is a pretty good overview of promises; [You're Missing the Point of Promises](https://gist.github.com/3889970)
As a guy that has been prototyping similar interfaces (drag&amp;drop to move the "view" and it's elements), using a single canvas and redrawing the screen everytime the user changes the view is not very efficient in most browsers. Specially if you go for mobile. Performance wise the best idea I tried is using html elements and moving the "view" with element scrolling.
Try looking at XMLHttpRequest it will probably do what your looking for
Thanks :)
That's true. Unfortunately, Firefox currently requires fullscreen mode before allowing pointer lock, which is not a requirement I wanted to place on my users. So, no firefox for now. :(
As you can see, there can be quite a lot of variety of questions. I think you may be better off reading some books to get a yourself a good cross-section of things. While I haven't read it yet, [Effective JavaScript](http://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182) has been getting great reviews and sounded quite interesting from an interview I heard with the author. I liked what I read of [Pro JS for Web Devs](http://www.amazon.com/Professional-JavaScript-Developers-Nicholas-Zakas/dp/1118026691/) and [JavaScript Patterns](http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752/). There's also the MDN guides, etc. Also try reading the source code to some public projects and look up stuff you don't understand. jQuery is a bit overwhelming but the underscore and bootstrap libraries aren't too bad to start with.
Too bad the hoe.js syntax is so verbose ;) There's a "standard" called [Zen Coding](http://code.google.com/p/zen-coding/). Your first example could be rewritten this way: zen('tr&gt;(td.myclass{col1}+td&gt;a[href=xxx]{col2})'); 
I should have said, "...or comparable" to every one of those, you're correct - but overall you *should* have some idea about most of these. And even I pointed out that the semicolon thing was pedantic. Why jQuery? Deferred and Promises, mostly.
I'd been programming 12 years when someone asked me what sigils Perl had. I had no idea what that meant, but once they explained what it was, I could answer it. My JS is passable, but I tend to write mainly backend apps, and pretty much only use jQuery on the front end. But, often I find myself having to learn something for a new position, so I get frustrated if something is held against me because I don't know it at that exact moment. Rarely these days can I not learn from code that already exists.
so it is not like it cannot run under firefox, am i right?
Lambdas.
I like it, my only two requests would be UX related: 1. Make the node I'm dragging slightly transparent so I can see what's underneath a little. 2. Account for where my cursor is, not where the top left corner the node I'm dragging is... it's a little confusing and I dropped the node I was dragging in the wrong spot multiple times. It would be better if the node you dropped on was the one under your cursor, not the top left corner of whatever you're dragging.
via http://news.ycombinator.com/item?id=5128503
Not sure what sort of depth you want. Here's PING's version updated to how I'd write it, plus the outer replaceChild of yours: function changeElement(element, tagName) { "use strict"; var newEl = element.ownerDocument.createElement(tagName); var attributes = element.attributes; var attribute; for (var i = 0; (attribute = attributes[i]); i++) { newEl.setAttribute(attribute.name, attribute.value); } var child; while ((child = element.firstChild)) { newEl.appendChild(child); } element.parentNode.replaceChild(newEl, element); return newEl; } Yours looks good for replaceChild and not making unnecessary copies, but is otherwise worse than the original: * It doesn't move all attributes to the new element, just some selected ones. * **Never** use `.innerHTML` unless you have to. It forces the browser to re-parse the HTML and recalculate everything. Not only is this potentially slow (compared to manipulating already-existing DOM nodes), it wipes out event handlers and other JS-added properties, *and* can fail to be an accurate copy in perverse cases (where the existing DOM is in a form which cannot be accurately represented as HTML). It is far better to simply move nodes around in this case. * The `arrElement` structure is pointless; only needs to be local variables. * (I'll refrain from commenting on code style further unless you ask as it's more subjective.)
Next up: from Backbone to Angular
There's a [list of various resources at the end of this page](https://github.com/bebraw/jswiki/wiki/WebGL). I hope that helps!
Haters gonna hate. Personally, I probably won't use it in my day to day work but it's a cool pet project and you did a great job on the docs. Kudos.
god damn that syntax is **UGLY**
I'm sure it could, but for the reason above (and a few others), I decided to support only Chrome for now, so it doesn't.
Good acknowledgments of some flaws. If you'd make a pull request that would be awesome. If not, I'll make one for you. These are all good suggestions. 
this looks very useful
Compared to what? 
Thanks!
Supports audio sprites. Thjnk I will give it a try with a project I am developing for IOS
[Aerotwist : Getting Started with ThreeJS](http://www.aerotwist.com/tutorials/getting-started-with-three-js/) 
I'm guessing he's referring to pointer math.
Looks good! I'm always interested in new audio libraries. How well does it handle seamless looping, such as bkg music or ambience in a game?
I thought it was because i++ + ++i when minified by early minifiers created the hard to track down error i+++++i. I think YUI and uglify handle this now though.
Good news! It's exactly the same as what is already approved for ES6 :)
I actually wrote howler.js for an HTML5 game we are working on, so those were concerns that were forefront when writing the library.
Well, to be fair, both TypeScript and ES6 call these things "Arrow Functions". See section 13.2 of the latest ES6 draft spec, or section 4.9.2 of the TypeScript Language Spec.
Thanks for not taking offense at my comments. I should have done a pull request in the first place! I'm in the middle of something today, but give me 2-3 days and I'll get a pull request together for you. In particular I'll write up something on `document.write()` - an example or two of where it is the right solution, plus a brief description of why it usually isn't. :-)
Yeah, I see 0.776% faster in Firefox 18 on a really slow netbook. So, not *much* faster, but it's measurable.
Fair enough. Still think it sounds funny. Like something my wife would say if she was looking over my shoulder. "Ooo look at this pointy thing codes here."
Thanks, I think I just did not load jQuery properly! 
Interesting, thanks again for the information!
Thank you, that does not discourage me. The book JavaScript the Good Parts should arrive in the mail for me tomorrow. I guess what i didn't completely understand (and still partially dont) is why learning JS is important if it seems that jQuery can do all of the things I would want a website to do. 
I can certainly agree with you that a new team member should be able to: * describe some experience with automated testing * do basic devops * speak intelligently about a popular JS framework or library he has used in the past * demonstrate a fundamental understanding asynchronous tools and techniques.
Believe it or not, jQuery isn't the best answer to all JavaScript programming.
That was a great article, very detailed. I like how he didn't jump from A to Z like most other writers.
Doesn't display anything for me? (accepted video request but didn't login with Dropbox)
jQuery is a great utility for DOM operations, but JavaScript is so much more. If you're going to be a front-end developer, you'll need to write and maintain large JS applications, and understand scope, inheritance, performance, and security. jQuery is badass, but it's not any sort of JavaScript replacement - it's just a handy utility. 
I love this one, I keep laughing every time I see it.
I really think you should go from Backbone to Ember before going to Angular. Also, it would be nice if there were a from jQuery to Knockout before the to Backbone. You could also have a from jQuery to Spine right after Backbone. JavaScript MVC should be in there somewhere, I'm not quite sure where, but it should definitely be after Knockout and before any possible inclusion of Batman. Should probably get from Prototype/YUI/Mootools to ... in there as well. Module loaders should be included in each of these as well.
Actually, no one still uses YUI. The only reason you still see development is so the YUI devs don't lose their jobs. It isn't like anything good comes out of Yahoo. The only redeeming quality is the YUI devs use Macs (so we know to take them seriously) and wear a lot of plaid.
Thanks. I have a lot to learn!
&gt; Why jQuery? Deferred and Promises, mostly. Do you think these are special un-attainable concepts that can not be learned or taught, but only magically known?
Why is that a gist instead of a proper repo?
You are correct. Angular and Backbone are not related. 
That may be foolish. Take a look at the kinds of things that folks are building with both, and then decide what suits your pet project the best. http://builtwith.angularjs.org http://backbonejs.org/#examples
Honesly things like not having proper data binding to me is what makes backbone much MORE complicated than angular. I tried angular and it was like a breath of fresh air. Much simpler and a better approach even than ember, but this is all my opinion of course.
Thanks!
I got downvoted because the hipster JS nazis got their panties in a bunch over my implication that becoming a JS master wasn't the most important thing in human history. You got downvoted because the /r/javascript nazis cry a river whenever somebody asks for help here, thereby wasting almost one quarter of a second while they move their eyes one degree lower to read the next submission title in hopes that it's a list of 20 uber leet jQuery plugins or somebody bashing Node.js. To answer your question, yes, I've been a web/soft developer for about 15 years now. And to build on my quick start guide, to add functionality for pictures of a country's shape or flag, you'll still be using the `html()` function. But instead of just passing it a string like before: $( '#country' ).html( capitals[ rand ][ 0 ] ); You'll be adding more to the array, another HTML element and changing the `src` attribute: &lt;img id="country-img"&gt; var capitals = [ [ "New York", "Albany", "new-york.jpg", "new-york-flag.jpg" ], [ "Washington", "Olympia", "washington.jpg", "washington.jpg" ] ]; $( '#country-img' ).attr( 'src', '/images/' + capitals[ rand ][ 2 ] ); That will change the image's source to `/images/washington.jpg`. If you're going to be randomly displaying either text or an image, you can hide the image while text is displayed by doing: $( 'country-img' ).css({ 'display': 'none' });
Awesome. This looks way useful. I may even make use of this in my next game ;)
Thanks, any feedback is welcome!
So, knockout isn't really worth bothering with?
That was really awesome how he took simple, easy to follow code, and made it 10 times longer.
Yeah, I think that Eloquent Javascript it's not a good start. But in the future you can learn some new stuff from that.
Oh just skip both of them and use vanilla JS. The best part of backbone is the event system and it is trivial to implement your own version of it. Without looking at backbone's source I was able to write my own on(), off(), and trigger() functions for Gate One (see GateOne.Events) that work fantastically well. I even threw in some improvements with once() and a decorator mechanism (callBefore). Don't pick a framework because it is popular. Pick one because it solves a real problem you're having.
jQuery soup doesn't scale (it gets very complicated very quickly) and it's also impossible to test. That's the reason why all those MV\* frameworks gained so much popularity. People started to write more sophisticated applications and they needed a way to structure them. They also needed a clear way to separate concerns, because that's required for making it testable.
&gt; Using a namespace is a must to prevent global clutter IMO clutter is only if you dont have control on what globals are being created. My code doesnt leak globals. So I create this helper functions in global namespace and have no problems with it. &gt; why not use a templating system? See FrozenCow [response](http://www.reddit.com/r/javascript/comments/17dbjh/hoejs_javascript_for_peasants/c84n3n8). I am preparing a blog post to answer this in more details... In this thread people are just talking about the DOM creation but for me thats not the "main thing" about hoe.js. I guess the examples in the main page are misleading about how hoe.js should be used. The tutorial gives you a better idea of the intended style. I will try to improve that. 
I don't see anything in either page of examples that wouldn't be possible if using the other framework. My advice is to try both, and see which one works for you.
I think the lack of polish on those angularjs showcase apps actually says a lot about angularjs: beginners can pick it up and do fancy things. Most of those backbone apps are thrown together by huge teams. But, having just discovered angularjs, I have to admit my initial reaction to those apps was "not impressed."
This is mostly correct, but I wanted to clarify a few things. Full disclosure: I work on AngularJS, and am subject to bias. I wouldn't really say Angular has much bloat. Features that are optional (such as cookie support, or sanitization) are packaged separately so that apps that don't need them don't have lots of extra dead code. Although Angular has some nice support for Bootstrap, it's not at all tied to it. Again, the Bootstrap support is packaged separately, so you can leave it if you don't want to use it. I think a fair comparison is that AngularJS tries to include all of the common features (data binding, events, modular DI system, etc.) that apps will use into one package. This is nice because most apps will just need the `angular.js` file and are good to go. Backbone's take is to try to be as minimal as possible. It provides you with a general, basic structure, and some great utils. Both approaches are valid, and each have their advantages. In practice with Backbone, I found myself adding many additional libraries to get all the features I wanted. There are often multiple libraries that implement a given feature, and it can be hard to choose. For me it was kind of a "death by a thousand cuts." But your milage may vary, and I think it's worth investing a bit of time to try different frameworks to see what works for you.
I think "community mindshare grab" is perhaps a bit overly cynical. As a developer, you absolutely _should_ be passionate about your tools. You should be talking about them with others, comparing them, shopping around, and always pushing the envelope. &gt; As an engineer, there is a short list of tools that you must be rabid about. Rabid. Foaming at the mouth crazy. That quote is from [this excellent article on the topic](http://www.randsinrepose.com/archives/2009/11/02/the_foamy_rules_for_rabid_tools.html).
Any reason you didn't go with http://www.schillmania.com/projects/soundmanager2 ?
I have seen a lot of these articles on JavaScript frameworks using MVC. Most of the time, they are heavily biased towards a site/app that has a lot of user interaction. I would like to see a good writeup/example where data aggregation and presentation is the bread and butter. I am working on a project using quite large JSON objects of data, and I use Handlebars to build my views. I write standard JS/jQuery functions for my models/controllers. I cannot help but think there are more effective ways to do this. Can anyone suggest such a framework/writeup/example?
It doesn't have support for Web Audio API, just HTML5 Audio. Web Audio API is far superior in both performance and functionality.
No flash fallback?
&gt;If there are any specific parts that I've not covered here that you'd like me to address specifically Yes. [The recursion depth is effectively 10](http://pastebin.com/Ni5bM92R). I don't think recursive views are outside of Angular's intended usage. At the very least I can inform you that recursive Backbone views do not have this problem (because my next article is a Backbone reddit front-end). --- &gt;These two eval are not the same. Quite. But the point is about the conceptual weakness of code compiling itself as a common mechanism. Javascript has eval because it sometimes fetches new code, JSON, what-have-you. It's not exactly a standard feature in a language, and it's not something there's a particularly good reason to regularly use. $compile is common because it's part of the practices of Angular to compile AML on-the-fly. ["Manually adding elements and compiling them is definitely a perfect approach"](http://stackoverflow.com/questions/14430655/recursion-in-angular-directives)--this is given as a good answer to a recursive problem. &gt;Write unit tests. AngularJS is absolutely designed to make this stuff manageable. Haha I had a bit in the essay knowing this would get said, but I took it out because it felt a bit mean: &gt;&gt;How are you supposed to debug this? [Let's play a game of "Find the bug,"](http://jsfiddle.net/3QjZQ/) and then imagine you're working on a major project with dozens, scores of templates. &gt;&gt;&gt;&gt;But testing and commit histories will catch bugs like that! &gt;&gt;Googlers, you can almost get away with a language this bad because you have such a perfect ivory tower methodology. When every mistake you make is safely prevented, you get soft. Testing can't prevent every bug. Angular is a symptom of false security. Think I should put it back in? And now that I think about it, it's not about the bugs, it's about **code comprehension**. [That recursive $compile nightmare](http://stackoverflow.com/questions/14430655/recursion-in-angular-directives) is difficult to understand. There is a recursive call here in a language capable of it: seeing that because the recursive call is in a _string_ is a bit of a handful. Maybe that's^ what I should put in there instead. [Edit: I went ahead and added something like that in the article] &gt;Your fundamental argument seems to be that if you use parts of AngularJS other than how they are intended to be used, you will run into trouble. Not my fundamental argument, unless you're saying that templates are not intended to be recursive. My fundamental argument is that not only is AML a language, it's not a very good one and no one knows what it does because there isn't any discussion on its spec. &gt;Your ViewModel (the bindings to $scope) can stay the same, and you change the View (HTML/CSS), using the same bindings. You're saying that different AML templates can bind to the same controller/$scope environment, correct? That doesn't sound too bad, I suppose. I'm still harping on javascript/DOM separation, though, because CSS developers will be working in core 'javascript' files, the AML templates. Cheers to you as well!
[Doesn't seem to be loading on my phone]( http://www.imgur.com/3HFIQMn.png) Chrome 18. Android 4.1.2. Nexus S
800px _should_ work. You're getting served the wrong javascript because I'm idiotically experimenting with different javascript for different screens, and it's inconsistent. This is the lamest advice ever, but try zooming out all the way and refreshing? I was able to crash my phone by zooming in and refreshing. Or just give up and don't read my piece of crap bizarre refreshless CMS, I don't mind, I deserve it. (In any case, thanks for letting me know.)
Well, I like the d3 lib too much to get rid of it. Javascript needs better mobile detection. Oh, I'm a moron, let me update d3. Edit: Interestingly, it seems to be specific to the type of graph I took the code from; [this](http://bl.ocks.org/4060954) doesn't work on my phone. 
nice. thx!
There seems to be a lot of this "elitism" in some code I've broken apart, especially proprietary stuff. I'm sure brilliant programmers get bored writing "pretty" code and just do things for the sake of seeing them work.
&gt; Yes. The recursion depth is effectively 10. I don't think recursive views are outside of Angular's intended usage. At the very least I can inform you that recursive Backbone views do not have this problem (because my next article is a Backbone reddit front-end). You are correct in the sense that AngularJS does want to support recursive views. A data-binding library _should_ be able to support recursive views, because it's a useful feature. The short version is that the 10 `$digest` limit is not about view recursion, it's about model stability. When alerting AngularJS to do dirty checking, calls to `$apply()` need to be done asynchronously to avoid dirty checking forever. If AngularJS goes 10 "dirty checking cycles" in a row without stabilizing, it it throws that error and stops so you're UI isn't busy waiting forever. If written correctly, a directive should not cause this error. I'll concede that writing the directive is a bit tricky, but it turns out it's non-trivial to do data-binding recursively. Once you have a directive that does this, there's no need to write one over and over again. I'll talk more about this below. &gt; Testing can't prevent every bug. Angular is a symptom of false security. No, but writing a test that exposes and isolates the bug is one of the best ways to fix it. It also prevents regressions in the future. &gt; That recursive $compile nightmare is difficult to understand. I disagree. The code you linked to is a pretty straightforward case of recursion. But even if it is hard to understand, the great part about Angular is you only have to write this directive once. Then you can use it all over your application with different data. Better yet, you can find a directive someone else wrote and use it if you'd rather not spend the time to learn advanced features of the framework. &gt; My fundamental argument is that not only is Angular a language, it's not a very good one... This is a conflation of terms. Something can be Turing Complete or recursive without being a programming language. Yes, AngularJS allows you to write views that are recursive. This is useful only in cases where you want to display some recursive data. In those cases, it's also a great feature to have. Angular's templates are still a markup language, because you're still using it like a markup language. &gt; ...no one knows what it does. Going to jump back to tests here. [AngularJS has a LOT of unit tests](https://github.com/angular/angular.js/tree/master/test). They tell you, in isolation, what each part of AngularJS is, how it should work, etc. Some advice I give to newcomers is to browse these tests. I think these unit tests are so valuable, I'm working to have them automatically included the documentation. 
Heh, you're totally right. I'm so used to writing in an IDE I didn't even notice that.. LOL.. My first programming language was LINGO in Macromedia Director which was a very "english-esque" language so sometimes I make those slip ups.
I've yet to find any real shortcomings in Backbone. I see the cases where angular can make the model/view event binding much easier, but is this something we need? I'd rather have logic-less templates and fat views or models written in JavaScript, it's more readable and easier to maintain in my opinion.
I never used switch until SQL, didn't think of that. thanks!
hrm. a lot to chew on here, esp. since I just made up the fan thing as an example, but yeah, I see how the logic of my program can affect the structure of any evaluators I need to write. thx