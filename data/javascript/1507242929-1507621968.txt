Yeah that's definitely a good way to move forward, I've already felt the promises getting out of hand and getting into cognitive overload. I definitely appreciate the feedback!
u hurtin my feels bro. ima cry now.
What does your html look like? This sounds like something you could probably just do with CSS.
I nearly got hypnotised.
I like having the full detail in the commit message, as I am a frequent user of `git blame` when asking questions about the code that aren't obvious, ie. why did we do it this way?. I follow a 50 character limit on the title and then use a 72 character width on the body of the message. Aside from that, there are no word limits so I take as much space as I need to explain it well.
Sorry, didn't read them properly. I've posted this in a more appropriate subreddit.
it starts to slow down again very quickly after 300
I like moment too. I haven’t tried other libraries but moment has done everything I need.
Doesn't appear to work at all on my ipad. Oh well.
Sure you are
Calmer than you are, dude.
The new logo is hideous
orange is awful, totally clashes with my "darcula/dark" theme on everything. The blues/purples are much more friendly imo. Original logo was fine imo, but oh well. 
I see what you did there.
Hi /u/TaztheManiac, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Castingman148, For javascript help, please visit /r/LearnJavascript. Thank you!
I think it looks fine, personally. I'd still prefer blue, though. I'm guessing they changed it to orange because the insiders is green, and colorblind people who have both the stable and insider's version installed wouldn't be able to tell the difference at a glance. EDIT: [The app has a new background color in the Windows 10 start menu](https://i.imgur.com/oZGofx0.png), and it actually looks really great for both colors.
[Import path quick suggestions in JavaScript and TypeScript](https://code.visualstudio.com/updates/v1_17#_import-path-quick-suggestions-in-javascript-and-typescript) Used plugins for this before, but hell ya. This will probably work better than the plugins could.
It's also too close to the Sublime logo.
Did Microsoft just make me actually believe the Mac Touchbar could be useful?
I have no idea, so obviously don’t trust anything I’m about to say. My guess, total guess, would be that CKEditor Core is a sort of “plugin framework” and that *everything* is a plug-in. So the core functionality that you know of and use is just a preset collection of useful plugins. Again, this is just wild speculation based on nothing other than useful patterns that exist and may happen to be the explanation here.
Thought the same thing. Soft is doing good for Mac. Irony!
This makes a lot of sense, thanks! I actually think you're right based on what I've read. I haven't worked with a ton of stuff so I wouldn't know that this is a common pattern. Still, there's gotta be something more to the CKEditor core. Otherwise it could be called "plugin framework" instead of "CKEditor".
&gt;I'm guessing they changed it to orange because the insiders is green, and colorblind people who have both the stable and insider's version installed wouldn't be able to tell the difference at a glance I'm red/green colorblind and I have a very hard time with orange and green, so I'm not sure that this change has us in mind. I don't have both versions, but I did think both the icons were the same at a glance in their doc.
That's fair, and I am aware there were different kinds of colorblindness. I figured, since the colors green and blue are similar in general.
Do they have a link anywhere to their github? Seems like a missing, it's here fyi: https://github.com/ckeditor/ckeditor5
Well it would be a plug-in framework centered around an input or content editable div or something. 
aw, I liked the purple/blue
For how much I like VSCode, the logo can be a literal turd for all I care. :)
&gt; The blues/purples are much more friendly imo. yeah and as a result, half the icons on my taskbar are bluish. I like the orange because now VS Code stands out more. 
Have used it, can say it is excellent.
New icon imply that vs code will change the name to Microsoft Office Code.
I can’t tell the difference between the insider logo and normal one. I’m colorblind
Oh god why. Just use functions factories and hand wire them all at app startup once
So change it yourself. http://www.wikihow.com/Change-the-Icon-for-an-Exe-File Only software developers on reddit would downvote a solution. gg.
Dropbox and Microsoft need to start shelling out for a legit designer...
Insisting a bit too hard...
- //#region Folding Regions! yah! https://code.visualstudio.com/updates/v1_17#_folding-regions //#endregion
Edgy atom user
That's a positive in my mind: apps serving a similar purpose having a similar icon. But I still prefer the old logo, oh well.
I have had one since day 1. It's not useful. I have not had a single use for it. Why wouldn't you just put those things on screen if they were important, I don't look at my hands. 
You need to upgrade the insiders version to get the new logo. Insiders - green logo Standard - orange logo
Ya. I am talking about the new logos, those two colors are really hard for me
Exactly. It sounds cool and useful until you realise those who might find use for it, doesn't have to look at keyboard
I wish I could switch from WebStorm, but VSCode can't beat IdeadVim yet...
I used the npm Intellisence plugin, does that mean I can remove it now?
To me, this logo is [very clearly](http://bestappsforpc.net/wp-content/uploads/2014/06/microsoft-office-365-logo.png) referencing the Office ecosystem. But I can't figure out in what context. The Office suite of products use a [different style](http://i.nextmedia.com.au/News/microsoft_office_2013_icons_by_carlosjj-d57lp64.jpg) of logos. I have no idea what the *official* decisions were for this style, but for me, it's reminiscient of [software boxes on a bookshelf](https://pvaoldtech.files.wordpress.com/2010/11/img_9134.jpg). (I know, really showing my age, here.) The Office logo itself is the "container" for everything. I find it interesting that they used half of the Office logo, and half of the Visual Studio logo. Since they didn't use the "software box" style, I'm assuming this is not going to part of the Office ecosystem, but instead acting as the container for it's *own* ecosystem. The use of orange is interesting, too. Microsoft is [super diligent about color usage](https://ratnacahayarina.files.wordpress.com/2014/03/microsoft.pdf) across the various product lines, and orange has never really been used much. It always confused me that they went with blue for VS Code, since that mixes signals with several other MS lines (including Windows and Azure). Since Visual Studio is traditionally purple, I figured Code would be jumping to a similar shade (Magenta or Indigo). Microsoft has been holding out on using orange for a long time, it's noteworthy that they decided to bring it out for Code in particular. Considering the contrast with purple, they are *really* trying to drive in the point that it's a separate product. 
Not sure if you've made any changes since this post, but I really like the new CSS! Very clean looking.
The distinction between compiled and interpreted code is there, which is why we have different names them. The fact that it's more of a sliding scale doesn't mean that there aren't any trade-offs. Electron *is* a layer of abstraction, similar to the toolkits you mention, but it has chosen to be all-encompassing instead of focused. Again, the difference to *those* is meaningless, because the point being made was that *all* abstraction tends to come with a cost. Electron (and chromium) itself may or may not be written on a lower level of abstraction than Emacs. That's meaningless, because the discussion is about applications written on top of Electron.
Whew good thing I haven't noticed with my icon pack.
Meanwhile I'm sitting here missing my orange VSCode Insiders icon and dealing with my least favorite color.
Wait till they announce VisualStudioCode365
I'm not sure if you're familiar with ruby, but in trying to understand static methods, they seem very similar to ruby class methods. Would that be an accurate analogy? Would their use case be the same? Essentially they are utility methods scoped to the class?
The majority of my business logic has ended up in selectors. At first it felt wrong, like I was trying to do too much in them, but I've never run into any issue - it's been a nice place to keep it. And they're fast and easy to test. After doing it this way now I recommend it as a best practice. The other place to put business logic (specifically async or flow-based logic) is in sagas, but even the sagas work closely with selectors. edit: I'm talking about the [reselect](https://github.com/reactjs/reselect) library specifically, was that what you're referring to? 
Why not? I use the vim plugin every day and it works perfectly. 
That's what I use it for. Part of a website I built as a personal project is news articles and I use CKEditor to write them. However I only use very basic functionality with no image uploads and other fancy stuff.
I extended the Date object with some handy methods, but for the rest, Date seems fine to me if you are using evergreen browsers.
I don't like the lack of :set commands and separate config options (different from original vim options). In general, command-line mode needs to be polished.
The link is in the Support section with the links to Docs and Examples as well.
If done right, could be *amazing.* I can picture them rolling out a web app version of VS Code to directly compete with Koding and C9. With that, then add in integrations with the rest of the Microsoft product lines. - Direct access to Team Foundation Server (git, issue tracking, etc.) - Direct access to Azure - Collaborative coding *within* Skype - Coding competitions and hackathons via Xbox - Sharing assets between teams and environments instantly with OneDrive I'd just be thrilled if I could have an online editor with the extensibility of VS Code / Atom / Sublime. I switch between several computers constantly, each of which has a few different OS boot options. I still don't have any slick way of automagically keeping everything in sync between everything -- and I'd like the ability to write code on a phone or tablet *if I had to*.
RequestAnimationFrame only executes once.
If it doesn't work at all you may have outdated iOS. Latest Safari (11.x) was released just a week or so ago and it contains a critical fix for ES6 support (which was reported and fixed a couple of months ago but was't released until recently due to Safari's super slow release process ;/). Besides, this is the first alpha version, so it definitely contains a lot of issues. Hacks for mobile browsers (which are significantly worse than desktop ones when it comes to contentEditable support and focus managment) will come later. For instance, we're fully aware that deleting text works poorly on Chrome@Android for now – that's because this platform requires a completely separate input handling. Finally, while doing research on mobile UI we realised that mobile browsers require completely different approach so we plan to have a completely different UI for them. This is pity, but this is also the reality. There's no mobile-first option in our case. You can read a bit more about some of the issues that we're facing in https://github.com/ckeditor/ckeditor5-design/issues/149.
We'll check if we can make them more visible on the website. Thanks for reporting.
Thanks for the info.
[macOS] Protip - you can use now &gt; workbench.action.showNextWindowTab &gt; workbench.action.showPreviousWindowTab keybindings to change between windows
Seems interesting.
I'm charmed by the idea, imagine the npm packages being instantly available. Though there's usually something that keeps it from being able to replace standalone.
*Only available on Windows 10© with Microsoft Edge© - the faster, safer browser.*
I'm glad they changed it to orange - every other app's icons seem to be blue, and I am always having to hunt for the right thing via the taskbar. (And this comment applies to my WIndows &amp; Linux box).
With you on this one.
Hey, CKEditor 5 team here! :) The thing about plugin-based architecture is that you can: * pick just the plugins you want – this allows making the bundle as small as possible, * write your own plugins or loading some 3rd party ones, * don't use some of the official plugins and replace them with your own implementations. The second point ensures extensibility and the third point ensures flexibility. If we'd put too much into the core, you would not be able to replace that functionality with your own implementations. For instance, people may want a completely different toolbar implementations, different enter behaviour or even different typing support. Who would want typing to be implemented differently? Isn't it like the most basic and typical feature? Yes, it is. But what if you want to implement a suggestion mode like in Google Docs? It needs to apply different operations to the model than normal typing. Of course, we could also put the typing into the core and add hooks on which you could listen to modify the default behaviour. CKEditor 4 uses this approach for some of its features – they are in the core (or more monolithic plugins) and they expose hooks (by firing events). This is part of being event-based system. It works quite well but it's less flexible and doesn't allow to optimise the bundle size that much (you ship code that you actually overriden). That's why CKEditor 5's core library consists of no features. It's as small and as general as possible. All features are implemented through plugins or simply by external modules. Actually, modularity is another important factor here. It allows you to reuse and recompose the features. You pick the granular functionalities you want and implement yourself only the small parts that you didn't like. Reuse and re-composition. The downside of all this is an increased complexity. The core needs to be pluggable and all those features need to cooperate somehow so you need a good architecture and a lot of systems inside. But that's a cost of having a powerful platform. We just need to balance these two things and create a good documentation. Talking about which, we're in a progress of writing documentation. CKEditor 5 really requires *a lot* of it. We'll be gratefull for a feedback on what we already have there so we could improve it. I think that you may find these two guides interesting: * [Overview of CKEditor 5 Framework](https://docs.ckeditor.com/ckeditor5/latest/framework/guides/overview.html) * [Intorduction to CKEditor 5 Framework's architecture](https://docs.ckeditor.com/ckeditor5/latest/framework/guides/architecture/intro.html) They cover the concepts that I've describing here.
Release notes for the first alpha version of CKEditor 5: https://github.com/ckeditor/ckeditor5-design/issues/181
Yes can now
I just started adding a bunch of those in my code, that's pretty neat !
Added the license!!
Vue is definitely much better than Angular. And it has many similarities with React!!
Perhaps you want to style your html form element in CSS to appear as a modal prompt — then you can create a function that's just like `prompt`, which triggers the custom modal prompt to appear and gathers the user input
asp.net elements render as regular html elements specifically about asp.net textboxes: ``` Textbox -- Default is Input, Type Text Textbox -- Mode = Password is Input, type Password Textbox -- Mode= Multiline is Textarea ``` so you may perhaps be able to influence the css styles to your desired effect
IIRC it originated in bringing their Monaco web editor to desktops :)
Assuming you're on windows you could always change the icon through the properties to something easier for you. Still a lot of companies forget about accessibility!
I guess the reason is that javascript is the only way to make web applications dynamic and not like its a terminal based operating system from 1960 for launching nuclear weapons to soviet russia. Even more with all the fast development in the web and new UX and techniques which replaced many old legacy techniques and functionality, the engines and parsers have to adapt this new technolgies. If you watch some videos of the V8 development team you can get many interesting insights on how the engine evolved over the past years - they made stuff like predictions on function calls, jit optimizations and stuff like that. In fact many of my desktop apps (except for teamspeak, discord and steam) moved to the web like office, google drive, music and stuff
Why wouldn't they? The Web is their primary source of income in basically every way, it'd be weird if they _weren't_ investing in making it better.
Probably because Google has a large investment in making complex, web based applications that just work. If JavaScript is slow, then there is a poor user experience, and Google loses customers. Google would also want as many people as possible to have a fast JavaScript experience, hence creating V8 and open sourcing it.
Why is the OS X icon so much fucking sexier? Why does Windows get the shitty flat Icon with no depth and exactly 1 color? I hope I can pick that icon on my Windows machine.
Branding alignment I assume. Under Windows they want to keep with their current style of icon as used by their other lines (Windows itself, Office, the store). Under MacOS this might look more out of place so they've gone for a less stark/simple variant of the same thing. With a bit of shortcut and registry hacking you could probably use the other icon if it *really* bothers you.
They are greasing the machinery which makes them money. That's it, basically. When browsers are faster, users will spend more time on the web and the web will be used for more things and all of this boils down to more ad revenue. When they started the browser performance wars, the other browser vendors followed. It turned out perfectly for Google.
The browser and javascript is their platform, so they care in the same way, for example, that Apply care about making sure OSX and iOS are efficient for the end users. It is a shared platform so they are helping their competition too (see MS's VSCode and Office365-online), but in a way that levels the playing field, negating the advantages of competing platforms without badly affecting their choice, rather than shooting themselves in the foot as they might be if it were more of a zero-sum game.
But the string starts with numbers. The first entry for example is 4.8%. Do negative numbers throw it off? 
Use [parseFloat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat) instead. &gt; parseFloat parses its argument, and returns a floating point number. If it encounters a character other than a sign (+ or -), numeral (0-9), a decimal point, or an exponent, it returns the value up to that point and ignores that character and all succeeding characters. Leading and trailing spaces are allowed.
Your assumption about parseInt is wrong. It doesn't strip or trim anything. "4.8%" is indeed a string, not a number. For all its type traps, JS is doing the predictable thing here and not smashing your data to "find" a number. You'll also probably want parseFloat, not parseInt.
It's a logo, who fucking cares?
The new theme looks good, just fix the footer :O
It's the empty string that's giving you NaN (e.g., for Jurupa Valley)
I disagree. JS for the first language is just WRONG. Why? OOP principles. Almost none can be applied to vanila JS. So I don't think that is a good language. 
OP's assumption is not wrong. parseInt("4.8%") yields the number 4. 
This. Does everything you need. And if you have a JVM-hosted backend, it works perfectly with joda-time and java.time. 
I'm a happy WebStorm customer and I think JetBrains deserves every penny that I pay them. I have a list of features that they have that VS Code doesn't. On the top of my list is the auto-import feature and the ridiculously good intellisense when you try to import manually. My feeling is that VS Code + Plugins are getting **closer** to WebStorm on every release. The improvement in imports in this release is a big step in that direction. If I were JetBrains, I would be kind of concerned now.
Is there any good reason to even use `this`? I feel like it can be easily avoided.
The footer image should be replaced - try hard-reloading the subreddit page?
Just install palettab on chrome, open a new tab, pick what you see. Done.
parseFloat definitely performed better than parseInt, thank you. 
Thanks!
We need a plugin to change the logo - like a favicon
[removed]
Hi /u/Tiewrap24, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `snipcart.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [snipcart.com](/search?q=%28and+site%3A%27snipcart.com%27+author%3A%27Tiewrap24%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|15|100% 
Methods in classes (and prototypes). Very much required for object-oriented programming. I only define the method in one place, but it has to be flexible enough to work on every instance of the class it's called from. 
Ya, ruby class methods are very similar to JavaScript static methods and their use cases are very similar. I couldn't tell you the minor differences though, haven't touched ruby in a couple years. If you ever try Ruby on Rails, they use class methods quite a lot. Things like `Model.find()` and `Model.where()` abstract all of the database searching away and stick it onto the Model class itself.
Line 67: &gt; `&lt;script src='//api.tiles.mapbox.com/mapbox.js/plugins/turf/v2.0.0/turf.min.js' charset='utf-8'&gt;&lt;/script&gt;` That URL is a relative address. When you open `map.html` directly from your harddisk, it'll have an URL like below: file:///C:/data/map.html So, the current protocol is `file` instead of `http` or `https`. Thus, the absolute address of above script URL would become like below, which is an invalid URL - even for local URL. file:///api.tiles.mapbox.com/mapbox.js/plugins/turf/v2.0.0/turf.min.js 
 while (document.firstChild) document.removeChild(document.firstChild);
What do you mean "refresh the dom"? Are you trying to reload the entire page? Or do you have some data in a model and you're trying to update the dom with the latest data?
I just want to be able to access elements that have been inserted in the DOM after the page has loaded.
 document.documentElement.innerHTML = ''; I don't know if that's what you meant. Technically speaking this is refreshing the DOM. Empty is refreshed, right?
I always like to use arrow function, but sometimes i need declare a function with old function syntax. I follow this rule, if the function is an single expression, i use arrow function, but if i need block functions i use old function syntax
Totally agree. Will diversify--curating plenty of awesome stuff coming from other sources already, so will definitely include this in my reddit activities. Thanks for the reminder, I appreciate it. :)
I see... but how does it work then if I launch it in tryIt? That is just another machine...
Right? Fuck orange
that's no issue as long as you try to access is after it has been inserted, I think you have some other error
Yeah how do I do that ? Put a timer to delay the execution of the script ? How ?
'//' can auto expanded to http or https, ensure the file to be served. But you can not use it without a server obviously. Run a local server or change it to 'http'
I agree. Webstorm does a couple of things still way better. The Git integration is one example. As it comes to intellisense for javascript files, I think that webstorm is actually in some case much worse than Visual Studio Code at this moment, see this issue: https://youtrack.jetbrains.com/issue/WEB-29083 Typescript can now parse JSDoc comments, this is something that Webstorm has be doing as well for some time, but most of their JS code completion comes from some kind of dump algorithm. They index any function in your codebase, and if you try to complete something, they will suggest any of those functions. What VSCode now tries to do, is use JSDocs as if they were typescript type hints. And use typescript inference to give you good code completion. Webstorm is lacking behind, because they don't infer types from JSDocs comments as well as Visual Studio Code does. Anyway, I'm glad both products exist, I hope they keep inspiring each other to make an even better product.
Yes everything you say is on point. Selectors are basically functions with the shape state =&gt; derivedState. Reselect provides a neat way to build those by composition and provide memoization on top. Reselect should be part of JS itself in my opinion, as it is a fundamental feature we need everywhere.
if you're talking about a script being initially loaded or something, use can use document.addEventListener('DOMContentLoaded', function() { console.log('document is ready. script stuff here'); }); or jquery $(document).ready(function () {...}) or just google things like these if neither fits your setup
As the majority of their revenue comes from the web, it is pretty wise to provide the best possible experience for the users of the web and it's a good way to market themselves for web developers.
Functional programming is so much better than OOP. A whole generation of programmers has been taught the completely wrong paradigm.
https://blogs.msdn.microsoft.com/visualstudio/2017/03/08/iterations-on-infinity/
Azure has an editor in it which is a lot like vs code already.
did that, thank you!
&gt; document.addEventListener('DOMContentLoaded', function() { console.log('document is ready. script stuff here'); }); Yes but what if the page keeps inserting new stuff when you scroll down ? (with infinite scrolling) How do you do something similar that always tries to listen for changes ?
A lot of OO languages are incorporating functional programming features.
It sounds like you are looking for a MutationObserver https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver
well then you gotta have some function that adds the elements, in which you can add your logic to access them... or if it's some third party infinity scroller it probably has some event you can subscribe to or something
I think this is the question you're trying to ask: https://stackoverflow.com/questions/34896106/attach-event-to-dynamic-elements-in-javascript
I miss the old logo, I liked it a lot better. I dunno why they had to change it and make it so similar to Sublime.
I've switched completely from Webstorm to Code for about 6 months now and not looked back. With its debugger integration it provides me all I need in a much slimmer UI, easier to extend and of course free.
You mean context? Well, uh, I guess you could avoid it. But it's kind of like one of the core concepts of Javascript. The abc's of JavaScript if you will. This is a good video about context: https://www.youtube.com/watch?v=fjJoX9F_F5g&amp;list=PLoYCgNOIyGABI011EYc-avPOsk1YsMUe_&amp;index=5 
If you fill in the form as a human, do you get HTML back? Then that's what the node request will get back...
Use the best tool for the job. Both have pros and cons.
Could you avoid using pronouns in a sentence? Sure. but then you would always be talking in the third person about yourself.
what is this insiders thing?
How do I turn it off?
Why would a car seller invest in an engine manufacturer?
It's not the theme that is the problem. It's the inconsistency. With the reddit theme, I know what I'm looking at, I know what I'm looking for, and I can quickly find the info. With custom themes, shit can be anywhere. Good theming engines allow users to make their own themes, but maintain the same level of consistency. Letting users muck with the CSS, doesn't. It just fucks up everything, and 99 times out of 100 it also looks like garbage. A decent theming engine can also protect against people making everything look like utter garbage. &gt;That said, isn't it grandstanding to complain about something when you were literally given the option to disable it and never interact with it again? u/itty53 wasn't complaining about themes, they were complaining about the big stink all the individual subs put up when reddit announced that they will be going with a theming engine, instead of letting people jack up the CSS to the point where reddit dropped the plans (afaik). 
My problem with the ProCSS thing was that it simultaneously was co-opted by the "fuck the admins" group while also being supported by good mods who *enjoyed* the CSS aspect. It became just another "us vs them" thing to divide, and I hate that.
CAN WE HAVE A GOTH THEME
Yeah, I watched it. I saw the same thing happen. I saw a few people who were trouble makers do what they do best, then all of a sudden the big legit subs starts jumping on board. It was a shit show. I couldn't believe the admins caved. People would have been mad for a little while, but they would have gotten over it and as long as whatever they were proposing wasn't junk itself, users &amp; mods would have probably liked it more. Theming a sub with CSS is a PITA. 
That canvas terminal renderer update... that is amazing https://code.visualstudio.com/blogs/2017/10/03/terminal-renderer
They aren't investing it in javascript directly, they are building a platform that will eventually morph into what they want to see; javascript's just along for the ride
I see someone's read [Douglas Crockford](http://shop.oreilly.com/product/9780596517748.do) :D And yes, as an example if you use `class` in your javascript then you have a very good reason to use `this` in your code. 
Yes. It redirects to that page but then has a reply url. The reply url will redirect back to to the site in the form. The reply url doesn't seem to be caught by node . 
They want Chrome to be the preferred browser which is their company is integrated with. Pushing you to use their tools and sell your information to advertisers. Same reason a farmer would buy new far harvesting equipment and then supercharge its engine.
&gt; to my knowledge this should be fine right? I think so as well. Try to give `console.log("test");` in `clickButton()`.
if you leave out the protocol in a url it will use the same protocol as the file that calls it, so from w3schools thats on the http-protocol it will use http, and locally you're on the file-protocol, which obviously doesn't work
I think its something that could be left out of the language. A fork of JS that dropped the OOP-like syntax (class, this) and had utf-8 internals would be pretty nice. Everything you can do with classes (dot invocation) is still doable, with explicit bound parameters instead of a magical invisible argument that isnt used most of the time. If it included a solid reactive implementation built-in, i might even prefer it over original flavor JS... 
The choice of editor is literally the least important thing you'll ever make as a developer. Use whatever works for you, even if it's a web browser that eats all your RAM.
is there any good reason to avoid it?
That's the thing, i looked at the html while it was happening, and the style and class changed, but the onclick event didn't
&gt; &lt;button onclick="" id="button1"&gt;Upgrade&lt;/button&gt; Why would not you just do this, `&lt;button onclick="clickButton()" id="button1"&gt;Upgrade&lt;/button&gt;.`
I want to be able to change the entire button, because it's used for upgrades, I keep it hidden until I need it, and when I do need it, i set the innerHTML, I change the class so I know it's being used and I want to be able to change the onclick event too
Post me Codepen or Fiddle.
I have it on github, here's the link: https://github.com/super-sydney/magicclicker
Fiddle pls.
Nope. On a Mac. 
Really... Never read it but I've heard of him. I'll have to take a look.
with something like that, you would need a listener on whatever event is triggering the new data to be populated and, when that's complete, then do whatever it is you're trying to do. if you're using any framework over vanilla js, they'll usually have a more specific way to handle that
Sure, it's a variable that changes value based on whatever JavaScript decides it wants to assign it. Using normal function definition syntax will change the `this` keyword to be assigned to something else than when using arrow functions. It makes it harder to reason about your code and opens your code up to bugs that could be easily avoided with one line of code: `const varName = thingtoasign;` Now whenever you reference varName , it will ALWAYS be what you want to refer to and isn't going to change if you refactoring your code to use arrow functions. It also is far more readable if you have a good variable name instead of just an ambiguous "this."
[:this:](https://imgflip.com/i/1x5xve)
Why does that matter in code? In the real world, people can see me with their own eyes and know that "I" am the person talking. `this` is totally ambiguous, has poor readability, and present issues with what `this` actually is because the context changes with completely unrelated things like if you use arrow functions or not. IMO use const or let and assign what you want to reference a name. That way it will be readable, easy to reason about, and not change value based on whatever JavaScript feels like assigning it. That's a great way to introduce bugs.
Yep, I get context and have a good understanding of the `this` keyword. I still don't think it should be used. Variables shouldn't assign themselves based on whatever JavaScript feels like. The programmer should assign the variable value and that variable should ALWAYS have that value unless the developer explicitly reassigns it. `this` is ambiguous, offers poor readability, and will cause bugs if anyone changes to or from arrow functions, meaning you have to refactor a lot more code. `const varName = thingToAssign;` There, is saved you a huge amount of pain with only one new line of code.
Shouldn't we try to not use `class` anyway since it is just a new syntax for working with prototypal inheritance? Why not just do things the way JavaScript actually works and avoid all these issues?
`this` is always what it is supposed to be, and your lack of a grasp on what that is at anytime is not a fault of the tool. Second, there are any number of times when making generic library code that one cannot refer to any particular name, and must simply refer to the object which is calling this method. To say that someone should avoid it is 100% equivalent to saying a person should avoid using the word 'them' or 'they' even if they don't know a person's name yet, such as when a new hire will soon be hired, but they have not been chosen. The new hire will be here soon, please treat them with respect. That them is a javascript `this`. Don't avoid something just because you don't understand it.
Still makes it an issue since the context can so easily vary based on seemingly unrelated things. IMO variables should be easy to understand what their value is and not assign themselves to whatever JavaScript feels like.
Well, it's true that `class` is syntactic *sugar*. I like to use it primarily because it makes code easier to read for people that may not have a background in javascript and secondarily because I like it. It's a fairly accepted pattern. I mean one could say nearly the same thing about arrow functions. Why use them at all when we have `bind` etc. 
Okay, please be sure to let [Douglas Crockford](https://nemisj.com/js-without-new-and-this/) know he doesn't have a good grasp of JavaScript. You should explain to him how it works.
Shorter syntax, less boilerplate code. They behave differently from normal functions in other ways, too.
Of course it's still worth using. Linting and ES6 don't provide anything that can replace static type checking.
Not if you weren't using it for the types. But in that case, there were already better options.
That is pretty insane, can't wait to try it out
Typescript is much larger than the static typing alone. It opens up a ton of cool design patterns with it's additional language features. Also, the ammount the ide can help you goes way up too, and that for me is typescript biggest win. I see the benefits of the linter and es6 to be very different things (both of which you can use side by side with typescript). 
Defining things once on a prototype is more efficient than creating closures each time an object is created. Of course, 99% of the time this is a premature optimisation, but sometimes you need that slight boost.
typical. coders who are bad at keeping track of their variables/scope/whatever always try to blame the language. personally, when this becomes an issue I prefer to do something like `let self = this`. problem solved. or use arrows instead. don't blame OOP just because js can be tricky.
First of all, that link has nothing to do directly with Douglas Crockford. Secondly, the Douglas Crockford article that is actually linked therein is all about how not to misuse the `new` keyword. It has nothing to do with `this`. Also the article you linked was not actually telling people to not use this, it was an advertisement for their own zet.js library that wants to implement its own version of `this` called `that` actually further confusing the issue. So good luck with your not reading articles, or perhaps being the author of this shitty one.
pamblam approves this analogy.
Hell yes it's still worth using. It catches a ton of stuff ESLint doesn't. Our big ERP system is part TS part JS. I love how many little bugs TS catches for me. When using plain JS I have to be much more careful, even with ESLint.
This has nothing at all to do with 'whatever javascript feels like'. It has everything to do with execution context and how you manipulate that context. Sure you can call it a confusing concept and argue that it is a design error, but don't go and blame your lack of knowledge on supposed randomness. You claim to have a good understanding of the this keyword but I highly doubt it.
depends on your structure i guess.
Could you please elaborate? Because Flow is really not too elegant and proptypes is runtime and somewhat limited too.
depends on your structure i guess.
what's happening is you're passing in a function to the xapi.status.on function and it's returning you another function. the function you're returned is an unsubscribe function that when invoked removes the function you passed from the list of events to be run. this is a really contrived example of what it'll look like const events = {}; const xapi = {}; xapi.status = {}; xapi.status.on = function(event, callback){ if (!events[event]) { events[event] = []; } events[event].push(callback); return events[event].filter(fn =&gt; fn !== callback); }; by calling `off`, you're removing your callback from the list of callbacks to be run during the event.
depends on your structure i guess.
&lt;button id="myButton"&gt;Upgrade&lt;/button&gt; document.getElementById('myButton').addEventListener('click', function() { clickButton(); });
umm... yeah I honestly feel like you need to work on your listening/dialogue skills. Not everything is a "race to the right answer".
It is a version of VSCode that has all the latest features but might have a bug or two. I believe it updates every day instead of once a month. All features from the stable release can be tested in the Insider version first. Hope that helps. [Download here](https://code.visualstudio.com/Insiders/) 
What about hoisting?
What about it... I'm not following
Ya I still actively use Webstorm for work and I love it, but it's a bit heavy. I love VSCode for working on smaller projects. I can get started on my project in seconds. With Webstorm it feels like minutes. And the advantages of Webstorm are slowly shrinking with these hot updates VSCode has been dropping. Although I hear Webstorm's next release will include Auto-import on Paste, which I am extremely excited for.
I've heard the same argument about angular using $Scope everywhere. I just don't agree. As a JS dev you have got to have a strong strong handle on your lexical scope and context. Otherwise you are just not fully using the language.
I still don't understand how disabling features of the site with CSS (e.g. upvote/downvote) is allowed, especially given that disabling styling is a gold level feature.
Strict types is a pretty big reason to use it, but if you don't want that then linting is fine.
&gt; disabling styling is a gold level feature. Is it? Honestly, I haven't not had gold in years. 
It's not even OOP, you run into the same issue with a simple closure. I think we have ALL had that "what is going on" moment in js when we first wrote a bug because we were treating js like every other language. Then we spent time learning how scope works in js and grew.
IMO, the main feature of FP is not being able to do non-fp things. Ie, not being able to do OOP things
[Yes.](https://www.reddit.com/r/goldbenefits/comments/33ei8y/introducing_reddit_themes_change_the_appearance/) And you have over 3 years worth of gold left on your account.
believe me, I've had more than my share of "wtf js" moments.. but I don't blame the language for it, I blame my own oversight or ignorance or whatever it may be.
&gt; document.getElementById("button1").onclick = "clickButton()"; Not really. You can either document.getElementById("button1").onclick = clickButton; or better, as someone already suggested, use `addEventListener` document.getElementById("button1").addEventListener('click', clickButton);
I figured it out. I'm used to using "Use Subreddit Style", and that's a RES feature as well. I didn't even notice the theme button had been added as well. And yeah. Lots of gold. Teehee.
What are the language extras?
Outside of ES7 features, the only "extras" that don't fall under the umbrella of static type checking are class access modifiers, iirc.
this is tits.. too bad I can't use it in older browsers where performance is more likely to be an issue.
Interfaces, meta data, different class syntax, types with multiple types, I don’t know how to call it... Type x = number | string | date This means X can be of any of these types. Also, it can be compiled to multiple versions of js. That’s what I can think right now, but there is more of course.
So using Linter can help avoid function hoisting - Airbnb style guide does this well. I fail to see how static typing avoids this.
This depends heavily on your definition of "OOP", because there are a number that float around. (Just as there are competing definitions of "functional programming") I prefer William Cook's definition, which he gives in [On Understanding Data Abstraction, Revisited](https://pdfs.semanticscholar.org/5420/aaaa0b42aacda3b37f652fc2ce682515e0db.pdf), and in [this blog post](http://wcook.blogspot.com/2012/07/proposal-for-simplified-modern.html?m=1), which is completely compatible with many forms of functional programming. The real problem with OOP is that people working in OO languages overwhelmingly tend to write imperative code with classes sprinkled in, and think that they're doing OO when they really aren't. This isn't a problem with OO in theory, though, just with rampant poor education on what it is. (And I say this as a diehard functional programmer.)
And enums, but those are basically syntactic sugar over normal object literals.
I ended up changing my websocket game to socket.io. I dont have to change anything in the game only the connection part so it's a quik fix.
If you choose either and stick with it, you'll get used to it. Personally I prefer arrow functions for everything, but unless you're using "this" context it really doesn't matter. 
Typescipt also provides benefits to environments with `intellisense`. 
Strict types alone are a _very_ big reason to still use TS. At most, ESLint alone can catch typoes if you're accessing a variable from a local scope, which is extremely limited. When you use TS, it'll tell you if you're using any object, any variable, any function, method, or anything else, in an unintended way, like if you're passing a string to a function expecting a number. Alongside that, auto complete tells you at a glance all of the things you can do with any object or value, all of its expected usages, and so on, drastically lowering the need to look at the documentation. Refactors are a lot easier, too. For example, if you change the signature of a function, you don't have to scrawl all over your project to find all of the usages of that function. TS can tell you wherever it's being used, and whether or not it's being used wrongly. As a bonus, you can also perform easy project-wide renames of variables, classes, and even methods and properties. This is possible because TS knows the type of every object used, can find each instance of that object with a matching type, and perform the rename accordingly. Overall, it gives you a lot more confidence that the data flowing through your program is being used in a predictable, correct way. To the point that I don't ever want to start a decently-sized project without TS again.
Well....is this automated or ?Like...I really couldnt understand how it really works...
You misunderstood my comment, I think. Linting and ES6 don't provide static type checking. They provide other things, of course, like your example.
Hi /u/penialman, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
&gt;especially given that disabling styling is a gold level feature. No it's not. It's in your preferences. https://i.imgur.com/sMfq1en.png Then RES gives you a button to disable it per sub.
Hi /u/luisvinicius167, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Calmer than you are.
&gt; Is Typescript still worth using? Like never before.
Alright. I get the point. You're a butthurt little 'tard who needs to get the last word in for the sake of his ego. I'll leave.
^^Calmer ^^than ^^you ^^are.
My mistake! I read incorrectly. My apologies.
Afaik those are called union types. 
When you past it now, it will ask if you want to add imports with `Ctrl + C`
Oh! I tought it was different from F#, but since it’s the same concept it makes sense that it’s called the same. ;)
&gt; Strict types is the big one. Non-nullable types, too.
It's a tool, like any other. There are good and poor uses for ternaries, for loops, and pretty much any other construct.
First of all, python-like decorators may soon make it into the javascript spec, but for the time being you can get the syntax and behavior using tools like babel or TypeScript (complete with the @decorator syntax that python has) Secondly, I think I would do something like this instead: function singleton(ctor) { let instance; return function(...params) { return instance || (instance = new ctor(...params)); } } function Test(x) { this.x = x; } const TestSingleton = singleton(Test); const first = new TestSingleton(23); const second = new TestSingleton(42); // first === second Oh and JavaScript has actual syntax for classes now, so this could also be used like this: class Test { constructor(x) { this.x = x; } } const TestSingleton = singleton(Test); const first = new TestSingleton(23); const second = new TestSingleton(42); // first === second
Well TIL. Thanks, that's really useful.
Here is my try: https://i.imgur.com/FcQvfXd.png To summarize: - I always prefer to read light text on dark background - it's relief for the eyes. - The most important in a subreddit for me is the post titles, number of comments and number of votes - that's why they are in different color. - Removed bold style from each title. When repetitive text with font-weight: bold, it doesn't look good.
Thanks for the link. They are heavy and it might take some time for me to fully get it. Personally I'm liking two aspects of FP : a) I don't have to get into the gut of the code to make changes b) I don't have to name variables if function is "pointfree". This is not to say that I need to go a great length to try to make function pointfree. If it comes naturally then it's a bonus.
Awesome! So CKEditor 5 is even more plugin-based than CKEditor 4. I am ready to fully embrace that methodology. I'm excited to continue with learning...the docs look great. I'll let you guys know if I have any questions/comments (what's the best way to contact you?) 
To answer your question on which one seems clearer, I'd say the first one. After that, it's a matter of preference in most cases. 
Well this is awesome... and I can’t believe I didn’t know about the Beacon API either!
https://i.imgur.com/OD1GV.png
Avoiding classes in JavaScript is also potentially a good thing
Heres how I'd look at it. Flow is a static type checker. Typescript is an entire type system on top of JS, that does static type checking. The type checking is just a part of that system.
I smell a strawman. The only reason the R version didn't have to reach into the guts of a function is because they didn't define an `activeUsers` function at all like they did in the non-R version. Instead they wrote it inline, for one-time use. If they had defined the `activeUsers` function, then they would have had to reach into its guts just the same as the non-R version. Likewise, if the non-R version had never bothered to wrap the logic in a function, if they just defined it all inline for one-time use like they did in the R version, then they too would not have had to reach into the guts of any function.
If you don't have local state then 'this' becomes useless
Yet Elixir developers have built Agent to handle persistent state, something that’s built into OOP.
Fp languages can do everything non fp languages can do, although maybe less efficiently also oop and fp aren't opposites
You're welcome. They're definitely academic, but the TLDR of them is that the essence of OO isn't about inheritance or mutable state, but rather about writing to interfaces, and never, ever peering at the actual implementation of an abstraction. When this rule is applied to operations on data structures, it leads to data being encoded as the composition of functions, which lets you trade the ability to easily add operations to data structures for the ability to easily add new instances of these structures. There's definitely a lot to like about FP, the composability of solutions and the enhanced ease of understanding a program without actually running it are my favorites.
Specific example. Let's pretend this is real world code for a moment. That means we don't get the active users in just one place. We have to get the active users in many places in our code. var result = active(users); // ... var result = active(users); // ... var result = active(users); // ... var result = active(users); // ... var result = active(users); // ... var result = active(users); // ... But then, one day, the business requirements or the data changes. How do we handle that? The way this article wants to handle that is to compose `active` with another filtering function. So now our real world code becomes this: var result = R.pipe(active, rejectEmptyNames)(users); // ... var result = R.pipe(active, rejectEmptyNames)(users); // ... var result = R.pipe(active, rejectEmptyNames)(users); // ... var result = R.pipe(active, rejectEmptyNames)(users); // ... var result = active(users); // ... var result = R.pipe(active, rejectEmptyNames)(users); // ... Oops. Did I forget one? That god that sort of mistake never happens in real life. :-p The better solution here would have been to change the `active` function itself. It's purpose, after all, is to return the active users, and it's not doing that anymore. But... if we change the `active` function, then we're ultimately doing the same thing the non-R version had done... *change* a function to add logic. /u/neerajdotname
&gt; I don't understand the shift away from design, but I think it's partly so some people can feel like a more serious programmer. In my experience, I think the shift is more due to the rise of ui frameworks and most of the graphic designers I've worked with are fairly proficient at HTML/CSS. I like this trend as CSS and layout in general are my least favorite part of modern web development.
I tried using Incognito and there's still a huge space there: https://imgur.com/a/6dcMc The footer has a huge margin-top and padding. Also, the text below is unreadable: https://imgur.com/a/fVPLO
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/LsR7h1i.png** **https://i.imgur.com/uP2aKQF.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20do0j2yi) 
This was only for easing the ISO interaction. Literally no one else needs to care about ECMA-414. The supposed motivations in this article are not correct in my understanding.
Wouldn't the "real life" code look like this instead? // before export const isStatusActive = R.propSatisfies(R.equals("Active"), 'status'); export const active = R.filter(isStatusActive); // after export const isStatusActive = R.propSatisfies(R.equals("Active"), 'status'); export const withActiveStatus = R.filter(isStatusActive); export const active = R.pipe(withActiveStatus, rejectEmptyNames); 
Yes it could. But 1) the article didn't, and 2) if it did, then the article's whole point -- that composing new functions is good and changing existing functions is bad -- is undermined.
The direct (i.e. mechanically-translatable) alternative to using `this` is to create a closure for each method on each object you create, *or* to pass an additional parameter to each method you call. You could (obviously) use one approach or the other for any situation where JS OO is appropriate. In that sense, no, there's no good reason to use `this`. Of course, that logic invalidates basically any language construct that wasn't in K&amp;R C.
I think what that shows is that `activeUsers` is not well defined if, as you say, we're changing its implementation to satisfy some businesss logic. In fact, because that is a monolithic function, we have no formal specifications to write tests against. This is a code smell. If we determine that it's ok to willy-nilly change the semantics of `activeUsers`, then we should accept that it's also ok to willy-nilly change the semantics of `active`, because both are ill-defined APIs that are required to change over time based on business logic. However, with the FP approach, we can identify that there is a well-specified unit that represents `R.filter(isStatusActive)`, and that can be robustly unit-tested regardless of what business logic is thrown at us.
K&amp;R C?
&gt; Alongside that, auto complete tells you at a glance all of the things you can do with any object or value, all of its expected usages, and so on, drastically lowering the need to look at the documentation. Is there a good reason why JavaScript doesn't have tab complete support? I feel like a lot of highly dynamic languages do... and it's always been a pain point in learning. 
Not a Mac user but I always thought the touch bar was a stupid idea. Why not just make an Api to link an iphone and display companion interfaces there.
Yes, by extracting the expression status === 'active' into its own function, then you can unit test just that expression. But that's waaaay overkill. Do you plan to unit test literally every individual expression? Plus it still doesn't verify that activeUsers works. You did a lot of extra work for not a lot of benefit.
heroku with auto deploy from github is super quick to set up 
K&amp;R C, roughly, is the C dialect of the UNIX kernel as outlined by Kernighan and Ritchie in [The C Programming Language](https://en.wikipedia.org/wiki/The_C_Programming_Language). I was being cute in saying that basically every construct used in JavaScript in 2017 can be trivially restated in terms of constructs used in the 70's. In reality, these constructs really date back to ALGOL from the 50's-60's, so I was being inaccurate. The larger point is that 99% of what programmers argue about in 2017 is syntax sugar.
For types, yes it is still worth using. Eslint will let you know if there are obvious problems with your code, it can't let you know if you are calling a function expecting an options object and what those options are. If you need to support older browsers as well the typescript transpile can potentially take care of that for you.
As much as I love ramda, it has nothing on arrow functions. ``` const activeUsers = users =&gt; users.filter(user =&gt; user.name &amp;&amp; user.status === 'Active' ```
That's not as much JS' fault as it is the fault of the editor, and VSCode actually _does_ have good tab completion support for JS, as it uses the TypeScript server in the background. There are some cases where it won't be able to tell what the object's signature is, though, and those are the cases where tab completion will fail. Here's an example: // it can autocomplete the properties on this const obj = { a: 1, b: 2, } // but in this case, in isolation, "obj" could literally be anything. // it would actually be worse if TS made a wrong guess and gave autocomplete // for the wrong type, which is why it doesn't work here function doSomethingWith(obj) {}
Like most garbage titles from sites that only write content to gather clicks, this API gives you data on timing. It does NOT help increase performance on its own. That's for you to work out.
Sure, it's overkill if you're only using that simple expression once ever. But if many functions use that expression, and the schema changes to one where status is a function of 2 other properties, then you'll probably want to centralize that logic and test it, rather than copying and pasting across several business logic functions and hoping you didn't make a mistake. Also, just because something is a unit doesn't mean you have to test it. For example, `id =&gt; id` is a well established unit, but nobody is going to write a test suite for that, because that would be silly. If your unit is so small that it obviously does what you expect, there's no need to waste time testing it. You only test a unit if doing so increases confidence, otherwise there's no point. &gt; it still doesn't verify that activeUsers works. That's irrelevant. Assuming you wrote two tests for `activeUsers` and it's understood that you'll have to rewrite those two tests when the business guy changes the requirements next week, you'd also rewrite the same two tests for `active` in the exact same way. The difference with having more units is, again, when the implementation of the units themselves change. You want to be confident that if the definition of what constitutes an active status changes, then `activeUsers` (and everything else that depends on the concept of active status) still works.
Hey mate I have been looking through Babel and TypeScript lately. Which one is more promising to learn? Which one is more future proof? I am Python and was C++ and Java developer. So strong OOP in TS always preferable. I tried TS it was okay, but it seems less people use it than before. Have not yet to try Babel, but it looks complicated (but convenient) in my opinion. So for now I just stuck to use JavaScript that I have known for a while. What worried me is everything in JS ecosystem deprecated really quick. You have a ton of options to do one thing. So, I want to make sure what I learn will suffice for the next 10 years.
It is useful for the type checking side of it not for its superset that is diverging from Ecmascript slowly. With the advent of Babel 7 and the ability of cleaning up TS annotations, you can finally use TS like Flow for type checking only. That means you get the best of all worlds: great types, great IDE support for types, Eslint power (instead of lesser Tslint), Babel plugins like smart polyfliling and of course ESx features, a lot of which are not supported in stock TS.
Another option is realizing that JS has objects. So building up a constructor and then limiting it so that it can't build more than 1 object _may_ be avoided by simply creating the one object. This is not _"less OOP-y"_ than using classes. As for double-ton or n-ton... Well, I've never seen any problem that is solved by needing exactly 2 instances of a class, so I don't think double-ton is even a concept worth considering. For n, well, that's a pool and the problem there is that usually you want other properties to manage the pool other than limiting the number. You want to manage the instances so that you know which ones are active or free, for example. So I don't think your implementation (which, once N is reached always returns the last one, rather arbitrarily) would be of much help.
I use n-ton for bullet. E.g. how many bullet can be available in game scene at certain time.
Well, ok, that might be a use case, but I don't know, returning the last one instantiated seems pretty arbitrary to me.
That's true, idk what to return actually. Perhaps optional parameter to return n-th element....
Heroku is definitely the way to go. 1min set up. Auto-deploy from GitHub push and a clean, easy to use interface makes it great (and a free tier) for a simple in-development or small-scale app. They also offer Heroku Postgres (with a free tier). You can then scale up reasonably cheap once you go public and need a little more performance or database capacity. You can add your SSL certs very easily through the CLI and I've had no trouble using websockets.
No, it just provides you with data to leverage for improvement.
Nah, it’s a good title. Any reader that would click an article about improving paint timing WITH AN API, should know what an API is. It isn’t some magical library or plugin that is going to be directly implemented in your application to improve performance. 
Its owned by oracle
I would argue that apart from growing the type system, we've avoided diverging from ECMAScript over the last few years. If you have any feedback on where that's not true, feel free to PM me on that.
Looks interesting. Working on Vue support?
Check out /r/learnjavascript
Yes indeed, Preact and Vue support coming next week!
Just look at the code on the page you linked.
is there such a Library? 
Well as of now this _is_ how Javascript works, and it is much more familiar to anyone coming to Javascript from elsewhere. There is a lot more JavaScript to be written than has previously been written, things change and we adapt. I don't know why we'd want to fight it? 
Can you explain why? Genuinely wondering 
I tried Falcor for alternative GraphQL. Muate in Falcor you could use set or call. But Falcor clearly too hard to use at least for me. So I dev a solution for myself. It more GraphQL lite than Falcor https://codeburst.io/what-is-nextql-5ca4193795ea
It does exactly what you tell it to. Logs the value of 'i'. At the end of the loop it should be 5, since that's your break condition. You've assigned the same anonymous function to 5 places on the array, so it's expected that you get the same result.
This might help you understand what is happening: var result = []; for (var i = 0; i &lt; 5; i++) { result[i] = function () { console.log(i); }; } i++; result[0](); // 6, expected 0 result[1](); // 6, expected 1 result[2](); // 6, expected 2 result[3](); // 6, expected 3 result[4](); // 6, expected 4 Basically all functions refer to the same variable, and the for loop doesn't create a closure. You can create a closure manually, like so, where a separate variable "j" is created on each iteration, and captured by the closure. for (var i = 0; i &lt; 5; i++) { (function() { var j = i; result[i] = function () { console.log(j); }; }()); } It would appear, that a for loop which uses `let` works differently from a for loop using `var`, and it generates a new variable on each iteration. I'm not familiar with the specifics, but this would be my guess, given it works. 
&gt; You've assigned the same anonymous function to 5 places on the array, You are wrong: console.log(result[0] === result[1]); // false 
Heroku, i love it
That is true, because functions are passed along as reference, and therefore even though they're functionally the same, they will be allocated in memory separately. What I meant by that is that they do the exact same thing.
Yes, this is exactly why we have `let` in ES6+
Ah! It makes sense that it would be an editor issue rather than a language issue... Do you know if VS code can do tab completion on plain JS libraries like D3.js? I tried to set it up once... but couldn't get it to work.
I'm not the best at explaining things but this guy compiled some good information. https://github.com/joshburgess/not-awesome-es6-classes/blob/master/README.md 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [joshburgess/not-awesome-es6-classes/.../**README.md** (master → c1f02bf)](https://github.com/joshburgess/not-awesome-es6-classes/blob/c1f02bfbd01afd9cea7cd37e5b1c1f433eae925a/README.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply do15rug.)^.
That would mean that the code is served remotely. i.e. the protocol used is either `https` or `http`, instead of `local`. So, yes. It should work.
Heroku is what you are looking for. They are great for dumb easy deployment. 
Simply use `let` instead of `var` in the for loop. The `i` referenced in the function assigned to `results[i]` would be the final result of `i` outside of the loop. `let` is block-scoped while `var` is function scoped. Block-scope means ‘this variable is only valid in this set of brackets’ while function scope means that it can be referenced anywhere in the function. For cleaner, modern code I recommend always using `let` and `const` rather than `var`.
https://imgur.com/a/0W988 Finished creating a project management system for our developers. We have a pretty crazy process with lots of overhead so I wanted a system to help track the progress of each of our sites as well as double as a checklist. You just input your start/end dates, and it sets events for you on when tasks/meetings should happen. Users, project types, custom timelines, sections, questions, user roles, assigning questions to roles, etc. are all editable within the system. Built with PHP, MySQL &amp; jQuery
This looks pretty cool, thanks for the gif at the start which shows exactly what you're making, too many articles rely on a vague headline! 
How about this: https://jsfiddle.net/8xo6xamf/2/
The object might have a reference to itself somewhere. In that case this error pops up usually.
you done a very good job
Somewhat VS Code has won my internal editor battle - every x months I had to find something new as I was never fully satisfied with existing solutions. Since a year or so, @code has proven to be a great solution, and works really well even on a 7 years old machine, where other editors or IDEs start be quite slow. I've used it for many different languages and every time I switch context I still have the familiar interface following me with dedicated tools and debuggers. Love it!
&gt;My aim is not to "solve" the above code - I can do that on my own! It's just an example - I really just want to know how a for loop is handled? What is declared first, what is executed, etc. be careful with these kinds of trains of thought - you think that the compiler is acting in a way that is confusing, but in fact your code isn't doing what you think it is. you know that `let` will fix the issue, but it seems like you're not 100% on why it fixes the issue. function () { console.log(i); }; uses the most recent value of `i` because `i` is available to the anonymous function as a closure. you need a way to capture the value of `i` on each iteration of the loop. for (var i = 0; i &lt; 5; i++) { var builder = function(j) { return function () { console.log(j); }; }; result[i] = builder(i); } ultimately this is a problem of hoisting and scope. adding another scope around this loop solves the problem. `let`/`const` or a function introduce this scope. by the way, this statement: &gt;I get that result will first be declared, as will ‘i’ in the global scope. this isn't necessarily true. `i` will be hoisted to the nearest scope that contains this code. if it's a function (or a block with `let`/`const` in es6) it will be that, not the global scope. 
http://www.spotifight.me/ Source at https://github.com/joncass/spotifight It starts with a pool of 16 songs, and presents you with 1-on-1 matchups. You pick a winner each time and, it narrows you down tournament-style to a single song.
Ah, that also explains why webstorm worked fine! Thanks for the insightful answer.
Ok, that explains it perfectly. Thanks!
I think you don't know js is best for beginners then move onto eloquent
It's not just Google, but since the famous "browser wars" (IE vs Netscape), all browsers compete with each other. They can compete on features, or on speed and overall usability of the platform. Google is doing just that (not just Google but also Apple with Safari, and Mozilla with Firefox), and forces everyone to follow. And this is a benefit for anyone, developers and consumers. More than just speed, I really hope Apple catches up with service workers and progressive web apps which are a great step for a better mobile web.
&gt; ...but I'm too dumb to know how to use it No, you're inexperienced. Don't call yourself dumb.
10 years is a long time, but I would say Babel is more future proof because it is designed specifically to allow you to write the JS of the future, today. All it does is compile new JS features into their old JS equivalents. So in 10 years you could theoretically just remove the Babel compiler and everything should just work the same. That being said I think Typescript is better because of the type safety, and it offers a lot of the same features as Babel.
That looks fantastic!
I disagree. I would say it's the other way around.
Chess-vs.herokuapp.com Still a work in progress but Im learning a lot about node and websockets in the mean time ! 
Second argument to window.open is a string representing the window name to reuse. If the named window doesn't exist, a new one will be created with the specified URL; if it does, the URL loaded in it will be updated
Without trying to sound cliche - just pick an interesting/cool small project and re-create it in vanilla JavaScript. Google your way forward when you hit problems. Also JavaScript isn't the same as the DOM but they go hand in hand so I'd suggest learning them together. Because JavaScript by itself isn't very practical or interesting. In other words, make some small web project of some kind or doodle - e.g. make a blank page with a picture moving indefinitely from left to right[1]. [1] https://jsbin.com/makiyayugo/edit?html,js,output
Thank you, that's exactly what I needed. Seems to work perfectly now!
yup eloquent JavaScript is so much better all round beginner or advanced. you don't know js is just terrible advice. 
functional equivalence vs. strict equivalence, I got what you meant. It didn't seem "wrong" to me.
`i` is defined at the top of your scope. every function you create in the loop references the same `i`. when you call those function and log `i`, they all return 5 because that's what the value of `i` is after running the loop.
Whatever you like is probably going to be better since it will motivate you to learn. Ultimately no one book is going to impart all knowledge to you, whatever helps you clear hurdles and stay interested is probably best. However I'd like to put a plug in for secrets of the javascript ninja as a good intermediate level book.
In my opinion, here's the best way to get a very solid understanding of JavaScript (free) with discipline. 1. **Eloquent JavaScript** (you should skip the Node part) 2. **You Don't Know JS** (this &amp; object prototypes, async &amp; performance, es6 &amp; beyond) 3. Branch out into whatever you are interested in with ease. Learn the concepts. Understand what is happening by fiddling around with the code. Don't read information that you know or get right away. The only way to get better is by writing more code, do projects and exercises. If you don't understand a concept, a technical word or get bored -&gt; watch a video of it, read a blog or do some small project with whatever you know. 
has nothing to do with asnc thats chrome extension requirements which prevent certain actions. you need to read up on CSP for chrome extensions
So you're telling us about two seperate problems: 1. Repetition. You can use a language like php and sort all your headers and footers and side bars into their own files and then include them in your code like include('header.php'). 2. Page reloading on clicks. This is what you need Ajax for, im on my phone so don't want to type up examples but a quick Google on the subject should get you going, I first learned on w3schools learning Ajax, some slate that Website but it has its uses. 
Not a library, but maybe Closure compiler?
I've already gone through CodeAcademy and w3 tutorials. But if you know anything else that is helpful, please send my way!
Eloquent JS is a turd in a basket. 
Read the API documentation. I think if you start there and then try some pluralsight/codewhatevers or something - you're good to go. Data types/functions/objects/flow control. 
**exactly** this Thank you so much you saved me a ton of time and effort... Side note: If you're ever bored, I ended up applying your method to my navigation *(uses &lt;a&gt; instead of UL)* and got everything working properly in JSFiddle. However -- when I copy and paste the exact code from JSF to my website, the "active" element doesn't work *(which is to say the background goes away as soon as I mouseoff the link)* Any ideas? [here](https://jsfiddle.net/8xo6xamf/7/) is a link to my code-salad if you ever feel like helping me out, but I certainly appreciate everything you've done already :) ty!
So pjax is pushState + ajax. We need to start with defining what these things are. [Ajax](https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started) is (A)synchronous (J)avascript (A)nd (X)ML. It is a technique used by web developers to fetch XML documents using [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) and to insert part or all of that document into the current web page without refreshing the page. You said you have several html pages that differ only in text, that's great. That means you could fetch those pages using XMLHttpRequest (or the newer fetch API), grab the contents of those documents, and swap out the current contents of your web page with the contents of those documents. The problem with this though is that the user expects when they hit the back button, that their browser goes back to the last page they were looking at. Since we haven't gone to a new URL, hitting the back button would not have this behavior. That brings us to the next part. [pushState](https://developer.mozilla.org/en-US/docs/Web/API/History_API) is an API which allows developers to manipulate the browser history by adding or removing items from it. Essentially this is our solution to the problem above, we can insert a new entry into the browser's history when we load some XML from the server. And we can also listen for navigation events (like the back button) and write code to handle what should happens on those events. This is just a simple intro to the topic. If you're really not sure what you're doing with these things, it might be best to wait a bit and come back to the topic once you've learned a bit more. There's nothing wrong with having links to your different pages in a menu. 
I'm aware of CSP in the context of chrome extensions, that's not what my question is about. I'm trying to puzzle out how you overcome the requirement for callback functions without the use of eval and equivalents.
Check out the great free course by Gordon Zhu at https://watchandcode.com
Did you add a *&lt;script&gt;* tag with jQuery? Edit: In case you haven't yet, here's the tag you should add to your HTML: &lt;script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=" crossorigin="anonymous"&gt;&lt;/script&gt; This is a *&lt;script&gt;* tag that features the minified version of jQuery Core 3.2.1 (plus some other attributes that are recommended). In case you're wondering why you didn't have to add this tag to JSFiddle, that's because in JSFiddle there's a special section for those kind of resources: *External Resources*. You can find it on the left side there.
Are you perhaps passing a string (or other non-function) instead of a function as the callback? setTimeout will try to eval any non-functions it receives, and this seems to be prohibited by policy in an extension context
So instead of copy-pasting your html to a number of files you'll then manually adjust to get your different pages, you create a layout of sorts and have parts of it populated from outside?
If you're the type of person who enjoys videos then "JavaScript:understanding the weird parts" does a solid job at teaching you how JavaScript works from the inside out. It isn't telling you how to program using JavaScript. It's showing you how JavaScript works, I found it to be the most informative, and frankly, easiest to digest video series on JS. Wes Bos does a a few good video series too if you want to get into that. But he doesn't like to get into detail of things too much.
10 years is not long when everything ever in JavaScript deprecated every months. Thanks for your input though.
The object is google's recaptcha verifier, how do I even fix that?
Eloquent JavaScript is how I learned. Really great book and I occasionally go back to it when I’ve been away from programming a while. I’m not a professional, but I’ve built a couple web and mobile apps in react. I like Eloquent JavaScript because it really helps you understand concepts in a sensible manner, and it doesn’t just teach you good style, it teaches you the reasons why good style is good programming as well. 
https://github.com/getify/You-Dont-Know-JS
Care to back up your wisdom?
Thank you!
Check out https://www.educative.io/collection/5679346740101120/5720605454237696?authorName=Arnav%20Aggarwal. It’s a free course, good for learning basics.
You buck that trend buddy!
Yep, that's the gist of it (I think). I'm not sure I follow you 100%, but I think you've got the idea.
Shameless plug - I am working on a JavaScript guide aimed at beginners, at [writesoftware.org](https://www.writesoftware.org) if you want to check it out - introduces the new ES2015-2017 features, and some modern tooling. 
Eloquent JavaScript is interesting, very interesting. But I think no beginner can learn to code practical javascript from that book, at least for me. A beginner should know two things, 1 is the details of the language. 2 is the practical usage. But the most you can learn from EJ is thought/ idea. The book does not mention the details of JS nor the typical usage of js. Yeah, code a family tree or a board game is fun, and you learn programming logic from it. But, some common web components are more helpful for JS beginner. After all, this is not a CS book. For me, Speaking JS introduces the details of JS, and open source code teach me the practical usage, hacking bootstrap js code and jQuery plugins really helps. You don't know js I think it steps far a little, for example, it uses compiler knowledge to explain what is closure, that is illuminating surely. But after closing the book, you still don't know how to use closure effectively in your own code. Because even you know the ingredient of bread, you might still don't know how to make shit effectively from it, and the right way is to view other people' code, watch how they make the shit brilliantly. Then, you will be one of the good shit makers.
Great step forward, still a lot to improve though when traps are not set. Property access speed without a hook is still roughly 2% of direct property access on a object. Hopefully we can see continued work on improving Proxy performance. I'd still be very cautious of using it for anything performance critical.
You're a turd in a basket. (Fun fact: my argument is backed with the same amount of reasoning as yours)
Most of this seems like pretty uncontentious good advice. I think the sections on conditionals hide some tradeoffs, though. Negative conditionals are not that hard to read, and oftentimes inverting a conditional can help you reduce nesting, which I think has much more of an impact on readability. And using inheritance to avoid conditional logic introduces some very large tradeoffs: inheritance makes certain refactorings much more difficult, and requires that great care be put into constructing a proper domain model. Personally I avoid it altogether, and find that using Flow (which checks that every possible instance of a union type is handled in a conditional) takes the pain out of conditionals.
Fine, down vote.
Hey there, that's exactly it. I'll try passing a function as an argument instead. If that works I'll be really confused (inline functions &gt; eval).
If you say so.
You can absolutely use node to run .js files as a script
I would suggest you to read the book “You don’t know JS - this &amp; Object Prototypes” by Kyle Simpson, despite it is not strictly what you want it contains a lot of insight about OO programming in Javascript and also covers ES6 Classes
If you've already got a copy of _Automate the Boring Stuff with Python_, re-implementing some of its exercises in JavaScript would make great practice.
Isn't npm like, entirely constructed with node? NPM scripts === node.js scripts?
.........Okay, I guess I need to delete this username and create a new account to deal with the shame. I can't believe I hadn't thought of that in the past year lmao
I have that on order, actually. Glad to know it is a good choice. 
If it's loaded in through a `&lt;script&gt;` tag, it won't work, because VSC can't infer global variables. It does work if you use `require()` or `import` statements, and import the d3 library manually that way. Then you can bundle your code with a tool like webpack so it can load and use modules in the browser.
Now I know the true length of my shit!
So... learn Python after I get a decent grasp of JavaScript? (since you never learn a language, programming or otherwise) 
Negative conditionals are probably minor things. However, I saw a lot of comments on Quora, in which is negative conditional consider as beginner-like. :) I fully agree on Union type with you but if I am not mistaken they are not part of ECMA standards. Oduvan probably tried to show a better alternative to switch case that could be quite error-prone. 
NPM scripts are a bit different, they're shell scripts with the local `node_modules/.bin` added to the path. But you can add the node shebang (`#!/usr/bin/env node`) to a JS file and it'll run as a script
What's the point in opening five different search pages sequentially in the same tab?
I wouldn't say it's terrible advice. I tried a lot of different resources and ydkjs was the most beneficial imo. I found reading one of the chapters then taking the examples and playing around with them was a great way to learn. 
begin with python, it's a better first language, learn js after, use js for web, use python for scripting automation etc
I've just released my first Electron App on the Mac AppStore. It's called [Fenêtre](https://fenêt.re). In short, it lets you load a webpage/picture/video/file in a floating window that will always stay on top. So if you’re working in your editor full screen, you can keep this floating window on top. And keep most of your screen’s real estate. Even if you need to use something behind the window, you can, thanks to the [click/see-through feature](https://imgur.com/YBioG3Y). ^^I'm ^^kind ^^of ^^proud ^^of ^^this ^^one ^^;) Here are some more [pictures/videos](https://imgur.com/a/12gy1) You can get the [Lite version](https://itunes.apple.com/us/app/fen%C3%AAtre-lite/id1288451627), and the [Pro version](https://itunes.apple.com/us/app/fen%C3%AAtre/id1286743037) directly on the App Store. If you have issue typing the url https://fenêt.re because of the 'ê', you can use https://getfenet.re as well ! The app is on [Product Hunt](https://www.producthunt.com/posts/fenetre) and [Hacker News](https://news.ycombinator.com/item?id=15410725). I'm already pushing a new version that will fix the following stuffs : * fix: bug when accessing destroyed windows * fix: update firefox extension link in settings * fix(about): better logo animation * fix(onboarding): do not steal focus with onboarding popup * fix(parser): keep the port of the url * fix(resize): avoid any errors with NaN * fix(twitch): remove mobile view for Twitch * fix(web): remove useragent attribute if null * feat(free): make 'Go Pro' popup non perpetual, come once, and go forever
Press button once, open 5 tab... OP is asking if it's possible when he presses the button again to re-use those tabs instead of getting 5 more.
Ahhhh. Me done a stupid. I apologising. It are long day. 😔
Why on Earth would you want to do that?
At work we would use it to update version numbers on files or other tasks like that 
Yeah, it's not like Javascript's one of the most popular languages in the world right now or anything /s
All depends on what you want to do, really. Given enough time I'd learn both, but that's just me.
Learn by doing. Automate boring stuff. Wanna learn lots of JS. win, win, win?
Not for system administration.
If you've got the Delorean, I'm game, but I've already learned JavaScript (at least the fundamentals, DOM, Events, express and node) So I'll have to loop back to Python once I finish this journey
I guess. Seems like it would be a better use of time to learn JS for practical uses.
That is assuming that I'm not using it for web development.
Having come to Node from the Python world there's nothing I did with Python before that I still use Python for. I haven't touched it in a long time.
For many people, javascript is only one F12 away.
Ok thanks scoots ⚠️ Hey everyone sorry but FYI this thread is now complete our IT man says NO 
You are overwriting the value of `innerHTML` with each iteration. If you want the append to the value rather than overwrite it you'd need something like this. window.onload = function () { var demo = document.getElementById("demo"); for (var i = 1; i &lt; 99; i++) { if (i &gt; 1) { demo.innerHTML = demo.innerHTML + "-" + i; } else { demo.innerHTML = i.toString(); } } }
not familiar with that book, what is it? 
cool. thanks. 
I've done a couple of automation scripts in JS where a library existed there that didn't in python. The biggest difference is the async by default nature of Node, which was a bit tricky to get my head around - with async/await that is likely less of an issue now though.
why did you ask then
I found "A Smarter Way" to be a valuable resource as a beginner to programming (not just JS). A lot of it was brainless and tedious, but I think that's exactly what I needed: doing the online exercises (all of them) put the syntax of the language into muscle memory. So when it came time to do actual problem solving, I could spend brainpower thinking about the actual problem, not JavaScript syntax. I think that "Learn Python the Hard Way" goes for a pretty similar approach.
&gt; after running the loop That's the bit I don't get! How does JS handle loops? Like... what does each iteration (say in this example) *do* exactly? I get the why - I get that the reason this for loop doesn't work as intended is because the function that runs gets the end value of 'i'. What I don't get is *how*. When they say that "the inner function gets the exit value of "i" once the loop has already finished all of its iterations - why does it do this? Are you saying that the for loop basically *loops* first, and then executes whatever is inside the curly braces? How does this work? 
Because we both misunderstood the other. I was trying to say anything other than "I know JavaScript" because that just reeks of newbieness when I don't actually know it that well. Should have made it clear that I was over 75% through all tutorials. Will definitely recommend to my little cousin that he learn Python first
Hi /u/hanpari, The domain `checkio.org` is now banned for plagiarism. https://github.com/ryanmcdermott/clean-code-javascript Please don't steal other people's work.
&gt; Basically all functions refer to the same variable Why? Why and how? I read on another resource that the reason this happens is because the inner function has access to the exit value of "i", because that's the result "after the loop has finished its iterations". But, what does this mean? That JS makes 5 iterations first, and then executes whatever is in those curly braces second? How do for loops run, in the back end? 
Ive been checking out node-red for some "just make a thing" ... Its not for everyone, but its a visual programming environment that can make a number of tasks pretty quick to perform. I'd say it does not encompass all problem well, and I'm not sure if there's a "export to standalone" button... Which would be cool. Lots of great modules with it. https://github.com/prozacgod/pzc-node-red I make a bit of a "everything and the kitchen sink" setup in that repo, makes it simple to experiment... There's no original code in there or innovative input, just links a bunch of modules and has a run script
Thanks for replying man! I get that - what I don't get is why it logs the exit value of 'i'. I don't get how loops basically... execute? I get that it's got a compilation phase and an execution phase - where does a for loop (or rather its iterations) fall into this? Does JS create 5 instances of what's between those curly braces first, and then in the second phase, it executes them? 
You need to call the function after declaring it
And your sum variable is not global.
&gt; uses the most recent value of i because i is available to the anonymous function as a closure. you need a way to capture the value of i on each iteration of the loop. Why? If I just run this: for(var i=0; i&lt;3; i++){ console.log(i); } Wouldn't it capture and print the value of 'i' on each iteration? So the bigger question I have, I guess, is what exactly happens during each iteration of a for loop? 
Confession, I've been pressing ctrl-shift-i for years, and learned that everyone else on the planet just presses F12 only like...two days ago.
Hi /u/sitepen, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `sitepen.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [sitepen.com](/search?q=%28and+site%3A%27sitepen.com%27+author%3A%27sitepen%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|32|100%
the pattern of trying to hang the thread using a very large for loop is a bad idea. it's unreliable and means your code can't do anything else while the loop is happening. you should use the [`setInterval`](https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/timers#setInterval\(callback_ms\)) function, which is asynchronous. 
I just want a number to count up and show it in the html. 
I second this but would like to add this as a learning path I found particularly effective: 1. Codecademy JS course 2. Javascript: Understanding the weird parts 3. YDKJS 4. Eloquent Javascript 5. Something that serves as an intro to ES6.
www.javascript.info
even so, this is still a bad idea. the correct way is something like this: var num = 0; var demo = document.getElementById("demo"); setInterval(function(){ demo.innerHTML = num++; }, 1000); this won't chomp up the user's cpu, and the time between increments is much more reliable.
I learned it just now... Holy shit.
unsupportive answer - google it supportive answer - [Automate the Boring Stuff](https://automatetheboringstuff.com/#toc) is a very popular and highly regarded *intro to python* text. Many of the exercises can actually be crossed over to other languages (such as js) which is a very clever idea as stated by /u/duncanbeevers.
I've been working on isomorphic^1 progressive^2 Antichess^3 PWA^4 Let me first roughly explain the terms used. 1. Isomorphic is referring to isomorphic web page rendering. SPA with support for server side rendering producing the same page both on client and server. 2. Progressive HTML rendering. Part of the HTML is sent to the client as soon as possible, and asynchronous data is sent in the same request latter. [Read this](http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/) for more information. 3. Antichess, Loosing chess, Suicide chess, Reverse chess... [More at Wikipedia](https://en.wikipedia.org/wiki/Losing_Chess) 4. Progressive web app. You can "install" it on Android phone. [More information](https://developers.google.com/web/progressive-web-apps/) Here's a [demo video](https://www.youtube.com/watch?v=jitqkoYXPVs) - Part of an Antichess game. One user is playing it from Android phone, and the other from Lynx terminal web browser.
Video linked by /u/bo88d: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [Antichess - lynx vs android](https://youtube.com/watch?v=jitqkoYXPVs)|bojan djurdjevic|2017-10-07|0:02:18|0+ (0%)|2 --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/bo88d ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=do1t5yf\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
Isn't the plagiarist a random user account, not someone officially affiliated with the website?
Here's a loose English translation of the code that may make it clearer. We iterate 5 times, incrementing i each time. Within each iteration we do the following- store a function in the array. Each function captures a reference to the i variable. Any changes made to the i variable after the function is created will be reflected in this "captured reference" (called a closure). Here's what that function will do *when called*- print the *current* value of i (current as of the time when you actually *call* the function, not current as of when the function is created). By the time we actually call any of the functions, i has been incremented all the way to 5, so that's the value referenced within the functions when they are called. Does that make sense? In general, if you don't understand how some code is working, a good approach is to see how clearly you can explain it in plain English- helps to illuminate where exactly the gaps are in your understanding.
Good question! I'll try to step through what's going on. So let's just step through an iteration. 1. during the *initialization* of the `for` statement (`var i = 0;`) the value of `i` is set to `0`. * Note that `i` is not local to the scope of the `for` statement, but is local to the scope that the `for` statement is contained in. So essentially here, `i`either becomes global, or if this code is running inside another function, then it is local to that function. 2. the value of the array `result` at index `i` is set to a new function which is created (and which will be created on each iteration). * the body of the function is a single expression which calls the function `console.log` with `i` as an argument. * it is important that you are simply declaring this function here, the body of the function is not evaluated. you could write anything you want here, e.g. `function () {console.log(some_variable_that_doesnt_exist)}` and it wouldn't throw a reference error because the compiler does not evaluate the body of the function when it is declared, but rather when that function is executed. 3. we reach the end of the code block 4. the *final expression* of the `for` statement (`i++`) is evaluated which sets the value of `i` to `0 + 1` or `1` 4. the *condition* of the `for` statement is evaluated (`i &lt; 5;`), since `i` is now `1`, and 1 is less than 5, then it returns `true` 5. the loop repeats while the condition is true, creating a new function each time. Now when we call these functions later on in the code. result[0](); // 5, expected 0 result[1](); // 5, expected 1 result[2](); // 5, expected 2 // ...etc. We're evaluating the body of the functions we created in our `for` statement. Since these all reference the same global variable `i`, and the value of `i` on the last iteration of the `for` statement was 5 (this was what caused it to terminate e.g. `5 &lt; 5 =&gt; false`), and since we have not changed the value of `i` after the loop, the value of `i` is still `5`. So when we call our functions which all consist of a single expression which calls the function `console.log`, with a single argument (`i`), we see the number `5` logged to the console. The following code would be equivalent. console.log(i); // 5 console.log(i); // 5 console.log(i); // 5 // ...etc. If you want to solve this, you can use `let` instead of `var`, which is block scoped rather than function scoped. So the value of `i` is not "overwritten" on each successive iteration. Or you could create a new function scope which preserves the value of `i` on each iteration. var result = []; function i_logger (i_in_a_new_scope) { return function () { console.log(i_in_a_new_scope); }; } for (var i = 0; i &lt; 5; i++) { result[i] = i_logger(i); } result[0](); // 0, expected 0 result[1](); // 1, expected 1 result[2](); // 2, expected 2 result[3](); // 3, expected 3 result[4](); // 4, expected 4 Hope this helps.
NodeJS is great for that kind of thing 
My first thought was: Service worker and HTTPS. By design, for security reasons, service workers don't work unless you have HTTPS, so that's an absolute requirement. This is great if you want a website that will accessible from any device that has internet for a short time. If you don't care about having it on the web, things get a *lot* easier. You can simply make a webpage with your code and just view it from the hard drive in your browser. No magic is needed here. So the first step would be to make your program and get it working. After that, if you can't make it do what you want offline, come back here for advice.
I used the information on http://processingjs.org/articles/jsQuickStart.html Modern browsers don't load local files like they would from the web for security reasons. That's why including your code in an external file like this only works on the internet: &lt;script src="processing-1.3.6.min.js"&gt;&lt;/script&gt; &lt;canvas data-processing-sources="hello-web.pde"&gt;&lt;/canvas&gt; You can write your code inline though! They lined out how here: http://processingjs.org/articles/jsQuickStart.html#processingcodeinwebpage I found out the hard way that no matter the canvas size, if you don't set it in the script it defaults to `size(100, 100);` Khanacdemy uses 400x400 putting it all together together your can just copy this jsfiddle into a html file: https://jsfiddle.net/6e59gwz2/1 of course you need to replace the cdn with a local processing.js file to make it work offline You can download the processing.js file from https://cdnjs.com/libraries/processing.js/ or their own website http://processingjs.org/download/
I don't know how that site works, I just know it's hosting stolen content. It's also usually impossible for outsiders to know when a user is just a user, or a stakeholder masquerading as a user. And thanks, at your prodding I did some digging. OP has a long history of posting exclusively `checkio.org`, very often as a self-post (to avoid spam detection most assuredly, so I'll have to update automod to also remove self-posts that have `checkio.org` in the text). The domain doesn't account for 100% of their submissions, but it's above 99%. But I digress, I did find a few things relevant to your question; if nothing else, OP is intimately involved with the site, if not a direct owner. &gt; I'm working on CheckiO more than 5 years now https://www.reddit.com/r/learnprogramming/comments/6tljv6/10_myths_about_learning_programming/ Additionally, OP brings along some baggage to go with that: &gt; Right after the channel was created it become banned automatically. This is how I found out that my old account "oduvan" is banned as well. https://www.reddit.com/r/help/comments/3rh5pa/how_can_bring_autobanned_channel_back/ p.s. Interesting first comment (or at least the first in a long time) to /r/javascript...
Basic scraping can be done like this. Just skip all the pre-config and get headless chrome. https://www.youtube.com/watch?v=1UYBAn69Qrk
You're missing some functions from your example. "text" "textSize" "background" I'm guessing these create elements on the canvas. You can recreate these functions and then add them to this code. Save it as an HTML and open it on your computer. &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="description" content=""&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt; &lt;title&gt;Dice Game&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; /*******************************************************************************************/ /*************************************/var skill = 3;/**************************************/ /*************************************/var skill2 = 3;/*************************************/ /*******************************************************************************************/ var roll1 = false; var roll2 = false; var num1 = 0; var num2 = 0; var num3 = 0; var num4 = 0; var num5 = 0; var num6 = 0; var num7 = 0; var num8 = 0; var total = 0; var total2 = 0; var total3 = 0; var die = function(x, y, number) { fill (0, 120, 255); rect (x, y, 50, 50, 5); fill (0, 0, 0); if (number === -1) { rect (x, y+17, 50, 15); } if (number === 1) { rect (x+17, y, 15, 50); rect (x, y+17, 50, 15); } }; var button = function(x, y, s, p) { fill (0, 255, 0); rect (x, y, s, s); fill (0, 0, 0); rect (x, y+s/2.5, s, s/5); if (p===1){ rect (x+s/2.5, y, s/5, s); } }; var button2 = function(x, y) { fill(0, 255, 210); rect(x, y, 100, 50); fill(0, 0, 0); textSize(35); text ("ROLL", x+50, y+25); }; draw = function() { mouseClicked = function (){ if (mouseX&gt;=30&amp;&amp;mouseX&lt;=130&amp;&amp;mouseY&gt;225&amp;&amp;mouseY&lt;=276){ roll1 = true; }else if (mouseX&gt;=270&amp;&amp;mouseX&lt;=370&amp;&amp;mouseY&gt;225&amp;&amp;mouseY&lt;=276){ roll2 = true; }else if (mouseX&gt;=150&amp;&amp;mouseX&lt;=250&amp;&amp;mouseY&gt;55&amp;&amp;mouseY&lt;=106){ roll1 = true; roll2 = true; }else if (mouseX&gt;=67&amp;&amp;mouseX&lt;=67+25&amp;&amp;mouseY&gt;25&amp;&amp;mouseY&lt;=51){ skill++; }else if (mouseX&gt;=307&amp;&amp;mouseX&lt;=307+25&amp;&amp;mouseY&gt;25&amp;&amp;mouseY&lt;=51){ skill2++; }else if (mouseX&gt;=67&amp;&amp;mouseX&lt;=67+25&amp;&amp;mouseY&gt;113&amp;&amp;mouseY&lt;=113+26){ skill--; }else if (mouseX&gt;=307&amp;&amp;mouseX&lt;=307+25&amp;&amp;mouseY&gt;113&amp;&amp;mouseY&lt;=113+26){ skill2--; }else { roll1=false; roll2=false; num1=0; num2=0; num3=0; num4=0; num5=0; num6=0; num7=0; num8=0; total=0; } }; if (skill&lt;=0){ skill=0; } if (skill2&lt;=0){ skill2=0; } if (roll1 === true){ num1 = round(random (-1, 1)); num2 = round(random (-1, 1)); num3 = round(random (-1, 1)); num4 = round(random (-1, 1)); total = num1 + num2 + num3 + num4; total3 = total - total2; roll1 = false; } if (roll2 === true){ num5 = round(random (-1, 1)); num6 = round(random (-1, 1)); num7 = round(random (-1, 1)); num8 = round(random (-1, 1)); total2 = num5 + num6 + num7 + num8; total3 = total - total2; roll2 = false; } background (255, 255, 255); textSize(50); textAlign(CENTER, CENTER); fill(0, 120, 255); text(skill, 80, 80); text(skill2,320, 80); fill(0, 0, 255); text((total+skill), 80, 180); text((total2+skill2), 320, 180); fill(0, 0, 0); text(total3, 200, 300); button(67, 25, 25, 1); button(307, 25, 25, 1); button(67, 113, 25); button(307, 113, 25); button2 (30, 225); button2 (270, 225); button2 (150, 55); die (10, 10, num1); die (100, 10, num2); die (10, 100, num3); die (100, 100, num4); die (250, 10, num5); die (340, 10, num6); die (250, 100, num7); die (340, 100, num8); textSize(20); }; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
It's already been mentioned in /r/javascript, but yeah, I made Vue and React love each other: https://github.com/akxcv/vuera
&gt;p.s. Interesting first comment (or at least the first in a long time) to [/r/javascript](https://www.reddit.com/r/javascript)... Thanks, I'll be sure to stop by again next time I'm looking for an immediate assumption of bad faith. 
That being said, "oduvan" is also the account that posted this on checkio, so I guess it is the same person. 
If you Google your question, you will see many duplicated blogs that say this: &gt; The solution to the problem starts with understanding how JavaScript works — in particular, how closures work. When you use a variable that is declared outside the scope the variable is going to be used in, it will use the value that variable has at the time it runs. It doesn't get a copy of the value at the time the closure is setup. If you think of closures as pointers rather than values, maybe that will help. See this example: http://jsfiddle.net/maniator/fE55Y/3/ Basically this guy added IIFE that would accept current value of given variable and do operation on it. This is one of solutions to this problem before we had `let` keyword. So in your case, your inner code might have closure that is always looking at reference that references last value. To me it seems like JS creates these functions with reference to `i` and upon calling them it uses last calculated value of it.
If you're someone that enjoys learning from courses, I can recommend frontendmasters.com and egghead.io. They have good courses that are useful for both beginners and experts.
Please show me an example of Javascript being "one of the most popular" sysadmin solutions.
I usually ctrl+shift+c, so I can quickly grab an element.
Sorry. My hackles get up when someone seemingly outside our community defends spammers (though I realize you weren't explicitly defending them).
It is not, but it could be. However, bash and Perl are still popular because they are installed everywhere and they let you do common tasks very easily. In Node, you need to import stuff first, and a root-level `await` keyword is also not easily available yet. There would need to be some wrapper that handles all the setup and adds fancy things to global scope so you could write `nodeshell -e 'await all((await glob("**/*.txt")).map(f=&gt;copy(f, "bar")))'` and even then that's a bit awkward to write.
Coming outta school my coding skills couldn't get past even entry level interviews. Instead of practicing trivial tasks on HackerRank or CodeWars, I picked up Automate the Boring Stuff to use code to do practical things. The book taught me to use Python to work with MS Excel. I leveraged this knowledge to do cash jobs automating mundane, routine, boring spreadsheet tasks for mostly small-time accountants and financial analysts from CraigsList. It wasn't glamorous work but it was true, paid work that I used with my degree to get an entry level software development job. Even though I haven't coded with Python in like 3 years (exclusively C# &amp; Java now), I'll always have the deepest gratitude for that book for opening the door of software development for me. Buy the damn book! Automate some shit and get paid!
Maybe you could write a script to do that!
This is amazing! You've changed my JS life :D
I was working in marketing at a startup, always envious of our devs. One reccomended ATBS and it was the only intro course that actually kept my attention. I used it to generate some reports, move things around, etc. Boss and dev were impressed and let me start learning more about our own system. Now I'm a developer.
Maybe I will! :)
I've been working on a project that allows users to book hotel rooms, it's still in early alpha stage phase tho, https://hotelana.org The whole project is written using JavaScript stack (node.js, mongo, react, next.js for SSR, etc..). Except third party API (dynamic data such as prices which is actually pretty slow)
Yeah I have it at the bottom of my html just before the closing tags, I'll double check and make sure its the right library though, maybe I missed something
Assuming you did computer science for your degree, I absolutely sympathize. There's such a strong difference between computer science and software engineering and it's amazing on how many people don't understand that. I'll use hacker rank to learn new langauges and brush up on algorithms, but there's no real world practicality behind it other than practice for coding interviews. I love python, that language has made me a much smarter developer when working with other languages. I too work a lot with C# and I feel as though I'm unravelling syntactic sugar off of statically typed python. Which makes me a huge C# fan as well.
What do you mean by "just before the closing tags"? Your scripts (i.e script tags) should be just before the closing body tag. You could also try and check the console for any errors.
Although I'm somewhat familiar with Python (used it extensively on a project, once, but it's been so long, that I am now in a rusty state with it, where I can read it, but writing it requires that I look everything up), I'm not familiar with this text. Can you provide some details about it? It does sound like an interesting book, by it's title. 
nah, don't do that, we all ask dumb questions sometimes. 
I think I know what I want to do. I have one html page. I have a nav bar with 3 links. I want clicking on one of those links to fill my &lt;aside&gt; with 1 of 3 lists. Then I want the items on those lists to function as links that when clicked pull different text into my &lt;section&gt;. Now I guess I just have to spend a year figuring out how to do this. Thank you.
Good to know :D
I was being silly :P
Nice, I've noticed quite a few libraries have started to use these for various purposes.
For that particular topic, I personally don't recommend YDKJS. Kyle Simpson (the author of YDKJS) is generally a smart guy, but when it comes to classes and inheritance, then a strong bias starts to show through and [his reasoning starts to make less sense](https://www.reddit.com/r/javascript/comments/5m6tkz/should_i_use_es6_classes_or_not_js_beginner/dc1dw3y/). Personally I recommend the [Rauschmayer](http://exploringjs.com/es6.html) books instead. /u/mayaswelltrythis
no such thing as stupid questions, just stupid people! (jk) 
So, it's great you're learning to do this without a framework. Something like vue.js or react.js would make this a lot simpler, but of course you then have the learning curve of those frameworks to grapple with. My advice would be this, forget about the "p" in pjax to start. Just throw all your &lt;aside&gt;, and all your &lt;section&gt; content into a single doc and call it `content.html` or whatever. Use an XMLHttpRequest to grab that doc, then when one of those links is clicked, use `document.querySelector` to query your `content.html` for the bit of html you want to swap out, and then swap it out for the correct content in the page. You can worry about how you want the browser history to behave after getting the first bit down. Generally, pjax or ajax for that matter are used as a technique for pulling down content from a database and then populating part of the page from that database dynamically. From the sounds of it, all your content is static so you could really construct this without any AJAX at all, but it's probably a good learning opportunity regardless. If you want to do it all using native APIs. You're looking at the `querySelector` API, and the `XMLHttpRequest` API or the more modern version of it `fetch`. Everything else can be done with simple click handlers on your link buttons. If you want to use some libraries, jQuery will help you out with both selecting DOM nodes and making requests for content. And if you decide you want to use a framework, vue.js would be a good place to start for this kind of thing. But to be honest, it's a bit overkill. If you're just starting out, I'd recommend sticking to native APIs and learning the ropes a bit so-to-speak.
`let` and `const` aren't always cleaner, but in general I agree. There are still use cases for `var`, especially where it is functionally equivalent to the other two and you like to declare variables at the top of your scope.
This isn't a closure as `i` is in the global scope, it would only be a closure if `i` was local to a specific function. You've got the gist of the code right, but you're misusing the term *closure*. Closures always refer to variables which are "closed over" by an outer function. In this case, no such outer function exists. 
I suggested this book to a group of people. All of whom now know how to code JS and not one of them was able to get anything out of it. I found it difficult to read myself. Like sandpaper for your brain.
Only thing I know is that I know nothing :)
I suggested this to people to use they didn't like it. I didn't like it either. Many many many people who suggested this book to me didn't read it themselves.
With node.js it's possible - but often times we're faced with either looking for a package or writing a bridge to the automation thing that we need to write. But there are many - and some of them don't even need native automation bindings; because they either use child_process and pipe it to STDOUT or do some control via commandline, or there's a native API behind the automation, which is awesome. Without node.js it is possible to automate in other ways via JavaScript-like variants; via WSH Script/JScript for Windows, and via AppleScript on Mac OS X. **Ref links:** * AppleScript - https://developer.apple.com/library/content/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html * http://www.adobe.com/devnet/photoshop/scripting.html * https://helloacm.com/using-com-object-in-nodejs/ - WSH in Node.js * https://www.npmjs.com/package/jscript - new package that i didnt know about that uses JScript, a variant of WSH * https://docs.microsoft.com/en-us/scripting/javascript/reference/activexobject-object-javascript: the root of all JScript * https://nodejs.org/api/child_process.html - child_process can help with automation when one can do everything via command line. 
You're right, I read it too fast. So scratch the part about a closure, key point is just that when the functions are actually called they are referencing the current value of i rather than the value at the time when the functions were created, which seems to be the misunderstanding
Just FYI this isn't true. Typescript has what are called definition files that only define the type of things, these can contain 3rd parting created typings for libraries that are otherwise loaded globally. You can define types for anything independenly without modifying the original code.
When I code with Typescript, 75% of the time, my code works the first time I run it.
That's true! It depends, though. Chances are, if you're doing things the old-school way, the `d3.js` file you would download from the website wouldn't come with those type definitions. And if you're using NPM, _sometimes_ the types are included automatically alongside the actual module. When they aren't, you'll have to download them from the DefinitelyTyped repo. So then, all things considered, it's safe to assume that a library used through a global interface isn't going to have that autocomplete support as reliably than if you used modules and a package manager. And remember that this is in the context of just JS without TS. The story is different if you actually are using TS.
Yeah for sure. I think OP maybe comes from a language with block scope rather than lexical scope.
Automating things isn't a practical use case I guess. I use node for automating daily tasks at work all the time, with `child_process` `execSync` it can orchestrate any other shell or system programs easily. Having access to npm is great for automating things because there's a package for pretty much anything.
That's what I meant, sorry for the ambiguity There are also no relevant errors being returned, and all browsers should be supported 🤔
Just because you can doesn't mean you should.
I still don't think that gets you the proper length for all printable symbols. This printable-characters library doesn't seem to handle grapheme clusters, which are pretty much the hardest thing about unicode. For example, try console.log("\u0061\u0308"); "\u0061\u0308".length; There's no invisible letter here, 0061 is "a", 0308 is ̈ , together they become ä, which is one printable character. As an example of how disgusting it can be to figure them out, here's one JS library that does it: https://github.com/orling/grapheme-splitter/blob/ca7a1db45d0604241b7b969bb0f73e5cfd42a3d2/index.js
jsonp i believe
Hard to say what happens exactly, it depends on the runtime engine. Chrome's V8 optimizes a certain way and other engines do so in different ways, however the end result should be the same in all implementations, according to specifications. JavaScript is a scripting language, which is evaluated at run-time. This means that everything that happens under the hood can (and generally does) differ between implementations.
I prefer [`String#slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice): * You can use negative indices. * Used to be implemented more consistently than `.substring()` across browsers (not sure if that’s still true). * Arrays have a method with the same name (making it easier to remember both, for me). `String.prototype.substr()` is deprecated and only guaranteed to be there in browsers.
F12 was an IE thing. They literally even called the plugin "F12 Developer Tools". Chrome was always C-S-I until just a few years ago. 
You can cast numbers to string, then loop through and sort. Then convert back to numbers.
Something like this? Wouldn't that require a ton of if statements to compare the numbers? function getSubtract() { alert("got here"); var content = document.getElementById("numberlist").innerHTML; var numbers = content.split("&lt;li&gt;"); var ltp; for (var n in numbers) { ltp = numbers[n].indexOf("&lt;"); numbers[n] = numbers[n].substring(0, ltp); } var rightAnswer = parseInt(numbers[1]) - parseInt(numbers[2]); if (parseInt(numbers[3]) == rightAnswer) { document.getElementById("correct").innerHTML = "Correct"; } else { document.getElementById("correct").innerHTML = "Sorry that is the wrong answer"; } }
Well, he is. I dont know what is the OP thing but just to be sure I am not Oduvan with new account. :) As I have explained to kenman, I am not Oduvan or shareholder of checkio. Just mere fan of checkio who tried to propagate their pages. Well, I know I am not to be trusted, apparantly. Just wanted to explain :)
&gt; "GitHub provides a great way to let your audience comment on your writings" No, they provide an issue tracker API that you're abusing. At least seems that way to me.
You're choosing JavaScript over Python, so I believe you.
I mean automating boring stuff and practicing JS aren't two activities that naturally pair... or at least the former shouldn't require the latter.
A few suggestions. Titles should be short descriptions, not full questions. Secondly, please post more than one line of code. Post enough that someone could run the code and see what you are talking about. I am 99% sure I know what is going on here, but I would have to see more code to be sure.
Agree, and I suspect GitHub will likely lock it down at some point, if people keep using it in this way.
Your code looks kind of strange for the requirement. Do you need to parse &lt;li&gt;? I thought more along the lines of, a user enters a list of numbers, like nums = 1234567 then, something like, var input = '' + nums; foreach(var I in input) // sort here then smth like return input * 1 I'm on a mobile, so that's just a rough idea.
Sure! Sorry about that, first time poster. I'm adding code into the main body right now. EDIT: so a portion of the code didn't get populated into the "Code box" and I'm not sure how to force it to do that EDIT: just figured out how to format better. Progress!
Another important tip for you. Reddit uses something called Markdown for formatting. I'd recommend reading up on that to see how to properly format your code and other elements. Here are some links to help you out: * [Commenting Wiki](https://www.reddit.com/wiki/commenting) * [Comment Formatting](https://www.reddit.com/r/raerth/comments/cw70q/reddit_comment_formatting/) * [Reddit Markdown Primer](https://www.reddit.com/r/reddit.com/comments/6ewgt/reddit_markdown_primer_or_how_do_you_do_all_that/c03nik6/) * [Markdown Syntax](https://daringfireball.net/projects/markdown/syntax)
I guess edit your question and add your HTML? 
Great. So I've got it all formatted now. Any idea on where to start tackling this?
To answer your question, if you get one letter wrong, you are going through every image with this for loop `for (var i = 0; i &lt; gallowsArray.length; ++i)`. It loops from the first image all the way through to the last image without stopping. There's nothing there for it to say when to stop. For this sort of thing, you don't need a loop at all. You can instead set the image to the exact index based on how many guesses the player has left. So you If there are 11 images, then each time a player guesses a letter, set the gallows image to `gallowsArray[11-guessesLeft]`. If you wanted to generalize that for any number of images you could do `gallowsArray[gallowsArray.length-guessesLeft]`. Another way you could do it is have a counter that increases with each incorrect guess and then set the image to that index. So if every time someone gets it wrong it increments `incorrectGuess++` then it would set the image to `gallowsArray[incorrectGuess]`. I hope that all makes sense. On another note, what is the purpose of the `gallowsImage` variable? It doesn't seem like it's being used for anything.
Holy CRAP. That seriously worked perfectly. Wtf. Thank you. I’m so happy now haha. If you couldn’t tell, I’m completely new to this, and this game was a homework assignment that I was given and I was trying to spruce it up a bit and make it fancier. And you were right, the gallowsImage variable wasn’t needed at all, I could just put the document.getElement command right there under guessesLeft— without setting it equal to a variable. Thank you again!
Agreed. Just because you can post obnoxious, unhelpful comment doesn't mean you should. Follow your own advice.
I still don't know why.
This more or less does what he's expecting-formatting's a little crappy... (aside from having a pic that says "sort" for the submit button it does what he wants but I'll be damned if I fully understand this. What you've mentioned looks above and beyond what we've covered in class- he gave us one example of an editable region (which we copy and paste to see what it does, he doesn't explain much, just says to "check w3schools XD). I'll take a look at what + nums and foreach means though-I'll probably learn something... &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;title&gt;Sort the numbers&lt;/title&gt; &lt;body&gt; &lt;p&gt;Click the button to sort the list in ascending order:&lt;/p&gt; &lt;button onclick="sortList()"&gt;Sort&lt;/button&gt; &lt;section id="numberlist" class="wall" contenteditable="true"&gt; &lt;ol id="id01"&gt; &lt;li&gt;number&lt;/li&gt; &lt;li&gt;number&lt;/li&gt; &lt;li&gt;number&lt;/li&gt; &lt;li&gt;number&lt;/li&gt; &lt;/ol&gt; &lt;/section&gt; &lt;script&gt; function sortList() { var list, i, switching, b, shouldSwitch; list = document.getElementById("id01"); switching = true; while (switching) { switching = false; b = list.getElementsByTagName("LI"); for (i = 0; i &lt; (b.length - 1); i++) { shouldSwitch = false; if (b[i].innerHTML.toLowerCase() &gt; b[i + 1].innerHTML.toLowerCase()) { shouldSwitch= true; break; } } if (shouldSwitch) { b[i].parentNode.insertBefore(b[i + 1], b[i]); switching = true; } } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 
Can you clarify? Are you trying to say each one only once, or are you trying to alternate every 30 minutes? If you are trying to alternate, then use a single setInterval, and use boolean/counter to track whether to say boo or spook. If you eant to say each only once, then use setTimeout.
That is because your two async functions do not contact with each other. They are independent. You can use promise or async/await to make a async queue. Or a simply hack, ``` var flag = true var msgs = ['Spook', 'Boo'] var timer = setInterval(()=&gt;{ if (flag) console.log(msgs[0]) else console.log(msgs[1]) flag = !flag }, 3000) ```
This is something others made up a decade ago. For all the reddit non-beliebers: https://www.toptal.com/developers/sorting-algorithms
Professionally, I do back end work and use JS and Ruby. I haven't done front end JS work for a while. In my personal projects, I use Elm on the front end and Typescript with Serverless on AWS. 
Thank you so much, this help me out a lot!
Python is more likely to come pre-bundled with the distro. But other than that, there is nothing stopping you from using JavaScript instead.
I've finished off the Halloween Eyes implementation for PC's Projectors, and Mobile phones! http://untamed.co.uk/halloweeneyes/ 
I think you don't understand how variables work in JavaScript. It's a bit like an object, and a variable from a parent function can be "enclosured" by the child function, and the child function will continue to be able to use it, even when the parent context is no longer executed. Here are a couple of examples illustrating this: function enclosureVariable(v) { return function() { return v; }; } var functionWithEnclosuredVariable = enclosureVariable(4); console.log( functionWithEnclosuredVariable() ); // 4 function enclosureVariable2() { var v; return { reader: function() { return v; }, writer: function(v2) { v = v2; } }; } var { reader, writer } = enclosureVariable2(); writer(5); console.log(reader()); // 5 
You probably want to post this over on /r/Terraria/. This is a specific issue to the script you are running. Unless you are prepared to go through debugging the script and rewriting whatever is causing an issue, it might be better to see if there is an existing solution you can download. It might be that there is a missing file or something.
Still a cool project to learn 
Why you're reading /r/javascript if you don't like the language is beyond me.
I'm sure it is. 
I mostly work on front end in JS, but I also do back end in Ruby. At home, I really like using OCaml. And python for machine learning.
What point do you think you're trying to make? Scripting to be more productive is bad? Javascript is bad? Python is bad? Do you even have a point in mind? 
I LOVE the async nature of javascript. Honestly I prefer it. Once you get the hang of promises (or async await if you like), it's so easy.
I guess this would be good for many cases, like submitting large data over websockets also 
Yes the divergence I see are all around the handling of classes. I am thinking the use of public/private keywords for example. It seems JS is heading another direction there. Up to developers to use them or not. I found you can use TS in a very standard compliant way which is great: you just need to be aware of the specifics of TS vs ESx.
I usually use nodejs a lot for this kind of thing. If you use the synchronous version of many tools it can make for some pretty neat code. The only time it becomes tricky is when you need asynch functions. If so, the code becomes a bit too convoluted compared to a straight forward python thing. But then usually async/await can help
I recommend this archived course, "Nature, in Code: Biology in JavaScript": https://www.edx.org/course/nature-code-biology-javascript-epflx-nic1-0x It doesn't teach state-of-the-art Javascript, but it _is_ aimed at beginners and explains some basics pretty well. What I - who sure didn't need a Javascript course - liked about it was that it taught biological concepts such as genetic drift or mutations, and how to simulate them with a few lines of (Javascript) code. That means you get _actual_ problems that are (at least to me) interesting to solve, not something made-up, and not the 1 billionth TODO list implementation. The course is over, but there may be another one, and everything still is accessible.
Alright, so **[this](https://jsfiddle.net/gqb5dg59/1/)** is my exact HTML/CSS/JS, without any attempts to add this new effect. Just plain ol' interactive navigation. How would you figure I should add this new functionality given my code in particular? I had intended for this to be a rough draft, but it quickly became more refined, hence not using the standard &lt;UL&gt;/&lt;LI&gt; for the nav bar
Whenever I can I like to stay 100% JS, but I use C++ for work sometimes and have been trying to get into Rust.
I wrote a scrpit to extract texts from ass files in node, later I reimplemented it via python and ruby. I leart something new from this, though they do the same job. Another script I wrote is to compute the frequency of Chinese pinyin characters from Chinese texts and generate a webpage to show the results by graph. And a Chinese name generator... 
Arguably package managers are system administration, and `npm` must be one of the biggest.
Fuuuuuuuuuuuuuuuuuuck, dude. That make perfect sense. Everything was vague - I knew how to 'solve' it, the answer is just 'use let' or use an IIFE. But I wanted to know how exactly a loop runs. And you explained in beautifully! Thanks so much for taking the time, man! I've been banging my head on the desk since yesterday. :D
Everyday. JS is just used in compliment of whatever else I'm using. I haven't set up a pure JS project just yet, if I do then it will be a front end. Language wise, I'm all over the board. Mostly python, but I've been picking up Haskell for some inspiration.
Thanks so much man - made perfect sense! This is exactly what I was looking for. I didn't immediately get that the function itself was called later on - now that I see it this way, it makes *perfect* sense, and I'm wondering why I was so stupid earlier to not see that. Thanks again, for taking the time man! :D
Professionally most of the server side code I write is Java. Have played around with some serverless JS using Azure Functions. 
That's what shell scripting is for.
A few notes: 1. You have the following line at the beginning of your *&lt;body&gt;*: *&lt;div class="header"&gt;&lt;tr&gt;&lt;td&gt;&lt;center&gt;&lt;/div&gt;*. It makes no sense (and not a good practice) to open 3 tags without closing them. 2. ‎You're constantly using *&amp;nbsp;* for margins, which is not a good practice. You should use CSS for styling. 3. ‎You're defining a lot of the same CSS definitions many times, not a good practice. You should create some sort of a "base" class and use it on every relevant element. I'm not sure how familiar you are with HTML and CSS but you're able to set multiple classes to a single element. Other then those things I don't see any other problems with HTML. The solution I suggested should work.
well shit :P Thank you so much anyways, I'll standardize the entire thing and see if that helps. ty so much!
No problem mate. I'll gladly try to help with any following issues. 
Saving this for later
I use it to cache data in localStorage. Great library. 
Not an answer (I'm on phone) but an observation. You send window in as an argument with same name into your anonymous self invoking function. This leads me to believe you need to read up on scopes first
I really like Go, but I'm in love with modern JS. That said I also enjoy Swift, Objective-C, Kotlin and Python
I'll keep working on this project, any suggestion and idea is welcome!
If you're that deep into it, you should look for a loader like require.js to take care of it for you. I never needed a loader, so I can't really give you any tips on what is best for your situation. Also, maybe you shouldn't be so adamant on polluting your global scope. Sometimes the simplest solution works best, you just don't need to go overboard with it.
[Gulp](https://gulpjs.com/) and [fs](https://nodejs.org/api/fs.html).
This is a good suggestion but I am still learning javascript and I only use the vanilla js and no libraries. But I will try to look at it.
Do you mind tell me the specific part of the scopes that I need to learn? Maybe just little hint about it? Please
They leak in but not out. So "window" in this case is as accessible inside the scope of your anonymous self invoking function as it is outside from where you send it in as an argument 
Consider this instead (function (root) { ... here root will equal window in a browser or whatever is the scope of your runtime environment })(this);
https://www.google.co.uk/search?q=what+is+scope+javascript&amp;rlz=1CDGOYI_enDK760GB760&amp;oq=what+is+scope+javascript&amp;aqs=chrome..69i57j0l3.11592j1j4&amp;hl=da&amp;sourceid=chrome-mobile&amp;ie=UTF-8
Many code playgrounds also use it to share snippets through the hash: https://flems.io/#0=N4IgZglgNgpgziAXAbVAOwIYFsZJAOgAsAXLKEAGhAGMB7NYmBvEAXwvW10QICsEqdBk2J4s+AE5MAJjAkAKabWoBXHA3wAjWtICeFAARZ5AckIBmE4ZMAJGFCi0DAd1oSo0kwEovbDiEwcPHxqOAEaekZmHjYAXSooCDQAawQUTiCeLAhiQgloShAVdzwSYgAHOEQAemqVNHLkgHMQ2ixq7Nz8qAABAEZ8AYAWDpy86Hx+QuJdcu4QKdZY1iA
There are various suggestions already (and you could add bundling, as another option), but if you want to try to _walk through this and solve it_, you'd need to: 1. Show the code. Maybe not all, but a minimal (non-)working example with the **actual** code you have and not just a general description. Ideally, you'd put that in a Fiddle/Bin/Pen/whatever. I could suggest for the current problem [Plunker](http://plnkr.co/) as it allows you to easily create multiple files in you demo. 2. Explain _exactly_ what "won't work" means to you. More precisely, explain, with the code, what part is not behaving as you expected, what you expected and what is actually happening instead. This is probably the most important part, as people may be answering to what they understood you were asking, but not necessarily to what you actually intended to ask.
Maybe r/learnjavascript would be a better place to ask this.
Hi /u/Chainznanz, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Ferin_HS, For javascript help, please visit /r/LearnJavascript. Thank you!
Y'all are an uptight bunch eh?
I find JS to be too ineffective in writing processing heavy backend services, normally opting for Python or .NET , however front-end services and APIs, i always use it. Might be worth noting that I now pretty much only use TypeScript for backend stuff as it's much easier to make interoperable components and refactor further down the line 
Well you could create a gist for that which allows adding actual (drum roll...) comments. ^^ I suppose you might even create your entire blog as a couple of interlinked markdown gists for an absolutely seamless integration, but then again, oh well. :-P
Thank you. I'll try there.
Thank you. I'll ask there.
You CAN load scripts and run them by using document.body.appendChild. var scriptEl = document.createElement( 'script' ) scriptEl.src = 'XXX' document.body.appendChild( scriptEl )
If you are just learning JS, you probably shouldn't be loading JavaScript files manually, since it can be tricky and introduce additional problems (although the one you are dispring isn't normally one). If you neither want to use a JavaScript loader library nor have multiple &lt;script&gt; elements, you should then instead look into merging your files into one. There are countless JS minifiers/compressors that can do that for you (which normally includes compressing the code, but that usually can be turned off), or just use the tools your OS provides for you. Under windows it can, for example, be done on the command line with `copy`: copy one.js + two.js result.js If you are using a build tool or server side software they too can be used for this. If you tell us what you are using, we can give suggestions.
At work we use JavaScript on the frontend almost exclusively. We have a few JavaScript-based Lambdas but otherwise the backend is all Python.
Frontend is all Javascript/Typescript for obvious reasons. Backend I use C# which I learned on the job because 90% of our backend is in C#. The team has considered maybe writing some of our applications services in node in which case I'll probably end up writing much more backend than I currently do. 
Where is merge sort?
Vue.js + SEO (unless you target only Google search) calls for server-side-rendering. Check out the relevant page of the Vue.js guide: https://vuejs.org/v2/guide/ssr.html
Thank you for pointing that out! I'll look into that.
As others have said, you're doing it wrong by trying to re-invent the wheel. If you're just trying to learn then congrats: you've learned that appending a script after the page has loaded does not trigger an onReady event. Now that you've learned it, go use Require or (better yet) Webpack. Throw some Babel in the mix and you can use ES6 too ... now that's some technology that's worth learning. But if you really want to keep trying to make your own wheel and not use anyone else's code, there's a "simple" solution: build an event system: const thingsToDoWhenAScriptIsAdded = []; const addThingToDoWhenScriptIsAdded = thing =&gt; thingsToDoWhenAScriptIsAdded .push(thing); const doThingsToDoWhenAScriptIsAdded = () =&gt; thingsToDoWhenAScriptIsAdded .forEach(thing =&gt; thing()); const myAppendChild = (thingToAppend) =&gt; { document.body.appendChild(thingToAppend); doThingsToDoWhenAScriptIsAdded (); } window.onload = doThingsToDoWhenAScriptIsAdded; // after page load addThingToDoWhenScriptIsAdded(someScript); 
I write C# backend and Typescript frontend at work. Starting to mess with go as a backend a bit as well. My first professional gig was Python backend (Django).
This is an older JavaScript pattern used to protect IIFE's and get a slight performance boost. By passing in window , it ensures that if code later changes the global window object , that won't affect the IIFE. This is because local objects with the same name take precedence . In terms of perf, looking up local objects is faster than global objects by a small amount. These are things we did a lot 5-7 years ago , these days it's not as common anymore . tl;dr old pattern , but probably not a scope issue . 
Can you post a code snippet of HOW you are appending the js file to the dom?
Glad it helped!
Another option is to bundle them using grunt, webpack, or even just a shell script, and then source that bundle.
This is the best option given that it's actually what you're likely to do (with greater configuration/complexity) once you're more experienced as well.
window is the global scope. it's called that because it's everywhere, you don't need to pass it into your iife, it's already in there. that might have something to do with your problem. also, I recall having a similar issue when trying to append actual scripts to a script tag. I'm pretty sure this will only work if you link to the scripts with the src attribute.
don't forget the onload function before src so u don't get a race condition 
So long as you do not disallow access to css &amp; js with robots.txt, [google will render JS generated content](https://webmasters.googleblog.com/2014/10/updating-our-technical-webmaster.html). There is a [tool to see what Googlebot sees](https://support.google.com/webmasters/answer/6066468?visit_id=1-636430735415393075-801561593&amp;rd=2), if you want to be certain.
your advice is supremely un-useful. there is a great reason to reinvent the wheel: so you can learn how it works. you writing 4 paragraphs telling him not to do it himself and then go and reinvent the wheel *for him* is not going to help him learn a damn thing.
&gt; like submitting large data over websockets Strings only. Which is rarely something that you transfer through WebSockets in large amounts. For a number/binary based data msgpack or any form of binary JSON will be more efficient than LZW.
Import this site: https://data.qz.com/2013/bitcoin_mining/
Depends on the kind of projects you're engaged with / the space you're in. For example most small scale businesses will typically factor in budget as more of a concern sometimes limiting your stack to shared hosting. In such a case PHP is pretty much what you have to work with, and you can only hope if the clients already bought hosting that it supports php v7.x else is refundable. Other times people are willing to invest more in a managed VPS (else pay you a retainer) and thus you can be more flexible with your language choice. In such cases ill generally stick with typescript or python for cases requiring relatively low compute performance. Then again if you're in the corporate sector especially financial ones you're limited to what they tell you to use (generally C#). To sum up, there is no one universal constant language, it all depends on the clients, project scope and what they're willing to spend.
Pako.js is great for this as well, plus gzip compatibility
I've done Perl, Java, PHP and C# on the server-side and for scripting. These days I prefer to use Node/Typescript for just about everything. PHP is still kinda useful when you really just want to upload a single script to a server without creating a whole application.
So BASH?
That is such BS you were downvoted. I came on here to upvote you because I thought it was funny! No, I dabbled with Python first. I'm cutting my teeth on JavaScript because I like web development and it's how where I can get a job within my company :)
SPA in and of itself is bad for SEO because it only gives Google one page to index. Generally when SEO is a concern, SPA is avoided. You're not going to find a lot of info on optimizing a SPA because the process is basically the same and using a SPA is counter productive in that sense.
Firefox and Chrome will automatically use deflate compression on WebSockets if the server supports it.
thanks
Great! Hopefully you saw tencircles reply pointing out that the mention of closure in my comment were incorrect, but glad the rest of it made things more clear.
I work on a team of 4 guys. I write about... 50% Javascript 40% PHP 5% Bash/shell scripting 5% Java/Android
A variant of this (LZ77) was used in the old gba pokemon titles to compress graphics like pokemon sprites.
just a reminder, it's hacktoberfest this month (aka free code month). put it on github and open an issue and tag it hacktoberfest and someone will come along and fix it for free. plus simple fixes like this give new contributors a good place to start.
Anything you every needed to know in this field is on YouTube, Pluralsight, or Udemy. Say no to the expensive joke known as college. 
you're like 99% correct but *technically* you can "enact logic" with conditional comments so *technically* it is a programming language.
it should be noted that conditional comments are only supported for IE version 9 &amp; lower
Stackoverflow!!!!
Learning more about your craft is never a bad thing. That being said, I’ve been in the field a little more than 20 years and I have *never even once* worked with someone who had a graduate degree in CS, unless they were in management (i.e — running meetings and fucking around in Microsoft office all day — don’t know what you’re into, but for me, I’m not interested in that crap — I want to build things). I myself, have nothing more than a community college associate in CS. Even when I was taking those classes, I already had a pretty strong foundation coding Perl and associated web technologies (this was mid to late 90s so Perl/Apache/MySQL was very similar to node/npm/react/angular, etc in terms of ubiquity and critical mass — that stuff pretty much ran the web in that era, and if you knew it, you wouldn’t have a hard time finding work). like you, I’d already studied a different major — music education. It was the full on 90s dot com boom, and I just sort of fell into IT programming, then discovered I loved it. As a result of my previous major, a lot of stuff I didn’t have to take. But a lot I did have to take, even at the associate level ... physics and math that you need for CS isn’t necessarily included in a music major. I did it one night class at a time, after work. It took 5 years to complete that 2 year degree. It never got me a job directly. I can’t say anyone has ever been impressed with my community college associate degree, but it was 1000% worth it because of what I learned. When you’re at work, you’re dealing with the problem in front of you. You lean lots along the way but there are holes in your knowledge. I would never have learned a thing about x86 assembly unless I’d taken those classes. As a result, the potential of webassembly would probably pass right over my head today. I’d never have been exposed to lisp or small talk, or bothered to try and simulate physics, or a thousand other things. At least in my experience, formal education in CS is useful, in that it exposes you to a wider range of techniques and approaches than you would normally encounter in professional work. I’m not sure if it’s value beyond that, scepter for grabbing the attention of recruiters. 
Grunt isn't a bundler and neither is a shell script. Bundling and concatenating isn't the same thing. Nevertheless bundling ( browserify, webpack, rollup etc ) is the standard way to go.
Good stuff! 
When I read the title, my first reaction was 1,000% yes. The I saw you said you have 6 years experience and now I'd say almost certainly not. I'm in the UK so a Masters is the level above the standard undergraduate degree (BSc). No job I've ever seen wants more than an undergraduate degree, though some may stipulate how solid the degree is (2:1, for example). Masters degrees are more or less doorways into a PhD and very much send you down the academic route. In fact you can be viewed as overqualified if you try to get a dev job and have one. I have a BSc, and I can tell you a few things. First, it was the biggest shower of shit you can imagine. I'm fairly sure I came out of that degree knowing less than I went in with. Secondly, it's the most important shower of shit I've ever had to endure. I view my degree as an invitation to interviews. A door opener if you like. From there it's up to you to stand out over the other candidates, but anyone hiring a recent grad with little to no experience will look to paw low and expect you to learn on the job as a junior. Your experience should really count for a lot more than a degree now, depending on what sort of companies you've worked with. TL;DR, overall no - you've got experience and that should be enough. If you find it isn't, get interview feedback and decide if it's worth the investment from there. 
scripts are loaded in order by default. Can be manipulated with `async` or `defer` attributes though. So `onload` race conditions don't apply if they're added in order at the bottom of the body tag. Maintaining the order etc is PITA and a maintenance nightmare though so that's why people use bundlers.
It's kind of sad though that we need libraries like this (which, by the way, kudos, looks excellent!) because (a) we want to use LocalStorage because it's got the best browser support and the simplest API (that is sufficient for probably 95% of use cases) and (b) wish Local Storage allowed for a lot more data. I kinda wish browser vendors would just say "okay, Local Storage can use up to like 500Mb per domain (or something like that), AND we'll also give the user an option somewhere to bump that up if they need/want to". It just seems like everybody wants to use Local Storage most of the time but then frequently shy away from it due to the size limitation.
Once you have the experience you have the additional degree is not valuable enough to be worth it
Psychology major, career dev here. I would say if you have your sights set on one of the big tech gang (FB, Amazon, Google, etc) then yes, getting a master's will help you. I would also say that it's utility ends there, simply because it will help set you apart from the hoards of hopeful devs eyeing the same positions. Otherwise passion, commitment and a willingness to continue learning is enough to get you where you want to go pretty much anywhere else. You and I are proof of this. I should note that this is obviously not a hard and fast law as I know a number of individuals who have made it to these companies with only an undergrad. Anything is possible! 
I have been working on SPA which needs to have good SEO ranking for the past year and a half. We use a paid service called prerender.io which uses a headless browser to execute the SPA pages and caches them. There is a small server side piece (node.js) that we had to write to detect search / social bots and return the response from prerender.io. The service can get expensive depending on how short you want the caching period to be. Alternatively, you can run your own headless browser (phantomjs / chrome headless) to execute the client side JavaScript and return the HTML for bots. Be aware that even with this solution, the SEO rankings are not as good as if it were a server side website or if it was a server side rendered SPA. If good SEO is a big priority, I would suggest using static site generators based on Vue.js (if it is a lot of content based site), or use server side rendering (for more dynamic content)
I started coding for fun in my early teens. dropped out of 2 different CS programs and to this day still don't have a degree. when I was 19 working in a call center I wrote some code to make my job easier and ended up replacing their in house IT guy. set up an intranet, wrote a crm and a custom dialer and have been programming full time ever since. the company I work for now is a relatively big well known company with national press coverage. jobs, gates, the zuck, dell didn't have degrees. will it help to get a degree? maybe. will it hurt not to get one? probably only if you're not already proficient. id say.. if you want to work for other people get a degree. if not learn it yourself.
In my opinion your experience is more valuable than a masters in CS. My reasoning is because a lot of what a masters in CS degree prepares you for is a research career and not so much one in which you produce usable products. Having experience means (to me at least) that you've probably written usable products and know the ins and outs of actually maintaining it, while balancing down time and user experience. While I would hope this is true, most people I've met that have mostly academic backgrounds are able to produce something that "works" but it is a far cry from being production ready. For reference, I have an MS in software engineering and I feel it's help me much more than what a masters in CS would have gotten me. As I think I try to consider other aspects like what it's actually doing, how the users use the program and designing it for what I believe the app with sort of expand to. Most of my peers can't get past the "it needs to do this now because that's what was asked" mentality and can't even phathom that the program might get an enhancement in the future. 
If you can find a part time program that fits your work schedule, and your employer offers at least partial tuition reimbursement then I think so. It's a durable credential for your resume and you'll learn some new things. I would suggest not going full time, as the payback isn't there. If you have to pay out of pocket, it may or may not be worth it, depending on the program
This is the only practical, realistic answer in the bunch so far.
It depends on what you want to do and what's available to you. If you work for a business with, say, a lot of documents or where tracking chain of ownership is important, then start looking for a program that covers blockchain or OCR. If you are interested in machine learning or data analytics, there are masters programs for that too. If you want to become a DBA and get really fantastic at understanding how data is best organized or stored for a given situation, then there may be a program for you. These are all things that you can't just google and understand. If, on the other hand, you are interested in build engineering or software architecture then you aren't going to get a hell of a lot from any program. The SME career path often takes you into the realm of build engineering, deployments, and maintainable architectures for codebases - these are things that CS programs don't generally cover well, if at all.
Not exactly. SEO is changing fast and there's a lot of pseudo science out there. It's not obvious at all what exactly works and what doesn't. There's a vast amount of stuff to consider. I'd say it's misinformed to say SPA's are exempt from page indexing because they require JS to run - but google has for a long time already indexed such cases. And what you should do if SEO is of concern is generate a sitemap which takes care of that and then also do a lot of other much more significant stuff than Static vs SPA. You can even spit out the html sitemap if you're so inclined specifically for the crawlers or use SSR etc etc.
I did! Thanks to both of you, this was driving me crazy. :D
Theory helps, and for many is hard to learn through online courses.
the only place where they value degrees above experience are the places like public sector where you really don't want to work.
I've been plugging away at my alternative syntax compiler for WebAssembly, which aims to stick as closely as possible to JS(with flow). I've finally got it to a point where it can be used to write simple demos. Looking for help, check it out! * *Walt* - https://github.com/ballercat/walt * Checkout the Demo examples - https://ballercat.github.io/walt/
The only job posting I see for Google are typically for PhD's and people currently enrolled in PhD programs. I'm sure you could get in with less, but certainly it does help for that path.
I guarantee you the ones made a decade ago didn't work with my cell phone so perfectly. The tallest bar was perfectly fit for my screen. It was a great mobile experience. 
"That is left as an exercise for the reader" ;) 
Self learning is great but a masters degree means I have to prove nothing. I have worked with great coworkers that have no formal education. I also worked with Asholes trying to get hired despite not having the competence. Now to be fair the only part of my education I fairly use is algorithm courses. There is reasons why some approach is better sometimes. And spotting a NP problem instead of burning time on it is one. In your case I wouldn’t get it. I would instead get a few certificates to balance your profile and show that your good in what your doing and capable of fulfilling the baseline for the certification. 
I want to create an interactive triangle animation like the one in oxenfree: https://youtu.be/l4TrcdNaLwM?t=1m44s I thought i could do this with the anime.js framework. My problem is, I want the animation do have different phases. you have to press a key, so the phase keeps running. If you release the key before the phase is finished it will slowly go backwards. I have managed to create the triangles (as an svg) and to trigger them being drawn when a button is pressed , but not in phases. My second problem is: Do you think that "styling" the paths like those in oxenfree is possible via js ? I'm thinking about the animated gradient, the shaking effect and so on. Should I use something different. In the end I want to run everything on a raspberry pi with a mic and a pitch detector, so I can trigger the animation via sounds.
If you can't learn by yourself online, then it's the wrong field for you.
A masters might matter more in Europe maybe? But in the states if you're knowledgable and have experience then its basically equivalent. 
This is the animation being triggered by a pressed button. No Phases no fance effects. When I keep the button pressed, the animation keeps starting again and again. https://imgur.com/a/bc9mJ
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/8eGoPGh.gifv** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Have you tried applying to any of these big places you think you want to work at? Because they are so big, they always have a ton of jobs at any career level. If they turn you down, i'd suggest asking them what other education they'd suggest.
I assume if script A is dynamically requiring script B there's a good chance script A needs something in script B. script A is not going to wait for script B because script A is already loaded, that's why you need the onload. if you're only requiring script A because another script C requires it and you're loading script C dynamically too then you're right. I just don't see that as being the more common scenario. 
And it's a hell of a lot easier than setting up async in a synchronous language 
Most of a comp-sci degree would be wasted if you're only going to be applying it to JS.
People in /r/webdev are very serious folks, and a dry sense of humor doesn't go down well ;-) 
[removed]
&gt; I know a few dev who are smart but mediocre and they just drilled on the Cracking the Coding Interview book for 6 months and they're now working at Facebook Are they still mediocre after that 6 months studying the book? If so this seems like something is very wrong with the interview/selection process. I haven't read the book, but the title doesn't suggest that there's much long term value apart from landing a job.
I've used https://www.prerender.cloud/ as an alternative to SSR with really good results. One benefit of this approach is that you don't bog down your server with the render calls (especially if there are network requests etc).
Yeah I agree. A masters degree will help tremendously with getting better interviews but so will more than 5 years experience. You will be tested the same in an interview anyway and after that the path to senior developer has very little to do with your education, but more about how much value you provide in a team.
Mhmm yes if that's what you're talking about then you'll need a more sophisticated solution like something you're describing ( basically re-implementing RequireJS )
I'm pretty sure Google doesn't wait for most SPA's to render fully. It wasn't indexing mine at untill I did SSR. And even if it does, stuff like Facebook Opengraph definitely doesn't. My guess is that once your app/website is above a certain popularity Google does wait to render Javascript fully, but not for small apps.
good points. I know Google can index spas but Google won't brute force your filesystem to see what exists and what doesn't. like you said, you have to tell Google these pages exist.
It sounds like a harsh statement, but I agree. The field is changing so much. Even theory is changing, so if you can't teach yourself you're going to have a really rough time.
&gt; Be aware that even with this solution, the SEO rankings are not as good as if it were a server side website Do you have any thoughts as to why this might be? First time hearing this...
[removed]
in pretty sure Google's crawled don't render js, just fyi if you have js getting page content
please take time to format your code.
Richard Stallman has a PhD.
They absolutely do run/render JS for a few years now ( since late 2014 IIRC ) ( up to a reasonable limit of course ). You can even try it out yourself with the "Fetch as Google" tool and get screenshots of the page that's loaded etc: https://support.google.com/webmasters/answer/6066468?visit_id=1-636430867006785902-659810965&amp;rd=2
Public sector (government), Universities and Colleges (because they promote their own bullshit), and sometimes medical fields. Personally, I haven't found any of those areas to pay very well, BUT sometimes you can find a low pressure job where you mostly screw off but make sure some server or system or something runs smoothly. It's a low paying gig, but its a jerk off job with benefits and unless you really fuck up you won't be fired. If that's the kind of career you want. A masters or a PhD in computer science is only useful if you want to specialize in something like processor design or something advanced and then you want to get a job making new chips to keep up with Moores law or something. 
Here's their late 2014 announcement: https://webmasters.googleblog.com/2014/10/updating-our-technical-webmaster.html
I’ve used this on many SPA projects and it works great. The developer is super helpful too if you get in a pinch. Always responds quickly. 
i have a site where the links are updated by js, i get hits on the un-updated links by Google crawlers constantly, and rendered pages almost never. there's a difference between what Google tells you they crawl and what they actually crawl, imo
Same with Dennis Ritchie, both in physics too.
Even then, you're better off working for a company that does those things. You don't need a masters degree for that. Schools usually teach 10 years behind anyway.
I'd recommend a software engineering masters or other applied science degree over a pure comp sci masters degree. Its usually less total credit hours so its also cheaper. There is less focus on the theory and more focus on the business of software development (hardcore testing, project management, metrics and maintainability, architecture and planning, large scale integrations, etc). One of the best courses I took during my masters was about design software for testability. I never realized how many ways you can think about an if statement when it comes to test execution until that course. A computer science degree beyond a bachelors is almost certainly a waste unless you plan to stick with academia or want a job in a research lab.
Not if the gained knowledge is applied to optimizing the actual JS language and infrastructures. 
ive never heared of Elm but it seems so good thx
Certainly. And that's one the big issues regarding SEO since nobody really knows what's going on under the hoods of any search engine. Concerning your site it really depends if you're updating the links in a timely manner, how often they are updated etc. Could be for a more complicated case that you'd need to generate sitemaps and/or edit robots.txt in the least etc. Could be that if you have html content with links already so that the crawler doesn't consider the JS you run to be significant - then you need to tell the crawler that it is by either editing robots.txt or generating sitemaps. At least those are the basic steps.
Except these companies insist on asking theoretical comp science algorithm based questions rather than testing based on software engineering experience. I'm only slightly salty from interviewing with Amazon earlier this year where instead of being interested by the various web apps I've built, they still insist on having me whiteboard code algorithm questions that are not relevant to a lot of web or app development today. 
Serious question: how much did you know prior to your CS undergrad for you to come out knowing less than you went in with? I'm only a 2nd year CS student (also in the UK) and already I know vastly more than I ever knew before starting. 
Nope. Have the experience and have the MSc. The MSc has been useful maybe 1% of the time
Same situation as other bloke. BSc in computer science from a decent UK uni. Did a MSc in eBusiness. Not 1% of what I did at Uni have I used in 15 years in the industry. I started off as a junior developer and moved to leading a department. Lecturers rarely care - they just want their grant money to keep rolling in and to snag a PhD candidate now and then. As someone who now hires people, I'd look at experience before even looking at qualifications. I went to Uni with a load of people who knew the answers but would never be able to write a line of code.
It does resume the generator in your example. It was paused after the `yield 1` statement, and calling `.throw()` resumes it there, with an exception injected. That causes the `catch` block to run, and then the generator falls off the end of the function, so it's done. If you had written this: yield 1; throw ...; yield 2; ... you never would have expected the `yield 2` to run, so this should be the expected behavior. 
Which it won't be. £9k a year in the UK... 
At work we only use Node on the backend, but our backend is not that complicated. It mostly consists of communicating with other APIs and some MongoDB backed CRUD.
Totally. I would say there's clearly value in the deeper knowledge of advanced algo/data/etc theory you'd [hopefully] gain from a masters program. But honestly unless they plan to pursue a more academic career, reasonably disciplined self-teaching and practice (and ofc interest/curiosity) is probably the way to go imo. 
could be. it's not a fast rendering because it's calling 3rd party sites. can't say if a faster render would fix it.
The question is what do you want to do with your career? * Research at a top-tier institution? Get the masters, but realize that these are highly coveted and rare positions. You won't be leading it, but if you specialize in a certain aspect then you may find a place on a team. * Program? You barely need the bachelors with 6 years of experience. * Management? MBA or PMP would be more valuable, but neither are necessary if you can prove the managerial experience. * Teaching? You won't need it with kids, but you'll want to eventually get your doctorate if you want to teach at the collegiate level. 
Saving this for later
Uh no. You're full of shit. There are plenty of specialization fields you will have no hope of entering without some kind of graduate degree.
No need to feel embarrassed, we all gotta start some place. I'd really check out the articles / tutorials on MDN, they cover a lot of the basics in a really complete and simple way. It will clear up a lot of the basics. That being said, feel free to post some code if you run into any issues. Best of luck!
I have a master degree in software architecture and have been working as a JS developer for 3 years now. All I can say is that my degree was not even about web apps, mostly about architecture as a whole, but even if I learnt JS by myself, I learnt a lot of theoritical knowledge and even if I don't use it everyday, it's is really useful when you need to build something that will last for years and not break when you reach tens of thousands of users :) So I'd generally say yes ! Except if you can find a very good mentor that can teach you everything without taking a degree !
I have a master's degree in computer science, which I pursued immediately after I got my bachelor's. I've been a developer in trenches for over 25 years now, primarily focused on computer graphics, with a bunch of focus in the past several years on web development (front &amp; back) doing data visualization (JS, D3, React, and all the rest of that menagerie). I've found the master's degree to be useful over the course of my career — sometimes it makes a difference, sometimes not. I like the fact that it's another little tidbit that differentiates me from the pack, and I'm glad for the experience in pushing forward an area that was my own, with no prior footprints. Doing the research, presenting it clearly and well, and defending it to a panel was something that was a great experience. In your case, I'm hesitant to recommend it, however, for several reasons. First, you must be aware that you'll be taking a massive financial hit to do so. In terms of increasing your value as an employee, I've heard and agree that two years spent getting a master's degree is worth (_in general_) two years experience. I say "in general", because that's definitely _not_ true when it comes to a particular field. You may not have the option to get two years work experience in the field where your passion lies, whereas you have the freedom to immediately pursue that field and gain the experience as soon as you write the check when getting it through a degree. On completion, you have a very respectable head start in that direction. For me, it was computer graphics or bust, and so was a great choice for me. For you, this might make sense if you want to jump into a field where you would be unlikely to get a job there right now (say, machine learning, or language design). Another bit of caution is that a master's degree is about _narrowing_ your focus to a specific area of computer science. It's not like a bachelor's++; it's about driving the field forward in one specific specialty. (A Ph.D., of course, is even more narrowed.) I get the sense from your post that you're looking to establish your credentials as a programmer. The master's would help in some situations, but as a second to your experience, in my opinion. And finally, the loss of income would hurt even more than the tuition costs. If you are looking to bolster your compensation, it's a long shot that it would be worth it in the long run. If you plan to continue your focus in JavaScript, I'd recommend that you continue your current course.
there IS something wrong with the technical interview process for an overwhelming majority of companies. it's absolutely broken.
Hey dude, just a heads up you're making your API key public here. So unless you want people spamming your channel, I'd hide that info and probably change your API key. Usually what I do is use [dotenv](https://www.npmjs.com/package/dotenv) to hide all my private stuff in a `.env` file and just add that file to my `.gitignore`. All that being said, here's how I'd write it. require("dotenv").config(); const {API_KEY, CHANNEL, GUILD} = process.env; const DELAY = 30 * 60 * 1000; // 30 minutes const Discord = require("discord.js"); const bot = new Discord.Client(); const spooker = Spooker(bot); bot.on("ready", onready(bot)); bot.login(API_KEY); spooker.start(); function onready (bot) { return () =&gt; console.log(`${bot.username} - (${bot.id})`); } // get the channel to send the message to function get_channel (bot) { return bot.guilds.get(GUILD).channels.get(CHANNEL); } // make a Spooker "daemon" function Spooker (bot) { let spook = true; let interval = null; return { stop : () =&gt; clearInterval(interval), start : () =&gt; interval = setInterval(tick, DELAY) }; // every DELAY ms, run this function tick () { get_channel().send(spook ? "Spook!" : "Boo!"); console.log(spook ? "spookified!" : "boo-ified"); spook = !spook; } } 
alright so I've reached a final conclusion. What I have **is** set up correctly, and **does** work exactly as expected in [JSFiddle](https://jsfiddle.net/gj1axd2a/). However, the second the code leaves that website, it loses some of it's functionality. The website I have saved locally does not have a working "active" element, but when I paste the exact code into JSF it works perfectly. Is there some library I'm missing, or something I'm overlooking? I have the resource JSF listed added to my html as well: https://code.jquery.com/jquery-3.2.1.min.js
You're looking in the wrong places then! 
Learning programming versus learning CS are two completely different things. That’s a very bold statement that I disagree with completely. You can get by at a job programming not knowing theory, and be decent. If you want to move up and start doing higher level design, a background in theory and knowing how computers work is helpful at times, and you should at least have an understanding of things like big o, etc. ... something that college will drill into you. Again, it is possible to learn theory online, my point was many find it easier with instruction, and being able to ask question, etc.
Then why we see in job description for sw engineer in top companies that they prefer msc or phd graduate??
Oh thanks, I usually keep that hidden but I was tired and didn't realize that I hadn't hidden that, so I'd better change the bot id just to make sure, since it's still in the revisions.
Are you familiar with git? Because if you do, you could create a repository of your project and share it with me.
Second that, an actual code would help a lot
If you only need the one extract text plugin you should do this const ExtractTextPlugin = require('extract-text-webpack-plugin'); module.exports = { // ... module: { rules: [ { test: /\.css$/, use : ExtractTextPlugin.extract({use : ["css-loader"]})}, // ... ] }, // ... plugins: [ new ExtractTextPlugin('bootstrap.css') ] } If you need multiple, you have to add the plugin instances to your bundle (not a new instance). const ExtractTextPlugin = require('extract-text-webpack-plugin'); const extractCssPlugin = new ExtractTextPlugin('bootstrap.css'); module.exports = { // ... module: { rules: [ { test: /\.css$/, use : extractCssPlugin.extract({use : ["css-loader"]})}, // ... ] }, // ... plugins: [ extractCssPlugin ] } It looks like you're mixing these two together.
Typical closure problem. When `setTimeout()` executes after 3s, it's going to use the value of `i` _at that time_, because the function _closes over_ the values from the surrounding block. Old-school way to fix it: for (var i = 0; i &lt; arr.length; i++) { setTimeout((function(i) { console.log('Index: ' + i + ', value: ' + arr[i]); })(i), 3000); } ES6 way: for (let i = 0; i &lt; arr.length; i++) { setTimeout(function() { console.log('Index: ' + i + ', value: ' + arr[i]); }, 3000); } There are more ways around it, but those are probably the most idiomatic.
I'm not familiar with git, but I could definitely share the files/zip if you'd be willing to take a look
Sure. How would you like to share it? Could you share through Reddit?
that stuff is mostly comp sci bachelors stuff though AFAIK from various reddit comments and linked articles.
I think that you don't need CS to be the kind of developer that uses React expertly, but I bet the guy or girl who _started_ React did have a CS degree.
People with degrees still make more than non-degreed people, on average.
&gt; ä And hey, seems that printable-characters does respond correctly with that particular letter! ``` &gt; const { strlen } = require ('printable-characters') &gt; strlen ('ä') 1 ``` It does this via the `Array.from` hack (`Array.from ('ä').length == 1`) The thing it does not handle is multi-component emojis, this is yet to be done.
The new playlist by Daniel Schiffman on The Coding Train YouTube channel might be nice. He uses p5.js though
Do a project management diploma or some businesses add-on. It for a decade then manage, and code a bit still probably.
That would be GitHub, StackOverflow, Gitter or Twitter – depending on occasion :D You can find more details in https://docs.ckeditor.com/ckeditor5/latest/framework/guides/support/getting-support.html.
I think the default being very low is fine, it's only the prompts for larger sizes that are needed. I don't want every random domain thinking they can drop up to 500 MB on my phone or computer without my knowledge or permission. 
Mine's in Graphic Design and now I build spas. Got no idea how that happened.
MS in CS is pretty theoretical. It would be great for getting into companies whose core competency is actual development of new IT technologies. 
They often want people who can do research while doing computer science work. Source: Got to talk to some PhDs working at a few big companies. Interesting stuff
You don't need a degree to pursue software engineering as a craft. That's not to say there isn't intrinsic value in the depth you can get from a master's where you're learning knowledge for which there isn't yet a book.
Pretty much. I have a bachelor's in computer engineering so I'm very familiar with algorithms. Just haven't used them much in my software engineering job of 6 years... I ended up studying a bunch of interview books but still was nerve wracking being asked to code things on a whiteboard when normally you'd look up an answer if you get stuck. 
I think that's because Google doesn't need to bother with posting 'React/Javascript Dev' when hundreds of applicants are contacting them each week for those very positions. Source: have a buddy who landed a front end position at Google .
Try checking out Performance.now()
I knew HTML + CSS. I guess to score myself like a 7/10 at the time? This was long before responsive design. Back when rounded corners meant 4 floated images. PHP I was probably a 3-4/10 but I left like a 6 (it's my experience since that's taught me how little I knew). JS maybe about the same - at least for basic frontend stuff. When I say I came out knowing less, that's more of an exaggeration than a truth, but I'll tell you this much for free - even back then they were teaching stuff that was years out of date. The one 2-hour PHP session we did involved copy / pasting code from a word document, and it didn't even work (not intentional). We were asked to write a website in Coldfusion. Never heard of it? Yeah, there's a reason for that. But again, I've got to stress how useful it's been for me personally. Having that degree opens doors because it's a standard requirement in a lot of companies for even getting to the interview room. It also opens up salary brackets and sort of speeds up the career path. 
Usually I would say it is in bad faith to post a company's interview questions, but this is the standard, basic, "what is a closure" question you'll see in probably 50% of interviews. The interviewer didn't go to the next question because they forgot, they moved in because they had no faith you'd be able to answer it. Amazon's internal interview training stresses that the candidate should have opportunities to show off what they do know, and to not waste time with things they obviously wouldn't know.
Ah, gotcha. It's useful to keep in mind that `public` and `private` on methods/properties just end up being erased - much like `readonly` and `?` for optionality, they're design time and don't conflict with the ECMAScript private fields proposal.
Try to add 'bootstrap-loader/extractStyles' in the entry point. Read here for details: https://github.com/shakacode/bootstrap-loader#extractstyles Hope that helps.
Neat 
Google's js crawling is nowhere as reliable as you would need. So proper approchat is to use some server side rendering of (react, vue, angular, ...), or write dual code (server code would only need proper informations in markup)
Thanks for that technically true and totally useless input
If it's any consolation, I too fucking hate that. Had someone ask me to turn ints into strings without using toString methods.... Took me ten minutes just to wrap my brain around that nonsense
Can't check source but are you using webaudio or audio tag? I guess web audio. Also iirc some events as click have Latency in some scenarios, but seems your using midi and keyboard events?
If you want to explore bleeding edge tech in machine learning it would help to have a degree in cs but you would still have to learn tools by yourself but with a masters it would open up PHD for you where you truly get to play with blessing edge tech and more lucrative researched focused CS jobs like in Deep Mind
Speaking as a lead engineer at a startup working primarily in js, I've found that when hiring juniors, generally a junior fresh out of a cs degree will generally perform markedly better than one fresh out of a 6 month js webinar. Looking at mid level, I've found that those lines start to blur, and it doesn't particularly matter too much. That being said, again I've still found that there is a cs theory knowledge gap at this level between those with a degree and those without. And at senior level there's even less difference (though again there's always exceptions to this..). Though personally given the choice between two identical candidates differing only by the degree, I'd lean toward the degree candidate, ultimately at your level it comes down to how you do in the interview process. How well did you communicate throughout the process? How good was your solution to the technical test? How clean was your code? How well did you communicate during the interview? Do we think you'd fit culturally into the organisation as a whole? With your experience level, I wouldn't worry about going back. You won't learn as much as you'd think you would, and you'll end up $X in the hole for little gain. That being said though. You don't know what you don't know. And the key to being a great engineer and not just another code monkey is to seek knowledge. Gorge yourself on anything and everything you can. Drink that shit up. In your case, I'd definitely look for some free cs courses online to find out what you need to research. IIRC MIT (or something) has their coursework available online for free. Find out what you don't know and make it a core part of your knowledge base and you'll do better than most candidates out there.
Don't master in computer science. Master in something more niche, like cybernet security, data science, etc.
A Master's degree is useful for some government jobs. HR have no clue what they are doing, so the degree might get you past HR.
lol it is not in bad faith to post a company's interview questions - if their interview process is so bad that it can be gamed by simply pasting the questions, they have a bad interview process. 
&gt; archaic micro enhancement It's not archaic, as long as you're not using a compiler. IIFE serves not to polute the global scope unless explicitly stated. What other technique can be used for this?
did you ever sell software as a service for any of those jobs? seems like a great way to earn residual income. 
Because top companies need a way to weed out thousands of resumes. They don't really care about the degree, experience is worth more in most cases, but it let's them skip 95% of applicants and only focus on a couple qualified people to interview. 
It’s aesthetic only. Use it if you like and not if you don’t.
Depends on how well you put your study time to use. Obviously if you study hard you'll study harder than anywhere else, at least that was my takeaway.
You will need to use the getElementById method from the Document object to get the value from the userInput field. var name = document.getElementById(“userInput”).value; I would also remove the onclick attribute from the button element and replace it with the id attribute. Add an event listener in JavaScript to catch the click event on the button. function btnClicked() { // Add logic for when button is clicked } var btnElement = document.getElementById(“btn”); btnElement.addEventListener(“click”, btnClicked);
Isn't it in the arr.length, which is 4, yet the last addressable index is 3?
Hey, I don't get your answer. I just shared the link and didn't asked a thing.
I also work as a developer without having a CS degree. A while back I considered a master's in CS, but ultimately it's just too damn expensive. When I crunched the numbers, I found that for Drexel university -- a well-regarded engineering school in Philadelphia where I live -- one credit in the online MS in CS [costs $1228](https://online.drexel.edu/online-degrees/engineering-degrees/ms-cs/index.aspx#tuition). That program requires [45 credits to graduate](http://catalog.drexel.edu/graduate/collegeofcomputingandinformatics/computerscience/#degreerequirementsmstext). Total cost: $1228 * 45 = $55,260 (assuming no financial aid). I opted for taking classes on Coursera. I'm working my way through this specialization in [Data Structures and Algorithms](https://www.coursera.org/specializations/data-structures-algorithms) through UC San Diego. This course is subscription style so you pay ~$50 a month. Even if you complete the whole specialization you're only out a couple of hundred buck and you get a certificate at the end showing you completed it (you also have the option of auditing the course but you don't get access to everything). I really like the instruction and the format and feel like I've learned a lot. There are video lectures and then most of your grade comes from programming assignments where you implement algorithms that have to pass a test suite, so it's similar to "real life" programming. If we assume that one Coursera course which runs you about $50 dollars is equivalent to a one credit course at a major university, that's about 25x cheaper. The great part is you still get very high quality instruction at a fraction of the price. If you're just after the knowledge, that seems like the way to go.
Yeah, I'd agree with that. 
Woah, thanks. I had no idea simply changing "var" to "let" would make it so the value of *i* was "held" until after the timeout finished. I definitely need to look more into scoping and closures. Thanks again 
The answer you got seems to make sense. What is your confusion still?
There is no point in dep injection frameworks. You can do all of this with pure JavaScript with less code and concepts. See https://medium.com/@pyrolistical/factory-functions-pattern-in-depth-356d14801c91
Use eslint --fix, never talk of this again...
Thanks for taking the time to reply and provide feedback. And just to make clear to everyone, I keep my word/promise when companies tell/ask me not to share any details about their interview processes with anyone. Amazon did not have any confidentiality terms to their interview and so I posted this question to (1) find out the answer because I am really interested and (2) to potentially help others who might also have trouble with a question of this sort. And thanks for the insight on why the interviewer probably went on to the next problem. In the beginning, the interviewer said he was going to ask me 3 to 4 questions, but he ended up asking me 5. I think he asked me an extra one because the question he asked me about right before this one, which was also about closures, I answered very quickly (because it was a very low level closure/currying problem): // Write a function that would allows you to do this. var addSeven = createBase(7); addSeven(10); // returns 17 addSeven(21); // returns 28 var addSix = createBase(6); addSix(2); // returns 8 addSix(6); // returns 12 So, yeah, he probably moved on without speaking more about the question that I was getting wrong because he had already assessed my knowledge of closures and he wanted to move on. Thank you.
My codebases are all without spaces, which I like, so I don't need to fix anything. 
Depends on the company and the situation. If you plan to stay within your company it won't help that much. If you Plan to move to a different company and advanced positions then yes they will be looking for it. It also allows you to demand a higher salary. You will have to be more particular in the positions that you take. 
It's all about readability. This term is highly subjective, but editors can help you if you end up contributing to open source, want to keep your style while you code but want to target theirs.
It doesn't matter at all, just pick a style and stick to it. I personally just run prettier now so I never have to think about it. Had to find the option to fix this though because it drove me crazy: let x = { a: 10 }; let y = [a, 10];
When I try to add more inputs it just replaces the original 
I always use spaces for objects, but not for arrays, inside parentheses, or when destructuring an object. Why? I don't know. Just makes it more clear what's going on since curly braces are used in many different places in JS.
As much undergrad schooling is needed to qualify, it may not be as quick as you'd think. Most masters programs require similar fields of study or adequate undergrad requirements to be admitted in the program. At least from what I've seen. Best bet, see if your company or a different company is willing to sponsor you. 
Use the Performance tab of your dev tools to profile your code. And if you use React 16 you'll get cleaner stacktraces to read.
&gt; https://github.com/shakacode/bootstrap-loader#extractstyles Ahah, this was it! I should have performed a deeper documentation study. Btw, I would like to forward my gratitude towards your tutorials. Your webpack series is what made the complicated tool click for me. =)
Waterloo, Ontario. They're hiring a Product Manager however that doesn't need a PhD!
You probably lucked out. Nobody I know who has worked at Amazon has liked it. It's probably good for a year or two if you're looking for God experience, but long term it's not a great place for engineers. It's an MBA-run place now, and filled with H1bs and younger, more naive engineers who get worked to death to make the management teams big bucks. 
&gt; I would love to land at one of the big companies in the JavaScript world, like Facebook. But I’m concerned about my academic background being insufficient when it comes to qualifications. If you interview well, know your compsci theory and have a portfolio/github profilew that demonstrates your skills and knowledge, you *shouldn't* find a lack of explicit CompSci qualification holding you back. It's one of the best things about software engineering as a discipline, and the kind of companies that tend to get hung up on it in 2017 tend to be the shittier ones with a less enlightened approach to hiring anyway. Also, while a batchelor's degree (of any kind) *can* be a helpful door-opener in terms of landing interviews with some companies, any academic degree beyond that is basically worthless for getting jobs - at best it will do nothing, and at worst some employers may be slightly wary in case it marks you out as "an academic" who's more interested in academia and theory than industry and practical applications. Don't get me wrong - it's great to have a good grasp of academic compsci theory, and there's certainly nothing wrong with pursuing higher degrees for your own education. However in terms of *getting a job* it's likely to be relatively worthless, unless you want to go into something really hardcore like machine learning or data science.
I received the exact same question.
I'm using a library based on Tone.js using mp3 samples. The midi event code hasn't changed at all between the two versions.
(Business) Information Systems would be more specifically related to what you're doing. You can specialize within as well. 
Please note that before you write this logic yourself there is a [standardized definition](http://unicode.org/reports/tr29/) which you can reference for precise semantics of what a grapheme is. Now it happens that this is rather complex which is why there's a [proposal](https://github.com/tc39/proposal-intl-segmenter) to add it to JavaScript itself. I wouldn't recommend implementing this yourself if you can avoid it, for Pesthuf's comment you can *already* use the `.normalize` method to convert that string into a single character (it just happens that older Node versions don't support it): const s = "\u0061\u0308" console.log(s.length) // 2 const normalized = s.normalize('NFKC') console.log(normalized.length) // 1 Also note that iterating a String gives surrogate pairs so you can even reduce those: const s = '🕑' console.log(s.length) // 2 const codePoints = [...s] console.log(codePoints.length) // 1 console.log(codePoints[0].length) // The clock itself still has length 2 
https://www.toptal.com/developers/sorting-algorithms
For all the reddit non-beliebers: https://www.toptal.com/developers/sorting-algorithms
It's just a convention. It's easier to read because people are used to the convention. It doesn't affect the code at all in this case. Use whatever you feel is most readable. But if you are contributing code to someone else's project, use their conventions. Whether you think no spaces looks better is irrelevant, maintainers don't have time for these pointless arguments.
I never graduated college, went right into my career, and Facebook contacted ME for an interview last year. Even Zuckerberg did t finish college. I also have never had trouble finding work. In our industry, people care more about what you've worked with and done, as opposed to what degree you have
[It's here where redditors downvoted me for](https://www.toptal.com/developers/sorting-algorithms)
I'll try to explain the way we approach problems like this. Creating UI is a 3-step process: **1. Create the static view component (HTML+CSS).** At this point you are concerned with design, not the behavior. The step is finished once your component in the browser looks exactly like the design specified. **2. Lift the state.** Because you are using vue, add something like "isMenuOpen: false" to the components "data" property. Go back to your HTML and use the created state in a dynamic style: v-bind:style="{ transform: isMenuOpen? 'translate(0)': 'translate(-100%)' }" This step is completed once you can manually change the isMenuOpen in the code and see that your menu is closing and opening. **3. Connect the events.** This is a little bit more tricky because you are trying to track a scroll event that is outside your component. You'll need to manage event listeners in the old school way. Add this to your component: methods: { handleScroll () { this.isMenuOpen = window.scrollY === 0 ? true: false } }, created () { window.addEventListener('scroll', this.handleScroll); }, destroyed () { window.removeEventListener('scroll', this.handleScroll); } After this step everything should work! This also gives you a way to be formulate a more specific questions about what you are struggling with. Are you having trouble with the first part? Setting up the vue or making the vue component appear in a correct position? Are you having trouble connecting the state with some other components? Are scroll events giving you a headache? They are surely fun to deal with on mobile and Apple devices. As you can see, it's easier to answer questions that are more specific.
To do web dev? Jesus, no, you don't even need a bachelor's. If you're thinking about going back into academia, at least do it for a career in machine learning or quantum computing or something.
&gt; click/see-through feature Whoa, that's really impressive -- did you come up with that yourself?
You are welcome, thanks for checking out my Webpack YouTube tutorials, really appreciate it!
Alternatively: setTimeout(function() { for (var i = 0; i &lt; arr.length; i++) { console.log('Index: ' + i + ', value: ' + arr[i]); } }, 3000);
Why Antichess, just for something non-trivial, or because you like it? Also, I haven't heard of anyone using Lynx in so long... cheers for making sure it works w/o JS!
Yeah, that works on mobile, but OPs site was real nice too. 
Also, it's not that we didn't believe you, it's that your criticism felt a little harsh, and not constructive. OP made something good and fun and wanted to show it. It's not like he said it was unique and perfect. 
Super ambitious, but I love it! A C coder I am not, so I concur with your problem assessment.
Wow, thanks. That's a good idea. I hadn't even considered that as an option. 
He also didn't say it was a copycat. There are other similar ones, too.
A real nice copycat but the link (I have others) is easier to read.
hasn't helped me yet. 
I'm not entirely sure if there's a race condition between the 4 timeouts that are being set. My gut says says yes, but my knowledge that JS can be browser specific black magic says ¯\\_(ツ)_/¯
Alternatively 2: const arr = [10, 12, 15, 21]; function printIndexAndValueAfterThreeSeconds(arr, i) { setTimeout( function() { console.log('Index: ' + i + ', value: ' + arr[i]); }, 3000 ) } for (var i = 0; i &lt; arr.length; i++) { printIndexAndValueAfterThreeSeconds(arr, i); } Then you can show you're really into descriptive variable names and code that actually has obvious behavior.
Not really. We let the Google bot crawl the site site directly instead of serving from prerender. The issue I see is that you need to fiddle a lot of switches to get decent SEO with SPAs. I feel that spending that time up front in figuring out a server side rendering / static HTML site generation might be worth it. Again, it depends on your SEO requirements. If it is basic, and doesn't need a lot of customization, use a headless browser / service liked prerender. 
You were close on the fix. for (var i = 0; i &lt; arr.length; i++) { setTimeout(function(arr, i) { console.log('Index: ' + i + ', value: ' + arr[i]); }, 3000, arr, i); // &lt;-- add arguments to setInterval }
This solution would probably not be accepted, or would be marked down, due to 'coloring outside the lines' so to speak. Here's the version of this test that I give, which doesn't involve a `setTimeout()`: https://jsfiddle.net/m60cLkrL/ Obviously the above solution won't work there.
The alternative 2 is a bit different from alternative 1 though, and is an alternative to using let. Using transpilers, let creates a scope, which can be done alternatively using a function. The reason why I say alternative 2 is different is because, in alternative 1, setTimeout is called only once; which means only 1 event in the event loop, while here, it is for every val in the array; and the setTimeout varies from 3000ms to x + 3000ms, where x is whatever the main execution thread is doing. 
Yeah that's what a lot of people have told me. I just wanted to move to the city and get it on my resume, but taking to the interviewers they didn't seem enthused by their jobs. My company has been great for 6 years so no big deal, I'll just have to find some other company to pursue if I want to move to Seattle or Cali. 
Not a race condition at all -- and though browsers may have their own bugs, they all [now] implement the ECMA standards, and this behavior is very well defined (see our sidebar for a link to the spec). What you did is creative, and does 'solve' the problem, but only because you've changed the problem itself. https://jsfiddle.net/m60cLkrL/1/ How would you solve that? 
Exactly. That's an exercise for 40 years ago. All their questions are like that when you'd never have to manually convert a data type IRL. I'm not going to waste time reinventing the wheel.
Here ya go. #HTML &lt;p id="coding"&gt;&lt;/p&gt; &lt;button id="add-btn"&gt;Add&lt;/button&gt; New Quality &lt;br&gt;&lt;br&gt; &lt;button id="del-btn"&gt;Delete&lt;/button&gt; Remove Quality #Javascript window.onload = () =&gt; { // define your qualities array at the top of this scope const qualities = ["Creative", "Original", "Innovative"]; // get references to the relevant DOM nodes const add_btn = document.querySelector("#add-btn"); const del_btn = document.querySelector("#del-btn"); const text = document.querySelector("#coding"); // attach the add and del functions to the correct buttons add_btn.addEventListener("click", add, false); del_btn.addEventListener("click", del, false); // add a new quality to to the array function add () { // prompt the user to add a new quality const response = prompt("Add another quality?"); if (response) { // if user responded, add the user's quality to the qualities array qualities.push(response); // update the displayed text update(); } else { // user chose not to add a quality, so do nothing } } // remove the most recent item in the qualities array function del () { // remove the most recent entry from the qualities array qualities.pop(); // update the displayed text update(); } // update the text displayed to the user function update () { text.textContent = qualities.join(" "); } }; 
come to the USA
Oh man, I always forget about the extended arguments to `setTimeout()`... +1 for reading the docs!
I believe the general rule of thumb is 1 year of experience for every year of degree you are missing. With 6 years of experience and a Japanese bachelors, I'd say the masters is kind of unnecessary.
Nah. I like the cold.
Cool, good luck!
What kind of cookie is it? [HTTP-Only Cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies) are meant to only be used by the server.
Depends on the company but I’d say it’s generally not worth it. However, one local IT job description I read says the company equates 6 years’ experience to an Associate’s degree. That’s insulting if you ask me, but a degree matters more to some companies than even time-on-job experience. 
Ah shoot I was setting that to try to be secure. Is it fine not setting that if the cookie doesn't have any sensitive information?
If there's no sensitive information or concern for session highjacking, it should be fine. You could also pass information in the post response, if the server doesn't need the info again.
6 years experience is roughly equal to a masters in computer science. I wouldn't waste your money unless you're having a problem getting good interviews.
I removed the flag and actually am not able to access the cooke still
Are you able to see it in your browser tools?
Only way I'd consider getting a masters is if I can do it on the side and it doesn't cost me anything. Certainly wouldn't leave the industry again for school. I did that for my BS and honestly it wasn't really worth it for that.
If you use node you can render your vue.js components server-side. It shouldn't be a problem.
I can see it in the response headers when inspecting the request from the browser tools but it's not when switching to the Storage tab -&gt; Cookies dropdown of Firefox.
Awesome, thanks a ton for that. The only other issue I'm really faced with is having the getElementByID to show as a constant without being called by the input. I hate to keep bugging with questions, but I'm wondering if this will work somehow?
Ah I was worried the cookie could be hijacked to make a request to another website like mybank.com.
If none of your peers and/or boss has a Master's then you definitely don't need one. In the computer science field I think it's pretty rare for an MS to actually be a benefit.
Is the browser sending the cookie back to the server if you make another request?
Yeah, Alternative 1 is just more cute than anything (you get to solve it by just rearranging the code). You'd probably still have to do Alternative 2. 
You can assume you can do the ES6 way, since they used 'const' to define the array.
It's not, I don't see the cookie on the request when making another POST
They changed the behaviour so you can click outside of the alert box. You can just close the tab now.
I'd recommend using a small framework like Mithril for your game UI stuff. See [how easy it can be](https://flems.io/#0=N4IgZglgNgpgziAXAbVAOwIYFsZJAOgAsAXLKEAGhAGMB7NYmBvEAXwvW10QICsEqdBk2J5YxAAQBXODABOmHBIC8EgORqAOmm1C4kulgAO9ESonBtEiQDcIMAO4AKAJQWr1iXJjEpCiVhOagAmEDZqFB6eAUFGEeoAmrR+0rIKXBIQcIjqEgDUqfKKMC6RaNHWgWpxFOoAosJyEgCqacU5EVEVVRBoRlLE8ZblFdHEAJ5GMB2MAB6DZaPRNhhQUtOF6TiLS9b0vf3EOVj4DhDEhACCxMRyQStrMPEP6yoAfO4ju9YyRRmqLxgXVGrBcwM8oPBYK+Emh1lY2gROjQJywyQYTmCtGoUhwDHwACNaMFxrVDCY0CJoWwOCBinh8NQ4AIaPRGMweGwALpUKC9ADWCBQnBweCw50IcmglBAfnIPBIxCM2QA9CqpH1+QBzRm0LAq8UXKVQAACAEZ8BaACwGiXG-D8GUTKZ4R2sLmsIA) without a lot of boilerplate. Plus it's automatically safe from script and HTML tag injection.
Question though, why do you enthusiastically hate tomatoes?
Umm, thanks. I didn't even know I had the option to disable this. Now I can always enjoy Reddit instead of mostly enjoying it. 
I'm going to go against the grain and say yeah it'll be more helpful than not having. Your experience, connections, and talent will undoubtly help but having a masters or pursuing it will only benefit you. 
Nine times out of ten, if you use a function that returns a function you are working too hard. Even if you want to go completely old school with a solution that works in any ancient browser, there is a much simpler way to do it. Instead of a function that returns a function, all you have to do is *call a function*. for( var i = 0; i &lt; arr.length; i++ ) { delayLog( arr[i], i ); } function delayLog( value, index ) { setTimeout( function() { console.log( 'Index: ' + index + ', value: ' + value ); }, 3000 ); } As /u/senocular points out, another alternative is to use the extra function arguments to `setTimeout()`. However, this only works for that specific case. It's good to know more general ways of getting a closure, and very good to know that you don't need a function that returns a function; a simple function call is all you need.
&gt; Instead of a function that returns a function, all you have to do is call a function. Actually, mine does call a function, but I do admit that returning a function there is superfluous, but it doesn't have to be a named function. This is actually the example I was thinking of: for (var i = 0; i &lt; arr.length; i++) { (function(arr, i) { setTimeout(function() { console.log('Index: ' + i + ', value: ' + arr[i]); }, 3000); })(arr, i); } 
This looks cool.
Thanks:)
I'm guessing everyone's replies also apply to finding a job overseas/internationally? I'd like to work overseas (I'm from Aus) after I get a few more years experience but all I have is the experience and a bootcamp under my belt. I know getting a visa is hard especially without a degree, but will prospective employers still be interested?
Thank you! And yes, I've worked on the app/concept alone for some time, only after a few months a designer came working with me. 
I'm refuting your point that degrees are not valuable.
To avoid confusion, you should really rename the second / "internal" `i`. 
Straight up no. You only want masters of computer science for the computer science itself. Time vs payoff is just not worth it. Straight up.
I'd like to know myself. Leaving the comment so I'll know if anyone responds ;D
Google will index your page, but it won't index the requests taking too long, they don't say how long. Open graph doesn't work with SPA, so when people share a link to your site on social media, you won't get the title, description and main article image. All you get is a link. 
The way to do this is by removing the subdomain wildcard redirection you have, and point all the subdomains to your server as well. Then on the server you could add a server var (perhaps on `$_SERVER` or other session var), then redirect to site.com/page, and then your application would check the server var and display the relevant info. 
Or ksh
I don’t think that finding a general UI bug is under the bug bounty program but only penetration hacks/cracks count for it. 
An advanced degree is not valuable in this context. You have to actually pay attention to the conversation
Thanks, I've fixed it but I'll keep this in mind if I run into more problems
Try adding a `yield 3;` after the `catch` block. This may give you some additional insight.
Google looks for the document loaded event. When this fires it looks at wad rendered and indexes it. You just need to block this event or fetch your content before it. If your api is slow and the call is async then good chance it won't render in time. Hence why people go for ssr. 
I wrote my JavaScript books for programmers. You can check them out for free online: http://exploringjs.com/
Maybe you could copy and paste here the response (minus sensitive bits if any).
Thank you doctor, will read. The reviews of it looks real good, I just need to get a hang of the language fundamentals so I can program my C# back end better in that if I know what it actually does on the front end with Polymer. 
Just added quick sort, will do merge sort after hours.
Knowing the language basics well is indeed very useful. With your background, you should be able to pick things up very quickly.
The same book the last 127 times this question was asked on reddit.
&gt; Nine times out of ten, if you use a function that returns a function, you are working too hard. While there's nothing wrong with the example you gave, I think this is bad advice. First-class functions are one of the most powerful features in JavaScript and you should take advantage of it.
Yes, I am familiar with the java c# line of oop, I just need to pick up the difference with JavaScript.
Ah. I get it. WebSockets. The latest reddit buzzword making its rounds which redditors will proclaim is now the "must have" thing replacing last month's "must have" thing. I've started seeing this everywhere and now it comes with animation!
Well I am sure that 127 times includes newbies to programming, I am looking for something written for a programmer that already have some working experience.
80% of redditors are kids under 20 who have never had a job doing this and you came here looking for advice.
You can use a string for a storage of ordered numbers where each has the same fixed number of characters. i.e. as an array.
Solved.
To hijack this question, I’m a current BSc Comp sci student. Would an MBA be more useful?
I got one. Was not really worth the time nor the money. Nobody asked me ever for my master. So I guess I could have spend those 2 years in the market and gain some more needed experience in the field instead of the classroom.
I disagree. Conceptual and fundamentals understanding of how things related to your workfield work makes you able to understand things much quicker than without.
learn x in y minutes tutorial as a quick ref, JavaScript Allonge, YDKJS, Secrets of the JavaScript Ninja
One of my friends just got a job there while he was in a different state, only a bachelor's. Gotta look around more.
I played Antichess a few times with my friends on board, and it was really fun. At the time of starting the project there was no websites with Antichess support. I think lichess.org supports it now, but I'm not sure which variant. It's more difficult for development than normal chess because it has more logic, especially if the king has royal power (not treated as normal piece). This is my sideproject for few years now, and it was buiilt with Meteor.js at the beginning. I wanted something that supports SSR, and did a rewrite in Koa.js/Marko.js. Lynx support was easy to add after that. The only issue with Lynx is that you must reload the page manually to see opponent move.
If the redirect is done by your registrar, then you will never see it, because it's being done at a point before any of your pages are loaded. Depending on how your web server is set up it'd probably be better to give it a wildcard virtual host, and a wildcard DNS that point to it's IP, and then you will see the hostname in the location.href and can then act accordingly.
Nice comment history, you almost got me thinking you were serious.
nowhere in there does it say Google is actually executing code. that would be insanely irresponsible of them. sooner or later someone would submit a page to them like while(true) alert("fuck you google") all we really know is they do take js into account. they haven't and will not explain exactly how. they have however said that your site should degrade gracefully in order to place high on the search result. that means not using spas. 
[removed]
you usually can't robots or sitemap a SPA. idk why you're so adamant on insisting you can seo an SPA just like any other page but you are kidding yourself.
I hope it is not exactly as you said :)
? of course you can, it's quite straightforward and relatively easy? That being said SEO in itself isn't straightforward or easy and there's much more things to consider.
Those two do exactly the same thing. responseType was added for convenience. https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType
&gt; nowhere in there does it say Google is actually executing code. that would be insanely irresponsible of them. sooner or later someone would submit a page to them like while(true) alert("fuck you google") Come on, you really think that? &gt; all we really know is they do take js into account. they haven't and will not explain exactly how. they have however said that your site should degrade gracefully in order to place high on the search result. yes &gt; that means not using spas No. That's not what it means at all.
We've seen Googlebot give some pages a larger "budget" in terms of how much it will try to execute Javascript, shallow pages it does, but when it gets deeper it basically gives up. I think your assumptions are quite correct. Critical paths should always be rendered with SSR. This is crucial for a good experience on a choppy mobile connection, so people should be doing it anyway.
None of the words you just used included "masters" or "degree" maybe obviously because you don't need to spend tens of thousands of dollars to pick that up
Not at all
I have less experience than you so take this with a grain of salt, but it depends what you want to get out of your career. If you want to carry on doing what you’re doing you probably don’t need it, but if you want to move into a different sector or move to a different type of company (more old fashioned, or with stricter application requirements) then it may help. I have a CS degree and I know for my first job it was essential, simply because the company would’ve filtered me out otherwise. In my second job I know it helped, but don’t think it was necessary. For my most recent job, having a CS/SE/maths-based degree is a hard requirement. The latest job is very highly paid for my level of experience, I’m being paid like a senior as a mid level dev simply because of the company. So it seems like it would help, but then again I have a hard time believing any company serious about hiring would gloss over somebody with 6 years’ experience.
&gt; you really think that? lol. no. no I don't. that was a gross overstatement. I should avoid the internet before I have my coffee. I am however skeptical about what good that would actually do and the performance impact of running a vm for every single site on the internet. I could be wrong, it is Google after all, but I sincerely doubt they're actually executing javascript. &gt; Saying SPA's can't be SEO'd Who is saying that? bottom line is, and I think we both agree, there are a million different ways to make an SPA. I feel like you're talking about single page blogs and websites which actually have html resources and crawlable web services and unique uris for each page. I'm more or less thinking about spas I've built like mapping budgeting, business software. also, I'm speaking in broad generalities, not to give anyone the impression that I'm an seo expert because seo has never directly been part of my job as a developer.
In short, false negatives are cheap and false positives are expensive. A process that fails 100% of bad hires is worth it even if it fails 99% of good hires.
I think we're thinking about different kinds of single page applications. see my other comment below.
[Try this](https://jsfiddle.net/ax1gckbr/). `responseText` is actually not available if the `responseType`is set to `json`: &gt; [If responseType is set to anything other than the empty string or "text", accessing responseText will throw InvalidStateError exception.](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText)
Haha, long story but yeah I hate them with a passion :D
You already have the experience and knowledge to land you a job essentially whenever and whenever. A master's degree would be a nice added thing to your resume, but your experience trumps the Masters degree. I've been in the Node.js/JavaScript for the past year and unless you're working or applying at a somewhat "modern" company, 8/10 times when they say JavaScript they actually mean jQuery.
I guess this will more helpful since you have background in c#. The author brings c# concepts into understanding js. https://leanpub.com/javascriptmancy-mastering-arcane-art-of-writing-awesome-javascript-for-csharp-developers
Another vote for "You Don't Know JS" series by Kyle Simpson. Can buy them in 6 different smallish books or read free on github. You will have a great appreciation for all of the various quirks of the language and a deep understanding of what's going on under the hood that I think is necessary to really "get" the fundamentals of JS.
For sure, I understand that especially since I'm in a position where I hire engineers for my team. Since we're small and our pool of applicants is small though I have some liberty with prying into their experience more. 
I feel like the industry is moving away from the theoretical whiteboard CS riddle type interview. You'll still encounter some but its becoming more rare. 
1337+'';
Nay. The length is 4, yes, however, in non-crazy-pills areas, array indexing starts from zero. As in, [0, 3].
Not specifically a book but I'm going to recommend that you check out freecodecamp.org They have guided tasks that will teach you js in no time.
That, and the fact that websockets have been well supported for at least, what, six years?
Hex strings in my case, but that's clever
yeah no JS dev is doing that by virtue of getting a degree. dude is right, literally nothing from a CS degree applies to modern web dev.
https://subfwd.jpillora.com/ 
Is this the same thing as pm2? https://keymetrics.io/pm2/
lol upvote for the pro troll skills
Did you try searching for the answer before posting? Searching for “api government representative” gives a pretty obvious solution. 
I think you're right.
where is your code ? And what do you mean by "if while" ?
Just print the code in your question. Put 4 spaces in front of each line for reddit to format it as code.
 public class Test1 { public static void main (String args[]) { int count = 1; while (count &lt; 10); System.out.println("Count: " + count); count = count + 1; System.out.println("All Done"); } } that's my code and i'm not too sure about the if while, as i said i dont really undersatdn it much but what i can kinda gather is that it is like an if statement within a spreadsheet or something like that.
&gt; public class Test1 &gt; { &gt; public static void main (String args[]) &gt; { &gt; int count = 1; &gt; while (count &lt; 10); &gt; System.out.println("Count: " + count); &gt; count = count + 1; &gt; System.out.println("All Done"); &gt; } &gt; } &gt; that's my code and i'm not too sure about the if while, as i said i dont really undersatdn it much but what i can kinda gather is that it is like an if statement within a spreadsheet or something like that. 
This is Java, not JavaScript, so this is the wrong sub for this question.
it's look like Java for me, not javascript are you sure that you are in the right subreddit ? try this one if so r/java/
well shit... do you know the answer tho? and that just proves my point i have 0 clue what i'm doing
This must be a duplicate account (Or a mimic account) as there is another user who frequents this subreddit, css, webdev, freebsd and also types the same way and claims they worked at SGI and started C code in the 1980s, owns their own company since 2004. I dont know why they have duplicate accounts lol.
YDKJS on github, though Kyle includes a lot of superfluous stuff about using his async libraries which I'd ignore (we have async/await now). Also, Secrets of a JS Ninja, 2nd Ed. co-authored by John Resig (author of jQuery). Those 2 books will get you very far.
Only on reddit is telling the truth called trolling.
The answers here are somewhat specious - a String is, technically, an array of characters. Still, we'll ignore that technicality for now. We'll also ignore that the numerical list would be retrieved as an array - instead, we'll argue you're looping through a consecutive set of text input or spinner elements to get the user entries. There are some data structures - namely, binary search trees - that do their own sorting as part of how they operate. The best example of this is [Tree Sort](https://en.wikipedia.org/wiki/Tree_sort). I had trouble finding a good JS implementation of them - given how much faster [QuickSort](https://en.wikipedia.org/wiki/Quicksort) usually is, and the fact that your question is somewhat contrived - but I did finally find [a good JS example as part of some job interview questions](https://khan4019.github.io/front-end-Interview-Questions/bst.html). :) I've converted it to ES6 snytax to make it a bit cleaner (and possibly because I'm really enjoying ACTUAL classes in JS; I know it's syntactical sugar, but I've got a sweet tooth. [JSFiddle here](https://jsfiddle.net/ettj3v77/5/). class TreeNode { constructor(val) { this.value = val; this.left = null; this.right = null; } } class BinarySearchTree { constructor() { this.root = null; } push(val) { var root = this.root; if (!root) { this.root = new TreeNode(val); return; } var currentNode = root; var newNode = new TreeNode(val); while (currentNode) { if (val &lt; currentNode.value) { if (!currentNode.left) { currentNode.left = newNode; break; } else { currentNode = currentNode.left; } } else { if (!currentNode.right) { currentNode.right = newNode; break; } else { currentNode = currentNode.right; } } } } printInOrder() { let traverseAndPrint = function(node) { if (node) { traverseAndPrint(node.left); console.log(node.value); traverseAndPrint(node.right); } } traverseAndPrint(this.root); } } // Usage let tree = new BinarySearchTree(); tree.push(12); tree.push(7); tree.push(92); tree.push(3); tree.push(11); tree.push(12); tree.push(1); tree.printInOrder(); Disclaimer: I sincerely hope this isn't for a class or job interview. If it is, well... I hope you carefully study then rewrite it, because you better be able to explain everything. :)
It is. Over the last week I've noticed a step up in statements, links and articles about it where there was none before.
What is important now is that you understand what you wrote. You can see there is a problem with your while. As someone said, a while is something like this : while(/*condition*/){/*code*/} . Take a look here https://beginnersbook.com/2015/03/while-loop-in-java-with-examples/ . And I'm not sure but /r/programminghomework/ should be a better place for you. 
So this is Java and not JavaScript but that’s okay. Most languages have similar syntax for while/for loops. What you are missing is the enclosing while loop brackets. So the body of the function should should look something like: int count = 1; while(count &lt;= 100){ System.out.println(“Count “ + count); count += 1; } system.out.println(“All done”);
 public class Test1 { public static void main (String args[]) { int count = 1; while (count &lt; 10) { System.out.println("Count: " + count); count = count + 1; } System.out.println("All Done"); } } (I never posted code here so I don't know if the formatting would be right, but this should be what you are looking for. Next time ask in the java sub)
And after six years, there is an influx of posts, comments and articles about it all of a sudden? Makes me suspicious but such things happen all the time on reddit and only brighter minds catch it.
Jordan Walke, and yes he does have a CS degree.
No. pm2 is a process manager that handles running processes but just happens have a feature that splits incoming HTTP requests between the processes. ClusterWS is a way to run a cluster of websocket servers.
Like all big companies, the people that hate it are the most vocal. I love my team, and know a number of other people that do. It was always an MBA run place, Bezos was never technical. I work ~40 hours a week, work with everything from new hires to senior engineers, some H1Bs, some born and raised in the US. My experience is not unique, nor are bad experiences at Google/Facebook/etc unique.
And everyone but you had something positive to say.
Try asking over at /r/java/
I actually ended up doing it by County since that's how the reps are divided. I'm looking into the APIs I found (and that you linked to) but I'm not very experienced in using them so I was looking for some help. Perhaps I wasn't specific enough in my question.
Wrong sub, my friend! 
Does that mean it's better to use var when you don't care about scope ? If I understand (please tell me if I'm wrong) with "let" you create everytime (at every loop) a scope where "i" has a different value, but with "var" you have only one scope of i which is the current value (at execution). ??
https://developers.google.com/civic-information/
But aren't all these options... redundant? I can use any one of these, and it'll do the same thing yeah? 1. Set the response type to 'json' 2. Just use responseText 3. Parse
So it won't matter what I use then? Or are they any specific instances where one method will work over another? 
Yes I got it now. Thanks :)
Their guide shows a lot of info on how to retrieve information using their API. You'll need an API key, etc... and then once you call the URL using the structure they describe, it'll give you your query in JSON format that you can use in your application. This URL (https://developers.google.com/civic-information/docs/v2/representatives/representativeInfoByAddress) allows you to enter a ZIP code only and return whatever representative info you're looking for. This might help: https://github.com/datamade/my-reps
Hi /u/ZeDogzAttacks, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Here is what I started making Saturday, an ugly but functional Weather application with Node.js, Serverless, AWS Lambda, Darksky, Google Maps Geolocation API: * https://github.com/axs221/horizonal * http://www.horizonal.us I also made a Vim plugin for jumping to files quickly: * https://github.com/axs221/vim-quickly
I would definitely want my browser to warn me if a domain was storing more than a few MB though. I don't even know if there's a way to list all the domains currently using my localstorage
This requires a lot of work on the users side. I'd like something like this more if it used Babel to try extracting the information. 
How did u solve it for vimeo? The link is for html5 video.
https://github.com/bpesquet/thejsway was recently written (by me) as a beginner-focused book for learning modern JS. It's free to read online and has **TL;DR** sections at the beginning of each chapter that summarize the chapter's content and may help you skip what you already know to concentrate on what's new. Hope it helps.
Wow never used this. How does it compare to sequelize and ObjectionJS? Im working in a Sequelize project atm and the dev experience is not very nice, and it has not many testing utilities. I was interested in ObjectionJS but TypeORM seems so mature that I may just try this one first
To be fair, they did ask a lot about my personal work, but I could tell it was to fit in their customer ethos not because they were interested in my technical prowess. 
Amazing! I looked into instagram clone repo and felt like converting it to MERN stack. :)
I wrote a scalable WebSocket server a while back, and one of the problems I had with clustering was the handshake loss. How do you handle this?
Here's one way; https://jsfiddle.net/58r7dcxv/ See if it makes sense :)
Best book in my opinion is Eloquent JavaScript (and its online version is free) http://eloquentjavascript.net/ 
Any progress?
That is true. First I analyzed the code (as text), but I got into many corner cases in which it was impossible (without dynamic analysis), so I went with adding a doc. Adding the doc to a project with 136 effects took 2.5 hours, but it was worth it as now I can understand what is going on.. I am thinking on building a dynamic tools to which you can say what you are trying to track (for example a class method), and it will spread a tree of calls for you, but that is still a concept
They are just different options. They not redundant since the smaller details may give you some subtle differences which someone may take advantage of. 1. If you set the type to `'json'` you will no longer have access to the `responseText` and you get less control over potential parsing errors. On the other hand it does the work for you, "for free". 2. If you just use `responseText` then you'll have to parse it in some way. You get the most control over the process, but you end up doing the most work. 3. If you're just going to `JSON.parse` the response and nothing more, then there's little advantage to using type `'json'`. If you `JSON.parse` in a `try-catch` or something similar, then at least you're doing something extra which you may want. So, in the end, no, they are not _redundant_, the smaller differences do have some effect.
Doesn't matter, see comment by u/ugwe43to874nf4.
It is not a buzzword. It is rather useful when you need very low latency compared to http. It has best performance for certain usecases.
Thanks for clearing this up for me man! 
&gt; though Kyle includes a lot of superfluous stuff about using his async libraries which I'd ignore (we have async/await now) With superfluous stuff you mean the generator runner for promises? Sure, as he says himself, with `async` / `await` that's not really necessary any more; however I think it demonstrates very well what can be done with generators (like, beyond the usual trivial `yield i++` examples)... and as such it's sure still worth reading IMHO.
Same here! I use sequelize with typescript (sequelize-typescript) project and it's close to the nighmare :D TypeORM seems soo nice. Fortunatelly I am in very early development stage now and I want to rewrite it to TypeORM. I will give you my opinions then ;) 
Thnx!! I am also planning to convert Instagram-clone into a MERN stack later in the future!!
lmao do you even know what websockets are?
Obviously I do. Obviously you don't.
It's a buzzword when everyone jumps on the bandwagon all at once and use it for no reason other than everyone else is.
I was positive. I said it's the same book mentioned in 127 asked questions before. How is that a negative?
For an in-depth explanation as to why this is happening, see: https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec Tldr: when setTimeout is called, the function you passed in as the first parameter will be moved to the queue, instead of the call stack, where your loop is executing, and so the functions will use the otherwise global (having been declared with 'var' at global function scope level) index, which at the end of the loop will take the value of arr.length because that's your breaking condition for the loop. Only once the iterations of the loop get cleared from the stack will your JS engine of choice start pulling in the delayed functions from the queue. Wrapping the setTimeout in an IIFE localizes the index variable because before the timeout call, those variables will be the expected value. Using let also works, because let and const are block-scoped, as opposed to var, which is function-scoped.
Awesome!
Of course. You also should probably not call `setTimeout()` in a loop with the same timeout value for each, but this was just a demo. 
http://javascript.info/ [Dmitry Soshnikov, JS: The Core](http://dmitrysoshnikov.com/ecmascript/javascript-the-core/) and his other articles. [YDKJS](https://github.com/getify/You-Dont-Know-JS#titles)
The problem there is that you're relying on your knowledge of the data flow to populate this information so if you don't understand something fully and you write the doc-strings they'll produce a bad visualization and you have no way of knowing. 
I think it is fair to think that coders know their code, but in case they don't, I made it pretty simple, following RxJS, so every RxJS operator means something in the doc, and that is it. Of course, making it work dynamically on already written code is better, but this is a start at least
I usually opt for making a tsconfig.json whenever I want to use TS, but it's still really nice that they give this option, especially since not everything even needs the JSDoc annotations just to make sure the code works alright.
This ORM is too good to be true. 😭
Just because something is powerful doesn't mean it's good. A lot of the time, returning a function makes code more confusing, which should always be considered for maintainability. This question is based around the idea that the output is unintuitive, and any solution (besides probably using the more appropriate `let`) should have explanatory comments about why it's composed the way it is.
&gt;TypeORM seems so mature I probably shouldn't be so hasty since I haven't tried it at all yet, but a 0.1 release of a project that has only been around a few months doesn't quite seem like a beacon of maturity.. It does seem very nice and featureful though, and I'll be interested to try it on my next project.
What if the 1% of good hires it works for are typically the mediocre performers though? It may not be as black and white as most employers think, they may be weeding out all the terrible and excellent candidates. Take the hypothetical 3 candidates: - (A) Just terrible all around - (B) Highly Skilled - (C) Mediocre (~50% performance compared to B) An interview process which weeds out A and B, would actually be a net loss to the company. If it takes a few hiring / firings to get to employee B, having them on is better in the long run even if you've wasted some time finding them. This is obviously very over simplified, but I feel the basic premise of going for long term gain versus avoiding short term loss, is worth discussing.
Nicely done. Check out how https://github.com/vigetlabs/blendid implemented the same idea, especially configuration. Their starter kit works as npm dependency, but allows overwriting any configration, turning off features or adding new tasks just using a configuration which are in separate folder / files, so user doesn't have to dig through the source. Whenever there is a fix / update you can just update version in your package.json and you get updated stuff without manually merging files.
right? 
I use it. It's awesome 
What happens if you do: $("#LEDtable").html(JSON.stringify(data));
I've tried it, still nothing :/
Best list of bullet points ever. I'm afraid to dig in. I've had my heart broken before.
Hey @kaszu! Thanks! The project looks very nice! I've been working for some time in making a library starter project and already getting inspired by it!
Isn't this exactly what that silly BSD+patents license was supposed to protect against? You're even using React 15 before the license change
Funny, I have just built up a product to v1.0 that uses sequelize, then found myself wishing I had tried knex and the graphql integration. I have had no major complaints re: sequelize, but something that supports graphql would be a major motivator to switch.
Do you want to get hired or do you have a project you're working on? Firebase is too expensive for big apps but can get you going very quickly for a quick project. If you want to get hired then forget Firebase; "learning Firebase" is really just learning the service's APIs and the reason it's so easy and convenient is that they do the "database" bit for you. Experience with Postgres (for more traditional and powerful RDBMS) or MongoDB if you want a NoSQL database which is very js friendly and you might find quicker to get started with depending on your platform.
Don't forget that you can use: /// &lt;reference path="some/path/foo.d.ts"/&gt; If you want to create external type def files that can be shared across files. So rather than writing out: /** * @typedef {Object} Issue * @property {string} url * @property {string} repository_url * @property {id} number * @property {string} title * @property {string} state * @property {bool} open */ which can only be used in that file, you can create a file issue.d.ts: interface Issue { url: string; repository_url: string; id: number; title: string; state: string; open: boolean; } 
I use TypeORM daily and am very happy with it. The coolest feature is automatic schema sync - you define your schemas with TypeORM models (TypeScript code) and version control them alongside the rest of your app code. Those models are exposed as plain old classes that you can use (like Mongoose models or Play repos), and when you modify a model in your code, it is automatically synchronized to your DB schema! This means you don't have to manually write and run DB upgrade/downgrade scripts every time a model changes. Of course, you can turn off automatic sync in production.
If you want to pursue a masters, you should understand that it's largely about broadening your *skills* in pursuit of a *specialization*. What I mean by that is there are academic areas with hard/unsolved problems and the tools being used to advance human knowledge in those areas might be in python, or they might involve leveraging AWS infrastructure, or N other tools that are nowhere near React-related. If you want to become good at something mainstream like React, a masters won't do you much. However if you want to work on a more R&amp;D capacity, that's where a masters would help you. For example, my brother pursued a PhD in computational linguistics. He now works at Duolingo. There are people there doing js exclusively, whose job is to make sure js things are written well and maintained well. My brother does some js sometimes too, and he does python and a bunch of other things, but those are merely a means to goals related to computational linguistics. TL;DR: if you want to master your tools, not worth it; if you want to advance human knowledge, worth it.
Things you could try: 1. See in the "network" tab in your browser dev tools, that the response is correct and that valid JSON is received. 2. Add a `fail` branch on the `$.get` promise to output whatever error jQuery is seeing with that response. The request/response may appear ok, but if there is a problem while parsing the response, it is still considered a _failure_.
I've learned some of mongodb/mongoose, but i'm not expert and honestly not a big fan. I think I'll just look into PostgreSQL though, thanks.
what does this mean for Facebook flow and Google closure? can typescript use their comments now?
Nothing, and no. It's a similar system to those tools but still using TypeScript's type system.
No I think I'll go with local storage instead, instead of figuring this out
I read "cluster*uck" ;)
Not even r/crappydesign and r/mildly infuriating?
It's the first thing I do on any sub that has a full redesign theme. If you've got a few little tricks that don't totally re design the sub, I'll leave them on. Most can't help themselves though.
If that's an option, it is probably better. Cookies always get sent back to the server.
sequelize iirc follows the activerecord pattern (which is actually an anti-pattern). TypeORM (which ive been using for over a year now with no issues) follows the repository/manager pattern. I really like TypeORM, the developer is awesome, and these recent changes are fantastic.
1. You need to attach event listeners to trigger a function when some event occurs. For example, from glancing at the API doc for Acrobat, `Field` elements emit a `KeyStroke` event along with other various other events. 2. I believe you can add constraints through Acrobat when editing the PDF. 3. That's a boundary check you will need to handle.
If you can learn SQL in general, they're your good to go with whatever relational database you use. Minor syntax difference, but concepts are all the same.
I disagree with your conclusion. That does not mean I'm not paying attention, nor does it called for you're particularly defensive responses.
If you think so then do, i or any one else can not change your opinion about it. Just to know WeebSocket always been better then REST just not all browsers and devices suported it at that time. Now it is supported almost in all browsers that is the reason why many people move to WebSockets. (of cause in some development cases REST is better but it is long talk where and why)
Handshake mainly done by uWS i am not writing clean websocket and uWS does handshake for me. And it does it well:) 
Obligatory reminder that decorator syntax is only stage 2 in the ES standardization processs (where it has sat for over a year), so there's a chance it will change or be dropped. I guess it doesn't matter if you're using Typescript though.
Sounds like Create-React-App + [React-App-Rewired](https://github.com/timarney/react-app-rewired)
Without code, there's not much help that can be offered. 
Not nearly as pretty, but it looks like you can still us it with standard JavaScript: https://github.com/typeorm/javascript-example/tree/master/src/app3-es6
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [typeorm/javascript-example/.../**app3-es6** (master → dbb898a)](https://github.com/typeorm/javascript-example/tree/dbb898ab03f590da7cb618bee24487301ca00bb9/src/app3-es6) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Been using sequelize for 2 years no, I found it super easy to use, initiative , great docs, what's your beef? 
Would this be usable for websql / odata orm on client side JavaScript? 
Hi everyone, first time posting here and I am just trying to figure out how to enter an array as a parameter for this function. Every time I try to input an array all that is being stored is the first string. Just trying to gain some insight into how to get my input to turn into an array.
Hi everyone, first time posting here and I am just trying to figure out how to enter an array as a parameter for this function. Every time I try to input an array all that is being stored is the first string. Just trying to gain some insight into how to get my input to turn into an array. 
I was trying to get that to work about a month ago and had some real alarming results. Migrations were created where i renamed a column, and it would DROP the column and then add it. NOT GOOD! I immediately stopped using the schema sync in fear of what else might slip through the cracks if I wasn't careful enough. Be cautious! Otherwise it seemed promising
Well I'd agree with you but then we'd both be wrong
&gt; WeebSocket always been better then REST That you think "WeebSocket" and REST are similar to each other adds to my pile of proofs that no one should ever come to reddit looking for technical advice. HINT: REST has nothing to do with WebSockets in any way, shape or form.
Thank you! I'm the author of the article. Let me know if you have any question or feedback :)
Does this only work in vscode? I prefer vscode but my collaborators may not use it. 
This is super neat, I'm definitely going to play around with this!
I did not mean that they have anything similar. I just said that they are both related to the client server communication, and while websocket were not supported most of the time you thought about how to make your app trough REST.
also, why would i want to define the schema in js when you can pull a schem from a database
Have you worked with code first models before? Migration files and writing plain classes/objects in code is a very common and popular pattern. Entity Framework in .NET, ActiveRecord in Ruby, just to name a few. It keeps things versioned and in sync across teams with more than one developer. 
Right, anything you can do with generators you can also do in standard JS, but libraries like this and MobX (and I think even Angular?) seem to be heavily based around them to the point that it might not be worth using these libraries if you don't intend to use the syntax, because: &gt; Not nearly as pretty
Actually it seems like you already missed the initial "influx of posts, comments and articles about it all of a sudden", because that happened years ago.
It formatted it more or less right but here it is again. https://pastebin.com/JCv1KNTc Been trying to figure this out for almost a week.
I believe so: https://code.visualstudio.com/updates/v1_12#_type-checking-for-javascript-files
dat.gui is pretty awesome I used it in this [Mira fractal](http://bulkan-evcimen.com/mira.html) generator.
So if you were to continue this example, what would a function definition of type `Issue -&gt; Issue` look like?
A question on these automatic schema syncing... are you using postgres? Postgres is pretty strict in letting you change tables that have dependencies like SQL views. Is there anything to help with that when it does these schema changes? Also do you use the ORM to update things like views, procs and triggers? Or just table columns? 
I hate you for this.
Degrees don’t make professional, people do. Go do something to challenge yourself.
I'd you need a quick intro to basic language elements and working, recommend reading the MSN docs, particularly the "Reintroduction" and for you, the JavaScript Guide: https://developer.mozilla.org/en-US/docs/Web/JavaScript
Reddit is turning into stackoverflow.... What have you tried? What exactly doesn‘t work?
As he asked for help being a new guy to JS - I am pretty sure he just did not understand scopes - and not performing some sketchy IIFE hack
Yes I get that , the point was that his code sample was something a newbie could easily find as it was a common pattern , so I simply provided clarification on why that pattern was popular and older blog posts might reference them . Also it's not a hack since it has a specific purpose , today we don't use IIFEs as much since modules exist , but at they time (5-7 years ago) this was a valid pattern. In any case I'm not trying to argue with your points , just providing clarification for op.
The web stack has changed quickly in the past few years. Right now javascript is all the buzz, and is mostly due to advancements in computer hardware and browsers that has allowed JavaScript to really become something impressive imo. Node now allows JavaScript to run outside the browser, which you can build the api for and handle all your data (replacing php). React allows you to build websites err more explicitly, single page applications, which are JavaScript apps that run in the browser. Now, the coolest part of the front and backend both running JavaScript is that they can share some code, which opens up an entire new exciting tech feature for the web (look into isomorphic/universal web apps) 
 let duration = 1000 * 60 * 30; let messages = ['spook', 'boo']; let handler = setInterval(() =&gt; { messages.length &gt; 0 ? alert(messages.shift()) : clearInterval(handler); }), 1000 * 60 * 30);
Argue me!!!
Change those brackets to () parens, brackets mean something else entirely in JavaScript called arrays. Also, explicitly note your math operators like * for multiplication. 
&gt; However, other than front end interaction I have no idea what Js is used for. I just don’t understand how ppl can write folders of .js files for web sites. PHP makes a lot more sense to me, it controls the data the you see and talks to the databases. JavaScript is a programming language and can be used for pretty much anything, including the database interaction you've used PHP for, or whatever you plan to use Python for. It might make more sense if you think outside the web browser for a bit. Install [NodeJS](https://nodejs.org/en/) and make a simple server with the Express library, for example. If with "folders of js files" you mean confusion with JavaScript project structure, generally JavaScript projects use a module system, that allows you to refer to other files in the project, instead of just loading a bunch of different scripts to the global scope. The relatively recent official specification is the `import/export` keywords, while NodeJS uses CommonJS modules with `require()`-function. At the root of pretty much any JavaScript project you have a [package.json](https://docs.npmjs.com/files/package.json) file, listing dependencies, metadata, entry-point, scripts etc.
From the README: &gt; Minero is a proof-of-concept and is the result of a self-hatred fuelled narcotics induced 48hs-straight coding extravaganza held during a rainy weekend in October, 2017. Don’t expect this code to be rock solid. ...
Do people still use the MEAN stack?
sweet, thanks. 
Hah, I've posted on stack too, just extending my reach. I haven't tried much because I can't understand how it works. Just need help with that.
How is this "yet another miner" when it uses the Coinhive miner with a wrapper for it and Shapeshift's exchange API?
thnx!!
I am not convinced. For example a where condition for a query is written slightly less readable than for Objection.js: .where("id = :id", { id: 1 }) vs just simple .where({ id: 1 }) for objection. But it's looking promising. I am sure those slightly wierd looking syntax will get better as it approaches 1.0
Just to follow up on this, the automatic synchronisation feature is meant for development. For production use [migrations](http://typeorm.io/#/migrations).
&gt; There’s literally no setup—you don’t even need a TypeScript configuration file—just add the comments to any JavaScript code. You don't need to add the comments anywhere - just create a TS configuration file. FTFY
By the way, Flow allows the use of Flow comment syntax: https://flow.org/en/docs/types/comments/ Those are actual Flow type annotations but inserted as comments, so that there is no need to run a type annotation removal build step. Also, the asynchronous function example that has /** @type {Issue[]} */ let issues = response.body; would not be acceptable to Flow because you cannot be sure about what you get from the network(!) - you cannot assume that you get the correct type unless you actually check it (during runtime). Which I agree with - never take data received from users or the network for granted. Data from a database is an edge case - how much do you trust your storage integrity? Depends on context. However, network should never be trusted.