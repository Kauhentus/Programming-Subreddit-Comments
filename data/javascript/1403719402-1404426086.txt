&gt; implementations in fast.js are always going to beat the native versions They're almost all slower, significantly, than the native versions in SpiderMonkey. In particular, the native versions in SpiderMonkey run faster than the fast.js versions in either SpiderMonkey or V8, in my testing. So I think this claim is, at best, overblown. https://github.com/codemix/fast.js/issues/4 filed, of course.
Dude, that was only for prototyping.
At least in Firefox, fast.js is slower than the builtins, based on the numbers at http://jsperf.com/fast-vs-lodash
IS there a more Angular-compliant D3?
It's not v1.0 yet and I suspect more people and companies will start to use it after that and after it has a good built in testing framework. There are now rapid updates, an easy to use package system, built in authentication and oath etc which isn't seen in many frameworks. I have been using it for about a month and it's pretty amazing with the automatic real time features. I suspect it will grow rapidly in the future.
Once you remove the built in insecure package you must be very specific in who can insert/update what in the database. See here for more - https://www.discovermeteor.com/blog/meteor-misconceptions/
It had a lot of development since its launch, let me paste my answer from another reddit thread: - Authorization and authentication was not present in the first public release in April 2012. Got full authorization and authentication built-in [in October 2012](https://www.meteor.com/blog/2012/10/17/meteor-050-authentication-user-accounts-new-screencast) in version 0.5.0 - Scalability of the real-time component got addressed [in November 2012](https://www.meteor.com/blog/2012/11/20/meteor-051-database-scaling) 0.5.1 first, still didn't scale well horizontally - Scalability of the real-time component got addressed again with new Oplog Tailing approach in versions 0.7.0, 0.7.1 and 0.7.2 starting [in December 2013](https://www.meteor.com/blog/2013/12/17/meteor-070-scalable-database-queries-using-mongodb-oplog-instead-of-poll-and-diff) - Didn't have npm support until [April 2013](https://www.meteor.com/blog/2013/04/04/meteor-060-brand-new-distribution-system-app-packages-npm-integration) v.0.6.0 - The front-end real-time rendering component got a big improvement with virtual DOM diffing and a future for components [in April 2014](https://www.meteor.com/blog/2014/04/04/blaze-meteor-1-pt-0) v.0.8.0. Now comparable with ReactJS and HTMLBars! - The revamped packaging ecosystem is still in development - Support for animations in components landed a week ago in 0.8.2 
Nope. It's fun to use for personal projects but you'd be better off learning/using something like AngularJS.
http://bost.ocks.org/mike/map/
It's not that D3 isn't "angular compliant". It's that the author hasn't *quite* figured out the best way to use them together. Which one should I use for DOM manipulation? Where should I leverage D3? etc. I use D3 every day with both Angular and Ember. There are certain patterns to follow that you come up with over time, but there's definitely no "compatability issues". Side note: Angular doesn't fully work with SVGs OOTB (Neither does Ember or JQuery). There are some quirks with SVG elements because they're in a different namespace and cannot be created in the same ways you can create other HTML elements.
It isn't an API though is it? Bostock himself calls it "A JavaScript visualization library for HTML and SVG."
&gt;you'd be better off learning/using something like AngularJS. That doesn't compare.
I could certainly imagine situations where Meteor would be a solid tool, especially for the sake of rapid prototyping, which is crucial in the startup scene. The issue I have with it personally is the way in which it combines concerns: I'd rather have Node providing a RESTful API on the back end and use something like Angular to develop the front end, for the sake of standardization, maintainability, flexibility, etc. than use one framework for everything. I think Meteor made a lot of sense when Node and front-end frameworks like Angular, Knockout, etc. were still novel, in that it helped streamline the learning curve, but as those technologies have matured and more developers have become familiar with them, I think the value of Meteor has diminished somewhat.
Speaking of jQuery and Angular... I'm beginning to have a very sour taste in my mouth about Angular because every question that comes up, we have someone claim that Angular is the answer to every problem.
Now that it seems to support a database ([postgresql](https://github.com/austinrivas/meteor-postgresql/)) that won't cause our DBAs to chase me out of the room with pointy sticks if I even talk about I might take another look at it. I'm having fun fiddling around with [RactiveJS](http://www.ractivejs.org/) for now, though. Not to be confused with [React](http://facebook.github.io/react/) which is also fun but doesn't seem to play nice with our existing UI widgets ([jqwidgets](http://www.jqwidgets.com/)).
We love RactiveJS here in Meteor! I didn't work on Blaze (Meteor's UI system) directly, but I believe it took some inspiration from it and they are quite similar: - structured templates (not string-concat based) - SVG support - jquery plugins compatibility - data-bindings
Good to know. I really like Ractive's template engine so if Meteor is just as sane it should be pretty easy to pick up.
http://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Dunning–Kruger effect**](https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger%20effect): [](#sfw) --- &gt; &gt;The __Dunning–Kruger effect__ is a [cognitive bias](https://en.wikipedia.org/wiki/Cognitive_bias) manifesting in two principal ways: &gt; &gt;* Unskilled individuals suffer from [illusory superiority](https://en.wikipedia.org/wiki/Illusory_superiority), mistakenly rating their ability much higher than is accurate. This bias is attributed to a [metacognitive](https://en.wikipedia.org/wiki/Metacognition) inability of the unskilled to recognize their ineptitude. &gt;* Those persons to whom a skill or set of skills come easily may find themselves with weak self-confidence, as they may falsely assume that others have an equivalent understanding. See [Impostor syndrome](https://en.wikipedia.org/wiki/Impostor_syndrome). &gt;David Dunning and Justin Kruger of [Cornell University](https://en.wikipedia.org/wiki/Cornell_University) conclude, "the miscalibration of the incompetent stems from an error about the self, whereas the miscalibration of the highly competent stems from an error about others". &gt; --- ^Interesting: [^Illusory ^superiority](https://en.wikipedia.org/wiki/Illusory_superiority) ^| [^Overconfidence ^effect](https://en.wikipedia.org/wiki/Overconfidence_effect) ^| [^I ^know ^that ^I ^know ^nothing](https://en.wikipedia.org/wiki/I_know_that_I_know_nothing) ^| [^Crank ^\(person)](https://en.wikipedia.org/wiki/Crank_\(person\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cih0hjw) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cih0hjw)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I've tried it before. Leaflet.js is fairly easy to use. Even Openlayers is easier to use. It frustrates me when I can't get a simple example to work with content that I generated. What frustrates me more is I see that D3.js could possibly be more powerful than Leaflet or Openlayers.
API and client are separated for a reason. You can have multiple clients--native mobile applications, for instance, though even a mobile web application might/ought be considered a different consumer of the API. Meteor doesn't respect that particular separation of concerns, by design. 
I think the phrase &gt; Meteor doesn't respect that particular separation of concerns, by design. is not fair at all. If you actually take a look at the Meteor codebase on GitHub, it is clear that it is built in a very modular way with very thought out APIs on each layer and a very high level of pluggability. This can proved by the community efforts of replacing the Meteor Frontend part (Blaze) with Angular or React. Or the Jade package that allows you to use Jade instead of Handlebars. Realtime data adapters, packages to expose REST end-points and iOS/Android DDP clients (to connect to your server from a native app) are all validations that every layer of Meteor is replaceable if desired.
Thanks. 
This thread has been linked to from elsewhere on reddit. - [/r/Meteor] [&amp;quot;Is Meteorjs still relevant&amp;quot; on Reddit](http://np.reddit.com/r/Meteor/comments/293dcp/is_meteorjs_still_relevant_on_reddit/) *^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don't ^vote ^or ^comment. ^Questions? ^Abuse? [^Message ^me ^here.](http://www.reddit.com/message/compose?to=%2Fr%2Fmeta_bot_mailbag)* 
I think you're missing the point of separation of concerns though: it's not just about modularity. What if, for one reason or another, you need to migrate away from the JS server, to e.g. .NET or something? Rewriting the back end is always a hassle, but now your front end's broken too. If you're just using Node + Express or Restify, you can switch over seamlessly without breaking anything that would consume the API. Meteor locks you into Meteor.
I've spent SO MUCH TIME trying to learn mapping with D3, and its finally starting to pay off. This was the tutorial that ultimately helped me figure it out, and it took a week's worth of undivided attention to wrap my head around the process of taking public map data, putting it in QGIS and exporting it out to a GeoJSON before making a final conversion to TopoJSON. http://www.mapshaper.org/ Always convert to GeoJSON to TopoJSON. The resulting code is much lighter!
I don't see how Meteor locks you into Meteor? Just take the Blaze as a separate module (community has done it before: https://www.youtube.com/watch?v=zHPAH6Nxvaw) and use it with your server. Here is the guy who has done it with his .NET server: http://flickseeker.com/ and http://flickseeker.meteor.com/ are based off the same back-end
Does this work even where the function isn't explicitly returning an object literal? E.g. var module = module || {}; module = (function(moddule){ var foo = 'qux'; module.foo = 10 + foo;; module.bar = "baz"; module.qux = function(){return foo;}; return module; })(module);
That's actually damn cool. I think you've finally convinced me to actually go ahead full-steam and use this thing instead of just reading about it (which I have for the last year, waiting for something to convince me it's a worthwile investment) Fantastic!
No, it doesn't. I can pretty easily change it so that works though. I assume that's what you think I should do, not just specify in the documentation that it doesn't handle it, right?
Becoming more relevant every day. A google search could've helped here.
this yes. meteor is such all-in-one monolith that tries to do everything in it's own way. i'm pretty sure the do it to be attractive and get stacks of funding money instead of delivering a good product.
Cool. great to have ya on board. it should be fun.
Its more a collection of transformative functions and some SVG generators. Read the Reusable Charts blog post that mbostock made and it basically describes his whole internal design for d3. Its very useful, but it's not a convenient API.
That's cool and all, but once you've decoupled the front and back end, what's the point of using Meteor? What do you really gain from all the code you're including, when you could just start from Node and Angular and add packages as you need them?
One exit to DropBox seems pretty good for a pre-1.0 platform? I think so. Go Streem!
It is far from dead. Don't confuse a lack of big social media splashes as a dead thing. We are building a whole consultancy around Meteor.js and use it every day at Differential. It will be a pretty major splash when 1.0 hits, trust me. Also, check the activity on http://www.reddit.com/r/meteor
No, sorry, I was just curious. I'm guessing you're doing some kind of static analysis here? I was asking because there's a lot of different ways of doing private variables in JS, so it seems like it would be pretty difficult to account for all the different methods and all the different edge cases without pretty much writing a full interpreter. Edit: I also asked just because I like the particular module pattern I used in my example. It's a good way to use and extend a module across multiple files.
the point is you are free to separate if you want to. it just doesn't impose this kind of separation of concerns onto you. in practice i have found the lack of separation between client and server to open a lot of doors that you dont even realise exist when you're working in the more traditional thought pattern. being able to share certain "server-side" logic on the client lets you for example do lightning fast ui updates on the client without having to wait for the server to confirm or deny an update to the data. the server will still have the final say in any case. another benefit is you don't need to write separate data validation methods for the client and api. i really feel like were looking back on the overarchitecturing of oop in the haydays if we decide that the separation of concerns is so essential.
DDP takes care of this. As long as your backend would act as a DDP server, everything would work fine. At the last meetup I was at, Geoff (the CEO of Meteor), said this will be a focus of theirs post 1.0.
I didn't say you can't build an API with Meteor, but why would you? Meteor is designed to serve both and front and back end code, but if you decouple the two -- and separation of concerns is usually a good practice -- then Meteor seems like overkill; Node + Restify would do the job and would be much more light weight.
This explains a lot.
Those are some great libraries!
How is this a: &gt; API key-less services for JavaScript The token is an API key. It just happens to be session-based.
The terminology might not be correct. When I think of an API key I think of a static key given to me essentially as an application ID. The token would not be tied to any single application but the session instead.
D3 is what Bostock called it himself, a library of SVG and HTML visualisation tools. How surprising that it isn't what a bunch of different people assumed it to be, before, you know, actually learning something. /s
"Meteor modules are built to work better with other Meteor modules." Agree/disagree? If you disagree, what's the point of Meteor? If you agree, then you've admitted it takes some effort to decouple Meteor layers. And it clearly does! &gt;Realtime data adapters, packages to expose REST end-points and iOS/Android DDP clients (to connect to your server from a native app) are all validations that every layer of Meteor is replaceable **if desired.** So what's the point of Meteor? Is it to unite a bunch of modules under one brand? Not from where I'm standing. Is it designing a single full stack solution for a complicated problem that the rest of the web is dividing into smaller problems and solving in a _truly_ modular fashion? Because that's what I see. --- Another way of looking at it: is every Meteor module going to be the best at what it does? (It'd be arrogance to say yes.) But say a good half of Meteor's modules solve their problems perfectly, and the best solution we find is to take those modules and handpick modules from the web to build a fuller stack. What's so special about _Meteor as a whole?_
I agree that D3 has a bit of a learning curve, but I didn't go into it thinking it was a charting package. Once I wrapped my head around `.enter()` and `.exit()` I found I could use it for more than just graphing. My most recent project used it as a front end for a game. It is in fact awesome.
&gt; Meteor modules are built to work better with other Meteor modules. Obviously yes. The same way everything that substack has built works best with substack's modules and everything tj has built works better with other things tj has built (both are great btw). When the modules are written with considerations of each other (but not coupling), integration is obviously better. You have less layers of indirection and "thin wrappers". Would parse-css work so well with stringify-css and rework-css if it was not designed by TJ from the start? Maybe and maybe not. &gt; If you agree, then you've admitted it takes some effort to decouple Meteor layers. And it clearly does! One doesn't imply another. If A works really well with B, it doesn't mean the interface between A and B forces deep coupling. &gt; So what's the point of Meteor? Is it to unite a bunch of modules under one brand? Not from where I'm standing. What are your arguments for that? That's true from where I am standing. I don't know what you are thinking about Meteor because everything I see from you is FUD. Looks like you have already found what you wanted about Meteor and you are not willing to change your views, so why am I bothering explaining it to you? You can build your app with .NET stack - it has a lot of gorgeous things, some outdated things and a very good tooling. Some people like it and use it. Some people love the concept of "small modules", where you need to try hard and evaluate every npm module that does X and then try and combine all your choices X for every place Y and put them together. Some people would love what Meteor offers - things just work. Integration is already done for you. Not only it is painless, it also can bring a lot of benefits that would require a much bigger effort if you were to do it yourself (latency compensation, consistent id generation for your data, build tool that can target several environments, simple and consistent in behavior RPCs, many other things). Are you afraid of lockin? Do you want to use your favorite rendering engine (like three.js or famous or d3) instead of live-DOM system Meteor has? You can do this! You don't like sockjs as a transport layer and you want to use socket.io? I bet you can do this! (nobody did because in reality a lot of people don't care if it is sockjs or socketio or something else as long as it works). What is so special about MEAN stack as a whole? What is so special about Ubuntu as a whole? (tell me when was last time you collected every utility and every kernel module for your OS)
Sounds interesting, but that's a really long introduction. Nevertheless, I found [ampersandjs.com](http://ampersandjs.com/), which gives a much briefer, "elevator pitch" type announcement (also, if you scroll down to the pink **Discover Ampersand.js** button, you can start seeing some code). My even briefer, possibly incorrect assessment: it's a Backbone-inspired framework that seeks to improve on perceived flaws of Backbone, not unlike Marionette, Chaplin, etc. I'm not sure of the actual differentiators though, and please correct me if I'm wrong on any of that.
What about file uploading, any news in that regard ?
Biggest issue is still its tie to Mongo. They need some more seamless db adapters ASAP
it never was.
Thanks for the info, from my analysis, CollectionFS seems like the real deal, with fileCollection being the runner up. All the others on the list didn't seem to be what i was looking for.
I understand your dislike of this kind of Framework, I am normally like you and will mix and match to build my own stack. What can help you early on in development can often become a problem as things get more complicated. I think Full stack frameworks still play valuable role. Some good things they can do are: Make it easier for new developers in giving them a full stack that can give them a gentler introduction to developing. Can be great to prototype a new product. Sometimes parts of the frame work might be spun of into a separate library if it does something new, or better, with out the frame work the library would probably never have been built. Introduce new concepts/best practices.
Box not Dropbox... close enough I guess.
both are escapes from callback hell.
My company built a prototype with it. I don't know if we have any plans on using it for anything though. The general consensus is that "Nobody uses it, yet".
oh good, another javascript framework. I was just thinking there hasn't been one submitted recently.
It only saved ~4MB however the speed improvements might have been there...I didn't play with it much.
It goes against everything the node community stands for (small, self contained, community maintained modules,) and tries to do too damn much.
What about it isn't convenient though? I've used it a lot, and I find it very convenient for what it's supposed to do, visualize data.
&gt; They know by using newer technology they can attract better talent, and that matters a whole lot more. Wow that is a great point! Never thought about it that way before 
&gt; they may have been pushing for stars. They specifically sent an email asking to star them on Github. I see a lot of parallels with the early days of Rails and I think they'll do well despite being, much like Rails, hated by some. 
Thats alright :) I have looked at that and one other one, the differences between mine and those ones though: - They send the changes to the server, which compiles the less changes - The bootswatchr.com one you have to change the variables yourself - They provided a way to download the finished css/variables.less - They dont have a way to include the source into your own projects Mine on the other hand: - Compiles the changes to the theme client/browser side and updates the elements - (edit) Allows you to visually change the them by using the User Interface components and using color pickers to change the colors. - Provides a way to download a theme.json, which details the variables which were changes, and the new values - Allows you to take the built JS files and embed/use them in your own projects There are a few things which I need to look into though to improve things. I will look into seeing if I can get it to compile the new changes to the theme, and make a .css file aswell!
Ahhh abramz, that sounds great, if you dont mind :) Im working on some changes at the moment, then I can look at making a github pages demo page. At the moment you will have an example page when you download the project, but not a live site for people to see what it does first.
Page crashed browser, would not recommend.
Why test private functions? They are private, because they are not part of the public API, and they can change anytime (their spec changes quickly). If you have complex logic inside them, move those functions into a separate module, and test that.
Common JS and modular nature make this look interesting, I can relate to a lot of the issues that the authors seem to have with backbone. 
Hey Kenman, I have just update it so that the example demo is better and gets built with the rest of the files, so the build folder will have an example distributed with it. Im guessing by 'demo' you mean a live demo page on a site right? instead of a local demo page? Anyway the example page automatically gets hosted and opened by grunt, so its better than before :)
* It's not an emscripten compilation of Diablo 3.
*Private*? I take this to mean you are possibly a Java developer who is used to declaring public or private states. JavaScript only has function scope and JavaScript has native support for lambda expressions. As a result the public/private concept exists in JS without any declarations, but you must be willing to nest functions to expose multiple scopes. var outer = function () { var a = 1, inner = function () { b = 2; return a + b; }; return inner(); }; outer(); In the above example variable *a* is private to *outer* and variable *b* is private to *inner*. Because of the native support for lambda expressions scope is naturally inherited, so *a* is public to the scope of *inner* because the lower inner scope inherits from the containing scope of *outer*.
The blog post page did? That's strange, it's pretty much just straight up static html.
There's definitely some overlap with the other backbone inspired projects. Some of the key differences are probably: * Most of the backbone core components have been rewritten/heavily modified and expanded, for example: * Views have declarative data bindings for updating your html with model data automatically; out of the box, sensible render and remove methods just work; collection rendering is easy. * Models have explicitly declared properties and types, as well as evented + cached derived/computed properties. You can access model properties without .get('name') and .set('name', value) and events and things just work. * Everything is broken up into separate modules, and designed to work with npm + browserify (which we love for dependency management and packaging). Ampersand isn't trying to be a more encompassing application framework like chaplin or marionette (not that that's _bad_ or anything), but more a collection of more developed backbone-like primitives that compose and extend well.
er. read about prototypal inheritance and functions as constructors in js. converting the above to a constructor is trivial. http://jsfiddle.net/LscAC/
Link for the lazy: http://editor.froala.com/
Why not promises? 
Please use http://jsfiddle.net or http://plnkr.co to prepare code example, otherwise it will be hard to see the same code you see. For now, code above doeas not have "userAmount" variable defined.
Probably refers to all the scripts you have in the header tag. If you put them in the body tag (at the very end, after all your content) they will not block the initial page render.
Please also (beside optimalizations) check browser's console in you page. You have to fix errors like "jQuery" is not defined - you either forgot to include it or include it below other scripts that require it. 
Very cool, but I'm a little hesitant to use this anywhere that I won't have power users on my UI. The highlight first, then change syntax isn't something most will be familiar or comfortable with until they try it. Getting users to try interfaces is half the battle.
/// Another Widget that adds to myWidget's que \\\ var another = Frame('anotherWidget').start(); another( [ 'myWidget', 'jquery'] ); another(function(outerDone, myWidget, $){ myWidget.add(function(innerDone){ innerDone(); outerDone(); }); }); this is from Frame.js documentation page, as far as i see, you're still using callbacks
Yup, and Github can host it for you for free. See [pages.github.com](https://pages.github.com/) and [GitHub Pages Basics](https://help.github.com/categories/20/articles) for more info.
Cool, that's good to hear. I'll have to try meteor for my next project!
Promises are valid too, but permanents events are a quick shorthand. Instead of creating a deferred object, return the promise and resolve it in the future, with permanent events you get the same just resolving an event. Of course, you can't use permanent events for replacing promises in all situations. With promises you have much more features and it is perfect to handle paralelism in javascript, a thing that is not possible with PE.
Check out their example http://editor.froala.com/ It works just like a normal text editor.
at that point you basically need a server. which wouldn't make sense unless you also wanted to do high scores or etc. you need code that gives access to a service, but can only put that in public code. pubnub comes to mind but that uses keys or some sort of something.
I second the vote for node-WebKit. Local storage is stupid easy. Save something to local storage: localStorage.someVariable = "Whatever" Recall something from local storage: var iNeedThisFromLocalStorage = localStorage.someVariable It literally can't get any simpler. 
Try angular js. It lends itself to a certain decoupled pattern by design.
FYI, your app doesn't work in Google Chrome because of the following error: Refused to execute script from 'https://bitbucket.org/sras/sentinel.js/raw/default/sentinel.js' because its MIME type ('text/plain') is not executable, and strict MIME type checking is enabled.
Your opinion doesn't really add any value to the conversation. Personally, I welcome new projects like this as long as they are built in a modular way, and I don't believe web application development is a solved problem despite the communities resistance to new things.
I would skip AngularJS and go for VueJS. Much lighter, significantly faster and easier to use. http://jsperf.com/angular-vs-knockout-vs-ember/333
Woah there are more JS devs in Santa Cruz? Totally signing up
[Chrome 35 on windows 8.1](http://i.imgur.com/aYQYhaA.png) Edit: Just a couple of thoughts. I think it's a neat project but I'd consider axing local storage and using something like MongoDB instead so you don't have to worry about losing your data if you clear your browser storage. Second, and ignore this if you already have it built in, but it'd be great if you could add in a separate view for each project/client, that shows what tasks you've done, for how long, on any given day. You could even work in something like [Chart.js](http://www.chartjs.org/). Would be great for invoicing. Just a couple of thoughts!
I second that. In my experience, this definitely sounds like a job for Angular.
Project structure makes a huge difference and I've found it much easier to work on large projects that divide up pages into independently testable, self-contained and loosely coupled UI components that have their own MVC and you don't really need a framework to get the benefits.
You're talking about the inline editor. I think it's more meant to "live"-edit pages. So you can have a true WYSIWYG-editor. As already commented, you can set the program to act like a normal WYSIWYG editor. I personally like it very much. It looks very clean and nice. Thanks OP, I bookmarked it!
JavaScript for the front-end (it is a web application after all and you have to use JavaScript in the web browser). Pick whatever language suits you best on the back-end.
Agreed, I'm kind of up a creek from using RequireJS, but I don't like Marionette's modules either really. If a framework really is a bunch of related but wholly distinct pieces, it makes a lot of sense to provide them as such. Perhaps it won't be as easy "out of the box", but if you have an idea of what you want or need, it should be able to considerably reduce the amount of code that you have to adopt. And it also makes extension more natural -- Marionette, et al. work _ok_, but they just piggy-back on top of the existing framework. I can see the advantages of being able to replace any particular piece wholesale without having to worry about upstream code.
By convention most people assert constructor functions should be capitalized. So many places you might see: function Something( param ) { this.param = param; } var mySomething = new Something( "foo"); But you will often see objects extended through other routes. Read Javascript the Good Parts by Doug Crockford for more information. 
I have fixed the chrome issue now.. &gt;Second, and ignore this if you already have it built in, but it'd be great if you could add in a separate view for each project/client, that shows what tasks you've done, for how long, on any given day. Each client and project can have their own list of tasks and each of those tasks can have its own time, which will get added to tasks and projects and clients further up the hierarchy. Not sure if that is what you mean by a separate view.. Actually the app is just a showcase for Sentinel.js. I am actually more interested in knowing your opinions regarding Sentinel.js and how it is used in building this app..
It looks like your question was answered (put &lt;script&gt; tags at the bottom), but I recommend reading the following article by Steve Souders: [High Performance Web Sites](http://stevesouders.com/hpws/rules.php)
Maybe it's just me, but it seems wrong that the templating directives are part of the original DOM and that the DOM elements are not expanded until after all of the JavaScript has been loaded on the client (bad for performance... I know Angular took this approach as well...). I suppose that is fine for certain types of apps, but I would still choose to use templates that compiled down to JavaScript and avoid the overhead of having to traverse and manipulate the DOM at runtime. I say this, because why not add support for data binding to a templating language that compiles down to JavaScript? I don't think that you need to use DOM-based templates for data binding to work, but I've not really seen a good implementation of this... Given your experience with building Sentinel.js, do you think that is possible? Regardless, I think you did a fine job with what you set out to do and your code is easy to follow and fairly compact. Nice job with the docs as well.
I have looked at the following but I don't think these are quite what i need: - http://js-graph-it.sourceforge.net/ - http://bl.ocks.org/mbostock/4061961 - http://www.bitjuice.com.au/research/#hierarchicalclassificationexample - http://mbostock.github.io/d3/talk/20111018/treemap.html - http://mbostock.github.io/d3/talk/20111018/partition.html
Try Durandal. The patterns basically are: - AMD modules (require.js) - Declarative UI (knockout.js observables, computed, bindings) - Composable views with full lifecycle (comes from Durandal)
I don't understand the title. But, worth noting that this is almost exactly how async await (ES7 proposal) is going to work. Await will be like yield (but with different precedence rules) and async functions will be generators under the covers.
&gt; This may be nitpicking, but one thing that stood out to me is that you have the calculations done within the HTML template, which goes against the idea of MVC, separating the logic from view (html doc). On a larger scale, this could result in code that's more difficult to maintain. Yes, certainly. But if you limit your self to things that are only useful in the context of a template, like making an option pre-selected in a select box, then I think it can be useful. If you remove this functionality, then it would have to be replaced with numerous custom attributes. For eg, take the example of the ng-even and ng-odd directives in angular.js. In a sense you can say that the approach of angular.js is more pure. But I think, may be there are cases where you can cut corners safely, and there something like this could come handy, without having to support a large number of directives..
Pretty much. We have an intranet page at work that I have been saving url hyperlinks to, to be able to create certain things. Other things I just copy code and try to tweak it till it works. 
Any recommendation on something like this that I could incorporate internally? We are using an excel sheet I helped to design and it works fine, aside from user error when they mess up the time formatting, etc.
Ok people are going to recommend angular, and that's cool. The thing is, there are so many damned ways to do one thing you'll need to create a lot of conventions, style guide, etc... You can manage your data as a simple object in your controller scope, as a hacked service/factory, as a pseudo controller thing etc... You can decide to use $scope in your controllers, or use the 'controller as' thing. You can organize your project by object type, functionality, or by view, or whatever crazy thing we think of next. You can use the regular ngRoute, or go with the third party uiRouter (and if you do this, ngMin no longer works blah blah blah). I fucking love Angular, but I don't think it's suited to large projects *that* well. If you want convention, Ember is the choice. If you want a super flexible component based tool, go with React. If you want to build the entire framework yourself, go with jQuery/backbone. Angular sits in the middle of all that shit 
I always here people say this, but how different is one SPA to another? Reminds me of people arguing about how Rails/Django/X PHP framework all suited different tasks
I would use d3. You might not be able to get what you want out of the box, but you could make it happen.
They all suck, use a markup language if you don't want huge bright red blinking shit all over a page from a client.
You can try flowchart http://gojs.net/beta/samples/flowchart.html
damn that is cool. i like how the drawing fades over time so you don't induce seizures too easily
&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;What can go wrong?&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;
There are edge cases to handle, too (or, non edge-cases like errors which I don't think your snippet handles?). And syntax sugar is certainly handy!
I agree with one exception. Bootswatchr runs entirely client side.
Ember.js might be what you're looking for. I say that because Ember itself imposes a lot of patterns and structure into your code. It kind of forces you to develop things their way (like Rails). Many people don't like that (myself included), but the upside is that it almost guarantees that your application will scale well. As far as the Angular vs Ember battle goes, I suggest you read [this](http://eviltrout.com/2013/06/15/ember-vs-angular.html) article that explains a little bit about the differences. Most importantly, it explains the difference between using POJOs and Ember objects (which is the main reason I chose Ember). Also, on the topic of testability, Angular and Ember are both designed with testability in mind. I don't think you'd have any issues if you went with either of those.
%3Cfont%3E%3Cfont%3E%3Cfont%3E%3Cfont%3E%3Cfont%3EQuite%20a%20bit%20actually%2C%20if%20it%20decides%20to%20start%20treating%20things%20literally%2C%20then%20you%27ve%20got%20a%20problem.%3C%2Ffont%3E%3C%2Ffont%3E%3C%2Ffont%3E%3C%2Ffont%3E%3C%2Ffont%3E
&lt;span style="font-family: Arial, sans-serif; font-size: 11pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: Times New Roman; mso-bidi-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA"&gt;Also they handle things people paste pretty safely&lt;/span&gt;
Why do no editors let me whitelist tags. Drives me insane.
snap.svg
Seriously 
If you're looking for a one-stop solution to get exactly the diagram you want, you're not going to find it. However, if you take the time to learn how to use D3, you can absolutely draw those charts with it.
2nded. D3 might have a bit of learning curve but when you need a 3rd type of graph after those two, you're pretty set. 
wtf is this article ? `this` is called context and without the keyword `new` you just refer to `window` in non strict mode and `null` in strict mode: var Klass = function() { /* this == instance of Klass */ }; var klass = new Klass(); var func = function() { /* this == window */ }; func(); // im using this closure to make use of "use strict" ( not really a closure because i dont close over any variables ) // I could also have used a self invoking function "(function() { /* self invoking function */ })()" var closure = function() { "use strict"; var func = function() { /* this == null */ }; func(); }; closure(); And maybe you just want to use a Class all together instead of making a factory. var Server = function() { }; Server.prototype.listen = function() { /* create server listen logic... */ /* and maybe store the server on this.server = something... */ }; var server1 = new Server(); server1.listen(5001); /* etc ... etc... */
I use Ember. It has a learning curve, but once you get it, you get it. If you do use it, you will be weirded out by some things at first, but then they would start to make sense.
Haha, sadly it's an educational, internal game. But I have made three games using D3 which I've posted here before. They can all be found on links from my [GitHub homepage](https://TheConnman.github.io). Sorry for the tease.
Not a bad idea, but I think it might be a little non-intuitive to developers because it is slightly modifying how people typically use events. Events typically don't have a persistent value. The events are fired and forgotten. Changing the name of the library and functions might help avoid confusion. I have had the need to solve the problem you encountered. Specifically, I wanted to a simple way to resolve/reject values so I created a simple lightweight promise class that was similar to promises but didn't implement the full spec (I didn't need chaining and I didn't want callbacks to be notified on "next tick"). A promise-like object held a value forever once it was resolved. When adding a listener callback, the callback that would be notified when the value is rejected or resolved or it would be invoked immediately if there was already a value. I went with the Node.js-style callback function for better compatibility with other Node.js modules.
Rather than using an off-the-shelf approach like Angular, I do SPA with jQuery/PHP which gives me full insight into the architecture needed for each project, and total control over the UX. Here are a few sets of training wheels I've checked out: Smarty, EJS, Django, Angular.js, Ember.js, Knockout.js, Backbone.js, Mustache.js, Handlebars.js, Hogan.js, Dust.js, Transparency.js, ICanHaz.js, Weld.js, Ractive.js, React.js What these do well is aid development teams in sticking with some kind of architectural coding standard, instead of each member branching out and developing his/her own ad-hoc framework within the code base. It also allows you to bring in an "Angular expert" or "Dust expert" now or later who can help tighten up a particular architecture quite well. Even with a framework, you might do it wrong the first time.
Here's [a blog post](https://weluse.de/blog/angularjs-seo-finally-a-piece-of-cake.html) about exactly this problem.
I'm just worried about d3 being too heavy weight.
I hear you. The idea of client-only apps made of static html, js, css is pretty neat. Lots of possibilities. 
That's not really best practice to put javascript inside views. Actually there's an explanation why it isn't good in plugin description. 
Wysihtml5 is based on a whitelist approach, for both elements and attributes 
I'll second this. As someone that has shipped apps with angular, building apps with it is great. The data binding is easy, it's fun to use, testing is somewhat painless. The downside of angular starts appear when you realise that there are infact 5 different ways to do everything in Angular. Angular is great for small team projects. Maybe even small projects in general. The problems start showing up when you add multiple developers. You have to start creating your own conventions for file organisation, using scope, modules and so on. If you want to hit the ground running and have a lot of that done for you, then Ember is the way to go. If you think you might have more custom needs that Ember can't meet, maybe try and make a framework with angular or backbone. 
Yes, both in node.js server and in the client (WebSockets)
I am architecting an SPA at my company right now, and using **Backbone and MarionetteJS for it, broken into RequireJS modules**, and tested/pushed using Grunt dev, prod, and test tasks, which are run on each developer's machine or on prod (concatted and minified by Grunt) using **automated Grunt builds through continuous integration with our repo**. As for code patterns, the most useful tool I've found organizationally is communication through [Radio channels](https://github.com/marionettejs/backbone.wreqr#channel). This is coupled with **judicious use of jQuery.Deferred objects to handle async communications**, especially between requests/responses fetching my models. Then I break things out into relatively self contained "sub apps" which might be multiple modules. For example: I have an authentication subapp which is registered to the 'auth' channel. **Using channels gives you a request/response+command+event messaging system that is globally available and isolatable**. The (separate) module which handles page switching elsewhere in the app makes a request for authorization using `radio.reqres.request('auth', 'session')`. This returns a jQuery.Deferred promise. If the session is already valid, or if, upon asynchronously attempting to validate the session it succeeds, the promise is fulfilled with the session model; otherwise it is rejected and they are sent to the login screen. Any other part of the app has access to this authentication channel as well, so can access the session or any other subapps as needed without passing a bunch of modules around as arguments. Because the subapps register the radio response/command handlers themselves, and because $.Deferred allow them to be optionally async, load order is much less of a problem. *Note: my use of the term subapp probably seems silly and purely semantic, which it is. But, it helps clarify to the team that an entire hierarchy of modules is self contained. Semantic terminology on teams working in the same code base is essential to good team communication - both when talking and when reading code.*
Broken in FireFox 30.0
I just made myself dizzy.
I think you need to read the comments on that article, they make a lot of good points, including how you can actually do everything he says Angular can't do. Not saying that Angular is strictly better than Ember, but this man clearly didn't put in enough time with angular to do a proper comparison.
And it's (usually) simpler. I make a lot of web apps at work, so it's nice to relax with a .html, .js, .css, and me. I think I need to find some real hobbies.
Sheesh, 48.7 MB for the Win version...
This library is a novel idea, but /u/NodeNerd is right. This is creating unnecessary boilerplate just to run the correct script on a given page. If you're not running a SPA, then you should stick to utilizing an asset pipeline or a build system for associating scripts to pages. This is analogous to writing code with a long chain of if-else statements doing type checks when you should consider OOP duck-typing instead. Granted, you could load other scripts that act as controllers inside your router similar to Angular.js, but then you're loading your whole codebase for every page, which could be wasteful.
I've read all of the comments. _Some_ of the comments are valid points. Most of them, ironically, are incredibly dumb, and the result of not knowing enough about Ember.js. (The cold hard truth is that nobody knows enough about _both_ frameworks.) But that's not why I linked to the article. You can disregard 99% of what he says if you read the part about accessors vs dirty checking. Dirty checking will _never_ be as efficient as using accessors. (Whether those accessors be Ember.js properties, Javascript properties, or even Javascript proxies.) If you're dealing with a **lot** of data like I am (several hundred models on one page), AngularJS just isn't feasible without clever tricks. (Not to say that it can't be done, but why end up essentially rewriting what Ember.js or Backbone already does?)
Oh yeah, we have quite a few. SC is new javascript uprising.
&gt; Angular is great for small team projects. Maybe even small projects in general. The problems start showing up when you add multiple developers. You have to start creating your own conventions for file organisation, using scope, modules and so on. That's more of a benefit of Angular, or any framework really. You aren't forced into doing things a certain way. You can do things that are best/most familiar to your team. 
so far so good, would say that templates are an exception to pick one, also I prefer to lock downloading of the bulk of the code until the user authenticates, tiny bit of peace of mind against random hackers there.
I read some of the intro and it's good stuff. Will check out later when not mobile.
This is very similar to what I prefer to do. I am writing mostly vanilla JavaScript, yet enforcing a simple structure that scales well.
That's helpful.
My company uses Ember on a lot of projects, I haven't used it myself but I've heard that it provides some nice conventions. If the development team is relatively well experienced with JavaScript, Backbone can be used to do some cool things. The one caveat is that you will want to come up with some good conventions that fit your domain and technical needs, because most of the time Backbone is more like a group of tools, and less like a framework. There's also always the option of rolling your own. Single page apps basically require you to build an API in addition to an entire JS application, which can be a lot of overhead. I've seen small projects rely too heavily on doing the single page thing, and struggling with how difficult it is to keep up the development pace. SPAs really make sense if you have a complicated UI (i.e. building a tool like Google Docs vs building an commerce site), or you already have/need to build an API to support other platforms. Otherwise, there's a good argument for rolling your own JS components as you need them, and building a regular ol website. There are also tools like Turbolinks or PJAX to get some SPA-type behaviors on non-SPA sites relatively easily.
&gt; window.ಠ_ಠ = console.log.bind(console); Part of the utility is arbitrary complexity. 
Lol, whoops. Thats what I get for not actually testing it. (Edit: to be clear, the $ was just a typo because old habits die hard)
&gt; The downside of angular starts appear when you realise that there are infact 5 different ways to do everything in Angular My time with angular has definitely taught me that are several ways you _can_ do things, but really only one way you _should_ do that thing. 
LOL, that's funny idea
Refactored (untested) (function(object, name, func){ object[name] = function(){ func.apply(this, arguments); }; })(window, "ಠ_ಠ", function(){ (window.console&amp;&amp;window.console.log?function(){ console.log.apply(console, arguments); }:function(){}).apply(this, arguments); // alternative: window.console&amp;&amp;window.console.log&amp;&amp;window.console.log.apply(window.console, arguments); }); Edit: Thanks to the masked stranger who pointed out some really stupid mistakes then disappeared into the shadows :D
https://github.com/abeisgreat/-_-.js
brb registering [http://youmightnotneedಠ_ಠ.com/](http://youmightnotneedjquery.com/)
The real ಠ_ಠ is the lack of a license. I'd just grab MIT if I were you.
[A sublime snippet, tab triggered by "oo" tab](https://gist.github.com/dorey/81ecd29029addff93aca)
For serious, make it a pull request.
Changed the readme, happy now? :P
I'm reminded of [FizzBuzz - Enterprise Edition](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition) that was [posted](http://www.reddit.com/r/programming/comments/1mbd3s/fizzbuzz_enterprise_edition/) in /r/programming awhile back.
I actually made it using jQuery, node.js and webkit. I'll upload the source code soon :)
I am a 16yo self taught developer. Sometimes I like to use GUI programmes instead of the terminal. I guess some other people will also use it. I made it using jQuery, Node.js and webkit (node-webkit). The size is 30mb because it contains the whole node-webkit framework. Its okay if you don't want to trust it, I am just trying to show people what I made :) EDIT: I'll upload the source code soon!
 / src / main / java / com / seriouscompany / business / java / fizzbuzz / OMG java shut up. This is a parody but it is close to the truth. Had to look at some java code related to cassandra on github the other day and it was "click folder, click folder, click folder, click folder, click folder, oh there's the actual code". 
This is the best .js plugin I have ever seen. Thank you!
npm install ಠ_ಠ
Udemy - NodeJS in Action %40 discount - REDDIT40 https://www.udemy.com/nodejs-in-action/?couponCode=REDDIT40
But does it jQuery plugin? 
This is ridiculous - clearly the look **of disapproval** should map to `console.warn`.
When I get to work - gimme a couple of hours. ;-) Edit: All yours: https://github.com/abeisgreat/-_-.js/pull/4
I do chart work do my company an d3 is cool and all that. But due to yhe configurability it takes far to much time to get charts going. I like Google charts apiece due to its ease of quick setup.
we need a name to refer to the phenomenon of humor-only libraries, its getting out of control
SillyScripts^TM
How does that work? I lack the words to google it!
[Somewhat relevant](https://github.com/mgechev/angularjs-style-guide)
Sent a pull request for inconsistency in quotes
Did you create a `manifest.json` file?
i don't see [Sencha Extjs](http://www.sencha.com/products/extjs/) mentioned yet. At the moment i'm working on a single page project with alot of different views and deep-linking. It has a real good modelling and data handling system. Also it's javascript so you can change everything. Ex: you define a store, which has a model and a (ajax)proxy which has a url defined. Then you load the store and after that you can apply filters etc. and hang the store on a grid. Version 5 has just been released ([kitchen sink](http://dev.sencha.com/extjs/5.0.0/examples/kitchensink/#all)). I only have experience with v4. But new additions are touch support, MVVM and other things. There is also a [Sencha architect](http://www.sencha.com/products/architect/) which can be used to develop in a WYSIWYG style. only downside, if it's a commercial project you will need to buy a license though.
Seems like a good case for WTFPL
But don't you think that compiling and managing, let's say 20 different javascript bundles for different pages will be more expensive than running simple pattern matching on page load (which not only defines which javascript to run additionally parses params out of URL). And 'loading your whole codebase for every page' is ok since it is single minified file which will be cached by browser, and no additional script loads will be necessary.
About as useful as most of these minor plugins posted.
I think you're confusing the ideas of events and states. To quote: &gt; This will print 'It is ready' in the console even if the listener has been added after the event triggering. That works OK for the `ready` event, but not for events that fire more than once. The point of an event is to be alerted when something happens, not alerted that something _has_ happened. Especially when that something can happen more than once. If you want to know if something has happened in the past, you should be using states. In this case [document.readyState](https://developer.mozilla.org/en-US/docs/Web/API/document.readyState). Imagine applying this idea to the `onclick` event and you'll see that it doesn't have many uses outside of fire-once events.
SS.js (too soon?)
just started using polymer in a project, I'm really growing to like it.
I went through the tutorial and got the same result. I wonder if it isn't a problem with the api key in popup.js?
I think it's a damned if you do and damned if you don't scenario. If you don't provide conventions, you get people complaining they have to figure things out themselves. If you do provide a certain way to do things, people complain they have to do things in a way they don't like. 
In Perl, we had a fairly large namespace of humor-only libraries. Any library that began with ACME:: was meant only as a joke. That said, there were some pretty original ones.
Seriously, this is how I have always seen Java, no matter how hard I tried to get over it. Tell me I'm wrong.
It's great seeing Google experimenting with what we should have all been doing in the first place. NeXT figured out object oriented component architecture and UI assembly vs. simple ui screen painters decades ago. I rarely enjoy working on new web apps, because while the code is clear to me, the interface assembly is frustrating as hell. With that said, I'm nervous about non-visual element, proprietary syntax, and attributes instead of classes. Explained below: Non-visual elements, like: head, meta, script, style, etc. are kept to a minimum in modern web applications, mostly because they have specific limited usage. However, in this demo, we see new ajax, localStorage, etc. elements with the promise that we'll enjoy the workflow. Are you kidding me? I had one project that used Angular directives in this way and it was awful. You're blurring the intentional and understood separation of concerns. The interface builder they have even struggles with finding them. Oops dropped a few ajax elements into the page and forgot about them, wait why am I making a dozen empty requests? The Polymer proprietary syntax is super frustrating, because the promise of portable web components is now locked into Google. Even though Google has enabled Web Components by default in Chrome, they are still choosing to opt for their framework. Imagine if Polymer worked by wrapping native written components (which are just constructors with methods on a prototype). This would allow me to grab all the Paper elements and code and then work them into my application without needing Polymer. The attributes instead of classes was asked as a question, but I wasn't really convinced with the answer. We're currently NOT using attributes on elements in this way. Why? Because it's more obvious how to overwrite style changes. Classes can easily be cascaded and changed. That was the point of CSS. I'm having trouble understanding this workflow with the element attributes. The designer is far more usable when someone else is demoing it, than using yourself. Google really should have looked at how Interface Builder works for inspiration on linking together components. The drop down is a mess. Someone had to be first though, and I'm sure other companies will be working on even better interface builders.
As the author of bootswatchr, I assure you that all that almost no processing happens server side. The initial grab of relevant less for the version and settings you are using is a request to get the "base less", pretty much everything except variables.less There is also another request to get the variables.less file contents for your chosen version of bootstrap. All actual handling of less and compiling to CSS happens client side. Storage of theme settings uses localStorage. Aside from providing you with the relevant less files, running the gallery, and running the index page, the server might as well not be there. I specifically built it this way to make the application outage tolerant.
Polymer is a polyfill, so my understanding is that web components are supposed to work that way, and they aren't adding proprietary stuff. Paper elements are sort of their own thing but they are open source and based on the base web components/Polymer thing. If Polymer really is not compatible or something with Firefox then I hope the Mozilla people will straighten them out. The thing is in order for components to do stuff you need a common framework for including non-UI code libraries. Otherwise any component that needs ajax or localStorage ends up importing their own random helper library in a random way that may not be compatible or may overlap with some other component's helper library.
Our most popular app is an auction app. On-the-wire reactivity is really awesome for that!
Agreed; I wanted to dismiss the idea that meteor was in some way getting old!
- Proprietary in this sense means that it's not a standard. Much like `-webkit` and `-ms` prefixes being considered proprietary. Nothing to do with open source. - I know the standards are evolving, if you read my post you'd see I wish that they were being used instead of Polymer. - I never said you had to use Polymer, but if you want to use Google's Web Components that they designed in your application, you must use Polymer. See the problem?
Polymer is built *on top* of the standards. Polymer isn't being used instead of the standards. Polymer is a use of the standards themselves, the same say the jQuery uses the underlying DOM API. 
Knockout.js, AngularJS, and Sentinal.js use the DOM as the source of the template, and because of this these frameworks have to walk the DOM to interpret the special directives that are hidden in there. I am suggesting an alternative which is that these templates are compiled at build time so that there is no need to interpret the directives. For example, consider: &lt;div&gt;{{user-details.name}}&lt;/div&gt; This could be compiled to something like (PSEUDO CODE): write('&lt;div&gt;').dataBind(viewModel, 'user-details.name')).write('&lt;/div&gt;'); You could expand this to conditional logic and flow control logic as well. For example, consider this snippet from Sentinel.js documentation: &lt;div&gt;Passed: ~if( {{user-details.marks}} &gt;35) "Yes";else "No"~&lt;/div&gt; This could be compiled to (PSEUDO CODE): write('&lt;div&gt;Passed: ').dataBind(viewModel, 'user-details.marks', function(value, context) { // this function will be called when data bound property changes context.write((value &gt; 35) ? 'Yes' : 'No'); }).write('&lt;/div&gt;');
I think this is the first time I've ever been cited in an online discussion. \- the guy who asked about classes.
Removing this due to plagiarism. The first 2 paragraphs were lifted verbatim from two sites: Mr. Bostock's own page, [Let’s Make a Bar Chart](http://bost.ocks.org/mike/bar/), and Scott Murray's page, [Making a bar chart](http://alignedleft.com/tutorials/d3/making-a-bar-chart). No attempt was even made to rephrase the lifted material, it was simply copy/pasted into their own page. With that, I have little confidence that anything else on the page is original. Considering that there is zero attribution given to the original sources and authors, this is just plain wrong. I'm tagging this user &amp; domain as suspect, and further instances of plagiarism will result in a ban. 
Yes I had the manifest.json, popup.html, and icon.png file in the folder. I only included the .js file in this post since I understood the others and were self explanatory.
Yeah I requested my own flickr api key and replacing the tutorial's api key with mine ended up solving the issue. Thanks!
&gt; if you want to use Google's Web Components that they designed in your application, you must use Polymer. See the problem? No, I don't. If you want to use jQuery plugins, you have to use jQuery. If you want to use something which was built on top of some library, this library becomes a dependency for your project.
They are called "Polymer Elements". It's all on the landing page: http://www.polymer-project.org/
Web components and polymer are two different things. Web components is an umbrella term for a bunch of new related browser apis. Polymer and friends is a library and components built on top of web components. Anything polymer can do we can do too. There is no proprietary api in chrome or anything.
Huh? You just contradicted yourself. You say you don't have to use the dependency and then you go on to say you do? Mind explaining a little more? What I'm saying is that if they wrote standard Web Components, they would work in any browser with Web Components enabled and not require anything else. However, Google has decided to use a framework called Polymer and is advertising them as Web Components. This is misleading as it requires Polymer to be loaded in order to use. If you grab Google Polymer Paper UI you will most definitely require Polymer, so I'm looking forward to your clarification.
&gt; You just contradicted yourself. You say you don't have to use the dependency and then you go on to say you do? Mind explaining a little more? "No, I don't." was the response to "See the problem?". &gt;However, Google has decided to use a framework called Polymer [...] Polymer is a *library* which makes working with Web Components easier.
You should be able use a one link tag to include the polymer component you want and then just use its tag on the page. If it uses polymer or something else, it should not matter and you should not even need to know. Usage for a polymer component should be the same as for any other component built on the web components APIs.
There is mixed messaging. Polymer elements doesn't make any sense IMO. And yet the talk, if you watch, refers to them as Web Components.
Sure, so we agree then. You require the Polymer library in order to consume Polymer components. In what way does Polymer make Web Components easier to work with? The spec was never complicated to begin with. You could just as easily have defined your own component constructors/prototypes and pass to Polymer to handle nuances.
They are Web Components. Just like $('.foo') returns a JavaScript object, but more specifically, it returns a jQuery collection. Polymer Elements are Web Components which were constructed with the help of the Polymer library.
Except this isn't true.
NHM, a package manager for humorous modules. Someone make it!
Why do you think that?
I try to remember that there's a difference between (a) adopting every marginally good idea that comes down the pike, and (b) reading about every marginally good idea that comes down the pike. With the latter, I can sometimes extract some ideas to use with my existing tools.
I think it's unfair to call troll on this, but if you read what my arguments have been, you've basically confirmed my issue. It's a library/framework tool to help write web components and you must use it in order to use the components created with Polymer. I'm not here to debate what Polymer is or isn't. I'm saying that if I want to reuse (one of the many points of web components), I must use Polymer or something that acts like it.
&gt;Sure, so we agree then. Well, I obviously don't agree that there is a problem. &gt;In what way does Polymer make Web Components easier to work with? It takes care of the polyfills and it reduces the amount of boilerplate code for a bunch of convenient features: http://www.polymer-project.org/docs/start/creatingelements.html (the list at the top) &gt;You could just as easily have defined your own component constructors/prototypes and pass to Polymer to handle nuances. Yes, you can of course reinvent the wheel.
&gt; I think it's unfair to call troll on this Huh? &gt; I'm saying that if I want to reuse (one of the many points of web components), I must use Polymer or something that acts like it. And I'm saying that this is a tautological complaint. Sure, if you use something which depends on something (like a jQuery plugin depending on jQuery), then, yes, your project will naturally also now depend on this dependency. You are free to roll your won two-way data-binding etc yourself. But then your components will depend on your library.
Can you explain a little bit more the facilities you have to for differentiating between Create, Update, and Delete via headers?
You are right, those permanent events were never thought to be used with events that can be called more than once, but that doesn't make them less useful. I respect your idea of states, but permanent events can be really of use even if you work with states. Imagine object can have multiple states and maybe want to do some action if the object has been or turn in/into some state. If I check the state before it turns to the desired one, I need to add an event listener (events again, a common or a permanent one will do the trick). If I want to know if after it has turned into the desired state, you can find that the state may have changed again so our action won't be called. Permanent events are about events that are triggered once, but always about events. 
Haha. I like to unwind with some scripted ops like chef or ansible. We're a strange breed. :-)
Maybe I'm too pessimist but does it really work? When [searching all the indexed pages of productmate.de](https://www.google.com/search?q=site:https://productmate.de/&amp;hl=en), I only see pages where JS is not required to make them indexable. Searching something like ["2011 Syrah - Domaine de Sainte Marthe"](https://productmate.de/shop/weinkauf-stgeorg/product/2312?page=1) does not return any result from productmate.de either. 
&gt; I wouldn't recommend PHP, because while it is very well documented and easy to use, the language itself is rather ugly and difficult to use well. Isn't that a problem with JS and Node too? 
On the demo page you linked, all checked checkboxes are flickering wildly. I would not call that working.
&gt; The Google Web team is sick of loosing mindshare to native apps as more people become obsessed with the mobile category. They want to build the web into the app platform that so many people have been trying to contort it into over the last decade We deal with this on a daily basis. For some reason, clients want an app in the store. It doesn't matter if that app is a webapp or a compiled app even if it's free access. They want store presence because they feel they need store presence. If Google/Apple was serious about that, they'd make it easy to include web links in the app store and have them create icons on their user's desktop (without something like PhoneGap.
That is one cringey ass title lmao
That's quite a good point: JS obviously has its ugly parts. With PHP, however, you are forced to use ugly stuff all the time, because its authors had no clear concept of how to name things, which leads to serious inconsistencies. Also, the amount of different small and big tools that now exist for JavaScript means that there's a good chance that for whatever you want, somebody has written a usable abstraction/toolkit/framework.
Best video I've seen on this so far, most presentations fail on the illustrations.
From the demos (like [this](http://www.polymer-project.org/apps/topeka/) or [this one](http://www.polymer-project.org/components/paper-calculator/demo.html)) it looks like Polymer is way too much mobile-oriented. Those demos look weird to me on a desktop...
When I have spaces, it turns them into %20's. How do I fix that?
Use [decodeURI()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI)
Spaces need to be encoded as %20 because a space is not allowed in a valid URL. Only a small subset of characters are actually allowed in a valid URL and everything else must be encoded. Here's a list of characters that can be included in a URL without needing to be encoded: http://en.wikipedia.org/wiki/Uniform_resource_locator#List_of_allowed_URL_characters Check out the docs for "encodeURIComponent" to understand how special characters are encoded: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent To decode encoded characters you can use [decodeURIComponent](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent)
I tried to put SS in a logo for a software product one time. I had no idea the two letters together still have such a deeply negative connotation.
Are you sure you need a special library if you are just trying to make HTTP requests from the browser? You can use pretty much any ajax library such as jQuery or use XMLHttpRequest directly to construct HTTP requests using POST or GET or whatever, and it is easy to set your own HTTP headers. It's probably helpful to create your own module that encapsulates the logic needed to make service calls, but I don't think you need to necessarily adopt any specialized libraries. Maybe I am not understanding your use case correctly.
That's probably correct -- I could just organize those ajax calls myself. I am already using jQuery's ajax functions to make the requests. I'm just looking for a library to organize those function calls.
I think I'm following you. x-skeww isn't really reacting to the core criticism of yours: &gt;&gt;The Polymer proprietary syntax is super frustrating, because the promise of portable web components is now locked into Google. Even though Google has enabled Web Components by default in Chrome, they are still choosing to opt for their framework. My problem with Web Components is that there isn't a united effort for _all_ browsers to implementing Web Components. Google is claiming Web Components are the future and they have Polymer available in the meantime. The 'standard' presented is a mirage that really just describes whatever Polymer happens to currently be doing. 
this was done ages ago by angularjs directives. how is this any different from that?
Shadow DOM. Check it out.
Great, force the entire file to be transferred as unicode, thus doubling the file size (unless it's gzip'd). Stupid.
Agreed.. Mayybbee a few years ago the title would be considered less ridiculous. NPM is being used for web components already, and that shouldn't change IMO (parts of polymer are on npm but not every component, certainly no ecosystem has emerged like React or Browserify). Virtual Dom implementations like [vdom](https://www.npmjs.org/package/vdom) or whatever react did, pretty much replicate the functionality of the shadow dom, with more features and far more browser support. Who knows how long it will take the shadow DOM (and it's API) to finalize and become fully available in most browsers. Once shadow DOM is fully implemented in 80% of browsers, it makes perfect sense for vDOM specs to transfer to the shadow. But I could easily see a react/browserify/** modules propagate and organically grow into something that's equivalent or better than the proposals, before W3 and browser competitive specs are able get their shit together. It's not a competition thou. All these ideas will meld together in the open-source pot, and the line between virtual / shadow dom will blurry in the next 2-3 years. I digress, this was a rant. The title sucks.
I don't see how this isn't just a technical issue - if the crawler can analyze you're SPA properly, it shouldn't make any difference how the served content was generated - that's also a part of the beauty here - if it's not negatively impacting the user (more likely, it's the opposite..), why should it the ranking algorithm? So in the end this change gives us less SEO (which i would categorize serving alternative html content under, besides a lot of other humpti-dumpti stuff) and a more natural ranking. Hopefully!
When the people implementing the standard are the people writing the standard, calling it a standard is stretching the use of the term. The '[standards](http://www.w3.org/standards/techs/components#w3c_all)' that exist have "THIS IS A WORK IN PROGRESS!" _literally stamped_ on them. They are _design documents_. Everyone's got their own opinion on what those documents mean, which you have just directly stated regarding Polymer. Every opinion--X-Tag, Bosonic, Polymer--contradicts the others in subtle and not-so-subtle ways, which is _precisely_ the point tbranyen is trying to make. They are not interchangeable! Web Components refers to a list of competing contradictory tech! If you write a Polymer component, you can't just port the _Web Component_ part of it to X-Tag. Polymer isn't an implementation of the 'standard' because if it _were_, it wouldn't matter which implementation you were using. It's like if jQuery and MooTools advertised that they were "implementing" Plugin Components, and you were arguing that jQuery plugins were "Plugin Components which were constructed with the help of the jQuery library" when they're _never_ going to run in MooTools unless you take the jQuery part _out_. ...Can you at least see why tbranyen is completely confused by your argument?
Very cool, could come in handy for financial operations!
&gt; Every opinion--X-Tag, Bosonic, Polymer--contradicts the others in subtle and not-so-subtle ways No, they don't. Do you think all those MV\* frameworks contradict each other? Does this mean that having some sort of model and a view is a bad thing, because there are so many frameworks which do exactly that? &gt; Polymer isn't an implementation of the 'standard' Of course it isn't. The polyfills are (AFAIK X-Tag uses them, too). The whole thing, however, is not. &gt;Web Components refers to a list of competing contradictory tech! Templates, shadow DOM, custom elements, and HTML imports. Competing? Contradicting? &gt;If you write a Polymer component, you can't just port the Web Component part of it to X-Tag. If you write a Backbone model, you can't just port it to... eh... whatever... Ember! You can use Polymer Elements together with X-Tags. &gt;It's like if jQuery and MooTools advertised that they were "implementing" Plugin Components, and you were arguing that jQuery plugins were "Plugin Components which were constructed with the help of the jQuery library" when they're never going to run in MooTools unless you take the jQuery part out. From the outside, those web components look and behave like any other HTML element. You can mix and match them and you can use them in conjunction with every framework you want.
2 solutions to this problem: https://github.com/bahmutov/scoreunder https://github.com/CrossEye/ramda
You're comparing Web Components to a set of vague opinions on how to structure code? 
&gt; they suggested using a subdomain in a free webserver Github pages is awesome. I can't think of a more convenient way to host a site (it's just a git repository and there's free domain names). For those that can't afford the HTTPS - and are okay with the source code of their site available on a public github repo, it's the most economical way to go about it. However, I don't see why we shouldn't implement better standards for security across insecure networks. The truth is, nothing is *really* secure. Designing an app with the inherent assumption that the network isn't secure is becoming more of a possibility. (PGP webworkers?). Good practice even with https
The fact that they have different ideas isn't the problem, it's that in doing so, they are weakening the conceptual integrity of the unified "Web Component" concept. Which is _also_ fine (in my opinion). But looking at what you said above... &gt;If you write a Backbone model, you can't just port it to... eh... whatever... Ember! The way I intend "port" to be used, you _can't_. What makes a Backbone model a Backbone object include the characteristics that differentiate it from an Ember one. To move the functional parts of the model to Ember would _require_ stripping out the Backbone from the Backbone model. Look, you can write HTML and it's rendered (mostly) the same in both Blink and Gecko. That's because the HTML standard, unlike the Web Components standard, is _followed_. Blink and Gecko have different opinions on how to actually carry out their rendering, but they are still **required** to render it the same way. You can't write Web Components that way. You write Polymer Components, or X-Tags, or whichever. 
But you do use other libraries, don't you?
What are you asking?
As a matter of fact, it is, and demonstrably so. Most of the core-element, paper-element, and google web components demos don't import Polymer directly, they simply import the custom element. Here's an example with the &lt;google-chart&gt; element. The demo imports the element and that's it. If the element were re-written in X-Tags, Bosonic, Polymer.Dart or raw custom element APIs, the example wouldn't change at all. http://googlewebcomponents.github.io/google-chart/components/google-chart/demo.html
What?
"You write Polymer Components, or X-Tags, or whichever." = If you depend on some library, you depend on some library. :P That's the only point you made, really.
Very well explained, but honestly people: take some CS classes, please!
So, that's your problem? That those four specs aren't finalized yet? By the way, ES6 isn't finalized yet either. CSS Animations and CSS Transitions are also still working drafts. That's how the web works. That's how you get actual feedback. You put it into browsers and let people play with it.
I give up. Do you think I don't understand that? I don't have any problem with any Web Component technology doing whatever the heck it wants, experimenting, playing, everything. Do you think there is _no reason_ to worry about a problem similar to vendor prefixes? 
Was I supposed to ignore that line? :P I can't read your mind. I reply to what you write, not what you think. If "I'm saying Web Components aren't a standard" isn't relevant, omit it. It's that simple.
You should check out the [Material Design](http://www.google.com/design/spec/material-design/introduction.html) spec.
Web components don't change a damn thing. Maybe if you've lived under a rock for the past 2+ years. Edit: To expand this a little further, i'm mainly speaking to what we're already getting today by using something like React + modern build and dev workflow tools. 
Not knowing this stuff is relatively embarrassing to admit if you are employed in the field. Good stuff for beginners, though.
I think you have failed to understand 80% of the stuff in the presentation and what it means. 
It's pleasing to see that javascript can be functional to that degree. Seems like good composition is terse although knowing the definite output of each functor makes the code look super neat and tidy.
The part that needs to be standardised is the browser APIs (Shadow DOM, HTML imports, HTML templates etc). That is happening and will work the same across all browsers. But we don't need to standardise or even use Polymer in order to make custom tags which are cross browser and can be combined with other ones. So, simply. I don't understand your complaint about Polymer or web components. 
It is even better to just use lodash.
Is this the same as position: sticky?
Neat, cheers for the watch.
I watched the video and got very excited. Then I tried their simple demo quiz app. It's very sluggish (Samsung Galaxy S4). I'm no longer excited.
Came here to say this. While all the pages look gorgeous when you're not interacting with them, as soon as anything starts moving around it gets really choppy.
I expect you only watched the first few mins. He "plays dumb" to introduce common confusions with JavaScript, then deconstructs them really well. I was thinking the same as you at the start; "surely he knows what a call stack is" etc, but it's just the set up to the talk.
How does lodash solve the problem? Parameters are still in the wrong order.
Fun JS is good if you like a fairly Haskell approach: https://github.com/briansorahan/fun-js
That was a great video. Really useful for visualising how JS actually works. Thank you. 
Oh, sure it's not ready for prime time. But the other guy seemed not to know why it was different than Ng directives. Shadow DOM is why. And web components *are* different than just about anything [your hateful framework here] is doing (unless it's using shadow DOM!). Web components are the future! Encapsulation, yay! Or boo if you're not into that kinda thing. 
By "functional" he means "point-free" and "Haskell-like." Only a Haskell programmer could love the cryptic notations `Number -&gt; Number -&gt; Number` and `filter :: (a -&gt; Bool) -&gt; [a] -&gt; [a]` for functions of two arguments. I sometime suspect that liking this notation is such a difficult task that Haskell programmers are forced to go out and evangelize it -- to anyone -- just to reassure themselves. The result is that bewildered programmers in other language communities are shown this notation in talks and blog posts, typically with no explanation of what it means, no mention of the connection to Haskell, and no real explanation of why it might be better, and are told that all functions should take one argument, and functions of multiple arguments are just syntactic sugar. Well, guess what, JavaScript functions take multiple arguments, and many take a variable number of arguments. You can't do that with Haskell! You can't do that with the speaker's currying scheme, which relies on knowing exactly how many arguments each function takes. Also, "point-free" definitions of functions are always shorter but more cryptic, sometimes much more cryptic; that's just the way it is. Take the function that subtracts one from its argument: `minusOne = function (x) { return x - 1; }`. A Haskell programmer would love to see this written: `minusOne = flip(subtract)(1)`. What does `flip` do? It takes a function of two arguments and returns a function of two arguments where the argument order is flipped. (No, sorry, there are no functions of two arguments; it takes a function that returns a function and returns a function that returns a function...) Which function definition is easier for most people to read? Which function definition is easier to be sure it's correct?
Or use a lazy evaluation library like LazyJS and gain mad speed. https://www.npmjs.org/package/lazy.js The difference can be quite shocking, especially on bigger data sets.
I'd start with [Mozilla Development Network](https://developer.mozilla.org/en/docs/Web/JavaScript) [Eloquent javascript](http://eloquentjavascript.net/index.html) was recommended - I have yet to read it though I found [The Principles of Object-Oriented JavaScript](http://www.amazon.co.uk/gp/product/B00I87B1H8/ref=oh_aui_d_detailpage_o04_?ie=UTF8&amp;psc=1) useful for learning how to structure Javascript 
Is there a non video version of this complaint? I didn't watch the video.
Cool!
with _.partialRight instead of _.partial
I like how you picked the one and only unary operator in Haskell so it couldn't be partially applied. Here's another cryptic point-free function `plusOne = (+1)`.
So... Quick question... Does anyone know how to "unsummon" a demon? 
Okay, ive seen a lot of cool ones like this in this sub, but i have no idea how to actually start coding with it. How do i implement this in notepad++ to start actually making something like this?
Take a look at the github sourcecode and be sure to familiarize yourself with the technologies he's using, in this case it's SVG, which is pretty simple to understand. Edit: Do you want to know how this library is made, or do you want to know how to use it? I'm not sure anymore :(
The bulk of the heavy lifting on this is done with d3.js, so the first place to start is learning how to use d3. It's very similar in concept to jQuery, where you're altering dom elements through chainable actions, but it differs in that the instructions get applied to each of n elements, where n is the size of a collection of data and each element's values are derived from the data. It's an extremely powerful library, but it has a bit of a learning curve as you wrap your head around the concepts. Took me a week of working with it full time before I totally got it.
or demon.remove()?
I want to know how to use it, and implement it in my code
Thanks for the info, ill definitely get myself familiarized with d3
this isn't an intro book.
[**read the spec.**](http://www.ecma-international.org/ecma-262/5.1/)
Very fitting link text, smokebowlington.
Read source code. Look at projects like jQuery, underscore, lodash, Meteor, among others and see how people are really using. Use the dev tools to step through the code to see it in action.
Same here with Nexus 4 / Chrome.
[Professional JavaScript for Web Developers](http://www.amazon.com/Professional-JavaScript-Developers-Nicholas-Zakas/dp/1118026691/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1403976515&amp;sr=1-1&amp;keywords=professional+javascript+for+web+developers) by Nicholas Zakas is a great book too.
Really nice it is supporting stacked bars, I am sure going to check this lib!
Assuming UTF-16...
I honestly only watched 20% of it, your probably right :/ With that being said, I did watch 100% of a presentation given by the same guy with the same title a few months ago. I've also used the polymer library for a few side projects. It's the title of the presentation that I think deserves the most critique. But I apologize for the rant above, especially if I said anything that was incorrect. 
hmmm.. I didn't think about custom domains on github not having the same https as the non-custom domains. I think they switched over to https for gh-pages fairly recently. Now that I just checked my custom domains there's not https. I found this github repo a few months ago, [crypt.io](https://github.com/cryptic-io/web). A startup that didn't get enough crowd-funding. But wow.. just found this: https://github.com/openpgpjs/openpgpjs while trying to give you a link to crypto's web-worker [servant](https://github.com/MarcoPolo/servant). Caniusewebworkers? [Yes.](http://caniuse.com/webworkers) Interesting territory..
Serious question: How many of these are forks? I haven't spent a lot of time outside of the couple mainstream stuff (grunt, karma, ...) so I dunno how much forking duplicates the number of packages.
Pretty uncommon for somebody to fork a repo and publish it under a different npm name. In those cases it's usually for a specific change, like a zepto browserify shim. 
Um how come no one has suggested the Learn Javascript Properly course yet? Just google it, it's the first result that comes up. Excellent course and builds on some books that were already recommended here 
I watched up until the demo. I think knowing how an event-loop works and understanding how asynchronous calls can happen in a single-threaded language is a pretty basic prerequisite to writing good javascript. A "veteran" (as it says in the vimeo description) should really not be learning anything new from this video. Clearly /r/javascript disagrees with me there, which is a bit scary.
The event loop isn't something people are made immediately aware of (sometimes even by people who've used javascript for years) since it's technically supposed to be an implementation detail of the runtime that you shouldn't (in theory) need to worry about when building applications. 
The idea behind the FAQ round-up is that we have a handful of recurring topics, here's a few off the top of my head: * closures * `this` * scope * `// any combination of the above 3` * [equalities](http://i.imgur.com/rWoBHj4.png) + [type coercion](http://www.reddit.com/r/javascript/comments/1geuf6/null_false/) These are often reported to us and/or result in snarky comments. But, some of them are also great, and the sub is constantly growing, so it is indeed often new content for some. The result is that we end up with a lot of the great discussions scattered over many submissions. Since I don't have time to commit a full effort to building out a quality FAQ by myself, I thought perhaps I could crowdsource it -- possibly creating a meta discussion about the topic at the same time. Maybe the idea wasn't communicated well, but since I didn't hear anything, I figured I'd just rethink the approach. Anyways, I still think a good FAQ would be useful, and perhaps the answer is to simply open up the wiki to contributors?
Yeah id disagree as well because he does start at the basest levels of functions, objects, etc it just feels more complex because he doesn't teach any of it in the context of the traditional OOP languages. This is the right way to learn it imo. Now /u/homoiconic ('s) spressore book on the other hand, I wouldn't recommend to a beginner but if you've gone through allonge, you should without a doubt pick this up https://leanpub.com/javascript-spessore
Ofcause when dealing with node.js `this` inside function which doesn't have any specified context (`fn.call(context, arg1, arg2, argN)`) will ether refer to `null` or the global object in node. Is it called `global`?
Odd, it performs pretty good on my Chrome.
Lots of useful comments from this post: [I want to become more experienced with Javascript; what's a good next step?](http://www.reddit.com/r/javascript/comments/26nduc/i_want_to_become_more_experienced_with_javascript/)
It's open-source, so those are all problems that are easily fixed with time. (Brackets is in a similar boat.) The revolutionary part about this is that it's Chrome-hosted. As the project matures, you'll be able to author comfortably on a Chromebook without having to muck around with Linux hackery. Considering both the popularity of {Chromebooks, tablets, phones} and the dearth of authoring solutions for them, this is still a big deal even if it's not yet fully baked.
Spins up my gpu though, likely depends what their gpu is.
[r/learnjavascript](http://reddit.com/r/learnjavascript) 
Technically I could build a million codeless modules overnight and publish them to NPM. The barrier of entry to get listed in NPM is not that high from what I've seen (I have 2-3 modules in there).
https://github.com/dart-lang/chromedeveditor
It's a repo in the dart-lang GitHub account. 
LoL
Definitely needs some optimization work. The animation crawls along on my brand new i7 macbook in Chrome
This is pretty off topic, but does anyone know why the PyPi number 45427 (taken fra the top of this [page](https://pypi.python.org/pypi)) doesn't match the actual number of packages from [this](https://pypi.python.org/pypi?%3Aaction=index) (warning, huge page) page, 49345?
Yes, so? What are you saying? It is not completely free-for-all, there is a TOS you agree to by publishing. If you get spotted/reported for filling the place up with trash it'll get purged and your account banned. But yes, the barrier is low.
The most interesting thing about npm is that it's all handled by CouchDB. Even the packages itself are stored inside CouchDB as attachments.
You should be able to figure it out just with the info he's posted with the library. The menu is a bit obscure, so: https://github.com/danielstern/MagicCircles Clone the repo and play with the lol.js example.
I've almost never come across this. Can you supply some examples?
just like every other package manager?
Even so, it's a tiny fraction of the amount of total repos.
&gt; NPM is the only package manager where people publish packages with 1 method.That's insane. Not insane at all. There are tons of single-method modules that compose well with other single-method modules. Each of these benefits from versioning and dependency management. Gone are the days of "custom builds for library X" since the package manager now resolves the dependencies and functions your app actually needs. The focus on modularity and composability is a strong point of NPM. 
An aspect of the video I found interesting is that makes evident that something like the event loop is not documented in the ECMAScript or any other official documentation. You can read the entire Node.js documentation page without finding specification details on how this ought to work. So, perhaps that's the reason why this video is valuable. 
Is there anything like this for node? A chrome based IDE I mean. 
If you open the FAQ to contributors, would it be a hand picked group of users or anyone who wants to make contribute? So long as someone can filter/monitor the submissions to the FAQ's then sure, but I fear that people might make contributions providing false information if it is not monitored.
Underscore had had partial application for ages though right?
It would likely be restricted to only those with sub karma or similar. Believe it or not, this sub is really well-behaved, and thankfully we don't have any significant trolls or vandals that I know of. There are subs larger than us, with pretty visible behavioral issues, and yet their open wikis haven't been affected at all. The largest portion of mod time here is spent on removing spam/self-promotion, but even that is minor and somewhat starting to thin out.
&gt; but I went through a lot of resources before I found one that made me understand when to use them. Can you provide a link to this resource you speak of?
There are a few confusing parts of Javascript and here is a partial list. The reason I'm creating this is because through my own learning I've come to understand these as the social bottle necks that determines if your more experienced JavaScript peers actually think you know what you're doing. I have a feeling others will either ignore or tack on to this list. If they tack on it will diffuse the artificial constraints necessary to learn, if they ignore it will diffuse the legitimacy of this post. Your mission: Stay the course and trust no one. **Inheritance and the concept of prototypes** Honestly this shit is easy to understand. The reason it's hard is because of the wording being used. There are four things that are referred to as "prototypes" in all of these confusing JavaScript books being written. First, there is an object called prototype that is created when a function is created, then a property called prototype you use for methods when creating constructors, then there is the general non-code related dictionary definition of a prototype, then finally there is prototypical inheritance pattern. I will not explain these. Watch this instead and it will hopefully show how simple life can be: http://youtu.be/S4cvuuq3OKY?t=37m43s Also here: http://youtu.be/Trr95ij1358?t=21m16s http://www.youtube.com/watch?v=lKCCZTUx0sI **this** http://www.youtube.com/watch?v=S4cvuuq3OKY **call, apply bind** http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/ **Scope** JavaScript only has function scope. When ES6 is released it will have block scope via the **let** key word. You are encourages to always encapsulate your variables in functions to inhibit "global variables". The module pattern is a common convention to do this. **Closures** http://www.youtube.com/watch?v=6ZJShKR6alc **==** vs **===** The only difference is == does "type" coercion. If you are afraid of that always use === The way it does type conversion is something you will need to look up as I will not explain it. Last but not least.... If you happen to be an audio geek you can go here when it launches. I'm doing JavaScript tutorials that teach the basics and nuances of the language using audio example like oscillators and other fun shit like drum machines. http://learnwebaudio.com Thanks. 
A lot of redundant modules too. Just search for some type of csv reader/parser/converter. http://node-modules.com/search?q=csv
Did you really intend to post this nonsense to the public internet? 
Idea: 11/10 Execution: 8.5/10 Viability: 3/10
Fork it, sure, but publish it? On NPM, this is pretty uncommon since you can just change your dependency on package.json from `outdated-module` to `your-github-username/outdated-module`.
I'm betting this was written by a sufficiently advanced Markov generator.
&gt; Node &gt; garbage collection not connected to the Dom. * node does not have a dom * even if it did, how would that even affect garbage collection &gt; In well written languages there are less libraries, because the people who wrote the libraries know what they're doing and their libraries provide decent functionality. * is this real life
Something's broken here… you should try going to sleep and getting up again, maybe it'll help.
That's crazy. Why is everyone reinventing the wheel? 
Preach it bro. Don't publish forks... Fork and pull people, you didn't invent that package. Unless it died, then sure, fork and maintain :)
Polymer uses native browser APIs when it can, Angular does not. Polymer supports html imports, Angular does not. Polymer encapsulates the DOM, Angular does not. 
You clearly have no idea what you are talking about.
I read 7 Javascript books in one week. I was reading about 10-12 hours/day but I learned the language quite a bit. What you don't understand in one book is simply explained in another. I highly recommend it.
That's unfortunately a culture JavaScript has acquired, mostly because it has never had a good standard library. 
You realize that you are in /r/javascript right? 
This seems incredibly misleading. It appears like it's using the main source for modules and using that as a measure of overall usage. I can say, for maven at least, that we use it at work on a daily basis, but we do not to reach out to maven central, since we have a private Nexus repository instead of using Maven Central.
What about RPMs, .debs, ports, portage, etc? Have the NPM developers learned how to stop breaking the world yet?
Someone's being emotional and a snob. It's a technology. It has pluses and minuses like every other technology. 
Every framework has it's own pros and cons, I just feel ExtJS did a good job of providing a stable full stack front end framework. And come on! jQuery is a DOM Processing library (Yeah I stopped reading the article the moment he mentioned jQuery) It's all upon on the user, how he freaking writes his/her code, Sencha basically follows MVC structure which is pretty neat! and stop complaining about the framework having bugs, every software does, and they have a strong support team, fixing bugs. Bottom Line: Learn to write clean code, else it will be your worst nightmare.
Because writing `function noop() {}` is too mainstream...
I learned quite a bit from [10 Things I Learned from the jQuery Source](http://www.youtube.com/watch?v=i_qE1iAmjFg) by Paul Irish. It *isn't* about jQuery, but instead about the vanilla javascript techniques used to write the jQuery library. I find his conversational teaching tone very effective and watchable. He's also got a [followup video](http://www.youtube.com/watch?v=ARnp9Y8xgR4). Other than that, there's /r/learnjavascript and the #javascript IRC channel, which can be very useful for asking quick questions about techniques or why code doesn't work (give them a sample on something like [JSBin](http://jsbin.com/)). To speed up the learning process, I'd recommend getting [Dash](http://kapeli.com/dash) or the [Windows equivalent, Zeal](http://zealdocs.org/). These are quick documentation browsers for referencing docs with a global OS keyboard shortcut. Load one of these with the MDN Documentation to quickly look stuff up and you're golden. For instance, now when I type `CMD+Shift+?` on my keyboard from anywhere (usually within my code editor), I get a search window where I can type something like `slice` which gives me the documentation for `String.prototype.slice` and `Array.prototype.slice` (among others).
I guess somebody is jealous... :P Maybe he lost his job to those shitty programmers... :P
I don't remember the think sorry. I believe it may have been on Stack Overflow.
Angular directives are exactly the same thing, you define a tag like `&lt;progress-bar /&gt;` and its replaced at runtime by the html necessary to display a progress bar component. In your implementation of that directive, you can also use native browser apis, and encapsulate the dom.
Are you new to software development ? ;)
JavaScript is the language of the web. The web is not the internet. The web is an application layer thing while the internet (TCP) is transport layer. Examples of other application layer topics are email, irc, instant messenger. JavaScript will do nothing to help you learn how the internet works. If you want to learn the internet then research: * TCP - Transmission Control Protocol * BGP - Border Gateway Protocol * DNS - Domain Name System
OC was deleted, here's my response: &gt; A PACKAGE is a set of functionalities that go together,that's why is it called PACKAGE. &gt; And PACKAGES =/= MODULES. Do you even node? 'npm install &lt;pkg&gt;' downloads a PACKAGE into a folder named NODE_MODULES. At this point in time, calling 'require('module') turns the USABLE contents of that package into a MODULE. Sometimes (well most of the time) a package is dependent on many other packages, which also contain their own little NODE_MODULES folders, upon which require turns them into MODULES, and so on, and so on, and so on. So, if you're developing a package (well anything) on Node, you probably want to maintain a clean global ns and modularize your codebase. Let's say you build a library with 100 modules, and each module does one specific thing really, really well. If designed well, some modules be reused all across your project. Let's say it's open source, and you finish the build, put the entire package onto NPM. Cudos for contributing. However, 3 months later you have another project, and 10 of the modules from the last one (small modules) would be beneficial to reuse. You could always go through the source code, find it, copy past, and your done (whatever). But lets say this happens again, and again, and again. 'npm install hairball' is much more simple and convenient. Let's take it a step further. Javascript is extremely minimalistic, but it's trivial to install a module. If modules are fundamentally simple, then npm acts as extensions of the language. Theoretically, javascript could be considered the most diverse, flexible, and extendible language in the world. npm is not 'just a package manager', it's an extension of the language. 
Thank you all guys!
If medium is going to be used for code explanations/tutorials we should use the code formatting for code, not screenshots from an editor/IDE. I messaged the author, hope she changes it.
No. Unless you are using Node.js, you won't touch actual sockets of any kind in JS. Web browsers do offer the WebSockets API, but don't let the name fool you, they are nothing like Berkeley sockets. Learning JS will not teach you anything about networking -- such as TCP/IP, ARP, the OSI model, Ethernet frames, routing, etc. That's far too low level for what you're doing in a web browser. If you learn JS in the context of a browser, you'll learn a lot about the Document Object Model and the other related web APIs. That's pretty much it. You won't gain any hidden insights into how the internet works. 
Actually, this is kinda cool. I can see the use of it for all kinds of factories and wrappers, such as simple stuff like: var n = name("John Doe"); var b = n.hasSurname("Doe"); n.addMiddleName("Jonny");
Sure, but code blocks without syntax highlighting is better than screenshots of code. EDIT: Also one could argue that it medium notices codeblocks being used enough they might add syntax highlighting. Images of code might not show up as reliably in their analytics.
(Disclaimer: I'm far from being a JS expert myself.) You can't use a "simple for loop" to go through an object because an object doesn't have indices, so there's no way to access the values that way. A return statement ends the function. So if you were using return instead of console.log, you would simply be returning the first element of the object, because the loop would terminate at the first run. But what you want to do is to print out all its elements.
I also wrote a post about partial application on my own blog, if anyone's interested: [JavaScript Curry](http://www.breck-mckye.com/blog/2014/05/javascript-curry/) Really getting into this functional stuff.
Traditional for loops **iterate** over a range of values; you define a starting condition, a test, and a post-iteration change; many languages you'll encounter have this construct. For-in loops **enumerate** the properties of an object. Each iteration of the loop, the variable name before *in* is assigned a property name from the object, and since in JS you can access properties of an object dynamically using the [ ] brackets, you can access the values one at a time. Some important things to remember are that you might hit a property on the prototype of the object, if one is defined by you somewhere, and that *there is no order* to the enumeration; different browsers may enumerate the properties differently. It's also important to note that this is can be 100x slower than a traditional for loop, and since it can list keys that are not array indicies, never use this construct for arrays. To answer your final question, **return** would break the for loop and end the function call as soon as it's evaluated. Console.log allows the loop to continue until there are no more keys. MDN is an excellent resource: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in
[Partial application](http://en.wikipedia.org/wiki/Partial_application) != [Currying](http://en.wikipedia.org/wiki/Currying)
It's cleared some things up but I'm stiff completely confused.
open up your console and type this var x = {'name': 'some name', 'height': 60}; for(i in x){console.log(i, x[i]);}
[What's the difference?][1] [1]: http://raganwald.com/2013/03/07/currying-and-partial-application.html
Is [JavaScript Allongé](https://leanpub.com/javascript-allonge) a good first book about JavaScript? In the old days, there were computer bookstores, books cost $50 or more, and you shopped carefully for the one best book to read. So when writing a book, you had to make sure it covered everything, even if that meant that it couldn't be "opinionated." As a result, most books ended up being gigantic and read like documentation, rather than being like a course that explains one perspective in detail. Both https://leanpub.com/javascript-allonge and https://leanpub.com/javascript-spessore are written with the Internet in mind, rather than a bookstore in mind. When I wrote them, I assumed that my readers have Twitter and access to blog posts. I assumed they're read at least one other book before and/or after reading my books. So, I tried to write something that had some originality, so that you wouldn't feel like you're reading the same two or three essays about closures and prototypes all over again. My hope is that you can then read something like the essay on Currying that's #1 right now, and it will give you some additional perspective on what the author is trying to convey. --- I agree that JavaScript Spessore is absolutely not a first book, it was written for someone who has already read JavaScript Allongé or the equivalent, and it mostly addresses issues of interest to people writing large-scale apps, where coupling and correctness are considerations. However, JavaScript Allongé is [free to read](https://leanpub.com/javascript-allonge/read), and I absolutely, positively recommend it as a great first book to read. I do not agree that it is not "basic." What I say is that it is not trying to take you from zero to writing a web application. But I believe that if you read it *before* reading a book about jQuery, or web applications, or Node, you will actually be *better prepared* to read those other books, because you will have a better understanding of the fundamentals of JavaScript. In My Humble Opinion.
The real benefit of currying/partial application comes when using the technique in tandem with higher order functions such as `map`. For example, say we have some function that takes some number of days, an employee's daily salary, and computes the net amount of money to be given to them, i.e.: function moneyOwed(days, salary){ ... } Given a list of employee salaries, we can automatically run `moneyOwed` for however many days it has been since the last paycheck and get an appropriate list of dollar amounts to be given, using `map`: // map each salary to the appropriate net sum var netMonies = map( salaries, curry(moneyOwed)(10) ); As an added bonus, if you're an employer and want to know how much money total you need to give out, you can use something like `foldl` (commonly also called `reduce`) to take the sum of `netMonies`, like so: var totalMoney = foldl(netMonies, function(a, b){ return a + b; }, 0); Languages like Haskell that curry (/allow partial application) by default make this process seamless, converting the entire above process to this: totalMoney salaries = foldl (+) 0 . map (moneyOwed 10) $ salaries // or, without explicit arguments, since we're just composing stuff totalMoney = foldl (+) 0 . map (moneyOwed 10) In any case, currying is really helpful when you want to be able to use the same arguments for things without explicitly writing them out or defining your own helper functions to do so, all the time. It's a pretty convenient feature to have at your disposal, for sure, especially given HOFs like `map` and `foldl` that allow you to use your partially applied function in an inline style without having to explicitly construct a lambda.
As I said, JavaScript Allongé is free to read. It's normally only $19.00. If you want the ebook and don't have $19.00 to spare, use this link to buy the ebook for just $9.00: http://leanpub.com/javascript-allonge/c/wLzrHa0bf5eD Good today (Sunday June 19th) only. Share with friends, but please don't repost, I kinda-want this to be a Redditor thing (although I obviously can't enforce that).
Well, I've bought it months ago having previous Javascript knowledge (I'm not an expert though), and I liked it very much. I've totally recommend it to people who I talk to and want to start to learn Javascript. And about: &gt; I tried to write something that had some originality, so that you wouldn't feel like you're reading the same two or three essays about closures and prototypes all over again. You accomplished that task.
It's Javascript all the way down... well almost.
I don't mean to imply that it is not upvoteworthy, merely that the video should be targetted at beginners and not paid developers.
The browser does the heavy lifting in that aspect so you won't be exposed to it. If you write in nodejs, however, you will be exposed to some of it, mostly in terms of mapping services to ports and IPs. Any lower than that and you're getting into OS network configuration type stuff, which has thankfully, been largely abstracted away for us web devs.
I'm confused as to whether or not you think your allonge book *is* a good first book on Javascript by this? I feel it is, because I felt like you started out at the basics *of the language* in terms of what an object is vs. a function object, etc. To be honest, I don't recall if you cover topics like control structures but I was approaching the question in the context of someone who has programming experience but wants to learn the language 'the right way'. By that I mean playing to the strengths of the language rather than trying to mold it into something more comfortable based on their previous experience. It's not a good first book for a person who doesn't want to be pushed out of their class based language comfort zone and just wants to be able to enable/disable things with jquery for their day job. However, for truly grasping the language and it's power and pitfalls, I think it's an excellent choice for a first book. I also agree it'd help people then go on to a book about jquery, etc. To be honest I feel like people should also only adopt things like jquery once they fully understand the problems it is solving and the potential drawbacks. You'd be shocked by the number of people I've sat with that 'know Javascript' and can create a click handler with jquery, but they don't actually understand what a call back is and what is actually happening. Instead they've just learned 'this is the syntax for running my function when someone clicks this button'. Maybe my perspective is a bit biased there, as I obviously found the book many years after I had begun using Javascript, but even though I had spent a lot of that time already feeling comfortable with functional programming and prototypal inheritance, etc I still gained a lot of good insights from the book. In fact, it was that book that made me realize that while I 'knew' about functional programming in Javascript on a decent level, I really wanted to get more serious about ingraining more of the paradigm into my thought process and decided to learn haskell. I'm also biased in that I really want the community to move towards that paradigm so I think it's beneficial to see it in that light from the outset though. Either way, I think most of the people around here feel you've done great work with both (plus I noticed you have some non programming related writing out there too yesterday? Interesting) 
There's also a readability factor. It's tough to read regular expressions and be 100% sure what they do. This makes it pretty hard to not understand what's happening.
Whas' this? _(myArray)
Totally agree :)
https://i.imgur.com/1ELFP3B.jpg https://i.imgur.com/6rax1FE.jpg https://i.imgur.com/7drHiqr.gif
That returns true or false depending on if the array contains that value it's an underscore/lodaash function
They provide similar functionality but aren't the exact same thing. Polymer uses shadow dom, so you don't see the html that makes up the custom element which is unlike a directive (unless you have some chrome flags turned on). E.g., in polymer, &lt;my-custom-element&gt; will only render &lt;my-custom-element&gt; in the html. In Angular, &lt;my-custom-element&gt; will show the html that creates &lt;my-custom-element&gt;. This is how web components and shadow dom work, which Angular does not try to take advantage of. Think of Angular as a framework, and Polymer as a poly-fill for browsers that don't let you create custom elements yet.
I personally think it is a good first book, just not a good only-thing-to-read. if someone really only wants to read *one* book and get going, it isn't right. But if someone wants to read a book, also browse /r/JavaScript, also read some blog posts, also check Mozilla's references... I'm comfortable suggesting they have a look.
Web components don't actually exist yet. Modern browsers only have partial implementation, older browsers? Polymer is a polyfill library. Standards aren't even formalized. The two main points of using a web component are 1) Easy development - *for front-end designers who don't know how to code.* - there is nothing wrong with that (I don't judge), but it's not going to help me build UI's. 2) Deeper javascript integration, beyond where we can currently go now, but it only partially exists, the rest is a shim. What you're saying doesn't make any sense. Web components / polymer are still experimental.
drunkenfaggot bringing common sense into the convo lol. I don't think tbranyen knows what web components are or what polymer does..
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Not invented here**](https://en.wikipedia.org/wiki/Not%20invented%20here): [](#sfw) --- &gt;__Not invented here__ (__NIH__) is the philosophy of [social](https://en.wikipedia.org/wiki/Social), [corporate](https://en.wikipedia.org/wiki/Corporate_culture), or institutional cultures that avoid using or buying already existing products, [research](https://en.wikipedia.org/wiki/Research), standards, or knowledge because of their external origins and costs. The reasons for not wanting to use the work of others are varied, but can include fear through lack of understanding, an unwillingness to value the work of others, or forming part of a wider "[turf war](https://en.wikipedia.org/wiki/Turf_war)". As a social phenomenon, this philosophy manifests as an unwillingness to adopt an idea or product because it originates from another culture, a form of [tribalism](https://en.wikipedia.org/wiki/Tribalism). The term is normally used in a [pejorative](https://en.wikipedia.org/wiki/Pejorative) sense. The opposite predisposition is sometimes called "proudly found elsewhere" (PFE) or [invented here](https://en.wikipedia.org/wiki/Invented_here). &gt; --- ^Interesting: [^Invented ^here](https://en.wikipedia.org/wiki/Invented_here) ^| [^Reinventing ^the ^wheel](https://en.wikipedia.org/wiki/Reinventing_the_wheel) ^| [^Invented ^\(album)](https://en.wikipedia.org/wiki/Invented_\(album\)) ^| [^Anti-pattern](https://en.wikipedia.org/wiki/Anti-pattern) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cik7wq9) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cik7wq9)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
There is a difference: A closure is the mechanism whereby a function "captures" the variables defined outside its own scope when it's defined, which is indeed the mechanism used here for "currying" (which here refers to making a new function that calls the old function with more arguments than specified at application time).
The people working at Google (Polymer), need to talk with the people working at Facebook, (React), for an epic, epic combo. Polymer puts the javascript in the HTML; React puts the HTML in the javascript. React renders on the server, creates it's own event-loop in the browser, implements it's own DOM API, and then inherently knows what you already rendered so it won't update anything unnecessarily, with a crazy DOM diff, modular components, which is literally logic to generate HTML. While polymer, has google, which has chrome. If React had access to browser like Google does, they wouldn't need to do half the stuff they do, because Google can tap into the browser and create their own API's. React/Polymer overlap, but have the potential to be complementary. To my knowledge, Polymer doesn't pre-render html templates server-side and update DOM intelligently with Diffs and their own event loop, but they *could* implement that. These libraries NEED TO MERGE into an epic app engine, firefox can't compete with that. 
troll post
Closures are just functions defined inside of other functions that use variables outside of their own lexical scope. As an example: var f = function(a, b, c){ var closure = function(){ /* do stuff with a, b, and/or c */ }; ... } Currying in general is the process of converting a function that takes multiple arguments into a chain of functions that take one argument each. For example, `f(a, b, c) == curry(f)(a)(b)(c)`. You could say that currying amounts to creating a chain of closures, but the technique of making closures is much more broad. 
npm is a package manager, not a good standard library. And before you say, no, thousands of random user-submitted packages a good standard library does not make.
The website just counts modules hosted on the biggest repos. npm is also used a lot differently than most package managers, it's as much an extension of js on a basic, basic level as it is a library repo. I use at least 20-30 modules per project. You need at minimum 5-10 modules to use js sanely. There just isn't a need on that basic of a level for java or ruby or python. It's also really easy to upload a npm module. It shouldn't be compared to maven, because it's used differently. Lein is similar thou, and probably better (also built on the JVM), but it's impressive how fast npm is growing.
evolution - it's organic - survival of the fittest. js is liquid. modularity and simplicity are key. it's weakness is it's strength.
Surely this has the same major limitation V8 faces? Max 1Gb Memory allocation for any running process?
If you look into what Polymer is doing, you would see that it does make sense. My objection is so minor, and yet blown out of proportion in Reddit. Polymer is perfectly fine, I just wish we were able to move away from the Polymer constructor, which will be soon in the future I hope.
A key point of editors like brackets, light table and atom, however, is that they're built on mature, well-tested languages. When it comes to hacking the CDE, I personally am not yearning to learn Dart for a couple of reasons: 1) Lessons gleaned from learning the language won't really be applicable elsewhere (contrast this with something like elisp). 2) Few developers actually work with Dart often, which may hinder addon/plugin development for the editor. Not to mention that the current state of the Dart runtime means that one is more or less at google's whim in terms of support for the language.
In what way am I being dense and combative? They're different things, and as x-skeww points out Google is already making the distinction. I think it was just confusing hearing otherwise from the talk.
I've seen [vtop](http://parall.ax/vtop) which is supposed to be a top replacement written in JS that does something similar to what you're looking for? That said, can they not use Activity Monitor or Task Manager or whatever the OS equivalent is? Is there a specific reason for it to be implemented in Javascript.
I'm with you. As much as I like javascript, at some point you have to admit that hey, maybe ___ is a way more sane choice.
In JavaScript, an object consists of an unordered set of properties. A property is a key/value pair -- a name and its value. The name is always a string, and the value can be any type. Here is an example object: var example = {'foo': 'this is a string', 'bar': 42}; This object has two properties. I put the keys in quotes to remind you that they are always strings, but when using the object literal syntax those quotes are optional if the key doesn't contain spaces, punctuation, etc. Properties may be accessed in one of two ways, bracket notation and dot notation. These both look up the value associated with the property name `'foo'`: example.foo example['foo'] As with the previous rule about being able to omit quotes in object literal syntax, it's only possible to access a property using the dot notation if it does not contain spaces or punctuation, although the underscore is allowed. So if we had var example2 = {'some long name': 'associated value'}; ...the only valid way to access that property is example2['some long name'] These are illegal and will generate a syntax error: example2.some long name example2.'some long name' Another important thing to know is that the bracket notation automatically coerces the thing in brackets to a string. That means it's possible to access properties as if they were numbers, but remember that property names are *always* strings. If we have: var example3 = {'10': 'some value'}; Then these are all valid ways to get the associated value: example3['10'] example3[10] This does not apply to dot notation. This is a syntax error: example3.10 ===== Finally at this point we can now talk about arrays. Arrays are objects, which means they are collections of properties. All of the above still applies: key names are still strings, and so on. But an array is just a special case of an object with property names that are numeric-looking strings. Arrays also have a `length` property which keeps track of the highest seen property name plus one. This makes it easy to write a loop that acts on each property, because you can start at zero and increment by one up to the length, and the coercion to string that is done by the brackets allows accessing property names by number. But arrays are still fundamentally objects, which has several repercussions. For one thing, you can always assign any property you want. For example: var example4 = [0, 1, 2]; example4[99] = 99; Now what is `example4.length`? It's 100, because it's one more than the highest seen property. But what about the properties between 3 and 98? They don't exist -- this array has holes. It's not contiguous. Also, since it's an object, I can assign any properties I want: var example5 = [10, 20, 30]; example5['foobar'] = 'blah'; What does it mean for an array to have an index of `'foobar'`? What happens to the `length` in this case? Nothing happens, as it turns out. `example5.length` is still 3, because the property name `'foobar'` is not numeric-looking, and so it's meaningless to try to talk about the value one greater than it. If you were to write a loop like this: for(var i = 0; i &lt; example5.length; i++) { console.log(example5[i]); } You would only print out the values 10, 20, and 30. The value `'blah'` is there stored in the object, but it's inaccessible because it doesn't have a nice numeric-looking name. And that gets us back to the subject of the the post. What do you do if you want to do something with the properties of a general object? General objects don't have any such `length` property, and even if they did, they wouldn't be of any use for accessing properties that are not numeric. There has to be some other way of getting access to these properties, and the for-in loop is one such way. Consider: for(var name in example5) { console.log(name); } What does this print? It prints: "0" "1" "2" "foobar" Notice two things. First, the names printed are strings. Again, all property names are strings. Even though this is an array, it's still an object. Secondly, it also printed the name of the `'foobar'` property, which the previous for loop was unable to do. Also, the order that you get the property names is completely arbitrary, as objects are unordered sets of properties. In this case it just happened to print in a somewhat logical order, but that is by no means guaranteed. If you are really on the ball, you might remember that this `example5` is an array, and we said earlier that arrays have a `length` property (which is 3 in this case.) Why was that property name not printed here? It turns out that each property has a series of boolean (i.e. true/false) flags associated with it. There are a number of them: - configurable: can these property descriptors be changed, and can the property be deleted from the associated object? - enumerable: will the property be included when someone tries to enumerate (make a list of) this object's properties? - writable: can this property's value be changed by assignment? In this case, the `length` property of arrays is not enumerable, and the for-in loop only returns enumerable properties. Another thing to be aware of is the concept of ownership. If I look up the property `prop` on an object `foo`, i.e. `foo.prop`, that begins a process wherein first `foo`'s list of properties are searched, and if that fails, then the prototype chain is traversed, and the properties of each object in that chain are checked and if any of them match, then the corresponding value is returned. That means that `foo.prop` might refer to something that is not actually a property value of the `foo` object. The terminology here is that `prop` is called an "own" property if it's found on `foo` without having to search the prototype chain. Often when iterating over properties you only care about "own" properties, leading to an idiom like the following: for(var name in obj) { if(!obj.hasOwnProperty(name)) continue; // do something with name } As the name suggests, [`obj.hasOwnProperty(name)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty) returns whether or not `name` is an "own" property of `obj`. Some other related things you should be aware of are, some of which are new in ES5: - the `in` operator: [`prop in obj`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) - [`obj.propertyIsEnumerable()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable) - [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames) - [`Object.keys()`](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/keys) Taking into account the enumerable flag and inheritance leads to the [following table, from MDN](https://developer.mozilla.org/en-US/docs/Enumerability_and_ownership_of_properties): type|in operator|for..in|hasOwnProperty|propertyIsEnumerable|Object.keys|Object.getOwnPropertyNames :-|:-|:-|:-|:-|:-|:- Enumerable|true|true|true|true|true|true Nonenumerable|true|false|true|false|false|true Inherited Enumerable|true|true|false|false|false|false Inherited Nonenumerable|true|false|false|false|false|false 
No, that's not normal...
thats totes not normal bro
Cool article. That subject-object analogy made a lot of sense to me (and I've had trouble in the past muddying through the difference between currying and partial application).
Do the thing which causes your computer to freeze/lock up then press the pause button in your debugger. May show you the loop
I don't think so. Usually browsers crash because of infinite loops. That's more likely to be a problem with your code than with libraries, unless they aren't tested or don't work well together.
Sorry, that was mean. I only commented because of how ridiculous that guys username is. Dude, I'm actually on your side, I don't like polymer. But I have no problems their API or loading external libraries, because npm exists and loading an external lib is trivial compared to loading an image. Everyone should know vanilla js, and use it whenever/wherever possible. But it's not practical, or best practice. I use npm, separating my JS code into components, React components I use just like web components. Each module maintains it's own global namespace (no pollution), inline style tags are maintainable because they can be stored in variables (encapsulating CSS), and I can use powerful logic to generate the templates. Furthermore, React templates are pre-rendered into HTML server side. I don't even begin loading js until the DOM is fully rendered, there is *literally* no faster way to render a page. I bundle my js files into one or two files (from like 20) with browserify, (every &lt;script&gt; tag is a server call, remember that). I also async load 3rd party libraries as needed, all the js loading occurs in the background without affecting the page. Once React loads up, it actually knows what's been pre-rendered so it won't touch the DOM or re-render anything. The user literally has no idea what happened. By the time they figure out what the fuck the website does, JS is loaded and ready to go. React's DOM API is soooo much better than anything else. Functional programming libraries to complement React, watching objects for changes, immutable data structures, lazy-stream loading JSON via oboe (non-block json render as received), this shit is amazing. I might try combining polymer with React, later tonight actually. Yeah, Polymer is pushing their google version (this that bullshit) it's how the browser wars go. Ultimately the community will build the tools we need once they're available for use. I promise that once web components become more supported there will be tons of API ports/clones/combos to choose from, or you can go native. I'm not convinced that polymer anywhere near the level of React at this moment in time. But a year or two from now?? We'll see :) Web Components have the potential and longevity, React is what we have NOW. Once web components become as robust as React, I'll probably switch over. Polymer or no.
I love this trend. Curring/Partials are powerful and should def be used considered. Weird it's becoming popular now, I heard Crockfords all about FRP now. I think that clojure/cljs is influencing node (I love clojure), and node is definitely influencing js. These patterns are old thou, like really old. npm + github + youtube + browserify + gulp/grunt, the community is getting it's shit together, smarter people are writing libraries and articles (no offense to pre-node js devs, but node really brought in some creative people). 
If you want to post some example links and test cases I'd be happy to do some debugging for you.
Not sure if I understand your question correctly, but what I understand is as simple as: document.getElementById("demo").innerHTML = generateRandomSentence();
Funnily enough I was thinking about the same thing a couple days ago, and it's definitely possible, though I'm not sure it's the best idea. I looked into hacking together a small websocket server that would push stats, then using [this library](http://fastly.github.io/epoch/real-time/) to display nice graphs. Things to note: - That (and other) chart libraries have non-trivial CPU usage — if you're running it on the same machine you're monitoring, the results will be polluted. - You'd have to have a server running on the target. I don't know if that's practical for your situation - If you're allowing any commands to be sent back to the target (kill process, etc) then yeah, security will be an issue. Setting up authentication would be (IMHO) more trouble than it's worth. You say "small systems in the field." If these systems are already running a server, it should be pretty easy to add an endpoint that returns cpu stats. If that's not the case, then you'll have to evaluate whether or not setting that up is worth it. TLDR; You'll have to set up a server on the target machines. There are plenty of javascript libraries to make the GUI.
I suppose you could do `NodeList.prototype.forEach = Array.prototype.forEach;` instead of the common approach of `Array.prototype.someArrayMethod.call(someNodeList, etc)`
I suspect its mostly because the DOM definitions are independent of the language spec, and the last major DOM spec (DOM Level 3) was standardized many years before ES5 was finalized. Because NodeList inherits from Object and not Array (see the diagram on that MDN page) it does not get new Array methods when they are introduced into the language.
code review from the Galaxy-Note-3-vs-Galaxy-Note-II-vs-Galaxy-S4-vs-Google-Nexus-5 page CSS: Instances of padding:none is not valid, you probably want: padding:0 instances of: margin-bottom:10; are missing its measurement unit. Consistency: You seem to be mixing RGB() and hex color codes. RGBA() with an an alpha value less than is ok. It's probably from using code from people with different coding styles JS: JQuery: Seeing a lot of calls to $("body") and $("mainsearch") and $("pinterest"). You can store the initial query into a variable and avoid hammering the page with the same queries. If onStuff is called and datum is not undefined and cururl is not equal to newurl, you have a return with unreachable code after it. HTML: &lt;ul class="small-block-grid-4" style="margin:0px;" data-equalizer&gt; is unclosed. It's probably ok since the parent element also closes immediately after when it should be closed. The page has duplicate id="decisions".
Can they even do multithreading?
I'm pretty sure a curried function can take multiple arguments in each step of the chain: `f(a, b, c) == curry(f)(a)(b)(c) == curry(f)(a, b)(c) == curry(f)(a)(b, c) == curry(f)(a, b, c)`
Finally, the National Pastoral Musicians are blowing up!
Polymer is not a Google-specific project really. The whole point of Polymer is to polyfill a web components standard to work with multiple browsers. I would try to use prerender.io to do server-side generation for Polymer.
I'd rather see it search through a dom based selection, than just text.
I know currently there is the "prefetch" and "prerender" rel values, but these aren't totally supported yet and I wanted to keep this simple. I have a different solution that used history.pushState() to update URLS and actually replace content and avoid page loads all together, but I felt like something like this would be far more applicable on any site. Don't know. I'd love to hear the thoughts of /r/javascript
That returns true or false depending on if the array contains that value it's an underscore/lodash function 
My question is, what would this be used for? As the core of an operating system on its own? Could you make a machine boot into this? I hope my questions aren't too silly, but honestly, JS and "operating system kernel" don't seem to connect in my mind too well, for obvious reasons.
You should check out Brian Lonsdorf's (the speaker) [Frontend Master's](http://frontendmasters.com/). It comes out in about a month and it's pretty stellar. It goes in-depth on functional JS programming. **Note:** While I don't gain anything from you subscribing to Frontend Master's, the founder is my good friend.
"How did you two meet?" "I messaged every girl with an 85% match rate on OK Cupid and a few of them answered."
it's more versatile this way. however, I may add that!
I used your default settings and just added my authcode. 1 minute later I'm at 2 replies (both of which tryna meet up). I think you're on to something here...
I usually add way more flair to the story. Throwing in expositional content, random pieces of technobabble, and a re-telling of how great our first date was.
Basic funnel logic. Good luck, make sure to vett people well before meeting them! *edit: fixed typo :p
It's always nice to feel pretty. I gave them a compliment, and they have no idea whether or not I meant it, and if they respond I feel like the prettiest girl at the party. It's a win-win.
at the very least come up with a unique message header and body...
 function generateRandomSentence() { var things = ["a","b","c"]; return things[Math.round(Math.random()*things.length)]; } Is that what you're trying to do?
Nothing, it's a consistency issue.
Thanks. I'm going with highcharts.
Unless you meet them at the vet.
Taking copy/paste online dating to the next level!
Let's face it, though, Ted was never nearly pragmatic enough to implement this kind of hack. He did that one "matchmaker service" and it bombed, and that was it. 
True - his biggest hack was the rain dance.
There's more to customization than styling.
See also (by same author): * [Assigning Backbone Subviews Made Even Cleaner](http://ianstormtaylor.com/assigning-backbone-subviews-made-even-cleaner/) * [Break Apart Your Backbone.js Render Methods](http://ianstormtaylor.com/break-apart-your-backbonejs-render-methods/) These are pretty much classics on Backbone rendering. Of course, it's not 2012 anymore, and most everyone's using some View library or other on top of Backbone, if they haven't moved away from Backbone altogether. 
string.match(RegExp) will apply the regular expression RegExp to the string and return either false or an array with matches. The regular expression /[^ ,]+/g will match all non word boundaries (spaces and/or spaces with comma, the ^ means "not" in regex groups), therefore the length of said expression will be the number of words or false. By using the logical OR operator ("||"), the false will be replaced with an array the length of 0.
It's a [regular expression](https://en.wikipedia.org/wiki/Regular_expression). A Mozilla Developer Network article about JavaScript regexes can be found [here](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Regular expression**](https://en.wikipedia.org/wiki/Regular%20expression): [](#sfw) --- &gt;In [theoretical computer science](https://en.wikipedia.org/wiki/Theoretical_computer_science) and [formal language theory](https://en.wikipedia.org/wiki/Formal_language_theory), a __regular expression__ (abbreviated __regex__ or __regexp__) is a sequence of [characters](https://en.wikipedia.org/wiki/Character_(computing\)) that forms a search pattern, mainly for use in [pattern matching](https://en.wikipedia.org/wiki/Pattern_matching) with [strings](https://en.wikipedia.org/wiki/String_(computer_science\)), or [string matching](https://en.wikipedia.org/wiki/String_matching), i.e. "find and replace"-like operations. The concept arose in the 1950s, when the American mathematician [Stephen Kleene](https://en.wikipedia.org/wiki/Stephen_Cole_Kleene) formalized the description of a *[regular language](https://en.wikipedia.org/wiki/Regular_language)*, and came into common use with the [Unix](https://en.wikipedia.org/wiki/Unix) text processing utilities [ed](https://en.wikipedia.org/wiki/Ed_(text_editor\)), an editor, and [grep](https://en.wikipedia.org/wiki/Grep) (global regular expression print), a [filter](https://en.wikipedia.org/wiki/Filter_(computer_science\)). &gt;==== &gt;[**Image**](https://i.imgur.com/Z6hDK7D.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:The_river_effect_in_justified_text.jpg) - *The regular expression \(?&lt;=\.\) {2,}\(?=[A-Z]\) matches at least two spaces occurring after period \(.\) and before an upper case letter as highlighted in the text above.* --- ^Interesting: [^Perl ^Compatible ^Regular ^Expressions](https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions) ^| [^Comparison ^of ^regular ^expression ^engines](https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines) ^| [^Grep](https://en.wikipedia.org/wiki/Grep) ^| [^List ^of ^regular ^expression ^software](https://en.wikipedia.org/wiki/List_of_regular_expression_software) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ciko9id) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ciko9id)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Ahhh thanks so much, this clarifies quite a bit. It sounds like I should study regular expressions in javascript if I want to learn about this in great detail and repeat this kind of work. 
thank you
Inb4 OkCupid adds rate limits on messages and this is foiled.
If you take this any further your script will elope with the nicest bot and you'll have to create a new profile!
To cite the famous line: "Someone who has a problem sometimes thinks: 'Hey, I know Regular Expressions, I can solve this' - now he has two problems". Regular expressions are a great solution for regular problems with strings, but bear in mind that not all your problems are completely regular.
&gt;"I copied and slightly changed the comment above me strictly for pedantic reasons."
Worst "How I met your mother" ending ever
InB4 they generate a new auth token for each message. They're not gonna want their users to get spammed, so if this catches on, they'll fix this pretty fast.
Don't overdevelop the bot. Otherwise, I'm imaging the dates IRL: you seemed a lot nicer in the messages!. They might fall in love with the bot instead of you.
InB4 'You are doing that too much, you can only send X messages to strangers in 1 hour'
I'm am totally accepting pull request. I no longer have an okCupid account which makes it hard for me to develop and test the script. 
I just want to drop this here: http://robrhinehart.com/?p=1005
&gt; making it sleep on each loop. If you could only send 5 messages to strangers per hour, or 10 messages to strangers per day, then sleeping on each loop isn't going to help you. Its still going to be slow enough to make it ineffective. &gt; automate dupe account creation They already have captchas on account register screen, I believe. Even if they didn't, you'd also need to automate answering all your questions (to get a match), checking inbox for any new message on your 1000 accounts, etc. At that point it becomes easier to just send the messages manually. &gt; It's cute that you think this is preventable though It is though.
Well, yes, spamming is super awesome if you're the only one who's doing it.
All right, I agree that a script would be more effective than manually doing it. But still, 5 people per hour means you'd need to have the script running for 20 hours just to reach 100 people. &gt; http://www.deathbycaptcha.com/ Its not free. No one is going to spend money on this. &gt; All easy to do. Lol. I dare you to write a bot to do this, then. Keep in mind I [wrote a bot](http://www.reddit.com/r/botwatch/comments/28xzjn/i_wrote_a_bot_which_grabbed_the_usernames_of_many/) just last week for doing something on another site, and it took me at least 10 hours of work over the weekend just to register accounts (without captcha) and generate posts. So I know what I'm talking about, its a 100 hour+ project to automate answering all questions + checking inbox. 
There's an Asimov short story about that!
A Selenium script would probably be a lot better. Also, okCupid published some data on good profile pictures: http://blog.okcupid.com/index.php/the-4-big-myths-of-profile-pictures/ Don't be discouraged (:
There's an Isaac Asimov story a bit similar to that... Edit: Looks like someone else commented this at the same time I did! For those interested the story is called True Love. [Wikipedia](https://en.wikipedia.org/wiki/True_Love_%28short_story%29) links to [here](http://www.enfans.com/45/79078.shtml) as a copy of it.
Sounds like the lead up to a bad joke... "So the spamming worked, but why JavaScript?" "I don't have a strict type." 
Perhaps it has to do with the fact that originally, NodeLists were *live*, meaning the collection would automatically update with changes made to the DOM: var divs = document.getElementsByTagName('div'); console.log('before', divs.length); var newdiv = document.createElement('div'); document.body.appendChild(newdiv); // append a new div console.log('after', divs.length); // now the collection holds one more 
or if you are a vet
Lol! That's pretty funny.
The _'integrated'_ got me catched. But it's seems that it is not really integrated *into* GitHub. Rather another Web-Chat which supports inline-Links &amp; Popups to cited Github issues &amp; Jenkins results. Not sure how much this is really required taking into the account the the Github issues reflect a nearly identical form of collaboration already.
&gt; zero practical cost You have to remember to run the bot every day. Then you have to check your messages every so often and meet disappointment at seeing an underwhelming response. All that isn't a zero cost. &gt; OkCupid would have to really cripple their service for normal users Not really, I doubt anyone really messages &gt;50 strangers a week. If they do, they're probably spamming / copy pasting the same message anyway, OKC's quality would probably improve by restricting them. &gt; authenticating and checking the inbox of a list of accounts is a few lines in a loop and 30 mins of work That's not the only thing though, you also have to find a way of showing the results to the user, to notify him when there are new messages, etc. All that is included in the 50+ hour timeframe I gave.
&gt; You set the bot to run automatically with cron. All right, I thought we were talking about a javascript bot here. Cron is fair enough. If you really think it'd take so little time to write the bot, then you should write it. If you don't, that's your acknowledgement that its not all that simple to make it worth the time.
Who says romance is dead?
&gt; of the page components and widgets to work just as well on their own page. Give them their own CSS file. Let them make their own ajax calls. Coordinate shared resources through dependency injection. Use requirejs if you can. DO NOT share dom elements. Tie lifecycles of your widgets and their dom elements strongly. Let the app objects job be rigging the objects together via events or pubsub. Thanks for the suggestions. I've found this extremely helpful in the past. I've designed components that work within the confines of their own sandbox and test page, and it seems to keep things neatly separated. Thanks again. 
&gt; ur data as a simple object in your controller scope, as a hacked service/factory, as a pseudo controller thing etc... &gt; You can decide to use $scope in your controllers, or use the 'controller as' Yeah, I think aside from frameworks, a clear structure that promotes isolation is key. Thanks for the suggestion.
I think /r/okcupid would get a small kick out of this, as well as go into a conniption fit…
Coolest talk I've seen in a while. Links from the talk: Algo 1: * [NY Times 512 paths](http://www.nytimes.com/interactive/2012/11/02/us/politics/paths-to-the-white-house.html?_r=0) * [Raymond Hill link mentioned](http://www.raymondhill.net/voronoi) * [bl.ocks.org multi line voronoi](http://bl.ocks.org/mbostock/8033015) Algo 2: * [Breaking down the Mega Dropdown](http://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown) 
Well...not usually. That tends to happen in Javascript due to its untyped nature but the process of currying in general doesn't really specify that. That's in part due to the fact that currying is a high-level programming languages topic and isn't specific to Javascript syntax.
You're not a dev then, no?
I just chose by huge boobs and sexy face. 90%+ may not work out, but at least you got some sexy face and boobs for a while. Although I wasn't looking for a gf, was looking for fun. Mmmm fun.
This is how I learned to date as a young man. Better to strike out 10-20x and get one home run than to sit in the dugout wishing you could hit a homerun. I have so many friends that are afraid of failure to the point of not trying (this goes for a lot more than dating). So irritating. You get one life, get busy failing!
Except you didn't claim that you could shave a coconut in 30 mins. If you claimed you could, and someone asked you to prove it, and you tried to backpeddle, then he'd have good reason to call bullshit. P.S Didn't you say above that you'd pay money to get laid and would pay $50 to spend on captchas for OKC. So clearly you'd have use for this bot. 
&gt; I -- and anyone else who is experienced in shaving coconuts -- know that 30 mins is a very reasonable time Given that **I** have shown an example of a fairly sophisticated bot I wrote which did something very similar, its reasonable to call me experienced, and I don't agree with you that its a simple task to write this bot. So, your example is false. A better example would be if you said you could shave a coconut in 30 mins, and a guy who had just shaved a coconut and has the shaved coconut sitting in front of him, said 'No you can't, prove it', and then you said 'I and anyone experienced in shaving coconuts knows that 30 mins is reasonable'. Put up or shut up.
http://programmerryangosling.tumblr.com
Yes, there's also libraries already built to handle this. Have a look at [require.js](http://requirejs.org/)
You can, check the async load way described here http://friendlybit.com/js/lazy-loading-asyncronous-javascript/
I was basing that assumption off of [Lo-Dash's `_.curry()` function](http://lodash.com/docs#curry) which says: &gt; Creates a function which accepts one or more arguments of `func` that when invoked either executes `func` returning its result, if all `func` arguments have been provided, or returns a function that accepts one or more of the remaining `func` arguments, and so on. The arity of `func` can be specified if `func.length` is not sufficient.
I'm sure there will be improvements, but I'm not naive enough to think that a bot could be made which fills in all the questionnaires and fetches inbox messages (which may well need javascript execution) in a trivial amount of time. Also, the bot I made wasn't anything trivial, it registered 8.5k user accounts and made 300+ posts. So I would say I'm fairly experienced. You haven't even shown one example of any bot you've made. 
Great talk! Voronoi algorithm kicks ass.
There’s no post-processing at all. The particle texture have just a very large soft glow around it: http://i.imgur.com/SYlXuQH.png Either your GPU find it difficult to render that amount of overlapping polygons with an additive blending, or your CPU is mad about the constants updates of the vertices. What device are you using?
&gt; The bot you made is trivial with Python and requests. It did 6 things: 1) Get a list of posts in /r/conspiracy 2) For each post, get all the comments, and the usernames which had made the comments. 3) Register those usernames on another site 4) Get a list of posts from /r/sex and /r/conspiracy and combine them to generate humorous posts 5) Login to the accounts made in step 3 6) Submit a post made in step 4 May be it would've been trivial to do all these things in python, but not in the language I wrote it in. If anything, that makes me more experienced as I had to deal with things on a lower level. Also, I had to deal with two sites, reddit and the other site. So I would say I actually wrote two bots in one. &gt; Python/requests sends GET/POST requests directly to the server No dummy, I was saying that its possible that questionnaires are fetched via ajax, or when you visit your inbox, the messages are fetched via ajax. So rather than one simple get request, you'd have to make 3-4 and process their outputs. &gt; post the source for your bot Why would I? You've not shown anything that you've done to show that you're experienced at all. And you're the one making the claim that this bot would be trivial. I've already shown my experience. The burden of proof is on you to prove your claim.
Sure, here's how: http://webmasters.stackexchange.com/questions/8525/how-to-open-the-javascript-console-in-different-browsers The idea is to paste the script into the javascript console provided by your browser of choice.
Honestly we can sit here and argue all day, but /u/MEAT_FIST is getting a date. It is pretty hard to argue with that, honestly.
My biggest insight with online dating was that you wanted as many people as possible - basically everybody - at the first stage and than you want them to actively filter you out. It doesn't matter how attractive (or not) you are, it matters how big the input size is and how quickly in the funnel you can get them to reject you (since the later they are discarded the more expensive/timeconsuming it is). Since you are only going to date one (or at most a couple) the percentage that accept you doesn't matter, the absolute number does. It is the same thing for employment.
[The Birth and Death of Javascript](https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript) might elucidate what's going on.. The talk is satire, yet, for better or worse, some of what he predicts will probably come true. Linux is C, C can be compiled into JS with emscripten - thus JS can be kernal. When C was first being used, nobody thought it would be in all our kernels... in JS [it's turtles all the way down..](https://github.com/substack/stream-handbook)
Oh I am sure that it would be annoying for the girls who don't care about the messages, but that isn't your problem.
Yep. I never got the idea why okcupid doesn't put a limit on how many people you can contact.
Holy Balls. Wanted to use Chart.js for a project, but settled with a bigger library because it was more interactive and I didn't have time for doing my own stuff. Deadline is today so this is **PERFECT**, should take 5 mins to move over. 
Actually if you make the spamming difficult enough it will just be easier to do it manually. Or just limit the number of messages you can send a day.
it had _.partial yes, but _.partial with placeholders is new.
while they do have excellent resources, i tend to think npm, rubygems, etc. are 90% shitcode, shoveled by hipster pseudoprogrammers for resume purposes.
jibber jabber.
resume building. "yo dude i got 30 modules on npm. check it. (never mind that it's a steaming pile of shitcode)" it can work.
Doesn't do anything on Firefox 30.0
It looks like it just redirects the user to one of the two URLs in the array (though they are both the same URL). The page URLs linked there just give me a "loading payment details screen" and then pop up with an exe it wants me to download and (presumably) run. I guess all that really matter is it's malware and should be removed or ignored.
This further confirms the old saying, "dating is a numbers game".
Ok thank you. That's what I had gathered I just wasn't sure if there was anything else going on in the background besides it prompting for that .exe I'll send out an email to my company, thanks.
We released it this morning. Take a look at it and let me know if you have any questions.
That will trigger lots of load when the user hover his mouse on the page. u would better use analytics to know where users usually go &amp; prefetch on that basis. Note also that the different way u proposed with pushState is not nice in terms of SEO as search engines dont run js code, so u will need to provide fallback for it.
 &gt; Note also that the different way u proposed with pushState is not nice in terms of SEO as search engines dont run js code [Not true.](https://support.google.com/webmasters/answer/174992?hl=en) That being said, a fall-back should be made for the overall accessibility of content. My proposed method wouldn't break browsers without JS since all it does is attempt to grab the contents of links. I'll need to polish it up and publish it, it's pretty hard to talk about code without seeing it. 
Sweet, this is exactly what I needed - something more in-depth than what Chart.js was yet less in-depth than D3 and with IE8 compatibility. 
The page u referenced say the same thing i said, "u should provide a HTML snapshot or fallback for search engines", no difference!
Holy shit, can't watch it right now, but I hope it's good. I'm in a need for a good tutorial on this. So far I've managed to setup grunt to compile handlebars templates into the Ember["TEMPLATES"] vars, but I need more. More! Thank you for this!
"Better browser" message on Chrome 35.0.1916.153 on Mac OS 10.6.8.
They do, if you send too many messages you get "secretly" throttled, your messages will start taking a long time to go through, and most won't, the sender will think they have but they'll never arrive in the recipients inbox. OKCupid isn't dumb and this will fail if it sends more than a dozen messages a day.
&gt; Each of these is a few lines at most. In python, and mostly because of Praw. I'm sure very experienced at being a script kiddie, i.e using other people's APIs. If anything, it makes me more experienced than you to have done things at a lower level. &gt; A POST request. No, you need to manage cookies too, to stay logged in. &gt; More GET requests and regex. String concatenation. More complicated than that, I had a slight algorithm for making sure it had equal words from both posts, and it didn't just concat the titles, but the whole post. &gt; The fact that you're saying the stuff outlined above took you so long would suggest that's not the case. Because I did not use other people's APIs like a script kiddie. I had to do a lot of them myself. As I said, it only makes me more experienced than you. &gt; thinking that one attempt makes you some kind of relative expert Not attempt, success. Secondly, you have shown 0 examples of anything you've done, so to call yourself an expert is laughable.
&gt; It doesn't matter how attractive (or not) you are, it matters how big the input size is and how quickly in the funnel you can get them to reject you Is this a sex joke?
I'm not sure about matt, but this makes my i7-3740QM cry on chrome 35.0.1916.153 m.
If you're just getting started on Grunt, I would say just switch to Gulp before you get yourself entrenched. Grunt becomes unmanageable fairly quickly and is also a lot slower in most cases. Gulp is mature enough and has the ecosystem to replace it entirely.
This works amazingly.
Hey guys, I'm one of the engineers behind this app. Feel free to AMA.
Same here, missed the interactivity.. Started writing my own in raphaeljs. This makes life so much easier.
I'm the other engineer, here to help as well
Oh yeah, I've seen that talk. "Yavascript". Absolutely brilliant. I'll have to watch it again! Thanks!
Also, for the best experience use Chrome or Safari. Firefox doesn't ~~support~~ use WebKit.
Thanks for the feedback. PencilBlue actually abstracts its data access layer so you can write a plugin to use the database system of your choice.
This is excellent, very innovative. Bookmarked! Edit: This works great as a web app (iOS) but could do with a proper icon when I add it to my home screen - any chance you could add one?? :D
&gt; Firefox doesn't support WebKit Well that's one way of putting it. 
u okay bud?
crosspost, /r/node might care, we have browsers to keep up with here.
Yeah but sometimes it make sense, with a friend, we have the #333 gray, and the (42, 42, 42) grey. Two shades of grey, we often use and remember this way... I wouldn't remember the (51,51,51) grey and the #2A2A2A grey...
You could also save this as a bookmarklet. You just open up the page with your list of matches and click the bookmarklet. Bada-bing, bada-boom.
Reading a regular expression pattern is like reading alien language from out of space, lol
\o/
How did you and Famo.us get along?
&gt; Firefox doesn't support WebKit. Uh...?
Great minds think a like? 
That doesn't exactly follow. You seem mad.
We're great friends.
Looks cool - it fired up, but I'm getting 'SSL connection error' when going to https://localhost:8080/...
That is an incredible example. I'm digging into their code to see what's going on. It's a resource hog on my machine for sure. My rMBP spun up hot in under 2 minutes.
The major problem with what you were doing is that the script was loaded on demand (potentially multiple times) in response to a key event. This is most likely going to result in a problem where you expect to have the result of calculations ran via the methods the script provides, but you won't because it's still loading asynchronously. That very well could have been the problem. For your use case, the solution is easy. You should simply throw something like this into the HTML file (before you try to use it): &lt;script src="https://rawgit.com/bgrins/javascript-astar/master/astar.js"&gt;&lt;/script&gt; That way, the script is available immediately. Furthermore, it's more reliable to include your dependencies in your project itself so they don't change on you/become unavailable. I'd suggest downloading the file and throwing it in your project's directory (don't copy paste it into another file, keep it separate). It's also more polite, for bandwidth purposes, unless you're linking to a CDN (which has benefits of its own, including cross-caching and colocation). If you're thinking that this all sounds pretty ridiculous and that there must be a more elegant way, you should look into using modules. [Browserify](http://browserify.org) is a great solution for this, allowing you to "import" dependencies using `require()` statements in your source code, with the compiled code effectively including the dependencies inline (with a single JavaScript file called a "bundle"). Once caveat is that the code you use needs to be written to support usage as a module, but it's easy enough [to shim dependencies](https://github.com/thlorenz/browserify-shim) to work with Browserify.
They also took a LOT of inspiration from slack and slack already has really good github integration. 
http://www.youtube.com/watch?v=VUClQJReXSA Related.
I let our CTO, who designed the SSL portion know. He'll reply to this comment soon.
&gt; deadline today # &gt; should take 5 mins to move over 
What? How? Why? Is Firefox now the new IE? Like.. fukkit? Web standards anyone?
Broken in Firefox.
Yup, Chrome and Safari are best for this app since they use WebKit.
When they bailed on h264 a few years back they became the new IE ;) Though admittedly this was recently fixed.
How does h264 relate to this cube shuffle thing?
Good find. In our testing of SSL features the "siteRoot" property in the default configuration got set to 'https://localhost' instead of what it should be 'http://localhost'. This has been fixed and is now available on master. In addition I have added documentation for each of the properties that are available for override in the include/config.js file. Sorry, for the inconvenience. Let us know if you have any other issues.
Does NPM really need another lightweight HTTP framework...?
Yeah, I use jQuery basically whenever I'm not using something like Angular that has it's own consistent API thing... Maybe I should check out Dart, haven't heart much recently but everything I *have* heard has been good. I do like the "if it looks like a list/collection/array, it is one" way of thinking.
Oh interesting, I didn't really take into consideration that the people who write DOM stuff is totally probably not the people who write ECMAscript stuff. That makes sense. And probably much better long term than them introducing some layer that makes things act like arrays which itself would get outdated. 
To my knowledge, it isn't Famo.us' fault, soooo...
[Well, go on then...](https://www.youtube.com/watch?v=xhy7dXWjpAA)
Someone should make a bugzilla ticket for that. It would fix a lot of their problems.
If its easy, then prove it and make the bot. All the time you've spent in this discussion, could've been spent to make the bot, if it really was as easy as you claim. 
Ok put this in-between the body: &lt;form&gt; &lt;input type = "text" onKeyUp = "output(this.value)"&gt; &lt;/form&gt; And this in-between your head: &lt;script&gt; function output(value){ if(value == "yes"){ var yourText = "Some text"; var newElement = document.createElement('p'); var textNode = document.createTextNode(yourText); newElement.appendChild(textNode); document.body.appendChild(newElement); } } &lt;/script&gt;
Are you comparing it to just a single string? Are you trying to save any data (like going back to a server to save to a database)? If it's just a string compare and nothing is leaving the page it is pretty simple, I can help you out
I'll have to give this a try with the crazy line charts on my current project. Usually have 150+ lines with 30-50 points each.
Did you see this one on S/O? http://stackoverflow.com/a/12135116 Looks like he handles the file (get_file() part) a little bit differently (albeit more verbose). Might be a clue in there for you. Hope it helps!
Perhaps they could go out for some tasty pasta...some copy pasta *I'll^see^myself^out*
Okay so ... this is really weird. I've been slowly hacking on a side project for the a while that's a very similar idea, but approached from a different angle. &gt; **`Warning: discussion of a really-early, not-yet-dogfood-able project.`** The project is called [Gimli](http://github.com/legitco/gimli) and the name comes from "GitHub Issue Messenger". A lot of teams use GitHub Issues as a discussion platform, but issues are designed for issues, not for conversations. A lot of teams use IRC, but IRC doesn't have out of the box GitHub integration; even if you add it that's just for your client, not the whole site. And beyond that there's no conversation history (unless you add it). The vision for Gimli is we want to take a feature that people already use and make it more suitable for how they want to use it. Also, Gimli is an extension to GitHub Issues. If you can't use the Gimli service for any reason no worries, it's all just GH Issues under the hood. When you do use Gimli, though, you'll get other niceties like a chat interface, unread message tracking, image uploads, private conversations, etc. At least that's where we're headed. http://github.com/legitco/gimli &amp;nbsp; Of course these folks actually have a product whereas my friends and I have lashed together tech demo ;)
JavaScript cannot store the value of isLogin itself, it has no context of previous screens unless you tell it via a server side language or something like the localstorage API.
Yes. Thank you for your response. I did some searching and found sessionStorage worked fine for my purpose. After some fiddling I got it working. Thank you again.
OH MY GOD THIS. I swear I read like 4 paragraphs before suspecting a thing.
Sounds like a terrible idea if the chart is supposed to help humans make sense of data. TMI.
I don't think that this is the problem, but change line 62 to this to avoid reading the file twice. res.write(content.toString('utf-8')); 
You need to unbind the event handlers somewhere within your code. I believe jQuery has an 'off' method? Use that, somewhere.. Also, $(document).on('click', 'element', cb()) is a nice trick for listening to all click events and it will rebind the new elements and will probably work for your case. But I highly, highly, highly recommend you look into using backbone or ember or react or angular for this level of logic. 
I'm desperate for a response and couldn't get the attention on stack alone. Thanks for the advice though, won't do it in future
You're seeing the asynchronous nature of Javascript. Your outside code runs first, because the inside bit is blocked on a network request. Load the script normally instead of using $.getScript.
You should really check out the NodeJS docs. They are a little dense and I feel like every time I read them I learn something new(I don't read it like a book but every time I do something in node, i reference it and understand something new each time even though I've read that line before in the past) I hope that fixing some of these issues might clear up your current issue. If it doesn't fix your issue, PM me and I'll help you out of skype or join.me. https://gist.github.com/anonymous/696adb74bba76e337244 [fs.exits](http://nodejs.org/api/fs.html#fs_fs_exists_path_callback) It sounds like path.exists is used anymore. At any rate, I'll tackle some of the problems in your code. 
Yes, please.
Meteor really gave me that extra bit of inspiration to enjoy the programming craft again. You already are very used to javascript, check it out - it should be a quick thing to pick up. I'm sure you'll like it. :)
Agreed. It's possible. And it's happening. The key is modularity. The new frameworks must be built entirely from modules hosted on npm. Express just got rid of all their middleware. Browserify makes this possible on the client, right now. Instead of backbone I'm using a small routing library, an object that emits changes, some functional addons here or there, server side rendering react, dynamically, so that I don't have to rely on client side JS for the page to load, things like that. But it's not MVC. My views contain controller logic which update models which update the views. The era of MVC business logic is over. Frameworks should literally be 'frameworks' - a library of libraries where any component can easily be switched, removed, or used as needed.
Is that on OSX or Windows? Works for me on OSX.
Wow, this is pretty cool. Could you go a little bit into detail how you made it (technologies, problems etc)?
I use a micro lib called scriptjs. It's probably similar to the polyfill from the other post but I find it easier to load libraries than copy paste code, plus it's tested
It would be hard to support IE8 because of things we used such as CSS3 feature opacity or rgba colors. 
There are several points of confusion I'm feeling about this article. 1) None of the popular frameworks are MVC. So far as I can tell, MVC as a term has been carried over from server-side web frameworks and over-applied to Javascript architectures simply out of habit. This isn't pedantry, or at least, it's not intended to be: MVC is a meaningful concept. But the author repeatedly refers to SPA frameworks as MVCs, as in "the biggest benefits of MVCs were structure, simplicity, and data binding." **Data-binding is an implementation detail of a View** that has **nothing to do** with how MVCs organize code. This terribly imprecise vocabulary indicates to me a disconnect with framework-driven Javascript development. 2) That disconnect is born out in the arguments for progressive enhancement. The author doesn't seem to understand why we're building single page applications. &gt;Performant - unobtrusive JS can be loaded asynchronously Your Javascript app should load all of its code when the page is hit, before true execution begins. &gt; Resilient - protects against JS errors (internal or third-party) and network issues (failed requests) Like any application, you'll need to handle errors. The alternative to handling them in javascript is to handle them on the server; you'll be handling them somewhere, and if you've decided to build a single-page application, you've already decided against this form of "progressive enhancement." &gt; Ubiquitous - progressive enhancement allows for a more inclusive app What does this even mean? Web applications are already ubiquitous. That's why SPAs are exciting! You can download a full Javascript application to any device! 
Meaning #2: https://www.wordnik.com/words/vet
It's a userscript so using &lt;script&gt; in the html-head is not possible. I'll try lazydukes method I guess. Thanks for helping!
It would be really helpful if you could try this line in console, and share the results: 'window.WebGLRenderingContext'. The whole thing works fine on OSX 10.9.2 on Chrome 35.0.1916.153.
Can you expand upon why it doesn't work in Firefox? Is it [the issue listed in the Pitfalls documentation](http://famo.us/guides/pitfalls)? (Also, to nitpick, Chrome doesn't use Webkit now. They forked it and use Blink now, which is diverging away from Webkit pretty rapidly.)
Had to learn a lot about Mongo and handlebars (never used a templating library before) but it's been fun, I set this project down a month or two ago because work got busy and I'm getting married in a week, might pick it up again soon 
Personally I found it helpful to start with 2D graphics first, so I’ve played with the HTML5 Canvas a lot. It’s in fact probably the easiest thing to start with. At some point, I wanted to do some 3D. Best way to go is to learn how to use OpenGL, or it’s browser implementation WebGL (OpenGL ES2). That can be pretty difficult at first, but reading some these will help: https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#graphics-programming Being impatient, I skipped that and used the library Three.js, which is a library that puts a thick layer between the WebGL API and you. Paul Lewis (Aerotwist) made a few tutorials about it. Some of the code is a little outdated, but it will help you understand the basics. Getting started: http://aerotwist.com/tutorials/getting-started-with-three-js/ If you want to stick with 2D, Pixi.js is a 2D library for WebGL. If you have experience with ActionScript 3, this library will feel familiar pretty fast. Eventually you will want to look into GLSL. With GLSL, you can create shaders that are executed on your GPU, allowing you to do some crazy shit, as demonstrated on https://www.shadertoy.com/
just smiled a bit, because our customers just don't want to be cool, so in my projects i have to support IE8 too :-( anyways, i voted for your project. good luck!
Actually, I never seen a HTTP framework based on conventions (except Sails maybe). That's why I created Smart, light and very simple to use. I think it's a good starting point :)
&gt; script kiddie &gt; n. (Hacker Lingo) One who relies on premade exploit programs and files ("scripts") to conduct his hacking, and refuses to bother to learn how they work. &gt; In hacker culture a script kiddie or skiddie,[1] (also known as skid, script bunny,[2] script kitty),[3] is an unskilled individual who uses scripts or programs developed by others to attack computer systems and networks, and deface websites. It is generally assumed that script kiddies are juveniles who lack the ability to write sophisticated hacking programs or exploits on their own If all you do is use pre-made APIs to write bots, you are a script kiddie. And a bad one at that, because you won't even use those pre-made APIs to write a bot that you claimed is simple. The burden of proof remains on you to prove your words.
This is amazing! Would it matter that you cant hide your code? Because this has real world application.
You're using `__dirname` without actually referencing it to anything. So your `local_path` variable gets assigned undefined at some point. Also, setting multiple headers isn't the best way to serve files. When headers are set and sent to clients, you can't really change them. I might be wrong but make sure you double check that! Also, your `path` variable is an object and not a string. So when you serve files, it returns `localhost:8000/index.html[object][Object]` which isn't a valid path. The biggest point is, you should check-out how you serve files. When you make a HTTP request, usually, the page waits for all the info before parsing the page. However, your server handles each request differently and not as one big request. So when someone requests a HTML page, you have to prepare the entire response and not send it in chunks. Especially when you have `res.end()` somewhere in your file serving conditionals. This means when the first file is served, the entire response is ended. Remember, your browser need all the files together before serving the page. EDIT: I've fixed your code to display properly, it's still not efficient however! [Here's your file!](https://gist.github.com/kdamball/f9fb64ee473aaa0f4329). My main concern is that you're serving js files 4 times. First when you request it, second when you call css, third when you call html &amp; finally when you've parsed everything together. In other words, try linking a simple JS file that logs something. You'll realize it's logging 4 times for every request.
So what you are saying is that OKCupid essentially cockblocks me? Or should I say cockthrottles? No that doesn't seem right...
Great, thanks :)
We are happy that you like it. &gt; Would it matter that you cant hide your code? I'm sorry, but I don't get the question. Can you explain further.
I haven't played with the async stack feature of chrome but I had thought it would help in instances like this. Perhaps not?
You bring up a lot of really good points. I hope we can talk about them. &gt; None of the popular frameworks are MVC. &gt; But the author repeatedly refers to SPA frameworks as MVCs &gt; This terribly imprecise vocabulary indicates to me a disconnect with framework-driven Javascript development. I think it's fair to say that colloquially we can refer to certain SPA applications as interpretations of MVC. For example, Angular's tagline is "Superheroic JavaScript MVW Framework" - MVW can be said to be derived from MVC. Alternatively, Backbone outright adheres to the goal of structuring your code into a MVC. I certainly don't know everything; and you might be right in saying that there's a bit of confusion here. Can you explain how the vocabulary could be improved to be more accurate? &gt; if you've decided to build a single-page application, you've already decided against this form of "progressive enhancement." Correct. This is why SPA won't work for me. My goal is to gain some of the key benefits of SPA without doing away with progressive enhancement. 
It still allows people to make sense of the data... I think...at least a vague sense. Go to www.cfiresim.com and hit the big green "Run Simulation" button. The chart is on the output page and shows every 30-yr slice in time from 1871 to present, and how your portfolio would have played out. It's very interesting how the same portfolio and other inputs would fare very differently if started on different years.
&gt; Instead of backbone I'm using a small routing library, an object that emits changes, some functional addons here or there, server side rendering react, dynamically, so that I don't have to rely on client side JS for the page to load, things like that. This is pretty cool. Do you see something like this being possible for devs not using JS serverside? 
I believe that's so you can always have a finally and let exceptions float up the call stack without rethrowing them.
This is true. However the structure of how it is done and the idea of the product makes it worth it in my opinion. Gitlab as an example is open source but there is also the hosted version with which they make money. I think everything can be copied and stolen but people don't want to set things up on their own and prefer to pay people for those things.
Mozilla Developer Network is a superior resource to MSDN for learning JavaScript. On MDN's [try... catch page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch), it is clearly shown that the catch and finally clauses are mutually optional, meaning that one *must* use one in the absence of the other: &gt; The try statement consists of a try block, which contains one or more statements, and at least one catch clause or a finally clause, or both. That is, there are three forms of the try statement: - try...catch - try...finally - try...catch...finally The page goes on to give an example of why one might use a finally block without a catch block: to ensure resources like file descriptors and the like are released regardless of the success of the statements in the try block. 
While this is true, I'm also looking for people with enough curiosity and drive to read up on JS. **at least before a fucking interview** We've just been through a stack of guys who think Javascript is using jQuery plugin on a page.
But version 1.1 fixed a few bugs...
Well, great job none the less. This is great.
Yes, a few static screenshots.
&gt; This is pretty cool. Do you see something like this being possible for devs not using JS serverside? Yes and no. You don't need to use a nodejs server for production, but you'll need to use it for the build system during development. I use gulp + browserify (grunt would work too), which watches and builds all my files as I develop. When I make changes, all my JS files are concatenated into a single bundle, my react templates are pre-rendered into the html and saved as index.html, and my scss is converted into css. My &lt;script&gt; tag is located below the html so it won't slow down the page-load. React uses some sort of id mechanism to know that the correct html has already been pre-rendered on the page, so there are no changes to the DOM. I also use [script.js](https://github.com/ded/script.js/) if I'm using any 3rd party CDN's like stripe or want to split up my bundle (react is a large library so I usually bundle it separately). I believe there is server-side rendering for React in PHP and maybe a few other languages? It doesn't matter as long as the original html is pre-built, any server will work. However, to build client-side JS apps this way, you'll have to know how to node during dev.
There is a static image in the project's repo https://github.com/krasimir/deb.js Edit: here is the url of the image: http://work.krasimirtsonev.com/git/debjs/debjs.jpg
Krasimir, I am sure that you put a lot of effort into developing this library. If you want people to consider using it, it might be better to not force them to go through the extra effort of digging through the Git repository just to find a screenshot and get a better sense of what the library can do for them. Just trying to be helpful.
Well, there were three basic parts to the game. 1. Rotation of the cube Since there isn’t currently a camera for Famo.us, we had to rotate the cube (instead of the player’s view of the cube). We encountered some fun gimbal lock issues, which ended up being one of bigger accomplishments for game logic. 2. Game Logic Creating a data structure to track all of the cubes, potential user move moves, as well as the conversion from 3D to 2D was a fun problem to solve. Additionally, we spent a large amount of time covering corner cases for the game so it has consistent gameplay (for instance, if there are overlapping cubes, or if a blue cube isn’t visible). One thing that worked in our favor was that I had reached out to Daniel Lutz, the creator of Monospace, beforehand and he gave me the go ahead to recreate his game. Any specific problem, we could go back and take a peak :D. 3. Animations Joe and I found that it was pretty hard to explain the game without playing it, so we thought a demo would be a good idea. We had to trick the game into playing itself, but I think it adds a pretty cool effect to the introduction. I’m excited to see more animations like this in the browser, it could be a welcomed improvement to our current interaction with websites. We made this using the [Famo.us](www.famo.us) framework. Feel free to check out the [repo](https://github.com/Famospace/Famo.us-Monospace), too.
&gt; This isn't pedantry, or at least, it's not intended to be It certainly seems that way. Most developers don't even know the difference between MVC, MVVM, etc, etc. Maybe the OP should have just said MVx to make you happy. &gt;2) That disconnect is born out in the arguments for progressive enhancement. The author doesn't seem to understand why we're building single page applications. You can have progressive enhancement and a single page app. Say if a user gets a link to a page, they click it and the server renders content specific to the URL, the same as it would for a spider. The javascript gets loaded and the 'app' initializes, then the 'app' can then deliver other content based on user actions without reloading the page. The page gets progressively enhanced, it gets MVx, while still responding as a static page initially. The best of both worlds. Having to jump through hoops like rendering every page on the site using phantomjs so that spiders can crawl your site just so you can use the latest buzzword framework is backwards and should be seen as a bad practice.
I thought it would be good to share this article with fellow JavaScript redditors. 
How many callbacks did it take?
You'll have a good story if you get married. "How did you meet?" "I spammed the shit out of like 20,000 women. She was the only one who replied." 
This was really helpful. I think you should post it also on [r/java](http://www.reddit.com/r/java)
Favorite quote from that article: &gt; Third, the JVM features native threads. This means multiple JVM threads can be executing in the same JavaScript context concurrently. If v8 supported threads in this manner, nobody would be talking about event loops, starving them, asynchronous programming, nested callbacks, etc. Threads trivially allow your application to scale to use all the CPU cores in your system and to share data between the threads. Multiple JVM threads should never be executing in the same JavaScript context concurrently! That's not just my opinion, but also the opinion of the authors of Nashorn: [Nashorn Multithreading and MT-safety](https://blogs.oracle.com/nashorn/entry/nashorn_multi_threading_and_mt) For any runtime, a single-threaded solution that scales is much more attractive then dealing with performance and concurrency issues related to multiple threads and shared memory. Even on the JVM, the event loop and non-blocking I/O are gaining popularity. Threads have their place, but so does non-blocking I/O. Also, I found it very interesting that Nashorn was much slower than Rhino for some of the JavaScript tests. I thought Nashorn was supposed to be far superior than Rhino! Also note that Node.js/V8 put both Nashorn and Rhino to shame.
**This is a bad idea.** Node.js scales pretty sweet, it just does it without threads. It's a best-practice to start as much processes in Node.js as you would start threads. --- &gt; Many times, the Java implementation of some library will be superior This is simply not true anymore with the current state of npm. In addition, most of the available Node.js libraries will be more lean and support [FRP](http://en.wikipedia.org/wiki/Functional_reactive_programming) better than anything the Java community has to offer. This is less true for other stuff on the JVM though (think Scala/Clojure). --- &gt; the JVM itself has a considerable number of man hours of research and development applied to it So does V8, don't underestimate that. V8 has got JIT as well. And V8 is always the first EcmaScript implementation to support ES6 features. That's also important to a lot of people. --- &gt; the JVM features native threads Everything is Node.js is build for horizontal scaling, so to scale up, you'd just spawn another process, your Ops guy can do that alone. Since a Node.js app developer is forced very early in development to make it scale horizontally, it's easy when you need it. Threading is actually closer to vertical scaling, you'd need as much cores as possible. Yes this gives you shared state and memory, but that's not an advantage when eventually you need to scale. Because eventually you're going to need to scale to another machine (or vm), and your app then requires modification. Threading is not just better, it's a different way of solving stuff. But if you've got a heavy I/O bound application threading will lose to a non-blocking event-loop.
I don't think you needed to create a new framework to accomplish what you did. It seems that you could have just as easily created a utility module that built middleware that could then be mounted to a vanilla Express app. var express = require('express'); var app = express(); // Create a smart instance attached to an existing Express app: var smart = require('smart').create(app, { baseDir: __dirname }); // Use smart to register additional route handlers with the Ember.js conventions: smart.get('/hello'); smart.get('/posts/new'); Express already has a well understood router and I don't see any benefits to the router offered by Smart.js. The world needs less frameworks and more modules.
I've dabbled in rhino and v8, was initially intrigued, still prefer straight java on the server unless C is needed as an optimization. Done some python also to leverage various imaging libraries (and php because it is ubiquitous and dirt cheap secure hosting). So much tooling and structure and performance options available for these server side languages that I couldn't justify throwing it all away on the server side (even php has a very good debugger/ide in xdebug/php-eclipse). But compile time/typechecking errors are a good thing when you can get them (as compared to code reviews or having clients find runtime errors), and have faster server code as a result. Even when I was in a situation where the client and server used the same language (swing/tomcat) there roles were so different that there were few opportunities to share a meaningful amount of code between 'em (and the language is fairly robust to begin with). Serialization via json is trivial in any language, and having to think about a solid interface contract between client and server is golden when working in parallel or isolating issues or writing test cases (or to avoid most of the pitfalls of dynamic languages on a machine running without someone at the console) If you already have a jvm on the server, java (javascripts namesake, lol) is a sound choice. I've considered rhino for more robust client code testing/modularization though, but as with v8, you start getting into a race condition with what the various browsers are implementing, will-be implementing when you leverage it on the client, though I have found the java Robot class very useful for automating gui testing on any browser, including checking for runtime errors. Plus you have threading (and async optimizations) at your disposal if you don't lean on a language that is scared of threads. In fact most java application servers will give you threads by default, and you can decouple your local i/o in your request thread as you see fit (i.e. event queue, oldest trick in the book). Threading is just another optimization tool, as is shared memory, it isn't something to be avoided like the plague, though it does need to be understood. I've seen framework fanaticism go off the rails in j2ee as well, where a simple thread would have fixed it, the fear of threads had the "authorities" mandating a message driven bean, for like 5 lines of actual code... "threads" are not just an OPS concern. My concern is similar for JS beyond browsers, there is a level of fanaticism involved, or naivete about the level of maturity on the server side. If you are doing lots of parallel calculations then threads are your friend. If everyone is waiting on the database, then you need a better database. tl;dr; what is the case for server side js if you already have a jvm? java still outperforms any js engine in crunching data in many regards, and the tooling is outstanding (ide/profiling/debugging), and asynch i/o is available to any language, threads or not. http://benchmarksgame.alioth.debian.org/u64/javascript.php
Perhaps some history may help. Try/Catch/Finally are flow control statements that allow you to say, break out of a function execution and roll up the call stack to another point. Most of the time (e.g., 99% of the time) they're used for handling errors that are VERY unexpected, but I have seen used for normal flow control of a program (not sure if this is a good idea or not). There are situations where you may not care about handling the "thrown value" but executing a piece of code in the event of a "throw", if you use just finally without a catch the finally will execute no matter what, but the "throw" continues to bubble up the call stack after finally executes. Put it another way, maybe you just want to know if any exception was thrown and close a file handle, but don't want to interrupt it bubbling up the stack because something up the stack (perhaps a UI element or control object) will be responsible for catching and dealing with the control flow change. The only use of this I can remember is it being used in a DOM event model representation for canceling the propagation of an event. I can say most programmers will raise an eyebrow if you try and use it for anything outside of error catching. 
Horizonal scaling is amazingly easy in node. We have an app that uses a few heavy processes and it got slow. It took one afternoon to make it scale horizontally by using a pool of workers machines and then on each as much worker processes as there are cores and have them consume a simple job queue. Was one of those "&lt;evil laughter&gt; infinite power!" moments when we realised we parallelized 64x with just a little glue code.
The reason is that new Array(x) sets length of the array but does not create own properties for the indexes (aka it leaves holes). You can test this by checking b.hasOwnProperty(0) before and after setting b[0] to something.
`new Array(1)` creates an array with length 1, but it has no indices and no values, so there is nothing to iterate over. `[undefined]` also creates an array with length 1, but it has one index (0) and one value (undefined). Arrays are not necessarily contiguous -- they can have missing (or "elided" as they're called) indices. For example: var foo = ['foo', 'bar', 'baz']; delete foo[1]; for(var i in a) console.log(i); This prints 0 and 2. The 1 index does not exist, and it is not iterated over, even though `foo.length` equals 3. There is a hole in the array at index 1. Creating an array by passing an integer to the constructor creates an array with no indices (that is all holes) but the specified length. If you try to access an index that does not exist, you get `undefined`, the same as any property access of a property that doesn't exist. That may be where you're confused, because both `a[0]` and `b[0]` will evaluate to `undefined`. But in the first case the property 0 is found and there is a value stored there, and in the second case there is no such property 0, so `undefined` is the default case for a nonexistent property. (Indices are properties, as arrays are objects. Sorry for the inconsistent terminology.) 
Spiders run Javascript now when indexing sites. 
I totally agree with what you've said. Sadly, however, I feel there's a community of developers (I'd call them front end developers, but they're not anymore) who just don't want to hear about anything not done in JavaScript. It doesn't matter how many wheels they have to reinvent, so long as it's JS. Actually, maybe I'll write a Spring MVC port for node and call my project Wheel.js
Don't remove line 62 entirely. Just try to remove the path variable first. Let me know how it looks.
&gt;I think it's fair to say that colloquially we can refer to certain SPA applications as interpretations of MVC. Certainly, yes. &gt;Alternatively, Backbone outright adheres to the goal of structuring your code into a MVC. Absolutely not. [See this part of their docs.](http://backbonejs.org/#FAQ-mvc) It's ambiguous at best. The main problem I had is calling them MVCs as a group, when their MVC-ishness is so far away from what makes them a category. [This article](http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/) talks about them as frameworks for "rich Javascript applications." If you were to say SPA framework instead of MVC framework, I think you'd be more precise. But if you do that, you get "If we hope to preserve the ubiquitous nature of the web, we need find a way to make SPAs unobtrusive." SPAs are, by design, not unobtrusive. &gt;My goal is to gain some of the key benefits of SPA without doing away with progressive enhancement. These are pretty incompatible goals. 
Then why are so many sites using Phantomjs to render their angularjs apps for spiders? 
"elided" is a nice term. An array with holes is also called a 'sparse' array (contrasting to a dense or contiguous array without holes). Sparse arrays are a little evil and handling them is what sometimes makes native Array.prototype methods slower then home-rolled ones that assume dense (there was a fast module here a week ago that got much of it's gains from that assumption).
&gt;These are pretty incompatible goals. I don't agree. We could certainly progressively enhance a webpage to function as a SPA when the context is appropriate. I think the key to getting closer to this lies in shared views between the client and server and allowing the state of the application to be maintained server-side. &gt; This article talks about them as frameworks for "rich Javascript applications." This is a pretty sweet article, thanks for sharing. &gt;If you were to say SPA framework instead of MVC framework, I think you'd be more precise. I can see how talking about an MVC, and it's many interpretations, can be a bit confusing. I'll be making some edits to clarify my intended message. Thanks for the feedback here (: 
Thanks for the conversation :)
`delete foo[1];` &lt;--- **NO! NEVER DO THIS! NOT EVEN ONCE!** `for(var i in a) console.log(i);` &lt;-- **ALSO VERY BAD!!!** What in the great green flying fuck is wrong with you people? Use: for (var i = 0; i &lt; foo.length; i++) { console.log(i); } Jesus christ. 
Awesome - thank you!
Lol, the other arena where I see such devotion to a single language is in AVR microcontrollers. I mean when you need cycle level specific timing (i.e. for i/o waveforms) and absolute minimum size, assembly is the only sane way to do it. But there are numerous cases where C is coerced into doing the same thing, with large loss of resolution for a given cpu frequency, and now you have compiler version dependencies, and most of them say changing compiler flags can screw up the functionality. C is seen as a panacea, but I think they are slowly coming around, and realizing (like client/server) that integration of the two languages is pretty trivial and makes a lot of sense in many cases. But at the same time they are inventing ways to tell the compiler "don't optimize this bit of code please" which is just a band-aid for reverse-engineered timing code in this case.
@ryosen: I totally agree with you. I just though that the images in the article will be enough. (My bad that I didn't add the image directly - http://work.krasimirtsonev.com/git/debjs/debjs.jpg)
It was an example to show an array with an elided element. That is the topic of the post. If the poster had used a for loop, they never would have noticed a difference and never asked the question. The question is only relevant in the light of an array with elided elements and the for-in loop. 
How can they write cycle timed code reliably without assembler in the first place? Doing that stuff even with macros would be asking for trouble, surely?
Well, nothing will solve the issue of JS being JS, with all its design flaws. I get the idea behind the push for server side JS, the language is very popular after all. But still.
It's crazy, they keep fudging it while looking at the resulting waveform and generated assembly I guess (instead of looking at the instruction set manual and cycle timings to begin with).
This is actualy a very good idea, I created Smart for a school project where it was forbidden to use frameworks like Express. I really like Express but I always found it too messy if you don't separate by yourself your code. Thanks for your feedback, I think I will give a look for an Express middleware :)
&gt; OP didn't ask about arrays with deleted indices. Yes they did. What do you think `new Array(1)` is if it's not an array with all indexes elided? 
needs more upvotes. cool demo man
There is a trivial amount of coding difference required between threading a new runnable object and sticking a runnable object in an event queue. It can be offloaded to the queue as soon as it is created, and java is just fine at opening a socket and doing exactly that and non-blocking i/o has been around since java 1.4 (NIO) 12 years ago (not "for once")! On the converse, I would say %99.99 of node (or server) coders ain't gonna need it. We have these visions of ourselves writing the most popular websites in the world, and prematurely optimize just in case, but really that stuff should be decided on actual load and observation and usage predictions and is in dire need of a reality check.
I know there are some Ember.js people here. From everything I've seen, this is the framework for me. I like how structured it is. Coming from Rails, I'm hoping its an easy transition. However, this problem has me pulling out my hair. It doesn't seem like tremendous amount people stackoverflow use Ember.js
#First thing: **NEVER USE A FOR-IN LOOP. EVER** What you want to do is this. var a = new Array(1); for (var i = 0, ii = a.length; i &lt; ii; i++) { console.log("value @ index ", i, "is", a[i]); } for-in loops were used for iterating over objects in 1999. ******** #Second Thing: The reason you're not seeing anything printed is because you've created an empty array. Javascript does not initialize the array with values at each index (or key), so when you do: var a = new Array(99); What you get back is an array with length 99 and no indices or values. This is why for-in does not print anything, there are no keys to iterate over (no not even "0"). for-in will iterate over basically all keys that have been added at runtime on the object itself, or anything in its prototype chain (in modern engines). What this means is that if I'm an asshat who wants to mess with native prototypes and I set `Array.prototype.coolFunction`to some function or polyfill I wrote, then what you get when you're iterating with your for-in loop is; Array.prototype.coolFunction = function () {}; var a = []; for (var key in a) console.log("value @", key, "is", a); &gt; value @ coolFunction is "function () {}" Using a simple for loop, you will not have this problem. You'll be explicitly checking numerical indices, each of which will return undefined. Because when you ask an object in javascript for a property that has not been defined, it very correctly returns `undefined` 
&gt;threading a new runnable object and sticking a runnable object in an event queue. Now you're queueing your blocking IO. How is that solving the problem of blocking IO in the first place? You also haven't solved the problem of eating up a thread until the response has been fed to the client (e.g., at the end of "doGet" or "doPost"). &gt;and non-blocking i/o has been around since java 1.4 (NIO) 12 years ago (not "for once")! NIO doesn't affect JDBC, nor most other DB drivers, so good luck with that. &gt;On the converse, I would say %99.99 of node (or server) coders ain't gonna need it Everyone says that until they need it. It may be alright to write spaghetti code that "works" when your userbase is a dozen or so, but if you're employed to build this stuff for customers (internal or external), I should hope that you're doing what you can to make sure it scales. Or at least, your dev lead ought to hope that you are. You "don't need" RESTful SOA's, or automated testing, or even a webserver. But you might as well try to write solid systems the first go-round, it doesn't take much longer than writing something haphazardly, and anyone who needs to maintain it or consume it will be much happier that you actually did your job, instead of claiming that they "didn't need" good software.
and array with the length property set to 1. there are no indexes.
Yes, and that's indistinguishable from / equivalent to: var foo = [1]; delete foo[0]; 
read and fixed. Thank you!
That is such a good looking website. Although it was weird how the header took a little too long to load at some points. 
[thinkster.io - A better way to learn Angular JS](http://www.thinkster.io/angularjs/GtaQ0oMGIl/a-better-way-to-learn-angularjs) incorporates egghead.io as well as organizing the Angular docs and a few other sources in a very logical manner
Oooh, interesting! Never seen this before, thanks for the link!
Side note, this code looks vulnerable, though I can't tell the impact from the small sample given. But, it's usually not a good practice to pass user input directly to filesystem methods. For instance, let's say you have the following directory structure: app/ src/ server.js // your server code config/ config.js // your DB credentials, etc. If someone makes a request for `//..//config//config.js`, then your script will happily give it to them. There's a lot of ways to address the issue, but the simplest might be something like this before the `path.exists(...)` call: if (req.url.indexOf('..') !== -1) { res.send('Error' , 500); } This way, any attempt to break out of the `__dirname` folder should be prevented. More info: [OWASP: Path_Traversal](https://www.owasp.org/index.php/Path_Traversal)
`#forEach` and `#map`.
&gt; *Every seeder begins as a lurker* It's not just true for web communities, but also for real life. 
&gt; Many times, the Java implementation of some library will be superior... Actually, this *is* true. For many purposes there are some pretty good javascript libraries; but I think it is fair to say that there are some really good java libraries out there for complex tasks that the node ecosystem isn't particularly good at. ...but just off the top of my head: - jsoup for xml parsing - opennlp for natural language processing - jdbc for any database actions (the state of db access in node isn't terrible, but jdbc is flat out better than any existing solution) - lucene for full text searching of large data clusters - apache activemq (better than amqp, because: http://stackoverflow.com/questions/19173797/nodejs-connection-with-activemq) I totally agree with the rest of the stuff you said though. Just saying; the Java ecosystem is all grown up. There are *definitely* some things it's better at, and I can see how some people might want to tap into that. 
Google literally just started supporting this feature and IDK if any other crawlers do. Better to DIY and be able to fix any issues than deal with errors with the Google bots crawling your page.
wtf is "prezi" never heard of it (also, why should I care?)
Web-based slideshow application. It's the only other thing I've ever seen anyone use for presentations besides PowerPoint, and it does a lot of things PP doesn't.
I think you are comparing apples and oranges here. There are existing java frameworks, i.e. netty or vert.x derivitives that (depending on the benchmark of course) will blow node out of the water. http://www.cubrid.org/blog/dev-platform/inside-vertx-comparison-with-nodejs/ You skip the servlet cruft and go back to square one (like node) on the networking i/o layer, and java still outperforms javascript... 
 var foo = [1]; delete foo[0]; foo.push(2); &gt;2 //Incorrect Length foo; &gt;[undefined × 1, 2] //Undefined 0 Index because you deleted it that's very distinguishable.
Sure, and now do the same thing with `new Array(1)`: var foo = [1]; &gt; undefined delete foo[0]; &gt; true foo.push(2); &gt; 2 foo &gt; [undefined × 1, 2] var foo = new Array(1); &gt; undefined foo.push(2) &gt; 2 foo &gt; [undefined × 1, 2] It's the same output. Again, they are indistinguishable. 
Agreed on this point. Lucene Drools Activiti Esper All come to mind with no good solution now or on the horizon in node. 
I understand, that's why I tried to be as neutral as possible and not get preachy. Since you're learning (and nobody else had brought it up), I thought it'd be good to at least mention it -- who knows, maybe you finish it in a few days and want to show it off?
Just discovered map the other day. God it's handy
I bet it would be pretty trivial to hook up mustache templates to work with React, that would allow for shared views between the client and server. I'm going to try this. Thanks for the tip.
&gt; And V8 is always the first EcmaScript implementation to support ES6 features FWIW Spidermonkey appears to possess more es6 support than v8 atm. Currently, innovative strides in Chrome centre more around proposed es7 features (eg. Object.observe) than support for es6 features (many of which are admittedly still in flux). 
One is the correct behavior, the other isn't. First example, you've deleted an index and push now incorrectly adds an element at index 1 instead of index 0 thus returning that it has length 2. Second example, you've defined length 1 and pushed an element into index 1, thus it returns the correct length 2. We can go in circles all day. The point I'm trying to make is that the delete operator isn't meant for use with arrays, and leads to unpredictable behavior. This is why Arrray.prototype.from is being added to the spec as an alternative to new Array() which was designed incorrectly to begin with. OP clearly isn't a javascript whiz, so providing an example wherein you do something that no one should ever do in any situation isn't the greatest idea and probably not all that clear. If he's not aware that for-in is used for enumeration and not iteration, he's probably not fully aware how the delete operator works.
Since the inception of Rhino, JS is the defacto scripting language on the JVM. Excepting lua, JavaScript is one of the most pervasive scripting languages in many domains (even Qt uses a superset IIRC). As for using JS as a language, it's not as if many of the fundamental flaws of the language are going to be left untouched (see upcoming unicode support, strict mode, etc.). There's still plenty of room for innovation on the server - just look at go, rust, etc. Server-side JavaScript isn't bound by some of the legacy cruft that more established alternatives are, and AFAICT both the community and tc39 do a far better job in pushing the language forward than, say, PHP. 
*stares off* What? Oh, sorry, I was picturing 'cockthrottling'.
Or use a library like [Zepto](http://zeptojs.com/) instead, depending on your needs.
&gt; if you want to know why SVG was not the best solution for us, feel free to invite someone from the team to come and talk at your conference or meetup I want to know, but I don't organize any conferences :[
so, vert.x (which uses rhino btw) you can have every performance advantage of node many times over (plus some things they haven't thought of) plus every advantage of java. You DO want to write good software after all, gotta make the maintainers and consumers happy... Javascript, an entire language slapped together haphazardly in a week, node haphazardly slapped on v8, I think you answered your own question.
So cool! I love this.
&gt; it returns the correct length 2 It is no more correct or incorrect than the first example. Write me a function that when passed an argument can differentiate between being passed one of the two above examples. You can't, because they are *EXACTLY THE SAME* as far as JavaScript is concerned. I used the `delete` example to create an object that has elided indices. It was an example for exposition, because `new Array(1)` is also an array with elided indices. They are they exactly the same thing. That is why I used it. I'm not advocating that it should be used. I used to to demonstrate the case that is the topic of this post: arrays with elided indices.
The author of the article seemed to have his head so far up his and his company's ass that he assumed that we were all intimately familiar with his software and didn't have to explain what it is. 
No one blocks a thread for every connection, not for a very long time. Asynchronous and multi threaded are different things. Frequently you want both. You make some good points but the fastest architectures for Web scale systems have used clever combinations of async operations, queues, threads, ring buffers, etc. for quite a long time now. 
You're getting a "Uncaught TypeError: Cannot call method 'appendChild' of null" error. If I had to guess, I'd say it's because the div with the id instafeed isn't created before your script is run. Try running your code at the end of the page, or putting it inside a function that runs through window.onload. Or document ready if you're using jquery. 
This doesn't really answer why you would pick Node over the JVM on the server. non-blocking-IO isn't new or unique to NodeJS, nor does NodeJS do it particularly well. 
Are you sure that your getTimezoneOffset function is working as intended? When I test the code just omitting that part and letting prayTimes detect the current timezone it works perfectly. navigator.geolocation.getCurrentPosition(function(pos){ lat = pos.coords.latitude; lon = pos.coords.longitude; alert(lat+" long: "+lon); var prayTimes = new PrayTimes(); var times = prayTimes.getTimes(new Date(), [lat, lon]); sunrise = times.sunrise.split(':'); sunset = times.sunset.split(':'); alert("sunrise: "+sunrise[0]+" hours, "+sunrise[1]+" minutes"); alert("sunset: "+sunset[0]+" hours, "+sunset[1]+" minutes"); }); As a side note, here is prayTimes manual: http://praytimes.org/wiki/Code_Manual, as you can see the timezone is supposed to be in hours, so what is the purpose of the division by 100?
I'm glad that you find it helpful. I'm working on Chrome extension that will give us the ability to inject deb.min.js to pages that we want to inspect. So we don't have to do manually.
Good stuff
Here's my first pass at it with Handlebars: https://github.com/petehunt/reactbars
`undefined` is not the same as `not defined`, which is the reason for your confusion. Basically your first array is an object: { 0 : undefined, length : 1 } Your 2nd array is: { length : 1 } `for-in` loops (ignoring the fact that you're using it on an array) on arrays ignore `length`, so your 2nd loop does nothing since there are no other keys.
Not web based, it's flash.
It's a stupid presentation tool, that allows you to make presentations that make the audience sea sick. 
Dude, the entire point of the linked article is that they've ported it to 100% JavaScript...
I know, i'm saying what is was...
You're right, I need to change the animation speed so it shows up faster?
The library is available as extension for Chrome http://bit.ly/1kdfuZa
 &gt; window.WebGLRenderingContext function WebGLRenderingContext() { [native code] }
I recommend removing it completely for mobile. It's hard to do view frame animation on mobiles, every one is different.
Just out of curiosity. If Prezi is fan of compile-to-js languages, how come that your team didn't try out Dart? It has really good developer tools, support from Google and not to mention Dart has a Flash like graphical package called [StageXL](http://www.stagexl.org/). Although Dart was less mature in 2013, but now a days Dart has become a really good weapon for web development.
This is an article I wrote. This is one of the first tutorial styles articles I've ever written, so please feel free to offer any criticism so I can take it into account in any others I write.
Thank you very much! I didn't know it could detect the time-zones! It is working great now!
Can you explain what you're trying to accomplish? Are you just looking for any type of mobile device and trying to do something one off or are you trying to do something specific based on the device that's returned? Since this requires jQuery, you will need to call this script after jQuery has been loaded so putting this script on the first line of layout.html won't work. Depending on when you spun up your BC instance (and how your site is themed) you will either have jQuery called in the head or just before the closing body. Can you share your BC store URL or are you blocking it until launch? 
It is != It was
FYI, reddit automatically marks your comment as spam if you use a URL shortener. I've unspammed this one but please just use the full URL next time :)
Yea, there is a difference between `[undefined]` and `new Array(1)`. var a = [undefined, undefined, undefined]; var b = new Array(3); var a2 = a.map(function(x) { return 5;}); var b2 = b.map(function(x) { return 5;}); console.log(a2); // 5, 5, 5 console.log(b2); // undefined, undefined, undefined console.log(a.length === b.length); // true console.log(a[0] === b[0]); // true console.log('0' in a); // true console.log('0' in b); // false console.log(Object.keys(a)); // ['0', '1', '2'] console.log(Object.keys(b)); // [] `new Array(n)` just sets the `length` to *n*. It doesn't create those keys, however.
&gt; 0 : undefined, The index keys are strings, not numbers. All keys are strings. &gt;&gt;&gt; typeof Object.keys([555])[0] "string"
What does this do exactly then? Does this not control a Spotify client on another computer?
Look for articles by Brendan Eich then. Edit: http://chimera.labs.oreilly.com/books/1234000001808/pr02.html
Don't believe me grunt watch
If you're going to be captious over an irrelevant detail in the context of explaining why the key doesn't exist at all, then I'm going to do the same: No, they're not, at least not in most modern JS engines. Since I'm using Object notation to describe what is actually an array, it's worth pointing out that array indices are internally stored as numbers, which is a big distinction, especially in sparse array implementations. They're only converted to Strings when exposed, e.g. through `Object.keys`, because EcmaScript says they have to be. But if you type `ary[123]`, that `123` is never converted to a string.
We've built something similar to Prezi as a single page Javascript app: [Choices &amp; Chances](http://choiceschances.com) If anyone tries it out, let me know what you think! It's tailored to building interactive stories similar to a slideshow but with many different paths and choices. Double click to add a scenario, shift-drag one scenario onto another to create a link (path) between them. Check out the 3D demo under File &gt; New &gt; Template &gt; 3D Demo! It's quite an ambitious project because I wanted the reading and editing modes to be unified. You can switch between these modes in real-time without re-compiling the story or anything.
I have to say well done. I hate when incompetent people spend all their money on marketing and not engineers. That is what NUBISA did with JXCORE. The whole exercise of switching from NODE and dealing with incompatible native modules was only worth it if their code protection worked. The key generation should be based on the specs of the machine + some salt. But god damn it, I am still searching for a working solution to protect the server side code of my crypto currency financial app written in Nodejs... I would not want to give away half a years work to some filthy hacker. 
I need a mediator between the local cli and the remote running spotify app. would love some ideas how I can simplify this. datachannels through rtc? 
We've built something similar to Prezi as a single page Javascript app: [Choices &amp; Chances](http://choiceschances.com) See my other comment in this thread for more info.
This has been the best source I found for audio timing with the webaudio api: http://www.html5rocks.com/en/tutorials/audio/scheduling/ As for your sequencer, everyone knows the sample order should be 1:kick 2:snare 3:closed hat 4:open hat.... not 1:open hat 2:snare 3:closed hat 4:kick ;)
There's really no great technical solution that I'm aware of. Developers have come up with hare brained copy protection schemes for years, none of which really work. There are crazy product keys, hardware dongles, phoning home... It's all pointless. The attacker just has to modify a few instructions here and there to jump around those copy protection mechanisms. It's just an escalating arms race. In JavaScript, the attackers definitely have the upper hand because the language is so dynamic. At least in C the compiler will make the object code much harder to comprehend than the original source code. That's a small win. I suggest you vet your clients carefully and write a strong license that protects your legal interests. The legal angle will get you much further than an obnoxious technical scheme that punishes your honest customers but does little to deter a dishonest user that would never have paid you anyway. It's difficult to do, but I suggest that you try to ignore the people who want to steal it and focus on making the best product you can for your honest, paying customers.
It looks like Shumway directly supports their prior investment in the SWF format, with its ability to render SWF via Javascript. Prevents them from having to convert millions of existing SWF, and prevents users from abandoning old projects. I hope.
This is helpful, but not much. The thing I have most trouble with debugging angular apps is the completely useless console errors angular throws. They are the worst thing I've ever seen in any framework. They are un-debuggable, they give you no clue what the error is about or where the code is that's causing it. Often the stack trace leaves no clue at all, and the error message is meaningless. It's poor framework design IMO when the error messages leave you scratching your head. 
Thanks for your advice, I appreciate it. My costumers will be the general public including competitors and hackers, who want nothing more than rip me off anonymously when they see the success of my hard work. No court or license file can help. I know it is all about server protection. But I would like to have an additional layer. You mentioned in your blog, that one of your co workers were looking for a solution as well. Did he find something? Is there a one stop shop at least for packaging and obfuscating Nodejs app. Everything should be in one file mangled, obfuscated including module names. So require statements should be rewritten.
Honestly I'm not sure, have you tried the first suggestion on the page? $(document).on('click','#resTable',function() { ... Jquery also has a https://api.jquery.com/one/ event binder that just binds the event once and the unbinds, but the main problem is rebinding dynamic elements which isn't an easy issue to solve which is why I'm suggesting the $(document).on('click'..) route which should listen to all click events on the page. If that doesn't work I can't help, sorry.
Thanks for all the help guys. It took a while, but I finally completely understand what I am doing. I used this reddit post I made and another post in the[codecademy](http://www.codecademy.com/forum_questions/53536cde8c1ccc9271000af1#comment-536f8438631fe998f00001f4) forums as help-just in case anyone else finds this and is also stuck.
Apparently they spent 5 years converting. Dart wasn't around when they started.
Clever, but unuseful. Can you elaborate a bit into why you feel using mustache templates with react would be a bad idea? The goal would be to allow for a shared template between the server and the client, even if the server isn't running javascript. I'm just trying to think through all the issues without having a whole lot of background with react. Solving this is pretty much the only thing I see that would prevent my company from adopting react. 
Okay, but only in 2013 got the converting a key focus and in 2013 Dart went stable with version 1.0 . I'm just saying that they could have look at Dart if they wanted to.
But what does that connect to? What is the WebSocket server here?
see also /r/webgl 
... I have to enter my email to watch a video?
oh sorry, it connects to a websocket server.. you can use server. js in the repo linked in this thread. so basically it just works as a mediator between spotify and your terminal kontrol-cli &lt; server.js &gt; spotify 
Where is the section of the program that actually talks to Spotify itself?
Here, use the email I signed up with: "okayhereyougo@lol.com"
check commands.js in the spotify app.. all I'm doing is actually just sending a command to it mapped to a function in the spotify API.. like 'skipToNextTrack' or 'setVolume' and passes the value as payload :) edit: the spotify app can listen to commands from anywhere.. you could hook up a raspberry pi or an arduino or whatever thing able to communicate with a server
Unless you can link to that, this image is made up. If you made it up for the reality of jQuery users, good job!
I'm also deeply fond of those totally inscrutable errors that only appear post-build/minification. I gave up and threw out ng-min a while ago and have found it safer to rely on DI guards, but still have issues at times.
I know the article . Being able to understand it well enough to fluently write a sequencer app using the concepts explained in it was the point.
"can't respect"... You introduced "it doesn't take much longer than writing something haphazardly", so it is your own verbiage. " doesn't mean that it isn't currently awesome, or that it has no use." Again, using your own words in my response (and can be applied to most fanboy type responses): "I really can't respect these sorts of statements, because they can be applied to anything" 
Yeah, it's a classic fake, still pretty funny though! 
What does it matter if it's made up? It's an obvious joke either way.
Anyway getting back to the technical bits, in the link http://www.cubrid.org/blog/dev-platform/inside-vertx-comparison-with-nodejs/ they are using server code (polyglot, and it actually mixes languages pretty well via json over the event bus) to generate the two types of responses, and using several languages to boot so you can see which one performs best (i.e. most awesome). But you can still do all your validations in js if that makes sense for your app. They make no bones about learning from node in this class of problems, lots of connections with small responses, and have apparently surpassed node quite thoroughly in performance per cpu, with lots of languages supported to boot.
Awesome! I might play with this idea too. Cool work.
[The thread surrounding this image is pretty good too.](http://www.reddit.com/r/programming/comments/buosj/add_a_number_to_another_number_in_javascript_img/) An oldie, but a goodie. Thanks for reminding me it existed.
This is 4 years old. You should probably use jQuery + Angular + Node.js to accomplish adding numbers in javascript today.
Your point seems to be that because I suggested building effective software from the outset, that I'm a hypocrite for defending projects who began that way. If so, that's a bit naive. I advocate building good software from the outset *because* it's a pain to modernize projects which started out as "just get it done, 99% of the users don't need good software". If you've ever inherited a project that started out that way, or had to deal with any amount of feature creep in your own projects, you'll understand.
I upvoted to cancel out the kool-aid kids. You are correct though, and in the beta 2 of iOS8 the webview is still extremely limited. I am working on a webapp using IndexedDB with a fallback to WebSQL and neither work on the webview. It works great in Safari but then if I save to home screen then it uses webview and turns to shit. Thanks Apple. Learn to play with others, even MS does it now.
Oh, I understand it completely, been there/done that, but it also applies to the current state of web client development as a whole is all I'm saying. There is always a bigger picture. I mean feature creep and get it out the door has been the mainstay of html come css come flash, activex, appletts, &lt;insert any number of dead attempts here&gt;, javascript, come html5...
What about speed? You need some asm.js, maybe webGL, websockets, webworkes, webcomponents...
This is a poor creation of technology, and a poor use of technology. The DOM is perfect for storing the formatted data on. No frameworks, no design patterns to use, just use the DOM. Objects, even data objects, can have read only getters to format data for output. Or use a method, that's even more clear that its read only and cannot "set" data that's formatted. { "id": "123456", "firstName": "Susan", "lastName": "Smith", "gender": "f", "phone": "5551234567", "assignments": [ { "grade": 0.65 }, { "grade": 0.83 }, { "grade": 0.90 } ], formattedAverage:function() { ... }, formattedPhone:function() { ... }, formattedName:function() { ... } } I don't know why simple problems are overly engineered and hard ones are very rarely approached.
Where you're calling the zoom plugin (after jQuery) is where you should also be calling (after jQuery) your mobile detect plugin. After you've got the scripts loaded you can then use the mobile detect to determine if you should be initializing the zoom plugin. E.g. if(!jQuery.browser.mobile) { /* not mobile so init your zoom */ $(elements).elevateZoom(); } The zoom plugin also has a responsive option which you might want to test out as it will give you the same user experience in terms of functionality as well as handle it properly for the different viewports. You could also use [.resize()](http://api.jquery.com/resize/) if you want to unbind the zoom depending on viewport size.
That's a pretty funky idea. :)
That's a ridiculously well designed website!
sums up reddit comments too, best on bottom.
I don't see anything racist or misogynistic in that last comment; I don't see how it relates to reddit.
thanks, we're looking intot eh EXT_frag method, still trying to find another solution though over all browsers c:
I feel like an absolute idiot, not checking the config for such features (lesson very much learnt). Many thanks for the info. I will defiantly try both methods and see how i get on. Thank you very much.
I did try the 1st suggestion and it didn't work. Thank you for your reply anyway
Ok, I think this finally convinced me that react is worth playing with.
The first time I saw JXcore, I had the same idea. I didn't bother to spend much time trying to reverse engineer it though. Nicely done. Software protection schemes are a waste of time. Client-side code can never be protected.
When working in nodejs please use: &gt; `Array.isArray(something)` instead of: &gt; `something instanceof Array` Same counts for never browsers. And when you choose to load underscore then at least use `_.isArray`
Don't forget to modularize it with Browserify (RequireJS is for losers!) and set up a build script with Gulp (Grunt is for losers!).
At some point we should all ask ourselves whether writing our application for a browser is appropriate.
That ship sailed years ago.
That doesn't mean critical thinking goes out the window.
I've only been developing for a year or so now, but working with React has been the easiest, painless experience I've encountered yet. Can't say I'm surprised to see large scale apps moving over to it Everything is a component, everything flows one way, everything is simple &amp; extremely easy to debug. Combine that with the ecosystem around it, and it's just an overall great experience. 
Considering how many arguments I've seen about this topic, I don't think it's been exactly ignored. 
Sure thing bro, who's got time to code by hand, when you have so many fantastic tools.
Can also be used to coerce `NodeList` into array... var list = Array.apply(null, document.querySelectorAll('p'));
i modernized it http://i.imgur.com/jJTWrl3.jpg shittily.
I completely agree about the scrolling part at least.
You should check out [how Promises work](http://www.html5rocks.com/en/tutorials/es6/promises/). They're an interesting alternative to callbacks and events for dealing with async functions. Here's an example of how to [Promisify an XHR](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promisifying-xmlhttprequest).
Have you gotten yours to work? I don't think it's an instagram issue because the demo seems to work?
They...both are javascript
Top it off with a NoSQL database with documents for all integers.
I guess dart doesn't actually have to be javascript. I doubt browsers outside of chrome would support it though. 
I would rather use a proper formatter than keep my formatted data on the domain object; it makes it easier to separate those concerns, makes clear that formatting logic pertains purely to formatting, and stops consumers at the view layer making assertions on the model at an inappropriate layer (because those consumers receive formatters only)
You definitely should. It took some time for me to understand the concept, but once I did, you start to think in a different way. Everything flows in one direction, packages are really reusable but the most important: they're really easy to read. Make the JSx transformer part of your toolset for react, it's worth it. 
Have you tried what /u/lucastimmons suggested? Wrap it up in this &lt;script&gt; function load() { // instafeed code } window.onload = load; &lt;/script&gt; I'll try mine in a bit and see if I can get it to work.
It's still the easiest way to write platform agnostic applications right?
&gt; completely useless console errors angular throws this is a fair critique of the framework, but is a concern orthogonal to that of the article, which is about accessing scoped data and services despite the (good) lack of global symbols.
I honestly don't believe so. I don't believe there is such a thing as a platform-agnostic application, anyway. Microsoft is attempting to do this with their Universal Windows Apps, which places the burden mostly on the platforms. Right now, the burden is on the software, which is not agnostic because of the numerous edge cases that need to be accounted for. With web applications, you are effectively writing code for two systems: The device(s) it's running on, and the browser(s) it's running on. You need to consider capabilities (touch, no touch, JavaScript engine, rendering engine, and so on) and device constraints (screen size, CPU, RAM, an on). With a native application, you consider the latter because you know the capabilities up front. This point is specific to a code editor. Do we really need to edit code on our phones? If we do, do we really want to do it in a web browser? I don't.
browserify is so last year. it's all about webpack now
It appears as though your post was marked as spam, probably because you included a URL shortener (the goo.gl link). If you resubmit without that it should go through.
Check out: https://github.com/magalhas/backbone-react-component There are a lot of people exploring this space.
Ya, I tried that and it still didn't work. I talked to the theme developer and he told me to add the script at the bottom inside the instafeed.js, but that also didn't work.
Ok... you're just making up words now.
Hey there, I've been using React for about 4 months now, loving it. Fairly simple yet very powerful. Still never used it with backbone, because never had to, all models control stuff and bindings are controlled by flux logic, https://github.com/BinaryMuse/fluxxor, to be specific. 
We are going to combine and minify our JS. I told my coworker not to bother with symmetric encryption. If we find somebody in violation of our license, we will let our lawyers handle it.
Mad libbin that shit! Makes me think of funny bot from South park, how it just strings together ad libbed jokes like "Does everyone in Long Island have hair that looks like pussy, you dipshit?" 
Stack overflow mad libs! 
This was literally a conversation in my office today... 
Hopefully the same could be said to you... 
Have you checked [zones](https://www.youtube.com/watch?v=3IqtmUscE_U) They address this very thing you pointed.
Yeah, it's funny but jQuery IS useful in many, if not almost all scenarios. Speed isn't everything.
OP should get with the times. Nobody goes near addition without first setting up a node environment in a docker instance nowadays anyways.
So it can be webscale 
fuck, didn't even bother looking at the HTML... shame on us. 
Sage.
Why is that problematic? Consider for example how some desktop application reimplement stuff that's also offered by the OS, simply because they need a bit more then what is possible by default? Like GUI drawing, input handling or mouse usage?
I mean that's all great from an engineering perspective, but it sounds like a fail if you need to optimize your editor for, and I quote, "making basic text editing smoother and more responsive". React is a cool framework though. I'm not completely sold yet because I haven't figured out how to have a main component that holds the state with child components than can change this state. I've been trying to build a slider component (range, not image slider), but that felt a bit wonky.
Gulp? What are you, like, 35? broccoli ftw broseph
You should check out BroccoliScript. It compiles to CoffeeScript.
If you were to build it without JS, you'd effectively be writing the same application twice, right? Not only is this wasted effort initially, but keeping them in sync will be quite painful. In my opinion I recommend you run JS on the server. There are a few libs to help: Rails: https://github.com/reactjs/react-rails PHP: https://github.com/reactjs/react-php-v8js Generic example: https://github.com/facebook/react/tree/master/examples/server-rendering If you really really don't want to write JS on the server, you have two options. First you could write your app twice and keep it in sync and manually add the React checksum (it's just a standard adler32 of the markup -- but make sure you get the data-reactid attribute and whitespace right). The better alternative (again, only if you really don't want to run JS) is to cross-compile whatever language you're writing your server side code in to JS. But seriously you're better off just running JS server side. It's not that bad :)
Someone should make uglifyjs for a whole Node app... Do you do browserify, and than run uglify on the single file a page long rename exception list for all your interface functions and data structures?
And then you need to think if you want to support OSX, Linux as well as Windows. 
You can pass an 'onChange' parameter with a callback to the children that updates the parent component state when it is called.
[**+Naomi Black**](https://plus.google.com/105063737349614915249) [_2014-07-02T23:29:02.979Z_](https://plus.google.com/105063737349614915249/posts/bCS9DSPdVug) &gt; &gt;**Material Design in Angular** &gt; &gt;We've been working with the folks at +[Ionic](https://plus.google.com/112280728135675018538) on a set of native +[AngularJS](https://plus.google.com/110323587230527980117) UI elements and directives that implement the material design system. This is a complementary effort to the Polymer project's paper elements collection. &gt; &gt;We're still in early stages, but if you want to follow along, take a peek at our github repository ([http://github.com/angular/material/](http://github.com/angular/material/)) and the demo site ([http://material.angularjs.org](http://material.angularjs.org)). &gt; &gt;For more on material design, see the recent post on Google Developers Blog: [http://googledevelopers.blogspot.com/2014/06/this-is-material-design.html](http://googledevelopers.blogspot.com/2014/06/this-is-material-design.html) 
Is that considered good style though? React seems to be all about one-directional data flow AFAIK. 
Well, no, it's not, but it's exactly what you asked for. Children changing the state of the parent directly is not in line with the React philosophy, but that doesn't mean it's impossible. Take a look at the Flux architecture [1] and the fluxxor module [2] for an alternative approach. Alternatively, you could also use an event-system to achieve what you want. Have the children fire an event and have the main component subscribe to it. [1] http://facebook.github.io/react/docs/flux-overview.html [2] http://fluxxor.com/
"Where are my legs?" lol
I think the core problem may be how the old editor renders lines of text in the window. It tries to be clever by only having DIVs and SPANs in the DOM to show the 50 or so lines of the document which are actually visible. You're whole document isn't entirely in the DOM, which should save memory in theory. Scrolling is done by constantly updating or replacing the contents of the fixed set of visible DIVs to show the correct text. This is to say that scrolling is not cheap and requires JS + DOM interaction. A better solution may have been to just let the browser do it. Materialise all of the lines in the document as DIVs and SPANs etc in one big long browser page. The browser does contain an optimised layout and rendering engine written in C++ which is designed to display long documents, and may also be able to employ the GPU to help it. Doing this kind of stuff *is* in the browser's job description. 
JQuery + AngularJS is probably uncool ... Please consider AngularJs + jQuery lite which might do the job, too.
Try Eric Lippert. Edited the original post.
An oldie but goodie :)
**Functionality** Application is broken if I deny it my location. **JS** 1. Why use `document.getElementById` if you have jQuery? 2. `x.className = x.className + ...` — why not jQuery? why not `+=`? And you do not have to set a ton of classes — just set class on the parent element once. Then use nesting in SCSS. 3. Why request your JSON sequentially after API? Seems like you could have requested and cached it on the page open. And actually I would have replaced a lot of callbacks with Promises — then you can just do `all` on weather and your json, for example. 4. `// Loop through data to find matching id` — you could just do `.filter(...)[0]`. 5. JSON data mixes tabs and spaces — indents look inconsistent, especially in bitbucket itself. **SCSS** 1. pulsate — can't you generate those using a loop? 2. flex — seems like a case for a mixin. **Overall** Looks really good! Hard to find anything else wrong with it, and I tried.
I would assume they started by doing what you suggest and only after it melted down opening large files, moved on to trying to be clever. Programmer's text editors need to be able to open gigantic files and that's not really in the browser's job description.
And you are a redditor. (I couldn't think of a better insult.)
Sure, you have to get it into the DOM first. But once it is in there the browser can render it plenty fast. Remember, the browser isn't dumb. It only needs to render on screen what actually is visible in the viewport. You don't have to take my word for it. Play around with "War and Peace" in the browser. ( http://www.gutenberg.org/files/2600/2600-h/2600-h.htm ) My machine here, which I admit is fast (i7 + 16GB RAM), using Chrome's timeline debugger can layout and display War and Peace while using just under 1 second of rendering time. Scrolling one page up/down (smooth scrolling off) anywhere in the document costs less than 10ms. I'm not bad mouthing React. I'm just saying that browsers can scroll. (Your fiddle doesn't seem to work for me.) 
Drop tdd save it for refactoring. Always Think documentation first. Focus on async approach to coding. 
This component does the job for me. And yes, React is much better than Backbone Views.
You should learn (or brush up on) the immediately invoked function expression pattern (iife for short, pronounced "iffy") When learning this you should also make sure to understand they users can redefine "undefined". Which is very interesting I usually just make all my plugins/libraries in vanilla JavaScript because jquery just seems too bloated if you only want to use one or two features
&gt; Speed isn't everything. If the way you're doing something is much slower and gets you nothing in return, that's a sign you're doing it wrong. Please don't use jQuery to `+`.
Look into other plugins. Find out which style/patters suit you best.
Thank you! 
[Direct link to the article](http://gizmodo.com/5995333/this-is-the-most-beautiful-way-to-learn-how-to-code/1599185671/+ashleyfeinberg) that doesn't go through some crappy toolbar. Edit: Fixed the link. Thanks /u/5outh!
The grinch lol! 
&gt; jquery just seems too bloated if you only want to use one or two features when minified and gzipped it comes out to about 32kb. that's pretty small, really. usually, the user won't even have to download it again though since you can serve it up from a well known CDN source, and it is likely to already be in the browser cache.
While it is pretty small, I actually meant bloated in terms of having many things you don't need and unnecessarily adding more code than one would need.
The only people who aren't visual learners are the blind. 
The [README file for jQuery](https://github.com/jquery/jquery/blob/master/README.md#modules) explains how to do a custom build if you only need part of it. It's not a case of bloat, it's a question of whether you think that saving 10 or 20K is worth that effort when you could be writing an app instead.
Actually that's the wrong article...[here's the real one](http://gizmodo.com/5995333/this-is-the-most-beautiful-way-to-learn-how-to-code/1599185671/+ashleyfeinberg). 
&gt; As tempting as it can be to start coding straight away, it pays to spend time designing your script before you start writing it. This advocates the "design first, then code" workflow, which is okay I guess, but a nice alternative is to design and code at the same time, and that can be more productive.
Nah of course you shouldn't use it for arithmetic operations, but for a lot of stuff it's extremely useful. Readability and maintainability means a lot too. I would even argue it matters more in a traditional web development project than speed.
Working with WebSockets myself, I don't necessarily agree with the author's conclusions, but the post makes some very cogent points about what Web apps need in terms of messaging patterns. Plus, it's always good to read well-argued posts about solution utility instead of trendiness.
Holy crap..... I've been stuck on this for so long... idk what has gotten into me today, Im sorry - let me go and bask in my stupidity...
Hah, sometimes it just takes another pair of eyes to look over stuff. Glad to be of help.
&gt;Alternatively, you could also use an event-system to achieve what you want. Have the children fire an event and have the main component subscribe to it. I use an event-based, observable object (like a backbone model), passed as prop to the main component (which is also passed as a prop to all the children). Children have access to the observ-object so they can make changes which propagate down the entire tree. This pattern can be nested and work parallel with React's state. 
I thought it is an explanation page, but actually it is just a home page.
I don't mean that. I didn't advocate lack of planning and design. You can plan and design in code. It doesn't take much experience. Instead of writing text on a whiteboard or thinking in your head, you can write your design in code. You can start off by writing comments (or not), it's up to you.
Finally a concrete implementation of material design.
How many times can you use "magical" in a spec?
What is this and why does it need a Java dependency?
Someone has clearly drunk the agile Kool-Aid. 
And use LocalStorage to cache your addition results.
Expand javascript to server side development, not only client side.
Sure, of course. All sorts of things need to be considered for all applications. I'm certainly not saying browser applications are useless, but I do believe they are the wrong environment for many applications and, specifically to this thread, text editors.
jshint is super useful for catching these kinds of easy-to-overlook and easy-to-make mistakes. You can automate it through grunt or just use the web-based tool to spot check when you're stuck on something. http://www.jshint.com/
Click `Impressum` at the bottom of the page. Then click `Home`. It throws a little popup error: `Cannot find anchor element "4685"`
They want you to buy an ad on the sub instead of posting a thread like this. Unfortunately they have no inventory. 
&gt; Would you consider a statically typed variant like TypeScript if you'd start today? If we were starting today I'd advocate Haskell and Haste, but this was a friend's hobby project from 2011 that suddently turned into something big, so gotta run with it. Yes Typescript is on the radar but converting it all is a non-trivial project competing with other high-priority stuff.
Good call, I have that book but forgot, thank.
&gt; Drop tdd save it for refactoring. Thanks, but not clear, are you saying to refactor the code to something else and add tdd after? 
You could write a function which figures out if the object can be transversed using those keys. E.g. something like this: function hasChainOfKeys (obj, keys) { var prop, o = obj; while (prop = keys.shift()) { if (o.hasOwnProperty(prop)) { o = o[prop]; } else { return false; } } return true; } console.log(hasChainOfKeys({}, [])); // true console.log(hasChainOfKeys({a: {b: 1}}, ['a','b'])); // true console.log(hasChainOfKeys({a: {c: 1}}, ['a','b'])); // false
This function may simplify things a bit: var json = { a: { b: { c:{ d:3, h:4, k:-1 } } } }; function dig( obj, map ) { var arg = obj; for( var i=0; i&lt; map.length; i++) { if( arg.hasOwnProperty( map[ i ] ) ) { arg = arg[ map[ i ] ]; }else{ return false; // if you use FALSE in your JSON files consider returning undefined } } return arg; } var value = dig( json, ["a","b","c","k"] ); console.log( value )
Hearing about things like that always makes me more glad that I got into Web development so late than sad about having missed the wild west days. About the purpose of things remaining the same across technologies: the problems (mostly) remain the same, it's just the solutions that evolve. And, from what I've heard, the problems with each approach at solving a problem get rediscovered by each new generation of programmers for whom the approach seems fresh and novel.
You can just as well waste ages on some ivory tower planning to only later realize that your ideas don't actually get along so well with reality.
You could have a util function that checks for the value through an array of the properties names like so (I assume ES5): var getDeepVal = function(keys, obj) { return keys.reduce(function(val, key){ return val &amp;&amp; val[key] }, obj); }; var a = { b : { c : { d: { e: 'I am value!' } } } }; var test1 = getDeepVal(['b', 'c', 'd', 'e'], a); var test2 = getDeepVal(['b', 'c', 'd', 'x'], a); console.log(test1); //I am value! console.log(test2); //undefined edit : formatting
Even modern IDEs like Webstorm don't warn you when you do this typo. Happened to me at least twice.
This totally makes sense and "dig" is a perfect name for the function. Thanks!
Frontier times are always best in hindsight :D It all goes so fast. For streams I thought Socket.io was the cool thing but from the article I'm now looking at SockJS which is a new lessons-learned approach, very hardened and has 11 (!!) transports to make it work on pretty much every browser (and no Flash). Fun thing is after a while you get used to the notion that every year there is something new, but still hard to look ahead and see it coming.
You should have a complete separation between the back-end and the front-end. In other words, zero HTML should be coming from the PHP. I like using JSON from the API. When using a front-end framework like Angular, the scope would auto-update and know what to (html-wise) with that JSON.
this. Don't generate markup on the backend and pass it to the front or vice versa. You should be passing objects, and constructing the markup from that object. XML or JSON is your choice really, but JSON is much easier to work with in modern frameworks in my experience. Remember if you're going cross domain you'll have to use JSONP.
Thank you. This "felt" like the right way to approach things, but I wanted to confirm. Do you know of any tricks for dynamically creating the content after we have the JSON Object? The code I currently use looks a little messy.
Its kind of a step-by-step process in Angular (this is the only way I know how to do it). First, you have a $get function that pulls that JSON into your controller. Then, you can take the result and assign it to a scope variable. Then you can bind the scope to a directive. The magic happens when you place a watch function on the UI. So when a user changes a UI element (a drop down box, for example) the watch function would trigger a new $get.
I was in the same spot until I learned Angular a few months back. I built a prototype of this app I'm working on using only Jquery. Once I learned Angular, I went back and only used jQuery where I absolutely needed it (in the directive when manipulating the DOM). The code on my prototype went from about 5000 lines to about 500 lines and I'm seeing a huge improvement in performance. Plus, this is a little hard to illustrate, but doing things the "Angular way" made me a much better programmer. My code is much clearer and easier to go back and edit.
I swear I also invented almost exactly this same function, name and all... Convergent code evolution?
When first starting out with rendering JSON it's really tempting to make jQuery handle everything. After all, you're familiar with it and it's certainly possible. As /u/myownsake26 noted, you'll get 5000 lines of js into your project and realized that it's a huge mess. Using a frontend MVC framework like Angular or Backbone (I recommend Angular) will make your life SO MUCH easier in the long run. It's absolutely worth learning.
When to learn to fix bugs and refactor? A.) Immediately, as it is integrated into your development processes from the get go. B.) Later, someday, eventually, when you already claim to understand some programming language.
But...that's how learning works... There is a pretty dramatic difference between reading the "right" way to do something, and then actually doing it yourself.
The ivory tower is an anti-pattern, not a goal. Also, physical construction metaphors are usually misguided in a way. With a real house you can't start with the living-room and put the foundation in later, with software that is a real possibility. No one said anything about not planning. I spoke about overplanning, planning from a metaphorical [ivory-tower](http://en.wikipedia.org/wiki/Ivory_tower#Modern_usage) in great detail, only to realize in implementation that you missed a vital detail while the requirements changed in incompatible ways, too. Instead, plan the core of it and then keep evolving the thing as you go -- [lowercase agile](http://pragmati.st/2014/03/03/agile-with-a-lowercase-a/). 
I appreciate both your, and /u/myownsake26's, help. I am sure I could just Google this, but are there any solid starting points you would recommend for Angular.js?
No problem. Their docs are pretty solid and John Lindquist's videos are pretty good. https://www.youtube.com/user/johnlindquist
I'm glad it works :)
I know I can do that. I wanted to hear about others experiences
 return false; This does not seem good, returning `undefined` would be much more natural. 
fixed. Thanks for the hint.
When I click on the flow chart on a blackboard picture, it draws a square where I clicked and then asks me to publish a post about the picture with an unknown social media interface. I click cancel, and it says: "The page at **Gizmodo.com** says: Closing the editor will discard any changes..." What is going on here? This isn't Gizmodo.com!?
sorry, this was just my quick reaction on the JS switch of prezi. Here is prezis original post: https://medium.com/prezi-engineering/56e0ca57d135 .
Agreed. John's tutorials and Egghead.io are a great resource.
You don't have to jump on the full client MV* framework bandwagon. Just find a templating language you like and feed your JSON straight to it. You could try handlebars: http://handlebarsjs.com/ I enjoy working with a stack where the server and client both render the exact same templates and consume the same JSON view model.
Then you could remove the `return false;` or `return undefined;` line as a whole. Returning `undefined` always happens implicitly anyway.
There is no strict datatyping in Javascript, we can do this if we so desire.
Interesting. I played with handlebars a bit when trying out Meteor.js. This does seem like a solid use case for it.
And, in doing so, you went from one extreme (no planning) to the other (over-planning).
Since this is /r/javascript, I'm going to work under the assumption that you are a front-end developer. If you have experience building anything more complicated than a 5-page site, I would hope that you would understand the benefit of a design-first approach, one that takes into account user experience, workflow, layout and utilizes mockups, wireframes, maybe even a written description of the project's objectives and how you plan to achieve them. Unless you're a wizard with ASCII code, I'm not sure how you would plan to go about detailing those things in your code. This also does not take into account any development that has to be done on the back-end, including data structures and schemas, DAL-work, API design, and just general software design and planning in general. An experienced developer understands the importance of design before code. But you're not experienced, are you? Looking over your comment history, it seems your work history is limited to mostly school projects. So, please trust me when I suggest that design will become of tantamount importance when you begin to take on larger projects. Is it needed for a quickie website? Probably not although the pragmatist in me still sees the value. Will you need to have a plan to build larger applications? If you are a one-man operation, doing it "in your head" is certainly possible, but you'll come to regret it as your system grows in complexity. I guess my issue in general is that you are giving advice when you are still learning yourself. It's good to help people, to be sure, but please understand what you are advocating. Especially to a beginner who would greatly benefit from laying out their objectives before trying to build. 
Actually, just think about who should be in charge of generating the HTML. Is it the client or the server? Now, try to keep it there and not mix and match...it just gets ugly. Currently I defer to only sending JSON via ajax calls, and do all html generation on the client. If you go this route, find a templating engine. I use underscore, but there are many other good ones. 
childtest2 is set to the object you return, `{someStr:'asdf'}` -- this object doesn't have the same prorotype as the test2 function. It's easier to see if you return an array or something -- if you look at childtest2 at this point, it's an empty array with a length of 0. It seems to do this whenever you return a complex type from the function.... var test1 = function() { return new String() } console.log( Object.getPrototypeOf(new test1) ) // String var test2 = function() { return "" } test2.prototype = { foo: 'bar' }; console.log( Object.getPrototypeOf(new test2) ) // {foo:bar} I guess the real question is why you'd need your function to return a value -- you could just as easily say `this.someStr = 'asdf'` or add `someStr` to the prototype to get the same behaviour.
Do the whole tutorial on the angular site. The 'cell phone' shopping cart thing. Read everything in the tutorial, look at the code and follow every step. Really helped me get my head around it.
We need more books like this ranging more technical topics.
Thanks for your feedback! Admittedly it's a beta. The pagespeed will improve a lot in the next major release (and this will removed the preloader). Still, javascript is a must for this type of website transitions. But we will reduce the js size for the presentation layer. 
The pseudo-code for `new C(...arguments)` goes something like: var thisVar = {}; Object.setPrototypeOf(thisVar, C.prototype); var retVal = C.apply(thisVar, arguments); if(typeof retVal === 'object') return retVal; return thisVar; So you can see if you return an object from your constructor, that object is exactly the result of `new`. JS won't change the prototype for you. That's because the prototype is set on the this object before calling the constructor. Which makes sense, because you want to be able to call prototype methods of this from inside the constructor.
Well duh, but why would you desire so? It is much more natural to use undefined to signal "not found", than `false` which is commonly found as a value in all kinds of JSON structures.
It would be so nice to have more books aimed at intermediate/advanced that aren't college text books.
This sort of generic deep traversal is most common on actual data rather than program objects; so it's not usually going to be subject to mangling/compilation. If you need to deeply traverse program objects in a generic way and your code really is starting to get gnarly, I'd prob use a [sweet.js](http://sweetjs.org/) macro.
What is a "native" js library? What is an example of a non-native one?
Oh no, sorry, fast phone response, i'll elaborate: This is my own personal opinion, based on the projects I've been working on, with the teams I've been working on. So I'm supposing a lot of things here so please, take everything with a lot of salt ha!. (also my english is not that good) Just wanted to point to this particular statement: &gt; TDD in a nutshell is, write unit tests for every function before actually writing the function This preconception (which seems to be the core idea behind TDD) that if I "constraint myself" to a particular set of discreet desired output my code will do exactly what I need. Let's say that you fabricate bulletproof glass, with these logic, you need to shoot into sheets of glass until it doesn't shatter. And that's kind of backwards, there is no point in writing extensive unit tests, for software that doesn't exists yet, doing so won't prevent bugs, not even reduce de amount of them. Now before I go further, I want to point that, unit tests DO work, but they solve a very different problem, they help a lot when refactoring code, when you have an outdated piece of code that need refactoring, and you want to test that the refactored code delivers exactly the same results as the previous version you need to unit test it. That's where unit tests work, and work really good. Now, my point is, unit test don't solve the problem of writing bug-less code, that doesn't happen, code doesn't work that way. If you write unit tests before writing code, and then write code that pass the test, that doesn't warrantee that the new code wont fail, it just means that the code pass the test you coded. Bugs can exists in that piece of code, logic ones, weird edge cases, etc. So what I've learned is that code is the least important part of Software engineering, anyone can write code. What matter is the architecture, the pieces (that; yes, are made from code) that make your software make sense working together, and the best way to make consistent, logic pieces is to plan them, and thats where Spec enters the game. Speccing BEFORE coding should be your rule of thumb, enforce spec before code, make the stakeholders review the relevant specs. Then you will have iterations over paper, which is a lot cheaper than correcting code. Spec then exist :)
 I had no idea that was a thing you could do, I'll definitely check that out for my next project, thanks!
Reminds me of the ethos behind http://component.io/ except Component helps you with combining them all too.
You can't use jQuery Tabs and Polymer's paper-tabs because they are both building the tabs for you. You could just build the whole thing yourself but I can't tell if that is what you are actually interested in. Paper-tabs add the styling and give you something to watch. The way suggested in the Polymer docs is to do something like this: var tabs = document.querySelector('paper-tabs'); tabs.addEventListener('core-select', function() { // Do something with tabs.selected to make content appear. }); You can add *valueattr="name"* to your paper-tabs and then add *name="something"* to each paper-tab. Then *tabs.selected* is equal to the name specified in the paper-tab. When the value changes, hide the content currently visible and unhide the content that matches the new value of *tabs.selected*. 
Filter isn't jquery. Its an array method like map, reduce, forEach, etc
In .NET, I'd use the "?." operator like a?.b?.c... I think coffeescript has something similar. Anyone know?
&gt;Since this is /r/javascript, I'm going to work under the assumption that you are a front-end developer. No, I'm a 'full-stack' developer. &gt;I would hope that you would understand the benefit of a design-first approach, one that takes into account user experience, workflow, layout and utilizes mockups, wireframes, maybe even a written description of the project's objectives and how you plan to achieve them. Obviously the context is that the kind of design you're talking about is done before attempting to write any code. The article talked about 'writing a script', which in my opinion implies that at that point there's a well-defined feature that needs to be implemented. That's the context I was talking about, anyway. &gt;But you're not experienced, are you? Looking over your comment history, it seems your work history is limited to mostly school projects. Well, maybe you can't deduce my life from reddit comments. I work at a company and I've done many projects professionally. &gt;So, please trust me when I suggest that design will become of tantamount importance when you begin to take on larger projects. You're just attacking a straw-man. The "design" I'm talking about has nothing to do with the architecture, designing the feature etc. The context of "design" is the actual code design. &gt;I guess my issue in general is that you are giving advice when you are still learning yourself. That's just condescending. EDIT: &gt;This also does not take into account any development that has to be done on the back-end, including data structures and schemas, DAL-work, API design, and just general software design and planning in general. That's a pretty good example of non-agile software development. The idea that you need to lock in data structures, APIs etc. is nice example of waterfall software development. Data structures need to live. APIs need to live. You need to refactor and iterate often and a lot. Since I work with almost exclusively with full-stack engineers, I don't need to ping some "backend developer" as a "frontend developer" to change an API. Of course if everyone were either frontend or backend developers, you would need to carefully design the API as the cost of changing it is high due to communication. I can simply instantly and easily modify and develop the API, data structures and what not as I plan, design and code it as I go. And luckily not everyone uses SQL databases that require a waterfall-y way of working where you need to lock-in your schemas to prevent costly refactorings etc.
Maybe in a few ways, but the main reason why MicroJS exists stems from the file size wars. Component doesn't discriminate about file size, it cares about single purpose, reusable code.
(disclaimer - I've used Backbone &amp; React but haven't tried Angular yet) Basically, for any kind of complicated JS app you'll want want some kind of "View" class that will abstract away some of the repetitive tasks of updating/rendering to the DOM. You'll also want some kind of "Model" class which maps frontend objects to whatever your backend database structure looks like (ie. a User model that represents a row in the "user" table of your db) and ideally takes care of GETing and POSTing to the server to keep them in sync. Finally, you'll want some way to "bind" your models to the DOM elements on the page which represent them. In one direction, you want to observe user activity in the UI (ie. clicking, changing form elements) and update the models to reflect the UI state automatically. In the other direction, when your models (which should be considered the "single sources of truth" when it comes to app state) change, due to some change in global state or via a server fetch, you want the DOM to update to reflect that fact. Angular provides this, as do many others in some form or another - the other favorites at the moment are Backbone (which also provides Model and Collection classes) and React (which doesn't). Angular provides two-way data binding, ie. goes in both directions mentioned above, out of the box, but you must learn the angular templating language to make it happen. React provides one-way data binding - it updates the DOM automatically based on state changes - but requires you to explicitly handle changing the model via callbacks. Backbone doesn't really provide either per se, but it gives you Events on every class so it's easy to implement data binding yourself. By analogy, jQuery is a toolbelt which you'll probably be using quite a bit with any of these. Also - if you want to spend a weekend learning a toolkit that will change the way you think about writing javascript - check out Underscore.js. It has quickly become as necessary to me as jQuery in nearly all the JS I write because it makes things a lot more readable and concise. Angular/Backbone/React are more like blueprints and building supplies - guidelines and helpers which help you structure what you're building. Angular includes everything and the kitchen sink, but you have to figure out how to put it together like a massive IKEA project. Backbone is lumber, windows, concrete. It's what you need, but you gotta know what you're making and how to do so. But as a result, it's dead easy to understand what's going on - the [annotated source](http://backbonejs.org/docs/backbone.html) is super short and easily read in an evening. React is maybe somewhere in between - its Component class (React's version of a View) is very powerful but the data model is entirely up to you (or you can use it with eg. Backbone.Model). Anyway, don't hop on the Angular bandwagon, or the anything bandwagon, just because it's the hip framework of Spring 2014 - take your time &amp; do a bit of research on your options. In the end, it's all up to you in terms of how much you want to learn and how complicated the app you're trying to build is. It's also, I find, a matter of taste and style - I tend to prefer minimalist libraries so that I can understand everything that's happening, but I also understand the appeal of more complex libraries that "automagically" take care of some things. Best of luck on your project!
Thank you, this is exactly the reason I'm asking for feedback. My bread and butter is basically turning PSDs and ai files into working templates. Till now I've been able to do what is required for templates with some very simple dom manipulation using jQuery. Iv ended up feeling like I have little understanding of JavaScript, hence the reason for building little projects like this.