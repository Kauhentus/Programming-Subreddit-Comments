You could be good with gulp and babel. That will get you up and running really fast. 
In addition to what was already said, organizational control = faster, more controlled/focused/efficient development.
No worries. Just wanted to make sure the right information was getting out
Give this a try. let imgVar = ''; // Fetch API data fetch(API) // Parse the response as JSON .then(response =&gt; response.json()) // For each item create an image element .then(data =&gt; data.[image object path].map(item =&gt; imgVar+=`&lt;img src=${item.src} alt=${item.title} /&gt;`)); // Return the variable which can be dropped into your HTML return imgVar;
`setInterval(_=&gt;$(prediction?'#left':'#right').click(),1);` Profit better ;)
Doesn't work for me on chrome. I see you used an imgur link, maybe that's why since codepen blocks those.
Thanks will try when I get home! 
Yea I love to code I hate to do UI stuff I know how to bout it’s just boring to me
Why I am so mad? Because it is basic statics and everyone out here treating like the second coming of Jesus.
Weirdly, knowing that it is detecting patterns means an intelligent actor can beat the machine more easily than if the machine guessed randomly. You can thwart it by predicting which pattern it has learned, and deviating right as it is about to apply it. It’s like that scene in The Princess Bride. I found it really entertaining to go slowly and try to trick it. Could keep it in the low-to-mid 40s.
Thx for the reply :) looks to answer simply to your problem, open the JS console on [https://mr21.github.io/todomvc-vanilla](https://mr21.github.io/todomvc-vanilla/#/) and paste: `const todomvc2 = new TodoMVC();` `document.body.append( todomvc2.rootElement );` This will create the new component and this code: `const firstTodoId = Object.keys(` [`todomvc.data`](https://todomvc.data) `)[ 0 ];` `const firstTodo =` [`todomvc.data`](https://todomvc.data)`[ firstTodoId ];` `if ( firstTodo ) {` `delete` [`todomvc.data`](https://todomvc.data)`[ firstTodoId ];` [`todomvc2.data`](https://todomvc2.data)`[ firstTodoId ] = firstTodo;` `}` &amp;#x200B; will move one todo from the first to the second component. Obviously the way how i get the first Id is ugly but normally it will be in the dragndrop process. But you can see with proxies how simple is to use the component's data after that
Thx for the reply :) looks to answer simply to your problem, open the JS console on [https://mr21.github.io/todomvc-vanilla](https://mr21.github.io/todomvc-vanilla/#/) and paste this code [https://gist.github.com/mr21/05a57dc90a39b0844715435ac1df2493](https://gist.github.com/mr21/05a57dc90a39b0844715435ac1df2493) You will see with proxies how simple is to use the component's data. On top of the component encapsulation it's become really simple to use it so. And the todomvc's logic stay in a blackbox
What was your result?
Did pretty decently at the start, and then got impatient and lazy and it was like a rocketship crashing. 
try .onmouseup() or .onmousedown() instead of window.onload = function(){ document.getElementById("record").click(); }; try window.onload = function(){ recorder.start(); } ; &amp;#x200B;
This is a nice library: [https://github.com/ecrmnn/collect.js#unique](https://github.com/ecrmnn/collect.js#unique) 
Sorry, i'm making 2 requests: Zomato API. It needs to have 1 request to get CITY ID. Then CITY ID needs to be strung into the API URL to return restraunts in the area. This is my current code. &amp;#x200B; `var apiKey = 'place api here';` `var string = 'Geelong';` `var url = 'https://developers.zomato.com/api/v2.1/cities?q=' + string;` `var x = document.createElement("IMG");` `const imgArray = [];` `const nArray = [];` `// Line 8 - 57 API Functions.` `fetch(url, {` `method: "GET",` `headers: {` `'user-key': apiKey,` `}` `})` `.then((resp) =&gt; resp.json())` `.then(function(data){` `//Storing Location ID as var to reuse for next API call.` `var result = data['location_suggestions']['0']['id'];` `//Next API call containing result in API URL.` `var url2 = 'https://developers.zomato.com/api/v2.1/search?entity_id='+result+'&amp;entity_type=city';` `fetch(url2,{` `method: "POST",` `headers: {` `'user-key': apiKey,` `}` `})` `.then((resp) =&gt; resp.json())` `.then(function(restaurant){` `var obj = restaurant['restaurants'];` `var img = obj;` `img.forEach(img =&gt; {` `var imgLoop = img['restaurant']['featured_image'];` `imgArray.push(imgLoop);` `});` `obj.forEach(obj =&gt; {` `var nameLoop = obj['restaurant']['name'];` `nArray.push(nameLoop);` `});` `})` `})` `.catch(function(){` `});` `console.log(imgArray);` `console.log(nArray);` 
sweet thank you and why are you pointing out the const and stuff? 
Thank you for the input, but my recorder still seems to have problems. I figured out how the process flows by adding a bunch of alert functions. When I press on the buttons manually, I get start() -&gt; end() -&gt; and somehow the handlerFunction() is called, which processes the data and spits out a playable audio. but when I use javascript to press buttons for me, I only get start() -&gt; end().
Instead of building to separate arrays you could build one array of objects which contains all of the cities and then the restaurants in the area. Iterate over that array to create images using the object attributes. You can use parts of my initial response to build out the single object array. var restaurants = [ { ‘city_id’: id, ‘restaurants’: [ {‘name’: name, ‘link’: link}, {‘name’: name, ‘link’: link} ] }, { ‘city_id’: id, ‘restaurants’: [ {‘name’: name, ‘link’: link}, {‘name’: name, ‘link’: link} ] }, ]; // iterate over the restaurant object array for each city ID then create an image for each child restaurant associated with that city ID restaurants.map(obj =&gt; { obj.restaurants.map(item =&gt; `&lt;img src=${item.link} alt=${item.name} /&gt;`); }); It’s getting late here, I’m a little delusional, but this should be a start. 
This is awesome! That feeling is why I fell in love with software development. See a problem? Build a solution! Good job! 
Yeah, there's no denying that it's simple. It's not hard to see how it works. But no need to put down somebody's work simply because other people appreciate it. 
Thanks man 
What you want to do here is first to group by value (i.e. reduce your array into a map of arrays where the key is the value and the array has all instances of that value) Then turn your map into an array of (key,[values...]) and filter out all the entries with more than one instance. Finally, you might want to flatten that array to get your data back into a linear form
Thanks for the suggestion, I'll implement touchstart. As for Aaronson's Oracle, I can only speculate, but I think there are a few factors at play. First of all, I find the 70-80% interval a bit suspicious — I mean it's one thing not being very random, and it's a totally different thing being **that** predictable\*. So either his test subjects didn't really try their best, or maybe they deliberately fed test patterns to figure out the program's inner workings. Of course that is assuming the numbers quoted are accurate and didn't get inflated (e.g., discounting them by just 5 percentage points makes them look a lot more believable). It's possible that the algorithm was more sophisticated: &gt;There might have been various enhancements on top of that -- e.g., if you're not taking enough data for 5-grams to be useful, then you can also look at 4-grams and 3-grams, and you can also "seed" the predictor with 5-gram data from the previous users (hoping that the next user will be pretty similar). I think that last point (preserving data from the previous user) was likely to make the biggest difference since my experiments with adaptive n-grams weren't successful. \* The reason I think we are not **that** predictable is because most of us aren't terribly good at memorizing motoric patterns. For example, I have only elementary piano training, so learning a new piece takes a lot of effort because my fingers keep introducing errors. Learning to inflate and kite a paraglider also took me a while even though its control inputs are almost binary. So when typing random binary patterns, I imagine I also introduce mistakes, and probably a lot more than when learning a piano piece since I'm not actively trying to remember any of the patterns... But of course this reasoning is somewhat iffy since I have absolutely no knowledge of neuroscience... Perhaps mashing keys puts one's brain into a totally different mode.
 &gt; This was a tiny exercise in writing some mini helper to have a more declarative way of making decisions in my code. Interesting functional stuff, sick write-up. I loved thinking about the exercise and article. From a practical perspective, my 2 cents: ` num =&gt; num % 15 === 0 &amp;&amp; 'Foobar' ` Using the `&amp;&amp;` operator here scares me. I couldn't understand what was happening at first glance. I argue that this isn't very declarative, insofar as the declarative assignment `= 'Foobar'` has been abstracted away and now is represented / executed with this Boolean logic short-circuit. As a laymen, 1 factor of the "incredible clarity" of the Haskell pattern matching snippet is that the value-naming operator `=` makes it clear that the function is resolving a `String`. However, this is lost in your JavaScript `match` implementation.
In paper you are right, but in the real world what you said cannot be achieved so easily, even more so across it big companies.
Well, this is exactly what happened in 'The Matrix' "Do not try and bend the spoon, that's impossible. Instead, only try to realize the truth...there is no spoon. Then you'll see that it is not the spoon that bends, it is only yourself."
Not that I use jQuery much these days, but somehow this is the first time I've seen logic inside a selector. Nice.
I've spent too much time code golfing. In fact, kicking myself for not saving a byte by removing that useless semicolon &gt;_&lt;
Yo, this is very cool, your code is clean. &gt; So what is the problem with this way to do vanilla components? I think after looking at your work that something like this would be difficult to maintain with more people working on it. It's difficult to set set strict paradigns re: code organization... how and where to encapsulate complexity. You've put the whole app in `TodoMVC`, but it's obvious how this approach could be scary when the app gets larger. Using frameworks gives one structure re: organization, and a centralized, open-source community to help the developers. Imagine you make this so complex (e.g. a virtualized scrolling list of 10,000 TODO's). You're eventually going to need to implement DOM node recycling or (lol) virtual dom-diffing. Why not, then, just skip the headache and use React? 
Hi /u/TTT334, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/keychainoi, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Jiibaro, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Browsers won’t always let you trigger things programmatically. Would you want Facebook to automatically start recording your microphone and camera every time you load the page? Browsers require user interaction for certain events, like recording, opening windows, etc. 
I think I've fixed now.
Neat! Some thought: Perhaps rethink the wording `Is there problem with the request?`. I understood the second time through, but initially I thought that something in the `500` range would qualify as a "problem". Admittedly kind of silly, since I am a developer and the usage of "request" obviously implies the data sent by the client to the server. Still, I think the fact that I was confused (even though I'm supposed to know this stuff) is useful feedback. Perhaps better wording would be `Is there problem with the user's request? (e.g. malformed data, etc.` Some subtext of examples or something. I am unsure of the wording specifics, but I am sure that more context could be displayed on those troubleshooting cards. Additionally, a stronger / more clear call to action on the front page would help, too. Your comment, here, told me that I should use this interface to somehow choose a HTTP header, but I don't think this is actually clear at first glance, nor in the statement `What's my HTTP status?`. Something better would be a clarification of what I'm supposed to be doing: `Answer the questions to find out what HTTP Status Code to use`. Mine doesn't quite roll off the tongue, but you get the point.
Let result = allCycles.filter((x) =&gt; allCycles.filter((y) =&gt; y.lifecycle === x.lifecycle).length &gt; 1); and add some more checks in the second filter if needed
It exists, but almost every large project is using https://eslint.org now. It’s significantly more popular as it’s a lot more extensible, configurable, has so many more plugins as well as wider community support.
Really cool 
Yeah? One person dies and the whole society ceases to function?
\&gt; how would you use an xml parser in your JS apps? Do they really need one nowadays Truthfully I have never needed an XML parser in any JS apps over my career. Everything Node favor \`.json\` because the inter op. For the web, one might use the \[browser-native XML parser\]([https://www.w3schools.com/XML/xml\_parser.asp](https://www.w3schools.com/XML/xml_parser.asp)) that ships with all browsers. 
[removed]
Great response. Thanks! I'm refocusing on JS now again since I lowly prioritized it for work during the times when JSLint was still popular. haha! gonna check eslint now. Thanks again!
Also, VS Code was a thing before Microsoft bought Github.
You'll have to at least create a function to compare two objects by their contents with a list of excluded property names. Then use it with `filter()` array method.
I got Iteration 1163 and its guesses are correct 60% of the time (overall). 806 score remained. I tried to be random,if I 10101 it quickly catches the rhythm.So I have to constantly changing my pattern,sometimes double tap on one side,sometimes have favor over one side other than the other side,if I'm a robot,I will keep changing ryhthm every 2-5 taps.
Thank you so much for the info and tip. That makes a lot of sense. Then are you saying there is no way I can implement automatic recording using javascript? I just want to make sure I am not wasting my time on something that can't be done.
So for the first 100 or so iterations, it was pretty horrible. 44%. But from then on, it was all downhill for me. At 800 iterations it's at 60% and only getting better.
Link?
This blog covers the following: 1. What are Components 2. Class Components 3. Functional Components 4. Class vs Functional Components 5. Handling Dynamic Data in Components (props and state) 6. Rendering Components Dynamically 7. Plot Twist: React Hooks 8. Paving the way forward 9. Form component (demo, container component, controlled component) &amp;#x200B; Its lengthy but I believe it will be a very good read for many beginners out there.
Hi /u/aspirewebs, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yep, now it works! 
And again, what does this cover that the official docs do not?
 const onlyOnce = (objArr, nestedPath) =&gt; { const seen = {}; return Object.values(objArr.reduce((acc, obj) =&gt; { const key = nestedPath.split('.').reduce((cursor, k) =&gt; { return cursor[k]; }, obj); seen[key] ? delete acc[key] : acc[key] = obj; seen[key] = true; return acc; }, {})); } console.log(onlyOnce(allCycles, 'metadata.lifecycle'));
Apt. Duly noted. Thanks for concrete feedback. 1. \`Is there problem with the request?\` issue: Yes, agreed. There is problem with understanding and terms being used. Main question needs some changes, in addition, 1-2 small sentences describing in brief is planned which will be clarification about the question. 2. call to action on title : Need to give some thoughts on it. Better clarification would certainly help. 
There may be a lot of information that the docs cover already, but here is what I have to state (especially for people starting out or are still getting themselves familiar with React). 1. At least for me any the students that I am training, the official docs isn't noob friendly. I am always getting questions that the doc should have already mentioned it for topic X. 2. The docs aren't following any specific order, they just cover a topic and move on, I am not sure whether I should read A, or B first. 3. For people even reading from the docs, it bet they won't find about hooks anytime soon if they follow it. 4. The docs don't cover about complex component structure. 5. There are some details that isn't even mentioned in the docs. 6. This blog post is like a single lookup point to learn about components. I won't have to open X number of links to learn X different things about components.
You must be fun at stand-up meetings...
Yass! Make it open source on github!
Recommend adding or mentioning the usage of something like [`fork-ts-checker-webpack-plugin`](https://github.com/Realytics/fork-ts-checker-webpack-plugin) as babel will only transpile typescript to javascript, it won't run the typescript code against `tsc`. So you can either run it via webpack in a separate process, or manually run `tsc` against the code (with optional `--watch` flag) to provide type checking.
I have already added ESLint to the build process. Planning to write a different post about it next. Thanks for the inputs!
Linting won't check types, it will just make sure the code adheres to formatting and code-quality rules. If that's what you're referring to then cool, just thought it would be worth pointing out :)
Great approach :) If I may, you might just want to make sure there are no repeats; for example in the first sheet you generate there are two 2+4, two 3+3, and there is 2+1 and 1+2, and 4+1 and 1+4 Not a big big deal, but it's the kind of things my perfectionist ass would like to fix if that was my project
ah I get it now. I had missed that altogether. Just setting things up right now. Thanks once again for pointing it out!
Hi /u/vicat56, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I couldn't think of something random enough so I selected left or right depending on how close each of the letters in the word 'radiator' were to the letter L. Got 50% guessed correctly! 
Hi /u/yjaaidi, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/yjaaidi, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Anyway I want to give two examples why the discussion came up in the first place. 1. Let's say you request data from a server. The response is typed but the server breaks the contract and sends a string instead of a number. Since your code and your tests use typing you only tested the number case. 2. You use a third-party component which takes a callback argument for handling a change. The component might be typed and promises to return a number. You tested the callback to handle numbers. But for any reason the component passes not a number but a string in some situations. The later example was real and the cause for the discussion in the first place. On a side note: I think the transpilation of TypeScript to JS should not be referred to as compilation. Static type checks and removing Typescript hints are two different things.
FYI, here's the talk Abstract CSS is a confusing matter for a lot of developers. We’re asked to write code that creates interfaces without getting the syntax we’re used to or the tooling we expect. Many a time this leads us to discard the language as silly and create interfaces using other means at our disposal. In this talk Chris Heilmann will show you how CSS evolved, what it can do for you and why it isn’t always needed to have control over what you do but instead allow users to get more flexible interfaces and browsers to do optimisations for you. &amp;#x200B; You don’t need to love or understand CSS, but it is time we stopped creating code that makes it hard for maintainers and CSS experts to work with what we do. Learn about things to avoid at all costs and how you can prepare your products for CSS that scales and allows for redesigns without full rewrites. &amp;#x200B; **Prerequisite attendee experience level**: advanced
\&gt; The project I want is to just be able to use most modern javascript techniques, to build a stand alone .js file that client sites will load and use. No react project, no node project/server I think setting up Webpack for this problem is actually pretty close to the React examples. Same for anything Gulp related that has to do with transpiling a framework. Even though you don't want to use React, following one of those resources could probably almost get you setup. The only difference is that you can remove some of the build steps (Gulp) or loaders (Webpack) for CSS, JSX, etc. Besides that, everything is the same.
no problemo amigo, this was precisely the kind of feedback I was expecting. 
Do you want me to host it on my website for direct access? Dw no advertisements or all that shit, just for people to directly try it out.
Interesting. Completely different though. We can't see what's going on on the `php` side of things. Not much, I would suspect. On the client side, it's all done in CSS. The fact that you can put *content* in a style sheet is one of the things that irk me : so very not orthogonal ;-) Now, yes, there is no `&lt;body&gt;` neither here nor there. Yes, HTML is *very* permissive. (or *sloppy*, some may say). ------------------------------------------------ Annex : said CSS. I can't spot what's Firefox-only : can you ? html { margin: 1em; } html::before { display:block; text-align: center; content: "This page has no body"; } html::after { display:block; text-align:center; content: ""; } body { background-color: #eee; color: #333; } body::before { display:block; text-align:center; font-weight:bold; padding:2em; madgin:2em; line-height:5rem; content: "Who needs HTML anyway ?"; background-image:url(/img/no-html.png); background-repeat:no-repeat; background-position: center top; background-size: 5em; } body::after { display:block; text-align:center; content: "Check the source of this page (CTRL+U)"; } 
actually the Firefox-only "feature" isn't in the CSS, it's in the HTTP headers
Is it possible to step up the game and make the script predict your next word the more words you type? That will be interesting.
No doubt proxies are cool. But they expensive very quickly if you’re not careful :)
https://imgur.com/a/TdZbhfv 69% Predictions :^)
With ESLint you need to add your own rules, check these out: https://github.com/airbnb/javascript 
Right, so I got down-voted for explaining what I meant (though it was quite obvious) rather than making new claims. I can see this is yet another retarded sub where users vote based on their emotions or because they don't like what the person is saying overall rather than to mark “content that does not contribute to any discussion”. Feel free living in your bubble, I'm off.
(in a game loop)
GitHub is a company…
I swear by [https://standardjs.com/](https://standardjs.com/) these days. It's fucking great.
How is php related to javascript ?
mad lad
Don't forget about [Prettier](https://prettier.io/)
I can't be the only person who thinks "you're only making code harder to read by doing this!"?
Cool! 55% in my case after \~1,000 clicks . 
 it('should reject an exponential number, but doesn't', () =&gt; { expect(postalCodeValidator("12e34")).toBe(false); });
I agree 100% like I said I’m still working on what I was thinking of doing is saving the NUMBERS on a array and then using .indexOf() to see if the number has been used 
I will set it up on my test website once I clean up the code a bit
TS and many framework like NestJS do that already.
It could be probably libraries like \`jest\` which emulate DOM API so developers can test components "like in a browser" but without actual one to make tests super fast. &amp;#x200B; Basically when you write \`document.body.innerHTML = \` html parsing's happening and you get a DOM tree. The next step for this parser could be tree manipulation tools (like querySelectorAll and appendChild), I've already filed an issue for that 😊
youll have to remove/clear all the items in your current list (ul) before adding them again. var myNode = document.getElementById("list"); while (myNode.firstChild) { myNode.removeChild(myNode.firstChild); }
What has that got to do with Microsoft? They were separate companies at the time. The only way MS could have exerted the (presumed) desired level of control over Atom would have been to fork it.
I noticed this! Dealt with binary, but not exponents. Oops! Still enjoyed the read :)
well thats pretty great but i still need to add it to the list, but only once &amp;#x200B; you input name click button it adds it to the list you input other name it sort by alphabet and it adds to the list etc. and this doesnt seem to work for me it just writes out first input and second input is ignored i dunno if i wrote it correctly tho &amp;#x200B; `function myFunction() {` &amp;#x200B; `var node = document.createElement("li");` `var name = document.getElementById("meno").value` `var textnode = document.createTextNode(name);` `zoznam.push(name);` `zoznam.sort();` `for (var i = 0, ll = zoznam.length; i &lt; ll; i++) {` `var ul = document.getElementById("list")` `var li = document.createElement('li');` `var myNode = document.getElementById("list");` `while (myNode.firstChild) {` `myNode.removeChild(myNode.firstChild)` `}` `li.textContent = zoznam[i];` `ul.appendChild(li);` `}`
I thought they removed support for hta applications? 
Looks nice!
Hey there! I'd suggest to add code formatting, check out my PR: [https://github.com/MichalTomczak/moodiary/pull/1](https://github.com/MichalTomczak/moodiary/pull/1) &amp;#x200B; I don't advocate for prettier (at least officially) but I like it personally, so why not :-)
Did anyone else try zooming in to see if the [read time indicator](https://i.imgur.com/ONFysgD.png)'s arc length changed as you viewed less of the article?
Its rare to find a page you can't read on mobile these days. 
 &gt;&gt; validator('1e345') true
Nice write-up! And thanks for the sandboxes! This to me is one of the most exciting things to come up, for some reason it's completely under the radar for now. 
&gt;the old saying that porn drives humanity forward I've never heard that. I thought it's always been porn drives technology forward.
Ironically, I see it most often on webdev-centric sites.
Both
I had no problem reading it on my phone
I read it fine here. J5 2016 running Brave
It's not a framework, it's a tool that shows how that particular idea (DOM first, directives second) can be powerful. I really don't expect people rushing on this... i am using it with great pleasure, but who cares. Though I really do think it's important to experiment with alternatives. We really do need alternatives to current frameworks, simply because they started upon so many wrong assumptions and habits inherited from the time when web pages were only handled as pure strings, not DOM.
We you use prettier for style enforcement (standard would work too). Then we use ESLint for code smells and best practices.
That’s... not even close to what I said. Not sure where you got that
I read it fine on iOS safari...
Hi /u/picarica, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Flurgi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/greg8872, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thank you :)
Hi /u/Pudgima, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ed-r-2087, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/zach6t7, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/papapau, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/brianhscho, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ConfidentMushroom, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/iuvoai, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/magic_alf, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rob_0, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/bestinterviewques, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Is there a reason you didn't just use ts-loader or similar? There are differences between using TypeScript to transpile your sources, and using Babel to transpile them. I'd rather go with the official compiler (which ts-loader calls)
I mean... it's code golf. All sense of rationality goes away as soon as you start code golfing.
Great read. Had a good laugh at the distracted boyfriend meme! As some one who struggles with regular expressions i applaud you.
&gt; 2 spaces for indentation 
We're lazy.
You might be able to actually do this with Google Analytics. 
this is.. fun! thanks for sharing
As someone who reads the comments first, &gt;deaddove.jpg
I understand the policy, but the content itself is not low-effort. Before posting here, we went through all the standard steps for preparing a survey, including going through several revisions and pretesting. Also, like much of academic research, we are funded by the NSF. &amp;#x200B; Once we complete the survey, would the results be of interest to this community?
Based on your other comments, I generally agree with you that business logic shouldn't go in components; I believe that it should go in some external container not related to react (MobX, Redux, other solution). However, I still think hooks have a useful purpose, that is sharing logic between components. It's a similar use case that higher order components and render props have. For example, say multiple components need the position of the cursor. Create a useCursorPosition hook which uses useState, useEffect, etc. It's explicit where that data is coming from, unlike higher order components, and it doesn't add any unnecessary depth to your component tree, unlike render props. Yes, that solution would no longer be pure; however, somewhere in your application, those components need the cursor position. You could figure it out and store it outside of your view layer, but that seems like an odd solution considering that you'd probably store it in a similar manner to your business objects, which is a confusing mixing of concerns. Or, you could store it higher up in the react tree but at that point you'd have to drill it down using props and again you'd have to have side effects somehow for that
Yeah, and I created the NSF. See how easy it is to lie about that?
Umm, VSC is *not* inferior to Sublime Text. In many ways it's actually better than ST, in that it's *actually* maintained consistently unlike ST which gets updates once in a blue moon. And it has a stronger extension community and gets far more support. It even gets more support than Atom.
You're a dick.
Really nice article, but as others have mentioned, my first thought was "what about exponents!".
You mean ES2019.
This.
:-) With NSF awards, it can be verified easily: [https://www.nsf.gov/awardsearch/showAward?AWD\_ID=1747219](https://www.nsf.gov/awardsearch/showAward?AWD_ID=1747219&amp;HistoricalAwards=false) I am the PI and can verify through the email listed there. Also, to clarify NSF's involvement here. They are not endorsing our work, or any other research/dev that they fund, directly. They just considered the team and proposal worthy of their funding.
Thx for your reply :) TBH i've used this: for ( let i = 0; i &lt; 1000; ++i ) { const id = Math.random() + ""; [todomvc.data](https://todomvc.data)\[ id \] = { toggle: false, name: id } } And it take 5/10 to handle it (and its not 10 000), and the fact that i've add some transition when we switch for ALL|ACTIVE|COMPLETED then it's really buggy, but if i add a simple display none its quite okay. The application works at least for 2000 items without doing anything.. are we sure that this it's possible with any framework without auto-hidding overflow items? with a framework all the render functions everywhere will be called when i check something, only the DOM will not be impacted, but it's clearly not enough.. Also thousands items in a scroll area it's not good for the users, what they will do with it? So we would have to code a pagination etc. But if your app is complex enough, the todomvc component would be split into more components. And more and more a component has to be complex, more and more you have time to do it. This component took me two days to create it. It's looks well enough for what represent the component and time comsuming. And DOM recycling looks bad to me, necessary when you use framework maybe, but bad in a vanilla version. Because in vanilla we can keep everything in display none, and we don't need at all to be vigilant with it, because you will naturally do the minimum DOM change and logic call in your vanilla code. 
You should go ahead and try it. You'll learn a lot. 
&gt; It’s a problem when you have to build fast and extendable code base. Maybe you are right on this. In a situation where you have to ship websites for different clients then maybe having to just templating is very cool. But i was advocating vanilla only for a webapplications who could be considered as a software. Or the main website of the big companies like Netflix (why don't they recode from scratch their three pages for the chrome/firefox users? it would increase the FPS even more when we scroll everywhere)
Shit grammar, shit article
For future reference, you should've initially provided that information. As it was, you posted from a brand-new account and offered no credentials or other means of verification. You mentioned that you're a startup -- is that a _for-profit_ endeavor?
I... I like how you think. Simple solutions for a Coding Challenge just don't seem right - I always think that these challenges are meant to check how much you can bend the tech you chose without breaking it _and_ making it do what you want to :)
You seriously think that whenever someone links to something on their github that they want people to start using it? AND you think that YOU are the arbiter of the world not needing any more frameworks? That there's no chance someone out there has come up with a better way of doing things? I mean this in the nicest way possible, but ... the next time you get the itch to make a comment like the one you did at the start of this thread ... just don't. Because it's comments like your's that discourage people from getting in to software development in the first place, and encourage people in software development in to leaving it. OP did had an idea and implemented it. OP wanted to share that. So they did. If you don't have anything constructive to say regarding the code, then don't post. You know what I'm saying: If all you want to do is shoot other people down, then keep those thoughts private.
"These days" - it's been around 10 years or so... It's ruined by the whole "no semicolon" bullshit. The modern equivalent is prettier
My boss and I frequently compete with regex in our code. Check out [regexper](https://regexper.com/) it is very helpful even if you have been working with them for years. Here are a couple of not overly complicated expressions but fairly long, they're for matching DMS lat/lng coords. Put them in regexper and they go from WTF to AH HA! DMS.latitude - /^[\+-]?(([1-8]?\d)\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|90\D+0\D+0)\D+[NSns]?$/ DMS.longitude - /^[\+-]?([1-7]?\d{1,2}\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|180\D+0\D+0)\D+[EWew]?$/
&gt; I'm also getting fed up with these Electron applications due to their size It's freeware, nobody's forcing to use them. 
You get downvoted because you are talking crap.
It's a great article. Very clear picture of React's model. After reading though, I'm not exactly sure which part of it supports hooks as a concept. I'm totally on board with hooks from a lot of perspectives. They make it relatively easy to have to pull out and re-use "effect-y" behavior across a lot of components. I like them for the same reason I like react, it's great for teams, especially teams where you have a broad range of skillsets and experience levels. However, I think it's just a preference for me personally to a) maintain purity in the FP sense, and b) maintain separation of concerns. It's really difficult for me to get on board with mixing state, behavior, and rendering into one abstraction and calling it a day. To give you a better idea of the sort of thing I'm after, just including an example here using ramda and a redis-like in-memory state container. // some_button.js import {converge, pipe, applySpec, always, propEquals, concat, prop, __} from "ramda"; import {HINCRBY} from "state"; export default converge(React.createElement, [ button, applySpec({ color : ifElse( propEquals("active", true), always("red"), always("blue") ), onClick: pipe( prop("uuid"), HINCRBY(__, "count", 1) ) }), prop("count") ]); 
I thought we are complying with guidelines and didn't want to bother the admins unnecessarily. But thank you for following up and looking into this! It's pretty cool that not only are guidelines are enforced, but any complaints are actually considered. Yes, we are a for-profit entity. But we make no money out of this survey (we're not selling the results or anything like that) and we'll share the results back. More generally, our purpose, and the reason we're funded, is to move academic research from the lab/university to industry. Basically not let cool stuff rot in some journal, but figure out how it could be put to good use.
How odd. I'm using chrome too and it works for me https://prnt.sc/mv571j
I'm sorry the real world isn't the happy dreamland pony wonderplace you want it to be. But look, I've lead teams of junior devs. I currently teach an intro to web dev class. I also currently mentor new learners. There's a certain stage in the new learning process where you are able to re-arrange things in a way that makes sense, when you couldn't before, and that "aha moment' naturally leads new devs to thinking they've discovered the secret sauce to long-standing problem X. I've seen it many times, and there's nothing wrong with it, except that the new dev will lose a lot of time on their new jQuery 2.0 (or whatever) before they realize the only reason it seems so awesome is because it makes sense to them. So, I will happily say as much, and if a new dev can't handle a single reality-based comment on Reddit just because it's not positive enough then they're a special snowflake posting in the wrong place.
That's a great idea, thanks! I'll give it a try.
Not in that comment.
I had it backwards, imgur blocks codepen. https://mobile.twitter.com/codepen/status/662641042647326720
20 - 1 Indexes start at 0, so you really want character[19]. 
You can do something like : \`sentence.indexOf('k')\` this is going to return the first occurrence, you can use \`sentence.lastIndexOf('k')\` for the last index of the character.
Oh, you don't say! So if it's freeware, no one is allowed to criticise it in any way, right? How retarded are you?
 const logNth = (sentence, n) =&gt; { const lastDigit = (n + 1).toString().slice(-1); const ordinal = {1: 'st', 2: 'nd', 3: 'rd'}[lastDigit] || 'th'; console.log(`The ${n + 1}${ordinal} character in this sentence is ${sentence[n]}.`); } logNth(`I'm going to the park`, 20)
And I'm glad the world isn't filled with grumpy old farts like you (and I say that knowing there's a decent chance we're the same age). I'm glad the developer world isn't filled people who seem to think that literally every open source project needs to be leading toward something greater or needs to be amazing for it to be worthwhile or "meaningful." I don't care if OP put out they're own personal take on FizzBuzz or jQuery or what they think is a more efficient garbage collection strategy for v8. They're excited about software development and want to share what they did with the world. GitHub has an Issues system. If you see issues with the actual source code, file an issue. If you don't care about what they've written, or you don't want to use it, then don't use it. But crapping on new developers excitement just pushes away developers. And telling developers to keep their code to themselves because it isn't "meaningful" is antithetical to OSS.
I use to pride myself on being able to find convoluted imperative solutions to problems that should be solved with regexes because I hated/didn't understand regexes. Then one day regexes just clicked, and I started using them everywhere. Some days I wonder what poor soul has to deal with those nested loops I left behind.
The coding challenge itself seems strange. Aside from the binary/hex gotchas, it's not even a difficult/interesting problem unless you specify "no regexes" (or you're presenting it to regex beginners).
IIRC, npm doesn't hoist dependencies if a different version is already at the top level of node_modules. Check that a) the "redundant" dependency has a different version from the one at `node_modules/[the package]` and b) that it's not a [symlink](https://en.wikipedia.org/wiki/Symbolic_link)
Lol, glad you liked it! There's a object in the code at the top called "extrusion" if you edit the numbers in that it will change how the effect is calculated. The effect is based on the HSV color values in each pixel. &amp;#x200B; I've gone ahead and re-uploaded the image to codepen in order for it to work. Imgur blocks codepen so that we don't use them to host our assets lol. [https://codepen.io/darrylhuffman/pen/gEWJgK](https://codepen.io/darrylhuffman/pen/gEWJgK)
Very cool visualization!
That can be accomplished with LSTM neural networks (assuming structured text). However, it's a lot heavier computationally, and it requires a fair bit of training to work. But that's basically what we use in smartphones these days. If you are interested in the inner workings of text prediction, I highly recommend taking a machine learning course on coursera or some other mooc platform. Most of them include exercises for predictive typing. Also I recommend taking a look at individual tutorials (google: rnn predictive typing tutorial). It's not difficult to reproduce them if you are somewhat familiar with Python (although getting used to ML frameworks takes some effort). Please be warned: machine learning is highly addictive and time consuming. :)
RUN! You're in danger! Google has been looking for a source of True Randomness for a while, and now they are going to capture you and make you a True Random Number Generator. You do not want that!
I lost it at the !!
Noticed it also, but hey, there's no flaws in a code you write test by yourself ;)
I remember my coworker going full scale regex to convert a pascal format (LFM) to JSON. Took him a day. Then noticed a function solved that already. 
What version of npm are you using? They changed this behaviour a while ago, an npm update should give you a flatter and less redundant node_modules folder structure
i mean it's not hoist if exact version is locate in another package dependency too! &amp;#x200B;
you can create a new react app using create-react-app! i think it uses latest version of npm ! isn't it?
 v=c=&gt;!!(c[4]&amp;&amp;+('1.'+c.slice(0,2)+'e'+c.slice(-3))&amp;&amp;['',...' -_'].includes(c.slice(2,-3))) Adding a `e` after the `c.slice(0,2)` would solve it
It will still use your local version of npm
Go to your terminal/command line and type `npm -v`. If you're on latest Node LTS, NPM version should be at 6.4.1
&gt;Comment deleted by user It will still use your local (global) version of npm. Do an `npm -v` in your terminal to see what version you're using. `npm install -g npm@latest` to update npm globally.
Did you check if these exact same versions are symlinked? If you use VSCode or MacOS Finder to browse, and you can see a little arrow on the corner of the folder icon, it means it's symlinked to a different location (as opposed to being a copy)
You seem to enjoy having endless arguments with strangers on the internests; I hope you are happy with getting all the attention you are obviously craving. I suggest taking a long, hard look at yourself.
Why do people put in the time to make this trash?
Try putting `defer` in your script tag: `&lt;script src="myscript.js" defer&gt;&lt;/script&gt;`
Different people can have different opinions, and you and I clearly disagree. But where I hope we can agree is that if OP stops coding because a single person on Reddit said they didn't have The Solution, then OP shouldn't be coding at all.
And you seem to be moaning about someone ‘stealing content’ a lot, so perhaps you should first follow your own advice and then lecture others. Suggesting my criticism is invalid because the product is free is a silly pseudo-argument and by attacking me personally rather than the validity of what I say is infantile and pathetic. If you read a bit more carefully, you'd realise few of my original comments are deliberately inflammatory and the fact that I respond to the people who start attacking me because our opinions differ is the whole point of an internet forum. I write something, someone responds, then I respond, etc. If you still don't get the concept, I could perhaps draw it for you…
Here’s my secret. One time I recorded myself trying to play drums to a song. When I heard it back there will be no semblance of order or beat. That’s what I did I pretended the buttons were drums while the song Bad Romance was was being played in Carl’s Jr.
Hi /u/jiaoyin, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Ako_12, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/BolvangarBear, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/magic_alf, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Who _are_ these people??
Shoemaker's son always goes barefoot
But now it should reject `"12-34"` but doesn't :)
But now I wanna kill myself ahah
wow! regexper is amazing, ill definitely bookmark that one.
Well, as has already been commented, this is all done for fun, and the article is still ok. But I think there should be two real and practical points we should take away from it. First that, sure, it might be _fun_ to do it "the complicated way" but it generally turns out a much worse solution. Also the devil is usually in the details and if you make it complicated, then you're bound to find a lot more problems with those details. The second point is that writing a complete specification for a problem based in examples and counterexamples is generally hard.
Great story, and very good at illustrating a number of JavaScript number and operator features.
I would rather write the most simple code possible(regex) than winning a contest. 
 I just updated my project \[React-Formik-Ui\](https://github.com/KaiHotz/react-formik-ui) by integrating my \[intuitive international Phone Nr. input\](https://github.com/KaiHotz/React-PhoneNr-Input). Feel free to share, clone, fork, star etc.. Happy hacking :)
A blog that is ran by an AI that makes articles about machine learning and BlockChain &amp;#x200B;
Haha. Thanks for the reply. That's a wonderful idea!
You need to do one of two things: 1: execute the last two lines of code after the close of the body tag 2: execute the last two lines of code inside a trigger that waits until the page content is fully loaded To do the second you put your two lines of code inside one of these: document.addEventListener("DOMContentLoaded", function(event) { doFunction(); completion(); }); This will wait until the DOM has rendered all elements before executing code.
This script sets the background image CSS property, so the javascript is working properly, but this is only one CSS setting for the background property. You need to set the background repeat, background size and background position for it to display properly.
3d in javascript is pretty hot right now
\&gt; These should not be defined in javascript but should be set either by your style sheet or in a style tag. Ehh, there's nothing wrong with setting these values in JavaScript 😛 all choices have their pros and cons, depends on what you're trying to do.
My favorite part of this is even though the link has no clear anchor within it, once the page loads my browser jumps down to about the 80% mark of the article.
Nice man! Fuck reg exps
What do you need help with, creating chart.js datasets? Exporting data from django? I think you might be in over your head on this
All static settings should be defined in CSS with only dynamic changes defined with javascript, this is best practices.
can you tell me about the libraries that I could use?
I understand what you want to do but this isn't the way to go about it. If you want consistency with your buttons, don't use html buttons, make a div and style it the way you want in CSS and define a :hover pseudoclass for hover state and :active pseudoclass for the down state. Browsers will fight you every step of the way if you try and make consistent HTML controls across browsers.
https://threejs.org/
also jQuery should simplify things.. a lot
What about making a VR campus tour. https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API https://aframe.io/
sure if you want to add 250k to your load size for no reason
true dat.
This is a weird dychotomy, versus? They go together like chocolate and peanut butter, the people insisting on only one or the other are weird as fuck
I'm reading different resources online and I just don't understand the language being used, but if there's no simpler way to do it, it would be amazing if it could work such as: &amp;#x200B; \&gt;search page for .example.com \&gt;when finding .example.com cope the entire unique piece of text i.e goodbye.example.com \&gt;term this ID1 \&gt;Open ID1 + /123
Hey Guys, I work a lot with content management systems where the templates are still rendered on the server side. Especially with this system it is nearly impossible to use frameworks like Angular or React. So I've thought about it a lot and developed a TypeScript framework for those purposes (yes I know, Yet Another Framework Syndrome ). I was heavily inspired by concepts already found at angular (eg components) which I adapted for the application I described. Maybe you can give me some feedback on iizuna (that's the name of the framework). Here is the link to the Repo: [https://github.com/iizunats/iizuna](https://github.com/iizunats/iizuna)
what are you trying to accomplish? The above script looks like it takes a list of bill murray images of different sizes as well as two images that I can't see and then using Math.random, sets one of those images as the html body element's background-image. &amp;#x200B; You could add some css to body to center and maintain the size of the image. &lt;style&gt; body { background-position: center; background-repeat: no-repeat; background-size: auto; } &lt;/style&gt; If you past that inside your `&lt;head&gt;//paste here &lt;/head&gt;` then that should style the images. As it is, the images will appear in whatever size they are. If you want to control the image size, instead of `background-size: auto;` use a width and height dimension. For example: `background-size: 800px 600px` will fix the background image size to 800x600. However, if the supplied image's aspect ratio is different, it will distort the image. &amp;#x200B; Check out the various properties you can adjust here: [https://www.w3schools.com/cssref/pr\_background-image.asp](https://www.w3schools.com/cssref/pr_background-image.asp)
Hi /u/Herogend, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/ZKRC, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dyerksjr, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
[not enough jquery!](https://i.imgur.com/pCS3Ffv.jpg)
I disagree with this. It might be best practice for a landing page that needs to load quickly, but this not true for a huge variety of JavaScript applications. Inline styles also used to be considered bad practice, but are now widely used in component based applications. Everything has to be weighed by its purpose &amp; intent.
Inline CSS is bad folks
Just because lots of people are doing something bad doesn't make it good
Hi Guys, Thank you for all your help so far. ... All I am try to do is recreate a slide deck via HTML. I am not a coder. I am a very good copy/paster. I am a retired Health and PE teacher trying to help a colleague. I would just like a code that would allow me to rotate through many images after I refresh the page. Very much like a Powerpoint Slide Presentation. Any help would be fantastic!!! Thanks in advance - Don 
&gt; I used the jQuery diet plugin and lost 10kg in a week Lmao
Are you saying if I style a div at the page/DOM level, that styling will then be inherited by a div with the same class inside of a shadow DOM? But button styling will not get inherited?
Hmm now this is a question I don't know, you should try it let us know what happens
The div in the shadow DOM did not inherit the styling defined at the page level. Leading me back to my original question.
Agreed. Perhaps some intro to the panel, or title / twitter handle subtext.
You can use CSS Custom Properties. They can pierce through the Shadow DOM.
Yeah, that's really bad for accessibility.
Isn't this bad for accessibility?
CSS has many options for accessibility that people don't use but should. CSS isn't bad for accessibility, people are using CSS wrong.
How did you learn?
This was painful to read 
Have you entertained the idea of using a slot for the buttons and including them as slotted light DOM elements?
Hi /u/SuperSans, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Use this library to create an object oriented 3D drawing application. The construction world is way behind the times and is just starting to move to the cloud. Our current customers are BEGGING us to add a 3D detailing app to our web-based weld tracking software. Web based CAD for construction would be a good market to get into. Check [this](https://kitchenplanner.ikea.com/us/UI/Pages/VPUI.htm?_ga=2.62987567.1035294195.1552091990-1907042362.1552091990&amp;_gac=1.79930725.1552091990.CjwKCAiAwojkBRBbEiwAeRcJZAoA1WasAH1-HJl_3wBtGNJBnoLE9kfqO6UUosTKNxhGb6eUK4LcbBoCayEQAvD_BwE) out for a simple example that you can access without a login.
There is some new ::part and ::theme draft stuff: https://meowni.ca/posts/part-theme-explainer/ ::part seems to work in Chrome, but not in Firefox. Custom properties (aka CSS variables) work and slotted stuff gets the global CSS rules applied. /deep/ and ::shadow were removed a while ago.
Fair enough! I'll come back when I have more in-depth stuff.
A bit both, im having trouble with both. Dont know how to filter and import this django data to chart js. I cant have one simple array of numbers since every user would have multiple that they can create and add and delete values from
Django is a python framework, so what you're talking about is really: * User loads chart * Chart makes (AJAX?) request for chart data to handler * Handler queries user data in Django (from database? no idea how you are storing this) * format query response into object * serialize object into JSON response, output response as plain text * Ingest JSON response into chart
Thanks for your reply! I tried to use the second method you wrote here but it seems like it's not working. Or better it's working without errors but after opening the photo it doesn't click on the element. I think that "classepost" and "aprifoto" functions has to be executed first because they search for a certain element on the page and click on it. When the click has been done, the website opens a page containing the photo we need. After the page containing the photo is loaded and only after this, we can execute "getElement" and "doFunction" functions, because they search for an element that is not available before. Consider that I'm not working on Javascript and HTML files, but I'm developing an iOS Shortcut using Commands app. Practically what my shortcut does is: you write a list of text lines in a textfield, each of these lines are combined with a pre-inserted URL, opens the result of this combination in Safari, and at the end injects javascript into the just opened web page.
Doesn't this go against the very idea of a stream?
That's gonna be the next thing I try. Thanks!
What's so special about this? 
Many people learning JS use libraries because it is easier and more practical to use someone else's written/tested code than to tackle those particular problems yourself. I say go for it. You can make your own decisions about whether or not you want another dependency in your project: the trade-offs are usually dependencies as another potential point of failure, introducing another thing that other contributors will have to learn, and possibly licensing issues. In practice, I use libraries to do things quickly and write my own solution when my needs aren't met or if I have different goals than the library. It's an excellent learning opportunity to read open source code and try to develop your own alternatives or contribute back to the project.
I think it's fine to use libraries, even if you might not know how they fully work. But if you have the time, it's a great way to challenge yourself and improve. You can definitely still write good, clean code even if you don't necessarily know how everything clicks. &amp;#x200B; IMO being able to read and understand code is an unbelievably useful skill that can really only be acquired through practice and work. I believe this applies to programming in general and not just Javascript. &amp;#x200B; I find it kinda fun, and it has definitely improved my understanding of programming in general. It's satisfying to know how all the pieces fit together. 
1.x to 2 notwithstanding, they usually provide a straightforward pathway to update to the next version, which can be found here: https://update.angular.io/
It gets updates for a year after it's released? It's also not _that_ much work to go from version to version.
They are requiring algorithms for a front end position 
It's good that they provide the upgrade path, but still, it's a constant never ending rewrite. What is the reason behind not getting to a reasonable long term stability? I mean, they are not on the mission of finding the cure for cancer, what is the urge of continuous breaking changes?
LTS is 2 years, but since breaking changes happen every 6 months, the work accumulated anyway. So if you do not upgrade for 2 years, it will be 'not that much work' x 4, which could be a lot of work.
Ah okay, I thought you linked a job offer which didn't require that shit
The opposite is getting stuck with bad design choices because you don't wanna upset the proles. I won't touch angular but I kind of admire their attitude
The best pattern is to switch to vue. 
Saying it's a rewrite is an exaggeration. I recently migrated a medium-sized enterprise codebase from Angular 5 to Angular 7 and it took less than an hour.
How many lines of code?
The goal would be to maintain as you build not offload everything until EOL. If your company doesn't have a time set aside for general maintenance then that's your problem. (SRE)
I'm going to assume you're concern trolling because you're not getting the answer you want to hear. Migration from version to version of Angular isn't rocket science. The team does a great job of putting the guidelines together to do so, and with each major version the update tooling gets better. For example, there were so few breaking changes between 6 and 7 that several teams could update in a matter of minutes: https://medium.com/@jeroenouw/upgrade-to-angular-7-beta-within-10-minutes-c14fc380edd
&gt; I'm going to assume you're concern trolling because you're not getting the answer you want to hear. Your assumption is wrong. I want to know the enterprise app that you upgraded from Angular 5 to 7 in 1 hour contained how many lines of code. 
Approximately 45,000.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
I have been loving Vue... it's making me pretty upset because I've been brushing up on my React for the job market and the development experience is atrocious. State management is such a nightmare in React, there's so many tools and patterns to help but it just makes it so complex. Suddenly I'm installing Redux, Router, and all these other tools when Vue just seems to work with zero headache.
Are you looking?
Having been around since angularJs and having converted complex apps to angular from angularJs I would say this is a non issue. Their upgrades are super easy. Every major version upgrade &gt;2 have taken at most an hour. The benefit of those upgrades are usually huge (like http client or rxJs update).
I use Angular exclusively and have no idea what you're talking about. 
Would the original reject 12-34? I don’t think it would but I’m not sure.
I've been developing an Angular project since RC up to version 7 and there were never big problems with updates.
I wish it didn't require that, is a good company, but let's be honest, a frontend dev doesn't need to know binary trees and that kind of algos.
Yes, took off these past couple months, and I've started doing some personal projects and am redoing my personal site to help get me ramped back up.
Well, compared to JSLint, standardjs is fairly "new", but then again, if its not made last week it's old news in this community :D ...but that's why it's so nice that we're all different. I think semicolons are fugly and unnecessary Prettier never worked for me personally
It's only 85kb. I'm not saying use it for everything, but that's not very big.
You don't have to update code. The important thing is that it does what it is supposed to and can be maintained. If you like a feature in an incompatible update, well then you got decisions to make
I know it as "the cobbler's children wear no shoes," and I find myself saying it all the time in this field.
Where are you located and what’s your hourly rate?
example? I did find it.
Project Page (?): https://github.com/iamskok/react-resume *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I recently made a simple React resume app to start applying for jobs - https://iamskok.github.io/react-resume/ If you are looking for a job too, you should fork this repo https://github.com/iamskok/react-resume, edit \`resume.json\` and share your personal resume built with React.js. If you are not looking for a job, then help me get one by sharing this resume with your dev team. Cheers!
Like all the other people here, you're making a big deal about something that is just not a big deal. The angular team provides very good documentation and tools for any breaking changes, it really doesn't take much work. The alternative is to let design mistakes build up overtime, and while you can debate which methodology is better, I've not found the angular approach to be a problem. 
Hello, license-bot. Thank you for the tip but it's not a project, just a proposal put on GitHub :-)
Reminds me of a talk that [Dan Abramov](https://twitter.com/dan_abramov) gave some time ago, about reconciliation scheduler in React. That's interesting to watch how browsers evolve, nobody thought we would run into this problems back then :-)
In my experience you can solve a problem with regex but now you have a new problem...the next dev who needs to maintain or enhance that regex.
I've been using angular since 1.x. After I made my first 2.x app in the release candidate era... every upgrade from 2+ has been smooth and simple. The worst was an RC to 7, which was basically just a full rewrite. Upgrading is often as simple as whatever command they built into `ng-cli` that upgrades all your packages. Just because they _do_ bump major, doesn't mean they're necessarily breaking backwards compat. It just means they _can_, but they will still work to avoid doing so if possible.
Why even bother replying with something like that? Just roll your eyes and move on. Even if you were 100% right, that doesn’t mean that some people aren’t on a project that has already committed to react and they can theoretically benefit from such posts. This just introduces unnecessary negativity into this subreddit. 
I think at some point I spent a couple hours doing some online regex challenges. I've also used them quite a bit writing random scripts/apps. At one point I got the idea to build a regex builder library to make writing regexes more readable, but by the time I wrote the library I didn't really need it to read comfortably regexes, so I never finished/released/used it.
Mobx is pretty great as an alternative to Redux. Way less boilerplate 
You have a good idea, but your design/visual feature-set is not appropriate for an engineer with 6 year of front-end dev experience 
I like this idea and am going to steal it
&gt;but your design/visual feature-set is not appropriate for an engineer with 6 year of front-end dev experience There's no point in telling someone something they built sucks unless you actually provide some sort of value added feedback. Maybe make some suggestions on how the guy can improve instead of just bashing his work.
Sorry about that. Thanks for letting me know :)
nooop, it is just a sugar
if ( typeof arg2 === 'function') { ... }
Yes that is initially what I did but as I said part of the code inside function scope only works when nothing is passed which makes arg2 to become “undefined” and undefined is not typeof function so it can never pass. Interestingly enough I’ve been asked to block undefined as entry as well. So only functions are allowed to pass.
if (arg2 &amp;&amp; typeof arg2 === 'function') { throw Error('Expected function'); }
You can start by checking for null. An argument that isn't passed will default to null.
`arguments.length === 1` will work for you. ``` function test() { console.log(arguments.length); } ``` If you call `test(1, 2, 3)`, it will print `3`.
I like that your relative url changes to symbols. Neat trick
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
The modern world of frontend development has been predicted by Lewis Carroll more than 150 years ago: "My dear, here we must run as fast as we can, just to stay in place. And if you wish to go anywhere you must run twice as fast as that." (Alice in Wonderland). So I'd say leaving modern complex frontend code untouched for six month is a bit dangerous as it builds technical debt that's gonna be hard to pay off. 
Sorry but how do you manage app state in vue? Don’t you have to use tools like vuex etc?
`undefined` is the default
No, you’re absolutely right. That’s kinda the point I was trying to make. I don’t know why I used the word “some” in my comment above. I was basically conceding that data (along with any other abstract concept, is not physical, and is therefore not “3-dimensional” in the same sense as a physical object. But data structures can do a great job of *describing* physical structures and the rules that govern their behavior. All of that should be obvious to anyone with knowledge of computers (or just basic geometry), but it seemed like that was precisely the concept that was missed by the person I was replying to, so I brought it up...
This is great for code as art. If you ever tried to use this in production code, it should be taken out back and shot.
You can give the second argument a default value. function test(arg1, arg2 = undefined) Then arg2 actually exists, and will throw the correct error when you check typeof arg2
Over 100, it got 56% and I used a coinflip! Then I tried to do random mashing and it only got 49%
Front-end devs don't have to be good designers, leave that to the real designers. However, a frontend dev should know that color contrast for text is important.
This works but it doesn't make it optional! it will throw if it's not passed! 
so I should steal his code and licensed it as fast as possible right? ^^/s
00000 is not a postcode, should not have tried to fix that
!!str.match(/^\d\d[ _-]?\d{3}$/) I can't imagine anyone thinking this is better or easier without regex. Kids these days (grumble, grumble)
It takes all of a weekend to master regex, maybe stop hiring drama majors and you'll be all right.
This is a perfect example of what not to do with regex. Just parse the numbers and validate them with what we know about coordinate values. Use common sense, in other words.
Nop
Without a lisence you assume Copyrighted
Just escape em
Good job creating a resume! I have some feedback: - The mobile version is too minimal, the functionality of the desktop version is lost. - I miss some personality, either through design or with some anecdotal text. Basicly: Who are you? - I personally don't mind the colors but you might want to highlight or bolden some keywords. All in all a good start but it needs some more work to be a full resume.
https://choosealicense.com/no-permission/
May be a good idea to list the dependencies in the readme
add screenshots also
Hi /u/kinghoria, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Thank you all, u/Todoce I used your solution it works great. Apologies I posted this on the wrong subreddit.
I will not use it because, for what? In all projects I use console log only for debugging and one-two consoles dobt create mess.
Thanks for sharing your project. A couple of suggestions I hope you would consider: - Tests are helpful - moment library is fairly large. There are other smaller alternatives for date display (date-fns, day.js just to name a few). Since you are building a library that others will I use I encourage you to consider the size of overall code. This is less critical for server applications, but for client-side size becomes important. - I think adding something like default constant would make code more readable - Traditionally applications specify log level and everything more valuable after that level gets logged. And everything less valuable - not. Adhering to standards would definitely help your library to be more appealing. - You redefine enhanceLevel constant every time your entry function is called. It doesn’t change can be moved to module level. - I would encourage you to not overwrite existing console object. Returning an object that has the same interface as console would make your code more robust and secure
This is just not useful. Why shouldn't I use Bunyan or Morgan for this? Please stop developing different libraries doing the same things.
Appreciated for your suggestions. :)
\*double palm face...
good bot
Thank you, smokinpurple, for voting on license-bot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
I wrote [manchego](https://github.com/luketeaford/manchego) a CLI tool that is designed for simplicity. It will be 1.0.0 once I have built an entire real world project with it and added community guidelines.
Did that work out for you?
His question is very much valid. In fact it's one of the most obvious questions to ask.
Give a man a fish, and you feed him for a day. Teach a man to fish, and you feed him for a lifetime.
Your reply is retarded. How do we ever hope to advance without innovation and people trying to do new things...
Project Page (?): https://github.com/oguzeroglu/ROYGBIV *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I’m so happy you wrote this review. I have tried going through this course several times but it felt like I was banging my head on the wall the entire time. I just wanted us to finish already. I thought I was crazy but now I know I’m not alone. 
On Window's machines, create a simple Javascript repl that leverages the .Net framework. Save this text to a file DotNetRepl.js Open a .Net Framework Command prompt (usually in C:\\Windows\\[Microsoft.NET](https://Microsoft.NET)\\Framework\\v4.0.30319&gt;) &amp;#x200B; `//compile with jsc.exe /out:DotNetRepl.exe DotNetRepl.js` `//let's add a few useful namespaces` `import System;` `import` [`System.IO`](https://System.IO)`;` `import` [`System.Net`](https://System.Net)`;` `import System.Web;` `import` [`System.Data`](https://System.Data)`;` `import System.Xml;` `import System.Windows.Forms;` &amp;#x200B; `//create a global object/propertybag` `var $={};` &amp;#x200B; `while(true) {` `Console.Write('.Net&gt;');` `try {` `Console.WriteLine(eval(Console.ReadLine()));` `}` `catch(e) {` `Console.WriteLine(e);` `}` `}` &amp;#x200B; &amp;#x200B;
I appreciate that you have put a lot of thought into helping me. I will definitely check those tutorials out. Atm i'm still learning javascript. So i'm trying to get better at a languages basics first then i will go to machine learning, since machine learning is some next level shit.
[https://pixelbrawl.com](https://pixelbrawl.com/) &amp;#x200B; I spent my free time for the past week creating a passive 'game' where you basically just watch a grid of pixels duke it out. Matches start with the board split 50/50 between the red team and the blue team, the two colours contend to dominate the entire board. It can be pretty addicting to watch the matches unfold. The state of the match is managed server side so you spectate the same match as the rest of the users. You can climb the leaderboard by correctly predicting which team will win, predictions can be made during the intermission between battles. Technology used:- VueJS with firebase for user authentication and storing leaderboard \- NodeJS express app with [socket.io](https://socket.io/) to manage and broadcast the state of the match
Yeah go ahead and learn how to enhance this over the weekend for some custom business rule. http://ex-parrot.com/~pdw/Mail-RFC822-Address.html
Now that’s simple, to the point and dope
Just a tip, insert a blank line before your first bullet point so it will be formatted as a list, much easier to read!
Protip for console.log: `console.log("\n".repeat(8))` will add 8 new lines, handy if you've got a lot of different logs and need to create clear separation of it in a terminal console (e.g. node)
Since it's a class, you only `new` it when you want to create a new instance. In this example, you want to create several variable which all create a new instance; `const slider1 = new Slider()` `const slider2 = new Slider()` `slider1` and `slider2` are then independent instances of the `Slider` class.
Looks cool! Congrats
Sugar over what specific functionality? The idea of a stream is to allow data to be fed in dynamically (in the sense of streaming video for example), and to allow data processing to happen without waiting or caring for the entire response body. From the way it's phrased, this waits until the entire stream is available and then resolves? Could you clarify if this is what it does, and if not, exactly what it does do.
Hi ChronSyn! Exactly :) That's why I'm trying to take the leap now. Just hard to get your head around some of it. &amp;#x200B; I tried doing what you said but it won't "duplicate it" without then copying the html again. Then I will want to change the images of the second one so I'm assuming I need to pass in loads of template variables and then feed in stuff when I call a second one? How would that be done for image srcs &amp; query selectors? I'm assuming I'd change this: &amp;#x200B; `constructor() {` `this.el = document.querySelector('.js-slider')` `this.images = [...this.el.querySelectorAll('.js-slide__image')]` `this.contents = [...this.el.querySelectorAll('.js-slide__content')]` &amp;#x200B; to this: &amp;#x200B; `constructor(sliderVariable, slideImagesVariable, slideContentVariable) {` `this.el = document.querySelector('sliderVariable')` `this.images = [...this.el.querySelectorAll(slideImagesVariable)]` `this.contents = [...this.el.querySelectorAll(slideContentVariable)]` &amp;#x200B; &amp; so on and so fourth? Is that right? &amp; then I have to duplicate the html? Am I right in thinking that React and other frameworks are the only way you can "bake" the html/css in with the object? &amp;#x200B; Cheers, Smallio &amp;#x200B;
A few things about the site itself: 1. I would consider restyling the items under `Skill Set` so that they don't look like buttons. Right now, they have the same styling as the buttons, and I was expecting them to be clickable. 2. I can't open `Skills`, `Education`, or `Contact` in a new tab, and I can't copy those links in to a new window and navigate to the pages. I just get a 404. 3. You call out `Rehabs.com` but it's not a link. A few things about the resume (both site and PDF): 1. What kind of features did you add you Rehabs.com? 2. What does `improved client's workflow` mean? How did your use of those tools improve their workflow? 3. "improved conversions by 23%" This is an awesome thing to point out. 4. Your PDF calls out `Documentation` as a subset of `CSS` but I'd break that out in to its own skill. Docs are never a subset of some other skill; they are a top level skill all their own. Also, I'd add `Documentation` under the site's `Skill Set` page, too. 5. `macOS`, not `Mac OS`
Ah, yeah, I should have mentioned that you'll need to duplicate the HTML again. You can imagine it similarly to HTML. You can have `&lt;div&gt;some content&lt;/div&gt;` and `&lt;div&gt;some more content&lt;/div&gt;`, and each has different content. Removing 1 div stops it from displaying. Imagine now, that each of those `&lt;div&gt;`s is a class instance (something created with `new`). Add more of them, and you have more instances.
Oh wow that makes perfect sense I was wayyyyyyy overcomplicating things lol. So simple. Thank you for explaining that to me, was a fairly stupid question now I'm doing it :P
It's more efficient to improve what's already there rather then reinvent the wheel every single time. That's all I'm saying.
Amazing article for you the observers!
Hmm maybe I take that back. I've done that yet I'd need to pass in the html names for the new slider. Tried passing through both the constructor and the object &amp; it does not like it. How on earth is this done properly?
I'm assuming I have to turn the slider class into a function and THEN pass stuff through? Super confused by that part.
 several approaches to consider: 1. use tomcat, or jetty, or some sort of java based app container. 1.a. use formal servlets, with classes and stuff to exchange info with the client. 1.b. hack something together in jsp. 1.c. do the whole spring boot thing 1.d. ??? 2. Skip all the framework cruft and write a small java server that opens a server socket, and talks http to serve up static files and respond to client requests. Personally I think you will learn more with option 2, but in the java market you will probably find mostly 1.c. In any event your java needs to respond to http get requests for static files and would suggest that you make the application messages based on json on post. 
You say that you will be doing the server side in JavaScript. Is that a requirement? The best way to do this would be to create your server in java. There is no way to directly call Java from JavaScript. If you are going to use nodejs or something similar for the server, your only option to call java is through a command line interface. This would mean your solution is somewhat non cross platform because CLI calls to cmd or a terminal will be different. 
I probably won't be able to get back to trying things out until next week. I'll let you know, though!
I used to do something a little like this, but I found it was simpler and easier to use custom events. Custom events make it nicer because they can be dispatched from whatever target and contain a detail object of arbitrary complexity. You can do all the usual event things like bubbling or adding a 'once' listener.
Hi /u/peepi2011, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/smalliobtc, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Actually I agree with you. This React stuff is overcomplicated horseshit. But what can you expect when Facebook PHP developers try improving the front end. We had it good back in 2014 before React appeared. Code cleanly separated into separate HTML, CSS and JS files. Now React mangles it all into a single JS file. Forget designers being able to come along later and tweak the layout or CSS. Now we have to think in reducers and other confusing terminology. Bah. Makes me want to go to a pure backend role and hope for it to all blow over and people revert to vanilla JS.
Hi /u/Sambooi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/kabellay, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rossisdead, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/smalliobtc, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/arish_shah, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/angeloghisi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
How does a question specifically related to the Shadow DOM, a specifically javascript feature, not directly relate to javascript?
Sorry, hit the wrong button. Let me try again.
Hi /u/rossisdead, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
If you are interested in a very basic mathematical (coding-free) intro into neural nets I recommend [3blue1brown](https://www.youtube.com/watch?v=aircAruvnKk&amp;t=6s). He talks about the simplest neural nets only, but after that you'll be able to understand higher level videos about LSTM and other architectures.
Woah it has so many views, and I never saw it before. Thank you so much. I will watch it now and see where i go from there. Hopefully it isn't too complicated for me. I watched a playlist made by sentdex, but i stopped at like 3 videos because it was too complicated.
It happens sometimes even with random inputs. The probability of guessing &gt;=57% correct is ~3% at 200 inputs according to https://www.wolframalpha.com/input/?i=P(x%3E%3D114),+x~B(200,+0.5)
This is cool, but most browsers (including Chrome) already support adding timestamps to all console logs along with log level filtering and color coding (not customisable though). You can enable all these in Dev tools settings. Just an FYI for those who don't want to add an extra dependency but need this temporarily for debugging!
&gt; I would encourage you to not overwrite existing console object. Completely agree. I am firmly against changing the behavior of built-in stuff.
This is basic and simple so it won't cause performance issues which is great, and you have inspired me as well. Great job.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Very cool!
Make something for yourself. for no other reason than you want to.
it sounds like you're just intimidated by learning a new technology and would rather trash it without understanding the problems it solves. It's an uncomfortable yet unavoidable feeling to learn something new 
I'm currently working on a game engine over at [https://github.com/codymikol/game-kiln](https://github.com/codymikol/game-kiln) currently its in super early pre-alpha, but you can take a look at the example folder to get a basic idea of what I'm working at. The whole thing started as a 2d multiplayer online shooter game that I wrote with some coworkers for JS13K and you can check that out over here [https://linkthegame.herokuapp.com/](https://linkthegame.herokuapp.com/)
I ported [BLAS](https://github.com/R-js/blasjs) linear algebra numerical library to javascript, I fixed some issues and links in the documentation Part of [R](https://github.com/R-js) port to javascript 
As near as I can tell Bootcamps are hit or miss. They aren't cheap in time or money, but the good ones are an unbelievable investment. I went from an actor to an engineer and recouped my costs in less than a year. There are also plenty of free options out there. I got started originally with [Codecademy's JavaScript Intro](https://www.codecademy.com/learn/introduction-to-javascript), which will get you the basic syntax. After that [toy problems](https://www.codewars.com/) are fun way to stay sharp. Ultimately though, you want to get to the place where you can do what /u/sentientpunchingbag suggested and just build something you are excited about. If you are motivated to build it, then you will naturally look up what you need to know.
It is still happening in asynchronously way, doesn't block the main thread as I am using Promise, and It is only recommended for small sized data stream like reading a POST JSON body.
It is still happening in asynchronously way, doesn't block the main thread as I am using Promise, and It is only recommended for small sized data stream like reading a POST JSON body.
I don't agree with that sentiment at all. Just because someone lacks confidence in software development what they're doing doesn't mean they shouldn't continue writing code and learning. Your original comment was not constructive criticism. It was destructive criticism that serves no other purpose (as you have admitted) trying to discourage developers from experimentation. What I hope you will come to learn is that comments like the one you originally made serve no purpose other than to push people away from growing as software developers. And that comments like the one you made are, unfortunately, all too common in this industry. I hope that in learning that, you re-learn the advice "If you don't have anything nice to say, don't say anything at all." 
So, essentially, your example is the same as using any XHR or fetch implementation, but for stream outputs? A stream output won't have an `end` event triggered until all data is finished. At that point, there's very little point in using a stream when you could simply offload a fetch or XHR request to a promise and have all the benefits they bring (e.g. finished callback). It just seems like this is trying to do something that's not meant to be done because of a fundamental misunderstanding between async code, streams, and non-streams / fixed-size data responses.
Are there any performance benefits that your compiler has over the standard JITs like v8 (for unoptimizable code)
But books. I don't like online articles or tutorials since there's so many and 95% of them are bad. Books are usually good quality. I never tried codecademy or any of those sites but I haven't heard much complaints so they may be good.
&gt;I'm wondering if it's even possible to create a script to refactor some of the past components we've written. If so, how? Well what is the change?
Maybe you misread it. It will only throw if you pass something and it's not a function. Unless, with the first one, you pass a falsey value, which is why I included the other one with arguments.length, in case the value is also allowed to be falsey.
Inside LoopManager.js: `requestAnimationFrame(this.loop.bind(this))` Isn't this creating a new bound function per every frame? You can optimize it by putting `this.loop = this.loop.bind(this)` in constructor and then just pass `this.loop` to `requestAnimationFrame`
Oh look, the vue fanboys again. I think that's one of the most annoying factor about vue. Not the tool itself, but the fact that it produces quite a lot of toxic and rather ignorant 'developers'. Not sure why. And by all means, I do not try to conclude that all vue users are fanboys, far from it. But if you come across some fanatism in terms of js frameworks one can bet money and win on the long term that that person will be doing vue for the most part.
https://github.com/facebook/jscodeshift
Maybe. hope that helps
You didn't explain it well in your original post, but it sounds like maybe you want a noop function by default? function(arg1, arg2) { if (!arg2) { arg2 = function(){}; } else if (typeof arg2 !== 'function') { throw Error('Expected function'); } }
Please don't encourage this x.x So many difficult to trace code bases because of random 'emit' and 'on' in who knows where locations. I thought when ppl got on board with redux we were done with observables. I thought we were back to reasonable scoping.
I made a UI for [JSON Server](https://github.com/typicode/json-server) with Electron &amp;#x200B; [https://github.com/mackness/JSON-Server-UI](https://github.com/mackness/JSON-Server-UI)
&gt; The opposite is getting stuck with bad design choices That is my point: Why bad design to begin with? This is a framework designed by a large team of highly paid professionals in the richest software company in the world. Why would they keep getting the design wrong? The same thing could be applied to say, TeX by Donal Knuth, which has not been updated in many decades, yet it powers millions of typeset documents. Software does not _have to_ be as fluid as Javascript is today. But it feels like, being fluid is being seen as a point of quality in frontend engineering. Another example is Go (Golang), the code you wrote in Go years ago still compiles and runs fine today, it's just that now it runs faster! I know Angular is not a language, but it has a compiler which is comparable to Go in this sense.
why would you use this over Rxjs observables?
They don't follow semver so the version numbers are pretty meaningless. Chrome goes up a major version virtually every month it's not like it constantly breaks things.
this is awesome
This article was obviously meant as a learning exercise...
This is not the problem redux solves. One could make an app using redux which is just as hard to trace as random usage of observers.
Yeah, you're absolutely right. I do this in a few places and I actually have an issue out right now [https://github.com/codymikol/game-kiln/issues/10](https://github.com/codymikol/game-kiln/issues/10) that I believe this will solve as well :D thank you! I made an Issue over here: [https://github.com/codymikol/game-kiln/issues/25](https://github.com/codymikol/game-kiln/issues/25) and a PR over here: [https://github.com/codymikol/game-kiln/pull/26](https://github.com/codymikol/game-kiln/pull/26)
Been working on it for a little while, hopefully it all makes sense! &amp;#x200B; I want to stay away from you should do this, do that etc. And instead focus on collaboration, finding the right tools for the project, and maintaining intelligent, manageable code.
Got a tutorial for a newbie to understand further?
I do not programmatically login. The process I've had (and the only one I've seen) is to manually copy the cookie values from your browser of choice on ESPN.com
This helped me close [https://github.com/codymikol/game-kiln/issues/10](https://github.com/codymikol/game-kiln/issues/10) as well :D
Hey there! [License](https://github.com/nantaphop/enhance-console-log#license) says \[year\] and \[name\], it's better to have real ones, isn't it? :-)
Except native observers were removed from ES for a reason, that's why proxies exist. Use proxies when you feel the need to use observers.
Hi! We are Clay and Dzmitry, and we built https://www.dropconfig.com DropConfig is a version-control and hosting for configuration-files. Our goal was to liberate constants from the code and let them live their own separate lives. DropConfig does that and requires no new infrastructure and no new dependencies in your code. After working on many projects over the years, we noticed that every time we hand the project off, we reinvent a super-simple "back office" UI allowing users to change some aspects of application "on-the-fly". For example: - language-translation files - web-widgets settings (IDs, colors etc) - temporary banners ("down for maintenance", "new release" announcements) - CSS rules After talking to our friends we realized that other developers run into the same problem all the time. For them, and for ourselves, we built DropConfig DropConfig is for all cases where you have a JSON configuration file, which is updated more often than you are comfortable making app-releases. Think of it as something between Firebase and Github: immediate availability of Firebase yet change-audit and access-permissions of Github. Plus speed and reliability of CDN. 
Hey, that's an awesome project! Thanks for sharing! I get that it's pretty raw so far but what's goal you keep in mind for the future? Do you have a roadmap? Are you considering to have contributors or prefer to work by your own?
[https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent) So for example, you can just combine that with the way other DOM events work with \`addEventListener\` and so on. It will show up in the Event Listeners panel of the dev tools and everything.
That's pretty cool! 
Surely, if WASM has any applications whatsoever, it's for openBLAS.
 Hold the have stated it better myself. 
I don't know, what are you trying to do?
Why is this in /r/JavaScript? And what does it have to do with Chrome's dominance? There was an exploit, it was fixed and required a restart. I use FF exclusively but this is a bad example of Chrome's monopoly being an issue.
Yeah. A simple message system works well in most situations, unless you actually need replayability, or the observable pipeline.
Chrome is an application, not a framework.
Nice simple lib. You should specify that it can only be used in node environment, not in browser, because chalk doesn't work on client side.
That may have been a better way of wording it.
Hey! So if you're like me and still use class components here and there while **wishing** you could use the **useContext** hook from within them, I've made this NPM module to help with that. Here's a description: &gt;Accessing a React context from within a class component is often times very dull and annoying. This package simplifies the proccess by simply wrapping your component with a function defined as **withRouter(...)**, or wrapping your JSX Element Constructors (classes) inside another component defined as **&lt;WithRouter ... /&gt;**, while only having to pass the context as an argument or prop, respectively. The context will be sent as a prop defined as ***\_context*** **(e.g.** ***this.props.\_context***\*\*)\*\* - **keep in mind you need to have a context provider present somewhere within your application wrapping these elements**, it is also possible to pass a provider as an argument to ***withRouter*** or as a prop to ***&lt;WithRouter /&gt;***. &gt; &gt;You may also pass a context provider and save yourself some time spent wrapping your app or other components as well, but keep in mind that this will create a new scope for that context - which might be beneficial or detrimental depending on the scenario. Either way, I suggest taking a look at the code snippets more more information about this. [Here's the source code](https://github.com/rmolinamir/with-context-react/blob/master/src/index.tsx).
At the end of the course, he actually says most people don't finish the course. I felt like I accomplished something when he said that and it was nice to hear. I like him a lot and am floored by how knowledgable, well-prepared and meticulous his presentation is...it's just the particular approach wasn't the best way to teach all that stuff in my opinion. He could've broken it out differently and there was no need to continually destroyed code to rewrite it differently.
I've got a ~25k line Angular app that started in AngularJS and.. if I recall correctly we did 2, 4, 6, and 7. Other than JS to 2, each has taken like 1-3 hours. I just did 6 to 7 and it took a couple of hours because I accidentally was trying to use Ivy renderer. If it wasn't for that snafu it would've been under an hour. But there's always a snafu. Another example would be Http to HttpClient. We didn't have to switch that - we still have some code using Http - but we did switch (mostly) to HttpClient and that took more than a couple of hours and is due to upgrade churn. But this idea that by v1 or 2 something like Angular should be complete and stable just isn't realistic. Comparing Angular to TeX refutes your argument rather than support it. The complete context around TeX is simple compared to complete context around a browser based app, and TeX still took 10 years to become stable. It also wasn't built on a new language still under active development that transpiles into a not new language but still one very much under development because it's not 1978 anymore and billions of people started using it before the academics had time to refine it.
Instagram was made on RN and I dont like this app. Every time I see the same bugs like in Web and it no one fixes. Yoo should use RN if you know React and do not teach someth new right now and want to relasize simple idea.
It wasn’t built using React Native. It’s mostly native. But if it was built using RN this should be the biggest praise for it possible. Insta is arguably the most popular consumer app around. 
I've made a userscript that lifts results from MDN to the top on Google: https://gist.github.com/Tiramisu77/c7a5cffe5d59ad641a12638a788bc6bf
Right. That’s part of what the post covers
I would say that you would utilize this lib in your node server.
Nah. By that logic nothing would ever improve. JQuery was not the first library of its type. React was not the first view layer. Lodash was not the first utility library. 
Hm. Really. But as I see at least half app made with RN: [https://instagram-engineering.com/react-native-at-instagram-dd828a9a90c7](https://instagram-engineering.com/react-native-at-instagram-dd828a9a90c7)
It's 10 years old. It's not new. 
&gt; Comparing Angular to TeX refutes your argument rather than support it. My point was that the TeX author could also make it as fluid as a Javascript framework, if he chose to. Nothing would stop him to add features, refactor the code, or worse of all, the Javascript plague: try to improve TeX language because there is always that bunch of users that do not like your language. In a closer context, I can give you another example from the same company that created Angular: Closure Library. It powered largest Javascript projects in world like Gmail. Have a look at the Closure Library codebase, It feels a lot like TeX. It got stabalized since it was open sourced 10 years ago, and at that point it was only 4 years old or younger. This is all about the mentality of team and the community. In web frontend culture, if you have something stable, it means ancient and dead. So going with crap design to begin with is not a bad thing here, as it creates the need to throw your code away and come up with something new, making it all too fluid to build something stable. You mentioned Ivy. There is nothing new that Ivy offers, it reinvents everything that Google already had. They started Ivy in 2016 because their render engine sucks. [It is based on another a lot lesser known library by Google open sourced in 2015](https://github.com/google/incremental-dom). Incremental-dom library is well designed, up to the point, and guess what... stable. Look at the commits history. At the same time that Angular team was designing the render engine for Angular 2, another team in Google was designing incremental-dom. Now Angular team is throwing away the old render engine code and rewrite a new one based on idom. There is definitely this chance that maybe they're not the best software architects that Google can have. 
The libraries before React or jQuery probably didn't have all the features their successors have and those features could not be painlessly implemented. In those cases it makes sense to develop a new library, but it just doesn't make sense to reinvent the wheel for everything. It's just not a good practice, and I don't care how many downvotes this gets, it's still true, unless you all are hipsters and like doing things your own way (which is just stupid anyway). That, for example, is one of the reasons Microsoft is switching to Chromium for its Edge browser. Why should they maintain a rendering engine when there is a better alternative out there? It's stupid, and they thought so too.
Getting downvoted for speaking literal fact that's documented by the working group, love it
Look up image pixels. That should give you some insight. It’s a form of tracking.
Except that the image src urls point to digitalocean and linode, neither of which will give the developer any information (unless someone actually signs up using those links, of course.)
Have you found an alternative React course on Udemy that was better ? 
Probably referral links. The sites will store a cookie with the referral code on the user's PC, and if that user ever does sign up for the service, the creator of the plugin will get the referral fee.
Ah, I didn't think of that. That makes perfect sense.
Thanks man, I solved it 👍🏻
Yes! I misread that &amp;&amp;. 
You're getting downvoted (by me at least) because JS observers/proxies have not a thing to do with the observer pattern. EventEmitter, the standard JS for this pattern is still alive and well.
Yeah, this is[ almost certainly](https://i.imgur.com/rmp808F.png) it.
Good bot
I haven't started them yet, but there were a couple others I bought. I did 2 React courses with CodingPhase that helped me understand React and then Redux. Honestly, his explanation of Redux was way easier to understand and the entire course was only maybe 3 hours total. Maybe less. Redux in Mead's course was breaking my brain and then we jumped right into Jest and that's when the course took a turn for the worse.
What does it matter if native observables are not part of the spec or browser APIs? The author is demonstrating the very useful observer pattern with their own implementation. 
I don't disagree with you at all, but I want to point out that Custom Events are just a different implementation of the same pattern. I believe the OP article is still useful pedagogically, as it can be a great exercise to re-implement built-ins.
This is the problem with decoupling. Using a central event bus, all components are decoupled but it becomes very hard to reason about the flow of the code. 
I'd like to read article about migration from Typescript.
The discussion if GPU is faster then CPU is already won as is proven by the sales of CUDA and the use of GPU in machine learning. Thats the reason why tensorflow.js isnot in webassembly. The webgl version of BLASjs is in the works as we speak.
Read the article - it's not about how to migrate, it's about the lessons learned. You can do a lot of those things without being tied to Typescript
The image src can point to any file. If it points to a script then that script will get executed on the linode/DO server, most likely recording the refs or whatever info is passed in the url and stored in a database.
Yeah , that was the concept. Did I sound aggressive in the first post? I don't think so.
FreeCodeCamp should give her a good nudge 
Yep, it's called cookie stuffing.
Why?
same reason Ember now strongly discourages observers
Because this is an emergency situation
I love it when emergency situations are a valid excuse for skimping on software quality
if i want to force commit just use --no-verify with git
If you didn’t get it - it was a value added feedback. “Invest in design” it said. 
bad bot
Another Harmony of the Spheres update: [When Galaxies Collide](https://thehappykoala.github.io/Harmony-of-the-Spheres/#/scenario/When%20Galaxies%20Collide) &amp;#x200B; It's a simulation of what happens when two galaxies collide. Naturally ordinary laptops can't run an n-body simulation in real time of 100 000 particles - the number of particles that make up the galaxies in this simulation - and therefore I need to stress that the particles don't feel each others gravity, but only the combined gravity of each galaxy. Nevertheless, this simplification lets you observe some interesting things, like how gravitational tides distort the shape of the colliding galaxies before they are about to collide, and the ensuing mayhem, where if you zoom out, you will notice that how a considerable portion of the stars that made up the two galaxies are ejected, while the disk shapes of the two galaxies get destroyed. &amp;#x200B; Bla, bla, bla... Not sure the above made sense, but I had fun coding it, so enjoy, I hope :D! 
True. But here - if you build an e2e usable product as your portfolio - it should look appropriately since this is a demonstration of your skills to non-technical people. If I want to see a code - I would just look on github profile
Clearly you are an expert in my use case.
Ahaha, this code will be trashed very soon. That's why it doesn't matter if it's fake tests :) ! 
There's almost certainly a better way of doing whatever it is you're trying to do here. We can't tell you what it is unless you actually describe the problem that led you to asking this question, though. 
Can't even properly format a reddit post (grumble, grumble) ... /^\d\d[ _-]?\d{3}$/.test(s) Kids these days!
Hi /u/Anakhsunamon, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
[removed]
Hi /u/Talonz, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
In addition to the web API linked below, Node.js has a really simple [custom events model](https://medium.com/technoetics/node-js-event-emitter-explained-d4f7fd141a1a?_branch_match_id=633060139501827903). The built-in `events` library exports the `EventEmitter` class which you can extend with your own class. Then you essentially get full access to the `emit()` and `on()` methods (among others) to dispatch and listen to events.
This kind of project is very unlikely to be a serious contender with a huge project like v8, but it is cool
Just add `|| echo meh` to the end of the command in package.json and the exit code will be 0.
Interesting that a set-cookie header coming back from a request triggered by an image source is being processed, I didn't know that would be the case.
I wonder if this is something modern browsers are going to eventually block. I know my current browser refused to even load the images (that's how I initially discovered the vulnerability: I got a warning about it in my console.)
Thanks for your feedback! #2 It’s just the way GitHub pages works :(
There's an event listeners panel??? I need to look around more.
https://www.npmjs.com/package/volkswagen
This is hilarious.
/r/assholedesign
\`%\` is the Modulo operator, which is a weird name. It just gives you the remainder when dividing two numbers so\`\`\`let x = 10 % 3\`\`\`\`x\` would be 1 because 10 / 3 is 3 with a remainder of 1. So to do what you are describing your should check if your variable lets call it \`y\` has a modulo of 0 when dividing by 3. So \`y % 3 === 0\`
You gotta be a snitch like that?
Run the typescript compiler with your target as ES6 and boom you have plain old hard to maintain JavaScript 
Why is this downvoted. Obviously it’s not just loading a 1x1 image for no reason. This is how tracking pixels work, by executing some code at that endpoint and doing something more than serving an image.
It serves more as a proof of concept as I see it. I mean V8 is intensly developed by a company which has unparalleled resources and talent. This is done by one person. Rust is a language which opens pathways for regular web devs to have low level control and performance which was only accessible for artisans who invested time and discipline in mastering C++ and it's quirks. While Rust is a steep learning curve, it's way more accessible and can be used even for high level api's with relative ease and memory safety.
I think it must be being phased out. I've seen multiple OAuth 2.0 providers deprecate this method of getting a session cookie.
Man, I really want to like this app but the UI is all kinds terrible 
Post the JavaScript code?
The best way to figure this out, is to use it, and see if you can find out why you shouldn't be using it.
All this code is doing is defining functions. ON textarea event "input": \- Define function makeTextItem(type, data). Inside which you: \- - Define function createTextItems() &amp;#x200B; Neither of the functions you defined are called. I may be able to help more if you answer these questions: \- Is \`key\` just a a predefined variable? \- Should the 'item' that you are saving be the text area's value, or \`textObject\`? \- Do you want it to change automatically on input or is a function manually called?
do you have react and node already installed or you need help? i can help u but i need to know to make sure
React native is for mobile app development. If you are trying to build a website, stick with React. 
Try switching to `HashRouter` here: `import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom';` Didnt test it or anything, but if I recall correctly it should work even on gh-pages
Its for a prototype journal application and i'd want the entries to save as they are typed and are still there when the app is restarted, i've been told about using a text 'item' with a JSON string and make that represent the current value of the text area and store that item in local storage but i'm not sure how.
Practice makes improvement.
Source? Yes ember discourages use of observers when a computed property would be sufficient, but that's not all cases. Computed properties, which ember 100% recommends are just an abstraction of observers.
EDIT ON START ( you don't actually need node but i recommend you) And for me start with normal react. First download Node js and install it (its easy) then type in the start menu cmd (or command prompt) open it and type "node --version" if you will get version (ex. 10.x.x.x) then thats a good sign. if you get an error that there is no commabd like node, try restarting your pc or installing node again. i recommend you downloading an script editor, i am using Visual Studio Code but you can use Atom. Make an directory and open it with visual studio code, and go to view, and click open integrated terminal. It should open you powershell or cmd. if cmd then ok, but if you will have opened powershell then type in it cmd. make sure that you are in your website directory and type npm install -g create-react-app and wait. then type npm start . your app should start. open a browser and type 127.0.0.1:3000 and you should see example. I will type more next day.
What is confusing you currently? 
cool but it looks like you are still using old variable method. change the var to let. let is new and better
Making a button. It’s like reinventing the wheel. 
The html tag for a button or dynamically creating one in vanilla js?
What helped me a lot was reading "Eloquent JavaScript" is a free eBook with crystal clear explanations and many exercises 
If you want to get how the language works, instead of hopping from one unconnected example to another, consider reading You Don't Know JS. 
Thanks
Node right now, but just needed help on my confussion, thanks anyway dude
Thanks a lot for your intentions, but i had already node etc, I was just lost on the react side of things, thanks again
Hi guys I have been working on a PWA yokaidex. It is a wiki with information for yo-kai watch games, and is hosted on netlify and built with react. You can find the repo here 👉 https://github.com/joaopedrodcf/yokaidex Site https://yokaidex.com Feedback would be appreciated 💪 Thanks
There's actually a fun error in your first `this` keyword example (I know because I've run into it a bunch when explaining it). You say that the following code prints `undefined`. function User(name) { this.name = name; this.display = function(){ console.log(this.name); } } var user = new User("javascript"); setTimeout(user.display,0); In reality, it prints an empty string (at least in Chrome when you're not in strict mode). The reason for that is by using setTimeout as you did, you default `this` to the `window` object. Typically (and what you were going for), the property would be undefined. However, it [just so happens](https://developer.mozilla.org/en-US/docs/Web/API/Window/name) that Chrome defaults `window.name` to an empty string.
`&lt;html&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt;` &amp;#x200B; `function createButton(){ var body = document.querySelector('body'); //makes the body modifiable in js var button = document.createElement('button'); //sets variable to a newly created html element body.append(button); //attaches the newly created element to the body element } createButton(); //calls the function`
Yeah. Jumping off this: figure out something you want to build and then build it. 
 var entry = JSON.parse(localStorage.getItem(key)); Can i do anything with that? 
A simple idea like the Instagram app, used by hundreds of millions?
\` searchElement.classList.toggle("menu-item"); \`
\`\`\` window.onload = function() { const search = document.querySelector("#search"); const menuItem = document.querySelector(".menu-item"); search.addEventListener("click", function () { menuItem.classList.toggle("hide-item"); }); } \`\`\` Generally \`querySelector\` or \`querySelectorAll\` (for all elements matching the selector) should replace a lot of your jQuery querying needs. Beyond that you can use event listeners or just bind a function to an elements event via \`onclick\` to add an event handler.
Seconding this. It's a perfect look deeper into what's going on. Free to read [here](https://github.com/getify/You-Dont-Know-JS)
Hi /u/Miracence, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/default_regular, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/BritterDayzz, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MooradAltamimi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Can the creator be reported to linode to lose any referral fees they may have accrued by doing this?
Great, more dependencies 😂
I like vuejs better but react native is pretty awesome
You'd have to ask linode. Who knows?
Perhaps. Probably depends on their TOS. I'm thinking of writing to both DO and Linode about exactly that.
More exposure and experience to the language basically. As for pattern, I don't see why you would say there is no pattern? Javascript is just another programming language and supports functional programming, oop, or procedural programming. If you're interested in self-study, I always recommend freecodecamp. A lot of the exercises use javascript and also covers front-end and back-end javascript.
He can certainly be reported.. not sure if they'd do anything though.
buddies and I have been in a groupme chat for 5+ years and we're always making bets with eachother about random stuff especially sports. It's always a pain to scroll up for hours trying to remember what the bet was. I wrote a groupme bot that we can use to store our bets. hosted on heroku + mlab
Linode employee here: This is certainly an unintended way of using a referral code. I'm going to bring it up with the right people here and we'll investigate this code and the account connected to it.
I replied to the main post but I wanted to mention it here as well: I'm a Linode employee and I'm going to bring this referral code up with the team here so that we can investigate it. 
Thank you!
By “point to linode/DO” you (incorrectly) assumed it meant to a “server running on linode/DO.” Instead it’s literally pointing to those respective websites, so a very high chance the person who added the code does not have access to the server behind the domain. 
Question: how would this compare to nuxt.js
No need to compare. Nuxt.js is cool, and solves the SSR issues well, but personally I don’t want an extra abstraction over vue. I want as much control over my code as possible.
It's false ad clicks. Basically, everyone visiting a site using the plugin would unintentionally ping a referral for an advertiser, thereby giving the owner of the referral a fraction of a penny or whatever the clicks are worth.
Aye. Should be `setTimeout(user.display.bind(user), 0)` Or `setTimeout(::user.display, 0)` with the [bind operator](https://github.com/tc39/proposal-bind-operator) proposal that I like so much.
Yeah, I know some folks who actually develop these little buggers...
I sincerely hope you get fired.
From what I remember when learning programming, the first 1000-2000 hours were incredibly hard, then there's a tipping point where everything becomes easy.
Yup. Makes a lot more sense in Node.
And both urls are part of a referral program where the plugin developer makes money if someone signs up. So still a tracking script that the developer would have access to see as in how many people clicked it and how many signed up for it.
IF the user visited an affected site AND THEN signed up for either service. YES. The author could get some information. But other than signing up for either service the author would gain _no other information about the user_. So it’s really has absolutely nothing to do with “tracking.” It’s just for making a few “free” bucks by abusing a delivery platform to spread the links to a (ideally) large base of potential users who might become DO/Linode users. 
I think you're supposed to use the fetch API now.
Oh so that's how cookie stuffing works. Didn't realize the browser followed the url image url to actually load a cooke.
Very indispensable, what would I do without an untested library filled with typos in function names? Not to mention how unbelievably useful some of these functions are, like `addThirtyNine`!
Bad bot
Are you sure about that? Because I am 99.99983% sure that kenman is not a bot. --- ^(I am a neural network being trained to detect spammers | Summon me with !isbot &lt;username&gt; |) ^(/r/spambotdetector |) [^(Optout)](https://www.reddit.com/message/compose?to=whynotcollegeboard&amp;subject=!optout&amp;message=!optout) ^(|) [^(Original Github)](https://github.com/SM-Wistful/BotDetection-Algorithm)
I work for a large company, we mostly use Angular and React. I don’t think anyone has started with Vue yet.
Cool.
I’ve not written in JavaScript before so I could be wrong, but I think it because count is declared as a ‘let’ in Incrementer()’s local scope. Therefore, although the value was mutated inside the function (local) scope but the addOne function, if you try to access the variable directly from outside that local scope, you will get the initialised value of the let variable. This should make it clearer: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let
What if this guy is a fraud and turns out to be the plugin developer! 
what browser?
Is it to increase web crawler recognition for higher places google searches?
Hey look, a bunch of contrived examples that you will never see in any actual code that only serve to make the interviewer act like a smug piece of shit for knowing the solution to an ultimately pointless exercise. If you want to gauge knowledge of the language, ask about how the event loop works or what makes prototypical inheritance powerful. Questions like this make me realize I will be working with guys who love the smell of their own farts. 
Reinventing the wheel? 
Good job stealing an article. Here's the original: [https://www.codeproject.com/Articles/843860/%2FArticles%2F843860%2FMario-with-TypeScript](https://www.codeproject.com/Articles/843860/%2FArticles%2F843860%2FMario-with-TypeScript)
I never told it as mine. If you have read the whole article I have dedicated 2 paragraphs for the author as credits. If thats not enough what should I do brother.
You figure your popups are getting annoying :))) No kidding? 
Still lists your name at the top and I bet you didn't ask for permission to copy/paste the entire article to your own site. &amp;#x200B; Same goes for the rest of the articles on the blog. Doesn't matter that you credit the author when you just copy their work and put on your site with your ads on it. You're monetizing somebody else's work and that's wrong.
If it makes you happy then I'll take down the article.
Instagram has very simple idea as a product. And of simple he got this popularity.
But it's probably \_all the articles\_ on the blog that are just copied! Do you think an article is interesting and well written? Post a link to the original here on Reddit, instead of copy/pasting the content to your own site and then linking to that. &amp;#x200B; Write your own stuff or stick to linking to the originals.
Man now its too much... I 've been polite to you because mistake is with me.But you can't accuse me of stealing all the posts. When scrolling through that post and found it intresting.Took it and given maximum credits to the author. And man I don't know what your problem is.
I am working on a React renderer for Three-js: https://github.com/drcmda/react-three-fiber Makes it possible to create complex scene graphs in a reactive way. And to me it’s been one of the clearest examples of how beneficial hooks can be in app dev. #### Some demos #1: https://codesandbox.io/embed/9y8vkjykyy #2 (scroll content): https://codesandbox.io/embed/y3j31r13zz #3 (Multi scene/effects): https://codesandbox.io/embed/mo0xrqrj79
Every post on your site I've look at, I could find the exact same text on other sites, with earlier dates and other authors. Your article "making complex problems easier by decomposing and composing", for example, is more than a little similar to [How to make complex problems easier by decomposing and composing](https://medium.freecodecamp.org/how-to-make-complex-problems-easier-by-decomposing-and-composing-be57ce230c49). The article on your site called "Building a telegram bot from scratch using r" is verbatim taken from [this series on building a telegram bot with R](https://github.com/ebeneditos/telegram.bot/wiki/Introduction-to-the-API). Neither credits the original author, nor is there any hint that it's reproduced with permission. Don't act like I'm in the wrong here. You steal shit to put on your site and then spam the links all over the place, most likely to make ad revenue and I call you out on it. Even the fucking bio on your site is stolen from from a Canadian dev called [http://jeffsmith.me/](Jeff Smith).
Wanted to learn how to use Gatsby so I can quickly whip up some site ideas and always wanted to start writing up movie reviews. So I created the first version of [EnterFilm}(https://www.enterfilmreview.com/) Overall, I am a big fan of Gatsby, the way I have created this probably isn't perfect (though I used the blog starter as a reference point) but I am still pleased with the outcome. Going to learn some more React by itself and then probably go back and refactor the code with the extra stuff I have learned. 
Any specific complaints with the UI? I can look into it. The app is fully made in NativeScript, so it’s limited – they claim to support CSS-style flex box, but in practice you can’t mix percents with static values, and certain elements can’t go above/below other ones without things exploding. I have been tempted to rewrite the UI as fully native, just including the NativeScript runtime. But by writing the UI in NativeScript, I maintain the possibility of an Android equivalent. It’s all on GitHub, though – accepting PRs!
https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams
I don't think aggressive, but it just made you look closed minded and essentially saying, why is anyone bothering to do anything. After all, it's very very rare that anyone comes up with something completely new. Most innovations are just a slight tweak on something that already exists and I think we should definitely be pushing for more innovation, or at least attempts at. Anything that makes us grow as a society is not a waste. 
I suppose this should work for you https://jsfiddle.net/ksLgczy2/1/
Your event handler simply declares the `makeTextItem` function without calling it. i.e. the event handler basically does nothing.
&gt; Secretly plugin author pretending to take action on this.
Half of the app? They list 5 features, that's it. Most of the core functionality is native.
Thanks. I’ve been using it for a few years
I really want to love React - I think it's goal of purity in the javascript (no Frankenstein .vue files) and state (redux) sense is very noble, but I find the way it solves these problems deeply dissatisfying. Its go to solutions for async state and styling for example are just so unergonomic to me that it saps my motivation away from me, it just involves so much boilerplate. I predominantly use .vue instead, but honestly I have issues with that too, mostly just because it obfuscates so much of what is going on under the hood, especially with regards to single file components. But otherwise I find it to be a far superior alternative.
Never tried Vue but heard a lot of good things about it over the years. In terms of not understanding what’s going on under the hood, the same is true of React. You’d likely get used to React pretty quickly. Just requires building an actual project with it. You’ll get used to the ergonomics. 
You could look at [Hyperapp](https://github.com/jorgebucaran/hyperapp). It lets you use JSX and has a similar state handling thing, but is much simpler.
Oh, it's the old white pixel trick. So when you send a link to a page or an email, you generate image on your server that matches a hash (mostly a random string), then when user opens your email, browser will load this image and server will be notified. User won't even notice since its just a white pixel. This is how you build 'Seen' functionality for emails. Just note using this JS snippet is not the only way to do it.
Douglas Crockford's series of conferences [Crockford on JavaScript](https://www.youtube.com/watch?v=JxAXlJEmNMg) is, imho, a *must* for whoever wants to *get* this funny little language that could. His little book, *JavaScript : the Good Parts* is also a very good springboard to get on board. For a general overview, and for precise technical references, keep [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/JavaScript) in your bookmarks bar.
The coding challenge itself might be suffering from the "we ran out of ideas, but this shit is fun" and that's probably why it's not even a difficult one, or since it's a company environment the challenges can't be too hard or would take focus away from your project
I've built a few projects in React and React Native, all of varying sizes. I would say I'm used to the ergonomics IMO, but I certainly wouldn't say I *enjoy* them. I tolerate them, at best, because I find that React Native is the best cross platform native framework I've found so far. Trying out Flutter soon, though!
So why did they pick one of the 2 links in random and not use both of them? It's just 2 after all!
It's certainly a waste when you have n libraries doing the same thing. And with JS, that's not rare.
Javascript, Python package's managers, containers and all new top tech are shit on security...recentlly somebody put a bitcoin miner inside of ubuntu\`s image from docker hub...the same for npm, pip etc etc...so think 3 or 4 times before to use third-party software/code... 
I hope this applies to me someday!
It just takes a lot of time and practice to learn programming. Especially because there are a lot of concepts that are completely outside of any language. Be patient with yourself.
use iMacros.
Check out macro programs such as autohotkeys. Don't need to know any programming simply record your actions and run it on a loop 
The word migrating is confusing here. You are not migrating from es6 but simply implementing typescript. Migrating infers you are eliminating ES and using TS in it's place. Not the case. Just my two cents but what do I know.
Wondered that myself.
i used dexie in a worker using worker-loader. then created a handler class which let me pass arbitrary handlers to a $worker and get the message back anywhere in the app. from there i installed vue-async-computed and created mixins that i could put in any component, including shared lru cache to keep things from getting to repetitive. in my case, i also import and export the dexie store so it should be easy to test if i ever get there.
This is a sad reality. I was aware of the risk before, but now that I've been bitten by this I'm a lot more paranoid.
That is weird, isn't it.
I was testing on the latest version of Chrome.
That was news to me, too.
I don't think web crawlers would consider the img src.
Hi /u/RalphFincher, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Daniel Shifman (aka Coding Train) has made some videos on making a twitter bot. One of the videos goes through the twitter api https://youtu.be/7-nX3YOC4OA
Thanks, but this looks a bit complicated. Also, it involves nodeJs which I am unfamiliar with currently.
Thanks, but this looks a bit complicated. Also, it involves nodeJs which I am unfamiliar with currently.
More or less this. All observer, ESB, etc. "I want to listen for events/messages in a channel, and have a payload delivered with it" *very* large systems could add gatekeeper functions and event/message types with defined payload structures, and sub-routes on the message types. The old patterns stick around.
You are right about the microtask, it could be easily changed to become microtask as I described [here](https://medium.com/@keyvan.m.sadeghi/great-point-%E6%B5%81%E5%B9%B4-f5eba9cf7d92). It's indeed async though, remember callbacks were the dominant method before Promises, same thing here. [Here](https://medium.com/@keyvan.m.sadeghi/how-async-works-in-a-promise-implementation-d709d8f71425) I described how it's async.
How complicated do you expect it to be? It's literally a single function call that takes a string for the request type, an object for the parameters, and a callback. Don't think you'll find anything less complicated
Have an updoot for using the bind operator 😊
Clickbait title. tl;dr: just an ultra basic Speech Recognition web API example.
I think I was looking at the vanilla js one... that was making me very confused 
I will be practicing everyday!! 
What don't you like about TS?
There are better alternatives. I don't think people hate it. I think that they're annoyed when jQuery is a requirement for a library that they want to use because they have no use for jQuery in their project. 
Its fine. It's just old and not as needed as it used to be,
Only those ignorant enough, not to admit that jQuery has stood the test of the time over all these years will hate it. I love it, use it everyday and it helps me in getting things done, without re-inventing the wheel.
have you ever tried washing your dishes with a potato? like, it’ll work, its just probably not the best tool for the job. 
It's a beaten to death question. jQuery had it's time when there were huge compatibility issues between browsers but as the web apps grew bigger and bigger they become very hard to manage with jQ. Then we moved to frameworks that made creating big web apps easier. Currently it is obsolete, a lot of its funcionalities can be found natively in browsers. If you want to use jQ ask yourself why vanilla is not enough.
Because they read somewhere that jQuery is bad and the are trying to be trendy.
I don't know anyone who hates it. Personally I'm thankful because it helped me a lot when I was starting but I'm not going to use for new projects. As others already said it there is much better alternatives or even Vanilla JS.
jQuery was made to bring helpers that works cross browser before before it was a mess when it came to javascript functions browser compatibility. It still is a mess now, but jQuery is not as useful as it was before because browser compatibility has improved a lot and there are now standards that browsers follow. Moreover, js libraries/frameworks brings a lot of helpers themselves. Bootstrap is going to remove its jQuery dependency soon.
Not being elitist or anything, but why do people like jQuery? I know why in the past, but now?
Jquery is still perfectly fun just make sure you use some tree shaking if possible. 
Because I can prototype a marketing page in a couple hours with some out of the box tools and still use vanilla JS interchangeably. 
Selectors are implemented natively in browsers now?
Yes, `querySelector` and `querySelectorAll`.
jQuery was a tool written for a time that's no longer got a valid use case. First off, jQuery was built during a time that CSS was just coming onto the scene, and jQuery gave us all a fantastic approach to reusing the CSS selector logic in our javascript code. Write a div, select it to style it in CSS, then select it to add an event handler in JS with jQuery. It was fantastic. So what's changed? Two things really. First, vanilla JS now supports much of the features that made jQuery great to begin with, making the need of jQuery obsolete(see http://vanilla-js.com/ as a great example of what vanilla JS can do without needing jQuery). Secondly, if you really did need something more complex than what jQuery offers out of the box, you're more likely to want a full on SPA type library, such as React, Angular, or Vue. All of which no longer require one to need any of the functionality of jQuery anymore. The reason that jQuery is hated now, is it's almost assuredly a sign that whatever website you've encountered and having to deal with, hasn't been built on modern principles. Final note: Browser compatability. IE is effectively dead. Look at the current browser stats: http://gs.statcounter.com/. IE as a browser has less market share today than opera, and for those few users who still demand IE, edge is a viable alternative for them, and a fantastic browser all around in terms of compatibility. jQuery still has an insane amount of legacy code to support edge cases that no longer matter in today's modern web, and for the few edge cases that actually do matter, tools like babel solve those problems in a fantastic way: Build the modern JS code you want, and it figures out what features need to be compiled down based on what browsers you tell it you support.
It's probably no longer a good choice if your browser support doesn't go back to when the various browsers had incompatible DOM apis. That's much better these days, so you can just use the vanilla DOM API you already know instead of forcing developers to learn jQuery and making the customer download it (can be mitigated). JQuery patterns that were great for a lot of people (myself included) to learn with do not scale well to modern applications. Imagine an enormous code base where events are almost always delegated to the body \`$(document).on('click', whatever)\` Similar thing with creating anonymous functions and binding multiple identical functions to the same target. JQuery abstracts fundamentals in a way that makes things very difficult to read in my subjective opinion. To keep piling on to my list of complaints about how the \`on\` function works, there are other signatures where you can pass more selectors into it and so on. A lot of jQuery is written with different arguments of different types in different positions doing different things, and if you don't know or care about jQuery it's a lot to look up. It may just be personal experience, but I didn't understand function composition, closures, passing functions as arguments, and a lot of the other fundamental patterns that make JavaScript great when I was learning. As a result, I've written and seen others write a lot of duplicate code that's difficult to debug and maintain. It seems often to involve making elaborate objects or following patterns picked up from JQuery plugins. It's an ok way to get work done, but it becomes chaotic on a large team. JQuery does unexpected things with like \`:checked\` or similar attributes. There are many different ways that it interprets that and they have changed from different versions. I forget what the other ones are, but \`data\` I think is one that frustrates me, too. JQuery always returns a JQuery object which is just a bit clumsy. 
NodeJS is just a platform to run JavaScript without needing a browser. Only difference really is that there's no `document` or `window`.
What about .animate()?
CSS3 animations.
People loved it at one point. Some still do. I think the main thing is that it is outdated now.
https://caniuse.com/#feat=queryselector had full support since IE9
Angular and React are overkill when you want a few simply buttons and a couple of Ajax requests with callbacks.
There are better, much faster potatoes out there now 
Why cant you just prototype it with vanilla js tho. What tools does jquery offer that are much faster than vanilla js nowadays? Honest question
Vanilla is not a serious choice big applications.
Transition effects mainly. 
You dont need jquery for either of those things. If that's how you're comfortable doing it then go ahead no issues but we shouldn't really be teaching new devs to do things that way.
I feel those are better handled with window scroll and position promises, or plain css if its a component transition.
I mean, you’ll probably want a framework to organise your code. But jquery isn’t that.
Yep. https://caniuse.com/#feat=queryselector
i don't think anyone's suggesting vanilla JS if you're building a large SPA. there simply saying is if you're building something small enough that you think you need jQuery, you don't actually need it.
Neither is jQuery.
So binding event handlers to buttons and using fetch API is reinventing the wheel? I do not think so. 
People say the same things about other legacy frameworks / languages. &amp;#x200B; Its not that it is insufferably bad and refactoring an application and having to train everyone to use a modern SPA framework, is not going to be worth it; but there is no use for jQuery in a modern web application anymore. There are legitimately better alternatives. If you are using an SPA framework already, jQuery is going to lead to a lot of antipatterns as well.
This is why I use open source code.. because every single line of code has been scoured and there are absolutely no bugs left :) Glad you got that one Jeff, the open source community is back to zero bugs or malicious code probably
Like I said, it’s really just for prototyping. Just something I can throw together quickly. Plus bootstrap relies on it. Lots of different ways to skin a cat. This way is just faster for me. 
JQuery makes me feel warm and fuzzy inside. It's from a simpler more innocent time. I occasionally bask in its warm nostalgic glow.
They jQuery apporach is hard to maintain, not abstract and easy to mess around when working with native DOM elements (classes and Ids may change). They idea of modern frameworks is to see an application consisting of atomatic components, containing all the logic and design. jQuery is just a set of tools, there is no bigger idea behind it. Furthermore, jQuery doesn't support - 2-way data binding - routing - state management
Some of it is cargo culting, but there are quite a few reasons NOT to use jQuery these days. 1. The weight of the library (even when minified and gzipped) might be more expense than necessary for the functions it performs. 2. Seeking to do everything “in jQuery” encourages a bad dev practice of filling a codebase with black boxes. (Colorbox modals, slideshows, etc). It’s a bit irresponsible (see point #1 regarding payload size) 3. It encourages callback hell. Testing nested callbacks is a bit more involved. It’s certainly not impossible, but the tests themselves tend to get unwieldy. Many testers lean toward DOM testing as most things done in jQuery are destined to mutate the DOM anyway. 4. It doesn’t foster an environment of actually learning how to program. While it does offer quick results, it often comes at the price of maintainability. These points are highly arguable for sure. I certainly used quite a bit of jQuery during its heyday. After transitioning to mobile development, I started reaching for it less and less. I’m certainly not a hater, but I see little use for it these days. Unfortunately, I’m seeing a similar trend in the React ecosystem. I’d prefer folks learn to program, and use libraries, instead of considering libraries as “the language”. 
The question is How can we scrape jQueries?
TIL
Looking to be educated here, but what's so hard about vanilla buttons and requests?
A lot of people have to support IE 9.
I'm faster with Vue.js than without any library.
Nothing hard about it, just lots of boilerplate.
http://youmightnotneedjquery.com
&gt; without re-inventing the wheel That's a false assumption. Modern frameworks brought something to the web that wasn't there before. It's a totally different approach.
As much as I wish ie11 was effectively dead, 3% is still a high number of people, mostly in government or institutional offices who won't be viewing your content without all the super fun polyfills.
&gt; Plus bootstrap relies on it. &gt; &gt; Thank god bootstrap 5 does not. Can't wait to try it out 
As someone who primarily teaches other devs, I would say I see three reasons: * Familiarity. They learned on it so they've been using it forever and may not realize that they don't need it. * Easy to include via CDN * Some of the "vanilla" Web apis are a bit confusing for people new to them, especially if they aren't adept at things like working with promises. I find people are especially attached to ".ajax" Sometimes people are skeptical when I tell them it might be easier \*not\* to use it, but come around when they see how short and easy to read the resulting code it. Of course it's not always that way, I've seen hard to understand vanilla implementations (and Jquery). 
https://animejs.com/ (no jQuery dependency)
Another disadvantage for me is that it's object orientated while I prefer functional programming. What I really like are interfaces. Maybe I'll just use that functionality in future applications.
I prefer this: $.ajax({ type: 'GET', url: '/my/url', success: function(resp) { }, error: function() { } }); To this: var request = new XMLHttpRequest(); request.open('GET', '/my/url', true); request.onload = function() { if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) { // Success! var resp = request.responseText; } else { // We reached our target server, but it returned an error } }; request.onerror = function() { // There was a connection error of some sort }; request.send(); I prefer this: $(selector).each(function(i, el){ }); to this: var elements = document.querySelectorAll(selector); Array.prototype.forEach.call(elements, function(el, i){ }); I prefer this: $(el).is('.my-class'); to this: var matches = function(el, selector) { return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector); }; matches(el, '.my-class'); So what would happen if I went vanilla? I'd end up writing my own wrapper functions for all of those things to make them cleaner and easier to use. So guess what? Now I have jquery. 
Github recently moved to vanilla. I'd consider that a large application.
document.querySelectorAll? If it makes anyone feel more at home, map it to $ 😁 JQuery is just a JavaScript library. There haven’t been many cases that I haven’t easily been able to use native selectors to get the job done. I don’t mind JQuery so much as I hate seeing people relying on it as a crutch and never actually learning native JavaScript. It makes my job harder when I have to go in and do their work for them in cases where JQuery cannot be used (not many cases but I’ve run into it).
Oh I thought this was the start of a joke. 🙁
Much of what originally made jQuery great has been incorporated into vanilla JS and the DOM API, but I think jQuery's syntax for selecting elements and working with the results is still much better. If I wasn't using jQuery, and I wasn't doing something that requires a full-blown SPA framework, then I'd want a library that provides jQuery-like syntax wrappers around vanilla APIs. I might as well continue using jQuery for that, because I'm so familiar with it. 
Originally I hated jQuery bc I like to have a deep understanding of things and learn from the root and not use surface level tools; Until I got a job and had to learn the basics of jQuery now I like it bc it makes JavaScript fun. 
You don't *need* jquery for these things, but you'll end up writing boilerplate to clean/wrap your vanilla JS to make it cleaner anyway, which will ultimately become your own implementation of jQuery (if you care about code craft at all). [Here's a list of things](https://www.reddit.com/r/javascript/comments/azgen8/why_do_many_web_developers_hate_jquery/ei7mczn/) I quickly came up with to demonstrate.
I don't hate it, but here is an example of me being irritated about how it's used: * I am working with a new integration and ALL the examples in the docs use jQuery. Even super simple ones. * I see a stack exchange question for something fairly fundamental to JS and all the answers are jQuery. That said, as someone who produces docs and examples I'm on the fence about whether we should provide examples and advice for using jQuery. To be honest though no one has asked for them yet. People want React or Vue these days.
I didn't know about assemblyscript... I'll be trying that out
I'd see that as an exception.
&gt; IE is effectively dead. Look at the current browser stats: http://gs.statcounter.com/. &gt; IE as a browser has less market share today than opera, and for those few users who still demand IE, edge is a viable alternative for them, and a fantastic browser all around in terms of compatibility. IE's market share jumps considerably if you just look at desktop, rather than overall, where mobile use skews the numbers. And those users still on IE are likely locked into it because of corporate IT policies, or ancient intranet stuff. You suggest Edge is a viable alternative, but again some places are locked into using IE11 and IE11 only. People that *can* use Edge usually use chrome, so IE11 has a better market share than MS's newer, better browser. It all depends on what the market for your website is, but if you've got clients and stakeholders in these corporate office towers with shitty IT policies or of you want to reach those who do, you still can't ignore IE.
Fairly accurate explanation, but just 1 small clarification - CSS has been around since the 90's, and even CSS3 was starting development in 1998 (and is still in development even now as the spec introduces new features and improvements). jQuery was introduced in 2006, around 4-6 years before CSS animations became supported in browsers.
This is not true at all. _Very few_ developers have to support IE9. 
I fucking love typescript, but those disadvantages don't seem that bad. Build step is required to use the latest Javascript version or to use react. I'm a react developer so I'm used to it, but adding a build step just to get the latest Javascript features seems standard to me. I'm curious now how many other developers run without any build step at all. Typescript code is usable in the browser through source maps, if I'm understanding you correctly. When I code, all the code I see in the inspection menu is purely my typescript code. I never see the compiled Javascript after I add source maps. 
Or you use a modern approach without interacting with native DOM elements ;)
Its irresponsible to support IE9 today
No, I know some people who outright hate it. If all you know is react, everything else is "wrong"
Try ``` const log = condone.log.bind(console); ```
I don't recall seeing anyone hating it. It's just obsolete today, and a terrible way to construct UI. I guess i would hate it if i had to maintain legacy jQuery stuff at work, that could be one reason.
For sure there are those that use it as a crutch. But I'd much rather use it then roll my own wrappers for all of that vanilla to get rid of boilerplate. Then again, I say that, but I've basically written my own version of Google gauva in Java, and have wrapped all of the Java streams methods with functional style method calls that more closely match the JavaScript versions - although I guess that's more of a matter of taste.
&gt;It still is a mess now Care to elaborate on this? 
So my choices are use raw JavaScript or import an entire framework instead of a small library? Man, the JS community is so weird.
Mommy issues
fetch('https://api.com/endpoint').then(res =&gt; res.json()).then(data =&gt; console.log(data)) for(const element of document.querySelectorAll(selector) { console.log(element) } document.querySelector(selector).classList.contains('my-class'')
Yep. I work for a contractor, and we’re eagerly awaiting the day we can drop IE support for Edge. Afaik, DoD machines should basically all be converted to win 10 at this point, so I’m guessing part of the hold up is other web apps requiring IE, this keeping IE as the default. I guess we won’t drop IE support til then. It’s a relatively old app with lots of JQ as well, so it’s not like we can just delete jq the day we drop IE support. It would take a while to either go vanilla or select a new framework and slowly start converting. 
Typescript is as object orientated as Javascript. You can build a functional program that never uses classes ever. The typing system makes this much easier as you easily know the parameters and return value of functions that you've been passing around for a while. I find it much easier to write functional code in typescript simply because I never have to check the source code of a function as long as my types are set up properly. Plus it becomes very easy to handle any config objects as they're properly typed. You can take your Javascript code, make it typescript, add only types, and everything will be fine. You don't need to change your coding style. 
Most modern approaches are not frameworks (e. g. Vue.js) and even smaller than jQuery. 
But I want to wrap the original console.log output still, I don’t want to call log.
Yes, those disadvantages makes no sense for modern frontend development
&gt; I think jQuery's syntax for selecting elements and working with the results is still much better What do you mean? What's wrong with querySelector/querySelectAll?
D'awww :3 &gt; It's from a simpler more innocent time. I occasionally bask in its warm nostalgic glow. I look back fondly on those simpler times too. If I were starting web development now, I'd be really confused. &amp;#x200B;
Yeah, pretty much the nail in the coffin for jQuery imo. I wonder what kind of performance benefits we’ll see with vanilla JS. Does anyone use Cheerio for webscraping? I think it still has jQuery as a dependency. 
Again you talk about replacing it not eliminate it completely. Wtf ... so this is just a personal grudge against jquery?
You never \_needed\_ jQuery and that site shows very clearly why people started using it.
Yeah build time is even less of an issue if you use an IDE. Visual studio code compiled with every save. I don’t even notice build times
No, it’s strongly typed. You can have strongly typed functional programming. 
jQuery will rebrand itself in a year or two and people will love it again. It’s good to know, but maybe not necessary for every project. But, the real takeaway is that it’s gone out of fashion and isn’t trendy. 
Because people never think objectively and in general... smart people talk less. Is a screwdriver a bad tool because you can have an eletrical screwdriver? When you only need to get a screw out? Do you use a washing machine to wash one glass? People have personal grudges. Just search "angular is bad" or "reactjs is bad" ans there will be a ton of reasons for both. Its just the way it is. People still hate php and remember stuff from 10 years ago. Hell you could find people hating C because is not low level enough.
Ah, sweet. Then I just need to run it through a transpiler.
If it's popular, it's popular to hate it. Don't pay attention.
That line doesn’t call `console.log`, it ensure when you call `log(...)` it has the `this` pointer set to `console` as it would normally.
Yeah, 3% sounds small, until it's 100% at one of your best clients.
That’s not my goal though. My goal is to monkey patch console.log
React is smaller library than jQuery. To get started all you need is 3 lines of code in HTML.
Sucks to have a job where you maintain legacy projects. Have a nice day :)
jQuery is not "obsolete". If you want to build a simple page with a bit of interactivity, it's absolutely the best library to use, *still*. It's just that most developers won't stop at "a simple page with a bit of interactivity", and so most developers would be better served learning a modern framework (Angular2/React/Vue). But jQuery is still absolutely/viable for the right projects.
Pft, this is nothing. I used to have to work with IE5.
I've used both Angular and React. The learning curve on both is way steeper than that for jQuery. Waaaay more boilerplate than necessary to do simple tasks.
Yes, part of the problem is beginners not knowing javascript fundamentals and writing a bunch of spaghetti code with jQuery. It's usually a bunch of endless disconnected $(document).ready and .click functions without any structure. Eventually things start to overlap and it's a nightmare to debug. Everything is done as a one-off thing instead of using objects. I've seen code where the same selector is called over and over again in the same function instead of assigning it to a variable. It can definitely be used properly and in a clean way, but modern coders can do everything they need with just ES6 and a transpiler.
*Stack Overflow question about JavaScript* *eager framework use answers with jQuery solution* barf
If you're looking for simple interactivity, the best library to use is no library at all. Vanilla JS is more verbose, sure, but it's not hard. I can't think of many reasons where I can justify the added cost of a library like that and would still choose jquery.
I have to support IE 8 :(
Being trendy is so in right now
I suggest you consider splitting up learning JS into many different areas of study: - JS the language (with no web API's or Node, just as a language, basic syntax) - JS as the language of the web with all the Web API's and front-end stuff - JS as an OOP language - JS as a functional language - JS as a language that often uses frameworks like React - JS with and without async features like promises - JS well organised into modules - ... Learning them all at the same time would be insane, you need to chunk it down. Some of this stuff you will love, other stuff you will be bored by, so go with the stuff you enjoy. I suggest you make a game, that is what got me started, it is fun! You can then re-factor it again and again as you learn more, experiment with styles etc... Just pick one thing, like you want to draw an alien on the screen and make him move off the screen. There are a lot of ways to do that, so just get going. Here is a head start :) https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API 
Hi /u/DreamyWonder, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/JammyJ1mJ1m, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Happy2002, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
wtf is Spa
Hi /u/firdaus71, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
`fetch`, `document.querySelector`, and other improvements to the basic DOM API have definitely made working without jQuery easier. But have you actually tried building a site out of them lately? jQuery still offers a *wealth* of conveniences over the native API.
Some people love shoving more dependencies into a project, some would rather not. People who would rather not see jq as unnecessary. 
It's not a vulnerability. It's just some guy trying to make a few extra bucks by embedding a sneaky referral code in a plugin.
Mommy never removed her event listeners
Hi /u/otashrt, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
You would only replace the first line of your example. You’d then do the monkey patch the same way as in your code.
Hi /u/-proof, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/somewhiteboy99, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Single page application lol. Vue, Angular, React.
Hi /u/m4pa, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/devkothari, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/duke1102, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/UL_Paper, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Do they?
Personally, I feel like JQuery is very bloated. While realistically and statistically it isn't. As a Vue.js developer, I feel like you can do 80-90% of JQuery yourself. I don't understand the point of learning a library when you should be learning the language. Some might also argue that JQuery is slow, it can be but it doesn't add that much on top of js. The only good use for JQuery is if you need to write a quick 15 minutes site and cant be bother to write an extra 3 lines of code to do 1 thing. 
I agree with you. I love React, etc., for big web apps (I use it for a huge enterprise system at work and development would be a pain without it). I certainly don't mind plain JS for simple interactivity - but jQuery still makes hacking together little animations and interesting behavior much faster, in my opinion.
Hi /u/TakeTheWater, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
That doesn’t work. Line number isn’t right
Jesus..
Hi /u/bamboo_gamer, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ConnectMasterpiece3, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Nokzide, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Because they never had to work with IE6.
&gt; although I guess that’s more of a matter of taste. Which is probably fine in Java, but in Javascript I would consider it irresponsible to send a whole library over the wire for taste. Frontend unfortunately requires more nuance than backend when it comes to including code.
We’re talking about 29KB of a file cached in CDNs globally and locally on every browser here. I have Ajax calls that return that much every second.
This is the correct answer ✅
You need better management.
&gt; jQuery was built during a time that CSS was just coming onto the scene wat? no.
oh I only do backend and shitty HTML. every time I'm asked to do any frontend work I do an even worse job so they'll stop pretending I'm capable of it.
Fair point.
I have built several small sites sans-framework recently. I don't disagree that jQuery provides a lot of convenience methods, but I'm saying that a 30kB library isn't worth that to me. I'll usually just remap a few common functions myself and call it a day. I know internet is fast these days, but it's the spirit of the thing. Why would I bring in a 30kB dependency when that's far bigger than the rest of the JS I'm writing? JS is the most expensive kind of asset to load by a long shot
Not hate - it was useful a half dozen years ago but with updates to javascript isn't really necessary anymore.
For me it's the fluent interface. I can do much more with less lines of code.
I disagree. You dont need Babel, npm, React router and anything to start with it. Just do a HTML page with body and div and mark that div as root for React. React works really well on multi page apps (Facebook being one). Grab it from some cdn and youre good to go.
I disagree. You dont need Babel, npm, React router and anything to start with it. Just do a HTML page with body and div and mark that div as root for React. React works really well on multi page apps (Facebook being one). Grab it from some cdn and youre good to go. 
Seriously, right? Every time I search for some javascript info I have to include -jquery
Clients pay for IE8 support. The only thing they need to do is charge more, we charge 1.5x normal rates I think it should be 3x at least.
I don’t feel like having this debate again, [feel free to tune in to last time](https://reddit.com/r/webdev/comments/aq3zu4/_/egdy6qm/?context=1)
You're right. Poor choice of words on my part.
I finished reading the cover of Eloquent Javascript
Honestly, I think React does a fantastic job at what it does and if you try to mix jQuery with React, it's like you're looking for a biker bar to have a fight in. You're going to waste everybodys time, come out with a black eye, a few broken bones, and a concussion.
your examples are bad, even youmightnotneedjquery is outdated &amp;#x200B; XMLHttpRequest? Why? You'd do &gt;const queryAPI = async (url, options = {}) =&gt; { const response = await fetch(url, options); &gt; &gt;return response.json(); &gt; &gt;}; &gt; &gt;// queryAPI('http://foo.bar') instead of Array.prototype you do \[...document.querySelectorAll('div')\] or Array.from(document.querySelectorAll('div')) or just document.querySelectorAll('div').forEach if you're polyfilling and instead of matches you can just do el.classList.contains('.my-class')...
I also agree. As someone who has deeply used jQuery, I find it amazing how many people scoff and say it's worthless, as though they know what the *entire* library is comprised of. Yet their actual talking points are few. I'm not saying their talking points are wrong, nor that jQuery is certainly obsolete in many common use cases, but I can pull things off in a line of jQuery that would still take much more effort spread across JS and CSS. But that's a matter of personal preference. At the very least, I tend to prototype extremely fast in jQuery, then convert to vanilla if need be.
&gt;it's still less understandable that's hilarious, how could one of the most concise API names such as FETCHand freaking DOCUMENT.QUERY SELECTOR ALL be less understandable? :D
If you're dealing with legacy front end, chances are that it's a big ball of mud jQuery frontend. They tend to have new feature layers slapped on over time by inexperienced developers and become difficult to improve or debug.
css animation has come a long way and you can do a lot of stuff without any javascript at all that wasn't possible a short time ago.
Sure, and I’m sure you have it out with the react/cue/angular folks in this thread too?
We're downvoted for the same reason the working group had to lock the thread discussing the thread discussing why observables are an anti-pattern. Most here won't bother to read working group pages, trying to fully understand an opposing view is difficult, oberservables are ingrained as a necessity in developers' minds, and downvoting upon disagreement is easy.
Personally, I love the new stuff, but working with NodeLists which are array-like and not real arrays makes Array.from (which doesn't have that great of support) pretty mandatory for most things and it gets to be annoying. It's not stopping me from using the native implementations, but I can see the arguments.
Well. Full means “to the extent supported by each browsers CSS engine”. Even though the method is available on all browsers, it’s results may vary between browsers. jQuery provided consistent results 
Node ≠ ECMAScript Thanks for the downvote, this is no different than the working group page I know you didn't read.
What is the data returned from the fetch promise? What’s the second promise for?
Node ≠ ECMAScript Thanks for the downvote! You sure know the difference between a language and a toolset!
Exactly. JQuery works perfectly fine, but it's unnecessary, and heavy, and if a library requires it, it adds a lot of size to the site.
Proxies were created because this was recognized, by the ECMAScript working group, as an anti-pattern.
because it spoilt the `$` character as a library namespace forever
When I started web development 8 years ago it was most hot technology and a must to learn and work. 
Because it’s bloated shit and you can do most things by knowing vanilla JavaScript. Many people will rely on jQuery and then encounter situations where they cannot use jQuery and have no idea what to do. [You May Not Need jQuery](http://youmightnotneedjquery.com) 
Yeah if I want to add a class to a bunch of elements I have to write this code in vanilla: var els = document.querySelectorAll(".myElements"); els.forEach((el)=&gt; { el.classList.add("myClass"); }); But with jQuery I can write it just like this: $('.myElements').addClass("myClass"); jQuery is a nice UI library. It's ok to use it.
Some browsers have APIs that other do not have, especially IE (yes it is discontinued but plenty of companies still use it so you have to support it). It’s even worse for new APIs available in Firefox or Chrome, it sometimes takes years to see it appear in Opera, Edge and IE. Hell, some never will.
Well yes, if you write pages in the style jQuery was designed for 13 years ago, it's still a good solution.
It's trendy.
While, I agree, the described use of tagged templates is abusive, there's really nothing wrong with tagged templates, imo. I mean, there are good uses for them.
If you don’t need them then don’t include them either. Pretty much no one _needs_ jQuery these days, it’s legacy. I have this battle probably once a week at work, or on JavaScript slacks, or here. Just last week at work I came in to fix another team’s build process that was bundling a whopping 17mb (about 3mb production gzipped) of code for a something that, right now, is a glorified CRUD app; it’s now around .5mb of Java-ish scaffolding and abstractions that couldn’t be reduced without an entire refactor. it gets frustrating dealing with this frontend culture of irresponsible code inclusion, and it’s annoying that frontend has become the accessibility nightmare that it is currently. Frontend needs a Marie Kondo wake up.
I think there's a better way people should've started this argument. There will always be people who have to support legacy, but those people don't often get to shape which way their language is going. That means their tools and frameworks can start to lag if they fall out of vogue. When I look at jQuery it seems a lot lower-level than what Vue/Angular/React aim for. The "modern" frameworks want you to write components with HTML templates and their goal (whether they succeed is a different conversation) is to make it so you don't have to think about DOM manipulation at all. jQuery feels more like a good toolset for doing the DOM manipulation yourself. You could probably build React or another framework using jQuery at its core, if you wanted to. So we can probably argue jQuery is inherently more flexible, but that comes at the cost of simplicity. The modern frameworks build one kind of application model with less effort. So people would rather build that kind of application with those frameworks and save jQuery for when they have some need to do lower-level stuff. Not a lot of people have had to support legacy, so I feel like people are harsh on people who do. So long as the reason you pick "old" tools is the result of engineering analysis, it's not "wrong".
If only there was a way to take code you use often and abstract it so you don't have to write all that. Oh well.
No mention of symbols?
[Add react to your website in one minute!](https://reactjs.org/docs/add-react-to-a-website.html) Of course, all of this boilerplate to print one a single line when a button is clicked and still not even be really intuitive what is happening is not great in my opinion. I’ve used it before - I’ve started a RN app as well. It just feels like overkill.
As someone of Irish descent, I can verify this claim. 
Their first example: ``` $.getJSON('/my/url', function(data) { }); ``` vs ``` var request = new XMLHttpRequest(); request.open('GET', '/my/url', true); request.onload = function() { if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) { // Success! var data = JSON.parse(request.responseText); } else { // We reached our target server, but it returned an error } }; request.onerror = function() { // There was a connection error of some sort }; request.send(); ``` yeah... 
Is it just me or is there no link to your github profile anywhere? &amp;#x200B; Also consider using [netlify](https://www.netlify.com/) to host over github pages. It's just as free and you'll find it to be much better. &amp;#x200B; Last thing, just personal, I would choose colors that are a little easier on the eyes. As someone with bad vision, this is a little hard to read.
There kind of is such a framework - Backbone. 
Whatever you want it to be? I don't get the question; if it's more technical, the documentation is there for you?
 No.
IE doesn’t support async/await at all.
Wait... this s just a fork of [https://resume.carlosrh.com/](https://resume.carlosrh.com/) Lame :(
&gt; Frontend needs a Marie Kondo wake up. Lol. You should see my 150MB Spring Boot application.
OP barely changed anything [https://resume.carlosrh.com/](https://resume.carlosrh.com/)
Funny how years ago we were talking about unobtrusive JavaScript and that we should separate JS and HTML and writing code like this were discouraged: &lt;button onClick="doSomething()"&gt;Click&lt;/button&gt; But now we are back at it again. I like some aspects of modern JS libraries and writing modular JS is pretty neat. But I think we shouldn't have strong opinions about what is better or not. It all boils down to what your project needs.
OP didn't really do much here [https://resume.carlosrh.com/](https://resume.carlosrh.com/)
I can read documentation for anything. I was saying it wasn’t intuitive, and your reply that was to read the documentation. That should tell you something.
Just like OP! [https://resume.carlosrh.com/](https://resume.carlosrh.com/)
So I should write my own UI library? Thanks for the inspiration!
You transpile anyways, so wheres the issue?
So reimplement much of jQuery but worse.
You should have mentioned that this was a fork of [https://resume.carlosrh.com/](https://resume.carlosrh.com/) . Definitely would have saved credibility to me.
You could call it.... pQuery!
Make sure to credit the author then :) [https://github.com/carloschulo/react-resume](https://github.com/carloschulo/react-resume)
I don't have very much experience using Symbols and felt they would further complicate the post to include them. Also, I wanted to end with an implementation that still supported pulling out the raw value of a member value which isn't as easily achieved with Symbols. &amp;#x200B; How would you implement Symbols to create an enum?
Thanks to data privacy, we're not even allowed to use cdns in our company anymore. 
If you consider a couple of helper functions to be a UI library then yes
No, you're reading into it what you want to read. Before reading the docs of e.g. $.get, you wouldn't know what it does either, what the syntax is, what/where the response will be available etc. And for mere users of $.get, fetch is identical, a junior doesn't care and doesnt have to care what the promise is or does as all he sees will be the wrapper for it anyways. &amp;#x200B; Besides, the first response being a HTTP response and the second the content isn't antiintuitive in any way so I don't get your point at all.
Yes, wrapping a verbose function === rewriting jQuery.
I still have to support IE11, but with babel and polyfills I haven't run into compatibility issues in a while now. For the new APIs, sticking to the WHATWG spec and using babel-env solved some of the problems, but we try to not use then unless it's fully supported. There's always some alternative to them if it's not something fancy. 
That’s odd, although I can see for some businesses having full control over what you are serving to clients is probably a business requirement.
Because jQuery represents a time were browser compatibility was a pain. Web development was a pain. 
Chrome provides lots of native APIs. It's certainly a framework if you're building chrome extensions!
No, I don’t.
is that Greenspun's 15th law? ;) 
Please I just need help with the 1st and 4th
Not sure how inline JS is related to the topic. Anyways, while I agree that there is not a single style that fits every project, there are certain patterns that are a symptom of a deeper problem that will bite you sooner or later. For example, adding the same class to a list of elements is a weird thing to do in a properly structured web app.
https://www.w3schools.com/js/default.asp
you're an actual idiot if you think copying someones actual hard work and promoting it on your website is OK if you give them credit at the bottom lmao. You can't even be bothered to have a custom domain to make it look even legit.
Yeah, because you apparently prefer carrying around 33kb+ gzipped boilerplate with you of which youre maybe using 10-20% in most use cases.
people who don't use jQuery should write novels instead of programs if they like writing so much lol
Because if jQuery doesn't suck, then framework kids have nothing to validate themselves against.
Which has nothing to do with your previous comment?
What about fetch? Is fetch seen as a good replacement for XMLHTTPRequest?
That's why we have fetch now
I'm just a listener.
Worse, the idea that everyone is linking to the exact same version of jQuery is minimal. I don’t buy the caching argument at all unless you’re linking to the evergreen, minified jQuery, and even then we’d be having a conversation in my office about introducing failure points intentionally if some feature ends up with a breaking change. But no, we’ve shifted to vanilla JavaScript on the team I lead; just look at a JavaScript flare graph of main thread execution between jQuery and vanilla JavaScript sometime. If you care about performance, there’s much more to it than page weight.
It does? You're obviously using jquery, hence no transpiling. But most sites use jquery only for their XMLHttpRequest wraps $.get, $.getJSON and $.post which are admittedly easy to use - but so is fetch wihout an immense overhead, for the cost of transpiling, which wont ever be as much overhead as having the entirety of jquery around.
Or you could write a wrapper function that abstracts this behavior and use javascript like regular. 
You might want to deep freeze your enumerations if you're using objects; Object.freeze doesn't affect properties of an object, only the object itself: [From MDN:](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) function deepFreeze(object) { // Retrieve the property names defined on object var propNames = Object.getOwnPropertyNames(object); // Freeze properties before freezing self for (let name of propNames) { let value = object[name]; object[name] = value &amp;&amp; typeof value === "object" ? deepFreeze(value) : value; } return Object.freeze(object); } 
LOOOOLLL
It was not needed but it was very helpful when you had to do DOM manipulation during the 2006-2012 era.
 document.querySelectorAll(".myElements")forEach((el)=&gt; { el.classList.add("myClass"); });
A few wrapper functions abstracting distasteful api’s is the equivalent to writing jquery? What the fuck are you smoking?
Great catch! Thanks
Or you could use a framework that has all kinds of nice wrapper functions, I've heard great things about jQuery.
When I started learning JS, I refused to use jquery because $('#root') seemed like cheating compared to doc.getElById(root). 
That extra weight is requested by the browser *once*, ever, and if it’s a CDN being used by multiple web pages, it’s only requested *once* for all of them. If you are worried about that 27KB being loaded into memory on page old time, you must have a way worse computer than I do. As opposed to having to add webpack and Babel to my project and add to my build toolchain so that I can have JS in my browser that is harder to debug because it doesn’t match the JS that I’m writing...
was referring to the popularity of CSS. it wasn't exactly a common thing at the time on a lot of websites, people were still styling stuff directly in their HTML document
Well, what I call a mess is the fact that we need polyfills. Sometimes there are no alternatives for IE, like for the [Beacon API](https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API)
&gt; the idea that everyone is linking to the exact same version of jQuery is erroneous and far outdated in 2019. Yup. These days it's not uncommon for jQuery to be bundled along with the other vendor libraries which hurts caching for the bundler and non-bundler alike. I've never heard a convincing argument of why someone needed to include a legacy library unless it's a dependency for something like bootstrap, which is also removing it in the next version.
&gt; document.querySelectorAll(".myElements")forEach((el)=&gt; { &gt; el.classList.add("myClass"); &gt; }); You're missing a dot between the querySelectorAll function and the forEach chained function.
But it’s a large library which you likely won’t be using 75% of, so even if it has a lot of useful stuff in it the pointless bloat is generally not worth it. 
True but there’s a difference between writing inline javascript In html docs and targeting them later. Vs writing componentized javascript that is injected and destroyed as you step through your app, it’s written in one place, scopes to one namespace and is easily maintained. If you want to rip it out, go ahead, it’s easy. Jquery is a fucking inefficient monolith that isn’t so flexible, that’s why everyone hates it.
All I know is react, ha. And im being taught to hate jQuery. That being said ive seen only good stuff with it, like its pretty neat for advanced animations. So I find it quite weird. There are ways how to abuse any tool, write yourself into corner and all that. React included. 
I do love jquery but In times of Vue and React and Axios there is no place for it.
The way I have thought of this is this. Jquery = good for websites React, Angular, etc = good for web applications
I know, was partly in jest, but I do think that the blind hatred for anything framework is as bad as the blind hate for vanilla JS. As with anything the truth is probably somewhere in the middle (right tool for the fight job and other cliches).
why is the default response always "just reimplement jQuery yourself"? No fucking way, what a waste of time.
you're talking about the standard of CSS vs when it was adopted. You're right on the standard of CSS, but browser support wasn't anywhere near what it's like today, it took a long time to be able to actually use stuff like this
Fetch is a nicer API for sure. The thing to watch out for is browser support, with the understanding that the API can never be completely polyfilled ( but it's likely good enough for many use cases.)
8 years ago Microsoft 2010 was popular. You gonna use that too?
Ah, yeah I totally agree. I think nowadays people are pretty open to the idea of using the right libraries in the right situations. 
i don't hate it at all. it's a really great tool and deserves to be popular. some sites use it badly, but that's true of anything. jquery is actually good imo. 
See, I don't need React. All I need is jQuery.
Again, it's all about context. If you're making a basic page with some basic interactivity and not much else, who cares if jQuery is 100kb? The page will still load plenty fast, and it will do it's basic thing just fine.
do you have any specific references to back up what you're saying here? Can you show some code that actually would return different results in any of the browsers specified as "full" support on that link?
Who is suggesting that?
Worse, I’ve found jQuery being served by tag managers, overriding whatever’s being used on the site. Frankly I find jQuery dangerous to some degree, because the folks behind these analytics packages are effectively MITMing your site if you use jQuery on your site.
it's about 30kb minified and gzipped, and if you use a CDN and cache-control headers your client might not even have to download it at all. it's not a meaningful amount of bloat in 99% of applications. 
Oh, I'm certainly not advocating mixing them, but jQuery is no less right than react
Let me guess, you've left it to the last minute and now you desperately need help because your hand in is tomorrow? People aren't giving you the answers because you need to learn a lesson - the world doesn't just rectify the mistakes you make. Learn how to do it, find resources online, try things out. Get as close to a solution as you can, and then if you can't make it work, post back (preferably on /r/learnjavascript). And do your work as soon as it's set.
You're being downvoted because you're not asking for help, you're asking for answers. If you want people to help you, you'll need to show what effort you've put in to help yourself. Also, if you have an exam / problemset and you can't figure out the answers, there are better resources for you than reddit. Try online javascript tutorials, your textbook, you teacher. We have no idea what your level of skill is and can't just magically give you the knowledge that you need. You're going to need to think for yourself.
My team does it every day. Not sure what the problem is here. No frameworks, no jQuery. The web platform’s come a long way since I started doing this shit in ‘94.
That's what jQuery used to be. Not just for AJAX, but for all kinds of things. 
It also has a lot of code to support browsers which you probably don't need to support. So it's going to be more bloated than the native apis, which I've gotten much better, since jQuery was in its prime.
Yep. I still opt for axios, though.
Are you from 2010? 
I understand. You may downvote this comment
The problem with jQuery that I have seen is where React and Angular are eventually going. It’s a huge dependency that came to be used for everything. And I mean everything. Including things that it was never meant to be used for, and this led to code bloat, shoehorning, and slowdown. You’d see it everywhere: People including jQuery to write 20 lines of code that ran slower and crappier than 10 lines of vanilla JS that did the same thing. And with all the dependencies and plugins it simply encouraged sloppy coding practices. Other than that there was nothing wrong with it. It even popularized a number of coding conventions that became extremely useful and popular (like Promises). 
These langauges ultimately output html. It's mostly pointless to use express to just serve static html
jQuery does a lot more than just document.querySelectorAll
Yes, it's only a typo.
\&gt; myQuery
Nobody said otherwise. 
Lol, robot voice won’t hide Indian kid behind
I've been trying to write code but just a blank screen keeps showing up. Also, online everything is giving such complex programs and I just need literally the most basic and obvious code as I'm just a beginner. I just need the code so I can practice it at home as I need to perform (typing in the code) it in front of teachers, not just write and submit it (as the comment below suggested). Also all the forums are full of veteran coders posting complex code so I thought it wouldn't hurt to help me write level 1 code.I understand what you're saying though
What are you talking about?
Pretty sure the person you responded to was being sarcastic. Don't let your ego get in the way of your argument.
In modern JS you can do Ajax with the fetch API: &gt;fetch('my/url') &gt; .then(response =&gt; response.json()) &gt; .then(response =&gt; { &gt; // do something with data &gt; }).catch(error =&gt; { &gt; // handle error &gt;}) The polypill for fetch is only 500 bytes:https://github.com/developit/unfetch Instead of &gt;$(el).is('.my-class') you can do &gt;el.classList.containers('my-class') For querySelectorAll you can just make one reusable function for that: &gt;const $$ = (selector) =&gt; Array.from(document.querySelectorAll(selector)) And use it like this: &gt;$$('div').map(div =&gt; {div.style.color = 'red'}) For animations I just use CSS transitions and keyframes and use classList to add or remove class to trigger them. Oh yeah, and you can alias document.querySelector to $: &gt;const $ = selector =&gt; document.querySelector(selector) Then use it like this: &gt;$('#title').style.font = 'bold' 
Because your code sucks and you should be ashamed of showing it. /jest But seriously, coding style will differ between projects and companies. Neither is functionally more correct than the other, so why bother advocating dropping the variable? It's a waste of argument space. At any rate, I personally find the following more readable: document .querySelectorAll(".item") .forEach((el)=&gt; el.classList.add("red"));
so I just map it to $ and then I'm done huh?
The only reason we needed that sort of abstraction was because the shitty apis in JavaScript. With es6 jquery should be forgotton completely.
Well, that wasn't the answer I was looking for but thank you.
It was a joke. Sorry you didn’t get it. 🙄
http://mdn.com/
Holy wtf?? Why?
Whyyyyyy?! I’ve literally spent the past 3 days working on Jquery courses because I thought that was the best way to add functionality like slideshows. I’m trying to build my first website and every time I think I know the path I need to take and get a good ways down it, it turns out to be the wrong path lol. What would you recommend I focus on learning now that I have a decent understanding of html and css? I’ve taken a few javascript courses but none of them feel like they’re teaching anything I’ll ever use on an actual website.
[canipoop.com](http://canipoop.com) is a pretty damn simple vue app. I think jquery would make it significantly more complicated. Right click... view source.
This is right, however I would argue that this is true for jquery IF you were making web pages like we used to back when jquery came out. We now have html5 and all of those wonderful apis associated with it. Css3 and all of the wonderful capabilities associated with it. There’s no real need for it other than “I don’t know how to do with without jquery” at this point.
because learn how to write javascript already
This is kind of funny, and one of the reasons for jQuery... browser support and consistent capabilities. `NodeList` may not have `forEach` in every browser. The code above is missing an `Array.from` call (which is likely also unavailable in said browsers) or maybe the old `[].forEach.call(nodeList, iterator)` trick. It's this sort of shit jQuery handles for you without needing to think about it. I personally don't use it any more, but I'm also not opposed to it. To me, the arguments against it to me are superfluous. Size? Last I checked it's ~ 30kb minified. Most images on most media-heavy site are bigger than that. Facebook sdk is 2x that size. 
Because we've seen what happens when someone decides "I don't need a full Javascript framework for a new project, just jQuery will do", and it's the wrong decision. jQuery encourages a lot of spaghetti code that simply doesn't happen with something like React or Angular. Javascript frameworks encourage a certain structure that remains fairly consistent, while jQuery does not. It's not impossible to build a well-structured Javascript application with jQuery alone, but it nearly always starts getting hairy quite quickly. Also, on big projects it's all too easy to lose track of what classes are used for various things and accidentally add unwanted functionality to something when you just want to reuse some styling. For any application where a lot of the functionality is client side, Javascript frameworks do a lot more of the heavy lifting, and make jQuery redundant. The imperative style that jQuery encourages means you often have to write a lot more code to do anything than, say, using a React component, and the React component is simpler to reason about because you just pass it the data and it will re-render the component accordingly. I used to build Phonegap apps for a living and the first one I built used just jQuery and Handlebars, and it waas excruciatingly painful. After that I adopted a Javascript framework (first Backbone.js, then Angular.js, now React), and things were much easier.
So as someone that’s working on self teaching, what would you recommend learning after html, css, and javascript with a short term goal of building basic websites for local businesses and building a portfolio? Udemy has led me to believe jquery was my next step that would finally allow me to build interactive websites. This thread is telling me I was wildly wrong about that, and at a bit of a loss as to what I should be doing.
Reported for copyright infringement both on Reddit and Blogspot. Good luck, thief.
That’s pretty slick. Arrow functions are not supported in IE though, so it looks a bit uglier than that.
Can Confirm.
You're completely ignoring the fact that you have to learn Vue to build that. If you already know jQuery, that matters. And even if you don't, I think there's a very solid argument to be made that learning jQuery is easier than *any* modern framework.
My philosophy has always been: It's better to learn the underlying language (JS) than the language that's built on top of it (jQuery). Why? The more links you have in a chain, the more links there are that can break. Why add an extra library to your project to interpret jQuery when native JS can do everything?
I’m a victim of doing this using jQuery. Are you just using vanilla JS to invent the wheel for reuse?
It's only weird if you never took the time to think about it. 
&gt; I look back fondly on those simpler times too. If I were starting web development now, I’d be really confused. That’s definitely me right now. I have a decent handle on html, css, and basic javascript. I’m working on building my first website, and was under the impression I needed to learn JQuery to add interactivity to my website. I’ve spent the past few days working on it, only to find this thread at lunch and am basically panicking. I enjoy learning and working, but man I just want to learn the right stuff so I can succeed. What would you recommend for adding things like hover, click, scroll, etc effects? My understanding is using pseudo classes in css to do some of that will cause mobile users to need to tap things twice. Also I want to have a slideshow for testimonials, and my understanding was I needed JQuery for that. Doesn’t help that JQuery is a major part of every Udemy course I’ve bought, so I guess it made me think JQuery is a much more critical aspect of web design than it really is.
I think you're discounting the amount of learning and tooling your team had to acquire/build to get to that point.
Yes it is. Selectors are an anti-pattern in any application at scale. 
Can I quote you on this? Cause like ^^^^
People probably hate jQuery if they don’t know anything other than working on some framework which does all the UI job. In JS community, there is always library of the year. Personally I think only few libraries got famous &amp; hype by solving the right problems for the developers and they truly deserve hype. jQuery was one of them. But it may not be needed now as most of the methods are available in JS itself. I don’t doubt to believe, jQuery influenced part of JS standards today. There are some people turning away from es6 classes now with no real clue why they have to. Same here. So people hate jQuery if they really don’t know what value it served But there is nothing wrong in thinking I don’t need it. Prototype JS is another one in this category.
Given that one of them is a UI library and one of them is a DOM manipulation library, I'd say jquery is *always* less right for UI's. 
That is like saying it is still good and okay to use table views for your layout because just pumping that out that is faster than learning flex or css-grid. Honestly I would hate to work with someone with that attitude. I would definitely steer clear of that hire.
What would you recommend a beginner learn once they have a basic understanding of html, css, and javascript with the short term goal of building responsive and interactive websites?
&gt; If you're making a basic page with some basic interactivity and not much else, who cares if jQuery is 100kb That sentence doesn't make any sense. Why would you load jQuery for a "basic page" with "some basic interactivity"? Remember - the burden of Javascript isn't just about size - it's about parsing time (blocking the render and/or "first time to interactivity"). The more code to parse -&gt; the more CPU and battery required, not an issue for desktop but it's certaintly a consideration for mobile users and overall page responsiveness. Modern browsers have the same tools available as jQuery (`.append()`, `.remove()`, `.classList`, `fetch`) - are the APIs a little more verbose? Sure. But the additional overheads of loading jQuery often isn't worth it, particularly if your using another framework like React/Vue. 
&gt; Full means “to the extent supported by each browsers CSS engine”. That's blatantly false. CSS 3 is a standard. Full support means full support.
Symbols can be used in place of strings in your examples to enforce identity uniqueness that strings cannot provide: const LoadingState = { pending: Symbol('pending'), success: Symbol('success'), failure: Symbol('failure'), }; In this example, LoadingState.pending will only ever be equal to itself. You no longer have to worry about naming conventions or string collisions. This implementation will not give you a useful "value" though. If you need to serialize the enum values, or compare them in any way other than by identity, symbols are not the best option.
Nothing in JavaScript itself is or can be secured. Everytime you load a page, the source code is loaded (in plain sight, it's not even attempted to be hidden), so if someone is diligent enough, you can always get what you want. The security of a JavaScript application happens in its backend. Any "security" is likely just client side validation, which is only a nice way to nudge the user I to doing the correct thing. The backend does the real validation since it can't be tampered with. If you're serious about security on the web, you should learn about various attack vectors that exist for website. For example XSS (cross site scripting), and many others.
I don't really have a source, cause it's not something that can be easily put into words, but it's the gist I've gotten from the discord / blog posts about the upcoming Octane paradigm. \`@tracked\` and \`@computed\` are side-effect-free systems. Observables cause side-effects, and people use to \*cause\* side-effects. It's those side-effects that can be tricky to debug. With a combination of render-modifiers and @tracked, data-flow is much easier to reason about imo 
How in the hell is ~lines of code reimplementing jquery? [Here's a ~60 line implementation](https://github.com/maxogden/element-class/blob/master/index.js) of exactly what `.addClass` and `.removeClass` do. jQuery is 85k minified. Not the same thing, now is it?
Yes, the original did reject "12-34".
I don’t, the main thing about jQuery for me is it just wants to be too much and lots of its features are better handled elsewhere. I like it’s selector engine despite the new queryselector native method because it’s so backward compatible and I like the Ajax syntax for the same reason. But everything else can really go as far as I’m concerned. Plug me into the DOM and give me data link, in a backwards compatible manner, and I’m good from there... Ya know?
Updated [https://github.com/SoftwareBrothers/admin-bro](https://github.com/SoftwareBrothers/admin-bro) with relations between resources (belongsTo) - check out the demo [https://admin-bro-example-app.herokuapp.com/admin/resources/Comment](https://admin-bro-example-app.herokuapp.com/admin/resources/Comment) (comment belongs to category) 
No you did need it. The DOM APIs used to be a non-standard mess and cross-browser support was very difficult without something like jQuery (or Prototype, or Mootools) 
I'm curious. I prefer Axios as well, mostly because I've grown accustomed to it and am not very familiar with Fetch's API. Why do you prefer Axios over Fetch? 
You don’t know how to “double a number”??? If the number is 2, the result should be 4, right? That is such a simple “program” won’t be more than 6 lines. 
We use vanilla JS for purpose-built components to keep things light and fast. If we need a microlibrary, we make sure it’s going to cover all the use cases we face (or can extend from) and has to be dependency free. I used jQuery for 9 years and it served myself and my teams well from 2005-2014 as I’ve said elsewhere in the thread, but there’s simply no use for it anymore given the emphasis on UI performance, improved browser compatibility, and the face that ES6+ solved most of the remaining reasons for adoption.
Because it's 2019 and 99.9% of what jQuery does is native or just not needed. It's unneeded bloat.
Yes!
This is what I was hoping for, thank you for the link
Sure, agreed. And we agreed as a team we didn’t need jQuery anymore. Dependency-free microlibraries written in vanilla JavaScript do a fine job for us (when absolutely necessary) and are proliferating quite a bit these days.
where's all the other jQuery methods I need though? do you know how the browser cache works? sending your reimplementation of 1% of jQuery might take more time if they already have jQuery cached lol
Well *obviously* you're not going to hire the jQuery guy for your React company. But they might be building personal projects or projects to augment their own (non-tech) side business or something, and for a use case like jQuery serves well.
Security is done server side with a scripting language like PHP or .NET and a database. Javascript code can always be viewed by the browser therefore it isn't secure. You couldn't have a login with password purely in javascript, the server would have to verify the hashed and seeded password in a database and allow access to the secured pages.
If it felt like you were genuinely curious to hear about people who were different from you, and had different experiences, which led to them making different choices than you, I would *absolutely* explain. But it seems pretty clear your'e just here to to win an imaginary "who's right" contest you've created, and I think I'll pass.
Most of my professional projects need to support IE, and I can also use axios with the same syntax in my Node projects.
Yes, I know. I'd say that there's isn't a reason to use it nowadays.
Sure thing! So this jQuery thing, you can call/include just its AJAX module and it'll weight a few hundred bytes, right?
&gt; where's all the other jQuery methods I need though? If you need a ton of jQuery methods you're writing a shitty UI library and you should just use an actual UI library instead. &gt; do you know how the browser cache works? Yes, do you work for a company that doesn't rely on browser caching for performance? I do. &gt; sending your reimplementation of 1% of jQuery might take more time if they already have jQuery cached lol The HTTP request will be sent in parallel with your asset requests and at less than 1KB the round trip will overtake the bundle size by an enormous margin. 
I generally disliked using CDNs, up until the point my localhost dev machine hang because the bootstrap official CDN at https://maxcdn.bootstrapcdn.com shat the bad for a few minutes. From that point on, I say fuck CDNs (for light resources). If my server is up, it can handle the load of sending 30-50kb of extra data to each client.
jQuery creates an unneeded dependency tree if used willy nilly. Target one element using jQuery? Lol now your whole file has to have jQuery loaded before it. Can’t be async loaded either now. Huge pain in the ass especially now that ES6 has made DOM manipulation and targeting as succinct and easy as jQuery.
Do you typically just use vanilla JS for the things you can accomplish with jQuery? 
I am completely backwards. In my personal work is where I will experiment and try new things. At work is where I play it safer. If people aren't experimenting on their own, that means they are either doing it at work, which is crazy, or not doing it at all, which is lazy.
Full support for querySelectorAll doesn't automatically mean full support for all CSS selectors. On caniuse.com there are plenty of CSS selector features that are not universally supported yet.
Let me put it like this: I despise PHP, probably in somewhat the same way you dislike jQuery and it's implementation. A very strong part of me feels no one should ever use the language, and that all useful PHP projects should be rewritten in a *good* language. But practically speaking it would be incredibly difficult just to rewrite MediaWiki alone, faithfully, in a way that doesn't break the thousands of wikis based on it which are out on the web. So if someone wanted standard wiki software that everyone would be familiar with, but wanted a few custom features, I would be very hard-pressed *not* to say "well shit: you're best bet is to use MediaWiki and learn just enough of that filthy filthy PHP to implement a custom extension." Especially if I knew that person wouldn't be doing any other programming projects in other languages. Yes jQuery is not the most performant, yes it has a way bigger payload than is necessary, and yes, if you want to seek out, test, and connect a bunch of different micro-libraries instead of using a single "batteries included" library you can *absolutely* get more "bang for your buck", in many respects. But not everyone is, and not everyone cares about getting the most bang for their buck. Some just want the simplest path forwards towards being able to get basic things done., and jQuery *still* excels at that (albeit at multiple costs, which you've noted).
Were you doing web development before jQuery was around? Because at the time it was a godsend. Your argument is similar to saying you don’t *need* React, which is true but certainly not very helpful. Just imagine a future in which many of React’s design patterns have been standardized into the web platform: so you’d have web components, ES6, redux... all native in the browser. Do you then still need React? Not really, you know, and now that you think of it, webpack always was a pain.... so why did people use it again?!
it became the FL Studio of web frameworks. fine if you use it and deploy great websites with it, the end user doesn’t care about whatever flavor of the week framework you used. and the developers will give you shit because it is dated and not cutting edge.
Rewriting jQuery is a waste of my time, period. Why assume that I'm serving that from my own site. jQuery is served via CDN.
Clearly jQuery isn't for you :) But that's ok: different libraries with different concerns can serve different people. And even if library X really is the best library for 94% of the use cases, that doesn't mean library Y can't absolutely be the best option for 2% ... and the people in that 2% aren't wrong!
All I am saying is that in 2019, the times you should be grabbing jquery in a new project is the number of times that Donald Trump should have been president. 0 times.
Any one of the big three frameworks, they are your gate to interactive content: [https://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core](https://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core) 
Honestly the first example with getJSON shows how good jQuery. Even if it isn't necessary at all, you're getting data from a JSON file with a single line while the other example is almost 10 lines of harder to maintain and understand code. I'd rather stick to jQuery
Write pages in the style jQuery was designed? What does that even mean? I haven't checked, but I'm pretty sure that almost all page templates / wordpress templates still use bootstrap and jquery.
I'd argue that the fact that modern browsers essentially adopted core JQuery features is a testament to how successful jQuery was. I have nothing but respect for jQuery and believe that you couldn't have modern frameworks without something like it paving the way. However, I wouldn't use it in a new application.
Big corporations are years behind regarding OS or browser.
Learning some jquery is not a bad thing. Remember we're on a forum where everyone want to throw in their 2 cents. Picking up any knowledge is valuable. That said, if I were learning web dev from scratch today, I would first learn some basic modern JavaScript first, ES6. You don't need to become an expert at it, just learn basics like variables, assignment operators and other operators. Go over working with arrays and objects. Once again, no need for expert level. And, make sure you know how to create and call functions. For extra credit, you can go over the Map and the reduce functions. They are extremely powerful, and will come up a lot. Going forward, once you get an eye on those, start looking at modern frameworks. I would suggest Vuejs. It has the easiest API to pick up. As you learn to use the framework, you'll naturally get better with JavaScript as well. If later on, you opt to learn React or Angular, you'll be better prepared. I'd say React would be a better choice. Unlike Vuejs which has a healthy amount of syntactic sugar and framework specific syntax, React is much more reliant on pure JS. Some would argue that learning React will make you a better JavaScript developer. I'm not a fan of Angular, but that is simply my opinion. Last I checked, it required using Typescript, which is a version of JavaScript which essentially requires every variable to be assigned a type (string, integer, etc..). While there are surely benefits, I'd hold off on that at least for now, while your learning. Finally, remember this is a long journey. You will always be learning. And often you'll learn things that might seem like a waste of time, but just the mere act of learning something is a net positive and will help you in the hardest skill to master, learning how to learn. Best of luck, and sorry for the long response. 
&gt;What would you recommend for adding things like hover, click, scroll, etc effects? All of that can be achieved with CSS and JavaScript. Usually, you use both CSS and vanilla JS to get some fancy effects but there are plenty of pure CSS effects examples on Codepen. However, despite the animosity towards jQuery, there are lots of plugins based on it, so having a solid understanding of jQuery isn't a bad thing either, and you shouldn't feel that you have wasted time. I do hope that you have a better understanding of vanilla JavaScript as you should be able to replicate your jQuery code in JavaScript with ease. &gt; Also I want to have a slideshow for testimonials, and my understanding was I needed JQuery for that. If you're going to use a plugin, a lot of them are jQuery dependent like [Owl Carousel](https://owlcarousel2.github.io/OwlCarousel2/) or [Slick](https://kenwheeler.github.io/slick/). Then there are pure JS plugins like [Glide.js](https://glidejs.com/). If you're serious about web development, you're inevitably going to bump into jQuery, but what others have said ITT is true, with modern JS and browsers, there is no need to use it anymore, especially since it's a rather big library for something that's easily done in pure JS. It would be a good practice to start avoiding it if possible. jQuery most certainly isn't crucial to *modern* web development but it doesn't hurt to know it, so really don't stress about it. BTW, if you're keen on doing fancy CSS animations be sure to have a good grasp of transforms, transitions and the cubic-bezier function in CSS. With that alone you'll be able to make stunning CSS effects. Then if you combine it with the power of JS, the sky's the limit and all of that is without a heavy dependency like jQuery. The less dependencies there are, the better performance your site will have. I hope that answers it. &amp;#x200B;
Still no. That's just wrong.
Fascinating.. I didn't consider IE support as it's never been a consideration for me, and I've simply used Axios from start. I also never use JS/Node on the server (PHP &amp; Python guy here. 😊), but that's wonderful insight. I'll keep that in mind for the future. Thanks for taking the time to share your insight. Happy Sunday. 
I think you are confusing js and dom. JQurey where mainly Dom abstraction where es6 is js improvements 
[removed]
You can not learn much from haters. So do not waste your time trying to learn their mindset
Me. It's syntacyically hideous and messy code. I'm very glad I get to work with React and avoid jQuery these days. 
Users paying to receive that data care
No it's not. And a lot of the functionality in jQuery is still not standard. A simple example is setting `innerHTML`(vs doing it with `$(..).html()`) with some content containing a `&lt;script&gt;` (a convenient feature to let a server affect javascript state in addition to changing content). There are a million little details like that, and on principle, it's wise to abstract yourself from those and simply expect jQuery to provide homogenous behaviour. As web APIs evolve, it will always take some time for them to converge on the exact identical interpretation, especially given the commercial interest in "owning" an API (see the conflicts between touch/multi-touch related APIs, and realise if you just used a jQuery plugin for that, you need not know the denouement). The issues with jQuery are that: It predates the usual frameworks and isn't one. People tended to use it to create components, but the chaining and in-presentation data doesn't really scale well with complexity and hierarchical components. This made jQuery code quite horrible to maintain. It was also built long before unit testing was the norm and kind of gets in the way. If use of jQuery is restricted to abstracting the DOM it is still relevant and useful library.
Sometimes jQuery is all you need
[removed]
I know some developers who hated jQuery in the past, replaced it with VanillaJS and are back to jQuery now because they had to admit that if you use jQuery correctly, it's simply a timesaver. If you use VanillaJS you start to write your own time-saving helpers and in the end you'll end up with an individual function set which every new developer of the project has to learn first. jQuery is still a good common ground and speed impacts are minimal nowadays (speed was the main reasons these devs opted for VanillaJS in the first place).
that's probably just fine for small files. the cache-control header is the most important part in this case. for larger files, either find a more reliable CDN or just serve it from public S3 bucket. 
There’s tons of libraries out there that are more performant than JQuery for fetching data. If your using JQuery just for the purpose of requests then you’re doing it wrong. 
I was yeah (started professionally in '97), never got into the React stuff as I moved to doing back-end dev only before that. Still, I thought that site shows, like one of the other comments here, pointed out how jQuery is a lot clearer in its implementation than the native code provided. I'd chose readability over speed any day.
IE support
Hi /u/DreamyWonder, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
That depends on when/how it's being brought in. If it's in the head, then I would argue that it is a meaningful amount of bloat.
Well yeah honestly I'm not the most experienced in web dev but the thing is that even if it's doable with JS, it's not as comprehensible or easy to do as jQuery. My comment was just an example but the performance difference for loading jQuery isn't even that big if you aren't managing big projects where optimization is key. I find jQuery to be a great tool for web developing and many times it's worth using to get things done faster and more consistently
Take a look at this course by wes Bos, practical, fun exercises in pure Js , without any dependency
&gt; Don't come back at me with sources like well if they're on a 3G network and the download speed is x it'll actually take like .9 seconds cause I don't care. Dude these people are serving megabytes of JS "minified". Do you think they care about 3G users?
For larger files, I'll reluctantly serve them from DO Spaces / Google Buckets / S3 Buckets / etc.. But for JS/CSS? Never again.
Because of poor leadership.
Definitely don’t apologize. I get incredibly excited when I ask a question and see someone wrote me a long response. I definitely appreciate you taking the time to type all of that out, and am going to hop on Udemy right now. My biggest issue is I get stressed out because learning this is my way to a more financially secure future. I’m currently in the oilfield and stress on a daily basis about ensuring I don’t depend on oil to provide for my family. So while I know it’s a long process, it’s hard for me to chill and just study at a relaxed pace. Thanks again though!
Pretty sure hardly anyone uses more than 25% of any given library.
they pretend to for the sake of argument at least lol
&gt; Hell you could find people hating C because is not low level enough What are you talking about? C sucks, real programmers code in binary. Jokes aside I used to think when I was little that programmers had to do everything in binary and it looked like a terrible job
Thanks for the thorough response! Every day I realize there’s more and more I don’t even know exists. I’ll be giving all of that a look, thanks.
It's ok to have no clue, don't worry.
Before I say any of this, I just want to let you know that you haven't led yourself astray or anything. It's not like you went and learned knockout or MooTools; jQuery is still used widely. I would, however, recommend delving into either the native browser APIs or a SPA framework (my preference being React, but you need a solid grasp of JavaScript for that). But if you know jQuery, and build stuff using it, there's nothing wrong with that; just try to move on to more modern tools when you get the chance. All those things can be done with the native browser APIs. The DOM provides native support for events like "click" via the addEventListener method. A slideshow can also be done with vanilla JS. You could have an array of image src's or elements or something and toggle through them when you click an arrow
Yes, when you're making a todo app. Anything more advanced than that, jQuery is certainly not either needed or a good choice.
I usually just do toggling/adding classes and using CSS for animations and transitions, there aren't many cases that isn't enough for me. 
I have stoped using jQuery and converting all my code to Vanilla JS, why? Because i want to be come better JS dev
No problems, glad the post helped. And don't hesitate to ask more questions if you have any.
I don't hate it. It's great for simple DOM manipulation but for large scale projects something more robust should be used. I'm just annoyed by all the devs I've met that think it's the end all solution. I recently started a project and this is the conversation I had with the front-end lead. Lead: "we'll use html5, bootstrap, ReactJS and jQuery" Me: "okay but we shouldn't need jQuery if we go with react" Lead: "but we'll need jQuery for the carousel" Me: (wut) "React is fully capable of taking care of that in fact there a tons of packages already available for this" Lead: "okay we'll go with just React" We're developing in jQuery...