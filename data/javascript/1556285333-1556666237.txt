because you import a library to pass 2 parameters to a function? and you also have this code &amp;#x200B; ***const B1 = f =&gt; g =&gt; h =&gt; x =&gt; f(g(x))(h(x));*** &amp;#x200B; like if you are on a team... never do that on a real project...ever
How can I clear the list of uploaded files after transfer is completed? reset() seems to be the only method available.
Seriously, you are way over complicating things. For the sake of what? Not repeating your object twice. Btw, window.document is in the global scope. Why would you even pass it as an argument?
I don't like how the arrows are backwards on some of them, such as Slide 10 (Lifecycle). It reads like a Japanese comic.
Nicely programmed from what I was able to see on github. I'll make sure to dig into the source code more when I get some more time.
It's tough because pretty much all info is outdated. Basically you need to understand the main webpack concepts Loaders, plugins, optimization So read through the webpack docs. You need css, sass, postcss, style, Babel, file, svgr, url loaders. Then you need to use HTMLWebpackPlugin to inject the scripts to your index.html file. And extractminicssplugin to use in your production webpack configuration to put the css in a separate file. And then optimizecsspkugin to minify it. Then terserplugin to minify js even though it's the default but because you used optimizecsspkugin. Then And copywebpackplugin to do what CRA does with the public folder. Then optimize splitchunks all and runtime chunks. Then realize everyone needs all these things and the fact they aren't standard is mind bogglingly dumb.
`function withMultipleParams(param1, param2, para3) {` `console.log(param1 + param2 + param3);` `}`
Does it include or are there plans to add image cropping options? Or is that outside the scope of the Uppy team's goals?
Find something that bothers you and develop a solution to fix it. The only realistic way to advance is to exercise your problem-solving skills. To do that, you have to know the problem intimately. The best candidate for that is a problem you actually have. &amp;#x200B; Languages, tooling, engineering practices, they should serve the solution to your problem, and be determined by that, and not vice versa.
Find something your passionate about outside of programming and use that for your topic. For example, I found that when I was learning a new view library I'd make an informative site about a video game I liked. I really helped drive the passion to complete it.
Cropping is on our roadmap yes! [https://github.com/transloadit/uppy/blob/master/CHANGELOG.md#backlog](https://github.com/transloadit/uppy/blob/master/CHANGELOG.md#backlog)
reset() is all we got, indeed. What would be a better workflow/api? Happy to see if we can improve there
I expect never. I find JavaScript as a language to rick feature set which is rarely matched and have been part of the language since it's first versions. functions as first-class citizens, closures, prototype-based composition etc. The fact that a ton of new javascript features could be seamlessly polyfilled for older runtimes in runtime is quite exceptional. Javascript is in the forefront in capabilities within the domains it occupies as a programming language. There are a lot of features and capabilities missing in javascript when considering non-javascript domains like stronger typing, functional programming, and system programming. The language has had new features added to it with keeping backwards compatibility which has hastened the adoption. Javascript tooling ecosystem is rather unique, it's extremely fast-acting and has given birth to transpilers and compilers. Unlike many other languages, obsolete features and patterns are discouraged by the use of linters instead of removal from the language. These have allowed the JS ecosystem to grow both **wide** and **tall**. TypeScript and Svelte are examples of compilers that extend the javascript language to new domains. Critically they do it by extension, not by hiding and relegating the underlying programming language to a dark dungeon underneath as a second-class citizen while keeping it out of sight of the developers.
I think what you're referring to is called a flowchart.
This is how the button looks in the dev console: &lt;input type="button" name="btnSubmit" id="btnSubmit" value="Create Bug" runat="server" onserverclick="Submit_Click"&gt;
Typescript is just a superset of Javascript with types. It does get compiled down to JS your browser can understand (either via the Typescript compiler, or a tool like Babel), but the main point of it is to provide types for JS.
Awesome!! Good job guys, it’s just perfect!!
I've observed on my team that Cypress tests are very slow to run, especially in the CircleCI/CD pipeline. We're looking at 20+ minutes usually for 42 test files. Sure, some of them could probably be written more efficiently, but generally it seems the pipeline is slower to complete test series.
Been using this for a while now, along with tusd. Awesome work guys! :). What are the current top priorities for development? Maybe I can contribute in some way.
Can you elaborate on"types"?
Hi /u/gohuq, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sucrebucre, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/WrkThrwAwyyy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/blackjackap, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/awekening_bro, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/lhansen38, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jefexon, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I liked C# enough, but eventually I ended up relying on peeking at the runtime type information. Additionally, when writing the umpteenth Tuple&lt;Foobar&lt;Blah, Kalaa&lt;Blah&gt;&gt;, Xyzzy&lt;Blah&gt;&gt; I finally said "Duck it!".
Hi /u/ghorio-fuitton, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TuckerMcInnes, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
lol I tried to drag something into that image that says "drop files here"
Very much appreciated! High up on the list where we’d like community help is fleshing our more providers (Facebook, google photos, box) and locale packs (translating uppy to other languages). But help in all departments is appreciated and you can see your roadmap for 1.1 as well as our backlog here https://github.com/transloadit/uppy/blob/master/CHANGELOG.md#backlog Hope to see you in the GitHub tracker or on our community forum to talk further!
I wasn't aware. Do you have a source?
Recently discovered Uppy and was very impressed. You guys have really done a fantastic job. Thanks for the hard work and congrats on reaching 1.0!
I think this article is intended to be an example of using combinators with curried functions in JS. It's not something I would do in production, but there's definitely value in learning about lambda calculus. \&gt; Btw, window.document is in the global scope. Why would you even pass it as an argument? I'm guessing this has something to do with not relying on global scope. A real-world reason to do this is to allow dependency injection during tests (you could pass a mock \`document\` to the function). The \`arguments\` object isn't really useful in curried functions.
Neat article. I wouldn't do any of this at work, but I could see trying to build a simple side project in this style as a fun experiment. Your \`complimentPerson\` function is probably the first combinator example I've seen that actually clicked a little. I'm curious if you actually use combinator functions in real projects? If so, what kinds of projects are they?
[https://www.w3.org/TR/2011/WD-html5-author-20110809/the-a-element.html](https://www.w3.org/TR/2011/WD-html5-author-20110809/the-a-element.html) The a element may be wrapped around entire paragraphs, lists, tables, and so forth, even entire sections, so long as there is no interactive content within (e.g. buttons or other links). [https://davidwalsh.name/html5-elements-links](https://davidwalsh.name/html5-elements-links) he shows it as a new feature. I'm having problems finding it's specific note in older html versions. However it was not correct to have block level inside of inline elements. You could put inline elements like img elements inside of inline elements however.
Something that bothers me about FP writing is that it often ends up being presented as an end in and of itself. For example, I don't see how import {converge} from 'ramda'; const complimentPerson = converge(compliment, [firstname, lastname]); is supposed to be better than just: const complimentPerson = p =&gt; compliment(firstname(p), lastname(p)); To borrow a quote from music: "repetition legitimizes". In this context, I mean that repeating a pattern of using `p` and straight up function calls means the code is far easier for someone to understand because the pieces are familiar to just about anyone who's ever written code in any mainstream language. If you aim to deduplicate tokens at all costs by introducing unfamiliar high level tokens such as `converge` instead, you're actually losing clarity (because remember, code should aim to be readable, and effective communication entails that the reader understands what you wrote). To make matters worse, the FP style in this example introduces far more code and runs slower.
Ask your senior developer for a code review for that code. But to learn to do better in general... Learn about code patterns. Learn about refactoring code. Learn about clean coding. There's plenty of information on those topics out there. And write code. Lots and lots of code. You improve as you practice.
That’s a specific type of combinator pattern used in lambda calculus, quite common for functional programming. You would probably find it’s use in Haskell or other pure FP languages like PureScript, Clojure, ClojureScript, OCaml, etc. I might be mistaken, but this might be the “blackbird combinator.” http://hackage.haskell.org/package/data-aviary-0.4.0/docs/Data-Aviary-Birds.html https://github.com/benji6/combinators-js/blob/master/README.md
Post it here and give us a go at it
Awesome! I need that right now any chance you can get that done today? Just kidding, that's great. I am actually working on implementing Uppy into my application today which is why I asked because I have been researching image cropping/optimization libraries to go along with it.
“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” ― Martin Fowler
Many of these commenters grossly misunderstand the purpose of this article you wrote (which pretty good, btw). I’m sure some of them have never even heard of functional programming. Functional programming can seem overly complex if you’re doing something very simple with just a few lines of code. In JS, most people just opt for imperative code to get the job done quick. But while restraining the urge to write imperative code might be difficult, the benefits of functional programming become much clearer as your codebase expands.
Lol post the code
These are awesome, love the "[**Queen’s Gambit**](https://js1k.com/2019-x/demo/4211)**"** one the best. Awesome work :)
Thanks!
[Protocol Labs](https://protocol.ai/) is hosting the first-ever [IPFS Camp](https://camp.ipfs.io/), an action-packed hacker retreat designed for the builders of the Distributed Web. This unique experience is an opportunity to learn more about the IPFS ecosystem, meet our core developers, and collaborate with other contributors and community members. [IPFS Camp ](https://camp.ipfs.io/)features three days of hands-on workshops, lectures, deep-dives, activities, and more with our IPFS team, plus **150 other pioneers** in the Distributed Web space! &amp;#x200B; It will be held in **Barcelona** on **June 27-30** at the beautiful Campus la Mola. &amp;#x200B; We are offering a limited supply of diversity and need-based scholarships. Visit [https://camp.ipfs.io/register](https://camp.ipfs.io/register) to learn more about IPFS Camp, scholarships, and what’s included in your conference pass. &amp;#x200B; *See you in Barcelona!*
Ehhh...you're not really abstracting any generic behavior away from specific behavior, which is why you end up with such confusing code that doesn't really give you any more power. If you're new to functional programming, it'll probably help a lot if you just focus on abstracting along the correct lines instead of just throwing rambda functions at everything
Why is Preact a [dependency of Plugin class](https://github.com/transloadit/uppy/blob/master/packages/%40uppy/core/src/Plugin.js#L1)? Is it really required if I want to use @uppy/core in my app? If would like to write my own dashboard UI for different framework e.g. Vue, why do I need a preact?
I'll have it ready for you yesterday! :D Kidding aside, if it's something you have specific ideas around I'd love to talk! Maybe open a thread on our community forum
Not sure if it is possible, but I’d try writing tests then refactor. Before looking for libs try to fully understand arrays and built-in methods (forEach/map/reduce/etc).
I'm guessing that a lot of the work is also trying to make the plugin work on various browsers and platforms. How do you run cross browser testing?
I can offer a use case where this would be needed. A single page application that has a re-usuable upload dialog. I haven't tried the library yet so maybe this isn't an issue for reset().
I've kinda gone full-circle myself (I wrote a fantasy-land compliant stream library a few years ago, if that gives you any idea where I am on the FP familiarity spectrum)... ... and I have to say, I'm not very convinced that FP provide as many benefits in JS as it purports to. For example, it isn't really idiomatic in any major OSS project, interop is notoriously bad in JS (e.g. `map(parseInt)` anyone?), stack traces are just not nearly as good, the language itself is terrible at optimizing FP-style code, etc...
I think you raise a good point and we should try to move Preact out of that base class! I'll raise this issue with the team! Or, if you like, raise it yourself in GitHub? Then you'll also be notified of our progress
This would work though, you can drag another file in there, and only the new one would be uploaded--or you could script it so that reset() is called automatically or when the user acknowledges something. But if that's either cumbersome or I'm overlooking something here then please do follow up? (here on on github/forum)
Break it down into smaller functions.
We do manual testing via Browserstack and have been using Sauce Labs in conjunction with Travis CI for automated testing of each commit. We also automatically list success of each browser we test at the bottom of this page: https://uppy.io/docs/stats/
Yeah I can definitely see where you’re coming from on those points. As far as FP style being idiomatic, I’ve found that most of the time, if you structure large segments of code to work within the FP paradigm, it works very well, and feels idiomatic. The problems usually stem from people writing imperative code because it’s the path of least resistance, and then you wind up working with it in awkward ways. The best experience I’ve had with FP has been using PureScript, which provides a really good compiler, with good error messages. It really cuts down on the runtime errors, so stack traces aren’t as big of a deal. And JS interior is pretty easy with it. But it’s definitely a steep learning curve. As for performance, I can’t argue with you there. If functions could be identified as pure in some compile step, and then optimized for runtime, that would be nice, but as it stands, the interpreter has to assume the worst case scenario for each function call, which adds a lot of overhead. I don’t see a way around that, except to inject some imperative code under the hood for more expensive operations (Ramda does some of that, for example). IMO, the best experience is finding some middle ground. I prefer to have my application be pure as possible, but use imperative or OOP paradigms where it seems reasonable to do so. But at least I get some of the benefits of both worlds.
I think it's more an issue of just needing to be able to clear out the area. Again, I haven't tried it but that sounds like what the other commentor might be describing. The library looks really good though and I'm looking forward to giving it a spin.
I'm also doing it, sorry: What does Uppy better compared to fineUploader in your opinion? S3 upload, files from 50KB to 250 GB and batches of up to 500 files. (Chunked uploads with 300Mbitps) Will have a closer look for sure! Thanks for the post :)
No worries, happy to talk about the details :) FineUploader was a big inspiration and we've been in talks with Ray Nicholus (and have nothing but praise for him and his project, it's amazing what he as a single person in evening hours accomplished way ahead of our attempts) but he has now stopped supporting it. Regarding resumable uploads, FineUploader used a custom solution while Uppy uses tus.io, which is an open protocol which makes it easier to create implementations for ~all platforms (and so this has also happened). Uppy also lets uploads survive browser crashes and accidental navigate-aways. It optionally offers import from Instagram/Dropbox, Webcam support, etc. So it's not that tight a feature overlap when you compare the two projects. Uppy is modular so it's easy to write new Plugins or disable a whole bunch that you do not like. Many more differences and happy to dig in deeper but I hope this helps already!
This is nice.
Thanks for the quick reply and feedback. I was reading #59 to get an idea about the history. Great story I must say! I like the (real) modular and plugin approach. A MIT licensed project regarding browser based uploading is an important thing to have. We will have a proofing implementation and hopefully a trail on some user groups. I'll hook up on GitHub :)
I think JavaScript is the _best_ language for beginners. It's reasonably simple, _exceptionally_ well documented, and in order run some code you just have to open your web browser. Another common beginner language is Python. The syntax is arguably a little simpler. But the documentation is really mediocre, and in order to run anything you need to install a bunch of extra tools. I would go with JS.
Sweet, I'm sure I could just click the link but for the sake of discussion do you guys accept PRs?
Nice find! I'll link for convenience https://github.com/transloadit/uppy/issues/59 :) Hope to see you around!
&gt; do you guys accept PRs? Yes! It does help if they have tests and some early-stage discussion with the team : )
Maybe OP, if doing graphics, would be best off with JS and Canvas. There are a lot of examples, and they are easy to run too. https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial
Awesome, once I clear some stuff off my plate I'd love to contribute. I have been meaning to get involved in OSS contributions for a while.
Any chance you hacked a solution to the just-under-2GB file size limit that browsers have with uploaded in general? ( I’m assuming that stems from some set of 32-bit binaries/libs that most browsers rely on or something)
Oh, I did that a while ago. Didn't get too popular though :(
Please don't choose JS as your first language. JS is crap. The only thing you learn from using JS is what you shouldn't do. JS is ok for quick and dirty things if you know what you do but not as a first language. If you want something close to JS or if you want to develop for the web go with Typescript. If you want something cool and modern try Kotlin.
jQuery actually passes some global objects like `window` and `undefined` into their library functions at initialization, to avoid conflicts in case someone overwrites those global identifiers (why anyone would ever do that is another question). In FP terms, they are accounting for potential side effects (reading mutable external variables) in the global namespace. The testing example you offered is doing the same thing. But more generally, in FP, a function is only considered pure if it confines its operations to locally scoped parameters. Any variable/object/function you work with inside a function should be passed in as a parameter. This clarifies the function’s purpose, forces you to account for the function’s dependencies, and limits side effects.
This is a good point. Using combinators is more about having some sort of universal control flow for your functions. It looks cleaner and more logical for longer compositions involving multiple combinators (which a team using Ramda would already be familiar with). It just standardizes the composition logic so the reader doesn’t have to keep track of the flow by visually parsing through a nested series of partial applications. But I hear you on performance. That’s why I don’t use FP for highly expensive operations. FP is more useful at a higher level in the application for managing state transitions, at least in JS.
I'd recommend trying it one step at a time. CRA does \_a lot\_ of stuff so instead, trying building your own web pack configuration from the barebones and then add more as you understand it. &amp;#x200B; Assuming you know React, try to build a configuration that points to your entry point (e.g. \`index.jsx\`), has a rule to use \`babel-loader\`, and then output to a directory. Once you understand how the rule works for babel, try to add a new rule to handle your CSS. Once you're familiar with the rules, you can move onto learning about production builds (e.g. optimization, production-specific plugins, etc). &amp;#x200B; As another post says, try to read their documentation -- it's pretty good. Otherwise just google something like "React web pack bootstrap" and look for articles written more recently and inspect their repositories. &amp;#x200B; If you have any questions, please let me know!
A bad developer blames the language.
JS at scale takes discipline and structure. Typescript helps a bit with that. But JS is a beautiful language. It’s insanely flexible and doesn’t put you in a box with your coding style. But that flexibility can come back to bite you if you write a bunch of spaghetti code.
A good developer chooses the right language for the job that has to be done.
We use the tus.io protocol under the hood for resumable uploading and yes, we support much larger files than that thanks to it.
That's why I think JS is a bad choice as a first language. If you know how to structure your code, if you know what you do you can write a cool app with every language but if you are new in this business it gives you too much freedom an too little structure.
Great explanation!
That’s probably true. It’s a tough call IMO. If someone is teaching themselves from scratch, it’s really nice to get that instant feeling of power when you can imperatively render stuff to the browser. It’s a good introduction to the world of programming. But you’re right. JS is way to powerful to manage when working on teams with large codebases. Opinionated frameworks and compiler type-checking can make a world of difference.
I don't think it ever can. Java is the defacto language of mobile devices and it's taught in school. The fact that a language you have to learn outside of school is doing so well is amazing in its own right.
Let's break the 'job' down then. &gt; One level, a platformer with a square &gt; extremely simple &gt; I just have no knowledge of any languages So the 'correct' language needs to be 1. Easy to pick up and 2. Able to create a simple platformer /u/delventhalz already hit the nail on the head as to why JS is a *perfect* first language. It is interactive and fun to write. You see results quickly. It's very well documented both officially and in the form of stackoverflow &amp; similar. It has an extensive network of frameworks that would allow OP to do exactly what he wants to do. &gt; The only thing you learn from using JS is what you shouldn't do This is so untrue I can only assume it is an attempt at a joke. Learning JS is a great way to learn how programming works, the basics and beyond. &gt; JS is ok for quick and dirty things It's also the only way to do certain things, especially within the context of web. Popular languages are popular for a reason. But you seem the type of person very set in their ways and not open to differing opinions so maybe I'm wasting by breath. But hopefully, at the last, OP does not listen to you.
Hi /u/Krebota, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Looks better than 99% of what I’ve seen as a user. I’m old fashioned so I like to see device, url, or camera distinguished from anything tied to a corporate entity. But maybe that’s for downstream devs to decide.
For Python, you could use Bokeh though. They keep advertising it for our group project, but I'd rather dive into JavaScript since it's easier to implement along HTML and CSS.
Jesus these TS fanboys are becoming _really_ unbearable...
Cool! I’ll def check it out. Thanks.
If you have never programmed before maybe try something like [Scratch](https://scratch.mit.edu/) - don't ket the fact it's for school kids put you off, it's designed to buil exactly the stuff you are after, and it introduces a lot of the concepts you'll use later.
Any tips I can give you without looking at your code: * Prevent many nested loops for code using big data, since the time to deal with these nested loops can grow exponentially * Work with several smaller functions * See if you can make the code recursive, it will often save both code and running time * If you're new to JS, is there any other language you know of? If not, try psuedocode (not an actual language, just a way to write down algorithms) and try to come up with a better algorithm, which you then translate to JS.
Working with CSV you might really appreciate this library: [https://www.papaparse.com/](https://www.papaparse.com/)
Looks awesome, but just a question, where can I actually download it?
Looks good, but how do I know that this will be supported for other computers that don't have the library installed? Is it supported on many browsers? Also, I kinda want to know why my piece of code isn't working, since I tried something like it a while ago in Java where I had no issues.
No. That's why we have windows and a right to privacy. Would it be a legal search if the police saw something through the application? Also, who controls when the application is active?
You have an infinite loop. The slice never matches `vertices[0]` because the slice always has a space in front of it. So `" Marco"` is different than `"Marco"`. And then, when the search reaches the end of the string, you don't have an exit condition. You reach the situation where you only have the final `" 1"` and you do `input.indexOf(";")` and that is always `-1` and nothing else is found and but the loop never exits. Finally, this is not the appropriate subreddit to ask this. Use /r/LearnJavascript to post such questions.
I tried the Dashboard and uploaded a text.json via "from device" (2b `{}`). But in the code snippet below the dashboard I saw `allowedFileTypes: ['image/*', 'video/*']` ...Became curious, you actually use the same in app.js -&gt; `allowedFileTypes: ['image/*', 'video/*']` Are JSON files just allowed by default, not "opt-in"?
Thanks, I was looking for this, I implemented the ' 7.1 Naive Client State' and was looking for to change the client state. I am making online game with React, Redux, Websockets and NodeJS.
Thanks for asking this question because I'd been wondering about this too for a new gym / office hybrid idea.
To a certain extent, the whole problem lies in your own words here: &gt; [...] familiar [...] unfamiliar [...] If `converge` is familiar in your context (team, project, etc), then the first way may indeed be "better" (for some values of "good"). If `converge` is unfamiliar in your context then the second way will surely be "better". And so the argument mainly becomes one of things that are familiar or not, of the context of your code, and, in part, also how much interest one may have in _changing_ what is or isn't "familiar to just about anyone who's ever written code in any mainstream language".
&gt;Looks good, but how do I know that this will be supported for other computers that don't have the library installed? Is it supported on many browsers? You include the script with your website files just like you would anything else. As for browser support, check the FAQ.
https://github.com/shipshapecode/shepherd/issues/351 Seeing issues like this just makes me sad.
You should look into the `split` method : [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/String/split](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)
Not a resource per-se, But, I built my own simple, barebones full stack boilerplate, which does not use CRA, and has a basic webpack config Maybe looking at it might help? It might de-clutter the concept because it really is bare bones. Mostly what you are learning is webpack. You will note that I have a comment in the code (line 24), I did not create a .babelrc file, because you can do it within webpack config or babelrc and it’s the same. It’s good to understand webpack, and it’s not hard to understand conceptually, but debug is a fucking bitch. Best way to learn is to actually build from scratch. https://github.com/stevenjchang/steves_boilerplate/blob/master/webpack.config.js
&gt;Looks good, but how do I know that this will be supported for other computers that don't have the library installed? There is no such thing as "installed libraries" in JS. Everything is sent to the browser, either directly from your server or through a CDN. So the simplest solution is to include the script of the library in the HTML.
I fail to see what this has to do with Javascript.
Hi /u/getcheckapp, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Krebota, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mariusAlch, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nav3t, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/gntsketches, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Let’s look at all the various jobs currently performed: * A variable’s value that has not been assigned: undefined * The value of an object property or array index lookup when that property or index has not been defined: undefined * The value returned by a function that does not return a value: undefined * The value of a function argument that was not passed: undefined * The value used to explicitly set a type unspecific empty value: null or undefined * The value used for empty values in dom operations: null * The value used to explicitly define a type unspecific empty value in JSON: null Almost all of the above uses are conceptually distinct. The fact that JS separates these concepts among two things while other languages only use one thing is merely an arbitrary decision based on desired, but unenforced coding style.
Hi /u/7rulyUnkn0wn, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/onedaycanada, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
#No.
It really depends on the use case. To display or process data without affecting single entries based on specific events I would use arrays, otherwise if you have to process data at specific events I would an object with the items IDs.
have you tried data uri?
Does it work without js? I had a pure css file upload and it was beautiful. A js one would be cool if it worked without it.
Honest question here : Isn't it like the two-way data binding that AngularJS is(was?) using ?
Hey, the creator of Markeroo here. I’m working on this project as I believe it has a lot of potential to offer completely customisable, yet simple documentation websites. Complete with search, markdown support, custom scripts, using NPM packages, or any framework. I’m planning on creating a full-feature dashboard as well, which will help manage the structure. In the meanwhile, it uses a JSON configuration for the structure.
I’m just starting really deep diving into front end development and I already realize that I myself much prefer the world of JavaScript frameworks over css and HTML. Which is strange to me because my whole life I’ve loved great design and fine art, but I find CSS endlessly tedious and frustrating.
 const mergeById = (a1, a2) =&gt; a1.map(a1mem =&gt; a2 .filter(a2mem =&gt; a1mem.\_id === a2mem.user\_id) .map(a2mem =&gt; { return {...a1mem, country: a2mem.country }})\[0\])
What are you using react for? UI?
All approaches suggested so far run in O(m*n) which gets quite expensive once the arrays are large enough. What you probably want to do is convert both arrays into a dictionary user_id =&gt; value and then build a new array from that dictionary. What’s supposed to happen when there is a conflict in the data e.g. same property in both arrays?
Yes, that's actually what I use to show the images after un-scrambling the blob. By itself, it's a good solution to prevent right click + copy image location, but the urls are still visible in the devtool's Network panel.
Idea: a1.map(el =&gt; { user_id: el._id, country: a2.filter(i =&gt; i._id == el._id)
I like the terms 'front-end designer' &amp; 'front-end developer'. They specify the focus (front-end) and the role they play on a team (design or development respectively).
Familiarity can be _very_ relative: people change jobs, new team mates onboard, and not everyone in the team is necessarily doing FP all the time. Maybe they do more backend and only dip in JS once in a blue moon and need to look up a lot of things when they do. Maybe the juniors hate it but just put up with it because they don't have leverage against the FP-crazed senior dev. Maybe `converge` (or whatever other combinator) is familiar to you now, but also maybe you had to look it up the one time you needed it and three months later not even you remember what it was anymore. Or maybe there are so many different combinators in use that people simply can't remember them all. In contrast, `foo(p)` is about as basic as code gets and there's very little chance that it won't be understood due to some random reason. &gt; how much interest one may have in changing what is or isn't familiar Having worked for many years in the industry, I don't think it's entirely a matter of will. There's opportunity cost and also - unpopular as this statement may be - not everyone is talented at programming. I know very competent frontend people who would never in a million years grok full-on everything-is-curried point-free style (what they do excel at are other areas such as a11y and UX and team/project management).
Going to try this out tonight, I'll (hopefully) report back.
I'm the same way. I prefer *programming*, and leaving the beautification to someone else. That being said, I'm of the old school mindset that front end development *must* include basic understanding of HTML and CSS. Maybe not to the degree that you know how to write CSS for 60FPS performance, but if you *can't* write CSS and HTML, you are not a front-end developer yet. Same is true if you can *only* write HTML and CSS. If you're not able to deliver a total UI solution, then you have some more experience to gain. Modern SPA frameworks inextricably link the writing of markup, and presentation logic. You can't just hop into Angular and go "I'm only going to write TypeScript today" or "I'm only going to write HTML today". You won't have a UI unless you write both, and wire up the relevant properties and bindings.
I think that it would go a long way to invest some time into your readme doc. It’s the “landing page” for your repo. If I can’t get an idea of what this is, does, how its different, or how to contribute, why would I invest my time into this? Not trying to be mean, but just giving you an outsiders perspective.
I would guess through progression that would be figured out. But wouldn't the officer also be apt to see something when they walk to your window? So it would't be something you would have to download more so a link that connects you with him through a video call.
Planning on developing this type of application using Javascript
if you're worried about your showing up in the devtools panel.. there is no way to prevent it
Like all things, this depends. If it's a small data set, worrying about time or space complexity is meaningless, even *problematic* if it results in less elegant code that has to undergo more transformations and more variable hand-offs.
Sounds like you may hit a bug! Would you like to report it to https://github.com/transloadit/uppy/issues so we can take a closer look? If not I'll add it myself (but then you wouldn't get updated)
You can install it from npm and build just the components that you want when you use a bundler like Webpack, or you can use a prebuildt bundle straight from our cdn with `&lt;script src="https://transloadit.edgly.net/releases/uppy/v1.0.0/uppy.min.js"&gt;&lt;/script&gt;`. More info on that here: https://uppy.io/docs/
If it's just about adding a little spacing or so, that could be done via overruling CSS downstream yes. Or if you're not into external sources at all, you could also just not `.use(GoogleDrive)` completely for instance, and it will not appear or even be loaded. If you build yourself using e.g. Webpack, that also means the bundle will become smaller.
Sounds cool! I’ll help in whatever way I can!
You should checkout VuePress and Larecipe as they both do exactly this, could draw ideas and inspiration
AngularJS's change detection algorithm had hooks for when to test everything stored on the entire $scope tree. I don't recall the exact performance- something like O(n\^2). This was hand-waved off as "very fast" then "fast enough". For a small app, it usually was. &amp;#x200B; Svelte (if I'm not mistaken) uses Proxy objects. An analogy to AngularJS would be that every local variable has a built-in hook that automatically causes the re-render. I haven't looked too deeply into svelte; I imagine the re-render is local to that component's sub-tree, and there are probably some heuristics in place to help eliminate unnecessary renders there as well. &amp;#x200B; Of course, if you need to support older browsers (i.e. selling to a business market where IE11 is still in play, for example) you'll need the proxy polyfill, which is a kick in the performance penalty box. &amp;#x200B; "Frameworks like these are the future of JS UI" is a bit of a hyperbolic announcement, imho.
I generally agree with all of that to some extent. But yes, it is very _relative_... And that works both ways. I do know some places where the culture of the company means future hires and people who only touch JS occasionally will be familiar enough with such things. Is it the exception in the industry? Maybe, but it is a real context and it works for them. I also underatand that view of the industry you mention and yes, I'm tempted to go one step further ans say that _most_ programmers aren't very talented. But I still believe it's a matter of will. You just can't change the whole industry on your own or in less than a couple of decades. Unfortunately, I tend to think we just don't have a strong enough sense of “profession” as a whole to make this easy. But what's undeniable is that without any will at all there will be no change, or it will be random and chaotic.
Thanks for the well written answer ! I didn't know the inner workings of Angular and two way binding, just the performance issues tied to it. If they managed to internally do a better job to implement the same concept it's cool, I'm sure some dev will love to use it. I still feel it's disingenuous to act as if you invented a new thing (RE-naming it "react" something) or maybe they just didn't know about it but that's not likely... Overall the concept is interesting and we'll see if it sticks. Thanks again for taking some of your time and explaining :)
How does a company like Uppy make money/be profitable?
this is the best article ive read this year. Serious gold Highly appreciated content STRONGLY RECOMMENDED...!!! &lt;a href="[https://cyberdesignpk.com/creative-agency/](https://cyberdesignpk.com/creative-agency/)" &gt; More Programming codes visit this please &lt;/a&gt; &lt;a href="[https://cyberdesignpk.com/web-design-services/](https://cyberdesignpk.com/web-design-services/)" &gt;More Programming codes visit this please &lt;/a&gt;
The company behind this is Transloadit. We provide tus &amp; uppy for free because they offer great value to our existing customers (and oss makes the products better thanks to exposure to a larger crowd). We also hope that a percentage of our open source communities will use our hosted versions (of companion and tus) and our commercial encoding service because they work so well with each other, and that that makes our public coding efforts worthwhile. We’ll have to see if that really happens or this is just a very fun investment without a good return on it, we are good both ways as we run a very lean company and don’t need to make boatloads of money to make investors happy or anything (we’re bootstrapped and profitable and enjoy working on oss)
Throws error if `country` is undefined, IE: let a1 = [ {user_id: 0}, {user_id: 1}, {user_id: 2} ]; let a2 = [ {_id: 0, country: "France"}, {_id: 1, country: "US"}, {_id: 8, country: "Canada"} ];
In France we use the term 'intégrateur' and 'développeur front' to differentiate between the two. The pay however is equally terrible for both.
There is a great divide, however, the best engineers are multi-disciplinary.
Yeah, the bot notified me. I'm just new here anyway, will remember next time. So stupid I didn't see it, but it's hard figuring out the issue when you're not working with a proper editor that actually gives lines of errors and such. Thanks for the headsup!
Count me in. What parts of the project do you need help with?
I looked into it, but while the first 'row' has to be an array of words, after this array everything needs to be in a 2d array where the name at the start of each row is not included. So split will probably not work, since it assumes the whole string.
Hi /u/AntiqueFisherman, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Most likely, phaser is pretty awful for UI
You could split the whole string, store the resulting list, then loop over it while slicing to get each row of the 2d array.
I think you could avoid m*n if they are sorted and you just use indexes into the arrays.
This whole debate is nonsense, and on top of it Chris Coyier is an asshole because he doesn't publish comments from anyone with views different from his own. Chris Coyier, Brad Frost, and all the other proponents of "the great divide" bullshit are simply known "faces" on the FE circuit who have built their reputation on being CSS specialist and now feel under threat by the rise of CSS-in-JS. That. Is. All. There is no "great divide".
I found a couple of packages that are related to this type of thing: https://github.com/mtraynham/lodash-joins https://github.com/msv2017/inner-join
sign up for bounty program or something, githunt/issuehunt
Sounds good, I’m keen to help. What do you need?
The short answer is that the test double needs to be configured to return the response you're testing. How you do this depends on how your dependencies are wired together. This problem is one of the advantages traditionally provided by dependency injection, which allows you can configure or entirely swap the dependency before you pass it to the unit under test. I'm only vaguely familiar with "mock-require", but conceptually I think that in the you'll need to configure it to provide a different version of `AutoScaling` for each test. In the error test, it'll be a version that returns the error response.
Looks awesome! I may use this in lieu of my very simple uploader at the moment. How does the url “upload” work, seems like it would have to be a server side fetch, unless url is on the same host? Cross domain and all...
Thank you! &lt;3 Yes for importing Urls, we require companion, which you can also install on your own server if you like. Plugins that require Companion are prefixed with a (c) in the docs navigation
It depends on the structure of your real data. If it is actually the same as your example, the following would be simple and efficient: const members = [{user_id: 0}, {user_id: 1}] const memberCountries = [{_id: 0, country: "France"}, {_id: 1, country: "US"}] for (let i = 0; i &lt; members.length; i++) { members[i].country = memberCountries[i].country }
Ah, good to know! I guess with a companion, you maybe could do other server side tasks, like unzipping/untarring archives, too ;)
That’s right but with varying traffic and usage patterns, that quickly requires herding stack, scaling algorithms, queues, infra engineers. This is what transloadit is/has done. Charging a subscription for that is what keeps our little company afloat, so likely that’s the one thing we won’t be adding to companion :o
I agree. It is like a specialization. A cardiologist specializes in treating cardiovascular diseases but he knows enough basics that he can help someone having a heart attack on a plane for example.
Yeah, the hp bar and stats, enemy list, cooldowns, spell buttons, chat box ...
&gt; https://transloadit.edgly.net/releases/uppy/v1.0.0/uppy.min.js Ah sorry I didn't see you had this written there, that's the one I'm looking for. I prefer downloading or using the js files directly, Imo this link should be more visible on the site. But this project looks great, thanks for the assistance!
How bad are we talking ?
That's interesting. I've played with that benchmark before, and was quite disappointed by Glimmer's {{each}}…
Does some of you use this library at work? Some feedback maybe? Looks promising =)
The key is in what you 'key' on. When I was messing with this benchmark in the ember 3.1 to 3.5 days, I think I did it wrong. But this person (who tweeted) found the most optimal thing to key on for this particular set of benchmarks. There has also been a lot of recent improvements to developer ergonomics (which affects developer speed positively)... Seeing these benchmark updates showed me how important it is to check the keying options to make sure you've selected the right one for your use case.
Hey, &amp;#x200B; I'm working on multiple aspects of the project. I have just started this yesterday. &amp;#x200B; I do completely agree with this. I'm trying to set up a demo and finishing the README as well.
Hey, &amp;#x200B; Since a lot of you are interested, do join the Slack group. Will update you guys on the project and my idea and how to go about it! &amp;#x200B; [https://join.slack.com/t/markeroo/shared\_invite/enQtNjA4ODYxNTYzNDc1LWZlZWM1Zjc3NWRmZDY1NGU2YmI3ZjQyNWFmZmY3ZGVhZWUxNzk5ZmQ3Y2JkNWYzOWI0MzRjYjVhOGE5ZDZjMDI](https://join.slack.com/t/markeroo/shared_invite/enQtNjA4ODYxNTYzNDc1LWZlZWM1Zjc3NWRmZDY1NGU2YmI3ZjQyNWFmZmY3ZGVhZWUxNzk5ZmQ3Y2JkNWYzOWI0MzRjYjVhOGE5ZDZjMDI)
Hey, Do join the Slack group. It'll be easier to communicate! [https://join.slack.com/t/markeroo/shared\_invite/enQtNjIyMTU3MTAyNTY3LWMyYjQ1ZjI4MjUwMTBjNjUwZTUyYmRjNmYxYmVmYTM3N2Q4NGYwNzIxZDljYmRiMmZjZTFkZmM2YWU3Y2Y1ODQ](https://join.slack.com/t/markeroo/shared_invite/enQtNjIyMTU3MTAyNTY3LWMyYjQ1ZjI4MjUwMTBjNjUwZTUyYmRjNmYxYmVmYTM3N2Q4NGYwNzIxZDljYmRiMmZjZTFkZmM2YWU3Y2Y1ODQ)
I have! They both are really nice and amazing projects. I haven't used them as such. Will use it to draw more inspiration.
Hey, Do join the Slack group. It'll be easier to communicate! [https://join.slack.com/t/markeroo/shared\_invite/enQtNjIyMTU3MTAyNTY3LWMyYjQ1ZjI4MjUwMTBjNjUwZTUyYmRjNmYxYmVmYTM3N2Q4NGYwNzIxZDljYmRiMmZjZTFkZmM2YWU3Y2Y1ODQ](https://join.slack.com/t/markeroo/shared_invite/enQtNjIyMTU3MTAyNTY3LWMyYjQ1ZjI4MjUwMTBjNjUwZTUyYmRjNmYxYmVmYTM3N2Q4NGYwNzIxZDljYmRiMmZjZTFkZmM2YWU3Y2Y1ODQ)
Hey, Do join the Slack group. It'll be easier to communicate! [https://join.slack.com/t/markeroo/shared\_invite/enQtNjIyMTU3MTAyNTY3LWMyYjQ1ZjI4MjUwMTBjNjUwZTUyYmRjNmYxYmVmYTM3N2Q4NGYwNzIxZDljYmRiMmZjZTFkZmM2YWU3Y2Y1ODQ](https://join.slack.com/t/markeroo/shared_invite/enQtNjIyMTU3MTAyNTY3LWMyYjQ1ZjI4MjUwMTBjNjUwZTUyYmRjNmYxYmVmYTM3N2Q4NGYwNzIxZDljYmRiMmZjZTFkZmM2YWU3Y2Y1ODQ)
I really like the style! I'd wish so much this had: \- Typescript instead of flow \- React-Native-Web instead of Styletron &amp;#x200B; But still a very neat UI library.
I don't think it's good to conflate a11y et al with javascript or plain css. There's no correlation, javascript devs can be as good or bad with these things as css designers. Also i what i do see in the real world is the divide shrinking through tooling like framer, storybook, etc. It's possible for both sides to actually work together now, which is unprecedented. Javascript has pretty much elevated the webs last artefacts (HTML, CSS) into something to you can profile live. Is it really that much of a big deal that HTML is now a better JSX and CSS is wrapped in template literals? Designers can finally work with real, working components instead of dead fragments that constantly go out of sync, developers can finally focus on interaction and logic instead of wasting time on wrangling figma blobs into the apps cascading style madness.
Can you point me to the SSR support you mention in the title? I wasn’t able to find any mention of it.
Link to any of the games? :)
Doesn’t seem to work on mobile. At least not iPhone. Cool none the less though!
Very true, but I guess somehow in my brain DOM manipulation is more satisfying than conditional CSS changes and keyframes or D3, even though I fully recognize that both effect the pixels on the screen for the end user, perhaps css and d3 even more so. More than anything I love how modern SPA frameworks in a dynamic application must interact with data flow to load and present relevant requests to an end user. If nothing else I realize ideally I’d rather dive deeper into the connections between complex data flow and the dom and leave someone more design talented than I am to do end user UX design/UX integration. But I guess it would really depend on the complexity of the data flow whether that would be justified or not
[removed]
Yeah according to mdn Safari isn’t compatible
That's really cool, thanks for sharing!
Isn't the problem with current baseline op benchmarks that they fail to measure if an application is fast or slow? They're a minor or even meaningless factor. React in async/concurrent scheduler mode could potentially outperform all unscheduled frameworks because it balances load. Going forward we would need a different kind of benchmark that tests baseline and scheduling. As in, can framework xyz maintain 60fps if we bombard it with paint requests - and given that web apps only have a tiny margin of 15ms to expend, that shouldn't be hard.
Does not work on Chrome 74 mobile.
I haven't finished it yet, I am in the learning process.
Api is not ready on mobile. Don't know if it will ever.
Number, String, Boolean, Null, Undefined, Objects in Javascript. TypeScript adds some extra ones as well.
Hi /u/iamzrk, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
https://www.fullstory.com/ does this
Aw, that’s too bad.
LPT: At the end of Web APIs documentation at mdn, there is always(?) a [Browser compatibility Section](https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API#Browser_compatibility) - which shows you that it isn't compatible on any mobile browser but *Edge Mobile* and *Opera for Android* - so you don't have to comment every mobile browser it doesn't work with.
There is example of next.js [https://github.com/marcin-piela/react-fetching-library/issues/21#issuecomment-486533139](https://github.com/marcin-piela/react-fetching-library/issues/21#issuecomment-486533139), it's not mentioned in docs yet
Oh wow. That is awesome! That's for show casing this great API.
The url would show up, but the image would have all its pixels scrambled.
The codepen via Mozilla's docs wasn't working for me, so I made a very small Angular app via stackblitz that works for me (using both Mozilla Firefox 68 and Chromium 73) and code is some-what like Mozilla's example: [StackBlitz Example (Editor)](https://stackblitz.com/edit/angular-futsbb) [StackBlitz Example (App)](https://angular-futsbb.stackblitz.io/) I'm looking forward to showing this API to some colleagues and clients!.. very cool, and native! I always thought you had to download a browser extension to get this working!
Interesting read, but am I the only one that absolutely hates that "huge-circle scrollbar" at the right? I would have expected such a styling 15 years ago, but today?
Any idea what's going on with the row swapping task times? I wouldn't expect preact to handle special cases better than react
TIL about tus. Looks exactly what I've been looking for. Uppy looks great as well. Might implement it in my apps.
Whitebox is the first website that I have ever made which uses nodejs as a backend. As someone who came from python, it took a while to fully grasp callbacks and javascript's async nature, but once I got the hang of it I have been loving it. Whitebox first started out as a chrome extension which you can check out [here](https://chrome.google.com/webstore/detail/whitebox/ladomjdmipndjikefjafgemmlnhkhagc)!
Edge mobile is chromium anyway Idk about Opera
Hi /u/hemantdixit10, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I love TS because my first programming language was ActionScript 3.0, so I'm used to coding fast and then get many errors in compile time. I also like how code is more "self-documented" by having types. Ideally I would use it, but I'm developing an MPV and I need to be as fast as possible, so I can't be bothered with typings and type-definitions. Also, a friend made a good argument about how when I'll need to start hiring people, it's better to post JS positions than TS.
Apple is fucking up [with Safari]
One of the problems in javascript is that errors occur because of wrong data type found when input or receiving data. TS helps solves that by putting types which helps programmers know what they're doing in their app which drastically reduces errors and makes your app atleast robust. Another cool thing I see in Typescript is that it introduces you to properly structure your data in your code which is very important if you are going to jump into statically compiled languages like C or Go.
unrelated, but do you play starcraft? (Just looking at your name, looks like a barcode name that the pros use to disguise themselves)
&gt; Edge mobile is chromium anyway but it still makes sense to list them seperately, because, as you can see, Chrome doesn't support the Screen Capture API right now while Edge does.
Damn. Interesting. I wonder how it works down the hood. Is the data written into RAM and then onto disk after a certain buffer size?
Isn't also fair to say that React is faster than Ember in certain benchmarks?
yeah, but Ember has historically been thought of as this big giant slow framework, so the fact that ember can compete with react in speed is a big deal
could be differences in implementation of the benchmark, could be differences in preact and react themselves. hard to tell without diving into the source of each and narrowing down implementation differences
in like 1 benchmark, maybe 2 against preact, even if the numbers were relevant, its still slow
Can you open source it?
&gt; they fail to measure if an application is fast or slow? They're a minor or even meaningless factor yeah, but these kinds of benchmarks are always thrown around when their tool is winning. When React is top, it's used, when Vue is top, it's used, etc. Most benchmarks out there not being a good representation of real applications is a real problem, but that's not to say that the problems benchmarks look at aren't going to happen in real apps. &gt; Going forward we would need a different kind of benchmark that tests baseline and scheduling. that'd be fantastic! do you know of any benchmarking collections that are trying this out?
Use localStorage to save whether the button should be hidden or shown
Hey! How do i use it? Can you give me a code example?
Just Google I'm on a phone do can't easily type
Oh ok =/ i already tried localstorage before but i didnt managed how to use it, i am trying this for days.
???? &amp;#x200B; Ember is faster than React in: \- replace all rows \- swap rows \- remove row React is faster than Ember in: \- create rows \- select row \- create many rows \- append rows to large table They are pretty much the same in (through react \*is\* ahead): \- partial update \- clear rows They used to be much further apart. So, maybe context is needed here for those who haven't been following the speed race. In the currently published benchmark: ember 3.3 vs react 16.4: [https://stefankrause.net/js-frameworks-benchmark8/table.html](https://stefankrause.net/js-frameworks-benchmark8/table.html) React wins by far in every benchmark except "select row". So, this linked tweet, is more impactful when you have the context :)
Haha, I only play PUBG, but my username is actually meant to be obscure. I use it because when friends or co-workers come over to my pc, I don't want them to remember my username and later check my comments history. They'd realize how stupid I really am.
It's just javascript, look at the source [code](https://screenrecord.43z.one/functions.js). It's only 66 lines.
As long as companies and government refuse to leave IE webassembly will mean nothing.
I love optional typing, it allows for both fast experimentation and also careful development, it just gives people options, instead of forcing them into it.
It can still mean something to the other 90% of the Internet.
You need to wait until the document is loaded.
Next thing we know, there will be fake virus website that trick you into recording your screen then they will claim they hacked you and request a ransom
FYI: Chrome Mobile (Android) has support for this API, but it's experimental and locked up behind a flag (chrome://flags/#enable-usermedia-screen-capturing)
Not the author - and apologies for delayed reply - but since it just hooks (tm), in theory there should be no problems with SSR
CSS in JS isn't going anywhere. That is only destined to create an unmaintainable mess of spaghetti code. Also in even a small to medium size team how can you have designers/HTML/CSS slicers working on the HTML/CSS when it's all scattered around in JS files or React components. The poor JS guy will be doing everything. Every small change required will need to be done manually by the JS guy. It's a stupid idea.
You could throw the whole thing in a setTimeout, or just wait and then try again if the conditional fails
I don't see why that would work. the problem is that the menu is inaccessible because of code splitting. a time out wouldn't help.
You have couple of solutions. One is updating your script and css links to always have different name when you have new version. It can be different name of file or just add something like this: src=“my-script.js?anthingDifferentFromLastFile” Another thing is to add special headers to your response which will tell your browser to refresh it if they are stale
From what I can see only webflow.js is loaded from your domain, the rest are from CDN's. You want to update only that file? Then replace it on your domain. Is that file used for other websites as well?
i feel like js fits that quote way better
Honestly in any place you'd use JS for a solution that requires concurrency you're better off using Elixir. Not every language has to be good at everything (in fact, very few if any are).
You could click on the buttons (with code) and apply custom css where you put display: none; on the menu so you can't see it
&gt; can framework xyz maintain 60fps if we bombard it with paint requests I'd argue that a DOM framework is the wrong place to be handling FPS-sensitive stuff in the first place. You certainly wouldn't want to use React to handle the bulk of rendering in a graphics-intensive game, and for simple animations, plain CSS or dedicated libraries such as GSAP are surely better tools for the job. At my company, we have some actual resource intensive UIs (in the order of millions of data points on screen) and React is only used as the glue to embed this system into other web-based systems, with the meat of the visualization being handled by GSLS. React doesn't need fancy strategies to handle needle-in-the-haystack scenarios, just call setState in a small component and you get your localized update without blocking the main thread too much. If you do have a scenario where a very large portion of the UI is changing very quickly (like the sierspinski triangle demo), one ought to be asking themselves why they are using React as a hammer instead of considering another more suitable tool.
how can I listen on the menu actually loading? it takes time.
Honestly based on what you've mentioned in this and the above post, you should give Elixir a shot. Everything you've said seems to point towards you loving that.
You create an iterval that looks for your querryselector, if it's not undefined than the menu opened and you stop the interval
€28 - 50k Maybe a bit more in Paris.
Read: a particular implementation of an arbitrary component is faster with X than with Y. You can produce meaningful benchmarks if you do it like https://en.wikipedia.org/wiki/The_Computer_Language_Benchmarks_Game does, but not like this. I bet you could double the numbers for each framework with a sufficiently overengineered, heavily microoptimized, super complex implementation.
LocalStorage acts like an object you can access, just like any other object except it persists across reloads. So in your case you'd put a check somewhere in your script that runs every time the page is loaded, and then conditionally hide/unhide the element. Separately, you'd have your eventListener setting the hide/unhide on click as well as setting the localstorage variable. psuedo-code ```` let should_hide = LocalStorage.getItem('hideStatus'); if (should_hide) { myElement.classList.add('hidden'); } myButton.addEventListener("click", function(e) { myButton.classList.remove('hidden'); LocalStorage.setItem('hideStatus', true); }); ```` you might also look into sessionStorage.
is there a project on github that implements that benchmark game in various technologies? I'd love to submit a PR :)
I think the idea behind the quote has to do with the types of use-cases python is fulfilling. Some examples: desktop GUI apps, TCP servers, web frameworks, statistics. I'd call Python much more a 'general purpose' language than something like Javacript, although to be fair... with the advent of Node.js and Electron is definitely going in the same direction =)
That’s awful.
I believe that it is also the same backend
Yeah that's what I mean, if you want to link something to the web JS is basically the way to go, and with basically everything having to have that requirement nowadays everybody needs to know some JS (until something else comes along).
Hi /u/tueieo, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/J_BlRD, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Their website is down, and I don't really remember how did they handle submissions, but there definitely are many contributors to it.
Hi /u/__sandeep, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/socialmichu, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MedMAghraoui, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/fredyarcol, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/code_barbarian, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/theninjainblue, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/khazha88, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/IvoCass, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/alex_at_net, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Add a version number to the file name after a query - i.e. portfolio.js?v=001, portfolio.css?v=001 and then you can update it when you make changes i.e. v=002, etc. The text you use is up to you, but the pattern is: .js?x=x
Hi /u/tueieo, please stop spamming your Discord channel. One mention is enough. This is reddit, discussions should be taking place here about content that is posted here.
the title says Computer Language -- so, my hunch is that it wouldn't be the same type of thing. do you know of any other benchmark collections that are similar?
Hi /u/h43z, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/robinhaney91, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
No, just that one. Or perhaps some other projects I have in my webflow account
Thank you! I’ll try this
Ok sorry
All one has to do is right click show source? It's just 66 lines of javascript.
I have created it as a new issue. I would not consider it as a "bug", more a blunder, if it really is the meaning that you can sort all sort of filetypes out. BTW: If you need danish translations of strings I can do this in the weekend, but could not find anything regarding language /internationalization and so on (perhaps looked in the wrong place or just totally misunderstand) :)
[Screen recording](https://screenrecord.43z.one/) done in javascript with the help of [Screen Capture API](https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API)
&gt; All one has to do is right click show source? That's 100% of websites on the internet.
Much appreciated! &lt;3 And yes sorry, the i18n docs are still a todo we just didn't get to before the 1.0 release. But relatively straightforward. You need to duplicate this file: https://github.com/transloadit/uppy/blob/master/packages/%40uppy/locales/src/en_US.js and translate the english words to your language. If you send that as a PR, we merge, and that's all there is to it : )
No problem. Thank you for moderating the community.
Painstakingly.
I knew it! Jokes aside, can you give me any pointers? (and don't give me anything like 0xfce32a...)
Don't have time to go as far as pseudocode, but the basic strategy for stuff like this is usually: &amp;#x200B; * Bind mousedown/touchstart handlers. In that handler, note the start position to a variable you created outside the scope of the handler, and bind mousemove/touchmove handlers * In your mousemove/touchmove handler, compare the move/drag position to your start position and calculate where you want the moving panels to move to, moving them with absolute X position or (probably better) a CSS translate transform. Also manipulate scale transform for the ones on the end that get bigger as they get dragged in. * Bind mouseup/touchend handlers that remove your mousemove/touchmove handler.
I will give it a try :)
I know. So what exactly do you want me to include? A view-source:https://screenrecord.43z.one/ link?
We have around a hundred projects at Uber using it
I know. So why do I need to link to the source? I cannot link view-source:https://screenrecord.43z.one/
Can I ask why you want to do this in vanilla js?
How will it save my time? Can i withdraw it at the end of the year? So many questions, although i like your Readme.
Can I ask why you want to do this in vanilla js?
You go to start a project, you take 16 minutes to setup this config or your clone my repo. Do your own config = 16 minutes You clone my repo = 1 minute The difference = 15 minutes.
Personally I think lumping design in with any form of developmentment is a mistake. Design requires quick and easy iteration, development is more methodical and evolutionary. 'Minutes on a sketchpad wastes weeks of development' and all that.
This is math. i like the logic behind it, will start now to save time forever. Thanks and i hope you had fun programming it.
I would never use cheerio. I would use jdsom or puppeteer, or both. Why learn some random api when you can use the exact same one as the browser?
\_Equally\_ terrible? No. It's so-so for a "développeur front" and absolutely dreadful for an "intégrateur".
Paperclip Analytics: Free and Ethical Analytics in NodeJS/JavaScript. [https://paperclip.live](https://paperclip.live?src=rjsshowsat) Use code "freecredits" to get 1000 credits.
I wasn't asking for help. I was sharing an idea.
I find it always best to detect the browsers features rather than banking of browser type. Just because they're using chrome, doesn't mean it has the supported feature. Browser detection can be tricked and your code shall fail.
"designers/HTML/CSS slicers" LOL what are those... "The poor JS guy will be doing everything" - hiring someone who only knows JS to worl alongside someone who only knows CSS it's an obsolete model that never quite existed anyway
best answer ever
* Work continues on improvement UI Email Signature Generator -[https://github.com/antonreshetov/mysigmail](https://github.com/antonreshetov/mysigmail) * Add TS type declaration in - [https://github.com/antonreshetov/vue-unicons](https://github.com/antonreshetov/vue-unicons)
Wow this is amazing.
For info I think you've got then the wrong way around - the intégrateur is generally CMS integration ie CSS, HTML and a bit of jQuery. The front is traditional JS programming based development.
Sounds awesome, will definitely try
They're allergic to chocolate.
Is there an advantage over youtube-dl?
&gt; So why do I need to link to the source? Because it's a requirement of this subreddit.
I really can't tell what the point of your post was, there's no source code, there's no call-to-action... It sounds like you're looking for some kind of validation whether or not this is a good idea? That's an implicit question; maybe you didn't directly ask, "is this a good idea?", but it's obvious that the reason you posted was to get feedback about, _is this a good idea?_
Any UI updating too much will smash GSAP or anything really because everything shares the same thread. Have a table with 1000 rows that update all at once? GSAP is dead for a couple of frames. That's why literally all web applications lag, the one problem all frameworks and all web apps suffer from. Next gen React brings scheduling, which allows prioritized content, like your animation, to keep running as the UI won't go over its fps budget. The sierpisnky triangle demo was completey misunderstood unfortunately - it wasn't the point, they were merely simulating load, which basically means your UI takes longer than 15ms to compute.
Hi /u/th3originals, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Created/designed a simple two player game called [Tap Champion](https://paulsda.github.io/Tap-Champion-Game/)
This how I understood it. Habituellement les développeurs fronts sont payés bien mieux que les intégrateurs.
Taken from the github page: "It's backed with fluent-ffmpeg, VueJS, Electron and node-ytdl-core". So it combines the youtube downloader and video converter with a neat looking UI. ffmpeg and youtube-dl can probably do the same stuff from command line.
Accessibility nightmare!
Overall, I feel he has a lot to offer. Personally, I have learned a lot from him. That's not to say I don't disagree with him at times. For example, his argument for not using a static typing system is weak in my opinion, and I much prefer using one for larger projects. My suggestion is that you should strive to really understand his argument. Then try it out. You will end up coming to your own conclusions. As a beginner, you will learn far more listening to someone line Kyle than ignoring him. That said, keep and open mind and never blindly accept or reject without understanding things conceptually and trying out the ideas. Good luck.
&gt; I'm sure there are many cases where == would in fact trump ===, but I wouldn't know since I'm new to this haha I don't think so. I would say 99/100 times you are going to want to use === and that 1 time that you want to use == is probably because you are doing something smelly
I’m curious why web developers think building a native mobile app is crazy when layouts like this are trivial with naive APIs, yet are “painstaking” as you say with JS?
Strange experimental number encryption play with my code thingy. [https://github.com/prolightHub/Encryptor](https://github.com/prolightHub/Encryptor)
Layouts like this are trivial on mobile apps because it’s a layout made for tactile inputs.
I would just listen for arrow key presses and focus the new tile and notify the user
If you're caching the coordinates in a separate variable anyway, you may as well use a flag that you set to true in the mousedown/touchstart handlers and false on mouseup/touchend/mouseleave/touchleave.
That makes sense. I do both web and mobile frontend development. And currently work at w company where the mobile team is way smaller. So sometimes people look at me like I have ten heads when I say that there are valid reasons to have a native mobile app. The #1 reason to build a native app is because the APIs do a lot of work for you for a mobile UX.
Generic null-checking is pretty much the only reason that makes sense to me. But as you said, this usually makes for some smelly code.
Great, I'll keep that in mind. Thanks for the advice.
Even without any shenanigans, browsercope on jsperf will sometimes get my browser wrong, depending on what I’m using that day.
Oh fuck me, I've missed the github link under the tweet. Yeah, it's a more thorough test than it seemed to be from the screenshot, lmao.
I’m interested in possible contribution efforts.
&gt; his die-hard stance towards === This is the _standard_ stance for anyone who's past beginner level in JS, and the default setting for every code quality tool I know &gt; coming from a more traditional background of Java ...I see, that explains, typical Java dev stance when faced with JS and JS devs, who they see as inherently inferior and not to be trusted
Added arrow key controls :D.
No. While you can erase a hash from history by force pushing to the revision before that, the whole point of a hash is that it can't be recreated.
Oh vectormaps are kind of a standard now? That's amazing! Last time I was researching the topic only google and mapbox provided them
I'm literally learning Javascript; I do not see JS devs as inferior. My background, however, obviously affects my perspective on things like this. The only goal for me is to become the best developer I can be.
I think there might be a misunderstanding here - most code quality tools tend toward ===, but that is not the die hard stance OP is talking about - I don’t think it’s as simple as pro===/anti=== but people tend to categorize Kyle Simpson as generally anti ===.
Yeah, "die-hard" was an exaggeration (perhaps not in good taste), but he is quite anti === : === should only be used as a last resort and even then it means you don't fully understand your code and/or it's not well written. Refactor if possible. I am a bit past that part of the course, so not word for word. I have no doubt the information he is teaching me is still very valuable, but this the opinionated aspect I was talking about in the original post.
This is the answer, just a few additions/classifications : 1) debounce that shit 2) make sure the move and up handlers are applied to window, not the container. Otherwise you can get stuck dragging. 3) bind the move and up handlers in the down handler, then unbind them in the up handler.
the great divide between design aesthetics and technique
Hi /u/joshuarhys1991, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Wow simply genius!
I love him! I don't agree we should keep using var, and I don't agree class is bad, but I understand why he thinks these things and there is an argument to be made for sure. He has obvious passion for the subject, and that makes him cool... and the beard.
I did an all day course with Kyle a few years ago, then last year did another shorter course with him. Followed him on twitter etc. He absolutely knows his stuff and I would go to say he is the best JavaScript developer that does any sort of coursework by a mile. He's not perfect all the time, but he's pretty damn close. I do however think that there are some of his things that are high level and unless you know a lot already, it will be above your head. Also at the first conference, he sat down and ate lunch with me and my friend at random. Super nice guy.
It's === unless you know exactly why you want ==.
Developers who programmed in something like C++ and Java often see JavaScript and PHP as shitty programming languages for various reasons. One of the largest ones is the lack of typing for JavaScript. Another I believe is that PHP and JavaScript really took many of the programming jobs away from other languages as they've grown. You also hear similar ramblings from that set of developers about Python now.
He promotes learning how to use == for maximum efficiency, the way it was intended. I say it is a confusing mess and use typescript with a strict linter to remove all the nonsense. If I had the rest of my life to work out JS quirks then his approach would be ideal, depends on what your aim is. JS ninja master?
It's also the only way to be truly compatible with new browsers. For instance if the new Edge showed up as a different browser than the old edge, detecting features will still work.
I don't really like them. Instead of covering the JS which would cover 99%+ of the average developer's time, he spends most of his time covering the 1% in detail. It causes the most important point (the 99%) to get lost.
I don't think this is all that bad. You need to put a container div around the boxes, it needs to be draggable (html element). OnMouseDown of that div you will need to see the left most edge of the clicked div and do the math to figure out if you move the right most box down.
I'm intrigued. Can you explain a little more what differentiates you from Google, Facebook and Adobe?
Maybe with the combination of both, then I could see a really good use for this.
A year ago i was cornered into Google because other providers offered terrible resolution in south america, is that still the case?
I don’t understand this argument. If anything, CSS in JS is far more maintainable as the styles are localised to where they are being used. The component owns everything it needs to be rendered and it’s easy to digest what each component is doing. I guess I’m making the assumption that there is a component based architecture. The part about this divide that I have trouble with is the idea that you could feasibly separate the work of someone who focused on HTML/CSS and someone who worked with JS in a team context. At the end of the day, all three technologies are so highly coupled. For example, when building some complex component interaction where you need to update the DOM structure, do you handball the updates to the HTML/CSS dev and hope you’ve articulated the solution well enough? Or do you just make the changes yourself? I agree that all the skill sets are equally valuable. We can have devs specialise in CSS as well. I don’t think the current tooling supports a workflow where we could separate these different technologies to a point where a dev didn’t need to be familiar with all three though.
If someone else turns on the camera and microphone without a warrant, I lose my 4th Amendment right to not be searched. I can items that are not visible through the windows that would be visible to a camera. This idea is the kind that gives both Constitutional lawyers and the ACLU law suit boners.
Hi /u/anon_0122, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
An actual user interface. Much better the youtube-dl imo.
I think some people don't realize the argument Kyle makes. First he says that you should only use == if it's clear what the types will be. == and === are exactly the same if the types of both comparisons are the same. In the javascript spec the first thing == does is compare the types and if they are the same then === is run. That is in the spec. His point is using === signifies to the reader that you are not confident in what types you may be dealing with hence the need for an extra check. So if you know the types and the types are clear to the reader use ==.
I think it might be easier to simply use the `MouseEvent.movementX` property to move the panels instead of manually deducing the movement from an origin point.
I have learned alot from Kyle's books and a few courses. He is quite experienced and knows javascript at a very deep level. While he is very opinionated, for the most part I agree with his arguments on most things. And if I don't agree with a particular argument of his, I will at least be aware of the concern(which is good to know).
Hi /u/prabhat33, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Built a site in node.js where users race against each other to solve generated mazes ([http://www.mazebattles.com/](http://www.mazebattles.com/))
I'd say it's a cost/benefit thing. Having a dedicated app per platform takes a ton of maintenance. If you don't need fancy UI apis or other native features then don't make an app. If it's used ones in a blue moon don't make an app.
Just something to toss in ideawise... There are several youtube channels out there I'd love to subscribe to for one or two topics, but they post way too much other stuff I don't care about. If there was a way to build a pseudo-channel (throw in a channel and a regex or something), that'd be really cool. *(Doing something similar is on my todo list, but I'm coming to terms with the notion that I will probably never get around to it)*
&gt; I don't agree we should keep using var, and I don't agree class is bad Those are two extremely fundamental standpoints. He promotes bad practices, flat and simple.
Also - transform3d. Also also - other people have made. This and worked out the bugs. Don’t reinvent this wheel. It is tough. There are a lot of unpredictable pain points.
Also, notes on running on Mac (10.14.4) Before running the command you listed (`npm run electron:build`) - Need to install npm (`brew install node`) - Need to have vue-cli-service installed? (`npm install -g @vue/cli`) - Need to run npm install (`npm install`) Now that it's build, when I try to run it I get a "protocol is undefined" reference error on launch. Note: `npm audit` reports a high severity vulnerability as well.
I disagree, he makes very valid points for both. var for top level variables can be a great marker to future devs that it was intended to be placed where it is. His argument against class is also valid in that he points out it’s not a class in the sense we’re probably used to, and the prototypal inheritance can cause unexpected behaviors. I personally don’t follow his advice on either, but I don’t think it’s good advice based on OPs experience level to act like there isn’t nuance to the argument.
It’s been a while since I’ve watched/read Kyle, thanks for the lucid description, I hope it helps OP.
Yes, you are right. And I fixed this problem now, please try again.
thanks, it's my honour :smile
When you're starting out, you don't need nuance, you need foundations.
Not sure what you are saying here pertains to accessibility. Could you elaborate?
Hi /u/dicklaurentlh, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hey, Sorry about that. My bad. Will not happen again.
Looks very nice. Definitely beats my simple node app I made a while ago, which just read youtube urls from a file and called youtube-dl cmd for each one.
Reusable upload where user can upload a few images, do other ops and then upload some more. Our users find it confusing to see the previously upload images still displayed.
I'm kinda a leftover FE dev from the flash era and when UIs like this were popular. You can build this with a tween library. These animation libraries let you embed mini-timelines programmatically that can be deeply nested into each other. The embedding of these animation timelines can go as deep as you need, in this case one level todo the increasing in size of the units, offset these (offset in time) by the units position, then your outmost timeline todo the scrolling effect. Then on the mouse drag (you should find a library to help you with this) seek() the outer most timeline. If you really want todo these, absolutely do not do it in vanilla JS (this would be a nightmare). Look into [https://greensock.com/examples-showcases](https://greensock.com/examples-showcases) [https://createjs.com/](https://createjs.com/)
[removed]
&gt; His argument against class is also valid in that he points out it’s not a class in the sense we’re probably used to Personally I don't think his argument against classes is valid at all. 1. From the perspective of someone familiar with Java, sure, JavaScript's classes aren't like what they're used to, but then neither are JavaScript's arrays like what they're used to, nor are JavaScript's functions like what they're used to, nor are JavaScript's objects like what they're used to, and on and on. 2. From the perspective of someone familiar with Python or Ruby, then JavaScript's classes may be _exactly_ like what they're used to. [Python and JS classes side-by-side](https://i.imgur.com/p9Kw815.png).
Check [this](https://github.com/systemjs/systemjs) out.
If you want a really simple starting point to work out from, Wes Bos has this video as part of his free javascript30 course https://youtu.be/C9EWifQ5xqA
They can already upload more, but I could see how that is confusing yes, seeing the old ones also. What would a better solution be? A) automatically clear successful files (downside, people might miss it, also confusing maybe) B) give the user a Clear button (more noise in the UI) C) ? Don’t really see the elegant way out of this yet
&gt; I was not given a board, or maybe I am reading it wrong? The `/game` endpoint returns exactly that, the board - which is just returned as an array of three arrays of three elements each. Other than that, no, you shouldn't need a _game action_ **component** just because you have an endpoint called that way. Design your application thinking about what you actually need, not the endpoints you have available. You probably want to think about things like Board, Cell, Player, Turn, Move, etc and only when you have a design of the main parts application then think about connecting that to the back-end. Finally, this kind of question should probably go into a different subreddit. Something like /r/LearnJavascript or /r/LearnProgramming. Those exist explicitly for these questions.
Anybody know a good tutorial online? Can't find any. I am pretty familliar with Vuejs.
Good idea, and I hate to say it but I would consider changing the logo; it looks quite similar to the VueJS that you use
I know you specified with js, but you could use css snap for most of the functionality swiping and snapping, and then use js to make the rightmost image scale when it comes into view. This would yield better performance than using js to implement everything.
I personally like typeorm. Supports a very wide range of databases and is built for typescript. The way you declare entities is simply to augment your classes, so if you have existing code it’s very easy to move over. It also works in-browser. I’m not so certain about ssr but I don’t see why it wouldn’t work.
This is an anti-pattern in modern web development. [Feature detection](https://en.wikipedia.org/wiki/Feature_detection_(web_development)) Some browsers exposes different features based on whether you are in incognito.
Very dope
The bundle size is still like 4-5 times bigger then Vue or React, so is it really?
Hi /u/28-04-2019, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
EVERYONE who knows anything about JS uses ===, there is no such thing as "pro===/anti==="
...which is only one use case, and even then it is arguably more readable to just use `=== undefined || === null` to indicate your intent
He promotes _learning_ how == works because he's going deep into the innards of JS, but he doesn't promote actually using it
He is right about not using classes, but wrong about var IMHO
What I'm missing, why not simply go with babel?
Screen readers relies heavily on the focus of the current element
We care about transparency and privacy, so users have a page where they can see all the data we collect about them. We are working on plugins for websites where you could add features like cookie notices with one click.
Nice work!
Ah okay, thanks.
Thanks!
It's good to do this kind of stuff for a learning project, but yes - use a proper, production-quality component-library in production unless you know exactly how to create them *and* you have a specific need no third-party widgets really satisfy.
Hi /u/maloynandi, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Server-side &amp; isomorphic components.
&gt; You can build this effect in JS with a tween library. &gt; These animation libraries let you embed mini-timelines programmatically that can be deeply nested into each other. The embedding of these animation timelines can go as deep as you need, in this case one level todo the increasing in size of the units, offset these (offset in time) by the units position, then your outmost timeline todo the scrolling effect. Then on the mouse drag (you should find a library to help you with this) seek() the outer most timeline. Ask me how I would have known you were a Flash developer even if you hadn't told us up-front. Hint: This advice is like telling someone who wants to crack a walnut: &gt;First go to your local car dealership and buy the cheapest car you can find. Now use CA glue to attach the walnut to a sturdy brick wall. Position the car facing the walnut, reverse a couple of hundred years, accelerate towards the wall as fast as you can and smash into it. &gt; Once you regain consciousness hop out of the car, pick through the tangled mess of twisted bumper, brick-dust and nut shell for the remains of your nut. &gt; If you really want todo these, absolutely do not use a hammer or nutcracker (this would be a nightmare).
1) How do you attach a listener to this element? 2) How do you know it didn't attach?
Yeah we're really gonna need to see some code here :D Something like this should work however &amp;#x200B; `var btn = document.createElement("BUTTON"); // Create a &lt;button&gt; element` `btn.innerHTML = "CLICK ME"; // Insert text` `document.body.appendChild(btn); // Append &lt;button&gt; to &lt;body&gt;` &amp;#x200B; `document.getElementById("btn").addEventListener("click", function(){` `alert("Hello World");` `});`
If you're still only using a component library for your apps, then sure., Ember is 3 to 4 times bigger atm. (This is changing relatively soon with svelte builds). But ember is so much more than components, so, comparing bundle size is misguided.
When your first dom is created, and listeners attached, your new elements didnt exist, so you need to attach events to them as well after creation. However this is not very encouraged. Better solution is to attach event to parent elements that will be there always, and due to bubbling and propagating behavior of events you will be able to catch them later as well. Hope I helped
Time for the "I should know" question, but what is the process to download the program and use it?
Definitely take a look at [Objection.js](https://vincit.github.io/objection.js/). Lightweight, very feature-rich and the author is quick with a response on Gitter.
Excellent! Nice portfolio site too.
It's currently offline. I was curious at looking at it though
Project Page (?): https://github.com/oguzeroglu/ROYGBIV *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Thank you :)
Thank you for spending so much effort to crap on my technique. I'm certain you could visit any of my demos i linked to and my previous project and create additional allegories.
It would mean their readers aren’t bugged to pay medium money. I have no interest in paying money to medium because a lot of the blog posts I’ve read have unfortunately been hosted on medium and they now feel I owe them something.
[removed]
Cypress is not as easy as it sounds on the label. We've got a great a team with testers that are really willing to try things out and learn how to write JS themselves, but if you've got people that don't want to figure that out, it's going to be difficult. Learning how to hook into elements on the page, figure out how to get around some the niggly things about Cypress (It tries to do async/await stuff in a super funky way because it wasn't around when they first made it), and generally structuring your data in nice ways is not something I would expect a tester to be able to do on their own. Our testers who are great and willing to learn stuff definitely struggle with a lot of our testing projects at the moment. I think it's a fantastic idea to upskill your testers to be able to write their tests in Cypress, but don't go in expecting it to be "Use this tool, and you should be able to just tweak things to get it to work".
Hi /u/joshuarhys1991, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You tried to help, which was kind and noble. Sadly you over-estimated your level of expertise and experience, which meant *in practice* you inadvertently gave shitty advice and actively misled a beginner who was already asking about a better way of doing it, v and wouldn't necessarily understand why your approach was fundamentally wrongheaded.
the link has been removed by you :(
Any plans on supporting higher Audio bitrate (320kbps) than 160kbps? Also, seems like the app doesn't detect the short version of youtube urls (https://youtu.be/{id}) Would be nice if it was possible to set default download settings or just simply remember the latest used when app is closed
Sorry but it's a stupid requirement. I get it, if it's a big project and source is minified/uglyfied but for something tiny like this? There should be no need to host it in two places and involve an extra third party service.
Don’t forget to add keyboard controls as well for accessibility.
Not really. Just add arrow key functionality.
Wouldn’t be that bad. Just need to make sure it is also accessible.
I don't do game dev but damn, this is extremely impressive.
Thank you, I'm flattered :)
First of all, congratulations the project looks dope! I just try to download a playlist of 167 videos and only took 117. Something is not working well. &amp;#x200B; Thanks for your contribution!
The one on the svelte website is very good.
Looks awesome
Thanks alot!
Its so easy to make incorrect assumptions about someones experience on the internet. I like fancy UIs. :-(
If you're gonna type code on Reddit you need to put four spaces at the beginning of each line and then indent. You can also type your code (with indentation) and click the code button (looks like `&lt;&gt;`) in the comment editor. const fact = n =&gt; { return n == 0 ? 1 : n*fact(n-1); }
How is your reporting? I've gotten a bit spoiled by adobe's new(ish) workspaces
A little problem that blocks became so randomly and i cant jump over here o_O but it looks so cool, nice job 🖤
Would you be able to share some more info on what isn’t so great with Cypress? The documentation makes it sound like the smoothest dev experience I’ve ever seen. I was hoping to introduce it at the company I work in an attempt to get a nicer developer experience over the current Java Selenium + Gherkin scripts. So having some background on what to specifically look for when trialing it would be fantastic.
For anyone asking for how to run this, here is how I did it (which starts it as development server - not sure if there is a simpler way): ➜ git clone https://github.com/Simonwep/candy ➜ cd candy ➜ yarn install ➜ yarn build If the last one throws an error: `Error: Application entry file "background.js" in the "..." does not exist. Seems like a wrong configuration.` change line 9 of `package.json` from `"main": "background.js",` to `"main": "./src/background.js",` and `yarn build` again. &amp;#x200B; To start it use `yarn electron:serve`.
Oh, I thought I fixed that. The Math.random values are probably still too high, thanks anyway
Just so you know, pinch to zoom isn't working on Chrome for Android.
&gt; Its so easy to make incorrect assumptions about someones experience on the internet. That's absolutely true, but it's no less true of your own experience than anyone else's. Of course we all think our favourite approach is the best - that's *why* it's our favourite approach. The thing is that it might be or favourite because it's the consensus of the entire industry that there's no better way to do it, or it might just be our own ignorance of its drawbacks or limitations. Apologies if I judged you too harshly, but if you see someone advising someone to take a heavyweight, inefficient and overcomplicated approach without any discussion of caveats or acknowledgement that there might be more appropriate, efficient or simpler ways to do it... well, that judgement may not be *entirety* unfair, regardless of what the individual recommending the approach believes.
You an run \`yarn electron:build\` to build the bundle :) Oh, yeah the backgroundjs reference is wrong - I'll correct it!
Fixed it, got some serious issues after releasing it, sorry :/
Thanks for the feedback. I'm on it!
I played at mobile but btw at pc it looks same
Sounds like the Google search which will get you on track is “javascript event delegation”
Perfect, that's what I did so far. Now I've read something about throttling the handlers, should I also do this for best performance?
It may be that you attach the listeners before creating the elements.
Thanks for those tips :) &gt;Otherwise you can get stuck dragging. Do you mean if I leave the container the mouseleave event could get triggered and the whole body text gets marked like crazy?
A [React.js inter-component communication library based on publisher-subscriber model](https://github.com/mauris/react-lh). Supports cross-window communication too (only when needed). Example of a [React Todo App using React Loud Hailer available](https://jsfiddle.net/mauris/bzwm9f0n/).
What kind of hogwash is that [browser support](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX#Browser_compatibility)?!
1. Hobby project and trying to intensify my js knowledge 2. I have set myself a maximum download size - I don't want more than needed 3. Better control about what the script actually does
It's just images - why is this a problem?
You are completely wrong about svelte. It is different from angularjs and react in that instead of having library code at runtime, it will compile to very basic js that only knows how to perform the operations necessary for the component. The invalidation of "state" is done with a JavaScript labels ($:). That syntax let's the compiler know that one value depends on another and will make sure to update one and then the other. It does not use proxy objects, as that is a runtime overhead. Yes there is a check but it's just pre compiled if statements. While I think it's a great concept for future frameworks, I still think it's got long ways to go. Is it fast? Yes. Is it safe? No. It has terrible support for typescript or any other compile to js library, because it uses html files for everything. It also uses templates instead of a virtual dom, which is intentional but a trade-off of speed vs control. Dan Abramov made some really good points as in most of the time you aren't making lots of changes the dom anyway, and vdom has other benefits.
I've just deployed the fix. It turns out that the pinch is working but needed to increase the delta amount for the sake of UX.
So... Where is the app?
This is surprisingly fun, would be great if there's an AI to play against
No demo? No readme?
Pretty neat, I think it would be better if I can hold down the key and it would keep going.
Ahhh, understood. I wasn’t aware that those exist. Will do that. I’m currently learning JS and Angular, so I’m new to all of this. Thank you!
That will definitely put me to sleep.
I’m honestly pretty confused at what I’m looking at. I’m on an iOS 12 device, and i see particle walls. But the rotating doesn’t make sense with particles appearing and disappearing seemingly at random.
I've reached 141 and there's no more blocks on top for me to jump to? I also felt that it gets more jerky the higher I go. Using Firefox
I would suggest only one thing: Particularly for demos, don't be so insistent on full-screen. I mean, _offer_ it, sure, but don't _force_ it on every click. I want to exit full-screen but still continue to try your demo. As a game engine, you may have "forcing full-screen" as an option and let developers chose if they want that or whatever. But for this sort of _demo_, being so insistent on forcing FS is a bit annoying. Other than that, mouse wheel doesn't seem to be handled well in Firefox. You might want to read on mouse wheel delta normalization across browsers. It's a shitty thing, but we have to deal with it somehow.
&gt; Am I seeing this correctly - is this a class definition passed to function as a parameter? As an argument, yes. &gt; Can anybody point me where is the specified in the standard? I'm not sure if there's any specific part of the standard that applies to this. `class` is very much like `function` in how it works. Declarations create functions in the current scope using the name provided as the identifier, or when used in the context of an expression, returns the definition as a function (where naming is optional). The code you've referenced is effectively no different than passing an inline function callback into something like `addEventListener`. function foo () { ... } // creates foo identifier in current scope for function class Foo { ... } // creates Foo identifier in current scope for class function let bar = function () { ... } // returns a function let Bar = class { ... } // returns a class function
Yup, that's it. There are no more blocks for now
This guy: https://www.youtube.com/channel/UCLNgu_OupwoeESgtab33CCw/videos definitely.
I was expecting to zoom out and see a penis outline lol. There was an instance where the ring of fire went slightly off the plane and the fullscreen on click is annoying, but otherwise it looks pretty good.
I was expecting to zoom out and see a penis outline lol. There was an instance where the ring of fire went slightly off the plane and the fullscreen on click is annoying, but otherwise it looks pretty good.
You might throttle the move handler, but that can lead to motion that looks and feels weird. IMO, window resize or scroll event handlers are the only ones you always have to throttle or debounce.
Alright, thanks for your help!
Very nice work mate. &amp;#x200B; Only minor thing i would point out is that it says "Mouse Wheel: Rotate", I assume this mean spinning the mouse wheel but that does nothing, however holding any mouse button and moving the cursor does turn the cam \[Win10/Firefox\]. Only throwing it out there since this might be the sort of attention-to-detail UX crap a company might consider if you're using this as part of a portfolio (which you should :))
Gotcha, I’m fairly new to coding as I’m learning js and Angular, so this is all new for me. Thank you.
If you leave the container and let go of the button, mouseup wouldn't fire and you wouldn't be able to stop dragging.
This is Javascript - so this is a *function* (which can be used as a constructor). The type "class" does not exist.
Ah, thanks for clarifying! Probably saved me hours of problem-hunting
Ah, thanks so much for the warning! I always use the mousewheel of the laptop pads so never thought of the actual oldschool mousehweel :)
Awesome!
np, glad to help. Wasn't sure if it was a instruction from an earlier iteration, certainly been there before myself; decide what all the buttons will be in design, write some documention/instructions, have to change things in development, never update the docs/inst... swear perfusly when some one calls me out on it... a tale as old as time. :P
&gt;The current version ([1.0.0-beta](https://github.com/Simonwep/candy/releases/tag/1.0.0-beta)) is only build for windows and linux. I could not find the linux build. May you provide? I'm using an older npm version, so I'm unable to build it myself
Thank you!
Really cool. One question tho, is there a real world use case for stuff like this or is it just for fun?
Thanks! I did this demo just for fun but this belongs to the particle system API of the engine that I've been working on and will eventually do a multiplayer FPS game with it. I like deploying stuff and sharing with people as it helps to get feedback and improve the engine both performance and UX-wise
Yeah that's a gotcha we all go through :)
Ah, ok with `yarn electron:build` the `background.js` reference is right without `./src/`! I build and started it via `./dist_electron/Candy\ downloader\ 1.0.0-beta.AppImage` and it runs but I get a lot of `No such file or directory` Errors: Failed to register app protocol { Error: ENOENT, KSHI_8RgpQ2bvICVL5ox7mzrCG1J0QYwILBZz6muSbYkboAO6sy1hXMW13Nf98RgB7_rkyDUwg=w1440-fcrop64=1,32b75a57cd48a5a8-nd-c0xffffffff-rj-k-no not found in /tmp/.mount_Candy kJE0KK/resources/app.asar at createError (ELECTRON_ASAR.js:131:17) at fs.readFile (ELECTRON_ASAR.js:548:23) at Function.n.protocol.registerBufferProtocol (/tmp/.mount_Candy kJE0KK/resources/app.asar/background.js:2:232914) code: 'ENOENT', errno: -2 } I can download a video, but then it starts converting and never finishes, even though I can see the video with audio in `/tmp/candy` but not inside `~/Downloads/`. This happens with the production build as well as with the development one.
Pinch to zoom doesn't work for me in Firefox. Looks awesome other wise.
Thanks for the feedback, I'm on it!
+1 for that, many people often suggest to «install this package and copypaste that» but there is nothing bad in reinventing the wheel if you actually want to gain dev experience.
Honestly, in my experience, accessibility has never been a big focus for most businesses until the last few years. Even then, you'll find most or medium sized businesses don't even care. I actually have worked with multiple hospitals and healthcare providers that don't even care.
Why delete? I was interested...
thanks for posting this. Its pretty cool and bookmarked for later. I don't want to hijack your thread, but want to ask this to relevant js devs. If you think my question is irrelevant I will remove it...but its related to webGL: I have a program that runs an algo in nodejs and I want to interface to a GPU. The program is using bitwise operators and gpu.js seems a little complex for me to take a javascript function and just run it but I think webGL is maybe a solution. Any feedback advice direction or input is appreciated.
How did that impact how you build pages? I can see how smaller companies/startups who have so much on their plate would skip it because it does take longer to push out a feature when you have to do a11y testing and support screen readers.
Thanks! For your question, if I got it correctly, I suggest you first to check out the Webworkers if you're concerned about blocking the main thread while doing your calculations. If you wanna full parallel, you can investigate the computation shaders.
Well, my previous employer limited our options on how we build (typically forced to use a hosted drag and drop builder unless the client insisted on WordPress or other features not covered), so I'd do what I could, but overall, if they didn't specifically ask for good accessibility, we only did the bare minimum. Mostly color contrast, alt tags, and the like.
Thanks!
Working now! Super cool :)
haven't used cypress but I've used test cafe and puppeteer and I'd say it requires at least intermediate knowledge of javascript and programming. If you're actually implementing a test suite from scratch for a large app, and expect it to be fast and good, that would require expert knowledge.
Hi /u/lrtwl, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/NoBrick2, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Pixel_Err0r, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ouch-hangover, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/karolis2017, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/panookies, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/paulqq, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/matcheek, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Sakib_Shahriar, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/odillini83, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/carloslfu, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; “the text is UTF-8 encoded, which is mostly the case” All strings in JavaScript use UTF-16. Also, it might be helpful to normalize the string or you could end up with things like è converted to `e
This is pretty cool. How are you checking the validity of the SQL, and generating the results?
There are some plugins for leaflet now too.
Are you a wizard?
Can you at least name some of those important functional libraries?
Will do. My apologies.
Resistance is futile
I was thinking of adding some pixel "snow"/particle animation in the back and some music but I hadn't even considered adding stats like clicks per second and total time, thanks for the suggestion!
I don't know just threw something together.
I can neither confirm nor deny that I'm a wizard.
You can use \`--match-filter\` Example with this youtube title "Joey Diaz Tells Hilarious Story About Auditioning for How I Met Your Mother" \`\`\` ❯ youtube-dl [https://www.youtube.com/watch\\?v\\=lacHuQE7Rj8](https://www.youtube.com/watch\?v\=lacHuQE7Rj8) \--match-filter 'joey' \[youtube\] lacHuQE7Rj8: Downloading webpage \[youtube\] lacHuQE7Rj8: Downloading video info webpage \[download\] Joey Diaz Tells Hilarious Story About Auditioning for How I Met Your Mother does not pass filter joey, skipping .. &amp;#x200B; ❯ youtube-dl [https://www.youtube.com/watch\\?v\\=lacHuQE7Rj8](https://www.youtube.com/watch\?v\=lacHuQE7Rj8) \--match-filter 'other' \[youtube\] lacHuQE7Rj8: Downloading webpage \[youtube\] lacHuQE7Rj8: Downloading video info webpage \[download\] Joey Diaz Tells Hilarious Story About Auditioning for How I Met Your Mother does not pass filter other, skipping .. \`\`\` &amp;#x200B; You can add it to your youtube-dl.conf file like \`--match-filter 'words I don't want in any video title'\` or a bunch of different --match-filter lines if you want. Assuming this actually uses the real youtube-dl, that is.
His courses are great, learning the intricacies of JS is essential. He is not an authority on clean code though, and his ideas on clean code are objectively wrong. You should learn about clean code from people who have a much deeper knowledge of software design than him.
Ugh, Safari: The new IE
I also noticed that horizontal Rotation appears to be inverted. When I drag my finger to the right, the scene rotates in the opposite direction.
I also noticed that horizontal Rotation appears to be inverted. When I drag my finger to the right, the scene rotates in the opposite direction.
I also noticed that horizontal Rotation appears to be inverted. When I drag my finger to the right, the scene rotates in the opposite direction.
Sign up and take a look - it's free, and you can just remove the script if you're not satisfied.
Looks up CORS. It's sort of like protection added to open API End Points to make sure random calls to them don't happen. You are calling their API from your domain, which is not passing the required security credentials to get the data. A simple hack could be to call any serverside API on your server and call this from there. That way, the calling domain might not be checked. If your server runs python, a simple requests.get could work.
Really good tips, didn't know most of these, thanks.
Ahh ok, so creating an express server get route would be the workaround instead of react's axios?
It's safer to call your server than the remote one directly in the front end, so I wouldn't call that a workaround as much as best-practice.
There's a SQLite-based Web SQL API built in to most of the modern browsers. Not saying that's what's used here, but it would be a straight forward and reasonable choice.
Creative use of the spread operator. Never heard of Set. Thanks 👍🏻
I've been continuing with his courses and learning a ton! Are there any people whom I should learn clean code from that you can recommend?
Yes, you're right.
Ahh. Cool thanks for the link.
Really good tips, thank You! :D
I'm gonna give it a go in my side project.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/reactjs] [Psychedelic animation generation using React and Styled Components](https://www.reddit.com/r/reactjs/comments/biejd9/psychedelic_animation_generation_using_react_and/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I believe they would limit others who is not the driver from answering the call, and because you're doing the video call the officer doesn't have the right to tell you see the inside of the vehicle, so you wouldn't be losing your 4th Amendment rights. I see both camera and window being the same as if the officer see's something then that creates probable cause. I guess this is where case law would come into affect lol
URLSearchParams is awesome!
&gt;serverside API on your server i'm struggling to understand what you both are saying. Can you point me in a direction of an example I can follow?
These are pretty cool. I was unaware of the aliasing feature for destructured objects. As a TS user, it's confusing. I wish you could us "as"
Great! If you need any help, feel free to ask.
Stupid, copy pasted article, does not shed light on the differences.
Uh-oh, must have missed that - was a while since I was here. Thanks for pointing it out anyway!
That was really fun, thanks.
Now just throw prettier plugin in there and we're talkin
In the last example: &gt;console.log(urlParams.getAll('action')); // ["edit"] Why does it return ["edit"] and not [1234, "edit"] ? Does it ignore http verbs?
Oh yeah good idea. I use the prettier plugin in VS code but I'll out it in this pack.
That's kind of the point though, assuming you're talking about YDKJS. It's not written for someone learning how to program. It's written for someone who knows programming basics, and needs to understand the fundamental intricacies (quirks) of JS to be proficient. The title of the book kind of implicitly reads as: "Yeah, you know how to program, but you don't know JavaScript"
Nice, thanks!
I didn’t know url search Params api. Finally I can drop using qs and god knows what else
Added
It does seem inconsistent especially when you use as in what is essentially destructuring an import / export ie {default as foo} Another thing to keep in mind also you can use [value] in destructuring to get the key referred to in the value variable from the destructured object
Flash? Silverlight? Are you from the past?
&gt; Another thing to keep in mind also you can use [value] in destructuring to get the key referred to in the value variable from the destructured object Could you elaborate / give an example? Didn't fully understand it but sounds interesting :)
Just create a route on your server that you call in your frontend. In the route handler, use e. g. Axios to do your request, just like you are currently doing. CORS is implemented solely inside of the browsers, so you can do a request from Node that would usually fail in your browser.
Hi /u/xexixx, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I’m on mobile right now, so it’s a bit harder to tell. But it looks like just about all the animation behaviors can be achieved with CSS. I’d be surprised if JavaScript played a big role in this site. But I agree, the design is beautiful and impressive!
I love david walsh blog.
I like it! I did notice what I think is a bug. When I tap the “left” button (on Safari iOS), the character will not stop moving left when I release the button. He just keeps going. Otherwise I loved it!
So if I understand correctly, the image itself is generated by css or manipulated by css? I don't come accross things such as this very often so please excuse me if I sound dumb.
Clearly you’ve never taken psychedelics.
Hi /u/hazytown215, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
background could be video which is being played at different speed if user scrolls, might be canvas as well. I follow him on instagram (@nrlyco) and he makes some really cool stuff.
I would have to get on my PC to be sure. You could definitely do all of the sliding in/out animations in CSS, and reacting to scroll movement is simple with CSS. If anything, he might have used JavaScript to handle classname changes on the elements, which could trigger a transition. Again, not positive, But certainly that’s how I would do it, if it were me. It also looks like he has a lot of CSS/design experience based on his credentials/awards.
yeah that's what i'm doing right now. I created an express route &amp;#x200B; `app.get('/', (req, res) =&gt; {` `axios.get(''https://stats.nba.com/stats/leaguedashteamstats?Conference=&amp;DateFrom=&amp;DateTo=&amp;Division=&amp;GameScope=&amp;GameSegment=&amp;LastNGames=0&amp;LeagueID=00&amp;Location=&amp;MeasureType=Base&amp;Month=0&amp;OpponentTeamID=0&amp;Outcome=&amp;PORound=0&amp;PaceAdjust=N&amp;PerMode=PerGame&amp;Period=0&amp;PlayerExperience=&amp;PlayerPosition=&amp;PlusMinus=N&amp;Rank=N&amp;Season=2018-19&amp;SeasonSegment=&amp;SeasonType=Regular+Season&amp;ShotClockRange=&amp;StarterBench=&amp;TeamID=0&amp;TwoWay=0&amp;VsConference=&amp;VsDivision='")` &amp;#x200B; `.then(function (response) { // handle success console.log(response); })` `.catch(function (error) { // handle error console.log(error); }) .then(function () { // always executed });` `});` &amp;#x200B; and that still doesn't work.
That's actually pretty cool. I had no idea I was stumbling across developers who have followings on anything besides their resumes. Small world
Yeah he's definately got some badass design background going there, and proves it in his work as well. I just hope one day I can match or surpass. But for now, I'm simply left daydreaming
Thanks for the correction, I'm not really sure why I had proxy objects on my mind when writing up my answer.
okay so did bit of digging and found out he's using this js library for for tracking scrolling [http://scrollmagic.io](http://scrollmagic.io) and this one for actual animation itself [http://www.greensock.com/js](http://www.greensock.com/js)
Hey, you can definitely achieve that. You just need to break down the problem into its composite parts, and execute. Since you’re a backend dev, you know you can do that. It’s not as hard as it seems.
Will you open source your code? I'd like to see how you did this.
I *think* it means that you can instantiate a new variable through de-structuring an object. I use this often with change handlers in input fields. &amp;#x200B; If you had an object with multiple properties you wanted to create variables with, you could pull from it like this: `const {value1, value2} = someObject`
[https://github.com/GKhalsa/sql-fun-time](https://github.com/GKhalsa/sql-fun-time)
I do use combinator functions in real projects. But first I’ll say, in my experience, people struggle a lot more with point-free composition than combinators. Also, I mostly don’t use the short-hand bird letters (e.g. B, K, S) unless there’s no other common name. But even with point-free, I think a lot depends on _how_ you use it. The way our projects go, we split things up into modules. The module contains a bunch of small, 1-3 line curried functions. These are _not_ point-free. They’re just regular named functions (so they show up in stack traces). Then there’s usually one main export at the end where we glue them all together with `compose()` (another combinator) or `pipe()`. And it’s mostly in these functions that combinators help. I’ve found that if my team understands composition, this pattern works just fine. As you’d expect though, trying to do all point-free, everywhere, confuses people. In practice, I find `identity()` (I) and `constant()` (K) surprisingly useful. And `flip()` (C) is also handy. But that’s probably not what you meant. I only recently discovered B1, so haven’t had a chance to use it much. But I’ve _wanted_ it often. The other one I use regularly is substitution. I call it `fchain()` in my implementation. I use it to build an equivalent of lenses. That is, I frequently want to pull a value out of an object, transform it, then set another property of the object with the result. The `lodash/fp` syntax is really convenient for this. So I create a utility function `getSet()` that uses `fchain()` under the hood to glue everything together. Would love to hear how your experiments with combinators go.
Well it probably wont be once i understand how it even works lol
On the bottom of the site, if you click on the github logo, you can see all the code. Cheers!
What doesn't work? Do you get an error?
Yup!
great article, tricks with spreading set and creating "pure" objects show 2 sides of JS: 1 - expressing things with short, elegant expressions, but not very good about performance 2 - if you want, you CAN care about performance and memory usage of your JS apps
Say you had const foo = “two” And you had an object {two: “hello”} You can const {[foo]: bar} = with that object
Absolutely next level Awesome work
Looks a bit off on mobile (e.g. the bottom portion is cut off), but overall I love it! Good work!
robert martin has a bunch of talks and sells courses
For fucks sake, this is a JavaScript-specific subreddit. It’s literally right there in the name.
Hi, thanks! Based on my understanding, the string is stored as UTF-16 units, but how the text is encoded is a different thing. E.g: there are a bunch of raw bytes, if JavaScript needs to do the encoding transformation itself, it has to know the originally encoding format, cuz \`SHIFT\_JIS\` and \`UTF-8\` will transform the text into different raw bytes, and know all the existing encoding standards so that it can do the transformation. It's too much for JavaScript engine. So that JavaScript just stores the raw data, without does an extra layer of encoding, decoding. Based on my understanding, C++'s standard library's String does the same, just store the raw data into 8-byte-units, without trying to decoding -&gt; encoding. &amp;#x200B; WDYT? Thanks.
Aaah I see – I tried using computed property names while destructuring before, but it never worked because I tried it without assigning to an alias. (so just `const { [foo] } = bar;` – makes sense that this doesn't work now that I think about it) Very nice to know that it works when using an alias, thanks!
Ya I'll chime in too. First of all, this website is beautiful. Second of all, not sure if he went this route or not, but pretty much everything I see could be done with CSS animations + JS triggers. I.E - when the user scrolls x amount, JS triggers x CSS animation.
I think I get your point, I'm going to remove "the text is UTF-8 encoded, which is mostly the case". It's indeed confusing.
Thanks, now, instead mention the UTF-8. I just pasted the [https://www.ecma-international.org/ecma-262/6.0/#sec-%25stringiteratorprototype%25.next](https://www.ecma-international.org/ecma-262/6.0/#sec-%25stringiteratorprototype%25.next) for how JavaScript specification think JavaScript engine should do the job to separate runes for people who want extra context. Thanks for your time on comment!
Did you put a script in your front end that calls this route?
&gt; hiring someone who only knows JS to work alongside someone who only knows CSS it's an obsolete model that never quite existed anyway It has existed in 2 companies I have worked. The designers would do a quick initial cut of the design into HTML and CSS and hand it off to a JS developer for the rest. The designer can come back later and make touchups/tweaks. The model works fine.
FYI, when you create a pure object, it has no impact on memory whatsoever, because those function's from Object.prototype are never copied. And I really really doubt they have performance benefits.
No, UTF-16 is an encoding, alternative to UTF-8. The two represent Unicode Codepoints in completely different byte sequences. The encoding of the HTML page is another thing, and it just determines what encoding is used for the data transferred by the server. Inside the browser’s engine (both rendering and JS) the HTML is converted to whatever encoding the system uses (often UTF-16)
How does someone e.g. a designer who only does HTML/CSS (or some other HTML/CSS/JS developer) who is new to the project come along later and tweak the layout, design or styling? They'll be looking at it from a visual perspective (through the browser's inspector tool) and trying to figure out where the inline style is coming from. How to they find out where to change that style it? The component based method is ok, but each component should be in its own directory with a separate .js, .css and .html file. That is much cleaner than one file doing all 3 at once. Also you can find things much easier in the inspector e.g. It will say exactly what file the style is defined in.
Ah I always had troublr with that so I just use it with eslint so eslint lints and formats. You have to turn off the vscode plugin. It's kind of confusing
Wow thanks for the info! I've always been partial to using as little javascript as possible anyways so hearing that this is possible via mostly CSS is awesome. Thanks for the link as well, I will have to check it out soon!
Seconded, cool tips! I rolled my eyes when I saw the title, but then it turned out some of these actually are very neat tips I haven't seen before.
Check out the checkbox hack if get some time. I wouldn't recommend using it, haha, unless you want to write 5x more css than you need and get 1/5th the reliability, but it should open your eyes to what you can really do with straight css.
Thanks for your reply, I spawn child services that listen for an interrupt to handle the threading...my next step is taking a process from CPU to GPU I looked the THREE.js and I think its going to take me a little while to translate what I am doing in javascript to work with shaders but I'm slowly getting it in GPU.js which kind of does the direct interface to GPU using "kernel" which interfaces as a "function" and leave the processed data on teh card I guess as a texture. Its alien to me atm but got at least one array calculation working....
You'd have to redo this file from scratch without looking at the original: https://github.com/jshint/jshint/blob/963d38d4c4f1aa31c373b64dbf08820f211b998b/src/jshint.js It's over 6000 lines long.
Rewriting that whole file would be quite an undertaking! Fortunately, the task I have in mind is far smaller. Keep the DM's coming :)
That's the one file which has a non-standard license. If you want to rerelease the entire thing under the MIT license, you have to recreate that file. &gt; Fortunately, the task I have in mind is far smaller. Well, if you don't actually care about the licensing situaiton, you don't really have to do anything.
And begin new challenge!
Thank you for pointing this out! Got it :) I fixed the issue based on your suggestion, now the paragraph is: &gt;The characters(instead of UTF-16 units) in the text can be separated, e.g., we can parse “🎉”, “1” out of “🎉1”. &gt; &gt;Luckily, we don’t have to do the parsing ourselves, if we use JavaScript’s String iterator to iterate through the value, the expected characters will be given. We can take this advantage from for...of or Array.from like the example below, you can read the String iterator’s specification [here](https://www.ecma-international.org/ecma-262/6.0/#sec-%25stringiteratorprototype%25.next).
This is awesome!
You're doing it wrong. You can use document.createElement to create the input you need. Attach event listeners, clear the container if need be, and set as a child of the container.
No on gave him an approach to use, instead everyone like you said, don't do it. If I felt the css keyframes and its Web Animations API were mature/compatible enough to recommend I would have. This question is an animation problem, and a request to explain why JS devs are close minded to native UI. I think you and I gave plenty of ammunition to [u/Pixel\_Err0r](https://www.reddit.com/user/Pixel_Err0r) to answer these questions. Yay us!
What’s this stereotype about eve online players being bad at design?
https://codecombat.com/play/dungeon ?
No no not that we're bad at design but that we play "databases in space" lmao I've built several eve utilities for myself in the past, never cared what they look like but they usually worked perfectly.
Nope it wasn't that one. It had more of an 8bit vibe to it. But this one does look pretty good too. Thanks!
http://www.dungeonsanddevelopers.com
Possibly being served with an incorrect mime-type?
Whoa, that’s neat! I know very little about Eve, but I definitely didn’t know there were programming elements to it.
Yes, there's a link to one in the reply you're replying to.
Sweet! Pretty awesome!
Hi /u/BibekSewa, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Is there a reason to capitalize attributes or decorators. In most shop conventions, capitalization indicates a class or constructor function.
This is a pretty worthless comment, but if you were code golfing... ['', 123, 0, 'foo'].filter(Boolean); ['', 123, 0, 'foo'].filter(x=&gt;!!x); ...the latter is one less character.
Heres one way you could do it. Put the image input element in your html container //fetch the element from the DOM by finding the \`input\` which is a child of \`#sounddemo\` like a css selector. "#sounddemo input" let element = document.querySelector("#sounddemo input"); //if you need to remove any even listeners attached to the input you probably don't need to do this. element.removeEventListener("click"); //add and event lister to the element on click element.addEventListener("click", sound.playPause ); // OR // assign the playPause to the onClick function that way you don't need to remove the event listener if one exists. element.onClick = sound.playPause
Node does not natively support import in JS files. Use require(), or use import and babel.
He's using a WebGL shader. Here's the relevant code from the site source (`js/min/scroll_liquid.js`), formatted a bit. Note that this is lightly minified and was likely written more idiomatically. !function () { "use strict"; var t = document.querySelector("#webgl"), e = 0, o = createREGL({ canvas: t, onDone: function (t, e) { t &amp;&amp; alert(t) } }), i = new Image; i.src = "img/liquid.jpg", i.onload = function () { setTimeout(function () { document.body.classList.remove("loading") }, 1e3); var r = o({ frag: document.querySelector("#fragmentShader").textContent, vert: "attribute vec2 position; void main() { gl_Position = vec4(3.0 * position, 0.0, 1.0); }", attributes: { position: [-1, 0, 0, -1, 1, 1] }, count: 3, uniforms: { globaltime: o.prop("globaltime"), resolution: o.prop("resolution"), aspect: o.prop("aspect"), scroll: o.prop("scroll"), velocity: o.prop("velocity"), texture: o.texture(i) } }); o.frame(function (i) { var n = t.scrollWidth / t.scrollHeight; t.width = 1024 * n, t.height = 1024, e = window.pageYOffset / (document.documentElement.scrollHeight - window.innerHeight), o.clear({ color: [0, 0, 0, 0] }), r({ globaltime: i.time, resolution: [i.viewportWidth, i.viewportHeight], aspect: n, scroll: e, velocity: 0 }) }) } }(); He's using [REGL](https://regl-project.github.io/regl/) to simplify WebGL programming; this is where `createREGL` comes from. [Here's the source image](https://nrly.co/img/liquid.jpg), `img/liquid.jpg`. There's a very simple inline vertex shader. A vertex shader positions a vertex in "clipspace", which is a coordinate system that locates things on the canvas you're drawing on in a (-1, +1) range on each axis, with the center at (0,). This particular shader just positions the vertices correctly and doesn't change from frame to frame: (`vert: "attribute vec2 position; void main() { gl_Position = vec4(3.0 * position, 0.0, 1.0); }"`) And there's a more elaborate fragment shader, included separately in the document as `&lt;script id="fragmentShader" type="x-shader/x-fragment"&gt;`: #define TWO_PI 6.2831853072 #define PI 3.14159265359 precision highp float; uniform float globaltime; uniform vec2 resolution; uniform float aspect; uniform float scroll; uniform float velocity; uniform sampler2D texture; const float timescale = 0.02; const float twist = 1.0; vec2 rotate(vec2 v, float angle) { float c = cos(angle); float s = sin(angle); return v * mat2(c, -s, s, c); } float nsin(float value) { return sin(value * TWO_PI) * 0.5 + 0.5; } void main(void) { float time = globaltime * timescale; vec2 center = vec2(sin(TWO_PI * time * 0.2), cos(TWO_PI * time * 0.2)) * nsin(time * 0.3) * 0.5; vec2 tx = (gl_FragCoord.xy / resolution.xy - 0.5 - center) * vec2(aspect, 1.0); float len = 1.0 - length(tx); float zoom = 1.0 + scroll - len * 3.0 * (1.0 - scroll) + len * velocity * 2.0; vec4 imgColor = texture2D( texture, rotate( (tx + center) * vec2(1.0, -1.0) * zoom, twist * TWO_PI * nsin(len + time) * scroll + time ) + 0.5 ); gl_FragColor = imgColor; } This fragment shader... does the thing. A fragment shader is run for each pixel, and its output is the color that pixel should be, which is assigned to the special "global" `gl_FragColor`. I'm not familiar enough with graphics math to really understand it, much less explain it in depth. As you can see, GLSL syntax is very similar to C, which indirectly inspired JavaScript syntax. `gl_FragCoord` is the coordinate of the pixel being colored, in clipspace. He has another canvas `#noise` hooked up to a script `js/min/noise-min.js` which just draws random noise on the canvas. As far as I can tell it doesn't have any effect on the page and isn't shown.
&gt; raw data into 8-byte-units, without trying to decoding -&gt; encoding. That is incorrect. All text require encoding. C++ stdlib inherits locale of your OS/compiler. If you only care about 7-bit char (ASCII), you can get away with a lot without caring what your OS locale is, but as soon as you want to consistently support 8-bit character like the Euro symbol, you need to be keenly aware of the encoding.
You're right. Also, why did you mix up require()s and imports?
It's also less performant/memory effective due to creating a new function every time it's called.
It is, but worth noting is isn't supported by any version of IE. This bit me a couple of weeks ago but luckily there are a few small polyfills that do the job.
best tsconfig i have ever seen.
The V8 engine is very well-optimized, and will certainly cache the function for you.
IE just being IE. Object.Assign bit me in the rear a few weeks ago.
It's the default from the tsc init command with some parts modified/ uncommented.
Remember it needs to be polyfilled
Just include a polyfill for this bastard
No virtual dom isn't a good thing. Im not sure why some people are trying to present it as such. Its like, there is no abstraction over a db, so we will bombard it with hundreds of single queries each time for even trivial interactions.
Yeah, still kind of confused by it tbh. I got it to work by fiddling then stopped fiddling. Which sums up everything I have ever done in configuring JS environments.
Re: `.filter(Boolean)` Maybe it's just me but I find this more intuitive: `.filter(x =&gt; x)`. At least, if I saw the first thing in a code review, I'd have to stop and think "Wait, does that work? Doesn't it need `new`?"
Thank you very much, appreciate your sharing! Will be more careful on researching the next time!
Despite the same name, they're different things. One is a data structure that stores key/value pairs, i.e. maps keys to values, the other is a function that transforms each value in an array to another one. I can see a map function posing certain issues with the Map data structure. What would the transformation look like? Should the result be an array, so a transformation from [key, value] to just [newvalue]? Or [key, value] to [key, newvalue]? Or [key, value] to [newkey, newvalue]? The latter can probably be ruled out since it has weird side effects if you end up transforming two different keys to the same one. In the end it's probably by design since map doesn't play all that well with Map. Besides, you can still use for...of loops on Map if you need to: let data = new Map(); data.set("a", 1) data.set("b", 2) for(let [key, value] of data){ console.log(`${key}: ${value}`); }
Thank you for your answer, +1! Still, it's implementable: [https://stackoverflow.com/a/55826288/978690](https://stackoverflow.com/a/55826288/978690) but I understand your point!
Nothing too wrong with the virtual-dom per se, it's more of a how the diff and the re-render is happening. The real dom is not slow, so we can leverage it to diff against it and patch only elements that need to be updated. The real dom gets mutated in place. Multiple libraries, including the one in this post rely on the real dom to make update. This practice tends to be more memory efficient, as it doesn't keep a copy of the virtual dom tree, and also reduce GC activity.
`x=&gt;x` for code golf
I'm fairly new to Javascript. What is a good practical example where one needs a pure "dictionary" object?
So when are people going to permanently start dropping IE? 2020 when Windows 7 stops being supported? In a decade perhaps?
If they are looking at it from a visual perspective they can find the corresponding component for that element and see how it’s getting set. It might be harder for the designer, but I’m of the opinion that anyone competent enough with HTML/CSS could learn enough to make styling changes via a CSS-in-JS solution. I’m sure there’s cases where it sucks and a more traditional approach is preferable depending on things like the stack your working with and what needs to be shared. I still don’t see how you could split the role in a professional context. There’s going to be integration overheads. Similar to a frontend and backend dev relationship.
Not sure what you mean by attributes, but for decorators, almost all other tools I am actively using do use the same convention (nestjs, angular), as well as ORMs I was inspired by (doctrine/hibernate).
The post is gone :( I've read it over the weekend and wanted to get back to the code today.
It should be available. Can you provide more details so I can try to debug if it's my fault?
Regarding isRequired trick. I have like 10+ experience with Javascript and I did not know that function as a default argument value will get executed at the call time - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters#Evaluated_at_call_time
Completely unable to find the web at all. But come to think of it, it is probably on my end. I did read it at home, but now at work we do have .dev domain still somewhere in our configs probably. We migrated all the dev machines from that domain, when Google claimed it, but evidently it remained somewhere and I can't see any live .dev webs from work. Yours just happens to be the first one I ever encountered.
Do you have any resource that goes into this topic in depth?
7 tricks to kill readability! I prefer could to be easy to reason about. It's not good practice to use weird tricks to achieve something. I would rather you spend the extra line and type it out properly. Or at least encapsulate it in a function.
Warriorjs?
Yes, that’s it! Thanks stranger!
&gt;So when are people going to permanently start dropping IE? Not soon enough! &gt;2020 when Windows 7 stops being supported? IE11 is officially supported until then end of Win10, as is MS's standard (the browser EOL being tied to the EOL of the OS revisions it was installed with by default). Unfortunately they've said Win10 is to be the last major release on the desktop, so unless/until this policy changes IE11 will keep being available and getting security updates so some will insist on keeping using it... &gt;In a decade perhaps? It depends on your target audience of course. Some of our clients have only recently stopped using IE8. IE11 is going to be a Thing for us to deal with for some time to come.
Great Article! They offer some interesting features, but if you are already using a framework like react you probably wont use them very often.
It's great. Thanks for posting :)
it uses tweenmax (JS library I think), Jquery and google fonts you can install sth like wappalyzer in your browser it tells you which tools are used to build a website :)
Seven reasons future JavaScript codebases will require senior developers for everyday maintenance.
It is weird - fortunately there's now a proposal to add the methods you'd expect to find on Map and Set https://github.com/tc39/proposal-collection-methods
As a backend developer, I feel like web components are the perfect middle ground between writing crappy inline JS and requiring full blown JS frameworks
So, there's not, but the api is extremely in depth and CCP (the creators) push for people to make their own utilities such as industrial calculators, market watchers, live killboards or what have you instead of trying to do it all themselves. Leaves a ton of room open for creativity. As far as the game itself, no programming required. And you can play it your whole life without ever building any type of software utitility, but I personally hate staring at spreadsheets so I make stuff for the things I need to keep track of
Wow, now this is in depth, and ungodly appreciated. Looks like I've got a LOT of research to do! Thank you! For some reason I have looked at the source for every "portfolio" site I've come across EXCEPT this one, who knows why. Sounds like design might actually be more up my alley than I originally thought, and that is friggin awesome
Aaand I'll be doing that today. Never knew there was such a thing
Thanks!
This sounds like it was generated by a neural net
Cool! I just think that when you get the right answer, you should see the result, not be immediately carried to the next challenge...
Depending on the app/site you work on...you already did. *raises hand* IE hasn't been supported for a while now....so if your app is primarily mobile oriented or aimed solely at modern devices then drop it like its hot.
No thanks. Google have their fingers in too many pies as is.
I added a jsfiddle link to the post. I hope this satisfies your requirements.
I really would not call this "implanting". It more looks like porting Node.js to Fuchsia. V8 is already up and running on Fuchsia which is the harder part, IMO. https://fuchsia.googlesource.com/
Uncaught TypeError: Cannot read property '0' of undefined at new TextBlock (pen.js:5834) (Chrome 73.0.3)
The idea of Google “implanting” anything makes me think of spyware
.... like the V8 engine that powers Node.js?
Oops, my bad!
[removed]
Hi /u/yiss92, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Basically (if you are using linux): 1. Download the repository 2. Install npm (node package manager) 3. cd to the candy/ folder 4. run npm install 5. run npm build
Thanks for that, looks like I’m going to start learning Linux haha
Hmm, I’m reminded of node.qml some years ago. So QML lost (is losing to) Flutter (Fuschia’s co-developed UI sibling). But what if Flutter could be developed in JavaScript as well as Dart, and take advantage of the massive Nodejs package repository: https://paulhammant.com/2017/04/08/node-qml-was-the-key-to-the-ubuntu-phones-success/
This works too: ['', 123, 0, 'foo'].filter(x=&gt;x)
Project Page (?): https://github.com/abhas9/vanilla-caret-js *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
This looks amazing, nice work
Amazing work!!
Thank you!
Hmm, this seems dangerous granted the security loopholes found in poor js code. Allowing Node.js code on a kernel level sounds like a HUGE security risk if there was a flaw found. Now I get that the world isn't perfect and all, I just think they really need to make sure they have the security concerns for this squared away completely
Thanks :)
Great question! It's hard to give an example, because it's a really very rare case - most when you want to treat your variable more like a kind of *associative array* than an `Object` instance (what can be welcome when someone came to JS world from some static typed language). Because you inherit from `null`, then you don't have access to methods on `Object.prototype` (like `constructor`, `hasOwnProperty` or `valueOf`) which results like this: const dict = Object.create(null); dict instanceof Object // false dict.toString() // Uncaught TypeError: dict.valueOf is not a function This way of creating things can be used when you want to build some API library, which couldn't be extended *from outside* (eg. by passing values to `Object.prototype`). But in most cases you don't have to care.
The only one of these thats remotely senior is the pure object
Hi /u/DillieDooDot, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rap2h, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AutomaticManager888, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Sempethy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ridyal, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jyourman24, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
There is nothing in either OP’s post nor the link to indicate that node.js will be running in kernel mode. It’s a micro kernel OS. Most likely everything but the core OS processes will be in User Mode sandboxes.
Bad bot
There are no clearer examples of self fulfilling prophecies than webdev technologies that are espoused purely based off usage trends. It's popular because it's popular. What does that even mean? Not much, at least from a critical engineering viewpoint.
They suck for replacing frameworks for now. Because the shadow dom is totally encapsulated trying to use them to build the ui is really tedius. For now I'd say they are better for components that are completely self contained and reuseable or for mostly logic (aka a component that switches themes, or a lazy loading image component) Shadow parts will make a huge difference so you can use components replace a lot of view library functionality.
I got a loop of refresh browser when I enter to the codepen in Chrome
I prefer writing it in full .filter(x =&gt; Boolean(x))
What happens if the open() fails?
Hi, yeah, probably need to be running a fairly decent graphics card. Have tested on a Linux/Windows, Chrome and Firefox, running a GTX 1080 locally. GL code is targeting WebGL 2.
This sounds like the inevitable future. The biggest hangup with Java as the language of android has been... java itself. Its not low level enough to replace C/C++ for high speed applications such as games or cryptographic code, but at the same time its not high level enough for convenience, portability, or rapid development. Java ended up being an Achilles heel for android apps, and its already being displace by JS as we speak. IMO; this is long overdue; simple ripping out all the Java infrastructure, and making the system language of the phone ecosystem JS with a DOM style core library available, means you could create a basic phone application as easily as a web page. for more intense processing, of course C/C++ ndks would still be available, and would interface with apps over GYP or similar.
What does that mean?! Sorry, maybe that's a silly question. I'm new to reddit, and this is my first post in JavaScript...
https://github.com/krausest/js-framework-benchmark/issues/549#issuecomment-483054081
There are a lot of bots on reddit. Some of them are good and some others are bad. There is also a bot to rank the other bots, and you can give a vote to a bot writing "good bot"/"bad bot"
OMG, didn't know that! I'm certainly not a bot, LOL...
Hahaha! I also am most definitely not a BOT but a fellow human like yourself. Please find attached my Turing test results for verification, ${USER\_87892}
See: Palm OS
&gt;for more intense processing, of course C/C++ ndks would still be available, and would interface with apps over **GYP or similar**. I vote for "similar;" it should use WebAssembly. Starting from scratch with anything else seems like an oversight at this point.
That's exactly what a bot would say.
So ahead of its time, hampered by a shoestring budget and terrible management.
so what do I do about dynamic css. I need to have calculated background color to some span's, and feela weird to write `&lt;span style="background-color: {f(stuff)}"&gt;`
Web OS was so amazing
Now that's scary... How would I know you're not a bot then?! I mean, how would anyone prove that s/he is not a bot?! Just a side question, is reddit full of these bots?
I'm certainly not a bot, LOL...
Yes but they're not spammy bots per se. More like fun hacky projects made by other users. [There's a bot](https://www.reddit.com/r/CompileBot/wiki/index) which complies and runs different languages for you by the input of a comment for example. It's more that kinda stuff.
With Svelte 2 I was using SASS inside my svelte files I’d ask this to u/rich_harris if things changed now
Oh OK, now I got it! Thanks for explaining...
It is exactly the same as the match version; it returns the error.
Thats what a bot would say
Depends on your product I suppose. We already don't support IE. But we're B2B, so we can have more say.
`Greetings fellow human friend: I think you forgot to interpolate a string.`
That was a lucid, intelligent, well thought-out explanation. ***Sustained.*** I mean seriously solid without gatekeeping or jargon. Do the world a favor. Have kids.
the example is extremely simplistic. how does it handle loops/repetition and template composition (sub-templates)?
Hi /u/Simply2Pro, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I literally wanted this last week. Will it work with `&lt;template&gt;` elements?
This is the most blatant and disgusting cheating I've seen in a while. I hope your teacher sees this.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
You should read this https://www.reddit.com/r/AskReddit/comments/348vlx/what_bot_accounts_on_reddit_should_people_know/
Did that idea strike you when you bought your first always-on handheld with an always-on internet connection? "Privacy" has been an issue for 20 years, but nobody was talking about it when Nokia ruled the world with T9 texting. A lack of privacy is embedded in everything electronic that you could think to buy today. Crying foul at google for "implanting" spyware under the guise of convenience is to ignore everything from "Internet Of Things" bullshit all the way across to your TV and "lower insurance rates if you put this monitor on your car". "Lack Of Privacy" is a daily, hourly way of life. This doesn't make it "worse" in any measurable way because it's already long surpassed that level of badness.
WebOS was fascinating, and I was sorry to see it fail. Shoestring budget was less a problem than timing. Palm had fallen on hard times and was circling the drain. One of the things they had tried to do was a new version of Palm OS that would provide proper support for multitasking. (PalmOS 5 Garnet was built on a micro kernel called ATX from an outfit called Kadak that implemented preemptive multitasking, but Palm's license didn't permit them to expose the functionality.) The new OS effort was being done by a team formerly working on BeOS. I understand it actually got released as Palm OS 6, but no one, including Palm, actually tried to implement it on a device. Too resource intensive and too buggy. Along the way, Palm spun off Palmsource, its OS development division, to placate major OEM customers like Sony, and it got bought by Japanese outfit Access. Access tried to do what Palm arguably should have done in the first place: implement a Palm UI layer on top of a Linux kernel, instead of trying to create a whole new OS. It got beta release on an old line of Nokia handhelds, but never really became a production OS An outfit called Elevation Partners bought a bunch of Palm's stock, and hired a senior developer from Apple to oversee a new OS that became WebOS. It was completed and was released in a new line of Palm Pixi phones. The problem was that the new line of devices simply didn't *sell* well enough to save Palm as a going vendor. Palm was put up for sale. HP paid about a $billion to get Palm, and as far as I could tell, did so specifically to *get* WebOS. WebOS was portable, and not tied to any specific architecture. HP's CEO at the time, mark Hurd, announced plans to put WebOS on *everything* HP made as an alternate to the default OS. It would have been profoundly disruptive, and I was all in favor of the notion. But resigned under fire for an inappropriate relationship with a female subordinate, WebOS lost it's champion, and his short lived replacement wasted no time on blaming HP's poor financial results on HP's acquisition of Palm. *He* decided one of the cures for HP's woes was to get out of the PC business. the market did not react well to that announcement, HP's stock price nosedived, and he was out in 6 months. His replacement was former eBay CEO Meg Whitman. WebOS was made open source, but there were licensing issues in *making* some of it open source, development languished, and it's effectively dead now. HP released a short lived line ot tablets running WebOS. At some point, I'm going to see about grabbing on from eBay. There are folks who got them to dual boot WebOS and Android, and that would be a neat toy.
I don't think Java is the problem Fuschia addresses. Android currently uses a Linux kernel, which is a monolithic architecture. Fuschia will have a micro kernel design that potentially offers a lot of possibilities. But to make it a seamless transition, Fuschia has to support the existing Android API. Applications should install, run, make OS function calls, and get expected results. As long as the layer the application deals with remains unchanged, it will neither know nor *care* that there's a Fuschia micro kernel under the hood instead of Linux. Java is cross-platform, and a reasonable choice as applications language when the app might be expected to run on a variety of architectures. And note Google isn't using Oracle Java. The Dalvik JVM is their own fork of Java code. Having JS support baked into Fuschia offers all manner of possibilities, and it's no surprise it's being done, but I don't expect Java to go away on Android any time soon. (I'd actually be startled if it went away at all.)
It's probably going to be included about the same way python is with linux or mac with ruby.
I think another thing to look at is and why it's a good usage for anyone starting something new. Is future proofing. In a lot of companies software stack and framework choice can change but if you're building your base components in web components you guarantee that you won't have to rewrite your component code when you migrate frameworks. Sure it doesn't always happen but you have the peace of mind knowing that hey I don't have to rewrite any of these components that we use. I'd also say that stencil and any web component library lends itself very well to creating design systems with actual usable components. Now that would depend if you have a UX Engineer who can build you a design system and push for those components to be used within a team. Overall though none of these web component libraries are meant to replace the existing view frameworks like React, Vue.js, Angular, etc. They are just meant to be used in conjunction.
will do!
Damn, what's the deal with failed web-based phone operating systems becoming Smart TV OSs. Same thing happened with Firefox OS for Panasonic TVs.
maybe when IE definitely changes it's engine to Chromium you may ignore it for high end users website (your site/product is not targeted for them)
Hi /u/Musfiq-Fahad-Amin, in the future, please post links using the "Submit a new link" button. Thank you.
That’s a decent trade-off, IMO. React and similar virtual DOM implementations tend to tax memory and GC resources, which is fine for most modern browsers and devices, but on lower-end hardware, it seems wasteful. Preact does a similar mutate-in-place DOM-diffing strategy, if I recall correctly. The difference is in whether you want to separate the concerns of creating a view model and mutating the DOM. In React’s case, they really wanted to abstract those two concerns into separate domains, so they could apply the model-generation algorithm on different platforms (i.e. React Native), changing the rendering implementation alone. But if you are only targeting the web browser, then diffing directly against the DOM is practical, maybe even preferable.
\&gt; Computer Science 2/JavaScript exercises and give me the answers. Thx!!! np1!!!
Hi /u/Ryluv2surf, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/errrzarrr, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DISISREALLYTOOMUCH, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
[Ungap](https://github.com/ungap/url-search-params) cover URLSearchParams and a lot more. It's helpful as a standalone polyfill when you don't want the bloat of Babel + core-js
That's how it should be. Dart is ok but if it's the only language to develop a UI with it would lead into a huge Desaster. Flutter must be open for all languages.
Hi /u/pmz, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This isn’t Edge though. IE is never getting updated again
I hear ya. That B2B market sure is sweet. I feel bad for all those poor bastards supporting IE6 at Amazon.
Same here. The create-react-app project shows how to use a hook to run it on git stage. That seems dumb to me. Just do it in vs code so you can see the changes. :-/
Or, at the very least, this is a good resource to see how to do it in the first place. Thank you for your time on this project.
Small correction: WebOS (and the remaining WebOS developers ) ended up getting transferred to LG, where it still lives on as the OS of their Smart TV products (and a few other, more niche products). There is also an open-source WebOS version, but it’s missing a few things, as you mentioned.
Agreed, they're not a replacement for frameworks but they do replace the functionality of many libraries. More importantly, I see "total encapsulation" as more of a feature than a limitation. Even with BEM, without web components there is no way to completely remove an element from external influences (esp. global CSS). I've used the `all` and `unset` properties, but they're still limited in their abilities. From a JS-perspective, it can be difficult to embed third-party applications for purposes like analytics, but to have them exclude certain content from their global event registry. Web components create a framework/ library-agnostic method for embedding functionality and style in an isolated context. Everything else like state management, theming, etc. is up to the developers as to what problems they are solving (and may or may not warrant using a framework).
OK, I will, thanks for letting me know...
Why?
&gt; The problem was that the new line of devices simply didn't sell well enough to save Palm as a going vendor. Palm was put up for sale. I realize webOS devices didn't sell well, and I find the reason for that, as stated, to be a result of low budgets and poor management. webOS launched with some serious problems that they just didn't have the manpower to fix.
That's what a bot would say.
I agree as long as it feels seamless. QML’s inlined JS was seamless, and JS could easily be as easy on the eye as Dart for flutter. Going back to 1995 - escaping from a fully declarative HTML (SAX) to inlined JavaScript (YACC) was a horrific impedance mismatch, which just got worse and worse over a decade
How about something like this: function ValidateIPaddress(ipaddress) { if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) { return (true) } alert("You have entered an invalid IP address!") return (false) }
Wait theres actually a bot that ranks the other bots?? I thought people were just saying good/bad bot for karma
Apollo and Redux are 2 popular libraries used with React. They are included for various reasons, but mainly for: 1. Managing a store 2. Assistance handling data fetching 3. Triggering any re-rendering with updated props But what mechanisms do they use under-the-hood to do this, and how do they differ when it comes to handling props and rendering? I decided to investigate and the post is the product of that.
&gt; Android currently uses a Linux kernel, which is a monolithic architecture. Fuschia will have a micro kernel design that potentially offers a lot of possibilities. I would be more excited if Fuschia didnt have a kernel change. Ive always loved the idea of micro kernels, but they just never seem to pan out. Hypothetically, yes, they should make driver development more modular and easy... but in practice it just hasnt. &gt; Java is cross-platform, It was supposed to be, but has fallen quite far short of that. you really cant reuse much code across platforms with java the way you can with JS. You dont see many ios apps running java, for one example. Applets have died out, and desktop java is all but gone. &gt; and a reasonable choice as applications language Sure, you could argue it was reasonable, especially in 2005. I think that time has passed now as it has been eclipsed in both ease of use and portability. The only niche java has left is education, but that is being chipped away by python lately.
Hello, am also human. It appears that your grammAr module is out of #date. Please update to `${date.now}`.
Is u/B0tRank [Here](https://botrank.pastimes.eu) is the ranking
https://outline.com/LbSTXE
The funny bit: WebOS wasn't even really first. Before WebOS, [there was a research OS from Nintendo](http://ajaxian.com/archives/nintendo-es-operating-system-on-javascript), and prior to that, there was some work at Opera (Opera Platform) that was never productified. Opera Platform predates WebOS by about 4-5 years, while Nintendo's research OS was a couple of years ahead.
Hi /u/Jeffylew77, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It's a great start. As is the case with any skill, you'll develop your way of working which will change over time as you gain experience. One big recommendation I would give is, when the time comes and you have to look for help, try to understand the code instead of just copy pasting. The prospect of getting a feature working quickly and rushing to the next problem is tempting, but never forget that the real reason you're doing it is to learn and learning means truly understanding what you're building.
The idea of Google anything makes me think of spyware.
I updated the comment.
I spent like 3 days fiddling with webpack and such until I finally figured it out. Then once I figured it out I made a portfolio site that's multi page regular typescript css and html which means you've gotta configure it even differently. I'll pm you my boilerplate it might be helpful
This cool little local game : [https://pesauvage.github.io/SI-JS/](https://pesauvage.github.io/SI-JS/) :)))
The decision to eliminate personal devices and have corporations control access to everything a person does on a computer was made decades ago. It just needed to be implemented slowly enough so that people won't notice.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
I've been looking for a real simple library to plot "network locations" on a world map, similar to [Cloudflare](https://www.cloudflare.com/en-gb/network/), or [Zeit](https://zeit.co/smart-cdn) and many more, with hover support to show the location. There's many solutions out there, but they all either require a massive library like D3, or have super complex APIs. I'm getting close to building my own, but really all I want is an SVG map where I can pass a bunch lat/long co-ordinates, and it does the rest.
You don’t have a stylesheet
I haven't been able to find an established library for browser-side image resizing. On NodeJS we have sharp which is undeniably the best out there, for the browsers there are some options but they are usually very limited and not well established.
I think setting the prototype to null would technically save memory, because your object wouldn’t need a pointer to Object.prototype? In the real world it will make zero difference though, yeah.
React table probably will meet your needs. https://www.npmjs.com/package/react-table
Thanks. Is there link to the column examples I'm missing?
CSS specificity doesn't apply to methods like `getElementById` and `querySelector`. They're specific to JavaScript and are only used to obtain a reference to an element. In your example, `document.getElementById("demo") === document.querySelector(".fish")` - there's no difference between the value they return. Additionally, when setting styles through the JavaScript `style` object, you're setting an inline style which has precedence over CSS styles (linked style sheets or css in a `&lt;style&gt;` tag). There is no specificity there.
[removed]
There is a custom sorting one listed in the examples. That’s a pretty widely used package so I think you’ll be able to do anything you need to with it.
Clearly it wasn’t so easy to Google. Luckily this got solved before it was removed...
Er, I don't think Ubuntu can use an AppImage.
The only guy in this thread that has an actual grasp on the industry. There is no way Java is going away.
That's just what a bot would say
Everyone on reddit is a bot except you
It's also [going to support swift](https://www.theverge.com/google/2017/11/20/16681556/apple-swift-language-google-fuchsia-os-open-source), for those interested
Yea, I'm sure they're just opening it up so people who don't want to use Java aren't forced to.
Second this.
A mobile friendly datetime picker.
I haven't used Gatsby, but from what I understand it's primarily a static site generator, thus not very well suited for dynamic content. Since Gatsby uses React you could still fetch dynamic content client-side, but then you'd lose out on server-side rendering. Next.js might be a better fit: https://nextjs.org/
Using flutter widgets in react native app, for easy transitioning. More than just js, but needs to be done
Ah, thank you. I'd missed WebOS becoming embedded in LS SmartTV products. Nice to know it's still in use.
Web applet? Blimey, I haven't heard that word since 1996
Was just trying to help :[
You said it yourself - "the designer" - i.e. they are no developers. Their CSS / HTML is going to be worthless for production, as they will know nothing about repaint / reflows, accessibility, and so on and so forth. Their output is only good as a visual guideline for developers.
As others have said, specificity applies to CSS, your code is JS.
Look into "Promises" and "Async/Await"
Eeerm, we can :) I've used Ubuntu to develop the app, and can assure you that it does support AppImage. But since more distros can use that format, I agree that the download button should refer to no specific distro.
Hi /u/AjYendluri, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mementomoriok, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Willingo, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/snowboarder1010, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/semanser, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/thecreazy, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FriendlyMinimum, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tangobacon, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tiarno, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Dasnowman1183, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rcx918, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MoonMaster33, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/arag0nas, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
If Fuschia *doesn't* have a kernel change, the point to *doing it at all* goes away. Micro kernels *are* neat ideas. IBM was working on something called Workplace OS years back, using a micro kernel design, but it never became an actual product. My understanding is that Apple originally intended to use use a micro kernel based on Carnegie-Mellon's Mach for OS/X, but ran into too many problems with the overhead involved in switching between kernel and user space. They went to a modified BSD Unix kernel instead. I suspect the underlying problem was software that needed newer generations of hardware. The hardware being used simply wasn't fast enough to run the software in any fashion the user would find acceptable. Hardware gets steadily smaller, faster, and cheaper. I think we may be at the point where you *could* implement a micro kernel architecture successfully, because the hardware could execute it decently. And I'm aware Java is isn't perfectly cross platform. I used to work for a streaming video startup that used Java for its streaming server. The lead Java developer could go on at length at how easy it was to write non-portable Java code. I agreed. You had to know what you were doing, and sometimes possess detailed knowledge of what was going on under the hood that the JVM attempted to abstract away. I saw similar things in the old Mozilla days. Mozilla products were written in C++, and they took pains to be portable and run on everything. There was an amusing Mozilla developer's document about writing portable code, that reduced to "All C++ compilers are not created equal. Just because it compiles and runs on x86 using Microsoft Visual C++, don't assume it will work elsewhere." The slow child in the C++ compiler class was the C++ compiler released by HP for machines running their HP-UX Unix flavor, which would barf on code everything *else* would compile. Mozilla finally said "We support Windows, Linux, and OS/X. If you want our code on something else, *you* can build it and send us patches.", and stopped *trying* to make sure the code ran on everything. I don't find Java an obviously bad idea now. Lots of devices like phones have JVMs and assume Java as the app development language. Your Java code may not work "out of the box" on all intended targets, but I'm willing to bet fixes to get it to work on product X are minor revisions to extant code, and it's a lot more feasible to aim for multiple targets. As for being eclipsed, mileage varies. For example, I have Windows and Linux here. I have IBM's open source Eclipse programmer's IDE. It's written in Java. I run the *same* binary on Windows and Linux. (And on an old netbook that dual boots Windows and Linux with limited disk space, there is *one* copy of the Eclipse binary. It happens to live on the Windows side on an NTFS file system, but Linux can read NTFS and load and run it.) And no, I don't expect that it would run on Android... :p I have stuff written in Python too, but it's not a Java replacement, and there is still lingering fallout from the shift from Python 2 to Python 3, with incompatibilities introduced in the process. The bigger problem is the sheer volume of existing Java code in production. It's like COBOL (which is still in production in many places. It is too much effort and *way* too expensive to simply replace, even if you have a language of choice for a replacement. It goes away bit by bit, as stuff once centralized on a mainframe in COBOL gets migrated elsewhere and rewritten in the process. There is a generation of programmers competent in the Dalvik Java variant Android implements, with untold millions of lines of Java code in production. Fuschia potentially opens Android to other languages as well, but they will be in *addition* to Java. *Replacing* Java will happen very slowly, and I don't expect that process to be completed in my lifetime.
You are in luck! I just spent several days researching this. Here are some options (listed in no particular order): - https://github.com/zigomir/nanocal - https://flatpickr.js.org/examples/ - https://github.com/airbnb/react-dates - https://amsul.ca/pickadate.js/ - https://github.com/uxsolutions/bootstrap-datepicker - https://github.com/Pikaday/Pikaday - https://fullcalendar.io/ - https://bevacqua.github.io/rome/ - https://github.com/felicegattuso/datedropper - https://felicegattuso.com/datedropper/ - https://ibm.github.io/vue-a11y-calendar/ - http://projects.wojtekmaj.pl/react-date-picker/ - https://material.angular.io/components/datepicker/overview - http://www.daterangepicker.com/ - http://jonthornton.github.io/Datepair.js/ - http://t1m0n.name/air-datepicker/docs/ Not all of them are mobile friendly, but hopefully you'll find something that suits your needs. Good luck! P.S. Don't forget the native `&lt;input type="date" name="date"&gt;` and `&lt;input type="time" name="time"&gt;`, which I believe have good support on mobile. :)
Firefox OS was a solution looking for a problem. The idea seemed to be "create an OS usable on low end hardware that can't run Android well". But it was competing against Android, and the folks responsible failed to realize for how quickly hardware advances. Hardware gets steadily smaller, faster, and cheaper. The universe of devices which *couldn't* decently run Android and might use Firefox OS instead steadily shrank. At the time Mozilla pulled the plug, cancelled the Firefox OS project, and laid off the developers working on it, they claimed several million installations. That sounds impressive until you remember that the potential market for something like this is numbered in *billions.* Firefox OS share was a drop in the bucket. Why Mozilla believed for so long that it *could* compete with Android is a mystery, but having it wind up on set top boxes is not a surprise. It's arguably what the development target should have been in the first place, but it's not as notion that would have occurred to Mozilla.
I understand. Thank you.
Clean, makes me want to learn react :).
Gotta say it works fine for me on Firefox. Using a laptop with GTX 950M so it's not even that powerful by today's standards.
Function to clear previous downloads
It was a wild ride, to be sure. I'm really glad we got to make something out of it, after HP fumbled it so badly.
Woah, this is one of the few times in a couple of years that I went full WTF mode and just didn't realized what was going on. Never heard of that side of PDF.
Thanks! I really enjoy working with React.
What's your question exactly? I've done the nano degree back in October.
Project Page (?): https://github.com/node-ts/bus *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
[removed]
Thank you for this
Hi /u/akshay-nair, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Interesting, but I was expecting more evaluation of the pros/cons of their different approaches at the end.
I work on a client side app that’ll render a sortable, filterable table of 10000+ rows, 10’s of columns. It’s very possible. There are off the shelf React modules that will “virtualize” a list for you so the whole thing doesn’t have to be in the dom at once.
&gt; The bigger problem is the sheer volume of existing Java code in production. It's like COBOL (which is still in production in many places. If you are referring to back end stuff, I agree. Back end services are reams of code, and wrappered in many layers of VM's and such to ensure they can run on some ancient redhat version. Apps are different. No app code lasts very long unless its completely trivial. Both app stores rev the OS and rules often enough that you have to be constantly maintaining your app or things just fall apart. And thats not even counting changes in the java ecosystem and build tools itself. Maintaining and android app and just keeping it building and compliant is a good amount of work. I think Java could fade away in the phone app space much more quickly than the server space. &gt; Fuschia potentially opens Android to other languages as well, but they will be in addition to Java. The long term outlook android apps on fuschia will depend on how first class it is. If new features, bug fixes, etc come to other toolchains first, then it may accelerate the decline. That said, it doesnt matter unless fuschia itself works out.
I’m no expert but you need to test this out for your specific use case, because it largely depends on the data you’re working with and the way you choose to handle that data for each different interaction. A good test suite and the browser’s native performance libraries gives you the power to automate your efforts in quantifying effectiveness. Hope everything works out!
Isn't there this pipeline-operator proposal which will come out of box?: https://github.com/tc39/proposal-pipeline-operator Can be already used with Babel...
Yes. This is a library to make point-free functional programming easier. The example just shows how to use it with the pipeline operator.
i hope this never takes off
Thanks. This is what I was looking for! Just some loose guidance to get started. We will do testing obviously.
Think about the number of DOM nodes, this is the real bottleneck. Whatever grid you have it must somehow receive data in some form and transform them into managed nodes; and even in a cached system, using fragments or whatever, there simply is an upper limit for what you can expect the average browser on average hardware can handle. Have used [DataTables](https://datatables.net/) in many years in different kind of frameworks with many different kind of data and types of purposes. The "upper limit" seems over the years to be fairly stable: With a medium sized dataset (25 columns) you will meet the barrier around 4-5.000 rows. I consider DataTables to be the fastest and most optimized grid there is. If there are grids that say they can handle more rows clientside (and there is, have tried all the grids I could find) it is always with a cost, for example limited (or slow) sorting, filtering in favour of many rows. I once tried making my own vanilla implementation using fragments, and also experienced with webworkers. It is possible to make a blinding fast paginated grid holding 15.000 rows, but I never managed to speed up sorting and filtering to DataTables-level, either you must accept slow response-time in some cases, or figure out to do a hell lot of caching / lookup-list upfront (or in the background) in a clever way so the user not notice it.
&gt; Triggering any re-rendering with updated props How is that related to redux or apollo? I thought this was basic react functionality
They spent so much time thinking how they *could* without stopping to think if they *should*.
But that’s what we offer already through reset() unless I’m overlooking something?
bad bot
Thank you, the_real_1vasari, for voting on license-bot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
This is totally awesome. I have never, ever heard you could use JS in PDF (or was aware of the PDF history). The read is the very interesting part, and to see proof of concept in breakout.pdf just amazing :)
Thanks, I hate it. &amp;#x200B; It's like Adobe were actively trying to ruin the internet when they came up with PDF and Flash.
Postscript is a programming language, so there's that.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Flash was made by Macromedia, which also had other software like Fireworks, Dreamweaver, Shockwave, Director. It got bought by Adobe and the rest is history.
Awesome, i will give a try!
Yes, technically that would save you 8 bytes.
GraalVM native images are apparently as performant as C++ apps.
The whole point of originally using linked lists were so that you could create dynamically sized lists of objects in C without declaring the array size. You can already do that in JavaScript with regular arrays. It's totally necessary and useless. It doesn't provide anything new that language's API doesn't already provide. I don't like how front-end developers love to re-invent something that doesn't require it at all, introduces it's own unknown undefined behavior, then get's pushed to some library and starts getting used in production by anyone who uses some random NPM dependency four or five dependencies deep, then somebody gets owned and real people loose real personal data. There's also no need to provide "performance" or indexing in JavaScript because the difference in data size is whatever you need to run your page in your browser versus the 80+ million rows of a session table. Big-O notation is not a consideration here. &amp;#x200B; There's no reason for this to exist. Period.
I know what you mean but the triggering itself, and its data, are down to the client.
Thats a good point. Will have a deeper think and try to add another section for that. Perhaps also one on \_why\_ they may have chosen the approach.
WebRTC &lt;3
Doubly linked lists are useful in JS to implement things like LRU caches. Just because you don't need something, doesn't mean nobody does.
Can you elaborate some more? I'd like to understand this better.
Hey, that's news to me. Seems to be true, in fact. Still, I believe the Ubuntu link on the home page was meant to point to the .deb package &amp;mdash; which does exist in the releases directory.
Am i missing something or is this just an ad for some course? There seems to be a lot of ads on this subreddit...
technicaltricks.co.in
Depends totally on the position. I think if it's junior. A lot of places just want to see you enthusiastic, passionate and you love coding. Do stuff in your free time (not that, that's a requirement it just helps to show you enjoy what you do). If you can get that across you should be okay :) &amp;#x200B; For questions. Depends on the company, some might not even ask JS but more, problem-solving and though process questions. Here are a few JS questions I can imagine or i've had before (not all tied to junior position but...): &amp;#x200B; What's Closures? functional programming vs object orientated programming? They'll ask you stuff tied to their tech stack usually, have you used \_x\_ library/framework before etc. Differences between const, var, let? What's functional composition? &amp;#x200B; The actual knowledge of JS questions from what I can remember wasn't that many honestly. They ask about you get to know you a little, ask a few questions to see your JS depth of knowledge. Then probably give you a problem solving task like, debug something or get something to work, or build something (super small, stuff though nothing big so don't worry). &amp;#x200B; I know you're nervous but I enjoyed my interviews being quizzed on JS and stuff it's fun. It's not the end all if you don't get it and you've got a feel for what the interview process and structure is like and you'll of learnt a lot. A few interviews if I didn't really know the question, i'd take a guess like "hmm i'm not entirely sure if I'd have a guess it would be x y z but i'd have a look at the MDN docs or something if i were to put any of that into practise" and they'll usually correct you and you learnt something. &amp;#x200B; It's a good process. Good luck! And remember to be polite, show your passionate and willing to learn, if you don't know something, be honest and they'll often tell you (which is good because you've just learnt something), do a bit of research on the company you're applying to beforehand, and most importantly. Enjoy it. I was very nervous as well, almost sick nervous but once you get in and start talking you forget it all, it goes so fast and it's enjoyable sometimes. &amp;#x200B; Good luck! Maybe let us know how you get on after :)
Since I see it here again, what's the reason for &gt;import React from 'react'; ... React.useEffect() vs &gt;import React, { useEffect } from 'react'; &gt; &gt;... useEffect() ? Just preference or to keep the namespace cleaner, or to avoid potential conflicts with a similar named function (which imo should be renamed anyways), or to make it more explicit that its a React hook?
 const checkboxes = [ ... document.querySelectorAll('input[type="checkbox"]') ]; if (sessionStorage.checkedBoxes) { const checked = JSON.parse(sessionStorage.checkedBoxes); checkboxes.forEach((el) =&gt; { if (checked.indexOf(el.value) !== -1) el.checked = true; }) } function update() { sessionStorage.checkedBoxes = JSON.stringify(.filter((el) =&gt; el.checked).map((el) =&gt; el.value)); } checkboxes.forEach((el) =&gt; el.addEventListener('change', update); Haven't tested this but it should work.
It's intentionally like that. The .deb file in the releases is meant to be used when I upload the app to Ubuntu store :)
LG WebOS TVs are laggy as heck though.. not sure it's general to webOS or just LG
This is extremely cool! Thank you
I worked with WebRTC for a while in a chat/file-share site...and just setting up the initial connection is the biggest PITA.
Even if you can't answer a question, show how you would problem solve/find a solution. When I was first a junior it was deemed I was fit for the job because of my willingness to learn and better my understanding of something, it was never expected that if you know (x) you are fit for the job. GOOD LUCK!
&gt; The biggest hangup with Java as the language of android has been... java itself. That Oracle got the rights to Java when they bought Sun was (and still is) the bigger problem.
Dreamweaver was great back then 😬
Lol, yeah, RTCPeerConnection configuration is a bit wild. Likely a barrier to entry for some. I found driving all things from 'onconnectionneeded' events is generally the path of least resistance and likely a path to standardize on. const connection = new RTCPeerConnection(....) connnection.onnegotiationneeded = () =&gt; { // will fire when the user tries to interact with the connection, // for example, attaching mediastream tracks or creating a // RTCDataChannel. This is generally where you would want // to generate the initial offer. } // this code will fire the 'onnegotiationneeded' event if the // connection is not already established. const channel = connection.createDataChannel(...) There are some caveats to this (some disparate behaviours between chrome and firefox), but generally this works well enough (the basic gist of peer establishment anyway). &amp;#x200B; Fun times :)
Hi /u/Alekseyio, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
As a front end developer I was tasked with writing js to make dynamic pdf’s in adobe acrobat. It was one of the worst experiences as a dev I’ve ever had. I wouldn’t recommend it and will never do it again.
Thanks . I will keep this in my mind .
I honestly can’t think of a situation where I would pay for a charting library, the FOSS are so good in this space right now
Thank you so much. I will tell you guys definitely.
Get your point. Do you think it can only be suitable for some kind of large projects where its required to have a consistent direct support from the provider to reduce the risk of relying on community answers?
i created a base JavaScript clasd for the client amd a base python class for the server and just extend them with whatever the requirements are... it's the black box that i don't look at lol
Definitely struggling to understand the install process. is there any references on generically how this works? This is the first time I've tried to install a program from github.
For a junior position there are several main topics that you should understand: 1. Prototypal inheritance and how it works You should at least show that you can create objects via function constructors, add some methods to the prototype and then use it with the power of inheritance. 2. Closures Closures allow you to encapsulate some data and reveal only part of functionality that is needed. Also, there are a couple of common interview questions about closures that you can google (something like a for loop with a setTimeout that has a callback to log current iteration counter). 3. Types and what happens when you pass a primitive type and an object. How they are referenced etc. 4. Design patterns This is a bit complicated topic because there are tons of different patterns. But it doesn't mean that you have to remember all of them. I would advise you to take a look at module pattern and what problems it solves. Anyway, even if you don't succeed you shouldn't give up. It's pretty common to get confused at interviews when you are being bombarded with tricky questions (especially when it's your first interview). Good luck.
Yes, Node isn’t going anywhere. There hadn’t been many major updates to Node for a while, but 12.0 just came out.
Thank you sir.
Node will always be important, well defiantly for the foreseeable future!
How do two webRTC nodes "meet"? With a server, you can just connect to an domain name/IP. How'd that work with WebRTC? Is there a need for a backendserver to basically broker the p2p connection?
It takes a _lot_ longer than a single year for something as big as Node to fade into obscurity.
Can’t speak for the author but I tend to do the same thing when I’m not going to use a specific hook (or any other method off of a default import) more than once or twice. It’s really just a matter of preference, and not really a hard and fast rule. My thought process is that I’ve already imported the method I need, so creating a separate reference just to shave some keystrokes seems kinda dirty, even if realistically it has next to no impact on anything.
Really, this is a comparison of Apollo and react-redux (not redux) and how they update components and force re-renders.
Very true. They are synonymous to me but completely aware that's not same for everyone
Really interesting, would you share the code too?
I'd be interested in this too
Right now I'm still working on the game and some other elements I need to implement before it can be considered interesting. Also this will be used in my final thesis, so I'm not sure I can release the code just yet
I'm interested also. Great job :)
Ah, pity. Well good luck with your thesis mate
Their output is *invaluable* as a visual guideline for developers. Most developers don't, and shouldn't have to, know anything about good design
This script is making a conditional API calls which gets some user's IP data and the response data from this call is used to make another POST API call.
Can you at least describe the logic involved in generating these maps?
First, thanks for this ! I was really hoping for something like that to happen. My only Feedback: maybe you could bring more functionalities to it. (in the form of additional libraries maybe) I know of a framework called ViewModel that brings all the necessary stuff I believe: [https://viewmodel.org](https://viewmodel.org) If you want to get an inspiration list of the kind of goodies a framework like that could come with
I just refactored this old project from class components to function components with React Hooks. I thought sharing it might be of value for people here.
Of course. First I start with a 2d Array filled with 0 - meaning water. Then I randomly scatter 1's - meaning land. Then I make a pass looking each element to see if it got at least 4 land neighbors, is yes it becomes land, else it becomes water. I do this step a few times and end up with a 0 and 1 map, land and water. After that a make a second pass looking to every element to check it's neighbors - for the corners purpose. If a land element don't have a up neighbor or a left one, it must be a top left corner, so on and so forth...
What do you use to render it?
Interested in this too. It looks very retro I love it.
Just regular old canvas.
Hi /u/atum47, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Krezyro, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/everydaynormalmzfq, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rcx918, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/thezeroandone, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/anonymousguy271103_1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Phonyparsley, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I guess you have a check for minimal amount of land as well? Or is full on Waterworld acceptable?
Hi /u/Hannzo96, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
RemindMe! 3days
I will be messaging you on [**2019-05-03 12:50:59 UTC**](http://www.wolframalpha.com/input/?i=2019-05-03 12:50:59 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/bj2dou/2d_procedural_generated_map_for_a_rpg_game_im/em4tyhq/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/bj2dou/2d_procedural_generated_map_for_a_rpg_game_im/em4tyhq/]%0A%0ARemindMe! 3 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Looks really nice! Are you going to post more of your progress?
some nice new features in there
I know I'll have a portion of land because of the way the land is distributed on the first pass. Waterworld might be acceptable, thought.
Do you mean the textures? They're from a regular old tilesheet aren't they
Using the article as an example, the 2 types of techniques used to trigger a re-render for a component are; 1. via React State changes of itself or parent (i.e. *setState*) 2. via a force render of itself of parent (i.e. *forceRender*) Both are triggered by code (and with data) which lives inside the client library (e.g. Apollo manually calling *forceRender()* once its Observables async request has finished). Not sure if that helps.
There is a tutorial about generating caves in unity tutorials page. Its very good, i suggest.
I added the flare "showoff saturday"
😅, I do a bit of AcroJS work and it’s truly awful. I especially like how the debugger crashes every five minutes. To keep a little bit of my sanity I write the code in VSCode and copy and paste it into Acrobat’s horrible IDE.
Yes, hope so
Not first, but still far ahead, and in more ways than just the Web runtime. It took Apple almost 10 years just to implement webOS's amazing gesture system.
Nice - some interesting ideas in here. I wonder if the gods upon [github.com](https://github.com) would incorporate some of this?
:DDDDD
Site doesn’t open in safari? Odd
These guys constantly spam. Can we get a ban?
In your view a tool that gives beginner front-end JavaScript developers a practical way to learn GraphQL is a spam? Our article received more than 100 upvotes in /r/reactjs which indicates community received it very favorably and we decided to share it with a broader JavaScript community to see if it can be helpful for people here. I encourage you to give constructive feedback - this will benefit the community more than superficial labeling.
This looks cool. Does the proxy implementation or do proxies in general have a significant performance hit? I don't see them used often yet. Right now I'm using [param.macro](https://github.com/citycide/param.macro) which is *kind of* similar but done at compile time. For stuff I don't want to compile maybe this would be nice.
ES2015 Proxy doesnt have that significant of an overhead so safe to play with. The only problem is safely polyfilling it to extend support to older browsers which too can be solved by using https://www.npmjs.com/package/babel-plugin-proxy
Hi /u/dhinesh_yes, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/aolhelp, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hey, what's your Safari's version?
A few days ago... https://www.reddit.com/r/javascript/comments/bgxd8c/javascript_allongé_is_now_free/ It is a very nice book.
Hi /u/djslakor, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Are the "elegant" solutions easy to follow for someone else down the road who didn't read the book?
[https://pastebin.com/DBxWW73X](https://pastebin.com/DBxWW73X) Tried implementing a very naive version of this for fun. Try it if you to want to light your processor on fire :P I didn't do the corner-finding part.
Thanks man.
LRU caches strive to be O(1). You can implement an LRU cache with [hashmaps or an associative array](https://www.quora.com/What-is-the-best-way-to-Implement-an-LRU-Cache). plain old [JavaScript associative arrays are already O(1)](https://stackoverflow.com/questions/3858411/whats-the-big-o-for-javascripts-array-when-used-as-a-hash). So... nope.
Is reddit hugging your site to death? I can't seem to get it to load in Chrome or Firefox.
Hm ... nothing suspicious on my side. The same article is available here too [https://poet.codes/e/vKEpW1kzvI7/story](https://poet.codes/e/vKEpW1kzvI7/story) GA shows \~50 people reading right now.
Hi. Yes, Smoke requires an implementation of a public WebRTC signalling service the same as any other WebRTC application. Smoke names this service Hub and offers two implementations, a PageHub (which signals to peers running in the page, which is the default) and a NetworkHub (which is your usual WebRTC signalling backend). The project provides an example NodeJS web socket implementation you can find [here](https://github.com/sinclairzx81/smoke/blob/master/packages/smoke-hub/src/hub/server.ts#L29-L245). But you can replace this with a Python (or other) web socket backend so long as it implements the signalling protocol. (see implementation for details, its fairly trivial). &amp;#x200B; In terms of meeting the other nodes, The library leaves that detail up to implementers. In general tho Smoke works the same as how a browser would meet a server over the public internet, if you ignore DNS, all servers have public IP endpoints, and in Smoke, these IP endpoints are just unique addresses allocated by the Hub at connection time. How you discover those endpoints is not something Smoke will assist you with...except.... &amp;#x200B; ...Smoke does go as far as providing a very minimal DNS like registration service on the Hub but doesn't provide any mechanism for discovery. Nodes (well applications implementing nodes) are encouraged to 'find their own way', either as part of an application implementation, or for the brave, have some nodes on the network service as internal DNS servers for other nodes (which is actually recommended, as the preference would be to have the 'Hub' have minimum knowledge of the network and simply act as a forwarding / addressing mechanism only). &amp;#x200B; For the most part, while Smoke offers a simplified programming model, it doesn't try to shy away from experimentation as to how one might architect a solution around it. &amp;#x200B; Hope that helps :D Happy to discuss things more.
[removed]
Why do you not link directly to humble bundle?
This is awesome.
They are, if you can understand basic javascript, things like closures and higher order functions —things you get a primer on within the book, but that you can learn elsewhere. If you are asking if, let’s say, your colleagues can understand them when they read your code, the answer is yes. But you’ll have an easier time building them and coming up with ideas of your own, if you read the book as opposed to not reading the book, where you’d just use it as a cookbook. The downside of this style of programming is that it’s difficult to transition into it on an ongoing project. As the book states, some of the solutions apply more easily if the rest of the codebase is built this way, but I think this is true for functional programming in general. I hope you read it, it’s worth your time, even if you don’t use JS. It’s just a great programming book.
Thank you so much!
[Yeah.](https://m.imgur.com/gallery/EVswN)
I'm in love
[removed]
"built my own github, using the github API"
I hand to say "built my own [github.com](https://github.com) using the github API".
You can submit this to product hunt.
Did you consider a browser extension? It seems like you could have done most of this that way.
Maybe just be honest about what you created and don't use a clickbait title?
Rare phenomenon?
if you're reading the image from the FileReader API (probably should be), then you'll include the base64 data as an http request body
Good content but the title is straight clickbait
lol who cares people would have clicked it either way. go jerk off somewhere else
Great article, and I have interest in better managing PRs across repos, but the title did make me assume self hosting was involved. I’m glad that’s not the case! Maybe a PR management focused title would serve you better 👍
What does Rectangle(40, 40) do?
Yah. It’s a cool little app that has some helpful features. But it’s not *GitHub*
Ouch that post history
Hi /u/glaucia_lemos86, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I only see a single [related post](https://www.reddit.com/r/javascript/comments/bgyo8g/trends_and_analysis_for_javascript_typescript/), from last week, in this sub. Is there more that I'm missing?
Hi /u/Xenotech6, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Oh look, an astroturfer.
I think its cool
Hi /u/evilbooty, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Fully agree, popular doesn't mean good or that it will stay popular. However, when making a decision it is sometimes useful to see how things are trending, especially on such a large sample size as npm users. At a minimum, for people not familiar with these emerging technologies it can be useful to learn more and see if there is a fit in their stack.
Just wanted to announce that the wdio-video-reporter for WebdriverIO v5 has been going strong for some time now, and is finally verified working on 9 major browsers: - Chrome - Firefox - Safari - Microsoft Edge - Internet Explorer 11 - Safari IOS on iphone 8 (using appium) - Safari IOS on ipad gen 6 (using appium) - Chrome Android on Samsung galaxy S9 (using appium) - Chrome Android on Samsung galaxy A 10.5 2018 (using appium) Like the name suggests, it generates videos of failed tests, and will automatically decorate Allure reports with videos of the tests if Allure is configured in the wdio-config. Check out an example report with all browsers here: https://presidenten.github.io/wdio-video-reporter-example-report
Clickbait. Use [Gitea](https://gitea.io) for an actual lightweight Github alternative.
Every country built GitHub. Make our country great again. Lel
Hi /u/mfury_ru, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/sanjim77, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Thanks for the feedback. Changed it to "Why and how I built my own GitHub-like app".
I thought about it on a later stage. I first started the app as an experiment to learn GraphQL and dig deeper into React hooks. I was too far away to move all this into an extension + the extension will heavily use the markup that GitHub generates. Once they change it my app will be broken.
Yep. I agree. Changed it to "Why and how I built my own GitHub-like app".
Good idea. I'll do that tomorrow morning.
A slightly more systematic benchmark shows that npm still trails significantly where it matters, except if you're not using a lock file (but you should be), or when you're upgrading (much rarer than plain restoring). [https://github.com/pnpm/benchmarks-of-javascript-package-managers](https://github.com/pnpm/benchmarks-of-javascript-package-managers)
Better, but still not exactly what it is. GitHub-like app implies back-end, and front-end. [gitea](https://gitea.io/en-us/) is a "GitHub-like app". It's an alternative front-end for GitHub using React and the GitHub GraphQL API v4
Looks neat! I saw that you compare with `undefined` - can that no longer be overridden in the global context when using modules? I thought that we still should use `typeof` for this.
Thanks! I'll give that a shot.
We were able to do the opposite direction. That is to write a 'setState' function, which changes if the code changes in the editor. This is then sent off to the websockets connection (not shown). \`\`\` import React from 'react'; import './App.css'; &amp;#x200B; import MonacoEditor from 'react-monaco-editor'; &amp;#x200B; class App extends React.Component { constructor(props) { super(props); this.state = { code: '// type your code...', } this.alertText = this.alertText.bind(this); } editorDidMount(editor, monaco) { console.log('editorDidMount', editor); editor.focus(); } onChange(newValue, e) { console.log('onChange', newValue, e); this.setState({code: this.state.code }) } alertText() { alert(this.state.code) } render() { const code = this.state.code; const options = { selectOnLineNumbers: true }; return ( &lt;&gt; &lt;div&gt; &lt;button onClick={this.alertText} \&gt;Save&lt;/button&gt; &lt;/div&gt; &lt;MonacoEditor width="800" height="600" language="javascript" theme="vs-dark" value={code} options={options} onChange={code =&gt; this.setState({ code })} editorDidMount={this.editorDidMount} /&gt; &lt;/&gt; ); } } &amp;#x200B; export default App; \`\`\`
Hi /u/stvaccount, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jojoloco14, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
JavaScript arrays are (basically always) dynamically resized arrays, ala the std::vector. Linked lists are a different data structure entirely, with different performance characteristics. Since you can implement either of these data structures in C, suggesting that Linked Lists only exist to allow for a dynamically sized data structure is nonsense.
Skipped to the “why” and stopped reading after: “Well, everything started as just a learning exercise. I just wanted to play with GraphQL and dig deeper into React hooks. I needed a project which is complex enough and communicates with a big GraphQL API.” Nothing against learning with a toy project, but don’t imply that you’re fixing a problem when you’re actually fabricating one.
You stopped posting the JavaScript questions?
I don't know what [Krunker.io](https://Krunker.io) is written in, but it's a fun counterstrike-esque shooter that's played from the browser
Sure, but if you're doing that, it usually means not writing it in JS. Example: http://www.quakejs.com But you can certainly make games in JS too.
So if not in JavaScript, how would I be coding it?
Krunker’s the shit
Read up on web assembly
yeah, I'll fix it as soon as possible, thank you!
Usually C/C++. But you can also use something like [Unity](https://unity.com/) which also [supports a web target](https://docs.unity3d.com/Manual/webgl-gettingstarted.html). They use C# natively, but I think you might be able to use other languages (not sure, but you should be able to dig around and figure that out easily enough).
You won't be able to develop a big 3D game without going through native extensions or webassembly, but you sure can develop a beautiful game with a simpler style eg. flat shading or pixelart. Check out [CrossCode](http://www.cross-code.com/en/start) which is written in JS
I'm still lost on what is WebAssembly to be honest. I understand it can emulate other languages in JS, such as C++, but how does it make it faster? Its emulation in the browser, wouldn't native JS be better? Or does it get the computers resources as well?
Thanks /u/kenman, I'll do.
An excellent article, I use this approach and works very well.
That benchmark doesn't include `npm ci`, as mentioned in an issue at https://github.com/pnpm/benchmarks-of-javascript-package-managers/issues/17. `npm ci` is hella fast.