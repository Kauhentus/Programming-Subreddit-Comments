That's fine, but to say it's irrelevant is hyperbole. When we push for adoption of a new tool or technology or in this case a full stack, we are pitching business in our company, and a well branded, well marketed product makes that easier. I'd say it has a great deal to do with us.
Step 1. Try something based on what you do know. Step 2. Post it here Step 3. Ask questions about why it does not work Step 4. Actually learn something
There has been a lot of talk about NIH/YAFS lately which I completely agree with. This is a great example of a repo doing it right: holidayextras wanted to learn how this type of tool works, so after developing it he or she open-sourced the code on GitHub with a README clearly indicating its intent and maturity level. And I read the README and learned something. This was really cool. Thanks for sharing it.
Isn't it great? github.io is the new geocities! Nice snakesteroids game too.
It is but I find that verbose compared to a traditional ternary using the '?' operator as in Java, C, or JS. 
I agree. Symbols are easier to mentally parse when scanning code. Ironically that code compiles to a ternary statement in JS.
Am I missing something or don't all those array allocations and concats and implicit resizes make that quicksort implementation not-so-quick?
Yes, I've been working on getting work to use node.js for a upcoming product, but stuff like this makes me very hesitant :(
Books I like the most in no particular order. http://www.amazon.com/gp/aw/d/1617290548 http://www.amazon.com/gp/aw/d/0321812182 http://www.amazon.com/gp/aw/d/193398869X
Current client-side stack of choice is: * ReactJS * Backbone (for models) * Lo-Dash * Browserify * Jasmine via Aladdin (https://github.com/joelbirchler/aladdin)
I would really like to read some discussion about this if anybody has anything to say about it. I'm not really sure how I feel.
jQuery solves a lot of problems, but with pure JavaScript you may reach better performance. jQuery aims to solve not one but many problems which means that it contains code which you may never use.
I don't think the question is really about performance. Though you're right, the performance hit of jQuery is negligible in almost all cases unless you're doing something stupid.
The main performance hit of jQuery usually comes from downloading jQuery, so page load performance can often be improved significantly by not including it if you're only doing a little bit of DOM manipulation and don't need to support ancient browsers. But I agree that this doesn't seem to be the thrust of the question.
I think that hosting server side code would be too costly for them to do for free. But you can get a reasonable VPS super cheap these days and go to town.
As the other replies say, vanilla JavaScript can get better performance, and jQuery doesn't do everything - building big client-side web apps is better done with vanilla JS or other frameworks than jQuery, server-side stuff with NodeJS, etc. But there's another reason: what's been called the [law of leaky abstractions](http://www.joelonsoftware.com/articles/LeakyAbstractions.html). Using jQuery is fine as long as it works, but if you find yourself having a particular need (or a weird bug/problem), you'll need to get your hands "dirty" in the vanilla JS that underlies jQuery - or any other framework you're using. jQuery is nothing more, in the end, than a layer on top of vanilla JS. Then you might say that you know vanilla JS, and could use it perfectly well, but why would you use it in your everyday web dev job? Disregarding the potential reason "because you don't have a choice as the project is in [^jQuery]", using the vanilla JS without a layer on top gives you full control of everything. What you may lose in verbosity, you gain in control. I personally never use jQuery even in my own projects, because it feels uncomfortable not to do everything myself. I'd rather write a small framework/toolbox that suits my exact needs. Quick edit: also, I don't know how jQuery plays with other frameworks, like RequireJS or Ring.js. I tend to think that small frameworks aimed at a specific issue are the way to go, but with JavaScript, any framework can break the global namespace, causing issues with other modules... So there's that.
The problem is you need a server side runtime that supports .net and github run ruby. If you want a cheap solution, azure websites lets you host mvc sites for free using a *.azurewebsites.net domain I use [App Harbor](https://appharbor.com/) which has a free tier. I can deploy an asp.net mvc app for free (in fact I've made several small sites). Like Azure you get a url or *.apphb.com You can push to app harbor or azure via git which is pretty cool. &gt;I know this isn't very popular but I'm a asp MVC guy Edit: This is not true, as an asp.net mvc guy myself, let me tell you it's quite popular in the real world with lots of job, many of which are very high paying. Startups are using it, so are larger enterprises. I'm not trying to knock other frameworks and languages, I love Rails and Node, just saying ASP.NET MVC isn't a bad choice to make nor should you feel bad about it. 
https://news.ycombinator.com/item?id=7308975
[This](http://i.imgur.com/5yxzLg5.png) is all I saw on the page. Firefox 27.0.1
By definition, this is what's called a "quicksort", based on the quicksort algorithm. Besides that, can you think of a more performant way of doing this? The array manipulation should not have a sizeable effect on a smaller scale and on a larger scale, it might be a good idea to use a different type of sort (which one, I'm not sure but I'll be covering more sorts in the future!)
That was the main thrust of Rob's rant. It's bad PR at a critical juncture and makes everyone look like clowns
you saying you don't trust package managers, or just those two package managers?
Consider posting on the blog itself. I have no relation with the author.
I don't know why you think version numbers mean anything. In any case, npm itself was at 1.4.3 when this incident occurred, so your argument is moot.
In most cases, vanilla JS is faster than jQuery. I am currently writing an event system for a bigger project that would only be impeded by using jQuery. Also, jQuery doesn't do everything. Templating, routing, WebGL, WebSockets and much more can be done without jQuery. Once you start using node.js, you're without a DOM, therefore without jQuery.
How big is minified jQuery core? How long does it take to download from a CDN -if you don't have it cached (and given that 1 in 2 sites use it...). For extra credit: How big are the images on most pages?
Simple trick to make it easy to use with any static site generator: 1. make the repo on github 1. put your work files in `master` branch (assets, `package.json` etc) 1. add and setup `grunt` to generate your static content (pick any of static site generator or rig it yourself) 1. configure it to output the actual content in a folder (`/public`), ignore this folder in `.gitignore`. 1. check-in your other files, add github remote etc, push this to github once. 1. install the `grunt-gh-pages` module 1. use it to push just the content of `/public` folder to the `gh-pages` branch of that repo. This is now your github.io website content. 1. push any changes made in `master` to keep your build code on github too. 1. $$$ 1. add more stuff to build 1. $$$$$$ Later could automate it in a way that if you push anything to `master` the Travis-CI would rebuild your site and push the content it to `gh-pages` but that is on a next level. 
[Secrets of the Javascript Ninja](http://www.manning.com/resig/) is pretty solid. 
http://semver.org/- the whole point of semver is that they're *semantic versions*. Large corporations such as Walmart and Paypal that dedicate large salaries to people who can maintain applications in just such cases of emergency can get away with it, whereas the small developer shops who mostly work on contract or for agencies are hurting their clients by choosing node, at least until the node 'ecosystem' matures and there's a proper foundation to maintain it.
I guess you don't know that node doesn't use semantic versioning, do you?
jQuery is about 34KB. You can't really compare it to image sizes because images don't block page rendering while they load. Edit: And CDNs help, but 1 in 2 sites do not download it from a CDN, much less from the same CDN.
On http://printio.ru we use: - _[jQuery](http://jquery.com)_ + some _[Bootstrap 2](http://getbootstrap.com/)_ + _[select2](http://ivaynberg.github.io/select2)_ + few jQuery plugins (for site-wide UI) - _[Fabric.js](http://fabricjs.com)_ + _[Underscore](http://underscorejs.org)_ + _[Backbone](http://backbonejs.org)_ + _[Backbone.unclassified](https://github.com/willurd/backbone.unclassified.js)_ (for design editor) - [Fabric.js](http://fabricjs.com) + _[node-canvas](https://github.com/LearnBoost/node-canvas)_ + _Node.js_ on a server (for processing designs) - _[Three.js](http://threejs.org)_ (for 3d preview) - _[Casper.js](http://casperjs.org)_ + _[Phantom.js](http://phantomjs.org)_ / _[Slimer.js](http://slimerjs.org)_ (for integration tests) - _[JSHint](http://jshint.com)_ (for linting and code style; soon to switch to _[JSCS](https://github.com/mdevils/node-jscs)_ for code style)
Yep, I switched my blog to gh-pages entirely â€” http://perfectionkills.com/moving-from-wordpress-to-github-pages/
I'm not sure I understand why you're suggesting local storage. If he just wants to count down to the next date, there's nothing to store. 
If you want to log to the screen in the browser, and you're displaying nothing else on the page, then I'd suggest the following log function to replace `console.log`: function log(s) { var p = document.createElement("p"); p.textContent = s; document.body.appendChild(p); } You can drop that in as a replacement for console.log. Unlike Buckwheat469's solution, it will handle characters like "&lt;" and "&gt;" properly, and it will also leave everything on the screen instead of replacing it each time. I don't want to just post code for a newbie without explaining it though, so here's how it works: First we tell the DOM to create a new paragraph element. This is just like making a "`&lt;p&gt;`" tag in HTML : var p = document.createElement("p"); Next, we put the log string into the paragraph element. By using `textContent` instead of `innerHTML`, we're telling the browser to convert any special characters automatically instead of treating them like HTML code. p.textContent = s; Finally, we add our new element to the page by appending it to the document's body element document.body.appendChild(p); Hope that helps!
When you start building things that do more than just DOM manipulation.
This is completely incorrect in terms of the timeline (for one thing dailyjs has a significant impact on what terms are used in this community and used it in a post the day the book was posted and used the term for the first time about one week prior as far as I recall). Also, in the tech sector the statement about profitability of books is pretty far off base as well. Seems to be quite the proliferation of work in the last 3 years for a medium that is such a "poor investment". 
I think he means that asp.net isn't very popular on reddit. Most of the time if I suggest .Net as a development framework, people get all huffy and downvotey and suggest python instead.
Is there a way to download the next 1000? I am trying to download every image in the Twitch Plays Pokemon subreddit. I am creating a book to tell the story of the social experiment through user-submitted images. Thanks!
&gt; statement about profitability of books is pretty far off base as well I'm basing this on statements from authors. So absent any other evidence I assume they are right. Considering that time could be invested in paying work, the risk/reward for a book is very poor. 
Really glad you posted this. Thanks
In programming with companies like leanpub, apress, manning, etc. Id be surprised. I think there is a reason all of these guys with blogs and status in this community (css tricks, dailyjs, addy, etc) are putting out books these days and using there sites to push them tastefully. I've definitely read articles on how the leanpub model of releasing books for free to read online has been profitable for the authors. Furthermore, it adds to your clout and furthers your career. I think the nature of these types of books is well aligned with the nature of the web and thus has worked out well, but who knows (I don't have hard number)
Well that sort of depends on how you use the JavaScript. By that I mean, traditional JavaScript-in-the-browser isn't going to cut it. Each user's session is independent of one another. During the session, what they're doing is connecting to your server. You must facilitate the interaction between them in some way. This can be done with any server-side scripting program. In fact, this is a pretty good use case for Node. 
You were new once too.
In the react community are these components in the more typical sense where, say in .net, they may have been called "controls" in the olden days? or is it more "modules" as would be defined by the iconic Zakas talk mentioned above? If more closely related to that talk (I.e. groupings of related models views and controllers that only talk to each other through a service bus and a top level construct that deals with the lifecycle of the other objects) I think its extremley important we use the term â€œmodule" here. I continue to become more and more concerned with the use of well defined software engineering terms within our community. The client side "MVC" frameworks are really causing some confusion and being far too loose with the terminology in my opinion. 
React components always correspond directly to something rendered in the UI, so they're much more like .NET components. When I said mini MVC, I should have clarified: more like viewmodel/view/presenter.
First off, your question doesn't consider any uses of Javascript outside of client side Web scripting, so I'll consider that primarily, although you should be aware there's more out there, and as useful as Jquery is on the Web, it's no help anywhere else. Second, there's a lot you can do in a browser that Jquery doesn't address. That's not a knock on the library - if it tried to do everything, nobody would want to use it. But for patterns like Model-View-Controller, Single Page Applications, module loading, local storage enhancements, Dependency Injection / Inversion Of Control, functional programming, modern Web APIs like audio and canvas, and even classic Object Oriented Programming which almost every big JS application ends up needing, Jquery offers little or no help. And again, that's for the best, but that stuff is out there too. So asking why you'd need more than Jquery is kind of like asking why learn to dance when you already know how to walk. Now that I've talked your ear off I can actually answer your question. When would you want to use Jquery in less than 80% of your code? When you want to build something that requires sophistication beyond what Jquery provides. Or, alternately, when you're building something with such an overpowering need to be small and light that it's worth taking responsibility for all the browser inconsistencies that are abstracted away by Jquery. Or if you're not writing code intended to run exclusively on Web pages. Or if your project already makes heavy use of an alternative to Jquery. I do think you should use it, though. Usually.
No, I unserstood your point ther and i think that is definitely the right term. Guess I would know if I checked it out in more detail ;)
https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault
e.preventDefault() will prevent the default event from occuring, e.stopPropagation() will prevent the event from bubbling up and return false will do both. source: http://stackoverflow.com/questions/1357118/event-preventdefault-vs-return-false
Thanks. I started on the CodeAcademy JS course today and managed to get through a fair bit and some of this is making sense, but mostly not. I'm going to go through the rest of the course tomorrow and come back to your code again. I can't believe you just wrote [this](http://jsfiddle.net/schooley/EftzM/) out based on my original post! That's very cool! Can I ask you an unrelated question? How would I go about (or how do people generally) style the JS elements? Can I use CSS? Because on first impression, it seems like people use JS to change CSS styles not the other way around. Thank you! :)
It's best to keep CSS on its own. That's the beauty of the web when it comes to programming, you're not forced to write everything in one language that doesn't necessarily organize or make certain applications practical. HTML is used for layout and basic design. CSS is used for styling, and more advanced formatting. JavaScript is used for functionality. Of course none of these are limited to my descriptions as the web advances, but that is their basic purpose. JavaScript could have created the elements and their styling. CSS could have a timer all on its own. But it's best practice to use each language for its purpose, especially in the learning phase. If you want a style to change over time or from an action, then JavaScript can either modify an element or style class, or tell an element to remove or apply a style class that you've created in your CSS. PS. Make sure to fork that fiddle because I can't promise that I won't accidentally remove it when I clean my library.
With certain exceptions, almost everything published before 2009 should be considered outdated, if not obsolete. Also, having an edition newer than 2009 doesn't necessarily mean the book is no longer outdated. I picked 2009 because that's when v8 entered the field and shook everything up, and it's also when ES5 was finished.
You should check out [Firebase](http://www.firebase.com). 
Think about the value of your time. Now ask yourself if 50 cents is worth wasting a ton of it on something obsolete. Next, purchase a book that's recent and teaches you current best practices.
I've forked that fiddle now thanks for the heads up! Right. I think I get it..so please correct me if I'm mistaken, but I think what you're saying is. * HTML, CSS and JS can be used for more things than just what they're used for * But generally speaking, we're going to stick to use HTML to do layout and basic design, CSS to style stuff and JS to make things work. Is that right? So in conclusion! I'm going to google around more for ways to style JS using CSS. Do you write JS code for a living btw? I somehow didn't realise how powerful JS was. I thought it was used most by web designers but now I'm discovering there are well paid jobs that are solely based on JS application design. 
Big.js handles this well I think.
And I still answered his question but started with a contrasting option that would serve him better. Try to reach outside the box. Not everyone wants a black &amp; white answer for everything. (Nor needs one)
I take it the rounding in math.js would work too? http://mathjs.org/
Why aren't you using chrome over firebug? 
[This one by Zakas can be found for free online. I bought a copy, and it's helped my JS a TON!](http://it-ebooks.info/book/483/)
Or when you start building things that do super complicated DOM manipulation (i.e. angular/backbone etc)
The thing I like about Angular, is that it's not so much thinking about 'how do I manipulate the DOM?', it's 'how do I get shit done' (business logic, updating the model, etc) and then the view just sorta reacts how I want. The DOM-manipulation aspect is handled mostly by the view/templating - but is mostly done for me and not needing to worry about it. data-ng-hide="someStuff()" instead of bunch of js code bunch of js code if(x==y) { $("#someDiv").show(); } else {$("#someDiv").hide(); } But yeah, I get your point - since moving to Angular - my 'need' for jQuery is pretty minimal. But it's sort of 'needing to update the DOM is a side effect of what I need to do', not 'Updating the DOM is the main thing that I am doing'. 
The first example: Number((1.005).toFixed(1)); // 1 instead of 1.01 should be Number((1.005).toFixed(2)); // 1 instead of 1.01 e.g. 1.01.toFixed(1); // "1.0" 1.01.toFixed(2); // "1.01"
This doesn't answer your question but you really don't _need_ a book on Javascript these days. There's few online ones that are free, including an excellent [Eloquent Javascript](http://eloquentjavascript.net/). And there's bunch of resources like MDN, Stackoverflow, blogs, Github-hosted ebooks, etc. All of these are relatively up to date, unlike books which might or might not have accurate information.
No, he's TRYING to round. `1.005 * 100` evaluates to `100.49999999999999`, which is why Math.round fails here.
Ah, gotcha. Floating point error. I thought maybe he was suggesting that the round function did that by design, which I believe happens in some math libraries for probabilistic reasons that are a bit beyond me.
aright i'm bored, let's try this too: $ wget https://raw.github.com/MikeMcl/big.js/master/big.min.js $ node &gt; B = require('./big.min.js') &gt; Number(new B(1.005).toFixed(2)) 1.01 success!
It's explained in the examples file: math.round(math.e, 3) // 2.718 https://github.com/josdejong/mathjs/blob/master/examples/basic_usage.js But math.js is massive (in size) compared to big.js. Far more functionality in math.js but big.js will do the job for many web apps. Edit: oh, now I see what you're looking at. Yeah, that is odd. Why would 1.005 round down to 1.0? Perhaps a setting? 
I'm not sure why you think anything pre 2009 should be considered obsolete. "Incomplete", sure, but almost nothing has _changed_ in pure JS since the earliest versions, they've just added more on. So old books won't talk about `Canvas`, or `localStorage`, etc, but most of the info should still be valid. If the book is talking about DOM performance, etc, that's a different issue.
Worked the absolute charm. Thanks a ton :).
Some best practices back then are no longer best practices. Also, considerations that need to be made around browser support have completely changed. Google Chrome barely existed, and jQuery was still on 1.3.
SlickGrid
So? I don't see what Chrome or jQuery have to do with a question about JS Books in general. The vast majority of non browser-specific tutorials from 10 years ago is still going to hold true today. Obsolete tends to mean that it no longer applies at all. Like a book on "Google Maps v1.0" where none of the code would work at all today.
:S "non browser-specific", "pure JS" books won't have changed, no. However, most books on a browser-based language have a habit of mentioning the browser!
Nope, Reddit only scrolls to 1000 posts so we can't load up more than 1000 to download
Technology and concept? Cool. Practicality? I don't want to see this on any site. Reminds me of those sites with the slide-out when you scroll to a certain point. I only see this being used to grab my attention away from what I'm trying to focus on. Maybe something lasts thousands of years because it works.
Mentioning, sure. But most of the content in a book focused on JS dev _should_ be focused on JS, and not browser nuances. And it's easy enough to skip past the browser parts. This would all be moot if the OP would just say which book it is ;)
A bias to even numbers. This is considered less of a skew than a bias towards larger numbers. Eg 1.5 rounds to 2. 2.5 rounds to 2 3.5 rounds to 3 4.5 rounds to 4 
&gt; So in conclusion! I'm going to google around more for ways to style JS using CSS. Thiis kind of confuses me. When you say "style JS" I'm having a hard time understanding what you're inferring. CSS will style anything in the DOM to which it applies. So if your CSS includes: div { background: red; } Then it will apply to any DIVs in HTML like: &lt;body&gt; &lt;div&gt; I'm red! &lt;/div&gt; &lt;/body&gt; Or DIVs created in JavaScript via: var myDiv = document.createElement('div'); myDiv.innerText = 'I\'m red!'; document.body.appendChild(myDiv); As for writing JS for a living, man that would be a dream. I'm finishing up my senior year in college right now for a BS degree in Computer Science. I'm looking for a programming internship that hopefully involves web-dev for my capstone but I currently work in a restaurant because entry level programming positions just don't pay enough for rent! JS isn't introduced in any college courses, it's just my hobby and favorite language to play with since it's so fast to crank out concepts. I honestly don't know why JavaScript isn't a learning requirement since it's absolutely necessary with the direction that the web is heading, and the fact that applications are moving towards the web. But yes, it is a VERY powerful language that is often overlooked.
For performance reasons, this should be done in the DOM with CSS transforms (and fallbacks to positioning) instead of canvas.
I do in most cases. Actually question for you, do you still use Firefox? (and the original Firebug). I found these days I only use Firefox for compatibility tests or when I really need to have proper browser/session isolation between users
hey To give you a running start on this, assuming you're running with jQuery; what you'll want to do is grab the value out of the top text box and append it to a &lt;ol&gt; below. with an html structure somewhat like this: &lt;form class="add-item"&gt; &lt;input class="new-item"&gt; &lt;button type="submit"&gt;Add&lt;/button&gt; &lt;/form&gt; &lt;ol class="items"&gt;&lt;/ol&gt; and script like this: $("form.add-item").submit(function(e) { // when the form is submitted.. e.preventDefault(); // keep form from causing a POST or GET send input = $(".new-item") // grab a reference to the input item = input.val(); // get its value input.val("") // clear it so a new one can be entered list = $('ol.items") // grab a reference to your list area list.append("&lt;li&gt;" + item + "&lt;/li&gt;") // append the item to your list }) I'm not exactly sure what your referring to about the radio buttons though..
Okay, thanks. Bummer :(
Why didn't that show up in a deployment / integration test? I mean, you *do* run those, right? Of course some upstream change yanking the rug from under you sucks, but if you only find out about that on a live server you've missed a step or two, IMO.
Your example makes sense, and now I feel like maybe my question didn't make the most sense! Thanks again. I think I'm going to finish the code academy course on JS before going any further since 1. It seems like a good idea and 2. I don't think I can even go in and edit/tinker with what you wrote out without knowing more. **About writing JS applications for a living,** I recently came across an article that listed the jobs startups were hiring for in my city and JS was the top one. It kind of sucks that university education seems to ignore that. I'm surprised you say that entry level jobs don't pay as much as a restaurant job. I'm guessing you live in the states, and even though I don't live there, I thought anyone who could write good code was valuable and make decent money (at least more than working at a restaurant!). It's still pretty awesome that you're sticking to what you like though man! As long as you know how to build things in a world that's going more and more digital, you'll be alright! :) 
well which book? that is the biggest factor in knowing if it is out-of-date or not :) I love books and really prefer to learn from them. In fact for some 'mature' (and I used quotes on that word) languages like Java or Javascript, older books are sometimes the best ones
Saw "generator", got excited. Aw :( Still pretty cool, though!
Most code to me usually takes the shape of North America. 
Porn and stock quotes.
Haha, Christmas Trees! How the hell is the screenshot a Christmas tree though? Shouldn't it be more like * *** ***** ******* ********* *********** ************* *************** *** *** ?? :) Anyway, I probably shouldn't do this, but since it's Christmas, here's code to create an actual tree. Modify as needed (and yes, it's written this way so that your teacher will probably know you cheated ;)): ~function makeATree( trunk ){ var height = prompt( 'How many *\'s high would you like your tree to be?' ); if( !+height ){ return makeATree(); } console.log( Array( +height ) .join() .split( ',' ) .map( function( i, i ){ return Array( +height-i+1 ).join( ' ' ) + Array( 2*i+2 ).join( '*' ); } ) .concat( trunk = Array( +height ).join( ' ' ) + '***' , trunk ) .join( '\n' ) ); }(); [edit] Christmas Tree V2, now with Colors! ~function makeATree( trunk ){ var height = prompt( 'How many *\'s high would you like your tree to be?' ) , colors = [] ; if( !+height ){ return makeATree(); } console.log.apply( console , [ Array( +height ) .join() .split( ',' ) .map( function( i, i ){ colors = colors.concat( i ? [ 'red', '#' + ( 0xF000000 | ( ( 55 + Math.random() * 200 ) &lt;&lt; 8 ) ).toString( 16 ).substr( 1 ), 'red' ] : [ 'red' ] ) return Array( +height-i+1 ).join( ' ' ) + '%c*' + ( i ? '%c' + Array( 2*i ).join( '*' ) + '%c*' : '' ); } ) .concat( trunk = Array( +height ).join( ' ' ) + '%c***' , trunk ) .join( '\n' ) ].concat( colors .concat( 'brown', 'brown' ) .map( function( c ){ return 'color:' + c } ) ) ); }();
I have no idea :D Yours does make alot more sense then my Web Lecturer. 
Depends on the content focus as others have said (might have helped if you gave us the title). I'm holding onto my 4th edition copy of JavaScript the Definitive Guide and still consider it biblical. The DOM related stuff hasn't changed much, browsers don't like breaking backwards compatibility. 50 cents isn't bad, might be some fun and quirky code in there for older browsers.
FYI I suggest CSS Transforms because they're hardware accelerated; background positioning isn't, though it's still a much simpler &amp; better solution than using canvas :)
But can you help me with his version? I understand if I enter 15 as the height it will print 1 * then +1 star every line up to 15, then reverse. How would I do this? With a For loop?
Didn't really think of that, sorry! The title is Beginning Javascript by Paul Wilton, copyright is for 2003
There are a few ways you can do this but the simplest would probably be to use two for-loops, one after the other. The first for-loop increases from 1 to *num*, while the second decreases from *num* to 1. You'll then need to work out how to print the correct number of stars at each iteration of the loops. Good luck! :)
Why is dependency free so important to put in headline?
&gt; atom.io I keep seeing references to this all over Reddit. I've requested a BETA invite but, I'm not really sure what all the hype is about. Perhaps you could shed some light?
I don't use Firefox except for comparability tests and sometimes to use SAML tracer. I use incognito for other sessions, usually. In my opinion chrome dev tools left firebug in the dust a long time ago. Although I do think there's lots of room to improve. It can be buggy at times. 
I think the joke is that it's not worth the hype. I keep hearing it's more or less a Sublime clone. I first saw something about it in /r/programming but I can't seem to find the article again. Edit: Google-fu is strong in this one. Here's the link: http://www.reddit.com/r/programming/comments/1z0ykn/atom_launched/
To me it sounds like you have mixed a lot of the responsibility between the different "components" that make your application. This is how I would approach the problem with limited domain knowledge so might not work for what you have in place. First off I would accept that the "UX Class" is doomed to be different for each application. Different content,markup,identifiers,functionality suggest that a shared component isn't feasible and trying to make something would cause more harm than good. I would start by decoupling all service functionality from the "JS Class". If they are using the same web service, then all applications will need to provide the same parameters and should expect to receive the same response. Even if they don't you can build a Wrapper around the service that will handle the variance between the application and the service "module". With this in place any change/bug fixes to the services "module" should be encapsulated and as long as the public API (what the client consumes) isn't effected the applications will never need to know/be modified. The next task would be the wrapper module per application (if needed) to fully encapsulate your service "module" from the application differences. It should be a light weight conversion of what the application currently provides into what your service "module" actually needs. This would also be a good place to add your error/localization logic (if the service doesn't do this for you). Seeing as your applications sound very different I would assume the validation/error messages would need to be different anyway. You could do this by a JsOn file with error codes-lang/local mapping to keep your code clean/easily maintainable updates. Now in your application code you would handle your UX making calls to your wrapper/service and reacting to the message/data returned. I can think of other ways to approach the problem but all focus on decoupling the code and making sure that there is a single responsibility per "module". :) Hopefully this is some help/will trigger some ideas on how you can solve your problem.
I was coding with a friend and he said he made one portion look "gunnier" - comes in all shapes friend :)
Bug report! It generates a broken image if there is no input. Used QA software extensively, old habits and all that!
Bingo. There are very few "pure JS" books out there -- especially considering that JS only existed in the browser for its first decade -- so most JS books are largely made up of obsolete information about the browsers of the day. I know this from having read a half dozen of them in the past couple years. 
Should probably have a sanity check for no input. Right now creates broken image.
I've heard some pretty good things about [frescojs](http://www.frescojs.com/). Not sure if it's exactly what you're looking for, but it allows interfacing with various media players and defining custom skins, so it might fit. 
The range that rounds up is larger than the range that rounds lower. This can inflate a data set so a bias towards even numbers seems more random than a bias to higher numbers
Try pasting this into your console (didn't fully test but it should work): (function() { var input; // Cap the height just in case var maxHeight = 100; function ValidateHeight(height) { var testHeight = height; if (!(testHeight &gt; 0 &amp;&amp; testHeight &lt;= maxHeight)) { console.error('Invalid height: ' + height + ', should be an integer between 1 and ' + maxHeight); return false; } return true; } // Assumes valid input (height is an integer, 1 or larger) function ChristmasTree(height) { // Create a string of stars whose length is the height var stars = new Array(height + 1).join('*'); // Loop through the length twice slicing a part whose // length is 1, 2, ... up to the full length, then back to 1 for (var i = 1; i &lt; (stars.length * 2); i++) { console.log(stars.slice(0, stars.length - Math.abs(i - stars.length))); } } // Keep prompting until a valid input is received while (ValidateHeight(input) === false) { input = parseInt(prompt('Input tree height (integer between 1 and ' + maxHeight + ')')); } ChristmasTree(input); // Parentheses execute this function immediately }());
Thanks for the follow up. It doesn't look like it's anything special at all. Cheers.
Here's a crude fix, inside the for-loop: document.write(stars.slice(0, stars.length - Math.abs(i - stars.length)) + '&lt;br /&gt;');
&lt;3 take my favourite pictures [Yay](http://imgur.com/a/yIZEz)
See that's what I thought first, but I don't think that's the problem: &gt; Math.round(1.5) 2 &gt; Math.round(2.5) 3 The problem here is IEEE floating point representation: &gt; 1.005 * 100 100.49999999999999 So naturally, this rounds down to 100.
Will your web app be a front end which interfaces with a media server app on the backend? Do you know what you're interfacing with already? I used dojo for an open source project where I focused heavily on the media player - https://github.com/beakable/beakpi. It's a frontend for spotify and pandora using third party server apps. I would definitely go with a framework for this for the reasons you said and plus it's actually a really cool/fast way to pick up a lot of the frameworks methods. Dojo is widget orientated as well however for creating your own styles it's pretty easy even if you don't want to use saas or less for customizing it all. I created the following selectable themes http://m.imgur.com/a/4KRRS by just manually adding the CSS for the parts I was using.
Most people in here misunderstood what I was getting at - the education system at large in the US already favors girls. There's many reasons why girls don't go into the engineering fields, and it's not just because some of them are potentially hostile towards women. 
Thanks! Wish this book was around a year and a half ago.
The thing about it is that Sublime isn't easy to modify. Atom tries to make it easy to make modules for the editor.
Not to be rude, but do every single one of these entries deserve their own thread? It's a cool competition, but I feel like they can be covered in single discussion.
Another favorite of mine: If you're looking at a particular line of code, and you want to add a console.log() at that line without having to go edit your source code and reload (thus producing off-by-one errors for all your existing breakpoints), you can use a [conditional breakpoint](https://developers.google.com/chrome-developer-tools/docs/javascript-debugging) (ctrl+F for "conditional"). The purpose of conditional breakpoints is of course to break only if some condition is true. But you can put arbitrary JS as your condition, so if you put 'console.log(someValue)' it will execute that and log the value, every time the relevant line is executed, but it will never actually stop, because 'console.log' always returns undefined.
Yup, you can get an entire JavaScript library going from *legally available online books. * [Eloquent JavaScript](http://eloquentjavascript.net/) * [Learning JavaScript Design Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/) * [JavaScript Allonge](https://leanpub.com/javascript-allonge) Plus MDN, SO, and tons of open source projects should help you on your way to mastery.
I think we have come to similar conclusions. In my experience, DI is useful but has a cost in terms of code complexity. So we should only use it where appropriate. I think that for stuff that actually has multiple implementations (think a plugin system) it should be used (in fact, we use explicit DI in the React core for our pluggable rendering backends https://github.com/facebook/react/blob/master/src/browser/ReactDefaultInjection.js). But with testing I think DI is overkill. Whitebox testing, where you're testing the interface as well as the internals, tends to catch more bugs, but when you change the internals the test tends to change as well. So DI doesn't make much sense here, since part of the point of DI is to isolate parts of the implementation that don't change. So if you're doing it just for testing, you're effectively just over-engineering everything. Instead, we basically mock at a per-module level (sometimes called "service locator"). So for a given test run you can say that require('moduleA') should actually load moduleA-mock (dig around https://github.com/facebook/react/search?q=mock-modules&amp;type=Code to see what I mean) This has the advantage of not requiring refactoring of the production code just for testing. I've found that the "refactoring to support DI makes your code better" is a bunch of baloney in practice when you're trying to ship products (at least based on my experience at Facebook, where we DI'd all of our PHP tests starting in late 2011 and are now trying to dig ourselves out of the pit).
FYI, the little white sidebar full of various share buttons is covering up some of the text. If I wanted to share this on facebook/twitter/wherever, I would just copy and paste the URL into it. But I wouldn't really mind the little sidebar if I saw a way to get rid of it, other than deleting the node from the devtools.
Left edge is more important than right edge, and this generator ignores it.
It could be interesting on a design blog as an [initial](http://en.wikipedia.org/wiki/Initial), especially if it only animated on hover or something. Definitely something that's way open for abuse, though.
God dammit, I just bought the ebook not even 10 minutes ago
Is this cool? Should I build it out some more? What would you add? Feel free to tinker: https://github.com/ZachNagengast/fragmenter
How did you know I needed this exact thing? [Your first customer!](http://www.fuckyeahmusic.com)
* router = [Director](https://github.com/flatiron/director) Backbone doesn't have a controller anymore
http://codereview.stackexchange.com/ Take a look at Web Components (if you can assume Polymer will work for most of your users) or Angular JS, for two-way binding that will make it easier to connect your data to your UI and still keep them separated. Having a library to wrap the AJAX calls might not really be necessary or as important as doing a good design of the API in terms of REST, or at least in terms of what HTTP endpoints fit with what you are trying to do.
Full disclosure, I am the author, questions and criticisms are more than welcome.
Worth reading for a JavaScript beginner?
You should have a decent understanding of both JavaScript &amp; jQuery beforehand.
TBD. Shaders... Currently everything is on the cpu, because of my lack of knowledge in the gpu field, but I hope to accomplish it soon and increase the number of particles to a much higher ammount!
That is true, but let's assume this is one step in a larger project that requires canvas. It's good to know that if there are several ways to do something, you should be able to choose which method suits your needs best.
What do you mean? How did it let your expectations down?
How do you mean? Do you mean indenting?
It was a quick exercise I did after teaching myself Javascript (also a quick exercise in actually finishing a project for once). I also saw a pic on /r/programmerhumour about code silhouettes, so I figured people used them to judge the layout of their code or something.
Yes.
Generators are an awesome feature in functional programming, and JavaScript is introducing support for them in the next version: http://wiki.ecmascript.org/doku.php?id=harmony:generators I thought you were doing something with them! Still, I like what you've written :)
Why is this in /r/javascript?
The book's target audience description: &gt;This book is targeted at novice to intermediate developers wishing to learn how to better structure their client-side code. An understanding of JavaScript fundamentals is required to get the most out of it, however we have tried to provide a basic description of these concepts where possible.
Ohhh, *that* kind of generator. I've used them maybe once or twice in Python, but not JS. I'm still a beginner!
I don't think so.
I am not sure what you are asking...
Eh, usually sure, but if you care at all about performance, the background should be in HTML with a transparent canvas on top of it.
Nah, I could have made it 3D ;)
You don't need the ```new``` keyword. You're already creating a new scope when you use the ```new``` keyword inside the MyClass function. What you're doing is more succinctly done with: function MyClass(variable){ var _private = variable; this.publicMethod = function(){ console.log('hello, this is a public function' ); } // rest of constructor logic }
You should pre-populate the text area so that people can easily see what it does. I'm not sure if it's possible to grab the current page's HTML as text from Javascript, but that would be an easy way to show some somewhat complex code.
Don't rush into it, but it wouldn't hurt to skim over some things if you've got the extra time. I'd get way more comfortably with Javascript and jQuery before really diving in, especially the shortcomings of trying to build applications that aren't a mess of spaghetti code. Once you get to the point where you're able to recognize spaghetti code for what it is, Backbone can help. And once you realize you're struggling to solve the same problems again and again with Backbone (or struggling and failing to solve them elegantly), take a look at [Marionette](http://marionettejs.com/). If you're not already on IRC, I strongly suggest you get on it and hang around the #web, #javascript, #jquery, and #marionette channels (and #documentcloud, maybe) on freenode. Tons of people willing to help in those channels.
add a color picker
You did not miss it, it is not explicitly stated anywhere at the moment, so definitely a valid point.
Funny you say that, I did *exactly* that during the testing! It's totally possible and I'll happily implement that sometime today. If you know of any attractive code with an appropriate licence, send it my way!
Awesome! :)
Why would anyone want such a distracting pattern as a background? All it needs is random blinking,
Chat is sort of the prototypical example of something that would be good to use websockets for. Websockets create a persitent two way connection between the client and the server. The fact that a newly logged in user must connect to a user that is already logged in should cause no issues with solving this problem with websockets. However, there is browser compatibility to consider depending on what your needs are. 
This could be cool if the colors weren't obnoxious together. With a complementary palette this could look nice. 
Just when I thought I couldn't love this devtools more. 
+1 for StackOverflow.
Here's a gulp + webpack + coffeescript + sass starter kit https://github.com/starterkits/frontend-starterkit-minimal Thanks everyone for posting their projects. It's been super helpful.
How did you generate the silhouette image?
hey glad that worked out. 
I've detected multiple hexadecimal color codes in your comment. Please allow me to provide visual representation. [#040404](http://color.re/040404.png) [#080808](http://color.re/080808.png) [#0c0c0c](http://color.re/0c0c0c.png) [#101010](http://color.re/101010.png) [#141414](http://color.re/141414.png) [#181818](http://color.re/181818.png) [#1c1c1c](http://color.re/1c1c1c.png) [#202020](http://color.re/202020.png) [#242424](http://color.re/242424.png) [#282828](http://color.re/282828.png) [#2c2c2c](http://color.re/2c2c2c.png) [#040404](http://color.re/040404.png) [#080808](http://color.re/080808.png) [#0c0c0c](http://color.re/0c0c0c.png) [#101010](http://color.re/101010.png) [#141414](http://color.re/141414.png) [#181818](http://color.re/181818.png) [#1c1c1c](http://color.re/1c1c1c.png) [#202020](http://color.re/202020.png) [#242424](http://color.re/242424.png) [#282828](http://color.re/282828.png) [#2c2c2c](http://color.re/2c2c2c.png) [#040404](http://color.re/040404.png) [#080808](http://color.re/080808.png) [#0c0c0c](http://color.re/0c0c0c.png) [#101010](http://color.re/101010.png) [#141414](http://color.re/141414.png) [#181818](http://color.re/181818.png) [#1c1c1c](http://color.re/1c1c1c.png) [#202020](http://color.re/202020.png) [#242424](http://color.re/242424.png) [#282828](http://color.re/282828.png) [#2c2c2c](http://color.re/2c2c2c.png) *** [^^Learn ^^more ^^about ^^me](http://color.re) ^^| ^^Don't ^^want ^^me ^^replying ^^on ^^your ^^comments ^^again? ^^Respond ^^to ^^this ^^comment ^^with: ^^'colorcodebot ^^leave ^^me ^^alone' 
I guess the reason I wanted the other way was I was looking for a pattern that allowed me to use prototype methods while having a self-contained syntax. Maybe it's just me trying to hold on to old OOP habits. The benefit of having prototype is that the methods aren't duplicated each time you make a new instance, whereas in your example they would.
I'm exploring javascript design patterns to use on a project. I should have explained more in the post. Will edit.
Ooh, I've been waiting for someone to ask this! I generate the silhouette itself it on a hidden `&lt;canvas&gt;` element. I then got a data URL for the canvas's contents using `canvas.toDataURL();`and set the `src` of a hidden image tag to that data URL. The canvas and the image are all hidden at the beginning (with `display: none`). However when the silhouette is generated, the image appears and is uncovered. The canvas remains hidden. I did this because, as you know, you can't save a `&lt;canvas&gt;` to disk, so converting it to an image first allows you to both do that *and* copy-paste a URL to share with other people. For my first Javascript thing, I'm pretty proud of this hack, as well as a few others (setting the canvas width to the length of the longest line to avoid having excess whitespace on the final image, etc etc)
Oh, sounds interesting. I'll leave this here, if you hadn't seen something similar before: http://www.phpied.com/3-ways-to-define-a-javascript-class/
Whoa those colors look really cool! I just added a few color swatches in a dropdown menu based on the suggestions here, and ill add those ones too, any name in mind for them? 
I updated the density to 200, can't go too high cause it might cost too much cpu, will work on the stretching next, thanks for the suggestions
Thats a very cool idea, i will look into how this might be done
[Lime](https://github.com/limetext/lime) will be, someday, hopefully.
Take your pick: * The Darkness * Night Static * Deep Shadows * Dark Side of the Moon Or anything you want :-D Also, try this one, for a slightly warmer light tone: #fff,#faf9f8,#f7f7f6,#f6f5f4,#f4f3f2,#f2f1f0,#eeedec,#eae9e8,#faf9f8,#f7f7f6,#f6f5f4,#f4f3f2,#f2f1f0,#eeedec,#eae9e8,#faf9f8,#f7f7f6,#f6f5f4,#f4f3f2,#f2f1f0,#eeedec,#eae9e8 I don't have a name for that one. Maybe Heavy Cream?
Don't bother adjusting it up, you already offered the github repo... people can download/modify themselves instead of eating up your cpu.
In you example, however, you *are* recreating the methods every time, simply due to the fact that you are creating a closure over the "private" variable. No matter what you do, you *have* to create a new function *somewhere* everytime you want "private" (enclosed) variables within JavaScript. I always see the argument against "duplicating functions" in JavaScript, but it's rarely backed up by performance testing. I doubt you are going to be creating this object by the thousands! ;-) --- As a side note, the more I use JavaScript, the more I avoid the `new` keyword as much as possible. Prototypical inheritance has its place, but you almost always end up with cleaner, less interdependent code if you can avoid using JavaScript to recreate classes.
Haha I like those, updated with "Darkness" and "Heavy Cream".
Furthermore, can we please post our own JS1k entires, not [10 different entires that we didn't create?](http://www.reddit.com/user/kuvos)
Ah I see... well thought out and pretty impressive. Thanks for the detailed answer
No problem, I love sharing neat little hacks with people! [Here's the exact code that does it.](https://github.com/ChainsawPolice/codesilhouette/blob/master/codesilhouette.js#L46) Pretty simple, right?
I've never developed a plugin for it, but Sublime, with [Package Control](https://sublime.wbond.net/) installed, it's fairly easy to add features to it. So far I've installed a bunch of packages, including the [SpaceGray theme](http://github.com/kkga/spacegray) and third-party support for a bunch of languages like LESS, HTML/Jinja templates, etc etc. If you mean that it's not easy to write a plugin for it, I can't really weigh in as I've never tried my hand at doing such a thing. There's a fun weekend project, actually ;)
Thank you, we'll change it.
Thank you, we'll consider adding this functionality.
I'm familiar with IIFE. I'll stick with (function(){}()) as I think it is more clear.
http://brackets.io is easy to write plugins for too, it's currently my favourite.
Hey, that doesn't look half bad. I might give it a go tomorrow when I add some things to the code silhouette generator and see how it fares against Sublime!
Thanks for the link. After working on my first big project just over two years ago, I've been a total Sublime devotee. Finding all these new editors with their own feature set is great. Oh, and thanks. I think the code silhouette thing is cool too, I guess :P
I'd actually strongly recommend not using that pattern. It can cause a lot of bugs due to the fact that if it's following a function, your new function is passed as an argument to the previous one, even if they're on multiple lines. Sometimes you'll do something like just concatenate JS files, and all of the sudden everything breaks, and it's because of this pattern. Short example: var x = function(){} ( function (){} )()
Thanks! I guess it helps that I've been doing back-end dev and front-end design for a while now, right?
&gt; sure, but please support some code for it. I already used a premade library for generating that noise and I don't have so much time because of uni and work to play anymore (this is actually my uni project).
I'm sorry; I thought you'd coded the simplex noise yourself (which would allow you to modify it more easily).
What version of Ember does this book cover? Would be nice if this info was front and center.
Good point and my bad; this book covers the latest available version of Ember, Ember-Data and Ember Inspector (will update the info page right away). Also I keep the book up to date with the latest Ember releases.
Haha, probably, but still, after a day? Pretty hot :)
Nice write-up but I'm not impressed by the comparison criteria: Which one of these supports long stack traces? And what about unhandled errors? What extra features do they bring? Also the speed result is weird, as Q is known to be terribly slow (and even blowing up), and bluebird to be insanely fast, for example https://github.com/petkaantonov/bluebird/blob/master/benchmark/stats/latest.md And what is the focus on filesize? I still don't get why that would be any factor here (or in any javascript library). I'm pretty sure it is just grasping at low-hanging fruit. What is 50kB of text-based content? Nothing. People regular slap 1mb high-res images on websites, they load 20 different analytics packages and a shitload of social media crap or don't even optimise their images, css or other resources. If you use any serious webserver it will gzip the JavaScript (=text) very effectively. Doing a first comparison of JavaScript libs with filesize asmetric makes no sense.
&gt; Your framework will not work. Hereâ€™s why it will not work ... &gt; there is not a JavaScript framework in the world that doesnâ€™t check some of the boxes above So you're saying no frameworks work? I don't get the point in this
How is this an "html5 canvas algorithm"? The implementation is using html5 and canvas, but there's nothing inherently "canvasy" about this. That said, it's still pretty cool!
JS was never made with type safety in mind, but as our apps get bigger and more complex, lack of type checking can cause real headaches. These are some good pointers with useful situational pros and cons.
&gt; [ ] Your framework doesnâ€™t work with any module system With angular.js they solved this with inventing their own which doesn't work well with any other module system.
Not too shabby. One issue though (I also opened this on github), in src/pubsub.js at line 30, you are assigning `i` and `l` before the initialization of the triggering loop, leading to a case where you can cause a fatal TypeError if your handlers unsubscribe function from the same event that cause them. This can be problematic if you use logic control to define which callbacks to execute when. for (var i = 0, l = handlers[event].length; i &lt; l; i++) { handlers[event][i].apply(ctx, ctx.args); } This code reproduces the issue. Notice that "Done." is never logged. PubSub.subscribe('test', function () { console.log('function 1 called'); }); PubSub.subscribe('test', function () { console.log('function 2 called'); console.log('removing listeners for "test"'); PubSub.unsubscribe('test'); }); PubSub.subscribe('test', function () { console.log('function 3 called'); }); PubSub.publish('test'); console.log('Done.');
Despite working on huge js projects, I almost never run into a need to type-check. I realize that it's common in many languages, but there are also many languages where duck-typing was a purposeful design choice (ruby, python, etc) for a number of reasons. So how do I achieve type-safety then? I don't. It's not even a goal of mine. Instead I write a huge suite of tests that ensures that the code actually works (which I assume you do anyway, regardless of language choice). 
This is the reason node.js concerns me. JavaScript was not built with these things in mind, and we use it in the browser because we're stuck with it. It baffles me that developers willfully choose to work with JavaScript, all the while hacking in things like string checks as a replacement for type checking. In any other language, that would be a code smell, yet no one bats an eye at doing it with JavaScript.
I think its beautiful personally.. haha. You can see why I had to use a shim in my code - there is about a 1 pixel gap between some of those triangles. Polygon styling seems to be a growing design trend these days though, its the default background on the new galaxy S5's, but I do agree that it is can be distracting if the colors contrast too much.
Edit: just found out author of the post is an Ember contributor. Now that makes sense... Actually, I can agree with most of the article except for a few things: - Less opinionated solutions definitely have their market share. There are use cases where things like Ember simply doesn't make sense. - Not everyone needs to support legacy browsers. Again, there are different use cases. - Some projects don't include routing because they are not frameworks, care about a smaller problem scope, and there are tons of standalone routing libs that can be used. This doesn't make them undesirable in their target space. The post itself falls in the same category with the YAFS post by the TasteJS team - there are actually some good points, but presented in a wrong fashion (this one being worse because of the cynical pessimism.)
or use something that allows some type definitions like typescript or the closure compiler
thankyou so much for a clearly explanation!
I use ===, but really only because the default settings on jshint make me ;) I don't use instanceof, maybe because I don't really do inheritance. I generally find typeof is pretty useless because it isn't even effective at it's main purpose most of the time. High automated test coverage really does cover most of the problems that these would solve. One notable exception though is for detecting arguments if you're trying to get a function to handle multiple signatures.
Make it so the generated image wraps -- the color of the last half-triangle in each row is the same as the first.
I'll use all three to handle your last point, but `===` I use anywhere I actually need to check the identity. Sometimes I don't want "" to equal false. Still, if I'm concerned with types, I don't use JavaScript, so meh.
Great summary.
Note: After working on it for awhile I realized it's probably not the most practical approach, but I had fun working out it's current functionality.
Is that supposed to be MVVM or is there ANOTHER pattern some framework is trying to bring to client side javascript? :p
Great suggestion, so people can set it as a repeated bg on websites right?
Exactly. Or wallpapers, etc..
Won't make the code more readable though.
I'm not clear on what the arrow notation is. Anyone care to explain? [I googled this up and it didn't help](http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax)
It's a cynical look at the proliferation of client side frameworks in today's world. I don't think there's an inherent point to it, but it is representative of *a lot* of our feelings towards all the new &lt;noun&gt;.js things that come out seeminglu every day. Don't take it too seriously, but it is funny. Judging by the votes, this community is still undecided on the fetishizing of bloated frameworks though unfortunately. Time will tell
Down-voted for not being open-source. I'm not saying sorry either. I'm just being completely honest.
I like it as well, but I don't think I'd put it as a background on my website. One, the gaps, I have no idea how to fill in with my method, two, it's waaay to distracting. Even if it was just sides of the screen and all the content would be in a plain white box in the middle. I would use your version with smaller contrast in the scenario described above. But that's just me, maybe I'm a terrible designer, you never know.
You raise valid concerns. Some companies for that reason will only use node.js as a kind of middleware for its ability to handle request load, but won't let any data it generates touch a database without going through a system written in a strongly typed language.
Does not work in Firefox.
The queued animations make it a chore to use, and it's not pointing right at the form field.
If there are few enough developers, or the components are well-isolated enough and don't evolve too far beyond their original scope, you could probably get away with less type checking. Generally, the points in the code where type-checking would be crucial won't appear in tests, because that data is stubbed out. Still, There's a strong distinction to be made between duck-typing as a design choice and reliable type inference/conversion/detection, and the JS has never seemed to prioritize the latter. The following post from Jamie Zawinski (an oldie but goodie - Brandon Eich himself weighs in) really drives the point home. Even when you're "sure" you have a "number", JS can still throw you nasty surprises. http://www.jwz.org/blog/2010/10/every-day-i-learn-something-new-and-stupid/
A typo, but to perfectly honest these days I wouldn't be surprised!
It's basically a shorter way to declare an anonymous function: // existing setup [1, 2, 3].forEach(function(val) { return val * 10; }); // identical result with arrow notation [1, 2, 3].forEach(val =&gt; val * 10); The arrow notation version is actually not quite identical to the existing setup in that example since the scope of the arrow notation function is global in this case whereas the scope of the original function is the array itself, but it doesn't much matter in this example. Pass `this` as the second argument to the original .forEach() and they're identical.
As a side note I think the difference here is actually object vs funvtion object. "Derp" is indeed an object because we can call all of the string functions on the string prototype with it. However, it does not have the String () constructor function as when you call new String ().
The examples it gives for template strings are confusing me. Can anyone explain what the fourth example actually does? It seems to be defining an AJAX request, but in an extremely odd manner. Is that right?
I'm guessing you still need to know your way around closures though to use them effectively, since they're just syntactic sugar for something you can already do.
Hi, I'm the author. Yes, I did write about the long stack traces but it was not one of the features I put into the chart - I had to stop somewhere. But maybe in a future revision. I don't know about the speed result - thats just really the raw numbers across a lot of different devices. Doing a bigger benchmark in the future would be a good idea. Filesize - well, I care about filesize. I know that this single library won't be the that big of a deal. Many small brooks make a strong river. I guess you are right about the raw numbers makes little sense, perhaps I'll remove it. 
The link to the repl.it version is http://repl.it/P3s/3 there is a much easier to read version here. It is numbered by line on there :)
Oh, and when I try to run it it says "Confirm not defined".
they aren't all suddenly going to work, they, some like promises and let/const you can use in newer browsers now while others like modules aren't even close to being implemented.
``` if (answer.toLowerCase() == "yes") { /* ... */ } else if (age &gt; 12 &amp;&amp; age &lt;16 ) { /* ... */ } ```
I am using google chrome.
Just posted a response in my original question
confirm() and prompt() are a part of the window object. Try window.confirm or window.prompt().
calling confirm in the global scope with nothing else overwriting the default window.confirm method would resolve to confirm, try repl.it, confirm and window.confirm simply don't work. window.confirm says "TypeError: Object #&lt;DedicatedWorkerGlobalScope&gt; has no method 'confirm'"
Not native classes. No classes at all actually. It's just a keyword that does some prototype setup for you. It is in no way a class and it does nothing that you can't do right now.
http://nightlight.conductor.com/5-attempts-type-safety-javascript/
http://jsfiddle.net/uex5n/
I've never understood that. How is a constructor with a prototype not the same thing as a class?
-&gt; is the coffeescript syntax, in ecmascript6 it's =&gt;.
With prototype you can change properties on the constructor function (or whatever you set the prototype to) during runtime and even the objects you created before will have the change. You can expose or shadow properties from any parent class in the chain. Example, * If A has X, and B's prototype is A, then B can read A.X with B.X. * If B sets X, then B can only read/write to B.X, it does not change A.X * If B deletes B.X (after writing to it) then it will once again be able to read A.X * B can read/write A.X directly at anytime by referencing the prototype. This holds true even if A -&gt; D -&gt; E -&gt; B. Each stop up the prototype chain can do any (or all) of those actions. Inheritance doesn't only inherit property/method names/defaults. It actually references the original value/function. These sort of actions are not possible with classes. (Some languages like ruby do allow you to dynamically change a class at runtime.)
Ah, good to know. Oh well, it'll make things prettier at least.
You need to capture this; http://lmgtfy.com/?q=javascript+this+event
&gt; If there are few enough developers, or the components are well-isolated enough and don't evolve too far beyond their original scope, you could probably get away with less type checking. Generally, the points in the code where type-checking would be crucial won't appear in tests, because that data is stubbed out. I think you're ignoring all the large projects in duck-typed languages that somehow still work though (rails, django, dropbox, eve online, etc, etc). What about javascript makes you feel that type-checking is necessary when it's obviously not necessary in ruby or python? (Incidentally I actually do use bignums, but then again, I'm in node-land where that's possible).
Interesting: Arrows (shorter even than Python lambdas, and not just expressions, nice!), super constructors, string interpolation, default values, destructuring assignment, iterators, generators, list comprehensions, Unicode support, protocols... It appears that at least some of the people who suggested these enhancements have been paying attention in "Design principles of Python" class... ;-) I wonder how much more similar both languages will become, but I do hope that JavaScript will not lose too many of its unique features in the process.
Yeah... I'm saying once you really understand javascript, you won't need those string checks. Someone doing string checks (or type checks at all) is generally doing it wrong. The lack of type safety in javascript is actually a conscious design choice by very smart people and every attempt so far to change that (including optional typing) has been thwarted (see the abandoned ES4 standard, or the general lack of uptake in Dart).
&gt; (Some languages like ruby do allow you to dynamically change a class at runtime.) You should have kept reading. But as a bonus here is [prototype based ruby](http://t-a-w.blogspot.com/2006/10/prototype-based-ruby.html)
Well that's just not grounded in reality. If you're worried about js mangling your data, then putting a theoretically better designed system AFTER that point isn't going to make any difference. I've actually run into a rare case where this actually happened: I was pulling a twitter feed with javascript and dumping it into a kafka queue, and the tweet ids were very large integers that vanilla javascript couldn't handle; JSON.parse() would actually give me slightly different large integers due to JS's use of floating points for all numbers. The fact that a java system was handling the data later obviously does nothing at all to solve the problem. Also note: I still solved the issue, with [bignum](https://www.npmjs.org/package/bignum)
Isn't there a better way? This seems very wrong.
Uh, no, that wasn't the point of his example at all. Template strings are simply an easier way of providing string concatenation. So, in todays javascript you may write something like: var welcomeMessage = "Hello, " + firstName + " " + lastName + "!"; ...with template strings this could be written as: var welcomeMessage = "Hello, ${firstName} ${lastName}!"; I'll admit I'm not a fan of the dollar sign there, considering it is *never* used anywhere else in Javascript, but whatever. EDIT: For those wondering, I would have preferred string interpolation done much like the "standard" we've landed on with the likes of Handlebars, Mustache, and even Go has adopted: var welcomeMessage = "Hello, {{firstName}} {{lastName}}!";
Yeah I know what this is. If you looked at my code, you would see that I tried passing it to the function and it didn't work. I came here for help, not to be told to read about something I know and do something I already tried. 
Yeah that's what I was thinking. I did some Google-ing and I think I get the concept. And as technical_guy said, adding the quick parse,stringify did work. I guess this just casts it to a string and then back into an object breaking the "pointer" I created originally I wonder if there is some way to force a pass by value similar to a &amp;= but the opposite. 
Check some Scala tutorials -- it's an awesome feature for that language.
Not sure if this helps, but as a link to it is posted in /r/webdev maybe: http://acoard.com/blog/variables-in-javascript
Any code reviewer who allowed nonsense like that should be shot.
The first problem is that these are functions are not associated with an instance of anything. When you call the sprite function, "this" is going to be pointing at the window. If you want to do object oriented stuff you need to add the function to the prototype of the object and then create a new object. "this" will change in the onload callback. It looks like you figured that part out in the second attempt, but calling your function parameter "sprite" is going to clobber that closure you just created. In fact putting that code in netbeans gives a warning for unused variable "sprite" Also I wouldn't be so quick to claim that you know what "this" is, your code shows that you have a lot to learn about how javascript works. 
&gt; Your documentation is styled using unmodified Bootstrap What is wrong with this?
You can play around with ECMAScript 6 features here: http://www.es6fiddle.net/
I understand the concept right away, it is to get a deep copy of the object so you don't copy the reference. But still, isn't there a better way? It still seems wrong to me, as it contains unnecessary work (the serialization part). At least wrap it in a clearly named function...
Try humanview and humanmodel, which extend on backbone's view and model, adding some functionality that isn't there. One I can think off the top of my head is rendercollection, which renders collections for you.
Yeah I didn't mean I know how this works all the time, just that I knew what *this* was at that point in the code. There is still a lot for me to learn about JS but you and caspervonb have helped me a lot, Thanks.
Stackoverflow ;)
Could someone explain 'destructuring' a little more? This example: var { op: a, lhs: { op: b }, rhs: c } = getASTNode() I have no idea what the fart is going on. In this example: var [a, , b] = [1,2,3]; Does that mean you'll then have two variables, `a === 1` and `b === 2`? Then does this: // Can be used in parameter position function g({name: x}) { console.log(x); } g({name: 5}) Pretty much mean that we can have named parameters now? Wasn't support for that always, in a roundabout way, there? --- On a different note - I'm excited for `Let + Const` and Class syntax. I really wish they were implementing real classes, because I find that, as powerful as prototyping can be, it can also bite you in the butt, and wouldn't mind having both options available to me.
That one's straight from the Ruby/Perl way of doing things.
And it should be fixed - now it supports indenting!
A key thing to understand is that you are not executing the function at that point. So writing function(sprite) is not passing the variable sprite into the function, it's naming the first argument as sprite. So later when the function actually gets called, the event gets put passed as the argument which can be accessed as sprite.
I added it a few minutes ago, as well as a few other changes!
That looks like a complete misuse of destructuring. It's supposed to help make your code more readable, not less. But yeah JS destructuring and tail recursion sure make it feel more like a function language, like Scheme or Haskell. 
 var { op: a, lhs: { op: b }, rhs: c } = getASTNode() I believe this would result in a 3 variables: a = getASTNode().op, b = getASTNode.lhs.op, and c = getASTNode.rhs So it is using the keys (of the anonymous object there) to pull out values from an object returned, variables will be created for all the "values" of the object, ie: a, b, c Edit: let me rewrite the above: var node = getASTNode(); var a = node.op; var b = node.lhs.op var c = node.rhs var [a, , b] = [1,2,3]; I believe this would result in a = 1, b = 3 eg: var ary = [1, 2, 3]; var a = ary[0]; var b = ary[1]; // Can be used in parameter position function g({name: x}) { console.log(x); } g({name: 5}) Yea, this looks like named parameters via objects
This code won't run in the environment on repl.it. Try running it on jsfiddle.net.
When can we use this for web development (i.e. supported by most recent browsers) ?
This is awesome... Can't wait to get these features. However, I'm only cautiously optimistic. My first forays into JS have been around 1998. I quickly gave up because of all the browser incompatibilities. And anyways... network speeds were slow, most people deactivated JS... but let's not go on a tangent here ;) I like these new features. But when will they become useful on main-stream browsers? How long will it take this time for IE to catch up?
If you are using jQuery you can use .extend: var newObj= jQuery.extend(true, {}, existingObj); 
'$' is used by most languages for string interpolation: http://en.wikipedia.org/wiki/String_interpolation
http://kangax.github.io/es5-compat-table/es6/ In a few years, maybe. Well, IE has the slowest release cycle. If IE12 doesn't support it, it will take at least another 12-18 months.
Brendan Eich is no stranger to Python and (fortunately) has no problem with lifting good features from Python and putting them into JS. The generators are almost a straight port. ;-) https://brendaneich.com/2011/01/harmony-of-my-dreams/ https://brendaneich.com/2012/10/harmony-of-dreams-come-true/ 
After the huge improvements in standards support in IE10 and IE11, I'm quietly optimistic about IE12 and IE in general. 
I'm not very optimistic since IE9 still exists. The extremely slow update rate is IE's biggest issue. IE9-IE11 didn't fix it. Only about a third of the IE users are using the latest version. Another third is still using IE9 and IE10. And that final third is using some zombie version of IE.
&gt; it is never used anywhere else in Javascript Except it's already used for string interpolation, of a sort: `"top".replace(/(o)/," $1 ")`
If you want to read about how to implement it, you might find this interesting http://teropa.info/blog/2013/11/03/make-your-own-angular-part-1-scopes-and-digest.html
&gt; What is 50kB of text-based content? Nothing. People regular slap 1mb high-res images on websites Those bytes aren't quite the same. JavaScript needs to be parsed and executed. It also has a much higher priority. Your website might be completely unusable without it. Images, on the other hand, are about as low priority as it gets. They also get rendered progressively which drastically reduces the impact on the perceived loading time. That's why 500kB of JS is quite a lot and why 500kB of images isn't really a big issue. 500kB of CSS would be even worse because it blocks rendering and there is nothing you can do about it. With scripts, you can at least move them to the bottom or use the "defer" and "async" attributes.
What about performance? I like to see new features that helps creating optimized code instead of more garbage.
Is essential that you use a library like jQuery for this as it has advanced algorithms to copy objects into other objects. This is not something you can easily do by say, a simple recursive property iteration.
what's with the 3 dots ? is it part of the features?
&gt;In all those other languages, can you use the dollar sign as part of a variable name? Yes. Here is how it looks in Dart, for example: var a = 4, $ = 5; print('$a ${$}'); var a$b = 6; print('${a$b}'); With ES6, you always have to add the curly braces anyways. It's always "${...}". [By the way, you replied to the wrong comment.]
Yes, the book is 100% complete
If not enough of these are adopted in the next IE release (12? Im not sure tbh), we are looking at base minimum 2 years. But thats only for IE. Other browsers a lot sooner (if you use the Aurora release channel and the Canary release channel for Firefox and Chrome respectively, you can play with a lot more of these than is shipped in the stable releases).
Browser extensions?
I read that, of course, but the parenthetical implies that it's an exception. There's no correlation between being prototype-based and being able to mutate your ancestors. The two features are orthogonal.
Again, the post is primarily meant to consider options in the language's native capabilities. I much value the type safety assistance from frameworks, but it isn't always an easy option to add to every project, or in every context.
There is syntax highlighting for that. Anyhow, in practice, string interpolation is less error prone and requires less attention that string concatenation via '+'. It's an improvement. A very small improvement, but an improvement nonetheless.
That was the part of it that I understood, and the first examples explained it quite well. It's just the fourth one doesn't seem to be syntactically correct, at least assuming that the `-marks are just a templating version of the standard "-marks. EDIT: On second glance, it looks like something is being called (the "(myOnReadyStateChangeHandler);" part), but that still doesn't explain the "GET" part at the front, which is still outside the `-marks. I recognise it's hard to precisely understand what's happening, as the syntax-highlighting for ES6 obviously hasn't been added yet, but I can't see what else it's trying to do.
According to [this test](http://jsperf.com/deep-copy-vs-jquery-extend), it looks like the parse(stringify(obj)) is more efficient though I think the jQuery code looks a little better...
&gt; can we use this for web development (i.e. supported Right now with Traceur https://github.com/google/traceur-compiler
Hi my name is amos and I created and maintained MEAN.IO for almost a year. Unfortunately I completely agree with you about the maturity of the boilerplate. The idea was to evolve the boilerplate, but I didn't anticipate the repercussions of collaborating with a commercial company, so things just got stuck with usual politics. Since I believe in MEAN as a stack I had to leave the current MEAN.IO project to develop a truly open-source fork named MEAN.JS. As confusing as it might sounds this was the only solution for initiating a better development of the MEAN stack, even if not an optimal one. The new project is placed under a neutral organisation and we already started to rapidly update the boilerplate. We specifically worked on the eco-system by creating a new website with a decent starting-point documentation at http://meanjs.org. I actually reduced my day job by 60% to invest the better part of my time in developing the stack. We work towards three strategic goals: 1. Developing the core and core modules(users, admin, etc.) 2. Creating supplemental modules (The first one coming out this week) 3. Working on a proper generator with continuos development support(Already working on this, should be ready in a few weeks) Two weeks ago we launched the new project, and already invited the community to join us and support the split move. Reaction was encouraging, but not yet satisfying. We decided to concentrate our efforts on the technical side instead of wasting time on the stupid PR bullshit, so the message might not got through. So here I am trying to make it clearer. I would love to talk to you all about your ideas and complaints, so please contact me at: amos@meanjs.org or on social platforms using the amoshaviv handle.
Its fairly common for a server node to pull code from the prod branch and build its software when coming online. No amount of testing will prevent an upstream change from breaking that. All dependency versions are locked down but some of those dependencies don't lock they dependency versions and they pull latest code which was what caused that break.
And yet few will bother to write tests.
The *class* declarations aren't verbose just to save a few lines of boilerplate code. I made the *class* body use a function instead of an object literal because: 1. You don't need to loop through the object literal keys to copy its properties onto the new prototype. Hence `augment` runs in O(1) time since there are no loops. 2. It allows you to inject the base *class* prototype into the scope of the derived *class* function. Hence you don't need to put it on the derived *class* prototype (i.e. `this.super`). 3. If your class needs private static data members then the function body allows you to create them easily. For example private methods can be easily simulated. If you're concerned about verbosity then you could easily create a wrapper function around `augment` as follows: function defclass(base, body) { return augment(base, function (uber) { _.extends(this, body); this.uber = uber; }); } You can now use `defclass` just like `klass`: var Circle = defclass(this, { constructor: function () { ... }, area: function () { ... } }); The objective of `augment` is to make inheritance as simple as possible. By default it's verbose but that's not a hindrance. As Hoare said about simplicity: &gt; There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.
You know, for those days you want to make the internet a little worse...
Its a splat. http://stackoverflow.com/questions/6201657/what-does-splats-mean-in-the-coffeescript-tutorial This is for coffeescript but same idea.
How well does this work with screen readers and other accessibility tools?
&gt; http://en.wikipedia.org/wiki/String_interpolation Out of this small list, 4 out of 9 use the dollar sign, which doesn't pass the word "most" in my books. Out of those 4, 2 of them use the dollar sign themselves when defining variables, which makes its use mandatory and obvious. Therefore, only 2 out of the 9 listed are opting to use the dollar sign where the language itself does not normally use it, as in this proposal.
Pretty cool, but I can't press backspace more than once when the carat is at the end of the document.
My screencast, [Let's Code: Test-Driven JavaScript](http://www.letscodejavascript.com) goes into JS testing in depth. I'm also happy to answer questions here if you're interested.
Could you describe a real-world use for this?
Well done. I like the simple, clean markup and the ability to nest tooltips in tooltips. Three suggestions: 1) (No big deal) Add "cursor: pointer; cursor: hand;" to tooltip CSS so that the user gets feedback that the tooltip exists. 2) For gosh sakes, make your example more obvious with more tooltips and obvious targets. It took me five minutes to figure out that your example tooltip was a single line with a tiny superscript for a target. I saw the code block and thought it was just a code sample not a live demo. 3) Provide a way to have different tooltip styles in a single document. What if I wanted a green background tooltip for messages and a yellow background tooltip for warnings?
Fair enough... then *I* as a developer get to see the fancy new stuff. But what about the clients? I know back in the days it took ages for features to be implemented. Maybe, nowadays, as all popular browsers auto-update it's not so bad anymore. However, doing all development in a corporate environment where we still live in stone age, all these features bring tears to my eyes... so shiiiiiny.... I want to use them... \^_^
Internally we are using google-closure right now. It seems to me that this would be in conflict with traceur :(
&gt; Out of this small list, 4 out of 9 use the dollar sign, which doesn't pass the word "most" in my books. PHP, Perl, BOO, Dart, and Nemerle use '$'. That's 5. Ruby and CoffeeScript use '#'. Python and Lisp are more like printf/sprintf. &gt;Out of those 4, 2 of them use the dollar sign themselves when defining variables [...] Yes, because this enables straightforward string interpolation.
Coffeescripter here. Actually, coffeescript does have a =&gt; for functions, the difference is that =&gt; binds the function to the current "this" statement while -&gt; does not. So, the ES6 version is actually closer to coffeescript than you might think.
Can't you first compile from ES6 code to normal javascript with traceur and then from normal javascript to optimized javascript with closure? Traceur outputs valid javascript and closure accepts valid javascript so it should be possible.
&gt; The one disadvantage of overwriting the prototype is that the constructor property no longer points to the prototype, so we have to set it manually. Hence this line: constructor: User Ehm, actually that's not a problem unless you're overwriting the prototype with an instance of another object. In the following example it's necessary : function Person() { } function User(name, email) { Person.call(this); } User.prototype = new Person(); User.prototype.constructor = User; However, in your example it's actually not necessary to do this as you're not overwriting it with an instance of another object.
&gt; Yes, because this enables straightforward string interpolation. I feel like we're going around in circles, and this may be a fight over opinions, but if I understand correctly, you're backing up my point. PHP and Perl use the dollar sign notation to denote variables, and, appropriately, use it in interpolation. However for JS this would introduce the first mandatory use of the dollar sign, which doesn't help in any particular way. I think we're done here though, I can't imagine this debate coming to any real conclusion.
I think you're using it wrong. with this function, an object passed in as the first param that has a foo variable will have it's foo variable bound to the local variable bar. You need to reference bar to use it. function g({foo: bar}) { console.log(bar); // not foo } And now... var bar = { Hello: "World!" }; g({ foo: { foo: bar } }); logs { foo: bar } g({ foo: bar }); logs { Hello: "World!" } g(bar); logs nothing, bar does not have a foo.
EDIT: I helped.
typed classes will boost performance, so will tail end function calls, arrows, destructuring, iterators &amp; generators, maps &amp; sets and subclasses. Pretty much everything in here will have a performance boost one way or another.
haha, awesome, thanks. Will edit.
Chromebooks?
It will in a few places, especially once people get used to the lambda style functions. myArray.map( function (foo) { return foo.bar; }); becomes myArray.map(foo =&gt; foo.bar); plus with destructuring function swap (a, b) { var temp = a; a = b; b = temp; }; becomes function swap (a, b) { [a, b] = [b, a]; };
Rich-text editors in web-based content management systems. Your Wordpress blog, your Ebay store, etc.
Performance slows to a crawl with very large documents. Try copy/pasting [The Metamorphosis](http://www.gutenberg.org/files/5200/5200-h/5200-h.htm) into it. And that one's not even very big as books go.
I think I'm totally clear on why this is happen, like I wrote already: You want to make a **deep copy** of the object. And I stick to it: This is the wrong approach for it, because it's unnecessary work (the serialization). Please read my other reply: http://www.reddit.com/r/javascript/comments/1zi8dl/json_object_properties_passed_by_reference_quick/cftxexc And please also notice: I didn't write "what is this for?" - I clearly wrote "Isn't there a better way?", meaning I'm fully aware of what this is doing.
Doesn't honor OS-specific keyboard shortcuts. ``Ctrl-A`` is select-all even though I'm using a Mac so it should be ``Command-A``.
There's no concept of a point-format: I'm able to select text and turn it bold by pressing ``Ctrl-B``, but I would expect that if I'm typing plain and then press ``Ctrl-B`` any subsequent text I type should be bold.
Copying rich text and pasting elsewhere in the document pastes as plaintext, losing the formatting from the original. (OK, this is my last bug report for now. :) Sorry, I pretty much implemented a tool like this at my last job and know all the things that drove me crazy about it!)
http://js1k.com/ Assuming you allow obfuscated code.
Oops. I meant that to go to op. I will move it. However, I think based on what you said, you didn't read what I said....I am doing the opposite of condoning that approach and showing the appropriate way to go about it. I will move the original text to a reply to an op. Stupid mobile. 
That is what ``contenteditable`` is for. Problem is that ``contenteditable`` is a pain in the ass to work with. Using the DOM to output the rich text is easy until you have to implement the idea of "where is my cursor, what is my selection state, what happens when I press a key?"
I know what contentEditable is. I'm talking about doing it using the DOM and no contentEditable. &gt; Using the DOM to output the rich text is easy until you have to implement the idea of "where is my cursor, what is my selection state, what happens when I press a key?" Those problems remain regardless of whether you use canvas or the DOM for rendering. 
The top menu is part of this page, not part of the editor library itself. You could implement the top menu in a different (responsive, accessible) way. The text editor itself isn't accessible in its current form as demonstrated on this page, but one could conceivably make it so by putting in a ``div`` element that "mirrors" the text in the editor and is set to display only to screen readers. That said, I'm not sure I see a use case for making a WYSIWYG rich-text editor accessible for blind users. A Markdown-based editor seems more usable all around.
Without using the ``contenteditable``, how do you put a cursor into a DOM element?
More like *where* do you draw it? Given some arbitrary rich text, given different fonts, different browsers, different resolutions... Can you write a method to take a single integer, which is your character position, and output the x/y coordinates where said blinking line should appear? And similarly, how to convert the x/y position of a click into a character position? The DOM doesn't let you query information down to the bounding-boxes of specific lines and characters. Doing it with a canvas makes that simpler. Of course you know the height of each line and the width of each character and the bounding-box of the elements you're interested in, because you drew them yourself.
https://developer.mozilla.org/en-US/docs/Web/API/Range.getClientRects If I remember correctly there are also some browser specific methods floating around to map a point to place in the DOM down to character level. 
Typed classes will allow the javascript compilers to structure the compiled code better. Typed classes will likely be WAY faster.
Doesn't work with a [collapsed/point selection](https://developer.mozilla.org/en-US/docs/Web/API/Range.collapse). Example with content on that page: var range = document.createRange(); range.selectNode(document.getElementsByTagName("p").item(5)); rect = range.getClientRects(); // ClientRectList {0: ClientRect, /* ... */ 9: ClientRect, length: 10, item: function} Versus... var range = document.createRange(); range.selectNode(document.getElementsByTagName("p").item(5)); range.collapse(); rect = range.getClientRects(); // ClientRectList {length: 0, item: function} When you're just using the standard DOM Range manipulation, it's only really useful for a selection that contains text, not a point cursor.
Wow, really great feedback! 2) Point taken, I made it more obvious that the live demo is actually a live demo. For 1) and 3), those are 100% valid criticisms, but I'm not sure I want to force default behavior onto users. As it stands, you can already do those things, you just have to use your own stylesheet. (That is, don't use the default stylesheet, then add classes with the styles that you want to whichever elements you want. The script doesn't care about added classes.) Something like: &lt;span class="hoverhand"&gt; My cursor changes to a hand on hover without being a link! &lt;div class="iltt warning"&gt;My background is yellow!&lt;/div&gt; &lt;/span&gt; Assuming you've set the appropriate styles for .hoverhand and .warning in your own stylesheet, you're good to go.
If you want to know where your P is, you already have element.getClientRects() and bunch of other ways of looking up the top, left, width, height. ( https://developer.mozilla.org/en-US/docs/Web/API/Element.getBoundingClientRect ) range.getClientRects() is your way out when you want to know where characters inside text nodes have been rendered on the screen. 
``getBoundingClientRect`` uses ``getClientRects`` and produces a rectangle containing all those rectangles. With a collapsed range, ``getClientRects`` returns an empty collection and ``getBoundingClientRect`` returns 0/0/0/0. var range = document.createRange(); range.selectNode(document.getElementsByTagName("p").item(5)); range.collapse(); rect = range.getBoundingClientRect(); // ClientRect {height: 0, width: 0, left: 0, bottom: 0, right: 0â€¦}
This question doesn't require a loop at all to get the answer. function sumRange(x, y) {return (y-x+1)/2*(x+y);}
Also on a retina screen the font is blurry.
I love the idea but you damn near murdered my Core2Duo processor. I only glanced at the source; is it modular enough that I could experiment with taking out parts of it for a lightweight fork?
I guess I meant just a small amount of code. That site js1k.com that /u/more_excercise posted is kinda what i was talking about. (Sorry new to JS!)
Here is a proof of concept from 2006: http://www.fluffy.co.uk/stediting/
Sorry, I'm away from my codebase until late tonight but just wanted to throw out there: So for my actual code if I do something like response.title = 'random other data'; response.cards = [ {"value":"ace", "data":"non reference type data"}, {"value":"king", "data":"non reference type data"} ]; //does this work response.example = Object.create(response.cards[0]); //or do I have to splice the cards array first to get a copy? response.example.value = "queen"; This should evaluate as: response.cards[0].value //should equal "ace" response.example.value //should equal "queen" This would not work if the cards had **both**: * another property that was a reference type attached to it, * and I wanted to modify that reference type value.
That's a clever approach, but it isn't really putting a cursor into a DOM element--it's breaking one DOM element into several and putting a cursor between them. You'll run into some serious memory problems before long, and you're changing the semantic content of the document when the user doesn't expect you to. After doing your binary-search-span-splitting, you could re-merge all the spans left and right of the caret, so each paragraph contained at most two spans at any given time outside your selection handler. And you could also use a reserved class-name for the spans your split routine creates, which you collapse into a regular old text-node on focus-out or save. This would let you preserve spans that existed in the original document. That wouldn't be a bad approach.
/r/ProgrammerHumor ?
Spent lots of times battling with CKEditor, so I totally get the "Why?". I hope you'll continue with the project.
It doesn't matter that it's a ``p``--I was using that only to actually get some text on the page selected programmatically. What matters is that if you have a collapsed range (that is, the start and end position are the same) then neither ``getBoundingClientRect`` nor ``getClientRects`` work, because the standard DOM Range functionality has no concept of position/bounds for a zero-length selection.
what is the need for this? 
This is a shallow copy, so be careful.
I took this post as a challenge. Here's my result! Been a while since I did this exercise :) ...[plunk](http://plnkr.co/edit/saZ6fD1h1o2HIEC1S4ft?p=preview) (be patient, it's quite intensive)
Sharing values between JS and CSS
&gt;absurdjs.com Yes, this is absurd..
Objects with hidden class are also typed classes, I still dont see the difference.
 alert(1);
&gt; I'm guessing this is at a fairly early stage and there is probably a lot that can be done to improve performance. Probably, but contentEditable is essentially native so it is very fast. I doubt that a &lt;canvas/&gt; could beat it. 
If you can manage to always use hidden classes correctly then sure, there isn't much of a difference. But typed classes will still be WAY better for trying to hit that benchmark.
Why!?
Really wish I read the warning first, you managed to lock up my poor old laptop (from 2003!) for 5 minutes before I had to do a hard restart.
[Image](http://imgs.xkcd.com/comics/standards.png) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=927#Explanation) **Stats:** This comic has been referenced 282 time(s), representing 2.3902% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcdcomic/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me)
 var style = getComputedStyle(document.getElementById('id')); Tada. Even easier with jQuery.
&gt; The main principle with Object Oriented Programming (OOP) is the use of Classes... There are no classes in JavaScript. 
No. This is for doing things like sharing margin sizes between your stylesheet and your JS layout code.
***Does Carota output clean, valid HTML5?*** *Or only to Canvas?*
I prefer `console.log(1)`
I don't know what is worse: the idea of having auto-played music, or the actual code.
Im an etherpad dev, agreed its tough but this problem is solved.
I hope you don't think it out of place to bring this up but after using Angular for 18 months that looks incredibly verbose. For example, the toggle feature in angular doesn't even require code, it would be simply: &lt;button ng-click="hidden = !hidden"&gt;Show / Hide&lt;/button&gt; Binding an element to that value would be similarly trivial: &lt;div ng-hide="hidden"&gt;Shows or hides&lt;/div&gt; 
This is cool, i hope it finds use cases it's looking to solve. You can do really real time collaborative rich text web standards based editing in etherpad. Http://etherpad.org All web standards based.
Check out CoffeeScript and ToffeeScript if you need to make heavy use of OOP with JavaScript-based system.
Just thought I'd point out that this is almost exactly what GitHub's Atom editor is doing, but on an even larger scale. I've not noticed any memory issues with it so far, and it's pretty zippy. As for semantic content of the document: 1. They're editing a text region. There is no semantic relevance outside of it being content of an editable text region. 2. Have you seen the html that contentEditable creates? Some browsers still generate &lt;font&gt; and &lt;center&gt; tags, many use divs to create line breaks, and none of them know anything about html5 elements. Semantic html goes out the window the instant you mark the element for editing.
It looks like it outputs an object structure which one could easily use to generate clean html.
I really like the storage method (the json). That medium would be much better suited to convert to html then trying to create the HTML on the fly. The number one issue with WYSIWYG editors is the mangled html they spit out, looks like you've solved that issue by introducing a nice json medium. Speed up the front end and write a json to html converter and this new system might be come defacto.
&gt; The main principle with Object Oriented Programming (OOP) is the use of Classes (Functions in JavaScript) to create objects, and that objects are implemented in a manner that allows them to adopt Inheritance, Polymorphism, and Encapsulation. We are only concerned with Inheritance and Encapsulation, since only these are applicable for OOP in JavaScript. Umm, what? Ignoring the other things wrong with this, polymorphism is FAR more important than inheritance in OOP, and is clearly possible in JS. I would argue that inheritance is just the combination of polymorphism and an attempt at code reuse.
And why would you want to do that? If you're applying a layout through Javascript you can just set the margin manually anyway. Or, get the margin through the method I previously posted.
Yeh incredibly verbose, you are saving one whole character with. * &lt;button data-bind="toggle: isHidden"&gt;Show / Hide&lt;/button&gt; vs * &lt;button ng-click="hidden = !hidden"&gt;Show / Hide&lt;/button&gt;
Well no need to be hostile about it. Am I missing something or don't you also have to write the 10 lines of js that preceded the ko example too?
ES6 added classes.
My god that is the most horrible web page I have seen since 1996!!!!!! 
dfgfg
Thanks, very good and practical examples. I know angular has a lot of steam behind it, but knockout looks like it'll play nicer with all the legacy jQuery bits.
The usage of AbsurdJS is first as a CSS preprocessor. I personally write two times faster then with LESS or SASS. My CSS is also pretty small because I'm using a lot of atoms and predefined molecules. The other interesting thing is this http://absurdjs.com/pages/client-side-components/
That's fine, although it doesn't look like using this as a CSS preprocessor would save you much time, it looks like more work if anything aside form a few shortcuts. I like LESS and SASS. I haven't seen many examples though, so that might be wrong. I'm just questioning the other guy's reasoning for using this.
Not if you're computing values based on it.
Uh, why not? You can get, set and do what you want with CSS values very easily.
Right, but let's say you want to compute something based on your fundamental grid unit which appears nowhere in the stylesheet. It'll certainly be a hack to read from the stylesheet itself. Not to mention if you want to generate a static HTML page with these values...
I don't understand what you mean, you can't read from the stylesheet if it doesn't exist in the stylesheet anyway. If the CSS exists then you can easily get it, if it doesn't exist then you're applying it dynamically (like through this) and have the values anyway. This is a library remember, anything this does you can do without it, and it doesn't really change the process you're talking about at all. It's not even meant for that purpose, it's basically a CSS preprocessor.
Yes, you could do this all in JavaScript. There are several frameworks that sit on top of nodeJS that you could use to help you: Hapi, Kraken, Sails to name a few. Most folks seem to start with Express though, and that would be my first choice. It's also the E in the MEAN stack (mongodb, express, angularjs, nodejs). I'd be cautious about using Angular if you're nit familiar with JS tho, it's got a steep learning curve. There are tons of 3rd party libraries in the nodeJS ecosystem to help you. The only caveat is that it might limit your choice of DB which, given the nature of your application, might be the thing to consider first, before choosing your language.
What I'm saying is: it can already, and you only need to worry about the variables that you actually want to manipulate or read.
Does etherpad use contentEditable? aka design mode? 
http://140byt.es - this site is dedicated to what you can achieve in JS with but 140bytes of code.
No, the title is really bad. Ignorance of how `var` works is really bad. Granted, it's an easy mistake to make, but it's attributed to the wrong cause.
Well... There have been contests based on lines of code before, and they consider a breakpoint to be either a `;` or `{` usually. But then that leads to some interesting "hacks" that allow for some really long chains, like: ctx.drawImage( image ).stroke().clear().addShape(...)
Yep
JSHint and JSLint can identify this particular mistake. Use a linter.
javascript is well-known for being quite confusing with regard to the "this" reference. There are basically 4 different times that "this" can refer to something. 1) when a function containing the "this" reference is run by itself, "this" will resolve to the global (window) object var f = function () { console.log (this); }; f() // returns the global object 2) when a function containing the "this" reference is called as a property of an object (this is called the "method" style), "this" will resolve to that object. var obj = { a: 1337, b: function () { return this.a; } }; obj.b() // returns 1337 var f = obj.b; f() // returns undefined (unless the global object, //which "this" will resolve to in this case, has a property 'a') Notice how in the above, when the same function was called in two different ways, "this" was also different. 3) when a function containing the "this" reference is called in the pseudo-classical "constructor" style, using the "new" keyword, "this" will resolve to the newly created object. var Cat = function () { this.meow = 'mrrrow'; } var caliban = new Cat(); // after this expression is run, caliban will be an object //with property meow === 'mrrrow' 4) when a function containing the "this" reference is called using 'call' or 'apply', "this" will resolve to the custom context which is supplied by that function. var huey = {position: 'chairman'}; var bobby = {position: 'minister of defense'}; var greeting = function () { console.log ('Hi, I am the ' + this.position + ' of the party. Nice to meet you, comrade!'); } greeting.call (huey); // will output "Hi, I'm the chairman of the party. ... etc. greeting.call (bobby); // will output "Hi, I'm the minister of defense of the party. ... etc. Notice how the same function was called with two different context objects to reference as "this" (this is how the Function.call() method works), providing different results. So basically, finally, what is happening in your code, is that since d is being called in the method style, as property of c, the "this" reference in the code of d does not refer to the a object, but to the c object. Since c doesn't have a member 'b' to print out, the code throws an error. I would suggest reading "javascript: the good parts" by douglas crockford. It's available for free download [here](http://7chan.org/pr/src/OReilly_JavaScript_The_Good_Parts_May_2008.pdf) as a PDF.
That's a pity. 
Thanks for your detailed explanation. &gt; So basically, finally, what is happening in your code, is that since d is being called in the method style, as property of c, the "this" reference in the code of d does not refer to the a object, but to the c object. Yes, I also had this presumption. Can I use the ".call()"-scheme to achieve my goal? And thanks for your book recommendation.
It didn't really add classes so much as just add some syntactic sugar around prototypes. It's a fairly petty distinction, but I think it's important if you want to know what's going on behind the scenes. Especially since the way classes are implemented is very different from most other languages. Plus, it'll be another 2 or 3 years before most of us can use ES6 anyway.
[What you NEED to know about articles on OOP and Javascript.](http://awesomegifs.com/wp-content/uploads/dead-horse.gif)
Hmm, I mean, if this were actual code rather than a contrived example, I'd say you were in need of some refactoring, but here is one way you could achieve the results you expect, using the concept of function scoping, which is very important to understanding javascript code/references, just as much as understanding the "this" reference. It's quite simple, it basically just means that instead of in languages like C where variables exist while the execution is passing through the certain block (for, while, function body, etc...) and disappear after, in javascript, as in languages like scheme, functions can see the variables defined in the functions that enclose them. This is why we have "alert (b())" instead of "alert (this.b())". The code for the function d (as a property of c) can "see" b just fine even though it's outside the "block scope" as we have in languages like C. Notice how we return an object at the bottom of function a, which you can think of as defining the public "interface" for this object (called a "closure"). Anything that isn't passed out through that object can't be seen when we get an object by calling a(), even though the code for c.d() and b() can see even the hidden variable which wasn't "exposed". The variable "hidden", which is set to 1337, can be accessed by any code inside of a, but outside code can't see it. [Here](http://stackoverflow.com/questions/111102/how-do-javascript-closures-work/6472397#6472397) is a sweet sort of story-book-like explanation of closures. function a() { var hidden = 1337; var b = function() { alert('This is b!'); } var c = new Object(); c.d = function() { alert(b()); } return { b: b, c: c }; } a1 = a(); a1.b(); a1.c.d(); // will first call b(), and then return "undefined" to be sent to the alert call inside d()
Thanks for your input. It makes sense to me. I will try to dig through it.
This looks very interesting! Thanks.
Having never used Plunker, as it loaded I at first assumed you were claiming to have written a live HTML/CSS/JS editor with Github integration etc. etc. in 50 lines and was about call you a liar. Then I noticed the fractal appear!
What if I tell you that with Absurd you could actually code your CSS. You are not writing it but coding it. I.e. because everything is JavaScript you are able to add variables, functions, objects, classes, extending, inheritance ... whatever you need to make your life easier. You may write a function which returns a bunch of definitions. Like this for example http://absurdjs.com/pages/css-preprocessing/organic-css/molecules/#animate-small-class-prop-values-string-object-array-small-
From the title, I was thinking it would be something like (and thought maybe the author was crazy): var a = 1; var b = 2; var c = 4; 
That was exactly we picked knockout over angular for an app that we did. We had been dependent on jquery for a pretty long while and didn't have enough time to implement a framework like angular properly.
Your comparison function doesn't make sense to me. What's the point of being able to - in principle - return a result where multiple elements are true? -1, 0, 1 as a return value would cover all meaningful cases and perform a lot better.
I see your point. I'll refactor that.
What I mean is that if using function MyClass() changes to Class MyClass() I dont see a performance boost, just new sintax
Yeah, I think that would be a better (simpler) implementation of a heap. I knew removing at index 0 would be a bad idea. Initially I thought about writing a linked list to use behind the scenes, but decided against it (maybe a wrong decision). I'll check out the circular array stuff this week and see what I come up with. Thanks for your input.
It's kind of hard to lose credibility when you are right, though... JavaScript only having one numerical type, and it being a float point double *is* shit. The rest of the language overall is great, but this part is a disaster, especially without operator overloading.
Thanks. The only reason I'm interested in JS is that it's the door to so many potential customers. There's no point in me developing a native app when I can develop a web app. I could write all the back-end stuff in C, but I was wondering if I could lean on JS for everything. EDIT: Actually, what I'm aiming is top performance. I want to choose a stack that won't require me to completely re-write some parts of it just to get useable performance. I haven't made projections, but in the event that it catches on really well the graphing app could easily have to handle many thousands of simultaneous connections.
Doesn't socket.io come with exponential backoff built in? 
I didn't say that. I believe that developers need to know that floating points have different behaviors than ints, at a minimum. I don't believe that we all *must* know why and how these behaviors arise.
This was my thinking as well. Making a web app properly accessible is difficult even if you stick to ordinary DOM elements, and I can only imagine something like this will make it even more complicated. My wife has a condition that makes typing painful, so she tries to use DNS as much as possible. It's shocking how bad that experience is on many web apps. Google is one of the worst offenders.
What is the definition of class you're using? As far as I'm aware, the term class does not imply any specific semantics, and semantics of classes across languages varies wildly. Would you contest that Ruby classes are classes in the traditional sense? Common Lisp? Smalltalk? In any case, no one helps anyone (especially newbies) by saying JS doesn't have classes. It clearly has classes. The keyword is there, and you can use it where available. It is used for the same sorts of tasks classes are used in other languages - you add some methods, you create instances. Getting into the details is great, but get into the details that are important rather than splitting hairs about whether JS class semantics are similar enough to "other languages" to warrant calling them a class.
I made a snake clone in 32 lines a while ago: http://jsfiddle.net/8Rqcy/5/
You're right that the definition of a class is fairly broad, which is why I said that ES6 didn't add classes. Everything that can be done with ES6 classes can be done in previous versions of ECMAscript. ES6 just added some syntactic sugar to make it easier for beginners. And I never said that Javascript didn't have classes, that was the guy above you. I said that the distinction in how they're implemented is important, which it is. Take the code below: class Simple { constructor() { this.foo = 1; this.bar = 2; } getFoo() { return foo; } getBar() { return this.bar; } } var simple = new Simple(); console.log(simple.getFoo()); console.log(simple.call.getBar({ bar: 5 })); If you didn't know that Javascript classes were just a fancy wrapper for normal Javascript functions, and not implemented in any special way (like, for instance, Java classes), it's likely that you're not going to know what the code above outputs.
Okay, that sounds more reasonable. But then again, by that reasoning, there's no reason we *must* know anything, really. This is about things that are good to know. I always feel better knowing the "why" or the "how" beneath some higher level concept that I know. If you don't then that's just you.
I think it's more that we don't have to know *everything*. I'm like you and want to understand everything I can get my hands on. However, sometimes I have to set something aside if it isn't relevant to my work or life. Is it important for me to understand possible rounding issues with floats in JavaScript when I'm calculating half-pixels? Not really. Do I want to know why it happens? Sure, but I can read into it later, and no one is going to blink twice if I can't explain exactly what's going on.
Thank you. Furthermore: var a = b = c = d = 10; creates window.b, et al no matter where you do it....including copying and pasting the example and just running it in REPL or devtools...cause that is how javascript works. 
Besides the other comments that note how this is just wrong I'd like to point out another way to do what the author is intending here (and I what follows best practices imo and that you'll see more commonly in modern js frameworks) is to do: function foo() { var a = 10, b = a, c = b; } provided you are looking to do that. The point is you can use a comma separated list after the var keyword but you can also still include the variable initializations, not just declarations. Since variable declarations are always hoisted in javascript, it is considered best practice to declare/init them as much as possible in the first line of the function. 
The difference is that specifying the class to the compiler will allow the compiler to do some pretty fancy things. Hidden classes are nice but they can never be as fast as typed classes.
&gt; Is it important for me to understand possible rounding issues with floats in JavaScript when I'm calculating half-pixels? But if would be if you were working with currency and were calculating half-cents or even half-dollars... Maybe not the "how", but the fact that it won't work. This article is more than just "it won't work, trust me". It explains why it doesn't work.
daily != monthly. Compilation error! Aborting...
madcapnmckay is correct, this may seem verbose mostly because it is a "binding handler" that wasn't provided out of the box with knockout, and the main purpose of my post was to give a couple of examples of "convenience" bindings that provide some of the functionality that I wish *was* included with knockout... and to show how easy it is to create them. Angular is great, but knockout and angular are not after the same goal. Knockout is incredibly light-weight, and has builtin browser compatibility all the way back to IE6. It can be a very useful option. IMO, angular more or less requires you to structure your whole application like an angular app... where as knockout can very easily be sprinkled into an application. (fwiw, I like and use both angular and knockout regularly)
Yes but many people don't use socket.io
It's a daily challenge though. You get a theme every day and are supposed to make something around that theme. 
That's... a bizarre hack. Out of curiosity, have you tested this in browsers? For some reason, I think I have read that one browser (probably IE ;-) strips or modifies comments in Function.toString. (Obviously this is intended for Node.)
Some old versions of Firefox stripped comments from Function.toString, because they actually decompiled the function to produce the output. There's no particular guarantee in the standard that the output from toString will return the code without any changes, just that it'll return a FunctionDeclaration that is equivalent to the function.
Very clever. I can't wait for ES6's template strings -- they're going to be awesome. Check out http://www.slideshare.net/domenicdenicola/es6-the-awesome-parts starting at slide 23.
I've come to the conclusion that the rule of thumb for whether coffeescript can be used in a project, is whether an application written by somebody other than myself will need to require() this code to use it. There is one exception I have encountered and that is that [state.js](http://statejs.org/) is written in literate coffeescript, which considering the complexity of the subject matteris the only realistic way it could ever be documented in a clear and consistent manner. 
Yes, it's mainly intended for Node.js. Though I just tested and it does work in latest Chrome, Firefox &gt;=17, Safari &gt;=4, Opera &gt;=9, Internet Explorer &gt;=6. As for minification, you can use `/*!` instead of `/*` to preserve the comment.
This article also gives a good overview of template string: http://www.2ality.com/2011/09/quasi-literals.html
That's one tough game, but super fun and brings me back to the old Flash game, Line Rider. On iOS7, it was a bit annoying having to swipe up to hide the browser chrome, I wish there was a better solution to this. I imagine adding the game to your home screen would fix this, however. Good work!
Looks great!
That's excellent. I'm really excited to have the minimized functionality!
You crazy bastard. 
These are called "fat arrows"? I've always called them "double arrows". That's what they're called in PHP, anyway. I think I'll stick with "double arrow".
Furthermore, no. Look closer. Edit: oh wait, maybe the author meant that the first example will also create global variables but Id really be confused as to how moving it inside a function "clarifies" that poimt. I'm at a loss, this is possibly the most useless article Ive seen posted on /r/javascript and thats saying something. 
Interesting, but I tried about 30 "tracks" using the "random" function, and they were largely garbage. Some were incredibly well drawn visually, but I didn't find a single one that had any significant playability or enjoyability at all.
Thanks! We still have some more work to do but think we are off to a decent start.
Well that is what you sometimes get with community created content, especially if you cycle through 30 random tracks, although I am a little surprised as we currently have sourced top/popular Free Rider tracks. Give [dirts](http://www.freeriderhd.com/t/4692-dirts) a try for a simple / well done track that requires you to do some jumps/balance with a boost for good measure, can be beaten in less than 10 seconds. Another short one is [Smooth and easy](http://www.freeriderhd.com/t/6682-smooth-and-easy) [Trending](http://www.freeriderhd.com/trending) also has a list of popular tracks as voted on by the community 
My general feeling about long strings is that if you have a long string it should probably go in markup anyway.
You need: - 3 questions for setup - a way to call them at `random` for execution So you'll need to think of ways to: - store and name these quizzes so that they can be called by... - a `random` method native to javascript 
try the following site https://developer.mozilla.org/en-US/ and check out Math.random https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
JavaScript has built in support for multiline strings. I think you're thinking of Java, which has a more restrictive syntax. &gt; You can also escape line breaks by preceding them with backslash. The backslash and line break are both removed from the value of the string. var str = "this string \ is broken \ across multiple\ lines." console.log(str); // this string is broken across multiplelines. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#String_literals
Use Camtasia or similar software. 
It may have support, but it doesn't mean it's good. I think the comment way + regex is actually better! Also, &gt;I think you're thinking of Java ....no, he's not..or else he wouldn't have written a *javascript* module.
Thanks for the 10/10 much appreciated! We definitely put consideration into scaling while designing / building out the web app, not only did we put effort into making FRHD to look good but we also put effort into making it run good behind the scenes. Some details on FRHD deployment for those interested but warning unrelated to javascript: - pushed off majority of static content to cdn, we could likely push off a few more things such as Templates we use for page rendering but we can look to optimize further once the traffic comes (hopefully it comes, make it happen reddit! jk not expecting it to come from reddit peer feedback is much more important) - FRHD is hosted on aws (not that that alone will make it scale but we have next step scenarios planned out) - our backend consists of elb loadbalancer, apache webservers running php, 1 mongodb and memcache servers - with our current set-up we should get a fair amount of mileage And like you said those are good problems to have so hopefully those problems start to occur at some point.
I don't like Dojo because I've yet to see a clean way to organize a large code base and there is no information about how to do so. Compared to AngularJS there is not a clean separation of layers that are easily testable.
So if I understand correctly, you're saying you might need to define a variable, let's say foo. But on one of the pages the element needed to define the variable isn't present? //page A var foo = $("#foo-elem").position().top; //foo == 500 //page B var foo = $("#foo-elem").position().top; //TypeError: Cannot read property 'top' of null Here's why: jQuery "$()" is returning you "[]" an empty array, beacuse the element doesn't exist. And you're trying to access a property "top" of null which doesn't exist, hence the error. How do we fix this? We use a [falsy statement](http://webreflection.blogspot.ca/2010/10/javascript-coercion-demystified.html) (a statement which is false after type coercion) We know that 0 == false in javascript, and [].length == 0 so we can do this to test whether an element exists: function bar(elName) { var $el = $(elName); if(!$el.length) return; //do whatever you want to do with foo } So the body of this function below the if statement will only run if foo is present on your page. If foo is multiple elements you'll need to use the jQuery .each() Is this what you were looking for?
I hope you don't run into too many problems with MongoDB ! I've heard mostly bad things about it and I prefer to use Redis or PostgreSQL.
`Array` and `Math.random`
&gt; I would argue that inheritance is just the combination of polymorphism and an attempt at code reuse. I wish the terms "is-a" (inherits membership in a formal class) and "was-a" (inherits implementation) would make a comeback. They simplify understanding greatly.
Awesome, this will make it much easier to port my 1990s CGI scripts to node. :)
The real problem with that syntax is that you don't actually have multiline strings, you have a line-continuation. This means that newlines aren't preserved (one of the main reason for multiline strings in the first place). To write a actual multiline string using the line-continuation character, it would look like this: var str = "this string\n\ is broken\n\ across multiple\n\ lines."; // or, if you prefer var str = "this string\ \nis broken\ \nacross multiple\ \nlines."; This is definitely *not* an improvement over single-line strings, it's highly error-prone, and is still almost impossible to read. It's pretty much the same as breaking up the string, as far as readability goes: var str = "this string\n" + "is broken\n" + "across multiple\n" + "lines."; Arguably, it's better to break it up, because at least it's obvious at a glance that those pieces get concatenated.
Are you OverZealous from codewars? 
That I am!
I was blown away by this. You thought of nearly everything. Absolutely awesome. The only thing that would be cool (and you might already have it) is if I can race my friends in real time. 
In ES5, nobody calls them a class. Period. Calling them a class is being intellectually lazy. It's not splitting hairs, they simply are not classes.
Cool, man! I'm surprised I caught that.
The physics engine itself is unique to Free Rider, it does not use box 2d or anything like that. We still have some more optimizations to make to get the best performance possible on lower end devices. Profiling tools in Chrome definitely help a lot.
We plan to build out racing aspect of the game in a couple months once we get some other game features released that we have in the works. Realtime would be pretty cool, right now we only have added support to asynchronously race friends (which may be enough). You can share your race link on any track that you have completed. For example, [Race the top 2 players in Dirts](http://www.freeriderhd.com/t/4692-dirts/r/tinmew/asierro) if you know your friends username you can build their race url but they must have beaten the track. Thanks for the positive feedback!
Yeah, I'm "OverZealous" pretty much anywhere I can be. I didn't use Reddit until more recently, so I couldn't get my preferred handle. [I've had the domain since 1998, though!](http://www.overzealous.com) :-)
I guarantee you the Google team will find better ways to compile code if they can have typed classes up front. Why do you think JavaScript still doesn't hold up to C# or Java.
I wrote my own version of this to help out with our node framework which transpiled by Google Tracur. Promises was the hardest thing to articulate. https://github.com/ConnectAi/cornerstone/blob/master/docs/es6.md
&gt; I don't think you'll make a good faith argument. ... &gt;You'll probably just keep changing the topic and go to the next talking point on your list each time I reply. ... You should research cognitive distortions and work on your mental health. Your arguments are reasonable, but you are simply a prick that I don't want to deal with, so the discussion ends here.
As I woke up, I thought about my problem and I came across a workaround I use in other languages. I declared a "root"-var in the main function / class and assigned 'this' to it. Manipulation works also since objects will be passed by reference instead of value. function a() { var root = this; this.b = function() { alert('This is b!'); } this.c = new Object(); this.c.d = function() { root.b(); } } a1 = new a(); a1.b(); a1.c.d(); This works quite fine for me. 
I'll be glad if you share your thoughts about the secure issues. Are you referring the eval-liked approach.
Backslashes? Ew..... I just wonna copy and paste!
Yeah.... This doesn't work so well when combined with a minifier.
Great! This is another solution people sometimes use, right on. You'll find amongst the javascript community the convention is to use "that" instead of "root", but for your own purpose here, it's a workable solution as well if you are committed to the pseudoclassical "new" syntax :)
They need some sort of tweak! Ah, replace the text \n with some symbol like Â¬, minimise it, and then change it back!
&gt; As for minification, you can use `/*!` instead of `/*` to preserve the comment. http://www.reddit.com/r/javascript/comments/1znt23/multiline_strings_in_javascript_by_abusing/cfvclay
Cacoon is for mobile apps - I make in browser apps! But I appreciate it :) And hmm thank you, ill look into and see if its better / what else they implement!
You should definitly take a look at auto it that language is designed to automatize task like opening a window clicking, sending keyboard input to a specific windows. I had written a lot of small bots for several games using that method http://www.autoitscript.com/site/autoit/
PHP's "=&gt;" is something entirely different. In ES6 or Dart, they are usually called "fat arrows" or "fat arrow functions". E.g. Addy Osmani, Kangax, and Crockford use this term. [The proposal](http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax) used the term "arrow function". I recommend to use "fat arrow function" or "arrow function". That's what they are called in ES6.
Come one guys ... why you think that this is a spam. I wrote a blog post for something which is interesting for me. If it is too simple or stupid for you - ok good. But please don't mark this as a spam. I'm not trying to sell something. I'm just searching for opinions. 
Protip: ['this string', 'is broken', 'across multiple', 'lines.'].join('\n')
To me as a JS/Python dev "double arrow" sounds like the bit shift operators (`&gt;&gt;` and `&lt;&lt;`).
FTR, I organize the competition. I'm only trying to give attention to demos that might inspire or impress people. Okay, not counting flappy dragon :) It's not like I've put all 50+ current demos up here. What'd be the best way to do this otherwise? Just in a comment feels a bit wasted?
Love it.
I'm not sure the solutions posted will help you. BrightCove tries hard to keep their files hidden-- but that won't stop us! Download RTMPDump from here - http://rtmpdump.mplayerhq.hu/ You'll want to execute the following line: rtmpdump.exe --rtmp "rtmp://cp81303.edgefcs.net/ondemand/" --playpath "mp4:brightcove/35121342001/201403 /3541/35121342001_3293378397001_207-Avetts.mp4" -o Avetts.mp4 It will save the video as "Avetts.mp4" If you need help learning how to use the command line or are using a system that doesn't support this program, feel free to ask for more help. But Google is your friend!
Several answers to this, depending on what you are trying to achieve : -greasemonkey + javascript: if you know all the domains you're gonna browse, you can use the greasemonkey firefox plug-in to run arbitrary javascript on those pages. This way you can programmatically click links (trivial using jQuery, for example) and close some windows automatically on predefined domains. The upside to this solution is no need for external software, everything runs into Firefox. The only downside is you'll have to learn greasmonkey's API (permissions, manifests etc...) on top of normal javascript, but it can be useful in quite a lot of ways and it's not too hard. -autoit, powerful and easy to click on predefined locations, hard to interact with a browser which is not IE. good choice if you know VB and/or find a script which already does what you do. The scripts can compile into standalone executables which you'll run alongside your browser. -Java(robot class) or .net if you're a windows guy (win32 api sendInput interop) if you're a programmer. By far the hardest but also the most powerful because you'll have libraries for accessing everything from OCR to memory and build a full blown robot
Excellent, thank you.
Thank you. I looked into the solutions mentioned above and got nowhere. 
Fat arrows are nice in OO code where `this` is relevant and go well with the ES6 class syntax because of the lexical this. Also they cut down syntax cruft of anonymous functions (as you save a few braces, parenthesis, and two big keywords). This is also nice with stuff like promises, underscore/lodash/lazy.js etc.
How old are the devices are you targeting? Canvas is pretty fast for most mobile phones these days, and will probably be faster than DOM. The following blog post is almost a year old. Canvas on mobile has only improved since, and many phones now support WebGL. http://www.goodboydigital.com/to-dom-or-not-to-dom/ Anyways, I'm sure it would be useful to some. :)
I've only heard of them as 'rocket'
I'm sorry but two way data binding doesn't scale for larger applications. Been there. Done that. 
But the point is, you'd need to know what markup will be generated by the directive/component. I feel the same way about web components as I do about Angular Directives. They're great for the user that just wants to "drag and drop" a "control" onto a page and supply a few preferences. But just like every time anyone tries to do this, (Microsoft/ASP.net/etc) it completely muddies the water by mixing concerns. I'm not trying to be staunch about HTML validation, but the REASON for validation IS important. Take for instance adding a Leaflet directive in Angular. Before you know it, you've added 15 different attributes to your &lt;leaflet&gt; tag, all of which do not exist anywhere else. What have you bought yourself? Not having to write any Javascript? That's great for Phil McCraken who just wants to use Dreamweaver to set some properties on a component just like he did back in Visual Basic 6 days... but it creates a mess of spaghetti code, that mixes concerns. Business logic shouldn't be mixed with presentation. Perhaps I just haven't seen a good example of how it should be done from the Angular perspective. I will say this though... 5 years ago, we had this exact same technology. They were Dojo's Dijits. You'd declare a dojoType="" and then supply the attributes right there in HTML. People complained that it was a HORRIBLE idea.... and now we've come to the realization that it's AWESOME! I'm completely willing to keep looking at this and change my opinion as "best practices" prove my opinion invalid. I'm just not sold yet on dropping in some sort of abstraction just for the sake of declarative markup.
 grep -rl "require('../old-name')" . | xargs sed -i "s/require\('../old-name'\)/require\('../new-name'\)/g" That works. Or a bit less efficient find . -name '*.js' -exec sed -i "s/require\('../old-name'\)/require\('../new-name'\)/g" {} \;
when i tend to use stuff like underscore and lodash, i take lots of care to never use anything outside of the direct function scope, so that all my chains become a lot more compose-able. I do like that they will hopefully stop people from doing horrible things with this. Like this [pain in my ass](https://github.com/creationix/step). 
enhanced-require can do this, e.g. for test mocking purposes. It's a critical part of webpack.
This. Though harder if you're on Windows.
I think they will port it into WebStorm and other products as they always did.
Needs (optional) checkpoints. Other than that, awesome.
Cool. It works in IE6.
Some of this is speculation, but here's what I've noticed about some odd users, namely, /u/geekz_gm and /u/wtd_, but as I investigated I discovered at least 2 more accounts that are probably linked: * accounts created within a week of each other * most of their comments are in the other's posts (wtd_ comments almost exclusively in geekz_gm's posts) * the domains codegeekz.com and designgeekz.com are favorite postings (see a theme here? "geekz") * found a 3rd account that is suspiciously similar, /u/wtd_gm, but it's gone.... hrmm, wonder why? * the 3rd account was found after noticing that they also post a lot of links from webtoolsdepot.com * another new user, /u/wdpttt, suspiciously posts a lot of links to the geekz sites, as well as webdesignporto.com... It looks like, possibly after /u/wtd_gm got banned, they wisened up and learned to mix in 3rd party submissions with their own so as not to appear like the spammer they are, but the web is easily untangled. I don't have any more time to waste on this right now, but this is all starting to look like a sophisticated spam ring. I'm not sure if it's all the same person, or a coordinated group of back-scratchers, but something is definitely fishy here... the coincidences that I'm uncovering are just too uncanny to be the result of random chance. I think when I get home I'll do a little more digging and see if this is worthy of /r/ReportTheSpammers.
the admins can look into this pretty easily, i'll pass this on to them, thanks!
I've been jaded by declarative compiled languages (java) and eclipse. I haven't seen anything that I would call good code completion for javascript yet, and I know why.
You could write a script with esprima? The grep solution mozzyb posted would be way faster though.
Well that makes a ton more sense. I understand why you posted a few of the entires now :) I agree with /u/treblebass that less threads would be better, and I think the following posts would get quite a bit more positive attention and focused discussion: **I organize the JS1k competition. Here are my personal top 10 so far** &gt; "Whaat? lazyduke's entry isn't on this list?" **JS1k: Entries from returning champions of competitions past** &gt; "I can't believe furry fireflies won 2011, kuvo's barfing dragon was so much more complex algorithmically" **JS1k: Underdog submissions you should watch out for** &gt; "Look at mine too! JS1k: Tulips that bite one another's heads off!" You could do them as self posts, or you could put them on your blog and post the link. In any case, these posts are going to be more fun, and after the first post, people will recognize you as the organizer and give much respect. When I see an individual entry from a competition posted, I immediately think "vote whore." When I see a number of entires posted from a competition, I immediately think "karma whore." But when I see a thoughtfully compiled list of entries to a competition posted by the organizer, I think "I'd better pay attention to this."
Please stop making shitty titles like that. You make us developers look bad.
You could use document.activeElement and if it is the iframe then you know it has focus but you will not know what inside the iframe has focus. I would think that it would handle events for you if you used jQuerys on. If it doesn't then that is sad
I don't see a focus event hook for this editor (or any event hooks, for that matter, save 'loaded'). In the absence of that, I think you've got your work cut out for yourself. With jHtmlArea, you're actually editing the body of that iFrame when you are text editing (via contenteditable? not sure, but likely unimportant). The stinky part is that capturing a focus event on a body tag tends to be pretty tricky (and even worse when you add the iFrame to the picture). I would use a different editor.
Gotcha, so just to be clear the ability to disable checkpoints for those tracks that have them in settings? Would you want this to be a global setting or something that you would set per track?
IntelliJ's code completion for javascript is nothing short of amazing. In my opinion it's better than eclipse's java completion. This is an entirely different class of code completion though.
I saw that many tracks had these triggers placed at certain spots by the track creator (slowmotion, gravity, boost). A checkpoint could be used the same way. Press a key to return to the last touched checkpoint, but the time keeps running normally. Check out Trackmanina, it's basically the checkpoint system they use (placed by track creator, can return to checkpoint or restart completely). The reason I said it needed checkpoints is, that some tracks I played where rather long and difficult. While it's nice to have such high-difficulty tracks, they can get really frustrating. They can befrustrating because you always have to reset to the very beginning of the track, no matter how far you may have gotten before. This causes me (and probably others) to never even finish the track, which is a shame, or quit the game entirely, which is even worse. I thought it would be a nice addition to give creators an option to create tracks with checkpoints if they want to. But other than that I had a blast. Keep up the good work. edit: btw, sorry for my brief first comment, I wanted to leave a commment, but I was in a hurry
In firefox when you select the doc to view, the iframe refreshes with the selected doc in the viewer, but IE will not ever change from the default doc.
Thanks for the clarification as well as taking the time to add the original comment, it is appreciated! Track creators currently have the option to place checkpoints, so those tracks without checkpoints / difficult was intentional by the creator. What we can and have planned to do is making track sorting / filtering better based on track types: - with checkpoints - range of time to complete - etc That should help. Community generated content can range in difficulty and quality, our challenge is to provide better filtering tools so that players can find the tracks that they are most interested in playing. This gets even more challenging when supporting multiple devices. Thanks for referencing Trackmania, have not played that game before will check it out. Thanks again for leaving a detailed response! 
Wow that is unbelievable! /s
There are some issues with the validity of the HTML document; IE may be having issues with them. * The &lt;meta&gt; tag needs to go inside the &lt;head&gt; tag, not before it. * It's **http-equiv**, not **http_equiv**. And also, that *has* to be lowercase (not **HTTP-EQUIV**), because you're using XHTML (as specified by your doctype definition). (Regular HTML is case-insensitive, but remaining consistent anyway is good for readability.) * You need to have a &lt;title&gt; element inside the &lt;head&gt; element. (~~It's usually good to have the &lt;title&gt; element first, followed by any meta tags that affect rendering, such as *charset* and *X-UA-Compatible*, which are then followed by anything else.~~ Edit:The encoding declaration (*charset*) [should come first](http://www.w3.org/International/questions/qa-html-encoding-declarations#quicklookup); I once had a problem where putting the title at the very first was the fix, but I don't think it's globally the best solution.) * For your script tag, do not use **&lt;script language="javascript"&gt;** -- instead, use **&lt;script type="text/javascript"&gt;**. (The former is a very outdated version, that does not work with pure-standards rendering modes.) Fix all those issues, and then see if you still have trouble with IE. (If you do, post a reply to me and I'll take a second look.) As a bonus, fixing them may slightly improve performance in Firefox.
There are no technical details in this article.. much disappoint.
True enough I guess, but only because many developers don't know how to use PowerShell. foreach($file in Get-ChildItem -recurse *.js) { (Get-Content $file) | foreach { $_ -replace "require\('oldname'\)", "require('newname')" } | Set-Content $file }
If I'm looking at it correctly, you're trying to set an embed as a child of an iframe. I'm not sure that's even valid and in this instance, isn't even necessary, so just get rid of the iframe altogether. Second, you're embedcode variable has an iframe closing tag. What's happening is firefox is using this code &gt; document.getElementById("external").src=inputurl while IE is using &gt; document.all.external.src=inputurl The latter only works for changing an iframe src and here, you're trying to change the embed src. document.getElementById works just fine in IE9, so get rid of the document.all check.
Using light gray as the default color of a button is a bad idea. Gray is the universal color of a disabled element. Beyond that it looks decent, but doesn't offer anything that makes me want to move away from Redactor.
Nope. :'(
Webstorm has a nice refactor feature.
Yeah, that's most likely not going to work because the actual iframe doesn't take focus, the elements inside of it do. To actually get the iframe you could use this: &gt;$('iframe').contents().find('body').click(function() { &gt; console.log('test'); &gt;}); This should at least allow you to tell if the iframe was clicked on. You have to account for the rest of the editor as well, but it shouldn't be as hard for that. Hopefully you can somehow make that work.
unfortunately that did not work. thank you for taking the time to look at it. the iframe closing tag was another transcribing error.
But what about for March?
Cool to hear it's loading faster. I did some more testing; I haven't yet found the source of the issue, and have to stop for now, but here's additional things I found: * In your &lt;a&gt; tags, you're missing some single quotes (though it might be more transcription errors). * height"400" should be height="400" * When testing my altered version of your code on Firefox 27, I kept getting "ReferenceError: jumpto is not defined". This may be due in part to addons on my end, but I do know that *href="javascript:..."* is frowned on in some cases. You might want to switch to *&lt;a href="#" onclick="jumpto('thirddoc.pdf');"&gt;Third Doc&lt;/a&gt;* and see if anything changes. * Also, take a look at justindmyers comments - he's likely on to something.
&gt; unfortunately that did not work. thank you for taking the time to look at it. the iframe closing tag was another transcribing error. No problem, just note that you're missing some single quotes in the anchor tags, which could be throwing off IE. 
is your end goal to show a pdf in an iframe? there is no need for any js to do that... &lt;a href="pdf.pdf" target="iframename"&gt;pdf&lt;/a&gt; &lt;a href="pdf2.pdf" target="iframename"&gt;pdf2&lt;/a&gt; &lt;iframe id="iframename" src=""&gt;&lt;/iframe&gt; 
That is a interesting idea. One of the biggest complaints (from some of the track creators) is that players "steal" track codes and submit as their own. The idea of branching off a track would still give originators credit, so that may be the best of both worlds and stopping players from importing a track code that is "stolen" may be tricky. Will raise it as an idea to the community, I like it!
Thanks for that! I wrote a couple `git` helpers in PowerShell once, but that's the limit of my exposure to it.
I will try this next week when I am back at work. Will this work for more than PDFs? 
this will work with any content. look up "iframe target" on google for more info. i'd ignore dynamicdrive for pretty much anything, as it is about 10 years out of date. the page you linked is talking about ie4 and netscape...
http://stackoverflow.com/questions/8007218/backbone-using-a-different-field-name-for-id 
Very sorry, technical articles will follow
This is the best answer. To OP: Yes, it will work for anything that can normally be viewed in the browser. Not all browsers have PDF viewers installed, and would prompt the user to download the file instead of viewing it. I'm uncertain of the behavior when it's presented in an iFrame-- it may do the same thing.
That... that right there is what tutorials on the web should look like. So many times its "import x library, use y function" yes... that's correct you can do that. But its not very instructional, and it certainly doesn't go toward making people appreciate what the library is providing you. This tutorial is clear, covers all the nitty gritty, homerolls its solution and covers the topic its solving specifically. It introduces new concepts and shows you some of the common, "WHAT IS THIS" mistakes someone learning something new might come across. 
The only reason dynamicdrive was used is because it is the only web/JavaScript website mirrored on the standalone server I am working with. Copy/paste is way easier than retyping a whole script. Thanks for your help, will let you know if it worked.
It should be noted that valid HTML != working HTML. Just because it's invalid doesn't mean it won't work properly. For a VERY long time, google.com didn't have closing body or html tags.
who says its mine?
Keep Calm. And count your brackets.
did he really just say YOLO? 
If you use similar data models for the game as you do in the editor, it may not be that difficult to grab the data from one track and paste it into a new track. You should probably allow it because if the game gets popular enough, we'll probably find a hack anyway. Btw, most fun I've had playing a game since angry birds. 
There are callbacks with promises, but no callback hell. This article is talking more about nested callbacks.
http://softwareas.com/cross-domain-communication-with-iframes
I am not a programmer by trade, but I thought good naming of functions and modularization were always tenets of any good code.
[Docs for idAttribute](http://backbonejs.org/#Model-idAttribute) 
Definitely agree, protecting the track code / preventing branching is likely not worth the effort. Most authors would rather have the recognition and would likely generate better tracks / collaborations because of it. Wow, thanks!
would love to know what they used to build it -- vanilla JS, a framework, etc...
True, it may be my expectations of context based type/method/member completion. They were useful organizational concepts though. Now folks discover self modifying code and call it "neat" :)
more technical posts to follow
They offer a jQuery plugin (non-Wordpress) at a discount for $14. http://codecanyon.net/item/slider-revolution-responsive-jquery-plugin/2580848
This was a better read than the posted article.
Like this? var strings=["Damn pitfall","Bullshit","I'm bad","4","5"] alert(strings[Math.floor(strings.length*Math.random())])
You are going to need arrays and Math.random.
That works perfectly but instead of a one time alert I'd like it display under the death counter and be random each time I click the button. Would I have to add another instance of this.registerClick to call for a string from that array?
This is a great application for PubNub, but don't try to use it for your real time 3D game, you'll be disappointed. Source: I tried it.
No, just add a couple lines of code to registerclick: this.registerClick = function() { var strings=["Damn pitfall","Bullshit","I'm bad","4","5"] document.getElementById('deathMessage').innerHTML=strings[Math.floor(strings.length*Math.random())] this.numberOfClicks(this.numberOfClicks() + 1); }; And add a div for the message somewhere that gets the new value.
I tired dropping it in just like you said but it seems to break the counter. http://www.jsfiddle.net/Mechsican/2Dcz8/22/
That code used document.getElementById which will break if you don't have the id. This solution won't require any changes to your html: var ClickCounterViewModel = function () { this.numberOfClicks = ko.observable(0); this.deathMessage = ko.observable(); this.registerClick = function () { this.numberOfClicks(this.numberOfClicks() + 1); var strings=["Damn pitfall","Bullshit","I'm bad","4","5"] this.deathMessage(strings[Math.floor(strings.length*Math.random())]) }; };
I had no idea I had to use an id. I'm sorry for making you go through all of this to help me with this. Thank you so much.
You're welcome. I found Dark Souls an entertaining game and I'll be sure to check your stream out.
Thank you! I do this sort of promise evangelism precisely because I spent so long wondering "what the hell are these for?" Feels like a lot of people describing them or even advocating for them don't grok them, so the explanations just come down to "like callbacks but less nesty." And nestiness never bothered me, so that's not compelling. Might be because I cut my coding teeth on Scheme, though. Nesty is the norm.
And the final product you made all on your own. http://jsfiddle.net/Mechsican/2Dcz8/59/ Thanks again.
Learning JavaScript by Tim Wright or Eloquent JavaScript are good beginner books. 
[Codecademy](http://www.codecademy.com/) is free and brilliant.
Codeacademy is great if you want to learn the syntax, but it won't really teach you anything about actually building something. Depends on what OP is looking for, obviously. Use both!
This one really helped me in the beginning. JavaScript: The Good Parts 
&gt; Might be because I cut my coding teeth on Scheme oh god.. car, cdr, cadr... parenthesis everywhere... the horror! wayyyy back in the 90's, my first college level CS class was all in scheme.
Hi there, I agree that "The Good Parts" are useless for newbies. The roadmap mentioned by you is great and I highly recommend "JavaScript for Web Developers" by Nicolas Zackas as a learning source. Regards, Sebastian
[Khanacademy](https://www.khanacademy.org/cs) has some nice tutorials on drawing and animations using javascript. 
Thanks, but that's not really what I'm looking for. Teaching a 10 year old is very different to teaching a teenager or older person. 
Object Oriented Javascript from Stoyan Stefanov for the basics after that: Javascript: The definitive guide - if you want to dive in the language really well.
The differences between Lua and JavaScript are not as big as you might imagine. For example, metatables are very similar to prototypes. The main difference is the DOM and the HTML/CSS part that comes with it. Here is a comparative list of HTML5/JS game engines: http://html5gameengine.com/
That's quite a list, I'll have to spend some time going through those to work out which is most appropriate. 
Your URL is malformed; it should be http://tel.search.ch/?tel=PHONENR, otherwise the search parameter is seen as part of the origin.
Not quite what you're looking for, but check out http://codekingdoms.com - its like scratch (also great for younger kids) but javascript. This gives kids the basics in a cool environment which you can then build on outside the environment when they are a little older.
Actually that is very cool. I will play it with my younger son (8) this weekend. Thanks!
Very true. Of course, validating the HTML is a good idea anyway, unless you've got a good reason not to. Many times I've fixed broken web pages just by making (seemingly-unrelated) bits of HTML valid. And even more often, a "mysteriously broken" page will give much better error messages once it is valid.
*Dropping support for Internet Explorer 8 will enable us to add more exciting features to Angular faster, decrease Angular's support burden, and cut our build time in half, while affecting only a very small proportion of users.* I had no idea IE8 had such performance an impact on build time. Anyone explain why? 
Simple answer: You can only use ajax on the same domain. so if your script is at test123.com, you can only make ajax requests to test123.com If you could freely cause the browser to make requests to any domain, that would be a gaping security hole! Longer answer: Here is a great resource of potential workarounds: http://stackoverflow.com/questions/3076414/ways-to-circumvent-the-same-origin-policy
IE8 has somewhat-modern HTML and CSS support, but its JavaScript APIs (event system, DOM...) are very, very outdated. It's the same reason why jQuery dropped support for IE8.
The end result is more or less the same, but it's achieved by different means. In the first example, the `Walk` function is a property of the `Animal` prototype, whereas in the second example, the `walk` function is a property of every instance of `Animal`. In the past there have been various arguments about the merits of having one copy of the function vs. having many copies, but I'd imagine that most of the performance implications are moot on modern JS engines. As to your second question, `function Animal(name) { ... } ` is a function declaration, whereas `var Animal = function(name) { ... }` is a function expression that's assigned to a variable. (There is also a third form, the named function expression: `var foo = function bar(...) { ... }`) There are a handful of subtle differences between the two: function declarations are hoisted, and are only legal at file scope and function scope, not inside a block. Function expressions are not hoisted, but are legal anywhere, including inside blocks. And from a practical standpoint, function declarations give a better debugging experience because you'll see the name of the function in a stack trace. Read [this](http://kangax.github.io/nfe/) and [this](http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/) if you want more information.
Unless the tel.search.ch site provides CORS headers that allow cross-origin requests, or it supports a JSONP interface, then what you're trying to do is not going to work. The same-origin policy is there for a reason. 
to clarify this: i know what a lightbox is and i am not searching for a classic lightbox. Lightbox: click on the picture - zoom imgur: zooming the page results in the picture being zoomed out of its frame according to the users zoom geture
Phaser is an easy to use library for 2d HTML5 games. Personally, I haven't messed with it much, but I've heard good things about http://codecombat.com/ as a teaching tool.
Have you tried looking at [Crafty.js](http://craftyjs.com/) I haven't tried using it myself, but I have seen a presentation from the developers. I know they strive to create a simple game engine in javascript, and I saw him do a Super Mario level in 20 minutes, not really, but his presentation covered everything you needed, with code being written beforehand and sprites for the levels already done. He said it would take him about 4-5 hours to do all of the coding and spriting in hand for a complete level with basic functionality such as jumping and collision detection with objects and Goombas.
Flash ActionScript is the way to go. I started with Flash MX when I was age 10 myself, and learned it on my own through trial and error. It was easy to learn and I could make things "just work" without having to learn anything about performance, efficiency, or good coding practices that can come later down the road. It has excellent vector drawing tools with frame by frame animation, and you can simply draw 2 objects, give them names, then pull up your ActionScript panel and say object.hitTest(object2) to see if they collided. I can't even express how amazing of an influence Flash MX was on my life, I highly recommend it! I would suggest using ActionScript 2.0 instead of 3.0 (or whatever the latest is), as it has a much smaller learning curve.
&gt; Flash ActionScript is the way to go. I appreciate the benefits of using Flash, but I don't want to teach him a technology that is rapidly dying. 
Yes, Phaser looks very cool. It's currently my top choice. 
Its probably capturing the touch event and doing some stuff similar to a light box. I don't have a iPad so I can't check, does it do it when the image isn't even on the screen?
I certainly understand where you're coming from. I haven't used Flash for years now, but I would still recommend it to anyone who wants to learn programming. There are JS libraries that provide Flash animation functionality, and even convert AS straight to JS-- but the problem with JS is that there aren't any amazing IDEs that welcome beginners. I loved Flash because it integrated everything together so well-- AS is an object oriented language at its finest with the Flash GUI. Enough about the euphoria of my childhood and passion for Flash though. If you're in r/javascript with the details you provided, I would still recommend AS as the solution. AS and JS are both based on the ECMAScript specifications, are syntactically similar, and share a vast amount of the same methods and variable names. If you want to teach your son JS eventually, AS would be a good intro. Anyway, that's my two cents!
It's done using JavaScript to adjust string length based on viewport size If drill down on the title elements you can see the script tags that are used in [handlebars](http://handlebarsjs.com/), and I can see [underscore](http://underscorejs.org/) loaded and [ember](http://emberjs.com/). It'll be a feature from ember templates 
Tune in next time when we try sandpaper as a bedsheet! I'd go with Python, it was designed for this kind of thing initially (see ABC lang). I'd argue that it fulfills the requirements, but I've a personal bias towards the language.
Doesn't work in the browser, does it?
&amp; a good example of using [CoffeeScript for the GruntFile](https://github.com/city41/blog/blob/master/Gruntfile.coffee)
Probably better to go for '(.*)old-name' and hope for the best. Thanks for a decent solution, sth with esprima and canonical path names would be a lot more solid. From some other suggestions now I just switch over from vim to WebStorm to use its nice Move refactor, and then back to vim :)
This only works when applied to a container with a set width. I think OP is asking how to do this with variable-width containers, which as far as I know can only be done in JavaScript. There are probably libraries that will do this for you. If I were hand-rolling this, I would store the full body text in some capacity and, on resize, remove words until all the text fit. But as with anything there might be a better way. Another option that precludes storing the body text: surround each word with a span, and attach a class to hidden words. 
I wrote up an explanation a few months ago that might help: http://mrjoelkemp.com/2014/01/javascript-an-exploration-of-prototypal-inheritance/
While on the level of the language itself, there might be huge differences, the application seems rather similar: myClass = function() end setMetatable(myClass, { ... }); vs. myClass = function() {} myClass.prototype = { ... }; At least for someone just learning the language, the concepts at least seems familar.
Pixi.js is a very good JavaScript 2D render engine with WebGL and drawing shapes support. No game components but if you want to mess with visual stuff then it is great. 
I actually had the same hesitations before switching, but i suggest you give it a try on a small "play project" and I guarantee you ll be converted right away. Note that you do need to have some automation in place tho. The combo Gulp, live reload and browserify make building on save completely transparent. Cheers
Alright! Thanks guys. Probably its also the reason why I cant get it in php as well with file_get_contents right ? I typed the url wrong :-/ sorry I was bit in a hurry...but in my code it was correct, I checked. Well...I did it with iFrame and just positioned the window to the information that I wanted...it sucks but well...shit
I checked...I had it correct, its exactly the same like your version. I just failed to type correctly in my post. Sorry for that, but thank you very much! I appreciate your help.
Start with http://learn.code.org Then head over to http://codecombat.com/ Use the Khan Academy courses and Code School courses https://www.codeschool.com/ See if he can understand Dmitry Soshnikov's blog http://dmitrysoshnikov.com/ecmascript/javascript-the-core/ Code inComplete walks through all the fundamentals of building games in javascript http://codeincomplete.com/games/ 
Not complaining, but why the downvote? Just curious, you don't agree that coffeescript is a good first language for the browser? 
&gt; For some the ability to use npm modules might be a plus. I personally donâ€™t like that so much as its feel a bit too hacky for a production app. What? Npm modules too hacky for a production app? Too *hacky*? 
Why no love for npm modules? It's pretty much changed the way I see programming. Being able to npm install your favourite methods, utils and modules from project to project is a godsend, and one of the biggest benefits of browserify IMHO. It also gets you into the habit of writing smaller (easier to maintain) and more modular tools rather than trying to make a sprawling engine/framework/etc. 
Welp, I'm sad to see downvotes for this comment, because I think it's very true. The fact that Flash is one package, with everything you need, is very good for learning. You just animate and draw things with the drawing tools, until you learn to do the same thing using only code. I think I had a very similar experience to /u/schooley, starting out in Flash MX and learning so much from it. I also dropped it eventually, and I think it's true that today it might be a bad idea to teach a technology that's become irrelevant. Which is sad! I wish something similar to Flash existed today, and I'm kinda working to make that happen.
&gt; Probably its also the reason why I cant get it in php as well with file_get_contents right ? No, not at all. The same-origin policy only affects JS running in the browser. Server-side code can do whatever it wants and has no such restriction, which is why one of the workarounds to get around the same origin policy is to funnel the request through a server-side script that performs the cross-domain request on the user's behalf. 
The roadmap seems quite good, but I'm not so sure that including jQuery (or any other framework/toolbox) is such a good idea... Considering how little of it seems to be studied, this is clearly nitpicking, though.
Having looked at the code I think this is a good option. Simple and clear code. And so fast! Thanks!
Do you know why it maybe didnt work ? Maybe tel.search.ch itself blocked it ? Im really wondering how I could do that...I need the details of the caller. Ah...I tried a lot of things already...and I am restricted to php and js.
I mean NPM modules in the browser and I mean real NPM modules not the one made for browserify (which are legions now-days)
Post a testcase. 
&gt; In the past there have been various arguments about the merits of having one copy of the function vs. having many copies, but I'd imagine that most of the performance implications are moot on modern JS engines. No, they aren't. Creating functions per instance is still dramatically slower than sharing a single function on the prototype. 
The idea of browserify is to be able to consume any commonJS module so it is odd to put a artificial boundary like that. And if it is good enough for use on a server it is good enough for a browser. It is the same javascript so I don't get this split you see.
The first one is superior IMO. In the second case, each instance of an Animal (and Dog) will have a property called "walk". This storage requires memory. In the first case, only one object has storage for Walk, and all Animals can use it via name resolution (it's in their prototype chain). This requires less memory, at basically no cost in name resolution performance (since modern JS engines use hidden types). In this example, it's just one attribute so who cares, however in real world examples it's often dozens, or hundreds depending on how complex/deep your inheritance hierarchy grows. [edit] just noticed you're actually making Dog's proto and instance of an Animal, rather than an instance of it's proto. That will eliminate the per-instance storage problem, but is also just weird. Notice that you're not passing in "name" to the Animal ctor and duping that logic in Dog's ctor? That style effectively means you can't use ctor parameters except for leaf types, and plenty of ctor logic gets copypasta'ed all over the place. More reasons not to use it.
It doesn't sound like a word cloud is the right way to show your data; they are [rarely that effective anyway](http://www.niemanlab.org/2011/10/word-clouds-considered-harmful/). To show a change over time, you want a line chart. It may not be as sexy as a word cloud but it will be more effective. If you want a line chart with a difference, a [slope chart](http://skedasis.com/d3/slopegraph/) is a useful tool to try.
This news is 3 months old.
I've had [my share of AMD frustration](http://thanpol.as/javascript/why-i-dont-like-amd-and-what-i-will-do-about-it/), i sympathize.
There are other ways which are better yet IMO. Make a type definition DSL library that better expresses your intent, and have the implementation of said library produce something equivalent to what you have above. var Animal = class(Object, function() { ctor_property("name"); method("walk", function () {...}); }); var Dog = class(Animal, function () { // dog specific stuff goes here }); var doggy = new Dog("Max"); doggy.walk();
&gt; So choosing between functions as properties of prototype and as properties of instances is really a personal preference thing? In any experiences you've had, has one been nicer to use over the other? There *may* be a memory implication in having one function per instance versus one per prototype. Whether there *is* a difference could be implementation defined. JavaScript performance can be difficult to reason about but I'd say it would be good form to use prototypes if one expects a large number of objects to be created.
This is a JS sub. If you're not gonna suggest JS, you're gonna have a bad time. Source: I'm not a fan of JS, and have had bad times. See Also: The flash suggesting guy.
[http://pastebin.com/hhZvZ5YK](http://pastebin.com/hhZvZ5YK) At line 27 there is a comment...this should be the part where it gets its content, I used to have the phonenumber as variable there. Basically imagine instead of $file, $phonenumber. Yes the $phonenumber also had a value. I just didnt get anything back...:-(
I feel trolled, as I was expecting new news regarding the release date. Ah well, you win this time...
It's a bit like why Google dropped webkit in favor of blink for chromium / Chrome... the number of different environments their codebase had to support (in particular, the ancient Apple environments from webkit's early days) were a massive drag on the timeline to add new features.
This isn't entirely related or helpful to the OP's question, but sometimes it is worth it to not do classical inheritance in JS and to do the mixin pattern instead. http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/ http://addyosmani.com/resources/essentialjsdesignpatterns/book/#mixinpatternjavascript 
Do the guided tutorials on the knockout site, they're really good. So knockout uses a pattern called MVVM, which essentially binds an object (the view model) to your markup. Its actually pretty cool because instead of getting changes from the UI, you markup is automatically updated when a change is made and vice versa. Ita a really clean model that makes larger applications easier to build and more testable. I took an app that had close to a thousand lines of jQuery code and removed a ton of bugs while dropping the code size down by 40-50% after switching to knockout. 
You can use clip paths to achieve the effect you need. They behave like clipping paths in Illustrator: you put a clip path over an image or shape, and only the parts under the clip path will show. Using clip paths is really simple. You define a shape in the &lt;defs&gt; section, and apply it to another shape using the clip-path property. &lt;defs&gt; &lt;clipPath id="clipPath"&gt; &lt;rect x="15" y="15" width="40" height="40" /&gt; &lt;/clipPath&gt; &lt;/defs&gt; &lt;circle clip-path: url(#clipPath) cx="25" cy="25" r="20" /&gt; There is a tutorial on clip paths [here](http://tutorials.jenkov.com/svg/clip-path.html), and reference on clip paths [here](https://developer.mozilla.org/fr/docs/Web/SVG/Element/clipPath). You could also do it with masks, but masks are different: they allow you to use a grayscale mask over an image to add variable transparency (to create transparency gradients, for example).
There are actual projects that you are guided through that you can tackle... 
i can record it when i get home, so you see
This is amazing. I mostly use template engines now so I'm sad I'll probably never get to use this.
This is the best answer.
Yep, FF&lt;17 is the main "offender". Take a look at http://kangax.github.io/jstests/function-decompilation/ and http://perfectionkills.com/state-of-function-decompilation-in-javascript/
We have the same functionality in Fabric.js â€” fabricjs.com/test/misc/itext.html
Yeah, r.js is plain awesome....once you get it working....and if it never breaks. I'm pretty sure that if I get hit by a bus, my team is going to be SOL trying to maintain the r.js builds, no matter how much documentation I supply myself. But with that said, it does solve a lot of my problems, and makes things all-around better. I feel like it's working _good enough_ until true modules are widely supported, since it's just the build step that's a pain, though I'm always looking at alternatives.
Think of something you want to make/ build. Try and work out how you would approach it. Look in the book for the syntax, patterns ect that will help you realize your product. Also google is your friend. Side note: No need to be cynical in an advice thread.. 
A good article but it kinda glosses over the reason for using a monolithic built JS file: caching. While a single file can't take advantage of parallel loading, multiple small files even in parallel lose their advantage when loading from cache. When delivering an SPA the extra hit you get from a single-threaded download of a single, 150kb gzipped (450kb uncompressed) JS file, is worth the pain as subsequent loads pull from the browser cache (a single XHR cache-hit). Also r.js brings in the ability to precalculate things, as complicated as it can be some times, for example in develop mode we send handlebars templates down raw but during the r.js build step we pre-compile the handlebars templates and combine those in the built file with a stripped-down version of handlebars using r.js compiler directives/flags (basically handlebars with the compile/ast code stripped out which shaves about half the library's size). Technically we increase the payload size a KB or so when we precompile templates but reduce page flicker not wasting compute cycles compiling templates. Not to say it can't be done using other techniques or that require.js is the greatest thing since sliced bread, just bringing up one of the primary reasons for r.js existence despite some of its pain.
CoffeeScript is pretty much the worst option I can think of. It's quirky and the tooling is extremely poor. What makes it a great first language? Having to press fewer keys if a dumb text editor is used? Is that really the most important thing? Personally, I think that providing quick direct feedback and letting the machine do as much assisting work as possible is a better idea. TypeScript, Dart, and Ceylon go in that direction, for example.
AS3 is okay. FlashDevelop also works just fine. However, Flash is a dead end. &gt; I would suggest using ActionScript 2.0 instead of 3.0 There are more AS3 resources available, it's way faster (AVM2), and the tooling is also way better. AS3 was introduced in 2006. AS2 is from 2003.
Yeah it's pretty clear. Also big memory overhead to think about too. TBH I can't see the weird attraction people have to reimplementing prototypes badly.
It's slower (especially on older engines), less idiomatic, wastes memory, and fits badly with the coming ES6 'classes'.
Oddly, I did a lot of Scheme and Lisp on the side after college, and never needed cars and cdrs and cadddaddadadadrs' nearly as often as I did in class..and it was easy to encapsulate them 
(Side point, doesn't address your main question) You should always prefer this: Dog.prototype = Object.create(Animal.prototype); â€¦ over this: Dog.prototype = new Animal(); The problem with the second chunk of code is that you're creating a bogus instance of Animal just to achieve the desired effect of making Dog inherit from Animal.prototype. Suppose someone changes the Animal constructor to validate its arguments: var Animal = function(name) { if (!name) { throw new Error("name is required"); } this.name = name; }; Now this code throws an error: Dog.prototype = new Animal(); You could pass in a fake name to satisfy the constructor, but that's the road to madness. The **new** operator mixes together object creation, prototype-setting, and constructor invocation. Here, you only want the first 2 things, not the 3rd. That's exactly what Object.create(prototypeObject) gives you.
I didn't downvote (your post adds to discussion, jeez guys), but here are my reservations regarding CoffeeScript: **Shorthand syntax isn't always clear.** For example, this was pretty foreign to me even as someone with a few languages under my belt: square = (x) -&gt; x*x On the other hand, in Javascript we have square = function(x) { return x*x; }; which has a lot more syntactic noise (I don't think JavaScript is the best language for beginners either), but I could talk to a beginner about how I'm defining a *function* which takes x as a parameter and *returns* a value. I suspect learning the common lingo will have value when the beginning programmer moves onto other languages. This was a simple example; there's other places where CoffeeScript hides a lot of logic in its significant whitespace or obscure syntax (callbacks related to indent level, fat/thin arrow). **CoffeeScript takes more setup for experimental projects** When said beginner wants to build his/her own project, having to deal with (automated) compilation and debugging through source maps isn't very pleasant. As a beginning programmer, their focus should be learning the languages and good programming habits/skills rather than setting up tools and workflow. **In summary,** I don't feel like CoffeeScript is a better option *than JavaScript* for *beginners*, though clearly many people find value in it for other purposes.
I suppose I'm looking for the structure too if it isnt the same as java or C. The syntax I don't think should be too difficult. Just maybe the way everything ties in together? I will have a look at both though thanks! :D 
I'll have a look into the roadmap thanks :D 
Here you go. http://www.youtube.com/watch?v=mRJv_XirJIg It seems a bit laggy but it is because of the screen recording
hmm dont know what that is....maybe gonna look it up
Seems to be a bit of an interest - I'll clean it up and throw it on git and here over the weekend
&gt; I donâ€™t want to bundle global dependencies (Backbone, jquery &amp; friends) with the core of my app, causeâ€”well thatâ€™s silly not to leverage CDN for that and also I find that it semantically doesnâ€™t make sense. Would you pull the all dependencies of C app into the main binary? that's adorable. just wait until you need to demo an app in front of a room full of investors and it turns out the wifi connection is flakey so you can't even get it running on localhost. or like when my adsl went down and i only had flakey 3g that meant the webfonts caused the app to take 30s+ to even load up before erroring out. edit: i guess what i am saying is, i would at least make sure all the c app dependencies on the same machine, I wouldn't try to link a glibc stored on an NFS mount and just hope and pray that the foreign machine is always online and working correctly.
&gt; So choosing between functions as properties of prototype and as properties of instances is really a personal preference thing? no. using prototype is better.
I'm using phaser right now. There are some quirks (It took me forever to realize that the proprietary format for tiled map data was from a map creation program called Tiled) but otherwise it's a pretty good engine.
Personally, I don't understand why people advocate Python-like languages as a good learning tool. I'll admit I haven't really used Python myself but I've done some templating in Jade which has Python-like syntax and the indentation requirements and lack of enclosures always confuse the hell out of me. Just because something is less verbose doesn't make it easier to understand. Often the opposite.
&gt; There are probably libraries that will do this for you. [Yep](http://dotdotdot.frebsite.nl/)
An infographic is a terrible: absolutely **terrible** way to present this information.
Not to mention that third-party CDNs can track IP addresses across multiple domains, which (imho) violates your end user's privacy without their knowledge or consent....
See, with JS, we don't have classes. We already have objects with certain behaviours (methods/properties). We only 'borrow' their behaviours when possible. In other OOP languages, we only have a base structure with which we use to build objects. For instance, in python, class Animal doesn't mean there's an object called Animal. But with JS, we actually have an object Animal with it's own private &amp; public properties. We can interact with it, we can decide to not use it and it will still function as any other object. But we can also use it to instantiate other objects. This is because functions act as objects too (they are objects!). So when you call a property of an object, it first checks if it's in the object, then it checks if it's in the first class prototype (object's constructor), then the constructor's constructor prototype and all the way to the native Object. **TL;DR:** Think of nearly everything in JS as an object, with children and parents.
I like your idea and think that all you need to do is make your "non-random positioning function" this: Create a word cloud where the fixed position of words/letter is based on the _maximum_ dimension (say frequency) of that word/letter) in the data set for its entire time span. Use whatever space-packing algorithm you want. Then, only animate the _size_ of each word (or letter) over time centered at their anchor position. The effect should be a garden of words/letters with some blooming and wilting over time. An added feature would be that seeing a lot or little extra space around words/letters initially offers a clear indication of the range throughout the time span.
I'd imagine the flow goes something like this: 1. Delegate `touchstart`, `touchmove`, and `touchend` events on the container element for your all your `&lt;img&gt;` elements. * Keep track of the coordinates of the `touchstart` events. * On `touchmove` (as long as at least two of the touches haven't fired their `touchend` event) find the coordinates of the touches which are furthest away from each other. * Append a copy of the `&lt;img&gt;` to the container element and position it absolutely so that it appears in the exact position of the original `&lt;img&gt;` that was touched (unless the `&lt;img&gt;` you're touching *is* a duplicate). * Calculate the distance each finger has moved relative to their `touchstart` positions. * Calculate the multiple to scale the `&lt;img&gt;` by comparing the size of the original `&lt;img&gt;` to the combined distance the two fingers have moved away from their `touchstart` coordinates. * If the multiple you calculated is greater than 1 then apply `transform: scale(MULTIPLE)` to the `&lt;img&gt;`'s `style` attribute. (Example: `transform: scale(1.5)` would make the element 50% larger) * On `touchend` check if the multiple is less than or equal to 1. If it is then remove the absolutely positioned duplicate `&lt;img&gt;` from the DOM. If not then keep track of the current multiple because you will have to account for that the next time you get to step 6.
Actually, you can do CORS requests with AJAX, as long as the destination allows cross-origin requests. https://developer.mozilla.org/en/docs/HTTP/Access_control_CORS What you can do is to ask for permissions from the destination site. If not possible, just use a server language to do some page scrapping (not recommended if you are abusing it).
The main advantage from using inheritance aside from the lower memory cost is that you can edit the prototype at any point and the changes kick in for all objects inheriting it, while you're still able to make objects inheriting the prototype have a different version of a field.
Late to the party but take a look at http://pencilcode.net. It builds on coffeescript and canvas to create a very kid friendly development environment. Turtle graphics and more.
The arrow notation vs the 'function' keyword--not really a valid argument. People will find a notation familiar if that is what they are taught. And anyway, arrow notation is coming to JavaScript: it's part of ES6, and Firefox already supports it. E.g. `var f= (x) =&gt; x * x;`
I didn't see anybody mention it, so I just wanted to point out that Object.create is a relatively new feature in the language. It was added in ECMAScript 5, which came out in 2009. So that's why there's two different ways to do it. Object.create was added specifically in response to complaints about how difficult inheritance is to work with.
I agree. I found it a major pita to get it working for multi-page apps.
Phaser supports Typescript which should be easier to learn for beginners
you can use [Hammer.js](https://github.com/EightMedia/hammer.js) to solve this on your own. a little example might look like this: [http://jsfiddle.net/3stVA/](http://jsfiddle.net/3stVA/)
Again, the OP wants a book for a new learner.
The smoke effect? You'll likely need to pioneer that yourself and well, good luck. You'll need the canvas tag with WebGL most likely and the majority of computers will likely not be able to handle it. I'd be interested to see the end result though if you get it! Here is an example of a water effect using WebGL with canvas, so maybe you could use this as a starting point? http://madebyevan.com/webgl-water/
Hey, thanks for answering. Not the smoke effect, the one before where the letters come in view with that blur effect. 
&gt;You are sending over the wire ~1-3% more bytes, from what your JS app size is. That is too much. ... Can't take this seriously, sorry.
Take a look at the CSS3's blur filter OR text-shadow: // Blur actually achieves a "blur" effect filter: blur(10px); // Text shadow with the same color as the font does similar color: #000; text-shadow: 0px 0px 10px #000;
The second one is far *not* superior. Instance of it's prototype doesn't make any sense. The first one is doing it correctly. Creates an empty object with the __proto__ set to the parent's prototype. This is the correct way to avoid weird side effects. Never use `child.prototype = new Parent()`, it's unnecessary and causes side effects.
No problem, take a look at /u/mrskitch's answer, it seems to be on the right track. You can maybe use CSS animations to perform the fade, if not, you can animate it with $.animate()
Ah no, that is wrong - text-overflow will do this perfectly with a variable width container over a *single line*. As an example: .class-name { overflow-x: hidden; text-overflow: ellipsis; white-space: nowrap; } If you want to truncate text over multiple lines (e.g. three lines deep then truncate), yes, then you would need JavaScript. 
Not too complex using css blur and a bit of javascript. I'm sure this could be a lot more concise but i just threw it together: http://jsfiddle.net/6evw3/1/
&gt; In python there is a dictionary holding all references to variables (and functions). Not always true for local vars. In CPython, "fast locals" are stored in an array and internally accessed by the interpreter using integer indices. &gt; Changing that reference in the dictionary will change the variable, just add you'd expect. Quoting the docs for the locals() function ( http://docs.python.org/2/library/functions.html#locals ), with emphasis added: &gt; Note: The contents of this dictionary should not be modified; **changes may not affect the values of local and free variables used by the interpreter**.
It should work perfectly fine for your project. SVG rendering is surprisingly fast (probably as fast as Flash is for vector animation), and clipping paths won't make much difference, unless you use huge images or make a 500,000 pieces puzzle.
Seems a bit extreme to design you app for such an edge case
it's extreme to avoid moving parts and external dependencies at runtime? those two are just personal experience, in the last 6 months alone.
IE8 is still over 20% of internet traffic. Not sure if I would call that a "very small proportion of users".
Cool
Drop yo ass at the chocolate factory
The use of public CDN is definitely arguable, tho if you want to setup your own CDN you have the same issue
I think this is great. Only thing I will say is to try and not have the content effect the layout. I love this though. Thanks for sharing.
My favorite is that no matter what single word you put after "system", it will show you the systems for that word. Had some mildly hilarious childish moments upon discovering that.
It sounds like what you want to do is simply run code like this but for a different page than what the code suggests (namely the page returned when you include those search params) right? Or am I completely misunderstanding? If the page layout is the same and has the same style/classes, maybe you can just run the snippet on that page instead. What does that do?
I think it would be more appropriately called a Reddit interface written in JS. I was expecting this to be a Reddit alternative that implemented the same voting algorithm and whatnot with a similar interface.
As someone has already said, the second approach puts an extra `name` and `walk()` on Dog. It works, but it's poor form. You can see a visualization of the difference by going to [Object Playground](http://www.objectplayground.com), scrolling down to the "Visualize and Explore" section, pasting in the following code, and pressing the "Evaluate" button. The video might be helpful for you too. function Animal1(name) { this.name = name; } Animal1.prototype.walk = function walk() { return this.name + " is walking."; } function Dog1(name) { Animal1.call(this, name); // You can use params here for the super class call. } Dog1.prototype = Object.create(Animal1.prototype); Dog1.prototype.constructor = Dog1; this.myDog1 = new Dog1("Sparky"); this.walk1 = this.myDog1.walk(); var Animal2 = function Animal2(name) { this.name = name; this.walk = function walk() { return this.name + " is walking."; }; }; var Dog2 = function Dog2(name) { this.name = name; }; Dog2.prototype = new Animal2(); Dog2.prototype.constructor = Dog2; this.doggy2 = new Dog2("Pal"); this.walk2 = this.doggy2.walk(); 
That's exactly what I want to do. When I try to do that it changes the page to my full inbox and goes through all 2 years of my messages instead of just the last 1 month.
No oauth? Login and password is sent in the clear, not even SSL'd? :(
And [Atwood's Law](http://blog.codinghorror.com/the-principle-of-least-power/) keeps holding true.
ugh.
I recommend spending some time with Python. I thought the same way at first, but in reality, both the language and ecosystem of Python have produced a culture where readable, understandable code is prioritized far more than any other mainstream language I know of. Syntactic whitespace ended up being a non-issue for me. After all, I was already pretty strict about my own style. Python just made it official.
I think you might be looking at [dotdotdot jQuery](http://dotdotdot.frebsite.nl/)
The big problem with CoffeeScript as a beginner language is that it's impossible to avoid having to learn JavaScript anyway. That being said, I'm just about to teach an "intro to the world of programming" course using Coffeescript. There's just far less syntactic noise, which I'm hoping will let me focus on the basic programming concepts with less distraction from the language itself. I'll simply have to serve as the debugger.
**NO.**
No doubt! I haven't used either of the languages for years now, my suggestion was based on the memory I had of the learning curve for AS3 being too steep coming from AS2 at my age.
is that any different than standard reddit? 
awesome 
Standard reddit sends your credentials over SSL, and at no point do they have to go through a third party. Obviously this is a third party site, but that's what OAuth is there for.
I stand corrected. Reddit does indeed send with SSL. I had just always assumed it didn't since the URL wasn't https://. TIL. Thanks!
They added it (somewhat) recently. It's still insecure because the page to with the form on it is loaded over http and could easily be tampered with, blah blah blah, but it's better than this crap
Given that you really need to use a CSS compiler these days anyway, I often wonder if JSSS was the better technology. Definitely worth investigating IMO. 
This does the opposite of what a Javascript library should do, it makes things more complicated.
Yeah especially in big companies, they often lag behind. I had to develop for IE6 until 2 years ago...
That's very interesting thanks. 
mapbox.com/tilemill you can style your maps however you want, using a css like design language. you can host them yourself or publish them for free to the mapbox hosted service.
It probably seemed like a good idea. I faintly remember generating stylesheets with PHP around 2000. At the time I also thought the best approach to templating would be to create partial DOM trees in code and serialise them as HTML or XHTML depending on the browser. I have since learned the error of my ways and to embrace modern web technologies. I hope OP does the same.
If the range you want is `0410-042F`, then you need to select a random number in that range. Pick a random number between `0` and `31`, and add `0x0410` to it: String.fromCharCode( 0| 0x0410 + Math.random() * 31 )
 text = String.fromCharCode(0x400+Math.random()*256);
Another one of those WYSIWYG tools that are really just dumb wrappers around design-mode and mix presentation with markup. I wished someone would finally implement an alternative to WYMEditor with modern development practices (i.e. separating the menu stuff from the actual text area).
Unless you have projects that actually contain multiple disjunct entry points. Because client-side JS is often bundled before deployment or uses multiple script tags (e.g. to load jQuery off a CDN in an app that otherwise uses CommonJS modules) IntelliJ simply can't do anything intelligent comparable to what it can do with Java. Even if its CommonJS/AMD module support has improved, there will always be implicit dependencies it can get wrong. The only way around this is to have different IntelliJ projects for, say, the client and the server (nodeJS) but this means you can't have the client files in a subfolder of the folder containing the server code (e.g. to re-use node modules via browserify without having to keep separate module folders) or else it will again unhelpfully pick up on all the client files when trying to assist you in writing your server code. Oh, and if you separate the two parts completely, you now lose the benefit of having auto-completion for their file paths. I can't blame them, though. Their code intelligence is generally among the best there is and I've been very impressed when programming in Python, but JS code intelligence is just too damn hard.
This is so much faster. A view of the future I think.
The 31 range was from you, not me. `0x042F-0x0410 = 31`. Though it should be 32 to make it inclusive, my mistake. And yes, you have the logic correct, it's just picking one number in a range of numbers. If I told you to pick a random number between 10 and 20, programmatically, how would you do it? - Pick a random # between 0 and 10 - add 10 to it Same concept here, just larger numbers.
I'm tempted to post an issue on github, just to say "this is fucking wrong"
I love this, just need RES features and i'd use it all the time.
AS3 is an implementation of ES4. It's basically ES3 + classes, packages, and types. As a direct result, you get vastly improved tooling and also better documentation. E.g. if "foo()" takes a "bar" object as argument and returns a "baz" object, you'll be a) told about it and b) you can easily check what these things are. This is similar to the experience you get with TypeScript or Dart.
My designers would laugh at me if I tried to force this on them
All the meta-fighting about closing questions on every single page of SO is pretty hilarious.
Unfortunately, I dont have any sort of account where I can even mess around with this (unless any any android user could look at their message on this site. Sorry for the total ignorance about what you are trying to do). That being said, the code is not requesting a new page or anything so the info we need must be present somewhere in memory. Did you notice the only comment on the page you linked? Based on the code I think you need to do exactly what that comment describes but insert the parameters mentioned in your original post. In other words you are going to alter what the value for location.hash is set to, to what you need rather than what the current code is doing. Sorry I hadn't noticed that before but I have no context here really.
As an experiment, sure cool project. Production, no way please no ;)
Unless you combine it with server side CSS.. that might be a win
I got this for you: http://kmalakoff.github.io/knockback/
Just a heads-up: you need to have js enabled, else you only see what looks like a static frontpage and nothing more. EDIT: Is this actually just an ad to sell a book? Looks like you get chapter 1 for free and have to pay for the rest.
I like the thumbnails and the infinite scrolling!
Thanks folks for sharing your thoughts. This is helping me in making documentation clearer. Obviously JS3 is not for designers, neither its an effort towards replacing CSS. 
Thank you I had no clue the order actually mattered. Are these lines called anything in particular?
Polymer is the new Angular.
The lines that tell the page to load jquery, then jqueryui etc. Is there a particular term that's used to refer to these? I guess my issue is I'm not sure specifically how these lines work. With codeacademy they pretty much had the pages set up with these lines before I started the problems so I never really got to play around with them. I know that they tell the website that you will be incorporating different types of code (the css, the js, and the jquery/jqueryUI) but I'm still confused as to how it works. If there's a specific name or title that these lines have I can look into it more tonight to try and make sense of it.
Hey there, I'm the guy that made this. Thanks for linking to it /u/dswabster. You can see a list of features and the source at its github page https://github.com/BenjaminAdams/RedditJS/ Please AMA if you have any questions or suggestions.
Hey, man. I think http://www.codecademy.com/tracks/javascript may be a good starting point for ya. Have at it and happy coding!
;)
The funny part is that Twitter doesn't even use Bootstrap on their own website. 
I have a similar project â€” [xcss](https://github.com/andreypopp/xcss) â€” it's not ready for prime time yet. But I've done a different set of design decisions. I've implemented it as a CSS-to-JS compiler which compiles usual CSS syntax into JS code which uses Stylesheet object model (an immutable representation of stylesheets you can transform and process as you wish, cause it is a data structure). Then you can serialise such Stylesheet data structure back into CSS. Example xcss code: @import "./other-stylesheet.css"; @require "some-pkg/theme" as theme; .Component { width: 12px; background-color: {theme.bgColor}; } is compiled first into: var xcss = require("xcss"), theme = require("some-pkg/theme"); module.exports = xcss.om.stylesheet(null, xcss.om.import(require("./other-stylesheet.css")), xcss.om.rule('.Component', { width: '12px', backgroundColor: theme.bgColor }) ); and then you can just `require()` it in Node and get a CSS: var stylesheet = require('./stylesheet.xcss'); var css = stylesheet.toCSS();
&gt; You can exclude libraries from the build process to load it from a CDN (configure it as :empty). Require.js can even configured it to use a CDN, but fallback on local resources. It is possible with browserify + [browserify-shim](https://github.com/thlorenz/browserify-shim). &gt; You can specify modules and not export everything into one file (aka, "breaking the build into many files" It is possible with browserify + [factor-bundle](https://github.com/substack/factor-bundle). &gt; You can shim dependencies (aka, "utilize globals and inject them into modules") It is possible with browserify + [browserify-shim](https://github.com/thlorenz/browserify-shim).
IIRC Twitter was never involved as anything other than a sponsor after the fact, the creators just happened to be working there at the time.
It's essentially just an ad, this book has been getting peddled around here for the past week or so
I'm a Javascript guy, feel free to PM me with any details and I'll see if I can help. 
I don't see a reason why not. You could just export the constructor function for Circle. var Circle = require('./circle'), c = new Circle(1, 2); 
I've found the best strategy is to get over your embarrassment, dump that shit on github, and ask the interwebs for some polite tough love. I'm more then happy to give you a pull to get linting or testing working. But you should probably stick it on github so others can learn as well.
I love javascript. I can't commit any time to writing code but I'd be happy to review code if you want another pair of eyes.
neat
It looks like you are starting to learn JavaScript. At some point it wouldn't hurt to read Doug Crockford's book 'JavaScript: The good parts'. It's not a beginners first book but at some point this book will be just what you need to see the power and pitfalls of JS. 
Happy to code review. Let me know when there's something to take a look at. 
1. put it on github, so that people here who are not planning to spend a few hours emailing some dude can just go read your code and contribute 2. check out beautiful soup for web scraping
Did you just say "meow?"
You might want to look into CSS3 transitions, with perhaps a JS fallback. Using JS do power accordion menus is the old wah of doing things.
For links in Markdown to work, they have to be a _full_ url (http://www.opalrb.org).
Good catch. I forget!
The letters.
Do I look like a cat to you, boy? Am I jumpin' around all nimbly bimbly from tree to tree?
How is this more complicated than a new half-baked language with custom semantics like SASS?
Neither does this, it's just an abstraction on top of a proven PL (js) which renders out to a CSS serialization format.
Unnecessary, and more complicated than just writing CSS.
[There's only one word difference in "new age" and "new weight".](http://vimeo.com/m/18610914)
Sure, but the two are entirely unrelated. `file_get_contents` may be misbehaving for entirely different reasons. In fact, PHP's "safe mode" is an issue entirely of its own.
Okay...so there is a possibillity that I could "fix" the problem ?
[Yes](http://de1.php.net/manual/en/function.file-get-contents.php#refsect1-function.file-get-contents-notes). If you can modify your PHP configuration. And if PHP's HTTP client isn't blacklisted by the destination URL. If changing the configuration has no effect, you can see what PHP's HTTP client looks like to the target server by experimenting with [httpbin](http://httpbin.org/) (it lets you echo request headers as JSON data).
I'd still like a better explanation of destructuring. I assume x goes to x and y goes to y but is that the only way I'm allowed to destructure? What if I want foo to go to x and bar to go to y?
So many of these examples make no sense or are wrong, I stopped reading to write up just some issues with the first few examples: Destructuring is incorrectly used in the first example. It's var { x, y} = point; not [] for objects. The example of its usage is incredibly weak too. Basically the author is saying that you should change your unordered keys that will work if you change how they are assigned to an array that now puts the responsibility on the consumer to map the key to value positions correctly... The let example is completely wrong. let is useful for blocks, not functions. The example makes no sense as you could replace let with var and it'd work identical. They should have showed an example using blocks, like an if statement or for loop... The for-of loop example doesn't run since v isn't defined. It's probably not meant to run, just illustrate a point, my suggestion here would be to add `var v;` and make it runnable. I was unable to get the array comprehension example to run until I changed to: var someNamesArray = [ "12345678", "Frank", "Dan"]; var eightLetterLongNames = [ for (name of someNamesArray) if (name.length &gt;= 8) name ]; console.log(eightLetterLongNames); If I keep reading the post I should work on leaving a comment in the original article with some suggestions on how to fix. Lots of information in there, just be wary of its correctness. **Edit: Wow looks like Axel R. already went to town on this post in the comments there. Can people please not post and upvote wrong information that has not been fixed after called out almost a year ago?**
I stopped after the first item, destructuring, since it was completely wrong.
C'mon, downvoters. You should know the rules by now. You shouldn't downvote because you disagree. Perhaps he was referring to Axel's comments, or perhaps it really is the best description he's seen thus far.
I sort of disagree with 'unnecessary' part. 'Complicated' is a relative term anyways. 
nice one, cheers for the heads up!
I don't mean it's complicated, just more complicated than writing normal CSS. The layout and usage of CSS is about as simple and straightforward as you can get, and then you have preprocessors like Sass to speed things up if you wish. It is unnecessary, web development has gotten this far without it and basically all it's doing to combining two separate languages, that isn't a necessity. You could say the same thing about jQuery (being unnecessary), but jQuery greatly simplifies and speeds up development. I apologise if I'm coming across as quite harsh.
I don't know how much have you explored it so far, but actually it's just initial few yards that any new stuff take. It's precisely same CSS syntax, just wrapped inside JS, for added benefits. E.g., in CSS, style rules are always defined in context of a selector. Here you define style rule as one unit, a style as another unit (where you add style rules) and then you apply styles to selector. This way you end-up reusing same style rule in context of multiple styles and inside multiple selectors. So you reuse style rule and style definitions anywhere, even across JS3 files. And changing a style rule value, updates all styles where it is used and impacts all selectors where these styles are applied. And anyways, its not for those folks, who are CSS masters, its for those, who just understand CSS as property and values. And I personally know a fleet of programmers in my circle who are just loving this approach. As far as 'harsh' is concerned, I can see you have a strong opinion, and that's a good thing. You don't need to apologies. However, I would appreciate, if you take a deep dive, and don't see it as a replacement of CSS. I would also recommend reading following one pagers: https://github.com/vikasburman/js3/wiki/Dynamic-styling%2C-keeping-style-decisions-in-.js3-itself https://github.com/vikasburman/js3/wiki/Applying-scopes-when-merge-loading-in-a-host-context And also, give the basic example a try: https://github.com/vikasburman/js3/tree/master/examples/basic Anyways, thanks for sharing your views. I will try and make its position more clear.
I think [this](http://globaldev.co.uk/2013/10/es6-part-3/) is a much better explanation of destructuring. To your specific question, if I understand both destructuring and your question correctly--could be wrong on either--you can do exactly what you wanted to: function getSomeStuff() { return {x: "Hello", y: "World"}; } var {x: foo, y: bar} = getSomeStuff(); console.log(foo, bar); // "Hello", "World" So while I haven't seen anybody put it like this, I think object destructuring in variable assignment could be expressed like so: var {otherKeyOne: myNewVar1, otherKeyTwo: myNewVar2} = {otherKeyOne: "value1", otherKeyTwo: "value2"}; console.log(myNewVar1, myNewVar2); // "value1", "value2" So this confused me at first, but in the`var` expression, the names of your new variables are the *values*, not the *keys*. The keys are what match the keys in the object you're destructuring. Hope that helps, and anyone please correct me if I've gotten some of this wrong.
The second way is, in my opinion, the best way to go. Your first and third options look nicer for short functions, but when you'll have bigger ones (or 30 of them), with all the doc/comments of course ;), it'll be a lot more readable to have each function defined separately. There's a fourth option, that I'll let you discover by reading (this article)[http://javascript.crockford.com/prototypal.html] by JavaScript demigod, Douglas Crockford.
I think you're saying this because doing things in this way is unfamiliar to you, not necessarily incorrect.
If you have nothing else to go on: function Car(type) { this.type = type; } Car.prototype.drive = function() { console.log("Driving!") } Your code above looks cluttered because you're doing one thing with `type` in the first example and a different thing with `type` in the rest. You need to make up your mind as to whether each car always is initialized with its own type, whether there is supposed to be a default if you don't supply a type, or whether all cars share the same `type`. There are reasons to do different things, but you need to have a motivation. For example, if each instance of `Car` has a different implementation of `drive`, or if `drive` is a closure, you might want them all to have their own `drive` methods. You can assign a new object to `Car.prototype` or manipulate the one that's already in place, that doesn't matter for the example you are giving.
I didn't even read because of the domain name. Tutsplus is ..... not a good place.
Argument against approach #1: You end up creating a new drive() function for every instance of Car which isn't optimal... hanging it off the prototype instead ensures that only one will exist for any objects that have Car in their prototype chain.
You can see an example of it running here: http://blixt.github.io/js-luaworker/ And if you're thinking, "Why?", this project exists because I need to execute arbitrary Lua from the game *Starbound*, to properly emulate some aspects of it in my reverse engineered HTML5 version (currently just a world viewer): https://github.com/blixt/starbounded
/u/codegram - You have posted nothing but your own blog and now your company's personal convention, which you're asking 350 Euros-per-ticket for. Please stop using reddit as a promotional tool. You could instead pay them for advertising and support reddit, rather than flood it with what basically amounts to advertisement.
lol banished? How does one accomplish that? My company co-sponsors NodeMN and I attend RubyMN and the other JS related meet ups. Nice place to meet local devs maybe looking to pair on something 
Looks like they're adapting a bunch of Scala'esqe features - should be exciting stuff.
I use Javascript and CSS extensively on almost a daily basis, including manipulating CSS through Javascript. So no.
Its on my to do list :)
At least take a few moments to implement SSL. While it won't protect against serious attackers, it'll be a whole hell of a lot better than what you've got now
I think the closure vs prototype example is a good way to think of defining your methods. If your method depends on private variables contained within the constructor scope, those methods obviously have to be defined in the constructor. I've always been happy defining methods that don't use variables in the constructor as prototypes. So I think it's more about when to use each than which is the "best practice"
Yeah you're right...
While you're at it, you could require it for everything, even set an HSTS header. Then you'd be ahead of real reddit as far as connection security.
Its just really off putting that if RedditJS takes off it will be throttled by the Reddit API
Talking about OAuth? That should apply either way. I doubt they'll throttle you to a point that matters. And if they do, just talk to the admins, they're generally pretty cool
They told me no whitelisting in person when they flew me out there last month.
good stuff
Theoretically sending a `HEAD` request to the server should do just that. Not all servers support it, however. &gt; telnet google.com 80 &gt; HEAD / HTTP/1.1 &gt; Host: www.google.com &gt; If you need a more reliable method, use `node` or something else where you can get a stream. Send a request to the server and just kill the request as soon as you get any data back.
Hey, Amjad! I was wondering where you went (I'm one of the CC moderators); looks like you wound up at Facebook. Cool writeup, by the way. I didn't know that you couldn't watch custom events! Just wondering why you chose to put your debug utils out on so many globals instead of through one object. Is it mainly a convenience/brevity thing? I know it's all pretty safe with the `$` prefix, but still, best practices and all. I guess, though, that it probably won't be running anytime except for debugging, so it's probably fine. Anyway, I look forward to seeing more posts!
You didn't previously mention you were trying to do this with JS, cross domain, in the browser. Simple answer: give up. Use a server.
Your HTML files is incomplete, add this to the top of it if it wasn't a paste mistake: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; If you want a bigger X, update your .circle css rule to this .square { font-size: 90px; text-align: center; float: left; width: 160px; height: 160px; line-height: 160px; }
If the programmers you're talking to understand css as a key-value store, why is arbitrarily applying these styles in a function chain any easier than using an external style sheet that has a syntax that's really only an equals sign an some commas away from being json? The benefit you described doesn't have any real advantage over vanilla css classes when used properly so I'm inclined to think there's probably just a knowledge gap in people who believe this is solving the root of their problem when really it's just alleviating a small symptom. I can totally understand if you yourself simply prefer the syntax - some people like coffeescript over plain ol js - but at least that has additions that add to some of the many things javascript fucked up... in your wrapper's case you actually take away from using many of css's most powerful features since you only wrap basic styles while things like child or psuedo-selectors would have to be inline inside your write function. The biggest con seems that the wrapper itself isn't really useful at all unless you actually know css already(ie you're not solving any problems surrounding it's ambiguousness) and any time spent learning the "js3 way of doing things" is a lost opportunity for them to learn something that's already a standard. This will also be slower... both in execution time and seemingly lines of code if your examples are any proxy.
Not the OP but already I'm finding it more convenient, given the global namespacing of $0 and (native) $, plus the short names and like you say because you will never put these calls in your code, they are only available to the console.
I think we can solve most of the "callback hell" stuff by not using closures or functions that try to do everything at once. 
Ooh, I loved Virus on the amiga. It had such sweet inertia to the controls. 
Most of the time while we are dealing with async functions we need closures. I guess that we can't really escape from that. 
Bootstrap was created as a template for internal tools at Twitter. http://getbootstrap.com/about/ &gt; Bootstrap was created at Twitter in mid-2010 by @mdo and @fat. Prior to being an open-sourced framework, Bootstrap was known as Twitter Blueprint. A few months into development, Twitter held its first Hack Week and the project exploded as developers of all skill levels jumped in without any external guidance. It served as the style guide for internal tools development at the company for over a year before its public release, and continues to do so today. 
Oh man I spent so many hours playing virus. My mate and I use to fly as high as we could. Flip the ship over and zoom back down, the idea was not to crash but get as close as you could to the ground.. Basically we were just mastering the physics of the game. Loved it.
Yep, I agree. However, I personally have to deal with a lot of closures and the bind method made my code much better ;)
hey, there! It's actually not on the global namespace. It's in a `debugUtils` namespace. However, I do extend the commandLineAPI with the functions so you can use them easily from the console but not conflict with anything else on the page https://github.com/amasad/debug_utils/blob/master/du.js#L29-L38
thank you, I left those essential codes out in posting. so, changing it to that works perfectly for me. is there a way I can do that using "em"? edit: okay I figured it out. using 8em for the font size and 1.25em for bith width and height! thank you so much for pointing me in the right direction :D
:-OO This is good stuff.
You're welcome! In that css rule (.square) for font-size: 1em = 16px, for width/height/line-height 1em = whatever font-size is, so 8em font-size =&gt; 128px, 1.25em width/height = 160px :). You got it spot on!
Outstanding. Thanks for sharing.
LOL. Alrighty. Thanks for trying.
This is what I'm talking about. I think I just leveled up after reading this post.
You could probably pull it off with http://darsa.in/sly/ 
I remember virus, fun game. I would enjoy coding something like it on my spare time. Are you suggesting teaming up? 
If you can also work server-side, I recommend you use mobile-detecting libraries such as MobileDetect. Really really easy to handle, just wrap your script tag in a if ( ! isMobile ) statement. It also helps reducing the weight of your page on mobile devices by not having to make another HTTP request to get the script.
For the breaking on methods, does this assume the methods are exposed off a global var? What if you are using something like browserify where your code is wrapped in a function and all scope is inaccessible from the global scope?
Have a wee look at this David Walsh blog post - http://davidwalsh.name/device-state-detection-css-media-queries-javascript It uses CSS @media to detect and set a value which JS then reads. It has some downfalls but is probably good enough for what you're wanting to do! 
This will work, but if you want something quick and easy to abstract all that and also give you a callback, try this: https://github.com/EvanHahn/ScriptInclude
I think the first use case was a weak argument. If you know something is wrong with *doWork()*, why isn't the break point there? In the second case where global variables are created by missing a comma, I believe JSHint and JSLint will notify you that you've probably screwed up. 
But you can debug the function doWork() is what I mean. I don't understand why you aren't putting the break point there (not on line 4).
i'd never thought about it before, but when i saw the question I realized that this would probably work well enough.
Don't use document.write. What you need is to look at the navigator.userAgent. You do not need explicit values, because you will be looking for anything in there that might identify a mobile devise. var ua = navigator.userAgent.toLowerCase(), mobileTest = (ua.indexOf("mobile") &lt; 0 &amp;&amp; ua.indexOf("android") &lt; 0 &amp;&amp; ua.indexOf("ipad") &lt; 0 &amp;&amp; ua.indexOf("iphone") &lt; 0 &amp;&amp; ua.indexOf("ipod") &lt; 0) ? false : true; if (mobileTest === false) { mahDesktopScript(); } You will need to do some research on mobile user agents and add to the above code as necessary. This approach will solve your problem.
Ah right. Yeah, so what I was trying to say was that I *can't* debug `doWork` because it's from somewhere else. &gt; We have a breakpoint at line 2 which is currently where we're at. We know there's something wrong with the doWork function, and for argument's sake let's say we can't easily find it in the code. For example, let's say you've written something which involves sending a callback into a third-party library's method, and you want to see if the callback is being executed at the time you expect it to, and not being overwritten or proxied behind some other callback. If it turns out a proxy callback is being used (a callback in *their* code which calls *your* callback), you're gonna have a bad time if the third-party library is using the SVP to send it through to another function and something is going wrong, because it's harder to identify their proxy. Not impossible, just harder. Sorry if that sounds a bit mad, callback soup is hard enough to wade through let alone having to explain a particular situation which exists in my head ;)
You shouldn't be using scripts based on device. Rather, you should be using scripts based on page (i.e. if the script is needed) or feature detection (if the browser supports it).
UA detection isn't a great approach, and less so in this case. If going the UA route, I'd do it server side to save the request on an external file if it's not required. That said, UA detection is the reason running Netflix on my media machine is a pain in the ass. Netflix blocks the page due to reading Linux in my user agent string, I've installed Silverlight and can play Netflix streams without a problem. Since Netflix didn't use feature detection (is Sliverlight installed?) - I have to jump an extra hoop
yes
Have things really gone so full circle that we're going back to writing code the C89 way? If your function is so long that the fact that all variables aren't declared at the top is a readability problem, **you need to break that out into more functions**.
Can you show the working-out for "pretentious"?
no
It's probably more of a correlation thing. I'd wager there are some pretty pretentious JS devs out there, and that they're statistically more likely to use comma-first. If someone wants to do a study, I'm happy to fund it (with karma).
I should probably mention that somewhere. But it's good practice to have your application state accessible from somewhere in the console for easier debugging. But if you can't you can always debug prototype methods. For borwserify, you can set it up to implement `require` in the global namespace and then require things from the console: `$dum(require('my-class').MyClass.prototype, 'myMethod')` 
That's a whole other problem. Anyway, the fact that all variables *aren't declared at the top* isn't the readability problem for me. It's that they're all declared at the top as part of a single statement.
Post your code so we can tell you where you're going wrong.
Let it be noted that this is generally the right way, but if the OP is really keen to include scripts based on device they should just go ahead and do it and use he methods we've suggested in this thread. For example, if the OP is trying to drastically reduce the load time of a site which already has a massive, massive footprint from some legacy JS, but *only* for the mobile version of a site, then doing device-specific script loads would be a fairly sensible thing to do.
Without knowing more, it sounds like you might be trying to increment a string. Are you doing something like "`x++` or "`x = x + 1`"? If so, make sure "`x`" is a Number first, by doing this: `parseInt(x, 10);`
Putting the declarations at the top of the scope is not for readability- it avoids certain bugs that can result from javascript's auto-hoisting and scoping rules. How they are declared at the top- as one statement or many- is the readability issue.
I don't see a situation in which you can't find the code. Almost every editor should have a 'find in files' function. Sublime text would do this for you by specifying a directory after command+shift+f. Search for doWork, and on the first line of that function add 'debugger;' . To me this seems better than polluting the code with unnecessary text. 
Nice but I would say it's bad usability because too many things moving around. It's better to just have traditional overlay of text in half of the images. Or best, put the text below the images like Pinterest. No hover.
I mean to use with public web application mostly for Ajax requests and UI effects 
+1 thanks for sharing!
Right, but if doWork() is called from various points in the code with various arguments, it is difficult to only break during the offending call. You can do some silly conditional breakpoint, or you can do the intuitive method of putting a breakpoint at the point where it is called.
Yea, i can do one more version like that...
SVP is a pain in the ass. You delete the last variable and then you have to edit the previous line which makes the merge-edit two lines instead of one in your repository. Edit: Also, correct me if I'm wrong, but I think most minifiers convert to SVP for you, so you're adding a step you don't need if you're worried about old browsers, the only Javascript engines that might care about SVP.
Like /u/camus2 said, jQuery is orthogonal to OOP. jQuery is a utility library that most people use for XHR (Ajax), events, and DOM manipulation. [OOP](http://en.wikipedia.org/wiki/Object-oriented_programming) is a style of programming that models data as objects. If you're doing a large web application, any framework that you use will have some sort of learning curve over people who are just used to jQuery. And I recommend using some sort of MVC/MVVM/etc framework if you want to avoid a world of pain later on down the road. The term "jQuery spaghetti" exists for a reason. Popular frameworks include [Backbone](http://backbonejs.org/), [Angular](http://angularjs.org/), and [Ember](http://emberjs.com/). Backbone is the lowest level, is probably easiest to pick up, and uses jQuery. Ember gives you everything including the kitchen sink, but I've heard the learning curve is steeper. Angular is in between those, and is my favourite out of any framework I've tried.
To allow easier debugging of a production environment if/when you need it.
And when you need to troubleshoot an issue that seems to only pop up in a production environment...
I didnt think people would actually argue with me about that. Relax it's just a personal taste
&gt; And comma-first is just hideous and pretentious Now you are just being persnickety.
There are tons of patterns and utilities out there. A very common pattern that leads to good performance: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript Unfortunately, the above leads to a lot of boilerplate and code repetition, which is why I use [my own class utility](https://github.com/mattdesl/klasse) to improve readability. [Here's how it looks in practice.](https://github.com/mattdesl/cam3d/blob/master/lib/OrthographicCamera.js)
More specifically, here is an [example in D3](http://bl.ocks.org/mbostock/6123708) showing some. but not all of the functionality you are looking for. Mike Bostock(the creator of D3js)'s [Block's page](http://bl.ocks.org/mbostock/) also has examples of tree layouts and is a generally great resource for D3 examples.
The pretentious ones are too busy removing semicolons to care about commas.
Except... I abhor single character var names, so it usually ends up looking like: var someVariable, anotherVariable, thatVariable, andSomeMore; Actually, I try to write my functions with as few vars as needed and it seems to make things really simple. I figure if there are too many vars, the function is too complex and needs a refactor. Also, I Hint, because Lint is too picky.
Also, going back to what Drainedsoul said... refactor the functions into simpler states and packs of vars tend to get washed away.
You can get the width of the device by using `screen.width`, which is effectively similar to `@media screen and (device-[min|max]-width: [])`. Using that in conjunction with an async JS loader like RequireJS, you could conditionally load your JS based on the device. `if(screen.width &lt; 900) { require("path/to/file"); }` Be cautious that you're going to be targeting *width* at this point, not necessarily the fact that the device is mobile. For that you may want to double check if the device is touch enabled. The easiest non-library loading way to do that would be to check if the `ontouchstart` method is a function on the window: `if(screen.width &lt; 900 &amp;&amp; typeof window.ontouchstart === 'object') {` Remember as well that any media queries you have in CSS are going to be unaware if a device is touch or not. Watch your conditions. Assuming you're not conditionally loading a *ton* of files but perhaps delivering a single minified JS package for mobile devices (and/or other devices, depending how many branches you want your tree here to have), it may be more than acceptable to load like this. It certainly meets the concept of "mobile-first" thought, where the overall goal is to not overburden mobile devices with irrelevant scripts and styles.
People who declare variables with return values as their initializers are just people who haven't learned not to do it. var t, d = foo(); is bad for debugging, agreed. var t,d d = foo(); is a general practice. It's a behavior you learn across multiple languages.
jshint should be mandatory in any js project.
I've been learning golang and they dispensed with the semicolon. Just as a comparison http://play.golang.org/p/diQS3rgMUw
I like to declare all my variables at the top with a single var statement, and define them after, sometimes much deeper in a given scope. function foo() { var bar, baz, qux; bar = dosomething(); baz = function() { return 1; }; for (qux = 0; qux &lt;= baz(); qux++) {} } This way, I've determined the variables in the scope, defined them locally, and can debug their definitions easily. I don't really understand the issue with commenting. var // this is a and the first letter of the alphabet. Used to eat apples. a = 1, // b is to bacon as n is to narwhal b = 2, // crap, this sure is simple. c = 3;
[Recommended ](http://javascriptissexy.com/how-to-learn-javascript-properly/)
http://sideeffect.kr/popularconvention/#javascript
'use strict';
What are the bugs caused by variable hoisting? I've never encountered any that I'm aware of. I've screwed up scoping a few times before I got it though my head JS was function scoped, not block scoped, but I've never had problems due to variable declaration position. 
But if you're using a linter, it'll also pick up the problems SVP is meant to avoid, so why not go readable?
Turn on global checking in jshint, and explicitly note (in a .jshintrc or inline) what your intentional globals are?
Ohhhhhh schnapp, he called you persnickety son! You gonna let him get away with that?
I do, its great ;) I've been working with a lot of third party code lately on multiple devices and SVP has been driving me a little bit mad.
doWork could be named something completely different or be an anonymous function. In this scope its called doWork but it could be nameless elsewhere.
The increase in ease of editing comma-first code is microscopic, and thus not worth the akward and non-standard formatting. Typically a comma is indicating a pause after something and not before. Also, in human language, commas are never pulled to the next line. Everything about comma-first is counterintuitive and unnatural, and thus only pretentious people who care more about superficial pedantics than they do about productivity and clarity would use this type of construct.
Exactly what you're talking about- getting confused about scoping and shadowing variables in ways you aren't expecting. The first example on [this page](http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html) was one that took me a little bit to follow: var foo = 1; function bar() { if (!foo) { var foo = 10; } alert(foo); } bar(); //alerts 10, not 1 You can certainly argue that knowing the language scoping rules is a better answer than pushing your declarations to the start of the scope, but it's a small and essentially zero cost change that can eliminate a class of errors that are easy to make but sometimes hard to catch. The interpreter silently changing code in a way that can change the effect of the code is kind of the definition of a gotcha.
As far as software you need on your computer, really you just need a text editor and a browser. In Chrome you can open up the JavaScript console (Ctrl + Shift + J or on Mac: Cmd + Opt + J), and you can start typing JavaScript in right there! This is a great way to try little chunks of code and see if they work, how they manipulate the page, and so forth. As far as a text editor goes, I love SublimeText 2. It does syntax highlighting, as well as a plethora of other advanced features without being too complicated right off the bat.
Moving vars on top and SVP is old and part of [crockfords conventions](http://javascript.crockford.com/code.html#variable declarations). So nothing new here...
But 'don't use a variable before you declare it/only declare a variable once' fixes that bug, without needing to move variable declarations away from where the variable is actually used. Though maybe I just write excessively long chunks of code. 
Screen width/height is rather ambigious. We use the following construct: var ua = navigator.userAgent.toLowerCase(), formFactor = /android(?!.*mobile)|ipad|kindle|playbook|\btab|surface/.test(ua) ? 'tab' : /mobi|windows phone|iphone|blackberry/.test(ua) ? 'mobile' : 'desktop'; You can put this formFactor inside the body's className or decide on it whether you include further scripts: document.body.className += ' ' + formFactor; if (formFactor == 'desktop') { var script = document.createElement('script'); script.src = 'js/desktop.js'; document.getElementsByTagName('head')[0].appendChild(script); } 
comma-first is a _preference_, and like any other preference it's perfectly valid. Throwing it out the window because you don't personally like it is arrogant. If you're on a team, it's usually a group decision on what style to use. If you're not, and you are the only person looking at / editing most of the code you write (most github projects fall into this, at least for 'editing'), then who the hell cares what style you use? Use whatever works for you and saves you the most amount of time.
No, it doesn't. I did put in a pull request to add this a while back (https://github.com/pivotal/jasmine/pull/474), but it hasn't been merged yet, as there's some debate on whether it's a good idea. Debate's at https://github.com/pivotal/jasmine/issues/164; feel free to weigh in if you've got a use case you case about.
sublimetext has an auto-align plugin. I generally tap CTRL+D a few times to select all the equals signs, then CTRL+CMD+A, done.
Thanks, I tried this, but I just can't get it to open correctly. If you have the time/inclination/want gold, here's the script: &lt;script type="text/javascript" language="javascript" src="/wp-content/uploads/2014/03/ad.js"&gt; That I need to open at the start of the &lt;body&gt; if not mobile. I've pretty much given up. ^^^Yes ^^^I'm ^^^ashamed.
Thanks a lot! This works great. I made a small modification to make it scroll infinitely
Convention, then? At what point does a convention become a pattern?
Is this built-in? I can't get CTRL+CMD+A to work when all the equals signs are selected.
I dislike SVP, but the advantage of comma at the start appears to be less tinkering if you modify things, I think.
Again, how is only using semicolons where absolutely necessary (you can't remove something you never typed) "pretentious"? Is this all really still about the Bootstrap thing a while ago and people projecting their impressions of that particular dev's attitudes onto everything to do with certain practices?
Wait, what? Everytime a tool does something stupid, JS developers rewrite their code? At first I thought this would be about having a single global for scope, horror of horrors folks cant even agree how to declare function scoped variables, WTF?
Sorry, I don't think I understand your confusion, can you clarify?
&gt; You delete the last variable and then you have to edit the previous line which makes the merge-edit two lines instead of one in your repository. I totally agree with this, and apparently others do as well, but I'd like to point out that when I use the same logic to advocate comma-first object declarations people look at me like I'm batshit crazy. Why is that?
Wtf?
Firebug doesn't work this way, and steps through each declaration in a single var statement in turn.
Cool, maybe I'll use Firebug next time I come across this problem :)
I've been using it since before Chrome even existed. I can see that the Chrome debugger is powerful, but I just find it harder to use, for some reason.
I think it's because you're then introducing further syntax to make up for the problems with a syntax that was introduced to some previously existing syntax whose problems were solved by the syntax which you're now making up for. In other words: 1. var var var var is annoying to write and looks ugly but at least you can comment out individual vars 2. Only have one var but now the commas at the end are bug-prone 3. Commas at the start! No longer dodgy, but annoying to write and looks ugly And then we're back where we started. Of course, the ugliness thing is fairly subjective.
I've written a bunch of JS tutorials aimed at beginning programmers. www.mrjoelkemp.com. Hope it helps.
That has nothing to do with hoisting and everything to do with not understanding how scope works in JavaScript. Referencing a local variable before it is declared should throw a warning if you're using any linting or code quality tools. Arguing that not having vars at the top is a bad idea because you can construct a situation where writing terrible code leads to unexpected behaviour is a bit of a strawman. I'm not even sure what the code is meant to do if the behaviour is unexpected. One could argue that it's generally a terrible idea to declare a variable in a conditional block if it will be used elsewhere, but that's not an argument for "variables at the top". Maybe my functions are simply too short to make this sound like a realistic problem.
I'm busy writing a library specifically for this use case. Keeping your page load low and serving JS modules as needed. It makes use of RequireJS and allows you to setup conditions under which your modules should be loaded or unloaded. You can find it at: http://conditionerjs.com Looking for feedback and criticism from the community. Any input would be appreciated.
It is, but it's an extra step in config that an end user shouldn't have to deal with, especially as a paying subscriber. Really saying "just lie about the UA" shows how broken this method is. How about desktops with touch screens? Do they not get touch events because they're not considered mobile? How bout feature phones? Is their experience broken because mobile requires touch and they lack touch support? 
Ugly is subjective, but I'm not sure about the annoying to write part. In fact, I think it looks cleaner and has a "self-healing" aspect that helps, visually, by pointing out your own mistakes. Example: there are three errors in the following "commaLast" declaration; var commaLast = { foo: true bar: false, foobar: true baz: false, foobaz: true, } When you do comma-first, the comma alignment would make it trivial to spot the same mistakes. var commaFirst = { foo: true bar: false , foobar: true baz: false , foobaz: true }; vs var commaFirst = { foo: true , bar: false , foobar: true , baz: false , foobaz: true }; And yes ... use a linter.
You make a lot of assumptions about why UA would not be helpful to the OP without any knowledge of the OP's system to substantiate those assumptions. Furthermore, your troubles with Netflix are irrelevant to the OP's problem. In the absence of additional information UA detection is the best way to go if the OP must use vanilla JS. I may very well be wrong, but not until a better answer is presented.
I think your argument is a perfect example of the disconnect. The pretentiousness lies less in what these developers do than in their disregard of what effect their actions have on other developers. JavaScript is not naturally semicolon-free. It is only possible to write semicolon-free code by carefully recognizing and working around situations where not using a semicolon will result in an error (e.g. beginning a line with an open parenthesis after a line that ends in something that could theoretically be called as a function). These situations would not require semicolons or substitutes (e.g. `!`) if the language were designed as a semicolon-free language like Python or Ruby where semicolons are merely used for writing multiple logical lines in a single source line of code (which is frowned upon in Python at least). This means that using semicolons is the default position. Not using them requires a justification. What makes this choice seem pretentious is that the sole justification is usually the developer's personal aesthetics and "style". It's like intentionally wearing a shirt inside-out: it expresses an individualistic choice against the status quo. However unlike wearing your shirt inside-out, straying from the language's default (or even styles the majority uses and teaches as if it were a default, e.g. idiomatic.js) directly interferes with other people working with the code -- be it actively (e.g. contributors or future maintainers) or passively (e.g. beginners or other people trying to read the code to understand it or learn from it). For passive users it is mere obfuscation: beginners may not have enough experience to be sure they understand your intentions (or worse: become more likely to just ignore other things they don't understand which may actually be important) and others will at least require more effort to understand your code (like a lawyer trying to understand a legal text written in broken English -- an effort even if the task would otherwise be trivial for them). For active users this can actually lead to bugs -- not necessarily in your code but in their extensions to it or in code they wrote based on a misunderstanding of your code. There's nothing inherently wrong with writing code how you like it (unless you were paid to write code for other people and are disregarding their interests). Just as there's nothing inherently wrong with not publishing your code on the web or not publishing it under an open source license (or using a restrictive open source license and charging exorbitant fees for a commercial license). But if you're trying to write code for a certain purpose, it can be judged by how fit it is for that purpose. And for any project that is meant to be used by other people, idiosyncrasies likely make for a worse outcome than following the established conventions.
I think it is considered pretentious/hipster-y *because* it is less popular. If the popular choice is the default, intentionally deciding against the popular choice feels pretentious unless there's a good argument for it.
I would be very hesitant to use add a new library in a large project that isn't being actively developed on (referencing yepnope.js and LABJS).
Not really. The only way SVP allows polluting commit history when changing the first or last variable is this: var a = 1, b = 2, c = 3, Note the superfluous trailing comma, which results in a syntax error. With comma first you have exactly the same problem except the syntax error will be in the second line (`, a = 1`) rather than the last one. Comma-first probably only gained any traction because using two spaces for indentation (rather than four or a tab set to the length of four spaces) has become somewhat popular (I'm not sure whether it is the default for JS, but it certainly feels like a majority preference on GitHub, NPM and related blog posts). It creates a "nice" rhythm with SVP when using two spaces: var a = 1 , b = 2 , c = 3; analogous to the four space comma-last: var a = 1, b = 2, c = 3; And as you can see the result looks even "cleaner" when you use a semicolon-free style because you can now swap the last two lines in the comma-first style without modifying them (whereas you can't do that in the four space comma-last example even if you leave out the semicolon because the last line can't have a trailing comma). In other words, it's a clever hack. But it only works if you have the first variable name in the line starting with `var`, use exactly two spaces for indentation and don't use semicolons. And even then it still doesn't let you move or comment out the first variable without touching the other lines. The only reason that clever hack is considered useful is that you rarely need to add a variable to the beginning of the list (whereas you more frequently add one to the end) and probably don't need to comment it out as often. It's a lie, of course. That it's clever should be the first warning sign. But of course the benefits in practice are negligible and it's probably not worth it to change your entire coding style just so you can add variables to SVP lists more easily. You're not switching over to the dozenal system because base 12 makes it easier to reason about time either, right? All justifications for personal style boil down to "I like it better that way". Unlike you have done the actual research and can prove your point or can make a good case -- and adding things to the end of a hardcoded list is too much of an edge case to be a good one.
WebStorm has nice features for javacript (autocomplete, code analysis, etc). I used to use Eclipse before switching to vim, it wasn't bad. You can also sign up for an invite for github's new editor atom.io.
That makes it harder to tell at a glance where the variable is coming from, though. But I'm not sure that is as big of an issue as it sounds.
If you're trying to learn JS in the context of the web, I'd say code academy does a pretty good job. 
As far as I can tell, they do work in this case, actually. But it's still terrible UX because it's too noisy for its purpose.
If you are interested in Artifical Intelligence (AI), you can study how things work in the free open-source [JavaScript AI Mind](http://ai.neocities.org/AiMind.html) for Microsoft Internet Explorer. You may ask questions here and on Usenet in [http://groups.google.com/group/comp.lang.javascript](http://groups.google.com/group/comp.lang.javascript). 
Video has sound sync issues. Unwatchable.
I'm not sure what you're saying. 
this. I declare variables just before I use them. It's more readable and it's a hint to myself that this particular code block may be independent enough to extract into it's own method, in this object, or another.
Would give it a try. How are you planning to take care of loading overhead of conditionerjs file? What would be size of it?
Sure, I've put a copy [here](http://codepen.io/anon/pen/xbpBI). My slider uses 800px squares for the images but the whole thing should scale responsively. Thanks for giving me the start on this, turned out to be a lot easier to create a slider than find one that filled all my requirements. I chose to stick to just jQuery animations instead of CSS3 transitions because we support IE8+ (unfortunately)
Although I am guilty of this myself, it looks like the real sin is calling functions in the var declaration. Again, I do it all the time but I have a feeling it's probably better to do the var declaration and then set the value in a separate line if you're calling a function or something similar that might break. For sure if the function has side-effects (and it certainly might, especially if you didn't write it yourself) it just seems weird to put it in the var declaration. I do often use jQuery code in var declarations but that's because at this point it seems stable enough that it's practically just one step beyond vanilla JS.
Well, the person making the page could always lie and force the browser to load a bad file. For example, say that Facebook discovers a vulnerability in one of its login scripts that allows that website to override permissions and perform actions on the user behalf. Even after Facebook makes an updated version of the script, the malicious website could specifically reference that vulnerable script even after Facebook has removed it from their server. Even worse, it sounds like you're suggesting if I have bootstrap.js on my server, I can just reference the hash for a generic bootstrap.js and it will load any other copy of bootstrap.js on the device with the same hash. So I could, for example, reference the hash for an online bank and then I would have credentials or secure data and because the fake URL I provided for it was part of my domain I would have direct access to it. All in all I don't see it solving a real problem. There are established solutions for allowing backup serving of CDN scripts.
Have you read _JavaScript: The Good Parts_? Some really good thoughts on classes, etc. in that book. It's a fast but worthwhile read.
&gt; You may prefer to write your code on a typewriter I'm not realistically referring to off-the-wall preferences, like wanting to use a type-writer to code. I'm referring to a coding style that a decent number of people prefer. &gt; If your style is a barrier ... that is a code defect If people can't _understand_ a comma-first coding style, they shouldn't be editing anything I write, as there are a million things more complicated than that in most of my code. Whether or not they _like_ it is a different issue. But with most open source projects, the amount of external contributions is dwarfed by the internal ones, and any decent programmer can adapt to any style of formatting for 20-line pull requests. &gt; I'm not saying you have a moral obligation to fix that defect I'm arguing against it being a "defect" at all :) Your argument seems to me to boil down to comma-first being "unreadable", or "confusing" for people that aren't familiar with the style. I would argue that _all_ code is unreadable and confusing to people that haven't seen it before. It is a relatively new style, only really gaining popularity over the last year or so, yet 10% of JS code checked into github uses it. That says, to me, that a good number of people (myself included) find merits in the style that outweigh any perceived costs. But again, this isn't about arguing the merits of some particular style (if it were, we can have the same discussion about hard vs soft tabs, spacing around braces, line-end vs new line braces, etc etc etc...). It's about the fact that multiple different styles exist, and although some "off-the-wall" ones may be discounted (I'm definitely guilty of having more than one style that is probably unique to my code), I wouldn't discount any that have significant popularity simply because I disagree with them. And there are a good many I disagree with.
Although I support your general sentiment, that same sentiment invariably leads to stale languages. I _like_ that the syntax of community developed JS is changing somewhat even though the language is &gt;15 years old and the general syntax of most of it significantly older. I'm definitely guilty of plenty of things that most people (even seasoned JS devs) would look at and go "wtf?", but whether they're patterns I came up with, or ones I copied from somewhere, they have a reason (usually to be more concise), and whenever I've come across similar patterns I spent at least a couple minutes to figure out what it was doing and am happy that I did. They sometimes save a good deal of time. For example: if( ~str.indexOf( str2 ) ){ which effectively is: if( str.indexOf( str2 ) !== -1 ){ but the whole `!== -1` for `str contains str2` is just as obscure to any new devs.
Browserify/webpack/etc are absolute game changers for being able to scale up your front end development. I don't even begin 'small' projects without 'npm install browserify --save' anymore (since small projects have a habit of growing into large ones)
And please for the love of god if you ask for help here put your code in one so we don't have to go reproducing your error.
Read up on how Backbone Views work for a rough approach to what you're attempting (http://backbonejs.org/docs/backbone.html#section-125) Basic idea Views share with OO is encapsulation: each view encapsulates its own dom element, and all mutations of the element should only be performed by the view itself (similar to how you should only be able to mutate an object's state with methods provided by an object.) jQuery is usually used for performing these dom manipulations so that should meet your requirement that it be used. Also, using the .extends method provided by Backbone will let you subclass your views to add additional behavior. Hope that helps! 
indeed, curljs is a good addition to the list.
Makes lot of sense. Would surely try.
But commas at the start doesn't just have to be for vars. [This gist](https://gist.github.com/isaacs/357981#file-comma-first-var-js) shows loads of possible scenarios where comma first is better. @issacs first comment after the code is a pretty good explanation.
[Javascript Fundamentals: Development for Absolute Beginners](http://channel9.msdn.com/Series/Javascript-Fundamentals-Development-for-Absolute-Beginners) was where i got my start. It's a bit slow (especially if you have coding experience), but he anticipates pretty much every question a beginner would have and addresses them in the videos. can't recommend it enough!
Seems fine to me, sound is not great but it's still synced OK for me.
Netflix issue was simply an example that UA detection is not infallible. OP mentioned in another comment it is due to layout/responsive issues, so this is a display concern. So let me propose a very real and possible scenario for this exact case - what happens on a desktop if my browser window is smaller than the point at which the advert breaks the layout? In this exact case, I imagine the best course of action is to check the window size on load, and appropriately display (or not) the advert. Then add a debounced event handler to the resize event, which updates whether or not the advert displays if the user enters or exits the desired screen size.
Zeewolf was an absolutely amazing game. Are you suggesting making a version in webgl?
&gt; website to override permissions and perform actions on the user behalf. Even after Facebook makes an updated version of the script, the malicious website could specifically reference that vulnerable script even after Facebook has removed it from their server Cross-site security is not working the way you describe it. A script downloaded from site facebook.com does not have any specific right on facebook.com. So in your scenario, downloading the bad js file and use &lt;script src="http://myserver.com/downloaded-from-facebook-before.js"&gt; has just the same effect. Same remark for the online bank. If you once had access to the hash code, you had access to the content, could have downloaded it, and served it from another server.
&gt; A script downloaded from site facebook.com does not have any specific right on facebook.com. It does have access to facebook cookies though. So if that script, for example, had a hole in it that let you post messages to Facebook somehow without user permission so long as you had an active session ID for the user, I think it'd still be able to do it. So it would not be enough to replace the script file. &gt; Same remark for the online bank. If you once had access to the hash code, you had access to the content, could have downloaded it, and served it from another server. Good point. I was thinking about scripts that have user-specific code embedded in them. But of course then they would each have a different hash anyway. That said I still don't see how this is an improvement over normal CDN content which is auto-cached by the browser, along with local hosting of said media if the CDN is down. Otherwise you have to keep track of hashes for scripts which is arguably more difficult (particularly if instead of pointing to something like jquery.123.js you point to jquery.current.js).
buy/borrow a book: javascript the good parts.
i know it's a preference. I was expressing my preference. no need for the speech
I completely agree with you OP. :-D
One quick point I want to make is that with the following: var a = 1, b = 2, c = doStuff(), d = doOtherStuff(); you definitely can f-11 right on into doStuff() and once you've returned from the call pressing step-into again will also bring you into doOtherStuff(). Did you actually attempt this? What browser were you not able to step into the function with while using this pattern? It has always worked in chrome as far as I know. 
This is a bit dogmatic &amp; advanced for someone I'm assuming is completely new to programming as well as JavaScript. An excellent text at the right time though
This is exactly what I do. It seems like the best of both worlds. Few vars and debugagable declarations. 
&gt;It does have access to facebook cookies though. So if that script, for example, had a hole in it that let you post messages to Facebook somehow without user permission so long as you had an active session ID for the user, I think it'd still be able to do it. So it would not be enough to replace the script file. Sorry if I am mistaken, but I thought cookie were linked to the domain of the webpage executing the JS. Not the domain from which scripts are downloaded. &gt; That said I still don't see how this is an improvement over normal CDN content which is auto-cached by the browser, along with local hosting of said media if the CDN is down. Otherwise you have to keep track of hashes for scripts which is arguably more difficult (particularly if instead of pointing to something like jquery.123.js you point to jquery.current.js). Yes. It is for developer who don't want to use a famous public CDN for some reason. I have a bit of trouble quantifying that. For instance, I may want to avoid relying on Google CDN if I am amazon, because I am given them precious information about my traffic. I also have no way to alter the version of jQuery to do bad stuff. Finally, when not using https (for instance because establishing the connection is a bit expensive) a third-party who succeeded to do DNS spoofing may do evil as well. You may think that all of this is low risk but I saw google.com being public DNS spoofed in 2007 on public/popular DNS servers at least in Japan. I also saw website going down many times because Google CDN was not accessible.
Yes and basically as you'd describe it. The issue with upload, however, is that the upload file needs to be on the client computer and delivering a multi-MB file for testing purposes is not a great idea. 
I teach a Diploma of Web Development and used to recommend students to use codecademy after class hours. I've almost completed every course provided and believe the instructions are poorly written. I find that my students spend more time trying to understand the questions than writing code to solve the problem. 
Eloquent Javascript
Most likely, it is a chrome extension. Don't just disable, but remove all extensions completely (you can install desired extensions later) and clear your cache.( under settings somewhere) If it reappears it is most likely local malware that is adding it to chrome. Without doing my own diagnostics, this is probably the best help I can offer. When in doubt, you can also clean install chrome. 
Wow, very nice analytical thinking. I only managed 256, but it took me longer than I'd like to admit to get how the movement/combining worked.
&gt; It does have access to facebook cookies though. [citation needed] 