Amazing!
Just to make it clear: this is not a video. Pure JavaScript, CSS, and HTML with the help of the SoundCloud API. Think of it as a scripted visualization. Although the story is linear, certain elements are random, making each viewing unique. The scenes are rendered on a “pixel” grid of HTML divs. Every time we get a playback timing event from SoundCloud, we check if a new sixteenth note has passed, and if so, the JavaScript renders the appropriate sprites on the video frame. This keeps the action precisely timed with the audio. The sprites are JavaScript objects that specify which colors to use and how to arrange them. Since we need to keep things lightweight and efficient, the general strategy is to break the scenes down into reusable pieces and animate them on the fly using math. To make it a little more interactive, we display the SoundCloud comments right on the video on the same pixel grid. You can connect your SoundCloud or Facebook account and post your own comments and see them on the video while it’s playing. We are very excited that this is possible. Gotta love SoundCloud. And math.
Doesn't work. What's it supposed to do?
It's an animated music video, rendered live in Javascript.
That explanation makes me like this a shit load more. Thank you.
Hi, do you mind sharing what device and browser you're using? We've tested on quite a few but obviously couldn't cover every situation. We'd like to get this working for you.
What happens? What browser/OS?
Awesome! Packed full of win.
Be sure to check Sencha's(Extjs creators) [web site](http://www.sencha.com/products/extjs/), it contains a lot of [examples](http://www.sencha.com/products/extjs/examples/) and [tutorials](http://www.sencha.com/learn/extjs/?4x). I've worked with Extjs for a year, and it's really nice for the right purposes. Ext is really extensive so be sure you're familiar with all the features, and style of Ext, before you start writing production code. 
Win7 64 bit, Chrome 15.0.874.121 m, having problem connecting to SoundCloud. Waiting for SoundCloud... Taking a while. Maybe reload? "Unsafe JavaScript attempt to access frame with URL http://analogordigital.wildlifectrl.com/ from frame with URL http://analogordigital.wildlifectrl.com/. Domains, protocols and ports must match."
Best solution for that actually is to reload, since we have no control over SoundCloud API response time. Sometimes it just doesn't respond. Of course, let us know if there's an error in your JS console. Except those like the one you posted having to do with Facebook, Twitter, and Google widgets, which shouldn't matter and are also out of our control.
Thanks for the explanation, I was wondering how the mouths sinked at the end of the video... =)
&gt; a minifier (by my definition) I am using commonly accepted definitions for these terms. &gt; and sometimes reduce compilation and execution time (through dead code elimination and constant folding, for example). The common term for that is a compiler-compiler. Here are some links: * http://en.wikipedia.org/wiki/Compiler-compiler * http://en.wikipedia.org/wiki/Minification_%28programming%29 * http://en.wikipedia.org/wiki/Obfuscated_code &gt; Given this, I don't see what your tools and obfuscators have to do with JavaScript compilers like CoffeeScript. When you create new definitions for common terms it can be hard to know what is being said in a conversation. &gt; Inserting a line of code and making a small modification to another now makes the two "wildly different"? Its too little code for the line difference algorithm to know to look for a comparable sub-sequence from amongst a subset of the larger sample. This is why you be better off using a valid test sample, as in two versions of your own code. I have expanded your minimal example so at to demonstrate your intended exemplification: //base var y = 'testing'; var a = ''; var x = 'hello world'.slice(1); //new var a = ''; var x = 'hello world'.slice(2); Your second example is much better. It demonstrates that when you change things in addition to moving them around you get a result equivalent to a new line of code. The character diff operates only after the line, so this is an expected behavior. &gt; Your tool works well with simple variable renames where nothing else changes. But so are many line diff tools, so I see little need for your tool in its current state. The unique quality of this tool is that you can diff a fully minified file against version of the file that is not minified. I am not aware of other tools that do this with JavaScript. I am even more certain of this regarding markup code. &gt; If the diffing tool dramatically changes, let me know and I'd love to take a look at it. But right now the diffing and minification tools are nearly useless. The patterns demonstrated so far are either trivial or completely unrelated to the tool's core purpose. When you need to compare code where the formatting or the white space is completely incomparable then perhaps you will be using this tool when you cannot find anything else that performs the same task. I will not be changing the diff algorithm to perform English language word diffs and I am not changing it to pass erroneous false negatives. There certainly are other diff tools that will do these things, but these features will not be implemented in Pretty Diff.
I got it working. I just had to allow Flash plugins to run. I take it SoundCloud is Flash, but the rest is JavaScript?
Nice song, cute page. Why'd you choose to use a grid of divs instead of a canvas element?
Any and all feedback welcome. I started building this in May and now seemed like a good time to put it out there and get some feedback. Especially since jquery shut down plugins.jquery.com last week, I needed a new place to host my own jquery plugins.
it's a parser, not an interpreter!
It keeps speeding up randomly. Just kidding. This is awesome; truly impressive.
Yeah SoundCloud uses Flash behind the scenes to load the audio. It also has an HTML5 &lt;audio&gt; engine that it will use if you don't have Flash installed, which is why this thing works on mobile devices (iOS at least). Frustratingly, having Flash installed but disabled via Flashblock or similar means that SoundCloud THINKS Flash will work and so it tries to use that but fails. Couldn't find a good way around that. 
Thanks! Tried both and divs were faster drawing time. Surprisingly.
I'm very surprised to hear that, I've been doing lots of canvas stuff and it's very fast in all modern browsers. Certainly plenty fast for what you're doing there.
Yeah, it's definitely fast, but for some reason it seemed not to be able to keep up with updating the colors of 960 squares every 85 ms while leaving enough time in between to do a fair amount of computation to figure out what those colors should be at any given moment. But I could have been doing it wrong!
It would be easier to figure this out if you had a whole page set up, but it could be that the timeout is too short. I believe that 30 ms is the minimum time that some browsers will respect, but I'm not sure. So try varying the speed from 30 to 200 and see what happens. EDIT: next post down actually discusses this. http://www.reddit.com/r/javascript/comments/ndya7/timer_resolution_in_browsers/
Since there's nothing like seeing working code. Here's some older examples to get you started. http://examples.extjs.eu/
There is no reason that speed variable shouldn't do what you expect. 25 is really small though, so changing it by a little will hardly be noticeable. Try something like 1000 at first, and doing up by 1000 or 500. Those are milliseconds.
The FillColor operation is expensive but there's 2 easy solutions to that: A) Do all squares of a single color at a time. Not always easy, so there's two: B) Use DrawImage instead using images that you create of colored squares. DrawImage is very fast. Just for future reference. :)
I can not use any script that uses eval.
Cool! Don't think the DrawImage solution would be feasible for us since one of the computations we do is to nudge each square's color slightly away from what it's supposed to be on every frame to give it that "analog" effect (try playing with the low, medium, high setting at the bottom). Definitely good to know for the future though. And why is DrawImage faster than FillColor?!
You want a regular expression (or multiple regexes to keep the code clean) - some googlefu will tell you more.
Well you could just have a bunch of Images stored, they shouldn't be very memory intensive since they're not very big, and generating them at the start shouldn't take long either. I have no idea why FillColor is so slow. Hopefully they do something to speed it up. I'm just grateful DrawImage is fast. :)
Thank You :D
*string*`.replace(RegExp('(^0+|-)','g'),'').toUpperCase()`
You're right on. It was too short indeed. Changed it to 100 and it slowed right down. Thanks. 
ok so educate me here a little bit I see that the RegExp removes all leading zero's and I also see that it changes everything to UpperCase. I see the hyphen but I don't understand how that part works and I also don't understand the 'g'. If you could please walk me through this step by step as best you could? Thank You, trust me I really appreciate your time.
The caret (`^`) represents the beginning of the string. So `^0+` means one or more zeros from the beginning of the string. The pipe (`|`) represents `or`, so any series of items separated by one will match. The `g` modifier stands for `global`, so your regex will match all occurrences instead of stopping after the first. Edit: And just to clear up any future confusion in your regex career, the caret also represents `not` when inside square brackets. So `[^abc]` will match anything that isn't `a`, `b`, or `c`.
g is an option for regular expressions, it stands for global; that means it'll match more than 1 time on a string. "()" means to match the pattern contained and capture the result, " ^ " means to match at the beginning of the string, "0" is the 0 in your code to remove, "+" match character before 1 more more times, "|" means or, "-" is the - in your code to remove. Find yourself a good beginner tutorial and here's a [link](http://www.regextester.com/jssyntax.html) for the syntax you can use in javascript.
Awesome work. And it works fantastic on the iPhone too! Makes me want to code one for a friend.
In this case the dash is a literal dash, as it only represents a range when inside square brackets. 
Would it be technically possible for Flashblock to tell pages flash isn't installed? could be useful for lots of HTML5 sites. Maybe file a bug/request about it?
Incredible. Though I have trouble seeing the comments, the font's very light and thin. I can't wait to show this to web dev buddies tomorrow. Great work.
... ... Dammit I can't resist. Here goes: Q: What do you call a guy who hangs out with programmers? A: A web developer. (Based on http://www.savageresearch.com/humor/drummers.html which I first heard in high school band.)
That's pretty sweet. I'm actually really digging your band too. What area do gig in?
Thanks! We have shows coming up in NYC and SF. Where are you?
Hey thanks for your feedback and for commenting on the video!
Ah, I finally get this. Hardy har har! I like it. :-)
Thanks for noticing!
We already have github and npm, what is the point?
Go figure, lol. I'm stuck in The Middle of Nowhere, KS. Thank god for the internets!
Internets 4tw. Tell enough friends and we'll come play a show in KS!
Grazie!
Thanks! We packed in as much as we could. Way more than is recommended.
Glad you watched! :-)
If you 'inspect element' in chrome you can see the divs change with the song, pretty cool.
Well played, Agathos. Well played. :-)
Very pleasantly surprised to have a flawless performance on my iPhone 4. Nice job!
Great question. Github is for source control; it's not really geared toward distribution and discovery. NPM is a much better comparison, but it's node-specific and mainly meant for back-end javascript developers. This site is for all javascript. After all, a jquery plugin is just a script with jquery as a dependency. It's really good at dependency resolution, so there's a possibility for actually packaging up everything you need in one convenient script. There are actually a few other sites that try to solve a similar problem, but with different approaches. A quick list: * http://plugins.jquery.com * http://www.jqueryplugins.com/ * http://www.cdnjs.com/ * http://ender.no.de/ * http://npmjs.org/ * http://www.getbpm.org/ * http://openjsan.org/ jqueryplugins and plugins.jquery are both jquery-specific, and npm is node-specific. cdnjs probably comes closest in similarity. However, there's no way to directly download javascript projects, you're supposed to just hotlink to their CDN (I plan on making this functionality optional on jspkg, but right now, it's just downloads). To add a project to cdnjs, you're supposed to fork the code, add your project, and create a pull request. So, it's not the easiest when it comes to maintaining a js project, especially if you have a project that requires supporting stylesheets, images, etc. And it doesn't do much for tracking versions. ender, npmjs, and getbpm are all command-line utilities for installing (and ender allows searching) javscript projects. This is great for command-line people, but I'm guessing the vast majority of front-end javascript developers are not command-line people. I shouldn't have to install ruby, node, or whatever else on my machine to use some JS project in my app! Just let me download the friggin file and put it in my app. (Now I happen to have all of these installed anyway, but I still think that's a huge barrier for adoption from most font-end JS developers.) openjsan seemed like it started with the same vision, but wasn't very pleasant to use and gave a lot of errors when I tried. I'm guessing it just hasn't been actively maintained for a while. jspkg does have an API (though not finalized), so creating a command line interface should be trivially easy, but initially I wanted a really smooth, simple web interface to cater to everyone. In fact, it would be nice to make jspkg integrate directly with npm or ender at some point. And finally, none of these do much in terms of allowing you to find a project based on what you need. The vast majority of the time, I think, hmm I need a plugin that does ajax tabs, what is the most widely-adopted plugin that does that? As of right now, google is about the only place I can go to try to figure that out.
Well this is just straight up css manipulation. You could easily add a style to the element which does the exact same as the JS. #adiv{ display: none; } 
That didn't work. But thank you anyways.
It didn't work because you have an inline style on the div setting the display. That is going to override what I wrote. &lt;div id="adiv" style="display: none"&gt;&lt;/div&gt;
Thanks! Tiiiiiny bit jerky on a 4. Flawless on a 4S.
Thanks for the discussion on all of this. Your right, I was overthinking the process and realized I could do all of this server side. &lt;code&gt; Really boiled down to... If IsEmpty(servervariable) Then response.redirect CraftedUrl Else response.redirect CarryonUrl End If &lt;/code&gt; Why do the simple solutions take so much time? :)
My recommendation is to watch http://yuiblog.com/crockford/ they are 8 videos of what javascript is. Nothing close to a good how to, but is good background of what javascript is and how to think about him while you write it. Plenty of time to watch them all between today and Monday.
Awesome stuff!
I love it when people say something to the effect of, "That didn't work. But thank you anyways," as if it's not them still screwing it up, but that your idea that was faulty.
I wasn't going to say anything :p
Much appreciated
Almost more fun that way...
I'm a little confused, is the book finished or am I paying $24 for the 2 completed chapters and bonus chapter on jasmine testing? The [site](http://recipeswithbackbone.com/toc.html) would leave me believe the latter... "Here is our planned table of contents. Since this book has not yet been released the order and topics may changed in the future."
&gt; Hmm... &gt; &gt; Taking a while. Maybe reload? :(
Are you running Flashblock? If not, it's likely that SoundCloud is just taking a while to respond, in which case a reload or two should do it.
I, too, am a drummer *and* a web developer. :/
&gt; The patterns demonstrated so far are either trivial or completely unrelated to the tool's core purpose. When you need to compare code where the formatting or the white space is completely incomparable then perhaps you will be using this tool when you cannot find anything else that performs the same task. I will not be changing the diff algorithm to perform English language word diffs and I am not changing it to pass erroneous false negatives. There certainly are other diff tools that will do these things, but these features will not be implemented in Pretty Diff. I was never under the impression that the tool was designed to diff "minified" versions of source code.
As a percussionist, and a Javascript programmer, I appreciate your work on every level here my friend. I had to open the inspector to believe it... mad props!!
console.log((drummer &amp;&amp; webdev) ? ':-D' : ':/');
Many thanks! Saw your tweet. Thanks for that too!
[I am a web developer and I totally agree.](http://www.youtube.com/watch?v=3vAnuBtyEYE)
ToC has been fixed. The book has had its first edition released. Please send any errata to errata@recipeswithbackbone.com. xoxo ngauthier
Note I am NOT a lawyer, this is not legal advice: The site looks interesting but I'd be careful to put huge disclaimers that this isn't a real betting site, make sure your simulation notice is everywhere. The last thing you want to deal with is someone claiming you owe them money because they bet and won on your site. Personally, I'd even change the *currency* to credits or coconuts or bananas not dollars just to be safe, but that's me. I've been around a few bogus lawsuits from people claiming they were misled. 
Thanks! Going to pickup a copy now :)
If you are looking for a base javascript library, I recommend jQuery due to the largeamounts of plugins and flexibility offered by it. It's easy to pick up for basic DOM manipulation and has a lot of good quality resources out on internet. I used Mootools and Prototype earlier but kept coming back to jQuery after learning some critical functions and liking the syntax much better. jQuery (or Zepto.js) also provides some key functionality to use Backbone which allows you to create some richer user experiences with primarily Javascript code. 
I used mootools a bit too, but jquery just seems easier especially with how often it is used. There's so many different interactions that have already been created in jquery that it doesn't make sense to try and start fresh using moo tools.
If you're heavy into AS3, MooTools will feel at home. I did some flash work last year and I was able to jump right in because of my MooTools experience. You'll get a lot of people recommending jQuery, it has a huge community, fluid interface, but to me it rarely makes sense (on the api level). YOu can definitely do great things with it, but a lib like MooTools was a better fit for me and I would say you too as a flash dev. Check out http://jqueryvsmootools.com/ to see the different interfaces/community patterns at work
[this one](http://farm1.static.flickr.com/108/310577351_f41d2d5685.jpg) - I spent hours there as a kid. (sorry, couldn't resist!)
I'd agree with this. I use jQuery day-to-day simply because it's so ubiquitous, but I miss MooTools a lot. Definitely more fully featured than jQuery.
My preferences: * for browser interaction, i use JQuery - there may be technically better libraries, but JQuery works well and has massive community support * for adding functional programming-style functions to JavaScript I use [underscore](http://documentcloud.github.com/underscore/) - it's very handy. * For structuring code I use [backbone.js](http://documentcloud.github.com/backbone/) - it gives you the basis for a well structured app * For client-side rendering I'm currently using [ICanHaz](http://icanhazjs.com/) - though I've also used handlebars.js and there are plenty of similar options out there. * I've also been tempted to use more all-in-one toolkits like [spine](http://spinejs.com/) or [ember](http://www.emberjs.com/) - but I generally prefer to use a bunch of micro-frameworks rather than anything one-size-fits-all * Finally, for unit testing I use [jasmine](http://pivotal.github.com/jasmine/) combined with [sinon.js](http://sinonjs.org/) for stubbing and mocking. This also encourages me to structure my code well - separating out the browser from the rest of the code, following the sort of design principles I'd use for coding on a server, rather than just hacking stuff together.
Mid-Manhattan. No question.
Ok that worked, but now it doesn't give n option to display it like I want it to.
Seconding Zepto as a nice jQuery alternative. It depends on what exactly you need for a project, but Zepto has a lot of functionality packed into a small library.
Q (https://github.com/kriskowal/q) for those times when you do alot of async stuff. Discussion and link to a good introduction here: http://www.reddit.com/r/javascript/comments/lwk24/callbacks_promises_and_coroutines_oh_my/
I really enjoyed working with knockout.js but i've never tried backbone. Does anyone think backbone.js is preferrable to knockout? (unless maybe i'm misunderstanding the purpose of backbone and trying to compare apples to oranges)
I've been pretty happy with the jQuery, underscore, backbone, ICanHaz stack but I've been looking into Ember.js too. It'd be nice to have something a little more unified. Sometimes it feels like my Backbone applications require too much boilerplate, especially when it comes to bindings between the model/view/template.
&gt; I wanted to know if anyone out there can register and test the site. Nope, your registering page isn't working.
Backbone - MVC, I used the [AMD optimized](https://github.com/jrburke/backbone/blob/optamd/backbone.js) version, for ease of use with RequireJS Underscore - Functional programming Emile - CSS3 animations jQuery - I don't actually like including the whole library because I only use it for the selector engine and ajax for Backbone.sync, been considering Zepto or trying [jQuip](http://www.servicestack.net/jqbuilder/) RequireJS - Asynchronous module definition 
&gt; Libraries...whats your favorite? For doing what? 
This trend of "replying for bookmark" has to stop. Reddit is about more than just you.
You should either use your browser to bookmark the comment - that's what permalink is for. Or you can install the [reddit enhancement suite](/r/enhancement) which lets you save comments.
jQuery gets my vote, and it's very good as a starting place if you don't want a framework guiding how you should be coding. That, and Prototype with Scriptaculous (or whatever it's called), are the only two public libraries I have used heavily. I thought Prototype was horrendous, and so helped to convince me how good jQuery was. Prototype generally feels like someone tried to be very clever, and academic, when they designed it. For example you 'observe' an element for events, where as jQuery takes a more pragmatic approach with 'bind', or just 'click', 'keydown', etc for specifics. Prototype uses a lot of 'getThis' and 'setThat', whilst jQuery uses short names, which end up being more memorable. Prototype also has $, $$, $A, $F, $H, $R and $w as global variables for use in your code, whilst jQuery just adds two: $ and jQuery, which are both the same. A lot of Prototype's methods also return null, meaning you need to check for this, and you end up doing a lot of array mapping or iterating for working on elements. jQuery abstracts this away; no element, 1 elements and multiple elements work as one object, and you just work on that. As a result you only write behaviour logic, and don't have to worry about null checks and iteration (most of the time). Finally I found Scriptaculous buggy, inneficient (I was able to easily hand roll animations which were smoother), full of cross-browser bugs, and required me writing my HTML/CSS in very specific ways (the Prototype way). jQuery feels like it's designed to work with any HTML/CSS, where you are in charge, it's animations work very well across browsers, and although it has some warts, you have to use it pretty heavily to find them. Finally jQuery has plugins for everything, and it's trivial to extend. Some people even write websites as a jQuery plugin.
This reminds me of [XMPlay's skinning format,](http://support.xmplay.com/article.php?id=8) which uses a similar method of associating colors with different UI elements. (Completely off-javascript-topic.)
I've got some pretty lame code in some of my unit tests... if you're a jasmine nerd, perhaps you could help me with... https://github.com/jamon/includejs/blob/master/spec/IncludeSpec.js I'm trying to spy on a callback, but since it's passed as an argument, it can't be proxied, as far as I can tell (Which would make sense, since you can't replace the reference to it). Is there a more elegant way to do what I'm doing? I'm just setting a value as false, and expecting it to be true within 5 seconds, and setting the value to true in the callback.
jQuery is pretty much the go to, but if you're working on more constrained platforms (mobile) you should probably look into a lighter library. Zepto.js has an API very similar to jQuery though it doesn't support all the animations the jQuery provides. I've also used XUI which was written by the guys at Nitobi (of PhoneGap fame). Once again it's another lightweight library, but has enough functionality if you are making some lightweight webapps.
I don't know, I'm a *pretty big deal* in my life.
Woah! Iccanhas looks rad! This baically un-ruins my life.
the web.
I keep getting parser errors, wouldn't use it in shipping code.
jQuery Raphaël
You can download the jQuery selector engine as a standalone. It's called [Sizzle](http://sizzlejs.com/).
I vote [npm](http://npmjs.org) because I have so many favorites on there. It's like wishing for more wishes.
Oh, my bad. I missed the checkbox on the right, it was inline with the other content so I mindlessly mistook it for some irrelevant text and ignored it. Perhaps I'm not the only one though, so you might wanna consider putting it below the input fields, on a separate line, before the register button.
Love Q. Use it for asset loading in games, lazy loading for Node servers, flow-control for state machines... It's a wonderful, tight API allowing many uses to be built on top.
I tried two reloads and no Flashblock. I guess it was just busy. :P
Thanks for the link. I use jQuery daily since the CMS I develop for uses it by default, but now I'm interested in checking out MooTools.
Have you tried again recently? And just in case... do you mind sharing what device/os/browser you're using? Would like to get to the bottom of this...
I'm on a different machine on a different ISP on a different browser in a different city, but it worked fine now :) Edit: I was on Firefox/Win 7. I didn't bother to see if Firebug was working.
Cool, yeah maybe was busy for a bit... Appreciate you traveling and getting a new machine just to check it out! ;) 
I quite like [neon](http://neonjs.com) for obvious reasons ;)
Try not to manipulate element style directly with JS. Have a class "hidden" or something, with a style sheet in the header that sets visibility for elements with class "hidden" (.hidden {display:none}). Then you can use JS (or JQuery, if you prefer) to toggle that class for elements you want to hide or show. Bonus points if you do it in a way that non-JS browsers still can see your content. This [blog post](http://www.learningjquery.com/2008/10/1-way-to-avoid-the-flash-of-unstyled-content) discusses the issue in more detail.
i believe this is what you were seeking: [Crockford on "with"](http://www.yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/)
I have been using the $.Deferred object of jquery a lot in a prototype of an app. I read somewhere that Q is compatible with this. In you opinion, is that right? Can I be confident of going from jquery to Q? thanks :) 
It's a religion thing. PS: Check the date: "July 13, 2006"
One var declaration per scope is recommended (because of the hosing thing). But if you check my production code, I'm sure I forgot to reorder and join the var declarations in a lot of places. I think the important is to know how it should be written. Is far worse declaring variables inside a for. On the other hand, even if that way of declaring variables has nothing wrong, is the kind of code that make me think: "If this guy is declaring variables like this, I don't know what other strange things will I find". Nothing more, just strange. PS: I recommend you read the issues (and comments) posted in Douglas Crockford's jslint in github. Sometimes it's hilarious and I learned a lot from that reading
They smell bad. It doesn't matter if they aren't malicious, they just stink. :)
Cocos2D JavaScript for HTML5 game stuff. 
I'd do the web. Sounds like fun. 
There's an /r/geelong? cool! Mind you, I moved to Melbourne a very long time ago... still got some nostalgia for the old town though. (go Cats!)
My [HTML5 version of Thrust](http://fforw.de/static/demo/thrust/) uses SVG al some kind of level-DSL. Some shapes just end up like they're drawn (walls etc), some are just symbolic representations. Either only the location counts, or you have e.g. a circle where the center describes the position of a wall-mounted gun thingie and the radius it's observation/action radius. SVG gets parsed with the help of jQuery XML parsing / querying.
Backbone.js is lighter - it doesn't do templating or UI binding, it just gives you a Model/View/Controller structure, with some event handling and jquery/zepto ajax syncing. I haven't used Knockout, but have heard good things about it - but it definitely is more of an all-in-one framework (not that there's (necessarily) anything wrong with that)
I really like MooTools, its class design feels a lot nicer than jQuery (but perhaps that's just me). jQuery are catching on and are starting to use classes for some things (like the widget factory in jQuery UI) but I still like MooTools API a lot more. For graphing, Highcharts is awesome.
One of the things I dislike about jQuery is that all plugins seem to go into the $ object. Prototype and MooTools plugins generally have proper class names. That and plugins are just standalone functions with no support for inheritence, so you can't easily modify them without changing the plugin code itself (although the widget factory in jQuery UI is changing this, but the core jQuery doesn't use this).
I use jquery and jquery ui
This approach is as old as it gets when you use tile-based maps. You can also use different channels (rgba) to add additional data to your tiles.
Expound please on why you prefer it
Yea I know I just don't know if I can plug it into Backbone like I can jquery or zepto
ah ok, thanks! I do like light frameworks, but i picked knockout specifically for the UI binding which it does very elegantly. Anyways that'll help me making my decision next time.
Thanks for the detail on your motivation. When I write JS which is designed to work in both Node.js and browsers and I have `npm install blah` as my Node install instructions and (comparatively crummy) links to .js files and a list of dependencies for my browser install instructions - I'd love a browser-targeted equivalent of npm and this looks like a step in the right direction - integration with npm itself would be amazing! Uploaded something simple to try it out - the package.json generator is very nice.
* Some kind of reset.css. * Some kind of module structure for the Javascript. * jQuery - used sparingly it is wonderful. * jQuery UI - used even more sparingly. * Plugins as the project requires, but as few as I can get away with, really. 
append.to
Set click handler on links that would pop open an iframe, is what I'd do for what you want, if I understood you correctly.
I think DrawImage copies the array of pixels the image is stored as from the image to the canvas. Writing from one array to another can be incredibly fast if the browser/OS optimizes that function.
I have no experience using jQuery's promise system, so I cannot comment.
http://eloquentjavascript.net/ is a good start, it has interactive examples 
Is that a website? Doesn't seem to work here.
&gt; try setting the fill color! How do I do that? I'm messing around with it right now and am having some trouble.
before you fill use ctx.fillStyle = "rgba(0, 0, 200, 0.5)"; Red green blue alpha values Mozilla docs are great for canvas stuff! https://developer.mozilla.org/en/Drawing_Graphics_with_Canvas
It doesn't need to be in the window.onload, but I'm pretty sure it's there to just help readability and to make it easier to understand. Personally, this really helped me get a decent foothold into how to approach canvas. So, for those who are wondering, this isn't a bad tutorial, and I wouldn't be too critical of how the code is formatted as it's really well presented for the context of the tutorial itself.
vapor.js is perfect for me.
https://github.com/nelson54/jqFlashCard/blob/master/js/mylibs/jqFlashCard.js &lt; source for plugin
It kind of defeats the purpose of a *jQuery* plugin; if it's browser-specific, doesn't it? What part of it made it browser-restricted?
Well, I am trying to learn how to better use CSS3 transitions along with Javascript. I am having a kinda difficult time getting the transitions the way I want them, I could have flipped the cards in Javascript and it would have worked. I just really want to figure out how to better use CSS3 transitions.
&gt; Java**S**cript has no Interfaces and there are some design patterns that needs them Which ones?
Awesome work! It seems that it's not real-time, since the music has to be generated then played back... How would you construct something that plays notes in real time? I'm trying to make a synth thing in Javascript, but I'm, uh, inexperienced as a programmer. Any ideas?
It would probably help to give us some kind of hint as to what your problem is. ;)
Try adding width and height properties to the canvas, that did it for me.
Maybe [this example](http://www.webkit.org/blog/386/3d-transforms/) could help you.
I've written a simple html page with light purple background and a blank white canvas 300 x 300 top centered on the page. When running the code the page and everything looks fine. I even had a colorful ball that rendered properly before I tried to make it move, now nothing renders at all, it remains white upon running.
in the html potion of the document that is specified &lt;canvas id="mainCanvas" style="background-color:white;" height="300" width="300"&gt;Canvas element not loading.&lt;/canvas&gt;
Here is my totally biased opinion: try to write a browser extension.
I have put your code up into this [jsFiddle sample](http://jsfiddle.net/ma3382/jRnjr/) so its easier to show/modify. I also added some basic bounds checking for the ball. You had a typo in one of your function calls, which invalidated the entire script. ctx.clearRec should be ctx.clearRect. If you are using Chrome, press the F12 key to enter the development tools and you can see errors like this pop out in the script. Edit: As a side note, if you are going to be doing canvas work, you may be interested in checking out the [jQuery jCanvas plugin](http://calebevans.me/projects/jcanvas/index.php) for easier syntax/cross browser support.
I recommend you to read 'Head First Design Patterns' or 'Design Patterns: Elements of Reusable Object-Oriented Software' from Gang of four. Strategy design pattern.
Strategy Pattern for example. But interfaces are not needed in a language like javascript. I think this is the kind of thing people make when not comfortable with a new language. Is true that you can implement any pattern in javascript without needing interfaces, but maybe some people miss the error you get when your class don't fully implement an interface, like in java or c# From my point of view, this is like all those library for having classical OO in javascript. 
Do you have firebug? If not, install it and look at the console output. Maybe repost the output here.
You're using the same DOM node to set all the images. When you run it through the loop, the browser is being smart and queueing up things that modify the DOM. So it's very likely only downloading the last image. What's nice is that you don't need to add the image to the DOM to get it fetched, so you can try something like this: for(i=0; i&lt;7; i++) { (new Image()).src = 'img/' + i + '.gif'; } You don't need to set the result to any variable - if you use Firebug or Web Inspector (Chrome/Safari), you can see that the resource is downloaded and cached, so it'll be ready when you do actually use it.
`images` isn't defined. `tokenImage` isn't defined. `i` isn't defined. Since you overwrite `tokenImage.src` right away, there is no need for the browser to load any of the other 7 images. The src attribute is set to "img/7.gif" when you return the control to the UI thread. There is no onload callback. Are those images pre loaded for the next page, some kind of user interaction, or something like that?
Interesting. This does work just fine. (At least in Firefox.) I assumed that you'd need to hold onto the image somehow (e.g. with an onload callback), but that doesn't seem to be necessary. [I always used callbacks because I wanted to know when it's done.] So, why *does* this work? As far as the browser is concerned, this Image object shouldn't exist.
1. I created it 2. Lightweight, simple API, easy DOM manipulation
Ah, true, you will definitely want to assign all the images to variables if you want to assign callback functions. Good question - this just seems to be how things work. The image is fetched before it's added to the DOM, even for images that are never added to the DOM. Note that the behavior is different for dynamically added scripts: setting the src doesn't fetch the JS until the script element is added to the DOM.
The object exists for at least a brief moment. That loop constructs a detached DOM node with the given src attribute, and so the browser anticipates that it's going to be inserted into the document's DOM tree at some point in the future and fetches the image. It can't know at that point that the object will end up getting garbage collected without ever being inserted, and once it's fetched the image it's there in the cache regardless of what happens to the DOM node that caused it to be fetched. 
As I said: "As far as the browser is concerned, this Image object shouldn't exist." These objects shouldn't exist anymore once you return the control back to the UI thread. (They only keep existing if the environment automatically creates some kind of magic reference.) I'd say this works for backward compatibility reasons, not because it makes sense. Well, it's not like this quirk would hurt. If you do something like that, it's probably because you want to preload that image. Completely losing interest in some image you just tried to load a split-second earlier is a very unlikely scenario. I mean, I can't even think of a use case for that.
&gt; this Image object shouldn't exist I don't see how you come to that conclusion. You have a HTMLImageElement object whose src attribute is modified. How is that object to know whether it's a detached object or has been inserted into the document? It can't, because every node has to start out detached before it is inserted somewhere. From that object's point of view, at the time it's src attribute is modified, it has no idea whether the next statement that's going to be executed is to insert it into the document tree or not, so it has to assume that it's possible and go fetch the image at that point. It can't predict the future. It doesn't matter at all what happens when the function returns. The fetching is queued up the instant you touch the .src attribute on a HTMLImageElement node. It seems like you have some idea that when the object is GC'd it should somehow reach back into that queue and remove that request. But who's to say that the object is GCd right now? Maybe it's not GC'd for a few hours. There's certainly no guarantee if or when that will happen. 
&gt;How is that object to know whether it's a detached object or has been inserted into the document? If the object isn't referenced somehow, it can't be inserted into the document. It's gone. &gt;Maybe it's not GC'd for a few hours. That's not the point. You know that there aren't any references to it and yet you *start* to download that resource. That's the quirky bit.
Http://www.dominionstarter.info
Yep, it only preloads the very last one (img/vetoed_lil.gif). You can see that in Firebug's net panel. Try franksvalli's suggestion. I.e. something like: for (i = images.length; i--;) { (new Image()).src = images[i]; } &gt;`images[164]="img/dir.txt.gif";` You should remove that one. By the way, it would look a lot nicer if you'd use array literals. E.g. something like: images = [ "img/0.gif", "img/1.gif", "img/2.gif" ];
I heard you liek bloat. So we got some bloat from Java and put it in ur JavaScript.
&gt; If the object isn't referenced somehow At that moment, it is referenced, because it is used in an expression, which means that there is a temporary anonymous variable. This is necessary because the created object then has its attribute modified, and so there has to be something to hold the value of that object. The expression is as if someone had written: { let tmp = new Image(); tmp.src = "whatever"; } `tmp` is created and then quickly goes out of scope, but at the point where `.src` is modified it has not yet gone away, and there must be a reference to it held. If this were not the case, and there really were no reference, then imagine what would happen if a GC cycle happened at just the moment after the object was created but before the attribute was changed. It would see that the object was not referenced and it would collect it, which is obviously bogus because then you'd have some kind of null or invalid reference in the next opcode evaluated. So there must be a temporary reference held until the end of evaluation of the expression. Therefore, if you were to put some code in the handler that gets called when `.src` is modified, it would be completely unable to tell whether this object had a future life or if it was destined to expire shortly.
http://learn.appendto.com/ Turns out they changed their URL since I was there last.
It isn't referenced anymore at the point where you return the control to the UI thread. Well, it appears that at least Firefox starts the resource fetching right away and it will also cancel that if you change the src value quickly thereafter. I'm not sure if this detail is specified. E.g. I know that Opera fires onload right away if you set src to a data URI, which is technically alright (as far as I can tell), but no one else does that. I'm too lazy to investigate this detail; it just isn't interesting or useful enough.
It doesn't matter what happens when control returns, the request has already been started by that point. Why would any implementation *not* start the request as soon as the src attribute is set? What would you have it wait for? Besides, waiting would just cause the page to appear to render slower, and browser vendors are in the business of making things appear to render fast. 
Wow, a lot of limitations, but good work nonetheless.
Appreciate the message, but his example is very buggy when it comes to touch handling.
The Strategy Design Pattern does not need interfaces to be implemented.
Shouldn't the word parallel be replaced with concurrent.. or am I missing something? Cool nonetheless I guess
any love for [sugar.js](http://www.sugarjs.com)?
What do you guys think about D3? 
I can't say for sure but to me "concurrent" means a more randomic situation whereas "parallel" is usually a set of identical tasks running at the same time and the main process waiting for all of them to finish, concurrent applies when there's several unkown or heterogeneous tasks running at the same time. it's just a matter of semantics I guess.
This... is really confusing.
&gt;command+shift+u OH GOD WHY Still - cool fading/moving alien effects (original reason to look at the source)
Yep I know this thing is a just a quick experience...
Off topic, but I found it interesting that you used "serie" instead of "series." One of my roommates is French and he does the same thing.
there seems to be a big advantage to having a much wider resolution browser since the game auto adjusts and therefore seems to give you a bit more time to react on larger screens... just throwing that out there :) nice job
I was immediately turned off to this article when I was called a "conservative laggard" because I don't like CoffeeScript.
CoffeeScript is a language that solves zero problems.
Your comment confuses implication with biconditionality. The article says that “conservative laggard” ⇒ “dislikes CS.” It does not say that “conservative laggard” ⇔ “dislikes CS.”
TL;DR: Coffeescript is just syntactic sugar. Fair enough.
Perhaps the speed can be a factor of screen size then?
Correct me if I'm wrong, but spinejs started as a fork of backbone. It's much smaller in size than backbone.
&gt;**Coffeescript is not a language** Funny, that's exactly what I impulsively wanted to post before reading TFA.
Fair enough, but do you see where I came to that conclusion?
I will be more careful with statements like this in the future, thank you.
I might accept the argument that CoffeeScript is not worth using in many contexts, but it is absolutely worth learning. It may not change the way your program is run from the computers point of view, but it definitely changes the way you think about a programming language from the programmers point of view. That is ultimately a good thing and some of the features of CoffeeScript will make their way into the next version of JavaScript which will benefit us all. 
Maybe im the exception then, but I have been -massively- more productive on my personal project since switching to Coffee. Yeah, I know the complaints, and yes, I do do a lot of debugging in JS, but I -love- JS, so I don't mind debugging primarily in it. I do enjoy not having to reach over and type (, ), [, ], {, }, ',', and ';' every 5 seconds even though the tought process behind those symbols is already in my head when I'm typing. I can also show off the code to (for instance) Ruby programmers who aren't massively fond of JS and they can instantly make suggestions or contributions. So yeah, I wouldn't try to rewrite Firefox in CS, sure. But I have -way- more fun coding in CS than anything else, so that makes it more than _worth learning_ to me. Some of the computer-science efficiency nazis might hate it, but I've written about 8k lines of it into my game-engine already and I enjoy it :) A word to the wise though, do not try to get into it unless you're -VERY- comfortable with your text-editor (and of course with javascript). You _will_ make whitespace mistakes and VI can be your only hope sometimes :) Also most of the time you'll have to be reading JS to figure that out. Once you get the hang of coffee though, you'll spend 15 min writing something that would have taken you 45 before. You'll type "class Foo extends Bar" and you'll forget how many times CS is typing out "prototype" for you.
Let's fragment the development community because people like to bicker over where to put semi-colons. Weee!
WTF? The linked article is just a pointless wrapper around [this](http://ryanflorence.com/2011/2012/case-against-coffeescript/) post.
What a bullcrap article
Coffeescript may not be a language, but it makes the code look cleaner to me and it irons out some of the quirks of JavaScript. Call it syntactic sugar, call it whatever you want. I like working with it.
&gt; it definitely changes the way you think about a programming language from the programmers point of view. I did not find this to be true, at all. From what I've seen, it's javascript for ex-ruby programmers with some python love thrown in for good measure. At a fundamental level, it's just a pretty transformation of javascript. I wouldn't go so far as to not call it a language, but I will guffaw slightly at claims that it will fundamentally change the way I write javascript. Because, I mean, it didn't. Better examples, in terms of changing the way you think about programming, would include common lisp, haskell, factor, and other languages that follow fundamentally different paradigms (s-expressions, stack-based, a ridiculously powerful types system, etc).
and Orc
I'd recommend anything on how to meditate and on how to relieve stress.
&gt; it's javascript for ex-ruby programmers Nail on the head. CoffeeScript is nothing but syntactic sugar to make JavaScript more palatable to people who like Ruby. It just turns out there are a lot of those people.
Isn't this ~~crap~~ why we have /r/coffeescript? **Edit:** Didn't mean to insinuate that it was a badly written article. I just objected to the choice of venue.
Speaking as the author, no, and that’s whyI didn’t cross-post it there. I’ll accept that the article is crap, but my reasoning for posting it here is that the article takes the position that CoffeeScript is really all about generating good JavaScript rather than about its value as a “language” in and of itself. Thus, I took the position that this article is really about JavaScript as generated by CoffeeScript rather than being about CoffeeScript. One person elsewhere was surprised that the article seemed to assume that having generated the JavaScript, you might discard the CoffeeScript and maintain the JavaScript directly.
Who said anything about "fundamental" changes?
Does the mp3 or aac decoder use less CPU?
So sort of like Coffeescript?
*parallelmap* is a hack, but *parallelworkers* could be pretty useful to parallelize a web worker. In *parallelworkers*, you're held to whatever limitations were already on Web Workers.
Haha, your article isn't crap. It actually seemed fairly well written. I'm just sick of CoffeeScript evangelizing (which is what I meant by 'crap.') I get your point though.
There are a lot of different date formatting tokens, see these issues for a little background on the formatting tokens. https://github.com/timrwood/moment/issues/49 https://github.com/timrwood/moment/issues/61 Also, here is a comparison of some common date formatting tokens. https://docs.google.com/spreadsheet/ccc?key=0AtgZluze7WMJdDBOLUZfSFIzenIwOHNjaWZoeGFqbWc Also, I only use toString to get the timezone abbreviation, for all other things, I use the native getters and setters. See these lines in the source: https://github.com/timrwood/moment/blob/1.2.0/moment.js#L75
I wouldn't call it "pointless" - JavaScript really does benefit from a nicer syntax. But I agree with the post I linked to, it doesn't really get you away from JavaScript, and arguably makes things more complicated.
Just for fun, go to the coffeescript homepage and read the first sentence. 
To be fair, TWT and list comps are pretty pythonic.
In my opinion, "changing the way you think" requires new concepts---fundamentally new concepts---to be introduced to you by the language. Syntactic sugar is great, but with regards to the quote alluded to in the article, this mind-altering effect can only be satisfied in this regard. I want to be clear: I don't hate coffeescript. I don't like writing it, but if other people like it then that's great. Being a hater never got us anywhere.
And it actually creates new problems. proof: http://www.reddit.com/r/programming/comments/nmtmu/the_problem_with_implicit_scoping_in_coffeescript/
What? Are you reading the same article I am?
'nicer syntax' is an opinion, and not a fact in any way shape or form. To me coffeescript's syntax is atrocious. 
I'll settle for calling it an "extremely pretty operational risk"
&gt; A language that doesn't change the way you think about programming is not worth learning.—Alan Perlis Stop right there. Here we go differ already. When I see my code written in JavaScript and compare it to the code written in CoffeeScript, there is a fundamental difference. The CS code is basically functional, whereas the JS code is imperative because it is just too much hassle to write and nest so many anonymous functions. It is like C and Vala. You can write OOP code in C, but with Vala it gets simple enough to do it for everything, because it is so much easier then writing tons of gobject function call. And in my opinion both Vala and CoffeeScript are worth learning, if they apply to the field you want to work in. Of course, if you don't want to do web programming, then don't learn CoffeeScript. But then don't learn JavaScript either, because that language is noth worth learning either. If you want a prototype based language for widening your horizons take Io, not JS.
Coffeescript might make code look 'cleaner' if you are referring to significant whitespace, but that same whitespace also makes the code more ambiguous and more difficult to comprehend. When you take something that that is clearly delimited and make into something you have to think about before you understand, it does not in any way help developers understand or write code faster or better. I've seen many posts about coffeescript code being ambiguous and difficult to follow. It would be a nightmare if writing anything more than a few hundred lines, especially if you consider the problem with var and reusing variable names in coffeescript.
$('.up').trigger('click');
you are in the wrong subreddit. Nobody comes to r/javascript to read about how coffeescript will make your coding better, because it really won't. Most people that read this subreddit already know the arguments for and against coffescript, and you posting this here is only going to get hate from everyone who's decided that it isn't for them. People using coffeescript are likely reading r/coffeescript, and will likely agree with your article more than people reading r/javascript will. Coffeescript isn't about generating good javascript. It is quite the opposite in fact. Coffeescript is about writing Ruby that compiles to javascript that is difficult to read and difficult to debug, for the sake of style fetish (significant whitespace).
You weren't the only one who found that to be a little obnoxious. 
fuckin' awesome. thank you!
To me CoffeeScript is like going from a Jaguar to a Lexus. Yes JS is quirky and has some rough spots, but other than that it's a rather fluid and quite wonderful language. 
Well, you and I disagree about whether this particular article is relevant to JavaScript or not, and we absolutely disagree about the point of CoffeeScript, which you know full well from the article. You’re entitled to your opinion that I am wrong about the point of CoffeeScript, and likewise entitled to your opinion about what people do or do not come to the JavaScript subreddit for, and even your chauvinistic opinions about whether CoffeeScript is like Ruby or like JavaScript. Personally, I can’t imagine comparing CoffeeScript to Ruby, that’s like saying a Karmen Ghia is like a Porche because they have similar shapes from the outside. The guts are entirely different, which is the subtext of the post: That the guts of CoffeeScript is JavaScript, not Ruby. A language for Rubyists wouldn’t just look like Ruby, *it would act like it*. A language that compiled Ruby to JavaScript wouldn’t be *anything* like CoffeeScript, and understanding why this is so is kind of the point of understanding what programming languages are really all about.. But I tire of responding to you, I expect you came looking for an argument, and you have found one. Go your way in peace.
I am almost certain that coffeescript isn't *about* writing "Ruby that compiles to javascript that is difficult to read and difficult to debug". I mean. that may be what it is, but that's not what it's *about*.
Why is this title pointing at Internet Explorer ? It doesn't have anything to do with Internet Explorer at all, it has to do with the fact the ECMAScript standard allows unicode letter for variable name and that ಠ is a "Letter Other" unicode letter. It works in all browser that correctly implement that ECMAScript standard. Also, since that standard includes just so many character you can really make a ton of funny looking JavaScript variable name like : ஓ, இ, ಫ_ಫ, ഉ_ഊ,௫, etc.
 I didn't come here looking for an argument, you posted this here looking for an argument. If you didn't want an argument you'd have posted it in r/coffeescript. But no, here we are, and you are surprised that your article isn't well recieved? |Personally, I can’t imagine comparing CoffeeScript to Ruby This demonstrates your lack of critical thinking. We're not comparing apples to oranges here. We're comparing significant whitespace languages (Ruby, Coffeescript), to non significant whitespce languages (javascript, C). Coffeescript is more like Ruby than it is like C. Javascript is more like C than it is like Ruby. It seems that the user base for coffeescript is mostly made up of people who would rather be writing Ruby. If you somehow don't understand this concept, then it's no wonder you are confused that I am comparing Coffeescript to Ruby. I am not the first to make this claim, it is made over and over and over again like a broken fucking record by many people. If you don't get it, not my problem. Maybe the people in r/coffeescript can better help you understand it.
In your mom.
You do know that whitespace isn't particularly significant in Ruby, don't you? Perhaps you're thinking of Python.
Ruby/Python, those are the large majority of people using Coffeescript. I've really had this argument too many times to give a fuck about being absolutely correct in the eyes of everyone who reads my comments. I've seen Ruby code that is nothing but whitespace, maybe not significant, but it looks the same. Big deal. You want to be pedantic about it, be my guest. This is the response you get. If you want to write front-end code, and you aren't using Javascript, then you're complicating things for yourself and anyone who will inherit the project from you. That's the bottom line.
Your argument lacks merit, unless you believe that the only place to conduct a conversation is the venue where you expect people already agree with you in practice and principle. Meanwhile, STFU.
http://bonsaiden.github.com/JavaScript-Garden/
| One person elsewhere was surprised that the article seemed to assume that having generated the JavaScript, you might discard the CoffeeScript and maintain the JavaScript directly. This is even more asinine than starting out in coffeescript. In fact it's the dumbest thing I've heard this month.
Coffeescript is syntactic salt.
Maybe someone should make a fork of CoffeeScript. It would be just JavaScript, but with CoffeeScript syntax.. so you wouldn't be able to use list comprehensions or deconstructors.. but you wouldn't have to use 'var' or semi-colons, or 'return'. I would love that.
Oh? I agree that if (If!) you adopt CoffeeScript for a project, you want to keep using it for a project, but that being said, if I had to choose between two tools, one of which generated JS that I could maintain independently and the other of which generated inscrutable code, I’d lean towards the one that generated independently maintainable code. I would sleep at night knowing that if we ever changed our minds and wanted to walk away from the tool, we would still have a JS codebase we could use. It’s an edge case of sorts, but consider the case where some company hires a hotshot who makes everyone code in CoffeeScript, then fires him when they realize he spends more time writing blog posts than working code. If they bring *you* in to clean things up, you can toss the CoffeeScript out without having to rewrite everything on the spot.
happy birthday.
&gt; posting something like "Javascript is a beautiful language" in r/coffescript would be warmly accepted there If it isn’t, they’re doing CoffeeScript wrong :-) I quote the first paragraph of the CoffeeScript home page: &gt; Underneath all those awkward braces and semicolons, JavaScript has always had a gorgeous object model at its heart. CoffeeScript is an attempt to expose the good parts of JavaScript in a simple way. As for flame bait, the article posits that using CoffeeScript is about writing good JavaScript. How could anyone who likes good JavaScript take offence? Sure, I can understand disagreeing with the premise that it’s about standardizing on good design patterns, or its syntax, or whatever, but do you really read that article and come away with the impression that it is denigrating JavaScript the language or the people that prefer pure JS to CoffeeScript?
You could sleep at night leaving the next guy an autogenerated codebase?
The main point of this post goes entirely against [reddiquette](http://www.reddit.com/help/reddiquette): * Post to the most appropriate community possible. If you're submitting an article about American politics, for example, it would be better suited for /r/politics than /r/worldnews. 
Doesn’t it depend on the codebase? One of CoffeeScript design goals is to generate readable JavaScript. If you feel it falls short of that goal, fine, but it isn’t like its authors prioritize compact or faster code at the expense of readability. They’re *trying* to make it good JavaScript.
&gt; It doesn't have anything to do with Internet Explorer at all, it has to do with the fact the ECMAScript standard allows unicode letter for variable name Do other browsers support this part of the standard?
I've seen the code coffeescript generates. __it __is __awful __to __read. What you propose is really not the right way to go about writing code. Yeah, if I had to accept a job converting coffeescript to javascript I'd have to live with it, but I likely won't ever be in that position in the first place, because I'd never work for a shop who considered coffeescript a good thing, even if the people who decided that left. I may eat those words someday if we go back to dot-com-bubble-burst days (and SOPA may do just that to us developers), but as things are now, I wouldn't waste my time with a project like that at all. Sometimes re-writing things is a better way. Throwing out the source coffeescript though? That would just be inexcusable. All information is useful, even coffeescript sourcecode.
Yeah, right. Now try reloading the page and seeing how many of those votes actually registered. (Answer: not many.) Reddit rate limits on their end, so this kind of hammering won't accomplish much. 
They aren't trying to make it good Javascript, they are trying to make it passable and not cause any performance hits. I've seen places where writing coffeescript will give you worse performance because there are gotchas in coffeescript too that will screw you if you don't fully understand everything the language is doing when it compiles to javascript. One example I read just today on [hackernews](http://news.ycombinator.com/item?id=3371171): for i in [0...test] doSomething() for i in [0...test] by 1 doSomething() compiles to: var i; for (i = 0; 0 &lt;= test ? i &lt; test : i &gt; test; 0 &lt;= test ? i++ : i--) { doSomething(); } for (i = 0; i &lt; test; i += 1) { doSomething(); } If you didn't realize the implications of the 'by 1' your javascript code would come out performing worse than if you had just written a standard for next loop in javascript. It's this the kind of thing that coffeescript introduces, and it will muck up your code if you don't really know what you are doing. Even jashkenas calls this a 'grey area'. There should be no grey areas in coding, this kind of thing will bite you in the ass, and there are many more. Just look up all the discussions on the coffeescript forum on 'var'. It's a joke how confused people are about how to initialize a variable in a language that is supposed to make coding javascript easier. 
OP has never had the misfortune of having to fix someone's Dreamweaver-created website.
Based on JavaScript's closure syntax alone CoffeeScript's syntax is clearly superior.
Okay, i've had a chance to see a few people, especially you, post very negative comments, but how does that equate to "Not well received?" Perhaps "controversial" would be more accurate. There are a few folks here, especially you, who take this kind of post very personally. There is talk about this kind of person, or that kind of person, generalizations about the kind of people who use language X or hang out in subreddit Y. My experience is that this kind of talk is rather boring and destined to go nowhere for either of us. It's an essay, not an attack on your way of life. Nothing in there said anything disparaging about you personally or your choice to avoid CoffeeScript. All this talk of essays like this not belonging here are really proxies for certain social behaviours around inclusion and exclusion dynamics. We could just as easily be talking about sneetches with stars. Don't kid yourself that anything written here really is about the reasoned debate between open-minded individuals seeking understanding. Tomorrow, or sooner, this post will have dropped off the JavaScript front page. If it offends you so mightily, I suggest you accelerate its departure by finding and submitting quality articles that you like rather than trying to convince me that I'm an uninformed idiot who doesn't know his place. Until the next time we meet, I hope your life is full of productive and fulfilling programming.
To save people the effort: &gt; CoffeeScript is a little language that compiles into JavaScript.
Oh, so it's the very simplest things like for-next and var that are the confusing things in coffeescript? I see now..
? The problem is the ridiculous verbosity of JavaScript's syntax.
You aren't the first misguided coder to post about coffeescript here, and I know you won't be the last. You say I take it personally, and I don't, you are mischaracterizing my posts to make me seem like a zealot, which I am not. What I can't abide by is the copious amount of disinformation coming from people who say coffeescript is something it isn't, like "coffeescript is more beautiful than javascript", "coffeescript will help you write better javascript", and my current favorite "coffeescript will make your front end code perform faster". With this level of crap invading r/javascript, it is no wonder that I, and others aren't happy to see any coffeescript article posted here. And the day is coming, oh I just know it is, when i'm asked to fix someone's javascript code only to find the source was written in coffescript. That day I will have a handprint on my forehead from the giant facepalm that will no doubt occur. The more coffeescript marches on, the closer this day gets and yes, it is worth my time spreading the truth about coffeescript so that maybe at least one new coder won't make the mistake of adopting coffeescript for their companies front end codebase. 
The problem is the ambiguous whitespace syntax of coffeescript.
Ambiguous in what way?
Ok, so to make sure that I'm not as misguided about you as I am about my post, you aren't happy to see any articles about CoffeScript, because 1. The people writing and/or submitting such articles are misguided, and 2. You are protecting yourself and others from the posibility that one day you will have to deal with a CoffeeScript mess. So here you are presenting the truth, and doing your best to keep the crap out. With an agenda like that, there isn't a lot of room for civil discussion, it might mislead people into thinking there are ideas worth mulling over.
Both Firefox and Chrome are just fine with variables named ктоείναι草泥马 and ಠ_ಠ, but they rightfully reject a variable named happy☺n☺mat☺p☺eia because U+263A ('WHITE SMILING FACE') is not classified as a letter. The poster misinterprets the fact that one of the three identifiers is invalid as lack of browser support, and incorrectly concludes that only IE9 supports unicode identifiers.
It's amazing coming here from more encouraging, constructive areas of conversation and seeing the seething neck beard nerd rage. Fits and commotion about theoretical scenarios and deep set personal grudges. It's an overdose of hate, particularly this rude leptons guy. I need to go back to getting my JS news from Peter Cooper and other sensible, sane people if this is how the JS folks conduct themselves.
Build an application, then I'll care. 
As someone who came to web dev from desktop dev, I'm a little confused; what's so bad about "fragment[ing] the development community"? It's not like people are limited to only learning a couple languages or anything. This is a concern I've only heard recently, and only in regards to javascript (e.g. Brendan Eich has voiced this concern). Is there something unusual about javascript that makes it particularly vulnerable to the perceived disadvantages of fragmentation?
Why the downvotes on the submitter's comments in this thread? Even if people disagree with what he's saying, he appears to be discussing his submission with humility and good faith.
No, but I find it more pleasant to use than regular JavaScript.
It brings out the flavor of our JavaScript?
To me CoffeeScript is like going from a Toyota to a Lexus. Pretty much the same car with some bells and whistles that many people don't think are worth the extra cost. (I drive a Toyota and like to write CoffeeScript)
Why is he binding click events to the anchors and causing manual navigation? Isn't the whole point of the router to omit any such event binding and simply listen to hashChange or fallback to polling for older browsers?
Hey, if he doesn't understand it, it's ambiguous to him. At least it's not ambiguous to the compiler. Thank goodness for that.
Can't tell if earnestly clarifying self, or just being true to username.
could they make this any more confusing
It dissolves the structure and leaves you with a soup of words. Kind of like pouring salt on a snail. 
If web development needs to go any direction it would be towards less, not more fragmentation and towards more, not less consistency. The [original HTML 4.0 spec](http://www.w3.org/TR/1998/REC-html40-19980424/interact/scripts.html) for instance, clearly anticipated that [tcl](http://en.wikipedia.org/wiki/Tcl) along with Javascript and VBscript would soon be common realities. What an insane nightmare that would have been. As a developer, not only would you be worried about 2 or 3 different versions of 3 or 4 different browsers on 2 or 3 different platforms and each ones notion of what "Javascript" is, but now you'd have 2 more languages to worry about on top of that. It's taken me years to master the annoying nuanced differences in CSS and maybe you are too young, but before JQuery and the other frameworks, it was a crazy amount of work to get almost anything going. JQuery did a lot to kill the fragmentation; and you didn't have to use its stuff if you didn't trust it. CoffeeScript however, is a kitchen sink. If you implement something in CoffeeScript 1.2, then be prepared to support it for 10 years, in all the future browsers; even if it has a to-javascript error in Firefox 11 in 2013; who knows ... it has *pure potential* to be a rats nest. Even though I have an intellectual suspicion it's safe; I have a deep gut feeling it isn't. Although maybe everything will be fine for you; perhaps you are the guy that can pull every slot machine in a row and come out a winner; but most of us seem to fall victim to details that are a result of permutations of implementations. This is not to say that I will **never** consider Coffeescript to be a decent choice; just that when you are making such a bold suggestion as to totally restructure my syntax, you need to have a lot of pudding to prove to me that it's not a leaky abstraction with a deep dark twisted rabbit hole of pain. tl;dr From a native developer point of view; think about it as if you needed to support 4 different datastorage technologies over UDP, TCP, Unix domain sockets, and FIFO pipes. The implementation is written in Python. Now J-cool-kid has something he calls "Pinlon"; which simply compiles to Python. He starts submitting "Pinlon" code. Are your arms opened or crossed for this person?
|I need to go back to getting my JS news from Peter Cooper nobody's stopping you. the exit is -&gt; that way. 
No, it isn't. The first paragraph may be, but the rest of the article takes a different direction.
This perfectly describes why I hate coffeescript and the recent "trend" towards semantic whitespace and minimalism in languages. The structural syntax is there to help you comprehend the structure of code at a glance. If its just a wall of text and whitespace you have to expend much more mental energy to understand the structure. No thanks.
Maybe it's more like syntactic A1 steak sauce, and people are "ruining the steak, man!"
I'm actually an author of a [compiles to such-and-such](http://qaa.ath.cx/TheEmperorsNewClothes.html) language; it's really the effort spent on the dramatics that I can't stand; such a waste of time. There's early-adopters, late-adopters, and traditionalists; I'm in group 2. I shouldn't be going around bashing the heads of the other groups and when I see it happening I'm just thinking "ug ...". The emacs vim war doesn't actually affect my workflow, but this; this certainly would.
You need a README in your git repo that summarizes your library and gives examples. That's the first thing I look for when going to a git project - it's like a welcome mat for new users.
Operational risk? Do you think the generated code is *that* bad?
&gt; It would be a nightmare if writing anything more than a few hundred lines, especially if you consider the problem with var and reusing variable names in coffeescript. Maybe that's where CoffeeScript is strong: smaller projects. My only CS project so far has a couple hundred lines, and it was nice to take advantage of CS's support for 'classes' and inheritance. I see what you mean though. The project is fairly animation heavy, and I use jQuery.animate() for that. The params are broken up over several lines plus a few farther indented lines for a callback. Code like this could become a little hard to comprehend if you're new to a project or if the project is really big.
That's right, I will make one a soon as I can... EDIT: Added, I will extend it with examples later...
There is two sample apps under ./examples using the http and net modules. More coming in next days...
Has anyone pointed out yet the problem of such projects not being allowed realtime priority? 
No - the generated code is actually pretty good, and pretty readable. It's just less readable than JS we write in-house. Here's the thing. Coffeescript, as the linked article rightly states, is not a language - it's a shorthand. You write the shorthand and the compiler generates JS source from that. In exchange, the compiler is now a required dependency for deploying your app. Obviously, any programming project will have dependencies - and at least one of those dependencies will be some combination of a language, compiler/interpreter and a VM. My job as an architect is to try and balance the risk/reward from those dependencies and to ensure that we've got a solid base for the foreseeable future. In smaller, shorter-lived projects my developers are free to choose their tools, within reason. If their tools need support from the ops team and introduce new build requirements for our servers, I start asking questions. We certainly make use of LESS and a few other convenience tools in those smaller projects. I wouldn't raise an eyebrow if one of my devs wanted to use coffeescript here. For longer-lived projects (such as our video player - I work for an online video platform) I'll remove that option completely. I do not want a project to be slowed or worse, to become undeployable because of bugs or brain drain on an external dependency if I can possibly avoid it. For these projects we'll pick the most stable dependencies possible, and factor the app code so that dependencies are addressed in a modular fashion that allows us to replace them in a pinch. Coffeescript doesn't give us that luxury - once you've written coffeescript, you're on coffeescript until you rewrite it in plain javascript. One instance of a burn like this (that we suffered) is Merb - we had our core API platform running on Merb when it was a lightweight alternative to Rails with serious Ruby community guys behind it. Everything we hated about Rails, Merb fixed for us. Then, overnight, Merb went up in smoke. We were stuck maintaining the framework AND the application for our own needs. Development slowed over time, and eventually we were forced to rewrite (we chose the JVM for our new build for performance and ops reasons, and Scala as the language for its terse ruby-like capabilities that also give us a whole lot of compile-time safety nets - here the rewards outweigh the risk). So. Do I want to introduce a completely unnecessary layer of indirection to turn stuff that looks a bit like JS into actual JS, when equivalent benefits can easily be achieved in native JS with a little bit of forethought - and do I want to do it at a cost of potentially losing the ability to compile my app if the CS compiler contains bugs or worse, stops being maintained when the notoriously fickle (not a slur; fast-moving language communities produce ideas rapidly) JS community finds something shinier? No. It's too much unnecessary risk for not nearly enough reward. We all write javascript, and our code runs right on the VM. That turned out far too long. I hope it at least clarified my position :)
Decafscript?
http://i610.photobucket.com/albums/tt190/cursieve/2a4wg7qjpg-1.gif
I don't use any audio decoders that require anything other than normal default process priority. They all work fine. In fact, even these JS decoders seem to work pretty well, except for the using lots of CPU.
The title is misleading. The entire article is a bit of a troll and posting it in r/javascript is trolling. Good faith and humility? You're new here, aren't you.
I made several try, but all particle are drawn even if it's outside the canvas. Update needed!
the one on the right it appears. But it still slams my core and occasionally drops; about the same performance as a native player on my NeXTStation/30 from 1989.
&gt; What an insane nightmare that would have been. What nightmare? Just specify the correct media type and move on.
I wouldn't. There's nothing wrong with it.
It works, and the functions are nice and short, but it feels like a mess of goto statements with too many functions in the global scope, no?
1) Stop using jQuery. 2) Use a single global wrapper. A function would be more ideal for performance, but an object literal would work as well. Do those things, but until that I wouldn't waste any further time on this.
&gt; 1) Stop using jQuery. So you'd rather handle the css selectors/ajax calls bareback? Or is there another framework you like for these kinds of things? &gt; 2) Use a single global wrapper. One object literal? So wrap the whole thing in something like this? $(document).ready and all? myPage = { function1: function(){ }; function2: function(){ }; ... }
Id rearrange functions to be defined in the order they were called for clarity purposes.
Wrap it in a closure if it bothers you. It's your scope remember.
 (function($) { // everything :) }(window.jQuery)) This would not leave any variable in the global namespace, But, if you can't put all your code in one function, or you want to have a global variable, you can do: window.globalName = (function($) { localName = function() { // any function which you want to perhaps bind to the global name }; // example function localName.functionName1 = function functionName1() { }; // make local &gt; global return localName; }(window.jQuery)); edit: this post was suposed to be a reaction to austincheney, aw well ;)
mainly just tidies up the handler's, not too sure what's going on with your markup, but it looks freaky (the url generation is a hint) and not too sure what's going on with the load stuff (never used it myself) obviously not tested.... http://pastie.org/private/dm4n0odv86kjrgdyevqizg
YUI &lt;3
&gt;In exchange, the compiler is now a required dependency for deploying your app. This is a huge problem. Because everyone would have to code in CoffeeScript in order to keep the CS up to date. If someone changed JS and didn't update the CS, the CS people on your team would overwrite all the changes. If there was a way to take existing JS and convert it to CS this might not be as big of an issue, but I doubt such a tool exists.
Will your solution work with on(), instead of live()? Seems this has been deprecated...? Or is it still in common use? http://api.jquery.com/live/
If you truly want to change the way you think about programming languages, read a book on Lisp. I swear, after doing that things made so much more sense.
CRUD = Create Read Update Delete
RTFA: &gt; **I noticed that in Internet Explorer (but, unfortunately, not in the other browsers I tested)**, you can use some Unicode variable names... ಠ_ಠ
change the function styles from function setHandlers() to var setHandlers = function() {}; The functions that have that as a parameter - they could be better. I'd change it so that you pass $(this) to the function (rather than this). See in the setHandlers function, you're passing this, on a selector that is already found, then you're re-finding that selector in the function you call. If you just passed $(this) to the function that takes that you can then just call that.attr('myAttr') rather than $(that).attr('myAttr') which has to traverse the DOM again to the find the selector. Hard to tell with no view of the HTML, but selecting on only class names, eg $('.delete') is pretty expensive, unless you just have one level of hierarchal html. In your functions you often have something like this $('#'+model_name+'-to-add').show(); If the 'model_name_to_add' id is nested under that, you could speed things up by doing that.find('#' + model_name + '_to_add') If you're worried about adding things to the global scope, you can always wrap your code in a self-calling anonymous function (function($) { all your code })($);
I might "simplify": $.post('/'+ model +'s?' + "scheme_id=" + scheme_id + "&amp;" +"name=" + $('#' + model + '_name').val() + "&amp;" + "link=" + $('#' + model + '_link').val(), function(data) { $('#' + model + '-container').load(scheme_id + ' #' + model + '-sub-container', setSchemePage); For readability to: $.post( '/'+ model +'s', { "scheme_id" : scheme_id, "name" : $('#' + model + '_name').val(), "link" : $('#' + model + '_link').val() }, function(data) { $('#' + model + '-container').load(scheme_id + ' #' + model + '-sub-container', setSchemePage); } ); (Disclaimer: Doing this from memory...) (Sorry about the edits, it's not taking my "4 spaces for code".)
&gt;change the function styles from &gt;function setHandlers() &gt;to &gt;var setHandlers = function() {}; Why is this better?
CoffeeScript is a really awesome experiment that puts to test some ideas that could be useful for ECMAScript. It's not a production-code language though. 
After sleeping on it, I'm not sure that we really have much dramatics here. I think we have a troll squad. The substantiative counter points are "I'm not arguing, you are!", "I think it's ugly", and "It's hard to debug for The Next Guy". Irrelevant commentary, just said with enough ardor from one guy to make a point. What's happening is, when you hollar loud enough without any substance, it sounds pretty dramatic.
Fantastic answer. Thanks for taking the time to put that together! I want to explicitly say thanks because the substance of your comment is practical, and backed with some genuine cause and effect.
I don't mind semantic whitespace in a language like Python; it's the "optional" everything else that makes me want to stab things. Optional parenthesis: No, thank you. I like to know when functions are being called and which arguments are which *without* inserting them myself. Optional return statements: What does this function return? Oh, whatever is returned on the last line. That's cool. What about that explicit return a few lines ago when we short-circuited the function? Yeah... no thanks. Inversion of control flow (or *optional paths* or some stupid nonsense): Because it totally makes sense to figure out what the code will do when a condition is met BEFORE understanding the condition. Not like the code won't get executed if the *pre*condition isn't met or anything.
I think it exists. Not that I'm suggesting this is anything other than suboptimal: http://js2coffee.org/
I prefer to work outside of frameworks. I find that native JavaScript is substantially more portable and easier to read. As far a single object literal you would use it like the gui object in this file: http://prettydiff.com/jsgui/jsgui.js
&gt; \__it \__is \__awful \__to \__read Yep. Can it be done? Absolutely, I don't think either of us question that. Is it pleasant to read? I think it falls somewhere between *Ulysses* and *Twilight*.
Ah yes, just move on. And learn the subtleties of two more languages, which get _pretty subtle indeed_ when you're considering TCL. And learn the ins and outs of one DOM implementation for each language that you work in. And hope that I can download a snippet of TCL code and call it from my VBScript web page. And don't complain when Microsoft thinks it's the right day of the week to add another language to Internet Explorer. And don't be annoyed when you visit a site saying: "this page is best viewed in Opera, which is the only and thus awesomest browser that supports Ruby." And never mind that my smartphone will from now on carry three scripting languages inside its browser. As will my desktop, with the added bonus that it's possible there to open a tab for each scripting language that my browser supports, thus loading three runtimes into my system's (not infinite) memory. Question: Should I be able to bind a DOM event to a TCL function from JavaScript code? Because that would be fun.
Design patterns are _not_ about how to write a class or how to write a loop but about how to organize the interaction between classes. What the writer of the article means is that CoffeeScript standardizes a selection of JavaScript language idioms, not design patterns.
I'll have to take a look at this for one of my many projects. Does anyone know how it gets the spectrograph information? Typically this is done by making a separate program analyze the audio and build a text file which is consumed by Javascript to display the spectrograph in Canvas.
Now that's a button I wouldn't even mouse over until my repo was backed up in ninety different places, including the moon.
Bait title duly noted...
Well that's sweet of you to say. Thanks!
This is an original observation, thanks!
and then hope that each version of each browser on each platform by each vendor behaves exactly as intended for each language? Then, after that, I will hop on my flying Llama and sail into the night.
RTFM The answer to the question doesn't have anything to do with Internet Explorer in particular. Even if the question mention Internet Explorer, it still doesn't have much to do with Internet Explorer in particular. Unicode variable works in other browser too.
I just started writing with it mainly because a rails generator for backbone.js i'm using generates to it and honestly I haven't had any problems yet. I'm even able to debug the javascript it generates in the browser really easily. I pretty much agree with the post. If you know javascript already you'll be able to move back and forth with out a problem.
You should register click handling immediately instead of waiting for the entire page to load. 
That is not your concern unless you choose to supply every language under the sun. You have to support what you are willing to supply.
You don't have to learn two more languages. You are only responsible for what you are willing to supply. Why do you think you would have to learn other languages?
I would do something like this: http://www.pastie.org/3048462 Putting everything into an object literal is nice for preventing conflicts. It also keeps things nice and clean. I love me some initialize() functions, those should usually appear first (although vars defined for your literal should come before that, but we don't have any here). Beyond that, add goddamn comments. Tell me what a function is doing. Oh, and I didn't really go through the code with a fine toothed comb. Some of your "this" references will probably be a little different. Oh, and as a general note, I'm not sure why you're feeling you constantly need to make returns on click functions. Unless you're dealing with a &lt;a&gt; tag which has a href attribute, it's probably not really necessary at all. It seems like the code is constantly handing things off and around which it doesn't need to. Anyhow, that's how I'd start at least before getting too picky.
For those who are interested, I’ve added some afterwords discussing the title, transpiling, and kaaskop42’s observation that CoffeeScript introduces idioms.
According to the Stackoverflow question, it only currently works in IE, and not in any other major browsers. Unless you seriously expected the Reddit submitter to exhaustively check every major browser just to see if the SO question was correct, it seems unjustified to get sarky with him for repeating the (not unbelievable) claim. *Are* you in fact claiming it works in any/all other major browsers?
Its not better, its mostly a matter of taste. One thing with benihana's way, is that it iseasier to accidentally create global variables if you define each function with 1 var statement and chain then together with commas (common when trying to save space). If you accidentally miss a comma, everything after it is now a global variable.
Thanx!
As an employee I don't call those shots.
Using 2.1.5 here, I've noticed sometimes the code sense stuff seems to go off the rails, spikes CPU and injects noticeable delays while typing. (The 'idea' process which usually sits at around 4% of a CPU spikes when this happens.) Quitting and restarting the app seems to make it stop for a while. I know, I know, 4% of a CPU when I'm not even using the app is clearly a bug, but I haven't found anything better myself so I'm putting up with it.
the CPU usage is actually mostly the visualizer not the decoder. you can try disabling the visualizer by clicking on it to see for yourself. :)
Try disabling the visualizer by clicking on it. Turns out the visualizer takes up most of the CPU usage. The decoder is actually pretty efficient.
The visualization is generated in real time using an FFT in [audiolib.js](https://github.com/jussi-kalliokoski/audiolib.js) which then goes to a simple canvas script to generate the graphs. The source for the visualizer is [here](http://codecs.ofmlabs.org/js/ui/visualizer.js). 
Firefox 3.6.24 reporting in: Check.
I would also update your original post to describe what this library is about.
if that's true then it's one horrible demo. I think most people would notice their computer getting slammed going to the page and think "This is reeedic-u-lus ... screw this"
A comparison of CS and JS is absolutely relevant to a JS community. It is not, however, relevant to jQuery or CSS communities. If you're comparing American politics to current current world political events, it would be just as much at home in the politics community as the world news community.
Some people think that this is better for minification. If you are using a good minifier then it doesn't matter. It also leads to programs that are harder to debug. Take my first advice, there is nothing really wrong with the code you posted. It's easy to understand and to debug. If it ain't broke...
 function K(value) { return function() { return value; }; } function Person(name) { this.setName(name); } Person.prototype.getName = K(""); Person.prototype.setName = function setName(name) { this.getName = K(String(name)); };
That's an interesting but useless technique. Since you have a getter and setter for the data it's not "private".
because take a look at any IT job ad on craigslist, that's why. If you aren't familiar with companies and the multitude of languages used to create a single website, you wouldn't be asking this question. here's a pretty tame one today from craigslist: Requirements: &gt; Expertise with Photoshop, Flash, Dreamweaver, HTML, CSS &gt; Video Rendering and Encoding into Flash and MP4 format; must know how to render Hi Def quality while maintaining reasonable file size &gt; Must be able to take a design and use HTML and CSS to turn into site &gt; LAMP (Linux, Apache, MySQL, PHP) experience a plus &gt; Familiarity with JavaScript, AJAX, XML, HTML5 a plus &gt; Familiarity with Wordpress, Modx CMS a plus &gt; STRONG SEO awareness and experience a plus &gt; Development for iPad a plus now lets add Coffeescript , Ruby , and whatever language you want on top of this, no, add 12 languages (where will it end??). Now there's a library written in haskel that they really want to use but it only is working for Firefox, Safari and Chrome right now because haskel has a DOM bug in the library that prevents it from working in IE and Opera and they want you to code a workaround. And they want to hook their Ruby user tracking code up to the web app drag and drop code written in native coffeescript (gasp!) so they can track drag and drop events. no thanks.. 
 Person.prototype.toString = K("[object Person]"); Not completely useless. But still interesting. :)
Is this a comparison? It looks like a Coffeescript-centric passive aggressive justification. Comparisons lack a lot of the drama, no?
I really wish that SVG support was more widespread. This page would be so much shorter. "use .addEventListener() on mouseover and mouseout"
3.0 has just come out - give it a try. So far for me it seems a bit smoother. I tried using 2.x, but ended up using Sublime Text 2. 3.0 is making me considering getting a licence.
I'd say it's *much* cleaner to use the standard jQuery module pattern in this case: i.e. (function( $ ){ // code here })(jQuery) The code is relatively simple, some basic interactions. Also, it's heavily interconnected and doesn't seem to export anything. The object literal pattern you're using here is best suited for something like a library where you're exporting a lot of functions. Using the literal pattern here is messy; you need to indent more, you need to add a bunch of commas etc, and you need to add "this" to a bunch of places. This makes the code harder to read, harder to compress, and easier to mess up. It also makes all the functions anonymous, which can make debugging harder.
SVG is just as widespread as canvas, isn't it?
I'd agree with that as well, absolutely.
It was deprecated, in my mind, in version 1.4.2 when `$.fn.delegate` came out. `$.fn.on` is the way to go, moving forward.
Speaking with my author hat on, **I agree that it is not a comparison**, it is an essay advancing the proposition that CoffeeScript programming is JavaScript programming, not programming in a language that happens to transpile to JavaScript. As such the comments (whether in agreement or disagreement with the proposition) of JavaScript-centric programmers are vital to the discussion. In the same vein, I suggest that debating whether such an approach is or isn't JavaScript programming is within the purview of the JavaScript subreddit. Naturally, one could answer "Yes it is JavaScript programming, but the result is terrible JavaScript," and so on, and you will note that I have avoided debate as to whether it is better to use CoffeeScript or not here. In the essay itself, I specifically said that if you're writing good JavaScript, continue to do so with my blessing, the article does not suggest that everyone drop what they're doing and do something else. My interest in posting it here is the feedback relative to the proposition, and it has been interesting, to say the least. The additional colorful feedback of a more tribal nature is an unexpected bonus.
I know that the Android browser doesn't support it- given I'm working on mobile, that destroys it. Don't think IE does does either, even though the newer versions do have Canvas support.
http://caniuse.com/#search=svg IE 9 and up. Just like canvas. Looks like Android got it with 3.0. No idea how common that is since I don't work on mobile apps.
I like SVG, but its pathetically slow when you want 10,000+ objects that move (as in some games or the canvas diagramming library I'm writing) Merely loading 10,000 DOM elements is performance ruin.
IE9 supports SVG and IE8 and below support VML which is a bizarro implementation of SVG. Lots of libraries (like raphael) use SVG and fallback to VML in IE8 and below
It actually works in Safari, Opera, Chrome, Firefox and Internet Explorer. That's pretty much all the browsers.
Does it make that much of a difference if you are loading your scripts from the footer of the page, as it seems best practices would suggest?
Your **circular-list?** is broken. ~ load("srfi1.js") Tests completed! ~ mylist = srfi1.cons(1, srfi1.circular_list([2,3,4,5])) [object Object] ~ srfi1.is_circular_list(mylist) never returns (infinite loop). Implementing that is actually a common interview problem, so I'll leave it up to you. The source code for it should be trivial to find (e.g. SRFI reference implementation).
Just a quick fyi...3.0 is not that widespread at all.
I wrote my As3 VNC client in 5 hours. Implemented from the spec. Between 2:30 and 7:30 AM on a saturday.
None that are as good as say Eclipse or NetBeans for Java, but there are plenty which are excellent. Two that stand out for me are NetBeans and Visual Studio. They both have excellent syntax highlighting (so accidental globals are pointed out), and even intelli sense. Although personally I use NotePad++ because it's find/replace is much nicer, is consistently good across a range of languages, and for JS I prefer to just use explorer for project management.
Why? Personally, I just use vim with a jslint highlighting plugin. Some of my co-workers use Eclipse and IntelliJ, but I've found that neither of those IDEs provide much functionality for how much slower they are. I think the code completion in vim is based solely on previous word usage, so its not smart enough to only show you the variables accessible in the current scope for instance. I also do a lot of dev work in the javascript console in Chrome, which gives you some nice autocomplete help sometimes too.
I use textmate, but if you really want an IDE, you should check out [webstorm](http://www.jetbrains.com/webstorm/)
You can't beat TextMate with the JavaScript lint plugin and AckMate.
Binding data to the dom is a dying pattern. You are better off using an MVC approach to separate your view and data logic, try Backbone.
Why is Gob the thumbnail?
For me it's gvim all the way. The trending editor these days is Sublime Text 2 which is pretty cool and doesn't have a steep learning curve
textmate with some choice bundles/plugins is a big part of the most pleasant development workflow i've ever had the pleasure of using. Try it, or SublimeText if you're on windows/linux.
I use Visual Studio, with full intellisense and refactoring support. I use a trick for that, it's called [Script#](https://github.com/nikhilk/scriptsharp/). You code in c# and it gets compiled to JS. Makes managing tens of thousands of lines of JS a breeze.
Sounds similar to GWT. Are the debugging support and build times any problem?
Something like Eclipse? Try [Aptana](http://www.aptana.com), it's based on it. It comes with some convenient features like a web server and Git, so I am liking it so far (but I just switched to it under a week ago).
relevant: http://www.cybelesoft.com/thinvnc/ http://www.reddit.com/r/programming/comments/gtdmf/gtk_html5_backend_update_now_with_window/ 
upboats for aptana! I use the plugin in eclipse, not only for javascript but also for python.
Cloud nine isn't bad and I think jetbeans supports js now.
This is a terrible, terrible, terrible idea. [It kills performance](http://jsperf.com/my-privates), and if you skip the 'new' and just use field access, it's still [10 times slower](http://jsperf.com/my-privates/2) There is already a way to ensure your fields are all private: define them as local variables within the constructor, and define all methods there as well. It works, uses well known design patterns, doesn't require importing a block of JS, and is _much_ faster.
That's a bullshit benchmark. Your comparing the overhead of two function calls with the overhead of a property lookup when the actual computation you do is only addition and multiplication. http://jsperf.com/my-privates/3 The performance impacts is null compared to real work. Also note that my solution - Has a faller memory footprint then local variables in closures - Allows for prototypical inheritance and private state - Allows for child objects to inherit and extend the private state of parent objects
+1 for [Cloud9IDE](http://c9.io) Features: * Git / Github integration * Growing set of refactoring tools * Step-wise debugger * Live code linting (not limited to js, but also for css and probably others) * Easy static site preview by hitting preview on an html page
If you add references to your JS file, VS will also pick up these references and incorporate them into intellisense. It works surprisingly well. 
Good to know, cheers. Seems the original article was wrong, then (rather than csimike).
Your comment is about the post, my comment is about his *comments* in this thread. His comments are not detracting from the discussion, so I don't believe they deserve downvotes.
Top marks for your use of a [Kestrel][k] :-) [k]: http://www.angelfire.com/tx4/cus/combinator/birds.html
So what you're trying to say is that you'd like to drive a Lexus but you can't afford it?
I know VS has made progress with plain JS, but it's not nearly as good as what you get with Script# because it's the same as using c#. So you get cool things like strong typing, compile time errors, directives like #if DEBUG, the compiler actually outputs both a debug and release version of the scripts with the release version minified.
You do however choose who to work for. There's a multitude of languages you and your employer can choose when developing for Windows for example, it doesn't mean you need to know Java, Haskell, Ruby, C++ and Fortran just to code some application that runs in Windows. Some employers might want you to code in Ruby, and if you don't know Ruby, tough luck, someone else will. The same thing is a possibility in web development, and I do in fact believe it is bound to happen sooner or later, as boundries for what is a web app is moved.
I've never tried GWT so I can't compare there. Script# does not help with debugging, you use the same thing as with plain JS there. The compilation does not make debugging harder though because the generated script looks very similar to the original c# code so it's quite easy to get around. You can watch the [MIX 11 presentation](http://channel9.msdn.com/events/MIX/MIX11/HTM16) by the author for a pretty good introduction.
I did a quick peek at the Script# (admittedly, not a long one) from the link previous -- is this geared to just coupling an ASP.NET page with AJAX callbacks, or do you use Script# to compile any kind of JS (like DOM manipulation?)
Nice job on that ! I'm getting started now woth js and html5 programming any tips/advice ? Any particular frameworks you use ?
look, the title is "coffeescript is not a language worth learning" and it is posted in r/javascript. The OP's title is misleading and is titled to get upvotes from readers of r/javascript even though it is the opposite of what the article is about, and this is very dirty posting tactics, bordering on trolling an entire subreddit. If the same article title were posted in r/coffeescript it would get massive downvotes even though it is a pro-coffeescript article, just because of the title. OP has tricked many readers to upvote in r/javascript based on the title alone (many upvoters will never read the article or the comments, this is how reddit works a lot of the time unfortunately). Now you want me to believe the OP somehow trustworthy and forthright in comments? The points he is trying to make are ludicrous. The logic behind his comments is just as broken as the article, and they border on trolling.
love the inception beer site...
Pretty neat but I can't see the cursor after I select most of the tools on the left? (Mac OS; FF9)
The main library I use is [JQuery](http://jquery.com/); there is no other way to describe it, except that it rocks! I also use [HTML5 Boilerplate](http://html5boilerplate.com/) as a starting point for my sites, again it rocks! On my game building site, [Play My Code](http://www.playmycode.com), I also use SoundManager2 and Ace (which is especially excellent). However the graphics stack is my own due to the added optimzations I needed to ensure were in there (for example it's one of the few that supports good tinted images, in real time, on a HTML5 canvas). After that, everything is my code. On the server I use my own MVC framework, and in the client all my major projects (such as SkyBrush or my programming language) are built as stand alone applications. Core sites code however is normally structured differently as giant JS objects split up essentially to build namespaces. For example on the Studio Fortress site there is the 'sf.magnets' object that contains functions for handling all the magnets on the front page, and 'sf.skybrush' for setting up and integrating SkyBrush onto that page. The idea is that the libraries are allowed to be complicated and over-engineered, but the sites must be dumb glue code. One of the things that puts me off using frameworks is that I either feel I could build better in less time (which is true if I only need a small section), or it's too specific and I want something more special. For example I built my own colour picker for SkyBrush, rather then use those online, as it looks more unique (and takes up less space). The biggest tip I can give is to think heavily about what it is you are building. Plenty of sites powered by JS are nothing like SkyBrush, and need entirely different libraries for solving different issues. I'd also try and embrace JS's prototype model as much possible, and it's heavy use of closures, as they have helped me dig my way out of plenty of architectural issues. I hope that helps!
I am unable to replicate this, so if it happens again (or for anyone else), would you be able to please open up the error console and paste if there is an error reported.
And, it looks like dog !@#$.
yeah should do...
Have you seen a problem with Copy/Paste JS code with tabs in it? Every time, it misaligns. 
I reject every single motive your comments misattributes to me here. If (and I say only *if*) there are upvotes for the title, what of it? Think about it for a moment. You hate CoffeeScript, and you think I like it. I wrote a title that makes it seems like it’s a bad thing. People upvote the article without reading it because they think it’s a bad thing, spreading the idea that CoffeeScript is a bad thing. You call this trolling? I call this a bad thing for me, the CoffeeScript user, and a good thing for you, the CoffeeScript hater. Unless your theory is that I consider Reddit karma more important than communicating with the world through my writing. Let’s go with that theory for a moment. According to your words, I know I can get upvotes in the JavaScript subreddit by posting something with an anti-CoffeeScript title. Those who don’t read the post itself will give me massive upvotes. The flaw in this argument is that those who do read it might downvote it when they realize it isn’t a massive knock against CoffeeScript. So why do this? Why wouldn’t I simply write an anti-CoffeeScript rant, if upvotes are what I want? Anti-CoffeeScript title + Anti-CoffeeScript essay ought to get me even more upvotes than Anti-CoffeeScript title alone. Given this obvious reality, either I am not trolling for upvotes, or I’m extraordinarily inept at it. Please calm down and stop accusing me of “trolling.” The simple fact is, I wrote an article with a controversial point of view. Controversial both ways, some JavaScript purists will reject its premise, and some CoffeeScript purists will *also* reject its premise that CoffeeScript isn’t really a distinct language but “just” a way of writing JavaScript. I’m interested in hearing contrary points of view, but not because I enjoy fighting with people. Trolls value arguing. The only arguments I’m having here are with you, and only with respect to you attributing to me motives that simply don’t exist. I’m not arguing with anyone that doesn’t like CoffeeScript, or doesn’t believe CoffeeScript is an effective way to write good JavaScript. You’ll notice that I don’t even argue with you when you comment on JavaScript and CoffeeScript-specific points, only the question of whether I should submit this article, where I should submit it, and why I submitted it. Now please, let go of this idea that I am a “troll.” I’m not the one who leapt out from under a bridge and is telling people that they may not pass forth into the JavaScript subreddit ;-)
Sublime Text 2 is amazing, well worth the $60 price tag. I really like the built in python console. I've got mine to do things like auto-compile .less files on save, but you can set up compilers and whatnot as well. It's very vim-esque in some respects. Like vim meets textmate.
Komodo IDE/Edit is awesome.
It's not tied to ASP.NET at all. In fact, I used it to write a pure JS game served by plain HTML: https://github.com/Ventajou/Space-Dinosaurs I put a link to the Mix presentation in another reply, I think it's worth watching if you're interested.
Your wall of text proves nothing. You purposely deceived with the title. You are a troll, simple as that.
If in your world people set out to deceive people into upvoting their posts, if they troll subreddits in an attempt to spread misinformation, if they lie about their motives when challenged, well... that is an unhappy and dark world and I cannot go there with you. Here’s something else I wrote. I hope you find it more helpful than the subject of our discussion. [Optimism](https://github.com/raganwald/homoiconic/blob/master/2009-05-01/optimism.md)
Ok, you aren't a troll, but you are a scumbag. Scumbag OP posts misleading title, gets upvotes, then is surprised when he isn't well received. Fuck off scumbag, you can talk all you want but you did what you did, so at least own up to it. You also may want to start living in reality, because the world you described is the world of reddit in 2011, like it or not. I'm optimistic when there is something to be optimistic about, but you are squirming here and it is obvious, you posted a false title, you got more upvotes than you should and now you claim that innocent little you is just doing the right thing here. bull fucking shit.
Must have been one of those one time thing. I can't replicate it either. :)
That depends on your employer. I have latitude in making these decisions.
Job posts are often filled with all kinds of extraneous rubbish that sounds good to somebody in HR. If that is your only method of finding a job the real failure is in your inability to network offline and not in any technology.
| If that is your only method of finding a job the real failure is in your inability to network offline and not in any technology. Yeah, because only networking offline is the only best way to find a real job.. what a joke. Your reply has no basis in reality at all. Seriously, you think that offline networking is the best way to get internet jobs? Good luck with that, really...
There are explanations all over the internet, but I'll link to a recent one by [John Resig](http://ejohn.org/blog/javascript-as-a-first-language/).
Hang on, why do I need an IDE?
You made Impact? Sweet! If you don't mind I have a couple of questions: 1. Would you say that Impact is more suited or geared towards one kind of game than another? I've heard that it's better for action kind of games, what do you think of that? Is it unsuitable or less suitable than other engines for strategy or RPG games? 2. If I bought Impact now and there was a major update, I would have to pay again for that, right? Do you have any estimate of how much it would cost? I'm interested in purchasing a license, but if the next version is out in a few months, I'm not so sure if it might be better for me to just wait and get that one. Either way it's pretty cool to stumble upon you on Reddit, just some minutes after checking out your website. Kind of weird too. If you do answer this I'd be pretty happy. Thanks!
I think there are a lot of decent JavaScript editors, but if you're talking about an IDE like Eclipse or VStudio, that is actually **theoretically impossible to build**. (On a more constructive note, though, I found this fork of js2-mode for emacs to be freakin' brilliant for highlighting, formatting, and catching stray global vars: [https://github.com/mooz/js2-mode/](https://github.com/mooz/js2-mode/)) Anyway, Java is a relatively strongly typed, inheritance based language. Everything about it is highly regular. All functions are in classes. All classes are in individual .java files. All libraries are in .jar files. All interfaces are completely implemented by their implementing subclasses. JavaDoc is well specified. It's a very rigid language. Java-like un-dynamic, rigid languages are a pain in the ass for things like brevity and speed of development, but they are really helpful for IDEs. When you start typing a method name in Eclipse, there are a limited set of methods that you could be implying. When you autocomplete a method, the argument types are rigidly defined, and there's an even smaller number of samely-typed objects in your scope to fit into the arguments. It feels like Eclipse can basically write Java by itself because at every point there are fewer paths that the code can take while still compiling. JavaScript, on the other hand, is highly dynamic. "Methods" can be defined in many different ways, and the prototype chain of each object is dynamic, meaning it isn't possible to deduce the complete set of available methods before runtime. There are no explicit types, so any object can fit into any argument "slot", and even the number of arguments to a function can be dynamic. Eclipse can make brilliant deductions because there are relatively few options at any point for what to slot into the code you're writing. A JavaScript IDE has a much bigger set of things to suggest at any point. It has to use heuristics to make reasonable guesses, and that's a harder problem to solve. One could narrow the scope of possible guesses by programming in a style that the IDE "likes" (eg. no dynamic functions on objects, no variable arguments, etc.) but at some point you wouldn't be writing JavaScript anymore. You'd just be writing a strict subset, and it might annoy you. So basically, there is no IDE as good as Eclipse for JavaScript because the language itself does not allow such a thing to exist.
Sweet job man! And thanks for this excellent post as well. Boilerplate is intense!
&gt;Why? Integrated debugging is why I'd like to see a JavaScript IDE, especially when coding server side JS.
Oh you are precious. Let me guess, you're around 23 years old, aren't you?
I'm counting 18 more or less hateful replies from you in this thread. Why don't you just stay away from coffeescript if it bothers you this much?
|I'm counting 18 more or less hateful replies from you in this thread. Fuck You. Now it's 19. Troll, your comment is laughable. This is r/javascript. Why don't you stay out of r/javascript if you hate javascript? Sorry you are so easily offended. Why don't you just stay off the big bad internet if you don't like reading real responses to garbage articles? 
Jetbrains just released WebStorm 3.0 that looks awesome and has a free license for open source projects. http://www.jetbrains.com/webstorm/
|CoffeeScript is a tool for Ruby/Python developers FTFY.
Emacs + js3mode
So if I don't hate coffeescript I must hate javascript? I don't follow that logic. I must say though, I frequent [/r/programming](/r/programming) and [/r/python](/r/python) and I have never seen anything remotely like the amount of hateful rhetoric in this thread.
OP titled the post in such a way as to get upvotes based on the title, this is gaming reddit at the very least. It's unscrupulous actually what the OP did by naming this "Coffeescript is not a language worth learing" and posting it in r/javascript. This is really disingenuous. You expect anyone who is a fan of r/javascript to take this without speaking up? Yeah, you can call me whatever you want, I'll admit I'm outspoken and the more fragile readers might take offense, but I really don't give a fuck. I am outraged at OP for his abuse of this subreddit. He should be ashamed of taking advantage of the misleading title used to get upvotes.
Wrong. The tools have just not been build yet. There's plenty of static and dynamic analysis that can be done. It just hasn't been build.
Coffeescript already has been forked a few times. More fragmentation, yay!
Awesome to see another LD22 participant in /r/javascript. I too was looking for a javascript game-library for LD22, but in the end wrote some simple stuff myself. I've used require.js to handle the dependencies/loading of scripts. - [class.js](http://softwarebakery.com/frozencow/ludum22/class.js) A very simple function to create 'classes', mostly to get a structure I was used to programming games in OO. - [event.js](http://softwarebakery.com/frozencow/ludum22/event.js) 'Abstract class' to emit and register custom events: - [vector.js](http://softwarebakery.com/frozencow/ludum22/vector.js) A vector - [intrusivelist.js](http://softwarebakery.com/frozencow/ludum22/intrusivelist.js), an intrusive linked list as described on http://altdevblogaday.com/2011/12/06/intrusive-lists/ . I thought at the time this would be useful since it does not require you to create a new object for the node of a linked list, but mostly made it for fun: - [dintrusivelist.js](http://softwarebakery.com/frozencow/ludum22/dintrusivelist.js) A intrusive double linked list - [game.js](http://softwarebakery.com/frozencow/ludum22/game.js) A simple 'class' that initiates a canvas, handles its keyboard and mouse events and sets up the 'main loop'. It all comes together in my main class if you want an example of usage: http://softwarebakery.com/frozencow/ludum22/main.js. It isn't a very extended library nor is it well documented (or even commented at all), but these served me well during LD22. Maybe you find some of them useful. If you have questions feel free to ask.
I'm on board with disliking deception for attention. Why didn't you say that? The problem with your comments isn't that you were offensive, it's that they were purposeless and incendiary. I read over most of them and found little if no signal - and believe me, I honestly looked to see and understand your perspective. What I came away with wasn't an insight, it was just furor. May I suggest that if you like this subreddit so much, you use your time on it in the future to enrich it, instead of using it as a platform to fuss at people you disagree with.
If you frequent r/javascript and were here when coffeescript first hit, you saw that we kept getting articles here about how coffeescript is more beautiful than javascript, coffeescript is so much easier to write than javascript, coffeescript makes javascript perform faster, and many other false statements that a small group of vocal people were spreading to discredit javascript and try to gain ground for their preferred significant whitespace fetish. It stirred up a lot of controversy. Now, there is a lot of backlash against coffeescript posts here because of the arrogance and misguided postings in r/javascript. That is all outside of the fact that coffeescript introduces significant hurdles to developing front-end code that can be avoided by not using it. There are many good reasons not to use coffeescript, and there are many more opinions about that. There are already some great reasons on this thread why not to use coffeescript, but don't take my word for it. It seems this genie can't be put back in the bottle, and the world of front-end development just got exponentially more difficult as a result. This is a very real problem and one that experienced front-end developers wish would never have happened. We are all VERY LUCKY that VBScript in the browser died a young death, because that was the other language that could execute in the browser (albeit only in IE), and it was godawful. If you've never worked on a website that had both javascript + VBscript, then you don't really know the world of hurt that came with it. I have had to work on code that tried to access variables in VBscript from javascript, and it wasn't fun. The push to fragment the browser with a hundred languages means that every browser has to support every language along with correct DOM implementations in every language. If you think this is a world you want to develop in, then you should have your head examined. Unfortunately, coffeescript IS a step in this direction. 
I look forward to your upcoming work on the problems of static/dynamic code analysis of duck-typed languages, and of your fascinating new and totally revolutionary heuristic algorithms for code completion. Until the peer review comes back I suppose I'll just have to settle for that pithy one-liner. Thanks for the downvote, bro.
|I'm on board with disliking deception for attention. Why didn't you say that? I've been saying that all over the place in this thread. If you didn't read that then you haven't been reading my posts here. I will enrich r/javascript in other posts, but not in posts about coffeescript. If the noisefloor goes up in a thread about coffeescript, then that's fine, coffeescript had no useful gain here and next time OP will think twice about posting garbage like this in r/javascript when it SHOULD BE POSTED IN R/COFFEESCRIPT. You can say that coffeescript is javascript, or that coffeescript articles are relevant in r/javascript, but it isn't and there are a lot of people who don't want it here, not just me - but I may be the most outspoken and most hated of the bunch. 
It's possible from the timestamps that you said something along those lines after I went to bed Monday night. I admit I didn't read anything of yours after that. If you take a look at other communities across Reddit they generally adopt warning policies into the FAQ or sidebar. Warning against CoffeeScript posts is something I'd advise, instead of just attacking people who may not know better.
That is a good suggestion, but I kind of doubt jresig will do anything about it. He's only one mod, and has absolute control so if he doesn't want to do it, there is nobody to appeal to, and I kind of doubt he's going to listen to me on the subject. He hasn't exactly been concerned about it in the past.
Yeah that's pretty much what I'm thinking. Looks like we'll be stuck with glorified text editors for the time being.
Crashed my browser
Which browser are you running?
Nice little game, it's well done. Interestingly I get about 17fps in Chrome and 30 in Firefox. That's the opposite of my past experience (I have always found Chrome to be more performant canvas-wise than FF)
Mozilla improved Canvas performance by quite a bit in Firefox 7.
Gotta agree with this. Eclipse + Aptana is killer. 
Yeah, with more recent Firefox builds, I've been seeing it consistently performing better with canvas than Chrome.
I believe it, but I get much better performance on Chrome with this game. I'm getting about 9fps on Firefox 8 and 25fps on Chrome 15. This is on an Eee Box running Ubuntu.
Impact's main focus lies on all kinds of real-time 2D games - think anything the Super Nintendo was good at, but with potentially better graphics. I.e. anything that has one or more background layers and some objects to interact with - side scrollers as well as top-down view games. You can build puzzle games, point and click adventures or other "non-realtime" games with it, but that's really not Impact's strong suit. Your 2nd question is answered on this page: http://impactjs.com/buy-impact In short: yes, you'd have to pay again. The upgrade will probably cost $50 for existing customers. 2.x is scheduled for July 2012. Since Impact is on discount right now you don't have much to loose :)
Not only is it a performance hit, that for loop is unreadable.
&gt; If you know javascript already you'll be able to move back and forth with out a problem. And that's where it's created a new problem, bringing anyone on to the team, even if they are a competent JS developer, must also know CS. You've either severely limited the pool that you can draw from to help maintain and build upon your code or you're adding extra training overhead or you're hoping your projects never get big enough to warrant needing more people.
jresig of jQuery fame is /r/javascript's absentee moderator... there were some people trying to stage a coup a little while back, I suggested they approach jresig first about turning over/sharing control but it seemed to wither and die there.
jsTestDriver absolutely does not require an IDE. 
The more I see it the more I think coffeescript is more like a macro than a language. I've brought up that suspicion before, that what is done with coffeescript could be accomplished with a set of macros. I'd rather be able to see the code that's executing, and be able to tweak it myself to optimize it. There is no way would I ever trust the coffeescript 'transpiler' (made up word for a made up language) after seeing this example. This is one 'gotcha' of coffeescript for sure. The var thing is another, you can't use the same variable name in the same .coffee file twice. You just can't, coffeescript will screw you if you try. I'm just scratching the surface, I admit I don't spend any of my time learning about coffeescript. The only time it ever comes up is when flame bait articles get posted to r/javascript.
It took me like an hour to figure out how to code CS. I'm somewhat indifferent to it but learn it isn't a huge barrier.
I'd prolly change it to this, http://www.pastie.org/3055646 Not too much difference other than structural and removing event wrappers. I'd suggest not storing data on the DOM (elements) since its slower to access that data. I would store references to some elements that gets accessed frequently and aren't going to be removed so I don't have to query the DOM to get a reference to it again. 
That was a good game. I beat it,. I play StarCraft, so moving those guys around was pretty fun! Just upgrade the range and speed, and micro!
&gt;http://altdevblogaday.com/2011/12/06/intrusive-lists/ "After looking at this diagram, you should note that as you walk render_list you don’t actually point at a GameObject, but an IntrusiveList item. So, how do you recover the address of the GameObject from the update_list_node pointer that is actually used in the list? It is quite simple, you just subtract the offset from the address. Yes, you can do that. You get the offset with offsetof:" size_t offsetof(type, member); Omg. I forgot you can do this kind of stuff in low-level languages. Lovely.
I am now using it. so far so good
At my work we use RubyMine, which is also made by JetBrains, and what I can tell you is that software is reeeeally buggy. We regularly find bugs that expose design flaws in the code which you wouldn't expect from software this big. It ends up being a terribly frustrating experience. Since I believe that most of the IDEs by JetBrains share a lot of the codebase, I would advise to stick to TextMate, which offers an excellent user experience, or to look for another IDE.
I think the only tough thing here is trying to understand your question.
He wants to create a selection that starts half-way through the contents of one text field and ends half-way through the contents of another: [ I am a text field ] [ And I'm another one ] Selection: ^----------------------------^ To answer your question OP, it *might* be possible using javascript to set the selection to specific DOM nodes (and IIRC possibly even character offsets *within* a given DOM node), but even if it is it's liable to be very inconsistent and browser-specific[1], and I doubt it's possible to do using the normal browser text-selection UI controls (ie, the mouse or keyboard). [1] Text-selection stuff in JS is horrible, because almost everyone subscribes to the normal, relatively-sane W3C API except IE, whose alternative works in a completely different way and is fundamentally broken when dealing with rich text/images.
I'm not sure how to do it in plain javascript, but here's how to do it with jQuery: http://jsfiddle.net/dbySa/1/
If your doing HTML, sure. But I have several projects where the bulk of the work is pure-JS. In this case, using your idea can become a significant overhead. For example on the compiler I am building I found that making a few changes to how I handled the 'arguments' variable gave a significant speed up. Like your fields it isn't that what I was doing was expensive, but simply that I am doing it again and again.
Does not work with Chromium (18.0.979.0) on Win7.
I think that's not what he meant. Shaper_pmp explains it well.
I think what you can only do here is faking textboxes. Like code highlighting editors do. They look like textareas but they just add the input to a div after formatting when it's focused. So you should create a textbox from scratch with javascript. Which when you click on it adds a blinking cursor and listens for keystrokes and adds them into the inner html of the fake textbox. If you do this you can select two fields at once like you would with two li's standing next to each other. 
It might be possible using [text ranges](http://help.dottoro.com/ljgbbkjf.php) but cross browser support isn't great.
Cool game!
In what way is it not working? Have you tried the stable version of Chrome? It works fine for me there on Win7.
Non-Javascript users? Never heard of them.
Using javascript to do what CSS should be doing is dumb. Placing elements using JS is slow because it causes yet another reflow, why not have them in place on load?. I use html templates, css3 when possible (fallback to javascript animations on crappy browsers) and adding/remove classes to achieve effects/animations. I avoid manipulating css directly through js as much as possible. But that doesn't mean it degrades gracefully. I work on a photo and multimedia site so if the user doesn't have flash and javascript they are screwed. 
I run a very js heavy website. Page loads, music player, everything! For mobile, I have developed a much simpler website for mobile, no scripts. If a user has JS disabled, I just ask them to use that website
Something more amazing it allows "undefined" as a variable name...
It works fine with Chrome stable. With chromium, the cursor state is OK but I can't draw anything, there are no error messages in the console.
This is almost certainly going to be a bug in Chromium. Having just switched to the dev channel myself I've found other bugs too in the rendering, again due to Chromium, which is to be expected given that it's dev. So as a result there isn't much I can really do about this, but thanks for the heads up!
The primary idea behind the web standards movement is to create pages that are fully available for users with no javascript or css. That means you write you html first, test it and make sure it works well as a document. When you write your stylesheets, again, make sure the page works on a content level first, is everything accessible, it should be. When you add your javascript use it to enhance functionality, not create content or style the page, use it to give functionality that would otherwise not be available with css or html. Don't let all the javascript fancyness get in the way of what really matters for every variety of user, the content.
Loved the desktop icons on the 15 minute tutorial :P
Using Javascript you certainly can, you'd select the text in both fields. You can programmatically select the text in 10 fields if you want. The question is, what do you want to do with the text?
No, I am a senior technical analyst at a major web business writing all the code behind the companies business tests. I am also the inventor of this: http://mailmarkup.org/ I am also the author of http://prettydiff.com/ and http://prettydiff.com/jsgui/ What about you?
&gt; I'm curious as to what your approach to supporting JavaScript disabled browsers is. I don't even try. &gt; I ask because I find myself making more and more JavaScript intensive things.. and I've always tried to make sure there was a fallback for non-JavaScript users. I hope you're having fun with that! For the business/office -use applications that can't function without Javascript it may not make much sense to degrade gracefully, no matter how much criping you hear from the degrade gracefully fanboys. People concoct all sorts of scenarios where they claim you need to degrade gracefully, but how many people do you know that use their browser on their smart phone a lot and haven't already upgraded to a browser that supports Javascript? Do you really want to spend extra time and effort catering to the tiny population of crackpots who refuse to allow Javascript to run in their browsers? Or to people using IE6? Or to people still using the original Blackberry browser from 10 years ago?
It got me into my current employer and it got me the promotion that I wanted, so who am I say...
NB: This starts to get hectic when you're doing large, rich-web applications, until you get to a point where the base HTML UI and the JavaScript-enhanced UI split into two separate projects.
This looks very promising and much better than most of the tutorials out there (which often are super outdated)
Brillaint game, bit pissed it always took away my best one. Left me with the one I didnt upgrade :( 
Yeah that's on purpose to encourage you to upgrade evenly!
I like the cut of your jib..
This is great, and that's coming from someone who has wanted to start with this kind of framework but with now idea how to jump in.
none of that suggests you are older than 23. let me know when you've been coding for 31 years.
good for YOU. If you rely on only your friends and contacts to get jobs then you have severely limited your job prospects. There are jobs on craigslist offering 140k/yr coding javascript, so if you think there is something wrong with going after that, then you have a mental problem. I found my current job on craigslist, and it pays extremely well, I have more perks than I could use, I get free stuff all the time, I set my own hours, and can work at home any time I want, food is brought in regularly, and the team is great. Any hardware I want I get, no questions asked, and I have it all. I've been here over a year and I'm doing cutting edge work. I have 0 complaints. Oh, but i found it on craigslist, so i must be doing it wrong?! wtf dude, you don't know what you are talking about.
What difference does being over 23 and/or coding for 31 years make to you? Are you suggesting that his arguments are not worthy of consideration unless he has been coding for 31 years? If so, are you also suggesting that if he has been coding for 31 years, his arguments are worthy of consideration?
I just started fiddling around with Backbone yesterday, so this is perfect timing for me. Thanks!
&gt; good for YOU. If you rely on only your friends and contacts to get jobs then you have severely limited your job prospects. If that means I am limited to more challenging jobs with higher compensation then I am okay with that. &gt; Oh, but i found it on craigslist, so i must be doing it wrong?! wtf dude I never said such. You are trying to read my mind over a 1 sentence post. You are either too emotional or too immature, so I am going to end this discussion.
you obviously haven't been reading these comments and only want to bash me. he is saying the best way to find new jobs is through networking with friends and contacts, and that using online services to search for work is not a good way to do it. I am saying he sounds a little inexperienced with job searching. If he limits his search to only friends and contacts, then he is missing out on a great many jobs, some of which could be vastly better than what his limited circle can offer. I think my extensive experience in the job market has given me a little wisdom that he does not yet have. Have either of you had to survive the 2000 dot com bubble burst?? I had plenty of friends in IT, but nobody was hiring, nobody could get any money approved for new hires, then companies started going under left and right. it was far worse than it is right now for web/IT jobs. Even with the current recession my inbox is flooded daily with very good opportunities. Even though I am happily employed, I run a job search service, so I keep tabs on what's out there. Anyway, don't discount experience, it makes you look inexperienced.
What others have already said. Make sure content, navigation, or any other requests or possible action is still useable without JS, then check it again without JS+CSS. A simple example would be, &lt;a href="http://www.google.ca/"&gt;&lt;/a&gt; $('a').each(function (i, value) { $(this).click(function (event) { console.log('Do javascript stuff with the click!'); event.preventDefault(); }); }); Javascript is used to enhance anchor tag's click, but when Javascript is disabled, the link falls back gracefully and still makes the request to the server without JS.
&gt; none of that suggests you are older than 23. Okay, then for the sake of argument I will presume that in the few years of experience a 24 year old could possibly have I have more to show than perhaps your have achieved in the entirety of your career. &gt; let me know when you've been coding for 31 years. Why? If somebody fails to accomplish anything of worth in 31 years of effort am I supposed to think they are more or less competent? So, let me ask again... What about you? If you so are superior in your experience then either put up or shut up. From this end you sound fairly worthless.
I think its fair to say that if spiders don't see your content, then your content doesn't exists. :P Aside from that, some technical users choose to browse safely without JS. I would probably use a browser without JS when I have to do sensitive tasks.
I’m not bashing ~~you on this subject~~ your point of view, and I agree that industry experience strongly affects your views on the best ways to find work, the right kind of companies to work for/start, and other things that are inherently social in nature. This differs somewhat from technical subjects. Sometimes, 30+ years of experience helps you see inherent flaws in a “new” idea. Sometimes it hobbles you. In my own case, I’ve been writing code since 1972. But I’m not young enough to know everything about programming. UPDATE: I’m not bashing you, period, and if any of the places where I’ve argued with your words comes across as bashing you the person, I apologise. I like a vigorous debate about ideas, but that’s not the same thing as bashing or abusing people, and if you feel I’ve crossed that line at any time, I am only to glad to retract such words.
I agree. Even most of the links to "example" sites others have done are outdated. Most of them have references to "controllers" in their code for instance.
I use notepad++ for all the languages, with the exception of when I'm forced to work in c#. PS: When I finally start with objective-c, I guess I will have to use xcode :(
Yep that's sort of what I was referring to. I notice it tripping people up quite a bit.
This is a very good walk-through...probably one of the better ones I have seen. I work with Backbone a lot, this would have been great when I was just starting out...definitely will be recommending this to those that are getting started/need an intro.
Hahaha. You think i'm willing to give up my identity for this little insignificant squabble? You really are inexperienced. I am comfortable that my achievments have surpassed yours, even when I was a 24 year old. I used to develop multi-line/multi-user bbs software for the biggest warez groups when I was 17, in assembly language. I won't put down your achievments, but if a pissing match is want you want, you'll lose. And, guessing your age is enough satisfaction for me. 
Haha you can't win with your "just ask your friends for a job" approach, so you want to end the argument. Boohoo 
&gt; Hahaha. You think i'm willing to give up my identity for this little insignificant squabble? What are you hiding from?
Thanks :) I'm sure it makes sense to degrade gracefully in certain contexts...
Rather than taking both, check if you can opt out of the first by taking only the second. Rather than imposing rules on yourself, actually talk to an advisor or a dean to see if you can have the first course waived.
Tip 1: Learn the difference between Java and Javascript.
"Java to JavaScript is like ham to hamster". If you're talking about Java - find a better place. If you're talking about JavaScript... well my answer would be: listen to Doug Crockford (http://en.wikipedia.org/wiki/Douglas_Crockford) and remember - it's closer from JavaScript to Scheme than to Java. It's a functional prototype-based language with a huge expressive power. Follow Crockford and you'll be good. 
Hey. So you are going to take Java 1 and 2, but you have never had any prior programming experience? HTML is nothing like Java. If you were coding ActionScript (for Flash), then you would have some experience that could be helpful. Tips - learn everything you can about Object-Oriented programming - that will probably be the focus of Java 2. Java 1 will be basics on the language (I am guessing). Pick up Headfirst Java and burn through that book before your semester starts; this should give you a good foundation. If you have time, pick up Headfirst Object-Oriented Analysis and Design (should cover your Java 2 stuff). Last tip, set yourself up with a Stackoverflow account and search for/ask questions constantly throughout your semester. It is a great resource. If things get tough, don't panic, you'll be okay. Have fun!
oh, so I see you've changed the subject, because you aren't having any luck with the other one. 
Oh right, the question is a little hard to understand :P
Serendipitous. It was a good read. Now I'm gonna make something with it.
Oh, damn, I didn't catch that. I assumed it was actually Java, and the "I've learned some HTML and flash" was just extraneous information. Didn't check which subreddit this was on.
Also checkout [backbone koans](https://github.com/larrymyers/backbone-koans) if you want some exercise to test what you learned.
Do you have a test case? Does it produce any errors?
You will suffer for your stupidity.
Jasmine was based on my work with JSpec, but yeah it's the successor to expresso, or it's the "test framework I actually want to use"
I agree, I don't even try either. 
Which plugin is it? Google yields several authors.
I've been using Sublime Text 2 with CodeIntel for code completion and a jshint plugin. I'm enjoying it very much.
It's not at all clear what you're asking here. Are you trying to write a filter rule yourself? If so, what do you want it to do? Editing/creating rules should be done through the settings interface. 
Link is down for me.
I use [this one](http://www.vim.org/scripts/script.php?script_id=2729), but there are several out there. I think I only tried one or two before I settled on this one, so there may be better ones out there.
Save button isn't working for me. Sorry this is a bookmark comment.
Snore.
Enable Vintage mode and it basically is vim, with all of the sweet features of ST2. 
oh wow, lookie what I started ... ouch.
You didn't start it.
oh, ok, phew!
What distinguishes this one from the others?
Its syntax is more verbose and less intuitive. ^(I'm using http://bassistance.de/jquery-plugins/jquery-plugin-validation/)
Why not use JSLint or JSHint? Both will find this error, and many more. www.jslint.com www.jshint.com 
Few things: It designed to be asynchronous. So you can add AJAX calls to validate and you don't need to hack the plugin. No predefined messages, no predefined behavior to display error messages. The plugin does only the validation but won't show the error messages. The point of this is that every site is different. Different the markup, the styles, so the plugin doesn't try to decide where to put the error messages. You can define field groups. It means that you can validate 2 or more fields as one. For example imagine that you have year, month and day fields. You need to validate them as one, because you need to show only one message for all of them. Or just think about radio inputs. You define at least 2 input fields in the HTML but you will validate them as one if you want to know if any of them is checked.
I actually use JSLint as the backend for this :) The problem is the "many more" part. Our code works perfectly fine and we are happy with the style, but JSLint complains about all sorts of stuff that we really don't care about. The signal to noise ratio is way too low.
I think, it's basically the same syntax. $('form').validate() you jquery validtion and $('form').yafov() the other. I don't see too much differences :)
Yah, I hate having too much signal.
Gah! Fixed, thanks!
Why not just test it in Internet Explorer?
An example of styling the shadow DOM: http://lab.simurai.com/css/umbrui/
JavaScript was my first serious language, I played with others but JS is the only one I'll always feel comfortable with, even in notepad.
&gt; ... JSLint complains about all sorts of stuff ... That's why you use JSHint and select what warnings should be suppressed.
That's sick.
The application reported an error when I passed my minified application through it: http://prettydiff.com/prettydiff.js It did work fine when I passed beautified code through it though.
Seconded. JS was the first language I ever really endeavored to know the ins and outs of, so for me I've never felt any of the problems understanding it that so many other more "classically" trained developers seem to experience.
I could just put one real textbox and put a drawing of two text boxes in the background. 
Yeah, me too. 
Why is that? Ok, so English is not my first language but why was it so hard?
Something went so wrong with this sentence: "To make sure that general warts don't crop up"
Why would you limit yourself like that?
Very useful, thank you very much.
&gt;notepad &amp;#3232;\_&amp;#3232;
Node.js isn't much harder than the browser, its just a new api really. In some ways it's easier because your code only has to work in one environment.
Node is as good as any place to learn javascript. The trickiest part is dealing with the asynchronicity....the fact that many functions don't "return" meaningful information, instead, they return immediately and then, later, call a function with the needed data. This takes getting used to. Although there are similar situations in "browser javascript", it's less surpising in typical things that happen in a browser (i.e. a function doesn't get called till you click a button), while in node even something you would expect to return immediatly (such as reading a line of data from a file) are asynchronous in this way. The only downside to learning javascript with node is that most tutorials aimed at new users are targeting browsers. I would spend a couple days doing those tutorials, in a browser, before moving on to node. Maybe more if you've never done any programming (not counting html/css)
Interesting. I use JSLint to do the parsing at the moment. I will look into what's going on exactly. When I paste the minified code into JSLint, I see this as the last error: "Problem at line 145 character 213: Too many errors. (100% scanned)." That's the kind of error that could be causing my code to report a problem. Hopefully I can up that limit or tell JSLint to ignore some of the warnings.
Not sure if that was meant in jest or not, but if not: the problem is that IE reports a useless error "Unexpected identifier, string, or number" [http://www.enterprisedojo.com/2010/12/19/beware-the-trailing-comma-of-death/](http://www.enterprisedojo.com/2010/12/19/beware-the-trailing-comma-of-death/) It's frustrating as hell to debug.
Node.js is actually a lot easier (to me) than working in the browser. The thing that makes writing javascript suck is the DOM (which is the representation of the HTML document that javascript interacts with). JQuery became popular because it abstracted away the need to interact with the DOM directly, and made working with javascript in general a hell of a lot less painful. That said, i concur with the other commenter that learning javascript in the browser at first is probably better, because of the quality of the client side development tools (use chrome web-inspector or firefox' firebug). You can interact with the code much more directly and you dont even have to install anything other than a web browser to do it.
The code is minified so the white space algorithm will report thousands of errors. You have to turn that option off for minified code as minified code will certainly fail any white space conformance. The beautified code does not have that problem.
What is the difference between this and a DOM fragment? Does a shadow sub-tree imply any level of separation or isolate from other DOM parts beyond stand DOM specs?
MSIE gives you the line number where the error occurs exactly the same as linting does. You will surely test in MSIE anyway, having an extra step before you do that seems redundant.
I haven't tried any other IDE's for JavaScript but I've found VS2010 combined with ReSharper 6 is working quite well. I've discovered that if I know the type I'm expecting I can write if(false) x = new Something(); and then through the rest of the reference to that variable the intellisense will popup with the properties on the Something object. Really though you're never going to have perfect JS intellisense just because of the nature of the language. 
When a document fragment is appended to a DOM, that fragment essentially disappears and the element that you appended the fragment to becomes the immediate parent of the fragment's children. That means that the elements in the fragment become new elements in the hosting document. The shadow DOM provides a way to insert "hidden" child elements. You can still style those elements but they are not visible to DOM queries like querySelectorAll and getElementsByTagName. In the short term you don't need to worry about this stuff. In the long term, it provides developers with a way of inserting content into the DOM that does not interfere with your other style rules. 
The DOM doesn't suck. Fragmentation of cross browser implementations and browser bugs sucks.
Asynchronous programming is only hard to learn if your used to synchronous programming. It's quite easy to learn if your new.
DOM is a painful and awkward API regardless of wether all the implementations of it work the same way. It is moderately less frustrating now that the querySelector method was added but that is not supported consistently yet.
I think it was meant, not as a positive statement about Notepad, but as a positive statement about JavaScript -- it doesn't have so much annoying syntax that you *need* an IDE to write it: A simple text editor is more than enough.
If you use Resharper 6 it adds even better intellisense for Visual Studio JavaScript. It also gives some refactoring options and things like "Go to Declaration" on variables or "Finds Useages".
We should direct all of this to stackoverflow.com where it belongs
I agree. I noticed for PHP they have both /r/PHP and /r/phphelp. But I think I might add something to the sidebar directing people to stackoverflow.
yep. I think c9 will end up being the ide for js. It just makes sense to put the js ide in the browser with a node backend. I'm really enjoying using c9. Edit - typo
Nobody uses r/phphelp, because it has next to no real subscribers. 11k vs 500 ... where are you going to ask your question and expect an answer? To get to the point, no. Having separate subs is stupid.
HTML is primarily intended for display and organization. Storing the question data in some type of data object (in this case, JSON) is generally regarded as better practice. This is the philosophy behind MVC frameworks (separation of data model, logical constructs, and presentation). My recommendation would be to investigate Mustache (http://mustache.github.com/). This is a Javascript library that does simple binding of data to HTML templates. The usage looks nearly identical to your second example. In this case, you would be able to define a template for a single question, then bind your JSON data to the template with a single call. 
Using static HTML/JavaScript, anyone can view source and cheat. Best to keep the answers and validation logic on the server end of things.
It all depends on what value you put on semantic markup, graceful degradation and SEO. The "classic" approach is to build your page to work without any JS and have a form submit the answers back to the server for marking. In which case, you should define the quiz as a form with radio buttons for answers. &lt;form ...&gt; &lt;div class="question"&gt; &lt;label for="q1"&gt;What is 3 + 4?&lt;/label&gt; &lt;input type="radio" name="q1" value="3"&gt; &lt;input type="radio" name="q1" value="7" class="correct"&gt; &lt;input type="radio" name="q1" value="88"&gt; &lt;/div&gt; &lt;/form&gt; Then use JS for progressive enhancement to add extra functionality above and beyond what the vanilla HTML offers. This approach works on all browsers and is SEO friendly. If you're generating your server-side HTML pages via templates then generating the above HTML markup from a list of questions and answers is simple. This approach is arguably more correct in that it ticks the "semantic markup", "graceful degradation" and "SEO friendly" boxes, but if you're not worried about that then the second approach (generating all the markup via JS) is quite acceptable. 
&gt; HTML is primarily intended for display and organization. HTML is a markup language for *data*. It very little to do with display. In fact, all of the presentational elements are now deprecated. &gt; My recommendation would be to investigate Mustache ... then bind your JSON data to the template with a single call. If you do this people will be able to cheat.
totally awesome, thank for showing us and for the source too...would be nice if you made a tutorial out of it and posted it on github...people need those tutorials for these kind of apps Sir, good job! Upvote to you Sir!
&gt; HTML is a markup language for data. Then how is it different from XML + XSLT? A table element is closely bound to display. Also - form elements are not data, they collect it and each one displays differently. 
As people mentioned, ideally you would hold the answers on the server. Putting them in Javascript OR in HTML makes for easy cheating. If you don't care about cheating, then either your approach is fine. The cardinal rule these days, is to keep your layers separate (code, html &amp; css). One quick note is your div class contains a "." which I assume is a typo. 
True. The problem we have is that we have *lots* of small js files when in dev mode - enough that we exceed the IE limit of 32 (or 31?). When testing in IE, we have to combine them together like we do on production, but then the file and line numbers of its errors become worthless. In the past, I ended up doing a binary search, commenting half the files at a time until I could narrow down where the problem was coming from. With this site, I can just copy and paste all the code in (or simpler still, use the API through curl).
Pretty cool. Except there's some moron named poop talking smack and saying he wrote the thing.
All fixed. Thanks for the report!
&gt; Then how is it different from XML + XSLT? HTML has pre-defined semantics. XML requires a schema to provide semantics. HTML also has slightly different parsing rules. But other than that they are the same. They are both markup languages for *data*.
The answers shouldn't be available to the user at the time they have to answer those questions. By that I mean that they really shouldn't be there. No "encryption" or "clever" tricks. Once the user submits their answers, the server can reply with some JSON which contains the numbers for the right answers and maybe some other messages. I also recommend to use client-sided templating for that. It's very handy for this kind of thing. You can have different templates for different question types and your questions/answer-sets are just pure data. If you now have to modify your markup a bit, you just have to do it in one place. If you want to change your questions/answers or add some new ones, you can also easily do that. Furthermore, you can now also translate the whole thing if you want. I'd go with [Mustache](http://mustache.github.com/) or its neater spin-off called [Handlebars](http://www.handlebarsjs.com/).
 Chat.send({user: "omg so leet", message: ""}, "&lt;script&gt;alert('Hello World');&lt;/script&gt;") You should check out the [Faye](http://faye.jcoglan.com) pubsub implementation and their authentication system. It'll fix some of these issues (posting as someone else).
IMO they kinda fucked up QSA, too. Again, it doesn't return an array (i.e. something you can use), but instead it returns one of those pesky node lists. // rolls right off the tongue Array.prototype.slice.call(document.querySelectorAll('.md'), 0).forEach(function (e) { console.log(e); }); // slower [].slice.call(document.querySelectorAll('.md'), 0).forEach(function (e) { console.log(e); }); // doesn't work, because nodelists don't have a forEach function document.querySelectorAll('.md').forEach(function (e) { console.log(e); }); // not having to deal with that horrible API is clearly better var qsaEach = function (s, c) { Array.prototype.slice.call(document.querySelectorAll(s), 0).forEach(c); }; qsaEach('.md', function (e) { console.log(e); }); 
yeah. fuck DOM. seriously. 
&gt; They are both markup languages for data. Well HTML can facilitate data but as mentioned it's closely tied to the end user. Yes it's true, the display rules are all moving into CSS where they belong. But form elements, canvas, script blocks (which are not data), tables (which are tied to display) all aimed at providing the framing for a webpage. I would argue that you are defining XML...since you don't usually design a webpage without taking into account the final display: e.g. &lt;div class="navbar"&gt; &lt;/div&gt; &lt;div class="content"&gt; &lt;form&gt; &lt;/form&gt; &lt;/div&gt; This has implied there is a navigation pane, and a content pane/form (display elements). 
Excellent suggestion. I'll check for it.
I can't agree with that. For one thing, node IS synchronous, for everything that doesn't block on i/o. So you have to learn both ways. Try doing something like walk a directory structure recursively, processing each file in some way, and descending into directories. Try it in php (or C for that matter), and then in node using asynch functions (fs.stat and fs.readdir probably). It is a *lot* more complicated in node, simply by virtue of being asynchronous. That's why they have libraries that try to "flatten" all this stuff and make it saner. I don't mind asynch, I'm pretty good at it, but I can't believe someone who has spent much time doing it can say that it is just as easy as synchronous.
Thank you. I'm planning to write a tutorial for this. I just wanted to check if there is any interest.
That's too bad. 
Any reason why you're not just using socket.broadcast on the server?
I use notepad++ and only notepad++. 
I actually put a comment for that on the source code. Broadcast does not send message back to sender. Since I'm using the same function to put every message on the screen I need to send messages to everyone including original sender. Maybe there is an option for that but I couldn't find any.
Also, if there is anything you want changed about this subreddit (design, sidebar content, rules, etc) suggest them here. Although, I think this community is good as it is.
Cheers! I'd noticed that our only mod was MIA. Good to see it's been put in good hands.
I approve of this mod! you may proceed kind sir.
I think you can pass a 2nd parameter to socket.send() that is an acknowledgement callback. So the client can do socket.send(JSON.stringify(object), function () { $('#output').append(str || object.message).scrollTop($('#output')[0].scrollHeight); }); And the server would do: socket.on('message', function(e, fn) { socket.broadcast.send(e); fn(); });
How about a new alien? [Here's an underwhelming possibility](http://i.imgur.com/yD3vo.png). :)
I can actually use this. Excellent suggestion. Thanks.
cool. thanks for stepping up, hb.
Great idea! As soon as I get on an actual computer I'll implement this.
I actually had this argument on the jQuery mailing list a few years ago because Sizzle throws strings, and I wanted to check to see if an exception was being generated from Sizzle puking on a malformed selector or something else in the stack.
If anyone else has ideas for what kind of alien we could have I'm happy to try to make it happen. :)
If you can make a Reddit logo with that alien you posted placed infront of a JavaScript snippet (similar to how web_design has an HTML snippet on theirs) And of course it actually say "Reddit" on it. Over the holidays, I won't have access to a computer with Photoshop or Gimp.
 $.extend([], array);
Why would I use the DOM API if I had jQuery (or a similar library) loaded?
How about something like [this](http://i.imgur.com/bSPKI.png)?
I like it, but I'd like for it to look more like the default Reddit logo. Take a look at /r/web_design's logo. I want to have your Reddit alien, and a JavaScript sniplet behind the logo, and the rest to remain default. Even the size 
Do you consider Coffeescript posts to be relevant to javascript?
I should have been a little more specific, but with Faye they're called extensions: http://faye.jcoglan.com/node/extensions.html. Faye has become my default solution for handling pubsub between a server/client or even just many clients.
No. Sorry, there's probably a good reason I'm not a mod :)
Sorry if I'm being a pain the ass. I can make it if you want.
Something in the FAQ about [transpiled][t] languages (CoffeeScript, Kaffeine, Coco, &amp;c.) would be nice, even if it’s *"We don’t have a hard and fast rule, but if it gets out of control we reserve the right to moderate as we see fit."* [t]: http://en.wikipedia.org/wiki/Transcompiler
There's already a [coffeescript subreddit](http://www.reddit.com/r/coffeescript)
Also, CofeeScript seems well represented in r/Python, which seems a *tad* more appropriate. JavaScript may be what it compiles down to, at this time... but, like anything else in programming, that could change.
I don't personally find coffeescript to be interesting, and obviously it's not technically javascript... but I'd hardly call the number of posts here about it an epidemic or a huge problem. The community and their votes generally send stuff they don't want to see down to the bottom...
I was thinking the other day that it would be somewhat useful to proxy the chat for SMS users. Give them some way to map their phone number to their chatroom name and forward to them via SMS if they weren't connected.
I'd rather see *No posts about coffeescript, kaffeine, or coco, they have their own subbreddits* 
|The community and their votes generally send stuff they don't want to see down to the bottom Except when an article is titled "why coffeescript is not worth learning" and is posted in r/javascript, and people upvote based on the misleading title alone (it was a pro-coffeescript article). That shit needs to stop. Seriously though, for every coffeescript article that makes it up to the first page a javascript article gets pushed off the page. Two coffeescrpt articles pushes two javascript submissions off the page. It happens far too often when there is an r/coffeescript to post these articles in.
You're referring to an issue with redditors/reddit in general. You can't honestly expect mods to vet to contents of every article. While I said in response to the other comment that CoffeScript is better suited--and, better represented--in r/Python, there is no question that there will be some overlap. &gt;That shit needs to stop. No, it doesn't. If the JavaScript community, as a whole, cares about CoffeScript, that is their choice... not your's, as a single subscriber. Frankly, HB has the correct approach: let the community guide itself. Any community should avoid zealotry, at all costs. [Note: before thinking I advocating CoffeScript posts in r/JavaScript, please read my other [comment](http://www.reddit.com/r/javascript/comments/npbrn/announcement_rjavascript_now_has_active_moderators/c3az76j?context=3).]
Thanks. I've investigated and Q is not a drop in replacement. It seems to be better actually.
Misleading article titles specifically worded to get upvotes is just not right. There is no way you can defend that without being a giant troll. It goes against the basic rules of reddit. Also, articles about coffeescript really do need to be posted in r/coffeecript, not r/javascript, specifically to avoid arguments over whether a post really deserves to be in a particular subreddit. Coffeescript articles belong in r/coffeescript and if you can't grasp that simple idea, then you aren't worth talking to about this subject any longer. I plan to keep reading r/javascript for javascript, and coffeescript raises the noise floor.. plain and simple, that is what it does if you come here to read about javascript and see any coffeescript articles. If there is any common ground we share on reddit it is post etiquette, and posting articles about coffeescript in r/javacript goes against that. If we can't follow simple post etiquette, then there's not much point to calling it r/javascript - calling it r/postanythingnomatterhowtangentiallyrelatedtojavascript seems more appropriate. Coffeescript is only tangentially related to javascript. I don't recall seeing any Kaffeine articles in r/javascript (maybe one or two only when it was first introduced) and that is at least as tangentially related to javascript as coffeescript is. If I were mod of r/javascript (and I am sure you feel glad that I'm not), about the only thing I would concern myself with is what gets posted here and how tangentially related to actual javascript it is. tl;dr; If I wanted to waste my time with coffeescript, i'd go read r/coffeescript. 
I know, but frequently posts appear to be relevant to both coffeescript and javascript, and it is difficult to know where they should go.
The only troll in here is you so fuck you. You bitch and moan about CoffeeScript at every opportunity. What, did CoffeeScript sleep with your wife? Steal your car? Set your house on fire? You have got to be compensating for something but I can't fathom what. How is it any of your concern what tools other people use, anyway? If you really think you have any kind of authority to tell people what they can and can't use, you're a fascist plain and simple. Most people just use the right tool for the job and the rest just doesn't give a shit. If the right tool happens to be CoffeeScript, so be it. I write PHP for a living, are you going to bitch and moan how a profitable company has to ditch PHP for Javascript and Node.js or Python and Pyramid now? Look how many languages [compile to JavaScript](https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS) now, are seriously going to keep bitching how none of them are relevant here? Do you feel the urge to downvote them all in the new queue so others won't get to see them? Sorry for feeding the troll here but this guy even went as far as to [register](http://www.reddit.com/user/dipswitch_is_a_troll) [accounts](http://www.reddit.com/user/dipswitchIsAdouch) with my username in them to "prove" his point.
hey troll, you are back again. i missed you. i thought you had disappeared. your comment makes absolutely no sense at all. it is a personal attack, and has no place here. you didn't respond to a single thing i said, and you only choose to make personal attacks. you are the troll, not me. you were being abusive towards me, what 11 months ago, and you still are. you are not capable of any type of conversation. it seems like coffeescript is your wife and you get mad any time anyone says she isn't the prettiest girl in the room. get over it. the only troll you are feeding is yourself.
We can have a nice conversation when you get your head out of your arse.
Assuming, of course, that you want all that content to be search-indexed. Obviously this changes on a case by case basis, but in the example given by the OP there is a strong argument that you don't actually want the full list of answers (and markup indicating the correct one) to be openly accessible. 
On the subject of whether some or any posts that mention CoffeeScript in the title and/or body may be posted to the JavaScript subreddit, the moderator has spoken: The JavaScript community can express itself with its votes. You get a vote, I get a vote, everyone gets a vote. Obviously you can continue to agitate for for your point of view, but until I hear otherwise from a moderator or an FAQ, I am going to go by what [honestbleeps](http://www.reddit.com/user/honestbleeps) has written [above](http://www.reddit.com/r/javascript/comments/npbrn/announcement_rjavascript_now_has_active_moderators/c3azadz). (This does not mean I will be posting any more articles about CoffeeScript to the JavaScript subredddit.) On the subject of my choice of title for that one (just one!) post, I have explained the situation to you in a [comment](http://www.reddit.com/r/javascript/comments/niqup/coffeescript_is_not_a_language_worth_learning/c3a0f0j) and I also added an addendum in [the original post](http://github.com/raganwald/homoiconic/blob/master/2011/12/jargon.md#readme). You obviously don’t accept my explanations, that is your right as well. But you really ought to let go of the subject. The reason I suggest this for you is that it’s something that just happened once. Malice? Happenstance? Misunderstanding? No matter what the explanation, it’s `n=1`. Carrying it around as if there are things going on every day is like carrying a cancerous tumour in the part of your brain that makes you happy. Something happened once. You’ve expressed yourself with brutal candour, it’s over and done with. I recommend we both forget about it and not dig the corpse up again unless there are further incidents of posts having titles you consider to be not in the best traditions of reddit. Pax. (EDIT: Parenthetical clarification that I have no sudden desire to write or post articles about CoffeeScript.)
very nice css, styling, etc... good job how about adding a : 'non' flooding behaviour (it's quite easy) to prevent spammer or morons from spamming us too often, also, could use a list of 'banned' words to make sure conversations stay 'safe' for work too. 
I think Dojo's website has more than enough to get you started, there are also some good books on manning.com --- a quick google search for "lazy loading with dojo" lead me to this : http://download.dojotoolkit.org/release-1.0.2/dojo-release-1.0.2/dojox/data/demos/demo_LazyLoad.html I guess that's what you need := Merry xmas
i wasn't asking YOU, i was asking the mod. Your opinion on this matter counts for nothing since you actually posted the misleading title. I would like for the mods to keep the content of this subreddit under control, because coffeescripters will no doubt continue posting their noise here. keep it to r/coffeescript where it should be posted and there wont be any disputes here about what belongs in r/javascript. I am not singling out coffeescript, if anyone posted about any other language that isn't javascrpt here (even though it may compile to javascript), I would equally deride that post, but so far only coffeescript fans choose to ignore the rules of reddit with impunity. Any time a coffeescript post happens here it is open season for discussing all the things wrong with coffeescript. I and others will always point out it's flaws, in the same way coffeescripters think they need to point out flaws in javascript. If you don't want to have coffeescript get talked about in this way, then consider only posting your coffeescript articles in r/coffeescript, because otherwise you really are only looking for a flame war. I don't care what tools you choose to use, go use a hundred different languages if you want, I just dont give a fuck as long as I don't have to read about your bad decisions in r/javascript. And, i don't really give a fuck about this account or reddit karma, so anyone can downvote me all they want or even ban me, it isn't going to change how reddit is supposed to work, with posts going to the appropriate subreddit. I'll continue to point out the flaws in coffeescript as long as articles about it get posted to r/javascript, or any other language who's fans think their magic new tool deserves to distract people from discussing javascript here. I also would like to point out that I will never go into r/coffeescript and post negatively about it there, because I am not a troll. Too bad I can't say the same about some of the fans of coffeescript. 
About "how reddit works." One of the specific items in reddiquette is civility. I think you would get more support for your views if you were civil about them. With respect to whether coffeescript posts belong in JavaScript, you want action thing from the mods, and you have heard from the mods that unless it becomes a problem, they will leave it up to the community. By all means use your powers of persuasion to convince your fellow redditors how to respond to posts you don't wish to read. But please don't lecture me about "The rules of reddit." The rule of reddit is that each reddit is a community, and things belong in the subreddit if they're of interest to that community. There is no rule that people who program in pure JavaScript are not interested in posts about other things related to JavaScript even if there is another subreddit devoted to them. Likewise, here is no rule that we be interested in everything relevant to JavaScript. It's a community, which means that I must abide by community standards, as must you. I don't get to decide what must and must not be here, and **neither do you**. if you don't respect your fellow redditors enough to go along with what they upvote, you should reconsider your presence here. EDIT: I'm frankly dismayed at your "I don't care about karma and being banned" bravado. This makes you seem like someone who will do anything to get what they want, regardless of whether everyone else agrees. That's the hallmark of a fanatic or zealot, not someone trying to make the subreddit a better place for everyone. You also said elsewhere that you are happy to add noise to posts you don't like, making their comments less useful for everyone trying to have a constructive discussion. And that is happening here where people are trying to have a constructive discussion about what does and what doesn't belong in /r/JavaScript. Ask yourself: Are you here to make the subreddit a better place, or a worse place? If the answer is, "A better place," ask yourself if this kind of antagonistic "I don't care about downmods or banning" approach is making it a better place or not.
You don't get to decide what gets posted here, and neither do I, but the mods do have that power, and all I'm interested in regarding control is if the mods are interested in keeping r/javascript about javascript. r/javascript isn't called r/coffeecript for a reason. I can't fathom how you and others can insinuate that since coffeescript compiles to javascript, that it somehow deserves to be talked about in r/javascript and not in r/coffeescrpt. I know my opinion accounts for practically nothing in this world, and the haters think I somehow want to control r/javascript. That is simply not the case at all. I call bullshit when I see it and posting coffeescript articles in r/javascript is just that. Coffeescript is less related to javascript than actionscript, and you don't see anyone posting actionscript articles in r/javascript. Because it has it's own subreddit, and that is where those posts go. I'd much rather read about actionscript here than coffeescrpt, because actionscript is a whole lot closer in design/syntax than coffeescript is (it actually is javascript, unlike the claims by coffeescripters that 'coffeescript is javascript' which is just nonsense. I'm not suggesting it's appropriate to post actionscript articles in r/javascript. In case you haven't noticed I AM NOT THE ONLY ONE who thinks this way. I'm probably the most vocal and take the most abuse from people like you and many others, and it doesn't matter because you are the ones who think it's OK to post coffeescript articles in r/javascript and you just can't see the point I am trying to make. So far you haven't made any points about why coffeescript really does deserve to be talked about in r/javascript. This is all besides the fact that coffeescript introduces plenty of it's own gotchas and is a terrible way to code if you want to do anything serious on the front-end, it doesn't scale. I do recommend people avoid it, it is nowhere near a best practice. There are numerous flaws with coffeescript and I'll continue pointing those out as long as I have to read about it in r/javascript. That is the bottom line. I'm not the only one who will speak out against it here. It won't ever stop as long as there are coffeescript posts in r/javascript.. so we're really at an impasse I guess. You can't convince me that i'm wrong about what I think about coffeescript posts in r/javascript, and I can't convince you to take coffeescript articles to r/coffeescript where they rightfully belong. You are definitely more in the wrong here as far as I'm concerned. I'd just like an r/javascript free from useless articles about coffeescript that do nothing to better people's understanding of the language that is javascript. If you want to learn about coffeescript, there is an active subreddit for that. Posting coffeescript articles in r/javascript is plain wrong, and I'll keep saying it over and over and over and over until you and others start to get the point. Coffeescript articles belong in r/coffeescript. Do all the mental gymnastics you want, coffeescript doesn't belong in r/javascript when there is r/coffeescript. 
First, I understood you the first four or five times. I really do understand that you don't think CoffeeScript is relevant here, and I don't even disagree with your general position. I understand that plenty of other people agree with you. I have never said that every CoffeeScript article belongs here, and I never will. Thre is no need to convince me of anything. I posted one article here, I felt at the time it was a special case. But I haven't posted any other CoffeeScript articles here, so you needn't assume that I'm going to post any more. As for your not stopping, preach your gospel with my blessing. But let's both pay attention to being good redditors and respecting what the mods decide and how our fellow redditors vote.
I'm fine with everything you said here. I'm glad you clarified, and that you recognize your error in posting a misleading title - I can forgive that with your acknowledgement (not that anyone is asking for my forgiveness, but I forgive you nonetheless). I only usually get defensive and angry about things when people like dipswitch attack me personally for holding a different view than they do. Yeah, I will bash coffeescript as a poor decision to make when starting to write code, but that isn't done personally, at least I don't intend it personally until people start taking personal swipes at me, which seems to happen quite a bit when talking about coffeescript here. 
I agree. You're a fool not to at least try WebStorm. I program in 100% javascript everyday, and it is by far the best. * refactoring * fast navigation * super code-cleanup support * nodejs support * crossplatform on win/mac/linux * coffeescript support The only downside is that is costs money. But seriously, it'll save you more than the $99 bucks it costs.
Safari, started to lag out when I used the paint bucket.
Wonderfully useful when an editing environment wants to say: "Did you mean:" + the closest candidates with the lowest Levenshtein distance. 
I get where your frustrations come from, but let's put this into a bit of perspective: There are, on average, 5-7 posts per day in this sub over the past several days on my very quick scan/glance... Yes, the system fails sometimes when people vote without reading.. but if it fails once a week in this subreddit as it stands right now - what's the detrimental effect, exactly? Default reddit users have 25 posts per page. It would take 15+ "bad posts" to knock anything from the last 1-2 days off of the front page in this subreddit here. I don't believe moderators' job is (usually) to editorialize or "vet" content here... It's to serve the community in the best way possible... Since the community has the tools available to "vet" content (voting, and if it's *that* bad, clicking "report"), the mods should probably stay out of it unless absolutely necessary. I've been a member of reddit for a looooong time, and if there's anything I can tell you it's that in my experience, communities generally want mods to keep their hands OFF for the most part except in extreme situations. The backlash when mods start vetting content for quality (except in specific subreddits that are very explicitly defined as heavily moderated) is generally great. One thing I think people (all of us, I'm not trying to pick on you) need to really do is take a step back and see just how much their "pet peeve-o-meter" is a bit overcalibrated... For reference: 2 of the last 100 articles posted to this subreddit reference Coffeescript in the title. 3 of the last 200 articles - which goes back to *30 days ago*. I think perhaps the problem is much bigger in your mind due to it being a pet-peeve than it is in reality. However, if it becomes obtrusive enough - I'll be happy to intervene.
Is it a subset of IDEA?
Your attitude seems a bit lax, a bit 'anything goes'. My attitude is, this is how problems start, by not having clear definitions of what is acceptable to post in r/javascript. Other subreddits go through this too. I'd actually like to see a vote set up. Then you could put in the sidebar, "post anything about javascript and anything tangentially related to it", but right now it says "All about the JavaScript programming language.", and that does not say anything about coffeescript or any other language. If we could take a vote, then we could put the issue to rest, hopefully. I for one would abide by that, if there were a clear definition about what this subreddit is about. Right now there is no moderation going on, and the purpose of r/javascript seems open to interpretation, and that leads to chaos as we've seen. Until we have a change in the charter defined by the mods, coffeescript doesn't belong here as far as I'm concerned. Yes, you are right there is a lot of peeve going on here, but if you don't know why, coffeescripters started it by posting all the bullshit about how it is more 'beautiful' than javascript, it looks so much better, will make your code faster, you will be more productive with it, and obnoxious and untrue garbage like that. There was/is a lot of aggression against javascript being posted by coffeescripters in r/javascript and elsewhere, and how exactly is that productive?? If they weren't so blatantly trolling, nobody would take issue. All the negativity coming from coffeescripters about javascript causes the same back to coffeescript. Attacks against javascript don't offend me personally, but it is this inane bullshit that just isn't true and yeah, it does peeve me and others. We don't need stuff like that posted in r/javascript, and even though it has cooled down a bit, the recent article about 'coffeescript is not a language worth learning' seems to suggest something similar to this and as a result, it got flamed for it, and for having a misleading title that got unfair upvotes. All that ruckus could be avoided with some simple guidelines for this subreddit. Personally, I applaud you for getting the mod status, this subreddit has gone far, far too long with a lone mod who seems to be too busy doing other things. But now that there are mods, they don't really seem to be doing much about the #1 problem going on in this subreddit. If 'business as usual' is good enough, then so be it. As it stands now, pretty much any post about coffeescript is likely to get flamed here (not only by me, and I usually don't start the flaming), until there are some rules established saying that coffeescript is allowed to be posted in r/javascript. But I don't see any such rules listed, and you don't really seem to care to fix this problem at all. Reddit's general rules about posting means that coffeescrpt articles should be posted in the appropriate subreddit, which is r/coffeescript. If people choose to post them in r/javascript, at least until we all vote on it, coffeescript articles posted here should probably expect some flames. 
&gt; But now that there are mods, they don't really seem to be doing much about the #1 problem going on in this subreddit. 1) We just got here. We're not about to immediately just start throwing out weight around like hardasses... I'd like to see what people want from us first... 2) Thus far, I don't get the impression from anyone but you feels like this subreddit has any real significant problems... Now maybe there's a bunch of silent people grumpy with how this subreddit is going - but considering how low traffic is in here, the signal to noise ratio is quite impressive in my opinion. Like I said - 3% coffeescript posts (seemingly your biggest annoyance) in the past month. That's hardly some sort of major epidemic, and if a decent number of people find any relevance whatsoever in the CS related posts that weren't tinged with a bogus title ... well.. you get the idea... Lastly, and this is an honest question, I don't have a predetermined answer I'm waiting to counter with: Why do you feel a "vote on if you think these posts are OK" thread is functionally different from "vote on this individual post", which is a mechanic that already exists?
OK, lets wait and see what happens the next time a coffeescript article gets posted here. fine with me. oh, and btw, I was not the person who brought up the question about coffeescript postings, and there are already a few others with similar feelings in this thread, so you cannot say that I am the only one who feels the way i do about the subject. as i said before, i am probably the most vocal because i dont give a fuck about karma/votes, you can ban me and i won't give a shit, unlike probably most people here.
Nice!
Other than the short examples of map and reduce, I don't see much about actual functional programming there. It seems like its just a quick intro to how functions work in javascript.
[Levenstein distance in 136 bytes](https://gist.github.com/1127070) Bonus point: this implementation doesn't use the whole matrix approach. Only the current and previous row which saves a lot of memory when comparing long strings. 
I wonder how they debug their coffeescript code. The browser is obviously gonna show the error info as per javascript code. Also I prefer {} over tabs and space's. The braces are more readable than the tabs. The ; gives more freedom to compress javascripts. Also writing a bookmarklet in coffeescript I assume is not possible or effective.
There is a way to write the example you show in idiomatic javascript, with the difference that truncate should be a function constructor: function sanitize(){ return this.replace(/[^\s\w\d-']*/g,''); } function trim(){ return this.replace(/^\s*|\s*$/g,''); } function truncate(n){ return function(){ return this.slice(1,n); }; } var transform_me = " I'm a $REALLY$ evil-text. "; [truncate(200), trim, sanitize].reduce(function(str, fn){ return fn.call(str); }, transform_me); 
FYI, __bind variable is not defined.
&gt; JavaScript doesn’t have Java like Class based Object Oriented Programming support so in many ways you’re forced to be Functional in JavaScript That's misleading to say the least. :|
Very nice! I was confused for a second what arguments you pass in, but then I realized that c, d, e, f, and g are used to declare the local variables without having to use *var c, d, e, f, g;*
What accent is that in the screencast? It's awesome.
french, most likely you can ask OP, it's him
Yah, all their IDEs are IDEA based.
You can find other languages (and another JS implementation) at: http://rosettacode.org/wiki/Levenshtein_distance
One thing you'll want to worry hard about when you're doing this kind of stuff is turning *off* these auto-fetches when your user goes to another page. If every time they visit the #!/tweets route in your app, you construct a tweets view and kick off one of these auto-updater timers, then eventually you may have a whole bunch of them firing off uselessly in the background, consuming server resources, and piling up references to these derelict view objects and their accompanying DOM nodes in memory because JS still maintains references to them via the neverending timers they're lexically scoped to. One solution might be to fail out of the timer repeat if the view's DOM node is no longer contained by the owning document, but you'll definitely want to think about some way of avoiding memory/resource leaks.
That's not Javascript, that's ASP. :) Try the Javascript section of that same website! Except, they don't seem to have a page that specifically covers interactive forms. What you want to do is certainly possible with Javascript. If it was me, I'd use the innerHTML property. You'll first need to read the values from the input fields, using ID="" to identify each thing you'd like to read from/write to. You can use onchange to do this as soon as the user changes the field value (eg. presses tab, or clicks on next field).
May someone explain what the purpose for this is? What is it trying to replace or do a better job of?
r/ecmascript maybe d:
O: ...I want it...
Say you have a news feed on your home page, and you want to automatically drop newer items into the top of the feed as they become available.
The solution that you mentioned works well, another way to do it would be to listen to the router 'route' event, which is triggered when the page changes. Thus, whenever the page changes, we could run a function that removes the TweetView's auto-updating function and the view itself.
Yes. You'd just want to make sure and finally unbind the event when that happens since otherwise the list of callbacks (and by reference, view objects and DOM subtrees) attached to the router event would grow arbitrarily large and never be GC'd.
Drizzit? Is that you?
Dunno who that is. 
Why is it misleading? Just compare OOP in Java vs. OOP in JavaScript. Isn't it a fact that you don't have classes in JavaScript? It is functions which are instantiated in JavaScript, not classes. Aren't you forced to use closures to implement private members? 
Would love to know how I can improve it. What would you have like to have covered? Thanks.
If you're talking about classes, then you're talking about classical inheritance. If you're talking about their analogue in JavaScript, then you should be mentioning prototypal inheritance.
Of course, that's correct. I didn't want to mention that in a post titled Functional Programming in JS. I'm preparing some examples for an upcoming post on OOP in JavaScript.
Sorry for the late reply, I didn't get a comment notification. Thanks for the bug report. I've already filed [an issue for this](https://github.com/jacktrades/SRFI-1-in-Javascript/issues/2) and plan on fixing it soon. &gt; The current algorithm will only return true for circular lists where the tail points to the head of the list, and not for circular lists where the tail points to an arbitrary position in the list. This should be implemented using Floyd's/Brent's cycle finding algorithms.
It's misleading because not only you are in no way forced to be "functional", but Javascript's prototypal inheritance and objects definitely can be used like Java's if one desires. Objects are instantiated, not functions, and the environment that contains the local, private variables of an object in Javascript functions the same as the environment that contains the objects' variables in a Java objects. So you aren't forced to use any extra closure to implement private variables - the same object is created regardless.
Thanks for the tip. Levenshtein didn't solve the problem I was working on, so I'm working on an implementation for the [Jaro-Wilker Distance](http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance) now. I didn't find that algorithm on the site, so maybe I'll add it once I figure out how to use it.
&gt;&gt; Objects are instantiated, not functions That's inaccurate. Try doing: var x = new {hello: "world"}; in your V8 console. You get an error message saying only objects of type function can be instantiated. Sure functions are objects. Everything is an object. But only objects of type function can be instantiated. --- On the second point, you've repeated exactly what I am saying. When a private member exists in a closed environment, and you have a getter to access it, a setter to modify it or any other function reading or writing it, it *IS* a closure. Now you can argue that it functions similar to private members, getters and setters in Java. This I agree. But the very fact that you create a closed environment and expose methods that work on this closed environment (which btw is what a closure is) to achieve OOP, proves my point. JS as a language does not support Classes (and OOP principles) without Closures (and FP).
It's fixed now. Thanks again for the report! Also I've merged this repo into a general [JavaScript-Libs repo here](https://github.com/jacktrades/JavaScript-Libs), so you can find the updated code there (along with a better test suite that is removed from the implementation).
Yeah. I think Backbone objects should have an API called 'bindOnce' or something (which automatically unbinds the function after one trigger), so that when we have use cases like this one we don't have to unbind it afterwards.
You use a lot of bold.
&gt;A markdown parser is a terrible thing to waste. **Fair enough!** *** *Though*, I would say that as a Python developer, I find CoffeeScript to be *more* `Python` than it is `JavaScript`. JavaScript's syntax often seems convoluted, from my perspective as a C, C# and Python developer, who does not work much in web development. Really, the truth is CoffeeScript belongs in r/CoffeeScript. From a syntax perspective, it's Python. From a technology perspective it's JavaScript. codeBlock { }
OK, in fairness my responses to you were a bit silly. I was taken aback by all the bold. That said, if you read all the responses to the particular comment thread I was responding to, you'll see that I was trying to be pragmatic\*. Check out [this](http://www.reddit.com/r/javascript/comments/npbrn/announcement_rjavascript_now_has_active_moderators/c3aznpd) comment stream, for example. If anything, that guy is on the '**CS is not JS** holy war'. Personally, I feel that there is room in r/JavaScript *and* r/Python for CoffeeScript. But, you should understand that CS means different things to different people. For me, it makes web development as approachable as ASP.Net does, being that I'm a C# dev. For hardcore JS/CSS/HTML devs, it has no place in their purest r/JS. I mean, that dude is actually raging that *every* CS article **pushes a JS article off of the front page!!!!111ONE** I agree 100% that: &gt;that's not how Reddit works. Which, is actually what I was trying to say, in this context. r/CS has shit for subscribers. Until there is a standalone community focused on it, CoffeeScript will troll all the zealots in both r/Python *and* r/JavaScript. EDIT \*So was honestbleeps, which is what initially annoyed me about all the zealotry.
You should probably only ever initialize the timer once and if the #!/tweets route is clicked again it should check if the view and timer is initialized, if it is don't initialize again and simply reveal the already rendered view.
Only if you don't mind that process always happening in the background even when people aren't viewing the tweets page.
Then kill the timer ( clearTimeout(id) )when you click to another route and restart the timer when you click back the the tweets route.
browsers and nodejs are not the only places javascript executes. Photoshop will run javascript, as will After Effects and other popular Adobe programs. Sony Vegas Video runs javascript. JScript.NET is very powerful too, leveraging the huge .NET framework to write desktop applications, command line tools and web server back-ends. There are many other uses for javascript than web browsers and nodejs. I wouldn't be able to centralize around cloud9ide for this reason.
Some extras to cover in possible later posts (might want to include some in the current): * It would have been nice to mention that modern JS implementations contain map, filter etc. * The power of every/some (all, any in Python and elsewhere). * Something about directionality of reduce (folds either right or left, what's the difference/point)? * Scan function (little brother of reduce, handy for generating series given it returns intermediate results too) * Chaining (_(a).map(fn).filter(fn).val()). Bonus points for making this "pluggable" (ie. easy to attach new funcs to _). * Generalize forEach (useful it it works for objects too). * Something about partial application. It's a useful concept if you know it. It might have been better to split the post up and convert this thing to a series but hey it's your blog, do as you like. :)
the more i read about backbone.js the more i feel the need to use it :)
Thank you for explaining. What is the difference between this and say just displaying an RSS feed from an ajax request. Is this attempting to reduce requests?
CoffeeScript is to Python as JavaScript is to C. Discuss.
What Makes you think he down voted you.
Thanks for the feedback. A series does make sense!
Not really, the code is basically the same, but organized more logically and for better scale. The views define the dom elements, their events, and how they are rendered, and the models/collections store the data and take care of persistence. If you have several modules on a page or in a single page app, like the one in this example, which fetch, store, track state, and re-render data, then you are better off organizing your code with something like backbone. Usually the alternative is to try to wire together a bunch of jquery callbacks across a number of files/modules, which doesn't scale well.
JetBrains IDE's are amazingly good. I used PHPStorm and it's still the best IDE i've ever seen (and too expensive for me :( )
I don't see what you're talking about. Looking at the results from the test in the latest versions of firefox and chrome all three insertions run at the same speed
Maybe because your test is wrong? http://jsperf.com/treasonx-push-vs-length/3 edit: Actually Array.prototype.push is really slower on Safari and IE edit 2: Sorry for this answer, I'm wrong. There's no need to initialize the array in each tests.
I was just surprised that push wasn't the fastest across all browsers. 
Check out the tutorials section as well: www.dojotoolkit.org/documentation/ There is a tree tutorial - not sure if it covers lazy loading or not off hand. Another good resource is the #dojo irc channel and mailing list :)
keep in mind that 1.0.2 is a super old release, you'd want to use either 1.6.1 or 1.7 to get an up to date view of how to do things with Dojo. 
Right, 1.7 no longer has a "base", so dgrid itself only loads those packages which are necessary. 
herp derp Function call overhead Y U so big
Push() performed fastest when I ran the test (Chrome, WinXP), 12% faster than using length. However in Firefox 8, length is 6% faster than push(). Fun times
Thanks! Somehow, I plagiarized [your point](http://www.reddit.com/r/javascript/comments/npbrn/announcement_rjavascript_now_has_active_moderators/c3bgxfx): &gt; The fact that CS and Python share some syntax is irrelevant in terms of what belongs where. JS and C share some syntax too...but that's neither here nor there. Edit: Sorry! I assure you this is sincere flattery.
Hmm. Looks cool and powerful, but I still feel weird about putting all that stuff straight in the markup. (`ng:submit` feels like the evils of the `onclick` attribute all over again.) I get that this is one of their big selling points, but I'm not sold.
Interesting but I wish the page didn't hijack my back button.
You once go angular you never go back
onclick attribute requires putting javascript in html tags. ng:submit provides a link between controller and html elements without need to directly put any code there
Example has a style tag inside the body. Is this intended to suggest that the engine will move the style block to the head where it belongs?
Have you taken a look at XForms, which is what the W3C designed for MVC forms? XSLTForms from http://agencexml.com is a good implementation done in JS that we use at my work. I have also a recent download at http://xformstest.org/xsltforms
Saw a talk about this at a ColdFusion and Flex heavy conference. The guy presenting it (who was also developing it) was obviously smart, but I really didn't see the point of it. It seemed like it added a bunch more work for the developer with only marginal gains. It really felt like it was just an exercise to make JavaScript behave more like Flex for the sake of doing it, rather than to solve a problem.
It's still too wordy-looking. And it's too much logic in the view. /mvc rails guy
Seems like a new wave of Javascript frameworks arriving. Anyone know of a comparison between backbone, ember, and angular? 
Really? `addTodo()` looks like plain ol' Javascript to me. Is that just syntactic sugar that makes it *look* evil?
&gt; That's inaccurate. No, it's very accurate. &gt; You get an error message saying only objects of type function can be instantiated. Of course you do, that's not even correct code. You can however create objects like this: var x = {hello: "world"}; typeof x is then "object". &gt; But only objects of type function can be instantiated. This is meaningless. All objects have the type "object". &gt; When a private member exists in a closed environment, and you have a getter to access it, a setter to modify it or any other function reading or writing it, it IS a closure. You are conflating closures and objects and member access privileges. I do not think you are using a standard definition for "closure" here, so I will concede that you are correct according to whatever bizarre definition you are using. &gt; But the very fact that you create a closed environment and expose methods that work on this closed environment (which btw is what a closure is) to achieve OOP, proves my point. I don't think you have a point. &gt; JS as a language does not support Classes (and OOP principles) without Closures (and FP). Even by your own bizarre definition of closures, this is incorrect. You can easily make classes without private members, so that would be without closures according to what you said (which is still incorrect). Also, you seem to be saying that because you indirectly use closures, you are doing FP, which is a non-sequitur.
&gt;Superheroic **So brave.**
Apples and oranges is a good comparison.
http://www.sitepen.com/blog/ has a lot of good tutorials, you just have to dig through the other stuff. It might even be interesting, I always skipped over it. =) It seemed to be mostly training seminars but the tutorials I found were solid.
&gt; If you're talking about classes, then you're talking about classical inheritance. You can talk classes without talking inheritance. (Conversely, you *can't* talk about prototypes without talking about inheritance since delegation is the key concept.)
Yeah, that's really obnoxious.
They all address the problem of keeping data in sync between the client and the server (data binding), and templating in a more or less MVC way. What do you see as their major differences?
&gt; The guy presenting it (who was also developing it) was obviously smart, but I really didn't see the point of it. It seemed like it added a bunch more work for the developer with only marginal gains. I feel like this when confronted with most of the JavaScript frameworks I see these days.
Good job, Baby Huey.
Youtube recently started doing this and it makes HULK MAD.
Bravo, sir.
&gt;&gt; You can however create objects like this: &gt;&gt; var x = {hello: "world"}; &gt;&gt; typeof x is then "object". And how is this an example creating an instance of a user defined class? It isn't. --- &gt;&gt; This is meaningless. All objects have the type "object". console.log( typeof function() {}); // function Of course even functions are objects. Nobody's debating that. --- &gt;&gt; Even by your own bizarre definition of closures, this is incorrect. &gt;&gt; You can easily make classes without private members Sure, but then you conveniently ignored the part of supporting OOP principles. In C you can create a Struct as well, does that qualify as OOP support? Please show me an example on encapsulation with Classes in JS without closures? --- I'd love to read your definition of closures, thanks.
I have not worked with angular, but i can tell you that backbone gives much more then a marginal gain to the developer. Granted, this is on a larger project with about 260kb of ui javascript code.
I've always felt that a simple onclick="doSomething(this)" was cleaner than a lot of the spaghetti mess that jQuery code descends into.
&gt;&lt;span&gt;{{remaining()}} remaining&lt;/span&gt; &gt;&lt;input type="button" ng:click="removeDone()" value="clean up"&gt; Isn't doing both templating and logic inside markup going a bit far? Is this not breaking the "separation of concerns" motto of the MVC pattern?
How is this news? Angular has been around for over a year. Whether or not it's a good framework, it's not a new thing. Do we want all existing JavaScript frameworks posted here because someone thinks they are nifty?
Where's the logic? Do you mean in the `click="removeDone()"`? If so, what would you rather see?
push is the fastest solution for my chrome 16 in windows 7 :)
It would be nice to have some discussion of there strengths and weaknesses… And if that happens because people post them here, then I think it would be a *great* thing to have them posted here.
Ok, then post a link to a new blog post about a framework, or a significant new release, or at least write a comment yourself describing your experiences. Otherwise we might as well post "this is awesome" links for Backbone and Spine and Batman and ... Incidentally, my take on Angular when I tried it 9 months ago, was that it was a nice framework but was glacially slow on initial form load on IE7. They might have fixed it since then, but it was a bit of a showstopper for the project I was on at the time.
True – a new blog post would be nice. But IMO, since this community is still fairly small, I'll be happy with anything that gets the conversation started.
I don't think that angular gives you marginal gain to the developer. In my opinion automatic data-binding gives you a powerfull tool which can save writing a lot of code.
There's no buisness logic in the view. Only bindings and templates / view control.
I don't say that Angular is new, i just wanted to start conversation about this, because I'm thinking about using angular in my new (big) project, and doing research
If "looks like plain ol' Javascript to me" is an argument, so node.js and cofeescript should never be used. If you want to bind action in JS to a element, you can write using jquery $(element).click(func(){}); You must put this expression in some block of code, which you must properly organize. If you have hundreds of elements to bind it's getting really messy without proper MVC framework or sth like this. With angular, you can easily and clearly bind hundreds of element to proper actions and keep buisness logic out of this.
yeah, where's the logic here?
[irc://irc.freenode.net/r.JavaScript](irc://irc.freenode.net/r.JavaScript) for the lazy with clients
click="removeDone()" is binding actions directly inside a view which is what MVC pattern is supposed to avoid.
Regexes are business logic.
what regexes?
awesome! just signed in :D
christmas all over again
For some time, there's been a drive in the community for good resources. I'll try to list a few here that might be useful as sidebar links. * http://w3fools.com/ - Why you shouldn't trust W3Schools as a resource and what you should use instead * https://developer.mozilla.org/en-US/ - The Mozilla Developer Network, a great (and trusted) resource for JavaScript (also HTML, CSS, DOM) * http://movethewebforward.org/ - The newest community initiative, how you can get involved in the community and help out * http://jsfiddle.net/ - Good for prototyping, playing around and reporting bugs etc. * http://jsperf.com/ - A must if you need to performance test your JavaScript (or see tests that others created) There are, of course, other useful resources around the 'net, but I find myself constantly use these when I talk to people that are striving to learn more about web development. Make sure to check out the links on W3Fools and MoveTheWebForward for more! Edit: fk1blow reminded me of jsPerf
[Look at the example code for a form from the cookbook.](http://docs.angularjs.org/#!/cookbook/form)
Just have them install [this](http://userscripts.org/scripts/show/7686). The original just-youtube version is [here](http://userscripts.org/scripts/review/7630). But note that that one won't pick up the link shortened version (youtu.be) which I still curse youtube to this day for making the default link type. 
Here are some blogs that have some good js resources... * http://www.adequatelygood.com/ * http://perfectionkills.com/ * http://javascriptweblog.wordpress.com/ * http://michaux.ca/ * http://msdn.microsoft.com/en-us/scriptjunkie/ * http://www.dustindiaz.com/ edit: * http://www.dailyjs.com - nice roundups(mostly node.js lately) * http://www.echojs.com/ - found about it a few days ago * http://yuiblog.com/crockford/ - nothing to add here Many of my bookmarks are linked to articles; i can post some of them in someone asks. Cheers
You didn't answer the second part of my question - what would you rather see? A controller/mediator/whatever you want to call it that runs something like `$("#doneButton").click(removeDone)`?
&gt; Please show me an example on encapsulation with Classes in JS without closures? This is irrelevant. Your initial point that Javascript forces you to do FP because it doesn't have classes is based on nothing. You still have yet to show any real examples of why anyone is forced, or even just "coerced because it's easier or more straightforward", to do FP instead of OOP.in Javascript. &gt; console.log( typeof function() {}); // function That demonstrates nothing towards any point you have previously mentioned. A rank novice can create an object without using a function. &gt; I'd love to read your definition of closures, thanks. Way to dodge that one. I'd love to see an example of how you are forced/pushed towards doing FP in Javascript.
Binding should be done in the controller: &gt;&lt;span&gt;{{remaining()}} remaining&lt;/span&gt; &lt;input type="button" id="mybutton" value="clean up"&gt; &gt;Controller.removeDone = function(){} &gt;Controller.action('mybutton', 'removeDone')
I read things like this and shake my head. Why are you creating "files" inside a browser? Data in a browser does not need to conform to a filesystem of any kind. It's data, the concept of files and directories are a metaphor that might have made sense in 1970's Unix philosophy but is clearly, 100% irrelevant in today's modern web architecture.
but they're in controller not in the view
Here's my little contribution: * https://github.com/bebraw/jswiki/wiki - Little wiki I maintain. Good starting point if you need some lib that does something specific. * http://jsbin.com/ - My favorite online editor at the moment. It has some glitches but overall it's fine. * http://jsdo.it/ - Another online editor. This is pretty good as well. * http://webreflection.blogspot.com/ - One of my favorite JS blogs. Technical stuff. I'm sure there are more that could be nice to mention. Those should help a bit, though.
Thanks for the suggestion, but I'm hoping for something browser-agnostic.
That's pretty much as browser agnostic as you can get. It's a user script which will run natively in Chrome, Firefox, and potentially Internet Explorer depending on it's Greasemonkey support. You want to turn it into maybe a bookmarklet that can be clicked manually from your favorites menu?
Mostly because this subreddit had no active moderator for a long period of time until a few days ago... We just haven't gotten around to culling together a nice pool of info for the sidebar... looks like you guys are doing a nice job giving us a head start, thank you!!!
And why's that preferable? Doesn't that create unnecessarily tight coupling between the controller and the view? In my experience, it has always been nicer to declare a UI element's "immediate" action on the element its self (ex, `onClick="controller.removeDone()"`), because that makes it easier to update the "visual" aspects of the view, and removes the need for all sorts of otherwise useless IDs (like, ex, the `id="mybutton"`).
Why isn't this on the sidebar?
I love Diaz's stuff. I highly recommend reading his articles! Edit: but the site's down.
I am going to do a siebar overhaul soon. It will include this.
yeah, webreflection is indeed a must. One thing that was left out is John Resig's blog - http://ejohn.org/category/blog/
...and add jsperf.com to that list.
Why put an arbitrary constraint on how we access data at all? HTML5 _does_ provide an API to access a place where files are still relevant -- your average PC. I hear a lot of hate for Filesystems, but (and perhaps this has to do with my love for the 'everything is a file'-ism of Unix (sue me, I like plan9 too. :) )), sometimes it makes sense to think of things as files, and to use an API like this to deal with it in a natural way. I'm for more options, never fewer. Further, I think you have a false assumption. Namely: &gt; ... the concept of files and directories are a metaphor that ... is clearly, 100% irrelevant in today's modern web architecture. (Forgive me if I over-snipped, I'll happily edit in more quote if you take any offense or feel slighted) I humbly disagree with the notion that this is 100% irrelevant, I can imagine -- at the very least -- one scenario where it is not. If I am aiming to provide a web interface to control a unix shell from a Filesystem-API enabled browser, these would be a lovely tool to use -- ensure that user input is sanitized appropriately, delegate 1-to-1 to this tool. Another potential use is for building a web interface to manage a heirarchical file-organization system, say a simple address-book that persists to the users machine. I don't disagree, however, with the statement that files and directories are not _always_ 100% relevant -- that is to say, sometimes a different system is better. Web Apps make excellent use of novel storage systems, I think that the right answer is never to be limited by saying, "This is old, therefore it's probably not as relevant as new-shiny." To put plainly my point, sometimes those neckbeards got shit right (Filesystems, Everything-is-a-fileism), sometimes they got it wrong (Not making unix strictly adhere to everything-is-a-fileism, filesystems, COBOL), almost all the time they got things half-right and half-wrong, just like we do. In conclusion, I think that choice is king, fine grained choice allows for tightly fit, efficient solutions, which is -- after all -- what we strive for.
http://dev.opera.com/ has lots of good JS-related articles.
It's not a matter of which is preferrable, in fact I agree that simple declarative UI's are nicer in many situations. But if you are doing logic binding in your views it isn't the MVC pattern.
Fyi, I get a solid 33fps on the latest firefox build, and 36 on the latest chrome. Windows 7 with a really good computer.
Where are you coming from development wise? Are you a developer who needs or wants to learn JavaScript or are you trying to learn it as a first language?
I was playing around with this over christmas: http://reddit.darrenwhitlen.com/ The websocket (using socket.io at its core) subreddit listener was the re-usable outcome for anyone else to use. Other than the obvious subreddit widgets, what can you guys come up with by using this library?
Take a look at http://audiolibjs.org/, and let us know how it goes :-) Also if you're interested in help on rolling your own for any of these, or for another fun project you should message me.
I use http://www.javascripture.com a lot to check the api.
Just out of curiosity, what's wrong with ##javascript (on Freenode as well)?
Try pasting this into the url bar, but remove the leading slash: http://jsfiddle.net/ePFNT/ YouTube links are red. Haven't tested other browsers, but it works in Chrome. javascript:(function() {var aLinks = $('a');var url = [];aLinks.each(function() {var cURL = $(this).attr('href');if (cURL) {var isYouTube = cURL.split('/')[2];if (isYouTube==="www.youtube.com"||isYouTube==="youtube.com") {$(this).data({num:url.length}).css({color:'red'});var id = cURL.split('?v=')[1];url.push(id);$(this).bind('click', function(e) {e.preventDefault();$(this).after("&lt;iframe width=\"420\" height=\"315\" src=\"http://www.youtube.com/embed/" + url[$(this).data('num')] + "\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;");/*$(this).after(url[$(this).data('num')]);*/});};};});}());
All I could ever need is: * http://jslint.com/ * http://prettydiff.com/ * https://developer.mozilla.org/en/JavaScript/ * https://developer.mozilla.org/en/DOM/ * http://www.w3schools.com/jsref/ ** ** Yes, I am completely familiar with W3Fools. It just isn't helpful. I don't really care that some anal retentive nerd finds w3schools to be less than perfect in its explanations. I am experienced enough that such concerns are irrelevant to myself and other experienced developers. It is still an otherwise extremely concise fast resource.
I'm working on web apps and I've been wishing for a long time for a way to open/save locally stored files. Suppose I'm making a paint-like app with HTML5, why shouldn't the user be allowed to save an image file on their hard drive, or on an SD card to put on a picture frame? - I don't necessarily want to host a billion gigs of user created content. - We don't yet live in a world where everything has internet access 24/7 and every piece of data has a URI. - Even if we did live in such a world, who likes the idea of losing all their files if the web app they made them with goes offline?
Added!
&amp;#35;&amp;#35;javascript is a non-reddit JavaScript channel. You guys can join that as well, but this one allows you to chat with javascipt programming redditors. Similar to the manner that #trees = is the Freenode stoner community (mainly Grasscity) and #r.trees is the Reddit stoner community. 
Going to use this in a project - spectacular!
FileReader.readAsBinaryString should help. The data comes back as a string so you generally need to use charCodeAt to extract the bytes. As for local files, most browsers will prever you from reading files when using file:// as your protocol. A simple solution to this is to invoke 'python -m SimpleHTTPServer' (assuming you have python installed, of course). It will bring up a baby web server and serve up the directory you invoke it in. Makes developing HTML5 related stuff much easier.
Sweet-- thanks for the code, I'll try it out when I have more time to fiddle with it.
Actually, you should use FileReader.readAsArrayBuffer to get a typed array back. For example: var reader = new FileReader(); reader.onload = function(e) { var bytes = new Uint8Array(e.target.result); // do something with the bytes... } reader.readAsArrayBuffer(file);
Experienced developers don't need the kind of information that's on w3schools, and this list is intended to help beginners, who aren't as able to discern misleading information from accurate information. Regardless of how 'familiar' you are with w3fools I strongly suggest you re-read it and repair your opinion on the matter.
Thanks. That should do what I want. Will it allow me to read files from URLs though, or only local files? Just to clarify, what I need is to be able to get a file object from a URL, without the user having to select the files.
honestbleeps and I made a "beta" sidebar for now. If you think we should add anything else, let us know.
To answer your first question; Pretty much. Web applications are becoming increasingly popular. If you want to get into web development, I suggest you learn a server side language like PHP as well. Because some things are best to leave on the server side of things. I suggest that you get started by looking at [HTML, CSS, and JavaScript from the ground up by Google](http://code.google.com/edu/submissions/html-css-javascript/). There is some other great resources too. Also, jQuery is a fun language. 
I'm not really interested in "web development" so much as I am interested in deploying applications on the web. I know some PHP already, it's pretty boring to me. JavaScript for some reason is very interesting to me though. I'll take a look at your link, thanks for the response.
If you want to start making applications and you're a beginner, take a look at jQuery.
Thanks
FYI, I found a simple way to get raw audio data from wav or mp3 files using the web audio API: http://www.lostdecadegames.com/audia-is-a-library-for-simplifying-the-web-audio-api/ Tested it, seems to work fine. This also converts the data to the audio context's sample rate for you.
A common method for web development involves converting mysql databases into json using PHP, then parsing the json and doing the whole interface with javascript, often jQuery. In most projects I've done recently the PHP has been fairly minimal, but very important.
Forget about PHP for the moment (it's a freaking frankenstein), you can use pure JSON as your data format in the browser. You don't really need it (and if you do, then learn something else like Python or Ruby, or any of their MVC frameworks: DJango or Ruby on Rails). Or better yet, use Node.js to keep everything in JavaScript. In addition to jQuery, I would also recommend to you learning BackBone.js to make your JS applications data driven (http://documentcloud.github.com/backbone/). As I said previously, you can use JavaScript in the back-end too (Databases, File IO, Processes, etc.). Take a look to node.js (http://nodejs.org/), really cool stuff. Finally, learn the best from JavaScript by reading "JavaScript the Good Parts" and "JavaScript Patterns" both from O'Reilly. And, most importantly, code code code until you can no more!
Asynchronous programming is what makes JavaScript so awesome. Yield and threads fly in the face of this. Yield doesn't belong in the language. I think many people who's primary language is JavaScript feel the same. I'm getting tired of people who come from other languages and think asynchronous programming is confusing therefore they need to fix JavaScript. The language isn't broken or missing feature X. The problem is you don't understand JavaScript.
Here's what I am saying, you need to use closures / FP to achieve Object Oriented Principles in JavaScript. Sure any rank novice can create an object without Classes in JavaScript. But creating objects without Classes *does not equal* Object Oriented programming. Have a nice day.
How's that you can get simplification of code is "you don't understand JavaScript"? In which way code, shown in examples, is not asynchronous?
traditional desktop programming gives you much more of a framework to develop your apps in, windows, macosx and the various linux desktops give you that. But you need to remember that those apps are usually programmed in C++ or similar and Javascript with its focus on asynchronity is a very different beast. The mentioned node.js is definitely something you should look into. 
So here is my list. I've posted it already in this subreddit, but if we're collecting resources, there is some good stuff in this list: **General** http://eloquentjavascript.net/ http://jqfundamentals.com/ **Patterns** http://addyosmani.com/resources/essentialjsdesignpatterns/book/ **Inheritance** http://blog.vjeux.com/2011/javascript/how-prototypal-inheritance-really-works.html **Module pattern** http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth http://ajaxian.com/archives/a-javascript-module-pattern http://edspencer.net/2009/10/javascript-module-pattern-overused-dangerous-and-bloody-annoying.html **New keyword** http://stackoverflow.com/questions/383402/is-javascript-s-new-keyword-considered-harmful http://ejohn.org/blog/simple-class-instantiation **Closures** http://www.bennadel.com/blog/1482-A-Graphical-Explanation-Of-Javascript-Closures-In-A-jQuery-Context.htm http://stackoverflow.com/questions/111102/how-do-javascript-closures-work http://skilldrick.co.uk/2011/04/closures-explained-with-javascript/ **Pass by reference / value** http://snook.ca/archives/javascript/javascript_pass **Teaching JavaScript** http://concisionandconcinnity.blogspot.com/2010/03/notes-on-teaching-javascript.html **This keyword** http://alebelcor.blogspot.com/2011/07/this-keyword-in-javascript.html http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/ **Object Literal** http://blog.rebeccamurphey.com/2009/10/15/using-objects-to-organize-your-code **Prototype** http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/
As a first language.
Perhaps add a link to this thread? This has a nice list of resources and I dunno if they would all conveniently fit into the sidebar. Thanks for the update though, I sure have a lot of reading ahead of me :)
We've been using related APIs for file drag and drop uploads, for example: http://turret-new.cs.st-andrews.ac.uk/mms/videos/content_tool.mp4 ( jump to about 2 minutes in) If you're dealing with structured data best represented in a database, there is an API for that too ( http://www.w3.org/TR/IndexedDB/ ), but if you're either interacting with user files, or just want to store huge lumps of data (video, for example), this is well suited. 
If you weren't confusing /js for /jsref I might agree with you. &gt; Regardless of how 'familiar' you are with w3fools I strongly suggest you re-read it and repair your opinion on the matter. You either did not understand what I said or chose to completely ignore it. W3fools is not helpful. When I want a reference instead of an education I will go to the fastest and most concise reference point, which imo is w3schools/jsref. If I need an education I will go to MDN. I have no use for w3fools. I don't care to dick around and feel better about myself by masturbating over how incompetent w3schools is. I have other things to do with my time.
Here are two examples of things I have done with JavaScript: * Desktop like GUI that maintains state better than your actual OS desktop (still in alpha): http://prettydiff.com/jsgui/ * Algorithmic programming that does several different tasks: http://prettydiff.com/ On modern browsers those are as fast or faster than comparable desktop applications and I am working to make the second one faster.
Learn [jQuery](http://jquery.com) and [Backbone.js](http://backbonejs.com). You won't regret it. Check the links on the sidebar for useful resources. You can also learn [CoffeeScript](http://jashkenas.github.com/coffee-script/). I second [Node.js](http://nodejs.org). It has a great community and lots of libraries. You should check out [NowJS](http://nowjs.org), [jsdom](https://github.com/tmpvar/jsdom) or [Socket.io](http://socket.io) for interacting with the client. [Express](https://github.com/visionmedia/express) is to Node.js what Django is to Python. CoffeeScript can also work well on the server, with [Zappa](http://zappajs.org), which combines Express and Socket.IO. You should also subscribe to [/r/nodejs](/r/nodejs) and check the links on the sidebar. You can ask questions there or on [StackOverflow](http://stackoverflow.com).
\*cringe\*, Get interested in it. If you want to make applications for the web, know your HTML and CSS first. Otherwise you're going to deploy bad applications on the web and aren't there enough of those already?
yep french
where are you seen that ?
When communicating with php from javascript how do you authenticate your database transactions? Do you just use the php session as you would in an application where you weren't utilizing JS?
Every time you boost W3Schools' PageRank, an inexperienced JavaScript developer dies :-( It's not just inaccurate in places, it's also incomplete - someone in ##javascript the other day was having trouble with a complex String replace - they were using [W3Schools](http://www.w3schools.com/jsref/jsref_replace.asp) as their reference, but it doesn't even document that you can [use special replacement patterns](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter) or [pass a replacement function](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_function_as_a_parameter).
You seem angry. Would you like a hug?
But for the love of God, please, *please*, learn JavaScript itself to a good standard before even touching jQuery. Even though jQuery makes writing web apps a lot easier and saves you a lot of development time, it is still a JavaScript library and as such, if you don't have a good grasp of JavaScript, you're going to be writing jQuery code that may well work correctly, but you're not going to have any idea why it works correctly and as such, debugging and writing advanced jQuery code is going to be a nightmare. I appreciate that you might not want to spend any money on learning JavaScript, but if you're really interested in the language and want to know it well (and you already have a solid foundation in programming), then I highly recommend getting [JavaScript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/) and reading through that. It's short (176 pages), you can read it in an afternoon (though the first time round, some of the stuff might go over your head), and although it may be very opinionated, most of what Crockford says is pure gold and at the end of it you will have a thorough understanding of how JavaScript works and how you can write good JavaScript, which will aid you tremendously when you start using libraries such as jQuery. Apologies for my rantiness, it's just that JavaScript is seen as a 'toy' language by many, a simple language that people can just jump in and use without learning it first, as evidenced by people suggesting diving straight into jQuery, which is a reputation that I think is undeserved. JavaScript may not be the prettiest of languages, but it's here to stay, and if you learn to use it properly, you'll find that beneath the design mistakes lies a simple and beautiful programming language that just wants to be loved.
https://github.com/jeromeetienne/virtualjoystick.js/blob/master/virtualjoystick.js#L26 It should be: var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }; PS: I should also have said "__bind variable is not *declared*"
Thanks everyone.
Yes, I really do need a hug. The anger around W3Fools makes me sad.
I'm getting a github "page does not exist" for that link
&gt; Every time you boost W3Schools' PageRank, an inexperienced JavaScript developer dies That is sad. :( Instead of crying about it here with me why don't you contact them and tell them to fix it? &gt; someone in ##javascript the other day was having trouble with a complex String replace You are confusing /jsref or /js. I use w3schools for their reference and not for their education.
***hug***
Eh? Node.js and Coffescript don't enter the discussion at all. I was just confused because `ng:submit="addTodo()"` *looks* like it's going to be directly eval'd, even though it sounds like you're saying it's something fancier than that. That's all. No larger point being made here.
To be fair it's being developed by a member of the same organization for which Brendan Eich is CTO. I'd imagine they at least had a conversation about this.
Thats what I usually do yeah, that way it avoids any complexity, but does require cookies to be enabled and working - though that's possibly a good thing.
The anger seems to be yours. If you want a fast, concise and *accurate* reference, you can use the actual [spec](http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf). However, if you truly are happy with using a site full of inaccuracies and bad practices, more power to you. 
Why did you title "Superheroic"? It sounds like you have a vested interest in Angular, or you ran out of the usual adjectives like "beuatiful", "amazing", or "awesome".
Plenty of people have tried to contact them, with no success. &gt;Members of the W3C have asked W3Schools to explicitly disavow any connection in the past, and they have refused to do so. Also your belief that /jsref is magically accurate and /js is not is cute. And wrong. /jsref suffers from exactly the same problems.
The links look okay for me? It should be pointing you here: https://github.com/mozilla/task.js
&gt; The anger seems to be yours. If that were true you would not care that I use w3schools as a reference.
Re-read my post, I said more power to you. What I object to is you suggesting it as a resource for newcomers. Luckily you're making a terrible case for it so there's no chance of it actually getting into the sidebar. I'm simply responding to your posts so that anyone who stumbles across them doesn't believe them to be the complete unopposed truth. 
JavaScript is a synchronous language. The asynchronous nature comes from separate external access to JavaScript code, such as event execution.
that's the title of the site. i'm not the author
**UPDATE** I've deleted this repo and merged it into a more general JavaScript-Libs repo, which contains the implementation of SRFI-1 as well as an implementation of SRFI-13 (string processing). [https://github.com/jacktrades/JavaScript-Libs](https://github.com/jacktrades/JavaScript-Libs)
&gt;I haven't done any serious programming since high school (only VB, C++, and Java) The only language in there that isn't "serious" is VB
I was like you, and I needed nothing but this http://eloquentjavascript.net/contents.html Do give it a try.
TIL about nowjs. Looks great, have you used it?
Here we are: javascript:javascript:document.ondragstart=function(){return false};dst=function(e){return (p=Math.pow)(p(e.clientX-(rc=e.target.getBoundingClientRect()).left,2)+p(e.clientY-rc.top,2),.5)};$("[href\x2a=imgur]").not($(t="[href$=jpeg],[href$=gif],[href$=png],[href$=jpg]")).each(function(){this.href+='.jpg'});$("[href\x2a=imgur]").each(function() {this.href = this.href.replace("i.imgur.com/","kageurufu.net/imgur/?");});void($(t).not(".EGraw,.click-gadget a,.domain a,.thumbnail").attr({'class':'%45%47%72%61%77',target:'blank'}).each(function(){$(this).append($('&lt;span /&gt;').toggle(function(e){$(this).html(' [-]').nextAll().show();return false},function(e){$(this).html(' [+]').nextAll().hide();return false}).click()).append($('&lt;img&gt;').attr({src:this.href,style:'display:block;max-width:780px;height:auto',title:'Drag to resize'}).mousedown(function(e){(t=this).iw=t.width;t.d=dst(e);t.dr=false;e.preventDefault();}).mousemove(function(e){if((t=this).d){t.style.maxWidth=t.style.width=((dst(e))%2At.iw/t.d)+"px";this.dr=true}}).mouseout(f=function(e){this.d=false;if(this.dr)return false}).click(f)).append($('&lt;span /&gt;').html('%26#8635;').click(function(e){(i=$(t=this).prev()).css({MozTransform:r='rotate('+(t.rot=(t.rot?(++t.rot):1)%4)%2A90+'deg)',WebkitTransform:r,filter:'progid:DXImageTransform.Microsoft.BasicImage(rotation='+t.rot+')',marginBottom:(m=t.rot%2?(i.attr('width')-i.attr('height'))/(1+(nie=!$.browser.msie)):0)+'px',marginTop:(m=nie%2Am)+'px',marginLeft:-m+'px',marginRight:-m+'px'});return false}))})) It even changes all the links from imgur to kageurufo. 
Your code doesn't appear to work, trying to work out why right now. EDIT: you replace 'imgur.com' instead of 'i.imgur.com'. Also you don't change the links on the images.
You can do something nearly the same in old school JavaScript too. Here's a [stackoverflow thread](http://stackoverflow.com/questions/6713538/ruby-style-blocks-in-javascript) and [github project](https://github.com/kristopolous/_inject). Taking [RobertWHursts comment](http://www.reddit.com/r/javascript/comments/numlo/taskjs_beautiful_concurrency_for_javascript/c3c3i6z) into consideration, [the solution above](https://github.com/kristopolous/_inject) still observes the asynchronous nature of the language whilst providing the powerful feature of introspection that yield gives (although it punts the equally powerful [coroutine](http://en.wikipedia.org/wiki/Coroutine) aspect of [ruby's yeild](http://www.wellho.net/resources/ex.php4?item=r104/yrb) ).
*Here's your unformated code*: javascript: var x = $(".content").find("a").each(function () { var href = $(this).attr("href"), filename = href.substring(href.lastIndexOf('/')+1), filterURI = 'http://kageurufu.net/imgur/?' + filename; if ((!$(this).hasClass("drowsapMorphed")) &amp;&amp; ($(this).next(".drowsapMorphed").length == 0) &amp;&amp; href &amp;&amp; (href.indexOf("imgur") &gt;= 0 || href.indexOf("jpeg") &gt;= 0 || href.indexOf("gif") &gt;= 0 || href.indexOf("jpg") &gt;= 0 || href.indexOf("jpg") &gt;= 0 || href.indexOf("png") &gt;= 0)) { var img = $("&lt;a class='drowsapMorphed' href='" +filterURI+ "' target='blank' style='display:block'&gt;&lt;img style='display:block;max-width:780px;' src='" +filterURI+ "' /&gt;&lt;/a&gt;"); $(this).after(img); } }); **Bookmark** javascript:var x=$(".content").find("a").each(function (){var href=$(this).attr("href"),filename=href.substring(href.lastIndexOf('/')+1),filterURI='http://kageurufu.net/imgur/?'+filename;if((!$(this).hasClass("drowsapMorphed"))&amp;&amp;($(this).next(".drowsapMorphed").length==0)&amp;&amp;href&amp;&amp;(href.indexOf("imgur")&gt;=0||href.indexOf("jpeg")&gt;=0||href.indexOf("gif")&gt;=0||href.indexOf("jpg")&gt;=0||href.indexOf("jpg")&gt;=0||href.indexOf("png")&gt;=0)){var img=$("&lt;a class='drowsapMorphed' href='"+filterURI+"' target='blank' style='display:block'&gt;&lt;img style='display:block;max-width:780px;' src='"+filterURI+"' /&gt;&lt;/a&gt;");$(this).after(img);}});
This is cool stuff. I have two suggestions: 1. take a look at `requestAnimationFrame` 2. consider modularizing this so it can be dropped into a page and initialized with a constructor
[this](http://www.infoq.com/presentations/JavaScript-Functions) presentation could actually enlighten some js developers about "this" scope... very well and concise explanation. Cheers
This is clearly a test post post for our new moderators.
I honestly really enjoyed that analogy.
&gt; Asynchronous programming is what makes JavaScript so awesome. I think this is something of a misstatement. **One** of the awesome things about JavaScript is that it has a decent model for asynchronous operations and has language features (like closures) which complement it. Additionally, a lot of the things JavaScript is used for lend themselves to an async-calback style. For example JS is often used for interface interactivity, and GUI's are very naturally asynchronous. However, this is hardly the be all end all of JavaScript's good points. More importantly, as it is right now JavaScript is limited. Everything must be shoe-horned into callbacks, even if it's not a good fit. This is workable, but it can be difficult to manage in some cases and you end up with callback soup. &gt; Yield and threads fly in the face of this concurrency != threads. Also note that "yield" is not a feature that has to do with sync or async programming per se. It's being used in this instance to facilitate blocking I/O...but it has greater applications. &gt; I think many people who's primary language is JavaScript feel the same. I'm sure many do...but I'd bet more don't. More importantly, the designers of the language felt it was useful enough to add it. I also think it's a little absurd to suggest that the people who are in charge of the language "don't understand it". The main thing here is this is not an either-or proposition. The current async-callback style of JS is not going anywhere. However, now we can use an abstraction like this to wrap certain kinds of operations (like I/O)...where we'd normally have to setup a callback which would give us no benefit. It's about using the right tool for the right job...use callbacks where they make sense use promises/tasks where they make sense. I'm getting tired of people with little experience in other languages/with programming in general confusing the concepts of something being "good" with "perfect". JavaScript is a good language. It also works. However, it's never been perfect. It's always been missing features, the designer of the language will be the first to tell you that. The web is evolving, and JavaScript needs to evolve with it. JS is not the only language in the history of computing to get it right the first time and then never improve at all. I'd agree completely that there are many features JS **doesn't** need...I'd also agree that some people want changes that would be worse. I do think though, that it's absurd to imply JS can't be improved...and I think many of the changes coming (like generators) *are* improvements...as examples like this demonstrate. 
thanks for video! and the site is pretty sweet, video and slides are syncd
Ah I see.. I didn't see it on the page, but i see it in the tab title. Their choice of words is silly. I take things less seriously when people over-hype things using inflated words like 'Superheroic'. 
How do you handle things like form validation? Do you do it both in JS and in PHP or solely in php and just pass back any errors you get from JS?
It's great but it seems non-standard/experimental, and it seems like debugging it might be a bit difficult with today's inspectors. 
Why are you running `find` on a raw (just obtained) jQuery object? $(".content a") would work just as well.
 $("img[src*='imgur']").each(function () { this.src= this.src.replace(/(i\.)?imgur.com/, "kageurufu.net/imgur/?"); }); Native JS: Array.prototype.forEach.call(document.querySelectorAll("img[href*='imgur']"), function (img) { img.src = img.src.replace(/(i\.)?imgur.com/, "kageurufu.net/imgur/?"); });
Well, I haven't used it, I have only done the example (Chatroom in 12 lines of JS), but I have read the docs and know how it works.
amazing! Thank you!
what I meant to say is that I've programmed in those 3 languages back in high school. haven't done any real programming since then.
Maybe pop this into a public github?
That's a problem with JavaScript in general. Sometimes you will see code like this as a result: (function (undefined) { // code here }());
If you really want to do server-side JavaScript, you can use Node.js. However, I think something like PHP, Python, or Ruby would be more appropriate for a beginner. jQuery is a great library and some may call it a framework but I would not. It's just a big library - a collection of various, sometimes unrelated functions. Ajax is very simple with jQuery: http://api.jquery.com/jQuery.ajax/ jQuery also includes a good document selection library. The most commonly used functions behave like CSS selectors. I would start with client-side JavaScript to enhance things here and there. That way you can start to get a feel for the language without diving into the deep end right away. JavaScript: The Good Parts is a great start.
A mixture of HTML5 validation (required, max, min, pattern attributes on fields + type=email, type=number etc) with errors in PHP passed back through JS. That seems the simplest, as normal people get the built in validation of their brower, but it still works for everyone else. By reading out the info on the MYSQL table (what's the type, length, is NULL allowed etc), I create the form and the PHP validation, so it's always in sync with the table in both places.
what language do you come from? My advice is to learn google closure, use the advanced mode compilation. Although this is not a framework (there is a framework written for it called relief, we don't use it however). Closure is incredible, it saved a lot of time down the line, there are great components and it is extremely well designed. The advantages of static type checking are obvious if you have ever written a language which supports it and one which does not. I cannot stress strongly enough how good closure is, how much it has sped up our development and what a pleasure it is working with it. 
as for server side code, I personally (and this might piss some people off) think node is NOT a language to solve most problems. It has applications, reading data streams over the web. We build on the JVM, i would recommend http://www.playframework.org/ as a simple java framework to start with. Java is verbose, but performance is great. edit: Forgot a not in there!
jQuery is excellent for manipulating HTML and for making Ajax calls. The normal DOM API (what the browser provides) is pretty weak... you have to write much more code and be very careful about cross browser issues. There are other tools besides jQuery (mootools, yahoo, ext) that are roughly speaking equally good and relatively popular. Choosing jQuery would be a fine decision (it's my personal favorite and I haven't regretted it). Choosing ext might be nasty for public web sites, though pretty fine for corporate internal apps. Framework vs library are roughly speaking the same thing. Generally a framework offers a lot more functionality than a library and a particular "way" of working... but that's not always the case. Not all ".js" _files_ are frameworks/libraries. Some framework/libraries are packaged into a single .js file, some require several .js files. In the end I guess framework/library depends on what the authors refer to their work as. As for what jquery is good for... well... try implementing a simple reddit comment system (just a test one... no interaction with a server... just a single .htm page). A link "reply" that when clicked shows a text area. A link "formatting help" that shows help information. A "sorted by: top v" where clicking on the "top v" shows a menu. A plus/minus beside a comment entry to hide it. Pretty soon you'll start to "get" jquery (especially if you try doing these functions without jquery and in a cross browser compatible way).
I just discovered [Knockout](http://knockoutjs.com/), a Model-View-View Model framework. It might not be the best framework, but it has an amazing interactive tutorial that helped me understand a lot of concepts for javascript frameworks in general. I used it to throw together the first real site I've built on my own time in 10 years, and it was a lot of fun! You should probably get the [basics of jQuery](http://docs.jquery.com/How_jQuery_Works#jQuery:_The_Basics) down first though, at least understand the selectors and how functions are being used. 
I presume his way is more performant because $(".content") can use the native implementation byClassName (don't remember the correct function) and then "find" just look inside the child nodes. I can be wrong (hehe), but I read about this a couple of days ago here in reddit
 portabella mushroom head portishead are matches! Is that correct? why? 
If you really want performance, implement everything through native DOM functions. Array.prototype.forEach.call(document.getElementsByClassName("content").getElementsByTagName("a"), function () { ... }); 
I hope you're joking : document.getElementsByClassName("content") If you're familiar with jsperf, I suggest getting to know it. Thanks for the feedback though.
Nope. $("img[src*='imgur']")
Fine. document.querySelectorAll(".content a")
Oh, right. Forgot to replace that href with a src.
This is awesome! I was just starting a project with skeleton but may swap back over to bootstrap so I can use this. 
Great work Addy! :)
wget or curl =D
https://github.com/mklabs/gimme-assets 
Give us an example of your code here: http://jsfiddle.net/ You ought to try document.forms["form"]["name"].value instead of .text While your at it skip the DOM 1.0 stuff and use querySelectorAll/jQuery/some other DOM abstraction And finally, you probably want to learn to avoid double equals in favor of triple equals, coercive comparisons in javascript are quite opaque and often do not do what you expect them to do. if you don't know CSS selectors they are going to be worth learning if you plan on doing web development
That looks like it might fit the bill, thanks!
Thanks for the advice..I was using .value and accidentally pasted .text since that was my latest attempt. I was trying not to use jquery cause the form is in an iframe and I didn't want to make another call to google hosted jquery to since it slows down the page load a little bit i just wanted a simple javascript validation And here's this thing http://jsfiddle.net/629Ed/1/ Thanks again
This is extremely useful.
It depends on what are you going/wanna do. For everyday small websites you should be fine with using only jQuery and some plugins(carousels, slides, image viewers, etc) If you want to build complex applications, there a lot of frameworks which will give you a start. **For complex stuff** - **backbone** * simple MVC * lots of tutorials * gives you guidelines and some ~standards for building you apps * great separation of concerns(loose tight coupling between modules and shit) - **Knockout** * as attilad pointed out, a small MVVM framework * gives you a great and interactive tutorial - **Javascript MVC** * this one is the first "MVC" js framework that i;ve used - a bit to harsh for a beginner * built on top of jQuery * decent documentation * Grooveshark is built on top of it, so it should give you some hints about the power it To sum this up, you better start writing code - learn as much as you can about the language and then pick up a framework to get your job done. Everyone these days, will just search for a framework, without knowing event the tricks of "this" keword.... * Search "how to manage/build large js applications" * Learn how to break you app into smaller modules * See what's the thing with js namespaces(though js doesn't have ns's) - you could use object literlas(var myApp = myApp || {}; etc...) **PS - Learn the language first, not the library/framework** Regards 
Your fiddle is broken in several ways. You don't put the script tag in the JavaScript box, but you do have to choose "no wrap" as otherwise the contents of the JS box is wrapped in an onLoad handler and your function isn't in scope. And you have no #err div, and you refer to the form as 'autoresponder' when its name is 'responder'. [This cleaned up version seems to work.](http://jsfiddle.net/629Ed/4/) I can't reproduce whatever it is you're seeing. It says Form OK if you put something with an apostrophe in the message name field. 
I agree, i had a good time programming with knockout too. After making a mess of UI bindings in older apps i did in the past, i've just been staring with happiness at how pretty my code looks now.
it totally doesnt matter for me. Its just title I dont think about it. 
Why are these criteria important to you?
I work for a startup in San Diego that's looking for a JS dev to build our front-end. It will be a single-page app, entirely API driven, for both desktop web and for mobile. You can find [more info about it here](http://www.reddit.com/r/forhire/comments/nu5f8/hiring_san_diego_startup_looking_for_frontend_js/) in my [/r/forhire](/r/forhire) post.
Each has their own reason, obviously. Do any of them seem unreasonable or strange?
&gt; I'm getting tired of people who come from other languages and think asynchronous programming is confusing therefore they need to fix JavaScript. The language isn't broken or missing feature X. The problem is you don't understand JavaScript. You might be underestimating people from other languages. For example, I've been working a lot of languages that support monadic composition (Haskell, F#, and even C# these days) and I can tell you that they are far better at asynchronous programming than JavaScript. F#'s async workflows makes async programming (CPS) as natural as calling plain ol' functions. In addition, it also handles propagating things like exceptions properly. My point: There are a lot of people who understand JavaScript a lot better than you do and look down at it because they understand the fundamental problems with JavaScript. (There are many)
gun.io. That will be all.
Awesome! Might use this for my next project.
The Etherpad Lite job board eh?
I'll just drop this here http://careers.stackoverflow.com/jobs/15741/realtime-live-sports-front-end-developer-betgenius-limited?campaign=31 we build our front ends using google closure, we deploy on android, iphone, all browsers and adobe air. middle ware written in java backends written in .net. We have serious volumes of data flowing through, I mean serious volumes. 
What's wrong with a shell script or Makefile with some calls to `cat`, `uglify-js`, and `java -jar closure-compiler.jar` using your source files?
That's not really what I would call "Object-*relational* mapping".
Great work, I've written you a blog post on it. One thing I would like to see is the styling done in Less instead of CSS. My favourite thing about Bootstrap is it's usage of Less as it means I can easily customise it - colours, rounded corners etc to match the site I'm working on. If I was going to use UI widgets on one of these sites then I'd expect to be able to make them look like the rest of the site instead of being the default Bootstrap styles. 
Even lynx?
ha! I have not tested on lynx, although we have graceful degradation by rendering our templates both server side and client side.
Well, that's the closest match between all the other options. If you wanted a closer match you could set a condition saying it's only a match if the jwDistance is &gt; .9 or something like that.
&gt; changes all the typeof expressions so beware and please update your JS libraries to be future compatible to handle this correctly That should be straightforward enough. No one hardly ever uses typeof.
[String Comparison Algorithms](https://github.com/dgendill/Javascript-String-Comparison-Algorithms)
Amazing!
Year 2012: The year no site loads because your hash tag cannot be resolved.
I get the basic version on Firefox 9.0.1, but on Chromium 18 it's... it's beautiful...
impressive! any documentation, or guide on the development process? Seems like a lot of trial and error to create a presentation...
This! Give me a front end that simplifies creating and editing and I will force all my students into using this.. 
I'm working on something which aims to hit pretty much every bullet point you listed, as I've been wanting the exact same thing for a couple years now. There are a lot pieces to consider... * Such a tool would rely on a central repository (or be able to plug into many repositories) as a source for projects, and should always be updated with the latest versions of everything. * It would need to be able to understand complex dependencies, specified in an explicit format (probably a meta-data sort of file) for each project. * It would need to be able to map and resolve dependencies of selected projects to compile a single end-script. * It would be nice if it gave you the choice to either download the result, or to hotlink from a CDN. Thankfully, there is an awesome [CommonJS](http://www.commonjs.org/) movement which includes specs for things like being a [package registry](http://wiki.commonjs.org/wiki/Packages/Registry), and for specifying meta-data in a structured file called [package.json](http://wiki.commonjs.org/wiki/Packages/1.1). NPM uses both of these for Node packages. So, back to the topic of front-end javascript. I've built a repository/site called [JSPkg](http://jspkg.com). It's for both front-end and back-end JS, but the initial focus is on searching/finding/exploring front-end packages, since NPM is already doing a good job for back-end JS. I've definitely had the command line in mind from the beginning, as that's what I'm ultimately working toward. Ideally, I want *every* JS developer to be able to use this, so I wanted to make sure I have all the bases covered. My game plan was to start with the lowest common denominator, that being a slick web interface that absolutely everyone can use. That being said, I have designed a nice restful API into the site from the very beginning, and I made it a CommonJS registry at the suggestion of one of the early users (see [http://jspkg.com/registry](http://jspkg.com/registry)), so there are several command-line tools which should probably already work with it (one currently under development is called [ssm](https://github.com/micmath/ssm)). One of the issues with creating a command line utility is that it usually has to be built in some higher-level language or framework, which then has to be installed on the user's computer. Things like rubygems have the advantage of knowing that the user will have ruby installed. NPM knows the user will have node. But for front-end JS packages, we really can't be sure they'll have anything installed, and I'd really like to avoid making them install something only tangentially related. Even if it's JS, like Node, most front-end developers probably won't have it installed already. I figure, if I could push a lot of the difficult logic mentioned in the top bullet points to the server, the CLI could probably be a pretty simple bash script that shells out some `curl` and `wget` commands. So that part is a work in progress. Sorry, this was all a bit long-winded, but that's where I'm at. I've been really busy building it out, so I haven't really publicized it much yet. So far, everyone using it seems to really like it and I've gotten some really good feedback. If you'd like to check it out and let me know what you think, that'd be awesome. 
very, very smooth on chrome 17. no hint of lag.
I'm running chrome 16, most of it is lag free, but every so often it will lag a little which slightly ruins how impressive it is overall. I'll try it on 17 later.
very nice stuff
Runs gorgeously on Chrome on Macbook. And you know how shitty the hardware is on Macs ;)
just tried it on my newer machine and its running beautifully!
I like it. I tried it in Chrome 16 on an Atom N270 netbook. The slides demonstrating the "old way" to do it were choppy and laggy. The ones where it was demonstrating the translations and scaling were actually smooth. I'll be taking a look at it since it could give management the Prezi look they want right now while not giving them the ability to make it themselves. 
wow, what makes this awesome is that it has a simplified mode as well.
I think 9jack9 was being sarcastic.
No iPhone support :(
Very nice demo, but how much longer until there is decent anti-aliasing? HTML5/CSS3 will never replace stand-alone apps until this can be addressed.
Cool idea but it can get pretty laggy.
it stands to reason that a framework requiring css3 transformations would require a browser that can do css3 transformations...
Why take a job that you seem to know little to nothing about. This is the reason why there is so much crap code out there. All the best.
[JavaScript: The Definitive Guide](http://shop.oreilly.com/product/9780596805531.do) [JavaScript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742)
+1. Actually, I learned JavaScript from [MDC](https://developer.mozilla.org/en/JavaScript/) - both the Guide and the Reference are a a very good read. After that, I'll second JavaScript: The Good Parts by Crockford (as suggested by Mezriss), which has some very good ideas on how to avoid the things that earned and kept JS such a bad reputation in the last decade.
JavaScript: The Good Parts is absolutely great. Buy it. It tells you why JavaScript sucks and what you should avoid, but also why JavaScript is awesome and what you should take advantage of. It's not exactly a good book to learn JavaScript syntax and how to actually do stuff, but it will save you from a lot of trouble and make programming JavaScript a better experience. After you've done some basic DOM manipulation and gotten really frustrated, I recommend you take a look at [jQuery library](http://jquery.com/). DOM is a piece of shit, but jQuery makes manipulating it almost fun and eliminates a lot of manual work and cross-browser worries. I refuse to start a single project without jQuery anymore, even if 31kb library for a couple of lines of JavaScript would be a total overkill.
Also, please read something like 'Dont Make Me Think'. Web Front End UX is very important. But yes, JS: the good parts is a great read.
We add the same question on this thread of our forum http://forum.wakanda.org/showthread.php?211-Book-recommendations-on-Javascript-to-get-started The main books for me are: * ["Professional JavaScript for Web Developers"](http://www.amazon.com/Professional-JavaScript-Developers-Wrox-Programmer/dp/047022780X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1308004999&amp;sr=1-1) from Nicholas C. Zakas * ["JavaScript: The Good Parts"](http://oreilly.com/catalog/9780596517748/) by Douglas Crockford * ["Eloquent JavaScript"](http://eloquentjavascript.net/) by Marijn Haverbeke 
+1 for saying that he should still play around with DOM manipulation
You said you are forced to use FP in Javascript, which is patently false. You also seem to be saying that closures and FP, "closures / FP", are the same thing, which is also false. Finally, you say "But creating objects without Classes does not equal Object Oriented programming", which may be the most incorrect thing you have said so far. It's ok if you're wrong once in a while - it's not the end of the world.
Thanks for your thoughts, I was beginning to think I was crazy for looking for a tool like this! Looks like you have thought about it in depth as well, and jspkg looks perfect for this kind of tool. The more I was thinking about it, the more I realized that creating or finding the perfect "general solution" is probably not possible. So I might just end up creating a library for my own personal use. That's why I wouldn't mind requiring node.js for a tool like this (I use it already), and why I might just end up using npm (it's not a client-side repo, but essentially all my usual dependencies are there already). Or it would be great to have a tool that could pull from multiple sources (jspkg.com, npm, git repos, tarballs via http, etc). PS. is there a public repository where I can track the jspkg project?
That's not it, I have a problem with the way I have to format validation messages and rules.
&gt;[Mootools] has more in common with native javascript syntax than jQuery does That statement doesn't make any sense. jQuery is a JavaScript library. Of course it does use the "native JavaScript syntax" - otherwise it wouldn't work. You probably mean that Mootool's API is somewhat closer to the DOM API, but how is that a good thing? All those libraries exist, because everyone hates the DOM API. &gt;[Mootools] can do a couple more things unrelated to the DOM that jQuery can't. jQuery is a library for (normalized) DOM manipulation, ajax, events, and effects. Mootools, on the other hand, is a web-application framework.
Ah, I knew I'd raise the ire of a jQuery developer. My apologies for the incorrect word choices. Let me try again: I find (in my limited experience with jQuery) that Mootools has a more sensible syntax (i.e. order of arguments) with its functions, as opposed to jQuery, where the order can vary from one function to the next. If in doubt, always check the doc, but I find that I can usually fudge my way through Mootools and get the syntax correct on the first(-ish) try. And yes, jQuery is a library for DOM manipulation, and it's damn good at it. I just mean to say that Mootools can also do the same things jQuery can, in addition to a couple more obscure non-DOM related things.
Doing what, exactly? In any case - when I say *x developer*, I mean a programmer who uses *x*... although I understand the confusion. Examples? Not really, no. I have far too little experience with jQuery to contribute anything to a debate. I only offer my opinion on the subject. :)
But on the other hand, I *do* use the term "PHP Developer" to refer to somebody who writes code in PHP...
I prefer keeping dependencies outside the repo, and pulling them in as necessary with a build tool. In python projects, for example, I use a pip requirements.txt file: http://www.pip-installer.org/en/latest/requirements.html I'm looking for something similar for client-side javascript.
You should probably have mentioned that this thing requires loading Dojo. It's also odd to say "single JS file" as a feature when it requires three to actually work.
Done.
If you want something a bit more advanced, try 'Object-Oriented JavaScript' by Stoyan Stefanov
Ex.1 Is passing an anonymous function as callback. This was access to the private variable foo and can change it to reflect the received result. Ex.2 Doesn't do what you mean. You are invoking storeResponseIn and are given its return code as callback to the AJAX request, which doesn't work, because there's no returned function. storeResponseIn in Ex.2 has no access to the private var foo since it is defined outside of the execution context. 
Would it be possible to do something like this, then? var foo; var getResponse = function(bar) { return bar; } ajaxReq(url, data, foo = getResponse); alert(foo); I can't get this to work either.
First of all, doing alert(foo); directly after ajaxReq is not correct. The ajaxReq() will initiate an AJAX request that later will result in our callback be called. That might have already happened when ajaxReq returns, but it doesn't need to. The only way to securely access foo with the new value is in the callback function. That said, it also hangs on the order of definitions etc. var foo; (function() { function response(txt) { foo = txt; alert("foo is now " + foo); } ajaxReq(url, data, response); })(); This works in so far that the global variable foo will contain the value after the callback happened. (function() { var foo; function response(txt) { foo = txt; alert("foo is now " + foo); } ajaxReq(url, data, response); })(); This doesn't work because the function definition gets moved up while the foo declaration does not. 
'small' renamed to 'compact' , thanks. As for the jquery plugin, I wanted something anyone can use regardless of framework, but maybe I'll make one for query convenience...
Neat. Care to share the backend code?
Ahh there we have it, I didn't consider that putting the alert function directly after the AJAX request would fail if ajaxReq() fires, but does not complete in time before alert() is thrown. I guess this is why alert() has shown "undefined" up until now in my different tries, because alert(foo) fires before the AJAX request + callback has finished! I'm going to put in a state flag here, to control it. Thanks for your input!
Huh? Canvas is very easy to print, all you have to do is press "print" in the browser and it prints just right. At least in the projects I've done it so far.
Have a look at http://reddit.darrenwhitlen.com/redditlive.js 
That's the client code. :P
That is awesome. I'd be really interested in the code for this. :]
I won't do it for you, but I'll give you a hint or two: 1) Qr is a string variable 2) String variables have a member function called toLowerCase().
You have the right idea in terms of grabbing the tags, and looping through them. However, the search method gives you the character index of the text, not the value itself. So you need to add an if statement, and then grab the content attribute. http://pastie.org/3125634 Note that i use "var" infront of some of the variables. This is to keep those variables within the scope of the function, rather than making it global to the whole page. It keeps the code a little bit more predictable.
Sorry if this is a dumb question. Still trying to get my feet wet in Javascript. How do i echo that statement content out? document.write(text) &lt;- this does not work. Using the function name here writes all of the actual code into the html page.
I appreciate what you're trying to do, but I'm not a programmer or a script writer, so your hints are way beyond my non-existent skill level. I just found this script a long time ago and followed the steps to customize it for different search engines. Like I said, I'm just a noob looking for help. I'm not aspiring to write my own scripts or anything like that. :)
Since the capitalization not being accepted is on WORKNIK's end, you'll need to either flesh out this bookmarklet a lot more (use the API: http://developer.wordnik.com/docs#!/word/get_word) or just hope that capitalization isn't needed at all and change the following: escape(Qr) TO escape(Qr.toLowerCase())
That worked! Thanks!!! javascript:Qr=''+(window.getSelection());if(!Qr){void(Qr=prompt('WORDNIK','','WORDNIK'))}if(Qr%20!=%20null)void(window.open('http://www.wordnik.com/words/'+escape(Qr.toLowerCase()))); 