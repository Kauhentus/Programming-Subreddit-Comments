The last commit to the right of line is from CodeLens or something? Does anyone know if there's a plugin like that for regular VS (not code)?
&gt; Including on GitHub which as far as I know doesn't have a tab width setting. https://stackoverflow.com/a/33831598 &gt; Even if it did, you can't go change it personally on everyone's computer who has to view your code. The point is that you don't do that, and you let people view your code in the way they most prefer, rather than dictating how the file should appear.
I don't know anyone in Germany who uses the right alt or shift key. People somehow don't like to use things that are right.. :/
It will behave the way you describe. I guess I'm looking at this from the perspective of node. You get this kind of message instead of blowing up: &gt; (node:45904) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
What if you don't write Javascript?
Cookie storage wasn't the most glorious way of storing it (although I might look into it if chrome accounts share cookies) and I thought getting a VPS for the sole purpose of hosting this project was a bit overkill. My current plan is to look into rebuilding it over the summer and implement accounts and such, as well as serverside storage. Thanks for trying! :)
Looks really clean! Nice job :)
Come on, show some backbone
But doesn't that imply it's a bad choice of the architects, like only having stairs at all entrances?
Here is what it looks like: [https://i.imgur.com/mMePwyH.png](https://i.imgur.com/mMePwyH.png) Aligning tabular data will with tabs will only work if each column of data is the exact same width long. Aligning with tabs is impossible because tabs represent variable space for different users. If that space is shorter than the difference between two pieces of data they become unaligned. You've also used multiple tabs in some places making it work. This is why you should always use spaces for alignment.
But not for GitHub right? I can't change the tab width when I'm viewing someone else's repo.
Oh yeah I'm sure people would *prefer* for documentation alignment to be just arbitrarily broken. You really don't understand the problem, do you?
huh, TIL. I don't usually use tabs in this way but I'd never considered why before.
You can use some free quota in the cloud, for example Firestore and CloudFunctions :)
I'll look into that!
Pisses me off as well, but MS did follow the standard, so you can't blame them.
That‚Äôs not democratic. That‚Äôs freedom.
They can change it now though. Pretty much every app supports /n.
It's a stylistic choice to be certain but I greatly dislike `if (` on a line by itself. Everything else is acceptable.
Not across environments... across the code. You have spaces in your code naturally and if you add tabs then you now have two white space characters in your code.
That's a really nice article, I like the way your examples work, makes it very clear.
Then your code isn't consistent on white space characters. Personally that rubs my the wrong way and I'd sooner make a script that automatically converts spaces to tabs for employees with such accessibility problems than use tabs.
He got called a "fucking asshole" first just for expressing an argument. Your white knighting is hypocritical af. Also, you're acting like a sanctimonious prick with no perspective. Heh.
&gt;Also, you're acting like a sanctimonious prick with no perspective. Heh. It's the Reddit way innit
My tab key inserts two spaces üòàüòº
You got me, there.
It works with some other languages as well. &amp;#x200B; As for Python, I just use [black](https://github.com/python/black)
The question/point here is... does he have to use other people's code who's preferences for numbers-of-spaces-for-indents don't match?
Write a plugin for prettier for the language you love.
What you are showing isn't actually OOP-specific. You could ask the same question about React functional components: `export default MyComponent = props =&gt; ...` vs `export default function MyComponent() { ... }` (I agree that the second one looks odd, but it works). If this was OOP-specific, we would most likely be talking about methods. If you are NOT using ES6 lambda functions, which you aren't in example 1, they are more or less equivalent except for differences in hoisting. Both are called the same way and both can be passed around like any other object. It might boil down to preference/style. If you ARE using ES6 lambda functions, the reason is because of the safety of the implicit `this` binding afforded by lambdas: `const myFunction = function() { ... };` \--&gt; `const myFunction = () =&gt; ...;` . Palantir -- creators of the original TSLint -- provide a VERY strict TSLint config boilerplate that even [requires all anonymous functions to be arrow functions](https://palantir.github.io/tslint/rules/only-arrow-functions/) for this reason. Hope this helps!
This is what delusion looks like, kids. Don't do drugs.
It‚Äôs hard to come up with isolated examples, but I can personally attest that using the compilers with ReasonML and PureScript, you‚Äôre basically getting TDD for free. It practically walks you through every point where your code is broken. And I don‚Äôt think I‚Äôve ever experienced a runtime error after the code compiled, at least in the portion of the code that was written in the FP language (some parts were written in plain JS, and this not covered by the type system). As a result, it‚Äôs absolutely true that ‚Äúif it compiles, it works,‚Äù but not to say that your design can‚Äôt be flawed... Then you get things like automatic currying and idiomatic tuples... just a quality of life sort of thing... In ReasonML, all the functions are considered curried by default, and can return or receive tuples as arguments. Tuples are represented as arrays of arguments, and currying is often performed by applying a special `curry`function wrapper, both of which have some runtime overhead. But the compiler will optimize it so that neither of those constructs are used in the output JS code unless it‚Äôs absolutely required. This is in contrast to vanilla JS functional libraries like Ramda or Sanctuary, who tend to just eat the runtime cost and curry all their API functions by default. There are downsides to using a compiled-to-JS functional language. The main issues are: 1. Sometimes lackluster documentation. 2. Smaller ecosystem of support (e.g. less likely to find solutions on stackoverflow) 3. Learning curve can be steep if you have no knowledge of FP. It‚Äôs a totally different way of doing things compared to OO or imperative programming. Notice I didn‚Äôt mention the tooling. That has been the most surprising thing for me. The tooling is excellent for the languages I described (PureScript and ReasonML). PureScript ships with everything you need to get started, and has a very nice front-end UI library called Halogen. I wish their package ecosystem lived on NPM, but alas, they use Bower and another one I can‚Äôt recall at the moment. ReasonML ships with a blazing fast compiler called BuckleScript, along with a very strong standard library. It is a bit closer to JS IMO, and has a more robust open-source library ecosystem, and has its own Reason-React library maintained by Facebook (after all, ReasonML was created by Facebook and used extensively in some of their apps). By far the hardest part of using either language is simply *learning* the language. The tools/ecosystem are actually pretty solid IMO. The communities are small, but often passionate and helpful (I‚Äôm super impressed with ReasonML‚Äôs Discord channels in particular).
I can see the point you're trying to make here, but the problem with it is that you should never come across scenarios where you would need to do it anyway. Don't put data definition in your code. Data is data, and code is code. Intermixing the two is problematic for lots of reasons, least of all the need to make it "pretty" like the rest of your code. This data should be in a database, solo file, or if it's in transit, a suitable format like JSON. If you need to reference the data in some way, you're in luck: that's just what UIs are for.
Although that may run you into some serious issues regarding the ADA, assuming you're US-based (I'm guessing it covers vision disabilities that aren't lens-correctable).
Yes, it will change when tab width changes. As an extreme example (but applies any tab width!), imagine if it was 10 and now becomes 1, the alignment would be gone. The other way around as well. So spaces are better suitable for formatting.
&gt;Aligning tabular data will with tabs will only work if each column of data is the exact same width long. Aligning with tabs is impossible because tabs represent variable space for different users. If that space is shorter than the difference between two pieces of data they become unaligned. You've also used multiple tabs in some places making it work. Yep and instead of spaces or tabs we should be using the separator symbols ASCII (28-31) to do this and IDEs should support it.
your joke aside, but i highly doubt, that nobody here uses the right alt key. writing emails would be impossible because of the @ sign with alt-gr + q and euro ‚Ç¨ (alt-gr + e) might be important too :D
Google has been having some intermittent issues serving up stuff like this for the past couple of days
You're exactly right! Mixing it up like that is what leads to trouble and people misunderstanding tabs.
I have a hunch that we‚Äôre talking about Notepad
I repeat myself: &gt; override with `?ts=&lt;value&gt;` in URLs. [Compare](https://github.com/freebsd/freebsd/blob/e3f6cb45c48c127a2c51f889f8ec2862511c281b/bin/cat/cat.c?ts=1#L100) / [Contrast](https://github.com/freebsd/freebsd/blob/e3f6cb45c48c127a2c51f889f8ec2862511c281b/bin/cat/cat.c?ts=1#L100) Be nice if there was more, like an option to pin it, but it's better than nothing.
The only way I know of approximating this is with something like [HTML2Canvas](
You missed OP's point entirely. There are 2 people on his team with a disability and they each need a different tab width because not all disabilities are the same thing. Additionally, your arrogance is staggering.
The only way I know of approximating this is with something like [HTML2Canvas](https://html2canvas.hertzen.com/)- which renders a given piece of html in canvas- though this is an approximation, and re-rendering, so it's not *true* screen capture, and I can't imagine it would be very good for real-time streaming The [WebRTC API](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API) will [support this type of thing](https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API/Using_Screen_Capture), however it is still highly experimental and not finished yet. You can do it with extensions e.g. with chrome: https://developers.chrome.com/extensions/desktopCapture
Did you come here just to harass me?
Geez you think highly of yourself.
I was being cheeky and fun. You‚Äôre being critical of some random person on the internet for being cheeky and fun.
Tabs for indentation, spaces for alignment. I‚Äôve been writing JS/TSDoc for years with this method and it works at any indentation setting. If it doesn‚Äôt, then you‚Äôre mixing tabs and spaces for alignment and breaking the rule.
Presumably my original claim stands.
Oh I see. You think that I think highly of myself because I don‚Äôt want to be harassed by some random douchebag on the internet on a post I made that was being cheeky and fun. The only thing that stands is that you‚Äôre being a random douchebag. Reported.
&gt;Then your code isn't consistent on white space characters. Don't constrain yourself to force strict whitespace consistency. Sometimes you just need to break some rules and write messy code to get a greater benefit. For example: const exampleTicTacToeBoardState1 = [['X', ' ', 'O'],['O', 'X', ' '],['X', 'O', 'X']]; const exampleTicTacToeBoardState2 = [ ['X', ' ', 'O'], ['O', 'X', ' '], ['X', 'O', 'X'] ]; Which line is most likely to be valid under most style guides? Which line outmaches the other in terms of clarity for developers? You shouldn't force stict whitespace consistency just because a style guide tells you to do so. A style guide should be just that, a guide. Follow it as long as it makes sense to do so.
Visually-impaired programmer here. I use a huge monitor with increased font size and tabs. It just makes it easier to see spacing at-a-glance.
Original as in further up the thread. Not that one.
&gt;Don't put data definition in your code. Data is data, and code is code. Intermixing the two is problematic for lots of reasons, least of all the need to make it "pretty" like the rest of your code. This data should be in a database, solo file, or if it's in transit, a suitable format like JSON. In general I agree, but sometimes you just need to put that little bit of messy code to make the thing work. I'd rather have some messy constant data sitting with my code to test with than prematurely optimising a solution to solve separation of concerns when I'm still actively discovering and developing. After playing with that data it might turn out that I either don't need it or the code in the first place. Regardless, it was just an example to demonstrate aligning data that can be visualised as a table. You could put the data in a comment explaining something without it actually being data.
Presumably, the IDE can just overwrite certain parts without disabling the entire thing!
when me president, they see......they see.
If you‚Äôre used to Haskell, you might look into some tutorials on lazy evaluation implementations in JavaScript, as JS is always *eagerly* evaluated. In particular, there is a relatively recent language feature called a ‚Äúgenerator,‚Äù and a related one called an ‚Äúiterator,‚Äù both of which offer a more idiomatic way to handle lazy evaluation. Short of that (e.g. you want to support older browsers which don‚Äôt implement those features), you can always implement a homemade iterator protocol.
Ooooooooooo...
A lot of our stuff reads text files that work off character position and absolutely lose their shit if you use tabs instead of spaces.
Looks like WebRTC will just let you stream contents of a canvas element, so it doesn't solve the first problem.
Most editors support 'smart tabs'. You hit tab, x spaces are inserted. You hit delete on a smart tabbed line, x spaces are deleted. It works exactly like tabs. Viewing the file always looks the same regardless of the viewer app because spaces are stored. I like the mechanics of the tab key, but hate that the tab character is the only ascii character whose rendering is user defined.
This has nothing to do with the article or JavaScript, but can someone explain to me why *so* many web developers and framework authors dgaf if their websites are mobile friendly? I don‚Äôt think I‚Äôve built a site in the last 10 years that had less than 15% of its traffic coming from mobile browsers. Both The Future of the Web and Svelte‚Äôs websites are unreadable from a smartphone without zooming in. I get that not every site needs to be fully responsive, but at least have the courtesy to bump up the font size and fixed-width columns for mobile users. /rant
The moment you start mixing rules of indentation you know your rules of indentation are too effed up. Most people have bigger fish to fry when writing code.
Not sure where you're getting that from, the example on MDN can capture the entire screens, individual native applications or individual tabs https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API/Using_Screen_Capture#Result
While this sentiment is nice in theory, in practice I can't trust developers to write readable code without a strictly enforced styled guide. That being said I don't know many style guides that would prohibit the changes you show in your example. If a guide does prohibit that then the problem isn't that it's strictly enforced; the problem is that the guide's rules are written poorly. In most situations using tabs is likely to result in messier, less consistent, code for no benefit. It may seem small and insignificant but that is how almost all problems start.
Just want to point out as a side note, tail call optimization is an ES6 spec, but only safari has it implemented currently, apparently the other big browsers couldn't agree on a safe way to implement it unfortunately. https://kangax.github.io/compat-table/es6/#test-proper_tail_calls_(tail_call_optimisation)
Tabs for indentation, spaces for alignment is a pretty simple rule to follow. Seems the only thing we agree on is the matter of *time* which is why I use Prettier on all my projects so I don‚Äôt have to think about it. Auto-format on save.
I have started developing SPA recently, i have looked into frameworks like react but i decided not to use heavy framework so instead i picked up a extremely lightweight templating engine and i started to see where things evolve. Shortly it was obvious that every template module should have own js methods to manipulate its own DOM and there should be consistent and well defined relation between application and template and between nested templates. I have started looking for frameworks again. I saw marco, and it was really promising. Then a saw svelte and it was more then what i was looking for.
Right Alt key? Let's see.. * When i tap it, it doubles as a space * Holding it acts like a regular RALT, which I use to type rarer umlauts* and special characters, such as; ‚Äì, ‚Äî, Àö, ‚Ä¶, ¬µ, ¬ø * While holding down the right mouse key ['/"], the right Alt acts as the left mouse button! * While holding the symbol layer switch, right alt acts as numpad 0 (the rest of numpad appears above it) \* for the more common umlauts, I use a layer mod + the corresponding wovel. Tapping the key once results in an √§, tapping it twice gives the capital version, √Ñ. [see the rest of the keymap](https://codepen.io/thykka/pen/mQRwLP)
Chaotic good
I'm still learning JS but I think you need to look up JavaScript Same-Origin Policy and see if that could be the issue.
It's pretty complex to follow when most IDEs have a single setting and don't differentiate both, and when alignment involves tabbing, because you don't have all day hammering your space bar to manually align shit.
I don't care what people use, as long as they're consistent. .... .... ...but if they want me to be consistent, they better be using tabs.
They obviously use an accessibility software to assist them. One would think that getting that software to work with spaces would fix the problem. It's not prohibited by the laws of physics.
other languages have different keyboards, no?
Oh. Then I suppose I should restate my comment: "Kyle Simpson, writer of the You Don't Know JS series, said this exactly."
Everyone used to use tabs, and it changed the way code was displayed quite wildly, breaking formatting and making it difficult to share. Your post is very poignant, but "the needs of the many outweigh the needs of the few."
Sorry to trigger you, there's no need for the personal attack, /u/valtism. Regardless, it's unfortunate, but people with disabilities often have to take extra measures to improve the quality of their life. My intent was to offer a suggestion on a workflow where they can seamlessly fit into any team. This workflow isn't particular to people with disabilities either. Anyone can do this if they have a personal preference on code formatting/style and it will improve the quality of their coding experience. &gt; Do you think that we shouldn't bother with web accessibility because those with disabilities are a minority? I take time to ensure the applications I work on are accessible. Source: I was working on a brightness slider for a physical device and ensured it worked with a screen reader.
Better than nothing, but not really usable.
Ah, that one does. I couldn't find any links to that from WebRTC or media streams API that it goes along with.
Built-in Date object isn't a flaming pile of dog shit, but it lacks some important features and isn't always simple to work with. I would love to see it get "[momentized](https://momentjs.com/)".
I'd be more impressed if it played Megadeth's *Holy Wars*
There is a proposal on the way https://github.com/tc39/proposal-temporal
&gt;...in practice I can't trust developers to write readable code without a strictly enforced styled guide. I'd say this is something worth looking into. Strictly enforcing adherence to a style guide may halt some problems but it'll have other hidden costs. It's kind of like amputating a foot to prevent a broken toe. I'd recommend reexamining each rule in your style guide of choice. Sometimes things will have very good reasons for being set the way they are, others will be counter-productive and purely arbitrary. I'm a proponent of a loose evolving style guide. If something goes against the written law that can still be justified, the written law must be changed to fit. Given enough time you end up transitioning from a strict style guide into a set of general best practices. &gt; If a guide does prohibit that then the problem isn't that it's strictly enforced; the problem is that the guide's rules are written poorly. A style guide can't exist with enough conditional regulations to support every corner case. Unless you're writing the same thing every single time, what you're writing will always be situational. &gt; In most situations using tabs is likely to result in messier, less consistent, code for no benefit. It may seem small and insignificant but that is how almost all problems start. The benefit of tabs is user specific ease of use. To argue against that would be the same as arguing to mandate all developers using your code to use the same editor's colour theme. It makes no difference to a diff check, a tab is a tab, but to a user...
Nice repo- any pros/cons on what makes this an alternative to vue-form-generator: [https://github.com/vue-generators/vue-form-generator](https://github.com/vue-generators/vue-form-generator)
Did you watch silicon Valley?
In theory yes, but I haven't seen any IDE that flexibly lets you configure which parts of editorconfig you want to use.
Why use a simple solution when you can use a complicated one?
So I‚Äôm not entirely clear on your use case, but there are some big limitations with iframes and there are some possible solutions. If you need the parent window to be aware of the image and have the ability to edit the code inside the iframe then you can ‚Äúpush‚Äù from the iframe instead of ‚Äúpull‚Äù from the parent using window.postMessage. postMessage is a way to send events across a frame where the other frame (parent, child, sibling, whatever) can set a listener for it and react appropriately. If you need the parent window to be aware and can‚Äôt change the code inside the iframe and the iframe is not on the same origin then you‚Äôre gonna have a bad time. You can‚Äôt access cross origin frames, it‚Äôd be a big security flaw / risk. If you‚Äôre trying to automate testing around this feature I know for sure puppeteer can give you a handle on iframes to query. Unsure on other libraries like Selenium or Cypress. Some useful reading: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage https://stackoverflow.com/questions/25098021/securityerror-blocked-a-frame-with-origin-from-accessing-a-cross-origin-frame
I don't think tabs vs spaces has the same level of consensus. Even in this thread there are a lot of different opinions on which is 'best'. I guess a different example might be hiring a very productive programmer who only speaks Spanish, but your codebase is in English. There's nothing wrong with their style, or yours, but it probably won't be a good fit.
Hi /u/Bj2110, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Rogers911z, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mygenie3, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Witty_Smirk, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/fahinse, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/vagelis_prokopiou, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
More bytes per file.
&gt;Both my vim config and jetbrains IDE recognize the spaces as indents and adjust the visual according to my preferences. Could you share your tab settings for vim? :)
Besides the comment you replied to that gives 2 different methods orr?
If it uses 1/3 of the width, then you can have 3 different files open side-by-side. Sounds perfect to me.
Hi /u/imatworkpleasenonsfw, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
The ultimate goal of a style guide is to make it such that every line of code looks like it could have been written by one person. If you give people choices on how they style their code this goal will never be achieved. I do agree that if a rule is making something difficult to do then the rule should be changed. &gt; A style guide can't exist with enough conditional regulations to support every corner case. Unless you're writing the same thing every single time, what you're writing will always be situational. The style guides I've used haven't had any problems like that yet so I will reserve judgment until they do. &gt; The benefit of tabs is user specific ease of use. To argue against that would be the same as arguing to mandate all developers using your code to use the same editor's colour theme. It makes no difference to a diff check, a tab is a tab, but to a user... Yeah, I mean I don't really care if they like 2, 4 or 8 spaces. It's not worth the cost.
Hi /u/ngortheone, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/coolguy101111, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/buddyrocker, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/LordBruce, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Foonakie, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I am not progressive enough for most of the "SJW" types, though not sure how being a warrior for social justice is a slam
I think the big thing for me, is wanting different indentation depending on what code I'm viewing. For example, most code I like using a 4-character width, but for HTML/React, I'd like it to be a 2-character width. It's a bit nitpicky, but I've just accepted that viewing code in a browser (that isn't a web IDE) will always been a pain for a large portion of people. If I'm going to look through much code, even if I don't intend changing/running it, I usually clone the project and view it in my editor.
I dunno, it's weird right? I guess for programming blogs people think "no one wants to read about code on a phone" but I kinda do...
The alt-right has gone out of fashion these days.
&gt; it's almost surprising they can code at all, it's kind of sad to watch but also inspiring I just want to note this is a really terrible thing for you to say. I think your post overall has merit, but you should really re-think about how you see people with disabilities
Assuming you do align. I personally don't like the appearance of aligning things, as opposed to just indenting on the next level; and neither to the authors of Prettier, so it's not actually something I need to worry about. I also set up the project to run Prettier as a git-hook, so that my team don't need to worry about it either. Between Editorconfig and Prettier, my team are able to work at their preferred indentation level (2 or 4 or more) without their indentation preferences impacting other team members. Prettier maintains the consistency. Have been working this way for 15 months (I was hesitant and sceptical of Prettier at first, so delayed adoption) and the team are relieved to simply \_not have to think about it\_.
Then that's a technical reason for spaces and not a _preferential_ reason. The difference is rather important.
&gt; hate that the tab character is the only ascii character whose rendering is user defined This is exactly why I _love_ the tab character. I change it's definition several times a day as I shift from monitors, to laptop and back again.
So much this.
Is this debate even a thing? Can't you can just do it automatically when you commit the code, and have your editor use your default?
While a group of "engineers" sits there and talks about tabs vs spaced I'm in the back actually building product. This is what's wrong with our current set of software engineers, so many of them focus on shit like this and don't actually ship product.
I have a question, what about when doing multiple variable declarations like below? var example = {}, example2 = false, example3 = 1 I currently use 2 spaces for tab. For writing the second line above, I just hit tab twice. Then for all variable declarations after that, I just click enter and it will auto indent to line up with the previous line. Will things like auto-indent in most editors be able to handle mixed indentation like that? Or would it just indent up to where var is and then I have to just add spaces to get the next line to line up with the previous line? Another problem I am concerned about it, if people use tab for spacing alignment on accident, it won't be obvious to them because all whitespace looks the same. If your company doesn't have a linter that everyone uses, something like that could slip by and end up getting merged, possibly causing issues for users that have different indentation size. I'm guessing the solution is to just require a linter, but if you have a large project that hasn't been using one, it may take a while to update the code to all pass with the linter. I know the company I currently work for should be using a linter, but we don't and it hasn't really been much of a problem since we all have our editors configured to use 2 spaces for indentation.
Ok. Thanks for the info.
There's no 'right' amount, that's what this post is arguing. I prefer reading code with tabs rendered in 4 character space width, including js. The usage of the tab character for indentation would allow me to view them as 4 spaces and you to view them as 2 in your editor.
The `if (` formatting is bothering me too but it's better than any alternative I've seen
I get that. I'm talking about reading on GitHub, on which you can apparently change the tab settings, but it seems overly cumbersome to actually be practical. All I know is that when I see a tabbed file on GH, I curse the dev.
&gt; There‚Äôs also the case of ‚Äúhanging indent‚Äù, a formatting style popular in the Lisp family of languages. In hanging indent style, any item in a list form should be vertically aligned with respect to the opening paren / bracket. In python, PEP8 doesn't specify that method parameters need to be aligned with an opening parenthesis. You could format code using hanging indentation like this which would work just fine with tab or space based indentation: def some_method( param1, param2, param3, paramn): statement1 statement2 statement3 return value1
Not everyone wants to run their code editor while using the full screen. Others need to use splits to view side-by-side diffs or 3 way merges. With a single vertical split, the maximum number of characters I can see per line is 90.
Because you're using appeals to emotion instead of arguments and attacking with fake morals to whoever arguments against you. You keep doing it in most of your comments. Just ad homs and BS. Twitter would be proud. You're not a better person for bashing others pretending you care about X cause. You're not the owner of X cause.
With the slightest bit of intelligence? I feel like people still think we're in the 1980s when we talk about this. Software can drive cars by itself, but figuring out which whitespace is an indention, that's the impossible problem! The common case of a consistently formatted source file is easy. Then it would need some rules and such to deal with inconsistencies.
As OP put it &gt;people saying "tabs lets us customize our tab-width", as though we do this "for fun"
You could always just fork Chromium and have it automatically append `?ts=12` to all requests sent to Github‚Äôs domain. /s
Yeah, you can make up a contrived solution to a contrived example .... but this wasn't a contrived example contest, it was just an example I made to prove a point, and your pointless rewriting of a contrived example doesn't in anyway argue against that point.
&gt; As a result, it‚Äôs absolutely true that ‚Äúif it compiles, it works,‚Äù not to say that your design can‚Äôt be flawed... And this is the problem 1). Most time consuming errors in my experience are due to incorrect design, not the syntax or prop type matching that is easy to catch in most cases. So no free TDD lunch :) &gt; Then you get things like automatic currying and idiomatic tuples... just a quality of life sort of thing... I actually enjoy the JS quality of life for the freedom to chose whether I want to curry my functions or not. Here I find JS more powerful/convenient over Haskell/Purescript depriving me from variadic functions. ... And this is the problem 2). New langs overheads and inconveniences begin even before we enjoy the benefits. And in JS we have the freedom to borrow the best parts and drop the bad ones :) &gt; In ReasonML, all the functions are considered curried by default, and can return or receive tuples as arguments. How is it different from accepting multiple args and returning arrays in JS? Apart from not being curried by default, which could be a plus :) &gt; Smaller ecosystem of support (e.g. less likely to find solutions on stackoverflow) I find this the biggest problem of all. I would be basically at the mercy of some small group of (benevolent?) dictators who might ignore people requests or supporting some hardware. Not fun :) There is contrast a lot of safety and comfort in staying with JS/NodeJS, huge community and tools for anything you can imagine, plus never had issues installing a new version on any hardware - old or young. And if we can have Ramda and Typescript, why can't we have the other good parts in JS, without all the risks?
Why would it *ever* be the other dev‚Äôs fault, especially when you have personal control over the tab width?
Well if they'd stuck to the standard amount of spaces for each language then I wouldn't have to manually set it in the URL, which frankly I'm not going to do just to look at some code. To be clear, I'm just saying what I prefer. I didn't mean my curses to be taken literally.
It does, and even has some "code symmetry" in that example. If you're going to go with tabs, I think it's likely the best convention. But A) it requires an (arguably) needless extra line, and B) it does not have the same "code symmetry" with a longer starting line: $(fooBarBazQuxQuuxCorgeGraultGarply) .doSomething() .thenDoSomethingElse() .thenDoAFinalThing(); But to be clear, I'm just pointing out the pros/cons, not arguing right/wrong as the fine details of this stuff are extremely subjective.
Welcome to programming. We have millions of programmers, doing millions of similar but different tasks, in slightly different ways, with slightly different tools, on teams with slightly different cultures, etc. And we all want to be objectively better :)
Language is a *HUGE* (and really one of the only *objective*) factors in this whole discussion. I'm a JS guy but I've spent some time doing Python professionally too. That code block makes me ill. Chaining is a big part of JS, and having your code give you hints about itself and how it's structured before you even read a single character, just from the very formatting of it, has real value. But by the same token *consistent indentation* is an even *huger* part of Python. That code block seems to fly in the face of that very deliberate aspect of the language.
Should be doable with a small browser extension. You could even get fancy and tie it to repository, file extension, etc.
&gt; if we use a refactor tool to rename 'sweetActionAlphabetSoup' to 'sweetAbc', the alignment easily ends up broken by accident; I think that depends entirely on your refactoring tool. And really, that's more than just a trivial observation: your tooling (in this case, your IDE) is one of the few clear and objective factors in this discussion (the programming language you use being another one). What your tool can and can't refactor should absolutely be a consideration in how you do your style. But like I said, don't assume everyone is using the same tools either.
People like you have no right to program in C because the fundamental design principle of C and it's child languages is yo "trust the programmer's wisdom" (i.e. all control and data structures and even a macro preprocessor are valid paradigms) and you DON'T trust your programmer's. I suggest that you fix your company's hiring processes.
Just use a good idea, the big ones all have "tab width" even if it's using spaces. Auto swapping between spaces if yours are less, no problem at all. Use whatever you want but this isn't a compelling reason when technology solves it for you
Haha was just kidding! Especially as a Developer you need that boi every day :D
That is true. It's almost always better looking to put the conditions in shorter, better named, variables.
I hope that's sarcasm.
State updates are reflected in the view automatically, no need to wire anything up. Eg, think a game that redraws the world every frame. But eliminating the overhead of rebuilding the entire VDOM at 60FPS. Mithril comes closest to this by triggering redraws on events/XHR.
Using spaces instead of tabs is stupid. There is no reason to do it. The only people who recommend that are luddites who can't be bothered to fix settings in their editor or use consistent values.
I realize it can be really difficult to format code for mobile, but I ought to at least be able to read what a framework is all about without having to squint.
Honestly, there will never be such a thing. The web is complicated, and I‚Äôm never satisfied with any one solution for a given set of problems. But that said, I suppose there are some directions we could go that would make sense. (I‚Äôll assume we are talking about a front-end framework.) Perhaps my biggest frustration is with CSS, especially issues around scoping style properties. It‚Äôs a problem that isn‚Äôt easy to solve, given that a ‚Äústyle,‚Äù in any reasonable sense of the word, must be evaluated in some outer context, hence many CSS properties are aware of the parent element‚Äôs style properties. This becomes an issue when you have a series of nested components that weren‚Äôt initially designed to work with each other, especially when it comes to their layout-related properties. I sort of wish we could totally redo CSS to stick to one rule: either (1) the *parent* element or (2) the *child* element should **completely define** its style relationship with the other, rather than *both* elements defining separate parts of that relationship. That way elements could be basically interchangeable with each other without worrying about their outer context. I would love to see a framework that managed to create an abstraction over CSS to make that kind of design possible. At the current moment, we have style libraries like Bootstrap or Tailwind, but they don‚Äôt quite cut it. I want something about as granular as Tailwind but with a little more code generation at compile time. Now, how that would get integrated into a broader framework like React or Angular (or something entirely different) is beyond me. One can only dream...
Whenever I see garbage formatting like this in a code base, I start to wonder what it's like to be one of those people who cut themselves; maybe it brings relief from stuff like this?
TLDR Tabs is the right thing to do. Doesn‚Äôt matter why.
forEach has a lot of trouble showing intent. [https://phoenix35.js.org/good-practices.html#no-more-foreach](https://phoenix35.js.org/good-practices.html#no-more-foreach) higher order functions like map, reduce, some, etc display intent fairly quickly and easily.
Been mostly using tabs since the mid 90's, switched to spaces a few years ago. 1. Tabs require care to use correctly. Use special indent styles that remove the need for alignment, or carefully align using spaces with tooling that frequently fights such goals. 2. Other people are less likely to screw up spaces. They're not going to do something wrong that only looks right because their tabstop happens to line up, and review is easy because you can just reject anything with a hard tab in it. 3. Tooling is generally happier. Your pager doesn't need teaching your special snowflake tabstop, REPLs won't try to interpret hard tabs pasted in as attempts to tab-complete, Git{Hub,Lab,etc} will do the right thing without handholding. 4. Spaces are standard in most of the languages I use. It's very unusual to find tab-indented Ruby, for instance, which amplify points 2 and 3 because nobody else expects to need to worry about them. In short, I never once really benefited from tabs. Being able to change my tabstop if my tastes changed was a nice theory, but I never once actually did it. All I saw were the problems and the additional expenditure of effort better spent elsewhere.
Awesome work üëå
third times the charm
Sorry but: fuck off. The reason you almost never have and will hear this argument is because it is in fact NOT ridiculous to think that way and just because it's JavaScript doesn't mean it's open source. I'm programming since I'm 11 and I do it professionally for over ten years. I've created Intranets for any size of company you can imagine and NOT ONCE have I met a visually impaired programmer and not once did it occur anywhere that we had to switch tabs for spaces because of some barrier-free requirement. Maybe someone creative person like a programmer could find a better solution than to ask a majority to change for a minority?
The left alt works even better for that...
2 spaces are better for bigger zooms, paired with 80 or 100 max width.
It will put everything in place and wire it up automatically, with no human interaction or design. The user will be able to accomplish their goals with no interaction either, the results they desire just already there when they arrive. Bonus points if the system just goes ahead and emails or otherwise psychically informs the user of their desired results mere moments after the idea to desire said results enters their mind. Also, the size of the framework should be 0 bytes. That would be perfect. Perfection is not meant for this world.
If its and if else statement write the code by tabbing to show that, this code is for the if else. if not dont. just hit enter
This!
Not a fan of it either, but Prettier does this on longer statements and it reads fine.
It's generally from an auto-formatter like Prettier.
And murders.
But if you have a "only tabs for indent" rule, you don't naturally have spaces indenting your code, and people can change the size of a tab for local display as they prefer. ("Tabs are basic indent, but you can then have spaces at the start of a line after the indent" is usable with care.) If you have a "you can mix tabs and spaces, but tabs are always 8 spaces" rule, you have two white space characters, but it always looks the same. It looks weird if you change the tab settings, so don't do that - if it was all spaces, it wouldn't make any difference anyway. But no-one really cares about saving 7 characters each tab, so why bother? If you have neither of those rules, and allow tabs, you're doing it wrong.
this is hot fire
Why doesn‚Äôt node replace these corporate goons with someone else? Like, anything else? I‚Äôd take Microsoft honestly.
That's not what I said.
Solidarity.
Your Weekly /r/javascript Recap **Wednesday, June 26 - Tuesday, July 02** Top 10 Posts | score | link to comments | --|--|-- Nobody talks about the real reason to use Tabs over Spaces | 920 | [418 comments](https://www.reddit.com/r/javascript/comments/c8drjo/nobody_talks_about_the_real_reason_to_use_tabs/) [V8 7.6 Release: "In V8 v7.6, we‚Äôve overhauled our JSON parser to be much faster at scanning and parsing JSON. This results in up to 2.7√ó faster parsing of data served by popular web pages."](https://v8.dev/blog/v8-release-76) | 399 | [31 comments](https://www.reddit.com/r/javascript/comments/c75b5v/v8_76_release_in_v8_v76_weve_overhauled_our_json/) [The Odin Project, A Free Open Source Full Stack Curriculum, Has Just Published A New NodeJS Course!](https://www.theodinproject.com/courses/nodejs) | 336 | [22 comments](https://www.reddit.com/r/javascript/comments/c83ysg/the_odin_project_a_free_open_source_full_stack/) [AI Against Humanity: How I turned a Machine Learning experiment into an AI-driven browser game based on Cards Against Humanity &amp;#40;Spoiler: TensorFlow.js&amp;#41;](https://cpury.github.io/ai-against-humanity/) | 284 | [13 comments](https://www.reddit.com/r/javascript/comments/c5pqxs/ai_against_humanity_how_i_turned_a_machine/) [This guy creates a tinder clone in 60min using react. Pretty impressive](https://youtu.be/wLGM04oi_wE) | 267 | [84 comments](https://www.reddit.com/r/javascript/comments/c7q7oa/this_guy_creates_a_tinder_clone_in_60min_using/) Today I Learned you can break from nested loops using labels | 192 | [151 comments](https://www.reddit.com/r/javascript/comments/c61x9z/today_i_learned_you_can_break_from_nested_loops/) Introducing Truffle - a blockchain development framework written in Javascript. Can you give me some feedback? | 170 | [65 comments](https://www.reddit.com/r/javascript/comments/c67qzm/introducing_truffle_a_blockchain_development/) [Better Software Design with Application Layer Use Cases &amp;#124; Enterprise Node.js + TypeScript](https://khalilstemmler.com/articles/enterprise-typescript-nodejs/application-layer-use-cases/) | 147 | [8 comments](https://www.reddit.com/r/javascript/comments/c70767/better_software_design_with_application_layer_use/) This package will solve all your HTML5 canvas text needs! | 136 | [23 comments](https://www.reddit.com/r/javascript/comments/c6nli3/this_package_will_solve_all_your_html5_canvas/) [Show Reddit: Compress json-data based on its json-schema](https://github.com/pubkey/jsonschema-key-compression?v=1.0.2) | 134 | [13 comments](https://www.reddit.com/r/javascript/comments/c7zb7v/show_reddit_compress_jsondata_based_on_its/) &amp;nbsp; Top 7 Discussions | score | link to comments | --|--|-- Opinion: Most common confidently-misunderstood JS concept? | 15 | [66 comments](https://www.reddit.com/r/javascript/comments/c7c215/opinion_most_common_confidentlymisunderstood_js/) Top Suggested Improvements to Javascript as a Language? | 7 | [50 comments](https://www.reddit.com/r/javascript/comments/c5szhl/top_suggested_improvements_to_javascript_as_a/) Experienced devs, do you use awaits without capturing the value of the promise resolve? | 22 | [33 comments](https://www.reddit.com/r/javascript/comments/c7t97q/experienced_devs_do_you_use_awaits_without/) [What are higher-order functions, and why should anyone care?](https://jrsinclair.com/articles/2019/what-is-a-higher-order-function-and-why-should-anyone-care/) | 28 | [28 comments](https://www.reddit.com/r/javascript/comments/c831ay/what_are_higherorder_functions_and_why_should/) [JavaScript is messed up](https://carlesiborra.com/posts/javascript-is-messed-up/) | 0 | [26 comments](https://www.reddit.com/r/javascript/comments/c64o8p/javascript_is_messed_up/) [The cost of JavaScript in 2019](https://v8.dev/blog/cost-of-javascript-2019) | 65 | [26 comments](https://www.reddit.com/r/javascript/comments/c5pxv9/the_cost_of_javascript_in_2019/) [Asynchronous Boundary Detection &amp;#40;Lazy-loading, Infinite Scroll, ...&amp;#41;](https://github.com/ChrisCavs/bounds.js) | 101 | [24 comments](https://www.reddit.com/r/javascript/comments/c7e3kk/asynchronous_boundary_detection_lazyloading/) &amp;nbsp; Please let me know if you have suggestions to make this roundup better for /r/javascript. I can search for posts based off keywords in the title, URL and flair. And I can also search for comments. If you would like this roundup sent to your inbox every day send me a message with the subject ['javascript'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=javascript&amp;message=x). Or if you only want a weekly roundup, use the subject ['javascript weekly'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=javascript%20weekly&amp;message=x) However, I can do more.. you can have me search for any keywords you want on any subreddit you want. Send a message with the subject ['set javascript'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=set%20javascript&amp;message=200%0A25%2C%20keyword1%2C%20another keyphrase%2C%20last example) and in the message: specify a number of upvotes that must be reached, and then an optional list of keywords you want to search for, separated by commas. You can have as many lines as you'd like, as long as they follow this format: 200 50, keyword1, another keyphrase, last example You can also do ['set javascript weekly'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=set%20javascript%20weekly&amp;message=200%0A25%2C%20keyword1%2C%20another keyphrase%2C%20last example) And you can replace javascript with any subreddit. See my wiki to learn more: [click here](https://www.reddit.com/r/SubredditSummaryBot/wiki/index)
There is something really wrong about hosting JS packages for profit.
If you're using git you can use hooks to format via prettier as code gets pulled/checked out and again as part of the commit process... it can largely be automated.
[https://github.com/jrop/pratt-calculator](https://github.com/jrop/pratt-calculator)
Aside from my other comment... I fought for tabs for \*YEARS\* and frankly lost that battle... at this point, I decided it's better to get code written and not fight with the tooling (prettier, standard, etc) so much.
No tab characters at all. That's the rule I use in nearly every style guide I make. Developer sensibility is not worth any cost that may come from allowing a third white space character.
The problem here is that your "alignment" is arbitrary. You can easily fix this with more consistent layout: ``` myFunction(arg1, arg2); ``` Or ``` myFunction( arg1, arg2 ); ```
The problem is, you don't want software reformatting code for you automatically. If it was for preview only sure, but you want to edit the file, save and commit without causing everyone else's indentation to change. We're not at a point where software can drive cars on public streets where anything can happen. Nor can it re-indent a file where I put in an arbitrary number of spaces because I believe it looks better that way. Either way, do you know of any editor that does it? I'm sure there would be people willing to try that.
It's not arbitrary, it is actually used in our company and in many other projects as well. VS has an option for that kind of indentation as well.
I‚Äôm not sure there‚Äôs much wrong with profiting from providing a service that people demand.
I don‚Äôt know it‚Äôs pretty simple for me: ‚Ä¢ 2,3,4... spaces require more storage than 1 tab (1 tab = 1 byte, 2 spaces = 2 bytes) ‚Ä¢ more keystrokes with spaces ‚Ä¢ a lot of fiddling in case of changes to the indentation unlike just hitting shift+tab ‚Ä¢ 2 spaces make code so squeezed and hard to read, 4 spaces make your thumb exhausted ‚Ä¢ you can set tabsize to what you like ‚Ä¢ Bill Gates prefers tabs
If it's temporary, then readability (with respect to alignment) is pretty irrelevant. If it's semi-permanent, as I assumed, then it shouldn't be there. There will always be a better way. In the case of your final example, it shouldn't be in a comment, and belongs in code docs, a README, or some other better place. I'm not saying there's no value in aligning things if you're going to ignore that it's the wrong place for data - I'm saying it's a self-imposed problem.
&gt;But eliminating the overhead of rebuilding the entire VDOM at 60FPS. &gt; &gt;Mithril comes closest to this by triggering redraws on events/XHR. That's how most frameworks work. I'm not aware of any of them which just constantly redraw.
Most require you to wire up state to trigger redraws of your views somehow.
&gt;2,3,4... spaces require more storage than 1 tab (1 tab = 1 byte, 2 spaces = 2 bytes) So? Anyway, most of your code is compressed in Git, so that isn't even necessarily true. &gt;more keystrokes with spaces Uhh... use the Tab key. &gt;a lot of fiddling in case of changes to the indentation unlike just hitting shift+tab Use Shift+Tab. &gt;2 spaces make code so squeezed and hard to read, 4 spaces make your thumb exhausted Use the Tab key.
How? How is it terrible?
Really surprised by the lack of empathy in this comments section. I keep seeing "who cares about the minority?" as if it's purely about preference and not disability. I think it's cool that OP was able to learn and adapt, and I absolutely think it's fine for the visually-impaired members of the team to have a few more votes on the topic than the rest of the team.
This is not the kind of replies I thought I would be getting but I really enjoyed it
Microsoft would be a better steward for something so critical. NPM inc is ridiculous.
Remember when Sourceforge bundled malware with Firefox? Pepperidge farms remembers.
They dont come close to Webstorm.
It's because those ASCII characters are non-printable characters. A human reading or editing a file -- comma is far easier to understand. Although, fun fact **all ASCII encoded files are automatically valid UTF-8!**
I also like the idea behind libraries like Tailwind/Tachyons. Someone else mentioned Mithril, so I just thought I'd mention a neat pattern that someone had shared in that community a few years ago. In Mithril, one can use JSX normally (e.g. `&lt;Button /&gt;`, but the `Button` variable can point to a CSS selector string. So you can do this: const Card = '.bg-white.rounded-lg.p-6'; //then later &lt;Card /&gt; // a white, rounded, padded div And voila, atomic classes AND semantic component names with a JSX-based template with pretty much zero runtime overhead. If one isn't picky about syntax, one can even go a step further and just use vanilla CSS attribute selectors: const Card = '[style="background:white;border-radius:5px;padding:10px"]' So you never need to bundle a huge-ass css library and there's no convoluted compile step required to treeshake unused stuff. What's more, since you're only ever dealing w/ JS strings, style composition and inheritance, etc are a breeze.
&gt; huge ass-css library *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
And what key for spaces?
Eh, I mean what NPM inc is doing is ridiculous, but I'd take a small for-profit over a large one that already controls so much any day. Same thing with Github, it was concerning that a company with proprietary software held so much of the internet's open-source code, but with Microsoft, the situation is even worse.
As much as I love VS Code (I work in it all day every day) if you have webstorm why switch?
@tim: There' code beautifiers / auto formatters for *every* language. I second `black` formatter for python. It's defaults are good, and consistent. Other formatters I would have to mess with configuration [rust has a sweet one too](https://github.com/rust-lang/rustfmt) Format on save works nice.
Not wrong to provide, wrong to use. And not wrong as in bad, wrong as in incorrect.
Webstorm for projects, VS Code and anything else for a quick edit of a single file.
Eat the rich
And now they've lost customers as a result of providing a shitty service.
Going back to /u/ChaseMoskal He could automate this. Ex Guy #1 git pull, including a post-pull action of `s/[ ]{4}/\t/` . Then it's real easy to go from `s/\t/ /` On git commits, run it through the normal code formatter the team uses.
Because it's easier to convert tabs to spaces then spaces to tabs.
&gt; The problem is, you don't want software reformatting code for you automatically. It's *not* reformatting the original file. It's rendering. Drawing indent levels on the screen as the number of spaces I want instead of the number in the file itself. &gt; Either way, do you know of any editor that does it? I'm sure there would be people willing to try that. No, because we're still stuck on the concept of tab characters. But there are fragments that could be put together. Vim's code folding detects indent level. If I indent something further, it becomes a new indent level. Every programmer can look at a source file and tell you if it's indented by 2 spaces, 4 spaces, etc. It's so not that hard recognition problem. If Vim can detect spaces as indents for code folding, it's not that much of a leap for the editor to also be able to render these detected indents at a user-defined alternative size.
I switched over to VS Code for about 2 years and recently switched back to Webstorm. VS Code is great and I really liked it but Wesbtorm is better and I like it more. It does more, requires less configuration, has fewer resource hogging issues (not as much fan insanity on my laptop). If Webstorm were free it would be the de facto choice for all web developers. Assuming what I just said were provable (and it is true to my personal experience) it's not unreasonable to conclude that the only blocker is price. Webstorm is actually not expensive at all (anyone ever have to pay for the full version of Visual Studio?) so I just went ahead and paid for it and have not looked back. Great IDE.
Right. I will use VS Code to edit a built js file (which takes too long to rebuild). But do everything else in WebStorm. I guess the other editors have cult followings which makes it seem like there is something to them. But perhaps they simply have not given webstorm a chance and dont know.
&gt; function x(xparam1, xparam2) { function y(yparam1, yparam2) { ... But then you're now indenting code (at the scope level) by either spaces or tabs. This is bad, usually ruled against.
Are you suggesting automatically using a code-formatter? Lots of people do.
It's ironic that the CEO talked like he was some super progressive dude then as soon as unionizing was proposed be did an instant 180
Other editors don't come close. Webstorm is a proper IDE after all, and even though extensions can make VS Code and others pretty great, they weren't built to be as comprehensive.
Not only that, but, you could apply a code-formatter on pulls, while applying team formatter on your commits. I highly suggest not doing that, just be consistent with the projects code style. It's not hard. It won't destroy your soul.
I really don't know why someone would want to spend time lining those up like columns. Yeah there are occasionally cases for alignment within comments or arrays maybe, if you have an unusual amount of data in your code, but those would be pretty rare in my experience.
I switched to VS code. WebStorm seemed to be constantly indexing node_modules and hogged a lot of memory. I couldn't be bothered trying to fix it l, I just wanted to do my work.
Yeah, large scale code reformatting seems obnoxious, but tabs vs. spaces is pretty easy to convert between.
If I see the 2nd example I'm thinking this person has too much time on their hands.
Edgy
Do IDEs allow you to arrow through 4 spaces as if they're tabs? This always seems to be a speed bump for me when I have to work with space-indented files.
For rendering it can work, because cost of mistake is negligible. But what happens when you start editing it?
For rendering it can work, because cost of mistake is negligible. But what happens when you start editing it? It needs to be saved back in the same way it was before, so version control doesn't go crazy.
They will likely have to. Rumors are saying npm's finances are not in a good place right now. I don't know if that necessarily means they could go bankrupt but from what I've heard it doesn't look good. Time will tell, I guess.
I agree the memory thing can be annoying. I do edit the webstorm64.exe.vmoptions so it can access more memory, otherwise it gets slow.
Yes, typically if you hold CTRL while pressing LEFT or RIGHT (or maybe holding ALT, as I imagine it varies by IDE).
&gt; Let's say List B is intended to select a subset of List A. But what if List B has element X that is not in A? Should it merge, error out, or what? It should have the same behaviour as a destructuring assignment (with the exception that all destructured properties/values are assigned to an object): const {a,b} = {a:1} a // 1 b // undefined In your second paragraph you seem to be talking about something else than I am. There should only be an object and a list of properties involved. There is no way that "List B has its own values/attributes", it is a list of properties and not an object. There is no overwriting happening, you just get a subset of the original object.
Hi /u/slushy-chivalry, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
# Instead of his, my_function(is_admin(user), is_monkey(user), passed_secret_handshake(self, user)) or even has_secrets_permission(is_admin(user), is_monkey(user), passed_secret_handshake(self, user) ) # I've found this my_function( is_admin(user), is_monkey(user), passed_secret_handshake(self, user), ) Note, the **first time I saw this syntax, I thought it was horrible. But code readability is king**. It's far easier to at a glance see what is going on. **reducing any cognitive load in programming when you don't want it, is a plus.** my_function( is_admin(user), is_monkey(user), passed_secret_handshake(self, user), ) # it makes more sense with conditionals has_secrets_permission(all([ is_admin(user), is_monkey(user), passed_secret_handshake(self, user), ])) It's self-documenting. From the start it explicitly ensures the entire iterable will be an `all` or an `any` condition. This prevents errors of reading or editing which you'd otherwise leave yourself open to. has_secrets_permission(is_admin(user) and is_monkey(user) and passed_secret_handshake(self, user))
A great documentation.
Don't mix tabs and spaces. Also "alignment" leads to incorrect blames when someone has to re-align things. I've come to see both as code smell these days.
Progressivism is for unlimited low-wage workers brought in from around the world and heavy corporate-censorship of ideas and speech, so it's all good.
Him, yes. How else does he equate self-deprecation or physical-comedy with an inflated ego? you &gt; :mic drop: &gt; Sorry... the mic unintentionally fell out of my hands. Sweaty fingers. him &gt; you think highly of yourself. Man, not even the `vi` vs `emacs` holy war is still going on. But tabs vs spaces is. &gt; /u/ECrispy Using spaces instead of tabs is stupid. There is no reason to do it. The only people who recommend that are luddites who can't be bothered to fix settings in their editor or use consistent values. Yep, that's literally the only reason, literally. A far better attitude is to write code following the project's existing style. If it's your project -- do anything you want. Forcing the team to follow your personal guidelines that conflict with the project is just selfish.
Eat the rich
Vue for example doesn't
Node doesn't have anything to do with npm. npm is only in use because it's popular. I'm not surprised large companies aren't jumping at the the chance because, as npm has found, it's not profitable. You could make an alternative if you wanted. Anyone could.
Especially if all you need to change is the indentation prefix.
I‚Äôm aware it‚Äôs not one and the same - but it‚Äôs mainly popular for the fact it‚Äôs built in to node as the default package manager.
As /u/malpingu [pointed out](https://www.reddit.com/r/javascript/comments/c8drjo/nobody_talks_about_the_real_reason_to_use_tabs/esnlop4/): &gt; Each user can use their own $HOME/.editorconfig to override the repo-specific settings.
&gt; npm only became the default because there has never been an alternative.
If only my manager saw it that way...
There are plenty of alternatives at the moment,and many more being created - including a new one being built by the people who got fired from NPM for speaking out.
lol true
i always find it amusing when people in tech spaces espouse views like this, that the free market is by nature fair and regulated justly by customer demand... it completely overlooks basically all of tech history in the US
Yeah ... anyone? How about Facebook?
So when someone is named "McLongnamethatnobodyisevernamedbutpeoplehavethemjustaslong" the whole file/section must be realigned and the blames for the file get superfluous entries. Hell, in your example it could happen when someone has over 9 orders too (gotta align those numbers to the right). As a commentor below pointed out, if you must make it "readable" use newlines instead of wacky spacing. If you want to view it as a table, import it into something like Excel.
The US is not a free market, and most tech companies are monopolistic as they use their cronyist relationship with the government to regulate away competition.
Curious whether end to end tests could have saved your ass. End to end is always problematic, and my team tries to write them only for core stuff, if possible unit tests are always prefered
Im out of the loop, why is npm hated atm?
Don‚Äôt forget it should download additional RAM for the user.
Looks all right if one is just starting a database structure from scratch. But something more complicated, one would probably use an ORM or Knex migration script first - consider allowing importing SQL scripts and building GraphQL schema from them. &amp;#x200B; If a database is already in place, would you consider allowing running introspection on all the tables and building GraphQL schemas from existing relations like Prisma or Postgraphile? &amp;#x200B; For graph visualisation - when a node is collapsed, could you consider adding in brackets how many children that node has? Let's say Queries (4) -&gt; getAuthors: \[authors\] (1) -&gt; Authors (4)
Did you not read the title? Haha union busting and "mole hunts" are some hella anti-employee tactics. The longer answer is that NPM fired several people allegedly for trying to form a union, hence this labor lawsuit that they've just settled. Firing people for wanting to negotiate as a group, then hunting for media sources after the story breaks, are pretty shitty things to do.
"To err is human; to propagate error automatically to all systems is devops."
The alternative is to not write such complicated if statements. If you really need all those branches in your condition and you really can't refactor your code to be more readable / less confusing, then use transient variables to help group the complex calculations up.
&gt; Developer sensibility is not worth any cost that may come from allowing a third white space character. Please list these "costs"
The fact that setState triggers a redraw doesn‚Äôt mean that redrawing is somehow tied to state. And React is event-driven, not constantly updating its VDOM React works very much like the regular DOM works. It reacts to some kind of DOM event, *intercepts* that DOM event to convert it into a standardized ‚Äúsynthetic event‚Äù object, and checks for event handlers registered on your React components, and then executes those handlers. It does NOT constantly construct a VDOM, let alone at 60fps. It only constructs a new VDOM if, while executing an event handler function, it encounters either setState, certain kinds of ‚Äúhooks‚Äù, or certain lifecycle methods that would necessitate the need for an updated VDOM. And after that, it will only actually redraw the specific parts of the DOM that have been added/removed in the VDOM.
It absolutely blows my mind that people don't see how completely obviously superior tabs are.
Why? I see no downsides to it, and it solves the issue of having customizable indentation but being able to line up characters.
If people used tabs like sane people you could set a stylish rule for the case tab-size property
https://developer.mozilla.org/en-US/docs/Web/CSS/tab-size GitHub uses this, doesn't work in msft browsers but I don't use them so whatever
People's indentation width preferences aren't consistent. Who TF cares about this. Insanity. Tabs are the only logical and fair choice
careful, your unbridled libertarianism is showing. i did not say it was an absolutely free market, rather that the "free" nature of the market often has to be *corrected* lest we end up with lack of net neutrality, (virtual) monopolies, and profit alternatives to FOSS, W3C, ICANN, and more. heck, consider the context of the article we're talking about.
Your tool is amazing! I'm coming from a SQL-oriented background and I just started learning GraphQL. Looking forward to using this in my next project! üôå
On the bright side, their shenanigans were the kick in the pants I needed to finally switch over to Yarn.
a perfect framework is no framework at all :-)
&gt;lack of net neutrality Net neutrality will make it harder for new competitors to enter the market thus bolstering the ISP oligopoly, which was created by previous Gov't intervention. If you want to actually solve the ISP monopoly issue, advocate for regulations lobbied for by the likes of Comcast to be removed, so that small competitors can undercut lazy incumbents. &gt;(virtual) monopolies Monopolies (virtual or otherwise) are created by government intervention and, contrary to popular belief, cannot occur naturally. See Chapter 10 of Man, Economy, and State for more information on this topic (available for free online). &gt;profit alternatives to FOSS, W3C, ICANN, and more. I welcome private alternatives for standardization organizations. I fail to see how this would present any issues.
Doesn't the git-scm windows app convert newlines seamlessly? Been a long while since I've used windows but I remember something like that.
Normally I'd agree but brace and indent style aren't one of those areas.
One cost is dirtier code and another cost is inconsistent white space. It's trivial but there's really no good reason to introduce a 3rd white space character for most teams.
Using tabs does not imply that you also have to be inconsistent in your use of whitespace. If you write yours inconsistently, that's a cost due to user error. &gt; dirtier code ???? In addition to this making no sense, it's entirely subjective, and thus not a real cost.
This also literally doesn't work in any reliable manner in webstorm either. You know what does allow indentation size changes though? That's right it's tabs
People who value clean code care. Tabs provide no value to most teams and only increase complexity. It doesn't matter if it's trivial, why make something a little worse for no good reason.
&gt; I welcome private alternatives for standardization organizations. I fail to see how this would present any issues. I assumed as much, but above all this is where I fundamentally disagree!
Should it even be a for-profit endeavor given the nature of the ecosystem?
&gt; that's a cost due to user error. Why even have it be an option at all. &gt; In addition to this making no sense, it's entirely subjective, and thus not a real cost. 2 spaces, a tab character and 2 more spaces does in fact result in dirtier code than just 2 tabs or just 8 spaces but since spaces are far more valuable than tabs and having both will inevitably result in their inconsistent mixing, remove the one that is least valuable.
&gt; Why even have it be an option at all. You doing things inconsistently is always an option, regardless of choice of whitespace character. &gt; 2 spaces, a tab character and 2 more spaces does in fact result in dirtier code That is never appropriate. Nobody ever suggested that, and your CI job would immediately throw up if you ridiculously tried to do that. You would never mix tabs and spaces in any circumstance, it makes no sense at all.
There is one. It's called indenting with tabs...
Glad you've been programming for a whole year then
That the person has some sort of expectation that they cannot do something because of a disability.
You've completely lost me.not a single thing you've said makes any sense
But Yarn just uses NPM?
The mix *is* the downside. The issue of not being able to line up only exists when you use tabs exclusively. When you use spaces exclusively, there is no problem.
So? Everyone has to have the same opinion. /s
That‚Äôd be awesome. They‚Äôve done a great job with React.
You have to set down the controller to use 2 hands. With right alt you can use 1 hand for alt+enter.
Made a JS class for styling console logs as if it were HTML &amp; CSS. Includes an alias system which you can use to make dynamic logs. Rip it to shreds: [https://github.com/EmNudge/Styled-Logs](https://github.com/EmNudge/Styled-Logs)
Something like (Microsoft-owned) GitHub Package Registry? https://github.com/features/package-registry
I tried several times but the live template (snippets) capabilities of the free guys is unusable in comparison.
Alright then good luck because I don't know how to make it any simpler.
I‚Äôll just leave this here: https://techworkerscoalition.org
For now. That could always change, if it needed to.
&gt; You doing things inconsistently is always an option, regardless of choice of whitespace character. So because you can be inconsistent in other areas you should allow inconsistency here? Believe me, if I could style guide away all inconsistency then I would. &gt; That is never appropriate. Nobody ever suggested that, and your CI job would immediately throw up if you ridiculously tried to do that. You would never mix tabs and spaces in any circumstance, it makes no sense at all. And it has absolutely nothing to do with using tabs. Using tabs means, using tabs, not randomly mixing tabs and spaces. If it is technically permissible then some idiot developer will do it. It is unlikely that anybody would do it on purpose but that's what accidents are for. Ultimately you can say it's unreasonable or w/e but I've seen it happen more than once. I think that instead of telling them not to do that and every other dumb thing they can come up it's just easier to ban tabs. It's much more simple and has no down sides most of the time.
You are correct. I tried it and to my astonishment it doesn‚Äôt work Must be another language
We have too many languages these days ;)
Hard truth: if you need a union you're not as valuable as you think.
yes, i agree it's best to avoid the space alignments like in your example, i find it more easily maintainable
No it's more like ditch a flat file completely.
&gt;Not to mention small competitors often cannot just enter the markets and infrastructure possessed by said lazy behemoth incumbents, but I don't think I'd be able to convince you of that. If the lazy behemoth incumbents fail to offer low enough prices for high quality services, then they will absolutely have their lunch eaten. Not to say that Comcast will disappear; in light of new competition, incumbents will lower their prices and increase quality of service to ward off as much competition as possible, benefitting consumers all the same.
Most IDEs and code editors these days support rendering them in other fashion. So your code base can be in spaces but it will show them as if they're tabs anyways without changing the code, fixing the accessibility problem regardless of what the code base uses
What would they change to, however?
Where I work, the build scripts make all those tabs/spaces a moot point when it minifies everything. I personally don‚Äôt care. lol
Whatever comes along. If the NPM situation becomes untenable, someone will step in to replace it.
is this really the case? i'm using VS Code ‚Äî is there now a handy way for me to seamlessly work with a 4-space codebase at say, 2-tab-width? without affecting the representation of the source code on disk? i don't think so i'm suspicious because i think issues surrounding spacebar alignments fundamentally make this impossible ‚Äî i mean, how could the editor detect which spacebars can be treated as tabs, versus spacebars that are part of a funky parameter alignment? i think this is fundamentally the issue ‚Äî spaces are rigid, and inflexible ‚Äî which is fine when you want perfect consistency across workstations, but this is devastating for people who *rely* on the flexibility to meet their own unique needs of course, even if there is a magic solution to this, it would continue to feel as though "spaces are okay given this particular editor-specific workaround", which makes spaces feel like the second-class citizen for accessibility what do you think?
nah, xelif, hanrelan is right you're specifically creating a situation where the alignment won't work if you want to use spaces for alignments, in conjunction with tabs for indentation, then the things you are trying to align *must* be at the same tabbed-indentation level however, i don't want to provide a corrected example, because i find it a bad pattern to be hung up on aesthetically aligning things with spacebars ‚Äî it's really bad for maintainability, especially regarding refactoring tools (if something is renamed, it will ruin spacebar alignments all throughout the codebase), and so it's a really brittle pattern it's better to let indents reflect logical nesting, and to abandon the idea of using spacebars to create fragile alignments also, i find your first example of 'correct' alignment is tricky for me to read ‚Äî this might be my conditioning, but i would prefer a single indent over the funky alignments ‚Äî i personally don't even appreciate the aesthetic gains, so it's hard to justify the maintainability drawbacks interestingly the argument against aesthetic spacebar alignments applies to codebases in tabs or spaces
I'm just worried we might replace one "NPM Inc" with another "NPM Inc". GitHub Package Registry seems cool for now but it's still in beta. We'll see
How on earth does it increase complexity, please I'd love to understand this extremely twisted view. Also, they're both indentation how could you not have clean code in both cases... You're arguments make no sense.
This is more of a Node.js specific project but still, I think it gives some insights into certain constructs in the JavaScript language itself. I would highly appreciate the feedback about the descriptions of the individual examples. So here it is [https://github.com/umut-sahin/javascript-examples](https://github.com/umut-sahin/javascript-examples). &amp;#x200B; Cheers!
&gt; refactoring the entire codebase, it really does matter. switching any codebase between tabs and spaces never takes more than a few minutes, right? unless spacebar-aligned parameters are being used, then somebody's going to have a long and sad day ;)
Nice one OP. This is very helpful and prevents the user being frustrated, which is always a bad thing in web dev
I don't see why you think that's likely. There have been lots of package managers for lots of languages and NPM's the only one I'm aware of that's raised ethical concerns.
Great, I have a really cool ISP idea to challenge Comcast, let me just lay down some sexy fiber on critical infrastructure that I do not own with a small round of VC funding.
&gt; I have now come to the old and wise conclusion that it doesn't matter (the cynic in me, says that nothing really does). okay, so it doesn't matter to you, that is respectable ‚Äî after all, you are a versatile and robust person but do you think it might genuinely matter to people who are less versatile than you? if they told you that it genuinely matters to them, would you take their word for it? what if they explain that this is not simply an issue of aesthetic taste or opinion, that this substantively affects their workflow? what would you say to them? that it doesn't matter? they should find their own workarounds? do they matter? and imagine this *"buildings can have stairways or ramps to access them, but i've come to the wise conclusion that it doesn't matter which kind of entrance a building has, after all, most people can use either, and people have their own preferences so it's a matter of opinion"* but in our society, we actually go out of our way to endow buildings with ramps for those who are less able, despite the fact such people are less common can't we be more courteous, and make the world more friendly and accessible? or does nothing really matter? this all being said, i'm starting to get sick of my own white-knighting here, i think i'm starting to sound too much like pc principal from south park, hahah, "let's all start a github org where we can unite our tolerant views!"
`?ts=&lt;value&gt;` is a fantastic github tip, because it lets the viewer set their preferred tab-width it's a real shame that for github, this isn't a simple and obvious user preference ‚Äî perhaps it should be in your account settings, but also easy to change wherever code is being displayed however, setting an `.editorconfig` tab-width is a bad pattern it's backwards thinking from people who don't understand the true purpose of tabs the whole point of tabs is to *avoid* pushing your tab-width preference on everybody else ‚Äî but that's exactly what `.editorconfig` tab-width would do the concept is to let viewers select their own tab width the author doesn't care which tab-width viewers might use, and writes the source code such that different tab-widths won't degrade the viewing quality of the code (don't use incorrect/brittle spacebar alignments, etc)
Nice! Will try it out tomorrow for sure, it's been a while since I've looking for such tool
Not every HTMLFormElement comes with an `id`, but HTMLFormElement extends HTMLElement extends Element, and you can use querySelectorAll on any Element to query descendants of it, therefore you should use `form.querySelectorAll('input[type="password"]')` instead of `document.querySelectorAll(`form#${form.id} input[type="password"]`)` for a more precise and efficient lookup.
Facebook doesn‚Äôt want to get into package hosting. GitHub already announced they‚Äôll be doing it. Yarn will work with GitHub packages. No NPM needed.
NPM won‚Äôt be around much longer. GitHub is offering a similar service - and since developers already have the code on GitHub anyway, it makes a ton of sense. https://github.com/features/package-registry
I don't want to say it's likely, but possible. No other package registry has ever reached the scale of NPM. Most other relevant package managers (but who still operate at a much smaller scale) are run by either not-for-profits (e.g. PyPI is run by the Python Software Foundation, and RubyGem is community-sponsored), or vendors who have interest in the language itself (e.g NuGet owned by Microsoft/.NET Foundation). Another company operating a NPM registry would have the same issues as NPM Inc to find a viable, sustainable business model. They obviously can't charge for open source projects, and their only option is to find enterprises to sell private registries to. But they're facing strong competition (JFrog Artifactory, Azure Artifacts, soon GitHub Package Registry). (These are my own opinions and don't necessarily reflect those of my employer)
You'd be surprised how simple it is to exclude a folder from being indexed.
Good point, thanks for the feedback. The library may not work as intended for forms without an id, as a result of that selector as well as the storage key generated. I'll work on a fix for this shortly. For elements located outside the form and linked to the form with `form="formid"`, I believe document-scope query is unavoidable, so an option to skip the external inputs could improve performance even more.
GitHub is just a copy of your local git repo. There‚Äôs no risk. And honestly, Microsoft has done some really cool things with GitHub. It‚Äôs been nothing but a positive up to this point.
Nobody's irreplaceable.
The fact that they work at a company where management has clearly no issues with ignoring your basic rights (protected by employment laws) is a sign they DO need a union. And it's certainly not the only good reason.
You expected different?
&gt; How on earth does it increase complexity? Please I'd love to understand this extremely twisted view. 3 &gt; 2. You have 3 characters for white space that's going to increase complexity over having 2 characters. &gt; they're both indentation how could you not have clean code in both cases... You're arguments make no sense. If a developer accidentally mixes spaces and tabs for the same purpose it's going to be less clean than a code base that doesn't have that.
 Marcdownüëª Lightweight markdown viewer and editor [https://github.com/liyasthomas/marcdown](https://github.com/liyasthomas/marcdown)
I switched to VS Code a year ago. Most of my key bindings and settings I was able to reproduce, and the UI I got used to pretty fast. The only thing I miss is git conflict resolution. Webstorm is simply the best at that
Hi tehnokv, &amp;#x200B; This is really impressive, I would love to understand how the library and algorithm work. I will take the time to read the paper but not coming from a mathematical background is there any entry level reading you would recommend so that I can begin to understand the complex formulas? &amp;#x200B; I'd really appreciate some direction. &amp;#x200B; All the best and keep up the great work. &amp;#x200B; Sam
This has nothing to do with javascript other than that in a terrible way it can do javascript syntax highlighting but otherwise is completely unfit for the task
&gt; Net neutrality will make it harder for new competitors to enter the market I think you've been confused by the marketing pushed by lobbyists meant to muddy the waters on the issue. Net neutrality is the opposite of what you think it means. Not arguing anything else, just pointing that out.
regarding the text wrapping consequences for flexible-width tabs, i like to keep code within 80 columns while displaying at 4-space ‚Äî for people displaying at 8-space, code might go beyond column 80 ‚Äî i think that's a reasonable compromise &gt; If spaces need to be changed for a specific environment - that is what tools like prettier are for. i'm not sure what you mean? if spaces are used in source code, it becomes a pain for anybody who wants to change the apparent tab-width prettier supports tabs, so that's how i'd use it ‚Äî linting is great
\+1 for less configuration. I hate about VSCode that you need a bunch of plugins for everything
maybe this article is related and interesting: [Stack Overflow‚Äôs mishap with self-reported data](https://blog.softwaremill.com/stack-overflows-mishap-with-self-reported-data-tabs-vs-spaces-debacle-58e5c741a8f3)
excellent! your technique is also robust against refactors ‚Äî if the variables are renamed, there is no funky space-alignment to worry about, the code remains correct
In spite of what everyone told me, I knew that lesson on economies of scale would pay off at some point!
what about for open source technology, where anybody in the world might contribute?
&gt; So because you can be inconsistent in other areas you should allow inconsistency here? Believe me, if I could style guide away all inconsistency then I would. No, I'm not talking about allowing inconsistency at all. You are the one who invented that premise. &gt; If it is technically permissible then some idiot developer will do it. It's **always** technically permissable, no matter what. The question is, whether it will be allowed by your CI system, which it would never be. You are arguing points nobody made, and it's frankly preposterous.
Technically it mirrors NPM and can switch to pulling packages from another source at any given moment.
it's a popular sentiment "computers should be smart enough to just make this problem go away" however, there's a really simple fundamental reason, that we can't just grab a spaces codebase and display it however we like: a lot of codebases use spaces for parameter alignments problem? you can't write a good algorithm that distinguishes which spaces should be treated as an indent, versus which spaces are part of a parameter alignment ‚Äî this is a fundamental problem, and it's why tabs-to-spaces is easy and trivial, but spaces-to-tabs is problematic (this technically shows that tabs provide more meaning than the spaces) the end result, is that anytime you convert a spaces codebase to tabs, it is highly likely that all kinds of alignments are horrifically mangled but the most important part is ‚Äî if you want to allow people to display indents at different widths, you shouldn't use spaces ‚Äî the whole point of spaces is to enforce consistency across environments so that code always looks the same everywhere if you make all editors smart enough to treat spaces as though they were tabs, you'd actually be making all the spaces people angry ‚Äî you're breaking their consistency which is why they ultimately prefer spaces ‚Äî you see, you're trying to turn spaces *into* tabs
&gt; A lot of our stuff reads text files that work off character position and absolutely lose their shit if you use tabs instead of spaces. i'm so glad none of my technology works that way don't tell me about yours, i don't want it to rub off on me ;)
oh, no, you don't understand the debate nobody's arguing about which keyboard key is better we're just arguing about whether or not indentation should be a changeable user preference people who say yes, choose tabs people who say no, choose spaces i'm arguing that flexibility is actually an accessibility concern, not a simple opinion, and so it's actually more tolerant and friendly to the less-abled to choose tabs, as it more easily accommodates their needs (which is more important than code looking identical everywhere)
"tab-width fluid" ‚Äî i love it, why not!
&gt; since when i tab i need to press space to make it even oh dear :) &gt; i may indent badly yes, i'll bet that's a fair assessment :D
Visual Studio Code is one of the most popular JavaScript IDE's, and most of its new features target JS or TypeScript. It is probably the most fit for the task, given its feature set and performance.
&gt; Maybe someone creative person like a programmer could find a better solution than to ask a majority to change for a minority? hey yeah, here we go! let's stop building accessibility ramps on buildings and the special bathroom stalls, we could fit two regular ones there! forget about handicap parking! *majority rules!!* sorry for sarcasm, i couldn't help myself, with love friend, cheers ;)
# **** JQUERY ALERT ****
it's a good idea for a workaround, but unfortunately a script like that will mangle the indentation for any codebase containing any spacebar alignments for parameters or otherwise the problem with converting spaces to a different indentation, is that we cannot make a good algorithm that distinguishes which spaces are part of an indent, and which are part of a parameter alignment the result is that the indentation gets mangled and also, it defeats the purpose of using spaces, which is to enforce the consistency, this subverts the author's reason for choosing spaces in the first place ‚Äî people who strongly prefer spaces want the code to look identical across environments
I was really excited about the Tree Indent Guides but after I turned it on in settings.json I realized my dark theme makes the indent guides hard to see. I know this is a long shot but does anyone know how to change the colors of the indent guides?
Personally webstorm all the way. Used to use vscode simply because it was free. Got hooked as soon as I got a free subscription from my company. Now I cant unhook myself.
To be a bit specific, git merge is way too awesome. Cant imagine merging without webstorm now.
&gt; No, I'm not talking about allowing inconsistency at all. You are the one who invented that premise. I did not invent the premise of trying to have consistent code. &gt; It's always technically permissable, no matter what. The question is, whether it will be allowed by your CI system, which it would never be. That's semantics, buddy. Whether we remove their tab key or have it throw errors when they commit, the result is the same. &gt; Your logic is rather than "tell them not to do it", you "tell them not to do it". ???? Do you realize how ridiculous this argument is? My logic is that instead of personally telling them not to do it, you have an automated system tell them not to do it. My logic is that, instead of me doing the slow, arduous, manual process of checking their white space every time they commit, I provide a script that does it in nearly an instant and with 100% accuracy and won't let them merge in code if it doesn't pass. &gt; You are arguing points nobody made, and it's frankly preposterous. I regret responding to this nonsense So very ironic...
Thanks for the info. If you don't mind saying, what was your reason for switching?
‚ÄúScrew accessibility‚Äù then, eh?
The few times it requires manual merging line by line is a major pain. It's fairly rare though. I didn't realize it was unique to webstorm. Nice.
You can use NodeJS in the backend without any HTML or CSS.
If you have enough data in your code, generally it should be pulled out into it's own file/service/whatever so you're never going to waste time lining things up but when you're in that weird middle ground where you need just enough data to validate the control flows you're currently writing it comes in handy.
Does anyone know how to make code not try and import (TS style) console whenever I do a console log?
Learn webgl
Pro tip: dont study for 6-8 hours a day. Build stuff/write actual working code for 6-8 hours a day. Show yourself getting better, and show that you‚Äôre able to solve more complex problems. This will help you land that job.
Please elaborate why you think that so.
This true but the market is a lot smaller. OP might want to look into some other language if he is interested in the non-web code (Python, Go, C#, Java, etc).
It‚Äôs pretty damn nice in VS Code. It shows you both side-by-side and you can just click ‚Äúaccept current‚Äù, ‚Äúaccept incoming‚Äù, and ‚Äúaccept both‚Äù.
[removed]
Good work. I have been using this guy for a while https://tastenkunst.github.io/brfv4_javascript_examples/
Another reason it's ridiculous for software developers (by and large) to call themselves "engineers". "Break production" in real engineering disciplines and your bridge falls down or your plane crashes and people die.
To clarify is the reason tabs are more accessible because tab width is customizable? sorry if dumb question -- very enlightening post
Spaces take more characters than tabs so by your logic tabs are better. And a linter (which everyone should use) solves the second one.
&gt;I currently use 2 spaces for tab. For writing the second line above, I just hit tab twice. Then for all variable declarations after that, I just click enter and it will auto indent to line up with the previous line. I'm afraid that if you're using tabs to align, your code will already look broken for other developers. It's likely if you load up what you've written that it will appear as this for most developers: var example = {}, example2 = false, example3 = 1 &gt;Will things like auto-indent in most editors be able to handle mixed indentation like that? Or would it just indent up to where var is and then I have to just add spaces to get the next line to line up with the previous line? Be careful not to get your definitions of alignment and indentation mixed up. Indentation is everything left of the current block you're working in (e.g inside the curly braces of a function). Alignment is what you use to guarantee that things stay in-line with each other inside the current block. Your indentation and alignment whitespace will never be mixed together. You will always have all of your indentation first and alignment anywhere after that. What you should be doing to guarantee your code looks correct is something like this: [https://i.imgur.com/0rCubaB.png](https://i.imgur.com/0rCubaB.png). Tabs on the left and spaces between the indentation and example2/example3 declarations. This way it doesn't matter if someone has tabs set to 2/4/8/whatever spaces wide, the examples will always stay aligned without imposing a tab width on someone. Personally I stay away from chaining variable declarations like you have. Using the keyword var/let/const before each variable makes it easier to move lines between functions and also keeps your git diffs cleaner. For example, if we wanted to remove `example1` for instance, compare [this diff](https://i.imgur.com/LLZupJV.png) to [this diff](https://i.imgur.com/EZU2YyT.png). Which one appears cleaner? Choosing the second option will help you avoid the alignment+indentation issue altogether. &gt;Another problem I am concerned about it, if people use tab for spacing alignment on accident, it won't be obvious to them because all whitespace looks the same. If your company doesn't have a linter that everyone uses, something like that could slip by and end up getting merged, possibly causing issues for users that have different indentation size. I'm guessing the solution is to just require a linter, but if you have a large project that hasn't been using one, it may take a while to update the code to all pass with the linter. I know the company I currently work for should be using a linter, but we don't and it hasn't really been much of a problem since we all have our editors configured to use 2 spaces for indentation. \-------------.------- You don't need to setup a linter for this, let your editor handle it. [See my example here](https://i.imgur.com/UljPZbn.jpg). Even if you don't want a theme that shows errors, simply turning on whitespace characters will make inconsistencies stick out like a sore thumb. I bet you saw the problem with the line above this paragraph without having to scan it character by character. Our visual systems are wired to bring inconsistencies to our attention before we're even aware that we're looking for those inconsistencies in the first place.
&gt; Progressivism is for unlimited low-wage workers brought in from around the world and heavy corporate-censorship of ideas and speech, Lol...imagine really believing this
Literally isn't terrible at syntax highlighting what do you even mean?
I just added my name to the waiting list. If they accept me, it'll be yarn + github package-registry for me from now on.
Google HR is the greatest ally of antifa.
&gt; I'm afraid that if you're using tabs to align, your code will already look broken for other developers. It's likely if you load up what you've written that it will appear as this for most developers: You misunderstood me. I meant that our editor automatically puts in 2 spaces when we hit tab. When you configure your editor to use spaces instead of tab, you hit tab but it puts the correct number of spaces to get everything in the codeblock to line up. In that example, you hit tab twice, it puts 4 spaces for the variable, then each time you click enter to go to the next line, it auto indents to where the last variable declaration started. Since they are spaces, they will align the same way for everyone. &gt; Be careful not to get your definitions of alignment and indentation mixed up. Indentation is everything left of the current block you're working in (e.g inside the curly braces of a function). Alignment is what you use to guarantee that things stay in-line with each other inside the current block. Your indentation and alignment whitespace will never be mixed together. You will always have all of your indentation first and alignment anywhere after that. When using whitespace instead of tabs, you don't have to think about that, when you hit tab, it inserts the correct number of whitespace to align the text. If you need to align something, you just click tab or space until it aligns. It will align the same for everyone since there is no mix of tabs/spaces. When I was saying mixing them up, I just meant you have both on the same line, but you didn't realize that you hit tab once when trying to align your variables because it would still look like it aligns. If you use tabs for indenting and spaces for alignment, someone might accidentally tab for alignment and it would look the same because a tab just looks like whitespace until viewed by someone who uses different tab width configuration. &gt; What you should be doing to guarantee your code looks correct is something like this: https://i.imgur.com/0rCubaB.png. Is that a plugin or does your editor just do that formatting? At the company I work at, we don't have a standard editor everyone should use, many people are just using vim. It's easy to configure usage of whitespace for indentation in most editors since using whitespace instead of tabs is a very common practice. &gt; Tabs on the left and spaces between the indentation and example2/example3 declarations. This way it doesn't matter if someone has tabs set to 2/4/8/whatever spaces wide, the examples will always stay aligned without imposing a tab width on someone. I get that, I meant, if your editing the code and just typed the line for example2 = true, then click enter, would it indent and add spaces to align your next variable with your previous variable, or would it just indent to where you have indentation, requiring you to add additional spaces? When using spaces for indentation and alignment, you don't have to think about that. &gt; Personally I stay away from chaining variable declarations like you have. Using the keyword var/let/const before each variable makes it easier to move lines between functions and also keeps your git diffs cleaner. For example, if we wanted to remove example1 for instance, compare this diff to this diff. Which one appears cleaner? Choosing the second option will help you avoid the alignment+indentation issue altogether. Fair point, in my personal projects I do that. But some people like using that code style as it doesn't require them to repeatedly type var/let/const when declaring multiple variables. &gt; You don't need to setup a linter for this, let your editor handle it. See my example here. Even if you don't want a theme that shows errors, simply turning on whitespace characters will make inconsistencies stick out like a sore thumb. I bet you saw the problem with the line above this paragraph without having to scan it character by character. Our visual systems are wired to bring inconsistencies to our attention before we're even aware that we're looking for those inconsistencies in the first place. Yes, but not all editors have that feature. Meanwhile, whitespace instead of tabs is a very common configuration, giving people the freedom to use whichever editor they want.
Hi /u/Zivsteve, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
NodeJS on the backend is not small. It‚Äôs definitely larger than Go, and likely comparable to Python.
&gt;it shouldn't be in a comment, and belongs in code docs, a README, or some other better place. I've just opened some of my real code to better illustrate alignment used inside a file of code. [Example 1](https://i.imgur.com/qiVkdlK.png): The alignment inside the jsDoc style comment. Without aligning the descriptions it would become harder to read. Sure you could move the documentation for each function into a web-based documentation file and let a html &lt;table&gt; keep things aligned, but you would lose in-editor assistance while you're coding. [Example 1a](https://i.imgur.com/xIsLjFf.png). [Example 1b](https://i.imgur.com/xWuyIUb.png). [Example 2](https://i.imgur.com/MuC0LXj.png): A comment inside some code that isn't used for testing but is used for diagnosing issues mid-development. You know what they say about theory and practice... In this case it was code that can't be automatically tested since it would crash the entire browser, other tabs included for some very specific versions of very specific browsers of very specific devices. Every time it crashes it would require human interaction to start the next step. This diagnosis code assists us to fine-tune some number for these specific cases to avoid crashes.
Hi I'm Oracle, let me tell you about open source. I'll provide a real world example to illustrate: get Grindr from an app store (it's free), put a picture of a twink up in there, you're 21 years old, your profile name is Ma$$age, everyone else around you is free though.
Yeah you should probably use tabs then in that instance
No. Because if they were that valuable they'd easily be able to get another and better job.
What if they didn‚Äôt want another job? Maybe they had been at NPM for years (the CEO arrived in January) and they enjoy what they do. Maybe they also have stock options in the company they‚Äôd lose if they quit. Regardless, there are limits to what‚Äôs acceptable. Even the CEO of a VC-backed startup isn‚Äôt above the law, including employment laws. If the CEO is willing to break those basic laws, I can suspect there could be other issues.
I've never worked anywhere that could refactor their codebase from tabs to spaces in 'a few minutes'. You're talking about updating virtually every file in our codebase, which would take several people several months. If the linting rules changed to favor tabs over spaces this process would be more gradual, but every PR would become really muddy. Reviewers would probably miss changes elsewhere in the file. Visually impaired people aside, some people prefer spaces for legitimate reasons. I don't think there's a clear consensus one way or the other, and there IS a clear cost to switching. If I were to start from scratch I would probably choose tabs. But I can definitely see why businesses may not want to switch.
&gt;You misunderstood me. Ah I get you, you're editor is basically using tab as a shortcut/macro of pressing space a set number of times. &gt;If you use tabs for indenting and spaces for alignment, someone might accidentally tab for alignment and it would look the same because a tab just looks like whitespace until viewed by someone who uses different tab width configuration. This is correct. This is the reasoning of the axiom: "Tabs for indentation, spaces for alignment". &gt;Is that a plugin or does your editor just do that formatting? At the company I work at, we don't have a standard editor everyone should use, It's just my editor. Every developer should have the privilege to choose their own editor. &gt;many people are just using vim. Hardcore, nice. &gt;It's easy to configure usage of whitespace for indentation in most editors since using whitespace instead of tabs is a very common practice. I think you mean spaces here instead of whitespace, whitespace consists of both spaces and tabs. According to the stack overflow develoer survey, most people actually use tabs. It doesn't matter regardless since it's an appeal to majority fallacy. But I'm almost certain that the majority of new developers who use spaces over tabs are due to (either directly or indirectly) python's forced use of whitespace for control flow. Something I consider just as big a mistake as not including comments in the original json spec or not making border-box the default box-sizing standard way back when the box model was introduced. &gt;When using spaces for indentation and alignment, you don't have to think about that. This is true but then you lose out on developer accessibility. In my eyes it's the same as mandating an editor for developers. &gt;But some people like using that code style as it doesn't require them to repeatedly type var/let/const when declaring multiple variables. If speed of development is a concern, they shouldn't be manually typing it each time. They should be using the duplicate line shortcut then renaming the variable. &gt;instead of tabs is a very common configuration, giving people the freedom to use whichever editor they want. Are there any editors used today that do not support tabs?
I don't think they were being as discourteous as you read it. It seems to me they came to this conclusion long before reading your post, and the main point of the comment is sticking to consistency. &amp;#x200B; The python bit sucks, but I'd imagine any language with whitespace requirements has to be an extra level of hell for the visually-impaired.
Gotta be pretty slow, compared with something like ImageMagick, yeah?
The vote manipulation is obvious. Lol!
Hi /u/psvj, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Sorry about the half-assed reply. I was in a hurry and it wasn't my intention but I can see now that I read like a jerk. Returning to the discussion, my example shows exactly the way I code. Normally, when I need to break an expression in multiple lines, I put a single sub-expression per line. I can't even align things the way you did because I use a proportional font for coding. I find that writing in columns (vertically aligning code) is commonly done arbitrarily, hard to standardize and difficult to maintain. Anyway, this is all personal preference, and I accept I'm in the minority here.
If they don't want another job, they must not be being treated that unfairly.
Backend with nodejs is technically just Javascript. If you go frontend side then yeah HTML CSS is kinda mandatory
Very few. You can rule out any front-end jobs. Maybe a big company focused on Node that can afford to have someone specialize.
Thanks for the apology, and with context your post makes much more sense. However ... I really do try not to pick sides on holy wars: if there's not a clear objective reason to care about something, I figure you should let people do what they want to do. However, I am *sorely* tempted to say that it's "wrong" to use a: &gt;proportional font for coding It's not about "being in the minority", because again if there's no clear objective reason to be in the majority who cares? But fixed-width fonts are a staple and used by almost every programmer out there. And your choice of font affects how others see your code. To me the most important thing about code, more important than how the computer reads it even (at least 9 times out of 10), is how easily your team members or you yourself (in 6+ months when it looks to you like someone else wrote it) can read and understand it.
So, I‚Äôm not who you‚Äôre replying too.. I also pledge my allegiance to both net neutrality and a free (as in ‚Äúopen‚Äù ) internet. But I think it‚Äôs a good point. According to [this](https://www.telegraph.co.uk/technology/2016/02/04/worlds-internet-traffic-to-surpass-one-zettabyte-in-2016/) article I just found (I didn‚Äôt vet it toooooo much, but the point still stands), yearly internet traffic hit 1 zettabyte in 2016... and was estimated to hit 2ZB by 2019. It also stated that streaming was estimated to make up _54%_ of that bandwidth. Now, let‚Äôs be hyper conservative and give Netflix the **ultimate** benefit of the doubt and say that they only make up 1% of that 1.08ZB... Now, some people would say ‚Äúcharge them more so that startups can actually compete with Netflix!‚Äù A small part of me agrees, sure. But is that entirely _fair_? No. Transferring 1B of data should cost the same regardless of who or what that data is. Believe me, I know nothing in life should be expected to be fair. I get that. Still, the point still stands. Handicapping successful companies does _not_ help us individuals. Why? Because then Netflix raises their prices by 30% to accommodate the loss anyway. Who pays for that? Us.
It costs money? Need serial code? Online activation? What are you talking about? Certainly not about VSCode.
Hi, I'm working on GitHub readme file as you mention. Can you give me a comment on that, please? i add a link below. [https://github.com/supunlakmal/thismypc#what-this-my-pc-](https://github.com/supunlakmal/thismypc#what-this-my-pc-)
Just rather assumed it did, safe assumption with ms products. At any rate, it's MS, it's tainted radioactive, I don't care if they drove up and tried to give it to me with a singing clown. Ms is garbage, was garbage, will always be garbage
I like sharp.
Even if you‚Äôre using yarn your still using the npm package registry. Yarn is just a different tool than npm in this context... the packages come from the same place.
Why not HTML and CSS? Are you trying to stay away from design of any type, or you've simply not learned those languages yet?
If you're trying to stay away from front end stuff just do backend, or better yet learn a different language so you can code in a more 'pure' (jesus that word sounds elitist) environment where you don't have to worry about design or front end or using Node. It's easier to code just in C++ or Java or Python than it is to code in *just* JS.
&gt; Spaces take more characters than tabs so by your logic tabs are better (I don't agree with your logic here anyway). Uh what? A space and a tab are both single characters. &gt; You shouldn't even be allowed to commit code that isn't linted &amp; formatted via a pre-commit hook. Right? Are you talking to the right person? You seem to be extremely lost.
Facebook is the last company I would trust with storing my data. Next thing you know my private repositories will be in the hands of Cambridge-Analytica or whatever-the-fuck that company was. Anyone but Facebook.
I don't have any developers on my team that have that accessibility issue. I said it wasn't worth a developer's sensibility. I said nothing of a developers accessibility. Accessibility for accessibility's sake is stupid; know your audience.
Not right now you don‚Äôt.
There's something wrong with you if you think employee rights have anything to do with your "value".
Yes, because life is simple and everything has an easy, obvious answer. /s Goddamnit, why, at 40 does it still surprise me that humans are stupid?
&gt; yarn + github package-registry I think they understand that given that they mentioned they would be using the github package registry.
Yes, but learning HTML+CSS is a piece of cake compared to what you need to know for JS jobs that don't involve HTML+CSS at all. You're still expected to know HTML+CSS anyways though.
&gt; I don't think they were being as discourteous as you read it. yeah, you're totally right they were just expressing a "live and let live" sort of sentiment, i need to relax &gt; The python bit sucks, but I'd imagine any language with whitespace requirements has to be an extra level of hell for the visually-impaired. you can use tabs in python code, despite a misguided official recommendation
I think HTML &amp; CSS is not that difficult. The hardest thing to do was learning flexbox and there are many websites with guides and resources :)
They also have to be a security firm that enforced certain practices to ensure the security and integrity of the packages. Not much money to be made.
You've never used vscode and it is painfully obvious. I'm no fan of microsoft but vscode is a great product.
There's nothing there to understand. These are tooling problems that have been solved by tooling. The end.
I'd say im Really surprised at the appeals to emotion like the one you're displaying but I'm not. People love to be Holliier than though to feel good about themselves. Still doesn't change the fact that this is solvable on the client's end and that you can just follow project convention. You're not less empathic for arguing rationally instead of screeching at others.
And as we all know once you make a style guide it's set in stone and can never be changed.
Hi /u/BoringCulture4, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It can be run by any platform, nice work.
I like that you use the session storage to store this. Does it mean it only works with browsers that support session storage? Does it have any fallback if the browser doesn't support session storage? E.g. cookies?
&gt; I have zero passion in that area Then learn something else. Seriously. I interview a lot of people, and none have had purely backend experience with JS as their primary language. As it turns out, my own job actually involves almost no frontend work these days, but I highly doubt you'll be able to land a job like mine if you're still at learning stages, because this type of job is more demanding in terms of things you need to have experience with than your average full stack position. Almost nobody uses JS for non-web/non-UI work. Even if you were to learn Node.js and be purely backend, you would still be working with a web stack, and by extension, with frontends at least part time. Since you didn't say what you're interested in, I'll just drop a few random suggestions: - if you're interested in backend (i.e. databases), you're probably better off learning Java and SQL - if you're interested in ML, you're probably better off learning Python (and math) - if you're interested in hardware (e.g. self-driving, medical hardware), you're better off learning C++ Oh, and learn algorithms, because interviews.
Open Dev tools and try to inspect the element. You can change the colors of things in your user settings
I just started using this in production and I like it a lot. Simple to use and seems to be quick enough for my purposes. Wish it could resize animated gifs tho :(
won't anybody in favor of spaces speak up? this is now looking really one-sided ;) seriously though, i'd like to know the rationale for not folding in favor of tabs here? anybody? *bueller?*
VS Code is not the same thing as Visual Studio.
Yeah this library relies on web storage and does not work for browsers that don't support this feature. Rather than bulk up the library, I think I'd suggest using an web storage imitation like the one [here](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Local_storage) for devs who need to support old browsers. According to [caniuse](https://caniuse.com/#search=webstorage), all major browsers have supported web storage for the last decade, so I'm okay with this decision but open to other feedback. What do you think?
If it's a CSS setting that GitHub applies, wouldn't one be able to use the [stylus](https://github.com/openstyles/stylus/wiki) extension to edit GitHub's CSS to your liking?
Good thing Microsoft doesn't union bust...oh wait
i really appreciate you enumerating arguments in favor of spaces are you sufficiently sympathetic to the accessibility concern to consider using tabs for new open source projects (when anybody in the world might contribute)? or do you think these four points outweigh the accessibility?
Nah
Is this similar to garlic.js? I've been using that but it's quiet old.
Sectoral unions ftw!
&gt; You're talking about updating virtually every file in our codebase, which would take several people several months. (If not longer.) give a lazy programmer a hard problem, and they'll find an [easy way to solve it](https://www.npmjs.com/package/spaces-to-tabs) ;) it can be done cleanly, in a single commit, over an afternoon the only complication, in spaces-to-tabs, might be if the codebase uses spacebars to align things horizontally, which is a nasty little habit (which also goes badly if you use *any* refactor tool, so it's best to rip that bandaid off quick) ‚Äî that could take some time, and is much more difficult to automate interestingly, tabs-to-spaces inherently goes smoothly and is a simple risk-free instant-conversion however it's the spaces-to-tabs that we run into troubles, because we can't differentiate between indentation and spacebar alignments notice the asymmetry there? that's because, technically, tabs convey *more meaning*, as they provide that disambiguation ‚Äî food for thought &gt; some people prefer spaces for legitimate reasons. this thread is really a quest to discover those reasons, but they aren't seeming very impressive once they are finally admitted to
That's not how programing works.
I've never used garlic.js but from checking out its website, I would say that yes this is similar.
Is this similar to Charles Proxy??
Your religious fervor for spaces is far more problematic than your style guide.
seconded, in my experience sharp is faster
Bravo on no dependencies! :-)
Thanks for sharing this, I only knew of jimp.
I feel like the reason ISP monopolies exist isn‚Äôt because of government intervention but instead because of the high fixed costs associated with creating infrastructure for the internet, leading to a natural monopoly.
Honestly I do only JavaScript with minimal HTML/CSS. I always promote the idea of letting a person who is passionate about HTML/CSS do that part. I have a member of my team who does just that. I even asked her to take ownership of it, because I trusted her judgment on proper, semantic, maintainable HTML and CSS over my own. She said she didn't feel qualified because she wasn't a "Dev II", and I said yes but you get to Dev II by showing you can do Dev II things. She has since taken it and run with it. Sometimes challenging me on decisions I've made. She gets the last word, because it is hers to make. I'm so excited by how excited she is at her job. At any rate. I have years of experience with HTML and CSS (at this point decades), but it changes so fast. Nearly as fast as JavaScript does. I can't keep up with both, and JavaScript is my passion. I would encourage anyone to 1. be able to do both And 2. Let the people who enjoy doing the thing actually do it the most.
Is there an option to rotate images based on Exif metadata?
Using a package/script like your link still requires updating every file in the codebase. One commit per repo is still something like a thousand commits where I work. As you noticed, any change can cause problems, so this need to be tested and reviewed, just like every other commit we make. We just described a human reading virtually every file in our codebase. That would take a wicked long time. I'm not convinced there is a significant advantage to tabs over spaces, and the cost of converting even a small business codebase can be significant.
i really appreciate that you've outlined numbered arguments for spaces, because i don't think anybody else has yet had the courage ;) since i have time, i'd love to digest each argument to see what you think of my rationale 1. **Tabs require care to use correctly. Use special indent styles that remove the need for alignment, or carefully align using spaces with tooling that frequently fights such goals.** some folks in this thread have convinced me to regard spacebar alignments as an antipattern, because such alignments are very brittle, being easily broken by almost any refactor action (such as simple renames) because refactors like renames happen across the codebase to many files simultaneously, spacebar alignments are: - horrendous to maintain (have fun manually fixing hundreds of alignments) - very difficult to automate - highly error prone, it's easy to miss some spots and the alignment stays broken despite this, some tab-users still use spacebar alignments, because it's actually easy to create alignments that work at any tab-width ‚Äî you don't need any tooling, it's actually the same as when you use spaces, and people get easily confused about this, but, just think it through you can see that once this best practice is adopted (and alignments are abandoned), tabs do not require any additional care than spaces to be used correctly, and so i feel this should assuage this first concern 2. **Other people are less likely to screw up spaces. They're not going to do something wrong that only looks right because their tabstop happens to line up, and review is easy because you can just reject anything with a hard tab in it.** i strongly recommend that visible whitespace is enabled, and a linter is a good idea for these concerns ‚Äî it should be as simple as rejecting any leading spacebars i feel like this second point is easily overcome by rudimentary quality standards 3. **Tooling is generally happier. Your pager doesn't need teaching your special snowflake tabstop, REPLs won't try to interpret hard tabs pasted in as attempts to tab-complete, Git{Hub,Lab,etc} will do the right thing without handholding.** annoying to run into, but this is just bad tooling you can't always avoid it, but it can indicate that you're deviating too far from the standard ecosystem where these hitches are more ironed-out is it worth degrading codebase accessibility to appease cruddy tooling? it depends on how important that particular tool is to the project in the long run, isn't the right answer for us to fix the bad tool? i think this third point can concede that shoddy tools should generally be avoided, worked-around, or improved ‚Äî even though in some rarer cases, a dinosaur closed-source tool might be a nasty limitation that must be abided by (i hear a tiny violin) 4. **Spaces are standard in most of the languages I use. It's very unusual to find tab-indented Ruby, for instance, which amplify points 2 and 3 because nobody else expects to need to worry about them.** it's unfortunate that spaces have become popular in many circles but you don't always need to fight against the wind, sometimes it's necessary to be a conformist i just hope that when, say, the ruby community discusses whether or not they should switch to tabs, they might consider the arguments we've talked about and make the right decision i think this fourth point can concede that tabs are a reasonable choice for forward-thinking open-source javascript/typescript projects (not necessarily for other languages/communities) &gt; In short, I never once really benefited from tabs. Being able to change my tabstop if my tastes changed was a nice theory, but I never once actually did it. All I saw were the problems and the additional expenditure of effort better spent elsewhere. the reader with unique sensibilities is the intended beneficiary of the tabs ‚Äî not the source code author i genuinely wonder, to all spaces-people: would you personally rather be in the predicament to work on a tabs codebase, or to work on an 8-space codebase? (or whatever's opposite your preference) /u/Freeky, given this discussion, how do you feel about tabs being used in new open source projects, where anybody in the world could become a contributor and accessibility is a more realistic concern? cheers! üëã Chase
this is what I was looking for üëåüëå üëèüëèüëè
&gt; Hard truth: if you need a union you're not as valuable as you think. Its being done for virtue signaling, same thing as the whole CoC they shoved down everyones throat. The problem with npm is that its located in a hotbed of coastal idiocy.
you will need to know some bash skills, and a bit about devops, those are the basics. Cant do without SQL for much. But yeah, mainly JS is needed is many many shops.
&gt; One commit per repo is still something like a thousand commits where I work. okay, you're in a very special case, having thousands of repositories to maintain sometimes it's better to use a worse practice consistently, then to actually embark on the better practice ‚Äî especially for older, fading, legacy tech gosh i sure hope space alignments weren't allowed :D &gt; I'm not convinced there is a significant advantage to tabs over spaces, i'm sure you'll agree that accessibility for the visually impaired is *an advantage*, even if it's not applicable to you at the moment ‚Äî nor does it need to be worth a thousand-repo overhaul in a situation of massive scale, i'm sure i'd still lean towards adopting best practices for the most active repositories, only refactoring older repositories once activity picks up i am a big believer that regular refactoring for codebase health and maintainability is a top priority for any project where quality is important at the very least, for a large company, somebody's got to stop the bleeding and set a standard to stop using spacebar alignments which make refactors of any kind terribly painful
Lol!
There are alternatives like Artifactory, NPM just remains the king
I use sharp for doing this kind of processing in Node... but I really like that jimp can run in the browser (sharp cannot, AFAIK). I have a use-case where doing the processing client-side may save a bunch of bandwidth (and server CPU, obviously), so jimp may be a great addition for parts of my app's logic flow.
JS can be pretty fast with proper use of typed arrays.
I feel like react already has some great documentation
Yeah and it implies that you don't want to have both tabs and spaces. In actuality, having both is a good solution because they both serve different purposes
&gt; Your argument makes complete sense, except there are cases where you can‚Äôt control the indent width of a tab. And as (bad) luck would have it, the defaults in these cases are usually weird (like 8 spaces to a tab). this is just bad tooling though, instead of degrading our codebase, we should select better tools or fix the existing ones &gt; There‚Äôs also the case of ‚Äúhanging indent‚Äù, a formatting style popular in the Lisp family of languages. this is the javascript subreddit, but i'm sure many weird languages do many of silly things &gt; but I choose spaces out of necessity. would you consider recommending tabs for new open source javascript projects?
And when you mix them, there is no issue around aligning text.
i think this looks not bad üëç
yes, it's a good point i think it might be reasonable to go to 72 columns at tab-width 2 it's a considerate compromise, and folks with very large tab-width can risk overflow
some folks here have made an excellent point, that spacebar alignments are a nasty habit such alignments are very brittle against almost any refactor action ‚Äî anytime you rename something, you are liable to break many fragile spacebar alignments in many places across many files ‚Äî it's a maintenance headache for something completely aesthetic, and it's common to miss a spot and commit mangled formatting into the codebase tabs for indentation, and.. tabs for indentation!
yeah it's faster than imagemagick
Yea Mostly React( or other framework ) + NodeJs And you have people who do the html/css for you
Yes, sorta. At my company we have a distinction between JS engineers and UI engineers. JS handles the "hooking up" of the page to data and interactivity. UI handles the HTML and CSS. There is a bit of overlap, but not a lot. And our app is far too large to make it feasible any other way.
&gt; If you have a personal indentation style, or indentation display, then everything you produce that's aligned (like doc comments) looks like garbage pretty much anywhere else. people who use tabs simply know that's not true alignments are fine in tabs (doc-comments and all), it's no problem to ensure everything lines up correctly, at any viewing tab-width ‚Äî somehow many people get easily confused about this before they try it, but they just need to think it through for a bit to realize it's a trivial non-problem ‚Äî i don't think i need to demonstrate it, i know you're already working it out in your head /u/LogicUpgrade, you said the following, and many people share this sentiment &gt; And let's put that aside, no one seems to talk about alternative solutions: many IDEs can convert spaces to tabs on open, and back to spaces on save. however, it's simply not true, and as /u/justrhysism points out, &gt; I haven‚Äôt found a way with any IDE to display 2 spaces as 4 spaces, or vice-versa - without reverting to converting white space to and fro. and that's right ‚Äî it's actually not easy to view spaces-code at different indentation widths ‚Äî the conversion process is generally painful, because spacebar alignments are too common (an antipattern in its own right, discussion for another time) /u/LogicUpgrade, you said &gt; Code is not just you talking to a computer. It's you talking to your teammates, and any person out there who might stumble onto your code, if it's open. i can't help but feel you're overlooking the whole point of tabs.. because that point you made is literally the case in favor of tabs ‚Äî you could trick people into thinking it was me who said that quote, somewhere in my original post ;) let me ask you something: would you rather work with an 12-space-indented codebase, or a tabs codebase? i ask about 12-space, because i'm betting you would not prefer it, and opt for tabs instead ‚Äî which would reveal that you are in favor of tabs the moment the codebase disagrees with *your* personal preference what's the good reason for a codebase to push an indentation-viewing preference onto the coders? how does it benefit the computer or the teammates? given my above sentiment, can you see how this next quote of yours, is actually another argument in favor of tabs? it can't really be correctly interpreted a different way ‚Äî i just worry you're all mixed up, mate! &gt; Because the practice is to have a team code style, not a personal one. not trying to make you mad, just hoping to shed a light from a different angle for you cheers, üëã Chase
So? It makes vscode lighter than webstorm and will only include the features you actually want.
Yes, there are definitely roles where you're mainly working with JS and minimal HTML/CSS (this basically describes my role as an SWE at one of the largest software companies). That said, it'd be a weird gap in your skillset to learn JS but avoid learning HTML or CSS.
&gt; but I've just accepted that viewing code in a browser (that isn't a web IDE) will always been a pain for a large portion of people. we have to hold onto hope that, one day, our tools will get better *BELIEVE!*
&gt; defeats the whole purpose. yes, this is generally right it's nice that people can influence the default github tab-width display, but this is a hack workaround for github's deficiency ideally, source code is totally agnostic about tab-width display ‚Äî there's shouldn't be a reason to specify a default at all ‚Äî and viewers should be able to easily set their preference
would you consider recommending tabs for new open source javascript projects?
I don‚Äôt have the patience to explain the basic math of tab math to you, but everything you said about how tab width doesn‚Äôt break alignment is bullshit.
&gt; would you consider recommending tabs for new open source javascript projects? It depends, I guess. I think the OP made a very good point that I wasn‚Äôt aware of before. If tabs has increased accessibility then I think tabs is the way to go. Prior to reading his post I would‚Äôve said ‚Äúno‚Äù, however; the benefits of tabs did not outweigh maximum compatibility with popular tools like GitHub.
&gt; In my opinion your coworkers are edge cases should society stop making handicap parking spots, accessible bathroom stalls, and wheelchair ramps? &gt; If they take the time they can set up different types of local global git hooks to automatically ensure the files are formatted as they like before they work on them and when making commits. Once they've created these it'll be easier for them to pick up ANY project and contribute. it's a nice idea, but it's being pointed out in this thread, that tooling for seamless spaces-to-tabs conversions simply don't exist, because it's fundamentally very brittle and error prone: it mangles any spacebar alignments because of this to-tabs/to-spaces asymmetry, converting back and forth is actually hazardous to the code itself, which is why this isn't easy we want it to be a trivial problem, but sadly it's more complicated than that
*\*plays "singing in the rain" while tabbing his doc-comments\** ;)
Imagemagick is a huge security hole. Use sharp
Watch out with using JIMP during requests or anything where async is recommended, because it blocks the event loop. I use sharp instead. It's also a lot faster.
I think NPMs creator is launching a distributed alternative, I watched a JSConf speech by her.. really cool.
OK, genius, here's your example: Scenario: a[TAB]bbbbbb aa[TAB]bbbbb aaa[TAB]bbbb aaaa[TAB]bbb aaaaa[TAB]bb aaaaaa[TAB]b Tab width 2: a bbbbbb aa bbbbb aaa bbbb aaaa bbb aaaaa bb aaaaaa b Tab width 3: a bbbbbb aa bbbbb aaa bbbb aaaa bbb aaaaa bb aaaaaa b Tab width 4: a bbbbbb aa bbbbb aaa bbbb aaaa bbb aaaaa bb aaaaaa b Tab width 5: a bbbbbb aa bbbbb aaa bbbb aaaa bbb aaaaa bb aaaaaa b Tab width 6: a bbbbbb aa bbbbb aaa bbbb aaaa bbb aaaaa bb aaaaaa b Tab width 7: a bbbbbb aa bbbbb aaa bbbb aaaa bbb aaaaa bb aaaaaa b "TaB WiDTh ChaNGe DOesN'T BreAK aLignMeNT" "YoU'Ve cLEaRly NEvEr USed TaBS" Bullshit.
Why not? Just as there are people who only specialize themselves in frontend development, there are those who do so for backend development. These days you can write backends with javascript in environments like nodejs. &amp;#x200B; I would say it's pretty pointless to limit yourself to either one but each to their own I guess.
It will be slower for sure. But for usages where speed is not that important it's pretty useful because it's easier to install and maintain. Where with other solutions you often need to install some system deps (like imagemagick, graphicsmagick, vips, etc.) - and that might be sometimes problematic.
You changed your code formatting based on a Reddit post. Okay.
It doesn't matter much what you use. So I've optimized my code formatting for "less bitching" by fellow developers.
Honestly that's such a weird thing to fret about customizing though. Don't we have bigger fish to fry? I get it: everyone is used to something. Being used to something is NEVER a great reason to just keep doing it for the rest of your life. When I started programming I used tab width 2. I was "used to it". Then I moved to tab width 4 to match common practice. Now I use 4 spaces. I'm still alive and productive. And I just got used to 4 spaces and it never bothers me. The lesson? Pick your battles carefully.
Heres a pretty common case. Aligning identifier to a tabstop before an equals or colon. Can't do that with tabs, not without some headaches. dog = "hello world" catLongNameWhoa = "goodbye earth" wat = { thisIs : 1 aGreatStruct : 2 }
There‚Äôs no way the consistency people refer to is across their own code. You can be bloody well consistent with your use of tabs, if that were all it is.
What.
imagine flaming VSC when promoting notepad++
Yes I have tried both Jimp and Sharp and the latter is way faster!. I use it in my personal sites to generate thumbnails on the fly.
Let him do that once, comment it out. Prevents further unwanted adding of console import. It's something :/
Wouldn't this also defeat the purpose of having editorconfig files specific to a project? &amp;#x200B; I know in my company, we have several projects with different styling from our default guidelines. The editorconfig in each project defines the settings for that project, to avoid merge conflicts because of IDEs mass-reformatting the code. &amp;#x200B; It also allows the (mostly remote) devs to use their own prefered settings as IDE defaults, while still using the correct settings for each project.
&gt; similar at first glance Hm? Based on what, the name?
for me, they are too close to each other. is there any way to increase spacing?
Heres a pretty common case where spaces have an advantage. Aligning an equals or colon after an identifier. Can't do that with tabs only, not without some headaches. [Tabstop 8](https://imgur.com/WMVu8Ny.png) [Tabstop 4](https://imgur.com/Va4XO54.png)
Looks fun, I believe the mobile app version will go well
okay, found it. just change the value \`Settings &gt; Workbench &gt; Appearence &gt; Tree: Indent\`
Visual Studio Code is certainly not an IDE.
Great work dude. Very intuitive.
Sounds kinda like [https://en.wikipedia.org/wiki/Literate_programming](http://www.literateprogramming.com/index.html)
&gt; Java and JavaScript require the developer to code in terms of objects and their associations to each other. This allows both languages access to techniques such as inheritance, encapsulation, and polymorphism. Go away
Frontend developers need to know every language, every framework, databases, API design, and networking. Then in 6 months it'll all change and you get to re-learn everything all over again.
The only alternative path as things stand is Node, but then you definitively must learn databases (both sql and at least some nosql), containers / k8s / aws and all that jazz, and eventually you'll want to get familiar with redis, message queues like rabbitMQ / kafka / spark, logging, elasticsearch. And you really ought to learn at least another BE language to compete for jobs (Go seems to be the fashionable choice these days). In other words, much more stuff to learn - nothing wrong with that, just be aware of it. If you don't like that either than forget JS
&gt; The fact is that any modern editor can handle tabs or spaces just fine. Can you give us your list of which editors handle tabs and spaces to your liking while also having good support for accessibility needs, such as working with high contrast mode and screenreaders, and not requiring a lot of day-1 tinkering to disable weird command shortcuts that are used by accessibility software? If yes great, you could help out some people here. If no, maybe don't be so high-and-mighty in insisting that there's absolutely the software available if you haven't put the time in to ensuring this is the case.
It's decent. But the three-column screen webstorm has is much better.
You can use it like (sorry indent but on phone) constructor({propA, propB}) {....} And call it new MyClass(input) Or new MyClass({propA, propB})
look cool. Just read the whitepaper. Looks promising, am I right, that wavelet uses the DAG (like in IOTA)? Btw, recently tried to implement the chat with consensus protocol behind and private version of ethereum blockchain in pure JS with mokka consensus ( [https://github.com/ega-forever/mokka/tree/master/examples/node/decentralized-ganache](https://github.com/ega-forever/mokka/tree/master/examples/node/decentralized-ganache)). Also, it would be cool to run EVM on your ledger (in order to make it possible to run smart contracts written in solidity). Have you thought about it?
Ya , But I've put only the basic Technologies To know. BTW, Thanks üòä
Hi! Why do you react in such way?
If you use React you can get away without touching any CSS and HTML, but i don't think you have this in mind.
We are trying to bring developers back to using the programming languages they are more comfortable with when developing smart contracts like Rust/C/C++/Go/AssemblyScript/Zig/etc. - we do have plans however for an Ethereum interoperability later coming up, and also there has been some interesting discussions compiling WebAssembly code (which Rust and several languages compile down to) into EVM bytecode. Definitely do keep in touch with us either on our Discord or any of our social feeds for more information on that :). And also, you're right: Wavelet uses a DAG though in a very innovative manner to allow for very strong scalability and a unique, leaderless proof-of-stake model.
Creative idea, I will try it out at home. Thanks for sharing
I tried using webstorm but I don't like it, I prefer VS code but a lot of my colleagues use webstorm.
That‚Äôs alignment, not indentation. So you still haven‚Äôt presented an argument against tab indentation.
Nothing, I just thought, since I'm not familiar with web development, that there could be a distinction between website "stylers" and website "programmers".
It depends on your use case. But most of the time, you'll not be using objects. Passing objects as param will force user (one who will use object constructor to instantiate new object) to enter 'named keys' and if \`paramA\` is misspelled as \`ParamA\`, your code will break. But once again, it really depends on how you want to do things. There's not any restriction in using both cases.
Personally, for all arguments/parameters, I use the single object in, single object out philosophy. This way, you can also do this: class MyObject { constructor(inputObject) { Object.assign(this, inputObject) } } const obj = { propA: "A", propB: "B" } const cls = new MyObject(obj); console.log(cls);
Yes that's alignment, because the argument was about alignment, and both sides used the word "alignment". No one is arguing about indentation.
Thank you so much for your feedback
Hi /u/imakerbiz, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
About running smart contracts with general programming languages: as far as I know, there already was a project from IBM called ‚Äúhyperledger‚Äù. Used to be in their discussion group. So, there were a lot of problems with making smart contracts truly safe. That is why hyperledger got several releases, where one support python, java and js, another one - EVM. Do you have any white paper about smart contracts?, I mean research, design and implementation notes?
[removed]
Pass the object, so you can mock it latter for testing. If you create the object inside the constructor you can't do that.
Exactly. Have another Vue at his comment and it will make sense.
At least 5 other homosexual developers got it and probably laughed a lot.
I just want to say that you chose a name 1000x better than garlic.js
Nice comment, good code review, taught me a thing or two :)
Hmm regardless the rule I follow is tabs for indentation and spaces for alignment. Except I don‚Äôt align things; too hard and too slow. I don‚Äôt even format these days and just allow a tool (Prettier) to do it for me.
if you have have any queries do let me know!
Pretty much what I'm doing. If it's microsoft, burn it, it won't work well and it'll probably steal your info.
stealing infos OMEGALUL your infos has already been stolen with fb and some shit like this btw you never used it so you can't argue on it, that's all
To make programming smart contracts in different languages safe, we made our own WebAssembly virtual machine that supports the most limited subset of WebAssembly available that may not be abused :). Hence, all languages that are able to be compiled down to WebAssembly are supported by Wavelet. Hyperledger on the other hand provides smart contract support by having nodes run VMs to support the execution of a number of different programing languages, which is relatively unsafe. For the WebAssembly VM that we made and open-sourced: https://github.com/perlin-network/life We do not have a specific whitepaper for smart contracts, though do have a document that does explain effectively how smart contracts work as a system within Wavelet: https://wavelet.perlin.net/docs/smart-contracts
\+1
Look for Node.js jobs. Also there are game-engines that are heavy on pure Javascript. &amp;#x200B; I don't think you can avoid JSON, if that's an issue for you.
Yes! But modernized &amp; more powerful (Charles hasn't been significantly updated for quite a while), open source &amp; working on platforms other than OSX, and with much easier setup (you can intercept one window, not just the whole computer).
This is just your opinion. Most shitty devs these days only use bootstrap and don't give a fuck about CSS itself. Or just use React and don't give a fuck about JS itself. I say it's better to learn the actual language then to learn some weird flavor of it. We already wasted 10 years on jQuery
Enjoy using a virus as an operating system, I'm sure you'll be very productive
Well you are clearly a waste of space on this sub, clearly also know nothing about anything. 45 minute install? Online activation? Costs Money? Damn, you are dense.
So, I was specifically talking about _data_ within code (or comments), and not alignment of things while programming in general. However, since I see a few points worth discussing here, I'll bite. &gt; Without aligning the descriptions it would become harder to read. Would it, though? Syntax highlighting already provides excellent visual separation when scanning the list (as evidenced by your Example 1 screenshot). The alignment serves little to no purpose in this context as a result other than making it subjectively "look nice". As a more general point, the fewer the items you have to align, the less benefit you gain from aligning to begin with, which is why doing it in doc blocks (or variable definitions, parameter lists, etc.) is always questionable at best, as you should really never have enough things to align to make it worth your while, and certainly not worth the pain that it becomes to keep them aligned when adding, removing, or modifying lines that force realignment of the whole list of things. The value proposition just isn't there. &gt; A comment inside some code that isn't used for testing but is used for diagnosing issues mid-development. With no alignment, it's even easier to scan and read: // 1kb // request.setRequestHeader(...); // 1mb // request.setRequestHeader(...); // 1gb // request.setRequestHeader(...); However, if I'm being honest, the magic numbers are bad practice anyway. Not using them would have prevented what appears to be an off-by-one error in your 1gb range (`1073741824` is `1024^n`; `n=3`, while the other ranges are `1024^n-1`, not `1024^n`). Getting rid of them solves both problems, even if you prefer the 1-line approach from your original screenshot: // request.setRequestHeader('Range', `bytes=0-${1024 ** 1 - 1}`); // 1kb // request.setRequestHeader('Range', `bytes=0-${1024 ** 2 - 1}`); // 1mb // request.setRequestHeader('Range', `bytes=0-${1024 ** 3 - 1}`); // 1gb Or, if you define the byte constants elsewhere in your code, it becomes self-documenting, with no need for comments at all: // somewhere else... const KB = 1024; const MB = 1024 ** 2; const GB = 1024 ** 3; // example code... // request.setRequestHeader('Range', `bytes=0-${KB - 1}`); // request.setRequestHeader('Range', `bytes=0-${MB - 1}`); // request.setRequestHeader('Range', `bytes=0-${GB - 1}`);
Why not just be a backend engineer using JavaScript/Java?
Some people like simplicity, what's wrong with that?
I use both, I'm not a professional Dev but I love the clean interface of VScode, its a joy to use! But, wrbstorm gives alot of info that VScodr doesn't without bothering with plugins.
Why javascript, then, and not C or Python or even PHP?
Except it's not problematic at all and my preference for spaces over tabs is hardly religious.
Yes a space and tab are one character but to reach an indentation of 4 spaces it will take 4 space characters and 1 tab (assuming an indentation width of 4) 4 &gt; 1 Great job
Except now you have tab characters and space characters in your code. Tab characters are unnecessary because spaces do the job just fine almost always. Your use of white space characters is not consistent.
Not really. Yarn's default package registry is `registry.yarnpkg.com`. Right now, that registry is a reverse proxy (actually, a `CNAME`) to `registry.npmjs.org`. You can set multiple registries in Yarn and it will resolve them in the order you specify: so a package could be looked for in the `npm.pkg.github.com` registry first, and then fall back to `registry.yarnpkg.com` for packages that haven't migrated over from NPM. This is like what happened to SourceForge when alternatives finally came available. Github was exponentially better, even though a lot of projects were still in Subversion repos and had a long-term presence on SourceForge. All of the monkey-business NPM engaged in over the years has caused a lot of developers to have animosity towards them. Sourceforge thought they could get away with dishonest "Download Here" banner ads right above the actual download link to an opensource project (which then led to malware/bloatware downloads), and inject browser toolbars and the like into open source installation packages because open source developers had no choice. And then they did (Github). And SourceForge died, was sold off in bankruptcy for less than pennies on the dollar, and is trying to regain its footing under new owners.
That's fine. Your document will only have space characters and not a mix of tab and space characters. My argument has never been about having fewer white space characters otherwise I'd be pushing 1 space indents which is lunacy.
This is like what happened to SourceForge when alternatives finally came available. Github was exponentially better, even though a lot of projects were still in Subversion repos and had a long-term presence on SourceForge. Sourceforge thought they could get away with dishonest "Download Here" banner ads right above the actual download link to an opensource project (which then led to malware/bloatware downloads), and inject browser toolbars and the like into open source installation packages because open source developers had no choice. And then they did (Github). And SourceForge died, was sold off in bankruptcy for less than pennies on the dollar, and is trying to regain its footing under new owners. All of the monkey-business NPM engaged in over the years has caused a lot of developers to have animosity towards them.
Do you even understand what a linter does? I highly recommend looking into it.
Isaac Schlueter was the original NPM creator and the owner of NPM, Inc. C J Silverio (who you're referring to) was the long-time CTO of NPM, inc. At least from my perspective, the reason to want to stop using NPM completely (both the client and the registry) is not based on technical reasons. It is based on all the nonsense and authoritarian behaviour that organization and its people have engaged in over the years. I wouldn't follow any of them to a new project personally. Aside from that, a distributed package registry doesn't make a lot of sense to me. It's a well-explored problem space: anonymous P2P file sharing for example.
im so sad that most of developers especially JS ones has viruses... fuck what should I do pls help me !!!!
If you don't want to use the API you could use a headless browser to navigate to the video you want to comment on, write the text into the correct text field and press the submit button. Maybe checkout Chrome Debug Protocol. It lets you remotely control a Chrome instance. There should be libraries for various programming languages.
i have also, i mean, really, ultimately, it's an editor / viewer setting. it just boggles my mind that the vast majority of the tools have made spaces the standard instead of the more flexible tabs.
It‚Äôs precisely because it‚Äôs a setting.
Because why not experiment with front end development which is a new field for me?
Can yarn be configured to point at the GitHub package registry?
That's absolutely right man , I am just a beginner at Web development and but after the research to learn what and how, I came to know that there is a lot to do with Front-End Development other than HTML,CSS and JavaScript. But , as of computers 0s and 1s are basic units and for a web page or web app HTML,CSS and JavaScript are basic units. That is what my opinion is. And thanks for a valuable comment.
So, you just agreed that yarns default package registry is just a cname to npm, but you disagree that the packages come from the same place?
I wonder if making use of gpu.js could bring this more on par with sharp?
that's exactly what i do
It's ironic that your comment formatting is a mess because you don't know what indenting does in Markdown. A bit of it has its own scrollbar. &gt; tabs do not require any additional care than spaces to be used correctly This is contrary to my experience. I see much more broken indentation in projects using tabs than with spaces. Tabs (usually) work where people *work* to enforce quality and everyone involved is on-board or review is sufficient to counteract the careless, but most projects are not that. I see no similar pattern with space-indented codebases - people seem to be better at avoiding hard tabs in such cases. &gt; is it worth degrading codebase accessibility to appease cruddy tooling? A codebase that works poorly with available tools is in itself less accessible. &gt; in the long run, isn't the right answer for us to fix the bad tool? Maybe if it was one tool, but it's not. It's lots of tools, across lots of projects, across lots of owners. It's not merely a substantial technical problem, but a social one. &gt; i think this fourth point can concede that tabs are a reasonable choice for forward-thinking open-source javascript/typescript projects I would never say tabs are an *unreasonable* choice. I used them almost exclusively for longer than some people here have been alive, I wasn't *stupid* or *wrong*, but I probably would have saved myself a fair bit of effort and heartache if I hadn't bothered. &gt; would you personally rather be in the predicament to work on a tabs codebase, or to work on an 8-space codebase? (or whatever's opposite your preference) I'd rather work with well-maintained tabs than whacky-choice spaces, but I'm not sure that's a very interesting point. &gt; given this discussion, how do you feel about tabs being used in new open source projects, where anybody in the world could become a contributor and accessibility is a more realistic concern? I range from neutral to I'm-not-doing-that-again. I think Go and Rust have the right idea, with officially-blessed auto-formatting tools. Checkout/checkin hooks to reflow if you have special needs should not be particularly difficult to set up, especially compared with fixing or configuring every tool that needs to interpret tabs.
Even companies using mono repos would face the problem of reviewing all of the changes. It just doesn't seem safe or practical, in my opinion. If the argument is that tabs are better because IDEs can parse them for visually impaired programmers, I have to wonder if it would be easier to find/write a plugin for the IDE to parse spaces like tabs. Heck, I'd ask the visually impaired programmer to write it themselves so it works exactly the way they want it to (ignore leading whitespace / use an AST to group spaces to preserve indentation, etc). Sounds like an opportunity for the visually impaired community, to me.
Awesome!, will check it out.
Not sure what you mean because you can mock the input either way.
My company uses linters for every project we have. I wrote the linting rules for our current project. Now I know for certain you're lost.
Because front end development by its very nature includes CSS and HTML? I wasn't having a go, it was a suggestion based on what languages you know and want to use. Even the very basics of front end Dev tequittee HTML/CSS.
When I click on the first link, I redirects me once: to the second page you've linked. &amp;#x200B; And who says it's some JavaScript code that redirects you?
&gt; should society stop making handicap parking spots, accessible bathroom stalls, and wheelchair ramps? how do we justify that expense to accommodate so few? I'd never be an advocate for any of this unless there was an alternative provided that was equally as good or better. &gt; because of this to-tabs/to-spaces asymmetry, converting back and forth is actually hazardous to the code itself, which is why this isn't easy &gt; we want it to be a trivial problem, but sadly it's more complicated than that Prettier does a pretty good job of handling this. BUT, you're right, it's never THAT simple.
I'm not disagreeing with you. I was just pointing out that the default behaviour in the two package managers is different. NPM is hard-coded to pull from `registry.npmjs.org`, where yarn is **yarn**-coded to pull from `registry.yarnpkg.com`. I think you would agree that is different, even if yarn's DNS is configured to point to NPM's registry.
Assuming the array is sorted function f (arr, x) { for ( let element of arr ) if ( element &gt;= x ) return element; return null; // signal that it was not possible }
coz when i disable js for this page, it doesn't redirect
See, though, you can *always* convert tabs to an arbitrary number of spaces. You can't always do that with spaces to tabs.
thank you [https://imagetragick.com/](https://imagetragick.com/)
Nice, I‚Äôll try it today. P
Yes you can use yarn config set registry &lt;registry url&gt;
Gosh OP forgot all the ; and you forgot all the braces... kids these days :-(
How about something like this? ``` return Math.min(arr.filter(y =&gt; y&gt;= x)); ```
I have AdBlock and Anti-Adblock Killer, so there is no redirect It's 2019, get your extensions :D
This is the kind of job array.reduce is good for const f = (arr, x) =&gt; { return arr.reduce((soFar, next) =&gt; { if (next &lt;= x) return soFar; if (soFar === undefined || next &lt;= soFar) return next; return soFar; }, undefined); } f([10, 20, 30, 40, 10, 20, 90], 23) -&gt; 30 f([10, 20, 30, 40, 10, 20, 90], 3) -&gt; 10 f([10, 20, 30, 40, 10, 20, 90], 0) -&gt; 10 f([10, 20, 30, 40, 10, 20, 90], 40) -&gt; 90 f([10, 20, 30, 40, 10, 20, 90], 39) -&gt; 40 f([], 39) -&gt; undefined
Doesn't work, Math.min doesn't take arrays... you'd have to do `Math.min(...arr.filter(y =&gt; y &gt;= x))`
Individual parameters will allow your code to be more self-documenting and less cryptic. Additionally, unless the code is *actually* documented with something like JSDoc, IDE code hints will also be underutilized.
High entry costs do not lead to natural monopoly. It is the tendency of all industries to become more highly capitalized as they develop further. There is nothing unique about the ISP industry which necessitates monopoly.
Ah good point, edited to use apply
Unless this code is properly documented I will argue that it is unnecessarily cryptic and error prone.
What's wrong with that? It's a trivial preference (at least in the languages I work in), and this story made me realize my choice wasn't empathetic towards others with different needs that may hop into my code. Switching costs me nothing.
Now you're unsympathetic with the settings of 90% of developers out there, and you're unsympathetic with people viewing your code online like GitHub, which renders tabs too wide.
I'll be brutally honest: the fact that english is not your first language is very obvious. For instance, even the name "This My PC" should be "This **Is** My PC" (or "This is my PC"; not everyone follows the same capitalization rules in English, as some don't capitalize two letter words unless they come at the start/end). My suggestion to improve your readme would be: What is This Is My PC ? This is My PC app allows you to transfer folders and files from your computer to another computer, by using a NodeJS server and web front-end. Why Use This Is My PC? * The app's responsive web interface helps you to browse file in any resolution device * You can access the source code for your own projects. * It works well in low bandwidth environments. How Can I Use This Is My PC? All usage instruction and information update on Github Wiki.
you might have an errant extension or something else controlling your browser installed because I just land on the article after the first redirect. what is the page it's taking you to?
I'd be interested to see a source on that 90% figure, but I don't see how either of those outweigh accessibility. And what developer doesn't have their editor configured to adapt to the formatting of a given codebase?
i want to stay on the page which says "opening *******..." i mean i don't want that page to redirect
that't not any kind of ad... my ad blocker doesn't have that kind of feature
\&gt; "A natural monopoly is a monopoly in an industry in which high infrastructural costs and other barriers to entry relative to the size of the market give the largest supplier in an industry, often the first supplier in a market, an overwhelming advantage over potential competitors." &amp;#x200B; I got that from Wikipedia, there are a few other places basically saying the same thing. &amp;#x200B; Due to economies of scale a natural monopoly will always have a lower AVC as compared to a new competitor (due to the high fixed costs of creating, say, internet infrastructure). Governments sometimes try to work with these natural monopolies because, as a society, it may be better overall to just let them operate in a regional monopoly, but regulate them as to produce at a certain quantity at a certain price, as very infrequently do firms try and disrupt a market which was a natural monopoly (most firms do not want to risk the high fixed costs associated with setting up infrastructure).
Is there anything specific you couldn't get used to?
Depends on how you define an IDE. Technically it would be enough if it supports debugging, and VSC can certainly debug.
Hi /u/KapiteinKrentenbaard, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/SrMattDiggity, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/gajanand_edu, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MataTop, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ali_sepehri_kh, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
But then you'll probably need SQL.
I realise I was quite harsh. Sorry for that! Good of you to see my point &lt;3
That makes sense to me. My scope was just in the workplace and I hadn't considered open source projects. That would definitely need a larger look. I think another solution might be some kind of package just for people with accessibility issues. They can configure it so that when they pull from a repo and open something, the file is changed to be easy for them to work with. When they push their branch to the repo, it would go back in the same format it was pulled. If that makes any sense. The issue is that accessibility is such an umbrella term. Tabs might be the answer for one group, but then we're still ignoring some other groups. Even "blind" can mean one of a thousand things. We can do some big things now that could fix problems for most people, while not really doing much to set "normal" folks back. But it would be cool to find a way to catch those other gaps on a more personal level, too.
Hello all\~ For the past couple of weeks my team and I have been working hard on a mocking tool called #Interspect. Our tool intends to aid engineers ensure data interoperability between microservices and arbitrary API endpoints without having to worry about test data setup or environment availability. Interspect is specifically designed to maximize developer and tester productivity when working in autonomous or cross-functional product teams. [https://github.com/oslabs-beta/Interspect](https://github.com/oslabs-beta/Interspect) Please support us by checking out our project on our Github page. Our project is currently in beta and we would appreciate it if you could share it with other engineers who would be interested in testing our product. We are open to contributions :).
If you're the one dev. You are going to do everything. Once the team grows you'll be able to focus only on what you love. Let the CSS-g√ºru handle all the CSS and the HTML-guy can fix the semantics later Where I work, that's me. The other guys go purely JS with little CSS &amp; HTML at times, that I'll patch up later :-D
It's a lost artform. It truly is difficult to *get it right*. Most of us just drop in bootstrap/bulma and simply don't care any more :(
That definition originates from modern economic theory which imo is arbitrary and an overall useless definition. It is true that spatial restrictions may require that only one firm may operate profitably in a given region (such as a water company). However, this is irrelevant, as the term "monopoly" is useless when applied here unless a given firm achieves a monopoly price, which cannot be determined (in other words, cannot be separated from the competitive price). Only in cases of Gov't intervention can we clearly identify a competitive price which is separate from a monopoly price. Once again I defer to Man, Economy, and State: Chapter 10, Part 3, Section E, Part 2 for a summation of "natural monopolies". This textbook is available for free online in HTML and PDF form, and the part on natural monopolies is very brief.
I would say you're expected to know the basics. But nobody cares about semantics, baseline or those silly things these days. :(
Vue.js is even better
I wrote an article about javascript generators. [https://cloudnweb.dev/2019/06/understanding-generators-in-javascript-javascript-weekly/](https://cloudnweb.dev/2019/06/understanding-generators-in-javascript-javascript-weekly/)
This is where Proxy gets interesting
Hello all\~ For the past couple of weeks my team and I have been working hard on a mocking tool called #Interspect. Our tool intends to aid engineers ensure data interoperability between microservices and arbitrary API endpoints without having to worry about test data setup or environment availability. Interspect is specifically designed to maximize developer and tester productivity when working in autonomous or cross-functional product teams. [https://github.com/oslabs-beta/Interspect](https://github.com/oslabs-beta/Interspect) Please support us by checking out our project on our Github page. Our project is currently in beta and we would appreciate it if you could share it with other engineers who would be interested in testing our product. We are open to contributions :).
&gt; That definition originates from modern economic theory which imo is arbitrary and an overall useless definition. Bullshit, John Stuart Mill first brought it up in the fucking 1800s, yet you try citing an Austrian School book from the 60s which is somehow less modern? Unless you are trying to imply that John Stuart Mill is somehow a proponent of MMT, which is laughable and irrelevant. &gt; It is true that spatial restrictions may require that only one firm may operate profitably in a given region (such as a water company). I'm not even really talking about profit, I'm talking about achieving normal economic profit in the long run, which is very hard when you aren't the first in a market that tends towards natural monopoly. In this case, some competitor ISP would have to offer a lower price than their ATC (in the long run), so they (economically speaking) cannot justify operating. &gt; However, this is irrelevant, as the term "monopoly" is useless when applied here unless a given firm achieves a monopoly price, which cannot be determined (in other words, cannot be separated from the competitive price). A monopoly can typically be forced to produce at the competitive price and quantity, it doesn't mean they aren't a monopoly. If there are high barriers to entry and only one firm producing, its a monopoly, regardless of whatever you're saying. &gt; Only in cases of Gov't intervention can we clearly identify a competitive price which is separate from a monopoly price. If an ISP is not regulated, it doesn't mean the market suddenly turns perfectly competitive, it still only has one firm with a very large barrier to entry. &gt; Once again I defer to Man, Economy, and State: Chapter 10, Part 3, Section E, Part 2 for a summation of "natural monopolies". This textbook is available for free online in HTML and PDF form, and the part on natural monopolies is very brief. I'm not sure that Austrian conjecture is enough to disprove foundation principles in economics.
It can be but JIMP is still quite sluggish. I would suggest using webGL instead where possible.
It‚Äôs good, but there are WebGL-based alternatives with better performance (albeit only working in the browser).
&gt;Bullshit, John Stuart Mill first brought it up in the fucking 1800s, yet you try citing an Austrian School book from the 60s which is somehow less modern? MMT uses a similar, arbitrary definition. And it is undeniable that Mill inspired future doctrines such as MMT. And just because an econ book is literally newer does not make it more similar to MMT. The Austrian School studies economics in the classic Austrian tradition and is older than popularized schools of thought today. The book I linked in particular is a very important work because the author corrects the errors made by his mentor, Ludwig von Mises, on Monopoly Theory. &gt;I'm not even really talking about profit, I'm talking about achieving normal economic profit in the long run So you are talking about profit? Firms will not operate in an industry unless they can do so profitably. Whether in the long run or short run depends on the time preferences of entrepreneurs and their abilities to achieve their predictions ex ante. &gt;A monopoly can typically be forced to produce at the competitive price and quantity, it doesn't mean they aren't a monopoly. If there are high barriers to entry and only one firm producing, its a monopoly, regardless of whatever you're saying. Although the qualifications to define such a monopoly is frivolous in this case, a "monopoly" which is unable to command a monopoly price is hardly a problem to anybody (consumers/producers alike). It's certainly not the problem we're facing in the American ISP industry now. Also, an advantage given to a company due to high barriers of entry does not itself constitute a monopoly. A competitive industry does not require an even playing field. &gt;If an ISP is not regulated, it doesn't mean the market suddenly turns perfectly competitive, it still only has one firm with a very large barrier to entry But it is competitive. If the firm continues to command a price which doesn't appeal to consumers demand schedules, other competition will make the effort to overcome any barriers to entry and undercut it. Therefore, large incumbent firms in a free market will lower prices and increase production to scare off competition to the point where they will no longer command a monopoly price. Just because it is difficult to enter an industry doesn't make it uncompeititve. &gt;I'm not sure that Austrian conjecture is enough to disprove foundation principles in economics. If you read some of "Austrian conjecture", you'd realize that a lot of the Neokeynesian/neoclassical/mmt/etc stuff popularized today doesn't accurately identify foundational principles in economics.
&gt; MMT uses a similar, arbitrary definition. And it is undeniable that Mill inspired future doctrines such as MMT. MMT has literally nothing to do with this at all, are you really trying to discredit a foundational economic principle because the guy who talked about it first may have inspired a heterodox group over a century later? &gt; And just because an econ book is literally newer does not make it more similar to MMT. The Austrian School studies economics in the classic Austrian tradition and is older than popularized schools of thought today. The book I linked in particular is a very important work because the author corrects the errors made by his mentor, Ludwig von Mises, on Monopoly Theory. You tried calling John Stuart Mills "modern economic theory" when he was long dead before MMT was even an idea. He's not a "modern economist", this is classical economics. &gt; So you are talking about profit? Firms will not operate in an industry unless they can do so profitably. Whether in the long run or short run depends on the time preferences of entrepreneurs and their abilities to achieve their predictions ex ante. Nope, firms will operate in the short run if variable costs are covered, and in the long term if their economic profit is $0 (as in, total revenue - total cost - opportunity cost = 0). It is very probable that a firm will be losing money in the short-run but stay in provided that economies of scale eventually allows them to enjoy a normal economic profit. Unless you are talking about accounting profit, which is irrelevant when making decisions based on whether or not to produce. Long run and short run also has nothing to do with time, but the variability of inputs. &gt; But it is competitive. If the firm continues to command a price which doesn't appeal to consumers demand schedules, other competition will make the effort to overcome any barriers to entry and undercut it. Therefore, large incumbent firms in a free market will lower prices and increase production to scare off competition to the point where they will no longer command a monopoly price. Just because it is difficult to enter an industry doesn't make it uncompeititve. A literal requirement for a perfectly competitive market is low barriers to entry. "Overcoming barriers" is a fiscal decision only made if advantageous, in situations with natural monopolies it rarely is. &gt; If you read some of "Austrian conjecture", you'd realize that a lot of the Neokeynesian/neoclassical/mmt/etc stuff popularized today doesn't accurately identify foundational principles in economics. Nothing I said was Keynesian, Neoclassical, or has anything to do with MMT (which is monetary policy, nothing to do with natural monopolies in this conversation). John Stuart Mill was around before Keynes, never mind Neokeynesian economics. A fringe heterodox academic cannot disprove over a century of economic consensus on such basic principles.
How do you figure? It has syntax highlighting, intellisense, debugging, go to definition. The list goes on. What do you think it is lacking?
What's that with comparison function returning boolean? Isn't it supposed to be an integer by specification? With `true` supposedly being converted to 1, meaning `a&gt;b`.
Yea. Nobody is claiming there is an issue aligning when you mix. The issue is that mixing them is awkward.
Doesnt redux already cover all of this?
Nah, automerge is more about getting two state objects and reasonably combining them. You could try to do it by hand in the reducer but it can get tricky fast
Thank you much, good sir. really appreciate it.
"Server less" is just a term to get people to buy into renting shared VMs. Is it worth learning??? You already know it. All you're doing with Server less is writing functions that then get instantiated on a shared server. Firebase is very simpe to use. You simply write node functions and then deploy them. Most of the solutions I've seen are node based, but there's others out there.
This is just anecdotal, but I see AWS Lambda in commercial use most often. I've mostly seen people using Firebase for personal projects. But again, this is just my experience, doesn't mean it's necessarily true across the board. And at companies I've worked for where we were using Lambda, it was really just for small one-off jobs, never for a full API. I'm skeptical that serverless will ever really replace more "traditional" server-based architecture for API's. I'd say that since you know express+mongo, it certainly can't hrut to learn some serverless stuff, from a developer standpoint, it's not really all that different. I think you learn more about architecture from traditional server-based approaches.
My rules for formatting, absent any other standard: Use tabs, and never ever "line" anything up.
Awkward how? I don't see how mixing them is inherently: 1. A downside 2. Enough of a downside to outweigh the benefits
&gt; Prettier does a pretty good job of handling this. i've heard a couple of folks mention that prettier can handle situations like these ‚Äî however i don't understand ‚Äî i don't think prettier does anything to visualize space indents at different widths? prettier is a formatter that supports either tabs or spaces i say prettier is great, and my argument is that tabs is a better choice for accessibility reasons
I agree that alignment is counterproductive. However, people will still do it and if they do, spaces are suitable for it. Tabs definitely reign supreme for indentation
I have created this JIRA CLI tool 2 weeks ago [https://www.npmjs.com/package/jirax](https://www.npmjs.com/package/jirax). Please review and suggest me if you have any?
One of Prettier's configuration settings is `tabWidth`. This can be used in a git hook to format project files pre and post commit. BUT, I do agree with your previous statement that things are never that simple and go "smoothly." There's always little things you've gotta figure out.
Hi All please review my github repo [https://github.com/junipdewan/jirax](https://github.com/junipdewan/jirax)
&gt; It's ironic that your comment formatting is a mess because you don't know what indenting does in Markdown. A bit of it has its own scrollbar. ironic yes, but relax, it's not me ‚Äî it appears that reddit is just poorly made my post actually renders properly on my desktop reddit client, so i'm assuming you must be using the app or something else, and i'm guessing reddit is literally so dumb that different clients have different markdown rendering rules it's hard to debug when i can't reproduce the problematic results
What you just commented sounds right but with Chrome, a comparison function returning a boolean is ignored and no sorting occurs at all, while with other browsers such as firefox accepts it. I wrote the code examples in that way to just focus on how Chrome does the preprocess step, not the sorting itself, and how it is different than V8 blog shows and I want a clarification if that blog didn't explain the oddity my post explains
&gt; &gt; would you personally rather be in the predicament to work on a tabs codebase, or to work on an 8-space codebase? (or whatever's opposite your preference) &gt; I'd rather work with well-maintained tabs than whacky-choice spaces, but I'm not sure that's a very interesting point. it's interesting, because it illustrates that the moment you disagree with the indentation width, you suddenly prefer tabs so when your preference is on the line, you want tabs but when somebody else's preference is on the line, you want spaces isn't that sort of selfish, privileging your preference over others?
This is actually my video, someone sent me a link as I didn't even know this thread existed! but yeah my main problem with programming is typing too fast and spending ages trying to figure out what I've misspelt üòÇ
We've all been there...
I'd give suggestions as it's actually my video but I did it that way as it's just the first thing that came to mind...
Ah, I see. Look at https://old.reddit.com/r/javascript/comments/c8drjo/nobody_talks_about_the_real_reason_to_use_tabs/esr3s9r/ Turns out Reddit doesn't know what indentation does on Markdown either. And neither do I. I'd expect *most* of your comment to be rendered preformatted, new.reddit thinks *none* of it should be, old.reddit things *some* of it should be, and who knows what mobile clients think.
Yeah, pretty much what 20CharsIsNotEnough said, I only created the UI, but who wants to sit and watch me create the back-end really? You'd be able to re-create this easily I'm sure!
Try it, I'm sure you'd be able to do it!
I have no idea but it is GitLens that I used.
I'm just a lazy person doing a difficult job üòÇ
I took pretty much your exact same route, I learned Express with Mongo and now I've been using Firebase for over a full year. I think it's really up to you. With Firebase you don't really have much to learn, I started using it because I wanted a quick way to prototype an app and Firebase is to this day the best option to do so (I looked at a few like Stitch, Backendless, Back4App, Kinvey and Kumulos). If you have website ideas that you want to develop on your own Firebase gives you a massive help in doing so. I don't think it's worth learning it purely for adding that knowledge to your CV, since it's not really something that hard to grasp and you may be better investing your time in more complex and popular solutions among modern IT companies, like AWS. Oh, and if you're worried that it doesn't scale well and it's only used for small scale or personal projects, you don't have to worry, it's a common thing some back-end developers claim to discredit it: if you use the wappalyzer extension you might come across some quite big websites that use it, first that comes to mind is [op.gg](https://op.gg) which handles its massive user base just fine, and runs purely on Firebase. One of the biggest cons I found is that it doesn't really support complex database queries, even with Firestore, so sometimes in order to retrieve some heavily relational data you have to run multiple queries and store the results every time, which quickly depletes the memory you have available in your functions and increases the response time. Also, Firebase is made by Google, and as you may know some people can't really stand having their app rely on Google's servers.
I think moment is a bad example as when you call moment() you create a new instance every time, the same goes for jquery, every time that a selector get used it creates a new jquery object instance...and IMHO singletons are not a bad practice if something they help you to abstract more.
&gt; I have to wonder if it would be easier to find/write a plugin for the IDE to parse spaces like tabs. you've hit the problem on the head, exactly no, there is no way to make a good algorithm to convert spaces to tabs, nor to visualize space-indents at different widths ‚Äî it cannot be done well, because you can't distinguish which spaces are for indents, and which are for alignments this is why IDE's don't have this feature, it's brittle and error-prone ‚Äî it mangles code many spaces people in this thread have been saying "the less-abled are a minority that should use their own custom tooling" ‚Äî the hope is that the tooling required is trivial, and so the less-abled could simply view space-indents at different widths and proceed with their work ‚Äî however this is exactly the problem, and it's a super important point in favor of tabs, which spaces people try to handwave away it turns out, spaces-to-tabs is it's not trivial ‚Äî it's super complicated, so much so that nobody has ever implemented a good solution, and fundamentally, it doesn't look like anybody ever will &gt; AST to group spaces to preserve indentation okay, now you're truly going down the rabbit hole! and i'm glad, it needs to be thought through ‚Äî but now think about the magnitude of implementing this monstrosity okay, so you're visually impaired, and your coworkers say "just go implement your own AST spaces-to-tabs algorithm", so off you go and write this javascript monster that can seamlessly distinguish space-indents from space-alignments, outputting beautiful tabbed code (good luck) okay, but now the team wants to use typescript are you going to implement a new AST monstrosity for that language too? how about html, css, ruby, python, swift, etc etc etc...? you see, it's fundamentally not possible to create a solution that works across languages, so you have to implement is specially for each case i mean come on, is it even remotely reasonable to actually ask the visually impaired to design and implement all of these tools? are you even grasping the magnitude of this project? how is this horrendous workaround a reasonable substitute for simply using tabs, which can accommodate everyone's needs and preferences? &gt; Sounds like an opportunity for the visually impaired community, to me. it's clearly not an opportunity, but a terrible curse! &gt; Even companies using mono repos would face the problem of reviewing all of the changes. It just doesn't seem safe or practical, in my opinion. now look, i'm not saying you need to go and be the champion of code quality and refactoring at your company ‚Äî maybe just keep your head down, i don't know but i will say, it sounds a bit like development there is stuck in the gutter there will be many test suites to verify the code hasn't broken ‚Äî the idea of having humans manually comb through every file that was converted to tabs is absolutely hysterical there's nothing worse than a dinosaur codebase that everyone's afraid to refactor because everything's become so horribly brittle ‚Äî you want codebases to be malleable and resilient ‚Äî it sounds like you're describing a smoking trashpile of a codebase i personally refuse to work on codebases which are not regularly refactored, and confrontations about those situations in the past have lead to promotions for me &gt; You talk about spaces as 'bleeding ' but I disagree. no no, sorry, i've just confused you by accident ‚Äî i was meaning that allowing spacebar alignments of parameters is the "bleeding" ‚Äî that problem applies to tabs and spaces codebases alike i appreciate the conversation, and have no doubts that it's likely not worth the uphill battle to convince your company to convert to tabs, and that's fine... there are old codebases that can stay the way they are i think it would be best though, if tabs were regarded as a best practice for future repositories, for the sake that it's the best option to meet everyone's unique needs ‚Äî and that people start to realize that you can't just magically use tooling to "make spaces act like tabs" to solve the problem
hahah, oh man what a monstrosity, glad we're figuring this out to some degree interstingly i noticed that in my message box area of reddit, (clicking 'show parent' on your comment) shows my comment with the incorrect formatting.. so at least with my account's preferences, threads are shown in "new reddit" and then the message box area renders in "old reddit".. disgusting, we need people who really write software to develop the websites we talk on ‚Äî i mean, don't they have *one* job? this whole damn website is basically about rendering markdown! /rant ;)
Interesting. According to the spec, any comparison function that is not deemed consistent (one of the requirements being returning Number's), the sort order is implementation defined.
False premise. Singletons are not evil and they have perfectly valid use cases. Or are you seriously arguing that every time you import a DB connection you should create a separate connection to the DB?
That really depends on the database, size of data pipe etc. In some rare circumstances yes definitely.
&gt; I think moment is a bad example as when you call moment() you create a new instance every time, the same goes for jquery Can be yes. Did not check the libs but you know what I mean ;) &gt; and IMHO singletons are not a bad practice if something they help you to abstract more. Yes me too but the whole idustry told me ten years that static and singletons are bad practice.
Adtech!
Follow up: HTMLFormElement also has an [`elements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements) field that already contains all of the form's elements (internal and external), so no querying is necessary at all :)
&gt; This is contrary to my experience. I see much more broken indentation in projects using tabs than with spaces. Tabs (usually) work where people work to enforce quality and everyone involved is on-board or review is sufficient to counteract the careless, but most projects are not that. i'm only familiar with teams that treat code quality as a top priority, so that might be where experiences differ i think the supposed "noobs will wreck it" issues with tabs hardly exist to begin with, but even if they presented a problem, these are easily overcome by basic training and just requesting rudimentary quality standards from contributors it only takes one or two rejected pull requests for a young developer to get their act together, and start rendering visible whitespace and becoming cognizant of how whitespace works on the most basic level ‚Äî this is a coming-of-age hurdle that shouldn't be delayed i actually think that any contributor that doesn't understand whitespace should be blocked from contributing until they are ready to enter the world of programming ‚Äî i fear that coddling a group of noobs and not exposing them to the world of whitespace, just might actually create a group of luddites ;) when the fear is that the team is so bad, they can't get the tabs right ‚Äî i just don't even want to hear about how to accommodate them, i fear it will rub off on me
&gt; One of Prettier's configuration settings is tabWidth. ah, but that doesn't do anything to show space-indents at different widths, it does something else so unfortunately prettier is not helpful at all, to the visually impaired, for viewing space-indented codebases however prettier is a good code formatter
I think you‚Äôd be surprised re: it not replacing entire servers for people. Firebase/Lambda + access management permissions is becoming extremely popular
Wow, that's cool! I didn't know such property exists, thanks for sharing!
&gt; if you don't already use pre-commit hooks, you've got bigger problems Don't exaggerate. I've never used a pre-commit hook in my life, and that's never caused me a problem.
The first one is human readable. Are you sure you know what that term means? Your second example is what leads to excessive diffs.
Firebase authentication is the cheapest (and I‚Äôd argue, easiest) ‚Äúoff-site‚Äù user authentication system. Firebase‚Äôs Firestore is an extremely scalable/fast database (also, cheap) that doesn‚Äôt require you to manage your own database server. If you‚Äôre okay with the very ‚Äúloose‚Äù database structure (I‚Äôd argue in some ways it‚Äôs even looser than something like mongo) it‚Äôs a great choice. If you need SOLID, it‚Äôs obviously not an option. Firebase functions are extremely easy to deploy and manage (and again, pretty damn cheap). Firebase really shines in situations where you don‚Äôt necessarily need an entire server - for example React Native (or any native) apps, or if you‚Äôre just building out a prototype. It‚Äôs not going to fit everyone‚Äôs needs, but personally I find it to be an extremely valuable piece in my toolset. That being said - this is a new opinion of mine; for a long time I refused to use any services but the authentication. With the introduction of firestore, however, I‚Äôm now happy with their database offering and extending that out to the cloud functions just makes sense now since I‚Äôd be putting them somewhere and it makes more sense to have it all managed from a single dashboard/project.
Thanks, man! I'm using Gatsby + Netlify. I designed the theme from scratch using Figma. All the code is open- source if you're interested [https://github.com/stemmlerjs/khalilstemmler-website-2019](https://github.com/stemmlerjs/khalilstemmler-website-2019).
I'm glad it was useful, cheers!
i'm glad you put in the time to generate that example it perfectly illustrates this simple misunderstanding you've created an example of how *not* to align things when using tabs, let me explain it may seem annoying, and this is where using tabs can be more genuinely more complicated (only insofar as you insist on alignments) - first, it must be noted, that generally it's an anti-pattern to align things with spaces *at all* - it's hazardous and wrecks code when you use refactor tools, like rename operations - so really, we all should abandon spacebar alignments for their own reasons - however, i'm going to show you an example of how to do it properly anyways (not that you should) haven't you heard to old adage? "tabs for indentation, spaces for alignment" in your example, you were using a tab *after* a non-whitespace character ‚Äî *but that's against the law!* tabs-people already know not to do this, but there should be a linter rule to guard against it anyways to do this right, you have to enable visible whitespace in your editor to make sure you don't accidentally confuse tabs and spaces in the following example, i'll demonstrate how to use tab-indentation and space-alignment in a way that allows a flexible tab-width display, but the alignment still stays aligned properly ‚Äî this is how all tab-people write their code, if they decide to align things in the following example, i've rendered tabs as arrows and spaces as dots // source code // tab-indented, space-aligned function activeWarpDrive() { ‚Üí chargeLasers(alpha, ‚Üí ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑bravo, ‚Üí ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑charlie) } // displayed at 2-space // notice that bravo and charlie stay aligned function activeWarpDrive() { ¬∑¬∑chargeLasers(alpha, ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑bravo, ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑charlie) } // displayed at 8-space // notice that bravo and charlie stay aligned function activeWarpDrive() { ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑chargeLasers(alpha, ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑bravo, ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑charlie) } so this is how tabbing and alignments coexist :) however, again to reiterate ‚Äî **alignments are just a bad pattern,** it would be way better for maintainability to do it like this instead: function activeWarpDrive() { ‚Üí chargeLasers( ‚Üí ‚Üí alpha, ‚Üí ‚Üí bravo, ‚Üí ‚Üí charlie ‚Üí ) } cheers, üëã Chase
&gt; it's interesting, because it illustrates that the moment you disagree with the indentation width, you suddenly prefer tabs Not really, because the question is basically tautological. An option I've used for decades vs a shapeshifting chimera that's always precisely *opposite* (i.e. very far removed) from any preference I have in any given context. It doesn't mean I wouldn't find some variation acceptable, just that at the extremes tabs would be better. &gt; isn't that sort of selfish, privileging your preference over others? I mean, that's more or less what using tabs as a Ruby developer was doing. The community consensus has always been behind two-space indents and avoiding hard tabs, to the point at which it's basically a hardcoded rule in one of the most popular linters. But most Ruby developers would probably prefer a tab they can adjust to a codebase with 8 space indents - basically the opposite of the community style.
Python
&gt; just that at the extremes tabs would be better. well that's the whole point of the greater argument there are people who actually have the misfortune of living at those extremes thus, as you say, "tabs would be better", and forcing spaces is less fair/considerate &gt; Ruby ruby's choice is unfortunately bad for accessibility, and there are many of reasons that i don't use ruby at all ‚Äî hopefully when in the future when ruby reconsiders tabs, they will look at the accessibility argument and make the right choice this is the javascript subreddit, i'm concerned with new open source javascript projects
They are useless/anti-pattern like bitwise operators are useless/anti-pattern - they are not used by any mainstream design patterns or application architecture Language syntax need to be leveraged by higher level patterns, otherwise it is just some uselt feature. In C# they are leveraged by MVVM, but none of the popular JavaScript frameworks are based on MVVM. (Getter/setter occupy the same space as event/actions/rxjs pattern in JS frameworks)
IMO No. The primary use case for managed services is because you estimate setting up your own server and database is going to be more difficult than using serverless tools. If you are already comfortable with tools you can host yourself, you are in a better position than having to learn a big companys service (which they might drop at any time). This is assuming your motivation is to deliver products more effectively - if you feel like you need this to get jobs in your area that's a different topic.
It's not possible to do either in JavaScript. Singletons are defined by being restricted to a single instance. There is nothing to stop you from doing this: import \* as vue2 from 'vue'; So this is not a singleton. There is also no way to create a static class - to share state across multiple instantiations of of the same class. I think you are misunderstanding both of those terms and how JavaScript works.
&gt; I think another solution might be some kind of package just for people with accessibility issues. They can configure it so that when they pull from a repo and open something, the file is changed to be easy for them to work with. When they push their branch to the repo, it would go back in the same format it was pulled. If that makes any sense. absolutely it makes sense, and sounds nice, but unfortunately ‚Äî it's impossible there've already been a few discussions about this problem elsewhere in the thread, but i'll try to summarize the problem - spaces people keep hoping that it should be trivial, to convert between spaces and tabs, and automate it with git hooks, such that we get a seamless experience for the impaired - first, it's kind of hilarious because it's an amazing amount of workaround just to get spaces to *act exactly like tabs* - second, it's actually not even possible to write this tooling: the problem is much more complicated than people assume at first glance. why? - your spaces-to-tabs algorithm can't distinguish indents from parameter alignments - that's a checkmate, because you'd have to write an ast-parsing monstrosity to overcome it - worse yet, your monstrosity would only work for *one language* - so what are you going to do, write a full set of spaces-to-tabs converters for every popular language out there? it's just ridiculous - this is why no editors have this functionality - if you were to write a language-agnostic solution, i'm sure the whole community would be mighty glad... good luck so unfortunately, much to the dismissal and misunderstanding by the spaces crowd ‚Äî no, people with unique needs for tab-width cannot just "use some tooling" to "fix their problem"
So, I've never felt webstorm as slow or heavy, so I cannot go for the 'lighter' reasoning of vscode. The only meaning for 'light' I think regarding vscode is 'comes with less features and requires a lot of plugins'.
I don't think this is an accurate statement. They're used in MVC architectures like Angular, and they're extremely useful with the proxy object. One example of that would be immer. Both are mainstream I would say.
I'd use firebase for small projects or proof of concepts that need to be done quick. Prototypes and stuff. But for scalable and bigger projects I'd go with your usual stack.
Why don't you just parse the data from your backend and parse it as json?
I agree with this statement (been doing JS professionally since mid 2000's). I have yet to see a use case that's not obfuscating something that could be clearer with a regular method. I suppose there's an argument for using this deep inside a framework, but not in any code that your teammates will ever have to read, please.
You can use getter/setter for simple component interactions in Angular, but for complex the Angular tutorial literally mentions [you should consider use ngOnChange](https://angular.io/guide/component-interaction#intercept-input-property-changes-with-ngonchanges) &gt; You may prefer this approach to the property setter when watching multiple, interacting input properties.
+1 for Firestore. I came into it the opposite direction - never heard of Firebase, wanted to use GCP's document store, and found out they're [deprecating it in favor of Firestore](https://cloud.google.com/datastore/docs/firestore-or-datastore). Speaks highly of the service that they're phasing out GCP's document store for it. Still needs better integration for GCP natives though.
Bitwise operators isn't useless noob.
Because having multiple interacting properties mean you can't really do a change logic in multiple setters. Setters/getters have limited use but they have some. And bitwise operators are definitely not useless for performance.
There was too much clutter in my opinion. It also felt to heavy. I'm the kind of guy that likes to shut off programs when Im done. Webstorm has a loading screen, vs code just turns on instantly. I did like the merge tools that came with webstorm but I don't get many conflicts now days and when I do I just use gitkracken.
As a general rule of thumb I avoid using getters in typescript unless there is a strong use for them. Put yourself in the shoes of a developer reading the code and consider these two situations: 1. You see something like `obj.foo`. You need to know what's going on inside of it, so you go into the class definition for `obj` and look at the top for a property called `foo`. You don't see it. Instead, it's defined somewhere else in the class as `get foo() { ... }`. Right out of the gate, you have made your code more confusing, harder to read, and harder to follow. Don't do this with your code. You will only hate yourself later. 2. You see something like `obj.foo`. You assign a value to it: `obj.foo = 'Hello, World';`. You go read the value out later, and it comes out as `hello-world` instead of the value you assigned to it. Congrats, you made your code more confusing, harder to read, and harder to follow. Getters and setters have their place, but they should be treated with care, because they are a kind of language-level magic that *does* add more cognitive overhead to your code. The more cognitive overhead you add, the harder it will be to follow code and understand what's going on. For this reason, I use getters and setters in TypeScript *sparingly*.
Python would also be my choice. It is ‚Äúeasier‚Äù and more beginner friendly. It is also a good choice for data analytics. And there a ton of resources available.
All over Reddit, I see assertions that there are no uses for blockchain other than gambling, drugs, and speculation; that there are already real-world alternatives to the trustless system of blockchain that work just fine (e.g. escrow, pen and paper, merkle trees/Git). Serious question: Does this implementation buck the trend as a novel, and legitimate, use for blockchain?
Learn to read. It is a figure of speech.
setter/getter Bitwise comparison is a figure of speech. All the JS/TS linters would complain about its usage, even though there are definitely use cases for them
Awkward because changes are non uniform. If you make a change that requires realignment you can‚Äôt just click anywhere an hit delete, you have to find the right thing to add or replace. You also have to figure out *what * to replace, because you might need a tab or a space. And whether you need a tab or a space will depend on the tab-width in your editor. If you use spaces at the wrong time then someone with a different tab-width may not see them aligned. What is the right time? Well it depends on so many alignment factors it‚Äôs not always clear Also, if you have visible white space it looks odd to see where the tabs stop and the spaces begin. All of the reasons are cosmetic, but since we spend a lot of tike looking at code we tend to care a lot about what it looks like. You‚Äôre probably right about the benefits not outweighing the costs. But I can‚Äôt see how tabs can claim the cosmetic benefit. That one is clearly in the spaces favor. Spaces will always look correct, always be aligned, and always look the same. Tabs can be unpredictable when mixed with spaces, but they *must* be mixed to even attempt alignment.
Use the best tool for the job: * If you are making GUI, JavaScript is the prevailing language * If you are analyzing data or doing symbolic math, Python is the prevailing language * If you are implementing hardware drivers, use C/C++ * etc There are gray areas like implementing (micro)services, but you can look into frameworks/libraries available and figure out the right language to use.
I loled
None of this prevents you from injecting dependencies like fs and vue in your own code. And dunno about Vue but `fs` isn't an "instance", it's a bunch of plain functions. You could easily write your own `fs` mock/replacement. Things really shouldn't be "instances" unless they really need to be. If a library can be all plain functions then it should probably be written that way.
[removed]
[removed]
Buddy‚Ä¶ You are weird. You apparently have no idea why tabulation exists. Indentation was never the initial purpose of tabulation. It‚Äôs about creating table-like structures, hence name table/tabular/tab. All this stuff you wrote, makes no sense whatsoever. Absolutely nothing is gained by reading it. We have all become more stupid for having read it.
I actually like getters.
[removed]
If there is no such thing as a session cookie anymore. Is it time to just make all of them with an expiration date?
FYI they plan on updating the library this week: https://github.com/lodash/lodash/issues/4348#issuecomment-507794266
I take the same stance and only use getters when I really need them However your first point, just control click foo in any decent editor and be taken directly to the getter function
Yeah redux can get tricky when doing this. I have tried to use the automerge doc as my state and just performing actions on it. So far that seems to be working but if there is a better approach, I am all ears. :)
Same vuln as a year ago, probably should have added tests for all the merge like methods. https://hackerone.com/reports/310443
If it's an Angular HTML template though, you can't really ctrl click into it. So you see `{{obj.foo}}` and you have to find it manually. At least in VS Code that's the case.
Dude sure the domain your pulling from might be different but my point is the package is still the same exact fucking package you would get from npm.
In WebStorm you can click in and out of variables/methods in Angular HTML templates. There is probably a plugin for VSCode
Look at the back end code and search it for all .pdf extensions?
```[...document.querySelectorAll('a')].filter(v =&gt; v.href.endsWith('.pdf'));``` Might work, but I have no idea what site you're looking at :\^)
Yes, what he needs is a crawler that lists the files. Also you can try Google dorks for that, url:www.bla.com file-type:PDF something like that was the syntax I think.
Definitely use Python
do you know any roadmap to help him?
Good call. :) Lol google dorks.
Great start! That's actually a pretty complex task to tackle in just your first few days of JS. If you haven't gotten to arrays or objects and array methods then you will soon. So if you revisit this, you could maybe do an array of objects, something like `let teams = [{name: 'John', scores: [20, 20, 20], avg: 0}, {name: 'Mike", ... etc}, {name: 'Mary', ... etc}]` then iterate over the array and calculate the averages, and sort them according to `teams[index].avg` to rank them from best to worst. Don't worry if any of this doesn't make sense yet. It will as soon as you get there in your study. When you do you'll be pleased that you can turn what you wrote above into just a few lines using arrays and array methods and not need to make individual variables for each score.
It's not the same vulnerability; last year the vulnerability utilized `__proto__` and this one uses `constructor`. Same _type_ of vulnerability, sure; but how would have adding tests helped? This was not a regression.
I agree with your code suggestions from a theory and general practice standpoint and I wholeheartedly advocate code to look like your examples in almost every case. My example comments are used as dirty overrides for diagnosing network issues and normally I'd layout lines properly with comments above and without magic numbers but the way it is currently written in the context of the problem still makes the most sense. It might be a little hard to justify unless I showed you that context in person because I can't post all of the code on here. I'll still try to explain anyway. The Lines: The diagnosis lines are kept in as few lines as possible while still looking tidy to stay out of the way and yet still be aligned with the rest of the code. The reason I picked that code chunk to post, is because it was a useful case of showing how text inside comments can be aligned with spaces to increase readability but I now realise that I didn't show the greater context of why the comments were put in that layout in the first place. Personally I'm not a fan of the 1-line approach except in those few cases where it makes sense like this one but again this is hard to show since I'm unable to upload a function of a closed source project to reddit. I can say that it's the kind of thing where if you were to look at the function as a whole you would immediately see it and go, ah that makes sense. Comments aside, the actual calls when they're not being overwritten make a lot more sense stylistically: const ByteRangeInPoint = chunkNumber * chunkSizeInBytes; const ByteRangeOutPoint = (chunkNumber + 1) * chunkSizeInBytes - 1; request.setRequestHeader('Range', `bytes=${ByteRangeInPoint}-${ByteRangeOutPoint}`); The Magic Numbers: This one I can explain properly. It's would be easy to replace the magic numbers with a small run-time calculation and normally I'd do so. But while I'm diagnosing those weird issues I need to be able to copy-paste those magic numbers manually into hand-written http request/response headers for both a testing server and client. You can't send a run-time calculation through a header and have it be understood, so it's pre-calculated and placed by hand so I can quickly select it and copy-paste it. Also that off-by-one error is intentional, it's to trigger something external to my code example.
I completely disagree with you. Especially in TypeScript, where there is proper syntax for access modifiers, getters and setters ***should*** be exactly how the rest of your code interfaces with class instances.
Not sure what your point is here.
&gt; Right out of the gate, you have made your code more confusing, harder to read, and harder to follow. Don't do this with your code. You will only hate yourself later. I disagree with this. It neither confusing nor harder to read and follow, it's expected and easier to read and follow. &gt; You see something like obj.foo. You assign a value to it: obj.foo = 'Hello, World';. You go read the value out later, and it comes out as hello-world instead of the value you assigned to it. Your 2nd point is a bit silly as you're essentially arguing against the use of class methods.
Sorry, but I disagree. When I see `obj.foo` and `obj.foo()`, I know they are fundamentally different things with fundamentally different behavior. When `obj.foo` is actually masquerading as method, the code is *objectively* less clear to follow. The bottom line is that if you're using a getter, just use a damn method call instead so that the intent of the code is more clear. I truly cannot think of a meaningful reason why you would want to do `public get foo() { ... }` and `obj.foo` instead of `public foo() { ... }` and `obj.foo()`
It is being generated on the backend, and passed to the frontend as a Python dictionary. The user is able to modify the data (in the tables) and I'm wanting to read the data back as a JSON object, and pass it back to the backend. I have functions that generate the JSON I'm looking for from the 1st column, but I'm having an issue even getting a reference to the Attributes/ Values columns. I just can't seem to find a way to read the data back.
... Space... Bar? But more importantly, you realize people that advocate for spaces over tabs still press tab? We just have our IDEs configured to replace tabs with 4 spaces.
Because I hate it that the code I write looks different in my ide, my diff tool, my Github account, and my coworkers ide. Spaces allow precision of alignment, and consistency across every environment. The accessibility argument is a good one, I also have not considered it before. But honestly if you are visually impaired alignment is the least of your concerns. So if we optimize development practices for the 0.001%, then we might as well abandon all indentation, and call all variable names "a","b",etc. I'm sympathetic to the disabled professionals, but tab stops is a micro optimization.
Fair enough, and thanks for the explanation!
codewithmosh.com Python course is in depth and he teaches industry practices not found on Youtube. I also recommend the tutorials on python.org aswell.
When you want to control access to a property. You could either have functions which are getFoo and setFoo or just use the features `get foo()` provides you.
Hi /u/HQ189, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/innovert, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I use getters all the time, because my IDE supports jump to definition and I never have to think about the difference manually.
That still sounds like GitHub's fault. It's not the developers fault that setting the tab width via the URL is painful. If GitHub used a sane default value for the tab width and let you override it in personal preferences, you would almost never need to override it in the URL.
This is a common misunderstanding. There are two different types of white spacing. Indentation and alignment. Just because you use tabs for indentation does not mean you need to use tabs for alignment.
&gt; Sure, but it's nice to be able to read this.config.value And then when some other engineer has to look at your code, they have to do mental mapping between `this.config` and `this.configService.get('&lt;package&gt;')`. When debugging, refactoring, or adding new features, their first instinct is going to be "ok, where is `this.config` getting set? Well, it's not. It's actually a magic function call. It's one extra step in understanding the code that they shouldn't have to do. If it's state, make it a property. If it's not state, make it a method. Simple rules for simpler code.
Python rules everything around data science. Plus it‚Äôs easy to learn.
Thanks for sharing! This is even more reason / motivation to use native APIs as much as possible, or stub additional functions you need directly in your own project
There are some Angular extensions in VS Code that let you control-click into a class property from the html template.
Probably very difficult to do, sadly. Permanent backward compatibility on the web is a double edged sword. How many sites would break if this behaviour changes? (and how can you even know that for sure, without doing so?)
Richard Hendricks was right :D
As a NeoVim user, I hate when languages basically rely on their editors to magically manage all the pains of using the language or it‚Äôs features. Sure, there is probably a plug-in I can use for that, but it‚Äôs become very eye-opening‚Äîif your editor has to hold your hand to make a language construct feel tolerable, I just don‚Äôt think it‚Äôs worth using that feature. Getters in particular are often totally unnecessary 95% of the time.
Not showing in code, but they are accessible with direct link.
Certain browser will optimize number operations if they can be sure the number is an integer and not a float (although normal numbers are implemented as floats under the hood). Using the bitwise OR operator with zero (e.g. `let a = (b + c) | 0`) will truncate a float to an integer. It‚Äôs the same as `Math.floor()`, but faster due to the lack of a method call. That‚Äôs just one use. I‚Äôve seen plenty of other uses, like in hashcode functions or image processing. Just depends on what you are trying to do. Sure, it never makes sense unless the performance really matters.
I'm not sure I understand you, you said you use TypeScript, so it will warn you anyway if you try to access a missing setter. 1.) Can be solved by proper tooling, which IDE are you using that it isn't able to jump to the getter definition? 2.) If you `use strict;` this scenario will throw an exception instead, but again this can be improved with proper tooling as it would warn you that there is not setter.
I have been writing web development since 2003. I am aware. Before IE7, large application (few thousand lines) would lock up the browser, you basically had to use bitmask to optimize Boolean operations in for-loops of a few hundred elements
Correct.
 thank you for your answer :) It‚Äôs a wordpress blog that hides content behind paywall, so the links are not shown in source code but I can acces pdf files if I enter url. So, If I enter www.example.com/wp-cotents/12/06/example1.pdf It shows me pdf file.
!important
Looking forward for that. John has been amazing through-out the disclosure process and I'm confident he'll be releasing a fix soon enough (open source is hard) ‚ù§Ô∏è
So much code and so many key libraries hinges on this heavy set of modules. Not a great situation.
It is called "destructuring" And basicly is equal to Const createClient = require("xen-api").createClient It just grabs whatever is exported as createClient not the default export
[https://github.com/lukehoban/es6features#destructuring](https://github.com/lukehoban/es6features#destructuring)
It can get pretty complicated. There are many ways to do it. What is the link showing the pdf files?
Something that you require is a library or an API that may expose different functions. Let's say this xen-api, whatever it is, has the following functions for you to use: `createClient()`, `editClient()`, and `deleteClient()`. Suppose you only ever need to use `createClient()` in this particular case. Should you import the while library like this const xenAPI = require('xen-api'); and then use it like this? xenAPI.createClient(); You could. Or, you could only import the function that you need, using the object destructuring syntax. const { createClient } = require('xen-api'); This creates a variable and populates it with one of the functions that xen-api contains. Here is another example: const kings = { a: 'Otto', b: 'Sigismund', c: 'Lothar' }; const { a } = kings; console.log(a); // Otto
I'm note sure what do you mean by what is the link showing the pdf files ? it's a pdf file link, so for example, [www.example.com/wp-content/uploads/2017/10/examplefile.pdf](https://www.example.com/wp-content/uploads/2017/10/examplefile.pdf) So, if I click from a site to access that file, I can't, but If I enter URL directly pdf file opens in browser.
Why not just use standard http codes? Do you really need custom errors?
Honestly, firebase functions are a pain to properly debug sometimes. I had some very weird situations usign express with it, and I also remember not having a way to replicate everything 100% locally. There's also some delay in which you don't know if your changes were applied or not. I believe it has potential to be better, the concept is good. At least that was my impression. Other than that you are pretty much spot on.
{ Success: Boolean, Error: string/null, // if no error, null Response: obj // may contain stack Trace on error, or object on success } Sorry for formatting, on mobile
If i only manage to get my crypto currency miner info one of the bigger packages like lodash i would be rich ...... Serious the deep package dependence‚Äôs in npm is frightening
congratz to the Snyk team. one hell of a promotion :)
Just use ramda
"Are they useless?", no of course not.
I think you make that way more complicated than it is. Perhaps you don‚Äôt think of indentation and alignment separately enough? If I make a change that requires me to change my alignment (perhaps I refactored a method name and now it‚Äôs 3 characters longer), I just add three spaces from right before the first character in my line. If I make a change that requires me to change indentation (perhaps I put my existing code inside a new if statement), I hit Tab to change my indentation (or, usually, my editor automatically fixes the indentation). I don‚Äôt need to make some complicated decision on which to use. It‚Äôs Tab/Shift+Tab for changing indentation and Space/Backspace for changing alignment. &gt;And whether you need a tab or a space will depend on the tab-width in your editor. &gt; &gt;Tabs can be unpredictable when mixed with spaces Not if I consistently only use tabs for indentation and spaces for alignment. [OP posted an example here](https://www.reddit.com/r/javascript/comments/c8drjo/nobody_talks_about_the_real_reason_to_use_tabs/esn3kqp/) about how the alignment looks correct regardless of your tab-width. I agree that the mix of arrows and dots looks weird with visible whitespace but if anything, being able to clearly see where the tabs end and the spaces begin makes the indentation level just more obvious.
Ah yes because you surely would have covered this security vulnerability in your home rolled utils project
Use HTTP codes to indicate the general response state (e.g Success, Error, Unauthenticated, ...etc). Then if you want to have some kind of error reporting &amp; management you could attach some error code of your own to the response (so in the case something unexpected happens, the client can then give you that code and you can trace it from the server logs/whatever error reporting setup you have). &amp;#x200B; The reason you wouldn't want to add specific error messages directly to the client is mostly due to security. You generally don't want the client to know anything about how they can break your system with specific inputs, unless you are in a controlled environment.
Well done npm!
There's a research that shows that on average the depth of package dependency chain on npm is 4.39 packages deep. If you're interested in more of these insights I wrote about it: [https://snyk.io/blog/how-much-do-we-really-know-about-how-packages-behave-on-the-npm-registry/](https://snyk.io/blog/how-much-do-we-really-know-about-how-packages-behave-on-the-npm-registry/)
Hi /u/mominriyadh, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/baruchashem2, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
He might want to check out R &amp; RStudio.
That's all true. At the moment, though, tabs are a pain for me - that's all I'm saying. I prefer spaces for these reasons.
My attitude towards indentation is completely indifferent: I don't care what we use, as long as it's consistent across the project/team. If some people want tabs for accessibility reasons, by all means, the project should use tabs.
The core consensus protocol for Wavelet makes it all the more possible since we are able to handle 31k+ write operations per second, scale to a network of any size, and support smart contracts/dapps. However, there is still quite of bit of work right now before Wavelet is fully ready for use in production. One thing we are working on as I write this comment right now is the following idea (snippet from our Discord): "Just an interesting thought I and the team wanted to get all your thoughts on - what do you think about allowing for an option for gas/transaction fees for smart contracts to be paid entirely through a pool of PERLs provided by the contracts creator? This would also allow alternative options like allowing for users to send PERLs to a smart contract, to effectively crowdsource funds for gas fees to allow anyone to invoke said smart contract."
Thanks. I just hate it when I do a npm install in a project and it pulls down 500-1000 packages. From my POV as QA that means there is very little control on the deep what‚Äôs really running. Not to mention we are inheriting all issues the package got. Now I have been in the biz long enough to know why we use NPM as inventing the wheel every project is stupid. But the risk of getting something malicious in our system is not good. Still I know of no other/better way then be really strict in the dev team of what packages they may add.
Yep, that's a security risk we have to assume when we're pulling all of that and to do our best to vet it. Manual due diligence isn't realistically possible which is why there's a need for great tooling to do that. Are you currently using any software composition analysis (SCA) tools to get visibility into this information of which packages are used by teams, etc?
Or a lazy person not even completing a job.
It really depends on you, whatever you feel easy and reliable should be the response object. Mostly I use a following signature: ```js { error: boolean, error_code: number, // if error = true, what is standard code reason: string, // if error = true, it should contain the error reason data: any, // it contains the actual data needed } ```
I can‚Äôt talk about my clients because of NDA. ;(.
As I said, I take the same stance and rarely use getters. However, practically every language has getters so I can't agree that languages are relying on a good IDE to make things tolerable. Plus, its not just getters, every thing works with ctrl click (or ctrl b if you dont like to leave the keyboard in Jetbrain products). There is no hand holding here, you are simply leaving productivity on the table by manually navigating to even the most simplest parts of a language
[removed]
lol..."job", ok.
Interesting project and all, but it's all Java
oh, little bit embarrassing :)
Likely no, but when it comes to library usage, it is a good idea to truly consider whether the library is needed by evaluating which features are being used. Using libraries carries an opportunity cost that should always be considered
Understood. Happy to connect and consult with you if this changes for other projects you will be taking on. Goodluck! :-)
Thanks. Normally clients are not so secret but when they are im not going to risk my contract for Internet points ;).
Yeah costs like great documentation, great test suites, a wide community, and vulnerability testing! Oh wait...
This is lodash, the most downloaded library for good reason. It's very stable, very secure (as you've seen here their response was immediate), very performant and incredibly useful. Using it (**or parts of it**) is a no-brainer for most medium to big sites.
I used a small geometry math library once to do some basic geometry algorithms and around a year later they discovered a critical security vulnerability in the math library.
Review it and please give suggestion about code quality and anything you find suggestible
&gt; Users of npm will be automatically notified via `npm audit` if they encounter this malicious dependency in their projects.
If your documentation is broken at different tab widths you have poorly formatted your documentation. I understand the problem fully, I'm a full time software engineer. You'll go nuts when you come across the not-insignificant portion of devs who use proportional fonts in their editors, none of your carefully aligned documentation will work there either.
And has extensions, supports multiple languages, tasks, intellisense. Definitely could be an IDE if configured as much.
This is the first part I'd recommend. Second part is returning a standard-format response - error response; { error: true, result: { code: &lt;error code&gt;, description: &lt;error message&gt; } } And for success; { error: false, result: { code: &lt;success code&gt;, description: &lt;success response object | array | primitive data&gt; } }
This might help: [http://www.reactnativeexpress.com](http://www.reactnativeexpress.com/)
/r/LearnJavascript
For data analysis, Python seems to be the route most recommended. Apart from having a truckload of great libraries to help with data science, it's simple, versatile and easy to understand for a beginner. For tutorials, I recommend Derek Banas' or thenewboston's videos on said language.
I love getters and setters, but Typescript makes me use them less because you can‚Äôt have different types on a getter and a setter. It‚Äôs complicated, because sometimes I want my setter to accept partial objects or plain old JavaScript objects, but always have my fetter return the full model class instance.
In theory, objects exist to provide a defined boundary where you stop analyzing an implementation. Unless, you are specifically working on an objects internals, then you shouldn‚Äôt have to think about how it‚Äôs actually implemented. It should function like a well documented black box. Like Django (Python), the settings are defined in a file, then hoisted up via a lazy iniitialization step in a getter. It‚Äôs complex, but most people do not think about it, and it solves the issue of circular dependencies neatly. It‚Äôs only if you are hacking on the Django core that you worry about this... and for most can just treat the library as a black box.
I'm really impressed. Very cool stuff! ...but Jira can keep it's dirty fingers out of my terminal, I get enough of that thing at work.
You can follow problem details RFC. https://tools.ietf.org/html/rfc7807 Some frameworks like asp.net core are implementing it. I would say it is a good thing to follow the standard :)
Hi /u/kyonenjs, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Oh for sure, I don‚Äôt manually navigate the language, and definitely use autocompletion, etc. There‚Äôs just rarely a reason to obfuscate the behavior behind a getter, when that behavior could simply be given a descriptive name.
You're wrong. Frameworks dont export instances, most of the time they provide classes / modules or functions. Youre free to instantiate them multiple times: ``` import Vue from 'vue' ... const app = new Vue({..}) ```
That‚Äôs a fair example(though you should provide specifics so people believe you) but you should really get what these comments are trying to help you understand... sometimes dependencies are the best step forward. Finding one vulnerability and going ‚ÄúI‚Äôm never using any dependencies again‚Äù is naive and short-sighted.
I would just follow this https://jsonapi.org/format/
Is it possible to login via username and password as well?
10 years in the business. Never happened to me. I assume if need would arise we would convert project to tabs. But until then - spaces just because everyone are doing it this way.
This is pretty much the polar opposite of what UX says about error messages https://uxdworld.com/2018/05/30/how-to-write-good-error-messages/
You can generate your own API token by yourself. From what I know, all JIRA users can create their own.
Do a 'find in project' - make sure to un-check the 'exclude node modules' button (I'm on phone rigjt now but I think it is a gear icon). Search for `declare module console` or `declare module "console"` then delete that line.
This is a very old exploit, didn't they do anything still? Look at this video, 9 months ago! [https://www.youtube.com/watch?v=LUsiFV3dsK8](https://www.youtube.com/watch?v=LUsiFV3dsK8)
I get that but was just wondering if username/password was a login option in addition to that. If I build something on top of this thing it'd be nice to just have my users log in with credentials they already know instead of having to create an api token
How can I setup the auto completion as in being shown in the ascii example?
Hi /u/Ehopira, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sai_deepesh, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ellipticcode0, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/8rtz93, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/topherjamesknoll, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/LovelyLionLily, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/murdafeelin, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/helntk, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thank you for the info
Are you getting paid to learn now?
It's my pleasure :} Honestly, this is is my absolute favorite resource. But I have probably at least 100 bookmarks related to web design &amp; development I'm planning on going through someday lol! It's mentioned in the curriculum, but [exercise.io](https://exercism.io/) looks super promising and I'll probably give that a go when I'm done. The Odin Project was actually founded by a graduate of [Open App Academy](https://open.appacademy.io/). They offer 3 tiers I believe: a free plan, $30/month, and an options that involves paying only after you find a job. And [Codingame](https://www.codingame.com/start) looks really fun. I also really really enjoyed Jon Duckett's two books, I would totally recommend them: * HTML &amp; CSS * JavaScript &amp; jQuery
Hell yeah, give it a go and drop by the forums &amp; Discord to say hi :}
I mean, what is the website or url you are trying to download or get pdf files from. Instead of using an example, post the real website address. I was going to look at it for you and tell you how to do it. You can PM me if you don't want to post it here. I'm a data miner by profession and was trying to help you out for free.
Annnd never mind: https://confluence.atlassian.com/cloud/deprecation-of-basic-authentication-with-passwords-for-jira-and-confluence-apis-972355348.html Basic auth is deprecated as of June 2019
From a quick look it seems like what you linked is completely in line with my point though? `2. Be Short And Meaningful"` If you can condense your errors into single codes (like representing them in http codes as I suggested) it should be pretty intuitive that the error messages you display based on that http code (ofc, you don't display just "401 error" to the user, you corralate it with some pre-existing translation on the frontend) is not going to include any meaningless information, but instead is going to be very concise. `3. Don‚Äôt Use Technical Jargons` This too, "3. Don't include technical details", is exactly my point. Don't include any information into the errors which could lead to the compromise of your system. The article only approaches this from the perspective of "the user doesn't know what to do with them", and my original post from the perspective of "malicious hackers do know what to do with them". Overall, I can see how you might have got that feeling from my original post that it would hinder the user experience side of things, and perhaps in some applications that might be true. However this article appears to only corroborate the original points from the UX perspective. Good point to bring up though!
Definitely prototype pollution vulnerabilities aren't news and they've been affecting quite a few libs for a while. That video is a great example, and we actually reference Oliver's research on this in the Snyk's vuln page, recommended to check it out: [https://snyk.io/vuln/SNYK-JS-LODASH-450202](https://snyk.io/vuln/SNYK-JS-LODASH-450202)
Maybe I misunderstood, but the gist of what I got from your original comment was suggesting to just give them an error code and no custom error message. Which is far from what the article recommends. I don't see why you'd have the backend send codes for the UI to then translate. That's just a whole lot extra work and alignment to maintain for no reason. The backend knows what the error is, as it threw it, it can come up with a sensible message to send the frontend
To be honest if it was a bunch of smaller ones they would be less likely to be audited.
Depends on your infrastructure. Of course you can deliver the error messages directly from the backend, although I would generally advice to keep the error messages that are shown to the user (thats UI responsibility), and the actual errors that take place on your backend separated (e.g separated by the http codes in this case). Separating them is a good way to enforce proper responsibility principle in your app. &amp;#x200B; Also, I disagree with the extra work. I don't know if you have a developer background or perhaps an UX one, but grouping something like frontend errors into a single place (instead of them being dispatched from different parts of your backend code) will generally increase maintainability and also allow you to more easily do stuff like translations and such. I'm not saying you can't have successful implementations of different infrastructures; this question is very very highly context dependent. But that is something to take seriously, especially when you need high scalability.
Is there ever a justifiable reason to touch the prototype now that JS supports classes?
Sorry, but I'm kind of confused why this is considered a security vulnerability. Presumably the implication is that malicious arguments get passed in to set properties on `Object`'s prototype, and these properties can be malicious in nature e.g. sending all arguments to some foreign server. However, as far as I can tell, there are two scenarios: 1. The malicious arguments include functions. Unless you're using a custom deserialization library that supports functions, this means that the arguments were actually constructed in JavaScript. If the arguments are actually constructed in JavaScript, there are two sub-scenarios: 1. The malicious code is running in a sandboxed iframe. I'm actually not sure this works because I don't know if you can send functions back like that, but assuming you can, this is genuinely a security vulnerability and I concede that this catch may help in this case. It's very niche, though, and relies on a specific setting which invites a host of questions. 2. The malicious code is running unsandboxed in your VM and can already set fields on Object's prototype without needing to be really tricky/sneaky about it. At the very worst, it can import its own flawed version of lodash and call that the same way it would be tricking your patched copy. 2. The malicious arguments do not include functions, in which case they're going to struggle to actually be malicious. Definitely doing something like changing a url could mean there could be a man-in-the-middle attack, but this relies on so much I'd need to an actual (even if contrived) example of using this bug to cause an issue like this to be convinced it's something I need to worry about. Don't get me wrong, I acknowledge that it's a bug, and a weird one at that. I just feel that describing it as a "severe security vulnerability" is pretty overblown. However, I may be missing a scenario, so please feel free to describe an example where this would actually harm someone who was doing anything reasonable (i.e. not super-intentionally leaving a backdoor open with a custom parser that can output arbitrary functions, for example).
Not sure if I understand this question. It's debatable, but prototype pollution affects code that doesn't explicitly "touch" the prototype as well. If `Object.prototype.id` gets overwritten, every object will appear to have that as an `id` property unless it gets overridden later on in the chain. This can create issues with duck-typing unless you're careful about using `hasOwnProperty`. I don't think code that explicitly touches the prototype is more or less affected by this vulnerability.
Where are the credentials stored? One should be able to set them with an environment variable or via gitconfig since JIRA info differs across projects. Docs say this should work: ~ &gt;jirax -l Unknown Command Usage: jirax [options] In `jirax logon` you use `something.atlassian.com` but most (all) JIRA domains end in .net. In the usage you use `&lt;key&gt;`, but in most cases this should be `&lt;issue&gt;` or `&lt;issue-id&gt;`. `jirax add-comment` should read from stdin if no comment argument is given.
Aren‚Äôt those classes just syntactic sugar on top of prototypes?
The plugin system is arguably the best feature of VSCode. They‚Äôve made it super easy to write plugins, so the community has taken to developing thousands of useful plugins for everything you can think of. I‚Äôm super impressed. And this is coming from someone who prefers Vim.
It‚Äôs likely an autocomplete or auto suggestions plugin/extension for the shell they are using. Zsh has a couple, I‚Äôm sure bash does too. They can be really handy.
It's encode instead of parse, try encode the body data to preserve everything special in it: ``` `mailto:example@example.com?subject=${encodeURIComponent(subject)}&amp;body=${encodeURIComponent(body)}` ```
yes but you're only modifying the prototype when you define the type, rather than ad hoc whenever you want.
ü§î I think I grossly misunderstand this vulnerability
was going to say this too.
Hi /u/ainoid, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I use getters if something *should* be a simple value, but I want to compute it lazily. If the value can change, it's probably better off as a method.
Watch YouTube videos and hack along.
There are some Udemy tutorials that are great, easy to follow and fast!
By using them in your projects
Wes Bos has some good beginner stuff. [https://javascript30.com/](https://javascript30.com/)
Why not webassembly, then? It's supported in node and (most) browsers, and should be significantly faster, still.
What‚Äôs going on with your command prompt? I don‚Äôt see a dotfiles repo or similar to look at.
Do you use React or similar frameworks? I can't imagine how HTML/JS separation would work in these, and if CSS is written by different engineers they'd probably often ask for an extra div here and there.
I like https://eloquentjavascript.net
I made a utility module to transform objects with dotpaths. https://github.com/skinnyjames/dotpather-transform
We don't actually. We use a home grown framework that intentionally splits the JS from the HTML and CSS. But, it shouldn't matter much. JSX is basically HTML and wouldn't be too terrible of a transition for our UI devs to get into and learn. Hell they had to learn the templating language we use.
Ah, to be young and dumb again
I‚Äôd be happy to check out any code you have or github projects or if you dm talk on discord
The broadly speaking the UI is responsible for *how* to display information to the user, not *what* information to display, the backend is responsible for providing the data. Having the UI maintain a database of error codes and their corresponding meaning doesn't strike me as particularly UIy, and therefore has little to do with single responsibility. What it does do though, is really tightly couple the front and back end, since the backend now *relies* on a load of data stored *somewhere* in the frontend in order to be understood. HTTP codes are nowhere near granular enough to supply meaningful messages for even a reasonably sized web app. It's ridiculous that they've been offered as an answer to this question, nevermind multiple times and as the top answer. You are maintaining a relationship between random codes coming from the backend, and their intended meaning in the frontend- instead of the backend just telling you what it means. Of course it's more work, you've literally got the meaning of an error distributed across two systems. How about keep them all in one place, the backend, where they're produced.
&gt;... uses ES6 Proxies RIP
You Don't Know JS is my favourite https://github.com/getify/You-Dont-Know-JS
makes life easier if the team are not just js devs, getters and setters are useful in OO languages
VS Code is good, but I think calling it lightweight is a stretch.
I second this. Just build cool stuff and start small.
You can destructure lazy methods. You can destructure lazy getters.
Hi /u/jacobp100, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Well, just recently I had to make a small utility tool which did screen monitoring, process the images a bit and send them to sftp. Due to the fact how linux handles x-sessions now it had to be a executable binary, as it couldn't be done from bash script executed by cron. Jimp was first thing, I've tried. And sadly, it proved to be so unreliable, that I eventually had to switch for ImageMagick + gm node library, due to constant "couldn't find marker exception" or something like that (from top of my head). Although there were some others too. So zero dependencies whatever. I rather take one dependency which is not an issue and have a reliable software. Perhaps the library will improve in time, but it's current state if possible, I would advise against it if reliability is a factor you want to consider.
Hi /u/jeffersonribeiro123, this post was removed because your title included a URL. Please use the `submit a new link` option with a descriptive title. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
**https://github.com/jeffersonRibeiro/react-shopping-cart**
Hi /u/jeffersonribeiro123, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I would like to reach 1k stars, could you guys help me? [https://github.com/jeffersonRibeiro/react-shopping-cart](https://github.com/jeffersonRibeiro/react-shopping-cart)
I would like to reach 1k stars, could you guys help me?
I work with Visual Studio Enterprise on a daily basis for work. If you want to compare it to something like sublime or notepad++ then you can call it a heavy weight text editor. But it does what I need it to do lightening fast when I don't want to deal with Visual Studio's clunky and sluggish nature.
Could you use VH and VW measurements to work it out?
can't blame you for not going against the wind, that's often the right choice but would you consider recommending tabs for a new open source javascript projects, where the accessibility concern is more realistic because anybody might contribute?
Totally blind programmer here, I generally prefer spaces as it's faster for my screenreader to read the code. That being said tabs are useful for indentation. I also only work on my own projects currently and don't pay attention to indentation at all unless reading other people's code. Tabs don't read on stack overflow or reddit either for me do brackets are my main guide to what's happening. Finally Duck python
Python uses them for no particular reason
It looks cool, but certainly not simple. I would call this simple: export default class EventObserver { constructor() { this.observers = []; } subscribe(fn) { this.observers.push(fn); } unsubscribe(fn) { this.observers = this.observers.filter(subscriber =&gt; subscriber !== fn); } broadcast(data) { this.observers.forEach(subscriber =&gt; subscriber(data)); } }
Sure it wouldn't be hard to learn, but how would you handle code splitting? Templating makes it natural, but splitting JSX from React code is something I haven't seen before (but maybe that's my ignorance).
&gt; they like the smell of books and don't care about your opinion on the matter -- paper book or nothing! That's my opinion for reading books. (I write using XeLaTeX or Textile only)
this is a very interesting perspective, thank you i wonder why the screenreaders treat tabs poorly in this regard? perhaps this is an idiosyncrasy in the screenreader software that we could fix?
It likely is a screenreader issue Yeah I mainly use js / node
Divide mouse position with screen size?
Well I'm a tab guy who use spaces because everyone does that. So I fully agree anyway.
Ah yes, because asking disabled employees to do more work just to keep up with their peers is fair and equitable.
Haha you're right! üëç I'm currently working on making it a bit simpler.
Using `?ts=&lt;value&gt;` on github works even if there's a `.editorconfig` file present. All that file does is set the default.
After spending 10 mins trying to login (\`-l\` doesn't work, you have to use \`jirax login\`), I found that it doesn't work for me at all because of the assumptions it makes with statuses on issues :/ it should really have you configure that as a user.
Cool! I love reactive programming. What's the difference between this library you're working on, and RxJS?
Looks like [MobX](https://mobx.js.org/).
Brilliant
*multiply result by 100, stringify and concatenate "%"
Would love a tldr comparison to RxJS
Good question, I've an answer not weel defined but...is the best I can say. Rxjs is about async emitters...interaction between streams, manipulation of streams, ecc. Mine is more low level, encapsulate, almost implicit... is about structures that easily become the source of thruth of multiple entities.
Broadly done replying to another comment.
so it's basically "just use spaces all the way" because both lines have the same indent at the beginning. tabs don't help there at all.
I don't know Mobx so much, anyway it seems that there are some similarities.
We use Vue/Vuetify to build apps quickly.
You may want to add some real-world use-cases. Name is cool, but I tend to compare it to RxJS and it feels wrong, cause it seems pretty different. &amp;#x200B; Unpopular opinion, the huge comments make the code less readable. &amp;#x200B; Buon lavoro, ciao!
They don't need to know how the config is retrieved to understand the config is available at `this.config`. If you're unable to figure out a config mapping then may god have mercy on your soul if you have to develop configs for multiple environments, who knows how many abstractions exist... Is config not the state that the application should be configured with? What difference does it really make this.config -&gt; this.config(), to understand where either comes from you have to see how it's set.
Ahahah I'm the king of big unreadable comments üòÇ, anyway thanks for your hints
Yeah, you basically need to train your brain to takle problems
I wonder if there was a poll on this. This used to be a really good sub where you could ask questions, learn, read interesting things. Looks like some uber javascript gurus have convinced the mods to turn it into yet another shitty sub. It used to have a great balance. Why not have a javascriptnews sub for those assholes instead of punishing everyone else. Ahh well, looks like javascript will be relegated to yesterdays language since that's always what happens when places to gather for all start to become ivory towers.
That was a basic regex -- you can extend and use multiple patterns if you want more accuracy. prefixing as `^`, etc. Are we mapping `/[ ]{4}/` to `/[ ]{1}/` or `/[ ]{8]/` or `/\t/` ? &gt; we cannot make a good algorithm that distinguishes which spaces are part of an indent, and which are part of a parameter alignment. This is what a code beautifier/formatter does. You can do a lot without compiling. &gt; the result is that the indentation gets mangled # we can mitigate (some) of this We know an indent is exactly `/[ ]{4}/` or something defined -- because that's what the style guide used. We can calculate the correct number of indents to match scoping. After stripping that off, we know more spacing is non-scope related. Ideally the team should be automatically using code-formatters. If yes, we need no extra steps -- just the initial translation to their preferred style. indenting matching params is done automatically -- meaning this is no longer a problem. " def foo:" " spawn('cat', " " age)" Example of scope-depth=1, with an incomplete (multi-line) statement. https://i.imgur.com/UiGXHhj.png # further extension If you want to modify this much more, you might as well use an existing formatter with the settings input scope-prefix: `" "` output scope-prefix: `" "` or `" "` - https://github.com/python/black - https://github.com/rust-lang/rustfmt
You guys used to be smart and the posts would just be flagged as help and fall to the bottom naturally.
i see it more like "just never use spacebar-alignments"
&gt; All that file does is set the default. note it will also effect code editors, though in some cases they might be able to override it
Very nice! Going to try it out! üí™
Vanilla is all I know. Not very marketable, but at least I know what my code does.
I think I would use scaling instead.
Are you saying you save minified code to the git repository?
What is a linear file? I'm not sure what you want to replace? &gt; Then we could literally render it any way we want and never have to worry about this, and also the file can store meta-data and annotations. By render, are you saying the text editor's rendering? &gt; let the editor handle the hard stuff. What are the hard stuff? It sounds like you're describing a code-formatter -- but the flat part is confusing?
I didn't mention Git at all.
Vanilla JS is too lenient. You wouldn‚Äôt realize it unless it‚Äôs the only programming language you know. Even when I call a method incorrectly no explicit errors happen. Even try catches don‚Äôt work fully. Moving to Typescript was one of the best decisions I‚Äôve made.
I am often surprised at my reasonably-successful coworkers' lack of general JS knowledge. This is one of the drawbacks of only ever using a framework (Angular in our case).
&gt; Even try catches don‚Äôt work fully. How so?
My best move was codewars.com for learning Js . Instantly learn a lot trying to solve begginers katas.
Yeah those comments are definitely not doing the docs any favors
you're confusing vanilla js with javascript
I have to say, when I first started javascript about 3 and a half years ago, it was brutal. But then I kept at it while switching to other languages and even went to jQuery and back and I really enjoy vanilla js now. I'm into c++ mostly now but when I need to port code over and back I always look forward to working with js because it's literally write less, do more and that's what all developers want when time is a constraint, unless you sadistically enjoy structering your classes/structs and defining every single function prototype and pointers/references etc etc... UGH well maybe its not so bad\~
Oh I agree fully. I am by no means advocating for plain JS. For our case we just needed a few JS scripts with listeners. I write C# mostly at work and started with JAVA. I'm all into supporting Typescript. I do believe though many will run to angular, react, etc when the project could easily be satisfied with html and css and maybe a tiny bit of JS and dare I say jQuery if you're lazy.
Honestly same, I work with quite a few devs that have 10+ exp in web. They seemed to rely heavily on jQuery and tye angular transition seems daunting for many.
What company uses vanilla js? Leetcode in JavaScript, study this [https://leanpub.com/composingsoftware](https://leanpub.com/composingsoftware) then take some React, Vue or Angular courses before you start giving your money away.
&gt; They don't need to know how the config is retrieved to understand the config is available at &gt; this.config That's one hell of an assumption to make. What happens when they need to add a new config setting, or one of the config values isn't set, or there some other bug/change that needs to happen. Now they need to know how config works, which means more translation and mental mapping they have to know about. Time and time and time and time again I have been either been down or seen the road of "let me just do this thing to make it so I have to type fewer characters", and the result is code that is more convoluted and confusing to follow as a result. If your motivation for using a getter is that `this.config` is shorter to type out than `this.configService.get(...)`, that's the wrong motivation.
&gt; Unless, you are specifically working on an objects internals, then you shouldn‚Äôt have to think about how it‚Äôs actually implemented. It should function like a well documented black box. That's nice in theory for sure, but in reality a product's engineering team is constantly updating, refactoring, adding features, or fixing bugs in every piece of code they've written. There's no such thing as code that was written and never has to be touched again, whereby it exists as a black box.
I guess I just haven't run into a problem with getters &amp; setters yet. Likely it's because my team uses them anytime what was previously a bare value becomes more complex. It preserves the old api, and gives the illusion of simplicity. For example, we'd use a getter if what used to be a local value always returned with the model, is now conditionally returned and requires a database hit to refresh the model.
&gt; and gives the ***illusion*** of simplicity Therein lies the problem.
I would also recommend learning TypeScript as well. You can use as much or as little of it as you want alongside ES6 JS.
‚ÄúJavaScript: understanding the weird parts‚Äù on Udemy. A little slowly narrated, but to me one of the only video tutorials that truly explains how js works under the hood.
ooooh, I've seen this one. Is it the next facebook but with blockchain?
How well does that work for the visually impaired?
Try it. Call a method wrong within a try catch. All you‚Äôll get is a silent failure. Without an IDE, it‚Äôs nearly impossible to catch
Uhh, frameworks are general JavaScript. Are you saying const behaves differently? Do arrow functions change meaning? Are you not allowed to use async/await in a framework? I think you're confused. JS doesn't define DOM manipulation. &amp;#x200B; Your coworkers are successful because they're good developers that haven't used a particular API. `document` is an object, just like any other object in JS. It has methods you call, like any framework.
I'm surprised that a lot of people writing VanillaJS don't know what the kernel does underneath the browser ( tongue in cheek). It's abstractions all the way down. The rule of thumb is it's good to understand decently one level down and up. For Angular Devs that would be VanillaJs. I've programmed in life of languages in the last 30 years and all that exposure low and high has been useful at weird times in contexts you wouldn't expect.
So similarly, you could have the automated system only allow tabs at the very beginning of a line - no tabs after spaces or between words, etc. So you tab at the beginning of a line to indent, and use spaces for "I want this plus sign to align with this minus sign" or whatever. &amp;#x200B; That sounds consistent and controllable, etc?
That's not the argument. It is slightly different. Some people like lining things up to words: &amp;#x200B; function name ( theseAll, lineUp butNotWithTabs) &amp;#x200B; Of course, you can tell those people that it is a bad idea, because it is a pain when \`name\` is changed to \`betterName\`. Line-continuations are better double-indented than aligning to words.
I consider this one of the (probably many) barriers to me considering myself a senior developer, but I often find my biggest challenges are dealing with other people's code. All too often I'm using a package or a module that stops working when you venture off the beaten path ever so slightly. The issues tend to be so small, silly, and obscure, that they're impossible to google. I'm pretty sure my first personal project got derailed by the mistyping of a single character inside a Webpack configuration. In my current project, I spent 2 hours wondering why my deployment wouldn't connect to Redis when I followed the docs as best as I could. Turns out my setup required a **slightly** different Redis Endpoint URL. I was not supposed to have "Redis://" in front of the URL, when the docs said to have it. There goes 3 hours. I could have spent those 3 hours implementing a cool feature. Something to do with emojis, right? That's why we invented computers.
The "vanilla" nonsense is going to hold you back as a developer. JavaScript does not define DOM manipulation. Those are API's provided by the browser. Using a framework is no more or no less JS than not. You're calling one API instead of another. &amp;#x200B; The "vanilla" part is the least problematic part of front end development anyway. It's also a whack way of building apps now. Data first and offload rendering bullshit to an engine. Who the fuck wants to manually select table rows and diff DOM elements. &amp;#x200B; People really elevate document.getElementById() to some crazy place. It's a function.....
If the catch is silent, then yeah. Otherwise, like a sane person, the catch would log an error.
I see that you replied to my comment with two loosely related sentences. If you were trying to make a point it didn't come across. I'm not prepared to leap huge chasms to figure out the intentions of those sentences, just like I don't want to spend a long time tracing back through the code you wrote to figure out what you actually meant. Clarity and good communication outweigh cleverness and brevity every time.
&gt;Not very marketable, but at least I know what my code does. &amp;#x200B; What? You know know how the native C++ XML xquery search algorithm in Chrome works? I don't think so. I think what you mean is, you know what the documentation for an API method you use says it does. "Selects an element by id". Just like someone who reads the API documentation for React, or Vue, or whatever. &amp;#x200B; Are you saying everyone that writes React apps. The millions of successful projects. That people don't know what their code does? But beginners that only know one thing do?
I'm not convinced there isn't an edge case where you would want to line something up that wouldn't fit within increments of the tab character and so would be required to use spaces. The tab can't do every job that a space can do but a space can do every job a tab can do. Why even waste time with it unless you have some accessibility concern across a large portion of your team?
Chrome isn't a 3rd party soup de jour.
IMO being a senior dev means, in part, recognizing that we get hung up on dumb shit when we go slightly off the beaten path, and being able to determine if it's worth it or find alternatives.
I mean come on. Of course the catch isn‚Äôt going to be silent or else what‚Äôs the point? Even with the catch, it‚Äôs still a silent failure that doesn‚Äôt get caught. I am not aware of any other major language that does this
Check out [apex](https://apex.sh/)
What do you mean? If you catch an exception in Java and don't do anything with it, neither will your program.
Well, this whole "vanilla" shit IS a soup de jour, lol.... [https://trends.google.com/trends/explore?date=all&amp;geo=US&amp;q=vanilla%20javascript](https://trends.google.com/trends/explore?date=all&amp;geo=US&amp;q=vanilla%20javascript) &amp;#x200B; It only became a thing when the JS ecosystem blew up with beginners and "startups". No other language do people mistake language and libraries, nor do they tell you to avoid libraries. It's 100% people who "only know vanilla" with the mindset. &amp;#x200B; But either way, you didn't really respond to anything I said.
Lit-element and polymer.
We senior developers don‚Äôt fare much better when the docs are out of date or wrong, but here‚Äôs my ethos for dealing with configs that are difficult (and this is probably the hardest part of the job): There is some magic combination of syntax that will make it work. Once you accept that ethos, the following strategy emerges: try every damn permutation that you can possibly conceive of. Search for other people‚Äôs config files for clues. Read every github issue thread. Think of it as kind of like brute-forcing a combo lock: the solution is inevitable, but you have to grind out enough combos to get there. Also, as you read and research, you will learn interesting things.
I mean I‚Äôm doing something in the catch. It‚Äôs not an empty catch block otherwise what‚Äôs the point of having a try catch? Also this is about JavaScript and not java
Developing for primary software vendors and using frameworks has been a question for developers since well before the pre .NET days. Chrome and Firefox are the 1st party vendors. You can use 3rd parties if you want. Or 4th parties. Projects are different.
Right. Someone said try catch is broke in vanilla JS. I asked how? They said it would fail and you wouldn't know, unlike other languages. Which I said would be true in other languages if you didn't do something with the exception. We may be in agreement.
Yeah, tabs help with indenting, not alignment. That's the point.
I used to be there with you but now I can never go back from ES6. I guess in a sense it's still vanilla, but if I need to support older browsers for some god-forsaken reason you better bet that I'm gonna transpile it from ES6.
I guess that's pretty true. 2 years ago, my first personal project failed because I didn't even know where to start guessing. I figured out this (still annoying) issue in 2 hours. I guess I'm getting better!
Great advice, and it doesn't just apply to cutting JS code, it applies to learning enough, say, about Linux (as a windows bod) to get a working Jenkins instance running in a VM when you have a 24 hour deadline. Turns out dependencies have dependencies have dependencies and god help you if you're x.x.x.1 versions out of date somewhere down the line!
&gt;Not very marketable, but at least I know what my code does. Isn't it a shame we live in a world as twisted as this?
By a flat linear file I mean the code is laid out in a text file top to bottom. Nothing inherently wrong with that, clearly it has served us well for a long time but maybe we should consider that this is not the most efficient way to organize code. Let's say instead of just storing code directly in a file we stored it in an XML format, the same way text is stored in HTML. If that were the case the format of the text would be completely irrelevant, the structure of the code would look more like a database and we could visualize it however we want. Annotations and meta-data could be stored as properties with the code. Versioning could be built into the file itself. The idea itself is not so crazy. Many SaaS platforms store code in a database along with meta-data and have many of these properties. There are many benefits however the biggest con is that when you want to edit the code locally (outside of a browser) you must flatten the record and store the meta-data in a separate file. That's what got me thinking that we could move forward. I am sure in the days of punch cards people would have had a hard time visualizing how we code today and I am sure in 10-20 years the way we code will look different from what we do now.
[https://javascript30.com/](https://javascript30.com/) excellent series that rings your point home
is it free?
It is indeed
I wrote this post thinking this was implied. I write a lot of node at home nowadays and I literally cant recall the last time I wasn't using TS.
When you hit a road block while solving a problem that wasn't the problem to begin with...
I had previously thought of using Allman-style braces for the visually impaired (also a reason I can't use Go,) but I guess I didn't realize the same issue came about with tabs. Thanks, I'm converting my code now.
Honestly, I didn't feel like bothering my buddy with the config. Nor really him needing to learn the syntax. I started writing JavaScript with node and immediately started writing ES6 without a clue of what I was doing. Now I just default to TS pretty much immediately. Also with the app being a chrome extension, well I solve the cross browser issue, lol
Done it. Was very nice
&gt; Using a framework is no more or no less JS than not. It is using more than not. By definition. A framework is code written in a language that augments the language.
I'd be willing to help out as well!
The company I work for prefers vanilla js. They don't want to depend on frameworks that might influence page speed.
Yeah I got that but alignment feels like a lot of work this way. With spaces you can tab-tab quickly to the point you want to align.
Best way to learn Vanilla JS : learnjavascript.online Honestly you won't regret it. I went from zero to building a Chrome extension in a few months
Tabs for indenting. ie structural for if-blocks or whatever Spaces for alignment. ie aligning to function names or whatever - which are aligned after structural indenting &amp;#x200B; I don't believe there are edge cases. I don't know that is wastes any time either. &amp;#x200B; If you want a reason not to do it - if your editor doesn't show whitespace well, you might end up adding a space in the wrong place, etc. But really it is not a hard thing to get right. It becomes a habit. If you editor shows whitespace, it actually makes indenting vs alignment more clear. ie this line is shoved over because it is a continuation of the line above, whereas this other line is shoved over because it is a structural indent. &amp;#x200B; Having said all that, I use spaces because that's what our team uses. But I understand how tabs and spaces can work together, and have used it in the past without problems.
To clarify, I was just saying I appreciate writing just a JS script to do something. This project literally requires appending buttons, and calling an API. We'll maybe have 100 lines of JS. I like the vanilla adjective because e everyone immediately knows what I'm talking about. I guess what would be proper to say is "hey look I'm writing JS that doesn't need to be transpired", but that's a bad title.
ES6 is so good.
True, there's one benefit of doing a chrome extension!
wait, is this _seriously_ your advice as a senior dev?? obviously i agree with some of this, but after reading the docs, and doing a google/search of the github issues, your next step should absolutely be _actually looking at the code_, not just trying every permutation. just trying random stuff is a waste of time unless you‚Äôre doing it in a way that‚Äôs productive. either way, i have no idea why you would suggest just trying random combos rather than actually reading the codebase for that specific function, which isn‚Äôt that time consuming.
They can use their IDE to format spaces-as-ident as they do with tabs. If you depend on the editor customization, you can have it do the same with spaces. If you expect the code to be usable without custom editors spaces work better. That said: your anecdotes do not make statistics, there are visually-impaired people that might find using spaces better because their tools are configured for it.
I threw together a quick CodePen (with comments) to illustrate how you could do this. [https://codepen.io/anon/pen/NZLyoZ](https://codepen.io/anon/pen/NZLyoZ) Essentially what Pavlic and onnoonesword said, but I connected the dots a bit more.
i think that you misunderstood OP. i don‚Äôt think that OP implied _any_ of those random questions that you asked: you seem to be really be assuming a lot. it seems like, to me, that OP is saying that a lot of devs around him use frameworks and _only_ know that framework and the API. i‚Äôm pretty sure we all know that those frameworks are built with JS and most of the base functionality works the same. i think OP is complaining in the same way that people used to complain about jquery. you know, devs that ‚Äúknew jquery‚Äù but didn‚Äôt really understand how basic JS is implemented, etc. the same thing can be said for frameworks like react or vue or angular. devs may understand the what, but often the don‚Äôt understand the why or the how or the where.
&gt;But either way, you didn't really respond to anything I said I always get a chuckle watching people struggle with their entitlement over having their opinions be respected lol
I appreciate this response. I love learning everything around what I am doing. Sometimes I feel like it's useless, but I'm finding some obscure piece of information that I read gets me out of a jam.
Saving this to hopefully actually do some day.
There is some truth to that.
Each video in the series is relatively short so they don't require a massive time commitment
Great :)
I should've realized I was opening a breeding ground for this. The second I typed my click bait title.
Do it!
pffft, hipster devs.
I mean I'm writing another project in flash
ditto that, I know nobody personally that knows js.
Seconding this comment.
The point is, document.getElementById() will last longer than any code written on it. JavaScript will be around as long as there are frameworks. A JS framework won't be around longer than JS.
Do frameworks manually parse the dom are are they generally implemented on top of document.getElement? I assumed the latter
No way. This is crazy. Libraries do not augment the language. They are just other methods written in that language. Downloading doSomeThing() from NPM is no more "augmenting the language" than me writing that function....
What? That comment has nothing to do with respecting opinions or entitlement, you muppet. It's pointing out that they're not engaging in a discussion. Which is fine. No one has to participate. But if they want to a have a discussion, there are some simple steps you gotta follow. &amp;#x200B; It's crazy you so incorrectly parsed that sentence. I'm guessing it's some weird projection thing.
You go to the config folder and see the file named "&lt;package&gt;", add your values there and bing bang boom you have your new variables ready. It's just an alias so you don't have to type this.configService.get('&lt;package&gt;'). Could it be `this.config()`? Sure, but I prefer this.config because it implies it's an object, which it absolutely is at time of execution. It's not complicated and stating that any abstraction only adds complication is a fundamental misunderstanding of computer science. Just because _you_ personally do not see something make sense does not mean it must be true. Your solution doesn't make it simpler either, it riddles the code with duplicated calls which should be abstracted to a function, why are you keeping the name of the package everywhere, guess it would make sense to have a global variable or class variable so it's `this.configService.get(PACKAGE /* or this.packageName */)`. It's ugly, complicated to understand and read. Especially if you're trying to just use one value, your method would almost require a variable just so you can understand what you're doing. If someone needs to debug the config system it would mean that _all_ packages universally used by every single application would be broken. There are many levels of configuration you may not even consider. It's also easier to modify one location than two locations. Also the config system should be a separate service which is _isolated_ and _tested_, which in my case it is. It's reliable, does what you expect and is very reliable in the assumptions that are made. It's unlikely to be a configService problem and more likely to be a problem consuming it incorrectly. Of course all of this is documented but I can't help people who refuse to read or understand the project. I'm not going to build something in a certain way just so it pleases some arbitrary low bar that we hold developers to. If you're junior, all you need to know is the folder config files are in, it's a 1-to-1 mapping of package to filename, the default export is literally what you get in place. The only thing you're arguing right now is the difference between is `this.config` and `this.config()` and it's a stupid distinction to make. If you honestly think riddling your code with this.configService.get('&lt;package&gt;') everywhere not only makes the code much harder to reason about overall it runs into issues when you need to change how the configService itself is used. The package that is consuming the config _only_ needs to know where the config is, not the intimate details of implementation. Modular components in isolation should have very thin interfaces, and they should interact with each other almost invisibly so you can modify each component without affecting the other. Let's say I wanted to change this.configService.get() to be `.get(package, environment)`, instead of just going to the config parameter and just adding the environment I have to go through and understand the packages usage of the config service. Don't bother mentioning specifics that the _environment_ should be handled invisibly, this is merely just an example.
As a dev who solved far more problems with common sense (programming experience) than with code reading, I disagree. I have my dev setup up, ready to test 10 things different in 4 seconds and you tell me to read the source code? Not trying the most obvious alternatives is the waste of time. Seniority is not just about the best practices. If you write your own version of React you will have a different kind of understanding of which solutions you can use to random problems that crossed your mind while you were creating the library's interface, for example. And even though you never read into React's code, you will solve problems very easily by 'brute-forcing' because you know how you would have built that solution. Obviously if you are brute-forcing for more than 15 minutes you are doing something wrong and should definitely switch to reading into the code.
&gt;i don‚Äôt think that OP implied an of those random questions that you asked: you seem to be really be assuming a lot. &amp;#x200B; Obviously. I was the one that brought them up, as example constructs of the language. That don't change. &amp;#x200B; &gt;i think OP is complaining in the same way that people used to complain about jquery. you know, devs that ‚Äúknew jquery‚Äù but didn‚Äôt really understand how basic JS is implemented &amp;#x200B; If they know jQuery, they know JavaScript. Whatever that means. jQuery is a library written in JavaScript. Are you confusing the language and an API provided by the browser? Node developers know JavaScript without ever using the DOM. &amp;#x200B; &gt;devs may understand the what, but often the don‚Äôt understand the why or the how or the where. &amp;#x200B; This is a false statement. It's just something people say to sound good.
I agree with you but you can also require catching errors with a linter rule. And IMO a well configured linter is more important that a type system, although both are very beneficial.
Cries in YAML.
Same, I recently was pairing with a dev on refactoring an old single page app. I wanted to tear out jquery and they were pretty skeptical and thought it would take a lot of extra work. But once they saw how easy it was they thanked me. Honestly for years I was like that too...I didn't have a clue what simple javascript was capable of. I think frameworks are very valuable but for basic stuff you can often just use plain javascript.
&gt; They are just other methods written in that language. Right. Which is more JavaScript. Using 3rd party software gives you more functionality without writing that functionality yourself, on top of what the first party provides. Also, libraries and frameworks are different things. I use socket.io, though I could write a web socket library myself. But that's more like a toaster that I could plug in and out, and less like the framework that builds my kitchen.
Yea. This hurt my head and reminds me of a couple coworkers who I feel repeatedly miss the mark despite being ‚Äúsenior‚Äù as well. If the documentation sucks and something isn‚Äôt making sense, getting into the code is almost always going to be the fastest way to an actual answer. Who knows, maybe you‚Äôll find a bug you can actually solve and submit back to an open source project at the same time. Dicking around with guessing and stabbing at the air is what junior devs do. You can‚Äôt solve a problem you don‚Äôt understand. Even more so if the lack of understanding stems from a fault in the code itself.
I'm not sure what you're trying to say other than just basic definitions of things. But it's still not "augmenting the language". Flow is more "augmenting the language". &amp;#x200B; &gt;Which is more JavaScript. &amp;#x200B; Yes? More JavaScript is more JavaScript. &amp;#x200B; &gt;Using 3rd party software gives you more functionality without writing that functionality yourself, on top of what the first party provides. &amp;#x200B; Yeah, that's the reason for using 3rd party code. &amp;#x200B; &gt;Also, libraries and frameworks are different things &amp;#x200B; Neither of those things are strongly defined, nor is it an interesting distinction. &amp;#x200B; Back to your original comment: It is using more than not. By definition. &amp;#x200B; I think you're taking my comment literally about line count or something. Because I'm really not sure what else you're trying to say.
That‚Äôs how try-catch works in every language. If you want the error to be handled by the system, throw it again in the catch block. Allowing the program to continue to execute normal after an error is literally the point of try-catch.
Are you saying you prefer es5 to es6?
Are you proposing a cross-language format? If not -- you're essentially cache-ing the AST of a text file, in the file itself. This is useful for linting, compiling javascript by deleting branches never called, code-formatting, debugging, etc. &gt; we stored it in an XML format, the same way text is stored in HTML. If that were the case the format of the text would be completely irrelevant, the structure of the code would look more like a database and we could visualize it however we want. Annotations and meta-data could be stored If you inspect syntax-highlighted code on https://stackoverflow.com , they're doing something similar.
2edgy4me
Wut
Do you commit non-minified code, or don't use versioning?
What point are you trying to make here? Your questions are leading somewhere, get to your point.
Svelte is kinda like this from what I understand. I haven't used it though.
Always start with VanillaJS and develop your knowledge of the language. But eventually you‚Äôll get to a certain point where you don‚Äôt want/have time to write your own front end router, state management system, etc.
I‚Äôm the opposite. I‚Äôm afraid to learn jQuery. Is it even worth learning today? Is it useful for anything that can‚Äôt easily be done with plain JS and current built-in DOM and browser interfaces/methods?
As long as you are comfortable with vanilla Js, get comfortable with its frameworks or you will really hate your job
This does not work, I tried it with gmail web client and it does not work. Everything get's sanitized.
&gt; The only thing you're arguing right now is the difference between is this.config and this.config() and it's a stupid distinction to make No. No it is not.
Same. And yeah, ~15 years of experience and my last 2 interviews I was declined due to lack of React experience. Ugh.