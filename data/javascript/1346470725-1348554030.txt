Alright, I'll take the dive into the new technology.. thank you! Always hard when a less attractive known option is there (java interfaces, blah)... I know this is much later, but if you could help me out with one more thing it would be appreciated. The problem I was having, exactly, is that I want them to simply click on their inventory.html file, or whatever I call it, on their desktop. This file opens up as file:///C:/Users/Anthony/Desktop/FNI%20Inventory/index.html The nodejs server, on the otherhand, is listening in on http://localhost:8888/... so to me, (I am a rougue desktop programmer, so this "cross domain" thing is new to me), C:/User/.... is a different domain than localhost:8888... and I'm not really sure what qualifies for "cross domain", exactly. I appreciate your help, and I'll try to figure this out if I don't get a reply. Thanks agian. 
I got an https:// url to work by simply removing the https://
This would be very hard or impossible to do I think. It's not so much about the colors themselves, but confusion lines where two colors might intercept. For example, someone with protanopia has trouble determining differences between greens and yellows. So using green text on yellow could be bad if there isn't enough contrast between the two. The goal is towards usability not color correction or limiting color choice.
It's true it does. I'm going to try and get that fixed as soon as I can.
Thanks xandrews. 
Saw IE icon, closed tab.
Cool beans. I tried it earlier on my iPhone and it doesn't let me zoom in. Other than that, well done!
You can still do that with media queries https://developer.mozilla.org/en-US/docs/CSS/Media_queries#aspect-ratio
Poseur Atari, no biscuit.
VERY true. If you're designing a NEW site, the Photoshop method is great. That being said, I noticed some pretty heavy AJAX-dependent (or even basic JS) sites ( not the best idea to start off ) would not load properly, so a screenshot will do you good.
Couldn't have said it better. If an applicant had a w3 school certificate I would honestly see that as a strike against them. Edit: just to elaborate, the reason for this sentiment is that good developers covet the craft itself, not certificates. [Show, don't tell.](http://en.wikipedia.org/wiki/Show,_don't_tell)
I don't like CreateJS. I think the whole "display list" approach is not well suited to create games with it. I prefer component based systems and I prefer "hardware accelerated only" approaches. This was the main reason why we created our own engine: SpellJS (have a look at http://www.spelljs.com if you're curious). I hope as soon as our code is "battle-hardened" our engine will outshine all the other available engines :) Edit: The atari arcade games are very cool
I 2nd this. W3 schools is horrible. [w3fools.com](http://w3fools.com/)
If you honestly get the W3 Schools certificate, don't tell anyone and most importantly don't put it on your resume. W3Schools got a quite bad reputation, because they have kept for years (and still keep) incorrect information on their main website. If you look at the side bar of this subreddit you will even spot a link to W3Fools.
I use github-flavoured markdown, but I can certainly use JavaScript in addition to CoffeeScript or possibly alternate examples between coffeescript and javascript. Thanks for the feedback!
I've never seen someone list these certifications on any of the resumes I've looked over/interviewed candidates for, including the shitty ones. What's going to matter? Demonstrating your knowledge of the programming language with questions and having to write out code examples. To agree with everyone else, total waste of time, and if charged, money.
I didn't even know they existed... and I've been interviewing people left and right for jobs recently.
The parser simply does not need the closing tags. To forego them isn't being sloppy. To include them simply adds garbage to the parser. 
I'm a Frontend Developer for years and never took any certification. I know that w3 schools is rather bad. If you're ever in germany, the courses from http://developers-peak.com/ are rather good.
You either close all tags, or none at all. HTML5 allows both. Pick one. Mixing between both is sloppy. The general accepted standard is properly closing all tags, ala XHTML.
But that's the beauty of HTML5, isn't it? You can choose to follow either HTML or XHTML standards. Live how you want to live, baby! All I'm saying is pick one and commit. Don't want to close your tags? That's fine.... Just don't start closing 'em half way through. Also; if you keep your tags open, doesn't that force the parser to work harder (interpretation, etc...)?
KnockoutJS
A W3 Schools certification doesn't indicate someone with a grasp of their chosen technology - it indicates someone with dick-all experience in the industry who's naive or gullible enough to pay for a worthless certification from a worthless website. It's literally an anti-qualification, that only demonstrates negative qualities about a candidate. All things being equal, I would be more likely to hire someone *without* a W3C qualification than someone with one.
LOL **EDIT** Certs are a joke make something good and show it off
Don't take me wrong, but that article needs some serious revision... Global variables, lack of standards.... Apart from that, I don't really see any usefulness in that article. Most of what it exposes are the same concepts that you grasp when reading the frameworks' documentation, or at the very least the same stuff you get when comparing two todo apps made with different frameworks... I don't need an article for that... Osmany already took care about that: http://todomvc.com It misses so much... : - Ember must have at least one global variable to provide DOM Bindings, therefore, it doesn't play well with script loaders (it's possible, but you'll still have to Namespace your code...) this is something that you should consider when choosing a framework, will you use packages or will you namespace your application… to use both is stupid.... - Ember screws up your HTML with script markers to provide DOM Binding, making it impossible to have sane markup, this is really important if in your team, designers are the ones producing HTML and CSS... - Backbone's concept of Controller resides in the Backbone.Router object, if this is awkward to you (which let's admit... it is, unless you're a ruby developer and everything that it's awkward is awesome to you), you need to find your own solution to implement some proper 'separation of concerns', and no, the Views shouldn't do all the work... Per example, neither the Router nor the Views should know how to work directly with the userMedia API... this are small things that people should consider when choosing a framework, and things that are not explained in the documentations... I don't need an article stating the obvious, I need an article that saves me time when doings this decisions, so that I don't have to make an example App with all the frameworks... and a Todo App is just too damn simple to show all the potentials/flaws of a framework...
CORS has been around for years. What took them so long?
I 'signed up' but never got an email.
While very cool, pretty sure the reason the author of the question gave is BS and they're actually a web malware writer trying to keep their code from being inspected. Example use would be an obfuscation depacker.
Embarrassing. I thought (up until 5 min ago) that w3school was affiliated with w3c. Blocked from search results now. Thank you for the link!
This is a pretty minor feature add. You've been able to work around this with flxhr or jsonp for a long time now.
That's probably the best javascript pacman I've seen. Even better, the author had made the whole thing accessible on his github account! http://github.com/shaunew/Pac-Man 
I just watched him talk about this last week at the Houston js meetup, very cool project. 
UPDATE: So the site is completely back up now and things should be much more stable now, there's still a lot of work to be done and features to add but it should be much more stable now. Thanks everyone for the feedback much appreciated.
I'm impressed that it can work with finger swipes on my mobile device
yes this is the joke. :P view-source for slightly lamer humor 
I'm not quite sure what your goal is, but if you want to get all the ids of similar objects, try something like this: &lt;div id="gtag1" class="gtag"&gt;&lt;/div&gt; &lt;div id="gtag2" class="gtag"&gt;&lt;/div&gt; var blast = $('.gtag'); for( var i = 0; i &lt; blast.length; i++ ) { SomeFunction( blast[i].id ); } $('div[id="div-gtag"]') selects all divs with the id attribute equaling "div-gtag", of which there are none.
so I guess the other question I have is. When I use "$('div[id\^="div-gtag"]');" and inspect the object in firebug I can see it store div-gtag1 in 0 and div-gtab2 in 1. I just don't know how to access that info - like document.write(blast.0) doesn't work but I know the object has the info in it.
the formatting of the post ate my "^" in my original post. Unfortunately I don't have the option to add a class to each div (hmm I guess even if I am looking at another person site I can still modify the div's to add a class but it seems like that would be way more work. I will look at the link you sent me.. thanks!
Yes. Go to "Learn" from the main menu.
Your code would need to be blast[0] blast[1]... rather than blast.0 ninjaturtlesoup gave you the full code for the loop over all items but I guess you didn't recognise it because you weren't looking for square brackets :-). I hope you and he don't mind but I have tweaked it a little for optimisation: var blast = $('div[id^="div-gtag"]'); var iterator = 0; var arrayLength = blast.length; for ( iterator; iterator &lt; arrayLength; iterator++ ) { SomeFunction( blast[iterator].id ); } The first line selects your items (as you already know); the second declares a variable for the index of the array and sets it to 0; the third sets a variable and caches the array length so your code doesn't have to work out the value each time you go over the loop. I also moved the first curly brace to appear on the same line as the for - this is called [K&amp;R style (importance is explained on Encosia)](http://encosia.com/in-javascript-curly-brace-placement-matters-an-example/) HTH!
That is just too awesome :)
i've got consistent 60fps safari macbook pro. Incredibly slick.
Trying to keep their code form being inspected? What do you mean?
that is awesome thank you. I will read through the links that have been posted on this thread. The part I really need to understand is "blast[i].id" like I get the concept of how you used the loop but knowing to identify ".id" is the key. When I use firebug I see a bunch of other part of the objects.. how do I identify those. I swear I looked through everything and don't know why I didn't see/think of "id". Thank you again.
thank you - it does help. How do I find out what else is part of the object of "blast[0].?" without using firebug. I was looking at a some functions that say "console.log" and few other options but nothing really helped to say this part of the object can be identified by ".id"..etc. I appreciate your time. 
danke
Wow. Had no idea there are certifications for JS. Having great stuff at GitHub helps. Remember to blog too if you are into writing.
CS degree from accredited university.
document.form1.name.disabled=true; I use name as an attribute in the html, and if I disable the button (the code works) the function doesn't
Onclick handlers are not executed if the button is disabled. It's the desired behavior. http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#enabling-and-disabling-form-controls:-the-disabled-attribute &gt;A form control that is disabled must prevent any click events that are queued on the user interaction task source from being dispatched on the element.
thats because being disabled terminates certain event propagation- like click.
Hey, thanks. It was inspired by [Braid](https://store.cmpgame.com/product/5900/The-Implementation-of-Rewind-in-braid). I listened to [this talk](https://store.cmpgame.com/product/5900/The-Implementation-of-Rewind-in-braid) to get a good idea of how to implement it.
I find it works really well if you don't lift your finger off the screen. The game detects micro-movements really well, so it's pretty precise if you use it that way.
Your input name is the culprit. Try this for comparison: &lt;input type="button" onclick="value='moo';" value="foo"&gt; Your onclick handler is running in a local scope, which means that it resolves next as being the name attribute of your **input** element before it can resolve next as being the name function of your global/**window** object. Rename your functions or trigger window.next() instead. Edit: TLDR: next inside your onclick is a reference to the input, not to your function - and you can't 'execute' an input.
http://appjs.org/ Oh no! Collision!
Except one is a framework for building Node.js apps that work like native apps and the other is a website that generates a file that you can use with Express.js. Other than that you could almost say that the two are identical.
Use require.js in development, use r.js to build the whole thing in to a single file for deployment.
It's not just the byte overhead that causes a problem (and by the way, the byte overhead might be a lot higher than you think if you're not serving static files from a cookie-less domain). Depending on the server configuration and browser support, the browser may or may not be re-using connections. Establishing a connection between 2 hosts is a complex operation that adds a lot of overhead.
The #1 killer of web servers is requests - most web servers handle static content very efficiently, but it still has to handle it. More requests no matter how small do impact the server's ability to operate efficiently (basic principle of DOS attacks). If you can reduce the number of requests, your server will perform better. However, not all sites receive such heavy amounts of traffic that this becomes a concern, so combining them may just be premature optimization. There are other ways of mitigating this though - CDN's, reverse proxy caches, etc. And I suppose you could argue that if you setup requests to your scripts with a version included you could get still get a lower number of requests, while serving less data to the end user (*EDIT: while using these services of course) .
I've never seen this before, and I kind of like it... void function(){ console.log('code here'); }(); rather than.... (function() { console.log('code here'); }()); 
first rule of [best practice guide](http://developer.yahoo.com/performance/rules.html): &gt;80% of the end-user response time is spent on the front-end. Most of this time is tied up in downloading all the components in the page: images, stylesheets, scripts, Flash, etc. Reducing the number of components in turn reduces the number of HTTP requests required to render the page. This is the key to faster pages.
This looks like an interesting read, but the page content doesn't scroll on my tablet (Nexus 7 using Chrome). I can only read the opening paragraph and block of code :(
Nice tool, but I feel sorry for people with colour deficiency.
Cookie-Man! Why didn't they turn the big dots &amp; the ghosts into cookies?
4478
You can always learn from examples http://jvectormap.com/examples/world-gdp/
The big tooltip boxes overlaps the code boxes to the right. They should be placed below the box you click on instead.
That's how it was first but if your browser window is to small you can't read the bottom boxes. I guess it's annoying when you add a code block and it's covering the newly inserted code. Maybe I could add a fade-in effect on new code blocks.
Remind me an [old project of mine](http://paradoxxxzero.github.com/jsfractals/)
The mechanism I've been using: 1) Work in SVG, not canvas, because vector 2) Render to poster in (non-free) PrinceXML Most poster printing targets (cafepress, etc) can consume PDF.
one reasonable approach (which may or may not be prohibitively annoying based on how your code is structured) would be to render your large images out in tiles of the maximum size for which toDataURL cooperates and composite them offline.
I'm just using a single canvas, with canvas context drawing methods.
nice, kinda like giess or milkdrop. get that reacting to some soundz. whats the max size of your output how many pixels. 
TypeError: item.innerText is undefined http://callumacrae.github.com/regex-tuesday/assets/script.js Line 21 Test in more than 1 browser I guess ;)
What browser are you using? I forgot to check browser support for `.innerText` &gt;_&lt; EDIT: Fixed!
&gt; [Differences from innerText](https://developer.mozilla.org/en-US/docs/DOM/Node.textContent#Differences_from_innerText) &gt; &gt; Internet Explorer introduced element.innerText. The intention is pretty much the same with a couple of differences: &gt; * Note that while textContent gets the content of all elements, including &lt;script&gt; and &lt;style&gt; elements, the mostly equivalent IE-specific property, innerText, does not. &gt; * innerText is also aware of style and will not return the text of hidden elements, whereas textContent will. &gt; * As innerText is aware of CSS styling, it will trigger a reflow, whereas textContent will not. 
I like this idea. I can always use more practice. Bring on the Regex challenges! Here's [my solution](http://pastie.org/4662388).
"Please enable javascript and/or install Flash Player" Really? Why does it need Flash? I've always just used the regex tools built into my IDE - they're usually PCRE, which I prefer to the engine JS uses.
This is a great idea. Maybe cross-post to r/programming too, since regex syntax for the most part is pretty similar between languages?
Done: http://redd.it/zc64h Dunno if I did it right, I haven't really posted on Reddit before.
Ah! Didn't even notice that existed. Still learning :)
Nice! Now just make two of them spin while interlocked.
Please explain how to use the two input boxes.
I've been using this one, too.
That looks very nice - I'll probably start using that one now that my IDE doesn't have any regex tools.
Will do - every tuesday! I'll post them on both Reddit and twitter (hint: I am unimaginative with usernames)
I've been there once or twice to pick up a pre-made regex for one thing or another. Pretty cool site.
There is no absolutely correct solution. My solution is below, but other people have come up with different solutions which work absolutely fine. Find: `/\b(\S+) (\1)\b/gi` Replace: `$1 &lt;strong&gt;$2&lt;/strong&gt;`
Fun challenge! Although I pretty much always enjoy regex challenge :)
My weapon of choice is [Rubular](http://rubular.com). It is primarily for Ruby flavour, but you can transfer most things. (Except if you use Oniguruma extensions. Then you're screeeeeewed, because you won't want to use anything else ever again. :P )
lots of hoops to jump through just because you don't trust the user's time. A link to help them set their time correctly (something like 'not the right time?') would have solved all your problems with no code.
that's why they're called a framework and not a library.
Is this based on this amazing article? http://www.puremango.co.uk/2010/12/genetic-algorithm-for-hello-world/ Anyway I like your explanations, really nice job. For anyone who hasn't seen the above article I encourage you to check it out as well.
You should be fine with any of the regex courses which teach using the PCRE engine (most of them teach using PCRE). There are a couple minor differences between PCRE and the PCRE-like regex engine that JavaScript uses, but nothing too major. I'm afraid that I don't have the time right now to make a course myself - I've just finished writing a book which I didn't get an advance payment for, so I am having to work pretty hard to catch up with money lost by not working for a few months. I'll keep it in mind for the future, though.
I salute to your boredom.
That's awesome! I've never seen that article -- I've just always used that problem for day one of my ML class. I like using that problem because it takes what has the potential to be a very sophisticated problem-solving algorithm and helps you understand it in the frame of a very simple problem. I guess I'm not the only one that thinks so! Thanks for the article, I'll definitely be perusing it to see if I can steal any teaching ideas ;)
http://scriptular.com/ I don't remember where I saw this, but I tend to keep it in my bookmarks.
To add to the list of tools already mentioned here, my personal weapon of choice is [regex101.com](http://regex101.com). It's fairly new though, and might be a bit buggy.
That looks nice, but I'm still not sure whether I'm a fan of them sending the data over to the server. I'm on a very slow connection, so it takes a while to update.
I use adblock and none of my rules would block advertisement.js . I only block ads when they annoy me, in which case I blackhole the whole domain that serves ads.
How does writing for Codecademy work, do you know? Do I write for free, and then everyone gets to read it for free? How do they make money? I've certainly got the experience to write something, but I'm still not sure about time.
Great. Now does anyone know how to block adblock from working entirely?
http://mbostock.github.com/d3/talk/20111116/gears.html
I forgot, fuck facebook login.
You might be interested in this [artificial life simulation](http://jimallanson.github.com/lifejs/) I've been working on in Javascript ([github](https://github.com/JimAllanson/lifejs)). It's based on Andrej Karparthy's C++ [ScriptBots](https://sites.google.com/site/scriptbotsevo/) simulation, rendering to canvas and using running in a WebWorker. I've also had it running on a node server with web socket clients rendering as a proof of concept. It's not really finished yet, I think there's still a few bugs and balance issues, and I don't often get results as good as those in the ScriptBots videos. There's also still quite a few things that I haven't implemented yet, such as saving and loading, extendibility and full UI controls (the current controls aren't that useful, and the charts slow it down a lot and sometimes crash it). I also want to try making it work in 3D using Three.js or similar, and maybe investigating WebGL to see whether I can bump up performance.
can you get javascript to write to a jpg after so many loops of the wave. Say draw 2000 lines then export to image to jpg. if you can get to a minimum of 3000 X 2000 (8X12inch@ 300 DPI) you'll be able to print to A3 with little noticable pixelation. Then find a fujiflex printer in your area. Fujiflex costs about 70 bux for one A3 print. But they are gallery archival, and look super awesome. If you get one done on metallic plastic paper, the colors on these will pop like its 3d.
That's so nice to hear! Thank *you*!
I only discovered it recently too, and I considered myself fairly good with regex! Today, I learned about assertions, which I didn't know about xD
could have started easier for a first challenge and with some links where to study, or some infographic with basic stuff? Though of course googling will bring hundreds of results, it still feels discouraging like being thrown in to ocean... Though its all my fault for getting excited and expecting something more like a course than a challenge
Make it a CSS animation! http://jsfiddle.net/hJxWQ/ Be the boss.
I was wondering about dpi. Someone once told me that 600 dpi is needed for high quality prints, but that seems like overkill, especially for what I'm doing. I actually have access to a good printer that can handle large prints. I think I'll worry about the archival quality after I've made a real masterpiece! Getting JavaScript to write to jpg (or png) is not straightforward...I'm not sure if it's possible to do in a direct way but I was wondering if anyone here had any ideas. What I've done is use the toDataURL() method of the canvas to draw the canvas to an image which is displayed in the browser, which can then be saved as usual by right clicking, etc.
you discovered challenge #2
I like the idea, but I didn't see it earlier today. I look forward to next week!
IMH I don't really see the point in doing this. You can link to multiple different .js files in the *&lt;head&gt;* tag, but Javascript isn't Java or C++. It's Javascript. I can understand missing the structure of certain OOP languages, but it's practices are different. Most devs concatenate everything into one .js file - saves time and resources. Don't try to make Javascript into something it's not.
In other news...the same old saying holds true: Use the right tool for the job.
javascript absolutely can do this...but in order to do so you will need a decent understanding of the language itself, its prototypal interface, its closures, its variable hoisting and scope, etc, etc... I would recommend you learn the basics/core of JS, then you wouldn't even need to ask this question and could get down to business.
just to be clear, the "yepnope" response you got was not a sarcastic thing like "yeaaaaa no that's not possible"... it was referring to [yepnope.js](http://yepnopejs.com/)... 
Serious question, why not use jQuery or Zepto?
OP is seriously underestimating JS. It's a first order programming language!
Actually, it's a loser, because a properly configured adblock doesn't block that.
This is the 20% effort that is (at least) 80% effective.
Short answer is you can't. Long answer is that the web was designed for the end user to be able to render what you supply as they see fit. For example, reformatting for readers for the blind. If people are blocking adverts on your site, it isn't their fault. It is more likely your adverts are invasive/annoying and what little content you supply fighting for space with adverts is losing. So you need to approach it from, what would make the user disable adblock on my site, not how do I force the user. 
I didn't try it, but obviously it was the authors intention to rely on AdBlock to block the advertisement.js. In my book he's still a winner.
There are a lot of fairly rubbish tutorials high up on Google, but I've found that this link is excellent: http://www.regular-expressions.info/tutorial.html
Very cool! I am myself creating a regex challenge consisting of several tasks. I call it my "regex quiz". It will be uploaded to http://www.regex101.com/ very soon. I am still ironing out all bugs. If you're interested in getting involved, just holla. Once again, nice work!
Haha thank you for clearing that up. Was like 'oh thanksfor the helpful tip'
Technically: /\b(\S+)(\s+)(\1)\b/gi $1$2&lt;strong&gt;$3&lt;/strong&gt; Otherwise you're correctly matching "any space character(s)" preceding the second word (spaces, tabs, newlines, etc), but artificially coercing them all to a single space when you do the replacement. As that's not part of the test, it's probably better to capture the space chars too, and use the captured whitespace in the replacement pattern. I haven't tested it, but (replacing spaces with underscores, because reddit eats multiple spaces) I'm fairly sure your replacement would turn: "This\_is\_a\_\_\_\_a\_repeated\_string" into "This\_is\_a\_&lt;strong&gt;a&lt;/strong&gt;\_repeated\_string" instead of "This\_is\_a\_\_\_\_&lt;strong&gt;a&lt;/strong&gt;\_repeated\_string" (as it should)
I feel dumb :(
JS doesn't have integers, it only has floats. So there is no JS integer size. Any reason why the ids can't be represented as strings on the JS side?
^this. Given they're ids, using strings is perfectly fine. If the server is sending the data as JSON, ask the back-end dev to cast the ids to strings before serialization.
Viruses and DRM libraries have been detecting debuggers like SoftICE for years to prevent inspection. That's the web equivalent.
I currently have it disabled on boards.ie and reddit. Both sites I support and don't act like dicks when it comes to advertisements. 
Cool. How does the format of yours work?
As a side-note, modern browsers will actually try to use ints wherever possible, because they're faster to work with. But the conversion is automatic; for all intents and purposes (except performance analysis), they're floats.
Doh! Right you are. Gotta love regexps - they're like a bottomless pit of pedantry. The nit-pickers' gift that keeps on giving. ;-)
You create an account (merely to track progress) and then you start solving tasks. There are right now 23 tasks, each task has several tests to ensure your solution is accurate. The goal is to learn new techniques and how to construct well written regular expressions. Not only that, but also give you a good insight in how the engine works. The GUI is quite simple and user friendly, here is a print screen: http://imgur.com/j9AV8 Unlike yours, which runs on the PCRE implementation of javascript, I use PHP which has much wider support for PCRE. In turn, I can create quite funny and tricky tasks that require you to really dig deep into the library and understand the dynamics. 
The best / most light-weight / fastest way to do this is with TMUX. http://www.readncode.com/blog/pair-programming-with-tmux-screencast/
i start with adblock disabled and blacklist bastards as I go
instead of checking for adblock why not check your sites for shitty annoying ads?
Pretty much every bit of documentation on Three.js is outdated yet useful. The most useful form of "documentation", though, is the examples; it's (as far as I can tell) the only truly maintained source of usage examples for Three.js. The best way I've found to learn Three.js is to [browse the samples](http://mrdoob.github.com/three.js/) and see what they are doing, and then when you find the feature or effect that you're looking for, dive into [their source code](https://github.com/mrdoob/three.js).
There are a number of tests which your expression has to pass, but your expression may look however you want. If you use \W or [^\w] is entirely up to you. I currently do _not_ tell the user to do anything in a certain way, unless there's a real explanation for it (like unnecessary quantifiers inside lookarounds etc). So what do you think, is this something you might be interested in? I could use a partner. The requirement is that you're good at php and even better at regex.
The dojo toolkit has a notion similar to this. It simulates "Namespaces" and is designed to easy organization for large front-end projects. You can require classes from other namespaces, and declare your new classes inside of a namespace. http://dojotoolkit.org/
Yes, but interactive.
http://yuiblog.com/crockford/ that's what changed it all for me. Doesn't really explain everything in depth but does give you a much deeper appreciation for the language and what is possible compared to other languages
okay. bookmarked. thank you :).
After you have learned the basics, you should check out "Javascript:the good parts". It was written by the man who created javascript and clears many incosistencies and faults in the language, while actually showing you the right ways to do stuff.
Internet Explorer - Any task.
Heyo, I wanted to explore the GBooks ngram dataset, and see what parts of sentences were less predictable by models, so I made a little visualization using d3. The code is up on Github; the javascript part is at http://github.com/lsb/text-entropy-visualization
I bookmarked that too. and yes, it does sound a bit intimidating but I hope it'll be all good. thank you :).
Seems better than Yeoman, like the use of plugins
Crashes my pad, man!
Without disclosing the implementation of `class_` and `instance`, how does this look? class_('Stuff', 'forWithKey_'); instance('Stuff', 'forWithKey_', Object, function (iterator) { var key; for (key in this) { if (this.hasOwnProperty(key)) { iterator.call(this, key, this[key]); } } }); instance('Stuff', 'forWithKey_', Array, function(iterator) { var i, length; for (i = 0, length = this.length; i &lt; length; i += 1) { iterator.call(this, i, this[i]); } }); class_('Stuff', 'for_'); instance('Stuff', 'for_', Object, function(iterator) { var key; for (key in this) { if (this.hasOwnProperty(key)) { iterator.call(this, this[key]); } } }); instance('Stuff', 'for_', Array, function(iterator) { var i, length; for (i = 0, length = this.length; i &lt; length; i += 1) { iterator.call(this, this[i]); } }); instance('Stuff', 'for_', String, function(iterator) { var i, length; for (i = 0, length = this.length; i &lt; length; i += 1) { iterator.call(this, this.charAt(i)); } });
Looks great, I've actually been starting to work on something similar: [http://jsfiddle.net/TgKYb/6/](http://jsfiddle.net/TgKYb/6/) Would you mind if I could use your code for including in my personal project? If I ever make it public, I'd be sure to give you credit. *Edit*: Feedback would also be appreciated.
Oh no! What'd you try to render, what browser are you in? It's pretty memory-hungry, and it might be slow, but it shouldn't crash. SVG rendering speed matters a lot; Chrome is better than Firefox for that.
Just wanted to update you: the ghosts turn to bouncing cookies in Cookie-Man mode now. Thanks for the nudge!
Yeoman isn't a build system. Furthermore Yeoman uses Grunt (among a pile of other things).
Not to be crass, but including jquery from a cdn and simply using a selector and the text function would have prevented this innerText issue and is a very small amount of effort.
What is your book?I have a special love for the o'reilly books since I started from some head first series books, but I believe that I can find more and more usefull ones. I just suggested "the good parts" because there is a general opinion that it is a good book.
What do you consider the basics?
Why are you getting flack for something that a language is lacking? How is this at all your fault?
Given the opportunity to choose between an opinion/article/book by Crockford and one from Resig... choose Resig. He's less pretentious and a whole lot smarter where it matters (and a lot more pragmatic). http://jsninja.com/ &lt;-- resig's book for advanced javascript developers.
Yeah, Resig is definitely a bit nicer on the psyche and I certainly depart philosophically from JSlint in a few places, but Crockford sure has some good, reasonably readable advice for novices.
If by basics you truly mean the basics, the most important "non-basics" you need to learn are: 1. **Scoping** (Variables are always scoped to the nearest outer function. Variables in scope at the time of definition of a function remain in scope at the time of execution of that function) 2. **Troubleshooting techniques** (firebug, chrome dev tools, ie dev tools, etc. how to monitor performance, add breakpoints, watch variables, and (but not rely on them because they affect asynchronous code), effective use of console logging, etc) 3. **Garbage Collection/Memory Management** (too much to write here, lots of good info on google about it... basically be careful of the scoping rules as defined above keeping references to things when you no longer need them) 4. **Effective code organization** (Don't pollute the global namespace, don't repeat code in multiple pages, don't write code that has side effects (loading a script should just load it, calling it should do something with it)) I'm happy to elaborate if you're interested, but these are the key areas where I see people struggle with JavaScript.
Thanks a lot, I'll research all of those! I watched thenewboston videos to learn the basics, so I guess I just need to practice a lot too.
So what's the issue here?
Mr doob is a god
This is a blog post explaining different algorithms originally from http://www.reddit.com/r/javascript/comments/yywbe/algorithm_performance_for_a_ring/ I'm planning to do a few of these with everyones favourite next - the Fibonacci series
JavaScript from jQuery: http://shop.oreilly.com/product/0636920026280.do It hasn't been published yet, but the early release eBook is available.
Sure, if you use jQuery for a website, that's fine. But a whole lot of jQuery "plugins" could be generic, simple JS libraries, no need for jQuery. People take it for granted these days, like everyone in the universe used it. And that's what I hate about jQuery. It's a huge circlejerk. Even some ad snippets contain the whole jQuery lib for just inserting a script tag or a pixel in your site. WTF! Other people (like me) prefer other frameworks. Because the structure jQuery gives you is fine for DOM manipulation, but it just doesn't scale to big applications. There's no concept of "module" or "component" or "widget" in there.
Well he created an alternative name for JavaScript's object literal notation along with the Idea of quoting the identifiers. Doesn't seem like a huge conceptual leap but at least he bothered to notice that wrapping everything in XML was a shitfest.
You sound really misinformed. jQuery scales to many large applications. Check out Backbone.js, it relies on either jQuery or zepto and also look at all of the applications made with Backbone.js: http://backbonejs.org/#examples (Pandora, soundcloud, airbnb, rdio). jQuery is not meant to be anything but a utility library, and Backbone.js provides a View object that encapsulates this functionality nicely.
But, but, which seat is left? 
perhaps this can help you -&gt; [simple javascript inheritence](http://ejohn.org/blog/simple-javascript-inheritance/) its very easy to use and works fine with requireJS
Sorry, but I am pretty well informed. jQuery is a utility library for manipulating the DOM and abstracting away browser differences. Which is fine, but that's about it. jQuery promotes this jQuerish-pattern all over the place (Even the jQuery creator claims this, ever watched a conference by him?): - Grab a bunch of elements that match this query - Do stuff with them Which is OK for adding effects and event handlers to a simple site. But when things scale, it's hard to make reusable, solid code on top of this pattern. It just doesn't work. I am thinking of dojo/YUI/etc which provide things that have nothing to do with DOM, like class declaration and inheritance helpers, structure for declaring reusable modules and loading them on demand, build tools for packing things up, etc etc. These things are completely different. They have different purposes. I don't like to abuse jQuery for things it is not meant. I think there are much better things for building complex JS applications than jQuery, which is what it is, a DOM manipulating utility library. Backbone can be based on whatever they want to be based on. Applause to them. But I just prefer to structure my applications in a way that makes sense to me. Which is why I avoid jQuery for things other than "find this elements and apply some events to them".
I'd also like to point out that my opinion is not anti-jQuery hate, and that I'm not the only person with this opinion on earth (thank God): - http://addyosmani.com/blog/is-jquery-the-best-option-for-large-scale-app-development/ - http://rmurphey.com/blog/2010/08/09/on-jquery-large-applications/ - http://horia.me/jquery-and-large-apps - http://www.sitepen.com/blog/2010/11/15/from-jquery-to-large-applications/
Here's my unconventional approach to the problem. I just make an array and keep going through it, marking off which ones left (with an "X"). I'm curious as to what feedback you may have. var chairArr = []; for (var i = 1; i &lt;= 100; i++) chairArr[i]=i; var removed=0; var lastSkipped=1; var answer=0; while (removed&lt;100) { for (var i = 1; i &lt;= 100; i++) { if (chairArr[i]=="X") continue; if (lastSkipped) { answer=i; chairArr[i]="X"; lastSkipped=0; removed++; } else lastSkipped=1; } } return answer; 
Ah, good point. Forgive me, cast is incorrect. Convert should be the term. In C#, you can't do: int x = 65; string y = (string)x; &lt;-- compiler error but this does work: int x = 65; string y = x.ToString(); And technically, ToString() converts the int to a string rather than casting it, resulting in "65".
It took me a while to figure out how to use it as well. I think you should prefill the input boxes with a partial solution for each problem, that works for some of the tests but not others, and uses at least one group in the replacement. This would show the syntax to use for each box, and how the tests are shown to pass. Ie, in this problem put `/dog (dog)/` for the regex, and for the replacement put `dog &lt;strong&gt;$1&lt;/strong&gt;`
The dude should try to avoid words collapsed together, like &gt; varmyVariable; &gt; deletesomeObj.val; which should have been var myVariable; delete someObj.val; 
They are prefilled, but not with a partial solution - do you see that? If not, what browser are you using, and why haven't you upgraded yet?
agreed. It's totally sloppy. And these are all things that someone with a thorough JS education should know. Here's an example of something this could have been, in firefox, try this: function debugger() { alert ("hello world"); } debugger(); Or the fact that the javascript duck typing can be overloaded. That's something most people actually don't know. 
For a discussion on finding the right tool for the job, this article doesn't do a very good job. The real solution is trivial, which you will see once you gain an understanding of what the problem can be reduced to... var length = 100; // number of chairs var solution = 2 * ( length - Math.pow( 2, ( Math.ceil( Math.log( length ) / Math.LN2 ) - 1 ) ) ); Also, while bitwise operations can be both useful and fun they're not necessarily fast *in JavaScript*, and obfuscates the code far more than any performance gain is usually worth. If you're not dealing with bits, don't use them!
duck typing?
http://en.wikipedia.org/wiki/Duck_typing
even at this size, his point still holds I think...
Submitted a pull request: https://github.com/AndrejHronco/squares/pull/1
Exactly! That's what twitter developers did with their JSON API: the ID generation system uses 64-bit integers, so to prevent problems in JS the data contains both an int and string id. https://dev.twitter.com/docs/twitter-ids-json-and-snowflake
this is not strictly JS-related, but for general programming and IT nighmares I recommend reading [the daily wtf](http://thedailywtf.com/)
last one isn't wrong. Depends on the platform. in IE it's totally true ... although probably not in the upcoming ie10. If the article was dated say March 3, 2008, it would be universally true.
actually bitwise operations in javascript are fast - at least faster than the equivalent non-bitwise operations. Try them out on jsperf and you'll see. Also I agree they do obfuscate the code a bit, and if you read through you'll see that I make that point - which is why I show two versions of the code and go through the second less obfuscated piece of code and said not to use the math solution. The article is more on how to arrive at answers and algorithms. Giving a formula would not help in this case (exactly how would you describe the formula works? and how would a person arrive at the solution).
ok. I'm being serious here, I'll get back to you after I catch this train. I know for a fact that push was faster than += historically; I was pretty vocal about making that no longer the case a few years back. I thought IE8 had the problem still, but I could be wrong; unless not all IE8s use the same JScript revision core.
It's a nice little piece and easy to explain. I'd rather not use continue as it doesn't pop up much in javascript so might be confusing for newer users. Another thing I usually try when solving a problem is to avoid revisiting parts of a solution that have already been marked as no needed. In this case you will keep visitng and checking Xs on every pass which will slow things down (even if you are doing it at the start of the loop). So I'd recommend trying to think of a way not to revisit those Xs if you came up with that and wanted to try and improve the algorithm. But this doesn't make it any less of a valid solution - have you put it in a jsperf to see how it runs compare to the others?
Nifty! Quick clarification question: &gt; Our [memoized] decorator is a little limited: it can only handle methods that take zero or more arguments. Zero or more arguments would be ... every function. Did you mean "one or more arguments", so that JSON.stringify has something to work with? However, it looks like JSON.stringify(arguments) --&gt; "{}" if arguments.length == 0 (in Chrome, at least), so that would still work fine. --- A possible robustness enhancement, when you check for a memoized value: if (memos[key] != null) { oughta be if (memos.hasOwnProperty(key)) { especially if the memoized function may return null as a legitimate value. I sent you a pull request for that bit.
that's correct, I should probably explain that a bit better. 4 is 2^1 chairs further along from the last start chair (which was 2), 8 is 2^2 along from it's previous start chair (which was 4) and so on. The next start chair will be 2^N (where N is the previous calculated length - which you get from (the length - the start chair) / 2^N) along (if the last length was even or stays where it is if the last length was odd)
Ah, I had it in my head that 'along' meant from the start for some reason. My bad
+1, good suggestions from zspencer OP, you should merge his pull :)
ok so here's the first one, it refers to inline object forming: http://qaa.ath.cx/string-array-perf.html In chrome the first method on my machine is 28ms, the second throws an error and doesn't run (I don't know whether this is ECMA spec or the Googs fault here). In modern FF, the + scenario is 296 v. 423 ... + being faster, but not by much. My MBP doesn't have ie right now ... but yes, we've already established that I'm not claiming that array.push is faster now, in 2012 ... let me see what else I can dig up. 
If you have any samples or get this working the way you want you should post it here so we can benefit from any patterns or equivalent idioms you discover. Porting stuff that you know works to a language you know is a great way to get started learning a new language IMO. 
I never mentioned using jQuery as your application structure, but instead for dom manipulation.
Using your function Ive made a random animation: http://jsfiddle.net/QPVTS/1/
ok, I don't have the browsers at my disposal to do the other tests right now ... but here's the drama about this issue: https://bugzilla.mozilla.org/show_bug.cgi?id=56940
So, are we in agreement that `+` is faster than `join()`? You initially objected to my statement of such (with "in IE it's totally true" and then hinting that I may be correct in the future with IE10), but now you seem to be conceding the point. (And in light of the article being "tricks" for modern web dev, I don't see much need to argue about what may have been the case in the past -- though I'm fully confident that any IE6/7 tests will show the same thing that I've been saying this whole time; perhaps you may find browser X at version Y will be faster with `join()`, but as far as blanket statements go, I think we can disqualify the OP's as _false_.) 
It looks to me like that is a discussion of using `+` vs. `+=`, no? I see one comment there referencing `join()`, but that author didn't justify his claims in any way and I don't think anyone else even responded to it. On top of that, that bug was created in 2000; as far as web dev goes, that's _eons_ ago and IMO 100% irrelevant when discussion performance issues of code in the year 2012.
Haha, thanks!
Very interesting, but I don't understand why this is the case. I always figured Switch and If/Else statements were interpreted the same, and it was just a matter of readability/preference.
You can even factor out continue in most cases in the wild simply by negating the equation. continue in my eyes is a keyword of dubious value. It does have its uses but more often than not it's abused.
Sounds like a compiler optimization. I wouldn't change my code to take advantage of this. 
I love this trick and use it all the time, however many of my peers that have seen me use it have sneers on their faces. Are there any good critiques for why switch(true) shouldn't be used?
The performance gains are negligible in this case. I'd use whatever is more readable code whether it be switch statements or if-else statements. Also, I've updated your test case to cache the RegExp objects. Otherwise, in each iteration of the for-loop you're instantiating new RegExp objects: http://jsperf.com/if-else-chain-vs-switch-true/4
I'm seeing only a 3% performance difference in Firefox 16, making it hardly worth all the extra hassle. The difference is 15% in Chrome 23. Someone posted an edited copy that does basic string equality testing instead of regular expressions, and the if-else version completely dominates by a factor of about 5x, so this seems highly dubious. 
Ah, gotcha. It's quite memory-intensive, and I've seen a Chrome thread get to well over a gig with enough data rendered to SVG, which won't go so well for a machine with 256MB of memory. Thanks for letting me know!
Javascript interprets expressions in `if` statements as truthy or not, so developers expect conditionals to use this coercion. Saying `switch(true)` makes each following expression `if(expression === true)`, which is something written by a person who doesn't really understand Javascript.
&gt; Are there any good critiques for why switch(true) shouldn't be used? It's an uncommon idiom that people are not familiar with. You should [almost] always optimize your code for readability and maintainability. "Tricks" are a last resort that should only be used after testing has indicated a real world performance problem and you have not found a better recourse (better algorithm etc).
1% slower in chrome on Ubuntu 64 bit, and really weird code to read. 
A-hah, that makes more sense. How about phrasing it something like... ... is a little limited: It can only handle methods whose arguments are amenable to `JSON.stringify`. edit: on a totally unrelated note, I keep reading your username like "[Ra](http://en.wikipedia.org/wiki/Ra) Gone Wild". Too much /r/stargate ...
There seems to be some issues with the link, as I'm not able to resolve the host. http://jon-carlos.com/
I like both of them - so easy to read and great content
I'm not certain if that was an invitation to explain my solution or not, but here I'll try anyway: Imagine the central angle of the circular table being sliced into equal pieces like a cake, each to one chair. Our task is to find out which slice is left for us. Recognize that for each power of two, the final angle of the slice we arrive at is 2*PI (one whole turn). What happens when we then add another chair? We start from 0 again, displacing the angle a step. But not only is the angle of the slice displaced by a certain factor, it grows thinner too! Hopefully you'll try and imagine what I'm getting at by now. For every time the number of chairs reach a power of two, we know that the slice we're after "tips over" and starts from the beginning again. While it's not easy to visualize the changes in the angle or displacement of the slice we're after, it's easy to consider the changes in the chairs' indices, which is what we really want. We make an extra jump for each chair we add. So each of these "tip overs" we start a new series 1, 2, 3, 4, 5, ... Since we actually jump past half the chairs the series only consists of the even char indices: 2, 4, 6, 8, 10, ... In practial terms, what we need to do is to figure out at which point the last "tip over" occured (this is done by finding the highest power of two in the number/highest bit set, which is the same as taking rounding the binary logarithm of the number of chairs), var startValue = Math.pow( 2, ( Math.ceil( Math.log( length ) / Math.LN2 ) - 1 ) ) so that we can figure out how far into the new series we are, var seriesIndex = length - startValue so that we can multiply it by two to get the final result. var seriesValue = seriesIndex * 2; As you may notice my thoughts are all over the place, so no blame if you don't indulge in my way of reasoning. However, there are always multiple ways to visualize and solve a problem, and I don't truly sit there and ponder over the rotation of a piece of fruitcake when I want to solve something new. My point is simply this: it's good to understand your problem at more than surface value, and sometimes the code should come from your head rather than your fingertips.
You say that instead of if-else chains we should use switch, right? But doesn't the results says that if-else chains are faster than switch? Am I missing something here or you're just saying that switch is a more organized way to code? 
Very inspirational article. Really like the balance between theory and implementation :) Looking forward to Hooke's law, buoyancy, collision detection, contact resolution etc. Gogogo! Edit: just noticed I have pocket'ed two articles by you the last month (this and genetic algorithm 1). Keep up the great work!
No performance gain with Firefox. Looks pretty stupid to me. Well, lets assume it's 15% faster. Now imagine there is some function in your code which takes 70% of the time. Lets further assume that 10% of the time is spent inside some if/else construct. 0.7\*0.1\*0.15=0.0105 That's like... 1%. In a fairly unrealistic scenario. Micro optimizations are rarely a good idea. Focus on the higher level. Try to find a better algorithm. E.g. one which is n log n instead of n². That would actually help a lot. Or try to find a better data structure. Or add some caching. Micro optimizations like this are akin to rewriting bubble sort in ASM. It will waste a lot of time (now and in the future) and it also won't improve performance much (if at all).
Sorry to say, but if - else if will always perform faster. Secondly, forcing a logical switch statement to 'true' just to evaluate cases is a bad practice. Your example is not very practical and I wouldn't see myself writing statements like that.
Yeah I am slowly learning the complexity of javascript, but was finding writing one huge .js file was becoming a pain, hence this post :). Thank you for the advice I shall look into it
On phone otherwise I'd link you, but on the genetic algorithm post there's a mailing list to notify you of new articles and a survey question asking if you'd buy an ML in JS ebook... Fill it out if you'd like :)
Thanks so much! There's a mailing list on the GA post now which you can sign up for notifications about new articles :) Don't worry. Tons of physics and ML coming your way. Stay tuned!
Thanks for the explanation - though I must say it lost me. I've had a look at the formula and think this is what is going on: for any number 2^n we will land on the last chair as being left. Any extra chair past that will push our answer along by one. So all we have to do is calculate the number of the larget 2^n that fits in the length. The startValue you give is about calculating that largest 2^n that fits and the seriesIndex gives the leftovers that will push that leftover chair along. All we need to do then is multiply by 2 (as we are skipping every second chair). Does that sound about right? I think I can explain how to get to that solution in a good way (start thinking about 8 chairs, then try for 9, 10 &amp; 11 then you should notice the pattern, so something like induction). I'll add that in with the article.
Ok, thank you very much, I wasn't too concerned about having completely valid code because I was just testing, but I can see now how important it is.
Just remember. Every unimportant bug is just one more excuse for a browser to stab you in the eye.
Post some code so we know what you are talking about. Jsfiddle has an option for dojo
Hmm, the physics of this got me interested. ~~http://jsfiddle.net/AXXVu/~~ http://jsfiddle.net/5MF8B/ Here's the same thing but with multiple layers, using newtonian mechanics, and the different bodies attract each other. Trying to place them into orbit is a bit tricky though! But that's tomorrow's project maybe...http://en.wikipedia.org/wiki/Orbit_equation Edit: Also, really great article!
Obviously there is no hover on mobile devices because there are no pointers. How about binding to click (or "touch") instead?
Yeah - i guess that would be my option. But hover works on the android stock browser - at least on mine. So how would I go about doing a click or "touch"? Just make it a real &lt;a&gt;-link element? Or would I make an javascript onclick element? 
Hover sometimes works, but what you will find is the hover state stays applied to the element after. Scrolling divs on iOS5 can be done using the css property -webkit-overflow-scrolling:touch , but you are responsible for implementing/using a JS based scroller for Android. I'd suggest looking into frameworks out there. Many handle the "pressed" state you want (instead of hover), scrolling divs, etc.
Thanks! Cool example, but it looks like the math is broken somehow. I didn't get to look at it closely, but I actually made a game similar to that a couple years ago. Feel free to check out the source: http://burakkanber.com/orbit And I should say that this is exactly what I hoped would happen when people read that post. Get interested and explore your own projects! I love orbital mechanics, so you can count on that being an upcoming article of mine. For now, please keep working on yours. I'm on my phone so I can't look too deeply but it just *feels* like something's wrong there. Maybe a misplaced negative sign?
Heyo -- I took a moment to fork yours and re-write the math. I think the best way to demonstrate the difference is to comment out the static ball and then lower the yellow guy's mass to something more reasonable. http://jsfiddle.net/bkanber/R2pyc/ Run mine and you'll see that the balls attract each other, but in yours they start drifting apart! I haven't tracked down yet exactly what math in yours is doing that, but I also took a different approach than you (I used angle and resultant) so it's not comparing apples to apples. Anyway, I hope that gives you a jumping-off point to make your gravity simulation the BEST gravity simulation ever! Ack its so much fun! Excellent work so far! Keep it up!
The most important thing is to use a module system. Then you can focus on writing tiny pieces that do exactly one thing well instead of worrying over how you'll need to modify the environment in such a way that you can map out global namespaces that map to files. JSHint is also solving the wrong problem. Low-level syntactical trivia is far less important than higher-order concerns like having too much code in one place or too much nested state. All of those issues can be solved by being aggressively vigilant with breaking up big mudballs into small, well-tested components. Code coverage is unimportant. Write tests when they will save you time later on verifying correctness, which should be often. Be ruthlessly proactive about hacking down complexity. Use modules.
Why are you scrolling the page? Why not move the terrain instead and not have to deal with scrollbars? You could even do it like this with css: html { overflow: hidden; } body { position: relative; top: -123px; left: -123px; } and adjust the body css position instead of scrolling the window.
good god. the auto-play music... apart from that, it's pretty cool.
I don't understand the need for JSHint. Why wouldn't you use an IDE that gave you good code hinting in the first place?
Yeah, mine already uses Lint... I just can't remember the time before it. I just feel like if you have to go out of your way to "use" it, you're doing it wrong. Plus, I never make syntax errors. Having some warning around for unused vars and crap like that is pretty useful though. 
1. Continuous integration 2. Functional tests (PhantomJS / Selenium) 3. SublimeLinter + JSHint (not jslint) 4. Google Closure Compiler (removes excess js, warns on bad practices) 5. Magical Computer Crystals - http://www.amazon.com/Computer-Crystal-computer-radiation-Tourmaline/dp/B0032TJSZO/ref=sr_1_1?ie=UTF8&amp;qid=1347039630&amp;sr=8-1&amp;keywords=computer+crystal (just kidding)
Without the use of the 3d transforms, this looks strange because there is no perspective 
What do you guys use for code coverage? I looked at ScriptCover but it doesn't seem to be maintained, and doesn't work with the latest version of Chrome.
 This is needing someone to rip the cars, and turn it into JavaScript Gran Turismo!
It's gotten overly pedantic and more opinionated toward writing things in Crockford's personal style, rather than just checking for validity. JSHint is generally friendlier and more configurable.
&gt; Plus, I never make syntax errors. That's great that you're perfect and all, but what about all the other developers on your team?
I have a jslint/jshint replacement on the drawing board, but some other components need to come first. I hope to blow the competition away with this project. These first place results for lints/cleaners/minifiers do not seriously deserve the position they have. Too casual and easy.
Notify and/or make the change on behalf of the user.
Well.. yes, and no. It is a very good, and true, point that there is such a thing as presentation logic, and that using something like mustache with the logic that business and presentation is the same thing is broken. However, there is a case still for keeping Alan Turing out of your templates. When you build a turing complete DSL for generating HTML, different from the rest of the language and architecture of your system, you're going to have a bad time. There is a reason seasoned web developers shriek when they see php and html intermixed, because they know where that trail leads. Replacing the PHP (or python, or ruby, or whatever) with *another* language is not the solution. Your business and presentation tier should definitely be separated, but that does not mean you get to put arbitrary logic inside uncompiled and untestable text files. Besides, can't we all agree that templates is a horrible paradigm for building modern apps? They were great for composing static HTML, but that is not what we are doing anymore.
9
Front end of an enterprise web-app.
Just recently finished a font editing tool for a game. Before that a mobile app that uses phonegap to allow development for mobile in javascript. Oh and before that a front end for a custom cms for managing order entry.
I'm making the front-end of a music library web app which will allow you to "connect" (OAuth) with third-party storage (APIs) providers (think DropBox, Google Drive, etc).
I made [this](http://sidnicious.github.com/slitscan/) a few weeks ago. For the moment, it only works in Chrome with “Enable Media Source API” turned on in `chrome://flags`, and in Firefox nightlies with `media.navigator.enabled` set to `true`. Basically, it takes the video from your webcam and lets you do [things like this](http://imgur.com/a/A6ucA). [GitHub!](https://github.com/Sidnicious/slitscan)
[this is terribly relevant to my interests, teach me your ways](http://cdn.bulbagarden.net/upload/7/71/Vsseeker1.gif)
I am making games. http://magigames.org A tower defense game called Runestone Defense in complete, and a platformer call Tommy Utah Vs. The Space Zombies is in development. Both are playable for free at the given link. I have been a programmer for years, mostly Perl, but a lot of C and C++ also. I am relatively new to using Javascript for anything more than webpage effects, but I am really liking it.
&gt; I believe they promote bad practices and are perpetuated by dogmatic claims that don't correspond to reality. Beliefs aren't worth anything and there's a persistent indication that people should listen to other people's opinions. There's no evidence one way or the other. Do a study. A flawed incomplete study is worth infinitely more than this blog post. 
The backend of my personal blog, trivial front-end functionality of my personal site and client's sites, communication between server and browser (AJAX), several physics simulations using the canvas 2d API. My university had a hackathon right before classes started this year. My team (the winning team) made a y86 assembly sandbox. y86 is like x86 assembly, except it's just a teaching-language, meaning that no one actually uses it.. I think, I haven't taken the y86 class yet, I'm still a freshman. Anyway, my teammates wrote a server-side implementation of a y86 interpreter/REPL, and I made a webpage frontend for it that uses AJAX to send/receive data to the server. My code sends the command that you type to the server, and once I get a response back with updated data about the state of the imaginary-CPU, I update the flags, stack, and registers in the browser, and that's pretty much all there is to it.
The site seems to be down. Is there a mirror anywhere?
Clearly that statement is the initial hypothesis of the article, the rest of which is spent arguing for why it is true. Now, I happen to think the arguments are flawed (so I don't buy the hypethesis), but the *format* of this article, hypothesis followed by two or three logos arguments, is about as classic you can get in the field of rational discourse.
I have never really had much of a problem with code quality. My coding standards have always been fairly consistent, and my IDE (PhpStorm) has JSHint support for when I make a stupid mistake or forget a semi-colon. Tests are also pretty important. JSCheck is a pretty awesome library, based on Haskell's QuickCheck: http://www.jscheck.org/
Not to mention with tabs you can adjust your editor to render a tab as 4 tabs or 2 tabs as you see fit.
Count me in on the tab group. Makes regex work easier when the engine and I know that the space I am looking for is somewhere in the code and not in the layout.
Regrettably your problem is a lot bigger than javascript. Lose the late 90's table based porn layout and you'll probably get more help. Alright you could probably get away with making a single cell rowspanned across the whole thing, or position a div, although that will cover things up.
Awesome! If you sign up for the mailing list you'll get an email whenever new articles are posted -- or you can subscribe to the RSS feed. There will be more. Much more.
Very nice. :) I only wish you could zoom in/out for detail.
&gt; render a tab as 4 spaces or 2 spaces or N spaces fixed
The problem is you are using a general search and replace to condense your code for publishing. Use a minification tool. I don't like tabs because it's not just data - it's also formatting. It's the only ascii character who's display is configurable by the user. So called 'smart' tabs in modern IDEs solve this problem by encoding everything as spaces. void SomeMethod(int param1, int param2, int param3, int param4, int param5) With tabs, depending on the number of characters in the method name, it is impossible to guarantee the parameters will line up in columns if a user changes their tab size. If the method name length is not divisible by the tab size, it will be misaligned. 
With respect, if you're not using a regex to limit the whitespace to the start of the line (i.e. avoiding whitespace in quoted strings) then you're doing it wrong. Handling spaces in quoted strings is not a problem for any of the numerous off-the-shelf minimisers available so you should probably be using one of them if you're not sure how to do it properly yourself. Not to mention the problems that'll happen if/when you really do need to insert a TAB character in a quoted string... So I'm afraid I don't buy that as a valid excuse. I personally used tabs (set to a tab width of 4) for years and years until I got involved in Open Source software. Then I realised that spaces were the only way to go, using the expand-tabs-to-spaces feature of an editor, of course (i.e. press the TAB key and it inserts the right number of spaces). If no-one else ever has to read your code then tabs are fine, but if they do then spaces are the only way to be sure that your nicely indented code will look the same for anyone else. If you're accepting patches from other people then what looks like perfectly formatted code to them (for their tab width setting) will look all wrong for you and you'll waste valuable time reformatting their code. Even worse is when some kind soul spends hours reformatting all the code in your project because they thought you didn't know how to indent code properly. When in fact, it's just because they're using a different tab width. Incidentally, I now use 4 space soft tabs in all my code except for HTML/JS where I use 2. HTML tends to nest to a much deeper level than most programming code so 2 spaces avoids everything getting pushed too far off to the right of the screen. Given that JS is often embedded in HTML, it makes sense to use 2 to keep things consistent. Although I do sometimes switch back to 4 for stand-alone JS code. TL;DR: friends don't let friend use tabs. 
&gt; You gotta use tabs, that way you can search and remove them. If you use double or quadruple spacing you may find identical occurrences in strings. Is a regex to match spaces at the beginning of a line really that hard to write?
I wonder if lots of people got in the habit of using 2 spaces in JavaScript rather than 4 spaces like in most curly-brace languages in order to cut down on file size. Yeah yeah I know, use a minifier. You're saying you've never in your entire life delivered a non-minified JavaScript file over HTTP? (And FWIW I use 4.)
I was close to agreeing with you, and then ... actually, I don't know what my IDEs are set to. Cleaning whitespace is what commit hooks are for.
Not being able to use JS is my only JS nightmare, specially not being able (or allowed) to use Node
Any decent editor/IDE will do that with spaces as well. It should have a setting like "use spaces instead of tabs" and will automatically handle that based on your indentation settings.
Both of his points are really weak &gt; Separation of Concerns My Ass Why is it assumed that the presentation logic (data massaging) is mixed with business logic? If someone does that then I agree, you are just reshuffling the same problem. It's standard to have the logic-less markup in a template, the presentation logic in a view component and the business logic in a library component or some similar architecture. This is blindingly obvious to me and to every other experienced developer I've discussed template issues with. This is either a strawman argument or written by someone who has no experience with designing actual architecture that fits your problem instead of using whatever your framework gives you. It just doesn't fit with how logic-less templates are actually used in practice. Most of the people using them are comfortable stepping out of the hello world example architectures of their framework. &gt; Micro- this and minimalist that come at a price: you will inevitably find yourself reinventing the wheel. If your templating system doesn't support conditionals, or sorting or date formatting, you will have to implement it all yourself, in the god-awful data-massaging portion of your code. Describing using a full featured language as "reinventing the wheel" seems like a joke. You always have to do this data massaging glue code. Nobody likes writing glue code, it's boring and it sucks. You can either have it spread out in your template language which is probably much less expressive than your application language or you can have it all in one place written in your application language. The entire impetus behind logic-less templates was that after adding conditionals, sorting, date formatting, etc. to templating languages the engineers discovered that they had poorly reinvented all those features in a half assed language that was harder to use than their main language. Why not reinvent no wheels and use the fully featured language to do the logic? What language do you use where you have to re-implement "conditionals, or sorting or date formatting"?
You can. Use the scrollwheel.
isnt 4 spaces pretty much exactly the same distance as a tab in most IDEs?
What a worthless article. He claims that the most popular, most used, and most familiar project is "out of touch" with the JS community because it uses tabs instead of spaces? Wat? God forbid if he does a study on vi vs emacs.
&gt; If you're accepting patches from other people then what looks like perfectly formatted code to them (for their tab width setting) will look all wrong for you and you'll waste valuable time reformatting their code. Even worse is when some kind soul spends hours reformatting all the code in your project because they thought you didn't know how to indent code properly. When in fact, it's just because they're using a different tab width. These points are a matter tab-width and not tab characters vs spaces. Both have pros and cons and are used and usable in large projects. It's a religious war. The only way to guarantee consistency is to agree on hard/soft tabs and tab width among the project devs and to make sure patches are accepted following those styles.
Yep! This is low-hanging fruit so it's already optimized by most just in time compilers. I would go as far as to say that the key to performance these days is identifying and avoiding unnecesary memory allocation. Avoiding unnecessary function calls can help in critical sections. Just please profile before making premature optimizations.
ok, thank you two!
Cool. Wish you could scroll faster/more though. Still a 9/10 project.
This may turn out to be a performance problem for a completely different reason aside from the switches. For example, all of those uniforms. You have to profile, either using a profiler or just using getTime()s in different sections. When you profile your program, it could point one of its fingers at this function. And you might assume that it had something to do with the switch statements. But it might not. It could be all of the uniform calls adding up to a lot of time transferring data to WebGL. Or it could be something else. Very small seemingly completely unrelated changes can make huge differences in performance. You really have to do profiling if you have a performance problem. And you can't assume that avoiding or leaning on certain language features is necessary or will lead to optimal performance. Having said that, certain Javascript engines have known quirks. For example, http://www.youtube.com/watch?v=UJPdhx5zTaw
Same
You'd actually want to use apply instead of call and even then, for most browsers you need to copy the arguments from the arguments array-like object to an actual array before passing them on. Passing a configuration object, instead of multiple paramenters, to a constructor function is a common pattern in Javascript and would be the easiest way to solve this. I can find examples if you don't understand what I mean.
I have used the configuration object in the past, and that's what I was using in my previous setup. I was getting tired of putting in all the brackets, and I thought it would be nice to use unlimited arguments (this is just a console tool). function EventSeries() { if (!(this instanceof EventSeries)) { return EventSeries.apply(new EventSeries(), arguments); } }
object.\_\_proto__ is non-standard, just do this: function EventSeries(arg1) { ... if (!(this instanceof EventSeries)) { return new EventSeries(arguments) ... var args = 'length' in arg1 ? arg1 : arguments; ... Basically accept an array in addition to accepting variable args
I think you're right. That was a very bad idea. Not only that, but I was changing the Window's prototype XD.
Ahhh, that's what was I looking for! Thanks, very elegant solution.
Just be careful with arg1, if it's a string then it has a length and is not an array... if you're using jQuery you would use var args = $.isArray(arg1) ? arg1 : arguments 
&gt;Your javascript has a lot of issues. Some lint issues and even closure compilation issues. &gt;Even though it works on its own, it's just not syntactically correct. While I've learned a lot since I wrote this a few years back, what programs did you use to check on the issues? I can spot a few by hand, but I'm sure I'm missing many. This is a sad question, I know, but have you a list I can check my own thoughts against?
Oh wow! It even adds the object references to short object names! var a=Math.sqrt,e=Math.random,f=document.getElementById("i1"), i=document.getElementById("i2"),j=document.getElementById("canvas"). getContext("2d"),k=f.getContext("2d"),l=i.getContext("2d"), m=k.getImageData(0,0,800,800),n=m.data;function o(b,c){for(var d=Math.PI/180, d=[a(22)*d,a(b)*d,a(c)*d],y,z=-1,g=-400;400&gt;g;g++)for(var h=-400;400&gt;h;h++) {y=Math.pow(h*h+g*g,0.52);for(var q=0;3&gt;q;q++) n[++z]=127*Math.sin(y*d[q])+127;n[++z]=16}return m} function p(b,c){return b+e()*(c-b)}k.putImageData(o(30,35),0,0); l.putImageData(o(25,28),0,0);var r=p(-300,-100),s=p(-300,-100),t=p(-300,-100), u=p(-300,-100),v=p(-5,5),w=p(-5,5),x=p(-300,-100),A=p(-300,-100),B=p(-300,-100), C=p(-300,-100),D=p(-5,5),E=p(-5,5); setInterval(function(){var b=t-r,c=u-s,d=Math.max(a(b*b+c*c),1); v+=(20*(b/d)-v)/10;w+=(20*(c/d)-w)/10;r+=v;s+=w;0.05&gt;e()&amp;&amp;(t=p(-300,-100), u=p(-300,-100));b=B-x;c=C-A;d=Math.max(a(b*b+c*c),1); D+=(20*(b/d)-D)/10;E+=(20*(c/d)-E)/10;x+=D;A+=E;0.95&lt;e()&amp;&amp;(B=p(-300,-100), C=p(-300,-100)); 0.1&lt;e()&amp;&amp;j.drawImage(f,x,A);0.1&lt;e()&amp;&amp;j.drawImage(i,r,s)},11);
Right now I am re-writing a compiler, and building more stuff into a HTML5 painting application. I've also been toying around with building my own alternative to jQuery recently, as it just isn't right for web apps which are 99.9% JS.
If you're looking for a headless CLI browser, Phantom is awesome and is like a scriptable WebKit. 
Just my two cents - if possible you might want to encapsulate each conditional statement into a function and just pass the function in. Make sit more testable and less work for the computer.
Or you could read the text above the visualization and rotate/stop rotating use the keyboard shortcuts ;-)
I agree, this seems like a good compromise. NPM has stood the (relatively small) test of time and it's a really good package manager. The only thing that has me confused about Bower is why I would need to entire source of a repo when all I really want is the compiled .js file. I don't need the readme and all the other docs when I do bower install backbone, I just want it to download backbone.js and put it in the directory i invoke the install from. It's good, but it does have some room for improvement.
That might happen, when the web components spec is released... or so I'm hoping http://dvcs.w3.org/hg/webcomponents/raw-file/tip/explainer/index.html Having all those files doesn't bother me, If bower supports some kind of concatenation+minification/requirejs support so that I dont have to look around for the correct files...
I think that you and I are just not going to agree on this, mate.
Also, there's nothing to stop an object literal with a length property being sent either. arg1 instanceof Array is pretty robust.
I'm not sure what the issue is but I am guessing you are running into an issue where you are creating/simulating classes with JavaScript and call a method on an object and then it doesn't work right. You debug it and find out that inside of the method call, "this" does not refer to an instance of the class, but is something else, like Window. If that is the issue then you probably want to catch it before you get into the body of your method. In other words, you need to use call or whatever technique to ensure initially that you are acting inside the scope of the object. There are another of ways to get around this. You could just use call or apply one step sooner. In jQuery, you can use .proxy(). Prototype library has bind(). There is the function given here http://www.bennadel.com/blog/1517-Binding-Javascript-Method-References-To-Their-Parent-Classes.htm What I prefer to do is just use CoffeeScript with =&gt; http://coffeescript.org/#fat_arrow. For example: class EasiestReallyThis constructor: (@whatisthis) -&gt; thisAlwaysTheClassObj: =&gt; console.log "This thing is definitely a #{@whatisthis}" test = new EasiestReallyThis('easyWay') $('.mybutton').click -&gt; test.thisAlwaysTheClassObj() 
That has nothing to do with preferring there to be logic in your templates or not.
&lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js"&gt; &lt;/script&gt;
If you're running this from locally (IE opening the HTML file in your browser directly) the URL you're using for jquery won't work. If that's the case, change the beginning to http:// rather than //.
I am running it in chrome. So if i reference the JQuery in my HTML and i write JQuery funtions in the external sheet it will work?
Yes... the problem was the invalid link to jQuery.Change the link as noted by jrsmith. Next, pop open developer tools, go to console and try typing $ to see if it is jQuery. If it's not defined, then you still have a problem, otherwise, you should be good to go. 
No, jrsmith meant "i.e." as in "in other words". What he's asking is, are you loading all the files directly off your hard drive into the browser, or is it already on a website (URL begins with http:// or https:// or something)? Also, you really should name your .js file something other than `jquery.js`. Just make it ... `script.js` or something. And you don't need a `&lt;/input&gt;`, input tags are self-closing (like `&lt;br&gt;` and `&lt;link&gt;`).
I think running your markup (html source code) through a validator then will help you in many ways... http://validator.w3.org/check There were 18 errors (and 6 warnings) in your source, try your best to validate your source and these sort of problems start disappearing. Developer tools (has console) which is in chrome. If your on windows it should be ctl+shift+i or go to tools-&gt;developer tools. Click the console link. There's lots of google that can help you with that too. :-) happy coding. 
The "best" way would be to do it the way $.isArray works, which, expanded is: Object.prototype.toString.call(arg1).slice(8, -1) === "Array"
your console is built into the browser - right click on anything (in chrome) and select "inspect element". From there you're on your own, but exploring the developer panel (the thing you just pulled up) should be pretty helpful in general. 
1. JavaScript files (included with the &lt;script&gt; tag) are referred to as "scripts," not sheets. CSS files (included with the &lt;link&gt; tag) are referred to as "stylesheets." 2. As other folks mentioned, you need to stick your head in the console and see what is going on. As a coder, your debugger is your best friend; it will show you everything from 404s (if your &lt;script&gt; isn't working) to syntax errors (if jQuery.js has some invalid code). [Here are some videos](https://developers.google.com/chrome-developer-tools/docs/videos) you can watch to get familiar with the debugger. 3. Reddit lets you paste code by prepending four spaces. Click formatting help under the textarea for more info 4. You do not need a semicolon after a function statement. You only need a semicolon if you use assignment when defining that function, i.e. var myFunc = function() { alert('moo'); }; 5. You do not need to close &lt;input&gt; tags (the &lt;/input&gt; is not needed). 6. Use something like jsFiddle to post your code so people can see it running. I've gone ahead and [posted your code here](http://jsfiddle.net/y9vDA/2/), correcting a few things and showing you a best-practice way to make this work. 7. Read about JavaScript. Get a book if you like, or look at one of the many awesome online resources, such as the [MDN JavaScript Guide](https://developer.mozilla.org/en-US/docs/JavaScript/Guide). I hope this helps you. Remember, the answer is always out there waiting for you to read it. **Edit**: added answer from below related to jQuery not loading problem: That's because you are loading a file in the browser using the file:// protocol. When you specify a URL without the protocol, such as //ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js, the browser will use the protocol of the containing page when resolving the URL. As a result, your script tag was pointing to your local file system. That is, the URL it was trying to hit was file://ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js, which definitely doesn't exist (and Chrome's debugger would show you that). As other posters pointed out, simply pre-pend the protocol (http or https) and a colon to the URL and it will resolve correctly http://ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js
Thank you for giving an in depth answer and a resource. 
Also, a useful tool in addition to everything that has been mentioned: http://jsfiddle.net/ - for creating simple demos, like with your code above (I did so below.) - this helps sharing your code with larger audiences. http://jsfiddle.net/pU3u6/1/
Came here to say pretty much the same thing. I have spent the last half hour screwing around with bower, but I don't understand why I would want a separate folder, or why I would want my target js file renamed to index.js within that folder. Like you said, I just want to be able to say 'bower install backbone' and have backbone.js added to the current directory. If it did that, I'd be very happy with it.
Is there a way of using this without Node.JS? Perhaps the one in Chrome?
use object.hasOwnProperty, it's faster than string in object. andar[ andar.hasOwnProperty("oninput") ? "oninput" : "onkeyup"] =... Or check it against undefined for the fastest way: andar[ andar.oninput !== undefined ? "oninput" : "onkeyup"] = ... Edit: A [jsperf](http://jsperf.com/hasownproperty-vs-in-vs-undefined/16) of the many ways to do such a check reveals "string in object" is the slowest of all methods to do such a check.
AFAIK, prototype allows to define methods/properties of an object (I might be using the wrong terms, correct me anyone?). Here, String acts as an object. I can add a method using prototype (methods are basically functions inside objects) so that whenever I do "someString".rotate(value) it carries out the rotate method.
Making a canvas based game. May use Node.js later to make it multiplayer too!
wow thank you, I had no idea you could do that!
I updated the Wikipedia entry with an implementation that doesn't modify the parent object or pre-calculate the "currentCost": http://en.wikipedia.org/wiki/Decorator_pattern#JavaScript_.28coffee_making_scenario.29 . Would be curious to get people's thoughts.
Wow, just peeked inside and already learned something new about jQuery (admittedly I should've already known about `has()`, but I didn't) and also some features of Chrome's dev tools that I didn't know before (on the Chrome dev tools cheat sheet).
Some really good stuff here, but for a lot of devs, no Windows support is a bit of a deal breaker. (I realize it's on their radar: http://twitter.com/yeoman/status/245212856159715328)
The video got me divided between Yeoman and Iridium. Both are opinionated and they cut a lot of boilerplate. Handlebars template serving and tests will break the deal for me.
Chrome dev tools cheat sheet you say?
Ya! Left-side menu on [this page](http://jqfundamentals.com/chapter/javascript-basics). It's not comprehensive, but there's quite a few things on there that I didn't already know.
Ah yeah, I hadn't go up to that point. Already bookmarked the page!
can someone explain what it actually does?
Yeah, an ubuntu VM as if it's one big IDE. That's perhaps one way to look at it. 
As someone who consults with windows web devs I can say with absolute certainty that they exist and are a large segment of the population. I don't develop on Windows, but it's important for a utility to support many platforms to hit critical mass :)
I know eh?! Totally increased my performance like 10x! 
It was three, but then the assignment line was over 80 char length.
It's a relatively new event (so only new-ish versions of browsers support it). It fires when the content of the input changes. So, it'll trigger the moment you press the key, paste the text, etc. instead of when you release the key. If you compare them, oninput feels more natural.
It's kind of easy to forget that not everybody has a high powered computer at their fingertips.
&gt; They get paid about as much as a ***plumper***, and have very little to do with professional software development. I'm not sure what amuses me more: the over-generalization of Windows developers, or the over-the-top comment about their BMI.
Is there a way to make this work with Windows?
If you you can get Ruby to work you should be fine -- though the default configuration settings have unix directory delimiters. If you overwrite those it might work. Are you running into a particular problem?
&gt; small, simple, reusable views Bingo... I still believe that templates should be stupid oafs who accept what their controller/view throws at them... but huge full-page templates can be done away with. Each dynamic bit should be its own view, responsible for itself.
&gt; What language do you use where you have to re-implement "conditionals, or sorting or date formatting"? My super awesome template language!!! Because I'm too lazy to massage the data BEFORE sending it off to be rendered!! :-/ /s
Templates should be logic-less (with the exception of if/else boolean conditions). You're absolutely correct; front-ends are only going to become more rich and more complex... Why add to it by massaging data at the template stage? The decrease in performance alone is enough to steer me away. 
Mustache can be language agnostic because it **doesn't rely on logic**. 
No. It's easier for Mustache to be language agnostic because it doesn't rely on logic.
* Develop a project using only VanillaJS. Don't worry about animation right now (unless it's CSS). * Don't get discouraged when you realize that the more you learn, the more you realize you don't know.
Minify that shit!
&gt; please don't prematurely optimize your code This needs to be a poster on ever developer's office/cube.
$20 says he's an early college student with no professional background... Love, - Amused Windows Developer
Hint #1: Don't use the global flag. Not sure why, but it stops some of the tests from passing. Hint #2: Don't feel the need to match all the cases! There are a lot of them, and writing a regex to pass all of them could take a while
I just started this project as a learning experiment. I've been wanting to play Stratosphere again for some time but it won't run on Linux and doesn't really work on Vista VMs, which is what I have. Because of this, I've decided to try to rebuild something like it in Javascript. While a different game language like Java or C++ might be better suited for this, with the various libraries and whatnot, I think THREE.js could handle most of what I want to do. The idea is to keep it as simple as possible without sacrificing the fun of the game. This is an open source project that will likely utilize the Apache license (I haven't checked into the various licenses yet). Basically, all code is open and free to do whatever you want with.
Also: a leaderboard, or some exposition of the code you used to make the page
fwiw, so you know I'm not talking out my arse: L14oPzojKFswLTlhLWZdezEsMn0pXDFcMXxyZ2JcKCgwKlswLTkuJV0rKVxzKixccyowKlwyXHMq LFxzKjAqXDJccypcKXxyZ2JhXCgoMCpbMC05LiVdKylccyosXHMqMCpcM1xzKixccyowKlwzXHMq LFswLTkuJSBdKlwpfGhzbCg/OmE/KVwoKD86WzAtOS4lIF0rLFxzKjArJT8sWzAtOS4lIF0rfFsw LTkuJSBdKyxbMC05LiUgXSssXHMqMCooPzoxMCk/MCU/KSg/OixbMC05LiUgXSspP1wpKSQvaQo= *(base64)* 
It has a few functions primary... and I'll try to explain them in plain english using my understanding 1) Allows you to "initialize" a project very quickly. Basically you use "yeoman init" from the command line and it will build a project from you in the directory you're in. You'll answer a few questions (like whether you wanna use html5bp, twitter bootstrap, etc) and when you're done answering questions it builds the project for you in your directory. It saves you from browsing around downloading files each time you want to initialize a project. 2) It has a virtual web server. Use "yeoman server" in the current directory to launch a temporary server. This means you dont have to have virtual servers for each of your projects... rather you can just pop open a virtual server any time you're going to work on a project. When using yeoman server, livereload is automatically used AND coffeescript/compass files are automatically compiled 3) It has a "build" command which will take your project and make it "deployment ready". Basically it will optimize your images, compile all your scripts (coffeescript/compass) etc There are OTHER features (which area also great) but this covers the basic stuff. Basically it makes the process of initializing and deploying a project much more painless.
&gt; allow multi-line entry of the regex, with whitespace. This would help as the overall structure demands a big `(?:..)|(?:..)|..` which gets hell ugly fast Yeah, I know. The JavaScript regex engine doesn't allow it, so I'd either have to mash regexes before turning them into regex objects (which I imagine would just be a case of checking for the x flag and removing all whitespace), which I wouldn't be a huge fan of, or I have also been considering using xRegExp. Still experimenting with it, though. &gt; some js to help navigate or more helpfully display the matches and fails Yup. I was considering reordering it so that the failed cases were all at the top, but then people who only want to do part of the challenge (such as matching the hex values only) will have to do quite a lot of scrolling. &gt; a clearer indicator of when the entered regex has been processed and results updated It updates when there is a valid regex on the keyup event. It will tell you that the regex is invalid when the blur event is fired. &gt; links to read more about JS regex rules and the CSS colour syntax used in this example I meant to finish an article about the CSS colour syntaxes yesterday. It's half written, I'll concentrate on finishing it after I have written this comment. &gt; Also: a leaderboard, or some exposition of the code you used to make the page It's all on GitHub: https://github.com/callumacrae/regex-tuesday
I don't think it's a limitation of your page at all. Sorry; I should have clarified my Chrome/Firefox comment! To more easily determine my group numbers I threw the regex in the command line of Chrome/Firefox My first attempt was the troublesome one: /^(#(?=.{3,6}$)|rgb(a|(?=([^,]+,){2}[^,]+$))\()((..?|[0-9.%]+)(\5{2}$|\5{5}$|,[ 0]*\5,[ 0]*\5(,[^\)]+)?\)))$/i In the outer group where I `hex|rgb`, I tried to `hex|rgb|hsl.*`, and anything in the last option for that group, even just `.*`, would cause the entire regex to silently fail. I'm wondering if it's a regex compilation/assertion/recursion/etc limit enforced by JavaScript's implementation of regular expressions. Alternatively, it could have just been my horrendous expression. **Edit:** Sorry, an actual example: /^(#(?=.{3,6}$)|rgb(a|(?=([^,]+,){2}[^,]+$))\()((..?|[0-9.%]+)(\5{2}$|\5{5}$|,[ 0]*\5,[ 0]*\5(,[^\)]+)?\))|.*)$/i
It passes 21 out of 40 of the tests.
Weird, I have absolutely no idea why that is happening.
&gt; Yup. I was considering reordering it so that the failed cases were all at the top, but then people who only want to do part of the challenge (such as matching the hex values only) will have to do quite a lot of scrolling. Yeah I was deliberately vague in my suggestion .. there are many ways this could be altered that would probably end up significantly worse for some subset of users. It's a tricky UX question :-). &gt; It updates when there is a valid regex on the keyup event. It will tell you that the regex is invalid when the blur event is fired. My browser tends to lag a bit, so this hit me as inefficient a few times. A better approach might be to wait until there has been no keyUp for some interval - maybe 250 or 500ms? Or let the user initiate it by pressing enter, which is what I first thought was happening. In any case, I think it's *essential* to give the user some feedback. It sounds like you've coded assuming a fast enough machine that everything happens instantaneously - I'm here to tell you that's not the case, and even if it were some of us find it rude and disempowering when software does things of its own volition without telling us it's busy or finished. Using "Enter" actually strikes me as the best approach - another thing I was wanting when doing the challenge was a quick comparison of my current result with my previous one. Nice little toy with only a little code. Thanks for sharing!
Yep, and I only tested it in fast browsers. I'll see if I can slow my computer down enough later that I can test it and see if I can improve it.
Hi, Good idea you have, maybe you can start to implement GameQuery http://gamequeryjs.com/
Nope! You can even: {{#property}} {{property}} {{/property}}
Cheat! :-D Yep, I'll be posting them every Tuesday - I'll be posting them on Reddit and from my twitter account.
Has anyone here actually tried it? I hear great things about RubyMine.
I signed up to be notified, and never got anything. :(
Thanks. I'll look into adding this to the system for collision detection. I'm not too sure about the other features yet.
Nice. I didn't know about conditionals; I really should do something about the PCRE thing...
Yeah. I think it's going to be improved in JS 2.0, because it really sucks at the moment. I was also considering using the XRegExp library, as it adds some useful features.
I think all Jetbrains IDE's I tried so far are great! I also love that it's cross-platform, as I'm on both Windows and Mac. I use PyCharm at work and WebStorm at home and I used to use PHPStorm when I was still using PHP. 
The question asks for a _grayscale_ color ...
2 minutes of my life I wont get back
Are there any advantages over PHP Storm? Does it have anything that PHP Storm does not offer?
Doesn't sound like it. From the product page for PHP Storm: &gt; Note: PhpStorm includes all the functionality of WebStorm (HTML/CSS Editor, JavaScript Editor) and adds full-fledged support for PHP.
I own WebStorm. Best $49 I've spent on Node development. I was developing on both Windows and Linux platforms and the license covers both and the experience was consistent on both. I was coming from a Microsoft development background, and found the transition from VS2010 to WebStorm very easy, as I used Resharper (also an awesome JetBrains product) in VS2010.
Because they're not grayscale :-)
Oh derp, I swear I read the description a few times and completely skipped over the greyscale part!
Mainly the price: WebStorm: 47 EUR vs PHPStorm: 94 EUR. WebStorm's default configuration focuses more on front-end, and more front-end libraries are installed/enabled by default. By the way: All JetBrains personal licenses are currently on a 50% sale.
To prevent form submission, you need to return false in a function that listens to the submit event. That is: $('#myForm').on('submit', function(evt) { if (!formIsValid()) return false; }); It is a common misconception that you should listen to the click event of the submit button. Note that your form can be submitted with the enter key, which does not result in a click of the submit button, so you must listen to and cancel the actual submit event of the form. I'm not sure about your plugin's API, but it sounds like you found that answer already.
You asked for videos, but I find these things are often best communicated with text you can read at your own pace, so I've included a bit of both. 1. Check out the [MDN JavaScript Guide](https://developer.mozilla.org/en-US/docs/JavaScript/Guide). It will walk you through functions, variables, etc, just as you asked. 2. As others pointed out, [Crockford's video lectures on JavaScript](http://yuiblog.com/crockford/) are excellent and give you some history as well. I would recommend watching these after you've gone through the MDN tutorial. 3. Learn about design patterns. [Here is a nice resource](http://addyosmani.com/resources/essentialjsdesignpatterns/book/) that puts several in the spotlight. 4. Once you start coding, you need to become best friends with your debugger. [Here are some videos](https://developers.google.com/chrome-developer-tools/docs/videos) you can watch to get familiar with Chrome's debugger.
Although I still prefer Sublime, I think WebStorm is a stellar IDE for JavaScript.
Missed your response and didn't see it until now...thanks for the link and ideas. I'll look into it more.
&gt;`/^#([\da-f]{1,2})\1\1$/i` FTFY
Awesome stuff! I use PhpStorm, so hopefully that'll get an update soon with all the new features.
Seeing as you didn't get any responses, I'd suggest that you give it a whack and then come back here if you have specific problems. It's been forever since I made a userscript, but in a nutshell, I'd think you would need to do something like this: First, constrain the script to only activate on the domain for that forum; even better if you can constrain it to a particular URL. This will prevent unnecessary processing and potential problems when not on that site. Then, have a function run whenever you hit that specific domain/url/etc. that will check for the existence of the chat box; in this case, you probably want to be looking for `id="vsacb_entermessage"`. One way to do this might be to add an onload/domready function to look for this element, like so: function hasChatBox() { return !!document.getElementById('vsacb_entermessage'); } Next, once `hasChatBox()` returns true, then call a function to insert the specific text; this might look like: function insertBbCode() { document.getElementById('vsacb_entermessage').value = '[COLOR="FFA500"] [/color]'; } That should be the guts of it, though I'm sure there's several things I'm overlooking :)
Conditionals seem to work for me. Are you using a lookahead in the if? eg. ?(?=a)b|z
It's worth pointing out that if you ever deal with ANY PHP files, WebStorm is not likely the right choice for you as it treats those files as plain text with no syntax highlighting, code hints, in-file navigation, etc. For that, you need phpStorm. Wordpress templates are an example I've seen complained about before. I believe the same goes for perl, ruby, etc. WebStorm is strictly for JavaScript, HTML, CSS, and the various flavors they've spawned (coffeescript, sass, less, etc). 
Thanks, yes, I started off just writing code to try to assemble my thoughts. I usually refactor my code a couple times before it hits production to ensure everything's cool. I changed the div code to submit the form, and then overrode the submit to check for validation first. (Which looks like thats what your recommending here too.) I also threw a tabindex and an enter 'keydown' event handler for my submit 'button' as it was actually just a div. Not sure how reliable that is on all systems, but I've always hated the mess of styling a proper button. Any ideas if there's a better way to approach that part? 
I've used PHPStorm exclusively on Linux and have not had that problem. 
have they had these competitions before ? I would be interested to see some of the past winners
I gave it a try - there are some elements I like, but one thing I found was it didn't seem to do full reflection on my require modules - it seems to break where the module returns a function that is an object - doesn't output any members, and cannot be inspected in the debugger. If it did this, then I'd buy it
It also depends on what you want to do with the full screen interface... how you wan tot scale the aspect ratio incompatible media. OP: It feels like you are asking too generic of a question. Do you have a goal in mind?
I am trying to do two things: one is to make a full screen image gallery, the second is to make videos full screen when clicked. I can use thumbnails as buttons or not. 
Did you make sure to explicitly include Require.js in the Project preferences (or globally)?
what if the content doesnt nicely fit the screen? this is mostly a css issue by the way. keep it simple is my answer.
cool script duder but it didnt play nice with my built in cam using chrome. Uncaught Error: INDEX_SIZE_ERR: DOM Exception 1 fancycam.js:62
You could add support for &lt;= IE8 opacity using filter: http://msdn.microsoft.com/en-us/library/ms532967(v=vs.85).aspx
I got it but now I feel bad about myself, just because this looks horrendous (388): /^#([0-9a-f]{1,2})\1\1$|^rgb\(\s*0*([0-9\.]+%?)\s*,\s*0*\2\s*,\s*0*\2\s*\)$|^rgba\(\s*0*([0-9\.]+%?)\s*,\s*0*\3\s*,\s*0*\3\s*,\s*[0-9%\.]+\s*\)$|^hsl\([0-9\. ]+,\s*0%\s*,[0-9\. %]+\)$|^hsl\([0-9\. ]+,[0-9\. %]+,\s*(0|100)%\s*\)$|^hsla\([0-9\. ]+,\s*0%\s*,[0-9\. %]+,[0-9\. %]+\)$|^hsla\([0-9\. ]+,[0-9\. %]+,\s*(0|100)%\s*,[0-9\. %]+\)$/i Currently optimizing it, here is what I have so far (239): /^(#([\da-f]{1,2})\2\2|rgb\( *0*([^,]+) *, *0*\3 *, *0*\3 *\)|rgba\( *0*([^,]+) *, *0*\4 *, *0*\4 *,[^,]+\)|hsl\([^,]+, *0% *,[^,]+\)|hsl\([^,]+,[^,]+, *(10)?0% *\)|hsla\([^,]+, *0% *,[^,]+,[^,]+\)|hsla\([^,]+,[^,]+, *(10)?0% *,[^,]+\))$/i This feels a bit like cheating (190): /^(#([\da-f]{1,2})\2\2|rgb\( *0*([^,]+) *, *0*\3 *, *0*\3 *\)|rgba\( *0*([^,]+) *, *0*\4 *, *0*\4 *,[^,]+\)|hsla?\([^,]+, *0% *,[^,]+(,[^,]+)?\)|hsla?\([^,]+,[^,]+, *(10)?0% *(,[^,]+)?\))$/i Really cheating (168): /^(#([\da-f]{1,2})\2\2|rgb\( *0*([^,]+) *, *0*\3 *, *0*\3 *\)|rgba\( *0*([^,]+) *, *0*\4 *, *0*\4 *,[^,]+\)|hsla?\([^,]+,( *0% *,[^,]+|[^,]+, *(10)?0% *)(,[^,]+)?\))$/i Okay, I'm done trying to hack together something smaller (147): /^(#([\da-f]{1,2})\2\2|rgb\( *0*([^,]+) *, *0*\3 *, *0*\3 *\)|rgba\( *0*([^,]+) *, *\4 *, *\4,[^,]+\)|hsla?\([^,]+,( *0% *|[^,]+, *(10)?0% *).*)$/i I lied, this is too much fun (128): /^(#([\da-f]{1,2})\2\2\b|rgb\( *0*([^,]+)( *, *0*\3){2}\)|rgba\( *0*([^,]+)( *, *\5)+|hsla?\([^,]+,( *0% *|[^,]+, *(10)?0% *))/i Here is my final regex, 96 characters long, and very hackish (I definitely hope that no one is using anything close to this): /^(#([\da-f]{1,2})\2\2\b|rgb\((.+)([0, ]+\3){2}\)|rgba\((.+)( *, *\5)+|hsla?\((.+,)+ *(10)?0%)/i I'm leaving my answer is this long form so that people can see how I progressed though, eliminating all that was unnecessary. The main strategy I took was eliminating patterns that I noticed. If anyone wants to see more of the intermediate steps they can check it out [here](http://pastebin.com/U2dSxHkT).
&gt; This includes a temporary call object to store the function’s arguments and local variables for as long as the function body is executing. &gt; The special keyword this crops up in methods, and refers to the current global or call object. This is wrong. You may be getting confused because in non strict-mode code calling a function that isn't attached to an object defaults the `this` keyword to the global object. In strict mode code this isn't the case. An example (run this in the browser): "use strict"; window.x = function(){ console.log(this); }; x(); window.x(); ​ I should also mention this `call object` is most definitely not temporary. It can stick around, and is what creates closures.
(very buggy)
… JS 2.0? JavaScript follows the ECMAScript standard, which is currently at version 5.1. The javascript engines have versions too - the version of v8 that's in chrome 21 is 3.11.10.6. But JavaScript itself doesn't have versions. If PCRE regex syntax were introduced it would need to be an add-on feature, not a replacement for the existing engine, so as not to break existing scripts. ECMA could introduce that, but it isn't currently on the table. What's more likely is that some vendor (firefox, chrome) will introduce their own implementation, but that wouldn't be much use as we couldn't let anything but an extension depend on it. What it would do is draw attention to the issue, and potentially put it on the table for ECMA.
[jGrowl is nice too.](http://stanlemon.net/pages/jgrowl)
The first thing that sticks out to me is how dubious it is to have an awkward configuration file that defines css rules in some custom syntax, rather than just putting selectors on the elements and writing documentation... doing it the way that he has done increases the size of the script, almost certainly has a performance penalty, and is a lot less developer friendly. The other thing is how poor the interface to it is. Some functions with levels, really, that's all we get? This is supposed to be a notifications system, not a logging framework! How about at least some of these: Notifier.observeChanges(var cssSelector, var level); //watches a DOM element and notifies changes with the specified level Notifier.poll(var callback, var interval, var level); //calls the function ever interval and notifies changes with the specified level Notifier.pollAjax(var URL, var interval, var level [, var callback]); //polls the given URL every interval and notifies changes with specified level, optionally calling a callback in the format: parseFunction(var data, var notificationFunction). And this is off the top of my head! This seems like it would integrate really nicely with a pre-existing event system, too, so that it could provide strawman event listeners (e.g. AlertListener, NotificationListener, etc.). 
This looks nice. However, all things considered, I'd probably write something from scratch before I'd use this project. * It's not simpler and definitely not performant to have the CSS and images embedded in the JS, as cool as it might feel to have one file. * A phone/tablet display style would be a must-have for something like this as well. * Users can't set configuration options such as timeout without modifying the JavaScript file. * Users can't simply override some CSS styles to customize it, they have to edit your JavaScript. * onclick/onmouseover on individual notifications... Why not delegate to the container? * Single line comments using multi-line syntax... Why? This was probably a fun project to build and explore some unorthodox ways of doing things, but I could never use this in production.
Thanks. I'll check it out. 
I'm the author of the original Notifier.js - https://github.com/Srirangan/notifer.js Why create a new project? Why not contribute to the existing one?
Looks really cool. One thing though, isn't it Caesar not "Ceasar" on the warning demo.
I stand corrected. JavaScript does have versions. But Harmony isn't a JavaScript version, it's an ECMAScript version, named to reference the conflict involved in ECMAScript 3 vs 4. And while JavaScript 2.0 may introduce its own features, IE doesn't parse JavaScript, it parses JScript, which is another dialect of ECMAScript. So, for web development, the only syntax we can use is what's standardized by ECMA.
Would you really consider a vanilla alternative to the original? If so I would gladly throw you a pull request. I have converted a few other projects and the authors have not really appreciated the no-dependency alternatives. But yea, If you would like I can do the pull request. 
lol, to answer your points in reverse order: - The comments are just force of habbit. not really an issue. - This would be a nice pull request or issue to raise on GitHub. There was reasoning for this when I was thinking about callbacks and overriding configs. That didn't pan out so well and needs to be revisited. - This again was considered, attempted, didn't work out as well as I would have hoped, and eventually dropped until a later time. - see last note - Already works great on Chrome on my Android tablet/phone. I would love to know if it works on iOS. - This was done because (sadly) it appears people want something easy to deploy and not multiple files they (may or may not) still have to edit. (think relative paths) All in all I appreciate your feedback and I will look back into making it more configurable on runtime. 
Using spaces is just dirty :-D I would have put some with tabs in as they're valid, but they wouldn't have displayed and it would have been very confusing.
Came here to ask this. I don't get the "V8 score". What do the points in that score mean?
Any interest in posting the code here? I'm sure several folks would be eager to croud-source some help for you. I also understand if the code is sensitive, however. Or you just don't want public visibility. 
+1 @rmurphey your work rocks.
it's basically a slider. but a slider that needs to be deployed on three different parts of the page. html build out for ipad. the code is vanilla JS. so think "swipe" action (although) that's not in the scope of this. main page needs a slide, and the two divs above it need to be able to slide. does that make sense? 
So you're trying to abstract an existing slider code to work on multiple sections on a page specifically for iPad? Have you looked at [iScroll](http://cubiq.org/iscroll-4) ?
... that was not a question
Submit a question to [stackoverflow.com](http://stackoverflow.com) Be sure to include *code* and an *actual question*. This probably isn't the best place for questions that aren't questions.
I read that as IronMonkey
Formatted: lol, to answer your points in reverse order: - The comments are just force of habbit. not really an issue. - This would be a nice pull request or issue to raise on GitHub. There was reasoning for this when I was thinking about callbacks and overriding configs. That didn't pan out so well and needs to be revisited. - This again was considered, attempted, didn't work out as well as I would have hoped, and eventually dropped until a later time. - see last note - Already works great on Chrome on my Android tablet/phone. I would love to know if it works on iOS. - This was done because (sadly) it appears people want something easy to deploy and not multiple files they (may or may not) still have to edit. (think relative paths) All in all I appreciate your feedback and I will look back into making it more configurable on runtime. 
yes and no. it's being built out in html then it will go to ipod world. the code for the slider has already been written... pretty much vanilla js. edit: i accidently a world
Hit F1 to show help and documentation, and also various demo scripts.
maybe it would be more ideal to advertise these competitions bit earliel than couple days before ending
So is he simply repeating himself when he says: “…a variadic function that uses `arguments`…”
D'oh! Thanks. I'll add a clickable option to show the help when I get home from work. [edit] links added for those having F1 issues :)
In Gnome, the notification becomes transparent when you hover over it so you can see what's behind it. That'd be a nice feature to have here.
nice catch
Thanks :o)
I think a jQuery-less Notifier.js makes sense. I think if we can agree to a scope for this project, I'd gladly welcome any pull request. I've already accepted quite a few. I'd like this to be a minimalist module which only does simple notifications. No polls, no confirmations, no callbacks, no clicks, no events. Responsive notifications may be nice.
Compiler girl here. They aren't using LLVM because: 1. LLVM is generally considered not fast enough for a JIT compiler. At least not at the level where JavaScript VMs are currently competing. 2. LLVM is not very flexible. It's really designed to be a backend for C-like code. It supports the kinds of operations C code does, but it doesn't have any support for inline caching, on-stack replacement, or compiling smaller code units than functions (i.e.: traces). It doesn't have that much useful features for dynamic language JITs.
Hi Greg, nice program! I made this very wierd animated thing because I was bored [animated.txt](https://dl.dropbox.com/u/38345845/animated2.txt) :/ I tried the t.forever() and ended up freezing the console, so I had to use a timer and attach a keydown event to stop the timer when I needed. (any arrowkey stops the timer)
I wanted to participate, so sad that I found this only 12 hours before the end :(
Nice! Would never have thought of that myself. If I was smarter I'd figure out how to make it so you could write a program that drew forever, but it currently serializes the execution flow of your program into a flat list, which is then fed into the drawing queue, so a program that truly runs forever would be serialized into an infinite list. JavaScript runs out of memory, as you discovered. Need to think how to approach that problem. Anyway, thanks for the interesting demo :D
I'm pretty new, and it explained a lot of things to me in an easy way. Sorry if it wasn't really that advanced! :)
Very cool. My coworkers and I were just looking at something like this a few days ago. Only it actually did LOGO, which was funny to use again.
If he would have said either: &gt; It is more expensive during runtime to invoke a function that uses `arguments` than a normal function. Or: &gt; It is more expensive during runtime to invoke a variadic function than a normal function. It would have made more sense.
I don't really see the need for that. If you have an jQuery object, you can insert it into the DOM. Why convert it to a string, then have a template rendering engine render it to in sert in into the DOM?
Great article. I've been using backbone.marionette.async with success on my most recent project, its a pretty powerful tool if you know how to use it right.
&gt; Also, if you do a plugin ($.fn.whatever), then this is already a jQuery object, so no need to do $(this). That always trips me up, since I'm accustomed to $().each() setting `this` to the DOM element, not a jQuery set of the DOM element.
Me too, I actually just learned about it a week ago. After wrapping all the other callbacks, I just assumed fn was the same.
I knew having Coffeescript take off was going to make things more difficult for the rest of us. How can you write up a document and only give the Coffeescript code without it's "real" translation? Example: &gt; You can write: precondition 'receiver is not valid', -&gt; @isValid() if you want to declare your own throwable. I assume that's: precondition('receiver is not valid', function() { return @isValid(); }); ? Or is it: precondition('receiver is not valid', isValid); ? What is @?
The beauty of this is that programmers are intelligent and curious professionals. As such, although they may choose not to build their software with a particular tool, they will look with pleasure upon an opportunity to know enough about every popular language to get the gist of how it works. For example, I can read PHP, C# and Perl well enough to read blog posts that use them to illustrate a general principle I find interesting. As to the article, it gives JavaScript and CoffeeScript for all of the substantial examples. One is in JavaScript only. The exact line you speak to translates thus: precondition 'receiver is not valid', -&gt; @isValid() precondition( 'receiver is not valid', function () { return this.isValid(); } ) @ is an abbreviation for `this.`, I think the author borrowed that from Ruby. ANYHOW: I've put the translation into the article for that line. If it makes the article easier to read, it's an improvement.
a) it has a license that makes OSS seem like a joke "The Software shall be used for Good, not Evil.". b) JSLint is as cranky as Crockford. c) JSHint doesn't make me feel like a horrible person for not following Crockford's idea of how people should write JavaScript. d) "jQuery core passes JSHint (not JSLint) with a few stipulations. To run JSHint against jQuery you can download jQuery from Git and run 'make hint'." 
Let's agree to lighten up. Nobody has time to learn every home-brewed programming language. Nobody ought to stay chained to whatever they learned when they got into their first job. If in between those two extremes you prefer not to deal with CoffeeScript, I can respect that. I haven't learned Factor. I should have included a winkie. Mea Culpa.
Just because you can't see the point doesn't mean other's don't need this. I could really use this a lot. I hack HTML and SVG a million different ways and I've come across the need for this more than a few times. The DOM is not the final destination for everything, sometimes a need arises for an element to be serialized and sent somewhere else as plain text. 
Well, I was just asking a question. I don't think I've ever came across a situation where I would have needed it. If you think it is that important, why not submit a patch to jQuery core?
&gt; why not submit a patch to jQuery core? Because I'd rather use more efficient functions I write myself than wrap everything in jQuery, and I've been doing this since before jQuery existed, so, no I'm not submitting a patch. 
Hey, that's pretty nifty! Quick question: [hyphen](http://en.wikipedia.org/wiki/Hyphen) instead of hythen?
Maybe it has something to do with legacy browsers that didn't have native pattern match? By the way, do you find it frustrating when someone links to a Github repository without explanation or introduction?
Why would you want to do that? &gt;e.g. when passed to a template renderer. Shouldn't the template/template-engine do that markup crap for you? Isn't that the reason why you use it? &gt;example [...] `css('color','red')` Yea, don't do that. Don't put CSS in JS. Don't put JS in HTML. Don't put HTML in JS. Don't put JS in CSS. Don't cross the streams.
&gt;Maybe it has something to do with legacy browsers that didn't have native pattern match? Regex became part of JS as of v1.2. So that would be anything older than IE4 or Netscape 4. Hopefully no one's running that. &gt;By the way, do you find it frustrating when someone links to a Github repository without explanation or introduction? http://www.manpages.info/freebsd/true.1.html
this might help understand why: http://learnyouahaskell.com/syntax-in-functions
There should be a separate subreddit for this node js stuff.
Yes. Welcome to programming.
WTF is up with that text to speech code comparison? Couldnt they have just typed it out?
I will take it into consideration. also note: you can click to dismiss. 
[Matches.js] is only distantly related to regular expressions. Regular expressions are patterns that match a string. These are patterns that match function arguments. Languages like ML/CAML/OCAML have this as a baked-in feature. This library uses a special syntax with strings, but here is how it might work if it was baked into JavaScript. I'm going to write a recursive function that sums all the numbers in a list. Let's ignore the use of a `for` loop or `reduce` function for the sake of the example. Here's current JavaScript: function sumOfArray (arr) { if (arr.length) { var first = arr[0]; var butFirst = arr.slice(1, arr.length); return first + sumOfArray(butFirst); } else { return 0; } }; The takeaways are first, that there is one if statement we use to decide between two major cases: The empty list and a list that isn't empty. And second, that if it is not empty, we split the list into two parts (`first` and `butFirst`). Patterns in regular expressions can match major cases and extract elements from a string. Patterns for function arguments work the same way. Here's a made-up syntax we could use if JavaScript supported pattern matching: function sumOfArray([]) { return 0; }; function sumOfArray([first, butFirst...]) { return first + sumOfArray(butFirst); }; We define the same function name twice, one for each major case. When you call `sumOfArray`, the interpreter would match the arguments you supply against each pattern to see which function body to execute. If you pass in an empty list, it matches the first definition. If you pass in a non-empty list, it matches the second and extracts values for `first` and `butFirst`. If you pass something that isn't a list, it would throw an error. JavaScript doesn't let you do this exact thing, so the author has written a clever library that lets you use strings to define the patterns and it builds a function that does the matching for you. [Matches.js]: https://github.com/natefaubion/matches.js 
So basically adding function overloading/guard expressions. Gotcha. Javascript very deliberately does not have this functionality as part of it's core, I'd be very reluctant to use this in production. I think it would be pretty confusing for the average user.
&gt; People actually argue about this crap? Tabs or spaces?
See also `wu.match`: http://fitzgen.github.com/wu.js/#pattern-matching
You're almost there. There are a few things to understand about MooTools that will help you get further with this task. * Basically everything is a "class" (function constructor) and they typically share common functionality. * .tween(), .fade(), .morph(), etc. are shortcut functions that create and store instances of the respective classes new instance of the. * Those shortcut methods return the element or element collection, not the Tween|Morph class. * You can only directly chain on the class instance, not the element To understand it a bit better, separate the Tween instance from the element by doing var animate_area = $('animate-area'); var tween = new Fx.Tween(animate_area, {//your options}); Then later you can use the tween variable and start the transition and then chain functionality on it tween.start(...).chain(function(){ //do something here, probably re-use the tween instance again }); That chain would only run once, if you wanted it to loop forever, for example, the Fx.Tween object has an onComplete event that you can pass a function to which would just call tween.start() again. 
I like Array.forEach better, gives you lots of flexibility, pretty much universal now, well defined iteration order, even makes it easy to write reusable iteration functions. ['a', 'b', 'c', 'd'].forEach(function(v,i) {console.log('element ' + i + ' has value ' + v)})
They're being cute, which is generally the top priority for CoffeeScript fans ;)
Backbone marionette is pretty fantastic. The only issue I have with it is how the render method completely blows away the existing DOM elements if you call it again. I was under the impression that it shouldn't do that.
Those who use spaces should be sent to the Gulag for re-education. [](/celestiamad "Edit: After seeing all the downvotes I'm getting, it'd say it's more efficient to execute those damned infidels.")
Spaces. Duh.
You're a big fan of Haskell?
Didn't know this existed! Thank you very much for the response. Just when you start to think you know things...
The worst thing is that I got upset when I read your comment :) tabs vs spaces really sets up emotions. And I'm a tab guy since every editor understands them and then we don't have to agree on 2 vs 4 vs 8 spaces.
I think it's great to remove {} and ;. But why would you ever remove the ()'s around a function call? foo a, b or foo(a,b) The last one is just SO much faster to read. And I tried to use languages that had that feature in order to get used to it, but I never did. foo(a,b) is simply just faster for my eyes to read.
Does it?
My biggest issue is that you can do both. I dislike that heavily. Language design isn't a democracy, so make a choice and stick with it. Either f(a,b) or f a, b. Not both. Your myFunc example probably shouldn't include the ; at the end, since I agree on that part. And I don't see the real benefit of having either } or }) in the end. However, where it is a really slick example is your last one. &gt; var foo = checked(2, function( arg1, arg2 ) { &gt; // do lots of stuff &gt; }); becomes &gt; foo = checked 2, ( arg1, arg2 ) -&gt; &gt; # do lots of stuff It can be so annoying to have a lot of code and then })}); in the end which you sort of hope just matches. Great example.
Pretty much every language has some things that are optional. I definitely agree that too many optional constructs/possibilities can be bad (*cough*perl*cough*) but a little bit is a good thing. I think CoffeeScript has a reasonable amount. In CoffeeScript optional parens are necessary/useful to disambiguate constructs like: foo a, b c, d Is it this: foo( a, b(c), d ) or foo( a, b(c, d) ) (for the record, CS considers it the latter by default) In my myFunc example, you could even trim it down to: myFunc foo: "bar" ding: "bat" fizz: "buzz" I was mainly just trying to demonstrate the idea that once you write the myFunc call, you don't have to think about it anymore and can focus on constructing your object literal. I agree the latter example is probably stronger WRT to that.
Tab guy here. What is the argument *for* using spaces?
That was a smackable offense.
But that's not the same thing, is it? A loop allows you to do 'break' at any time to exit the loop before all iterations are completed, while Array.forEach, as far as I know, will always call the supplied function on all elements of the array. I'm not really a JavaScript programmer, so please correct me if I am wrong.
I haven't used marionette but perhaps what you are looking for is an 'update' method instead. As a user of a framework I would expect the render method to throw everything away and start again
I would say exiting early is a little contrary to the idea of *forEach*. If you did need to stop it, you would throw an exception...which is somewhat ugly, but I think the ugliness is appropriate for something that should be a special case. For instances where you only want to iterate over some of an array, you could stick with loops or use the *.every* function (maybe slightly misuse depending on the situation).
Tab button, set to output 4 spaces :P :P
One reason is because it makes it easier to write libraries that look like a DSL.
That actually helped a lot. So should I use a chain to join them all together? Also, in the second piece of code would the function of that chain be where I'd put things like duration, easing, delay and so on? The way I'm understanding you right now is that I can set up my classes, and then chain them together with onComplete so that they start in the order I want? Would I have to keep the looping one seperate from the rest? Sorry about so many questions.
Removing the parenthesis allows function calls look more like keywords.
I notice that, unlike Python, CoffeeScript doesn't use colons to indicate the start of a block. In CoffeeScript, even colons are removed. Made me wonder about Python syntax. If Python did not use colons, what problems would be caused? And how do CoffeeScript avoid those problems? If Python used (a,b,c) -&gt; .... syntax or similar to write multiline lambdas, what would be problems?
Chain is like an onComplete that fires once and not overtime the effect completes. I would identify all of the independent elements that you want to move around, given each its own instance of Fx.Morph (Morph does multiple css properties at once, Tween does one at a time) and then set up the performance logic: sky moves left and right WHILE sun grows, etc. Also check out this example of chain http://demos111.mootools.net/Chain# 
You can still use `()` in CoffeeScript. Use them if you like, it makes no difference.
People have served the changes they need to make in order to have accurate pages on an effin platter, and still they won't change it to make it more accurate. The hate is 100% deserved and I hope it spills over into their other endeavors. Boycott.
This is a very level headed, good stance to take. But people should probably continue to poop on it, until they fix their accuracy problems, so that good resources like MDN can be top search results and save us from a lot of arguments in the office.
so brave
How can you hate experts-exchange? Jesus, that place has provided more oddball answers for me over the years than anyplace else. Of course, I started using it back when it was expertsexchange, but even so, some of the brightest people on there vie to answer your arcane questions...
Can you still just scroll to the very bottom of the page on experts-exchange and see the answer?
I wrote a chrome extension to provide SO/SE context menu searches 
Probably not much of an issue anymore, but I think it was because editors would handle tabs differently? Not sure. I'm a space guy, but that's just because it's what I'm used to.
Blocked sites was [broken](http://googlesystem.blogspot.com/2012/01/blocked-sites-no-longer-available-in.html) the last several times I checked. Did they fix it?
Well, there's the ideal (which stackoverflow and mozilla run on) of "many eyes make shallow bugs" and the paywall, by its very nature, turns away a good portion of eyes. If there's enough good answers behind the paywall, though, then that's great. But as a menial programmer who has to actively ask for that $100 subscription, I'd never know except for word-of-mouth recommendations like yours.
If I were still doing computers, I'd have it, no doubt. A few years back, I had a machine in my shop that was riddled with spyware. After busting my ass to clean it, it STILL had errors, even though I *knew* it was clean. The issue was that when I went to Windows Update (in XP), the bottom-right pane showed Google instead of the standard updates you could check or uncheck to select. I did everything I could to figure it out and was too stubborn to just wipe it. I took a few days of searching, off and on, trying different things, until I finally went to EX. They had the answer and it was simple. The DNS on the adapter was set to a specific DNS instead of automatically grabbing one. So the IP was auto, but the DNS pointed to some spyware server somewhere and that's how it was being served up. From then on, every time I did a virus removal, I'd check that and I found it half-a-dozen times over the next couple years. I've never seen that answer anywhere else. Oh, and by the way, this was prior to smitfraudfix and the newer tools that would have figured it out.
Omigod godaddy sucks amirite?!
I actually had an experts-exchange post come up in a google search the other day (first one in almost a year), and I never saw an answer on the page. I think they removed that.
The difference between ASM and C are *vastly* more numerous than the differences between CoffeeScript and JavaScript. I eagerly await the next useless layer of abstraction, something that compiles to coffeescript... maybe in a Lisp-ish type syntax, since it's so much "shorter" than both coffeescript and javascript. Call it something cute like "Latte".
You don't have to pay. You can just scroll to the bottom and see the answers for most questions.
When I forget some SQL syntax I always find w3schools to be the link I click first after a Google search.
This has been around for years I think. edit: [at least 1.5 years](http://i.imgur.com/l5fjA.png)
Fair enough. &gt;CoffeeScript is a **useful** abstraction for writing JavaScript. This is where we disagree. Emphasis mine (obviously).
How about just scroll all the way to the bottom? They used to have the question, then adds and below that where all the answers.
Serious question. Can someone explain to me why I would use Yeoman instead of something like brunch.io ?
What's wrong with W3Schools?
Yea I hear your argument, but I think the differences are SO large that it shouldn't even be a valid argument. I wrote 8085 assembler for 6 months and we're talking 50-60 lines of code just to do division. A closer comparison would be C to C++.
Of course you're entitled to your opinion, and I respect that fact. However, let me provide what I consider a good example of CoffeeScript's usefulness: [Function.prototype.curry](https://gist.github.com/9d69011f501437217c6e) That's something I wrote a while back. To see how it translates to vanilla JS, try pasting my code into [JS2Coffee](http://js2coffee.org/) (make sure you're on the `Coffee -&gt; JS` tab). In my opinion, one can't really write that functionality in vanilla JS in a manner more readable and concise than my CoffeeScript version. I guess your opinion of CS will depend on how you value code readability and cohesiveness, both of which are high on my list of priorities in a language design.
So what you seem to be saying is that Arrays themselves in JS aren't "safe", for some other-language-based definition of safe. Did I get that right?
&gt; [We are passionate about the web, learning, and craftsmanship. We want you, as web designers and developers, to be successful in your careers. We feel, though, that W3Schools is harming the community with inaccurate information. Like any other authoritative educational resource, W3Schools should both hold itself to, and be held to, the highest standards.](http://w3fools.com) &gt; [We hope we can illuminate why W3Schools is a troublesome resource, why their faulty information is a detriment to the web, and what you \(and they\) can do about it.](http://w3fools.com)
Well, I'll agree for-in in javascript has lots of unexpected behavior, but that's both with objects and arrays. "Safe" is still a stretch. Not safe implies undefined behavior or chance of faults, and weird as it is, arrays and for-in are well defined.
No About.com?
AFAIK they only show the answers if you've followed the link from Google.
What they're saying with the forms is that you have to have some sort of container inside the form around your elements. So form -&gt; div -&gt; input, for example. Not using a proper doctype can cause significant rendering issues in IE, and it doesn't hurt to have. A lot of people who want to he professionals use w3schools as a reference. Why not encourage good habits from the beginning? Edit: Significant, not signify. Oops. Maybe that makes more sense now.
I will agree, that is true, but for sufficiently complicated code, having delimiters for the start and end of blocks, expressions etc makes it much easier to read which code is nested where. Indenting is important, but indenting alone is not enough to make complex code readable in my experience, and that's why for very large projects, I shy away from using python, even though I think it's awesome, because skim reading and trying to interpret nesting is very hard.
I couldn't agree more. When I'm googling for a specific name of a property or reference, I often find w3schools. Everytime I use it, Reddit pops up into the back of my mind. 
I'll quote myself I guess... &gt; There are many other resources to choose from with a higher standard, it's definitely not for professionals, but it's a handy resource for those little things you forget.
Look what you've done &gt;&lt;
I agree with you. But for quick reference, i'll just google something instead of going into my bookmarks or manually typing a URL. I used to have the jquery api bookmarked in my "Resources" folder. Its quicker just to type "jquery slide" into the URL bar of chrome.
And unfortunately the ubiquity of this site makes it common for non-newbies to use it as well. I was helping a friend with a college final project in "javascript web development", and was dismayed that ALL of the classes example code, and much of their lessons came directly from w3schools.
Haha, read my mind. Although, sometimes you may need a poorly written piece of JavaScript from 2001 that probably won't work anymore.
You're right - Experts Exchange want Google to be able to crawl their answers, and a consequence of that is that (to avoid legal wranglings) the result has to be available in the page shown from the Google link. If I remember rightly there was some story from a few years ago about Experts Exchange wanting to allow Google to crawl a page's answer, but to hide the result when the user followed the link - can't remember exactly why they didn't go ahead with this (presumably Google removing them from their search results would be a fairly strong reason).
&gt; I didn't say they were an exact parallel. Of course they aren't exactly comparable. Maybe you did't "say" it, but that's precisely what you implied. It's a tired old argument from the CoffeeScript crowd that has never made any sense. I will happily make the jump to CoffeeScript when it's handled *natively* by the majority of browsers. Until then, I like my errors to correlate to actual lines of code I can edit, and I like the script I wrote to be the script that's executed. CoffeeScript solves a problem that doesn't exist: - JavaScript isn't hard to read - JavaScript isn't hard to understand - JavaScript isn't too terse to type - JavaScript didn't need an abstraction layer. - One big advantage of scripting languages is debugging. CoffeeScript breaks this. - Another advantage to scripting languages is no compiling necessary. CoffeeScript breaks this. So what problem does CoffeeScript solve? CoffeeScript creates more problems than it solves, at least until browsers handle it natively, which to my knowledge isn't happening anytime soon. Once it's handled natively, I'll jump on over. **EDIT** Here's an example of some JavaScript that actually becomes LESS readable in CoffeeScript ([pulled from this link](http://programmers.stackexchange.com/questions/72569/what-are-the-pros-and-cons-of-coffeescript)): var rabbitGenerator = { makeRabbit: function(rabbitName, growCarrots) { if (growCarrots) { carrots.growMore(10); } else { carrots.ensureSupply(); } return { name: rabbitName, height: 0, actions: { jump: function (height) { this.height += height; }, eatCarrot: function () { nomNomNom(); } } }; } } In CS it's hard to tell where the return starts: rabbitGenerator = makeRabbit: (rabbitName, growCarrots) -&gt; if growCarrots carrots.growMore 10 else carrots.ensureSupply() name: rabbitName height: 0 actions: jump: (height) -&gt; @height += height eatCarrot: -&gt; nomNomNom() 
You don't event need to do that for MDN, just preface your Google search with it. It won't produce exclusively MDN results, but MDN will be at the top.
I was just pointing out how you can access MDN results directly without having to 'go into your bookmarks or manually type in a URL'. MDN is also not FF-specific, they're based on the ECMA spec and often offer extended information when IE (or any other browser) deviates from the standard.
The hate for experts-exchange goes beyond just the paywall, their initial repository of answers was built similar to Stack Overflow; by people visiting the site and answering questions in return what amounted to karma. Then they turned around and put the paywall in after they collected a large enough repository of answers that they believed they could make money off of it beyond just selling ads. 
Hmm. I hadn't considered that. Still, they provide a service I'm willing to pay for.
Back in the day it was the best there was, but these days there are so many missing parts, such as optional parameters that aren't mentioned. MDN is nearly always better for JavaScript. I often type 'mdn serachterm' rather than 'javascript searchterm'.
expert-sexchange
That's what we called it back in the day. Although www.penisland.com is still my favorite. EDIT: Damn, it's not there anymore. Oh well. Pen Island was the site.
Is that just a js community thing, hating w3schools? I use it on a daily basis and it has done nothing but make my job easier. In my community, everybody uses it and it's great.
http://dochub.io
Man I made this same post in /r/webdev and got a tonnn of shit for it. Glad you got some people onto this idea. Website should be banned for anybody trying to learn web technology. 
Expert-sex-change
Bye Bye About.com
\*sigh\*... * A site that points out flaws in another site is pretty much pedantic by definition, still doesn't make it *wrong*. Also, the whole premise of w3fools is to list errors on w3schools, no matter how minor, in order to get w3schools to correct them. * Browsers usually don't enforce closing tags either. Notice how I qualified my statement with "if you cared about validation"? * The W3C validator definitely catches this, because it's where I first learned about it. * I like how you speak for every web developer ever, it's a hint to me that this discussion isn't going anywhere.
Why not just use: $('&lt;div&gt;some jquery&lt;/div').html(); ???
So Brave!
Yes, it's just a typeface. People treat it like a fatal disease, but only because they saw someone else doing it and think it's cool or proper to do the same. 
This isn't true at all. Give it a try.
I used to work for a web development company that used a CMS that offered comic sans among other windows fonts for the clients to use. I can't remember how many times we would find the client had changed the content we had entered to be in comic sans.
So w3schools is usually pretty useless but experts-exchange in my experience has decent answers. I don't think I would ever deny myself possible solutions, just because I didn't feel like scrolling down.
The only reason you don't have a problem is because the browsers now do their own error checking of your markup and do the best they can with what you feed them, often called "tag soup". While you may think you can throw anything at them and get away with it, your site suffers from potential slow downs and problems when you try to scale or add on to your existing markup. Particularly if you use the DOM and javascript which I'd bet you don't. This is the modern web where such things are becoming more important and if you don't start following the rules, you die.
In fact, a doctype is required for all modern web pages.
I just did again. Still no answer. [Screenshot](http://i.imgur.com/nQovD.jpg).
Hmm. I've been having trouble figuring out how to change the background color of IE's native video embed for WMV files programmatically. I wonder if I should check around for that kind of question.
w3 schools is the Kings of Leon web dev equivalent.
See if someone has answered it. If they have, spend the money for the solution. If they haven't, no money lost. ;)
That's a definite fork in objectives. I'd appreciate it if you call your project something else. Thanks!
Hmm... maybe when I'm actually at work on Monday. It's drinking time.
&gt; &gt; input tags are not allowed in a form &gt;Not directly inside a form tag. Prior to HTML5 you had to wrap them in a block-level element such as &lt;p&gt; if you cared about validation. \*view source\* ctrl-f form Wow, reddit sure is broken.
expert exchange is such a bs website. No idea why it keeps showing up at top of google results.
Affectionally known around our office as Expert-Sexchange.com
I never even knew you were suppose to. Thats how insignificant of a mistake that is.
Fuck yeah...I cannot tell you how many times I have searched for some bit of C# or java knowledge and thinking I have found it, been vexed by Experts Exchange (otherwise know as get your hopes up and smash them to pieces)
Of course I did. I have not disabled referrer header either. I searched for dhcp error something and got that page. Clicking your link and selecting the EE search result gives me the exact same page as my screenshot. I'm pretty sure EE uses cookies/platform-info to show the answers to some users and no answers to others.
Which community is that, out of interest? The JS community seem to hate it because their JS tutorials are astonishingly bad and incredibly popular. I don't know about others.
I just tried on 2 different machines running different OS. IE9, Chrome, and FF on the Win 7 box. Safari and Chrome on the OSX box. All of them pulled up the link with the answers at the bottom. I'm not sure what strange combination that you have running that would cause you to not receive the answers.
Nitpicking aside, many of the things they mention are quite majorly out of step with best practices (iframes, `document.write`, and there's a PHP example with a SQL injection vulnerability). &gt; it's definitely not for professionals It doesn't matter. It's a learning resource - not only that, but the resource that consistently comes up #1 on search results - that people are going to use if they aspire to become professionals, and it's sending them down the wrong path. Many things at w3schools are simplified, which I think is OK for beginners. But others are just plain the wrong way to do things, in situations where teaching the right way isn't any more complex and won't lead to headaches down the track.
&gt;Did he specifically say that we are only using JS until someone builds a better solution, or did he just refer to it as being the 'assembly of the web'? The latter only infers that it's being used as a compilation target, and not that it needs to be replaced. http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebPart2MadnessOrJustInsanity.aspx Here he only mentions it being the JVM of the web, wish I could find the other quote. It was probably in a video. &gt;I also disagree we need browser support for CoffeeScript. I'd much rather see better tools for error reporting and debugging from the browser. Why? Because then it would benefit other languages too. Well I don't think it's really an either/or choice between those two things, so I say we need both. For one, CoffeeScript is *very* popular and its usage continues to rise, it being one of the top repos on GitHub for a while now. I think than if it continues to be such a success for a while, then such a popular web-programming language should get in-browser support merely for the fact that so many would be using it.
&gt;Wow, reddit sure is broken. Did you happen to miss the part in the comment you quoted where he stated that this was a problem *prior* to HTML5?
I'm curious to know this, as well. I blocked W3schools myself right around when this blocking feature was launched, but through all of 2012, it hasn't worked at all and I repeatedly get W3schools links in my search results. From the way a few people are talking here, though, it seems like it's still working for them, so now I'm extra curious.
Agreed. I find it nice using that interface pre-filled with working code. Its easy to tweak it from that point and continually test your changes since you don't have to save/refresh over and over. 
Do you have referrer enabled? As I recall it, it will only show you the answer if you have Google Search as a referrer.
This is not sufficient. w3schools manages a number of related domains; you're still going to get them in your results for a while.
Yea, you're right. I messed that up. But they have done this since 2006, I think. They haven't used html5 all this time, have they? Not that it matters, it was just a stupid flippant comment. Sorry
Yeah, they only just recently [switched the doctype to HTML5](http://www.reddit.com/r/changelog/comments/yro5x/reddit_change_html5_doctype/) (only 21 days ago, in fact), so I was mostly just being a pedantic dick. &gt;_&gt;
An error is an error and errors beget more errors and if you want to continue to rely on errors working in all your markup in every browser then you won't be doing web sites for very long. 
Are their docs incomplete or does their ajax calls not contain a started/completed event? I didn't see anything that would have made me think of using this over jquery. Did I miss something? 
and if you don't already have a cookie from them
People don't like W3Schools? Man, I loved that shit when I was learning, and always used it as a good, thorough reference guide.
I work with general software engineering. We're not the strongest web developers, so their html/css content is a huge life saver. The "try it editors" are pretty much the most useful thing I have found for finding what you're looking for. Even if whatever they say isn't accurate, and I know it often isn't, but as far as reference goes that doesn't really matter as long as it gets you where you need to go. And it definitely does that.
Isn't brunch sort of designed just for Backbone apps?
This is pretty neat. I was looking into this functionality at one point, wanting to create thumbs for articles in a CMS. Nice that the foreign object removes the need of a proxy for cross domain objects.
I just added an example to the project page: http://cburgmer.github.com/rasterizeHTML.js/ You should see the page rendered inside itself.
The statement "var can be optional" is kind of dangerous. While their example is ok, it comes a little too close for comfort to suggesting users to declare variables without the "var" statement altogether... making them global, and making JS devs everywhere cry...
Even better, read Javascript: The Good Parts.
I always feel like it's the biggest oxymoron when I read that book title.
I love it. Do you have any tutorials to get started with music visualizers ?
I'm glad you like it. What do you mean about tutorials ? some to create your presets in my visualizer or tips to entirely code yours ? :)
This is fascinating. Will dig more into this in a bit, and hope to give some feedback :)
then I'm sorry but I don't know any real tutorial about it. It's not very complex as soon you know how to use the various api to get sound datas. webaudio for chrome : https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html audio data api for ffox : https://wiki.mozilla.org/Audio_Data_API or you can use something like dancer.js to forget about it the rest is more about webgl than sound visualization :)
I'll probably release it open source in not that far. But don't worry about the maths for the sounds, all you need is a FFT transformation that you'll find easyly on the internet. then you just have to deal with array of values. you probably should start with dancer.js it does all that work for you with the 2 api and give you array of data allready useable.
Hey, congrats on the new gig - hope it goes well. Will check out the repo as well :)
Hi mate, Managed to get everything working the way I wanted it. Just a bit confused how to simply move the logo from the right hand side to dead centre using relative positioning. Still really haven't familiarised myself with this yet. How would I animate the margin-left property to do this? Got the others set up like so: (function() { $("sky1").set("tween", {duration: 2000}).setOpacity(1).fade(0); }).delay(2000);
You dont want to animate the margin for positioning elements. Make the logo's parent position: relative. Make the logo position: absolute. Animate the top and left properties. 
"self executing function" isn't the right terminology, its instantly invoked function expression (iife). a self executing function is a recursive function isnt it? 
Thank you very much bud.
This is beautiful ! Thanks for creating it !
Doesn't a state machine usually have inputs? As in "If I'm in state A and get input X I transition to state B". That way, the FSM is sort of like a black box that can't be tampered with. Now, it seems any code that has access to the instance can influence what state it transitions to. I've been doing a lot of thinking about FSM's as the driving logic of UI components lately. I have this nagging feeling that they can be very useful in making complex UI patterns maintainable but I haven't figured it out yet. I'll definitely give this code a better look. The EventEmitter code looks like a great base for Pub/Sub type architectures. Here are some other implementations of FSM concepts: * http://freshbrewedcode.com/jimcowart/2012/03/12/machina-js-finite-state-machines-in-javascript/ * http://danwolff.se//simple-state-machine/ * https://github.com/jakesgordon/javascript-state-machine
I came to the conclusion that all it did was execute things on transition between states and allow you to set that state. I think hierarchical state machines are a bit more configurable though. The third one you linked is a bit like mine, just with more options for each transition. I built it like this to make it unopinionated and clean. It's pretty easy for a developer to understand *exactly* what is going on when they run `setState`. There's no hidden magic. I guess I could make it more like a black box but that has never really been the case with JavaScript. Look at MooTools or any other library with classes, their methods are not protected, you can do what you want to them. You can even access the `_events` and `_state` variables on the object, there is no way to lock an object down in JavaScript. So I think it's best to embrace that and make everything straightforward and open. I may well be wrong, this may not match the exact definition of a state machine, but I think it is useful and does what a state machine would do.
At the moment, the way we are looking at web pages changes. Since server-side javascript becomes increasingly mainstream (we have to thank nodejs for that), it is used to render pages. So why not externalising parts of that process, if possible? It saves bandwidth and time and can still be done on the server if necessary (e.g. no JS support). Still, templates, even if they are filled with javascript, should stay within the domain of HTML/CSS, because those are the easiest methods to define content and style. Many MVC frameworks are built like they had to construct everything by hand within the DOM, which is bullshit. The choice of framework should depend on the complexity of the page. A really complex page can make use of a bigger framework; a less complex page can go with some vanilla js.
They completely fucked it up the moment they decided to return the namespace instead of the module itself, which is the correct way to go with require.js. The whole point of it is perverted. If you require 5 modules you get 5 arguments which are the same: 5 times the namespace. How stupid is that? Absolute nonsense, predictable debacle. If you use tools not the way they were intended, and instead do weird stuff with them, then yeah, you're bound to have a bad time. PS: The new way they "discovered" is the way dojo does it, but it's only temporarily, they want to drop namespaces altogether from 2.0 on and use pure require modules. Good for them!
Is it open source? If so, could you provide the link?
Use another site and quit bitching. I'll send you some tissues.
They do, at least in iPad. But for an iPhone screen having a windowed video playing is counter-productive in 99% of cases (this being one of the 1% situations). Google's new YouTube app has inline video, but I doubt it's possible to accomplish inside a browser currently. What I wonder is why doesn't Apple do mobile versions of its own website? *shrug*
&gt;What would be a good use case for doing everything is javascript and using framework like backbone.js to keeps things structured versus doing most of the layout in html and then add some javascript goodness. If you use JS to decorate rather than to render, you have to maintain both your templates and JS, updating one if the other changes. That's not to say you should always use JS to render (far from it), but decorating does have its disadvantages. &gt;What happened to the good old days where we had a webpage and using some jquery sprinkle in some goodness :) There's no reason why you can't continue to do this, if the page is simple enough. The MV* frameworks help to maintain a more complex codebase, so they tend to be a better solution when writing web applications. You can still use a MV* with HTML templates though - I believe Angular.js takes this approach.
Don't mean to steal Apple's thunder here, but my guess is they pretty much used the technique described by the author of Sublime Text. http://www.sublimetext.com/~jps/animated_gifs_the_hard_way.html PNG encoder included. github URL: https://github.com/sublimehq/anim_encoder 
Apple's 1MB seems like an awful lot compared to Sublime Text's 96KB. But I suppose Apple's would be higher quality
That is a fair point, and I suppose a lot of that 1MB is the tweening the the home screen icons into position
I hear lots of good things about "the good parts" by Douglas Crockford. [Generic Subreddit Search for "book"](http://www.reddit.com/r/javascript/search?q=book&amp;restrict_sr=on)
If you remember the launch of the original iPhone, one of the selling points was that you had "the full web in your pocket". Creating a mobile site for iPhone would be like saying "well, almost the full web". 
As mentioned JavaScript: the good parts by Douglas Crockford, I found pro JavaScript techniques to be quite good as well by John-Resig 
I'm not sure this really helps (though it looks interesting for other things). My main concern is that I seem to be forced to use what feels like configurations for pages / templates in order to assign a model to a view. I guess these configurations are more or less controllers, but it still feels weird for some reason.
I know I could probably do some Googling to find out, but it might be nice if you provided a description for what specifically I would be losing if I unchecked "Deprecated".
Not supporting inline `&lt;video&gt;` elements is much like saying "well, almost the full web" as well don't you think?
Yep, another revolutionary innovation by apple... that has been [done before](http://www.sublimetext.com/~jps/animated_gifs_the_hard_way.html).
haha! just this afternoon i was being accused of being a microsoft fanboi. now i'm an apple fanboy. te effect is pretty cool, didn't really think anything else of it. definitely not worth my time looking at every preceding technology to see if they did it first, just appreciating that it is pretty cool. now that you've pointed this out to me, let me amend my comment: this is really quite amazing. hats off to Jon Skinner
Use window.open method to programmatically open new (popup) windows. See [W3Schools reference](http://www.w3schools.com/jsref/met_win_open.asp) for details.
Try: &lt;a id="link1" href="#"&gt;Go there!&lt;/a&gt; Then, in your `onload` or `onready` event: $document.getElementById("link1").href = "http://www.google.com/";
Soooo many to choose from TXJS, jsconf, and soo many more... this [guy](http://addyosmani.com) and this [guy](http://paulirish.com) are your best bet for whats going on around the client side, from them you can then follow more developers and where they will be speaking. It really depends on your taste since there's so much to pick from.
&gt;How do you setup your bindings between models and views? By using something with sensible bindings between models and views, like AngularJS or EmberJS (ducks) 
And apple contracts out their web work (unless this has changed very recently). So it's not even their innovation. I know a few people who've worked on the site over the years.
… for bandwidth reasons on ALL iOS devices. Good point
Sigh. You talk to me like I'm some noob who make 50 nested tables without any closing tags or something. I was on the whole XHTML strict bandwagon back when the spec was proposed. I used to send all my sites to the W3C validator and sort out any reported issues before considering them done. It never once complained about an input tag directly inside a form tag that I recall, and I guarantee that I had some. If the people who wrote the validator either didn't know or didn't care about the rule, it's stupid to call out w3schools for it. As for your performance impact concern, ignoring the rule would do nothing but speed things up, as it's one fewer code path for the parser to follow. It's a very specific, one-off rule that would need to be special-cased to enforce. It's also a rule that makes no sense to anyone who's actually using HTML for anything, which is likely why no browser ever enforced it.
Yeah, just look at how Github shows code with tab chars in it.
also http://html5devconf.com and http://fluentconf.com/fluent2012
can you advise me what to do to gain that programmer logic? I am complicating things, so this programming is hard for me at begenning. Too many questions. I am learning at Codecademy.com But i have another question...where comes to javascript in web pages? All i see is the learning of functions, sums, do this do that. I dont know in what practice i would use javascript to web pages
And I guess I should say it is working in this code: &lt;input name="homeaddress" type="text" id="homeaddress" value="" maxlength="125" /&gt; &lt;input name="homezip" type="text" id="homezip" value="" maxlength="10" /&gt; &lt;input name="homeaddress2" type="radio" id="homeaddress2" value="Brooklyn"/&gt; &lt;input name="homeaddress2" type="radio" value="Bronx"/&gt; &lt;input name="homeaddress2" type="radio" value="Manhattan" /&gt; &lt;input name="homeaddress2" type="radio" value="Queens" /&gt; &lt;input name="homeaddress2" type="radio" value="Staten Island" /&gt; &lt;input type="checkbox" name="treetoo" onclick="FillAddress(this.form)"&gt;Check this box if your home address and the address where you are planting the tree are the same. &lt;input name="treeaddress" type="text" id="treeaddress" value="" maxlength="125"&gt; &lt;input name="treezip" type="text" id="treezip" value="" maxlength="10"&gt; &lt;input name="borough" type="radio" value="Brooklyn"/&gt; &lt;input name="borough" type="radio" value="Bronx"/&gt; &lt;input name="borough" type="radio" value="Manhattan" /&gt; &lt;input name="borough" type="radio" value="Queens" /&gt; &lt;input name="borough" type="radio" value="Staten Island" /&gt;
CodeAcademy is good! I am learning the foundations of all the languages to see which one suits me best. Keep going at it. If you plan on using lots of web-based programming, it is a MAJOR plus to learn the basics of HTML and CSS. They are pretty easy to grasp the basics of. The JavaScript itself can be placed in a &lt;script&gt;&lt;/script&gt; tags or it can be called as an external file. It's easy to call JavaScript, and this should give you a basic idea: http://www.w3schools.com/js/js_whereto.asp Javascript can be used to dynamically interact with a website. Let's say you want something cool to happen when a user clicks on a button -- JavaScript can create something that moves, changes sizes, hides, etc. CSS can do lots of that too, but JavaScript is more, ... umm, "intelligent" than CSS and can handle dynamic elements better. What if you want to create 100 &lt;div&gt; elements, and you want each one to have a numbered class. Javascript can do that for you in only a few lines of code rather than having to type them out manually.
This is awesome. I made a suuuuper-minimalistic idea of a blackjack game via CodeAcademy so your coding seems pretty alien and beyond my level to me haha. But this could be the best blackjack game on the internet considering it isn't slathered with advertisements and shit asking me to register. Just played for like 20 minutes.
I actually got the inspiration for this game from CodeAcademy. Though I decided to make it from the ground up on my own because I was quite bored with CodeAcademy (still a great site!) I would make this public and ad-free but my only concern is safety and security. I'm not advanced enough in database encrypting to know if it's secure or not. Wouldn't want a poor sport to hack the database and cause havoc :( But having this as a free-to-play no-advert blackjack game is ultimately my goal! 
You should separate your HTML from your JavaScript code. Look into templating. I'm personally a big fan of [Google Closure Templates](https://developers.google.com/closure/templates/docs/helloworld_js). You should also separate your Input/Output control work from your game logic, to make it easier to maintain. In other words, put all your UI click bindings and etc in one JS file and have it call into a different JS class, which you call into when the user does something. As someone else mentioned, you could do "events" for enabling/disabling the UI controls as they're allowed/not allowed. Fire the event from your game logic script, and listen from the UI script. For example: Game logic code: $(window).trigger('available_actions', [{"hit": false, "double": false, "stand": true"}]); UI code: $(window).bind('available_actions', function(availActions) { $(availActions).each(function(i, action) { var button = $("button[action=" + action + "]"); if(action) { button.deleteAttr("disabled"); } else { button.attr("disabled", "disabled"); }); }); Note that I'm assuming the buttons look like this: &lt;button action="hit"&gt;hit&lt;/button&gt;&lt;button action="stand"&gt;stand&lt;/button&gt; This is also particularly nice, because you can bind your click events like this, which would just bind on clicking an action, and attempt to call that similarly named method on your game object. $("button").click(function() { var action = $(this).attr("action"); gameObject[action].call(); }); edit: Just did some more reading, and noticed that you aren't really using objects at all, just putting everything the global namespace... you'll want to learn to do objects/classes soon, they'll help you organize your code. Example: var Game = function() {}; Game.prototype.hit = function() { // do your hit logic here. Store all information on this "this" var... like so: this.total += 10; // anything you put in the "this" object will be available in other calls on this same // instance of the game }; Game.prototype.getTotal = function() { return this.total; }; Example usage: var g = new Game(); console.log(g.getTotal()); g.hit(); console.log(g.getTotal());
I hated it... it's like a lot of other tutorials... spend ridiculous amounts of time going over basics, and then 0 to 60 when bringing up the more advanced topics... also, it's very hard to learn programming through disembodied examples like this... like you will learn what something is, but you won't learn why it's useful and where to apply it, so you won't retain the knowledge.
To be fair, that comment isn't necessarily negative. It's like doing a statistic on how much Michael Jordan stuck his tongue out while driving to the rim, and then as a fan, saying "Michael Jordan is out of touch with the basketball community". It's partially sarcastic, and partially a compliment to them, and it's also just factual. If Crockford did something that the majority of the community didn't do, right or wrong you could say "He's out of touch with the community" but I wouldn't look more into it than that.
I'm not talking about this specific instance. I'm talking about your stating you don't feel it's important to validate and your thinking a browser doesn't enforce something you are trying to do. I hang out with browser and W3C people all the time and I wish I still had a link to a few articles they wrote showing just how much a browser enforces everything and just how important validation is. Your comment that there would be a speed up because it would be one less rule to follow - the reason you would get a potential speed up is because browsers may drop all processing after that error. If it can figure out a way to fix it, then it slows down cause it spends time fixing your invalid markup. iow, it has to guess at what you are trying to do which means you would be relying on every browser vendor guessing the same way. None of that can be very good for you.
This! This works perfectly, thanks!
Usually it's done the other way around. It's assumed that the shipping address is the same as the invoice address. There is then a checkbox which, when ticked, allows you to enter a shipping address which differs from the invoice address. This way, no extra user action is required in the vast majority of cases.
Ultra hipster innovators and revolutionaries.
&gt;[mixed reviews](http://w3fools.com) indeed. along with the MDN, Google offers some tutorials as well here: [http://code.google.com/edu/submissions/html-css-javascript/](http://code.google.com/edu/submissions/html-css-javascript/)
First of all, let me say, that was much much better than I was expecting! One of my earliest CS assignments was to build a Blackjack game in Java, and it was an awful mess. Thankfully I've gotten a little bit better since then. As some others have pointed out, I highly recommend splitting out anything that works with the front end (anything that does CSS or HTML DOM manipulation) from the actual app logic that tracks the cards, the user's money, the bets, etc etc. Make them all separate functions, and make them call each other as necessary. Give them semantically descriptive names of what they do... it helps reading and debugging immensely, and if you start working with other people, they will appreciate. I picked a relatively straightforward part of your code and did some light refactoring: var createDeck = function() { var decks = []; var cardNames = ['A', 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K']; for(var deck = 0; deck &lt; 2; deck++) { for(var suit = 0; suit &lt; 4; suit++) { for(var val = 0; val &lt; 13; val++) { var cardValue = val + 1; if(cardValue &gt;= 11 &amp;&amp; cardValue &lt;=13) { cardValue = 10; } else if (cardValue === 1) { cardValue = 11; } decks.push({'val' : cardValue, 'name' : cardNames[val], 'suit' : suit + 1}); } } } return decks; }; var deck = createDeck(); I tried to focus on refactoring how you get there from start to finish, but not on how this code fits into the rest of your codebase, except for the fact that I made your function return a deck instead of messing with the global variable directly. Now when you need to recreate the deck, instead of: deck = []; createDeck(); you do deck = createDeck(); I prefer "for" loops, so you don't have to manage indices of your loops. You should also use 0-based indices ("for(var i=0; i &lt; 3; i++)" as opposed to "for(var i = 1; i &lt;= 3; i++)"), because it's better practice, and you're often iterating over arrays that are 0-indexed (rather than having to put a junk value in array[0] or reference i-1 all the time). I also prefer giving everything nice semantically accurate names when possible, to understand what's going on ("var letters = ['A', 'B']" as opposed to "var n = ['A', 'B']"). Hope this helps somewhat/at all! **edit:** ...and that's why we test our code, kids. Wanted to make sure my result was true to yours so I tested it. I accidentally made 3 decks instead of 2, and my suit variable was 1 off of yours because I refactored it to be 0 indexed. I have made the appropriate adjustments. Also, fixed some clarity issues.
Codeacademy? ;)
Yup, basically the same for me: /^(1\d{3}|20(0\d|1[0-2]))\/(0[1-9]|1[0-2])\/(0[1-9]|[1-2]\d|30) ([0-1]\d|2[0-3]):[0-5]\d(:[0-5]\d)?$/
I always forget about `\d`!
`/\b((1\d{3})|(20(0\d|1[012])))\/(1[012]|0[1-9])\/(0[1-9]|[1-2]\d|3[01])\s*([01]\d|2[0-3]):([0-5]\d)(:[0-5]\d\)?\b/` This one seems the same as other solutions but doesn't require the date to be in a line of it's own
IMHO: checking the validity of a date(time) via regexp is lame!
here's mine: http://pastebin.com/vGdTmSse This one was actually far easier than last tuesday's...I'm almost deluded :) edit: a silly 1-char error that slipped in
Yep, but it solved this challenge.
Yea! My first official 'hacked' project! I feel special, haha. I understand that the logic is viewable by anyone who knows how to access it, but I am wondering how you achieved that. And, would such an 'exploit' be prevented or at least made more challenging by minifying the JS? I never thought of JS as a server-side language and wouldn't know how to achieve pure isolation of code without resorting to server side languages like PHP. Splitting is coming soon, I'm working on that one right now.
 /^(1\d\d\d|20(1[012]|0\d))/(1[012]|0[1-9])/([1-3]\d|0[1-9])\s([01]\d|2[0-3]):[0-5]\d(:[0-5]\d)?$/
You are very right, I should stick fully to JS. Difficult part is, I learned JS and jQuery at the same time and learned to use their code interchangeably,which is probably a bad practice. The embarrassing fact is, there are certain functions that I am not fully sure are jQ or JS. Thank you for that idea, however. While the task of re-doing a large part of the work is daunting I know it'll improve my coding. 
And it's also a lot easier when you have back referencing in your regex. 
Yikes. Brute forced this guy: /^(1\d{3}|20(0\d|1[0-2]))\/(0[1-9]|1[0-2])\/(0[1-9]|[1-2]\d|3[0-1]) ([0-1]\d|2[0-3]):[0-5]\d(:[0-5]\d)?$/
Thank you for informing me about the 0-based arrays, I'll put this practice into effect immediately. I'll also use for statements instead of while! Your post was very informative and helped immensely. A question I do have is, what's a good naming practice for variables and functions? I do fall prey to the 'varName1' 'var_name_2' 'VarName3' inconsistent naming schemes. 
Here is mine: http://callumacrae.github.com/regex-tuesday/challenge3.html?find=%2F%5E(1%5Cd%7B3%7D%7C20(0%5Cd%7C1%5B0-2%5D))%5C%2F(0%5B1-9%5D%7C1%5B0-2%5D)%5C%2F(0%5B1-9%5D%7C%5B12%5D%5Cd%7C30)%20(%5B01%5D%5Cd%7C2%5B0-3%5D)%3A%5B0-5%5D%5Cd(%3A%5B0-5%5D%5Cd)%3F%24%2F
Regarding good naming practice, just be consistent. On the project I'm currently working on, we use camel-case for our all of our javascript variables and functions (showDealerHand(), var numberOfCards, etc), and then we use underscore separation for class names in the html (&lt;div class="user_bet_amount"/&gt;)
 /^(1\d{3}|20(0\d|1[0-2]))\/(0[1-9]|1[0-2])\/(0[1-9]|[12]\d|30)\s([01]\d|2[0-3])(:[0-5]\d){1,2}$/ Best I could do. A minor length optimization would be to replace \s with a space, but I don't think it can be made shorter. **edit:** Those of you who didn't escape the forward-slashes should be careful. It will throw an error if you try to use it in an inline regular expression.
seems to be a div.
I don't really know how to use the inspect tool, so don't quote me on that hehe...I did find one area on that popup that has an iframe listed in the tree (using the mouse and going over all the elements on it until I found one). wish I could post a picture, but we have a filter that blocks imgur login page.
hokay. `window.parent.location.href`. or `window.parent.parent.location.href` if, for some godawful reason (wouldn't surprise me, it's SharePoint), your dialog is nested two iframes deep. also, you have other options, like minus.com or taking a photo with a smartphone and uploading from there to imgur.
One thing to note is their issues with certain libraries, like Knockout, have ways to workaround messing with your views. Knockout has had external bindings (written in only your javascript), since December, 2011 the 2.0 release. You can check out the full post about it here: http://blog.stevensanderson.com/2011/12/21/knockout-2-0-0-released/ and the specific jsfiddle demonstrating it http://jsfiddle.net/StevenSanderson/2eY2u/light/
thanks. the guy I'm working with thinks he figured out how to do it last night a different way...I'll try this if his way doesn't work.
Yeah, that's also true.
As I said above, they're test cases, not the challenge itself! The test cases are there to help you, but they're not the entire challenge.
Yeah, I've noticed a few people using incorrect regexes, too :-(
You could make it a bit shorter by replacing `\d\d\d` with `\d{3}`. It's also more readable.
Very clever.
That isn't the point of the challenge, though. These challenges are to help people improve their regex skills, not to solve real problems (although the first one could be helpful in a real life situation). The second challenge (to match grayscale colours) also shouldn't really have been done using regular expressions, it should have been done using a proper parser (which would probably have been fairly heavily powered by regular expressions, but would contain some actual logic).
I agree on that, but: &gt; you are aiming to get as many test cases as you can to pass. Also, no need to be blunt. I highly enjoy these challenges. You could easily add a "no match" with a day over the 30th. Keep it up, I like these. I have a couple of questions and I'd be happy if you could answer. :) 1. What's your relation to phpBB? What have you done? 2. Are you a jQuery author? If yes, what have you done? I've been curious since I started following you on twitter.
Are you using jQuery or another JavaScript library at all, or just trying to do it with vanilla JavaScript? var cells = document.getElementsByClass('blahblah'); for (var i = 0; i &lt; cells.length; i++) { cells.attachEventListener("click", setBackgroundColor); } function setBackgroundColor() { this.style.backgroundColor = 'green'; } That *should* do the trick, but it's urgly. If you had jQuery already, I'd recommend doing it as a `$('table').on('click', 'td.className', setBackgroundColor);`
If OP has more than a couple hundred cells, then I would strongly discourage attaching an event listener to every cell. Definitely use the jQuery method in that case.
Im trying vanilla Javascript (just started Computer Science). I tried your code, did I do something wrong?: &lt;SCRIPT&gt; var cells = document.getElementsByClass('third'); for (var i = 0; i &lt; cells.length; i++) { cells.attachEventListener("click", setBackgroundColor); } function setBackgroundColor() { this.style.backgroundColor = 'green'; } And in the HTML I have the cells that I want to grab wich look like: &lt;TD class="third"&gt; &lt;/TD&gt; Note: they already have a standard bgColor (blue) through CSS (if that makes a difference). Thanks for your help!
I heartily agree with you. Even without jQuery, it'd still be better to attach the event listener to the table itself, look at the event target, and recurse up to a `td` with the right class (or bomb out once you hit the table itself). but it's much simpler to just drop in jQuery and use `.on()`.
Both actually! Excercising JavaScript and it's useful for a project. My college uses books from 2007 and Code Academy during lessons so I am just trying to put as much practice in outside of college.
No idea. Had a guy email me about it about a week ago saying that he had seen it and flagged it (the reviewer clearly hasn't even purchased the book), but it is still there. I'm sure that it'll be gone by the time I'm published!
oops, thanks.
tl;dr: a collection of frameworks and libraries, sorted by category (automated testing, stylesheet preprocessing, etc.)
It's very cool that it works, but I honestly don't have fond memories of writing WinAPI apps. It would be neat to build a framework on top of this.
&gt; I could use shorthand for short number ranges and "any digit", but I like it to be explicit when doing these puzzles. This is probably a good idea because "any digit" isn't actually defined as [0-9]. In know at least perl matches \d with any unicode digit such as "٠" (Arabic-Indic Digit Zero) or "𝟎" (Mathematical Bold Digit Zero) use utf8; if ( "٠" =~ /\d/) { print "We have numbers\n"; # This will execute }
Most of these are legitimate things to ask. Browsers are faaaaaar from cross compatible, and I've had plenty of chrome bugs pointed out in my code, which turned out to be a bug in chrome dev. It's usually less hassle to work out their setup, and recreate it yourself, than to ask them to open the console and tell you the error. I've had people who run web design companies that struggle to do that. Only one or two are things you wouldn't expect, like asking if they cleared the cache (since any decent site can do this for you by using timestamps in the scripts name).
Now we need a nodew to hide the console.
not a collection, just their preferred one for each category
refresh the browser cace
Well, both. Each category also includes a token "Alternatives: [item](/#), [item2](/#), ..." line at the end.
This looks like Windows API calls, not Windows Forms.
try as I might, I still cannot understand most of these frameworks and what they do. I don't think I'm a stupid person, but I'm self-taught so I know I have a ton to learn still. I've never had a need (or known that I had a need) to do some of what is described and every time I read a similar write up, I get to something like this and am totally befuddled: &gt; It lets you write Gherkin based application specifications that you can then link with the Cucumber.js in what is referred to as step definitions to actually test your application specification. I feel like I've plateaued, and don't know how to proceed in my development… development 
No, I'm asking for the last c in "call/cc". Everything else that comes with it is icing on the cake. If they're going to gives us all the cool things that continuations grant, then give us continuations rather than piece wise features.
That sentence is written kind of strangely. If you really don't know I can try to help - please feel free to correct me if I'm wrong. Test-driven development is becoming a popular way to build applications and cucumber.js helps facilitate that by allowing you to write the procedures (step definitions) that the user goes through to get something done, and the alternative directions when something doesn't go as planned. [Gherkin](https://github.com/cucumber/cucumber/wiki/Gherkin) allows the tester to write the steps in a more readable way. The example in the above link: Given some precondition And some other precondition When some action by the actor And some other action And yet another action Then some testable outcome is achieved And something else we can check happens too This allows Project Managers (or anyone else) to read and write rudimentary documentation on the functionality of the application if they understand Gherkin syntax. This is immensely useful for a variety of reasons.
what's incorrect about it?
I have alerted inside the if to show each readystate (in Chrome) and it was alive...here's a c&amp;p of the function itself. Thank you!! function AddxmlhttpPost(itemid) { var xmlHttpReq = false; var strURL = 'aaa.php'; var self = this; if (itemid){ itemid = itemid; } else { itemid = 0; } if (navigator.userAgent.indexOf('MSIE') !=-1){ self.xmlHttpReq = new ActiveXObject('Microsoft.XMLHTTP'); } else{ self.xmlHttpReq = new XMLHttpRequest(); } self.xmlHttpReq.open('POST', strURL, true); self.xmlHttpReq.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); self.xmlHttpReq.onreadystatechange = function() { if (self.xmlHttpReq.readyState == 1) { updatepage('Loading'); } if (self.xmlHttpReq.readyState == 4) { updatepage(self.xmlHttpReq.responseText, itemid); } } self.xmlHttpReq.send(getquerystring(itemid)); }
Jesus Christ can someone here tell me how the fuck you unit test JS??? 
It's also [kinda big](http://omar.gy/wp-content/uploads/2012/09/JavaScript-logo.png). I mean even if you really wanted a specific font for those 2 letters, no reason not to resize it!
I fell in love with Javascript because it's the only language that runs on any computer, and any foreseeable computer, with no install. If I can figure out how to write it, I know you can run it. As a developer who wants as many people as possible to use his code, that's awesome.
what?
The people who wrote the website aren't the same people who work on Mobile Safari. I'm sure inline &lt;video&gt; tags are high on the list for inclusion in Mobile Safari. The people who work on apple.com came up with something else in the mean time.
late to the party with an extremely lazy solution: /^(200\d|201[0-2]|1\d{3})/(0[1-9]|1[0-2])/(0[1-9]|[12]\d|3[01]) (2[0-3]|1\d|0\d)(:[0-5]\d){1,2}$/
It's working in both Firefox and Chrome here...
You shouldn't make such foolish, amateur comments on a public forum. You remind me of people who still think doctypes aren't required or necessary and still use tables for layout. 
Thanks for all the replies, just one more quick question! Should I focus on learning JavaScript first or can I jump right into JQuery?
Yes - it looks like IE is broken in that regard too, along with a long list of other issues.
True - Javascript actually offers the WORA style development that Java promised by didn't deliver. The fact that it's also a dynamic, weakly-typed language that's fantastically expressive is just gravy, really.
Cut him some slack - dude's only just stopped working in *Flash*. Soon he'll learn to stop using tables for layout, a bit later someone will educate him on progressive enhancement, and about 2020 he'll hear about this amazing "HTML5" thing that's just come out.
* Spammer. * Code is horrible. * `Referer` is an **optional** header field, and should never be a functionality requirement.
Nothing I've said relates to that. My arguments have been about writing valid markup and not this particular instance which I already said. HTML is NOT flexible. Browsers are. How markup is to be written is solidly shown in the spec though, yes, there are areas that aren't clear. While you complain that Google's markup "doesn't look right", you also note it is valid and works in all browsers and saves bandwidth. Sounds like well written markup to me.
I thought security restrictions prevented you from doing exactly that, programmatically triggering a link click. Maybe it works within an event handler from a user-initiated event? Guess I've got something to play with when i get to a workstation. edit: huh. nope. In Chrome, at least, you can just straight up make a link and `.click()` it, no user interaction required. 
Seriously, please! That subreddit is nearly lifeless.
It's invalid to have a space between the `hsl` and the opening bracket.
Mucking up the view with obtrusive javascript is only one of the issues that stickit addresses. I think the better and more important argument is that stickit fits in naturally within a Backbone view and its state/lifetime. The Knockout example doesn't show any Backbone models or views - it just wires up some plain javascript objects. How would that work with Backbone model events, canceling events, getting and setting model properties with different options, view removal, etc.?
Referrer is optional (and can be spoofed), please do not write code requiring it.
&gt;you can just straight up make a link and .click() it, no user interaction required. It's like a redirect. There aren't any security implications. If you can add this kind of JS to the page, you can already do whatever you want.
Yeah, that makes sense. I must be thinking of programmatically autostarting embedded videos on iOS, which I'm fairly certain requires a user-initiated event.
Awesome job for being new. Much better than what I coulda done when I started. Some tips: For jQuery/selector usage, if you find yourself using the same selector frequently, try to cache it. Something like $('#bet &gt; .bet_amt') I would recommend saving in a var such as $bet_amt like: var $bet_amt = $('#bet &gt; .bet_amt'); Then just call it the same as you would normally: $bet_amt.html("0"); This saves jQuery from having to look through the html every single time you call the selector. Other tips I see mostly other people have mentioned such as trying to split your logic out of your ui events. Also using some constructors and classes might help organize some logic as well. Awesome job again! Keep at it, experience is a major part of programming.
I don't think it is allowed for rgb. Why, did I put a test case in for that?
When you do the first $(this.el).append(html) Your html variable contains "&lt;table class="table table-striped"&gt;&lt;tbody&gt;" Since you're inserting it into the DOM at this point the browser needs to close the tags to make sense of it. You're not just appending a string here, you're adding a new object into the DOM. If you just wait until your HTML is fully formed before you insert it into the DOM it will act correctly. 
Right. Try something like this: var table = $('&lt;table class="table table-striped"&gt;&lt;/table&gt;'); var tbody = $('&lt;tbody&gt;&lt;/tbody&gt;'); table.append(tbody); $(this.el).append(table); _(this.sub_views).each( function ( fv ) { fv.render(); fv.delegateEvents(); tbody.append( fv.el ); }); 
Yeah - it's *object* appending, not string concatenation. That's a bit confusing till you grok it.
Same with audio (on iOS) or opening popups.
People giving advice in this thread that don't know how to spell REFERER make me question their responses. Especially when they don't even seem to know it's a HTTP header.
The correct spelling is referrer. It's misspelled in the HTTP spec. EDIT: Oh, from your comment history I see you're just a troll. So you already knew that.
What does updatepage() do? You might find that using jQuery or another such library for AJAX calls makes your life considerably easier. I know I did.
I am working on a life simulation project. These aticles have been really insightful. Thanks for your contribution.
I've scoured the interwebs trying to find the answer btw, I'm incredibly lost on what to do here.
Does anyone know if there are any other competitions that are starting/recently have started? 
No, I'm a professional web developer and would know better than to spell it that way.
I have been googling this very question repeatedly lately and found no answers. /r/javascript to the rescue!
So, how many of those slides are there? How many kB of data are we talking? Why do you think you'd need one extra JS file per slide? How many transition types are there? Wouldn't a few parameters be good enough? &gt;kind of like power point Have you looked at existing projects? There are many web-based slide decks.
There could be any number of slides. Which will be coming from a number of different authors. We are having people make their own slides and submit them on the site. We want to give them an empty html file that contains just the slide bounds and also a js file that has the events that can be called for the slide interactions. So they can customize the slide html and code their own onClick/onEnter/onLeave events. I coould combine them all, but I don't know how large the files will be and they wont all come in at once.
what? I do that all the time! &lt;body id="body"&gt; I also like to do &lt;ul id="ul0"&gt; &lt;/ul&gt; &lt;ul id="ul1""&gt; &lt;/ul&gt; ...don't judge me! (I am kidding) (edit: I did once, in the late 90's, do &lt;div class="text"&gt;[some raw text]&lt;/div&gt;. For which I should be roundly judged.)
Decorators and AOP has its place but this is just "clever" coding. This is an excellent example of "just because you can doesn't mean you should" design. Your view should not care how or when your data is loaded.
I think it depends on what you are doing. For a simple site with minimal traffic it is probably overkill. However, I can imagine this being useful in a service oriented architecture. I imagine sites like Google, Amazon, and Facebook have to do this sort of scripting to support the amount of traffic they receive.
 var pdata = { background: '#000000', [ ... ] }; for (var pkey in pdata) snake_ground.style[pkey] = pdata[pkey]; Or: function setStyle(element, properties) { for (var pkey in properties) element.style[pkey] = properties[pkey]; } So this, var snake_ground = document.createElement("div"); snake_ground.style.background = "#000000"; snake_ground.style.display = "block"; snake_ground.style.width = ground_width + "px"; snake_ground.style.height = ground_height + "px"; snake_ground.style.margin = "0px"; snake_ground.style.padding = "0px"; snake_ground.style.position = "relative"; snake_ground.style.overflow = "hidden"; is now simply, var snake_ground = document.createElement("div"); setStyle(snake_ground, { background: '#000', display: 'block', width: ground_width + 'px', height: ground_height + 'px', margin: '0px', padding: '0px', position: 'relative', overflow: 'hidden' }); 2nd, use array literals, var snake = [];
&gt;2nd, use array literals, Thanks, I didn't know about that. I've promised myself to not look at any code examples. Right now I'm trying to make it work smooth and perform. I'll strive for better code, optimization and performance afterwards.
Yep, the comment is missing an "if", it should be "See if we are allowed to access a given web resource". ~~The function is wrong though, it does not check if you can fetch a given URL, only if the resource exists. To work, it needs to check if HTTP HEAD actually returns "GET" as one of the actions that you can take on the URL.~~ ~~HEAD might respond saying "yep, I know that URL, you can do POST to it", not saying anything about actually retrieving data from it.~~ Edit: Brainfart s/HEAD/OPTIONS/g
Well, of course. Say your maximum possible x is 500. You want blocks of 5. 500/5 = 100. Generate a number randomly between 0-100 and multiply it by 5. Tada! The dying part is the way the original snake worked, so that may not be considered a real problem. Another general tip: Hang out around StackOverflow. You'll get a *lot* of good tips for JS.
It never crossed my mind, smart and easy solution.
Use array literals because they're shorter, faster, and cannot be messed with. I can override the `Array` function to return an empty object, or a number, or anything. Can't override `[]`.
HEAD requests don't typically tell you what actions can possibly be made. A HEAD request simple returns the headers, and not the content body. Try it out yourself: curl -I http://www.reddit.com This just returns the headers, nothing else. (notice the hilarious Server type that reddit returns too).
Brainfart on my part, confused HEAD with OPTIONS. The method is very much correct :)
I'm on phone, not before a console. What's that hilarious Server type?
Gotta fix up the example code. Post.prototype.update = function(user,data){ if(Auth.hasPermission(user, Constants.UPDATE)){ // actually do the update } return data; }; withPermission now needs it's own namespace. So we have authSystem.withPermission and we get an extra function call and more code with less clarity. I don't see the advantage here. &gt; mind-binding Did he mean mind bending?
What is this... &amp;#3232;\_&amp;#3232;
In a word: no.
Hi, For the flip animation you could use something like this: http://lab.smashup.it/flip/ Pretty good info including a fall back (skim read the contents): http://css3.bradshawenterprises.com/flip/ Really you need to break down your problem into components 1. getting your randomly selected information onto the page, 2. getting a flip effect going on the container of said information 3. expanding it to flip to new information instead of back to the original information/image. Some more links I found while doing a Google search: http://webmuch.com/image-flip-using-jquery/ If you want to try your hand at an css3 this was a pretty good lead: http://css3playground.com/flip-card.php Hope it helps, if you think you will need help build a prototype on jsFiddle and link it, http://jsfiddle.net/ 
I agree that the view shouldn't know when the model data is loaded. The code here is simplified to exhibit what the combinator does, without all the complexity of why. The basic point is we have to add the complexity of asynchronicity somewhere. In this case, we have two views, one of which depends on the other. And we have two separate models. Now we load the two models' data asynchronously and we set callbacks to create their respective views when the data loads. How do we get both views rendered in the right order? If the main data comes back first, we don't want the main view to have to wait on the secondary data before it renders. If the secondary data comes back first, we need to not render its view until the main view has been rendered. Plus, we probably want to be able to unit-test both views separately without having real ajax calls for the two sets of model data. I think the best way to deal with this is to write the primary and secondary views with plain-vanilla render methods, and then decorate the secondary view's method with its loading-aware execution strategy. From the perspective of the primary view, the secondary view is always synchronous, and the complexity of the nested async call is hidden within the secondary view.
it adds a tonne of functionality too, but [Chosen](http://harvesthq.github.com/chosen/) is pretty sweet for select boxes.
There's no reason for jQuery there; that's your first hint. Remember, eleven out of every ten blog posts about code are giving you bad advice. The solution is easy: `Math.random()` returns a random number between zero and one. Multiply that by the length of the array, cut off the fraction using `Math.floor()`, and return the element from the array of that resulting number as an index. function randElement(fromArray) { return fromArray[Math.floor(Math.random() * fromArray.length)]; }
I literally did this exact same thing at a hackathon last weekend. Mine uses CSS transforms so it might not work great on IE, but it should be fine on most other modern browsers: http://jsfiddle.net/clarle/mCH5C/
What he actually wants is to test for the success range, not that it isn't 404ing. There are huge parts of the 100, 300 and 500 range that might matter here. Check for presence in the 200s, instead.
Seconded, Chosen is my jam. 
Happy cakeday! Putting those selector changes into effect right now. I want to speed the 'rendering' of code as much as possible, as I am planning on implementing keyboard functions for a very fast-paced version of blackjack. When you say 'constructors and classes' to organize the logic, could you give a simple example of that? I am running my brain trying to figure out how I can keep it more separated
I don't enter until I get head. I can see where he's coming from :) Sometimes I can't enter until I get head.
My client laughs when I tell him to enter the command: git reset --hard head when he fucks things up. He asked me (knowing that I'm gay), "Did you come up with this syntax? It just seems like something you would write." He used to be a unix guy, and he appreciates my love of the command "man touch".
Ask him the last time he fingered somebody.
Here, I'm feeling generous. This is why you learn the language, instead of cutting and pasting things you found on dubious blogs. http://jsfiddle.net/nHe3C/
For me one of the useful aspects of closures is storing an index of an array so I can always return data from a specific position in the the array (really helps make up for lack of pointers.) For example, in a game I might want to create some labels that show the equipment of a selected unit. The selected unit may change, but each label should always look for a specific position within the selected unit's equipment array: var lblItemName = createLabel( (function(n) { return function() { return selunit.equip[n].name; }; })(i) //0 = weapon, 1=armor, 2=accessory, etc. ); Using this method I no longer have to update my labels every time the user changes the selected unit (selunit). Since I'm passing a function with scoped variable data, when I draw label.getText() the labels just "know" where to look for the desired data. I hope that makes sense.
"Hardcore Developer Training" that uses the default wordpress template?
Interesting - ok, I'll try to keep this in mind. Thanks! If anyone has any other examples, I'd love to see it. I'm sure others are in the same boat. Logically understand them, just failing to see real-world application (which isn't saying that there are none!)
i prefer not using anything for select boxes. but if i have to extjs/sencha makes them look decent.
How does the example of: var $dialog = $("[data-role='dialog']"); var $button = $dialog.find("[data-role='button-ok']"); compare to: var $button = $("[data-role='dialog'] [data-role='button-ok']"); I've been finding that full selector queries can often be faster than previous best methods if they can be directly passed to the brower's querySelectorAll method which will then query natively. I'll have to play with jsperf later when I get a chance to see how data attrs compare.
Your words are just words, or you have any evidence? Thank your for you opinion, but but I can't constructively critics from you. Moment.js is better? Sorry, but just - no.
That was really well explained. One example/interview question I use is to create an adder, with the amount to add saved in a closure: ​var adder = function(a){ return function(b){ return a+b; }; }; var add5 = adder(5); console.log(add5(7)); //12 console.log(add5(1)); //6 
I think using $('a[data-foo]').live('click', fn); could achieve the same result, since live() attaches the event observer to the document, and the syntax is a little more contextual IMO.
maybe these lines in the draggable div js - forcing the initial location of the draggable object to be (0,0) which is the upper left corner? if (isNaN(dragObj.elStartLeft)) dragObj.elStartLeft = 0; if (isNaN(dragObj.elStartTop)) dragObj.elStartTop = 0; Just a hunch, I only glanced over the files with no testing?
Yet people still don't understand them, so we write more.
For those who read this and wanted more information: &gt; Here’s a final example of a closure for you to study. var myClosure2 = function () { var date = new Date(), myNestedFunc = function () { return "Closure for myNestedFunc: " + date.getMilliseconds(); }; return { myNestedFunc: myNestedFunc }; } (); Check out Dustin Diaz's "[How to achieve private, public, and privileged members in JavaScript](http://www.dustindiaz.com/javascript-private-public-privileged/)." **Edit:** Quoting removes line breaks. :( What's the better way to format code on reddit?
Being that you're familiar with backbone already, have you looked into Chaplin? Their upcoming 1.0 release should include plain JavaScript (as opposed to CoffeeScript). https://github.com/chaplinjs/ Also a bit about their controllers https://github.com/chaplinjs/chaplin#controllers I haven't had a chance to try this out yet but it looks promising.
indent 4 spaces on each line or wrap the line in a ` (back tick - key next to 1)
hey, it even looks good on mobile (Chrome, at least).
I'd like to get at least to the point where I could render sample text in the browser, but I don't know how long that will take.
in my opinion the worst part is that its done in a 'part' basis. if you're going to write about something thats already in many many places at least do it in a complete format.
&gt; That's actually part of the point for a library like Backbone. The boilerplate is there to enforce best practices for larger applications. What I'm talking about are boilerplate methods, like an application state manager, a layout manager, a controller object, binding handlers, and so on. &gt; That said, I have started to become a fan of Ember. It is production-ready, travis-ci.org[2] uses Ember on top of Rails, and Travis is definitely a huge project. Of the frameworks that do implement data-binding, I feel Ember does it the best, since it's integrated with Handlebars rather than using ng- or data- attributes. I've looked at Ember, and while I rather like it code-wise, the documentation is somewhat lacking and its performance appears to be below that of the competition in (admittedly flawed) benchmarks like [this one](http://jsperf.com/angular-vs-knockout-vs-ember/2), or [this one](http://jsfiddle.net/krisselden/bYPPT/) and [this one](http://jsfiddle.net/mhevery/vYknU/23/). And because what I'm working on is quite a bit more resource-intensive than a simple CRUD app, performance issues matter more than they would otherwise.
Can we get a demo?
That's how I used to work in the past. But honestly, the time savings of even a minimal framework like Backbone are significant, and using code that's already in use by numerous people cuts down on bugs quite a bit. Especially when it comes to hard-to-spot edge case bugs, which are by far the most annoying kind.
Did you copy-pasta exactly what you have? Syntax errors might be your problem. That second script is missing a `);` &lt;script type="text/javascript"&gt; $('#work_nav').toggle(function() { $('#examples').animate({ left: '+=200' }); /// &lt;-i missing ); to close the animate() call }); &lt;/script&gt; Try opening up the JavaScript console and see if you're getting any errors either on load or when you click the thing.
[customSelect](https://github.com/rixth/customSelect). It's what's used on the price/beds/baths controls on [Trulia's search pages](http://www.trulia.com/CA/San_Francisco/) if you want a IRL demo.
Wow that was quick, thanks. Added in the missing bracket and semi-colon but the script still isn't initializing unfortunately. Should the work_nav id being used in the navigation slider above make a difference? EDIT: It's definitely the second function. Commented out the navigation one and it still didn't animate.
Ah.. are you trying to use `.toggle()` on #work_id as an event handler? 'cos .toggle is an action (show/hide), not an event. Is there supposed to be a function which contains the .toggle() and gets called from when you handle ... whatever is supposed to trigger it movnig around? It would be helpful if you could dump more of this into a jsfiddle, so there's more context. I'm kinda stabbing in the dark at the moment.
yep! 200 is the bestest!
very nice!
Generally speaking, I prefer the first pattern for debugging purposes. var returnValue = ...; return returnValue; It's simpler for me to examine the `returnValue` before it gets returned from the JavaScript debugger. I haven't run the stats, but I doubt there's a significant performance hit to declaring one extra variable and sticking the pointer in there. Also, if you're doing maintenance later and adding more stuff via `.extend()`, but want to do it in separate chunks, then it's easier to simply have the `model` variable to work off of. 
Yeah, saving a tiny amount of information like that isn't going to cause noticable lag in the first place. But if you're really that worried about it, everything that has localStorage also has Web Workers.
Here's a common use of closures: Let's say you're making an AJAX call, and you'd like to do something when it's done, without blocking execution. The answer is simple - use a callback, like so: $.get('ajax/test', function(data) { $('.result').html(data); }); Which is awesome. But what if you want to make two AJAX calls? If you don't mind doing them in sequence you can nest them like so: $.get('ajax/test1', function(data1) { $.get('ajax/test2', function(data2) { $('.result').html(data1+data2); }); }); But what if you want to do it in parallel? You need a way to ensure that the callback is called once (and only once) after both AJAX requests have completed. The answer is closures. Observe: var testHandler = (function(max, callback){ var counter = 0, argList = Array(); return function(data) { counter = counter+1; argList.push(data); if (counter == max) { callback(argList) } } })(2, function(results){console.log(results)}) $.get('ajax/text1', testHandler(data); $.get('ajax/text2', testHandler(data); When both of those calls succeed, your callback will run. Of course, if you're doing this sort of thing a lot you'd probably want to use a library such as the excellent [async](https://github.com/caolan/async) library; it's a lot cleaner than rolling your own handlers for every call. (Or, of course, you could just use a bunch of global variables to handle state. But closures are much more elegant.) Finally, I found [this closure tutorial](http://nathansjslessons.appspot.com/) extremely useful; working through it step by step took a while, but I felt like I finally "got" closures when I was done.
a perfect time would be when they hit the "save" button. it's not your job to rewrite standard user interaction metaphors. especially if you still have questions like this. you want their interaction to be seamless in relation to what works on every other site on the planet by default. having a slightly different interaction metaphor than everything else they use all day just because you can is what would make their interaction non-seamless.
I think this has to be the most useless piece of software I've ever seen, and I've worked with code written by people about 1IQ point over a rock.
[uniform.js](http://uniformjs.com/) is one of the more popular choices.
No, single core has been able to run multiple threads for beneficial effect since.... well, when everything was single core. It would only give you a negative effect if some other thread was using 100% of the processor 100% of the time at a priority that never let yours slip in.
It doesn't work for me. Nothing happens in Chrome and Firefox throws an error: "window.DataView is not a constructor".
Nice. Maye I'll send that back to him and pretend I came up wih it. Keep him on his toes. Nobody expects the Sales Department Code Inquisition!!
While good for an example, if you're using jQuery anyway, you can use deferreds instead of rolling your own handlers or using another library. http://www.erichynds.com/jquery/using-deferreds-in-jquery/ 
Practice. Write JavaScript. Take existing JavaScript, and rewrite it. Try to make it better. Make it faster. Take code from one library, and make it work without a library, or translate it in to a new library. Break plugins. Expand plugins. Know firebug/dragonfly/inspector (know how to debug javascript, how to read the DOM). Learn the differences between browsers, and learn how to quickly search out answers to common problems (like cross-browser inconsistencies in JavaScript - you don't need to memorize them, but always be able to find them quickly). Just one piece of the pie.
Unit testing, version control, continual integration. Always write your tests first. Commit to your VCS, have your continual integration run the tests. So many programmers aren't doing this, it should be part of CS 101.
Seconded everything above - the books are definitely useful, and understanding frameworks is a must. The more you write (and READ SOURCE CODE) the better you'll be - and it becomes easier to pick up different frameworks when you start being able to tear apart source code. One thing I used to do - take example code, and start inserting console.debug() to help visualize what was going on. (Don't know console? Google around, you'll find articles that are better about its intricacies than I can give you here).
What versions are these? Current versions of both work for me. What platform are you on?
It's wrapper and it's can't be fester than native Date class. But there are no reasons to think that is slow. Just look to calendar script base on this tool. It's work good. [calendar](http://codepen.io/the-teacher/pen/adyoD)
nice didn't even know this site existed (codepen.io).. Yeah, the calendar is quick, however a little bug with showing december twice and not going to months before october.. maybe that's a feature / setting i dont see?.. without going thru the code i didn't know if you were saving a ton of variables or doing a lot of processing actions to achieve the date format.. for me it's mostly formatting the date for a require api call or something.. again, thanks for the insite on codepen.io gonna post some stuff.. you got any suggestions for compressing my code? as in turning long variable/function/object names into single charactor equilents? thanks.. 
Because so many small shops get tripped up on "why should we spend half our time not writing code?
I took your solution and expanded on it. http://jsfiddle.net/MG57f/ I added a callback on the "load" event of the Facebook script, to do the Facebook alignment. The G+ alignment I fixed with CSS.
Write the ideal - update when the user updates something, then profile and experiment with different optimizations. Where is the lag? Is it that the checkbox doesn't check fast enough (because your app is still writing and hasn't sent the "finished" response?) -- if so, update to a spinner or grey out while it writes. People are used to "lag" when it is obscured by hour-glass, spinners, bouncing balls -- anything to show a response letting them know "work is happening".
Event handler, yes. When that's click an element is animated to the centre of the page. Right mate, no problem I'll fire that up today if I can. What should I be using instead of toggle?
We have individual widgets pull templates as needed (checks to see if they are embedded in the page already, or loads them from a RESTful template controller), but if you're looking to minimize requests, wouldn't you load all the HTML and Javascript you can use in a single request? A problem with dynamic layouts is determining what resources are needed at initial runtime, at eventual runtime (after interactions), and getting those resources with minimum return times (when the client is stuck waiting).
write tests first = requirement for js engineer ? you should make a difference between a way of developing and being an engineer.
To me, writing robust, maintainable, tested and continuously tested during development IS one of the things that separates "engineers" from "developers". Writing tests first is IMO, the easiest way to adopt a methodology of doing this. It really doesn't matter, but it's incredibly useful and easy once you write tests to meet specs / behaviors and then make them pass. Really it doesn't matter, as long as the tests are well formed and maintained. Look around at any of the popular JS projects, look at how many have unit and integration tests. There is a reason for that, and there is a reason many of the great projects and great developers do this. It is semantic (developer vs engineer), but to me engineer has an implecation of just that -- engineering. Lots of people are developers, the ones that make useful things that are well made and are proven (tested) to be well made and correct engineered their project to be so.
both firefox / chrome mozilla/5.0 (macintosh; intel mac os x 10_6_8) applewebkit/535.2 (khtml, like gecko) chrome/15.0.874.120 safari/535.2 mozilla/5.0 (macintosh; intel mac os x 10.6; rv:15.0) gecko/20100101 firefox/15.0 does it in safari as well.. 
You uh, reverse the function call polarity using the callback, and uh, enable multi vector process flow by asynchononymous interception of results by using multi-roped executation.
You might consider using [IndexedDB](https://developer.mozilla.org/en-US/docs/IndexedDB) instead, as it was designed to address this very problem. However, aside from Chrome and Firefox for Android, [it's not made its way to mobile browsers yet](http://caniuse.com/indexeddb) so it may not be an option. 
yet one variant with custom month border http://jsfiddle.net/vycFT/2/
this is great, just what I've been waiting for! *bookmarked*
Monkeyed around on jFiddle for a bit and looked at what others had done. Hopefully this will work on my page, I'd assume if it doesn't then there's some sort of HTML issue. I mean you'd expect that to break the navigation to begin with but ya never know. [Linky.](http://jsfiddle.net/EtfCV/36/)
can you tell me, which value return new Date(0) into your browser? I have everywere Date {Thu Jan 01 1970 04:00:00 GMT+0400}. Mac browsers return something else?
No problem :)
Well, really you have to start with Douglas Crockford. Read everything on his website and "The Good Parts" book. Then watch some of his lectures on YouTube. In JS, we throw out half the language and you need to know why. That is step 1. Step 2 would be something like "The Definitive Guide" which reads like a dictionary, but gives a lot of information. I recommend taking it in parts and doing a small project based on each part. Step 3, you have to learn the major frameworks. jQuery is essential these days. Underscore is the secret science, and Backbone helps you to understand larger JS applications. Anyway, that's my .02
...with _lots_ of cursing and hacking :-)
Thanks.
no arguments here. stop queues, receive responsive animation. 
Why?
The most common and useful scenario that comes to my mind is right before a hammertime() call.
Please be specific. What exactly do you need help with?
Nobody has a job with *just* javascript. You need to be a well-rounded web developer. Know your way around every facet of the web, server side and client side.
But aren't callback functions used for ? Or I'm completely mixing up ?
&gt; one of the things that separates "engineers" from "developers". Those definitions are based on nothing but your own personal preferences. &gt; It really doesn't matter, but it's incredibly useful and easy once you write tests to meet specs / behaviors and then make them pass. Really it doesn't matter, as long as the tests are well formed and maintained. Writing tests isn't magically going to make your code robust or maintainable. If a developer fucks up on robustness and maintainability, there's every chance he'll also fuck up on writing decent tests. &gt; Look at how many have unit and integration tests. There is a reason for that, and there is a reason many of the great projects and great developers do this. Lots of the best projects in the world have no tests whatsoever. There's a reason for that, and there's a reason why many of the great developers don't do this.This entire entire argument is bogus. Appeal to authority is a logical fallacy. More to the point, the projects you are talking about... were they written by first writing tests? &gt; It is semantic (developer vs engineer), but to me engineer has an implecation of just that -- engineering. Giving made-up definitions to words just muddies the waters in discussions. The entire "engineer" v.s. "developers" thing just makes no sense. &gt; are proven (tested) to be well made Tests *prove* nothing. The only thing they prove is that the code covered by the test behaves the way the test wants it to behave. That, in itself, proves nothing of course, because the tests themselves may very well be wrong. The modern trends of Agile development and TDD specifically are the same bullshit silver-bullet story I've been hearing my entire life. "If only people would do X, then we'd have stable, maintainable, robust, well tested super-duper code!" It reeks of the Java developer mindset that more abstractions cannot possibly make anything worse. Are unit tests useless? No. Unit tests can be extremely valuable. Do they take a fuckton of work to set up and maintain? Yes, yes they do. So, like *always*, people should ask themselves: will the gains outweigh the costs? It's a simple tradeoff. To blindly write tests for everything is a foolish way to go about. Is TDD useless, then? Yes, I believe it is. First of all, because you're simply reimplementing specs in code which is then going to test other code you're going to write. Now you can not only make mistakes in the real code, but also in the test code. Naturally, since you wrote tests, you're going to assume your code is correct because, hey, it passes the tests, doesn't it? In reality, you need to test your tests against the specs. The funny thing is... sometimes the specs... they're, you know.. *wrong*. See the uselessness yet? That's not to say tests aren't valuable *later* on in the project, but writing them in advance provides no advantages. TDD may have its uses, even though I can't think of one. That doesn't mean it's *always* the right solution. 
Excuse me, I need to go write a hammertime() extension that animates the elements to move back and forth like the hammer dance.
OK so stop will be mainly for animation and will prevent the actions continuing after the user left the area. Thanks all :)
Some people have argued that it's "too hard" but [Rebecca Murphey's post on A Baseline for Front-End Developers](http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/) is fantastic if you want to learn to write JS as a professional. http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/
Incorrect-ish. My current and last job have been almost 100%. - Wrote game engines for a javascript game platform - My current job is working on Windows 8 javascript programming, I mostly deal with canvas graphics interaction programming all day
You are the 1%.
documentation - I can't see anything that explains what it does, why it does it, how it does it, or anything. At least an intro on the website or github please, perhaps even list similar projects so we know what this thing is about
Find another Javascript engineer. Kill and eat them. Make their face into a skinmask and wear it to their job. Don't forget to use their coffee mug or the other Javascript engineers won't let you in the nesting chamber. Once they're used to your scent you can take the skinmask off but hang on to the coffee cup at least for the first year. Thus has it always been. 
Learn CoffeeScript. Shit storm in 3...2...1...
Calling stop() will prevent animations building up unnecessarily. [Example](http://jsfiddle.net/mrchimp/Hxz98/3/) - try moving your mouse over and off each square quickly and repeatedly. The red will build up animations, the blue won't. I prefer zornroz's answer though.
 var d1 = new Date(0); var d2 = new Date(); console.log(d1) console.log(d1.getMonth()); console.log(d2) console.log(d2.getMonth());​ Output Date 11 Date 8
https://github.com/EightMedia/hammer.js/
Well, when I look around through technology job posts, I'm seeing openings for "javascript engineers" that pay quite handsomely. So, that's where I'm coming from with the phrasing of my post title.
This reminds me of the "fur trappers" episode of "Kids in the Hall".
WOW! Very interesting! But Why? ))) new Date(0) should give first moment of Unix epoch. 1 jan 1970. Why d1.getMonth() gives 11 ???? I can't understand... // test var d1 = new Date(0); var d2 = new Date(); console.log(d1); console.log(d1.getFullYear()); console.log(d1.getMonth()); console.log(d1.getDate()); console.log(d2); console.log(d2.getFullYear()); console.log(d2.getMonth()); console.log(d2.getDate()); // results Win =&gt; MozFF, Ubuntu =&gt; MozFF + Chrome Date {Thu Jan 01 1970 03:00:00 GMT+0300} 1970 0 1 Date {Fri Sep 21 2012 23:47:31 GMT+0400} 2012 8 21 I can't test it with Mac right now, but in office Calendar Script on MacPro Safari 6 and Chrome 21 works good. Your browsers behaviour is very interesting for me.
it's give 11 - december of 1969 ? 
Well, I'll tell you what I mean: a "javascript engineer" is someone who develops mostly on the client-facing side of some web project using primarily javascript, and gets paid about 80K or so a year.
Yeah.. Thanks for poking.. english isn't really my best language.. nor any vocal language for that matter.. the issue i am trying to solve is so that i can dynamically load widgets onto a website without forcing it to reload just to gather the required resources.. However the next issue was building something to verify all the resources were loaded before running the widget.. for instance i do a lot with customer management systems, (intranets) .. i'd like load sales tools on the site dynamically.. mainly without reloading the customer list, calendar, etc from a page refresh. Now i copy that widget over to a new canvas and load the new layout.. This is the layout i use for my MVC framework done in php called v4, it was only natural to use the same layout packet structure and forward it over..
No, `debugger` will tell the debugger to suspend, which `console.debug` is basically the same as `console.info`, `console.log`, `console.error` etc.
another path i took with this project was to have all static html loaded into a javascript variable and loading that into a var of a linked script file.. I could then quickly load the html data and mock it up using a very small amount of data retrieved thru an ajax call, dynamic data, option values to send to my javascript for mock up, even grab a new layout and refresh the entire page, coping previous widgets, in their current states, and dynamically loading resources for widgets that have not already been loaded.. no more transferring html over ajax more than once. or re-downloading repetitive content and resetting the state just to add a widget that wasn't loaded initially.. sort of like flash in a way.. 
That isn't "a `catch`"--you're passing a function (a "callback", or possibly an "errback", but a function nonetheless) to `PageMethods.Delete`, which then seems to call your provided function with `undefined` as its first argument. We couldn't tell you why; check the docs for `PageMethods.Delete`. It might be an error in the library you're using, or it might be the expected behaviour. What is a webmethod? What is web.config? Again, sounds like you should consult the documentation for whatever tool you're using. For what it's worth, it's actually possible to catch `undefined` in a proper `catch` block: try { var a throw a } catch (err) { console.log(err) // prints 'undefined' } ...but that wasn't what you meant to ask (even if that seems to be the question it the title).
Trying to objective, but why is this needed? I didn't realize there were so many lisp users out there. I haven't used the thing since college.
i have not, i know they do exist.. More or less I wanted to be original with my concept and theories.. At least with this first version, I agree require.js is a very much more documented and developed piece of code. Mine has a lot of the same functionality as require.js. I believe my ideas are going in a little bit different direction. However I will be reviewing require.js. Thanks
I looked at some C# recently; I was prepared to dislike it, but I actually found it very nice-looking.
&gt;Companies, unless their entire focus is on javascript which would be silly, don't normally hire someone entirely because of their javascript skills. It's possible but unlikely. Not true. Some companies actually recognize that producing complex web applications takes dedication and specialization. I'm a Javascript Engineer, and I focus only on the front-end. I've been doing this for the last 10 years for various companies. I know back-end code, databases, everything really, but I choose to focus on Javascript alone because the challenges we have can't be solved by jack-of-all-trades type programmers. Dealing with DOM and now SVG and other HTML5 technologies takes a lot of effort if you want everything to work cross-browser all the time. If the product depends on javascript running in 4 different browsers on 3 different platforms, you better not stick some inexperienced code monkey on it, who likely knows the nuances of PHP or java far better than javascript and DOM and all the shit that can happen inside web browsers. "jQuery experts" won't get you too far either, unless they are also Javascript and DOM experts first. 
I have never heard that title of "javascript engineer". Does that tell me you can't/won't do other programming languages? 
Use a minifier that combines the files into one so that you can keep them separate for development, but they're combined in production. This is better anyway since it reduces HTTP requests.
pnelop.com has 11 js requests. If the point is to dynamically pull only what you need, you should ensure you're pulling 1 or 2 batches at most (we get it down to the templates rolled up and after they render, then sometimes the widget service as a separate call).
You can either use `@import` or you can load style rules into a style tag using [insertRule/addRule](https://developer.mozilla.org/en-US/docs/DOM/CSSStyleSheet/insertRule), but this takes a considerable amount of parsing the loaded CSS file into selectors and rules.
Yes.. it's quite spanned out.. notice the _content.php/v1/....js it forwards to a source control module, which is part of my mvc framework. few lines of code in the framework and i can have all the js compiled, (minified), and (cached) on my server.. (optional features, depending on your debugging levels). it relies on the developer to compile the js libraries in some sort of logical fashion.. then output either as a fully static .js file hosted someplace, or as my _content.php/ does, compiles them dynamically based on developers logic..
[List of HTTP Status Codes](http://en.wikipedia.org/wiki/List_of_HTTP_status_codes) Yes, they do. 5xx is a server error, and 3xx is a redirect. Unfortunately, JavaScript does some very annoying stuff with ajax and redirects, so I don't know if you'll ever see xmlhttp.status == 3xx.
It's absurd that there's a limit on rules/css files to begin with, but...I don't want to visit any pages you have if there are that many http requests. Optimization needs to happen here.
I honestly can't tell if this is a joke or not.
&gt;Apparently you can have 31 @import in each stylesheet. You could do your dynamic loading by adding a &amp;amp;lt;style&amp;amp;gt; and inserting @imports in it, up to 31, beofre moving to the next one. This may be one approach, although the AMD loader is watching CSS file loads for completion and I suspect I will not be ale to capture that information with IE. So this may not pan out. &gt;Why can't you make a css concatenator on your server which takes N files and returnes them as a single concatenated one? Something like... That was actually my first idea and since I'm using nodejs on the back it should be fairly easy to do. Hoping to find a better way though. 
Unfortunately as I mentioned above, merging into one file is not an option for the way this system works at this time. 
See answer above.
The jQuery disease. Everything must be done in jQuery. I see people on SO asking how to change background colors using jQuery. People think you MUST use jQuery to do everything because they don't know the basics of javascript. You don't always need a library but these kids read on a forum somewhere, maybe reddit, that life does not exist outside jQuery or just about any other library you can mention. As Lawrence Olivier told Dustin Hoffman, "Just learn to code, dear boy!"
I wish it was that simple. Unfortunately it is a case where the dynamic nature of the application demands dynamic loading. Otherwise I would be all over one big ass CSS file. 
I am having serious difficulty figuring out how you've justified needing 30+ stylesheets as "a better way."
I see. Since you're using Node.JS server-side, surely writing a CSS concatenator would be trivial, even if you wanted to include a caching-scheme? I doubt you're going to find a solution easier to implement and maintain to be honest. You don't even have to [write one yourself](https://github.com/GoalSmashers/clean-css).
I believe what they mean by that is that they are looking for an engineer with experience in JavaScript project. The main reason it pays really well is because in most places there is a shortage on people with such profile. Shortage don't last forever tough, so don't take for granted that the situation will stay like this forever.
Your CSS architecture is completely and utterly broken. Well, the simplest workaround would be a server-sided "bundler" script/service. You tell it which files you want and it concats them dynamically. bundle.css?foo1+bar1+baz2 This would give you a file which contains foo.css version 1, bar.css version 1, and baz version 2. It's served with a far future expires header. The version numbers are included for cache busting purposes.
Indeed; technology seems to age faster than kittens.
&gt;Also, merging all the files into multiple groups of CSS is not an answer I can work with at this time. Why not?
Ugh, ASP.NET WebForms and UpdatePanels. Good luck :P. What's your server-side Delete WebMethod look like? You might be better off posting this to [/r/dotnet](/r/dotnet) instead.
For what it's worth, it's all ASP.NET WebForms stuff. PageMethods.Delete calls a "Delete" method on the server side. The framework handles doing the actual AJAX call.
got demo?
Yes, which is why we would never use jQuery or any other jAil.
We could argue about tems all day, javascript engineer or otherwise, what you are looking for is advice on how to get paid to write javascript all day (I don't blame you js is amazing) First you have to learn the basics closures, namespaces, and prototypal inheritence. Then i would work with KnockoutJS for a couple weeks to see their ideology and way to write webapps. Followed by a few weeks of BackboneJS to see a competing method. After which, you should know enough to not have to use either. Personally, i would also spend some time getting your functional programming chops up to snuff (I use underscoreJS in nearly all of my projects now a days) Lastly, you want to focus on your workflow. Right now, I have real time linting in Sublime 2 with a Grunt build process at the end. Granted, I'm always looking to improve.
&gt; But at any rate, data binding is a presentation feature, and defining it in your template is much better than defining it in your controller. Before you used angular, did you define onClick handlers and other callbacks in your templates/presentation layer? Defining callbacks and other javascript configuration in your templates is obtrusive and it is definitely not good practice ([unobtusive javascript](http://en.wikipedia.org/wiki/Unobtrusive_JavaScript)). In angular, even in the simple case where you want to fade in a new item when adding to a list/collection, you still need to configure a directive/callback in the template out to a view/controller so you can handle the fade. Of course, the more custom your app gets the more javascript callbacks you need to add to your templates. Angular, ember and any of the other frameworks that are starting to invade templates are best for simple apps that aren't going to deviate much from basic use cases. Anything custom turns into a shitshow with a lot of extra configuration in the presentation layer which is definitely not maintainable or fun to debug. Templates should be as clean as possible and should inform structure/content with html. JavaScript should be handled in JavaScript.
thank you for your message - I think, I know how to fix it. I need 1 or 2 days to update code. Now is weekend and I can't to fix it right now.
This is stupid, most languages can compile to javascript. Hell, I saw some C++ compiled as javascript before. I think the title should be "designed to be compiled to javascript"
Since jQuery is only javascript, what, pray tell, are you saying jQuery can do that javascript can't?
are you generating css-files on the fly? else i cant see anything that would require dynamic loading of css
Just keep in mind that for a long time JS suffered from the same issue as PHP of having a lot of bad and/or old code examples online. Try to find trusted resources like MDN, Dottoro, well-respected coders' blogs etc. Stuff relating to Node also has a better chance of being good...
People can definitely go overboard with tests. However TDD can help to give an extra push to make code more testable which makes it more modular. Can also fight against Yagni a bit since you're more focused on what exactly you need the code to do. When specs do change and you need to refactor the code, you can feel safer that you didn't somehow break other stuff. But yes you need to be careful of false confidence and spending too much time trying to get to the mythical 100% test coverage. I wouldn't say TDD is useless though..
The issue with "onClick" isn't that it "makes your template dirty." The issue is that it causes you to pollute the global namespace of your application. It makes your business logic dirty. AngularJS takes the opinion that declarative binding in templates is actually a good thing. But there are several limitations: the bindings are scoped, and the arguments to the expressions must be "AngularJS expressions," which are a subset of javascript expressions (for instance, you can't inline a function into your template). This eliminates the types of problems you run into with onclick. &gt; in the simple case where you want to fade in a new item when adding to a list/collection, you still need to configure a directive/callback in the template out to a view/controller so you can handle the fade That's actually not the idiomatic way to do it; the entire handling of the fade should be in the directive, and your directive should be data bound to some model exposed by the controller. If you use directives effectively, you will actually see that your application has surprisingly few "callbacks." Admittedly, directives are tricky to get the hang of. I'll gladly write up an example if it would help convince you. :) &gt; Templates should be as clean as possible and should inform structure/content with html. JavaScript should be handled in JavaScript. Your templates will always have a very high degree of coupling with some amount of JavaScript that interfaces with them. Always. If you want to shift this responsibility to some other part of your framework, you can, but trying to pry apart pieces that are tightly coupled by nature doesn't really buy you anything. I don't see how: &lt;p ng-bind="something"&gt;&lt;/p&gt; Is any worse than: &lt;p class="someClassThatYourFrameworkLooksFor"&gt;&lt;/p&gt; In fact, the second approach is much dirtier and less expressive in my opinion. With this type of strategy, you now have to update that class in your JavaScript and your templates wherever it appears. I'd urge you to try and further understand the design choices of different frameworks. It's really easy to dismiss something as "a bad idea" based on some dogma you read somewhere when in fact it's just a different (and entirely reasonable) way of thinking.
wow, totally missed it :/ thanks!
Why use any syntactic abstraction over javascript? You could ask the same question about the usefulness of something like Coffeescript.
most of all, it's uglier
I will check that project out. Thank you.
Thank you for the insight, although I have yet to run afoul of this yet and our dynamic loading works flawlessly... At least for the first 31 files.
This. The 2d canvas renderer is about as good as it can get, performance wise. It will allow for some simple games, 3d scenes. Webgl obviously is the way to go for browser 3d though. Tell IE to get lost ;)
Yea, ive embraced sass coffeescript in full and cant be happier, debugging is the same procedure as normal js.
Do you think your analogy is fair? I haven't heard anyone dying from trying CoffeeScript. 
IE has an interesting error when you try to write style-tags via innerHTML. If you do that: var d=document.createElement('div'); d.innerHTML='&lt;style type="text/css"&gt;...&lt;\/style&gt;'; document.body.appendChild(d.getElementsByTagName('style')[0]); the style tag will be ignored. But if you add a non-empty block element before the the style tag like this: var d=document.createElement('div'); d.innerHTML='&lt;div&gt;IE...&lt;/div&gt;&lt;style type="text/css"&gt;...&lt;\/style&gt;'; document.body.appendChild(d.getElementsByTagName('style')[0]); it suddenly works. Much faster and easier than insertRule for every definition.
You may probably want to become a Frontend Developer. No diploma, just practice. Lots of that. It's basically working as a horse whisperer, only for browsers, not for horses. Since your JS will have to interact with HTML and CSS, you'll have to know them as well, too. As compellingly easy as starting with a toolkit like jQuery is: don't do that, start with plain old vanilla JS. If you are able to write such a toolkit yourself, you're ready to use one. Find an interesting project (toying with canvas 2d/3d, games, whatever) and go for it. Communities like this one or github will provide help *for specific problems*.
To be fair, I have a dislike for SASS-style syntax. Maybe I need some thicker rimmed glasses to see the beauty of SASS? I can't deny people love it, but I'm not of the same opinion.
There are times where inlined styles make sense, such as building a game using divs/CSS instead of a canvas. For those occasions, this would make a better alternative than using inlined styles, as adding/removing classes is faster than adding/removing styles individually. There are also a lot of applications which are built almost entirely out of JS, such as a painting application. Again this would be useful there. It would also make it easier for you to offer setup options for your CSS, for when you use a library. I.e. being able to select if it should use absolute or relative locations for images in the CSS. That could be implemented as a setting in your JS API, which then updates the generated CSS accordingly.
Sweet. This is exactly the kind of insight I needed. Thank you!
"Waste of time" is probably the most empty statement ever conceived in the English language.
The thing dying isn't a person, it is your code, because you've coded it in coffeescript, only .00002% of front-end coders will even go near it (the ones dumb enough to drink the koolaid). That is fine for a personal project if you want to waste your time with it but to use coffeescript for a commercial codebase is akin to poisoning the well. And it is an especially poor recommendation to "try it once" in a thread about someone wanting to become a Javascript engineer. Coffeescript isn't even well documented considering all the coding amibuities it introduces. 
&gt;Can Compass be used to manipulate pixels on a canvas element? Compass outputs CSS and sprite sheets. Of course it doesn't do any Canvas related stuff.
You're welcome! The restrictions of rules/style and full style length still apply, obviously.
The only thing keeping me from using this in a heartbeat, is that I know someday I would have to turn my source over to someone else, who would say "WTF are these parentheses doing here?!?" Other than that, the idea in itself is brilliant. EDIT: Just read the macro page. Looks like there is no equivalent of `gensym`, so that is going to be a problem. Also, it would cool/useful to have a shortcut for writing anonymous functions, like the # in Clojure.
It was a mistake of mine trying to get some feedback selling it on a minor feature (CSS preprocessing). The reality is that it allows far more complex color manipulation and functionality than Compass from what I can see (admittedly I haven't used Compass). Overlooking form (syntax) for a moment, what functionality is Style.js deficient in compared to Compass? I'm not being arsey, just asking for clarification.
Eloquent JavaScript is a great free ebook with an interactive console. It's more consistent than codecademy, as there is only the one author. Also the author responds very quickly to questions. There is also a free e book for Drawing with JS on the HTML5 canvas. I forget what it's called but it shouldn't be hard to find. It starts at drawing a line and goes through advanced animations and games. I think it's a great next step if you are done with codecademy. ~~When I'm back at my computer I'll edit this with a link~~ [Here](http://joshondesign.com/p/books/canvasdeepdive/toc.html) it is. It's called HTML Canvas Deep Dive. Another one of my favorites is [here](http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/) a free online JS design patterns book.
That does sound like the simplest solution. If you want something slightly more complex then rather than putting version numbers in each parameter it's probably easier to have the concatenator script use a hash. E.g. you link to the CSS at /concat?files=foo.css+bar.css+baz.css then the script http redirects to /concat?files=foo.css+bar.css+baz.css&amp;**hash=12345678901...** If the hash doesn't match the concenated files then it redirects again but if it matches then it serves up the files.
I use partials, mixins, nesting, &amp; (parent reference), sprite sheet generation, and cache busting. It also allows you to put media queries inside your rules. Furthermore, there is a watch mode and a handy Firebug addon called FireSass. It's shipped with a pile of predefined CSS3 mixins and it also has a utility method which helps with the creation of new vendor prefix mixins. &gt;far more complex color manipulation I rarely use that feature. I usually work with a small palette of colors from the CI guide.
&gt;then the script http redirects Redirects are very slow. Also, they get in the way of caching. Avoid them if possible.
I don't work for codeschool and I can +1 this. I've been a subscriber for months and love it. And when you finish a course they give you $5 in your account... which is pretty cool. 
Well, just use SCSS syntax then. It's a superset of CSS.
&gt; if the user was on a single core device they wouldn't really help all that much right? The extra process might actually have a negative effect. No. It would still have a positive effect. Any computer built in the last few decades is a fundamentally multitasking device; a key feature of any CPU is to be able to efficiently handle multiple threads of processing at once. I saw a nice example of this when I was taking parallel computing and told to program a merge sort in C, then make it run in parallel. Despite the fact that we were only using dual-core devices, the programs drastically sped up as more threads were added (IIRC the sweet spot was around 16). What might have a negative effect is the overhead of creating the worker in the first place, which depends on the spec and implementation. But I can't imagine that will be a noticeable hit if you just create one, then keep it around for when you need it. And all that being said, everybody else is right. This is overkill. They won't see any performance hit unless they have thousands of entries on their todo list.
i actually use Stylus which I think is the most beautiful of all css preprocessors, but it chokes if you try to import certain types of CSS but by uglier, i meant in comparison with this module
Do you know what the DOM is? 
you're going to need to show some HTML or something for anyone to help you.
So completing 5 courses gives you a month of membership?
OK, three glaring points: 1. Having more than one thing on the page with the same id (id="div-new") is a really bad idea and will do really screwy things. 2. If you're going to use jQuery, then use jQuery. Don't mess around with mixing up $ and getElementById in the same code. Pick one and stick with it. 3. (And this is your real problem that you're asking about.) You're trying to get a specific element returned by your selector and stored in blast. blast[i] will get the element at that index, but if it's quoted like you have it ("#blast[i].id"), jQuery's going to be trying to find an element with id="blast[i].id", which isn't what you want. What you'd actually want to do to do it like that is something like $( "#" + blast[i].id ). That all said, if you really want to clean this up: * Use a class, not an id for the new divs (and please, use a better name than "div-new") * Use jQuery directly against your selector's match. You don't actually need to iterate over them if you're just going to do the same thing to each of them. You could just do something like: var $newDivs = $(".div-new"); $newDivs.style("20px solid black").before("&lt;p&gt;binga&lt;/p&gt;");
http://learn.appendto.com/
Formatting on reddit sucks. Here's a pasted version without some of the horrible formatting: http://pastie.org/4789180 I have to be honest, i've written a lot here. I'm hoping you'll take this in the way it was meant—a helpful experience. I'm going to assume that you're going to use an ecmascript 5 shim like this one: https://github.com/kriskowal/es5-shim so that we can have some of the newer methods for arrays and objects. You're binding the events onto the html elements themselves. It's typically regarded as bad practice to do that, i'd recommend looking up event listeners. https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener You're using specific classes in several places in the code, but re-typing them each time. For example "type-default" is in two places. If you changed one of them, would you remember to change the other one? You're doing a lot of string manipulation with splitting and joining. I think a lot of that can go if you use my suggestion below. It adds a lot of complexity to the code and makes it quite difficult to follow along. The answer function is very difficult to follow. Try splitting it up into several smaller methods that can have descriptive names. For example, imagine if lines 45-58 was written: if (checkTypes()) { // checkTypes is a bit of a bad name, what are we checking about them? styleAsCorrectAnswer(); }else{ styleAsWrongAnswer(); } It'd be a lot smaller, and a lot easier to understand. Also, a lot of these style things you're doing could be done using CSS in a stylesheet by adding/removing classes rather than doing it manually on the elements themselves. 1. I guess an array works, but why wouldn't you use an Object like {"bulbasaur": [5,8],…,"Happiney": [1]} ? You can access the keys with Object.keys. Then you wouldn't have to do string manipulation everywhere. 17. Each time in this loop, the engine is looking up elements with class "type-clicked" throughout the whole document. Also, you're then looking them all up again and then indexing into it. I'd suggest: var clickedElements = document.getElementsByClassName('type-click'); for(var x = 0, len = clickedElements.length; x &lt; len; x += 1){ clickedElements[x].className = 'type-default'; } 20-26. All of these elements are looked up every time this button is clicked. 32. If 648 is the number of pokemon in the list, why don't you just do pokemonList.length? 35. Some people might complain that you're doing this manually with string interpolation. I'm personally not bothered. Though, one thing, if you're going to use the id poke, can you make it a variable so that it stands out. I presume it's for styling otherwise it's not used anywhere else. 38. This method is too long. I have no idea what's going on with all of these nested ifs. Break some of it into methods so that they can be named. You're looking up elements each time again though. Don't do that. 81. This method becomes a lot easier if you use my suggestion for line 1. It could be: var typeNames = function(sTypes) { // what is sTypes? return sTypes.map(function(type){ switch (type) { case 1: return 'normal'; case 2: return 'fire'; case 3: return 'water'; …… case 17: return 'steel'; } }); }; 98. why does fighting have a #? 124. Same as the method on 77. This should be an array map with a switch. 167. You're looking up this element every time this method is called. Also line 165 returns a boolean, why are you then returning a boolean? I'd suggest: var checkName = function(){ var nameNotEmpty = name !== ''; var nameEqual = name.toLowerCase() === pokemon.name.toLowerCase(); return nameNotEmpty &amp;&amp; nameEqual; } 191. This line is confusing. 196. What happened to this line? 200. This method is too long again, will all kinds of loops and ifs. Try breaking it up. 216. Why are you trying and catching? What exception are you expecting? 
Treehouse is a trainwreck. The quizes ask the same questions in a loop so if you get one wrong you just need to remember the answer the second time, but the videos are really hard to watch for the reasons you mentioned *and* that I have a hard time trying to learn from someone that can't properly organize a course or explain *why* I'm doing something instead of just telling me to do it. The little frog character thing after each lesson just doesn't work in the way CodeSchool's humor does. I skip those videos every time and I don't know why they think their audience is a Sesame Street demographic and not people actually wanting to learn and not sit through that crap. Something to remember is it was created by Ryan Carson, who is kind of known as a douche in the design world and probably has little to no experience with actual development to know how shoddy and ill-informed those videos are.
Thanks for the response. I was really excited when I signed up with treehouse initially because they had such a diverse set of tutorials, but yeah basically everything you mentioned hit the nail on the head as to why I didn't like it. I will definitely give CodeSchool a look and try some of their free lessons before I buy. So far I think that interactive tutorials have a lot of potential, but I haven't really seen a successful delivery yet. Granted I haven't tried them all either. Will report back about CodeSchool.
Yeah, +1 for the codeschool love. Whilst maybe a bit more pricey, I enjoy the Peepcode screencasts too -- https://peepcode.com/
You can't access variables from strings like that in jQuery (anyway, how should the Sizzle selector engine know that blast is not the id, but a variable where the ID is stored?). If you want to reference a dynamic id, you have to build your selector like this: $('#'+nodeid) In that case, you want to reference a node that is already selected, so your logic fails somewhere in the code.
&gt; Is anyone here on Reddit using this? Of course I'm using it. Without swank-js, slime and js3-mode, Javascript programming would be unbearably painful. It's a pity it doesn't work with autodoc-mode.
WTF, am I wrong? ClojureScript is a compiler of Clojure, not a language.
&gt;if Brendan Eich goes ahead and makes JavaScript look like CoffeeScript Source?
This I would agree with for many people but we know the DOM inside and out so interacting with it is no issue with us.
Thank to both of you, this was my first real dive into making something out of JS and CSS. I'll work on fixing a lot of the stuff you mentioned to clean up the code and have less calls. Thanks!
[His presentation](http://brendaneich.com/tag/javascript-ecmascript-harmony-coffeescript/)
+1 for Angular.
actually it's a subset of clojure so can be thought of as it's own language
How can any project that is based in web design have an animated gif on their page?
Glad you're loving the courses! If there's a subject you think we should teach, feel free to ad it to the "Request a Course" page ( link at the bottom: http://www.codeschool.com/courses ). Having amazing new popular courses in the pipeline is one way we encourage people to stick around. :)
Partials do look nice, Style.js supports all that functionality except sprite sheet generation etc. (is cache busting really considered a feature?) which is outside the scope of this library.
It's a general purpose style / color manipulation library. CSS preprocessing is a add-on because it filled a requirement for my own personal projects. Canvas.js is technically a different project but it's extremely powerful for pixel manipulation, few JavaScript libraries out there provide the color space support of Style.js...
Except it's not an animated gif.
i don't now why this is happening, i can't edit it, i'am gonna try submiting again
It is an issue if you have to support older IE's...as in &lt;IE9. I don't know about you, but despite the fact I know how to do the operations in the different versions, it is simply easier to let jQuery do what it is well tested at doing. Now once &lt;IE9 is gone, the usage of jQuery will significantly matter less...but right now, that is not possible. Also, there are features that jQuery provides, specifically with selectors/etc and grabbing adjacent/child/parent nodes which is more of a hassle if doing it by hand.
Whats that site that pokes fun at all of these new technologies? With HTML 6, CSS 3000, etc etc
Not a gif. CSS animation.
I lol'd :)
...which is SO much different. Animated _anything_ on the page makes it shit.
Very unique/clever approach. Is it possible to go all the way responsive with this? Like, down to mobile?
Use an AudioBufferSourceNode (ie, ctx.createBufferSource()) and don't use and &lt;audio&gt; tag. I've had no problems doing just this thing.
http://html9responsiveboilerstrapjs.com/
Just FYI... After trying this out you can still only have 31 different css elements in your page, whether links or style elements. I ended up just loading the stylesheet content via xhr and sticking it all into one stylesheet. If the stylesheet ever exceeded 4000 selectors, I create a new one. Works like a charm.
Hi. I'm the author. Nib has a large set of mixins that do all sorts of things but most are actually not transparent. Fluidity uses only official CSS3 syntax throughout. Nib also doesn't provide for every CSS3 property. Fluidity also provides a grid system for layouts. Nib does not. Fluidity supports linear and radial gradients. Nib only has linear. I'm sure there are more differences but basically I just wanted make the framework I wanted to use. I think nib is great and I took a lot of inspiration from nib in seeing what could be done with stylus.
Yes, I've considered it. The problem is that I've built the whole app around the a regular audio tag, and it will take some time to convert it. It's probably faster than figuring this mess out though, unless it turns out I've made some trivial mistake. I'll keep it in mind. Thanks!
Also you could use nib along side of fluidity if you wanted too.
Sure, I agree on that. But I still think from a technical standpoint this is much more interesting than an animated gif. ;)
wow. ok then. You must have the attention span of a cat on meth.
Thank you very much for gold ;-) I hope I can help you again in the future. I have used this technique to create rather complex cross-browser CSS animations with javascript (by using a stepper classname). 
Try '&amp;amp;gt;' instead. Obviously, this will not work in IE6 because it lacks direct child selector support. Update: If that doesn't work, maybe '\3E' will work because of an error in the CSS parser of IE (will not work in other browsers).
Could this possibly lead to a shim for CSS3 filters currently only supported by webkit? . . . cuz... that would be cool. 
Are you planning on contributing your CSS3 mixin work back to nib?
Cache busting is a very important feature. This way you can use far future expires headers for your CSS images and if they actually do change, the timestamp (or hash) will be different, too. I use MD5 hashes (base64 URL flavor without the "==" at the end), for example. Without a preprocessor, there isn't a good way for doing that. There is only the option to put some version number in the path of the CSS file (e.g. /static/v5/style.css) and then relative paths for your CSS images (e.g. ../images/foo.png -&gt; /static/v5/images/foo.png). However, this will always invalidate everything, which is a bit of a waste. I use far future expires headers + cache busting for all static resources.
No don't try to use regex for that. You can test syntax in the console. Try hitting control shit J.
I know there is a simpler operator like =+ or something? 
What about [background-size](http://www.css3.info/preview/background-size/)?
there's a sub-header in the post about how there is room for optimization
Thanks so much for the response, glad to see this is the general direction! It's hard figuring out how to engulf someone in something new (and particularly something as daunting as development can be), so as a company I totally understand why it was smarter to invest in those who have an already-proven passion for it.
If I remember correctly, bilinear interpolation is not applied on images scaled with background-size. 
Implementing in WebGL is not so much optimizing as it is just calling the built-in interpolation functionality.
+=
I still haven't tried CodeSchool yet, but one issue I've noticed with some interactive tutorial platforms is lack of exercises. It would be nice if there were like supplementary areas filled with exercises and project ideas that can be accomplished with the stuff that has been covered so far. I know there are tons of resources on the net for that, but there are also tons of resources for learning. The reason someone might want to pay for an educational platform is because a lot of these resources are consolidated in an accessible platform. I think that whoever does that first successfully is going to come out ahead on interactive tutorials. I also think coding practical applications and learning libraries is a turning point in any programmers career. I have personally been struggling with making that leap, but then I recently got a job as a junior programmer with a small company who wanted to teach me how to make that jump (I know it sounds unreal, I was just as surprised when I got hired). Another flaw I've noticed with codecademy is that lack of continuity and conventions in their lessons. Having a bunch of different authors can make things confusing when you're going from one section to another. Also, I don't know if it's just me, but the JQuery section on codecademy is horrible. It usually takes me a couple times to get comfortable with a new concept, but for some reason the explanations for the beginning JQuery stuff do not make a lot of sense. It seems like it is mostly because of poor word choice on the author's behalf. I looked in the Q&amp;A sections on the JQuery lessons and a lot of people seem to be equally confused about what is going on. Anyways, thanks for contributing to online coding education. The pedagogy overall (again can't speak for CodeSchool yet since I haven't tried it) still needs a bit of work, but I think they all have a lot of potential. 
well, for one, it's `document.write(...)`. Capitalization matters.
im facepalming so hard, ty for reading/answering 
Just out of curiosity which browser were you using? I can't replicate the error you were getting. I just get "document has no method 'Write'".
i get this error when i put my html in the w3 validator (http://validator.w3.org) while running this on chrome i get no error message 
You're getting the &lt;p&gt; error because prompt() is a synchronous call - meaning, the document parsing is interrupted while it runs all of your num1-4 prompts. Where is it paused? here: &lt;script&gt; ... document.write(...) The &lt;/script&gt; hasn't been written yet when you call document.write(), so you're ending up with: &lt;script&gt;... &lt;p&gt;...&lt;/p&gt; ...&lt;/script&gt; Which is invalid (p inside of script). A better alternative would be to put your &lt;p&gt; tag somewhere in the document like &lt;p id='premedio'&gt;&lt;/p&gt; and then in your script say document.getElementById('premedio').innerHTML = 'your answer'; cheers, and keep going!
Which tools do you know? There are quite a lot of them. [Apache JMeter](http://jmeter.apache.org/) would be one that's independent of your development environment.
That was my first instinct too, but the validator error actually comes from the document being treated as strict XHTML (if using `document.write` from a `script` element did this, where could you safely use it?) and can be fixed by making the script a CDATA section. But, anything that recommends better options than `document.write` is cool in my book!
Thank you for the answer and example.
"Java is to JavaScript as car is to carpet" Totally unrelated languages. JavaScript came later, and named itself "Java&lt;anything&gt;" to be more familiar to Java programmers.
...web sites that do speed tests, browser based file recorders (YUI Speed Test, Google Speed Tracker)... Anything else would be new.