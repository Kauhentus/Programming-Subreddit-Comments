Is it common to ask language-specific questions in job interviews? I'm not a seasoned vet by any means but I've gone through a few companies myself and have never had a language-specific question. It's always algorithms and system design.
Would be nice if it told you what you got wrong in the first section, or had some sort of review at the end. I did the first section over about 2 hours while working and just skipped the second section cause I wanted to see how I did. Got 27/40 but without knowing what I got right or wrong how can I improve? Cool test still, always nice to do these sorts of things if only to be exposed to concepts.
[removed]
Yes, I know I was harsh. I won't deny that. I also mentioned that for the purposes of _fun_ is may be an acceptable _test_. But I still think the way in which the test is presented makes it much more _unfair_ than my criticism against it. It's not about being "standardized", it's about the test being actually _good_. The _test_ is presented with -leaving aside the crude design- a _claim_ of fitness. Not just a "hey, try this; you may learn stuff; it may help", but a hard claim that the test is actually relevant and authoritative. That _is_ a problem. There are far too many sources of "bad knowledge" in the JS ecosystem to think it is not. P.S. As for your last insinuation, I didn't actually bother to submit the test.
So i just enter the code in the console? Or do I have to do launchRocket(321) ? It doesnt work either way i do it
The semi-colon is for the assignment to the variable `handleClick`.
Here's two must read articles: https://bost.ocks.org/mike/selection/ https://bost.ocks.org/mike/selection/ Not a book - but I think the best way to learn is to dive in and start tinkering with examples! Personally I don't think a book on D3 makes sense (it's really just a series of utility functions for the most part, with the main novelty being the selection/joins to bind data to documents) JS Basics: https://github.com/getify/You-Dont-Know-JS
The comment above this is meant to be my reply
Yes, in my experience it's very common to expect the candidate to know JavaScript. Maybe if you're familiar with Python or Ruby you can transition easier but if you're coming from OO Java and do your test in Java you may have other candidates chosen over you.
Actually, I totally missed the "Frontend Job Interview" portion of the title. Of course you'd want to test JS specifically in that case! Pointless question from me.
The original name was LiveScript. JavaScript came next as a marketing ploy by Sun Systems. The name JavaScript is now a trademark of Oracle. EcmaScript came last. Microsoft reverse engineered the language and named their variant JScript to avoid trademark violation. Netscape then ran to ECMA later in the year to turn the language into a standard in fear they were about to completely lose control of it. ECMA chose to adopt the language, but Netscape didn't realize Microsoft had joined ECMA shortly before for unrelated reasons.
updated
Yes that’s it. Class fields aren’t standard (stage 4) yet and it seems that Prettier doesn’t recognize them.
Yeah I agree that the whole idea is pretty shakey. I was only pointing out that on this graph in particular vue is still 3rd place so even the data *in this dataset* doesn't support any conclusion about vue gaining in popularity. I've never looked at the git or cdn numbers but I'm not sure they would mean much either anyway.
Dude, I'm not gonna spoon-feed you the answer, i've basically told you what to do. If console will operate your command, and your command is launchRocket(321), it will work. Make sure you've followed ALL the instructions.
I'm sure something like this has been suggested before, but what about the default path just being whatever the base Url is, and introducing a 'modulebase' element to override the path for module resolution only. That way we can set it to '/node_modules', or possibly even something like 'modules.company.com' so that you can have a central distribution for modules across your different sites, or hook into a 3rd party distribution.
[Swing](http://webswing.org/#!/home) :D 
Awesome, thanks! Really appreciated.
Damn that dude better Check himself cause he just WRECKED himself. Love the last line lol
Oh, I see. I didn't realize this was a variable, I thought it was another way of doing a method. I usually see people not putting a semicolon there, but I guess they might just do that to make it look consistent?
Jeebus, I could only get through half a dozen of the quotes, because the gifs were drilling holes in my eyes.
ECMA wasn't the first choice of venue, as far as I'm aware; the W3C was (but the W3C elected not to work on it, for the same reason why they weren't (at that point) working on image formats: they wanted HTML to be neutral as to what was embedded in it).
Does anyone have a general idea of when the official version of webpack 4 will be released? I just started converting my work’s browserify set up to webpack recently, and would love to be using some of these new features if I can. 
Gosh, this thing is *long*. Also, got silver and 89th percentile after giving up halfway through the 2nd part because of the inconvenience of writing code on a smartphone ... so the scoring is seriously off (as of now, I guess that should change with more takers). 
section 2 crashes in chrome 58.0
I posted this in /r/poker a week ago. It was something I built on the weekend, maybe someone here will find the code useful/interesting.
Please try rephrasing this as a proper question (see: [faq](https://www.reddit.com/r/javascript/wiki/faq)). My suggestions: 1. Avoid flamboyant titles with all-capital text and unnecessary punctuation. 2. Try something first, post the code as a part of your question. 3. Be polite, people are willing to help here on their free time; they aren't required to. 4. Try to do the research before asking a question here (two links you may find interesting: [weather api](https://openweathermap.org/api), [app studio ajax](https://wiki.nsbasic.com/Ajax_made_Simple)).
Hi there! I have a few questions for you: 1. Could you give us some example data? It doesn't have to be live data, just a sample/fake response from the api you are hitting. 2. How are you planning on inserting things into the DOM? Are you using a library/framework or planning on doing it manually? 3. To clarify, you are trying to... a. Retrieve data from an API b. Get the three latest stories from that data c. Replace the last three stories on the page with these ones? 1. ^ Are you trying to replace content on the page with the new items or add the items in addition to what was already there?
I made a quick update, can you check if it fixes it? You're on Linux, right? That seems to be the only browser + OS with the problem, but unfortunately I can't test on it.
&gt; writing code on a smartphone ಠ_ಠ jesus man, lol
Since it's an assignment it *should* have a semi shouldn't it?
I noticed this library is using promises (+ async/await) to enable the async behavior. Being curious as to how this method stacked up (pun intended) against just using `setTimeout(f, 0)` I created an (**very**) unscientific test: https://codepen.io/short/pen/a5d36f2cf2918d54414482044fdd8416. As far as I can tell, the `setTimeout(f, 0)` method seems to consistently eek out anywhere from 2 to 4 milliseconds. I'm not sure what causes the difference as I haven't really dove deep into it, but my hunch is either the extra function call(s) for the promise layer or the browser's handling of microtasks. All this being said, I've only tried the two in Firefox.
I'm not sure where the standard lands on this, but I would argue both with and without semicolon should be valid syntax.
Perhaps the most important question doesn't seem to be answered in the `README.md` or the (currently non-existent) wiki: What are the benefits of using this tool over something like `yeoman`? I'd guess it's supposed to be lighter weight considering the package only weighs in at 9.3K?
I like JavaScript and use it every day, but the comparison to C# is a little inaccurate. C# has first class functions in the form of the Func generic type. It also has namespaces you can use to organize your "modules" (admittedly all classes), not everything has to be global. The example you have would be nearly identical in C#, save for the new keyword to create the anonymous object and '=' instead of ':'. And if anonymous objects are too restrictive, you can always fall back to the Dynamic Language Runtime and associated features like expandos and the dynamic keyword. There is still active debate over whether structural typing (Typescript) is better than nominal typing (C#, Java). In the case of JavaScript in particular, you miss out on the benefit of rich type info afforded by the reflection-friendly systems of C#/Java. Granted, JavaScript has and continues to gain nice features, especially with respect to destructuring, object extension, etc., and is more or less at parity with C# for concurrency primitives. It also has a massive ecosystem of packages to leverage, and enough mindshare to make it easy to hire for and collaborate with others on. But C# compiled to wasm (assuming this is even possible) with decent bindings to the DOM APIs would really make me think twice about what language to use. 
To be fair the JavaScript community has a problem of chasing the next shiny thing and dropping everything for it. Did anybody honest to God *not* say to themselves "wtf Angular *FIVE*?!" a couple weeks ago? Or "wait gulp isn't cool any more?" I just ignore it though and it's fine.
&gt; The GIFs add nothing except page weight. Not true. They also add distraction.
Hey, it outlasted Flash.
Thanks for posting. I'm actually doing something similar, but a different game and tech.
I'm jealous. I got Netscape 2 on a floppy disk from a friend, and had to make do with making "web pages" on my own computer until the first decent ISP came to town. I'd learned HTML in an after-school class where we didn't even have a Web connection or a browser. We just learned what we were supposed to do, put it on a disk, and the one person there with a connection would show us what it was going to look like.
Well I was replying to a comment stating &gt; what makes it preferable to any other language? I can't think of one single thing it does better. C# isn't a bad language, and granted I haven't used it in a while so I'm probably overlooking some modern features. But I don't see C# compiled to WASM (even with GC &amp; DOM interop) as a compelling choice over Typescript (which is more or less a super-linter for JS.) Compared purely in terms of language they have their plusses and munuses and it may be a wash, but add the friction of using C# with the rest of the ecosystem and I don't see it gaining much momentum. It's just not *that* much better for building GUI software, if at all. I think to unseat JS you'd really need an ideal language that offers big productivity gains. Or perhaps some DSLs that excel at GUI in some way. Maybe languages like Reason or F#, but I'm not familiar enough with those to say.
Thanks for sharing! Starred on GH and will be recommending to a few friends. 👍
Just use REST. You don't need to learn, download, install, configure anything. It's already on your server.
They shouldn't be required, but this was a question regarding prettier's semicolon insertion.
Upvote for the office space reference 
Unless they start making WASM compilers for more practical languages, it would still be a pain in the ass to do web development with the current WASM target languages. C, C++ and Rust are all fine languages. Where raw performance matters, they are king. But they're clunky at best (and horrific at worst) for, well, *scripting*. It's why Python is a thing for many console applications. And it's why JS is a thing for the (front end) web. 
This is kinda solved in ES6 where you use let instead of var to declare a variable. Variables declared inside of squigly braces only exist in the scope of the squigly braces that the variable is defined in and aren't hoisted to the top of the function declaration. So function b() { var a=1; console.log(a); if (a==1) { var a=2; console.log(a); } console.log(a); } Would print 1 2 1
At that point I just gave up...
Most of the questions are mind maze. I would take this test more seriously if the questions were not all about knowing typeof and unreadable codes that do overcomplicated work. 
There is a lot more being created every day in the JS community. That's why you read about new things so often. If the c++ community was so huge and full of inventors constantly coming up with new ideas then we would make fun of c++ devs for always going after the next shiny thing.
DHTML is the next big thing!
1995: "Microsoft IE hates Javascript" 2017 "Microsoft IE hates javascript" 
Yikes 
Of course. There's nothing inherent in js or any other language that would make people act that way besides it being popular. Nevertheless that's js right now.
Instead of Hacker Rank, I would go with CodeWars for JavaScript ( they have some 5000+ problems for JS) And their popular problems are pretty good ones.
As usual, they could be omitted in most cases, but they aren't optional. Computed properties use square brackets, which could create ambiguities if semicolons are missing. 
All it says in console when i do launchRocket(321) is 'undefined'
You changed the hex?
That was great fun, got [a decent score](https://imgur.com/a/Y8l7S) I think :) It would have been much better if it gave you some kind of feedback over and above the arbitrary "score" you get near the end. Also, read the instructions! I didn't realise there was a timer until way too late in the game, and wasn't really hurrying (my own damn fault) so had to really rush through some of the later answers. I'd love to know what I got wrong... most of the multiple choice seemed pretty common "trick" questions that I thought I'd breezed through, but I only got 29/40!
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/6B7UtxT.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Can you elaborate on this?
It's a very trivial error, but because nobody answered your question, I feel compelled to provide an answer. You should use "There're" instead of "There's" because the word "typos" is the subject of the sentence. The linking verb in your sentence could be replaced by the word "exist(s)" without significantly changing the meaning of the sentence: "There exist typos in the article." However, the phrasing is awkward because the word "there" implies a particular location but that location is never revealed. Does it refer to a particular location within the article? Does it refer to the article itself? The ambiguity/redundancy should be removed and the subject should precede the verb as follows: "Typos are in the article."
Series of books by Kyle Simpson. You can get it in book form OR read it for free at Github: https://github.com/getify/You-Dont-Know-JS
Yup but mine is different since everyone gets different codes. 
You always need to learn. GraphQL has a steep learning curve but once you get the hang of it you will see the benefits. I use it in my current project and in no world would I ever go back to REST in a reasonably large project. It is just too tedious for my taste, especially in highly relational environments.
Thanks for this bro
You are absolutely right. Emphesizing on how Babel works was not my point here. I just wanted to make sure that people are aware of upcomong gap between transpiled code and actual es2015+ features. Other points I made about performances on Front-End actually can be applied to any project.
Canvas is not SVG - I agree that SVG can be accessible. Relying on the user to use OCD definitely is not accessible.
I encourage you to give GraphQL a fair try. Its very useful in many scenarios.
"#webpack 4 release will be somewhere around February - March 2018. Release Candidate will be at least 1 months before release. With the RC we will announce the final release date." https://twitter.com/wsokra/status/937937284808265728 
With the same amount of type safety (which means absolutely none): var test = new Dictionary&lt;string, object&gt;{ {"a", 1}, {"b", "xyz"}, {"c", (Func&lt;int, int&gt;)((int x) =&gt; x * 2)}, {"d", new Object()} }; You don't have productivity issues. You have tools behind you that point out that you're doing moronic things. Meanwhile, you lose all the time you're supposed to be saving by writing thousands of tests that a single type checker would do for you. But hey, go ahead, if vomiting code is your thing.
nice Knotix .. will be looking at the BVH code in detail. btw, you may appreciate my [SAT in PGA example on github](https://enkimute.github.io/ganja.js/examples/coffeeshop.html#pga2d_separating_axis) (an implementation of SAT in Projective Geometric Algebra - a coordinate-free mathematical framework that reduces code footprint for geometric applications considerably - reducing the SAT code to about 10 lines.) 
My books are free to read online. “Exploring ES6” requires that you know ECMAScript 5 (which is explained in my first book): http://exploringjs.com
https://polymer-slack.herokuapp.com/ http://www.angularbuddies.com/
In my country it is flooded with recruiters. Have you tried some other sites? Like glassdoor or monsterboard or linkedin maybe? Try to ask some people in your city/area.
We use GrahpQL at work and its wonderful on the server, but the client implementations are god fucking awfully inflexible, i cant convey to you how much i've been fighting caching policies. Not to mention having to rewrite queries to mutations for sole purpose of being able to call them more than once and after component mount.
Really specific do-this-in-this-language questions help weed out the people who can’t code, but have cruised by on charisma and making the most of group “collaboration”. So it’s more common for entry / graduate type positions I guess...
Well, you'll need to learn JavaScript of course. To answer the question in the subject - and I've been doing this for over twenty years - don't feel like you have to know it all. In the world of JavaScript, something new and shiny comes out every few months. A lot of "hipster developers" in the JavaScript world make the mistake of trying to learn (and worse, integrate into their work) every new toy that comes along. Don't. They end making things way over-complicated, messy and hugely reliant on a mish-mash of third party libraries and tools. If you want to use third party libraries, pick the right tool for the job, not the tool you "really want to try because it's trending" and learn to use it well. Before you do any of that though, you'll need to actually learn JavaScript. This is a step that it seems most professional JavaScript developers never bothered with. Instead they learned Java or C++ and tried to make JavaScript work like that, and got frustrated and annoyed and never actually learned how it works, which prototypical delegation is not "inheritance", and why a loosely-typed, dynamic language has advantages over a strongly typed, static language (in other words, why we don't need to pretend JavaScript is Java, and why we shouldn't try). Kyle Simpson's books, "You Don't Know JS", which are available for free on GitHub and they're excellent. Get into them.
Thanks. "You Don't Know JS" very very good resources for intermadiate level
definitely "You Don't Know JS" but its for intermadiate, advance skill level.
Next year VUE will 2.
not new. https://xhr.spec.whatwg.org/#synchronous-flag https://stackoverflow.com/questions/24639335/javascript-console-log-causes-error-synchronous-xmlhttprequest-on-the-main-thr 3. ansver 
It is can not compared to Yeoman or other *-cli scaffolding tools, just a quick and simple script. BTW, I have not used Yeoman since I switched to webpack from gulp and Node scripts. Not know its current status, I will try it another day. 
am i allowed to use the browser devtools console?
Unfortunately, it never really took off outside of eBay itself so I doubt you'll find many resources on it. The official docs are probably your best bet.
https://discord.gg/wdg 
never mind you can just use null
So is REST. But you don't need to install a server, a client, learn a new language or anything else to make it work. It's also open source, non-proprietary, and a standard.
you don't need to install a server, a client, learn a new language or With REST, you don't need to install a server, a client, learn a new language or anything else to make it work. It's also open source, non-proprietary, and a standard. It was written for everybody's needs, not just Facebook's needs. 
The book came out in 2008. Less than a year later ES5 was released ***10 years*** after the previous version. If you were trying to learn JS, you'd wind up having to read more current books anyway to catch up with ES6/7/node etc... so you may as well start with the new stuff.
assymetric encryption (webcrypto, ecdh-dh, aes-key negotiation, webcrypto polyfill for node, see node-webcrypto-ossl), isomorphic storage (js-data, custom adapters), abstracted transports and connectors(webrtc, websocketj), graph-based message routing (graphlib) and a nice view lib with state management like Vue &amp; Vue-stash :)
Hi Kevin, I am Shopify expert. I'd be happy to help you. I will appreciate if you provide a little more detailed requirements or some examples. 
In all things, you're either getting better or you're getting worse. "Stick with what you got cuz the new thing is hard" is directly getting worse. 
it's missing a `return false` statement at the end of your function, or in the onclick attribute. Without this return statement, the form will just submit &amp; reload itself as it would on normal submission.
This is great. There are some good practices here that are not apparent when I was just starting out.
I dont know what you mean. Where do I return false or true?
&gt;Got 27/40 but without knowing what I got right or wrong how can I improve? I will be adding the answers to the end result page for the multiple choice shortly. I'll also add the % of people who got it correct. I'm not sure about Section 2 yet... Ty for the feedback.
For section 1 no, section 2 yes. 
I'm looking for a job. Not impressed with Indeed. The same jobs repeated over and over. Most send you to another site which is usually either another job board or an agency thus requiring another sign up to actually apply.
I've added a note at the top to highlight that it was designed for fun, and shouldn't be taken completely seriously. I agree that the "Purpose" section is too authoritative and will be edited. I'll be adding the answers to section 1 shortly, followed by some example answers to section 2 later on so people can verify them. Section 2 is run through a battery of tests yes. The homepage mentions there are no "trick" questions like that (e.g. like Leetcode), basically you do what it says on the tin
just change : onclick="return send();" with: onclick="send(); return false;"
Great... We're you part of indeed prime?
Dice and Indeed are useless for the most part, and frankly as a hiring manager try to avoid getting the types of resumes that come from people trawling sites like them. Lots of froth and crap to cut through. Get a recruiter and/or use more targeted and relevant places for hiring. When a job site wants to be all of the things to everyone, nobody wins. 
This is actually my main concern regarding Apollo. Meteor was a piece of "art" which should have died in the beginning: over-complicating things, heavy, bloatware grrrr. And all of these to keep the users within the Meteor ecosystem. I am afraid they will do the same with Apollo and for production projects it will be too late to migrate to Relay.
Your mistake in logic is that something new or different must be better. It's not.
The trickier questions are purposely like that, not because it's actually good code, but to test the extext of the examinee's knowledge. Answering them requires deep/intuitive understanding of the way JS works, which is why they're there.
Great, but maybe I missed it where any of it is 3D or precludes self intersection?
&gt; Maybe moving this to /r/typescript would be more appropriate. There are many languages that can compile to javascript and many have their own subs.
Does it work without the emoji?
Hah. My first job was creating DHTML UIs. 
Hey, magaka. There is a pretty detailed tutorial on how to make a color picker in the Marko docs. Check it out here: https://markojs.com/docs/color-picker/ That should be enough to get you started and have basic familiarity. There are also quite a few sample apps available on the marko-js-samples org on GitHub: https://github.com/marko-js-samples/
In your example `handleClick` is a class field (instance property) while `render()` is a method (in the prototype). It's roughly equivalent to doing function App { Component.call(this); this.handleClick = () =&gt; { console.log('clicked!'); } } App.prototype = Object.create(Component.prototype); App.prototype.constructor = App; App.prototype.render = function() { return ( &lt;div&gt; &lt;h1&gt;App&lt;/h1&gt; &lt;/div&gt; ); }
Do you have any ideas specifically for UI development in NY? Maybe a reputable recruiter? Or how I would go about finding out how to separate the BS from the serious ones?
Just for the record, Marko still has a decent following. Several other major companies are using Marko and many smaller companies. The gitter chat room is quite active too: https://gitter.im/marko-js/marko eBay is definitely the largest user of Marko, but there is definitely others using it and more getting involved every day.
I'm starting to believe you didn't even try it out and just try to rationalize why you shouldn't make the effort of learning new tech. A few things come to my mind: 1. You don't always "know" how to use a REST endpoint. When it's following the standard: sure. But as soon as there are custom endpoints that cover edge cases in your application (i.e. to avoid bizarre urls like `/foo/123/bar/456/baz/789/bananas`) you need some sort of documentation that makes you aware of said endpoints. This is no different to having a schema explorer in GraphQL. 2. You only need to "install a server" if you develop the GraphQL server itself. If you just implement against it you don't need to install any server. It's not that I need to install a REST server if I just want to use it, is it? 3. The query language is basically JSON. If you just need to USE it, the learning curve is not really high. Our design lead with his self-taught programming knowledge learned it after a few examples. I had more trouble explaining REST to him than teaching him GraphQL queries. 4. GraphQL was created to satisfy Facebook's needs, that is true. But that doesn't mean other devs couldn't make use of it as well. It's designed to make it easier to work with highly relational data and prevent overfetching. These are problems not only Facebook has. Of course you can solve anything with REST that you can also solve with GraphQL. In the end you have to decide which solution fits best for your project. But saying "I can't think of a dumber move than using GraphQL" and justifying it with basically "I don't want to learn new tech" should really make you think if your attitude towards improvement and learning is the right one in this industry.
linkedin popular last 1 year
GraphQL may come in useful for you!
'hasOwnProperty' is a fun string to fuzz test JS apps with.
ok, i will do that when i get home
Thanks for the answer. However, is there anything much higher level than webrtc for p2p? 
Half responding to a deleted comment that asked about 2D/3D and self-intersections. Perhaps some extra context helps to appreciate the example. This sample shows a 4 lines inverse kinematics solver that is coordinate and chirality free .. i.e. works in any number of dimensions and metric without code changes (not just 2D or 3D - and not just euclidean space - the merit of Clifford/Geometric algebra). This version does not preclude self-intersections, but those or any other type of restrictions like joint limits are trivial to add in the same solver - and with a similar geometric mindset. What sets this particular implementation apart is the mathematical space it operates in. It is known as P(R*x,0,1) or dual projective euclidean space. This algebraic space provides several types of multiplication that directly represent intersections and unions of linear subspaces (points, lines, planes). This enables the geometric relaxation of the IK chain to be written in just 4 lines of script, without coordinates, and without 'if' statements. AFAIK this implementation is one of the first (if not the first) in a projective GA setup that uses the degenerate metric. (IK implementations are typically done using the CGA framework, a conformal two-up model for euclidean space that includes also circles and spheres as linear subspaces - while implementations in PGA without degenerate metric require the use of matrices for translations.) 
&gt; You don't always "know" how to use a REST endpoint. When it's following the standard: sure. So you don't unless you do. Reddit logic to the fore. &gt;as soon as there are custom endpoints that cover edge cases in your application...you need some sort of documentation Imagine that. &gt;This is no different to having a schema explorer in GraphQL. So no different than REST. You aren't convincing me of anything but confirming that I don't need to learn all the things needed to run GraphQL. &gt;It's not that I need to install a REST server if I just want to use it, is it? You **never** need to install an additional server to run REST. &gt;the learning curve is not really high. It's higher than REST cause you already know and use REST. &gt;Of course you can solve anything with REST that you can also solve with GraphQL. Then we are all in agreement here. &gt;justifying it with basically "I don't want to learn new tech" I never said that but reddit isn't reddit unless someone puts words into my mouth. I'm saying you don't **need** to learn some new tech when what you have already does the job without the need to learn anything new. I see this all the time now. It's like people watching advertising on TV and running out and buying something cause the TV told them to buy it. They didn't want it or need it before then, they weren't even looking for it, but they bought it cause the TV told them to and it's new so it must be better...right? No other reason? 
I've answered the first 10 questions or so of section 2 with mostly silly but working answers, then lst the interest and just submitted it with the rest empty, and I've still come out 18 of 117 and within the 85th percentile?! I guess a lot more people submitted it without filling in section 2 then, lol.
Chatbots, the hype no one was waiting for. I literally haven't heard anyone, apart from the marketers selling this stuff, that's actively using chatbots.
I'll crosspost my own post on my post asking for help (this is getting very meta!): This is a response I posted to a thoughtful post on GraphQL's bias toward nullability. I think the author captures the reasoning pretty well, which is familiar to me from the principles of Protocol Buffer schema design. But I still find it really unsatisfying. And as I'm designing my first schema, I'm struggling with how to represent optionality, especially for fields that have permissions and could be null for auth reasons. I'm considering trying to define dedicated scalars for representing absence. Fake example, I could do something like: scalar NoSocialSecurityNumber scalar ValidSocialSecurityNumber union SocialSecurityNumber = NoSocialSecurityNumber | ValidSocialSecurityNumber type Person { name: String! socialSecurityNumber: SocialSecurityNumber } Here, absence is a first class value. It would effectively be a singleton type that could only be the string "NoSocialSecurityNumber". Then an error would be a null, representing that maybe you don't have permission to view the SSN. But in any case, nulls would basically be developer errors, kind of like HTTP's 400 Bad Request. That's just what I'm thinking. I'm interested in any feedback on my reply or this approach.
I guess too. I have bronze with only the first section. I had the same feeling, too much stuff about typeof.
I agree. There were multiple questions which could have been answered by multiple questions. One always was "the most right" though. But yeah... [].prototype.fn = function(){ ... } is just as a valid as Array.prototype.fn = ...
Cool, I'll look into it. At a brief glance, it doesn't appear to keep track of the axis and amount of overlap.
The benefit of graphql is that it provides you a methodology to fetch only the data you need from your services, as well as providing a deeply nested query hierarchy. The point is if you have highly relational data, eventually you realize you need to solve the problem in another way than just writing deeper and deeper endpoints. If you don't have these problems, continue using plain old REST endpoints, end of story.
That could be JavaScript's new slogan. "JavaScript: come and live in our house of shit!"
a few companies in my country. Some people find it useful (though I'd rather call it a smart search) and some make fun of it.
I bet you're a joy to work with 
&gt; The benefit of graphql is that it provides you a methodology to fetch only the data you need from your services So does REST. &gt;If you don't have these problems, continue using plain old REST endpoints, end of story. Exactly my point.
I am because my company is built on a solid foundation of well proven technologies that simply work everywhere. We have a group of people who communicate intelligently with each other without simple-minded, common reddit type responses such as yours.
I am not complete with this project, and I will submit this project again. In the meantime comments will be appreciated. Thank you.
unfortunately REST does not support fetching only the data you need at the property level - it will return an entire entity, but picking and choosing properties of that entity is not something that can be done with REST without multiple calls - this is the purpose of GraphQL, along with providing an API for highly relational (read: deeply nested) data. You can ignore the fact that it solves an important problem for many highly relational use cases, or you can just admit that you don't have that use case.
True, but it was actually called Mocha first. And it was ECMA rather quickly, while Javascript was an internal name. 
It would have helped if you included a link to the JSON file and the code you use to parse it. This way we can only guess where the error is.
Everything you wrote also applies to SOAP
My pleasure 👍
✊
I remember there being some talk on overhauling the way webpack configs are made, but I don't see much sea change based on this changelog. Has that been postponed?
Please refrain from ad hominem attacks.
Please refrain from ad hominem attacks. Thanks.
I would but reading through his repsonses it's clear he's a pita and wouldnt listen to a sound, reasonable discussion on why graphql is worth using
With typescript my example *is* typesafe. This is an example of TS having a better type system.
Somebody not agreeing with you or the other users is not a reason to resort to ad hominem attacks however. I understand that it's frustrating discussing somebody who has no intention to change their outlook, but in that case, simply not discussing it might prove to be better.
Why chatbot so populer in industry -__-
If JavaScript is reading it, but not in the way you expect, it could be a valid JSON structure, but not the structure that would be effective for what you want. To get a better idea of the structure, and be notified of any errors, try running it through: https://jsoneditoronline.org
Yeah we have chatbot lessons with Botbuilder at my school but I don't see why a chatbot is usefull in any way
U got any contacts? 
Conveniently, yes! Someone posted this just within the last week or two: https://www.codercommunities.com/ I'll specifically plug [Reactiflux on Discord](https://www.reactiflux.com), which is a community dedicated to React and all its related technologies (Javascript, Redux, GraphQL, Webpack, etc).
How?
As soon as you get him to refrain from the same.
Yes, another dumb thing.
I'm saying most people are going to start using GraphQL cause reddit is telling them to use it and no other reason. Most people have no reason to use GraphQL over REST. But they will anyway because reddit told them to.
This is an example of TypeScript having structural typing. You get something that allows you to match shapes. You're still missing on proper reflection, and all the other benefits that nominal typing brings. And I agree with you, TypeScript is great, I am using with great pleasure on a codebase that is getting quite large by now! Unfortunately for you, TypeScript is not JavaScript, which brings us back to the original argument that JS is utter and complete shit. Also, for all the good that TS does, once you start interacting with other libraries, well the typings are either outdated or non existent in many cases. Because the rest of the ecosystem is still written in the utter piece of shit that is JS, and that typings are just fighting an uphill battle against interfaces that constantly change and are not self documenting typewise.
I didn't ask if it was new or why it was happening. To be clear, I was wondering if anyone knew the reasoning behind the decision to depreciate it? Because it seems silly to me.
God I hope not. JavaScript simply does not need all that shit and a hundred MB's worth of transpiler dependencies to be useful. If JavaScript developers en masse decided to actually learn how to write JavaScript, instead of trying to make it act like &lt;insert classical OO language learned at University here&gt;, then they'd quickly discover that we just -don't need- to try and pretend JavaScript is Java or C++ or anything else and we certainly shouldn't try and force it to be. It's a loosely-typed, dynamic language based on prototypical delegation. Embrace it and use it's strengths. Don't try to obfuscate them. The suggestion that those things are good for games development is laughable. If we're trying to milk every drop out of performance out of the HTML Canvas, any developer worth his salt is going to be write more efficient code than a machine transpiler, no matter how good that transpiler might be. 
According to MDN, it's because synchronous requests on the main thread "block the execution of code which creates 'freezing' on the screen and an unresponsive user experience". https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests
Reactiflux is very good and active. 
Thank you!
Might be wrong but I believe that Indeed doesn't share your mobile number, just allows recruiters to email you. So would not be like Dice. Happy to plug our site, it is agency but once signed up you can see full client information of all jobs before you apply for anything and we only ring people on predetermined times. www.javascript.works-hub.com 
For what it's worth, sync APIs like sync XHR and sync FileReader are available within web workers. https://www.chromestatus.com/metrics/feature/timeline/popularity/465 shows decent usage numbers for sync XHR so it's unlikely to be abruptly removed anytime soon. interesting read: https://github.com/whatwg/xhr/issues/20
Had to get a friend with Linux to help me, because it's really weird. It crashes when there are more than 16 (specifically) CodeMirror instances, which isn't something I could have predicted. I'll have to split section 2 across more pages, which I hope will fix the issue. For now you can use FF on Linux which seems to work
I think graph QL would be overkill probably... I'd just set up some Express routes with a few simple HTML templates to render connected to the C apis either directly via http or with a couple helper functions. More than plenty to start with. The express docs, http://expressjs.com/ , have everything you need.
There was none. If there were, then the addition of arrow functions would break older code. Any new syntax needs to be unique so old code still works as it was intended to and websites don't break when new JS features are added.
If you're on windows with an older version of IE you may be able to test it in the developer console there
&gt; I have an idea for a web app that I want to develop, but it seems like there are more and more frameworks/libraries that come out every month. Ignore the plethora of frameworks and libraries. You don't need to use any of them. If you choose to use one, you certainly don't need to learn the others. In time you will find that frameworks can save time and effort. However, the best thing you can do is to learn the basics. If you have a good foundation, you can decide for yourself if a framework or library is relevant to your needs.
Stack overflow is a good site to look for a developer job.
not sure what you exactly mean, but you could check: https://github.com/dominictarr/scuttlebutt https://matrix.org/
Kinda makes you wonder who is upvoting this.
Please could you tell me how to do it. Thanks.
+1 "Most of the time, if you feel like you need to add a comment to explain what a piece of code is doing, your code is probably too complex and should be refactored." 
That's what I was wondering too. Thanks for the reply mate !
I m on MAC right now, mostly have to get home and check on my windows. 
If you know ahead of time how many subreddits you're scraping, you could create a global `subCount` variable set to, say 100, and decrement it each time you're done with a subreddit. Then you'd also need a function `checkIfDone()` that checks if `subCount` is down to 0 - if it is, `print postCount`. Complicating things is a second layer of async - you're also doing some (unknown) number of `request`s on each subreddit, one for each post. So how do you know when you're done with a subreddit? Well, I think you can do it the same way: at the beginning of each subreddit scrape, you "get the links to the individual posts" - you can again create a counter that decrements each time you're done with a post, and when that counter reaches 0, *then* trigger the `subCount--; checkIfDone();` from before.
&gt; But should such design decisions not be up to the developer instead of enforced by the language? Well, you could argue both ways about leaving the developer free to shoot him/herself in the face. There's not a definitive answer, because it depends on many factors. In this case, the idea that it was too easy for a fair number of devs to fall into bad practices and didn't provide any particularly good reasons to exist, prevailed over other concerns. Then again, this is not enforced _by the language_. XHR is an API, completely [external to the language](https://xhr.spec.whatwg.org/).
It seems to not resolve correctly with the `www.` in front, FYI :) http://javascript.works-hub.com/
Unfortunately I don't know how many posts there will be...
Thank you for the heads up! Not sure how I forgot we are not a www site. 
I've been using GraphQL on some other project and it doesnt realy fit here. Its all about percise API Calls, which are easy to validate and translate. The frontend should be able to call something like "move the vertical alignment motor from A to B", then the nodejs needs to validate and translate that into numeric commands. I will look into express, thanks :)
We've actually built a chatbot for one of our gov's departments. They needed a vastly improved search, talked to Microsoft, were told a Chatbot would fix their UX issues and wanted one. They are quite happy with it, eventhough I believe this could've been solved better.
In an environment like Chrome, synchronous requests do _bad things_ and effectively stop the event loop, thereby preventing other JS tasks, like the internals that handle events. That was probably one of the first reasons we're seeing it go. &gt;I understand that it could slow down a web application if some novice used synchronous requests constantly where asynchronous requests are viable. Exactly. &gt;But should such design decisions not be up to the developer instead of enforced by the language? Ah, a classic power struggle between the language and the developer. If synchronous behavior is absolutely required, one could always just create a wrapper function around something like the fetch API that awaits results, or write a function that waits until the loadState is finished. Such alternatives are much more friendly to other asynchronous JS events being handled in due time, and are worth looking at because their API's are much less complicated. If you _must_ use XHR's in the web, consider creating an initial appearance to inform the user that something is happening (like a loading view) and then overwriting that later on in a callback. Or, if you're in the console or elsewhere, why not just _not do anything_ until the request has finished? &gt;Or am I just missing something? You bring up a valuable point—that the language eventually pushing people away from using a flag is silly. As I recall, synchronous XHR's have been deprecated for a while now, and I'm at a loss for situations where synchronous requests are _absolutely necessary_. They may be easier or quicker to write, but that's besides the point.
I think the problem is that your second `if` is checking something that does not exist. var genders = document.getElementsByName("btwvan"); // --&gt; this works, because the HTML contains &lt;input name="btwvan"...&gt; var procen = document.getElementById("procent") // --&gt; this does not work, because there is no element with that id So it alerts "test", then runs through all the `if (procen[0].checked == true)` conditions, but none of them are `true` because `procen` is... nothing. And then after the javascript runs, the `&lt;form&gt;` *also* submits like a normal HTML `&lt;form&gt;` - it refreshes the page. To disable this, change the opening tag to &lt;form action="javascript:;" method="POST"&gt; instead of `action=""`. This will override the default "reload page" behavior. --- One other note: when you do get this working, your second `alert` will always just give you `0`. That's because you're currently multiplying 1.06 or 1.21 or whatever by `bedrag`, which is `var bedrag = document.getElementById("bedrag")`. Unfortunately, this is the entire `&lt;input&gt;` element, and you really just need the `.value`: var bedrag = document.getElementById("bedrag").value
No, I'm in the UK and Prime seems only to be for jobs in London and I don't want to live there.
You're being pedantic again, grandpa. 
&gt; In this case, it's not. Yeah but thats just like, your opinion man. 
Discord - [SpeakJS](https://discord.gg/EXyeK "This is a 1 day link")
I think i just added a link in a way you can view it, bonehead move not including that in the post originally 
Ah, I see. Then my position is a bit different. ES5 is still a huge, core part of JavaScript, and none of the other resources deal with it quite the same as Crockford. So personally I'd still prefer and recommend to start with it for establishing a solid base, then browse es6-features.org to get an idea about what's been added. After you've done this I reckon you'd have a much better introduction to the language than otherwise. To put it another way — you'll never be sorry for knowing ES5 very well. Granted, for specific topics you're still going to want to read in depth literature, but "The good parts" wasn't meant to be exhaustive anyway.
Well, you could say the behavior was throwing a Syntax Error on the unexpected token
Wait, don’t you have to write resolvers and whatnot on the server? The abstraction and functionality that comes with it definitely impose a cost on development time. I’m not opposed on principle to learning it, but it does seem like a premature optimization in easily 99% of cases.
No idea what Indeed is, but if you're looking for work, I strongly suggest checking Meetup.org and seeing what's going on in your area. You'll find other programmers and tech people that shares your interests, and recruiters tend to not swarm these events (events organizers dont want to ruin their events naturally, so it's limited).
I think when NLP technology matures, this will be very useful. There's always an early adopter period where the solutions people come up with are crappy, but without these early adopters as a foundation, we won't have any progress at all. 
Yea, but CS is already C# in alphabetical letters. 
* [Three.js](https://threejs.org) * [Pixi.js](https://pixi.js) * [Anime.js](http://animejs.com)
&gt; I'm off to an out of town client. Can't respond anymore. everybody would appreciate if you never did again, thanks
Make sure you translate the hex, then use the console to launch your rocket with the code they gave you. Good luck!
Yep, you could easily write middleware for validation, etc.
You should be aware that anything starting with "file://" is referencing a file on your personal computer. Nobody else can access URLs like that. You have to upload it somewhere on the internet to share it.
You don't need to know how many posts there will be. The script can figure that out on the `request` that opens up the subreddit - it has to know how many posts there are before it loops through them to open them, right?
Also, here's a link to a guy named [Takumi Hasegawa](https://tkmh.me/about/) who is a pro at these kind of things. He has a devlog that you can look over. 
The request is asynchronous.. which means as soon as the request is called, the print postCount on the last line will execute. That's why it prints 0. Use ES7. cont foo = async () =&gt; { let postCount = 0 const bar = () =&gt; { request(open...) }; await bar(); print postCount; }
Yes, you do need to write resolvers for your schema, but the effort depends on how complex your data is. Assuming you write a schema for a dataset stored in a MySQL, the resolver for said Schema is as simple as writing a fetch. For example: ``` // Bookshelf.js example fooSchema: (parent, { schemaId }) =&gt; { return new SchemaModel().where({ id: schemaId }).fetch().then(model =&gt; model.toJSON()) } ``` GraphQL receives an object and maps the keys to your schema definition automatically. You don't need to write resolvers for those fields. Now if you have relations or calculated fields, THEN you need to write a resolver for those. So the more complex your data, the more complex the resolvers. So, yes, it is an overhead that's not really justified for small projects. In bigger projects on the other hand it's definitely worth it. It "just works". Each field you fetch knows exactly how to resolve itself, which makes development much easier in the long run.
JSON is fine so... show the code that is doing the iteration. Paste it into your post here, post a link to it in jsfiddle or pastebin, whatever. Also tell us what language you're using to access it. In general you should be doing something like `for (i = 0; i &lt; obj.query.stats.length; i++) { let item = obj.query.stats[i]; ... }`
Nope. that's not what I said at all. Not `it's` better, `you're` better. IOW learning something new, exercising the brain muskles, is always good and bettering oneself is always preferable to not. And tbph, *your* mistake in logic is believing in any way that your opinion matters.
What no mention of our buddy at [GunDb](http://gun.js.org/#step1) ? Dude's really involved in his community and helps everyone around. Hoodie is fantastic but it relies on CouchDb/PouchDb so its not super fast in syncing. Its hard to use it for actually live things but its more of an, eventually live thing. Parse was great but also it sank... The open alternative is not that supported as far as i know. I believe the best fork is [Nakama](https://github.com/heroiclabs/nakama). Horizon.js was the bee's knees but is now completly dead since RethinkDb the company sank. Its in bettwen a major refactor and nobody's picking it up. Horizon is as dead as can be.. I've love to pick it back up tho. 
I think it depends on the needs of your app. If it's something simple like a chat app, you can get away with using websockets without much fuss. If it needs to gracefully handle clients going offline and push their changes when they come back online, that's added complexity. If you need to be able to handle merge conflicts after that client comes back online, that's added complexity. 
how is babby formed 
https://alpha.editor.p5js.org/bradgross/sketches/HJmvaR2RW I've been using p5.js for this code. not sure if you can view that but hopefully it works.
Fortunately since *ES2015*, we have the `for` `of` loop in the language which is much nicer than the classic `for` loop: for (const stat of obj.query.stats) { // use stat ... } 
Unfortunately, it crashes both Chrome and Firefox under linux for me
Quite true. I can never remember what newfangled things came in ES2015, ES2016, typescript, etc.
is this as exciting as it sounds?
This actually looks pretty well done. I'll definitely give it a try on smaller projects.
I switched to it yesterday when the default formatter in vs code was producing questionable results out every time i saved,i have format on save, a longish (150-200 lines) react component. I downloaded locally and the vs code extension. So far is great even tho i disable formatting for md, i didnt like the result. I use it for css js and json and have it as a precommit hook
u forgot to switch account
i didn't write this, i was just asking the question. i got an email from thinkster and felt like "god damn it another package manager".
Three JS. I used it to edit a 3d model of a brain for a project. No good docs.
Thanks for the feedback, I really appreciate it! I understand that JavaScript needs to be my top priority. I don't know why my post is getting so many downvotes, maybe it is because most people in this sub aren't used to newcomers. 
Good advice. Looks like I will spend a lot of time looking into more advanced JS topics. Thanks for the feedback!
It looks very interesting - but what's it for? Obfuscating code for production release so nobody steals it? If that is the case I'm not sure why speed is so important - it's not something you would do repeatedly. 
I just spent 30 minutes trying to make it watch a single SCSS file. After the 5th undocumented "can't find module x" and the 1st "[object Object] is not a something or other" I decided to use something else. I desperately want something simpler and harder-to-break-than-webpack but your documentation doesn't do justice to your claims. Faster isn't better if it means unstable or unusable. For the sake of improvement, I'd love to see more documentation. - How do I get this SCSS file working? - How can I watch a file in one place and generate a file in another? - Is there a version manifest? Does this support versioning of any kind? - Can I watch multiple asset entrypoints at once (like CSS, JS, HTML)? These would be great questions to answer, in your documentation. Perhaps you could provide example rc configs, so common setups like react/vue/scss/less/bootstrap/foundation would be easier to get working. Right now it seems the only thing I can hope to achieve is an exact replica of the single documented example. :(
It's not my project, I just posted it here. Don't think there's support for SCSS at all. Maybe create a new issue on GitHub with your suggestions!
Too many new projects seem like they put more focus on a logo and website than documentation
I'm taking this course right now and it's been pretty good so far, Stephan Grider is a great teacher, I've bought several of his courses . I like his approach to teaching algorithms, but I personally prefer Eric Traub's data structures course for learning data structures . (Grider has more set up and uses tests for the data structures, it was actually distracting for me, Traub just presents and explains the code/structure, in manageable chunks ) . here's a coupon code for $10 courses, you may have to clear your cache to use it, if it doesn't work just google search for a different one F9O5SG1217DEAL12
&gt; It's not my project, I just posted it here. My silly assumption... ;) &gt; Don't think there's support for SCSS at all. There are tests for it. I just can't figure out how those tests translate into a usable thing. &gt; Maybe create a new issue on GitHub with your suggestions! Maybe.
You can use Promises to make "everything synchronous" I thought in something like that function makeRequest(link, count) { openLink(link).then((texts) =&gt; { let promises = []; for (let i = 0; i &lt; texts.length; ++i) { promises.push(handleText(texts[i])); ++count; } Promise.all(promises).then(() =&gt; { resolve(); }); }); } function processSubreddit(suberredit, count) { openSubreddit(suberredit).then((links) =&gt; { let promises = []; for (let i = 0; i &lt; links.length; ++i) { promises.push(processLink(links[i], count)); } Promise.all(promises).then(() =&gt; { resolve(); }); }); } function main() { let promises = []; let count = 0; for every suberredit promises.push(processSubreddit(suberredit, count)); } Promises.all is very helpful when u have a random number of methods asynchronous that u have to wait for doing your stuff
frontenddevelopers.slack.com 
You're... a bit out of the loop
What about brunch.io ? Why doesn't anybody know about brunch.io? Its not even in the benchmarks.
The first thing I would do is wrap the whole program in a factory function that returns the event handler. The biggest benefit is it is easier to make this thing live together with other components since you only occupy one function name to make it work. https://jsfiddle.net/trk806gu/ Then you can probably save on some variables in the mouse moving detection code by saving the mouse data as `lastEvent` instead of in different variables. Just basically `lastEvent = event` where you have save mouse position for example. It also lacks a way of destroying itself which is not necessarily a problem now, but you could attach a destroy function to the function returned by the factory that looped over all created divs and destroyed the event handlers for example. A fancier way is to use event delegation, which means you only listen for events on the parent element (document in this case) and check the event.target for a matching element when things are clicked.
You can use Promises to make "everything synchronous" I thought in something like that function makeRequest(link, count) { openLink(link).then((texts) =&gt; { let promises = []; for (let i = 0; i &lt; texts.length; ++i) { promises.push(handleText(texts[i])); ++count; } Promise.all(promises).then(() =&gt; { resolve(); }); }); } function processSubreddit(suberredit, count) { openSubreddit(suberredit).then((links) =&gt; { let promises = []; for (let i = 0; i &lt; links.length; ++i) { promises.push(processLink(links[i], count)); } Promise.all(promises).then(() =&gt; { resolve(); }); }); } function main() { let promises = []; let count = 0; for every suberredit promises.push(processSubreddit(suberredit, count)); } Promises.all is very helpful when u have a random number of methods asynchronous that u have to wait for doing your stuff
that sounds great, will try it when i finish what I have at hands :(
Resn looks pretty cool! But be careful with bloat. There's no reason that page should be 31MB on my desktop *or* my phone.
I don't get it honestly :3 I do that won't do anything
Yeah heaven forbid developers use tools that can help them for software development.
But why does it work for the genders but not for the procent it has the name procent
I'm sorry, but I don't find a link to a demo, do you have one?
Yes, exactly. Each one is &lt;input type="radio" name="procent" value="" /&gt; but you're trying to get them with var procen = document.getElementById("procent") The `name` *is not* the `id`! For genders, note that it is correct: var genders = document.getElementsByName("btwvan");
That's what I meant by "true" application (handle offline stuffs, etc..). I'm trying to do things right but I can't find any reliable resources online. Any clues?
It's not yet set in stone whether they should be required or not, if you read that thread there is some talk of making them a hard requirement, meaning you would always need them. My guess though is things will remain as they are right now, and people will have to pay more attention to the ASI caveats (if they choose to omit).
We have been using Prettier at work for a while now and from my perspective it has been great. As the whole frontend team needed to conform to the same formatting rules, I and others of course had some minor disagreements with some rules at the start. But it's totally worth it to have all code using the same formatting. You should give it a go. :) It's easy to setup and integrate with ESLint.
I don't live without this. Just amazing.
It's probably a bad thing how much of a dependency I have on prettier. Being able to write trash code, then save and have it automatically formatted is super great.
Thank you. Good to know I’m not the only one out there struggeling with these things.
I haven't gotten a chance to fully look over the code but one thing is to make sure you have no bugs in your for loop. JS will stop iterating through a loop if on any iteration, it crashes.
I found this curated list a while back with different Slack channels: https://slacklist.info
Have you tried rollup? It may not be where you want it yet, especially plugins needed on the scss side, but overall it's been my goto over webpack 2. 
I didn't know brunch was still going. It was pretty decent when I first saw it.
Probably legacy code. Plus not all of them are fully fledged frameworks. It takes time to migrate so instead you build on top. As for page load, it should be affected somewhat but it depends on if you have loaded those scripts beforehand and the speed of you connection. When you have loaded it once you will not notice it, unless there is a lot of spaghetti code though.
I'm ok with it as long as javascript still exists and my skills are still needed at some points, tools are easy to learn.
Now I have Parcel and Turbo, nothing can stop me!
Is writing JavaScript in a functional style just a way for people to feel happier about writing JS every day or is it actually a useful practice? 
Angular is the only framework in that list. Modernizer does browser support testing, requirejs does script loading, and jquery is probably being used for smalller widgets that don't use angular. Odd that mustache is being used. Maybe it is used by a plugin widget. Ef.js appears to be for html templates, but that might be to supplement an older angular that doesn't support them.
Grrrr... I waited all that load time for a wobbly crystal thing? :O You could do everything on that site with the skills you have... Three.js or one of the other WebGL libs will do the 3d stuff, and you could even go crazy and unzip the .obj / .3ds model file client side. But honestly... don't get bogged down in gimmickery, or if you do want to use gimmickery, use it sparingly amd work out how to make it load quickly, or progressively, at least. Look at how other people are doing the things that interest ( or confuse ) you, but then look for bite-sized chunks on CodePen etc. to build up a set of tools you can use to do more ambitious projects. Finally... start small... KISS. :)
Brunch is great! I hadn't ever heard of it before either, but once I started diving into Elixir and gave the Phoenix framework a try (which ships with Brunch by default), I've really grown to appreciate the ease of use that Brunch brings to the table.
It's half interesting. The technology to download only some of the required source files from dependencies: 👍 The fact that it is not a general purpose ide, limited configuration options (React and Angular only, more presumably to come), only works in the context of their ide, and they are probably cheating by predownloading and specially compressing dependencies since they control their servers: 👎
Would that take cdn users into account?
Bundle to the Future!
Your example wouldn't work. You can't await on bar as it's not async and doesn't return a Promise.
grea job!! that was very clear and detailed. I really enjoyed reading it. Also good thing you added the video to explain the fiber concept because My head started to hurt at that point :P
Prettier is awesome! Been using it for the last few months with atom and vscode its best to hook it up to your eslint file so you can have all of your rules mapped to prettier also it allows you to add shortcuts for formatting instead of on save which is great because we have some old code that is not and cannot be transpiled yet so we can't auto format it to use es6 yet. When we can convert it all we have to do is hit the shortcut and it will map everything to es6 and our eslint file.
Thanks! I didn't write it myself, but the article is incredible. Please share and follow levelup.gitconnected.com for more.
I know this isn't exactly what you asked for, but this platform came to mind https://realm.io
I guess you could reverse engineer it by logging the user agent
Hi /u/th3originals, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `youtu.be: LearnWD`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [youtu.be](/search?q=%28and+site%3A%27youtu.be%27+author%3A%27th3originals%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|62|87% [youtube.com](/search?q=%28and+site%3A%27youtube.com%27+author%3A%27th3originals%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|9|13%
okay and thanks
That code is obfuscated, meaning it's been created to be intentionally difficult to read. While its not impossible translate it into something more readable, it would be quite tedious.
Turbo itself is actually decoupled and being used in environments outside of StackBlitz. We still have a long ways to go in regards to solidifying the technology, hence why we're in "technology preview" and asking folks to give us feedback on any problems they're facing with it. The plan is to open source everything once our API churn slows down likely within the next few months or so, which will enable usage of Turbo in just about any environment on web or local!
Cofounder of Thinkster and co-creator of Turbo here! First of all, awesome to hear that you're on our mailinglist :) Turbo is _not_ a replacement for npm/yarn today. Instead, it's one of the first takes on what package managers might look like not so far in the future as browsers start supporting native ESM modules. I was just chatting with one of npm's core devs today who was delighted to see our work here, as they've been investigating whether to create something similar to it. That said, Turbo is definitely a game changer for online IDE's like StackBlitz.com (which is why we built it in the first place :)
It's throwing readable code into an eval, so its not doing a very good job of obfuscating. Probably just minifying. function verifyInviteCode(code) { var formData = { "code": code }; $.ajax({ type: "POST", dataType: "json", data: formData, url: '/api/invite/verify', success: function(response) { console.log(response) }, error: function(response) { console.log(response) } }) } function makeInviteCode() { $.ajax({ type: "POST", dataType: "json", url: '/api/invite/how/to/generate', success: function(response) { console.log(response) }, error: function(response) { console.log(response) } }) } 
sounds right
The fetch is a promise.. so the request is a promise. You would do a return fetch().then(); Bar does not need to be async because its returning a promise. 
Life changingly awesome. It's amazing not having to think about code format. I'd like to not though that we still use eslint for non style related linting. It's still very useful for that.
The thing is, when developing at scale, *dynamic* and *loosely typed* are not strengths, they're liabilities. Embracing these would be a mistake on a large application. Prototypes aren't a weakness per se, but they are different from most oo languages with no obvious benefit, hence why we now have classes.
Author here! Thanks, your appreciation means a lot :) And yeah, gotta thank Lin Clark for these cartoons. Fiber is an incredibly interesting topic, I hope I'll have time to write up something on it soon !
maybe check out bankai?
True enough, I just came to the same conclusion. Now we know WHAT it does. How it does it is still another matter for me though.
Thanks! Great suggestions, and some new things for me to learn about. I notice you created an array to track the rectangles that have been created... so if I understand correctly, you can then access them later with somtheing like `drawingHandler.rectangles[i]` ...? 
not another package registry
No you're not returning anything from bar
they are probably using the old Angular which requires jQuery. 
You can force an image to be loaded (and put in the cache) simply by, var image = new Image(); image.src = url; So your simplest strategy could be to loop over a list of important assets when the game loads and load each of them at the start. (No need to stick the `image` variables in an array and keep them around or anything like that -- just instantiating an `Image` and setting the `src` is enough.) (Of course you could make things more complicated if you wanted to, by predicting when different assets will be needed in the future and loading them as needed.)
Wow that sounds extremely simple... I recall reading that method online somewhere but i thought i would've had to call the img by the variable when i needed it but you clarified it. When I get home, ill be sure to test this. Thanks!
fixed the snippet, is that better?
Just tried it out on https://stackblitz.com/, and it's actually really impressive. It's just plain nice to be able to type 'mobx' and 'mobx-react' into the dependencies and have it both installed and ready to rip in a couple seconds. The editor actually pulls up (much) faster than VC Code does on my own computer. Great job!
Just tried it out on https://stackblitz.com/, and it's actually really impressive. It's just plain fun to be able to type 'mobx' and 'mobx-react' into the dependencies and have both installed and ready to rip in a couple seconds. The editor itself actually pulls up (much) faster than VC Code does in my own computer. Great job!
My dad who's been in IT/programming from the 80s to 2010ish also had the same thought when I told him I would be learning JavaScript. I think it's an old thought from when JavaScript was new back in the day. But when I told him even some backend is programmed in JavaScript now he looked it up and found it to be more of a "real language" than he thought before. He's even programmed JavaScript long time ago for personal project website years ago and thought this. 
Had a lot of fun with this test. Thanks for spending the time to make it! (also pretty proud of achieving the highest [score](https://i.gyazo.com/4a09293651a20bce02df600f8688c68c.png)!))
&gt; faster than VC Code Vietcong code?
If I am reading this correctly, the only one that is even worth considering is Hoodie?
This is one of my favorite comments about StackBlitz ever :) So glad you like it! Don't hesitate to ever reach out to me on [twitter](https://twitter.com/ericsimons40) or in our [discord channel](https://discord.gg/stackblitz) if you ever have any feedback or ideas for us 🍻
That agency won an award for their css. I wouldn’t compare yourself to them too closely. 
AngularJS doesn't require jQuery but it does ship with a subset of jQuery functionality.
I’d recommend graph.cool in this category
really? I thought it did at one point. 
Completely missed your comment implying that we're "probably cheating". We're not, and you can verify that for yourself by opening up your network tab, installing a new dependency, and watching what happens. Let me know if you need a quick tutorial on how chrome devtools works 👍 
Does this project have an example library?
Nakama is worth looking for if you want realtime, hoodie if you want offline syncing. 
what if he used a sprite-sheet and just reset the position of the image when the condition is met? I guess this depends on the size and quantity of images. 
Nakama is written in Go, and Parse is in Javascript, so no, it hardly looks like a fork. Parse is going strong with a bi-weekly release cycle. You are right about Horizon.js...seems like it's in a ditch at the moment and the community has not yet organized.
I think you missed a bit. If you press and hold and swoosh for a bit some crazy, weird but quite cool stuff happens. Not just a crystal. Was a nice crystal though.
Go back and hold your mouse down on it for a second 
I just spend 15 minutes on this site playing the different ‘games?’ 
Is closeMenu getting called though? Based on the console statements? I’m trying to narrow down if the problem is in the closeMenu method or in the toggle. 
No, its not being called.. the value from this.menuOpen = false.. doesn't change to true in the openMenu() function itself...
Really? Pretty much everything I see on elixir subreddits / forums / etc is that they hate it. Why do you prefer it / what makes it easier (honestly asking, I haven't tried it yet)?
It's not really recommended, but you'll have to extend the global `Element` class. Something like: Element.prototype.fullCalendar = function(){ /* your stuff goes here */ };
Let’s try not comparing it to true or false. You can rely on the truth and falsy ness of variables. Instead do this : if(!this.menuOpen) { ... } else { ... } Sorry I’m on mobile so I’m having trouble formatting and properly debugging. 
Funny, I've tried this before posting and it didn't work. No idea what I missed, thanks. Why is it bad practice though?
`text(texts[i], 245, 17);` texts is a zero length array
It's generally considered bad practice to pollute the global scope and extend native classes because you never know if other libraries will do the same thing, or rely on the fact that those classes aren't extended, or that in the future that method name becomes used for something else (sure, "fullCalendar" probably won't be, but you never know). Basically it just introduced a whole lot of unpredictability into the system.
Ditto, can’t imagine writing something like Jsx without it now.
I haven't forgotten about you. I have had this almost entirely working *with* the web interface but was asked to write another extension which I am finishing first. In case you are wondering I used the Monaco web based editor which is (I believe) the same thing that is in VSC. The benefit of this is the way change events are tracked and can be applied to the document are almost identical. As I said it mostly all works, although I assume there has got to be some race conditions. It is almost instant but there is a short delay between when a change gets pushed out to other clients, if two people were working on the same line, it might have a collision. I am gonna play with it for a bit, if it becomes a nightmare I will probably abandon it. Either way I will post the GH when it is cleaned up a bit.
Just getting back around to this, fragmentation is bad, but free is good. There is already floobits but its like, crazy expensive for what it is. So if I can make an alternative that is usable and free and open source, I think the fragmentation argument becomes less important.
I need to get out of node work.
I think it ships with a "jQuery lite" which provides required functionality. [more info](https://gist.github.com/esfand/9638882)
Really petty reason to not use it but I just didn't like how it formatted my code. Just couldn't get past it.
I have a feeling that this might be a case of a louder minority being over-represented by being more visible and making themselves heard more, while the silent majority doesn't have the need to raise their voice over anything. I guess this often applies to many things and skews things in favor of the louder bunch :). For me Brunch has been great because of what it is: an opinionated build tool with minimal configuration. It abstracts away all the questions I don't really care too much about, and allows me to focus more on the project and the code that I actually want to work on. Need Sass support, singe-file Vue components, React, ES6 or whatever? One or two lines to add in your config (and the package definition in package.json), and you're done. Obviously there are no silver bullets and no single tool fits all use cases (hence why Phoenix also has the --no-brunch flag for new projects). Brunch definitely isn't for everyone or for every purpose, as the downside of simplicity is often the lack of options for customization, and I'm sure that there are many cases where this limitation would make things more difficult for the users and use cases where maximum configurability is required.
What is a TimelineLiye and why are you recreating then for each call? It *sounds* like the sort of thing you only want to create once and keep a reference to. 
I have a friend who feels the same way, and that's totally fine. It initially took a lot to get used to it myself.
I will absolutely try this. :)
Right, that makes sense. Today, I use "ctrl+alt+L" in webstorm to let it fix formatting. But, it does not always get all the formatting right.
What's everyone's issue with async code?
and the discover button in the top right.
This is my personal experience in the corporate world: https://www.reddit.com/r/programming/comments/7h991x/webassembly_birth_of_a_virtual_isa_ben_smith_full/dqq92hv/
They won for motion graphics work in web, css, canvas, webgl or video, its great stuff.
Oh dear lord, I'm still recovering from the Grunt &gt; Gulp &gt; Webpack whiplash. Now Google is getting ready to shove Bazel down my throat, while my Devops guy wonders why I can't just use MAKE.
Its also feasible to write webGL code in GLSL. For instance this animation rendered live in the browser: https://www.shadertoy.com/view/XtlGWs
It’s the tool that works the best for me as a ReactJS Developer! :) I just changed the row limit of 80 to 160
It’s still nice to use make in conjunction sometimes for ci/non-front end devs so people don’t have to remember yarn or npm or &lt;swappable build system nobody else cares about&gt;.
Lol
There is a ansver for ypur question in stackoverlow link(3.ansver) "The future direction is to only allow XMLHttpRequests in worker threads. The message is intended to be a warning to that effect."
don't forget npm scripts, yarn, and a lerna monorepo!
I don't write code in my browser. I use a IDE and terminal. Why would I want to replace terminal tools that work well with a browser based solution?
Dude, this is so last friday. Turbo is where it's at!
Rushed through this without too much concern/double checking [getting a 78](https://imgur.com/ETJjMU4). Kinda fun, but some of the questions could have been a bit clearer and it was way the fuck too long. 
Oh good. Another build tool, to add to the list of build tools we currently have. No no, let's not fix those build tools, let's just continuously make new ones hoping we get it right.
It must be Wednesday
I wonder why someone needs to use Neural Networks in Javascript?
That, and also a good knowledge on JS. Not only the basics... 
I changed everything to its id it still doesnt work
Horizon is dead as a doornail
Have you applied at UPS or FedEx yet?
Neural Networks are a language independent concept. Why not JavaScript?
Hey there, OP here :) I could think of a couple of things where it can be beneficial to use NNs in JavaScript. * Bridging the gap between web developers and machine learners: Personally, I find it highly efficient for myself to learn about ML and the underlying math in a programming language I am most efficient in. Otherwise, I would have to add another layer of challenges by diving into another programming language (e.g. Python) as well. By going this way, I hope to align the learning blocks effectively one after another. First, learning about machine learning applied in JS and second making the jump over to Python eventually. * Training Mode vs Inference Mode: Most recent ML in JS libraries for neural networks only implement the inference mode (e.g. TensorFire, Keras.js). Therefore there needs to be a backend to expose a trained model (e.g. TensorFlow backend). In conclusion, there is no computational intensive training happening in the browser. For instance, [WebDNN](https://github.com/mil-tokyo/webdnn) can execute models trained by Keras, TensorFlow and PyTorch. So why not exposing trained models to make only the predictions in the browser? (e.g. recommendation systems) * Visualization: I am not sure how possible it is to "visualize" the training phase in frameworks of other programming languages, but I found it highly interesting to see with my own eyes how a neural network is trained to make predictions (e.g. see [.gif](https://github.com/javascript-machine-learning/color-accessibility-neural-network-deeplearnjs)). It helped me a lot to keep me motivated to learn about ML. There might be other areas as well. Would be curious about your opinion. I am just learning about the topic myself at the moment :)
No, that was mostly a habit of mine. Using `new` for side effects is a bit unnecessary if you don't use the instance so it kinda just slipped in. :)
Right, so its fine as long as you're unique. Thanks
I suppose we have to agree to disagree. I have no idea why you'd would think they are weaknesses. Loosely typed is not a weakness. I've heard people state that as a "fact", but nobody seems to be able to explain that position very well to me. I can only speak for myself, but the kind of bugs I write are errors in logic. It's rare or never that it's a type casting error. In fact, strongly-typed languages are that way in large part for the sake of the compiler and they way they use and reserve memory for different data types. Not because it's some kind of benefit to the programmer. Remember, if it's important to enforce types, you can still do that in JavaScript very easily. You just don't -have- to do it. In other words, you have options as a developer. Removing freedom from a developer is not a strength unless it's a crappy developer. Most strongly typed languages actually make extensive use of convoluted mechanisms to make them act like loosely-typed languages (templating in C++, for example). The fact that anyone thinks it's a good idea to create something like TypeScript, that "converts" a loosely typed language into a strongly-typed one, and then implements a complicated "Generics" mechanism to make that new strongly-typed language into a weakly typed one is just a giant facepalm. If someone needs a tight constrictions enforced by the language in order to write large-scale, clean, maintainable code, my argument would be that the answer is to improve as a coder, not to use a transpiler to convert one language into another one. It's a similar story with being dynamic. For many languages, the only reason they're not dynamic is because they can't be dynamic due to compiler and memory management issues. Not because it's some kind of disadvantage.
I'm all for using tools that help good software development. If they're required. In my opinion and experience, the vast majority of them are simply not. They're an unneeded dependency on a third party for little or no (or even detrimental) gains. Regarding TypeScript, my opinion is that if someone needs strong-types and static "compilation" enforced by a transpiler in order to write large-scale, clean, maintainable code, my argument would be that the answer is to improve as a coder, not to use the transpiler. The question is, is the tool a help or a crutch? 
Good reply! Thanks for that point of view. I agree. To be clear, my point was not that synchronous requests are "absolutely necessary", just that in many cases, asynchronous requests are simply not necessary I'm a big fan or writing clean code. In other words, code that is straight-forward and doing only what it needs to do. Asynchronous callbacks add complexity to code that simply is not needed for many tasks. Of course I could write a hack-wrapper around an asynchronous request to make it act like a synchronous one. But that's simply silly when I could just use a flag.
Thanks! I missed that. Fair enough I suppose.
Thanks for your response. Cheers.
I'm a little biased because I'm one of the authors but you should really take a look at [Strapi](http://strapi.io). It's easy to use, it allows you to model your data structure, manages it through an administration panel and includes a full authentication process (JWT + ACL).
if you can move the heavy lifting to the gpu via webgl you should be able to have a performant cross platform deep learning solution. no reason not to use javascript
Generally speaking, unit tests are the most successful in a situation when code units under test are small and "do one thing". What also helps is to understand the "boundaries" in your code that separate things you should be worried about from things you should not be worried about. If you are writing a lot of preparatory code and have to access other resources (like network) then you are writing a functional (or integration) test and they are better done in a different way. For example, do you really need to create this gigantic serviceJSON and physically write it to your disk to test if your service starts? Can you take out the bit in your code that receives data from that JSON and acts on it, and test that bit separately? Rewrite your code so that every method does one thing, and check if it does that thing correctly under the assumption that everything else worked perfectly. If a method adds a new property to a big object, would it be enough to pass it a simple (empty?) object and check if the property in question appeared as expected? 
Watch this : https://www.youtube.com/watch?v=URSWYvyc42M
Did you try [bankai](https://github.com/choojs/bankai) already? It was also posted somewhere here a few days ago.
You need to have a clear vision of what _exactly_ it is that you're testing. In that test you showed, the expectations indicate that the only thing the test checks is that the `spawn` is passed the correct argument values in `command` and `options`. This, in turn, seems to be, mostly about checking a couple of paths. So, first thing: Use the appropriate type of _test double_ you need. If you just need to check whether something has been called with the correct argument values, what you want is a _Spy_, not a _Mock_. The good thing is generally speaking, _spies_ don't need to care about actually "doing things". So there's much less to build in the test. Second thing: You're _using_ a lot of external entities just to build the test conditions. I mean, you want to test `"someUser/testService/start"`, and `"someUser/testService/process"`. You _know_ you want to test that. Bringing external facilities -and I could bet they are the same external facilities that your test subject uses- makes you lose control of the test conditions. The test _should_ define explicitly the test conditions. So just _hard-code_ those values. Hard-coding values to define test conditions may sound weird at first but is exactly what you need to do to keep your tests correct and precise. And finally, it looks like you're _actually doing the things!_ _Don't do the things!!_ I mean, you're mocking some big things just to test the correct generation of a string, but then you're actually creating paths in the file-system, and running the process. You don't need to do all that just to test a string. That is exactly the idea of _Test Doubles_. You substitute the real entity for something that _doesn't do_ whatever the real one does. Just simulates the precise thing you need it to do and nothing more.
Jquery?
imo vue.js feels much more declarative and dev friendly than react. directives like `v-for` and `v-if`, and computed properties lets you display values in a very declarative way. with webpack and vue-loader, you can create a single `.vue` file for each component, which includes template, logic and styles. you don't have to create js, html, css file for every component.
JavaScript allows you to run code client-side versus being limited to server-side. 
JavaScript allows you to run code client-side versus being limited to only server-side. This alone is it great justification for using JavaScript.
Will this work for private npm repositories (nexus, ...)?
What about things like demos, experimenting, learning, teaching or any time you'd like to work on something without access to your regular machine? It seems pretty cool.
I wouldn't use it to write production code either. But it's great for doing quick 'sharable' things like demos, examples and so on.
You could use &lt;link rel="prefetch"&gt;[1] for this too, then you don't need any JavaScript for the preloading. &lt;link rel="preload"&gt;[2] is also an option :) [1] https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ [2] https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content
Until I can pull this into &lt;insert editor/IDE here&gt;, then it's not going to be more than half interesting, like /u/dwighthouse said. For demo-purposes, CodePen or JS Bin is just fine, I wouldn't need to pull in dependencies for that. If one need to use "real" packages, one could use unpkg, or any alternative that caches stuff from npm in the browser.
To put it plain .. i feel like I've been using it forever, can't imagine not using it
Well, if you're building web apps that is.. 
&gt; or any time you'd like to work on something without access to your regular machine Its like you would like to bake withnout access to oven...
Do you wonder that specifically about JS only, or other languages too?
https://discord.gg/FF4JWrx
Because that's the fun bit, and these projects are usually self-funded, be that money and/or time. I personally can't start a project until I've nailed-down the logo; it gives the rest of the project personality.
Online IDEs like codepen and jsbin are great tools for testing and sharing code bits. But they don't bundle, don't accept modern javascript, etc. How cool would it be if you could simply drop a blob of es-next code into an online IDE and have it resolve dependencies and resources. That's what codesandbox and stackblitz do. I've found this invaluable, for instance we use it to quickly present demos or let a customer see how to deal with a package.
Indeed, which is exactly what the article is about: "The neural network implemented in this article should be able to improve web accessibility by choosing an appropriate font color regarding a background color." “deeplearn.js is an open-source library that brings performant machine learning building blocks to the *web*, allowing you to train neural networks *in a browser* or run pre-trained models in inference mode.”
I am happy that some people are doing just what you described because I would never get interested in ML if I HAD to learn a new language. With your kind of projects I can dip my toes and see if I want to learn more, eventually as you said, make the jump to another language if I feel like I need to.
Yeah agreed, it currently wouldn't replace a proper set-up, but I don't think it claims to. Maybe in your example, the web IDE is a microwave x).
Hi, do you have like a simple demo to test how velocity works??
nope, no luck 
issue is the closeMenu() isn't being called...
Yea, codepen and such are great tool, but i dont think about them as an IDE. Whenever used, for teaching for example, the speed of you including react to that exaple is really not an issue...
If you know javascript, you can learn any frameworks faster. 
Everything you described could be done in react world too. But the real difference is that its bundled in-house with vue, but you have to include some library or util for theese things in react by yourself. Ultimately, it depends on your preference. You have Angular where everything is shipped and React, which is more like Lego blocks. And there is vue somewhere in between them.
I can only in react native, i never learn except that
You should also mention that no one changes libraries and frameworks at the same rate as JavaScript developers. We need to show these ML upstarts how it's done! /jk Jokes aside, one major reason why I'm happy to see Deeplearn.js is because JavaScripts available on nearly all computers out there. It enables people to learn key concepts with what they already have in front of them. Just need a solid Udemy course now to cover everything about Deeplearn.js in depth.
Typescript is a help to me, and many others. For me it's not about reducing type errors, I use it because it means I don't have to think about types and structures as much. Most editors will provide auto-completion, and easy definitions at a glance. I think nearly all js libraries, should use typescript so we can benifit from having type definitions for them.
This web IDE is the nicest i've faced so far. Like it. Like that its react baked in and just go. Love that it provides a working URL instantly with hot reload. Scared of the upcoming prices, everything seems too expensive lately. 
I'd like to point out two more benefits, especially when training: federation and isolation. With federation, you can continue training the network based on new data generated on the device, like a distributed computing approach. With that in place, you can turn off sharing your data- and now have an isolated learning system able to tune the model to your personal data without sharing that data with other systems!
The easiest is react. If you know javascript you can learn it in minutes. There is no api, you usually use a single function: `render`. There is no documentation to study because all you need to remember is 3-4 lifecycles and a few jsx semantics. The rest is pure javascript and you solve problems like you always would.
Do you have any good resources where I can read up about this topic? Great point!
Wow, well done. Also, you actually got 92 because you accidentally left #7 of multiple choice undefined! Actually, there should be an alert for that.
I agree it's very long. I mention that you can take it in parts (i.e. over 2 or 3 days) because your answered are saved locally and the timer stops without the tab open (obviously). However I think people want to see their result as soon as possible. I'll think of ways to help provide feedback without completing the entire thing.
I don't normally use script tags, finding out from which CDN to fetch them again, then looking for dependencies, if they support CDNs as well, then fumbling around with sources to change imports into global namespaces, it would be faster just installing git + node from scratch and running npm install on a project. These newer editors aren't hung up in the pre-module era, they understand real code and can cope with dependencies. In some ways seeing them fetch stuff on demand is pretty futuristic even.
Do you have any good resources where I can read up about this topic? Great point!
Have you checked the Performance tab to see what's happening? A friend with linux verified that for him, it happens the moment there is more than 16 code editors. It's not the easiest problem to fix especially when I can't validate a fix for it easily, but I will try.
It'd be good if you could display the results/answers for each question (I really want to know what I did wrong). Any plans on making this project open source?
Yeah, created myself a conditional component so i can go &lt;Whatever if={condition} /&gt; class Whatever extends CComponents{}
MDN seems to have taken sides "JavaScript (JS) is a lightweight, interpreted, programming language with first-class functions. JS is a prototype-based, multi-paradigm, dynamic scripting language, supporting object-oriented, imperative, and declarative (e.g. functional programming) styles."
Have been using prettier ( via `prettier-standard` ) on a few teams recently and it is *amazing*. Cannot imagine ever not using it on a project.
What do you want? "HTML5 canvas drawImage function is not showing up" is not accurate language. Is the function not defined or doesn't it draw as expected? Which devices? What do you mean? 
&gt; It'd be good if you could display the results/answers for each question This is what I'm working on at the moment. And I need to fix the linux bug too :(
W3schools.com and Udemy are the best websites to learn front end web designing...
Paste in the updated code. I’m at a computer now. 
| JQuery, the most popular JavaScript, is so popular that it is assumed that almost all web projects use it. However, most experienced developers are now endorsing Velocity simple because it’s simply…. Better. I don't think it's an assumption that all web projects use jQuery in 2017. At least none of the ones I work on do.
The Canvas Text shows on laptop but not on a mobile device
Unfortunately not, I haven't seen it written up anywhere :( This comes from my conversations with the deeplearn.js team in person. (disclaimer: am a Googler on a different team.) If I remember I'll try and ask around and see what they recommend (or point them here directly!)
That would be great. Thanks a lot!
What is "The Canvas Text"? Also what device type? What browser? https://caniuse.com/#search=canvas
Havent checked, as soon as I started, it crashed immediately. There’s a built in browser for the distro I use, it worked with that, so I was able to try it
it's a meme generator that i created with canvas and it works well on desktop, text displaying on the background picture. now if i view the same meme generator on a mobile device or i minimize my browser screen size and reload, the text stops displaying. 
Pressed the 'start' button, or pressed the button for section 2? If the former, then I'll need to do even more work...
now there's an idea
let appVol; if(userEntry === 13){ appVol = 100; }
If this happens on both desktop and mobile depending on how you resize or load then it is probably not mobile device specific. It smells like you have something in your CSS that hides the canvas on small screens, or maybe your JS logic can't deal with the small size of the canvas. If this really is only on mobile then it could be you try to use a font that is not available on the device. Try to be exact and isolate the problem and a solution will become apparent.
Interactive Data Visualization for the Web by Scott Murray is excellent. A new edition came out this summer that covers D3v4. It doesn't assume too much JS knowledge. As another testimonial, Harvard's data viz class [requires it](http://www.cs171.org/2017/syllabus/).
 const appVolMap = { // add the rest of the options here '13': 100, '20': 150, '29': 200 }; const appVol = appVolMap[userOption];
It was when I pressed start 😭 but maybe try to set up some kind of monitoring or idk, I’m not a good example imo, my machine has all kinds of stuff that can relate to this (like docker is fucking with the network sometimes, etc)
You could calculate large fibonacci numbers. 
Very thorough! Just a heads up, the cascader looks wrong on [Firefox](https://i.imgur.com/TVnmiH9.png)
If you don't like prettier's output, you can change a lot of things in the settings. If that's not enough, you can use prettier-eslint, which runs prettier followed by eslint --fix. Between the two, you have a *lot* of control over the code style. Our company uses the standard.js (https://standardjs.com/) style guide. Since prettier isn't compatible with some of the standard.js rules, we use prettier-eslint to close the gap. It works really well.
Finding large primes
This looks incredible!
Hey, issue was I'm using a different button to close the menu, works fine now! import $ from 'jquery'; import gsap from 'greensock'; /*TASKS: 1) isAnimating - make sure ctas cant run functions while animation is running. 2) Create X for close cta 3) Grow from left - both boxes */ class Menu{ constructor(){ this.$navMenuCta = $('.nav__menu-cta'); this.$menuCloseCta = $('.menu__close-cta'); this.$menu = $('.menu'); this.$navMenuCta.on('click', this.openMenu.bind(this)); this.$menuCloseCta.on('click', this.closeMenu.bind(this)); this.menuOpen = false; } openMenu(){ console.log(this.menuOpen); let tl1 = new TimelineLite(); tl1 .to(this.$menu, .6, {autoAlpha: 1, opacity: 1, ease: Power2.easeOut}); // console.log('after menu open: ' + this.menuOpen); this.menuOpen = true; console.log('after menu open: ' + this.menuOpen); return this.menuOpen; } closeMenu(){ console.log(this.menuOpen); let tl2 = new TimelineLite(); tl2 .to(this.$menu, .6, {autoAlpha: 0, opacity: 0, ease: Power2.easeOut}); this.menuOpen = false; console.log('after close open: ' + this.menuOpen); } } export default Menu;
Ah, I see. What would you think of using it like that? I will need something to keep track of the created `div`s. How would you recommend to do so?
Yes. Even if something in the way, might be outdated browsers, servers, routers and firewalls, it will scale back to polling to overcome it.
are you just looking for it to take a while to respond? can you use thread.sleep() 
You have you think about types way more with a strongly typed language than a weakly typed one. One of the main reasons languages like C++ use types is because of how it manages memory and stores variables. In fact C++ programmers go out of their way to overcome the shortcomings of types with stuff like type casting and templates. There's just no need for it in JavaScript. And if there ever is a need, you can still check types if you want to. You're just not forced to all the time.
Hi Mctrial, In cases where the request pirority is not defined by user behavior, switchmap may not be the ideal solution. You may want to look into the Observable.race operator. Observable.race emits value according to first response. I made you a plunker of Obserable.race in action : http://plnkr.co/edit/KlDjJv?p=preview
Not enough upvotes here
&gt; what if he used a sprite-sheet and just reset the position of the image when the condition is met? &gt; I guess this depends on the size and quantity of images. THIS IS THE ANSWER
# 😭 I guess it's just the large number of nodes for each section or the syntax highlighting... I will split the sections across more pages. Thanks for letting me know.
great! can you expand on how to do this, cause I've just read about it. 
Anyone have any updates on the release date, I'm on chapter 10 (hard chapter) but I'm thinking maybe I should wait until version 3 cause I feel like modules will have been especially updated in the javascript update with the addition of classes and increased ability to control scope. Is it worth waiting?
Because you can embed something like this into exist web-based tools to empower or educate your power users. A solution like this necessarily about you writing code, but allowing access for code writing to anybody who accesses your online places.
Typing fakeAuth.isAuthenticated in the console won't work - react needs to have some way to know that the props/state has updated
Super generalized answer: (sorry no time for actual code atm) the sprite sheet should be pretty simple. create a transparent png or gif with all the sprites (preferably they are all the same size, but its ok if not) Then you can use something like sprite cow (spritecow.com) to open the image and get the css information for each sprite. (x and y) Then you make a div that is the size of the icon and set the sprite sheet as its background div.TheSprite { background-image:url(url) left top no-repeat; } then you generate copies of that div using your js function that would have loaded the sprite images and set the css style of the instance to the correct coordinates of the sprite you want to show '''function gimmieSprite(whichOne){ var theSprite = createCopyOfMainSpriteDIv(); //this will be the main sprite div copied switch (whichOne){ case 'theCase': theSprite.setAttribute('style', 'background-position:' + xLocationOfSprite + ' ' + yLocationOfSprite + ';'); } 
thanks! appreciate it. u/name_is_Syn
It was just a guess based the claimed speed. I usually browser reddit on my iPad, but since you asked nicely, I checked out the IDE in my desktop browser. Turns out I was partly right. You ARE cheating. With lodash anyway. I opened up the network tab on a new project and tried to load the lodash dependency. The lodash code never came down, only a description of the request. I then found that lodash is preinstalled on page load. This is either cheating or a glitch. If not cheating, it's because you use lodash too and you allowed it to leak into your IDE's code environment. Here's a video demonstration: https://youtu.be/ojNpzn3KvYA To be fair, you are downloading my other test, seamless-immutable, from unpkg, not your own servers.
[removed]
I'll raise a PR/Issue about this shortly, but can you change all your font-sizes to at least use REM, so that you can easily override the body font-size without having to use Less/Sass?
I don’t see a reason to stop with the 2nd edition. You will still learn a lot
&gt; Bridging the gap between web developers and machine learners There could be other educational implications too. We might be able to create more streamlined web applications for people to learn machine learning, without having to install python and ml libraries.
Time picker only allows first 5 selections on Android phone
Sure! I'm gonna take a look and make some projects to check.
This looks really good! It would be even cooler if you added some themes.
I could do that, but I'd like to present a result to the user - the app should be interactive, if simple. The example I linked uses an nlp library to do sentiment analysis on a provided article. I think that might be already a bit too complex, as the user would have to provide an article. Ideally the user would provide some very simple input, like a string (a link, a word, etc.) or a number. Then we do something complex to that input with a very easy to use library or a copy-paste algorithm.
&gt; ading this correctly, the only one that is even worth considering is Hoodie? I've been using Parse Server (openn source ) and it seems very stable and alive. There is a great community around and the upgrades are very frequent.
The resource you linked says: &gt; External style sheets don’t affect DOM, and so DOMContentLoaded does not wait for them. &gt; But there’s a pitfall: if we have a script after the style, then that script must wait for the stylesheet to execute It also mentions `defer`: &gt; Scripts with defer execute after the document is loaded and parsed (they wait if needed), right before DOMContentLoaded So it sounds like `defer` *forces* the script to run right before `DOMContentLoaded`. If that's true, Chrome seems to have the correct behavior, while Firefox appears to load things out of order, or doesn't respect `defer`.
Stop trying to cheat on the Cyber Discovery Challenge.
I stopped on the first question that expected 1 answer but 2 were valid.
Thanks this makes a lot of sense.
Looks like it borrowed quite a lot from Semantic UI
The data-tables stuff looks pretty slick.
https://github.com/third774/image-focus Roast me! XD
Certain questions are partly ambiguous on purpose. That's why it says "which *best* describes". This is a tactic which truly tests the examinee's knowledge about correct terminology or behavior.
OK, but for # 3 "Which of the following for loops will iterate enough times to retrieve every element from an array with a length of 10?" B, D, E an are acceptable though B is the common sense correct answer.
Only B is correct... D iterates 11 times, ending at 10th index (not 9th! it says length of 10) E iterates 11 times, same as above
Even The Most negative feedback is appreciated !!! :) https://github.com/terotests/Ranger
Never thought of it like that. boxes and lines on a whiteboard doesn't inspire much in the annoying early days of a project
No, this means that you had already installed lodash, hit save, and it was persisted of your vendor bundle. If you _install_ lodash (either at a new version or in a fresh project) with chrome devtools open, you'll see it goes out to network to install it. smh lol
You have a select search. That is a good feature. It's nice but it would be better if we could define a function to return the search results. Sometimes its nice to be able to use a levenshtein compare.
Walk a very, very large graph. 
Slam
It’s still desktop based. I wish they’d put effort into making it responsive. Nice lib though if desktop is what you’re looking for.
Have been toying around with it and have never seen that behavior. Where is it documented?
Great job, thanks!
I've added the ability to see the correct/incorrect answers now. You can't see which question it refers to yet (you will have to go through the test again and check the #), but that will be added soon..
What about taking in a string of distinct letters and creating all the possible words from rearranging them. The possible outcomes are N factorial. Additionally, if threading is concerned the problem above can be applied in a parallel fashion for threading.
You clearly aren't all for using tools. Your statements sound like you are predisposed to considering all tooling support to only be something you'll use "when required". Maybe you just aren't being very clear but it sounds to me like you have a bias against adding anything to the development process. I'm not going to sit here and make conjectures as to why that is. But your opinions are both condescending and uninformed.
The pro in the admin template implies a paid template eventually (to me anyway). Anyone want to clarify? Been looking for a well maintained react admin template with components.
Was about to say, it looks like a Semantic UI clone
I don’t think this has a canonical name yet, or at least nothing where if you utter the phrase without further explanation most developers would know what you were talking about. How is it done? It depends. But this is typically not something you can do completely on the client side, because it requires visiting the URL being linked to (and most sites don’t allow cross-origin Ajax). There are a few standards out there: * [Facebook Open Graph](https://developers.facebook.com/docs/sharing/webmasters/) * [Twitter Cards](https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/markup) (twitter also understands Open Graph markup and will use it if needed) * [oEmbed](https://en.wikipedia.org/wiki/OEmbed) (_not quite_ the same thing, but close enough to warrant a mention) 
Noob question: what *is* this? The top half of the article is lots of bragging, not much explaining.
&gt; By default, a long-polling connection is established first, then upgraded to "better" transports (like WebSocket). -- [socket.io docs](https://socket.io/docs/client-api/#with-websocket-transport-only) In fact, as stated there, the _first_ transport tried is polling. If possible, then it upgrades to websockets. Then, if sockets fail for whatever reason, it downgrades again to either xhr-polling or jsonp-polling.
I would create an object in the create function with all the rectangle in an array on it, plus some methods expose to use them. I'm imagining something like this: https://jsfiddle.net/Lae1tbnu/1/ You can always go fancier with classes and stuff later, but I'd like this idea as an incremental step. :) 
Awesome thanks. You sent me on the right path. I believe these features I'm thinking of are the [Open Graph protocol](http://ogp.me/). Digging into spotify's html head tag, I see stuff like this: &lt;meta property="og:site_name" content="Spotify"&gt; &lt;meta property="fb:app_id" content="174829003346"&gt; &lt;meta property="description" content="A playlist featuring Milo Mills, Flight Facilities, Shawn Wasabi, and others"&gt; &lt;meta property="og:title" content="future bass, a playlist by pantstown on Spotify"&gt; &lt;meta property="og:description" content="A playlist featuring Milo Mills, Flight Facilities, Shawn Wasabi, and others"&gt; &lt;meta property="og:url" content="https://open.spotify.com/user/pantstown/playlist/5096vMyiSlQSKNad31hpvi?si=pryO0601SGa2xqcjGUR-8Q"&gt; &lt;meta property="og:image" content="https://mosaic.scdn.co/640/862c5cdf11a4e869df6e3b77b6bf6de5a3c1a63d6a3358d1f927e0bf9b624451f9ea4e768385604eff7e01afc0ce87776bb5870388733d79b25fd823c2c44ccf343a9eb13d953907da188651e825570c"&gt; &lt;meta property="og:type" content="music.playlist"&gt; From there, it's up to the individual app rendering the link to display that info as it sees fit. 
Never used this before but that would be an absolute deal breaker for me. Do you use Bootstrap or something else? 
It's a collection of React components ready to be used. It's free, good looking and works well with TypeScript.
No demo, no link, no use.
If it sounds like bragging, it's probably an issue with translation. Most of the maintainers are chinese.
Follow the code. `isVowel(str[0])` is going to return either 1 or 0. `countVowels(str.slice(1))` will call the function with the first character removed.
It only checks for the first character and gives the rest to the recursion tail. Every call in there will report back the sum of the subsequent calls.
Cool! Thanks for the suggestions on this. Lots to learn :)
There is https://mobile.ant.design/ too, which is the mobile focussed, cut down version. I think they have the right philosophy here - what works on desktop is bad on mobile and what's good on mobile is bad on the desktop. To deliver a really good experience on both you actually need different interfaces, and it's not just a matter of resizing stuff and hiding a few things, the use cases for mobile and desktop (web) apps are often totally different. So, they offer 2 frameworks.
I don't recommend Node for ETL tasks. While it's pretty awesome to bust out the logic in, it turns into a memory management nightmare. Python has worked far better for ETL / huge-memory-footprint tasks for me. Outside of pure node, I recommend something like RabbitMQ as a replacement for a Go channel, which makes it easy to throttle computation (prefetch, etc) and scale out to multiple machines easily. Plus, in cluster mode, I have yet to find the limit in terms of number of message in a queue in AMQP (Have had tens of millions of small messages in queue without issue in production on a large scale application (alexa top 20)). The excellent `amqplib` is a nice npm module for working with RabbitMQ. Go channels are good too, but fundamentally you should be considering a task queue here, since it sounds like you need strict delivery rules, probably could benefit from multiple physical machines, and want to store an arbitrary about of stuff in the queue. A purely in memory task queue is gonna be expensive and I doubt extreme speed is a requirement here (since its ETL type work), so Rabbit's "lazy queues" (ie: queues that flush to disk) seem a perfect fit.
so i have to start afresh again. i tried copying the localStorage item to FF but it did not work , the seconds localStorage item worked
https://www.reddit.com/r/javascript/comments/7i11i3/need_recursion_help/
I agree with this guy. Why would you do any heavy processing like ML on the frontend. Process it on your server then send a simple response to the browser. I work at an AI/ML company, showed this to my coworkers and they laughed. 
This seems really solid. I'm not even sure I have any personal opinions regarding the coding style.
Good to hear! Ping me with a repo link when you get around to it!
its starting to make sense, i'm missing how it knows to increment each time it hits a vowel though
what part of the code makes it increment? 
I'm curious how well this is done. I looked at a super popular UI kit for Vue in the style of Material Design, and the over-abstraction was insanity. Does this have components for each of their documented 'components', or Vue components for every little part of their documented 'components'?
Their documentation is really bad if it isn't improved. Older versions of socket.io starts with longpolling and uppgrades it way up to websocket, it can be configured to only use websocket. Newer socket.io versions starts with websocket and downgrade to long polling. You can see it in the network tab in chrome how it behaves on different units/browsers
Hi — this was my talk, I'm glad you found it interesting. The intent isn't that you'd literally write booleans in JS this way, but rather to show how LC can begin to build up a functional language from scratch. Real languages (Scheme, Haskell, etc.) actually work this way – for example, Haskell compiles to System FC which is a typed lambda calculus, before being compiled down into machine language. Now, compilers also take "shortcuts," e.g. numbers will use hardware-based math where appropriate instead of being literally computed as Church Numerals. But the further you get into LC, the more practical results you begin to glean. Did you watch part II? https://www.youtube.com/watch?v=pAnLQ9jwN-E — it is nominally about numbers in LC, but also shows composition, data structures (through closure), benefits of consistent interfaces, more currying, etc. Still very academic and abstract, but beginning to show useful tools even in high-level languages like JS. Getting comfy with LC doesn't mean you'd literally write LC into application code, but rather to begin to think functionally, specifically with regard to things like currying, closures, and composition. In other words, it's a bit like getting better at playing guitar songs by studying music theory. Very indirect, but also not useless.
oh thank you for your help. finally understand.
Was thinking http://ant.design
just to make sure i got it, so when it goes over a vowel, isVowel(str[0]) will return 1. then when it hits another vowel the previous 1 will increment to 2, correct?
is your text dynamically or statically positioned ? If it's dynamically positioned, take a look at how you calculate it's position. You can try to draw a Line, text... to a coordinate that you know is visible when your screen size is under x width/height. Dont Know your context, but try to draw somethings at 0, 0. If it show Nice ! Now, take a look where you drawing your text by using a breakpoint in Chrome debugger (F12, source tab, your js file, go to the Line where you do your filltext and Click the Line number and execute your code) . Chrome debugger is your best friend to know what happens at a certain point in the execution of your code.
It was a new project in an incognito window.
https://github.com/redom/redom
Solid post, thanks!
disagree in that pre-deployment comments are useful for teams operating in an agile environment, presumabley collaborating through git, but agree that upon deployment code should be clear and concise without comments
If the other radio *was* working with `name`, why wouldn't you use `name` and `getElementsByName` for *this* radio? Use `name`!
https://github.com/cynicaloptimist/improved-initiative
Factorial would be fairly straight forward to demonstrate complexity. There’s a decent amount of implementations out on Stack Overflow as well. Display end-start time. Alternatively you could show this in some sort of nested loop or copy operation for immutable data types. EDIT: sorry for multiple posts. Reddit app is buggy.
Physics simulation (easy one being springs), maze generation (generate some images or text files if you want it to go slower), brute force puzzle generators and solvers (word find, soduko, tetravex, 15 square, etc)
[Convincing](https://i.imgur.com/parFvq2.png)
https://www.reddit.com/r/javascript/comments/7i11i3/need_recursion_help/dqvf5k3/
Can 100% confirm that I initially tried using node, but now use python or bash for all ETL work. Node runs out memory quite quickly -- anything over 2-3 million records and you'll run into `heap out of memory ` issues. If you insist on using node, you'll likely need to increase memory bandwidth: https://stackoverflow.com/questions/38558989/node-js-heap-out-of-memory
It’s important to know the particulars of the syntax for the language you’re working with, it’s not important to make code fit on one line. 
I'm sure people will disagree with me hugely on this ... but yes. If you think you have a command of the English language, a solid and well-written pun or limerick is a good test. The same seems to be true of programming languages. Then again sometimes I try to see what the longest program I can write to result in absolutely nothing is.
inside reverseArray, newArr starts as just an empty array. so it concats (or adds to) onto a blank array. And it adds one value the first argument of splice is how many, and the second is at what position,... so if the passed in arr has length, then remove the first thing and put it on a new array then call the same function which just does that until the array passed in has no length, at which point it returns it, and therefore you have a reversed array since conact just keeps stacking them on the end and you're pulling from the beginning. 
As far as I can remember, the DOMContentLoaded does not care whether all the scripts have been loaded. DOMContentLoaded will fire as soon the the html is parsed. Did you try "onload" instead of DOMContentLoaded either window.onload or window.addEventListener('onload',...) ? If you need to run something encapsulated inside the defer (pseudo code): &lt;script async defer&gt; (function(){ //internal variables here function x(){/*whatever you want to run here*/} window.addEventListener("onload",x,false); }()) &lt;/script&gt;
Not seeing the usefulness of this from a user experience point of view - you are putting a lot of cognitive load on a user. Aside from that, I think the **only** way to do this would be with iframes. Loading a full website in any other way is beyond restrictive, it's impossible. CORS means you won't be able to use JS / Ajax. In theory you could scrape each site on the server and rebuild it, but that's beyond overkill.
makes perfect sense, thank you
the vue.js graph goes back to 2009 - but initial commit was apr. 2016? https://github.com/vuejs/vue/commit/a879ec06ef9504db8df2a19aac0d07609fe36131#diff-a084b794bc0759e7a6b77810e01874f2 maybe I'm missing something there, the graph does show questions about it before initial commit. hmm
If you can't see the image (mobile) here are my logs... luckily im not using php or sql ::ffff:127.0.0.1 - - [04/Dec/2017:21:59:21 +0000] "GET /w00tw00t.at.blackhats.romanian.anti-sec:) HTTP/1.1" 404 180 ::ffff:127.0.0.1 - - [04/Dec/2017:21:59:21 +0000] "GET / HTTP/1.1" 200 39 ::ffff:127.0.0.1 - - [04/Dec/2017:21:59:21 +0000] "GET /setup.php HTTP/1.1" 404 148 ::ffff:127.0.0.1 - - [04/Dec/2017:21:59:21 +0000] "GET /scripts/setup.php HTTP/1.1" 404 156 ::ffff:127.0.0.1 - - [04/Dec/2017:21:59:21 +0000] "GET /admin/scripts/setup.php HTTP/1.1" 404 162 ::ffff:127.0.0.1 - - [04/Dec/2017:21:59:21 +0000] "GET /admin/pma/scripts/setup.php HTTP/1.1" 404 166 ::ffff:127.0.0.1 - - [04/Dec/2017:21:59:22 +0000] "GET /db/scripts/setup.php HTTP/1.1" 404 159 ::ffff:127.0.0.1 - - [04/Dec/2017:21:59:22 +0000] "GET /dbadmin/scripts/setup.php HTTP/1.1" 404 164
[removed]
What you are seeing here is generated by the google custom search. It's been a while since I've use it, but it appears you put a google script on your site, maybe point it at a input on the page, and it does the rest, loading the modal fetching results and including the results in the page. There's likely a slew of options for look/feel and the general layout. Login to the GCE site and see what is available, there might be something you like more that doesn't behave the same way.
defer and async don't work in IE, put script at the end of body is the only way cross browser 
Who doesn't love "ozens of Reusable Comp"s??
I like this a lot. Looks really simple and intuitive to use compared to redux!
Brings me so much happiness in my Ha
Defer tags don't have to wait for styles to load. Defer tags are all run right before DOMContentLoaded, and DOMContentLoaded is not blocked by stylesheets being loaded. From that, Chrome's behavior is what I would expect. The DOMContentLoaded event is blocked on the loading and execution of defer script tags. The DOMContentLoaded event is also blocked on the DOM parser. The DOM parser is blocked on classic script tags. Classic script tags are blocked on stylesheets. With that chain of dependencies, maybe the following gets the behavior you are looking for: &lt;head&gt; &lt;script defer src="defer-script-that-depends-on-stylesheet-to-load.js"&gt;&lt;/script&gt; &lt;link rel="stylesheet" href="stylesheet.css"&gt; &lt;script&gt; // Some dummy inline script that will block DOM parsing, and therefore DOMContentLoaded, until the previous stylesheets are loaded &lt;/script&gt; &lt;/head&gt; I haven't tested the above but I think that effectively gets what you are looking for.
Thanks! Feel free to make any suggestions you have :)
IE10 and IE11 both support [defer](https://caniuse.com/#feat=script-defer) and [async](https://caniuse.com/#feat=script-async). You cannot rely on [defer ordering in IE &lt;=9](https://github.com/h5bp/lazyweb-requests/issues/42), but if your scripts are async style and ordering is not necessary you can use: &lt;script async defer src="my-script.js"&gt;&lt;/script&gt; 
A couple of things - 1. Make sure all of your capitalization is correct. CamelCase. Make sure every new word starts with a capital letter. 2. When you call SquaringandCubing() you aren't passing any variables, so there's no need for the x. 
x in html is undefined. Don't pass it to function. Move x = document.getElement.... Inside function. 
The first version of Vue (I think it was called 'seed' then ) was released in 2014. Not sure about that repos commit history. I'm guessing some version of Vue could have existed before 2014.
I like to buttfuck!
One liners start out really intimidating, but just keep playing with em. Sometimes they're great!
See https://security.stackexchange.com/a/40293
Waiting for the window load event does allow your script to wait for stylesheets to be loaded, but the problem is that you end up waiting unnecessarily for all other resources to be loaded as well. At least for this case I think putting a classic script tag to [block DOM parsing at the right times](https://www.reddit.com/r/javascript/comments/7hz4bl/chrome_domcontentloaded_doesnt_wait_for_cssom_in/dqvvhsx/) can get the desired behavior.
You could run linpack on a small problem set. [howto](https://www.google.com/amp/s/www.howtoforge.com/tutorial/hpl-high-performance-linpack-benchmark-raspberry-pi/amp/) 
No, it is more important to understand the language and also understand that the code WILL need to be maintained (maybe by you, maybe not) at some point. Clean code &gt; clever code. One liners are rarely readable and clean (looking at you regex!)
If anything, it seems like somewhat of a mistake to couple it so tightly to Preact, since someone might want to use it with another view library. Might be a good idea to split out preact-related stuff to its own file, so someone could import it like `unistore/preact` or something, then someone else could make bindings for other view libraries. Would you consider doing this in the future? Actually, I wouldn't mind making a pull request to do something like this myself either :D
Thank you!
I don't see why it would matter. Lines of code is a pretty artificial metric. There's a huge difference between what's possible in one line of C vs one line of Clojure or similar. I think it's much more important to understand how to use a language expressively and clearly so that anyone reading it can understand the code quickly. Something like: let report = someLongStringListingURLsIWantToScrape .split(',') .map(axios.get) .map(processTheResults) .reduce(createTheReport, ''); is a lot more readable than something like: let listOfSites = someLongStringListingURLsIWantToScrape.split(','); for (let i = 0; i &lt; listOfSites.length; i++) { var report = '' [ imperative nonsense ] } return report The first is pretty immediately obvious in what it's doing, the latter (depending on the precise imperative nonsense) is probably a lot messier and harder to understand.
Google "floating point error," your are about to go down a rabbit hole that demands more attention then a few Reddit replies. Luckily there are lots of resources or there. Good luck.
[removed]
They finally made each component modular so it doesn't import the entire global CSS. Hugely happy with that change, their components are very well made with great APIs Previously, if you imported any component, it would import all their typography, etc, so you'd end up with different coloured links and a bunch of other stuff you'd need to override at the global level.
You are spot on, I am in the process of trying to do something similar in Angular.js aka 1. Sounds like it would work great except for the connect part. Would need to figure out a way to trigger digest on state change or something like that.
CNCjs 1.9.12 Released https://github.com/cncjs/cncjs/releases/tag/v1.9.12
What did I just read?
https://github.com/wbwelch/TriviaGame
Says the JavaScript of its typeless variables, to the java variable
A cry for help.
Says the spider to the fly. 
Hahaha, it’s interesting to see programmers land on problems that are core to our knowledge as CS majors. You’re ok, this isn’t an error, this is expected output. As the other poster said, this is due to the way floating point numbers are represented in binary, and it is why you should never compare two floating point numbers with “==“ unless the language takes the machine epsilon into account.
I wonder how many of these millions downloads are people trying to learn these frameworks. Vuejs for instance can directly be referenced in html and off you go. It can be applied to you existing app without extracting the html to a jsx or a component html file. If vue forced that of users, I'm pretty sure the numbers would have been totally different.
Are you looking for Java wizards or JavaScript wizards?
Fuckkkkk I only knew about like half of these. REST is dying? Offline websites?? Serverless what? Fuckkkkkk so much to learn 
If that's actually the case, then why not just record a quick screencast repro-ing your claims to prove that I'm a POS liar? Unclear why you're choosing to argue / discredit, assuming you're not in the wrong of course :)
I'm looking for individuals skilled in JavaScript, which I know nothing about. Specifically an individual with book or literature recommendations relating to JavaScript. 
I'm all for using tools. I'm not for using all tools. There's a difference. As far has condescending and informed goes, grow up. Im sure you can handle a difference in opinions on programming was out resorting to insulting the other person and getting offended and precious.
I have seen some sites use these types of animations, but they are often really laggy. They look cool and all but when it's on the web they just get choppy og there are many og them. But on native it works nicely so there you can add more. Not that you should not do cool animations - just don't base your whole site on them.
I was drowning in JavaScript in my bootcamp web dev course until I read this book. [JavaScript and JQuery by Jon Duckett ](https://www.amazon.com/JavaScript-JQuery-Interactive-Front-End-Development/dp/1118531647/ref=sr_1_1?ie=UTF8&amp;qid=1512632078&amp;sr=8-1&amp;keywords=javascript+and+jquery+duckett) 
OK, you have a typo in your text then: Java -&gt; JavaScript
At work, we are using [Lottie](https://airbnb.design/lottie/) for both web and native mobile apps. Basically it lets you create animations in After Effects, then you can export them to a JSON file, which Lottie can use to reproduce the AE animation without any hassle. We also have animejs in our repo at the moment, but we might skip over it in the future, good stuff too, it's just Lottie seems to be enough on the long run. I'd also add that it's not worth stressing over Dribbble posts. It's full of good looking stuff that are supposed to be nothing but showing off the skills of a designer. Lately I'm seeing a lot of submissions that would be a pain in the ass for both the users and devs alike, but what's really mind-boggling are the stuff that simply doesn't make sense (like designs that look good with a completely white iPhone X front face - with white notch, I mean, what the hell).
At the beginning I thought that I could make a better salary by staying away from web development. I was right, I did get better paid compared to web devs. Later I saw the web growing even more, and salaries going down as well... It was clear that more competition was translated into lower salaries. Thankfully I realized the not so obvious part: the more competition / market saturation there is, the more mainstream a tech stack is and the more you must learn that. If I had stayed away from competition, my skills would lack experience-knowledge on the technologies that move most of the software world today. - A higher salary - Keep yourself employable You can't work on both goals at the same time. At least while coding for a living.
Ok cool, good to know. I've been experimenting with both Anime.js and Lottie. Made a few basic things and can see the potential for both of them. Haha yes I agree about some of the work that trends on Dribbble. Looks great but would be incredibly painful to build and a bit hard to judge the UX when they have no context. The UI animation on codrops that I linked to seems cool though. It allows users to view the content without a page refresh. In my opinion the animations do look pretty cool, without negatively affecting usability. I tried breaking down the code example but didn't get too far just yet. Started reading a few more Javascript resources to hopefully get a better understanding of what is actually going on.
It's not scraping, that's probably someone scanning your website for vulnerabilities with Metasploit.
&gt; If that's actually the case, then why not just record a quick screencast repro-ing your claims ... um... to quote myself from 15 hours ago: &gt; Here's a video demonstration: https://youtu.be/ojNpzn3KvYA
Hmm, you have been doing this for a long time. You could try and figure out what you don't like about React? Is it purely JSX or more than that? It could be that you are too much set in your ways to get used to React -- take a course and find out. You could also try alternatives like Elm or Cyclejs. Also, there's more than front-end JS in programming; maybe pick up a new language or give the back-end a shot.
Thanks for the input. Is that the difference then? When apps are native they can afford more intensive animations compared to web? Agreed about not overusing this stuff. I basically want to animate content in and out when approriate to reduce cognitive load during page transitions and that kind of thing. Would be col to have that native app experience online as much as possible.
Floating point math. Basically there's only so many bytes available to represent any given number so estimations are made. It's solvable, in theory through using more memory... in practice, using a library for performing mathematical operations. The obvious example is `.1 + .2 =&gt; 0.30000000000000004` I've used [BigNumber](https://www.npmjs.com/package/bignumber.js) and [mathjs](https://www.npmjs.com/package/mathjs) in the past.... both work pretty well.
Wow. Lottie seems nice!
From my experience with native it can handle transition type animations better than just plain web. Although using a library like angular with their routing option you might be able to make a smooth transition between pages as seen in the example you provided. When using a native app you don't have to rely on a browser to process all your code. When it comes to websites then you have to rely on a browser and then it can get quite choppy at times. I would recommend using a framework like ionic which makes the app feel really native, or if you want something more lightweight then you could use Angular or maybe Vue and build on to them.
and how is this related to php or mysql? If anyone lets setup and admin areas unprotected and accessable for anyone on the web, the admin has failed. no matter what technology or language you are using. 
Yes exactly. I don't want to wait for all images to be loaded because this would be way too long. I'll try your suggestion asap!
The pretty much ultimate document: [What Every Computer Scientist Should Know About Floating-Point Arithmetic](https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html) Note the "scientist" in the title, accordingly, this is rather long and demanding and not like an easily digestible blog post. This is a section from the "Numerical Computation Guide" created by Sun.
&gt;I don't like jsx or react. It feels like a framework I used 15 years ago when we converted XML to xhtml. I don't really like what JSX looks like, either, but it's probably not as bad as you think. &gt;I find it difficult to even find the god damn html in our react app. This definitely shouldn't be the case. You're either going about something the wrong way, or something is seriously wrong with your codebase (or I'm misunderstanding what you mean by that). If you've been doing this for so long, it can take some time to get used to the mental model of React and component-based frameworks in general. Maybe you just need some time. &gt;Angular I've given up completely on. Because...? &gt;Vue is the only one I really like but nobody is hiring for it yet. This is obviously easier said than done, but you can pick your own stack if you freelance and can sell yourself well enough. There's more ways to get work than looking for local jobs in a specific technology. &gt;I'm debating if I should get out of programming altogether. Been doing it 20 years now and its no longer enjoyable. Don't take this the wrong way, but it sounds like you have much bigger problems than not knowing which frontend framework to use. Are you a full-stack dev? Maybe try a lateral move into backend development?
It's already completely different again for start of 2018. Now template strings are the new React (HyperHTML + lit-html) which also supplies the functionality of WebComponents. CSS is JS is sidelined by direct injection, and now it's the battle of the tree-shaking packers using vanilla JS and standard HTML/CSS files that are intercepted using ES2015's static modules. This shit's a wild ride, but it's coming to a conclusion as you can tell by the increased emphasis on vanilla JS because it's finally working enough not to need libraries over cess pits. Thank you jQuery, you did a great job back in the day, we'll never forget you (alas).
Wow, this does indeed fix this strange behaviour! After adding a script tag with dome dummy inline code like console.log, the deferred script tag gets executed after the stylesheet fully loaded in Chrome! Thank you!
Thanks for your answer. Luckily we don't need to support older browsers (IE 11+) so I wasn't thinking of a more cross browser resolution yet but thank you for pointing this out. :)
https://codepen.io/hone/pen/azRzbe
https://codepen.io/hone/pen/azRzbe
How's your experience with it?
Hm yes maybe I misunderstood something. As I tried the test case from @rajsite which fixes my issue this could be really the case. But it's hard to identify. I hope the chrome dev team is clarifying this issue (https://bugs.chromium.org/p/chromium/issues/detail?id=792420)
Vue is extremely popular, it should get to hiring point at some stage. Look around for a startup near you?
The documentation is probably the worst i have ever seen. I wouldn't know where to find anything regarding internals other than in the github issue tracker. We use socketIO because some of our partners have very restricted networks that don't allow websockets. 
It could be just bias. I am in it for 20 years as well coming from desktop front end. I think the web is in its golden age, programming is finally fun again. &gt; I find it difficult to even find the god damn html HTML is an artefact. You cling to it and you will suffer. If you view apps as compositions made from modular components, then there is no problem. HTML was a document interface, it had no business in the first place attempting to realize complex applications. React, vue, angular and all the other frameworks put markup into modules, the days where you had this one gigantic blob of markup are thankfully gone.
You Don't Know JavaScript https://github.com/getify/You-Dont-Know-JS Read it. Multiple times
it's reddit masturbation
but even in case of PHP you would have had restricted access to these files, right? - what's the actual vulnerability they expect? free access to .php files? 
Hi /u/dattyGiraffe, jQuery doesn't let you set a value like that, you need [.val()](http://api.jquery.com/val/) instead
i like you - take my upvote
Here is my vanilla approach: https://www.reddit.com/r/javascript/comments/7h2p4s/thought_experiment_designing_a_vanillajs_frontend/dqp6062/
How is it a rabbit hole? If you know how fractions are represented in binary, you understand why it happens. And that's pretty trivial...
&gt; I don't really like what JSX looks like, either, but it's probably not as bad as you think. I hated JSX until I actually tried it, and now I love it. Unfortunately, it seems like the OP already uses it at work, and still hates it. Unless the app is poorly structured, though, I can't imagine why he's having such a hard time finding the HTML in their app, though. If anything, I'd say that JSX makes it easier to find the appropriate HTML, and if all else fails, my IDE has a really, really good search function. (Which is how I get around our current code, while we switch over to React at work.)
the 404 shows that it's not scraping. this is just a new website owner getting excited at the presence of a bot which they don't understand the actions of. each 'hit' is checking for a vulnerability - just search for each filename. the POST one's are the exciting ones!
This isn't core... Not even by the long shot... To anyone with CS major it's common sense and pretty obvious. I'm not even CS student, Multimedia, which is pretty much, well, dumbed down version of CS to put it lightly... Well, we all make mistakes, but that's not what we are talking about right now. And we got all that shit in first semester, those are simple basics that everyone who is a "programmer" should understand... You aren't a programmer if you don't even know that floating point values are just approximations. I'll just assume that you're in your first year of CS, because that's where it might look like it is "core", otherwise I have some bad news for you...
Its rabbit hole because once you dive into details, you will never see floating point arithmetic in code as an simple task and you will always suspect potential errors in every line of code and logic concerning FPA :)
It is as simple as maths. There's a reason we use `3.14159` even though more digits are possible (in JS) We just deal with it and take an approximation.
Shorter code is not always a better way. Shorter code can be hard to understand and perform worse then a longer solution. But less lines means less to worry about. Make your code readable first and then clever and fast.
Neither i had problems, but i have degree in CS, so i encountered theese kind of things there. But can imagine, if somebody dont attend university, they are metaphorically going i bit into the rabbit hole of CS, since its not only usual copy&amp;paste problem :) About precision. I DID some minor issues with precision in JS once. When working on some timeline, where divs were absolutely positioned proportionally to their timestamps. And with timestamps, some math operations can result in losing some precision. But quite edge case, agreed.
Even if you didn't have CS degree, you still must understand those things. CS degree isn't some sort of bonus knowledge, it is *main* knowledge, sort of, it's *Computer Science* for a reason. CS degree is foundation that will help you learn further. Things don't work differently just because you don't have one.
My pleasure. One thing to point out is that I often find people crippling the 'onload' event by adding script/link tags to the html that does not in principle need to wait for DOMContentLoaded nor the load event itself. If you have really large images, other files or twitter/google + scripts I suggest adding them dynamically AFTER the load event (and even send the proper cache headers from the server for those large images).
 &gt; Math.log10(Math.abs(1.00e15)) 15 Works on my machine (Chromium &amp; Firefox).
i've been programming professionally for about 11 and a half years now - you don't need to know most of this nonsense. keep writing good code that works and you'll be fine and know when it's time to switch. the js community is just really into trends i think
&gt; I feel like there have to be some, otherwise JS wouldn't be so widespread. It was in browsers. The web got big.
&gt;What advantages of JS am I missing? why do *you* like it? this is a much more important question than "what is good about javascript." figure out what about javascript that does it for *you*, then you don't have to get into a discussion on its merits or warts. you can say the reasons you like it. if you can't find many reasons, or the reasons you find are shallow, it might be time to branch out. either way, knowing yourself will help you figure out what to do next in your career, in projects, in learning, etc and will sidestep all these "this language does this so it's better" and reframe the conversation around "here's why i use this language" which feels like a friendlier way to talk about this stuff. 
This looks really clean! But just like the others said, would you consider making `connect` modular? Reduxes greatest strength is that it isn't tied to any particular lib. It can be a little verbose sometimes and every now and then action-types or time-travel aren't needed, it would be awesome if unistore could replace it in such cases, but not if it's tied to preact. 
At one point everyone ends up losing interest in what they do, given enough time. But the key to confronting this situation is understanding why this happened to you, with your particular circumstances. Sometimes it is because you've been doing the same thing over and over. You have that thing really well mastered. But sometimes the world changes and doing that thing no longer has the same impact it had before. Maybe it's just that it isn't that useful anymore, or that the world now wants a different thing. Other times you do evolve with the world, but then this evolved way of doing the thing is not as “fun” as the original way. Or it could be that you simply want tobdo a different thing. The feeling of tiredness is similar in all cases, but the solution must be very different in each. I understand your situation. I've been through it a number of times and I'm in it now. I have my own circumstances and I understand them. What are yours? Are you aware of what you want to do, of what it's tiring, of where the source of the problem lies? ---- Now, you specifically mentioned UI. After 20 years, I'd think you should be able to take on roles which may open some ways out. Do you have architectural responsibilities? Or maybe educational ones? I won't mention the obvious 'manager role', but those two, may be good ways to evolve. Teaching others may be fun for you. And focusing on some architectural concerns may open some new interests. You may still be doing front-end work, but not specifically UI, or not only. I completely understand not wanting to fall into the _trendy framework chase_, but you have to agree that some of the _ideas_ behind some of them do have some interesting merits. Someone mentioned Cycle.js, for example. It's core concept is terribly beautiful. Other frameworks or libraries may be rather ugly, but they may still have interesting bits. With your experience, I'd think you **don't** need to just follow whatever trend someone comes up with and use React or Angular just _because you're told to_. I mean, you can if you want, but probably you should be calling the shots, at least to some extent, if you feel confident doing so.
Thank you for this! We covered a lot of this in school, but it's always fun to read! I understand the issues in floating point arithmetic, so it would make sense that other numbers would be affected by this. Why is it only the number 1.00e15? Is it just that the maths are that complex?
Assisted generation of commit messages https://github.com/selfrefactor/commit-message
They first scan to check if a given script is available, then try to exploit it with malicious payloads (sql injections etc...)
I'm sure phpmyadmin &amp; wordpress are targetted only because they are prevalent, not because they are insecure by design. However, i spend some time looking at my service logs and it has turned me off installing any of these packages ever.
There are so many 'organic' things about JS that you can do on the fly which other languages will frown upon and won't let you do it. - Aggressive coercion is a good thing if you know what your doing. - Again not being strongly typed is also a good thing if you know what you are doing (although people use this term in the wrong sense). One of the most spectacular things about Js is its prototype based inheritance. You can do so many funky things with it and it is more 'agile' than classes IMO. Think for a sec, it is one of the few languages that you can do !(NaN === NaN). Many people coming from 'pythonic' background will not like it, I love it. As I said, Js has this 'organic' thing about itself --&gt; It grew steadily AND hectically the last 10 years. And as Nassim Taleb said, anti-fragile entities mostly has this 'organic' component.
think about how easy it is to get started with JS compared to compiled languages. can write code without an IDE and instantly run it with node or a browser across any platform you want.
What does this have to do with JS?
If the one liner clearly expresses what is doing then yes. In an environment where another developer might have to read and understand your code, brevity for the sake of brevity alone should be avoided. Imo
The nice part *used* to be: * zero compile * writeable in a note editor * run on any computer * not strongly typed * automatic garbage collection * able to be learned well enough in a very short amount of time. * free or nearly free in terms of tech debt or dollars
"Use frameworks, frameworks make things easy and lightweight!"
/r/IAmVerySmart or /r/GateKeeping .. can't decide
So it’s something every CS major should understand since it’s common sense and obvious, but it isn’t part of the CS core of knowledge? Makes sense. 
Huh, guess I should tell my boss to toss all the projects I've worked on for the last six months since I didn't know that floating point values are just approximations, and I am therefore not a programmer. 
I don't know NOTY, but they say "NOTY v3 is NOT dependent to jQuery anymore".
Yeah if you don't have JavaScript fundamentals down, learning a library or framework is going to be quite an uphill battle 
https://github.com/nanostudio-org/nanogallery2 What do you think about this library? any feedback is welcome!
I though frameworks make it easier but should avoid it, if I can use JS Vanilla!
Most posts here are incomplete though, since `Math.log10(1.00e15)` does not involve any floating point mathematics. That's why this works in most browsers, as /u/inu-no-policemen mentioned. The real reason why this code fails is because you're running `Math.log10()` on a browser that does not support it, and you're using a polyfill instead. The polyfill for `Math.log10()` [usually does the following](https://stackoverflow.com/a/29802684): Math.log(x) / Math.LN10 The problem with this polyfill is that it does use floating point math, and that's why you'll get 14.99999. You can try it by yourself in any browser by executing: Math.log(1.00e15)/Math.LN10 My guess is that, considering that you're noticing while testing with Chai/Mocha, is that you're running your tests on PhantomJS, which doesn't support this, so you're very likely using a polyfill, otherwise you would get: TypeError: undefined is not a constructor (evaluating 'Math.log10(Math.abs(1.00e15))')
Python is the only language that made up an adjective (pythonic) to describe itself. The answer to many questions about how to do things like array map, reduce, etc, is "just use a for loop!". It's frameworks are pretty monolithic and tend to have a monopoly in their respective space. I think python is great, but I think the community is a little closed-minded about there being more than one solution to a problem. JavaScript's lively ecosystem is one of its greatest strengths. A lot of developers who are new to JavaScript complain about the fatigue of having to compare so many libraries and frameworks to choose from, but once you learn how to make these kinds of decisions without getting paralyzed, you have options! You are generally not stuck using one library that is poorly maintained or too opinionated, because there will likely be alternatives.
Looks a lot like [do expressions](https://github.com/tc39/proposal-do-expressions) with parameters - which you don't need since those variables are already in scope.
That's not how camelCase works, that's PascalCase
The feature is about being explicit which variables leak into the inner scope. In that way you can easily refactor to a real function, because you are explicit about the arguments of the functon. I think you could possible combine use and do, if you want implicit returns.
Technically, it gives shades _and_ tints. :\^) 
.php duh. 
https://github.com/markerikson/react-redux-links This guy has an amazing set of links and resources for react and redux. 
The problem is interviewing can be difficult not knowing this crap. You stay out of the loop too long and you lose your job shit hits the fan real quick
Interesting. Not sure I was aware of this
Did you have a look at the code example on codrops?
Looks very useful but specifically I'm asking about physical books. 
Interesting point about the polyfill implementation - I was thinking here that 1.00e15 would be exactly represented as a float and there'd be no reason to expect log10 to return anything but 15.
I just looked at the source js, it's really not that crazy if you know js fundamentals. Most of the code is just constructing DOM nodes and adding them to the DOM. It's a little verbose because it's vanilla JS, but very readable. The `open`, `close`, and respective `zoom` methods are the only ones relevant to Anime.js.
Feels like a bad idea because it makes scope and closures confusing and reduces readability. Scope visually goes from deeper to higher blocks but this breaks that up and requires readers to look and think more about scoping rules for every block they see. 
Press F12 and boom, you're coding javascript at any computer. Put that code in an html file in most servers and you have it online for everyone to see.
My limited experience says that fp errors frequently occur when factors of 3 are involved.
Technically, everything returned by Reshader could be a tint, though if you meant the lighter tones aren't shades, well, they're just... light shades. Take a look on this: https://en.wikipedia.org/wiki/Shades_of_white. Thank you for your POV by the bye. :)
I think we're going to go with `unistore/preact` and `unistore/react`, built from the same ~ish source.
Yup. Just need to make sure we don't add weight to the preact version just to get a react version out.
It’s because 15 decimals is the number where you reach the limit of a floating point’s precision for 64 bit. 
Wouldn't it even remove weight? All it needs is subscribe, getState and setState. There shouldn't be any reason this should have frameworky stuff in it. But good news then, i'll be using this for a frontend-less node backend project that's coming up.
Neither. If I was smart I wouldn't let trolls to try and bait me.
SOLVED!
Cool idea but can easily be implemented without an entire language feature. function use(f) { return f(); } const y = 10; const x = use((y = y) =&gt; { const z = 3; return y + z; }); Not quite as elegant looking but works just as well.
The factored-out version would be identical weight, I meant the combined approach. Isolated independent modules is definitely best, working on the PR now :)
The fact that we must breathe is what all of us must understand since it's common sense and obvious, but it isn't part of our core knowledge. Try harder. Though don't focus on it too hard, or you'll forget to breathe.
This is not the same. Now it is not immediately clear which variables from the outer scope are used. Even if you would write it like: ((y) =&gt; { const z = 3; return y + z; })(y) There is no guarentee that other variables from the outer scope are not used.
One thing that jumps out at me with a library like this is violation of separation of concerns. I’ve seen these types of reducers at work many times and they can be a pain to refactor because the state of your shape is stored within your action creators. Whenever that state inevitably needs to change, you need to change every action that that reducer responds to. Essentially actions (~your containers that dispatch them) are in full control of application state. I know there are about a million and a half views on the best way to do redux but I’ve found that simple action creators, smarter reducers, and very strict usage of selectors are easier to test, refactor, and reason about. 
That coupling of state-shape and reducers/actions is a huge issue when either quickly iterating or refactoring an older design choice/application. Selectors and `reselect` really helped our team get into the mindset of 'The state shape is only accessible via a function'. As for what is easier to `test, refactor, and reason about`, we found that using `lenses` really helped push that idea throughout our team and our codebase. 
Yup, I have been using almost the same reducer factory and can confirm that it helped me A LOT. On top of that I added "reset" switch too. The best thing about this pattern is that has near zero performance overhead while giving you a lot of headspace.
The million and a half views is so true about the redux eco system, and also it will be a pain to refactor these.
Sounds core to me. Chill out man, no one is trolling you here.
Thanks, Hitler
[removed]
Outer scope leaks into the `do` expression. With `use` it wouldn't, and that is pretty much OP's whole point.
I wish core part of everything ***Trivial*** just like FPA.
From the post, a `use` statement would not have access to any outer scope, except those variables explicitly listed as parameters. Your solution does not do this.
I have read some highly functionalized code, and it does get to be a pain jumping all around the file to try to follow it. This seems like an interesting middle ground.
Ah I must've missed the bit about not having access to the parent scope.
It works in the browser, the one environment that literally _everyone_ has. It's the promise of applets without the baggage of having to download more things.
SweetAlert
Why not just write a pure function instead?
[I think lit, or hyper, went one pixel up](http://www.npmtrends.com/react-vs-lit-html-vs-hyperhtml) this year, not sure which one, or i'm imagining it. This is after google has blown their canon, giving it a stage and constantly shoving it down peoples throats in all their channels and promotions. Javascript is way less volatile and unsteady than its being painted.
Very enterprisey!
The further you get from zero, the more spaced out the exact numbers are from each other. In between 0 and 1 there’s billions of exact FP numbers. But in between, say, 100 and 1000 (not looking it up, so this is just the gist) there are the same number of exact FP numbers. When you get out near 10^15, the spaces are probably larger than a whole number.
It runs natively in web browsers.
As I've said many times, you can use as much or as little abstraction on top of Redux as you want. There's actually dozens of existing libraries for [generating action creators/reducer groups](https://github.com/markerikson/redux-ecosystem-links/blob/master/action-reducer-generators.md), as well as [approaches to combining reducers and reusing reducer logic](https://github.com/markerikson/redux-ecosystem-links/blob/master/reducers.md). Per the [Redux FAQ entry on splitting logic between action creators and reducers](https://redux.js.org/docs/faq/CodeStructure.html#structure-business-logic), both approaches are valid. That said, over time I've leaned more and more towards [putting more logic into reducers](http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/#thick-and-thin-reducers), and minimizing the number of reducers that just do `return {...state, ...action.payload}`. As another comment says, reducers that just blindly merge in whatever they're given are pretty much leaving the state definition up to whatever part of the code dispatched the action, and I don't think that's a good approach.
A lot of these animation are really impressive from an academic perspective but don't really offer much of value when implemented, apart from looking cool. The business case isn't there half the time. Some of them, when you see them on a site, are actually a little disorienting. A fancy animation doesn't always mean good UX. Add in the fact that creating them and making them perform well across devices take a lot of time and you have your reason. Most dribbble shots are just little experiments, they're easier to create in AE than in css/html so you see more of that kind of thing there. Go to codepen and you'll find all kinds of crazy things, just like on dribbble. You don't see this in production because convincing your manager or team lead that you should spend a month on a few animations (that will probably never perform amazingly on mobile) is a hard sell.
This looks like poor man's function composition.
https://github.com/hql287/Manta 
The data and end callbacks represent blocks of code that get run asynchronously - after your return. So when you return, data.object doesn't exist yet. To handle this, instead of returning from getKonfigData, allow it to accept a callback of its own that will handle the "return" data. Or, alternatively, return a promise (though it will ultimately require a callback via then() as well). Using async/await you'll be able to use your return, but it effectively translates to async callbacks in the background since the code is not being run sync (just being written like it is).
How are you using Lottie on web?Are you using react-native-web at work?
Hi /u/JoniSar, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Im running node?
I like this idea, but only you can default to this mode and have to explicitly import variables from outside the scope. This makes it work more like a whitelist firewall. Good idea for new language. It would make all code resistant to copypasta bugs. We could do static analysis to check all used variables are locally declared or imported
Main features: - Flexible invoicing form - Custom designed templates which can be customized further to match your brand's style, - Export to PDF for printing or email. Would love to know what you think! :)
 var streamToString = (stream) =&gt; { return new Promise((resolve, reject) =&gt; { var chunks = []; stream.on('data', (chunk) =&gt; chunks.push(chunk.toString('utf8'))) .on('end', () =&gt; resolve(chunks.join(''))) .on('error', reject); }); }; var getKonfigData = (spielerLocation, fs) =&gt; { var dataReadStream = fs.createReadStream(spielerLocation); return streamToString(dataReadStream).then(JSON.parse); }; getKonfigData('/some-path', fs).then((data) =&gt; { console.log(+data.object.player); });
Thanks a lot, I will check all of the knowledge I need!
Thanks for the answer, I think I know understand how it should be done, sweet! :)
FPA?
Why don't you try each for simple alpha demo app of your idea and see which one suits you the best :).
Checkout this production-ready, best developer experience react boilerplate — https://github.com/react-boilerplate
&gt; There's a reason we use 3.14159 even though more digits are possible (in JS) The only possible reason to use `3.14159` in JavaScript is that you don't know `Math.PI` exists. &gt; By the way, we are in /r/javascript, so it's never a real problem here, we aren't simulating anything, or working on anything that needs extreme precision when we are using javascript. WTF? That is quite an assumption to be making about what other people do with JavaScript.
Could you elaborate on why streamToString returns the string? I don't quite understand why the Promise receives the string yet.
You should host this somewhere so people can easily try it. I understand it is an electron app, but you can extract the client I assume. Consider using github to host the demo. 
How ironic, "I don't know that Math.PI" exists. You're so fucking dumb that you don't even know what Math.PI is, let me tell you... `3.14159`. Don't bother replying, I don't have time for trolls.
Auto correct got me there. It capitalized the first c for me. 
Short answer: no Long answer: you could draw to a canvas to avoid duplicate elements but you'd still be managing two instances of the image/video, plus the added overhead of dealing with the canvas api 
Neat! You should definitely include some screenshots, as you've lost me as a potential user trying it out simply based on me not knowing exactly what it looks like or how it would work. GIFs are good too!
When learning react I was told to completely forget about everything I knew about web development. I did, I learned React and JSX and now I'll never look back. After spending a month or two building a React Native app, I am fully on board with the whole React/JSX scheme.
Perhaps you're thinking about the wrong Vue? Vue is reasonably new and follows the same component architecture that React and Ng follow. You _could_ use programmatic templates with Vue objects if you want to, but the component system is where it really shines. 
Are you correctly binding to an existing input on the page? When you type into the input, does a new DOM node get added to the body? The autocomplete API adds a DOM node called '.pac-container' IIRC, if it's not being added to the DOM, you probably haven't bound the autocomplete to the input.
That makes sense? (wasn't trying to be a dick about it, just wasn't clear)
https://www.reddit.com/r/javascript/comments/7i11i3/comment/dqvf5k3?st=JAWTQR5L&amp;sh=db26f68d
Not that I dont think prettier isn't cool, but with standard or airbnb rules, I've never found a need for it. When your webpack build will fail if there are punting problems, you quickly learn to write cleaner code.
The most important factor is whether you are using animations that can be hardware accelerated. CSS properties like opacity and transform3d can take advantage of graphics hardware to perform silky smooth, 60fps animation. The reason for this is the browser does not have to perform expensive repaint operations for these. they just use your hardware to perform geometric transformations, which is something that graphics hardware is exceptionally good at. Sometimes it can be difficult to figure out how to make a transition only use hardware accelerated properties. This is where a strategy like FLIP can help out: https://aerotwist.com/blog/flip-your-animations/
RabbitMQ is a great suggestion. I use it for all my large data processing with Node. Spin up 10 to 20 workers with PM2 at once then distribute data in chunks to the message broker for delegating to the workers. 
Honestly.. learn how to use EventEmitter and seriously save yourself from this nightmare. 
Well, you have a point there. The other possible reason for using `3.14159` is that you know `Math.PI` exists but mistakenly believe that its value is `3.14159`. You should try typing `Math.PI` in the JS console and see what its actual value is. It has many more digits of precision, as many as an IEEE 754 double is capable of: `3.141592653589793` in decimal. Why would you want to use an imprecise value of `3.14159` when you have _10 more digits of precision_ available to you with `Math.PI`?
Try diversifying. Might help re-sparkle your interest in programming to try something different. Not everything has to be a web app using React. I don't really like React either (and I say that as someone whose job is developing an OSS React-based framework...), but there's enough other interesting challenges in the tooling space to keep me interested.
Does this generate accessibility valid colors? If not, it definitely should.
For a school project I would recommend *not* using a boilerplate. School is the time to learn the basics of webpack! 
Well my suggestion is to learn SQL first and then decide on your RDBMS 
Why Electron and not a web app?
Oh. My bad. Shitty mozilla garbage got in my way and I didn't even notice, you're right, on proper websites it's written clearly as `3.141592653589793` :)
Not yet, but thanks to your suggestion it will. Stay tuned.
yeah, get basic understanding of SQL and how joins work but i'd focus on understanding how to get data for rest APIs. As a front end developer, you'd typically be working with a backend developer who most likely would be using an writing the end points for you. Again, I wouldn't worry about it too much. It doesn't hurt to know SQL or noSQL but it may be better use of your time to familiarize youself with http HEADERS, error codes (302, 404, 422, and 500), and dealing with sessions, cookies and even CSRF ? 
No worries, my friend, it happens to the best of us. I would tell you some of the ideas I was sure of and turned out to be wrong, but it might be too embarrassing... :-) Also, my apology for the tone of my first comment ("The only possible reason...") - it was needlessly provocative - sorry about that!
The new engineering tools (e.g. node, gulp, bundlers, Web Assembly) and new styles in CSS3, and even newly improved zero coding Web app builders are all interesting. The dev talk environment is too focused on stylistic differences between syntactic variants of the template engine and the "do everything in Javascript SPA" - those feel like overemphasized fads that will fade.
Oh, and before I forget, Reshader's API offers an option called contrastRatio. For now, you can just adjust it to fit your needs. Putting simply, higher contrasts lead to better accessibility.
Working with databases isn't really a frontend responsibility.. they typically would work with an API or something. That being said, if you'd like to mess around with it, I'd recommend sqlite for a project such as this (especially while familiarizing yourself with SQL).
It takes time for books to be written, proof-read, published and so on while JavaScript is evolving rapidly these days. Books just can't keep up anymore.
Vue is based on Angulars philosphy, not reacts. JSX in Vue is a side effect of it switching to react-like underpinnings in 2.0, but what would be the point, you'd have a limited react that unable to participate in its own eco system. It does not follow the a component oriented approach at all, it follows what Angular called directives. Do this in Vue: const A = () =&gt; &lt;div&gt;hi&lt;/div&gt; const B = () =&gt; &lt;A/&gt; Or this: import range from 'lodash/range' const C = ({ params }) =&gt; ( &lt;ul&gt; {range(...params).map(index =&gt; &lt;li&gt;{index}&lt;/li&gt;} &lt;/ul&gt; ) &lt;C params={[0, 20, 5]} /&gt; Vues templates are executed in a sandbox. There isn't be any `A` to refer to, nor the `range` import. Directives have to be registered and declare their children. For everything else, dependency injection, mixins and method wrappers. Or even npm packages for the most trivial tasks: https://github.com/Krizzu/vue-for-range That's been the same for Angular all these years. One of the many reasons why in template oriented frameworks everything has to be re-learned. That is the reason it's not going to replace react, which is the newer technology stack.
Cool, will check it out. On the website though, "View project on Github" button is not clickable. You need "pointer-events: none" on the bubble container
I use prettier because I am lazy. I can type out code as fast as it comes to mind, leaving off trivial details like indentation or newlines. Then, when I'm done, I just hit alt-shift-f to get it looking readable again. This workflow saves a ton of brainpower, since I can focus on "how it works" without worrying about "how it looks".
Awesome. Definitely a good solution for the interim.
Any screenshots ? 
Seems like this serves better as a web app to help you calculate shades and use those in your css. Doing it dynamically seems non performant and unnecessary. 
I finally get why you're so adamant- you still don't even realize that your original video completely proves you wrong 😂😂😂 Take a look at the 18s mark buddy: https://youtu.be/ojNpzn3KvYA?t=18 Since you missed it the first and second time, I took a screenshot and added some helpful hints for ya: https://i.imgur.com/KPI5ZaU.png Literally LOL
here is a scary thought. 
Sort of a meaningless question. The event happens, as in the tree is modified or a click happens, but if there are no handlers registered to listen to that event, nothing happens with it inside the vm. Why do you ask?
Are you looking for performance or elegance
Performance. 
I want to know if it is possible for a Event to triggered even if there is no listener attached. Like if I modified a element, will DOMSubtreeModified always get triggered, even if there is no listener attached.
I tried to explain. Why do you want to know the answer to this? If I know that, I can maybe explain it better.
I'd recommend Vue.js. It works with HTML techniques you know and it's easy to pick up.
Even if the event fires, there's nothing listening to it, so it's irrelevant. Why?
just do a single loop to find the indices of the min and max values. they will always have the greatest difference 
Out of curiosity, what would your elegant solution be? 
Maybe something like: [ nums.indexOf(Math.min(...nums)), nums.indexOf(Math.max(...nums)) ]
The smaller value needs to come before the larger one, no dice, it's O(n**2).
Oh, maybe I misunderstood the question. I thought OP was just looking for a pair such that the result was arranged [index_of_min, index_of_max]
Don't leave us hanging!? What was your thought!? 
cool library, very nice doc site
You are right. But then goes the same to libraries such as react? Why not go pure? 
You could make an API request to your .NET backend to get the coordinates, then you would iterate the array of coordinates and place them on the google map. You can check out the map stuff here (https://developers.google.com/maps/documentation/javascript/examples/marker-simple). Also, try to be more specific on what you need help with, getting the map to load, placing markers, getting the data from the DB, making a request, that way it would be easier for anyone to help.
Can you elaborate on why you put more logic into reducers? I get that there's a tradeoff, but I'm not seeing the obvious benefits of reducer logic vs thunk logic. From my perspective neither is more decoupled from the rest of the application.
You’re right. Do you happen to have a solution? 
I found [this post](http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org) a great inspiration about the power of vanilla js. There's a great detailed description of how he achieved transitions quite similar to the guitar browser example you posted. This isn't exactly a 'real live in-production' use of fancy animations, but I think it's a pretty realistic exploration of what it would take.
Or... you know, just write code that doesn't reference external scope if you don't want side effects. Why does our language have to babysit everything we do?
Performance?! Who cares if you are fabulous!
&gt; Will that event fire even when its not set up with a listener? Yes, as far as I understand the event will be called and all listeners will be invoked. Because there are no listeners nothing will execute, but the browser will still "try". This is related to [hot vs cold observables](https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339)
Indent by four spaces to format code. let bt = [0, 0]; for(let i = 0; i &lt; 24; i++){ for(let j = i + 1; j &lt; 24; j++){ if(arr[bt[0]] - arr[bt[1]] &gt; arr[i] - arr[j]){ bt[0] = i; bt[1] = j; } } } return bt; }
I don't disagree that React has some serious merit over Angular and Vue due to it's FP compositional style and first class scripting support in templates. However, that does not change the fact that all three still follow component architecture. Maybe with different implementation philosophies, but it's all still components. I feel like Vue is a good middle ground between Angular and React, the lack of a required compile step is a huge plus for onboarding new devs into the framework. You're also free to utilize some of the programmatic functionality that React enjoys by using the render() method on a Vue component.
I agree.
Thanks!
Hey drowsap, thank you for your feedback. It doesn't necessarily have to be an webapp. You can use it in React Native or Electron as well, since they work on the top of JavaScript. As I mentioned in the website, if you need or want to generate shades programatically, Reshader will be at your service, otherwise it wouldn't make sense. It's just like an hospital. It's there for those who need, otherwise you just pass through.
It's fairly poor time to learn webpack. It will most likely be a group project where ~1/2 of the group does nothing leaving the OP to pick up the rest of the slack. OP will have like 2 months to build this thin and doesn't need to spend time working on build stuff especially when there are perfectly good solutions available that have abstracted webpack entirely. Also, build systems are boring af. Just stick with [create-react-app](https://github.com/facebookincubato), [angular cli](https://github.com/angular/angular-cli), [vue cli](https://github.com/vuejs/vue-cli)... hopefully OP gets the point.
`.on('end', () =&gt; resolve(chunks.join('')))` When the Stream ends the Promise resolves to all the chunks joined together -- in 1/2 programming 1/2 english speak hope it made sense.
You've got a couple of choices : He could host it himself : downside - costs money for him. He could just put it out there and let people host it themselves : then the same burden goes to the user - cuts out a lot of potential users. Electron : bigger potential userbase, won't cost him a dime. The burden is shifted to the user's system resources, which isn't that much of an issue for an application that's gonna only be used occasionally such as a invoice manager. It's not that hard to guess why he made that choice. Kind of makes sense in this context.
The reason people are confused is because to trigger an event is to literally iterate over any registered event handlers and call them. So if you mean does the event logic fire and check for event handlers, then yes it does that. But when it finds no handlers registered the event does nothing beyond checking for registered event handlers.
Your milage may vary. One thing to consider - more people spend time reading your code. At times, having a nice composed bit of one-liners can make it clean, easy to read/follow/understand. Now and then it might be better to be a little bit more verbose. Being conscience is generally good - but don't confuse it with being clever. When I was first learning Ramda - I went overboard trying to compose stuff down to crazy one liners that ended up making no sense to read. Now and then I would 'unwind' the things after the fact to make them easier to understand. Generally speaking you do want to keep things DRY - but occasionally (especially in unit tests) - I'd rather repeat some setup stuff within each 'it' block just so visually it's easy to see and understand what the test is doing. 
Wow, I don't even care if you're right or not at this point, you're totally insufferable.
 function maxDiff(arr) { let idx = [-1,-1]; let pidx = 0; let r = -Infinity; for(let i=1;i&lt;arr.length-1;i++) { if (arr[i]-arr[pidx] &gt; r) { r = arr[i]-arr[pidx]; idx[1] = i; idx[0] = pidx; } if (arr[i] &lt; arr[pidx]) { pidx = i; } } return { max: r, idx: idx, pair: [arr[idx[0]], arr[idx[1]] ] }; } If you just need the difference, not the indexes/elements, it becomes quite simpler, of course: function maxDiff(arr) { let idx = [-1,-1]; let pmin = arr[0]; let r = -Infinity; for(let i=1;i&lt;arr.length-1;i++) { r = Math.max(r, arr[i] -pmin); pmin = Math.min(pmin, arr[i]); } return r; } 
Any recommended use cases? My web app comment meant that you should creat a web app that does calculations for the user based on a color. Similar to kuler.
Redux feel so complex. I made a small thing to manage state client-side, what do you think? https://github.com/franciscop/state
I would store the max difference and the values themselves, so that you can 1) Avoid re-computing the previous difference over and over 2) Return the actual numbers (which it sounds like is what you want) instead of their index function maxDiff(arr) { let len = arr.length; let result = [0, 0]; let maxDiff = 0; let diff; for(let i = 0; i &lt; len; i++) { for(let j = i + 1; j &lt; len; j++){ diff = arr[i] - arr[j]; if (diff &lt; maxDiff){ bt[0] = arr[i]; bt[1] = arr[j]; maxDiff = diff; } } } return result; }
Cool. If it doesn't use virtual DOM (which normally adds some smart capabilities), what advantages does it have against, say, template literals: const h1 = text =&gt; `&lt;h1&gt;${text}&lt;/h1&gt;`; document.body.innerHTML = h1('Hello world'); It seems to be putting together a library to create HTML elements and some utlity methods. No words on the utility methods, they seem useful, my question is why is the "manual" element creation useful as well.
So I provide it with the entry point of my angular application and it’ll find all the dependencies and create a bundle?
Nothing really wrong with the syntax. You're missing some semi-colons but they are non-vital. Haven't really used .nextUntil myself though. I usually write most of my stuff with .slideUp and .slideDown for accordion style divs.
Hey, thanks for the feedback! Would you suggest adding in .slideUp and .slideDown (assuming they’re interchangeable) in place of .nextUntil? Admittedly, I know little about JS/JQ and was supplied this code early on into my project. I have no idea where to add those missing semicolons, for example. Haha. I’ll definitely look into jsfiddle for the future though. 
Check out: https://medium.com/re-dom/components-with-static-and-dynamic-content-eb953d56e913 The idea is to define how to 1) create and 2) update a component.. It's useful to save references to the elements for the update. JSX is supported as well though, if one likes it ;) `el` is just a helper for `document.createElement`, setAttribute, etc... It returns a regular DOM element. So it's just pure JavaScript in that sense ;)
For 'random pages' I assume that you mean it jumps to a new page by itself? For that look into window.location - for a 'glitch' I'm thinking that things would maybe disappear and reappear? You can set the visibility / opacity / display properties with JS. And to make it seem un-natural, you'll probably want setTimeout /setInterval to make things happen while nobody is clicking / typing
I like it! It's not quite enough for my needs (I'm currently just using a Google Docs template from the internet), but it's a good start :). And I appreciate your development philosophy. The only additional things I provide currently are tax (Australian GST) and my bank account details. The former I could get around using an additional line item, I suppose.
So I just now looked up with .nextUntil does. I prefer thing that directly interact with my elements instead of having to use something like .css. So .slideUp and .slideDown will make it automatically slide up and down to it's auto height with a certain duration. If you want I can drop you a PM and we can talk more on discord or something if you want normal feedback.
Wait for it! ... An electron app that builds electron apps !
Fair enough!
I’d definitely be open to PM, that would be awesome! I don’t have discord, but Reddit works fine for me (if feasible for you). The idea of direct interaction without using an intermediary interaction is definitely a good one. Heck, it could run even better than it does now. Drop me something if you’re open, and thanks again!
You need to click on a number first. You will be then allowed to scroll its column.
One interesting way to learn is to look at other people's code. Especially if you have experience in other programming langauges. Codepen is a good place for this. And you'll also get to see a lot of impressive css and html. On the haunted theme: https://codepen.io/steveg3003/pen/gwyGpm?q=ghost&amp;limit=all&amp;type=type-pens To find more haunted html+css+javascript: https://codepen.io/search/pens/?limit=all&amp;page=1&amp;q=ghost
Very nice, I'm going to try this out now. I've been looking for something to replace Invoice2Go for me as I don't really do as much freelance work anymore so it's not financially viable. 
Yes, that's exactly why I chose Electron instead of making it a web app :)
Hey thanks for the suggestion, I'll add it to the TODO list. (This might take some time to complete though as I'll need to customize the templates a little bit. But thanks for the suggestion! Is there anything else that would make app more appealing to you?
Thanks! Please let me know what you think! And yes, I noticed that issue and about to fix it now. Sorry for the inconvenience! 
Agreed. Pretty much what it’s trying to achieve. The purposes functionality seems superfluous. It seems more like a bandaid for bar code 
Great to hear that! Please let me know what you think. Issues, feedbacks or feature requests are always welcome! 
Responding in mobile. Break it out into multiple statements. ‘’’’ const arrayWithoutFirstElement = arr.slice(1); const firstElementInArray = arr[0]; const newArray = reverseArr( arrayWithoutFirstElement ).concat( firstElementInArr) return newArray; ‘’’’ So it keeps popping of the first element recursively and adds it to the back. Work it out in paper so you can understand it better. 
Had to comment to tell you that the logo is fantastic!! Will check out the app tomorrow. 
Nopeeee 
Wow, then what do you do with all your spare time?
[removed]
Wait how’d you get into my previous jobs dev codebase. Mark is that you ?
Two points I want to date for future me. 1) JavaScript will become a framework. 2) webassembly will become JavaScript RemindMe! 5 years. 
I will be messaging you on [**2022-12-08 03:35:52 UTC**](http://www.wolframalpha.com/input/?i=2022-12-08 03:35:52 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/7hq69s/the_future_of_javascript_will_be_less_javascript/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/7hq69s/the_future_of_javascript_will_be_less_javascript/]%0A%0ARemindMe! 5 years. ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Thanks. That's really helpful. I think using the FLIP animation technique is how the guitar browser example was done. Initially, I didn't understand how the coordinates for the transform were calculated relative to the browser window. I've found a few more articles explaining it now that I know what it's called. Will experiement with getting it working myself when I et a chance. Articles are linked below for anyone interested. https://medium.com/outsystems-experts/how-to-achieve-60-fps-animations-with-css3-db7b98610108 https://aerotwist.com/blog/flip-your-animations/
Haha, appreciate it bro :)
The anime.js parts are the easy bit. It was how the new positions were being calculated and animated to that threw me. I wasn't sure how the positions of the new DOM nodes were being calculated and transformed from in the exact same places as the DOM node that would replace it after the animation is finished. I'd never seen that technique used, but it seems pretty well explained by those articles I found about FLIP animations. Looks like I have some more research and practice to do about constructing DOM nodes too.
also note that some events are delayed after the onload event to have a chance to catch them; like gamepad connected event
Gifs of the workflow in the main tasks please. It's kind of a deal breaker trusting that people will try things they have no idea how they look. Anyway, congratulations on your effort!
A few reasons. First, per my comment and the other comment in this thread: if a reducer just does `return action.payload` or `return {...state, ...action.payload}`, then it's completely up to the caller to ensure that the right structure is being passed in. Now, part of that can be handled by action creators that take parameters and do some formatting of the action, but there's probably not much stopping you from stuffing an object with the wrong fields into that action, and the reducer would blindly accept it. Another reason has to do with time-travel debugging. Let's say you dispatch an action, look at the state diff, and see it's wrong. If the logic is in a reducer, you can go edit the reducer, hot-reload it, and automatically see the updated result without doing anything else. However, if all the logic is in the action creator, then you'd have to go through the steps to actually dispatch a different action with the corrected contents. Now, I do have plenty of logic in thunks, and there's still places where I do have "just merge it in" reducers. Both work. But, given a choice, I'd try to stick more of the logic into a reducer, and keep the actions more descriptive.
Apparently that's how it works. What I'm confused by is that it has 5K stars but issues and PRs only go back 2 days.
Hi, I just added some, please take a look again at: https://github.com/hql287/Manta
Thanks! I just added some screenshots to the repo. Please take a look again at: https://github.com/hql287/Manta :) I like the idea of using gif, too. Will do it soon! 
Hey zeo01, thanks for the suggestion. I've updated the repo with some screenshots. Hope you'll give it another try! :)
I'd just use CSS
Hey, thanks for the advice. I like this idea, but it's actually a bit tricky to make a web demo as this app has multiple windows and the way they work together is quite different. However, [I've added some screenshots to show what the app looks like](https://github.com/hql287/Manta). If you haven't tried it yet, please consider give it another chance. It would mean the world to me. Thanks :) 
Looks good. Have been using Excel sheet / Google Sheet based invoice templates to generate PDF invoices for my work. Will try yours. Thanks.
After some experiments I think I've come up with an O(n) solution. The most important thing here is that you're looking for a pair. What this means for the algorithm, is that it has to keep track of not just the best pair found so far, but it has to *separately* keep track of a new potential pair that can beat the best. This catches some important cases, including when you only find a new best lower/upper bound (but not a pairing match), or when you do find a new pair but its difference value is smaller. I've tested this against a simple reference implementation of the naïve approach, ie an O(n^2) version similar to your own. Full test code can be found [in this jsFiddle](https://jsfiddle.net/bst2cyve/). Output is logged to the console, you can also play around with the functions there. Below is the actual function, along with some extra context. function maxOrdDiff(numbers) { let bestPair = [Infinity, -Infinity]; let candidatePair = [Infinity, -Infinity]; let bestIndices = [Infinity, -Infinity]; let candidateIndices = [Infinity, -Infinity]; let bestDiff = bestPair[1] - bestPair[0]; for (let i = 0; i &lt; numbers.length; i++) { const current = numbers[i]; if (current &lt; candidatePair[0]) { // When we find a new lowest candidate, replace our old candidate pair entirely candidatePair = [current, -Infinity]; candidateIndices = [i, -Infinity]; } else if (current &gt; candidatePair[1]) { // When we find a new highest candidate, adjust our current candidate pair candidatePair[1] = current; candidateIndices[1] = i; // If our candidate pair's diff is now bigger than our best pair's diff, replace the best pair const candidateDiff = candidatePair[1] - candidatePair[0]; if (candidateDiff &gt; bestDiff || candidateDiff === bestDiff &amp;&amp; candidateDiff[0] &lt; bestDiff[0]) { bestPair = candidatePair; bestIndices = candidateIndices; bestDiff = candidateDiff; } } } return bestIndices; } I should mention a couple quick pointers. First off, your code sample returned the indices of the found pair, so this function does the same. It also keeps track of both the actual pair, and its value difference, so you could easily return any of those instead if you wish. Second, I have not included any input validation, so an input with too few numbers, or only numbers in descending order, will yield `[Infinity, -Infinity]`. --- Now, I've included a few comments to clarify what the various parts do. Let me give a bit more context on why this works. First of all, like I hinted at above, two different types of results are stored: the best pair found so far, and a candidate pair which may or may not be able to become the best pair later. We still enter our loop as normal, we just iterate the entire array in order, nothing fancy. When we find a number lower than our candidate lowest, we can replace our entire candidate as it no longer has any potential to become the best. After all, it's not *yet* the best, and since the new number is lower than the candidate lowest, it'll always yield a better pair than the old candidate lowest. When instead we find a number higher than our candidate highest, then we improve our candidate pair by replacing the candidate highest with our new number. As we've just improved our candidate pair, that's also improved their difference value, and so we check to see if the candidate pair can now beat the best pair. If it can, we store our candidate pair as our best pair. if we do find a new best pair, it's actually important *not* to reset our candidate pair. This is because we may still find an even better highest value for the same lowest value. So we need at least the candidate lowest to remain in order to perform these checks.
I've just posted an O(n) solution, [check it out](https://www.reddit.com/r/javascript/comments/7i9lt0/how_could_i_simplify_this_function/dqxtn77/)!
Great to hear that. Would love to know what you think :)
find things to do.
Redux is required not because it is the best solution to go about things (certainly EventEmitter is more sound and less bulky), but majorly because we have a lot of code (and developers) using this approach, and it doesn't hurt at all.
It's a little dated, but Bob Tabor did a great 'learn JS from scratch' course - it's free too. Search 'channel 9 bob tabor javascript' and you should find it
&gt; TensorFire Yes, I understand your point on helping web app developers to learn NN and I understand that NN can be implemented in any languages. I have no problem with that. I'm asking in real life application why would someone use NN on client side? There is a reason for that libraries only implemented the inference mode. You need to train your data on backend otherwise your application will stuck on client side. But after training you can do your inference on the frontend, which is comparibly not a costly operation.
I see this is reposted in r/reactjs (where I [commented](https://www.reddit.com/r/reactjs/comments/7i4sv7/keducer_automate_writing_redux_reducers_with_5/?st=jaxjy6be&amp;sh=bb495656)) - I had a very similar response to yours. If you want to define state shape logic in your actions just use something like ImmutableJS for your store (and skip Redux entirely), and it should even be quite a bit more performant. The whole point of Redux is to explicitly define what the shape of your state can be. 
Disclosure: self-submission.
I'll just quote myself &gt; Just as a side note. React Native is not considered to be a "hybrid" framework, it is rather referred to as an "interpreted" one. A hybrid framework is typically any framework relying on a WebView (and more often than not, Cordova) to render the app's content and for communication with native functionality (camera, GPS, Bluetooth and so on). Original post: https://www.reddit.com/r/javascript/comments/7fug7f/ionic_vs_react_native_what_is_the_best_choice_for/
&gt; but it's all still components Pete Hunt, one of the original react guys, recently [gave an interview](https://stackshare.io/posts/the-react-story) about the history of how it came to be. They saw templates for what they are, short-lived, ever-changing, volatile and limited. They saw frameworks as temporary, often short-sighted solutions to pacify some browser quirks. The functional view is a paradigm and they knew immediately that it would open the floodgates for cross platform, native and otherwise. So they didn't write react as a web-framework. They made it to drive any kind of UI interaction on any platform that produces visuals. In Hunts words "react everywhere." No matter if you write a website, a desktop or mobile app, [TV ui-layer](https://twitter.com/raphamundi/status/931970342268137474), [console app](https://github.com/Yomguithereal/react-blessed), or whatever it is, react is made to render everywhere. You transfer the same knowledge you have, even share code if you need. This is why you see the market today and react dwarves everything else. &gt; I feel like Vue is a good middle ground between Angular and React, the lack of a required compile step is a huge plus for onboarding new devs into the framework There is no difference between the two. React can be [used without build tools](http://codepen.io/gaearon/pen/rrpgNB?editors=0010). It's on their starting page. They do not encourage it, that is all.
lol I love this. Thanks, Angus C. Actually tbh I feel like contributions like this — as in A. literally just for fun and B. not really materially measurable against project objectives or whatever — are kind of underrated. I like cute and fun things. So it's nice to find little sprinkles like this in what are otherwise more serious/cerebral environments (like programming in general), or important projects (like babel). I want my yarn output full of emoji and I'm happy now that babel has its own song 
Subtle 
Agreed. React Native is in the "compiles down to native" category; it doesn't run in a webview.
Works great? Undo has been broken for month and ex commands don't have a history so you need to retype them fully every time. Also, it's slow.
I partially agree, as the interface elements in React Native apps is indeed native. However, and this is from my point of view, e.g. Xamarin fits better into the "compiles down to native" category as it compiles a common language (C#) into fully native binaries, while React Native still require an on-device interpreter to interpret the JavaScript.
[UploadArea](https://github.com/FizzyGalacticus/UploadArea) Basically what it sounds like -- a simple upload helper with drag + drop support. Wrote it because all the others seem to be very bloated, and I just needed to simply upload files. It is also [available on NPM](https://www.npmjs.com/package/uploadarea).
Mac only?
Stackoverflow will jerk you off no problem 
This is entirely uncalled for.
Looks great! Will definitely give it a try. 
What do u use to create the PDF? Is there a react thing for that?How does it work?
Another advantage of `return await asyncFn();` is that exception stacktraces for exceptions thrown in `asyncFn` include the current function. If you just return the (not yet fulfilled - because not yet started) promise from `asyncFn` the calling function will be popped off the stack, so when the exception happens it won't be included in the trace. By waiting you keep the calling function on the stack (not the main stack, the excecution environment of `async` functions, when suspended, is saved somewhere else and put back on the stack when they become active again). This includes the line calling `asnycFn()` to be included, because when that function fulfills (with a rejected promise) the caller `async` function is put back on the stack, since it has the `await` and therefor waits for the fulfillment before actually returning anything.
A primer? Maybe https://javascript.info ?
Thanks! Let me know what you think! :)
There's a lot of options for generating PDF with plain JS or React. I tried some but finally ended up using some CSS (print specific) with Electron built-in print function to make sure it renders a A4-sized document correctly. 
Cool. I mean, really cool. I've been through the readme and, tbh, I love the brand. I can't say I'll use it (I REALLY love my Pages invoice template) but I'll definitely suggest it to friends who have the need. And I'll get off my arse to start an awesome side project too :)
Hey, thank you very much for the kind words. I'm glad that you like this project and would be greatful if you can spread the words. It would mean the world to me! Have a nice weekend :)
This would be a static site, just like it is in the Electron distribution. The source is already on Github, so they could have just let Github host it.
Now that is an architecture I can appreciate, instead of the usual outdated MVC/OO patterns you see enforced on top of JS. It's good to a concrete end to end architecture instead of only specifying one part (i.e. event sourcing). Will keep an eye open on his github project. Hopefully actual implementations will follow instead of TODO;s ;)
ohhh I see, whatever is being resolved is being returned to the promise. Thank you mir slmyers :)
While Js is great for many things espacially building UI IMHO I don't think it is the best starter to learn programmation because you'll have to understand how Js is handled by the browser before doing anything. Have you look into Python ? It's really easy to setup an environment to start programming and syntax is light. Python wiki has a great beginner page : https://wiki.python.org/moin/BeginnersGuide/NonProgrammers If you want to stick with javascript I would suggest this course https://openclassrooms.com/courses/learn-the-basics-of-javascript It doesn't have any prerequisites and it's free. 
Unfortunately that only goes for Xamarin with native views. AFAIK there is no way to write once, run anywhere and be completely native. Xamarin Forms provides write once, run anywhere, but that also uses some kind of middle layer. The experiences I have heard at our company and pretty much anywhere on the internet is that there is no comparison between Xamarin and React native. Xamarin forms is full of bugs, hard lifecycle issues, ... I haven't seen anyone that really liked it, while React Native experiences are usually pretty good.
Yeah, it works!
That's a good idea, drowsap, thanks. I'll consider it more once I release a few updates I have for Reshader. Regarding the recommended use cases, I'll leave you with the motivation read that lead me to publish this lib: https://www.reshader.com/#motivation—I'm sure it'll give you some insights about why Reshader is in the world and how it can help you with your colors when working with the css-in-js approach. Let me know of further questions. Cheers!
&gt; Note: Outside of try/catch blocks, return await is redundant. There's even an ESLint rule to detect it, but it allows it in try/catch. I'm going to disagree with this. I would argue that the `return await` is always the correct thing to do (unless you are doing something very clever involving returning Promises). The point of async/await is to turn promise-style control-flows (where we need to put everything inside `.then` and `.catch` functions) into more conventional imperative code, where each statement is executed before the next, and the program flows in a logical order. In standard imperative JS, if you return the result of calling a particular function, you call it within the stack frame of the caller. We open a new frame for the new function, execute the callee's code there, then close the frame, returning some data. Then, back inside the caller's stack frame, we can close that frame, and return the same data. If an exception is thrown, we execute the caller's `catch` block, and then close the frame. Ideally, when we use async/await, we would want to mimic that as much as possible, otherwise we cause confusion, and increase the number of leaks in our abstraction. However, if we don't `await` our return value, we don't create the new stack frame for the callee in the same way. Instead, the callee's synchronous code is executed, but the asynchronous parts (the `.then`s) will be executed *after* the caller's stack frame has closed. This is in direct contradiction to our imperative version - we violate the principle of least surprise.
I, for one, welcome our new electron overlords!
Well, it looks like development started in August 
I don’t see many traditional desktop programs often, but when I do I applaud the developer. A lot of the reasons for why you did it from your GitHub page are the same reasons I’ve been moving from web apps. Not everyone will have a connection to the internet at all times, it’s more cost effective, and 100% more secure. I’m working on a side project that I’m planning on selling in the future so I’ll definitely be staring this project for future reference for my invoices. 
I started learning to program in August of this year, originally with c# then moving to JavaScript after discovering the depths of web development. At first, I would watch a lot of YouTube videos and try to read ebooks like [eloquent JavaScript](http://eloquentjavascript.net) or [YDKJS](https://github.com/getify/You-Dont-Know-JS). Whiles these are amazing resources, I didn’t fully internalize anything until I started building applications. Please note, I don’t mean building apps by following tutorials. I mean building an app from scratch that I designed to solve a problem I chose. When you do it this way, you realize exactly what you need to learn. Recently I finished a react app along with a backend api for it. Whiles creating it, I really got to learn how to create an api server in node using express. I got to really understand what middleware does and how http methods work. Most importantly, whiles creating it I was getting to road blocks. I didn’t know how to use http methods at all before I started this app. I knew a little about creating a static express server for simple projects I had done before but not much about routing. The greatest thing about coming to these road blocks was searching for the answer and figuring out how to solve them. I found answers as examples on stack overflow or in the documentation then I figured out how to implement it into my app. The best thing here is to not copy and paste but understand the code and what it’s doing. Of course I don’t recommend starting with a react app but definitely create projects using what you learn as you learn it. If one day you learn about ‘for loops’ then creating a simple program where you use a ‘for loop’ to do something. As you learn more, mix up everything you learn and use them together. You’re getting pieces at a time and it takes many, many pieces to make a full app. I’d recommend early on learning and using [git](https://youtu.be/SWYqp7iY_Tc). I’d also recommend using it from the command line and getting used to the command line itself. A lot of the technology you will use in the future, tech that makes your dev process easier, is best used from the command line. Also make a [github account](https://github.com) and use it! I’d also recommend [VS Code](https://code.visualstudio.com) as a text editor for your code but there are other great choices like Atom or Sublime Text. Keep in mind that VS code and Atom are both free. Editors like this will greatly assist the dev process and later on can become powerful tools. Starting off you can just use note pad or something like [CodePen](https://codepen.io). Please don’t become someone who argues about which editor/IDE is the best. I once saw someone complain about how Atom was slow with large files but this person had no idea about css flexbox. JavaScript is awesome and I spend a lot of time everyday learning more and more about it. It’s a very satisfying feeling after you finish a huge project especially when you had to overcome many hurdles to get it done. If you ever have any questions, feel free to PM me. I might be able to help! 
On paper ReactJS is the big swinging dick. 
Yes, `forEach` is synchronous and blocking. The thing is, he is getting far ahead of himself. Later in that series of videos he goes on to use RxJS and Observables. The transformation functions on those (`forEach`, `map`, etc) are indeed asynchronous (due to the nature of Observables themselves, of course). But, of course, Observable's `forEach` and `map` are _not_ Array's `forEach` and `map`; they just share the same name (because they represent the same operation, yes). So, no, `Array.prototype.forEach` is not asynchronous at all and he's wrong saying otherwise. On the other hand, it _may_ help some people to think of those two `forEach`'s as "basically the same operation, which on Observables runs asynchronously and on Arrays runs synchronously". They _are_ different functions, yes, but conceptually it _may_ help seeing them as "mostly the same" and seeing _Observables_ as "mostly the same" as _Arrays_. Personally I think he shouldn't have said that and it creates confusion on the viewer. About callback or closure, don't really pay much attention to that. The distinction is pedantically irrelevant in this case.
I do something like this in my framework [rilti.js](https://github.com/SaulDoesCode/rilti.js) library. RE:DOM just seems awfully clunky, I just use proxies to generate elements on the fly, also no "virtual dom". const {dom: {h1, header}} = rilti header({render: 'body'}, h1('My Company Website')) I also don't believe in class X { }, that's just too much effort for something easily solved with factory functions or ``data =&gt; ({...data, ...methods})``. i.e. const btnCounter = (txt, render, i = 0) =&gt; button({ render, class: 'custom-button', props: { get count () { return i }, set count (x) { i = x } }, on: { click() { i++ } } }, txt ) 
Hi, this is my first programming blog post. I welcome any critique. Thank you.
I'd obv rather have preferred he didn't twice publicly accuse me of lying, unnecessary slandering me &amp; our work. But unf that wasn't the case despite my initial attempts to cordially set him straight, so yeah, I have no problem trolling trolls
It makes some valid points, but most of these "advantages and disadvantages" seem completely arbitrary. What makes Angular using TS a con rather than a pro? Why does React supposedly have a steeper learning curve than Angular or Vue? How is "need to use third-party technologies" a knock against React, but Vue gets points for being a "lightweight solution" for the exact same reason?
I think I'm tired of seeing those Angular vs. React vs. X
Hi thanks for sharing, the difference is very clear and well explained, I just didn't get the last note: &gt;Outside of try/catch blocks, return await is redundant. There's even an ESLint rule to detect it, but it allows it in try/catch. 
It’s definitely doable but the source code on GitHub is not enough since the way Electron windows talk to each other is different. But I guess it wouldn’t be too difficult to achieve that with something like react-router. But then again, you’ll still need Internet connection to use the it :) 
Hey, thank you very much for your kind words. I appreciate it! I’m glad that you find this project useful. Would love to hear some of your recommendations/advices as well! :)
TIL. Cheers.
You can kind of duplicate the behavior by taking your socket server offline. The client will then beginning polling to try to reconnect.
The JS ecosystem is huge and these frameworks require a lot of knowledge. Knowing vanilla JS is not enough to be productive from day 1 at a company that heavily uses these frameworks. It's different in PHP and Python for example, where most frameworks follow the MVC architecture so there's familiarity between them and you can adapt quickly. The Ruby world avoided the problem entirely by having only one significant web framework to choose from. In contract if you compare a few front-end players like React, Angular, Ember and even jQuery, all four require vastly different knowledge. Some employers are definitely too specific in their requirements. They're hoping to find the perfect match so that they don't have to spend a lot on getting the developer up to speed or training them. I hire junior developers often because I like mentoring them and giving them the resources to learn, but most employers don't want to do that and just want instant results. Luckily the market favors developers. There are tons of companies hiring in JS. I constantly advise employers that they need to stand out and make themselves desirable if they want to get talented people.
Seems like a reasonable proposal. But still, using "for of" loop for async iterations is a bit more readable in my opinion.
[Sentry](https://sentry.io/welcome/)
omg your username. But valid argument
demo: https://myliang.github.io/fish-ui/#/components/index
I think even if you have a good knowledge in some framework, you are not able to be productive from day 1. everyone has the process of adaptation company/team/project... Who has strong knowlodge in vanilla javascript, can adapt more easy in any project. Who has strong knowlodge in some framework, know how to work in one way, and even the company use the same framework, can be different... companies should bother to look for people who have the talent to solve problems. Not everyone who knows a technology strongly is in this group of people...
I agree 100%. Basically, if you have async fn() { ... } The difference between: fn(); and await fn(); is precisely as you described. In the former case, it's a fire-and-forget. In the second case, it's actually waiting for a task to finish.
TeamTreehouse has an excellent beginner JavaScript course. 
Nice explanation!!! To reforce, think of types like number and string and the operator +. Both types operate with the sum signal: String: "str1" + "str2" = "str1str2" Number: 3 + 5 = 8 They has the same operator with different behavior, just like arrays and observables.
That’s actually a usershame.
https://github.com/sportesi/carita-web
The thing about using many frameworks is that it kind of opens your eyes to how applications can be organized, and it makes you a much stronger JS developer overall. Frameworks aren't cheating, they just help you organize and give you useful tools. You still need to write a lot of vanilla JS within the frameworks to make you app actually work for your specific business case. Once you've used 2 or 3 frameworks, picking up the others comes very quickly because in the end they all have similarities and solve similar problems.
The + operator used with numbers and strings is in NO WAY analogous to different functions having the same name:-) 
Also, what I said in my longer comment applies: stack traces... at least until runtimes manage to collect asynchronous stacktraces without `await`"trick".
No, they aren't/shouldn't be hard reqs. If you apply for a frontend dev position, I'd expect experience with at least one of modern frontend libs like Angular, React, Polymer or Ember though.
That's awesome I really like it. I made something similar recently it's a model/MVC type thingy called (SuperModel.js)[https://github.com/SaulDoesCode/SuperModel.js]
I can't wait for Proxies to become a normal supported thing because man it's really amazing what they allow you to do. Like those property listeners you have going on, I mean it's so simple right, Redux and the like is really hard to grasp in comparison
Can you explain why?
A self-submission from you is a boon to the community! 
https://github.com/prettydiff/wisdom
Sadly you need to know at least one well these days, otherwise you will never be considered a senior dev*. These days the "one" is usually React, Angular will also do. That's because they have a very large ecosystem, and not many companies are prepared to pay you while you get your head around it all. Just think of them as jQuery in 2009 (with AngularJS as Protoype.JS and Angular as MooTools...?). You may not like it or want to use it, but it's pretty much required. The good news is that it could be worse, much worse - these frameworks are quite nice... even Angular, for all its over engineering, has some nice parts to it. * of course this is a generalisation, it will never be 100% correct but _mostly_
&gt; It's different in PHP and Python for example, I can't talk for Python, but it's not much different for PHP - if you don't know Symfony or Zend or Laravel, don't expect to be hired as anything more than a junior in companies who use them
Regardless, that's how it works, whinging doesn't help
Here'a a paranormal script: `[10, 10, 10].map(parseInt)`
That’s nice to hear, thanks!
Not really a code snippet, but I've used/shared this with coworkers many times in the past. (Valid ES6 import/export syntax)[https://gist.github.com/caridy/839d5359321604a12648]
Could not agree more. +1
Why so long?
If you _can_ develop in these frameworks after a weekend of learning the syntax, you will be fine just knowing vanilla JS. If you can build a whole small-to-medium sized UI in pure vanilla JS, you will be fine just knowing vanilla JS. However, if you are like I was a few years ago and used the 'I like vanilla JS more than XYZ framework' line to try to hide the fact that I didn't really understand what these frameworks were doing, you are going to have a hard time.
Author here: Great comment, but I'm having a problem demonstrating what you're saying. https://async-await-stack-demo.glitch.me/ - For both `return` and `return await`, I get the stack trace I'd expect, nothing is missing. Tested in Chrome, Firefox, &amp; Safari.
Imagine that an event is someone yelling into a phone. Someone may or may not be on the other end of that phone but regardless, that person is going to yell. `MutationEvent` is yelled into a phone but if no one is listening to the other end, it is _almost_ a noop.
1. Have a clear goal in mind before the language you want to learn. Do you want to build a chat app? a mobile game? a visualization project? 2. Then pick a library, for JS --&gt; a DOM manipulation library. 3. Try to reach your goal. Do you fail somewhere? Open the console and test. You can't get around it? Google it. Learn slowly. 3 Understand that library you use. Understand it WELL. It will take 1-2 months. 4. Then understand vanilla JS. Understand it WELL. Unlike the bandwagon webboyz that advocate every other framework now and then, stick to basics. Understand what is node, what is element, what is prototype what are object inherited methods, method chaining etc. Understand event loop behind the browser. Understand recursive function calls. Basically, understand ES5. 5. Understand ES6 and learn new methods, try to reason why some of them were necessary (over ES5) and why some of them were absolute crap. 5. Once you get a hang of everything, experiment with your project. 6. Learn a framework. 7. Go back to step, go over basics again. 8. Rinse and repeat. Good luck!
If you use a service worker, you'd only need an internet connection for the first visit.
forEach is not an operator, it's a function. Even if rxjs refers to map as an 'operator', this is not implying it's a JavaScript operator, it's just their own terminology. There is no need to have tricks to try to remember that functions of the same name on entirely different objects are not the same functions, regardless of similar implementation
[Seems they perform the same](https://jsperf.com/function-vs-arrow-function), at least in Chrome. Also if you transpile to ES5, then of course it doesn't matter.
what do you mean? 
yeah same. which basically defeats their argument in my eyes, becoming only extraneous.
But those numbers are quite different in Firefox (fair enough they're older versions). So perhaps the javascript engine matters a lot as well.
I don't like large monolithic frameworks and this has never stopped me from getting a job. A framework is a tool. It you need a framework to be more than a tool, such as your life support system, then you are probably a weak developer. This is will show during the interview. If given the choice between somebody experienced with the big framework versus a rockstar who has never used the framework most companies will choose the second guy.
Mainly the framework experience is good because companies that are hiring for a front-end developer are using the framework already and don't want to go through the hoops required to train someone on the philosophy of the framework and how best to use it. If you can adapt the way you program into the philosophy and best-practices of the frameworks while not being dependent on them, you will be a valuable developer indeed.
See frameworks as culminations of best practices that help you to structure your application. They teach you so many things you would never even consider using plain javascript. Not to mention that plain javascript is never going away, you always use it. But you would never use plain javascript in order to structure and bring about a large application, that would be nuts. State management, composition, re-usable code, being able to maintain, inspect, debug, extend, scale - these aren't things you can just randomly bump into. *If you know what a framework is*, even if you would write plain javascript, you would essentially re-create a framework before writing your app.
 Blob.prototype.saveAs = function (filename) { var url = URL.createObjectURL(this); var a = document.createElement('a'); a.href = url; a.download = filename; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url); }; String.prototype.saveAs = function(filename, mimeType) { new Blob([s], { type: mimeType || 'text/plain' }).saveAs(filename); };
Personally, I shun jQuery like a plage. The fact that Velocity has the same API is not a plus in my book at all. But I'm probably a bit on the extreme side of things. That being said, I've been happy not using jQuery for a few years now, without any problems. 
 for (let promise of promises) { await promise; } Looks more readable than this: for await (let promise of promises) { return promise; } 
Or you could just do: debugger;
A star may only mean that you bookmark it to remember it. Or what's the implication you're thinking of?
You are using a "fake async" function. See the code demo I provide in my comment. Make it a "real" async function and try again. You are running into an internal optimization of the runtime. 
It looks like JSFiddle has some issues with cross-domain access to `localStorage` in Firefox. [CodePen](https://codepen.io/anon/pen/jagWjr) runs it ok.
If you just care about the end result and not about the index, the following code works using one pass through the array. Otherwise just store the indexes as well: function computeMaximumDifference(numbers) { let minimum = Number.POSITIVE_INFINITY let maximumDifference = Number.NEGATIVE_INFINITY for (const n of numbers) { if (n - minimum &gt; maximumDifference) { maximumDifference = n - minimum } if (n &lt; minimum) { minimum = n } } return maximumDifference } We keep track of the minimum number we encountered so far, because this is the number we want to subtract from each number we encounter. We also test if we have a new highest difference. The order of the if-statements matters. The way it is written now means that you cannot subtract an entry from itself, so calling it with [3,2,1] yields -1, not 0.
I dislike how this treats 'return await' almost like a special case operator - that seems misleading and overcomplicated. It'd be better to understand what async, await, and return actually mean, and how they're elegantly composed in real code.
&gt; counting occurences of an element in an array with ES5 function `filter` and ES6 arrow function this is just one liner: arr.filter(v =&gt; v == searched).length BTW I though decent JS developer should know how to write such simple code from scratch - maybe I was wrong? Besides even if somebody does know how to write this, it is still better to learn about foundations (e.g. how `filter` works, or `what algorithm can be used to calculate aggregate function in JS`) than to just copy-paste solution. Taking fish vs. learning how to fish. &gt; summing the values in an array arr.reduce((a, b) =&gt; a + b); &gt; fibonacci, factorials, I can't remember last time when I've used fibonacci or factorial in real situation. &gt; distance between two points Pythagorean theorem: √(x² + y²) Although math equations can be more complicated than that - I often go then to wikipedia or other site which explains mathematics and search for proper math equation to apply. Sometimes calculations/algorithms are so complex that I would rather do them in Python. &gt; small list of functions that have come in handy to me in the past I often copy initializing/boilerplate code from my previous projects. 
The difference is that in the second case you don't have a promise inside the loop... so your naming is a bit off in that case :-) Just saying, I'm myself still thinking hard about why this would be advantageous.
I'm familiar with it. Doesn't help a lot when you're working with datasets large enough to warrant saving offline. It also doesn't help you clone real-world data for writing test cases.
Is this just language level syntax for "subscription" in a pub/sub? I can't think of a use case for that differentiates it from pub/sub or a queue. 
In my experience hiring managers who write the job requirements rarely understand the technologies and just throw everything into the spec. If you've used a lot of different frameworks it generally means you're experienced and adaptable, if I see a CV which says I only use vanilla javascript I'll admire their principles but not be interested in hiring them. How you prefer to work is generally not useful, most places will either be full on framework or (less common) vanilla JavaScript, if you want the job just tailor your answers accordingly. You can try and influence their approach once you've joined.
Nice..might poke around with this over the weekend. Had written a couple helper functions to help me calculate text color and a couple tones of a color based on a color picker value, but I rushed my implementation and was going to refactor it soon anyway.
I created a similar [StackOverflow question](https://stackoverflow.com/questions/38708550/difference-between-return-await-promise-and-return-promise) last year.
Hi /u/PurpleIcy, please refrain from personal attacks. Thanks.
Everybody harps on that as an example of 'weird behavior' while I see it as a test of 'Those who don't read documentation.' The result should be totally expected.
Holy shit, I did a double-take for a second there. I worked on a project a few years ago for my old company called [Manta.hr](https://www.manta.hr/). Love the look of this. Is there a reason you've only got a mac download button on the website? It looks like you're using Electron, so I'd assume this should work on Windows too?
Oh, that's nice! If you have any idea on how to make Reshader better, maybe with an approach you'd like to use, feel free to move the discussion to GitHub. Also, I'm working on a walkthrough article explaining every aspect of Reshader and how to extract the most out of it. If you feel lost, just hang tight until Monday when it'll get published.
Even in FF 59, arrow functions are slower. 
Looks like someone is a soulsborne fan. Best games ever made. 
Both approaches are very similar: * async iterables are “pull”: you decide when to take the next step. * observables (that you subscribe to) are “push”: the observable notifies you when something happens. Both have pros and cons.
Nice, I will check this out. I had this in my todo list to make something like this, I guess now I won't have to :)
Performance will remain a moving target, as engines keep optimizing all kinds of things and patterns. I’m not sure you should choose between them based on performance.
https://javascript30.com/
I understand that push/pull metaphor, but it can be made even more flexible by being entirely monadic/declarative, and have a separate `run` or `do` operation for each stage (or combination there of). In which case * pull = monadic subscribe + run * push = monadic publish + run 
Having used both, I highly prefer React-Native. It's simple and works, and it compiles to native rather than running in a webview. 
Just a small point of order... You are asking about *DOM* events... Not JavaScript events. But yes, the events are always fired and are always bubbling up, you are just choosing to attach a listener for them. Think of it like tuning into a radio station... The station is always on air, but you might not currently be interested in their music.
This looks great. I just used the live demo on mobile -- very smooth. Bookmarking this.
Love how fluid it is. Looking forward to the [React version](https://github.com/haltu/muuri/issues/51) coming out.
Neat! Saved.
 flatten = arr =&gt; arr.reduce((a, c) =&gt; a.concat(c), []) // [[1], [2], [3]] =&gt; [1, 2, 3] curry = fn =&gt; (...args) =&gt; args.length &gt;= fn.length ? fn(...args) : (...otherArgs) =&gt; curry(fn)(...args, ...otherArgs) add = (a, b) =&gt; a + b curryAdd = curry(add) add1 = add(1) add1(2) // 3 compose = (...fns) =&gt; start =&gt; fns.reduceRight((state, fn)=&gt; fn(state), start) add = .... divide = ... multiply = ... allThree = compose(multiply, divide, add) 
Very nice.
When would it be a good idea to treat a stream of events over time as a single event ( `event-emitter` into a `Promise`)? From my perspective, a WebSocket is not a great choice to transform into a Promise API because the socket doesn't represent a singular value while a Promise can only ever be a singular value ( Once it's _resolved_ or _rejected_ ). In my opinion it would be a far better choice to use an event based system to describe these WebSocket events over time. An approach that I find even easier to grok when dealing with async events is Observables via RxJs. For instance, instead of interacting with sockets as socket.on('event', callback) it can become something that I am far more used to dealing with socketEvents .map(transformIntoA) .filter(butOnlyTheseTypes) .subscribe(doSomethingToWorld) And I get the benefit of the cool thing about Promises: you can pass it around as a first-class citizen: onlyEventsIWant = socketEvents .map(transformIntoA) .filter(butOnlyTheseTypes) butUpperCase = onlyEventsIWant.map(upperCase) onlyEventsIWant.subscribe(notUpper =&gt; ...) butUpperCase.subscribe(upper =&gt; ...) so now, I get that imperative feel that `async/await` offers us with Promises but I also get the ability to describe _data over time_ and not a singular future result.
Observable forEach does not run asynchronously either by the looks of it. The stream may be asynchronous, but once the forEach loop is being triggered, it appears to be a blocking operation. I can see that we cannot use a 'for loop' as the course indicated, but it's not because of async, it's because of the stream of data as opposed to an array I have a Plunker demo, and if forEach was asynchronous, the 'end' console.log would occur immediately, followed by the output of the forEach, but it doesnt. I'm gonna have to learn Rxjs from the ground up - starting in the middle is giving me a headache!!! http://plnkr.co/edit/GH1sDVzGYx1oajkhTnvf?p=preview // Code goes here console.clear(); //emit (1,2,3,4,5) const source = Rx.Observable.from([1, 2, 3, 4, 5]); const example = source.map(val =&gt; val+10) example.forEach(val =&gt; console.log(val)); console.log("end")
I'll need to look but there was a really great post I read recently that talked about how the engines are moving so fast now that we ought just code however we want and eventually the engines will learn to make that code run fast. I am all for writing performant code but I agree with /u/rauschma on this one. I can't imagine arrow functions being the lowest hanging fruit for performance.
Damn, remove this post, people are going to think you are some sort of witch!
 const getId = (ID) =&gt; document.getElementById(ID);
Good architecture in Vanilla JS under 100 lines? Uhhhh...
This is dope! Love the dragability and even adjustable viewport on mobile! 
if you 'prefer to do everything in vanilla javascript' to the point where you think it's odd that people list frameworks in job requirements, you've probably never worked a real software development job. i love writing my hobby stuff vanilla, but i wouldn't ever suggest that my made-from-scratch framework is maintainable for a team of multiple devs for months or years
This looks absolutely fantastic, thanks for sharing!
Well this was a condescending post
I'm sorry, I should've been more precise. It _can_ run asynchronously. The problem with your example is the Observable you have created. That is, you create an Observable with a "fixed source", the array with 5 items. That creates a, say, resolved stream of five events. When you call `map` or `forEach` on that, you consume the whole stream because the events are already generated when you reach the `map` and `forEach` statements. Now, suppose you create your Observable from an asynchronous source of events, say, mouse clicks... const source = Observable.fromEvent(document.body, 'click'); Now, this stream is asynchronous. It starts with no events, and every time a click on `document.body` happens, then a new event is triggered in the stream. This means if you now do... const example = source.map(click =&gt; click.clientX) example.forEach(x =&gt; console.log("click at x: ", x)); console.log('end'); Now, each event fired on the stream [executes](http://plnkr.co/edit/M3eEAFV5FpGxaNX2vKgy?p=preview) asynchronously on your transformations. This is why I mentioned it _may_ help to think of streams as "sort of arrays"... but it _may_ not too. It may confuse some people and help others.
From the look of it, _creation_ is slower, a lot slower. But execution seems pretty similar for both. And it looks like Fx doesn't optimize the creation of that function in the test, which unfortunately tests both things together.
Cool. That's made things clearer. Good to have the terminology sorted out. Good man for that
Nice! That looks much better :D
This looks so hot!
Thank you! :) I will try my best to implement at least a part of it, however, the project idea itself didn't get much of a positive feedback so it's a "motivational struggle" to keep it going. There will probably be some changes in a project direction, but most of the architecture should stay the same.
Nice! Thanks. Looks like just what I was looking for.
Point taken. I can do larger, as long as it's well-organized. In fact seeing the well-organized would be the point. Not sure how to make the github bits "run", looks like Node is involved...? No experience with Node here.
Thanks?
I've collected many of my favorite small utility functions into a module which I use a lot: [pixl-tools](https://github.com/jhuckaby/pixl-tools).
Fun little game, but the amount that I have to move it around to play on my phone is ridiculous for this little content. Tighten up that layout, imo.
Self post. I like to think I write "goo" JavaScript. Good enough to land my first job: https://github.com/ciscoo/evaluacion
This is heckin' cool.
https://www.reddit.com/r/incremental_games/comments/7ii5sb/update_to_chopumpin_a_user_friendly_ui_now_id/dqzb3o3/ Avoid this. malware ads and crypominers.
Thanks for your thoughtful feedback. I feel like `async/await` offers much to WebSockets because the receipt of a WebSocket message is a singular value once resolved. The async/await operates at the message level, not on the socket level. Interesting pattern. I'll have to investigate it.
Lol. I was just giving a joking reply to the comment I saw that said "programming will give you abs." Whenever I get irritated at what I'm doing, I just work out a little, but I just decided to say it in a ridiculous manner.
Who's idea was it to have a 2k line readme and a single 4.7k line js file ... I don't see any sings of some build process, which makes me think it was developed like that!
It's fairly easy to write 100 lines of clean code. Writing thousands is where it gets harder, in which case using jQuery instead of a framework/view library is not usually a great choice. If I couldn't use a framework, even using [hyperscript](https://github.com/hyperhype/hyperscript) over jQuery would probably result in cleaner code at a fraction of the size.
This might be controversial, but one piece of code I really loved recently was the library `pump`, which comes in at 80 lines. https://github.com/mafintosh/pump/blob/master/index.js It’s a stream error-handling library for Node.js that cleans up your piped streams if one of them fails. Things to note: * passing functions as values, using `noop` for fallbacks instead of verbose `if` statements * using `&amp;&amp;` for `null` propagation and `||` for `null` coalescing * the rare case where `[].reduce` can be used without an initializer — `streams.reduce(pipe)` is just beautiful * very clean style for ES5 code 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [mafintosh/pump/.../**index.js** (master → e3d0c44)](https://github.com/mafintosh/pump/blob/e3d0c444ceef59ff694c753303a35052e60b5186/index.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
It is free as in beer. It is also free as in put in a PR if you don't like something.
&gt; I don't see any sings of some build process I guess you didn’t look that hard 
Hella insufferable dude. It’s a cool lib, still pretty fresh off the press. 
Yea, if you intend to work as a fronted dev or full stack you will need to know the modern JS frameworks. Unless you are shooting for entry level or junior level positions you might get away with only knowing vanilla JS. React and Angular are the ways to go. Many companies are still on on Angular1, but are migrating to either React or Angular2+. 
so smooth like hot knife through butter
En todas!
Please show me. The `muuri.js` file has no signs of being processed and there are no scripts to create it from some hidden files. 
I didn't mean to sound so harsh, but I feel like there are better ways to develop libraries. Free !== no standards
This was written before the release. It's completely useless now. React is full of tiny modules that everyone uses. redux-thunk has 7k stars on GitHub, and it's only a few lines of code.
Looking forward to the Vue.js version
Oh! In that case, maybe the annotated jQuery source would be interesting to ya! https://robflaherty.github.io/jquery-annotated-source/
https://github.com/spences10/twitter-bot-bootstrap The bot in question.
I'm not Greek but: text=text.replace(/[άἀ-ἇὰάᾀ-ᾇᾰ-ᾷ]/g,"α"); text=text.replace(/[ΆἈ-Ἇᾈ-ᾏᾸ-ᾼ]/g,"Α"); text=text.replace(/[έἐ-ἕὲέ]/g,"ε"); text=text.replace(/[ΈἘ-ἝῈΈ]/g,"Ε"); text=text.replace(/[ήἠ-ἧὴήᾐ-ᾗῂ-ῇ]/g,"η"); text=text.replace(/[ΉἨ-Ἧᾘ-ᾟῊ-ῌ]/g,"Η"); text=text.replace(/[ίϊΐἰ-ἷὶίῐ-ῗ]/g,"ι"); text=text.replace(/[ΊΪἸ-ἿῘ-Ί]/g,"Ι"); text=text.replace(/[όὀ-ὅὸό]/g,"ο"); text=text.replace(/[ΌὈ-ὍῸΌ]/g,"Ο"); text=text.replace(/[ΰϋύὐ-ὗὺύῠ-ΰῦῧ]/g,"υ"); text=text.replace(/[Ύϒ-ϔὙ-Ὗ]/g,"Υ"); text=text.replace(/[ώὠ-ὧὼώᾠ-ᾧῲ-ῷ]/g,"ω"); text=text.replace(/[ΏὨ-Ὧᾨ-ᾯῺ-ῼ]/g,"Ω"); text=text.replace(/[ῤῥ]/g,"ρ"); text=text.replace(/[ΫῨ-Ύ]/g,"Υ"); text=text.replace(/Ῥ/g,"Ρ");
looks like you need some node experience setting up this bot
Thanks! The way I did it was so tedious, I posted it in case someone in a similar spot might be searching the web for this sort of function. Can I ask why you put dashes in the brackets? Also am I correct that you included some letters with diacritics that I left out?
VSCode source code: https://github.com/Microsoft/vscode/tree/master/src It's in Typescript, but it's an excellent resource to learn proper JS from.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Microsoft/vscode/.../**src** (master → 6e71921)](https://github.com/Microsoft/vscode/tree/6e719219515a510f216c39e07a36de5e707ca2c1/src) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
The bracket is a [character class](https://www.regular-expressions.info/charclass.html) and the dash (hyphen) is used to specify a range of characters, I did include more letters with diacritics by looking at a character table.
Well you sure are a helpful person!
I used to be ambivalent about monads, but the following proposal to bring async support to ReasonML via monads is great: https://github.com/facebook/reason/issues/1321#issuecomment-348714613 That being said: I’m not sure monads would work as well for JavaScript.
It isn't about sounding harsh, it is about complaints being cheap compared to action. PR for reworking the docs is the way to go, otherwise just move along as you don't have anything to contribute.
I did something like this, take a look, fork it, open issues :) https://github.com/ldd/tech-tree-js
Damn, this is exactly what I was looking for... but I have a little rule with myself. If I cant understand the code, I shouldn't use it. That being said, it's super cool.
Since when is something above critique because it is open source. I agree there are more productive ways to voice my opinions, but I feel like it's fair game when a link is posted on reddit for commentary.
Nice! Looking forward to the ember.js version.
Haha, that's awesome! What did it do? The Windows/Linux version is still being developed. If you would like to try it out, please see [how to build Windows/Linux installer](https://github.com/hql287/Manta#support). 
It’s a desktop game only atm lol I’ll look into responsive ui later 
It's a HR platform! Not been on it in a good long while, but I'm sure it's still going! I might download it just to check it out, but I do all of my invoicing on Quickfile because it ties neatly into my bookkeeping so I'm not sure how much use it'll be for me :( 
Would you know how to translate your code into PHP by any chance? 
This sure looks promising!
Try using requestAnimationFrame instead of setTimeout
Thank you. :)
I didn't say they are particularly hard or that I can't code them. In fact most of these are dead simple to write, I'm just one of those people who want to prototype very fast and I usually try to avoid writing code I have already written in a previous project. 
Thanks for sharing, I'll take the time to browse through it. Seems like a pretty decent resource. I was building something similar in fact (in the same vein as Awesome Lists), but it's nowhere near complete or as extensive as your list.
I wouldn't say this is a huge quality of life improvement, but to each their own I guess. After all, it's clean and you can easily understand what it refers to.