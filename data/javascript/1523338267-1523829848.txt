Something similar nowadays?
RemindMe! 1 month
Theres no comparison. Math. metods result with 0 or 1. 0 - false. 1 (and any other number) is true. 
True, but not all floating point systems use IEE754. There are some that predate it with their own levels of wierdness.
So any human review? It‚Äôs gots upvotes! :o
Which might be a problem if you're doing it the "wrong" way (i.e. have everything as global variables) and then have that as muscle memory.
I tried doing those but no luck. Maybe my formatting is incorrect? eg: frmTriangle.angleA.value=angleA should it be: frmTriangle.angleA.value=angleA.toFixed(2) ? Thanks
I suppose that‚Äôs true, good point 
The most simple way in general ist to do all your calculations in a different number space: Treat everything as multiplied by 100 and only when you display a value divide by 100 after rounding to the nearest integer. 
/r/learnjavascript and a lot of learning by doing. Practice katas on https://www.codewars.com to get better.
While I find the conspiracy that we (Frontend Masters) hired a bunch of bots funny af.. however, it is weird there seems to be a lot of bot activity. Not sure what bot motive would be other than to get their bots karma so they can game the rest of reddit. Hmmmmm... now maybe there's a bot conspiracy on popular posts trying to get upvotes. Hmmmmm
Chai is actually based on proxies: https://github.com/chaijs/chai/blob/master/lib/chai/assertion.js#L68 You could make an ORM out of this, but it would be difficult to test. I'd rather have an ORM that has an immutable fluent interface...
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [chaijs/chai/.../**assertion.js#L68** (master ‚Üí 1021f40)](https://github.com/chaijs/chai/blob/1021f403a0384332505024dc3fbadc515bd95b1a/lib/chai/assertion.js#L68) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dx475yf.)
Look into it. I too was skeptical until I saw lol
Yes, i like Mithrils approach. I actually made a context lib as well, and you'll probably recognize the pattern in there: https://github.com/drcmda/react-contextual ; ) Though these patterns have become prevalent now, you'll find them in many libs these days.
Okay so where's the bit that implements/handles syscalls? Or sockets? Device drivers? Paging?
&gt; It's the second item that showed up! In programming, indexes start at zero 0. üëç
So, this is like four months too late.
The meaning of "operating system" is arcane nerd knowledge now? That's news to me Also sorry, some of us have jobs
Also I never had any issues with bower but npm is really nerve racking these days..
No hard feelings man, just fooling around. Don't be too harsh on this. It really looks and feels cool.
Well yeah, it seems like a cool enough desktop-ish environment (although, Coffeescript still? Yeesh) that can stand on its own merit without hyperbole. I really, *really* wouldn't want the power of an OS in any web app (or any app that's not an OS or OS virtualization tool) for that matter
On a grander scale, showSlides() is being called in a loop. This loop, in other languages, would be achieved in other languages by a control structure outside of the showSlides() function itself, as doing so would likely cause a recursion error and stack overflow. However, because this is JavaScript and we have things like Javascript‚Äôs event loop which enables us to easily schedule things to occur at different times, a function like showSlides() can be _scheduled_ to occur slightly in the future using setTimeout(). A similar functionality could be achieved with slightly different code and usage of setInterval().
I like how we collectively decided to both downvote all the bots, but also still upvote this post because the handbook is free and useful. It's like saying "fuck you" while licking ice cream someone you hate gave you.
It's probably pining for the fjords.
It's incredible that even now in 2018 Smalltalk keeps influencing new projects based on similar principles. Fizzygum team states it clearly on their [site](http://fizzygum.org/docs/fizzygum-for-lispers-and-smalltalkers/) Take a look at Pharo to see a modern and still actively developed Smalltalk environment.
I have one for design patterns and I haven't read it yet either. I also both two other books, one by Eric Eliott and I still haven't finished it. Overall I just think I don't really like reading all that much and it takes a bit of effort every day and usually actual coding takes priority.
You've probably got some code that looks for a "change" event on the input. Since is being changed programmatically, that event doesn't fire. My solution would be to fix that code instead.
&gt; however, it is weird there seems to be a lot of bot activity It could be bots trying to be low-key active with those accounts now, so they appear more like real users accounts in their future activity?
Oh no! You got me ü§ñ
ggwp
Not really sure why you‚Äôre being downvoted. This adds to the discussion. 
AS A HUMAN, I THANK YOU FOR THIS HUMAN BOOK READABLE BY HUMAN PERSON [https://www.reddit.com/r/totallynotrobots/](https://www.reddit.com/r/totallynotrobots/)
A lot of ambiguous and strange wording, hand waving and in general a poorly organized and not good explanation of the subject, to end up, maybe unsurprisingly, linking to Eric Elliot.
https://javascript.info/ ‚Äì very useful resource by JS. With tasks, examples and so on.
Fair enough. And yeah, it seems reasonable to not personally be a fan and to want to be able to defend that position for a team decision. Maybe "movement" just hit me different than you how you intended.
Good bot.
That's one reason I charge for my ebook. It might be much more useful to you if you paid for it, as you're actually going to read it, at least a part of it.
Check the Web Console for the reported error.
Good bot
Are you sure about that? Because I am 100.0% sure that sifex is not a bot. --- ^(I am a Neural Network being trained to detect spammers | Summon me with `!isbot &lt;username&gt;` |) [^Optout](https://www.reddit.com/message/compose?to=botdetector&amp;subject=!optout&amp;message=!optout) ^| [^Original ^GitHub](https://github.com/SM-Wistful/BotDetection-Algorithm)
I'm not sure I have the dexterity or I'd sing it myself. There's a pretty reasonable karaoke track for the original song on YouTube.
Separate functions, named by a convention, then referenced when adding the listener. $(document).ready(function() { $('#submit').on('click', onSubmitClick); $('#username').on('change', onUsernameChange); }); function onSubmitClick(evt) { // Do things. } function onUsernameChange(evt) { // Do things. } I typed that really quickly without checking that it'll work. The point is the function names and keeping them separate from the place where you add the listeners.
This is pretty neat, thanks man!
I am (slowly!) compiling a roadmap to learn JavaScript. Check it out: https://flaviocopes.com/javascript/ 
One very good book is (was) JavaScript: The Definitive Guide, but it's now quite outdated as it does not contain ES6-7-8 at all. You can however start with that (beware, it's a huge book) and learn online the new ES stuff (like on mine: https://flaviocopes.com/ecmascript/) I regularly read chapters from that book, it really dives into things.
Just use Bolt tbh
Eh, if you've had enough practice coding you naturally figure out what to do and what not to do on your own and by seeing enough examples and tutorials.
And then write an ebook about it and release it for free.
I think they're real humans. Look through their post history.
&gt;This is pretty neat, thanks man! Same, also it's nice to group events either in a class or object if you have a lot of them.
Check out Khanacademy.org . They have a lot of interactive turtorials. 
Don't get scared by, or too caught up in, the bewildering number of frameworks and libraries out there. Learn JavaScript and learn it well. Don't worry about learning React or Angular or Ember or Hyperapp or whatever new comes out tomorrow. Having a strong foundation in JS will put you above most developers who work only with a framework(s). I've worked with 'React devs' who didn't know the pure JS syntax for selecting classes. Don't be that person.
Can you set up a code pen? 
I'm not surprised that a lot of people fall into this trap. Those rules are different than how white and blacklisting usually works. At the very least, I would have expected the rules to get replaced if they're specified on a more-specific section.
I think this may be a way for me to understand it better...so for my below example: helloReddit.addEventListener("click", runFunction) function runFunction (arbitrary) { if (arbitrary.target.nodeName == "LI") { run all this stuff }} since "arbitrary" is the first (and only parameter) it gets the value from "click" in the statement above it? 
Appreciate everyone taking the time to try to help me out. Definitely have a much better understanding than I did before. I've read a javascript book and watched countless tutorials but I just can't make much headway. A lot of the advice of been given is to just set a goal to build something using javascript and just do it + learn a long the way. It's probably time that I do just that. 
I always appreciate attempts to explain that JavaScript doesn't have classical inheritance at all, because it's something that's very basic to the language but is often misunderstood. That being said, I don't think explaining that they're really the same thing is helpful, because 1) they're not, and 2) it's irrelevant in this context.
People are often willing to help you get off in the right direction - for free - if you explain what you're trying to do and show what you've done so far.
Awesome. Give me like 45 min. Stuck in lecture. Thank you guys.
I'm a big fan of 10 print, I actually included it as an easter egg on my website just for kicks Type "tenprint" to see it http://nickforddesign.com/
Check out textblob package for python. Used it to analyze different news media outlets recently and it works suuuuuuper nicely.
Hi /u/Greek_G33k, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/wuspoppinjimbo0, For javascript help, please visit /r/LearnJavascript. Thank you!
Let us know what‚Äôs up no need to pay 
Is there a way you would refactor some of the code? Just curious. Or is it just the fact that he is still using var?
I mean, it works fine, it‚Äôs just that there is no reason to use var instead of const or let these days. 
author here. it's a fair point, it is an hyperbole. However, say, it has its own process management, and can do the equivalent of forks, and has a connection system that is an inter-process communication mechanism, and it gives files and folders navigation. Do we care? Do we want all of that in web apps? Do we need another desktop inside a desktop? I claim that not all of us do, but yes, some people care and some people do need this. I open my gmail page and I count some 50 different use cases in different windows (chat, mail, search, contacts, there is *even a virtual keyboard there* if you can believe it). Similarly, I open facebook and I count a couple of dozen in different windows again. So, one way to do those complex things is that we can stretch the html/css document model as much as we can. And that works. We could _also_ build on a different foundation, where we reuse concepts of interaction design and processes and overlapping windows that have proven themselves over and over again. And it's not really that difficult to bring that foundation over to be re-used, it's less abstruse than using CSS rounded borders to make windows. It's a try. It could work. Hey at least I kept cryptocurrency out of it, do I get a star for that?
This looks more flexible than styled components. Very like... Lighter bundle size and performance?
On large scaled sites we would set low z-indexes and have standardized layers and we only worked with a few values to keep it simple.
Good bot
*slow clap*
I switched the server.. but it should be up and running again :)
It should work again now :)
Kinda like hyperapp
Then build it 
I often use that approach too. Another note for OP is that if you're using jQuery you can have any number of `$(document).ready()` blocks (or the shorter form of `$(function(){/*...*/})`, same thing). You don't have to bunch all your initialization together into one. Not related to the original question, but your example code illustrates a very common usability error made by experienced developers as well as newbies. You should almost never handle the `click` event on a submit button. Instead, you should handle the `submit` event on the enclosing `form`. Why does this matter? If you only handle the `click` event on the button, then if your visitor has the keyboard cursor in the `#username` field and hits the Enter key, it won't call your `click` handler at all. For example, if the `#submit` element and the `#username` element are nested inside a `&lt;form id="login"&gt;`, then instead of this: $('#submit').on( 'click', onSubmitClick ); you should do this: $('#login').on( 'submit', onSubmit ); I'm not pointing this out to nitpick about your example - as you noted, it was just an off-the-cuff sample - but because I've seen so many web pages make this error. If you ever try to hit the Enter key in a form and it doesn't work but clicking the button does, that means the devs made this error.
You should definitely write a library that incorporates all of that! 
Yeah, I don't know why they did it.
Like this I guess: https://demo.os-js.org/
I see. Thanks. I thought maybe you meant he had too many unnecessary variable declarations.
Thank you
This is a pretty weak history of Javascript. Googling Brendan Eich's rendition of the history of Javascript is far more interesting.
PSA: if you have to support IE, replace arrow functions with anons or transpile the with Babel 
So, just for fun..no monetization project?
Uhh... do you even know what those things do that you mentioned? Or did you just start learning a couple months ago and got frustrated? You don't need any of those things to just write javascript in a file and then source it in an html file with css; all of those things make doing more advanced techniques earlier Lol, my workflow should be telling a computer what to do and then it happens magically 
True. But I get to nitpick, too: I'd use "onLoginFormSubmit" instead. If you see an error popup with "onSubmit", it might not be immediately obviously what form was being submitted. It's even more useful when it's a customer/client/coworker that sends you the error and you aren't even sure what page it's on.
Excellent point! 
1000 for modals, 999 for surface stacking priority. Least priority is 1. 
okay so sorry for the time. The assignment is as follows I don't have much to be honest. I wasn't planning on turning it in but he gave a good pep talk about sending in something. I don't know where to start. I think it might be a function with and array for the languages to return a random image out of 3 possible. Javascript Exercise 2 I have provided you with starting files to create an ad on your page. Using Javascript, you should accomplish the following: When the page loads, load the English language ad. If you add a query string to the end of the URL, it will change to English or Spanish (e.g., ?=en for English, ?=es for Spanish Every time the page loads, the user should see a different image. In your code, you should have examples of the following: Object literal with properties and methods An example of an object constructor that accepts multiple parameters An example of a function that returns an object (this can be inside of an object literal or object constructor) An example of a functional expression An example of a String method CHALLENGE: To increase the likelihood to take an action, set a date for a sale and provide a countdown to the customer showing how many days (or minutes) are left before the sale will disappear. 
I'd recommend targeting companies that truly embrace remote work/distributed teams. Companies like Zapier, Buffer, UnitedHealth Group, etc. know the benefits of allowing their employees to work remotely. [Here's a resource to check out](https://www.skipthedrive.com/best-telecommuting-companies/).
"Sheeeeeeeyit, I'll take any muthaphukka's money if he just GIVING it away!"
I conceded an hyperbole and highlighted some commonalities with what an OS does, I don't think this is the forum to page through POSIX and discussing the gaps but can do via email if you want. No, Fizzygum is not going to help cram more use cases in small-screen devices. I personally don't think that small screen devices cater for complex workflows so I don't see an advantage in doing that even if I could. Yes, you can drop items from slides on the desktop, you can do the same with Powerpoint on any desktop. The reason in both cases has to do with object re-use and compositionality. I took the care, at great expense of time, of making a video and a text explaining why compositionality might be useful and you can take widgets and even "fixtures" and move them around and re-use them.
Hi /u/SITDnow, please post code or codepens, not screenshots of code. Thank you.
It's really not as complicated as you make it out to be. Make a package file: `npm init -y` Install webpack 4: `npm install --save-dev webpack` Make an entry point: `echo "console.log('hello')" &gt; src/index.js` Build: `webpack` (webpack 4 doesn't even require a config file) Make a `dist/index.html` that includes `main.bundle.js` Serve it: `cd dist; python -m SimpleHTTPServer` and go to `http://localhost:8000` Bonus: `webpack --watch` to auto rebuild `dist/main.bundle.js` when `index.js` changes. That's literally it. Far less than 25 steps and 0 steps for every code change. Then you can add on incrementally (i.e., make a `webpack.config.js`) for things that you need as you need them. Need SASS? `npm install sass-loader`, and put a short stanza in `webpack.config.js` telling it to use `sass-loader` on `.sass` files. Then write `import styles.sass` in `index.js` &gt; 1) Edit stuff until it's cool. 2) Say what it needs in a config. 3) Deploy it Things are actually really close to this. Of course, complexity is unavoidable because of the scope and scale of your app changes as it grows, but the above strategy is the best way to manage that complexity.
[Relevant XKCD](https://xkcd.com/927/)
Man, it sounds so easy when you say it like that. It's too bad declaring "It should be simple" doesn't just magically create a simple workflow that works for everyone. The fact of the matter is it cannot be simple mostly because of differing usecases. Do you want the dead simple backend setup to be the same as the dead simple frontend setup? Do you want the dead simple backend express setup be the same as the dead simple backend koa setup? Okay, so you're pretty clearly talking about frontend. What you're describing is the module system defined by ES2015 that has moderate support. So, basically, go use that and quit complaining.
IIRC it does work for links referring to the domain covered by the service worker.
I think the definitive guide is more of a reference tool. Good to have at your tips...might be too tedious.
I have the zip but how should I share?
A Smarter Way to Learn JavaScript is good. Also Head First JavaScript and Head First HTML. They provide practical follow along examples building with JS.
1. Avoid using z-index entirely. 2. If you somewhat depend on z-index (eg. modals), make it a constant defined in *one single place* of your application, where it can be *changed if needed*, so that the number you use really won't matter much.
Why do you keep writing "Mosiac"...
Having worked with Java in a dark past, the "Spring" name really puts me off...
If you're using TypeScript, check this out: https://github.com/bterlson/strict-event-emitter-types
Hi /u/Anish11, For javascript help, please visit /r/LearnJavascript. Thank you!
Thankyou.
What's a Spring in Java? Here it refers to the lib being literally spring-physics based, there are no durations, timings, easings, etc. Just an RK4 spring, tension and friction.
Uh, no. I've been building web apps and coding in JavaScript since 1996. In my spare time, I teach plain vanilla JS to kids and think it is a great on ramp to development. Currently, I quite enjoy Vue and Vue CLI. Still, there's a vast chasm between vanilla JS maybe w/ a little jQuery at one end and huge frameworks and bloated bundler/compiler stacks at the other. Having lived through other "bloat cycles" I can tell you that you know a reckoning is coming when people fall in love with the cleverness and complexity of the buzzword soup they are swimming in. I'm sure things will get simpler again soon.
&gt; A developer who can code the front-end, back-end, API, and database isn't as absurd as it once was (excluding visual design, interaction design, and CSS) Yes, you're proficient with React, Node, Express, SQL but I mean thinking you could also do CSS is just absurd. [sarcasm intensifies]
&gt; Bower takes backward compatibility very seriously. Which is why we're dropping backwards compatibility with 2.x!
Thanks, I'll take your workflow for a spin. Honestly, I'm not a curmudgeon, just someone that thinks we've reached "max frameworks" and looks forward to a better way.
I never said anything about the ability for any other base to represent every number, just that this problem isn‚Äôt unique to JavaScript. You‚Äôre trying to find something to argue about by attacking something I‚Äôm not even talking about. You don‚Äôt need a degree to see your bullshit.
As I said below: &gt; Having lived through other "bloat cycles" I can tell you that you know a reckoning is coming when people fall in love with the cleverness and complexity of the buzzword soup they are swimming in. I'm sure things will get simpler again soon. One of my favorite "life hackers", Tim Ferriss likes to ask this question when someone is mired in complexity, "What would it look like if it was simple?" For JavaScript, I'd rephrase that as "What would web development look like if we could start over and make it simple?" I agree we're not too far from that ideal in some ways but we've lost ground in others. 
Dude it's really cool! Can you show me the code please?
Ah, that makes sense. Thanks for the explanation! I guess I've been lucky to not have to do too much beyond basic CSS.
I would have to agree, but I'm a newb. I've been working with javascript for years, but in isolated environments. I just recently finished the Pluralsight course for setting up a javascript dev environment. It was a huge learning experience and highlighted why I never felt interested in *really* getting into web dev in the past. After I finished that course I installed webpack 4 and put everything in my webpack.config.js file and holy shit it made everything so sooo much easier than using package.json and like 10 script lines with 10 different programs for linting, testing, watching, compiling, bundling, etc. Took me about 5 days of almost non-stop studying, reading, and tweaking, but I think I am starting to see the light.
Because the *superior* [full stack JS developers](https://www.youtube.com/watch?v=sI5Ftm1-jik) use the *superior* spelling of "Mosaic". Anyway, what are you doing, I can smell the stench of a non-JS programming language on your Github repo.
"What would it look like if it was simple?" is a good question to ask (grammar aside), but it is based on the faulty premise that there is always a simple solution. I'm not saying that there's *not*, but not all problems have simple solutions, and simply posing the question is not an adequate assertion that the problem can be simplified, and thus it's not a valid condemnation of complexity. "What would web development look like today if we could start over and make it simple?" is kind of a moot question. As trite as it is to say, we cannot start over and make it simple. We simply can't. All we can do is build abstractions on top of the complexity. Which we do, and they're called tools, and some of them are dead simple (I'm thinking of Create React App), but there will never be one tool to rule them all. You'll always have to know how to use the right abstractions on top of the complexity to yield simplicity.
Wtf? Why he got downvoted so much?
Downvotes on this comment? Why? What's wrong with people?
Yeah this seems cumbersome still Every package you want to use needs its own loader as well. The manual steps are repetitive for the most part, so why isn't `webpack install sass` a thing? The whole system is just highly inefficient and fragmented. Keep in mind you're getting webpack after nodejs and npm (which are bundled and webpack is not).
Vertically centering a div is simple. &lt;div style="display: flex; align-items:center"&gt; &lt;div&gt;centered&lt;/div&gt; &lt;/div&gt; Tada
&gt; Every package you want to use needs its own loader as well. The manual steps are repetitive for the most part, so why isn't webpack install sass a thing I agree that it might be nice for a package to be able to "present as a loader" to webpack, instead of having `xxxx-loader` for every technology `xxxx`. However, this would require a lot of standardization and cooperation. We _are_ talking about entirely open source software developed entirely by volunteers. It's inevitable that you're not going to have optimally tight integration of everything with everything else, but webpack has made leaps and bounds. &gt; various manual steps like creating an HTML file Is... creating an HTML file not something you'd expect to do in web development? That point aside, there is a webpack plugin that will generate a boilerplate html file automatically during build. &gt; Shaving a step or saving 3 seconds means a lot for a tool I mean, I agree, but once you're set up, especially with `webpack-dev-server` you get near-instant hot-reloading for free.
To suggest that all it takes is time and practice and you will magically come to the same conclusions as all of the giants of computer science did before you combined is incorrect at best. Read many books written by people who are smarter and wiser than you. Not everything needs to, or even can, be learned the hard way by every person.
I need it so if all three ID's are hidden (or clicked) then show the buttons. Not if just one of the ID's are hidden.
What does it mean to say V8 compiles JS to machine code before execution? Doesn't JSCore have to execute machine level commands to run? Or does it mean that V8 is always felt AOT and JSCore is primarily JIT?
It's amazing that here we are in a web dev community talking about programming languages and we can't use hypertext. Here's the [link](https://brendaneich.com/2010/07/a-brief-history-of-javascript/). &gt;Netscape could not keep up with this and finally sold itself and IE ruled the internet with 96% of web browser usage share. I threw up in my mouth a little bit.
I didn't link to it on purpose. He's discussed it in several different sources.
I'm fond of the saying, "Simple things should be *simple*, and complicated things should be *possible*." It seems a bit like simple things in Javascript are now complicated, while complicated things are still possible. What is considered "simple" or basic or common has changed over time, and I agree with the guy above that it would be better if the things that are widely used now were standardized and rolled into the native code. 
sure: [https://github.com/microdis/zonetime](https://github.com/microdis/zonetime) You'll have to change the API\-key to make it work. You can get one for free on the Google Timezone API website.
Instead of `return data;` in `showOrgs()`, that's where you would do something with the data. Otherwise, since it's async, it won't return the data to the calling function.
I didn't downvote you. Just providing the link.
Don‚Äôt worry, I don‚Äôt like prettier either. We use eslint and I find it a lot more sane, especially with ‚Äîfix and being able to pick and choose rules and presets that make sense for us. 
Nice. Thanks, I need to educate myself on flexbox layout. It seems to address some layout headaches I have with CSS.
I'll try this thanks!
Lol i don t get the downvotes. I downloaded a free ebook...thanked for sharing and read a fair share.. what the hell is wring with these guys. It is amazing.
Ok, that's what i needed clarified. Basically, there is no coming back to: program...action(...) Once i call getOrganization(), correct? Thanks for the help.! 
Not working in my code for some reason but I feel like it should be working. 
From the jQuery [documentation](https://api.jquery.com/hidden-selector/) - &gt; Elements can be considered hidden for several reasons: &gt;* They have a CSS display value of none. &gt;* They are form elements with type="hidden". &gt;* Their width and height are explicitly set to 0. &gt;* An ancestor element is hidden, so the element is not shown on the page. What CSS properties do all 3 of them have?
How about something similar to this, instead of checking if they are hidden, checking if certain ID's are clicked?
Well said
Do you want to learn java or javascript? This is a thread for javascript...but, http://codingbat.com/java is good practice for beginners in java.
Could you justify the statement "simple things in JavaScript are now complicated"? They're no more complicated than they've ever been. In fact, they're simpler than they've ever been. ES2015 modules exist (and are actually *not* simple, which is why their implementation story has been rocky). CSS scoping exists, and the reason it's not ideal is because CSS and legacy *is complicated*. I just don't understand what you think is complicated that could be simpler. I understand that web development is not immediately simple by default, but I simply don't think it's possible to provide a "native, simple" solution that encapsulates all the needs. We can speak in vagueries as much as you want, and your side's truisms will always sound vindicated ("simple should be simple!" is a very agreeable tautology), but I'm not hearing any actual points of frustration along with actual solutions.
Aren't we here talking about the many steps and configuration edits it can take to set up a toolchain? It doesn't have to "encapsulate all the needs", that's part of the "complicated things should be possible" aspect. For instance, dude above suggested native Require that works intelligently. That doesn't seem too much to ask. Or a CSS that natively supports variables so it doesn't require a compiler pass. 
&gt;I have set up a jsfiddle displaying some weird behavior. ... can we see it?
No!
Thanks, yeah working a lot on my GH profile right now. I've got several small apps/projects on there, but as of now I don't have any tool/library that I'm building, nor have I started contributing to any larger scale open source projects. What would you recommend diving into first?
My bad. He works at Space-X and it is proprietary technology.
&gt; dude above suggested native Require that works intelligently Do you mean the node require, which works intelligently, or ES2015 modules, which work intelligently? &gt; CSS that natively supports variables so it doesn't require a compiler pass. [Like this?](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables)
&gt; _Autistic screeching_ - omril
https://jsfiddle.net/stephenp2017/nk6Luv9q/4/ lol sorry
I can't really fix that code, it's for a Chrome Extension. But yes it looks like there is a change event on text area. I checked it with monitorEvents(); and it pops up when i click away from textarea. Is there any other way around? Can i somehow use that "change" event?
You could also do something like `$(‚Äú#id1:hidden,#id2:hidden,#id3:hidden‚Äù).length`. (Apologies for the improper quotes. I‚Äôm typing on mobile.)
I managed to get one of them working. I updated line 70 in the JS to: sideB = (sideA / Math.tan(DegreesToRadians(angleA))).toFixed(2)
It depends what type of element they are. If they're checkboxes, you can check their state. If they're buttons, you would need to set up a click handler to track if they've been clicked.
Correct. Unless you wrap it in a promise and use `await`: const https = require('https'); const program = require('commander'); const csv = require('csvtojson'); const getOrganization = function() { return new Promise((resolve, reject) =&gt; { var options = {....}; const req = https.request(options, (res) =&gt; { var resData = ''; res.on('data', (d) =&gt; { resData += d; }); res.on('end', () =&gt; { resolve(resData); }); }); req.end(); }); } program .command('show-orgs') .description('Lists all organizations in JSD') .action(async () =&gt; { var dat = await getOrganization(showOrgs); //Do stuff with dat here });
I think the problem is that position().left isn't giving you the coordinates you expect. For example, here's a box rotated at a 45¬∞ angle: https://i.imgur.com/No3z3e3.png. the value of the box's ```left``` property is 0px, but because the box is rotated, the left corner of the box is going to be to the left of that, at -20px or so. When you use position().left, it's going to tell you where that left corner is, so when you add 10px to that, you end up with -10px, and then when you set ```left``` to that, it shifts the whole box to the left. I think you could solve this by creating two `div` elements instead: an outer one that moves around, but never rotates, and an inner one that does the rotation. That way, you could measure the outer one to have an accurate idea of where the object is.
oh lol hi! thats my thingy! its being used at Netflix now thats wild isnt it. i have some ideas for more features, hit me up if you want to contribute
Someone already posted the obvious answer of separating the checks, but you can do better here. Your code sample checks if any of the IDs is hidden, whereas you want to check if all IDs are hidden. We're going to be using two different forms of opposite to get there. Think of other things that are true when all IDs are hidden. In this case a useful idea is that when all IDs are hidden, none are visible. Note how 'all' changed to 'none', and 'hidden' changed to 'visible' - two opposites (kind of how a double negative is positive and such). Now to try and apply this to our code. There's an opposite for `:hidden`, namely (wait for it!) `:visible`. Next, we can obviously negate our entire boolean argument via `!`. So we can try the following code: `if (!$('#id1, #id2, #id3').is('visible') { }`. This sort of reads as 'if not any id is visible', or turned into more proper english 'if none of the ids is visible', which is the double negative we were looking for! This is a very generic concept. For such a function that works on a collection of sorts, it will base its results either on whether *any* element matches the predicate, or whether *all* elements match the predicate. And these two always have this interaction via double negatives. Example, if all conditions are true, then none (not any) of the conditions are false. You can see the same principle being useful in other areas such as boolean logic for `if` conditions: `a || b || c === !(a &amp;&amp; b &amp;&amp; c)`
This would be nice as a supplement to sass-lint. Where the dependency on sass-lint and its version is controlled by the user, rather than this package.
great laptop battery!
I remember years ago people explicitly warning to not have CSS in JS, what happened?
except for the case of isomorphic/universal javascript running in node.
There was a long standing PR open, I decided to publish as a seperate addon in the meantime. If you're interested, here's the link: https://github.com/sasstools/sass-lint/pull/1089
thanks I've managed to fix it using this advice.
Seems to be an issue with OS/Browser/Device then. When you refer to "prompt" do you mean the browser's "window.prompt()"? 
Seems to be an issue within Chrome. Firefox, IE, and Edge all pasted and displayed the info fine.
Ah yes, no wonder this is familiar, I was looking for this before. Is this a no longer maintained repo? Where did Dan go?
Not too sure. He had mentioned that he had other responsibilities at the time.
Not sure I understand, but you can put event listeners as high up as the window object. You can listen for keypresses without the presence of any inputs by doing so.
That sounds simple enough and particular enough to your situation that you should probably just write it yourself, it sounds like it would take next to no time at all to write.
[removed]
Hmm good question. Complete, working applications - yes, ready to install - yes some are even deployed on example sites, docs - need work, tests - no. So, I‚Äôve got some work to do. Right now, most of my projects are standalone apps, but I could turn them into useful packages/modules that could be included in a larger project. Thanks a ton for your input, much appreciated!
Learn grid while you're at it. If flexbox has its place but if it's layouts you're wanting to create, you may as well do it the future proof way.
Serious question... how on earth does anyone actually working full time as a dev ( and with kids ) get anywhere near doing this in less than ten years? My GH profile has one library I built in 2010. :( 
I'd do something like this, although your implementation is good. let sentence = "This is a sentence" let xsentence = sentence.split.map((letter) =&gt; { letter === ' ' ? 'x' : letter }) 
I have opened a [Stackoverflow](https://stackoverflow.com/q/49766748/1253312) question for this.
Here's an example of a more complex algorithm I implemented using this library: ```js import { type, Obj, Arr } from "@masaeedu/fp" const mapRec = f =&gt; match( type([Arr, Obj]), [Arr, x =&gt; Arr.map(mapRec(f))(x)], [Obj, x =&gt; Obj.map(mapRec(f))(x)], [otherwise, f] ); mapRec(s =&gt; s.toUpperCase())({ foo: ["foo", { bar: [["baz"]] }] }) // { foo: ["FOO", { bar: [["BAZ"]] }] } ``` I use this to perform templating of user variables in arbitrarily structured config files.
Bro, do you even Java? ^^^^^/s
This should do it: https://pastebin.com/3JLyrD9x Just past this over the `SolveForAngles()` and `SolveForSides()` functions. It works for me in the codepen.
Hmm, everything seems to be working well with Gantt interactivity and everything else. Maybe you noticed some post about some small bug, I don't know, but those, if any, are usually fixed quickly. If you can give me a link, we would be glad to take a look and tell you more.
bookmark [MDN](https://developer.mozilla.org/bm/docs/Web/JavaScript) for any help. Good Luck.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://developer.mozilla.org/bm/docs/Web/JavaScript) - Previous text "MDN" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Hey honestly not too sure, do you have a github repository I could take a look at?
Yes - don't post vague and annoying help requestson that do nothing but irritate us.
Course link spam
Apparently not.
You probably refer to inline styles. Modern CSS-in-JS libraries generate actual CSS that they insert into a stylesheet.
Nice article. Maybe this should be in r/programming since it doesn‚Äôt seem JS specific and would be a nice general read. Waiting for pt 2!
Thanks man! You're awesome!!
You're welcome :)
All working thanks so much for your help. I noticed you also added a: console.log('-1', angleA) What are those for?
Thanks for your help, managed to get it working
Thanks man! will do
Thanks.. i would like to hide the key but the Javascript runs client side.. i don't know how i could hide the API-key there. You can just open the debugging menu and see the main.js, where the api key is included.
That's good and all but where do you get the ideas from?
It's a really good point! Maybe the most difficult part. I will discuss it in the second part.
It's a really good point! Maybe the most difficult part. I will discuss it on the second part.
It throws a reference error because in your modified version, `validatePass` is not **hoisted**. What you have to do, is to change var validatePass = function () { ... } to a function declaration function validatePass() { ... } A function declaration is hoisted, which means the function is available in the whole surrounding scope.
Lol alright old man, you still use an abacus? Maybe we should go back to writing code in assembly too; Just seems like you're too slow &amp; incompetent to keep up tbh
Nice! Side projects are the best way to learn IMHO as you don't have a lot of pressure and you can experiment with things.
Guys, I'm very proficient with JavaScript but just can't do any projects or lack the motivation to do so? Any help?
 window.onload=function(){ var form=document.getElementById("myForm"); var firstPassword=form.pass1; var secPassword=form.pass2; firstPassword.onchange = validatePass; secPassword.onchange = validatePass; function validatePass(){ console.log(firstPassword.value); console.log(secPassword.value); if(firstPassword.value === secPassword.value){ firstPassword.setCustomValidity(''); } else{ firstPassword.setCustomValidity('The two passwords must match.'); } }; }; ok this works and I understand hoisted. This way was much easier to understand. This also gives me another point of confusing. This part firstPassword.onchange = validatePass; secPassword.onchange = validatePass; why does this work. If i made a method surely it must be because I am calling a method firstPassword.onchange = validatePass(); secPassword.onchange = validatePass(); 
gh-pages https://github.com/pungiish/PWA/tree/gh-pages master https://github.com/pungiish/PWA/tree/master link to github pages https://pungiish.github.io/PWA/ If you'll have the time, please check it, i am completely lost. Thanks!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [pungiish/PWA/.../**d46101fc228299ee3f9b87e690e9656723220b34** (master ‚Üí d46101f)](https://github.com/pungiish/PWA/tree/d46101fc228299ee3f9b87e690e9656723220b34) * [pungiish/PWA/.../**9db7a43ff99d7da86d627729a7258507d19cbb5f** (gh-pages ‚Üí 9db7a43)](https://github.com/pungiish/PWA/tree/9db7a43ff99d7da86d627729a7258507d19cbb5f) ---- 
Or to do things differently, heaven forbid. There is much more architectural homogenization in web development than can be justified from an objective engineering standpoint, and it can get dreary. Dare to be different.
Absolutely!
Your question is, why \[1] `firstPassword.onchange = validatePass` and not \[2] `firstPassword.onchange = validatePass()`? Whenever you add those parenthesis on the right hand side of a value (function objects hopefully), you immediately apply the function with a ordered set of arguments. In scenario \[2], you execute the function `validatePass` in place without any condition and store the result (`undefined`) in `firstPassword.onchange`. In scenario \[1], you store the function `validatePass` in the property `onchange`. Each time the field changes, the browser calls whatever is stored in `onchange`: `firstInput.onchange()` (in reality it's more complex but you get the point). As a result of that, `validatePass` is only executed/applied if the browser decides to call the onchange-property. A tip: Using the properties starting with `on` is not flexible bacause you can only assing **one** function/event listener to it. If you use the method `addEventListener`, you can add more listeners afterwards: firstPassword.addEventListener('change', validatePass); 
I find it helps to create a plan before starting. Pick an application thats been done before. Look up Gherkin and Cucumber and use it to define features that you‚Äôd like to have. It helps to have more specific tasks in mind so that after you finish setting up your boilerplate for the app you can work on one feature at a time.
Additionally, the sheer number of choices when it comes to framework, dev tools, etc can be intimidating. It helps to ‚Äújust pick one‚Äù that is reasonably popular and start from there. Something like the create-react-app package is useful for beginner-intermediate because you dont have to think about your workflow, although you may find things you don‚Äôt like about it and you can keep those in mind if you ever want to start totally from scratch.
My side projects are my therapy for when work is going to hell. I can't control everything at work (pretty close these days, but there's still 4 levels above me that can shit down), but I can at least make all the calls on my own projects. At this point, a bunch of my side projects are now modules I use at work to make my life easier.
Use AJAX! thanks folks I‚Äôll be here all day 
Side projects come in different shapes and sizes. Have you thought about volunteering time towards an object source project you use?
Create a repo called "messing around". Just start programming something. Even if it's something that already exists. You'll quickly just start to think of new things, and if you don't, you're at least learning how the fundamentals of the existing application/library works, which is just as valuable. 
Create something that makes your life easier 
This reads like a children's book
I think you're right. Specifically with `e`, any assignments before get wiped once the assignement to `"wm622439"` happens. The only reason it would make sense to do those other assignments is if `e` was a setter with some additional functionality built in, but this looks minified meaning that wouldn't be the case. Probably a bug, maybe even one introduced by the minifier itself.
Looks interesting.
Programmers who want to learn or refesh JavaScript are the target audience of my books (free to read online): http://exploringjs.com
This is great change to plug [Netlify](https://www.netlify.com/). It's a web hosting platform for client side websites like yours. The free tier is very generous (I haven't run into any issues) and it comes with loads of extra features that GitHub pages doesn't have. For example, Netlify lets you hide environment variables for exactly this purpose. May be worth looking into for your next project!
Yep as commas ignore the return value of the previous entry - setting e in an earlier comma and then setting it again in a later one will always overwrite e, regardless of the true / false outcome of a previous statement. Of course unless e isn't a standard variable
I tend to go with the first option. I find it easier to read and edit and any advantages of writing the compressed version are negated when the code is minified before deployment. üëç At the end of the day, the most important thing is that you're consistent on a project to project basis. 
I think side projects are the only ones where I learn more than a couple new tricks. Most professional work is building a CRUD app with an esoteric interface.
Try eslint, follow (for example) Google‚Äôs style-set, and go from there. 
I suggest playing Screeps as a side project It is a MMO game where you dont play...you code in js or ts an AI that will play for you....really nice
/r/ChoosingBeggars would to have a word with us!
Here's a sneak peek of /r/ChoosingBeggars using the [top posts](https://np.reddit.com/r/ChoosingBeggars/top/?sort=top&amp;t=year) of the year! \#1: [Lol "work"](https://i.redd.it/4eu2q8sqhb601.jpg) | [1300 comments](https://np.reddit.com/r/ChoosingBeggars/comments/7m9p47/lol_work/) \#2: [I need a free 100-mile bus trip for 20 people and don't you dare offer me any less.](https://i.redd.it/bmojp48j6t401.jpg) | [2472 comments](https://np.reddit.com/r/ChoosingBeggars/comments/7kr5as/i_need_a_free_100mile_bus_trip_for_20_people_and/) \#3: [Guy wanted me to make him a queen-size blanket.](https://i.redd.it/ag3lszg48un01.png) | [2865 comments](https://np.reddit.com/r/ChoosingBeggars/comments/86ym2x/guy_wanted_me_to_make_him_a_queensize_blanket/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
I dislike how companies put tons of value on side projects. I'm programming 9-5 M-F. I have other interests and hobbies besides programming, so I'm not going to do it in my spare time unless I REALLY want to make something. Luckily I enjoy the programming I do at work (React). Imagine doing your favorite (non-programming) hobby for 40 hours week, then an extra 10-15 on the side....I'd be so burnt out. 
Wouldn‚Äôt you need to pass in the error along with the data? so the end would be &lt;code&gt;.done(function(err, data){ if (err) { // something with the error } // something with the data }&lt;/code&gt; I might be understanding the issue wrong though 
Part 2 will make this article. I don't need anymore convincing that I should start a side project, but I don't know WHAT to do. And I hope the advice is different than "Do something that inspires you" or "create something that fixes a problem for you". Too many times when I research before starting a project, I find a robust and reliable solution already available. Sure I can just make my own, but then it only becomes a learning project.
I guess I thought I was doing that in the error property of the AJAX options on that execute method. In any case, I tried api.getListItem('Test',1).done(function(err,data){ if(err){ //Here's an error } else{ //Here's data } }); And that did not work. But thanks for the suggestion! 
Here in India I'm yet to find a 40hr job. All the jobs I have joined till now expected 60 hours. And when I say that I expect no more than 40 hour weeks to possible employers they say I'm probably not the right fit for their requirements. fml
Made a local K8s tool that watches for file changes and auto rebuilds your application inside of a docker container. Most of the application was written using JS :) https://github.com/MinikubeAddon/watchpod
[removed]
Usually this is done with what's called a "look at matrix".
You can use Prettier and not have to think about this
Thats a svg, not a image. With svg you have more programatic control. But you can get a good results with image too, you will need to play with css transform property. But with css/image you will lost a bit of control to manipulate https://www.w3schools.com/cssref/css3_pr_transform.asp
That requires an account sign-up just to see what the course is like, I'm doubtful.
thanks for the link. I will check it out :\)
And I would *love* to use all the fun ES6 stuff. Unfortunately, there are some limitations to working with SharePoint 2013 at the company I'm working for. Notably, *the* browser is IE and SharePoint 2013 pushes all IE browsers down to IE10.
If you have more than two or three properties, definitely use the expanded version. Use the expanded version anyway if you're not sure how many properties you'll eventually have. Some linters recommend putting spaces after the `{` and before the `}` if you're declaring the object (or subobject) on a single line.
Don't post code here if you don't know how to format it, use JSFiddle or something instead
Are you aware that there already is a great library that achieves the same thing you're trying to do, and it already uses fetch/promises and all that fancy new stuff without issues? https://github.com/SharePoint/PnP-JS-Core/wiki/Getting-Started:-Install-&amp;-Use Just make sure you do what is mentioned in the Polyfill section since you have IE users.
JSFiddle is better, since it's *live* - people can actually interact with it.
When in doubt, I always look to do a clone of a favorite website/app. I say this a someone still relatively new to the field, and still learning.
&gt; almost all production code in competent projects A vote of confidence I absolutely don't deserve.
This is where I'm at. Well... mostly. I once wanted some online functionality that (as far as I can tell) doesn't really exist, so I decided to build it myself. It was insanely work-intensive, and I started to build it when I didn't know shit about code, so I got about 98% done and realized I had to rewrite the entire thing. So I spent roughly a year building this site, only to realize I fucked it all up. It was awesome. In that time, I tried to think of literally any library that I could put on github or any project that I could use. Everything I thought of was already done. So here I am, 2.5 years into the business, and I have no github that I can show prospective employers, and it really sucks.
When in doubt use Vue, Vue is life \- Vue shill
So... looks like they're using svg for the fox head... that's gonna be complicated. Here's an **extremely** rudimentary example of how to get 3d to interact with mouse movements: https://codepen.io/anon/pen/bvZZvV Note that I can't math very well to figure out the proper calculations for rotations. Maybe /r/math can help with that, lol!
Yes, your key can be seen while debugging. Also, hide it from GitHub too... Just make a new commit edit your code put '#' in place of API key.
To hide your key from debugging console, pass it through a hash function or something like that. Encrypt it somehow. Research on that. And please tell me when find the solution ;)
[Shorthand object initializers were added in es 2015](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Specifications)
Not sure. Babel usually works fine for me. Add your grunt file for a better answer. - Add a file watcher so you recompile whenever your files change instead of everything all at once. - Consider using Buble instead of Babel. It's faster. - Make sure it's not an issue with something else (Node.js or slow computer). 
They're called shorthand property names. Introduced in ES2015. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer
Maybe it's cuz I'm young but coding is one of my hobbies. Always got ideas and love learning new tech. If you work 9-5 idk why companies would value side projects. Especially if you'd be using the same tech anyway
Use an online pastebin. yikes. 
Hi /u/imran0121, For javascript help, please visit /r/LearnJavascript. Thank you!
Was anything in this "article" really worth writing and linking to? If you can't figure out this kind of dumb shit on your own, get a new profession, "like mopping the floor at a glory hole in Queens," to quote Zed Shaw
Absolutely. The very first thing I every built for the web was an attempt at a Facebook clone. At the time I only knew HTML, CSS, and just enough PHP to echo the date to the screen. I had to learn a lot just to allow a user to submit a post and then be able to display that post on the page. It's really great looking back at the early projects. I didn't know anything about rewrites, so if I wanted the URL to be site.tld/username/page - I actually created a directory for that user, and cloned a template index.php so the URL would work. 
Don't post code here if you can't format it, use JSFiddle or something instead. Basically, you need to have a standalone reference to the function you pass as a parameter, and then you can remove the listener by referencing that same exact function. const myListener = () =&gt; console.log('myListener'); const elm = document.querySelector('#my-element'); // ... elm.removeEventListener('mouseleave', myListener');
[https://github.com/getify/You\-Dont\-Know\-JS](https://github.com/getify/You-Dont-Know-JS)
I suggest very small, tiny size "wins" to get the motivation &amp; reward feed going first. A mentor once told me: Break down any side project to the smallest possible task and lay out those objectives. Using something like a Trello board. Something so small that it is as silly as "init a repo in GitHub" and when you're done, drag the card to the "done" column. That gesture is mentally rewarding to will keep you wanting to do the next thing. I struggled a lot on this before because I wanted to build / achieve [X]... and never got the motivation to do it because it's a huge mountain to climb. But after breaking down tasks into small granular level, I can start 'accomplish' something and kept me going. Good luck!
It's super easy to create new, deployment-ready projects using best practices nowadays: * Vue `npx vue-cli init nuxt-community/starter-template` * React `npx create-next-app` * Angular `npm i -g @angular/cli &amp;&amp; ng new` (don't know if npx works with it)
hey sorry I fixed it
What about a blog warrants client-side JS? I remain a fan of Jekyll (learning JS and Ruby isn‚Äôt that bad), and bearish on the move toward pushing everything client-side.
Also thank you! I thought it was cleaner to have it all within one function.
But it's not only client-side ‚Äì it's both sides. :) Fast interactive navigations and pre-rendered HTML without switching templates or context.
Yeah I've played with `vue`, but I've stayed away from the project cli generators because they seem a little magic to me - I like to know what's in my toolchain and what my dependencies are, etc. I should probably try them out anyway.
100%. I just did this, and it actually made me appreciate my day job even more.
Gotcha! I can try taking a closer look when I get home. Was on mobile while I went to the bathroom so I only glanced over it. Hopefully you figure it out though! 
Part 3: Why you should finish your side project.
Slides: https://speakerdeck.com/getify/thinking-thunks
&gt; I‚Äôd it‚Äôs both sides, it‚Äôs not a static site. I'd say when it works without JS it's a static site (which these new generators do). :) That's fair - a blog is fine without JS and I'm all in for progressive enhancement, but I do enjoy page transitions and interactivity when not only reading one article though.
8. Potentially have a small stream of revenue or potentially make enough to live off your project
Nice, didn‚Äôt know of it automatically getting rid of unreachable entries
It's slow even with the Babel CLI, so I guess that answers that -- it's just a bit slow. =/
Indian work culture sucks. Even Indians in America have similar behaviors. They bring their working culture to America and it rubs us the wrong way
I think there are lots of good sites and (e-)books on this, but the reality is, if you want to learn something, you've got to just start trying to do it. In this case, write some javascript. Get stuck on building something? Time to google :D
This account is a spammer. Take a look at his user page.
Which companies expect 60 hours if I may ask? I'm Indian and i've interviewed with a lot of Fortune 100 companies who only had a 40hr job week.
Here‚Äôs one: https://github.com/kreatemore/validate Not sure if there‚Äôs a wide need for that - at work we will need to do this: Get an object from local storage -&gt; validate each property against a set of rules -&gt; if something‚Äôs not right replace the object with a sensible default And I really wanted a repo where I can litter the readme with fancy emojis
It looks like you need to add [libraryTarget: ‚Äúumd‚Äù](https://webpack.js.org/configuration/output/#module-definition-systems) to the build option in your webpack config. By default webpack tries to expose your library via a variable, which is why trying to load it as a module won‚Äôt work.
Ahh ok, thanks for the info!
Thanks for that! I was hoping this was going to be easier than it's turning out to be but oh well, haha.
It doesn't do anything actively to make that happen. It's the absence of a strong reference to its keys and values that allow normal GC to work properly when all other references outside the map have gone away.
Yes, there are many scammers like this. Some even rip off torrent tutorials and upload on uDemy as paid course for $.. 
If you are focussed on learning milestones and through put, go ahead and get a free trello account or even just create a project plan with a google doc. I create simple feature stories and task out the feature to keep me on task. I also use branches per feature and merge into stable when the feature is complete. This is probably overbuilt for a small project but if you have big dreams, (my project is full stack MEAN with eventual passport integration, e2e and unit testing and docker deployments) it really keeps you on track and prevents wasted hours of frustration if you decide to take the project a different direction and need to undo stuff. Wasted time and frustration was the biggest mood killer for my personal projects. Keeping development lean and fast meant I could mock up some HTML in 25 mins one evening over a glass of wine, or pound api code for 5 hours another night when I couldn‚Äôt sleep. 
This. My side projects are now things like Japanese carpentry and baking classes. :)
These are ES6 const semantics. The reference is const (s you can't re-assign `o`), but the contents of the reference may be mutable (hence you can still change properties of `o`).
Damn. I never get ideas. Whatever projects I do, I tell the other person to give ideas. Be it crazy. I don't mind. I am willing to learn new things from scratch to do it. But I can't come up with ideas :/
God speed! :)
This is also the obstacle for me as well, but I think it shouldn't even be something super original. If you think this way you can start creating something, and that may lead to new ideas. It also may be the case that while developing, you may ran into a problem that can be generalized and solved with a library, and you can implement that yourself! But am I doing any of this? No. 
Yeah, that way if for some reason the code fails or JS is not implemented or perhaps even for a screen reader, you still have an interactive form element.
Very cool - I don't know what use I'd ever have for it, but still very cool!
Samsung R&amp;D Bangalore has 45 hour policy. This includes all sorts of breaks. I later joined Swiggy wherein I go at 11 and come by 6, sometimes I work from home. Housing.com also had very flexible timings.
i tend to find remaking classic games more fun when i was learning react. tic tac toe, snake, maybe start building a little WASD rpg kinda thing where a guy goes around attacking stuff.
Is it right to think that these are the kinds of jobs that would be highly sought-after and relatively (compared to the Indian workforce) rare? American asking
Okay, it might have been rude.
since when svg is not an image? What you mean is - svg is vector image which is represented by set of points and/or mathematical functions thus allowing us to easily manipulate them programmatically. Similar effects can be achieved by css animations or canvas.
I'd add one thing - within that one file give them bigger step like 10 or 100. That way when you'll need to put sth between 2 elements you could use middle values (e.g. 15) instead of reordering everything
Assuming this is a question about the warning in the terminal image. Remove the logo.svg import line from the top of App.js It says so clearly in the terminal. Learn to read warning/error messages and you will be quickly on your way to create some awesome apps :-)
Too be fair, most people Ive worked with have used them purely cosmetically. But then again, I feel like a lot of JS programmers view JS that way, without realizing the power behind each individual thing. 
It doesn't matter if it already exists. Just write something that you find interesting. I can't tell you how many small projects I've written which started as "how could I build this?" It's like a carpenter who never builds bird houses or tables. Obviously those things exist but you get to approach it your way, learn things along the way, and have something neat to show at the end of it. 
OP here, I know that arrow functions are more than cosmetic changes. And if you read 3 lines ahead, I do talk about my sarcasm. Please have patience while reading sir 
Tabs as default? I‚Äôll pass
Hi /u/GuiPrazeresYT, For javascript help, please visit /r/LearnJavascript. Thank you!
Quoting from the article &gt;The eviction of an unsued key doesn‚Äôt happen immediately. It depends on the garbage collector‚Äôs mood. You shouldn‚Äôt worry about this part though. As @bterison_ says GC treats the unreachable entries similar to any other unreachable data. 
I am sorry, I am talking about Transpilation + Polyfilling done by babel.js. 
The key function you‚Äôre missing is [String.prototype.split](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split). With that the answer is an exact description of what you write.
On my phone ATM but this could work: `example.map(s =&gt; s === ' ' ? 'X' : s)`
I have already used slpit to separate each element with commas. I guess I need help with the use of split within the creating of the different elements of the whole array. 
Youtube and your fave ide. Get rockin, you can do it. And it's way easier than c#, .net and its various frameworks and ancillary technologies. Javascript is very loose. Everything is scoped everywhere and everything can be anything and nothing all at the same time. Happy coding! 
i recommend the 30x500 course for this, it's helped me a lot!
&gt; 30x500 Seems pretty scammy based on this thread. https://news.ycombinator.com/item?id=8119354
I‚Äôm learning JavaScript at the moment also. I know how you feel. What I found that helps for me is toggling between JavaScript books, online IDE tutorials, videos (paid Lynda or free YouTube), reading through MDN documentation and main thing is practice. A lot of it, until it sticks. Switching up my learning style seems to be working for me.
First understand basic syntax and tutorials. Make a project that you're interested in with an appropriate size and complexity for your skill level. Google when you run into problems, every so often ask knowledgeable people to glance at your code to see if there's something obvious that you could be doing better. Repeat. If you have the knack for it, eventually you'll be reasonably competent at building things on your own.
&gt;Javascript is very loose. Everything is scoped everywhere and everything can be anything and nothing all at the same time. As someone who knows the ins and outs of Javascript, I feel like *this* is what most people struggle with.
you can find a critic for everything and anything out there.
I had this issue when starting. I spent 8 months learning with tutorials vefore realizing I was sabotaging myself. The 1 and only thing that helped me was changing my thought process. You have to look at everything as a cooking recipe. Either that, or breakdown your functionality you want to acheive in steps and then break those steps into smaller steps. If you need to use a pad and paper, then do it. You'll find yourself getting more and more confortable as time goes on solving problems this way.
As the comment on SO says, split on period first.
The first app I made was for Android, shitty game (literally) where an ass is floating above the toilet and you need to drop the poo into the toilet. Took whole weekend, but I got a working and buggy app I could call my first. Revisited the project one night couple of months ago, this time as a [website](http://aim-to-toilet.herokuapp.com). Now I'm working about something related to climbing, which I do a lot. 
There's always someone that's putting in extra. True, the companies shouldn't expect you to work outside of the 9-to-5, but imagine you're responsible for hiring and you have two similar candidates and one of them has a bunch of repos. Who do you pick?
[github.com/lukakerr/hackd](https://github.com/lukakerr/hackd)
I recently started learning JavaScript. What‚Äôs worked for me (so far) is to keep an open mind (i.e. don‚Äôt apply concepts from other languages) and to keep playing with it. There‚Äôs no better teacher than experience. ;-) Good luck! 
Depends on what energizes you sir. I enjoy going through spurts of side projects, put in closer to 50 hours a week, still have plenty of non code projects to work on, parent, lift, but not all the time. Cycle in the motivation when you have the energy (not necessarily the time). Projects don't have to be huge projects, just enough to pick up some new skills and scratch your itch to create :)
Having an idea is easy. Starting an idea is easy. Finishing an idea is hard. 
That's so cool. 
Most of the companies that I worked for like TCS , Infosys say they have 40 hours policy but it's not a 40 hours in the end. My managers in the above Indian companies have always paid a great amount of importance for how many hours I was in office but not if the work was finished on time or not. 
I was self sabotaging myself in the same manor for ~2 years ! As a result I can compare and contrast a great number of entry level learning resources, but I still can't make a calculator . Three things that I believe hurts the people who want to learn Javascript are -the failure of people to distinguish the differences of using Javascript for basic DOM manipulation, actually understanding how to program and understanding how to program using the Javascript language -learning resources that never cover testing, where you're forced to break problems down into their smallest parts -how hard the community hypes frameworks without emphasizing the importance of learning what and how to program in vanilla Javascript/es6 first .
done callback executes only in case of success case. For logging errors, you need to chain .fail callback. api.getListItem('Test List',1).done(function(data){ //Data is either a response or an error. }).fail(function(err) { console.log(err); });
https://www.udemy.com/understand-javascript/learn/v4/overview This would give you a comprehensive picture on JS language. worth buiyng the course.
If you like doing it, keep at it! You'll improve because it is what you want to do. If not, let it fall by the way side and do more of what you like. Happy coding! 
In my opinion, you shouldn't be learning/using React (or other frameworks/libs for that matter) if you don't have the foundation (which is HTML, CSS and Vanilla JS). What you can do is trying to read JavaScript books, or following some study guides like this one: https://github.com/P1xt/p1xt-guides/blob/master/README.md Good luck, and never give up! You'll always improve with time, you can't acquire experience without going through problem solving and developing anything, from side projects to real paid work, just keep at it.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [P1xt/p1xt-guides/.../**README.md** (master ‚Üí 0f68f85)](https://github.com/P1xt/p1xt-guides/blob/0f68f85ecdcf9be1ba86a1d616057d471219f0c0/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dx7wfko.)
I agree with you! Somehow React made sense to me but I do think it's because in the curriculum they gave lots code examples to follow. I appreciate the kind words and resources!!
Been working in web for like 10+ years. Sometimes I get stuck on stuff for 1hr thats like a 2 line fix. We all gaped on code sometimes and man when things start going bad I am really quick to get down on myself. You'll become a better coder when realize you are dealing with a robotic child and absolutely none of this should be a reflection of yourself. If you are learning JS and trying to do anything out of anything 'general' React is not the place to start. Generally I'd start trying to understand what is blocking code and whats not blocking code. Also understanding which part is HTML, CSS and Vanilla JS can be helpful. If you are trying to make a serious go of a career as a programmer and not specifically JS/Node; I suggest trying another language. One thing that always made me a better code was jumping into a new language. Try some Ruby/PHP/Go. Something blocking. That could help you get a better understanding of whats going on. Otherwise you'll have to get more specific about where you think you are falling short ;)
No worries. Meditating helps too. Learn how to get in that state and break down your big problem into little solutions, visualize them working together... Thought experiments. Keep at it though. It takes lots of practice to get good and beyond good... 
*Browses Reddit for 4 hours a day*
Most of my creativity and stamina are pretty burnt out at work working an 8-5 job including lunch break. Plus, my library ideas are exhausted and used all at work :( Idk if I'm motivated enough to write a modified version of them and use them on my portfolio.
I had an idea, and that motivated me to learn to code. I spent two years taking programming classes at my local community college. I never did finish that idea (that last 5% is a bitch), but I got pretty okay at writing code. 
You can start by turning all those callbacks into Promises instead. Not directly related to your question, but it'll surely help a lot anyway.
I can't think of a better place to start than https://www.w3schools.com 
JSON is a text-based format. If you're only using ASCII characters then I suppose you could encode it in the ASCII charset to minimize the size of the text, but is this JSON going over the wire? Why not just compress it with gzip?
JSON is *notation*, kind of like HTML, not an object type in itself. You probably want to convert an object into a string and then use any of the many string compression libraries.
Tablet, not laptop ;)
i‚Äôve definitely used this site thank you!!!
This is great! I love the idea and the execution is wonderful.
Damn right. After programming all day the last thing I want to do is program more. It is like saying after a welder finishes welding all day, they should go home, and weld on their free time. The human mind needs a break from doing the same task all day. I try my best to step away from screens after being behind a screen all day.
An additional 6kb and you‚Äôve got Mithril. Which is faster than React, Vue, and Angular across the board.
If you share what is most confusing for you about JavaScript may be we can help you better. Also what learning materials you use is very important sadly there is too many low quality articles around. Try to focus on one thing at a time. Another thing that might have impact is from what language you are coming from is it Java/C# or Python/Ruby ?
I'm reminded of the Task monad in folktale. Personally, I think it may express these kinds of interactions in a cleaner and more compostable way (forgive me, my fp is rusty): // ajax :: String -&gt; Task Error String // f :: a -&gt; b -&gt; undefined const f = thing1 =&gt; thing2 =&gt; console.log(thing1, thing2) ajax('/1').map(f).ap(ajax('/2')) // or more cleanly liftA2(f, ajax('/1'), ajax('/2'))
Hi, I helped develop the Lighthouse SEO checks. Thanks for suggesting the tool. It's useful for finding low-hanging fruit like setting proper canonical URLs and having valid robots directives. I think the question in the title and explored in the article is digging at a more systemic problem. Beyond the page jumping through the necessary hoops to be noticed and understood by search engines, SPAs have a particular characteristic to keep in mind, which is its newfangled JS-based rendering. This may pose a problem for search engines in two ways: - As the article suggests, using JS to render a page may inadvertently hide the content unless the search engine uses a modern renderer. Google does, but some content may still fall through the cracks. - Google's renderer is based on Chrome 41. Many of the web APIs in use on websites today were not around when that browser was released, so sites absolutely must use feature detection to make sure that they're not throwing JS errors when the search engine attempts to render the page. Even if you look at your analytics and 100% of your users are on evergreen Chrome, serving raw ES6 with fat arrows and all will break for Googlebot in Chrome 41 and your content won't be indexed properly. We're exploring ways to add a new audit to Lighthouse that checks for the second case, when the page makes use of unsupported APIs. It's tricky. You can follow along on GitHub if you're interested: https://github.com/GoogleChrome/lighthouse/issues/4360
I'd recommend [notepack](https://github.com/darrachequesne/notepack)
This is looking REALLY exciting. Honestly, this has more chance at being the closest thing to a JavaScript -&gt; WebAssembly compiler than TypeScript. Starred and waiting eagerly for the WebGL demo. A threejs port in walt would be something I would love to see.
Make sure you're careful with how you use looped css animations! Reddit actually has a bug right now regarding this. Make sure the element isnt rendered at all
If those methods can be converted on promises it will make your life much easier and code much cleaner. You can also use async-await to make code more readable and look more synchronous. If you can't use promise you can give a try to https://caolan.github.io/async/. This is made to better handle async on a callback pattern. 
I feel like there's a misconception behind side projects. A side project doesn't have to be a coding project. It can also be a hobbie or just something you do on your own time.
The problem with JavaScript is, it has been evolved to have different patterns (from different language) in the javascript way. So if you are coming from other language lot of things might feel confusing. Also it will seem more confusing if you have done only synchronous programming, as JS is async and lot of patterns revolves around it. What will be the best way to understand JS will be to understand whats the javascript way. Learn the main concepts like, prototype inheritance, closure, event loop, async concepts (promises, callback, await) etc. Also don't start trying to learn everything on start. Try building something and for each problem see whats the js way. After some time thing will become more obvious and learning path will be smooth.
Before I would say I‚Äôm fully in favor of such attitude. Now that this kind of attitude brought me close to having a burn-out, I‚Äôd rather tell people to think about this twice. 
The primary difference is the latter relies on an externally defined function, which matters if you're trying to "encapsulate" functionality (often that's a best practice).
I'm not trying to render html inside text area. User submits textarea form. I parse out the tags from the content and take them to another page where what they input into the textarea is displayed in a &lt;div&gt;
I'm using django. It's a webframe work. I'm able to collect data, save to db, retrieve data and post it to a page. Just hoping to figure out how to parse out the tags and make them render as html rather than plain text. 
Django automatically escapes your template output. If you want to stop that, you can: https://stackoverflow.com/questions/3138588/unescaping-html-in-django
quite impressive, love it.
Thanks! I think that this is the answer. Quick question. If something is valid, is it also safe? Just wondering how to check if something is safe before marking it as safe and passing it to the template.
gzip would be a big start. file.json.gz
I made a list just for you :D https://github.com/joereynolds/what-to-code
Just think of something on your computer that annoys you or takes more time than you think it should. Then make something that fixes it. You'll feel motivated because you're directly helping yourself, you'll end up with something useful to you and you'll have something to show for it. I've written a tonne of my own personal userscripts just to fix tonnes of little things that annoy me on the websites I use regularly or add more functionality to them and it's pretty rewarding once you've finished.
Is it bad to have the element rendered but hidden?
this is called dependency injection, google this two words
Google for "JSON compressor" and grab some code from github or npm. JSFL protip: you can use a tool like Babel to compile modern javascript down to the ancient dialect JSFL uses.
I cant keep up with all these new pokemon
"Why you should start a side project - if you're just starting with cs and have a ton of free time/energey to invest in something you're maybe still passionate about AND if you're not yet burned out from years of deadlines/clients/php." At this point I accepted I'm just a bitter old man. :( 
&gt; but it's not as evident what's going on Leaving aside what other comments have already mentioned about _control flow_, you should think about the idea of _"level of detail"_. That is, we decompose processes and functions into smaller processes and functions **precisely** to separate different levels of detail and focus on a particular concern or responsibility. That is, the principle of "single responsibility" is as much about "not doing two unrelated things in the same function" as it is about "not managing different levels of detail in the same function". Think about this as you might think about micromanaging. If you've ever had a micromanaging boss, you'll understand that the problem is they concern themselves not only with giving you a certain task but also with going into your job and telling you how to do it. This is similar. A function should concern itself with _its own_ flow and level of detail, not so with the flow of the various other functions it calls. Otherwise, you end up with large, sometimes huge, functions which end up agglutinating different levels of detail. A _micromanaging function_, you could say.
I think you are just overwhelmed with how much stuff there is in JavaScript. The fact that you tend to write JS based on context (in browser vs on node vs ReactNative, etc), that there are many tools that change your syntax/formatting (ESLint, Prettier, Babel w/ its many plugins, Flow/Typescript, Preprocessors, etc) and that there are many frameworks which you must use on top to solve different problems (Firebase for devops, React for composition, Redux for state, RxJS for reactive prog, Express for HTTP servers, SocketIO, etc) make JS have a really large surface. So how do you solve this? I propose a few (maybe unconventional) advice: - limit your intake (use as few tools as possible, and only the tools you have a good understanding of); there will always be more tools for you to adopt but doing so prematurely will render you unable to follow your code - do not optimize prematurely (solve problems your way, do not follow best practices from the get go; they will come later or you'll find them yourself); JS is in my opinion well suited for "good enough" and high productivity environments (profit from that!) - be ignorant (ignore the details of your code and focus on the big picture, the details change very often anyway so its hard to keep up); space your code as much as needed and do not write complex logic or "clever" stuff - understand the big idea (all frameworks/libraries have a big idea behind them that gives them a purpose and can be seen throughout its usage); if you understand the philosophy of your library you will know if it is suited to your needs AND how not to abuse it - build stuff (the smaller the better); large projects tend to be hard to reason about since there exists such a thing called "fundamental complexity" which just cannot be avoided, just dealt with so keep them petite - ignore the noise (hype is the biggest bullshit and money maker in the industry so tread carefully); software communities in general are filled with "experts" that will take time off to tell you how to do it "properly"; always measure things yourself to see if they make sense fundamentally Hopefully this helps. JS is not hard. There are actually remarkably few concepts that flow around. But you cannot see them clearly 'cus you're looking too close and worrying about all the details.
oh yes for sure, many many console.log(this) were needed to keep track of what's going on
I have similar person exploring the tutorial on [Medium](https://medium.com/@liam.killion/barletts-familiar-command-line-building-a-cli-app-in-node-c059f2f748b3) but he gave credit to the source of inspiration I think it's pretty basic thing to do.
It's basically the same setup yarn add -D tailwindcss postcss-import postcss-url postcss-cssnext create tailwind config file ./node_modules/.bin/tailwind init tailwind.js create tailwind.css @tailwind preflight; @tailwind components; @tailwind utilities; create postcss.config.js module.exports = { plugins: [ require('postcss-import'), require('postcss-url'), require('tailwindcss')('./tailwind.js'), require('postcss-cssnext')() ] } if you have postcss config in your package.json, remove that
very nice!
I feel like I'm reading/hearing/seeing the benefits of yarn less and less often these days. I used to use yarn, but overtime started using npm again not for any specific reason. I think you're fine using either, since even if one of the tools somehow blew up tomorrow, it wouldn't be hard to migrate to the other
IIRC npm v5 made massive speed gains that kind of nullified the main advantages of yarn.
once you have package lock the new npm cli command is **fast**
The only time I really ever see yarn brought up is when the npm teams manages to piss of the community. People will say they're switching to yarn, but then you won't hear about yarn again until the npm team screws up again.
Why `"umd"`? If the goal is to make a node library, `"commonjs2"` should do the trick. 
I've only had to do this once for work and it was a stretch that we had to do it.... Breaking json readability is always a bad idea. We had a data table json response with something like 50 columns per row and up to 1000 rows per page of which maybe half the fields were null. The first easy optimization is turn your row objects into arrays and reference the key name by index. The next step really got into don't do this waters, each null value of an array was removed from the array... We used a giant number in the first array element as a bitmask for checking if array 0, 1, 2, 3 etc was null. With everything it took a 100kb gzipped response down to 20ish (I made up those numbers but i remember there was a very dramatic savings even with gzip)
Thank you everyone.
Thanks for the really great response 
Yarn workspaces are a killer feature that npm hasn't copied yet. npm release quality has fallen massively as they try and keep up with yarn however they always resolve the issues in time and the current release is pretty stable, just don't be an early adopter of any of their releases.
Find a way to learn all of it (via a video course, a book, etc.). As long as there are gaps in your knowledge, it will always seem mysterious. Most of JS is slightly unusual, but not unlearnable.
Thanks! This works.
Yarn is still faster for me, and the lockfiles I find are more readable and reliable in general. The CLI is nice too, e.g. being able to do `yarn dev` instead of `npm run dev` to run a script.
&gt; you have two similar candidates and one of them has a bunch of repos If they're actually similar in all respects except a Github presence, who cares if one of them has a bunch of repos? You're getting the same thing by definition. Flip a coin and move on.
"felt wrong", because objectively it doesn't make much difference; you should be handling your variables appropriately
Nice, thanks for detailed explanation! Well, now I'm confused too what author meant by other ("after") rules ("Apply the other rules if the result is NaN, then call toString() and apply the other rules again"). In his book, beside rules for objects he mentions rules for strings, boolean and floating points when dealing with ++/--. For example: "When used on a string that is valid representation of a number, convert to a number and apply the change. The variable is changed from a string to a number." Does he mean rules after these lines of code you've previously mentioned: console.log('result = ' + (Number(value) + 1)); and console.log('result = ' + (Number(string) + 1)); ? Any opinions about this one?
http://jonathancreamer.com/why-would-you-not-use-typescript/
Never heard anything like that, everywhere I go Typescript is literally praised, even on /r/programming the notorious js haters, praise and upvote, TS articles every time they are posted. We use it in our dev team, we decided to migrate from es to ts when i came a board, and showed what the language offers, nobody regretted moving away from es 
Pretty much same damn language, but more legible because you know exactly what's coming in and what's coming out
Well sure, but in his defense that is the point of typing... To ensure that you do.
Hmm. I must be in a silo of TS haters. I'm open to it, just surrounded by people who seem to have been burned by it. I'll have to ask them more about why they feel that way.
If your goal is to make it work both in the browser and server-side, umd should do it. In this case, the user probably wants it to be a client-side lib
Why should anynoe use this over airbnb which pretty much everyone is using at this point. 
I'm not sure if it is quite what you're looking for, but have you looked at https://msgpack.org ?
Offline install and Workspaces are the reasons we stayed and the CLI commands like `upgrade-interactive` are just icing on top. 
Since when does something not being new mean it‚Äôs off limits to talk about or write about? As long as I can write a better, more concise, more helpful article about any topic, from sending emails with PHP to creating a responsive layout in CSS to summarizing the latest version of JavaScript, I will.
I think Airbnb is too restrictive, and this includes Prettier 
You can use Babel and TypeScript together, however most TS users only use the latter. It supports most ESNext features and development is very active. Plus, it abstracts away the need to configure Babel. PropTypes is a good start, but it does limit your type-checking to React components. TS takes it a lot further, it's a lot nicer.
If you're targeting beginners, it's best not to introduce another layer of complexity if it's not absolutely necessary. Especially if adoption isn't the majority. 
I've got a lot of HTML+CSS types at my job that are just starting to learn JS and React, and JSX is confusing enough for them.. I think you're right, but I'll need to ease them into it. Haha.
Can I still use my ES6 features in TS? like arrow functions, destructuring, generators, async / await?
Because everyone is using angular instead?
&gt; I have heard a ton of very valid criticism of TypeScript. I would genuinely like to know what those criticisms were. Can you point me at writings or video about any of them, or have they all been in personal conversation?
Yes, it supports all of ES6 and plenty of stuff beyond that as well. (The same caveats as with Babel apply here, e.g. it can't transpile Promises for you, you'll need to polyfill it yourself if you want it, but it is supported.)
Yarn is still a whole lot faster for me, but that never was my main gripe with npm to begin with. It's been a year now without fallouts, that's the reason i prefer yarn. Some of my co-workers are using npm, and throughout the last years it's been: couldn't find that, module missing here, error there, rm -rf node_modules, etc. 
Well, "very valid" should have been "very valid sounding". Yes it was mostly in conversation with a few people in separate occasions who I know to be good trustworthy developers who write great code. One of them got burned by some bug in TS iirc. I'll ask them. I'm very comfortable in my ES6+Babel world, and I write comprehensive unit tests in Jest, so for now I'm happy without TS. and we have a LOT of development in flight to the point where it would probably not be worth it for us to switch over our projects at this time. But--- you have convinced me to stop writing it off. I'll try it in a side project some time :) and maybe we'll pull it in eventually. I know the Angular guys at my company are using it. Mostly I think there was just uncertainty around how it works with JSX and the react specific Babel stuff.
Here is one (light) critique: https://medium.com/javascript-scene/the-shocking-secret-about-static-types-514d39bf30a3
Interesting. Taking a quick look, it appears to have matured a lot since I last explored using it several years ago. Thanks for the info, I'll give it another try soon.
*Vue
Convert the mouse pos to a vector3: window.addEventListener('mousemove', function(e){ var mouse3D = new THREE.Vector3( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1, 0.5 ); your3Dobject.lookAt(mouse3D); }) and use the Object3D.lookAt function: https://threejs.org/docs/#api/core/Object3D.lookAt and pass in the new mouse vector3
I think, "Apply the other rules if the result is NaN..." should be, "Apply the other rules. If the result is NaN...". That's one part which I think is confusing, that it should probably be two sentences there. &gt; "When used on a string that is valid representation of a number, convert to a number and apply the change. The variable is changed from a string to a number." My use of `Number(string)` represents that conversion. For `++/--` to work, a number is needed. When a primitive value is available, that value can (usually) be converted to a number then operated on. Booleans are easy because false = 0 and true = 1, but strings are more tricky because they can, but don't always have values that can be converted. There are rules for conversions, and `Number()` will perform that (as do `parseInt` and `parseFloat`), returning a `NaN` if a conversion can't be made. "Applying the change" is just the adding or subtracting of 1. But that won't work correctly if a numeric conversion can't be made first. The "rules" here are confusing because the rule set for primitives vs objects are different. The _if NaN then toString()_ rule is specifically for objects. When you have primitives, there is no _if NaN then_ bit, it's just _convert to number and hope it's not NaN, otherwise you're getting NaN_. BUT, the point of the object rules is to get primitive values. So once the primitive values are obtained (through toString or valueOf), then the same operations performed on the value if it was originally a primitive would be applied. Basically, objects have a wrapping set of rules over those used on primitives. someValue++; // if someValue is primitive, do: // result = primitivePlusPlus(someValue) // if someValue is object, do: // result = primitivePlusPlus(someValue.valueOf()) // if result NaN, result = primitivePlusPlus(someValue.toString()) This where `primitivePlusPlus` would have the steps for converting to number and adding 1 and all that (the same you can imagine for each variation of `++/--`).
I mean basically the point of TS is to fix issues that JS haters have with JS
The second step is effectively what a sparse matrix will do, so it‚Äôs not really a stretch to suggest it. Modifying your data is a valid way to compress a response. If you‚Äôre concerned, simply make sure you have good unit tests for your marshalling and demarshalling routines.
Is this a question.
This sort of thing comes up all the time. JSON is a string. It's even in the name. You can absolutely compress JSON, `tar some.json`. You're thinking of an object structure in memory and referring to that as JSON which is incorrect. I would recommend a protobuf or something similar for this use case.
Yer a berry smart persun.
That's great for components, but add state management into the mix, and you definitely want to make sure your reducers are messing with the types somewhere. Once you're on a big enough code base, maintaining becomes a tonne easier with TS
TS is light years ahead of Flow when it comes to third party library support (type annotations for third party libs)
There is no way in hell I'd go back to es after using TS
The point is that the http request fires immediately, but the user can supply a callback at any time.
becouse of React and Vue Vue 3.0 will be released soon, so good.
This package looks pretty useful. One comment though: I find it strange that `'t'` and `'f'` are valid inputs for the `booleanValidator`. I would not say that those are necessarily valid because the following does not evaluate to true: `'f' == false`. Although I disagree with `0` and `1` being valid boolean values, it would make more sense for your `booleanValidator` to handle those values instead of `'t'` and `'f'`, as JavaScript evaluates them as boolean values (e.g. `0 == false` is true). Is there an advantage to allowing `'t'` and `'f'` as valid boolean inputs?
Vue hasn't gotten an upper hand on Angular 1, not to mention Angular. All frameworks other than React are flatlining and that's pretty much also the answer for why Ember's fading. http://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core-vs-ember-cli
I see. I like using stage 2, and learning the newest stuff by using it. So that might be reason enough for me not to go TS at least in some of my projects
Sadly even though I'm from a tier 1 college, I'm not working in tier 1 startup, working in a early stage start up(1.5 year old). TBH that's no excuse for expecting 10x6 hrs of work.
It's a startup called Skillate. 
This guy gets it ;). 
TypeScript has been lifechanging for our team too.
Yea. Still. Still faster. Using it on daily basis and seeing the difference. It's just better.
Thanks, that opens mind! Now this is puzzling me: If we can convert string to number by using Number() (for example Number(‚Äú3‚Äù) will return 3) by using valueOf() method, then toString() function is redundant? The only difference I see from two above examples is that there is variable ‚Äúvalue‚Äù in valueOf() and variable ‚Äústring‚Äù in toString() which are different but could be "merged" into one which could be used for the same purpose aka ‚Äúfor storing any type of variable‚Äù? I somehow get feeling that ‚Äúrepresentation for one particular object‚Äù, which is used as ‚Äúsome value‚Äù in order for that value to be converted to primitive value (so we can do ++/--), is same when you are calling valueOf() and then, if it returns NaN for that value, you pass same value to toString(). What I'm missing here? :/
Maybe
&gt; JSFL uses Cool. What benefits are there by using Babel? I've been coding in JSFL for a while but don't have too mach javascript knowledge outside of the basic functionality
I am not convinced that Ember is fading away per se. It definitely has lost its place as a hot topic, and most people just don't really need something so heavy. But EmberConf was very healty, and the core team is working on modularizing it all so you can just take what you need, but it has a lot of mass and will take time to do so. 
Both toString and valueOf are similar but serve different purposes. toString is used when you need to get a string representation of an object, for example if you're using it within a string expression. var myObj = { toString() { return 'obj'; } }; console.log(`My object is: ${myObj}`); //-&gt; "My object is: obj" valueOf gets a "value" which is a little more generic, but is used in operations such as mathematical operations. You can _almost_ get operator overloading using valueOf as long as you're working with primitive values. var myObj = { valueOf() { return 2; } }; console.log(myObj * 5); //-&gt; 10 Both of these return different values and can be used in the same object without interferrence var myObj = { valueOf() { return 2; }, toString() { return 'obj'; } }; console.log(`My object is: ${myObj}`); //&gt; "My object is: obj" console.log(myObj * 5); //-&gt; 10 But, because they're as similar as they are, sometimes JavaScript will use the other method for things if the best method for the job doesn't work. Mathematical operations, including ++/--, will prefer valueOf, but if the value returned doesn't work (i.e. is NaN), then toString is used as a fallback since, _maybe_ it will return a string that can be converted to a number? var myObj = { valueOf() { return {}; }, toString() { return '10'; } }; console.log(myObj * 5); //-&gt; 50 The above is a case where this happens. The valueOf method returns an incompatible value so toString is used instead. The toString value, even though a string, can be converted to a number and used to perform the multiplication. FWIW, this is getting pretty deep into the inner workings of how things work. You virtually never have to know this stuff or make use of it. Knowing that toString exists and that you can override it for custom string representations of objects is good, but beyond that it hardly ever comes up or is necessary to understand.
they all do the same thing
Hi /u/gnsalok, to submit a link, please use the the "Submit a new link" option. Thank you.
You can use it with any level of investment. Start with just letting it infer types in your existing code base, and then turn on stricter type checking as you go.
Didn't know! I kept thinking of it as this "whole other language" i would need to learn. Good deal.
Yeah, it's that "mostly" part that had me worried to begin with. But it appears most of my fears were baseless, I'm gonna try this out.
Nope.
I use [joi](https://www.npmjs.com/package/joi). Its from the team that made hapi.js. You can use it on the server side and client side.
Well, because it‚Äôs magical trash
Sorry, I'm curious by nature and self-study is always full of "digging deeper" (which is good, btw). Thank you so much for showing and explaining all possible combinations, I learned so much from this!
Have you looked into brotli? You can get pretty good compression (generally better than gzip) at level 11
Note that `tar some.json` won't compress and its use is questionable for single files (tar is meant to pack a directory into a file). You probably want `gzip`/`bzip2`/whatnot.
Depending on what you mean that may precisely be the problem! [Here's the link to said bug](https://www.reddit.com/r/firefox/comments/83fgav/my_reddit_frontpage_uses_2040_cpu_but_only_when/dx62217/)
Udemy courses are the best. You also need to learn to learn by yourself. Nobody will give you private lessons every one hour at your developer job. The courses are about $10 each on Udemy 
I agree, I prefer Standardjs. But I wouldn't call Prettier restrictive, because you don't have to think about structuring your code, or how your co-workers structure their code. 
It's a common misconception, and keeps a lot of people from trying it out.
Seems that way, yeah. It's certainly what has kept me away until now. I'll try and catch that misconception if I hear it again and help others to check it out too.
Many large projects use Yarn, including VS Code itself.
yeah, I don't want to discourage you ;) but I thought I'd make the call out just in case you felt this was necessary learning. If you really want to get into the nitty gritty, if you haven't already, check out the spec: http://www.ecma-international.org/publications/standards/Ecma-262.htm I'm not suggesting you read the whole thing, but for questions like this you can dig through it and see what it says. Increment/decrement operators start here: http://www.ecma-international.org/ecma-262/8.0/index.html#sec-postfix-increment-operator You might have to jump around a bit to see what expressions like `GetValue` or `ToNumber` mean, but its all linked and not toooo terrible to get a handle of for the more simple things. Even without digging into what specifically some of those things mean, you can generally get an idea of what's going on.
Yeah, "I shouldn't have to do sideprojects" is a common refrain, but it's true. You don't have to. If you have work experience, you can leverage that. But if you don't have work experience, or you're applying for a competitive position, you'll find that a good sideproject certainly doesn't hurt you. We're craftspeople so being able to point to actual concrete work is going to help us, just like a carpenter that can show a nice table they made.
People were talking about Yarn vs. NPM when they were switching. As mentioned above, no one talks about dependable tools they use every day. These days I see many more `yarn.lock` files than I do `package-lock.json` files. Switching is basically painless, so I expect the winds will blow back and forth a few more times before a "winner" shakes out.
&gt;You can use it with any level of investment Not if you have a large project with no build step.
[Functional Programming in JS](https://youtu.be/e-5obm1G_FY) \- a good video to understand the simple aspects of functional programming in Javascript. It includes map, filter and reduce.
Vue gets more stars per day than react on github.
It's ok. The problem is that we don't allow posts for paid services. We have a pretty bad problem with users spamming our sub with paid courses already, and your post would just invite more of the same bad behavior. I realize that's not the intent of your post, but that's the effect it'd have. Also, sometimes these types of posts are also planted by the spammers (using an alt account), so that they'll have an excuse to come advertise their paid service. Again, I don't think that's the case here, but we certainly don't want to encourage that type of behavior. Thanks for your understanding.
`every` returns early if the callback returns falsy. Since you always return undefined, your `every` benchmark effectively only runs a single iteration. If you return truthy (thus allowing the bench to run through the whole array), the results are closer with other methods. Also, you're using slow variations of for loops. See https://jsperf.com/for-vs-every-123
It's not, it's just failing on the first iteration and then stopping. [Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every)
Hey, no problem! Nice, thanks for sharing!
You're welcome. Let me know if you have any other queries! :-)
netstat -peanut
The popularity of an API is mostly based on needs... there are tons just depends on what u want to pull... weather , stocks, addresses, tweets, game stats... if you have a more specific topic in mind maybe I can help you locate one
In my JavaScript development history, the most common issues have been developers using modern methods that are not supported across browsers. So we would have issues running the code in older IE as well as Safari. I don't think we ever had bugs resulting from type mismatches. Or they were so small and insignificant, they could be fixed right away. Only time we had type mismatches was because the API contract kept being altered, so the result is we trusted the backend teams less, and setup better data filtering in our API services. ie. We created a utility to cleanup incoming data, and convert it from string to int, string to bool, etc. I don't like typescript because it adds another layer of transpiling, and from my experience, we've done fine without it. I don't think the benefit is really there. It's reminds me of coffeescript, everyone thought that was the shit, now have fun ripping it all out from your old applications, now that no one uses it. I need a strong reason if I'm going to add another transpiler to my code base, and commit to this way of writing code for the next 5 years.
Long time JS, Flow and TS user. Even on large projects I prefer untyped. I get why people like it, but speaking from experience, types just get in the way and don't actually help catch runtime bugs, which are usually out of scope for type errors. Time spent typing and modifying types is better spent writing integration tests.
In terms of functionality, there's no difference. In details... The first one copies the function reference from the parameter, then executes the function. The second one creates a new function reference, then executes the function.
That looks really cool.
Good article for beginners who want a quick intro to list (array) processing in JS.
Not bad. I am using a React Spinner for another small project that I am working on. It shows and hides based on a Boolean, so I believe it comes and goes from the DOM with no issues, but I will have to double-check that. If it is in fact playing in the background while hidden, I can trace to see if it's still taking up CPU usage. Thank you. 
Yarn uses far more emojis which is üíØüî•üíØüî•üíØüî•. The ultimate benefit of yarn was always being able to run commands with one less word, so there's that. Seriously though, both are good now. I prefer yarn a bit more and use it when on projects I'm in charge of but I barely think about what package manager I'm using.
*Knockout
`window.alert('WAT?');`
Hi /u/fentdesign, For javascript help, please visit /r/LearnJavascript. Thank you!
As a student, the things you learn in side projects and internships are going to be worth way more than what you learn in class. So many people graduate from a CS degree with only academic knowledge of programming (having worked on only programming exercises before and not developed a full end-to-end project). Having side projects puts you at a major advantage over these people, and some companies will see that as well and prefer you for it
That results in an error on a Mac...not particularly useful.
I'm interpreting this question as "why would one prefer programming over sysadmin jobs?" Programming, to me, satisfies a very primitive desire to create things, with the right ideas and the know-how to build them I can create anything I want. Sysadmin stuff, to me, just kind of feels like being a glorified babysitter, maintaining computers for people who barely know how to use them..
Thanks and also thanks for sharing your code. :) 
Programming is creative art and system administration is glorified babysitting.
Never used it but google turned up this https://github.com/toddmotto/public-apis/blob/master/README.md 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [toddmotto/public-apis/.../**README.md** (master ‚Üí 8d3c175)](https://github.com/toddmotto/public-apis/blob/8d3c175f8f0e80fd27b66430685c9418cf36071e/README.md) ---- 
Author here. I will be glad to answer any questions about the FP JS experience.
I don't see your point. All the more reason to use `npx`. Installing it globally is just a waste since you never use again until you make a new app.
I like JavaScript a *lot*, but I *love* TypeScript. Understanding the interactions of components in a TypeScript project is a *lot* easier than in a JavaScript project (using the WebStorm for both). I tend to stick with JS for very simple tasks, but for everything else I default to TS now; I've worked on several 100kloc+ TS projects and a *bunch* of JS projects of the same size &amp; I was notably more productive working on the TS ones. Obviously this is anecdotal, and as always YMMV, but as a long-time JS fan, TS has absolutely won me over.
It‚Äôs totally possible, but might not be ideal depending on how complex it is. Just call the vanilla stuff in the mounted hook, and throw any html in the template 
 return data.filter(num =&gt; num &gt;= min &amp;&amp; num &lt;= max).length;
I made this with an open source tool that I'm building to make it easier to write blog posts that use interactive javascript - I thought this was an interesting dataset to look through! You can see some more examples here: https://idyll-lang.org/gallery/
One thing (besides the type system) that sold me on TS, was the efforts they've made to make it relatively easy to integrate incrementally. A quick search on "moving to typescript incrementally" will bring up plenty of anecdotes. Good luck!
This smells of a simple homework assignment.
Okay last summer I did an internship and the PM wanted us to build a new product with ExtJS I said fuck no and convinced them to let us use React. Close one ü§Æ
Thank you for providing me some details. I get the separation of concerns, as it seems quite clear here that each function has its own responsibility: - get track from store, - get metadatas, - encoding the track - etc With each of this functions being able to call more specific functions on its own. But my problem here is whether I have some central function that coordinates everything or having a strating function firing other functions and forgetting about them. For instance, is it the parent's role to persist metadatas returned from `getTrackMetas` or should said function also manage the database record (to me the former is clearer but it also makes the parent more "heavy") that's where I kind of hesitate. Obviously, getting rid of callbacks for promises or async ∆í could solve the problem.
I stopped using yarn when create-react-app started breaking every time I reopened a project that I had used yarn to install packages with. To this day I have never been able to find out why that was happening. 
I've actually heard more about Ember in the last two years than when it first came out! I abandoned learning it after Zendesk released their big Ember rewrite and it sucked and was slow (my company used it for customer service). It seemed like Angular gained mindshare a lot faster, but I was even less impressed with Angular.
This is great, thanks for sharing!
Defo trying this out once I'm next in a computer, this feels like an April fools üòÖ
I am a big fan of Vue but this is not a great indication of usage on its own 
The premise of this post is wrong so I'm not sure how much stock to put in its conclusions.
 const uniqueNames = new Set(array.map(item =&gt; item.name)).size const totalItems = array.reduce((sum, item) =&gt; sum + item.tracks.items.length, 0)
JSON is a *method of describing a serialized object in a string* - it has no meaning when referencing something unserialized, just call it an "array". You definitely don't need a library to achieve this, just use the `Array` methods. eg, for distinct names: new Set(obj.map(({ name }) =&gt; name)).size To reduce the array into a single value based on elements of the array, use [reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce).
Neither is downloads. For all we know it's because node_modules gets corrupted and has to be deleted more often than the other frameworks.
The answer to that is eas... No, absolutely not: It's a pretty difficult question :) I'm actually of the opinion that there are only two important skills to learn in programming: naming things and figuring out what goes together and what separate. And as with naming things, this one is also difficult. Well, maybe not. There is an easy answer: _It depends._ But of course, this helps little. I'll try to expand a bit. I can't promise it will be all cut and clear, though. The thing is that "what goes together and what separate" is even somewhat simpler than the more specific "where does this particular piece go?". In most cases the answer is that it depends on "the rest of things". That is, it depends on how you're designing your code organization in various aspects and _in the large_. In this case, _probably_, I'd _lean towards_ having the "controller" be a very simple orchestrating function. That is, it would be a _high level of abstraction_ or a _low level of detail_. I'm reluctant to write the code, because I feel like what you showed above I would probably write too differently (and because a lot seems to not be shown so I might get the details wrong and that would be unhelpful). But I'll say I would tend towards your second option or similar. The _concern_ of the controller is to define the process at a high level. You _might_ in some cases need to add some control flow to it. But going into the detail of each of the steps is probably too much detail to be here. There are exceptions to this, of course, and, again, it will depend on how you organize other parts of the code. Using promises, for example, would not exactly "solve the problem" but would strongly point into one particular direction. As another example, error/exception management also -usually- imposes certain obligations, and so, depending on how you do it, it might push certain responsibilities one way or the other. I also feel that those two things I mentioned (naming, separation of concerns) do go quite hand in hand. So, part of the problem is that you've changed the level of detail but you haven't changed the names. In your post you mention e.g. &gt; is it the parent's role to persist metadatas returned from `getTrackMetas` or should said function also manage the database record And as I said, part of the problem is that in the first version you have one `getTrackMetas` and you also had one `saveMetas`. In the second, you've indeed _hidden_ `saveMetas` and now `getTrackMetas` is _lying_ about what it does. Its responsibility has changed and so its name must change too. Say, maybe, something like `processMetas`. Not a great name, but it at least makes clear that it's no longer just _getting_ the metadata but doing the whole _sub-process_ with the metadata. With this name change it becomes clearer what I mean by the level of detail/concern. Here, in `manageEncodings` we care that a certain step is "processing the metas" and that is has to be done, say, before another step "encoding the track". But we shouldn't care about the _sub-steps_ or the detail involved in "processing the metas". Later, when we write `processMetas` then _there_ is where we will think about what is involved in "processing the metas". And again, part of what pushes things to one side or the other, is the names you give to the things. Generally speaking, though, I want to insist that it's not cut and clear, and it depends on many factors. If the process is really short, you _might_ want to keep steps and _sub-steps_ together at the same level of detail. Or if there's a complex control flow making it difficult to separate. But in general, most cases usually do benefit more from separating into smaller pieces, than from keeping big pieces together.
Holy shit this works 
kudos
That's a good thing to Google! Thanks.
genders too üíÅ
You'd be better off just writing your stories in wordpad and concentrate on investing in actual journalists and content that has substance/ doesn't need to be redacted.
not to mention the weird double dash
It's *similar* to a ligature, but there's actually a special Unicode character in the mix called a [zero-width joiner (ZWJ)](https://en.wikipedia.org/wiki/Zero-width_joiner) that makes it happen. It originated as a way to form complex symbols in certain languages, but the same mechanism today gives us gendered zombies! üßü‚Äç‚ôÇÔ∏èüßü‚Äç‚ôÄÔ∏è
And flags are made from their two-letter country codes. E.g. üá∫üá∏ = üá∫ + üá∏.
I'm pretty sure they need to be joined by zero width joiners
I feel like the way ember is going makes it more and more like another magical implementation of react. All the good stuff ember is getting pretty much already exists in other frameowkrs. Routable component? Most other frameworks already built on component based ways. ES5 style getters? This is probably more about computed properties and the philosophy of mvvc frameowkrs. But vritual doom and single directuinal data flow is like the perfect solution. And now that we all embrace the DDAU pattern is making it more and more like redux Glimmer and template markup improvements looks so monior. Maybe we get some performance boost but the syntax still looks confusing. The consistant upgrading path pushed ember forward in a healthy but also led a ton of doc issue. How many times you googleed an ember api and clicked and found it's for an outdated version? Plus although lots of people said ember had kickass document but truely felt the other way. Its docs sucks beyond the tutorial part. And the thing I love / hate most is ember addons. With other frameworks I can pretty much instatly use anything I found on the web but not ember addons. Maybe when the webassembly thing will get us something but what's the point.. why can't i just react. The list continues but you get my idea, I can do pretty much the same or better with React/Vue/Angular4/5 why would I use something so heavy magical and hard for beginers. I had a lot of Rails experiences when I started ember back in 2013 and I did had a great time back when backone/marionette was the killer combo for most people. But now I feel like ember has done its time. I am still very efficient with ember after so many years on it but I just dont think its worth investing your time any more 
I am confused. Are you advocating for using compositions like this: const format = R.converge( R.unapply(R.join(‚Äò ‚Äò)), [ R.always(‚ÄúValue‚Äù), R.nthArg(0), R.always(‚Äúis not expected here. Possible variants are:‚Äù), R.compose(R.join(‚Äò, ‚Äò), R.nthArg(1)) ] ); is more readable than the alternative provided? Like the template string tells you at a glance exactly what the output is without having to mentally decompose the composition. &gt; Argh, what? You‚Äôre a cool guy, you‚Äôve solved it. Share the puzzle with others on the code review. I can't tell if you are seriously advocating for this, or you are mocking its convoluted nature. 
Yes - ligatures are a font feature, and no extra characters are involved. If combined emojis really did use ligature, you would just split on `""` (empty string) to get an array of the individual characters.
What specifically do you find insufficient? I've learned a lot through trial and error and googling specific things I wanted to test, but I haven't found one killer resource that covers everything.
Emojipedia list of Zero Width Joiners [https://emojipedia.org/emoji\-zwj\-sequences/](https://emojipedia.org/emoji-zwj-sequences/)
When posting code, post it to JSFiddle or somewhere similar if you want people to be able to interact with it easily
Unicode group is flipping smart
q1Ans = "1" is assigning the value "1" to the variable q1Ans. if you want to do comparison you need == (or === for strict type comparison), a single = is assignment.
Back when I had to work with jsfl (dark, dark times). I wrote a tool that would convert scripts written in Typescript, using npm modules, into something that jsfl could use. Under the hood it uses webpack to bundle and transpile + polyfill everything needed to work as a jsfl script. Now it obviously wouldn't work with any built-in node modules, as that requires the node runtime. If you want I can throw it up on GitHub and you can look through it. It would probably be fairly easy to make it compile JavaScript instead of Typescript. You would probably just need to change the webpack config. Let me know if that'll help and I'll try to find it tomorrow.
Yep. (might as well always use `===`, people would do well to forget that `==` even exists when writing code)
not a single one of these is an alternative to javascript.
Inline event handlers are essentially `eval` inside HTML markup - they're bad practice and result in poorly factored, hard-to-manage code, such as what you're experiencing now. Seriously consider attaching your events with JavaScript, instead, eg: https://developer.mozilla.org/en/DOM/element.addEventListener Once you fix that, the function will start to run once the button is clicked. (but you still have bugs to fix). As I said the last time you posted this, you should select elements using `querySelector` (or similar DOM selection methods). (you're running into an error because you aren't doing that)
Agreed. Way misleading title!
&gt; a separate ecosystem without enough freedom gold
Headless browsers
Yup. The skin tone is actually its own character, just with a zero width joiner telling the font to treat it as a modifer 
In theory they should be completely compostable, but limitations of how the glyphs are rendered have kept this from coming to fruition. As the text subsystems in our operating systems evolve we should be able to get any family (up to four) with any skin tone with any gender Good job, Unicode consortium--very very cool!
How are you trying to scrape? From a browser, or from a server, and how automatically?
Okay, thank you. The vanilla applications are currently doing a lot of DOM-manipulation with the innerHtml function. Is that a problem? Vue at using a virtual DOM. Du you have any idea if it is also possible to do this on react? 
https://xkcd.com/1813/
Not sure if you understand how npx works. It's even recommended on [create-react-app's github](https://github.com/facebook/create-react-app)
Typescript is more like a super set of Babel. They have all the ES6/ES7 features and more
Well typescript has everything that ES6+Babel has...plus types (and these are optional). So in theory there should be no valid argument to say it's bad while ES6+Babel is good. Well, it could have some bug on its compiler (?), but the same can happen to Babel and there isn't much we can do about it. Main thing for me is, your editor (if you are using VS Code or Webstorm) will be smarter (if you do use types/interfaces). A lot smarter. Because they will know what to expect, writing a dot after your object will quickly show all its methods and what their parameters' types. This is extremely useful while working with code that isn't yours. I know that VS Code already does some good guessing work with ES6 modules, but there's a limit to that (and it mostly uses typescript for these guessing works behind the scenes, for example, when you require an node module it will try to use typings from the DefinitelyTyped). 
How are you spliting your code or minifying it? If you already have some kind of step that does that, with grunt/gulp/webpack or something like that, I can't see how you are against a transpiler step.
Just curious, I've never used ExtJS, what's wrong with it?
I think later in the article they say to use FP when applicable but not when it unnecessarily convolutes your code.
Oh, the uninformed people again. You can set the compiler options to use stage 2 easily: https://www.typescriptlang.org/docs/handbook/compiler-options.html look at --lib and --target options, you can set them in your tsconfig.json file.
&gt;Here is the non-loop version, using filter(): const b = items.filter((item) =&gt; item.name === 'b').shift() No, the proper method to use to find a single element is `find`.
Try get length of string with emojis and you gonna know how.
No, no. I‚Äôm trying to say that‚Äôs ugly and have no practical value when opposed to the good old two-line imperative function. Don‚Äôt do this, keep things simple.
Nice article, ReactJS is very popular nowadays in the industry. I want to learn this soon.
"const new" seems like it would be a headache waiting to happen.
The assumption that something's up in node_modules when react is installed but it doesn't apply to other packages is a bit, well you know what it is. Github has actual meaning stats as well, it tracks dependent packages using a package. These number of course coincide with npm's stats in ratio. As for lodash, it is pretty much installed everywhere, of course it's bigger than react.
&gt; man+woman+daughter+son = üë®‚Äçüë©‚Äçüëß‚Äçüë¶ &gt; &gt; woman+man+daughter+son = üë©‚Äçüë®‚Äçüëß‚Äçüë¶ muh patriarchy
You could use modules to organise and re-use your code and most importantly install stuff from npm and github. Like in this case you could look for a gzip implementation in javascript, or some custom JSON compressor someone made up and published. If you use something like Webpack (or whatever bundle tools) you can bundle all that into a single file, and if needed a too like Babel can convert modern JS to a lower version (it's a while since I did JSFL but the runtime it used be ancient).
Legible _to you_
The bottom of the page reads: *I wrote a 420+ pages book on Modern Web Development including React, Redux, GraphQL, modern CSS, Progressive Web Apps, Webpack, Babel, Service Workers, Fetch, Web Push Notifications and lots of other things!* I think someone was enjoying a little bit too much 420 and definitely wouldn't buy that book.
Wait when you discover what the coming up kangourou emoji can carry any other emoji in its pocket. 
Has someone made a joke programming language that relies on manipulating nuances like this already?
LIT
thanks for the information! I found a workaround by using Google's custom search.
Okay wtf that's dope
So look up the flags for macOS and use those instead The command line doesn't bite ffs
And this is why emoji take up multiple characters when tweeting. Because Twitter counts 'unicode scalars', not visible characters. Ugh, string encoding. Can we just not?
http://www.explainxkcd.com/wiki/index.php/1813
**Execute something on every element with map** [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) **Finding a single element in the array** [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) Not sure why you'd go out of your way to use reduce/map/filter for the first two scenarios when there are better options available. 
Maybe you could provide an overview of what this is exactly how it differs to existing solutions.
`shift()` also mutates the array :s
This functional stuff works best with a library that has the whole suite of methods, like `take()`, `pluck()` etc. Like lodash or lazy.js.
"semantically proper"? It mutates the array :(
Well, I think this is a good advise. Middleware and configurable is the shining point in this project. Light and stable is the root.
Absolutely pointless. I'm about to unsubscribe from this subreddit because there's just too much trash posted on it.
Use moment.js Format should be done on the client as it depends on locale
thanks. Let me check that out
here come the triggered neckbeards
Here's an interesting article: https://eev.ee/blog/2015/09/12/dark-corners-of-unicode/
https://css-tricks.com/using-the-html5-history-api/ Everything you need for working with the history :) 
Daughter first tho
Proof that the gender pay gap is real after all!
"damn sjws always making stuff about race" - dummy on a post neither about race or sjws
Whyyyyyyy ? ok, it's nice and probably interesting to develop. But just, why ? Express has the sames functionnalities
RACIST
Continuous integration tests, deployments, could also skew download metrics 
Congratulations! I think it's weird to say the value is in centimeter using the abbreviated form 'cm' and then converting any value to centimeter using toCentimeter. I mean, abbreviated for value and normal for methods. But it's just my opinion. Anyway, seems a good library. Thanks for sharing
You thought you had a bad day on 9-11? Get a load of this guy...
`toM` or `toCm` would not be good method names I think. Maybe keep the long versions and have a short `to(unit)` method also. length(100, 'cm').to('m'); // =&gt; 1
That is good idea! Thanks! :)
True, I love the command kind, but I think you‚Äôre missing the point of making applications. You can browse the internet in the command line too, but that doesn‚Äôt mean a tool to make it easier is a bad thing.
&gt; Npms download stats represent actual production environments Source? How is one able to prove every single one of those react downloads are, "production environments"? Seems like a grandiose claim, but I'm willing to concede for actual source and evidence of these downloads.
Thanks for clarifying. I had to double check because I have a co-worker who does stuff like in that example and legitimately argues it is more readable.
That makes total sense and is exactly what I've been pushing for with my team at work. We just had to rewrite a significant part of our stuff because excessively code golfing with Ramada made a lot of stuff totally unreadable. Don't get me wrong Ramda and FP is pretty neat for many applications, just not when taken to the excess.
Good for your first library :) Just a basic thing since you're starting out. I would advise against your use of magic strings i.e. case "m" and so on... They really should be constants. 
`ss -tup`
I think your comment has done the most to convince me. I'm gonna go yell at my two friends that gave me confirmation bias that "TS is bad". Editor smarts from typing is a really compelling reason to try it. I'm going to bring this up at my next meeting.
This is a good initiative. I should have been asking around for feedback when I started out writing my own JS code. If you want to, compare these functions and see what you think. The latter can be extended to an object that does conversion for all units, thus making the lib easier to extend. function toMeter() { switch (this.unit) { case 'cm': { return this.value * 0.01; } case 'm': { return this.value; } case 'ft': { return this.value * 0.3048; } } } becomes function toMeter() { const toMeterByUnit = { 'm' =&gt; this.value, 'cm' =&gt; this.value * 0.01, 'ft' =&gt; this.value * 0.3048 }; return toMeterByUnit[this.unit]; } In terms of testability, it's quite straight forward to write unit tests for this lib. Did you consider converting to a standard unit and then doing the lookup to whatever was the target unit? E g first converting all input to meters? This would reduce the number of translations you need to add when supporting a new unit.
Maybe also make the methods chainable and add some simple mutators? If your conversion methods return a Length object I can do for example.. length(100, 'cm').add(someLengthInInches).to('m'); // =&gt; Length(1.23, 'm') And if you implement toValue method and toString and can still use the object in context. length(100, 'cm').to('m') + 2; // =&gt; 3 'Length: ' + length(100, 'cm').to('m'); // =&gt; 'Length: 1m'
I dunno about joke programming language... ...but I do know that I've used Unicode in code, as actual symbols, variable names, etc. like this: on·Ä§Enter = (e) =&gt; {
This actually blows my mind
Appreciate this! 
I will try this! 
this.value = value || 1; Careful, this will prevent me from ever passing a length value of zero, instead coercing it into 1. A better option would be to check its type using typeof.
Use Geg-en-deep copy. It's bigoted version of deep copy, so it'll claim to copy but actually does nothing.
Yeah, true, it's not so much about javascript. I just stumbled upon this while discussing why some string was of particular length, so I had js context in mind
But, filter returns a new array, so you're mutating an array that the rest of the code doesn't have access to anyway. Doesn't mean it's better, though.
According to this SO answer, parse/stringify seems to be the most performant: https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript?rq=1#answer-5344074
You can turn on checking w/o adjusting your build step. &gt; You can try this all out without even needing to touch your current build tools. If you‚Äôve already got TypeScript installed (`npm install -g typescript`), getting started is easy! First create a tsconfig.json in your project‚Äôs root directory ... Now all you need to do to type-check a file is to add a comment with` // @ts-check` to the top [Source](https://blogs.msdn.microsoft.com/typescript/2017/04/27/announcing-typescript-2-3/). So minimally, you install Typescript globally, create a simple config file, and then add a comment to existing files. No need to add a build step until you want better checking.
I agree, but... `SyntaxError`! :) You probably meant `:` instead of `=&gt;`. Either that or you wanted these to be functions, in case it should be `m: () =&gt; this.value` etc.
The former. Thanks for pointing it out!
Typefaces can have ligatures set up in them so that just by virtue of appearing next to each other, two characters can be replaced by a single glyph (for example, some typefaces will replace "fi" by a symbol for both letters where the i's tittle dot is absent). The distinction I was trying to make is that the emoji combinations require an extra zero-width joiner characters... but because it turns out you should never "well actually" someone on the Internet, I was wrong! Some emoji combinations indeed work in the traditional ligature sense, just by appearing next to each other, like the [Fitzpatrick scale](https://en.wikipedia.org/wiki/Fitzpatrick_scale) skin tone modifier: "üë©" + "üèΩ" // "üë©üèΩ" But some combinations require the ZWJ: let zwj = "‚Äç" // copied from [emojipedia](https://emojipedia.org/zero-width-joiner/) "üë®" + "üé§" // "üë®üé§" "üë®" + zwj + "üé§" // "üë®‚Äçüé§" Unicode!
I had to comment on this even though it is old to tell you this was a shitty ass comment to make. This AMA is obviously here to help people. Get a life. 
If you use es2015 +, you could make this even simpler I think. Good job and nice little idea!
You are absolutley right! function toStandard(value, unit) { const toStandardByUnit = { 'm': () =&gt; value * 100, 'cm': () =&gt; value, 'ft': () =&gt; value * 30.48, 'in': () =&gt; value * 2.54, } // Returns value in centimeters return toStandardByUnit[unit]; } function to(unit) { // Just check if passed unit is available - value is not important in this case validate(1, unit); const standardUnit = toStandard(this.value, this.unit)(); const toByUnit = { 'm': () =&gt; standardUnit * 0.01, 'cm': () =&gt; standardUnit, 'ft': () =&gt; standardUnit * (1 / 30.48), 'in': () =&gt; standardUnit * (1 / 2.58), } return toByUnit[unit](); } And now length(12, 'cm').toMeter(); length(12, 'cm').toCentimeter(); length(12, 'cm').toFoot(); becomes length(12, 'cm').to('m'); length(12, 'cm').to('cm'); length(12, 'cm').to('ft');
Good starting point. Couple ideas for you. Change the return value from toMeter() to update the value then return this. Would make it better for chaining as mentioned by u/martinsoderholm. Then I can do length(100,'cm').toMeter().add(1).toString(); resulting in 2m The other idea is to extend your library to use polymorphism. This way it is extensible and you make each unit responsible for knowing its own path to a unit. Make feet a class, meter a class, and centimeter a class, all extend a units class, which can have the different unit conversion functions setup in an abstract pattern. Then override the different functions in each unit class, so meter has its own toFeet, toCentemeter calls. These calls can then instantiate a unit of the converting type with the converted value.
He just needs to move his validate into the Length function, he checks for it if you come through as Length(value, unit), but not via new Length(value, unit);
Package names should be lower case with "-" (it's called kebab case). So instead of "length.js" just call it "length" (because we are already in js, it's like naming the name private of a Car class carName, instead of just name, context matters). "length" is probably occupied, and by the name of it, doesn't say much about your package, which matters a lot for other people to be able to find it. I think most people who will be in need of your package would probably search npm for the terms "length" and "conversation", try to implement those names in your package name. Great job overall, pretty much all I had to say was already said in other comments 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [hex13/transmutable/.../**copyDeep.js** (master ‚Üí a9c3df5)](https://github.com/hex13/transmutable/blob/a9c3df50036237f6c7d39f24653b0b982885b607/copyDeep.js) ---- 
You don't need to put quotes around an object property unless it uses characters that aren't allowed. Not that important but it will look weird why you would choose to use quotes then they aren't needed. (I'm talking about the toStandardByUnit object declaration).
I'd recommend using Luxon or date-fns instead of Moment. Better API, more lightweight and less prone to errors. Luxon is very similar to Moment. 
&gt; We just had to rewrite a significant part of our stuff because excessively code golfing with Ramada made a lot of stuff totally unreadable. Don't get me wrong Ramda and FP is pretty neat for many applications, just not when taken to the excess. This is something that I think needs to be talked about more. From my experience, it's a fine line between composable, declarative functions and point-free golf. Walking that line is made even harder ( at least for me ) when making those clean, declarative, small functions is almost addictive. Definitely need to have this sort of warning on all FP-style posts/articles.
I think CertainPerformance was referring to the find() method.
Because the function directly a parent of an `await` statement must be an `async` function, so making `function (err, data)` an async function solves your problem.
Duh, thank you! Time for more coffee! 
Yep, moment.js is what you're looking for. "normal date format" is somewhat subjective. Moment will let you easily format the date how you like.
This is just food for thought but if you moved, for example, your `toStandardByUnit` object out into the same scope as `supportedUnits`, you could use something like `Object.keys(toStandardByUnit)` to get the supported units and wouldn't need to maintain a separate array. Whether that's a good idea or not is debatable, but it's something to think about.
I very much dislike gauging technology on its 'trendocity', and I am kinda off all transpiled script, but I think we all get the point, useful or no.
Thanks me too.
Very helpful bunch of folks here, lol.
Just use default params? function Length(value = 1, unit = 'cm') { this.value = value; this.unit = unit; }
Yeah, object literals are a much better option opposed to switch statements. You can also return the object.
Hr manager does not have to be a programmer 
The library is written in the ES5-style - I'd guess they're avoiding ES6 features and/or the need to transpile down to ES5.
I'm no mechanic, but even I wouldn't post an ad looking for a Honda mechanic with 10+ years experience working on Teslas.
Lol fuck off retarded.
Not only that but Node is 8 years old and React is 5 years old
Yep, I was specifically addressing why the author didn't do it using the ES6 mechanism (which is way nicer).
Whoops, meant gzip, using tar increases the size due the container format.
ES6 is my next step :) Thanks for feedback!
Saying that is only proving that you are retarded and can't have a normal conversation. Do me a favor and don't have kids.
Thank you... as someone still learning I was thinking WhyTF would you want to duplicate your data just to perform an action on each element.
Is the period button on your keyboard broken?
Exactly. Pure carelessness. 5 seconds on Google can prevent all of this. 
he's saying they want a senior java developer who also has lots of js experience. why is that so hard to understand? 
Wouldn't it be better to store the conversion factor in an object rather than create an anonymous converter function for every possible conversion every call? function toMeter() { // can be moved out of the toMeter method const toMeterByUnit = { 'm': 1, 'cm': 0.01, 'ft': 0.3048 }; return this.value * toMeterbyUnit[this.unit]; } The switch method also could be written as: switch (this.unit) { case 'cm': return this.value * 0.01; case 'm': return this.value; case 'ft': return this.value * 0.3048; } Which looks more compact than the [arrow functions translated to es5](https://github.com/appalaszynski/length.js/blob/c20f584ee050a550f3a00e1780f8071cad00c797/length.js#L67) and doesn't execute contextually irrelevant code.
The big outlier I see in jobs where they don't belong are actually accountants
[Code wars](https://www.codewars.com/) lets you increase the difficulty of the problems incrementally and you can sort by tags such as "fundamentals", "arrays", etc... to practice specific areas.
He's a misinformed, arrogant recruiter. Why is that so hard to understand?
Obviously they search for a senior developer who works with jsweet (http://www.jsweet.org).
So basically a new type? Makes cents.
The first rule of sales is to know what you're selling
Node is 8 years old. React is 5 years old. No one has 10+ years experience with them, not even the developers who created them. 
Headhunters and Recruiters are retards, they are not smart people. They are looking for buzzwords to sell to their clients. It's best to directly send your application to the companies. The developers and hiring managers are the ones who can understand your worth. 
8 + 5 = 13. 13 &gt; 10. Boom.
/r/recruitermath
You got the rest right, but Java is over 20 years old. 
On the one hand, I think you meant *composable*. But on the other hand....compos**t**able could be an appropriate name for doing the reverse to emoji: copy/pasting single emoji from a man+woman+daughter+son emoji.
Nice
Considering that it uses the the zero-width joiner, does the joined glyph still count as a single grapheme cluster?
I think your library couldn't be used in AMD enviroment. Ensure the modules is UMD (universal module definition) complaint as the consumers of JS libraries are varied and you can't expect the client to have CommonJS/browser environment. Considerig writing robust unit tests and integrating with CI server.
Tesla VTEC, thanks HR
You need to replace your = with : within the object. Then it will work.
I said the same thing an hour ago and was heavily downvoted. this is just a circle jerk for nerds with no reading comprehension.
what's next, *changing text color with css*? :)
Could be, who knows. Also, OP rephrased it to sound much worse.
That's all nice if the node you are searching for is close, bit if it's buried somewhere inside, traversing becomes extremely hard. Another traversing issue is its fragility. You have your UL&gt;LI&gt;A today and select links easily with traversing starting at UL. Month later As get wrapped into DIVs and your traversing algorithm is broken. I'd recommend avoiding traversing in all cases except for most trivial. Do caching instead and be smart about it.
Well the Javascript, CSS, and Image files are all required to make the viewer work. It doesn't appear to be embeddable as you want, so what you'd have to do is use the `index.html` file as it, and just link to it from the listing of the house, or customize the `index.html` page either manually or through the Marzipano tool.
You're working with the wrong recruiters.
I‚Äôve figured out that this is the best solution.
nowhere in that description does it say you need 10 years of node or react experience. 
By finding a less insane job posting?
This was sent in an unwarranted email. 
5 seconds on Google tells me Java is 22 year old. Asking for someone with 10 years experience as a developer isn't really that clueless. My response is that you must be confused about the job description.
The naming convention is very clear - I like it!
Are you trolling or serious? 
No shit Sherlock. 
Congratulations, releasing something is a big thing! Since it's only 150 lines of code and you know what it should do, I would take the source and paste it here [TypeScript Playground](http://www.typescriptlang.org/play/index.html) just to take a quick look at the errors and add types to some parts of your code and see if it holds up. With these first steps I would install TypeScript locally and add types to your whole code! If your code is typed I would then replace existing code with ES6 features. Additionally I would also write unit tests as a next step.
[`npm install is-thirteen`](https://www.npmjs.com/package/is-thirteen) 
Your words: &gt; Java and JavaScript are different languages and that neither of them are 10 years old 
No, that's probably because they suck at Java, too.
 length(0,"cm") I know it's sacrilige in the wild west of JS development, but don't existence check like this: if (!value || !unit) { 
If someone wants to mutate their object, that's up to them, even if I think it's bad practice. On the other hand. using `find` to find a single element rather than `filter` is surely uncontroversial.
That post's first benchmark shows JSON parse/stringify being the *slowest* option. The benchmark at the end of the post is comparing JSON stringify/parse to JSON stringify/eval, and it's got an error in every single test case that prevents the clone from actually happening. It does `console.assert(cloneFn(obj), n)` instead of `console.assert(cloneFn(obj, n))` so the `while (--n)` evaluates false before the first loop.
Avoiding mutation when not necessary is a good idea regardless of what libraries you're using (or not). It often makes code easier to reason about.
The contextual meaning of "them" seems perfectly clear to me but I further clarified for those erroneously assuming I was referring to the age of JS or Java. This may come as a shocker, but some of us were alive before the 1990s and didn't need to Google any of this...
no where in the description does it say you need 10 years of experience in node or react
This is a tiny glimpse at a 2+ page email. How's your Friday going so far? 
Contextual meaning was updated for those with a tendency to assume. 
Any idea when `is-fourteen` is coming out? Been waiting on that one for a bit.
Oh yeah I typed that on my phone and it auto corrected that one. Composable. 
&gt; Did you consider converting to a standard unit and then doing the lookup to whatever was the target unit? E g first converting all input to meters? length(Number.MAX_VALUE,'ft').to('ft')
Just don't post it on Reddit or a bunch of other "wise" tech "professionals" will inform you how "confused" you are. It's real hurtful stuff. 
Well, I can't say I'm sorry for assuming that you were talking about the things you mentioned, rather than the ones you didn't mention.
I'm guessing its going better than yours, considering you just realized you have the reading level of a 12 year old.
 function add(value) { if (typeof value !== 'number' || !value || value &lt;= 0) { throw Error('add() argument must be number bigger than 0!') } this.value = this.value + value; return this; } Heh. How did you decide that nobody would ever need to add a zero to a number?
Reducing complexity of adding more units was my primary target.
I'd rather read like a child than act like one. 
Lol i get that haha. Referring back to the job process, another comment says to ‚Äúemail directly‚Äù to people within the organization you want to work for. I completely agree with this. I‚Äôve created an excel sheet with a bunch of people I want to contact and over the course of two or so days, I‚Äôve been writing a program in Node that curates html emails for everyone on the list. I suggest you follow my route or at least the philosophy behind it. If you are curious about how to achieve the automation, I used xlsx and nodemailer packages to achieve my desired functionality.
Please simultaneously educate and humiliate us with your 50+ star StackOverflow/GitHub profiles. 
Obviously. Imagine this library is used in a setting where imperial units are the norm and multitudes of intermediate calculations are made before the final answer is derived .. what do you think will happen to the error? 
haha this is original I have never encountered this mistake before haha why email back? they don't care. just wasting your time. 
lol well guess what, you're doing both.
&gt;I don't know, I though if someone adding 0 to, for example, 5 it was not his goal because this operation is not changing anything. Oh boy. What do you think happens when you input '5+0' into a calculator? Does the calculator throw an 'ERR'? Imagine this: var x = 1; //lots of code x=0; //lots of code length(10,'cm').add(x) 
Don't need them, I've got 10+ years experience and the ability to read a job posting
Around 2000 I got an email from a recruiter seeking someone with 10 years of HTML experience. I told them I knew of one person, albeit not personally: Tim Berners Lee.
Ok, now I absolutely don't know why I did that :D Thanks for pointing this out!
Yet another toxic swamp of JS sub...
Whoa guys we got a major hackzor here
this benchmark also uses Lodash incorrectly. it should be _.cloneDeep(obj) and is: var obj2 = _.clone(obj, true); which doesn't perform deep clone.
React and Node are both less than 10 years old
Did I say there were older than 10 years?
&gt; this is just a circle jerk for wannabe devs with no reading comprehension. fucking nailed it.
I'm telling you, it's way better than just using ES with babel, you'll see it by yourself after a while of using TS, going back to ES will feel like flying blind.
The amount of stupidity in this thread is mind-boggling. React is a library, Node.js is a cross-platform JavaScript run-time environment. Java and Javascript are languages. Holy fuck.
Well, let's admit it, the best are found the in CSS department. With HTML department being the runner up.
Yes.
NodeJS is about 8 years old now, React is more like 5 now?
You misquoted OP in an attempt to maker them look foolish. They said React and Node were not ten years old but you left that part out.
Nice username.
Most programming subs on Reddit are full of students who consider themselves senior devs. r/programming seems to be full of people who aren‚Äôt even students.
Pretty sure they want someone older than 10 who owns at least one Node.js, and one React.js.
Ditto
I believe you. I'm going to have to think strategically about how to get my team on board.
It specifically says node 
Ignore the downvotes - *I* thought it was funny. ;-)
Nice work!
Correct me if I'm wrong, but wouldn't spread operator suffice? var new = { ...old };
w3.org is the World Wide Web Consortium, the standards body for the web. It has nothing to do with this website. All you can really do here is figure out where the site is hosted (maybe do a WHOIS), and hope you can convince the host to take the site down. 
Marzipano is a viewer and a tool to create the tours, but it's **not** a hosted service. They do not host your content and you have to host it yourself. You may either continue using Marzipano but host the files on your own site, or you may search for a fully hosted service that does provide what you mention (there are a number of them but you'll have to pay).
On the surface it seems unlikely you'd want to convert a zero value. However if the conversion operation is just part of a pipeline of functions in a larger web app, then this could be an undetected error for a long time.
Just FYI, this exists, and it is built into all major browsers: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat // Create our number formatter. var formatter = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 2, // the default value for minimumFractionDigits depends on the currency // and is usually already 2 }); formatter.format(2500); /* $2,500.00 */ 
`Number(value)` has the same issue, value can never be 0. `isNaN` would work with a ternary statement.
It sounds like the author of Dinero.js uses this under the sheets based on the way they talk about locale files. NumberFormat is also only useful for formatting values, it does not help you add, subtract, multiply or divide values.
Probably not going to get more performant than [lodash](https://lodash.com)
For those that are interested, I built a Emoji Family builder to show how these characters are strung together to become a ligature. It includes support for skin tones, which may not be supported by your device. If the family emoji doesn't render, or it render as many emojis instead of one ligature, it's because your browser and operating system may not support ad-hoc compositing. Windows 10 fully supports this. Your browser will likely render as long as the skin tone is `default`. I'd be interested to see what browser-OS combos properly support this. Have fun: https://codepen.io/bradkovach/pen/xWoKjb
No bro, you were right, OP edited his post
This is somewhat opinion-based, but with regards to #5 (Iterables, Looping and Array improvements), I would recommend describing the appropriate `Array` iteration methods first, rather than `for..in` and `for..of` which have a number of issues. * They're easy to mix up * for..in loops iterate over the entire prototype chain, which is pretty much never what you want - you have to use * Transpiled for..of loops require regenerator-runtime, which is heavyweight and sometimes discouraged * Plain `for` blocks are not composable - you can't easily take a `for` block used in one part of the code and then use it elsewhere - or at least, not as easily as if you had just used an Array method which takes a *function* as an argument. Functions *are* composable, which is a big advantage When introducing people to ways to iterate over objects and arrays, I think it's best to show them the *good* way to do things first - with the `Array` methods. Object.keys(myObject).forEach((myProperty) =&gt; ... Object.values(myObject).forEach((myValue) =&gt; ... Object.entries(myObject).forEach(([myProperty, myValue]) =&gt; ...
lol, reminds me of the last episode of Silicon Valley 
yeah actually I use the same song, the idea is basically just mess with my coworkers
From the server directly. Ive read about headless browser style scraping but preferrably for now I'd like to retrieve the data directly in an easy format such as json. But I know this is asking too much. I'm using Python to send GET requests to the server to retrieve the data. This one website somehow is loading the data but not via get requests. Looks to be jquery/POST. I'm a beginner so most of this could be incorrect
That's been my strategy but this one site seems to be loading data s different from what I'm used to. The site is: https://www.airnewzealand.com.au/best-fares Trying to scrape the specials. Would you mind inspecting and letting me know how the data is being loaded? 
Do these packages talk with jquery? How do I go about finding the server and how to retrieve the data? 
Yeah this seems to be the answer. But trying to not go this route until I really have to
You can't just compile JS to wasm because wasm currently has no built in garbage collection. You need to manage your memory like you do in rust or c++. You can in theory compile a whole vm that would do this for another language. Anyway I don't think there is or will be anytime soon a simple JavaScript like language/library thats going to be your magic bullet. I know unity has a webgl thing, maybe that works? Never tried it. Emscripten is a toolchain used to compile ASM.js and with binyaren it can also do webassembly so you can use any c++ lib with some work. It's also worth noting that wasm *might* speed up your CPU time, but GPU will be the same, which is where most of the work of a 3d program is... I.e. shaders. Wasm doesn't have some magical way to communicate with your GPU any faster or more effectively. It doesn't affect GPU code at all. The main advantage of wasm is existing c++ engines and no garbage collection. I think you could probably get your threeJS example to run pretty fast if you profile it to find out where the bottlenecks are. Tldr; wasm not magic perf bullet
Javascript code performance is rarely something worth worrying about in 99% of situations. If you happen to be iterating over tens of thousands of items, or if you've done a profile test and have proven that a particular `forEach` or other array method is taking up too much CPU time, yes, definitely change it to a `for` loop - but that's a rare case. Otherwise, it's premature optimization, and should not be a considering factor.
Thank you very much for your answer. It makes things very clear. The fact is that, in Express, I'm acustomed to write small REST functions, the controller receives the request, calls the model, handles the error if any and sends the response, it's short enough to be self contained. When I rely on external functions, it's mainly helpers and I try to make them pure (in a functional way, ie. take value(s) as input, return a value and has no side effects). That's why I'm a bit reluctant to delegate database operations and error management. But viewing it as a "sub-process", as you called it, makes sense and help me understand how it can be organized. Moreover, you're right for the naming part. I totally agree with the fact that naming is super important and should reflect what the function does.
Or they just don't know ES6 features.
hey /u/cgijoe_jhuckaby sorry to bring this thread back from the grave, but i wanted to get your thoughts on something. I just got into a CS masters program at Georgia Tech. I'm thinking about whether to accept and wondering if a masters degree is valuable to remote companies? Do they view it as any more or less valuable than a normal company?
jQuery is just JavaScript. You can read the source code for jQuery and you can read the source code for any plugins that might be involved. Also it might be helpful for you to read through this list that compares jQuery to JavaScript: http://youmightnotneedjquery.com/ As for giving you a direct solution to your problem, your path is learning about DOM manipulation and user interaction (mouse and touch).
D'oh! You're right, of course.
One of my coworkers changed their notification sound to that
Watched Silicon Valley this week did you?
Your list is missing [scala-js](https://github.com/scala-js/scala-js)
What should I learn specifically, in order to simply plug this tour into an already existing website? 
What should I learn specifically, in order to simply plug this tour into an already existing website? 
I feel like you need a polyfill for iOS. I know my ng2 code breaks in safari specifically.
That's what I thought, lil bitch.
First line of the README?
3d animation, specifically skinning, in Three.JS is done JS-side on the CPU, which is why wasm implementations are much faster. Even if the demo is nothing but an animation showcase, it's much much slower in JS than wasm. What I'm hoping for (and it's been attempted, for example four.js) is a wasm port of three.js or another 3d library, where this CPU-intensive stuff is done in wasm.
So it is constantly playing?
Can you not do a morph animation rather than skinning? Morphs can be done entirely on the GPU. 
Thanks! added. (open spreadsheet, so if anyone thinks of anymore, please add)
The main issue is that the player model changes very dynamically - different clothes, different weapons, etc. Skeletal animation allows me to pin any item onto the same skeleton and have it work correctly. If there is a way to do this with morph animation, I'm very interested, but as far as I could tell it required having to re-do all character animations for each item they could equip.
Reminds me of this https://www.reddit.com/r/ProgrammerHumor/comments/7nf58y/majors_in_comp_sci/
I recommend breaking the `validate()` function out into two distinct explicit validators for units and values. You can still have the master validate() wrapper if you want, but this is a bit of a code smell to me: // Just check if passed unit is available - value is not important in this case validate(1, unit); That indicates the abstraction is wrong. You shouldn't have to explain why you're passing `1` in. It should be self explanatory by using an explicit, single-purpose function like `validateUnit(unit)`.
I agree that jQuery would be the better option. You can create the table and have each column as a value in an array. Your drag and drop event can insert the column at the new index within the array. If you continue to have trouble, send me a message and I can walk you through some code via Skype.
I'm somewhat sure I use this successfully on iOS but don't hold me to my word.
Go through this link: https://www.w3schools.com/js/js_json_arrays.asp Your question is vague, if you are having difficulty sending a particular data then please specify.
Is there a subreddit for this kind of thing? Realistically many people would like input like this but not every thread is going to become this popular if it's posted in regular programming language subreddits. Also, some people might like giving input.
What do you mean send data? Passing JSON data to a function? Sending to a database? Sending data to a server? If you want to make any data into JSON, just do var json_data = JSON.stringify(data); And to unpack (in JS) call var json_parsed = JSON.parse(json_data);
So last year, while working on a project, I wrote this module for loading other files from within your project easily without having to mentally keep track of all the relative paths in your project, and thus also keeping everything working fine in refactors of a file that loads other modules. A sample migration to fuzzquire from regular require: https://github.com/crux-bphc/fest-manager/commit/8c5cf1fd8df2e0c4eeb3b1e82db288279cb2c0e1
So... is it constantly playing?
If the site has an admin contact, that is your best bet (as mentioned above). If that isn‚Äôt apparent, you might be able to get away with searching the domain name in a domain check tool online; they may provide you with the administrative contact, to whom you can then reach out. 
Data is going to be stored in redux.
Do you know the keys of the object you want to pull out beforehand or do you have to search for them? 
Changes how? In the show it only changes when it was profitable for Gillfoyle to mine bitcoin 
1) Is there an error message in the developer's console log? 2) https://ttmm.io/tech/selector-caching-jquery/
I think .map is the way to go for reshaping the incoming data. Take a look at ‚ÄòreceivePosts‚Äô in this example: https://redux.js.org/advanced/example-reddit-api#action-creators-and-constants and the corresponding reducer underneath. 
Maybe you‚Äôre overwriting a window variable? Try nanespacing your window.* vars to window.(project).*.
Seems like it would be easy to introduce bugs on large projects with this when adding new modules
spent HOURS working out that script (since js aint my thing) and the only thing in dev console is warnings about load times, most probably due to 200+ ajax requests made in loadData() if the information I gathered from my googling around is correct.
http://thedailywtf.com/articles/DOLLARS-and-SENSE
&gt; return length(newValue, newUnit) A lot of important hints. Thank You!
Because one dude wrote how they might have been bots or OP accounts and people downvoted every similar comment without any second thoughts. Welcome to the internet 
Np. It's free. 
This week I created [`cujs`](https://github.com/raphinesse/cujs), a configurable wrapper around UglifyJS that tries to provide smart defaults. I was tired of having the following command as part of my npm scripts based build: uglifyjs dist/awesome-lib.js -mco dist/awesome-lib.min.js --comments /^!/ --source-map \"content='dist/awesome-lib.js.map',url='awesome-lib.min.js.map'\" It creates a minified, mangled, compressed version of some script while creating and linking a correct source map that also takes into account the existing source map of the input file. Now I can do the same thing by calling: cujs dist/awesome-lib.js Furthermore, all options that you still need to pass through to the `uglifyjs` CLI can be given in a sane format by means of configuration files or keys in your `package.json` (using [cosmiconfig](https://github.com/davidtheclark/cosmiconfig)). To allow maximum flexibility and having to track the latest version of UglifyJS constantly, I do not depend on the `uglifyjs` package, but rather look for the `uglifyjs` binary in your `PATH` (using [`npm-which`](https://www.npmjs.com/package/npm-which)). So if you want to minify ES6 code, just install `uglify-es` (or any package that provides a compatible binary) alongside `cujs` and it will just work. I'm pretty happy with the result and already use it in [another small OSS project of mine](https://github.com/raphinesse/dexie-batch). I hope it will be of use to some people and I'm excited about any thoughts on it.
just tried putting all my window.* vars into window.bltc.* and updated all lines using them, but no change. Everything in my script runs as expected, but my example bootstrap dropdown still wont work. Have the single button dropdown example from the docs in the document and it refuses to work.
I have recently been checking `=== undefined` to let through falsy values when they could be there. An example of where this could be used is when checking for a table id. This does not fit in with the programming style of nullifying values on objects when they are not needed, and is not suitable for all cases. It's good for checking for the existence of a parameter that may or may not have been passed to a function.
Gonna do a reorganisation/"rewrite" of my code and see if it helps. Now I at least already have bootstrap linked already xD
&gt; I‚Äôm getting back an array of objects (rows from a sql table, keys being the column names). ??? You get an array so the keys are index numbers. Your column names are the numbers 0...n? &gt; JSON that I want to stringify. JSON **is** a string! 
Hi /u/Mrzeerox, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/bitbytee, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/vandalozzz, For javascript help, please visit /r/LearnJavascript. Thank you!
 Gilfoyle, is it you?
Any change : ```javascript let processValue = (value) =&gt; { let { lastValue, isPlaying } = state if (value != lastValue &amp;&amp; !isPlaying) { playAlarm() } } ``` And it's checking every second so... ^^
There is no best way.
^The linked tweet was tweeted by [@youyuxi](https://twitter.com/youyuxi) on Apr 13, 2018 22:15:43 UTC (502 Retweets | 1585 Favorites) ------------------------------------------------- Something I‚Äôve been working on for the past 2 weeks: a fully Vue-powered static site generator [https://vuepress.vuejs.org/](https://vuepress.vuejs.org/) ------------------------------------------------- ^^‚Ä¢ Beep boop I'm a bot ‚Ä¢ Find out more about me at /r/tweettranscriberbot/ ‚Ä¢
Seems like a terrible idea to me. Has pointed by other , if one guy has a dependency with this and start hacking on `require()` this would leads to tons of bugs. The recommend way to solve this issue is to create "Local npm package" and to `npm link`
Seems to me that I should be able to fix this with the webpack config but I‚Äôve never given it research time - anyone?
Thanks : ) &gt; Hi all ! I just wanted to ask if somebody can help me creating simple calendar with events for example like FullCalendar Plugin. Im not saying to learn to create all this plugin but just some small things for example drawing events, logic how to that. 
Doesn't Nuxt.js already covers static sites?
First impressions are pretty bad to be honest, the text on the site gets cut by the end of the block its in and the text in general is hard to read, its also hard to see what is links on the site. Looking at the wiki on github it looks like you intend to target this at making it possible to do transitions of elements, i'm just guessing tho since you don't actually specify anywhere what problem exactly you're trying to solve with this, and if I'm guessing correctly it probably shouldn't be the responsibility of 'your' framework to do animations. You also seem to provide a lot of trivial wrappers for native JavaScript functions, why? Your documentation is also woefully lacking in concrete examples of how to use the framework in an effective manner.
I know the keys already. Don‚Äôt necessarily want to pull them out just turn them into a string.
Hi /u/gurungp, For javascript help, please visit /r/LearnJavascript. Thank you!
Can you scope all code into a function and that that function on page load plus moving to const variables so it will be scoped to Just that function and not the window. Something you have written is named the same as a jquery variable I‚Äôm guessing. 
Return a promise that resolves to a value within the closure. Alternatively you could just have a callback if you think a promise is overkill.
assuming ur send data fn is named something like `$.ajax` you would do, `$.ajax(url, JSON.stringify([1,2,3,'some','array',data']))`
Promisify the `db.get`: const {promisify} = require('util') // ... const dbGetAsync = promisify(db.get) const value = await dbGetAsync(key) const modifiedValue = someFunction(value) 
You can't suddenly treat an asynchronous function as a synchronous one, but you can use `async`/`await` to make your async code look sync: async function wrapper(key) { db.get(key, (err, value) =&gt; { if (err) throw err; return value; }); } Now, it' "asynchronous all the way up" which means you have to be inside an async function to call `wrapper` using `await` (unless you use top-level `await` but I don't currently now the status of this proposal): async function main() { // ... let value = await wrapper(key); let modifiedValue = someFunction(value); // ... } // either top-level await: await main() or: main().catch((err) =&gt; { throw err });
Looks like the primary goal of vuepress for now is to replace Hexo in the Vue.js website. The default vuepress theme looks very much like the current layout of vuejs.org and the [roadmap](https://vuepress.vuejs.org/guide/#todo-features) covers most of the missing features.
Bravo. And to think it took me 2 weeks to finish building a to-do list
As soon as this is blog aware (it's in the todo list) I'm dumping Hexo. :)
Have `wrapper` return a promise that wraps the call to `db.get`. function wrapper(key) { return new Promise((resolve, reject) =&gt; { db.get(key, (err, value) =&gt; { if (err) return reject(err); // Do something with `value` resolve(value); }); }); } wrapper('foo').then(value =&gt; console.log(value)); Or using `util.promisify` const getPromise = promisify(db.get); function wrapper(key) { return getPromise(key).then(value =&gt; { // Do something with `value` return value; }); } 
Evan is ridiculous, code machine
Try using `window.innerHeight * 0.3`.
The tour is a separate HTML file, so you'll need to use an iframe to place it inside of your page. Once you upload all the tour files to your server, you should be able to put this in your main page: ``` &lt;iframe src="path/to/index.html"/&gt; ``` (make sure to use the correct path!) Once you do that, you an use CSS to set the size of the frame.
Like this: ).clientHeight &gt; window.innerHeight * 0.3 ) Is this correct? What does it do? And what format is it?
Yup. What's happening here is that "innerHeight" is a property of "window" (the global object that contains pretty much everything), and it tells you the height of the page viewport in pixels. Multiplying that by 0.3 gives you 30% of that height, and the result of that is just a regular number that you can then compare with the other number.
Wait, I don't get it. It just seems to be a list of links.
That's true. And, as a tutorial writer who writes software for a living myself, I can testify to the fact that most iterators in a practical setting will usually be used to render or iterate over just a handPerformance is rarely an issue building UI's. Usually heavy computations are reserved for the backend. You usually want to always limit the front end rendering to as little elements as possible. But in today's day and age it is common for JavaScript tasks to be delegated to the server side, (this humorously happened a few times, when the backend teammates simply don't want to do their part of the job) so perhaps... in that area of execution I see how this would become more of an issue.
Thanks for taking a look at it! I'll look into changing how the animation renders. And I've known that I need to add a linking feature.
Implying it's not the dumbest idea ever to deal with money as floating point numbers.
[removed]
Put them into an array and use the Fisher-Yates shuffle algorithm to shuffle them.
It looks like they are going to try to set something up. I will update when I have the details. 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Please do :)
You haven't really said what you're trying to do, but if you want to iterate through an array, you should use the appropriate iteration method, such as `forEach`: movies.forEach((movie) =&gt; { // do something with each movie // reference movie.title, etc });
Thanks for the reply! I'm trying to have it look like this... "Puff the Magic Dragin" "Best movie ever" "Batman" "Second best movie"
your defining moves above: var movies = [ .... then your for loop is a mess. for (var movies = 100; 100; 100){ if you have to use a for loop it should be something like: for (var index=0;index &lt; movies.length;index++){ text(movies[index].title); } 
`for` loops have hoisting issues, require manual iteration, and offer no abstraction - the `Array` methods are much more preferable. Put 4 spaces before each line to post a code block.
Thank you for the reply! Am I getting closer? for (var i = 0; &lt; movies.length; i++){ fill(84,140,209); textAlign(CENTER, CENTER); textSize(20); text(movies[0].title, 200,100*100+50); textSize (10); text(movies[0].review, 200,100*100+100); } 
Ok, then iterate over them with `forEach` and add the text accordingly
your missing the I before the &lt; for (var i = 0;** i**&lt; movies.length; i++){ then you need to use I as the array position ext(movies[**i**].title, 200,100*100+50 
Thank you for replying again! :) I made these changes but it's still not complete... for (var i = 0; i&lt; movies.length; i++){ fill(84,140,209); textAlign(CENTER, CENTER); textSize(20); text(movies[i].title, 200,100*100+50); textSize (10); text(movies[i].review, 200,100*100+100); } 
I don't know what those other functions are but simplify it as much as possible. for (var i = 0; i&lt; movies.length; i++){ console.log(movies[i].title); } get something like that working then add back in the other stuff line by line.
yea he is like non-stop
Get a life bro.
It's looks like a good amount of work and well-executed, but... Why? What problem does this solve?
Do you have the thumbnails and links already?
I believe so.
When would you even display 5.9999 as anything but 6.00 other than in accounting software?
There are many ways to do this, but here‚Äôs one option which will minimize the amount of preloaded content... Every YouTube video has a unique thumbnail image: https://www.thewebtaylor.com/articles/how-to-get-a-youtube-videos-thumbnail-image-in-high-quality Make your grid out of these images, to each, add a click handler which swaps in the iframe code to show the video, with autoplay on: https://developers.google.com/youtube/iframe_api_reference#Example_Video_Player_Constructors
https://github.com/rvpanoz/luna/blob/master/luna-v2.1.0-preview.png
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [rvpanoz/luna/.../**luna-v2.1.0-preview.png** (master ‚Üí 134c0be)](https://github.com/rvpanoz/luna/blob/134c0bea3b635cca85977b744656ba8c9e260180/luna-v2.1.0-preview.png) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dxe2i9a.)
Oh, nice. Thank you
Anything that trades uses 6 decimal places. 
You can't wrap an async operation to somehow make it synchronous. You have to deal with the fact that the result of db.get will not be immediate. You can do this by using a callback (like what db.get gives you) or by using promises. function getFromRedis(key) { return new Promise(function(resolve, reject) { db.get(key, (err, value) { if (err) { reject(err) } else if (value) { resolve(value); } } }); } getFromRedis('some-key').then( function(value) { console.log('value from redis is ' + value) }, function(error) { console.log('error from redis is ' + error) }, })
Ok, sure but for almost every price formatted with JS (shopping carts, etc) it makes more sense to round
No offense, but I think you're severely misunderstanding loops. Your 'for loop' makes no sense. I have no idea what fill() and textAlign() are doing, although I can make an educated guess. What course are you taking? Does it involve something like p5.js or Processing? I think you need to go back and reconsider your understanding of what you have learned. In truth, much of your code is meaningless. 
It almost seems like it's his day job
Currently what I'm doing. :)
Does anyone still use ember?
You'll be fine. Relax. Breathe. The MDN will be there for you. Have your thought about C#, though? It's a viable web option with ASP.Net, and it's similar to Java. Of course, you'll need the trinity of web development: JavaScript, HTML, and CSS. Something fun from Java will be prototypal inheritance. ES6+ has made huge leaps for development with JavaScript.
I don't think you can do the first in javascript ... or at least, if you can, that's news to me. You can get an array of the keys: `Object.keys(blah)` or an array of the values: `Object.values(blah)` using an array of keys, you can iterate over your object: blahkeys.map((key) =&gt; { let thing = blah[key]; //value }); https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values 
Cool. Thanks for the speedy reply. You've confirmed my suspicions. Alec
Yes, a lot of us. 
people will make you questions about JavaScript and you will be like "Are you dumb? You can't just sum a number with a string" and then you learn something else JavaScript works, don't worry that much about some quirks, you won't ever find any issue with type checks and that weird js specific cases (at least I didn't) Learn vanilla and then go into into a cool framework, react is the shit right now, for back end you can go to asp.net with c# or just nodejs with express
The closest equivalent would be something like for(let [key, value] of Object.entries(blah)) { /* someStuff */ } But you're probably better off using blah.forEach((value,key) =&gt; {/* some stuff */}) [Or Map.forEach.call(blah,(value,key) =&gt; {/* some stuff */}), if you don't have a map to start off with]
It is his day job lul
Using a linter is a good way to learn the wtfs and the best practices as you go. You'll try something, it will complain, then you go Google the lint rule and learn something. It's better than me trying to explain here because there are so many. eslint is the de facto standard linting tool, and I would say Airbnb's ruleset is the best out there.
^The linked tweet was tweeted by [@JorgeBucaran](https://twitter.com/JorgeBucaran) on Apr 15, 2018 06:11:49 UTC (1 Retweets | 5 Favorites) ------------------------------------------------- I just replied to someone skeptical about managed effects in Hyperapp 2.0 so let me share my answer with y'all. The OP's question was: ‚Äî Can someone enlighten me on rationality behind declarative effects in JavaScript? ü§î [https://github.com/hyperapp/hyperapp/issues/672#issuecomment-381381162](https://github.com/hyperapp/hyperapp/issues/672#issuecomment-381381162) ------------------------------------------------- ^^‚Ä¢ Beep boop I'm a bot ‚Ä¢ Find out more about me at /r/tweettranscriberbot/ ‚Ä¢
[Take a look at this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax). .map returns an array and so the spread operator on the return (an array) will break up the array into a list of values (confusing to explain but look at the link's sum(..array) example)
First, anything that is just `...x` is meaningless. The spread operator is only syntactically valid within either an array or object literal, like `[...x]` and `{...x}`. Without seeing the original code, I am going to assume that your top example comes from inside an array (an object is possible but it would be unusual to use it that way). If we unpack the code we get... let x = this.state.courses.map(mapper); let y = [...x]; What's the difference between `x` and `y`? Not much. They will both be arrays. And their values will the the same. The only difference is that `x` and `y` will point at different objects in memory. That's often very useful (especially if you want to keep a clean copy of `x`). But in your original unpacked code, this doesn't happen. `map` already creates a new array and the rest operator just makes a new copy. So what's the difference? It's nothing but an added step.
If you're experienced in Java, then you should try out TypeScript, which compiles to JavaScript yet is a C# (Java-like) inspired, strongly-typed language.
you "and your team"?
Ya 
you have a javascript fellowship, or wtf
not haskell?
Well not really 
Ok you need a job or what? 
Data structures education is a great thing, so I don't want to criticise that but... It would, in my mind, be more effective if you used primitives and functions. I mean I get it - it's the typical OO approach but if you're teaching data structures and the language has primitive data types that support those operations, it'd be easier to start there and then go into how things work from that. That way there's less noise and it's quicker to play around with. I'd still only use plain old objects and functions when exploring how they work. To me, the OO style just adds a lot of noise for little gain. 
? 
No.
lol the spam on subreddits is funny. on python subreddit its literally the same text just with python in it. you could try to be a little bit more creative :D 
Ok we‚Äôre just looking to earn some cash if you need something done just tell us 
I wouldn‚Äôt think so 
oki, I'm not sure tbh. well.. best of luck 
Thanks 
It's almost like: *Hey whats your job?* I'm a coder *Nice, what do you like to do in your free time?* I code.
What data are you looking for, an example would help
I was a bit confused at first. The last step sounds like sanitisation but this little library doesn't do that. It's just the middle function we're looking at. Maybe the rules with args, like `maxLength`, would benefit from reversing the argument order and then currying them so you can specify rules like `maxLength(20)` without needing to wrap them in anonymous functions. 
Try running the following and see the difference: ```javascript ;(function () { 'use strict' const myArray = [1, 2, 3, 4] console.log('Without Spread Operator', myArray.map(fn)) console.log('With Spread Operator', ...myArray.map(fn)) function fn (x) { return x+1 } }()) ```
Okey... done some rewriting, but still no working bootstrap dropdowns when my script is loaded. if you can look at it over here: https://gw2.izz0ware.info/bltc/rewrite/ and see if you can figure out whats wrong Please remember that im not totally familiar with javascript, but PhpStorm doesn't complain, and the script does what it's supposed to do, and no errors in dev console. just warnings about forced reflow and load handler times.
If you're already using it, probably. If you have a complex Ember application you're maintaining then Ember's continuing active development and sensible upgrade paths must be a godsend.
If youre not using it already of course
This submission has been randomly featured in /r/serendipity, a bot-driven subreddit discovery engine. More here: /r/Serendipity/comments/8cep2b/ds_with_js_stack_queue_data_structures_with/
üò≠Thank you so much
I understand that. If you have a choice why pick ember then ? Its like picking angularJS over Angular.
I've been using Atom for years - been meaning to check out vscode
Off topic, but does anyone know of a quick way to add italics to a theme (mostly for React/JSX with or without Operator Mono)
I'm interested too , I don't know how VS Code handle syntax highlighting..
But.. you can "enjoy hidden features". Sounds good to me!
Jesus, the guy in the pic looks alot like Oliver from the alternative/metal band "I See Stars" with a haircut lol.
Hey, grat2013, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
At the end of the day, they all do about the same job. However, I absolutely love vscode. I found it quicker to boot than atom, and more options for extensions etc. As I use Windows, it works really well with the os. Though I've heard good things about it with other operating systems too
Yes, came here to say this too!
If the only comparison is adhearing to semver, sure. 
Vscode blows Atom out of the way in terms of performance. Neither of them are racecars thanks to their Electron plumbing, but VsCode is at least bearable, while Atom is excruciatingly sluggish. I tried really hard to like Atom. In fact, I was one of its earliest adopters and evangelists, sticking to it even back in the day where it took a solid half minute to even launch it. But with VsCode both having better performance and more features (especially relating to JavaScript) out-of-the-box, there's very little reason to use Atom these days.
It looks white and blue to me.
You could also use Object.entries https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries 
This is a neat implementation, but reading through the code, I'm a bit concerned about performance. It is driven by run-time introspection and run-time lookups, so that even single property access, even by numerical index, has to go through the `isSwizzleKey` rigamarole. Have you compared the performance penalty vs something like three.js's vectors? I wonder whether it wouldn't be a lot better to simply generate an appropriate object prototype that directly implements every possible swizzle as a getter.
Yes. Have a look at this: https://www.emberobserver.com/
Are you color blind? Seriously asking 
Exactly and that's perfect for demonstrating the behaviour. Clearly it doesn't show "how it works" but I can envision working from am array based implementation and "filling in the blanks" with an implementation that replicates that. You'll have short, runnable code at every demonstration that's easy to understand so you have a constant feedback loop of runnable code. Great combined with the REPL. 
I was throwing back to [this.](https://en.wikipedia.org/wiki/The_dress)
I think this is a reference to The Dress https://en.m.wikipedia.org/wiki/The_dress
[removed]
Ember has a but in data library
So, it‚Äôs just another Vue-flavored static page generator, minus most of the features of popular static page generators, with a handful of Markdown extensions specific to technical documentation. Cool.
I'm not super familiar with Atom, but VSCode leaves me wanting for nothing. It's *so* good compared to other IDEs I've used. The only features I was missing, they ended up adding in less than a month with that insane release cadence.
Yes, you are absolutely right but there is a reason why I chose linked-lists to show how Stacks and Queues works rather than just using Arrays. The reason is that while implementing stacks in JavaScript we can just use Push &amp; Pop methods and we can show this is how stacks works but what about if we have to implement stacks in C or C++. In those languages, we do not have push and pop inbuilt methods but if he or she has gone through this linked-list method, he will atleast have an idea that this is one way using which we can proceed. So, in order to make a robust approch to stacks and queues I have used Linked-List approach. Please have a look at this video- https://dev.to/vaidehijoshi/stacks-and-queues--basecs-video-series--20oj
Yes, just links from my youtube page. 
Thank you for your advice, I am going to try shortly!
I thought about that and addressed it in my original comment. I can see why and that's why I made a point of it. I just think, given JS, it'll be easier for people to understand without all the ceremony of class-like OO. I think it's a good idea to teach fundamental data structures though. I do like that and much respect.
‚ÄúNuxt is capable of doing what VuePress does, but it is designed for building applications. VuePress is focused on content-centric static sites and provides features tailored for technical documentation out of the box.‚Äù ... From the site
Sounds like you were using it wrong. :/ Jsonapi is great, but you need to deal with the things you mention, and a lot of backend tools that support it are trash. Jsonapi-rb is really good. Staying away from lazy loading is a must, and using sparse fieldsets helps with optionally getting data. You need to white list what relationships you can use per endpoint (just liike Graphql) Imo, i think you just had a bad experience. The things you mention aren't ember issues.
Ember has project structure conventions, which help a ton. So many react projects i've seen are just so disorganized and haphazardly put together.
I've only worked with angular 2, but you still need to manually specify template and styles per component? With ember, there is a convention, soo youdon't need to configurre anything other than just using component.ts, template.hbs, and styles.scss in the same folder
Another thing is that pproperly implementing an api on the backend is very Non trivial. Very easy to allow performance issues. Standard rest, jsonapi, Graphql, you name it, all have similar problems to solve
Hi /u/Haskellcoder_12, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board).
Hey, Not exactly what you are asking for but relevant to the 2nd example of yours. I still use the `for... in` syntax of the 2nd example, BUT you have to be careful because it iterates all of the object properties including the ones inherited through the `proto` chain. To make that right and iterate through the keys that you created for you object you need to use the `hasOwnProperty` method to check if the key you are iretating indeed belongs to your object and is not inherited. To your example it would be: for(let key in blah) { // check if the prop indeed belongs in this object if (blah.hasOwnProperty(key)) { // get the value const val = blah[key]; } }
Hi /u/TECHAnonymousYoutube, For javascript help, please visit /r/LearnJavascript. Thank you!
Edit the theme.json file
You can style anything using textMateRules. You can configure these rules in your user settings (CMD + ,). Here are mine for example: "editor.tokenColorCustomizations": { "textMateRules": [{ "scope": "storage", "settings": { "fontStyle": "italic", } }, { "scope": "keyword", "settings": { "fontStyle": "italic", } }] } To find out what scope you want to style, you can use: CMD + Shift + P Then type in: Inspect TM Scopes Now when you click on something you can find more information about it. Once you click on something in your code, a box will show up. The third section of that box that comes up shows you what the type you need to target for styling. So for example, [in this image](https://i.imgur.com/tQIqcFf.png) you can see the type is 'keyword', and the styles I set in my settings are there (italics). 
You can style anything using textMateRules. You can configure these rules in your user settings (CMD + ,). Here are mine for example: "editor.tokenColorCustomizations": { "textMateRules": [{ "scope": "storage", "settings": { "fontStyle": "italic", } }, { "scope": "keyword", "settings": { "fontStyle": "italic", } }] } To find out what scope you want to style, you can use: CMD + Shift + P Then type in: Inspect TM Scopes Now when you click on something you can find more information about it. Once you click on something in your code, a box will show up. The third section of that box that comes up shows you what the type you need to target for styling. So for example, [in this image](https://i.imgur.com/tQIqcFf.png) you can see the type is 'keyword', and the styles I set in my settings are there (italics). 
Yep, TypeScript is a great way to move from desktop development. Depending on the type of work OP is interested in (I'm assuming single page applications) Angular is probably a good choice. Powered by TypeScript with a 'kitchen sink' approach makes it feel closer to desktop app development than any other tool I've used. If that doesn't stick there are plenty of other options; React, Vue.js and friends are all great tools to make you more productive in the realm of SPAs.
Hello BenjiSponge, The application is an npm manager where you can manage npm packages (install, uninstall, update etc) through a modern UI with React. You can preview package details such as dependencies, versioning etc. Also the application informs you about missing packages. You can always post your suggestions/issues on https://github.com/rvpanoz/luna/issues or make a PR. Stay tuned :) 
You definitely should! I was using atom and made the transition, it feels very similar, but opens larger codebases much faster. I was able to find a substitute for everything I was afraid to lose, and more.
I get a 404 following the link :( maybe it‚Äôs just me though 
Yeah. It is because of the , at the end
This I agree. Even with angular 2 with google's styleguide, people still talk about how to organize files. Ember enforced a rule which helped a lot.
Yea I dont mind writing function() {}. I wished I didnt have to do that = this before every callback function.
Looks like you put the same link in twice. With regards to performance, 3D vectors leads you down the road to WebGL, and this library would be nice to provide more cohesion between JS code and GLSL code. If the performance implications are such that it comes at a massive overhead, that would be a bummer. This stuff can definitely have real-world consequences. It may be a bit futile though, as accessing swizzles constructs new arrays, and in GL code you want to avoid new allocations and garbage collection as much as possible. Makes me wonder if it's possible to use a heap of pre-allocated vectors with some sort of weakmap to do a soft-GC and minimize the problem. As an intermediate option: you could optimize the swizzle key lookup by inserting all valid swizzles keys into a dictionary and doing a single lookup, rather than parsing the swizzle string character by character every time.
You can apply effects in a "buffer" canvas that will not be attached to the DOM.
I edited and removed the coma. 
I don't know off the top of my head, but [this](https://code.visualstudio.com/docs/extensions/themes-snippets-colorizers) exists, if you want to read it.
What a great idea! This platform will be very useful for scientists who work out poor countries. Congrats for your action! Now, scientists show your work and get funds to do science!
Don't use meteor and more people might be interested.
I really want it to become a global platform, but focusing first on poorer countries might be a good idea.
To elaborate, the ‚Äúhe‚Äù ‚Äúhis‚Äù are pronouns that, when removed, makes greatly increases the perceived objectivity of a statement, sounds less exclusionary and lends more credibility to your objectivity. Cleaning up little things like this go a long way towards the success of a project.
Where?
LinkedIn and Twitch, two of the biggest internet companies out there, both run on Ember. Not just for legacy reasons either--they've both implemented significant new features using Ember in recent years.
[FeathersJS](https://feathersjs.com) would be my first pick (extremely flexible, decoupled, and agnostic, plus real-time built in). AdonisJS would be my backup choice.
Because who cares about readability when it looks pretty!? /s
Bootstrap is a 2006 buzzword? From https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework) -- " It was renamed from Twitter Blueprint to Bootstrap, and released as an open source project on August 19, 2011." Sorry, *every* time I see something so egregiously wrong from the get go, be it a book or an article, I stop reading and dismiss it entirely.
Looks good. I've been using [ndm](https://720kb.github.io/ndm/), so that's what I've been comparing Luna to. Here are a few suggestions, in no particular order: * The blue bar under Github stats is cut off at the left or right (depending on the tab being viewed). This is on a 24" monitor. * When selecting dependency packages with the checkboxes, it would be nice to be able to bulk update as well. * On the dependency list, I don't see any differentiation between dependencies and dev dependencies. * In the Open Package dialog, I believe you can narrow the files shown to just `package.json`, instead of any JSON file. * It would be nice to have a list of the repos that I opened, perhaps in the sidebar, so I can quickly go back to them. * I think you need a bit of spacing between the tarball URI and `Integrity`, when `Integrity` is `N/A`. * It would be nice to be able to read a package's README, as well as have a link to open the package's page on npmjs.org. * I think the scroll bar should be a different color than the top bar. At first, I didn't realize it was a scrollbar. * It might be worth considering caching the data of packages already viewed once, so you can display something while the data is being updated. * I think there be an option to have the package list be a long list scrollable downwards, instead of pages of 10. * Under Github stats, it would be nice to have the dependencies be link to open that package in Luna. Similarly, for the Dist Tags. * The names, emails, and URLs under Details, Maintainers, and Contributors could be clickable links. The licenses could be links as well. * The horizontal date axis under Github stats can get crowded and hard to read. Let me know if you'd like me to open issues on Github for these.
you need a cb, simply because the exercise wants you to apply a cb on each item in the collection. callback(collections[i]) lets break this down... first inner, to outer. first: 'i', in short, is current index, while you are inside of the for loop. Since in this condition, collection is an array, collection[i] means to access the collection array at the ithe index. so for example: var collection = [1,2,3] collection[2]; // 3 So, callback(collections[i]) means to apply the cb to the collection at the ith index. eg: var cb = function (item) { console.log(item * 2) } each([1,2,3], cb) // 2 4 6
&gt; Node is the language ... ‡≤†_‡≤† 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array should explain what collection[i] does You're obviously working from a tutorial or a school project. This each function is an interesting and useful tool to understand and work with. Try it with a callback like : function(value) {console.log('foo', value);} and a collection like [1,2,3]
Thank you! I've not tried rust, is there a reason you recommend it?
If you have never programmed in a low level language like C or C++, learning Rust will teach you a *ton* of things you don't ever really encounter in JS, including pointers, memory allocation, and a concept called lifetimes which is unique to Rust, among other things. And unlike C or C++, Rust has Cargo which is their equivalent to npm. It's really nice.
What framework would you recommend other than Iris?
None. Use standard libs. 
I'll be honest, I don't know (I've only been playing with Go for a week or two). I will be doing some research on this over the coming week or so, and can report back once I have a recommendation?
Interesting! I'll have a look into Rust then! Thanks for the recommendation. I'm a self taught JS Dev so I'm always looking to pick up any missing concepts. 
Oooo...I like this. This is JavaScript's take on lambda's, right?
when you say it doesn't work, can you be more specific? 
Its says undefined when the array is NOT empty. 
http
Use /r/LearnJavascript
what's undefined?
The standard library does everything you need.
Ah ok. I think I get why I was being downvoted now :)
I think you are just being needlessly pedantic, the guy was just being flippant
Why? It seems perfectly reasonable to me
If they all all of those dependencies specify an exact version in their `package.json`, or ones that don't overlap such as `^`, then you will get three copies of package foo. You should be able to see the carnage by looking at the `node_modules` directory to see that multiple versions are there. Really this kind of thing isn't webpack's fault. It's really easy to let your dependencies get out of control if you start loading anything you find. Ideally your dependencies are of the same "era" whether that's bleeding edge or 2 years ago.
They seem reasonable interview questions to me, good enough to start conversations with the developer
Wow! thanks for your time to post the list. Yes it would be nice if you open issues. :)
Your for loop needs a limit of i &lt;a.length - 1, because you access a [i+1]. This is out of bounds in the last iteration of the loop.
You have an off-by-1 error in your code. 
Done some narrowing down and it seems to work until I do my insane amount of ajax requests... After that it just stops working...
Oh noes it's one of those "ambient sounds" pages bullshit - I thought we were through with them... :-(
`exec(`perl -e '1.1+1.2'`);`
To me it's a red flag. As an interviewee, I'm now wondering if this is what your codebase looks like. Are you really using *var* instead of *let* and *const*? Do you have lots of random functions here and there that use *this*? Relatedly, is your codebase susceptible to errors resulting from forgetting to use *new*?
Not sure about now, but 2 years ago when I tried it, they basically tried to build their a stack on entirely non-portable technology that doesn't interoperate with rest of JS world. The database backend was Mongo only, they had their own service layer that emulates Mongo API that's not compatible with AJAX, they had their own async framework called Fiber that wasn't compatible with Promise/async/await. They had their own package manager that had limited packages. Even if you wanted to use a polyfill, you can't use it directly, you had to wait for someone to package it for Meteor. 
Still getting the same thing 
I read it as just an entry level question to weed out complete beginners and an excuse to talk about how objects are instantiated and the prototype chain. Interview questions !== production code
Usually when programmers refer to "the standard library" of a language, they are referring to the libraries that come included with the language. For example, `console.log` is a function that exists in Node's standard library, and it's included when you install Node. You don't need to install anything separately to use it (https://nodejs.org/api/index.html everything in this link is Node's "standard lib"). The Go community tends to recommend that you avoid external libs in favor of Go's standard libs. In this case, they are suggesting that you use [http](https://golang.org/pkg/net/http/). Ignore the downvotes. Programmers, especially on reddit, are terrible people that tend to hate newcomers.
Why?
I'm pretty sure native JS is not the language you should be using if efficiency is a big priority - use a fast compiled language instead if at all possible, rather than an interpreted scripting language.
Cheers. I just had a stupid moment. Thought they were referring to something different. 
One person's flippant is another person's moronic. At least don't be wrong by half a decade when referring to a web technology -- that's a billion earth years.
Just fwiw, that's all changed now. * Package system has been largely deprecated, NPM it a first-class citizen in Meteorland * Minimongo can be swapped out for Apollo (something something GraphQL, I'm not a backend guy) * The async stuff is all vanilla JS now (ES6 and beyond)
Yeah it still suffers from some of that legacy but it's opened up a lot. The package manager issue isn't really there any more. There's solutions to the promise issues as well. I gather with Apollo the mongo limitation is gone also, although I've not tried it yet. Thanks for the reply. Imo, although I'm not strictly a front-end guy, if you want real-time push/pull without effort out of the box, at the mo with react as a front-end it's a good solution.
You could be using C++ and [compiling to webassembly](https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm). It's a relatively new thing but [seems well supported](https://caniuse.com/#feat=wasm).
Is coming tokeep meteor for now. Great for MVPs and anyone with JavaScript experience can pick it up fast. I've used meteor for years and haven't had any issues. Also - excited to look into this! Would love to contribute.
Seconded. I started tinkering with Rust a bit here and there and it's a pretty darned cool language and package manager (`git clone`, `cargo run` is about a million times better than any cross-platform C/C++ install experience.) The main drawback is that support libs for things you might want to do may not really be there yet, or very alpha.
THANK YOU FOR THIS GENTLE INTRODUCTION TO TESTING VUE APPLICATIONS 
TESTING IS A WASTE OF TIME ON THE FRONT-END
I hope someone else confirms this but I'm pretty confident that's how it works. Did you ever notice on package.json how there are some symbols next to the version number? Those symbols determine what version range is compatible with the lib. This is one of the reasons libs like React only introduce breaking changes in major versions. That way any React 16.x.x will do. And for example React 16.3 introduced a new context API and started the process of deprecating some lifecycle hooks. Notice that even though they changed those hooks names to denote it's no longer safe to use they still kept the old ones working to avoid breaking compatibility. Now if I were create a lib that depends on the new context API I'd configure it to work with 16.3.0 and above, but not 17 since there will be breaking changes. And if you then use my lib and something else that depends on React 16 and above, only 16.3 should be packed. If I'm not mistaken this process is called deduping so maybe you can find some article on google.
Sorry for the all caps title when I last posted, I just copied/pasted without thinking
The first question will only result in an error. The `b` and `c` log lines will never be executed in the first place. &gt;You are not allowed to use JS Objects (maps) in your solution but can use Arrays. But an Array is an Object... The provided solution using this.dict = []; arr.forEach((word)=&gt;{ var code = this.encode(word); this.dict[code] = 1; }); has problems. The appropriate Array method is not `forEach`, but `reduce`. Also, if using ES6, which you should, use `const`, never `var`: this.dict = arr.reduce((accum, word)=&gt;{ const code = this.encode(word); this.dict[code] = 1; }, []); Also, the `encode` function there has no meaning to anything interfacing with the class. Probably better to define the `encode` function standalone and then export the class so that it isn't unnecessarily exposed. Question #3 has multiple issues as well. Don't use `let` when a variable isn't going to be reassigned, or doesn't need to be assigned a dummy value in advance; use `const` instead. When reducing an array into an object, use `.reduce`, not `forEach`, like so: const words = sentence .split(' ') .reduce((words, word) =&gt; { words[word] = (words[word] || 0) + 1; return words; }, {}); console.log(words); Same issue for the iteration over `wordsCounter`, except that there's another problem: don't use `Object.keys` - you need the values too, so use `Object.entries` instead. The provided solution for #4 is very messy: it would be far clearer (and shorter) to use `.reduce`, which would only take a few lines, rather than 21.
I'm in a very similar situation. I've been slowly moving my favorite backend stack from Node -&gt; TypeScript -&gt; Go. Its a pretty natural progression. A couple negative of go are the GOPATH weirdness and lack of 3rd party support. The 3rd party libraries are there but theres no NPM to easily search, compare and review them. 
I think the example for the dictionary implementation does not work how the author intended. The maximum length of an array is bound by an unsigned 32-bit integer. const arr = []; arr[4294967295] = 'foo'; console.log(arr.length); // 0 console.log(arr[4294967295]); // foo The "hash" will frequently exceed the max length and become a property on the array rather than an index.
Appreciate you sharing! There are definitely things I like about Go. I can see it being another tool in the tool belt, but I can't see it replacing Node
Some of those scammers who mine crypto on your pc are already using it! These days I‚Äôve come across a website opening 6 threads of webassembly mining (not on my machine, ublock caught that). There are also some experiments on doing math through WebGL around.
In JavaScript you can use setInterval(function(){...}, 1000); function to execute statements within {...} every 1 second. Or you can use setTimeout(function(){...}, 1000); to do the same, once.
You could use [WASM](https://developer.mozilla.org/en-US/docs/WebAssembly)for computations that you need to make efficient. You can write C code then compile it down to WASM and call it from your JS code. [It's only supported in newer browsers though.](https://caniuse.com/#feat=wasm)
Looks nice, are those 3D butterfly models?
I'm still working on this one but I think that the main problem is another one. Some of the Answers field are empty, and I want the code to create an array with only the fields that are not empty. Let me be more specific. I have: Answer A Answer B Answer C Answer D Answer E Answer F Answer G Answer H Answer I Answer J These 'fields' are the things that are referenced in the curly brackets, e.g. {{Question}} and {{Answer A}}. I fill them in order, i.e. if Answer G is empty, then Answer H, Answer I and Answer J will be empty as well. Is there a way lot have Javascript know how long create an Array? I can change their names if it helps with coding--e.g., Answer00, Answer01, Answer02, and so on.
You should be able to get some performance improvements by following some of the [asm.js](http://asmjs.org/spec/latest/) patterns: * Use a static style: e.g. only variables and typed arrays for data storage. * Coerce everything to int (works internally, not on the spec/ECMAScript level): * `const someInt = 123 | 0;` * `const result = (int1 + int2) | 0;` Other than that, take a look at WebAssembly for pure number crunching. There are more and more compilers that target it. For example: Rust and C++.