Searching for what exactly a registry in this case is, I found this issue: &gt;[# Deprecating registry.yarnpkg.com #5891](https://github.com/yarnpkg/yarn/issues/5891) &gt;**Open** **jamiebuilds** opened this issue on May 26, 2018 · 11 comments
Large enterprise companies host a copy of npm and have their own npm repos (with their own packages). I worked on a project for a Canadian bank and it's set up that way. I have no knowledge of how much they charge.
But it's not just an opinion here, you hold a pretty textbook example of bootlicking - defending mobilization of workers in favor of protecting corporate growth/profits.
Woke organizations will always become a circular firing squad/purity spiral. Trying to be better isn't good enough when you're hiring on the basis of who can be more progressive.
I don't know why there would be laws against firing a batch of employees. The point of the union is to make it too painful to do so. If a law protects against mass layoffs, there would be little reason to unionize. The reality is that a large number of states support at-will employment, which means unless an employee has a specific protection, they can be fired for any reason, or even no reason. Joining a union is protected in many of these states, but at-will employment gets around that because they can fire for no reason. So if an employer isn't a full blown retard, they don't specify a reason and it becomes legal.
If you are in a position where you can comfortably save for retirement, you are not a slave. You have all the options in the world. This feels like ego and a power grab more then social change and this is coming from someone who is well acquainted with crunchtime exploitations of the industry at its worst.
You’re totally right and I’m ashamed I got that wrong. Apple is way older
Fuck unions
The point is that you need to protect against deletions or updates. A package version needs to be retrievable and the same forever.
Alright how about IPAD - International People-hood of Administrators and Developers.
Hi /u/QuickBalance2, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/BehemothEvangelion, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/knickerBockerJones, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Do you think NextJS will be good for this product?
The recourse is to leave and go work for a different company. There are tons of tech jobs.
&gt; You never mentioned organizing your files and uploading them to a single CDN, I had just assumed “copy and paste CDN URLs from their GitHub repos” because that’s what some people Yeah that make sense. But assuming the cache is fine this shouldn't matter that much
The reason why that exists is not because the guy is lazy. It’s because employers routinely ask employers to provide more work/value than what was originally agreed upon in the employment contract. If I’m hired to build your FE, I’m not touching anything on the BE because that was outside the scope of our agreement and I’m not being compensated for that labor. We would need to sit down and renegotiate for those services. This should be true for all workers as well. If both parties agree for you to do X and *be paid only for delivering X*, then you should not be required to do X + 1 or Y. Businesses do this *all the time* in their contracts with other businesses. But when labor asks for the same arrangement, capital loses its mind.
Wait, you pay to use npm?
Hey I replied to your comment and a few to someone elses. Maybe you can explain more because I don't really understand https://www.reddit.com/r/javascript/comments/bg79fo/npm_layoffs_followed_attempt_to_unionize/eljs3pn/
Mod is a T_D poster and MAGA nut FYI
https://en.wikipedia.org/wiki/1804_Haiti_massacre &gt;Even whites who had been friendly and sympathetic to the black population were imprisoned and later killed.[4] A second wave of massacres targeted white women and children.[4] https://en.wikipedia.org/wiki/Amy_Biehl &gt;Amy Elizabeth Biehl (April 26, 1967 – August 25, 1993) was an American graduate of Stanford University and an Anti-Apartheid activist in South Africa who was murdered by Cape Town residents while a mob shouted anti-white slurs. The four men convicted of her murder were pardoned by the Truth and Reconciliation Commission. This is what that attitude will get the likes of you. The thing about racists, they don't give a fuck whether you are one of the good ones. Much like the likes of you, they don't understand or don't care that vast, vast, vast majority of white people are not oppressors and are not descendant of oppressors (and I'm not fucking saying that it would matter if they did), and the only, very only reason why you aren't getting lynched in the streets is because the likes of you are thankfully still a minority. Open your fucking eyes. Use your fucking head. Wake the fuck up.
“Limited access to the internet” was a significant detail, I think. Real secrets require the control of access like that. You would have to physically carry the data over on drives after sanitizing any updates. It is far easier to do that by “airlocking” the connections and having secure communications between your npm repository and the mothership. I could be wrong, but that’s how I would organize it.
Hi /u/shade_codes, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
A sneaky advertisement for Svelte. Looks mighty fine though. I guess as he said, compilers are coming here to stay and with that, mainstream approaches Svelte more. I could definitely imagine myself using svelte in the future.
If you are a contractor or freelancer that is a perfectly fine attitude to have. But if you are a full time developer, the task shouldn't matter.
Well done!
Not seeing any mods in the list, did they delete their account?
&gt;The Google Walkout organizers made [several specific demands](https://www.thecut.com/2018/11/google-walkout-organizers-explain-demands.html). Previous internal organizing at Google uncovered [gender-based pay discrimination](https://www.theguardian.com/technology/2018/oct/26/google-gender-pay-gap-women-class-action-lawsuit) and got the company to agree to drop a military contract, although it seems unclear whether [the company will follow through](https://theintercept.com/2019/03/01/google-project-maven-contract/). Employees at SalesForce has demanded that the company to [end its contract with Customs and Border Patrol](https://www.usatoday.com/story/tech/2018/06/26/salesforce-employees-petition-ceo-reconsider-government-contract/734907002/). Similarly, employees at Microsoft have [demanded the end to a military contract](https://www.recode.net/2019/2/22/18236290/microsoft-military-contract-augmented-reality-ar-vr), while Amazon employees have demanded that the company stop [selling face-recognition](https://gizmodo.com/amazon-workers-demand-jeff-bezos-cancel-face-recognitio-1827037509) software to law enforcement, and [take action on climate change](https://www.wired.com/story/amazon-employees-try-new-activism-shareholders/). That's a lot of political shit that has nothing to do with job safety, security, or wages...
23 Apr 2019 8:29PM AnonymousF AnonymousL
Sure but some other projects have been hesitant to move away so the more momentum behind this the better eslint/ts integration will get. Now just give me webpack 5 with all loaders, minimizers, and chunks being split as default and things will get better.
Yeah looks like he deleted his account.
God the personal judgements came thick and fast there... talk to real people when mum and dad have finished paying your tuition and you actually go grocery shopping Chuckles... until then save the identity politics for thanksgiving and Christmas... they don’t belong in the real world
Nope. No way. Not for a long time, if ever. Four years ago my former employer decided against React and opted to go with Polymer (web components) and the rest is history: Polymer isn't used by anyone and the decision was strongly regretted just a few months later. They stuck with it and can't find developers to work on their software because: 1. They don't exist; 2. Those who dare to take the job leave in record time. It used to be a company where employees stuck around for a long time. Now people leave in a rush because of web components and Polymer, because it sucks to work with. Anecdotal as that might be, I don't see anything that web components solves that many other frameworks can't already do BETTER. And that's basically it. Other solutions are simply better.
They are just mirroring the NPM directory. Yarn is also made by Facebook, so you'd just be swapping one crappy company for another.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
He's using a current meme (gta san andreas main character that goes "ah shit, here we go again") to describe another js framework that's been put out. I dont agree or disagree with this sentiment, just had to explain.
EDIT 3: ADS MUTE IS OUT NOW !!!! Now every time an ads is playing, the player will automatically set the volume to 0. **Notes:** * The Ads mute feature only work if you have a tab opening [https://open.spotify.com/](https://open.spotify.com/) on your Chrome browser. So the extension can detect whether an ads or a song is playing. * You can still play music on your Spotify desktop client and mute the ads, as long as you open Spotify on a tab of your browser for the extension to work. THANKS!
Maybe the problem is less with unions as a concept and more with the system in general
I didn’t think this would be possible, but there you go. Very cool!
Woke ≠ actually woke or actually leftist/in support of workers/not a huge capitalist. Every company will be woke whilst they remove employee benefits and outsource to factories in China that don't have any labor laws and don't care or have to care about their citizens wellbeing outside of their capacity for work.
c'mon man... It's actually 40,000
I'm not upset, I'm just poking fun at the type of person who feels the need to post their "unique" opinion about NPM = BAD in every thread ever related to NPM.
If you implement a memorization chain (making sure there is no 2 objects with the same content), then it is not needed. But if you don't do it that way, then you can only memorize HEAVY functions, because stringify is every expensive. Sometimes, recomputing everything is cheaper.
Why not Jaz drives?
gotcha! Thanks, went over my head
Nice lib! How about changing the license to MIT? Would be nice.
I don't follow super hip new tech just because! /s
Oh... poor thing.
Fair enough, I'm fairly new to this subreddit and reddit in general so im not aware of such a trend. &amp;#x200B; To be fair tho, NPM has far from a perfect track record, [https://github.com/npm/npm/issues/19883](https://github.com/npm/npm/issues/19883) &amp;#x200B; Surely some room poke some fun here and there? :)
I thought that way for a while and I should have known better because I started my career in 2008 and had a lot of trouble putting food on the table during the recession. It may seem like we're protected because of the sheer demand right now but there's nothing stopping employers from reducing pay and working us to the bone if another recession rolls around.
Useful information
Especially interesting because this has just landed in Chrome! https://twitter.com/_gsathya/status/1120389255619055616 It's available from Chrome 75 (the current Dev channel), so still a month or too from the stable release, but coming very soon.
&gt;super woke But that is the problem with this whole woke fiasco. Everything is just aesthetic fixes without fixing the real underlying problem, that everything needs to be fix within 24 hours. &amp;#x200B; I wish that those problems are as easy as that. But unfortunately most of them have multiple problems underneath that needed to be addressed as well. Fixing this quickly will likely make it worse &amp;#x200B; And if it didn't get fixed within 24 hours, everyone would just simply move on.
Git hashes _do_ protect against updates. Deleting is the only "concern," but if you are worried about that, just fork it and reference your own fork.
Yup. I love the fact that there's two separate values to represent these two separate concepts. It seems like all the answers in this thread are people just calling to remove features that they don't understand how to use properly.
A lot of unions actually have equal pay for equal work. Which I can see how developers would dislike. But it's a pretty fair system imo. David Heimer Hansson talks about it in his book. "It doesn't have to be crazy at work"
Because it isn't fun working for companies like that. It sucks your soul out.
How exactly is JavaScript's OOP implementation fake? The fact that it's syntactic sugar does not really matter, as it adequately supports all of OOPs core features.
Agreed. Generally a lot of high paying white collar jobs don’t need a union (outside of nurses etc). High paying jobs like those in tech have enough leverage based on their skill set that they would be on equal footing with management when it comes to negotiation.
Have you ever worked for a union? They are full of absolute dead weight, zero talent employees that rely on union policies and seniority to protect their positions. The absolute worst individuals are magnetized to unions because it's a safe haven for their wave riding work ethic. Fuck unions.
I think a lot of people's understanding of how US unions operate is pretty skewed. "Equal pay for equal work" is not at all what you see with US unions who emphasize seniority.
Wokeness often eschews a serious material analysis in favor of having a more diverse cast of people to exploit the working class.
Importing via git urls does not make me super excited. Golang has show that it's a terrible, frustrating way to manage packages.
Hi /u/Jonathan_Park_TMG, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Gotcha - thanks, I guess what you're describing is how react's render is called automatically on state change (which I never really thought about before). That's a fine piece of extra nuance I hadn't considered
For real. Any moderately functioning company Has more employees that it can't fire than ones it can. It's so freaking expensive to get new hires up to speed and have everyone learn/rewrite the code of employees who have left. I have such a crazy amount of stability where I work it's not even funny. I'm really not sure what I could do to get fired beyond being intentionally and repeatedly disobedient.
JavaScript doesn't use classical OOP and trying to pretend it is has only confused developers from those backgrounds.
Right? Why do people think companies are democracies all of a sudden? Do you job or find somewhere else to work. I get that isn't always possible but for programming jobs I can figure out how to get recruiters off my back. People are so desperate for programmers it's insane.
This is a great way to phrase this. Thanks. I hadn't thought of it in these terms before.
I what way is the JavaScript's implementation of OOP insufficient?
You can force push over existing hashes, no?
Does it matter? You're not deploying it anywhere.
I am assuming you mean that I am a poor thing, but why? If I did only what I was originally hired to do, I wouldn't have done JS in the first place. I wouldn't have been promoted, nor would I have gotten a new job at a new company making significantly more money. The first job, had me do many different things, and those skills that they paid me to learn, made me marketable. My market value increased and another job was willing to pay it. If I had only done what I was originally hired to do, I'd probably still be in that position, making significantly less money. Not that money is everything, but it is the easiest indicator to share.
I would honestly be okay with rewarding seniority. I want there to be more incentives to stay at a company longer, because frankly I would rather not move every few years, like the current incentive scheme would have me doing.
Thanks - I've certainly heard that song, but wasn't very familiar with the lyrics. I figured it was from something, but I didn't know what, so thanks for the elucidation!
No company cares about employees though. You're just an expense, an expense they'd rather not have. The only reason for a company to hire anyone at all is out of necessity only. Sure, there may be exceptions, but in general, companies care about the bottom line and employees hurt said bottom line. So, /u/seands talks about meritocracy, but then doesn't realise that there will always be someone willing to do more free labour than you, turning meritocracy into some kind of farce where everyone is clamouring over each other, desperate to out compete one another trying to make other people rich.
My CI has to pull it every build. Theres a cache but it still takes several minutes per deploy. Is 35k not ridiculous? Theres no way anyone has ever vetted every single package in there. Who knows what they do.
The problem with US unions is that it is so heavily weighted, pay, who gets the next opportunity at a better position, is purely tied to a number.
They may want to unionize because they know that they work at a company which might fire them for illegal/frivolous reasons. Like trying to unionize.
Not surprising since tslint being deprecated soon.
That's not what democratic socialism is. It helps to sway people by not outing yourself as entirely ignorant of the subject at hand in two sentences.
23 Apr 2019 9:55PM AnonymousF AnonymousL
I’ve been waiting for this for a while...
Everyone who buys anything (yes, even kids) pay taxes, so you're gonna need a new way of dismissing people entirely.
Can you explain why?
Why write a test for every conceivable scenario stemming from a bogus argument, wrong type, and tons of defensive coding, when simply enforcing a type prevents it in the first place. I could write a test to ensure that when I pass a string as an argument that should be a number that the function throws an error, that it throws the right message, that it then loggs it correct or handles it some specific manner. Or I just set the argument to be a type of number and be done with it. It's handled and caught before the code ever even runs.
property tax and income tax is waaaaay bigger than sales tax
I'm actually not sure, but forking would still protect against this. It's essentially their ask. "I want this repo at this exact point in time, and I don't want the original author to be able to change it."
To be fair, you don't know what I work on.
That's a pretty large generalisation!
You are not everyone.
Yeah, it can really be significant. Good JS coders are doing defensive coding. And to be fair, it's not like TS means you don't need to do any, it just less of a certain type. At times, the defensive coding feels like you're fighting a hostile system of your own making. And what's nice about TS, is that when you want to take advantage of JS dynamic types and let things slide around, it's still there.
It's not because your opinion is merely different, it's because your opinion is inherently boot-licking. It's fantastically easy to dismiss the arguments of others by simply chalking it up to them being unable to change their opinion. Rationally debating our opinions is a lot more difficult.
I am more than open to debate, but the comment made does not do that one bit.
Why is this useful?
Of course. But bugs still happen. Systems get complex, not everything gets exercised, sometimes test coverage is not complete as one might like, that's just a fact of life. I'm certainly not suggesting there won't ever be a bug that goes to prod. I'm just reducing the risk of a certain type, minimize risk of developer oversight etc. Types aren't a new concept and exist for good reason. What I like about TS is that you can get a mix of both worlds.
Hi /u/ABCfortech, this post was removed. Well, this is awkward. This subreddit is for **javascript**, which is different than **Java**. In other words, `javascript !== java`. Maybe try one of these instead: * /r/Java * /r/JavaHelp * /r/LearnJava Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Aisha_b, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
You can't compare IT businesses in Poland and France and think the only variable is unionisation, as there is a plethora of differences between the same industry in those two countries. Also, you're just a single person, so while *even if* there were no other differences between the industries in both countries, it's unlikely your experiences were an accurate representation of the entire industry (even indirectly through communicating with other developers in different companies) - it would take serious study of both countries' IT industries to draw any such conclusion. I'm not saying you're wrong or haven't performed such study, just that your argument (without further elucidation) is somewhat irrational.
Hi /u/RiceboySwag, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
's a bit more difficult to read 1464301 as opposed to 1_464_301
``` &gt; Number('123_456') //NaN &gt; parseInt('123_456') //123 ``` Wow
cool, now we have to program in locale aware notation ... totally cool.
Your argument is fantastically light on details. You might be right, but you really haven't explained why!
Those usage warnings are kind of spooky
I just initialized a new app with it and the node\_modules directory is 202 MB. That's kinda crazy.
How often do you write number constants that a comment would not suffice?
That is not my experience with either of my parents' unions. They do weight seniority somewhat (for my mother's nurses' union this is in schedule picking), but this is not true in my father's professors' union, where it is determined by rank, and there are clear guidelines and vetting processes about how you move up in rank. Those processes have *suggestions* for how long can go between each rank, but those are suggestions. Most take longer than those times, some take much less time to get there.
Readibility.
If you are a contractor or a freelancer, you are being paid for a specific set of work. If you are an employee, you have a greater stake in the company in general. While, you are typically hired for a specific role, there is almost no agreement that you will sign that explicitly states the work you will be doing. As a contractor or freelancer, you do exactly that. There is a contract that states nearly everything you are going to do for them. Either for a fixed price, or at an hourly rate. If you are an employee, and asked to do a new task, why would that be bad? I understand that if I am being asked to work more than 40 or 50 hours because of additional tasks, that I would have a problem. However, in the cases that I have, the manager has the appropriate expectation. If I am being asked to do something that I haven't done before, it will take longer because you are also paying me to learn. Those skills can then be used to get a bigger role or a higher paying job. I have interviewed and recommended people to be hired. If your attitude is that isn't my work, I don't want to work with you as an employee. If we need authentication to work, and you only do XYZ, and I am busy doing ABCDE. I don't want to have to do more because you are unwilling to learn.
We should work towards a more Democratic workplace, that is why unions are important. The fact that workers are in high demand right now is why it is a perfect time to unionize, later when we don't have as much bargaining power it will be much harder
Yes, and now people aren't being coerced into engaging in overtly political activities they disagree with. The fact those things are *political shit* is precisely why those people don't want anything to do with it.
It depends on the union for sure.
I think there's a difference between some two bit web jockey and a mathematician that might work more closely with constants. Node could be useful for such applications.
What, doing this const inhabitantsOfMunich = 1464301; // 1_464_301 I'd much rather be able to write the number like 1_464_301 since it's so much easier to read
Its **the** political issue
Nothing of what you did was wrong, it's just nothing that you described falls into the &gt; But if you are a full time developer, the task shouldn't matter. category. The task _does_ matter. So, I'm a FE dude who gets paid as a FE dude, do I mind doing _some_ backend to lighten the load of the BE team? nay. I don't. I know it, it's javascript so I help out. Am i being paid as a fullstack dev? no. Do i care? no. completly different thing: Boss asks me to _make_ backend modules because. Am I a fullstack developer? no. Will I be paid as a full stack developer? probably not. will my boss keep on asking this? probably yes. (note: engrish is not my main language and conveying _these_ ideias on a different language ain't easy - all I'm saying is that not every boss is like the ones you caught. Hell, I had one boss hire me as a FE to the contracting co i was in and then lying to my face saying that he hired a Fullstack developer -- there are abusers out there, covering your ass isn't a faulty default)
You ever check out an SDK? They are generally pretty massive. Often, the tools we use are much larger than the items produced, and that's ok. Your build deployment will be nice and small, and that's what matters.
How is __magic__ accessed directly ? Isn’t it just a property or an object ?
Didn't you get that number from an API or a DB? Why are you hardcoding that large numbers?
Anything specific that bothers you? FWIW, these _are_ edge cases, but it's worth documenting them as an FYI so that people aren't surprised.
Perhaps you want to reference a long mathematical constant, or you want to multiply some input by 1 million. Maybe your video game has certain thresholds that go into millions and billions (looking at you, idle games.) [Here's the proposal](https://github.com/tc39/proposal-numeric-separator), read up. Plenty of examples in there.
My employer doesn't give a crap about my well-being and I don't give a crap about theirs. But they care about getting my job done and I care about my paycheck. So we entered into a free exchange that we both benefit from. I do my job and they pay me. If either of us thinks we can do better elsewhere, we're both free to exit that arrangement at any time. And yet neither of us has exited that arrangement for a while so it must continue to be mutually beneficial. And I'm not even working 996! There must be some sort of magic at play here.
That is rather irrelevant since we're talking about readability
Your English is pretty good and I understand your message. Sure, there are bosses that will take advantage of you, no question. Always good to keep boundaries, with things that are important. I just don't think tasks are one of them. But if you start doing the full stack work, then why not learn those skills and then get paid to do it? Very few times in life will you get an opportunity and be paid to do it, without knowing how to do it first.
Readability of numbers you will never see in your code? Ok
Don’t to worry about this much with only two bits, just 0_0, 0_1, 1_0, and 1_1
What should be printed? console.log( 111111 + 111_111 ) // 222_222 or 222222? &amp;#x200B; I'm not a fan. IMHO it should be handled by some IDE plugin to format a presentation of numbers without touching the code. Same thing for dev tools - an option to change formatting numbers.
It's a [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), which masquerades as a property access but is actually the result of a function call
I've recently had a use for this when writing a lot of unit tests for a financial math library.
222222. The other one is not how it works.
'222222' The new syntax is just that: syntax, it doesn't change the underlying types.
I'm in Canada. I pay much more taxes than the average American. I'm really happy to contribute to social security. I was also very happy to be able to rely on that social blanket when I needed it most. What's sophomoric is your condescension. Get off your high horse.
My dad was a construction worker. He traded a basement job to someone at our church for my IBM 286.
I asked originally because I kind of thought the size of a build tool doesn't really matter that much. But 35,000 is ridiculous, I had no idea it was that many. Also I just looked at the node modules of my company's main repository and holy shit it is gigantic.
why so negative? this proposal has almost no downsides and if you wanna use it, use it. otherwise ignore it. Many languages feature numeric separators. And yes it does happen that you need to write big numbers out. Maybe not for you but you aren't the only javascript / typescript dev out there.
I know, that's why I tried to make my comment sound as much as personal opinion as possible. On top of that I realize that right now the situation of developers is specific, and compared with some other jobs privileged because we're in such high demand, but if we don't unionize by the time that changes we'll be screwed over and over.
duh. that's actually how it should work and how it works in other languages that I know. It wouldn't make sense if it would parse it as a number
 222222 obviously. The underscore is just for your code. If you want pretty print you can always create a function
I didn't say it was insufficient, I'm saying it's pretending to be classical
I agree, but just because of that I considered giving Deno a try. What I don't like is that the creator, Ryan Dahl, thinks TypeScript is the future of JavaScript. Left me very confused when he made that comment... Why would a corporation's version of JS be better than a whole worldwide effort to improve it?
Irony...identity politics is what it is
I paused for a moment to consider how "Faster await" would work and I think I had a stroke.
But but Stalin killed people!
If it’s not insufficient, then how is it pretending? It _is_ a valid OOP implementation. Furthermore, even if it weren’t a complete implementation, on what basis could you claim it was pretending to be one?
Is English not your first language?
How about you actually answer my question?
How about you re-read what I wrote before trying to White Knight JavaScript
So first, the idea that the software/tech world is a meritocracy is a fiction belied by many prominent examples. One example is the gendered pay disparity at Google, which led to a class-action lawsuit, and was only uncovered [when employees self-organized](https://www.nytimes.com/2017/09/08/technology/google-salaries-gender-disparity.html?smid=tw-nytimes&amp;smtyp=cur&amp;_r=0) to share their compensation info with each other. &amp;#x200B; But to speak more directly to the issue of restricting labor to a defined realm -- /u/brodega gives an illustration of someone being hired to do FE work and then being asked to do BE work. It's a good example, but I think the larger potential for exploitation goes beyond that. I spent 2.5 years working at a startup that had 20ish employees when I started and over 100 when I left. Employees (myself included) would regularly do all kinds of tasks for the company that had nothing to do with their jobs. For instance, we'd release marketing videos when we had a new feature coming. How did those videos get made? A PM would operate the camera, someone from sales would do the lighting, and maybe an engineer like me would be on-camera. A few times I even recorded original music to score these videos. &amp;#x200B; This was something that created extra value for the company, but none of us doing it received extra compensation for it. If we all refused to do this kind of stuff, the company would have to hire people to do this uncompensated work, the company would either have to pay us for it, or higher other people -- videographers, actors, musicians -- and pay them for it. But if just a few people refuse to do it, then they risk being labeled as "not team players" and marginalized or fired. &amp;#x200B; Now, one could argue that this is accepted at a startup because employees have equity, so therefore they have more of a stake in the company's overall success. And that's true to an extent, but also a bit of a fiction -- one that the company generally benefits from having its employees believe, which is why they tend to promote the idea. Startup equity usually translates to little or no payoff to employees. In my case, the startup I worked for actually got acquired at the beginning of this year, and I did get a payout. I also got to read the disclosures that came with the acquisition. I was excited about getting a big fat bonus, but I was also somewhat underpaid the whole time I worked for the company, so the money I got for the stock really only rectified that. Meanwhile, the vast majority of the money went to VCs (who, it should go without saying, had no part in building the product) and the co-founders. My former boss, the CTO, made over $10 million on the deal. Yes, he had more to do with the company's success than I did, so it's fair for him to make more. But how much more? 5x? 10x? 50x? Or more than 80x, which is how things came out?
Very true, but I hope you're not relying on types to secure millions of dollars...
WTF? Go look at Bernie's platform. He's going for free everything paid for by jacking up the taxes of the rich and corporations overnight to sky high levels. I think they're too low right now personally but the answer to our problems does not lie in Xeroxing the EU. We're not the same as them.
But then you might as well just vendor everything
Just a trivial note here but I find it amusing how all this stuff continuously breaks every syntax highlighter library every time -as seen in the site.
How about you reread my response. Your claim that JavaScript's OOP is "pretending" to be classical holds no water. As I said: if it's a sufficient implementation of OOP, then it _is_ OOP. Based on what rational could it be considered to be pretending to be something if it _is_ actually that thing? And I will now restate my second point, which you seem to have ignored. On what basis could JavaScript be pretending to be something that it's not? Even if it isn't what you call "classical OOP", does it ever claim to be? The fact that it's using familiar terminology isn't a statement that the feature itself is going to be the same as it has been for other languages.
Oh so you don't know what classical OOP means, gotcha.
So again, you are just going to ignore half my comments? Yes, I do know what classical OOP means. It refers to the core principles behind the original idea of OOP. What JavaScript's implementation satisfies. And again, I restate my second point: even if JavaScript isn't implementing classical OOP, how is it pretending to do so?
Sorry, to clarify I didn't mean the getter/setter. I was referring specifically to it being used in as a variable not as an object reference:
just because you don't need it, doesn't mean nobody does. Not everything is simple business logic. I frequently have constant in the range of millions for computer graphics algorithms, especially during prototyping stages. Also binary literals, which are much easier to read if you can add a separator every 4 or 8 bits.
No, that's not what it means.
The only "yarn own" thing about this registry is the domain name. It's effectively a CNAME to the source registry: `registry.yarnpkg.com is an alias for yarn.npmjs.org.`. That domain is just another domain name npm handles.
Yes, it actually is what it means. At least, that is a completely valid interpretation based on the English words being used. If you have your own definition, then it would be helpful to include that definition in any argument you are using it. And lastly: holy fuck dude. Just answer my question: how is JavaScript "pretending" to be anything? Where does it claim that it's implementation of OOP is going to conform to classical standards, whatever they may be?
[removed]
Hi /u/KnightMareInc, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Why would you *have* to?
Oh, are you using it in the sense described here: https://softwareengineering.stackexchange.com/a/141862
I guess that would be relative to your situation. If you do a build at deployment, then you're going to need 200 MB of react-script (or its ejected equivalent).
Appreciate the guide, it's a pretty niche technology and as it says finding resources with such a generic name is a pain
I hadn't considered this and completely agree with you. There's no reason to inflict a personal presentation preference on the code (and language!) when the same issue can be resolved in the IDE.
Because grouping is as far as I know is a locale thing.
If employees hurt the bottom line you get rid of them. Companies are designed to make money off of their employees. Why would someone start a company if the goal wasn't to make money? In a saturated market, yes, a meritocracy turns into Lord of the flies. And maybe in those cases a Union can make sense. In a desperate market though? Where I live we can't figure out how to hire enough developers. Everyone is constantly trying to poach me. They even try to recruit me for things I haven't worked on in years. I don't want a Union dictating how I work because right now I dictate that. It's possible my tune would change in different circumstances. I'm not really trying to speak to those right now. If silicon valley is oversaturated with developers we could sure use them over in Utah right now.
Then don't complain, since you'll never see this used in the wild.
The below have covered it pretty well. As a JavaScript programmer I became much better at Node when I separated express and node in my learning and in my headspace. Learn the Vanilla stuff then go for a framework. Personally, I'm not even using a framework anymore. I've switched over to Koa on all my new projects
NPM has an enterprise solution for companies who want to use npm but not release their modules to the public.
made by facebook
fucking literally 4 sentences from the top of the article, [section 2:](http://2ality.com/2018/02/numeric-separators.html#grouping-digits-in-numeric-literals) Grouping digits to make long numbers more readable has a long tradition. For example: At the end of 2016, Munich has 1,464,301 inhabitants. The distance between Earth and Sun is 149,600,000 km. The proposal allows underscores as separators in numeric literals
I've worked with too many people who got half a year of experience during 10 years of their work to agree.
Excited to see more production ready use cases for Worker threads
Nope. I have a project that is 373 MB in the dev folder. The build, with assets is 6.42 MB. Memory footprint while running is ~25 MB.
`const`antly.
Are you talking about the build directory... the output of running `npm run build`?
If you want to be treated like serious people you can't raid every union-related thread and call people bootlickers. You look like children.
WeakMap is great for attaching information to objects, without actually modifying the object itself. For instance, suppose you need to watch for property changes on various objects. You could put a `subscribers` property on the objects themselves, but maybe the objects don't belong to you. Instead, you could use a `WeakMap` to look up the subscriber list for any particular object. This saves you from having to modify the objects in any way, but the data is still "attached" to the object identity. You wouldn't want to use a `Map` for this, since putting an object in a `Map` keeps it around forever. You need some kind of strategy for clearing things out so you don't leak memory. With a `WeakMap`, objects can simply fall out of the map if they become unused, so there is risk of leaking memory.
We don't want "complex frontends" We want applications which can run in a browser. And entire history of javascript is a documented case of us moving towards that goal. For all this time.
What was negative about that? The dude said my argument was irrelevant, which it obviously wasn't. Changing a languages' specification for a small minority of people that will actually use said functionality is objectively bad for the language. CMV
**ES6 Module Support!**
Classes and the associated jank. Try catch. Null pointers.
I'm just now realizing NPM is actually a- private company. I thought NPM was supposed to save us, not doom us.
Hi /u/rekab002, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/avocadoras, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dagopray, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; While Node.js already performs well with the single-threaded event loop, there are some use-cases where additional threads can be leveraged for better results. ...and to think other runtimes have wasted *decades* supporting multiple threads
No more red squiggly line in vscode under the “re” on my require statements! I was a little ocd about that one
Still not the end goal but we're getting closer
Very cool! Good job!
That's still experimental and not enabled by default, but hopefully it's what the parent commenter was referring to.
Only a minority of people are going to use regex capture groups as well. Is that bad for the language as well? I could name dozens of features like that. Point is. It doesn't hurt you at all and so I really fail to see your issue with it. It solves a very specific issue for a lot of people (probably more than you think) without hurting the language in any way.
Ah, yeah that's the case. It's a global variable because it's defined on the global object
Regex is MUCH more commonly used than 1\_000\_000+ constant numbers. Regex also has a completely separate syntax (/regex/) from strings, unlike this one from numbers. Nothing "hurts" until you oversaturate a language with useless shit. Happened, will happen.
The grouping is not locale aware and only applies to using underscores as separators.
My ints have doubled since the last time we met, Count
and you asked me why i thought your comments where negative lmao. It's a normal feature in languages like java and python. It can be very useful for people. If you don't think that way ignore it. Anyway: pointless arguing with you. bye
Lots of complaints about this, when as far as I can tell, this takes yet another localization risk off the table and makes life easier. Whats the downside, besides a general fear of change?
That is because you are doing event based thinking.
As opposed to...?
not sure why you're getting downvoted...multi thread should have been obvious.
As far as I know, these are arbitrary. You can put them anywhere
$10 /year for 10 users on jira sever. Whatever your memory is of the product tiers is outdated.
While I don't like Facebook as a company I still have to ask my original question.. Why is yarn shitty?
I think datum.js (https://datumjs.com) has the has the features you want
It's still behind a flag (`— experimental-modules`) + you need to add `"type": "module"` inside your package.json. See https://medium.com/@nodejs/announcing-a-new-experimental-modules-1be8d2d6c2ff
I believe this is the nature of risk vs reward regarding startups. The ones who made millions also had the chance of making nothing. The VCs also had to put their money on the line to get returns when they aren't guaranteed, while employees mitigate most of that risk by getting their compensation through more of a salary and less relative equity. Despite that you still have a point about relative compensation to be more tied to relative contribution, and the other way I've heard startups account for this is by offering a much more larger share of equity in exchange for less pay. At the same time you can see where this can bite developers in the ass, as many startups use this as an excuse to pay low while targeting a product offering that has not a good chance of striking big (or at all). There's definitely a delicate balance in between to reach an optimal compensation package in this scenario, but if these companies don't even give it as in option then normal market rates for pay is the standard to go with. This is probably why some employees don't want to do this too much, as there's a lot more to lose especially when there's also interest in at least putting food on the table if you're still starting out. But if you're a person with decent experience that is willing to accept that risk, the approach to figure out optimal pay+equity in startups should be heavily considered. And if the companies don't offer it, then just walk because there's probably another startup that will actually pay you what you're worth if you have the experience.
The Node.js foundation can't afford to put their blog anywhere other than Medium?
Wow, with VueJS I just need _one_ script include in the header and I am in business. Vanilla JS and I don't even need that. React is the JavaScript equivalent of the movie Idiocracy. _35,000_ node modules for a hello world... I wonder what each module does. Bananas.
If you don't want to delete any tables, why do you need the file at all? Regardless, you can use `Promise.resolve().then()`, or don't use any promises at all.
The first step is selecting the DOM element. Take a look at the referencing below: [https://plainjs.com/javascript/selecting/](https://plainjs.com/javascript/selecting/) &amp;#x200B; The second step is displaying or hiding an element. You can do this by directly editing the display style of an HTML wrapper: [https://www.geeksforgeeks.org/hide-or-show-elements-in-html-using-display-property/](https://www.geeksforgeeks.org/hide-or-show-elements-in-html-using-display-property/) &amp;#x200B; But I prefer to toggle a class (.active) and control the display with CSS. With this second way, you can easily add CSS transitions for smoother fade-ins. [https://www.w3schools.com/howto/howto\_js\_toggle\_class.asp](https://www.w3schools.com/howto/howto_js_toggle_class.asp)
I do. Next has been great to work with in my experience, the only reason I suggested Gatsby over Next is because you mentioned it was a news website. I think of Next as more suited to applications, but it's a pretty arbitrary distinction.
1 and 3 are basically the same thing. 1 is passing a function to setInterval, that when called will call sayHi(). 3 just passes the sayHi function object itself, and that will be called later on. 2 is calling sayHi() immediately, and passing the result of that to setInterval. You generally want 1 or 3.
&gt;The ones who made millions also had the chance of making nothing. They were still getting taking a salary the whole time, and a higher one than the regular employees.
&gt; Long React typings (eg. `React.Component&lt;LongPropsInterfaceName, LongStateInterfaceName&gt; | React.Component&lt;AnotherLongPropsInterfaceName, AnotherLongStateInterfaceName&gt;`. In general, I've found React types to be ridiculously verbose and hard to read, similar to the problems I have with C++ typings. Plus, arrow functions are usually something I'll use inside the render function of a component, and having those typings in there just kinda removes the usefulness to me (often used to wrap a function the right way for a property). You'll _typically_ only have one component per file/module, in which case I'd advise just calling the interfaces `Props` and `State`. I only specify further when they either need to be exported for some reason or there are other components in the same file/module; this is very rare, and in such case it's only e.g. `TagProps`. In terms of vanilla JS as well, you can import the named export `Component` at the top in order to reduce noise in the part of the code that matters. You can optionally define a function's entire type definition within a single type, like so: type Fn = (a: string) =&gt; (b: string) =&gt; string; const fn: Fn = a =&gt; b =&gt; a + b; I _think_ you can also type it by name if you're using the `function` keyword. This is how overloads work, at least. &gt; time-sensitive Firstly, you don't have to convert everything right away. Secondly, I personally consider the lack of static typing to be a much larger long-term cost even if only in terms of onboarding new devs. There's nothing that impedes my productivity more than working on a project in which the data structures everything is expecting isn't defined, where developer knowledge therein is assumed - and typically this assumption leads to subtle bugs that aren't immediately obvious and don't immediately surface. I appreciate this is anecdotal / subjective. &gt; Arrow functions are most useful to me for wrapping other functions in a specific way for a property, and, at least in my experience, the return types with React often can't be inferred well. Could you provide an example? &gt; I don't want to have to do this, especially as a Typescript newbie. I don't have any clue what this means or how even to go about doing it, so I just don't delve any further. You're doing yourself a disservice, it's very simple. For any library you need to provide a typing for, create a file ending in `.d.ts`, and put the following: declare module 'package-name-here' { // put whatever you want in here, this is just an example export interface Thing { } const content: Thing; export default content; } Hand-written snippets like this are what powers DefinitelyTyped. &gt; I don't want to have to write typings for 10+ of the smaller, less maintained packages that some of my side projects depend on. As an aside, for larger projects I try to avoid using libraries that aren't very popular and well-supported. When they are, they seldom ever lack typings. &gt; I want to write code ... compiler screaming It's only protecting you from yourself! Either the compiler tells you now or a customer does later, or yourself whilst tediously debugging. And when it doesn't scream at you, you can enjoy heightened confidence that the code works correctly. &gt; This isn't wholly true. Typescript protects only against type errors, and not anything else. It doesn't protect against poorly written or organized code, code that runs slower than it should, or poorly documented code, and it isn't a good substitution for unit tests. Typescript isn't the silver bullet that will magically fix all of your development problems. Actually, I'd argue it partially protects against almost all of these. - Strict static typing enforces _better_ code that pays attention to data structures and error cases. - Interfaces are self-documenting. Function type signatures are self-documenting. This significantly reduces the amount of traditional documentation required. - Static typing is a substitution for the vast majority of unit tests pertaining to types. That's a whole class of unit tests that can be virtually forgotten about. &gt; It's also much easier to understand the type errors in JS when they happen than it is to understand problems with memory in C++ The difference in ease is debatable. Imagine you have an interface with a few dozen nested properties. This is processed through a dozen functions before finally returning. One day, somewhere else, you have a TypeError. It will take a little time to trace it back to this set of processes, and then much longer to deduce where specifically the issue has arisen. You'll also very likely resort to writing overly defensive code to curtail this.
"Async stack traces" is really nice. [https://v8.dev/blog/v8-release-73](https://v8.dev/blog/v8-release-73) is broken (ERR\_CERT\_COMMON\_NAME\_INVALID) to me.
Don't know why you were downvoted, what your'e saying is true.
https://v8.dev/blog/fast-async#await-under-the-hood Can't say I understand it, though
Hi /u/mslevy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Jaegar104, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/edzillion, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt;I don't want a Union dictating how I work because right now I dictate that. Right now, for some people, this is true. But when that changes, which it will, unionizing will be a lot harder than it is now.
Though you should probably just use the power operator (`**`) at that point. :)
1) Creates an inline, anonymous function to be used as a callback that calls `sayHi`. Here, you control how `sayHi` is called and with what context and arguments. 2) Calls `sayHi` immediately, passing its return value (`undefined`) into setInterval as the callback. This means there is no usable callback and as the intervals count out, no code is run. 3) Passes `sayHi` directly into setInterval allowing it to determine how `sayHi` is called when the callback is invoked. Depending on what you are giving the callback to (here being setInterval) it could be called with a specific context or different arguments. In the case of this application of setInterval, it is the same as #1. This could be different if you provided arguments for the callback in setInterval setInterval(function(){ sayHi() }, 3000, 'hello'); // no argument reach setHi setInterval(sayHi, 3000, 'hello'); // 'hello' argument reaches setHi Context changes you'd see with callbacks in, for example addEventListener: myButton.addEventListener('click', function(){ sayHi() }); // sayHi called with no argument, default context myButton.addEventListener('click', sayHi); // sayHi called with event argument, myButton as context
Fine for me on Android (Pixel 2 XL).
Example 1 – caching results: const cache = new WeakMap(); function countOwnKeys(obj) { if (cache.has(obj)) { return [cache.get(obj), 'cached']; } else { const count = Object.keys(obj).length; cache.set(obj, count); return [count, 'computed']; } } Example 2 – private virtual properties `_counter` and `_action`: let _counter = new WeakMap(); let _action = new WeakMap(); class Countdown { constructor(counter, action) { _counter.set(this, counter); _action.set(this, action); } dec() { let counter = _counter.get(this); if (counter &lt; 1) return; counter--; _counter.set(this, counter); if (counter === 0) { _action.get(this)(); } } }
No it isn't. The Medium website is shite on mobile, it's true... but to say that they use it because they 'can't afford' any other option? Patently untrue. Do you see how these things are different?
Thank you for this clarification.
Yeah I come from being a big Jekyll fan, and the GraphQl layer is like having a static site generator with a database layer. Way better than the nested for loops I had to do with Jekyll to itterate over things like tags.
Have you ever worked for a union or are you just spouting garbage?
&gt; ...and to think other runtimes have wasted decades supporting multiple threads The lack of threading is one of the great features of JS, and a big part of why it won out over other languages.
It’s millennial garbage.
&gt; and a big part of why it won out over other languages. I don't think this is true. When people say that JS's concurrency model is superior to threads, they mean that having everything be async by default is superior to having to use threads to do that. Adding threads but using async io by default still has that benefit.
Faster event based thinking
Here comes that stroke feeling again...
[You can totally use React with just a couple script tags](https://reactjs.org/docs/getting-started.html#try-react). This is for Create-React-App, which is roughly equivalent to the Vue CLI.
Having the whole ecosystem being non-blocking is just superior - it means there are no landmines hiding away. When using C++ to so async code, especially when you have a selection of 3rds party code, you are often timebombed by some path that ends up calling a blocking syscall. JS is largely free of that. Threads also dont have very many valid use-cases. Especially when you can just as easily fork a separate process on a modern linux, there just arent many times where a thread is the right choice to do something. Other than making up for the weaknesses of local hard-drive IO, async style programming has largely displaced threaded programming because its significantly more efficient and less buggy. it turns out that there are nearly no modern uses for threading that arent better solved with other techniques.
Kudos on the open source project! Might want to give verdaccio a try: [https://github.com/verdaccio/verdaccio](https://github.com/verdaccio/verdaccio)
Yes, but they expect to remove the need for the flag during the development of this version (before it goes LTS in October).
I don't know anyone competent who had issues, even during the 2008 crisis.
Potentially. You really can’t know until you run proper tests. Since React uses a functional programming style, where it calls a ton of functions and totally recreates the virtual DOM state on each render cycle, caching the components makes a ton of sense (and that’s basically what happens for class-based components under the hood when you use the `componentShouldUpdate` lifecycle method—same props in, same component tree out, unless you specifically call `setState` within an event handler callback). Functional components work differently, so memoization has a different implementation when using hooks.
Basically `async` marks a function as *required* to return a Promise. So the earlier approach to the v8 implementation would take whatever value was returned from the function, wrap it in a promise, and return that instead. Now it looks to see if what's being returned is a native Promise, and if it is, just returns that instead of wrapping it (it still needs to wrap a value if you're _not_ returning a promise, but that's pretty uncommon). Seems like a naive approach the first time around, it's a little unclear to me why they didn't do that up front, but oh well.
The literals `32` and `0x20` are the same value. `'you\'re'` and `"you're"` are the same value. `111111` and `111_111` are the same value. These different literal representations only exist on the programmer's side in the source code. Once it has been parsed, it's just a value. If you print the value 222222 without using some kind of formatting function, it will be printed as "222222". If you want to print it as "222,222", you have to format it like that.
That is because you are doing faster event based thinking
But lack of threads has nothing to do with async. Node could still have async-everything _and_ threads. That's the point I was trying to make - it's not the lack of threads that's nice, it's the nonblocking nature of everything. Threads are still very relevant when it comes to working on cpu bound tasks in a way that needs access to shared data. Again, this isn't related to async or not. I'm not saying Java-style thread-based concurrency is better than node's. I'm saying there's a world were we could have both, and it would give us more flexibility.
😰
It will not overwrite hash. Only the tag/branch.
Careful now. There is only so much hair dye to go around
I have worked for two unions relatively briefly. My father worked for a union for 20 years. My mother in law currently works in a union. As does my sister in law. The pros are you are guaranteed work, a very good income, great benefits, and insane job security. It all sounds amazing from an employees perspective. The cons are it attracts the fucking worst kinds of humans. Seniority is the only thing that matters. Want more money? Work longer! Want to climb the ladder? Have fun competing with 100 other backstabbing candidates who will do basically anything to get the one management position available. It's a fish tank. Good looking in but once your in there you realize why they are shit. Everyone is entitled to their own opinion, and this is mine. Fuck unions!
thats what hashes do. https://github.com/openmaptiles/openmaptiles/releases https://github.com/openmaptiles/openmaptiles/tree/v3.9 https://github.com/openmaptiles/openmaptiles/commit/3a1a2b4210935d0a898e4c36672836b69eecb61e
Thanks! Verdaccio is the great project, and I would totally recommend it for personal use. It is a fully-fledged registry, which is a much more than just a cache proxy. But it has one key disadvantage that is crucial for some use cases - it is slow. Verdaccio is barely holding **300** req/s on my local workstation. In the same time, NCP can withstand **20 000** req/s. Such performance is not important for an average user, but I have a specific use case when I really need this speed, so I've decided to write NCP - a tiny, but very-very fast cache proxy.
My team is considering migrating a large repo to Typescript. What is your migration experience like? I'm curious to hear more about "you have to start from the bottom of the component tree and work your way up is annoying af". Why is that the case?
I'm not american so can someone explain really quickly why "attempting to unionize" is like... a thing. I'm not sure I'm making sense here but for reference, here (🇸🇪) all you do (as an individual) is just join a union. You can do it online in a couple of minutes. As long as you then keep paying your fees, you'll have access to the union and they'll fight for you when needed. There's no need to like "join up" with your colleagues. I'm in a union and I have no idea why else at my place of work is or isn't. So I guess what I'm asking is, can americans not just join a union? Is there some larger process?
there is absolutely zero reason for node to have their company announcements on a third party site. if medium goes down, so does the node blog? there's a better option, it costs more, and node isn't willing to spend that. as an end-user it doesn't really matter if they can 'afford' it or not.
Can't wait to try async stack traces. It's so weird that we didn't have them for that long in async language like JS. &amp;#x200B; Last time I tried it (on experimental build) it didn't really work for me and in the end, I used bluebird debug mode I hope it's fixed by now.
&gt; Right, so to me, sure there isn't a Virtual DOM but there is still a state object somewhat reminiscent of a Virtual DOM, a collection of state of the UI and all associated props Each component holds a context object of the reactive values it is tracking, but I wouldn't quite say that is "reminiscent of a Virtual DOM" in that it is not a representation of the entire DOM (just some specific values that are being tracked), nor do updates require traversing or inspecting a DOM-like structure. By focusing on whether some kind of _state_ is being stored somewhere, I think you are missing the major difference between virtual DOM based frameworks and Svelte, which is the re-render/diff/patch process. With a virtual DOM, when there is an update, the virtual DOM is re-rendered. The new vDOM must then be diffed with the old one to identify places in the real DOM that require patching. Svelte doesn't have to do any of that. Instead, the component gets custom generated code that simply directly updates the specific DOM elements that require updating when a particular value changes. It might help to take a look at the generated Javascript. For example, look [here](https://svelte.dev/examples#reactive-declarations) and go to the "JS output" tab. The `$$invalidate` function you see called in various places is the third argument to `instance` [here](https://github.com/sveltejs/svelte/blob/6c0aa3b9ef929200fd25a3f1199731d43f5a9c6e/src/internal/Component.js#L87).
Also medium is pushing the paid content really aggressively recently. It's not a nice user experience
What mobile do you use? It works just fine for me.
The framework for react is rube goldberg levels of retarded.
Sounds great! Re-inventing the wheel is usually fun and paved with new learnings. Happy you built it :)
Jesus this article is trash.
Yeah, basically. Bonus points if your wheel rolls faster 8)
Of course there's more going on. There's test suites, manual testing, etc. But our backend is also typed too (C#). I don't think anyone here is suggesting that TS is the end of all bugs. At least I'm certainly not. That's delusional. If you haven't worked with a statically typed language, I'd recommend checking one out. It doesn't hurt to adapt ideas, patterns, techniques, or styles commonly found in others.
Yeah stick to callbacks people. This complex promise stuff is really unnecessary.
I very, very genuinely have no idea if this is sarcasm. There's so many purity tests and master races in webdev that I can't keep track anymore.
they don't do on a limb at all. I record all errors in my database and I clear them one by one. I just use one event to catch all client errors and it works 100%
No sarcasm. https://medium.com/@b.essiambre/continuation-passing-style-patterns-for-javascript-5528449d3070
So what's the difference in use cases between workers and child processes or forks?
&gt; Each component holds a context object of the reactive values it is tracking, but I wouldn't quite say that is "reminiscent of a Virtual DOM" in that it is not a representation of the entire DOM (just some specific values that are being tracked), nor do updates require traversing or inspecting a DOM-like structure. Well wait a minute, its not just tracking the values, its also tracking links to where the values are stored in the DOM, which is how they can do granular updates when a value change. Maybe its not a virtual representation of the dom, but I don't think its as apples to oranges ar you are making it out to be. &gt; The new vDOM must then be diffed with the old one to identify places in the real DOM that require patching. Svelte doesn't have to do any of that. Instead, the component gets custom generated code that simply directly updates the specific DOM elements that require updating when a particular value changes. Again that makes it not as apples to oranges as you seem to be saying. I agree that its more targeted and doesn't do a full run through of the dom, but when you say the virtual dom is re-rendered, it is stilll more targeted than you are making it out to be, it doesn't re-render the entire virtual dom structure, but only the pieces affected by the value changed. Like I am not saying this isn't a better approach, it might very well be. I haven't used it enough to know about what flexibility you are losing from working with a more direct representation of the DOM, which seems to be the trade off here. You are limited to their specific template language which is not 1 to 1 of what goes into the DOM, versus JSX which is 1 to 1 with additions on top.
Also why can’t they use their own product to make it. Seems like a good opportunity
Child processes as far as I understand can't share memory, workers can.
My suggestion is to have that programmer explain it *back* to you. (Preferably not just quoting you.) You can check for actual understanding with follow up questions. I, too, have been badly bitten by the "yep, got it' totally understand" only later to find a total lack of understanding that resulted in a real mess. The kicker in that case was that I later found out they knew they didn't get it and couldn't perform the task, but didn't own up to it right away. I failed to confirm their understanding and had to clean up the mess.
Have you tried writing a real time browser based multiplayer game in GHCJS, last time I tried had severe performance bottlenecks.
List of some of the new ES features/APIs now available thanks to V8 7.4 (compared to 7.0 in Node 11): - Class fields (both public and private) - `Object.fromEntries` - `String.prototype.matchAll` - Some new `Intl` APIs
Yeah probably have to wait for Haskell-&gt;WASM for realtime multiplayer games. You could also move the tight loop into TS/JS, but usually most of the logic is in the tight loop so you wouldn't benefit a whole lot from GHCJS.
Wait, some people actually use medium on mobile?! [How do you deal with this shit?](https://i.redd.it/s936frckoys21.jpg)
I'm still annoyed at how fugly the syntax for private class fields look
Even my linter would reject that amount of nesting.
What advantage would that provide them?
That would be really dumb, I use classes all the time because imo they're cleaner than the old way.
You're trying to be deliberately trollish. I don't care about you.
&gt;I was recently burned when a promise library I was not even using, that came embedded in a dependency, was silently swallowing all uncaught exceptions in a service I built. You gonna quick cooking because you messed up a recipe? Maybe write a test and this won’t happen. Unless you don’t believe in testing code either. I wrote a test once that showed a flaw in my logic so I stopped writing tests.
Actually massive PogChamp, this will make a project I'm working on with a backend and a frontend in the same repo much cleaner...
Hi /u/saddiq_tish, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Does anyone else smell burnt toast?
Hope you all enjoy it! Btw this \[tutorial is open-source\]([https://github.com/Dan-Nolan/JS-Tutorials](https://github.com/Dan-Nolan/JS-Tutorials)) and I am happy to accept Pull Requests :)
I can't believe how code can be that unreadable in so few lines of code
Excited to run this on lambda in 5 years
Medium is an awful blogging platform.
Now if only AWS Lambda could offer a newer version of Node.js, that would be great
&gt; Well wait a minute, its not just tracking the values, its also tracking links to where the values are stored in the DOM, which is how they can do granular updates when a value change. Maybe its not a virtual representation of the dom, but I don't think its as apples to oranges ar you are making it out to be. Svelte creates text nodes and elements with the functions `text` and `element`, which return the created DOM nodes, which it holds in a closure. It also generates code that simply directly updates those nodes when a relevant reactive value changes. It doesn't have to walk through a tree of nodes and attributes and do comparisons. It's not just apples to oranges, but like a whole apple tree versus a few individual already peeled oranges. ;-) &gt; I agree that its more targeted and doesn't do a full run through of the dom, but when you say the virtual dom is re-rendered, it is stilll more targeted than you are making it out to be, it doesn't re-render the entire virtual dom structure, but only the pieces affected by the value changed. Yes, but Svelte doesn't even have to do _that_. &gt; I haven't used it enough to know about what flexibility you are losing from working with a more direct representation of the DOM, which seems to be the trade off here. Not sure what you mean. I don't think the purpose of the virtual DOM is for "flexibility" in working with a "direct representation." &gt; You are limited to their specific template language which is not 1 to 1 of what goes into the DOM, versus JSX which is 1 to 1 with additions on top. Not sure I follow. The template is supposed to represent what goes into the DOM, at least as much as JSX. Do you have a specific example in mind? Anyway, I think it would be helpful if you reviewed the Svelte generated output to get a sense for how its reactivity differs from the virtual DOM approach. Also, read [this](https://svelte.dev/blog/virtual-dom-is-pure-overhead) if you haven't already.
Do I still need to use Michael Jackson Script file extension? I've been using the `esm` package, but I would like to be able to remove the dependency?
*new Node version exists* Ahh shit, here we go again.
That does look painful
As opposed to...?
If you think that this will last for an indefinite amount of time then you are wrong. 1) The explosive growth we see now will slow down soon and there won't be a new startup to go to after you get fired 2) More and more people go into programming and computer science related fields, you'll blink and all of the jobs are occupied by people who are willing to take less. After this all of us will be fucked, the sooner we organize the more future proof will our position be.
Well, I never had it *that worse*. Without ublock-origin it's painful browsing the web on mobile let alone desktop.
Can't you create your own layer and runtime now?
\&gt; which return the created DOM nodes, which it holds in a closure. It also generates code that simply directly updates those nodes when a relevant reactive value changes. I am understanding this approach now, and it seems like a solid concept, I didn't realize that is basically just creates an update function that gets called with links to the nodes. Are the nodes always kept around and reused. If something is removed from the DOM(ie not rendered with a given state but rendered with the state change i.e. {visible &amp;&amp; &lt;MyNode/&gt;}, what happens in this case, is the created node kept in memory and then added back into the DOM later? Does this have tradeoffs on large pages, or virtualized lists? Maybe a dumb question. \&gt; Not sure I follow. The template is supposed to represent what goes into the DOM, at least as much as JSX. Do you have a specific example in mind? The creator said in another part of this thread the reason that JSX couldn't be optimized at compile time like his template language was that JSX was too flexible on what you were allowed to do, and his template language is restricted to just things the compiler is able to optimize, which makes sense, and maybe there is no tradeoffs to this, I would have to see by using it for a while, I don't know any based on reading the docs. \&gt; Anyway, I think it would be helpful if you reviewed the Svelte generated output to get a sense for how its reactivity differs from the virtual DOM approach. Also, read [this](https://svelte.dev/blog/virtual-dom-is-pure-overhead) if you haven't already. I did read this, I wish it had some more nuance to how svelte handles it instead of the DOM which this thread has enlightened me to. I don't like how it has a jab at a twitter thread that seems a little disingenuous because its about how MobX handles memoization and state rendering for you and with hooks you would have to use another function like useMemo, I don't actually see how that is really related to the virtual dom, I guess its just saying Svelte handles those optimizations for you under the hood. I would like to see a discussion from someone that knows both approaches well, or a rebuttal from a framework using the virtual DOM, to see what they say, I have found very little comparing and contrast outside of talks from Svelte itself. But it definitely seems like a promising approach.
You can't squeeze blood from a turnip. If it's true that there's only so much to go around, then no amount of unionization will stop the downturn. If there's no demand for what we do, then maybe some engineers will make what they make now, but many will simply be unemployed. Unionization has never stopped an industry from evaporating. There is no such thing as future proof. Software engineers are in demand because the businesses that need them are making a lot of money or are receiving a lot of funding. If that dries up, it's all over...and not just for engineers. Marketers, sales people, managers - they're all gone. Now, I don't particularly buy that software is going to go bottom up in the way that you claim. It's possible, though.
I don't thing that the industry will "die" in any way, but during the inevitable recession there will be much less jobs available. Combined with job market saturation we all will find ourselves in a pickle.
Already available in TypeScript.
I lol‘d
The more possible language features the browser has to watch out for while parsing, the slower it is to parse. For javascript this affects the end user’s load time.
I mean, sure. Impossibly marginally, but sure. However, as you said yourself, its client side, except for us node peeps. &amp;#x200B; However, if this is too much parse time for you, ES6 must have given you a stroke.
You are right - for hello world apps you don't need react
&gt; Threads are still very relevant when it comes to working on cpu bound tasks in a way that needs access to shared data. Right; if you need access to a large heap, cannot factor the data structure into shards, cannot defer to the OS via disk/disk cache, cannot isolate the access from the processing, and have minimal need for write mutexing, and for some strange reason cannot mount the data as SHM ; then maybe there is a case where direct access to heap RAM to perform cpu bound operations is the best option. IME its very rare and the vast majority of times isolation of the critical sections which actually needed the heap and surface them over an api, or else splitting the problem into equal sized tasks over separate processes are better options. &gt; Node could still have async-everything and threads. I think the two are tied hand in hand; having access to thousand of libraries and vendor code where you automatically know there will be no threading and no blocking is exactly why you can count on async everything. If threading was an option, over time people would elect to use it (for the wrong reasons) and it would start to proliferate through the ecosystem. For what JS is, its better, systemically, that threads are not part of the language, imo. Do you have an example problem in mind where it is the best solution? Most problems in the space eclipse the space available in RAM anyway, so you end up back with multiple process. Its just a real strange corner case to need them, that I just havent found it. Even before working in JS, i had a flat no threading criteria for the team unless they could justify why it was the best case. and over 10 year, the only cases where workarounds for OS calls which blocked.
That answers the question what advantage it would provide to us, the users.
Why is it awful. Haven't seen that sentiment before so I'm genuinely curious.
Eh Jeff Bezos talked about his dick pic drama there I guess money isn’t really the issue there.
Threads are absolutely needed when you need to load and then parse large binary files. Loading can be done in parallel using the native calls but the parsing would block the main thread for a long time, or severely reduce responsiveness even if you split the parsing in multiple smaller batches. Threads are vital for responsive applications.
Slower event based thinking.
o
[I wonder where they got that idea](https://perldoc.perl.org/perldata.html#Scalar-value-constructors) 12345 12345.67 .23E-10 # a very small number 3.14_15_92 # a very important number 4_294_967_296 # underscore for legibility 0xff # hex 0xdead_beef # more hex 0377 # octal (only numbers, begins with 0) 0b011011 # binary 0x1.999ap-4 # hexadecimal floating point (the 'p' is required)
god I miss when javascript work wasn't built atop bastardizing plain fucking english
Not manually returning a promise in an async function is uncommon? I almost always write my async functions that way.
thanks
I've been coding since ~1985 ... I've seen my fair share of types in various languages. I happen to love the type freedom, movement of feature sets (functional aspects mainly), and growth of JS currently.
Many people have been, many people are and many people will be. Nobody cared. I personally think it matches nothing in the language and is a step in the wrong direction but it's too late for anything else but resignation at this point.
This isn't livestreamfail my friend.
My man, when you get threads you have to synchronise the data shared between them. This means JavaScript has to have synchronisation primitives. Now every JavaScript runtime has to implement them. Now you have to give threads and explain race conditions and synchronisation in a language where nothing like this has ever existed to people who have no idea how any of this woks. Q: Yeah but developers can choose not to use it A: False. Once libraries start using multithreading, developers will have to do it as well. Q: Can't the runtime manage synchronisation by itself? A: No, this ain't magic. Unless you want to make a JavaScript orders of magnitude slower.
Correct me if my understanding is wrong, but let's say you have: &amp;#x200B; ```js async function foo() { await bar(); return 1; } ``` &amp;#x200B; This is equivalent to: &amp;#x200B; ```js async function foo() { return bar().then(() =&gt; 1); } ``` &amp;#x200B; So unless if you're writing async functions that don't have any awaits in them, then async functions should always effectively return promises?
If you're doing converting between bytes and human readable output underscores are far preferable to the usual 1000 \* 1000 \* 1000 \* 1000.... that is commonly used. Sure it's not a daily concern but it'd be nice to have a better way to improve legibility.
Webpack
NB! I see that i have a bug with giving the different elements unique id's in the pop-up box. I'll fix this when i have time :P
It looks promising. Does it work on SSR?
Async function always return a promise, no ifs, buts or unlesses.
Have you tried navigating comments and responses? Tried copying some information from the comments without causing a page refresh and navigating away from the article?
Project Page (?): https://github.com/aleen42/PersonalWiki *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
 const returnFunction = props =&gt; { console.log(props) } const higherOrderFunction = callback =&gt; ( callback({ a: 2, b: 3 }) ) higherOrderFunction(returnFunction)
The main project is [https://github.com/aleen42/watermarks](https://github.com/aleen42/watermarks)
 const returnFunction = props =&gt; { console.log(props); } const higherOrderFunction = obj =&gt; { return nextFunction =&gt; { nextFunction(obj); } }; higherOrderFunction({ a: 2, b: 3 })(returnFunction) -&gt;{a: 2, b: 3}
Was that a way of checking to see if it's fast enough?
Hi /u/Patrick_Paul440, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Haven't until now :) That does suck.
Now I just need a book that covers Node. J's 12 :-/
So, the one case where it doesn't is if you have a function marked async that doesn't have an await in it. async function foo() { return 4; } That's just returning a value, so v8 would still need to wrap that in a promise. But when you have an `await`, what are you awaiting? Either the function you're awaiting is directly returning a promise, or somewhere down the line _some_ function is directly returning a promise, meaning as it walks back up the line of `async` functions all the times it wrapped it in another promise were unnecessary.
You're right. But the whole point was v8 was wrapping the response of foo() in a promise too, which is unnecessary when `bar()` most likely returns a promise directly, or whatever `bar()` calls does. Somewhere down the line something is probably returning a promise, meaning all the other responses wrapped in additional promises is unnecessary.
 Dude, I really found your work very good. Impressive
Awesome, looking good! Definitely useful in a lot of cases. I've written little scripts in the past to convert html tables in JSON for example, now I could simply use your tool.
Simply amazing!
The linked article describes the solution we came about as we began to struggle with increasingly slow test runs (full and incremental), slow builds, slow type checks and rather complex codebase. The solution for all of that was to start splitting the frontend into smaller apps with their own state management, own routers etc. The article includes deeper description of the problems we faced and the actual implementation of the solution using React, Lerna and Webpack. There's a link in the end for an example project implemented in the same way (just without all the extra stuff specific to us). &amp;#x200B; *Disclosure: the article is written by me and my teammate. We are* ***not*** *in the business of selling software development!*
Hello there. Your tool works smooth, nicely done. Regarding XML: seems like the XML is valid, but the order is being messed up (elements are sorted by name) Regarding Export/Download: I don't get the structure of the download name. I'd prefer a datetimestamp. ideally similar to ISO format YYY-MM-DD-HH-mm-ss so you will not mess up different downloads of yourself. &amp;#x200B; All in all, nice design, works well and quickly and I like it.
Very nice!!
1. YAGNI 2. If this ever ends up in JSON it will be a mess As far as I'm concerned this is work for a preprocessor, not a runtime.
Babylon.js
Looks cool, the only thing I’d suggest is that if your using 3rd party tools- which I think is highly likely- you need a license page that lists those tools and their respective licenses. Most open source licenses require you to preserve their licenses. I see that your JavaScript is obfuscated, but if someone thought you were using one of their tools and not respecting their license, then they could submit a take down request to your hosting provider (google cloud?) and it would be taken down. Google would be particularly bad because they would likely take down everything related to your account and its notoriously difficult to get in contact with an actual person at google to dispute a take down request. So yeah, I would recommend a license page that listed theirs party tools and their licenses. Or maybe just open source your entire project- either would work
&gt; If something is removed from the DOM(ie not rendered with a given state but rendered with the state change i.e. {visible &amp;&amp; &lt;MyNode/&gt;}, what happens in this case, is the created node kept in memory and then added back into the DOM later? I believe such nodes are destroyed and then recreated if needed again, which I think is common among frameworks (with the exception of something like Vue's [`keep-alive`](https://vuejs.org/v2/api/#keep-alive) component, which does cache inactive component instances). &gt; The creator said in another part of this thread the reason that JSX couldn't be optimized at compile time like his template language was that JSX was too flexible on what you were allowed to do, and his template language is restricted to just things the compiler is able to optimize, which makes sense, and maybe there is no tradeoffs to this, I would have to see by using it for a while, I don't know any based on reading the docs. Right, but you had said: &gt; You are limited to their specific template language which is not 1 to 1 of what goes into the DOM, versus JSX which is 1 to 1 with additions on top. Which I don't think is a reasonable characterization of the difference between a template language and JSX. &gt; I don't like how it has a jab at a twitter thread that seems a little disingenuous because its about how MobX handles memoization and state rendering for you and with hooks you would have to use another function like useMemo, I don't actually see how that is really related to the virtual dom, I guess its just saying Svelte handles those optimizations for you under the hood. &gt; I don't think the point is that Svelte is doing anything like Mobx or useMemo "under the hood," but rather that those solutions are a necessary consequence of working with a virtual DOM and that Svelte does not have to resort to those kinds of mechanisms at all because of its different approach. So the overall discussion is related to use of the virtual DOM and the possibilities opened up by using a compiler to instead "bring reactivity into the language." Anyway, I know you're looking for alternative points of view, but at least as far as getting a better understanding of how Svelte itself works, I would highly recommend asking some questions in the [Discord channel](https://discordapp.com/invite/yy75DKs).
Hi /u/FechinLi, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Smaanrocker, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/giomcany, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/shock_bound, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/helping083, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This is awesome
This is my first blog post and there are other things I would've written about, but a lot of people kept wanting to know why I was always booing 💅so I figured it would be an easier start. More than open to any writing critique or direct critique of the arguments. Thanks!
The sell might be easier if it's not heavily tied to political affiliation.
[MDN](https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX) is never a bad resource for beginners or experts. Once you have the overall gist of AJAX under your belt I highly recommend looking at [promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) as you'll no doubtably be using them for any project that calls for some sort of data retrieval. I can't think of too many tutorials that helped me too much. It was a matter of *applying* what I read in the aforementioned by creating my own APIs or using a [mock api](https://jsonplaceholder.typicode.com/). I was in your position not too long ago so I understand the learning curve. It'll eventually sink in with enough practice.
You forgot the catch statement
any plans to add support for React?
It depends on your programming skill. If you frequently need to rely on the community for answers about how to do things in a particular framework, then it sounds like Svelte won't be for you. On the other hand, if you can apply concepts from other frameworks into Svelte, and assuming Svelte doesn't have any major deal-breaking flaws, then I think Svelte is probably a decent choice for a project. However! I would never start a major project in a framework I haven't used before. Always try it out on a smaller project that you won't have to maintain first.
A nugget of useless information I've retained from somewhere, is that you can check if a string is an anagram of another by sorting the chars, and comparing the results. So you could re-write isAnagram to something like this; `function isAnagram(str1, str2) {` `return str1.toLowerCase().split('').sort().join('').trim() === str2.toLowerCase().split('').sort().join('').trim();` `}` &amp;#x200B; isAnagram("Rail Safety","Fairy Tales") === true
You don't. If you add `"type": "module"` to your package.json, plain .js will work too.
Wait that number is real?
Yes, I am aware of this now, this could be valid use case if you don’t care about performance (imagine sorting huge strings/arrays) :)
So glad they listened and made the `.mjs` optional instead of mandatory for ES module support! Just adding `"type": "module"` to your package.json is enough now to opt in.
Basically like C#, you have to implement async methods **all the way up**. Check this answer for more details: https://stackoverflow.com/a/29809054
I don't think performance would be much of an issue, given the domain. The longest single words that are anagrams of each other are 27 characters long (hydroxydeoxycorticosterones and hydroxydesoxycorticosterone). I'd reserve that point for a phrases, I'm not sure of any examples to test against though.
Sounds reasonable, thanks for sharing!
The demo page is giving a 404.
Get your shit together mods
I have no idea to be honest, I was just replying to the previous comment. I'm trying to count my node module dependencies here on a Create React App project and I'm "only" getting about 4,500, but I could be doing something wrong.
Our shit's together, users just don't know how to read the guidelines.
Hi u/randomFIREAcct, we’re currently focusing on vueJS. This project is a template for vueJS and doing the same thing for React would lead to make a new project. I think our project is modulable enough to be turn into React project but it requires work. We don't have any plans for that right now.
Couldn't you just count the number of occurrences of each distinct char for each string and compare them?
Wow it's the exact same stack im using right now. I will sure check the source code to see i made some mistake.
Will those scripts work on other browsers?
I have sincerely never run into a scenario where `==` is beneficial, to be honest.
Right? `==` does seem a little redundant.
If you've a chain of 10 functions that and the deepest element causes a failure that cascades out, you'll get &gt; 1000 calls. This is the opposite of failing fast. ```js let callCount = 0; let result = false; function a(f) { ++callCount; if (f) { return f() || f(); } return result; } const a0 = a.bind(null, null); const a1 = a.bind(null, a0); const a2 = a.bind(null, a1); const a3 = a.bind(null, a2); const a4 = a.bind(null, a3); const a5 = a.bind(null, a4); const a6 = a.bind(null, a5); const a7 = a.bind(null, a6); const a8 = a.bind(null, a7); const a9 = a.bind(null, a8); callCount = 0; result = false; a9(); console.log(callCount); // -&gt; 1023 callCount = 0; result = true; a9(); console.log(callCount); // -&gt; 10 ```
I would think it has to do with falsy and truthy values. With coercion 0 and ‘’ are falsy and [] is truthy. That being said if you use == and you need to check against 0 versus null, undefined, etc, it could cause issues in your code. Also when checking arrays, checking against the length is the way to go in most cases.
I love the idea behind PWAs. I hate how Google handles them on the user end. Google pushes PWAs to developers nicely.... but PWAs are second class citizens as far as user experience goes. Clicking the stupid ellipsis in Chrome to install it, Chrome not really telling you when its there or not is a non starter.
You can use == if you don't care for the type. 1 and "1" will be the same.
The link is to a closed-source page with obfuscated JavaScript (not minified, actually obfuscated) and no details or write up about his work on it. If that met the requirements to post here, then literally any website would be fine to post.
Let's test it out. With Chrome 74.0.3739.108 (up to date as of now): &gt; 0 == [] true &gt; 0 == '' true &gt; '' == [] true In the case of 0 and the empty string, they are considered "falsy" values. [Here](http://stackoverflow.com/q/4226101) is a thread on how the empty array is handled.
&gt; Threads are absolutely needed when you need to load and then parse large binary files. Other that avoiding the kernel flaw around O_NONBLOCK on local drives, there is no need to thread read syscalls. Node conveniently has built in threads for those, so reading in the bytes works async out of the box. &gt; split the parsing in multiple smaller batches. If the parser yields often enough, it doesnt have to impact responsiveness at a. For example: replacing tight loops with Promise.each ensure granularity. if your file parse involves heavy CPU transformation of data beyond just reading into RAM, then you can pipeline that in via a separate process. &gt; Threads are vital for certain sets of responsive applications. Threads were vital to work around flawed OS's which cannot fork() well. If you are finding them vital today, I think there is a problem with the structure of your code. I regularly deal with this issue, both with fork()s and async code, and I would consider a threaded approach to be a bug.
Yes, I'm aware. What's your point?
I don’t think I have ever used ‘==‘ and doubt I ever will It’d only confuse my co-workers and myself one month down the road
Is it just me or are Vue apps just a cut above in terms of responsiveness ? I mean sometimes you find a good react site but wow Vue is good
If anything, it makes better use of keywords now, except in instances like the crappy private field syntax.
Screw MJS! 🎉
i know its easy to build apps in firebase, but you locking yourself into mercy of google.
One larger example is that sometimes your data uses 0/1 instead of true/false. False === 0 would fail when False == 0 wouldn't. You see this quite frequently in systems where there is a lot of data. Another example is let's say you have 10 different object properties that you want to check whether or not there is displayable data. So do not display if 0, false, '', undefined, null, NaN. You could use one function to check all those things instead of writing different ones for numbers, strings, etc. It's best to pick === unless you want falsy value comparison still though. But the == operator is still good.
This is starting to change with PWAs soon being offered directly on the Play store. It's slow, but it'll be there in the next few years.
If you're just checking for truthiness, just do `if (value)` without any =.
For at risk packages, there is definitely software that looks at packages for security issues. Multiple ones, that just sit in your deployment pipeline and watch those packages. If you are writing software and not checking packages, then you should be for sure. One thing that isn't good enough that I know people are doing is using fixed versions of packages that are npm installed on your local and in your build pipeline. It is definitely possible to change an npm package's code without updating the version in npm.
My experience has been the complete and utter opposite.
It seems slow enough that I'm really skeptical. Chrome team needs to get on board to and they don't seem to care / know what to do.
DM me. I've been a full stack software engineer for 8 years and have experience in multiple stacks. I find explaining stuff to others often solidifies my understanding so I wouldn't mind answering questions and/or helping. This is an open invitation to others as well but limited by my free time and bandwidth so bear with me. :D
My experience has been that is doesn't matter one bit, since JS framework has nothing to do with CSS usage.
Because PWA’s are second class citizens.
If can give different answers. [https://jsfiddle.net/xgs9eu38/1/](https://jsfiddle.net/xgs9eu38/1/)
I mean realistically even if users don't understand how to install a PWA they're still left with a blazing fast website
I am interested in this but I have never used any JS framework, and my experience with JS is limited to using it for DOM manipulation in websites. How hard would it be for me to get into this?
You mean because the webdev followed the PWA guidelines? Kinda yeah you might get that, but I suspect sites that suck already aren't covering to PWAs so I'm not sure there is a serious difference being made.
Agreed. It's the same story with most Google products, unfortunately.
I've been using Styled Components in 2 production products so far, and I regret it. I have yet to find an IDE that (without bugging out) renders SASS and gives syntax highlighting for Styled Components, so developer comfort wise it's abysmal. Not only that, the code becomes so... cluttered? You'll have a ton of styled components all over the place suddenly. And honestly, it doesn't seem to really solve much of anything. It just looks fancy because it makes programmers who dislike CSS feel like they are using something smarter. I'd avoid it for next projects and go for either plain CSS with the idea to keep it small and specialised to the components the CSS files are included in (and using BEM or other naming methodologies to "namespace" them). Alternatively, just using SASS (.scss) files and including them would work brilliantly fine. Which opens up a big bucket full of nifty features. But, honestly, simple plain CSS with CSS variables (e.g. `color: var(--varname);`) would (and should) suffice plenty.
Is anyone aware of a resource listing other useful typescript transformers, other than the examples on ttypescript's README?
I'm at an agency; we're moving a number of slow sites onto faster headless platforms in the name of turning them into "PWAs." It's 90% a marketing buzzword but one that's a big boon, luckily. Ultimately it just means these are going to be blazingly fast sites. I don't really care if users install them locally, to be frank. I don't have a single friend that has ever installed a site onto their home screen.
Well you're at an agency.... of course it is all buzzwords ;) Nothing personal, but I half doubt you even exist .... ;)
Some. And if they don't now, they should eventually.
I don't think there are any. You probably have to read TypeScript source code.
Yup. My experience too. And it’s been written about in lots of studies.
`==` is a naive way of comparisons, meant to make simple comparisons easy without the need to do type conversions. For example, you might want to see if you can get the user to guess a number. var myNumber = 3; var userGuess = prompt("Can you guess my number?"); if (myNumber == userGuess) { alert("Yay! You did it!"); } else { alert("You're wrong and you should feel bad about it."); } Here, `myNumber` is of the type Number while `prompt()` returns a String for the value assigned back to `userGuess`. The comparison still works because `==` is making assumptions about the values and making coercions before doing the actual comparison. This way, the Art student that wrote the code doesn't have to know anything about types to get stuff done and working. At the same time, the rules around coercion with `==` aren't exactly clear. Well, they're well defined ([if you care to go through them](http://www.ecma-international.org/ecma-262/9.0/index.html#sec-abstract-equality-comparison)), but they can often cause problems when you, as a keen programmer knowing better about how code and types work, expect one outcome when `==` produces another. This especially with the values 0, "", and []. They are all equal in the eyes of `==` when it's clear they're not, really. That's when we want `===`. Strict equality (`===`) skips the coercion and lets us know directly if something is really equal to another thing or not. For most people doing anything other than the very basics with JavaScript, this is the comparison operator you should be using. Its enforces more explicit comparisons which helps you write better code with less bugs. Where `==` might be acceptable still (and this is subjective) is comparing something against being either `null` or `undefined`, which allows you to do one comparison instead of 2 if (value == null) // also checks against undefined // vs if (value === null || value === undefined)
Why "doubt you even exist" ?
Exactly
Very nice
Personally, I’ve found that you have to get comfortable with some of the base tools for it to feel easy. IMO the best toolchain is going to be VSCode, NodeJS for your CLI, and using NPM to handle packages. If you’re not already using those tools, you might have to work a lot harder. For React, you can always install NodeJS on your machine, create a project directory, and run `npx create-react-app` and it will set up a robust development environment in that directory right out of the gate. To me, that’s the easiest and quickest solution. Then it’s just up to you to follow some tutorials. Frameworks often force you to think differently about how things work on a fundamental level. For React, I highly recommend reading their official blog posts and documentation to get a feel for how (and why) things work the way they do.
Just a joke about agencies, and the ephemeral nature of buzzwords.
Thanks, I might join in with the op, starting a position Monday with react redux.
Nice! Congrats! Looking forward to hearing from people.
Hah! Well, we have a few Fortune 500 clients so there's definitely major impact from these. It's all buzzwords to the sales teams – that's true of most places. The dev folks actually understand what's going on.
I'm not using those tools. So far I've only used GUI tools. The article says Vue is easiest to get into, so do some commenters here. That's why I am asking about Vue.
Right, that’s fine. But even with Vue, I still think the easiest set up is using VSCode and NPM. I’m not saying you’re doing it wrong, but I think once you learn how to use those tools, you’ll be very glad you did. There’s a reason why those are some of the most widely used tools in JS-based web development.
Got it. I'll try to get into it. Thanks!
I could be wrong here, but I understood their use of "responsiveness" to mean subjectively responding faster to user input, not the viewport size kind of responsiveness.
nice written article. a little late in 2019, but still provides a good basic knowledge :-)
It's useful because JavaScript has core classes such as String but also the string data type. It helps to be able to directly compare `"abc"` with `new String("abc")`.
This is neat. Just needs a hand drawn font.
All prime factors of a number are always less or equal to its square root (unless it's the number itself)
You only need to check the prime numbers below or equal to the square root of the number you are checking is prime. Think about why that is: If you are testing to see if 100 is prime, then do you need to check if it is divisible by 97? The answer is no because even 97\*2 would be larger than 100 so that check is unnecessary. With this in mind, what is the lowest we can go in checking if something is prime. The answer is the square root. This is because say that a number we are checking, A, is not prime. Then: A = b\*c. Either b will be smaller or c will be smaller or b and c are equal. So by checking only the smaller half of the prime numbers, you automatically check the upper half of the prime numbers. You do need to check the square root of the prime number however Can you think of a number that we would need to check this for?
Coming from mathematics, the == operator upsets me because I believe equality should be transitive. So, [0] == false and false == [0] are both true, but of course you can't say [0] == [0].
thanks @paulqq
A bit thin on the details though, and even wrong in some parts.
It's very useful when checking if a value is null or underfined
Const variables are not immutable
I'd be happy to help if you're still in need. I'm a senior software engineer and have been in the industry about 5 years now. I work primarily on front end, with react/redux/redux-saga.
And if you write a lot if interface-based code it's not uncommon.
&gt;It just looks fancy because it makes programmers who dislike CSS feel like they are using something smarter. thats been my experience, but we started to go down that path, then realized that some css properties were not supported, so we still needed to have a sass sheet with the unsupported stuff in it, at that point, it was a better idea to put everything in one place. sass won.
nice
Let me explain it simpler, 2x8.5=17 3 x5.6=17 4x4.25=17 5x3.4=17 &lt;—— see this 3.4 is smaller than 5!! You should have already check it earlier! So the rule is this If axb=c If a is bigger than square root of c b is smaller then square root of c So its unnecessary to check divisibility of a number’s divisor bigger than its square root.
I am very new to JS and this surprises me why is [0] == [0] false? They are the same type, aren't they?
Got ya
[removed]
Curious, how come?
Sweet! The roughness option is really neat
Let's say you design an interface for some data fetching util, but you ship different implementations to different clients/platforms, and the appropriate implementation is DI'd at runtime. Well consider the method that actually performs the request. It'll be async. But in some cases (namely tests in this example) you might want to return some stubbed data for your test instead. So in your test implementation of the util that "async" method just returns your dummy JSON and you don't need to wrap it in a promise. This is a fairly contrived example but yeah.
You can use this with any of the google handwritten fonts available: [https://fonts.google.com/?category=Handwriting](https://fonts.google.com/?category=Handwriting)
Is the source for the JavaScript components of the James Webb Telescope available anywhere? Would be interesting to see.
"9Bn James Webb Telescope now out of service after determining 0.1 + 0.2 does not equal 0.3"
Author here. The book has always been free to read online, payment was a kind of tip jar for people who got value out of it, or who wanted the convenience of reading it offline, or printing a formatted PDF out. However, the pricing, while reasonable for working programmers in economically developed countries, was steep for students or those who live outside of the financially rarefied air of Silicon Valley. I used to give away coupons for those who asked, but teh time has come to open the doors wide. So starting immediately, the minimum price is ZERO. Nada. Zip. Bupkiss. Diddley. And /r/javascript, thank you from the bottom of my heart for the excellent feedback and discussions. You are part of how this book came to be, and how it improved over the revisions.
Oh that's fair. There have been times where I have an async function return a cached response instead of fetching a new one, so that's another use case that I've written. But really I'd guess 99% of async functions are actually `await`ing or returning a Promise directly.
Lol your example is much better, cheers. 😁
This is highly inspirational, thanks for sharing.
Nice. How will this do a better than npm of preventing malicious packages, or popular packages being taken offline suddenly?
This is awesome. Thanks for posting! I feel the same way. My reaction to basically everything for the first year was "*what*". By this point I've done the basics of threading, hash tables, encryption and a bunch of other stuff in C++. I started C# for fun and I actually whined about not being able to directly control memory and handle pointers quite like C++ does. (What's wrong with me?) I'm starting on more webdev stuff in the fall to add onto the basic HTML/CSS/JS/Jquery. I feel like we're in a pretty similar boat here. It's definitely a journey worth enduring.
Oh no...
Cool! Had some trouble moving the roughness slider on mobile chrome android
Thanks for the feedback, will check it out
&gt; How will this do a better than npm of preventing malicious code being uploaded on popular packages There are two possible solutions to this: 1) require signed packages, so only the developers with proper keys can upload packages and/or 2) offer a community build server. You can find the current issues about these two points here: - https://github.com/open-services/open-registry/issues/15 - https://github.com/open-services/open-registry/issues/16 It's not a easy problem to solve though. But I'm happy to hear any feedback on the proposed solutions and/or alternative solutions! &gt; popular packages being taken offline suddenly? Yup, packages won't be removed from Open-Registry. But not just that, we'll also have federation of registries in the future + you can run it on your own machine (100% open source) so you can be sure the packages you currently refer to, will stay there. As a side-note, Open-Registry is already using IPFS and I'm about to make the root hash more visible. What this means is that there is one address to download the full copy, so it's easy to keep copies of the registry and send it around if needed.
Objects are never equal unless they are the same object. The rules for equality in JS are pretty fucked up: https://www.ecma-international.org/ecma-262/#sec-abstract-equality-comparison
Very cool, not sure how I'd use it but I love the idea
Tip: put 4 spaces in front of each line of code.
I just want to say thanks, as your book was instrumental in me leveling up my JavaScript skills over the past year and a half or so.
10 years of backend development (PHP), but almost no frontend knowledge. I've built a small project in Vue, just because react seemed overcomplicated. Now, I'm the integrator for a React app (I'm the guy knows PHP to modify the backend/API, but also has javascript knowledge) and it doesn't seem shitty anymore. After looking at Rich Harris video - [https://www.youtube.com/watch?v=qqt6YxAZoOc](https://www.youtube.com/watch?v=qqt6YxAZoOc) (and others) and playing with the tutorials, Svelte seems much much more easier than React and Vue. &amp;#x200B; That's why I'd give it a chance.
How accessible are the custom elements that are going on here? Form inputs a11y are very fragile
Hi /u/_xss, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/solitudeMan, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hackedwifi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
NASA uses old stuff because the bugs have been worked out long ago. That said, Node runs pretty great on my Raspberry Pi, I can probably install it on this if they need someone.
Hi /u/pmz, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Article didn't mention graalvm.
On chrome for iOS you can’t even add one to your home screen. You have to launch safari. Although I’m not sure if that is a chrome limitation or an iOS limitation enforced on chrome.
To piggy back, how do we stop developers of abandoned packages from passing it off to potentially untrusted individuals? If the original dev doesn’t do his or her due-diligence, like we have seen in the past, these “solutions” prove to be futile.
How far Apple will go with support is a big question still hanging out there.
I have tried to make the accessible best to my abilities - you will notice that most of them set the proper aria attributes in various states.
Yeah, that should not be possible at all. Once you own a namespace, it should be yours until forever. Proper way of doing it would be to deprecate the package, ask new users to move to another one, then someone else can own the new one.
Is this something that exists and I am ignorant? This is my largest fear. People lose interest and burn out all the time. Someone can easily give up control of a GitHub repo to someone else just to get rid of it.
Hi /u/8baseFounder, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Great book with great practical examples. I read the first edition twice and I had to read “the six” after that. Very good at providing elegant ways to solve common UI problems, and made me better understand functional programming in the context of a dynamically typed language, without use of Functors and Monads and all that jazz. I highly recommend it.
Well, you can kind of have that today with a lockfile and being careful when upgrading packages. Then you have some sort of guarantee. Would be interesting to see if there is something Open-Registry could do something about. I'm not sure if it's a solvable issue.
It's an iOS limitation enforced on chrome.
This is the scope global-level `let` and `const` declarations are defined since, unlike `var`, these declarations in the global context do not make global variables var foo = 'foo' window.foo // foo let bar = 'bar' window.bar // undefined It's a scope that is just beyond global without being global so it will sit between global and your local function scope. Note that despite what its name might suggest, a unique script scope is not created for each script or js file. Like global, it will be shared among various files and scripts, which is why you're seeing more than just `userFunctionStore` and `user1` there.
Got ya. Sorry :)
Let's try that out
Generally they document each devtool feature very well, but I am not able to find this out. Because I don't know what keyword to use search that. :) But I got why it is there from your explanation. Still I'll be happy someone can share the link of these feature.
I get it, it's funny. But that's not JS, that's floating point math. 0.1 and 0.2 does not equal 0.3 in basically any language using your CPU's IEEE FPU engine.
Thanks for this, just read the table of contents and prelude and feel like I will enjoy continuing. There's a real lack of resources that treat ES6 Javascript like a proper multi-paradigm programming language and not like the means to an end of web apps, especially with all it's great features as a functional and object oriented language.
I'll keep that in mind when I target the James Webb Telescope with my web apps.
Same type, but javascript don't do structural equality. What it DOES do though, is overly eager type converting equality.
On the latest IOS udpates, Apple provides more and more support for PWA. They have to, because PWA community is growing.
It looks so cool. Great job!
Hi /u/MollyMack34, this post was removed. _"It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account." - Confucius_ * If you advertise or promote a paid product or service, or a site which you would in some way benefit financially, then please [buy a sponsored link](http://www.reddit.com/advertising). * It's ok to promote your own projects or content, as long as that's not all you do. See ["What constitutes spam?"](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) for more information. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Well, in my team we do the formatting of functions like your second way in any case. The first way might be more popular due to many tutorials ans books, which do the listings this way. Ans you are saving one line of code, but this has probably a small impact. Finally, this is all about convention, so there is at least no technical reason.
Hi /u/isamrish, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/SocketRoket, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ravi-dhiman-, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Just to point out to anyone unfamiliar: jquery and react are just javascript libraries so it’s all javascript also. Although with react you usually write JSX, which is kinda a mix of HTML and javascript
errrm, check my recent comment history. Didn't realise we got charged for each one :-)
Hi /u/NadiaSpark, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The maximum theoretical number of periods per line is "infinity". It is trivial to create arbitrary object depth, and self-references make this practical with no memory overhead. Here's [an example](https://jsfiddle.net/g19cdhxw/). Plus, you could also just store a string containing nothing but periods. The JS spec (to my knowledge) specifies no maximum possible line length, so you would only be limited by slightly less than the storage requirements for storing the period character over and over such that it would fill all memory and virtual memory for your particular computer. However, I believe some older browsers, internet proxies, and possibly OS-level systems have practical limits to how many characters can be stored on a single line before they either crash or become unstable. That's why some JS minifiers intentionally insert newlines after a certain length even if not required by the code itself.
valid point, thought to add on that, packages on your development pipeline approved once but can change their content dynamically when it's live. imagine adding google analytics snippet to your code: &lt;script src="https://www.google-analytics.com/analytics.js"&gt; it will pass your CI procedures, but its content changes constantly, introducing new behaviors, without giving you an option to rerun your validity checks. same goes for 3rd party utilities, especially when coming from an unfamiliar origin or a CDN.
Do I win? const fs = require('fs'); for (let i = 0; i &lt; Number.MAX_VALUE; i++) { fs.writeFile('./lol.js', '"' + '.'.repeat(i) + '"', 'utf8') } Explanation: the easiest way to pack as many periods into a line of code is to make a string of periods. The code above keeps recreating a js file with an increasingly larger string until your JS engine throws an error due to an invalid string length. Maximum string length is not specified in the spec, so it's implementation specific. CPU fan alert: the code above may or may not melt your computer
It's personal preference, that's it. &gt;It's fine for little functions like that, but when they get more complicated I find that format very hard to read Can you elaborate? If the code is indented correctly you should be able to identify code structure based on indentation, not on where the curly braces are. &gt;If I continue to format it my way, would that make it harder to get a job I don't think so, also because you could pipe a linter before your commits and no one would be able to tell you code that way. But yeah in the Javascript world and some other languages the first one is the preferred convention, I suggest you try it for a while if you didn't, you might change your mind.
So the pipelines package scanners generally check for any live loading of external scripts, iframes, etc. I know that the one I use definitely does as we have a package that's internal to the company that gets flagged for doing that. Understanding the source of code is important and understanding their procedures as well.
Hi /u/DevOps77, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You want to follow the industry standard.
There's a lot of documentation for the dev tools, but there's also a lot of complexity. They don't cover all the nuances. The section on scopes seems to be: https://developers.google.com/web/tools/chrome-devtools/javascript/reference#scope Not sure if they have anything else that goes into more detail. Of course the script scope is not mentioned there. But there are other scopes not mentioned there as well including module, regular block, or with block scope. I think it's just a hole in what they cover. But they also don't go into any detail of what the other scopes are or represent, only saying you can &gt; ...view and edit the values of properties and variables in the local, closure, and global scopes.
Fromated From Twitter @Rich_Harris: * Much smaller ecosystem/community/job market, * no devtools yet, * very few editor extensions. * We don't yet support TypeScript in any meaningful way. *A future version of React will have Suspense — we don't yet know if that will be possible within Svelte (but I'm hopeful)* As for S.O I think they mainly use https://discord.gg/yy75DKs So direct help over generic answers, especially with v3 being (literally) days old at this point Most of the (front end) npm packages should be “useable” for svelte as well, provided that they do their thing in JS and can be bundled. And maybe Sapper https://sapper.svelte.technology/ is a better baseline than plain Svelte, depending on the scope you want to aim for.
&gt;You'll typically only have one component per file/module \[...\] These can still be long, while that does seem to be a good practice, they can still be incredibly verbose and hard to understand. &gt;Secondly, I personally consider the lack of static typing to be a much larger long-term cost even if only in terms of onboarding new devs Honestly I'd consider it much harder to onboard newer devs. It's much harder for me to see what's going on in a repo when I'm coming in when there are type names littered everywhere with huge React typenames. &gt;You're doing yourself a disservice, it's very simple. No I'm not, I want to be able to write code, not have to write typings for every new library I want to use. I want my libraries to **just work**; I don't want to have to go through five or six different hurdles to use them. Furthermore, I **just don't understand** how to write typings, nor do I want to. I don't want to have to dig through the source code of my module to find out how it works, because that's what writing typings requires. &gt;It's only protecting you from yourself! I don't need to be protected from myself. Type errors in code I write are extremely rare because I've written JS for so long, and even then, they're extremely simple to solve for me. I don't want to introduce an entire language to my existing repos, or my newer projects for that matter, just to solve a small issue that I almost never encounter. &gt;Static typing is a substitution for the vast majority of unit tests pertaining to types. That's a whole class of unit tests that can be virtually forgotten about. True, but why should I rewrite my entire code base when I already have existing tests, and when tests are SO much easier to write and satisfy? &gt;Imagine you have an interface with a few dozen nested properties. I don't and this isn't a valid use case for me. &gt;You'll also very likely resort to writing overly defensive code to curtail this. This doesn't happen for me. &gt;Could you provide an example? Let's say I'm writing a simple React component that creates a heading: import * as React from 'react' const HeaderComponent = (props) =&gt; &lt;h1&gt;{props.name}&lt;/h1&gt; This is perfectly valid Typescript and partially valid Javascript. However, Typescript gives me an error about the props being of type `any`. Fair enough, let's give them a type: const HeaderComponent = (props: {name: string}) =&gt; &lt;h1&gt;{props.name}&lt;/h1&gt; This is very clean code, and tells me when I look back at it exactly what props are expected by the component and the type that they have. Now let's say I want to write a `DivWrapper` component that accepts in any React component and returns another component that wraps them in a div. It would look like this: const DivWrapper = (Component =&gt; ( (props) =&gt; &lt;div&gt;&lt;Component {...props}&lt;/div&gt; ) This is perfectly valid Typescript code. However, again, we're getting the same errors about `any` with `Component` and `props`. So let's use a generic to make sure that this function can be used with any component: const DivWrapper = &lt;P extends object&gt;(Component: React.ReactType) =&gt; ( (props: P) =&gt; &lt;div&gt;&lt;Component {...props} /&gt;&lt;/div&gt; ) Now let's try exporting the other function using wrapper we just made: export default DivWrapper&lt;{name: string}&gt;(&lt;HeaderComponent name="Hi"/&gt;) This gives an error like this: Argument of type 'Element' is not assignable to parameter of type 'ElementType&lt;any&gt;'. Type 'Element' is not assignable to type 'FunctionComponent&lt;any&gt;'. Type 'Element' provides no match for the signature '(props: any, context?: any): ReactElement&lt;any, string | ((props: any) =&gt; ReactElement&lt;any, string | ... | (new (props: any) =&gt; Component&lt;any, any, any&gt;) | (new (props: any) =&gt; Component&lt;any, any, any&gt;)&gt;'.ts(2345) The fuck? First, there's the long ass React typings I was talking about. Second, how is this error useful in diagnosing the problem? The issue here is that I made the mistake of passing a `JSX.Element` type to `Component`, not passing down the actual component variable. It works fine if you use it like this: export default DivWrapper&lt;{name: string}&gt;(HeaderComponent) However, how did that error help me at all? Nowhere does it say I'm passing down something of the type `JSX.Element`, only `Element`, and nowhere does it say that the `JSX.Element` type doesn't match the `React.ReactType` definition. This was even more confusing when I originally had `Component` named to `Element`. The type error wasn't helpful AT ALL and did nothing to solve the underlying problem. And that is why I refuse to use Typescript. After nearly an hour of searching for 1) how to fix the problem of passing down props with generics and 2) what specifically was wrong with what I was doing here, it wasn't the Typescript error in the end that helped me at all. I polluted my extremely simple code with ugly type definitions and generics, only to come across an error that would have been fixed by React's error system (it would have refused to display in the browser). This isn't helpful to me at all, which is why I refuse to use Typescript. It doesn't do anything for me (at least in the React world) that isn't already covered by tools I can use in Javascript (`PropTypes`), and only makes already long components longer and uglier. No thank you.
They do but if it encroaches on the app store I wonder....
I like. Thing Name (stuff to put in it) { } To me the brackets on that line indicate the magic starts for "Name". If it it doesn't it looks a bit like a lonely block that maybe belongs to nobody. But in the end I just do what prettier says because I really only care to be consistent....somehow.
Wonderful. Honestly beautiful
I'm not a developer, but if you go with javascript you will not get it wrong. Angular is really just glorified javascript and pretty easy to learn. Make sure you're familiar with data structures, common algorithms and javascript design patterns as well. Hope this helps.
With other languages, both options work fine in all cases and the official style guide or your company's style guide can chose either option. With JavaScript, hugging curlies are clearly the way to go, because there is weird a quirk: function foo() { return { a: 5 }; } console.log(foo()); // {a: 5} vs function foo() { return { a: 5 }; } console.log(foo()); // undefined The problem is that this: return { a: 5 }; Is like: return; ...followed by a block (not an object literal) with a label called "a" and a number literal... and then there is some superfluous ';' at the end. If you always put the opening brace on the same line, you won't have to do anything special when you want to return a freshly created object.
Look nice from a glance. Small thing I noticed: Should the yarn registry be listed here? https://docs.open-registry.dev/alternatives/
[removed]
Could be a solution as well, haven’t thought about it.
Thanks you for all the information. We will do
&gt; typings The vast majority of popular libraries have good typings available, and when that's not the case you needn't write a typing for the entire thing, only the parts you wish to use. You needn't parse the source code, merely the documentation - which you'd need to do anyway to use the library. Finally, you can opt-out of this strict-ish library type-checking anyway, though I'd advise against that (just as I would writing any untyped code). &gt; tests easier to write and satisfy You're only saying this because you've more experience with them. I have the opposite opinion from experience. Keep an open mind. &gt; generic component wrapper I believe this should work, not tested it though: const DivWrapper = &lt;T extends ElementType, U extends ComponentProps&lt;T&gt;&gt;(Component: T) =&gt; (props: U) =&gt; ( &lt;div&gt; &lt;Component {...props} /&gt; &lt;/div&gt; ); It's exceptionally rare to be limited by difficult generics like this. This particular example is something of a perfect storm, but once you've figured it out once it's simple to reuse if necessary. And, again, you can always opt out with `any` when it becomes more hassle than it's worth. --- I appreciate where you're coming from, but I've heard it before from colleagues who've since come around. You really should allow yourself to get over the hurdle with TypeScript and appreciate the benefits it offers long term at least once before dismissing it.
Thanks to the spread operator I imagine you could end up with loads: const alpha = {...a, ...b, c: {...d, ...e}, f: [...g, ...h, {i: {...j, ...k}, l: {...m, ...n, ...o}}], p: [...q, ...r, ..s], t: {...u, ...v}, w: [...x, ...y, ...z]}
Thanks! I don't think so, the yarn registry is just a proxy to the npm registry, so I don't feel like it counts. Maybe the whole page should include proxies though? And Open-Registry would just be listed as a proxy right now, as it's not it's own registry yet.
It's not a mix of html and javascript. It's javascript functions expressed in xml syntax, which return dom elements as it's output value. xml like markup is there just for the eyes of the developer.
Amazing advice. Thank you!
JSParty, the react podcast
Front end happy hour and developer tea
Why not have it as a separate section on the "alternatives" page? Unless space or bandwidth is at a premium (=
Thanks so much, looks great so far.
Don't worry, it will start getting hard again. Now you're starting to understand the core basics. And once you do grasp them, you'll be competent enough to learn at reasonable pace. At some point you'll be just competent enough to realize how little you do know what what you know and shit will get scary again.
No, your code generates strings that exceed the [maximum valid JS string length (2^53 -1)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length#Description) and are therefore not JavaScript. Also, why are you writing to the same file over and over again? Even if you had not, the max string length is far less than the infinitely long sequence of possible object property accesses, even if you waste a few characters per instance. However, you could instead access an infinitely long series of properties that had string keys made up exclusively of periods. ``` var o = {}; o['.......................'] = o; console.log(o```
Then it makes even less sense.
Yes, I know. My desire is to remove the semantic difference, and therefore the need for both. Yes, yes, you could make the argument that their differences are significant enough to warrant separate values, but that argument does not stop at two. Why not three? Or ten?
Sure, it’s just that removing the double equals as valid JS would be easier to deal with from a refactoring perspective than silently changing the behavior of an existing operator. Obvious errors in compilation vs silent bugs everywhere.
Same argument for goto. Don’t presume ignorance on the person whose opinion differs from yours.
I bought this book for a while (not a chance to read, no time for that, working as a developer full time ;)), but from a quick look, it is an excellent book - which is a very rare phenomenon in the JS book universe. Thanks for that!
Thank you good sir, greatly appreciated.
Hey, I actually forgot to mention, there is a pretty good online development environment service called codesandbox.io, which allows you to work with several common JS frameworks, including Vue and React. They include all the boilerplate for you, so you don't have to wade through it to get started. You can also easily import additional libraries from NPM by using their "add dependencies" search tool. I use codesandbox.io all the time for smaller experiments. So you should definitely check that out.
I’m happy to see people start talking about it’s shortcomings. I’ve had to use it for a year or so, on and off, and it’s more problematic than helpful (I believe it’s v2 we are using).
I see you're using svg to draw all of this coolness. That's a lot of DOM elements per each component. How is this going to perform when you have a lot of these elements on the page?
&gt; you could instead access an infinitely long series of properties that had string keys made up exclusively of periods You're forgetting that the program itself must fit in the stack. Try it with a sufficiently large chain of ['....'] and you'll get a stack overflow error. I'm just writing the file over and over because I'm lazy to figure out the exact string length that will cause an implementation to break, e.g. in Chrome, `'"'.repeat(2e9)` already breaks regardless of what the spec may say.
Hence the ”kinda”. JSX syntax resembles HTML mixed with javascript
For most cases it will be fine. DOM nodes once rendered are never re-rendered just updated. I have seen cases with 100s of these elements. It is really no more complicated than having a complex dataviz on the page. Some components are heavier than others. A button for example, is only 3 nodes. Same for textbox - which is comparable to many other UI libraries out there. It has a lot more nodes for combos and progress, but not unbearably large. Also, I'm not sure a real serious corporate site with really lots of nodes would really want this kinda look on the page. I see this mostly used for prototypes or more fun experiences.
(On a side note, when Houdini paint API is available everywhere, a lot of this complexity will go away and these could be rendered in a single node. )
This is awesome! do you know if anyone's using it yet? I might :)
One of the best books on Javascript ever.
Full time developers don't have time to read?
Other than the name. What a stupid name.
Shop talk show
Vanilla JavaScript is the most important thing to know if you want to be a high level developer as you will understand how everything works. Frameworks come and go but Javascript has been around for a long time now. Also I would spend time learning react before Angular. I think it is the better of the two and has the best long term career results for someone entering. I’d also look at Vue.
If you haven't already, I highly recommend listening to your components.
The argument against goto is that it can create a a logic flow that’s harder to follow. How is that that same as the argument against null and undefined? And I don’t just always assume ignorance when someone’s opinion differs from mine. Why are _you_ assuming that?
Kind of. Yes, you get a maximum call stack exceeded depending on your specific implementation of JS (any more than 5192 object property accesses in a single operation in my specific Node implementation). However, the length of the object key can be up to the maximum string length (or the maximum stable string length of a given environment) and does not affect the maximum call stack (at least not in the same way). Thus, by combining very long string keys with very long object property accesses, such a program would contain several thousand times more periods than a raw string of periods, given the same operating environment. The bracket and quote characters involved would be insignificant compared to the overall length of the code generated. However, this would easily begin causing issues with maximum line length.
Does it perform as expected? Is it documented? If yes to both, then what does the date matter? The JS fandom is pretty bad about "need the newest shiny to get things done"... when you really don't.
&gt; This site can’t be reached &gt; leanpub.com’s server IP address could not be found. Ia anyone else getting this error?
Here comes that stroke feeling again...
I just want to say thank you for sharing! 🤟🏼
Point #2 is your problem. The sooner you accept it, the better.
Regarding it being hard to read, the industry standard kinda smooshes everything together, so it takes me a little bit what belongs to what. My way my brain immediately gets what belongs to what.
This is really cool, make the web fun again :P
Realised responsive is a bad word choice here. What I was trying to convey was the speed with which what is rendered on your screen changes. Clicking on a tab, loading a new page etc. Unless it's dependent on some sort of request Vue loads that change so quickly, and it feels so smooth.
I see. As I said I guess this style is more popular between people who learned to code directly in modern languages like Python or JS, I tend to think a lot in terms of indentation and nothing else. I've seen your way of coding a lot more in the Academic context, by people who come from a C background or, in general, more oriented towards Computer Science rather then UI/UX.
I was afraid when the Ecuadorian embassy expelled JavaScript Allongé and the British arrested him, but I'm glad to hear he's now free
Never noticed this in years of JS coding, very good point!
Underrated effort here
Good on you, friend! Hopefully you made your money out of it and feel like it was a worthwhile (in all respects) thing to write.
I find the curly bracket on the line below the function call hard to read. If I was pair programming with you I’d go through and move it back up next to the function it belongs to every single time. It goes against standard convention, so most of the code you find out in the world won’t match it, which means the majority of people who read your code will need to take extra time to process it. To me this looks like a beginner mistake. It’s messy and unclear. The opening curly bracket indicates everything inside it belongs to its function, so it makes sense that it would remain on the same line as the function declaration and close after all of the code inside the function. Please please please don’t format your code this way.
I got to it just fine. I'm in the US (maybe it's a location thing)
Niketa VSCode themes - [https://github.com/selfrefactor/niketa-theme](https://github.com/selfrefactor/niketa-theme) What it does? - It is a complex system for a simple task(generation and update of VSCode themes). Main file - [https://github.com/selfrefactor/niketa-theme/blob/master/src/createPaletteTheme.spec.js](https://github.com/selfrefactor/niketa-theme/blob/master/src/createPaletteTheme.spec.js) as it is used to generate dev themes and prepare selected dev theme for publish
Hmm with that in mind, plus your disk size calculation, I think it might be better to use a comma operator to separate strings, since we can then cram a few more periods than w/ property access before hitting the physical limit of the file system.
I like Coding Blocks. It isn't JavaScript specific but is good info.
Devchat podcasts: https://pca.st/javajabber
I've used it, it's a really good library overall, not just their documentation.
semicolons are optional
https://www.ecma-international.org/ecma-262/8.0/#sec-automatic-semicolon-insertion &gt; Most ECMAScript statements and declarations must be terminated with a semicolon. Such semicolons may always appear explicitly in the source text. For convenience, however, such semicolons may be omitted from the source text in certain situations. Semicolons are not optional. You can't omit them in all situations.
Agreed! just started using papaparse It’s basic and meets my needs for the moment There is sheet js if you need a more advanced import tool
The ECMA page is *very* ambiguous and you are disingenuous. Semicolons are not always required, and are optional in most javascript code. Saying "semicolons are not option" is ridiculous because that sounds like they are required always - which they absolutely are not.
Thanks man, I will make it easier to use！
&gt; The ECMA page is very ambiguous It's not. It's actually very precise. E.g. take the `break` statement: https://www.ecma-international.org/ecma-262/8.0/#prod-asi-rules-BreakStatement Do you see the ';' there? This statement must be terminated with a ';'. You can omit it because ASI will put it there for you. &gt; Saying "semicolons are not [optional]" is ridiculous because that sounds like they are required always No, saying "semicolons are optional", on the other hand, means that you can omit them in all cases, which is untrue. You could say: "they are optional *in most cases*". That would be a true statement, for example.
You could use jQuery to run an AJAX call and shove the response into a div after JSON stringifying it.
I simply love it, great work man.
You can use Node.js to write a simple script you can run from the console to do this. Check out the [request](https://github.com/request/request#readme) library for a nice API that wraps the Node.js HTTP agent. Doing it the browser is basically a similar deal although it can be tricky to get the actual cookies depending on how the site is configured. I'm not 100% sure if a HTTP request initiated from the browser can still read the HTTP only cookies in the response. So you can try it out if you want. Check out the [axios](https://github.com/axios/axios) library for a nice client side wrapper similar to the aforementioned request library. Actually it works for the server side Node.js stuff to so you might like it more than the request library. Either one should work for Node.js...
I hope you enjoy using it. In the last two days, I have added the features of compressed HTML. If you have any suggestions and ideas, please let me know.
Thanks for the reply. From what I read it seemed jQuery tackled this task but wasn't sure if there were easier options now a days. Is there a template you know of that I can look at and base my POST request on?
Semicolons are optional
If you genuinely believe that the spec is ambiguous or even wrong, you can file a bug report. https://github.com/tc39/ecma262/issues
I really appreciate your reply and the suggestion regarding Node. I neglected to mention that my desktop is locked down to some degree and getting Node installed would probably not be so easy in the near future.... But I definitely will explore this option more when I have more freedom to install things like Node
[removed]
...
The ECMA page is *very* ambiguous and you are disingenuous. Semicolons are not always required, and are optional in most javascript code. Saying "semicolons are not optional" is ridiculous because that sounds like they are required always - but they absolutely are not.
W3Schools has a decent write-up with an example here: https://www.w3schools.com/jquery/jquery_ajax_get_post.asp
I wonder how hard it would be to integrate it with something like mermaid js to produce rough, handwritten style diagrams
[You can setup a portable version of Node.js.](https://gist.github.com/massahud/321a52f153e5d8f571be)
Maybe you like the more verbose paragraph from the ES6 spec better. https://www.ecma-international.org/ecma-262/6.0/index.html#sec-automatic-semicolon-insertion &gt; Certain ECMAScript statements (empty statement, let, const, import, and export declarations, variable statement, expression statement, debugger statement, continue statement, break statement, return statement, and throw statement) must be terminated with semicolons. Such semicolons may always appear explicitly in the source text. For convenience, however, such semicolons may be omitted from the source text in certain situations. These situations are described by saying that semicolons are automatically inserted into the source code token stream in those situations.
This looks really fun, def going to try it out
Hi, I'm a developer of svelte-ts-preprocess I fixed the issue. Please check it again! Currently I'm working on a [template](https://github.com/PaulMaly/svelte-ts-preprocess/tree/master/packages/app)
What makes it outdated?
Who was talking about CSS?
The ECMA page is *very* ambiguous and you are disingenuous. Semicolons are not always required, and are optional in most javascript code. Saying "semicolons are not optional" is ridiculous because that sounds like they are required always - but they absolutely are not.
Package signing by the authors sounds great. This has been needed since inception but npm were too incompetent to implement it.
If "semicolons are not always required, and are optional in most javascript code" is a true statement, "semicolons are optional" can't be a true statement, because it would mean that semicolons are never required. Let's try this: a) Avoiding peanuts is not required for everyone, most people are fine with peanuts. b) Avoiding peanuts is optional. Can you tell the difference between these two statements? Am I disingenuous when I insist that they are not the same? Or when I insist that "usually" doesn't mean "always"? Or when I insist that "zero or more" is different from "one or more"? Details like this are very important when it comes to technical specifications, product requirements, and things like that. As a developer, you should be painfully aware of that.
What's is a progressive web app?
It's been sorta maintained for a year now but just released a 1.0 I pay attention to the issues on/off whenever I get some spare time.
People have done something similar with my other graphics library that inspired this: [https://roughjs.com/](https://roughjs.com/)
Thanks! It's a bit whimsical but fun to create.
In most of the cases you need a solid grasp of vanilla js, before jumping on a framework. You can learn it on the go. As developer you will use a lot of tools you are not 100% familiar with. For example many times along with the vanilla js you will be using, some utility libraries, templating engine, databases, test frameworks - which are many times learned side by side when you are familiar with the project.
(on mobile) the only thing I noticed about their homepage was how bad the scrolljacking was. I don't doubt the library's great, but holy crap it's barely scrollable on mobile
It depends. Usually I'll have the first curly bracket hang out with the first part of whatever statement I am creating, unless having the curly bracket on a new line will improve the readability of the code block as a whole because the code before the first bracket is long and awkward. For me, mostly your example 1, but using example 2 occasionally if it makes the code easier to read and understand.
Semicolons are optional
Oooh! Another holy war! Srsly tho, for me I find the closing brace at the same indent level as the function declaration helps when scanning, but putting the opening brace on its own line just adds unnecessary vertical whitespace. function a (v1) { return function (v2) { doSomethingVRelated(v1, v2); } }
&gt; The vast majority of popular libraries have good typings available Not for the libraries I need (`inquirer` ones are particularly horrible and don't transfer the type to the `response` in the Promise, forcing you to write your own interface and have the data there twice). &gt; you needn't write a typing for the entire thing, only the parts you wish to use You are missing my point. I don't want to write typings **at all**. I want to do a `yarn install` and have the package just work, not be forced to dive into **any** of the internals of the package. **I want to write my fucking code.** &gt; You're only saying this because you've more experience with them. No. Specifically with React components, it's much easier to write tests with `enzyme` than it is to convert an entire component (and it's subcomponents) to Typescript, satisfy the compiler, and then write tests in `enzyme` and Typescript. That's just a fact. Typescript also doesn't replace unit tests; if you're using it in lieu of unit tests, you're doing something wrong. &gt; I believe this should work, not tested it though: The one I posted worked properly, I was just passing things down wrong and Typescript didn't help me at all. The error confused me more than anything, and this was an error that React would have caught better (I've had other errors I've dealt with that Typescript didn't catch that React did). Also that solution is incredibly verbose when the equivalent in ES6 is: const DivWrapper = Component =&gt; props =&gt; &lt;div&gt;&lt;Component {...props}/&gt;&lt;/div&gt; That's much more beautiful and **much more easy to read**. &gt; It's exceptionally rare to be limited by difficult generics like this. This is an extremely basic use case, I'm not even passing down any additional data to the component or manipulating the passed down props. If I'm being limited here, it means it's highly likely I'll be limited later on. &gt; And, again, you can always opt out with `any` when it becomes more hassle than it's worth. And that's the problem I have with Typescript. I've had nothing but problems with it so far, and I've used `any` much more than I've actually used typings. What's the fucking point in using it if the type system is too restrictive? &gt; You really should allow yourself to get over the hurdle This isn't just one hurdle, it's one of many that I've faced over the course of a week trying to learn Typescript + React. Again, this was a **basic example**. Some of the components in my app are twice as complicated and even more of a pain in the ass to rewrite in Typescript. &gt; appreciate the benefits it offers long term at least once before dismissing it. The same can be accomplished using `PropTypes`, good organization, and great unit test coverage. The case for Typescript isn't convincing enough for me.
Hi /u/blackacidevil, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
The people who defended goto when there was a major push to remove it used the argument: “those other programmers just don’t know how to use it properly.” The issues with having more than one “empty value” in JS: 1. Checking for the absence of a value is one step more complex (requiring both a strict check for both null and undefined), or forcing lower precision (checking the falseyness will trigger on non-empty values). 2. undefined is intended to mean when something has not been assigned or defined, but one can trivially assign or define something explicitly to undefined (that’s null’s job). 3. null has issues with its typeof. Meanwhile, undefined, which is meant to mean something with neither a type nor a value, has a type. 4. Many novice programmers or recent converts from other languages often do not expect more than one empty value, because it is a relative rarity in languages. Conclusion: They both suck, but undefined (as a concept, not a named entity) would be harder to remove from the language than null. &gt; Why are you assuming that? I’m not assuming. It’s something you said: &gt; It seems like **all the answers in this thread are people** just calling to remove features that they **don't understand** how to use properly.
You're the hero we need, but don't deserve
That's technically right. It's just that a single raw string or a comma-separated series of raw strings cannot actually do anything, even in principle. I don't really consider it a js program, because it performs no operations. My method can, in theory, do something. I have an aversion to your solution(s) on the grounds that it is really just a novel data file, not a program. I mean, I could just make a comment like so: ``` //................ ``` This would have not have the limits of a single string's max length, nor would it require more than two characters to exceed 2^53 - 1 characters, whereas a series of strings would require three characters per additional string entry. And, just to be stupid, according to the spec, the single line comment is only terminated by the LineTerminator code point. So, technically, you could generate an infinite file stream of periods, initialized by `//`, and it could be arbitrarily long without using much memory and zero storage. But this is meaningless for the same reason a series of raw strings is meaningless: it doesn't do anything.
What a great resource! Thank you =)
I just started listening to these guys. Very interesting and they're also pretty funny. Definitely a good recommendation.
That is a really good page for a library! Inspirational even.
Is this a general learning javascript book or something more specific?
thank you for your reply! 1. Regarding XML: I have not been able to reproduce your question. Can I copy the URL to me? 2. Regarding Export/Download: is a good suggestion, yyyy-MM-dd HH:mm:ss is easier to understand, I will modify this later.
A clever way to display any FAQ in general, not just for dev products.
Thanks for your comments, this is an important issue and I will add the license page later.
Do you know what responsiveness, in context of web, means?
Ember Map. They talk about more than just Ember.js
Sapper for Svelte 3 is currently in alpha. I wouldn't use that in production yet. But I played around with it, and it seems really great. Definitely want to do something with it.
I have been playing around with it and it doesn't seem like there is too much svelte specific stuff to learn. If you have vue experience, you'd probably be fine. But I am in the same boat as you. Really wanna give it a shot.
I smirked to no end thanks to the name.
You could build something like this very easily, but that's not how proper translations work sadly. Take a look at this, to see how a proper library does translations: https://hacks.mozilla.org/2019/04/fluent-1-0-a-localization-system-for-natural-sounding-translations/
JRE
I don't even need a CSV parsing library for any projects right now - and this page is selling me on starting a side project just for the purpose of using papaparse once.
Interesting library, first time I heard of it, bookmarking it, probably will be useful in the future
I used the Lib in a Project and its pretty CPU intensiv but, man, dat Page was the Reason i decided to use this Lib and stop searching for an other Lib. Straight forward and i did not have to read the Docs (as already written above) just to check if it fits my needs. There are so many Libs just talking how great it is just to hide implementing it is a pain in the butt or being so hard even considering it as a choice. I am, im a Dev, not a Manager getting wet by reading Buzzwords.
Are you talking about js that is running in the browser? Not server programming with Nodejs? If so, ALL js is accessible by the user. Expecting it to be secret in any way is foolish and dangerous. It usually doesn’t matter much if the js is in the html file of a separate file. It certainly doesn’t affect the visibility of it.
Any form of frontend code (whether javascript, html, css, etc.) can be viewed in full, and there is nothing you can do to get around this. So, the only real things you can do is make sure there is nothing sensitive for people to find. There are minifiers which to a degree obfuscate your code, but this doesn't a determined person from analyzing it. If you're talking about node or another backend service, those definitely should not be at all accessible.
Over reacting entirely, you should verify and authenticate everything on the back end, the front end is never to be trusted in the first place.
Do you usw node.js? If not, your javascript code is likely executed on client side and users can see and modify javascript code in their browsers developer tools. This means you should never do security critical code and transaction validations on client side. But I'm not an expert in security so there may be a lot more to take into account.
[removed]
I did not read through your post and at first I though this is some rant on that . Was really puzzled about the link because It "really wasn't that bad" besides the odd name.
Is this frontend code? All frontend code will be public. It might be obfuscated, but that's not really the same as making it private. &gt; Are there scenarios where private information needs be contained within a JS, or would this be a newbie mistake? You should never put anything sensitive or private in your frontend code. That's fetched from the server.
Read Javascript: The good parts. Here douglas crockford has mentioned how to write functions in javascript
Being from 2006 (=ES3). ES5 (December 2009) didn't add much. The noteworthy stuff like Array.prototype.map etc can be polyfilled. ES6/ES2015 (June 2015) added a ton of features.
Hi /u/rayhan666, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
That scroll on mobile is horrible
: might not be a good idea for filename characters. Or maybe I am living in the last century, idk.
Read this book a while ago, one of my first books (if not the first) in JavaScript programming, recommend it to everyone.
It does seem like a really good library. But it has a critical error. Under the “Who’s Your Papa?” section they missed a prime opportunity to name the unminified package “[Big Papa](https://youtu.be/phaJXp_zMYM)”
Nothing at all.
Appreciate for your generosity
[removed]
I use the peek window all the time though...
I always hated it, I guess it depends on your needs. &amp;#x200B; From my experience, I often saw it pop up when there was only 1 valid symbol to follow. I just prefer my cursor to be moved.
I just have a keyboard shortcut bound to go to definition (which has rarely failed me) and use peek definition and peek references all the time. I find it useful for quickly checking a definition without having to open it in a full buffer, and for jumping around a code base. It's never really gotten in my way, I didn't know people didn't like it.
If a Javascript file is not public, how will your customers web browser download it?
I didn't watch the talk, but I'm still wondering how the pipeline was actually sped up. Before merging a PR \_all\_ tests must be run, so you can ensure that your changes don't have any implications no other parts, right? So therefore all packages must be built/type checked before you run the integration tests. &amp;#x200B; We've actually gone a similar route as you're describing, but our build / test time is still very high. We've moved our build and testing steps to Google Cloud Builds to improve the performance, but it still takes ages. Right now we're thinking about using incremental builds and only build what's actually changed, but that's not that easy to achieve. So I guess my question is: do you have any numbers on how much you're build/testing time has improved with this?
Papa Bless!
Wow, awesome! This is going to be inspiration when we put up the website for 🦉 eth-owl, targeted at Ethereum developers! Thank you for sharing :D [https://github.com/SaaSyEth/eth-owl](https://github.com/SaaSyEth/eth-owl)
That would be a good start but I think it would also need some kind of "web of trust" as well. Knowing where a package came from is good, but I still need a way of knowing who to trust.
This consistent popularity is brilliant, it means corporations are actually taking JS as a serious long term solution. My company has become receptive to porting/refactoring some of the Java parts of our stack in the past few years and as soon I got the chance to ditch the all around gross development environment that is Java, I dived on it!
As a side note, there are some truly beautiful fonts there.
King*
He says about the results of a report in which two of the six sectors surveyed were about gender discrimination in tech.
Why is python do popular? Genuine question
 [**Syntax.fm** ](http://syntax.fm/) is actually decent
So language is “she” now?
I have to say that as a developer who 100% supports PWAs I’ve struggled enormously to sell them to clients or stakeholders as an option. They just fundamentally don’t get it. “No I want an app. Like... that you can install.” Sigh.
Yeah “responsive” is one of those loaded words. I also typically use it to refer to how quickly and smoothly a site reacts to user input or action.
Pretty obvious what they meant.
 [https://www.google.com/search?q=responsive+web](https://www.google.com/search?q=responsive+web)
Python is actually pretty decent for working with data. Combine it with R and you can do some pretty powerful data analysis, rather simply. It's also pretty easy to set up, maintain and can often be used cross stack. Then on top of that it's easy to learn, the syntax makes sense to beginners and it's a very forgiving language. The whole version 2/3 schism means it's a language I'm not a huge fan of personally. I need a language where it just works and the code I write today will work 10 years down the line when the version number has incremented many times over, as JS does.
I'd say nice syntax, lots of libraries and it's very good for ml/ai which seems to be very big right now
It’s a moderately vague term that refers to the ability to add progressively more features to an app based on client capability. This includes things like the ability to install the app to the user’s home screen like a native app (with an icon, etc), to run databases and processes locally in the browser, and to work offline. The most key feature are the presence of a *manifest* which lists all the resources of the web app, and the use of *service workers*, which are background scripts that perform tasks for the primary app. Examples are caching, background syncing, push notifications, etc.
No one cares. His usage was clear from context.
I mean it seems like King is just the common usage in the language to denote the top ranking in a given category. In the same way that we call vehicles she, such as boats or cars or our home country the Motherland. Purposely changing it to shoehorn a political point in just feels gross.
What the hell is wrong with you?
In my experience, each framework is going to ask you to make trade offs and occasionally force you into certain design paradigms. But that’s just part of development. That would be true even if you designed your own framework from scratch. If you are unfamiliar with front-end development, I would suggest something with broad community support. It sucks spending weeks trying to work out a solution to a problem when nobody is out there providing help in a timely manner. That’s something I’d make some compromises for. I haven’t tried Svelte yet, but it looks really great. I don’t think it would be a bad choice. But if I were you I’d go with Vue or React for production code, since that’s what you seem to know, and their ecosystems are more robust.
There was no context.
Why would it be "he"?
One thing I *don't* like about python is the syntax.
Well, you won’t believe but in some languages noun “language” is masculine. In English it should be “it”, not “she”. But I am not a native English speaker, always thought that in such cases King is being used, not Queen 🤔
Why is it either?
It's expressive and generally considered one of the easier languages to learn. It's more concise and often requires less code written to perform the same tasks as something in languages like Java or C++. Its performance is horrible, as it's one of the slowest performing languages, but it's flexible and has a wide range of potential applications, and performance can often be overlooked by simply throwing more hardware at it, but performance is also often not considered a priority to begin with. That all being said, I haven't used python much, as I've always been able to accomplish the same goals using JavaScript and Node.js, which I'm more familiar with and which also tends to be a bit more performant of a solution.
It's beginner friendly.
If there's anything I hate about Python it's the syntax. So many times I've seen people and myself bitten by incorrect whitespace, and confuse beginners.
Ooh... a lady! ladysman.gif
Ship it!
I think a bug part of it is that a lot of schools teach it so there is a lot of material on it.
Python very simple and easy language with a good design. Lots of bad and old cruft was removed in Python 3. Its also 100% unicode. Its also fast. Numpy and pals have their cores written on C and highly optimized Fortran. Python has A class packages on pypi, and theres something for every problem you can think of.
King used with neuter objects in english implies "dominant" or "leading" Queen is usually used to imply troublesome or problematic. For example: "Toyota is king of the car market, while Jaguars tend to be garage queens." So maybe is is their underhanded way to attack JS...? More likely its just SJW nonsense.
Hi /u/mrpoopypenishole, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/darrenturn90, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nav3t, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MetalMikey666, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/bassman2112, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/eyeball1234, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
easy to learn, duck typing, and easy to speed up slow code by writing it instead in C
Hi /u/Zombiewski, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This sjw stuff sometimes ridiculous and it’s actions lead to opposite results than equality IMO.
&gt; Queen is usually used to imply "troublesome" or "problematic". That's interesting, I've never heard this, or your example. Princess makes sense, for someone pouty and snobbish, but I've never heard Queen used in such a way. Not to say that you're lying, I believe you, I just find that interesting.
Wait are you being serious? Do you write Javascript without a transpiler? Almost certainly not right?
Author here: It's a book about programming ideas in general, with a special focus on composition. It just happens to be written in JavaScript ES2015/ES6, as that is the language that almost everybody has at least a casual interest in.
me too, it's super nice in conjunction with the code lens feature to get a quick overview `¯\_(ツ)_/¯`
This. NASA does not use the latest of anything, especially for mission critical things. What they seek is the best MTBF possible
Might be hit or miss then, i definitely like it even tho i don't have experiences in too many lenguages!
Your average frontend guy is gonna take a few months to understand basic concepts in Go, starting from copy vs reference.
Python is one of the faster interpreted languages. To call its performance “horrible” doesn’t make much sense, as Python performs the same as many JS implementations. If you’re talking about v8, then yea. v8 is amazing and gets the most performance possible out of JS. But JS is still orders of magnitude slower than compiled, statically typed languages. And it’s not orders of magnitude faster than CPython.
JS transpilers transpile newer versions down into older versions. Meaning old code still runs just fine. So what's your point about my current gen code running in 10 years?
Don't feminists hate it when you refer to things as female?
I'm obviously the only chess player here.
Ah, yeah comments would definitely let you pack more periods in the file. In any case, if a valid solution must do some sort of side effect, then one simply needs to write some code to that effect console.log(1)//.......
As someone who went to art school and transitions in to app development/web design, Python was really easy to pick up. The most I ever saw about python prior to the job I have now was 'oh it's the thing Blender3d needs to run, whatever'. But after about a day I was able to make a script that helped find where a bug was. This is in contrast to JS where I'm ramping up in React. React isn't for 'oh I know enough javascript/jquery to be able to be a web designer' level JS. Therefore its *a lot*.
Whitespaces are a really dated argument these days. Just use editorconfig if your editor isn't smart enough about python conventions
Lol you literally argued in favor of social justice...but then called it nonsense. How gender-specific words have certain connotations. I agree that there are some aspects of sj that can be a little out there but you actually brought up good points.
I didn’t learn python until later a few months ago, but I’ve been programming professionally for about 5 years now. Honestly, Python is really useful for when you want to quickly test something out. If I want to try something silly, it’s a hell of a lot easier to pull up a python shell, and write what I want and run it, than it is to setup any other project that requires structuring, type handling, etc... Also, it’s the leading language chose for Web Scraping, Botting, and is really useful for DAta Analysis. Sure it may not be as fast as some others, but once you get over the syntax being a little different than some others (indents vs brackets), it’s really fun to write in.
What about it do you not like? I personally prefer the structured look of languages like JavaScript with the curly braces because it makes it easier to follow but at the same time I think Python is so damn clean and simple looking.
I hated Python when I first started it, my reason also being the syntax. Now, 7 years later, it's my go-to language for most projects. The syntax is comfortable, easy to read, and easy to write. Most aspects of Python are carefully designed with the developer in mind. People that dislike Python "because syntax" haven't likely done a full project in it. Give it a chance and it might win you over.
Drama queen vs king of the hill.
I've taught 5th graders Pyhton and they *never* struggle with whitespace.
Hi /u/Galway2019, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt; Drama queen Good point, I totally forgot this saying existed. Haven't heard it in years haha, kind of feels like it died out in the 2000's
The point I made was about the keys... so I don't understand your reply.
It's not just raw performance where Python trails other language implementations. Python also lacks a good concurrency story, which arguably is a worse problem in this day and age. Things are getting better with AsyncIO and friends, but it's nowhere near as mature as what other languages have.
What are you working on that needs to last 10 years? Genuinely curious. I’m working at a company that’s about 10 years old, and any code we have that is that old is considered technical debt at this point.
Lol funny how such an innocuous word choice already attracted three whiners
I'm just giving my experience. It appears my experience is very isolated. &amp;#x200B; Note, that I'm not saying "don't use Python for X reason", I'm just saying why I don't particularly like it. The whitespace is not the only thing.
Yet I still see it happen. It's not an argument, it's literally my experience seeing people use it. &amp;#x200B; I acknowledge for a lot of people, they love this aspect of Python.
PHP is the king
Amen.
I think Python and JS have done a great job at similar things. They've been robust tools strongly supported and expanded by a passionate community for a wide range of applications (JS this sub already knows, but Python has grown into almost every avenue, including the growth of things like CircuitPython). Beyond this both have a rather active community at getting people started using each, which means a lot of first time programmers are learning these languages and running with them.
&gt; So many times I've seen people and myself bitten by incorrect whitespace, and confuse beginners. I found it super easy because the required formatting was how I was going to do it anyway (coming from Java and C). But if you are used to a slightly different convention, I can see why you'd dislike it.
Same. I'm interested in trying bython for that very reason.
I believe he was giving an example 🤷🏼‍♂️
Same idiots who can't stand to hear about triggers and safe spaces
To be honest there is one factor which heavily impact how successful JS is: - it's the only thing you can choose when you're writing a web application Because of that it's a frequent *secondary* language used by a ton of people. Of course there are projects which use JS in the backend, but the statistic here is I think heavily skewed because of the front-end issue.
Obviously. The exact number is irrelevant. Fine, what about 8 years? 7?
And how is Javascript’s concurrency story?
Python is also taught in a lot of universities. A common saying about python is that Python is the second best language for everything.
Hmmm You can pop up an install button (see [https://wavemaker.co.uk](https://wavemaker.co.uk) ) If they haven't installed yet.
I think part of why you are being downvoted is because it's a bit of a tired / uninteresting opinion.
Used it for a project never grew to love it, but I don't hate it either, except for list, I hate list.
Java can go die in a fire
The real attraction is the whining about whining :P
Old code runs fine. You’re definitely right there. But to say there’s not a schism in the JS community is not accurate. If you want to take advantage of new features you have to add a build system on top of what you were already doing, so theres most certainly a cost to it.
Saying JS will work 10 years down the line is absurd. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript#Cross-browser_JavaScript_problems Between browsers changing or straight up dying (plus the above links) using JS as an example of a language that doesn't change is terrible. All languages grow and change. The 2/3 change was [completely necessary](https://snarky.ca/why-python-3-exists/).
Front-end hoard is moving to more lucrative ML jobs
The context was we were discussing Javascript libraries. We're not talking about responsive layouts, we're talking about the performance of applications. The context was the comment I was responding to.
What do you hate about list?
Lmao is this what JS devs think of Python? Python 2 is still compiled and works fine. That came out 16 years ago. And I guarantee, half of your packagelock will disappear within 3 years. The whole thing is that Python 3 is safer and more optimized, it was not a backward breaking update.
Between having non-blocking IO, and having decent abstractions for futures in the form of promises (and more recently async-await), it's actually not too shabby. The single-threaded event-loop model is rather similar to what asyncio implements by default.
JS changes, but the changes are always backwards-compatible. New JavaScript doesn't always run on older browsers/Node environments, but old JS code will always run on future browsers. So it's not absurd at all to say that current (standards-compliant) JS will work 10 years down the line - it's part of TC39's mandate to ensure that this is so. This is why smooshgate happened.
I've worked on a 15 year old code base. It will continue to run at least 5 more years. Probably longer but I can't tell what happens that long in the future. It's a system for a large retail company you've heard of. Web dev often has very short life cycles. But in a lot of other areas code is expected to just keep working like it always has. There will be new requirements as business change and new laws come into action. So you update those areas that gets affected. But there is no need to rewrite the other 99% of the system. It should just work as before.
&gt; it's the only thing you can choose when you're writing a web application It will be interesting to see what WebAssembly does to the landscape in the upcoming years.
java != javascript
Lol, I worked in a procurement system that was already legacy when I joined and did maintenance and added features for at least another 5 years before it was replaced. It's better to write stuff to last, you never know.
jfc, that title hurts
const game = new VirtualRealityGame(); game.start();
Banks, Insurances and Governments got alot of stuff that is way over 10 Years old. I got a good friend who works for a big insurance company and works mostly with ancient COBOL code. Never touch a running system i guess?
Hi /u/Dextersgrownupbeard, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
FWIW I totally understand. I made a newbie mistake and didn't read the sub's guidelines. Thanks for pointing it out, because now I know where to go with my questions.
"it's the only thing you can choose when you're writing a web application" If you want something that is interactive like a native app then yes, otherwise you can always go "old school" and use JSF, PHP or some c# (aspx, not sure what the framework is called)
Awesome, thanks man!
I got a possibly controversial question: Why would anybody pick Python over Node? I don't mean pip over npm or anything like that. I mean the actual interpreter/JIT implementations of Python and Node(V8). As far as I can tell, Python is just painfully slow compared to V8. I know you can hook into C libs but you can do that with Node, as well.
well you can also compile python for better performance, right?
I wouldn't necessarily trust anything in this report, but [here](https://imgur.com/0P8J5aD) is the chart of interest.
Amen to that. I've seen so many libraries - even popular ones - that can't quite be bothered to explain _what they do_ and _how it will help me_ on their home page. Here's an example: https://www.meteor.com/ &gt; The fastest way to build JavaScript apps How does it make it fast? What does it speed up? Development? Testing? Packaging? Deployment? &gt; Meteor is an open source platform for web, mobile, and desktop. Okay, it's a _platform_? Everything calls itself a platform these days. *What does this platform do?* &gt; Meteor integrates with (a series of logos you have to recognize because they don't have any hover text and they don't link anywhere) Okay, it integrates with stuff... *How? Why? To do what?* &gt; Ship more with less code That's what *every* library is for. How does *this* library do it? &gt; Build apps for any device Most JS libraries can be used for multiple devices these days. How does *this* library help me do that? &gt; Integrate technologies you already use Yes but *why*? If I have a bunch of technologies I already use, then *why would I add this one?* &gt; Companies using Meteor: (another series of logos) Ooh, IKEA's using it? It is helping them make furniture? *What does this library do?* &gt; Built with Meteor (sample app) Okay, it's an app, *how is Meteor actually helping this app? What is it doing in this example?* ... and so on. Nothing on this page gives even a hint at what Meteor actually does or why anyone should use it. I've even heard it's pretty decent, but if I have to dig into the developer documentation to even figure out what it does, I'm not using it.
I think you can compile it to executable binaries but does it improve the performance?
I think your misunderstand the purpose of the sales pitch. The purpose is to convince people who are already using to use it. Obviously they already know what it does, so no need to explain it to them.
It's an alt account of this guy: https://i.imgur.com/aOU71Lu.png He got *really* upset over this very topic. That's why he made this all about semicolons again. Well, I'm not mad. Just disappointed.
Part of your CI/CD pipeline should be a build step.
&gt; Its also fast. Numpy and pals have their cores written on C and highly optimized Fortran. I mean, that has less to do with Python itself and more to do with the languages embedded into it, yeah? It’s not like C bindings don’t exist in most other languages.
[removed]
Thanks, I totally disagree with the assertion that my post was low effort.
Got it, thanks. And thanks so much for your contributions and generosity.
No because python isn't truly compile-able, those executables are basically just zip files. I mean, there's pyc files but those are only for parsing optimizations rather than runtime. But I'd pick python over node for a backend app for a few reasons, most of which is strong (not strict) typing which can help with a lot of api requests that can send you absolute garbage data. Plus, node might be fast because of v8, but nothing is going to be as slow as the network calls so it's not super relevant to bring in cpu performance in my experience. Ram usage is a much better indicator of things imo, but that usually depends on how you write your application anyways.
What I meant is that once you manage to make all objects that have the same content have the same pointer (memoization can help with that), you can use the pointers as keys. Also we have to be careful with memoization if we are serializing the objects as keys, because most of times it is way more CPU and memory expensive to serialize the objects than to execute the function. Also, if your functions are always called with the same data types, and called a lot, Chrome optimized that function greatly, so in that case would be a good idea to benchmark both memoization and no memoization.
I don't know how relevant this is in 2019. All framework routing libraries use &lt;a&gt; tags for links. Server side rendering and static generation remove the issues of the site not working without JS enabled. JS isn't the problem here. Also this post is from 2016, things have changed a ton since then.
Preinstalled on a lot of machines, it’s what they are teaching at school, and low barrier of entry.
Yeah, in retrospect, I guess I did just make noise :D Whoops!
You probably want to use `Promise.all()`.
How is it fast? If you look at benchmarks, it's performance matches Ruby more than it does JavaScript https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/node-python3.html
You've got a lot of issues here. The first is that you need `async` on the map callback because that is the function using `await`. You actually don't need it for `processUrls` because it doesn't use `await`. Also, in `processUrls` you can't return `const data =`. You can simply drop that entirely since `data` is unused. But what map returns is also an array of promises, and you might instead want to consolidate that into one promise which resolves to an array of your values. To do that, you can use `Promise.all()`. But even then, when log when called (which you're not doing correctly in the console.log - you're missing `()` and not passing in `urls`), you're still getting a promise and not what loaded. So you either need to use a `then()` to log or `await` inside another async function containing your log. const urls = [ 'https://jsonplaceholder.typicode.com/albums', 'https://jsonplaceholder.typicode.com/users', 'https://jsonplaceholder.typicode.com/posts' ] const processUrls = urls =&gt; { return Promise.all(urls.map( async (url) =&gt; { const res = await fetch(url); const processed = await res.json(); return processed })); } processUrls(urls) .then(console.log)
Thank you! If you wouldn't mind... How would I want to include a `try catch`?
Yeah, what u/stuckoncoboldlevel said. This is off the top of my head, but it should work. const getUrl = url =&gt; fetch(url).then(res =&gt; res.json()); const processUrls = async (urls) =&gt; { const [albums, users, posts] = await Promise.all([ getUrl(urls[0]), getUrl(urls[1]), getUrl(urls[2]) ]); return { albums, users, posts }; } processUrls(urls).then(res =&gt; console.log(res));
Accurate.
That would probably have to go around tour call to `processUrls` at which point you'd want to put that in an `async` function. // ... async function main () { try { const data = await processUrls(urls); console.log(data); } catch (err) { console.log(err); } } main();
If you know all the possibilities, you can use if statements. Or, you could pass in a callback, and have the function call it at the correct point.
THANK YOU. I don't want to sign up for something just to see the report... or whatever that website wanted
&gt;Plus, node might be fast because of v8, but nothing is going to be as slow as the network calls so it's not super relevant to bring in cpu performance in my experience. Good point.
You don’t use YAML?
YAML uses white space very similarly
Development often has nothing to do with performance. Do you want to spend 2 more month for a bit faster product or pay $10 more on servers and get dividends faster? In US it’s not a question,and if performance is critical it wouldn’t be js anyway - more likely cpp or golang.
What a weird hill to choose to die on. A fascinating combination of being a complete asshole with being totally wrong.
I like typescript because each commit seems like a meaningful migration from the previous commit. Though that should be the case with any project, it seems that building that type-safe foundation each step of the way makes future work on the project more fluid.
Why not do: const isPerson = (p: Person) =&gt; { if (p != null) { return true; } throw new Error('Not a person'); } if(isPerson(data)) { /* data is person */ }
&gt; If you build a library please explain every paint point it solves What if it's an ink point tho? Or a 12pt font?
thank :D
I'm not seeing the code, where can I view the code?
This is really cool. Note - you spelled 'Disabled' wrong in the component showcase for wired-combo.
Check the Source Code section.
I've been using [easy-peasy](https://github.com/ctrlplusb/easy-peasy) which is a wrapper around redux that feels like mobx. It has pretty good typescript support. I don't really have any complaints, boilerplate seems to be pretty limited, but it's opinionated so you can't step to far away from convention.
Well, no he has a point. Meteor is trying to sell itself to new people - not current users. So the meteor homepage is targeting who? A CEO? A Graphic Designer? Accounting? HR? or the developer? If they are targeting the developer then they should at least answer a couple important questions or include a basic summary of the system. &gt; Meteor is an open source platform for web, mobile, and desktop. ...that enables you to prototype quickly and provides SSR, instant push updates, and magic unicorns. Meteor handles routing, isomorphic components, database migrations, and other tasks for you so you can focus on your application. (I'm not sure about all this, just guessing). Compare Meteor with https://nextjs.org/ which does a much better job explaining it's useful ness. - Server Rendering React - Styled-jsx included - Zero Setup - Automatic code splitting - filesystem based routing - hot code reloading - universal rendering. - Fully Extensible - Complete control over Babel and Webpack. - Customizable server, routing and next-plugins. - Ready for Production
I think he's saying that if you use a 3rd party js library that doesn't have type definitions, then you don't get any checks on that code. Your interactions with that code are not type-safe. Your code is typescript, but the other code is not, and is not treated like typescript either.
It used to be incorrect to nest things like divs inside of an &lt;a&gt;. With HTML 5 though it became okay to put block elements inside of inline elements like this. I know many people still believe it isn't okay to do this.
Oh that makes sense, it was a little odd going into a repo page and the repo itself being empty and pointing at other pages.
This is based on the premise that dev time is shorter on Python. Do you have anything to back that up with?
Yeah, that’s fair. However, it serves as the entry point for all resources related to Webcodesk
Are you the author? &amp;#x200B; It's a neat idea and I like how the color itself is generated but I'd recommend creating the DOM elements via the document API instead of using jQuery's HTML function and passing along strings. &amp;#x200B; I'd also suggest fixing the formatting of the code because it's a bit hard to read without indentation :)
Needs to `padStart` to ensure 6-character hex strings
Seriously... had me wondering what was in first place. I guess we're just changing the meaning of words now.
Hey, no hard feelings. It’s the matter of preference and personal knowledge of the tooling, I’m sure there are guys who may pull products really fast in any language. I haven’t even use python for rapid prototyping on real world tasks, my choice is ruby and it feels several times faster than anything to bootstrap things, and then support them. As for js I would consider debugging as the main disadvantage but with TS and async/await it should have become much more nice to deal with.
Came here to mention Meteor too. For me it's am example of one of the worst landing pages to describe a product. You could read thd whole page and even as a developer have no idea what to use it for.
Same I used to code c++ only and hated javascript and python, now after working with them for a couple years I learned to love them.
Not sure if you could or not, I wonder if you could use the wiki feature.
I use StackShare frequently to keep up with trends. It currently labels Python as the language with most active job postings. Is this accurate? (For example, I feel like they way underrepresent the amount of C# postings.) Is there a more accurate tool that measures job postings for any given language (as opposed to using, say, Github to measure a language’s popularity)
That is very interesting to hear! I understand the connotations you use as examples here. In my locality however, "Queen" is usually used to imply "impetuous top of the social pecking order" while "King" is usually used to imply "disconnected/out-of-touch dictator." Both are commonly used, and both are generally negative, but the negative connotations with "Queen" are less than the negative connotations with "King." "The Queen is dead! Long live the Queen." vs "The King is in his castle, again." "Prince" and "Princess" seem to be on fairly equal footing, though, and both can be used to suggested parental adoration and/or snottiness.
Libraries. Python integrates well with libraries implemented in system level languages (C/Fortran) so using libs like SciPy and NumPy are going to give you performance far greater than a kicking fast node.js interpreter. It also has certain well-designed, mature libraries that JavaScript may not have the equivalent of, having had the advantage of its library ecosystem existing over JavaScrpits. SQLAlchemy (ORM) or Pyramid (Web framework) don't have equivalents in JS AFAIK.
&gt;Hey, no hard feelings. I don't have any. I genuinely wanted to know, since it was a fairly bold statement.
Nearly every bank in Germany works with cobol
&gt;Libraries. Python integrates well with libraries implemented in system level languages Node.js has those too. They're called native modules. &amp;#x200B; &gt; QLAlchemy (ORM) or Pyramid (Web framework) don't have equivalents in JS What? I don't know the intricacies of QLAlchemy and Pyramid but there are plenty ORM's and web frameworks for Node. Koa, Express, Loopback, Sequelize, Mongoose, and more.
Is this yours? Just wanted to say that the pop-up appears twice, once from the top down and once from the bottom up. Also this site looks awesome
Yeah, the sad life of a team lead XD. However, this is just one thing. The main reason is that this kind of book is not just a book: this is full of wonders and interesting territories you would like explore and spend some time it. You'd like to try these out, build a new toy, play with it, compare it to your well known solutions, try to break it, find its strengths and weak points. There is no point to just merely read this book. Exploring it, however, requires a hell a lot of time.
Thanks yup it's mine. Main site is https://wavemaker.co.uk has more info about the app. That URL is so I keep the site and app separate . It's actually not 100 yet. Was built will plain JavaScript CSS and HTML. Using vue.js and firebase for next version
It really depends on your standpoint. If it’s genuine curiosity, the best you can do is to check your own productivity with two tools after you reseArched both well enough. Writing, debugging, deployment, ability to read and understand your code after a week, writing DB migrations, using RBAC and other basic tasks. If you want a more theoretical answer, js still has a bunch of drawbacks on server side land: readability, tooling (gets much better later on), for me - lack of consolidation so you’ll have tens of half-backend libs with rather poor documentation instead of a couple polished ones. And you are probably still limited in orm’s for DBs when it’s not a Mongo. If you come with “all hail js”, the only argument one may know it and not any other suitable language is already enough. When js is the tool you know the best and you have to dish a product here and now - there is exactly no reason to learn other languages.
Agreed, Python itself is pretty slow, and is unlikely to get much faster due to its design, which prevents many optimisations. But it has excellent FFI capabilities. You can do your hot loops in C and C++, and the rest of the plumbing in the pleasant world of Python.
Yep someone already filed a 'PR' for it :)
Python is a great language... it’s pretty simple if you understand the hiccups and you can do everything you’d do with Java in Python. You can also write wrappers with lower level languages to optimize code.
When I first saw it I thought it might be intentional, as it kinda went along with the whole theme.
Yes it does, but I don't see it behaving lazily in this example. I'm pretty sure the for-of will just call next repeatedly and synchronously until exhaustion.
I ment where speed is essential, python has numpy etc. Thats why it dominates in science and reasearch. Fun fact, python was used to take the first ever pocture of a black hole. Compare python to other fields, like webdev speed is usually irrelevant because its 99% waiting on IO.
It's not 'orders' of magnitude slower. Modern js vms re-optimize based on usage and get sometimes within ~2x of C++; it typically sits between 3-10x depending on cpu hot loop. Python is generally decent, but has a few cases where it is even 31x slower than node.js on same problem (~100x c++). See https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/node-gpp.html.
In this case yes it would be equivalent but then you could also use it and break out of the loop or whatever and in those cases being lazy would be better.
I want to do this, but am struggling with the best way of getting the built assets from the CD pipeline to the server. What are good ways of putting the assets in a place where the client browser can get them?
Unions aren’t perfect, but why should I, as a developer, care about stifling company growth?
Yeah it's really starting to get to a point where I'm comfortable with basic stuff but now we're working on a project that requires a bit more advanced skills and I'm lost again 😂 It's just not so scary anymore
So what is the king
Hi /u/bapugraphicsins, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/misterhtmlcss, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/atubofsoup, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
It seems a pretty binary concept to me. Are you trying to access a value that was declared, but never defined, or a property on an object that hasn't been defined? \`undefined\` it is. When you need to manually set a value to "empty," \`null\` is more appropriate. What would your argument be for three?
Let's talk about numbers.. Python has arbitrary length integers, integers, doubles. Numpy is widely used and successful. On the other side, every number in Node is a float64 and you can't do any serious math (scientific or financial) in node. At least for that reason python is easier at prototyping algorithms. Non believers please try `0.1+0.2 == 0.3`
As a Java developer, I'm genuinely curious why you say it is a gross development environment. I work in a mostly enterprise setting with complex business logic and I still feel Java is a right fit for these kind of back-end applications. We do use different JavaScript frontend frameworks, but our REST API and back-end is written in Java using Spring boot.
It depends what platform you're using, but static assets should go somewhere like S3 or GCP Cloud Storage.
But you still have the code and need it to work despite considering it tech debt, therefore you need it to last that long.
&gt; Lol you literally argued in favor of social justice How is that? I think you must be confused. I'm simply stating how the language works... "Social Justice" is obviously nonsense as it is commonly used. Equality is the only real justice, not new forms of inequality.
&gt; "Prince" and "Princess" seem to be on fairly equal footing, though, and both can be used to suggested parental adoration and/or snottiness. In most examples I can find, "prince" is used mainly to connote "selfless" and/or "diligent".
Assembly
I switched from Python to Node for all development work that doesn't require raw speed (I use Rust for those problems). There are many reasons for this, but it boils down to these points: 1. A much more coherent project management structure. Long before Guido stepped down, I had serious issues with how the 2/3 schism was handled. I easily moved my codebases to Python 3 and had no problem with the changes to the base language. However, the fact that I had to worry about it at all made me concerned. I watched as the Perl community dissolved when Perl tried the same thing. I was worried that Python would go down the same route. While that didn't happen, the fact that it's a decade or so later and we're STILL discussing the 2/3 schism shows the epic fail of breaking a language in widespread use. The current management of JavaScript has made guarantees that the language will support all code written in the past (even if that code contains deprecated features). 2. And here's where I'll get into arguments with people (though I won't argue on this thread)... While both languages are basically "single threaded", JavaScript's async/await semantics are much more mature and performant that Python's methods. Also, worker threads in Node have just dropped their experimental flag, but have been usable for quite some time. Python has never, and I feel WILL never, have proper threading support due to the management's insane dedication to the global interpreter lock. &amp;#x200B; 3. Node is faster. Hands down. Faster in every way that matters to me. And with each release it gets faster still. There might be some edge cases for math-based libraries where Python might have an advantage, but I can get the same advantage in Node with the "ffi" interface if I ever need raw calculation performance. But as a database/front-end developer, I doubt that case will ever occur. (And if it did, I'd use "ffi"/Rust to solve it.) &amp;#x200B; 4. This is a small thing, and a personal thing (thus NOT objective)... I hate, hate, hate, hate, HATE Python decorators. I hate their syntax. I hate their use cases. I hate the people who put them into Python (yes, Guido, you too). I've found no instance where they helped me code more efficiently, and because I had to deal with them in seemingly EVERY SINGLE LIBRARY published for Python 3, I found myself grinding my teeth to the nub every time I coded in Python and had to use one of these libraries. Whomever thought of decorators should have half his life removed, because I feel like I spent my life dealing with this abortion of a concept. (Yes, I'm rant-y, but DAMN I hate decorators.) JavaScript's closures are 1000X more intuitive and useful. &amp;#x200B; I programmed nearly exclusively in Python since 1995. I switched to Node in August of 2018 (when JavaScript with ES6 finally became useful in general-purpose coding). For all those years, Python (warts, decorators, global interpreter lock and all...) was the best programming language I found. Now Node has that distinction. To be clear, though I coded exclusively in Python, my college education (had a long career in coding before formalizing my credentials with a degree) was on the .NET stack, and I thought C# was pretty damned good. Before 1995, I was exclusively a C/C++ coder. Before that, Pascal... I've had a long career... Other languages I've tried and discarded: Perl - Uggh... special characters everywhere and completely unmaintainable code. Ruby - A more maintainable Perl with proper Object Oriented ideas. But still a dumpster fire of "special characters". PHP - More than one large-scale professional projects were done in PHP. If Python and Node didn't exist, I'd choose PHP. But only MODERN PHP 7.x+ Java - Whomever invented this language should burn in hell. It is simply the worst modern programming language ever designed. I honestly think it was designed by a sadist. The boilerplate you have to code to get ANYTHING running is beyond unimaginable. It's proof-positive that pure Object Oriented programming was never the way of the future. For years I wanted to do Android development. The fact that I'd have to do it in Java made me ragequit every time. Kotlin ain't much better. Assembly Language - Motorola 6502/680x Assembly was a dream. 6502/680x went away. AMD64/Intel instruction set and memory management drove me mad. Stopped coding in Assembly Language in the early 1990s because C (and Pascal) could do everything I needed it to do, and it abstracted away any need to dive into the Lovecraftian Intel/AMD64 instruction set/memory management. COBOL - If Java is bad... COBOL is the Adolf Hitler of languages. Anyone associated with designing this language should be neutered so they don't breed.
Python 2 is EOL at the end of 2019. Going forward there won’t be the version compatibility schisms. So that will be one less negative for python.
Thats why I am focusing on JS and learning Python next.😁 #react #node #mashinelearning
Not Javascript
[https://github.com/thismustbekirk](https://github.com/thismustbekirk) &amp;#x200B; No it is not a joke, yes tell me what projects can get me a React job. I have the skills and knowledge but I can't get an interview that doesn't require experience I don't have. &amp;#x200B; I am currently getting a math degree but I don't think I can take another year until I pay off my loans. 40k, please help me.
Hi /u/burnthisnameafteruse, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
To be fair, it's pretty damn powerful without combining it with R...
Yes this is my hunch... That because it comes with Linux it's popular
 I'd just like to interject for a moment. What you're referring to as Linux, is in fact, GNU/Linux, or as I've recently taken to calling it, GNU plus Linux. Linux is not an operating system unto itself, but rather another free component of a fully functioning GNU system made useful by the GNU corelibs, shell utilities and vital system components comprising a full OS as defined by POSIX. Many computer users run a modified version of the GNU system every day, without realizing it. Through a peculiar turn of events, the version of GNU which is widely used today is often called "Linux", and many of its users are not aware that it is basically the GNU system, developed by the GNU Project. There really is a Linux, and these people are using it, but it is just a part of the system they use. Linux is the kernel: the program in the system that allocates the machine's resources to the other programs that you run. The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system. Linux is normally used in combination with the GNU operating system: the whole system is basically GNU with Linux added, or GNU/Linux. All the so-called "Linux" distributions are really distributions of GNU/Linux.
I work for a company that's still got some legacy code from nearly 8 years ago. We're a small team and there's got to be close to a million lines of code. I'm not planning on re-writing it anytime soon
This is one of the most rewarding things I’ve read about my work in a long time. Thank you.
Hi /u/burnthisnameafteruse, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I have no issue with Java... But imagine if you used node is on backend. Then you wouldn't have such a duplication of effort, you could share code across tiers, you can align processes across tiers etc. Win win.
I've found my spirit brother
Most people eat at McDs?
It’s 7:53am and I’m on a crowded train laughing my ass off at your comments 😂 This is great. Reminds me of those comics that would depict different programming languages.. I’ll see if I can find it.
Hi /u/locksta7, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Project Page (?): https://github.com/wybiral/code-art *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Doesn't really work on mobile though (no favicon)
Some important guy at Google said Python was cool 10+ years ago and people got on the bandwagon. The reality is that it's pretty trashy nowadays. For example, I'd take Typescript over Python any day of the week now.
JS is backwards compatible to a degree which is actually beginning to cause friction within the development community. I've heard some calls to begin 'modernizing' the language with all code stuffed in ES modules by way of example.
With you. Fucking hate the syntax
Cheerio was designed for a server-based implementation, in this case, Node.js.
I think Node will begin to eat it's lunch there. Web scraping with Puppeteer and MongoDB is awesome.
Uh no. It's not orders of magnitude slower than other compiled languages lmao. Node JS will bloody many such languages in a fight. I'm not saying it will win but it goes down punching.
Favicon is a black box on Firefox 66.0.3
The project is essentially scrape the HTML of various movie theaters' sites for movie times/information, take the recovered data and make a nice looking table that displays the movie times chronologically. It seemed odd that JS would need an 3rd party library to parse retrieved HTML so cheerio very well may be overkill! Also as I forgot to mention in the original post, I am also using the project to learn typescript!
That's just utter bullshit. Just take the module system »schism« as you call it. Runtimes doing their own thing because they can, all over the place. None of those fools was giving a flying fuck about specs for decades really. Node 12 got released this week and all you get is mjs without a flag. Come on now. Also without babel which is a) a completely TC39-independent effort (thats The Language, as opposed to Node, which is a fucking opinionated runtime environment) and b) does actual fucking transpiling a language from a version of itself to another version of itself, the faster pace that implementors actually were able to pull off recently, would have never been possible. And I'm not even talking about the fact that 99% of the JS ecosystem is hosted (some would say owned) by a private corp. Or the node/io bullcrap that went down couple of years ago. If you wanted, you were perfectly able to ship python code that was compatible with 2 and 3 (six), but I bet you've never heard of that, because you spent your last couple of years setting up backwards-compatible webpack setups to get the latest hottest »language«. Transpiling is the JS word for backwards compatibility. I really do love JS, the language and the madness that comes with it, but shitting on Python for what it is and how it manages transition is really not appropriate, especially coming from a JS perspective.
How’s 2nd grade going?
You looked at https://deno.land and how ry is suggesting package management should be..
You talked about inherent biases in things like language. The whole idea about social justice is correcting systemically entrenched biases and prejudices. You even agreed with it under a different name...equality. It’s a shame that some take it too far and that the internet has memed it to death and distorted it somewhat by focusing on the extremist outsiders.
I'm kind of glad you're not my boss.
Hi /u/code_help_only, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
How's not being in touch with Node.js performance going?
Buddy of mine (who hates JavaScript) was trying to convince me that C# was going to take over everything. It was hard not to laugh.
Hi /u/chrisfmack, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
If you're going to do http requests directly from the browser, why not just use fetch()? It's so simple.
What was your issue with the syntax? Lack of braces?
*cough* async/await
You haven't been paying attention.
See a Black Box - Linux Chrome Version 73.0.3683.103 (Official Build) (64-bit)
See a black box for both browsers I run (Linux) * Chrome - 73.0.3683.103 (Official Build) (64-bit) * FireFox Quantum - 66.0.2 (64-bit)
Only reason was that I had heard of Axios and found good things about it but I had not looked into fetch! I will now :)
&gt;Java - Whomever invented this language should burn in hell. It is simply the worst modern programming language ever designed. I honestly think it was designed by a sadist. That's not fair, Objective C ...
&gt; The whole idea about social justice is correcting systemically entrenched biases and prejudices. Isnt that presumptuous? What if the language biases are there for a reason? Its possible that boys have more fragile egos or something. &gt; You even agreed with it under a different name...equality. I'm my experience, social justice is the opposite of "equality". Its more like enforced bias. Introduction of biases using coercive is not equality, its the opposite of that. For example: lowering physical standards for female firefighters, and docking SAT score value for asians. These are not equality, these things are biases. &gt; focusing on the extremist outsiders. Sorry, no. "equal opportunity" is fairly mainstream. It is government enforced racial bias. Thats the thing we should be fighting against, not entrenching. &gt; I don’t want to paint all social justice as it’s currently used as a bad thing though. It had a chance to be good in the early days, but discarded that sometime in the 60's. Real civil justice leaders were assassinated, new sleazy ones pushed, and now we have worse inequality than ever before. SJW is cancer.
Honest question wrapped in triggering verbiage: how soon can we expect JavaScript to FOAD after Web Assembly is fully working?
It's easy to read and quick to write scripts/basic automation in. I use it to tie together different tools and APIs all the time
Agree about Java. Not about Go.
I too hate JavaScript and love C#. Someone saying any language will take over is hopefully hyperbolic. That said, JavaScript is all over the damn place now. C# is definitely growing, and the language is being actively improved. Unity, Xamarin, and .Net Core are greatly increasing its footprint. Also, we had async/await back in 2012
I would look into learning some basic SQL, then you could use a node backend and something like MySQL as the database. You can use a library called sequelize to make querying and relation mapping a little easier
Curious question based on the title. What’s the king of programming language then?
Little to no backend leaves you with using a 3rd party API. Is it only customers you want to track or also products? I recently hooked Shopify’s API up to a custom front end for a small business client. Very well documented and easy to use.
HTML is web accessible by default. The problem is when we web developers (and especially designers) try to get "clever".
JS holds itself back a lot for maintaining that backwards compatibility. Python decided it needed to make a change big enough to break that, but I think every expects it to only be one-time thing. &amp;#x200B; And it's easy enough. If you're writing python now, write python 3. If you're supporting legacy python, only update when the people who make decisions are convinced to invest in the effort.
Are you actually able to get the HTML for the pages your trying to scrape? I feel like there is a good chance you'll run into CORS issues here. You will probably at the very least need a server to proxy requests off. &amp;#x200B; Once you get the HTML into the browser there would be no need for something like cheerio. Cheerio is made for parsing HTML outside a browser and would be completely redundant in an environment where you have a DOM.
RemindMe! 1 hour
I will be messaging you on [**2019-04-26 03:32:52 UTC**](http://www.wolframalpha.com/input/?i=2019-04-26 03:32:52 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/bh2lnm/react_native_in_2019_beyond/elsuw6l/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/bh2lnm/react_native_in_2019_beyond/elsuw6l/]%0A%0ARemindMe! 1 hour) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Right, but that's exactly the point I'm addressing: some is better than none. I don't see how "none" is better than "some/most".
You could use https://unpkg.com/cheerio-standalone/cheerio.min.js, works in the browser :)
It's package manager and repository is not npm.
I agree, the only thing that really stood different is how the package management on the javascript side has been a disaster.
Oof. Echo chambers are what’s cancer.
I think that it just kinds of boils down to the environment provided. When you allow people to play fast and loose with a language/framework it allows a lot of creativity but it also allows for a lot of bad practices.
It’s very easy to set up a python package, I personally maintains a pip package that barely anybody use. The question really lies in the dependency hell. JavaScript packages just can’t seem to be standalone, whether that’s by choice or design, or lack of decent standard library. It is plaguing the ecosystem
Neat!
Glad that C# is still popular near java.
Python is the language of choice for all data scientists. That for sure is driving the rise in popularity, in addition to people still using it for actual web development.
Thats not an argument. I guess you arent ready to recognize the simple facts in front of you. Or you arent ready to let go of propaganda concepts like "institutional racism". Equality is when everyone is treated the same, not when some groups are given special privileges. Equality is not when groups are forced to integrate or segregate, but when they are allowed to choose who they associate with freely. At least you are out of your echo chamber, albeit briefly.
This is probably just me projecting my own biases, but it really sounds like what you like is functional languages/programming. They tend to remain consistent and have good user stories like you described because the language is the root of the power, not the compiler writers (a *very* sharp double edged sword, admittedly). Notably, language smells like decorators and annotations are nowhere to be found in my experience, for the aforementioned property of functional languages. (while python is functional a lot of programmers come into it from OO, and stick with it mightily) My running theory is really that python is as popular as it is because its first class functions give people a taste of functional programming. Many libraries like numpy derive their power from higher order functions. JS really is the only mainstream language that seems to have organically nurtured people to code in functional ways. (In hindsight its probably because its creator actually wanted to create a Scheme interpreter for Netscape instead of JS, and subtly did so anyway). If you ever get a chance, try out a Scheme (Racket is solid) or my own personal favorite Haskell. I think Haskell addresses all your concerns except the ecosystem, which I understand is a must.
I hope so, but the biggest issue I have with node in this sector is the compilation time.
I was only speaking of languages that I have direct knowledge of. ie, languages that I've at least done some toy programs with. I've never done anything with Objective C (due to the fact that I try to avoid anything Apple-related). So I'll just take your word for it...
"Python is the second best language for everything"
C is the best programming language
honestly I think with languages like python and golang, the time spent isn't actually writing code; it's reasoning about what you want to do. Writing the code isn't the time consuming part.
I cut my teeth on Atari Basic in the early 80's. I moved on to 6502 Assembly due to my desire to create games. Then, for a job I lucked into (and was not qualified for), I did some mainframe programming in Pascal (which was popular in the late-80's). Then I moved to C as the "Object Oriented Revolution" was just getting into its stride. The very DNA of my coding preferences is functional programming-like (from my "C" days), and the reason I have great affinity for Rust is due to it being the spiritual successor to Pascal (though the syntaxes of both are VASTLY different, the goals of both are identical). I had my "college-like experimentation" phase where I did all my coding in the OO style. And I still think that OO has its place. I even use ES6 "class"-es in preference to the long-in-the-tooth prototype method of old JavaScript. But, approaching my middle-years and knowing all to well the lesson of, "If all you have is a hammer, everything looks like a nail", I've grown into a "right tool for the right job" of picking and choosing where I code in functional style and where I use OO... often in the same software. Python and JavaScript both allow for that flexibility of using different coding techniques within the same code base. I hate Java so much because it forced me to only code ONE way regardless of the problem I was trying to solve. This often led to huge code bloat and torturous internal code logic. Before I tried out Scheme or Haskell, I'd probably want to learn LISP. But realistically, for my professional work, I must stick to learning those languages and dialects that will improve my chances of employment. Considering the statistics on this thread, it looks like I chose well when I chose to go first down a Python path, then a JavaScript path.
just because python 2.x is no longer supported doesn't mean it breaks. people still work on shit running on old .net servers for years and years after end of life service is declared.
Finally someone who agrees with me.
don't FUCKING apologize fo anything.
Seems like an easy challenge
It is ☺️
Verilog
No, see, you have some good points, but then use binary, non-nuanced thinking on others. The kind of stuff you fall into when you watch too many “SJW PWNED” vids on youtube. Was hoping for a more nuanced discussion, but you’re either extremist on one end or extremist on the other. I don’t have a team or dedicate myself to either bubble. If you don’t think institutional racism is a thing, you’re sadly lost and just another non-nuanced extremist on a politicized team.
x86 Assembly
That's refreshing to hear. I'm used to discussing with web devs who've never touched Assembly. Something about it just can't be taught in any other language. To humor the conversation, Rusts type system is directly influenced (if not directly predecessed) by the Hindley-Milner type system, which is the big draw of Haskells power. Going further the first real implementation of object oriented programming by Alan Kay was in lisp. The language (and paradigm) was so powerful an entirely new paradigm emerged from within it. He had no need to write a compiler to begin meaningfully prototyping what would become the de-facto standard for OO, Smalltalk. Of course, you've mentioned you're already very comfortable with functional programming, so if you're ever in the mood to try out a meaningfully different languages, try out Haskell as opposed to a Lisp. It's got strong purity, a state of the art type system (countless PhDs have and will continue to be thrown at it), lazy evaluation that rewards rather punishes true functional programming, and an ecosystem that lives and breathes functional programming (few Frankenstein hybrids of OO and FP to be found, a rumored problem in the Scala community). It's like a foreign immersion program for pure functional programming.
You may need to interact with the page (try clicking on the body of the page). It relies on an autoplay video.
I think package selection is kind of a tradeoff, like real life. Try to take the fast and cheap way to your goal, you'll be bombarded with bad surprises and probably fail. Take your time with your options, and you probably get there, albeit slowly and painfully. Gather a group of people, use some good known tools, and make most of it as a team, you'll get farther than you thought with the fewest headaches.
&gt; If you don’t think institutional racism is a thing, you’re sadly lost and just another non-nuanced extremist on a politicized team. And you are an enlightened centrist who is not in a bubble? I wonder if you realize how embubbled you really are. "institutional racism" is the argument that it is impossible to quantify or detect racism, so instead of equality of opportunity, equality of outcome should be measured. It is a monstrous thought. Its the logic that smart people should be docked points on test, that weaker people should get lower targets for physical work, and productive workers should be taxed so make them earn the same as less productive ones. Its the phenomenon happening now in NC where they release dangerous criminals or fail to prosecute if the jail population demographics are off target. It is cultural communism. It is a full out assault on equality. It leads to the death and destruction of society, like that seen in venzuela today. Its insanity, and if you believe in it, you are so deep in a bubble that the reality outside may look blurred and scary to you. There is nothing extreme or politicized about facts and logic. If you find yourself unable to argue or reason, but refuse to agree or even engage your mind, then what you are doing is retreating back into a bubble. Both morality and fairness should day that government should be color blind and gender blind. Isnt that common sense? I do acknowledge that you at least peeked out of your bubble long enough to have a polite conversation. Good day.
TIL
Then why bother writing a post about it?
Do you need a persistent connection?
I don't. I just want to be sure I can get the data to my servers as reliably and easy as possible.
Unfortunately, it doesn't seem to be gaining enough to surpass it.
I prefer Machine Learning for problems like this. Train your model on all the phone numbers in the world, then plug in your array of digits and sit back and relax!
yeah, I was being sarcastic. But the way many just assume you already know what their library does really makes it seem like they are trying to sell in their product to current users. Which of course makes no sense.
Another approach is StackPhone. Post your question on Stack Overflow, then wait sixty seconds and you will have a dozen replies. Most of them will be wrong. Be sure to give that lovely green checkmark to the worst answer. Why would you write code when people will do it for you?
Why not? Someone might find it useful someday. Maybe even old me 👴🏼
It doesn't help that people almost immediately ignore or dismiss any new package manager / registry that is not NPM. See: yarn, bower, pikapkg The network effect is strong and now everyone relies on a single entity which is a single point of failure for a lot of the web which is almost unprecedented. Even Cloud / hosting has options. Though, I'll still throw my hat in for Pikapkg or Deno's decentralized package philosophy.
Go to language for ML
You can "stream" the data as it happens using XMLHttpRequest as well (or any other type of HTTP requests). I.E. Send events as they happen instead of "onload" and "onunload". Make sure your server supports HTTP 1.1 with "keep-alive", so it doesn't have to re-establish TCP/IP connection for each request. That way the only overhead is the HTTP headers, which is acceptable. Many analytics platforms work like that. Websockets will probably be an overkill for this, and will bring more complications than you want. Like handling connection drops / reconnections / etc.
Interesting use case. I’ve always been annoyed by it. I don’t tend to jump around in my codebase very much, and would greatly prefer this feature to be disabled. But each to their own!
It's really slick. Awesome work!
Their docs are great now. (Webpack used to be infamous for their docs)
&gt; survey of 19,000+ developers yup, definitely JS is the queen
I understand you, the order is being messed up on each row, this is really a bug. Thanks again!
It would be nice to see opponent movement, maybe it would feel more competitive and fun to see other friend struggling :D
You’re relying on code that is 30+ years old right now, to view this page.
Thanks for the advice! Really appreciate it :D.
Oh it's not necessarily that it will, or should, last that long. It's simply the fact that if it does, which unfortunately is a thing in large corporations where bureaucracy and perceived safety rules, it will run just fine on future versions/frameworks/etc.
Bower is older than npm
True, I should have said any *other*
This webpage has fucking popup ads. What the fuck? Is this 2003?
Any option to use arrow keys? I'm from a part of the world that doesn't use qwerty, so the controls aren't very friendly.
If your code is python 2, stick with python 2 then. The latest update for python 2 is from 02 March 2019, so still maintained id say.
I totally agree. If some library using isn't type-safe, and you don't write the type definitions for it then fuck it. Your codebase being in typescript is way better than it not being in typescript.
Great with such tutorials! But I could not keep wonder: When will anyone ever need to create a phone number? :) And to top it up, the number pattern is very localized, most people in the world cannot use it, if they want to create random numbers matching their local pattern. So the outcome of the challenge is in fact completely useless :) I know the article show some principles of using basic string and array functions, and the article content itself is great - but if you are a completely newbie, then perhaps you can be confused and actually believe it is "the way to create phone numbers in javascript" or something else (there is no limit how people can misinterpret this) ...And even if you are totally aware of that article only demonstrates some basic principles, you need to "translate" the challenge to something you can actually relate to and use in everyday practice, which makes it harder to adapt or comprehend the points from the article. You could write the same article where the goal is to create a unique string or number, like a uuid-generator or similar. This would be the same, and most readers would immediately could use the code in practice and feel they have learned something new; it is even possible they would actually revisit your page after a while.
Ah yes, well done :)
Here is a better solution for you function sherlockAndAnagrams(s) { let result = 0 for (let subStrSize = 1; subStrSize &lt; s.length; subStrSize++) { const sameSizeStrs = [] for (let subI = 0; subI &lt; s.length - subStrSize + 1; subI++) { const subStr = s.substr(subI, subStrSize) sameSizeStrs.push(subStr.split('').sort().join('')) } sameSizeStrs.sort() const matches = {}; sameSizeStrs.forEach(function (x) { matches[x] = (matches[x] || 0) + 1; }); Object.keys(matches).forEach(key =&gt; { const count = matches[key] if (count &gt; 1) { result += ((count * (count - 1)) / 2) } }) } return result }
Well done!
Opponent matching as a feature request. One player initiates, waits, and is matched with an initiator.
Thanks friend, that clickbait link was not nice.
There is a Perl script that would list anagrams given the words file: for(&lt;&gt;){chop;$s{join'',sort split'',lc}.=" $\_"}for(sort%s){/. /&amp;&amp;print"$\_\\n"}
Websockets are fantastic for concurrency compared to REST, and for realtime streaming, and from a server-side perspective, they're better because the initial overheads of assigning the resources are quickly outweighed by the benefit of only having to do that once (whereas a REST request needs to assign resources again for each request). It seems like an overkill solution for analytics, but at the same time, I've seen the benefits they bring when I converted my own API and the projects that use it from REST to Websockets. The concurrency increased drastically, I could get rid of manual refreshing and provide a streamlined experience which in turn reduced the request rate being made to both my API and third party API's I interact with. For handling connections, [socket.io](https://socket.io) would be my recommendation because although it is more bulky than 'native' websockets, it provides a more robust experience like automatic reconnection, fallback to non-websockets if necessary, volatile messages, etc. The main caveat to be aware of is that you must use the exact same version of the library on server and clients. I had a lot of success with 1.7.2 on node, react, and react-native.
Vue.js was one of the most popular JavaScript libraries in 2018. Moreover, it's the main competitor to React for the popularity among web developers.
Thank you for reading!
I mean if you want it to be really simple then you don't need JavaScript at all. You could use a Google Spreadsheet or AirTable or something. But with no backend then maybe Firebase? Or search for "online key-value store" or "cloud DB CORS". Maybe even something like Azure Cosmos DB.
&gt;But I could not keep wonder: When will anyone ever need to create a phone number? Generating arbitrary but realistic data for testing purposes can be valuable. You have to be much more complex than just one string format (names, addresses, relationships, all the other entities in your model, ...) but you have to start somewhere. &gt; the number pattern is very localized The issue of phone numbers, addresses, and other such bits of real world data, having many location specific format variances, is a valid point. But for *demo* data it doesn't matter as long as it looks realistic, varies enough to illustrate how things display, and fits the pattern well enough that it passes your validation. (for *test* data you need to be careful to include appropriate bad and edge-of-good data to fully verify your validation too, and for load testing data you need to be careful to mimic data patterns such that you are realistically testing DB indexing strategies) &gt; where the goal is to create a unique string or number I'd agree that a more generic article would be a useful refinement here, though the phone number would serve as a specific example just as well as a UUID.
Yes, all of that is true. I forgot test (famous last words), this is an actual use case for generating phone numbers, I stand corrected :) All I am saying is that if and when you are dealing with such tutorials targeting completely beginners, the "abstraction level" must be very low. A person who know nothing about `substr` will most likely not have the ability to abstract the code from the problem (creating phone numbers). For many years ago i was certified Borland educator, and have held a lot of professional courses for companies, both at beginner level, advanced and "customized for the company". It was at that time people needed to learn how to use OOP, create reuseable components and so on (Delphi, about 2000) I learned that even very skilled top programmers needed real life examples to understand the new practices, and I could base those examples in the same area as the companys business. It is simply easier and more motivational if you can use what you learn right away.
Wow thank you@
Is this new behavior, isn't it? I mean afair it started in v1.33 with that completely unreadable definition selection (eg. the body of function), but I didn't see and info in release notes. I feel like "Go to Type Definition" works now more like "Go to Definition" should (I work only with JS so I don't know how it compares handling TS code) - and it's kind of strange for me, because in like v1.32 all was fine, I guess...
Data science is blowing up
One of the developers here. We worked three years to make Uppy the best open source file uploader the world has seen. Looking forward to your brutally honest feedback! Happy to answer questions too.
Maybe you use an js object which naturally always sorts by alphabet.
It’s the uploader I recommend; nice job!
browser security prevents you from accessing external iframe's contents. otherwise you could load facebook/gmail and since they are probably logged in you could read their messages/mails.
Needs auth
Cool! I liike em!
I'm a bit confused. I mean JS is all JIT so you mean it just takes awhile to run?
It depends what kind of backend you have but i think you could use Websockets for this task
[Distill.io](http://distill.io) provides such a service if you don't want to build it yourself.
Example usage: ``` echo 'hello world!' | jipe 'console.log(_.length)' # prints "13" ``` I created jipe as a little utility that I found myself craving often enough that I thought it would be worth publishing. It's great for doing JSON transforms inside the command line or for anything else that chaining together unix utilities can't quite reach, or can't reach easily. I'm fairly new to bash scripting so feel free to submit a pull request if you spot something that could be improved upon.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
I use filestack at my company. Is it fair to ask what this uploader does that they don’t?
The point is that people dropped Bower for npm
Disclosure: I'm the original author of this post.
The main difference is that Uppy is open source (MIT licensed) and can be used for free. The client is just a JavaScript include and will happily upload to your Apache server or S3. Optionally, if you need the server component: Companion (required for Instagram and Dropbox imports to work) you can install everything on your own servers. That may or may not be desirable for your use case, but it qualifies as a clear differentiator.
Is this satire?
Err. It wasn't intended to be. Why do you ask?
Uppy really is something else. I think you guys nailed it 100%
Wow, thanks! 😍
What is typescript? As I understand it,TS is like Sass takes my code I write and put it's into es2015 or whatever so browsers can understand it better.
Interesting, I have no use case for this yet, gonna keep this in mind
The first thing I checked if it's modular or not, because no way I'd need all the features at once. And it is! Great job!
Thank you for making it open source!