yup, as the name implies (BASON is an acronym for basic abstract syntax object notation), this is simply an AST interpreter that has the perk of writing programs directly in JSON without the need for a parser. Ends up definitely being similar to LISP for obvious reasons :)
Pretending ASI doesn't exist is also dangerous, it's not like you can disable it. function shouldHitTheBrakes() { return isSmeoneOnTheWay || isTurnAhead || isAboveSpeedLimit } 
Sorry, I conflated your comment with an another one that also agrees with OP but argues for using all three types of declarations. Regardless, the point still stands that preferring `const` is not impractical or against common sense. It's arguable how significant the difference `const` makes is, and, depending on the style of code, it may be trivial or none, but in imperative-style code that commonly uses reassignment `const` improves readability to explicitly differentiate reassigned identifiers. Likewise, for an experienced programmer, accidental reassignment probably wouldn't be an issue, but for a beginner, or when otherwise dealing with messy code, it could help. Constants not being 'true' constants in that they're possibly mutable in case of objects (unless something like `Object.freeze()` is used) may trip someone up, but I find it ironic how much you overstate this issue while also talking about "the real world".
Looks clear to me but then I use 2-space tabs outside of work.
&gt; It's because " is used as html attributes. This is a common misconception. HTML does _not_ require the use of double quotes for attributes. Single quotes are equally acceptable.
The braces represent a GROUP of statements. The meaning of "semicolon after every statement" is after every statement that doesn't have an ending delimiter. A control block does.
The meaning is clear to everyone else, apparently.
&gt;In which other programming language can you There are all sorts of arguments for and against JS, but honestly this isn't one of them. The limitation here is that few enough people know i486 assembly to go and write a compiler like this. Above all, the "arithmetic expressions" that app takes are specially formatted to make it as simple as possible to parse. It "compiles" by basically converting to text. Compiling to EVM bytecode is significantly more complex and it's been done in Clojure in a [not much larger codebase](https://nervous.io/clojure/crypto/2017/10/18/clojure-evm-ii/). 
It's great, but I always end up overriding so many rules...
This is awesome! @ for conv?
He probably does like me . . . 1. surf front page. 1. new-tab shit that looks interesting. 1. complete surf. 1. look at tabs. Plenty of times i've looked at a python thread "who the fuck uses `self` in JS? ohwait..."
Is your problem with the rule, the wording of the rule, or your inability to understand the rule?
I eject right away, because why wouldn't you? Eject and get rid of whatever you don't need, like the postcss crap, and add stuff you need, like absolute paths resolving. What I don't like about create-react-app though is it still hides some things from you, like the babel and eslint presets (you need to dive into submodules to see what eg. babel plugins they use).
Spaces and bit tabs? Take that, tab earthers! /s
You can try [Slate JS!](http://slatejs.org/), which is pretty much stable than Draft and ProseMirror.
why would you not just have RoR do both since it's designed to do exactly that?
&gt; like the postcss crap, :( Also I'm curious to know how you handle CSS postprocessing without PostCSS. 
I don't. I use less and even there I pretty much only resort to variables and some basic mixins. What exactly do you mean by saying "CSS postprocessing", what features do you actually recommend?
You don't autoprefix or optimize your CSS, at the very least? 
True. But minification wouldn't affect all the guidelines.
&gt; Another person converted, muahahah Ohh you think JavaScript is popular cause it is well liked ? How cute :)
I really wouldn't take what google does as gospel. For example, they don't use modules because they have an internal way of doing modules. A number of their choices are due to how their build system is configured, and what it will do. If you aren't using their build system, then some of the rules very clearly will not apply. The airbnb style guide is probably more applicable to most js devs.
It was just a lighthearted joke, but thanks for the condescending response.
&gt; Exception: Framework code (such as Polymer, or Angular) may need to use prototypes, and should not resort to even-worse workarounds to avoid doing so. Do what I say, not what I do!
I approach CSS with sheer hatred, so I avoid doing anything related to it - hence my question, since I very obviously lack some knowledge. No need to be cocky about it. As to my reasoning regarding the initial claim - I don't see the point to do all the tooling for every toy project I make, since the configuration often takes more time than the actual codewriting.
Not if you use a good editor.
&gt; it's also a reflection of the opinions of thought leaders in the JS community How do you know?
Yes, ProseMirror and Draft.js are both more like platforms or frameworks for editing. The big difference between them and rich text editors like CKEditor is that they maintain their own data model to represent the editor state, and have some means of reconciling that data model with the DOM on updates or selections. This is important in my application because I want to have a concept of "blocks" that don't have a simple correspondence to DOM nodes. Each block will be a React component. There's a few reasons I want this. A big one is that it gives me more control over serialization. 
I challenge anybody to find something so clear cut as the first result when looking for two way data binding with React instead of Vue. I've spent the last 7.5 months using Vue and when I found out a couple of days ago that React didn't support two way binding out of the box, I made the decision that I will *never* touch React. I'd rather be the big fish in the small pond
I had no idea this existed! I've been avoiding eject so I didn't have to maintain weback/build stuff in addition to the growing codebase. What a perfect solution!
Copy-pasting tabs works perfectly fine on SO. And if everyone uses tabs everywhere, including displaying code, you could more easily copy-paste it *from* SO into your editor without having to worry about 2-space vs 4-space etc. 
Hello! Looks like somebody didn't read the post and started to hit keys. Nobody says that you should handle all the states for each request. It's more about services that need to handle specific cases. And, as I said, in your application, you still can use ``` const { success, result } = await doRequest(/* ... */) ``` 
What you're IDE is showing you isn't necessarily what is in the code, if tabs are used to indent then you can configure your IDE so that the tab is displayed any width that you like to make it easy for you to read. If spaces are used then you're stuck with that number of spaces as the indentation.
In the article one of the handled cases is a JavaScript error, something that clearly is not a domain error. So ironically the one who started hitting keys without reading is you. 
Actually Airbnb style guide is already a de facto standard. Personally I prefer low semicolon styles like Standard so I don't care about either but coming up this late in the game while there's an established standard (that only differs in minor cosmetics, and even there it goes against what top 3-4 preferred style guides do), I don't think that even being by Google will help that much. Surely this will have a lot of fans and projects, but I don't see it dethroning Airbnb. 
362880?
? ;)
Thanks you greatly for your comments. I joined the Draft Slack channel. I kind of suspected the two issues you mentioned (maintainers are spread over many projects / not heavily used internally). Are the FB maintainers active in the Slack channel? Do you have a sense of where Draft is at with mobile support now? Is it at least minimally usable for editing on both Android and iOS at present? And do you know if it's being used in React Native apps, and if so how successfully? I think ProseMirror has strong support for collaborative editing. I also doubt Draft will, I've seen the ProseMirror author comment that the framework really has to be designed with that use case in mind from the ground up in order to effectively support it. The problem domain is very similar to a VCS like Git. One thing I saw in ProseMirror is that after a few projects started implementing collaborative editing, a huge number of edge cases became apparent. What I saw was that the ProseMirror aggressively sought and implemented solutions to make the collaborative editing feature useful, and did a lot of work with their API in pre-1.0 versions to achieve a nice API. So I guess one thing about the choice is whether I need collaborative editing or not. One thing holding me back with ProseMirror is that it is not based on any existing framework, but rather to use stand-alone. The author commented about researching how Redux, Elm, and others are handling various aspects. It implements its own idea for reducers, actions, and a view layer with reconciliation. The code base is modular and there are users who are integrating it with React by replacing the UI portions of ProseMirror. I feel in over my head thinking through how to integrate a React / Redux front-end with ProseMirror, when many of the pieces are duplicated between the two systems. What I want to achieve is to define each page via a JSON configuration. Then with React, I'll use dynamically loaded components. This way I can implement a "page-builder" type of system for users. Using an editor framework would allow this since they are based on this idea anyway (having customizable block nodes). But with ProseMirror, it seems like I'll end up only using the framework for admin-interface-style editing pages, and not really able to use it to define public pages that have optional editing capability (like how Aloha works, attaching an editing interface to `contenteditable` elements - except those approaches just use DOM for state rather than maintaining anything like their own data model). My writing is terrible when I'm confused myself, hopefully that made at least sense enough others might be able to comment.
I know. I was pointing out the misleading title. 
What isn't clear with handling JS errors separately from business logic? You can write handler in service and forget about handling errors __in your application layer__ You write that comment because you think you should handle all these events for each request. Here's what you didn't read and you showed this again. Ofc I hit keys ¯\_(ツ)_/¯ 
If there's a deep if-chain the problem isn't 2 space indentation.
It helps a bit with code readibility in the callback hell
Hoisting
Apparently you’ve missed the entire point of my comment, which is to avoid having more than one state of success or error at every layer. Because then who handles what, and what event means what, quickly turns into a nightmare to track and understand, especially in a team setting. Keep hitting them keys, though. 
But why use unnecessary symbols?
It's simple: eject only if you can't do something without ejecting. I stopped ejecting my projects after I started using [custom-react-scripts](https://github.com/kitze/custom-react-scripts]), which has the stuff I need.
Variable that change during run time should be avoided because they make maintenance harder. That's why const should be the default.
Ah, I see. So we need to wait for the spec then... Anyway, awesome project and I am really looking forward where you will take it :)
You're still being cocky and spinning points around to your convenience. Guess you're the rockstar nobody wants to work with. Comment it out until you actually need it, not remove it completely. Or actually just remove it if you don't, which is what OP asked for. You don't need postcss or a service worker for a simple js library. I suggest ejecting as soon as you can, because the sooner you realise the tooling required to make your application work, the better. I said it because OP admitted to only just beginning to learn React, which is a really good time to realise how much stuff lies under the bonnet. CRA is an attempt of providing a boilerplate that doesn't scare new developers away by the depth of the ecosystem and configuration, but I don't necessarily consider hiding all the important stuff a good thing. The boilerplate is an amazing learning resource and I have created and ejected an app before just to use parts of the config in other, non-CRA apps. The extended build scripts have been helpful as well - and I usually modify them too, hence why I eject first thing. As to the entire postcss drama, I've had bad experiences with getting it to work with non-CRA apps. I admitted I know little about it since I stumbled across a library that decided to build their theming system on it, adding which literally blew my app up and just refused to work. That was a long time ago though, and I will soon need minification etc., which is why I politely asked you to change my mind. Thanks for not simply answering the questions just score a win in an argument against a less experienced developer.
Well I ejected my portofolio site project once and it was a nightmare I fucked up something with babel and the project become unusable. After 15hrs of struggle still I couldn't make some es6 features work. Obviously I'm still noob and that's the main reason but still It took me more time to try fix the babel stuff than it took me to make my portfolio site. So was wondering if its needed at all.
Lol common practice these days is to have your editor run a linter after every *key press*.
I have been using cloudnode, easy to use and they have a free plan with MongoDB as an option. https://cloudno.de/pricing
Haha yes! Thank you :)
You probably like doing all things in one place, if you think so. That's what people (and me too) hate
thanks! that did it!
Do something in your web app when the device is shaken: https://github.com/GrosSacASac/DOM99/blob/master/plugins/shake/shakeEvents.js
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [GrosSacASac/DOM99/.../**shakeEvents.js** (master → b4e15b8)](https://github.com/GrosSacASac/DOM99/blob/b4e15b8e761292018a8e046888ad3f3d8eb551eb/plugins/shake/shakeEvents.js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dwo5l9r.)
It's a tool. When need arises, it should be used. Those who don't know how to use shouldn't use it. I know how to use it so I'll use it. What's more to be said? P.S - as for being confusing for others I don't agree. One can't call himself a JS developer if one doesn't understand how "var" behaves. 
Instead of guessing poorly you can reread my comment until you grasp it. 
That's definitely fair, in that HTML is the absolute most permissive markup around.
They have a great documentation!
r/unexpectedfactorial
WTF version of JS is this, and what percentage of browsers in the wild are running it? It’s hilarious that a company that tries to abolish JS every three years with some preposterous abomination of an alternative scripting language has resorted to literally telling us how to write the one that’s not theirs. Go away gooble. Not yours. 
I searched Google trying to find articles supporting the use of var. Found few. :) It seems the general consensus is on exclusively using "let" instead of "var". Maybe it's a valid point. But as long as programmer's my gut tells me it's ok to use "var" I'll use it despite what the general consensus is. When I'll feel that I should avoid it at all costs I'll do it - as it might be the case when working on a larger project with multiple people - I'll do it. I guess it comes a point with every skill (being it art, programming or guitar) when you do it not as others teach (or recommend) but how you feel it's right. Even if it's wrong. :)
I think the explanation is both overly complex and simplistic, despite the rules being relatively simple and clearly spelled out in the spec. Saying `[1] + [2]` is "cast to string then concatenated" can make the reader think the conversion precedes the operation, whereas it is *part of* the primitive operation. You can [open the spec and follow along](https://tc39.github.io/ecma262) no assembly necessary (quite the opposite). We start from [the addition operator](https://tc39.github.io/ecma262/#sec-addition-operator-plus): 1. lval is `[1]`, rval `[2]` 2. [ToPrimitive](https://tc39.github.io/ecma262/#sec-toprimitive)(Array) delegates to [OrdinaryToPrimitive](https://tc39.github.io/ecma262/#sec-ordinarytoprimitive)(Array, 'number') (because spec-wise only Symbol and Date define a `@@Symbol.toPrimitive`) 3. Array does not override `valueOf`, thus inherits [Object#valueOf](https://tc39.github.io/ecma262/#sec-object.prototype.valueof) which [returns the object itself](https://tc39.github.io/ecma262/#sec-toobject), the result is of Type Object and ignored 4. [Array#toString](https://tc39.github.io/ecma262/#sec-array.prototype.tostring) calls [Array#join](https://tc39.github.io/ecma262/#sec-array.prototype.join) which simply stringifies the array's elements and intersperses them with `","`, resulting in a string which is not an object 5. lprim and rprim are `"1"` and `"2"` 6. step 11 matches and the operation returns the concatenation of lprim and rprim [Subtraction works on similar principles](https://tc39.github.io/ecma262/#sec-subtraction-operator-minus) if you [unpack ToNumber](https://tc39.github.io/ecma262/#sec-tonumber): it gets the values, calls ToPrimitive on then which yields two strings, passes them through the [string to number conversion algorithm](https://tc39.github.io/ecma262/#sec-runtime-semantics-mv-s) then [actually applies the subtraction](https://tc39.github.io/ecma262/#sec-applying-the-additive-operators-to-numbers).
Thank you very much
Much thanks
That’s my point, everyone in this sub is a moron and you should do the opposite. 
Can someone explain how is this useful?
You can find out what asynchronous resources took very long time with your app running. And then your can do some work to impove it.
The rule isn't "use a semicolon after every statement that isn't already terminated by some other ending delimiter", it's "use a semicolon after *every* statement". There's no exception there for blocks that don't actually need a semicolon according to JavaScript grammar. Semicolons are neither required nor injected after an `if` statement, but they *are* required after most block statements. If you feel compelled to inject meaning into a style rule, then you aren't adhering to the style guide. The whole point of this rule is so that the developer doesn't have to concern themselves with the ins and outs of ASI. It's worth pointing out that Google doesn't follow this rule as it is written, either.
Sweet. Thanks
Everyone 4 spaces and it looks bad imo. Everybody get in line. Google has spoken.
I expected this to be one of those fake subs that doesnt actually exist, but clicked anyway. I was pleasantly surprised. 
This is their internal guide for god's sake. Google is not telling anyone how to write JS.
&gt;One variable per declaration Hahaha, no. 
You can find the whole video here, too: https://www.youtube.com/watch?v=PhggNGsSQyg
Clickbait and upvote fishing. Ignore the intents. 
I am also self taught, and have some thoughts/feelings for you: 1. Try doing some practice rounds on other code challenge websites. 2. If you're a junior developer, it's okay to not be _the best_. 3. If you're not junior, sometimes you can negotiate not to be tested. I've done that a few times, because these tests often don't reflect reality. To address the last point more, you're never in a one-hour dead-line; code will get done when it gets done. You'll also probably have code reviews from other people to help improve the code/find common mistakes, something these tests don't do. Also, performance is nice, but the reality of software is _make it work first, make it work better later_ - a lot of code challenge sites time your functions down to the millisecond, and for the majority of apps, that's absurd. I'd say do some practice challenges, and write some apps on your own, even if they don't feel impressive or they are just copies of someone else's ideas. Having any experience under your belt before jumping into a job will get you quite far in software.
Hi /u/rudrey, For javascript help, please visit /r/LearnJavascript. Thank you!
Thanks!
[1] + [2] - objects are cast to primitives ("1" + "2") and concatenated -&gt; "12" "12" - [3] - operands are converted to number type (not just primitive) so 12 - 3 -&gt; 9. There’s really nothing special here, the fact that people are _still_ freaking out about weird coercion in operations that nobody would realistically even try to perform (and that’s on JavaScript sub!!) kinda surprises me.
I don’t disagree. I think, though, that ASI may be here forever. The transition from ES5 to 6 and the introduction of modules provided a rather unique opportunity to correct deficiencies and I’m sad that ASI wasn’t left behind as well.
&gt; You're still being cocky and spinning points around to your convenience. Guess you're the rockstar nobody wants to work with. I don't see what is particularly "rockstar" about thinking you shouldn't advise beginners to get rid of a tool when you don't even know what it does &gt; You don't need postcss or a service worker for a simple js library. 1. You use CRA to create apps, not libraries 2. PostCSS, or to be accurate at least two of its plugins (something for autoprefixing, and something to optimize CSS), are rather essential for anything you're going to put in production. Again, you might as well advise someone to throw out their JavaScript minifier/uglifier. In addition I'd argue that losing the backwards compatibility from CSSNext would be rather akin to scrapping Babel from your workflow. &gt; I said it because OP admitted to only just beginning to learn React, which is a really good time to realise how much stuff lies under the bonnet. And if OP is just starting to learn React then OP should be concentrate on, you know, _learning React_, not attempting to throw out parts of their build setup on the advice of internet strangers. &gt; I admitted I know little about it since I stumbled across a library that decided to build their theming system on it, adding which literally blew my app up and just refused to work. That was a long time ago though, and I will soon need minification etc., which is why I politely asked you to change my mind. Thanks for not simply answering the questions just score a win in an argument against a less experienced developer. So by your own admission you don't know much about a build tool's purpose (which is rather odd, when you could just look at [the project's site](https://postcss.org) for a start)), yet are fine calling it crap and advising others not to use it. And you see nothing wrong with this. Okay then.
Previous to let and const, the use of var was encouraged within anon and "declared" functions, so not really. You may be thinking about it too hard. You'll get the sense of it after writing for a while. 
Don't do whatever, learn the differences between the three ways to declared variables in JavaScript this way you can form your own opinions and not parrot what ABC said on XYZ.com As for why not to use `var`, the short answer is because `let` and `const` are the new hotness. The long answer is more complicated, but for any programer worth their salt, is a moot point. `let` is block scoped, which means the variable is only available within the most recent set of `{...}`'s. This means that if(something){ let abc = "123"; var ded = "456"; } console.log(abc); //abc is undefined console.log(ded); //456 `const` is scoped the same way as `let`, but the reference to the variable can never change. const goldPrice = 1337.44; goldPrice = 1300.15 //error! 
These two frameworks differ greatly on this topic. In react your datamodel controls the dom. It will simply re-render the dom when the datamodel changes. Therefore you have no concept of two-way binding.
One way data binding is a feature of React. It's an architectural decision that was made on purpose. Both have their advantages and disadvantages. If you are a beginner, and googling "react two way data binding", you are doing it wrong. You need to understand how react achieves the same result using one way data flow first. - [Thinking in react](https://reactjs.org/docs/thinking-in-react.html) - [Understanding unidirectional data flow in React](https://medium.com/@lizdenhup/understanding-unidirectional-data-flow-in-react-3e3524c09d8e) - [Reactive programming introduction](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754) &gt; when I found out a couple of days ago that React didn't support two way binding out of the box, I made the decision that I will never touch React Your prerogative, though I'd politely point out that "I don't understand this thing, so I will never touch it", generally isn't very respected position.
The library is written by the same guys who wrote the manual on [Functional Reactive Programming](https://www.manning.com/books/functional-reactive-programming?a_aid=playscala). The author has stated that, had he written the book today, he'd have done it with TypeScript examples (instead of Java).
I'll be seeing this at my next interview I bet
Nice contribution!
After using Python for a while, I've decided to remove braces if there is only one statement after the if/for/while. The code is much more readable.
TY That actually helps. They really seem like different tools for different cases. I'm not sure I see let as as much a bad choice as sometimes it is implied... just a different way of doing a thing.
Do you know how many jackass knowitall know-it-all ninja devs are going to use this information as a source of truth in a 'right/wrong way' argument? Fuck. I need a taser.
Also, I forgot to mention, if anyone has ejected and they'd like to go back, they can do the following: 1. remove webpack, move config folders to another folder as a backup. 2. install react-scripts again, you may remove anything else 3. add `react-scripts start` and `react-scripts test` and `react-scripts build` back to the build 4. (Optional) If you want to further modify the create-react-app to the liking, you may use react-app-rewired https://github.com/timarney/react-app-rewired Note that: 1. you will need to have a src/index.js file 2. you will need to have a public/index.html Sometimes however, I just wish that create-react-app allows us to override those 2 defaults. Here's an example of an app that wasn't built by create-react-app but it was built with the method I have described: https://github.com/hrgui/my-webpack-recipes/tree/master/bare-cra-min 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [hrgui/my-webpack-recipes/.../**bare-cra-min** (master → d08c5a3)](https://github.com/hrgui/my-webpack-recipes/tree/d08c5a3e118b80f6b49fcb87e18f9ee8cec6bc34/bare-cra-min) ---- 
Thanks man!
Someone selling a server-side product that wants to maintain some semblance of 'fuck you i'm in control' over a product.
Google likes to play with things they shouldn't as well. See their AMP platform. Their guide is decent and I support and employ most of it already. But I don't agree that we should be turning to a profitable entity to get our standards for the internet. They have too much power to gain by manipulating things to work best for them and worse for others. Better separation of powers should exist in this sort of circumstance.
Why use this and not e.keyCode?
Don't they usually just throw it through Zend or ionCube in those cases?
Not pulling my hair out over it but in my preference to tabs, it sucks opening a code example only to be staring at what I consider an overly compact mess. So to even start reading it, I'll go through the trouble of reformatting it just so I can read it. Or maybe I'll say fuck it and look elsewhere. Now it sucks for the sap that wrote the code to begin with since he'll have one less person looking at and using their code.
None of the images are loading for me.
I haven't used either but those are both for PHP aren't they?
https://www.destroyallsoftware.com/talks/wat
Yest, you could have two webpack/babel configurations for such a structure. You'd then have to detect green browsers (new code) vs older browsers (more transformed code).
Full disclosure: self-submission.
Cleaner diffs, easier to add elements. No real disadvantages.
What do you think? I think we need web components that work!
People use third party components way too much, yes. It is mainly because developers want to cover their ass.
And I've spammed reload a dozen times in my own way of helping :)
I dunno, there is a balance most people never really factor into the equation of whether to roll your own or use a prebuilt thing. A couple of times, when I had the luxury, I built things because I had a bad experience with the prebuild solutions, and found in the long run I save time, because my thing does what I need, and I understand it. The prebuilt thing tries to fit a bunch of cases I don't care about, is confusing because of that, and when it breaks, it is very hard to figure out why. Also, it is trying to be way to clever, and now I have to go figure out its complexities, because I inherited them.
I think so. I've only ever seen them used with PHP.
It seems like the move has been towards Reason. TypeScript did win as the typed version of JS.
What's to document even, things are as simple as plain old `"{{([^}]+?)}}"`!
Again, fine, it's your prerogative. You clearly don't understand enough make a sensible post about the matter. Your "challenge" makes no sense, it proves nothing more than your lack of understanding of the differences between the two. Why would anyone else choose vue over react because *you* couldn't be bothered to learn a different programming paradigm. That's not the way people generally make architectural decisions. 
https://i.imgur.com/VAaBpei.gif
It's because the sorts of people who say that say javascript sucks are usually Java devs...and they know their time is at an end!!!! In all seriousness though, it's because a lot of "enterprise devs" used javascript 10 years ago as that inconvenient language where you had to use alerts to debug. As they struggled their way to hack whatever server page language of choice "work" they found that they were just copying/pasting the same code over and over. Never once taking the time to explore the languages more nuanced functional aspects. Fast forward a decade, there's been a massive renaissance in both the language and it's community, but a lot of the people mentioned above never looked back. 
Thanks!
There's a book called "Design Patterns: Elements of Reusable Software" that might be helpful. I read it a long time ago, when the Web was young and I was younger. I won't go into it because it covers quite a lot but hopefully some of the patterns there will be useful. There's also online stuff about design patterns freely available these days, but I can't think of any off the top of my head.
You can learn home painting and retaliate
This is awful, half of this is arbitrary, meaningless convention. Hundreds of impressionable noobs are going to thing this stuff is actually some kind of really important standard! Just awful.
Sierpinski is cool, but Julia is awesome: http://slicker.me/fractals/animate.htm
Wait, is this a obscured advertisement post? It doesn't sound the OP is asking why people think JS sucks as much as making a rhetorical statement to just advertise this flatassembler app. There's nothing wrong with promoting something you made, but it's not clear to anyone if the purpose of this post (tagged with "help") is asking about js as a language, our thoughts on flatassembler, or help to optimize flatassembler.
But why? Larger project migration or porting things to React app was a bit tedious, especially when I used webpack aliases for asset location. This doesn't touch code if one already uses JSX expression statement ie: `src={ images.dog }`.
I think there will always be some people that take the easy route, and some that take the hard route. There are a lot of great freely available tools out there, a lot of talented people who are writing new tools, and many proprietary tools, too. But one thing to note is there is a huge difference between someone who does `npm install some-magic-package` and someone who only copy/pastes answers from stackoverflow (and similar sites). The former being someone who knows how to connect available tools together to build something interesting, and the latter being a person who doesn't know how to solve code problems (either lack of coding knowledge, imagination, or experience). To address the `npm install hairball` issue, for complex problems, it's good to have a single good solution that's been tested both in code and in the wild. There's the opposing side of this argument where people pull in large dependencies to solve issues that could be solved locally/in-house. I don't think it's a good argument to say: &gt; Probably the most important point, security. You really need to know what is going into your code, especially if you are using open-source code! To compound it, the issue is argued with: &gt; Check out this amazing article where Yan Cui talks about serverless computing security vulnerabilities. Here is a quote from that article: “a security bounty hunter posted this amazing thread on how he managed to gain direct push rights to 14% of NPM packages”. That's not a problem with open source packages, that's a problem with npm's registery. I think every developer should take a bit of responsibility to read over third-party source code, licenses, and dependencies to ensure their application isn't being compromised. This article also brings up this in the first main paragraph: &gt; Recently I’ve been hearing in real life and I’ve been reading online many people making statements along the lines of “being a developer these days is so easy, there is so much free code online, you just need to copy and paste it”, or “developers don’t actually need to know how to code anymore”. You might think it, but these people weren’t trying to pull an April Fool’s joke on me, I have seriously heard and read these things being said. I personally think this can be a very naive and potentially dangerous approach to software development. At least when it comes to making code that is going to be used for actual businesses or companies. But doesn't address this in any of the arguments. There is an unreasonable percentage of software developers that do not know how to develop software. I don't have official numbers, but almost every company I have ever worked at has at least one person who only asks/copies/pastes from stackoverflow, with no contextual understanding about the code that they are now injecting into our code-base, and cannot write code on their own.
Huh neat, had no idea about `Array.entries`, assumed `Object.entries` was the only one.
I completely disagree with “Use single quotes, not double quotes” What would the reasoning for this even be?
Hopefully the next big Javascript framework will just be called "Hype" so we know exactly what we're dealing with.
I unfortunately have horrible service where I am right now but does this allow for full streaming if you have premium? I’ve been waiting for the streaming capability to be added to the JS API for a while now. 
You absolutely don’t have to but it will make life a million times easier. 
He didn’t ask for any feedback or optimization help for the app, I think you are looking to far into it
The issue with weird coercions is not when they are used purposefully but when they happen due to some other bug. Because the code muddles on rather than fails two problems occur: Your code can do something catastrophic because the logic isn't prepared to handle the unexpected value. It can make finding the bug much harder. 
Thank you for clarifying this. I understand why you did this, but the word “lesson” might have mislead the reader – especially novice developers. There are many developers out there who treat tech giants like Google like they are the “maximum authority” in how to write software. While Google has certainly world-class engineers that have the necessary collective wisdom to share best practices with the rest of the community, it is important to understand that this is an organization-level style guide and that every piece of advice should be taken with a grain of salt. No organization is the same, Google is not perfect (although they are certainly good), and most importantly, their opinions are not standards. 
I too am curious about “why?”
Isn't require pretty much depracated now? 
Source code with 2 spaces is way too hard for me to read. Three spaces are barely enough, 4 spaces are perfect. Or even better, tabs.
Much harder to type on QWERTZ, which is why I stick with double quotes. 
How strong are your vanilla JS skills? If you consider yourself competent, I'd say feel free to start directly with React.
I like semicolons. They give me closure and I feel naked without them.
Very frustrating for me because I frequently see projects that use two spaces for indentation, which I'm having a very hard time to read. With tabs, everybody can configure them however they like.
Two spaces are incredibly hard to read for me, and probably others as well. 
You know... if they used tabs they could use any indentation size they want.
I agree that we need a more declarative API. That's the whole reason for this crazy idea. :) You can use data bindings and you hcan use diffing. With change detection you would not be able to use objects or tagged template literals. For complex use cases such as dynamically displaying components, things become cumbersome fast. With diffing, you can easily describe the DOM in any way you want. So with that in mind, I think diffing is way more than an implementation detail.
Perfect, and upon a quick read it too depends on the dreaded JSX....whoever thought *that* was a good thing
I got as far as “In Nodejs app your want to find out resources lifetime about created and destroyed”
I agree that trying to handle all the "delta" cases individually and updating To Dos in the DOM is overkill. The normal way to approach this is to use appendChild() for adding To Dos since that is frequent and easy. Likewise, change the DOM element's class for visual changes (like "select" or "mark done"). For other operations like "move" and "delete", re-render the entire list and then replace the UL's entire contents all at once. Here's a simple example like that: [How to Create a To Do List in CSS and JavaScript](https://www.w3schools.com/howto/howto_js_todolist.asp)
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt Did you try it? https://jsfiddle.net/nberyk46/
Inline event handlers are essentially `eval` inside HTML markup - they're bad practice and result in poorly factored, hard-to-manage code. Seriously consider attaching your events with JavaScript, instead, eg: https://developer.mozilla.org/en/DOM/element.addEventListener Consider writing in ES2015+, it has many great features - if you need to support IE11, use Babel to transpile down to ES5 later, *after* your code is written. The getElementsBy* methods return HTMLCollections, which can be difficult to work with. Consider using querySelectorAll instead, which returns a static NodeList - unlike an HTMLCollection, it can be iterated over directly, it won't change while it's being iterated over, and it's much more flexible. Rather than setting style (color) directly with Javascript, it's probably better to assign a className in Javascript and define the style in your CSS instead. For a script this long, you might start considering using a module system instead, rather than stare at a single file 280 lines long.
Not really I think I'm just not good at designing controls! Thanks for trying it out :)
Wow an actual useful post :)
Stopped reading at sqlite3. Not because I don’t like it, but because I can literally never get it installed. Thanks, nodegyp! My most-recent Electron app, I just had to use JSON files and fs.readFile and fs.writeFile.
That image doesn't look exactly like Javascript, but in general, I'd do something like const listenToClicks = (() =&gt; { let clickCount = 0; return () =&gt; { clickCount++; console.log(clickCount); }; })(); myButton.addEventListener('click', listenToClicks);
I got an interview question similar to this, and my response was, “First thing I’d do is find out why anyone would code that.” They said it was to test my knowledge of JavaScript, and I said, “I know better than to write that garbage!”
Thanks! It probably doesn't look like Javascript because they expect us to put things together using "blocks of code". I don't use them in general because it definitely wouldn't help with remembering the command.
They need to fix that menu on mobile. It takes up half the screen!
Can TensorFlow do much in terms of general purpose mathematical operations on large data sets, loaded into GPU ram, not carrying out machine learning tasks?
Thanks! I thought it would be a value of '' , just didn't know how to express it. I'll have a further look.
Why would you just home keys position when programming? Half of the things you're doing involve hotkeys, some combination of a key with Ctrl, alt, cmd, or shift. I get it if you're editing a word document, but practically placing your fingers like this when programming is just a hindrance. From pink to index -&gt; shift | a | z | cmd. If you're actually worried about saving yourself time/keystrokes, this will save you a hell of a lot more time than worrying about a shift press (which is by far the most common action which requires two key presses).
which was developed and designed for the english language, not javascript/programming which has a completely different set of concerns/common keys.
it's definitely not "preferred". People who use them are very vocal about it though. I haven't seen anything indicating that single quotes are preferred.
this is no longer relevant as we have backticks now.
You have to have _some_ HTML, or else the browser doesn't build a DOM. But all that HTML needs to do is load a script, and then yes, you can build a website with only JavaScript. Chrome on my Mac manages to correctly display an index.html file when all it contains is: &lt;script src="/app.js"&gt;&lt;/script&gt; No doctype, no `&lt;html&gt;` tags, nothing but those `&lt;script&gt;` tags. It definitely isn't valid HTML, but Chrome can open it. Meanwhile, app.js looks like this: window.addEventListener("load", () =&gt; { const h1 = document.createElement("h1"); h1.textContent = "Hello, World!"; document.body.appendChild(h1); }); ... which renders "Hello, World!" in `&lt;h1&gt;` tags inside the `&lt;body&gt;`. 
Yes, it's possible, some sites do exactly that (assuming you're allowed to start with a bare-bones HTML page with an embedded .js file)
This is just spam.
Wow, thanks!
&gt; The worst issue is your library has a license that is just bleeping weird if that is the worst issue...then get a life?
I use var because I don't understand the Babel configuration docs, and don't like having to deal with the extra step anyway.
LOL! Why use english when you can use regex, I adjusted the docs
Nodejs
Wish I understood what this means
Seriously?
Oh dang. Thank you
Not vanilla JavaScript, but Meteor has pretty well rounded full tutorials. [Meteor Tutorials ](https://www.meteor.com/tutorials) 
Looks like a simpler api, I don’t see any other advantages. For &gt;1.5kb, probably not worth it in small applications. 
By saying `[href="#"]` you're asking for links that target that EXACT string and that string only. But what you actually want is something that *starts with* a hash mark, right? Try this: $('#Workedwith[href^="#"]') Reference: https://api.jquery.com/attribute-starts-with-selector/ 
Practical JavaScript by Gordon Zhu is free and well worth the watch. It covers a small app and the logic behind it.
I’m currently taking Brad’s class on uDemy I think it’s great! I had a base knowledge going into it but he seems to be pretty thorough from what I’ve seen so far 
This is going to be the best answer. I learned SO much from his free course. 
Was hoping for research, expected an opinionated article. Was pleasantly surprised, very in depth and well researched. 
I’m no expert but I’ll gladly help for free, what do you need help with? Feel free to message me if you want to set something up.
I, four, am also curious about 'why?'
pro tip: iirc ID attributes are case sensitive, so $('#workedwith') wouldnt have worked, but /u/milkysnipers comment would. (iirc.... its been a while)
Don't post code here if you can't format it, use JSFiddle or something instead.
I'd go for too easy. Making things hard by making the interface hard is generally considered a poor game design. If you want to make it harder I'd keep upping the features. Maybe make some points drop down that you have to get in addition to the ball. Or make breakout.. which is always a good time : )
I think you are flat out wrong. This style recommendation is clear to the vast majority of people, and it seems that only people who don't like the semicolon rule are using this silly strawman. Give an example where a control block has an ambiguous ending that a semicolon fixes. Give me an example of somewhere where people seriously suggest adding semicolons to the end of control blocks.
Excited as a JS dev, but still not sure what potential use cases there are for this. I'm obviously uninitiated to ML (though interested)... can someone throw some potential use cases out for me to grapple with this new development?
Ah I see, I was running something called http-server installed via npm . So I should have a file that connects to the node.js server and mongodb, and then try to get that data from the client-side (http transaction?) Just want to make sure I'm not missing something in between here. Thank you so much for your response :)
I would recommend getElementById 1. performance is better 2. it's specific which element you're targeting 3. easy to think and follow through 
Yeah, I think you do have some sort of idea. What we want is the client to initiate an xhr (ajax) request to the API, which then tells mongodb to do something.
Try to rely on indentation and lexical block scope if you can - it will help you make sense of code much more easily. You should be able to tell where a variable can be used just by looking at the blocks `{}` it was declared (`var`) in. I'd say to declare `relay1` at first, like var relay1; if (cTemp &gt;= fHigh) { // ... but it looks like you're depending on `relay1` from a previous iteration somehow. Can you give more context to that snippet?
I'm gonna go with a 'no' here. The reason I say that, is because you need at least *some* HTML in order for the browser to render something. After all, browsers render DOM, and while you can create DOM elements with JS, the result of your JS code is still HTML.
You should google for a full tutorial on setting up mongodb, or do a Udemy course. No need to re-invent the wheel when you're still new to JS.
I think they're saying that it's a language that, in this day and age, could be implemented as a library.
Take a look at www.w3schools.com/js/ It's not the best or most up to date course, but it will explain programming concepts very slowly, one step at a time. After you figure out the basics (variables, functions, types, etc.) you can move on to more advanced tutorials elsewhere. The important thing for a beginner is to get those basic concepts down, and memorize the syntax so that you can read other people's code. Once you are comfortable reading code, you can always just look up stuff you don't understand.
Not for vanilla JavaScript, but for React there exists [this book](https://www.robinwieruch.de/the-road-to-learn-react/) (long read tutorial) which navigates you trough building an application which consumes a third-party API. If you are familiar with HTML, CSS and JavaScript ES5, you can pick this up. It transitions from JavaScript ES5 to JavaScript ES6 (and beyond) along the way.
Hey. I looked at the code a little. Did you add this bit? &lt;script&gt; window.addEventListener("keydown", function(event) { // arrow key if ([37, 38, 39, 40].indexOf(event.keyCode) &gt; -1) { event.preventDefault(); } }); &lt;/script&gt; It seems to be both in the &lt;head&gt; and in the &lt;body&gt; tags.
Yes, of course
Can’t you use the same argument to basically say that it’s impossible to code *anything* without using machine code?
Thanks for the great work you guys do.
Note that I said `getElementsBy`, not `getElementBy` - I was referring to the *collection* methods, not getElementById. Still, * worrying about "performance" for something so simple is completely negligible nowadays * querySelector is specific to which element you're targeting as well, if you do it properly (flexibility is a good thing) They're both fine to use.
Thank you for the help! var relay1; if (cTemp &gt;= fHigh) { // ...*italics* this is if the current temp is greater that or equal to the fHigh variable (in this case 3 degrees), then turn on relay 1 and cool down the freezer. the next line if (cTemp &gt;= fLow &amp;&amp; relay1 === 0 ) { var relay1 = 0} *italics* I would like it to check the state of relay 1 and the current temp (cTemp). If the relay is on and its between fLow and fHigh it means the freezer is cooling down to the low temperature (fLow). If its off it should stay off until in gets to fHigh, because its warming up because the compressor is off. Please let me know if this makes sense. 
No, I'd say my argument is a lot less absurd. =) Let's say we wrote some JS code and saved it in a code.js file. So far as the browser is concerned, that's just a text file and it will display it as such if we try to open it. In order for the browser to even attempt to execute our code, we first need an HTML page.
[@littledan's latest tweet](https://i.imgur.com/ZJdgssZ.jpg) [@littledan on Twitter](https://twitter.com/littledan) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
If I'm reading this correctly, you don't need the first `if` at all, and you should simplify the second one to only `if (cTemp &gt; fLow)`. Reason being that if `cTemp &gt; fLow` then of course `cTemp &gt; fHigh` and either way you're setting `relay1 = 0`.
Thank you for the post, this sort of material is always welcomed.
Half the things I'm doing are hotkeys? That's not my experience. But you keep doing whatever suits you :)
[Journal-AWS-Amplify-Tutorial](https://github.com/richardzcode/Journal-AWS-Amplify-Tutorial) build an web app step by step.
This is the example I created from actual production code I've seen: https://gist.github.com/cmstead/dfeea6faf80c96d5c2a738fc822918ee
For the love of god use intuitive variable names. You wouldn’t need comments. (eg.: cTemp -&gt; currentTemp) Second, use let/const unless you absolutely can’t. 
Looks like you've used some odd paths for the images that work locally, but not in the browser. For anyone looking to make the images show up, run this in the console: ` Array.from(document.body.getElementsByTagName('img')).forEach(img =&gt; img.setAttribute('src', img.attributes.src.value.replace(/img\//, '/terrainver/img/').replace(/^img\//, '/terrainver/img/').replace('./img/', '/terrainver/img/'))); `
-JS- Programming is hard because there are so many options. There are a plethora of ways to put together a web application in nearly every language. Hell, you’ll probably still want to select a bunch of the same JS frameworks for client side code. Don’t forget a css compiler. Do you want to bundle your web server in your jar, or run an external service and deploy multiple wars? And the .NET ecosystem for deploying web applications might be a little more standardized, and nuget has helped a bit with DLL hell, but there are still a bajillion things you can drop in to customize even a “simple” web app. Also, I hate IIS. Honestly, this is probably why PHP and MySQL got their popularity. You want to start writing code right now and not think about options? LAMP stack. Bob’s your uncle. Here’s a UI to create some tables, drop your scripts in the main web directory.
How complicated of an app do you want to make? http://todomvc.com/ has basic MVC setup for pretty much every flavor of js. Do you want to get into server side js, too?
It's not a valid comparison. React and Vue are view libraries. Rxjs / observables are a superset of promises. Angular (-angularjs) makes good use of observables. 
Its better to learn through some online websites such as pluralsight, code academy etc, which will walk you through any technology of your interest.
https://www.youtube.com/playlist?list=PLN3n1USn4xlkdRlq3VZ1sT6SGW0-yajjL 73 videos tutorial series - Slack clone using React and GraphQL.
I enjoyed Sweet Pumpkins for ReactJS. https://sweetpumpkins.codecamps.com/
Here is the link for the course: https://watchandcode.com/p/practical-javascript
Not to toot my own horn, but... TOOT! I've written nine books for Apress that are exactly what you're asking for (well, except for the one that wasn't on web development at all). I'll be the first to admit many of these books are pretty outdated at this point, but not all, and there's likely still value even in the outdated ones. https://www.apress.com/us/search?query=zammetti
Fair enough. Why do some sources (e.g. Codecademy) encourage the use of arrow functions over function declarations? Don't both of them do essentially the same thing?
Same, it might be a bit OCD-ish, but two spaces makes my head hurt. It looks so extremely ugly and out of place. 
Define ”entire application”, please 😁
Check out Aurelia's Implementation of TodoMVC, it's very straight forward and uses Vanilla Javascript.
Very much yes.
Check out the book "The Javascript Way" by Baptiste Pasquet. It's cheap to buy online, you can get source code for all the exercises, and it has helped me tremendously with learning what JS has to offer. At the end you use Node.js and some npm packages to create web applications. It's great
Hmm, deja vu. Regardless, why choose this library over redux-logic / redux-observables / redux-sagas? It seems to give me way less control over my async behaviour since I can't compose behaviours easily. I'm not sure you should have your API requests dispatch actions for you. Actions of redux/vuex are meant as an indirection to side-effects. To call side-effects and have those call actions for more side-effects to happen seems backwards.
 const fHigh = 3; const fLow = 0; let currentTemp = msg.payload; const relayControl1 = {} if (currentTemp &gt;= fHigh) { relayControl1.payload = 0 } else if (currentTemp &gt;= fLow &amp;&amp; relay1 === 0) { relayControl1.payload = 0 } else { relayControl1.payload = 1 } return relayControl1
React. EJS is a very simple templating library, you'll get the basics of it in a couple of minutes. 
if you're into mobile dev and react, [this one is ok](https://medium.com/react-native-training/bitcoin-ripple-ethereum-price-checker-with-react-native-redux-e9d076037092)
Its a pity that no one seems to use RxJs, it never really caught on despite being so elegant and powerful.
Learn React, I started learning web app react but jumped into a react native job and it's basically 99% the same. It's powerful and you can do sooo much with it.
Play around with Create React App and see how things are architectured
Yes, probably better not to aggravate players intentionally! I just threw this together on a whim and it was originally going to be Breakout even, I just couldn't be bothered to make the bricks lol.
Thanks, I plan to learn RxJS soon, will come handy!
&gt;As top notch craftsmen we will: The idea that people aren't "top notch" if they don't do things your way is just plain wrong. Don't say things like this.
+1 for "Bob’s your uncle" 
Sorry for that, could you tell me your browser so I can have a look?
Better, just add a final '/' to the URL I will add a redirect, somehow I missed this :/
So you can't use es6 syntax for modules but you can use es6 syntax for... everything else?
Ha, I did (thanks to someone in r/CSS)—it doesn't seem to have worked...
Just to say, software development and programming languages are very different topics, sometimes they do go along, most of the times they do not. That's because software architecture and implementation differ, paradigms are more often than not untied to language and functionality. Imho write an application entirely on your own, without any knowledge of paradigms, code structure, etc. You'll see that as you go on you will automatically develop some good habits and choices. To not repeat yourself, to only put what's needed in your app and extend it later, how to organize your code and data structures, etc. I really think that **before** grasping the real benefits of software development paradigms and the nearly endless ways to implement them you do need to write software without them. No MVC, no MV*, no monads, no immutability, etc. Only when you banged your head in a wall because your 1kloc app is a mess to develop, maintain and test you'll start to see the various benefits and differences between those paradigms.
I loved meteor 3 years ago, but would not recommend it now, as a framework. But yes, easier to get a full stack app running.
Hello everyone, this is a lib I created in my free time with the purpose of understanding software development from zero to a final release, I intend to continue to improve the lib to be a full-fledged one to be used by anyone. I would appreciate receiving some feedback about the lib. Thanks for checking out.
Thanks, I'll look it up!
Great, thank you!
Oh wow, I'll definitely read the backcover!
Cool I like typescript and RxJS .. nice tutorial - but any, any, any :)
I find it hard to believe that anyone can’t find an application tutorial for JS online. Spend the 10 seconds it takes to Google.
I think the most popular would be Wes Bos' https://javascript30.com course. I've done it myself and have to say it really gives you a glimpse on various javascript methods and cool features like voice recognition or playing with sounds.
Not a tutorial but a book, look for Eloquent Javascript, it has nice projects for all js related things, even games.
Good. Now WTF version of JS is this, and what percentage of browsers in the wild are running it? 
It's possible to do what you're looking for (I'm assuming you're wanting to call a function by it's function name?) but it's very bad practice. For example, you can do `window['myFunctionName']()` and that should call the function that's named `myFunctionName`. The reason you shouldn't do this is that it opens up the possibility of exploitation - essentially people can not only modify the variable `myFunctionName` to run any function they want, or they can simply search through your application (even using just the browser) for that string and find out what functions are being called and where. Unless you have rock-solid security (You don't, trust me), you don't ever want to do this. If you're just trying to call a function from a link, of course that won't do anything. You've not provided any executable code there. You've basically says "I have created a function, and passed it an argument". If you were trying to alert 'text', you'd need to run `javascript:function(text){alert(text)};`
Seconded, I’m doing the course now and I’m learning a lot! Great little projects from start to finish.
I'd like if the examples showed a way to invalidate cache, for example removing the cache from /getProducts after a /addProducts POST request have been submitted. It's a nice starting point though.
&gt; _.groupBy(myArray, item =&gt; item.time / (20 * 60 * 1000)); Something like that should group by package of 20 minutes. But the format of the key is kind of ugly. You could use mapKeys in order to transform them into something more... readable :p &gt; _.mapKeys(_.groupBy(myArray, item =&gt; item.time / (20 * 60 * 1000)), item =&gt; moment(item * 20 * 60 * 1000).format(THE_FORMAT_YOU_WANT)
Perl has some genuinely bad language design decisions, as do some versions of basic. 
Maybe cleaner like this : const precision = 20 * 60 * 1000 _.groupBy(myArray, item =&gt; ( moment(Math.floor(item.time / precision) * precision).format(THE_FORMAT_YOU_WANT) )) Depending on what you want to do with the keys.
&gt; Basically I want to return multiple arrays grouped by 20 minutes. Like array 1 contains 3 items between 10 - 10:20 array 2 contains 8 items between 10:20 - 10:40 and so on. If you check then pen console log you might get the idea, now its just grouping the arrays hourly. Your example is cleaner, but gives also invalid date? 
Does anyone have any ideas what is actually going on? Why in v8 loop with const and let is 5x slower than with plain old var?
If you just use "Math.floor(item.time / precision) * precision" as the keys, what does the keys look like ? 
I really don't understand what I should do here now. I have a script in the head of the site. This script: function zobraz_poznamku(poznamka) { poznamka = poznamka || ""; var text1 = "&lt;html&gt;&lt;title&gt;PIONÝR - Poznámka k&amp;nbsp;textu&lt;/title&gt;&lt;body BGCOLOR='#ffffff' TEXT='black'&gt;&lt;p align=center&gt; &lt;br&gt;&lt;font face=\"Trebuchet MS\" size=3 color=0000B9&gt;&lt;strong&gt;POZNÁMKA K&amp;nbsp;TEXTU&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;&lt;center&gt;&lt;table border=0 cellpadding=8 cellspacing=0 width=100%&gt;&lt;tr&gt;&lt;td width=100%&gt;&lt;p align=justify&gt;&lt;font face=\"Trebuchet MS\" size=2 color=000000&gt;"; var text2 = "&lt;/font&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;"; var newwin = window.open("","windowname","height=320,width=320,scrollbars"); if(newwin) newwin.document.write(text1,poznamka,text2); } So what now?
Oh I didn't see that item.time was not a timestamp. const precision = 20 * 60 * 1000 _.groupBy(myArray, item =&gt; ( moment(Math.floor(moment(item.time).valueOf() / precision) * precision).format(THE_FORMAT_YOU_WANT) ))
No problem ;)
https://www.codecademy.com/pro/intensive/build-websites-from-scratch &lt;-- Code Academy has great free courses! And it shows you how to do it from scratch!
Did you do any benchmarks with this? Does it really speed up things? 
it's not, the first test you run always executes the fastest for whatever reason. Try running the const test first. The real question is why are the subsequent tests always slower. 
I too would love to see the benchmarks. `Readme.md` claims: &gt; In most cases glmw runs more than twice as fast as gl-matrix. But by what metric? I love the possibilities that WebAssembly pbrings but my gut says that glmatrix is just far too small scale to benefit from WebAssembly. Each call is operating on such a tiny set of data `vec3`, `mat4` etc. that I don't think the call overhead could possibly be offset by any speed benefits. I think honestly you'd only start to see benefit on some decently sized matrices - along the lines of `mat100` ~ `mat1000` for instance. In-browser machine learning anyone? 🤣 Obviously I'd love to be proved wrong, now where are those benchmarks?
How many times do you have to ask the same question before you correct your Array.prototype.reduce syntax? :)
Hi /u/SeanCarroll17, For javascript help, please visit /r/LearnJavascript. Thank you!
reduce needs a return value since acc will be the value that was returned from the previous call arr.reduce((acc, current) =&gt; { const summedUp = parseInt(acc) + parseInt(current) console.log(summedUp) return summedUp; }) for example [1,2,3].reduce((acc,value) =&gt; {...}) //the first time the inner function is called acc=1,value =2 and it returns X //the second time the inner function is called acc = X and value = 3 and it returns Y 
Important to note that while `SharedBufferArray` is still part of the spec (I don't think it's been withdrawn), it has been [disabled in all major browsers and node](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) due to Spectre.
Can you post the link to that android course you mentioned please? 
Yeah dude, be sure to take his course. I can’t recommend it enough. 
^ This This is called Event Delegation. You assign 1 event listener to the parent element, and withing the event callback, you determine which element was actually clicked on and handle the logic there. It will save you a lot of headache IMO doing it this way.
This sounds like a good idea. Events bubble up through parent elements. Just have one big onchange function handler that looks at event.target.id, event.target.title, etc.
At the very least, maybe a helper function? const addChangeListenerToQuery = (query, listener) =&gt; { const el = document.querySelector(query); if (!el) { // Handle error: missing element return } el.addEventListener('change', listener); }; addChangeListenerToQuery('table[id^="ClientStatus"]', clientStatusCheck);
https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website
Why this article sucks: the author clearly don't grok functional programming or the myriad advantages of immutable data structures. In fact, he implies that these paradigms (as well as React's components) mean that React doesn't scale well, which is total bullshit. React scales amazingly well, precisely because it encourages pairing small, stateless reusable UI components with a centralized store of immutable data representing application state. Combined, they make React very easy to reason about, eliminate side effects caused by manipulating data directly (particularly in an environment where asynchronicity features heavily), makes testing code a breeze, etc.
Thanks guys so I can.
Surprised that no one has mentioned Colt Steele's Web development bootcamp on udemy yet. It's a wonderful course that starts from basic to build a couple of apps. 
Relative wasm noob here, but won't most of the heavy operations either just return a Js Number/Boolean (which does clearly require js marshalling), or an ArrayBuffer of some kind (which seems as though it could just be handled like Transferable, and moved free or cheaply)?
check profiler. Can't put my finger on why, but I have a hunch that the garbage collector is kicking in after a while and then continuing to go at regular intervals, but the first test gets to coast for a while. 
You should use `onclick` instead of `href`: &lt;a onclick="f('text');"&gt;Link&lt;/a&gt; But then again, I don't really understand what you're trying to do so it's hard to help any more than that.
Uhm; yeah so isn't this is a terrible idea? Would result in more read/writes than just letting the JIT do it's thing.
I would definitely learn JavaScript given the current situation in the job market. Also, you can start searching for jobs already if you're not too young. The company I'm working for doesn't care much for education as coding is something you generally learn on your freetime and work. I wouldn't say PHP is necessarily bad, but given that JavaScript started as a front-end language and it's now more popular when searching for back-end jobs, it tells something.
I wrote a book for beginners called "Your First App: Node.js" in 2013. Last year, I did a major edit to make sure it can still be followed without problem. It walks through the framework decision and design processes at a high level, then gets into server side and client side coding. It also attempts to build git into the workflow (something I wish was taught to me in college). Although framework versions are older, I think it covers what you're looking for. Check out the preview: https://yourfirstapp.us
I am mostly backend, but also full stack. In my opinion if you are interested in backend, Java is the default language. And you need to be comfortable with design patterns, data structures etc. PHP is for web developer. You do web server development, running on server, but not really backend. There are backend, web, and frontend. JS can be on any layer. Which makes it a better choice if you are not sure which layer is your focus. 2 cents.
In what scenario would the DOM be safe but JS variables not?
[RealWorld](https://github.com/gothinkster/realworld/) is a better resource than TodoMVC. It has a more realistic set of requirements, plus it has backend implementations to go with the front end examples.
&gt; The MDN page for eval() even has a section called “Don’t use eval!” And it recommends using `Function(...args)` instead... which is discouraged in the article. 
Hi /u/MrBaseball77, For javascript help, please visit /r/LearnJavascript. Thank you!
Just to add a simple example of what this means in code: document.querySelector("#parent").addEventListener("click", (event) =&gt; { if (event.target != "child-selector-goes-here") { return; } // continue with rest of callback }); 
Just finished the test and completed it successfully. It was a but harder because I had to manipulate the DOM with vanilla JS and I hardly do that. But I fulfilled all the requests witn 2 min to spare. I did google a shit ton of code and just copied and pasted it but it works :) But I will keep on learning since I did a trial interview on pramp.com and damn that didn't go well. at least I did complete the test but it should have been easier. So I think I'll do a basic javascript course to bone up on my basic javascript knowledge. Thanks for the help!!!
Just finished the test and completed it successfully. It was a but harder because I had to manipulate the DOM with vanilla JS and I hardly do that. But I fulfilled all the requests witn 2 min to spare. I did google a shit ton of code and just copied and pasted it but it works :) But I will keep on learning since I did a trial interview on pramp.com and damn that didn't go well. at least I did complete the test but it should have been easier. So I think I'll do a basic javascript course to bone up on my basic javascript knowledge. Thanks for the help!!!
What's the difference between `hoisting` and `not respecting block scope`?
Cool stuff, its really smooth even on my phone and I like the detailled README. One little thing happened however at the cardboard demo (and Android/Chrome): When drag-holding an item its starting to select the text in the item DUH :D, I guess that could be disabled with css.
I wish I could just have meteor auth and build my app my way the rest of the way. I hate building auth and I have my own boilerplate for it now but I'm always concerned with best practices 
Congrats and good luck!
You're just running into one of the many performance quirks of V8. It does things like recompiling code on the fly and re-recompiling things on the fly. Generally speaking, the closer you are to startup time, the wonkier benchmarks will look. This is why you're supposed to average many samples when benchmarking. Also, your benchmark has so many confounding factors that it most definitely isn't measuring var/const/let time. You haven't accounted for the cost of loops, function calls, timer fingerprinting protection, etc. For example, benchmarking a noop function gives me results in the same range, so clearly the numbers you're getting are 99% noise. TBH, var/const/let times are so small that I don't think you could measure their perf even if you did benchmark properly. My recommendation would be to use `const` unless you explicitly want binding mutation (in which case, use `let`). Remember, there are three types of lies: lies, damn lies and benchmarks. Aim for readability instead.
Very nice. Having a way to distinguish optional parameters in the function signatures would be a small improvement in quick clarity.
I think most people know this, but it's good to point out. I recommended `onclick` because the OP seems non-technical, so event handlers are probably a little too much for such a simple use case of modifying a WP site.
Still have 4 more years? Learn Rust--by then there'll be a market. In all serious, it won't matter too much--whatever skills you have you can apply to any language, and who knows what will be the trend a year from now. Laravel does a lot for you, and I don't know of anything in Node quite as extensive, but it's better to build things on your own as far as learning goes. Also, even though JS isn't the best language and has its quirks, I find using it far more enjoyable than PHP.
Obviously, it wont hurt to know a little PHP as a JS developer, or vice versa. But if i would have to start fresh, i would focus on JS for sure, for reasons mentioned by previous commenters. Also, i wouldn’t focus on a single stack. MEAN is awesome, but it’s just a matter of time before something else comes along and changes the game. As a matter of fact, just take a look at server side rendering React or Vue.js (included by Laravel). First of all, get comfortable with the HTML, CSS, and JS(es6) fundamentals and design patterns. Once you master those, get your hands dirty and learn some test, build and deploy tools and processes. Once you master those, you will be able to learn any JS driven stack in no time.
Yeah, that sounds like something that would be quite easy to implement. Post an example of the transcript HTML and container.
Welcome!
My small library is fully covered with unit tests https://github.com/Auxx/lib-colorifium it's written in typescript, but the same principles apply and the testing frameworks used (mocha + chai).
Also all elements with the same handler can be put into a single selector.
&gt; In my opinion if you are interested in backend, Java is the default language. I agree on this. Backend Java market is huge.
It'd be cleaner to implement pre:create and post:create events as part of entity creation. This would allow better flexibility and easier error handling. The post operation might need to respond differently if the entity creation failed or succeeded.
IMO they should go to their own little API. That API should be connected to a DB. For example something like that can be connected to Spunk (especially if you have thousands to millions of users). - HTTP calls can use single access points. For example in a function http(get, arg, header), all HTTP calls can be routed to something like this. - Other JS errors. I am of the belief that most JS errors can be prevented by good coding, and a lot of try catch blocks are a sign of laziness by the dev. Of course, there are some cases where you need it. Both of these cases are easily pluggable into a logger class, that can call an API. There are security implications, what do you not want to log? Passwords/ username, user information all can be sensitive. Logging when properly used can help figure out trends that can be fixed.
[Mithril.js](https://github.com/MithrilJS/mithril.js) has a lot of tests. It has tests for [pure things](https://github.com/MithrilJS/mithril.js/blob/next/render/hyperscript.js), [impure things](https://github.com/MithrilJS/mithril.js/blob/next/router/tests/test-setPath.js), [polyfills](https://github.com/MithrilJS/mithril.js/blob/next/promise/tests/test-promise.js), its [testing library](https://github.com/MithrilJS/mithril.js/blob/next/ospec/tests/test-ospec.js) and [mocks](https://github.com/MithrilJS/mithril.js/blob/next/test-utils/domMock.js).
cool, thanks for sharing. i know dictionary recently went up for sale by IAC and Ask has been treading water for a decade -- nice to see they're still doing *something*
Yeah, but they're "change" events. Unless I'm mistaken, you can't do event delegation for these kinds of events.
No problems, enjoy!
I’ve been working with on a character generator for a role playing game called Shadowrun. The system is stupid complex and I only started unit testing the reducers and started unit testing the React components later. https://github.com/HeyOmae/Omae2.1
Glad you liked it! And thanks for sharing the issue. Yes I should probably disable text selecting on drag for mobile. I will fix it asap. Thanks again :))
Yeah i know that about frameworks and stacks. I am already studying for 3 years. I mainly did html/css/php/sql/python and some mvc frameworks. So i will actually have to learn javascript from scratch. I saw a lot of practising sites so that will be easy.
I know JS isn't perfect. There is no perfect language. What's RUST?
My focus is "web". But it would be great if i could do frontend projects at home as well. I want to focus pure on web development.
In dot net, get a copy of your json data, paste as special and your class is created automatically. Open the url to the api, stream the data to object then serialize to the class you created. You can parse through it with ease. Happy coding! 
AFAIK typed arrays are also a lot heavier to construct than plain arrays. If you're using a lot of small arrays in your app (and don't specifically need typed arrays to send to the WebGL API) I wonder if it'd be better to stick with regular arrays.
Not really trying to work with dot net, hence why i posted in this sub. But thanks for your response!
moment.js is an unbelievably well-covered library. You can actually execute the tests in real-time by going here: https://momentjs.com/tests/
Yeah, post an example, if you got an string you could simple do string.split(".").join(".\n") or string.split(".").join(".&lt;br/&gt;") Depending if you need to do the line breaks in plain text or html
Downside to PHP is there are too many opportunities for working on legacy WordPress and Drupal sites.
Pretty sure it doesn't support JSONP - if you want to use it, you'll have to bounce the request off your server to get around CORS.
I don't care about using jsonp or not, i just want to be able to recieve data lol. Any idea of how i could improve my code to do this?
Np. Just trying to help. Visual Studio is practically free and this is kind of an academic exercise. Happy coding! 
Can you give a concret example ? Because there can be a lot of different reasons why you would always want to return something. For instance, in a function triggered by an event, you can return false to disable the default behavior (however it is recommended to user event.preventDefault() ). You can also simply return "true" or "false" on order to confirm that the modifications are successful / have failed. And probably a lot of other reasons that I don't recall right now.
Easiest way to get something going is to setup Sentry. It's not that much harder than creating an account and copying-pasting some snippet of code. Maybe fix source maps, if they are broken. You can move to a different solution down the road if you want to consolidate error logging. The slowdown argument is a bit silly. I'd much rather get spammed about errors than not know what they are in the first place. With a proper UI, you can filter, dedupe them, etc. Besides, if you use a separate service, your server doesn't need to handle error logging and there's no real perf hit on your backend. The argument I'd put forward is: why not care about client-side error visibility if you already do care about C# API error visibility? If anything, unexpected client errors are much more likely to happen, given the bazillion types of browsers in the wild. The impression I get from your description is that a backend dev doesn't want to put time into "plumbing" that doesn't benefit them directly (though it would presumably benefit you), and if this is the case, you need to address the political issue of that unwillingness to improve the system isn't just a matter of you-vs-them, but a matter of overall project health. With that said, creating your own error logging pipeline from scratch is quite a bit of effort, yes, and you should come to your meeting tomorrow with some options, honest pros and cons of each, and an impartial recommendation that isn't "lets-do-what-sounds-like-the-most-fun-thing-for-me-to-code".
I found the examples in this article to be very helpful: https://github.com/mawrkus/js-unit-testing-guide
Another vote for Sentry here. Very easy to setup, and good integration with other tools (we use it with Jira and Slack).
Thanks, such a great reply. You're spot on. :)
Yes, have a backend somewhere and bounce the request off of that. That's the only way.
The question has nothing to do with dot net, nor did the question say anything about a `class`. I think you accidentally replied to the wrong post
Are you using Firefox ESR?
So it is, thanks.
I have a small library covered with unit tests using mocha and chai. My tests may not be great quality but they do show the methodology and cover everything that Istanbul deemed important... https://github.com/beforan/unit-value
Other than readability, nope. Coffeescript used to enforce that, but in their case it made more sense as there were some potential ambiguities with the language. But with JS, there is absolutely no need. I must admit, even though there is no need I always put returns everywhere (except one liner arrow function) as I find it neat and reassuring. I am pretty sure the minifiers / transpiler strips them anyway
Provide the anawer instead of criticizing a valid attempt at providing some type of solution. 
this is rip, gave up lmao can't do it with this cors bullshit
Dang, you're right. Didn't notice that.
[consolidator](https://github.com/atelljohannsmothers/consolidator) is probably the best example I published open source. 
Return false exits the function. If you checked for a condition that meant the function essentially could not run, and return false, instead of wrapping the logic in the else. Sometimes with nested ifs that is handy. The calling code could tell the function aborted by the returned false. If the calling code doesn't need to know anything, you could just return.
Just off the top of my head: ``` const example = () =&gt; { if (window.location === myURL) { window.location.href = newURL; } return true; } ```
https://www.reddit.com/r/javascript/comments/89h8tp/_/dwr63r6
No one who uses React thinks they aren't using the DOM, that's ridiculous.
Thanks for the support ya'll! The question I always give people: Would you rather have angry customers yelling on Twitter, or have Sentry automatically telling you your shit is broken? For reference, Sentry is completely open source. So if the reason you want to roll your own is the refusal to use SaaS (or the refusal to pay some ridiculous price) then by all means, run Sentry's docker image (and the relevant services): https://github.com/getsentry With that in mind: don't roll your own! don't run your own monitoring! don't spend time on things aren't your core competency!
An awesome library! starred. &lt;3
Markdown It, 100% test coverage :) https://github.com/markdown-it/markdown-it
Thank you all for the help, I was able to make it work on my own. I'm not much of a coder, I'm much better with the hardware integration side. I've attached what I was able to make work. I'd really like to be able to add the low temp (fLow) as a variable from a slider in Node Red but I can't seem to get it to work. No mocking please, the last computers class I took was in the 80's on a TRS 80. (and I had to walk to school in the snow, up hill............. both ways.) I will do some research let/const too. Thank you all very much. Also any short cut for displaying code? I don't think that 4 spaces in front of every cut and pasted line is right, there has to be a more efficient way. var relay1 = "freezer compressor"; var relay2 = "freezer defroster"; var sHigh =10; var sLow = 0; var defrost = 80; var relay1 = 0; var relay2 = 0 t = msg.payload; if ( t &gt; sLow ) { if ( t &gt; sHigh ) { var relay1 = 0; } else if (t &gt;= sLow &amp;&amp; relay1 === 0 ){ var relay = 1; } } else if (t &lt;= sLow) { var relay1 = 1; } var relayControl1 = { payload: relay1 }; return relayControl1; I'll post a pic of the finished project this weekend 
RxJs https://github.com/ReactiveX/rxjs
Thanks!
Neat article. I'm the guy who asked the original question on SE!
Thank you very much, this is super helpful!
!RemindMe 2 days
I will be messaging you on [**2018-04-05 23:02:07 UTC**](http://www.wolframalpha.com/input/?i=2018-04-05 23:02:07 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/89eze5/what_are_some_examples_of_open_source_js_projects/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/89eze5/what_are_some_examples_of_open_source_js_projects/]%0A%0ARemindMe! 2 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dwrdszz) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
I don't know if they're excellent, but I wrote an Asteroids clone using TDD a few years ago: https://github.com/Omnicrola/SpaceRocks Play it here : https://omnicrola.github.io/SpaceRocks/
No sir, I just tried installing it but don’t have admin access on my work pc. 
I would render a partial directly to the DOM rather than opening a new document: if (!result.response) { let secret = document.createElement('div'); secret.innerHTML = 'secret contents'; document.body.appendChild(secret); } Document.open() creates a whole new document object to display which adds a lot of overhead. Alternatively it will clear the current document if one exists. 
Did you actually call `rr`?
ITT: Promote your open source library as long as it has a test folder
sorry, yes, I'm going to clarify the error statement a bit more. my fault. Editied code to include calling of rr 
Glmatrix operates on typedarrays almost exclusively, so it's pretty cheap. The data actually lives in the web assembly heap and you have a typedarray view to it.
Call overhead is probably lesser than plain JS as everything is typed?
This is pretty cool, I actually use a lot of glmatrix for a sizable app that does a lot of rendering, but even there glmatrix calls probably account for less than 1% of each frames. I will still keep a eye on this as this is neat stuff.
&gt; Also, unidirectional data flow and using a state machine is overkill for most websites. Using a complicated solution because you know it and can is objectively bad, not good. You are showing off. I really don't get what is difficult or complex about it. 
u/CertainPerformance has it right, but here is an example if you are still confused // option 1, use the 'global' obj variable let obj = {'test':'123'}; function rr() { // don't over-write obj in the function let ti = obj.test; function oo() { console.log(ti) } oo(); }; rr(); // option 2, pass obj into the function (and I'll call it something different just to avoid confusion) let myObject = {'test':'123'}; // new variable name function rr(obj) { let ti = obj.test; function oo() { console.log(ti) } oo(); }; rr(myObject); // calling the function with the variable as a paramater
Yes, correct. I re-updated the question as I messed up the replication of the problem.
Glad I could help!
`ti` is not in `rw`'s lexical scope - just look at the indentation (once you indent properly, that is) and where the variables are defined to see which variables are in scope of which block.
Okay I appreciate the explanation, I think I was associating stack layering (and their associated scopes) as parent scopes, but clearly that's not the case. Thank you for your time!
If you take a look at any of the repositories for Hapi they have nearly 100% code coverage over all of the modules. Here's one such example: https://github.com/hapijs/hapi/blob/master/test/cors.js
wat
Are you sure about this? I've never heard anything like this before. I've also never written returns unless I wanted to return data and I've never had any problems.
Hoisting is like declaring the variable before everything else. It lets you do stuff before a variable is even declared. Const and let are not hoisted so it makes sense in that you can't do anything with them above where they are declared.
CORS isn't all that complicated. There are plenty of ways to get past it. For instance you can create a (free) Amazon Lambda that will do what you want, i.e. make the API call and forward you the data (or a part of that data.)
My OCD wouldn't allow this.
They’re judging whether or not to add this based on upvotes to the issue. Please go downvote. 
Ilegible. Si no sabe cómo formatear el código, publíquelo en algún lugar como JSFiddle.
how does one comment get +45 and someone agreeing with them get -2? IS THERE NO ORDER, WHERE IS THE HUMANITY?????
The tests for [gl-matrix](https://github.com/toji/gl-matrix/) are interesting because they need to test mathematical correctness (at least to some degree) and also deal with floating point inaccuracies.
no
I disagree with this one in particular (space in function/method declarations), but they need to add a space after function keywords: `function () {}` Currently, it's: `function() {}` There was a separate issue opened for this I believe.
Development is a constant process of learning new things: technologies, design patterns, teamwork, client management, deployment processes, etc. As such, I would pick something that seems appealing to you and tell your story. Why do you like to / want to do what you do. What have you done that illustrates that and shows what you were able to accomplish? If you are interested in building things, find other people in your area, at school, on the internet and work with them to build things. Talk to people about what they like. If people decide to stop using Angular in 4 years, that story is still valid and demonstrates your value to an employer. It sounds like you have an interest in many different areas and from what I gather, Node.js development might be a good place to start. A lot of popular frameworks use route / controller / service / etc concepts you will re-use. In my experience, that is the largest hurdle to many Node.js programming, but you are probably already familiar with those concepts. You can use React.js to build a website and then also use it with React native to build a phone app. You can use Electron to make a desktop app from React.js as well. To me, React.js feels like I'm programming in JS while Angular feels like I'm learning a bunch of Angular specifics. Good luck and have fun!
&gt; More like not even bothering to want to understand it, at least not any more than I already do. Sign of a terrible developer
Siema reins supreme if you’re looking for a dependency free ES6 carousel component
I agree https://github.com/prettier/prettier/issues/3847
Nah. I just downvoted you instead. Javascript needs work to make the language not look like the massive pile of garbage that it is.
Why not both? Put it into a config option.
&gt; If the proposal is adopted, it will put Prettier out of sync with virtually all existing JS code today. But it would put it _in sync_ with Standard style, which feels like it's gaining a little traction. If we refused to do anything that differed from past practices, we'd get nowhere.
They’re trying to add as few config options as possible to remain an opinionated formatted.
Sooo one thing Im noticing is Im not seeing any live demos provided in the repo or their website. 
Ummmm, no other language has this. This "style" is rediculous and makes it look like the params are a separate entity from the function. Why do js devs have such wierd taste when it comes to style? It's like they're driven to style just differently than any other language for no reason. This style is ugly and makes no sense
It's ugly af and doesn't follow any coding standards for any other language. No
Prettier is a useful tool. To me, it feels like a sibling of ESLint, but attacks code consistency issues from the other side of the spectrum. IMO, it’s to its own detriment that it’s not configurable like ESLint. I want to use Prettier, but that it breaks my Standard style lint rules prevents adoption of it for me, where I can see how it could compliment ESLint so well if it were only configurable to that degree. 
Fair enough, I wasn’t aware Airbnb was more popular. 
Some arguments against more configuration: https://prettier.io/docs/en/option-philosophy.html https://github.com/prettier/prettier/issues/40 Prettier only conflicts with standard’s *code style* rules but not their *code quality* rules. And you can configure semicolons and a couple of other things. Some things (like the space after function names), you just have to accept but they can easily be used together this way. (correct me if this is wrong, I’ve never actually tried using the two together)
`let`’s behavior is the preferred choice compare to `var` in most cases. It’s lexically scoped. 
I'm not really seeing the benefit of this over using a promise chain without the hooks, which would achieve the same functionality without another abstraction. I'd make a payment service with the post and pre as async functions and then chain them in an execute/run function and utilize the service instead of the vanilla function. All I see here is sugar over creating your own promise chain, and another layer of abstraction.
Consistentcy is king. As a community we just need to choose something and stick to it.
Thanks for catching that mistake, updated. 
I disable it for function call argument list. 
It’s a style guide. People who works in the same project should follow the same one. Are you declaring that your project should mix tabs and spaces?
I’m not terribly familiar with the Prettier community as I haven’t invested much time into it after understanding that it wasn’t compatible with the code bases I work on everyday, but after reading the philosophy, it makes sense. And you’re correct, the code style ESLint rules for Standard can be overridden if using the Standard ESLint config package
The larger problem is the prevalence of two space indent. Indentation but be consistent, and also (more importantly), it must be 4 spaces. Two space is half way to no indentation at all, after all.
Stop whining. Prettier has a policy to not screw with existing formatting output. If this is added it ***will*** be an option
Both the main site and the docs page seem to have demos, at least when I'm viewing on desktop.
&gt; it will put Prettier out of sync So just run that code through Prettier and be done with it. 
Why are people bikeshedding about this even? The entire purpose of prettier is that you can write code as sloppily as you want (style-wise), press ctrl+s and have it automatically conform to the style of the every other prettier-styled codebase, and never even think about what the rules of that style actually are. Even without bikeshedding about spaces, a lot of prettier output is already dumb, e.g. long template strings w/ interpolations, `{' '}` after JSX text nodes, needless diffs in package.jsons, etc. But it's consistent. So, just like anything else, it has pros and cons. If you don't want machine cold consistency, then just don't use prettier. Or do anyways. I use it at work and I skip it for personal stuff. It doesn't really matter either way.
No they’re not. You just made this up it literally doesn’t say anywhere that this is a popular vote 
&gt;Why do js devs have such wierd taste when it comes to style? It's the hipster mac users that spent a weekend learning coffeescript. "Nobody uses windows for coding anymore. It's all mac &amp; linux!"
Two-space is double the non-indentation when you're set to use tab indents.
I don't use prettier, but I've been writing this way for years. The space indicates that it's a function declaration and not an invocation. I don't really get the argument for omitting the space.
What's the goal? I read most of the thread on github, and while there's lots of arguing about the why or why not, the only thing that comes even close to stating the goal is drek of the highest order. &gt;The key arguments is: Searchability: You can find any function or method declaration my searching for e.g. method ( or identity &lt;, or even just name[space] (mostly). &gt;It also provides a clear and immediate difference between declaration and invocation. The both arguments are plain bad. Pure justification. *Nothing more* than a solution (read: someone's personal preference) searching for a problem. The "clear and immediate different" bit is ***egregious*** justification. Has anyone, in the entire history of higher order languages, ever become detrimentally confused between function declaration and function invocation? Ever? Jesus Christ. I'm not even a paid programmer and I've only had prettier installed on VSCode for a couple of weeks. But if this group of developers believes that this kind of grating against convention, supported with such BS explanation, deserves even so much as the time of day, then they and their project need to be just plain forgotten.
A decision based on a github issue that has 70 soemthign upvotes on a tool that has hundreds of thousands of users. You don't make a change like this in a tool with that many users without getting slam-destroyed murdered in the days following the update. I wish them luck.
I use rollbar. Logging is asynchronous. Easy to set up. Freemium plan is decent. 
The only sensible opinion on this thread. 
"hipster mac user" is basically one word here. It's the kind of person that believes that their counter culture stance (stocking caps, v-neck white tees, macbooks) is not only mainstream but defacto... because they don't associate with anyone outside of that. 
How does configuration make it less opinionated? Their defaults would still be in place. 
I dunno, I always looked at it in a simpler manner. Keywords (not only `function` but `if`, `while`, `for`, etc.) get spaces before the left paren. Names do not. In the end, it's the same as Crockford's reasoning but also appears to be more self-consistent. By this time, I don't think most of us can even imagine putting a left paren after `if` without a space between. For the same reason, I can't imagine the same with `function`. To OP's point, I agree. After all this time, putting a space after a function name would make it look like a keyword to me. IIFEs would look downright weird. Also, nearly no one does it.
Ah, yet again an "I can’t think of" turns out to be a "I blithely assume but have never bothered to actually check" in disguise. ;-p
I'm pretty sure its a fact that that two space indent, relative to four space indent, is half way to no indent at all. This is just simple math. Also, this was a joke, you should lighten up. 
idgaf. add it. 
I'm the only one thinking that 100% coverage is not the same than excellent tests?
&gt; They’re trying to add as few config options as possible to remain an opinionated formatted. Well, achievement unlocked. Their formatting is very opinionated. But it'll be also be very useless, if it differs from accepted conventions for the JS platform for no good reasons at all (and reading the comments in that thread, I saw no good reasons).
A tab character, and it has to be set to 8 characters, and the editor window must be set to 80x25, and if your function doesn't fit or you have more than two levels of indentation you're fired, demoted and executed.
then I would go with JS/Node, avoiding Java, PHP, etc..
&gt; React.js feels like I'm programming in JS while Angular feels like I'm learning a bunch of Angular specifics same here, Vue is fine too. 
to be fair their original point was just that the Standard style guide does have space after function name declarations and it does have some traction. so it's not like prettier is discussion this flag out of the blue.
prettier already has flags for other options like --no-semis. makes sense to have flags for other popular styles. not really a big deal.
Just a heads up await* is the new promise.all it is literally impossible to find any information on it because of the way search handles the asterisk (I'm assuming) but I do love that await for of for handling async in series. Great write up! 
Sure. I just want to underline my point about Crockford and consistency. This is basically what his linter rules said: // No-space = incorrect style: if(b) {} // looks like invocation of function `if` while(c) {} // looks like invocation of function `while` for(;;) {} // looks like invocation of function `for` catch(e) {} // looks like invocation of function `catch` var f = function() {} // looks like invocation of function `function` // No-space = correct style: foo() // invocation of actual function return name() // returning result of actual function var x = typeof name() // invoking actual function Okay. So, after looking at this, and when accounting for *style consistency within the language*, is the following construction correct or incorrect? function name() {} Personally, I would have expected this to go in the "incorrect" category because you're not invoking anything and it looks basically identical to a bunch of things already in the "incorrect" list. But Crockford thought it was more important to distinguish function declarations from function expressions, since `var foo = function bar() {}` appears syntactically ambiguous (it's not) and even though he also has rules to forbid this exact construction. (And for the pedantic, no, I don't think anyone ever thought `if`, `while`, etc. was a function. That was just Crockford. That was his thing.)
What’s people’s actual reasons for disliking this? I’ve been using standard for ages now and this rule is really handy.
I remember seeing a post about how es6 code is still put into the do not optimise bin in Chrome. I saw that a long time ago so I would have thought things would have changed by now
In the same document, no. But in the same project? I really don't care. 
What do you mean hack it?
As in, can you give me an example of user code that might be able to escape the sandbox and execute something outside of the api..
It’s meaningless but it’s the same for everyone in the project. That’s why it’s a styleguide for people who work there in the same project. It does not claim to be the best way in the world to write code. It’s for people in the same team to set aside their minor differences and just get on with the real problem. 
Bullshit, you can't learn everything, and React is just something I choose not to.
Formatters bring consistency and legibility. There's nothing wrong with arguing about what's easier to read.
 async function doubleAndAdd(a, b) { [a, b] = await Promise.all([doubleAfter1Sec(a), doubleAfter1Sec(b)]); return a + b; } You could also just use await in the `return` statement and it would still happen in parallel. async function doubleAndAdd(a, b) { const doubleA = doubleAfter1Sec(a); const doubleB = doubleAfter1Sec(b); return await doubleA + await doubleB; } 
The entire point of Prettier is to remove the discussion about style rules. Consistency is the only thing that matters for a project and that is provided no matter the rules. So no. I don't give a crap.
Weird. It looks completely fine on my end. I'm on a MBP. You're not using IE or something silly like that right?
 (function(){}).constructor.call(null, 'return window')().alert('HAX') 
Why would you use a @bind decorator when class properties/arrow functions will become native once it hits stage 4? V8 might even be able to optimize class properties in the future. 
I hate this.
dude youre da bomb
It was only supposed to be a dumb joke, but fair point if I had been serious.
If anyone happens to be following this, I figured it out! The above code stopped regular scrolling, but didn't fix my specific problem at all. Then I activated Squarespace's Developer Mode and found the following in the site's 'site.js': _setupKeyHandlers: function() { if (!Modernizr.touch) { this.listeners.push(Y.after('key', Y.bind(this.prevProject, this), window, 'down:37', this)); this.listeners.push(Y.after('key', Y.bind(this.nextProject, this), window, 'down:39', this)); this.listeners.push(Y.after('key', Y.bind(this.jumpUp, this), window, 'down:38', this)); this.listeners.push(Y.after('key', Y.bind(this.jumpDown, this), window, 'down:40', this)); I just removed the first two 'this.listeners.push' lines and now everything works perfectly!
For backend there is two main branches C# for the windows server backend And java for the Linux server backend Both ways are equally viable. Sure js and python is gaining ground but as your php your most likely used to fronted stuff. A full stack dev. Is never perfect he got his roots in one of the two sides. A backend dev is very narrow of his field of expertise and very specialised. A front end dev. Is wider and have loads of knowledge about many different technologies. But if you want to do backend I would recommend java as you should be familiar with the LAMP environment. 
Honestly, when people say things like this it makes me wonder if they've ever worked on a large, distributed Javascript project. There's code from dozens of sources, repos and libraries incorporated in every large project. You'll be editing code written by hundreds of different people. You want to force a rigid, pointless indenting standard across hundreds of individual .js files? Jesus, if your coders can't open a file and instantly see what the indentation (or function bracketing) standards are and adapt to that individual .js file then your coders are neanderthals. This is like arguing about which end of a hard boiled egg to start on. 
Hi! I think if you post this as a github issue, TestCafe devs will help. https://github.com/DevExpress/testcafe/issues
Damn.. that's gonna be quite a challenge to try and fix.. I tip my hat to you, good sir.. well done.. ;)
What are you talking about? K&amp;R has parens on a new line below the function header. So no, it was not K&amp;R. All that aside, though, Crockford was all about internal consistency to avoid syntactic ambiguity. That was his number one goal for his linter. And he had excuses for EVERYTHING. But he chose to bail on his own rules for function declarations in favour of staying consistent with non-JS languages. 
There’s no arguing. The styleguide is there. Follow it. Done. 
Never write a for loop again! ... That's in theory anyway.
"There's no arguing" ... "You are the one arguing". I'd hate to see your code.
I’d hate to see yours as well. 
For 30 bucks, I'll maybe write a function that prints "eat my shorts" in every 16M RGB colors, but that's about it.
You use my code. I promise.
We can't have people behaving like adults on Reddit!
Depends what you want
Doesn’t matter. I’m not working with you lol. 
No you aren't.
Yes it's called 1TBS and the only place it deviates from K&amp;R is that (and I certainly said so). So yes, in every curly-based language the basis was K&amp;R, the brace style is not the only thing K&amp;R stipulates, and the braces style is about the only thing that 1TBS deviates on from K&amp;R.
Same here. I don't use prettier for other reasons, but people getting all butt hurt about the possibility of this change seems stupid, and I think goes against what prettiers mission should be if they are to remain opinionated without configuration. The aim should be to provide a style that is most readable.
Okay.. I may have thwarted your hack now.. got any other tricks up your sleve..? :)
It's what it's called and most people understand that. While I myself also overestimated the userbase (I did for a while thought it's bigger than, say, Airbnb since low-semi was seemingly everywhere) I, nor majority of people, never really considered it to be the actual standard. If you don't automatically assume superiority and that people are stupid or being deliberately mean-willed you'll have a much nicer life experience.
Your hack didn't work.. you got anything else..?
Hmm are there a lot companies that use java for their back end in web applications? I indeed have to do more research which kind of back end languages are being used here in my area. Maybe java or even C# might be a better choice then PHP or even JS-backend. I am a Linux guy. So i would prefer java.
Didn't all browsers ban sharedarraybuffer because of the recent cpu exploits? Kinda puts a damper on workers as you still need to copy around data instead of sharing/manipulating it directly.
I dont know much about Java. But i learned PHP at school. Why do you think i should avoid PHP and go with JS/Node? Do you think that's the future?
Yeah i am still young and should invest my time in learning the right languages and frameworks instead of jumping all around and not specializing in any. Why do you think JS is stronger then PHP? They tought us PHP at school. But they didn't really teach us JS. I was a bad school btw. So i am new to this.
Okay thanks!
I heard the next step is to have space after **every** character, multiple times: f u n c t i o n ( v a l u e ) { r e t u r n v a l u e ; } c l a s s A { m e t h o d ( ) { } }
The trick with retrieving `Function` constructor is actually quite well known. Obviously kudos are due for senocular, I just wanted to point out that sandboxing JS code is an ABSURDLY hard task.
I have some experience in PHP/Symfony and Yii2 and also Python/Django. But i want to focus on pure web development back end (and full stack at home). Python isn't a pure web language. PHP might be one, but i don't know if it will be the best choice. I have to make a choice since companies work with just 1 stack. So i have to choose a stack and focus on that and search for companies that use that stack. I am already phast that processes of trying everything out. I now need to choose a stack and build projects and specialize in it and search for companies.
It's not bad, but I've been using [GitHub's own resources](https://blog.github.com/2013-07-15-choosing-an-open-source-license/) for this..
Thanks a lot!
Not that many people really use Prettier and the dominating code style (Airbnb) does not have this style. The second most popular (StandardJS) does, but I've seen it overridden in majority of Standard-bases codebases I've seen (which means that people just use Standard to lint for low-semi and a "prettier" low-semi option would likely be as popular, if not more).
Yes JavaEE 
Its basicly just an autocomplete function for zip-codes and location. But pm and ill send you the pdf which explains in detail.
Yes, this! I hate it without the space too.
While it's obviously not as popular with rank-and-file (Airbnb clearly dominates there) it does seem to be the more used Eslint style in the "big and notable" project category so outright dismissal of the style is every bit as pretentious as is their name.
Thanks!
ah! interesting!
Hereby thwarted! :)
I've been using Standard too, but have usually disabled this rule (and was disabled in a lot of projects using standard I've come across). How is it handy? (honest question)
Damn.. another pickle.. You've bested me again..! *shakes fist!*
Personally, I like the function name and the parenthesis together. Isn't the entire point to have concise, readable code? In my mind this does not improve readability whatsoever. The function name and the arguments go together in my mind. For me the added space doesn't buy you anything. Why bother with hitting space bar for every function declaration if it buys nothing?
 [].constructor.prototype.join=function(){return'pwnd'};eval('alert(1)') Hit the button twice ;)
I've long since lost interest but I do wonder, does Waterline support Postgres JSONB now?
Can you break my sandbox? http://businessinfo.co.uk/labs/MentalJS/MentalJS.html alert is allowed but access to location is not.
I prefer to comment as if I won't see the code again for 6 months and then will need to make a bugfix under extreme time constraints. Because that's what'll happen to at least some of it.
Isn't that the truth, I probably overcomment more than anything but it's what I am comfortable with. As I get older my memory down the road is suspect.
damn..! 
Will melons be provided?
My explanation is this... When someone suggests they wanna change X to Y, if you get angry about it, that implies you have a strong opinion, which implies you have thought about X, which implies that you are knowledgeable and experienced about X, which finally implies that you are an intelligent and contemplative person. However, if you just act angry and adopt someone else's opinion, people rarely challenge you. If you are unchallenged then you essentially become smarter in the eyes of those who have not questioned you. If you are unchallenged for a long time, you might also start believe you are smarter. This can have wacky effects like if people can't find another opinion to glob onto they will just take a contrary position. I used to do this a lot and still catch myself doing from time to time, and when I do I try to step back and ask why I am taking this position. If I can't form some sort of explanation or at least apply some sort of values based decision about why I have that position, I back away. Anyways, regarding this subject, I have preferences about coding style but if I look at another style long enough that becomes normal too. I find the main things nowadays that increase readability are actually font, font size, syntax highlighting and project layout, rather than one style over another. No style, especially poor indentation is very hard for me to read. I may need glasses though. Finally, it is my opinion that linear code in files is no longer suitable for large complex projects. I think the next shift in coding will be as different from what we have currently, as what he have currently is to something like punch cards.
try me
Honestly though that change makes sense since most code at FB is formatted like that. Not agreeing or disagreeing with it, but it seems like it was a planned change and that it was probably considered a bug to not format like that before, not a requested change to a non-standard formatting.
Wow.. I've really learned a lot about javascript the past few hours! Thanks for the hacks, guys! :D
 Object.freeze(Array.prototype)
Use Vue. I kid (no, not really, sorry, had to do it). But seriously, how about lazy loading/code splitting? Are you loading everything up front?
Cool! are you joining my team now..? ;) :p
What abomination of a font is that?
Yeah, they're reaching for some reason not to use it. I like vue to... maybe we'll look at it again. Eventually we want to implement lazy loading and code splitting once we start converting our whole application, but our implementation right now is so tiny it's basically just react and a widget on a page.
Unfortunately, `&lt;![CDATA[` blocks get ignored by the parser - that's not where the text there is getting added to the document, and there's no guarantee a userscript would be able to run after the block appears but before the page script turns it into text on the page. Try **Inspect**ing the page after it's rendered and looking at the HTML there, see if it's different?
it came as a surprise to say the least but then again, it's not a big deal. Prettier's been great so far and they do give options for most formats.
Wait why jump to the conclusion to migrate react to Vue? I've done migration work before, but if you don't have a proper path planned out, it is going to be painful. The problem with migration work is that new hires have to potentially learn both frameworks. You might want to isolate migration work so that new hires only need to learn Vue. But before your team decides that, you really should just implement lazy loading with react.
[Yep! First thing under the description on MDN is a notice that all the major browsers have disabled it by default.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer)
I'm not jumping to a conclusion; I just said I'd look at it again. The migration is being led by a backend developer who hasn't followed the front end ecosystem changes since, well jQuery and Angular 1. He's not familiar with build steps, tooling, or modern frameworks but is extremely opinionated about what the front end team wants to use. I don't see how implementing lazy loading resolves the problem of the virtual dom being a fraction of a second slower on initial page load...
Server-side rendering. Defer startup js. If they are using a fraction of a second to determine they should not use a web-based technology, I recommend they all begin writing all their programs in assembly to native binaries, one for each major architecture. Unreasonable complaints deserve unreasonable solutions.
Updates for IE stopped in 2016 and the most recent version is bound to lose official support soon. At this point, it's just not viable to spend time and resources fixing annoying IE bugs. Support ends soon, and there's just [too few people](http://gs.statcounter.com/browser-market-share) still using it to really care. I guess it all depends on your target audience aswell. Though, we haven't established if /u/compteNumero9's problem originates from IE.
That was a nice question! You set something in motion, hopefully somebody else will use my lib to take it further :)
I love this. lol. We're considering server side rendering down the road, but right now we're still on ColdFusion, and I have no idea how to implement SSR with CF, and I doubt there are many guides for it. After we make the switch to node we might look at it.
Question 5 « right answer » is wrong... 
Unpopular opinion, comment everything that isn't super trivial. It's another way of implementing "rubber duck debugging". If you can't easily comment a line of code, then your logic can be improved.
If you can easily comment a line of code, you don't need to. 
&gt; The migration is being led by a backend developer who hasn't followed the front end ecosystem changes since, well jQuery and Angular 1. He's not familiar with build steps, tooling, ES6, or modern frameworks but is extremely opinionated about what the front end team wants to use. Why is "a *backend* developer who hasn't followed the front end ecosystem changes since, well jQuery and Angular 1" leading a migration where said *backend* developer "is extremely opinionated about what the front end team wants to use." Where is/are your *frontend* developer(s) in this?
Wow, people in this sub are jaded. This looks awesome! I'm definitely going to try this out, maybe we can replace some of our PHP backends if it's any good.
Oh sorry I made the wrong assumption that your page was slow because of large javascript file size because magenta_placenta mentioned lazy loading. That's the nature of client-side rendered SPA. It will always be slower than just serving a pre-built HTML file. But I don't know how React app would be slower than Angular 1 app in initial payload fetch. I think Angular 1 has larger framework size than React. As a solution, you can definitely use server-side rendering for React. You have to have a Node server that is serving the HTML because what the server-side rendering does is it runs React in the backend and fetches necessary data and stringifies the app into HTML. It doesn't let you have event bindings so React actually gets loaded a second time and the client-side React takes over after js loads. Basically the first render is a fake React app, then the real one kicks in. You don't want to start out building a normal React app and then convert it to server-side rendered version. It will be painful to migrate too. If you think you will end up doing server-side rendering, you want to start there.
Had me thinking there was an overlay popup or something. 
Good question. And I am one of the front end developers, any logic and justification I articulate is just worth less than these highly opinionated senior back end devs.
Please start voicing your opinion about how the backend should be written, even though you won't be writing or supporting it.
Hey all! This my first tutorial series. Id be grateful for your input. I’ve only finished the first 3 in the series. Would love to know how they can be improved and what concerns you all think I should focus on next. Thanks!
Sails as a framework is getting absolutely annihilated on HN: https://news.ycombinator.com/item?id=16749148
Too many damn frameworks.
&gt; ...differs a lot from how it would work with ‘classical’ classes... There is no single "classical" implementation. There's a variety of implementations across a variety of languages. JavaScript's classes have a lot of similarities with the classes found in Python, Ruby, and Smalltalk. Which means, for example, all your sample code that's meant to show the difference between classes and prototypes actually work just as well with Python's classes. class Cat: def __init__(self, name): self.name = name def meow(self): print(self.name + " meow!") mycat = Cat("Hector") mycat.meow() # Hector meow! del Cat.meow # removed the capacity to meow to all your cats mycat.meow() # AttributeError: Cat instance has no attribute 'meow' class Dog: def __init__(self, name): self.name = name def bark(self): print(self.name + " bark!") mycat.__class__ = Dog mycat.bark() # Hector bark!
seriously this is brilliant!
It’s a very popular one too.
far as the idea of TLDR part that is
Decorators will also be native once they reach stage 4. You might be interested in this thread which talks about this exact issue https://github.com/tc39/proposal-class-fields/issues/80
Yes! There is a total of CHF 50, 000 in prize money (paid in MLN tokens) to be won, with the winning team CHF 25, 000 of that!
Yes I know decorators have a new standard and will be part of core pretty soon but what I was trying to say is that V8 might not be able to optimize my decorators as well as it can for class properties because decorators are more generic in what it does whereas class properties only serve one purpose so the optimization path is more clear. I could be wrong and the performance difference between the two will be Jill but I still think using class properties is more expressive than an reinventing the wheel with decorators. 
It would be great if you could crosspost/move this to /r/typescript as it has it's own sub.
It is just a responsability and liability thing. You can be charged, by liability if you advice is used and not getting the "desired" result. You can be charged whether the user uses yoir service or advice correctly or not. Honestly legal stuff sucks.
Express is not an MVC framework. That's a bit like saying "why use laravel when you could just use apache". This is interesting to me because it gives you the file structure, an ORM, and builds out the MVC architecture for you. Not to mention auto generating api's to work with your controllers/models.
Some people want more? 
As a stop gap, look for a way to call js functions (or a small instance of node) from CF, and pipe the output back through to the client.
Do you ever go to the library and find yourself thinking "Too many damn books!"? You don't have to read *all* the books, and you don't have to learn/use *all* the frameworks.
Have you split your vendor libraries and the code bundle? With CONDITONAL GET (304), the page will only wait to download vendor.js on first load. After that it will just request the bundle.js if it has changed. My vendor is about 250kb (uglified) and the bundle is about 70kb. 
lol, good point. I've never been inside an actual library though. Just Google Play Books lol. That's my library.
Do they have an API or embed 
I was more interested in actual melons. Like some honeydew or cantaloupe.
I think Operator Mono. I personally dislike it for various reasons, but keep in mind it is an *objectively* good font. One of its goals which I think it succeeds handily at is differentiating between ordinarily similar characters (`l` and `1`, for example). It got a crazy amount of traction a year or two ago.
**Regarding performance:** - A fraction of a second is probably not a good argument (depending on the app) - Server Side Rendering is great, but adds a level of complexity that might not be worth it - I'd say the only strong argument is Search Engine Optimization, I you care about it, you will probably need it. - It is important to understand well react lifecycles and reconciliation if there is a focus on performance (gains depend on the app) - see https://reactjs.org/docs/optimizing-performance.html **Regarding the backend devs** &gt; The migration is being led by a backend developer who hasn't followed the front end ecosystem changes since, well jQuery and Angular 1. He's not familiar with build steps, tooling, ES6, or modern frameworks but is extremely opinionated about what the front end team wants to use. I think I can understand their worries, but in the end, these worries might end up impacting the project negatively. The frontend ecosystem nowadays is definitely overwhelming for people who have been away from it. It is incredibly tempting to choose vanilla js or jquery instead of learning how to deal with bundlers, transpilers and modules. I fell into that trap after being a couple of years away from the frontend. Carefully created an application using only jquery and at worked fine, until I had to keep adding improvements. It quickly became hard to maintain and test as it grew. You can argue that the application was not properly designed, causing the lack of testability and maintainability - but I think that it's way easier to properly design an application using modern frameworks (components are great), and the learning curve is well worth it. Today, we mostly have React applications using components that are easily unit tested with Jest, and webpack deals with **a lot** of stuff we had to do manually before - like handling cache busting, minification + obfuscation, injection of environment variables, to name a few. Another important aspect of using modern frameworks is hiring. I help with hiring in my company, and it is increasingly rare to find good frontend developers that are willing to work with older technology. Not just because it 'the shiny new thing', but because there is high demand - and staying too far behind can be seen as career suicide. You should try to show how the issues of using older tech outweigh benefits of the fraction of a second performance gain.
Only 23 !
It is xposted to /r/typescript
The diffs you can get around by not formatting your package.json with prettier. Ran into this problem at work. The interpolations with spaces 100% make sense. The idea, is you at some point want to wrap the line to the next one, but preserve the space in between content. Outside of using a non breaking space, this is a pretty damn good solution, and Prettier mostly handles this for you.
Is it just me, or this author conflating comments and API-level documentation? &gt; This is my favorite, so I’m listing it first. Logging is a nice combination between English and code. Depends. If you're going to replace useful comments that are only useful when looking at the code, with log messages, then your logs will be full of noise that are not useful to the end user. &gt; However we shouldn’t rely on comments when there are language features like tests or specifications that can serve the same purpose the same purpose? I've never seen an IDE rely on unit tests to tell you what the different arguments and return values of a method are. Tests are not documentation and documentation are not tests.
What if 'hide comments' was a code editor feature?
Ionic is working on a new one called Capacitor. It's still in alpha. There's also React Native.
I use WebStorm and the “go to definition” function isn’t always 100% accurate, so instead I simply cmd + f “myFunction (“ and I’m at the definition, then cmd + f “myFunction(“ for all uses of the function. Not used an editor or IDE where to go to definition function is 100%, so searching a function name plus a space and opening paren has just become muscle memory. Works everywhere and is fast.
No offence but you must not be explaining it well. It’s just a name, not met a single developer who didn’t get that.
https://prettier.io/ ?
Ionic is not half as buggy as the others. React native is a good alternative tho. That’s what Facebook, Instagram apps are built with. 
You probably shouldn't be. In law (at least in the U.S.), there is a distinction between "legal advice" and "legal information." All legal advice will include legal information (e.g., an explanation of licensing terms in this case), but it only rises to the level of "advice" if it *recommends* that the audience take a specific course of action based upon that information. Generally, as long as the information avoids any "you should" language, then it should not be construed as advice.
No
I don't think it has to do with your computer's speeds, TBH looks more like a Chromium issues (rendering tear got saved to a buffer?)
Curious what bugs you've run into with Cordova. I've definitely had challenges with it, but not so many things that have come out as bugs. I just find some plugins can be limiting, and performance overall takes a hit. It's hard to get it fast.
Solid! Now put it all into a function!
React native is awesome
It'd be nice if it consumes a standard select element instead of the &lt;ul/li&gt; structure. 
I’ll shamelessly plug my own library in here: **[Selectivity](https://arendjr.github.io/selectivity)** **(Selection Dropdown)** &gt; Selectivity is a modular and lightweight selection library. It has several optional dependencies and provides both jQuery and React bundles, but also offers a minimal VanillaJS bundle.
yeah exactly. i don't care either, as long as there's consistency and, ideally, it can just auto-format on save which is what prettier does. i think that's the point of linters tbh -- only the people writing the initial commit do the bikeshedding so the rest of us don't. :p
I've worked with your edition before. Do recommend! +1 and thank you.
I've never used React Native (although I do a lot of work in React) but I heard really good things about it. From what I understand it's basically the same exact thing, but you replace HTML tags with the OS-specific tags for Android and iOS. By all accounts it's a breeze.
**Authentication Required** on your links. 
2 sec
Tabbis (Tabs) link wrong. It's open siema repository. Can u fix please ? Thank u for these useful links!
This site is brilliant, thanks for the link.
Code isn't write-only. If you have to read code that was formatted with this tool, then you have an interest in the details of the formatting, and even in chosen conventions.
https://codepen.io/anon/pen/ZxMKqq
Forgive my ignorance but for a few of these libraries, is it really much easier than native browser implementations of such functionality? For example, Qwest appears nearly identical to `fetch`. Other items in the list looks really cool. Thank you for sharing this. 
Found a bunch of different ways... (function*() {}.constructor('alert("HAX")')().next()); (async () =&gt; {}).constructor('alert("HAX")')(); (async function*() {}).constructor('alert("HAX")')().next(); }),(() =&gt; {this.alert('HAX'); 
Keep using whatever you already know and like the best. While specialization is important, as someone who has lead teams of people with various skill level in the technology I focus on, the more important skill is being able to learn quickly and work in a team environment. Even though you don't work with the technology I'm referring to, if you talked to me about Symfony / Django projects you worked on, I would be happy to train you on the one we work with and be pretty confident you'd be able to contribute well very quickly. I don't know of a company that uses a single technology.
Sorry I'm consfused.... so the "true" difference is just the ability to wrote "new"
I'll have to check those out as well
These truly are the end times
My guess is that you mentioned you want to work on new projects. New projects are likely to be smaller, more agile companies like start ups or very large companies with investment in those technologies like React and Facebook. Established companies are more likely to have several (or many) legacy systems that need to be maintained, or they have preferences for those technologies so their developers can more easily switch between projects and they can standardize on infrastructure. Those companies are more likely to use .NET (Java) and Php. Since Node.js is relatively new, it's unlikely that they are specializing in those.
Way to go my dude! Isn't is just _dope_ when your code starts to make sense and it _actually does what you want?!_ What would be even cooler, is if I could use this code myself, elsewhere, but since I may not know what `a`, `b,` or `c` are equal to, how would I be able to use the above?
Nice!
It's going to be very difficult to give any feedback if the code is not formatted properly. Check out the reddit markdown guide. [Here](https://www.reddit.com/r/reddit.com/comments/6ewgt/reddit_markdown_primer_or_how_do_you_do_all_that/)
Hi /u/lifenautjoe, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Sorry dude! Thanks for the spot. I was being a copy paste warrior when doing this. 
Hi /u/BrewsClues253, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/aish69, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'.
Hi /u/BlastnoR, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/ben-loy, For javascript help, please visit /r/LearnJavascript. Thank you!
I looked into 2nd article in the serie, and I find this term "Redux-style project structuring" quite confusing... It has nothing to do with Redux
Thank you :):) Appriciate it.
Individuals are different so I don't want to make blanket statements, but I will say I have yet to find a codebase where my productivity wouldn't be improved by commenting. I've thought about it a lot, and come to realize that even on code that I, MYSELF wrote, even a week ago, comments result in immediate productivity when jumping back in after not seeing a particular part of the codebase for a bit. Things like optional function parameters, context on naming conventions when pulling lots of nested data structures, and overall quick summaries of major objectives in a file are super valuable. I've also inherited codebases without comments where I basically had to bug the crap out of the previous devs to have them run me through why they made certain choices. Compromise is happening all the time in software development, so if you can't document those reasons properly, the next guy in line won't have a clue why you made a choice that he may consider suboptimal. It brings productivity down across the board. As far as workflow, I typically try to write code as fast as possible, ship features, and take the ensuing slower period of review to just go through my files and comment everything. If I can comment something small on the fly I do that, but typically it's not worth it when you're trying things out and end up re-writing multiple times in a day. 
hm, what about commenting each function? Like jsdoc. That allows you to generate neat documentation
Another sort of alternative is a Progressive Web App
But that's often a reason to *not* comment. Because by the time you see the code 6 months later, someone may have made a change to the code but not the comments. Misleading comments are worse than no comment. 
We were fighting with cordova in my last gig for awhile. Until one day we had enough and switched to React Native. The switch itself was quite straight forward. We rendered a Web view in the react native app and inside the web view our old app which was rendered by cordova previously. 
That seems.... brilliant
I generally agree. I will say TypeScript has helped me significantly with a lot of what you're talking about here: &gt; Things like optional function parameters, context on naming conventions when pulling lots of nested data structures Since everything is strongly typed, I don't generally need to worry about typos, mark what's optional, what data types can be used, etc.
Your Tabbis link points to Siema. It should point to [Tabbis](https://github.com/jenstornell/tabbis.js)
Why did you remove it OP?
This was fixed. :)
You no longer have to fudge around with prototypes anymore, you're forced to use 'new' when instantiating, but the underlying mechanics are the same.
`fetch` isn't supported in all browsers (looking at you, IE) unfortunately, so Qwest or Axios (npm package) are best used for full browser coverage.
Thank you!! Will definitely check these out
Check out [image-focus](https://www.npmjs.com/package/image-focus) - a vanilla js tool for cropping an image based on a focus point.
Alright :( sorry , thought it would be useful to other js devs over here.
At first look of Store.js I thought, why would I want a lib for one of the simplest and easy to use APIs of the browser (localStorage). LocalStorage has been [supported](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage#Browser_compatibility) since IE8 But it actually seems like a nice little wrapper around localStorage which I might be willing to check out
Nice list! Already used some of those tools in my smaller projects. I think one library is missing from you list: Moment.js (although most devs might already know it) Working with dates is a real pain in the ass, especially with vanilla JavaScript.
Great idea for a post. I'd love to see more lirbaries added.
You won't regret it. I have a project that works heavily with LocalStorage and store.js has come in exceptionally handy for me. Especially when you are working with JSON values in LocalStorage. Plus I'm pretty sure it like 2.5kb when minified and gzipped. 
This is probably possible but not easy. In the AST the info about line and column is available but not very easy to use. 
How could I forget this glorious little addition. Will add in part 2.
Writing a whole article about the history of a framework and still not figuring out it isn't called React.js?
No hablõ Espanol
I've used react native on one project so far, and I liked a lot of things about it. The main issues I had with it were: 1. Any kind of complex styling can get difficult and restricting. Our designer gave us designs that would have been a little tricky with CSS, but were a huge pain in React Native. Specifically things having to do with visible overflow. 2. Random runtime bugs. On multiple occasions I experienced app crashes caused by bugs in touch handlers. As in the app would crash sometimes when pressing a button that does nothing. 3. Lots of touch handler issues. You can't just add `onPress` handlers to anything like you could on the web. The various touch components (`TouchableHighlight`, `TouchableNativeFeedback`, `TouchableOpacity`, etc.) all had slightly different quirks and some just didn't seem to work (would display as all black). 4. Android dependency issues. Every time I added a new dependency, I'd have to open Android studio and update everything from 23.0.0 to 25.0.0 manually. 5. Upgrading woes. Trying to upgrade a React Native project using `react-native upgrade` would usually involve a couple hours of fixing shit that got broke by the upgrade. Coming out of that project, I didn't want to start another project in React Native unless it was a simple app that just needed basic buttons and forms with minimal styling. Some of these issues have probably been fixed in the year or so since though.
I prefer [date-fns](https://date-fns.org/) over moment lately for the immutability and individually importable functions
Where was this comment two weeks ago?!?! Dammit. +1
I would add [Cleave.js](https://nosir.github.io/cleave.js/). It's an awesome input formatter than can work with Validate.js to ensure client side validations before they hit the server side.
A chance to shamelessly self-promote? Don't mind if I do [lazy-slider](https://yarnpkg.com/en/package/@lukeboyle/lazy-slider) - lazy loading carousel [units](https://yarnpkg.com/en/package/@stak-digital/units) - modular unit conversions [local-storage-manager](https://yarnpkg.com/en/package/@lukeboyle/local-storage-manager) - Local storage abstraction util [mouse-near](https://yarnpkg.com/en/package/@lukeboyle/mouse-near) - Trigger callback when mouse is near a target [when-clicked-outside](https://yarnpkg.com/en/package/@lukeboyle/when-clicked-outside) - trigger a callback when mouse is clicked outside an element
To me, VainillaJS is using JavaScript + the browser API, without libraries. Have I been misusing the term?
Global average stats are all well and good... but I know from analytics the audience I develop for sit around 19% IE on desktop. That's too big a chunk to ignore, as sad as it makes me.
Not seen this polyfill before... Where have I been?! I stand corrected.
Why don’t you just use Babel?
Because they don't know how to do it well. Hater bitches. 
What is the difference between a “vanilla” component and a React component?
This is the best reason on here. 
This is a vanilla js thread so I assumed Babel wasn't allowed 🙈
Why wouldn’t you use Babel, but you would use a bunch of other libraries?
I only started using it a few months ago myself. I just googled around and found it and figured since it's coming from GitHub themselves that it would be pretty legit
Most "big and notable" projects do *not* use Standard. It is not the style used by jquery, react, preact, bootstrap, babel, TypeScript, flow, express, angular, v8, spidermonkey, RxJS, lodash, istanbul, node, ember, d3, socket.io, qunit, jest, ava, jasmine, webpack, polymer, chartjs, gulp, bluebird, ramda, esprima, yarn, handlebars, immutable, uglifyjs, grunt, jsdom, glamorous, koa, or eslint.
don't use prettier
I laughed pretty good at that - and I know how you feel. The only reason this boilerplate exists is because the fact of the matter is that a lot of opportunity exists for larger-scale WP sites. Even if it sucks, which it does, there is a market for well-built WP sites that avoid the 100,000 plugins and off-the-shelf themes that are implied nowadays when someone mentions 'wordpress'. We don't want to be a part of that shit-show, so we figured out a way to force WP into submission. Took some work on the front-end but if you're only dealing with the WP API, then it's no different than any other API on the planet. Check out the repo - there are a few custom routes that we've defined to deliver only what we want and it's pretty damn simple. Not to say that I don't wish there would be a better solution on the market. That's a topic for a different time, though. 
Babel is always allowed! I mean, most of these components are coded up in ES6 so transpilation down to ES5 is generally recommended. Babel is cool and all but as someone who uses [Rollup](https://rollupjs.org) as my bundler, I generally think [Buble](https://github.com/rollup/rollup-plugin-buble) is faster and more logical choice for most of my use cases. I think everyone here has to read a little bit more on what `qwest`does to better grasp what it offers. I mean sure, you can use `fetch` but qwest does fit some use cases and keeps things contained in nice manner.
I think you’re getting confused :) Babel is a transpiler, not a library
I don’t believe you’re using the term vanilla wrong, but “libraries”. VanillaJS refers to JavaScript + (node|browser) native api without an abstraction framework such as Jquery. A library is a package or module of common functions.
Ok, thanks so much for your help. Let me see what I can figure out
You might like https://npm.im/cogstyle 
Thanks for the advice!
Thanks for making it!
I know what Babel is but I don't get the reasoning behind using a bunch of 3rd party libraries but refusing to use babel. 
Mate can you open this link in reddit and see if its working as intended? 
When you put it that way, this is *super* clever. It’s been a while since I’ve done any design / contract work, but I’d much rather play in this sandbox than Wordpresses. You can almost pretend that PHP isn’t involved at all! Thanks for the response, and the write up. This is super cool!
Sounds like you've got some irrational problems you need sorted out with a therapist. Stop being a judgemental prick. 
Well said 👏🏽
That's true of all of these. React is just a JavaScript library. You can write react without JSX. 
Brace yourselves, the wasm fanboys are coming
Looks like some major limitations on the GANTT interactivity. There are better free / opensource alternatives in that regard.
With your current fixes if any of the strings 'Object', 'Array', 'Boolean', 'String', or 'Number' (as variables, comments, literals, etc.) appear in the code it won't run. Also, adding }),(() =&gt; { to the beginning of a script will prevent setting constructors to null and calling `Object.freeze` (so most of the other exploits listed will work again).
VanillaJS movement....going strong...currently rewriting my heavy vue app to vanillaJS. what I have gained so far, app size is far smaller, i'm looking at kb instead of 1mb. page renders way faster. modular, and mostly everything is functional...goodbye to 'this' how it's set up: i have a VIEW functions(data), then ACTION functions e.g gettingData then of course a static model which is an skeleton to represent how the data is supposed to look like. No heavy mutations going on, everything is copy or passed by value 
It's not the second `then` being second that makes it work, it's it being an arrow function. You see, when you are in a function it has it's own `this` object. Arrow functions on the other hand, do have have their own `this`, they use the `this` in the scope they were created in.
Yeah. On the upside, I know https://github.com/paypal/downshift pretty well now. ¯\_(ツ)_/¯
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
Thank you very much. I'm going to shamelessly steal some of these for my projects. 
That's a great help thank you !
React Native is dope, and has improved tremendously in the past year/months. A lot of the big issues are fixed. Many big names are using it.
I never thought about "vainilla JS" that way. Thanks for the explanations.
I never thought about "vainilla JS" that way. Thanks both for the explanations.
Noob here. Can you pls explain what's going on here?😇
It's pretty much still vanillaJS, only you are borrowing code from other people in the form of libraries made in regular js. Such that their vanilla js code are structured in such a way that you can use and apply it on any project of any kind and architecture.
This doesn't work? `Math.floor(new Date('2018-04-05T13:37:00').getTime() / 1000)` I didn't actually try it (am on phone) but this should get you a unix timestamp in seconds. 
Ran into a redirect loop when clicking on "Episodes from the menu". Not sure if you're aware of that. Site is super fast though, looks good!
This code is using some trickery to get to the [Function constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function). Using the Function constructor you can create functions from strings. The code in those strings gets interpreted outside of the sandbox that was created to prevent other code to be run. Specifically, that code doesn't pick up on variables scoped in any of the parent scopes ignoring them. For example, comparing to a normal function: { let window = "Hello"; (function(){ console.log(window) })(); //-&gt; "Hello" new Function('console.log(window)')(); //-&gt; Window object } You can see that a local `window` variable was created here and replaced with "Hello". This is what any normal function would see if created in this scope as seen with the first example. But the Function constructor ignores it and sees the global window object instead. I use the Function constructor (which can be called without `new` to create functions; in fact the `call` that's there now isn't needed either) to return a reference to the window object. From that I access `alert` which is a global, window function but not one allowed in the sandbox, showing that I've bypassed the sandbox's filter. Piece by piece: (function(){}) This gives me a function - any old function will do here. I could have also used an arrow function (`()=&gt;{}`) to make it shorter. (function(){}).constructor This gives me the Function constructor object - the same object/function that can be used to create other functions with strings. Even though the function I used to get it wasn't created with a string, it still refers to `Function` as its constructor since it, being the function that it is, inherits from `Function.prototype`. That gives us what is effectively: Function Adding the next bit, using the Function constructor: Function.call(null, 'return window') This is the same as `Function('return window')` or `new Function('return window')`. They all create and return a new function which, when called, returns `window`. Not sure why I used `call` here. Maybe I thought it just felt more hacky ;). Function.call(null, 'return window')() The added `()` here means the function is getting immediately called which in turn resolves to what is now: window The final bit gives us: window.alert('HAX') which is calling the alert function from the global window object.
I'm dumbstruck. Took me a while to understand it but. This is ingenious. Couple questions. Will this work on sites that use libraries that strips js from strings to prevent XSS? If instead of call(), doing apply() will also do the trick? And finally how to fix this?
where's the z?
This looks exactly like ur previous comment but does it async and tries to poison after the promise resolves. What difference does that make?🤔
Completely unhelpful: I switched back to webpack 3. I tried for several days to find a work around but as you soon realise with programming: often there’s a better way. I love webpack and I’m sure that they’ll work out the kinks in extract-text-plugin.. but right now I need to get work done and can’t wait for the version 4 ecosystem to become stable. YMMV.. Good luck anyhow!
People call it that probably because the site is Reactjs.org. And if we’re worried about semantics, React is a library, not a framework. 
ya got me 
That kind of comment is actually completely helpful as many people reading a post like this one might be in the same situation as you’ve been. So thank you :)
A client-side cookie setter? Score! My localStorage setup in this project is getting ridiculous...
You can install extract-text-webpack-plugin@next for webpack 4. Obviously this comes with all the caveats of a non-stable release.
You could give `mini-css-extract-plugin` a try =&gt; https://github.com/webpack-contrib/mini-css-extract-plugin/issues As khellific mentioned, the beta version of `extract-text-webpack-plugin` appears to be working as well, but gave me a lot of scary "entry undefined" messages in the console at build time, so your mileage may vary I am using mini-css-extract-plugin (with postcss) in place of extract-text-webpack-plugin like so: rules: [ // We're using different rules for css/scss, as we don't want the css class names to be changed { test: /\.css$/, use: [ MiniCssExtractPlugin.loader, { loader: 'css-loader', options: { importLoaders: 1 } }, 'postcss-loader', ], }, { test: /\.sass$|\.scss$/, use: [ MiniCssExtractPlugin.loader, { loader: 'css-loader', options: { modules: true, localIdentName: '[name]__[local]___[hash:base64:5]', // Edit this to change how class names end up being generated. minimize: true, importLoaders: 2, }, }, { loader: 'postcss-loader' }, { loader: 'sass-loader' }, ], }, ], 
What features do you see missing? Might be added to Gantt charts' [roadmap](https://www.anychart.com/products/anygantt/roadmap/). Source code is [open](https://github.com/AnyChart/AnyChart) btw; free version for non-commercial use is available.
I recently upgraded our build system to webpack 4, but am not very confident in the plugin ecosystem at the moment and am strongly considering rolling back until the core plugins are updated
Thanks. If I can save anyone the frustration that I went through recently, then I'm happy.
Use extract-text-webpack-plugin@next and it works. I’ve been using it in my production build since Webpack 4 came out with no issues.
I wouldn't categorize meteor as an "old framework". It's not really old, it's just going through a phase right now were it's not the new hot thing. Some might say it is a necessary evolution for the platform to become more robust in the long term, but I digress, you can still use whatever front end library(React) or framework you prefer. Meteor's job in my stack is to make development more hassle-free and get things fast out the door. I run a Meteor backend with React frontend, the way I see it you get to have a better intro into development using Meteor first before switching it out with whatever Webpack version is the latest or whatever is trending in the JS world. TL;DR: You get to learn and improve your JS with Meteor as much as any other framework, and when you become proficient enough switch out whatever part of the stack you prefer and keep learning from there.
thank you 
 this is just one of those tricky things you eventually get the hang of, and I speak for all JS developers that use react, THANK GOD FOR ARROW FUNCTIONS.
Indeed. These can easily be arranged!:)
I'd say that what you've created here is a crude frontend view layer rather than a CRUD application.
What I was describing and what we were using is that react native is just a wrapper around a Web view and it rendered plain Web application inside. The inner app could be written in anything. CSS could be used, Angular, jQuery or anything you want. That could help you with some of the issues you described. 
I'm so sorry if I did not make it clear. My complaint was more about BlazeJS. I've been using React in my previous job and knew it pretty well, and I was complaining because I was feeling like I'm regressing to an old technology. I do not have the authority to make framework decisions for the company, and it looks like they won't be switching to a modern framework for a long time. 
Found the hipster mac user.
&gt; angular 1 No way a angular 1 loads up faster than a React applications. I have developed a few apps with angular 1 and the pop in is definitely noticeable. 
I wonder if SvelteJS qualifies.
It seems to work fine for me? What is your experience?
True, unfortunately accessibility is not one of my expertises. I’d happily accept any PRs though!
Great idea for a post! I'll have to use some of these. Shameless plug for [Keyframes](https://github.com/Keyframes/Keyframes), a vanilla lib to manage and manipulate css keyframes in javascript.
Take the ratio of the pointValue location in the value space to the total size of the value space, then apply the ratio to the `y`s? const maxValue = 250; const minValue = 50; const yStart = 50; //the top of the chart space const yEnd = 650; //the bottom of the chart space const pointValue = 156; //this can be anything between maxValue and minValue; const ratioFromMinToPoint = (pointValue - minValue) / (maxValue - minValue); const yPointPosition = yStart + (yEnd - yStart) * ratioFromMinToPoint; console.log(yPointPosition); Comes out to 368, which seems right - it's a bit over halfway from 50 to 650, just like 156 is a bit over halfway from 50 to 250.
Got it, I think it's a step backwards only if you will exclusively use Blaze. If you keep using react for any side projects you're still learning on both aspects and will probably be a more complete developer.
Thanks for the response! I think we're on to something, can you somehow reverse your computation? Somehow my highest value is being plotted at the bottom and the lowest value being plotted above.
Did you try newest version? It seems to be compatible with webpack 4 from its changelog https://github.com/webpack-contrib/sass-loader/releases/tag/v6.0.7 
Yes almost any startup, or new projects tends to use some Javascript in some way in the Back-end too. And comming myself from .NET C# and PHP, I'm happy I stick with JS and Node, I love the syntax and funcional part of JS.
Sure, I understand that there are many good reasons to use Moment. But you specifically mentioned ISO-8601 to unix timestamp conversion which is almost the only conversion that's actually very easy with the native `Date` class. Also, a place where you convert an ISO string to a unix timestamp is not typically a place where your client will want changes since it's unlikely a user-facing value.
You could build optashift-employee-rostering with "mvn clean install -DwithoutGwt" so it's only a REST service and deploy that openshift and then contact it from your node service as middleware. Once there's a docker image for optashift-employee-rostering, this will be much easier to set up.
After a hundred audible groans from my office table I think I got it. I only had to modify your formula a little bit to reverse the result and fix an almost unnoticeable plotting inaccuracy. const ratio = (pointValue - minValue) / (maxValue - minValue); const y = ystart + ((ratio) * (yEnd - yStart)); const finalY = (yEnd - y) + (yStart); Certainly will probably not get this without your help! Thanks u/CertainPerformance!
You sunk my battleship!
Substitute in `y` in the bottom and you can simplify to const finalY = yEnd - (ratio * (yEnd - yStart));
You can protect against these type of attacks by using Function to check syntax. E.g. function checkSyntax(js) { try{ Function(js); return true; } catch(e){ return false; } }
Love the list, love the way you write!
please someone post here or to /r/javascript when the plugins hits stable.
This is why I think the “JavaScript fatigue” thing is a fallacy. It’s actually a “broken ecosystem fatigue”. How many times have we all tried to get a new tool / framework / plugin going, only to run into specific version problems and compatibility between each of them? Learning the tool ITSELF seems to be the secondary concern. API’s in tools that should just be quite straight-forward constantly change. Docs don’t get updates or are sparse and that blog post you thought would be helpful turns out to be a year out of date (but you also didn’t know that because nobody seems to put dates on articles anymore!). Sorry I’m having a rant, but I tried Webpack 4 yesterday and it was a complete compatibility disaster for me. Cryptic errors and dubious warnings. 
this is great! thanks 
That code does not seem to be correct, so it's hard to argue about its merits or lack of them. Anyway, on its own, without the rest of the code, you are making the assumption that indeed this code creates global variables _intentionally_, which may or may not be true. This is the key point and the reason why it _is_ a bad idea.
Babel is not a polyfill for absent browser APIs
Yeah, this is pretty much the same as the last one but using an async function. There's other weirdness added in there with getting the prototype (not necessary just like call wasn't necessary in the last one) but the promise bit is needed to get the window reference since asynchronous functions always return a promise. To get the value returned you need to use then(). Another variation is with generator functions (`function*(){}`) since they too have a constructor which can create a function from a string. And to get the return value from that, you need to call next().
Oh yeah, I remember flashkit. I think I'm still a mod over there. Those were fun days. 
Are you the only dev on this project? Are you sure benefits like size and render speed will be more valuable than well structured project with known framework having several people working on it?
Thing is, most future employers will want _professional_ experience with current frameworks. Saying "but I use it in my personal projects!" it's simply not going to cut it
[removed]
If none of those variables are declared outside of this function, what's happening is that those variables will be added to the global scope. (Probably the window object, if this is in a browser) It is definitely a bad practice, since it's not obvious from the code if this was the intended behaviour or if the intent was just to use local variables. You'll actually have to read the code and find out whether they're being used outside of here whether or not the behaviour was intended. Any time where you make it unclear what your intent is, is basically bad practice. That being said. It's also possible the variables are actually declared outside of the function, since you only pasted part of it. In which case, the init is basically just where things are set initially - it's a common pattern, even though it's not the most elegant one.
Thanks, noted. 
I tried the Object.keys(tasks).length and that also returns 0. Not sure exactly what you meant in your first suggestion. I'm gonna make a codepen for this because I realise that posting an image was probably entirely useless.
First of all, this code would not work in strict mode. You would get a reference error. Secondly, as you pointed out, now that we have const, not using it is a lost opportunity to optimise things and to add meaning to the code (because knowing that something won't change is a valuable information). Subjectively, I think this is a really bad practice because you have no way to tell just by looking at this code if the variables already exist or not. They could come from another file. A good IDE or bundler may tell you that but it doesn't make it good self-explanatory code. And you can't just say it's initialising everything. Maybe you have multiple canvas elements and the "canvas" variable is referring to the current canvas, so calling the init function would swap the current canvas... When you see sloppy code like this you expect everything else to be sloppy. I mean, look at the comas at the end of each line. Clearly, the second line is not a declaration, there should be a semicolon there, not a coma. And again, this would likely not work in strict mode. A clever console would give you a redeclaration error, a less clever one a syntax error because the parser does not expect a period in "canvas.onclick". I personally don't like the idea of injecting variables in another scope, I think it obfuscates what you do. I would personally expect global variables to be defined in the global scope and would not go look in the init function see if someone has declared global things there until I encounter an error. So this is obviously an error-prone, die-and-retry piece of code. If I had found this in many places in a project, in order to not break the code consistency, I would personally edit this code and write `window.canvas = document.getElementById("gameCanvas");`, because it is a lot more clear what the code is doing, or maybe `root.canvas = document.getElementById("gameCanvas");` (and I would have written `const root = this;` in the global scope in the main.js file), because you can't always assume there is a window object. But this is a bit cocky when the code doesn't originate from you.
All of these approaches comes with pros and cons. So you better just pick something that suits your team workflow better than other. You can create a separate package and manage it this way. You can convert your repositories into a monorepo and work this way. Submodules is another approach. I don't think that there is a silver bullet that will nicely resolve all of the problems with these approaches. Try to find a best fit for you.
I once tried compiling Sass with webpack (v3) using `sass-loader`, `extract-text-webpack-plugin`, `css-loader` and `style-loader` and in my opinion this workflow is so damn dirty that I decided for myself to just use a npm script to call `node-sass` directly which works like a charm. It seems webpack is good at processing javascript but is damn bad at processing sass/css.
https://codepen.io/Liam_Dijitul/pen/WzgPBd
https://codepen.io/Liam_Dijitul/pen/WzgPBd
I had cut up the real complete function for brevity. the error has been fixed.
https://docs.ckeditor.com/ckeditor5/latest/features/highlight.html
Thats mate. Gonna need to read up on promises, but haven't been able to find any decent resources yet. Also had no idea that Chrome gets the contents of an array when you open it, very misleading!
Do you think start ups and small companies will start choosing JS for full stack? How do you compare the job market of JS back end with .NET, C#, PHP, Ruby, Python and Java? 
https://github.com/shikaan/titef
If you are looking for a dependency free testing framework you might want take a look at this project of mine: https://github.com/shikaan/titef
Any book by /u/rausch https://www.reddit.com/r/javascript/comments/5cvqia/javascript_books_by_dr_axel_rauschmayer_free
Slightly tangential but it very recently struck me, blockchain is to linked lists, as REST is to HTTP. In each case, a foundation in the latter, is vital to beginning to understand the former
His point is that Svelte is a compiler, so when you use Svelte, your code is turned into very lean JavaScript with no "frameworky code" - i. e. it's arguably just vanilla js.
I would agree, except REST does not need HTTP.
Check out https://github.com/verdaccio/verdaccio, you can create a private repo with this.
Thanks for the link :) How is it with syncing changes across the code bases by using a NPM package approach?
I probably got that wrong. It's been a while since I wrote anything with angular.
If they do, how do they make sure that passwords are not submitted with the recording? This might be a serious security issue.
If you've tried 4 engines can you list them out so we don't have to go through those and make new suggestions to you? * Canvas: https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API * Pixi: https://github.com/pixijs/pixi.js * Phaser: https://github.com/photonstorm/phaser * melon: https://github.com/melonjs/melonJS * cocos2d: https://github.com/cocos2d/cocos2d-html5 * playcanvas: https://github.com/playcanvas/engine * babylon: https://github.com/BabylonJS/Babylon.js * three.js: https://github.com/mrdoob/three.js/ The last two are 3D but you can easily do 2D in them and they're both very fast at it. If you're just wanting to manipulate a few images then you might want to look at just using canvas or [grid+css](https://css-tricks.com/snippets/css/complete-guide-grid/). So for what you'd like to do, I recommend grid+css. 
Maybe. I haven't personally run across that in the 3 jobs I've had with no previous experience with what they were using. They were more interested in me knowing JS well. In addition, we don't hire that way...the framework can be taught. We are more looking for solid analytical skills and some level of JS (or even other language) knowledge. That's worked out quite well with almost all of our hires. Your mileage may vary.
You can use winabeer.com to get emails when there are new releases for GitHub repos you are watching 
[removed]
Eloquent JavaScript is a good book too and his new edition has just come out
Oh, not me. 
If you can wait a few months, I recommend reading [ Professional JavaScript for Web Developers 4th Edition ](https://www.amazon.com/Professional-JavaScript-Developers-Matt-Frisbie/dp/1119366445/). It's scheduled for release on July 31, 2018. The 3rd Edition was the best JavaScript book in 2012, but I would no longer buy that edition since some parts have become outdated. To shorten the waiting time you could take a look at [Eloquent JavaScript 3rd Edition](http://eloquentjavascript.net/). It's free and from 2018.
Thanks for your answer. Is there a way to detect which field is being typed in by the data inside that beforeLog event? Also, will that filter affect the screenshots, too?
I agree with you. To me Vanilla is 1) untranspiled 2) sans framework/libraries 3) developed without any tools beyond an editor and a browser.
Are you sure? Because I gave it a try and I got a SyntaxError: unexpected token: '.' in Firefox. ``` function foo() { "use strict"; var bar = {}, bar.baz = "" } ``` https://jsfiddle.net/133kywr3/
... So you agree then that **most** "big and notable" projects do *not* use Standard??
I see it as a pendulum swing back from framework-mania. The fact that browsers are much better than they were 8 years ago helps immensely.
OK, I made more tests where I actually call foo() and I couldn't get it to really work... What am I doing wrong? This doesn't work because I get ReferenceError: assignment to undeclared variable bar function foo() { "use strict"; bar = {}, bar.baz = ""; } foo(); https://jsfiddle.net/133kywr3/4/ and this doesn't work because I get a SyntaxError: unexpected token: '.' function foo() { "use strict"; var bar = {}, bar.baz = ""; } foo(); https://jsfiddle.net/133kywr3/5/
I Don't agree with the idol part. But are these series quick and informative? I don't want to read whole books that explain just the basic syntax. These series look like a quick and informative one?
I've been trying to build an es6 starter project here and I've had a bit of problems with webpack 4. I switched back to webpack 3.11.0 I think it is (whatever last v3 is). You might want to try this and revisit webpack 4 in 6 months, that's my plan.
Uh, so you do want to learn? :p First the difference: In the second case, `var ......;` is a _variable declaration_. In a variable declaration you can use a comma to separate various _variable declarations_, but nothing else. `bar.baz = ""` is not a variable declaration so it is indeed a SyntaxError to put it there. In the first code, the line `bar = {}, bar.baz = ""` is just an _expression_. Actually, using the _comma operator_ you can put together more than one expression. So, in this case, you have two expressions (`bar = {}` and `bar.baz =""`) put together into a bigger expression with the `,` operator. So, as far as syntax goes, this is perfectly valid. Now, why doesn't your particular example work for the first case? Because it relies on `bar` already existing in some accessible scope. Following the spirit of the original code posted by OP, you can try... var bar; function foo() { "use strict"; bar = {}, bar.baz = ""; } foo(); ...which will work as expected.
https://stackoverflow.com/questions/19655250/is-it-possible-to-disable-input-time-clear-button
Kyle is very talented at explaining concepts. To the point where if you listen to him discuss one concept, it sort of heightens your understanding of others. 
I don't know about an equivalent to Chrome's -webkit-clear button pseudo element. However, adding the *required* attribute to the input should at least prevent the user from submitting an invalid form and show a little warning instead.
I think you could use Snap.svg or some other library to use svgs with javascript. Here is my approach: (for this we can avoid the use of canvas) First you place your svg that is the actual drawing you want to be colorized, you need to be sure that the svg is splited into the actual sections that are going to be filled, I often use &lt;g&gt; tag to achieve this. After you placed the svg you need to add an event listener for the click event, it is important to add the event listener to the svg itself, no the html element containing that svg. With that event listener you can now where the user clicked/taped and now you can draw a circle or some other figure starting from the coords inside the svg, Snap.svg comes with some methods to animate paths, make the color fill the ENTIRE svg and with the path that is some part of your drawing you clip that color with a mask. Short version: Put your whole svg drawing, add event listener to that drawing, draw a figure with whatever color you like starting from the coords where the click event happened, make that color expand to the the entire svg but before clip it with a mask to match the part of the drawing you actually want to fill.
You do realize you can set a tab width to equal 2 spaces? Which is I what I do
like this? https://en.wikipedia.org/wiki/Flood_fill
If you want to be a great engineer, you need to be able to 'reason about apps' with no framework at all. Frameworks come and go.
You probably could do it using masks that scale out or on the cheap side, radial gradients with end-stop opacity. For animating svgs i wouldn't recommend css, as it's downright broken. I'd use react for this as you can declaratively paint and animate your svg like that. There are incredible libs that help you with animation like snap, but most go back to dom manipulation again. If you are sure that you don't need any crazy morphing you can try [react-spring](https://github.com/drcmda/react-spring), like so: https://codesandbox.io/embed/oln44nx8xq (for transparence, i'm the author) Then go from there, import your svg's and animate painting masks. There are sketching apps like [sketchapp](https://www.sketchapp.com/) that go a long way in making this easier. In sketchapp for instance you can draw, copy, and paste directly into your code.
It's ok. If you write a book too then we will promote it. :)
Thanks for the mention! My books are free to read online here: http://exploringjs.com Target audience: programmers who want a concise and comprehensive introduction to JavaScript.
Why not Luxon, same devs, immutable :) 
Yes sure, you will see the CSS selector that our recording engine generated so if you put a CSS class or id on your sensitive inputs it'll be obvious. Sample event recording locator format: action : "type" nodeName : "INPUT" target : "#example-name-input" text : "123123123" timestamp : 1522937676281
If you're an experienced programmer you should be able to digest them pretty quickly (while perhaps skimming over the first book just to make sure you don't miss anything important) I've found this series to be one of the best if you want to develop a deep enough understanding of JS to be effective, but don't necessarily want to be a JS "expert". 
Well, I guess the spirit of my comment was that I don't want to learn and reproduce sloppy or ambiguous practices ;) I understand that only the last expression of the coma-separated is "returned", allowing you to write twisted things like the following a = 1, b = 2, c = a + b === 3 &amp;&amp; console.log("twisted"); The fact that the coma changes meaning depending on the context (variable declaration or expressions chaining) doesn't make me feel comfortable, especially when a semicolon would work. But yes, I did learn something today.
If you update a piece of code, you have to publish a new version to your internal repository, and then run "npm update" wherever you are using your package. So basically the same as when someone publishes a new version of a package on npm, but in your private repository instead.
Oh no! That’s for the feedback. Getting that fixed!!!
Vanilla js components.
r/learnjavascript has become a free for all marketplace of affiliate links to paid content, it's good to see beginner discussions here! 
Eloquent does go much further than simple booleans and trivial “bullshit”. The exercises are also top notch and concepts are well explained.
you might be better asking on webdev
I am calling the police
I like [Node.js design patterns](https://www.amazon.ca/Node-Js-Design-Patterns-Mario-Casciaro/dp/1785885588/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1522940095&amp;sr=1-1&amp;keywords=Node.js+Design+Pattern) The intro to async via web crawler in the early chapters is very good for someone coming from a different language. 
I'm 50 pages in. For someone who has been programming for 15 years, those first 50 pages could be succinctly be summarized in 2 paragraphs. Meanwhile, the concept of falsey values, which are something that can *actually* mess people up in JavaScript, is given literally one sentence in those first 50 pages, and it doesn't even cover it fully, it just gives a few examples of things which are falsey. Crockford's book cuts the crap and gets to the meat. If you haven't read it, read it. It taught me more than any book I've ever read about programming in any language in an incredibly short amount of time.
Check out javascript.info
&gt;To shorten the waiting time you could take a look at Eloquent JavaScript 3rd Edition. It's free and from 2018. &gt;Eloquent JavaScript is a good book too and his new edition has just come out This. Good read. I follow the author on Twitter too. He seems normal on most days.
Did that approach integrate with webpack dev server?
It might be a bit dated now and could certainly use a refresh, but it’s still really good.
I find it hard to recommend a book for JavaScript as the language has moved so fast. Books older than even 1 year old could easily skip over Promises, and those that do seem to really only gloss over high level details and simple examples that you could get from just about any living internet document. My suggestion is use some free books/tutorials to learn the syntax and much trial and error to understand it deeper. 
Oh! I didn't know you were on reddit, I've read much of your blogs and these books, you're doing an excellent job! Just read today about "1 in array" trick :)
The Good Parts is extremely dated since the advent of ES6+. Much of the book is dead weight and the relevant parts can be easily read in a couple hours time. I think Secrets of a JavaScript Ninja or YDKJS are better recommendations.
[https://www.ioccc.org/2015/burton/prog.orig.c](You aren't even trying!)
Just continue readinf and you will find challenging tasks even for an experienced developer. At least it was my experience 
[This is obfuscation](https://www.ioccc.org/2015/burton/prog.orig.c) Attempt two, apparently I can't even post a comment these days let alone obfuscate sht :/
Have you actually read this book? Because I am very weary of Packt Publishing, nearly all their books are complete shit and their authors tend to be very inexperienced or peddle garbage. His site[1] only mentions two blog posts from 2013, another bad sign. After looking up this person's github[2] he has very minimal commits but likes forking random popular projects which is a very bad sign IMO. Compare this to someone like Kyle Simpson mentioned above who has given numerous talks, presentations, teaches classes, wrote an extremely popular book series, has an active github[3], and has been the author of some very large open source libraries that he developed. Honestly I would stay clear of books from authors who don't have/or done at least some of the following: 1) Given talks at a conference (this shows their opinions are valued because someone was willing to pay them money to speak) 2) Created or contributed to open source projects (this shows their programming experience is valuable if others are consuming it) 3) Has an active tech blog (shows they are at least trying to stay relevant in their field and that they have some competency in pushing our consistent content) It's going to come across as elitist but I rather listen to people who have exposed their works and thoughts to the public than some rando. Would I rather read a book from someone who used react for a few business projects or the person who actually created react? Books and video series are expensive, you need to be careful you aren't getting garbage that was already available online for free. [1] https://mario.fyi/ [2] https://github.com/mariocasciaro [3] https://github.com/getify
i want to give gold but i don't have mony
I have chose to go the private module approach using codebox. It's a serverless solution to handle your private packages. https://github.com/craftship/codebox-npm
Am I detecting a hint of comic sans *grabs pitchfork*
I agree. I have this book and it is great!
Dante's Inferno
Yes, minification can often cut the size to one tenth of the original. And downloading a 100kb script is much faster than a 1mb one (duh).
[removed]
You should specfify that this is a firebase-specific question.
This is my favorite, and most of it is free online: [https://eloquentjavascript.net/](https://eloquentjavascript.net/) The hard copy has a couple extra chapters though, IIRC.
youtube
I wish we had a term other than "vanilla" (or "pure") for libraries that require the DOM.
Would an [embedded CodePen](https://codepen.io/embeds) work?
Here's the lightly-spaced-out actual function you're executing, no idea exactly how it works but it's straightforward math you can reverse: (i, j, n) =&gt; { x=2*n, y=3*n, z=5*n, v=x+1, u=y+1, t=i+j, o=j&lt;n, m=i&lt;v, l=i&lt;n, h=j&lt;v, g=i&lt;u, f=j&lt;u, b=j&lt;x, c=t&lt;y, d=z&lt;t, q=t&lt;1+z, p=y&lt;t+1, w=-1, e=i&gt;=x, a=!h&amp;f, m&amp;o |h&amp;l |!f&amp;l|e&amp;!f|!b&amp;!g ? w : !l&amp;m&amp;f&amp;g&amp;!b|e&amp;h&amp;g&amp;!o ? 0 : !l&amp;b&amp;g&amp;!o ? 1*c:o&amp;g&amp;!m ? w+7*p : !g&amp;b&amp;!o ? w+6*q : a&amp;g&amp;!m ? 4*d : !l&amp;g&amp;!f ? w+4*q : l&amp;a ? w+3*p : w }; Getting to this point is pretty straightforward. The other four functions are helper functions in building the above string and are pretty straightforward in their functionality. Here they are with some modifications and different variable names: func1 = (strToSplit, splitLen, spacer, preAndPostCheck) =&gt; { return (preAndPostCheck &amp; 1 ? spacer : '') + strToSplit.match(new RegExp(`.{1,${splitLen}}`, 'g')).join(spacer) + (preAndPostCheck &amp; 2 ? spacer : ''); } func2 = (str, s) =&gt; eval('func1("' + str.replace('_', '"+func2("') + `",${s[0]},"${s[1]}",${s[2]})`); func3 = str =&gt; `",${str[0]},"${str[1]}",${str[2]})`; mapFn = (val, ix) =&gt; { return !ix ? val : ix % 2 ? func2(`"+'${val}'+"g!`, '1&amp;0') : val.replace('___',':!').replace('__','o?').replace('_','*q:'); }; Using those in pieces you can safely step through the array (ie inspect the strings before they're `eval`'d) that gets built in the main function (`_____`) and get the various other string arrays that are concatenated together then built into a single string with the final `reduce`. That's exactly how I got the deobfuscated version at the top of the post. Hope that helps, let me know if you have any other questions!
Hmm... Maybe I could make it work, but I was really hoping for more of a REPL experience. Almost like the babel-node CLI. 
Seems to break on mobile when you are zoomed in (and iOS automatically zooms in when it's not 16px font on an input)
Sure, but that's not the point. Style guides that don't insist on spaces are few and far between, not just in javascript. Therefore a fixed indentation is a norm, and given that, in javascript only two spaces make sense. 
`import('https://cdn.rawgit.com/JeremyRH/b27c3ce211d70ab7f06ba4d7ed31926a/raw/aadb7e72ea7ba2977ce0bb79556ab87fb8a5208b/test.js')`
I found that gzipping made the advantage of minification / obfuscation a lot less compelling though. In a way, obfuscation is compression. Since debugging is a LOT easier when the code is multiline and has proper variable names, I tend to not minify / obfuscate it. You never know, you could find a bug one day on the production site and want to open the browser development tools. I do enable obfuscation when I use Webpack and Babel because the output looks nothing like what I wrote anyway, but this is a downside to being too fashion-forward.
No it hasn’t, everything is the same!
ohh ok just for clarification, u used async just because u can use it? no specific reason ;) :P?
I'm confused by this. REST is the architectural style so sure, it doesn't "need" HTTP as it's a concept but isn't it not something you're able to implement without HTTP? 
I've been reading You dont know JS and its really demanding but the result u get from it is fruitful. Kyle won't let u assume things. He insist on not to just accept whatever anyone/ or in this case even him, says without asking why its done that way. This is exactly how you should learn anything.
lol why did he get downvoted for this? 
All better. Thanks 
It’s the aftershock. 
Yes I have read the book and I enjoyed it. It presents patterns and implementations and that's what I liked about it. YDKJS is a good series, but it's almost more "theoretical" and some of it is relatively basic. I don't need someone to explain `this` or what is `scope`. I'd rather learn about `EventEmitters`, a `Service Locator` or how to implement the `Command Pattern` in `js`. However, it's different strokes for different folks I suppose. &gt; Would I rather read a book from someone who used react for a few business projects or the person who actually created react? Kyle Simpson created React? 
Eloquent JavaScript
I loved Professional JavaScript. I learnt more from that book than most of the other ones combined. I still can't believe there is actually going to be an update. Even if it's a bit outdated, I would still say a lot of the content still applies to today's standard and well worth a look at before the update drops. 
[removed]
Yes. Not only are minified scripts and css faster to download, but they also impact the parsing speed, since parsing myReallyLongVariableName is slower than parsing the variable `a`.
I am a fan of [JavaScript Application Design: A Build First Approach](https://www.amazon.ca/JavaScript-Application-Design-Build-Approach/dp/1617291951) - a few years old but still very relevant.
I didn't use webpack dev server so I can't tell, sorry. I could imagine that the dev server watches the generated css file so I think it may work. 
While usually fine, keep in mind that this could be a performance issue in a component that is re-rendered often
I second this. It's a great book. A little difficult/slow to read at first as a beginner, but if you take the time to read through it understanding it, you'll save a lot of time in the long run.
I didn't want to list what I'd used because I wanted to see if responses would go into a different perspecitve or resource when they recommended something I tried. Before posting this, I'd considered dispensing with libraries altogether and using vanilla canvas/js, but from what I'd seen in the docs it was incredibly verbose. The upside is pretty high tho. The most common problem I'd run into is lack of community or poor documentation. IOW if you have a problem, tuff titty. With vanilla canvas, that most certainly wouldn't be a problem. MDN has JS docs covered quite nicely.
Well, any transport protocol will do. HTTP is the de facto standard, but if you use something else to transport data over the network \(like raw TCP, WS or custom protocols\) you can still make use of REST. The way you will reach the endpoints will change but the documentation will roughly have the same front. The advantage would be that you can optimize communication or reuse existing transport systems. The disadvantage is that you strayed from the pack and the pack can't assist you much anymore.
Before I clicked the link I totally though "Brace Yourselves" was going to be a javascript library that had something to do with adding curly braces.
I kind of see what you mean. I don't have as much exposure to other modes of network communication protocols so I'm blind as to what that would even look like. I had thought the GET, PUT, DELETE, etc was what was used in tandem with RESTful architecture but I suppose it's not something that's exclusive to HTTP, but HTTP just has good request-tooling to allow for restful endpoint usages.
lol someone should make that happen.
That's what source maps are for. Also, why do you use minification while developing?
Why do any 'build' tool things while developing?
Because my code is modular and needs bundling? Or I write LEES and need to compile it to CSS? Or I run tests automatically after file changes? Or...? Lots of reasons.
jsonstore.io is intended for small projects, mostly for the open-source community. It's not a datastore you can use to store all the logs of your company, and we do have quota limits. We do nothing with your data, it's secured and if you want to store sensitive data you may want to encrypt it. The idea of this project is to provide the open source community a easy solution for storing casual usage data/settings for their projects. 
Or minify. But you said you only do that on production, not development. Why not do all the things you said just once upon deploy? You could run un-bundled in development. You could run tests upon some kind of manual trigger, not every save. Because transpilation got involved. That opened the floodgate to using *build* tools during development. 
Disagree. Simpson is unfortunately too much of a fanboy and spends too much time on the details of the language instead of teaching how to use it effectively.
KS is the best. I've watched all his workshops on Frontend Masters too. I'd probably cite FEM as my primary resource for node/js stuff followed by egghead, 2ality, mdn, and twitter.
Made a new utility library and would love feedback and ideas for new features! https://github.com/codearoni/omg-like-literally 
I agree, all his courses are brilliant. I just wish I can find more his of his content. If anyone knows where he has his courses please let me know
Angular is using the same versioning as Chrome, meaning no real breaking changes between major versions. Most of Angular 2 code works on Angular 6.
Private npm packages and `npm link` works quite well for us. From our different projects we just do `npm link path/to/local/shared/package` and it mostly works as expected.
Just as Dennis Ritchie intended.
Using private npm registry is the most flexible way.
I just bought this last weekend. Haven't started working through it yet. But it looks fun.
I second Eloquent JavaScript. I have the second edition and will be purchasing the third to support Marijn for the excellent job. 
&gt; How do I load unbundled code Same way as a bundle. &gt; LESS, TypeScript Those are transpiled script, use CSS and JS.
You're making less sense and sound less like you know your shit with every reply.
I used it because they fixed it so my original approach with the normal Function constructor would no longer work. My response to that was, well what about async function constructors. And it worked.
Another shameless self-plug: **[Qoopido.demand](https://github.com/dlueth/qoopido.demand) (module loader)** &gt; Promise like module loader with automatic resolution of nested dependencies using XHR requests and localStorage caching to dynamically load modules, legacy JavaScript, CSS, text and bundles.
For starting out, just create separate git repos. NPM can import a git repo, and you can access those files. It's fairly simple to move from a git repo to a private npm repo, but if the git repo fits your needs, it's generally easier.
Wow thats nice. So my understanding from this is, normal function constructor and async function constructor has different prototypes, thus even though the normal fns constructor's window leakage is blocked, u got the instance from this? 
yeah, same with generators too. Each of those three function types have their own constructors each with the same capabilities of creating a function body with a string which is capable of providing access to the `window` object.
Nope this link is at 12.99 as well
&gt; V8 might not be able to optimize my decorators as well as it can for class properties because decorators are more generic in what it does whereas class properties only serve one purpose so the optimization path is more clear. I can totally see this being a thing for the first few iterations but I would assume V8 would at least make the difference negligible. However &gt; I still think using class properties is more expressive than reinventing the wheel with decorators. _this_ I 100% agree with. Maybe I'm just not getting the whole decorator thing but it seems to lose a lot of expressiveness or ability to understand at a glance by using decorators.
If you don't need much of native APIs, then the easiest way is to make your own WebView wrapper. Takes a couple of minutes.
&gt; you could find a bug one day on the production site and want to open the browser development tools This happened to me a couple of times. It is handy to find things the way you wrote them, especially when you are one the go and you want to think about what you want to do before you get to your office, or you are with the client, they're showing you this bug which happens only when they do this and that, and it's handy to open their browser's development tools, look what happens and instantly find the solution. Plus, you look like a high tech hero and this is priceless ;) I have nothing more to say: it's handy, it really is. Not by an incredible amount, but it is, and if you don't use this enormous library dwighthouse is mentioning (I think it's a very good point by the way), if it's not that big of a project, why not benefit from this advantage? 10 or 20 more ko are not going to make your users run away, it's just not true: if your app or site or whatever is well designed, they have something to look at before your heavy scripts have loaded anyway. Sure, if they wait 3 seconds in front of a white page they will leave, but if this happens you have bigger optimisation problems than JS obfuscation. I just wanted to point out that minification and obfuscation don't look as miraculous once your JS is gzipped.
Can you give a more complete example? The example code is not syntactically correct.
One of these libraries isn't even JavaScript based.
I think they were saying that when they are looking at a new potential hire, they would be happy to train this hypothetical person on the stack they use at that company, not you specifically.
His [Learn and Understand AngularJS](https://www.udemy.com/learn-angularjs/) course was really good too.
showing up as 14.99 now so I have no explanation. First 3 times I clicked it, it was 174.
have you read the definitive guide? is it better or this one
Won't this be a different book though without Zakas as lead author?
i can't stand the italics of that font. we use certain fonts for specific reasons, and this goes against all reason. designers use sans-serif fonts for signage on roads, because it's easier to read those when moving. we use sans-serif, monospaced fonts for code because it is the easiest option to read. designers use script fonts to give the impression that something was hand-written. 99% of script fonts are terrible at doing this, and most good designers avoid them in general. the idea that someone would use a script font while **coding** makes no sense. 
Recommended also
Yeah it's strange, mine was showing 14.99 (with 5 hours remaining) and after logging in it shows the 12.99 price
I read Eloquent javasacript and after ~150 page I decided that it's for beginners, Javascript:the definitive guide had what I was looking for, it's outdated but still useful.
Udemy doesn't care if you complete it or do the work. There is no permanent record. So everyone is more or less auditing. For 12.99 it's a deal. 
I like an easy life, but it seems that using TS in React is a huge time sink to just set up everything with Redux, Redux-thunk and company. This is holding me back to just use TS all the time.
I'm a big fan of Javascript Allonge. That book really worked well for my style of learning, and then after each chapter I went and read the portions of YDKJS that seemed relevant. Professional JavaScript for Web Developers 4th Edition is one that I'm really looking forward to, but if you're like me, you probably want something to do while you wait. 
What did you learn
Turns out I was dealing with the type Path unknowingly. Thanks for the help though
What if I want to use create react app intead of next?
I would look at the v2 repo in the [staffjoy repo!](https://github.com/Staffjoy). They went out of business but their app is open sourced. It's written in go though and not JS. 
I understand what you mean, but I must say as one of those employers, if your "personal projects" are production ready and are your own, it is still professional experience, because it's being made by a professional developer. But as you say, not all employers share my opinion on the matter, so this is purely my own view. Clearly you're very worried about this so it probably is a deal breaker in your case. No one will be able to give you a clear solution because all employers are different.
Any free sources ?
I have to vouch for this one too. It's a solid book, that's for sure. I have the print book so I can reference it quickly.
Hey, quick question, I am currently going trough practical JS course by Gordon, not sure if you are familiar with it, but, I wanted to ask you, after I finish that course, should I read your book? Will it be easy to understand for me, a beginner with no prior experience in programming languages(except html and css but then again they are markup so..), or is it for people with more advanced knowledge ? Some people said to me that I shouldnt bother with Eloquent JS or You dont know JS for now since I am beginner, so is that the same case with your book? Thanks
AFAIK this is a SAAS, not a component, but https://repl.it/
https://www.youtube.com/watch?v=KEEKn7Me-ms
Same, I reset my cookies and it went back to 12.99 then jumped to 14.99 after a refresh. 
the 4th law of black hole mechanics 
With source maps, you should be finding it the way you wrote it. AFAIK, chrome even lets you edit your original source code in the Sources tab by unminifying it via your source map
running build tools on save is awesome. webpack dev server has gotten extremely fast, even with SCSS loaders and a large ES module application my modules hot reload in about 150 ms. you can keep your vanilla dev environment, i don't miss that life at all.
?
SpaceX launched a rocket and landed it in like 7mins and npm has not finished installing
When you finally understand recursion, that post is going to be hilarious.
I'm sad you did this before me
I'll have another look at it. The last time I tried I didn't get a separate map file but junk lines in my output file pointing to the source, which defeats the purpose of optimising the output.
I said this like 12 months ago and got down voted hard. Glad to see the sub is done circle jerking eloquent js
Editor &amp; Theme? 
If you want to know in the simplest terms possible how things like `this` and prototypical inheritance work you'll end up at this series of books anyway. Since you are already a programmer you might as well start at these books and you might not need anything else 
You forgot your stopping case. Now I'm stuck in an infinite loop. Thanks a lot.
I read this book and 4 months later got my first coding job. It's really complete.
This is probably what you are looking for: https://tympanus.net/codrops/2016/11/23/tilt-hover-effects/
Yeah... I'm super definitely looking for it as a component that I can embed and that will run within the context of the page. Thanks, though!
I second that. NJSDP it’s one of the best intermediate level IMHO
They aren't quick, they are informative. You can't have quick and informative, those are mutually exclusive. People call KS the best, because he is. That is a great way to learn JavaScript. 
I vote for the wordpress twentyseventeen theme, I'm half tempted to make it myself just because I could probably do it with Gatsby faster than how I would want it customized in wordpress . ^(I'm not actually going to make it myself though) 
Maybe a stupid question but: How do you plan to monetise this? Donations?
Use local storage or session storage, or a remote database that can be read using AJAX if the data is important for you
Have you tried /r/learnjavascript or /r/learnprogramming ?
/r/learnjavascript /r/learnprogramming /r/forhire
Thanks, I have seen that but it doesn't seem to match the api they are using.
You know when you have a mirror in front of you, and behind you, and it creates infinite images? That's recursion, except in programming you have a function instead of a mirror.
You might want to start out with something like this: const quizzes = { nature: [{ question: '...?', answers: { 'A.': false, 'B': true, ... } }], sport: [...], gaming: [...], } const User = (name) =&gt; ({ name, answered: [] }); And push the index of the objects of the correctly answered questions to `&lt;user&gt;.answered`. \(But this is not very scalable and it's only validated on the client\-side. You then want to move the logic and the data to a server storing the content of `squizzes` in a file or even a data base. You don't want your users to inspect your code \(e.g. using dev tools\) and find all the answers. Instead, each time the user answers a questions, yo`u fet`ch the next question object and so on. Keep track of the scoring at the server\-side, too.\) \&lt;\- You said that you are pretty new to this and you might not even want to move the stuff to the server\-side because maybe it's just some basic learning or experimenting. That's totally okay. Keep it simple, then. I hope I didn't confuse you that much. You can still ask me some questions.
I’m glad my writing helped, thanks!
Recursion is an algorithmic coding technique that works like a corrosive chemical reaction. It uses itself to process a thing until it runs out of that thing. Hth. Happy coding! 
If you know HTML, CSS, and have touched on JS, Gordon's course is fantastic to fill in holes left by TreeHouse or Udemy courses (although the Udemy Web Developer Bootcamp by Colt Steele is legendary), but you won't be ready to get a job after finishing it. As always, there's a lot more to learn. 
Can you be more specific? What `this`? :)
Given that my books are free, you can start reading the first one and you’ll quickly know if you get something out of it or not. That being said: you are probably better served with a book that teaches you about design patterns and OOP (or FP) design, before moving on to books that cover JavaScript in depth. Alas, it’s dated now, but I remember enjoying this book when it came out: “JavaScript Patterns” by Stoyan Stefanov
Say you have a box and you want to unpack everything in that box. Your (psuedocode) program might look like: function unpackBox(theBox): while there are still items in theBox, take an item out of theBox, call it theItem set theItem aside Now if you give yourself a box, you can take everything out of it. Awesome. But, what if you have boxes inside of your boxes? And what if _those_ boxes also have boxes inside them? function unpackBox(theBox): while there are still items in theBox, take an item out of theBox, call it theItem if theItem is a box, unpackBox(theItem) &lt;---- set the item aside Now, as you unpack a box, you'll set aside items as you normally would. If you pull out another box, you will begin the `unpackBox` procedure on _that_ box. Once that box is empty, you resume going back to the bigger box you had started with. As you encounter more nested boxes, you use the same function on each of them to perform the same behavior. Hope this helps.
Basically it’s a technique whereby a function calls itself. Imagine that you don’t know the depth of an object. You can use a function that repeatedly calls itself at each level until you’ve reach the end. I’m mobile so I can’t elaborate, but feel free to ask me any questions if this doesn’t help or make sense.
Hi /u/RealSeanBragg, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/HonestNecromancer, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Occupymydeskchair, For javascript help, please visit /r/LearnJavascript. Thank you!
Thanks
I think The Good Parts could use an update. Crockford's talks on Youtube cover much of what has been updated with ES6+. But I still think TGP are solid reading. If anything they he tells you what to avoid regardless with The Awful Parts.
I read a few posts on Stackoverflow from devs having trouble with interactivity, can remember precicsely where I saw it but I got the impression dragging starts / ends of tasks didn't work ( or at least on tablet / mobile).
yea, but with Redux you have shared patterns that makes joining a new project easier to understand and follow. Redux just uses plain objects too, it's a pretty small lib that lots of people already know. 
I found it still had issues with style bleed ( Edge &amp; IE, older Safari ), which I thought was kind of the point.
Can someone shed some light on the Eloquent JS vs YDKJS matter? I'm leaning towards Eloquent JS, and solidifying my knowledge with YDKJS further down the road. Could one just read skip Eloquent JS and other beginner books in favor of YDKJS and then move on to intermediate/advanced material? 
ad
Say by by to that = this, and self = this, lol.
[removed]
Learning frameworks isn't what I would say is necessary to become a good developer. If you have strong fundamentals and understanding of web development in general you will be a great developer. It doesn't take much time to read documentation and start to implement a framework. When I say fundamentals I specifically mean your mindset and coding philosophy. For instance I would call S.O.L.I.D development principles a great fundemantal to have. Understanding the power of FP and when to use it to create expressive code that reads like a story, that would be a strong fundemantal. Having and understanding of how to optimize code (a little but if big O and computer science) would be good fundemantals. For example, do you have a function that has nested for loops? Do you know you can reduce the run time more than likely from N^2 to N, Or maybe even N log N? Understanding how http actually works and using it Semantically (in the case of rest) would be a good fundemantal to me. Learning libraries is great and will strong fundemantals you'll learn them even faster and have a better mastery over them. Anyway that's all I got. I'm a React/Redux/Node/ES6/Web Pack guy these days. I write some API as well In C#. I was lucky that my company allowed me to create the Architecture of our most recent project which is a big one. I don't think I would have succeeded on my current project if I didn't have alot of awesome mentors along the way in my dev career that helped me learn good fundamentals.
Oh awesome, I hadn't even heard of it! Thanks for the recc
There are other alternatives worth checking out, such as [Stencil](https://stenciljs.com/). 
Web Components are vanilla JS, right? Here ya go: https://www.webcomponents.org/elements
Found the guy who has some serious emotional problems. Hope you get the help you need, person. 
Congrats on the job offer! Coming from a long history of writing software, most professional experience for a new developer is worthwhile experience. Don't worry too much about which framework they are using. You will learn something and your skills will grow. If you keep your skills sharp with other frameworks you prefer, you'll do fine when you're ready to move. Any company which prizes framework expertise over learning and relevant experience is going to lose out on a lot of otherwise excellent developers. If there were any items I would suggest you think about, they would be related to always looking at your code and asking "does this make sense?" This means you'll end up looking for good names, removing unnecessary duplication, learning tried and true patterns and seeking to better understand the business domain. Good luck on your journey! 
I'm currently reading the book and enjoying it, but I'd like a version that focuses only on ES6 and ES7. I don't need ES5 with Babel.
So regex?
Not a stupid question at all. I have the same one. How do we know this service will exist in a year? In 2 years?
I'm interested what this is now o.0
Sorry if someone has already mentioned it, but ReactXP could help. https://microsoft.github.io/reactxp/
FYI, cross-posted on /r/webdev: https://www.reddit.com/r/webdev/comments/8a186d/jsonstoreio_store_your_small_projects_data_in_the/ Questions about monetization aren't being answered there (yet) either. Curious what the strategy will be.
No
Nope
i misunderstood you. 'Auditing' a class can mean you go to the lessons but don't do homework, tests and don't get a grade. 
I love this so much. I've been using Firebase lately as a step up from localStorage but this is some next level stuff for prototyping.
So many people are putting this stuff out as FOSS. I mean, you could create that and sell it on envato marketplace perhaps, but I don't think the market would be very large.
I will probably keep everything at webpack 4, but I didn't see any of the big benefits you read about in the blog posts :( notably, the bundle size is just a tad smaller but the build time is still roughly the same +/- 5 seconds (~60 total)
I highly recommend Understanding ECMAScript 6: The Definitive Guide for JavaScript Developers, it turned out very useful for me.
Have you tried stackoverflow?
It's low effort content regardless.
In cases like this, there is a fundamental rule about software development that I believe is being broken: &gt; Code should be written for PEOPLE first, machines second. Not declaring variables *could* be a willful attempt to make a global variable, or it could be an accidental mistake. In this context, there is no way of knowing. Therefor, this is bad code and a bad style. If you mean to have global variables, then declare them globally.[1] [1] The discussion about if global variables a good idea is another discussion entirely. 
look at the code. he's just wrapping firebase into a rest api.
If (records.length) works just as fine and I'm going to ask the obvious and hope you have isUsed defined outside the scope?
Am I the only one who finds it ironic that a coding style premised on zero library dependencies is now offering libraries for you to depend on?
If you're talking about the "in" operator, I was referring to this: http://speakingjs.com/es5/ch18.html#_the_in_operator_and_indices
Maybe better to use /r/learnjavascript or /r/javascripthelp. This sub is more for general JS news.
Speculating here, but the quota limits for free users would most likely remain and I assume you can pay to have a large quota or perhaps remove the quota entirely.
It depends. The basic templates have been covered by someone on Github for the popular frameworks and stacks. Having said that, people do sell this kind of thing on Codecanyon. People do pay for this stuff, but it's never usually experienced developers.
You forgot /s at the end
Never ever heard of it until I was at an interview where they were using it, but switching to Angular. Didn't seem like they could hire anyone with the knowledge of it. I dropped them as well, they wanted me to do an 8-hour coding exercise in Aurelia.. While I never even applied for the job - a headhunter threw me there.. No thanks. 
Where is read records? You gotta give more context.
Thank you! Do you develop on local environment? How do you work with servers? 
Hello guys, I want to use prettier for my laravel and react application. I don't want to install it. I only want to configure my eslintrc file so that it can do the work of eslint. I am using cloud9 editor for development. Please someone tell me. I am trying it but no luck in setting up eslint and prettier. 
I did a semester in school where I surveyed 5 JavaScript frameworks about a year and a half ago. I loved how Aurelia felt to work in, but was incredibly disappointed in how poor the documentation was and how small the community is. Ultimately Vue came at the top of my list. (Vue, React, Angular 2, Aurelia, Ember). Would definitely be willing to try it again though. 
Don't blame the school - I think they should teach a method rather than a specific tech. I learned Pascal at school, for example, a programming language that's I'd say very rarely used nowadays (but was great to learn). JavaScript runs _everywhere_. By learning JavaScript you have the power to build frontend apps in the browser (no other language can do this), backend apps (Node.js and its frameworks), Desktop apps (hello Electron) and mobile Apps as well with React Native and other solutions. I think this is a unique selling point for JavaScript - ubiquity. PHP on the other hand is only useful to build server-side apps, and even if you use PHP, JavaScript is still very much required for any web-based interface.
Same here. Just got the physical copies this last week. After buying Martin's "Clean Code".
Visit http://medium.com/dev-blogs and you will find a lot of my articles on it :)
It's real life personal experience, I have just been going through interviews myself! 
Yes, of course it depends on the job market in your area, but it will at the very least restrict the jobs you are able to get. I have just been going through interviews myself, and my experience is that 80% of the employers want you to hit the ground running.
You might be preaching to the converted with this one. 
Sell it to end-users. It's like asking plumbers if they'd pay for you to install their pipes for them. Probably not because they know how to do it. End-users? You betcha, they would definitely pay for it, but it'd need to be a dead simple 'complete' solution
Ah okey. I have completed my diploma in application development and will have to wait 4 months before schools starts again next year. Maybe i could do some work at home :D!
Features Merge multiple requests to single one Serial, parallel or mixed Simple syntax and easy to test A circuit breaker is built-in
You mean DFS and BFS right?
&gt; JavaScript is stupid fast too Hahahahahahahahahahaha, good one ...wait, you're serious? Hahahahahahahahahahahahahahaha
[removed]
With the first example you can do stuff like that: function1(function(){ // set background green }); function1(function(){ // do something in the database }); You can call function1() and do after that what you want, or do nothing
It's my favorite one. I switched a while back from Angular to Aurelia for my personal projects. It's quite similar so the switch was quite easy. I love it's approach of declaring sensible default values to component configuration (like looking for the HTML part on a fix URL) instead of having to declare it every single time. With Angular I felt like I wrote a lot of code for the framework. With Aurelia I barely need to (but could if I really wanted to change any of the defaults). It really does allow me to focus on the important parts of the code and be more productive.
I’ve had pretty good success with it. The shadow DOM polyfill is really tricky, though. You can’t really polyfill that correctly so there’s some runtime CSS hacks to actually scope the styles. This works for most cases but doesn’t actually stop global styles from bleeding in, so YMMV. 
Here's an interesting statement: &gt; In JS functions are first-class citizens. Functional programming is all about using functions to their fullest extent. There is a notion called: “Favor Composition over Inheritance” and here we are going in the opposite direction because “Class” notation favors “Inheritance over Composition”.
[removed]
You allow for callbacks that aren't yours to begin with. The end-user passes their own function. If it's your own, there's no point unless you do still need the flexibility.
in your first example, function1' parameter (function2) is not the same function that you are defining later. You can rewrite your function this way to see it better : function1(callback) { callback(); } function2() {...} Now you can pass whatever function you want, to function1 and it will be called. in your second example on the contrary, you are always calling the same function (function2) 
Haven't worked with ember in a while but why is it so low for you?
[removed]
You could take this a step further, abstract out the traversal "strategy" (breadth or depth first), pass that into one and the same function (`traverse`) in either case, and set something such as `arrModFn` based on the strategy, such that your final line is something such as `return traverse(children[arrModFn](), children)`
I think that interview experience says more about the company than it does about Aurelia (but I'd have done the same thing)
It's the start of making it feel failure to most developers. The quotes pretty much true though. They may extend it in the future to allow private, public, etc too. After all, you can already do it in JS (just wrap an object in a closure to make all methods private, then expose which methods you want to be public in the return value of the function used to create the closure. Since many people didn't "understand" and hence considered it broken or like the look of how JS achieved an OO approach. They added class support. May very well open the way for the rest of OO. After all, TypeScript allows private, protected, public, interfaces, etc...
&gt; “Class” notation favors “Inheritance over Composition” Ay. "Class" is just another tool that can be used incorrectly by those who do not fully understand. If you follow even the most basic design principles of when to favour one over the other. Inheritance is when something "is a"... Composition is when something "has a" and Aggregation is when something "uses a". Class functionality shouldn't automatically mean favour inheritance for everything :/ &gt; “Favor Composition over Inheritance” I think you were supposed to say "Favour Aggregation over Inheritance and Composition" instead. Composition can make unit testing difficult since you can't switch out composition as easily as aggregation. And under the hood, inheritance is just composition anyway (checkout the __proto__ property in javascript).
Yeah I basically told them, in a nice way, that no way in hell would I spend what's equal to a whole working day on an exercise. They said that they understand, I could just spend an hour and they'll have a look.. But the whole process was a turn-off.. 
This is insanely good!
Damn this is good
Isn't this a reskin of the demo on their github? https://codeincomplete.com/games/racer/v4-final/
`for (item in list)` was more optimized but recent versions of Chrome and Firefox tend to optimize both in similar ways. I use `list.forEach` because it is more consistent with `list.map`, `list.filter` etc... Whenever I can, I just use a method without side effect (map, filter, some, every, sort etc...) rather than a for loop or a forEach method. And it is almost always possible, not always but almost. And as mentioned by /u/papers, if you have an iterable (document.querySelectorAll('.myClass) for instance), you must do something like Array.from(myIterable) before using forEach.
There is a pretty big difference though with a JavaScript "class" compared to a non prototypal inherited class. If I think I'm being smart and I go changing one of the parent prototype's functions after an object has been created, what I really did is modify that function for all future and current objects that inherit that prototype as well. That's a pretty substantial difference in behavior.
`forEach` will only work over `Array`. `for-in` will work for any iterable such an `Array`. Yes they both work the same: you iterate over a collection to perform work. It boils down to your code style really.
Me personally no. Others possibly yes. Go ahead and do it anyways. It'll be a learning experience and _maybe_ you'll make some money in the process.
&gt; However, in overall, the JS community hates ES6 classes AFAIK. Pretty sure it's just a verbose minority that loves to complain about classes. JS classes are great.
readRecords() is a function that pulls data from a table. I didn’t make it myself. 
isUsed is defined before the code I provided. No value was given to it previously. 
They are _essentially_ similar but, no, they are not equivalent: let list = ['a', 'b', 'c']; list.forEach(function(item) { console.log(item); }); // logs: a, b, c Meanwhile... let list = ['a', 'b', 'c']; for (item in list) { console.log(item); } // logs: 0, 1, 2
pretty sweet
Have you tried Highcharts? https://www.highcharts.com/demo
/u/MoTTs_ has already explained a number of times about that thing on "real classes". Even just [a day ago](https://www.reddit.com/r/javascript/comments/89p3i8/javacript_prototype_vs_class/dwsr6sz/).
Here's the official statement from the website: "A paper version of Eloquent JavaScript, **including an additional chapter**, is being brought out by No Starch Press. The third edition should become available on paper somewhere in 2018.
If think they all use a canvas element.
/r/lbry Looks like another startup trying to grab some of that sweet blockchain decentralization hype by doing what open source has been doing but with monitisation slapped on..
My bad. Didn‘t read that far. 