thanks dude, thanks alot! believe me or not i lost more than hour with this sneaky sh*t. actually i can swear i already try code from your suggestion, but obviously that is only in my head :)
The method described doesn't work with nested data structures. const foo = { bar: { baz: 'qux' } } const copy = { ...foo } copy.bar.baz = 'abc' assert(foo.bar.baz === copy.bar.baz)
I think you missed my point re: absorption. I spent a few more minutes toying with it and it looks like there's no absorption semantics. Also found another discrepancy re: A+ compliance. See this for a comparison of semantics: https://jsfiddle.net/upnnrfbp/ Now, maybe you don't care to have A+ compliance and that's totally your call (Mithril 0.2.x also doesn't comply for the reasons outlined in the docs). But personally, after running into some annoying edge cases, I changed my stance on compliance (rewrite has a A+ compliant promise - though not currently bundled, and streams mimic those semantics as much as possible as well, and are not thennable precisely to avoid semantics confusion). re: benchmark: Yeah, your benchmark is measuring a noop update (rather than something that actually does do random access like a sort), and as far as I can tell, it's not measuring keyed diffs (afaictl, Dio uses another codepath for non-keyed lists). Also, it's measuring a setTimeout, not really sure why... If I remove the setTimeout, I get ~19ms for Mithril vs ~58ms for Dio (remember, this is without getting into keyed diff, which is what I was talking about in my first post)
Largely the same, but the expectations will be different. I can't speak for all of Amazon, but typically questions in my org stay the same, but the interviewer is looking for different things in the answers. Senior devs like the OP are being assessed for their systems design knowledge as much as their coding/algo ability, with much more emphasis on seeing the bigger picture and delivering end-to-end solutions that encompass knowledge beyond just writing code. More junior positions will focus more on basic coding knowledge and the likelihood that they'll be able to contribute relatively quickly and be a good candidate for advancement to the next level. Most importantly, junior devs are assessed on their ability/willingness to learn, admit when they don't know an answer, and demonstrate a curiosity and drive to become better engineers.
How would i do this for two routes? I mean i have one api that is jwt protected and one route that is protected via a different access code, how would i use a different router? could I do something like this.get('store2').findAll('user'); and then set up a second router? Or how would I do that?
Thanks for sharing, it was a great read. Congrats on the offer and ultimately making the decision that was right for you and your family.
* "syntax" are the rules of the language, i.e. both of these abide by the same syntax. I think you're looking for _formatting_, or _coding style_. * Please indent all of the code by ~~4~~ 8 (did this change?) spaces so that reddit renders it in a monospace font, like this: // some code if (something) { something(); }
That's the problem with big companies that attract talent, they will get people either way and get away with underpaying.
Based off of those offer threads in /r/cscareerquestions, the offer they gave you seems a bit low in terms of equity... Especially for a senior dev. Did they offer a signing bonus at all?
You aren't asking about syntax, your asking about your own personal code style. If it was me, I would choose the second way. It's simpler and understandable at first glance.
Thanks, this is the type of insight I am looking for :)
I think you could post this as a text post so that you can explain yourself. You will still get karma (textkarma) This first comment to explain the post is somehow off for me. 
What do you mean by "BE"? And oh, so does that mean I should dispatch an action from the store right away just to initialize the string? Like: import { createStore } from 'redux'; import rootReducer from '../reducers'; import { generateString } from '../actions'; const store = createStore(rootReducer); store.dispatch(generateString()); export default store; Doesn't seem the cleanest way but I suppose it would stop there from being side effects. EDIT: Never mind, it looks like `createStore` accepts a second argument for `initialState`. I was able to do it like this: import { createStore } from 'redux'; import rootReducer from '../reducers'; import { generateString } from '../actions'; const initialState = { randomStr: generateString() }; const store = createStore(rootReducer, initialState); export default store; So I got rid of the impurity in my reducer, but I still have the issue with the server-side rendering and client side conflicting.
Low balled but stock options plus retirement and health insurance aren't cheap either. Also have to factor in paid vacation. If he were at $100k it would be more like $120-140. 
I'm blown away with how easy the code questions were, though I had a similar experience when interviewed for another fortune 50 (then) company but the questions were much more difficult. 
While the website looks nice, the style of the demo is a bit ... oldschool
Similar interview process as Amazon?
It will depend entirely on the position you're interviewing for, the team that owns the loop, and the interviewer asking the questions. I do a ton of front-end interviewing and all of my questions are front-end specific - I try and model them after real-world front-end problems with multiple possible approaches/solutions. They tend to be algorithmic in nature, but not just "do this CS201 exercise in JavaScript". Think more like "how would you implement jquery's "closest" method?" HTML and CSS aren't topics I spend too much time on. I focus on DOM APIs (or jquery if the candidate prefers) and knowledge of JS-the-language (prototypes, closures, callbacks/promises/async, best practices, etc). I usually ask one simple question with follow-ups for HTML and CSS because those topics are both much easier to teach/learn and also mostly solved problems for us. We tend to need JS engineers who know the front-end domain, not HTML/CSS wizards.
For data structures, this was it. https://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P I learned a ton from it. I didn't watch them all - but easily half of them.
&gt; Now I noticed you interviewed as a senior engineer... Did they give you a heads up they'd be asking about things like linked lists? I have a very weak base in CS fundamentals as my web development skills are largely self-taught, so I'd have no idea whatsoever how to answer that one question you talked about. Expect to get asked this type of stuff, IME. I work for a startup in SF now and went through a bunch of interviews late last year. I don't have a CS degree. Before being flown out for my first onsite, which was at a company you've heard of, the recruiter told me I should expect to be asked about HTML, CSS, JS, responsive design, accessibility, and such. So, front-end stuff. And I mostly was, except for the one interviewer who asked me about binary search trees, and I bombed the question and didn't get an offer.
Congrats on the offer. It was Amazon's loss :). Supposedly one of Amazon onsite interviewer would be a "bar raiser" someone from another dept who is there to ask out of left field tough questions. Which interviewer do you think was the bar raiser? The last one (the slider guy) perhaps? Also I'm surprised that they only offered you low 6 figures for a senior dev position. In sf newly minted devs (non junior) get 120k nowadays and lead/senior get the rate the hr person quoted you, or higher. Is the market rate in Seattle that much lower or is it an Amazon specific thing I wonder.
 if(condition==true){ break; } As a matter of style, I would write `if (condition)` in this case (and I'd insert spaces before the opening paren, before and after the `==` operator if I were using it, and before the opening curly brace). I also wouldn't use `==` (and my linter wouldn't let me).
I prefer the second approach, but I dislike both. What case do you have that won't work with: while (condition) { } Instead of the first option?
There's this rule, you take the numbers you read on reddit about salary and do / 3 to get real world numbers 
As far as I know there isn't a way for ember-data to have 2 separate instances. You can however have adapters point to different API's or the same one but modify the headers for specific endpoints. For example if you wanted only users to include the jwt header you would make an adapter for the user model and specify the header there intead of on the application. You could also change the host if you wanted users to be grabbed from a different api.
Not a surprise. I know **many** people who in the past jumped right in expecting to write some loosy goosy Java and hope it all goes well.... until they need something called a callback or they see a closure. Everything seemed to be going fine... but their code is mess and there is no coherent organization. Maybe everything should go in a couple dozen classes... until *this* is pointing to something they didn't expect. Clearly its the language's fault.
The interview process sounded pretty good up until you mentioned whiteboard coding. Can you expand a bit on that part? I've only had one interview where I was required to write code on a whiteboard and it was a disaster. For one, I'm left handed so easily smudged and I'm also a horrible drawer, so even writing something simple was hard. I much prefer using a keyboard.
You won't really be able to find anything *truly* trustworthy. Browsers really like telling you they're someone else (because in the early days, websites would stupidly filter by UA because of the low level of standardization), so you'll pretty much have to use the "deprecated" properties. Usually you'll be fine limiting yourself to `Navigator.userAgent` (or the matching `User-Agent` HTTP header). Just remember that it can all be changed, and doesn't necesarilly reflect what browser is actually used. Or you could go for something like [this script](http://stackoverflow.com/a/9851769/645768), but I don't really like that solution, and it doesn't tell you much more than the browser family.
This worked out better for you than you can probably even imagine.
But dividing by 1 doesn't change the numbers at all.
Yeah, but he said at the beginning that his requirements were X. If they come back with &lt;x, then they wasted his time. 
Recruiter wants to get paid, so they paint the best picture. 
This is a really good read. Thank you for writing + sharing it!
... no. I'm a manager with 25 years of development. Edit: I'm not on the US west coast though, and I've always worked at smaller companies. Maybe my judgement in this case is just wrong.
I've never seen it done that way before. I've always seen the structure mounted to an element inside the body, not the entire document itself. On the server you'll need to output something like: &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;script type="text/javascript"&gt; var __initialState = 'YOUR SERIALIZED STATE GOES HERE'; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- YOUR SERVER-RENDERED MARKUP GOES HERE --&gt; &lt;script src="client.js"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; and inside your client.js file you'll have code that sets up your store using the initial state from the script in index.html
Who knows if they really low-balled him. A lot of places have wide pay fluctuations based on skill. Maybe Amazon was willing to pay 170 if he was a top tier but after the interview they decided he was "only" senior tier.
"associate" means junior pretty much in all career areas. 
Easy is a lot different in person versus when you have time to think and Google a little bit. Also when you have time limits, things always take longer than you think.
No prob.
Incompetent, clueless, lack of knowledge/wisdom... shit, man. Someday I dream of a day where one will not be judged by the flavour of their operating system - but by the quality of commits.
Java envy is the bane of my existence. 
[removed]
Thank you sharing this. I'm a recent boot camp grad and in the middle of my job search. Everything you shared is consistent with how we were prepped, but it's great to see a real world example. Whiteboarding is still a weakness for me, but I'm still working on it every day.
Yeah, I found the structure a bit weird too, I was following a video guide. I think they went with the whole Document approach since you need to send the entire document from the server. And, ah, I see. So it looks like it's necessary to make a global variable for this? Also, will there be any issues if I generate another random string? Or does the whole server-rendering thing only happen initially and I won't have to worry about it anymore after?
Awesome. Thanks for the advice!
**Angular**, because of two-way data binding and controllers. **TypeScript**, because it reminds me of my Java days. **NodeJS**, because it's extremely easy to use. And it's JavaScript.
Good to know haha. Onsen is the Japanese word for SPA in English. SPA can be the acronym of Single Page Application. And of course UI is User Interface :)
Are you responding to my comment? If so, no, it's totally not sarcasm. Low 100's in Seattle would be entirely too tough to live on when you can get that in much cheaper locations in the US. I wouldn't move to Seattle for low 100's.
If I had to guess it would have something to do with the 'newPoisitions' event. that function is MASSIVE. Now, I don't know what its doing (besides a lot) but i bet the problem is there. You might need to promisify some of that math. Actually, you might just gut the whole algorithm and make it asynchronous (AKA get rid of all the for-loops)
It's fortunate that you didn't fall for their bait and switch in terms of your compensation. Amazon is a notoriously terrible company to work for, especially if you value your family time. Great write up.
The question I bombed was implementing (on a whiteboard) an insert method for a binary search tree. It's not *super* complicated, but I'd never seen it before and couldn't come up with it on the spot. In a phone interview for a different company, I was asked to verbally describe an algorithm for determining whether a binary tree is a binary search tree, and then to provide the time and space complexity of my algorithm. I gave a correct solution very quickly, but then was asked to provide a more efficient solution, at which point I fumbled. Again in hindsight it wasn't *that* hard a question, but I guess it threw me for a loop (no pun intended).
Thanks for writing this up! These questions that involve walking the DOM are always good practice. I imagine the back and forth could go like this: I'll use jQuery's $('.someclass') Ok, how about no jQuery? I'll use document.querySelectorAll('.someclass') Ok, how about if the browser didn't support qsa? I'll use document.getElementsByClassName('someclass') Ok, let's theoretically say the browser doesn't support that either. Dammit! Ok, time to write the recursive DOM-walker. These questions for senior JavaScript positions always seem to involve some sort of manual DOM traversal. I remember bombing an interview because I couldn't whiteboard a DOM [contains](https://developer.mozilla.org/en-US/docs/Web/API/Node/contains) function from scratch. If I had to figure that out on my own, I could've eventually done it in a normal work environment, but these folks assigned a lot of value to being able to whiteboard it, which I hate... In a real job situation we've only used whiteboards for architecture diagrams, which is definitely a practical skill. Folks almost never write code on whiteboards except when actually administering other interviews...
Sure, I'm open-minded with regard to patches. Haven't used C# in a while so not sure how well JSON integrates with it atm though.
If you put this into a working code site like jsfiddle or codepen it would be much easier and someone might look at this and just fix it. I would personally look at this however not just as text.
Is Seattle considered "The Bay"? Cost of living in Valley is much, much higher. I mean I make less for the same job title, but I live in a midwestern city (~2mil pop) where I can buy a house with a big yard for under $100 sq/ft near downtown.
Oh man, I love this thing. Sometimes when I'm having a bad day, I like to look at that library and it makes me laugh and my day gets better.
I haven't seen any good tutorials but in the React Router examples there's one where they simply wrap this.props.children in it. 
I haven't worked with TypeScript yet. Can you explain why it reminds you of Java?
If I was interviewing someone for a position where they just "make things pretty", or mostly just need to know what frameworks to slap together, or at a smaller company where someone who can just put together something passable, I wouldn't consider generic CS fundamentals essential, though I might want to assess them to know what other skills the candidate might offer beyond the current position. On the other hand, for a "senior engineer", someone who is going to be pushing solutions beyond what you can just slap together through some searches on StackOverflow, I know I'd want them to have a broad understanding of basic CS concepts, because while implementing linked lists in particular may never come up in the actual work, understanding how computers organize and process data is important for making well-informed architectural decisions where performance and reliability are being pushed to the limit.
Thanks...what would be some examples in javascript? 
React. Completely changed the way I thought about and built websites. I disregarded it for a long time, thinking it was just a fad, but I've grown to really appreciate its usefulness and efficiency. I can't see myself going back to a non-component based way of working. Webpack. It made my job easier in so many ways. It's an incredibly powerful build tool. 
I never understood the how would you implement something that a framework does and has for years. It's like a graphic designer being asked how would you assemble a printing press :/ if I had to I'd Google it and figure it out, but why would I ever waste time on this? 
I'm gonna try to ELI5. An API is just a list of instruction you can ask an application in order to do stuff. It can be a language api, like for javascript parseInt() // A function RegExp // Represent an object String.fromCharCode() // An object method You can have a library API, for instance jQuery's API is : $() $.hide() $.show() Or even a "service" API, like one from twitter. https://api.twitter.com/1.1/statuses/mentions_timeline.json // Get mentions in the timeline https://api.twitter.com/1.1/direct_messages.json // Get DM It's not exhaustive, but the main idea is that an API describe the input and output of an application.
&gt; read up on "semantic markup", "separation of concerns" and "accessibility" Don't forget *Unobtrusive JavaScript*.
&gt; manual DOM traversal Isn't this a tree traversal? I mainly code in JS and I've never had this as an interview question. My intuition is that dfs or bfs is what they want to hear. But then again, without looking at MDN I don't know if I can answer this. 
In addition, having worked for (some) and at (many more) quite a number of the large ell-known IT companies as well as at a (messy) startup, I don't understand that infatuation with large enterprises. I see a huge disconnect between rhetoric and reality: We pretend to love capitalism, personal responsibility, freedom - but when it comes to our own lives the majority of people flock to the least capitalistic, lowest freedom environment there is. They want a BIG entity to live under its umbrella, executing its commands. No misunderstandings - I see nothing negative at all in this. In fact, it shows that humans like collaboration and to be and work with each other, finding safety among our pears, watching out for one another. But it's so very different from the marketing and PR of and for our societal model(s).
[lychee.js](https://github.com/Artificial-Engineering/lycheejs) because it's mad science and I have no words to explain it. It's mind-blowing how detailed the concepts are and what this guy achieved.
Can you please upload your code to github as a repository or a gist? It's close to impossible to debug this code with all that formatting issues.
Yes. It allows for strongly typed variables (such as numbers, strings, boolean, etc). Also the ability to create classes, abstract classes, interfaces, and enumerables that can be used throughout the entire project, and also public and private variables, as well as compilation errors before the browser runs the code. Check this out: https://www.lynda.com/Typescript-tutorials/Introducing-TypeScript/421807/485171-4.html 
Because you're both the designer and the pressman in that analogy. Your framework might do 90% of what you need, when you need 100%. Or, you might need to start scraping bare metal to optimize when you have to push 1000 of something that the developer never pushed past 50. You might need to duck-tape together two disparate libraries with different modes of operation. You might have to dig into The Ancient Evil that Just Works to fix a bug or wire in a feature sometime. 
Nah - I didn't even try negotiating. The offer was pretty substantially far off from my initial range - and honestly, it became more of a "do we want to move to Seattle" type of talk vs a money talk. That said - if the initial offer was closer to what I was expecting, then there's a good chance I would have tried to negotiate.
You pretty much hit it right on the head salary-wise. I too thought it was ballsy, but after digging into Seattle cost of living, it started to seem less ballsy and more necessary to maintain a nice standard of living.
At least that's one place where whiteboarding can be advantageous. Your "code" isn't going to break because you wrote "node.methodWhoseNameIForget()".
Hah! You're obviously a Mac user if you suggest using QuickTime to record a video (only Mac users use QuickTime and it doesn't do recording on any other platform =). I run Linux but that is beside the point. I am perfectly capable of recording decent videos (example: https://youtu.be/FWuZSmfmuD0). I'm more curious as to *what* would make for a good demonstration of HumanInput... A recording of me using an IDE to make a web page do stuff? A view of speech recognition in action? An example of the Konami code sequence being used to trigger a function?
You know, if you'd have told me I wouldn't mind learning from a video, say, 5 years ago, I'd have called you crazy. Books were the way to go-- videos are either tedious or shallow. But in the past two years or so, video programming training has really stepped up in quality, even the free stuff on YouTube, and I find I prefer video because it cuts out the a lot of the bullshit and boilerplate from the flow. Now,if all these video training sites would consolidate, or at least offer ala-carte, so I didn't have to pick which little subset of training I wanted to drop my $100 a year on. 
Head over to /r/typescript instead
Yeah, I wrote "module.export = ... " on the whiteboard and it "compiled" ;)
great write up, thanks for sharing :)
What are you trying to accomplish? Are you wanting to know just for your own edification or are you trying to understand something specific?
Angular+TS activates my PTSD from years of C#+WPF.
Good, that is a description. But what does it do? Is it for user management? Is it a CRM/CMS? Is it used in the HR department? Is it for monitoring? Jsut do a brainstorming and write down anything you can do with the software. If it's a service back-end and you want to put emphasis on JavaScript, maybe use JService (I'm bad with examples). Or use a simple word like "multitool".
The entirety of that npm package is: ((Pokemon)=&gt;{ console.log('Pokemon GO API has been imported successfully...'); Pokemon.welcome=function(){ console.log("Welcome to JS API of Pokemon GO"); }; module.exports=Pokemon; })({}) So i don't think that's going to help you very much
Full stack JavaScript is most often associated with the **MEAN stack**. It is a technology cluster uniting MongoDB, Express, AngularJS, and Node.js. Here are some alternative options that have emerged due to the popularity of the approach: * **Front End** - AngularJS - React, Vue.js, knockout.js, Backbone.js * **Back End** - Node, Express - Meteor, Sails.js, Koa, restify, Keystone.js * **Database** - MongoDB - MySQL, PostgreSQL, Apache CouchDB, Apache Cassandra There is more on the topic in this post - [The Pros and the Cons of JavaScript Full Stack Development.](https://www.altexsoft.com/blog/engineering/the-good-and-the-bad-of-javascript-full-stack-development/)
It doesn't look like it - if you add a debugger statement above the return response.headers, can you inspect the response object that way? Maybe the server is returning an error and the response is invalid? Tough to debug from here
In my office it's C envy, and we have to use `snake_case` in our javascript code because of it :( Drives me bonkers seeing the mess of most common javascript libraries that adhere to `camelCase` mixed with `snake_case` 
The new trend is to use a jsfiddle-like editor and have a "pair-programming" session. 
Sounds like your company needs an attitude adjustment. 
redux is used as a predictable state store. I recommend trying out the examples to see how it works: https://github.com/reactjs/redux/blob/master/docs/introduction/Examples.md
 document.querySelectorAll('div.my-first-div, div.my-substition-div')[0].appendChild( dataToAppend ); This will do exactly what you said considering 'dataToAppend' is a DOM node with the rendered data and first selector is really unique. 
Would it work for you to add a requestType parameter to the function containing your XMLHttpRequest? Then just put that in: xhr.open(requestType, url, true); if (requestType === 'POST') { xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); } xhr.send(); 
What information do you have on the div, like an id, or a class, or its position in the document? Also, what browsers will you need to support? Anyway, presuming that the two divs in question have the ids `"default"` and `"alternative"` and that the data were in a string called `data`, the logic would go something like this: var def = document.getElementById('default'), alt = document.getElementById('alternative'), dataNode = document.createTextNode(data); if (def) { // if div doesn't exist, def === null def.appendChild(dataNode); } else if (alt) { alt.appendChild(dataNode); } else { document.documentElement.appendChild(dataNode); // fail-safe } More succinctly, using the behavior of the `||` (logical-OR) operator: (document.getElementById('default') || document.getElementById('alternative') || document.documentElement).appendChild(document.createTextNode(data)); You could probably think of a better fail-safe than [`document.documentElement`](https://developer.mozilla.org/en/docs/Web/API/Document/documentElement), which represents the `&lt;html&gt;` tags surrounding the document, particularly if you know that the second div will always be there. --- For more information, look up the DOM selection methods: * [`document.getElementById`](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) * [`document.getElementsByClassName`](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName) * [`document.getElementsByTagName`](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName) * [`document.querySelectorAll`](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll) To make DOM nodes: * [`document.createTextNode`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode) * [`document.createElement`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement) To add a node to the document: * [`&lt;node&gt;.appendChild`](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild) * [`&lt;node&gt;.insertBefore`](https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore) To quickly overwrite the contents of an element, assign to its [`innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML) property. --- For more help, especially with any functions you're not familiar with, type `mdn.io/&lt;term&gt;` into your browser's address bar to go to the most likely result for that term; if you don't find anything helpful, you might be searching for something from a third-party library, like jQuery's [`.ajax`](http://api.jquery.com/jQuery.ajax/) method, or the [`.chain`](https://lodash.com/docs#chain) method from Lodash or Underscore.
~~Indeed, [`.setRequestHeader`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader) is key: The difference between `POST` and `GET` is that the latter puts all parameters in the URL, while the former puts them in request headers.~~ **EDIT**: I was confused; the parameters are in the request body, which is not a type of header, and therefore has no bearing on whether `.setRequestHeader` is key for AJAX POST requests, even though it is for other reasons.
Ive tried this but i don't really know what I'm looking at. What should I look for?
what's promisify.
'promisify' is not an actual thing, he means take the function and convert it into a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). That in itself will not actually help you, what he is suggesting is maybe offloading that function onto an async thread, a [webworker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers) which will stop you from blocking the main thread with that functions execution. However your actual problem is memory related so this won't actually help you unfortunately ): gonna take another look at your code to see if I can provide any help!
I kinda get what your saying but not really. How would I fix it? Is the problem that the canvas drawing events are happening in the on "newpositions" rather than in a loop? 
Do you happen to have a code example for this? Like on github?
run the profile "Heap Allocations" (Record, stop) while ur app is drawing, then view the output: set it to List Output (not flame graph) you can sort that by % memory or % cpu time used during the 'recording', one function or one line is probably using 100x the resources as the rest; I think Objects count sorted by % might be the one. you can click the arrow of the item with the % highest and get a code location ex `foo() called bar() called draw() index.js:123`
According to this [report](https://www.glassdoor.com/blog/25-best-paying-cities-software-engineers/?utm_source=newsletter&amp;utm_medium=email&amp;utm_content=CitiesSoftwareEng_JulUS16&amp;utm_campaign=July2016_US), Seattle is the best place to live when considering salary vs. cost of living.
&gt; it usually devolved into more discussion I like this. I've practiced enough "puzzles" to grok most interview questions. I would rather talk about design and architecture. I think a lot of interviewers forget it's a two-way street.
So they're just begging people to quit after three years then?
If it's a POST, you'll probably also want to add a param for the request body, something like: xhr.open(requestType, url, callback, data); if (requestType === 'POST') { xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); } xhr.send(data); 
[removed]
This won't do what OP wants. It's always going to select the first element in the DOM that matches any of the selectors. If the desired div is lower in the tree than the fallback, it's going to select the fallback https://plnkr.co/edit/XfvWTVvqzem5fLw8UoOq
Summer's sucking right now. 97 - 103 every day. Fall and spring are nice. Winters get pretty cold, always below freezing for a while. It's definitely seasonal here, with a heavy emphasis on hot summers.
Very cool. I have been waiting for something like this for quite some time. 
Have a look at http://vertx.io 
Bummer. I wonder why they didn't open source it.
You're passing special arrays, not strings. This isn't doing what you think it's doing. function saveFirstArgument(a) { window.a = a; } saveFirstArgument('foo\tbar'); // window.a === "foo\tbar" saveFirstArgument`foo\tbar`; // window.a === ["foo\tbar"] and it also has a `raw` property // window.a.raw === ["foo\\tbar"]
&gt; newPoisitions Each time newPoisitions is called items are added to the "myships" array, but it doesn't seem any are ever removed, so it keeps growing and growing and growing and ...
My first experience with coding professionally was in a bioinformatics lab. We had two languages used. Perl and Python. I got a first had comparison as to the maintainability of software written with convention vs configuration in mind. Unless you have an absurdly stable team. Convention wins. Retraining more than you have to is a huge waste of resources on a team. 
For versioning, I usually require in my package json and grab the version from there. So as long as you keep your package json updated, you don't have to manually change it in the service worker. This does add a little overhead by pulling in an extra file to use a single line of it, and means you'll need to use a build system. But for me it's worth it. Good article, by the way! Always upvote service workers!
this is awesome, I hope this becomes a standard among the other frameworks aswell. I know we have several boilerplate projects on GitHub, but a standard officially supported one is way easier to maintain
so it'll do what OP wants *if* divs are in proper order right ? 
It will do what OP wants if the target div, if there, is guaranteed to be earlier in the document than the fallback div. That's not something OP specified, though, so not really a safe assumption to make.
Just created a new project to try the 'eject' command. It's a really nice, simple boilerplate underneath. Looks like a really good starting point for projects with or without ejecting
Nice, I did not know
Interesting.. been doing this for years and you learn something new everyday. Good luck!
Well you don't need the string constant or the flow type annotation, without those the class looks like more effort. That and checking `action instanceof` vs `action.type ===` looks exactly the same to me. There are some tools out there for helping with actions like https://github.com/acdlite/redux-actions I wonder what benefit you get from typing the action there.. I used nuclide for a little bit, and typescript on other projects and I often find typing arguments usually has the most benefit.. like.. is this a string or an object or a maybe type. Don't often type shapes out too much unless it's `propTypes` Also, I fall into the camp of avoiding `class` wherever possible. I like my good 'ol `function` (even if recompose is building classes for me under the hood)
Hey! I just watched your first video and i liked it. You're asking for feedback, so i'll put in my two cents. It might be an idea to add a transcript of your lecture somewhere. You talk fairly fast, nice tempo, perfect for keeping my attention, but I can't help but feeling like I might have missed a detail somewhere. With a transcript of sorts I can reread anything I might have missed or look up links or references without you needing to explicitly list them again in the video description. Another, unrelated comment. Your chair looks awesome, what is it? Also, your accent. Where are you from? 
You can't really compare this, this is not really boilerplate project, this is hiding all the boilerplate for you basically.
Based on what the article says, it seems comparable. I guess I am not seeing the distinction you are pointing out. 
It uses webpack which means everything has to be imported, including css. 
Are you referring to CSS modules? If so, check out: https://css-tricks.com/css-modules-part-3-react/ https://css-tricks.com/css-modules-part-1-need/
thanks!
The alert box is browser specific and will cut off at varying points from browser to browser. You're better off just displaying your results in the HTML itself; e.g. &lt;div id="someID"&gt;&lt;/div&gt; document.getElementById('someID').innerHTML = Res.join(';');
Hey, thanks for feedback! The problem with transcript is that I don't really have one (beyond basic outline of my talk) :\ I just talk using the outline I have. So, feel free to ask for list of the things - that'd be easier for me :D The chair is a new one, got it recently and it is pretty awesome. Got it [from Amazon](https://www.amazon.de/B%C3%BCrostuhl-Schreibtischstuhl-Chefsessel-Armlehnen-Stoffbezug/dp/B0056YNWVO). I am from Russia, but past ~6 years been living/working in Germany :)
Nah, you're not the only one doing it. Here's that same technique in a library I wrote a while back: https://github.com/lhorie/mithril.js/tree/rewrite/ospec#single-tests
Thanks for your detailed post, its very helpful. My only comment is the interview seemed pretty easy compared to what I've read/experienced. I interviewed for a senior dev role a few years back (not front end) and the phone+onsite interviews were much harder. I guess the frontend specific role comes down to understanding browser/DOM in depth much more, whereas in the general role they test for stronger CS.
This is great. Next would be a customizable template that generates the scaffolding based on parameters - e.g test framework, redux, integration with other frameworks while still keeping it minimal. 
It's more like `rails new` with its conventional config defaults. Rails gets tons of flak for being too magic and abstracting stuff away, so it's kinda interesting that when the pendulum swings too far in the other direction, people look to start introducing abstractions again like hidden configuration/dev dependencies (though in this case, with an opt-out). Clearly there's a balance to be struck here.
Oh okay. Thanks for the clarification.
This is absolute bullshit...
'Eject' really is a killer feature for this. The first thing i wanted to do was add support for SASS so being able to eject was great. 
That only works for some employers. I've worked at startups where you are allowed to buy stock options after so much time, and you get nothing when it goes out of business. it's dumb. I'll take cash any day over "promises".
If it was fucking stupid I wouldn't have posted it. 1. Who cares? Especially for a null function? The function does not care. This isn't Java. 2. I've been doing software engineering full time for 27 years; 14 of those have had a large javascript portion of the job. Templates are new - I'm not the first one to describe or use this, and I specifically said it was my own code. 3. No, my color-everything by language syntax code editor would catch this like it would any other unmatched quote. Or parens. It's possible to be clever and smart.
I did know what it was doing. Yes, and this really comes in handy when using variables. 
Jeffrey Ways actually has good tutorials... '30 days to master jquery' or something like that. He has dynamics in tutoring, so I guess you won't be bored...
I would recommend [Free Code Camp](https://www.FreeCodeCamp.com). Don't be turned off by the name or the fact that their home page kind of looks like a 2011 WordPress Theme. If you look at [their curriculum](https://www.freecodecamp.com/map), you'll see it's a bunch of tutorials interspersed with projects. These projects are pretty good if you are beginning / interemediate Javascript / jQuery. You'll learn a lot, and if you get really stuck you can just search online and you'll find people who have submitted their answers on GitHub. &amp;nbsp; &amp;nbsp; These projects are good because they are designed to be something you should be able to figure out on your own, and they are cool enough that they are something you can definitely show off later. The more advanced projects would require you to know React or D3 though. &amp;nbsp; EDIT: Formatting Reddit comments properly is the WORST
This is great news!
Cool.. I made a text adventure game for a class assignment a few weeks ago. [Adventure game](http://goodwid.github.io/adventure-game).
In that case, my apologies for assuming otherwise. What do you mean by "using variables?" If you're talking about interpolation, I'm not sure how you're approach is useful rather than just confusing. The first argument is going to be an array of strings and all subsequent arguments are the interpolated values. In what situations is that useful? If I try to extend your createElement example to use interpolated values, perhaps in a project with custom elements: const el = document.createElement`datepicker-${component}`; ...it will throw an error. My point is not that we're unaware this would happen, but that it makes the original code inflexible and creates extra work for me to add parens. I've heard that backticks are not easy to type on certain european keyboard layouts, which is a consideration if you're ever working on a team. (a non-issue if that isn't the case) Editors, IDEs, and type-checkers will flag this as a bug, since you're passing the wrong types and relying on automatic `toString()` conversion. For these reasons, I respectfully suggest that the benefit of this technique (omitting two characters) is far outweighed by the potential confusion, strange code style, and incompatibility with tooling. EDIT: fixed grammar
This is a very common problem with tutorials (and universities). There aren't many but one of them is watchandcode.com. Someone also just recently started making a series on YouTube called Building Projects with JavaScript. 
Thanks so much, do you have a link? The only thing I found was this https://laracasts.com/skills/javascript and it is definitely not a beginners course
Not quite the same thing, but it inspired me to start a wizard for react-virtualized. https://bvaughn.github.io/react-virtualized/?navLink=Wizard In general I love the idea of a framework maintainer giving people a simple way to get started. :)
This looks awesome! Would love to see a web version of pad and a personal version of the old yahoo pipes. 
I think it's great, I love helpy stuff!
https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html Here is the official thing ;) 
It is fucking stupid.
&gt; Create React App uses both Webpack and Babel under the hood. All this is doing is abstracting Webpack away, and thus removing a lot of flexibility and specification from the developer's hands. I get how this could be good for beginners, but let's not be scared of tooling.
If it's stupid and you posted it, what does that tell you? Grow up and development right kid Edit: oh shit you've been devving for HOW long and you're still that bad? holy shit I'm glad I fired everyone I worked with that thinks like you hahaha
I have similar problem before. I guess when you load another php file, it appends your current page. So, try to make your login page display none after successful login. 
I think you're looking for a debouncing function. There's one in lodash, or it's relatively easy to roll your own. The gist is that `debounce()` delays execution of a function (queuing the slider action, for example) for `n` milliseconds, and cancels the request if a new one comes in. This means that only the last call in a rapid-fire series is actually executed.
First sentence &gt; You will often hear it said that JavaScript is a 'functional’ programming language Haven't heard that from any authoritative source.
What I found works best for me is: screw the tutorials and courses, and build my own thing. I've expanded on this in other threads: https://www.reddit.com/r/webdev/comments/4tqz3f/what_is_your_process_for_mapping_out_your_web_app/d5jmxg9 https://www.reddit.com/r/webdev/comments/4t4ubg/best_place_to_learn_css_from_scratch/d5em2k1
https://www.youtube.com/watch?v=6td5qaCtr9U&amp;list=PLqEB9TT9wSdjkehApInY5cNuUV7ANMGfW
Thanks, debouncing is certainly a good solution to the example slider but I'm interested in having more control - what if this wasn't rapid fire and the web worker calculation took much longer? Can I cleanly cancel rather than cleverly queue?
Been playing around and found out something but I don't really know what Im doing, using Math.floor instead of Math.round fixed the first line : var YOffset = Math.floor(yy / 8) * OLEDWidth; [edit] and it breaks everything else lol
I am attempting to write an alternative to NPM. It is still under development, so expect it to be buggy. I will eventually need a lot of help to figure out how to unit test this across various OSs. https://github.com/prettydiff/biddle
Looks pretty cool. Main point of feedback I'd have is that I hope they're working on not needing to install this globally, which [shouldn't really be necessary](http://blog.ibangspacebar.com/npm-scripts/).
If you don't have structure in your code, you can throw every single language transpiler at it, that won't fix the problem. I've seen C# projects which had no structure.
I always love to learn!
Appeals to authority are so weak. I am far more impressed by original opinions even if I disagree with them.
Yes, if you look at my edit, it inherited some C# syntax and features. It supports interfaces and abstract classes for example. You need discipline and structure as /u/kdesign pointed out (otherwise every single language, compiler and transpiler is unreadable), but it's just an extra tool to help you integrate structure into your code. Edit: I looked into the [feature list of Typescript 1.8](https://www.typescriptlang.org/docs/release-notes/typescript-1.8.html) and I see more similarities to Java than to C#. But the compiler provides more integration for OOP concepts. Edit 2: I am dumb and can't read. You would love an example of writing more structured code with Typescript. Straight to the point: interfaces are nice to have so that you can guarantee an object is implementing those functions. Typings are useful to have, but the transpiler will also allow you to write vanilla Javascript to, for example, implement delegates in an easy way (something I really miss in Java for example). Last but not least, I found writing in Typescript helps me detect problems earlier on than I would have with Javascript / Babel.
I actually use TypeScript with Angular2 :p I've got to say, Java has one of the best standards for writing code. It taught me allot about OOP. I just favour other languages over Java. With TypeScript, I just don't know how I feel about it. However, you throw allot of good points which makes me want to like it.
I asked a similar question on stack overflow a while back: http://stackoverflow.com/questions/31812752/stopping-a-webworker-whilst-its-processing-a-large-amount-of-data I went with having a cancel message that could cancel my worker from inside the worker by making it yield every 100 iterations (Of course adjust the value to make sense in your usecase). I didnt entirely like the solution to be honest but it did work. (More specific to the question I asked, i didnt go the chunking route so the accepted answer no longer applied as I realised filters could not be applied in chunks easilly)
I am personally more of a fan of C#, but that aside, I would recommend anybody to just try Typescript out once. One *HUGE* flaw that I have noticed with Typescript is the integration with other tools such as NPM. Projects like Typings came to life which solve this problem, but I just scratch my head as to why it couldn't be solved in a civilized manner.
Terrible article. A realtime chat app is 100x more expensive than his static picture sharing app.
&gt;There's more to life than coding. Make sure you get some perspective. Read books. Travel. Travel anywhere. Travel to a developing country and have a chat with someone who lives on $5 a day. Have a baby. Go skydiving. Anything. oh do fuck off. 
Logs are just text files. You can stream text files using AJAX requests or websockets.
Normal inheritance for example. 
rofl
I know there are plenty of ways to do this while rewriting the target code, but I was trying to avoid that. By the way, I'm currently doing it by rewriting `typeof &lt;item&gt;` to: (function(){ try { return &lt;item&gt;.typeof ? &lt;item&gt;.typeof : typeof &lt;item&gt; } catch(e) { return typeof &lt;item&gt; } })()
Usually I just ssh to the server and do `tail -F` to watch the logs. It's quicker and more secure than anything if you have just one or two developers. If you have more, you probably want to give only limited access. And if you have a lot of developers it'd might be a hassle. For something like that I suggest to use a log aggregating service. I know there's graylog, papertrail, loggly a lot more. Just search and see. If you don't like these, well I guess what you want is [rtail](https://github.com/kilianc/rtail) which does what you exactly asking, but be careful that it doesn't come with any authentication so you have to put it behind a reverse proxy with authentication.
It's also going to be a major impediment to angular 2 adoption, because documentation for A2 will treat TS like a first class citizen, and people are not going to bother learning BOTH TS *and* the heavy complicated monster that is A2, at the same time. But more money for me I guess? Less hobbyist adoption means more rarity for A2 devs, which means more money for me. Yay!
rtail sounds like what i need but does it have good filters for logs ? is there an option that allows integration with another web app or do i have to run it on its own ?
You win, opinion retracted.
It's much simpler with [fetch](https://developer.mozilla.org/en/docs/Web/API/Fetch_API). fetch('foo', { method: 'POST', ... }).then(response =&gt; { ... }); I recommend using fetch and a polyfill for the time being. In the not too distant future, you can drop the polyfill. http://caniuse.com/fetch By the way, the ActiveX fallback for XHR is completely pointless nowadays. It's only needed for IE6.
You really don't think this is a relevant post? Typescript compiles to ES2016.
What's wrong with Webpack?
It is, fucking stupid.
I suspect it's adoption is going to follow ng1's - lots of big enterprise non-tech companies will continue to use Angular, startups and Silicon Valley type companies will use React more. At least that seems to be the trend.
Well I guess, the only filter is the browser search. :) No integration.
Most large contracting companies that work with these enterprise non-tech companies don't move as fast as startups and leading Silicon Valley companies. That's why you're seeing lots of Angular in those areas and companies that are agile, extremely tech focused are adopting React throughout their applications.
&gt; the Konami code sequence being used to trigger a function? Would be awesome Well, vlc can record stuff too! 
WIP [config-hyperterm](https://github.com/hemanth/config-hyperterm)
Ng2 is not really optimal for hobbyist market. You don't choose it because you can whip out a todo list easily, but to have a reliable base to evolve your product on. Same applies to TS, really
So he turned lean on
Facebook also has a patent clause in the license for React that makes it difficult (or impossible) for companies to adopt ...
&gt; I just scratch my head as to why it couldn't be solved in a civilized manner. How do you mean? You can use tsify, like you use browserify with JS.
You've to restructure your code a bit. You can either nest everything or do something like this: $(function() { if (navigator.geolocation) { navigator.geolocation.getCurrentPosition(main); } }); function main(position) { var lat = position.coords.latitude; var long = position.coords.longitude; console.log(lat, long); ... } Inside that "main" function, lat and long are known and can be handed to any other function.
Can you elaborate? What is not normal about inheritance in TS?
TBH I don't like this project. Store eslint config in random js file instead of standart .eslintrc, really? Just to make sure code editor won't pick it up? What if I don't need immutable.js or fetch polyfill or whatever? And so on. 
This project has different technical goals than NPM. See the readme.md on Github for those details.
Why would they be stuck? Or do you mean a dev that only has experience with typescript would be stuck? There have been times when I've been away on vacation that other devs have had to make changes in the main project I work on. Invariably they will tell me, when I get back, how intuitively my code is structured and how easy it was for them to make changes. You don't have to use something like typescript to create beautiful code. 
Don't know if I'm biased or not, but if anybody asks me what should language should they pick up first, I also point them to Java or C#. I started with C# myself, then moved to Front-end development after a couple of years. There's no better way of learning design patterns, code structure and general programming paradigms than with one of these two. 
Totally agreed!
&gt; inheritance and other great forms of OOP http://raganwald.com/2016/07/20/prefer-composition-to-inheritance.html#afterword-prefer-composition-to-inheritance
&gt; Where can I read more about importing css in react components like this? Here: https://github.com/facebookincubator/create-react-app/blob/master/template/README.md#add-a-stylesheet
&gt; It would also be more useful I think if I did more OOP instead of mostly functional programming. How come you don't feel like being able to specify the structure of your function arguments and return values when you do mostly functional programming?
Wow, that's amazing! I've never before met a coder who never introduces bugs.
If you’re happy configuring things for yourself, please do so. Many people hate having configuration files, and this tool is created for them. &gt;Just to make sure code editor won't pick it up? This is solvable: https://github.com/facebookincubator/create-react-app/issues/124#issuecomment-234710187. &gt;What if I don't need immutable.js or fetch polyfill or whatever? This project has no relation to either immutable.js or fetch polyfill. I’m not sure where you got that idea. The only runtime dependency in the generated code is React itself, because this is a tool for React projects. It doesn’t include any other libraries or polyfills.
He must be like Steve Jobs, John Carmack and Bill Gates rolled into one.
That's it! Thank you! Awesome.... I thought round was rounding down, not to the closest. Yay!
[Promises are probably older than you](https://www.youtube.com/watch?v=24FzHoAVC10), and Node had a (broken) implementation of them [way before](https://github.com/nodejs/node/commit/65324866bcfa72b8ed934e081ac7ef239f3a819b) moving to its callback style.
I guess what you call "normal" inheritance is classical inheritance, it isn't more "normal" than prototypical inheritance or any other implementation of it. I will concede it is more common but that doesn't make it more "normal". I come from other languages with classical inheritance and therefore I also like that it is part of typescript, but there are a lot of JS developers that prefer prototypical inheritance and they definitely don't see it as a plus. 
Liar, manager don't have 25 years of development experience. 
Thank you sir this is a big help !! I appreciate it !
Thanks! Changed to ES6 with an AbstractBaseFart and a Shart subclass. First time using class syntax but definitely a joy; much easier than dealing with prototypes!
`// Note that this.isWet is not checked here as all sharts are considered wet.` Legit.
Long time lurker, first time poster. I created a UI component library called [Jam](https://awaseem.github.io/Jam/) for React projects. I plan on using it in all of my projects going forward :). Check it out on [GitHub](https://github.com/awaseem/Jam) or [npm](https://www.npmjs.com/package/jam-components)
I have been hearing this quite a bit lately, and I am left wondering, if so many prominent companies use React, and they are not seemingly worried about the license, what is preventing other companies (such as yours) from adopting it? 
Isn't TypeScript developed by Microsoft ? Kind of weird to see Google writing something in a language by Microsoft given Google's third grade petty attitude towards them.
As we all know, although a shart may be deadly, a shart can never be silent. Therefore, it stands to reason that only a fart can be both silent and deadly. class Fart extends AbstractBaseFart { /** * Farts. */ fart() { if (this.isSilent &amp;&amp; this.isDeadly) { while(true){} // will crash tab } else { if (this.isWet) { console.log('pfffffpfpfpffffff?'); } else { console.log('poooOOOot.'); } } } } let myFart = new Fart(); myFart.isSilent = true; myFart.isDeadly = true; myFart.fart() Or you can just have a method that runs that code: SBD() { while(true){} }
The pros of doing that are outweighed by the cons of introducing one more layer in my toolchain when I am working in a non-team environment. 
&gt; There's a particular, subconscious stress factor when working with JS that has you constantly worrying that you'll introduce a bug that the linter won't catch. This 100%; very well said. TypeScript can be thought of like the next evolution of a linter. It's on a whole 'nother level, and catches mistakes linters can't hope to catch.
It's entirely driven by legal - we have a lot of patents, and legal isn't comfortable with the language in the license ... Now that's to not say that teams and internal systems don't use react, it's just that officially legal has a number of concerns with the license and so (again, officially) forbids the use of react on external product. This may change, but that's how it is at the moment.
The article was published in 2013, when things were still up in the air a bit more, I guess (wasn't really following web stuff back then). 
Thanks for the feedback! Apologies for not responding until now. I think in our case, we didn't use sagas from the beginning, along with normalizr and reselect, and our data model code got pretty fragmented as a result. The way we were using reselect-ors was probably not the best way. Agreed on immutable.js - the only advantage i've seen it is in the reducers making sure that objects aren't copied between state transitions. But there's a lot of places where we expect something to be an Immutable type and it's not, and vice versa, and it brings a lot of type-checking and conversion code along with it.
Nice! I started to integrate this feature by adding a new "class FatalFart extends Error" and throwing that after a predetermined MTTW (mean time to waft). Although the weakness of this approach is obviously that by delaying the exception (in a setTimeout, for example) the callback becomes asynchronous and fails to fatally interrupt the application. An infinite loop is a great suggestion that should definitely have the desired side effects! Thanks!
It certainly has strong functional elements. And functional style coding comes a lot more naturally in js than oop. Though calling it a functional language per se is a stretch. Ps I'm really loving the ebook "the mostly adequate guide to functional programming" recommended by another poster on this sub.
Honestly you'll get about halfway through that tutorial before hitting any TypeScript. The rest is plain-ol ECMAScript. Here's the first time you see ts: export class Hero { id: number; name: string; } Here's the same thing in JavaScript: export class Hero {} // no more code completion or linting those properties :( Although some things will change when they translate the documentation to JavaScript, it's far less than you might think.
Serious question though, how would you test it?
Hungarian notation in Javascript? Doesn't sound fun. 
Not the right place.
It seems that you want trivial commands like delete to behave in a bizarre way, so I'm glad the restrictions are there in place to stop abuses like these. I understand it's disappointing when trying experimental designs, but the biggest disappointment would be if features like Proxy turn JavaScript into Perl. Write-only code. 
&gt; A React-based JS framework that makes farts. &gt; * TODO(toiletjs): Use React. See #4 (v2). Something's smelly here.
Did you actually read the article? 
After reading so much people complaining about Angular and Typescript I get the impression that most of the people here work in very small teams or just by themselves. Not that it's a problem. Not a all. I have been there. It's just that not all of us work in that reality. Angular and Typescript provide massive amounts of value to enterprises, and/or multi-person/multi-team projects. I will refer to my previous comment regarding my experience: https://www.reddit.com/r/javascript/comments/4u7izq/angular2_why_typescript/d5o1q6o Moreover, Typescript is not hard to learn and is not hard to setup. It is literally 30 to 60 minutes going over the Typescript Cookbook an that is all. You will need much more time to learn how to fill your taxes than to learn Typescript. 
Yeah it's a silly subject but I'm learning a lot about ES6 in the process. I think I mentioned it in another reply but this project was the first time I got to use the new class syntax. I'm taking it seriously as a learning experience. I didn't mean for it to be a shitpost.
Thanks! That sort of thing is always nice to hear :)
In my experience with nodejs and JavaScript, one of the more difficult errors to catch in an enterprise level app is what's being passed through all of your classes and functions. Typescript helps catch a lot of errors you might miss and reduces a lot of the null, undefined and property checks you have to do once you have a large codebase with several people in it. 
Dan Abramov announces essentially the same thing and [gets a solid, positive response](https://www.reddit.com/r/reactjs/comments/4u3hit/create_apps_with_no_configuration_react/). Konstantin Tarkus does the same thing and he gets downvotes and criticism. There's good reason for this tool (otherwise Facebook wouldn't have developed a similar one at the same time). Yes, it's mostly for beginners. But Reddit feels biased against Konstantin Tarkus, even though he's been one of the biggest contributors to the React ecosystem. Kinda feel bad for the guy.
I think this is the part they were referring to: http://i.imgur.com/rF330bE.png I don't know if I would ever do it, but I think it's pretty cool.
It's a lot of noise. Tools like this are definitely intended for beginners or small projects, though. There's absolutely nothing inherently wrong with any of the alternatives to this project. This is not "the new way of doing things". It's just easier to go from 0 to 30 with these packages.
But how does Angular increase productivity? In my experience a lot of time has to be devoted towards finding ways to workaround the limitations of the framework. Honestly I believe that the whole "client side rendering is slow" was caused by Angular 1.x. Also as someone who does not have an unlimited data plan, 1mb is a pretty big deal. 
I'm not sure it does, but file size is 3rd-4th on the list of things I'm optimizing for when I chose a frontend framework. Angular 1.x is plenty fast at rendering, especially if you cache aggressively, use cdn, etc. ng2 is much faster than ng1 and on par with React, with more batteries included. I was mainly asking with an eye towards consulting revenue in the future.
I giggled, but I looked into your post history and found [brexitjs](https://github.com/brexitjs/brexitjs), and well that's just genius. var GB = document.querySelector('script[src$=brexit.js]'); var EU = GB.parentNode; EU.removeChild(GB);
ok, fair enough, most websites are huge anyways even without the JS. But even so I would still suggest trying React + TypeScript first. I originally picked Angular over React and used it for more than a year, and I was afraid of trying React because I thought it would be a huge time investment(like Angular was), but it wasn't. React is very well designed, transparent and intuitive, you won't have trouble finding documentation or developers, you can use TS or anything with it plus it's actually used by Facebook. 
&gt; I was mainly asking with an eye towards consulting revenue in the future. oh I didn't see that before, in that case I don't know what to suggest. On the one hand React is much more popular, thus way more potential clients(possibly), but on the other hand NG2 is very complex thus it's likely a lot of companies will need NG2 experts to fix their apps. 
I'm not saying I would. I'm just pointing out that the Proxy API already has the ability to change the behavior of trivial commands like `delete` drastically… you just can't change the return type ;)
Can you use `Symbol.toStringTag` instead, or does it *have* to be `typeof`? For example: const toString = Object.prototype.toString; const type = (val) =&gt; toString.call(val); Then: type({}); //=&gt; '[object Object]' type([]); //=&gt; '[object Array]' type(undefined); //=&gt; '[object Undefined]' let obj = { [Symbol.toStringTag]() { return 'Custom'; } }; type(obj); //=&gt; '[object Custom]' If you want the output to be readable instead of just unique, you can pull the substring out. Personally, I prefer doing something like this, then using the results for comparison: const types = Object.create(null); types.string = type(''); types.object = type({}); types.null = type(null); // etc, etc
The deleteProperty error is correct IMO - the delete operator returns true/false always, so it doesn't make sense to return something else. The set error, however, seems suspicious... I'll try to find the rationale later. Maybe it can be relaxed.
[I know there are plenty of ways to do this while rewriting the target code, but I was trying to avoid that.](https://www.reddit.com/r/javascript/comments/4u85dx/modifying_the_result_of_typeof/d5nmb62) I'm currently going for a much simpler solution, though it still requires to statically rewrite the target code: it replaces `typeof x` (a UnaryExpression) with a function call (CallExpression) that returns `x.typeof` if it exists, and `typeof x` otherwise.
Thanks for that. I actually started learning TypeScript(I hope it won't take too much time - just wanted to learn Ang.2)
I was treating the request body as another type of header, which is indeed improper.
It's not more efficient. It's just a simpler code. If you want effieiency, write your own optimized code without jQuery.
I was kind of sceptical of TypeScript when they first announced that Angular 2 would be written in it, however after writing a small-ish project in it, I think that it's great. I could jump right in with my JS knowledge and a semester of C# basics. It definitely saves you from pitfalls where a linter can't.
Try /r/gamedev/
&gt; And TypeScript makes client-side application development more accessible to those server-side devs crossing over. Definitely this, though I had the reverse experience. Learning TS made it easier for me to pick up Scala.
Sorry @vaporswift. You need to provide more information so someone could help. Questions that immediately come to mind are: What have you tried? What does the server code look like? What is inside chat.js? What errors do you receive in console (if any)? An excellent guide on how-to ask a question like this can be found [here @ stackoverflow](http://stackoverflow.com/help/how-to-ask)
Try http://www.freesound.org/browse/
Is it so that JS engines can make certain assumptions about your code? var foo = proxyObject.bar = 3; // JS engine assumes foo is set to 3, not to something else returned by proxyObject's set handler
&gt; namely because you are not having to do a look up on the same element to apply a new style each time. You actually aren't doing a look up each time. You saved a reference to the element with this line right here: $test = $('.test'); That is the only time you are doing the lookup. Now, if you didn't have that variable, and your code was like this instead: $('.test').css('border', '10px solid #f09'); $('.test').css('height', '500px'); $('.test').css('width', '500px'); $('.test').css('text-transform', 'uppercase'); $('.test').css('color', '#fff'); $('.test').css('background-color', '#000'); In this case, you would actually be doing a look up each time. Again, the important part is that you saved a reference to a variable called `$test`. This is often referred to as "caching" an element, and it's often done when you want to perform actions on the same element multiple times without having to do a look up each time.
TS is a Microsoft thing but there are tons of contributors. Not totally surprising. MS has had a big presence at ng-conf for a while. I actually think it's great that the Angular team is throwing in with TS rather than DART being the primary recommendation. 
I'm also a big fan of typescript. However there were times when it got in the way, typically when the definition files for third party libs are incomplete or not perfect. This will result in an error that shouldn't be there, and you need either to fix the definition file (that you were supposed to simply import) or do some workaround like "as any" to shut up the compiler.
This fucking thing again?
You might be looking for the pointer events specification. 
Still, why Typescript instead of Flow? Typescript, today, is behind the current ES standard, even re-defines certain aspects of it, like the import resolver, which makes integration with npm harder. Flow, in my opinion, is a much cleaner implementation that doesn't carry years of baggage when fixing ES5 was a necessity. With ES6 out in all major browsers and Babel support, why accept major blows like being cut-off from npm without hacks like TSify, or being ES6 feature incomplete?
&gt; For what it's worth, we're a friendly bunch over at /r/typescript. Thanks for the link. Subscribed. That will be of great use!
Yes, that happens. DefinitelyTyped is a community project and as such I don't expect it to be perfect. I appreciate it very much as is. I think it happens less and less these days. 
The problem here might not be Typescript, yes or no. Angular 2 appears more like a masochist exercise on making something that could look simple and elegant and turn it into a nightmare of abstract concepts and magic annotations. Since the AtScript idea, it feels more like a forced and futile exercise in bringing some experimental language features into a framework that could live without them. What we often refer to create a solution to a problem that doesn't exist the first place. And you can see how in the numerous other frameworks out there, being React, Vue, Mithril, Ember or even Aurelia which feels like an Angular without the non sense, that they can simplify the constructs, don't need any TS to look less verbose and often come with both an easier learning curve and matching performance.
Hmm... Telnet 2016? ;) 
After playing for a couple of minutes [this](https://i.imgur.com/BwVYLUD.png) happened. I don't know what exactly happened, but these were left over when everything else moved down after I removed some rows. Hope you can track the bug down.
Whaaat?! I really need to fix this one!
I think everything is some kind of excercise, but it was rather a fun project inspired by [this Snake](https://github.com/p01/snake). With Tetris it isn't that simple to bind everything to one event though and there are some predefined objects. I wanted to make it as raw as possible, yet with a clean code. That's why I didn't use canvas. Regarding "shaking side borders" - hm, I haven't really encountered this problem, but I am aware that default &lt;pre&gt; tag is different on every browser.
Yes, I am totally aware of this. I had a problem with being consistent for this project, because I wasn't really sure what is more important to me: nice user experience or lower file size. One could say, that I wasted a lot of space on additional styles and text messages (at least 15%, I think?). But I just wouldn't want to play the game without it. There are some other antipatterns in the code, like copying array without reference using JSON encode and decode. I think in my free time I will try to find a good compromise to make it work like a charm and become even lighter. Thanks for your feedback ;) .
Please don't be so disrespectful because you biased or mindlessly hate Microsoft but above all make sure you get the facts straight! &amp;nbsp; C# and Java are both INSPIRED by the C family kind of languages there's no doubt about it. &amp;nbsp; You don't design a language by copy/paste the design of another one, if that was the case, there was nothing to design. &amp;nbsp; C# and Java only look the same on the surface but they are vastly different in design! &amp;nbsp; C# 1.0 has properties, Java doesn't. &amp;nbsp; C# 1.0 has delegates, Java doesn't. &amp;nbsp; C# 1.0 has built-in events, Java doesn't. &amp;nbsp; C# 1.0 has operators overloading, Java doesn't. &amp;nbsp; C# 1.0 has pointers in unsafe mode, Java doesn't. &amp;nbsp; C# 1.0 has structs, Java doesn't. &amp;nbsp; Even features like Generics that both C# and Java support are very different beasts. &amp;nbsp; Java has things that C# doesn't like local classes so I really can't see the "ripoff". &amp;nbsp; J++ that later was replaced with J# isn't a "ripoff" it is implementation of the Java spec on Windows. &amp;nbsp; Sun sued Microsoft because Microsoft wanted to extend Java in ways that didn't feel right to them so Microsoft created C#. &amp;nbsp; Jscript like J++ isn't a "ripoff" it is an implementation of the ECMAScript 3 spec, at least it was initially. &amp;nbsp; Microsoft added more things to JavaScript and they didn't want to get into trademarks issues so they named it Jscript. &amp;nbsp; If Microsoft didn't implement JavaScript on Internet Explorer then developers couldn't run their existing code at all on IE, however, up to version 9 Microsoft didn't really comply with the standard so it was a mess but this is a different story. &amp;nbsp; F# was initially an implementation of OCaml that runs on top of the CLR! and over time they added more stuff to it so again, it's not a "ripoff". &amp;nbsp; Languages tend to be implemented for different platforms by different people/companies/organizations, languages tend to evolve and language designers tend to get inspired by other languages, this is all inevitable so calling things a "ripoff" without understanding what it really means is silly. 
It is possible, but once you have asynchronous callbacks, you have to stop thinking like the program is *imperative*. Just because the `console.log` is farther down the page does not mean it gets called later. Whatever you need to do (including logging) will need to happen inside of or because of the callback. There are a couple of ways to do that. As inu-no-policemen shows, you can assign and do all the work in the callback. You don't have to make the variables local, but you still won't have the updated values until the callback runs, which is after your program has "finished". If you need to do something with them, it will have to be initiated in the callback or by something the callback does. 
Im on mac and Chrome and the borders shake here too. I think it maybe the unicode font (it is using unicode right for the blocks?). I dont think they are fixed width even if you're using pre-tags.
Why should you use this over [classnames](https://github.com/JedWatson/classnames)?
I would also rate limit the keypress events, if I hold up arrow or down arrow continuously it creates some interesting UI errors like allowing blocks to continue through after hitting a wall in some instances or turning an L block into a swastika. It also occasionally prevents me from moving left or right after holding up/down.
I guess you can use this for more than for the class attribute on HTML/JSX-Elements and class names was just an example.
CoffeeScript probably would have stuck around except everything meaningful it provided was provided by ES6. If ES7 (or whatever) provides types then yes, TypeScript will probably go the way of CoffeeScript.
Thank you. This was a very helpful explanation.
The gap on the right was formed becase a 4x4 block didn't fall after the row below it was cleared. http://imgur.com/I5fAwqE
Gulp and grunt can do way more than JSPM. Honestly, I have been part of a team using JSPM and it was really awful compared to webpack. 
Nothing lines up and the whole thing wobbles as you play!
awesome job!
You don't want to do that though, but it's a nice study.
Maybe put your connections array up with your emptyArray var. Everytime you recieve a message, the connections array is reset. That may be the problem?
Hey /r/javascript. I am the author of ndt, and it is still in the early stages of development. If you have any ideas, comments, or feedback for me I would greatly appreciate it. As it stands currently, ndt is working for every project I am working on, but I understand that more configuration and features could be useful for a wider audience. Let me know your thoughts!
&gt; "Flop" may be a little strong It isn't. I see no traction in NG2, and no particularly compelling reasons to think that will change once the framework is formally "released". React has become the 'default' choice and seems to lack the baggage than NG2 has already picked up. I honestly think the framework will be regarded a quiet failure by the end of the year.
This page explains it all and has the browsers that still support the API - http://googlegeodevelopers.blogspot.co.uk/2014/12/announcing-deprecation-of-google-earth.html
Have you tried VueJS? It's inspired by Angular but is easy to learn and powerful.
Yes, I've just noticed that &lt;pre&gt; tag doesn't mean at all that font will be monospace and it's just SO UGLY on Mac. I gotta change it :) .
But why must it return a boolean? And like I've pointed out, there's a ton of docs you can break using the Proxy API. I can make it *not* perform the actual delete and return `true`. If I can prevent the actual deletion of the property, why must it return a boolean?
Maybe for certain optimizations.
are you .... from.... the future?
"Best" is super personal. I used to use Mocha for everything. I played with Tape, liked it... used it for a bit. I got sick of a lot of reporters hijacking my console, so I switched to node-tap. That was great, small footprint, no magic, etc.... but then they made a point to make it more like Mocha. At which point my thought process was, Mocha vs. Tap... whichever is best for the job. Current project I'm working on. Is experimental. I am trying to do TDD, so I want a watcher. Tap doesn't have that do I'm using Mocha. Last project was a thin cli script. Tap was perfect for it. Essentially use what allows you to write tests, as that's the important part. The framework matters little.
&gt; I wasn't really sure what is more important to me: nice user experience or lower file size User experience. *Always* user experience. Instantly delivering a bad experience isn't better than a slightly delayed great one.
I have been there and have felt your pain. This is OK. The thing about angular, is that you must do things the 'Angular way'. Fighting an opinionated framework will only cause pain (this is what happened to me initially). This [post on stackoverflow](http://stackoverflow.com/a/15012542) helped me get past a hump a few years back when learning Angular. With that said, maybe React just fits 'you' and how you think.. much better than Angular 1.5 does. Either way, i've been there. Are you trying to learn Angular for fun or is this for employment?
It's because of widths of characters not being equal, it makes the game a bit unplayable as cells don't align with each other.
I also think this is the problem.
Whatever one you feel comfortable with. They all have their perks, I tried to start with "the intern" test framework and it was cool but just didn't work out in the end. I've now switched to mocha and it's working great. Practically the same though since I'm still using chai for assertions
/u/michowski you can replace "Math.floor" with "~~" and "Math.random()*n" with "new Date%n". With those change new code, 1.86kb: &lt;html style="font-size:40px;line-height:.6;text-align:center"&gt;&lt;pre id="g" style="display:inline-block"&gt;&lt;/pre&gt;&lt;script&gt;var e=[[4,5,6,7],[0,4,5,6],[2,4,5,6],[1,2,5,6],[1,2,4,5],[1,4,5,6],[0,1,5,6]].map(function(c){var b=[],a,d;c.forEach(function(c){a=c%4;d=~~(c/4);b.push([a,d])});return b}),f=[],g,h,k,l,m,n;function p(c,b){var a=k.every(function(a){var q=a[0]+m+c;a=a[1]+n+b;return 0&lt;=q&amp;&amp;9&gt;=q&amp;&amp;15&gt;=a&amp;&amp;!f[q][a]});a&amp;&amp;(m+=c,n+=b,r());return a}function t(){l=~~(new Date%e.length);k=e[l];m=~~(new Date%7);n=-2;for(var c=~~(new Date%3),b=0;b&lt;c;b++)u()}function v(){if(!p(0,1))if(k.some(function(a){return 1&gt;a[1]+n}))document.querySelector("#g").innerHTML="GAME OVER.\n\n\nSCORE: "+g+"\n\n\nPRESS ANY KEY\n\nTO START NEW GAME.",h=0;else{k.forEach(function(a){f[a[0]+m][a[1]+n]=1});t();for(var c=[],b,a=0;16&gt;a;a++){b=!0;for(var d=0;10&gt;d;d++)if(!f[d][a]){b=!1;break}b&amp;&amp;c.unshift(a)}if(c.length)for(g+=c.length,b=1,a=c.shift()-1;0&lt;=a;a--)if(c.length&amp;&amp;c[0]===a)c.shift(),b++;else for(d=0;10&gt;d;d++)f[d][a+b]=f[d][a];r()}}function r(){var c=JSON.parse(JSON.stringify(f));k.forEach(function(a){c[a[0]+m][a[1]+n]=1});for(var b="SCORE: "+"0".repeat(10-(g+"").length-5)+g+"\n",b=b+("\u25a1".repeat(12)+"\n"),a=0;16&gt;a;a++){for(b=b+"\u25a1",d=0;10&gt;d;d++)b+=c[d][a]?"\u25a0":" ";b+="\u25a1\n"}b+="\u25a1".repeat(12);document.querySelector("#g").innerHTML=b}function u(){if(3!==l){var c=[],b=!0;k.forEach(function(a){var d=2-a[1];a=a[0];0===l&amp;&amp;k[0][0]==k[1][0]&amp;&amp;(d+=1);0&gt;d+m||0&gt;a+n||10&lt;=d+m||16&lt;=a+n?b=!1:f[d+m][a+n]&amp;&amp;(b=!1);c.push([d,a])});b&amp;&amp;(k=c,r())}}var w={37:p.bind(null,-1,0),39:p.bind(null,1,0),40:p.bind(null,0,1),38:u};document.onkeydown=function(c){if(h&amp;&amp;c.keyCode in w)w[c.keyCode]()};document.onkeypress=function(){if(!h){for(var c=g=0;10&gt;c;c++){f[c]=[];for(var b=0;16&gt;b;b++)f[c][b]=0}t();r();h=1}};document.querySelector("#g").innerHTML="PRESS ANY KEY\n\nTO START NEW GAME.";setInterval(function(){h&amp;&amp;v()},400);&lt;/script&gt;&lt;/html&gt; Edit: you can use arrow function in almost every function, 1.79kb: &lt;html style="font-size:40px;line-height:.6;text-align:center"&gt;&lt;pre id="g" style="display:inline-block"&gt;&lt;/pre&gt;&lt;script&gt;function p(a,b){var c=k.every(c=&gt;{var d=c[0]+m+a;return c=c[1]+n+b,d&gt;=0&amp;&amp;9&gt;=d&amp;&amp;15&gt;=c&amp;&amp;!f[d][c]});return c&amp;&amp;(m+=a,n+=b,r()),c}function t(){l=~~(new Date%e.length),k=e[l],m=~~(new Date%7),n=-2;for(var a=~~(new Date%3),b=0;a&gt;b;b++)u()}function v(){if(!p(0,1))if(k.some(a=&gt;{return 1&gt;a[1]+n}))document.querySelector("#g").innerHTML="GAME OVER.\n\n\nSCORE: "+g+"\n\n\nPRESS ANY KEY\n\nTO START NEW GAME.",h=0;else{k.forEach(a=&gt;{f[a[0]+m][a[1]+n]=1}),t();for(var b,a=[],c=0;16&gt;c;c++){b=!0;for(var d=0;10&gt;d;d++)if(!f[d][c]){b=!1;break}b&amp;&amp;a.unshift(c)}if(a.length)for(g+=a.length,b=1,c=a.shift()-1;c&gt;=0;c--)if(a.length&amp;&amp;a[0]===c)a.shift(),b++;else for(d=0;10&gt;d;d++)f[d][c+b]=f[d][c];r()}}function r(){var a=JSON.parse(JSON.stringify(f));k.forEach(b=&gt;{a[b[0]+m][b[1]+n]=1});for(var b="SCORE: "+"0".repeat(10-(g+"").length-5)+g+"\n",b=b+("\u25a1".repeat(12)+"\n"),c=0;16&gt;c;c++){for(b+="\u25a1",d=0;10&gt;d;d++)b+=a[d][c]?"\u25a0":" ";b+="\u25a1\n"}b+="\u25a1".repeat(12),document.querySelector("#g").innerHTML=b}function u(){if(3!==l){var a=[],b=!0;k.forEach(c=&gt;{var d=2-c[1];c=c[0],0===l&amp;&amp;k[0][0]==k[1][0]&amp;&amp;(d+=1),0&gt;d+m||0&gt;c+n||d+m&gt;=10||c+n&gt;=16?b=!1:f[d+m][c+n]&amp;&amp;(b=!1),a.push([d,c])}),b&amp;&amp;(k=a,r())}}var e=[[4,5,6,7],[0,4,5,6],[2,4,5,6],[1,2,5,6],[1,2,4,5],[1,4,5,6],[0,1,5,6]].map(a=&gt;{var c,d,b=[];return a.forEach(a=&gt;{c=a%4,d=~~(a/4),b.push([c,d])}),b}),f=[],g,h,k,l,m,n,w={37:p.bind(null,-1,0),39:p.bind(null,1,0),40:p.bind(null,0,1),38:u};document.onkeydown=a=&gt;{h&amp;&amp;a.keyCode in w&amp;&amp;w[a.keyCode]()},document.onkeypress=()=&gt;{if(!h){for(var a=g=0;10&gt;a;a++){f[a]=[];for(var b=0;16&gt;b;b++)f[a][b]=0}t(),r(),h=1}},document.querySelector("#g").innerHTML="PRESS ANY KEY\n\nTO START NEW GAME.",setInterval(()=&gt;{h&amp;&amp;v()},400);&lt;/script&gt;&lt;/html&gt; Edit 2: Turns out you can remove almost every "var". Also you can remove a few "return" and one or two "{" and "}" since it's an arrow, 1.74kb: &lt;html style="font-size:40px;line-height:.6;text-align:center"&gt;&lt;pre id="g" style="display:inline-block"&gt;&lt;/pre&gt;&lt;script&gt;var e=[[4,5,6,7],[0,4,5,6],[2,4,5,6],[1,2,5,6],[1,2,4,5],[1,4,5,6],[0,1,5,6]].map(c=&gt;{var b=[],a,d;c.forEach(c=&gt;{a=c%4;d=~~(c/4);b.push([a,d])});return b}),f=[],g,h,k,l,m,n;function p(c,b){a=k.every(a=&gt;{q=a[0]+m+c;a=a[1]+n+b;return 0&lt;=q&amp;&amp;9&gt;=q&amp;&amp;15&gt;=a&amp;&amp;!f[q][a]});a&amp;&amp;(m+=c,n+=b,r());return a}function t(){l=~~(new Date%e.length);k=e[l];m=~~(new Date%7);n=-2;for(c=~~(new Date%3),b=0;b&lt;c;b++)u()}function v(){if(!p(0,1))if(k.some(a=&gt;1&gt;a[1]+n))document.querySelector("#g").innerHTML="GAME OVER.\n\n\nSCORE: "+g+"\n\n\nPRESS ANY KEY\n\nTO START NEW GAME.",h=0;else{k.forEach(a=&gt;f[a[0]+m][a[1]+n]=1);t();for(c=[],b,a=0;16&gt;a;a++){b=!0;for(d=0;10&gt;d;d++)if(!f[d][a]){b=!1;break}b&amp;&amp;c.unshift(a)}if(c.length)for(g+=c.length,b=1,a=c.shift()-1;0&lt;=a;a--)if(c.length&amp;&amp;c[0]===a)c.shift(),b++;else for(d=0;10&gt;d;d++)f[d][a+b]=f[d][a];r()}}function r(){c=JSON.parse(JSON.stringify(f));k.forEach(a=&gt;c[a[0]+m][a[1]+n]=1);for(b="SCORE: "+"0".repeat(10-(g+"").length-5)+g+"\n",b=b+("\u25a1".repeat(12)+"\n"),a=0;16&gt;a;a++){for(b=b+"\u25a1",d=0;10&gt;d;d++)b+=c[d][a]?"\u25a0":" ";b+="\u25a1\n"}b+="\u25a1".repeat(12);document.querySelector("#g").innerHTML=b}function u(){if(3!==l){c=[],b=!0;k.forEach(a=&gt;{d=2-a[1];a=a[0];0===l&amp;&amp;k[0][0]==k[1][0]&amp;&amp;(d+=1);0&gt;d+m||0&gt;a+n||10&lt;=d+m||16&lt;=a+n?b=!1:f[d+m][a+n]&amp;&amp;(b=!1);c.push([d,a])});b&amp;&amp;(k=c,r())}}w={37:p.bind(null,-1,0),39:p.bind(null,1,0),40:p.bind(null,0,1),38:u};document.onkeydown=c=&gt;{if(h&amp;&amp;c.keyCode in w)w[c.keyCode]()};document.onkeypress=()=&gt;{if(!h){for(c=g=0;10&gt;c;c++){f[c]=[];for(b=0;16&gt;b;b++)f[c][b]=0}t();r();h=1}};document.querySelector("#g").innerHTML="PRESS ANY KEY\n\nTO START NEW GAME.";setInterval(()=&gt;h&amp;&amp;v(),400);&lt;/script&gt;&lt;/html&gt; Edit 3: So, you don't need to specify "px" on style, the browser acknowledges when no "unit" is set as "px" and I didn't see any difference on the pre element, so I think you can remove it. Also I replace a few "\u25a1" with a variable, saves a little bit, 1.69kb: &lt;html style="font-size:40;line-height:.6;text-align:center"&gt;&lt;pre id="g"&gt;&lt;/pre&gt;&lt;script&gt;var z='\u25a1',e=[[4,5,6,7],[0,4,5,6],[2,4,5,6],[1,2,5,6],[1,2,4,5],[1,4,5,6],[0,1,5,6]].map(c=&gt;{var b=[],a,d;c.forEach(c=&gt;{a=c%4;d=~~(c/4);b.push([a,d])});return b}),f=[],g,h,k,l,m,n;function p(c,b){a=k.every(a=&gt;{q=a[0]+m+c;a=a[1]+n+b;return 0&lt;=q&amp;&amp;9&gt;=q&amp;&amp;15&gt;=a&amp;&amp;!f[q][a]});a&amp;&amp;(m+=c,n+=b,r());return a}function t(){l=~~(new Date%e.length);k=e[l];m=~~(new Date%7);n=-2;for(c=~~(new Date%3),b=0;b&lt;c;b++)u()}function v(){if(!p(0,1))if(k.some(a=&gt;1&gt;a[1]+n))document.querySelector("#g").innerHTML="GAME OVER.\n\n\nSCORE: "+g+"\n\n\nPRESS ANY KEY\n\nTO START NEW GAME.",h=0;else{k.forEach(a=&gt;f[a[0]+m][a[1]+n]=1);t();for(c=[],b,a=0;16&gt;a;a++){b=!0;for(d=0;10&gt;d;d++)if(!f[d][a]){b=!1;break}b&amp;&amp;c.unshift(a)}if(c.length)for(g+=c.length,b=1,a=c.shift()-1;0&lt;=a;a--)if(c.length&amp;&amp;c[0]===a)c.shift(),b++;else for(d=0;10&gt;d;d++)f[d][a+b]=f[d][a];r()}}function r(){c=JSON.parse(JSON.stringify(f));k.forEach(a=&gt;c[a[0]+m][a[1]+n]=1);for(b="SCORE: "+"0".repeat(10-(g+"").length-5)+g+"\n",b=b+(z.repeat(12)+"\n"),a=0;16&gt;a;a++){for(b=b+z,d=0;10&gt;d;d++)b+=c[d][a]?"\u25a0":" ";b+=z+"\n"}b+=z.repeat(12);document.querySelector("#g").innerHTML=b}function u(){if(3^l){c=[],b=!0;k.forEach(a=&gt;{d=2-a[1];a=a[0];0===l&amp;&amp;k[0][0]==k[1][0]&amp;&amp;(d+=1);0&gt;d+m||0&gt;a+n||11&lt;d+m||17&lt;a+n?b=!1:f[d+m][a+n]&amp;&amp;(b=!1);c.push([d,a])});b&amp;&amp;(k=c,r())}}w={37:p.bind(null,-1,0),39:p.bind(null,1,0),40:p.bind(null,0,1),38:u};document.onkeydown=c=&gt;{if(h&amp;&amp;c.keyCode in w)w[c.keyCode]()};document.onkeypress=()=&gt;{if(!h){for(c=g=0;10&gt;c;c++){f[c]=[];for(b=0;16&gt;b;b++)f[c][b]=0}t();r();h=1}};document.querySelector("#g").innerHTML="PRESS ANY KEY\n\nTO START NEW GAME.";setInterval(()=&gt;h&amp;&amp;v(),400);&lt;/script&gt;&lt;/html&gt; BTW very nice coding, mate. You rock.
Why didn't they just implement Task? Thats pretty much a better async implementation and it has been around a lot longer.. Kinda frustrates me that they had to reinvent things.. https://glebbahmutov.com/blog/difference-between-promise-and-task/
The conclusion is pretty spot on. Maps are useful and make a lot of JS more explicit, but most of the time an object covers the use case.
Thanks for sharing relevant lingo - some good literature and modules to be found after searching those concepts. Though haven't quite found this as described quite yet. Indeed, I did I hack together something but before investing more effort I thought I would do some more significant due diligence on what is currently out there. 
Lots of mistakes here. Most importantly, the main difference is missed: Maps are just key-value stores, objects have key-value storage, prototypes, getters and setters, sealing, freezing, operator overrides, iterator opt-out, writeable opt-out, opt-out opt-out, and probably more that I'm not remembering. Objects try to be everything for everybody, and as a result they're slow and unpredictable. Maps are just key-value stores, and as a result they're faster and more predictable -- and also can't do all that other stuff objects do. &gt; The second difference is the presence of the has() function, which classical dictionary objects (the things that have the form {a:”foo”, b:”bar”}) don’t have. They do have it, it's `hasOwnProperty` or `key in obj`. &gt; even if you use a dictionary object to retrieve a “null” property with a guess on a label, the act of doing so forces the object to create a new slot. No, it doesn't create a new "slot". And you don't get `null`, you get `undefined`. &gt; This in turn suggests two other properties – delete() and keys(): Objects have analogues for both, `delete obj.key` and `Object.keys(obj)`. &gt; You are in fact passing an iterator to the constructor, because in ES6 an array is also, by definition, an iterator. No it's not, it's an iterable. That's not just semantics. An iterable can provide you iterators, only iterators are stateful (they store the cursor position). If Arrays were iterators rather than iterables then you would be unable to, for example, loop over an Array within a loop over the same Array. &gt; The keys() and values() functions also return iterators, but they usually return only the left or right part of the entry respectively: A nitpick, but not "usually", always. &gt; Moreover, if no function is supplied after the iterator, then entries() is assumed: Technically incorrect way of phrasing it. If no function is supplied then the Array itself is asked for an Iterator, and will return an Iterator identical to one returned by asking `arr.entries()`. &gt; Another primary difference between objects and maps is that the former uses the length keyword to determine the total number of properties the object has No it doesn't. It doesn't have a length property. Also, neither length nor size are keywords in JavaScript, they're properties. &gt; An object may also inherit properties, methods or objects from the prototype. It doesn't "inherit" anything. It stores a reference to its prototype, and when you do something like `obj.key` "key" is looked for first on the object, then on its prototype, then on the prototype of that and so on. And methods and objects (I assume you mean object values) are both properties. &gt; Instead, they could be objects, functions, even other maps. Functions and Maps are objects. &gt; what is actually passed is the internal resource pointer for the resource in question "Reference" is how JavaScript people refer to it. And this isn't some magical Map behavior, it's part of the JavaScript-wide law: objects are passed by reference, primitives by value. &gt; even if the contents of that resource changes, the object itself can still act as a key. Not necessarily wrong but I would word it much more carefully. Properties on the object can change, the object itself cannot. So if `key` is an object then `key.a = 1` doesn't matter, but `key = {another:'object'}` does. &gt; what this does is to create a new “property” object I don't know what a "property object" is supposed to mean, but what it does is create a new Map. &gt; This can be seen as a way of adding (and retrieving) metadata about an object without having to store it on the object itself. This could also be used for assigning things like user information or descriptions [...] Setting these metaproperties, when used with classes, are also a way of creating private variables In all those situations you should use a `WeakMap` rather than a `Map`. A WeakMap holds references to its keys and values weakly, meaning that whether something is a key or value in a WeakMap makes no difference on whether it can be garbage collected. It amounts to eliminating memory leaks. &gt; As to the question of whether objects or maps are “better”, this is, except in certain limited circumstances, a stylistic decision. It's really not. Maps are better key-value stores and Objects are better OOP building blocks, with the caveat that if you're writing code for old IE then it might not be worth it to polyfill Map.
Thank you. I was shouting at my screen while trying to read this.
I sort-of want to upvote this post so more people can see and learn from your comment.
Well no shit mister expert 
Weird variable width stuff going on on Chrome 52 OS X: http://imgur.com/a/L4eZh Wouldn't it be easier just to generate divs for the blocks?
From the PoV of application design there is nothing wrong with this at all. You are no longer developing a "web application" or "html application", you just happen to be using HTTP(S) as a transport mechanism between your client &amp; server and using the browser as a referring engine, but that really doesn't matter in the grand scheme of things for an application. It could be an issue if you want your content externally indexed though which you might for a "community help" application (I assume you mean something akin to StackExchange?) if some/all your content is intended to be publicly available. Spiders used by search engines and such are very unlikely to understand your API and index it usefully. Whether or not you care about this will be the decision maker.
Yep. Worth also pointing out if search engine indexing is important, it's possible to do some SSR.
no. no no no. [THIS IS UNACCEPTABLE](https://www.youtube.com/watch?v=MIZbGSXeWWE). HTML MUST ALWAYS RUN ON SERVER
Stick to Mocha, Jasmine and Chai, these are very well documented and have a lot of articles/resources on the internet... most of the problems you will come across are already fix by somone else, so sollutions are plentifull
As I made this, I discovered that JQuery 3.0 doesn't really treat inlined SVG the same as HTML. Possibly older versions too.
Exactly my thoughts. Can you explain this with more details. Is this going to be bad when I scale up in future ? &gt; Also, when you scale to a few platforms this will be of big difference. 
People give too much credit to the browser optimizations and this often leads to sloppy code. I hardly think the browser will optimize a jquery selector.
Thanks for bringing this up, were you the one who sent a PR? I just updated it and it should be fixed. Thanks again :)
Webpack/Browserify is only doing the bundling part of the job. NPM is where (most) of the modules are coming from, unless you're hosting your own, and or using some other private package server. 
I hate the way maps are created from literal data. Nested arrays is a bit of a mess. But I have no better suggestion.
- Don't use bower - Use npm - Don't accidentally include sensitive or server side modules - ... - Profit
It depends on what the script does. Does it rely on any DOM features? You'll be missing those server side. Install node on your system and run "node &lt;file&gt;.js" and see what sort of errors come up. 
&gt; Does it rely on any DOM features? Only to get text out of a text input, but I could hardcode those as string constants. I'll try what you suggest, thanks; I didn't realise it could potentially be that simple.
Use npm, along with browserify or webpack. Use npm shrinkwrap to freeze version numbers and only upgrade when you want to, not automatically to versions you haven't tested.
Javascript has always been a class-free, prototypal language. Classes in ES6 are just syntatic sugar around prototypes. Every javascript object has a prototype. The prototype is also an object. All javascript objects inherit their properties and methods from their prototype. The prototype is "live", meaning you can add to it after an object is instantiated and it'll see what you added after-the-fact (because of how the prototype lookup works).
Okay, I'm getting errors at **window.blah** ...obviously it's using the DOM in parts I hadn't thought of. How can I convert global objects such as window.blah to a var that node will recognise as global?
Because (for example) your browser can cache jQuery3.x from a CDN from the first time it's referenced and use that for any other site that also calls for it to reduce http requests.
&gt; you should write native C code. Yeah, I figured... Well it's been almost 20 years since I did that in uni... you could say I'm a little rusty.
Many people will tell you to use NPM. Unfortunately, NPM isn't stable. It fails to bring down dependencies all the time. I am a collaborator on https://github.com/Glavin001/atom-beautify/ and the most common repeated issue is related to failure to acquire dependencies on install. Also, there are some catastrophic known defects where NPM will occasionally break a package, which then breaks everything depended upon. This could simply be solved by providing some manner of integrity checking, such as a hash comparison, but NPM doesn't have any integrity checking... NPM is convenient for hobby projects or internal corporate tools where failure is more tolerable, but I wouldn't suggest using it production projects under any kind of SLA.
If you want to go from a 130 year execution to anything reasonable, your options are C or C, unless you can write assembly.
The solution would be a literal syntax for maps, but that's a troublesome topic for many reasons. You can also chain `.set()` calls to initialize maps; I personally find that more readable, since it removes the square brackets. Also, something that should be mentioned when discussing vanilla maps is that [Immutable.js](https://facebook.github.io/immutable-js/) has a much improved API for maps and sets. For example, you can initialize maps from object literals, and it adds iteration methods.
X-Post referenced from /r/aureliajs by /u/Davismj [Drag-and-drop in Aurelia](https://www.reddit.com/r/aureliajs/comments/4uj80b/draganddrop_in_aurelia/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
You have a lot of issues. Here are a couple big ones... You have two closes for your head and body tags. You also overwrite your onkeydown handler with an empty function. document.onkeydown = movex; document.onkeydown = movey; movex does something. movey does nothing. It appears like you copied and pasted two sets of code that you didn't understand and tried to marry them. 
And choosing an outdated technology for a NEW project today when much better and simpler ones exist (including Angular 2), when OP hates Angular 1.*, is not idiotic? He will be miserable for the rest of his life, because of his choice (he said he hates it). Do you know that this is the biggest factor in developers productivity? How developer feels when he works. Whether he is happy and willing to work or miserable and hates every minute of it? 
Thanks for the tips. This does seem like an elegant approach. 
I'm sure your statements are founded in some real-life experience you've had, and that is unfortunate, but to seriously recommend people don't use it except for 'hobby projects' is pretty ludicrous. There is some definite good advice hidden in your comment, however, and that is to thoroughly test any project after upgrading dependencies. Also, for any product in production, be wary of upgrading any dependencies except when you are pulling in specific security-related updates.
npm-shrinkwrap is a great tool to help keep dependencies stable.
in *filterResults* i would change the test from: return (result.value.toLowerCase().indexOf(input) != -1); to return (result.value.toLowerCase().indexOf(input) != -1) || (result.label.toLowerCase().indexOf(input) != -1); that is what I expect, auto complete with label... 
Treat the d object as an associative array i.e. d["rate"]. So, let's say your perCapita looks like the following: &lt;select id="perCapita"&gt; &lt;option value="option_a"&gt;A&lt;/option&gt; &lt;option value="option_v"&gt;B&lt;/option&gt; &lt;option value="option_c"&gt;C&lt;/option&gt; &lt;/select&gt; Your JavaScript could be: var perCapitaSelectedIndex = document.querySelector("#perCapita").selectedIndex; var perCapitaSelectedValue = document.querySelector("#perCapita").options[perCapitaSelectedIndex ].value; rateById.set(d.id, + d[perCapitaSelectedValue]); Hopefully this helps?
Getting Unexpected token '[' Any idea why? EDIT: I'm just a newb. I wrote +d.['rate']. needed to be +d['rate']
&gt; I'm sure your statements are founded in some real-life experience you've had, and that is unfortunate, but to seriously recommend people don't use it except for 'hobby projects' is pretty ludicrous. Why? I was expecting a reason behind that statement. Lets put this in a real world context. Lets say you are a bank. When your applications are broken or your services fail you lose money. The money lost per failure per second is quantifiable. Lets say you are Bank of America and you conduct 10 milliion credit card transactions per second and each failure is a loss of 5% of the transaction amount, which hypothetically we will say is something like $500,000 assuming an average of $10 per transaction. In this case would you be willing to bet $500,000 per second on NPM? In the case that NPM fails only 1 second a day on average (after all there are 108,000 seconds in a day) that would still be $6,000,000 a month in losses. Over a year that would mean $72,000,000 in losses averaging just 1 second of downtime per day. In my experience with NPM only 1 second a day of disruption is extremely generous. If it were a minute of disruption per day, which still is realistic, you would be looking at average annual losses of $4.3 billion. I don't think you could squeeze that much money out of NPM. Lets say you aren't a bank. Lets say you are a small start up whose applications fail 2 times out of 100 because of NPM even though you have no dependencies. Now lets say you have a bunch of NPM dependencies and your application fails 15 times out of a 100. That word of mouth marketing you were hoping for just evaporated. That press coverage you are expecting suddenly comes up missing after the journalist does the smallest amount of research, or worse still the press coverage does happen but mentions how undependable your product is despite superior superior and QA. &gt; There is some definite good advice hidden in your comment, however, and that is to thoroughly test any project after upgrading dependencies. As was discovered with NPM issue #5082 testing your own code won't prevent NPM from breaking it in production. You have no control over the health of your users' dependencies that relate to your application and there is nothing you can do to fix your application if it breaks on publication except to immediately publish it again.
I'm having trouble with my the variable not responding to change in the drop down. Side question, how can I clear out my canvas when I select a dropdown item. They are stacking and making a mess. 
Scratch that, I figured it out. Had a loose variable statement that was keeping it defined. Thank you for the help!
I had this return 127 a few times, which is 7 of the 8 bits (and blocks) colored. Is there a usage to actually extract the data or is this incomplete somehow? Because every output should have only 4 of the 8 bits flipped. (for 4 block shapes)
Thats the problem with those kind of sites. Well you need an html page to include the script or use &lt;script&gt; tags. Learn about the DOM. Id try w3schools.com next and just build out a real world problem. Like a JS slider or tic tac toe board. Lots of different tutorials on how to do those. Google is your friend.
I'm having a strong sense of deja vu. I'm very sure I've seen both the linked post and the response before, maybe a month or two back. Was this posted elsewhere?
You can go to freecodecamp.com and continue your journey. There is more beginner's stuff, as well as intermediate and advanced. However, the best thing is that once you reach some level of proficiency you will pair up with other programmers and designers and build websites for not-for-profit organizations in order to gain real life experience. Also, I suggest you go to codewars.com to practice your algorithmic skills, as well as to get more stuff under your belt. Good luck!
Perhaps you're thinking of this: https://www.reddit.com/r/javascript/comments/4quec3/es5_objects_vs_es6_maps_the_differences_and/d4wa97w comment? I mentioned some of the same things as this comment does.
learn react.^(no actually don't) just start a project! something small. here's a little primer on how to use javascript with some other stuff :) # setup let's start a new project folder somewhere on your machine. we'll call it `myProject`. in that folder, you'll need at a minimum an html document and a javascript file -- so let's do that first. myProject |-- index.html |-- css |-- main.css |-- js | -- main.js you'll see i put `main.js` in a folder called `js` -- that's pretty common, and just helps with organization within your project folder. i also added a `css` folder and a file called `main.css`. this is used for styling the page; it's the reason web pages aren't just black text on a white background. i'm mostly including this just to have it, because all projects need some level of styling. this will probably be the last i mention it, mostly because it's easy to get running with. if you look up any css tutorials, putting stuff from there into `css/main.css` will get it on the page. let's edit our html file first: &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset='utf-8'&gt; &lt;title&gt;My Awesome Project&lt;/title&gt; &lt;link rel='stylesheet' href='css/main.css'&gt; &lt;/head&gt; &lt;body&gt; &lt;script src='js/main.js'&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; couple new things here -- i assume you're familiar with the basics of an html webpage, but in case you're not there's some great info online about it. two things to note here specifically -- the `&lt;link&gt;` in the head and the `&lt;script&gt;` at the end of the body. the `&lt;link&gt;` is a way to get your css into your html. similarly, the `&lt;script&gt;` tag is a way to get your javascript into your html. we'll focus on the javascript first. the `&lt;script&gt;` tag has an attribute called `src`, which is shorthand for "source." it just tells the `&lt;script&gt;` tag where to find the javascript you want to include. in this case, it's in `js/main.js`. you can open your `index.html` page in any browser and see it. it'll be empty until you put some display elements into it (e.g. a `&lt;p&gt;` tag or an `&lt;input&gt;`). now you can write some javascript! # execution that file won't do much now -- it's all empty! let's start with a simple js function. edit your `js/main.js` to include the following code: function sayHello(name) { console.log(`hello, ${name}`) } when you refresh your page, nothing happens. that's because that function isn't ever being called -- the instructions are there, but the browser isn't ever doing any work. let's fix that. add some more to your javascript file: document.addEventListener('DOMContentLoaded', function() { sayHello('world') }) this adds an event listener to your document. an event listener does just what it says on the tin -- it listens for events. in this case, it's listening for an event called "DOMContentLoaded" -- this is the event that's fired when all content from your html is loaded into the browser. when that happens, it'll call the `sayHello()` function with a parameter of "world" -- check your console to see it print out "Hello, world!" that's the basics -- that'll get you running with html and javascript. check online for APIs and other platform features to do some interesting stuff.
You gotta start out contribute to another awesome project. For example https://github.com/theonion/fartscroll.js
...and I just replied to it! Love to hear how you expect the events to be named.
Great info, thanks!
It feels like most real life use cases either can be solved with something much simpler (strictly server-side rendering with basic templates) or much more powerful (fat-client web app). Basically go with react (or similar) framework if you need to build web apps but want server-side rendering, or go with static site generator / content-oriented platform if you're building a more traditional site. This just feels like an odd way of handling something a more specific solution would be better at doing.
Seriously. Your library is breathtakingly good. The readme is even better. Great job man.
Awesome feedback! Thanks!
Fair enough, so what do you use now?
Will check it out! 
That sounds awesome, I will check it out!
Something like this? https://regex101.com/r/rH0zB0/1
Yup, thanks!
How does the clap detection work? Does the user need to allow access to microphone?
Why TypeScript..omg its everywhere now! :( 
It's almost like TypeScript is a good thing!
Why don't you like TypeScript?
I don't think people who complained about Angularisms will be too happy with this. Is there a mnemonic trick to remember when to use each symbol? I associate [ ] with arrays, not with inputs (or was it outputs?)
didnt watch the whole thing (just skipped through quickly without sound) is there anywhere that actually shows how it performs compared to the current crop of frameworks on dbmonster, uibench, etc? 60fps is a meaningless statement without qualification. there is no framework or raw DOM code that can execute dbmonster at 60fps at 100% mutation rate.
The emberconf keynote has some details on FPS: https://youtu.be/OInJBwS8VDQ?t=44m50s There are more in-depth details in this talk: https://www.youtube.com/watch?v=dpx9P1cz37k
I'm unsure where the 60FPS claim was made outside the reddit title. I have seen two early preview benchmarks. One at EmberConf https://youtu.be/OInJBwS8VDQ?t=44m50s and another at a local Portland Ember meetup, hosted at Tilde. I do not know if the Tilde meetup was recorded, but they did show a demonstration an SVG graphic with many updating elements at 60fps. Regardless, Glimmer 2 looks to be significantly faster than the current generation of Glimmer and React.
codewars.com is good for practice.
Can you link me to some examples of where I'm grumbling? I'm trying to improve at screencasts and I appreciate the feedback
What browsers is this compatible with?
I actually recommend bower for managing third party front end deps. Having used bower and npm for various projects. Npm can be a bit tricky to get everything set up and working. Some people here recommend shrink wrap but it's caused problems for my team. (Fsevents and non is x platforms) I think the best work flow for front end deps is to use bower to download and manage libraries like jquery. But to then commit those downloaded files to version control, that way you don't have to worry about downloading any files when building or deploying your app to a server.
This reminds me of the models API from Backbone. One thing that seems to jump out at me is that the wiring up and memory management around watching models is left to the user. You could easily create a situation where you have models hanging around forever because of a chain of watchers that never goes away.
The selector? Perhaps not, but the question was regarding calling `.css('property','value')` versus `.css({property1: 'value1', property2: 'value2'})`.
Because the `arguments` keyword inside the `filter` iterator refers to the arguments for that scope (the iterator fn). In this case it's the same value as `[a]`. Also, this code is weird. If you're going to be using `Array#filter`, just make use of the other such functions like `Array#forEach`. Another tip: the arguments object isn't a true array. This is how you convert it: // convert arguments into array object var args = Array.prototype.slice.call(arguments); If you still wanna do it the weird way, just add the above to the top of the function def and reference `args` instead. 
Sorry about that, I clarified how broken that solution was [here](https://www.reddit.com/r/javascript/comments/4ucmze/192kb_tetris_in_html5_javascript_any_suggestions/d5qui01).
Typescript is amazing. 
Hey guys! I recently worked on a developer tool to help visualize a React application's component hierarchy (something that might get kind of fuzzy the larger your app gets). It syncs up to a copy of your application to display real time feedback of state changes. Give it a look, and you run into any error please let us know!
To be more specific, [Call by sharing](https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing).
Found the brogrammer.
It might be easier to reason about if you changed your code to have a reducer for each level of your state model. (although the higher levels could end up with a lot of repetitive code) export const toolboxReducer = (state = {}, action) =&gt; { switch (action.type) { case 'TOGGLE_TOOLBOX': return { ...state, isActive: !state.isActive }; } return state; }; export const canvasReducer = (state = {}, action) =&gt; { switch (action.type) { case 'TOGGLE_TOOLBOX': return { ...state, toolbox: toolboxReducer(state.toolbox, action) }; } return state; }; export const uiReducer = (state = {}, action) =&gt; { switch (action.type) { case 'TOGGLE_TOOLBOX': return { ...state, canvas: canvasReducer(state.canvas, action) }; } return state; };
Tools to help us understand frameworks. Cool! Javascript never ceases to amaze me. /sarcasm
I generally agree and I'm a big regex lover myself. But still, many developers have a hard time with them, even experienced ones. It's a whole different language. An adage says that if you solve a problem with a regular expression, now you have *two* problems... I found myself rewriting *my own* regexes from scratch instead of trying to understand what was wrong. So, the goal of the package isn't much about offering an easy interface for creating regular expressions, but rather code maintainability through composability and expressiveness.
I'm actually not sure I agree. W3 has cleaned up their site a lot in the last few years and I actually really like their documentation of the DOM. I definitely prefer MDN For almost everything else, but I think the DOM stuff is really good
In this case It will probably optimize something, yes
There are multiple ways to get react working on node, i'd recommend going the babel / es6 route. This article goes over setting up all the groundwork: https://www.twilio.com/blog/2015/08/setting-up-react-for-es6-with-webpack-and-babel-2.html
I often wish the Web had a GUI API instead of the fuck-it-everything-can-be-everything approach. Semantic HTML5 was basically a failure. I make sure my work is semantic, but most people returned to div soup (or never left it).
Also React isn't a framework 
Hi, /u/enriquemontalvo 1) The music is just one of the freely available tracks from Youtube. I didn't want to provoke any lawyers and/or media companies etc. ;) 2) Yes, I know, but the video was also made for people who are (probably) not as fancy as we are. Clicking the middle mouse-button has no visible effect (no context-menu). 3) I think I understand the joke ;) Regards,
Doesn't work on React Native sadly
I will let other people speak to the design of your store, but I will say using immutable.js makes deep updating state like this a lot easier. https://facebook.github.io/immutable-js/docs/#/List/setIn 
You don't say what your goal is. If it's just some scripting and playing around - go ahead. If you have a deeper interest you could (should) go to [edx.org](https://www.edx.org/), [coursera.com](https://www.coursera.org/), [udacity.com](https://www.udacity.com/) and take some courses that go deeper (especially CS courses instead of "programming" courses). It's all free if you ignore the "certificate" stuff (which is mostly useless and unnecessary). About "OOP": Note that while this is a commonly taught style it is far from being the only one or even the most powerful. You can write complex and well-structured programs with a *functional* style without ever using `prototype`, `bind`, `call/apply`, "`class`" (ES2015 keyword or the concept as such). The general trend in languages is away from OOP (not in "abandoning it", just that less exclusive emphasis is put on that one concept) towards using more elements from functional programming. I just mention it so that you are aware that there's a whole different world out there, not to make you abandon whatever you just did and go to some different place - no need, OOP remains part - *one* part - of the toolbox.
As justpurple pointed out you can use it for more than just classnames. But joining class names is the common case and is the reason for the example. They do similar things but the differences I can see is: In Joinable: * has if else joinStrings('a', [true,'b','c']) * change the separator * The conditional check reads in a more natural fashion compared to classNames { 'ab-c': true }, joinable [ true, 'ab-c' ].
You dont know js. http://github.com/getify/You-Dont-Know-JS 
Cylce
Here's your function with proper non-insane formatting: function getCookie(e) { var t = document.cookie.match(new RegExp("(?:^|;)"+e.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, "\\$1") + "=([^;]*)")); return t ? decodeURIComponent(t[1]) : void 0 } `e` in this context is a function parameter. The name is meaningless; you could use any identifier. This was minified and `e` happened to be the name that the minifier chose. This function is constructing a regex dynamically by escaping any metacharacters, and then testing to see if it matches `document.cookie`, and if it does, it returns the part to the right hand side of the equals sign. This is necessary because `document.cookie` contains all the cookies combined into one string, and so this is trying to extract a single value. 
Why do you want to refresh the page in the first place?
That last link to "Google" is incorrect. It should probably lead here: https://firebase.google.com/docs/test-lab/
This seems pretty cool. I made a pull request adding it as a bower component. Nice work!
 var e = []; ... and now?
You can nest reducers and use the object spread operator (es2016) to make managing things more easy. And then within the mapState and mapProps functions you can use values and checks to define state for components based on the application state. 
Hi /u/moneymakersucks, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Okay, Ive reviewed that and still dont get why it was deleted?
Looks promising!
Do you have your app JS and vendor JS on separate build tasks/files?
I agree. Sometimes comments are unavoidable, but most of the time code can be refactored to eliminate the need for comments (at least in high-level languages). Comments are kind of flag "refactoring needed here". Comments are difficult to maintain as the code changes too.
Oh, sorry I misread that part of the guidelines lol
Yes, we have a task for building the vendor files and one for building the application files. We do the usual things, minifying (js, css, images) mangling, source maps, etc. I just want to do things better, faster :)
&gt; heavily dependant on the implementation The point though is that those other libs are already much faster out of the box, before you start applying shouldComponentUpdate-equivalent optimizations and whatnot. And it's not just some tiny theoretical difference. In dbmon, React does in the order of a ~60ms per render, vs ~3ms for inferno, for example. That means React drops several frames redrawing the same UI where inferno finishes with time to spare (or conversely, that means a inferno UI can be 20 times more complex than a React one before frame-dropping starts). And this is talking about out-of-the-box inferno (vs a highly optimized React impl). Inferno too, has shouldComponentUpdate, so you can apply the same optimizations as you would in React to get a perf boost, and if you're really serious about perf, turning on lazy optimization would make it *extremely* difficult to beat it even with vanilla js, because it's a really complex and aggressive optimization. u/localvoid wrote a dbmon for React that actually manages to be twice as fast as a naive implementation, but it's so non-idiomatic that no one would ever write code that way. I, for one, am not interested in maintaining React code that uses naked for loops and memoized components for perf reasons
In my experience, Webpack has been slower than Brunch (disclaimer: I used to contribute to it), which is especially noticeable in development. With Brunch, by the time I cmd+tab'd to the browser, the changes were already there; whereas with webpack, I'd see the old stuff for additional 2 seconds or so. (Both in about the same setups: babel, jsx)
I think the obvious question should be: where's the dbmon for glimmer 2? Dbmon was created by the Ember team and is now by far the most popular UI benchmarking tool, so one would think they would logically keep using it to see where Glimmer 2 actually stands rather than creating some other benchmark It kinda irks me that progress on Glimmer always seems to show up in a packaged presentation format. At least for me, the perf data should be available so it can speak for itself.
oh wow. this post is really good, thanks! thats a genius move to put it all in one 64bit pattern and then rotate it by flipping the bits.
"using more developers than needed"? It is just removing the current bias so that the developer will understand the code 2 years from now as if was a new developer touching the code for the first time. It is not an easy skill to learn, it is as difficult as learning the syntax, but everyone stops at the syntax and become mediocre anyway so this mindset is understandable. It also applies to comments that just tell what the code is doing: If the developer is biased he or she will create useless comments. If an individual is incompetent in creating self-documenting code, then it is more likely to be as incompetent in creating comments. &gt; Just wondering how you got so twisted to think comments could possibly be a bad thing The article doesn't say that using comments is a bad thing. It says that using comments is a smell, good or bad, it all depends. A smell is just something that need to be taken care of and not just "let me put this comment here because I received feedback that my code is impossible to understand on review". Instead of putting more useless comments it might be worth fixing the code in the first place.
wow, smells aren't bad things now... does it imply it smells like flowers? seriously, you should hear yourself.
&gt;well, what does this construct I've built give you over something like Is your snippet closure? I was under the impression I needed to have an internal function for it to be a closure. My thinking was having a closure would give me variables scoped to that function so I could pretty much drop my snippet into any page without causing conflicts? 
First, closures are not a "pattern", they are just anonymous (most likely inline) functions that have access to variables outside their scope. In your own example: for(key in validators) { $form.find(key).each(function(){ var validator = validators[key].validator; }); } The function that is passed to `each` uses `validators` and `keys` — which it gets from the scope and not its arguments. So, closures just are. That's the semantics of functions in JS. I think you might also be conflating several functional concepts: closures and higher-order functions. Higher-order functions refer to functions which can take functions as their arguments and/or return functions. In the snippet above, `each` is a higher-order function, because it takes another function and executes it for every element. Other examples include `Array.prototype.map`, `Array.prototype.filter` and many more. --- Back to your full snippet, returning a function from `validateInput` to only call it immediately (`validateInput($('#form'))()`) hints you don't need a higher-order function there. Just validate immediately and be done with it :)
pure JS? I did this project but with WebGL. Your GUI is much better than mine, but [mine is faster](http://greenfox1505.github.io/webglMandelbrot/) =P 
seriously I don't think you can hear yourself. the link has a picture of goddamn air freshener being liberally sprayed. And you are trying to tell me that smell in this context might possibly be interpreted as a good thing. You should just stop. 
Totally agree and I wrote them! Please fork and contribute. Promise I'll be more detailed in my commits with contributors :)
Comments are the fragrance of a diligent programmer This article is a smell of a lazy developer making excuses for not commenting
That's interesting. For me personally it is easier to keep the app state at a Store level. The UI is kinda representation of that state.
Not exactly. First, I am using seamless-immutable ( https://github.com/rtfeldman/seamless-immutable ) so I can use standard functions and libraries on the data, such as lodash. It also strips the immutability for production builds, making it even faster. Secondly, only the top level component retrieves data from the store. Everything else recieves its data passed in as props all the way down. This works because all data is in a single object, so it is naturally heirachical. This way, we can use built in features for shouldComponentUpdate such as PureRenderMixin, without writing them ourselves. Thirdly, mid-level components (those with business logic, but not the top component), call updates to the store directly (a side channel, if you will) rather than passing an update function all the way down. This means that the mid level components just 'know' the path within the store that they should update. For more complex scenarios, I pass the path in. Low level components get passed an onUpdate function, so the parent (a mid level business logic component) can safely update the proper store without having to make a new checkbox component for each store.
But no browser natively supports ``import``... so why not just use the CommonJS way since you'll need a transpiler anyway and at least it's natively supported in Node? Also the CommonJS examples needs a tweak, it's ``module.exports``, not ``modules.exports``.
acemarke made a good post on some of the drawbacks (or at least things that aren't really benefits) of using immutable: https://www.reddit.com/r/javascript/comments/4rcqpx/dan_abramov_redux_is_not_an_architecture_or/d51g4k4 So personally, for me, it's a case of not really ever needing that performance gain (if I do, the bottleneck is most certainly somewhere else, or there's one big troublesome component and I can handle that manually). I also find that there are enough decent options in the native API that I can prevent myself from mutating state well enough. If the projects grew substantially bigger, with more than a couple of people working on them, yeah, I'd probably consider it. For now, it'd just introduce a pointless new API that I'd have to deal with. 
As I understand it's only deprecacation of built-in filters - you just plug-in any filter repo you want or make them yourself. I can understand shift towards using pure JS solutions, like computed properties - they are just more powerfull and with known JS API.
Definitely separate your data from your application logic, IMO.
From a performance point of view, neither. You should use a database. 
Do you by chance have open sourced that deocrator you are talking about?
Could I ask you what you would consider a good answer regarding the implementation of that function? I'm also curious if you would "solve" the problem in a kind of isolated context, or if you would look for certain design patterns or something to fit the function into a larger structure. 
Feels pretty choppy on the latest mobile Safari. 
This is so ugly compared to other frameworks. 
That assumes the syntax will be the same as what everyone is using for Rollup / Babel / etc. IIRC, in Edge, it's not.
It's currently the ES2015 standard, which is supposed to be a standard that all browsers natively adopt. If Edge doesn't, that's it's own problem. Require is not part of any standard at all. 
The pure Glimmer dbmon is here: https://github.com/tildeio/glimmer/tree/master/packages/glimmer-demos/lib
Also, how do you measure performance? Do you have some stats to back this statement?
Note: with that decorator you can use `@toJS` or `@toJS(map of prop names)`. Thats why it looks sorta complicated because it supports both invocations.
JSON is loadable in essentially all other languages. JS is (typically) not. You can also send JSON directly over http. Might not be relevant for what you're doing, but it's something to keep in mind.
Excellent point. Even if not relevant at the moment, having the data in JSON does make it more portable in case you want to port to another language/platform.
If it is a choice between doing x and not doing x, not doing x will always be faster, except in extreme low level conditions. Look up talks on Om and using immutablejs with react. They cover the performance implications in immense detail. As for me, I use the react performance tools. With my style, they almost exclusively report zero wasted dom updates. Exactly nothing is rendered to dom that does not need to be, as opposed to the default of everything being rerendered to dom on every update, which is the default for a flux architecture and ad hoc prop/state architectures that have a top level object. Dom mutation tends to be the heaviest aspect of typical web applications.
I am told it is very similar. I have not used it, so I can't say how similar.
This looks really cool, and I'm trying to get it working but i keep running into the "Invalid bundle file path specified". My app directory is pictured here (http://imgur.com/a/gmvHI). monocle -b public/js/bundle.js -c index.html -j js -d app Any idea why?
What client side technology are you using? React, angular? Socket.io easily integrates with both
I am using react but I'd like to stay on websockets and not use socket.io or similar libraries.
gulp, webpack, etc... are all just using javascript. If you write your own function and run it in your gulp file it would be sufficient and portable anywhere you go. If you want something pre-built you can use https://github.com/deepsweet/mustache-loader for webpack or https://github.com/rogeriopvl/gulp-mustache for gulp. I'm assuming you have knowledge of html, js and mustache enough to set up the rest. 
Ten years ago, Flash was probably the fastest way to render fractals on a web page. Here's [my stab at it]( http://metal.hurlant.com/fractal2/) (click to zoom in, ctrl-click to zoom out. space for colors, "1","2","3" to change the fractal type.) It's not GPU accelerated, and there's no GUI to speak of. It's a bit better at sticking to the set boundaries, but that's a trade-off for giving up on speed, and hoping a fast low-res version is sufficient to navigate around. There's a pretty good chance a direct port of that stuff to javascript running on modern browsers would be a little faster. GPU acceleration is trickier, mostly because fragment shaders typically don't have access to a lot of bits in their floats, even with highp precision, so you gain mad speed in general, but lose the ability to zoom in as deep. 
+1
If you need comments and other features JSON doesn't provide, use XML. You're overthinking it.
Disgusting.
I'd use JSON. Comments can be put in JSON (e.g. `desc` field in your example pokemon dataset) and putting functions in your data definitely is a code smell
it is indeed left to the user, regarding the watcher part. one of my main goals was to use it for state management in React, which allowed me to release `tydel-react`: https://github.com/fahad19/tydel-react and the built-in events system in tydel greatly helped. wathchers are set when Component mounts, and cleaned up right before they get unmounted. memory management done for you automatically there.
there are some arbitrary floating point libs for GLSL. Couldn't make it work before I got distracted though.
It's axually quite easy to debug with use of Immutable.js Object Formatter for Chrome.
This is a fabulous book series, I highly recommend!
Really nice work.
Passing an array of promises in to run async.
Example of promise.all
Bad name. Noop already means "No operation." https://en.wikipedia.org/wiki/NOP
There are arbitrary floating point libs for GLSL, but I could never get them to run before I was distracted from the project.
&gt;I am told there are some advanced techniques (I think they are called 'cursors') that can enforce this, but so far, it hasn't been an issue. Cursors aren't super complicated, it just points to a subset of an immutable tree and you can ensure if they update that subset that it'll update the entire tree.
Best practices is pretty much whatever your own shop is using. From what I've seen it's similar to what I've pasted below. If you have a framework that already does the WebSocket stuff for you, I'd suggest using it because then you get everything all tied up nicely. Otherwise, it's fairly trivial and you're probably just overthinking things a bit. function connectToWebsocketServer() { websocket = new WebSocket("ws://localhost:80"); websocket.onopen = function(evt) { websocketConnected(); // start the chain of events } websocket.onclose = function(evt) { websocketDisconnected(); delete websocket; // remove ourselves websocket = null; }; websocket.onerror = function(evt) { console.warn("Websocket error:", evt.data); websocketError(evt.data); }; websocket.onmessage = function(evt) { websocketParseIncomingData(evt.data); } } ////////////////////////////////////////////////////////////////////////// // Handlers from the websocket on events. // We have successfully connected to the server, so we need to start running. function websocketConnected() { sendInit(); } function websocketDisconnected() { } function websocketError(errData) { } function websocketParseIncomingData(jsonText) { var obj = JSON.parse(jsonText); if (obj.Command == "STATUS") { processStatus(obj); return; } if (obj.Command == "PROGRESS") { processProgress(obj); return; } // etc. // log everything else console.log(jsonText); } function websocketSendJsonData(jsonObject) { sendDataToWebsocketServer(JSON.stringify(jsonObject)); } // These functions send various commands to the websocket server. The ID string can be anything, and is used primarily for you to keep track of commands and responses. function sendInit() { websocketSendJsonData({ Command: "INIT", ID: generateUUID(), "ResponseRate": 20 }); } function sendStop() { websocketSendJsonData({ Command: "STOP", ID: generateUUID() }); } function sendBogus() { websocketSendJsonData({ Command: "BOGUS", ID: "bogobogogo", FOO: "bar" }); // this will give you a FAILED ack with the command in the YOUSENT block } function sendGetConfig() { websocketSendJsonData({ Command: "GETCONFIG", ID: generateUUID() }); // will send a CONFIG result block } 
Small comments focused on what the code is trying to do are very useful. Large comments on how the code works are a waste of my time, I should be able to just read the code.
A feedback with arguments would be more useful.
No discouragement intended, but this seems overly simple OP. Perhaps you could add some other security features to it?
Any thoughts on the new Fiber work scheduler that the React team is working on?
Unfortunately, rel=noopener is only available in chrome/opera at the moment, as outlined here: https://mathiasbynens.github.io/rel-noopener/ There's a partial solution described in that article that doesn't work for safari, which is why I created https://github.com/danielstjules/blankshield (it's also mentioned in that article)
The whole https://github.com/erikras/react-redux-universal-hot-example . You are welcome.
There are two limitations of Mandelbrot implementations. One is related to the accuracy of numbers stored on computers. The other is related to number of iterations before the algorithm gives up and colors black. Booth of those limitations are evident in both of these links, it's just a matter of how far you can go before noticing one or the other (or both). I'm guessing based on your question, but I think you might not realize the image is not stored in some space somewhere. The image is generated on the fly. The location of the window and the zoom level are used to calculate color based on the equation z(x) = z(x-1) + c.
Not a lot of LISP peeps up in here
:/
Attempting to answer this is just asking for down votes... but, here's some thoughts; not necessarily specific to either of the two provided alternatives: - as mentioned, Ember is a full stack. It all works together the first time. No picking random add-on #5 to add a relatively basic feature. - once you learn it, Ember actually flows very well. It all clicks and it all works - EmberCLI is awesome. The tool chain just works. Modules, ES6, packaging all work the first time wth no setup. Just ask the Angular 2 team that has now forked it. - perhaps you don't hate HTML. There are still people that'd prefer to write HTML as HTML. Perhaps there are people on your team that are HTML gods but couldn't care less about learning Hyperscript or some other HTML standin. - strangely Ember likes jQuery, perhaps there's a jQuery plugin or a dozen that would reduce your development time by 40%. Or that is the pet favorite of your local HTML guru, see above. You might not hate jQuery with a passion -- it could happen. - Angular is in flux (no pun intended). Ember went through this too, but that was a year or more ago. The API has been very stable recently. (... pods anyone?) - it is productive. Other frameworks are too. None can get you to Mars so pick the one you feel comfortable with. That might be Ember or it might be Mithril. Don't pick something or discard something because of a random Reddit thread or a troll making a derisive comment.
That's awesome
Background: I discovered React after reading this blog post by David Nolan - [The Future of JavaScript MVC Frameworks](http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs). I know it sounds pretty bold to make a claim like that - but D Nolan doesn't usually write anything like that. And this was written before React had even gained momentum. I know because this sub was at the peak of it's `angular circle jerk phase`. Anyways, I had been learning clojurescript, which D Nolan is the maintainer / co-creator - and clojure has immutable values built in, so in many respects the javascript version is much less intense than clojurescript in how it enforces immutability and pure functions. However, I waited maybe 6 months for somebody to implement Rich Hickey's hash trie shared data structure using plain javascript, built from the ground up. So I was excited when FB released Immutable, with Rich Hickey quotes in the Readme --- using the proper underlying structure for how he implemented it in clojure. Rich Hickey.. probably influenced my design patterns more than anyone else. And in 2009, he gives a talk called `are we there yet` (google it) - where he says "*immutable values and pure functions are the brick and mortar we should be using to build all applications*". I didn't know the technical details, but I understood the philosophy he used very well, which is `process ontology` - Alfred North Whitehead. And he showed that our mental construct of `objects` had become a perverse sort of false view of how these *processes* actually exist. He's not saying that all OOP is shit - but that it went a dark route in the 90's where people just implemented anti-pattern on top of anti-pattern -- so he was an advocate of functional, declarative programming, with immutable values and pure functions. It's not a coincidence React is built on these principles. In many respects, I do believe that in some ways, React discovered these principles independently of Rich Hickey, although clearly there's influence. What I'm saying, is that this pattern was discovered independently by multiple people, and intuitively, I know it is *more correct* than the alternatives I'm offered. When I use immutable - there are things which occur in the program - that - when attempts are made to recreate that without immutable - I haven't been able to succeed once. So, I can't point to anything specific, but there's something about immutability that allows you to *reason about* (I know, but I obsessivly read a book called `the function of reason` by Whitehead before knowing about Rich Hickey) - but it's legit true. It makes sense, intuitively, in a way that's not present using the default data structures. 
To be honest, it feels like overengineering. It sounds extremely complex, both implementation-wise and API-wise, and largely seems to hinge on some assumptions that I personally find questionable: 1) the assumption that rendering workloads fall into neat balanced buckets - in my experience this is not really the case: rendering workloads are very often difficult/impossible to categorize (e.g. shit ton of stuff *onscreen* because management can't prioritize), and people have deadlines and better things to worry about than painstakingly categorizing and tuning their rendering workloads 2) the assumption that delaying things will somehow save you. This assumption has burned me *very* hard a few times in previous lives. later != less Imho, if you have two alternatives and one asks you to grok a fiber architecture and the other is just fast out of the box, the latter is going to win, no matter how smart the former is on paper.
This is a Pitfall! playing agent I made. The emulator Javatari.js was modified and used as a platform to build this. More details are available at the link. The algorithm is very simple. Each screen is treated as a separate level. Commands are randomly chosen, and anything that helps the agent move forward is saved. If the score goes down or the player's height goes below the surface, the game resets and a bit of history is trimmed. Here is a youtube video of a trained path for 20 minutes: https://www.youtube.com/watch?v=I4j8xWq1Jsc And, here is one demonstrating what training looks like (sped up): https://www.youtube.com/watch?v=DINn-8N9QUw This will not play an optimal game, which requires using the underground and not accidentally jumping over treasure.
but, disguising comments as data sounds like an anti-pattern to me.
I will forever remember the the tarzan sound when swinging on the vines
JSON is string. This simple fact enables for transpiling, and even primitive RegExp based replace enables for using comments in JSON: https://jsfiddle.net/5qm9958z/2/ So. Actually comments are not important problem at all. It's super simple to add comment capability for JSON.
I don't know if it works well, but if it does, this is why: "Images with transparency using JPEG compression." A PNG file can be 300KB in size when as a JPG it can be 50KB.
Good solution, it is practically useless though. The main reason to use json, according to top comment of this thread, is &gt;JSON is loadable in essentially all other languages. JS is (typically) not. but a spec compliant parser will never remove comments by itself, hence you will be required to add the comment-remove steps in the code itself, **So you have essentially nullified the main benefit of json** Moreover, why jump through hoops(add build steps/hacks) to allow json, when one can use js format?
How is the link you provided unsuitable? MDN is arguably the best resource for developers there is.
Me too! But only _now_ I've realized it's a Tarzan sound.
Holly shit this was intense. Thanks for your references I will sure to check them out. I really love a response with a historical touch. Really nice explanation. In my opinion, because most young developers were exposed to a certain learning path (from collage, high school etc.) they only get to scratch the surface of programming paradigms, good practices and so forth. They learn them as theories and follow what practices the project dictates. Till at some point where you start asking questions and start digging around to see what the books aren't telling you.
Would be nice as a high order component, unfortunately it's no use in this format for my team :(
If you learn better by examples here is one I found from a Google search, maybe you can look how they do it to get started? https://github.com/gauntface/simple-push-demo/tree/master/src Other than that Google also have some docs on the matter : https://developers.google.com/web/updates/2015/03/push-notifications-on-the-open-web?hl=en
What is great about fiber implementation in React is that it would allow other people to experiment with it and maybe they will find interesting solutions for some use cases. Actually, if we compare React with other react-like libraries, it is way much easier to experiment with different stuff in React (when you understand internals).
If your code is taking 130 years to run, the problem is with the algorithm and not the compiler.
Your graphic looks clearner
&gt; But JS has a few added benefits of being able to put in comments As the comments are for the benefit of the coder, you could use JSON with comments and as part of your build process strip them out much like many projects run mimimisers and packers as part of deployment. &gt; and functions. If you need this then a JS literal is the answer. JSON is intended for data and functions don't belong in pure data.
At the bottom of the page, under "See Also", it actually links to documentation rather than just the API reference: [Using the Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API). And important to know is that you should first be using [Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API).
You're using the isVideo function as if it returned true or false on the spot, but it doesn't. What isVideo does is to put the calls to the callback function on the stack and return undefined. You can't use it as if it was synchronous. Since you know that isVideo is going to call the callback at the appropriate time, what you do is to put your logic in the callback. [Here is an example](https://jsfiddle.net/s47wf3th/). Callbacks are a way to tell an async function: "when you are done doing your async stuff, please execute this code with the result". Remember the async function doesn't return the result - instead, it gets the result and then executes the code you feed it using it.
Lol, not all smells are like that... When did I attack you?!? now? because you are completely full of shit.
I'd like to add two more (which really boil down to one)... * Ember understands the concept of long-term support, something that is SERIOUSLY lacking in JavaScript frameworks. * Ember's security policy is far better than other "mature" frameworks out there. For starters, it's on paper. As a manager/business runner, knowing I'm going to get security updates I need without having to jump through other hoops to get them is a pretty big plus.
or use vert.x and reuse whatever language/libraries you want on the server.
Ah nice, i didn't know there was something similar already out there. So you add event listeners to all links and modify the link behavior, does that affect performance in anyway? I'd imagine the more links you have the more event listeners. 
When it comes to browsers and native support for things, it isn't really. 
hi i was actually searching for how to schedule and trigger the notification on desired condition. thank you 
thank you
Sooo.. what is https://www.npmjs.com/package/jimp then?
It might actually be worth it for once - if you can get to the Youtube page, the description has [a link to a full transcript](https://blog.pusher.com/image-processing-in-node-js/), plus all the links. Unusually helpful! Here's what his talk is about: https://github.com/EyalAr/lwip
&gt; but a spec compliant parser will never remove comments by itself, so what...? ```parseJson = () =&gt; JSON.parse(json.replace(/(^|\n)\s*\/\/.*/g, '')); data = parseJson(fileContents) ``` Implementing this simple hack should be easy in any language with regexp support. &gt; Moreover, why jump through hoops(add build steps/hacks) &gt; to allow json, when one can use js format? I think neither JSON is good for all cases, nor JS. I wrote about this here in comment: https://www.reddit.com/r/javascript/comments/4upxnf/static_data_json_or_js/d5sjson 
I'd say JSON. It's a simple string that can be minified, converted, transferred, expanded, and used with and for anything you want. There are tools to convert JSON to whatever kind of thing you need (array, object, dictionary, map, you name it) and most higher-level programming langues can use JSON more or less natively or have built-in converting or parsing methods.
PNGs are a lossless format. JPEG is a lossy format. Sometimes when you need transparency on large images (especially retina resolution images) the file can get into the megabytes and that can significantly slow down the loading of your site. With JPEG, if the image is too large you typically lower the quality to compress the image more and save on filesize. With PNG, you can't do that. With this, you can essentially use JPEG compression on PNG images and shrink the filesize by more than 50% in a lot of cases.
This looks great, I hope it's not super slow. I would love to integrate this with create-react-project.
Ember Data is a separate modeling library which is not part of Ember Core. If you feel it doesn't fit your needs, you just don't use it. No one forces it. About Glimmer 2, you can follow it here - https://github.com/emberjs/ember.js/issues/13644. There's also been a recent deep-dive with Yehuda Katz https://www.reddit.com/r/javascript/comments/4ujexo/glimmer_2_deep_dive_with_wycats_embers_new_60fps/ "Big changes take a long time?". Yes they do. Because they're big and Ember strictly follows semver, offers LTS and everyone else learnt how not to "upgrade your framework" (looking at you Angular 2). Ember 1.13 launched with back-wards compatibility and all the 2.0 features. Ember's 2.0 didn't launch with any new features, it launched to remove accumulated cruft. Ember 1.13 running without any deprecation warnings would seamlessly run on Ember 2.0. That's how you upgrade your framework. And that's one of the major reasons lots of companies stick with Ember. Actually with "convention over configuration" and convenience Ember solves huge headaches down the road, not introduces them. Simple easy and fast developer onboarding with maximum productivity from the start. My eureka moment happened when I opened an open-source Ember project on GitHub and within minutes could understand how it all works, because it followed a convention that any other Ember developer is familiar with.
There are times when PNG works well and times where JPEG works well. JPEG compression was designed for compressing more organic sort of images. JPEG doesn't do as well with vector shapes (like logos) as PNG does in many cases. For example, take this PNG of a tree: http://pngimg.com/upload/tree_PNG3498.png The original is 1.9megs. After putting it through Alpha JPEG it comes down to 433k. If you lower the quality, it still looks good around 300k. When dealing with images, you try to find the best format that works for the task at hand. GIF, JPEG, PNG-8, PNG-24, but no option for using compression on PNGs. This tool I built to give myself that option, and I used it on a project that wouldn't have been possible without it due to filesize limitations on the project. When I get some extra time, I'll definitely be spending some time working on a list of pros and cons, and explaining in more detail how it works. For now I just wanted to get this super early release out there.
And what about comments like, // using value 1.9.9 because 2.0 introduces breaking change IibA: "1.9.9, // TODO: fix bug #1234 and set original value as mime //PokeType:"mime" PokeType: "special", Pokemon: "eevee", //it can not evolve without evolution stones // hence it is set to null here. Evolvesto:null
Yes it is. Look, you said "standard that all browsers will natively adopt", and then you said "any standard at all". So if by "standard" you meant "something the browser will implement natively", then your first use of the term was weirdly redundant. Honestly it sounds like you just said something kind of silly, and then tried to backpedal to save face. It's OK to admit you were wrong.
They're not the same thing at all. Redux is basically a pattern for organizing "write" logic. All the "write" logic goes into one function, and the only way to kick off that function is to give the store a descriptive plain JS "action" object. Redux calls the "write" function with the current state value and the action object, and no matter what those two are, it should return a new state value. That state value could be a single number, a tree of Javascript objects and arrays, or a tree of some specialized data structures. Also, the "write" function _should_ treat the data in an immutable way, ie, make copies of things that need to be changed and modify the copies before returning them, rather than directly modifying the value that was passed in. Immutable.js is a library that does provide those specialized data structures. It's conceptually like JS objects and arrays, but stores them in a very specific way that shares contents between similar objects. /u/dwighthouse 's explanation is actually just a bit confusing, because he's mostly describing _the benefits of treating data in an immutable manner_, rather than specifically using the Immutable.js library itself.
&gt; NamedNodeMaps are array-like. They are array-like but they are also in a literal sense objects, objects can be accessed in the same way. I'll concede that there is a getAttribute method that can be used and may solve some potential cross browser issues that I have yet to encounter, I don't see any problem with the current implementation aside from not fitting the convention you believe is correct. Like i said feel free to modify if you think that's the correct way to do it. Arguing won't get us anywhere. &gt; Well, you're completely wrong about that. You're entitled to your opinion however the amount of typing required to argue about it has far exceeded cloning the repo and the code changes you wish to see. EDIT** getAttributes doesn't exist in google chrome for example so it's not a cross browser solution, chrome uses getNamedItem, having to handle those use cases will increase the complexity of the logic. The link you posted even says that, so it appears the fastest and most likely cross browser way would be dot notation..not getAttribute
* https://www.youtube.com/watch?v=5hGHdETNteE * https://www.youtube.com/watch?v=I7IdS-PbEgI * http://tech.noredink.com/post/107617838018/switching-from-immutablejs-to-seamless-immutable
&gt; They are array-like but they are also in a literal sense objects Where did you get that idea? Did you read the docs over at MDN? https://jsfiddle.net/w4Lo6yz0/ &gt; cloning the repo and the code changes you wish to see. See, you assume that this is all it would take.
WELL WHERE THE FUCK WERE YOU WHEN IE6 HAD 90% MARKET SHARE?!?? Would have loved this back in the day.
&gt; Did you read the docs over at MDN? It's a form of object according to MDN "A NamedNodeMap object is live and will thus be auto-updated if changes are made to its contents internally or elsewhere" &gt; Where did you get that idea? Try running typeof yourelement.attributes, it's an object. Your provided fiddle functions fine regardless, remember the check is for an existing rel tag, it doesn't care about what value it returns. Eg. &gt; rel='blahblah' or 'blahblah' makes no difference to the library, it's only checking for a value being present regardless of what that value is. In the original link you posted it states the only potential problems are in internet explorer and that is mainly to do with the value returning uppercase instead of lowercase. &gt; x.attributes['align'] &gt; Get the align attribute object of node x. If the node has no align attribute, it returns undefined (except in IE, where it returns an attribute object that has no value.) &gt; IE7 and lower don't return the value of a style attribute. &gt; IE8 and above do, but where the test would expect color: green, IE8 returns COLOR: green, and IE9 and up color: green; (with semicolon). &gt; IE7 and lower do not accept UPPER CASE attribute names. &gt; IE 5.5 doesn't return custom attributes, and initially gives the attribute value instead of an attribute object. The link provided explicitly states that you should avoid checking by index, Eg. &gt; nodeMap[0] which i don't in any case. 
Also be sure to note the `()` at the end of the `myNameSpace = function(){ .. }`. This is calling the function immediately after its getting defined. Its a shorthand equivalent to: function wrapper(){ return { ... }; } myNameSpace = wrapper(); The value of `myNameSpace` is the object returned from the function containing the `init` and `change` function members, not the function itself. It effectively ceases to exist after `myNameSpace` is set, though its scope still remains as captured by closures defined within it and returned in the object (i.e. `init()` could potentially reference `current` in that call scope whenever its called).
Based on another comment, this should show that property access like that still works https://jsfiddle.net/w4Lo6yz0/6/
Let's say you have the following folder structure: - index.html - projects.json - Gulpfile.js The `index.html` contains the template for the projects list and also renders it at run time. Something like this (assuming the template is inline): &lt;div id='content'&gt;&lt;/div&gt; &lt;script id='template' type=''x-tmpl-mustache"&gt; &lt;ul&gt; {{#projects}} &lt;li&gt; {{name}}&lt;/li&gt; {{/projects}} &lt;/ul&gt; &lt;/script&gt; &lt;script&gt; var template = $('#template').html(); var rendered = Mustache.render(template, projectsJson); $('#content').html(rendered); &lt;/script&gt; Now, how do you convert this so that it is compiled by Gulp? Well, the `gulp-mustache` job just takes a template file and compiles it, so the solution is to transform your „index.html„ into a template itself. &lt;!-- html, head, body tags etc --&gt; &lt;div id='content'&gt; &lt;ul&gt; {{#projects}} &lt;li&gt; {{name}}&lt;/li&gt; {{/projects}} &lt;/ul&gt; &lt;/div&gt; &lt;!-- html, body close --&gt; Since now you will have two versions of the index.html - one before and one after the compile - it helps to change the folder structure to help make this more clear: - dist - index.html // compiled file - templates - index.html // source file - projects.json - Gulpfile.js So, last but not least, the `gulp` task to execute this would be: gulp.task('mustache', function() { gulp.src('templates/index.html') .pipe(mustache('projects.json')) .pipe(gulp.dest('./dist')); }); Hope this answers your question!
It used to be agonising, but it's got considerably better in the last few months.
Hey /u/kenman, I've read it all (including reddiquette) but I don't get why this violates any of that. I don't think this constitutes as spam or anything.
Who even wants to use ChakraCore?
There isn't any rule against namespaces having state. Namespaces in Clojure can access state. 
What would this be used for? I guess stuff like Pocket, Embed.ly, etc. but I'm not sure how reliable it would be? 
Sorry, but nothing exists here. Find something interesting to read. Check the site status.
So he doesn't want to install an external *binary*. Instead, He needs a Cpp compiler to compile C++ plus bin code... into a binary. I don't see the big difference.
I skimmed it. It's a great idea. Thanks for sharing.
Which is why I put IMO at the end of the statement. 
From what I've read, it performs better in certain resource-contrained, embedded environments and natively supports more ES features than V8.
Portability.
+1 yes that's another way. That just looks so contrived. That's really hard to feel natural.
I want greater diversity and competition in the Node space. Right now V8 is the only option.
Great answer.
Did you profile your code to see what was slowing it down? Was it due to too many reflows? It's a good idea to know why you were having performance issues before optimizing.
I think it's fantastic that they cleaned out all the Ballmer management filth that Microsoft was riddled with. This is evidence of a development team's ability to do what THEY want to do without any out-of-touch members of the board putting up limitations because "it's not in line with the company's direction". I'm not a Microsoft fan but as another commenter wrote, if they want to create competition in javascript land, I thank them for it.
I work on the team and am super excited about this. Kind of bogged down with the tc39 meeting but will be around for questions if anyone has them.
Wasnt working in the firstplace. So asked a friend to put a redirect.
We need something like this for Windows.
White background is bit disturbing. It should be black/dark.
I did look at the JS Profile from Chrome's timeline, and the 3x figure I mention in the post came from comparing how long React's render() took. How would I be able to look at the number of DOM reflows??
are you in an environment where it would matter enough to bother? Are you dropping es5 all together or how do you plan on accomplishing this (and testing/troubleshooting/supporting it)? If you were the CEO would you pay yourself to go through the trouble at this point in time?
I hate to pour cold water on this one, 'cause it's in the spirit of fun, but this makes it pretty easy for people *other than you* to victimize your victim. If I know your BASE_URL and I know who your victims are, I can send them to *my* instance of the server if they join a network I control (or if I perform a DNS cache poisoning attack on another network they join).
I'm an intermediate with JAVA so I'm looking for a book that teaches Javascript in depth as oppose to a book that uses Javascript to teach programming.
Can you elaborate more on that and how it's relevant to image processing or portability?
there are tons of image processing utilities out there already, and vertx being polyglot allows you to use them on the server side easily enough (instead of re-inventing them in js)
If you don't think it's an issue that people will need to eventually update all their code to use ES6 imports over require then you're lost. It's a legitimate issue. Even with transpilers, it's better to use the ES6 syntax, as you can't take advantage of things like rollup's tree-shaking builds. 
&gt; One interesting fact is that those browsers support much more ES6 code than babel does. Irrelevant unless you're dropping ES5 support and using only the common subset of features from all those browsers and all those that are still in the wild with significant share (which would leave you with ~50% probably).
Hey! I'm one of the devs behind this. Could you PM me what you're inputting, and how your directory is structured? Also, we realize it is a pain having to use a un-minified bundle file. Until we find a better solution, however, this is how we're able to sync up a copy of your application with the tree for real-time updating. Thanks for the feedback though! It's honestly exciting people are interested in our app!
That did it! Thanks again for your help.
Aurelia is an alternative to React and Angular. Much better to learn one of them well. Then if you need to, picking up the others will be somewhat easier.
How about JavaScript: The Definitive Guide?
I went straight to the homepage and found a detailed description...
Thank you, turns out I just went to the blog home ._.
Why is everyone in love with videos? Isn't it easier to read 1 page then to watch a 10 minute video? 
Or leave it unlocked, run a keystroke logger, and capture images from the camera. What you do with that information is up to you.
Needs tests.
I'd recommend learning Aurelia after Angular and/or React, so you can see how the design differs between them all. I wouldn't necessarily learn this framework to use as your main go-to.
Yes, I created an issue with a TODO list, I was thinking in TAPE and Supertest https://github.com/AlgusDark/expressful-pot/issues/1 Thanks :D
With compression, you might not find that significant of a savings in your js filesizes. Keep in mind that you will trigger syntax errors for non-supporting browsers. You will need to feature test each aspect of es6 just to determine what script to load. At this time, I recommend against for anything publicly facing.
Oh, my sweet summer child...
&gt;If you don't think it's an issue that people will need to eventually update all their code to use ES6 imports over require then you're lost. Oh boy, melodramatic dick waving.
It's possible - we have someone who just does basic HTML and advanced CSS styling, and does it pretty well. The person is able to use jQuery at a very basic level (making API requests, basic DOM access), but actively writing JS isn't required for what that person is working on. Also when I was at Yahoo, we had a CSS architect who knew the ins/outs of the CSS spec at a very low level - his job was to just build cross-browser compatible and reusable CSS for all of the main Yahoo properties. His HTML and JS knowledge was very basic, but goddamn he could do amazing things with CSS.
Outside of Promise.all, this is the cleanest impl, and one that I do myself.
Dependency injection getItem1().then(after1).catch((err) =&gt; console.log(err)); function after1(item1){ return getItem2(item1).then(after2.bind(null,item1)); } function after2(item1, item2){ return getItemThree(item1,item2).then(allthree.bind(null,item1,two,item3)) } function allThree(item1,item2,item3){ console.log(item3.item) }
Many symbol things and proxies are 2 things that babel doesn't fully support off the top of my head.
There are a *lot* of places where `nightmare` is misspelled as `nigthmare` on this page (9, according to my chrome tab).
You can do es6 detection and show a message for older browsers
The job of the ajax calling function should purely be to fetch and return the (parsed) response / error. Your mainline functions should be handling what happens to the returned data instead. Have your success / failure be callbacks. function handleSuccess (onSuccessCallback) { // this returns a function that will be set to the ajax success param // we're doing this so we can keep the user-defined onSuccessCallback in scope of the returned function // this gets called when $.ajax calls its success callback return function processData (data) { // do data parsing into a format // that all other callbacks require // do NOT manipulate the UI here onSuccessCallback(JSON.parse(data)) } } // the handleError function might look the same as handleSuccess function updateClientCareers(id, onSuccess, onError) { $.ajax({ // params // handleSuccess will return the processData function which will take in the result of success success: handleSuccess(onSuccess), // same with handleError error: handleError(onError) }) } function blah() { // parsedData comes from the processData () function var onSuccess = function (parsedData) { // update your UI here } var onFailure = ... // same as onSuccess updateClientCareers(1234, onSuccess, onFailure) } Not suggesting that this answer is the only way to properly solve it, but it's probably the cleanest for your level of understanding (based on the code you posted).
I think you got downvoted because readability is a concern here and the poster seems to be at a beginner level with JS.
Built for modern browser! Ahhhhh! I can't use it for real project.
What do you mean? They provide a bulleted list right here! - 21 Team Members - Almost 500,000 views/mo on our sites and blogs - Over 240,000 views of our videos - Closed 3,270+ Issues - Merged 1,730+ Pull Requests - Delivered 1,410+ Releases - 3,790+ People Chatting on Gitter - Almost 9,000 GitHub Stars !!!
Is there any proof to back your claim?
In this situation I'm using hashing as a way of making passwords not for storing them on a server or the like, so would that still work? I have no experience with node, I'll have to look into it...
You're such a badass.
Safari 10 is available on roughly 0% of non-developer Apple computers &amp; devices at this time. It is not release software. If your site expects to have people at work browsing you may need to consider Internet Explorer 11 support, as many businesses are not willing to upgrade from Windows 7, still.
Given that you mention Github pages, I'm assuming you'd prob want the browser-based library instead of the node one (you'd need to host a node server to run that one). Yes, it still should work.
Oh okay, awesome! Thanks! 
There are already multiple Pluralsight courses on Aurelia and other courses that utilize Aurelia while teaching other topics.
There are some things in ES6 that just cannot be transpiled.
It's basically the framework that Angular 2 should have been. I liken it's syntax to Angular 1 rewritten in ES6. [Angular 2 summed up in one picture](https://daveceddia.com/images/yo-dawg-imports.jpg)
Groupthink is prevalent in r/javascript. If you don't act like angular and react have sun shining out of their asses then you're going to be downvoted. 
https://kpdecker.github.io/six-speed/ For mostly everything, babel seems to be faster, but it does seem to vary based on the browser.
Elequent Javascript is pretty good and free.
They're pulling a lot of shenanigans with these numbers, too. If you look at the [actual framework](https://github.com/aurelia/framework) it has closer to 7000 stars and nowhere near that many PRs or issues. They must be counting the total of every single project related to Aurelia. 
It just makes some of the figures seem a lot more impressive than they are when you realize it's a total over so many repos. 
Do you have any links to articles etc about Angular 2 that hold this opinion? I'm currently working on an Angular 1 project with the plan being to move to ng2 ASAP.
Alright, thanks!
You could run through their [getting started](http://aurelia.io/hub.html#/doc/article/aurelia/framework/latest/quick-start/1) guide to see the kind of syntax. Imo, the view syntax of aurelia is much closer to ng1 than ng2 is to ng1.
There's actually a link to the [getting started guide](http://aurelia.io/hub.html#/doc/article/aurelia/framework/latest/quick-start/1) but it's in a weird place with poor information scent (under a head "How to Get Aurelia" with a bullet point of "Script Tags and CDNs"). Certainly rubs me the wrong way that this link is small and easily missed and the link to their paid seminar is a huuuuuge banner at the bottom.
I'm looking for more something I can read while eating lunch. And more about why not ng2, although pro Aurelia I would read too.
Yes it just seems dangerous and irresponsible, just talk to them about security instead..!
Thanks you so much for this, for some reason I'm making bad titles, but the answer I get are always to the point. This little tutorial is exactly what I want, I also found some grate libery to help me with this endever =&gt; [html2canvas](https://html2canvas.hertzen.com/). What I need now is to buy some characters and I'm ready to roll, I'm sure I can make better version of that hallmark app. Once again you helped me beyond belief! Thank you kind stranger!
I don't think they can do that with open source. 
You can use TypeScript, yes. 
Thanks for the summary, that sounds pretty neat!
&gt; If you need some sort of logic (functions, conditions, loops, inheritance of data etc.) [...] One should not mix data storage and logic in the same place. So no functions, conditions, loops, and inheritance in your configuration and data storage files.
Even if it's [quite easy](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) to convert an JS object into an JSON string, storing it as JSON would still be the better solution. It's as easy as in the other direction to [convert JSON to object](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse). OP: Please use JSON. :)
In the rare case your code doesn't have any commonjs dependencies, you can use rollup to end up with a topological sort of all the used parts of your codebase that is very easy to minify.
&gt; But yeah, at its core, Redux itself is a very simple pattern: all "write" logic goes into one function, the function is run when you pass in a descriptive object and returns an updated value Uhhhh.... yeah.... you literally just described `reduce()` https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce If people are struggling with bare basic concepts (`reduce()` literally hangs off the `Array` prototype ffs) then I really don't know what to make of the broader JS community. It seems to have become really diluted in the last year or two.
Ugh I have such bad fucking memories of Jest I feel sick just seeing the word.
Progress, not perfection. MomentJS was a huge leap forward. Superb library, superb effort! Thank you.
I loved working with the Durandal framework. It was simple, had very good browser support and worked like a charm. But when the creator started to build Aurelia all support for Durandal was dropped, at least so it seamed. It's a shame actually because now I wasn't able to work with either Durandal aswell as Aurelia. Because Durandal was now suddenly unsupported and Aurelia was 'for modern browsers only' aka don't build anything for production with it. Since then I was lost in the javascript framework world as I found Angular too 'big' and Ember too opionated. Luckily things have changed a lot now. React and Vue are my primary javascript tools nowadays.
I believe that when something gets that successful and popular the creators should be able to move on without being regarded as quitters or something. Its like, you won that part of the internet, doesn't mean you should be responsible for all of those people's problems or minutiae of that system for the rest of your life. Would be nice if he could sell it to M$ for $2.5 billion dollars but not everyone is that lucky.
Wow that's a shame. Anyone remember when date.js was the only half decent library for dealing with dates in javascript?
Cheers, definitely going with ng2 after reading those.
I've been building a SPA Wordpress plugin using Aurelia in the last two months. It was a pain to get it working with Wordpress' file structure(mainly because of SystemJs and not Aurelia). The framework itself is a joy to use. Superior to Angular 1 in every possible way. I've not tried Angular 2 but I've only heard negatives. If you like frameworks that separate your View and logic, this is definitely the framework to use in 2016. The only small negative is the lack of support and examples when you google questions, but that's not really the framework's fault.
Why do you need babel, isn't it a nodejs application? Maybe you would need to drop ES6 imports and use good old commonJS, but otherwise the latest node's ES6 support is quite good. I wouldn't use babel for this task. Also I would drop express and use koaJS for neat async-await like controllers. Try it out ;)
Closure Compiler seems to have some kind of ES6 support. https://github.com/google/closure-compiler/wiki/ECMAScript6
hmm, can’t find the super-modular one i talked about, but these exist: * [babel-preset-modern](https://github.com/askmatey/babel-preset-modern) * [babel-preset-modern-node](https://github.com/michaelcontento/babel-preset-modern-node) it would be cool to have the “modern-browsers” one have ~monthly releases with yyyy.mm version numbering so you can say “i want to support everything newer than march 2015”
It's already pretty amazing that there appear to be enough hands to maintain the project :)
And CDNs aren't tricky to handle? I've seen them bail out ever so often. Using CDNs in production is one of the most risky factors you can deal with, unless you provide local fallbacks, which will still delay startup. Not to mention that in a modular project that uses imports there's no use for script includes. If i were confronted with a lib suddenly vananishing from npm because its author holds a grudge i would remove it from package.json and go elsewhere, which is probably what most of your userbase did. That said, npm had occasional hick ups in the past. But it is in no way as troublesome as some insist it is. We've been using it in production for years and so far so good. 
Somewhat late, but I'm curious about the cons of angular 2? I'm looking at the different approaches at the moment and testing them out. React seems a lot easier to get into, but I dislike the jsx syntax even more than I dislike typescript (don't know why, just seems messy).
I
It is quite new and had breaking changes in RC and is suffering from scope creep. Only saving grace of angular 2 is that it is made by google. frankly, if you want a full fledged js framework, you should look into Aurelia (it hit 1.0 just yesterday)
&gt; When did I attack you?!? This part: "I don't think **you** can hear yourself.". You made the claim to the person, not the argument. &gt; now? because you are completely full of shit. I am astonished with the quality of the arguments so far.
You can't have absolutely no argument, and then criticise others about the quality of their argument. You probably don't even realize how much you smell.
There's probably a misunderstand here. Unless you meant something along the lines of "my code is so heavy commented it would only make it more complicated to maintain". "well-commented code" has a subjective interpretation. Most developers believe they have a "good commented" code but in reality, it is only "good" for themselves, just like when someone tries to create self-documented code without peer review or create an application without tests (although the latter is a much more incompetent practice than all the previous ones).
How did you learn it though?
Is this really the quality of comment that's gonna be on here?
there was nothing constructive about your blog post, that is the whole point. Saying something smells then pretending it isn't derogatory is the exact opposite of constructive. pretending it was a personal attack is complete bs.
Major props for recognizing mental health comes first.
Hi /u/ccorcos, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
My 2c: The highlighted links look like links that would take me to another page, so I don't click on them unless I'm interested on that enough to have a new tab that I'd have to go through. I'm not sure if this behavior can be "trained" out but I suspect you'll run into it with new visitors to your blog. Maybe put a little icon or something? Style them so they don't look like how someone would expect a page hyperlink to look?
In your render function, you need to specifically bind the context of your RHCA.Map object to the self.setStyle method when you pass it along to the L.geoJson method. My guess is that the L.geoJson method is taking that style method and using it as an event listener, and that's why the context of "this" is the Window object when the method is called. Example would be this: self.geojson = L.geoJson(countyBoundaries, { style: self.setStyle.bind(self), onEachFeature: self.onEachFeature.bind(self) // you will likely want to bind this as well });
&gt; The correlation between Open Source and burnout is no secret, and I am not immune to it. Combined with this, I wholeheartedly agree. People get so angry at Open Source projects, submit bugs with such anger and even more vitriol when they aren't fixed according to their timeline, and feel so entitled about their rights as a *user* (of free code)... sigh. Maintaining a small open source project is fun, fixing bugs is exciting (someone is using my code!), but the second it grows to a large one, I don't really want that stress without getting paid. This has happened again and again (babeljs, expressjs, others I can't think of off the top of my head), and it sucks. Once it's reached a critical mass, they should be able to walk away freely. 
I really like the import/export ES6 syntax, maybe I can [use babel for that](https://babeljs.io/docs/plugins/transform-es2015-modules-commonjs/), but if that's the only thing that babels would needed, then I think better use commonJS. I will do another boilerplate with KoaJS, thanks :D
Don't feel too bad about this, it's probably one of the biggest problems new comers have to javascript (and why people rejoiced ES6's fat arrows so much). You just have to be very vigilant about passing around "instance" "methods" like this. 
Jon Skeet has also has a good, kind of rambly talk on data types and a good chunk of it is just for [timezones and datetime structs](https://youtu.be/l3nPJ-yK-LU?t=1660). Time is *always* more complicated than people imagine it to be.
That Libya case is super interesting. You know how daylight savings [fucks you up](http://mobile.reuters.com/article/idUSBREA2S0D420140329)? Well, put that together with everyone's computer being put off proper time, and you have this clearly traumatic event. Maybe that's why things finally gave way...
I believe the `import` syntax gets transpiled by Node into the `require()` syntax. Personally I just stick to using `require()` since that's what the Javascript engine will end up seeing.
&gt; Time is always more complicated than people imagine it to be. Lets not forget that time is also relative depending on your velocity, acceleration, and the influence of gravity, because it turns out Einstein was right about Relativity. So a clock in space will run at a different rate than a clock on the surface of the Earth. Thankfully GPS satellites are built with that in mind and we don't have to worry about it unless we're writing software that will go into space... And I think I heard somewhere that Nasa does use Node.js for something to do with spacesuits.
There are numerous packages to help with this type of scenario. I suggest looking into redux-promise or redux-saga to help with asynchronous actions.
Ah - sad to see him go but I'm very excited for the libraries future. I've personally worked with Lucas and he's an extraordinary developer - and is releasing a huge immutable upgrade to Moment very soon (go look at and comment on the RFC - https://github.com/moment/moment-rfcs/pull/2#issuecomment-233139270)
4 hours later... thanks for the link, I think. Had never heard of these guys, but just binge-watched a bunch of their videos.
Technically yes, but "negative positive feedback loop" sounds really ... off to me.
I think this is one of the big dangers when an open source project is managed primarily by one person. You always need a team to help carry the load, especially in dealing with bug reports and support requests. This happens all too often.
Completely agreed. In my opinion you've done more for Reddit (and usability in general) than almost anyone in the world. No matter if you keep sculpting it for years or retire tomorrow, I think you've done for social media what Starbucks has done for coffee (except I don't have to hear people scream their RES settings at a barista). Also I'm not kissing ass for gold, I don't want any because I already have RES. I'd say Reddit should be donating $1 to you when people buy gold, but only if it wouldn't make your taxes ridiculously complicated.
Sounds neutral to me. 
To be fair ng2 supports the same languages and more as Aurelia. Typescript is encouraged for various reasons but it is certainly not the only way to write NG2 code.
if(!data) return false: Put that in your render function, where data is a redux state mapped to props.
I suggest reading the [redux docs on async actions](http://redux.js.org/docs/advanced/AsyncActions.html).
Sorry for the late reaction, I've been busy doing holiday things :P. I've played it and it's a lot of fun! 
He's not talking about dropping browser support. He's asking if there would be performance benefits of sending ES6 bundles to compatible browsers.
Oh man, I don't know what to say. Thank you!
There is literally ZERO documentation on using Angular 2 with ES6. I'm not going to spend a lot of effort trying to convert between the TypeScript examples and ES6 especially when I need to learn both ES6 and Angular 2 at the same time. That is a recipe for frustration right there.
Same here. My first reaction was to button3 click (open in new tab) the highlighted link instead of just clicking it.
Hi there, TypeScript PM here, would you mind elaborating a little on why you feel negatively towards the language?
If anyone is curious about why this happens, I'll tell you! It's because numbers in JS are floats, and numbers always list out full precision. So in decimal, `4` is always stored as `4.00000000000000000`. There is nothing that says how many significant figures the number as. In other words, `4` and 4.00000` are represented identically in memory. When converting numbers to strings, there is [an algorithm](https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type) that determines how many decimal places to print out (and it's actually pretty subtle).
Looks like you're not calling the function inside the for loop.
In this demo, I implemented an infinitely continuing, vaporwave-like world in WebGL. If you can't run it for some reason, a recorded gif of the demo can be found [here](https://github.com/Erkaman/wireframe-world). As for the implementation, it is not very difficult stuff; I divide up the world into chunks(just like in Minecraft), and as the camera traverses the world, the chunks that become out of range are thrown away and are no longer rendered. And in the far away horizon I keep adding new chunks, to give the illusion that the world is infinite. So it is not very complicated stuff; the source code is only ~450LOC, which can be found [here](https://github.com/Erkaman/wireframe-world/blob/gh-pages/wireframe_world.js). It is relatively well-commented, so it should be easy to understand, I hope. 
So I copied yours and tried it, but it didn't work. But upon further testing, I discovered another program was stealing `alt + C` for itself. I've worked that out now. However, the second issue still stands; pressing `alt + C` doesn't retain the form history in cache like pushing the button does. Thoughts on that?
https://medium.com/@petersirka/download-node-js-web-applications-for-free-1bf7252f2d71
Thanks for the solution. Now the problem is converting it back to a number without taking away the added 00's. Do you know how to do that?
Another fellow dev checking in to say thanks for RES. The user experience improvements it offers are (and always have been) phenomenal. Browsing Reddit without RES is like trying to use Notepad when you're accustomed to Sublime.
You're not going to find any fully web based solution, you'll need a real streaming server back end such as Red5 or something similar. Most of which come with hefty licensing fees making it impractical for someone to simply tinker around with the idea (see Red5 it's free). As always you get what you pay for so your mileage will vary....how you choose to display the video would just come down to what player you wish to use. 
That doesn't make sense. The number always "has" 0s. It's a float. Consider this. http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem
All of them.
Thank you all! I have got it working :)
My button is just: `&lt;button onclick="clearForm()"&gt;Clear form&lt;/button&gt;` For the function, I originally had this: var inputelements = document.getElementsByTagName("input") for (var i = 0; i &lt; inputelements.length;i++){ inputelements[i].value = ""; } var textelements = document.getElementsByTagName("textarea") for (var t = 0; t &lt; textelements.length;t++){ textelements[t].value = ""; } var selectelements = document.getElementsByTagName("select") for (var s = 0; s &lt; selectelements.length;s++){ selectelements[s].value = ""; } Then, someone suggested I use this: `document.location.replace()` Researching that, I'm thinking maybe `document.location.assign()` might be better, as MDN states that with replace "the current page will not be saved in session History" which is opposite of what I want. Still, if you have a better suggestion that would work with this context, I'm open. For context, this form has an "output" textarea at the bottom of it, which takes all the inputs (selects, textareas &amp; fields, checkboxes) and formats them into one note. Once the note is copied from the output, clicking "clear form" (or using the shortcut) would wipe it clean, ready for use for a new set of data input. If I need info from the past, clicking back should show me past instances of the form. History isn't super-vital, but is really nice so I don't have to go into another system to find the info I need.
I wrote /r/DestinyItemManager v3 angular port which was a huge lift that took six months, and I really needed help after 1 year of maintaining it. Luckily just was I was getting really tired, contributors started showing up and made life MUCH easier. Now I can just monitor PR's, offer suggestions, and jump in when I have a good idea. I like to remind myself that there is an 'ebb and flow' to this, and we should sometimes ride the current, and at other times, steer the ship.
Another dev joining: I've never encountered a single bug with RES, you're doing great work! 
A challenge on Free Code Camp https://www.freecodecamp.com/challenges/exact-change It requires me to output them with .00 and as numbers
 function rand() { return Math.floor(Math.random()*myArray.length) } test.innerHTML = rand() + ", " + rand() + ", " + rand() //or test.innerHTML = [rand(),rand(),rand()].join(" ... ")
 Number(theValue) The numbers `7` and `7.00` are actually exactly the same thing: 7 === 7.00 // true There are many ways to represent the same number, but the browser will always display it in its simplest form when you console.log/alert/etc For example, you could write: function checkCashRegister(price, cash, cid) { return [["QUARTER", 0.5]] } And that will pass the first test because `0.5` and `0.50` are the same number
Oh my god! Is it Friday already? This is the best post in a while!
Just adding auto-bundling of required modules to qoopido.demand - had this in mind for some time but never had the spare time to actually think about it. Should be released within the next couple of days ;)
Ok, that makes sense I'll see what I can do. Thanks for your help!
 var values = [1, 5, 10, 25, 100, 500, 1000, 2000, 10000] function checkCashRegister (price, cash, cid) { var owed = parseInt((cash * 100), 10) - parseInt((price * 100), 10) var pay = cid.reduceRight(function (memo, type, i) { var id = type[0] var amount = parseInt(type[1] * 100, 10) var unit = values[i] var remaining = parseInt(amount / unit, 10) if (remaining &amp;&amp; unit &lt;= owed) { var typeArray = [id, 0] while (remaining &amp;&amp; unit &lt;= owed) { remaining -= 1 typeArray[1] += unit owed -= unit } cid[i][1] = remaining * unit / 100 typeArray[1] /= 100 memo.push(typeArray) } return memo }, []) if (owed) { return 'Insufficient Funds' } else if (cid.reduce(function (memo, type) { return memo + type[1] }, 0)) { return pay } else { return 'Closed' } }
Can't count the times I've used moment! You've done great work, and deserve some time to yourself. Thank you!
this rand function is only generating numbers. you want to return the value of an array at the index of whatever the rand function evaluates to. 
I am definitely against convention over configuration. It makes it harder for new people to be brought into the fold and has a big mental model you need to process to follow code. Plus I am not a fan of 2-way data binding. PS: And also the person who wrote it sounds like an ahole. Bagging on ng2 but never has anything good to say about it, makes the articles feel untrustworthy - just and advertisement as to why their code will save your soul and ng2 will damn it.
Many modules make a whole in this case. So it isn't misleading at all. The misconception is the framework repository is the main repo, but if you look, all it does is exports a whole heap of other modules like the router and so on.
Open up the console. You spelled calculate wrong.
oh god, that's embarrassing, I'll be sure to check next time! thanks! 
Thanks for the reply, but I still am not able to make it work - not sure why. I am still pretty new to js. Can you tell me what I did wrong? &lt;script&gt; function random(array, n) { var results = []; for(var i = 0; i &lt; n; i++) { var random = Math.floor(Math.random() * array.length); results.push(array[random]) } return results; } var myArray = [1, 2, 3, 4, 5, 6] random(myArray, 3) &lt;/script&gt;
http://gph.is/1O5vWgH No, but actually a couple things - asynchronous code , particularly with lots of inversion of control (frameworks) can be very slippery to get a hold of. - "debugger", as mentioned below - console.table shows collections in a more organized fashion - console.trace gives you a stack trace - in the browser you have f12 (or right click =&gt; inspect in chrome, not sure about firefox) opens up the dev tools, which give you all kinds of things. You can use the console as a repl that's attached to your page, browse html and css, check out network requests, etc.
&gt; Because just assuming can lead to some seriously frustrating moments, thinking the language is either stupid or broken when the this context is lost ("how does a class forget what instance it is???"). Personally, I think the language is partly stupid and partly broken when the "this" context gets lost. ;-) It's hard to find the sweet spot between loose and dynamic vs strict and static. Remember when people thought a loose and dynamic equality test `==` would be a good thing? Turns out types matter, and `==` was *too* loose and *too* dynamic. And then there's JavaScript's functions aka methods aka constructors, depending on how they're invoked. Allowing a function to take on multiple roles is certainly the dynamic thing to do. A function could become a method at any time. Or a method could become a function. *But*, to make that work, every function has to be ready to be any of those at any time. Which means every function needed to have its own local "this" value, even if it was only ever going to be an ordinary function. Type.prototype.method = function() { setTimeout(function() { // This callback is intended to be an ordinary function // It will only ever be invoked as an ordinary function // But in theory it *could* become a method or a constructor at any time // So it gets its own "this" value just in case, // which unfortunately will shadow the outer scope's "this" console.log(this.property); // wrong "this" }, 1000); }; Just like `==`, this is a case where the language was *too* loose and *too* dynamic. It would have been better if there was a strict distinction between ordinary functions, methods, and constructors. For the most part, we have that now with arrow functions. Arrow functions don't define their own "this", which means they can never be a constructor, nor can they be a method that uses "this". An arrow function is strictly an ordinary function.
is optimization really needed here?!? but just start at the selected seat, look North, East, South, West, then North East, South East, South West, North West, etc, etc. the hypotenuse should be used for distance. And with a grid like that it is a simple pattern mirrored 8 times (2 in each quadrant) working out from the middle. Stop when you find 3 empty seats. Me? I would just add the empty seats to a list and sort by distance.
Brutal honesty (or maybe just "I'm an asshole") time. You're a junior programmer. I know you're probably not a literal "junior", but a programmer who only knows a language and none of its libraries is a junior in that language. I see two options: 1) seek out a junior level position, and learn a framework on the job 2) Learn React or Angular (1 or 2). In terms of market share the rest don't matter (Source: I just looked at a million listings while job hunting). It's not that hard to do a basic project in either, and if you can do that you can confidently apply for a job that needs said framework. Well, unless they use words like "expert" or "master". And then, once again, learn on the job until you are a master. Best of luck!
Personally as a Django developer also I'd definitely choose Aurelia because of this point because it's one of the few frameworks that you write in plain Javascript. Typescript and jsx, react, angular and Aurelia could be flavors of the month but writing plain Javascript is always a plus just like with Django you're only writing python but leaving a lot of the orm stuff to the framework.
I havent heard of anyone using JS++ but I've heard of many people/teams/companies using typescript in production to build large and complex applications. Teams like angular/auriela/telerik/dojo/ember and companies like google/microsoft/asana/bet365/WiX etc..
Usually this is a comparison of flow and typescript. JS++ is pretty much unheard of at this point.
&gt;But, of course, if they're explicitly looking for a guru in framework X, not much you can do about that. Particularly in the larger, more opinionated frameworks like angular and ember, there's a lot of hidden voodoo that you just have to suffer through before you have that experience.
&gt; Me? I would just add the empty seats to a list and sort by distance. Optimization probably isn't needed, but it's more of a curious itch. The way I have it set up right now is basically sorting by deviations from desired location. Edit: I added a jsfiddle btw
https://angular.io/docs/js/latest/tutorial/ It's not ES6-specific, but those are the Angular 2 tutorials in plain Javascript, not TypeScript. (Notice the dropdown under the Tutorial title). The "Developer Guide" is not yet available in plain Javascript, but it seems like they're working on adding it. I think the hate against TypeScript is a little ridiculous. After getting the hang of it, I swear I can build things faster now than using plain Javascript, with the added benefit of better structure and control. I guess it's not everyone's cup of tea, but I feel like people tend to hate it before even giving it a fair shot...potentially because Microsoft built it.
2016. Alive and well. 
redux-thunk also good
P.S. I should point out that it pains me to say "the rest don't matter". I wrote a book on Backbone, and I love the framework, but even I have to admit there are very few Backbone jobs out there, and many of the ones that do exist are for a "we've got Backbone but we're moving to React" situation. But that being said, you could learn a framework like Ember (or Backbone or whatever) if you really wanted: there will be far less offerings for Ember, but there will also be a lot less Ember programmers to compete with (vs. Angular/React programmers).
Hello /r/javascript! I'd appreciate if you check out my latest project. It uses a Naive Bayes model to classify tweets about the presidential candidates and uses Chartist and Leaflet to display the results. You can read a Q&amp;A about it here: https://candidates.drewatkinson.me/readme
Things I wish Javascript had from Python: - Meta-classes. As it stands, you can't easily rewrite the internals of your prototype chain at runtime. Things I wish Python had from Smalltalk: - Traits. Because although multi-class inheritance is great, I really do wish I could just pull in a single function into the class and be done with it. 
yah, when I run this in the console, it takes half a millisecond to do the "hard" part... not really sure given the limited grid size that anything fancier is really warranted here. var seats=[ [1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1], [1,1,1,1,1,0,0,1], [1,0,1,1,0,1,0,1], [0,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1], [1,1,1,0,1,1,1,1], [1,1,1,1,1,1,1,1], [1,0,1,1,1,0,1,1], [1,1,1,1,0,1,1,1], [1,1,1,1,1,1,1,1], [1,1,1,1,1,0,1,1], [1,1,1,0,1,1,1,1], [1,0,1,1,1,1,0,1], [1,1,1,1,0,1,1,1], [1,1,0,1,1,1,1,1], [1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1], ]; var rows=seats.length; var cols=seats[0].length; var seatcol=3; var seatrow=8; var start=window.performance.now(); var empties=[]; //find all the empties and save their relative distance to seat and coordinates for(var y=0;y&lt;rows;y++){ for(var x=0;x&lt;cols;x++){ if(seats[y][x] ===0){ var d=[0,x,y]; d[0]=Math.pow(seatcol-x,2); d[0]+=Math.pow(seatrow-y,2); d[0]=Math.sqrt(d[0]); empties.push(d); } } } empties.sort(function(a,b) { return a[0]-b[0] }); console.log("Time=" + (window.performance.now() - start)); console.log(JSON.stringify(empties)); Time=0.5500000000465661 [[1.4142135623730951,4,9],[2,1,8],[2,5,8],[2,3,6],[3.605551275463989,5,11],[4,3,12],[5,0,4],[5.0990195135927845,4,3],[5.385164807134504,1,3],[5.385164807134504,1,13],[5.830951894845301,6,3],[5.830951894845301,6,13],[6.082762530298219,4,14],[6.324555320336759,5,2],[6.708203932499369,6,2],[7.0710678118654755,2,15]] 
Learn JavaScript first :) 
Yes I have stepped on it for a long time. The things I haven't learned is ES6.
&gt; I know you're probably not a literal "junior", but a programmer who only knows a language and none of its libraries is a junior in that language. Yes, I'm a more experienced mid-level as a back-end/PHP developer but I'm a junior when it comes to JavaScript. &gt; 1) seek out a junior level position, and learn a framework on the job For this option, should I just apply to any job that says "junior" and "JavaScript" in the job description and then tailor my resume to appear less experienced? I have web dev jobs going all the way back to 2007, so I figure I would have to remove the oldest two or three jobs.
Both are pretty great. What's your objective? 
ah, interesting. because there were no JS snippets? I guess that makes sense. Sorry about that. 
I want to create a robust web app but I don't want to use much web technologies. For databases, I use Firebase or other BaaS.
None of those chapters is available in JS.
Several of the main React devs have given suggestions for what order to learn these types of technologies. See some of the articles listed at https://github.com/markerikson/react-redux-links/blob/master/basic-concepts.md . If you are interested in learning React itself, the rest of my list has links to articles on React and several related topics as well: https://github.com/markerikson/react-redux-links .
Ember :) Edit: Just a joke folks... Seems though that OP is complaining that learning react would require a lot more tools to learn with it and I jokingly suggest a framework that can stand on its own... Oh well.
&gt; In reality I use comments (or more specifically DocBlocks) as inline-documentation and to generate the code documentation from using PHPdoc. That's a totally legit use case and just a matter of style, as stated in the article. I just don't get it, are arguing against or in favor of the article?
I learned the whole react stack, worked with it for 6 months and then switched to Vue. Vue is very fast to learn, spend a day on it and see what you think.
If you decide to go with React land, learn (at least a bit) functional programming first.
&gt; proper review policies Can you elaborate on "proper review policies" and its benefits over pair programming using examples? I say this because it is impossible to have a constructive argument against subjective opinions and I am very curious about this point of view.
would recommend becoming expert at two+ things (and marketing it as only that in this case: javascript expert), even if you dont get the ember job theres going to be a PHP job who needs an expert, and a javascript expert too.
Eh, you'd always be able to do a `var undefined` in the local scope and compare against that. Fun fact: JavaScript version 1 didn't supply an `undefined` global.
I prefer Vue over React, but all the things you listed are optional for both Vue and React, and it does not make sense for those to be the reason to switch tracks mid way. Webpack isn't something you have to dedicate to learning, there are plenty of existing configs you can copy and then forget about. Same with Babel. Copy an existing config, or use a template / boilerplate / starter. You will naturally gradually pick up understanding of both of those over time Redux is optional, a lot of apps don't need it. Vue has Veux which serves the same purpose. You don't have to use or learn that either. It also only takes about 3 hours to go through the videos for redux, it's dead simple. Edit: oops thought you said Flow instead of flux. Redux is an implementation of flux
Community is way smaller at ember. 
Vue.js
I like it kind of dumb. It is a solved game, so having a chance to win is nice. Could be a little smarter though, [first try](http://imgur.com/9o1XDTl).
Facebook just came out with this starter kit for React that is super simple and allows for configuration in the future. [check it out](https://github.com/facebookincubator/create-react-app)
Seconded. React and Redux! :)
I think it's bigger than most people assume. Ember conf was huge this year, like 1000 people?
You can use something like [concurrently](https://www.npmjs.com/package/concurrently) to run both at once. You can do that through npm, too: "dev": "concurrent 'npm start' 'npm test'" Then you'd use: npm run dev Instead of start. Or you could swap it so that npm start ran a dev task that fired up webpack and also ran tests. Whatever suits you. Should remove the complexity for the rest of your team without requiring a lot of jiggery-pokery in webpack.
There really isn't much to learn with ES6, mostly just cleaner syntax. 
Relative to the react / angular duopoly i meant. 
ES6 isn't much of a stepping stone although you will find: * Arrow functions () =&gt; {} instead of function() {} * for (x of y[]) (actual value/object instead of its index) * let and const * Similar async/await flow with coroutines (tj's co or Bluebird coroutines, pick whatever) Will help a lot.
&gt; Why data relations shouldn't be in data storage? { {"section1": {"option1": "foo", "option2": "bar"}}, {"section2": {"option1": "foo", "option2": {"inherited": "section1"}}} } ... and then use your logic to inherit `option2` from `section1` &gt; functions can represent data transformations, behaviors, reactions etc And because they're part of the program they should be done within the program, and not in the data store. Databases have special sections to store functions and don't put them in the actual data store. &gt; If I need 15 elements why should I have to write something 15 times? Yeah, why? Why not simply store them as single value arrays? { {"simpleConfiguration": "blah"}, {"complicatedConfiguration": ["foo", "bar", "baz"]} } Now you can iterate over the complicated configuration options without repeating yourself.
Well I guess he wants to know how Webpack works, and that is okay thing to learn. But yeah, whatever you pick, you'll have roughly the same stack to go over. For example where React has Flux/Redux, Vue has Vuex. But it's not that complicated tho, those are just some libraries, and when you get to know how a framework works, those plugin libraries feel natural. And to finish, I prefer Vue over React. :) edit: shit, this was supposed to be a response to /u/alowishus_gublatron
When it comes to webpack and all that.... I just had a look around at some popular Yoeman builds, picked what I like, and kept it. I feel similarly to you though, it's pretty secondary. Gotta disagree on Vue&gt;React though, I am using React for EVERYTHING these days, I can't get enough of it. Our company is very heavily invested in it. :-)
&gt;"heavy JS/Ember guru" Sounds like a Rails guy who picked Ember and now thinks he "knows" Javascript. Honestly I can't imagine how a CTO could ever pick such a slow, inflexible and crappy framework. Every Ember developer I know doesn't know Javascript, they only know Ember. Generally what I see is any team that uses Ember moves incredibly slow(since they need to wait for the next plugin to add a feature), and their sites mobile load times is painfully slow. Personality wise I would say this sums up how most [Ember Devs](https://www.youtube.com/watch?v=TBb9O-aW4zI)
Destructuring is pretty cool too. And ES2017 also has the spread operator inside array and object literals.
React vs Vue is just a matter of prefference: * Vue is simpler, a lot of concept from e.g. angular 1 and React. You can use it without build system - just include it into HTML file * React is bigger and little more complex (e.g. in terms of setting up). You use it with build system, preferably Webpack So if you want to just learn library, without build system choose Vue. And if you will feel comfortable enough use build system + something like *.vue files + maybe Vuex for Redux-like state management (but only if you have complex app) - use vue-cli to generate boilerplate. On the other hand you can use any boilerplate for Vue or React and then first learn library, and after dig into build system. It's just a matter of preference and that if you actively seek for job offers (if you do then choose React).
ES6 standard with Flow for types. As browsers get to support more and more of the Ecma standard need for Babel transpilation will reduce. It is a safer choice JS wise. Typescript means getting into a Typescript centric pipeline of tools, compiler, linter and so forth specific to it. Sticking to JS is more community friendly, play well with a massive amount of tooling options and third party libraries and doesn't require any Typescript specific definition files.
I tend to disagree with the article. And not only because of the very first sentence. &gt; the code is supposed to be written for humans to read It is NOT. The code is there to be executed by the machine. The human only has to enter the code. When optimizing always optimize for the machine, not for the human - except the human is to execute the code ... :) Comments are for the human. Either because the comments are written in a style the machine can parse them to create human-readable documentation or because the developer wants to tell a human who reads the code something. 
I think that is Reacts true advantage, it's the most established, having the largest community. Otherwise Vue can be run exactly like React, can use the same plugins (fi redux) and even parse JSX. But its advantage is pretty much that you don't have to use it that way. For some, arguably HTML templates and scoped CSS fares better, especially since you have further options like Jade, Sass, Less, Stylus, etc. It's a nice [separation of concerns](https://vuejs.org/images/vue-component-with-pre-processors.png).
Well they both have great CLI's now to get you up and running so worrying about configuring browserify/webpack isn't a problem. https://github.com/vuejs/vue-cli https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html
Out of curiosity, have you given TypeScript a try at all?
&gt; Aurelia is not typescript Aurelia are friends of typescript and offer typescript examples/skeletons with in their documentation. https://github.com/aurelia/skeleton-navigation &gt;Ember is not typescript I didn't say ember was written in Typescript but I did say the ember team use Typescript with they do (See Glimmer 2). &gt; Typescript at Google is almost non existent Except for google's largest open source effort and the very framework for their internal web applications is written and recommended to be use with typescript. https://github.com/angular/angular u mad? 
I know "depends" is a piece of advice noone wants to get, buuut it really does. Sometimes you don't need a frontend framework at all and you can just use pug (formerly known as jade) for your dynamic public content. 
It ultimately boils down to what your primary objective is? - To make resume better : ReactJS - To get shit done faster: VueJs 
If you want to use firebase with Vue, I recommend VueFire. It's pretty great. Also, use vue-cli to set up your webpack build. Then you get Babel and all of that for free. I can't say which of react or vue you should use since I haven't used react enough but I absolutely LOVE vue, I started using it in January and I can safely say that it has changed everything for me.
nice try Roger (creator of js++)
I'll definitely try to play with JS++ one time, but I am quite scared of implementing it in real world scenario, because there is no large company backing it.
Well if you want to look into ReactJS try their new tool which makes starting easier, I've already made an app and deployed production ready, it was way easier than projects before.
I think it depends on the ecosystem you want to develop in and what support there is there for that tool. I'm learning Vue.js at the moment as I do a lot of work with Laravel and they've announced ~~it's their preferred front-end framework~~ they are making compilation ".vue" files is easier.
&gt; So, is this the best way to do it? To me it's loading the JavaScript on the bottom of your page so the DOM is fully populated when running and/or use [DOMContentLoaded](https://developer.mozilla.org/en/docs/Web/Events/DOMContentLoaded) in order to run it when the content is loaded and then simply [JSON.parse](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) it and process the result as needed (setting options, and values, showing/hiding fields, etc.)
I actually look for devs that understand JavaScript first, then have experience with frameworks second. Any decent JavaScript developer can pickup a framework on the job easily. 
It's literally intended behaviour when you run remote code! The way everyone just includes a CDN mirror is literally handing over control of the resource. And if remote code runs and overrides global vars? You're running that code, what'd you expect?
You don't have to use in line styles with react. In fact, I'd avoid doing that unless you're shipping a component library or something (to ease use and not require webpack for your consumers). 
&gt; The code is there to be executed by the machine. The code is there to be read by humans. Only machine code is made for computers. All other code is made for both computers and humans. &gt; When optimizing always optimize for the machine Assuming there is the need to optimize. It enters the exceptions pointed in the article, where optimizations should be commented. There is another fundamental problem right into the optimization itself: If the programmer need to optimize, then it means that the abstraction has leaked, although sometimes there's not much anyone can do. Fortunately, micro optimizations are unnecessary for &gt; 90% of the cases, an efficient architecture is usually enough to understand how things are executed. If optimization is a requirement, then there is a much bigger problem at hands. &gt; or because the developer wants to tell a human who reads the code something. Then try to tell by correct naming the components of the system first, if and only if one can't do that, then fall back to comments. The smell of comments require the developer to think a lot before jumping into comments, because something seems obvious but it is not. There's no silver bullet.
I understand a little bit better what this specific tool is doing now. I was more getting at the thinking behind the "react way" of putting all your HTML and CSS into JS syntax vs leveraging native code such as with Web components or other technologies like AngularJS.
You can use a closure and scope/namespace it however you want
True but it is far from being straight forward. There are a [myriad of ways and workarounds for global and scoped styles](https://github.com/FormidableLabs/radium/blob/master/docs/comparison/README.md) and [none is quite obvious](http://stackoverflow.com/questions/26882177/react-js-inline-style-best-practices). Probably the reason why many developers just use inline styles anyway. Vue's advantage is simple: that which has always worked can simply be kept without further ado. Applies to styles and markup. There's no "change everything you know and do." Now initially React's argument was that it's faster that way. Vue most likely outforms it still.
You can use plain css files and class names. It doesn't get more straight forward than that. 
I absolutely agree. I love React, but I outright hate the monstrosity of putting [CSS in JS](https://github.com/krasimir/cssx). For me, even adding inline styles and using [CSS Modules](https://github.com/css-modules/css-modules) adds unnecessary presentational complexity to React/Vue/Angular/Ember components. I use the well known and loved [BEM](http://getbem.com/) standard at work, and whilst I think it again adds a lot of noise to HTML, it's a necessity until Web Components, and especially Shadow DOM, has a much wider support amongst browsers. I have actually [attempted to shoehorn Shadow DOM into React](https://github.com/Wildhoney/Keo/blob/master/docs/SHADOW_DOM.md) with limited success, but as with a lot of my GitHub modules, it's experimental. I would love to see React eventually support this approach. Again, Interpose is looking toward the future, and would work best with Shadow DOM support using the `:root` selector.
Yeah, this is why I shouldn't try posting when I'm tired. :P Somehow I thought every page on that Tutorial was already available in Javascript. Still, the fact that the dropdown is there should prove that they plan on documenting it in Javascript in the future. I also didn't clearly state my central point about TypeScript, which is: you don't HAVE to use types. I think most people assume that because TypeScript allows for static typing, that you are required to use types everywhere. As far as I can tell, you can use types as much or as little as you would like using Angular 2 + TypeScript. That's why I think people hate on it before giving it a fair shot. Use types whenever you want that added layer of control and structure, and don't use them if you think they won't help! Side question: I know you said you're using vanilla.js, but did you give React a shot at all? (I realize it's just a view-renderer and you need additional modules to actually build up to a framework, I'm just curious what experiences people have with it.)
Maybe get the JSON generating file (or the actual JSON file) via XHR and parse the result to an object where you need it.
They're global and bleeding. In that case you don't have a component that you can simply swap with someone else. 
Never heard of js++ so that's one reason not to use it. Typescript is the current Microsoft attempt to create some relevance in the web world so that's a reason not to use that. If you think you need either, you are getting your education from reddit. Don't do that. So problem solved. Neither. 
What difference would that make? Microsoft supported JScript, among other things, and you see how well that went. I understand that it helps if a large company has a stake in it rather than some guy in his basement but relying on a large company who only supports it based on its products and profit isn't so great either.
Not sure to be honest, I just assume it is safer to put trust into a thing that is created by large company. Because large company will drop support for some tools only if they thing it is worth and they can also promote their toolkit much better (so it has greater community). A one-person project can be dropped if author lose motivation etc.
requireJS had modules a long time before angular was around, and does it better than angular's shitty module and dependency injection system. 
http://i.imgur.com/Vb4g4.gif Finally. I completely agree with you. It's hard to find people who aren't sniffing the angular glue on here. 
Thanks for your answers. But I found out React's docs is not better enough. For example, even the docs didn't tell me how to use React.Children. The docs only give me the pattern of React.Children, no example.
The docs is not good enough. For example, the example of React.Children is not given. Here's : https://facebook.github.io/react/docs/top-level-api.html
I don't think it inherently defeats the purpose of RxJS to use immutable data, but I don't think you're going to get all that much value out of it, either. When you use immutable data all of the way down, you don't need observables - you can just constantly check against your data tree to see for changes, with how cheap object equality is. A minimal wrapper around a data tree that has hooks for when any change occurs to start redrawing, like redux, works best here. And by the same token, you're not getting a tremendous lot of benefit on the observables side. You could theoretically prevent some mutations from leaking unintentionally, but this is typically pretty unusual and I don't think the cost here is worth the benefit. I think you should really seriously think about the tools you're using, since lines like &gt;I've been keen on bringing immutable data structures into the way I work, Are *worrying*. These are tools that serve specific problems, you shouldn't just *want* to use them.
Why not include Johnson?
you basically do this in a `.vue` file: &lt;style lang="scss" scoped&gt; .my-class {color: red; } &lt;/style&gt; and it will transform the scss for you and scope it. http://vue-loader.vuejs.org/en/features/scoped-css.html
No reason, really. I might go back and add third party candidates later.
[Here](https://developers.google.com/analytics/devguides/reporting/core/v4/quickstart/web-js) is where I started. Then I looked [here](https://developers.google.com/api-client-library/javascript/) to see if they had one. After a couple of hours of googling, it doesn't appear that one exists yet. 
&gt; Side question: I know you said you're using vanilla.js, but did you give React a shot at all? (I realize it's just a view-renderer and you need additional modules to actually build up to a framework, I'm just curious what experiences people have with it.) I'm not a fan of react. It violates separation of concerns between the view code and the controller and makes it much harder to write css early on. The problem with react is that because it embeds the view in the controller, it can be very difficult to start from view mockups and work your way back. What I mean by this is that I tend to write HTML first, then css, then javascript to drive it. React makes this harder because the HTML is embedded in the JS. I think thats fucked. Secondly, I've seen a lot of react code in production that looks like 1990s PHP. You laugh, but this code came from great programmers. I've seen the people who wrote this particular code write amazingly beautiful backend code, but the frontend shit is a fucking horror show. I think react encourages a way of thinking that risks turning your code into a big ball of mud. Because of my experiences with react in the past, I'm unlikely to choose it again for any project and I think once a better framework for ES6 comes out, it will die the horrible death it deserves.
I'm pretty sure Netflix uses something called EME to protect their HTML5 video. It's encrypted and short of exploiting any bugs that may exist a screenshot won't be possible. Found this thread as well: https://www.reddit.com/r/webdev/comments/3p8bos/how_does_netflix_drm_work/?st=ir7u8yxf&amp;sh=d0c2a7a8 
I came into work a bit early and got [this fiddle](https://jsfiddle.net/nj497ckn/1/) set up. :) For some reason, it seems I can never get the JS to work in its own pane, so I have to stick it in the HTML pane. edit: Due to the nature of jsfiddle, I'm not sure how well the clear form stuff will work in there without causing weirdness. But basically, I want it to be able to erase all the forms in a way that it stores the data so I can rewind back to them if needed.
&gt; The code is there to be read by humans. &gt;&gt; What for? What for? Seriously? It is to be understood by humans, that's why programming languages are built using natural language and that's why design patterns and practices emerge. They are proven to work and help to deliver value to software projects from a maintainability perspective. The fact a computer can process logical steps is irrelevant, that's really a basic thing, not even need to be discussed because it is assumed that everyone here is capable of doing that. It is all about using natural language or mathematical expressions to reason about something. It is all about legibility and to make the code readable by humans using the constructs of the language, similar to how we learn an actual human language. Throwing some commands to the computer is infinitely easier than building maintainable code for humans. The problems we have are all psychological human problems: cognitive complexity, teams efficiency, Dunning Kruger effect, Curse of Knowledge, individual ego, etc. &gt; 30-50 lines of code that can't be separated into smaller functions I am 100% sure, and I mean it when I say, that the "30-50 lines of code that can't be separated into smaller functions" **can** be separated into smaller functions, since every imperative statement can be reduced to a function. It is only a matter of knowledge and analysis by all the ones that are working on that part of the system, like with review, pairing, mob, etc. The perfect engineered application is an Utopia, but we should always aim to that direction and claiming that 30-50 lines of code can't be separated into smaller functions is a big claim that should be backed up by a proof (unless you meant like a legacy application or one without tests, then it is not that it can't be separated, its just that we are too afraid of doing it, for good practical reasons).
I'm a fan of `class`
Hi /u/Rajnishro, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I've seen this concern raised before on Twitter, and I am also curious to see what people have to say about this.
I think that's just for argument lists, isn't it? ES2017 lets you spread arrays into other arrays, and same with objects.
Unless you are working directly with an API they provide, I can't imagine you'll be able to reliably access that type of data. Even if you were able to come up with a hacky solution to access a thumbnail, netflix changes their UI a lot...
So happy to see someone else with the same impression that I had for React. I've never used it, but when I first set eyes on JSX, all I could think about was PHP. It just looks...wrong. I keep reading things like "JSX is the future because it puts HTML into your Javascript!" and I'm thinking "why would I want that? what situation does that make significantly easier than other frameworks?". I agree with you, it all just seems like a huge mess and going backwards in time. Maybe someone could convince me otherwise.
OP has basically been reposting this to every sub...Might want to report this as advertising.
TS doesn't mess with the import system; it emits your ES6 imports verbatim just as you wrote them. Plus 2.0 is adding more resolution options so it can play nice with a wider variety of module loaders. What parts of ES7 doesn't it understand?
Not sure what your point is. Require.js is still a third party userland tool to augment JS with a critical feature it lacks natively, hence my point - plain JS is insufficient for building large scale, complex apps in a somewhat easy, maintainable way. You NEED frameworks and / or lots of third party tools. ES2015 will hopefully alleviate some of those issues. To tie this back into OPs original point, if you only know the language, but a company has a require/backbone/lodash "stack", and you've not worked with those before, then you are simply not as valuable to them as someone who has. Meanwhile if the language were more complete, and things like require and lodash and moment were part of the language, then that's one less set of third party libs you're expected to have domain knowledge of.
Definitely apply for jobs with "junior" and "Javascript" (and also the rare ones that don't mention "junior" but also don't require framework experience). As for experience .... if you had ten years of front-end experience and you applied for a junior role, that would look weird. Aside from a situation like that, I would NOT downplay your experience. Even if I'm hiring for a junior position, I want the most capable programmer I can find. Experience is a sign of your competency, even in other programming domains. Personally what I would suggest is ... * Unless you have worked at a lot of different places for short periods, I'd only detail the most recent few jobs on your resume, and leave the rest as one or two line entries (title, company name, date, that sort of thing). That way you don't lose your experience, but you just keep the focus on the more recent stuff that a company cares about. * Play up your strengths: you were hired to do PHP, but your company needed JS help, so you stepped up, took over a huge legacy codebase, made it your own, and kept it running for X years. That's awesome, and it's totally the kind of story I want to read on someone's resume (well, not an literal story of course; this is a resume). * Be honest about what you don't know ... but still try and turn it in to a strength. If you say "I'm a React god" and then you can't explain how to create a React component in the interview, you're done. But if the "Personal Interests" section on your resume (or your "Objectives", or whatever) says something like "Learning React in my spare time", then you didn't just tell me "I'm a junior", you told me "I'm a junior who is motivated to do what it takes to stay on top of the latest technologies". Again, awesome. I think most programmers make at least one language/framework change in their lifetime, and that's particularly true for Javascript where the vast majority started out in server-side programming. No one will be bothered by the fact that you went from PHP =&gt; JS. If you tell your story right ("I'm an awesome programmer who's done awesome things, including mastering a new language"), and honestly communicate where you're at ("I still just learning React, but give me a chance and I'll master it quickly") there are LOTS of jobs waiting for you. At least here in Silicon Valley. P.S. In the interview DO NOT FALL in to the trap of feeling inferior and apologizing for your inexperience. In my experience if you just do your best to answer technical questions, and when you can't say something like "I never came across a problem like that during my time at Foo Corp", you'll seem much stronger than if you go in with an attitude of "I'm not qualified for this and I know they'll see right through me."
https://github.com/getify/You-Dont-Know-JS
React feels like html in JS, Vue feels like JS in html. I prefer React and using standard language constructs instead of v-foreach and things like that. But again it's all preference.
I'll be installing this the second I get to work. I've been waiting for this functionality for ever on npmjs.org.
Vue is still just the View layer, Angular continues to be MV*.
Maybe I'm dumb but I thought even node would be rejected from cross domain calls?
you most definitely need knowledge of plain JS to use Angular effectively.
It really really depends. Having React chops in this day in age is very employable, and you can learn a lot of the nitty gritty later. That being said... even with a casual glance, Vue seems very straightforward to use.
"Just to be safe, let's make sure we keep access to all code we've ever written. The database is invincible, so we don't need to worry about it. Make sure you don't write any comments guys."
Not left pad. It’s also right pad 😃, Also, it has more tools: substring, length, etc.
codecademy's JS and jQuery tracks + half of that goofball Angular course from codeschool + learncode.Academy's Modular JS playlist on youtube was enough to land me a part time position that turned into a bangin' full time position. I'm still yet to read any actual JS book, but I've got a stack waiting. 
Unless the class is on web application, it should not teach Angular, Express, Spring, Django, Rails, or any libraries. There are more to software engineering than web application. It should however teach map/reduce/filter like how if/else/for/while are taught. It should teach currying, partial application like how inheritance and polymorphism is taught. 
Hey, so i made a [dbmon benchmark](http://thysultan.com/examples/benchmark.html). At the moment on my machine it tops the 34-42fps ballpark vs 46fps(mithril rewrite), i want to implement your suggestion though i still don't understand it, how is mithril doing this. &gt;In a nutshell, doing element.childNodes[i] can be slow if the underlying data structure used by the browser is a linked list. and in general, accessing a NodeList is not as fast as accessing an array. Most of the high perf vdom libraries (mithril, inferno, kivi, snabbdom, etc) keep a reference around to each element instead of reading from the browser's NodeList. 
Cool library and idea -- we use a similar tool we built at Metric that we call Pixel Condom when we can; but there are many cases where what the intended use for the snippet to do is have control over the page (cases like Optimizely for example). In those situations, it's impossible to work around the risk if you want to use it.
....... it's hard to imagine a dumber system.
This sounds like a ripoff of BobX. 
The posted page did not set a language via HTML Meta-Tag or with the [SpeechRecognition](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition) so it falls back to the browser language, german in my case, and the english example "I like turtles" sounds stupid. [Test yourself](https://translate.google.com/?source=osdd#de/en/i%20like%20turtles) by pressing the speaker icon on the left side
Oh I see. Thanks, my bad.
[what the...](https://media4.giphy.com/media/bQYwIx0wvg8sE/200_s.gif)
Sweet Jesus, my blood pressure...
/r/thathappened
Write a proxy. Server side code does not have the same limitations as the browser.
BOFH couldn't have made up a better situation.
 require('hz')(http_server); This line executes the function being exported from your hz.js file. You don't need to set the return from that function to a variable unless you're going to need to use whatever is returned from the function. This is the same as if your were to do: (function (http_server) { //...Whatevs })(http_server);
It was modified from a previous for loop where it didn't work properly without the `(function(i) {...} (i))`. Anywho, I'll go ahead and update it asap. Thanks for the heads up!
You need to post the code here with proper formatting. function fourSpacesBeforeCodeLinePlease() { } ``You can also use backticks` `
I'd like to try out Vue. I really like Riotjs. 
A byproduct of shitty "senior" software developers or self-declared "architects" seems to be over-engineering things then a refusal to acknowledge it's absurdity. KISS you nerds!
playing around with running this, I can get the web app to run but not having done a lot with node and am not sure you run the other processes. 
I don't see anything wrong with it?
That's a security nightmare. 
“I think our course of action is pretty clear. Tom's software doesn't allow comments so he's probably not our best resource, and Jake is merely following industry standards, which caused our database to corrupt. We have to fire Tom.”
This is pretty much the kind of architecture (well, maybe not this bad) I think about when I'm in an interview and one of the interviewers says "we only hire the brightest, the best out there. We need someone who can keep up with amazing ideas." I'm thinking... so you need a mind reader to pick through a decade of garbage code by garbage programmers that have come and gone because they couldn't work with your one, way over paid senior who feeds you bullshit on a daily basis. 
&gt; v-foreach *v-for 
Seriously, it'd never work with subversion. ...but if you were to use git... illberightback.
That reminded me a bit of the [Storray Engine](http://thedailywtf.com/articles/The_Storray_Engine), but that's another level of overbadengineering.
Or es7 or es2015 or es2016. Holding out hope for es2017. 
This happens so often, especially with PHP projects lately. We could have done this simple task with one class and about 20 lines of code. Instead it's a hierarchy of 5 classes and 20 methods following the single responsibility principle, with an interface, "domain-driven design", and every tasks carefully isolated for code re-usability so that any of the classes could be swapped out so that it follows all the academic concepts of good software. Except in reality no one ever does, or realistically could, "swap out" any part of it. It took 10x as long to write it that way, it's harder to understand, harder to maintain, and takes tons more work if anything has to be changed. And in theory that was all done to make it easier to maintain. Except in reality, it will never be as easy to maintain as a simple class with 20 lines of code that gets the job done in a simple way.
A couple simple questions I have that OP didn't originally state: What is the goal of the code? `smallestCommons([18, 23]);` =&gt; 6056820 is this expected behavior? 
But Tom is a genius.
Ok, added .js ,commented a bit more and deleted unneeded stuff. I didn't think it was needed as i thought the problem was easy.. I just needed loop help, it doesn't matter that much if you know what's happening in the loop, or at least i thought so.. On freecodecamp you just copy paste code in chat and someone answers, i guess i was spoiled a bit!
Someone before told me that it's better to not post big code on reddit, but on outside website.
Much better, but still missing the overarching purpose, missing good names, and not correctly indented. The reason I ask for this stuff is that I'm trying to understand your problem as a whole, so that I can give you the right answer in context. The right answer to exactly what you've asked is `if (div &gt; 1) x = 0`, but of course that doesn't help you. Doing these things doesn't just benefit me, they're necessary steps to writing good code in general. They will help you understand your own code too. What is the goal of this code?
"I'd also like to add that Tom is not cool under pressure as was just witnessed."
The number is chosen, number gets tested against primes, if there's more than 2 divs which means a new list is made, reset the x so it starts from start again. Edit, i fixed it with black magic.. i tried putting x=0, didn't work, so i put x=x-5; 
It's hard when you have to work with impossible people who don't understand your genius und ruin what is obviously a perfect system. The very fact that the newbie fucked up shows that he is no good.
Damn, and i get confused over a page long code.. I hope this is something you slowly get better at! 
The number is chosen: Do you mean you're iterating through the array passed in as an argument to the function? You have a list of repeating primes, perhaps you'll want to generate them dynamically in the future? What are the lists for? What is the expected return value of the function? (Same question as "What is the goal of this code?" in this context.)
Ohh i think i know! I set x = 0, then it x++ and it goes to 1 instead of 0, so to fix this i set it to -1 and it works amazingly! Sorry for the troubles all! 
Sorry, i fixed the issue but: i could generate them but i didn't think it's needed as i made a prime generator like a few hours ago, and the lists are for storing the numbers, 1 for the numbers which are divided, the other list is for numbers which are the divisors. This is for simplicity as list gets erased every loop as the numbers have to change. The return value is calculated with a for loop by multiplying all numbers in both lists.
I'm sure it executes the text in the comments, too. It presumably doesn't bother catching or logging any error conditions, either. 
Am I violating intergalactic law if I don't assign that exp? I feel like I am not doing it correctly, you know?
That was one of the biggest flags for me, -how is this code being parsed that comments aren't being treated as comments?! In what universe does that make sense? Also it's not Jake's fault that "comments break the system" was never communicated to him, but sweet Jesus, why on Earth would the ability to comment not be a safe assumption... this story broke my brain.
You're awesome. Send a pull request and I'll for sure add in Johnson
The linchpin 
Although backbone is older than Angular, it seems like backbone will be around longer. Whenever I see a team that uses Angular I always get the feeling they regret it but won't admit it given the cost of switching. It's like when John McCain was asked about his choice of running mate Sarah Palin(after months of destroying his campaign), you could tell he was suffering inside when he said "I have not regrets". Angular is like a Trojan horse of unproductivity, that works well at first, but the cancer starts to sprout up as the project grows. It is always why to be a good Angular Developer, you really need to have experience, since how to resolve the many design flaws are only apparent at scale. Most of the work in my opinion on Angular apps after a while is fixing the leaks, patching the wobbly beast and keeping the JENGA blocks from collapsing. 
&gt; Sounds like a Rails guy who picked Ember and now thinks he "knows" Javascript. Interestingly enough, after I was asked if I know Ember, he then asked me "Do you know Ruby, Ruby on Rails or Closure?" (none of which I know anyways)
Our product has a "Tom", and he built a DSL that parts of the product are written in. However: 1. Our Tom actually is as smart as he thinks he is. 2. The DSL is only part of the product, and it's specifically used to compensate for the weaknesses of C++ 3. When necessary, people just route around him when he gets apoplectic about people not doing things his way. 
There's quite a bit of that in the React docs. They're going off the notion that you already (a) know javascript fairly well, (b) have written web applications before, so all they need to do is show you how the DOM api differs from React (e.g. they tell you how to set the event system to use the capture phase; they don't actually tell you what the capture phase is ... because you're expected to know that from already working with the DOM). 
&gt;As for experience .... if you had ten years of front-end experience and you applied for a junior role, that would look weird. Aside from a situation like that, I would NOT downplay your experience. My experience has been primarily a full-stack developer that moved back and forth between HTML/CSS and PHP, for most of my career. Only then in 2013-14 did I become much more involved in JavaScript with a project that is JS heavy in the front end. Prior to this, most of my JS experience reached little beyond using jQuery. By the way, I was really close to getting a React job because a smaller company wanted to take a chance at me, but they changed their mind at the last minute. Actually, it felt like they changed their mind *past* the point where they said they would offer me work which is worse. I was interviewed a month ago for a front-end role that would require using React a whole lot. I thought I got the job for sure, because following the interview, he'd ask hey are you willing to work remotely for a while since that's how your las job was? I said yes, so later we had a phone conversation and then an online meeting last Monday. He followed up with a todo list by email and then I told him to send me the contract and terms of employment since I won't begin my work until that is filled out and done. But he didn't reply for the rest of the week. I felt ghosted. So it really felt like he had second thoughts. Indeed he did, when I called him this week he said he's changed his mind on the remote work, but since I'm looking for an offer that's "something he would look at closely". I later told him okay, I can just work in the office as originally planned. I asked him how soon can I start. Then yesterday he said that they're not able to offer me a position at this time. That is the most wavering around between getting to an offer and a rejection that I've seen from an employer. It really sucks man, this has been the most I have to show for 18 months being unemployed and of looking for work. It makes me really feel like I suck.
Never underestimate people's stupidity. 
Godfrey tried to make a few things clear in the blog post that could perhaps use further illumination. Application performance is incredibly complex. As the Ember team has shifted to focus more on performance, we've learned over and over that what you see in the lab, or in this case in dbmonster, doesn't always map to your application in such a simple way. Our goal is to improve real-world Ember application performance and not just the performance of demos. It isn't helpful for us to say "rendering performance is 10x faster" if it only applies to applications that use Glimmer without Ember, or applications tuned to avoid trouble spots a new developer wouldn't know to avoid. So to have meaningful numbers to share and improve, we need to profile real applications and not demos. To run real applications, we need to focus first on compatibility. That is the goal of the alpha. We need app developers to try using the alpha so we can make sure there aren't any semantics Glimmer2 has wrong. After we're sure the semantics are right, we can iterate on optimizations knowing that our tests have captured all the behaviors Glimmer must support. A blazing fast Glimmer2 would be worthless if it wasn't also a drop-in upgrade for the thousands of Ember applications in production. We need help from application developers to do that, and we will ask for that help even if it doesn't make as exciting of a PR story. A few other items: There have long been several demos in the Glimmer repo: https://github.com/tildeio/glimmer/tree/master/demos though they don't necessarily relate directory to Ember performance. Tom and Yehuda presented some Glimmer2 perf numbers back in March: https://youtu.be/OInJBwS8VDQ?t=44m59s Cheers! [edit] fixed the video link
Not like there's huge usage... some biggest websites use it.
Who would seriously expect there to be any reason that a comment would fuck anything up? I mean really, that's the whole point of comments, to insert something into the code to explain what's going on without fucking anything up. 
Hmm, so it sounds like some of what was working before (which was totally "accidental," because I wasn't on about history quite yet) was sort of a fluke of things already in place in browsers, but not implementing it correctly. I'll check out the links and terms you've mentioned, and see what I can do with those. thanks! :)
I'm not saying that's the whole project, I'm saying 20 lines to perform some task. All of those techniques are useful for some situations in some types of projects. Complicated problems sometimes need complicated solutions. And sometimes you really do need code that is flexible enough that you can swap out parts of it at any time. But often people strictly follow those techniques in every situation as if they're rules, and they never step back to think about whether it's really making their code simpler or unnecessarily complicated. I used to try to follow all those coding techniques, but I eventually learned to use them when necessary, and otherwise just write simple code that gets the job done and ends up being easier to maintain too.
I'm going to guess it's based on a true story but heavily exaggerated. I've actually worked for a Tom-the-genius who made his own software platform surrounding a superset of JSON... so I'm not totally surprised. But yeah like most Daily WTFs the stupidity has probably been turned up to 11.
Writing TypeScript in Webstorm, I don't even need to write some imports. I simply reference a type in my code, it auto-completes, and Webstorm automatically adds the imports statement. But I see what you mean.
“[Speaking JavaScript](http://speakingjs.com/es5/)” may be helpful (disclaimer: I’m its author). It’s free to read online: * Constructors vs. prototype chains: http://speakingjs.com/es5/ch17.html#constructors * Environments and closures: http://speakingjs.com/es5/ch16.html#environments * Hoisting: http://speakingjs.com/es5/ch15.html#function_hoisting * `call()` vs. `apply()`: http://speakingjs.com/es5/ch17.html#oop_call_apply_bind
&gt; Application performance is incredibly complex. But vdom performance is not a complex immeasurable thing. In fact, almost all cases of possible DOM manipulation can be covered by a few dozen tests. No one is asking about Ember + Glimmer 2 performance as this would indeed be more complex to assert before every legacy case is accommodated. The combo of DBMon, UIBench, js-framework-benchmark [1], ThreaditJS paint a very clear picture of the vdom performance landscape (where Ember is typically dead last). Saying that *Glimmer 2* benchmarks are premature "because Ember" seems like a way to avoid actually presenting the numbers and focusing more on nebulous PR-speak. A video of performance in isolation from other libs doesnt allow me to run it on my hardware against other libs, which makes it meaningless. Sorry to be so brute, but a post about performance should include numbers, without making broad (10x) claims. [1] https://cdn.rawgit.com/krausest/js-framework-benchmark/4e47158a10e52122bf4244724cf99b6de4ef7ac1/webdriver-java/table.html
omfg. this exists.
This caused Jake to suffer a psychotic break. He now travels the globe just trying to get by. He goes by the name JSON Bourne.
OK thanks I will just add some logic on the server then. 
menno's approach isn't much different from your Object.defineProperty approach. Object.defineProperty is just a complicated way of saying this.something = value. menno's example just assigns the array at the very start in obj. Then in your m functions you access it as this.arr. You can use the same array it started as or re-define it with another assignment in in m1 if you want. Doesn't matter. What matters is that its stored in a persistent value thats tied to the obj object. So any method called from obj can access it through this.arr as though it were defined in its own scope with var. This is what oo is about - having encapsulated objects of data and behavior (methods) that work together. Your data (arr) is stored in the object and methods on that object can all interact with that data at any time through the this keyword.
You poor bastard. 
dont you dare, you sonofabitch!
I like this comment! Truth is, everybody gets confused by code that's over a page long. That's the metric actually, you're supposed to try to keep your functions to what can fit on a page. But you do get better: you get better at breaking up more complex problems into pieces that can each fit on a page.
But I don't know how I define that array inside the object. Can I show you my actual code? I didn't want to do this because I thought it could distract people here from my question so I tried to abstract it. It looks like this: var Box = (function () { var privateId = 0; return function() { privateId++; this.id = privateId; this.something = 1; this.isSomething = Math.round(Math.random() + 0.3); }; })(); var app = { createArrayOfBoxes: function(howMany) { var arrOfBoxes = []; var i; for (i = 0; i &lt; howMany; i++) { var box = new Box(); arrOfBoxes.push(box); } return arrOfBoxes; }, addBoxesToDom: function(elem) { var howMany = this.getValofSelect(); // that's a method I defined later - it just checks user input var i; var arrOfBoxes = this.createArrayOfBoxes(howMany); Object.defineProperty(this, 'arrOfBoxes', { value: arrOfBoxes, writable: 1 }); for (i = 0; i &lt; howMany ; i++) { var box = document.createElement('div'); box.className = 'box'; box.style.backgroundColor = arrOfBoxes[i].isSomething == 1 ? 'green' : 'red'; box.style.minWidth = this.boxSize(); box.innerHTML = arrOfBoxes[i].something; elem.appendChild(box); } }, //and rest of my object, and after that event listener, that executes app.addBoxesToDom after user clicks on a button So basically the array is populated by objects created via object constructor. How could I do this with: arr: []; 
If you care for your resume, then definitely ReactJS. The community and recognition are just huge compared to unknown VueJS. 
There's no way this is real. Someone had a bad dream and decided to write it down.
I'm still trying to wrap my head around this one. Does this mean that the functions only exist at those code revisions, thereby using SVN as a kind of OOP function lookup instead of actual *version* control? &gt; Oh, you need to revise function 568? First, you need to go into the SVN metadata...
Well sure, ~~I even say it's hindsight~~, but why not learn from the mistake? I personally think one should never push into a repository until they know exactly what happens when they do. Hooks are a part of developer culture now and ease the pains of deploying and the cost of everyone being on the same page. Edit: whoops I thought I said it was in hindsight, but I didn't...
Best library I've ever seen. Make sure you read the license.
On Error Resume Next
Well, technically...
Bele don't learn Ember it's followers are like a weird cult with Stockholm syndrome. The framework is inflexible and requires learning "the ember" way. Just google Framework performance and it will be one of the slowest out there, plus not many Jobs and Ember devs are all snobby hipsters who are terrible at programming. 
Hmm..let me consider that later. But I discovered that Ember still require jQuery, is that right ?
Looks like they used the Bootstrap CSS library.
Yes it's a huge file, and learning Ember is learning ember. . . not javascript. Ember is a dead end. Trust me I have tried pretty much all of the Frameworks and I say go with react. Here are some Tutorials to get started: [Here is one](https://www.youtube.com/watch?v=MhkGQAoc7bc) and [level up tuts](https://www.youtube.com/watch?v=PEXcg8xu2y0). There is a lot of information about React, and I personally think it lives up to the hype.
I ran it, and got 17~20 FPS on my 15' Macbook Pro with core i7... which I'd say is kinda meh for an engine that is "highly optimized". But with that number, I kinda understand why they are reluctant to include it.
http://stackoverflow.com/questions/9996665/rails-how-does-csrf-meta-tag-work https://www.npmjs.com/package/csrf if you place a CSRF meta tag on your HTML and add it to your header files, then posts can only originate from that particular browser session. $.ajax({ type: "POST", url: "/googleapi", beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))}, dataType: "json", data: {lat: latCoord , long: longCoord }, success: function(data, textStatus, xhr) { console.log(data); } }); above is some old ajax post I made, as you can see it adds the CSFR tag to the headers. I remember this problem way back when, since it was a Rails app and Rails adds CSRF tags by default. At the time I had no idea why my Ajax requests were not working, that's when I learned about CSRF Tokens
Yeah that doesn't sound super impressive
&gt; Oh, you need to revise function 568? First, you need to go into the SVN metadata... [](/twicrazy) Oh no, see, you'd just replace whatever's in the file right now with the new version of the function, then commit (creating a new revision), and then replace the revision number in the metadata with the new one. That way, you always know exactly what version of the function you're using, and can't accidentally break compatibility.
I would look into going to a coding bootcamp if you have a passion for code. If you are having fun programming right now, jump head first into an immersive program where you will be coding or learning about coding 10h per day. I cannot stress this enough from my own personal experience. You can always go back to college and get a degree, but this will be costlier and less exciting than bootcamp.
That makes me feel better, now i understand why someone who responded to me before gave me 4 functions instead of 4 loops. I'm gonna have to start using functions.
Goddamnit.
Thanks man, I am going to take another look at Vue! :)
&gt; getting in development with out a CS degree is HARD, very HARD! it is not that hard. I dropped out of CS degree in 2nd year and I was able to find a job very easily. I would advise anyone to go to college though-because it is very good for building relationships and contacts. Those will get very useful in the course of one's life and career.
Wow, thnx! Totally missed that. I very much like the events API. 
Thanks for that :)
are you just talking about the table? or are you talking about the export functionality? The table just seems to be an html table with some bootstrap classes applied. There are several libraries out there to help with exporting data to different formats, a quick google should be able to help you find some of them.
If you want to have success learning programming, you will want to learn how to figure out what these error messages mean, and how to get rid of them without having to ask someone first. If after spending a significant time researching, you are still unable to figure out what the problem is, then it is time to ask for help, "how to learn" is one of the most important things to learn in programming. No matter how good you get at programming, there will never be a time in your career where you no longer need to learn new things, so the more efficient you can learn to learn, the better you will do. Good luck, and have fun!
wow ... first alpha release and people are already demanding benchmarks ! "Compiled!! Quick, to the Benchmark mobile !"
Atwood's law: any application that can be written in JavaScript, will eventually be written in JavaScript. https://blog.codinghorror.com/the-principle-of-least-power/#%20
We can include svn tag along with revision number
I use these when I need a quick and dirty Maybe, cobbled together from various implementations like Folktale/monet.js: const Just = x =&gt; ({ map: f =&gt; Just( f(x) ), ap: y =&gt; y.map(x), chain: f =&gt; Just(f(x)).value, join: _ =&gt; x.value, concat: b =&gt; b.value ? Just(x.concat(b.value)) : Just(x), reduce: (f, y) =&gt; f(y, x), sequence: point =&gt; x.map(Just), traverse: f =&gt; f(x).map(Just), getOrElse: _ =&gt; Just(x), cata: pattern =&gt; pattern.Just(x), value: x, toString: _ =&gt; `Just[${x}]` }); Just.of = x =&gt; Just(x); const Nothing = { map: f =&gt; Nothing, ap: t =&gt; Nothing, chain: f =&gt; Nothing, join: _ =&gt; Nothing, concat: b =&gt; b, reduce: (f, x) =&gt; x, sequence: point =&gt; point(Nothing), traverse: (f, point) =&gt; point(Nothing), getOrElse: x =&gt; Just(x), cata: pattern =&gt; pattern.Nothing(), toString: _ =&gt; 'Nothing' }; const Maybe = { of: x =&gt; Just.of(x), empty: _ =&gt; Nothing, fromNull: x =&gt; x===null ? Nothing : Just(), fromFalsy: x =&gt; x || x===0 ? Just(x) : Nothing,//falsy maybe: function(nothingVal, justFn, m) {//method for applying a function to the value in a Just/Nothing, with a default result for the Nothing return m.reduce(function(_, x) { return justFn(x); }, nothingVal); } }; If I want versions with real type-yness (and better logging), I usually use the pattern from daggy.js where I create the type and then extend it's prototype: const Just = function(x){ if (!(this instanceof Just)) { return new Just(x); } this.value = x; }; Just.prototype.map = /*etc.*/ And then if I want the real deal (with working instanceof checks and subclassing) I just use the folktale/ramda-fantasy, etc. implementations.
I feel the other way round. seeing html in js or jsx in general hurts jars my brain. Vue template structure is quite similar to angular. other than that, it is easier to learn. If you prefer js in html, then vue 2.0 (currently in beta) allows you to write a render function. There is also a babel-plugin, as well, for writing jsx in render function 
Upvoted for following up my "well, actually" with another "well, actually"
It doesn't actually need further illumination. * It talks about being a compability release. * It talks about being for addon developers to start testing * It talks about glimmer2 being about the new DDAU workflow that glimmer1 was not so great at * It talks about this version having known bugs that make performance super slow I think the blog post has it all there. In no place it says "We are the fastest of the world now, start your benchmarks!". 
I know eh? I found myself with a senior role doing architecture after only a few years of professional programming. Know what I do? I keep things as bloody simple, separated, and similar to a FEW good examples as possible. The key is that I know what I'm average at and work to that.
Maybe a little background on the problem you're trying to solve? I can set X=0 without infinite looping: `X=0`. Done! :) Just a couple of sentences posing the challenge. Explain it like we've never heard of this problem before (because we haven't!)
I don't even know what x is being used for. I have no background on the problem you're solving.
I don't understand the benefit of this over your typical `var x = y || "default";`
`56.77834,-83.473874` and `-892.89289,88982944` are only 19 characters. If you mean that you want to match `56.77834,-83.473874 and -892.89289,88982944`, then please explain what criteria you would use to *not* match, for example, `accurate geographical coordinates`. --- For the problem as stated, you could split the text on whitespace and then find any substrings that are at least 30 long. This would make it easier to enforce further restrictions in the future: function isLocation(text) { return typeof text === 'string' &amp;&amp; text.length &gt;= 30; } var locations = text.split(/\s/).filter(isLocation); You could also use a full-regex solution to look for unbroken sequences of non-whitespace which are at least 30 characters long, but even though this is a one-liner I would tend toward the first option for readability and flexibility: var locations = text.match(/\S{30,}/g); 
So you need to find the coordinates from a string? `/((?:-|)\d+\.\d+),((?:-|)\d+\.\d+).*((?:-|)\d+\.\d+),((?:-|)\d+\.\d+)/m` Something like this should work. Sorry I'm on mobile so it's rough.
 var text = "this page uses...." var regex = /-?\d+.?\d+,-?\d+.?\d+/ var matches = text.match(regex) //["56.77834,-83.473874", "-892.89289,88982944"] console.log(matches[0], "\n", matches[1]) //56.77834,-83.473874 //-892.89289,88982944
The only problem here is you're not taking advantage of prototypes, so you're creating all of those functions every single time you new up a new value. If I hand roll a `Maybe` I would write it like this: const Maybe = function(val, isSome) { if (isSome) this.value = val this.isSome = isSome } Maybe.some = x =&gt; new Maybe(x, true) Maybe.none = () =&gt; new Maybe(null, false) Maybe.chain = f =&gt; ctx =&gt; ctx.isSome ? f(ctx.value) : ctx Maybe.map = f =&gt; Maybe.chain(val =&gt; Maybe.some(f(val))) Maybe.of = Maybe.some Maybe.prototype = { chain: function(f) { return Maybe.chain(f)(this); }, map: function(f) { return Maybe.map(f)(this); }, toString: function() { return this.isSome ? `Some(${this.value})` : 'None' } } 
"It makes me really feel like I suck." A few weeks ago I was unemployed. It was only for a few months, but I've also been unemployed for over a year. I *completely* understand how being in that situation drains all energy , confidence, and hope from you, and I haven't even been out for as long as you have. But here's the good news: it just takes one (offer at a decent company). No matter how long I've been out of the game, I've always managed to find that one. Today I'm happily employed (and making great money) building the web interface for a tiny start-up. I know you'll find a great job too, you just need to find "the one." The rough part I think is that once you've been out for so long, it makes it even harder. Obviously the big hole in your resume doesn't help , but I think the real killer is that you start feeling like you aren't qualified, and you unconsciously tell employers as much. Since confidence plays a *huge* part in getting hired, the only jobs you're going to get without it are the terrible ones like the losers you just described. My suggestion? Find a way to "get your mojo back." I mentioned doing a React (or Angular, or whatever) side project for a reason because: A) it will give you more experience with the framework B) it will give you more confidence, both from the experience and because you just built something real C) it will give you something to add to your resume, and to talk about in interviews. If you can build something someone else might use, and turn it in to a open source project, even better: employers *love* candidates with an active GitHub profile. Alternatively, if you can find a charity that you could build your project for, that also looks great (the story of the out of work programmer who still takes time to help a charity practically sells itself). Or don't even do a big project, just find a well-known (ideally your employer will have heard of them) OSS project, look at their issues, and submit a pull request to fix one. Or take an online (or local, if you can find one) course; it doesn't have to be React, just something applicable (eg. a software testing class). Or go to some meet ups. Meet ups can be a great place to learn cool new technologies that you can talk about in an interview. Employers want someone who is on top of their craft, so when you can explain a technology they've only heard of to them that look great. Meet ups can also be a great place to network, ie. find companies that are hiring and are pre-disposed to like you (because their employee who went to the meet-up already knows you). Or don't do any of those things. The point is that you need to figure out how to get your confidence back, because a salesperson without confidence can't sell much and you are now a salesman ... of yourself. And just as with any salesperson, a big part of the sale is the "story" you tell ("this car will save you gas/protect your children/get you laid/etc."). You have to build and communicate that story through your resume, the links on your resume (eg. to a GitHub profile, Stack Overflow profile, etc.), your cover letter, and your interviews. And once you do ... well as I said, it just takes one. Finally, I'm no recruiter or job-hunting expert, but I have led teams and hired multiple junior-level front-end programmers. I honestly can't say that my advice is worth much, but if you would like any help with your resume/cover letter/story, shoot me a PM and I'll happily offer what I can.
&gt;getting in development with out a CS degree is HARD, very HARD! I don't have a CS degree and I've gotten a job in Philly and SF. It can be a disadvantage but you just have to be able to walk the walk. Demand is still high.
[Already posted here](https://www.reddit.com/r/javascript/comments/4uwzkb/aurelia_10_is_here/)
...and by perplexing do you mean cool?
they have several modules. that's how you create frameworks these days.
I really want to upvote you, because the arguments that other people are trying to make are complete bullshit. But seriously... "java"? Also, the article clearly states where the code was stored. That's the biggest fucking problem with the whole thing. I'm beginning to suspect that neither you nor anyone else in this thread actually read the article.
TBF es6 isn't plain javascript and requires a transpiliation step to work in modern browsers just like TS or JSX.
That's pretty cool. Are you using any libraries like three.js or is that straight WebGL?
I am using the upcoming WebGL framework [regl](https://github.com/mikolalysenko/regl), which I am a contributor to. It aims to provide a fast functional abstraction for WebGL. And our benchmarks have shown that it is much faster than three.js. If you are interested, please check it out. 
I've found straight g-code easiest to deal with, all the layers and transformations usually screw something up if you are looking for precision.
For sure, I'll take a look. 
Yes. That exactly the point. My examples were really not the best ones. The idea os structures like this is mostly to have a more expressive code in terms of behaviour, imo.
I didn't say it was impossible, I was just saying it's very hard. What my experience in Chicago was job interviews skipped any Technical parts, and simply was just retelling of resume buzzwords. None were ever interesting in seeing the types of projects I built or even doing a coding challenge, just discussions of my experience. What I learned was in Chicago to get a tech job was 100% opposite of what you hear. So in the case of Chicago, degrees matter more than anything else(which is probably why Chicago doesn't really have much of a tech scene). Almost all interviews were with MBA types, so I tripped up initially assuming they wanted to know how I think as an engineer, rather than my synergy. 
Nope: that visually wraps the text inside the textarea, but doesn't insert linebreaks into the text itself. Copy-paste it into an editor, and it will be a single line. If you submit the form, your backend will get linebreaks, but that wasn't what I was after here.
You're just continuing to demonstrate that you either didn't read or didn't understand the article.
Yep even nasa satellite apps. /r/programming hates js with a passion but resistance is futile.
Update: I tried it. It has the same problem as other packages: GraphemeBreaker.countBreaks("👊🏽"); returns 2 instead of 1.
Check out [this StackOverflow answer](https://stackoverflow.com/questions/20834411/how-do-i-specify-the-time-zone-when-creating-a-javascript-date)
You don't need the `parseInt`, but yes, that should give you the hours in EST. Alternatively, if you want to display the whole date and time, you can use this: var d = new Date(); d.setHours(d.getHours() - 4); var text = d.toUTCString().replace('GMT', 'EST'); Though that will display in 24-hour time.
[MomentJS Timezone](http://momentjs.com/timezone/). Use "America/New_York" to get the local time you want. 
That would give you EDT, not EST. The east coast uses EST (UTC-5) for half the year and EDT (UTC-4) for the other half. UTC is constant and does not change in the summer. Also you are relying on the time being correct on the local machine when you do this, which is contrary to what you stated in the post title.
I just want the code modified so I can copy/paste it into my site.
Wouldn't it always get UTC hours and, in the fixed version (UTC-5(Thank you for correcting)), it would spit out EST? I don't want the clock to be displayed (I'm a fucking IDIOT for not specifying), I want it to check if the time is within a certian range, if it's sunday, if it's ssaturday, or if its a weekday.
It sounds more like you're reaching for reasons not to use React Native than anything. Sure, if you're biased enough anyone can make a checklist to make anything sound like a bad idea. But anyway, I'll try to dispel your arguments: **React Native** &gt; Good: It is Javascript and gives native UI Agreed. &gt; Bad: It is not regular web javascript. UI components are different and not shareable with web. Partly true. Quite a bit of UI will indeed not be transferable, but a decent amount definitely is. Try the React Native skeleton project. Its UI is minimal, but it can work across iOS and Android without modification. Of course, if you want to take advantage of specific platform patterns and abilities, you'll have to diverge there, but that's the price of making an app that won't feel out-of-place. &gt; Bad: Very custom framework, gathered knowledge is not very transferable to daywork or when looking for the next job (personal projects do amazing effect on interviews and best way to improve knowledge. React Native's market is kind a very small in established companies.) At least around here in Amsterdam I know React Native is popular among startups. It may not transfer to *your* current dayjob, but there are definitely ones where it does apply to. &gt; Bad: Can it really be around for long time to worth the effort and investment? It is cool now and got attention but it is not really taking over anything so far. (or am I wrong?) Both Microsoft and Samsung taking the effort to port React Native to their respective mobile platforms suggests to me there is quite some demand for it and both those companies seem to think it a serious platform. **Hybrid with Cordova** &gt; Good: Easier to find developers to contribute. Might be technically true, but I know few developers that are actually happy to work with it. To be honest, I'm pretty fed up with it myself. APIs breaking between different Android versions is a common occurence. And attempting to even slightly resemble looking native on iOS feels like continuously chasing a carrot. &gt; Good: Instant updates to app i very easy (I understand this is also possible with RN but needs some custom code and changes in the project. I tend to stay away from corner-case alterations as they are likely to create problems.) Keep in mind that your Cordova container *isn't* automatically updated though. If you're doing continuous development on your app, you will quickly discover your web code will need to be compatible with multiple versions of your container that are still out there, which can create some very real maintenance headaches. At the company where I work we had to implement our own versioning systems that makes sure older containers are always served older versions of the web resources, which limits our ability to apply updates to older containers, but at least keeps maintenance sane. &gt; Bad: UI feels a bit slower to respond (but I am not sure on this. Is it really? We can still utilize CSS to build same native looking UI. jQuery tap/tappable etc frameworks help a lot for events. Only thing left is animation. Is RN only gives better screen change animation?) Yes, it is really. Especially startup is really slow with Cordova compared to (React) native. If you think you can create a native-looking UI using CSS, you're in for quite the surprise. No matter how much you try, it'll remain awkward and will always feel off, especially as you have to support multiple iOS and Android versions. The best bet you got is just defining your own theme and sticking to that. It'll look different, but at least you can make it consistent within your own app, without creating an *uncanny valley* effect. &gt; Would you still choose RN over Hybrid by this reasoning? With your reasoning? No. With mine? Yes! :) Now, don't get me wrong, there are still valid reasons to choose Cordova. A simple lack of resources to dedicate to creating real native apps per platform being the main one. Also, if your app will use completely custom theming anyway (so no need to look or feel really native) it can also be a fine choice. But if you want native looking UI, React Native is definitely the way to go.
Yep, I've got one too: https://github.com/spencerwi/Optional.js It's more patterned after the Java 8 implementation, but same basic idea. And it's Typescript, so you can import it directly in your TS projects. It's on bower and npm.
Wish this article was around when I first started down the path of moving from Horrible OO JS to Wonderful Functional JS. Would have saved sooo much time!
Yep: I mentioned that at the end, with pretty much that example/pattern. Obviously that's what you'd want to go with for production use, though we're still talking negligible differences in most cases. But for the purposes of example, I've found that the bare-bones version is easier to start out with for explaining what's going to happen. It's shorter, no this references, and shows the same set of interfaces as clearly as possible.
It doesn't work like that using wepback that's why I was asking for help but I figured it out by myself thanks anyway :)
Well yeah, the entire raison d'etre for glimmer2 is performance and every time glimmer2 comes up around here, it's some PR-style article touting how fast it is. I mean, I'm working on mithril rewrite, which is also in an alphaish stage and I've had dbmon written and up publicly for a long time. I only started talking about its speed once I felt dbmon performance was reasonable. I don't think it's unreasonable to expect the ember team to have benches to show, especially after going on stage on a conference saying they're now faster than react.
My experience has been that webviews like Cordova suck for a number of reasons (performance, gestures, no access to platform UI components, hardware APIs), and I would highly recommend you take the native route.
Pretty awesome. Simple consise and down right cool. Question though: That tap function, seems more like a map function to me. When I think .tap, I think just run some side-effect (like setting some global state, or logging it out) and having the container throw away what my tap function returns. Thoughts?
Appreciate the thorough reply . I am an experienced web dev who's been transitioning to cordova work recently for a personal project. After doing some thorough research I have a few points based on your and OPs posts: - I believe the modern standard for creating cordova apps is to bundle crosswalk. In this instance you "should" not care about what webview your user is running. - based on what I've seen, iOS looks very simple and stripped down in terms of design in comparison to Android's material ( and for this I leverage Google's material-lite library ). Could you please elaborate on what issues you've run into when designing for iOS in cordova? I believe that to build a quality hybrid app, one requires significantly more finesse and knowledge due to the fact that most phones are much more limited in terms of hardware. Based on my research, to develop a high quality hybrid app one MUST use velocity.js ( CSS3 transitions are also great but are less performant ), offload computationally expensive work to web workers and try to limit reflows wherever possible. I'm curious whether you and your team have used those 3 things when creating a cordova app.
http://stackoverflow.com/a/3744583
Ok, so as you know, a vdom tree is a tree of objects (e.g. `{tag, attrs, children}`). In Mithril, there's also a `dom` property in the object that holds a reference to the DOM element. During a diff of an array, I often look ahead to the `dom` property of the next array item, rather than checking the current item.dom.nextSibling. The diff algorithm itself has two parts. The first is what I call the search space reduction algorithm (if you look into any of the libs I mentioned, you'll find a function called updateNodes or something like that, which has a bunch of loops, incrementing or decrementing a few index counters. Basically the idea here is to optimistically assume old keys and new keys are in the same order, until you have `startIndex` and `endIndex` variables pointing to a range of elements where they are not in the same order (and by extension, the elements at the beginning and end are guaranteed to be in the right order at this point) Then to sort the remaining elements, it falls back to the second algorithm, where you create a map of old keys and their indices, and move them to the correct place (again, here we look at the `dom` property in the next item in the array to figure out the `nextSibling` for `insertBefore`, rather than using `childNodes[i]` or `el.nextSibling` Of all the implementations, I think snabbdom is probably the easiest to grok, if you want to look at a reference implementation. Mithril is ok too, size-wise, but it's a bit more complex because it supports fragments.
This is awesome. I know how I am spending Sunday!!
Well played. Thinking this is the best resource for anyone, experienced or noob to pick up.
Personally I would say, before you jump onto tutorials, try building an idea and use [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript) as a reference. Just pick something near and dear to your :heart:. Or try to solve a problem that is relevant to you right now. Something low risk for instance, if you drink Tea, make a steeping timer. Or if you like audio, a simple float to dbFS calculator. Just pick one, simple thing and try to build it. Reason on how you would do it and then look up specific portions of it. Once you have built a couple small things like this, then you can move on to all those opinionated, single tasking tutorials that the Internets are of. Be aware though, most of those tutorials are are rants that sound like this one: [rant](https://brianmckenna.org/blog/line45)
Thanks :-)
I toyed a bit w/ RxJS and kept running into some weird issues as well. I assumed they might be related to hot/cold streams, but honestly I never really understood how that concept mapped to actually using the library in practice. I haven't looked at Most, but I looked at flyd, which is always-hot, and it "clicked" much better for me than RxJS.
I thought the whole point of cordova was that it gives you access to the hardware APIs in the form of easy to use javascript plugins, is this not correct?
&gt; I am just wondering how big the eco-bubble that is building up right now before it bursts and people realize just a firm understanding of coercion, reasonable defaults and control over your data flow is all that is needed. ... but that isn't "all that is needed", unfortunately. Static type checking has long-understood benefits, especially when used on large projects where time and money are factors. People won't "just realize" that static type checking isn't valuable because that simply is not true.
And the funny thing is, most of the sponsors where people that only 3 years ago went on and on about how Open Source software is just about the worst thing ever. HA. now people can run a bash shell on their windows boxes. Ridiculous. but i digress.
The argument you make here is essentially the same as the observation Douglas Crockford made. Many people coming from other languages look at JavaScript and have trouble seeing it as a real programming language, and therefore start asking the question: "Why is JavaScript not more like (insert their favorite language)?". It might have to do with the JS syntax being very C like, but its fundamental concepts being (almost) everything but. People therefore expect C-like behavior and get a behavior which is much more like Self/Lisp. What is interesting is that JS is flexible enough to actually allow all these approaches. What is also interesting is how many people tend to focus on the syntax (differences) instead of paying attention to the fundamental conceptual differences between languages. 
Lodash does it like this to: tap let's you intercept but will return the initial value (good for logging or something like that) With thru you can really intercept and transform the value. 
I quite like it and it seems to fit the monastic rules, but I'm not into that whole fp lingo so don't quote me on that :p Just one question: Isn't this [].concat.call(log, w.log) The same as log.concat(w.log) ?
only if log is a semigroup. Say I pass a number in as my log entry, it does not have a concat method. So this will lift whatever log is into an array so w.log can be concat'ed edit: Oh...also read and map are wrong...they should be lifted in the same manner, before being sliced. HA monastic. Good stuff there.
Yeah I am bummed about that not gaining traction. It would be nice to get something that works with JS's JIT nature. Even if typescript style declaration were to make it into the spec, you would still run into that needing to be in the code issue. But if we could focus our efforts in making something that would without major alterations to the language. even if the only thing a "transpiler" that just turns @ someFunc :: a -&gt; a into // someFunc :: a -&gt; a then it stays in the code, as you were saying, linters can pick it up, they can be run on CI before deployments etc, but the code is still the same JS. Only the compiled code replaced the @ with // Then if a system like that is up for review on the spec, then we can keep our codebase as it is ES. (like what babel does for us). It would be nice to keep close to JS and put our combined thoughts and efforts around something practical that lets us keep our codebase for years. (so far it has happened to me twice that I have seen whole codebases go away as either some library went away or the source code was in a language that no longer keeps up with ES. None of that code is recoverable, had to be rewritten. Well three times if you could the ColdFusion debacle)
For a second I thought you said Visual Studio "Code". 😒
Not really. JS is already being phased out, albeit slowly, by ES2015+ / ES6 / ES2016 / ES7 (whatever you want to call the ongoing set of changes), and TypeScript is doing bloody superb in spite of being an MS child. No resistance needed, JS is not needed on the server side, and not even on the client side for those who wish not to use it, and this is great.
Typescript is still JavaScript, sort of
I don't want to criticize JavaScript vs. another language, but please don't mistake a very low barrier to entry and instant gratification (visual feedback included) as virtues of JavaScript and reasons to love it, and look at it a means of pursuing CS. It's completely fine to enjoy coding in JavaScript (or whatever language pleases you for that matter), but for your own sake, do a little bit of self reflection - what are the reasons that you like JavaScript? Because it's too easy to start with? Or you can do fancy things in a rendering medium like the webpage? Or the syntax doesn't really tax your brain? Or there aren't too many oo concepts to absorb? Going by current trends and the fact that the web is the dominant medium right now, I feel that JavaScript gets too much love for its low barrier to entry, instant gratification nature and its ubiquity - which in itself is not a problem - I'm not a JavaScript hater by any stretch - however, that love usually comes at the expense of a much larger learning experience that gets sacrificed. So the risk is that newcomers to CS, such as yourself, when exposed to this whole JS/DOM/Libraries/Node ecosystem will likely refuse to even experiment with other things, whether academic, mainstream, enterprisy or esoteric. CS and programming is so much more than JS+web. And, since you've asked how your learning of JS will relate to doing Sofware Engineering (I'm assuming as curriculum), I'll say not by much. JS isn't a very good language to learn CS/SE with - there are much better languages that can take you through the gritty, grimy mechanics of algorithm execution and memory management, and showing you the world of patterns and object orientedness. Mark my words, they are hard for any beginner. From a CS perspective, many of my classmates (years back) got severely discouraged when the class moved from trivial arrays and lists to tries, R*Trees, KD Trees and the likes. Many dropped out. And a similar thing happened when the DIY VBScript modal-dialog superstars were struggling with implementations of certain structures in C++. The very nature of JS and the language features don't lend itself to deep learning of CS. There's a reason why universities and courses around the world have chosen other languages for decades (e.g. C / C++ / Java / Python recently.). Don't mistake my 2 cents here: By all means, continue to learn JS and the ecosystem, the present day payoff is great. But also understand what CS is all about, how universities introduce you to it, how courses have been structured for the last 2-3 decades across top universities and what their curriculum looks like etc. CS is math (not too advanced though, continuous and discrete basically), formal proof, probability, data structures and algorithms (usually done in a classical language), computation theory, compiler design / grammar etc. Very different from the JS world you are currently involved with. ------ Also, as someone mentioned about landing a job without a degree: PLEASE, for the love of humanity, don't fall for it. Your aim should be nothing less than a bachelor's from a top 15-20 ranked college, IVY League if you can. As bad as it may sound, in the industry, startups included, there's hardly any choosing between someone with and without a degree. As for big firms like MS, FB, Goog, EBay, IBanks and the likes? Your chances are squat. Terrible, terrible advice to follow. I hope you know better.
Agreed, TS is a superset, but one doesn't have to approach it the same way they would learn that unwieldy JS - scope hell, type free mess. TS introduces the same time-tested concepts for large code organization: classes &amp; interfaces (seemingly classical, but still), type and type inference, compile time checks and what not. It feels very little like old JS, to be honest. I'm not going to claim that it's the absolute best there is or there will be, but it's definitely a huge step of improvement over plain JS (wrt large codebases).
I'm all for making the language more readable and maintainable. Promise is a great step in the right direction. Still the forte of js and the reason I have grown fond of it is its functional nature. That comes very handy for async executions that are all too important in so many applications from server calls to drones/robots to doing animations. Js is much more suitable for fp style coding that oop and I hope it stays that way.
&gt; Well yeah, the entire raison d'etre for glimmer2 is performance and every time glimmer2 comes up around here, it's some PR-style article touting how fast it is. Performance is one major point, but i don't think its the "entire raison d'etre". As an ember developer, glimmer2 will allow better DDAU workflow. Also I think most people are waiting for glimmer2 to allow routable components. Sure, i understand, performance is a major point, but its useless to benchmark something this early in stage, when its "in compability and debug mode". The blog post IS NOT "touting how fast it is". But then again, I am assuming that people actually read the blog post. 
I think it has to do with Windows and C# getting less attractive for more and more projects as even conservative companies venture to make their solutions online or cross platform. Whenever we had contact with such companies we noticed their developing staffs urge to stay as close as possible to what they knew. Even if solutions were readily available, it had to be made complicated as these solutions often didn't go well with Microsofts technologies that played by their own rules. Static types were only a small part of it. This has lead to decisions like TFS instead of Git, Nuget or manual deps instead of npm, Azure instead of AWS, Asp.Net instead of Node, SignalR instead of SocketIO, Angular 1.5 instead of React, Typescript instead of ES6+Flow.
Also, if you do want to do web, you can use webviews within react-native, so you get the best of both worlds.
https://crossorigin.me for small non-public projects 
a note for microsoft's PR team: You've crammed too much of your payload into the title here. "Love", "Random", "Honest"? Normal users of this site don't put so much effort into their titles. It's usually just a provocative quip; something like "typescript team getting love".
One of the other front end developers I work with and I have been mulling over whether typescript is right for our team. We use a lot of custom constructors for immutable maps, and then a lot of "if (obj instanceof UserRecord)" so it would seem to make sense.