Nothing mindblowing really, but I just learned how to do an image parallax 3 days ago hahhaahhahahahahha
I guess, the one you copied is the \[ngTemplate variant\]\([https://angular.io/api/common/NgForOf#syntax](https://angular.io/api/common/NgForOf#syntax)\) which is never used commonly, but it's worth documenting. Just right above that is the example I suggested, `&lt;li *ngFor="let item of items; index as i; trackBy: trackByFn"&gt;...&lt;/li&gt;`
Went the same route as OP and just landed a job. GitHub you can feature programs. A lot of people I talk to like to see a consistent commit pattern. If you're working on code you're probably committing. It shows them you understand git and are consistent. I chose the projects to feature that I'm most proud of. A few group projects and a few independent projects. 
/u/madwill I think it's exactly the opposite :D Gatsby has more powerful and a bit more complex API, for reason. It's has very good builtin support for GraphQL and basically almost everything is built around that. Next.js just feels for more static sites, which not means you cna built full-blown react app with some custom stores and external APIs and services.
Can u please explain it a bit more? SetTimeout does execs after the stack is cleared, i get that but how does that guarantee order and make sure that one function is executed after the previous one resolves? I'm a bit newbie so might not be aware of this.
The usual answer is to turn a recursive function into an iterative one instead. Have you tried that?
Is there a TS version of this? :D
that looks really slick. gj.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
If I had to start from scratch the first thing I'd probably do is make a [hyperscript](https://github.com/hyperhype/hyperscript) clone.
ha ha no problem man. when u are free take a look at it. If i can just get an idea of how to make this iterative instead of recursive, that would be great. 
I wouldn't say never. Quite often my changes are small and self-explanatory. But fairly often there's more than meets the eye and in those cases I'll use commit messages for their intended purpose. A change might involve altered logic/refactoring, or it might be that I learned some fact that invalidates previous code, or I learned a better way, or requirements changed, etc. 
What kind of questions you asked? If you asked basic technology questions like ‚Äùwhat‚Äôs the difference between div and span?‚Äù, these questions you should not ask but google yourself.
`map`, `reduce` and the other built in array methods are more concise, which makes it easier to understand what the program does as a whole. They also express intention, if I use a `map` then you know that those values will get used somewhere else. Loops are very simple to understand but they're so generic that its impossible to tell what the intention of the loop is without reading each line. If you understand `map`/`reduce` then this cost totalPrice = shoppingCart. filter(({ inStock }) =&gt; isInStock). reduce((sum, { price }) =&gt; sum += price, 0); will communicate the same idea as the loop below in fewer more specific words. let totalPrice = 0; for(let i = 0; i &lt; shoppingCart.length; i++) { const { inStock, price } = shoppingCart[i]; if (inStock) { totalPrice += price; } }
I see people all the time using react components for headers, or using react to update form fields... It's wildly unnecessary. People don't generally do the same thing with angular because of how opinionated angular is about how you build your page. You can't just sprinkle a little angular into your website.
On a whim I decided to look at Vue's Reactivity and Observables implementation after spending at hour looking at React's (*good. lord. It's intelligent but the architecture to their code is mind-boggling.*) Check this out dude, this is pretty much (*I believe?*) it: **Component initData -** https://i.imgur.com/Mu8iWZ1.png **Observe function -** https://i.imgur.com/KfkVtH0.png **Observer class -** https://i.imgur.com/pQeKDdH.png **Okay, now you ready for React?** The actual process of reactivity/rendering, if I'm understanding correctly, is spread out into tiny functions from three massive, separated files. Here's a teaser: /** * Sets a subset of the state. Always use this to mutate * state. You should treat `this.state` as immutable. * * There is no guarantee that `this.state` will be immediately updated, so * accessing `this.state` after calling this method may return the old value. * * There is no guarantee that calls to `setState` will run synchronously, * as they may eventually be batched together. You can provide an optional * callback that will be executed when the call to setState is actually * completed. * * When a function is provided to setState, it will be called at some point in * the future (not synchronously). It will be called with the up to date * component arguments (state, props, context). These values can be different * from this.* because your function may be called after receiveProps but before * shouldComponentUpdate, and this new state, props, and context will not yet be * assigned to this. * * @param {object|function} partialState Next partial state or function to * produce next partial state to be merged with current state. * @param {?function} callback Called after state is updated. * @final * @protected */ **React Component Base Class calls ` enqueueSetState`** https://github.com/facebook/react/blob/9ea55516e674c2de63b9f7829e3c459f3cb3cf78/packages/react/src/ReactBaseClasses.js#L28 Component.prototype.setState = function(partialState, callback) { invariant( typeof partialState === 'object' || typeof partialState === 'function' || partialState == null, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.', ); this.updater.enqueueSetState(this, partialState, callback, 'setState'); }; **This function is provided from `ReactFiberClassComponent.classComponentUpdater`** https://github.com/facebook/react/blob/73f59e6f3152f0579625ecd50caa936920c8e5eb/packages/react-reconciler/src/ReactFiberClassComponent.js#L174 enqueueSetState(inst, payload, callback) { const fiber = ReactInstanceMap.get(inst); const currentTime = recalculateCurrentTime(); const expirationTime = computeExpirationForFiber(currentTime, fiber); const update = createUpdate(expirationTime); update.payload = payload; if (callback !== undefined &amp;&amp; callback !== null) { if (__DEV__) { warnOnInvalidCallback(callback, 'setState'); } update.callback = callback; } enqueueUpdate(fiber, update, expirationTime); scheduleWork(fiber, expirationTime); }, **Finally, following the massive function chain of enqueueUpdate and scheduleWork, we arrive (I think?), at this:`ReactUpdateQueue.processUpdateQueue/getStateFromUpdate`:** https://github.com/facebook/react/blob/73f59e6f3152f0579625ecd50caa936920c8e5eb/packages/react-reconciler/src/ReactUpdateQueue.js#L486 // This update does have sufficient priority. Process it and compute // a new result. resultState = getStateFromUpdate( workInProgress, queue, update, resultState, props, instance, ); const callback = update.callback; if (callback !== null) { workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render. update.nextEffect = null; if (queue.lastEffect === null) { queue.firstEffect = queue.lastEffect = update; } else { queue.lastEffect.nextEffect = update; queue.lastEffect = update; } Please correct me if I'm mistaken here anyone. I'm not React expert and the source was incredibly difficult for me to follow.
I've been looking for something just like this for a while. Looks good... thanks!
Most engines use a hidden timeout "stack" or queue and pull when the main thread is empty. Guarantee order? No. Probably in order? Yes. You can always make your own array of function pointers / data and use the async promise to pop off your own stack on completion I suppose (and make a new promise)... Are you sure the promise is the bottleneck? The whole point is to free up the main thread üòï Could you instead so your processing in a web worker and get off your main thread entirely?
Maybe I'm missing something, but wouldn't something like this work? const exec = async () =&gt; { while(this.queue.length &amp;&amp; this.queue.length &gt;= 0) { try { const result = await this.queue.shift()(); this.results[result.id] = result.retval; } catch(e) { // handle errors here. } } const finalRes = this.results; this.results = {}; return finalRes; } 
you'd better of implementing element-wise division yoursefl.
Despite being part of the standard, the only browser that actually implements TCO is Safari.
I'm not entirely sure I understand the problem is, but I think you're trying to execute a queue of asynchronous functions in order? If so, async/await to the rescue: async function exec(queue) { let results = {}; let job; while ((job = queue.shift()) != null) { try { results[job.id] = await job(); } catch (err) { results[job.id] = err; } } return results; }
From my experience, your time would be better spent reading tutorials on technical writing (instead of reading real documentation and trying to figure the rules out yourself). If I had to choose one thing, I‚Äôd say empathy is they key to success. When documenting something, it‚Äôs useful to re-read your docs assuming you know nothing about your own project and see if there are any bottlenecks. 
No the catch is for if the executing function rejects, we capture that in the the results.
Yeah that looks good. I actually used lodash's find/findIndex a lot at my last job, as we had to support IE10, and as far as I know we weren't using polyfills (because I had to switch somebody's `Object.assign` to `_.assign` to solve a bug in IE once)
Ah ok... then you shouldn't use recursion at all of course ;-)
I didn't
FLIP technique for basic animation stuff. Can have a look [here](https://aerotwist.com/blog/flip-your-animations/)
Yes ‚Äì I actually published the results a few days ago. Here's the link \&gt; [https://ashleynolan.co.uk/blog/frontend\-tooling\-survey\-2018\-results](https://ashleynolan.co.uk/blog/frontend-tooling-survey-2018-results)
npm shitpost.
Oh another "comedian"
Unfortunatly it's already taken
correct me if im wrong, but this executes the function in order but is the returning in order too? for example consider a scenario, where i want to perform 30 different set of operations on a DB each by one function in the queue. Now executing the functions in order is not enough, fn 2 has to make sure fn1 is completed and resolved before it can start.
That's because the scope of each function needs to be kept in memory. Can you use async/await? If yes, you can simply use a for/while loop to map over your array of promise creators, await each and do your logic. 
I'll see if I can try that. Ty!
No, the await keyword makes the complete async function stop, until the promise is resolved or rejected. 
Ty for the info! I'll see if I can rework it.
Yes, that‚Äôs what the await keyword does. const result = await fn1(); //wait for fn1 to finish executing fully and store response in result return fn2(result); You can read the code synchronously. await will resolve the function before moving to the next line. This assumes your function waits for the DB operations to complete before resolving. 
so this means that the functions in the queues are independent and although they are executed in order and wait for their respective previous functions to complete, there is only one function(from the queue) in the stack(disregard the callee tree)?
and this won't block the main thread? the UI?
Correct, there will only be one pending request. 
async-await is a cleaner promise syntax, so no, it wouldn‚Äôt block the UI thread. If your current code doesn‚Äôt block the UI thread this won‚Äôt either, it‚Äôs just an iterative version of your recursive function. 
A static NodeList isn't predictable - it doesn't track the removal or addition of child nodes.
Also, while DB calls are non blocking, if you‚Äôre doing any kind of image processing or other CPU intensive tasks client side (or a node server), this would be blocking. You should consider offloading to a web worker to unblock then. 
If we are to help you more, we probably need a snapshot of your setup, or at least your service worker along with its configuration.
Nop, no TS version jet, but you are welcome to fork this one and create the TS version :) 
"...the new API is only available in Chrome 66+ and only copying/pasting of plain text is supported." But isn't everything _truly_ plain text? Which leads me to another question: how are fonts and text styles captured? And also wasn't clipboard capturing considered to be a security vulnerability?
Damn, time flies...
&gt; Why? So that you could monetize a secret 1-line formula, for example, without fear that the end user can rip off your secret. But you need to give the end-user access to that formula for him to be able to use it. And what stops him from ¬´ ripping it off ¬ª one he has gotten a license, especially regarding interpreted code such as javascript? Cryptography is no magic silver bullet... &gt; This introduces a new problem: how do you stop malicious code, if you can't see it? How can I trust your "secret module" if I can't see its source code? &gt; &gt; We have a simple model for solving this problem: requesting/granting access permissions, such as with mobile apps. Does a module need access to the fs? Can the module make network requests? In a javascript environment, module contexts can mix. There's nothing stopping you from accessing the approved `fs` module of another module from yours that doesn't have that permission, short of reimplementing a module-sandboxed javascript runtime...
Why do the links need to be PDFs 
you are right. Please see my edit.
Thank you man I fixed it. please see the edit. In the end its just a bug from my side. :(
The only link you need: http://lmgtfy.com/?q=nodejs+twitter+bot
What's the source for `application` or `callForHttpStatus`?
I really wonder if this bot actually needs to do anything beyond looking for [github.com](https://github.com) links ;\)
suggestion: wrap whatever they type in something like this and execute it: `const val = (() =&gt; &lt;&lt;code&gt;&gt;)();if (val) { console.log(val); }` That way if they just type `5*5`, it'll still output `25` without needing the `console.log`
Connection.query is asynchronous, which means that it will take some amount of time for it to send a query to the database and then receive a response. JavaScript doesn't care about this, its job is to evaluate code line by line until it reaches the end of the code. If you look at connection.query, you can see that it takes two parameters, the first is the query itself, the second is called a callback, which is a function that connection.query will call once it's received a response from the server. JavaScript doesn't wait for this callback to get called before continuing on to your console log. So the order of operations here is: - send the query, register the callback - log the contents of the array (which hasn't been populated yet) - call the callback when the response is received, populate the array It's important to note that even if the server returned its response immediately, that would still be too long for JavaScript, because of how the event loop works. But that's a fundamental concept you should look into on your own time to better understand asynchronous code. It's also a pretty classic interview question, so it's good to understand it. So, how do you fix it? Move the console log to the inside of your callback. Better yet, move your console log to a function that's called by your callback, keep things separated and well organized, and testable.
I certainly like this idea, but maybe as a toggle-able feature. the "setTimeout" in his example does it's own console.logging. 
Either put the nested route inside the component being rendered or use the render prop and render it alongside the component you wish to render
Not really recent, but I found out about the + prefix operator. Add + to a variable to get it's integer value. let x = '001'; console.log(+x); // 1 int
&gt;I certainly like this idea, but maybe as a toggle\-able feature. the "setTimeout" in his example does it's own console.logging. What I suggested doesn't prevent this, it just also logs the last statement value
It‚Äôs probably worth reading up on asynchronous programming in general. What‚Äôs happening is you‚Äôre executing the async operation and since it‚Äôs async it resolves when it resolves and not in line with the typical flow of your app. So what‚Äôs happening is your console.log is being called before anything has been completed by your async operation, as you already noticed! Async/await is probably what you want but there are loads of ways you can handle this. You should first place any code you want executed after your async operation inside the callback, since that callback will only be called once the async task is complete. After that you could look at converting it into a promise, from there you can use async/await or just chain promise methods. Streams are another way of handling async tasks if you‚Äôre using Node. Anyway, you can convert callbacks to promises in multiple ways. Node has a built in utility for it. You could also wrap your function in a promise: function somethingAsync () { return new Promise((resolve, reject) =&gt; { connection.query(‚Äòsome.schema‚Äô, (err, data) =&gt; { if (err) { return reject(err) } resolve(data) }) }) } Then you can just await it inside an async function: async function foo () { const query = await somethingAsync() console.log(query) }
Yeah I agree. My guess is you want to learn fundamentals and improve your JavaScript knowledge, but you can still do that even if you use a framework. It's not like the framework writes your code for you, there are still so many things you can do wrong or right within the context of a framework like angular and react. Learn a framework so that you can market yourself and tap into a community that you can learn from - then write good and clean, tested code within it. You'll become a better programmer.
Full disclosure ‚Äì I'm the author of this package. Please let me know if you have any comments/questions about it!
ya I was looking into web workers for this task, but it seems overkill as im just downloading files. So basically this is an electron App and I hit an API like 300,000 times to download 300,000 images and store it in disk. This is more like an internals tool so we dont care if it takes days or weeks to do. but all we want is the app to run without crashing. So do you think this method is fine? or should i ultimately do this with web workers?
I have to disagree. I think both approaches work, but with your example the second can be simplified to: let totalPrice = 0; for(let item of shoppingCart) { if (item.inStock) { totalPrice += item.price; } } While I love the new ES6 features, they are not always easier to read. The number of stacked parentheses and brackets can be tough for new developers or people coming from other languages. Plus you have to create two anonymous arrow functions. It might be telling that your filter/reduce example contains errors while your loop works perfectly.
Sounds like we're cut from the same cloth - hitting 8 years for me, also technical lead, and we seem to live by the same advice. &lt;3
What does it offer over eslint and tslint?
Sort of, depends, but I have seen plenty of examples of companies that are just kinda crazy, and the people let go were smarter than thone that fired them. Getting fired hurts, but it might not mean a damn thing.
It's actually a wrapper around bothESLint and TSLint. It's similiar to [xo](https://github.com/xojs/xo) or [standard](https://github.com/standard/standard) if you're familiar with those. However, getting Flow/TypeScript support with either of those can be a pain. If you're asking why you would want to use `lynt` instead of just using `eslint` or `tslint` directly, I suppose the answer would be similar to the reason why some people choose `parcel` over `webpack`. It's a lot more convenient, you don't have to worry about configuring linter settings, and you don't have to deal with context switching when going from `eslint` to `tslint`. Whether your codebase is plain JS, Flow, or TypeScript, you can just use `lynt` and put flags for whatever you want. I made this tool because I had to deal with a lot of that context switching. I went from JS only ‚Äì&gt; Flow and recently I've switched over to TypeScript. I've had a decent amount of pain points along the way due to issues with `babel-eslint` or TSLint setup with `--project` and switching from my usual eslint config to TSLint. I think a project like this would be good for people who are newer to Flow or TypeScript and they dont want to spend a lot of time figuring out how to get ESLint or TSLint to play nice.
The main reason not to use jQuery for a javascript driven site is that you really don't need to. jQuery was great as a compatibility library but it's not really needed anymore. You can query selectors natively in modern browsers and create elements and all that jazz. If you're going down that route just use native JS. At the end of the day though, jQuery is just a DOM accessing library so any downsides that apply to rolling your own framework apply to jQuery
Vue is a much better solution than jquery for adding dynamism to a page. You can use vue as a regular js library without bringing in a bundled like webpack, I use go a lot on the back end, but vue is just much better for front end work IMO
i like it. i have it installed and will keep it for awhile. I'd love it if it had a global shortcut, and a shortcut command to run the script. thanks.
The advice I saw was that the `-m` flag puts you in the wrong frame of mind. If the change *doesn't* warrant further explanation, then that's great. But you're tempted to bang out a short message when you use the `-m` flag, which is what I was abusing. You have the learned wisdom of when to use it and can ignore the "never" advice. I do not. :)
In short, it's adding kilobytes of Javascript that has to be both transferred and processed by the browser and it's just not necessary. And minimally helpful at this point.
This is incredibly confusing, what is `hello`? You seem to be assigning it to nothing?
hello was defined by an atribute in a div tag
 hello was defined by an atribute in a div tag 
i see now that hello isn't a string
 i see now that hello isn't a string 
My guess is that your "hello" var is an "Attr" object, used to manipulate DOM attributes in JS. The browser displays a string representation of this attribute when you type it in the console, but the variablez is not actually a string and therefore has no .replace method. I think you are trying to the value of the attribute "test". In that case, try to use "hello.value". The documentation for the Attr objects is here : https://developer.mozilla.org/fr/docs/Web/API/Attr
Usually happens when talking with other devs that know more about specific topics.
then you got it ;)
figured that out thx
Yeah first step would be asking "are you sure?" Haha
What exactly do you mean by prettier support? One of the main design goals of this linter was to have zero stylistic rules, so it will always be prettier-compatible (and is meant to be used alongside it). Are you referring to some other type of support? And I definitely agree about editor plugins being a necessity, they're my top priority right now (as soon as I learn how to do it haha). I'll probably start with Atom ‚Äì thanks so much for offering to help out! Let me know if you make any progress :)
Sure, that's very fair! And if you're comfortable with that approach, I think that's great. I guess I'm just the opposite haha. If I don't see any immediate benefit in using a low-level tool directly, I'll just use a simple wrapper around it. I don't think I'll be using TSLint or ESLint directly anymore because doing so provides me no value ‚Äì I can just run `lynt --typescript` or `lynt --flow` instead of setting up an `.eslintrc.json` or a `tslint.json` file just to get the same result. Something like Webpack vs Parcel on the other hand, I would still prefer to use Webpack because it offers a lot more than Parcel.
The title does not inspire confidence. &gt; Getting Started Build**ing An** Angular 6 Web Application FTFY
If we have the following App component that renders the Top Level Routes: const App = () =&gt; ( &lt;Router&gt; &lt;Switch&gt; &lt;Route path='/sub' component={Screen} /&gt; &lt;/Switch&gt; &lt;/Router&gt; ) And we have Screen defined as const Screen = ({ match }) =&gt; ( &lt;div&gt; &lt;h2&gt;Some screen!&lt;/h2&gt; &lt;Switch&gt; &lt;Route path={`${match.url}/:id` component={SubPage} /&gt; &lt;/Switch&gt; &lt;/div&gt; ) Now when you go to the subroute of `sub/123`, you will get `SubPage` rendered.
Hey sorry I‚Äôm at work at the moment but I could do an example when I get home, if you haven‚Äôt already figured it out by then. Basically the route you wish to nest inside another should go inside the *component* being rendered by the parent route and not inside the route itself. This &lt;Route path=‚Äòsome/path‚Äô component={SomeComponent} // &lt;‚Äî Put the nested route inside here /&gt; Not this &lt;Route path=‚Äòsome/path‚Äô component={SomeComponent}&gt; &lt;Route path=‚Äòthing‚Äô component={Nested} /&gt; // &lt;‚Äî Not in here &lt;/ Route&gt; If that doesn‚Äôt work let me know and I can give you a better example in the evening :)
Although if you do go the way of modern browser DOM you'll still end up rewriting a lot of wrappers and utilities that come in jQuery. Stupid stuff like show()/hide()/toggle() and a ton more.
\&gt; 3x Minutes \(or 300x Seconds\) Ok.
React is not a framework.
So long as you bear in mind your job is not to impress yourself, it is to make websites. It you can find something that is hard, and make it easier and simpler, then there you go. Developing a CLI that makes startup faster may have little pragmatic value with regard to a user saying 'hey, this site is better now' or a fellow worker say 'hey, that task got easier'. If all you do is weave complexity and pat yourself on the back, you are the sort of web developer I quit jobs to get away from.
[I don't really know how to explain it in words, but](https://i.imgur.com/Gqt3auU.png).
Vue and jQuery are two different things and can't be compared in terms of "better solution", it's like saying that using a rocket to get out from stratosphere is a better solution to using a boat.
&gt; It might be telling that your filter/reduce example contains errors while your loop works perfectly. I misspelled `const`, but the functions work perfectly. [ { inStock: false, price: 5}, { inStock: true, price: 2} ].filter(({ inStock }) =&gt; inStock). reduce((sum, { price }) =&gt; sum + price, 0); // Expected value 2 &gt; Plus you have to create two anonymous arrow functions. I didn't have to, I chose to because its more readable to me. I could have condensed it into one line/loop/function if I wanted to. const totalPrice = shoppingCart.reduce( (sum, { inStock, price }) =&gt; inStock ? sum + price : sum, 0 ); 
Didn't Chrome completely break audio play not two weeks back?
React is not a "framework". That aside, your specific points: 1) JSX --- "In the 90s the mantra was XYZ" is not an argument against something. Also, technically JSX is not "inline HTML disguised as JSX", it's... JavaScript disguised as HTML/XML. There's nothing disguised about the fact it's inline HTML. That's the point. As for it being hard to follow, maybe depends who wrote it. Somehow I never had a problem following JSX, but I also strictly separate business logic from my JSX-heavy display components. Many beginner/intermediate developers get confused why we separate templates from business logic. They think the goal is to separate your application code from your markup. No. The goal is to separate your **business logic** from your **display/presentation logic**. How each of those is expressed is irrelevant. The fact your display logic may be HTML with JS injections, or JS with HTML injections, or HTML with custom macros... doesn't matter. So if you've been fooling yourself this is about separation of languages, instead of separation of concerns, time to dump all preconceptions in the garbage bin and start over. 2) Boilerplate --- &gt; this.method = this.method.bind(this) This is not React, this is JavaScript. Nowhere does React require you to do this. &gt; className instead of class This is also not React, this is JavaScript. JSX compiles directly to JavaScript with zero magic other than a basic syntax transform. Since `class` is a reserved keyword, the DOM API which predated React like... couple of decades or such... named the property for class on a DOM Node "className" i.e. node.className = "foo bar baz"; And this is why it's like this in JSX. In ES6 now it's allowed to use keywords as property names. Alas, the DOM API has been defined and it's not changing. Also typing extra 4 characters is a very low bar for calling something "boilerplate". &gt; magic braces surrounding component code "Magic" braces? What's magic about them? What would you replace them with? How is, say, **two quotes** somehow less boilerplate then **two braces**? I don't even... 3) Component communication model &gt; Communication between parent and child is handled well by React, but try to send a message side-ways and you realize that you are on your own. "Sideways"... üôÑ What the hell is sideways? &gt; Should you use cookies, URL parameters, DOM events, global variables or by introducing the whole new level of complexity in form of Redux? You should learn to separate business logic and presentation logic, which is what I started with. If you're introducing global application state into your presentation logic, you haven't figured out the purpose of a presentation component (hint: to present). React makes what you want difficult, because React expects people have enough clue to not try spaghettifying their application concerns like this. So the solution is read your cookies/URL parameters/etc. in your application controllers / business logic units, and then tell your presentation widgets only what to present. Not where to get it from. *Give it to them*. &gt; Reducers, stores, actions, selectors, mapStateToProps, mapDispatchToProps, ACTION='ACTION'? Why all this sorcery Keep studying until it no longer looks like sorcery. I don't understand how the heck you have the gall to declare React a "poor {whatever}" when you don't understand half of it. You have to understand to critique. Also a lot of this is optional, you don't *have* to use it. In its core, what React is, is the JSX model + the Virtual DOM resolver. That's the core value provided, you can use stateless functional components and implement the rest outside React, however you want. Because React is not a framework. It's just a thin layer to help you build and update HTML widgets efficiently. 
Google for web audio api and media recorder api [https://www.html5rocks.com/en/tutorials/webaudio/intro/](https://www.html5rocks.com/en/tutorials/webaudio/intro/)
interesting concept. I'll have to look into this
I actually don't find I miss these. el.style.display = "block" // or "none" el.classList.toggle("myClass") 
React, Angular, and Vue all suck. 
Rewriting small utility functions like that saves including the whole of jQuery in your pages/apps just to get those helpers which could be a significant saving on mobile, especially if your application doesn't behave well with with caches for some reason. Of course you now have the maintenance work of tweaking those functions when someone stumbles upon a browser-specific behaviour difference that makes your code exhibit buggy responses. So there are pluses and minuses on that matter.
I think you need to save what you've been working on so far, close your editor and take a minute to read the React docs. [https://reactjs.org/docs/thinking\-in\-react.html](https://reactjs.org/docs/thinking-in-react.html) Everything you've mentioned is a lack of understanding of how React is supposed to work, and you're trying to fight against it using practices found in frameworks such as Angular and Vue.
I guess depends what type of algo trading you're talking about. For High frequency trading C++ is preferable as you need to process a lot of data quickly. For swing trading Pythons popular, I don't see why you couldn't get similar results with JS, but you'd have to ask what the benefit of using it over Python would be. Also, I really like your site. Are the charts build from react-stockcharts by any chance? 
jQuery-UI, on the other hand...
Also isInStock is undefined. Strict mode throws an error, non-strict would create the variable (which is automatically undefined) so it would always return false. Everything would be out of stock causing the totalPrice to be 0.
They both manipulate the DOM and add dynamic behaviors to a page. Vue is a better solution because you change a view model instead of directly manipulating the DOM so in that regard it's a "better solution" since you eliminate UI state bugs. Sure, Vue does a lot more than that too if you want to use those additional things. 
There's a saying if everyone you meet is an asshole, then maybe you're the asshole :-) So do really all approaches to client-side UIs suck, or... ? Don't you have at least one preferred approach you like?
Dont get too worked up on it, you can do it! I'm self taught aswell, been working in this field for 6 years and learning to code since childhood, I'm 22 and work as a senior fullstack developer and have been offered tech lead in many projects. My advice is: be comunicative! without comunicatiom you will loose track of what the team you're working with is doing or what the customer expects from you. Every project that I've worked at least the ones that failed are the ones with lower level of communication. If you have a problem: say it. if you have a solution: say it. Then everyone will be happy to help you in whatever you need. good luck!
I feel like github.com should just enforce it if you create a public repo. Something like: Pick a license: - MIT - Apache - GPL - Huh? - People can use my app but not my code - People can use my code but not if they charge for it - Anyone can do whatever they want with my code - None (grayed out, can't continue)
Do you even know what jQuery was made for?
Hi /u/OnzReddit, For javascript help, please visit /r/LearnJavascript. Thank you!
I do like the attribute directives in Angular. I like the idea of just changing the model in the controller, and having the view, with logic in it, make itself.
what are the obvious reasons? I don't follow lol. sounds like youre blowing smoke up my butt I've designed SPAs with jq, I've designed SPAs with react. it's apples and oranges as far as approach and golden rules go (Dom manipulation is forbidden in react, jQuery is a Dom manipulation library)
The problem is that this approach works only for most basic "fill in the value here" changes to the view. And then it slowly turns to hell as you need more flexibility. The benefit of React is that it says "just build the view from scratch however you want, and we take care of making it fast". You're not limited in *how* you change the view. I understand the appeal of both approaches, but Angular is by its nature doomed to be easier for the basic cases, and a clusterfuck for the complex cases. React is the same for everything. Just rebuild it.
Thanks I‚Äôm still early in college but I‚Äôm trying to expand my portfolio as soon as possible and display it the way employers will look! 
Was a hassle to install but it's neat! Going to use this at work :)
I disagree. I have made some dense-ass views in Angular. The HTML can get thick looking at a glance, especially if you don't look at HTML a lot, but I always know what element to look at, and what directive I want. I can zero in instantly. To me, it is worth it to put the view logic in the view as a separate HTML file. Just my opinion, and I have worked with people I liked who hated that.
My main problem with jQuery and SPAs is that it encourages you to store state in the DOM. Is a button enabled or not? Check the DOM. A more ideal solution is to store state in your JS and update the DOM when necessary. This is the virtual DOM. Now, jQuery is obviously just a DOM manipulation library so you could make a virtual DOM implementation and refresh the DOM using jQuery but by that point what argument do you have sticking with jQuery? It's a fairly large library compared to the competition and if you're storing your hierarchy in a virtual DOM then all the DOM traversal/selector syntax in jQuery becomes worthless because you're probably working directly with elements at the point. jQuery had a very specific use case in the past. Namely as a compatibility layer for all the different browser implementations and to add a query mechanism. We have all that in native code now and if you do want some of that syntactic sugar, you can use smaller, more focused libs.
Sorry for that, still a lot improvement to make. Thanks!
Do it and submit a pull request to the repo! 
Honestly, adding several KB of data to the webpage that your users need to DL just because you wanted syntax sugar is a pretty selfish way to develop. If you are using all of jQuery's features, then sure use the library. But if you are using it just for a few bits of the library, it's a pretty poor way to go about developing a site. Things like show/hide are extremely easy to do in just a few lines of code of raw js. I would also disagree with cleaner event listeners because... SomeElement.addEventListener('theEvent', listener) is not hard at all. You can even add extra options to it that specify if the listener should only occur once, put in preventive measures against preventDefault(), etc. Things you cannot do with .click() in jQuery. 
Not really sure why the down votes. There are people that blatantly don't realize that javascript can run Ajax calls natively. Just at work, I had a conversation the other week where people were talking about how great Angular was that it provided the ability to run Ajax w/o refreshing the page...I said oh really and how do you think that works? 
your handler should come before the send.
 what's a handler?
I totally understand the idea of writing code just to see if you can. I've done that, and i would consider that to be a legitimate answer to my question. However, that still doesn't change the fact that I was genuinely asking to see if there was some use case I wasn't aware of where this could provide some significant benefit. So far, from your answer and others, I do not see one.
Onreadystatechange. Also why do you have 2 'new XMLHttpRequest()'
don't do this
I am not the author, but I share his opinion that using const everywhere is an anti-pattern and it's ugly as hell in a codebase. I actually just use "const" where it actually makes sense, like for real constant scalar values: const PHI = 1.618; What do you think guys ? I know you are probably using "const" everywhere (I was doing that too), but if you think about it again, don't you feel it's weird? I mean, I have never seen this const mania in any other programming language. It's good we ditched var, but using const everywhere seems like another weird thing.
Thanks a lot! This is interesting!
JSX isn't actually HTML. It just looks like it. It's syntactic sugar, that when processed, turns into javascript code that creates dom elements and assigns them attributes. You don't technically even need to use JSX, but if you choose not to, you're missing out on its benefits because you've inaccurately mapped JSX to HTML with inline javascript. Further, if your templates are excessively dependent on logic, or excessively complex, they haven't been properly componentized. &gt; Should you use cookies, URL parameters, DOM events, global variables. No. Redux is a good pattern, but you don't have to use it. There's the context api, and there are other state management solutions. These solutions solve the problem that state management and presentation should not be a shared concern of a component. With React, a component is the output of a function that is provided parameters. That's pretty much it. If that function/component needs to maintain its own internal state, and if it then needs to persist that state over time, the complexity of creating and _maintaining_ that function/component increases dramatically. Build a large application with a large number of these components, and then you'll _really_ feel like you're in the 90s.
I am not the author, but I share his idea that using const everywhere is an anti-pattern and it's ugly as hell in a codebase. I actually just use "const" where it actually makes sense, like for real constant scalar values: const PHI = 1.618; What do you think guys ? I know you are probably using "const" everywhere (I was doing that too), but if you think about it again, don't you feel it's weird? I mean, I have never seen this const mania in any other programming language. It's good we ditched var, but using const everywhere seems like another weird thing.
Holy crap this is a scary question. Wtf dude. Imagine if a construction worker said "what are the benefits of using power tools for building a house? i could just strap a motor to a saw anyway." Dude. Don't use jQuery. Stop. Things like Vue and React have all the tools you need.
Does the site allow cross-origin requests? Python won't have that problem, but the browser will. If that's not the problem, then everything I see about Axios shows something like this for basic auth: https://stackoverflow.com/a/47158736/388173
This idea seemed daunting last night, but with some sleep it was actually pretty easy to do. Looks like the numjs tool is basically just a wrapper for this: https://github.com/scijs/ndarray, and ndarray already has all the operations I wanted implemented. It was just a matter of copying the wrapper code and changing it to point at the function I wanted. It can also do them in place, which will probably speed up my page even more, so I might bring those into the wrapper as well. The hardest part was actually figuring out how to browserify the source and confirm that my changes worked. Running browserify directly on the source did not work, but the project had browserify set up through grunt, and using it as a grunt plugin worked fine. Not sure I understand that but whatever. I'll just be happy something worked.
Ok, so I just checked, and CORS actually isn't enabaled, so we are working on getting that fixed. I appreciate your input! Thank you!
At a very cursory glance, your two components that aren't `App` don't hold state, and so you should make them stateless functional components.
No problem. Good luck!
Late to the party but avoid looking to your phone for long periods of time. It is common sense, yes, but you would be surprised how many people do it. Our manager just told my co-worker that she didn't get a raise because of this.
Be humble is really the best advice imho. There are so many douchebags and smartypants in the industry that it hurts.
nice to hear it worked out
Doesn't seem to work for me. When I click the icon or try to open a URL I get "Something bad happened :(. Are you running Tana?" Here are the logs for the extension: https://imgur.com/a/fKqN3PS
These helped me understand after lots of trouble: https://tylermcginnis.com/react-router-nested-routes/ https://tylermcginnis.com/react-router-pass-props-to-components/ And you'll need WithProps to access the router in certain components.
A pretty common approach is to have an API that talks to your database or does other things on the server, and a separate front end that talks to the API. The front end doesn't import the API, it makes HTTP requests to the API to communicate. For instance, you might do a GET request the /users to your API to get a list of the users. If your API is RESTful, you would use a PUT request to edit a user, with the new data in the body of the HTTP request. To make a new user, you would use a POST request. Maybe do some research on REST APIs and single page applications. It's not the only way to do this, but it's a common pattern.
You will miss a view layer, which means you will probably hide/show HTML elements when you need to change what you display on the page (or recreate them on the fly). You might also take a look at the Vue bindings, Vue code is much closer to the HTML look-and feel, compared to React
To be honest I did not expect any other reaction. I am just trying to understand what is so appealing about React. I have worked enough with it to get it to do what I want, there is just no joy in it.
Sure about Gopher in general? Javascript has come a long, long way, types would probably be the only thing that i could imagine that maybe i miss. But even then, i'd probably go Typescript, or if i really needed a compile-to, then definitively ReasonML. It would feel pretty strange to me be limited otherwise.
I'm curious about the comment about Glitch supporting python, php, and ruby, since the [FAQ](https://glitch.com/faq#languages) says that only node.js is supported, and the sample python projects I've found don't load.
A lot of the more interesting fields will probably never be taken over by Javascript. AAA Gaming, AI, OS development, etc. I don't see Mathematicians making the switch anytime soon, although some seem open to it if there were better libraries. Even then, I'm not sure if there would be a compelling reason to switch from Python.
My major doubt now is ore on how to make this requests from the main aplication, my server API is already done: const express = require('express'); const mongoose = require('mongoose'); const bodyParser = require('body-parser'); const estadoController = require('./controllers/estado'); //sync mongoose mongoose.connect('mongodb://localhost:27017/trabalho2'); const app = express(); app.use(bodyParser.json()); app.use(bodyParser.urlencoded({extended: true})); var port = process.env.PORT || 3000; var router = express.Router(); //---------------------------------------------------------------------------------API----------------------------------------- // Initial dummy route for testing // http://localhost:3000/api router.get('/', function(req, res) { res.json({ message: 'onde est√£o os estados?' }); }); //nova rota /estados var estadosRota = router.route('/estados') .post(estadoController.postEstados) //POST .get(estadoController.getEstados); //GET GERAL //recupera especifico //nova rota var estadoRota = router.route('/estados/:estado_id') .get(estadoController.getEstado) //GET estado especifico .delete(estadoController.deletEstado); //DELETE //UPDATE //atualizar populacao //nova rota var estadoRotaPop = router.route('/estados/:estado_id/pop') .put(estadoController.putEstadoPop); //atualizar pib //nova rota var estadoRotaPib = router.route('/estados/:estado_id/pib') .put(estadoController.putEstadoPib); // Register all our routes with /api app.use('/api', router); // Start the server app.listen(port); console.log('escutando na porta ' + port); I just don't know where to go from here. Just build another part that is "the client"(that will make the calls)?
I've spent the past few weeks killing myself with a vue/typescript eslint/tsling config. There is no way in hell this is "zero config" for a large existing code-base.
Get [Prettier](https://github.com/prettier/prettier) to format your code. Might or might not make any difference to you but means a lot to other viewers
I agree that const should be used to communicate that it shouldn't change, and not that it just didn't happen to change, as the author says. 
Sure it is! I've tested it with one of my larger projects, [resumake](https://github.com/saadq/resumake.io) where I just run `lynt --react --flow` for the client and `lynt --flow` for the server. However, currently Vue isn't supported as I have no experience with it. I imagine it would be pretty easy to add a `--vue` flag for JS, but I would need to look into getting it to work with TS because I don't think TSLint supports Vue.
Thank you for this.
The problem with vue is .vue files. They can have a &lt;script&gt; block or a &lt;script lang="ts"&gt; block. In my case both as we are transitioning. In addition there are simply .js and simply .ts files that are extracted out from .vue files if the logic is too long. And you do not have a vue-eslint config with vue specific errors, and of course there are typescript/vue specifc configs with decorators.... it's all complicated. But, hey good work, and I wish you the best! :D 
For your info, Go, C#, Ada, Object Pascal, and Haskell were added to the standings.
Yes, you need a client/front end. A lot of things can serve as a client, a website/web application, a native application, you can test your API using something like Postman, or even just make cURL requests to the API directly. Probably, though, you'll want a web app to talk to the API. Take a look at the fetch api to learn about how to talk to an API from your front end. https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
Already tested everything with postman...so, it seems I just have to build a web app (running locally) that will ‚Äútalk‚Äù to the API from my browser. Thanks for the help.
People get invested in a tech stack and get angry when it dies off.
Got it, thanks!
Awesome idea, I wanted this but just setup some fixed windows layouts to do it. Will certainly check it out!
I heard someone once say that due to the ubiquitiy of the internet every app at some point in the development lifecycle would be better off just written in javascript. Sure we won't be writing OS in JS anytime soon but in the mean time it seems to do more and more every month. Did you know excel started using JS just a few weeks ago?
Awesome! Really dig the way it is structured
Hi /u/PadeiroTeteu, For javascript help, please visit /r/LearnJavascript. Thank you!
Yup. Now looks better, congrats! :) But still, too much. And need wrapping tool API to create a task for it. With "too much" i'm referring that you need to write too much code. Yea it is clean, idea is great and etc, you know my position and ideas about it.
Came here to see if the article was worth reading, this comment convinced me it was not.
Thanks for the link. This document illustrates perfectly React's problem with the data flow, namely React's way to pass all the data through a common parent. You have to pass props through intermediate components to get it data to its destination, whether an intermediate component needs it or not. With a deeper hierarchy it quickly becomes tedious to create props, which only function is to pass data further on.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [deepsweet/mocku/.../**package.json** (master ‚Üí 1d35e2c)](https://github.com/deepsweet/mocku/blob/1d35e2c210c1691155b68da4d1b3a44c9a6ee9eb/package.json) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dz1ao6k.)
why move when you can spread concerns, IE for intranet, Chrome for the webs, Firefox for porn, Safari for the anathema
Lol, love it :) 
What do you mean we won't be [writing OS in JS](https://demo.os-js.org/)?
`jQuery.animate()` is a hack. Use CSS, performance is better.
I played around with it a few weeks ago and don't understand how/why so many websites are using it. I assume it's mostly outdated sites run by people who only know jQuery? But even those people can just steal pure CSS accordions/forms from codepen that look 100x better and take 100x less space.
Sure, if you find a library accomplishes something not-so-trivial that would otherwise take some work to implement, feel free to use it. https://en.wikipedia.org/wiki/Not_invented_here
Everything has it's limitations. Notably, CSS can't animate document scroll.
I've never seen any smooth scrolling examples done using CSS or some other complex 
This is especially true for jQuery, since I find that it's already included in many of the projects I come into contact with. If jQuery is already there, and your intended use isn't going to cause a non-trivial performance hit, go right ahead and use it.
Great!
Nice :\)
I love Vue but Native version of Vue is really shitty. But if it will be the same as React Native in terms of API's, adious React! 
Dude, I don't want to be an a hole. But you will be out of the job soon with your degree. That's why is important to learn code, but your degree + good coding skills = unfireable. Companies will fight for you! 
Thanks! it just warming up for the next complete tutorial of Angular 6
To add to this, there is really no concept or even encouragement to modularize your code in jquery so you get jquery spaghetti very often
This isn't javascript, üëé
Maybe the new context API is what you're wanting for deep state access without explicit props?
&gt;If a programmer needs to indicate that a certain variable definition needs to be exactly as it is and not be changed during possible later refactoring, that's what comments are for. Or put the variable name in all caps like everyone else on the planet. Unless you're working in COBOL or RPG, everyone knows what a variable in all caps means.
Is this Linux compatible? I assume so since it's electron but figured I'd ask.
Agnostic principles \&gt; languages \&gt; Frameworks
You should study a bit of jQuery so you can make websites and let those frameworks and libraries for when you're at least comfortable writing js that makes something useful. Also, jQuery will be needed of you every get your hands on legacy projects
next js might be what you're looking for
Good to know I wasn‚Äôt going at it backwards lol I assumed learning JavaScript first was the right choice I just needed some reassurance I guess.
I don't remember where I heard it, but my rule of thumb is if I have the same code in more than two places.
Any advice for agnostic principle learning ? I am learning python and javascript for fun but i feel that I lack basic general knowledge since I didn't do any degree related to programming or building app.
And it got reverted today 
Do a course on algorithms to get your feet wet.
Are you deploying this project, or just running locally? Have you used Create-React-App?
It's hard to do this stuff correctly when you're a new dev working on tiny projects where the issues are rare to come up. Keep your eye out for mistakes and you'll start noticing ways to implement things like DRY or ways to break your code up into smaller functions. Write bad code if you must, if you start seeing a pattern, copy that code into a function in a way that works in all the areas it's being used in. You'll learn over time what should be placed in it's own chunk of reusable code. Don't be afraid to suck.
oh shit!
depends how you're doing it check the position of the 'player' when they move and if it's within a certain distance, or when the player tries to move into the block &amp; would collide with it, change the URL with location.href = url
It sounds like you‚Äôve got the right idea. It‚Äôs very dependent on the specific cases. It‚Äôs usually hard to predict exactly how the use cases of your app will expand. In general, I‚Äôve found that ‚Äúundryifying‚Äù code that is too restrictive for a new use case later is easier than trying to cleanup copied code that has diverged. Another thing to think about is what layer you want to DRYify. If you think you will have lots of different chocolates, then it makes sense to DRY some stuff across all chocolates, but you do want to be careful about making assumptions about what your new chocolate might want to do.
&gt;const should be used to communicate that it shouldn't change, and not that it just didn't happen to change. This. :\)
definitely get a good foundation with these three first! after that, i would recommend moving on with react for a few reasons: \- one: react is less of a "framework" and more of a library, programming with react will help you get \_\_better\_\_ at JavaScript rather than distract you from it \- two: react is super popular right now
If...then...?
This is the only rule I follow. If all you know about are the 2 chocolates, and that you maybe might have more in the future, just plan for the two. Share code between them and worry about extending it further when you get to that point. I don't think having to refactor prior code because you just added a 3rd thing is a bad option. You start planning too much for future stuff, and you end up with shit like this: https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition (this thing really isn't too far from some stuff i've worked on)
+1 on refactoring at 3 uses. That‚Äôs what I try and do at work. If you only have it two other places and you need to add a 3rd, there won‚Äôt be much code to rip out and reimplement. 
Nooooooooo
I think you made some good points, but: This const everywhere mindset really solves a non\-existent problem \(in Ruby or Python and every other languages really, unchanged variables are not constantized yet people can still easily manage them\). The other big problem I see is semantic. It feels unnatural to turn everything into a constant and to use this keyword. In all other programming languages, constants are for a few things that are set in stone, like PI, PHI or some configuration strings. Using let feels more natural if you want to quickly store some value. It's like a mathematical theorem \("let ... be ..."\). Seeing all theses const keywords feels like a badly written text.
Don't you just need to listen on the value event and it returns the value once? That's what I did in Firebase, did it really change in Firestore?
&gt; React does a good job of keeping components separated, but code inside a JSX component is a tangled mess As I said that's up to the author. I've never had a JSX component turn a "tangled mess" on me. I've had people tell me "I can't do that, I understand your code, but I can't write it like that" which is weird to me (I mean... you see it, emulate it) but I sympathize with the sentiment. Practice? JSX is as clean as you write it. &gt; Again since JSX code is not usable without a transpiler, this is a poor point claiming that this is how Javascript works. JSX doesn't interpret attribute names. It just converts them to JavaScript. To "className" is how JavaScript works, and more accurately, how the DOM API works. &gt; As in two child components of a common parent talking with each other. There's no reason for this happening I can think of. Provide a use case. &gt; If React is not a framework, is it of any value on its own? "I can't code without a framework" is a notion you will shake over time. Not everything must be a framework covering things A to Z for it to be useful.
I‚Äôm fairly well convinced that 95 percent of the people paid to write JavaScript don‚Äôt actually know JavaScript. It‚Äôs embarrassing.
"on a whim", riight...
Nice dude. I might try your buttons on a web app im building at my internship. 
&gt; This const mindset really solves a non-existent problem (in Ruby or Python, and every other languages really, unchanged variables are not constantized yet people can still easily manage them). Plenty of languages distinguish between mutable and immutable references - e.g. kotlin, scala, even Java. And it is pretty useful features since it simplifies reading - when I see const/val/final (etc.), I don't have to worry that it will reassign to something completely different somewhere later. Maybe the keyword name isn't the best since it's not really a constant in the typical meaning. Java calls it "final", C# "readonly", kotlin "val". But that's superficial and doesn't really matter.
OP should learn to do things in JavaScript not in a legacy dependency. &gt;Also, jQuery will be needed of you every get your hands on legacy projects And at that time, OP can spend 5 minutes in the jQuery docs and translate what they learned from DOM API JavaScript to jQuery.
Try Vivaldi.com Started by "a guy" (ceo, original dev, someone I forget who) from Opera. Uses chromium/webkit (which ever it is i forget lol I suck i know) so that it can use chrome extensions out of the box. It's brought some nice features to the game, but didn't stupidly try to make people change their ancient browser habits. (I've seen other browsers try doing away with the address bar)
WebAssembly my dude
The issue there is the fundamental misunderstandings of libraries vs. language/syntax. Kind of reminds me how people used to think jQuery was its own language.
It's interesting how PoV is important in this. I was into backend development for four or so years, and in the last couple of months I'm back to HTML/CSS/JS browser work. And what do I see? I see everything old has faded away, and we have a set of browsers: Chrome, Safari, Firefox, Edge that have the most humongous overlap of properly working goodies I've ever had at my fingertips, and the dominant browser (Chrome) doesn't suck for once! There will always be someone "winning" the race of competing browsers. This is not a forever situation. It's temporary. And every time the fortunes shift, we make progress. - When IE was king, we got AJAX, because IE invented AJAX. - When then fortunes shifted to Firefox, we got modern CSS support. - When then fortunes shifted to WebKit (Safari., and later Chrome) we got modern JS and HTML APIs, as Apple kicked off the HTML5 movement (and Google then contributed significantly). I'm happy. Why aren't you :)
Is WebStorm really the most popular IDE for JavaScript? Looks really like author‚Äôs subjective opinion to me.
Yes, but in Java or in C#, "final" is barely used \(static typing makes more sense here\). But you can do Python or Ruby or PHP or every dynamic language really and I promise you don't need this at all and you never have to worry about this problem of a ghost somehow changing the value of your variable. I am sure const was not added to JS to be used in that way. I think it comes down to people hating having to choose between two options, so they default to some kind of mechanic robotic thinking like "let's const every variables and if I need to change its value, I will use let instead". I respect and value your opinion though and have fun with const in your code if you like that. :\)
Examples might be in TS but async/await is supported in Chrome, Firefox, and Edge since early-mid 2017
Create React Ap does most of what you're describing. You can configure the express app to start when you start the react app in your npm scripts.
try/catch is the only way i know of.
I found this article. https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/ He is creating a wrapper function for all promises. Which return 2 objects, error and the data. He also made it available on npm - https://github.com/scopsy/await-to-js Works something like - const [error, data] = await to(yourAsyncFunc()) if(error) return error;
Rule #1: never use parameter to control behaviors. If different colors result in different function behaviors then don't. If color is only an attribute then make one function only.
&gt; Yes, but in Java or in C#, "final" is barely used (static typing makes more sense here). Final/readonly is used very often for class/instance variables, it's actually considered best practice. In Java final is used rarely for local variables because it's verbose and not as useful (C# doesn't support it for local variables). &gt; But you can do Python or Ruby or PHP or every dynamic language really and I promise you don't need this at all and you never have to worry about this problem of a ghost somehow changing the value of your variable. (Furthermore let is scope limited, so it's really easy to track your variables.) But I actually do worry about those things even in dynamic languages. Scoping is essential, but doesn't help much with long spaghetti methods (don't assume you're gonna read only good code). &gt; I am sure const was not added to JS to be used in that way. That's a bold claim. Since its semantics is identical to final/readonly/val from other languages, I would assume it's supposed to be used in similar ways. &gt; I think it comes down to people hating having to choose between two options, so they default to some kind of mechanic robotic thinking like "let's const every variables and if I need to change its value, I will use let instead". In case of local variables, I admit that const isn't much better than let. Just a little bit. But then if I have the choice between let (hypothetical value 1.0) and const (value 1.0001), why should I pick the worse thing? Besides it's very useful for e.g. shared / global objects. Using const doesn't have any downsides, only benefits so it's fine to use it everywhere where reference mutability isn't required.
If you want to use a library then phaser may be a good choice. (https://phaser.io) It provides collision detection feature as well.
Learn JavaScript first. Frameworks use too much principles and advanced techs which only make you confused.
Tried something similar the other day but couldn't hear anything - is this impacted by the recent chrome audio mute change?
&gt; I am just trying to understand what is so appealing about React. It doesn't seem like it at all, it seems like you just want to justify your dislike for it and are looking for some type of validation..
I believe the google speech recognition in chrome still calls home to do the work.
Ditto for Brave.
In Opera, go to watch a YouTube or similar video... then click the ‚Äúpopout‚Äù icon overlay on the video and drag/resize that video to play somewhere on your screen out of the way in a chromeless overlay while you work in another app. Realize how something so simple can be so awesome. Now go back to chrome and feel the frustration that Chrome doesn‚Äôt support this. It may not be enough to drag you away from Chrome but there are features in other browsers that are compelling for sure.
I made a simple script that creates ripples in a designated container \(by adding CSS after a page loads\). It's my first real project that other people can use so it feels quite fulfilling even if its just something that creates a nice design/adds to a nice design. [https://github.com/Ladoli/Ripple\-Script](https://github.com/Ladoli/Ripple-Script) I'd love some feedback too.
Thanks! that's a great way 
someone else does this?!?! It's not just me?!
Am I wrong that only Firefox has this API? Why are we expecting other browsers would want to support it?
I can watch 20 episodes of html5 one piece on safari whereas with chrome it is 6-7 with my fans screaming and my lap burning . For Mac hardware safari is great, although not a web dev browser. 
Google is evil? Mozilla is generally good. Firefox is more than capable. Brave browser is also goos
404 on the url in your post. 
&gt; (I've seen other browsers try doing away with the address bar) ????????????????? What? How? Why? 
**[AiMind](http://ai.neocities.org/AiMind.html)** for MSIE is Natural Language Processing in JavaScript.
Yeah, it was just meant to show an example for a URL/code that would encode some parameters. The calculator would be entirely client side code, but just wondering how to "save" some of the parameters for the user without having to make logins and stuff.
&gt; Firefox made significant changes that broke loads of useful extensions rendering it (Chrome Lite) Firefox was caught in a no win situation here. Their browser was too slow, but it was very hard to fix without breaking existing extensions. So they either had to leave the performance problems (driving away people wanting better performance), or fix the performance (driving away people dependent on the old firefox extensions). I think in the long run they made the right choice. They can slowly build up the new extension api allowing it to do much of what the old extensions could, while at the same time have competitive browser performance again. I disagree with being Chrome Lite, as even now the extensions are more powerful than chromes (especially with UI changes). Also love container tabs, not sure if chrome has an equivalent.
Any language can create parameterized urls and parse the results. You just need to write the routines that do those things. If you want to get fancy, you can encrypt the parameters or even shorten them. I know how to do this with dot net, server and client side and very certain js is perfectly capable of both methods. 
You could use localstorage and, if you liked, encode keys into the URL as querystrings
Not just competitive, Firefox is once again starting to push the envelope of browser performance. It's not quite there yet but they are using a lot of interesting and possibly very fast techniques for web technologies. If they pay off eventually I expect all the other browsers will end up implementing these new designs.
There is two approaches to what you may want. You can use a GET request, where you can request an address with parameters and have your server calculate the parameters. This way your user can just save the URL as a favorite. It would look like this Www.something.com/calculator.php?value1=56&amp;value2=34 The other approach is to use a client side cookie, which would be retrieved by the page JavaScript and have the values inserted in your JavaScript calculator 
Why would we want a consistent tool that everyone uses when we could have 200 ways to do it that nobody uses, amitite
\+
You know, I never understood the obsession with abstracting the Dom. The Dom is designed to hold your state. It literally is the state. All this screwing around with replicating a virtual Dom to the teal Dom then mapping events on the teal Dom back to the virtual dom seems like a colossal screw around when the cononcial version of the state is the browser Dom anyway. What do you gain by all that bullshit? What can virtual Dom do for you that the direct Dom API can't do for you quicker?
A few kb is selfish? Have you seen the crap npm pulls into a project for something like react?
https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/webRequest/onBeforeRequest
The one thing I don‚Äôt like about the react ecossystem is kinda a lack of coesion. You never know if what you are doing is right or terrible, or if you are following the correct path. I feel like having to rewire basic things everytime: they are rarely ready from the start. On the other hand I just can‚Äôt stand working with javascript dependency injection bullshit, so no angular to me.
If I were building a webapp to do this and I wasn't expecting major traffic, I would build an express server that serves a simple page to the user that does the calculations. When the user calculates the results at the client, you give the user an option of getting a URL. The route ending is just a hash of the json. The hash becomes a url modifier. The calculation JSON gets sent back to the API in a POST body. The server then receives the JSON and hashes it and stores it as a flat file in a directory using basic file io. When the user goes to a specific route the page just requests the results at a particular hash and they are returned by the API. I chose to hash because it would mean that repeat calculations won't be duplicated in server-side flat files. Heavier traffic you could cache the files in a redis k/v store to reduce file reads. Or instead of hashing you could drop the JSON in MongoDB and return the _id to the user as the route modifier. Lots of ways to do this. You probably have to build it like a web app instead of a simple webpage to get server-side functionality.
I think you could use flat files and use a hash as the filename. That wouldn't be much hassle.
thanks, that's helpful. I'll look into cookies to see if it's possible to save multiple instances of parameters.
thanks, I'll look into these options to see how difficult it would be to implement.
I think at this point basically every browser besides Internet Explorer has `Promise`... Sorry. :P
Chrome \&lt;3
Not specifically in js. But you can start here: https://stackoverflow.com/questions/2572749/can-an-url-shortener-pass-parameters Hth... 
Links are meant to be shareable (and that's a large part of why sites like that offer you a link). Localstorage is kinda terrible for that. 
For the second approach, cookies can't be shared. 
Honestly. It depends on your experience level. If you can build an api with nodejs and express then most of the battle is won. The rest is just building in file IO and serving a page that points back to your API routes. Most Node and Express API tutorials use mongodb instead of file IO. Most of what I am writing here conceptually would have made my head explode six months ago. Now it seems pretty normal. Practice practice practice. Stockholm syndrome. Practice more. Getting familiar with NodeJS and Express helps solidify the serverside stuff. Not everything can live in the client if you want to use routes.
What extensions? There are virtually no extensions.
True. The question didn't mention sharing though, and seemed mostly concerned with having a clientside solution 
Probably not, unless you just want to learn more about it. It really shines in bigger projects.
I'm a bit skeptical about declaring all dependencies as dev dependencies in your `package.json`...
Especially considering how extensions weren't Firefox's only unique selling point, and there are very few extensions available for Chrome that are not available for Firefox. (And no, no other browser has anything like containers.)
Don't stop yourself from learning web development by getting distracted by figuring out "how" to learn it. Just dive into it by doing it the way everyone does (from beginners all the way up to super experienced), start a project, go as far as you can, take a break and use google, freenode irc, stackoverflow and what not to get on further, repeat. You learn as you go and you can always look up fundamentals more deeply if you want or need to at some point.
Yeah, I have to agree it was the right choice, especially as most people probably never even use extensions, but it was a painful moment for me. I already used Chrome for dev stuff (ironic given the OP's article) so it sort of became a no brainer to switch. I'll keep an eye on it. I would happily go back.
I use Chrome for dev stuff, so once Firefox could no longer be modified the way I wanted, it looked just like Chrome. It's a blunt stick to beat them with I know. 
Yes, I'm PC and Android so I don't get that option. Plus as you say it's not great for dev. 
'Generally good' is just a weird spelling of 'not good enough'.
I don't agree with OP that Chrome has won, that implies, as you say a permanence to the situation. I do dislike the exact thing that OP talks about which is commercial sites that are only tested on Chrome and don't work properly in FF for example. When I was a big FF fan it was a PITA. Not often, but often enough. I am so with you on how far web dev has come in the last five years or so. It's just a different world now :)
The surprising thing is, the last project I did... I did in Chrome first, then when I went to test it with FF, Edge, Safari, IE11, the only one needing tweaks was IE11. And they were minor tweaks. Especially when I consider all the things I used (rounded corners, text shadows, box shadows, flex box, multiple backgrounds etc.) browsers are doing an amazing job keeping up to date and being consistent, compared to what it was.
If sharing instances is a requirement then the cookies approach would not work. Or at least won‚Äôt be a straightforward solution. Also remember that cookies get deleted sometimes and can expire automatically If sharing the URLs and saving multiple instances of it is required. I would recommend the GET request method. this can actually be done in two ways. Have the server respond to the GET request with the answer to the calculation Or Have the server respond with a version of the page with the values already preloaded into the calculator fields The last version is better if you want the user to select from multiple different calculators or play around with the values before calculating To be comprehensive, a downside of the GET request is that it is technically not secure, as in if someone is packet sniffing on the user URLs he would be able to read the values in the URL unless you implement some really complex encoding The flat files approach will start to slow down once the number of different instances starts to get in the thousands (such as thousands of users or hundreds of users doing hundreds of calculations). In my humble experience, it would be easier just use a simple database option than dealing with the hassle of saving files and folders on the server especially, and designing a backend that reads and parses files If you do have thousands of instances and security is a big concern, and you are planning to have a user authentication system to allow only certain users to access certain calculations or to have the users access their saved instances from any computer then the third options I mentioned may be reasonable. Especially that you would already have a database in place 
Virtual DOM's time is over... it's template strings now, because there's no re-parsing of the string for updates.
Im sure with the current source code it won‚Äôt work for Linux cuz in the install-ffmpeg script OP only check the platform for win32 and darwin.
Yeah, even when I was a FF user I fairly rarely found sites that didn't work properly and required that I switch to either Chrome or (in some depressing cases) IE. I think that's part of the problem. These sites with incompatibilities probably did a bit of cross browser testing at first, found everything worked and just cut it out the workflow as an unnecessary cost. 
Wow, I never new IE had this prominent Edge button, and that Edge is already installed for users who use IE11 (?).
Won't prevent the code from breaking if I'm correct.
[One giant `.js` file without a single line of comments or JSDoc typehints](https://img.devrant.com/devrant/rant/r_37205_9SbcK.jpg)
it was cool back around 2008-2010, then things evolved and we finally came to the conclusion that http://youmightnotneedjquery.com/ So yes if you see it around it's because websites, mostly the presentational ones, become outdated as people does not work on them anymore (maybe they do on the content, but not on the code)
tl;dr: No. Long version: I'm developing with TypeScript since v. 1.1. Since the goal of TS is to improve the development process, you always will have additional effort compared to the same project written in JavaScript. I wouldn't say larger projects, but once you start coding in a team (3+ devs) you will benefit from TS, imho. Just because everyone is using it doesn't mean it was always the correct decision. Quite often I had to deal with people wanna use a MEAN stack because it's "modern", but none of them could answer me why in the hell they want to use an NoSQL engine for a perfect relational datastructure...
From personal experience, react is very difficult to learn for someone without a good foundation in JavaScript. It is great, I love it now that I understand it, and it definitely helped me learn a lot more about JavaScript. But learning react on your own is like trying to learn a foreign language by reading newspapers. It is a good way to improve but not a good starting point Jquery is much easier, and unless you need to create super interactive websites. It is more than enough. To be clear though, now that I know react I won‚Äôt go back to using Jquery. But trying to learn react on my own almost drove me insane 
And how do you operate the new updates into the real DOM?
So you'd use flat files *if you weren't expecting major traffic*. But otherwise?
Same way VDOM does the updates... direct writes while handling the edge cases. Eg, if it's a text field, capture the cursor position, write, then set the cursor position. Have a look at HyperHTML.
What's an example of a site that does this?
200 lines is not giant.
I see, it keeps references to the real DOM nodes through the template literal interpolation, no need for a virtual DOM.
You‚Äôll do lots of typing in a software related career. However, typing **quickly** isn‚Äôt important at all; for every ten seconds I spend typing, I probably spend a minute or two thinking, reading, planning ‚Äî and sometimes swearing. If it took you thirty seconds to type what I do in ten, that‚Äôs not a big deal. I guess it boils down to whether typing however slowly you need to, but doing it most of the day, is gonna be a problem. If going slow is completely comfortable, you‚Äôre fine.
&gt; Have a look at HyperHTML. Can you explain why it is slower and consumes more memory than vdom solutions in this benchmark[1]? 1. https://rawgit.com/krausest/js-framework-benchmark/master/webdriver-ts-results/table.html
That's keyed vs non-keyed, if I'm understanding your point. All keyed will always be slower than non-keyed.
For a beginner it's probably just unnecessary confusion, but it's still something you should familiarize yourself with eventually. 
how would I block with this?
Keyed and non-keyed are separated into two different tables. If you look at the results for keyed implementations, you'll see that HyperHTML is slower than many optimized vdom based libraries.
Can you tell me which bit of the benchmarks you're talking about? I only see red squares for hyperapp, which is different. Hyperhtml is green squares everywhere. I know Andrea's had pull requests for optimisations but he prefers to be simple and performant, handling as few specific cases as possible. The primary point to my mind is that VDOM needs to write to DOM at some point anyway. So rather than build up a structure then write, just write.
oh boi, never have i ever been so motivated to click on an article. üò§üòè
Typing fast isn't a job requirement for programmers. You might actually be surprised at how little typing you will do. 
what do you mean is there an argument
Yes, because the prototype is not a hard concept to understand. At a very basic level: * Every object in javascript can have a reference to another type of object. * We call this object that is referenced the prototype. * Think of it like a tree. Every twig has a branch that it stems from, every branch has a trunk. * When you're looking for a property or method on an object, it (javascript engine) checks the object first, then goes up the chain towards the trunk looking for that property/method. * You can have objects without prototypes, this is like snapping a twig off the tree. It has nowhere else to look if the property/method is not found. * You can change the prototype of an object. This is like grafting. * Classes are a shortcut to construct a prototype for an object. Once you've understood that nearly everything in Javascript is an object (barring the weird case of primitive wrappers), and that everything/anything can pretty much be changed/modified in relation to this idea, these concepts start making more sense. I think prototypical inheritance is only difficult to work with if you keep thinking of it _as_ classical inheritance. With the prototype you're not "inheriting" anything. The class methods and properties do not necessarily become part of the "end" object. All you're really doing (simplified) is linking chains of objects together. Both of those ideas are pretty fundamental to javascript as a language. Yes, you can get by without learning it, but that's like learning how to multiply without realizing that you're just adding several times. 
&gt; Hyperhtml is green squares everywhere. Look at the absolute numbers. For example, lets take vanilla as a baseline with the least possible overhead, `create rows` in vanilla is 130ms, so that everything that is higher is a pure javascript overhead. HyperHTML has 170ms, it is a 40ms js execution overhead, and there are many vdom based libraries that have ~10ms overhead. &gt; The primary point to my mind is that VDOM needs to write to DOM at some point anyway. So rather than build up a structure then write, just write. Many vdom based libraries also provide lightweight component abstractions that doesn't require polluting DOM trees like webcomponents. And when you start to think how to implement such components efficiently, you'll always end up with some form of an internal vdom-like structure.
It's only syntactical sugar if you aren't using inheritance. Otherwise it brings all the same issues as traditional class-based OOP. "What we wanted was a banana, but we got a gorilla holding a banana and the entire jungle." 
Banana plants grow up to 25 feet high, and their leaves can grow to be 9 feet long and 2 feet wide. Their roots can be hundreds of years old. *** ^^^I'm&amp;#32;a&amp;#32;Bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Unsubscribe**](https://np.reddit.com/message/compose?to=BananaFactBot&amp;subject=I%20hate%20potassium&amp;message=If%20you%20would%20like%20to%20unsubscribe%20from%20banana%20facts%2C%20send%20this%20private%20message%20with%20the%20subject%20%27I%20hate%20potassium%27.%20)&amp;#32;|&amp;#32;[üçå](https://np.reddit.com/r/BananaFactBot/comments/8acmq6/banana/?st=jfof9k8d&amp;sh=acd80944)
I actually switched to Firefox recently and on desktop FF is actually more performant for me. 
jQuery? Come on. https://css-tricks.com/now-ever-might-not-need-jquery/
Thanks kind sir!
I knew someone who was completely paralysed and could only type about one letter per 10 seconds. He was faster than nearly all of the programmers in the department of engineers because every single keypress he made was the right one.
Features, mostly. It's got a lot of stuff baked in for power users. Also a sidebar, something missing from chrome that I've never been able to get used to. And mouse gestures!
I do love them really. They have excellent support if you need it. I sorted password sharing by using 1password. You have to pay for it, but meh, bookmarks I've never found a good cross browser solution that doesn't result in replication clashes :/ 
Disclaimer: I don't use classes in JavaScript except when I have to interface to a library that uses them. They're harder to work with and less powerful. Obviously that's going to bring some bias into my answer. That also is contrary to your experience, which leads you to call prototypes counter-intuitive. I would definitely not leave out prototypes. This isn't because of my bias - it's because JavaScript actually has prototypes and does not have classes. The class-based syntactic sugar isn't there because classes are *better*, it's because they're more *familiar*. That being the case, I think that it's really valuable, especially for someone new, to know what actually goes on under the hood. Not knowing will make some later things ("why do I have to bind these methods to `this` in the constructor, again?") much more difficult to understand.
Thank you, for the advice, i will definetly find some course on that subject 
You probably meant ***DEFINITELY*** -not *'definetly'* --------------------------------------- ^^^Beep *^^boop. ^^^I ^^^am ^^a* ^^bot ^^whose ^^^mission ^^is ^^to ^^^correct ^^your ^^^spelling. ^^This ^^^action ^^was ^^^performed ^^automatically. ^^Contact ^^^me ^^^if ^^I ^^^made ^^^A ^^mistake ^^or ^^^just ^^downvote ^^^^^^please ^^^^^don't
Bad bot
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
"Parsing" isn't the bottleneck, never was. V-dom gets diffed by calling into a few functions, concerning the nodes that need changes. I don't see a little, immeasurable perf difference being worth all the troubles that strings bring. Especially considering that nothing has ever managed to come even close to Fiber/Suspense yet in terms of performance - since scheduling is the actual bottleneck. The web apps that demonstrate it already run circles around traditional web apps.
Me too, but I'm towards the happier end of the spectrum. You can. We type in bursts more usually, so this will not be a huge problem. Depending on how big your hands are (I'm male, tall but not Marfan tall) you might benefit from a mechanical keyboard, or at the very least just learning to tickle the keys. You really don't need to apply any sort of pressure. Wrists are a bit more complicated. Again, me, big hands, so I rest my wrists on the table and just move the hands a little to reach keys. It's worth a try. I found the official typing position total BS (wrists elevated like a piano player). Mice are another issue. Again, I'm tall, so I rest my wrist on the table and manipulate the mouse with my finger tips. In gaming circles there are three grips. [Claw, palm and tip](https://www.epicgear.com/en/technologies/types-of-mouse-grip). I'm (just the? ) tip. Be careful of keyboards and mice/trackballs labelled as ergonomic. They're not "our" ergonomic, so certainly try them, but make sure you keep the receipt. If you have the opportunity get a hypermobility aware physio, do. That's different to one who has heard of hypermobility. See the link below and google some of the other hypermobility societies who will be able to guide you. I'd probably ask over [here](https://www.inspire.com/groups/ehlers-danlos-syndromes-and-related-disorders/) because they have a lot of people who have experience. Best wishes 
Ugh that's obnoxious behaviour. I'm old enough to remember the sinistrals being forced to write with their right hand. It's the same shit. 
Now that npm 6 brought `npm audit` I'd say that they are getting nice new features that make me seriously consider switching back from yarn. Speed difference is not that huge anymore and there's a lockfile since version 5.
Shoot, I agree, sort of, but quit simply, the whole idea that native DOM manipulation is unacceptably slow is just a big stigma. Frameworks are nice, but a VDOM of any sort is usually total overkill.
Use $set. It will add a field if it doesn't exist. [https://docs.mongodb.com/manual/reference/operator/update/set/](https://docs.mongodb.com/manual/reference/operator/update/set/)
I use it sometimes because they are offering some new features in terms of UI and UX that others don't \(their side bar with a lot of customisations, the possibility to move your tabs to the bottom or sides if you want, the behaviour when opening / closings tabs...\), is it better or worse that's entirely personal, what matters to me is that they are \(for some features\) trying something different, diversity is always appreciated even if under the hood it's webkit, the package differs.
The browser.
You need to send the data from de first select via AJAX so your page will not refresh, then hide the second select.
Thanks I'll look into it. I'm new to programming so I don't know everything about javascript yet. But I'm getting there.
Lots and lots of easy documentation lookup.
You are welcome. Everybody need some help on the beginning
Bad bot
Good bot
Btw, regarding your new build flow.. 1-2 tips. - Make that output files to be `.mjs` - Always add `index.js` file in the `build/` using `esm` package - Always add `esm` as dependency, not devDep It's needless to add "requirements: esm" and make people thinking how everything works and why it not works when they miss that point. That package is pretty small and cost nothing to be dependency. Also, why not add all `@babel` devDeps and eslint ones as deps to the preset? You can clean the things more :) You still can execute the CLIs that are installed from another devDependency, they still are in the `node_modules/.bin/`. "I had a dream..." only 2-3 devDeps per package.json, and I actually did it with Hela. :)
A brand new jQuery tutorial in 2018?
Define `beginner`. If that's someone just learning to code, with JS as their first language - yes, you are right. But for anyone `begginer, but job-ready`, prototype knowledge is IMO necessary.
That's not a collection, it's a document in a collection. You can use `updateOne` or any such update method, and use the `$set` operator to add the field. Just use the operator as if the field existed already.
Were those 3 libraries really necessary for demonstration? I think I saw underscore used for a single call to map.... What the really point of bringing them in when such a simple example could be done vanilla?
I think a big problem is that to do react, create react app and other starters all pull in babel, plugins, transforms, etc. This isn't a problem in itself, but someone coming from a few basic javascript commands in the browser console to the world of babel+plugins could get incredibly confused. For instance, if you've never used classes in javascript, and all of a sudden every react component is a class that maps to a jsx tag, has state management that class render intelligently, handles props and updates...that's a pretty big leap. And in the js community at large, we're pushing for the latest, greatest and shiniest tools, because we all have the attention span of a hungry dog, but that means that everyone that's new gets thrown under the bus - the ramp up of knowledge is bigger than I think most people in the js world want to admit. To be clear, the problem is that there is no bridge from _I learned javascript in highschool/college/university_ to _I write professional, large-scale apps, with all the latest bells and whistles_. A great article demonstrating this is [How it feels to learn javascript in 2016](https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f).
Saying "webkit" is like saying "Flour, eggs, sugar, butter, salt". Chrome, FFox, Safari and Vivaldi all put those together in different ways sometimes adding stuff. While chrome and ffox come out of that with regular ass bread, Vivaldi adds choc.chips and comes out with fucking muffins, man.
Regarding `.mjs` ‚Äì I'd wait for some official decision and vision from Node.js modules team. It's still debatable and totally unclear even if they have *something* behind the experimental flag. Regarding ESLint ‚Äì it's not that easy and relies on flatten `node_modules/` which is not reliable, check https://github.com/eslint/eslint/issues/3458 for details
&gt;Final/readonly is used very often for class/instance variables, it's actually considered best practice. In Java final is used rarely for local variables because it's verbose and not as useful \(C# doesn't support readonly for local variables\). Yes, that's is my point: in Java or in C#, this concept is used where it actually makes sense, not everywhere \(in case of local variables for example\). &gt;In case of local variables, I admit that const isn't much better than let. Just a little bit. But then if I have the choice between let \(hypothetical value 1.0\) and const \(value 1.0001\), why should I pick the worse thing? It may be a little bit better technically \(but I doubt that because you still can mutate objects\), but it's far worst semantically. For example, look at this code I found on Twitter: `const result = await getResult(arg)` It's a nonsense to assign a result \(something dynamic by definition\) to... a constant. Words have a meaning and an history. const is a badly chosen keyword in this context. `let final result = await getResult(arg)` This is a lot better.
Can this thumbnail be open sourced aswell?
Plus Bootstrap and Underscore. It's like a who's whom of "don't use this to make a modern web app."
Prototype-based inheritance isn't that hard to understand, though it's amazing to me how many people who "know javascript" don't understand it doesn't have traditional classes via the class keyword. These seem to be those who don't have a long history of working with JS from my experience, see the new'ish class keyword and equate it to some other language. At the very least she should be aware of javascript's prototype-based inheritance and that class is just an abstraction of it. 
You can `break` and `continue` in `while`, `do..while`, `for`, `for..in` and `for..of` loops, but not in higher order methods like `forEach(&lt;callback&gt;)`. But you can use methods that can exit early like `some(&lt;callback&gt;)` instead. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some
It is clean es6, no need for comments. Comments should be used to explain why and not what. Also the whole file is a class constructor, can not and should not be in separate files. Peace
As stated Ajax is likely what you want here. You could also try CSS, e.g. the second column is hidden until an event from the first column toggles the display property or a class and makes the second visible. This is perhaps not a great solution if you need the second column to not exist at all, until it should, but it would be fine for just hiding/showing markup.
It is a little vague what you are doing, exactly. Sounds like you use JavaScript to detect the select, but then you reload the page to get server-side code to send you back the page with both columns(?) You don't need to re-request the page. Have both columns in the page from the get go, and hide the second one with CSS. When a user selects, show it. You can use CSS to add a class to the hidden one that has 'display:none'. The JavaScript can remove that class with document.getElementById("secondcolumn").classList.remove("hiddencolumn"); You could also do the inverse, add a class, or actually set the specific style rules, or a few other things to achieve the same effect, but the point is to have the dynamism be all client side. What I said is all sans-framwork. Vanilla JS. If you have a frontend framework, you can use it to do the dynamic view change.
No still not possible. Use .every and break with 'return false;' just like jQuery. every - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every 
Oh, right. Thanks for elaborating. 
&gt; in Java or in C#, this concept is used where it actually makes sense, not everywhere (in case of local variables for example). In Java it's not used often because it's too verbose (e.g. "final Object obj" instead of just "Object obj"). Even then some people use it for local variables. But verbosity is not a problem in JavaScript. In Scala/Kotlin it is considered to be best practice to use "var" only if reference is really mutable, otherwise you're supposed to use val (equivalent to JS const). &gt; It may be a little bit better technically (but I doubt that because you still can mutate objects), but it's far worst semantically. I agree that naming this "const" might not be ideal, but that doesn't invalidate the concept. Just don't think of them as constant values, instead think of it as constant (readonly) reference. It looks like you refuse to understand the true semantics of "const" keyword and just insist that if it's named "const", it must mean constant. That's just childish. 
This bot ain't that great. There's a license in there...
It doesn‚Äôt work at all on mobile, for what it‚Äôs worth. 
TypeScript is neat, but not crucial, unless you want a job that requires it. You can learn some extra programming concepts that are not currently in JavaScript which is well supported by browsers. Eventually JavaScript will catch up, so the need to know it is going down, not up. It may be worth it if you want to expand into frontend frameworks, just to acclimate yourself to command line tools and transpilation. If you plan to keep using Wordpress, it is probably won't really help you achieve anything you cannot already.
It's also supported in C#. Why post typescript stuff in /r/JavaScript?
Hi /u/myrrtle, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/salahuddeen, For javascript help, please visit /r/LearnJavascript. Thank you!
use lodash instead.
Hi /u/WristyManchego, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/WaveMonkey, For javascript help, please visit /r/LearnJavascript. Thank you!
I would love to see some basic benchmarks against the native DOM. 
&gt;It looks like you refuse to understand the true semantics of "const" keyword and just insist that if it's named "const", it must mean constant. That's just childish. Yes, you are right, I think it comes down to that: you value the programming technique/the concept where I value the communication/the meaning. In the end, no big deal, let's go back building awesome stuff. :\)
As an occasional jQuery and bootstrap user (I‚Äôm a C# backend dev but occasionally need to do UI work), I would love a demo of how to do the same with what is considered a better way to do this. AngularJS? Reactive? Something else? What replaces bootstrap? Goin to getbootstrap.com has always been a super easy way for me to spin up a basic UI, and jquery is quick to do shit to it. 
Appreciate the response! Gave me a lot to think about. Also glad I'm not alone in thinking about these things.
That first bullet, shouldn't it read "does" not "can". When does an object in js not have a prototype?
Best advice I've ever gotten when it comes to DRY. Don't analyze if the two blocks of code, in terms of syntax, are the same. Analyze if the two blocks of code are *likely to change* in the same way. This mindset solves the \(absolutely enormous and difficult\) problem, of accidentally over generalizing and then maintaining a confusing piece of code that handles gradually diverging purposes.
This really helped me. Often I'd create something like compileChocolate and then feed it parameters which would then choose the appropriate sub functions. I'm guessing the better approach is to be more thoughtful rather than letting a singular function control too much.
So rather than take apart your points, I'm going to show you why people like react. 1. Single direction data flow. There is always a single source of truth, and only one direction that data can flow. This makes understanding where your data is going wrong very easy. For example, let's say you have `App -&gt; Page -&gt; Component` and `Component` isn't getting something that App is passing to page. Well, we know either App isn't passing it correctly, or page isn't passing it correctly. I understand that passing props through _n_ components isn't great, and that's why there are other third-party solutions (or first-class using the new React Context api). 2. Decent and active community. I think with every community, there are always some people to spoil someone's fun, but there are a lot of kind and smart people willing to help out in React. Even more so because of the popularity. 3. React is becoming more functional. Functional programming is having a come-back, and that makes at least people like me happy. I don't think react will ever be pure functional, and that's okay, and I think everyone is okay with it, too. 4. It doesn't conflict with any of the new and shiny es6+ features, and in fact, encourages that. People in the js community have a short attention span, and love whatever the new hotness is, and this jives pretty well with react. 5. There is an interesting ecosystem. I see you aren't a huge fan of redux, and that's fine, there are many alternatives with differing complexity. My rule of thumb is don't include any fancy tools on top of react until it's painfully obvious that you need it. A lot of boilerplates/starter packs don't do this for various reasons - some are meant to be examples of how to use react+x, others are just opinionated, but most are done by some very smart people who want to share their knowledge and experience, and that's a very important thing for a community around a tool. --- Now to address some of your concerns about react and it's ecosystem. 1. I also don't like JSX, but I don't think programmers should have such a strong opinion against a well developed tool. There are a lot of things that I've really disliked the concept of doing (like pure fp), but it's grown on me. But back to JSX, so what if 10 years ago some people had an opinion? It's perfectly okay for a group of people to have a different, and sometimes, opposing opinion. There is no official and undisputed rulebook about what code should look like and what is absolutely wrong. Opinions will always change based on new knowledge, tools, and ideas. 2. For bind, the short of it is, javascript isn't the best at doing classes, and sometimes you need to manually bind functions if you're going to pass them around. For className, see [this mdn documentation page](https://developer.mozilla.org/en-US/docs/Web/API/Element/className). Somewhere behind the scenes, react has to build a dom node, and set real dom attributes on it, and className is one of those. 3. Thinking in uni-directional data flow really hurt my brain when I started doing pure-fp in other languages, but the patterns. The biggest problem I had was how do I pass data in the opposite direction. Things like redux hide the actual solution, but languages like Elm or other libraries like hyperapp make it more obvious - pass around functions from the root of the app, and those functions can update state/pass props down again. A function on the root has the context of the root, so if that function was `setThing`, it would be performing it's update on the root, not the caller. So if I had `App -&gt; Page -&gt; Component` and App had a function `setTime` and a state `time`, if I pass a reference to that function and the time value to Page, and Page passes them to Component, now I can tell App to `setTime` based on logic from Component, and read/render `time` that's coming form the App state. This is still uni-directional, because as far as the code is aware, App is the one doing `setTime`, which in turn passes the value of it's state.time in one direction. Redux sort of cheats a little by having an out-of-app store, which handles updates, and then you can connect any component to that store to avoid heavy prop passing from the root upwards.
üëéüèªüëéüèªüëéüèª 
You don't add fields to collection! Collection - a set of (might not be in the same structure at all ) objects. Conclusion, you can add any field to any document in the collection and it will store it not spacial action. ( Forget SQL ) If you want to enforce structure ( like tables in SQL) you might wanna use mongoose library's
I can understand how a prototype works in a minute by reading some of the comments here, but I've never needed to apply any of that knowledge to any of my three jobs. I work with React &amp; Node, mid-weight. It's like when a job interviewer asks me what bind/apply/similar do. I can't answer that because when I was learning it was made clear to me that modern best practices move you away from those APIs, and as such if I ever come across code unfamiliar to me like that I can simply check MDN.
Yeah its tough (for myself at least). The approach I normally go mixes functional and OOPish functions. So I might have a global add function that is used inside chocolate functions. I'm at that stage where I'm trying to get past "it works" and into it's elegant, readable, and maintainable.
i didn‚Äôt realize objects could exist without a prototype. i always assumed if you create an object and don‚Äôt assign a prototype it would use the Object object as its prototype. 
Small projects sometimes become big projects. I've been using TS in some smaller projects just to get some practice in, ready for when I end up starting something bigger
Yep I would want to know how it really works. 100% teach her.
sound like you'd want a BaseChocolate class in there you would define things that are constant for ALL chocolates ever. Then you would create subclasses (inheriting from BaseChocolate). that could customize and extend for specific cases. I'll also add that making things easy to extend and maintain is 100 times more valuable than some illusive DRY goal ;) In my experience thinking about how you would enable extensions and customization to your system leads to dry code in general. also when making functions default parameters are a great tool for creating powerful functions without making them difficult to use (and avoids breaking old code too)
They can, but you have to specify it deliberately const obj = {}; // this has Object as its prototype. const noProto = Object.create(null); // this has no prototype You used to see them in the wild from time to time when creating dictionaries or lookup tables; but in today's world with Maps and Sets there's very little use for them outside of extreme optimization (games, embedded, etc.).
Stackblitz is op
The usual object literal syntax in JS will always use `Object.prototype` as its prototype, yes. So the following are equivalent: { foo: 42} Object.create(Object.prototype, { foo: { value: 42, writable: true } }) But you can make an object without a prototype (or technically, a prototype of `null`) as follows: Object.create(null, { foo: { value: 42, writable: true } }) This object will have an own property of `foo`, but it will lack all of the usual Object base properties, like `toString`, and `hasOwnProperty`.
&gt; With the prototype you're not "inheriting" anything. The class methods and properties do not necessarily become part of the "end" object. Methods and properties don't have to become part of the "end" object to be considered inheritance. Inheritance in Python and Ruby, for example, delegates up a chain of objects, just like JavaScript does. I'd also wager that any of us who have used Python or Ruby before were able to do so just fine even before we learned that Python's and Ruby's inheritance was implemented as objects linked to other objects. I think JavaScript beginners could skip past prototypes and still use JavaScript just fine for the same reason that Python and Ruby programmers could skip past the delegation nature of their own inheritance model and still use Python and Ruby just fine. The syntax in JavaScript is good enough now that you don't need to know those implementation details, same as how we didn't need to know Python's or Ruby's implementation details. cc /u/JustOr113
Yep, it does need an internet connection. Everything else will still work even if offline though \(for my projects I'm falling back to a chat box if speech recognition isn't available\).
I am an Angular Developer, can someone explain me what prototype in JavaScript is ?
Might be one of your extensions, I‚Äôve tried it on three different machines with the same result. Video is mp4.
Bootstrap was useful when vanilla CSS solutions were lacking (before [Flexbox](https://caniuse.com/#feat=flexbox) and [CSS Grid](https://caniuse.com/#feat=css-grid) were widely supported). It's just probably unneeded today if you're starting fresh, it doesn't really do much for you that the browser can't support natively. Same with jQuery. It's unlikely that you need a library to gloss over browser discrepancies for simple stuff like element [selectors](https://caniuse.com/#feat=queryselector) and twiddling attribute values like the ~~SEO spam~~ article shows, those are established standards now. Neither Bootstrap or jQuery are _bad_ tools, they get the job done and had a strong historical reason for existing and becoming populat, and I probably wouldn't rip them out of a large existing codebase that's got them in place, but neither are really needed in a new project (or a tutorial). For something this simple there's no reason to promote including a bunch of unnecessary bloat. But it depends on your situational needs too. If you're supporting a bunch of internally deployed Windows Vista boxes locked to IE7 then yeah, you're going to want some libraries to help you cope.
NO. prototype is a weird workaround during the evolution of JavaScript and people worked hard these years to get rid of it lexically. For a beginner it is completely unnecessary to learn about prototype inheritance with ES6 class in hand now. My suggestion: Just teach how general OOP works and treat JS class as if you are using C++. You don't even need to talk about `this` context at the beginning. Knowing any deeper content such as context, closure, prototype will only make her confused.
Open source is more than just having your code set to public on GitHub. You should have your license actually filled out (and not just placeholders). Don't push compiled things (dist) and don't push node_modules. Good open source projects will have tests and code-coverage. Having a contributing.md is good too.
See?? You get a lot of other things...
So, after /u/nickforddesign helped me yesterday, after some struggle my front end started taking some shape. I already can make a post request and put data from my interface. Now I have to make my app show charts with data retrieved from de server. So I have to make my chart framework (using google charts by suggestion) make get requests, then it receives a JSON with the data, turns that data into a table, filter that table into a view (as my DB stores 3, or 4, bits of information it being: state name, state population and state GDP) and then make a chart from this view. I know the process but can't figure out how to make it work? Can someone here offer any help?
Slight tangent, but man is modern JS interviewing outdated. There are so many questions like bind/apply one that get asked but are never really needed in the wild like that. You should know what bind is if you want to work with React, but knowing apply or its syntax I‚Äôve never once needed off the top of my head.
I found it really helpful in my understanding, although I came from a background of knowing several languages before JS, which comes with the burden of having to unlearn existing inheritnence models. Someone without that baggage may be able to come to a more intuitive understanding without needing to be taught it explicitly. I will say that there were 3 concepts that really unlocked the JS world for me: prototypal inheritnence, execution context, and higher order functions. Once I understood how all of these worked, I started feeling like I could reason much better about what my code was doing and where things might be going wrong when I'm troubleshooting. 
is gitlab allowed ? https://gitlab.com/moshmage/rxjs-socket.io/
Can you try Discord/Slack channels? Just don't give them too much information, you don't want to reveal company secrets. 
From what I can see, the Vanilla version is simply creating new nodes as fast as possible, which is what you would expect. The VDOM libraries are doing the equivalent of the Vanilla version, just with 15ms of overhead to maintain the lightweight VDOM parallel structure. HyperHTML looks at the array being passed to it and creates the nodes as it finds them, which means it gets into a "lookup, create, instantiate" loop that is slightly slower but applies to updates as well as creation. The same logic applies to all situations. This is why HyperHTML is so small. Consider, it has replaced the entire functionality of JSX by using template literals to the point where it's a full Turing templating language in pure JS, no pre-processing, no build time parsing, no compiling or anything else.
Don't underestimate the value of talking to non-devs near you in the company. Just because they can't code doesn't mean they don't know how things should work. 
Again, I‚Äôd love a side by side comparison.
https://en.wikipedia.org/wiki/Rubber_duck_debugging
I think people would have a much easier time understand prototypes in JS if \[\[Prototype\]\] of each project \- which is the fallback where it can look for properties it can't find on itself \- and the prototype property of functions , which is what is assigned as the \[\[Prototype\]\] of objects created by calling the function with the new operator had different names.Also, when you call a function using new and the \[\[Prototype\]\] of the newly created object is thus set to the function's prototype property, using instanceof to check if the object inherits from the constructor function returns true for the function \- it's kinda weird, you'd think you have to invoke instanceof with the function's prototype property, as that's what the object is actually inheriting from.I mean, how many people here are sure if the prototype of {} is Object or Object.prototype?It is, Object.prototype.I wish jQuery hadn't decided to invent $.fn as a prototype to $.prototype. I can't help but feel that that has obscured how jQuery works and how JavaScript itself works for many. Many developers know well what adding properties to $.fn does, but have no clue what adding properties to $.prototype would do, even though it's the same.
 I think people would have a much easier time understand prototypes in JS if \[\[Prototype\]\] of each project \- which is the fallback where it can look for properties it can't find on itself \- and the prototype property of functions , which is what is assigned as the \[\[Prototype\]\] of objects created by calling the function with the new operator had different names. Also, when you call a function using new and the \[\[Prototype\]\] of the newly created object is thus set to the function's prototype property, using instanceof to check if the object inherits from the constructor function returns true for the function \- it's kinda weird, you'd think you have to invoke instanceof with the function's prototype property, as that's what the object is actually inheriting from. I mean, how many people here are sure if the prototype of {} is Object or Object.prototype? ^(It is, Object.prototype.) I wish jQuery hadn't decided to invent $.fn as a prototype to $.prototype. I can't help but feel that that has obscured how jQuery works and how JavaScript itself works for many. Many developers know well what adding properties to $.fn does, but have no clue what adding properties to $.prototype would do, even though it's the same.
&gt; This is why HyperHTML is so small. 12.4k [1] is not unusually small. plenty of vdom libs are in this ballpark (or smaller). &gt; Consider, it has replaced the entire functionality of JSX by using template literals to the point where it's a full Turing templating language in pure JS, no pre-processing, no build time parsing, no compiling or anything else. That's a lot of exciting "benefits" that should theoretically translate to best-in-class memory footprint and/or best-in-class performance; unfortunately, neither of these is actually realized in practice. [1] https://github.com/WebReflection/hyperHTML/blob/master/umd.js
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [WebReflection/hyperHTML/.../**umd.js** (master ‚Üí f84c6cd)](https://github.com/WebReflection/hyperHTML/blob/f84c6cd66fce4f4812d9678e2434a7b05fa4d7d2/umd.js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dz2z1ck.)
As the parent comment says, it's easy enough to understand that you should just do it. The "You Don't Know JS" series of books covers prototypes thoroughly and it's not that tough. With that said, please consider using composition over inheritance.
mp4 is a container, what's the video format? If/when you do figure it out, here's the support table: https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats
Thanks for your response. I actually didn't know about property descriptors, [Object.defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), or [Object.getOwnPropertyDescriptor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor). Now I do. Hell yeah.
I'd say no. I've learnt about prototypes several times because knowledge tends to fall out of my head if I don't use it and I've never had to use prototypes; especially not in the last few years. Personally I avoid almost all inherritence nowadays. Function composition is much more useful and less confusing. 
&gt; It can't do best in class memory or performance because it's doing it all on the fly, whereas the other libraries have moved the load to build time. i can't make sense of this statement. sure, there are libraries that use Babel for compiling away the JSX. but there are also plenty that use have pure JS apis and everything is also done at runtime. for instance, ivi's [1] compilation steps only compress and code-shake the JS/TS and do not reduce any kind of "parsing". perhaps you're only comparing to libs that are HTML-like and use JSX or similar, but those are not the only vdom libs out there. and no one is stopping HyperHTML from pre-compiling its tagged template strings (if it can), so i'm not sure what the assertion you're making here. &gt; I'm happy with green squares everywhere as a starting point i guess it depends on what shade of green you're happy with :) the difference between the the fastest green and slowest green is 20%-30%. [1] https://github.com/krausest/js-framework-benchmark/blob/master/ivi-v0.10.0-keyed/src/main.js
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [krausest/js-framework-benchmark/.../**main.js** (master ‚Üí a08b22a)](https://github.com/krausest/js-framework-benchmark/blob/a08b22aa94a1a0bd8df833c06ed1cf20dca0977e/ivi-v0.10.0-keyed/src/main.js) ---- 
Can you provide an example where a prototype can do something a class cannot?
I think we've both put forth our positions, so I'm replying to clear up the statement. I am comparing libraries that need a compilation step (eg, JSX), and those that operate purely in runtime. I have nothing to do with HyperHTML, I don't even use it at the moment. I'm noting that it has a particularly elegant approach, and has a range of consistent abstractions that fit into tight code. My work is in 3D graphics, I spend all my time in shader code. I'm only here because a browser is an efficient and universal means of deploying 3D hardware accelerated graphics to an audience.
If you ever used Prototype.js back in the day (I did extensively for Palm/HP webOS development in '09-'12), ES6 classes and their relation to Prototype was clear every step of the way: https://en.wikipedia.org/wiki/Prototype_JavaScript_Framework
If you're using webpack, there is [webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware) that can watch/rebuild and either live or hot reload the page. Also, what do you mean by this? &gt; but without losing any of the 'magic' that react offers when run on the client.
https://www.npmjs.com/package/avsc
I think one should be aware of the idea behind it, but that's about it...
it's basically how classes work internally. JS doesn't actually have classes, what we know as classes is just syntactic sugar for prototypical inheritance and stuff.
well I mean, it does have the class keyword... it's just.. something else entirely.. that still works mostly like you'd expect knowing classes from other languages... 
&gt;V-dom gets diffed by calling into a few functions, concerning only the nodes that need changes. I don't think that's entirely correct. When diffing, it's nescessary to check every node of the (sub-)tree, which more often than not includes more nodes than those that were changed. However, only the nodes that were affected will have their changes reflected in the DOM - that's the essence of VDOM. &gt;Especially considering that nothing has ever managed to come even close to Fiber/Suspense yet in terms of performance "performance" is a bit vague here. What the OP is concerned about is time to create/render/update DOM, what you're talking about is FPS, which is *perceived* performance. &gt;since scheduling is the actual bottleneck Scheduling on its own is a performance loss, not a performance gain. It's a tool used to trade performance for perceived performance. Fiber cuts up work in pieces to let the browser render in between computations/diffing. 
no problem. i'm simply replying to your original comment: &gt; Virtual DOM's time is over... it's template strings now, because there's no re-parsing of the string for updates. perhaps it is over for those who can accept a 20% perf penalty relative to the best available vdom options. that would be a more accurate statement.
If you have a compilation step. :)
+1 Stackblitz is really great, especially for quick testing of React components
You've kind of proven my point. I use TypeScript (and previously Babel w/ a few select stage 2-ish plugins) and as such I don't even need to use bind. If someone asked me a question about it, I'd be able to answer it but I shouldn't even need to. It's completely irrelevant to my ability to perform well at my job.
It should still work, that change only affects video autoplaying! Does this play anything for you? https://flavio-speech-api-example.glitch.me/
I think this is mostly an information for other developers or your future self that the reference doesn't suddenly change. I agree though, it's a bit confusing that you can change the object itself. Maybe JS could introduce some other keyword for truly immutable objects.
Hello üòé
If you do not know why you should use a tool, that usually means you do not need it, and this manifests itself as 'it does not make sense'. When you work yourself meticulously from the problem to the solution, you know exactly what you need. In any case, given your question, it is very highly unlikely that you need what typescript gives you.
Jump over to TodoMVC‚Äôs website and look at the dozens of possible ways something like this is done. 
Douglass Crockford wrote about it over 10 years ago in his article ["Classical Inheritance in JavaScript"](http://www.crockford.com/javascript/inheritance.html). Prototypical inheritance in JS is so powerful that it can easily imitate class based inheritance, as well as other types of inheritance. But be warned, he concludes with a later edit: "I have been writing JavaScript for 14 years now, and I have never once found need to use an uber function. The super idea is fairly important in the classical pattern, but it appears to be unnecessary in the prototypal and functional patterns. I now see my early attempts to support the classical model in JavaScript as a mistake." Avoid inheritance whenever possible and prefer [composition over inheritance](https://en.wikipedia.org/wiki/Composition_over_inheritance).
You're preaching to the choir. I exclusively use composition over inheritance, both in normal JavaScript and in React. I simply asked for a situation that prototypes can achieve that classes cannot.
Thanks Wahoo! I‚Äôm not thinking HFT, just good old daily or intraday bar based trading systems. The charts are custom built, pure JavaScript and HTML5 canvas. I migrated the C# charting component I devloped in another project, Quantacula Studio.
https://www.smbc-comics.com/comic/the-rubber-duck-method
&gt; Prototypical inheritance in JS is so powerful that it can easily imitate class-based inheritance, as well as other types of inheritance. And likewise, class inheritance is so powerful that is can easily [imitate prototype-based inheritance](https://www.reddit.com/r/javascript/comments/4j7r9w/5_javascript_bad_parts_that_are_fixed_in_es6/d351fl5/). ;-)
&gt; prototype is a weird workaround This is bad advice. It is not a weird workaround. Prototypical inheritance is more powerful than class-based inheritance and therefore you can easily implement class-based inheritance using prototypical inheritance as Crockford wrote over 10 years ago in his article ["Classical Inheritance in JavaScript "](http://www.crockford.com/javascript/inheritance.html). The other way around does not work: class-based languages cannot imitate prototype based inheritance. Prototypical inheritance is easy to learn and I recommend Kyle Simpson's great series of books ["You Don't Know JS"](https://github.com/getify/You-Dont-Know-JS) where he cover prototypes in complete detail. &gt; treat JS class as if you are using C++ Since C++ supports multiple inheritance and JS classes do not, this sounds like more sketchy advise. If you wanted to support multiple inheritance in JS (please do not), you could try some of the suggestions from [this Stack Overflow answer about multiple inheritance in JS](https://stackoverflow.com/questions/29879267/es6-class-multiple-inheritance). It takes so little time to learn prototypes in JS and how they work that I would just teach it. But I'd also add that it's rare that I have to use them in my own code. Inheritance is highly overrated IMO and causes more problems than it solves.
&gt; Function composition is much more useful and less confusing. Yep. &gt; I've never had to use prototypes; especially not in the last few years. You'll come across it in other people's code, which is why it's good to learn once, and be able to go back to it when you need it. 
Right, and that's the issue. When most people coming from other languages see the class keyword they assume JS has classical inheritance when it's actually prototypal inheritance.
&gt; You'll come across it in other people's code, which is why it's good to learn once, and be able to go back to it when you need it. Except I haven't. If I ever do I'll go and refresh myself on how it works, but I'm not going to bother on the off chance. 
You'd record in segments and upload them to a server for them to be joined at a later time.
They only reverted the WebAudio API as far as I know. I've been following this issue since a big project of mine is audio based.
Thanks for that. That's fairly new (2017) and it's interesting it took that long for someone to show it can be done. The last sentence is a little concerning though. "We've finally settled on the finished object structure to reproduce JavaScript's behavior (**or as close as we'll get here, anyway**)". It makes me wonder what's missing, and I don't have time ATM to dig into it.
If prototype inheritance is better than class-based inheritance we would not have `class` keyword now. Yes prototype is easy to learn it is not what we learned from text books about OOP. I may have used an improper word "weird" but remember, we are talking about how to teach beginners. It is easier to explain "create an object using the class def as a template" than "create an object then copy the prototype into it". About C++, please don't misunderstand. I'm not talking about multi inheritance etc.. those hard to understand concept. Again please remember the context of this topic - how to explain JS OOP to a beginner. 
I have quite a bit. My advice wasn't for you. It was for the OP and other beginners. It takes a couple of hours to learn prototypes. You might as well learn it once so when you see it you know what it is, and know where to go back to to refresh your memory. Kyle Simpson's free ["You Don't Know JS"](https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes) is usually so thorough that I just go back and read the chapter on Prototypes and I'm good.
Fair enough :) - although there's so much to learn I'd probably advise my juniors to spend that time learning something else unless they specifically need to deal with code that uses prototypes. You Don't Know JS is an awesome resource for if you ever do need to know it though. 
You should develop a web site where people can gather to anonymously steal-- I mean discuss-- each others ideas. 
Isn't that stackoverflow? lol
Might be a decent idea, never looked at either of those!
Based on this comment, maybe not much. Which is new to me. https://www.reddit.com/r/javascript/comments/8jtxf9/should_new_developer_need_to_learn_about/dz38iz8/
I couldn't help but choke on my lunch reading this.
I was just about to say how I use it in games and then the last note got it covered. I'm on you with what yo usaid.
My pleasure
You can also call `.setPrototypeOf()` (for example, with `null`) to change the prototype of an existing object, although this is discouraged.
Definitely disagree with "why and not what" part. For project of this size, it might be somewhat acceptable, but the moment you introduce slightly complex logic it's always better to explain what the exact intention was. Think of any numerical algorithm ever - to understand what the code is doing, you should know the theory behind it.
YES!!!! this is the key to programming languages
&gt; The last sentence is a little concerning though. "We've finally settled on the finished object structure to reproduce JavaScript's behavior (or as close as we'll get here, anyway)". It makes me wonder what's missing, and I don't have time ATM to dig into it. For example, in JavaScript each object property has attributes that mark that property as writable, enumerable, and configurable. Maybe not a big deal, but I didn't want to claim we've _exactly_ reproduced JavaScript's behavior in _every_ way.
In JavaScript, every value is an "object". And when I say "object" I don't just mean things like `{ x: 42 }`, I mean everything. The only real exception is `null` (which is ironic because JS tells you that `typeof null === 'object'`, but just think of `null` as a special "empty" object). Every object has its "own properties", for example `x` is an own property of `{ x: 42 }`. But each object has something else: a *prototype*. To get the prototype of an object we can call `Object.getPrototypeOf`. The prototype can be any other object (which itself has another prototype etc.), or `null` to end the chain. A couple of examples: Object.getPrototypeOf(42) === Number.prototype // Contains toString, toPrecision, etc. Object.getPrototypeOf('foo') === String.prototype // Contains charAt, substring, etc. Object.getPrototypeOf({ x: 42 }) === Object.prototype // Contains hasOwnProperty, etc. Object.getPrototypeOf(null) // Error! What JS does, is that when you access a property on an object, and it's not an "own property", then JS will look in the prototype. If it doesn't exist there, go up the chain again, etc. until you reach null. That's why this works: ({ x: 42 }).hasOwnProperty('x') // Works, because `hasOwnProperty` is found in `Object.prototype` This prototype mechanism is very powerful, you can use it to implement things like classes, inheritance, mixins, etc.. Check out [this article](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) for an introduction, and Douglas Crockford's ["Classical Inheritance in JavaScript"](http://www.crockford.com/javascript/inheritance.html) for some fun things you can do with it.
I think that‚Äôs almost exactly what I‚Äôve implemented. Although I used the name of getWeather which has a showPositon function which calls the weatherUpdate function. That then updates the page. 
Actually yes... so in my last two jobs I've been the only developer IN office. Both places with remote teams with hours that don't match up. I found forums are a decent place.
How/when is it multiplayer?
Fun stuff; reminds me of Combat on the old Atari 2600.
I'm in a similar position but luckily I am close to the public facing dev team so I can talk to them. However, in my free time I sometimes do work in Unity and I've found the discord server has a great community. Maybe try out the SpeakJS discord server, I've received good help from there before.
wow, when I was learning OOP in the college, we had to do this with java and swing. this brings bad memories, at the time it was impossible to do
Now, you could see people joining and you can open two windows and watch yourself join. More like a massive multiplayer as there isn't matchmaking/invites but yeah, multiplayer.
Are you putting the project on GitHub? Is there a link?
Is there a demo anywhere?
Writing from scratch was cool/necessary 10 years ago. Now it's irrelevant. Your skill level as a developer isn't at all under any circumstances dictated by your capacity to implement your own UI framework, or any framework for that matter. Your goal is to solve problems not create them ;)
Yup, that's what I did. Slowed things down a bit but it worked. I sent the chunks over sockets for processing.
How are you dealing with state synchronization? Do you use delta updates and if so at what interval?
spaces v tabs... fine, but do use Prettier configured with spaces then (if you're not already). As the old* saying goes, _everyone hates what Prettier does to their syntax, but they love what it does to their coworkers syntax_ ^*old&amp;nbsp;is&amp;nbsp;6&amp;nbsp;months&amp;nbsp;in&amp;nbsp;JavaScript
Please add aiming per mouse. I can't be the best with this crappy controls. #esport
Like you, I was frustrated with existing articles out there, which all seem to repeat the same stuff. But later I found out - **prototype inheritance is not hard**. I have written an article that explains it _from the ground up_. It explains: * constructor function vs class * `__proto__` vs `prototype` * Prototype inheritance chain * Class methods Unlike other articles, it explains from the ground up, and also provide actual code comparison between ES5 and ES6 syntax. Please check it out [here](http://blog.brew.com.hk/classes-in-javascript-explained/) and let me know if it helps!
Pretty ingenious what you guys did back then. anyone there predict how much of the world would adopt so much of what webOS was doing at the time? (I was a webOS engineer from '12 to '17) 
Unnecessary noise
Not OP but there is a really great resource here: http://buildnewgames.com/real-time-multiplayer/ with source code included
&gt; In ES7, there's a new :: bind operator. Nope.
I've never really had to explain the difference between them, not even sure I could quantify it. The only difference I personally see between javascript style prototype inheritance and literally everything else class inheritance, is that in javascript, you're creating the thing first, then stuffing it with whatever behavior, instead of defining the thing at the same time as you stuff it with behavior. Now, of course, there is the difference that you can later stuff more stuff into it's behavior at runtime.. which is not something you can do with any language i'm aware of other than Javascript. I don't know if they still teach it this way, but back in the 80's, the definition of a class was called it's prototype, and may be part of why I'm not seeing the differentiation based on a naming scheme. IMO Javascript's method of implementing inheritance using the prototype special, exists because someone wanted an inheritance system, but were stuck with jamming it into the existing language, without introducing a whole ton of new stuff. Due to the way Javascript works, you can muck with an object's prototypes at runtime, but that's not a feature of it's inheritance model, that's a "feature" of Javascript itself. Overall, to answer OP's question-- If she's ever going to be looking at anyone else's code, then yes, will probably need to understand how classes, prototypes, and inheritance works in Javascript. If she's only going to be writing own code, I'd avoid the topic altogether, until someone finds a compelling reason to use inheritance. 
Thank you, I needed this starting point so much!
This is awesome. Please throw this up on Github.
One quick suggestion - it would be nice to have alternate arrow controls (not just for this game but maybe future games as well) - not all of us have Qwerty keyboards so WASD might not work. Arrow keys will work always.
&gt; Class-based inheritance: To add a new property or method to an object, you must create a new class and then a new instance of that class. ... Prototypical Inheritance: you can alter the object in whatever way you want afterwards - remove, change as well as add new properties. That's not really a class vs prototype thing. It's more of a static vs dynamic thing. And though Java's classes are static, that's true, Python's classes, for example, are dynamic. Python's objects -- and the classes themselves -- can be altered at runtime to remove, change, or add properties or methods. &gt; So even though ES6 introduced the class syntax, classes in JavaScript are different to classes in other OOP languages. Depends on the language. JavaScript's classes are different than classes found in Java/C#/C++ but similar to classes found in Python/Ruby/Smalltalk.
lol
Great fun, good job.
1 and 2 letter vars is a bad habit. It would most likely make it easier for everyone, especially learners to have full named vars. You don‚Äôt pay for each letter, and the cost for using more is near non existent.
&gt; class-based languages cannot imitate prototype based inheritance That doesn't sound right. For example, here is a prototype implementation for C#: https://github.com/Wintellect/ProtoSharp
We just had a 10+ players intense fight. Gg
This was great, thanks for sharing! Sadly, looks like the demo isn't working. But it only took me a few minutes to get a local version working from the [GitHub](https://github.com/underscorediscovery/realtime-multiplayer-in-html5)
You can, I want to combine this two in my career. I recommend Robert Kiosaki... However code is my main priority for now to find job and stuff... 
I spent 6 months selling on shopify. Broke even so I gave that up. Back to programming.
Do more little things. They help you feel accomplished without presenting you with big, discouraging problems.
Less then a year and stuck? How could this be possible.... Either you are motivated by figuring these things out or you are not. Not sure if this can be taught or learned or developed as much as it is inside a person. I have been tinkering with computers and electronics for the majority of my life now, and I can tell you at 40 I still hit walls, it happens. Learning how to step back and look at the problem from many angles could help, but again, who knows?
When I first read the title, for a second, I actually thought that OP meant Prototype.js :D Did you also use Script.aculo.us for webOS? It was the bomb back in the days.
Should play "you suffer" everytime the price fluctuates. 
Really nice work, would love to learn from the source code if it's possible to share it. Keep it up!
That was pretty fun, great work on it
&gt; If you see the definition for age and the definition for cost, you immediately know that cost is 60, no matter what code is in those 40 intervening lines. On the other hand: Yes but const a = [1, 2, 3]; /// 59 lines later a.push(45); /// 123 lines later a.length // you have no idea what it is
Wow, thanks for such amazing answer.
So this uses websockets? Just a couple of days ago I got a PHP websocket server working pretty easily using [Ratchet](http://socketo.me/), in case anybody would have an easier time with PHP as opposed to node, just because they use it everyday, like me. Ratchets instructions are worth reading, but no examples to download. I found [this](https://github.com/cboden/Ratchet-examples) github repo of examples basically worked out of the box. You need to use composer to install it. Command line $php bin/chat.php to run the websocket chat server. To connect via JavaScript, just this: var conn = new WebSocket('ws://localhost:8080/chat'); 
That's not how JS got it's inheritance model. Prototype based inheritance was around before JS and many other languages use it. https://en.wikipedia.org/wiki/Prototype-based_programming
Sorry, when I replied the edit wasn't there.
You don't sit alone at your desk in the dark staring at source code all night after you get off of work? Get a load of this guy, it's like he has friends or a life or something. 
He loops it using setInterval
Sure, `const` never implies anything about the reference being mutated &gt;Once you understand what it guarantees and what it doesn't - which is quite easy to figure out - you'll have no trouble with using it Knowing that a particular reference is not going to be reassigned is useful information, orthogonal to mutation.
... that was sort of a joke. But it really does kind of make sense, considering how so much of early Javascript feels like it was shoehorned to fit into an existing system that wasn't flexible or well designed. 
I found a cheat. The #gamecanvas height and width is only set once at game initialization. So if you open developer tools, you can edit the inline styled values and drive off the map. You'll still be able to snipe people, but they can't see you if you they haven't also used the exploit.
I just want to add that: "The much more important decision to make is if you intend constant behavior or not. Don‚Äôt just use const on variables that otherwise don‚Äôt obviously appear to be treated as constants in the code, as that will just lead to more confusion." \(From the book "You don't know JS" by Kyle Simpson\)
it's unplayably laggy for me, i got killed by a bullet that was probably about two hundered pixels away
It reminds me of Combat!
Sorry, should have been clearer, the video is H.264, AAC. Love from all. Got any suggestions?
I 100% relate to this, but I also understand where the OP is coming from. I've worked in engineering ( electronics ) and tech for the last 25 years, and it's that curiosity, that drive to figure out how stuff works that drives me forward. I've learnt that not everyone finds it an enjoyable process, especially the "wall" aspect. I think everyone has a threshold of tolerance, and I found mine about 10 years ago when I decided Rails was the future. After a year of banging my head against a brick wall trying to get a Spreecommerce store up and running, I was done. The stack was like Jenga, and the community were dicks. I could have that store running on Keystone / Node in about a week. It's worth sticking it out with Javascript, at least you'll always find the answers... somewhere!
nice game, i know game is not the point here but have a few ideas: 1- reduce one point on each bullet 2- if you kill someone you get 20 points
I can't say that I relate. I've been doing javascript 14 hours a day for less than 1 year and I don't get stuck on small problems at all anymore. I'm extremely productive and javascript has become a mindless grind 95% of the time. I get stuck when I use a new framework, or sometimes a new API, but that's about it. There was some milestones that were difficult. 1. Promises and callbacks took forever to understand, but you use them so often they become 100% second nature. 2. How to organize your modules and files for infinite scalability. That took a few projects to get the hang of. 3. Unit tests, this is a pain as it requires a deeper understanding of javascript, getter, setters and this keyword to be able to create mocks of your apis and modules properly. I still get stuck for a few hours sometimes when trying to mock a new framework or API, but that's pretty much the only times I get stuck anymore. I expect at some point I'm gonna have encountered all problems and won't get stuck at all anymore. ES6 javascript is extremely easy to learn. I'm not a genius, probably just slightly above avg IQ. 
Super cool and creative. It played out a little fast for me though and I wasn‚Äôt able to read everything. Viewed it on mobile. 
Clever
SO doesn't discuss. SO shames.
Pretty dope. I would make it full stack and when someone visits a route to yoursite/a-startup-name their company name will replace "your startup". Would make it seem personalized.
Would be interesting to gather "dwell time" metrics. You could see which slide or transition causes people to lose interest. Anecdotally, I closed the tab when I saw "coffeescript". I think you could get some interesting results.
`this.loopInterval = setInterval(loop.bind(this), 1500);`
I can see effort put here but and a good base idea, but the execution was done poorly, fast speed and colors/design felt like a bootstrap page, you're on the right track but put more effort to make it look sleek and professional.
Easier to maintain. What if you need to pass additional data for each listener you have everything in one place. You can simply unsubscribe all subs in any condition in one place.
Good job man. Really good idea. I agree that you need to introduce a navigation that allows people to jump between sections and go back if they need to. Just in case they miss something. 
I really like it. Two things you could do better: Increase the interval from the code that shows. I couldn't even read the second lines ;D Last page: add something like "Watch first page, watch typescript code, watch my github wording" etc. where you go can go steps back and look at the seperate layers. 
That's not a cheat. It's the current meta in pro scene
Wow! well done! i love it!
Serialist: a serialization lib with a focus on extensibility. https://github.com/jeswin/serialist
Yeah, blame it on the lag /jk
Those are great ideas. But I think a chat would've made the most difference
Just an FYI, you can get spawned into the corner of the map and be unable to move. And, at least to me, the players stuck around after death, and their corpses could block your other shots. Fun game though!
If you're interested about why and how, the story is here [https://medium.com/@DidierFranc/when\-react\-has\-become\-even\-more\-asynchronous\-37a55c3a3d3](https://medium.com/@DidierFranc/when-react-has-become-even-more-asynchronous-37a55c3a3d3)
I'll give it a go - I think that change impacted more than just videos: https://www.engadget.com/2018/05/16/google-chrome-66-muting-autoplay-rollback/ 
Without your code to see, your best bet would be to have an alert on your onClick event listener to check it actually does get called, then see if you can make the menu expand. Check for typos and stuff, console.log\(\) all the objects to make sure you are targeting the right thing. Another piece of advice would be to take that portion of your code into a different set of files so you can tinker with them safely. Hope this helps!
That's really cool, would be nice, as others are saying, to see the source code 
Thank you for the fast response, I posted the code now.. I have a backup so Im just whaling at the code like a retarded monkey but to no avail.
FYI that works fine on a Mac - it's Win10 that's causing problems
Yea, I see your problem. The DOM \(HTML tags\) in your document have not yet been loaded when your JS is executed. If you move your \&lt;script\&gt; tag just below the copyright section, you will get your menu to work.
Thanks man that worked like a charm.. appreciate it!
Java is to Javascript as Pain is to Painting, or Ham is to Hamster.
Does a pilot need to know how wings create lift before he starts flying an aircraft with 400 passengers on board? Some might say no, because it simply works no matter what he knows about it. If the pilot believes it's magic or invisible flying unicorns then it doesn't change anything in his training to control the air craft. I'd say yes. It might be something he'll rarely find useful, but at some point it might offer that tiny bit of life-saving information you desperately need.
Easiest way to do this is to use bootstrap and you will have nice stylish accordion without any js knowledge https://getbootstrap.com/docs/4.0/components/collapse/ 
JavaScript is a ubiquitous language but it very weird and sometimes can be very frustrating if you try to create something as complicated as a graphical game. If you and your son has no significant coding experience then you will probably not make any siginificant headway in JavaScript. If you have a Mac or an iPad. Looks at developing for IOS using Swift playgrounds. This was designed specifically to teach kids coding and will focus on games right away. I am not familiar with an Android counterpart to that https://www.apple.com/swift/playgrounds/ As far as learning resources one of the best beginner friendly stuff is a website called udemy.com where you can subscribe to complete video courses for a cheap price (around $10 each) per course and some of these courses are over 20 hours long and come with many design projects 
Make wrapper function to subscribe on needed event, and you'll have the same level of control. I mean, publisher/subscriber is a nice pattern, but you don't really need to implement your own to fire DOM events, because you already have it. Or probably you need better example.
Well done mate, it looks great
very clean, very nice. Great job!
Just try one small goal per day! Something new or something you are stuck on. Even if it‚Äôs not resolved, it could be a step in the right direction. Count it as a win!
Man, don‚Äôt get me started on how long it took me to understand promises, looked like alien technology back when I started. Now you can‚Äôt read my code and not think I‚Äôm a Bluebird Fan #1.
I've had a nice time playing this, tuvm :)
What stack/libraries/frameworks does your team know already?
also. I see no link to a downloadable resume. All in all it looks amazing. :D
that is really great work, nicely done!
nobody. that's why I quit and found myself a better job with several coworkers.
For an MVP I don't see why you shouldn't use mern (or any other stack that the people in the project know already). This is more a personal choice than a technical. Before you hit the technical limitations of any stack you will know how to progress. Don't plan for Web scale (aka Facebook). Move fast, build, ship, repeat.
tl;dr: Yes. You can put completely normal Javascript through the Typescript compiler, and you don't have to move to a typed codebase as though it were Java or AS3. I mainly use Typescript as a check for Javascript code, but with a lot more IDE hinting and documentation. I can also put in some extra information for interfaces. The TS vs JS question always seems to think using TS is the whole every-variable-is-typed full blown deal, whereas the major advantage of TS is being opt-in.
I guess you missed the "scroll mode"-button at the bottom.
What kind of problem and how are you trying to solve it? Because I read it like you try to google it and get frustrated with not finding a solution. Maybe one way to go would be to read up on general problem solving and how to break up a large task into manageable chunks while maintaining the overall goal of the project? Not every detail has to be special or elegant, as long as it works as expected. Don't be afraid to write more code than less. Split up the flow into multiple files and functions that do what they should do within their scope and nothing more. Make sure you keep improving on code quality and translating problems to solutions as those are the valuable skills. Don't worry about the latest and most hyped frameworks, libraries, technologies, practices. They will all come and go. Finally, don't try to make it cool. Aim to make it well. 
Yeah but from UI perspective 
after using JS for 3\-4 years on what noob problems do you get stuck?? I don't understand ?
I'll be honest, if I came across this resume I would have checked out after the first 5-10 seconds. People who are reviewing CVs are usually looking through stacks of them and the last thing they need is something like this. Also, the animation is a bit ... shoddy. And I don't think it tells enough of a story about yourself. Consider adding details about your experience, some links to examples of your code and potentially a friendlier photograph than the one you've gone with. But honestly, a regular (often plain text) resume is the best bet. Best of luck!
It‚Äôs a little unclear why you want this, but distance between markers like that is calculated based on directions, which is determined by your mode of transportation. Want to travel by car? Driving directions. Bus? There are public transport directions as well. The issue is you are traveling presumably by land until you get to the water and then ‚Äújumping‚Äù across to your next marker. One possible solution could be directions from markets a-b then distance matrix from market b-c (across the ocean) then directions from c-d. 
Good luck ‚ò∫Ô∏è
Nooneknowswhoami, more like Nooneknowswhereami
I'm not so sure it appeals to just start-ups. I'm a software developer hiring manager at my company (traditional, non-profit, no-nonsense software development), and if I had an applicant with this as their personal website *linked* on their normal resume, I'd be pretty impressed. Honestly, I see so many personal websites that are just garbage, this one is definitely a tier above average.
Ah yes, the rpg scrolltext style. I hate that style. Especially since reading isn't letter by letter
Yeah I know, and such scripts are mostly used by non programmers and when programmers like you are interested - I am here to help :)
I went into this thinking I would hate it. I was pleasantly surprised. Nice job.
-webkit-overflow-scrolling: touch; But it looks awesome overall!
Who gets stacks of resumes for development positions. We had a really hard time finding someone.
looks great, but when I add todos all I see is random string in list not something I wrote, you better check on this. also I could not check all items, only some were checked while about 3-4 items weren't checked even when I tried to do it one by one clicking on checkbox.. seams like its a minor bug you missed. 
I had this fixed locally but forgot to deploy! Should be working now.
Nope, just straight-up Prototype.js and whatever came out of my hands. :)
Or at least speed it up ... a lot. I checked out after the first 10 seconds because it was giving me information too slowly.
I'm not sure I've gone to the prototype methods and never looked back. Even encapsulating if I am binding/using functions. Theres no good reason. Just less testing if I write it this way.
As someone who considers themself a fast reader, this was too fast. Slow your frames down!
Eloquent JavaScript is an excellent resource. 
I'm always amazed how people manage to reverse engineer so complicated stuff. It always seems much more difficult than the original implementation itself.
You should know that it's a dark world with no return. Just kidding :) For start I recommend *You don't know JS* series by Kyle Simpson - it's available online for free
I'd go with React or Vue, it looks like a project with lots of dynamic filters, changes etc. for which these libraries are great
Looks nice, but how can I mark a todo as completed? When I select it, nothing happens
Hi /u/D3MoN98, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/bhrgunatha, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/HamsterWheelEngineer, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Hi /u/cutcss, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Hi /u/knock_on_wood_yall, For javascript help, please visit /r/LearnJavascript. Thank you!
Maybe you have a problem with over-engineering stuff? Usually the simpler solution the better. You don't have to make every single bit of code perfect. Of course that doesn't mean you have to write obviously bad code, but sometimes it's better to move on with a simple solution.
I found that once you find something that works, use it. Im not suggesting you revert back to only jquery, but if you really ‚Äùget‚Äù react and redux/mobx etc you are well set to the future. Myself have settled on what works best for me, react, with as simple components as possible, typescript and mobx-state-tree. I can get a long way with only those 2 libraries. Im not interested in Vue, angular, etc etc. They all solve the same problem, so i get no real benefit for switching. Tldr. Use what you like, and are productive with. Like oop? Use some more oop library, like fp more? Use something like react etc.
With ES6 arrow functions *this* problem almost doesn't exist anymore
Nice tutorial, simple and clean. I like that it has CSS included - it's always better to work on something pleasent to the eye.
I can't really think of any advantages. You will most certainly end up in a complete spaghetti code with a mess full of changing state and views. 
Before learning any more advanced stuff it's always better to really get the basic fundamental knowledge which is universal across all the libraries and frameworks
I'm more amazed that people bother. Their stated goal is that the project will \&gt; will eventually lead to a custom client But if they ever plan to make money off this, or whatsapp just doesn't like it, they change something and the entire clone site just stops working. Then you need to re\-reverse engineer whatever broke. A whole ton of effort for zero gain.
Phone gap is quite an old tech, I'd recommend checking out React Native which works much better and faster
Good comparison. I think Cordova is a good choice only if you have an already existing application and you want to port it to mobile. 
whats the purpose of the python layer... seems like an oddball that could be left out.
Specifications like Avro and Protobuf are surely more compact and performant, but dependence on a schema (auto-generated or not) leads to more complexity and compatibility issues. I only tested serialization methods that include the complete schema in their output.
Exactly, your functional components should be in separate files. But if you don't use state you don't necessarily have to make them functional components. You can use `PureComponent` which can be even faster than functional components. https://medium.com/@antonkorzunov/2-things-about-purecomponent-you-probable-should-know-b04844a90d4
I've updated the project to include more open-source friendly practices. - I've started adding tests for the functionality (Using Mocha/Chai). Long way to go still - Test coverage added via Instanbul - I've added better documentation (License, Contribution, Better Readme) - .gitgnore was added (Much cleaner structure now) 
Depends on your problem, but I personally prefer to use functional style such as `map`. It feels like it's easier to read and what's hapenning is described more accurately than using a `for` loop.
This is minimal react redux project in Flow with hot reloading and most importantly, server side rendering. It‚Äôs not perfect. But we try to improve it by your feedback. Feel free to criticise, post an issue and make a PR . Please comment if you have better approaches that we can learn from. Thanks :\)
I'm still glad someone is trying to ditch the awful set up you have to make just to get messages on a desktop screen. It feels really counter productive, and I'm stuck in WhatsApp's popularity in my country, I really wish people just decided to use Telegram, at least.
&gt; awful set up you have to make just to get messages on a desktop screen. Pointing your phone at the screen for less than a second?
Yah I guess that is a well deserved warning. Each course is priced at $199 but discounted to $10 always all the time in spite of them keep saying it is a limited time offer 
Hey everybody‚Äôs i have improve my dialogflow module for nestjs, if someone could give me a feedback that could be useful :) https://github.com/adrien2p/nestjs-dialogflow
This is the first I've heard of Ghost, anyone have experience with it?
 I have used it recently. I like the platform. I‚Äôm using the paid for service though. 
Why wouldn't I use something like JSFiddle or Codepen?
You could, this just puts it into a free webpage. In my opinion, it looks more professional.
Thanks, I am glad you liked it 
Because 0xFFFFFF0000000000 is larger than a 32bit integer can store and the portion of it occurring within 32 bits is 0x00000000.
&gt; i0n.us/Pages/code.html Seems like the output is on its own page with no chrome around it. Example: https://i0n.us/p/1945561282.html
Then is there any way to do bitwise operations for 64 bit numbers
That‚Äôs the point! The page is for you to design! It isn‚Äôt restricted in any way.
I use it for my blog since the beginning. I like it very much, it's clean it's simple, and it's a pleasure to write markdown with it.
There no ideal way so far as I know. You could look for a library for handling bigger integers, or split your number into two 32 bit integers like &gt; let a = [ 0xFFFFFF00, 0x00000000 ]; &gt; let b = [ 0x00000000, 0x6e68ae9f ]; &gt; let c = [ a[0] | b[0], a[1] | b[1] ];
I used it for my blog ever since 0.x.x. It's nice and simple to deploy. Much less lightweight than WordPress.
Ghost is great if you need a simple Blogging Platform (not a CMS) and are able to set it up on your own servers. Using their hosted services though? Yikes, those plans are really expensive.. $19-29/month gets you a blog with 50,000 impressions a month.
Much less lightweight? You‚Äôre sayings it‚Äôs heavier than Wordpress? Or did you mean much more lightweight?
The return from array push is not the array, it's the length of the array. You should be pushing into the array (or better yet, a copy of the array) and then setting the state variable to that new array.
That pricing is laughably outrageous
&gt; [...] Also the entire product is open source and has no copyright. Anyone can do whatever they want with our code, for free. &gt; So, when we do anything you can be absolutely certain it's in the sole interest of building the best product we can for the right reasons. How does this make it a certainty that we you do something it is for the right reasons? 
Yeah buts that‚Äôs cheating 
That only cover profit driven reasons. There could be other reasons that aren't affected by profit. (idealism, personal, etc)
That won't work for bitwise shifts. Just a warning in case you find it works for bitwise or/and/etc... and get lulled into a false sense of security :)
You could "debounce" the onscroll event so that it only fires after the event hasn't been called for a while. You could also throttle it to prevent it from being too often.
This is the same thing I asked myself. 
I've been using it for years. As a developer I FREAKING LOVE IT. Its so easy to write and simple enough for anyone to understand it. Give it a look!
To elaborate, what's currently happening is that `taskList` is being assigned to a number (the length of the pushed array). Like u/name_was_taken said, the best way to add something to your array is with a copy. You can do this with the [spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) operator. It should look something like this `{taskList: [...this.state.taskList, inputValue]}
It doesn't, but this is the internet; you can say whatever you want.
Because if they do something obnoxious, people can just fork the code and they no longer have a business.
indeed.
I think he means lighter than WP
Got any opinions on headless cms? I've been looking at these: keystonejs [strapi.io](https://strapi.io) [dapt.in](https://dapt.in) I know there are some paid ones, but I'm looking at the free to host ones first. Or if you know of any better let me know! 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
GraphCMS is great for a small to medium-sized scale
 Something like https://camwiegert.github.io/in-view/ and the native [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) class would work well.
That looks amazing! Looks like I would need an enterprise license to install on my own server. I'm trying to figure out the best HCMS for my next project. I'll take a look at this one as well thanks!
Having it in the same WiFi, having to even have my phone to send messages through the web. As I understand, it's locally stored as far as the unencrypted version of each message, so just save locally to my browser and if I need the whole conversation sync it when both are on. If I lose my phone and/or number, the service is basically closed shut. I really don't like that.
React is pretty terrible. I recommend checking out Mithril. It is react without the boilerplate or weird event bus.
Check out [sanity](https://sanity.io). So far I prefer it to those you've mentioned.
So the profit motive is reduced but plenty opportunity remains. (doesn't mean I don't admire their general stance just that we got to be realistic)
Sounds like a job for [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)
If you're wishing to build a tool to do this, BlueprintJS (http://blueprintjs.com/docs/v2/#core/components/tree) is a good start.
On first place just wanted to use some of it. But now i also wish to start building one. Thnks
&gt;I am an Angular Developer, can someone explain me what... XD
Hey Reddit! John from Ghost here, thanks for checking out our story :) Let me know if you have any questions
What is ghost? Last I heard that name it was a Norton product for imaging machines
I'd go with Vue or React, both are pretty lightweight. That said if you haven't done any javascript in 10 years there will definitely be quite a learning curve.
I've recently started using Ghost for my personal blog, and I love it! I have nothing else to say really, other than keep up the good work. It's a great platform for me. 
You should contact me, I can help you mate) Just contact me and you can give me tipps for programming or so
naaah. drop shipping is dead now.
I was assigned with a small project, from an interviewer. It's easy, every 10 seconds, slider change to the next slider. I knew how to do and what to use but I just couldn't do it! 
True, online shop as well. Try in real estate or start as a coding teacher. 
Legendary. Gonna try it tomorrow and report back.
Looks really good actually. Not sure if it will work with my saas idea. I need something more open source so I can self host it. I might try it for a future project thanks for sharing!
Looks nice on mobile and cool idea. I'm curious as to who a client would be tho. As in non-devs looking for an implementation don't usually think in terms of code pieces, mainly just their product/idea (thus they hire a dev), and devs usually do what devs do i.e code. Basically who is the target user/audience/market that would be compelled to hand money over for pieces of code?
There's no way to prepare, you either know the tech or you don't.
When I was doing solo freelancing work, I would have a weekly lunch meeting with a colleague in a similar position. We would discuss whatever projects each of us had going on and bounce ideas off each other. It was very helpful.
Know the tech? I can know all about hammers and nails but have no clue how to build a shed.
i'll let you in on a little secret. Nobody knows shit.
I manage an open source project that started around the same time as Ghost (NodeBB). The reason why it keeps you on track to build the best product you can is because if you don't (and commit shitty code), people will be more than happy to call you out on it :)
If I found a dev on my team was paying someone to do their job as oppose to solving the problem themselves, for lack of time or whatever....I would consider it a red flag. Your product can be functionally perfect but if the idea isn't better defined 1. Feedback will be hard to get since nobody is clear what direction to point you towards and 2. Heading into the 'future' might mean a greater pivot down the line...which will lead to refactors and code issues. One version of this product sounds like it has a payment system, and the later idea doesn't. So are you just asking people to find some bugs for you? Cause good UX starts with knowing who your trying to help i.e focus. One systems "bug" could be another systems "feature" given the right context. 
Udemy. Stephen grider has an interview course. Good stuff about all sorts of algorithms. 
I haven't used it per se, but I couldn't find a nodejs/postgres starter kit that I liked so I used Ghost and ripped out the blogging parts I didn't need
I like their philosophy. I'll definitely check out their platform a bit more. I've always been a fan of quality products over selling out and trying to make a quick buck.
The open source development portion of this article is so unfortunately accurate.
Hmmm. "We're a non-profit" "We've been profitable since day 1"
Why not just use the blogging service built into Google? What am I not understanding? 
Here's a technique that's always worked for me. Create an object called 'display' or 'graphics' or something, whatever you want, and it should have the following: const display = { pictures: {}, sprites: {}, canvas: null, ctx: null, // initialized the display with the given canvas, loads all the pictures and sprites, then // calls 'cb' when finished init (canvas, cb){...}, // creates a js Image object from 'uri' and puts the Image into the 'display.pictures' // object where they key is 'name'. Since image loading is async, cb is called when the // picture is done loading loadImage (uri, name, cb){...}, // creates a 'sprite' which is a subimage of another image you've already loaded which // is named 'image_name'. Then put this sprite into the 'display.sprites' // object, where 'sprite_name' is the key. // x, y is the location of the subimage. w,h is the width of the subimage. createSprite (sprite_name, image_name, x, y, w, h){...}, // draws a sprite with name 'sprite_name' at location 'x, y' on the screen drawSprite (sprite_name, x, y){...} }; This way you can associate your spritesheets, and by extension your tiles, with strings. This allows you load your tiles with ids like tile_0 through tile_N and you don't have to care when you go to draw the tile which spritesheet its originally from. Tiled maps are saved with a long array of tile ids. If you have more than one spritesheet in Tiled, it simply continues the ids from where it left off. This means you have to account for this when you go to create your sprites. I made an example for you with some crappy sprites: https://codepen.io/anon/pen/ELOLbE 
Reading the article gives you some background on what they do, how they do it, why they do it, and their progress over the last few years. 
The recruiter is probably just reading off of a list of questions they got from their development team/management. Any nuance flies out of the window at that point Don't beat yourself up over it
I‚Äôd say it‚Äôs a valid interview question if you‚Äôre going to be working on a team of developers as you need to be able to discuss implementation details with them. If you‚Äôre solo technical communication is much less important. It doesn‚Äôt necessarily make you a better developer knowing what a closure is, but it does make you a better team member because you will be better able to communicate about that with specificity.
Its a question I always ask, and me being a developer on the team for which this person would be hired, not a recruiter. I've given about half a dozen interviews in the past month or two and no one's had problems with it. If someone wasn't sure about the term, I'd try to at least make sure they understood the concept. But its one of those things I would expect to be able to talk to another developer about in conversation and expect them to know what it is. While not a deal breaker, it would raise a little flag, especially if the rest of the interview didn't go smoothly. &gt; Does it make me a better developer... Not if you already understand how they work. Thats the important part. Your ability to "develop" hasn't changed as far as connecting a word to a thing. Your ability to communicate to your peers may have improved, though (ok, maybe not your current peers, but future peers ;) ). &gt; Will I be frowned upon or ridiculed... I don't think so. It depends on the people you work with. And once you work with them for a period of time, you'll pretty much pick up on the trendy terminology they like and mostly stick to. When you're new, you can get away with more too. Interviews, however, have you under a microscope, so that's probably more of an issue than anything else. &gt; Do you think the question is a valid/good interview question... Since I use it, I'm going to have to say yes. They're an important part in how JavaScript works, so any decent developer should know what they are and how to use them. But like you said, you already use them (and goodly), just wasn't clear on the terminology. And that's ok too. It's better that you know it by name, which now, you most certainly do, so its not going to be a problem any more. This should also work as a hint to look up some other trendy developer terms so you know what future interviewers might throw at you.
If you're a good JavaScript developer you'll use closures all the time but maybe not know the name. If you're a good interviewee you'll have a standard answer to pull out when asked what a closure is. I generally ask someone to explain the prototype chain or what is a closure as my first interview question to ease the candidate in as I assume this is something they are always asked. They can easily redeem themselves later if they don't have an answer memorized.
Maybe you just don't understand what a nonprofit org is?
Depending on how far you want to take this, I'd probably start with jQuery and use this [plugin](https://datatables.net/). I mainly write apps in React these days but this can be a steep learning curve if all you want to do is get a front\-end up and running without thoughts of building a Single Page App that you want to release to the public. As long as your backend can serve some json, you should be good to go. 
Thank you for your insight. Okay, so I will treat this as a possibility to improve my communication skills. But I'm a bit lost here: Where/how would I find a list of "trendy developer terms" for javascript? I didn't hear that word "closure" at all before that interview, which was my fourth interview for a JS developer position. Since I just signed a contract for a different company that is also a bit bigger \(IT shop, 100 developers\), I am eager to improve so as not to be let go on my first day because they assumed that I knew basics I don't know.
What‚Äôs their license? Because a WTF license is basically legal limbo and people could sue you for using ghost. 
"closure" is not a "trendy developer term". It's a fundamental JS concept that as a JS developer one should be able to explain and apply.
But st least you can be sure the variable refers to an array.
Some links and resources?
Whatever you call it. So, then: Where/how would I find a list of "fundamental JS concept explanations and applications"?
graphjs i think is built ontop of d3. and is easy to use lots of example.
https://developers.google.com/chart/
When you were suckling your mother‚Äôs tit, I studied OOP. When you were shitting your diapers, I was mastering the prototypal chain. While you wasted your days at recess playing with friends, I read Crockford and memorized design patterns. And now you‚Äôve got a JS interview and you need to understand closures, you have the audacity to come to me for help?
This is one of my favorite questions to ask partly because closures are tough to explain concisely. Personally I'd be lenient with the answer if it was an entry level role, which this sounds like it wasn't.
The course on Udemy "understanding the weird parts if JavaScript" covers all the terms a JS deveoper would absolutely NEED to know in my opinion. It's a superb course, and one of the few that are actually worth the $10.
Have you considered leaving your pricing the same but increasing the number of page views? $20/mo seems like a good starting price but 50k page views a month is nothing. You probably got more page views just from this reddit post.
Thanks, it worked.
Define the character set as an array and loop through it.
- Does it make me a better developer, now that I know by heart (and will never forget) what a closure is? You mention that you‚Äôre already comfortable using them, you just didn‚Äôt know what it was called. So, yes, in general. It‚Äôs good to know the names of your tools. - Will I be frowned upon or ridiculed if I don't know terminology when I start in a bigger company? Yes, frankly. Imagine if you were hiring a mechanic and you asked him what a wrench was, and he said ‚Äúyou mean that turny cranky thing?‚Äù - Do you think the question is a valid/good interview question, and if so, what does the answer tell the recruiter? It‚Äôs valid. It shows that you understand the code at a level deeper than copy pasting from stack overflow. Look, there‚Äôs nothing to be ashamed of here. I‚Äôm also self taught and was very much in the same boat. But it‚Äôs 100% worth learning this stuff so you a) know it and also b) can communicate with your peers about it. 
Any JavaScript book, really. JavaScript: the good parts is a quick read and has a lot of what it seems you‚Äôre looking for. 
As mentioned by another poster, it‚Äôs not trendy it‚Äôs a core JavaScript building block. That said. If you land a job without knowing the name, you‚Äôre not going to be fired for that. Someone‚Äôs gonna mention a closure, you‚Äôre gonna go ‚Äúwhat‚Äôs that?‚Äù, they‚Äôll show you and suddenly you‚Äôll have a name to put with that thing you‚Äôve been using all along. This is just stuff that comes with experience. Nobody knows every term for everything all the time. 
The Jest doc is amazing, I don't really see what this adds to it.
I have no clue how to make it find the ?'s and then how to make it treat it like this: XAmYAPAV - XAmYAPBV - XAmYAPCV... XAmYBPAV - XAmYBPBV - XAmYBPV... XBmYAPAV - XBmYAPBV - XBmYAPCV... XBmYBPAV - XBmYBPBV etc.. The standart pattern to solve a 000 code 
If you have passion, bring that. If you love the stack they use at the job you‚Äôre applying for show that by doing your homework. Working on a team is the primary concern, having stellar coding chops is second to that. At least that should be the case at any company worth working at. Do yourself a favor and when you line up an interview, do the homework on their product until you can explain it to someone else, then actually explain that info to work out your understanding. 
Chartjs, I have used react chart js and it‚Äôs got a really nice interface. Straightforward.
Thanks a lot for such an encouraging response 
how does chart.js stack up against d3.js? Easier? Better?
I‚Äôm currently using D3js to plot simple histograms and scatter plots. I‚Äôve created a ggplot object with a scatter and a hist method. I‚Äôve just recently added code to add an x and a y axis. Also added methods to add x and y labels. The code looks something like this: ` import data from ‚Äúdata-source.json‚Äù; Import ggplot from ‚Äúsome-file.js‚Äù; let plot1 = new ggplot(‚Äú.data‚Äù); plot1.scatter(data); let plot2 = new ggplot(‚Äú.data‚Äù); plot2.hist(data) ` There are plenty of libraries out there, but I personally didn‚Äôt like a lot of them. It‚Äôs takes too much to just create a simple histogram or scatter plot. So that‚Äôs why I decided use D3js to create my own custom object. I would post the link to my git repo, but I don‚Äôt want to break any rules. The repo‚Äôs README show a few examples on how to use it. If you‚Äôre interested, send me a message, so I can give you the link. Side note: I am stats major who uses R extensively. In R, there‚Äôs a package called ggplot, which was created by Hadley Wickham. It‚Äôs a great package, which has inspired the way in which I build this plotting library. 
Even if there was an internal order of hoisting, it's impossible to observe because that's not how the language works. Variable *declarations* are hoisted, but the initial value being assigned is not. Variable and function declarations are all hoisted into a single atomic bundle above everything else. They all exist *before* the first line of code is reached.
I get your point OP, and this is what drove me alway from corporate environments. I went through college, learned all that bullshit about design patterns and theories they shove down your throat to make sure you'll make a good code writing slave robot to whatever company will hire you, and know earn my living through freelances and participations in research projects and friends's startups, as a free developer, and I treat my craft as an art form. Google is my main work tool, and I write code on my own style, and I spend my time learning and comparing my techniques to others online, finding ways I can improve even further. The corporate world wants to make us all the same, they want us to be a number on a team, because it makes it easier for them to hire. They don't have to really know you, they hire the degree you have and they want you to be replaceable by someone with the same dregree if needed.
&gt;Is it possible to calculate a universal 'order' in which the taxa are hoisted? It wouldn't ever matter, because neither function declarations nor variable declarations *do* anything by themselves - they're only *referenced* later, once all the hoisted statements are done. var down-here = function () { Invalid syntax. &gt;I read somewhere (MDN, I think) that function expressions assigned to a var keyword do not get hoisted The variable *name* gets hoisted, but only gets assigned to later. (`var downHere; ... ... downHere = function() { ...`)
simpler for sure, my understanding of d3 is minimal, but it seems like a larger and more robust solution to the problem of data visualization. while chart.js is just a library to make a few charts, with some neat animations. The react components are legitimately plug and play.
Vanilla.js
While creating buttons, you could put each [button, rightQuestion] into a Map, and then on click, access `map.get(button)` to see if the clicked answer is the correct answer. Logic will be simpler without a `for` loop.
I'd be a little wary about keystone. They were pretty much dead in the water until about January of this year when this post https://github.com/keystonejs/keystone/issues/4551 Sparked renewed interest and what seemed to be a revival but that didn't get very far. A couple of months after that and stagnant yet again. It seems the task of bringing it up to its former glory is harder than they had initially thought. After realizing the task of updating the existing codebase would be too hard they decided to split up with two new goals: bring the final release to fruition (1 year in the making) and do a complete reboot with more modern tools. I think personally all efforts should be diverted to the reboot considering their already difficult to gain momentum. Anyway it'll be interesting what becomes of it. Keystone was and ostensibly still is the best javascript cms
If you don‚Äôt care about precision, you could use setInterval. Run it with pm2 so it would restart if the server crashes. Or use a cron, which is more appropriate for this kind of task.
Try https://www.npmjs.com/package/node-schedule Worked well for me in the past. Kue is great too but not really necessary if you just want to do trivial periodic tasks while the process is running. (As opposed to a fully-fleged message queue)
he does for sure. It's superb light and I love it.
Is *that* so... My bad, then; I thought we could *do* something with them. If I understand correctly, when I link different scripts together like including two different script in two tags with different `src`s, then all the different variable and function declarations are hoisted and recognised, *before* the first line of *either* script is processed? Same applies when I put some extra code later in a script tag?
When people talk about hoisting they're usually thinking about within a function scope or ES6 module scope, and that's what I described. I'm pretty sure it doesn't work they way you're thinking in global scope. If I were you, I'd make an experiment and see what happens. Best way to learn.
spam spam spam spam spam spam spam spam spam 
Yep. At a company with 100 developers, you need a room full of devs to know enough of the same terminology that they can talk about how their software is constructed, pair program, and do effective code reviews. I was self taught too, so I get how frustrating learning all the terms can be, but once you aren't the only dev, you've gotta get more disciplined.
I use (node-cron)[https://www.npmjs.com/package/node-cron]. My application requires querying the database every minute and sending out text notifications. It works perfectly.
Did you slap the interviewer for using a for loop?
Definitely. I would be using a database for storage and probably redis for caching. Disk is slow and having large amounts of data flat is unmanageable. Database helps retrieve and order more files and can be moved to another server or container. Redis holds cache in memory so retrieval is fast and doesn't require disk reads. For a simple application the benefit of flat files is that you don't have to learn and install libraries or worry much about asynchronous server stuff. Just dump it and return it when asked for. Performance isn't a huge issue so no reason to overengineer it. 
I've played with a few and strapi is my favourite so far. I haven't tried graphCMS yet, I'll give it a spin this weekend. I've heard good things about Directus as well but I've tried to set it up three times now and I can never get it to work properly :( pity because it certainly looks nice 
&gt; We've bootstrapped from day 1 and always planned to be totally self-sufficient. But initially we did think that there might be grant funding or support that we might be able to benefit from. It turns out: No. Absolutely none. &gt; How open source works is: If you want something, you can build it.
That was an asshole response by the interviewer.
&gt; Not if you already understand how they work. Thats the important part. Your ability to "develop" hasn't changed as far as connecting a word to a thing. Your ability to communicate to your peers may have improved, though (ok, maybe not your current peers, but future peers ;) ). I'm going to disagree with you on this one. Yes, to a certain point, being able to _use_ the concept is the "important part". But then again, not being able to explain _what it is_, is quite often a symptom of not grasping the idea or its details in its whole. OP didn't even say he knew _how they work_, just that how to _use_ them. Being able to explain _what_ something is, IMO, does give you more insight into the finer details. And most of the time this is exactly the difference between a _junior_ developer or a more _senior_ one. I mean, the question is not there to judge OP in a black or white way. But it is there to position them in one place or another. A little further below OP mentions it's the first time he heard the term and refers to "closures" as a "trendy developer term", and when corrected the answer is "whatever". I don't mean to attack OP in any way, but as an interviewer or as a team lead, that would _certainly_ make me view them as _junior_. ^(Note that, maybe, part of the problem is there is no particular definition of what is a junior and a senior. And some people associate junior with negative traits, and that's not it _at all_.)
Take a look to 'bull' package. It has repeated jobs. But if you just need to run something and do not care node-cron your best friend
I'm so tired of anti-intellectualism masquerading as being anti-corporate
Awesome, that worked. Unfortunately, now CSS is not working, and I found these errors in Chrome. Putting in type="text/html" or type="text/css" doesn't work. Any ideas? Refused to apply style from '[http://localhost:3000/css/bootstrap.css](http://localhost:3000/css/bootstrap.css)' because its MIME type \('text/html'\) is not a supported stylesheet MIME type, and strict MIME checking is enabled. \(index\):1 Refused to apply style from '[http://localhost:3000/css/style.css/](http://localhost:3000/css/style.css/)' because its MIME type \('text/html'\) is not a supported stylesheet MIME type, and strict MIME checking is enabled.
I cannot say for sure because I didn't see the code, but I *think* I could also have solved that one without knowing the term "closure". I for sure passed a similar test at a different company. Their test was a for loop to create numbered buttons, with an event handler function printing the counter. I have not been told to expect that question, but I could navigate it. \(I just signed their contract, since their compensation and bonus package is good. Soon, I have to live up to their expectations.\)
Actually, this looks like it's an issue with Chrome, so disregard this. However, it's still not live\-compiling/refreshing on save.
You don't say And I'm tired establishmentarianism masquerading as intellectualism. :-) Meaning some things we hold as irrefutable facts are in fact incorrect if we look at the evidence with our brain engaged.
&gt; it's still not live-compiling/refreshing on save. This plus the MIME type error tells me something's up with the server configuration.
Could you answer questions about how "this" works in a closure or the scope of a variable? Would you know what I meant if I asked you a question about what variable capture means or how it works? Interviews are artificial and they come with some expectations, being able to answer verbal questions about coding is one of them. The second problem is that if you can't explain the concepts above you almost certainly don't understand them. If I gave you two bits of code: 1) for (var i = 0; i &lt; 10; i++) { (function (i) { process.nextTick(function () { console.log(i) }) }) (i) } 2) for (var i = 0; i &lt; 10; i++) { (function (i) { process.nextTick(function () { console.log(i) }) }) (i) } Explain to me in your own words why the two bits of code generate different outputs, and what those outputs would be. If you can't, then again you're going to require more direction from mentors, won't be able to participate in code reviews and may have difficulty debugging. I interviewed someone years ago for a C# position. They were an internal candidate. I asked them about 30 questions and they got 25 or so wrong. Because they were internal they had a moan to my boss. He (the candidate) was upset because "He could have learned all of those things". The guy we did hire *already knew those things* Why would we take the guy who expected time to learn everything over the guy who had learned it?
I have literally no idea what to do then. I literally copy and pasted this when it was working for someone else because I was confused, and it's not working for me. I'm about to just give up and use codekit. No matter how I order this stupid server filepath it either gives the same errors, double the errors, or "cannot GET".
Thank you for your remark. Maybe I could have redeemed myself later, hadn't it been for that strong remark, sounding like "Every JS developer knows, so you're not a JS developer". Not sure about that. A few people here seem to share the opinion that a JS developer has to know terminology before calling himself a JS developer. Not sure whether that is an Ivory Tower thing, every JS developer has started somewhere, and taken his own approach to the language. However, I have to learn to not let recruiters derail me like that with such unnecessary \(IMO\) remarks. I have learned in my last job not to let customers derail me with overly negative remarks, so with a bit of training, I will manage recruiters as well.
Feel free to point out how expecting an expecting-to-be-employed JS developer to know what a closure is is "corporate" Like someone else rightly pointed out elsewhere in the thread (and I'm liberally paraphrasing), if I worked at a mechanic shop and I asked the new hire to hand me a wrench, the *last* thing I'm expecting is a blank stare. I don't know how or why "hey, you don't have to know everything" has so quickly morphed into "you don't have to know anything at all". 
setInterval is definitely the most fundamental answer to this. Probably the first thing OP should look at, before deciding that it's not a complete enough solution. &gt; Are background jobs kind of going against JS and async? I found this kinda funny because the _point_ of async is that you do things 'in the background'. 
I have a CS degree, but never saw a bit of JavaScript nor heard the term "closure" during my studies. I sincerely believe I understand the details of javascript scope, but I didn't know the term. Maybe the reason is that I am not an English native, so I may overlook some connection between plain English and the technical terminology that makes it easier to grasp what the term means and come up with an explanation without having heard it before.
Uhhhh 1) Those are identical bits of code 2) `process.nextTick` is NodeJS-specific, making it a poor choice for a conceptual example
Fixed it, sorry I'm a dumbass. I'm rushing as I need to leave for work :) Yes, it's Node code. It's from my interview set and I think I stole it from StackOverflow originally. 
It's kinda hard to help you with just what you're telling us. Can you maybe link a gist or something?
Hello there. Just don't overcomplicate. If you need a simple website you don't need to dive into React/Redux/Vue and other popular libraries/frameworks right away. Sure, you can do anything with them, but I find their learning curve rather challenging for newcomers. What appears easy at first may take years to fully understand. Define your expectations from the website. What are you aim for? Do you operate with huge data, or is it a small website loading one excel sheet (which is your case, I think)? Which design challenges can you potentially face? From my experience I can recommend you to start slow. Create a layout, style it, HTML and CSS certainly didn't go anywhere, so use them and you won't miss. Style the pages, connect them together. My point is, if that's a small website, you don't need to grab a huge framework with a lot of tech stack to achieve that. Play simple. As your requirements grow, your demand toward technology will grow as well. Then you will dive into something more complicated, and so on. Cheers.
Depending on what you're actually trying to do, you could use a Serverless function (Lambda, Google Functions etc). Just set it to invoke on a schedule and it will reliably run ad infinitum.
Yeah, sounds like you know what‚Äôs what but the term tripped you up. But I‚Äôve seen a few senior JS dev candidates recently who couldn‚Äôt figure out the problem when shown a piece of code with an incorrect closure!
Hi, thank you for helping. Yes, small website, one excel sheet. simple design
I just switched from Hexo to Ghost. It's really great.
A blogging platform.
I just want to echo this sentiment. The journey most JS developers take seems to be discovering the word "closure" after they've been using it for a while anyway. There's an excellent chapter in "you don't know js" that goes through it; https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch5.md In terms of the company: I don't think it's something to worry about and if it is, you don't want to work there. I often look at tech interview questions online and think "hmm.. I would fail this interview" and I've been a web Dev for over 10 years!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [getify/You-Dont-Know-JS/.../**ch5.md** (master ‚Üí 6e77b02)](https://github.com/getify/You-Dont-Know-JS/blob/6e77b02f9d5cf70ad381a3257b043195389fcbef/scope%20%26%20closures/ch5.md) ---- 
Haha.. I guess he meant to say it's light weight in Relevance to WordPress.
this my json file https://jsonformatter.org/json-editor/4a8b54 (after line 45) the "#" doesn't show on the tweets, I mean they should be hashtags but that thing just display the words without the "#" 
Also, check out [this](https://stackoverflow.com/questions/45436158/how-to-to-stop-a-machine-from-sleeping-hibernating-for-execution-period?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa) for more ideas on how to prevent a windows machine from sleeping programmatically. You can make these windows dll call via node üëçüèº
After the API call to twitter you mean ?
My problem with that is that being a programmer is a job that changes every single day. New features and technologies get adopted every year. I have no problem with learning new things, in fact I love it, and it's something I do everyday, but I prefer to learn what engages me, and in my way. If I need to know what a closure is, you can be sure I'll spend half an hour reading and come back with every information there is to know on it. This works amazingly fine for me on my day to day and has never harmed any of my projects, which were all delivered on time. The only reason corporate environments care about that is because, again, they want you to be just like any other hire, they don't want to spend time getting to know you, they aren't looking for talent, they are looking for numbers to add to their teams. I realize this argument may come across as anti stabilishment, but it wasn't my intention. I was criticizing companies that do that, which are most of them, but there are companies that do not. There are companies like that that treats their proggrammers like artists, not factory workers. These are the ones I try to associate with. And honestly, it's been making me very happy with my job and has worked well so far.
sure 
A cron job is the simplest option, but there are reasons you might want to avoid it, like releasing on Windows.
Site loads fine for me after a refresh.
Cool working for me now, will delete post =\)
I don't really know the Twitter API inside and out but isn't there a special format for hashtags?
Write a simple function that does your task and run it using something like node-cron. If you need a more complex task scheduling system check out something like https://github.com/agenda/agenda.
They are assholes.
They are an ass holes do what you want , if you like to use even scratch , mind fuck or glass The important thing is the productivity , good documentation . Readability and satisfaction 
I'd prefer the React Conference Suicide Game
Because they are naive. They don't know that JavaScript has evolved from a simple scripting language to a fully featured, modern programming language.
I mean UX it's not that better having button on the bottom instead give user a power to pause or play by just pressing keyboard or may be space key 
Is there any performance advantage to using one of these libraries vs just using setTimeout if I don't care about accuracy?
Is there any performance advantage to using one of these libraries vs just using setTimeout if I don't care about accuracy?
Yeah it should be more accessible, definitely.
One potentially dangerous issue is that you can enter script tags if you disable javascript. You might want to strip this out server side, since the pages are tied/will be tied to your domain. I only did an alert here: [https://i0n.us/p/361470860.html](https://i0n.us/p/361470860.html)
This is a much better way than moving the cursor as it won't interfere with UX (1px could be the difference between grabbing a column divider in a table to resize that column and missing it completely). I'm also not sure if Windows accepts software mouse movement as valid when considering sleep.
My use of trendy was a little tongue in cheek (though I see I mentioned it twice which was _way_ overboard on my part :-o ), though I would go so far as to say some terminology is, or has been, in fact, trendy. AJAX for example - one still used today to mean loosely what it refers to (as it is often used without XML which is what the X represents). Sounds like others have already mentioned books, which are a good resource. You can also look up any recent interview questions list which will likely include terms for what people are looking for nowadays. MDN also has a [glossary](https://developer.mozilla.org/en-US/docs/Glossary) page with a bunch of stuff (not everything) you should be familiar with. When it comes to JavaScript, I think the big key areas I test for in interviews are: - closures - scope and context - prototypal inheritance - asynchronous programming Off the top of my head, some other basic terms/behaviors that are good to know - coersion - primitives - references - callbacks - promises (and deferreds) - binding - hoisting (TDZ) - declaration vs expression (something I've had a few I've interviewed trip on, which was fine if they could explain it) - ecmascript vs javascript - modules - parameter vs argument - first class function - garbage collection - OOP vs functional (imperative, declarative) ...and at this point you're getting more into the higher level concepts that aren't necessarily specific to language behavior or syntax. I think some of these, while not new concepts in general, could also be thrown under the "trendy" category due to the fact that some have been showing their heads more in the JS community. For example with the rise of popularity in functional programming, you see "mutability" (or immutability) referred to a lot more and more, a word most JS developers little need for in the past. - mutability - encapsulation - polymorphism - interface - mixins - override vs overwrite - threading (not specifically a JS thing but web workers get us mostly there) - monads - observables - event loop and jobs/tasks/micro tasks - tree shaking (another thing popularized by the fact that JS projects are going through build steps now) - serializing - namespace (something you saw more of in the past [implemented via simple object trees in JS], less now with modules) - responsive vs reactive - middleware - decorators - memoization - iterators (iterables) I'm sure there's more, probably whole areas I'm not thinking about right now. And some of these you may never hear of again in your life. Like I mentioned before, it can be dependent of your circles (reflective of yours with the closure term). The first part of the list is one, I think, you should have a good handle on (well, maybe not _all_; I'm not sure most people will care if you know what ecmascript is). The rest is mostly extra credit. I'm trying to think of other resources that might be helpful for something like this... Though it might be a drag, something that might help is going through the introductory tutorials for some of the major libraries/frameworks out there like react, angular, etc. This not so much to try and learn them, since that could be overwhelming, but just to see what they're talking about, picking up on the terminology they're using.
If run on a windows server, use scheduled tasks.
wow life is such a cliche just keep on drinking
1) check the href path in your html, and remove unnecessary "." or "/" characters. &lt;link rel="stylesheet" href='./index.css'&gt; 2) check for invalid comments in the generated css files.
Try writing PHP sometime, it's worse there. You know, basically the language running the other half of the Internet.
Look into setting up the paths to your static files as non exact paths 
Good summary. This is a pretty major landmark in the evolution of the JavaScript programming language. We'll need to wait another year, maybe two, before we can ship modular JavaScript to web browsers, as we wait for enough users to upgrade to compatible browsers. But soon we won't need webpack or similar transpilers, we can just write modular JS and ship it as\-is. That will be a big productivity boost.
function declaration definitions _are_. So order does become important there. function foo() { console.log('first'); } foo(); // last function foo() { console.log('last'); } mix in the fact that function expressions are not function foo() { console.log('first'); } foo = function() { console.log('second'); } foo(); // second function foo() { console.log('last'); } So order can be important. Truth is, you generally should be avoiding doing things like this. If you _do_ need to redefine functions, stick to expressions and consider declarations more like `const`. Your question about script tags is actually quite valid. But it has more to do with how browsers treat script tags and less about core JavaScript behavior. The thing about script tags is that browsers will execute them as soon as they're loaded, not waiting for other script tags later down the page. That means if the example above, for example, was split into separate script tags, you'd actually get a different result because the function can be called before the second script is ever evaluated and allowed to hoist the second function up. &lt;script&gt; function foo() { console.log('first'); } foo(); // first &lt;/script&gt; &lt;script&gt; function foo() { console.log('last'); } &lt;/script&gt; &lt;script&gt; foo(); // last &lt;/script&gt; Because the first call to `foo()` runs before the next script tag is even considered, it only has the above definition to call. After that, the next script tag redefines foo with the "last" version, which when the next call runs, uses that instead.
As an alternative to /u/CertainPerformance's answer, you may want to consider using [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes) when creating your buttons. &lt;button data-answer="World Wide Web"&gt; Your event listener can easily access this through: event.target.dataset.answer
Got any advice or resources for number 2? I really need to improve and don't know what should be put in it's own modules. I do things in separate functions well but struggle with separate files
Thank you üòÄ.
Hi /u/Webcrayonsbiz, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board).
Write a clean nodejs script and run it with cron/systemd timer. There's nothing special and you don't need any special libraries. Async is irrelevant here. Just do make sure that your script actually cleanly exits (don't leave db connections hanging open etc)
Hi /u/leminhyen2, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Hi /u/methal_knight, For javascript help, please visit /r/LearnJavascript. Thank you!
Nah. It‚Äôs just wrapping more familiar cron like configuration around setInterval if you read the code. 
npm tbh. Not npm's fault, but endlessly evolving libraries &amp; standards are a sign of a pretty immature language.
Why not Formik?
Yes. Yes. And yes. 
Because they are immature juniors or neckbeards.
I assure you, nothing presented in those conferences should be done in production
How about we add some to spice it up... The himym: drink when you hear "but um..." The typo : when you spot a typo, take a drink Compiler error: take a drink Rookie mistake: finish your drink! (Don't make them look bad)
I saw directed and it does look amazing but does it use php for its backend?
Haha you running for office?
I don‚Äôt think the web platform is there yet for a bundle free world, even with support for modules. There‚Äôs more to bundling than just transpiling. Before we can get rid of webpack (and similar tools) the web needs to figure out (just name a few): - code splitting (avoiding tens - hundreds of HTTP requests for each module) - inline critical CSS - tree shaking - uglification / minification That said, I agree with you that moving to leverage the platform more is definitely the way to go, but I don‚Äôt think any language escapes it‚Äôs tooling ever, does it? (Fwiw, even Polymer team still highly encourages bundling) Personally, I‚Äôm always of the motivation that one should ideally use what one can get rid of eventually (polyfills &gt; frameworks), and for things you can‚Äôt, abstract wisely. Yay JavaScript though! I can‚Äôt wait to see how clean and ‚Äúsimple‚Äù building apps will be in a couple years though! Web Components here we go! ‚úåÔ∏è 
Ahhh the blackout bingo version.
I think this is a scoping issue; newbies to JavaScript will run into it eventually. Assuming you have some `var i` that you're looping through, a function handler that accesses `i` will use the last value that `i` was set to. A quick solution is to change `var i` to `let i`; to keep it short, the block-scoping of `let` allows your function handlers to only access the value of `i` during their respective iterations of the loop. For more in-depth explanation, you can check [these](https://wesbos.com/for-of-es6/) [articles](https://gomakethings.com/why-you-shouldnt-attach-event-listeners-in-a-for-loop-with-vanilla-javascript/).
Not sure the &lt;?php ... ?&gt; quote styling applies ;)
Not getting you.
I wanted to, but it was for a Jr. position, and I was just happy I knew the answer that made me look like a good programmer. 
Ya, I double that. Every Language has its own pros and cons and so is JS. But its rapid development and adaptation makes other people uneasy. Thats what I have seen in people around me. Move on just like JS moves on removing many of its cons, in its upcoming ES versions.
Open bar is a very dangerous phrase
I‚Äôm kinda on the same boat and have started playing with Mocha and Chai for testing. But I‚Äôve heard about Jest being really easy to set up. Give it a look!
I could have solved it with let instead of var also, but they wanted a written explanation of what I did. Using a closure and being able to explain it was my way of letting them know I have experience some others do not. Congratulations on the job! Glad you seem to be getting what you wanted out of it. Don‚Äôt become a coding slave robot as I‚Äôve heard can happen at large corporations. Stick it to the man!!!
The blockquotes are styled with "&lt;?php" and "?&gt;" decorations. The article is about JavaScript, not PHP.
&gt;Not getting you. :D :D That manke sense. We will try to make change in block quote according to programming language.
Ever since I discovered proxies a few months back I‚Äôve been using them extensively. Such a great feature. 
I am in the `just log it` camp. I have used `debugger` and `break points` via node and chrome but in all actuality, I find that I can find the issue and solve it faster if I use `console.log(value, 'This is value')`. The best thing you can do is to write tests. I use `jest` but any testing library will work ( even native node `assert` ). This will force you to break your project into smaller pieces that are tested in isolation, limiting the amount of times you even need `console.log` or `debugger. The next best thing you can do, in my opinion, is to use `console.log` in conjunction with limiting your problem space. If you think that `obj` is wrong, `console.log` where you think it's wrong, check if it is, and if it is, move up the file/call stack, adding `console.log` until you see where it all goes awry. The major goal with either approach of `log` or `debugger` is to find the exact place where your logic is wrong. The smaller area you are looking at, the easier it is to find.
Probably because there is no upgrade path from AngularJS to Angular and they are leveraging existing code.
It‚Äôs derided for very similar reasons as well. It‚Äôs so easy to get started with and has been around for so long that there are tons of bad tutorials, bad projects, and old cruft in the language. Just like with JavaScript, though, if you stick to modern practices it can be a very nice language and ecosystem to work with.
As someone said it could either be no upgrade path. Other reasons could be that they have enough resources to maintain Angular or personal preference.
I haven't used Dwitter, but I wrote this looking at the image your provided, and it appeared to work for a few "dwits". Not sure about it being 60fps, though. const c = document.createElement('canvas'); c.width = 1920; c.height = 1080; document.body.appendChild(c); const x = c.getContext('2d'); const S = Math.sin; const C = Math.cos; const T = Math.tan; const R = (...colors) =&gt; `rgba(${colors.join(',')})`; window.requestAnimationFrame(tick); function tick(t) { u(t); window.requestAnimationFrame(tick); } function u(t) { // your code here }
Just another wrapper Probably will replace a lot of what I use lodash for, but like, I don‚Äôt really feel any excitement about it
The recent upgrade was probably focused exclusively on the UI design \(the implementation of Material Design 2\) and did not encompass an upgrade of the application logic. I'm sure they'll get around to that eventually!
I guess they are afraid to use React.
It's more than just UI, they added some features.
It runs in a separate process, that's the only thing I can think of. 
In short, you can‚Äôt...but I guess you could spin up the free program, and have their connection limit maxed out by using fake users to connect to the database, then you‚Äôd just only have two spots left?
Perhaps they started the project before AngularJS was deprecated. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [lionleaf/dwitter/.../**dweet.html** (master ‚Üí 2ce9555)](https://github.com/lionleaf/dwitter/blob/2ce95551701fa93c8b581011c4fcfc5f85637c87/dwitter/templates/dweet/dweet.html) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dz6vji8.)
Yup. 
https://angular.io/guide/upgrade?
As someone who went through this upgrade path, it's probably easier to just do a complete rewrite. You end up writing a lot of code to facilitate upgrading a component.
Lots of large companies still have many teams who still use 1.x bc of leveraging existing code, starting a long time ago and never having time to upgrade, business side never seeing value in spending all that time upgrading, and migrating such a large codebase can take a very long time. It's sad that the upgrade from 1 to 2 is such a pain.
Since when is AngularJS deprecated? &gt; AngularJS is planning one more significant release, version 1.7, and on July 1, 2018 it will enter a 3 year Long Term Support period. ([source](https://docs.angularjs.org/misc/version-support-status)) Looking at their github, https://github.com/angular/angular.js, There are commits as recent as yesterday.
If not deprecated then it's end-of-lifed? Dead-ended? Not going anywhere? Not long for this world? Take your pick, but it's definitely not a framework with a healthy future ahead of it.
That's just how Google operates too. They use different technology across the company even when it comes down to frameworks. I'm sure there's projects using React too. 
Prefer "clarity over brevity", indeed. ``febA()`` might be more verbose. But I could read and understand the function's algorithm far quicker than ``febB()`` and ``febC()``. From the perspective of human maintenance, ``febA()`` is the best implementation of this software requirement, I agree. Nice example.
A 3 year LTS is not dead ended. If a team knows AngularJS why would they bother to learn a new framework just because it's new.
because two-way-data-binding is a nightmare in any sizable application
At the risk of being snarky, the word you're looking for is stable. 
Yup, I'm planning on doing that, but I was also checking if there were other techniques? For example, in Ruby, I write a class and its accompanying spec. I guess I will pass by Mocha, Chai, Jest and friends at some point in the same way that I had to learn RSpec's testing DSL 
Clean code will make debugging much easier. If you do happen to have a spaghetti system that is too costly to change then a systematic approach can be helpful to ease debugging. https://en.m.wikipedia.org/wiki/Troubleshooting?wprov=sfla1
Yeah you know honestly I don't use `debugger` that much. `console.log` for life. I do remember there was a growing period at first with Ruby's RSpec before I got to be better at it. Just have to do the same with JS's testing libs
Thankfully, all the best books on JS are also free. [http://eloquentjavascript.net/](http://eloquentjavascript.net/) [https://leanpub.com/javascriptallongesix/read](https://leanpub.com/javascriptallongesix/read) [http://exploringjs.com/es6/](http://exploringjs.com/es6/) [https://github.com/getify/You\-Dont\-Know\-JS](https://github.com/getify/You-Dont-Know-JS) Honestly, I can't think of a single even halfway decent book on JS that doesn't cover closures by name. Not knowing such things indicates that you haven't read any good books on the topic. For me, that would be a huge red flag because it likely means there are loads of things you don't know about the language. I'd still look at hiring you as a junior or maybe intermediate dev (based on my view of your ability to learn). With so many free resources to learn from, it's very hard to justify not having read them.
Non-Mobile link: https://en.wikipedia.org/wiki/Troubleshooting?wprov=sfla1 *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^183905
S stands for Support. Angular is pretty mature and stable, and while it's not being developed anymore, it doesn't mean the community isn't developing and maintaining their plugins. 
Right, well don't get me wrong, there's a lot to be said for bug fixes/stability. Having 3 years of LTS is way better than the 0 years of LTS you'll get if you use a (dead) framework like Prototype, Mootools, or Mochikit. ... it's just that an *actively developed* framework is generally considered to be superior to one that *only* gets bug fixes.
Thanks for the tip :)
Sometimes people don't need more than that. Look, if I had to start a new project I wouldn't necessarily choose Angular. But moving out of active development is _not_ a bad thing. The JavaScript community needs to move away from "newest is always the right choice". &gt; if you want a framework that gets more than just bug fixes Angular is not a good choice. It's OK for a project to be finished as well. You don't always need to add new features to something. Frameworks/libraries/tools shouldn't feel the need to compete against one another. 
"I started writing Node 15 years ago and it ruined my life" line gets me every time.
That was my first thought too.
Relax, Google News will be deprecated soon.
Yeah, let's use Mochikit, Mootools, and Prototype, because they're battle-tested and stable, and who cares about new features! /s Sure there's nothing wrong with using old-but-good code. Many of Lodash's functions have been around for half a decade or more (ie. since long before Angular was a twinkle in Google's eye): that certainly doesn't make them bad or mean that no one should use those functions. But at the same time, Lodash has steadily been getting better over the years, and just about everyone today would agree that they'd rather use the current Lodash than the one from five years ago. It's almost as if development of new features isn't just done to reduce stability, it's done to actually make a framework better for the people using it ...
As someone who‚Äôs in the middle of upgrading an app with around ~330 components/services/etc, I want to die
Helperdroid and its creator love you, here's some people that can help: https://pastebin.com/iAhaF92s [source](https://github.com/TheTRUEHoohah/u-thehelperDroid) | [contact](https://www.reddit.com/message/compose/?to=cancerous_176)
and they were the first ones to document and release to the public such a thing at the time.
I mean, playing devils advocate, I think that‚Äôs ok. Conferences are for exploring and discussing new ideas and patterns, they are not necessarily tutorials for best practices. If you‚Äôre at the conference, you likely know what‚Äôs established, and want to see what‚Äôs next/what others are playing with/something exciting and fresh. So I‚Äôm glad it‚Äôs a bit of a hack fest. What I don‚Äôt like is the cult of personality and hype trains that tend to converge at these things.
They use everything, React, Polymer, Angular, and even some non\-open JS Framework \- it varies from team to team.
Maybe add links on the icons for your favourite tools? They kinda look like links, and I clicked on one disappointed that they were just icons. Your resume is very confusing when 3 of the titles are company names and the other is "Content analyst". A "contact form" seems very old school. I would rather add an email or a link to your linkedin profile.
Why would you slap an interviewer for using a for loop? Comparing for with `.foreach()` you'll still notice a huge (usually order of magnitude) difference in performance. Not a big deal with things that happen occasionally, but a significant difference for other things.
Good bot
Those are [tagged templates](https://devdocs.io/javascript/template_literals#Tagged_templates) Here's some cool stuff using them: https://github.com/choojs/hyperx https://github.com/trueadm/t7
Linking to the tools is a good idea, though it would probably destroy the tooltips on mobile, so perhaps labels would be better. "Content Analyst" actually is the company name, it's just a terrible company name. I like the contact form because it obfuscates my email address from web crawlers, and while I should consider adding LinkedIn to the social links at the bottom, I get so much spam from LinkedIn that it's usually just noise. The contact form is also an experiment that has been fun to play with because normally you can't do a contact form on a static site. Originally it used Lambda and SES, but now it's a Netlify form.
Also worth noting that if you try to print the resume page it shows my title as "DevOps Engineer" below my name.
Aha thanks! So that's an alternative syntax if I want to pass a long string in the first argument?
You can omit parenthesis when using a template literal. ``` "1a2a3".split`a` == [1,2,3] ``` The code in OP is the same as: ``` export const logo = css(` img { height: 20px; } `); ``` 
I feel like the people who like it the most already independently developed their own style preferences and the AirBnb guide is the one that happens to align with most/all of their choices, so it's something they can point to and be all like "see, someone with lots of money, developers, and users feels the same way!"
But I cannot interpolate them inline I guess?
RIP Google Reader
Anyone who thinks this is deluding themselves. The size of the project matters. If you‚Äôre building a simple app, even if it has multiple pages, angular is perfectly acceptable. I used it for 4 years to great effect. It just falls apart whenever you try and build anything of a higher complexity of interactivity. When you have too many inputs and outputs, angular 1.x stops being convenient and begins to get in the way. 
It's possible that the community could for AngularJS 1.7 out of Google ownership and continue to push it. "FangularJS" if you like. Trouble is that VueJS is too attractive as an AngularJS 1.x escape plan for people that want to stay with that idiom. I've loved AngularJS since 2009 - stroke of genius stuff.
Can you paste the relevant JS?
Not exactly. `split` is just a rare example where it works that way. Template tags (the function before a template literal) get called with an array of the template parts split by expressions followed by the value of the expressions. So while this is true `a` === `${"a"}` // true These are not equivalent "1a2a3".split`a` // [1, 2, 3] "1a2a3".split`${"a"}` // [] You can get an idea of what's getting passed by tagging with console.log console.log`${"a"}` // ["", "", raw: ["", ""]], "a"
If you're talking server side or node based code, check out the official node documentation for debugging, can be very useful. https://nodejs.org/en/docs/guides/debugging-getting-started/
Yep. Easy to use =&gt; beginners can use it =&gt; some of them write bad code =&gt; some idiots think that means the language is bad. It was the exact same with VB, back in the day.
Seems to work on all functions that take one string as argument. ``` f=(a)=&gt;console.log("look " + a); f`at this` //"look at this" ``` ``` String.toLowerCase`ABCDE` // 'abcde' ```
That depends completely on the size of the application and how many people you can devote to rewriting it. If it‚Äôs a small application without new requirements coming in daily, or if you can devote a certain number of developers to the rewrite, sure go ahead and rewrite it. But if you‚Äôre developing a large app with new feature requests daily and no personnel to spare on a rewrite, no way.
This is a pretty applicable list at any conference. 
If they're performing coercion. function getLowerCase (str) { return str.toLowerCase() } getLowerCase`A` // toLowerCase is not a function 
I picked it up mostly because it was the only style guide that enforced ES2015 at that moment and it had a plugin for eslint. I still disable (in eslint) rules regarding bitwise operators, but that's just me being old.
As well as other people's great explanations on how the AngularJS Project is still very much alive and due another release soon, I'd also imagine that Google have \*a lot\* of mature, well\-tested Libraries and Solutions internally written in AngularJS.Re\-use is much, MUCH cheaper \(time AND cost\-wise\) than building out an entirely new Application \- plus you have the confidence that the internal libs you're using have already seen production and most of the kinks have been worked out.
Spot on!
In this case I'm not so sure. If you added another set of brackets in `febC` to clearly define the `||` and `&amp;&amp;` then I feel this is actually easier to read than the others. More lines does not necessarily mean easier to read. In this case the logic you have to go through is very similar, but just feels cleaner and more concise in the last example.
Airbnb style is absolutely horrible. Semistandard ftw! üí™
Hey I saw ur code, not sure if this helps but check this post on stack overflow https://stackoverflow.com/questions/32265731/socket-io-emits-multiple-times Might help you out?
Raises hand. We've got a 1.x project ... lots of new dev occurring there. We jumped on AngularJS when developing a new product because it seemed to be the strongest of the field fo JS Frameworks at the time, and we had done an evaluation of them all. Felt like the rug got pulled out from under us when they decided that the 1.x line was a "dead end" and took development in another direction with Angular. We've got the project scoped to get off of AngularJS and onto Angular, but it'll take us quite a while to get there, as there's no simple upgrade path.
Because in 3 years it's going to be EOL with no more security updates, etc.
Hey my issue is fixed now but thank you!
No problem! 
Doesn't mean you have to use just angular for the whole thing neither..
It also involves far fewer dependencies and it easier to reason about. Completely agree. 
Then why do they have the same name?
Everything listed here [https://github.com/getify/You\-Dont\-Know\-JS#titles](https://github.com/getify/You-Dont-Know-JS#titles) is fundamental to JS and you can expect to be asked about at just about any interview for JS dev.
I have been using the beta and this breaks all my imports, depreciates material-ui-icons and stops being able to explode imports so for loads of files I have to change this for over 120 ui components. &gt; import { FormControl } from 'material-ui/Form'; To &gt; import FormControl from '@material-ui/core/FormControl'; I have a huge application to merge over on Monday, is there a quicker upgrade path? P.s. love material ui, so amazing!
i know my username would suggest otherwise, but can you give me some examples of how you‚Äôre using them? i just can‚Äôt see a scenario where i would use one 
Perhaps their engineers consider more than trendyness when making decisions
Because it's comprehensive. It includes a lot of rules and picks up a lot of things. I have several personal preferences that differ from airbnb, starting with semicolons, so I use the their config as a starting point, and add my own overrides from there.
I mean why stop there?! f=y=&gt;y%4||y%400&amp;&amp;!(y%100)?28:29
Oh yes, finally people will choose my open source JS framework with breaking API changes everyday over established projects like AngularJS.
Same for most big companies. I'm in a fortune 100 and we use everything from angular, angularjs, polymer, react, vue, etc.
too soon
Pretty much has the same use cases as PHP's magic methods. Among other things, I've used the Proxy class to create a light wrapper around the native node MongoDB API, so I can access collections as though they are properties of an object, instead of a through a method call, e.g., db.aCollection.find() Instead of db.collection('aCollection').find() By creating a proxy like so: let db = new Proxy({}, { get: (_, collection) =&gt; _db.collection(collection) }); Of course, there are other ways to accomplish that, but I find this to be much simpler.
Disclaimer: It's been over a year since I last used firebase, so I'm doing this from memory. This probably isn't perfect, but hopefully it will point you in the right direction. First, I need a little clarification. Limit it to two specific users (John and Bob are the only people who can ever connect), limit it to two random users (Person A and B are on the app, so person C can't connect until one of them disconnects), or something else? In the first case, you should be able to do that with their user permissions. If it's the second case, I don't believe you can actually rate limit the connection count through their UI. The firebase team has a way to do this (since they can ratelimit the free plan), but I'm not sure they want that to be available to users, you could try emailing them thought (good fucking luck with that). As a work around you can keep a variable at the base level of your data model called something like connectedUsers (or an array of signed in user ids). When a new user connects, check if that value is &gt; 2, and if so force disconnect them. If it's &lt; 2, incrememnt the count and decrement the count when they leave. Technically, you would have more than 2 users connected to firebase (as they need to connect to check the connectedUser count), but you aren't really giving them access to any other data, and you can disconnect them pretty quickly. It's not perfect, but Firebase is basically a toy DB and the company is willing to lie to their users about it's capabilities, so what do you expect.
&gt; Firebase is basically a toy DB and the company is willing to lie to their users about it's capabilities Care to clarify? I'm quite satisfied by Firebase's capabilities to be honest.
My favorite part about the anti angularJs argument is that most people don't understand the difference between a "need" and a "want". Most of the modern day frameworks are usually overkill of unnecessary complexity for what a site actually "needs".
Yes.
I guess I should have phrased it like, ‚Äúwhile sucking at‚Äù 
And when those 3 years are up, react 32(which breaks every line of react 16 code) will be released, along with Angular 3 v26, and Vue v2.59... Let's not forget that in 3 years, lightsphere and react immigrant will have been created released and their benchmarks beat react 32's speed by 1000000000x.
Still yes. It helps if you know aesthetics/design... it just broadens your skillset and makes you more marketable... and you should at least know the basics of moving elements around on a page... but you don't have to know design to be a developer.
Gotcha. Thanks for the input, friend.
The very first example of Formik usage (in the README) depicts each problem we would like to avoid when writing forms (that is boilerplate, obscure validation declaration and responsibility delegation). I'm definitely not against Formik, or any other lib, if it helps you to achieve what you get, and you are okay with the tradeoffs. My personal point is that each solution has its use case. We wanted to define the points which pissed us off when working with forms, and eliminate them the best way our knowledge allows. Hope this answers your question.
I can't give a huge amount of detail as my issues happened at a former job and I'm not sure what that company's relationship with Firebase is still like. I don't want sound like I'm speaking for my former company. So here's the gist, we wanted to use firebase for a feature in production. Ran our needs past them as our user count was well into 7 figures, and were told things would be fine and connections were unlimited. Did a partial rollout (~10%) and things were good, did a full rollout and firebase crapped the bed. Their dashboard had nothing on it giving any indication that anything was wrong and nothing for us to be able to diagnose. Things just failed silently. Even worse than that, there (at the time) was no way to get any type of support other than email which was incredibly slow, the techs were pretty unhelpful. Worst of all, you had to contact them through a form on their website and you could only send 5 emails to support from your account before they cut you off.
CSS is more than just "something to broaden your skills". It's a way of trying to achieve separation of concerns. Granted, react people just suck at that kind of concern, but hey, just don't listen to facebook ideology and you'll be just fine.
Don't forget Google has plenty of groups of just mediocre developers. 
Sure you can not like css, but that's no excuse to not learn enough of it to implement designs provided by others. I personally don't really enjoy css. I don't hate it, but it's not my favorite part of the job. But I still put in the effort to know everything I'd need to know to talk about it with other devs, implement designs. Tons of emphasis nowadays is being put on the JS side of things, and for good reason, but CSS and styling is still a necessary part of the job description. It wouldn't be wise to completely ignore that.
Source?
In no way do I plan to ignore it, but seeing as I have no real development experience under my belt, I‚Äôm just wondering how much effort I need to be putting into/practicing css. 
Yeah, I had no idea, i thought it was a feature taken from coffeescript.. Probably should have read the docs. Most of my js experience comes from code golfing on codewars.com, which is probably not the best infulence.
Looks great in chrome. Broke as heck on IE.
And they realised it was going to be a ball ache to migrate to Angular.
If you don‚Äôt learn css then styling with JavaScript will be impossible. When you apply styles with JavaScript all you are doing is bypassing the stylesheet and adding inline styles. It‚Äôs also easier to maintain a stylesheet than it is JavaScript code. Look into sass or less, it might provide you the excitement you get from JavaScript. Main thing to take away is that by using stylesheets the site will still look like it‚Äôs suppose to even if JS is turned off or breaks.
they dont, they have different names that sound the same. See? Its not confusing at all! /s
IDK I worked with a third party app (cheapbotsdonequick.com) , 
Maybe. To me the problem with `febB` isn't that it's more concise but that the variable name `common` is way too generic to tell me what you're computing. Rename that to `is_non_leap_year` and I believe `febA` and `febB` would both be equally readable.
You should add [MessagePack](https://msgpack.org/index.html). 
If you're a front end dev and you suck at CSS, you should absolutely live in fear that some other front end dev is going to come along who IS good with CSS, and eat your lunch/take your paycheck.
Take the bait, chaps.
Because sometimes its easier to update the frontend template, then to rewrite all the services?
Can you also tell us (but just us) which cryptocurrency projects will be alive and mooning in 3 years? Don‚Äôt want to miss an opportunity to invest good
(Since we're in this sub) So there's this new crypto that's completely written in JS. As we already know javascript can be used both on the client and server, but it can now also used on the BLOCKCHAIN! It's called "chainJS" and it backs a crypto called (you guessed it) JScoin. The coolest thing about this tech is that chainJS breaks down into pragmatic bits that render isomorphically over a global mobile network that's powered by facebook's latest instafeed api's. It's really cutting edge stuff. I'll send you my paypal info if you'd like to invest.
this isn't a upgrade path if you need to rewrite your entire codebase.
You might be right, I cannot find more `ng` in the code.
I'm sad to hear that they used Angular, no matter what version. And can't believe it, but anyway.
That makes 7 billion of us. 
What's wrong with the devtools? The introspection possible is pretty amazing. For instance breaking on DOM node manipulation, to mention a random feature I rarely use, but can be a lifesaver once in a blue moon. [https://developer.chrome.com/devtools](https://developer.chrome.com/devtools) As for unit tests in js, I don't bother, preferring integration tests with webdriver/selenium. [http://webdriver.io/](http://webdriver.io/)
The way the JS spec is worded, when you have two different types on different sides of `==`, it has a particular algorithm for converting them to the same type. That's why `false == []` returns `true` counter intuitively. In general, you want to use `===` instead of `==` anyway, so I'd suggest not worrying too much about the rules for `==` and instead just always using `===`.
Look into css custom properties instead of sass for variables, you can modify them dynamically with js.
Care to drop a link for a good learning resource?
General rule is to use `===` or `val == null` if you wish to check if a value is null or undefined. Otherwise `==` is bad practice. 
The best thing to do would be to break this into two functions that each do one thing: function isLeapYear(year) { return (year % 4 == 0) &amp;&amp; (year % 100 != 0) || (year % 400 == 0); } function getDaysInFebruary(year) { return isLeapYear(year) ? 29 : 28; } Computing whether the given year is a leap year and determining the number of days in February are two separate logical tasks.
We had a large app with no personnel to spare to rewrite. We went through the upgrade process writing new components in Angular while upgrading components from the angularjs code when needed. Half of the code written was solely for the purpose of bridging the gap between the 2 APIs.
Right. Even more readable, as someone already suggested, would be renaming the condition to isLeapYear(year) and then your code is even cleaner, since your Feb function is only concerned with deciding between 28 or 29 days. You could go further and make a Feb function that doesn't check any conditions at all by constructing a Date for the first day of the next month in the same year, substracting one and then querying the day of the month... So you're not giving leap years any special treatment, and that's less code to worry about. That function could be generalized for any month (modulo 12 to accommodate December), and then February is no longer special anymore, so you don't have any code now with the days of any months at all. Let me know if anything is unclear.
What does php do?
Ive made exactly 20 cents of doing js
?
When you use `==`, you compare the (coerced) *values* of the left-hand-side and the right-hand-side. someArr.toString() evaluates to someArr.join(',') so if `someArr` has no items, it evalutes to the empty string, which is falsey. So: "" == [] // true But when empty object literals have their `toString` method called, they evaluate to ``[object Object]` - which is truthy.
Have you ever considered that a project could be considered ‚Äúcomplete‚Äù and only needs bug fixes?
Only functions that should be used that way are ones that were specifically designed as tags.
Yeah, I rarely use == in practice ‚Äì just doing some interview prep :) Thanks!
[This](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness) MDN article breaks down the way that loose equality works and has a pretty boss table that will help you. Specifically to your case, it says that it forces the `boolean` value to a number and then the `array` value to a Primitive before `===` comparing them.
Oh I see! This make sense.
Yes, learn HTML and CSS. However, you do not need to memorize everything. You only need to know few things. For CSS, learn the following: - position - display (only block, inline-block, inline) - box-sizing - width, height, margin, padding, border For HTML, know the following: - div - span - table, tbody, etc. - a - form, input, textarea With the above, and maybe very few more things, you can do anything. Everything else is redundant, but later on you might want to use from it, like flexbox, but it is up to you. With CSS, do not use floats, or anything else ill defined. You might also hear that do not over qualify your selectors. This is rubbish, from a logical view. A lot of software technology exists to fix problems that only exist because of bad coding practices. Make sure your CSS is exact (well defined), like the rest of your code. Do this, and you will find that writing CSS is much easier than you think. I advice the following, - Treat 'class' like an instance of a class in OOP, and when not an instance, like a member of a class. So for example, "div.myClass &gt; a.someMember". - When you have something that resembles a singleton in OOP, use an 'id', not a 'class'. - Do not use a 'class' on its own. For example ".red". This is ill defined. Instead use, "div.red", or "#dd.red". - Make sure ALL your selectors begin with an 'id'. This means, you need a high level root element under 'body' containing everything else. So my 'someMember' member above of class 'myClass', would then be selected using, "#RootElement div.myClass &gt; a.someMember" - Treat things like OOP. Do not cross class boundries in your css. Do not do the following for example, "div.myOtherClass &gt; div.MyClass &gt; a.someMember". However, if someMember has its own css rule that resembles a public property in OOP, write a comment in the CSS code, and then you can do the following, "div.myOtherClass div.MyClass &gt; a.someMember" instead. - Again, treat things like OOP. If you are generating HTML using server side code, make sure that everything with the same 'class', resembling an instance of a class, contains the same structure. I hope this helps you, making things easier on you, and thus does not dissuade you from taking HTML and CSS lightly.
The learning curve isn't that steep. I have learned Angular 2 and the janky looking part is just new syntax. A lot of the same principles still apply. You'd be surprised how easy it is to port Angular 1.x to Angular 2-5. it takes time but it's fairly straight forward.
this is surprisingly wholesome
K, btw i was working on a thing that looks towards your mous pointer and when you click it moves towards your mouse pointed, but the maths is way too hard, what could i do?
What are the advantages of using node\-cron rather than setInterval?
A new project doesn't mean the codebase is brand new. They may use some of the old code for various reasons: good quality old code, deadline, etc. If it works, there is very little motivation to rewrite it. 
Post example
/u/phaedrus322 mentioned SASS as well, I'll definitely look into it. I've had such a front-end mentality throughout my learning process that it's hard for me to shift gears into a back-end mind set--but not impossible. Though I'm not the most creative when it comes to styling a webpage, I like having instant gratification when it comes to invoking a function and having a visual result on the webpage (i.e. changing something's text content, or background color etc). I'm sure there are equivalencies in the back-end, I'm just not aware of them. Right now I'm just focused on becoming vanilla JavaScript's best friend, because in my Reddit activity and through other dev forums, I've learned that a lot of front end devs' who are working with libraries like React or Angular pain-points stem from a lack of an understanding of core JS fundamentals. I've thought about attending a bootcamp at the end of the year, and the particular one I'm looking into is front end focused (MERN stack). Currently, I'm a full-time college student (right now just taking a couple summer courses) and I'm graduating in the fall with a non-tech degree. I'm also working about 30 hours a week, but on average I'd say I put in a good 15-20+ hours a week toward learning JS. I'm pretty much going to play the next few months by ear to determine if I still want to go the bootcamp route. I know that finding a job is definitely possible without one, I just want to find one fast. But again, we'll see.
Thank you!! I'll add it to my little make-shift curriculum lol
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [babel/babel/.../**test** (master ‚Üí 0200a3e)](https://github.com/babel/babel/tree/0200a3e510389a901680dd44ca8ae7bcd1d2e028/packages/babel-core/test) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dz7nqbr.)
The fixtures module allows you to load HTML content to be used by your tests.
Not really.
Best bet going forward is to grow thicker skin and follow your passion
Flutter compiles to mobile platforms, not the web.
Do you want to maneuver your hover around using the arrow keys or do you want to assign one button per key?
That's hella fair. I got away from Angular around the time 1.5 came out and never went back to it so my experience is limited with the component methods and ng-controller data scoping, so my contept is probably due to ignorance.
`import { FormControl } from '@material-ui/core'` Not at my computer but I believe that's how I'm doing it. Shouldn't be too hard to swap out.
Yes, but then you have to be quite good at JS so that you can become a JS architect. And even then, you will _always_ need some CSS, so better learn it. I also loather CSS but it can be quite fun - animation and drawing, for example. 
A test fixture helps simulate cases and environments. For example, if you're unit testing a division function `function divide(...) {...}` you may have two fixtures - valid arguments, like`divide(10, 1)`, to verify functionality and invalid arguments, like `divide(0, 0)`, to test that you throw a helpful error. Keep in mind that a fixture can be anything - a directory of pages to test a static server, a config to test a preprocessor, a loseless audio file to test a compression tool, etc.
Interesting, thank you for the explanation.
Here's some help: Always use `===`
I really think learning flexbox is a game changer in regards to CSS. Same with BEM naming conventions. Using sass really made me feel better about working with stylesheets as well. I used to really hate CSS and prefer JavaScript but unless you are working on the server exclusively.. you will have to learn CSS.
If even Google is like "Oh fuck that", then I doubt the ease of the whole upgrade path.
![]==false !![]==true []+[] == "" ([]+[])+!![] == "true" +[] == 0 (([]+[])+!![])[+0] == "t" ((([]+[])+!![])[+[]])+((([]+[])+![])[+[]]) == "tf" The fuck.. see jsfuck.com Can be shortened to: ([]+!![])[+[]]+([]+![])[+[]] 
Can't do that in an interview :)
F
Ugh, js conferences and the people at them are insufferable
Maneuver to a different button ideally
It's almost like there are projects that aren't on their way out of even being maintained, AND are still fit for use in production. This sounds like a total strawman.
Worst part is AngularJS used to just be Angular, so you always need to check the date of the result
&gt; Polymer It's why Youtube is so slow and clunky now
You can dodge css if you work on a big team but you‚Äôre limiting your choices. The more important advice is that you hurt yourself most by loathing it. Doing so is a self-sabotaging choice. It is easier to dislike things that you don‚Äôt understand than to get proficient at them. You will forever be bad at things you loathe, which will cap your skill ceiling and hurt your enjoyment of the journey. There are more snarky people shouting clever reasons why things are bad than people who discipline themselves to experience what different tech can and can‚Äôt do. Don‚Äôt be like them. 
I may be wrong, but technically I think it was always AngularJS but of course since there wasn‚Äôt another Angular, folks just called it Angular when talking about it. Doesn‚Äôt help much though lol. I usually search with a version number like ‚ÄúAngular 1.x‚Äù or ‚ÄúAngular 2.‚Äù
Whether it was Angular or AngularJS people always try and write the least amount of characters.
Not /s
The Angular CLI is great and I really enjoy using typescript. I'd say do a POC in the big three frameworks and see which one fits your team best. The nice thing about Angular is that they have a well defined set of best practices, not like the wild west of early Angular.js days. If you are leaning towards React + Redux, at least take a look at Angular + NGRX I'm really loving working with it. 
 &gt; One thing that appears in the code all the time is [JsAction](https://github.com/google/jsaction), which is just a small delegation library from Google. So it is unknown what Google uses for event binding and rendering for Google News. Maybe they write the backend and frontend separately and manually? For companies like Google and Facebook things like React don't really make sense. &gt; Do you have any ideas what framework they might be using for this? It is odd that Google is super open source about some frontend technologies like Angular, AngularDart, Polymer etc, and super secretive about the framework they use for things like Gmail, Google+ and News. I really think they write their own webserver applications and handle requests in a custom manner. 
I feel like trailing commas come in handy when merging different branches to avoid merge conflicts. I have noticed it a lot with adding new components to Angular modules. 
you could always do ``` array.reduce((A,{entries})=&gt;([...A,...entries]), []) ```
You think every worker there is at the utmost top of their field? People that are the absolute masters of their domain? No single company on earth has a work force of 10,000+ elites.
They have alcohol during the conference???? That‚Äôs really sad honestly. Post conference dinner/drinks I get, but during? 
You are welcome. However, I do have to say that it is unlikely that you are familiar with the above concepts. I am yet to come across any css that follows what I am saying above, beside css I wrote myself. Just take a look at the css of this very website, reddit.
I literally can't remember the last time I reached for a `for` loop, when I wasn't writing VBA. I've *never* reached for `forEach`. You don't need to use loops at all in modern JavaScript. You definitely shouldn't be calling asynchronous functions inside of a loop that's mutating the state your asynchronous functions rely upon. The slap would be for asking an entirely outdated question, or worse, not realizing that it's out of date.
Victory Chart works well in React apps.
Just to be clear, the above is not BEM. You do not seem to think it is, but just in case. When I said "lot of software technology exists to fix problems that only exist because of bad coding practices", I had something like "sass" in mind. The above is simply a logical implication of seeking to write well defined css. It is not a convention. This means that if you were to seek to do the same thing, you should in theory arrive to the same rules above. 
I love your passion. I‚Äôm from the school of thought that if you have passion for something learn everything you can about it and never stop learning. If you want to learn web dev, then learn HTML, css, JS, react, angular, vue, php, node, and the list goes on and on and is constantly evolving. Just make sure not to limit yourself or your future because any one part of it doesn‚Äôt excite you. I wish you the best of luck in your future endeavors.
I love you both
If you want to be a web developer and not like css then dont be a web developer its core part of thw web 
Maybe they should have prayer sessions in the morning and take a vow of abstinence before marriage as well as not having the adult freedom to enjoy a beer or two before noon.
Yeah sorry, I wanted to respond to your comment by adding that I believe flexbox is a powerful and useful part of CSS that I use on a daily basis. BEM is just another point I wanted to add that I find useful but is unrelated.
Is it? I still use Youtube the same way I always have, with 10\+ tabs open at all times with my current favorite songs/music videos to cycle through. It's at least as performant as it's ever been.
If not using async/await, there's not too much to improve. If you do this a lot, the catch function can be a standard function reused in all the handlers rather than an anonymous function (needs to be a closure around res). In general, I use Error subclasses for error types because it lets you pass messages through as well and is a little less reliant on string constants.
Me too, but it's slightly shittier. But that being said I love youtube
No
That's the c\+\+ conference
There are many reasons. The ecosystem is dying which means no new libs gets developped and poor support for the old ones. Angular material was never completely finished for example. It's also harder to recruit new teammates or motivate the current team Also, many projects have a lifespan of more than 3 years (#smooshgate). Switching framework shouldn't be the end of the world for a team. Good JS knowledge is still valuable and reusable. If you feel tied with any framework, it's a strong indication that you should start to decouple things in your codebase. Last, frameworks have good CLI tools to get you started and documentation is far better than before. Does that mean that you should have migration plans for all projects? Hell no. But if you start a new one and you're not a meat grinder web agency, there's a lot of value in leaving angularjs on the side and not so much about using it. 
Polymer back in 0.4.x land was clunky and slow. Now it's very fast. I've seen some pretty awesome demos of it handling tons of components being animated at 60FPS. I don't think it's slow and clunky anymore.
I think it‚Äôs totally OK to not like CSS and be a front end dev. If the team is big enough, there will be front end developers who write JavaScript or whatever and front end coders who make the styles happen. It‚Äôs like that in my team, I haven‚Äôt written any serious CSS for two years. That being said, you definitely should still be able to understand CSS someone else wrote.
It's my understanding most of their internal apps use at least some JsAction. Many use only that and native DOM APIs. At Google's scale you usually want the best performance possible and that almost always means getting as close to the metal as possible. Or, in this case, the DOM.
Shouldn't the parameter be _db in the parameters list?
Well, I passed an empty object to the Proxy constructor. In this example, _db would have been declared elsewhere in the scope. 
Yup I love the tools, was just checking if there were other tools that I have been missing
Well, the hundreds of requests are solved as soon as http 2 gains traction. It keeps the connection open for multiple files, and can even send required files before the browser requests them, based on a set of rules.
This seems awful; I don't know how to fix the problem, but good luck.
God I love Vue. 
*** BREAKING NEWS!:!:!!:*** --- *** Angular 8 has jus- oh I guess now it's 9, no 24, ANGULAR 24 IS LIVE!! 7956 frameworks have risen in response On Medium wars clash between a few **VERY IMOPORTANT** Ôº©ÔºÆÔº¶Ôº¨ÔºµÔº•ÔºÆÔº£Ôº•Ôº≤Ôº≥ and \#hIlArIoUs bloggers with JavaScript fatigue on whether or not those who don't adapt to the newest shiniest thing are peon posers or whether the JS landscape is an overcrowded understaffed preschool in a third-world country experiencing an earthquake. Average developers across the globe breathe slightly harder than normal through their nose and think to themselves "lol wtf". Some later succumb to thinking less of themselves about it and add some css animations to their portfolio site to feel a little better. ASIDE!! All of your 3 week old node dependencies are fucked lol $: npm WARN! deprecated minimatch@Õ†ÕüÕ°3“â.Õ†0Ã¥Ã°ÕÅ.Ã¥Ã°2hÕ°gÃï“âÃ¢sÃ∑“âÕ†ÕÄdÃ°ÕüfÕú“âÃ°kÃ®Õ†ÕòÃ®ÕülÕòÃ°ÕòhÃ∏“âÃ∂Ã∏Ã¢gÕùsÃ∑ÕüÃ∑lÕüÕÅÕèdÕòÕûkÕ†ÃïÕÅÃµÃ°fÕùÕû“âÕ¢Ã∂jÃ°Ã®Ã®“âgÃ∏ÕûÃ∏ÕüÕòhÃ°ÃµÕûlÕòÃ∑ÕüÕú“âsÕÅÃ∑Õ¢Ã∏kÕèÕÅjÕÄÕùdÕ†Ã¢ÃµÕòsfsÕúÕÅÃ∑ÕÅj“âÕ°Ã¢dÃ°Õ¢ÃïÃïfÃïÕûÃïÕòÃ®hÃõÕúÕÄgÃ∂ÕùlÕèÕ¢kÃßÃ®jÃïÃõÕ°Ã∂ÃµsÕûÃïÃ¢Õ°hÃ°ÃïÕ° $: npm WARN! deprecated minimÃ∑ÕùÃ®aÕütÕècÃõh“âÃµ@Õ°hÃ¢Ã¥gÕ°s“âdÕûÕèÃ∂fÕèÃïkÃõÃ¢lÃ°ÕÄhÕÅgÃ®sÕè“âlÃ®dÃ°ÃßÕ†kfjÃ¢ÃïgÕÄÕùÕÅhÕ°“âlÕÅÃ∂sÃßkÕüÃïjÕ°dfÕè“âhÃµÃ¥gÕÄÃ∂ÕÄlÕòÃ∏Ã¢kÃ°Ã°ÕèsÃ∑ÕÄjÃ∂dÕ¢fÕÄÃïhÕ¢Ã¢4Õû.ÃõÕ¢0Õ°2Õü1Ã¢.gÕò $: npm WARN! depreÃ∑cÃßÕüaÃïtÃ¢edÃ°ÕüÃ∑ “â Ã¢ÕèmÕÄÃïinÕ†iÃ®mÕûaÕ¢Õüt“âcÕûhÕèÃï@ÃõhÃïgÕòsÃ¥“âdÃßÃ∑fÃµÕÅkÕòÃ∂l“âÕúhÕÅÃßÕÅgsÃµlÕ¢dÃ∏kÕ°f“âÃ∑jÕòÃ®Õ†gÃ∏Ã¢hÃ∑Ã°“âlÕ¢ÕùÃïsÃµÕÄhkÕûÃµjÕèÃ®Õ†dfhÃµglÕÅkÕ†Õ°ÕÄsÕùjÃµÕ°ÕúgÃ∂sÕ°Õ†dÕèfÃ°Ã¥Ã∑kÃ®l“âhÕ¢“âgÃ°sÃïlÕèÃß $: npm WAÃ∂ÕüÃ°RÕòNÕ°Ã∂Õ¢!ÕûÕÅ “â dÃ°ÕòeÃ∏Õ°prÕûÕùÃµeÕ†ÕücÃ°aÃµÃõtÃßeÃ∑ÃßÕ¢dÃµÕÄ Ã∑Ã∏ ÃµmÕ¢iÕènÕüÕèiÕÅmÃ∑“âaÃïÕ†tÕ†ÕùcÃïÕèÕòhÃ∏ÕüÕÅ@Ã∂“âhÃ®Õ†gÕûsÃ∂dÕùÃ∂fÕòkÃõlÕèhÕÄÃ∑gÕÅÃ®ÃßsÕ†ldkfÕòÕ°ÃïjÃ∑ÕûgÕùhÃïlÃ¢ÃïÃ®sÕÅÃµÕ†hÃ∑ÕÄÕûkjÃ¥dÕ†“âfÃ°Õ¢hÕ¢ÕègÃïÕúlÃ∑Ã∑ÕùkÕûsÕ°jÕûgsÃ°dÕúfÃßkÃïlÕ¢“âÕ¢hgÕüsÃ∑lÃõÃµf $Ãß: Õ†Õè nÃ∏ÕùpÕòmÕúÕèÕ† Ã∂WÕ¢A“âÃ∂RNÃ∏Õ°Ã¢!Ã¥ Ã¥Õ°d“âeÕ°Õ¢Ã¥pÃ∏reÕúcÃïaÕùÕüÃµtÃ°eÕ°Õèd ÕùÕùmÃ∑Ã¥ÕòinÕòi“âÕùÃ∂mÕ†ÕÄatÃ®Ã®cÃµÃ¢h@Ã®ÕùÕû3ÕÄ.ÕèÃß0Ã∑Ã®Õü.ÕúÃ∑2ÕÄhÃïÕügÕúÕ¢Õ†sÕ†ÃßdÃßÃ∏fÕ°kÕÄlÃµÕüÃïhÃµgÃµÃ¢ÃµsÃ¥Õ°lÕ°ÕûdÕÄkfÃßÕ†jÕègÃßÃ∑Õ°hÕ°lÃ¢Õ°sÃµÃ°kÕ†jÕ†“âÃ°dÕ°fÕÄhÕ°Ã°Ã°gÃ∂ÕúlÃ°ÃõkÕÅÃµ“âsÕ†jÕ¢dÕÄfÃõÕÅÕÅhÕ¢ÕÅglkÕùÃµjÃïsÃ¥ÕòÃ¢hÃï“âÃï $ÃõÕ†Õ†Ã∏Õ¢:Ã∏Ã¢ÃµÕû ÕûÕûÃßÃ∑Ãï ÃßÃßÃõÕ†nÃõÕ¢pÕÅÕèÃõÕ¢Ã¥mÃïÕÅ ÕüWÃ∑ÕûÕûÕ°AÃ∑RÕ¢Ã¥ÕüÃµÕ†NÕòÃ∏Õ°!Ã¢ÕüÃ∑ ÕüÕòÕ†ÕÄdÕèÕèÃ∏Ã°Ã®eÃïÕùÕúÕÄÕ°pÃ®Ã°ÕÅÕûÕ°rÕ†ÃïÃ¥eÃ∑ÃµcÃïÕÄÕ†ÕüÕ°aÕ†“âÕòÕ†tÃïÃ®ÕúeÕ¢dÃïÃµÕèÕû ÃßÕòÃßmÕÅ“âiÕûÕèÃ¢nÕüÃ∏iÃïÕüÃµÃïÕòmÕòÕ°Õ°ÕüÃ°aÃ∂Ã∑Õ†ÃïÃ¢tÃ°ÕèÕúÕûcÕùÃ∂hÃ¥Ã¢Õò@ÕÅÃ∑3ÃßÕ†“âÃ¥Ã¥.Õ¢Ã∑0ÕÅÕèÕúÕÅ.ÕúÃõÃ¢ÕúÃ¥2ÃµÃßhÕüÃßÕüÃßgÃ¥sÕûÕúÃ¥ÕÅÃ¥dÕùÕüfÃ®Õ†Õ†kÃ∂Ã°Õ¢Ã¢lÕ†Ã∏ÃïÃõÃµhÃ¥gÃßÃ∑sÃ∂Õ†lÕúÕèdÕûÃßkÕ°ÕûÃßfÃõÕ¢Ã®ÕèjÃ∑Õ°ÕúÃµgÃ∑ÕÄÕ°ÃïÃ∂hÕòÕùlÕ°ÕÄÕèÕèsÕûÕù“âkÃ∏Ã∑“âÕÄÕ†jÕúÕòÕüÕúdÃ¥Õ°fÕ†Ã¢ÃßhÃõÃ®Ã∏ÕÅÕògÕòÃ∂Ã∂ÕûÕùlÕÅÃ∂ÃßkÃ∏ÕÅÕùÕ°sÃ¥Ã∂ÃïjÃ∑ÃïÃ¢ÃïÃ∑dÕ°Ã®ÕòÕùfÕòÕ°ÃµÃ°hÕùÕÅÕ¢ÕÄÃ¥gÕ°ÕúÕùlÃ∂Ã∏ÃµkÕÄÕúÃ°ÃµÃ¢jÕÄÃ¢ÕÅÃßÃõsÕÅÃ¥Õèh“âÃ∂Õû ÕÜÃáÃΩÕ¶ÕûÕÅ$ÃãÃöÃìÃΩ:ÃÜÕ•ÃàÃøÃÑÕ¢ ÃæÕßÕÜÃÉÕÆÕëÕ≠ÕÄÃ¥ Õ¨Õ§ÕõÕ£ÃàÃëÕäÃïnÕóÕäÕßÕåÃÑÕÑÕòÃµpÃàÕ¨Ã∑mÃÉÃÇÕ™ÃåÕåÕù ÕåÃøÃΩÃÖÕÑÕóÕ©“âÕúÕÄWÕÆÃâÕ¶Ã¥Ã¥AÕíÃÑÕóÃ®ÕÅRÃåÃîÃÅÕòÃßNÃÉÃ¥ÕûÕù!ÕíÕ®ÃÑÕû ÃÇÕ¶ÃèÕã“âdÕÜÃÄÃÅÃéÕèeÃåÃçÕÇÕåÃëÕÄÃïÕÄpÕÑÃÇÃàÕêÕëÕëÕ§ÕÅÃ¢“ârÃÇÕ¶ÃøÕ≠ÃëÕ£Õ¨eÕÑÃöÕ´cÃéÃøÕ©ÃöÃöÃÉÕ¶ÃÜaÕãÃëÃÅÕóÃÉÃ¥ÕüÃ°tÕÇÃöÕõÃ∑Ã∏Ã¢eÕ´ÃÇÕßÃΩÃÜÃãdÕäÃêÃÄÕßÃæÃáÃèÕßÕ¢Ãß ÃΩÃ¥mÃîÕ§ÕúiÕëÕêÃÜÕ®ÃÖÕúÕûÕÅnÕ≠ÕíÕêÕ§Õ™ÕûÕòiÕÇÃÅÕåÕêÃëÃêÃÖÕÅmÕÉÕ®ÃéÕ≠ÕêÕ™Õ¶ÃëÃ∏ÃïaÃçÃÖÃàÕ´ÕòÕûtÕëÃæÕíÕ®Ã°cÕ¨Õ≠ÕÆÃÇÕãÃìÃàÃÅÕûhÃåÃîÕÑÕíÃöÃöÃ¥Ãõ@ÕóÕ§ÕÉÕ§ÕëÃæ3ÕõÃíÕß.ÃÖÕ§Ãà“âÕÅhÕÆÃÉÃÅÃáÃåÕ¶ÕùÕèeÕÑÃÅÕêÕ´Õ£ÕèÃïrÕ®ÃêÃêÕ¨ÃìÃΩÃÜÕ°yÃÖÕíÃìÃÉÃΩÕêÃæÃ®Ã¥hÃÜÃÉÕ§Ã∑ÕòeÕëÕäÃçÃäÕ¶ÃâÕûtÃÉÃÑÕ™ÕúyÕêÕÑÕ¶Õ¨ÕåÃîÕ•ÃÅÕûjÕõÃÖÕ´Õ®ÕèeÕõÕ≠Ã¢Ã°yÃîÃåÕ£ÃøÃÜÃÇÃµÃµrÕ£Õí.Õ≠ÃõhÕíÕãeÃöÕ§ÕãÃäÕäÃÄÃÇÃïÕ¢jÃÇÕ£Õ®ÕßÕÑÃÄÃëÃèÃ∂Ã∑nÃÖÕ§ÃörÃÉÕêÃøÃÖÃÑÃÖÃ°Ã∂tÃçÃåÕÇkÕ≠ÃÄÃΩÃãÃìÃâ“âÃ∑hÃÅÃíÕ®ÃáÕóÃ¢eÕ•Õ®Õ¶Õ≠ÃëÕ•ÕèÕùÕèjÃÜÃÑÕ¶Ã¥rÃíÕÑÕêÕ£ÕÇÕ®ÃøÃáÕùkÃàÃÄÃÅÃèÕäÃßÃ∏ÃïtÕäÕÆÕäÕêÕÜÕÇÕãÕåhÕÜÃâÃøÕÉÕÆÃÅÕ¨ÕÜÃé“âeÃåÃÇÃçÃöÃÑÕ§Õ¶lÕäÕ¶ÃΩÕØÕ£Ã∏rÃáÕòÃµkÕ£ÃèÕÉÃèÃÖÕÜÃÄtÕõÃêÕåÕêÕãjÕ¶ÃáÃîÕÆÃÑÃãÕ£ÃáÕúÕûhÃàÃáÕØÕ™Ã¥ÃõgÃÉÃáÃêÃΩÕåÕÅlÃÑÃêÕåÕäÃΩÃéÃîÃ¥eÕåÕÇÕãÕÄkÕÇÃ®ÕÅrÃΩÃëÃ¥jÃàÃèÃöÕßÕ•Õ¢Õ°Ã∑tÃÖÕÆÃäÃâÃÇÕ§ÕåÕ•hÕ¨ÃìÃÖÃ°Ã∏gÃáÃøÃëÕíÕëÃàÕûlÕ™ÕÇÃÉÕÇÃåÕ•ÕÇÃΩÃ∑“âÃ∏kÃÜÕ¨Õ°ÕèeÃöÃΩÃêÃÖÃâÕòÕ¢Õú Õ´ÃèÕíÕÑÃíÃåÃ∏Ã∂ÕÄÃ∂“â$ÃÅÕ¶ÃãÕ´ÃäÃ∂ÕÄÃ®:ÕÇÃÖÃäÕêÕÆÃÇÕÉÕ™ÃæÃêÃéÃΩÃ∂ÃïÕò ÕêÃíÕ§ÃæÕ´ÃâÃÑÕóÕØÕ¨ÃåÕêÕ•ÃÖÃäÕ´ÃïÃ∑ÕùÃ∂Õ° ÕÆÕõÃëÃÖÕ•ÃæÕõÕ§ÃΩÕãÕ¨ÃãÃäÃõÃïnÃÇÃÑÃåÕÆÃæÃíÕØÕ´ÕëÃëÃéÕ¶ÕØÕ§ÃëÕ©ÕäÕ¨Ã∏Ã¥pÃäÕåÃÉÃÖÕ¨ÃèÕóÃæÕØÃöÕÑÕÇÃÜÕÜÕÉÕíÕêÕ£ÃîÕúÕèÕÅmÃÉÃîÃÑÃøÃçÃÇÃëÕØÃëÃ∑Ã¥ÕÅÃµÃ∑ ÃÇÕóÕ§ÃâÕ®ÕßÃëÃãÕóÃåÃÖÃâÃìÃÜÕ©ÃöÃæÃîÕ¢ÕèWÕ´ÃÑÕõÕëÃæÃîÃæÕ§Ã∏ÕèAÃöÃøÕØÕ™Õ§ÕäÃëÕåÕóÕúÃ®ÃµÕèRÕØÕÜÃøÕõÕ¨ÕßÃîÕåÕåÃΩÕÑÃéÃìÕíÕõÃõÃßÃ¥NÃÜÃÇÕãÕëÕÉÕ®ÃäÃàÃöÃçÃæÕ¶ÕóÕäÕëÃêÃøÃèÕ¢ÕÄÕûÕûÃ°!ÕíÕ•ÃÖÕÇÕõÃßÕ¢Õ†Ãï ÃÉÕÉÃèÕ´ÃîÃ¢ÕúdÃÉÕ¨ÕÜÃìÃÉÃáÃíÕÇÕÑÕÑÃÄÃøÃÖÕèÕòÃõÃµÕ°eÕ´ÃìÃÅÃàÕëÃåÃΩÕíÕãÃöÕ¨Ã°Õ¢“âÃ¢ÃßpÕ£Õ≠ÃåÕ®ÕØÃîÃéÕåÃöÕãÃõÕûrÃéÕßÃéÕëÃáÕëÃèÕØÃéÃéÃëÕØÃÉÃΩÕØÃêÃøÕ°ÕûÃõeÃàÃÜÃåÕíÃΩÃïÃõÕ°ÕüÃµcÕ£Õ©ÕßÃãÕóÕãÃäÃΩÕÜÃÇÕ£Õ¶Õ£Ã°Ã∂Ã∏aÃæÃÄÕÑÕõÃàÃàÕ¶ÃøÕ≠ÃæÕíÃâÕ°ÕúÃ∂Õ°tÕóÕ•ÃîÕ©ÕßÕ´ÕõÕ†ÕèeÕíÃÄÃãÃäÃìÃÑÃÄÃÇÃîÕëÃèÕòÃ∑Ã∂dÕóÃÉÃãÕÉÃáÃÇÕßÃ°Ã¥ ÃíÕãÃäÕ£Ã°Õ†ÕùÕümÕåÕêÕØÃíÕ¶ÃíÃµiÕ§ÕóÃãÕÉÃöÕ¨Õ•ÕëÕÜÕåÕÜÕßÕ£ÃÑÃΩÃøÃãÕúÕ¢nÃîÕÜÕ•ÃæÕØÃàÕúÕúÃ°iÃåÕßÕ™ÃçÕ£ÃÄÕ™ÕêÕØÕ§Õ†ÕùÃ∏Ã∂mÕ•ÕÇÃíÕ™ÃáÃµÕèaÃÄÕíÃöÕ©ÃÅÃÜÕ£ÃçÃéÕ¶ÕåÕÆÃÑÕ©ÕõÃÅÃéÕßÃßÕúÃßtÕêÕ´ÃÄÃâÕÉÃÜÕåÃÖÕÜÕ¨ÕóÕóÕ°Ã¢cÕ•ÕóÃéÕ¶ÃÜÕ£ÕíÕßÕóÃâÃäÕíÃâÃëÃáÃÄÃ°hÃáÃæÕóÕêÃêÃÑÕ®Õ†ÕÄÃïÕòÃ∑@ÕäÃöÕÑÕ¶ÕäÃîÃèÃÉÃîÃÇÃÅÕØÕãÃÉÕêÕëÕùÃõ3ÕÑÃΩÕ®ÕØÃÜÕ®Õ≠ÕÜÃçÃáÃîÕêÕÉÃáÃ¢Õû“âÕÅÃµ.ÃâÕ¨ÃîÕ£ÃíÕÇÃ°Ã∂ÕùÃ∂Õú0ÃöÕ¨Õ•ÃíÕ¶ÕëÕõÃäÕ©ÃÑÃâÕ§ÃëÃìÕ¨Õ†Ã°Ã∑Õù.ÃéÕ©ÕãÃêÕÇÕÉÃæÃåÃ°“âÕü2ÕõÕØÕ®Õ§“âÃõÕÄ“âhÃÜÃàÕØÃéÃåÕóÕ´ÃÅÃ∏ÃõgÕêÕõÕÑÃéÃöÕ©ÃîÃöÃäÃøÕíÃåÃêÃÅÃÑÃ®Ã¥Ã∏Õ°“âsÃêÕ•ÃæÕ®ÕíÕãÃâÕÜÃíÃÉÕÜÃçÕ§Õ£ÃêÕ°ÕüÕüdÕ§ÕêÃÜÃÉÃåÃ∏ÕûfÕ≠Õ®ÃêÕ™ÕåÕØÕíÕ•Õ¨Õ†Ã°Ã∂ÕÄkÃçÕ®ÕÉÃàÕ®ÃéÕäÕ¨ÃìÃøÃíÃëÃ∏Õ†ÕúÕ†ÃµlÕäÃåÕÜÕåÕëÕëÕßÃãÕõÕ¨“âÃ®ÃïÕ¢ÃïhÃÜÃëÃÖÃéÃêÃÅÃëÃíÕ≠Õ•ÃáÃãÃìÕ¨Õ§ÕÇÕüÃßÃ¥Ã¢ÕÄgÃèÃãÕ´Õ•ÕÆÕ¢Õ†sÕ¨Õ≠ÃçÃíÕóÃäÃãÃîÃ°Õ°Ã∑ÕòlÕ§ÃÜÕåÕ°Ã¥ÃßdÕßÕóÃÜÃéÕßÕåÕãÃêÃéÕíÕÇÕ£Õ•ÕÜÃéÃÖÕ®ÃµÕòkÃáÕëÃåÃÄÕ™ÃîÃøÕÄÃµfÕÑÃÅÕÆÃÅÕØÃäÃäÃÑÃîÃçÃΩÕÆÃéÃÜÕØÕëÕ§ÕåÕ©ÕùÕûÕè“âjÕÑÃæÃçÕõÃÄÕ¨ÃáÕ©ÕõÕãÃÜÃÄÃåÃΩÕ§ÕØÕÉÕ™ÕÑÕÄÃ¢Ã∑gÃëÃÄÃæÕåÕõÃÖÃâÃèÕÇÃíÕ°Ã∏Ã∂Õù“âhÃÜÕ®ÕíÃãÃêÃÑÃåÕêÕ•ÃêÃéÕ™ÃÅÕ§Õ®ÃìÕÜÕ¶Õõ“âÕûÃ∏Õ¢ÕùlÃΩÕÉÕ™Õ†Ã¥ÕèsÃÜÕ™Õ¶ÃøÕäÃÉÃàÃáÃøÕõÃæÕÅÃïÕú“â“âkÃÉÕãÃöÕÑÕíÃãÕØÃâÕíÃèÃêÃÑÕÜÃ°Ã®Ã∏Õ¢jÃÑÃÇÕÜÃëÕüÃ¥dÃìÕ¨ÃΩÃÄÕ≠ÕÑÃéÕûfÃàÕ¨ÃãÃÜÃäÃÉÕÑÃ®Õ†Ã∏Õ°hÕ™ÕßÃîÕùgÕ¨ÃæÃøÃçÕõÃæÃÜÕ´ÕÇÃÜÃÉÕ≠ÕåÃæÃµÕûlÃëÕëÕ§ÕÜÃÅÃìÕÑÃÄÃöÕÇÕ¶ÕÉÕ†Ã∂ÕûÕÄkÃãÕäÕ©ÃÄÃãÃÄÃ∑ÕÅsÃΩÕ´ÃÖÃæÃÉÕíÕÄÕ°Ã∏jÃàÕÉÕêÃÜÃöÕõÃâÕùÃ°ÕèdÕóÃãÃîÃöÃÉÕêÃÇÃîÃÉÃëÃΩÕ´Õ•ÃáÕØÕ¨ÃçÃÇÕÑÃ¥Ã∏Õ¢Õ°fÃÅÃîÕ£ÕÆÕòÃ®hÕ®ÃæÃÜÃÅÃáÕÆÃîÕ©ÃåÕ≠Õ¶ÕäÕåÃæÕåÕóÃ∑gÃîÕóÃöÕêÃÉÕíÕäÕ•Õ¨Õ™ÃîÃäÕÉÕÆÃàÃ¢ÃµlÃÖÕ®ÃçÃΩÃÑÕëÃ¥Õ°Ã∏Ã¢kÃÄÕ¨ÃöÕùÃ∏jÃÜÃÑÃÇÃäÕ£ÃÑÃ∑ÕòÃ∑ÃõsÕêÃäÕÆÕäÃìÃßÕ†ÕúÕÅhÕêÕ©ÃäÃêÕ©Õ¨ÃèÕÇÕíÃæÃâÕúÕÅÕù fÃΩÃîÕÜÕ¶ÕóÃêÃâÃèÕ•ÕÑÕåÃäÃëÃíÃ¥Ã®Õ°ÕñÕîÃÆÃ©Ã≠Ã£ÃúÃ∞ÃúÃ•Ã§ÃóÃòÃ™ÕçÃ¨ÃªÃñÕñ;Õ™Õ®ÃÅÕ≠ÕÇÃàÃîÃáÃÄÕ©ÕÆÕêÕõÃöÕ¶ÕßÃÜÕÉÕ¢ÃµÕèÕ¢ÕìÕïÃ©ÃúÕÖÃ¶ÃÆlÃΩÃçÕäÃ®Õ¢ÃºÕçÃØÃ≤Ã±Ã£ÕôÃ¨ÕÖhÕÇÕÇÃΩÃéÕÜÕØÃÖÃêÕäÃøÕ®ÃâÃÖÃìÕòÕ°“â“âÕòÕöÃÆÃπÃ≥ÃòÃºÃ£ÃñÃ¨gÕ™ÕãÃÉÕûÕùÃ¥ÃôÕîÃªÃ•ÃªÕàÕáÃ≠Ã∫Ã§Ã≤ÃÆÕâÃüÃ£Ã©Ã•Ã´jÃìÃöÕåÕØÕêÕÇÃãÃâÃíÕÆÃîÃëÕ®ÃÉÃΩÃíÃéÃΩÃêÕòÃ°Ã™ÃùÃ≥ÕáÃ∫ÃóÃüÃÆÕìÕì3ÃöÕÜÕ£ÃΩÕÇÕ§ÃøÃíÃÄÕóÃÜÃá“âÕ°ÕîÃ™ÃªÃôÃπÃóÕöÕàÕöÃôÕîÃ•pÃëÃÜÃâÕ¶Õ§ÃäÃøÕÇÃçÃïÕùÃ®Õ¢ÕöÕáÃùÃòÃùÃ§ÃºÃ©ÕâÕéÕïÕçÃ±ÃòÕâÃ¨Ã∫Ã£ÕìrÕóÕäÃäÕÆÃëÕ™ÃéÕ¶ÕóÃÖÕíÕÇÃÉÕ†Õ†Ã®Ã∑ÕòÃªÕñÃ±ÕéÃúÕçÃ£ÃºÃ†ÃπÃ∞ÃûÃ∞ÕçÃØÃ≤oÕ™ÃçÕ©ÃáÃçÃëÕ§ÕõÕ•Õ•Õ®ÕíÃ¢Õ°Ã®ÃóÃ∫ÕöÕöÃüÃ∞ÕöbÃêÕ≠ÃöÃâÃÇÃæÕíÃãÕãÕ¨ÕäÃõ“âÕ°ÃõÕáÃôÃ´Ã≠ÕîÕàÕâjÕÆÕ®ÃîÕ®ÃîÕ™ÃáÃêÃçÃéÕóÕãÕêÃæÃøÕ©ÃÖÃîÕëÃ∂Ã®“âÕèÃπÃ∫ÃôÕìÃ©Ã∫Ã±Ã´ÕôÕáÃñÃ´ÃüÕéÃØÃºÕöÃóoÕãÕõÃåÕãÃãÃíÃÑÃæÃµÕ†ÃïÃïÃ¥ÕçÃ¨ÃºÕàÕÖÃ≥Ã∞ÕçÕàÃûiÃåÃíÃìÕÜÕ©ÕÇÃâÕåÕäÕêÃãÕóÕßÃîÃΩÕÅÃ®Ã¥ÃõÃùÕìÃ´ÕñeÃäÃâÕóÕíÃÇÃÜÕóÕ¨ÃÜÕÇÃéÕÜÕßÃΩÃâÃèÃöÃÇÕÅÕèÕèÕçÕöÕáÃ¨Ã≥ÕöÃ≥ÕçÃ±ÕéÃ∞ÕïÕàÃüÕïÕérÃìÃîÕíÃÄÃõÃ®ÕÅÃ®Ã•ÃûÃ•ÃùÃñÃπÃ∞ÃüÃØÃπÃñÕìÕá;ÃâÃäÕ¶ÕëÃäÕßÃÅÕ≠Õ™ÃÇÕ°Ã°ÕÅÕìÃúÃ§ÃπÕâÃ∞Ã´Ã†ÕöjÕ¨ÃèÃÄÃÜÕ©ÃÖÃøÕëÃâÕëÕØÃÉÕØÕó“âÕòÕîÕáÃ•Ã≠ÕÖÕìÃ±ÕàÃùbÃëÃÜÕ®ÃÜÃàÕßÕ¨ÃãÃøÕ≠Õ≠ÃøÕêÕÄÕéÕéÃûÕïÃ™Ã†Ã£ÃºÃùÕìÃòÕéÕçÃ•Õâ;Õ®ÕõÃêÕØÃîÃæÕêÃΩÕ†Ã°ÃûÃπÃºÃúÃ™Ã•Ã≤lÃöÃçÕ£ÃëÕ®ÃÄÃîÕÜÕ≠ÃéÕÇÕÉÕúÕÅÃ®Ã∏Ã¥ÃñÕôÃÆÕáÃ©kÃÄÕëÃîÕäÕêÕèÕ¢Ã∑ÕáÕçÃ©ÃòÕìÃ∫ÃôÃñÃ∞ÃúÃ§ÕôÕç3ÃÑÃöÃêÕØÃÖÃîÃáÕ©ÃçÃöÃøÃáÃΩÃèÕÇÃàÃ¢Ãï“âÕ†ÕúÃ™ÕÖÃùÃüÕçÃÆÕÖÕïÃªÃóÕÖÃ∞Ã™ÕÖjÃΩÕ•ÃêÃìÕÉÃäÃçÃåÕÆÃàÕùÃòÕñÃ¨ÕágÕ≠ÃçÃÜÃÇÃÇÕ´ÃøÃÖÕÉÃåÃÇÃäÃøÕ®ÃéÕíÃÜÕõÃΩÃ¥Ã¢ÕÄÕòÃ±ÕáÃüÃ≤Ã•ÕñÃ£Ã∫Ã•Ã£Ã§Ã≥ÃúÃ§ÃªpÃÉÃöÕäÕäÃïÕòÕúÃñÕçÃôÃ£ÃüÕöÃñoÃàÃêÃèÃΩÃäÃæÃöÕ≠ÕÆÕ£ÃÄÕ•ÕãÃã“âÃ¥ÃßÕñÃúÃúÃ≤bÕ©ÃîÃëÃëÃÜÕÑÃøÃøÕ®ÕòÃ¢Ã¨ÕàÃ±Ã¨ÃπÕñÃºÃ©ÕöÃ´ÃñÃ¶Ã§ÃùÃ≥ÕîÃòÃØiÕ≠ÃåÕäÕÑÕåÕØÃöÃÖÃøÕóÕãÕ¶ÕíÃÖÕ´ÕõÃ®ÃµÕüÕÖÃ¨ÃòÃ∫ÃπÃ≤ÃòÕÖÃ©ÕéÃ´Ã∞ÃôgÕÑÃãÕãÃæÕ¶ÕãÕóÕÆÃ∏ÕÅÃ∏Ã®Ã´Ã¶Ã¨ÃôÃùÃ≥ÕçÕÖÃ´ÕñÃºÕîÃñÕéÃ£ÃòÃ¶Ã∞Ã¨jÃæÕÜÃáÃìÕ¶ÕêÕ™ÃÜÃöÕ©ÃçÕÉÕóÃàÃ®ÃïÃªÃûÕöÕéÃúÕîÃòÃ∞ÕçbÕØÃÖÃáÃãÕúÕòÃßÃ∞ÃóÃ†ÕöÃ≤Ã™ÃÆÃüÃ†ÃûiÕóÕ¨ÃâÃìÕåÃêÃÖÃöÃãÃ∏“âÃ∂ÕáÃ§ÃØÃûÕâÃ™ÕàÕöjÃÜÕäÃìÃçÕÑÕßÃëÃèÕÆÃµÕèÃóÃ≥Ã•ÃòÃ±5ÕÇÕäÕÜÕäÃçÃãÃíÃâÕ§ÕÅÕúÕòÕèÃñÃπÃñÃØÃ™Ã¶ÕñÃÆÕàÃ¶tÃçÕÆÕÉÃøÃÜÕßÃÄÃîÕÇÃëÃÉÕ≠ÃèÕíÕåÃàÕûÃ∂ÕôÃ≤ÕìÃÆÕôpÕßÃÄÃíÕÇÕÆÕ™Õ®ÕßÕ¢ÕúÃõÕôÃ£ÃóÃòÃüÃ±ÃûgÕåÃæÕØÃâÃîÕØÕÆÃÑÕ®ÕäÕóÃµÃ°ÕüÃµÃ¢ÃùÃ±ÃÆÕñÃ∞ÃπÕôÃòÃùÃ≥Ã∞Ã±Ã†ÕöÕñiÕ¨ÃãÕõÕØÕÇÃìÕÉÃéÕ§ÃöÃäÃàÃöÕÑÕ§ÃΩÃêÕ§Ãê“âÕÅÃôÕáÕÖÃ∫ÕçÃ∞ÕâÃ≤ÕôÃ≥Ã¨ÕîÕàÃùÕâÕÖÃ£Ã∞ÃØjÕ´ÃÖÃëÃëÃäÃÅÃâÃÉÕõÕãÃöÃçÃâÕÑÕÑÃøÃÇÃÅÕ°ÕòÃ°ÕÅÕúÃ•ÃÆÃùÃóÕîÕéÃôÃ≠ÃûÃ¨Ã±Ã©Ã•Ã¶5ÃöÕÑÕ´ÃÄÃàÃìÕ®ÕÇÃëÃÉÕßÕóÃåÃÇÕäÕòÃµÃØÃÆÃóÕîÃüiÕ´ÕãÃöÃíÃîÃãÕ¶ÕêÕ¨ÕãÕÆÕ©ÕêÃéÃè“âÕÅÃßÃòÃ´ÃÆÃóÃ©ÕàÃ∫Ã∫Ã™uÃÉÕ®ÃãÃöÕßÃÉÃøÃÄÕ™ÃëÃöÃíÕëÕ¨ÕåÃïÕ°ÕÅÃúÕñÃ≤Ã¨ÕñÃ∞Ã∞ÃñÃºÕöÃ≤ÕôÃñÃ¨Ã¨Ã•ÃògÃâÃÇÕßÃÇÕÜÕÉÕ§ÕãÕÑÕóÕØÃÅÕÜÕßÕ†Ã∏Ã¶ÕìÕâÃúÕáÕéÃ±ÃÆÕàÕçÃ£ÃØjÃãÕ¶ÕêÃíÃÇÃÄÃÄÕ´Õ™Õ£“âÕÅÃß“âÕçÕçÃØpÃàÃΩÃãÃèÃâÃÉÕ™ÃäÃèÕíÃ∂Ã∏Ã´Ã≠Ã©Ã∞Ã§iÕ®Õ™Õ£ÕãÕëÕ•ÕÄÕèÃ°ÕìÃòÃüÃ≤ÕàÃ•Ã©Ã≠5Õ¶ÃéÃøÕ¶Õ©ÃàÕäÕõÕ£ÃáÕ•ÕãÃëÕëÃèÃΩÕêÃ¢Ã∑Ã∑ÕûÃµÃ≤ÃºÃØÃªÕçÃûÃ§ÕñÃ•ÕôÃ±ÕôÃòtÃøÕóÕ¨ÃøÕíÕóÃçÕãÕãÃ∑Õè“âÕéÕÖÃÆÃ±ÃπÕìÃ£ÕâÕáÕôÃ¶jÕõÃøÃëÃìÕ≠ÕÇÕäÕ•ÕåÕåÕ¨Ãï“âÃ≤Ã†ÃüÃ†ÃÆÃ£gÃÅÕÜÕõÃëÃêÕ£ÃáÃÄÕ≠ÃÜÕ©ÕßÃΩÕåÃãÃêÃÇÕåÃÉÃ∂ÕúÕöÃØÃ∫ÃûÃ•ÃüÃòpÃçÕ≠Õ•ÃãÕ¶Õ¶Õ§ÃõÕùÕûÕüÕùÕöÃªÃüÕöÃòÃ≠ÕìÃùÃºÕñÕñÃ†ÃûÃπÃùÃ´iÕ®ÃëÕãÕ®Õ®ÕäÕßÕÑÕÅÃßÕüÕò“âÃ∞Ã≠Ãú4ÃäÃÉÃëÃöÃìÕÆÃÜÕ¶ÃÜÕÉÕíÃÇÕ´Õ¨Ã¥Ã∑Õ¢ÕüÃõÃ∫ÃûÕÖÃØÃÆ5ÕÆÕõÃÜÕØÃçÕêÕãÃèÕ•ÕßÃåÕÜÕ´ÕÆÃÑÃÑÃ¢ÕûÃ∑Ã®ÃµÃ¨ÃºÃ´ÃòÃùÃ≥ÃúÕîÃ†ÃñtÃîÃçÕêÃèÃ∑Ã¥ÕòÃßÃòÃ≠Ã≥ÃñÕîÕìÕçÃ´Ã≠ÃôÃòÃ¶ÕájÕ¶Õ´ÕêÃäÃîÃßÃõÕ†ÃªÃ¨ÕñÃØÃ¶ÃûÃ∫ÃªÃòÃ≠Ã≤ÃπÕöÃØÃ©Ã¶ÃóÃ£gÕßÃÄÃÜÕØÕÉÕ®ÃãÃíÕßÕíÃîÕÑÕÆÃìÕÑÕ§Õ¶ÕûÃïÕûÃ¥ÃòÕâÕñÕôÃôÕîÃñÃúÕñÃñÕçÃ†Ã∫fÃΩÃîÕÜÕ¶ÕóÃêÃâÃèÕ•ÕÑÕåÃäÃëÃíÃ¥Ã®Õ°ÕñÕîÃÆÃ©Ã≠Ã£ÃúÃ∞ÃúÃ•Ã§ÃóÃòÃ™ÕçÃ¨ÃªÃñÕñ;Õ™Õ®ÃÅÕ≠ÕÇÃàÃîÃáÃÄÕ©ÕÆÕêÕõÃöÕ¶ÕßÃÜÕÉÕ¢ÃµÕèÕ¢ÕìÕïÃ©ÃúÕÖÃ¶ÃÆlÃΩÃçÕäÃ®Õ¢ÃºÕçÃØÃ≤Ã±Ã£ÕôÃ¨ÕÖhÕÇÕÇÃΩÃéÕÜÕØÃÖÃêÕäÃøÕ®ÃâÃÖÃìÕòÕ°“â“âÕòÕöÃÆÃπÃ≥ÃòÃºÃ£ÃñÃ¨gÕ™ÕãÃÉÕûÕùÃ¥ÃôÕîÃªÃ•ÃªÕàÕáÃ≠Ã∫Ã§Ã≤ÃÆÕâÃüÃ£Ã©Ã•Ã´jÃìÃöÕåÕØÕêÕÇÃãÃâÃíÕÆÃîÃëÕ®ÃÉÃΩÃíÃéÃΩÃêÕòÃ°Ã™ÃùÃ≥ÕáÃ∫ÃóÃüÃÆÕìÕì3ÃöÕÜÕ£ÃΩÕÇÕ§ÃøÃíÃÄÕóÃÜÃá“âÕ°ÕîÃ™ÃªÃôÃπÃóÕöÕàÕöÃôÕîÃ•pÃëÃÜÃâÕ¶Õ§ÃäÃøÕÇÃçÃïÕùÃ®Õ¢ÕöÕáÃùÃòÃùÃ§ÃºÃ©ÕâÕéÕïÕçÃ±ÃòÕâÃ¨Ã∫Ã£ÕìrÕóÕäÃäÕÆÃëÕ™ÃéÕ¶ÕóÃÖÕíÕÇÃÉÕ†Õ†Ã®Ã∑ÕòÃªÕñÃ±ÕéÃúÕçÃ£ÃºÃ†ÃπÃ∞ÃûÃ∞ÕçÃØÃ≤oÕ™ÃçÕ©ÃáÃçÃëÕ§ÕõÕ•Õ•Õ®ÕíÃ¢Õ°Ã®ÃóÃ∫ÕöÕöÃüÃ∞ÕöbÃêÕ≠ÃöÃâÃÇÃæÕíÃãÕãÕ¨ÕäÃõ“âÕ°ÃõÕáÃôÃ´Ã≠ÕîÕàÕâjÕÆÕ®ÃîÕ®ÃîÕ™ÃáÃêÃçÃéÕóÕãÕêÃæÃøÕ©ÃÖÃîÕëÃ∂Ã®“âÕèÃπÃ∫ÃôÕìÃ©Ã∫Ã±Ã´ÕôÕáÃñÃ´ÃüÕéÃØÃºÕöÃóoÕãÕõÃåÕãÃãÃíÃÑÃæÃµÕ†ÃïÃïÃ¥ÕçÃ¨ÃºÕàÕÖÃ≥Ã∞ÕçÕàÃûiÃåÃíÃìÕÜÕ©ÕÇÃâÕåÕäÕêÃãÕóÕßÃîÃΩÕÅÃ®Ã¥ÃõÃùÕìÃ´ÕñeÃäÃâÕóÕíÃÇÃÜÕóÕ¨ÃÜÕÇÃéÕÜÕßÃΩÃâÃèÃöÃÇÕÅÕèÕèÕçÕöÕáÃ¨Ã≥ÕöÃ≥ÕçÃ±ÕéÃ∞ÕïÕàÃüÕïÕérÃìÃîÕíÃÄÃõÃ®ÕÅÃ®Ã•ÃûÃ•ÃùÃñÃπÃ∞ÃüÃØÃπÃñÕìÕá;ÃâÃäÕ¶ÕëÃäÕßÃÅÕ≠Õ™ÃÇÕ°Ã°ÕÅÕìÃúÃ§ÃπÕâÃ∞Ã´Ã†ÕöjÕ¨ÃèÃÄÃÜÕ©ÃÖÃøÕëÃâÕëÕØÃÉÕØÕó“âÕòÕîÕáÃ•Ã≠ÕÖÕìÃ±ÕàÃùbÃëÃÜÕ®ÃÜÃàÕßÕ¨ÃãÃøÕ≠Õ≠ÃøÕêÕÄÕéÕéÃûÕïÃ™Ã†Ã£ÃºÃùÕìÃòÕéÕçÃ•Õâ;Õ®ÕõÃêÕØÃîÃæÕêÃΩÕ†Ã°ÃûÃπÃºÃúÃ™Ã•Ã≤lÃöÃçÕ£ÃëÕ®ÃÄÃîÕÜÕ≠ÃéÕÇÕÉÕúÕÅÃ®Ã∏Ã¥ÃñÕôÃÆÕáÃ©kÃÄÕëÃîÕäÕêÕèÕ¢Ã∑ÕáÕçÃ©ÃòÕìÃ∫ÃôÃñÃ∞ÃúÃ§ÕôÕç3ÃÑÃöÃêÕØÃÖÃîÃáÕ©ÃçÃöÃøÃáÃΩÃèÕÇÃàÃ¢Ãï“âÕ†ÕúÃ™ÕÖÃùÃüÕçÃÆÕÖÕïÃªÃóÕÖÃ∞Ã™ÕÖjÃΩÕ•ÃêÃìÕÉÃäÃçÃåÕÆÃàÕùÃòÕñÃ¨ÕágÕ≠ÃçÃÜÃÇÃÇÕ´ÃøÃÖÕÉÃåÃÇÃäÃøÕ®ÃéÕíÃÜÕõÃΩÃ¥Ã¢ÕÄÕòÃ±ÕáÃüÃ≤Ã•ÕñÃ£Ã∫Ã•Ã£Ã§Ã≥ÃúÃ§ÃªpÃÉÃöÕäÕäÃïÕòÕúÃñÕçÃôÃ£ÃüÕöÃñoÃàÃêÃèÃΩÃäÃæÃöÕ≠ÕÆÕ£ÃÄÕ•ÕãÃã“âÃ¥ÃßÕñÃúÃúÃ≤bÕ©ÃîÃëÃëÃÜÕÑÃøÃøÕ®ÕòÃ¢Ã¨ÕàÃ±Ã¨ÃπÕñÃºÃ©ÕöÃ´ÃñÃ¶Ã§ÃùÃ≥ÕîÃòÃØiÕ≠ÃåÕäÕÑÕåÕØÃöÃÖÃøÕóÕãÕ¶ÕíÃÖÕ´ÕõÃ®ÃµÕüÕÖÃ¨ÃòÃ∫ÃπÃ≤ÃòÕÖÃ©ÕéÃ´Ã∞ÃôgÕÑÃãÕãÃæÕ¶ÕãÕóÕÆÃ∏ÕÅÃ∏Ã®Ã´Ã¶Ã¨ÃôÃùÃ≥ÕçÕÖÃ´ÕñÃºÕîÃñÕéÃ£ÃòÃ¶Ã∞Ã¨jÃæÕÜÃáÃìÕ¶ÕêÕ™ÃÜÃöÕ©ÃçÕÉÕóÃàÃ®ÃïÃªÃûÕöÕéÃúÕîÃòÃ∞ÕçbÕØÃÖÃáÃãÕúÕòÃßÃ∞ÃóÃ†ÕöÃ≤Ã™ÃÆÃüÃ†ÃûiÕóÕ¨ÃâÃìÕåÃêÃÖÃöÃãÃ∏“âÃ∂ÕáÃ§ÃØÃûÕâÃ™ÕàÕöjÃÜÕäÃìÃçÕÑÕßÃëÃèÕÆÃµÕèÃóÃ≥Ã•ÃòÃ±5ÕÇÕäÕÜÕäÃçÃãÃíÃâÕ§ÕÅÕúÕòÕèÃñÃπÃñÃØÃ™Ã¶ÕñÃÆÕàÃ¶tÃçÕÆÕÉÃøÃÜÕßÃÄÃîÕÇÃëÃÉÕ≠ÃèÕíÕåÃàÕûÃ∂ÕôÃ≤ÕìÃÆÕôpÕßÃÄÃíÕÇÕÆÕ™Õ®ÕßÕ¢ÕúÃõÕôÃ£ÃóÃòÃüÃ±Ãû In other news, 3 Billion devices run Java, IE is still maintained for corporate America, and Flash still somehow shakily holds up millions of dollars of trade in industry.
"a linter error" would be the best answer to these questions.
why would you not use github.com/facebook/dataloader in a graphql server, you wrap those into class and call it done resolve: (root, arg, ctx) =&gt; ctx.dataloaders.recipient.get(args.id);
Ah, the guy you can pay to say anything. Neat.