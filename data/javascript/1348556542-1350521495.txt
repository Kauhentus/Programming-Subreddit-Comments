The internet does not forget ;-) http://wayback.archive.org/web/*/http://labs.pimsworld.org/wp-content/uploads/2009/04/demo-content-aware-image-resizing-2/
I forgot JS didn't have lookbehinds. Got pretty pissed a few minutes ago.
I've success with this: http://pastie.org/4796226, though I think it is a bit messy...
Maybe it's gotten better over the last few months, but I've found in practice, it just doesn't abstract the inconsistencies between the three rendering modes. You get simple things that work on one, and not on the other. The SVG mode is especially buggy.
Don't trust this: "it feels 'laggy'". Use your analytics service to monitor your page speed, look at how long your onready takes to fire. Once you know your problem use clarle's suggestions to isolate your problem. It might be that you have slow DNS lookups of which Javascript optimizing wont help. Like I said, isolate then resolve.
Very nice indeed!
JMeter
You say stress test, but I think you mean performance profiling. As others mentioned already Chrome Developer tools does a good job at that. When I hear stress test I'm thinking load testing, for which I can recommend browsermob.com. 
I haven't read through that one, but after looking at the table of contents on Amazon, seems like it covers all the basics. One of the nice things about jQuery is that although there are a lot of options there, there are relatively few top level areas (selectors, traversing, events, ajax come to mind). With just the basics of those 4 areas down you can do a lot! If you're coming in new to Javascript one of the big questions is whether you should focus on jQuery or Javascript. Level 1 of jQuery Air is pretty much straight JavaScript, then level 2 gets into the actual jQuery side of things. I think you can get a good overview of Javascript just by learning jQuery though. Then you could build on that with a book like "Javascript: The Good Parts", which is probably the best JS book once you're feeling comfortable with JQ/JS. Either way, just keep at it. :)
That looks really nice. Eventual support for other platforms (Android, iOS, Windows) announced?
There is no mention from him about android or windows, but he tends to write a lot of good technical details here http://www.phoboslab.org/ and it is on github so maybe someone will fork it. I use cocoonjs right now for android but it's not fleshed out 100%
Butte? And here, these helped me out a bunch: Eloquent JavaScript is a great free ebook with an interactive console. It's more consistent than codecademy, as there is only the one author. Also the author responds very quickly to questions. There is also a free e book for Drawing with JS on the HTML5 canvas. I forget what it's called but it shouldn't be hard to find. It starts at drawing a line and goes through advanced animations and games. I think it's a great next step if you are done with codecademy. ~~When I'm back at my computer I'll edit this with a link~~ [Here](http://joshondesign.com/p/books/canvasdeepdive/toc.html) it is. It's called HTML Canvas Deep Dive. Another one of my favorites is [here](http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/) a free online JS design patterns book.
Check out the `window.atob` and `window.btoa` methods. Supported by modern browsers. Try wrapping the native Backbone `.fetch()` call with a function that does something with these. https://developer.mozilla.org/en-US/docs/DOM/window.atob https://developer.mozilla.org/en-US/docs/DOM/window.btoa
Pretty much all of O'Reilly's JavaScript books are great. I wouldn't recommend reading The Good Parts as a beginner, though - it's fairly heavily opinionated. If you've got previous programming experience, I'd definitely recommend JavaScript: The Definitive Guide (O'Reilly Media). **Stay the hell away from w3schools!** http://w3fools.com/
You can use jQuery to automatically modify all AJAX requests. http://api.jquery.com/ajaxSend/ It would basically look something like this: $(document).ajaxSend(function(e, jqXHR, settings) { // do your base64 encoding to settings.data });
You might find *Master Space and Time With JavaScript* helpful: [http://www.noelrappin.com/mstwjs](http://www.noelrappin.com/mstwjs). It's not completely beginner, but it does speak to JavaScripts particular object module and how functions work.
Yeah, I have read that w3schools isn't regarded highly before, and awesome, I'll probably put down JS:The Good Parts and read that first.
Yep, Butte. Do you recommend I do codeacademy, or skip it and do Elequent JS, et al? HTML Canvas Deep Dive looks like a better version of HTML5 Canvas. Thanks for the suggestions!
Neat, I'll check this out tonight.
Definitely. It also reminds me of making music with `beep -f` on linux. 
Well it's definitely not something you're doing wrong because I have the same problem, it's frustrating! A lot of the time it's better in firefox as well, (though not in this case, but when using the audio Data API instead of the web audio API).
I'm not sure what you mean by 'demo'? It's free and open source. If your looking for examples. I think there are plenty on the site. And the site itself uses it. I guess let me know if you meant something else.
Thanks. I appreciate the positivity. One thing to note I would never use this to compile on the fly per request in production. Basically with any of these pre-processing language it's common practice to precompile your assets first. That being said of the three big ones Less is the only one that can exist on the client side. Which feels even more wrong to me but, that's why there are choices.
This. `var` defines a new variable.
Thanks! I didn't use any libraries, just the canvas API (and CoffeeScript). I haven't thought this through all the way, but I'm planning on open-sourcing the display list implementation when it's a little farther along. You can read the [source for this project here](http://zevyoura.com/misc/road-trip/coffee/main.coffee) for now though. Not guaranteed to be the prettiest code you've ever seen :)
cool, I learned some new things: http://pastebin.com/h5P1GvHR
Looks good. You can just use the permalink button, by the way :-P
I don't really agree. Lots of it is useful only in rare situations. And why would I want to do this: S('My name is JP').right(2).s When I can do this natively: 'My name is JP'.slice(-2); Some others like the `repeat` can be more useful. While it's possible to do it naively in one pass, the syntax is far from sexy. But again, when was the last time you needed to repeat a chunk of string ? To me this library is missing one of the most useful functionality: *[advanced string formatting](https://github.com/h3/string.format.js)*.
Thanks! Very helpful.
That's the point of the plugin D:
Once my game is done I will need something like this for Windows, so if it doesn't exist by then I plan to make it myself (open source, of course)
I am thinking of load testing. Im finding that certain functions in the side (lazyload) are laggy in certain browsers (oddly Chrome). I would like to know if this is because of the number of processes happening at the same time, or whether its poorly structured requests. Thanks for the browsermob suggestion. I just remembered Blitz too...
That sounds like an interesting yet non-trivial undertaking. I wish you good luck with that.
When you say stress test that suggests load testing. But you are having an issue with page load speed. You said the wrong thing. 
But it has a snazzy website! Hypesites really remind me of this: http://vanilla-js.com/
There's also node-webkit - https://github.com/rogerwang/node-webkit - what it lacks in slick marketing websites, it makes up in technical know-how. Some engineers at Intel combined the webkit and node event loops into one, so the application domain is seamlessly integrated between the "browser" space and the "application" space.
How does this compare to [underscore.string](http://epeli.github.com/underscore.string/)?
I like CodeAcademy - http://www.codecademy.com/tracks/javascript - it is interactive and you have to practice coding as you go through. You also have little mini projects to help you put what you've learned into practice. Eloquent JavaScript is often recommended and available for free online - http://eloquentjavascript.net/contents.html
Check out the free e-book [Eloquent JavaScript](http://eloquentjavascript.net/)
Thanks for the feedback. Fortunately, it's MIT licensed, so if anyone needs a function or a snippet, they can just copy and paste it into their own app. What do you mean by make it handle non-English text property? Can you elaborate a bit more on problems that people face while dealing with non-English text?
They are very similar. In fact, some code was used from underscore.string. The major difference is that underscore string encourages this: _.right('some string', 2) vs S('some string').right(2). Note that with underscore string, you can do it the other way, i.e. _('some string').right(2), but it's my understanding that you are then forced to integrate with underscore. I may be misinformed, so someone please correct me if I'm wrong. Also, the way that chaining is handled in this library is much nicer. Also, this library imports all native JavaScript functions, such it's a drop in replacement for native JavaScript strings. Full disclaimer, I'm the author the library if it wasn't clear already.
Interesting, I never thought that someone would describe a README as a hype site. The site is just this https://github.com/jprichardson/string.js/blob/master/README.md pushed through http://documentup.com
It looks like a solution for the problem of: function Thingie() { this.x = 1; } Thingie.prototype.aMethod = function() { return this.x; } var aThingie = new Thingie; var doItToIt = aThingie.aMethod; console.log(doItToIt()); // logs: undefined // wtf, why didn't it return 1 (aThingie.x)? If you just grab the method off the object, it doesn't magically retain `aThingie` as its `this`. It appears that OP's invocator function is the missing link, so that you can grab just the function and, when you call it, it still uses its original object for `this`. It's similar to $.proxy(), if you're familiar with that from jQuery.
YAY!
Awesome! I appreciate it man. Everything I have found so far all assumes you have previous experience 
jQuery is a JavaScript library. You include a script file into your page to use it. It greatly simplifies a lot of things you want to do with JavaScript. If you want to learn it that book is a good one.
Can you name one video card which doesn't support DirectX or OpenGL?
It [apparently provides a little more](http://www.reddit.com/r/javascript/comments/10i8jc/invocable_instances_in_js_hell_yea_gist_snippet/c6dqyv9?context=3) than that. It mostly feels like a small piece of syntactic sugar.
Hi. Ok, you did something, and it was a lot of work. Thanks. I'm glad. I don't mean to be harsh to you as a person. Thanks for contributing to the community. 
You said it hangs when there are a lot of towers. It could be because of the number of towers you are trying to calculate distance from. I'm afraid I don't have an exact solution, but if you can find a way to reduce the number of towers to check against before calculating the distance, it might help.
Yeah. Mine.
jQuery is a classic example of the "invocator pattern". It is exported as $ (or jQuery), and $ is both an invocable function $() and an instance of the jQuery class $.each(); The way this could be done is by factoring, but it requires an ad-hoc type of design. ([See how jQuery does it](https://github.com/jquery/jquery/blob/master/src/core.js#L27)). What in essence is going on there is every time you invoke $() a new instance of the jQuery class is created and the constructor executed... The "invocator pattern" now allows for prototypical, pseudo classical, patterns to expose methods on the instances created. It's a new concept for JS, and old and known one for OOP 
Well, it's rather random. It can happen when you have two towers, or not until you build two dozen. It also runs for a while at full speed with that many towers before it suddenly crashes out.
That's a good idea, thanks. edit: is there a convenient way to print in JS without printing to the screen? I found http://jsconsole.com/ which seems to be useful in some form. I'll do more research when I get back from class on it.
So i've been on codeacademy for the better part of my workday now lol. The site is more or less exactly what i'm looking for, but it brought me to another question. What program can I use that acts like their little code window. edit: Failed formatting option lol I've used notepad++, and dreamweaver, but neither have a command window (to my knowledge), and I can't figure out how to test run my scripts... I'm at a loss again xD
Hey guys, this is my first go around posting on /r/Javascript. The motivation behind this series of posts comes from interacting with a lot of server focused developers that hear names like Mustache, Backbone or jQuery and don't understand the difference. The JavaScript landscape is very diverse and my hope is to help demystify it at a very high level. Ultimately identify and explain the reasons why certain types of libraries exists and some of the most popular options in the open source world. Hope you guys find this helpful, lots more posts coming.
If the `deviceorientation` event doesn't work for you, you can also listen for `$(window).resize()`. Probably wanna throttle that, too: (function() { var resizeTimeout; var throttleTo = 300; // milliseconds $(window).resize(function() { clearTimeout(resizeTimeout); setTimeout(onWindowResize, throttleTo); }); })(); function onWindowResize() { // do stuff; } --- On an unrelated note, [ughhhh jQuery](http://api.jquery.com/load/) what is this: &gt; Note: The event handling suite also has a method named .load(). jQuery determines which method to fire based on the set of arguments passed to it.
I would guess that your Arraylist() class is leaky, in removing your mobs. Why not use a standard array and splice() out the items to be deleted instead? You should also try using the javascript profiler for Firebug or in the Chrome Developer Tools to see what's actually going on. 
When I coded that I was wishing JS was more like java. I'll look up splice(), thanks. I'll also look into Firebug. Cheers.
As a relative newcomer to Javascript (I took it for a school class, and passed CIW Javascript certification for the class a couple of weeks ago), I can say that this was a well written article fore newbies like me. I understood the general concept of JS Libraries, but not the details like what the strong suit of each popular library is, etc. I will read your entire series, assuming you post them on this subreddit, and look forward to getting that info. Thanks!
console.log() =D
It is worth mentioning that all of the code has been written using the infusion javascript framework. The code is comprised of a number of components that can all be substituted, meaning you could replace any part of the code (such as the renderer or the oscillator). Every bit of my code passes through jslint with has strict. edit: it also works in both firefox and chrome on mac / pc... kinda works on linux too (but not so well). The audio currently works in safari, but it renders incorrectly due to a bug in webkit (I believe this is fixed upstream). Inclusive: It works with screen readers Responsive: Automagically fits in any div
As far as I know, it works for me in Chrome. [Screenshot](http://i.imgur.com/swuks.png?1)
You can find here more details on conversion sRGB to linear RGB an vice versa http://www.harrybardak.co.uk/sRGB.htm
On my iPad the text is cut off after "... it calculates the". If there is more text, I can't figure out how to display it.
Pretty great man. Wanna go into why you chose svg instead of canvas? I didnt look deep into the implementation.
It turns out this is a pitch, but it's a *great* pitch, so I'm okay with it.
'i' Is a global variable and while looping throw your towers for 'fire' you are resetting the value of i causing an infinite loop at: for (i = 0; i &lt; towers.length(); i++) towers.get(i).fire();
What is the purpose of this?
Wow fuck thanks.
Oh cool. fellohian. it's the heart of it all.
How do you detect whether a word is cut off?
There might be in the future.
Does it cover how to remove the events from a view properly after you route to a different route? No matter how I try I can't get that to work (I'm actually using backbone.relational but I don't think it should matter), and I haven't found a good answer on the internet yet. Any tips here would be really great (as in, actual people who've managed to stop the events duplicating, not just links to blogs half of which are out of date).
Since it's related is there a collection somewhere of the backbone.js frameworks that are available? Or do you sort of need to know they exist? I've been using angular recently but I would like to at least know what I'm missing.
Combination of a script that constantly cURLs the high load URLs, and [Chaos Monkey](https://github.com/Netflix/SimianArmy)
While DarkZlayer seems to have caught your problem, I'll just note that's a rather odd distance function this.getDistFrom = function(x, y) { var dx=x-this.x; var dy=y-this.y; return Math.sqrt(dx*dx + dy*dy); } This is the same thing only no Math.pow and no Math.abs. The Math.abs is purely redundant because q^2 is positive if q is negative. Writing dx*dx instead of Math.pow(dx,2) is probably faster and imho much easier to take in at a glance. 
Is this the sort of thing you're looking for? https://gist.github.com/3793660 Backbone.View.prototype.close = function() { // Remove the view's element from the DOM and any associated event handlers this.remove() // Remove event handlers registered on the view this.off() // Remove event handlers the view registered on its model or collection if (this.model) { this.model.off(null, null, this) } if (this.collection) { this.collection.off(null, null, this) } } 
I'm curious about the practicalities of ensuring security and PCI-DSS compliance when you're offering an API like this....
Nice find, dave :)
Your gameLoop will reach the maximum call stack size and crash if the user's computer is constantly lagging. if (continuing) { //Sometimes we dont want to continue looping if (1000/FRAMERATE - timer.getTime() &gt; 0) //If there's time left in the current frame setTimeout("gameLoop()", 1000/FRAMERATE - timer.getTime()); else //The user's machine is lagging and we should start the next frame asap gameLoop(); } Just a quick note. Not related to your question.
Quite probably, looks promising! I'll give that a try when I get the time and definitely let you know if it works for me. Thanks a lot :)
I think your solution will fail on the cases with a bold section inside of the italic section: *italic text **with bold** *
After reading your comment over again I realized you may have been asking about alternative JS MV* frameworks. [TodoMVC](http://addyosmani.github.com/todomvc/) by Addy Osmani is a great resource for comparing all the frameworks out there.
Looks like [Pin](https://pin.net.au/) is a similar service to [Stripe](https://stripe.com/) in the US/Canada. 
oh no, I hope overneath is okay and that nobody broke in in the middle of the night and did something nefarious.
you hafta actually hit the "reply" link on somebody's comment to reply to them. this comment you have posted is in reply to the whole post, not jasonellis.
Lol. I was commenting via phone and pressed Send too soon. Reddit Sync doesn't allow comment editing and I just never got around to fixing it. 
Whew. That's a load off my mind.
please leave your opinion about the resource, it is very necessary for me. Thanks.
Thanks for the clarification! Man, I love you guys.
I'll try and give you the overview with as much brevity as I can: **ServerSide MVC [Symfony, Yii]** * client issues request * server fetches models from db * server renders templates with models from db * server returns rendered markup over the wire to the client **ClientSide MVC [Backbone, Ember, Angular]** * client issues request * server fetches models from db * server returns models and data as json (or xml) over the wire to the client * client renders markup using a client-side templating library (like [handlebars.js](http://www.handlebarsjs.com)) The big difference is where the rendering happens and how much data is sent over the pipe. In server-side MVC the server is responsible for rendering and delivering all the HTML, CSS, JS over the wire to the client which just displays it. In client-side MVC the server just delivers JSON (or XML) over the wire to the client which renders and displays it. The purported benefits of the client-side approach are: * less data over the wire * ability to avoid full page reloads In absolute terms, neither approach is better than the other. Client-Side MVC has gained in popularity as the power of browser rendering and JavaScript parsing engines has increased (primarily driven due to the release of the V8 Engine from Google). You should try out both approaches and see what you find easier to work with :)
Nope. It was the first one :P And thanks for those resources.
What's with the up/downvote arrows? They're a tiny click target and don't seem to do anything.
Nice list, shame about the iframes.
No problem man. The chrome debugger really helps in tracking down issues like this.
Neat site. Bookmarked.
I like how the homepage mentions "Why so affordable?", yet nowhere it says what it actually costs :)
I don't understand it; 'Mentions' isn't clickable and has no stats, and the ones near the top don't really seem big projects? Where is backbone, angular, etc?
Any feedback/suggestions welcome! Currently has two transitions, but more are coming and can be added just by adding methods to the transitions object. Examples are at the bottom of the javascript code. Accepts duration in milliseconds, a jquery element object, 2 integers defining the grid dimensions, and a callback :)
Here is how it should look like (i've done the conversions, see source code): http://www.zagura.ro/jbili/jbilicorrect.html Here is how it looks with your (original) code: http://www.zagura.ro/jbili/jbili.html Here is the original image: http://www.zagura.ro/jbili/gamma_dalai_lama_gray.jpg Speed improvements can be made (precomputed translation tables) but that's beside the subject.
Boy, I appreciate the gesture, but only do that if you have the time. I'm pretty confident I could get it working based on your description. Plus, I'd hate the thought of taking you away from your own projects, family, or other duties.
Yes it does, lowest I've tested is IE8 :)
I really quite like this :)
wouldn't blast.length be 1?
Hey guys you don't need to pay to learn JavaScript, the documentation is all free and so are the JavaScript interpreters.
http://thenewboston.org/list.php?cat=10
As usual, after looking at [yet another] site on my sucky Windoze computer with IE, I must say ... I FUCKING HATE WINDOZE AND IE!!! Windows 7 with IE 8 ... the site looks horrible.
Good screencast. Backbone is great, but you end up having to do a lot of things like you displayed when you start building large applications. I guess I'm in in the camp that says views should be disposed and all events should be detached when they are transitioned away. Have you looked at Chaplin (https://github.com/chaplinjs/chaplin) at all? 
The first thing I click on was [this](http://cssdeck.com/labs/understanding-the-difference-among-the-different-ways-of-defining-functions) I even learned stuff. But I think it should be mentioned that new Function('a', 'b', 'return a+b;'); Is also an implicit `eval` and should further be avoided for that reason.
Perhaps, put it in a jsfiddle. Questions that have a jsfiddle associated with them are much more likely to get answered.
Try Google groups
This is preeeeety cool
Good screencast. Ten minutes is the perfect length. Your explanation of the zombie issue and the fix made perfect sense. I'm still puzzled how you get into zombie trouble though. Why link a view to an existing element at all? To me it feels very natural in to build out everything as views that create their own element for event delegation.
i like it. put design patterns in OOP (i see them as a natural extension of more basic stuctures like for loops etc).
Learn more about watches, they really let you do a lot of work. Here's one way of syncing one input to another in JS: http://jsfiddle.net/Nk8qy/14/ Coffee: myApp = angular.module("myApp", []) myApp.controller "SearchController", ($scope) -&gt; $scope.ciquery = Name: undefined $scope.$watch "query", do (scope = $scope) -&gt; (newValue, oldValue) -&gt; scope.ciquery.Name = newValue if newValue isnt undefined 
Note: It's a big incomplete list as I have stated at the top. I just wanted to know whether what I am doing is actually helpful or not, as I have spent MANY hours making these "codecasts". I felt like asking on Reddit would be a good thing to do, and decide further whether I should continue at a proper pace or not.
On of my job responsibilities at work is to interview people for their web development abilities. Here are my two biggest problems i see from people with **years** of experience with JavaScript. * jQuery is not JavaScript. And not even jQuery, just the selector engine, because those same people have never herd or used the map function. * closure, if you don't understand ( know and understand are different) how variable scope works, you don't know the language. It think you post addresses the first but not the second. In a world of ever more complex front ends, ( not working in node) the days of JavaScript script kiddies are through. In the large scale front ends, memory management becomes very important. 
I always love it when people try to do good things! What I can say about it, it's probably a nice place to check how things work if you've just started developing JS. Regarding the section "How to Write Comments in Javascript", it's incomplete. Why don't you mention how to write comments that can be interpreted by a code documenter? I know the ones out there aren't the best and there is probably not a good standard for it yet but still, for larger web applications powered by JS that you build, this is something that I think should be considered. I use JSDoc even though Google stopped further development.
I'm not sure I follow your assertion that Backbone views default to global events. The standard behaviour in Backbone _is_ to delegate events at whatever the value of view.el is and not some global selector. The point of the video was to show why re-using a DOM node as the value of view.el for multiple views to inject to is a bad idea due to having to manage zombie events. I've always found it best to let views create their own elements and be smarter about injection to avoid zombies.
In the video I was instantiating the HomePage and AboutPage views directly from the console and never assigning a reference to them. You are correct that this approach would lead to a memory leak as the garbage collector would never be able to determine if it could properly clean these up. However, in practice in a real single page application I usually push the logic for instantiating Views up to a router which I use to cache the page that is being rendered. Consider the following fragment which might be from a router function handler for a "home" route: home: function() { this.page = new v.HomePage().render(); } Whenever the home route is re-triggered the old reference to this.page will be unreachable and flagged by the garbage collector as ready to be cleaned up. This avoids the memory leak. I didn't discuss this in the screencast as I felt like it was probably out of scope (haha) and would have added unnecessary length to it. I've found ten minutes is a good approachable length to expect most people to be able to sit through before getting bored or losing context in a tutorial. As for circular references, [JavaScript has no problem handling cleaning them up](http://stackoverflow.com/questions/4324133/javascript-garbage-collection). I plan to do a followup screencast to cover how I use my Page abstraction in conjunction with a Backbone router and introduce a Component abstraction as well. Thanks for the feedback, great questions!
Yeah that is definitely one solution to the problem, similar to Backbone.LayoutManager. The goal of this video wasn't to prescribe the _best_ solution but rather to educate about why the problem happens.
www.codecademy.com
I was thinking particularly of circular references involving DOM objects. That SO link says it's an IE only issue, so I'm not up to date.
Check out [backbone.layoutmanager](https://github.com/tbranyen/backbone.layoutmanager)
I've gotta be completely honest with you: so far, I agree. Backbone, while extremely powerful, has quickly become a time-sink of having to dig through a myriad of conflicting resources in a desperate attempt to learn the best, most competent way of doing things. Even absolutely rudimentary things, like unbinding event handlers when removing views, aren't handled by Backbone, which blows my mind. Furthermore, this kind of stuff isn't even mentioned in the documentation, forcing me to learn about it only after a completely arbitrary Google search... I spend more time READING about how to get things accomplished in Backbone than actually getting things accomplished. Beyond frustrating. However, I've committed to learning and using it on this project, so I'm going to go through with it. Thanks for your input, though!
Stumbled across this just a bit ago myself. Thanks!
My issue with Marionette (and most other third-party extensions to widely-used frameworks) is that they do a piss-poor job of explaining, in layman's terms, what the hell they are and why they're useful. I shouldn't have to read through API documentation in an attempt to build a case for why I should use a tool, you know?
Oh. Duh! Thanks. 
A while ago I was creating a project with a fairly complex frontend, and I needed a JS framework. I opted for Backbone, because everyone loves Backbone and...I couldn't get it working. Zombie events, events not being bound, elements being duplicated, events not firing, stuff just not working. It all felt like stuff that arose because I wasn't *quite* structuring my code right, but the documentation and tutorials were completely lacking. I eventually said screw it, and switched to Knockout, and I was SO productive. The stuff I had working in Backbone (models, a router, and persisting stuff to the server) were very slightly harder to get working on Knockout, but all the stuff I couldn't get to work properly in Backbone at all (functioning views basically) was just trivial in Knockout. Fast forward almost a year, and a side project came up with a phonegap project where they had some spaghetti jQuery code they needed fixed up and rewritten to be more maintainable. Much smaller project, and I went "oh hey, this should be a perfect chance to finally use Backbone properly!" It was deja vu all over again; Backbone was trivial to get about 80% of the way there, and then it just started falling apart. As things get complex you need so MUCH boilerplate, and you keep finding things not working, probably because you aren't QUITE doing it right, and yet the documentation is still nothing more than a sparse API. Desperate and out of time, I rewrote the entire thing in Knockout (in a single weekend, after more than a week of hacking Backbone). Again, it was a trivial process, and when I was done it Just Worked. Backbone makes a big point about not being opinionated and letting people structure things their own way, but if you aren't already an expert on Backbone it's MADDENING. You want to scream "give me a damn opinion on how this thing works", but instead you have to grovel through blog posts trying to figure out what the right way to do things is, and they often disagree, or just plain don't work. It feels less like a framework and more like a library to write your *own* framework. If I was starting a new project from scratch, and had the time/budget to learn some new technology, I'd pick AngularJS in a heartbeat. If I was time constrained, I'd pick Knockout. (Angular and Knockout are pretty similar, but while I already know Knockout, I feel Angular may have a better future long-term.) I might even pick Ember if I was feeling really crazy and adventurous (although I don't see it really having any advantages over Angular.) What I don't see is a reason to pick Backbone. It's funny, because the way the view code is structured seems quite elegant, and I know a lot of great stuff has been done in Backbone, and it's probably all my fault, but so far it's just been a painful time-sink of writing boilerplate and wondering why events are never working right. I want a framework to make my life easier, not harder! TL;DR: Angular looks awesome and I want to learn it. Knockout is awesome and is so easy to learn and become productive with. Backbone has nearly wrecked both projects I tried it on, and I've sworn off giving it a third chance. Maybe I'm just not smart enough for it. :)
**do not** even attempt to make a backbone.js app without marrionette. 
I can say that you are right regarding Knockout, for I've worked with it too. It is a very good framework and shares some familiarities with AngularJS, that's the reason why I could catch up easily with the awesomeness of AngularJS. There was a point, a few years ago, when I used to love Backbone, but it was only when I started to "sink" bigger projects with it that I realized that I was not in the right place.
Your post perfectly summarized my personal experience with Backbone so far, as well as the majority of my concerns about it. The application I'm working on is LARGE (or WILL be large), and is a web-based rewrite of an old WinForms desktop application. Needless to say, it's going to be massive and extremely JS-heavy. I'm at the point in my Backbone testing and research where I'm legitimately scared to commit to it, because I can see Backbone causing more harm than good.
I still don't understand. What does it mean that the script block ends prematurely? 
He asked for Backbone tutorials. How does that translate to a suggestion that he use a different framework? 
You're right IE7 and IE8 the array way is faster but it only takes about 38ms. However in the modern browser e.g. IE9, Firefox &amp; Chrome the normal string concatenation way seems to be a lot faster and should be the way to use going forward seeing that IE7 &amp; 8 are declining in use and the performance loss isn't that huge for those older browsers.
How is this entire problem not being solved in one line, at the precise moment of variable declaration? Why is there more than one line of code?
I'm not sure why you would do this for every string, but I sometimes do this to make use of Arrays filter and map methods when creating a string.
Array joining is much faster than string concatenation in Python, so Python programmers often use the same technique in Javascript, even if it's not really needed. Also, if you're familiar with it from Python, or if you're used to a language with string interpolation in general, you will probably find the raw string concatenation of vanilla JS unreadable and ugly. (Also, if you're conditionally adding things to the array - like error messages for form validation - you can then check the length of the array to see if you want to submit the form, or display an error message. You can do it with concatenation too, but it's clearer control flow.)
In the first version that's in effect what he was doing in the code i.e. putting every line into a new array item. In my version I was putting it on 2 lines to give the effect there could be 10+ lines there so you'd want to break it onto multiple lines for readability. This is just an example of the code. Yeah if it was trivial like that then it should all be on one line.
I find the array method hard to read and I wouldn't even use it if it is faster. I feel we shouldn't be using hacks/tricks like that for micro performance improvements. Code quality and readability is more important for me. For all you know in the next release of the language they might optimise the string concatenation and make it faster than array joining so your micro optimisation would be pointless.
The array join method *should* be as clear to you as string concatenation, you will see it a lot. to me + on strings is the ugly hack.
Stats are also up on the homepage now, http://cdnjs.com/
Anything you're used to is clear and easy to read. :) Beyond that, some coding styles are efficient, and some are not; it's good practice to know your language and code effectively AND in accordance with language norms. They exist for a reason! (But string concatenation is...pretty damn ugly and confusing no matter how used you are to it. There's a reason string interpolation and templating is such a universal feature.) As for the array joining trick...imagine you were doing some form validation by checking a bunch of fields; each time you found an invalid field you push an error message into the array. At the end you check array length, and if non-zero you unhide an error div, and populate it with the error messages. Could you do that just with string concatenation? Yes, but by making each clause conditional it ends up just as ugly, and I think you'll find the control flow much harder to follow, depending on how you implement it. As so often, something that works for a simple example may work poorly for a complex example.
Cleaner would be to use templates but also probably the slowest.
I think: console.log(['You received an error. That error code(', error.code, ') means', error.message, '\n'].join(' ')); Is pretty simple to read. Your example makes it much harder (via push) to read. Here's the same thing in '+' concatenation. console.log('You received an error. That error code(' + error.code + ') means' + error.message + '\n'); The problem with + concatenation is if you happen to have two variables back to back that could be numbers: (arbitrary example) 'I see you passed ' + var1 + var2 + ' together' The + could add those two variables together giving you erroneous results where the .join() method would give you back exactly what you wanted.
IE6? *shudders* You're a better person than myself.
&gt;I feel we shouldn't be using hacks/tricks like that for micro performance improvements. Maybe this is why the other guy had the title of 'senior'. Neither of the examples you provided are difficult to read. They're 2 ways of doing the same thing. When you get a bit more experience, you'll probably run into a situation where something is really hitting your performance, and you'll start optimizing your code. Programming shouldn't be that dogmatic / black &amp; white.
and also the slides [link](http://lanyrd.com/2012/lxjs/coverage/). It was a great [conference!](http://2012.lxjs.org/) 
I've been building a very complex Backbone.js app (after building numerous semi-complex apps) and I can't say that I've run into any of the crippling horror stories being mentioned here. I may not be using it as others do. Much of the criticism comes from the side effects of creating, then throwing away views. I tend to keep views around and recycle HTML. The main issues I've run into with Backbone: 1) Extending a model, collection or view is not simple because of JavaScript's prototype inheritance. You need to understand what is being accomplished by: `ParentView.prototype.method.apply(this, _.rest(arguments, 0)` and why you would need to call it in some method. It's a little ugly, but I understand it. Most of the time I don't use inheritance like this and opt for black box-style reusable components. 2) Boilerplate for common code in view initialization (models and collections are simple). That might easily be solved by a better inheritance system, but I don't actually mind the ability to take it or leave it on individual views. I tend to always do a few things in initialization: store a passed reference to the top level app (which maintains references to all other views and collections), render the initial HTML and store named DOM handles from the initial HTML, which I then use for piecewise manipulating form fields or html elements. 3) The default sync model is a bit simplistic (I use JSON messages instead of REST, which is not better, just more in line with how I made my API). Having said that, Backbone makes it easy to replace sync. Reading the comments it seems like most of the issues here are about the **lack of agreed-upon best practices and the lack of clarity of the documentation**. I have seen that myself, but it has not been a crushing blow for Backbone in my experience. Now I don't entirely understand what is terribly lacking that throwing myself into an entirely new framework (AngularJS or Knockout) will solve. I thumbed the docs at marionette, and I've come up with my own solutions to some of the problems the project solves. I'm not saying I have done it better, but I have not reached a point where the complexity is too much to manage. I plan to take a closer look soon to see what it has to offer to my current projects. Looking at AngularJS and Knockout, I'm immediately turned off by all of the integration with HTML and the focus on data bindings. Is that optional? I tend to start my projects with an empty div, not a fully structured HTML document with data attributes for bindings or custom HTML attributes. I get that it's doing some magic behind the scenes that triggers model updates whenever text boxes are updated, or refreshes the values in text boxes whenever model data changes which would otherwise require manual effort with Backbone to bind all of those event handlers on the model and the html. Too many event handlers, in my opinion, and places where I might want to insert logic instead of relying on the default behavior. Anyway, I just wanted to throw my two cents in that I have not grown as uncomfortable with Backbone as many here have and don't see the light of the other frameworks yet. There are many and I'm sure I haven't studied each of them enough to make a solid determination, but I was blown away by what Backbone did for my projects and it has yet to wear me down.
google analytics uses this. It's less code to write `document.write("&lt;scr" + "ipt type='text/javascript' src='script.js'&gt;&lt;/scr" + "ipt&gt;");` than it is to write (the preferred way) var s = document.createElement('script'); s.src='script.js'; document.getElementsByTagName('head')[0].appendChild(s); especially if you aren't sure there's a head element (I think a browser will create one automatically, but you might not be dealing with a HTML document). It's also 100% compatible with every browser everywhere. Normally `document.write` isn't very optimal of course.
Well I wouldn't go that far. More of a masochist for sure.
Yea, I guess you're right. All I really mean is that trying to make a Backbone.js app with nested views and liberal use of the event binding is a recipe for memory leaks. You can manually close all child views and unbind all events, but it's much easier to use Marionette.
The point is to set the right protocol and not preemptively terminate the script by accident, but why not just do something like this: document.write("&lt;script src='//domain.com/script.js'&gt;&lt;\/script&gt;"); 
Fair enough. :) Definitely agree with the use of something like Marionette for larger apps.
To help with unbinding views, I would recommend [Backbone.coccyx](https://github.com/onsi/coccyx). Also since angular and knockout were recommended in this thread, if you are looking for model view binding suggestions in backbone, I would like to shamelessly recommend [backbone.stickit](http://nytimes.github.com/backbone.stickit).
As I said, some people are intelligent enough to go beyond the surface question to address the real problem. Apparently, you are not one of those. If a patient went to a doctor asking for pain pills, it would be a bad doctor who didn't ask why he has pain.
This would be much easier to read if it used array literal notation spread over multiple lines instead of .push() calls. As an additional readability/maintenance benefit, you can leave a dangling comma after the last element, which you can't do with +. The join method is much more compact when inserting delimiters, so it's convenient to adopt it everywhere. It even leads to a somewhat bearable multiline string notation: [ "foo", "bar", ].join("\n")
You're kind of cherry picking your examples, what you wrote for the arrray could be more cleanly written as: var text = [ 'Hello ', name, ' how's your day going?\n', 'My day is going find thanks ', name ].join(''); (as noted by others you really shouldn't be worrying about concatenation speed and probably using templates instead as well) 
Not to mention, one push call for each segment is *much* slower than building an array literal like this.
`document.write()` and DOM insertion with `createElement()` and `appendChild()` are two very different things, and each one has its own purpose. `document.write()` is *synchronous* \[\*\], so you can write a `&lt;script&gt;` tag and know that the script will be executed in the order in which it appears on the page. DOM insertion is asynchronous; you have no control over when the script will execute. \[\*\] Strictly speaking, it's not really synchronous. Browsers may download scripts and other resources in parallel and out of order, but they guarantee that the order of execution of `&lt;script&gt;` tags (either direct in the HTML or written with `document.write()`) will be the same as if everything were synchronous.
I don't know why, buy this image came to my mind when I read you comment http://i.imgur.com/eK8zT.png
Yeah modern JavaScript engines use an equivalent to a C#/Java StringBuilder under the hood when it's appropriate.
Would a few kind people please upvote [are595's comment](http://www.reddit.com/r/javascript/comments/10ovhf/can_anyone_make_sense_of_this_seemingly_perverse/c6ff7lq), "Now the real question is why anyone would want to use document.write in the first place..." And whoever is downvoting it, I can understand if you don't like the way the question was asked, but it's a perfectly reasonable question that has a useful answer - and a couple of us are engaged in the discussion answering the question. As a reminder, the downvote button is not for comments you disagree with, but for comments that are detrimental to the discussion. Thanks!
If are595 really meant "There's no good reason to ever use `document.write()`", then that would be wrong. But taken at face value, it's a reasonable question that does have an answer, as well as valid use cases. One obvious case: suppose you have an external script that requires a parameter such as an API key, and you need to determine that parameter at runtime in JavaScript, and the script does not work when loaded asynchronously - it must be loaded with a `&lt;script&gt;` tag. An example would be the old Google Maps API V2, but there are many similar examples. Using `document.write()` to write the script tag with the correct parameter is *the* solution for this.
It's sort of like learning a foreign language: everyone will recommend different books or methods, but the best way is immersion. Daily practice. The best way is to take on projects, and give it a go. You will look back on this code as garbage later on, but all that means is that you are growing and learning.
I hope you don't need me to explain the difference between your original comment and that picture. 
I'm confused about the concept of needing a plugin for model-view binding. Isn't that basically the entire purpose of Backbone, models bound to views? Why would I need a plugin for this?
&gt; Looking at AngularJS and Knockout, I'm immediately turned off by all of the integration with HTML and the focus on data bindings. I've gotta agree with this. Needing all those weird attributes in your HTML for Angular seems pretty obnoxious. However, maybe we're overthinking it: SHOULDN'T we be using the HTML as part of the way a web UI functions? After all, webapps ultimately require HTML to function; why not leverage that directly instead of creating the whole UI programmatically with JS? Otherwise, I agree, and appreciate your input. I don't necessarily think avoiding Backbone is the answer; I'd rather just get REALLY GOOD with it and see how it works out that way.
Wow, that's a neat solution for a secure mobile computing platform. Cheers! That's some cool stuff.
[Taken down](https://github.com/github/dmca/blob/master/2012-09-25-namco.markdown) by douchebags at NAMCO.
this looks super cool. good job!
Do you mind sharing the source? Or maybe when it's further along? This looks amazing and I'm excited to see you release it under a free license. ;)
You need to be a lot more specific when asking for help with a software project. If you don't know what you want someone to do, how do you expect them to do it?
I'll make a website with set-up instructions and a guide to making modules and apps. Also a theming guide. 
Because those people haven't learned correct use of javascript (escaping) and/or intended the script to run synchronously within the DOM rendering process (e.g. for advertising, document.write is still required in many cases).
A repost wrapped in blogspam. Nice.
Yeah I could've but the guy was literally pushing everything onto new array elements like in the first example.
No offence, but why does it matter what it was written in?
I’m interested in the language (or library) something is written in because I might be curious how a certain language deals with a certain problem. Other languages might not interest me at all, whatever problems it solves.
You can say that if you like, but that's not actually correct. The browser has no way to know what appends are coming up. You can't just "work with the same memory;" something else is already in the space after that string. You can test this quite easily by appending a random string "one" or "three" afterwards at each step, since they're different lengths, and watching what happens. This is "the myth of the sufficiently smart compiler" extended into guesswork. Computers do not work like this. Please learn a low level language soon. Thanks.
Turn off the sign up requirement and I'll try it. No offense, I just don't like to sign up for things like this and I'm sure I'm not alone when I say that.
What server are you using to serve the OS?
At the moment it's using [WebDav Server Ultimate](https://play.google.com/store/apps/details?id=com.icecoldapps.webdavserverultimate&amp;hl=en)
&gt; This is "the myth of the sufficiently smart compiler" extended into guesswork. Computers do not work like this. Says the dumb shit who only knows how to write code in PHP. &gt; Please learn a low level language soon. Thanks. Says the stupid fat fuck who only codes in PHP. Dumb, ugly, fat piece of shit.
Yeah, I expected that to be an issue. The signup can be complete crap asdf@example.com for example. As there is no verification process for open streams such as this. There is a concept of a closed stream as well, and at some point I would love to have a "buy now" button on the right hand side. . .so open streams such as https://whatevertheheckyouwant.ideedock.com can then become closed, owned, and managed by a user or company. That's the only reason the sign up wall is there. I apologize for the inconvenience.
Fuck, not another JavaScript derivative! Though I like the idea of strict typing for large projects.
Interesting! 
Smells like premature optimization to me. Build it first. Then profile it. Then, if you must, complicate your code base to make it load faster.
Well the beauty of this is, unlike Google's Dart, they have no (stated) ambitions to force this into the Web platform [1]. CoffeeScript, Dart, TypeScript, etc. are fine and dandy, and will remain largely unused, relative to the number of developers using JavaScript. Now, if/when someone tries to add another language into a Web browser, then it's time to pull out the pitchforks because that is when things can get destructive. [1] http://techcrunch.com/2012/10/01/microsoft-previews-new-javascript-like-programming-language-typescript/
I'm not sure about Dart, but Coffeescript is pretty widely used these days. Of course, it's a tiny portion relative to JS as a whole, but it's significant.
Do you have to use document.documentElement? I thought just $(document).on ... was enough. It has never failed for me in any case.
&gt; Please learn a low level language soon. I know C and one variant of BASIC. Is that low-level enough? I understand that what I said was a vast generalization, and not always possible. The fact remains that, in modern browsers, repeatedly calling += is faster than creating an array and joining it. And not by some tiny overhead - by a percentage. You're right, I don't know exactly what they're doing under the hood. But if the memory usage you described limits them to being slower than an array, is it not a reasonable assumption that they manage memory differently? A smart compiler may be a myth, but, in javascript at least, uncannily complex compilers/parsers are most certainly not. As you demonstrated, a logical analysis of javascript code is rarely enough to predict performance these days. [Here's that test you were talking about](http://jsperf.com/fkjmmem). Again, you would have benefitted from actually testing it, instead of just guessing. As I said, += is the most performant on highly optimized engines (Chrome and Firefox) and less efficient on simpler engines, presumably according to your analysis.
Yes I'm not sure what to say about this. The sheer number of things being listened to with this approach could make the focus event slow as heck on more complex pages. I think this is a novel change to initializing datepickers, and I'm sure the author wasn't looking to write an entire book on web performance - but performance profiling your app is the first step as parent points out, then decide whether to use any of a number of tools like the one here. Otherwise it's easy to put this in the way of initialization code that's a lot cheaper left-be.
Recently at my day job we had a huge wall of checkboxes, and partly as an exercise in bettering my Javascript skills and partly as a task to improve our site, I built a Chex plugin that will convert checkboxes into nifty multi-selects. Since my work site is heavily customized, I abstracted out my code and simplified it into a public repo. Check it out: http://brianseitel.github.com/oasis-chex/ I haven't really messed with Chosen, but I tend to prefer smaller, more modular things (i.e., something that does JUST checkboxes) to larger scripts that try to do everything. Anyway, enjoy.
And after 15 years of working around Internet Explorer bugs all web developers pretty much ignore anything Microsoft says.
what does this give you over https://developers.google.com/closure/compiler/docs/js-for-compiler?
came here to say that. select2 &gt; chosen
Just read some more into it, and didn't realize on my first glance that it was JS compiler like Dart and Coffeescript. I jumped the gun, and thought they were trying to make an alternative to JS. Oh well. 
&gt;Smells like premature optimization to me. It's lazy initialization in conjunction with event delegation. It's actually pretty nifty, because this will also work fine with a dynamically created form. You can create/destroy them all day long and they will always just work without having to (re)attach the plugin manually each time. Trying to sell this as big performance improvement is probably the wrong angle. Also, this won't work with plugins which modify the DOM and it usually also doesn't work with plugins which insist on binding their own event handlers. So, it really isn't something you'll be able to use all over the place.
&gt;Type checking is silly, all that can be done with unit tests. You write tests for the API. You do not write tests which check if the API was used correctly. E.g. there is a `foo()` function which returns something. I then call `toUpperCase()` on that thing. However, the returned value was a `Number`, which - as we all know - doesn't have a `toUpperCase()` function. A unit test can't prevent me from doing that mistake. Type information and a usable IDE, however, can easily prevent this from happening. There will be a squiggly yellow line right away and the tooltip will tell me that `Number` doesn't have any `toUpperCase()` function.
First thing I noticed is that you're trying to get the value of the form, and not the value of the comment box. Try this: var comment_value = $("[name='htmlinput']").val(); Here's a [jsfiddle](http://jsfiddle.net/ddEEp/) in case you want to further debug it.
Thanks!
`$('#blue').before('&lt;div&gt;ohai mark&lt;/div&gt;');` That string can be of course also be returned from some function. For example, it could be some compiled Mustache or Handlebars template. var ohai = Handlebars.compile('&lt;div&gt;ohai {{person}}&lt;/div&gt;'); $('#blue').before(ohai({person: 'mark'}));
No it won't, because his selector specifically is "input.date:not(.hasDatepicker)" so it'll only initialize ones that aren't already made datepickers. (As an aside, if you're using jQuery UI widgets, you can use psuedo-selectors like ':ui-datepicker' for targeting widgets without needing extra classes.) Also, doing a .off and then redoing the init for every focus is likely not what you want, as jQuery widgets are meant to keep state and are costly to init, so you'd likely want to just set it up the first time and then just let it live for the life of the page unless you're sure you're not going to need it again.
I think your question was answered, but you should also note that the return value of creatediv is what's getting set as the input for before. If you want to use creatediv as a callback for before, you need to leave off the () at the end.
&gt;Coffeescript is pretty widely used these days. Citation needed.
Most of the demos require WebGL. Just FYI.
I use JavaScript for some things, and I use HaXe for other things. When I look at a particular task I almost always immediately know which I will be using. I would hate to have to limit myself to doing everything the one way. 
Ouch. At least you were unabashed in your opinion. 
I recommend using alerts and/or console.log to determine what part, if any, of your js is actually being executed. Like put an alert inside that document.ready to see if the file is loading at all. Then put an alert inside the click event to see if when you click the function is being called like you expect
There's a lot of problems there, but to start your ajax call is outside your submit handler's callback, and your function calls aren't properly closed, so I can't even guess at what that's going to do. You need to put the ajax call inside the submit's callback so that I has access to the variables in scope and executes on submit, rather than on ready, and you need to be sure you're matching up your opening and closing braces and parens properly. Taking out your comments and extra stuff to just leave the control flow properly formatted, the error is more obvious: $(document).ready(function(){ $("#htmlinput").submit(function(e) { e.preventDefault(); if(comment_value == ''){ return false; } return postcomment($(this)); } // This is (improperly) closing off your callback function $.ajax({ type: "POST", url: "php9.php", data: { htmlinput : comment_value }, cache: false, success: function(html) { } }); }); // But this is where you meant to close off your callback function return false; } Run it through JSHint and you'll see all your errors.
Just look at GitHub.
Good idea. Just like the Backbone source, this looks to be compact enough to read through. The only thing missing is a bit of context of what was envisioned. Luckily, I just stumbled across a couple of great resources that add this missing piece: [Simple Backbone Marionette Tutorial](http://davidsulc.com/blog/2012/04/15/a-simple-backbone-marionette-tutorial/) and continued in: [Tutorial: a full Backbone.Marionette application Part 1](http://davidsulc.com/blog/2012/05/06/tutorial-a-full-backbone-marionette-application-part-1/) and [Part 2](http://davidsulc.com/blog/2012/05/13/tutorial-a-full-backbone-marionette-application-part-2/)
Oooh ok, I must have misinterpreted the context. Now the google queries make a bit more sense, it must going from a Blob to JSON. Thanks!
The option to have some compile time checking might be nice, but I highly prefer coffeescript now, so no going back to a language without null-coalescing operators. No way.
TL;DR Delegate events.
intelli j has all that for closure.
That... makes so much sense. I didn't realize it actually stood for something. I think I (and apparently some others) took it to mean an arbitrary chunk of data, since I always saw it as "binary blob" (which I just see as redundant now).
Tech Demos that I have to sign up for an account to see? COUNT ME IN! (dismissive wanking motion) In all seriousness, all this tells me is that you're putting your mailing list ahead of your tech and that you are probably not the product for me. Best of luck with your uber-social-viral-engagement.
 /^(\d?\d?\d(,\d\d\d)+,\d\d\d|\d?\d?\d,\d\d\d|\d?\d?\d)(\.\d+|)$|^(\d?\d?\d(\ \d\d\d)+\ \d\d\d|\d?\d?\d \d\d\d|\d?\d?\d)(,\d+|)$/ Less than elegant, but I find no way to distinguish between the number formats than on the first delimiter.
[Here's](http://pastebin.com/EPccYEG1) what I came up with.
You can shorten that a *lot*: use `\d{3}` instead of `\d\d\d`, and `\d{1,3}` for one to three digits.
I don't understand why some of these "should" or "shouldn't" match... I have: /^((\d{1,3}))((([, ](\d{3}))+)?)((\.(\d+))?)$/ This snags 28/31 results... The ones that I have "wrong" don't make sense to me. It says these should all also match: 10,19836 30 000,7302 0,5 How are any of these valid? 0,5 is not a valid number. If we're going to allow a separator but not every 3rd digit - then fine, 10,19836 is "valid" -- but then why should 1,5826,000 be invalid, exactly? Why on earth is "30 000,7302" supposed to be valid? I am confused. I can snag all 31 if I just change my decimal test to test for . or , -- like so: /^((\d{1,3}))(((\,|\ )(\d{3}))+)*([\.\,](\d+))?$/ It just doesn't make sense to me why those *should* get caught.
You can view all of the samples and source code without registration on that page (http://www.turbulenz.biz/samples). You will have to sign up to download and use the SDK, but it's free :)
blob means "piece" or "drop" and is just a piece of something, JSON-blob would then refer to "a piece of JSON". Its valid english to use it in every day language, for example "a blob of glue", In computing you will hear it a lot as we like the word. Binary blob is for example what linux calls non-opensource drivers that are distributed in a blob of binary code instead of source. MySQL named their binary format after the already used word blob, not the other way around. &gt;blob (n.) "drop, globule," 1725, from a verb meaning "to make or mark with blobs" (early 15c.), perhaps related to bubble. 
The examples do not require registration, you need to scroll down a bit or click on the relevant section.
It doest, blob is an english word, the mysql usage of the word came after its use in computing started.
The red squiggle is only part of it. For large teams working on a common application the type safety provided is very useful because it eliminates whole classes of errors (ones that are trivial to make when deal with a large body of code that a developer may only be partial familiar with). Further, incorporating the compiler into a build process ensures that code with these errors does not ship. And... you get this for a very small addition to the core language itself. Basically Anders and crew have designed a type declaration system that is flexible enough to handle JS. You literally lose none of the function value orientation of JS. But with a type system in place the big brained folks can write code that can reason deeply about JS code in a way that is impossible today. One concrete benefit of the static analysis that this "bolt-on" type system enables is autocomplete... imaging do $('div') pressing "." and seeing the list of the top level jQuery methods (and selecting one and seeing it's signature(s)). Or if you've also included jQueryUI you'll also see it's methods too (so on $('div') you'll see the .dragable and .dialog methods). Autocomplete is a bit like the red underline in Word... that little red underline made everyone a better speller. Nobody "runs it through the spell checker" anymore... spell check just happens. Autocomplete makes _all_ developers better (not by tons and tons... but better). Developers won't need to remember exactly how to spell a method name (how great is that for non-english as a native language developer). And developers can discover/learn a new API much quicker... no constant flipping context to the documentation. I've been using jQuery for ages now but I still need to google stuff ... like $.inArray... which is first parameter the element or the array? Does it return the element? null? true/false? Part of the reason why MS (and google) are interested in changing JS is to allow for tooling (aka static analysis). MS has a long history of benefiting from good tooling. Their C development has very clever tooling based on annotations, and this tooling has helped their code quality immensely. They have clear "drunk the koolaid" when it comes to tooling to assist developers and to enforce good coding practices. If watching the demo from Anders doesn't change your mind I'd be disappointed: http://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript
My solution: /^((\d{1,3})((,| )\d{3})*(\.\d+)?|[\d ]+,[\d ]+)$/i 
That's what I got, too.
You're being very eager with the groups! You can get rid of a few of them - some of them aren't needed at all, and you can replace `(,| )` with a character class.
You can't replace JavaScript. They do not attempt to do the impossible. http://blog.sethladd.com/2012/09/what-dart-wants.html
What's wrong with "1.234.567,12"? Hm?! ;)
What? What do Ohio cities have to do with this? Can you elaborate??
How does this compare with using jQuery.live ? Would this be more efficient? edit: Turns out jQuery.live is deprecated "As of jQuery 1.7, the .live() method is deprecated. Use .on() to attach event handlers. Users of older versions of jQuery should use .delegate() in preference to .live()." Nevermind.
`/^(\d{1,3})([, ]\d{3,3})*([.,]\d+)?$/` almost exactly the same. Did not know about the `{3}` shortcut.
**66 characters**: `/^(0([,.]\d+)?|[1-9]\d{0,2}((,\d{3})*(\.\d+)?|( \d{3})*(,\d+)?))$/`. Starting with `\d{1,3}` can match `00`, `000`, etc, which isn't valid (IMO). Also if you don't want to allow mixed separators you can't use `[, ]` in a repeat because it could accept things like: `1,000 000.000`. **EDIT:** Feature idea: I'd be nice if we could suggest new unit tests to add to you're regex challenge.
This would allow `00`, `000`, etc to be accepted. Is that a validate solution?
If you want to be more accurate, it ate Phoenixville, which is in PA. http://www.imdb.com/title/tt0051418/ Funrelated: I worked a few shows at the vaudeville theater they filmed some scenes at there. The place is one of those tiny pockmarks on the southeast corner of PA, can't even get a cup of coffee on a Sunday. The theater runs an annual screening of The Blob as a fundraiser to fix up the place.
 /^\d{1,3}(( \d{3})*(,\d+)?|(,\d{3})*(\.\d+)?)$/i Cool, I managed to finish this one quickly! Way easier than last week's!! Thanks for providing these every Tuesday, great way to kill time at work while pretending to be working :)
Ah makes sense. Although I'd just as soon do it with local storage, given a modern browser.
I'm still not sure what you're trying to do. I'd advise going to [stackoverflow.com](http://stackoverflow.com), posting your question, *in detail*, along *with code*.
Best book title ever? Perhaps.
33 character: /^\d{1,3}([ ,]\d{3})*([.,]\d+)?$/
I wouldn't actually use it as kinghfb mentioned; I'd prefer to use some in-memory storage for that since the data is fairly unimportant. But since he brought it up, let's give the example of *user-generated* quizzes. Users can generate a quiz with some variable number of questions and some variable number of answers to each question. How would this be effectively modelled in SQL? You could have a table called `quizzes`, a table called `questions`, and a table called `answers` where each row in each is a quiz, question, or answer, respectively. And then when a user answers a question, you could store it in `user_answers` or something along those lines. But if it's not particularly important that the answer data be directly query-able, we could just store the answer data in the question: mysql&gt; SELECT * FROM questions; | id | quiz_id | order | text | answers | 1 | 1 | 0 | What's your favorite color? | [{"imageId": 1, "value": "blue-no-yellow", "text": "Blue... NO! YELLLOOOOOWWWW!!!"}, {"imageId": 2, "value": "red", "text": "Red"}, {"imageId": 3, "value": "green", "text": "Green"}, ..., {"imageId": 50, "value": "fuchsia", "Fuchsia"}] This has the benefit of reducing the number of tables we're querying when we load a quiz as well as reducing the number of rows returned from our query. If we had a quiz with 50 questions and each question had an average of 12 answers, querying for 600 rows each time we loaded the quiz is a bit weighty. If instead, we stored the answers in the questions themselves, we reduce that footprint to 50 rows returned and we remove the need for a `JOIN`. There *is* still a trade off with this, as decoding the JSON *can* be a bit CPU-intensive, but it still has it's usefulness in certain applications. In addition, instead of storing a row for each response a user gives, we could just store the user's responses for a specific quiz as one row. mysql&gt; SELECT * FROM user_quizzes; | user_id | quiz_id | score | rating | answers | 1 | 1 | 48 | 4.0 | [0, 24, 4, 1, 2, 8, 3] 
"Holy shitfuck, sir, the Iranians are launching WMDs!" "Nukes?" "No, sir, it seems like they're hitting the heartland with form validation the likes of which you've never seen."
I felt the same frustration when I was just getting started. However, if the app you're building is sufficiently large, such that you'll be working on it for years and it will need to scale in ways you can't yet imagine, I can't stress enough that spending a lot of time on framework research *is totally worth it*. It's easy to get started just hacking stuff together without a lot of framework support, but one day, months down the road, you'll look back and see a whole lot of spaghetti which is hard to refactor and maintain. Front-loading the framework research at the beginning of your project can be frustrating and time-consuming, but it will totally pay off in the end for large apps.
I seem to remember something similar in *Iron Man 2*, except it was HTML scrolling past while Black Widow was hacking into the drone control system near the end.
Everyone knows the best missile guidance systems are written as a Visual Basic GUI.
 $('.missile').reachTarget(function() { $(this).explode(); });
It's computer code and stuff. Dude. Shit is getting real. 
Some countries also use 1'234'567.89 - if I added every syntax, no match tests would be too trick and people could simply use `\d{1,3}(\D\d{3})*(\.\d+)?` (not tested), which isn't at all challenging.
You also don't need the first group.
This counts as working… right?
Conclusion: JQuery based missiles would be easy to program, but highly susceptible to cross-site scripting attacks.
Hope your not forgetting she is using a crc32 ssh exploit to gain access as well.
Couldn't remember the sploit off the top of my head, did remember it was an actual sploit though.
No, not missile guidance systems. Only every single law enforcement application ever. Edit: Actually, 10 years ago I was tasked with making a VB app as a demo for a law enforcement application. The actual app would have no interface, so they asked me to make color-changing status boxes to indicate... SOMETHING.
Quit whining you fat bitch.
Some production assistant grabbed a chunk of source code from the first page he went to, pasted it, and said "Not bad".
Nedryland. Dennis you sly fox.
I'm not awful with JavaScript, but I'd also not reinvent the wheel for something that is (at least somewhat) common. As with a lot of things that start easy, at some point you might run into a roadblock you don't want to code around yourself. For example, let's say you want to add the ability to suspend events. You could remove an event and add it again, but that's ugly. Better to add a switch of some sort to ignore events while suspended, right? But maybe you want to queue events while they are suspended, and fire them after an event has been resumed. Similar issues crop up when dealing with (or overriding) native browser events ... could be you want to stop event bubbling / propagation. Maybe you you want to suspend propagation and possibly resume it with a callback after your event is done and successful. It's worth at least exploring what's out there...
What is up with sites using text so large it's almost impossible to read?!?
Absolutely agreed. I've been exhaustively researching frameworks (especially Backbone) for about 3 weeks now, and am finally nearing the point where I feel I'm well-educated about its strengths and weaknesses.
True dat.
&gt; you tried to turn it into "you personally are not smart enough to see this," Again, I may have come across wrong. I meant, simply, that the bars on the graph are a different length. You seem to agree on this point. Why do you believe the different snippets in the jsPerf achieve different ops/second? I don't understand how it could be the string generation, as each approach calls the string generation function exactly the same number of times.
I'd also add that it also over-represent personal project versus code that actually run on a production server (do note that you can say that of any free project hosting service).
This was X/Posted from [/r/webdev](http://www.reddit.com/r/webdev/comments/10tbeg/on_the_show_strike_back_jquery_used_in_missile/)
hmm the flight I'm on is making an emergency landing. 
Hi, To get your random number you can use: result = math.floor((math.random()*YourArray.Length) +1)" From that you just need to get the yourArray[result] and you should have your random link ready to do with as you please. 
Aiming at shortest possible regex to pass all tests: /([^*]|^)\*([^*].+?[^*])\*(?!\*)/g $1&lt;em&gt;$2&lt;/em&gt; (34 characters) I liked this challenge, pretty tricky.
I can't answer as to why push.apply performs poorly, but I believe you are correct to assume that concat is working poorly because it is creating a new array and pushing the contents of both arrays into it. That said, are you ***really*** doing something that the concatenation of two arrays is what you need to optimize? I'm guessing not (although it's not impossible), so really I wouldn't worry about it.
I'll create a GUI interface using visual basic and see if I can track an IP address —CSI 
Your guess is good, for my purposes either of these three ways is ok. I am just curious to know why push.apply is slower compared to looping.
Thanks for the response! As for the dot notation, ~~do you have any suggestions on how I can use that? I found a quick article on what you're talking about, but I'm not sure what I could implement it in.~~ do you have any suggestions on how I can implement it?
its excelent
Some quick lunchbreak feedback: - You can combine var declarations and save yourself a few bytes: var debug = '', DAY_TO_SEC = 86400, HOUR_TO_SEC = 3600, MIN_TO_SEC = 60, SEC_TO_SEC = 1; - What lesmac88 is saying, is that by enclosing this whole script in an object or function, it won't be using the global namespace and you'll avoid naming conflicts. You also won't need to use var, since all your variables will be part of your custom namespace. Be aware that coding using object literal notation (OLN) is a fairly different way of using javascript. [Here's a fantastic article](http://enterprisejquery.com/2010/10/how-good-c-habits-can-encourage-bad-javascript-habits-part-1/) on getting into namespacing. - You're finding '#time h1' in the dom every time 'timer_display' is called. If you store this reference in a variable higher in your function, then call the variable instead, you're saving the browser a bit of work. This should be always be done for any elements that are searched for more than once. - Using 2 'bitwise NOT' operators instead of Math.floor is slightly faster for most browsers, though arguably less readable. [This article](http://james.padolsey.com/javascript/double-bitwise-not/) explains it quite well. - I'm not sure how your html is structured, but you should only be using a regex if you absolutely have to, since they're quite intensive. If it's a countdown, why isn't the form accepting only numbers and chopping out the rest? Or using select boxes and avoid the issue of text inputs altogether?
Interesting question! Here's a guess (I could be completely wrong): As far as JavaScript is concerned, arrays are just a special case of normal objects - the properties of the object follow a sequence starting from 0. Despite this, most JavaScript engines actually optimise for the special case of the array to allow for more efficient element lookup. Calling the apply method necessarily converts the array to an *arguments* object. My guess is that the arguments object is not subject to the same lookup optimisation, as it contains additional properties over-and-above the properties found on a vanilla array. As such, a full hashtable lookup is required for each element access, reducing performance.
&gt;html4 Not a very bleeding edge drone control system.
Quick example: &lt;script&gt; var MyTimerClass = function(time_obj) { this.time_obj = $(time_obj); }; MyTimerClass.prototype = { DAY_TO_SEC: 86400, ... timer_init: function() { ... this.timer_start(); }, timer_start: function() { // Access time_obj using this.time_obj }, ... }; $(function() { new MyTimerClass('#set-time'); }); &lt;/script&gt; See https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript And check your code for errors and warnings using http://www.jshint.com/
Overall it's really good. A few things, nothing big. - You've got a few global variables that aren't used globally. It's nice that you capitalized them though, but they probably could be moved inside the scope of your ready function. Once in there, capitalization probably shouldn't be done, as they'll no longer be global. - You're creating your own naming conventions rather than following queues given to you by JavaScipt itself... something_like_this() should probably be somethingLikeThis() - time_obj, which is an array of ints, should probably be scrubbed into an actual object with properties that help the next coder know what they are, like: { hours: 0, minutes: 0, seconds: 0, milliseconds: 0 }, or even {h: 0, m: 0, s: 0, ms: 0 } if you're lazy. This allows someone to call timer_init({h: 0, m: 1, s: 12, ms: 201}) and the code is much more readable. I guess my biggest beef is with time_obj, sometimes it's an array of strings, sometimes it's an array of ints. It's one array that is getting used for what seems to be everything, and having to loop through it every time in for loops hurts readability a little, even if it saves a little bit of coding.
I found this when doing mobile development on some new iOS6 issues we're experiencing. We don't have a desktop mac or an apple dev license, so we were out of luck on mobile debugging when iOS6 hit and they removed the debug console. Luckily, I found this neat library that allows you to spit out the stack for an error or at any point in execution. Maybe this is simple, and I'm an idiot, but it sure saved me time and pointed me closer to our real error.
It's fine for me -- a little larger than average, but that's fine with me. Are you on a desktop or mobile?
The idea was for a view class I was working on; I needed to enforce that only child classes could call its addChild method somehow, and didn't want to duck type it. Sometimes I want to use the `toString` function to actually produce a user-readable value. My next-best bet is to use some prototype value `obj.prototype.meta` to store that information, I guess.
The quick hack way would be: &lt;a href="#" onclick="window.open( YourArray[ Math.floor((Math.random() * YourArray.length)) ] );"&gt;
AngularJS Style dependency injection for NodeJS: https://github.com/idottv/dependable
Read this first as "modeling a pendulum cock in javascript"
Well the physics would be more or less the same ...
Wow. Looks like Firefox made some major improvements to looping between 13.0.1 and 15.0.1.
How would this work with minification?
This is a really cool approach to testing. I only wish it would work for NodeJS as well as the browser.
Those new geographical selectors are quite powerful.
That video popup was really confusing, was searching for the (x) button in the top right, thought it was a bug until i saw the OK button on the bottom. Cool app though!
Thanks. I needed something to explain how things work and wanted to do it without using text.Also I needed to kill time while all the buffers load. The OK button only appears after everything's loaded.
Not bad! Here's some feedback I think will be helpful for you. Falsey values in Javascript as are follows: * `false` * `null` * `undefined` * Empty string `""` * Number `0` * Number `NaN` When making comparisons like `if (time_obj[0].length == 0)`, you can shorten to just `if (time_obj[0].length)` --- It's good practice to define groups of variables using `var` once and separating with commas: `var one, two, three;` --- Wrap your code in a self-executing anonymous function to prevent polluting the global scope: ` (function(window, $){ // all your code })(this, jQuery); ` --- Prefer [function expressions over function declarations](http://kangax.github.com/nfe/). JavaScript will turn your declarations into expressions, but this can have odd effects due to hoisting (vars are moved to the top during compilation and may not be available where you think you've defined them). 
All code examples in coffeescript.
The fiddle works fine in Chrome (well it inserts stuff anyway), your browser sniffing is making it not work in Firefox as unsafeWindow will only exist when running under Greasemonkey. Change unsafeWindow to window and it works in Firefox.
Thanks! I've been messing with it for a few hours and with some trial and error and some help from Stackoverflow I finally wrangled it into working. I also removed some lines that I discovered no longer functioned on the site thanks to its recent update. You can see the updated script [here](http://stackoverflow.com/questions/12720609/userscript-breaking-pages-outside-of-domain). My problem now is that the the script is breaking pages that use Jquery outside of the domain I restricted it to. Hm.
It does technically work for Node, though it's not documented. The experience isn't that awesome right now – in particular trying to navigate the results in a terminal is unpleasant. But the basic approach is at least workable with doctest.js as it is, it just needs some more tooling. As the author, if I personally was doing that kind of testing I'd probably try to figure something out, but I've been focusing on features that I'm finding useful in my own work.
Well written about the physics and maths involved.
How do I close the video popup?
I think you are close. // &lt;- LexicalEnvironment = { foo: undefined, bar: function } var foo = 0; // &lt;- LexicalEnvironment = { foo: 0, bar: function } function bar(param) { return param + " World!"; } // Nothing changes, named functions are always executed first. // &lt;- LexicalEnvironment = { foo: 0, bar: function } Here you can see how the environment changes after each statement. When bar is executed the first thing that the JS engine will do inside the function is create a new LexicalEnvironment to hold local variables. It will reference or be chained to, the outer LexicalEnvironment. When a variable (e.g. foo) can't be found in the function's environment, the chain will be followed and searched. The outer environment will be found and foo will be found within. 'this' works a bit differently. It is best to think of 'this' as a hidden parameter. (Actually some languages like Python make it an explicit parameter, BTW.) How the 'this' parameter is set is determined by how the function is called. Unlike languages such as Java and C++, variables and members in 'this' are not automatically or implicitly looked up. You have to explicitly access the 'this' object. (e.g. this.somemember = 1;) var f = function() {}; var x = {}; x.my_function = f; x.my_function(); // 'this' will be bound to x inside function f. f(); // 'this' will be undefined inside function f. Calling a function via an object property lookup, sets the 'this'. 
Prototype or JQuery provide a bunch of DOM tools, which is all you need for this kind of work. Backbone wouldn't be much use as there is no need for a client side model, so I've just implemented the code in a straightforward way. http://jsfiddle.net/2fwpJ/ You will need to run it on something other than jsfiddle, but the code (CSS/JS/HTML) works in chrome and is commented some. Should be readable to you.
Thanks, I appreciate the feedback! While my blog is more about physics than game dev, I will be writing an article for buildnewgames.com about game engine physics in the upcoming month, and that should have what you're looking for!
What language is that?
You question is pretty vague. How this would be translated into JS depends a lot on how you intend on using classes. JS is a functional language, so it doesn't work the same way as class-based languages unless you make it work that way. I/we would need more information on exactly which features you want to preserve from this code segment when translating it into JS.
if you use onclick, youre gonna have a bad time.. use [element.addEventListener](https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener) read this also: [DOM events](http://en.wikipedia.org/wiki/DOM_events)
Agreed. It needs a new set of instructions. Thank you for pointing out that loading a video requires more resources. I thought about that while I was building it, but compared to pulling all of the wavs that stepSync uses from the server (86, if I recall), streaming a video and player from Vimeo is pretty inconsequential. The current video was recorded on an old set of samples I'd thrown together without much thought for their sound, and if I leave a video in I'd like to update it and put in call-outs pointing out what is going on. But in that case I'll be using more English than I'd originally intended and I might just go with a set of instructions on that initial overlay to avoid the cost of pulling the video down altogether. EDIT: I wonder what the consensus is, lose the video or just clean it up?
OP is already js (coffeescript), what hes asking for is how to do that with a js-mvc framework instead.
The TypeScript for Angular is much longer and much harder to follow than it would be in JavaScript: function Controller($scope, $http) { getAllProducts(function (data) { $scope.products = data; }); $scope.addNewProduct = function () { $http.post('/api/products', { Name: $scope.newProductName, Price: $scope.newProductPrice }).success(function () { getAllProducts(function (data) { $scope.products = data; }); }); }; $scope.deleteProduct = function (productId) { $http.delete('/api/products/'+productId).success( function () { getAllProducts(function (data) { $scope.products = data; }); }); } function getAllProducts(successCallback) { $http.get('/api/products').success(successCallback); } } 
&gt; When you call x.my_function(), it uses the LexicalEnvironment tree of first f(), then out to x (because objects are functions?), No, it will *not* go out to x (or the caller's scope/LexicalEnvironment ). Only chain of LexicalEnvironments / scopes centered around f are important. Tracking down variables and 'this' are two separate things. 'this' doesn't play any part in variable resolution. It is just another variable inside the function's scope (except that it is set auto-magically). 
There's an awesome jquery plugin that already does this: [timeago](http://timeago.yarp.com/). [momentjs](http://momentjs.com/) is pretty spectacular as well. This is definitely not something that you need to write from scratch, it's well-worn territory.
Whitespace around `=&gt;` is ignored. Whitespace is normalized for comparison, so that a leading blank line or space in the actual or expected output is ignored. Some of this is discussed in [Output Matching](http://doctestjs.org/reference.html#matching) And of course ECMAScript won't ever start paying attention to `=&gt;` in comments, so I think we're safe ;) If it was really confusing (and certainly isn't now, with current versions of Javascript) then another alternative could be added. Technically you can also do `==&gt;` though I wasn't sure it was worth noting. Re: 3, there's several approaches you could take. One could be a done variable, like: var done = false; ...do stuff, set done to true... wait(function () {return done;}); But the one I usually do is like this: readFile(filename, Spy('readFile', function (error, fileContent) { readDatabase(Spy('readDatabase', function (error, someDbValue) { processResult(fileContent, someDbValue, Spy('processResult')); })); })); Spy('processResult').wait() This will wait until that innermost spy is called, while also printing a record of how the other spies are called. In some cases you can use something like `Spy('processResult', {wait: true})`, but for nested examples like you mention the inner Spy won't have been created synchronously, and you have to invoke the waiting synchronously. Since spy names are identifiers, the Spy is the same one we're waiting on. You can also break stuff like that up. E.g.: fileContent = null; readFile(filename, Spy('readFile', function (error, c) { fileContent = c; })); Spy('readFile').wait(); // =&gt; readFile(null, 'something') var someDbValue = null; readDatabase(...) // =&gt; readDatabase(...) And so on, splitting it up into multiple steps. Lately I've been testing something where I find myself compelled to have 6 layers of async callbacks in the test, which works okay but is a bit tricky to read compared to splitting it up. The one problem with this technique is that if an error happens (that you weren't prepared/waiting for) then probably the test will fail by timing out. This isn't so bad – a timeout is just a slightly slow way to fail (5 seconds by default), you still get all the information you need to fix it. I have a [ticket open](https://github.com/ianb/doctestjs/issues/26) but haven't decided quite what approach to take.
Here is what I have so far. &lt;html&gt; &lt;head&gt; &lt;title&gt;Style the Text&lt;/title&gt; &lt;script language="javascript"&gt; function red() { var redText= document.getElementById("styleText"); redText.style.color = "red"; document.getElementById('outputDiv').innerHTML = redText; } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type="text" id="styleText" size="70" value="me!"&gt; &lt;p1&gt;&lt;button onclick="red()"&gt;Turn Red&lt;/button&gt;&lt;/p1&gt; &lt;hr&gt; &lt;outputDiv&gt;&lt;/outputDiv&gt; &lt;/body&gt; &lt;/html&gt;
Wow, this is some dedication.
Cool. Their js support was already pretty good. 
I think the way you did it is good and I'm not sure that Backbone _really_ makes it easier to read. But if you want to use Backbone with coffeescript maybe this will help http://adamjspooner.github.com/coffeescript-meet-backbonejs/ Basically it can wire the events for you and stuff. There are also plenty of people using Ember.js with CoffeeScript. http://emberjs.com/ Not sure if Ember.js is really going to help particularly in this case because your thing doesn't really have a data model really and I think that is where Ember is most useful.
I'd absolutely kill for a JSR 168/286 plugin for netbeans that works (well) with IBM websphere. RAD is astoundingly awful for this kind of stuff. There's an older project that exists for netbeans, but I can't get it to work with the version of portal we're on :(
A bit confused by this block: readFile(filename, Spy('readFile', function (error, fileContent) { readDatabase(Spy('readDatabase', function (error, someDbValue) { processResult(fileContent, someDbValue, Spy('processResult')); }); }); Spy('processResult').wait() Because that won't compile (missing parens). Do they wrap around the callback functions only? Also, can this integrate with CI systems? Even if the code is intended for the client, it'll be sitting on a server, and hopefully be version controlled, so you can roll back if you mess something up, and tests are most useful if you have a CI system making sure you aren't deploying knowably-broken code.
Sounds like you haven't used Netbeans in a while.
There have been major performance improvements since netbeans 7.2. 
Honestly, the only reason I ended up ditching NetBeans was due to its lackluster JavaScript syntax highlighting options. Other IDEs like phpStorm and Aptana excelled here (or at least, made the customization more obvious) and stole me away. I always did prefer the workflow I had going with NetBeans and hopefully this is good enough to bring me back. 
Can you give an example of one which doesn't; or at least, what they would use instead?
OT - A few gripes just because I feel like it. 1) Modern web pages should always use a strict doctype. Transitional is only for web pages transition from older deprecated markup but you shouldn't be using those elements anyway. 2) You will never serve any pages in your lifetime as XHTML so why bother with that doctype or XHTML? (Note: I think XML is the best thing since sliced bread) 2a) So quit using XML self-closing tags like your meta element which will only be treated as broken HTML anyway ("tag soup"). So there!
After changing it from what I currently had to that I still got nothing
thanks! I'll be sure to take what you said into serious consideration.
None of the above. When you call a function, you stop executing your current function and execute the function you called, then replace its invocation with its return value, then keep executing the calling function. So, take this function as an example: function do_thing() { return 1; } Now call it like this: do_thing(); When the parser sees "do_thing()", it executes `do_thing`, takes its return value (which is `1`), and substitues it in for the invocation ("do_thing()"), resulting in this: 1; And then nothing else happens, because you aren't doing anything with that 1. But you can, if you want: var a = do_thing(); Again, the parser executes do_thing, then substitutes in its return value, resulting in: var a = 1; This isn't restricted to variable assignments. You can use a return value wherever you can write a variable: alert(do_thing()); // alerts 1 var a = 2 + do_thing(); // sets a to 3 return do_thing(); // returns 1 from the current function
It returns the value to where that function was called from. For example, the following code will pop up an alert box with the text "pizza". When we call the function "whatsForDinner", it returns the value "pizza" to the variable food. whatsForDinner = function() { return 'pizza'; } var food = whatsForDinner(); alert(food);
A reasonable overview on TypeScript. I do think it's what Dart should have been (and I generally like Google and dislike Microsoft, like any stereotypical Linux nerd). I'm not as worried as the author is about TypeScript "forking" ES6, because the proposal has been fairly stable in syntax for a while now. (Many of the edits appear to be cleaning up language and better explaining what they mean to implementers of the language). And if *Microsoft* is adopting the ES6 syntax, then I have far fewer fears about the standard being dropped like ES4 was. The fact that the type annotations are optional but do have an impact in the cross-compilation process is exactly what I would expect of an optional typing system. Unlike Dart's where the typing has no impact on what you actually do with the variables, ``bool myInt = "foo";``, being valid Dart code. Where TypeScript's type annotations are "here are the parts I want to fortify against mistakes because they're critical pieces of my code", Dart's type annotations are like covering your notebook in glitter -- distracting and worthless. All-in-all, I like what I see with TypeScript. :)
&gt; So quit using XML self-closing tags like your meta element which will only be treated as broken HTML anyway ("tag soup"). This is incorrect. [This](https://raw.github.com/gist/3837424/889cfc690676e6fde5f07579d1bc59a09799cfab/gistfile1.html) is a valid HTML document. [Check it out](http://validator.w3.org/check?uri=http%3A%2F%2Fmattkantor.com%2Fmisc%2Fminimal.html&amp;charset=%28detect+automatically%29&amp;doctype=Inline&amp;ss=1&amp;group=0&amp;user-agent=W3C_Validator%2F1.3).
When is it slated to be released? Browsing on phone and didn't see anything.
Writing your own code is how you get better. If you want to become great at javascript, don't become a plugin junkie ;)
The [Windows Azure portal](https://manage.windowsazure.com) seems to use it.
Don't. 1) Modern pages use an HTML5 doctype, if anything use that. 2) Serving pages as xml is incredibly useful in development because it treats mismatched tags as errors instead of failing silently. And if you're not planning on supporting old versions of IE (&lt;9 ) there is no reason not to serve it as xml in production. 
Don't forget the console object. You may use console.monitor(fn); to profile specific methods. If you need to profile object properties... you'll need a wrapper that does setters and getters.
Another script does a bunch of stuff that I have no control over. I need to generate script that can be evaluated later to replay what the original script did.
The HTML5 parser handles both XHTML and HTML. Other parsers do NOT. There are more details regarding that than I recall at the moment but the HTML4.01 validator will flag it.
netbeans welcome back :)
I'm a dev @ businessinsider.com, and we've been using ko in our cms for about the last six months. I've been looking at the possibility of replacing it with angular, which wouldn't be too difficult considering we've abstracted a lot of the "mvvm stuff" into a black box library. KO has been fantastic so far, but angular seems more elegant and minimal, solving a lot of the problems we've been writing custom code for (internally caching Ajax responses and built in validation). Either way, I highly recommend MV* frameworks, especially when you have a lot of non-js devs writing JavaScript.
I was imagining the notebook of a middle-school-aged girl with glitter, unicorns, and hello kitty with respect to Dart.
[link to author](http://twitter.com/devongovett)
You should provide a scope to avoid global vars... and why are var assignments separate from the declaration? Seems awkward...
Yep and look at all those still using 'transitional' much less HTML4 strict.
There was way too much logic/sanity in that comment for Friday morning.
Is there a demo website?
My little pony on the last page. ohgodwhy.jpg
To be a bit nitpicky, what you call statements are actually expressions in Javascript lingo (as well as general programming language lingo). An expression is characterized by having a value (the return value of a function, the direct value of a literal), while a statement has no value. 
That's cool too, but I generally use arrow keys when playing video games, not manually advancing through online slide shows. Good and valuable presentation at any rate, I gave the submission an upvote.
Any idea what slideshow they're using? Or anyone have a good web slideshow plugin (that works on older browsers?)
[](/twiright "EDIT: The fact that this has 0 downvotes after 2 hours gives me much more confidence in the programming community!") Because ponies.
That's insanly bad UI. What if you're looking at it on a tablet or other device without a keyboard?
I had to check the comments to find out that this is a slideshow.
swipe.
I actually have that book in my hands right now while I'm at work. I've done quite a few things on codecademy already and will probably do more as they update it more. Thanks for the info. 
&gt; You may use console.monitor(fn); to profile specific methods. This seems to be only if you're using Firefox, and only then if you're also using Firebug? I've verified that this method doesn't exist in Chrome and IE.
I also recommend the book [Maintainable JavaScript](http://shop.oreilly.com/product/0636920025245.do) by Nicholas C. Zakas. [github.com](http://github.com) is also a great resource for learning JavaScript. There are tons of projects out there that you can clone and see real-world examples of source code written by experienced developers that you can pick apart and learn from.
I had no idea Chrome could do all of that. That's really, really impressive. I especially like the leak finding portion, and the remote debugging. That's really cool.
What is cmd-?
But it's really really slow.
Seriously, that's crazy.
Let me convince my fortune 500 company otherwise real quick. In all honesty we could roll everything we currently use it for. And save a lot of cash. The way IBM keeps us is the 4000+ page book wagging in our face and their voice saying "Think of all the cool stuff it does (potentially)..." 
Oh, I love it. There's also [ruul](https://chrome.google.com/webstore/detail/ruul-screen-ruler/mlbnpnlmfngmlcmkhjpbfokdphfehhjj), which I love for in-screen measurements. Another fantastic new feature in Canary: CSS highlighting for the selected element.
Right now the support for in-browser testing in doctest.js is far superior to the support for command-line testing via Node, though it's not impossible. Though if you are testing something browser-related doing it via Node is not exactly easy nor necessarily accurate, though with Phantom (and Zombie?) I suppose that's getting more reasonable. At least with Phantom you would need your test system to some kind of IPC-like interaction, since the execution context is separated from the Node context. But for actual browser-based testing you need a more complicated rig, that can report in to a CI system even though typically it's not invoked by the CI system (at least not in the nice clean way a command line program is). Something like [jstestnet](https://github.com/kumar303/jstestnet) would be a container for browser-based CI testing, but I haven't actually used it. Here's a [Node example](https://github.com/ianb/doctestjs/blob/master/examples/node-example.js) – I just added something to do the exit code. I guess in theory this could be packaged up into a `doctest` command akin to `nodeunit`. I'm not sure if I'll personally get to this, since I'm not doing any Node.js development right now, but [I've opened a ticket](https://github.com/ianb/doctestjs/issues/34)
yah i've got that bookmarked on my computers, so i'll be looking at that as well. 
I would suggest running jshint / jslint to identify any problem areas right off the bat. That would show you the polution of the global namespace, I see some "==" that should be "===", etc... There are more than one "$('#set_time ...')" so you could cache that like var $set_time = $('#set_time'); and then later do something like $set_time.find('input') (or whatever else your looking for). Personally I like opening and closing brackets, even for one line conditinals, but that's just personal preference. If you're going to use comments, make sure you keep them up to date, 6 months from now you'll have only a vague recollection of what you were trying to do, or if someone else was to inherit this code they might not know what you are talking about. For instance, you have this bit: if (time_obj[0].length == 0) return false; // do something to make them enter valid time if the time_obj[0].length == 0, you return false. However the comment says "do something to make them enter valid time. Which is it? Is the comment out of date? Is returning false what should really be happening, or do we need to do something else? Good function names tend to be self documenting, and I think you've done a good job at naming, but out of date comments can lead to some head scratching down the road.
To this point, I used to do it this way, but have recently stopped. I use vim, and all to often I want to move things around and this syntax (one var statement for all definitions) makes it really tedious and more error prone (did I forget to add / remote the comma) not to mention less readable in my opinion. 
pew pew
+1 Thanks. It's been a while since I've really read or used either word. 
you should take every opportunity possible to use the word "wreak" in everyday conversation. "reek" ... not so much.
My son is still in diapers and both wreaks and reeks at times.
This looks great. It seems to only let you check *if* things are called though. You can't get a callback when they're called. I need to know the order everything's called in. Or did I miss something in the docs?
ctrl ? for windows
Wow, I'm impressed by your comment, you magnificent bastard! Quality work good sir.
How long before Android is ported to the desktop?
Yup, [right here](http://imgur.com/TsVGG). It might better be called non-applied CSS dimming, but Canary makes applicable elements/selectors black and non-applicable ones grey.
ooh, that's a nice enhancement.
What led you to an approach like this over media queries? More abstractly, I understand the **what**; could you talk about the **why**?
Because screen resolution doesn't actually tell me enough about the screen. Because in my mind there should only be two requests to load a page: data, and display. Because I don't care, I don't _want_ to care what browser, what user agent is coming to my site. It may occasionally be stupid, but it sure as hell is idealistic. 
ohgodwhynot.png
My employer does this as a matter of daily development, with some caveats. &gt; First, we go to a URL. This returns the Backbone Models and Collections for that URL, and also tells the browser about the selection of view packages available. First difference. We determine if it's a mobile request by URI + user agent. Customize Models/Collections and view packages for Full or Mobile. This is the JS+skeleton HTML &gt; Every template has its css. When the browser moves within a domain it's swapping views/css and asking for different/more models. Second difference. Tracking CSS as it applies to complex interactions leads us to just pulling all available CSS selectors up front. CSS isn't as verbose as HTML/JS and we don't gain much from splitting it among templates...which would require, at the very least, a separate process to reassemble every possible template's CSS to check for duplicate or possible duplicate selector functionality. &gt; There is no index.html. The code arrives at the DOM knowing it has the html and body tags, and that's it. I think you meant to say the index.html is empty. This is inefficient. The amount of useful information you want to display on a page will be slowed greatly without inlining the information the server already knows when serving the uri.
&gt;Am I missing something? I don't _want_ to be doing it that way. I'm _forced_ to. &gt;Using a traditional frontend stack that's still possible: I want to get away from the traditional stack. More and more is done browser-side. Maybe _that's_ the "why"--I wanted to experiment with how far the shift to the browser could go. &gt;For the record I don't think anything like this is "stupid". Experimenting is great! Thanks! Maybe "hilariously clumsy" works better. Also, I'm going to add some "why" to the article, I've been working with these goals for so long that they've become assumptions--your question really forced me to clarify that. 
I've also done the same for the opposite. "abcdefghijklmnopqrstuvwxyz".split(""); Is a lot easier to read and a lot quicker to write.
This is also available in the current beta build
You are not human.
&gt; I don't *want* to be doing it that way. I'm *forced* to. Do you mean that you'd rather look at physical inches like you mention in your article? If so I agree that it's ridiculous that CSS has units named `inch`/`cm`/`mm`/etc that don't have very much to do with measurements in the real-world. I appreciate that in some scenarios (e.g. projectors) it's not possible to determine screen size, but that's not a reason to just give up entirely. At least they were apologetic in [the spec](http://www.w3.org/TR/css3-values/#absolute-lengths): &gt; Note that this definition of the pixel unit and the physical units differs from previous versions of CSS. In particular, in previous versions of CSS the pixel unit and the physical units were not related by a fixed ratio: the physical units were always tied to their physical measurements while the pixel unit would vary to most closely match the reference pixel. (This change was made because too much existing content relies on the assumption of 96dpi, and breaking that assumption breaks the content.) Hopefully all the newfangled device pixel ratios that are coming out of the woodwork allow things to move back towards sane physical units, even if they are based more on visual angles ("reference pixels") than actual screen measurements (actually that's probably for the better, although it means we'll be stuck with misleading unit names for a long time).
&gt;Do you mean that you'd rather look at physical inches like you mention in your article? Yes. Very yes. I think that more and more, the browser/consumer/what-have-you is going to take charge of the manner in which it displays content. Heck, look at Reddit's Enhancement Suite. The projector example is good--what if a browser knew it could ask for a projector view package for when it's in Projector mode (a la Incognito)? Then the view side of web development becomes creating packages for the basic screens: mobile, default, projector, TI-83. 
potatoBasedUserNameAppreciatesNovelty++;
No worries, there's so many awesome features in the dev tools but many aren't documented well (or at all). Learned a ton from those [slides](http://www.igvita.com/slides/2012/devtools-tips-and-tricks/) that recently came out and thought maybe I missed something!
I guess I just view those "packages" as being different ways of presenting the same data, which is the realm of CSS. `&lt;link rel="stylesheet" media="projection" href="projection.css"&gt;` *is* letting the browser know it can ask for "a projector view package". Of course that assumes a clean separation of content and presentation. If you go extreme and need different representation formats then it's a job for content negotiation via the HTTP accept header. Actually, that might be a nice way to implement the HTTP layer of your framework (as an alternative to using distinct package URLs): GET /verbiage/idealjs HTTP/1.1 Accept: application/vnd.koglerjs.mobile+json # assuming JSON is your "package" format [...]
Well, this is pushing me into why I love and advocate for Backbone. Backbone takes an axe and it chops javascript into two halves. On one side are the Views: interacting with jQuery, the DOM, templating. On the other side are the Models and Collections. Pure code. I'm just trying to take that separation to an extreme. A URL is a pointer to some sort of Backbone Model/Collection setup. It does not indicate what Backbone Views should be used--though obviously it makes sense to have a default (and that is indeed what I call my main browser 'package') So you said: &gt;I guess I just view those "packages" as being different ways of presenting the same data, which is the realm of CSS. It's no longer just the realm of CSS. Javascript views are in the same category: different views for different consumers. And if that's so, javascript and css should (theoretically?) go down the pipe together. This has been an interesting conversation. I think I may have another Backbone article to write. Heading out for the night--cheers!
Isn't this entirely possible...? What makes this idea a dream/fantasy?
I also work on large scale web applications that follow this pattern.
Seems pretty cool, but is it just me or wheneer you try to move you start shaking violently back and forth and it gets worst at each time? Also, 10 fps is my average ._.
&gt;Backbone takes an axe and it chops javascript into two halves. On one side are the Views: interacting with jQuery, the DOM, templating. On the other side are the Models and Collections. Pure code. I just started using backbone for a new job and when you explain it like that it makes a lot of sense to me. Javascript has become such a monster of a language, it almost needs segregation. It's interesting to see how websites are beginning to follow the form of client-server application models, with distinct layers of functionality instead of just a jumble of presentation logic (html/css/js) paired with a server. Good luck with your experimentations!
&gt;So what is it designed to prevent? It's called the [same-origin policy](https://developer.mozilla.org/en-US/docs/Same_origin_policy_for_JavaScript). It has very good reasons for existing.
Welcome in everything is JavaScript era!
I think we're agreeing on the same things but tripping over the words.
I hope not...
I don't buy the "Look! These languages, claiming to be type safe at compile time, don't provide runtime type checking!" argument. But I *do* buy the argument that these abstractions leak, and potentially in bad ways. I'm really happy using Coffeescript. I wish it did some more cool stuff like proper mixins and annotations, but mixins is hard to do on a primitive system like prototypal inheritance, and Jeremy has his own ideas about special language constructs for both.. Still, it's a massive step up from pure JS.
thanks for the comment, I just like alternatives to behave as js or make js behave as they do (if that's an option) ... untill browser vendors change their mind ... 
1. Try to forget the existence of "==" and use "===" instead. There are use cases for double-equals, but those are exceptions to the rule (usually cute hacks for brevity). 2. Truthy and falsy values can be difficult to grasp. Falsy: "", 0, undefined, null, NaN (0/0). Truthy: "0", 1/0, {}. 3. Type coercion is weird: (new Date() + 0) is ""Sat Oct 06 2012 12:56:45 GMT-0400 (Eastern Daylight Time)0"", (new Date() - 0) is 1349542608499. Incidentally, with implicit type coercion, the string form is local time and the numeric form is UTC. 4. Always parse integers with a base: parseInt('07') is 7, parseInt('08') is 0, parseInt('08',10) is 8. 5. Use console.log() instead of alert(). 6. Primitives are passed by value, objects are passed by reference. 7. Declaring a variable without "var" makes it a global variable. 8. object['property'] is identical to object.property except that "dot notation" cannot be used with language keywords (depends on browser) or numbers and bracket notation can be used with arbitrary strings (including spaces, for example). 9. There is no scope inside of loops. Declaring a variable within a loop scope is the same as declaring it in the containing block. This can be hard to demonstrate, but take this very contrived example. The number "10" will be printed 10 times, because at the end of the loop execution there exists only one variable "i" whose value is 10, which is what the callback is referring to. for (var i = 0; i &lt; 10; i++) { setTimeout(function(){ console.log(i); }, 1000); }
Completely misses the point of Typescript.
this
I've been working all week porting the JavaScript port of my C++ game engine to TypeScript (using Visual Studio 2012 for the Web) and I'm very happy with it. Adding annotations is fast and easy, IntelliSense works very well (way better than it did in Visual Studio 2010 for C++) and the compiler generates efficient, readable JavaScript. There's only two things that annoy me: Adding a new .ts file to a project does not automatically add them the list of files to be compiled it seems, so I ended up adding all my files manually by editing the .proj file. And you can't set compiler flags in Visual Studio, so you also have to do that by editing the .proj file directly. If you're interested, I created a **[subreddit for TypeScript](http://www.reddit.com/r/typescript)**.
&gt; mixins is hard to do on a primitive system like prototypal inheritance Simple mixins aren't too hard. They aren't "proper", in that it doesn't set up a parallel inheritance hierarchy alongside the prototype ... but in practice, they work just fine: mixin = (klass, properties) -&gt; for name, value of properties klass.prototype[name] = value
&gt;There is no scope inside of loops. Declaring a variable within a loop scope is the same as declaring it in the containing block. You make it sound as if JS has block scope, which it doesn't. There's only function scope. That's it. And not a word about closures? Probably the most important feature of JS that most newbies have difficulties grasping.
No problem. Also, instead of posting on pastebin, you can just add 4 spaces before all your code.
I know, I just have an aversion to duck typing.. I suppose that's something I've picked up doing too much java the past years. That, and forgetting to take off my python hat, chucking in a couple of mixins in the class definitions of coffeescript every now and then. For annotations though, I saw the discussion about the PR on that a while back, and, unless I missed something, don't really buy the argument that you can use the normal function syntax for that. Really for one reason, that having a syntax that allows line breaks without '\' makes it much more readable: class SomeResource(object) size : @Description("The size of it") @Default(10) sizeSetting() index : @Path('/') @Accept(ContentEncoding.SOME_ENCODING) @LoginRequired (req) -&gt; return "Hello" vs class SomeResource(object) @Default(10) @Description("The size of it") size : sizeSetting() @Path('/') @Accept(ContentEncoding.SOME_ENCODING) @LoginRequired index : (req) -&gt; return "Hello"
What helped HTML5 and CSS3, is the fact that Mozilla, Apple and Google just went ahead and implemented a lot of it. This really helped to give the W3C a good kick and hurry up standardising new features. MS doing similar with TypeScript, to be close to what they expect from ES6, is similar, and much needed. Most of the JS I write (and I'm talking about the core JS language), would work in IE 6; that is not reasonable. I should not be using a language which has barely moved forward in 10 years. Heck, even Java has gotten more in that time; that's shameful. I really like the look of TypeScript, and it's making me feel like I should start porting a bunch of my JS code over.
it would help if your demo worked =c) on FF: ReferenceError: displayImages is not defined
Upvoted everyone, this is a good question.
Add support for SASS and LESS and I'm aboard!
Install [Web Essentials 2012](http://visualstudiogallery.msdn.microsoft.com/07d54d12-7133-4e15-becb-6f451ea3bea6). It will show ts/js in a split window and automatically compile ts on every build.
* Fixed. Looked fine in my editor. Turning on invisibles made me realize that both spaces and tabs were present. No idea how that happened! * Good point; ID is now undefined as well * It does now—BOOYA! (thanks for the suggestion) Thanks for taking a look!
* names\_with\_underscores are not idiomatic JavaScript. Use camelCaseNames instead (or PascalCaseNames for constructors, not relevant here). * You have `destination = $(this)` but later use `$(destination)` twice. `destination` is already a jQuery object; no need to wrap it again. Idiomatic jQuery code might use `$destination = $(this)` so that you see the $ in the variable name as a reminder that it's a jQuery object, and then just use `$destination` later in the code. * Put some line breaks in those long lines where you concatenate strings. * The style of the `var` statements and indentation makes it hard to see which variables and assignments are part of the long `var` statement. Should that semicolon on line 48 be a comma? * `$.each(photo, function(undefined, item) {` - WTF? Use `i` or some such instead of `undefined`! * `limit: 6, // Amount of photos...` - that's a *number* of photos, not an amount. :-) (An amount is something you can have *less* of; a number or quantity is something you can have *fewer* of. You may have fewer photos, but having less photos wouldn't make sense.) * This is strange code: has_links ? html += "&lt;a href='"+ flickr_url +"'&gt;" + image + "&lt;/a&gt;" : html += image; It should either be: if( hasLinks ) html += "&lt;a href='"+ flickr_url +"'&gt;" + image + "&lt;/a&gt;"; else html += image; Or (my preference, and perhaps closer to what you were aiming for): html += hasLinks ? ( "&lt;a href='"+ flickr_url +"'&gt;" + image + "&lt;/a&gt;" ) : image; Actually, I would use single quotes to quote JS strings, and double quotes for HTML attributes, so it ends up like this: html += hasLinks ? ( '&lt;a href="'+ flickr_url +'"&gt;' + image + '&lt;/a&gt;' ) : image; 
Are you saying there's something grammatically weird or that Flickr is just behind on everything? 
the latter
So this is actually not always a great idea. There is something to be said about DIY. However, it's usually a good idea to at least see how others do it. And this is not specific to programming. Graphic designers commonly get 'inspiration' by seeing how other designers do similar things. 
See [Hoisting](http://bonsaiden.github.com/JavaScript-Garden/#function.scopes)
This is not a jQuery plugin. This is a console application that renders JSON into HTML.
jQuery plugins should always return the jQuery-object to make it chainable, something like this: return this.each(function() { var destination = $(this) // and all your code });
heh heh :D CLI++
Haha yep, I didn't realize how many people viewed on their mobile phones! I'll add some arrows to the sides.
No, just arrows on the sides. I realize I'm being harsh, but I had a similar experience with a slide show about programming from a Google engineer where the slides were in the same format, but no arrows. Eventually I figured out that the arrow keys navigate back and forth through the slides. However, I felt frustrated and it took away from the presentation.
Your link is correct but your link title is not. This isn't hoisting. 
So when I have two "person" declarions in my code they a still transformed to this: var person; person = {/*....*/}; The second "var person;" is just skipped? Daniel
Add both. You can't underestimate some people's lack of technical knowledge. 
I prefer to use $.ajax() for all xhrs. The reason being $.getJSON() fails silently and I like to have an error handler as well as a timeout set for all requests. Since you're doing a cross domain request the error handler will occur only after a timeout. As is you'll never know and any placeholder text/spinner will simply display endlessly on error. 
Thanks so much! This will save me a bunch of development time!
Favorite PC Gamer issue for me. Used to have it but lost it. Thanks for posting!
Didn't say how to access the settings to disable cache :-/
Trust me, there's a reason for that. The Definitive Guide is the best JavaScript book out there right now IMHO. If you have an Android device you can grab it for $4.99 from the [Google Play Store](https://play.google.com/store/apps/details?id=com.aldiko.android.oreilly.isbn9781449306885&amp;feature=search_result#?t=W251bGwsMSwyLDEsImNvbS5hbGRpa28uYW5kcm9pZC5vcmVpbGx5LmlzYm45NzgxNDQ5MzA2ODg1Il0.). It's DRM free and it's the complete book. You can even extract the ePub from it and use it with your e-book reader of choice.
We're going backwards. I agree on your point of view, supersets simply aren't good as native, and I feel they dilute the language. I feel that companies should work to improve the current javascript, help out standards, and try and quicken the release of javascript.next (not sure how ECMA works, but, yeah.)
It depends on the language, in my opinion. How far you abstract from the original language is really the key.. for example, if you make a new language (lets call it arrow) that does nothing but replace `function` with `-&gt;`, you're not going to see *any* speed hit. Likewise, if you compare CoffeeScript to say Pyjamas or some of the Haskell-&gt;JavaScript utilities out there, Coffee is going to be far closer and much less likely to result in a serious hit. With that said, i prefer CoffeeScript, and quite enjoy it.. though, i will say that the Class implementation of Coffeescript goes too far imo.. even though i love using it.. it has a ton of additional baggage added.
sweet! thanks man. 
Correct me if I'm wrong about any of this, but after reading the TypeScript langauge specification (with the exception of that part that has the TODO in it) it seems that you've effectively created an ES3 implementation of ES6 with the addition of enhancements to the ES6 specification that Microsoft is pushing for. Similar to the 'six' project on Github. From where I'm standing it seems like more of a tactical play on Microsofts part. It's allowing you to write JS, but Microsoft JS. They've got the best tools for the job (VisualStudio) and I'm assuming tighter integration is planned between TypeScript, VisualStudio and their other tools / languages based on the pending success / failure of the language superset. If the compiler features become more ubiquitous through the extensive use of TypeScript then Microsoft has more sway in pushing changes into the W3C specifications for the next ES version.
jQuery does have a very modularized, a-la-cart type of setup planned for 2.0....exactly what you talk about here. Really, jQuery is great...so long as you use it for what it is good at...smoothing over the DOM interaction...but beyond that, people need to look elsewhere. jQuery does not solve all problems and should not be used as the hammer that solves all problems.
I have several concerns when it comes to these 'supersets'. 1) debugging....right now the tool chain set is setup for javascript, adding a compiled abstraction layer on top of javascript will make this more difficult as the code you will look at in the debugger is not the code you wrote. 2) speed...these abstractions generate extra code...code that may or may not be optimized as well as it could be be by writing it by hand 3) fragmentation...as a developer who writes a lot of JS front end code I wonder about the headaches that can be caused by having so many different languages that a company may or may not choose...how many developers are going to really know CoffeeScript? Or Dart? Or Typescript? We need a common solution that works well, and so far the bottom line is, all of these are JS at their core...why not use that? Because some people find it difficult? I am sorry...but I would prefer people learn their tool chain better vs writing these encapsulations which add more abstractions. Every company likes to do things their own way, and I am afraid that not every company will choose option A, because they like option B more....from a maintainability standpoint...this is an issue that cannot be overlooked. Just my $0.02...
Here's how you can think of it: 1. When you combine "var" and "=" in one statement, you are really doing two independent things: the var creates a variable, and the = assigns a value to that variable. 2. When a function is executed, the var statements (without any assignments) happen first, as part of setting up the function. After that is finished, then the actual executable code (including any assignments) runs. 3. Two var statements naming the same variable are the same as a single var statement, since var only creates the variable and doesn't do anything to it (other than giving it the undefined value). So, your code: var person = { firstname: "Foo", lastname: "Bar" }; var person; is really the same as this: var person; var person; person = { firstname: "Foo", lastname: "Bar" }; Or in other words: var person; person = { firstname: "Foo", lastname: "Bar" }; Or, putting it back together, it's the same as if you'd just done this and nothing else: var person = { firstname: "Foo", lastname: "Bar" }; 
CoffeeScript and Dart, unlike TypeScript, aren't supersets of JavaScript. They are entirely new languages that compile to JavaScript. I think TypeScript is a fantastic tool for web application development. It allows for much better static analysis than before. It's also nice to have static typing and support for concepts like classes and interfaces. TypeScript code is much more maintainable than idiomatic JavaScript. Dart and CoffeeScript I don't buy.
1. Source maps 2. Compiled JavaScript apps aren't necessarily that much slower. You can write all the performance critical parts by hand (at least with TypeScript you can). 3. I agree fragmentation is a real issue. Though, I understand why JS is often shunned. It can be challenging to write maintainable large scale apps due to the dynamic nature of JS and lack of proper tools (though the tools are improving. NetBeans 7.3 looks promising).
I just don't see the point in them. A JavaScript superset which just removes the need for cross-browser compability bullshit (eg changes `.forEach` calls to for loops, stuff like that)? That's be nice. A superset which changes some minor things and the syntax so that they're more like other languages? Hire a JavaScript developer; it's what they're for! And then you get employers who hire a "JavaScript developer" and then expect me to write CoffeeScript…
Awesome; I'll see if I can find the time to do something.
A language addition like typescript's type annotations is a lexical superset of JavaScript but a semantic **subset**. I mean that there are new keywords that can be added to the source code, to specify the type of a variable. But adding these *restricts* how that variable works. Some things that were allowed before no longer are. I'm not saying that this is a bad thing, it has definite advantages. But calling it a "superset" is not the whole story.
I was talking keeping jQuery in mind, which does abstract the native code a lot. Other languages may have better implementation, but I really don't know abou tit.
&gt; 2) speed...these abstractions generate extra code...code that may or may not be optimized as well as it could be be by writing it by hand It depends. I am working on my own language-to-JS compiler, and one of the things I want to build in, is proper copy+paste inlining. That would allow me to have modular code, with functions, which are as cheap as inlining it manually. The problem is that even with pure functions, which are not handled outside the scope, you still get a performance overhead when they are not inlined. You can also chose to make more intelligent decisions. For example JS object literals are faster than full blown prototypes in many specific cases, so again if a compiler could generate the times when that's a good idea (small classes), then I don't have to worry about doing it myself. Finally stuff like TypeScript, which encourage you to *not* mix types, helps you to have code which is easy to trace. As a result it can end up faster than JS, just because you have made a better job of it. Now of course you can do all this stuff manually, but you need ways to detect issues (like are you mixing types?), and this can make code brittle and unmaintainable. It's not just about being able to optimize code, it's also about being able to do it easily, or better yet, automatically!
You're right about the debugging problem being no different than translation from C to assembler, provided the tools exist. But if we keep getting new JavaScript's-of-the-week then we're going to have to keep generating tools for handling each one of them. Alternatively, we just learn to write better JS, at least until it's improved or some general consensus is made, and then we already have relatively mature JS tools to work with.
&gt;Loves unicycling, squirrels, stream parsers and quadcopters. interesting fellow
I really enjoy your pure and conceptual thinking! That said, in the real world I would not apply this concept because of SEO and browsers with Javascript disabled.
The language is still high level, but like any other language he's optimizing for a specific compiler (V8 in this case). The only issue I see with this approach is that V8 is a moving target –much more than for other high level languages– and these optimizations may as well be detrimental once V8 changes heap allocation strategy or GC heuristics (which happens quite often) . 
In all fairness, many of us were molested and raped by C at an early age. 
Algorithms and data structures matter as much (or more) than the language. You pick a language for the general area of computation you're working in. Try writing an real time OS kernel in JS - you will be ... um, less than thrilled I suspect. 
indeed! :D
And these kids bitch about a segfault. In those days it was more like 4096 KB RAM OK CMOS CHECKSUM OK BOOTING ... 
I would recommend using jquery and changing the value of the desired textbox(es) when the value of the quantity and/or price textboxes change. This is completely untested and off the top of my head but something like: $('#txtbxQuantity').change(function() { var total = $('#txtbxQuantity').value() * $('#txtbxPrice').value(); $('#txtbxTotal').value(total); }); Do the same for the price text box. This event handler only works for &lt;input&gt; elements.
Is this 1999? People still preload images?
Common messaging design patterns include Observer and Publish/Subscribe. This library is an event factory which allows you to implement these patterns easily.
Did you want a grand total calculation?
This sounds like class assignment. Maybe read the book and see how they do things?
I hear what you are saying...and honestly I have yet to really dive into coffee script, I merely stated it as a concern I have thought about. I do have a ton of experience with things like CSS preprocessors of which the same concern could be expressed. I have never had an issue debugging/fixing issues in preprocessed CSS (albeit CSS is far simpler than javascript).
I wasn't trying to put you down or anything. Any libraries out there are helpful to any developer. The trend that I've seen these days is that people don't really care about bandwidth anymore. Most sites these days don't even load the images until they are within the viewport. 
The problem with this approach is that you will hit the max concurrent connections per host limit. You want to try to control how many images are concurrently downloaded per host.
Also feel free to submit a pull request, I love to collaborate.
I LIKED IT!
It is a little different than C -&gt; ASM. The debugger you look at in any decent environment for C will show you the actual code you wrote while you are debugging, not the translated assembly. When considering coffeescript this isnt the case, open up the debugger in firebug for coffeescript'd code and you will be debugging on the processed code, not the coffeescript. Truth be told I do not have much experience with coffeescript though so I may be worried about a non-issue.
tl;dr: Basic tutorial on event delegation with jQuery.
I am really uncomfortable with his `eval()` optimization. Is this a common technique, and how does it even work? And shouldn't this be done by the interpreter instead of the programmer? C compilers unroll loops for us, we don't write a[0] = b[0] a[1] = b[1] ... a[10] = b[10] OK so here's the code that makes my skin crawl: var code = 'return {\n'; columns.forEach(function(column) { code += '"' + column.name + '":' + 'parser.readColumnValue(),\n'; }); code += '};\n'; var parseRow = new Function('columns', 'parser', code); If `columns` is `['a', 'b', 'c', 'd']` at the time this function is defined, then `parseRow` is equivalent to function parseRow(parser) { return { 'a': parser.readColumnValue(), 'b': parser.readColumnValue(), 'c': parser.readColumnValue(), 'd': parser.readColumnValue() } } but it's supposed to be: function parseRow(columns, parser) { var row = {}; for (var i = 0; i &lt; columns.length; i++) { row[columns[i].name] = parser.readColumnValue(); } } So, do we define a parse row for each value for `columns`? And how can it possibly be faster to define a new function each time? This hurts my head :( EDIT: OK he's just defining a new function once per table schema but it's still [uglier and slower than just writing idiomatic Javascript](http://jsperf.com/object-literal-vs-progressive-construction): function make_row_parser_for(columns, callback) { return function() { result = {} for (var i = 0; i &lt; columns.length; i++) { result[i] = callback() } return result } }
Here's the function: Get a person. Give them a bunch of order forms. Tell them how the subtotal and the total are calculated. Tell them that if any of the fields change, they need to recalculate the subtotal and total. Pay them a salary so they show up and perform this function every day. Wait, so what did your question have to do with Javascript, or programming, or even computers? Oh, I know, you just want us to do your homework for you.
Maybe the author is practicing writing tutorial blogs.
Now I'm no expert, and don't know much of anything about theory, but the first example will work with a slight change: [here](http://jsfiddle.net/KUs6Y/2) (link should work now..) E: pfft. seems I fail at jsfiddle. anyway inside the for there should be (function(item){ document.getElement...... })(helpText[i]);
He links to this article, which I believe is a better presentation: http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/
Cool, I think I see what you did. By wrapping the showHelp in a self executing function, you eliminate the need for closures completely and assign the Id to the appropriate showHelp up front, so it executes right then when the environment is correct, rather than later when the function variable has changed? (is it still called a closure at that point, if you execute it earlier like that?) Either way I like it. Straight forward, pragmatic, and clever. Thanks! **Edit:** I was actually looking at cartlemmy's example.
Nice. You should also check out [js-signals](http://millermedeiros.github.com/js-signals/). I especially like its memorize feature among other things [[docs](http://millermedeiros.github.com/js-signals/docs/symbols/Signal.html)]. Combine the above with [hasher](https://github.com/millermedeiros/Hasher) and you have a pretty damn powerful routing mechanism in the browser (which also happens to be neatly bookmarkable).
how about cyclic references? obj1 = {}; obj1.a = obj1; obj1.clone()..... Maximum call stack size exceeded I did write something not too long ago where you can convert an object which has a cycle in to json and convert the resulting json back to an object: https://github.com/rhysbrettbowen/JSONycle if you ran the stringily then the parse on the result you'd get a true clone including cycles so you may want to take a look
Your example could be simpler: (function () { "use strict"; var obj1 = {label: "test"}, obj2; obj1.whoopsSorry = function () { console.log(obj1.label); }; obj2 = obj1.clone(); obj2.label = "broke"; obj1.whoopsSorry(); obj2.whoopsSorry(); }()); You don't need to return an anonymous function in the `whoopsSorry` method. But I honestly still don't get the point. This method returns explicitly the `label` property of `obj1`, not `this` object: there is no reason `obj2.whoopsSorry()` should return "broke".
The "optimized" code is essentially performing loop unrolling manually at run time. Why can't V8 do the loop unrolling automatically? Because the compiler cannot always know that doing so is safe. Consider the following loop. columns = ['a', 'b', 'c', 'd'] for (var i = 0; i &lt; columns.length; i++) { console.log(columns[i]); if (columns[i] == 'd'){ columns.push('e'); } } If the compiler naively unrolled the loop based on `columns.length` when starting the loop, the 'e' column would never print. Of course, you shouldn't write code like this, but the compiler can't know you're a good developer. In order to unroll the loop, it must be able to prove that the evaluation of the loop condition do not depend on the loop body. I am not a compiler expert, but I believe doing so in the general case is impossible or at least impractically slow for a JIT compiler. In an ideal world, V8 would allow the developer to provide some kind of hint to tell the compiler that the loop can be safely unrolled, but until then, doing the optimization yourself improves performance for large loops. What confuses me is using forEach versus using a loop to do the unrolling. I know V8 has native forEach, but it is still [slower](http://jsperf.com/loops-foreach) than a loop. EDIT: FYI the GCC option --funroll-loops will only "Unroll loops whose number of iterations can be determined at compile time or upon entry to the loop."
You should *really* use jQuery for this. The ajax methods are *amazing* and will do all the cross-browser nonsense for you. Otherwise you end up with a mess like this: function getXHR() { if (window.XMLHttpRequest) { // Chrome, Firefox, IE7+, Opera, Safari return new XMLHttpRequest(); } // IE6 try { // The latest stable version. It has the best security, performance, // reliability, and W3C conformance. Ships with Vista, and available // with other OS's via downloads and updates. return new ActiveXObject('MSXML2.XMLHTTP.6.0'); } catch (e) { try { // The fallback. return new ActiveXObject('MSXML2.XMLHTTP.3.0'); } catch (e) { alert('This browser is not AJAX enabled.'); return null; } } } 
Interesting. The first time you run the benchmark, the loop code is faster, but if you run it again, the object literal code is (a tiny bit) faster. Provided your loop is large enough, that is. http://jsperf.com/object-literal-vs-progressive-construction/2 This is a good example of the OP's point. Optimizations can only compared within a certain problem space. Clearly, the code trick helped his code, even if it hurts generally. It may be possible to cache the evaled code, for example.
I'm sorry. I assume it's a mandate then? Do they use it internally where you work?
Thanks for all the input! I'll file some issues on Github for them. Feel free to send pull requests!
Beautiful, thanks for the input! Just made the changes on Github.
Is that a fair comparison of what is being used in this library? I presume (but this is just a guess), that the eval version was built to turn a row of data into an object, and then ran it multiple times for each row of data. So if you had 1,000 rows in your result, it would be created once, and then called 1,000 times. Under that situation, suddenly this could make more sense. Also, you are using all integers in your loop, where as the node-mysql library will not all be integers. This might seem like a small point, but it has an impact on many runtimes, as they can generate code that just works on integers.
&gt; Faster than C? No.
Am I wrong in thinking that if I use pure javascript the page will run faster?
Yes, you are wrong. You're talking milliseconds at that point, which is negligible. And the fact that you can load the (probably already cached!) version of jQuery through Google's CDN means it's gonna load a lot faster than your script will anyway.
It's not necessarily wrong... But keeping the nested function separate from the loop itself will make it easier to read and follow. It might also increase your performance, as the JS parser would have already evaluated the function (nested within the loop will force a new evaluation each time).
O_o ...Is this homework?
If you used jQuery, this is all you'd need: $('#id').load('something/text.html'); I don't see why you are so opposed to jQuery. jQuery *is* pure JavaScript. It's not magic, it's not some other language, it's just some JavaScript that other people have written for you. It exists to make your life easier. Why do you not want your life to be easier? As someone already said, you can load jQuery from public CDNs, which means the user most likely already has it in their browser's cache and won't have to download anything. As of October 2012, [51.9% of websites use jQuery](http://w3techs.com/technologies/history_overview/javascript_library/all) so it's not like this is a niche thing. (That site bases its numbers on crawling the first million sites in the Alexa list.)
&gt; Copies/Clones any variable so all references to the original object are stripped. This doesn't 'strip references' from an object, you are choosing to create and reference a new object, instead of referencing the same object twice. It's just kludging two separate ideas together, implying they are related, when they aren't; they are two separate concepts. This type of language implies things that doesn't happen. You could also have the same example with this clone method.
Yes certainly. See my answer above for further clarification.
Looks good, but it's missing one major feature: unsubscribe. 
How is this API different than any other [EventEmitter](http://nodejs.org/api/events.html)?
What about decimal? tclsh8.6 [~]format %d 0x7f000001 2130706433 tclsh8.6 [~]ping 2130706433 PING 2130706433 (127.0.0.1) 56(84) bytes of data. 
25/25 quite easily
done 45/25 (lol) the only red one is 100.100.100.100 don't know why it's no-match and now to exclude it properly :(
An interesting effect: if you append TextNodes with .appendChild, they can appear in event.target, too - in any other case (innerHTML, data) you'll only get the parent.
I'm tired today &gt;_&lt; Fixed both issues (well, someone else did in a PR)
Here is a video of the talk http://m.youtube.com/#/watch?v=DASvUIAfoRU&amp;desktop_uri=%2Fwatch%3Fv%3DDASvUIAfoRU&amp;gl=DK
Hehe... The least they can do is to try to fix it.
It was me :)
Cool; thanks!
I'm still waiting for the short function syntax (`()=&gt;{}`).
Doesn't seem to work in IE9...
Thanks, this is exactly the sort of thing I was looking for.
this is really really helpful. I was planning on messing around with an inline maker function but I had no idea how to benchmark it. Thanks for much for this, and for introducing me to this benchmarking site!
&gt; was considered an inept language and a browser wart this has changed?
Thank you. It's all too popular and common to hate on JavaScript as though it is the only language with design flaws and warts. There is no perfect language. JavaScript does a damn good job when you consider the history surrounding its creation and the niche it is meant to fill. Also, I can think of no other internationally standardized embeddable scripting language that has so many high-quality competing implementations. It really has come a long ways.
The reason that the above code does not work is because the ajax call is asynchronous. The function that it is called in will not wait for it to return before continuing onwards, so it returns what it is supposed to return, which is "undefined" (as you have no return statement defined). When `RandomWordComplete()` does get called when the JSONP call completes, the function has already returned, so nothing happens. You'll see this in action if you add `alert(1);` to the end of `RandomWord();`. It will alert before the alert in `RandomWordComplete()`. The solution is to stick with a callback, instead of a return. Alternatively, if jQuery support asynchronous ajax calls, that could work too, but then script execution (and by extension, your page load) will halt while the script waits for the JSONP call to return.
The RandomWord function is run asynchronously - it only runs after the ajax returns. You wouldn't have the data at that point. You should put the rest of your functionality in another function and call that from RandomWordComplete rather than continuing after the $.ajax - or you could use http://api.jquery.com/category/deferred-object/ and put your functionality in like that
You won't have to re-learn Prototype/Scriptaculous, YUI and jQuery, jQuery UI, jQuery mobile, those libraries should be updated whenever this releases (when is that? *someday*) You also won't have to re-learn JS, just the new pieces if you have use for them.
So when will this be ~~released~~ supported by all the required browsers? IE9 will be around for several years I'm guessing?
Take a look at [LLJS](http://mbebenita.github.com/LLJS/) and [typed arrays](https://developer.mozilla.org/en-US/docs/tag/JavaScript%20typed%20arrays).
Thank you! Sorry, haven't worked with JS in about a decade. Rusty as hell. :)
Thank you!
Forget everything you know about JS from 10 years back.
Fascinating. Redditors downvoted this but no part of that code is jQuery. Which says a lot about the people who visit reddit.
You might be misreading the comment. It says "you should use jQuery because if you *don't* your code will look like this: ...". It's not supposed to be jQuery.
Way ahead of you.
I don't get it. Is he saying that you can also create integer variables? Or does this only apply to objects and arrays?
And IE10 isn't likely to make any drastic changes either...
&gt;Time to learn JS all over again! It really gets fucking overwhelming. Welcome to programming!
AND IT FEELS LIKE I AM JUST TOO CLOSE TO LOVE YOU... wub wub wub wub wub wub...
and here i thought you were just making ascii faces
IE is supposed to be a yearly release now. 
RTM for IE10 was August 2012 Earliest we could hope for any ECMA 6 support is IE11 and that's laughable at best. Maybe IE12 and August/Sept 2014 then. Of course we'll need to support IE10 and 11, so we won't be able to rely on it until 2016. We can start using classes in js in 2016 then. Maybe. 
Got 48/48. This is similar to TomFrosty's, so I'll point out the primary differences. /^((((\d{1,2}|1\d{1,2}|2[0-4]\d|25[0-5])|0x[\dA-F]{2}|0([0-7]{2}|[0-3][0-7]{2}))(\.(?!$)|$)){4}|0x[\dA-F]{8}|0[0-3][0-7]{0,10}|([1-9]\d{0,8}|[1-3]\d{9})|4([0-1]\d{8}|2([0-8]\d{7}|9([0-3]\d{6}|4([0-8]\d{5}|9([0-5]\d{4}|6([0-6]\d{3}|7([0-1]\d{2}|2([0-8]\d{1}|9[0-5])))))))))$/ /^ ( ( ( (\d{1,2}|1\d{1,2}|2[0-4]\d|25[0-5]) | 0x[\dA-F]{2} | 0([0-7]{2}|[0-3][0-7]{2}) ) (\.(?!$)|$) #This uses a look-ahead to make sure the . separator isn't at the end of a line, which lets this pass 100.100.100.100. ){4} | 0x[\dA-F]{8} | 0[0-3][0-7]{0,10} | ([1-9]\d{0,8}|[1-3]\d{9}) | 4([0-1]\d{8}|2([0-8]\d{7}|9([0-3]\d{6}|4([0-8]\d{5}|9([0-5]\d{4}|6([0-6]\d{3}|7([0-1]\d{2}|2([0-8]\d{1}|9[0-5])))))))) #This is a more specific test to allow any decimal number up to and including 4294967295 ) $/
I think it's successfully achieved the goals set out by Java. In being a write once run everywhere platform. Which is partially due to the run away success of browsers. Everything runs browsers now: TV's, cell phones, game consoles, refrigerators. I think it's also due to the success of open source browsers Firefox, Chrome etc. which made the standards created by the W3C and ECMA valuable.
While I may have overstepped with the phrase 'drastic changes', and yes, IE10 certainly appears to be a step in the right direction (as of that link, is available for Windows 8 only at this time, except for a release from over a year ago), but is clearly not making the kinds of strides forward that both Firefox and Chrome are working with. So yes, IE10 is making changes, ones that might even be called drastic given IE7, 8, and 9, but having been writing for and fighting with the IEs of the present and past, these are more 'oh finally' and less 'magical and awesome'. Kudos to you though, and bringing IE kicking and screaming into the present - future me thanks you already.
Nice! However, it matches the octet "099", for instance, which imho it shouldn't match (last part of 0-255). While there exists a RFC for the textual representation of IPv6 addresses, IPv4 is not precise about it, so it seems ok in terms of the specification, but not in terms of best practice. Afaik the defacto standard is the 4.2BSD inet_aton(), which interprets a leading zero as octal and "99" is clearly not octal! :-) [Linux Programmer's Manual INET(3)](http://www.kernel.org/doc/man-pages/online/pages/man3/inet_aton.3.html) I propose (2[0-4]\d|25[0-5]|1\d\d|[1-9]?\d)
Srsly.
Just added this - if you get the opportunity check it out. Would love your feedback!
beautiful! , I wil let this go for the night, courious how it ends :) 
Those poor stars being thrown into the abyss.
Good stuff. Could this code be tweaked to show the creation of the planets in the solar system as well?
The compiler can be, and might already be, smart enough to take simple if statements into account. The reason it can't unroll this loop at compile time is that it doesn't know what `columns` is yet. Also, a compiler-unrolled loop would be a series of `columns.push` calls, which is still slower than an object literal. The foreach is just him being lazy (or, more optimistically, attempting to be clearer), because in the `Function` approach the loop is only run once, so it doesn't matter if it's slow.
We're talking about V8 in this case, so this is a JIT compiler that would know what `columns` is. Since we're dealing with database columns, we can safely assume that the function unrolling loop is happening at run time so it matters how fast it is.
[Code Academy](http://www.codeacademy.com) and [Khan Academy](http://www.khanacademy.org/cs/) have nice in-browser JavaScript courses. Works way better than books for my ADD-mangled brain :P
So this is like backbone.js w/o a mention of backbone.js on the front page?
Could you just use META refresh?
To be fair, it's not like backbone invented MVC, the pattern has been around since the 70s. There are only so many ways MVC can be implemented. Can't say I'm super keen on this implementation, the controller/view distinction, which is always so hard for developers to balance, seems extra confused here. Not sure about how I feel about inlining the template with the view either.. I suppose it depends on how you write the view, but seems hard to write code that can mock out the actual GUI with such a tight coupling. 
after a while, the system comes back in its original state, thats not very realistic 
The final release will have more features, such as jakewins says templates be allocated per file (ECO, EJB or similar) ... also model will have an endpoint for automatic REST.
It seems that the filename is just having the string 'file-' prepended to it. So something like var filename = 'foo'; localStorage.getItem('file-' + filename); would get the item with the actual filename **file-foo**
Can you just post the for loop not what your iterating over? 
You can use a for each kind of loop to get this done. I'll leave it to you to look up the DOM stuff, that should be fairly straightforward. //Create an array with arbitrary key-value pairs var a = []; a["b"] = 2; a["c"] = 3; a["d"] = 4; //spit out each "thing" in a for(thing in a){ console.log(thing) } //RESULT 2 3 4 So what I did here was to create an array with arbitrary key-value pairs, which is an associative array. It's basically an object that has array methods. Kinda neat. Then, I said "for each 'thing' in a, spit it out". What this does is crawl through the object (an array in this case), and find every data item/object inside it and assign it to 'thing' which can be used in the loop. Each time it hits a new data item, it sticks it in 'thing' and you can use it. You can't use a standard for loop that increments a counter to go through an associative array since the indexes are NOT 0,1,2...n like a normal array. They could be something random, and in his example, it sounds like they're movie ids or something equally dumb. Give it a try, it's early, I have no idea if that explanation made sense. *EDIT: Since I think this is interesting, you can also access key value pairs in an object by referencing it like an associative array. //create an object with some stuff var a = { b:1, c:2 }; //spit out the value of b in a console.log( a["b"] ); //result 1 EDIT2: While I understand that this isn't a "Help me with my hw" subreddit, I think that a discussion of Associative arrays and how to mess with them is not a bad topic to bring up every once in a while.
function init(array){ var title = new Array(); var year = new Array(); for (var i = 0; i &lt; data.movies.length; i++) { var x = data.movies[i]; title[i] = x.title; return title[i]; } } Sorry, I'm bad when it comes to help.
&gt; the for loop I was using would only grab the first one as well even though it was set to data.movies[i].title; Sounds like you weren't incrementing the i variable properly. You should have something like this: for(var i=0; i&lt;data.movies.length; i++) { // Do stuff } This isn't really the subreddit for homework help, but if you PM me the for loop I'll have a look and see if I can work out where you went wrong.
It's like an updated version of MySpace backgrounds!
Thanks that did help, I can pull what I need to that way. Now I think I've got how to get this to work.
you might want to check out /r/learnprogramming for JavaScript homework help. I help out there regularly and so do lots of people who know what they are doing. 
Nice, I didn't know that existed. Maybe I'll lurk around there and throw some knowledge. Thanks for the link!
http://jsfiddle.net/EJYNF/ -- it is a slow day at work today...
I think The Definitive Guide is great for a reference book, but I don't think it does a very good job of explaining to new people how to actually do things. Also, the MDN, as you pointed out is a good, free reference. I'm with you on The Good Parts. For new people, that book is just way over people's heads. Its better to get into The Good Parts after getting your fee wet a little. Learn the basic syntax, learn about how to do basic, practical things. The links that jwmoll posted (other than the Good Parts) are good as well as Code Academy that Thykka linked to
Not entirely sure what you're asking about without a code sample. The first clue that you're doing something horribly wrong, though, is that you say you have PHP copy-paste Javascript code for the four hardwired instances of the object you want to work on. You shouldn't have to do that. My best guess based on the behavior you're mentioning is that you're defining the data structure inside of the ``Todo`` function you mention above, and methods you attach to this function have access to it, but the next time you call ``Todo`` you're overwriting that data structure with the original form you had PHP copy-paste in for you. My advice: 1. Keep it "DRY" (Don't Repeat Yourself). You should only have to have one piece of code defined once in your Javascript. Fix that first. 2. It sounds like you need to learn about how Object-oriented programming works in Javascript -- it's nothing like C++, Python, Perl, PHP. It's based on a model called Prototypal Inheritance from the language "Self". You may be doing things that make sense for objects in PHP but don't work in Javascript. 3. If you do understand Javascript objects, but you're trying to avoid requiring the users of the library to write ``var myObj = new Obj()`` and then ``myObj.add_item('Buy food')``, you could borrow the pattern I use [here](https://github.com/dfellis/queue-flow/blob/master/lib/queue-flow.js#L39), specifically that first ``if`` conditional statement, where I check if the object with that name has already been created, and if so return that object, otherwise create the object, save it in an internal hash ("lookup-table"), and then return the object.
The assumption is that the dominating contribution to the gravitational potential is actually [dark matter](http://en.wikipedia.org/wiki/Dark_matter). So even if you have a single star, it feels the effect of the dark matter surrounding it.
Why do you say it's unrealistic? The potential isn't time-dependent, so in principal the macroscopic distribution will oscillate between various similar states. It is certainly unrealistic for other reasons though :)
Seems that optimization is extremely specific, which is the article's whole point! Thanks for clearing that up. 
Looks good. What kind of work would it involve? I'm looking for work at the moment.
Bare with me; the to-do list is just an simplified example of a much larger and more complex project. But its the JavaScript object state I'm having problems with. PHP is not "copy/wasting" code for me. I'm defining my object once. It looks something like this: var Todo = function(todo_list_id) { this.todo_list_id = todo_list_id; this.add_item(item) { // do ajax stuff with item and todo_list_id. }; // Check instance and return it or create new. if (this instanceof Todo) { return this.Todo; } else { return new Todo(todo_list_id); } }; ... and lies inside an todo.js-file. I'm using PHP to print the to-do lists. Some pages will have one list, others multiple. Each list is basically just a div with a table for the items - as table-rows. On each row I have a couple of buttons that does some action. For example removing an item that row will have a link with &lt;a href="#" onclick="Todo(todo_list_id).remove(item_id);"&gt;Remove item&lt;/a&gt;. So, as I wrote, the object is only outputted/defined once, but its state is reset between calls, but as expected not between chained calls. I wanted to do it this in this way, because I like the object way of doing things like shown above, over the functional onclick="todo_remove_item(todo_list_id, item_id);". This way I can have one function on the object that does ajax stuff and reuse it between calls. Does it make better sense? 
Stuff a ``console.log(this)`` as the first line of your Todo function. You'll see that it's the ``window`` object you get back, because you're not instantiating an actual object with the ``new`` keyword. That's why you're getting weird behavior. If you change ``var Todo = function(todo_list_id) {`` to ``var Todo = new function(todo_list_id) {`` you should avoid the weird behavior.
The example immediately above? It's the standard constructor function pattern in Javascript: function Constructor() { this.foo = 'foo'; this.bar = function bar() { return 'bar'; }; return this; } var instance = new Constructor(); I just noticed that weirdness with your return statement as well, you'll need to replace that whole `if-else` branch at the end with just `return this;` What I'm doing in my source code I linked to you is essentially the [Factory Pattern](http://en.wikipedia.org/wiki/Factory_method_pattern), though my implementation is just using a closure rather than a full factory-style object, because it's less code and Javascript makes it simple to do it that way.
I bet he'd reply to a PM with an e-mail address.
Could you provide an example?
Use jquery addClass() and removeClass(). On load have the first one have a class "shown" and the rest hidden by default. On a click remove the class "shown" from the old one and then add it to the new one.
0_0 I feel like I just gave a kindergartener a flamethrower. var Todo = (function() { // Make closure for items string var items; return function(todo_id) { // Make closure for todo_id and // return object that lets you add items var retObj = { add_item: function(item) { items += 'using ' + todo_id + ' add: ' + item + ', '; console.log(items); return retObj; } }; return retObj; }; }; That should do the same thing and be easier to comprehend. No explicit objects (since you don't want to use them the expected way), just closures.
http://jsfiddle.net/WRESq/3/ Have a look at this and let me know if you have any questions. I tried to keep it fairly straightforward.
I really did laugh out loud when I read your comment :) I don't know why you feel that way though. You yourself wrote I should be using "new Function" - which I ended up doing. So you didn't hand me a flamethrower - you basically forced it upon me. But you're right - yours are simpler. 
RCS. Chills. Right to the bone. Watch as I give old IBMers nostalgia: "C" "M" "V" "C" (It was a great integrated bug-tracking and version control system. Like all other IBM products it required a team of a dozen engineers full time to keep it working.)
I loved working for a company that had Jira + SVN + Jenkins integrated. Making a single push to SVN put my bug in review, launched to our staging server, and emailed the project manager letting them know it was available for review.
Ohman that inline editing is REALLY sexy.. Been using CKEditor on our CMS for a good two years now - it has it's quirks but I love the thing.
Or Perforce.
a lot of classes conflate the DOM with javascript. Learn what's part of the DOM's awfulness and what's JavaScript.
That's an extremely low bar.
Jira and Pivotal? Why both?
The inline editing feature is pretty nifty.
But one probably above vss that wonderful file share based system.
TypeScript supports generating the code for module loading, but doesn't include the actual libraries for this. Personally my question is what advantage does this have over requirejs
Exactly. This require-ts is just TypeScript definitions for require.js. But TypeScript already generates all the necessary code. You just need to include require.js. This library is completely useless.
Really? Are you sure it's not the module loading library like requirejs or something?
Oh...I'm not saying The Good Parts isn't helpful...I just found The Definitive Guide to be more helpful while learning. There are definitely some gems in The Good Parts, but I think The Definitive Guide lays a better foundation and covers more of JavaScript.
It takes five minutes to sign up and send OP a message, if your friend can't even be bothered to do that he may not be worth hiring. You can even delete your account afterwards.
A solution would be to wrap up your "nextable" divs in a parent and be specific in your CSS (and possibly in your script): http://jsfiddle.net/WRESq/6/
With Drupal at least, you can choose from a variety of editors, including earlier versions of CKEditor (I think, might be wrong).
Ah, sorry about that. [Here's the correct link](http://jsfiddle.net/c2ynp/1/).
My understanding is that require-ts will compile your TypeScript "on-the-fly", so the workflow will be different. Whereas with vanilla TypeScript, you have to compile then refresh your browser, with require-ts it will just always compile the .ts from scratch. This is obviously not good for a production environment, but for a dev environment it seems pretty awesome. (I worked on TypeScript, MS employee, etc.)
No worries, glad you got it fixed. I'm always burned by missing closing tags, too.
Thanks. Crockford's one apparently has wonderful review on amazon.
I second this...don't read The Good Parts until you already somewhat know and understand JavaScript...go for The Definitive Guide instead. If you already know C++ and Scheme, JavaScript shouldn't give you a lot of headaches, since it has some Lispy concepts buried in a C-family syntax. Another great and freely available resource is the [Mozilla Developer Network](https://developer.mozilla.org/en-US/). 
The standard is the fastest way to get high quality information quickly, if you can put up with it. Then, read the compatability tables at quirksmode.org to learn what is broken where. http://www.ecma-international.org/publications/standards/Ecma-262.htm http://www.quirksmode.org/compatibility.html
Web Essentials for VS will compile TypeScript to JS when you save.
definitely true. i'm thinking of taking a closer look at JS Patterns. Think it would be easier for me?
Heh, I do know what's svn, it was more like... WHY???!!!! It took me a year to get svn out of my office but we're finally 100% git and we have useful branches and everything.
I think Mozilla has a nice little intro that complies with those characteristics.
This is really cool! Just a heads-up for anyone else planning on using TypeScript with Express though, Microsoft has already bundled the [interface for all of the Express functions](http://typescript.codeplex.com/SourceControl/changeset/view/fe3bc0bfce1f#samples%2fimageboard%2fexpress.d.ts) in the source code of TypeScript: 
It's a long story, but Some people at our company like Jira better, some Pivotal (me included). Since us geeks use Eclipse anyway, it all looks the same in Mylyn :p
I disagree. If you already have a few years experience with other languages then The Good Parts is really a good book. For me JavaScript was the easiest language I've ever learned. Not because of the language, but because The Good Parts. 
&gt; Just a heads-up for anyone else planning on using TypeScript with Express though, Microsoft has already bundled the interface for all of the Express functions in the source code of TypeScript: See the `package.json` file in the same folder. It says `"express": "2.5.8"`. That file needs updating for Express 3.0.
kinky!
If you only have a text input (no submit button), you'll need a keypress event on the text input that checks for the enter key. If you're using jQuery, it will be something like this: if (e.keyCode == 13) { $(FORM SELECTOR).submit(); } **EDIT: The 'e' in e.keyCode is the jQuery event passed in.
If you wrap the input element in a form element, you will get this functionality for free. Then you can listen for the form's onsubmit event to intercept it. Form elements may require an action (action="#") for this to trigger. I don't recall.
Sorry for hijacking your thread, I'd been considering creating a similar one myself. If there are any JavaScript guru's out there (strong understanding of OO JavaScript, prototypal inheritance, asynchronous programming in JS, etc) in the St Louis area, I'd love to talk to you about a potential position with a large, well established company... toss me a PM if you're interested. Much like OP, I'm not a recruiter, I work on the team and we're having trouble finding qualified individuals elsewhere.
Thank you going to look into that right now!
For me, the proper order was skimming The Definitive Guide, reading through Javascript Patterns and then fairly enjoying The Good Parts. 
Thanks for reminding me of the Compatibility Master Table. IE = RED.
I've rewritten your test so that it can't take advantage of referencing existing strings already in memory for the "combined" string. This is the point of the array method... that you don't create a new string in memory until you need to... That said, the string concat method was still faster for me :) http://jsperf.com/reddit-array-join-vs-string-concatenation/2
Agree on everything but the return false. You don't actually want to return false, you want to preventDefault(). http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/
To put your excellent suggestion in context: $("form").submit(function(evt) { evt.preventDefault(); // abort the real submission // do something (ajax, etc) });
do you work for facebook or something? remember to remap shift-enter to enter for maximum usability.
Nifty
What's your opinion on eloquent javascript?
sweet! thanks
Yes that's because you already knew javascript. I've read both books and i can say that '*The Good parts*' is just giving you advice to write better javascript or remind you what you already knew + better coding practice. Imo the Definitive Guide will teach you what javascript is and The Good Parts will guide you through all that information.
I thought their site was broken and then I realized that it just shows a blank page without js loaded. I guess I should have realized with it being called desertJS, just would like it to be a little more considerate and give me a warning.
I'd have to say Minus points for not at least trying reddit (all kind of new stuff and we need to stay current), I'd also say Minus points for .Net eyuuuk (nothing personal). Addictive personality? You're not making too good a case for your friend there.
Not opposed to GIT, but who's got the time to migrate? You young kids and your speedy new software.. Don't make me pull this Internet over ;)
Doh!
Advertisers aren't going to misuse this. No way. 
In order to make a form submit when the enter key is pressed, you need to have an submit button, either a &lt;button&gt; tag (which has type="submit" by default) or an &lt;input type="submit"&gt;. If your visual design requires that there is no button, just make the button invisible. &lt;form action="submit.cgi"&gt; &lt;input type="text"&gt; &lt;button style="display: none;"&gt;&lt;/button&gt; &lt;form&gt; Avoid any JavaScript solutions posted in this thread, it's overkill to re-implement functionality basic HTML elements give you by default.
Could use NodeJS if you just want to write everything in JS.
Even if your powers can be removed pressing Esc?
If you do this I will scream and never visit your site again.
alert("Don't leave my site!!")
Using this to create a signature app for those funny clients who like absurd user validations might be slightly fucking fun, ya think?
I disagree, I think Javascript Patterns by Stefanov is one of the best books for JavaScript beginners (with other programming experience).
+1, though, theoretically, abuse should be impractical since browsers won't steal the cursor unless they're explicitly granted permission.
Finally we're going to get webGL games that are usable. 
&gt; you need to have an submit button, either a &lt;button&gt; tag (which has type="submit" by default) or an &lt;input type="submit"&gt;. You can also have an &lt;input type="hidden"&gt;. &gt; Avoid any JavaScript solutions posted in this thread, it's overkill to re-implement functionality basic HTML elements give you by default. ...
And this binds to whatever the native submit method is on the device. So you don't have to do anything special for a mobile device keyboard go button for instance. 
[✓] Prevent this page from creating additional dialogs.
It happens to the best of us, especially in our pet-projects. Doesn't mean whamsicore isn't a good programmer :) (I've seen his site before when he launched it and it's actually quite well made!)
Bah, I can't do full time work right now :-(
Don't like it. I was coming from PHP, so I had previous coding experience, and it was just horrifically slow and boring. I gave up fairly early on and taught myself the rest (I was on a boat, so had no Internet)
I agree. I was kind of expecting him to say that switch statements are evil and shouldn't be used, though. They don't fit with the syntax of the language, and they're fairly closely related to gotos. Still, I don't see the harm in using them if you make sure that you don't fuck it up.
Because it is too heavily opinionated. While I agree with some of it, I disagree with a lot of it, and wouldn't want a beginner reading it and not having the prior knowledge to be able to have an opinion on the stuff in there. Example: Crockford says that `i++` should never be used, as it reduces readability and maintainability. What? It *is* a great book, but I would recommend it for non-experienced JS developers.
JavaScript the Good Parts, JavaScript patterns, Maintanable JavaScript
I use [Dean Edwards' packer](http://dean.edwards.name/packer/) for quick and dirty compression/obfuscation. It also has [ports to other languages](http://dean.edwards.name/download/#packer) (.Net, PHP, etc) which can be useful for automating.
I've used Closure compiler, but found a few of its optimizations tricky to deal with when working with other developers (specifically automatically removing variables/functions not declared/referenced in the current scope). Between efficiency and easy-of-use, **YUI Compressor** gets my vote. It just works.
I know how they work and those diagrams weren't impossible to understand...but they were much harder to grok on first glance than a quick written description and a nice code example to hammer it home. I just think that there is a very good reason why every other programming language book I've read (including JavaScript: The Definitive Guide) uses this method of teaching syntax instead of railroad diagrams.
He recently shifted to Google - I suspect most of his work these days is actually working on his projects ...
And most people will click 'Ok' to get rid of the box that asks them for permission.
Problem is that by letting the iframe talk to the parent Window you are making it unsecure. It's why it's call "unsafeWindow" If you need to load an element on the page with remote content and need that element to talk to other things you might want to use something like jquery .load, or .ajax to load up a div element on the page, instead of trying to do it with an iframe.
You could try [window.postMessage](https://developer.mozilla.org/en-US/docs/DOM/window.postMessage).
 learn how to code in JS, a flexible but powerful programming language used all over the web. Some of the most popular Internet companies--Facebook and Twitter, for example--use JS extensively to add functionality to and enhance their websites. 
At then end of the day, I just want to get the programmers the tools that will make their Job easier. If git is it, then my personal preferences aren't relevant. My only issue is time spent in maintaining the tools. Admin overhead for 2 tools instead of one is a consideration. And installation, re-training and re-integrating tools like Eclipse, Jira, etc. make it a bigger than a breadbox project to move it. If there are some really "Oh wow" reasons to move to Git, then maybe the extra effort is justified to make the move, right now I'm taking the "If it ain't broke" approach.
I typed "Javascript" with double quotes as instructed... It says I got it wrong. Is it broken or did I get it wrong? http://i.imgur.com/OAy7P.jpg
hey even i use chrome and i am not finding this problem. Please try this link http://www.learnstreet.com/lessons/study/javascript
I used the YUI Compressor in the past and nowadays I usually use Uglify.
It can be so much simpler. var minify = require('jake-uglify').minify; task('default', ['LIB.min.js']); desc('Minifiy LIB.js source directory.'); minify({'lib.min.js': [ 'src/A.js', 'src/B.js', 'src/C.js', 'src/D.js' ]});
I think /r/node would appreciate this if you haven't posted it there already.
codeacademy.com It's very basic, but it really helped me understand more basic programming knowledge. Lot of good advice in this thread.
postMessage is the proper way to communicate between iframes on different domains. But then you need to have scripts on both sides, one sends the message and the other receives it. You can't just call any random JS function in the iframe that way.
0100 is 64 in octal. 0111 is 73 in octal. This is exactly why you *always*[1] pass a base (a.k.a. radix) into parseInt, e.g. parseInt("0100", 10). Otherwise you end up with rubbish and don't know why. [1] Unless you really want to parse octal and hex integers. Which is almost never.
I use the Microsoft.Ajax.Utilities.Minifier at work, but that's mostly because the application is already built on a .NET stack.
Definitely Closure Compiler. I like the type annotations, but I believe a lot of people try to make them too specific. It's pretty easy and still very useful to say that a parameter should be a function rather than specifying the function with all it's inputs and return type. Of course the larger the project and team then the stricter it should be, but when starting out you shouldn't have to worry about it - you just put in types as needed. Closure is a lot easier to get started than some people think - unfortunately most tutorials throw a lot of information at you and it can be overwhelming. check out the meetup: http://www.meetup.com/Closure-Tools/ There is going to be a presentation about getting started with a couple of libraries that should keep you in familiar ground while introducing some things specific to Closure (I'm also giving this talk at HTML5devconf). I also have a blog at http://rhysbrettbowen.com that might help a bit
I've used Closure compiler before but have gotten into trouble with their advanced mode, I think it was (you can break your code). You really only need that if you're hyper-optimizing. For the most part, I doubt most people really need to be doing that. I found YUI Compressor much easier and the savings difference between YUI/Closure have been negligible. Play around with each of them, see which works best for you.
Just to expand on what others have already written, 1111 is interpreted as a normal decimal number while 0111 is interpreted as an octal (base-8) number because of the leading zero. Octal 0111 is 73 in base-10, and 1111-73 is 1038, which is the result you are getting.
Any reason you don't use the convention of +var to cast to int?
great answer - thanks lazyduke.
It's always annoyed me that parseInt doesn't default to base 10. I have never seen anyone pass in anything other than that to the second parameter.
Reddit URLs use base-36 numbers. From this thread, for instance &gt; www.reddit.com/r/javascript/comments/*11d9ya*/can_someone_please_explain_this_behaviour_1111/
TIL those url's are base36 and not some weird hashing scheme.
It just looks weird to me :) "The number is"+ +someString vs "The number is"+ someString*1
The majority of end users are just looking for the "make it go" button. They don't care if it's labelled "Allow," "Ok," "Continue," or "Next."
Here's a debugging tip for chasing down questions like this. Each of the test cases had three pieces to it: two numbers and an arithmetic operator. With three things going on, it's hard to tell which one is causing this behavior. Is there something special about subtraction in JavaScript? Or something going on with those numbers? Which number? So break it up and test those things individually. Try each of the numbers from those tests by itself: &gt;&gt;&gt; 1111 1111 &gt;&gt;&gt; 1011 1011 &gt;&gt;&gt; 1101 1101 &gt;&gt;&gt; 0011 9 &gt;&gt;&gt; 0001 1 &gt;&gt;&gt; 0100 64 Now isn't that odd? Some of the numbers work as expected, but some don't. We've already narrowed it down: it must be something about the numbers themselves, not the minus sign. What's different about the numbers? Well, these worked as we expected: 1111 1011 1101 and these didn't: 0111 0011 0001 0100 Aha! Some begin with a zero and some don't. The ones that begin with a zero are weird. So let's try again, using only the strange numbers, and put them in sorted order to see if we can spot a pattern. We'll add a few more to fill in the gaps too: &gt;&gt;&gt; 0001 1 &gt;&gt;&gt; 0010 8 &gt;&gt;&gt; 0011 9 &gt;&gt;&gt; 0100 64 &gt;&gt;&gt; 0101 65 &gt;&gt;&gt; 0110 72 &gt;&gt;&gt; 0111 73 Hmm... Maybe if we leave out a few: &gt;&gt;&gt; 0001 1 &gt;&gt;&gt; 0010 8 &gt;&gt;&gt; 0100 64 Now we're getting pretty close to figuring this out. Of course you already do know the answer thanks to the other helpful responders; I just wanted to share a simple tip to help track down and understand questions like this.
Packer is only interesting if you can't use gzip. Compared to minified + gzipped code, "packer'd" files are bigger and they also require more resources during decompression.
Woah. Always wondered about that.. 
Thanks for the tip, time to give Closure another try!
Bingo, thanks for answering this when I wasn't around to. :-) Great work on TypeScript seriously a brilliant piece of work. Merrick - @iammerrick
Octal. Look it up.
You wouldn't, most likely. It was just an example of how sometimes you might encounter encoded values. If you were using a language that had integer types, which JavaScript does not, and you wanted to store a large number of post/comment IDs, then you would want to convert them from a string representation to an integer representation. Six base36 characters represents slightly more than 31 bits of storage, so they fit nicely in a 32 bit unsigned integer. If the string representation takes 7 bytes (as in C which uses null-terminated byte strings) then that will add up to significant savings. In fact, in many languages such a string would take a lot more than 7 bytes, because they store a length and because they use something like UCS-2 or UTF-16 internally, so they would likely be at least 16 bytes, at which point the savings compared to a 4 byte integer would be enormous. Even JS with its 8 byte IEEE doubles would see significant savings.
Enjoy! Check https://developers.google.com/closure/compiler/docs/api-tutorial3 . Great info there. The first paragraph serves as a great TLDR for the rest of the page.
I was just trying to point out a legitimate case for the use of different base numbers than 8, 10 and 16. Base 36 is very handy, because it's a readable and compact representation of the int types in a database: It's short and there is no case sensitivity issues (Hello, YouTube and Goo.gl, I'm looking at you). As for why parseInt doesn't default to base 10: It's that way because it's always been that way. The language (and the DOM APIs for that matter) have plenty of mistakes, and after 17 years of this language, you can't just go ahead and change it, as it will break stuff.
[They're fixing that in ES5.](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/parseInt#ECMAScript_5_Removes_Octal_Interpretation) &gt; If radix is undefined or 0, it is assumed to be 10 except when the number begins with the character pairs 0x or 0X, in which case a radix of 16 is assumed. If radix is 16, number may also optionally begin with the character pairs 0x or 0X.
The following will work for all dimensions. function (){ this.forEach(function(v,i,a){ if (v.log &amp;&amp; v.length) v.log(); else console.log(v); }); }
Sorry, here it is formatted: Array.prototype.log = function(){ this.forEach(function(v,i,a){ if (v.log &amp;&amp; v.length) v.log(); else console.log(v); }); }; a.log(); // Based on the array created in earlier example here.
 var flatArr = a.reduce(function(prev,curr,i,Arr){ return prev.concat(curr); });
If you write your code with it in mind, then Closure Compiler with advanced optimizations is the way to go. If you don't have this luxury, you might be luck enough that your code works with closure's simple optimizations. Unfortunately, I'm in the position where I'm working with a codebase that was optimised prior to minification, and as such requires a full rewrite for closure to stop mangling it, so I'm currently stuck with YUI compressor. It's not bad, it's just never produced results as good as Google's for me. It's also worth noting that Closure compiler assumes that your code will be delivered gzipped, and optimises it with that in mind, e.g. by not remapping `this` to a local variable. If for some reason your code won't be gzipped, it may not be optimal.
+1 for Stefanov's book! Definitely the best of the 7 JS books that I own (almost all of which are from O'Reilly). Crockford's book has some good stuff but yeah anyone who thinks using incrementers (i++) is too complicated for humans kind of loses me. I was very disappointed in Resig's book, which made such a low impression on me that I forgot the title. 'The Definitive Guide' is horrible, IMHO.
Not just questions like this, any question. This is debugging in a nutshell. You have parts, you've put the parts together in such a way that you presume them to produce a certain result. They do not produce the expected result. Start at the top and narrow down where the problem is by recognizing and testing each assumption you've made. In questions like this, it can be as fundamental as the assumption that a number is actually what you think it is. Reiterating what you said, essentially: "1111-0111" = **expected 1000, actual 1038** So what are our assumptions? * 1111 is an integer of value positive one thousand, one hundred eleven. * 0111 is an integer of value one hundred eleven. * The subtraction operator returns the remainder after the second number is removed from the first. We can tell at a glance (or confirm with a calculator) that if our assumptions hold true, then this should return 1000. But it returns 1038, so one of our assumptions is incorrect. Test those assumptions: &gt; console.log(1111); 1111 &gt; console.log(0111); 73 &gt; console.log(5-3) 2 The failed assumption becomes quickly apparent. No matter how big the statement or how large the process. You have an idea in your head what each is supposed to be doing, and by the way you've placed them together you expect a certain result. If you don't get that result, test each piece. Find the failed assumption. If that still leaves too big of a place for the problem to hide, break that part down too. Find the failed assumption. Continue until you've found the root cause. Debugging is recognizing assumptions and chasing down failed ones.
Using Yeoman for a new project. It's pretty awesome.
It's because JavaScript.
Has anyone registered? Will there be only 5 people there?
LOL. As a bash script: #!/bin/bash cat file1.js file2.js file3.js file4.js | uglifyjs -o files.min.js or as a Windows batch file type file1.js file2.js file2.js file4.js &gt; uglifyjs -o files.min.js http://stackoverflow.com/questions/8812621/minify-multiple-files-with-uglifyjs
Again, some number. I'm not sure about most. But, honestly, that doesn't concern me. The current implementation is short, clear, and requires attention before giving permission. I say it's a job well done. And while there are certainly people who still won't read it, that will always be true. There are also people who refuse to read maps and get lost all the time. That's their choice, and their fault.
There's always Number(someString). It's clear and looks fine.
Strict mode ftw. Literal numbers are no longer parsed as octal either. Decimal and hex only.
I see. Thanks. 
Also, learn jquery.
First, it appears MD5 is standard, so I have my answer. Stackoverflow came back up. Second, speed is a concern. Also, I plan to run the javascript function on a nodejs server, so the user won't have access to the encryption algorithm. I can salt, etc, as I need to in order to provide adequate security without going through a lot of hassle.
Just to get your terminology straight, MD5 is *not* encrypting but hashing. When you encrypt something you can go back to the source, with hashing you cannot.
That is a valid point and I stand corrected. Encrypting or Hashing would both meet my needs.
&gt;JavaScript runs on the client Not a true statement anymore given the popularity of Node.
I have a degree in mechanical engineering. As I said in my original post, I do not need any speeches on security concerns. Since nobody believes me on this statement, and I continue to get orange letters, I will reply here to satisfy the inner crypto nerd in everyone. I have a socket.io app that utilizes the room key feature. A host can create a room, users can join, and users can leave. To prevent a host from creating a room and having someone hijack it, I have decided to force users to also provide a hash of the room key. The hash is generated in php, and is confirmed again server side on my nodejs server. **The users will never get to see the hash algorithm.** Thus, it would require someone to reverse engineer the hash of the room key in order to gain control of the room. If they are capable of doing this, so be it. The only way to totally secure a room would require that I set up a database to track room id's and a password, and I don't want to do that. This isn't going to be used to guard your credit card information or bank data, its being used to secure a chat room. 
MD5 + Salt does not equal secure, read this http://throwingfire.com/storing-passwords-securely/?r#notpasswordhashes
MD5 and SHA-* should never be used for encryption even with a salt.
Those are the exact two books i'm reading right now. I'm confident that when I push through them I'll come out much more fluent in JS.
OP called md5 an encryption.
No they won't. Define what your needs are and then pick the right solution. If you want to make something that is reversible then Hashing is *not* an option. If you want to make something that is not reversible - such as storing passwords - then Encryption is a bad choice...
Or Netscape's Enterprise Server with Livewire server side javascript in 1997.
I know I did! 
Try http://www.jcryption.org/. It is Jquery plugin that works with PHP. 
ES5 has formal getter and setter functions, [you can read up on them here](http://killdream.github.com/blog/2011/10/understanding-javascript-oop/), but those are still very new constructs of the language. I'm sure people developing in Node or other isolated JS environments, or writing code for personal/internal projects without a broad user base can use them freely, but writing a library for broad use that depends on even the simplest assumptions of modern JS can be trouble. I'm still avoiding "forEach" and using Underscore.js as a shim for features like that. D3.js is a gorgeous library, but it dies in IE8 because of forEach (its' not the only thing in d3 that chokes in IE8, but it's the first thing you'll see in the console). I haven't really been convinced that working hard to make object members private is worthwhile. I know it makes code less breakable, but it's also harder to debug. I work under the general assumption that JS is not a secure, sandboxed environment, and everything is entirely manipulable by any skilled developer. If somebody goes mucking with internal members of objects they don't understand or are not instructed to use, they should expect unwanted side effects. That doesn't mean "screw the other guy" it just means that if you intend your code to be used, make it usable with a decent API, and if you intend to bypass that contract and use code in a way that it was not intended, you should be clever enough to hack it. I also think that if you want your code to be very secure and impossible to break, javascript is not the best tool for the job. For those reasons, I might as well make my code easier to maintain than pretend obfuscation gains me something. I only really write getX/setX functions when there are side effects to a value being retrieved or being changed. I don't make a special effort to physically hide the private member. I may follow the common practice of prefixing the private member with an underscore, which is a nice warning to pokey people, but I won't go through the trouble of making a closure to obfuscate it. I tend to use set() methods when I'm working with values that may change one or more computed values, when validation is important or when behaviors should trigger on changes. I use get() values when the result is computed on the fly. Some traditional use cases for getters are best handled by callbacks, so I tend not to use them very often, since I've always thought that, in general, get() is expected to immediately return the value.
I love this kind of pragmatic response. Kudos to you, sir. I get really tired of seeing people do things just for the sake of it, or because they think "that's the way it should be done", or they saw someone else do it once, etc.
I believe it's because when you do var contenttext = document.getElementById('content').innerHTML you get the value of innerHTML, not a pointer to it. If you do something like var myElement = document.getElementById('content'); then function changecontent() { myElement.innerHTML = 'foo'; } It will probably work better for you :)
If you're just looking for prettier code for updating innerHTML, check out jquery. $('#content').html('foo');
I totally agree with your sentiment that magic getters and setters is broken as hell. At best they can be used as a hack if you need to maintain backwards compatibility for some reason, but even then they are just making up for you exposing module internals in the first place. But on the subject of module internals, I don't understand your "private anything can suck it". When you claim that an established best practice, in this case encapsulation, should be thrown out the window, and don't provide a rationale for it, it makes it very much seem like you yourself don't understand the practice or why it is used. Can you explain why you think language enforced encapsulation can "suck it"?
HTTPS, SSL.
Wat? Please, what is the purpose of this? Are you using a hash of the user input as a filename, a la github commit hashes?
In my experience private/public modifiers have been pointless overhead that no one really uses except when they say to themselves, shit I need this method, and change it from private back to public. And then of course when it's out the door developers also need the private methods as well and have to use reflection to access them. I see it all the time. A better way to have things private would be to have suggested interfaces to your objects or even prefixing things with an _ to note that it's something that should just be used internally. The thing is no one ever has enough forsight to make the case that anything 'should' only be used internally forever. Which leaves public/private settings as being more annoying that providing any real value. Encapsulation in javascript is one thing I'm cool with, I was raging over the 'correct code' without knowing why, not the encapsulation argument. Though if he thinks encapsulating everything, like every variable with a get/set, is 'correct code' then I'll start raging again. Javascript definitely needs classes, just to fix the common 'this' error everyone has.. which isn't too bad if you always use a var self = this; at the beginning of your objects, but not everyone knows that so it's something that definitely needs to be fixed on the language level.
Note that when using "use strict"; in a closure, this refers to undefined in both environments.
 (function(){console.log(typeof module !== 'undefined' &amp;&amp; (function(){ return this || (1,eval)('this') }()).module !== module);})() This would be the final code then, right? I tested it a bit and it seems to work.
Yes! Thanks for taking a look. I think after I ran a caching plug-in, the plugin started to speed up. Here is the source: [code](http://pastebin.com/XQrbFJpz)
The only thing about Javascript I knew before I start reading that book was how to show alert buttons. The book doesn't show you how to program, it shows you how to program well in Javascript. If you can already write decent programs in any other language you don't need a book which teaches you the same things you already knew from other languages. I liked The Good Parts because it only focuses on Javascript things, not general programming.
I admin, the railroad diagrams were horrible. I don't think you need experience with Javascript before you read that book, but just with programming in general. The Good Parts focuses on Javascript, not on programming, and that's exactly why I like it. Every time I want to learn a new language I first have to read through general programming stuff, shown in a different language. The Good Parts simply skips that part and starts with the interesting parts, that's what I like most about that book. But you're right, it's a little outdated now. Nonetheless I still think it's a great book for an experienced programmer to get started with Javascript very quickly.
Thanks for your answers. Decided to go for postMessage. Tried a lot of different techniques but it seems to be the best.
Will anybody even be writing normal JavaScript in ten years?
repost.
Anyone mind breaking down what the point of this is? Seems to me it's just a another sub language that is written in, parsed by, and compiled into javascript. What's cool about it? You can do "npm install"? 
I guess it's about trying to replicate some of the Lisp macro functionality. Basically you can define your own syntax. 
Are people still writing in vanilla php?
Yes, everyone
There's a real benefit alright - where in our own code we can use a method instead of a field from the start, if we're importing (or hacking) objects or prototypes from a library we can use getters/setters to modify behaviour without breaking everything and without adding more indirection (that won't have the same interface)
JavaScript is a higher level language than C so I image not.
[This post](http://www.gamefromscratch.com/post/2012/10/14/The-near-future-of-the-JavaScript-language.aspx) looks at the various languages looking to *fix* JavaScript's flaws as you scale the language up. In the ring are the elder statesman CoffeeScript, Google's Dart and Microsoft's newly announced TypeScript. Other alternatives are mentioned, languages that compile down to JavaScript such as Haxe and GWT. Do you use any of these languages or intend to use any of them, or do you think JavaScript is fine as it is ( or at least, fine with 3rd party libraries like Backbone, jQuery, YUI, dojo, etc... )? Any other major players that are looking to improve on/replace JavaScript that are missing from the list?
Thanks for taking the time - I'll have a look tomorrow. In the meantime, feel free to submit a pull request if you have the time. Thanks!
Mayyyybe. I figure we'll either be writing in a beautiful syntax that produces JavaScript as a sort of bytecode, or we'll be writing in es~7. What I am certain if is it won't be JavaScript as we know it today. 
Oh great, another set of syntactic sugar. Seriously, why do we have so many of these? In the end it all turns to JavaScript (which is not a horrible complex language to read like assembly) and at this rate interviewers are going to have to ask for a specific flavor of JavaScript developer. "Oh, you write in Sweet.js? Sorry, we're looking for CoffeeScript." This is creating an ever widening gap between web developers and isn't addressing the real problem of "is JavaScript, in it's current state, the best language for the web?" Should it be re-designed or extended? More importantly, how can we make it faster? At this rate no one will ever know because we're just making more and more dialects of the same language. It's like when Street Fighter 2 hit arcades in the 90's. Soon after, the marketplace was incredibly over-saturated with fighting games who were trying to "do Street Fighter better." And all we got out of this was a whole lot of fighting games that went largely unplayed and many players who couldn't play well together because their friends didn't play their particular flavor of Street Fighter. All of these syntactic modifiers are building a proverbial Tower of Babel in which we're trying to reach the very gods of web development but will inevitably end up with a whole lot of people unable to even speak the same language.
Not sure what all of the hate is about JavaScript: The Good Parts. When did "opinionated" become such a negative thing? It's not as if Crockford's opinions are without reason. Perhaps he is more strict in his style recommendations than most, but someone with experience can decide that for themselves. The crux of his argument is that you should only use a subset of JavaScript features. Anyone that adheres to any sort of style guide must agree with this on some level. To completely dismiss the book because he recommends avoiding pre and postscript operators is silly.
no, no one.
I would be surprised and disappointed if JavaScript didn't evolve dramatically in ten years. It is, after all, among the most popular languages in the world, available on pretty much all platforms, and being used for damned near everything. It's also an extremely powerful and flexible language which can be changed with itself (similar to Scheme or Lisp, which this project demonstrates, by introducing hygienic macros the JavaScript). This is a good thing.
I use [Blade](https://github.com/vannatech/blade) and I love it. It compiles c# to JS but doesn't try to hide the JS part, just brings in the familiar constructs.
I think JavaScript is fine and I will not throw in with a language that claims to be an improvement unless support for it is ubiquitous. I've fallen in love with Node on the server side and have had very few issues organizing with modules. Likewise, Underscore, Backbone, and Require have breathed new life into how I work on the client side and have given me easy access to the features I've always wanted. Granted, the projects I work on are not the biggest endeavors, but I still have a hard time understanding why people say JavaScript isn't scalable. I see the alternatives popping up as outs for programmers uneasy with prototypal inheritance, and vendors unwilling to put in the effort to move ECMAscript forward. Out of all of them I think HaXe is the most interesting. Why settle for compiling to JavaScript or yet another VM when you can use HaXe and compile for virtually anywhere. The fact that all these alternatives compile back to good ol' JavaScript is a testament to just how flexible and powerful the language is. In the end I think (hope anyway) everyone will come back to the ECMAscript table with the results from their science experiments and hammer out a killer standard. 
A nice thing about Sweet.js is that it's more abstract; it's just macros. It's not "another set of syntactic sugar", it's *a way to create sugar*. You could possibly implement CoffeeScript in it. Idealistically, it could act to unify "alternative syntaxes". I think experimentation is a healthy thing but I wouldn't use anything like this in production code. And since it'd be foolish right now to specialize in any of the languages which compile to JavaScript without understanding JavaScript itself, at least our Tower of Babel still shares a common tongue.
Hopefully not. 
True! I guess the one benefit of the code I wrote is the ability to use this.super.ParentClass(); (which I guess you could do with ParentClass.prototype.originalMethod.apply(this,arguments), but eh.)
I concur, we are developing a large application with JavaScript, and a lot of the limitations of developing with it have largely been removed with the various JS frameworks available. Using Backbone, Require and jQuery leaves us with a nicely structured MVC project which is nice to maintain and compiles and runs fast. The only part of the web which pre-processors are great is for CSS (SASS/LESS) in my opinion....
Are people currently writing "normal JavaScript"? And what defines "normal JavaScript"? If you look at what people use today, e.g. JQuery, then it looks different than JS a while ago. Languages change and progress. A macro feature might end up in ES7 (Eich said something like this in his recent talk).
&gt; when you click the upvote arrow &lt;div class="arrow up"&gt;&lt;/div&gt; changes to &lt;div class="arrow upmod"&gt;&lt;/div&gt;. And that is about all I understand. That's only the output, to give the user visual feedback that the arrow has been clicked. You want to go looking for the javascript onclick event handler that gets fired when the user clicks an arrow - I know nothing about RES or the Reddit Playlister, but it'll almost certainly make an XMLHTTPRequest behind the scenes to actually post your vote off to the server. However, rather than hooking the JS onclick event handler directly (which is also probably dynamically added to the arrow element, and hence will be a mammoth PITA to find and understand), you might want to try instead just grabbing a reference to the arrow element and programmatically calling [its "click" method](https://developer.mozilla.org/en-US/docs/DOM/element.click). This is basically just the progammatic equivalent of the user actually clicking on the button, so it should work exactly the same (and more robustly than copying the onclick handler code yourself) as the user physically clicking the upvote/downvote arrows themselves.
Maybe so but it still means I would have to learn how to read/write it well in order to make sense of the other persons code. If this became a large part of a code base then I couldn't just look at the other guys' JS to work on the project, I'd have to modify their Sugar.js files. More importantly, nothing is perfect so at a glance their Sugar.js files may look just fine but it's not compiling into the expected result due to some strange corner case. I know you said you wouldn't use it in production code but what if other places did? I love to see experimentation in JavaScript, especially since it lends itself so well to it, but it really just seems like we started our way down a slippery slope and this is one more push towards terminal velocity.
&gt; Most of the people who say they know JavaScript really mean that they've used jQuery before. This is completely true. It's also a lot of the people that say they "understand JavaScript" and find it to be "broken". I really, really, hate that people think they need TypeScript to create "classes". Just learn the language (JavaScript).
[AngularJS](http://angularjs.org)! I want to shout it from the mountaintops... It's a fanastic framework and has made mountains of difference in developing large JS applications for me. It's all about dependency injection, two way binding, routing, REST apis, reusable controls, seperation of concerns I could go on and on... The learning curve is steep, but short.
[AngularJS](http://angularjs.org)... as I've mentioned elsewhere is a phenomenal framework. It does everything that Backbone and Knockout does and then some. It supports fantastic amounts of dependency injection and is highly testable. It also alleviates a lot of the "callback hell" most frameworks get you in.
I may be in the minority, but I don't think javascript is broken. I use coffeescript as a way to write JS faster, but I also don't use the CS "class" notation for objects, instead opting for their prototype support. It lets me write regular JS that's easier for me to read. It's a personal preference, really. I don't want JS to "go away" or be replaced by one of these languages, though.
The OP: &gt; I have an irrational hatred of whitespace languages Guido: &gt; I have an irrational hatred of every program mixing n+1 indentation styles, where n is the number of programmers on the team
&gt; The learning curve is steep, but short. Short because the complexity would drive you to consider other, easier, faster-to-bootstrap frameworks.
I use Google Closure Compiler with advanced compilation for a new project. While coding, I really have to keep GCC in mind, mainly by adding annotations and by quoting certain object keys, to prevent missing references because one thing was renamed and another thing wasn't. When you consistently do this, GCC is a great help for debugging and it also minifies well! I cannot use GCC for older projects. I would have to rewrite and adjust too much code to make it work properly. Also, I don't like GCC in combination with lots of external libraries or with handling Json objects. 
Where can I find documentation on useTypesForOptimization? A search in the Google Code Wiki pages and in the source code didn't give me any results.
Well, now it's just becoming a matter of semantics. For example, with C++11, it's not like C++03 is suddenly going to go away, but it will be supplanted. The same will happen with JavaScript. A number of people and a number of frameworks are all trying to solve the exact same problems, problems coincidentally ES4 attempted to solve. It will happen in one form or another, and I believe it will happen soon. The rise of JavaScript on the server ( in the form of Node ), on the desktop in the form of Metro ( or that Ubuntu or even Mozilla desktop web app projects ) or even just as the result of people building more complex desktop and mobile HTML5 applications. Languages don't exist in a vacuum, and JavaScript is no exception. JavaScript is being called on to do things it was never design to do and as such, it's limitations are being exposed. OF course, there are work-arounds ( backbone, underscore, require, etc... ), but at the end of the day, most of these problems should be addressed at the language level. For example, Javascript needs a standard module system, and it is going to get one in one form or another... such as the [proposed system](http://wiki.ecmascript.org/doku.php?id=harmony:modules) in Harmony(ES6).
Author of Socket.io http://www.amazon.com/dp/1119962595 and http://www.amazon.com/Node-Running-Scalable-Server-Side-JavaScript/dp/1449398588/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1350322196&amp;sr=1-1&amp;keywords=node+up+and+running
&gt; at this rate interviewers are going to have to ask for a specific &gt; flavor of JavaScript developer. "Oh, you write in Sweet.js? &gt; Sorry, we're looking for CoffeeScript. Or they could try hiring good programmers who can adjust to minor variations in syntax... 
You're the exception, believe me.
That comment hack is very old and completely irrelevant now. When was your textbook published?
&lt;!doctyle html&gt; 
I haven't seen that book in years. And I was happy about it, too!
No, Dart does not try to fix JavaScript. It provides an alternative to JavaScript. Just like Pyjamas (a Python to JavaScript compiler) does not try to fix JavaScript. @Serapth Your editorialized headline sucks. @author &gt;I checked out Dart shortly after it was released, then again 6 months later Dart is over a year old by now. It works perfectly fine on Windows.
I like the idea, and it places the images in the blob, but it's very inefficient about image placement, leaving huge swaths of canvas unused even when images can fit side-by-side. The CSS generation doesn't seem to do anything at all. Dragging the image into the CSS box fills out a base64 cdata section, which is extremely inefficient. Also, "Dash Sepeated" -&gt; "Dash Separated" 
It was published 2011, but I'm a little suspicious that it's just a poor revision of a much older text... It's a CIW textbook from these guys: http://www.ciwcertified.com I'm not doing their certification but our university (or at least this class) seems to utilize their materials for teaching. Kind of on the fence about it. EDIT: clarity
http://knockoutjs.com/ is my personal favorite.
Nothing really, but there's no reason why you shouldn't be using HTML5 these days. The older browsers will still render most things just fine.
KO is a great framework, but Angular does everything that KO does, plus everything that Backbone does, plus everything revolves around DI, so it's a lot more testable. 
I personally and at work use the &lt;!doctype html&gt;, but this textbook does the older: &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt; So yeah. I'm hoping that my professor utilizes today's best practices and doesn't choose this text by choice. This class appears to be using the CIW for course materials, but I am hoping there aren't too much old-school methods in it.
Look I'm not smart enough to argue with anyone in this thread, but I do keep seeing this static typed argument thrown around. It just feels like a restaurant owner is complaining his knives are too sharp because his chefs are cutting themselves. But seriously; I'm sure the guys on the nodeup podcast had a good chat about this stuff it seemed to have some interesting points. 
...and i only use Netscape 4 when my IE6 is messing up.
Looks awesome. Maybe an option for horizontally aligned and also encoding the sprite to base64 would make this amazing for my job.
Heh. They offer certification to become a "Perl Specialist." That's cute.
I didn't mean that I can type out code at the same rate as English but that I never have to question the syntax. If I can conceptually conceive how to handle a particular problem then I can mash out the code just as quickly as I can type it. Even still, I still think that all of these variants are further fracturing an already fractured language/community and detracting from the inherent problems currently in JavaScript. It's clear that you don't see this as a problem because, as I understand it, you view it as if we're all speaking the same language but with different accents. It still comes out the same but you might need to make some small adjustments on your part to get the full message. I see it as we're creating an environment where everyone speaks in their own set of acronyms so we have to constantly translate them and make sure we aren't translating from the wrong set of acronyms when they could have just said what they meant in the first place. We also have to consider people who are new to programming. You and I are familiar enough with programming to where picking up a new language really isn't that big of a deal. But what about all of the new people? With the world moving more and more in to the web and frameworks making it that much easier to just make something work, we're getting a lot more web-developer-by-night types who don't have the time nor interest in learning a lot of languages. As long as they can get the result they want in the browser then it doesn't matter. So all of these newer programmers will get conflicting opinions on which sugar to use and if they start with the sugar then they'll never learn true JavaScript. Just look at all of the people who think jQuery == JavaScript. I know this sounds like a similar argument for Assembly over C but JavaScript isn't nearly as difficult to comprehend as Assembly nor is it powerful enough yet to justify injecting another layer between itself and the native code.
-- i did not know that. weren't you actually supposed to do something like &lt;!--[CDATA]// Or something.
It forces a lot of XML correctness which just isn't needed, and in some cases, and actually make code far worse to read. I wrote my PHD proposal in HTML5, partly because it's just a CSS link at the top, and then a list of &lt;h2&gt;, &lt;h3&gt; and &lt;p&gt; tags for the main content. No &lt;html&gt;, &lt;body&gt;, &lt;head&gt;, and the tabbing that comes with it, and the bloat at the top. This makes it look a lot more like a plain text document, which just happens to be well styled when viewed in a browser. I didn't even close the paragraphs, because you don't need to with HTML, and so it looks a little cleaner. Also makes it a tad more trivial to break a paragraph into two, or combine them.
http://stackoverflow.com/a/66865/561731
[Article](http://hixie.ch/advocacy/xhtml) by Ian Hickson, a web standards advocate, from eons ago about why you shouldn't use the XHTML doctype (specifically why you shouldn't serve XHTML as text/html).
&gt; Eventually they will get to a programming language and none of those will let em get away with the shit html lets you. How about (lordie, why did they think it was a good idea) automatic semicolon insertion in JavaScript?
Aah I see. I did know that no one really serves content as application/XML and xhtml is kind of a lie/failed promise. Cheers Boss.
[This changed my opinion on it](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding) and I just don't use semicolons now because I'd kind of like to learn from it biting me. 
&lt;script /&gt; used to get me though.
If you write a language that fixes Javascript in Javascript, then there's something going horribly wrong.
I see what you're saying but it's not like I'm advocating bringing everyone down in favor of equality. I'm saying that we need to bring up the mean tool set before building over it. If you needed a hammer you wouldn't attach the head of the hammer when you only have a twig to carry it on.
Self closing tags are still valid HTML5, so you can use them if you want.
Apple's **Cloud** based system brings the latest **XHTML5** technologies to give you an experience that **just works**. Apple.
FYI, CoffeeScript is written in CoffeeScript. It's [self-hosting](https://en.wikipedia.org/wiki/Self-hosting), which is an interesting subject of programming discussion in its own right.
prehistoric
Ah, the "[goes to](http://stackoverflow.com/questions/1642028/what-is-the-name-of-this-operator)" operator.
If you use Aptana, you can create a project and run it right away. It'll run on an internal server (your own computer) so you don't have to worry about picking up a host until you have a good start. With hosting so cheap though, why not? If you really don't want to take the plunge just yet, try checking out Microsoft Azure. Lots of MS Haters on here, so I might get downvoted into oblivion, but it's got a 90 day trial, GIT support so you can learn how to deploy/rollback, and supports Node.JS so you can expand your javascript-fu into the server side as well. 
thanks for the insight. I'll check out Aptana. First thing's first.
Unless your school and/or textbook is truly exceptional, the professors and writers are in the education industry and not in the web development industry. Not only does this mean they are typically no longer aware of the cutting edge, it means their idea of standards is often horribly outdated. I'm of the mind that unless you're going to a school that is renowned for their programming classes, you're better off dropping out of school, learning it on your own, and finding your first job. Getting a job is made much easier by doing some freelancing, so I hope you've already started that. If not, make a couple of awesome websites to show off if nothing else. Everyone I've ever met or interviewed for jobs who went to a university for programming and actually was a knowledgeable and skilled programmer did all this stuff on their own and then jumped through the hoops in class. Those who just did what their professors/books guided them through, straight out of college, I wouldn't trust anywhere near a professional website.
Good - strict coding is still a nice way to go, and HTML5 don't shit all over that idea in any way. It's worth stating that closing your tags is not wrong in HTML5.
&gt; prehistoric Works great in IE 3.
Yeah, just tell him that standard is from 1999 and you're not going to use it
Could be someone's shorthand to refer to the XHTML syntax of HTML5. Could also be someone who has no idea what they're talking about, too.
...*clever URL*...
There is nothing wrong with using and learning jQuery. It can be a fine start. But it uses JavaScript, it is not JavaScript. You should know also know things like primitive types, how to convert between them, the prototype chain, closures, hoisting, and asynchronous as well. The number of people we've eliminated on a phone screen because they couldn't tell me the difference between a DOM id and a DOM class and how to select them is absurd. Almost everyone will say something like $('#myInput') but then if you ask why they used '#' instead of '.' they don't know.
I'm not sure what you mean
If your audience's browser requires this still, you should be a dick and not use it so that your page looks like shit. This would hopefully encourage the user to upgrade his/her browser. The first half is invalid JavaScript.
The first half is invalid JavaScript.
Support among popular browsers: * Chrome ✓ * Internet Explorer ✗ * Firefox ✗ * Safari ✓ * Opera ✗
Sometimes I use a function as both a getter and a setter, when it is called with zero parameters it gets, and with one parameter it sets. I have created objects and functions that help with getting and setting properties, and these allow user interface components (and other logic) to hook into changes and events.
Taking suggestions. Comment with some of your favorites so I can build this list out further.
lol, that's a funny link. You could probably get away without wearing your seatbelt too, but I wouldn't encourage it. 
The whole point of xhtml is that it's xml. If you're not serving it as xml then you're doing it wrong, and you lose all the benefits of xml. Seriously it's like saying you serve your pngs with a jpeg mime type because IE6 doesn't understand pngs. 
Your boss seems grumpy... for being named after fruit.
If you're using xhtml you should instead use the comment sequence //&lt;![CDATA[ /* Your code here */ //]]&gt; This removes the need to escape certain characters, and allows you to use the string `"&lt;/script&gt;"` without prematurely closing the tag.
ASI is an error correction procedure. It only works because you made a syntax error. That syntax error is ... a missing semicolon!
You need to echo json_decode($array)
&gt; I will be happy to give you my contact information so you can refer him to me so that I may explain it to him. Well thank you internet stranger. Why would he believe a voice on the phone/email?
I guess it's just good practice to adhere to stricter HTML anyway, such as closing all opened tags. So while using XHTML is unnecessary, it's good to keep your HTML5 neat.
The comment hack hasn't been needed since 1995 - 17 years ago. Just how old is this textbook? If your textbook was originally written 17 years ago you should probably get a different one.
You do not need to use JSON.parse. PHP is sticking your text in there as an object literal before any of the JavaScript is run. You just need to echo it. function test() { var test = &lt;?php echo json_encode($array); ?&gt;; alert(test[o]); }
JSON decode turns it into a PHP variable, right?
Still working on getting the length limit, but I need some sleep. What should the maximum length of a url be? Instructions aren't very clear. http://callumacrae.github.com/regex-tuesday/challenge7.html?find=%2F%5Ehttps%3F%3A%5C%2F%5C%2F(%5Ba-z0-9%5D%2B(%5C-%5Ba-z0-9%5D%2B%7C%5Ba-z0-9%5D*)%5C.)%2B%5Ba-z%5D%2B%5C%2F%3F%24%2Fi
What university do you go to?
Max 127 levels, max 63 characters per label.
Here's an extract of [some Perl code](http://badgerpower.com/docs/Badger/URL.html) I wrote which constructs a regex to match URLs. It also captures all the relevant parts in $1, $2, $3, etc. I'm glad to say it passes all the tests in the challenge, although it uses extended Perl regex features (e.g. the `/x` flag allowing comments and whitespace to be embedded in the regex) so I couldn't just paste the regex into the challenge input, but wrote a separate Perl script instead. Apologies in advance for straying from the subject of Javascript, but I figure it might be useful or interesting to anyone who's ever had to write URL-matching regexen. #------------------------------------------------------------------------ # Example URL: # # scheme authority path query fragment # __ ___________________ _________ _________ __ # / \ / \/ \ / \ / \ # http://user@example.com:8042/over/there?name=ferret#nose # \__/ \_________/ \__/ # user host port # #------------------------------------------------------------------------ # regexen to match basic tokens our $MATCH_SCHEME = qr{ ( [a-zA-Z][a-zA-Z0-9.+\-]* ) : }x; our $MATCH_USER = qr{ ([^@]*) @ }x; our $MATCH_HOST = qr{ ( [^:\/]* ) }x; our $MATCH_PORT = qr{ : (\d*) }x; our $MATCH_PATH = qr{ ( [^ \? \#]* ) }x; our $MATCH_QUERY = qr{ \? ( [^ \#]* ) }x; our $MATCH_FRAGMENT = qr{ \# ( .* ) }x; # compound regexen to match authority our $MATCH_AUTHORITY = qr{ // ( # $1 - authority (?: $MATCH_USER )? # $2 - user $MATCH_HOST # $3 - host (?: $MATCH_PORT )? # $4 - port ) }x; # compound regexen to match complete URL our $MATCH_URL = qr{ ^ (?: $MATCH_SCHEME )? # $1 - scheme (?: $MATCH_AUTHORITY )? # $2,$3,$4,$5 - authority,user,host,port $MATCH_PATH # $6 - path (?: $MATCH_QUERY )? # $7 - query (?: $MATCH_FRAGMENT )? # $8 - fragment }x; 
That bugs me too... thanks for the alert.
It doesnt for me, i always gotta do &lt;script&gt;&lt;script&gt; and i always forget
I'm going to be a neckbeard and say it was never an issue. I wrote against IE2, Netscape 1, and the big exciting guys, IE4 and NN4, and you could use styles without the comment hacks from day 1. The idea came from people preparing for "the future" since the standard said you had to use the giant comments, because the parent standard at the time was SGML, blah blah. Since then HTML no longer is parented by SGML, so those writing for "the future" wasted their time writing for a standard no one is ever going to implement. Other things in standards no one's going to implement but people still waste bytes on: type="text/javascript" type="text/css" The day a browser stops accepting Javascript inside a script tag with no type attribute is the day that browser's usage drops below 1%.
You can still use XHTML style with HTML5 doctype.
I've learned not to learn about the web anywhere but the web. The web changes frequently. Where would I find the latest? Probably the web. I realize people feel emotionally attached to the familiar format of a book, and the fact that it has a clear beginning and end rather than wading through the internet, but there are a ton of good tutorials with a clear date of when they were posted. In the same amount of time that you can assess a good book, you can find a good tutorial - and it will likely be more current.
You shouldn't go to school to learn how to program. You should go to school to learn about computer science or computer engineering which make you a better programmer once you learn to program.
You should show them the error of their ways.
If the other developers are retarded then yes.
See http://www.w3.org/TR/html4/interact/scripts.html#h-18.3.2
Hey, thanks a lot!
I don't agree. Teachers are academics and if they are not willing to evolve their teaching practices with current, correct, best methods then they should not be teaching. Any teacher or professor worth their salt should be open to candid discussion about the topic at hand and be willing to deprecate old/invalid practices.
Thanks! I should show something like that on the page.
Just tried it out on my machine (why don't you host the demo page somewhere?), but I cannot say I'm impressed. The only completions I discovered were for JavaScript keywords. It doesn't recognize local variables, let alone properties on instances. var someString = "foo"; someString.length; // some autocompletion for someString or length would've been nice :) 
&lt;?php $array = array('red', 'blue', 'green', 'yellow'); $json = json_encode($array); echo $json; echo "&lt;Button onclick='test()'&gt;Tests&lt;/Button&gt;"; ?&gt; &lt;script&gt; function test() { var test = (&lt;?php echo json_encode($array) ?&gt;); alert(test[3]); } &lt;/script&gt;
I do still shove in &lt;script&gt; //&lt;![CDATA[ //]]&gt; &lt;/script&gt; for some reason, simply out of habit, I guess.
I read the title as "...spite generator..." I thought "Already have that. I call them 'clients.'"
Ah but technically correct is the best kind of correct!
I do too. Then I go outside and stand by the shack with the checkered paint, next to the strip of road that leads nowhere, and I wave two flags in hope that one day my ritual will cause the giant metal bird to return with cargo!
thanks for all the help guys, I will give them all a shot and report back
I love you. 
The determined programmer can write Java programs in any language
When I split the last test I only get 118 levels and it is labeled as too long. Did you forget to add 10 more levels (to make it 128 and therefore more than the max), or am I misinterpreting what a level is?
Hey, only just noticed you posted your own link, or I wouldn't have referred to you in the third person. Seriously though, awesome stuff :)
it worked! thanks a lot! 
I'd say no. Not one browser I know of needs it, unless you're taling about the generation of MSIE3... And in xhtml compatible browsers, the Javascript would just be skipped.
Pardon my ignorance, but why can't you use jQuery if you want to publish it as an iBook? You could try adapting an existing solution like VideoJS or jwPlayer to your needs. It would be easier to help you if you could post a jsfiddle or a public-facing page demoing your code.
&gt;It's really disheartening and it leaves me no other choice than to work in the back-end Or, y'know, learn prototypal inheritance like the rest of us?
Nobody needs classes, but they do make things easier...
It was this kind of attitude that fucked up visual basic. 
Exactly. If you neither know nor want to learn JavaScript, then you've got no right to complain.
Classes simplify the common case. Right now, using any kind of inheritance is either painful to get right or requires a library, and it's not likely to work well if we're trying to get constructor-built vs prototype-built vs library-X-built types to play along. So we'd end up will less confused developers unsure how to write something like `super.radius()` in javascript, smaller libraries, and more consistent codebases. 
It's cool, but what does this have to do with JavaScript?
Buzzzzzzzwooooorrrrdsss! All kidding aside, is this your project? If so, nice work.
http://jsbeautifier.org/
Are you a Nigerian prince, by chance?
Just so I fully understand your mindset... at what point was Visual Basic not fucked up? To the point at hand, no, JavaScript doesn't need classes, Prototypal inheritance is more than capable in this regard. It does however need the equivalent of private members. The lack of data hiding facilities in Javascript is a hindrance. A good module system is also a pretty big must for non-trivial systems. Something like require, that works in browser and on server, but built into the language.
Webstorm is an amazing product, one I gladly paid my own money for. It has the best code completion for Javascript under the sun, and after years of Visual Studio development, this is a big must for me. As you said to, the debugger integration is reasonably good, much less restrictive than some other products. The OP could also consider checking out [cloud9](https://c9.io/) a cloud based Javascript IDE/runtime environment. It's probably the most accessible option out there.
If one had asked me a year ago, I would have said "yes". Then I got my head around prototypes, used them for a while. Now I'm not sure. I really don't miss or need classes, but I don't know if they hurt either. Especially if it's really just syntactic sugar.
They aren't actually classes though — they're just syntax for creating a function and populating its prototype all at once.
Are you looking to write one, buy one, find a link to one or hire someone? &gt;I can offer a share in the firm. hat said, I can't determine how successful the firm will be. If you want programmers to work for you, **pay them like any other employer**. I'm sure you think your ideas are fantastic and will make you and your stakeholders millionaires but startups offering equity instead of pay are bad news and tend to suck in inexperienced programmers and burn them out. If you called my agency and asked us to write code for you on a promise, we would not work for you. Are you not paying your operators? If you are looking into writing this yourself, since this is /r/javascript I suggest you look into node.js and socket.io. But please do the right thing.
Visual basic was a simple tool that had at one point was the widest used programming language on the planet. But then the C++ programmers started going "but it can't do this, and it can't do that like c++ can". This went on throughout the life cycle of VB6. So then Microsoft went and added a bunch of shit into it, so it's not even BASIC anymore. And you know what? It still can't do the same stuff that VC++ or C# can do. And that was the whole point of .NET, to make it so that all the languages can access the same resources in the system. 
Why does the *usage* section use CoffeeScript?
I think I have a good chat server now, thanks. I don't pay my operators in a standard sense - All operators are both stakeholders and shareholders. It incentivises them to work harder and more efficiently, as well as the fact that it saves me money.
Yep. This is a project of mine. I recommend checking out the rest of the site and the realtime collaboration.
Comment sequence? I thought that was for in uninterpreted character data...
I ran out of time quicker than I thought I would and didn't have time to do any trouble shooting :( but for those interested here is a [JS fiddle](http://jsfiddle.net/A3Shq/) of the above link: [http://jsfiddle.net/A3Shq](http://jsfiddle.net/A3Shq/) As it is right now, I didn't see the problem in my brief overview. Your ball moves, and is restricted to the canvas.... Could you elaborate a little?
&gt;&gt; I think any competent programmer would be aware of what the intent is (to hide the javascript from older browsers). &gt; No, that is not the intent, since there are no older browsers to hide it from - the last one that needed it was made 17 years ago. Yes it is the intent, because that's what the HTML spec specifically states such a syntax is for: http://www.w3.org/TR/html4/interact/scripts.html#h-18.3.2 &gt; Anyone who uses this is a boilerplate programmer (or cargo cult programmer) who has no idea what he is doing, since he doesn't know why he is doing things. Or (s)he's a programmer that actually reads the specs for him/herself, rather than blindly following dogma (s)he encounters on Reddit.
&gt; I for one welcome this addition. I feel like it will be much cleaner and easier. I'm not sure why everyone seems so against it? I think mostly it stems from the "my tool of choice is the best tool for everything, ever" attitude that's so prevalent in computer science, and also the reverse, "this tool is bad in certain circumstances, therefore it is always bad in every circumstance," and probably a little "if there's more than one way to accomplish the same thing in a language, it's always bad no matter what." Object Oriented Programming was the "new thing" for a while, and everyone was excited about it. Eventually, reality struck, and people discovered that OOP wasn't the end-all-be-all of programming, and that you could write perfectly good programs without using it at all. Since then, some people have gotten the idea that, since it's possible to *misuse* classes, that classes are bad in general. Frankly, classes make sense, and they're good for a lot of things. I don't see any reason not to have them, particularly since they're not removing features from the language. I'm sure the response to that is "well, someone will use classes, and That Will Be Bad," but considering how many JavaScript frameworks have ways of hacking around the lack of classes built in, I'd say it's probably time to admit that people want them in the language.
only $30-$50 too, really a good product
This doesn't show up: its supposed to make a line so i can make walls. ctx.beginPath(); ctx.moveTo(20,20); ctx.lineTo(20,100); ctx.lineTo(70,100); ctx.strokeStyle="red"; ctx.stroke(); ctx.fill();
_Percieved_ lack of functionality. With prototypes and mixins all the functionality is still there. And easy to work with.
I don't like the syntactic sugar libraries because it means I have to understand one more thing that is inefficient and I'll never need again.
A couple things come to mind. First, the solution to your problem: 1. If your if statements have more than one statement following them, those statements need to be in brackets. Your javascript was probably failing with a syntax error. 2. If you want to actually *submit* a form, you want to change the input type to 'submit' and make sure onclick= returns true. (Maybe you don't want to do this yet). 3. You didn't open your fieldset tag, although that might be a problem with reddit markup, and not your code. :) 3. Also, in the code you posted, you're not calling initialize. This doesn't really affect much, since your form will default to those values anyway. :) Here's the code, fixed: http://pastebin.com/UG2svfbQ Some questions and tips (feel free to ignore these if you want): * Are you familiar with jQuery? If not, it's absolutely worth checking out, because it makes this kind of code a lot less verbose and a lot easier to read. I can't imagine doing javascript code for the web without it. * Are you using a javascript console at all? Your browser's javascript console should inform you of any syntax errors that your code has, and might have clued you in to the bracket issue. You can also use it to print out debugging stuff with console.log("whatever") (this is a lot nicer to deal with than alert windows). * What browser are you using? Not all browsers are created equal for HTML development. I find that Firefox with the Firebug plugin is the best (Chrome and IE both have functionality that mimics Firebug, but I've found it's not as good). Firebug has a nice built-in javascript console, and it also lets you examine your HTML and CSS. Highly recommended. :)
No. Mixins are a much better form of inheritance. They're probably the easiest form of inheritance to understand and one of the most powerful. Prototypes are incredible when you understand them and you use them simply. Class based inheritance is very complicated and confusing, especially when you get multiple inheritance. EDIT: We do 
&gt; I tried your fixed code, but it still does not display the item chosen and price in the two text boxes. The page may be refreshing first. Change the submit button's input type back to "button" and see if it works then. Also, lab classes definitely impose constraints, some of which are silly and impractical. You may not be able to use jQuery here, but if you're planning on writing javascript outside of class, definitely check it out. :)
When drawn "landscapes" you neef to re-draw them every time your loop iterates. Are you re-drawing it on the next tick?
What back-end are you looking to use to hookup with Mongo? I would assume node to keep everything Javascript?
Yes node, but not for any good reason other than keeping it all JS. At my 9-5 our back-end is all C#/MVC3. I've never worked with Mongo or Node, but, seeing as they're the new, cool thing, I would definitely like to have a better understanding of them. As it stands, I have a proof-of-concept server from a Redditor who helped out a bit a few months ago. https://github.com/MeoMix/SongBuzz/issues/12 You can see the discussion here, but I haven't done any integration with it as of yet. He seems to have gone AWOL. As such, I was just going to learn it myself -- but having someone who is more familiar with the technologies would obviously be super useful. 
&gt; Or (s)he's a programmer that actually reads the specs for him/herself And apparently you are not one of them since the spec uses the word "allows", and it's very clear this section is for browsers that don't support the script tag - of which there are none current use. (And browser that doesn't support script also doesn't support style - so do you make sure to also comment out stylesheet blocks?) There is absolutely no reason to include these lines - there are no browsers that need it. Follow dogma? Are you kidding? Or just willfully stupid? Stop arguing about this, you are just digging yourself in deeper. Admit you are wrong, change your coding practice and move on.
You could also use Java (GWT), Python (Pyjamas), or Dart. Does that make sense for a *JavaScript* library? Is that something you'd submit to /r/javascript?
Without question, the right decision.
I'm not sure about the other two, but with Dart you can interact with other JS libraries. Anyhow, that's not the point. The point is that CoffeeScript is a different language. I will never touch a library which uses CS for documentation, because that would mean that *everyone* in the team needs to learn CS and everyone who joins at a later point will need to learn it, too. That kind of thing might be acceptable if CS would help with writing code in a team. Unfortunately, it doesn't do that. It's a less familiar looking JS spinoff with *more* quirks and edge cases than JavaScript. It's the polar opposite of what you'd want. **Edit:** Thanks for the downvote, but that won't change anything. CS is still a separate language, using CS comes at a price, and CS does indeed have more quirks than JS. Ignoring those problems won't make them disappear.
I'm partial to this pattern for public/private scoped members: function MyClassLikeThing (constructorVariable) { var privateMember = constructorVariable; var privateFunction = function (foo, bar) { var localVar = foo + bar; return localVar; }; return { publicFunction : function (foo, bar) { privateFunction(foo, bar); }, getPrivateMember : function () { return privateMember; } }; }
The determined programmer who thinks he should?
I know these type of comments may not be helpful, but I would highly recommend getting savvy with something like JQuery as lendrick said. It's essentially a library that makes JavaScript much easier, especially when working with HTML and web markup. On top of that, I would also recommend [Twitter Bootstrap](http://twitter.github.com/bootstrap/javascript.html), which is a set of libraries (based on JavaScript, so you need that too!) that can handle all the essential UX and functionality of a website. For instance, check out the [radio buttons](http://twitter.github.com/bootstrap/javascript.html#buttons) that they have, it sounds like they have what you are looking for. Only one button can be selected at a time in the button group. Code on!
Writing css directly with js is nice because you don't need to wait for an element to load in the dom to effect its styling.
If you're near any big city, you could probably find someone to pair with you in person -- it's a huge win over just collaborating remotely.
Yeah I was thinking about searching around here, too! I was just more familiar with Reddit and thought that this would reach a larger audience. I live in a city of about 40k so not too horrible, but not exactly a plethora of people to pick from. :p
Thanks! The flag sounds very interesting, as I annotate my code vigorously :) For sources on how to annotate code: that's a problem for me as well. [The GCC docs is my only resource](https://developers.google.com/closure/compiler/docs/js-for-compiler). I tried applying more exotic [jsdoc](http://usejsdoc.org/#JSDoc3_Tag_Dictionary) annotations, but GCC will scream at me.
Hi, that sounds pretty cool. I am a young JS/jQuery developer too and I made multiple music web apps. My most recent one is http://playmemay.be (only chrome support atm). It allows you to make playlists, add favorites etc. It even has drag n drop support :D I also made a whole YouTube client in JS, so I am also experienced in the YouTube API. As you can see, I love building music + YouTube apps. If you are interested, send me a message so we can share email addresses.
It's just syntactic sugar for javascript's (shitty) prototypes, so why not? If javascript did not have constructors and had better and more accessible prototypes (none of that implementation-defined `__proto__` garbage, no default prototypes, multiple prototypes, ...) I'd have said no, but considering how javascript actually works and the number of half-broken "class-sugar" overlays to its (also half-broken) prototypes, yes, kinda. "Need" is too strong a word, it doesn't *need* prototypes either but they're useful. Well built-in class sugar is useful. edit: aw, somebody got the sad.
Nice job creating a parser. Twitter should not be dropping support for RSS, they should be respecting REST and providing different content types per the accept header.
You must put the alert to the callback function, it's not synchronous.
I posted an answer on your stack overflow question, but the short of it is that window.plugins.Prompt.show is **ASYNC** and returns immediately. The callbacks are executed when the user clicks on the prompt; anything you want to happen after the user clicks therefore needs to go in the callbacks.
Really? The internet today is entirely an XML application? OK, Dave Winer…
Works perfectly. I should've been able to catch that. Thanks.
No, callback is the second parameter of the show function: function (userText) { $('#promptinput').text(userText) alert("prompted"); }
In addition, if it's done in a respectful manner, then it promotes the primary purpose of the other students in the class: they get one more opportunity to learn best practices. If you correct the teacher in a respectful manner, they will be *less likely* to try to shut you down, and may take the time to either rebut your information (yes, if correct the teacher, it's possible you may, in fact, be incorrect yourself!) in which case *you* have an opportunity to learn, or the teacher may update his information, in which case your classmates get an improved education, and so do that teacher's later students.
HTML is a (very forgiving) markup language, and JavaScript is a programming language. It's understandable that you'll struggle at first with the syntax. See [my reply](http://www.reddit.com/r/javascript/comments/11ljj1/making_functions_to_check_selected_radiochecked/c6ntanl) for some insights on syntax and semantics, as well as a couple extremely handy links that will help you understand what your code is really doing.
The JSON spec fits on a business card. It's easy to read and write correct JSON compared to the beast that is XML.
&gt; No, there are no situations where you should use it. &gt; None. You're objectively wrong. One situation where you should use it is to support what you call "17 year old browsers". Another situation where you should use it is to make your professor happy so you can just move on with the course without causing a big argument. That said, I'm skeptical of your "17 year" figure. According to Wikipedia, Javascript itself was invented 17 years ago: http://en.wikipedia.org/wiki/Javascript So you're claiming that the moment JavaScript was released, the entire world instantaneously upgraded their browsers to the latest edition, and nobody ran a browser that was developed before the script tag even existed? It sounds highly implausible. &gt; If you are really targeting such a browser (and I really doubt it since you would be hard pressed to find a single person using such a browser) you should make a very simple page with no javascript at all. Why should that be the case? Have you never heard of graceful degradation? &gt; It's completely impossible to make a page that is useful on both a browser from 17 years ago, and would still benefit from javascript. False. It's trivial to come up with examples: A page that tests whether your javascript is working. A page that does fancy animations for a navigation bar, but still works even without Javascript. A page that explains the implementation details of Pacman, and has embedded mini pacman games to illustrate specific concepts and which enhance the content but which are not necessary for understand the content. Etc. &gt; So you either have no javascript at all. Or you have javascript without these lines. Objectively false. You can have javascript with these lines. I'm very surprised that you are unable to understand that this particular configuration of reality is a possibility. &gt; The HTML specification is old. At the time it was correct, today it is not. Specifications don't become incorrect due to age. Do you think the USB1 spec is incorrect just because USB2 is out? Both specs are correct: If you want to target USB1 devices, you follow the USB1 spec. If you want to target USB2 devices, you follow the USB2 spec.
Regardless of how awesome you think Javascript's language structure is, you have to admit it's weird compared to other popular languages. The amount of applications written for any given platform is heavily influenced by how difficult it is to write applications for that platform. The easier it is for developers to understand Javascript, the more applications will be written for the web platform. I think we can all agree that the web platform is a great way to deliver computing power to people who need it due to the myriad benefits it has over other platforms. When Javascript progresses towards more ease of use, more and better applications will be written for the web platform, and the computing world will be a better place.
Here's a jsFiddle: http://jsfiddle.net/rfKP7/6/ two key things: - moving the data into attributes on the input elements. allows for more code reuse. - no more hardcoded values in your js. you can support n number of options Can be further optimized by moving onclick events out of markup and using event listeners, and adding id's so you can grab and store elements as variables more easily. Speaking about button and output fields. Other big thing? No jQuery or other libraries. No need for something as simple as this. edit: forgot your initialize method, but that should be easy enough to implement. not sure why you clear out vals on load, though. usually you'd want that info to persist.
I'm in the minority on this, but I believe that all functions with at least one variable are closures, it's just that a function like `function (x) { return x; }` is what we might call a "trivial" closure in that it doesn't have any variables bound in an enclosing environment. But I think at the end of the day, if a function "closes over" all of its variables, its a closure, and any of its variables are resolved dynamically when the function is invoked, it's not. Here's a test to demonstrate the closure everyone agrees on: var x = 'closure'; function acid() { return x; } function test(x) { return acid{}; } test('NOT a closure') //=&gt; 'closure' 
JSON parsing is much faster than XML parsing.
Style comments: Your course needs to get with the times: don't use `&lt;!--` and `// --&gt;` inside `&lt;script&gt;`. That went out of style at least five years ago. Put semicolons at the end of your statements: var x = document.getElementById("someText").style.top; var y = document.getElementById("someText").style.left; Numbers look better with units (in this case, for readability; often, the browser needs it): style="position: absolute; top: 50px; left: 1050px;"
You've given us absolutely no details about what's wrong, why it's not behaving the way you expect it to, etc. Try to be more thorough and explain every single aspect of your problem. A couple things that jump out at me just glancing at it: * Spelled 'document' wrong * You aren't adjusting the Left or Top attributes in your click function
Is it common to have anchors that just contain the text of the preceding paragraph without spaces? Being able to link to any given paragraph is vaguely useful I guess, but am I missing something here? Does it provide some other benefit I'm not aware of?
While XML sucks, why is Twitter abandoning the implementation of a generic, boring "structure to XML" converter? Seems like a massive waste of time - announcing the deprecation of XML is probably way more effort than not changing anything and continuing to supportit.
Feels like wasting bandwidth to me...
I like JSON, because nobody knows how to say it out loud. EDIT: PS Joking about the JSON pronunciation, I just watch a lot of conventions, and folks all have a different way to say it.
"Jason". I did hear one person say "jeh-SAHN" because they had only read it before and never heard it pronounced.
You don't need it, but it can make testing much simpler -- you take all of your dependencies explicitly, so you don't need to monkey patch in your mocks. A framework isn't needed, but can make things more convenient. Check out [angular](http://angularjs.org/) as an example of what a DI framework can buy you in javascript. Though theirs is much more sophisticated than the one in this blog post.
You notice the Elmer's glue? [This](http://davewiner.com/) guy updates his blog every thirty seconds, of course he thinks the world revolves around RSS/XML. Plot twist: Dave Winer is annoying Facebook girl's father. 
Consider me **sold**! I'm writing on a book called [CoffeeScript Ristretto](http://leanpub.com/coffeescript-ristretto), and I'm working on closures and scope right now. I'll have a look at using this explanation later tonight. Thanks!
Depending how you want to look at the world, a closure (noun) is a function with free variables. The fact that the free variables are bound to the lexical scope is the "closing over" that you are referring to. This defines a closure in contrast to a pure function. This notion that "things outside of the function's definition impact the function" is the key to also understanding how they can introduce bugs through shadowing, the performance implications of their implementation and also the dreaded 'for-loop' scoping issue. Thinking using the free/bound perspective lets you delve deeper into the λ calculus easier when you get there... Anyway, I totally agree that named-ness and closure-ness are orthogonal concerns w.r.t functions!
you have to be joking the documentation is 7 lines long...there is no js developer that cannot follow that documentation, you're just being dramatic 
I wish I was more familiar with git/github. While I don't have any experience with music/youtube, I'm very comfortable in js/jQuery and have a bit of experience with Chrome extensions. Several of your "Issues" list I think I would be more than capable with helping out on. I'm not sure where I would start with trying to learn how to fork/pull/etc. Even though I've read faqs on github etc I feel like I'd just mess things up, haha. If I get some time to play around, you might see some funny pull requests. Just let me know if I'm doing it wrong. (You did say you wanted it to be a learning experience, ha)
So, where should I draw the line? At 10 lines? 100? 1000? Should I go by features? Where would I draw the line there? If it's a JS library which I want to use in some JS project, the documentation should use JS, too. I cannot expect that everyone involved (now and in the future) *also* knows some unrelated language like, say, AS3, PHP, C#, or Lua.
It's not common. It's a quick and dirty hack that helped with something else and was erroneously applied to everything.
:) This was my first project hosted on GitHub. It has been quite the learning experience for me, too. I can't say that I would know how to fork a repo any better than you (I've never done it), but feel free to get at me here or I'm on AIM/MSN/Gchat/fbchat all day. More than happy to work through any ideas you have or discuss any issues with you!
I thought it would at least be dynamically injected, but no, it appears to be in the source.
Maybe he's referring to the fact that the whole web is HTML? (Yes, yes, I know that HTML is not XML and that XHTML has fallen out of favor, etc. But if you think of them as roughly similar his point makes sense.)
You have to upload the audio file to somewhere and provide the URL to the &lt;audio&gt; tag in JSFiddle... also, checkout SoundManager 2... I'm sure there are many other HTML5 audio players available!
&gt; grab a reference to the arrow element and programmatically clicking its "click" method This is exactly how RES implements its keyboard controls for voting.
HTML and CSS will get replaced with json. In like 2050... Ya I said it first. 
&gt; This tool is a proof of concept that shows in-browser tools can be as powerful as native apps. I'm not sure if this will ever be *entirely* possible. But I like that you're going there with it. Honestly, I'm just not the kind of user that you're trying to help out anyway. I don't tend to work without a build system (even on static sites I'll use [MiddleMan](http://middlemanapp.com/) or [Yeoman](http://yeoman.io/)). I'm looking forward to what you come up with. This is a good start, and totally useful, by my own admission.
Holy JSON-fanboy, batman! That's the first time I've seen an argument saying JSON has *more* schema support than XML. (Which of course comes from a family of validating schemas.) The author also claims that eval() is a _good_ thing, and that XPath/XQuery is a _bad_ thing. Edit: Funnily enough, the benchmarks also run exactly the same speed in my browser (Firefox). Edit 2: That benchmark is terrible. It's much more a network speed test than an API or performance test.
Not sure i understand, but funny pic!
Starting advice? Don't post "pictures" of code (especially pictures that... um... don't exist). Please post the code to Pastebin (or similar), so that we can copy/paste the code and maybe fork it with corrections and what not...
I'm pretty sure he knows better than to conflate XML and HTML (or else it explains why RSS sucks so much more than Atom). I imagine it has more to do with the fact that saying the web is an SGML app doesn't really lend any weight to his argument, so he chose to be inaccurate in the interests of making his case.
Well, this is a strange post: 1.) I never referenced Google or any Google products at any point. 2.) Seeing as (presumably) neither of us work for Google, we really have no idea what their planning process for Gmail was like. 3.) I said "often," not "100% of the time, for all projects of all scope sizes at all companies." If you've never worked on a project and, a week before launch, a manager suddenly decided it needed to be localized into ten different languages, then you're luckier than myself, apparently.