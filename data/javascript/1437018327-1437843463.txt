Now we get to the real issue, you just hate Facebook. Not eliminating 20k lines of code, not developer happiness, not better maintainability. Just good ole fashioned corporate conspiracy FUD. Go ahead and fork, it'll be out of date and irrelevant in a week.
 Safari is currently shitting the bed
I'm not sure whether you are doing it already but you should make sure NODE_ENV is set to production when minifying React. That will remove some development specific checks and will slim it down somewhat. You may also want to split it at least in two bundles. One for your app deps and one for the app itself. If you attach hashes to filenames, this gives you nice client side caching. I.e. if only app code gets updated, then user will have to download only that provided he has visited the page before. The next step would be to add lazy loading per route to fetch possible extra dependencies on the fly. There are smaller tweaks like these which you can implement if necessary.
I'm not a react hater, but how is that better than: window.addEventListener('load', function() { var books = [ {name: "Hitchhiker's Guide to the Galaxy"}, {name: "1984"}, {name: "Dune"}, {name: "Fahrenheit 451"} ]; var app = document.getElementById('app'); app.insertAdjacentHTML('beforeend','&lt;input type="search" id="search"&gt;&lt;ul id="results"&gt;&lt;/ul&gt;'); var search = document.getElementById('search'); var results = document.getElementById('results'); books.forEach(function(book) { results.insertAdjacentHTML('beforeend', '&lt;li&gt;' + book.name + '&lt;/li&gt;'); }); search.addEventListener('keyup', function() { for(var i=0; i &lt; results.childNodes.length; i++) { results.childNodes[i].style.display = (result.innerHTML.indexOf(search.value) &gt; -1) ? 'list-item' : 'none'; } }); }); 
what happened to "having html in your JS is a bad thing"?
Their reasoning is ultimately based on having to recreate a mixin implementation of a (soon to be) language construct. It's an anti pattern, be upset if you want but deal with it, you can just implement your own mixin functionality if you are so inclined. 
Thanks for the feedback! This was created a few months back now. Once I clear out some current projects, stay tuned for a multiplayer asteroids-style game.
Sorry this comment was for /u/pertheusual!
Avoiding separation of technology by putting one technology inside the other? Honestly the issue is simply HTML, whether it's in JSX or .hbs, or ng-whatever, or document.createElement(); The DOM/HTML is a fucking terrible way of rendering stuff on a screen. I am amazed at the hoops people want to jump through to hang on to a shitty markup language.
I would recommend these 3 (pick any that you like best and the future will be guaranteed :D) * React + (some flux library) * Angular 2.x * Ember 2.x Component oriented, modular, build-systems friendly, big/mature teams, experienced/big communities.
What's your alternative then? JSX is an alternative to HTML, not to the DOM but to HTML. It's fairly good. I've seen how other languages do templating and I haven't been impressed at all. I think you're just saying something you've either heard someone else say, or saying something you've said for a really long time without reconsidering the world around you as it's changed.
Great news everyone! Microsoft has started a new proprietary platform for a thing that is already open-source! Remember how well that worked out...uh, every time Microsoft did that?
You are going about this all wrong. If you are just going to reload the whole page anyway, which you do on lines 16 and 31, then fuck the AJAX. Just use a Form element and POST some signal to your page. Then the first thing you do in whatever php file all of this stuff is in is check for any POST keys and react to any found signals. Then just spew the rest of the page as normal. In this way you are doing some update, then rendering the page after this update has taken place so it WILL be the most up-to-date version of the data. Using AJAX is just redundant if you are just going to reload your whole page anyway. Also, as the other guy mentioned about heredocs, you may wish to use them instead of spewing a big load of text starting from line 58. It'll make things a bit neater and possibly easier for you. Line 80... onclick='del($FileID)' Since you are using double-quotes from line 58 instead of single quotes any php vars will be evaluated within the string when they are found. You don't have to jump out of the string to start emitting the value of a php var. Same difference with heredocs and nowdocs. That's about all I have noticed so far. Other than you haven't mentioned any console errors to help aid debugging this. But I think this should catch most of your issues anyway.
I decided to grab some more hard numbers for comparison. I just ran our source through the babel CLI to get a rough idea of size // Total source size: 5209697 bytes // Total using inlined helpers 5597654 bytes // Total using external helpers 5474832 bytes We have not converted our entire codebase yet, so this isn't necessarily accurate moving forward, but we've basically been converting all of our Backbone classes to ES6 as we touch them, and we ran programmatic conversions to use concise methods, arrow functions and "let". Overall though, 5% size increase is something I'm totally willing to accept, even if it increases a bit more as we use more of class syntax. 
Thanks for the suggestions. Can you briefly tell me their differences?
yeah not a great example of *why use react.js* but it really is a great framework and the virtual DOM offers a remarkable increase in performance in lots of cases.
By default, Babel puts all of the helper functions it needs right at the top of each file. That means if you're bundling your code up for a browser, you're going to end up with a ton of duplication. Babel provides two ways to avoid that. [runtime](http://babeljs.io/docs/usage/runtime/) or [external helpers](http://babeljs.io/docs/advanced/external-helpers/). Babel does add more code just because it's necessary to implement some features, but more of the very repetitive chunks of code are placed in helpers.
Just remember that Microsoft considers Edge (and Windows 10) as evergreen, so we won't need to wait for a new version of Windows before we can use new things. They've already announced that new features will become available as they're ready.
What the hell are you talking about?! 
artificially creating lock-in on facebook tech is a serious concern. afaik, jsx has no application outside of react, and flow has high tooling costs compared to jsdoc. i would pick the standard options everytime because i know that the dev community can mostly kill projects out of neglect or even when trends change (see most coffeescript codebases). in another thread i commented "why not use webcomponents without polymer" which got downvoted to hell. polymer creates unnecessary lock-in around an otherwise open standard, but to google's credit, they have released a polyfill that can be used independently without polymer, so kudos for that.
Relevant: [JSX: E4X The Good Parts](http://blog.vjeux.com/2013/javascript/jsx-e4x-the-good-parts.html)
Hehe getting downvoted for this. Must be all those evil FB-redditors. Just kidding. I could help with this. Where would I start?
The blog post actually refers to Apple as being part of the standardisation process. Beyond that I've seen very few signals from Apple about what they plan to implement. Apple were also meant to be on recent Web Assembly announcement too, but were too busy at the time to sign on to the official announcement text. Apple's secrecy about their plans is really annoying. Do they treat their OS X and iOS developers the same? 
I love that you want to contribute and you definitely should, but doing this is a really large task and you might want to get your feet wet on something simpler.
React really has nothing to do with it. 
You might also like Matches. http://caniuse.com/#search=matches
You still need envify to replace references to `process.env.NODE_ENV` in your code with the configured value so uglify can perform dead code elimination.
I'm sure someone has made a GIF describing the letdown you feel when WWDC comes and goes without your favorite new feature having been added to WebKit.
Wow, you're like the troll of /r/javascript.
Sure, it's about getting to know the codebase and the devs. Have been coding for 20+ years so experience is not the biggest issue. I'll look up the repo and check out whether there are any interesting open issues.
Why?
What would a standard implementation actually do, though? JSX itself is just "[a concise and familiar syntax for defining tree structures with attributes](http://facebook.github.io/jsx/)". It doesn't mandate what's done with the output.
Thank you. The "Keyword Filter" feature looks nice, but how is it SEO friendly then? Also, I am a bit concerned about the scalability of this approach. I mean, even if I am 100% sure that our application will scale (we are on AWS), delegating a subdomain to your server-side pre-processing might expose us to an external bottleneck.
When would this ever be useful or safe?
Create a test case on jsbin or jsfiddle. **Edit:** You mean this? function foo(a) { a[0] = 'b'; } let array = ['a']; foo(array); console.log(array); // ["b"] Yes, that's how that works. You can create a copy via concat, slice, spread (ES6), Array.from (ES6), and so forth.
All objects (including arrays) are passed around by reference. If you change it somewhere, it will be updated in every other place that has access to it. 
There are some problems with that specific implementation, such as string templating and relying on `id`, however don't assume that direct usage of the DOM API is reckless, it is often times more performant than an additional abstraction layer on top.
Well she's a guy so...
macros, automation, etc - he gives the example of AutoHotkey - and since it isn't available for mac, he's wanting to make something like it. But being able to hit a key-combo and having a macro run can be handy. 
Yep use juration https://github.com/domchristie/juration
The problem is that big tools have lots of opinions about everything. The more big tools you have in a project, the more likely those opinions are going to clash and give you all kinds of headaches and problems. Worse, the more features a tool has, the less attention they usually get and the less configurable they are. I prefer the unix approach of small tools that each do one thing well. You'll need to do slightly more work to get some basics set up, but I find this approach scales much better and is much less frustrating. Plus, you can understand each library completely in isolation with separate documentation and tests. Here are some of my go-to server-side libs: http://substack.net/some_libraries_I_use_to_build_webapps plus leveldb for persistence. On the client, I'm partial to [virtual-dom](https://github.com/substack/virtual-dom-starter) but I could very easily swap that out for [react](https://github.com/substack/react-starter) if I wanted or my requirements changed. For the client, I think the more important thing you can do is to use a build system like browserify to open up the wealth of packages on npm for small narrowly-defined problems, like json web tokens or many more.
According to html5test.com, Edge only beats out today's Safari by 8 points on their scale; a virtual tie.
Just being better than shit is still shit.
Not as a general rule.
Meteor seems nicely integrated. I should have considered it sooner. Maybe it's not too late. As for the JWT Auth; login is my app entry point and is done through HTTPS. My problem was sending the token back with every request through websocket once authenticated and connection upgraded, but I am not even sure it makes sense from a security point of view. Literature at my level of understanding (Duh) is hard to come by on this subject. Anyway, I have hacked something up and my token gets sent now as an additional request "body" object. Not sure it is a good idea though.
Sails.js excels at "boring" use-cases. It has a pretty sturdy ORM that works well with basic DB choices (like MySQL or Mongo), decent MVC engine that leaves you to do pretty much everything, supports Socket.io as a very simple websocket implementation, glues it to Express with some magic, and the only thing it automates is that it can spit out a perfectly functional RESTful CRUD API and database schema from the same model definition (i.e. Blueprints). It just works so far. However... First, it's totally front-end agnostic and provides no backend functionality per se, apart from basic, basic CRUD. Apart from forcing you to use socket.io as a websocket client (it uses it as server component) it doesn't really care what you use as front-end (it is sort-of playing nice with Backbone models but that's just because both revolve around the same concept of plain vanilla REST-ful CRUD). It's not an opinionated framework, but it's also zero-to-little configuration due to the fact that you cannot configure stuff you need, you need to actually write the code (or plug some npm library into your stuff). Stuff like authentication requires you to think in ExpressJS, which is different from both Django and myriad PHP MVC libs way of doing things -- you "install" some Express middleware and plug it into the request/response chain for it to do what you need it to do. I think that is OP's main issue. Blueprints give you impression Sails.js does a lot with little code, but nothing could be further from the truth. It does the most basic of basic scaffolding for your app, and then it just moves out of the way, and you have to do everything else yourself.
Well, It's not only the one problem of the jwt through websocket, (which I hacked through now, just sending my token as data since I cannot find headers on websocket requests, is there a difference from a security stand point?). It's more about full stack javascript webdev experience as a whole. But looking at integrated solution like meteor, I may have made the process more painful for me than it could have been.
How are you adding the entries now? Are they all hardcoded? It shouldn't be an array size thing since an array could technically hold 4.29 billion records. This could be an issue with datatables. Check out this here: http://www.datatables.net/forums/discussion/24037/what-is-the-limit-of-records-we-can-deal-with
Yea I probably should of just put a small piece of code to debug. I appreciate the feedback. It ended up being solved by someone with more experience than me. I still have a lot to learn. Thanks!
People are often far too reductive when debating performance with React (not you, though!). React by default is _pretty fast_, and especially given how easy it makes syncing DOM with application state, the vast majority of people will prefer React to no abstraction (which of course would be faster in most cases... though you'd also have to implement something around change batching which would be super painful). With all of that said, React offers APIs (specifically shouldComponentUpdate) which make it very easy to fine tune performance as it becomes necessary. These APIs, along with the profiling tools React provides, make achieving better-than-default performance really easy (not to mention if we use immutable datastructures to manage state optimizing components becomes easier still). I think the most bothersome thing about all of this is that it appears most of the people participating in these debates understand the arguments, but they repeat them over and over, beginning from reductive stances until ultimately we all decide "just use what's best for you, then!". Super tiring! 
Does Babel have Immutable.js specific features?
If you want to get started with animations, transitions and cool UI effects, I suggest you to: 1. Get familiar with TweenMax, an amazing animation library http://greensock.com/tweenmax 2. Review and study a lot of animated and well designed websites. Watch how the animations are triggered, open the console, check the code and the CSS. You have a lot of great ones posted on http://www.awwwards.com/ 3. Learn new technologies like canvas, webGL (threejs, pixi...) 4. And.... practice! Create a CodePen account to post your experiments, do freelance work or portfolios... Good luck! 
I thought meteor would've been simpler as well while reading your post. Are you going to try it?
React is definitely a much better choice!
Thanks I need to learn more
Thanks So when you assign a value from a variable to another, it's changed everywhere? How do I copy? 
Also why are you using **let** keyword?
Backticks just turn into strings, so it doesn't really matter, however using them in place of normal strings has some advantages besides being able to to interpolate values, such as handling quote escaping. Consider this crazy string: let x = `'q'u"o"t'e"s'` This gets compiled to var x = "'q'u\"o\"t'e\"s'";
This is how https://github.com/facebook/react/blob/master/PATENTS 
All done. Submitted the bug-fix yesterday. Please get me some feedback :).
Thank you for your reply! Just to be clear, is this what you're suggesting? (...) var dataSet = [ fetch('/data.json') .then(function(response) { return response.json() }).then(function(json) { console.log('parsed json', json) }).catch(function(ex) { console.log('parsing failed', ex) })]; (...) When I'm doing so, I get the following error: &gt; DataTables warning: table id=example - Requested unknown parameter '0' for row 0. For more information about this error, please see http://datatables.net/tn/4 I'm also not sure where to add in the getURL method here. I should've mentioned that 90% of the code has been written by someone else. Any help would be greatly appreciated.
Just a small comment about your point 3. You shouldn't be using floating point arithmetic for dealing with money in any language. You should be using integers or a specific decimal type which is designed to given the right answers to base 10 questions. This isn't a flaw in JS per se. 
JSX isn't an alternative to HTML. It is HTML, just with javascript mashed in. Do I need an alternative to point out that something is inherently flawed? And thanks for the vote of confidence :) I'm just parroting something I read on the interwebs herpy derp.
So this is a question an interviewer gave you or you're practicing?
This is amazing
But you're not pointing out what the inherent flaws are. I don't know what problem you have with HTML other than disliking the templating options that have evolved around it.
It was an interview question i came across on Glassdoor. I'm just practicing algorithms/data structures and making sure i can code and whiteboard each question.
Thank you for your reply. Yes, they are all hardcoded. In that thread it's mentioned that &gt; [...] dataTables should cope just fine up to around *50'000 rows* for client-side processing. My dataset consists of about 46.000 in total, so this might not be the issue here? 
Babel-loader is critical for webpack use, but it doesn't so much for you beyond that. Dedupe plugin is useful, but it won't split out the helpers automatically for you.
&gt; var i = []; &gt; var x = 1666; &gt; i.push(x); &gt; x = 888; no. You only pass object structures by reference. Primitives are copied. If you did `var o = {name: bob}, a = [o]; o.name = 'foo'; a[0].name === 'foo';`
Very cool! Thanks for the link. Someone should x/post to an electronics subreddit, but I dont visit any.
Original Creator http://www.falstad.com/circuit/
Storing a static dataset in code like that is a pretty terrible idea. Why don't you fetch it from a server (or even a local file if it's a chrome extension)
the original program was very useful in complementing ee lectures! thanks for the port
That's actually what I'm looking into now as well. Are you referring to an XMLhttprequest here? Would you have a useful tutorial or article I could use as a guideline to do this (doesn't have to be an XMLhttprequest)?
Wow so cool!
Popper: https://github.com/pemrouz/popper
Not the complete answer, but John Resig (of jQuery fame) was playing around with dictionary lookups in JavaScript a while ago. You may find these helpful. http://ejohn.org/blog/dictionary-lookups-in-javascript/ http://ejohn.org/blog/javascript-trie-performance-analysis/ http://ejohn.org/blog/revised-javascript-dictionary-search/
[repo:mbostock/d3 identity](https://github.com/search?q=repo%3Ambostock%2Fd3+identity&amp;ref=reposearch&amp;type=Code&amp;utf8=%E2%9C%93) [user:rijs identity path:src](https://github.com/search?utf8=%E2%9C%93&amp;q=user%3Arijs+identity+path%3Asrc&amp;type=Code&amp;ref=searchresults)
[Zero width space](https://en.wikipedia.org/wiki/Zero-width_space)
https://jsfiddle.net/fx80bv41/ if you could get dict as a hash... ex `dict["word"] // =&gt; true or "word"`, you could save like 200 loops through the dictionary and just do: for (p of phonecombos) if (dict[p]) console.log('valid combo:',p)
I think Durandal is a more accurate comparison than knockout to the rest of the list. It is easy to shoot yourself in the foot though lol.
This is one of the most amazing things I've seen built on Javascript. Bravo.
the easiest way is to use recursion: function genphone(results_array, phone_digit) { newresults=[]; if (phone_digit == 2) for (old of results_array){ newresults.push(old + 'a'); newresults.push(old + 'b'); newresults.push(old + 'c'); } // etc return newresults; } now `results = genphone(results, N)` will grow the array exponentially... [full code](https://jsfiddle.net/fx80bv41/)
[ right-to-left override](http://www.fileformat.info/info/unicode/char/202e/index.htm) mind blown.
They are still bad compared to Chrome's and Firefox's devtools.
That makes sense. Thanks for the insight!
[I don't think this is quite right](http://i.imgur.com/otRnDfX.png)
Great, thanks!
 setup Ubuntu 14.04 (up to date) Chrome (up to date) Home network (can provide IP if you need) local caching proxy? No. I do some web dev / testing on this machine though, run apache as a service, as well as things like mongod, but I dont see how any of that could interfere this way. extensions that were enabled at the time : AdBlock (sorry, Ill unblock reddit now, the status of it did not affect the outcome though) Angular JS Batarang (disabled now) Google docs Postman And hey, its back. 1:24PM CST Sent cache poisoning report to server. If you need to know anything else let me know. EDIT : Closed all other chrome windows and tabs, then closing chrome, then open 1 instance of chrome, and opened reddit. Adblock greenlit for reddit. No error on the home page. Login. No error there. Inbox. Sent cache poisoning report to server. 1:40CST. 
This.variable
I haven't gotten to play around with the generator approach in anger, but it does look very nice. 
I also dislike Ember... You have to climb a hugely steep learning curve... only to end up at the same place Angular started. 
I quite like this pattern - I did something similar in my `.tap` library (https://www.npmjs.com/package/tap-chain + blog post http://hughfdjackson.com/javascript/tapping-into-the-method-chain/). I think there's something genuinely useful in being able to add in functions in a chain - it can help readability. Have you seen http://babeljs.io/blog/2015/05/14/function-bind/, which solves the same problem with a proposed extension to the language? 
And if you think that's cool, here's [an emulation of the 6502 cpu](http://www.visual6502.org/JSSim/).
I find the best way to evaluate new technologies and libraries is to integrate them incrementally. Typically I find that projects called &lt;framework&gt;-data-&lt;framework&gt; are **terrible** ideas because it: - Couples these two things which should be de-coupled - Breaks as soon as one of these two frameworks updates The best way to learn is to gain an understanding of the fundamentals, by working with modules that are modular + low level. Or you could try reading the framework's source code (but this is much more difficult). Every high level framework **will** fuck you over at some point if you do not understand, in detail, every single component of the stack that comprises that framework.
Hey! Nice work, but the states variable is mutable accessible from your entire module. The better way to do this is to change your listener a bit: element.onclick = { let states = []; return function (ev) { //mutate state in here } }; This is the idiomatic way to do it in just about every FP heavy language. *Note that the scope syntax may not work in JS... It's been a while since I've been heavy into JS programming and you may have to make it a IIFE, but I think ECMAScript 2015 buys you this...*
I saw a couple of examples and looks really great. What are the main differences with Paper.js or Raphael.js? Anybody know? Upvoted! Edit: ok, I noticed that WebGL can used with this library for advanced drawing.
I look for "full screen modal" on Google, and a couple of results appeared: * http://codepen.io/nathancooper/pen/IwGfs * http://joaopereirawd.github.io/animatedModal.js/ Just using your own CSS style and removing some animations (if you don't want them) these examples could be what you are looking for.
I am extremely interested! Like I said in my post, I've been dicking around with Clojure / ClojureScript and I have a burning desire to take my programming to the next level and I see a lot of promise in FP, FRP, Logic etc. Anything you would recommend? Edit: To be more specific, I want to get into AI, machine learning. I'm at the bottom of a big mountain, but I have the zen for it I think.
Javascript is case sensitive with its variable names.
Here's another (trickier) one: 'naïve' == 'naïve' Hint (in rot13): Qba'g sbetrg gb abeznyvmr lbhe fgevatf! 
Personally I like using the class syntax, its really nice and clean and easy to read and reason about. I understand that it is not like a classic system, but i know this and therefore it is fine. For most purposes they do function as expected.
I think I see what it is now, I didn't set `path=/` on those cookies so the check might mess up depending on which page you first visited after the check was added, writing a possible fix for it now.
For me i just see it the same as i see JSX; it makes my code cleaner, i understand it and it does what i want and expect. Therefore i am happy with it. But I don't think the original method of creating component is going anywhere is it?
The entire notion of string equality is much more complex than most people realize. Many of us are lucky enough to only have to deal with the latin characters but even those have some complexities like your naïve example. Also, probably the following should be true for many applications: `"ﬀ" === "ff"`.
This is what I was wondering/worrying about when I originally posted this: if they were dedicated to the class syntax, I'd probably go with it because the framework is still worth it. They are, however, thinking about using stateless functions ([from /u/clessg's comment](https://github.com/reactjs/react-future/blob/master/07%20-%20Returning%20State/01%20-%20Stateful%20Functions.js)) and other ways of moving toward functional paradigms, so I doubt that they'll ever *require* the class syntax. In that context, adoption of the `class` syntax is quite strange. It is easy to forget, though, that React hasn't yet reached 1.0, so for now they don't actually have to commit to anything. It'll be interesting to see how this goes.
I'm with you, I don't get it.
I use angular js, if I had to communicate with an API, it provides you with an MVC architecture on the client side.
React and Meteor are quite compatible if you care to replace the default Handlebars templating system. https://github.com/reactjs/react-meteor
In terms of rendering performance, Angular 2 already appears to be considerably faster. Try it for yourself: https://rawgit.com/alincc/angular-test-table/master/angular2/dist/index.html
I've been using [Riot](https://muut.com/riotjs/) lately. Having never made anything really substantial with React I didn't feel so attached to it, whereas Riot's syntax really speaks to me. That and it seems to work just fine.
That sounds fair :)
I use backbone and it does a great job of using AJAX to send/retrieve data as well as matching return data back to HTML templates. But the real REST implementation is just me remembering to use PUT/POST/GET/DELETE and passing data either in the querystring or header/body as appropriate for a RESTful implementation.
i think it's productive to remove cruft. you must be an absolute **bore** at parties.
From wikipedia: &gt; Cruft is jargon for anything that is left over, redundant and getting in the way. As has been explained to you at length, JSX support in Babel is not redundant, nor is it getting in your way. It's *not* cruft; it's just a feature you personally don't feel like using that has no impact on you.
I edited my pen, and I've made [a gist out of the onclick function](https://gist.github.com/alex-wilmer/39fa2e267e6416df177e) This is great. Now only the stream handler function has access to the scope that the state is in. Very cool thanks! I'd^like^to^be^friends!
Riot is nice, I've been trying it out. The templating part is its weakest point I think, but maybe I'll get around to it. 
&gt; &gt; There are no official standards in this space. And to the extent there is a de facto standard, it's babel &gt; official standards do exist, they're defined by TC39 not facebook, stop pretending to be clueless. Well, feel free to link the TC39 standard for JS transformers any time you feel like it. &gt; now i see the extent of the problem and the community's reluctance to fix it I'm not sure the community *can* fix your problems. :)
gotcha. Is it cheaper to use a VPS or simply buy a cheap desktop and turn it into a webserver?
Their job is to define ECMAscript the language and that's not in their scope, fallacious argument. are you done trolling now?
&gt;figure out how to help move JSX and Flow outside the core. I think after reading all the responses here I'm not optimistic about this outcome. It's either that they're using FB stuff so they're vehemently against it, or they're apathetic about FB stuff, or they just came here to troll. this place is just toxic.
you are one big pedantic fuck, and a facebook shill to boot.
im using firefox and I got a grey screen
The class system provides an intermediate escape hatch for developers as the React core team looks into providing pure models. It also places some restrictions on developers in order to favor object composition over mixins. Quote from Sebastian Markbage: &gt; The class system provides an optional escape hatch when you need it rather than completely stopping you. &gt; &gt; The primary feature that our class system provides is an "instance" handle this has several features. &gt; &gt; 1) It provides a certain level of familiarity and convenience. You can use this as a middle man to refer to a group of arguments. This is a foot-gun but makes it easier to onboard new people. &gt; &gt; 2) The instance is an ID that you can use to refer to a place in the tree. It allows APIs like React.findDOMNode(component) and third-party APIs that can unify around it. &gt; &gt; 3) It provides single or multiple inheritance features if someone needs to create an abstraction and just can't figure out how to do it using composition. This is unfortunately a very common problem.
It's not meant to prevent cache poisoning (once you've been served the wrong response it's game over,) it's just meant to tell us how often / why cache poisoning is happening.
Question here is though, why would I need to set an ENV for node, im building the JSX (ES6) to JS (ES5), building and then deployed on S3.
Good call. And you don't have to apply modifiers to the class after creation, since everything's baked into the factory. Honestly I don't know how I feel about this shorthand, but it will make some of the class-proponents more comfortable (for better or worse).
Yeah, the problem isn't the obfuscation as much, its more the ES6 pollyfill babel functions, being spat into each of the "file" blocks. This line exists like 50 times through out the file "Super expression must either be null or a function, not " and its all part of that function.. Basically looking for a much cleaner build process i guess.
Source maps are sweet!
I am currently yeah, because I'm not sure how to strip them out... the `import React from 'react';` automatically includes react from npm in the build...
&gt; babelify I've updated the gulpfile, with what i've got there now... It hasn't made a difference to the file at all, even ran through a diff.
Assuming you meant me! Here's the production webpack config I'm currently using: https://gist.github.com/framerate/2f1c04ed5d248d8f0343
I understand the concern. Our resources by default flow through the Rackspace Cloud and we have an autoscale, autoheal infrastructure setup. If you are a major traffic source, we also offer customized options to deploy our solution on the AWS Infra for you to ensure lower latency as well. If you would like to explore that option, email me at brian-at-tinybutton-dot-com and I'll be more than happy to help you get setup as well. 
I can't find any benchmarks comparing vanilla javascript to virtual dom diffing, except for this one, and its not very promising: https://aerotwist.com/blog/react-plus-performance-equals-what/. At over a 1,000 photos "flicker feed app" the tests for react were taking ~1.2 seconds for layout, vanilla javascript came in at around 70ms. Where were you finding the benchmarks for virtual DOM?
&gt; If you only support evergreen browsers, then a large number of users will not be able to use your thing.
Solid. I've used this one too, which is similar in a lot of ways -- https://github.com/8th713/common-history
Hi there, nice work with your synth! [I built this synth pretty recently](https://github.com/stevengoldberg/juno106), and I'm actually prepping to give a presentation on it at a meetup this weekend, so I can tell you how I handled this issue. My synth is written in Backbone.Marionette, but hopefully the ideas are helpful. I created [object setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) for my synth parameters, [like this](https://github.com/stevengoldberg/juno106/blob/master/js/synth/env.js#L129-L176). I gave my UI elements [data-params](https://github.com/stevengoldberg/juno106/blob/master/templates/item/envItemView-tmpl.hbs#L16-L34) to correspond to my synth modules and parameters, and every time the UI gets changed, [an event is fired with that data-param and the new value](https://github.com/stevengoldberg/juno106/blob/master/js/views/item/moduleBaseItemView.js#L198-L205). That event causes [the synth model to be updated](https://github.com/stevengoldberg/juno106/blob/master/js/views/layout/moduleLayout.js#L79-L85). Updates to the synth model trigger a method at the top level, which parses the relevant parameter and value from the update event and updates the active voices concisely using the setter methods: synthUpdateHandler: function(update) { var param = Object.keys(update.changed)[0]; var value = update.changed[param]; var component = param.slice(0, 3); var attr = param.slice(4); _.each(this.activeVoices, function(voice) { voice[component][attr] = value; }); }, I'd also consider separating your init patch from the rest of what you're doing in `dsp.js`. And you might want to think about how to handle envelope updates that happen mid-note. On an analog synth, changes to the envelope can take effect at any time when a note is playing. [You can see how I approached that in this file](https://github.com/stevengoldberg/juno106/blob/master/js/synth/env.js).
Oh that looks good, but relies on HTML5 and ES6 which aren't supported on too many browsers yet- the main idea behind Stateless.js is that we support both evergreen ES5 and those that are not too much lower (*IE6, anyone?*). Another major feature that Stateless has is that it offers asynchronous handlers via the `hashchange` event, I don't know if common-history supports that.
Would like to see them move in the direction of Omniscient.
Or get rid of classes altogether since JS is not a class oriented language: var MyComp = { getInitialState() { return { bar: 'abc' }; }, appendBar(stuff) { return stuff + this.state.bar; }, render() { return &lt;div&gt;{appendBar('cde')}&lt;/div&gt;; } }; Object.setPrototypeOf(MyComp, React.Component);
You could run the JS inside the parent frame and access the iframe's document using `frame.contentWindow.document`
Because the result of the scope is another function, the state still persists. 
I say it depends on how complex the ui/app is you are building. If it is small and doesn't have the potential to get very big over time I would stick with Backbone. If it is complex with lots of interactions and state I might choose more robust framework. Although I am a Angular guy, I think either Angular or Ember would be a good choice for bigger and more complex apps. React by itself is just a view rendering layer and you would need to add something else to handle the rest interaction. I don't know enough about Meteor to comment but the people who use it have great things to say.
Thank you! That's a lot of useful information. I'll dig into that this weekend. I will definitely be cleaning out dsp.js file. I need to move effects on master chain to separate files (I didn't know about tuna.js before and now I think I will be using it) and only connect them in the main file. Also, patch init will be separated from dsp file when I implement patch bank. That's an amazing project you've got there! Good luck on your presentation!
not sure that's a fair test, it'd be nice to see what the result looks like on a production version of react with precompiled templates. Nobody is going to run the live jsx transform stuff on production code. 
So glad someone at least ported this one; it's nearly impossible to get java applets to run now.
Do a bit of googling on json schema forms. With extensibility support, I find it to be the cleanest approach to form building. If you're using a language with type safety, you can usually find a library or create your own method to generate a json schema based off of the class / data object. Then you can customize the field properties and actions with metadata which affect the schema generation. If you're doing pure JavaScript, then you should manually create the json schema.
You could create a function that creates an element and adds its attributes on the fly. This way you would have an array of elements like: var elements = [ { tagName: 'label', attributes: { for: 'firstname', textContent: 'First name:' } }, { tagName: 'input', attributes: { type: 'text', id: 'firstname' } } ]; Here is an example implementation of such function: function createElement (tagName, attrs, appendTo) { var element = document.createElement(tagName); for (var attr in attrs) { if (!attrs.hasOwnProperty(attr)) continue; switch (attr) { case 'textContent': case 'innerHTML': element[attr] = attrs[attr]; break; default: element.setAttribute(attr, attrs[attr]); break; } } if (appendTo) appendTo.appendChild(element); return element; } With that, creating an element is easy as: createElement('label', { for: 'firstname', textContent: 'First name:' }); It's also able to directly append the new element to another one. A working example is available in this [jsFiddle](http://jsfiddle.net/yod64kn2/2/). That been said, there are probably already some libraries focused on doing just that. Also, automatically generating a form has lots of limitations since you don't have full control over the markup.
If I could say more about it, it wouldn't be irrational.
Yeah. Besides, React's performance advantage is mostly in updating existing HTML, not inserting 5,000 nodes in one go. Either way, both Angular 2 and React seem to be very fast. I've used both, and I'd say A2 is a bit faster out-of-the-box for now, but much harder to optimize. It's very straightforward to optimize a React app in comparison.
Well tbh there is little to know about NoSQL for SPAs. Most of them are just key-value stores for JSON objects that you can somehow search through and perhaps use some map/reduce aggregation on. Those that keep data in ram and refer to OS for swapping (like Mongo) go against everything I've learned about engineering software so I too mostly stay clear of them :) RethinkDB looks nice tho :) I don't really know where to point you for security info. You should probably start by learning about traditional unix security systems like NIS, X.500 and Kerberos, and then move over to how Kerberos/LDAP made foundation of Microsoft's Active Directory, then skip to more modern concepts like PKI, X.509 and SSL. I can't remember ever reading a full book (that wasn't some manual) on security that I could really recommend.
Thanks for the heads-up, fixed! :)
I would choose something other than particlesjs, to unreliable
Does that feel old to everybody or just to me? Like... What about promises for example ?
Flux is just a type of architecture. There are some flux libraries - a few of them are meant to be used with react, some are framework agnostic and can be used with any other framework (or no other framework). I have a bit of a flux-ish architecture in my current app which is an Angular 1 app, and if I was to start over - I'd try and do it that way from the start.
You can use the :target pseudo class for this. Like querySelectorAll, it's supported by all modern browsers and IE9+. https://developer.mozilla.org/en-US/docs/Web/CSS/%3Atarget [Aside: It's "focus" with a single 's'.] **Edit:** Simple demo: http://jsfiddle.net/w1LgggLt/ http://fiddle.jshell.net/w1LgggLt/show/#one
Yes I realize that the second language basically invented, Lisp, is a functional language. Scheme was created in 1970 and influenced by Lisp. Then JavaScript was influenced from Scheme. BTW, I am a really old guy. FP is not just a buzzword, IMO. There is so little independent thinking in CS so we end up doing things that are really not all that smart for a very long time. We have never really had a popular functional language. With Javascript that has changed. Javascript is exposing FP concepts to a much larger audience. That are realizing this is just a far better approach. Also, JS is making many realize that there are some pretty big negatives with classes especially deep classes. It will take a generation to change programming approach but it is happening. I actually think we would have got here faster if Lisp was not tied to AI. BTW, I don't believe we could get to FP without having a popular language like JS that can be a functional language but can does not force it. Sometimes you have to work pretty hard to make it functional but you can.
Hey! Thanks for the answer. But unfortunately this isn't what i'm looking for. The step-process is: domain.com/checkout -(click)&gt; domain.com/contact(highlight div) and i can only use javascript. No access to modify the code within the website itself. I just got a lightbox from our company running in the background. eg. document.getElementById(id).style.backgroundColor= '#ff0000';
Defensive copying in JS is difficult to get right and potentially a major performance bottleneck. Your best bet is to use immutable values as much as possible - I'd recommend giving a library such as immutable.js a go. 
because React uses the `NODE_ENV` environment variable to swap out production/development code.
Are you running it through uglify?
I just replied this in the other thread about ES6 classes with React, but I think it's just as relevant here: Personally I prefer using the old-fashioned createClass, but that's probably solely because of mixins. If they could somehow support mixins in the ES6 syntax I would happily switch. Mixins just seem so much cleaner and more flexible than inheritence. 
 document.querySelector('.span-mail').style.backgroundColor = 'yellow' That's all you need. You only want to highlight that single span, right?
&gt; It might happen a couple more times as we throw out the broken cookies Thats what happened. I refreshed the page a few times, message no longer appears. edit : and r.cachePoisoning.checkPoisoned(); reports false
Do you want to run some JS on a different site? &gt; The step-process is: domain.com/checkout -(click)&gt; domain.com/contact(highlight div) Are these domains different? You can't do that (for obvious security reasons).
Ah, that's good to know. Thanks!
Ember is bad. Sorry you had to use it. You should try using a library instead of a framework.
Yeah, it's like a step towards a more functional style of programming without the use of external libraries. I enjoyed reading your blog post, our implementations turned out to be practically equivalent :)
maybe you need something like var full_url = this.href, parts = full_url.split('#'), trgt = parts[1]; $('#'+trgt).addClass('highlight'); from http://jsfiddle.net/YxRqp/284/
My experience with promises so far is that error functions don't always get called. I miss plain old catch/finally blocks. :(
"reinvent the wheel". Standard reply to anything on reddit. The noise involved with these things, libraries upon libraries upon build tools to build build tools to build libraries to build frameworks, is my complaint and the noise has been deafening.
*Tensely waiting for an "Edit: \s"*
I would agree, but React's classes really aren't classes in the Java sense. They're much more like factories, which *are* idiomatic for JS. Use of prototypes, IMO, is overrated. I see them more as a perf benefit.
no. same domain. but different pages. So i pretty much have to store a variable in the browser console. i've heard that you can do that. because i have a function that needs to be executed on the page in the thread. but it should take effect on redirect so to speak. google.com/images -&gt; click link-&gt; google.com/mail (highlight area on website)
A bit but it's still a good read. Promises don't really change what they are talking about in the article though. They're basically the same as the callback style written differently.
You get these with generators co(function*() { try { yield Promise.reject(new Error('boom')); } catch (err) { console.error(err.message); // "boom" } }).catch(onerror);
Shameless plug for my library [bluebird-co](https://github.com/novacrazy/bluebird-co), which is a much faster reimplementation of tj/co for Bluebird coroutines. 
For Angular 2, I'd definitely recommend using TypeScript, as it has support for annotations, and is the language Angular 2 is written in. TypeScript Advantages: * Acts as the compiler rather than just typechecker (with Flow you'd need to use Babel) * The TypeScript compiler is faster to compile * Has wider IDE support / better tooling as of right now (Visual Studio, Visual Studio Code, Sublime, Atom, WebStorm, others). Flow has some advantages over TypeScript as well * Deeper understanding of types * Better generics/self referential types * Type propagation (this allows you to get an error at the call site)
The problem is that I like Babel initiative. TS feels alien to me. However, I have tried implementing Flow and unfortunately, they lack ES6 support, not to mention experimental features such as decorators. Flow for now is out of the picture (unless you are writing code in ES5).
Uses TweenLite - looks like an interesting library for transitions. http://greensock.com/tweenlite
I mean, Python, Perl, PHP, Java, Scala, ad nausem can all be "functional" without forcing it. It hasn't helped advance the cause; in fact, it just steers newcomers away and creates misinformation. I think Clojure, F#, and Racket have been doing much more to seriously advance the paradigm, and Haskell is about the best functional language we have right now. Forcing functional programming is about the only way you can actually get the benefits of the paradigm. Otherwise, you just have map in place of for loops and not a lot of real benefit *Also, just a note, but LISP is far from the second oldest language. It is the second oldest language family still in widespread use (right behind Fortran, I think), but even LISP is sitting on the shoulders of giants.*
Yeah sure! If you want to stay in contact, I'm @jacrough on Twitter and Crough on Freenode IRC. 
Why "Custom Elements"? That's [already a thing](http://www.w3.org/TR/custom-elements/) and just makes it confusing.
Very nice, do you take in requests? If so select2 component would be a nice to have.
Rad, thanks for checking! :)
Yes it is. I first was using snap.svg(http://snapsvg.io/) but the performance wasn't quite there. Also GSAP solves many cross-browser issues.
Very cool! 
GSAP is probably the gold standard for Javascript animations. Very performant and easy to use.
* It can run on any modern computing device/There's a lot of different modern computing devices * Any game. With WebGL, even sophisticated 3d rendering is possible in the browser * Last year Humble Bundle released an asm.js bundle, https://support.humblebundle.com/hc/en-us/articles/203331430-Humble-Mozilla-Bundle-Powered-by-asm-js-System-Requirements Not sure you can still check that out. Both Unity 5 and UE 4 can generate JavaScript at least at an alpha stage * I'm currently writing my own 2d webgl accelerated engine, but then that's my jam
Firebug + Coffeescript + Yeoman + Angular + Grunt. Ouch. I'd replace the first with FF Developer Console and knock the last four on the head entirely. jQuery only or GTFO. Is it any wonder that Web sites these days are getting slower and slower and their memory usage is creeping ever higher? Also, get off my lawn.
The main thing we miss is the let/const support so I'm hoping that comes soon. Static typing &gt;&gt;&gt;&gt; let/const though. What other specific ES6 features do you use that would be a show stopper? It supports things like spread operator, Promises, even async/await.
I like being able to use decorators instead of mixins.
ES6+, decorators. I use them extensively.
TypeScript.
Take Coffeescript out of the equation, and you don't have this problem. Coffeescript is not a good or best practice, and the problem you're having is one of the big reasons why.
That looks like two different error handlers for what is essentially the same line of code at yield. One for the yield and another for what the yield calls.
Thanks, I'll look into this. I was looking at [https://github.com/Matt-Esch/virtual-dom](https://github.com/Matt-Esch/virtual-dom) and found it to be almost overwhelmingly complex.
Depending on how large your codebase is static typing is probably worth more. The larger the codebase the more the scales tip towards static typing.
When you think of it in terms of "classes", yes. The key line is the last one `Object.setProtoTypeOf()`. You can think of this as inheritance in class based design. So, I inherit all the properties from the parent `React.Component`. I too like classes as it's what I was taught in University (senior CS major). It's more explicit or strongly typed.
And React's classes aren't really classes either, in fact it's just an object that returns an object (Yes factory), but React's `createClass` property also links to another object, rather, it [explicitly sets it's prototype to another](https://github.com/facebook/react/blob/b2db10f43e9781d9925b01be8bb55de24c5bf1ce/src/isomorphic/classic/class/ReactClass.js#L850). So the classes syntax is just sugar of the prototypical mumbo jumbo going on. But yes I agree, the prototypes is a overrated.
Mostly. I think you have the right idea, but its backwards (maybe just a typo...). Its more like: &gt; functions that _are contained in (via then())_ promises are executed when the value of the promise becomes available Promises don't affect the function they're in, but they do call functions supplied in `then()` (and `catch()`) once the promise gets resolved and its value resulting from the async operation its assoicated with is available.
You're right. A better performance comparison can be found here: http://www.wintellect.com/devcenter/dbaskin/angular-benchpress-and-performance-tests. There's a link to the repo where you can see the code &amp; run the tests for yourself.
Does this work with react native? If not, do you have a recommendation for something good that would?
Completely agree. Much better and keeping it simple!
And take a look at [this](https://github.com/eorroe/NodeList.js) :)
You might take a look at [reactive extensions](http://reactivex.io/). They're MS tech and have similar APIs in both .NET and JS.
Saw two way databinding and noped the fuck out of there. I've been burned way too many times by having that available as a first class construct in projects I've worked on.
The article could have been much shorter if they had instead just pasted a snippet of your code.
Learning JavaScript itself will be very helpful for learning JavaScript frameworks. Be warned, however: learning advanced JavaScript can be a rabbit hole, especially when you get into learning about prototypes and "classes". [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS) is a good resource for the lesser-known aspects of JavaScript. The one advanced JavaScript concept that you should definitely learn about is [scope and closures](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&amp;%20closures/README.md#you-dont-know-js-scope--closures). You may also want to learn about [this and prototypes](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes). Classes and the `this` keyword are pretty confusing concepts in JavaScript, especially if you don't use ES6 (the just-finished new version of JavaScript). I'd recommend learning advanced JavaScript and your JavaScript framework of choice simultaneously. I can't speak to how useful knowing manual DOM manipulation is for learning frameworks. I did manual DOM manipulation for years, long before learning any JavaScript framework, and it definitely gives you a different outlook on things, but that comes mostly from experience. Of course, it will make you better able to understand what's going on under the hood, and do stuff under that hood if you need to. But there are *a lot* of developers who know nothing but jQuery and do fine. (Insofar as employment goes, anyway... the rest of us have to put up with it.)
Yes. 1. It removes a lot of the magic, knowing what patterns are the framework and which are JavaScript let's you have more power within the framework. 2. When the framework doesn't cover something, you'll know the solution. 3. When there's a bug in the framework, you can contribute with better feedback, code, etc. It also means you'll be better prepared to patch your app. 4. You'll learn frameworks faster. But, I do realize there's only so many hours in the day for training. 
Your last sentence sums up the issue for me, I've been trying to get to grips with JS but I'm constantly asked to do new things with new frameworks. Endless cycle it seems right now.
Geeez! I think you just leveled me up! Thanks. 
Quick reference to the code looks like it would be a lot more work to make them procedural, but it would be about as much as making any animation procedural. However it is decently light as is. I still wouldn't want to use it on a site if it pushed over 300kb total. Page load speeds are way more important than cool animations.
Yeah, I think it's one of the project's largest missteps. I was hoping it'd move to pure functions for building components.
Oops, thanks. Edited.
This doesn't seem to do anything aside from printing a few lines of assembly for a return statement. It doesn't match the architecture, either.
Apparently these are very early stages. I found it on my computer science department's Facebook group.
Just wrote this in the past few hours. It's fresh. I just learned SPARC assembly at school so thought I'd use that first. :)
A strong knowledge of vanilla JS makes you realise frameworks are not necessary much of the time.
The language was designed to be written by people that didn't necessarily have a programming background (i.e. web designers), so the simplicity of having a single numerical type was considered worth the tradeoff. That's not an entirely crazy decision; other languages have made it as well, such as Lua. And IEEE doubles can represent all integers in the range [-2^(53), 2^(53)] which is much more than you'd get with a typical 32 bit int type, so it's not like you have to give up something. Implementing things like hashes is a little bit of a challenge, but still doable. 64 bit integers have always been the missing piece and I believe they're on the table for ES7. Edit: you can also see this in other aspects of the language design, such as automatic semicolon insertion and type coercion when using `==`. The idea was to make people not have to worry so much about things like missing semicolons (a perennial newbie mistake) and having to convert strings to numbers when comparing. Those have proved controversial decisions, but they were rooted in the idea that the language should be as accessible as possible to people with no programming background. 
* [Dan Abramov](https://twitter.com/dan_abramov) - very smart individual that's contributed a lot to the React community. * [Reginald Braithwaite](https://twitter.com/raganwald) - aka raganwald, aka homoiconic. A fellow Canadian and mentor of all things JavaScript. * [Axel Rauschmayer](https://twitter.com/rauschma) - aka rauschma, writer at [2ality](http://www.2ality.com/). * [Brendan Eich](https://twitter.com/BrendanEich) - an obscure individual; not sure who he is or why he's on my Twitter. * [Paul Irish](https://twitter.com/paul_irish) - benevolent god of devtools and website performance profiling. * [Eric Elliott](https://twitter.com/_ericelliott) - a JavaScript enthusiast and tutor. * [Evan Czaplicki](https://twitter.com/czaplic) - lead designer of Elm. * [David Nolen](https://twitter.com/swannodette) - Clojure! * [Lee Byron](https://twitter.com/leeb) - works on GraphQL and Immutable.js. * [Yehuda Kats](https://twitter.com/wycats) - has worked extensively on Rails and Ember. Never sleeps. Ever. * [Ryan Florence](https://twitter.com/ryanflorence) - co-author of React Router. * [Pete Hunt](https://twitter.com/floydophone) - the guy who made people stop hating React. I believe his official job title is "the social media guy for React". 
&gt; The language was designed to be written by people that didn't necessarily have a programming background (i.e. web designers) Initially read that as "The language was designed by people that didn't necessarily have a programming background (i.e. web designers)"
The language has always had an integer type. Bitwise operators truncate the 64-bit float, convert to integer, perform the operation, then convert back to float. Thankfully, it's not that inefficient in modern JITs. In fact, they are usually using integers under the hood for a lot of different things (only converting back to float if necessary). In most modern JITs, typing `var foo = 12345|0;` is all that's required to force that variable to be an integer (that's how asm.js works). A very important idea in JS is making it hard for the language to break things. Even experienced programmers will find that weird bug where the 16-bit int overflows because "there'll never be 65K &lt;junk&gt;" or some similar bug. These become very rare when you are forced to use larger, safer types. That said, TypedArray allows you to specify other integer and float types if you really need them. Also, as mentioned by someone else, better (that is, more publicly accessible) integers are coming in the future.
Consider the following languages that were also aimed at non-programmers * PHP * COBOL * AppleScript * Visual Basic * Matlab Compared to them, JS looks pretty good.
Vb is very much still in production for Windows scripting 
Mostly [Gary Bernhardt](https://twitter.com/garybernhardt) and [Paul Phillips](https://twitter.com/extempore2) for insightful remarks and constant reminders that my profession still has a long long way to go... [Li Haoyi](https://twitter.com/li_haoyi) and [Roland Kuhn](https://twitter.com/rolandkuhn) to stay up to date with awesome scala stuff.
Do you even ECMAScript bro?
Seems like a pretty react-centric list
Learning vanilla JS plus the advent of modern browsers make jQuery fairly useless.
&gt; Why why why Marketing.
Technologically speaking, Vue is vastly superior to Angular. However, Angular is a lot more popular, so you will find easier employment, more resources, and more libraries for it. I wouldn't recommend learning Angular unless you have a lot of time (and aren't easily driven to insanity). Angular 2.0 is going to change literally everything, so everything you learn will be lost. It's prudent to distinguish between *business* and *view* logic. It makes sense that view logic would be in the view, as the view and its logic are inherently coupled. Angular isn't much better here and Angular encourages you to do stupid and confusing things.
There is no need to use type "hinting" like that unless you are in a "use ASM" block. All modern engines will box them as an int until the hidden class changes (it'll convert to a float when needed)
There are loads of COBOL stytems still in production. Legacy == fastest growing market ;)
ECMAScript is not a browser and only one of the functions of a browser. You can't base the competence of a browser on one thing alone.
You can't go wrong learning the fundamentals of a language before diving into frameworks. I recommend Crockford's JavaScript: The Good Parts.
I can't second that. JS is a minimalistic language approach similar to lisp (what lists are to lisp are hashmaps to JS). As it was kind of ad-hoc there are some quirks, however in practice these are just not that problematic as all those eye-rolling JS hating suggests. Its just a very basic and flexible, paradigm-free approach to a language design. You can use functional style, you can use class based OO style, but its not built "into" the language. Its simple, not complex.
 When you start googling common error messages it generally leads you to your missing new statement or that you need to attach to the prototype, so many can stumble through without actual knowledge of how it works.
I'm not a smart man 
Agreed on all points but don't use that awful fallacy where I have to have written a programming language in order to know a shit one when I see it. Such a terrible argument
This is false. What 'this' refers to depends on what calls it, or what is bound to 'this' using .bind
Eh I think reflux was more interesting to me.
Sort of true. Frameworks are different from languages, and they do have purpose. It's mostly about [inversion of control](https://en.wikipedia.org/wiki/Inversion_of_control). Why should I write a lot of code to do something, when there is already a framework that I just need to "plug" in to?
Absolutely. 6 years ago I had 10 years of on/off experience with Javascript. With no prior ExtJS experience I got hired for an ExtJS contract due to that experience, and within two months I was being contacted by then head of ExtJS to possibly work for them. (Idiotically now despite the above nobody will consider me for Angular positions although I now have FIFTEEN+ years Javascript experience)
&gt; When JavaScript was being designed There's your first mistake.
I apologize if I came off patronizingly. It was not my intent. I find I come off a little too snappy when I comment on my phone. I intended the comment to be about how learning how to learn new javascript stuff quickly is very valuable as javascript is changing so quickly. Sorry if I came off as an ass!
Obviously not. Edge is virtually tied with Safari and the current version of Safari has been out for years. And "big improvements" in their browser still can't hold a candle to Chrome or Firefox.
The truest way to maintain security is to avoid exposure. So yes. Avoiding js and java do improve security. But when applications are written in JS and you choose to ignore it. You are disabling a websites functionality.
Yes, (note: Node JS isn't a framework though). Learning the basics and JavaScript well will make picking up other frameworks / libraries / etc easier. As at the end - they are all just JavaScript.
&gt; why you'd make a language for non programmers at various points in the last 40 years, there has been a "movement" (for lack of a better word) to make scripting tasks accessible to non-programmers. its motivated by the idea that 1) real programmers have better things to do; and 2) non-programmers are actually willing to do these tasks. in reality we've learned that 1) there are many types of skillsets that real programmers can develop, and high level business logic scripting is a valuable skill indeed; and 2) non-programmers are generally unwilling, and if willing frequently unable to do these tasks competently. 
Flux https://facebook.github.io/flux/ https://www.youtube.com/watch?v=o5E894TmHJg
Reflux is a good library, but it misses a lot of the ideas of Flux (Uses magic action names and actions do not go through the same dispatcher). Those features help in debugging and managing complex apps. Dan did a great writeup on the evolution of Flux frameworks. https://medium.com/@dan_abramov/the-evolution-of-flux-frameworks-6c16ad26bb31 . I have no doubt ideas might change in the next few years, but I think Redux is a step in the right direction. The javascript community is moving towards functional programming. Forget about complicated classes and just use simple functions. It makes code so much less complex. Redux is a great example of just using pure functions. React itself is moving towards being just pure functions as well. https://github.com/reactjs/react-future/blob/master/01%20-%20Core/03%20-%20Stateless%20Functions.js 
I like alt. It is pretty simple to get going with and scales well. http://alt.js.org/
Yes Javascript is so broken the web doesn't run
I agree, you sit there with jquery doing `$(window).resize(function() {});` and it's the only way you remember how to do it, even though the vanilla way `window.addEventListener('resize', function() {});` is barely different at all ... and then you realize this happens a lot in just one jquery library, let alone all the other libraries in existence.
I wonder if there's a reason I'm missing for why scope couldn't have been done differently. Is it because of prototypes vs classes? Is that because prototypes work better in the web env? I feel like a simple Python like class and scope would have been much easier. 
Give an example of a good one then and state why its better than just calling a language crap. We have no context.
But it rarely leads you to "You need to use a binding library or call or apply if you want to call another prototype's methods in their scope."
&gt; I want to learn frameworks like node, express, angular, and jQuery Not to hate, but node is not a framework. It's an event-driven runtime, seperate from the browser. It's basically a server engine that happens to use javascript. Node and express are completely separate from angular and jQuery, as they are meant for server-side programming, not front-end work. Express is a tiny wrapper on top of node's standard library server. As for your question, learn advanced js. It's a weird but great little language. I like the mix of OOP and functional programming.
Upgrade your computer out of Windows 95.
4 out of 5 see widespread use. Almost everything you see that is engineered has Matlab involved somewhere. Almost every large business has tons of VB stringing their MS stuff together. Most banks, insurance companies, etc have systems written in COBOL. If you know what language a website runs, about 80% of the time that language will be PHP. As for the one (Applescript) that doesn't see widespread use, it's still available on every mac until they decide to completely switch to Javascript. Finally as a note about PHP. Version 7 deals with a lot of inconsistencies, but even after that, it still remains true that pound for pound, no other language in the top 20 is even close to the inconsistent weirdness that is PHP.
Rick's CSE30? I loved that class! I wrote https://github.com/dymk/sparc-optim for it to learn more about the extra credit optimization problems he gives out.
 function calculateHeadroom($) { if ($(window).width() &gt; 927) { ... } ... } $(document).ready(calculateHeadroom); $(window).on('resize', function(){ calculateHeadroom($); }); This could probably be done better with CSS3 breakpoints using @media queries?
I use [TransparencyJS](https://github.com/leonidas/transparency/). It's incredibly simple, fast and intuitive.
And lose all my Netscape bookmarks? No way. 
**Disclaimer: Never used it myself** I've heard really good things about phaser. I've been interested in it for a while and the documentation looks simple enough. It may be overkill, but it would be worth looking into.
Yeah you should really check out [CSS media queries](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries)
Depends how much time it takes to learn the framework though. 
Also if you are going to attach a function to the window's `resize` event, it's a good idea to throttle it using something like [_.throttle](http://underscorejs.org/#throttle).
Interestingly enough the `==` evaluation is nice not being type bound when working with third party libraries that are sometimes..... not always the best. The fact that you can still do explicit type matching `===` means that in the long run, I really do think it makes it more accessible and a little less punishing. That being said, obviously there is a trade off, but I've always enjoyed JS, it feels more like Jazz than Classical Music (as in, it lets you lean on the rules a little heavier and do your own thing) which is great for learning.
JavaScript is as object oriented as they come - everything is an object. That said, as mentioned previously, it isn't a classical object oriented language (despite efforts in es6 to make it look that was.. Classes, smh.) Prototypal object orientation is at least as powerful as classical object orientation. It's just... Very different. And those differences trip up lots of people who come from classical (Java, c#, etc) backgrounds.
I cant use a js within css media queries 
I hated Java development when I first started learning it. After a while, I stuck to Web Design and Front-end Dev since it seemed easier (and then in more demand). JS is easier to work with, far less stingy than Java, yet powerful. Now that I'm a lot more proficient with coding, I want to get back into Java. 
Actually, this comment is hilarious. Funny that such a 'poor' language is more widely installed than any other language, like, ever, and that it drives the application logic of the single most common client known to computing. JavaScript has warts, sure. But to call it a bad language because of things like ASI? The 90s called. They want their opinion back.
You mean Windows ME wasn't an upgrade?
Fully agree. A lot of JS stuff is just conversions of stuff used in Java in the 00s (and Lisp in the fifties). Just new wrappings.
Fuck frameworks. Frameworks never stick around. Just find some good libraries that you can bring from one project to the next. Also makes exchanging bits and pieces easier.
VB is to VB.net as Java is to JavaScript, as car is to carpet, as ham is to hamster.
What's wrong with using classes in javascript?
&gt; The language has always had an integer type. The *language* only has one numeric type. It's "number" (64-bit IEEE 754 floating point aka "double"). &gt; var foo = 12345|0 undefined &gt; typeof foo "number" Dart, for example, is language with doubles and ints. The type of 5 would be int and the type of 5.0 would be double. "5" is an integer literal and "5.0" is a double literal. Under the hood, the Dart VM uses 3 different representations for ints, but they aren't exposed at the language level. The language does not have 3 kinds of ints.
Automatic semicolon insertion is a pretty surface level complaint. You don't have to have created your own language to critique others. But you should at least have an understanding of what kind of things matter.
Step one: don't think in terms of MVC anymore! MVC works well for the backend, where the code lives for only one request. In the front end however, your code lives during the whole session, so tracking and reacting to state becomes very important. For that, we have Flux. You don't have to say goodbye to routing however, as we have the fantastic react-router library which helps you build your UI according to various routes. The React components you attach to the routes then become something akin to the "controllers" of yore. For "models"... well, Flux stores aren't models. The data you load into it becomes state, so you would store the data elsewhere and load the subset you need into a store and do stuff with it. I'm partial to building the backend, with databases or other data storage, as an API. Then simply request resources from there and load them into your stores. Just don't think of stores as data storage and you'll be fine. Hopefully that helped.
I think this is the first 5 minutes of a TeamTreehouse tutorial or something.
The value of this for a start
It's a start! Now try to do it with a text input rather than a prompt!
I love this part of [Douglas Crockford's *The Better Parts*](https://youtu.be/PSGEjv3Tqo0?t=28m28s) talk: "JavaScript got it right by having only one number type. Unfortunately it was the wrong type." He argues that having a choice in number types provides no benefit and only introduces chances for errors - but, also says double is a crap format. He proposes the [Dec64](http://dec64.com/) type to overcome the shortcoming of double, and let us use the sane option of only one number type. Though I think he also has low hopes of people adopting this, as it [took decades before people stopped using `goto`](https://youtu.be/PSGEjv3Tqo0?t=13m21s) and that was a no brainer ;)
**Yes.** jQuery gave JavaScript a bad name because it essentially replaced all JavaScript requirements for DOM manipulation and made it so developers could write JavaScript without *knowing* JavaScript. That being said, it does a damn good job of DOM manipulation. Anyway, most other JS frameworks provide layers of abstraction over JS, but still require you to know and understand how JS functions. This is a good thing. You definitely need to learn JS if you plan to get into things like MVC frameworks or really anything outside of jQuery. If you plan to use Node, then you absolutely need to know JS. Node isn't really a framework in the same sense as Angular or jQuery. Node is just a means for running JS on a server and also provides some extra functionality related to the server. However, you will still be writing vanilla JS for Node. 
And yet you are still here...
Okay. Cool. I'm a newbie. Great. Educate me. You say es6 is a 'comedy of half fixes'. I'd say it's progress - considering the time between 5.1 and 6, the effort to get to 5, and the plans for 7, it's steps in the right direction. Do I think it's solid gold? Hell no. Classes, for example, are stupid. JS isn't a classical language. Adding classes is just going to upset more people who want to treat JavaScript like Java or whatever other classical language they learned first. Newsflash: it ain't. Don't pretend JavaScript is something that it isn't, and it's fine. I don't pretend it's perfect. I do think it's not nearly as bad as you, and others, want to make it out to be. But you know what? That's great. You go on thinking how terrible js is. I'll accept it, warts and all, and continue making a good living with it in my toolset.
So this is essentially a fancy wrapper for web workers to give a browser-independent client-side multithreading experience. Nice. 
The language explicitly requires that numbers be converted to 32-bit integers in several cases (read ECMA-262 12.11.3 for one such case). The fact that the language requires that the external `typeof` operator returns `'number'` for all numeric types specified by the language has nothing to do with this. Externally generic labels aren't important (Fun fact: `typeof new Number(123);` gives us the result `'object'` because of boxing). To prove my point, on a byte-addressed machine, the only numbers that exist are 8-bit unsigned integers. Signed numbers are an abstraction over twos-complements. larger numbers are abstractions over concatenation of 8-bit numbers. Floating point numbers are an abstraction over signed numbers which treat specific parts of the number differently. The fact that this abstraction happens in hardware does not matter. I can do all these same operations with an 8-bit micro-controller without a FPU and without support for integers (only support for 2s complement is required). Likewise, JS specifies a type called 'number'. It makes two guarantees. The first guarantee is that you may treat a number like a 64-bit float and it will work. The second guarantee is that specific operations (bitwise operations primarily) will convert that number to a 32-bit integer, perform the calculation, then return the result. Finally, the language guarantees that `Number.isInteger()` will return true if you are dealing with an integer and that the number will be an integer until you do an operation that converts it to a decimal.
The Canvas API is exactly that. It's simple 2D drawing API which does all the basic stuff like drawing images, lines &amp; rectangles, and text. It also supports transformations, clipping, and blending modes. For simple games, you really don't need anything else. E.g. for a chess game, you'd just draw the board (could be as simple as drawing a single large image) and then you'd draw the images of the pieces on top. That's it. It's just one `drawImage` call and another one in a loop. You don't need a library for that. This talk covers all the basics: Google I/O 2011: Super Browser 2 Turbo HD Remix: Introduction to HTML5 Game Development https://www.youtube.com/watch?v=yEocRtn_j9s Slides: http://io-2011-html5-games-hr.appspot.com/ The only thing that has changed in the meantime is the `requestAnimationFrame` prefix stuff on slide #32. [The prefixes aren't needed anymore](http://caniuse.com/requestanimationframe). You only need the fallback for IE9 (if you care about IE9).
&gt; The language explicitly requires that numbers be converted to 32-bit integers in several cases Yes, but that doesn't mean that there is an integer type. The important bit is that they are converted back to doubles at the end. If I do the math with euros, but pay you in dollars, you still don't have any euros. Here is the list of types: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-data-types-and-values Here is the number type: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-number-type Here is Number.isInteger: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isinteger &gt; 4\. If floor(abs(argument)) ≠ abs(argument), return false. That's how it's defined. Semantically, there are only doubles. The language has no integer type. What happens under the hood doesn't matter as long as the semantics of the language are preserved. That's why a VM can inline some functions, rearrange instructions, or use different internal representations (e.g. the Dart VM has smi, mint, and bigint for ints).
Glad you like it. That's correct, the main goal of the library was to allow individual functions to be executed in parallel, therefore speeding up execution by taking advantage of multiple cores. It's been optimized to use as few resources as possible while taking advantage of everything the web worker spec allows so you don't have to think about it yourself. Something that I personally believe is a killer feature is the ability to run many parallel functions concurrently, you aren't limited to running just a single thing at a time in fact you can be running functions on their own threads while running others across multiple threads. We are currently working on getting more detailed documentation onto the website so in the mean time if you have any questions or need any guidance on how to integrate into your own projects feel free to reach out. 
Heh, shame on the downvoters, I remember being excited about building a text to pyglatin converter. The implementation consisted of two function calls and a + sign. I even console.log'd it so you could see it in the console!
Too bad this isn't standard: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack
It's not a plugin, he's just setting classes on elements at different widths. He can find out how by checking out the link I provided :) Also he should look into debouncing the window resize function so it's not firing off more than necessary.
That feeling of writing one of your first programs and starting to see how it can all come together is so empowering. I'm a few years into being a programmer and as my toolbelt grows, I keep feeling added layers of that original feeling. I can't imagine being a non-programmer. I really hope one day everyone gets the basics in school as a required set of courses.
This looks pretty promising. I'll have to fool around with it this week.
Looking for links and to make fun of stupid reddit posts like yours.
What does it do and how do you use it? The readme is pretty sparse.
I agree it is, feel free to make a PR. Basically it allows you to send and read UTF8 data from a WebSocket (more types coming soon!) 
&gt; Yes, but that doesn't mean that there is an integer type. The important bit is that they are converted back to doubles at the end. If I do the math with euros, but pay you in dollars, you still don't have any euros. I request an integer and I get back a number that is indistinguishable from an integer. In fact, it usually is an integer both semantically and in reality. If I check that a number is an integer, I get a guarantee that it is an integer of some type. If I perform a bitwise operation, I am guaranteed that it will be performed. Further, I'm even guaranteed that if I'm using a float representation of an integer larger than 2^53 then it will be truncated (something that would not happen with a float-64 implementation). &gt; 7.1.5 &gt; ToInt32 ( argument ) The abstract operation ToInt32 converts argument to one of 2^32 integer values in the range -2^31 through 2^31-1, inclusive. This abstract operation functions as follows: &gt; 1 Let number be ToNumber(argument). &gt; 2 ReturnIfAbrupt(number). &gt; 3 If number is NaN, +0, -0, +∞, or -∞, return +0. &gt; 4 Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(number)). &gt; 5 Let int32bit be int modulo 2 32 . &gt; 6 If int32bit ≥ 231, return int32bit  232 , otherwise return int32bit. &gt; NOTE Given the above definition of ToInt32: &gt; * The ToInt32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that value unchanged. &gt; * ToInt32(ToUint32(x)) is equal to ToInt32(x) for all values of x. (It is to preserve this latter property that +∞ and -∞ are mapped to +0.) &gt; * ToInt32 maps -0 to +0. &gt; 12.11.3 Runtime Semantics: Evaluation &gt; The production A : A @ B, where @ is one of the bitwise operators in the productions above, is evaluated asfollows: &gt; 1 Let lref be the result of evaluating A. &gt; 2 Let lval be GetValue(lref). &gt; 3 ReturnIfAbrupt(lval). &gt; 4 Let rref be the result of evaluating B. &gt; 5 Let rval be GetValue(rref). &gt; 6 ReturnIfAbrupt(rval). &gt; 7 Let lnum be ToInt32(lval). &gt; 8 ReturnIfAbrupt(lnum). &gt; 9 Let rnum be ToInt32(rval). &gt; 10 ReturnIfAbrupt(rnum). &gt; 11 Return the result of applying the bitwise operator @ to lnum and rnum. The result is a signed 32 bit integer. 
This is a bit of a strange way to do it: https://github.com/PaulBGD/WebSocketTester/blob/de2bf3e5918a111878939cd8cc64ed2730acfad8/bin/websocket-tester#L11 Why not accept that as an argument on process.argv? Then it could work like netcat, similar to [wsnc](https://www.npmjs.com/package/wsnc) and you could use the command programmatically from scripts. The "friendly" extra `&gt;` output makes this tool difficult to use from scripts: https://github.com/websockets/wscat/issues/2
The project is something quick that I put together to test my websocket server, and there's definitely a lot more that could be done to improve it. I'd love a PR if you're interested in implementing this functionality.
&gt; web designers Pretty sure that was not a thing when JS was being designed.
I'll be honest, I don't really like Vue, but I still like the concepts better than Angular (for the record, my current go-to solutions when possible are React or Ember). If I were going to use a less popular framework, I'd probably be using CycleJS (I may use it for some smaller projects anyway). One major disadvantage of Angular is all the time you must invest in learning 'the Angular way'. Vue is a lot easier to learn. Vue does away with the dirty checking and resulting digest problem. It gets rid of dependency injection in favor of commonJS. It also leaves you to your own devices for a datastore and routing. Vue still keeps the template string languages which is a bad choice IMO. In addition, they really need to switch to some kind of virtual implementation (Google's new incremental DOM approach seems like a decent fit here). Vue drastically reduces directive complexity and enforces the creation of components which improves composability and testability.
The license is actually "Artistic License 2.0" You can read the full license at the link below, it is not associated with the apache license. https://github.com/austinksmith/WebHamsters/blob/master/LICENSE 
Yeah I was trying to read it over and get an understanding to it. I meant that it's "similar" to the apache except you must rename after a fork. Any other major differences that you know of? I really want to look into using this and just wanted to make sure it's compatible.
I completely understand, here is a good basic run down of what the license permits and does not permit. Hopefully this clears up some confusion, https://tldrlegal.com/license/artistic-license-2.0-(artistic)
That's what I use! Fucking love them. Anyway if that's the case then it looks like i can use it! Thanks, and awesome looking library!
This is pretty nice. I see that it's a wrapper around web workers, which is cool. I also have a similar project going that wraps web workers, but it is specifically focused on math, stats, and linear algebra parallelization. It's called [mathworkers](https://github.com/awlange/mathworkers), if you care to take a look. It actually does work to speed up calculations. One thing I did in addition to web workers, though, was to hack a way together so that the library could work for node.js also using the cluster module. Have you given any thought into how WebHamsters might be portable to node.js? Or is that not in scope? I'm curious because I feel like what I did to get it to work was a serious hack.
Agreed, scope keeps biting me in the ass and I'd consider myself above average at this point.
Excellent question, the first and foremost thing that makes multithreading more viable today is the introduction of worker threads. Six years ago worker threads as far as I know were not on the scene or were still in a very rudimentary form. Since web workers allow you to create physical threads on the OS level it has opened up serious potential that simply wasn't there before, I have some gripes with the way the standard was written as I find it unnecessarily complex. We've also started to reach serious physical limitations on what can be accomplished with single threaded/single core designs, with modern smart phones shipping with up to 10 cores on their own now it's hard to see a future where concurrency/parallelism won't become a factor. I'm not entirely sure how this person was achieving "multithreading" but I'd imagine they were doing thread simulation which is similar to the legacy fallback functionality, this certainly allows you to execute things asynchronously and perhaps even concurrently however it is more akin to tricking the system than actually using multiple threads. This may be what they meant by using time slices, using setTimeOut accomplishes a similar thing where you are essentially telling the JIT to only execute the logic when it has a free time slot / it's not busy with other work. I have not run into any issues where execution time was an issue, the JIT and javascript vm have really come a long way in the last few years in both performance and compatibility. That being said there are still limits on what can be done client side, currently during my testing the maximum array size I can successfully send to any single thread is roughly 45 million items depending on the browser. Scaling that up to say 4 cores gives you the ability to process 180~ million items at once which in my opinion is pretty impressive for a client side language. During development there were a few edge cases depending on the browser that certainty threw me some curve balls such as Microsoft introducing unnecessary security restrictions making true multithreading in IE10 less than viable. However in general besides a few older browser quirks I was able to develop the library to run on even a monochrome kindle 3 tablet. In regards to being unable to run X number of lines of code at once I'm not sure exactly what that developer was doing but something the library implements is a fully working thread pool, in the event that your device can run say 3 threads concurrently and you invoke a function spanning across 24 threads the library will simply fire up 3 threads and pool the work by reusing each thread as it opens up until all the work is complete. So you should never really encounter a situation where the browser locks up unless you're simply calculating too much for your device to handle. Sorry for the winded response, that really is a difficult question to answer.
Thank you for this awesome and insightful response!
If you want something super light weight, try [Canvasquery](http://canvasquery.com/) and [Playground.js](http://playgroundjs.com/). It handles canvas rendering as well as mouse events (which appears to be what you need). The library doesn't force you to structure your code in a specific pattern. It acts more like the boilerplate code you would write should you decide not to use any engine at all. I prefer to program at at lower level and have little dependencies. Been using them for [my game] (http://www.larpa.ca/project/island.html) and had no issues so far. The library code is very short and readable, so you can just debug it when something goes wrong.
A big part of this is understanding that functions have access to variables that are defined outside of them. With your first function, `sayMyName`, it does exactly this. `myName` is not a function parameter (which become variables in the function), and no where is the myName variable created in that function, but `myName` is still accessible and you can see Billy logged for a second time when `sayMyName()` is called. This is because that function has access to that external variable. Alternatively, `speak` does not do this. It has a function parameter which is the only variable that speak uses. It does not reach out into the outside scope for variables, though it could have if it wanted to. This behavior is what would allow `changeName` to work. Just as `sayMyName` logs, `myName`, so can you use `changeName` to set it to a new value. I'm actually a little confused by steps 3 and 4 since they sound like what you already have with `sayMyName` because that function is accessing the same outside-the-functions `myName` variable that `changeName` would have changed... or is that something you did on your own that just happened to be something you needed to do anyway? :)
Well, like I said, I used the [cluster](https://nodejs.org/api/cluster.html) module. And I basically create a thread pool of workers for either web workers or node.js according to a user set flag: if (global.isNode) { // Node.js cluster workers global.nodeCluster = require("cluster"); if (global.nodeCluster.isMaster) { for (i = 0; i &lt; nWorkersInput; ++i) { worker = global.nodeCluster.fork(); worker.send(createInitData(i)); this.workerPool.push(worker); this.nWorkers = this.workerPool.length; } } else if (global.nodeCluster.isWorker) { // worker loads script here require(workerScriptName); } } else { // HTML5 Web Workers MathWorkers.util.checkWebWorkerSupport(); for (i = 0; i &lt; nWorkersInput; ++i) { worker = new Worker(workerScriptName); worker.postMessage(createInitData(i)); this.workerPool.push(worker); this.nWorkers = this.workerPool.length; } } I realize it's probably a little ugly to jam a "require" in there like that, but meh. (I am far from being a great JavaScript programmer.) Outside of that branching for the thread pool, all the message passing between the master thread and the thread pool is wrapped into a common communication interface so that my functions don't have to know if they are using node.js or web worker communication. E.g.: comm.postMessageToWorker = function(workerIndex, message, buffer) { var worker = global.getWorker(workerIndex); if (global.isNode) { worker.send({data: message}); } else { worker.postMessage(message, buffer); } }; Finally, the most hacky thing is that I have to surround the core executed code in a big old if, something like this: // Branch the master thread if (MathWorkers.Global.isMaster()) { // Begin the computation once the workers are ready coord.onReady(function() { coord.trigger("compute"); }); // Obtain the resulting dot product coord.on("done", function() { var dot = coord.getBuffer(); console.log(dot); // Disconnect from the workers to terminate the program coord.disconnect(); }); } That part makes me cringe a little. It's really ugly, but if I don't do that, then all my node.js cluster workers execute that code also when they get launched. I don't really know how else to get around that. It's weird then because if I don't have the master disconnect from the thread pool, I get errors or the worker threads never finish. This is where I am kind of unsure about what to do to make it cleaner. Overall, there are a number of things I'd like to do to clean up mathworkers or increase the abstraction. Any suggestions are welcome.
&gt; I can't think of a modern app that is not using map, filter and reduce at this moment. Then you should see the 30k line code base I whipped up without lodash or underscore, and instead with a lot of for()/while() loops. ;)
&gt; The solutions were technically complex; but they were always OVERLY complex. He was basically building complex things for the sake of making them complex. This is the definition of complication, imo, in terms of programming. Uncalled for complexity. 
Doesn't very few hours with phaser so far and me and my kids already have a game with sprites and sounds and collisions and scores. Like less than 6hrs total and that's including audio recording and graphics processing (I have mild experience in these domains, and small prior experiences in Javascript, gulp,etc so ymmv). But yeah phaser is so easy and wow! Just amazing. I've barely scratched the surface. I'm on tutorial#2 and we're like "fuhgetaboutit let's just make a game" I would highly recommended it for a n00b like myself. (and I only heard about phaser about 2 weeks ago) I haven't push the latest (with sound effects and more) but it's https://github.com/feelingsofwhite/games and I'll push sometime tomorrow if you care. But nothing special; follow the tutorial and an hour or three later you'll be at the same spot I am
But you weren't expecting them, now were you?
Edit: http and st were redundant as browserSync seems to start a local server on 3000. They were left over from when I was using gulp-livereload. Currently using this for a game dev project utilizing pixi.js. I hope somebody finds this useful. As someone new to gulp, it took me a while to scrape all the needed bits together.
If you disable JavaScript the internet doesn't owe you usability.
Thank-you so much! And for the follow up resources. Would you mind if I post your fix in the plugin's github and credit your username?
Its called ES2015 and ES2016 now. Its an important distinction because ES2016 allows class properties and thats probably what most people want.
You have a lot of syntax errors. You don't need semicolons after the closing curly braces in `if`statements, and the first `console.log` statement shouldn't be enclosed in curly braces. Here's a working demo: http://jsfiddle.net/tsphx6yw/
While I don't presume to be able to say myself whether Crockford is right about preferring Dec64, I will say that it seems to be an extremely unpopular opinion.
Looks pretty cool. Any real world examples to go along with the guide? Is it possible to get a speedup in real time canvas applications with this or is the overhead / sync to high vs the speed gain at such quick intervals?
By looking into this I learned about the existence of Web Workers. So, while I admittedly don't know a lot of things about JavaScript, I'm a bit surprised it took so long to learn about these. They sound REALLY useful, but not hearing about them until now suggest they aren't super commonplace. What's the catch with them?
The only place where that's a popular opinion is where people don't understand what JavaScript REALLY does. Chances are it isn't static text either if they are using JS to display it.
On this page, it definitely is just static text. There some animations that I understand can only work with JS, but there's no reason why they can't gracefully degrade.
Because here's the real question here: What percent of internet users disable JavaScript? Somewhere in between 0.25% and 2%. Who is it that usually has JS disabled? Disabled people who use screen readers, government workers using outdated platforms, etc. Do I care about those particular people having a good experience on my site? No. Blind people can't see my animations anyways and as web dev I don't give a fuck about government workers. They shouldn't be on my site at work anyways. So what does it mean for me to have backups in case JS is disabled? It means a LOT more code. I can't even use CSS filters without making compatilibity code for 5 different browsers. Why would I waste hundreds of lines of codes on appeasing an incredibly small population of people who won't buy what I'm selling or care about design? That's exactly why I don't support IE8 either. Anyone looking at my site on IE8 won't give a shit about the design anyways. Through their eyes the internet is still a scary mess anyways. Even Google doesn't support non-js users anymore (and thank god). JS-disablers aren't entitled to anything. You can click `view-source` and read the XML on my site instead for all I care, and I believe that's a very justified opinion given how difficult it is to program for compatibility with every configuration.
You need to clarify your question. &lt;textarea&gt; tags already allow you to copy and paste text while retaining the number of spaces and tabs. What is it that you really want to do that textareas don't do by default?
We need to make a clear distinction between web apps and other sites. Obviously web apps need JS and obviously web apps shouldn't need to run on IE8. I unequivocally agree. But if you just have a site with text and images and CSS like OP's site, JS can definitely improve those sites, but there is a neutral state where it's just that text and those images and that CSS. Unless your site is fundamentally designed poorly, that is the neutral state. You might need small fragments of HTML and CSS to show me a message asking me to enable JS, but I don't need that to look fancy. I'm open to an explanation, but I really don't understand how you need hundreds of lines of code just to... not run your code. It doesn't take more code to do less. That doesn't make sense.
First of all, design is important to people. Good design can draw users to your site regardless of how useful your product or site is. JavaScript enables you to keep up with the latest design trends. Whether you fundamentally agree with that is your preference, but that's how it is. Second of all, I'm not sure if you know what JS really does, but a lot on that page likely requires JS. For example the form validation requires JS to ensure the fields are properly filled out before submitting to the server. This is something that usually can't be done to completion with HTML. The issue isn't that you have to write more CODE. The point is that you can't write ANY code for non-js users. You have to use HTML and CSS exceptions which can add up to a lot of code. There is nothing worse than having to recreate parts of your site to allow non-JS users or old IE users to use it. CSS in this day and age is a bunch of spaghetti even for small projects. Hundreds to thousands of lines of CSS just to create a functioning website that still requires JavaScript. Converting animations to CSS or changing entire sections to allow non-JS users to experience them is difficult, especially since most content nowadays is gotten through AJAX requests and similar code. You can advocate for less frilly websites or less JS intense webapps but people love JS. People love good design, and for the most part it's pretty damn impossible to have good, modern design without utilizing JavaScript. If I'm a company who is concerned about making a profit and it will cost $50k to get my site to perfection, but another few weeks and another $5k to get my site compatible with IE6, IE7, and noscript users, will I do it? Hell no. Anyone using either of those three configs is likely to not be enjoying my site or purchasing anything anyways. From a business perspective I don't care about you guys. Even if noscript users do make the same amount of purchases as JS users I still don't care, because you represent around 1% of the population and for it to be worth the 2 weeks of lost sales and $5k of extra development costs, I'd need to be making $500k+ in sales to make it worthwhile. That' why we don't support noscript users. To top it all off, you *choose* to have a bad experience on the internet. It seems ludicrous to support anyone who intentionally cripples themselves. So it's not time efficient, money efficient, and just not worth it.
npm 3 (currently in beta, `npm install -g npm@3`) fixes this by installing dependencies flat unless there is a conflict.
I don't know what is wrong with your textareas. If you just put textarea.value into innerHTML it's not going to display properly (I'm guessing that's the problem). So if you want to display whitespaces as they were written, you have to encode them: * \&lt;br&gt; - \\n (new line, "enter") * \&amp;nbsp; - Non-wrapping space * \&amp;#9; - tab * \&amp;lt; - \&lt; character * \&amp;amp; - \&amp; character
This is weird. Could you tell me which browser are you using? I've just tested it again on latest Chrome and everything seems fine.
You've really got me thinking about this a lot more. The more powerful and featured web capabilities become, the more they will want the sandbox environment of the browser to expand its capabilities into your PC. I guess it's seen as kind of okay to be so trusting of arbitrary code because hey, what's the worst that can happen? We give the browser so little access to things. It's not like JavaScript can just wildly start scouring your file tree without a very sterile, consistent method via. the browser. I don't see how that can remain reasonable as demand increases for what your browser gives access to. "Hey, you know, I could be pretty powerful if you gave me access to your GPU." "How about giving me easier access to files on your PC so I can cloud apps feel more native?" "Aren't you annoyed that you have to allow Flash to use your webcam? Let me do it!" Maybe I'm oversimplifying things. I really don't know as much about web security as I could.
Thanks for pointing these out.
I ask stupid questions, I hate my code and think it's not good enough, I've only finished one personal project of like at least 60-90 ideas
I no longer beat up on myself whenever I feel inadequate in my job. After all the sanity and well being of my brain matters. If I constantly torment it with feelings of inadequacies and low self esteem then I'm not going to be productive at all. All my work is going to suffer. Instead, for 90% of the time on job I wear the hat of an intermediate-learner who knows stuff but has a lot to learn. And merrily I go on my way. The rest 10% of the time I just don't care if I know anything or not. I just push through it without having any feelings for the work that I do or produce.
&gt; Web development is a Frankenstein of moving parts that barely fit together, but it somehow works, and that to me embodies the human spirit. well said!
Just be aware that you are calling a function n times instead of merely iterating n times. I said "be aware", that's all. I've done plenty of map/filter/reduce - while doing spark programming. I hardly ever use it in my JS programs because I feel the loops express much better what I'm doing. Just because everyone thinks it's somehow "modern" doesn't mean anything. I also program very differently when I'm writing R, but that is because my Spark and R programs are much more *data oriented*. It just does not seem a good fit for what I'm doing in JS. A lot of people seem to be insecure binary people who don't understand that all of those are *tools*. Arguing for using trucks, *always*, because it's modern, or only Ferraris because trucks are soooo old-fashioned! Some of the unrestrained enthusiasm for anything perceived to be "modern" frightens me. It seems to me too many people "like" it merely for psychological reasons, it feels like being part of the "in crowd" who "get it". Excitement is great - but please for the right reasons, and much more nuanced. map/filter/reduce is great - pretty much essential even - for parallelization. In Javascript there is pressure because it runs in sequence. So a big pressure to use it that exists elsewhere *and where this stuff was actually made for* does not exist here. Keep this too in mind.
Cheers, I'll give that ago.
Actually no, you have some major problems in the code here. These two lines have the same identifier name: // This immediately prompts the user to supply a variable var user_choice = prompt("Paper, Scissors, Rock."); // This then replaces the above, with "null" because the element its trying to find doesn't exist var user_choice = document.getElementById('user_choice'); In the HTML, you use it like so: &lt;form onsubmit="compare(user_choice, computer_choice)"&gt; &lt;input type="text" id="user_choice"&gt; &lt;/form&gt; If you didn't replace `user_choice` the second time, after submitting the form, the first argument in `compare` would be the value from `prompt`. I'm not sure what you're trying to accomplish - your program has two forms of input for the user to choose rock/paper/scissors? **Suggestions:** You can forgo the `&lt;form&gt;` entirely, and do everything immediately after the `prompt()`, since the user would have already supplied a choice. If you want to use the `&lt;form&gt;`, you can only use `getElementById` if the **element exists in the page at execution time**. So move the script just before the last `&lt;/body&gt;` tag, or use a `window.onload` function. 
Of course I don't mind! I like the visual style of your portfolio btw :) 
Well we're not seeing the same code then? $(".nav-primary").headroom({ ... }) It seems like he's using this [jQuery plugin](http://wicky.nillia.ms/headroom.js/), and in his code for instance he's setting different "offsets" according to the window size, whatever that means it doesn't look like something that can be addressed by media queries. I was curious if there's a good practice for this kind of use case, but I guess the only way is to listen to `$(window).on('resize')` and reconfigure the plugin.
&gt; it's just CRUD frameworks and APIs doing all the real work for you. Because "real" programmers reinvent the wheel every time they need to implement something more complex. 
Thanks dude, I thought I commented out the var user_choice = prompt("Paper, Scissors, Rock."); my mistake Thanks heaps!
I feel that the web developper's main task is to use the right tool for the right job. Using the right framework and libraries to achieve a goal by doing the least complex programming possible. At least that's my experience, because I learned all by myself, I'm not a good programmer. I suck at maths and when I take a look at some code in JS libraries I just keep telling myself "I could never do that, that's way too complicated". So I keep searching for libraries that do the job instead of doing it myself I know PHP, JS, HTML/CSS, NodeJS, MeteorJS, Ruby on rails, I learned the basics of so many languages: java, C, C#, Actionscript, but never achieved anything with these. I can make simple websites, but I feel like I'm not that good. I'm going back to school at 23 and hoping I can really get good at what I'm doing
Yeah I missed that. The way you posted your code, you had commented out the first three `var` lines, so it was a bit cryptic! For future reference: // For code blocks of many lines, indent EACH line with 4 spaces var name = prompt("Your name?"); alert("Hello" + name); For oneliner bits of code, wrap it around two ticks, like so: `console.log(document.title)`. `console.log(document.title)`
&gt; But the damage to my self esteem has been done, and the negative thoughts have been ingrained I wrote a long piece about me because I've had a hard time due to stress and this story resonates with me, but instead, I wanted to make a comment directed to Joe. You're 20 something and you have been providing for your *entire* family. I'm sure that would have put you through a lot of stress and you're commitment to help your family is **admirable** in itself. But a lot of what you are describing sounds like an ongoing stress response and without help its *very* difficult to get back on even ground. Might I suggest that you find someone to talk through everything with, possibly professionally since you may need that level of help to get to where you want to be. And believe me, I say the above wishing you all the best!
There are a lot of programmers out there who are doing web development as their chosen profession even after getting a comp sci degree. Don't ever feel guilty that is what you do, or how you've made money for yourself. Not having a job feels a whole lot worse, and you can't do shit for yourself when you have no $$$. Learn to be more proficient with the technology you already use. I currently use: php,js,html/css (linux,mysql,redis,memcache,rabbitmq,zeromq) in my current stack using silex, doctrine2, composer, underscore,jquery,ratchet, just to name a few, and this is by far not even encompassing. Learning to be an experienced programmer is mostly about learning to solve a problem(s), either in school or by oneself. Good web developers are more on par with good software engineers because of the process it takes to build a site from the ground up, especially one with very specific pieces. Programmer writes code, often disorganized to solve problems. Software Engineer builds a maintainable application / framework / documentation / ecosystem. Good Web Developers are multi-disciplinary in how problems are solved from choosing the right frameworks, organizing information in a usable way, knowing when to use specific libraries, reading often enough to be exposed to libraries and holding on to information for later dates. The "Engineer" in Web Developers is usually derived later in ones career after having seen a lot of "battles" working with people or experiencing a lot of shall we say abomination/Frankenstein codebases. Some engineers as they flower decide to move away from their 1st language, some decide to improve with their existing tools and become better. The key is how people respond, either cut cold turkey to learn better habbits in a new language or modify existing habbits to write smarter / more maintainable code. Don't ever let yourself think that just because you write markup all day doesn't mean you don't have to organize it. Build it in modular fashion. Organize your stylesheets. Not doing one of these things and then handing over to some "code monkey" to take on your mess? No, the software engineer/web developer approach is F that, do it right or do it twice. Web Developers usually are jacks of many trades. Often times "self-taught" which is rare to see someone really "learn web development" from college.
```&lt;MyComp/&gt; === React.createElement(MyComp, null)``` so it makes sense that `&lt;MyComp /&gt;.state === undefined`.
oh did you know that it doesnt work with the javaxcript tab yknow functions
sorry what i meant to say was functions in javascript dont work in the javascript tab
Yeah, that mentality bugs the hell out of me. I've been a professional programmer for more than a decade and have done everything from web work to writing graphics stuff for desktop systems and the whole "real programmer" thing is asinine. Everyone in our field uses templates, libraries, and frameworks. *Everyone.* In fact, if I see a junior programmer trying to implement something from scratch I will often say that while I think it's admirable that they want to learn how to do that themselves, I'd prefer if they use a library if possible since more thought, planning, and analysis has gone into most libraries. Plus, it's faster; in my experience dev teams tend to be overworked and libraries are an efficient way to implement features. I think this mentality stems from the low point of entry that web programming has. I think that's a good thing though; a web designer generally knows enough to be dangerous, because the point of entry is so low. That can be beneficial for the overworked dev as the designer can do simple stuff while the dev does more complex things. It's also worth mentioning, during my career I've seen plenty of folks who've gone from one of the "real" fields into webdev and they struggle just as much at first as a webdev into a "real" field. The difference is that there is so much educational literature in webdev that they can read and get unstuck relatively easily, where in graphics for example you are generally just stuck with a API guide (if you're lucky) and the advice of others.
Impostor syndrome is one of the hardest things to get past, even if you have all the 'right' qualifications. Believing there is a 'better' level of knowledge just out of reach will keep you frustrated forever, because no matter how hard you look there will always be someone doing something harder nearer the metal. The answer (for me) is staying focused on the output. We're all using tools created by others before us. The real measure of achievement is what you do with those tools and whether you can make something great. "If I have seen a little further it is by standing on the shoulders of Giants." - Isaac Newton 
Clessg, what do you think about Vue vs Ember?
Remove semicolons after "if", "else if" and "else" curly braces.
Yeah, I can't wait for that.
I am a learned software developer who loves web as a platform way to much to let it go. For me personally it might have been using linux since years and the browser was basically the simplest platform to create things that work everywhere. I agree with you, and i think those are just 2 different mentalities mostly. The classical software developer tends to find his topics and get very good at them over the years. The typical webdeveloper is the guy who wants/trys new stuff all the time and is willing to change the whole dev stack every other year. IMHO none of them is generally worse as the other. But in my experience webdeveloper tend to miss to build a deeper understanding for their anyway _temporary_ tools.
Welcome to Javascript! www.jsbin.com is usually faster/nicer/kinder/lovelier than jsfiddle. There are others, but as an avid javascripter I've always thought jsfiddle was the slowest.
No real catch, the way the spec was written was really to allow people to compile existing programs in c or c++ into JavaScript. It is in my opinion unnecessarily complex and the traditional way of using them expects you to reference an external file to run on its own thread instead of being able to thread individual functions hence why I wrote WebHamsters. The barrier to entry for it is just really steep if you are not using an abstraction layer.
The speed up is really dependent on your specific problem, if you are using typed array support you can expect some pretty good scaling. I had some demos on jsperf but since it's been down I'm in the process of building a benchmark like suite so people can test different devices and get a good understanding of potential performance. Have you read about Amdahls law? I think that would be a good place to start if you are new to multithreading. Expect maybe 20-30% performance improvement without typed array and really the sky is the limit if you are using them since the transfer cost is almost 0 Wanted to add, these are not performance comparisons but if you want to test if a specific device is able to make use of the library there are a few test cases you can run. http://hamsters.io/test/ http://hamsters.io/mobile/ http://hamsters.io/kindle/ These should only be used to test if a device is able to run the library, not really useful for performance comparisons.
Understood, however since my target audience is almost strictly JavaScript developers it seems odd to invest the time to have it fall back to simple text mode. Is there a reason you don't like using js? I can't recall the last time I visited a site and got a "this script is not responding" message.
My bad, I just double checked myself, all seems good, no bug. :)
sure - after the view (html) is rendered, theres no way to tell what link the person clicks.. only that '.item' was clicked... so we have to find which item was clicked. this code sets id to null, so we can check later if it didnt find anything then it loops through contactarray, comparing the clicked items html and the name of the current item in the contact array `$(event.target)` is the clicked item... `.html()` will print the html of the clicked item `contactarray[i].name` is the name property of the current item if it doesnt match one it console.log()'s and returns if it does it calls displaysingle(contactid) 
I agree, to me you reinvent to wheel only to learn how it works
Ah I see, this is a little off topic but have you looked into webGL at all? You can accomplish your matrix needs by making use of compute shaders. I'll admit I only have a basic understanding of them at the moment as I'm still learning but it seems that would be much more viable for what you are looking for in the long run with much less overhead. 
I'm not against people reinventing wheels, my point is that nowadays (almost) nobody deals with the low-level, "real" programming. One way or another you're working with some kind of library/framework/API.
Truth. "Reinventing the wheel" is a reddit apology for laziness and not knowing how things work. If no one wrote their own code then no one would know how things work and they'd all become redditors.
This is awesome... I can relate to a lot of this. It's taken me a while too- but I think I've found a place where I'm content to say "I'm a web developer" ... I can't make drivers... I don't know C But I can make you a hell of a nice website. And I enjoy it. So for what it's worth- that's solid enough for me. Think of all the people in the world that can't ... or won't learn PHP, HTML, CSS or JS If you know those, like *know* those. You're going places... that's not nothing. As for WordPress - that's just as huge anymore... calling a WP developer stupid or lazy is like calling any other user of a CMS stupid or lazy. You don't use them because you're stupid or lazy... you use them because it's *smart* to not re-invent the wheel and spend months making and fixing your own CMS. Anyhow... /ranting now... Thanks for an excellent post.
Here is something interesting I've learned in my many years as a web developer: "Real" software engineers are behind some of the absolute worst websites I've used and maintained. What matters is being a professional in your discipline, and being able to speak and develop with authority. The best C++ engineer will never make anything nearly as good as a good web developer.
&gt; Web Development is not real programming &gt; ... &gt; Setting up a Wordpress blog takes significantly less knowledge and effort than building an operating system. That's because "setting up a Wordpress blog" is not web development.
Be a programmer long enough, you see enough of your work become obsolete, and see enough people make the same historical mistakes, it effects you. Your self-confidence doesn't necessarily grow, but you learn to recognize other's *opinions* as just that: opinions, not facts. If you make an automation machine perform a task it otherwise would not have you are a programmer, all else is opinion.
I agree. It's worth mentioning I'm always encouraging everyone to try new things. We try to have enough time to do a little training or POC projects and that sort of thing. For prod code we are generally on a very tight timeframe so efficient is better, because there are code reviews and the subsequent improvements from those reviews.
I don't mean to sound harsh, but the articles makes me want to be the (seemingly) devil's advocate.. I feel like i'm reading a couple of confused thoughts, and a little unnecessary despair.. While i agree web development is very often called "easy", i don't hear that so much about Javascript, which, since *Javascript - the good parts*, seems to gain some deserved recognition. But then the most disturbing thing is how the only thing you're looking at is your abilities, or worse, the ones you perceive. In the long run, motivation takes real good advantage of a little self-denial. Why is it so hard to accept that: yes lower level programming requires heavy abstraction skills, way beyond the incredible mess that we call internet. Yes, when you get to take into account memory management daily in (C, assembly etc.), or optimisation, or to put it simply: dealing with critical parts of computing that so very few people will get to even acknowledge, well when you do that, you *do* rely on greater mental skills that you *need*. I'm sorry but stereotypes exist for a reason, and the one saying web development doesn't really compare i find hard to argue with. All in all i just think you got the wrong approach, compare raw brain powers and yes it's very reasonnable to think you're not as good as a linux kernel developper, you're better off accepting that. But hey, what made you compare the two in the first place, what do those have in common really? If you ask me, it's not the same job, the keyboard is the same, but the minds required are so far appart. For what it's worth, i've got an analogy for you: take guitar and bass, they look alike don't they? Strings, neck, amps. Well, you'll find a lot of bassists telling you: bass playing is closer to drumming. Web development is sure made possible by computers, but there you deal with actual users, you deal with the largest chunk of legacy code that was ever produced, you deal with *everything*, at once. No wonder you don't get your brain to the beautiful fields of mathematical abstractions when reality strikes you every second...
I'm a real programmer. I don't even use directX when I write games, I write my own drivers in assembly. 
I like using them to use negative indices on arrays. new Proxy(arr, { get: function (target, name) { var i = +name; return target[i &lt; 0 ? target.length + i : i]; }, set: function (target, name, val) { var i = +name; return target[i &lt; 0 ? target.length + i : i] = val; } }); See this article from 2013: http://dailyjs.com/2013/11/15/negative-array/
Wow yeah that was spot on. You can apply that to most of reddit, really
Shops with engineers lacking experience in the security space. There are a bunch of home-grown solutions that you never hear about unless you get on a call under NDA
Not sure I follow you.
These are my precise thoughts and experiences on the matter. Can't upvote enough.
Exactly. It's literally made to be as easy as possible for non-technical people. 
Let me help you and us here. Now that you idenified the real struggle, now that you have that angry/sad emotions down in your stomach and now that you understand what you really want even tho you dont see it yet; Go out there, create a better way, create and do what you love and dont stop until you find it. Rock the fcking world baby! ;)
Thanks for the correction.
The link brings me to 404 page
The egcd is a well known standard algorithm, which expresses ggt(a,b)=s*a+t*b. As this is a mathematical function, I used to keep the mathematical notation of this function and think that it is still readable and easy to follow. 
What makes you think he did things "the stupid way"? If his code is readable and performs well, what's the problem? Know what I think is "stupid"? Jumping on trends and fads and denigrating anyone not on the bandwagon. 
Well, you had me at the name 🌹
Yeah. Or that.
I took this more about how the web works. Like html kinda sucks, css definitely sucks, JavaScript kinda sucks, and all of this runs in specialized browsers that implement features in different ways and could be evergreen or several years old
Yeah, I've written software that uses ARP tables and graph theory to make a network map because nobody else on my team could think of a way to do it. Now, I work on a web dev team and most of what I do is using rails and frameworks and coaching other devs on doing the same. Kind of silly to think that I'm any less of a programmer just because I don't *have* to do anything like that on a regular basis anymore. To be fair, we do have multiple services, front end apps, rails engines, a java core app and multiple other backend systems to work with. But I feel like it's no less complex than when I was writing Node.js/C for embedded devices that had a web interface (everything from manually sniffing packets in C to realtime data via web sockets in Node).
Indeed. That comment really annoyed me. Screw the "Web development is not real programming" mentality. That's total BS. There is so much that goes into building complex web apps... especially if you are multi-disciplinary and also handling things like UI/UX design on your own... you have to think about modularity &amp; maintainability (the "engineer" perspective), you have to optimize for performance both on the server and the client, you have to think about usability and user experience, you have to think about design, style, animation, you have to be familiar with (often) multiple databases and query languages, you have to keep an eye on the latest build tools and know how to use them, you have to constantly keep up with the rapidly evolving front-end JavaScript landscape... and on and on and on. It's usually only people who have no experience with real web development who write it off as "easy" and not worth doing.
I think of it as of a natural reaction to becoming an adult.
&gt; I think that's a fairly naive way of looking at it. We spend *a lot* of time thinking through the features of our website and how to implement them best. That immediately reminded me of [this](http://j2kun.svbtle.com/programming-is-not-math-huh): &gt; So this is like, how to organize a website to make it easy for users to find information and streamline their workflow. I’d question whether anyone in the industry can really be said to be “solving” these problems rather than just continually debating which solution they arbitrarily think is best.
"Web Development is not real programming". I haven't figured out if you decided you were wrong about that, or if you still believe that. It's not true. It's just a different programming. And there are most definitely a huge difference between accomplished javascript / php developers and the lowest tier. This is true of all languages, all systems. A long time ago, a guy once told me that he believed that anyone could program anything given enough time. The best programmers shine by doing it better, or doing it in less time, or doing it in a more efficient manner. (he also said that he thought i could program anything in any language faster than anyone else that he could find .. which while flattering, is definitely not true, i am far better with interpreted languages than compiled languages.. but that's because i'm very good at finding ways to improve my workflow when i'm not stuck waiting for things to build) Javascript is actually really far more interesting to me, and to a lot of people now, than it was a few years ago, because it has become so ubiquitous, and is found in so many more places other than the browser -- there's browser, node.js, qt qml, unity game engine, someone's working on a way to interface it to Unreal Engine 4.. and if you take a look at something like the (formerly Palm, formerly HP, then Open and now LG) webOS system -- a huge chunk of that system is built on 3 of those 4 technologies that incorporate Javascript. 
TIL: Functional programming is a "fad". &gt; What makes you think he did things "the stupid way"? Because using for/while loops exclusively is dogmatic. He clearly didn't write his code carefully considering the advantages of using a functional style, which is stupid.
If you ever want a raise, ^ here's your template.
It's the whole "you know what you don't know" deal. By feeling that you need to step your game up, you push forward and learn. On the flip side, if you think you are a god, why would you learn new things?
[Dunning–Kruger effect](https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect)
In addition to what has already been said, the language was created within a span of days so there may have simply been the reason "we don't have time for that". However, it's goal to reach the simple-minded web designer is brought a little closer by having one type of integer. Also along with that comes the whole dynamic type thing too. 
Who said anything about thinking they are a god? He said that he has lots of certifications and experience, but yet he feels like a fraud, and that if you don't think that way you must be incompetent and/or delusional. I do not think I am a god, and I know that there is a ton left to learn and things I can improve on. But at the same time, I recognize my accomplishments and have confidence in the skill level that I am at. I recognize that I am a lot better than I was a year ago. So again, why does confidence mean that you are actually incompetent or delusional? Sounds exactly like imposter syndrome to me.
It's a little bit hackish, but you can just define an array of 7 offsets, one for each day of the week. For example, if the current day of the week is Sunday, the offset is 2, as you need to add 2 days to get to Tuesday. [Here's an example](http://codepen.io/a4epirZJ96/pen/dojaVY?editors=101). I'm assuming that you don't want the same day, i.e. the next available date for a Tuesday is Wednesday, but you can adjust the offsets if that's not the case. 
Basically Dunning-Kruger. As you learn more, you also discover even more that you don't understand. 
Absolutely, but that doesn't mean you can't have confidence in what you *do* know. How do you even land a job if you can't even prove to yourself that you know what you're doing?
I can't get over how beautiful accessing the last element via `arr[-1]` is. I assume this has to be done a case by case basis?
I'm not talking about you personally... ಠ_ಠ I was only trying to say that confidence isn't bad. But, God syndrome is bad.
It's pieced together from a larger auto-curry function I made a while ago (I'm thinking about extending it with a placeholder like in Ramda). I just copied the relevant bits. export var curry = (function () { var curry1 = function (fn) { return function curry1fn(a) { return (arguments.length &gt; 0) ? fn(a) : curry1fn; }; }; var curry2 = function (fn) { return function curry2fn(a, b) { switch(arguments.length) { case 0: return curry2fn; case 1: return curry1(function(b) { return fn(a, b); }); default: return fn(a, b); } }; }; var curry3 = function (fn) { return function curry3fn(a, b, c) { switch(arguments.length) { case 0: return curry3fn; case 1: return curry2(function(b, c) { return fn(a, b, c); }); case 2: return curry1(function(c) { return fn(a, b, c); }); default: return fn(a, b, c); } }; }; var curryN = function (len, prevArgs, fn) { return function (...args) { var currArgs = prevArgs.concat(args); return (currArgs.length &gt;= len) ? fn.apply(this, currArgs) : curryN(len, currArgs, fn); }; }; return function (fn) { switch(fn.length) { case 0: return fn; case 1: return curry1(fn); case 2: return curry2(fn); case 3: return curry3(fn); default: return curryN(fn.length, [], fn); } }; }()); 
The truth is that web development is closer every year to other forms of programming. 15 years ago doing web dev was really simple. Today we worry about performance, memory usage, oop patterns, scalability, low level graphics, and long etcetera. Pretty much the same concerns a desktop / mobile / game dev deals with every day.
Yeah, and they build their own processors and computers from scratch too.
They actually do work in that tab: Senocular's fiddle even shows it. Another way to make that function work is to set up the event handlers in your JS, rather than in HTML event-handler attributes, like setting `id="like"` on the `button` element in HTML, and then in JS, using a line like `document.getElementById('like').onclick = whatDoYouLike;`
Installing WordPress, installing WordPress plugins, installing WordPress themes, configuring all of the above to work together, etc. There might be a small amount of tinkering with the theme, or if there is a custom theme you might have to code it. It's pretty rare that you'd want to do something in WordPress that you can't find in an existing plugin.
Doing something for your job? Use existing tools and libraries! If you need to modify or add something, try pushing it up upstream too! But if you're doing something for fun / as a personal project, go nuts and reinvent all the wheels! Reinventing the wheel is a great way to learn, and you could end up actually making something that's better from the "norm". 
I was under the impression that creating a custom WordPress theme or plug-in takes a bit of Web development skill... 
It does. But I consider that more "modifying WordPress" than "setting up WordPress".
Anywhere you'd pass a curried function into another function as an argument. Last week this link was on /r/javascript, [Professor Frisbee's Mostly Adequate Guide To Functional Programming](https://github.com/DrBoolean/mostly-adequate-guide/), in which he gives a _LOT_ of fantastic examples. This is one in chapter 9: var setStyle = curry(function(sel, props) { /* omitted */ }); var applyPreferences = compose(join, map(setStyle('#main')), join, map(log), map(JSON.parse), getItem); Here you'll see that setStyle is called with a single argument, but it's defined with two arguments. That's typically where you get most of your utility out of curried functions, i.e. part of chains.
Hi /u/sandjs, this post was removed because the link is apparently dead (404).
This is a strawman point. No one thinks that things should be reinvented gratuitously. The prevailing mentality (as was put by a friend of mine) is that "web developers are too comfortable relying on magic." The idea stems from the simple fact that the barrier of entry is extremely low.
Is there a reason why you don't just link to the intended destinations in the original links? No JS required! 
[This answer](http://stackoverflow.com/a/21198129) on the page you linked has everything you need — it's practically a pre-made solution. "it just won't work" is useless. If you want help, show us exactly what you've tried, describe what happened, and describe how it differs from what you wanted to happen. 
Can you describe the use case a little more? Do you control the server the page loads from? Are the resulting links always baseUrl + fragment? It sounds like you could either use an on-click handler with something like $(link).onclick(function(evt) { evt.preventDefault(); var fragment = evt.target.attr("a").split('#')[1]; window.location(base + fragment); }); A better solution can be given based on your use case.
There's a far easier way: watchify -dv -t babelify index.js -o dev/bundle.js
I too would like to understand the use case for this. 
Web developers are real programmers. I know for I am one. I can install the wordpress.
wow people have really jumped on the flux/react bandwagon.
I placed the &lt;script src="javascript.js"&gt;&lt;/script&gt; below the bottom &lt;/form&gt; tag but after I submit the form I dont think the compare() function runs and nothing is alerted.
Hey thanks for the response. I was unaware you could change the value of a variable after you have already declared a value for it. So here is what I ended up with: function changeName(newName) { myName = "Franky" } changeName(); function logName() { console.log(myName); } logName(); Which technically works and outputs "Franky" but what I am confused on is why they had me give the function "changeName" an argument of "newName". Was I supposed to use it? I'm confused about arguments/parameters in general. Like in my speak function, "phrase" is just a variable basically. Whatever I put inside the quotations when I call the function will be stored as "phrase" and then will be logged by the console. So "phrase" could really be anything, like "x" or "bh5zq". Right?
Ok so from what you said I took away that I had to re-declare myName inside the changeName function. AKA reaching out of the scope of the function for the variable. Here is what I have: function changeName(newName) { myName = "Franky" } changeName(); function logName() { console.log(myName); } logName(); This outputs "Franky" but why do they want me to give changeName a parameter of newName? Where was I supposed to use it? newName that is. P.S. How do you put single words into code format like you did in your comment?
I disagree. For me, one of the most important parts of handling this feeling is seeing and hearing other people talk about it and see them deal with it. Every time I start getting down about myself, I remind myself that this is a common problem in the industry. Chances are I'm still doing good work (haven't gotten fired yet) and haven't anything to worry about. Imposter syndrome is one of the few things that I honestly believe the cure is simply know that it exists and is rather common.
I read over his post history, he is a novice developer, and likely didn't know how or why to use a functional library. Plus he is a smug asshole, so fuck him. And this is a throwaway troll account, so I literally cant even.
Is javascript the actual language needed for this? Can't the redirection happen server side? If not writing a regex in http rules, PHP could do it. What happens if the person has no js on. Why would I have, as a user, the need to load the whole DOM to actually be moved to another page? What is the purpose of this? 
Here is a more flexible solution using an "object" (which is really a key-value pair data structure): &lt;script&gt; var nameToDestinationMap = { "Idaho": "http://www.reddit.com/", "google": "http://www.google.com", "fb": "http://www.facebook.com/" } var name = window.location.hash.substring(1); // writing object[key] returns the value of the key (called property on a javascript object) // Its the same as writing, for example, 'nameToDestinationMap.google' but we cannot write that // syntax dynamically, hence we write nameToDestinationMap[name] var destination = nameToDestinationMap[name]; // If there isn't a value found in the map based on the 'name', // then 'destination will be 'undefined' which is a false value in JavaScript if ( destination ) { window.location = destination; } else { document.write ("NOT TRUE"); } &lt;/script&gt;
I dunno man, but there's no need to an asshole about it. Seems like he's a beginner.
^this
I encourage you to take a look at [this thread](https://www.reddit.com/r/javascript/comments/3dqvwf/webhamsters_javascript_multithreading/ct8dux4) where I did a far better job of explaining why I use noscript. I do not argue against less frilly sites and I do not argue against less intense web apps. That is a dramatic mis-characterisation of my position. Also, web apps are, again, completely irrelevant to this. I absolutely understand the value JS can bring to design and UX. That is a cause I am unequivocally sympathetic to. JavaScript definitely can improve UX for those who have it enabled. Tell me your site is better with JS, and I'll enable it too. Tell me your forms validate client-side, and I'll run your code too. I know that by running JS whitelist-only, there are going to be some occasional UX issues. Completely equivalent UX on every site across the board is an unreasonable. I am not asking for the same UX, I am merely asking for *some* UX. Any UX at all. When I go to OP's site while blocking JS, and I open up the inspector, all the text, all the structure, all the images are there. My connection loaded it, my browser parsed it, but I just get a blank white screen. I am not requesting the same UX, I just want *some* UX. I am merely advocating for graceful degradation. It's great that your forms validate client-side — really, that's great. That's great UX. But your going to just validate my input on the server again anyway. Client-side validation is unequivocally better UX, but there's no reason why not being able to do that means I have to get no UX, just as an example. If clicking on a link would trigger an AJAX request, and I don't, I did still click that link. You can just let the browser reload the page. It will be okay. That is the neutral state. Dynamic and JS-driven applications are out of the question here, but I really do believe that if you just have a website with text and images and CSS and what have you, you have done something wrong if you need to exert energy to support me. You made a website; it supported me by default. If it doesn't, then you have broken what was already there. 
I encourage you to take a look at [this thread](https://www.reddit.com/r/javascript/comments/3dqvwf/webhamsters_javascript_multithreading/ct8dil1) where I did a far better job of explaining my position. "don't like using js" is nowhere close to my position, but I understand why what I said might have made you think it was. I am merely advocating for graceful degradation. When I visit your site without running your JS, everything is there. The text, the structure, the CSS — I can open the inspector, and it's all there. My connection loaded it, my browser parsed it — it's all there. But it's a blank white screen. Your loading spinner makes your site feel a little nicer, but if your nice little loading spinner doesn't get to display, your entire site ceases to exist. The loading spinner might make a little nicer UX, but without it there is literally no UX. You do not need to run JS in my browser just to put text on my screen. It could be nicer, but it is not a *necessity*. You definitely do not need to run **652kb of JS holyshityouneedtodosomethingaboutthatimmediately** in my browser to merely put text on my screen. EDIT: Developers like you who make me download and compile and run ungodly amounts of code to ultimately achieve very little are a big part of the reason I block JS by default. EDIT2: And for the love of god, if your site explodes without JS, please tell me. Don't just leave me to wonder whether or not my connection has died.
Totally agree, currying and/or partial application is the most useful if you are using function composition. Which is something I would highly suggest integrating into anyones daily use of JS. Lodash has some function composition methods: `_.compose` (right-to-left) and `_.flow` (left-to-right). I prefer flow because left to right is more intuitive to me.
There's an emacs command for that
Guys, guys, he's right here listening to you talk about him
**TL;DR use window.history, not #links** Since introduction of [History manipulation API](https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history) (where you can completely change the browser's URL without reloading the page) it's best to just use regular links without the #. Cross-browser library: [History.JS](http://www.javascriptoo.com/history-js). \#link is historically used to be able to go to a specific location **on** the page (location \&lt;a name="place_in_document"&gt;, jump &lt;a href="#place_in_document"&gt;). If you use it for moving between different pages, you cut out that functionality. Also search engines and javascript-less browsers don't understand #links.
The reason the DOM is slow is because it has to support every possible use case. Something as simple as reading some attribute of an element might cause an expensive reflow or recalculation of styles, because that attribute is in some way related to information that is only known after everything's been laid out. And you can never quite be sure when that's going to happen. It's got nothing to do with partial diffs. It's that there's nothing you can do with React's quasi-DOM that can possibly trigger a reflow, because that doesn't even exist. (And also that there are no host objects involved, it's all pure JS. Pure JS is easier for the engine to optimize then when code is constantly sprinkled with calls into and out of native code.) That also means that you can't do all the things you would be able to do with the real DOM (e.g. query `elem.clientWidth` of an element.) A browser can't suddenly stop supporting those things, because tons of pages would break.
cheers man. cannot get it to work however. not even in the jsbin :/
&gt;¯\_(ツ)_/¯ You've even lost your right arm. :(
The life of a Software Engineer is a dangerous one (⌐■_■)
To be honest, I think "web development" has been split into different categories. One of them are the marketing people who investigate which Google Adwords have a high pay per click, order some graphics for the subject from India, slap them onto a Wordpress template and wait for the money to roll in. Is this hard to do? No. Is it "web development"? I guess so. But it is quite far from those of us who actually sit around and do actual programming on complex apps all day long, using and contributing to open source projects, maintaining back-ends and so on. I've been part of both worlds and they have almost no people or mentality in common. As a programmer, I prefer the latter by far.
http://hilton.org.uk/blog/javascript-frameworks-days.png Sorry, could not help it. Im sure its a great library
&gt; "web developers are too comfortable relying on magic." ... but what's the answer if there's so much new stuff coming out all the time? 'Web development' is a massively broad range of topics from databases to network security to video encoding. 
Indeed. I once hit the table with my knee. Several seconds passed before the pain went away. Stay safe, my brother!
I'll try to put things into perspective for you as it seems that you are blaming others for your choice of a degraded user experience. Developing open source software takes time, and money..that limited amount of time can either be used supporting 1% of the internet who chooses to visit a site about a javascript library with javacript disabled or that time can be spent providing a better experience and better software for those who will actually make use of the library. Which would you choose? The best scenario I can provide you in this case is a redirect to the github project page if you have javacript disabled however i hardly find less than 700kb a massive download in this day of age considering on my own modest connection it only takes roughly 200ms total to fetch all the required files for the site...the site isn't using javacript simply to display text it's being used for spam deterrent as well so others can contact us for support questions with the goal to help drive adoption. There is no analytics tracking or anything of the like. 
&gt;d3issoamazingicantwaituntilireallyunderstandit.js I bet all D3 devs have been there. :D
There's an [epilogue page](http://christabor.github.io/etude/epilogue.html) that is quite interesting: &gt; WISDOM UPGRADE &gt; &gt; 1. It's hard to do anything, especially write a program, once a day, for a year &gt; 1. JavaScript is so verbose (I already knew that) &gt; 1. Trying to force creative programming is both exhausting and exciting &gt; 1. Beyond discipline and learning, my motives evolved over time, and I learned about myself as a result &gt; 1. It is fun to do something for the sake of experimentation, but it's not always appropriate to do it in a language not designed for it. &gt; 1. I have really begun to appreciate long-term projects &gt; 1. HTML is basically unparseable &gt; 1. Python is so much more fun to use &gt; 1. Sometimes sketching an idea or implementation on paper makes all the difference in the world &gt; 1. Programming while falling asleep becomes a real time vampire &gt; 1. Ideas are easy, implementations are not &gt; 1. Math has amazing properties that are undervalued in programming &gt; 1. d3.js is pretty great &gt; 1. Visual programs are easy to demo, but do not always provide a useful challenge for continuing your programming skillset &gt; 1. The zero, one, infinity rule is vital for maintainability &gt; 1. The right data structure makes all the difference in the world &gt; 1. You can do a lot in a short amount of time; put another way, Parkinson's Law is very real &gt; 1. The web needs better ways to syndicate and share data across websites (e.g. cross-domain, parsing, security, consistent representation) &gt; 1. You'll be amazed at what you can do when you put your mind to it &gt; 1. Declarative programming is the one-true-way to design APIs &gt; 1. ... many more!? Many of them are pretty great points. I'm quite amazed that anyone could keep op with a project a day. Sure, they are small, but still.
We've used the library so far mainly to create apps for our customers, so I'm a bit in trouble showing "large" examples. The largest app that will be available for "the public" is InSite Feedback ( http://insite-feedback.com ) I'm currently working on. Both website widget and control center has been built with modoJS. I've also prepared updates for SimpLESS ( http://wearekiss.com/simpless ) and SpritePad ( http://wearekiss.com/spritepad ) that are both based on modoJS, but are not online right now because I'm not ready with them :( I'm working hard to at least make those projects all available for public access, soon - bear with me, I only have two hands and 24hours a day :D
You will laugh: EXACTLY because of that I always call this project just a _library_, not a framework. :D And exactly because of this, the library is based on BackboneJS and jQuery - because "I've seen milk lasting longer than some frameworks" ;)
Here is the course i'm currently taking, might help you get started. https://www.coursera.org/course/webgl I didn't create this but I did multithread the startup however this is an example of conways game of life using compute shaders in webGL. http://hamsters.io/test/life/
I don't know the terminology. I've found links that you guys have sent already but I don't know anything about JavaSript so I wasn't able to get them to work. My post was unhelpful, because I did 0 elaboration, I get that, but I appreciate the time that people on this thread have spent trying to help me.
Heh, I'm admittedly not on that level.
Thanks. I am a beginner.
Thanks got this to work!
Suppose one could do these in advance, like if you are in a super-flow-like mode one day you could pull out five of these and just let it rest for the next four days. All depends on how you count it and how you see it. 
There's no constructor, it is just a single function (which does take the API key). :) Cloning is only necessary to run the unit tests and demo from source. If you have your own key you can just copy the example. 
Fair enough :) And I LOVE this culture in JS to open source for the greater good. But choice can be daunting also. Kind of a first world problem I guess
Sorry. missed that message. Didn't quite understand what you meant by that last sentance in your previous comment tho. Do you have a skype adress or something? I think that would be easier.
I don't use Skype. Here is the script from link #1: if (document.location.hash === '#foo' /* &amp;&amp; document.location.pathname === '/return-policy/'*/) { document.addEventListener('DOMContentLoaded', function() { document.querySelector('.span-mail').style.backgroundColor = 'yellow'; }, false); } If there is particular fragment at the end ('#foo') and if the user is on a particular page (commented out), I add an event listener for [DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded). This listener, when it's eventually ran, set the background color of the first span with the class "span-mail" to "yellow". Note: When you try this in your browser, you can't just navigate to that page, add the fragment, and hit return. You have to hit F5 after that. The fragment needs to be there as you navigate to the page.
This is the first I've heard of this function, i knew toString was there tho. This might be useful for sorting objects.
Full github link: https://github.com/christabor/etude
I used this "trick" to implement semi working nix like pipes some time ago https://github.com/dzautner/jsPipe
Yup, the kitchen sink is a mess. One of the unfinished parts of the project. Actually listed in the "to do" page... I think I just forgot to remove the kitchensink URL in the themes section, sorry ^^ The line you refered to is a way to make sure jquery is being loaded if the CDN is down/not reachable. If the previous script has a timeout, the script will be loaded from the "local" webserver. Thats a pretty common pattern in the web.
disclosure: self submission.
As someone putting a lot more emphasis on FP at the moment, what do you think of something like [cycle.js](http://cycle.js.org/)? To me, it seems like *understanding the concept* of streams is much harder than the usual OOP/MVC. On the other hand, *implementing complex, async logic* seems a lot easier with streams, once you understand them?
EDIT: Just wanted to add that I like your post and think it's a great introduction to .valueOf(). Is there any reason to prefer .valueOf() over get/set in general? Get/set seem ideal in the integer case because the automatic boxing means that things like `obj.value = 123;` work transparently. var num = { _value: 12, get value() { return _value; }, set value(n) { _value = n; } }; 
If you're using Angular your best option is [protractor](https://github.com/angular/protractor) for e2e testing and they recommend [Karma](http://karma-runner.github.io/0.12/intro/installation.html) &amp; [Jasmine](http://jasmine.github.io/1.3/introduction.html) for unit, they have a pretty comprehensive guide here: https://docs.angularjs.org/guide/unit-testing
http://d3js.org/ :)
&gt; User is navigating on the page -&gt; clicks "contact us" Where? Also, in which file is this snippet? By the way, 57 JS files and 15 CSS files is pretty bad. YSlow gives that page a D grade. Anyhow, since there is jQuery, you don't have to use DOMContentLoaded. Just use jQuery's "ready". You can also replace this: document.querySelector('.span-mail').style.backgroundColor = 'yellow'; With: $('.span-mail').css('background', 'yellow');
Not enough devs think about what happens when the next guy has to come in and maintain their code. Good read, thanks for the submission!
You need to wait the page layout, because this particular width might depend on a lot of things on the rest of the page. And yes, this means reading from the DOM. Ideally, you shouldn't be needing this width for anything. Remember that each browser, screen size, etc. may lay out things differently - you should accommodate those users writing a responsive site, not with hacks.
&gt; Is there any reason to prefer .valueOf() over get/set in general? One works with built-in functions and the other doesn't. For example: var A = { value_: 12, get value() { return this.value_; } }; var B = { value_: 12, valueOf() { return this.value_; } }; Given the above 2 objects, the following will be the output: Math.min(5, A); // NaN Math.min(5, B); // 5
Wait, there's an anti-semicolon movement? How stupid can you be?!?
Jasmine is pretty great, quite easy to get up to speed on.
if there's no testing yet, it might be hard to start out with karma and jasmine due to current code design. in that case, you can bring some flows under test using selenium, and then refactor the existing code to be testable using karma/jasmine. 
Very nice, steering behaviors are so much fun.
If you navigate to http://designdelicatessen.com/order/ and press the refresh button in chrome / firefox. There's a lightbox. that's my script on the website. so through this script i have to "store" content which goes onto the contact-section of the page. My problem is that the information is lost when being redirected. So i guess i need some form of storing variables in the browser.
Kind of, yeah. The syntax is: Class#member Where `member` is a member variable (property or method) of an instance of `Class`. This is a distinction between what could be written as: Class.member Though that represents a static member (a member on the `Class` object). The hash lets you know its a member of instances, not the class itself. In casual conversation you usually just see it used with the dot operator and the reader gets to figure it out, but for more structured text, like in javadoc comments, the separation becomes important for linking to the correct definition.
decent intro to the topic but I seriously cringed when you put arithmetic methods on your Int prototype...then I cringed again just now when I remembered it. Please remove that from your article...for the love of god. 
no virtual dom? no "pure functional bla bla bla programming" style ? BLASPHEMY!!! lol jk, maan i miss the old days when building website i just slap some jquery and then im good to go, not need to worry about anything else
Kudos on the gravity points themselves pulling toward one another if they get too close and then growing. I was able to create a nucleus with all my electrons spinning around it infinitely without touching the sides. Great idea. 
If you're using the leaflet tutorial then you'll need to change the URL used for the basemap to something you own You can create a free account at mapbox to get basemapping URL. If that's not the issue then post your code.
I find it amusing that a lot of people who think semicolons should be removed from end-of-lines will admit that semicolons are necessary if the next line begins with [ or ( or whatever, so they suggest putting the semicolon as a prefix to start the line! I assume the only way you come to that conclusion is if you've already decided semicolon line endings are bad, and you get forced to solve these ASI issues and are unwilling to compromise on the line-ending.
Following /r/javascript's advice, you end up with: [Tech Stack](http://i230.photobucket.com/albums/ee313/Auzrieaal/The%20Trash%20can/trashcan.gif)
I had a look at mapbox but I couldn't work out how to upload it or anything to get the url. I'm using this image: http://i.imgur.com/ygJBIbv.jpg Then I've cut it into tiles and used the code below. I just can't add markers. I've seen other websites use the same/similar code but it's all a bit confusing when you're new to java :S I'll post the whole thing soon on my website so you can look at the source codes. function init() { var mapMinZoom = 3; var mapMaxZoom = 6; var map = L.map('map', { maxZoom: mapMaxZoom, minZoom: mapMinZoom, worldCopyJump: false, crs: L.CRS.Simple }).setView([0, 0], mapMaxZoom ); var mapBounds = new L.LatLngBounds( map.unproject([0, 13459], mapMaxZoom), map.unproject([15000, 0], mapMaxZoom)); map.fitBounds(mapBounds); L.tileLayer('img/map/{z}/{x}/{y}.png', { minZoom: mapMinZoom, maxZoom: mapMaxZoom, bounds: mapBounds, tms: false, noWrap: true, continuousWorld: true }).addTo(map); }; 
Here's another way you might reach the same conclusion: The *only* time you need a semicolon is preceding a statement starting with ```[ ` ( + * / - , .``` By preceding these statements with a semicolon, you are showing your intent more clearly and safeguarding yourself against a potentially ASI-breaking statement. To me, ASI-style code is more clear to read, produces less lint noise, and makes potential ASI-breaking statements more obvious. However, it took me a few weeks to come to this conclusion; before that I had no idea what ASI was, and just assumed JavaScript works in mysterious ways with regards to semicolons.
ES7+ should get value objects and operator overloading. So, you'll actually be able to do that kind of thing in sane manner. SIMD and vector stuff will look just as sexy as it does in Dart.
I am currently seeing a psychiatrist. The prescribed medication has helped with the fatigue and general motivation. I've been on the medication for about a month, and it's nice being able to accomplish day to day tasks again. But a shift in mindset was still required to conclude that web development was worth spending this new pool of energy on. The medication gives me back the ability to make a choice, but the right choices still have to be made :) Thank you for voicing your concern.
[See here](http://jayconrod.com/posts/54/a-tour-of-v8-crankshaft-the-optimizing-compiler) &gt; Inlining: Performed during the graph generation phase. The inlining heuristic is very simple: basically, if the function being called is known, and it is safe to inline, the function will be inlined. Large functions (&gt;600 source characters including whitespace or 196 AST nodes) will not be inlined. Cumulatively, a total of 196 AST nodes can be inlined in a single function. However, the 2013 post may not be relevant with today's version of V8, and in most cases it really has no bearing on your application's performance.
No blabla, just a dead-simple library that really helps. Just like in the "old days" when you could slap some jquery ;) But don't get me wrong: the library won't encurage sloppy coding like in the old days! ;)
I prefer Netbeans because I do a lot with Java and I don't like Eclipse and I don't want to pay for IntelliJ or WebStorm and I don't like non-IDEs like Sublime or Atom.
thanks. 
What about the obvious: Websockets? A little bit old, but seems pretty straight forward for WebSockets on the server side: http://www.codeproject.com/Articles/617611/Using-WebSocket-in-NET-4-5-Part-1 On the client you can use IE 8 through IE 9 using a polyfill: web-socket.js IE 10+ has websockets natively.
I've never seen that before reading this thread. How/why is that a convention over just typing out `prototype`?
`for (var thing in window) window[thing] = null;` or for a more thorough environment cleanup, function cleanup(node, count) { 'use strict'; var clean = (typeof node === 'function' || (typeof node === 'object' &amp;&amp; node != null)) ? node : window, i = count &gt; 0 ? count : 1, test; for (test in clean) { try {clean[test];} catch (e) {continue;} if (typeof clean[test] === 'function' || (typeof clean[test] === 'object' &amp;&amp; clean[test] != null)) { if (i &lt; 10) cleanup(clean[test], i + 1); try {clean[test] = null;} catch (e) {} } else { try {clean[test] = null;} catch (e) {} } try {delete clean[test];} catch (e) {} } try { clean = null; node = null; } catch (e) {} } cleanup(window); It still won't get rid of functions and timers and other such things defined in closures, without any handles from external code, but it should be a start. 😉
More from this pen's author http://codepen.io/akm2/
Since you already have a server-side platform, adding Node doesn't feel appropriate. I would use SignalR in an ASP.NET app. It doesn't let you work directly with raw TCP sockets, but neither does Socket.IO. It does let your server push data to your clients in near real time and keeps everything on the server in .NET.
Drop me (geertjan.wielenga@oracle.com) a mail and we'll work on a NetBeans TypeScript plugin together on GitHub.
No, it does not apply to instance variables which change, at least not in practice. jQuery doc is the most common use of this syntax, and it is not used in non-constant instance variables, at least as far as I know.
Sure. You are taking one approach: fixing the problem by patching *every* line. The ASI-style developers take a different approach: fixing the problem by patching *problematic* lines. If you look at the rules, they are really simple. It is better to understand ASI, even if you prefer to use semicolons, than to pretend it doesn't exist. PS: At the end of the day, a linter can catch all of these problems, so the whole discussion is moot. Use a linter, then choose whichever style you prefer.
&gt;I find it amusing that a lot of people who think semicolons should be removed from end-of-lines will admit that semicolons are necessary if the next line begins with [ or ( or whatever, so they suggest putting the semicolon as a prefix to start the line! You know what I find amusing? I see a lot of superstitious usage of semicolons, all over the place. People putting semicolons where they don't need to just because they assume a line without a semicolon will somehow cause something bad to happen, or catch the ire of the semicolon-dogma-squad. You can't have it both ways, and it seems that many of the people suggesting that semicolons are mandatory don't always know where *not to use them*, so they just add them everywhere. 
Major kudos for the dedication and these are pretty damn cool! ^^although ^^you ^^might ^^consider ^^adding ^^a ^^seizure ^^warning ^^to ^^a ^^few ^^of ^^them.
You're overestimating the complexity of using sockets :p Just try it sometime, it is, evidently, much MUCH easier than you think lol Edit: or perhaps you misread what I'll be doing. Passing messages over a network is no where near complex. The complexity has been done for us. And on that note it looks like straight Websockets will work for what I need.
Thanks. Great link.
This is all wrong. The source of gravity sits at one of the foci of the orbiting object's ellipse, not in its exact center. Fastest speed is at perihelion, slowest at aphelion. (Sorry, just read Seveneves and couldn't help myself. I'll see myself out.)
not working on mac/chrome js error are: http://dat-gui.googlecode.com/git/build/dat.gui.min.js Failed to load resource: the server responded with a status of 403 (Forbidden) index.html:493 Uncaught ReferenceError: dat is not defined
Here's a hint: Style guides and linters are 100% about things which are **NOT** mandatory. You don't need a style guide to remind you that JS functions need a `return` keyword in order to actually return a value; you need a style guide to remind you that your team has decided that there should always be a space between `return` and any trailing parentheses. Is the space in `return (foo)` optional? Could it be written as `return(foo)`? Yes! Should you write `return(foo)`? I dunno, it's up to you, although you probably shouldn't, no. Should you write condescending Reddit comments about the superstitious usage of spaces, and people putting spaces where they aren't needed? No.
I know, right? Amusingly, one of the better code linters around is named [Standard](https://github.com/feross/standard), which is actually written by the "Feross" mentioned at the start of the linked article. And it enforces a no-semicolon style, which is funny because that's not a common style in the JS world, and is absolutely not the standard. But it's okay, for those who want to use standard *with* standard semicolon usage, the ironically named [semistandard](https://github.com/Flet/semistandard) is a fork of standard that follows actual language standards. In case it's not clear, the whole naming thing strikes me as absolutely hilarious. :)
Ah, ok. Thanks. I completely had a different understanding of what currying was, and apparently it was a little off!
Well the interesting thing is that the actual localhost application works just fine, other websites work fine too. but google acts weird. 
this one is really cool http://codepen.io/akm2/pen/BonIh
Having trouble understanding what you mean. When using ASF, it seems only be able to use an enum of strings (or other simple types) and chokes on the object. I do have an example of objects being used, but it requires duplicating the enum outside of the schema into the ASF form definition. I can probably just copy this programatically, but it seems clunky. I am playing with serializing the object into the value as json though and deserializing before the form's model is passed into the schema validator, since the validation is where I am getting chocked up with my current modification to support the object enumeration.
In the old days, we pored over manuals. Manuals were gold and hoarded as such. Googling for answers is way more productive. I get the satire BTW. 
The best part about streams/generators/etc is composibility. Once you have a streaming API, you basically have a very efficient map/filter/reduce set which gets you most of the way to LISP, at least. 
Does oneOf cover what you're describing? Hopefully you wouldn't need to change anything (aside from your data structure). https://github.com/json-schema/json-schema/wiki/enumNames-(v5-proposal) 
Thanks! I went ahead and updated the link as well.
I've conducted interviews with coding exercises where they were completely free to google something if they needed. 
To be honest, i have done it myself. It just always feels like cheating even when they say it's ok.
I think the difference is do you spend most of your time trying to find a copy/paste solution or you need to look up an argument list that your IDE might be providing you with anyway.
For my latest project I decided to try no semicolons. I like it a lot more than I thought I would. Now I find I'm in a hated minority group. Idiot that I am, I wrote about 3KLOC without actually looking up the ASI rules and there were only two (initially mystifying) lines that the linter pointed out to me. One, I have an old, pointless habit of writing ++i instead of i++ when I don't need the before/after value of i. Two, an IIFE. I'm having a hard time thinking of a way lines could start with , or . (that aren't continuations.) One thing the linter doesn't seem to catch are files that start with a problem character.
Why don't you post typescript news somewhere else? I'd prefer not to read about that useless micro$oft crap in the javascript category. 
StackOverflow solves very particular problems. Just today I was finding out a way of using Jersey to serialize a DOM Document into JSON without causing a (drum rolls, please...) stack overflow. I had to quote "stack overflow error" to avoid getting random answers from the site. And naturally, the answer was in stackoverflow. Three or four answers from the top one led me to the json.org site. In half an hour I fixed the code.
Comments, questions, feedback, etc... greatly appreciated!
Just FTR, I was not attacking any of the things I talked about in the article. I was saying I think they're more clever than clear. I fully admitted that the `~` thing is a pretty slight edge -- it could go either way. I also tried to make the point several times that all of this is subjective and *not* objective fact like a lot of people imply when they throw around phrases like "more readable". :)
The more I hear about programming interviews, the more I don't get them and the more they scare me. Most of what makes me great at my job cannot be expressed by sitting me down and having me go through a coding exercise. The answer to most of the questions that websites preparing you for code mill interviews, for me, are, "I would Google for a bit to see how other people approach the problem, identify the differences in my problem space vs. these examples, and formulate what is likely a very similar but specific solution to my problem. I would then document how and why I solved it the way I did, and write unit tests throughout development of the code, not at the end, to help me test the solution as I build it to more quickly identify if the proposed solution doesn't feel right." That would be my answer for almost every question. I guess my biggest fear about one day having to find another job is that I'll be interviewed by people who ask the wrong questions and I'll never get a job again because I'm not able to jump through the hoops they're holding up for me. =(
&gt; "I would Google for a bit to see how other people approach the problem, identify the differences in my problem space vs. these examples, and formulate what is likely a very similar but specific solution to my problem. I would then document how and why I solved it the way I did, and write unit tests throughout development of the code, not at the end, to help me test the solution as I build it to more quickly identify if the proposed solution doesn't feel right." And that's exactly how it should be. Granted, after a while you'll already know certain patterns for solving particular types of problems, but you'll always end up needing to find a solution to something you don't know. Most of the time it's just easier to google and go from there instead of trying to write it from scratch. But yeah, that shit happens when you go to an interview and get asked a question about something you aren't at all familiar with solving. But don't worry, there's always another interview and if you keep learning and improving your skills, you won't ever have a problem finding a job.
&gt; "I would google for a bit to see how other people approach the problem, identify the differences in my problem space vs. these examples, and formulate what is likely a very similar but specific solution to my problem." I am just going to start using this as an answer and see how far it gets me :D 
Yeah. I'm in a more senior position now and am interviewing people for various programming positions. One thing I care more about than anything else is that someone is effective at learning how to solve new problems. "Learning how to learn" if you'll pardon a cliché term. I love asking questions that I also don't know the answer to. "Say the embedded systems guys all win the lottery and quit tomorrow. We have a robot that has to be shipped on Friday. How would you and I figure out how to revert the current test firmware so that the robot will turn on again?"
I have a science background so I'm bewildered by any answer that does not begin with, "I will work to describe the problem in unambiguous terms and then research the hell out of it."
as well as and being able to understand that solution. Doesn't help to find the perfect solution if you don't understand basic programming in the first place :D
Deliverables of any design, before any implementation has begun, need to include the overall design, a list of known risks, details on work (research, planning, strategy) done or will be done to mitigate these risks, and remaining risks / possible unknowns. So you could set expectations with a wacky or ambiguous request that way. It forces all parties to better understand the problem, be on the same page with expectations of deliverables, and often to rethink the problem when they're not prepared to say, "I'm okay with the chance that this idea will cause delivery to be delayed by a week."
Destructuring! Love the convince, and the ability to split out an options object so easily. Default values! FINALLY - Is all I really have to say here. Spread and rest These three work really well together. They are my favorites 
LOL
Probably get the most use out of arrow functions and object literal enhancements (mostly method syntax and `{foo, bar}` shortcut). But destructuring + spread is my subjective favorite. I like how it enables new terse patterns for things. Like, tuple-returning functions aren't absurd now.
by canvas or JS? you guess
Make an XMLHttpRequest to Google with the search term in the query string. You may have to do this server side as you'll probably get a cross-site scripting error trying to do it with JavaScript. You can then load the response in DOM object and parse the results for the first YouTube link. So your JavaScript would essentially be making a request to your server side code that is making the request to Google to get the search results.
Maybe look into Yahoo's YQL. I see there is a public table for Google searches. No need to make use of a backend. A query like "select * from google.search where q = "linux" returns a JSON response - truncated below: "results": [ { "GsearchResultClass": "GwebSearch", "unescapedUrl": "https://www.linux.com/", "url": "https://www.linux.com/", "visibleUrl": "www.linux.com", "cacheUrl": "http://www.google.com/search?q=cache:RFwrCUQ-Uw4J:www.linux.com", "title": "&lt;b&gt;Linux&lt;/b&gt;.com | The source for &lt;b&gt;Linux&lt;/b&gt; information", "titleNoFormatting": "Linux.com | The source for Linux information", "content": "&lt;b&gt;Linux&lt;/b&gt;.com - For the community, by the community, &lt;b&gt;Linux&lt;/b&gt;.com is the central \nsource for &lt;b&gt;Linux&lt;/b&gt; information, software, documentation, how-tos and answers \nacross ..." }, {
more things which sound magical. It often feels more like this: https://www.youtube.com/watch?v=BKorP55Aqvg 
how did i never know that ... 
Yup. double quotes.
That's for exact phrases. You can also include AND and OR operators. In fact, [check these out](https://support.google.com/websearch/answer/2466433?hl=en)!
That is pretty sweet! It'd be great if it could do video or audio streaming too, I wonder if it can broker that.
You’re current solution stops working as I navigate around the page. The way to fix this is by passing in callbacks for the onAfter and onBefore events that Smooth State provides. Customize your options for the smooth state plugin to bind and unbind the event listeners based on the current url path when the onAfter and onBefore events are fired. This is the exact reason why these events are provided with the plugin. Currently in your minified code I am not seeing you passing any options into your instantiation of the plugin. You should unminify and comment it if you'd like more help on it.
&gt; Programmers never want to learn their tools in-depth. I'm... not too sure about that. 
This is great!
I encourage it. If a developer then proceeds to ignore that advice and try to hack away at the problem, specifically stating that they want to not use that crutch, I go down a different talent tree. Interviewing: The Text Adventure
I guess I misunderstood your point; I'd agree that hacking things together from StackOverflow ends up being damaging. I was suggesting that the trend toward libraries that are usable without an enormous learning curve--through intuitive design and documentation--is a positive one
I've met enough java programmers who implement equals without implementing hashcode, then wonder why their home-rolled caching implementation never generates cache hits, to disagree. I'd say the average programmer doesn't spend enough time learning their technology stack in depth, and realistically that includes me; no superiority complex here.
&gt; You’re current solution stops working as I navigate around the page. Could you tell me how you get it to stop working? Navigating anywhere, even to the same page, or refreshing the page doesn't stop it for me. And you're right, I am not passing options. I am simply running the `moveMe()` function `onStart` and `onAfter`. Instead of checking for the current url path, moveMe() simply checks for #about-page and my variable `canvasListen`tells it whether or not it should add the listener or remove the listener. What benefit would I have moving these if checksums to the smoothState callbacks? onStart: { duration: 250, render: function ($container) { moveMe(); $container.addClass('is-exiting'); } }, onReady: { duration: 0, render: function ($container, $newContent) { var href = smoothState.href; var myID = href.substring(href.lastIndexOf('/') + 1); $('body').attr('id' , myID + '-page'); $container.removeClass('is-exiting'); $container.html($newContent); } }, onAfter: function ($container, $newContent) { if (nameHidden) { hideName() nameHidden = false; } s.refresh(); moveMe(); ga('send', 'pageview'); } That's the requested unminified, thanks for the help!
Hi /u/jjfat, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Right. I don't have all the answers because I don't want to. Got it. 
There is some really good stuff to learn here: - TweenMax: https://greensock.com/jump-start-js - TimeLineMax (Chaining Tweens and create smooth animations): http://greensock.com/position-parameter - ThreeJS ans WebGL: http://www.pluralsight.com/courses/webgl-threejs-fundamentals
&gt; Also the clients will have no web components running whatsoever. The clients are not sandboxed in a web browser? In that case, plain sockets will work, if that's what you want to use.
That's not what I said in my original post or any of my responses. Developers spend a lot of time on small-picture problems, when oftentimes they're blindly bumping up against a larger-scale problem that could be solved by reading something higher-level. Sometimes that's documentation, sometimes that's a book. The only advantage of the bad-old-days of no-google is that *sometimes*, the middle-of-the-road lazy people would be forced into reading and understanding at a conceptual level. It didn't help the super-lazy people, because they'll just cobble things together anyway, only slower, and it didn't help the high-performers, because they took the time to understand already.
So am I correct in that the best application for this is real time secure audio and video? Such as a browser version of Skype and/or Vonage?
Everything is unfamiliar to a beginner. Using `Function#bind()` for partials, slicing `arguments` to an array, using `process.nextTick` in browser modules, using `Array#some()`, etc. These all appear in real-world JavaScript development whether or not you agree with them. The goal of the JavaScript educator is to explain and demystify these problems. Instead, your article further shrouds "ASI-style" in mystery, and goes to great lengths to call out some developers by name for their coding style. The `;[` expression was strange when I first saw it. After several minutes reading about ASI, it became pretty clear. By understanding the simple ASI rules, I felt better equipped to spot and avoid ASI errors (which can occur in any situation where linting is not enforced). This is why I suggest developers learn about ASI regardless of their preferences or coding style.
Modules! The most significant feature, imho.
Both of those are multi platform though. The article just said it in a way that made Windows sound really awesome for Node development, and in my own experience I've had a much better time w/ *nix. I was just curious about the development experience in general in Windows. They seem to be bringing a lot of new things to the table, things I love about Linux.
Did a technical test last night with a giant timer counting down from 60:00. Really put me off and put stress on me so I'm pretty sure I did badly. Trying to read badly written instructions under pressure sucks.
I don't know that you two are really disagreeing. If I, say, returned a Proxy from `new Foo` that always had a `bar` property, it'd make sense for people and documentation to refer to `Foo#bar` to indicate an instance variable. From an end-user programmer / API-consumer perspective, it very often doesn't matter *per se* where instance properties are located. Sort of like the bound Array method duplication in AS3, where `[].AS3::filter !== Array.prototype.filter`. Of course if you introduce new edge cases, you'll eventually trip some people up, but whatever. 
https://jsfiddle.net/z33eatLL/ one way of doing it programmatically theres literally a hundred ways to do it, but i usually do something like this...
Thanks, it was something like this I was looking for
Thanks!
Thanks!
It's more about what you can't do without JavaScript - interactive web interface.
gtfo
seen google docs? gmail? html5 games? chrome experiments? it's all javascript.
its common to call your library [library]dotjs in the javascript world. nodejs is the v8 javascript engine (from chrome) as a stand alone executable. they added a file system api and other apis and called it node, so you can write javascript scripts for shell/linux/windows desktop too. and it has a built in webserver so you can write a webserver/web app with it. express is a nodeJS library. its basically a node webserver with a nicer api, routing and templates. socket.io is express.js with websockets, and so on... backbone is a html+js framework. gl :)
&gt; Say the embedded systems guys all win the lottery and quit tomorrow. We have a robot that has to be shipped on Friday. How would you and I figure out how to revert the current test firmware so that the robot will turn on again? Jesus, I'm going to stay jobless...unless the answer is check SO...
What would be the best way to make this responsive as well? 
I don't go much into coding problems/challenges while doing interviews. But when I do, generally more interested in the thought process then the right answer. I'll also give hints, poke holes in the answer, ask 'what about this...?', I also try to frame them in the context of something you would actually be doing and avoid 'tricky for the sake of being tricky' questions. Hell, even chicken scratch, boxes and arrows pointing around to convey a general idea/logic flow - and not caring about the syntax can be fine. Or, even just talking through the solution. But, some people are just bad at white-board/coding questions in an interview - and they are not the be all and end all in my final choice. I find that talking through a problem and possible solutions can be pretty informative without ever having to actually write anything down. 
Sadly, most jobs don't pay programmers to learn their tools well, they pay them to get things done. They also tend to keep their programmers at full capacity - and if there is downtime, load them up with more work instead of giving them the time to learn things on the job. Not enough places seem to promote a learning culture. My current job does, and it's great - and it's something that most people that work with me comment on coming from other companies, and find it ot be a very refreshing change of pace.
I thought programming was going to be renamed "updating composer.json" 😀
As a language meant for embedding, it can't do anything outside of its VM unless you introduce some APIs to it. V8 by itself can't even write to stdout. So, you could, for example, register some method for firing a machinegun. Scripts running inside that VM would now be able to fire it. Scripts running in Node can just read/write files. Scripts running in the browser can't.
I really detest StackOverflow - the ability of (pretty much) anyone to edit other answers/questions drives me insane. I'd much rather my question/answer/whatever deleted than have it rephrased by someone else - I stopped using it years ago because of that.
I'd also like to see things like p2p maps and databases. Basically just remove centralization from any one source by distributing it.
That's implying that everybody blindly copy and pastes. Good programmers will understand the code that they are copying before moving on. 
I think that is only in the ideal case.
TIL The internet is full of them.
I haven't seen people do both at the same time much, but generally I would do the one I really need. Prematurely generalizing things can be a waste of time like prematurely optimizing things can.
It helps if you post your JS source. We can just copy and paste it into our browser console and help debug. Upvote: `&lt;div class="arrow up login-required" onclick="$(this).vote(r.config.vote_hash, null, event)" role="button" aria-label="upvote" tabindex="0"&gt;&lt;/div&gt;` Downvote: `&lt;div class="arrow down login-required" onclick="$(this).vote(r.config.vote_hash, null, event)" role="button" aria-label="downvote" tabindex="0"&gt;&lt;/div&gt;`
Thats the secret! "Break everything first." If it's not spelled out for all to see in huge bold text, it's the next most expedient way to learn.
Thank you, not only did you provide me with a laugh, but this is probably the best Reddit post I have read to date.
I somewhat agree here. Mainly because: &gt; I somehow never needed anything other than pure Java or C# (no PHP either) This tells me OP has no interest in self learning a new language.
Thanks for this, I hadn't seen that syntax before. Unfortunately ASF doesn't support oneOf currently ಠ_ಠ. I may end up doing the following which at first glance seems to accomplish what I want: $scope.schema = { type: "object", properties: { first: { title: "Question?", type: "object", enum: [ { value: 01, "desc": "One" }, { value: 02, "desc": "Two" }, { value: 03, "desc": "Three" } ] } } }; $scope.form = { key: "01", type: "select", titleMap: [ { name: "Display value of 1" value: { value: 01, desc: "One" } }, { name: "Display value of 2" value: { value: 02, desc: "Two" } }, { name: "Display value of 3" value: { value: 03, desc: "Three" } } ] } By only defining it on the schema and then pulling it out and throwing it on the form programmatically. That way I can pass the object around and receive both values on the form while having the label-&gt;value support.
True enough! Generally I find the data is (usually) already "generic" or dumb though, like sitting in the DB in a column. Usually for a given component I need some combination of data from different tables etc, whereas someone else or a client building their own stuff might just want a dump of a column or w/e. Seems like GraphQL would be the best of both worlds though...
Why this over [semantic-release](https://github.com/semantic-release/semantic-release)? Edit: Bad question. Bumped looks to be manual, whereas semantic-release is automatic. Both valid ways of doing it.
&gt; But I like IDEs that have good Java support too. You can just run one application for the backend stuff and another one for the frontend stuff. &gt; I think a lot of the Federal contract jobs in my area (DC) only allow Eclipse and Netbeans. I don't really see how that is supposed to improve anything. Netbeans and Eclipse plugins can do whatever they want. Well, you can either use Eclipse, port the Eclipse plugin, or pay someone to port the Eclipse plugin.
Pretty impressive for a one man team. I'd be spending a lot of time on that material library. You might have a window of opportunity there as React and Ploymer have a somewhat steep curve and lot's of developers know BB/JQ and have an easy time with object literal. On the flip side, if I want to make a website quickly then HTML, CSS and plugins are fine. For an modern web-app, JQ and BB are just not up to the job. 
Here's a great one about a PayPal bug that helped me today: http://stackoverflow.com/questions/20781504/paypal-payment-data-transferpdt-error-4002/30386965#30386965 
Reading this again, I think "cryptic" is the wrong word in this place. What always bugged me, was that I had to create the whole interface in HTML on the server and then again I had to apply jQuery somewhere in the frontend, to make the "dead" HTML construct dynamic. That always felt very wrong to me when creating applications in javascript. You had to create a non-dynamic HTML document and then turn it into an application through jQuery magic - because you need to connect your business logic and basic interactivity with that HTML document. Why do you think its a mess being able to define the interface and the stuff that belongs to it in a single place? That was also always an issue for me - you had to define your HTML in one place, have some CSS classes on it. Then you had to reach for the HTML in a javascript file to react on clicks and other things. From looking at the HTML file you won't have a clue about the logical code that will be attached to it and the other way from looking at the javascript code, you won't get an idea about the structure of the HTML document... Its true that modoJS powered apps are NOT search engine friendly. In fact, they will be completely invisible for serarch engines (because, empty HTML file - well, may contain a JSON payload; depends on how you build your app). Thats not really an issue, since when you create a "real" application, its not something that would be worth being indexed by a search engine. modoJS is not meant to make some parts of a website a bit more dynamic but is meant to create applications from ground up. jQuery and Backbone was the most basic and flexible stack I could imagine building applications on. I am aware that I missed all the angular-react hype in the web, but meh - I haven't build this library to follow any hype or attract a userbase as large as possible. The learning curve of modoJS is very very flat. You have object constructors and a helper method for constructing objects - thats it basically. Thats much less to learn than getting started with for example React. Please keep in mind that I don't want to offer a silver bullet here. My library is not built to revolutionize the way of building web applications, or making other things obsolete. Its another way to build web apps - a way that has proven itself many times for me and my company in the recent years - it worked so well and saved us so much time that we wanted to give something back to the community and try to help others as well. If you don't think it will be helpful for you, I won't start a crusade to convince you otherwise. Due to the large opensource community, we have a large pool of tools available to us and everyone should simply pick the weapon of choice to get things done in the most efficient way possible :)
Thanks, man! :) Just out of interest - what do you think BB and jQ are missing for "modern" web apps?
Destructing is a language feature that I went from being ambivalent about, to finding that I can't even write JS without it these days.
I don't think this is entirely accurate. Take for instance lodash's `_.curry()` function: var curried = _.curry(function (a, b, c){ console.log(a, b, c) }); I can pass `curried` one, two, or all three parameters. curried('a')('b')('c') curried('a', 'b')('c') curried('a')('b', 'c') curried('a', 'b', 'c') By your definition of a curried function, only the first example is allowed.
&gt; the simplest combination the simplest combination for what though? For only selecting this one element? To select all similar elements? If so, what is the similarity between the elements? Not an easy thing to do generically :)
Yeah after many years in different jobs I finally landed one that lets me set up time to learn, or that lets me take a week off adding features to refactor code or write tests. It makes a huge difference. I can see why he thinks that many programmers are lazy and don't want to learn anything but generalizing is terrible, around here there are so many meetups and so many places to learn cool stuff and practice and every event is always full capacity.
the best two options are websockets and ajax for loading templates n data. websockets is probably 50ms faster, but you only have one response handler so you have to do something like `switch(data.action){ ... every app function needs a case here ... }`. at least with ajax you can write a pretty normal REST backend: `$.get('/posts/', somefn)` socket.io is decent for websockets and backend. the newer option would be flux from facebook and its backend which is either ajax or websockets + their query language + optionally React for frontend
As a back end REST services developer, my team has a standard against writing anything UI specific. We try to write endpoints that are process specific. Including anything that isn't necessary to the process generally makes the endpoint code modeling that process less maintainable, understandable, and reusable. You asked for reasons aside from extra work, but as a developer extra work is a killer and one of the main reasons we don't cater to the front end. UI's change frequently while the underlying processes don't. Having to update back end code for what are arguably cosmetic changes is a huge waste of time. Different UI's and even automated processes consume our services, so if we do something specific for one, we have do to it for all, another huge waste of time.
Thanks, great points!
Why
&gt; with perhaps jQuery's .css() method I said *perhaps*... you can check element properties without jQuery you know? 
It's still not clean enough. It would then require that all .CSS files have this "expected property" as well as limit the "fileExists" function to only work with THOSE CSS files. 
What! Such a good resource! Thank you!
Would this help? var fileExists = function(filename, callback){ var link = document.createElement("link"); link.setAttribute("rel", "stylesheet"); link.setAttribute("type", "text/css"); link.setAttribute("href", filename); document.getElementsByTagName("head")[0].appendChild(link); link.onerror = function(){ callback(false); }; link.onload = function(){ callback(true); }; }; fileExists("/css/somefile.css", function(ret){ console.log(ret); });
This *may* be as close as I can get, but it's not quite what I'm looking for. This simply creates the link, then hooks the error if there is one. I would prefer to have a legitimate "fileExists()" function that can be run synchronously. In my plugin, I may have a use for a series of files (from images, to JSON, to CSS) that I could use this for, and it can quickly get clunky/messy to try and give each their own asynchronous callback. Yours is the most straightforward answer yet, though. Thanks!
Thats true - but modoJS basically makes BB views completely obsolete :) If jQuery is too large for your project - modoJS will run just fine with Zepto!
Codepen actually _removes_ the `location.reload` from your code before running. It doesn't seem to be mentioned in the docs. They *do* mention that they [remove meta refresh tags](http://blog.codepen.io/documentation/editor/things-we-strip/) so it makes sense that they would remove `location.reload` calls too.
The onclick event passes the relevant object to the function it calls (as "this"). var buttons = document.getElementsByTagName('button'); for (var i=0; i&lt;buttons.length; i++) { buttons[i].onclick = function () { console.log(this.innerHTML); } }
Maybe you could rethink your strategy a little. You cannot assume a user will upload everything to your plugins requirements but if your plugin fails for some reason you could then (in a try catch) try and see what part isn't there (then tell the user what's missing). So you only check if the file exists if the plugin runs into an error. In this case you don't need the slow check every time.
Yeah, I'm afraid that's the route I'm going to have to take. I was hoping for a very simple "does the file exist" option, but that's not looking promising.
The application will be an ecommerce application. So this would include users accounts and products. 
[This video](https://www.youtube.com/watch?v=H4g4oV8lK4s) might clear things up.
I'm trying to write a function that will refresh my codepen page when a button is clicked. Is there something else that I can use besides location.reload(true) to actually achieve this? Thanks btw for all your help. 
Imagine you logged in your bank account in Tab 1 and that a malicious site in Tab 2 do a POST on your bank domain to make a wire ... This is an example of what is really dangerous with non CORS requests
Also you **can** do an AJAX call to retrieve some data from another origin. The requested origin needs to *opt-in* to that behavior though. 
I would not store the primary copy of data related to finances in a mongo database. Primarily due to lack of transactions. Secondarily due to the many horror stories I've heard of data corruption. Also, e-commerce data tends to be HIGHLY relational. NoSQL in general would be a bad fit. My personal preference and recommendation would be Postgres. SQL does not bite, and by the time you could potentially benefit from the scaling of mongo, your e-commerce application will be taking on Amazon.
theres always rethinkdb
Agreed. This is incredible content. Great Job OP, thank you for sharing. 
On newer browsers, yes, but that hasn't always been the case. 
That is a ridiculous opinion piece that uses isolated instances to back up its negative narrative. It also links to a list of the top document db's and then says don't trust the numbers. Mongo clearly wins hands down in popularity. I use Mongo in a bunch of things and it works great. It doesn't fit every use case but it's a case of the right tool for the right job. This guy sounds like he's just discovered postgres and now thinks everyone should drop what their doing and jump on that ship because he wrote an article. 
Opt-out for the former: https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Using_Content_Security_Policy Opt-in (by the other domain) for the latter: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
You mean to say you can seamlessly transition between Markdown, html, and WYSIWYG, and it can output to markdown? NodeBB is interested... definitely. 
&gt; Should I use MongoDB? Probably not. &gt; I've been looking into and playing around with the MEAN stack Eh, it's a not a bad tool for learning, experimenting, and banging out quick prototypes. Be careful that you budget time to rip it out and switch to a real data store before actually writing the real version of the app though. &gt; and was considering it for a scalable web application No. Or rather, almost certainly not. In general if you're trying to do anything important or scalable, you should avoid Mongo. If you're doing something very specific with, I dunno, aggregating anayltics in a way that just won't work with Riak, Cassandra, Postgres, etc., they sure, *maybe* Mongo is the right choice for you. But if you have to ask, the answer is no. Conversely, most web apps are just doing basic relational CRUD operations, like ecommerce; that's *never* a good application for Mongo. &gt; The application will be an ecommerce application. So this would include users accounts and products. *Do not use Mongo for this.* That's like, the poster child for something that Mongo would be inappropriate for. Using Mongo for that rather than a good relational DB like Postgres is all downside; you'll kick yourself for giving up transactions and ACID guarantees, but you won't be in a position to benefit from the features NoSQL offers. Edit: Here's the rule of thumb I work with: 1. I want to write a serious app that will be stable, reliable, scale, and not lose data. I don't want to ever look back and go "man, I selected the wrong damn data store". Pick Postgres, with some Redis for cacheing or Elasticsearch for indexing as appropriate. Yes, it's what everyone else is using. There's a reason. 2. I want to do something cool and awesome with cutting edge technologies. I don't mind it ending in flames as long as there's a chance of learning something awesome. Pick RethinkDB. 3. I want to do offline-first mobile apps with deep support for syncing and master-master replication. Pick CouchDB. Offhand, I can't think of anything that MongoDB is actually best at, and little it's even particularly good at. Easy to install in a dev environment, I guess? Decent at storing non-relational data in a flexible way if you're one of the 16 developers on the planet who actually need that (rather than one of the hundred million developers who falsely *think* they need to do so, and don't understand the difference between "schemaless" and "implicit schema")?
The longer script I posted actually causes an attempt to navigate to `/null` so maybe I should just skip over `window.location` and related properties; also I *am* trying to get everything to stop on the page. 😎
Indeed and it is called Cross Site Request Forgery (CSRF) and there are other ways to protect against that.
"The only silly question is the one you don't ask" - told me an Irish cab driver the other day. :)
:)
yet ES6 is introducing classes, turning it into a hybrid. They can exist together. Its ok.
I don't think you can have a client check the server for anything without an xhr. It may be beneficial to load the default css to start and if the xhr comes back 200 to replace it
Ok. You should also create an issue on the GitHub page regarding oneOf, and plan to eventually migrate to it :)
That sounds like a big task, so what I would do is just use is write a small snippet that writes this: console.log(arguments); then you can figure out the args, but if this ever does happen that'd be really nice, especially for sublime.
Keep your backend in php since you already know it. Just use a minimal framework to get started, one that provides routing+json responses and leaves UI apart. My favorite for that matter is Slim Framework but I bet you have your own. Since you already know a little jQuery you can get started right now manually crafting your requests, but I encourage you to learn to use a framework to deal with models instead of raw requests. Backbone is nice, although these days AngularJS has all the attention. EmberJS is nice too.
Haha, thanks! 
I agree. That data sounds very relational to me. Commerce data is almost guaranteed to be relational. If you are using node.js, I would strongly suggest looking into using [Postgres](http://www.postgresql.org/) and using either [Sequelize](http://docs.sequelizejs.com/en/latest/) or [Knex](http://knexjs.org/) for interfacing with the database. I have had a great experience using these so far.
I agree developers *should* learn ASI. Absolutely. I taught about it in detail in my "Types &amp; Grammar" book (https://github.com/getify/You-Dont-Know-JS/blob/master/types%20&amp;%20grammar/ch5.md#automatic-semicolons). This notion that I shrouded it in mystery is non-sense. I said at the beginning I wasn't going to re-tread the same ground already covered many times. But more importantly, I don't think learners should have to learn ASI to understand your code -- or rather why your code broke -- as is illustrated in that final code example of my article. I am a huge proponent of developers being encouraged/challenged to learn more, and coding is a primary vehicle to spur that on. But one of the main points of my article applies here, so let me just quote myself: &gt; This is the most important take-away from this post, so don’t miss it! Learning a core mechanism like coercion will keep paying off throughout the current and all future code, so the effort is more than worth it. When a future developer on your team has to learn a specific trick that you’ve always liked, that learning (perhaps nothing more than just memorization) often has far less widespread applicability. The takeaway should be that we favor -- when possible -- writing code that encourages learning of things that are widespread applicable (even, say, beyond the language in question) so that the learning pays off. I would argue learning ASI has a drastically lower payoff, so it's one of the last things I want developers to learn, not one of the first.
Want to open a github issue and I'll fix it?
&gt; I immediately understood what was going on Given that I spend my whole "job" time in front of JS learners, especially (now) those new to the language or even new to programming entirely, I can confidently say that the vast majority of them don't see arrow function syntax and "immediately" understand them. It takes a bit of explanation. More than a bit, sometimes. The normal function syntax as (lambda) expression also takes some teaching, but I've found the mental barriers to be far less cumbersome on the whole. As I've eluded to elsewhere, I think this kind of argument you're making -- that arrows are universally (or even mostly) taken as a readability improvement -- to be based on false assumptions and confirmation bias. &gt; What is the problem with the =&gt;syntax? I generally don't like them because I believe it to be a bit of "abuse" of the mechanism just to save characters, on the assumption of prior familiarity with such constructs and at the expense of being readable to new eyes. They were primarily designed to solve the "lexical this" problem -- a real problem that I'm glad they solve, but one that is rarer in my code than is often asserted -- and the shorter syntax should be seen, IMO, as a far distant secondary side-effect. Moreover, I think they don't carry their own weight, given the several syntactic quirk special rules. I go into a lot more depth about arrows and their pluses/minuses in this book section -- basically the case for and against them -- if you are interested in more specific detail: https://github.com/getify/You-Dont-Know-JS/blob/master/es6%20&amp;%20beyond/ch2.md#arrow-functions
Great podcast, it's one of a few I always listen to at work. Adventures in angular is another good one on devchat.tv if you're interested in angular.
I was thinking headless Drupal 8 could be an option for this, since a lot of my experience is with Drupal. I will have to see how this goes.
Started to listen to that one too. Coming from flash / actionscript though I am kind of wary getting too deep into anything nowadays. I do love angular but I am planing to use react on my next side project. Looking into the horizon with webcomponents, ES6, and even Web Assembly... I have no idea anymore where to invest time. :/
Front End Programming to be Officially Renamed "Googling MDN"
Not to forget something such as semicolons are enforceable via a linting process. In my opinion if the majority of your criticisms of a language are avoidable via linting, you should rethink what is important within a language.
What are your exact complaints about how emcascript is being developed? The only thing you proved is how strong your emotions are against javascript.
This is perfect timing for me. Great job. For work, I'm building a social media aggregator with a rating system built it. Firebase integration would be amazing! Mabe I'll just fork and do it myself.
Sure
The two are completely different problems. Cross-origin resource loading (as with JSONP) has a major flaw: you trust a third party to not only refrain from serving malicious JavaScript, but also to keep their servers secure. This is obviously a very insecure way of going about it, but there's one big thing that keeps it from being a vulnerability: it's opt-in. As the developer, you choose to use JSONP, (hopefully) fully aware of its problems. There are also other reasons browsers allow it (eg. the advantages of using a popular CDN) but let's not go into that. If browsers allowed cross-origin AJAX calls though, we'd have a vastly different problem. Let explain by using it in a situation: say you run a banking website. You allow users to send money through the website, which is done with a POST request of the format `example.com/send?to=birjolaxew&amp;amp;amp;amount=10`. In order to keep users logged in, you use cookies for validation. Now someone else creates a website with a form on it. Except instead of doing what it says it will on submit, it sends a POST request to `example.com/send?to=attacker&amp;amp;amp;amount=9999`. Uh oh! Now your users are sending money to somebody else without knowing it! The accepted way to protect against this is to use CSRF tokens - unique, user-specific strings that are only available as invisible inputs on your website, and are sent with the requests. So the POST request now becomes `example.com/send?to=birjolaxew&amp;amp;amp;amount=10&amp;amp;amp;csrf=kjwen87nwej7nd72iwnq81ka1sw001m9`. Now an attacker would have to guess the users CSRF token, which is close to impossible! Success! Except... If the attacker can AJAX to your site. Since AJAX makes the website available to JavaScript, the attacker can simply open the site in the background, extract the CSRF, and then send the POST request - no user interaction required. More importantly, you have no way of knowing that it's happening. **TL;DR:** Browsers allow loading resources from other domains since it's opt-in. Browsers disallow cross-origin AJAX, since it's impossible/hard to detect, and is incredibly insecure' without being the fault of you (the front end dev)
Sounds like you're looking for code snippets/custom autocompletions. Those are supported by many editors, and basically allow you to expand a shortcut (eg `aget`) into code snippets (eg `app.get(route, function(req, res) { }`). [Here's an example, formatted as a plugin](https://packagecontrol.io/packages/ExpressComplete). Doesn't sound super hard to parse the [Express API documentation](http://expressjs.com/api.html) into snippet-compatible JSON, a-la [these snippets for NodeJS](https://packagecontrol.io/packages/Nodejs).
Just don't write code like that. Don't use implicit globals. All of your code should work in strict mode. When you get to that `if`, "bob" should be declared. It should be either a parameter or local variable.
The Bitcoin tip for 1000 bits ($0.28) has been collected by *birjolaxew*. -- [^^what ^^is ^^ChangeTip?](https://www.reddit.com/r/changetip/wiki/tipping-on-reddit)
I usually stay out of this whole MongoDB thing in reddit, as I have found most people who complain about it do not understand data, nor how to use it. I'm using MongoDB at a very large scale in a financial enterprise app. Millions and millions of records, guess how many problems I've had that all these people in the internet claim...none. If you don't know how to use a tool, don't say it's broken. Mongo has fixed almost everything people are claiming and the hate it gets is from the same people who hyped it up in the first place. If you use it, you will have to understand data very well in a large scale, fwiw. For a simple E commerce app, it's probably would be easier to whip up a simple SQL do though. 
Jesus, this answers so many questions. 
This is one of the many reasons why I like good tooling. Dart: http://i.imgur.com/QGCONYx.png TypeScript: http://i.imgur.com/cGTTNnq.png I'm not sure if there is a editor/plugin/annotation combo which would do this for JavaScript. I know that Closure has annotations for this, but I'm not sure if it's picked up by anything. Even the simplest inline annotations never worked for me in editors/IDEs.
[**Edit:** The question was what happens if an argument is omitted.] Then it still exists, but its value is `undefined`. function a(foo) { console.log(foo); } function b() { console.log(foo); } a(); // undefined b(); // bombs with: ReferenceError
I don't actually use it much these days, but Webstorm's autocompletion is, in general, pretty good: http://blog.jetbrains.com/webstorm/files/2014/07/completion.png
I'm not talking about globals, really, but about testing method parameters before using them. As a matter of writing more bulletproof code, my style for years has been to never automatically assume that an incoming function parameter is valid, that way my methods can fail gracefully (or quietly if appropriate) and provide more helpful feedback than a messy stack trace when they do fail. EX: Manager.prototype.RespectEmployee = function(employee) { if (typeof employee !== 'undefined') { if (employee instanceof Employee) { employee.GiveRaise(); } else { // throw error } } else { // throw error } } I suppose I could write a validate method for every class to clean that up a bit. But I'm surprised there isn't a cleaner idiom?
Yes, but does it handle the arguments of callbacks? Does JSDoc work? /** * @callback opCallback * @param {number} a * @param {number} b */ /** * @param {opCallback} op * @return number */ function wantsCallback(op) { return op(2, 3); } Or Closure? /** * @param {function(number, number): number} op * @return number */ function wantsCallback(op) { return op(2, 3); } (Man, that stuff is hideous.)
That's actually an unnecessary check in the example. This works as you would expect: function Manager() {} function Employee() {} Manager.prototype.RespectEmployee = function(employee) { if (employee instanceof Employee) { employee.GiveRaise(); } else { console.log('not an instance'); } }; var m = new Manager(); m.RespectEmployee('something else'); m.RespectEmployee(); m.RespectEmployee(undefined); I hit the `console.log` all 3 times.
Loved the explaining of each npm package man, really good article (tutorial).
Mongo wins hands down in popularity? I would imagine that is mysql, think of the bazillion wordpress installations out there. Mongo doesn't handle scale well, this is known.
Thank you :-) The play store and app store and Steam and what not, I'm basically tired of all that, being tied to the limitations of the platforms, getting lost in the bottom 99% apps. I'm going to give JS a shot.
His other 2 tutorials are equally awesome as well.
Anyone who still uses Mongo deserves a punch in the face. It's not acceptable in any use case. And no, "I don't care about the backend" is not a valid excuse to promote one of the worst practices in the industry.
Shouldn't the animation also transition when the mouse moves away from the object?
NO
I looked at coffeescript for the indentation syntax but I couldn't compile it alongside Babel, and I didn't want all of its functionality. Yes, linters are broken currently with Miel, but also a lot of linting, for me anyway, was fighting these darn brackets, especially when refactoring. It may not be a huge deal, but I hate counting brackets at all, or having to spread out my function when I declare them. It's possible to lint the compiled code or course, and possibly to hook into ESLint for a Miel linter later on...
Coffeescript compiles with babel? I don't know, the fact is ES6 has all the sugar of coffeescript.
From a UX perspective using a delayed animation to provide informational items is likely to frustrate a user. There are times for animation, there are places this would work well, but for the most part give users information with immediacy.
ES6 is now official.
Yeah the pause is annoying, and should not be the default.
So... Meteor? =)
Is this satire?
Es6 is going to impact a lot of frameworks and not to mention web assembly which will probably create more preprocessors like coffee script or type script. Also web components will also change the state of WebDev from design to development. Lots of changes coming. Edit: thanks for the list of ither podcasts! Gonna give those a listen.
Thus does not work on chrome mobile. Elements if the screen just lag around behind the scroll!
The article is missing the point. It's not an all-or-nothing decision. Sometimes classes (in the ES6 sense or in the ES5 "constructors with prototypes" sense) are the most appropriate solution to your problem, sometimes not. If you want to make a necessary breaking change to how the library itself behaves, you're in major.next land (or minor.next if you're at 0.x) and everything is fair game (the old API is irrelevant). If you want to *supplement* the library or add logic that is outside the library's previously intended use, you should probably be writing a separate module (or even a wrapper module) instead of touching the library itself. Libraries are *modules*, not monoliths. General purpose toolboxes like underscore and jQuery are the exception, not the norm. Of course [the usual criticism of this kind of articles](http://meyerweb.com/eric/comment/chech.html) applies, too.
I've worked on projects that make heavy use of monkey-patching and they're not pleasant to work with. I wouldn't recommend doing it unless it's the only possible solution. Making the "subclass" methods available in a method is as simple as merging two objects. As for the performance the effect in practice is negligible. Your use case needs to be pretty extreme for it to make an actual difference. 
As dvlsg says, it's unnecessary. You only have to run a typeof when a variable may not be declared (*i.e.* working with globals). When it is declared as an argument, even if nothing was passed, the variable exists and is `undefined`. The same is true of a variable declared with `var`. Remember that `let` suffers from a [temporal dead zone](http://jsrocks.org/2015/01/temporal-dead-zone-tdz-demystified/), so it adds a separate set of complications.
i can bet you that that line of thought is the same one that created the monkey patching problem
Private properties are not. Rationale: * either they are properties, which means they aren't hidden from external access * or they are hidden from external access, which means they can't be properties You can close over locally scoped variables via higher order or factory functions (i.e. functions that either return functions or objects with methods), but these are decidedly NOT properties in any sense of the word. You can also create properties with non-exported symbols as names but they aren't private (just obscured). The reason for symbol properties to exist is not simply information hiding, they provide a mechanism to define well-known or uniquely named properties that don't carry any risk of accidental shadowing.
In my opinion indentation just makes sense for those who may have a bad time adapting to C-like languages.
This JavaScript library itself is a dependency for something that can very easily achieved with just CSS3.
Official, but not supported native by browsers yet.
General note: if you're making a UI package, it's not a good vibe to have laggy parallax in your demo. Leads one to wonder what else isn't being rendered efficiently in your library. I got a bit excited at first, but there's some fatal flaws here. The standard for tooltips is [Bootstrap](http://getbootstrap.com/javascript/#tooltips) - which is pretty sad, honestly, but there's not a lot of other options out there that actually get the job done reliably. The main problem is the lack of configurability. It's mandatory to be able to define things like the trigger (how the tooltip is called to display), viewport (which DOM container it lives in), and the delay on the animation. Almost no one cares about color options - that can easily be defined through CSS classes, and most designers already have their palette worked out, and any pre-defined colors are unlikely to to satisfy that. Also not a fan of using a global to instantiate these. It frees you from jQuery dependence, sure, but this is the exact place where jQuery is really desirable, as it allows a developer to select the intended elements to receive tooltips and then apply the tooltips, potentially based on the properties of the nodes retrieved.
Yeah, with IntelliSense you can usually type: app.get( And then press Ctrl+P. It will show the parameters.
It is fine until you discover it has been silently dropping important data.
How do you 'hover' on mobile? :)
Not really the same thing but there's [JSLint](http://www.jslint.com/) which analyzes the code for problems.
I'm not trying to be snarky, but honestly, I don't see a lot of arguments other than: 1. MongoDB does not have transactions and is not ACID compliant. 2. MongoDB is not good for basic CRUD operations. 3. Do not use MongoDB. Why would MongoDB not be good for CRUD operations? Considering the sharding and cluster capabilities, why would MongoDB not be able to scale well? Huge sites like Trello run on MongoDB and I have been using it for about 3 years without a hitch? Transactions and ACID complacency are fair arguments and I'd never use it for financial data myself, but I honestly think MongoDB gets too much flak considering that it will be stable enough for a vast amount of the projects people do with JS.
Are you strictly getting data from the server via websockets? You may want to check out Server Sent Events. I wrote this a few months ago, its easily installable, and it covers SSE usage and capabilities pretty well. https://github.com/JimtotheB/Easy_SSE If you are stuck with websockets, have a look at https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API
thanks, but I am NOT using a node backend. Its an application which does other stuff aswell but offers a websocket api.
Use the profiler from your browser's dev tools. The actual bottlenecks in your actual application are the only thing which matter.
Ah ok. Well, be sure to check out the second link, it has all of the answers you need. You are going to have to write a fairly non-trivial abstraction layer on top of the raw WS API, but once you do that it should be fairly smooth sailing.
Woefully ignored by the JavaScript community? Non classical OO code reuse patterns (like composition) are very widely touted on /r/javascript (and just about everywhere else). It's hip as shit to hate on classes. If you so much as mention a class on reddit (or a linked article) the accompanying thread will be full of derisive comments about how Classical OO is anachronistic and not as robust as other solutions (which may well be true, but that's not the point). Sometimes I think it'd be interesting to have actual conversations with people about classical OO vs. functional code reuse patterns. It seems for the most part that commenters in /r/javascript spout the same buzz words every time this comes up but don't seem to have much beyond a shallow understanding of what those words actually mean, or how they apply to large codebases.
Two things too that I might add: If you want employers to look at your site and be encouraged to hire you as a front end developer, then you should unminify your code. Employers want to read through what you've done, and keeping it unminified helps in doing that. It's basically a way of saying "Check out my work. See what's under the hood". Even veteran dev shops do this, legworkstudio.com (Denver, CO) for example has a completely open source website. As far as your actual solution goes, it is quite well written. One thing I might suggest is abstracting the two transform string into one function that takes your variables as arguments as returns a string. That would DRY it up a bit.
i think its the first comment on the video: https://www.webintersect.com/questions/735/homework-problem-combine-flip3d-and-click-trigger (last comment)
https://developer.chrome.com/devtools/docs/cpu-profiling https://developer.mozilla.org/en-US/docs/Tools/Performance There are also a bunch of videos on YouTube.
I think I understand, so essentially just like the way I have done the inner function of fadeOut.... 
A short pause is good to make sure the user intends to interact with an element and not just moving over it. Plenty of menus on sites I frequent randomly pop up and it is annoying. 
- after your edit, I believe I fully understand the problem - thanks a lot
I always recommend http://jhusain.github.io/learnrx/index.html, as an introduction to functional programming in javascript. Its a tutorial for netflix employees and so most of the sample data is about movies, which is something we as humans have a good context for which makes it easier to think through. 
No, there it's triggered by the button click. I want it from a div click.
The whole idea is to find a general solution to supplying data to event handlers, keeping the datatypes, and not restricted to HTMLElements. There are situations when attributes are unavailable or unsuitable and one would want a more general solution. Sometimes one does not want tons of attributes (or even a few) in the markup exposing data, or want to keep the native JS types (object, number, boolean, null, undefined), and not have to deal with problems doing strict compares. Sometimes attributes are not an option. For example, when using an async API like FileReader in a loop, the loop would finish faster than each read operation. The filename is lost after, and the only way to make it accessible is to either store it directly as a property of the `FileReader` object (which is not reliable), or bind it to the `onload` as an additional argument. function loadData( filename, event ) { /*we now have filename!*/ } for( var i = 0; i &lt; files.length; i++ ) { var reader = new FileReader(); reader.onload = loadData.bind( this, files[i].name ); reader.readAsArrayBuffer( files[i] ); } Instead of only having the single argument `Event`, it prepends the supplied arguments to `loadData`. This is less of a problem if it's not in a loop, because a shared variable in the scope may be used. However, I prefer to limit members to only where they are needed. In this case, we only want to give it to the event handler. Of course, if all of a sudden it became good practice to store arbitrary properties on host objects, this would also be a good general solution and meet all the requirements (available when not an HTMLElement, not limited to string type etc.). I can't say much about event delegation because I haven't used it much, but it seems still limited to using attributes, and not suitable for complicated apps with many clickable elements (How can you have one handler over an entire wrapper handling 100 elements!?). Besides, what's wrong with multiple event handlers/listeners? It's not slow at all, and memory shouldn't be an issue. Attributes definitely have a place though, I can see the `data-*` attributes being heavily used in maps and other data visualizations (think [d3.js](http://d3js.org/) etc), where it's not practical to create tons of event handlers.
Yes it will unless you specify a starting value, like so var startingValue = 0; var total = [0, 1, 2, 3].reduce(function(previousValue, currentValue) { return previousValue + currentValue; }, startingValue); 
if you post a jsfiddle i can do it ;d basically: a) &lt;div onclick="flipit(this,true);" ... &gt; ... &lt;/div&gt; or b) el.onclick = function(){ flipit(this, true); } best i can do without a fiddle sry. gl :)
Oh I see the 0 now. Makes sense.
You can call reduce either like this: .reduce(function()); Or like this: .reduce(function(), firstPrevValue); If you call it the second way, what you pass for firstPrevValue is what gets passed to the as the first argument to the function that is reduce's first argument. Like the MDN documents say, reduce() is used when you want to go through every element in an array to calculate a single final value. You're "reducing" the array elements to one value. The functional Programming waypoint was really difficult and I had to restart it a bunch of times to really let the idea of how to use those functions sink in. After that, I went back to some of the earlier bonfires to try to redo them using FP techniques and found that now my solutions are much more elegant and less confusing with not having to make a bunch of temp value to hold stuff extracted from arrays or writing confusing complicated nested loops. Hit me up if you want to pair up sometime, @kurzninja in Gitter. 
This tutorial is exactly the page FreeCodeCamp uses for its Functional Programming waypoint. Quincy said they're in the process of creating their own tutorial that will hopefully be easier to follow and understand but said it's quite a ways off. 
eh already answered but ill try the first param is actually memo not a the reduce fn passes the result of the last call as memo/a so it goes like this: total = sum(total, 0); total = sum(total, 1); total = sum(total, 2); total = sum(total, 3); 
[Code School Discover DevTools Free Course](https://www.codeschool.com/courses/discover-devtools)
Let's break it down a bit to make sense of all those parenthesis and curly-braces. You're defining two functions: One that you want to delay by two seconds, and one that you want to occur after a fade-out. Here's the outer one: setTimeout(function() { ... STUFF YOU WANT TO RUN AFTER 2 SECONDS ... }, 2000); Note the two parameters to the `setTimeout` function: 1) the function to call after the delay, and 2) the number of milliseconds to delay by. Here's the inner function: $("#formmessages").fadeOut("slow", function() { ... STUFF YOU WANT TO RUN AFTER FADE-OUT ... }); Note the two parameters to jQuery's `fadeOut` function: 1) the speed of the fade, and 2) the function to execute when the fade is complete. When you put them together, be careful to make sure that everything is nested properly. **EDIT:** This is unrelated to why your code isn't working, but it *is* related to making your code nice and readable. jQuery supports method chaining for most of its functions. That means that you can write this: $("#formmessages").text(""); $("#formmessages").removeClass("success"); $("#formmessages").show(); as this: $("#formmessages").text("").removeClass("success").show(); 
Not really, modern JITs detect the creation of functions and objects. Repeats of the function basically copy as a pointer to the function rather than creating new functions. Likewise, the objects share the same C++ class, so they are optimized as well. I can't link to JSPerf, but factories are only marginally slower (and can be faster in some cases). The only important case (IMHO) is where you are creating hundreds of instances of an object (a fairly low-level case). Two of the biggest monkey-patching problems are inheritance (solved because factories compose rather than inherit) and not respecting `_privateProp` properties (which is also not possible with factories). The second problem does not get as much attention, but instances screwing with pseudo-private elements makes it impossible to refactor and is a very insidious evil. EDIT: I would add that there are a ton of monkey patching problems that exist due to devs not understanding the language and this ignorance is often the hardest problem of all.
Yup. I always use Ratatat for all my demos.
Thirded and tabled as something already mentioned strongly in the sidebar.
Profile, don't benchmark. Only benchmark extremely critical bottlenecks you find during profiling.
I'm currently working on a project in EmberJS that uses websockets for a chat client. In this case, a controller initiates the websocket connection and updates the data store whenever it receives a new message. This controller is then added as a dependency for other controllers where necessary. However, theoretically any framework with the concept of data binding should work just fine. You just need some sort of singleton that updates the data store. In EmberJS, this is a controller, but it could also be a service in Angular or part of the dispatcher in React.
&gt; And that it's the right type is ensured via type annotations (Dart, TypeScript, Closure Compiler). Type Annotations? I haven't heard much talk about people using Dart or TypeScript... are they in widespread use? Closure Compiler looks pretty cool. I'll look into that. Thanks. 
I love javascript jabber. It is such a good source to learn about new technologies. I kid you not when I say i landed my job in part because of them; the podcast serves as a good compass of what is trending and what is new so you are feeling lost it can guide you in the right direction. 
oh man....i need to take a break and refresh thanks
Click the icons and tooltips show up. They then lag around the screen when scrolling. The parallax background seems laggy on mobile too.
 setTimeout(function(){ $("#formmessages").fadeOut("slow", function(){ $(this) .text("") .removeClass("success") .show(); }); }, 2000); should also work. jquery functions return the object so you can chain the events `$(this).text("").removeClass("success").show()` should be fine 
Look at it without the anonymous function: var theThing = function() { $('someThing').someFunction(); }; var timeToWait_ms = 2000; setTimeout(theThing, timeToWait_ms);
I work with apps that have a lot of callbacks and nested functions. I like to name functions, even if they're used in only one place, if only to make more sense of stack traces. This is how i'd structure it: var $el = $("#formmessages"); function changeEl() { $el.text(""); $el.removeClass("success"); $el.show(); } function doFade() { $el.fadeOut('slow', changeEl) } setTimeout(doFade, 2000); 
&gt; From a UX perspective using a delayed animation to provide informational items is likely to frustrate a user. In complex forms, the opposite is true. So it's not from a UX perspective, as that is a biased assessment.
:). jquery always sets this to the element passed to $( )
1: The initial value of a is whatever you pass as the second argument: console.log([].reduce(function (a, b) {return a;}, 0)); // 0 console.log([].reduce(function (a, b) {return a;}, "javascript")); // "javascript" console.log([].reduce(function (a, b) {return a;})); // Error 2: For each iteration, a becomes whatever you returned the previous iteration [1, 2, 3].reduce(function (a, b) { console.log(a); return a + b; }, 0); // 0 // 1 (0 + 1) // 3 (1 + 2) // return value = 6 (3 + 3) 3: If you did not provide a second argument, reduce will take the first element of the array [1].reduce(function (a, b) {console.log(a)}; // 1 // using an empty array results in an Error [].reduce(function (a, b) {return a;}); // Error
edit - ok I looked it up and I think I'm pretty clear, there's not really a fundamental difference. Learning a lot - thanks! ~~Thanks - can I ask you....you have the original variable declaration with the dollar sign, like: "var $el = ..." whereas in the tutorial I was originally trying out, at the top of the script they had no dollar sign when setting a variable to the form, like so: var formMessages = $('#formmessages');~~ ~~And I tried using that variable in certain places instead of $('#formmessages') and it always seemed to cause the script to fail, so I didn't do that~~ ~~When would I put a dollar in front of a variable like that and when not?~~ 
example please?
you can use reduce to write filter like so: var result = [0, 1, 2, 3, 4, 3, 2, 1, 0].reduce(function(a, b) { if(b &lt; 3) { a.push(b); return a; } return a; }, []); This would be basically the same as: var result = [0, 1, 2, 3, 4, 3, 2, 1, 0].filter(function(a) { return a &lt; 3; }); with Arrow functions the filter would look even nicer: var result = [0, 1, 2, 3, 4, 3, 2, 1, 0].filter(a =&gt; a &lt; 3); As a comparison, in purely functional languages such as Haskell or OCaml reduce is equivalent to a fold.
http://i.imgur.com/C7vQoGI.jpg 
http://codepen.io/Firdaus-Sabain/pen/zqonf http://codepen.io/chinchang/pen/lICaq 
They're warnings and errors for a reason. Synchronized Ajax is terrible because JavaScript is single-threaded and you're blocking the entire thread until the server responds, which can be a really long time. The browser *should* yell at you when you do that. Use async.
i refreshed the page and it still replies Richard when i type "name" into the console
Pretty sure this could be done in about 4 lines of CSS, but I'm on mobile right now so I can't verify .. 
Sounds good, how would you incorporate that in the code above?
Cool, how would you implement a input button for the word and the urls? (Sorry, I´m really nooby in Javascript hehe)
I don't mean to be rude, but you need to learn asynchronous programming if you ever want to be good at javascript. It's a huge part of the environment and you'll keep writing inefficient code and giving your users a terrible experience until then. Using asynchronous ajax isn't really negotiable.
Questions like this are why SA is moderated like it is. 
http://discover-devtools.codeschool.com/ 
Well, first you said that it's too difficult and complex, now you're saying that you can do it easily. I hope you realize what kind of impression that gives off. Unless you're trying to make a request when the user closes the page, there are no use cases for using sync ajax in the main thread. That's why it's deprecated. It sounds like you've run into the [XY problem](http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem), so you should figure that out.
https://developer.chrome.com/devtools/docs/javascript-memory-profiling
No, this is not the "XY Problem." If I'm building a tool that needs to know whether a file exists to determine whether to move in direction A or direction B, both directions causing significant additional load on the server, I can do the asynchronous thing by creating a callback for each file that I check along the chain, and making the user sit with a "Loading..." screen that gets updated when the callbacks are triggered, and then coding additional lines that make sure they happen in the correct order (or manually halting the code after each one, and creating a system to order the callbacks appropriately), or I can synchronously send the "loading" image, and check each file synchronously. From the end-user's perspective, the end result is the same. From the programmer's perspective, ordering and organizing the callbacks is significantly more complex than just knowing that the page will "hang" until it gets the response or times out, and then follow up based on that response after the fact. Sometimes there are reasons for a synchronous call. It's not often, and it's important to know when it makes sense. (This is part of being a good developer.) But stating absolutely that there's "never" a reason for a particular coding style is precisely what has caused all KINDS of problems in the past, with people overusing "new" features (inheritance immediately comes to mind) for years until someone finally pulls their heads out of their asses and realizes that the person who says "never" is usually wrong. 
Perf audit of Reddit by Paul Irish: https://github.com/reddit/reddit-mobile/issues/247
great link! love the example links at the end of the article that are basically live examples.
Ah, sorry I see what you are saying now. Good design is many things as I know you are aware; one could argue that if a tooltip is obscuring information then there are more fundamental problems than the use of animation. Added complexity to solve design issues isn't really the best direction to take things.
&gt;Use deferred objects/promises or do your sync requests outside the main thread using webworkers. Is this not limited to HTML5? If not, this is a direction I can go down, but would this not ALSO fill the console with warnings/errors?
What is SA?
Here you go: //Create events array var events = new Array(); //create the 6 weeks for (var i = 0; i &lt; 7; i++) { event[i] = new Array(); //create the days for (var j = 0; j &lt; 8; j++) { event[i][j] = new Array(); } }
If you're doing `var name = "Richard"` in the console, a refresh should get rid of the property. If that is in the page, well then obviously refreshing the page just means it will get redefined again. If defined in the console, you have a bit of a problem. The console is scoped to global (i.e. the `window` object), just like scripts in the page (we're going to ignore the fact that `name` is _already_ a property of the `window` object which complicates things a little bit more). When you define a var in global, it becomes a property in global, and not just any property, a non-configurable property. This is different than defining a variable without the `var`, which just becomes a member variable in the `window` object. These, or variables defined explicitly on `window`, can be deleted. A non-configurable property cannot. To see what I mean, try the following in the console: var foo = 1; bar = 2; // or window.bar = 2/this.bar = 2 console.log(Object.getOwnPropertyDescriptor(this, 'foo')); // -&gt; Object {value: 1, writable: true, enumerable: true, configurable: false} // ^ Note the "configurable: false" console.log(Object.getOwnPropertyDescriptor(this, 'bar')); // -&gt; Object {value: 2, writable: true, enumerable: true, configurable: true} console.log(delete this.foo); // -&gt; false console.log(delete this.bar); // -&gt; true Non-configurable properties cannot be deleted, nor can they be reconfigured, so you're kind of stuck with them. Of course as I mentioned before `name` is already a native property of `window` so you already had it to begin with.
The event is probably being bound to the elements when the page loads but its losing the binding when the new html gets appended to the page. I dont know where your event is being bound or where you toggle function is but if its anything like jquery something like this would work $(document).on(event_name, __element_selecter_, function(){ /*toggle*/}); and $(__element_selecter_).on(event_name, function(){ /*toggle*/}); would not. however looking at the code it looks like a standard bootstrap collapsing component? so yea, as /u/lechatron said looks like your missing a target. http://getbootstrap.com/javascript/#collapse 
Here's a simple reduce function implemented using a loop. This one doesn't deal with a bunch of weird cases that the real one handles Array.prototype.reduce = function (fn, seed) { var acc = (arguments.length &gt; 1) ? seed : this[0]; //set the value of the initial val of the accumulator var i = (acc === this[0]) ? 1 : 0; //if the acc is the first item, start the loop with the second item while (i &lt; this.length) { //pass in the accumulator, current element, current index, and whole array acc = fn(acc, this[i], i, this); //result is given to the accumulator for the next loop i += 1; } return acc; };
http://mindaboutjs.com/2015/07/18/the-three-javascript-musketeers/
I think it is closer to: var calendar = [ [['event1', 'event2'], ['event1', 'event2']], [['event1', 'event2'], ['event1', 'event2']], [['event1', 'event2'], ['event1', 'event2']], [['event1', 'event2'], ['event1', 'event2']] ]; An array of array of arrays -- i.e. a 3-dimensional matrix.
duckduckgo have the !mdn bang. "!mdn something" 
I'll answer it anyway... a variable can start with a dollar sign, and simply as a convention, I do that for preserving variables which are the result of a jquery call, like this one. I could have just as easily named it 'el', too.
One of those weird cases is the one where `seed === this[0]` and they're not `undefined`; you can fix this by changing that second condition to `seed === undefined`, and to make it even more robust, you could change both conditions to `arguments.length &lt; 2` so that `undefined` could be set as an explicit seed (if you really wanted to do that). Also, `arr.length` should be `this.length` and maybe that should be cached into a variable to speed up the loop (although I know Kyle Simpson [recommends against this](https://github.com/getify/You-Dont-Know-JS/blob/master/async%20&amp;%20performance/ch6.md#microperformance)).
Thanks for the tips. With some of the heavy images (haven't gzipped or anything yet but will) I'm concerned about page load speed. If employers want to read through my unminified code then I think I'll comment in a link to it, I think it could be just as important to show that I know to minify/uglify.
generally, you want to use event bubbling and bind to parent elements, like in the delegated events section here: http://api.jquery.com/on/
Who uses `new Array()` anymore? That's been recommended against for over a decade now.
Thanks for the constructive criticism. The `arr` variable was a mistake. I also changed to `arguments.length` as this deals with edge cases in definition in a better way. 
Was planning on posting this tomorrow, but I finished it a little earlier than expected and I'm not gonna be near a computer in the morning. Sorry if it's bad form to post twice in one day.
Awesome presentation dude, was a wee bit sad that at the end of it you didn't click Play Program. Is it pong your monkeys have made? link?
One of our testers injected a script tag and iframe into the woofmark composer. Looks like a bit of HTML sanitisation is in order :)
Thanks! I wish I had included a live demo, but I'm planning on doing a video just for that once it works a bit better. You can try it out for yourself at http://helix-pi.net/. As I said in the video, the editor is awful to use. Start out by clicking the 'add 60 frames' button and then drag one of the objects around. You can then play the program. Pong is the first milestone that I'm working towards, but I've yet to achieve it.
A global variable declared with the `var` keyword is a non-deletable (generally, "non-configurable") property of the global object; also, setting a variable or object property to `undefined` does not delete it. Variables and object properties in non-global scopes can be garbage collected once no more references to them remain, and the `delete` operator *can* be used to delete object properties with the attribute `configurable: true`, which properties created with property-access expressions have by default; it's usually faster to just let them be garbage-collected (after, in a few special cases, setting some things to null, esp. any handles to DOM objects in oldIE, to ensure there are no circular references) than to explicitly use the `delete` operator. As a special case, setting the `length` property of an array to its highest numeric index or below will delete all properties numbered at the new length and above, and *that's* usually faster than most uses of the `delete` operator. Although there's no way to delete a `var`-declared global variable or to ensure it's garbage-collected in all engines, recent JS engines should figure out what you mean if you set such a variable to `null` and then never use it again (or even just never use it again, as long as it doesn't have complicated references to other parts of the code; the key term is "dead-code elimination"). --- It's good form to never explicitly set variables to `undefined` and instead just write code to handle undefined values that crop up.
Yeah, that's not any kind of standard. 
It will be quite the achievement. I don't want to miss the progress you make with this, got a twitter or something?
According to [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FReduce) (and unless I misunderstand) if no seed exists, then set the first item as the seed (at which point, we skip). I fixed the reversed ternary.
Stop being mean and elitist. 
Ok I'll try the data-target, and see if that works. I'll set a unique id to each collapsing div for the target, and see how it goes. Thanks.
https://raw.githubusercontent.com/torvalds/linux/master/ipc/sem.c
aka. foldl (fold-left)
``Math.sin()`` and ``Math.cos()`` are a common way of doing curved movement
The ES2015 syntax for class is synonymous with the pattern the author supports. It's is syntactic sugar at worst, it's easier to organize. The functions without the function keyword, inside a class declaration make it clear that it is a prototypical method. Additionally, it makes it easier to distinguish getters and setters. Prototypical inheritance doesn't make it not a class, this aligns the functionality, syntax, and vocabulary. 
If it's just `new` you have a problem with, why not just use [`autocreate`](https://npmjs.com/package/autocreate)?
Why should you be using Object.create in a factory function rather than using a constructor function? Constructor functions are more complex. They are less clear, and easier to mess up. They bind `this` to the object *being constructed*, and require the `new` keyword to be used correctly. `new` violates the open / closed principle because it can prevent expansion from class to factory capabilities “Simple is better than clever”, and using OOP like syntax because OOP is considered to be more “sophisticated” is just unnecessary, technical overhead. Object.create is more expressive and clearer than a bound `this` variable and `new`. Also, the prototype is stored in an object possibly outside the scope of the factory itself, so it can be modified and improved more easily and with *internal* function syntax, just like ES6 classes. &gt; The `class` keyword will probably be the most harmful feature in JavaScript. I have enormous respect for the brilliant and hard-working people who have been involved in the standardization effort, but even brilliant people occasionally do the wrong thing. - Eric Elliot Adding something which is unnecessary, possibly damaging, and counter to the very nature of the language is a bad move.
very detailed review! it really help to realize the lib weeknesses
Meh. I use an extend method in a base prototype that is the factory similar to other frameworks such as Ember. This technique is 100% prototypical inheritance, but allows a clean and extendable syntax with support for both mixins and super methods. I know exactly how the prototypes work under the hood of the extend method and don't think others lose some sort of deep understanding by using this approach. The code imho is easier to maintain, extend, and mixin features then the method you're suggesting. I'm not saying your wrong, as you say, there are different styles and approaches and you should use the one that best fits your needs. Yet, I'm not convinced that we need to stop using class-like (object oriented) structures in JS. Its a pattern that I believe has some phenomenal applications; particularly when trying to prototype a system quickly by abstracting code into base classes or mixin classes that can easily be extended or mixed in to other classes. Your method allows for similar patterns but just a different syntax. Its sort of becomes an argument of using angular vs react; different approaches; neither are wrong. Some like one vs another and its more of a personal preference issue than a anti-pattern.
Author here - thanks for catching the typo, should be fixed. Paperclip is actively used at ClassDojo, and it's been around for a few years at this point. The main difference between React, and Paperclip is that React uses DOM diffing whereas Paperclip changes only the parts it needs to. It's a good option if you're looking for something a bit faster. Here's a demo: http://paperclip-dbmonster.herokuapp.com/ I'm actively working on improving the library, so feel free to reach out if you have any feedback or questions! 
... not quite. You begin your traversal at a minimum depth greater than whatever your "bought" (or requested, in our case) value is from your target node. I'll be sure to be clear about that in the article. This way you won't bother with nodes the user has already purchased / what-have-you. Not a difficult problem to solve. :) Edit: minDepth: 3 is set in the gist related to "bringing it all together." I've specified afterwards *why* we do this.
No
I get that but you would assume Amazon had already done that. I guess that for most people their purchases are so sporadic that there is no useful information to be linked together.
Thanks for sharing these details about the various tools. JavaScript's weak typing mechanics are both a blessing and a curse. In the end I think I prefer stronger typing to help with bug fighting. It's good to see that there are attempts out there to mitigate this problem.
Animate in a loop which gives you dt (delta time - last frame time). Either by requestAnimationFrame or setTimeout with time counting. class Particle { Point position; Point velocity; Point acceleration; tick(dt); } velocity += acceleration * dt; position += velocity * dt; Angry Bird shoot: set velocity to 10, 10, acceleration to 0, -g. Friction: apply acceleration in the opposite direction of speed. Point.mod() would help. 
Particle effects are actually pretty easy. Each particle has a position (x, y), some velocity (dx, dy), and whatever else you need e.g. a time to live (ttl) in seconds. Whenever you update your simulation, you just iterate over all particles and add the velocities to the position (y += dy * t), add some gravity to dy, ensure that dy doesn't get too large (=terminal velocity), and so forth. In the draw step, you just draw them at their current position and with their current attributes (e.g. opacity based on remaining ttl). Particle effects can be used for all kinds of things. E.g. fire, smoke, or explosions. **Edit:** Here is a demo: https://dartpad.dartlang.org/561a041654d7ac7897a1
Then it must be defined somewhere in the page (or in JS files the page includes, if any) as a global variable. Remove it from there, otherwise it'll always be visible in the console.
when actionscript got classes everybody stoped using prototypes. The same will happen with javascript. Everybody will stop using the clunky and unnecessary prototype inheritance directly.
Thank you for this excellent response! That was very well explained. You never really know what you get when you ask. Sometimes you get an awesome responses like this, sometimes you just get flamed. :) &gt; Trello isn't exactly "huge", and (no offence) I doubt your site is either. Trello has more than 5 million users. I'd consider that rather large, at least? What does "huge" mean to you? Sites like Google, Facebook, Twitter etc.? Anyway, I'll admit that we also don't know how well MongoDB actually works at Trello. They might have 5 guys running around with their hair on fire for all I know. And no, my site (a national product) isn't big but it's all relative, I guess. If we had 5 million users, it would be almost the entire population of my country. :) &gt;MongoDB doesn't support transactions. (Or as their FAQ amusingly claims, they do, just so long as you don't want to edit multiple documents at the same time. Right.) Haha, yeah, I remember reading about it back in the day when *inserts would by default fail silently*. I mean, how could this ever be a good idea? Who would ever actually want that? Some things have just been silly. &gt;Most people don't actually need to scale their DB engine. That includes the overwhelming number of people who think they need to scale. This made me chuckle. I've seen people who wanted to "scale" because things were slow, yet they did not know about indexes. It's odd because scaling is always a huge hassle and should, in my opinion, be a last resort. &gt;I'd be rather surprised if Cassandra or Riak or Rethink wasn't an even better choice than Mongo Yeah, it seems like Rethink could soon take over in that department. I guess you still aren't a fan though? :)
your issue isn't with funcational programming but with js syntax.. generally: array.method applies method to array, specifically: reduce traverses the array its applied to and calls a function at each step in its traversal: apply function to 0, 1 then 1,2 then 2,3 etc 
why would you use this over WebComponents, which are on their way to becoming standardized?
This is one of the proposed solutions to an exercise: return movieLists. map(function(movieList) { return movieList.videos. map(function(video) { return video.boxarts. filter(function(boxart) { return boxart.width === 150; }). map(function(boxart) { return {id: video.id, title: video.title, boxart: boxart.url}; }); }). concatAll(); }). concatAll(); I've heard people say that functional programming is "more maintainable" and "easier to reason about" but I'm not so sure about that.
Good news is, we're not classifying JavaScript. The language does that on its own. Its part of the language, at least as far as the syntax goes. And that's OK because its still using prototypal inheritance under the hood. When you make a class in JS, you're not saying you're using classical inheritance, you're showing intent to use protoypes in a classical manner. There's nothing wrong with this. It even helps provide some level of (implied) protection, especially when the class syntax is used because prototypes are automatically set up for you. In fact, the example provided is showing manual definitions for the boilerplate the classes already gives you. Calling these out explicitly just opens them up more to runtime manipulation... Speaking of which, I don't follow the whole "new breaks the open/closed principle" way of thinking. For one, as a prototypal language, JS already breaks the open/closed principle. Prototypes can be mutated at runtime so closed is out the window (the fact that ES6 classes hides the prototype helps isolate it from modification, making it appear a little more closed). Open is still fair game. And nothing is stopping anyone from extending an open class to include a factory to handle object creation. If a caller is using new but needs a factory, well the class can't expect to change its behavior to satisfy that caller. _That_ would be violating the open/closed principle (can't be very closed by modifying existing class behavior). Extend, then update the caller. What else is there? Misuse of constructors? There's protection for that in ES6. Try to use a constructor without new, you get a TypeError. And of course there's nothing stopping anyone from making a factory method in their classes allowing callers to bypass the use of the constructor and new. And sure, you could probably argue that ES3 was trying to obscure prototypal inheritance in a classical format given that new with constructors was the primary means to implement it, but since then we've gotten Object.create and even a setPrototypeOf in ES6. So there doesn't have to be any classical semblance to prototypal inheritance in JS anymore. Want pure prototypes? You got it. Want something more classical? Go that way. You have the choice.
So given the explanations in the comments about how map and filter work, consider the a and b being passed to reduce as arrays themselves (as opposed to the usual numbers). Instead of summing integers, you're checking b's contents for numbers not contained in a, and returning those numbers merged with a's original contents. This will repeat until you've gone through the 'two or more' arrays and you'll end up with one array of unique values. That's how I'd do it on the toilet at least.
Also the part where you talk about comparing `$` and `document.querySelectorAll` I'm actually using `document.querySelectorAll` in the `$` function. Simply converting the native `NodeList` that the browser returns into an `Array` and giving that `Array` my libraries functionality.
So if I want to have a simple let variable within a class that isn't tied to 'this' but is accessible to getters/setters? ~~'Static' isn't actually part of the spec (yet) and might not end up being in it.~~ Until I can replace... var _x = 1; Object.defineProperty(this, 'x', { get: function() { return _x; }, set: function(val) { _x = val; }, enumerable: true, configurable: false }); completely, I can't find a reason to 'upgrade' to using es6 classes.
The site's a bit broken.
Chrome (stable) already supports classes in strict mode. Edge needs a flag. Firefox is getting closer: https://bugzilla.mozilla.org/show_bug.cgi?id=837314 **Edit:** For modules, see: http://www.2ality.com/2014/09/es6-modules-final.html
A practical test on CodePen... that's interesting... What's the position? You can go through Codecadmey's lessons or look at eloquentjavascript.net. I also recommend Sololearn. https://www.codecademy.com/ http://eloquentjavascript.net/ http://www.sololearn.com/Courses/
And now we're entering a strawman. You stated private properties are not accessible in other languages. They, in fact, are.
That's the part that confused me, you said test `$` against `document.querySelectorAll`
These visualizations are amazing.
It's for a year internship starting next year, for my sandwich year at University. I just hope they don't expect me to know more than I do! Thanks for the links, working through codecademy now :)
Just read that in the guy's voice from the watchmen. 
Unrelated, but I just wanted to thank you for all the help you've provided on StackOverflow with regards to the Web Audio API.
I'm confused, the author uses decorators on functions but the spec proposal is only for class and method decorators, isn't it? See: https://github.com/wycats/javascript-decorators, specifically &gt; Decorators make it possible to annotate and modify classes and properties at design time. The newly introduced class syntax made it difficult to apply decorator functions that are prevalent now in ES5, hence why this spec was needed. 
Right... but what good is the URL to me? I need to load the video as quickly as possible because there's an audio source beginning playback immediately and the video needs to be sync'ed with it. There's no time to wait for it to download because pausing the audio until the video is ready isn't OK.
how can you make bootstrap look that bad?
Wanted to learn about bind, tried to click bind, did not link to anything. I am disappointed. 
Perhaps lay off if the person X-posting it is the same and they mention where they're X-posting it from.
Thanks, what was the task you had to do?
 Wow awesome job this is so damn cool! I love these kinds of code visualizations. Have you ever heard of gource? It's not quite the same since it is a visualization of a projects version control history but it's also an great project in the same vein. You've really inspired me with this! I want to take a stab at something similar now. I'll comment back here in 2 to 24 months with what I got depending on how lazy I get and how long it takes me to beat the new metal gear solid and final fantasy games. Great job once again.
What about prototype?
Tl;dr
If you don't care about the syntax sugar, you can use these today.
Almost every resource on those languages will say that private properties are only accessible within the class defining them. I'm just saying what they're saying.
It's entirely up to the module loader you are using. The general spec hasn't been finalised yet. If your using Node it seems like it'd be crazy for them not to use relative paths like require(), whenever v8 and nod add support for imports.
His material is good but far from being funny, more like annoyingly arrogant.
This is totally happening !! https://www.youtube.com/watch?v=8wXBe2jTdx4
Remember that scene in Inside Out where all the facts and opinions get mixed up? That might be you!
How is being funny can be a fact?
You should log out 'a'. That's not how you declare an array: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
fwiw, I've found there seems to be something wrong with the line: .css("background-color", accent.setAlpha(1).rgba()); in the section where it checks if the page is at the top or not. When I comment out that line, it works in all cases, except for the fact that the nav bar text colour is wrong. I can work around that but not sure what is wrong with that particular statement.. 
var a = new Array(5); for (var i=0; i&lt;a.length; i++) { console.log('Give me a number'); } This is what I did. all that comes out when I open up the console is this 5 Give me a number
That circled "5" on the left means that this exact message has been output 5 times.
lol youre awesome. Thank you for this. I wasnt sure what it meant
Thanks. Will do.
Yeah, I just wrote a custom calendar app a few months ago and it a damn nightmare dealing with all the contingencies. All day events vs timed events. Events with a start time but no stop time. Events that recur on same day each month vs events that recur on same day of week each month. Events that can recur eager two months for eight months and then stop. It went on and on. Every time I thought I had it done, it seemed like another scenario I had not accounted for came up. 
 Uncaught SyntaxError: Unexpected identifier at Object.InjectedScript._evaluateOn (&lt;anonymous&gt;:905:140) at Object.InjectedScript._evaluateAndWrap (&lt;anonymous&gt;:838:34) at Object.InjectedScript.evaluate (&lt;anonymous&gt;:694:21)
However, if there *is* a seed, and it happens to be identical to the first element of the array, the function is supposed to use the seed and then the first element of the array and so on, while your code, as currently written, will skip the first element of the array if the seed is identical to it. Here's what would happen if `seed === this[0]` and `arguments.length &gt; 1`: 1. Because `arguments.length &gt; 1`, `acc = seed`. 2. Because `acc === seed` and `seed === this[0]`, this means `acc === this[0]`, so `i = 1`. 3. Therefore, the first element of the array is skipped. --- Here's what would happen if that second condition were changed from `acc === this[0]` to a repeated `arguments.length &gt; 1`: 1. Because `arguments.length &gt; 1`, `acc = seed`. 2. Because `arguments.length &gt; 1`, `i = 0`. 3. Therefore, the first element of the array is not skipped.
I know what im doing this morning :)
[Based on a real tool.](https://en.m.wikipedia.org/wiki/Fsn) 
The problem is most likely that the event is eaten (e.stopPropagation() or return false) by another event handler. Otherwise, the event would travel up all the way to the root node.
Haha I actually didn't watch the videos I just had an urge to get on my soapbox. Nothing against you!
what is this? am I learning English instead of JavaScript here? that's a beautiful post^([in my opinion]), thanks
I did think about that... this is more of a learning thing for me so I wanted to figure out why it wasn't working. The "accent.setAlpha" line comes from someone else's script - they had previously defined their own function for it. I assumed the function was ok since it initially worked....etc....got hung up thinking it could be anything It takes me longer to figure this out than most of you guys I guess. I'm not really up to speed on debugging javascript so... that throws me off. Learning that is next up I guess Thanks for the reply, much appreciated
"Array is the mostly used Data stucture". Just like English is the mostly used language.
You can already assign to 'this' in the constructor and classes have getters and setters built in, I was more asking about private class variables used within the class, but it's been solved in quite an awesome way that took me by surprise, including configurability.
This reminds me of the GeoCities days :). 
awesome thanks alot !
Almost reminds me of this: http://www.visitorville.com/ 
Pretty much the same as this topic belongs to javascript category. 
&gt; Redux has [...] arguably emerged as the Flux library of choice. Library of choice for those who live on the bleeding edge! The code is still alpha and the docs clearly state "The API is likely to change a few times before we reach 1.0."
the problem is that both buttons have the same id. id's need to be unique. i'm going to spend a little more time looking at your code before i offer an alternative. by the way, your css styling for the buttons doesn't work in firefox.
The benefit of using inheritance over composition is that it drastically reduces the amount of boilerplate if you want to extend an API. Yes, this is a fairly specific and limited scenario, but I'm only arguing that inheritance is a valid tool, not that it should be *the only tool*. Inheritance is a blatant example of the "if all you have is a hammer" problem and a misplaced enthusiasm has often resulted in horrible amounts of damage, but that doesn't mean it can't ever be of any use in any situation at all. I'd say that the JS community at large doesn't actually use inheritance much (if at all) and that even constructors-with-prototypes aren't as widespread as you think, especially considering that nearly every novice finds the behaviour of "this" confusing as fuck. I use OOP alongside FP and inheritance alongside composition. Most of my code is based on composition. Heck, I'm arguing for lots of tiny modules -- if that doesn't encourage composition I don't know what does.
Awesome!! Cool.
http://codepen.io/anon/pen/xGyZYY Look at my fork. I removed the duplicate IDs and then modified the progress button lib to look for a sibling element of ".activated-data" instead of the id. EDIT: Forgot to remove my "debugger" statement in the JS panel. Oops!
ok, so what needs to happen is that you assign each button a unique id, and they both should get the same class. you can then find the elements by that shared class name (document.getElementByClassName) instead of id. since there are multiple elements with the same class, "var activateData" will be an array, so you'll need to iterate over it to access the elements. you'll likely need to adjust other aspects of your code to handle this array of elements. if you need to target a particular button, use the id.
i thought about this on my bike ride home from work -- my answer was a workaround and not a solution. i was wondering if the setAlpha was a custom function because i didn't recognize it. have you tried debugging that function? it would require going line by line to find where the failure occurs. or perhaps a dev tool like Firebug would give you a better idea on where the failure is occurring?
I would handle this via REST APIs that the server responds with to get back explicit status messaging (using HTTP status codes). That coupled with jQuery deferreds/promises on the front end to perhaps request the server on the status of the processed form. Using RESTful APIs will allow you to easily handle any errors coming from the server and notifying your users about what's going on. Look at this for more info: http://www.restapitutorial.com/httpstatuscodes.html REST is a much deeper topic, and I've over-simplified things, but hopefully this would help direct you into a viable method.
Don't have an answer but I've been trying to learn more about securing an API. How do you retrieve the JWT from the cookie and set the auth header? I thought HttpOnly cookies meant you can't access them through JS. 
Wouldn't this make _bar shared by every new Foo?
Should have used DHTML
Hey. You're a rockstar. Thank you! I learned a lot from what you did.
Thanks for the tip on FF. Ill look at it tomorrow, im sure itll be an easy fix
Wow. Thanks for the gold. Glad I could help :)
My apologies for not being clear - yes the setAlpha is a custom function that I had not included the code for. It was the reason the script failed. But it only failed after a refresh from somewhere down the page, otherwise it all was working - that kinda fooled me into looking in all the wrong places If I knew firebug better I'm sure I would have immediately seen the undefined function. I'm going to get my test and debug skills up to speed before going much further, for sure - cheers 
I had the same issue before. The problem is that your function runs when the window is scrolled and when you first reload the page at the bottom the event is not fired until you scroll. What I did to fix this was just to trigger a scroll event on the window. //on window ready $(document).ready(function() { //trigger scroll event on window $( window ).trigger( "scroll" ); }); I hope this helps!
Only an expert can achieve such horror. 
I watched the console video and I liked it. Learned a thing or two that I didn't have to use before but good that I know now. Kudos to the creator. I will keep an eye.
It's the same as `require()` if you're using a transpiler at the moment (Babel turns imports into requires), and I assume in browsers it'll be a relative URL.
Defaults!
another article explaining the `this` keyword, capital.
You're looking for something like Underscore/Lodash. If you already have some existing utility functions I recommend creating them as individual Lodash modules/Underscore mixins that you can pick and choose from at build time, keeping the total file size to a minimum. Don't worry about being "big enough" and release small, relevant utilities more often.
It's a Javascript system. I know this!
Great idea! People could submit and vote via comments. My submission would be: [JavaScript’s “this”: how it works, where it can trip you up](http://www.2ality.com/2014/05/this.html)
Literally anything: https://www.npmjs.com/~mattdesl Dont worry about whether something is "big enough" or not to put out on github or npm. Related discussion: https://github.com/sindresorhus/ama/issues/10 https://github.com/mattdesl/module-best-practices/pull/2 
I think spread is already supported behind a flag (albeit not entirely, but then again no implementation supports classes entirely either). I'll just say that it's going to be awesome towards the end of this year when Edge, Chrome and Firefox are all going to be very close to 100% support for ES6. Only stragglers are Webkit. 
this
Another post complaining about the abundance of js-related resources, capital.
If I were to inherit Foo in another class, and create multiple instances of that new class, is it possible to have an instance of your WeakMap where keys are shared between all instances but values can be reassigned without affecting all instances via getters/setters? And conversely a shared private variable where any instance setting it changes it for all instances? I wan't to have my cake and eat it too.
Now if Meteor would take a more modular approach and loose couple its different parts so we can use bits of it without crazy hacks it would be just lovely. I think the data layer is nice but i don't personally enjoy the template engine. I'm currently in love with RiotJS. I'm still waiting for Hood.ie to go offline first and real time data. 
the template engine is decoupled. they've got top notch angularjs support which replaces their current blaze engine, and are also working on ReactJS support as well which will accomplish the same thing, but I'd guess isn't as ready for prime time yet. You can also install one of hundreds of third party packages to utilize handlebars, twig, or any other templating language of your choice.
Ohh, excellent. Thank you!
Put the data in the external file in json format. {"words":["Getting lazy","Shannon","Letogasm","fleek"],"explanation":["Getting lazy is the act of just laying on the ground after being slammed or a hard fall. Most commonly used amongst skaters, bmx riders, and other extreme sports.","The coolest person in the world. ","Word used by Echelon and any other Jared Leto fan to describe the feeling of (sexual) pleasure/happiness associated with watching a Jared Leto/30 Second to Mars Music Video or Movie. In other words, a Jared Leto induced Orgasm.","on point "]} I did this via var obj = {words:word, explanation:explanation}; var jsonString = JSON.stringify(obj); // console.log(jsonString) and copy and paste create your load ajax function. function getViaAjax(url, callback) { // url being the url to external File holding the json var r = new XMLHttpRequest(); r.open("GET", url, true); r.onload = function() { if(this.status &lt; 400 &amp;&amp; this.status &gt; 199) { if(typeof callback === "function") callback(JSON.parse(this.response)); } else { console.log("err");// server reached but gave shitty status code} }; } //end of r.onload r.onerror = function(err) {console.log("error Ajax.get "+url);console.log(err);} r.send(); } create a function to be used as a callback that will put your data into the right place. function yourLoadingFunction(jsonData) { word = jsonData.words; explanation = jsonData.explanation; // then call whatever it is to trigger the update within the page updateDiv('the-h',word[i]); updateDiv('the-p',explanation[i]) // remember to comment these two lines in the original code } call your load ajax function. getViaAjax("someURLToExternalFileOnSomeServer", yourLoadingFunction) so if your external file is called : "external-file.json" getViaAjax("external-file.json", yourLoadingFunction) **Note:** this is not tested, wrote the code in this crappy text box. **Edit:** tested it, it works.
maybe a way to right click and "save target as"?
depending on how much code you need to run, you could just use a bookmarklet.
I don't know if this was your question or if you just thought it was funny, but this is the kind of shit where you should just learn the fucking technology. [Seriously, you know the terminology so just type that in a searchbar](http://lmgtfy.com/?q=ajax). Now just click the first fucking link and go through the 10 minute tutorial and actually learn instead of posting bull shit redundant questions on every programmer network you can find that just dilutes the quality of the site because of abuse from lazy fucking "programmers". Learn to fucking program instead of begging for help.
"What's something you find yourself doing repeatedly that you always write a litter helper function for?" you know, you don't need to re-invent the wheel. you can just buy an automated pooper scooping cat box.
After learning react, it makes you realize how overcomplicated angular is. Neat, but no thanks.
I didnt even know .siblings was a thing. I honestly researched for HOURS, specifically typing in siblings and nothing would work. Surprised I couldn't figure it out.
Ok, but the issue is what happens when the network connection fails or times out while we're processing their credit card on the server side? The order may have actually succeeded, but their AJAX request fails and returns an error. So they think their order failed because they'll see an error message, but it actually succeeded. That's the problem that we run into fairly often that we're trying to find a solution for.
Credit card processing often takes a some time, but even more so in our case since we're processing complicated orders through a third party system that's often quite slow. Even if it was instant, sometimes connections (especially mobile ones) just fail, but so we need it to try the connection again and still return the status of the original request.
I still don't understand why people are so keen on using ES6 classes with React. Automatic binding of methods and easy use of mixins are super convenient, which you don't get with ES6 classes.
That's tough. Our platform uses Authorize.net and transactions never take more than a few milliseconds. I highly suggest that instead of waiting for the transaction to complete while your client is waiting, just present them with a "Thank you, your transaction is being processed." page. Once the transaction successes or fails on your backend, notify them via e-mail of the result. This approach will save you a lot of headaches and workarounds. 
is there a reason why you don't want to use toLocaleString() ? here are some examples on how to use it: http://stackoverflow.com/questions/5314237/is-there-a-functionality-in-javascript-to-convert-values-into-specific-locale-fo by the way, some of your comparisons are actually assignments. you might want to check those ;) (example: country = "ES")
ok, let me rephrase: check out the link i posted which has examples of how to handle currency symbols in javascript. you might want to also consider toLocaleString in order to handle the format of the number itself.
bloody hell. you're right. sorry about that.
I love it. It's so specific that it would have never been made if it could not have been created by one person alone.
Really wish the JWT.io site had a bit more documentation on JWT. It doesn't even link to the spec... yes the debugger is great but it doesn't tell you anything about the list of optional claims available, and their purpose.
This 100%. Ultimately though the formal spec doesn't actually care where you send it though. I guess they wanted it to be as adaptable as possible? The RFC that defined JWT ([RFC7519](https://tools.ietf.org/html/rfc7519)) starts with: &gt; JSON Web Token (JWT) is a compact claims representation format intended for **space constrained environments** such as HTTP Authorization headers and URI query parameters. I've pretty much only seen it in use as a header `Authorization: Bearer &lt;jwt&gt;`, but I've heard there are libraries that do the latter and embed the whole thing in URIs. Hell, there's [a MIME type `application/jwt`](https://www.iana.org/assignments/media-types/application/jwt) for it so you could be sending JWTs as their own files.
And thanks to this insane "tiny modules" approach we have unlimited numbers of linear interpolation functions on npm and GitHub, many of which are yours. https://www.npmjs.com/search?q=lerp
When I woke up this morning, I said to myself "fahq2m8, I really wish there were more choices available for javascript SPA frameworks." and now OP delivers!
Lol, I understand the frustration. IMHO, there are not a lot of frameworks out there that take the same approach to UI flow/authoring. Mostly they concentrate around either templating for markup rendering - which is mixing some dsl into the html, or try to hide the markup all together behind as much abstraction a possible, by replicating every single dom element with components. This is neither. What it gives you is; keep working with the markup, same as you were before, but remove all the funky (and dangerous) &lt;% for bar in foo%&gt; (or whatever syntax), and move that logic into the code where it belongs. There are other goals (Componentization, DI), but they are mostly secondary for now, the main one has been to move away from templating. That said, templates do obviously have their own set advantages, and should be used whenever they make sense, just not everywhere :) 
MDN has the definitive writeup I think. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this
Wow, not even sure it's possible to fit more current JS buzzwords in a headline
the two i've used are [kendo grid](http://demos.telerik.com/aspnet-mvc/grid/index) and [DataTables](https://www.datatables.net/). Regarding column filters, DataTables has a "search" that filters one or more columns, and supports a "contains" type search. See [here](https://datatables.net/examples/api/multi_filter.html) The kendo grid has a built-in per column filtering that has a lot of options. See [here](http://demos.telerik.com/kendo-ui/grid/filter-menu-customization)
Think of Yeoman as a way of scaffolding projects quickly. Various project scaffolds choose to use Grunt or Gulp (depending on the generator authors preference) as a way of performing various actions on the codebase (watching coffeescript files, compiling builds, etc). There isn't much to learn when it comes to Yeoman. Want a quick Angular project set up? Scaffold it using Yeoman using the Readme as a guide to the already implemented Grunt or Gulp file. Learning Gulp is highly recommended. But if you really want to learn something like Gulp then Yeoman isn't the right way to go. I would recommend starting in a vanilla directory, adding the various libraries you're interested in (via something like Bower), and then utilizing Gulp for various tasks in the project (for example dealing with compiled builds, compiling SASS to CSS and Coffeescript to Javascript. That sort of thing). 
I don't mean to piggyback on your post, but I'm very interested in this too. I've been learning about the command line lately in preparation to start using some of these developer tools. So, I just have a follow-up question. For those with more knowledge about this, what are some of the most important tools to be familiar with? Grunt, Gulp, Bower, Yeoman? Is there anything else that should be added to this list?
I'd go with angular. Especially if your mobile app is Ionic. Backbone is just a way to standardize boilerplate rather than remove it. Marionette makes it better, but I still do entirely too much wiring of re-draws / model updates in the marionette projects I work with. As for hiring, I see way more people with angular experience rather than backbone. Especially going forward - new backbone developers are not appearing AT ALL.
I was stuck on this problem today. I just wanted to thank everyone here for the answers you gave OP, they really helped me figure out the conceptual problem I was having. For some reason I had it in my head that reduce required single elements, when it can work just as well on objects. 
There isn't much to learn when it comes to Yeoman, it's just a scaffolding tool. You would use Yeoman to scaffold, say, a React.js app that's hooked up with either Grunt or Gulp and a host of other things. Once you've scaffolded your app, Yeoman is out of the picture. Yeoman will save you a lot of time and there isn't much of a learning curve (unless you want to write your own generators). There is no other scaffolding tool at this time that has taken Yeoman's place. That being said, you may be wondering whether to use Grunt or Gulp, both of which would require some learning on your part. Both are widely used, but it appears as if Gulp has garnered more favor in my subjective opinion. 
The framework doesn't decide what get's the job done best and fast, the people you hire do. If you are the only developer on this codebase, get to work already. If you don't have knowledge of front end frameworks, tough luck, you can't fake experience. Pick a framework, commit to it, don't make excuses, learn stuff, fail miserably, repeat. Do that a couple of times, boom, you now have "experience", Now you know what to do, Great. If you don't have time to do that, you can always take the shortcut, hire someone with experience, then let them decide, don't break your head over it. ( and obviously you should use react, what are you even doing ? )
the thing is after looking into angular, i was afraid that i wouldn't be able to reuse most of my legacy code... How does angular play with non angular controls such as bootstrap select2 ?
I'll give those a look.
couldnt agree more. Also +1 for react ;)
this I came here to say this.
It's just a tool that let's you pick and sets up cookie cutter projects so you don't have to do all the boilerplate work. The proper word is "archetype". 
I think I would prefer `Authorization: Bearer` over a query string, but I'm sure that's entirely open to interpretation / preference. 
Good points but I doubt you'd mistake THIS for a constant, plus you have to go through that extra work to type all caps for constants. Maybe \_THIS\_ instead but something more consistent that *self* or *that*
*this* is _not_ a normal variable so why not somehow draw better attention to it's surrogate, just like how you draw attention to constants? You have drawn my attention to good points (and I up-voted your comment) but we will have to agree to disagree. Good night.
When you are matching searches, match accent-removed results.
I'm finding myself needing to do something like this less and less as time goes on (I probably haven't used one in over a year), to the point where it's almost a code smell now... between `Function.prototype.bind`, arrow functions, and a general avoidance of relying on closures for program structure, I just don't see the need anymore. Not saying it isn't useful still in some situations, but that we're way too late in the game to try and introduce any new paradigms for something that IMO is nearing obsolescence.
If I need to keep the value of `this` to use in a closure I name it as I would any other variable, because it is just another variable. button.addEventListener("click", function(event){ console.log("etc"); this.disabled = true; var clickedButton = this; setTimeout(function(){ clickedButton.disabled = false; }, 1000); }, false); 
`this` is not a normal variable, but its 'surrogate' absolutely is. Just treat it as such. `var element = this` bam, element variable to throw around as you see fit. `thisElement` if need be.
I'm personally not sure I like this component, the way it's used looks too monolithic for my liking. It mostly appears to be be configured by a shitton of attributes on the one element and through procedural code which I think is just not a great angular API.
I'll give a few of these a shot on Monday... or next week when I have time. I am polling user logins to a sql table and would like to be able to search by user, computername, time, etc... I don't know what the ETC would be, but yeah... I have been collecting data for almost a month and want 3 month history so that's something like 10k records at a time. I don't know if pull all the data over json at one time will be very friendly but why not give it a shot i guess... haha... That is the only reason I wanted to go with paging, but paging is a total nightmare to implement with filtering it would seem.
Because artsy, hip, cool logo. Doesn't matter if the words match the actual name of the thing as long as it's vaguely close. I read JUUT myself. 
Such a great conference! Thanks again for all your hard work, /u/crabasa!
Maybe I'm not understanding you properly, but if I match accent-removed results then wouldn't an accent not appear when a user searches using an accent?
Consider looking into slush. It's newer than yo and uses gulp to build. Overall, it you're wanting to create a project, I'd suggest slush. Otherwise, I'd look at both and choose whichever generator worked for the project. Unlike frameworks, there isn't a huge penalty for switching generators between projects. 
Another very useful method is the .closest() which I used to use before siblings was a thing.
Creatives are subjective :) I personally thought it looked pretty slick, although I'll admit the "w" is a little hard to read.
You want to match against accent-removed results, but then return the original result with accents intact when you find a match.
Classes are just sugar on top of objects and javascript functions are also objects, so there's nothing preventing you from using a decorator on a function. Some of the examples at the bottom of the repo you link show desugared versions of decorators that make it clearer why they would work fine on a function. 
The comment is speaking to how specific the use case is, and how the OP had to be really dedicated to the idea to go through with it himself since, presumably, nobody else cares enough to tackle the project with him.
You could probably do it using an object with key-value pairs containing the acronyms and their tagged equivalents as your dictionary, but then you'd need to compose the list yourself. From there, you'd probably need to loop through every single text node on the page and do a string replace passing the dictionary object's keys as the "find" and the object's values as the "replace". There are probably other gotchas to work through, but that's your best bet so far. If you search Userscripts for something like "curse word filter" you can probably find an implementation to build off of.
I'm a little confused as to the value of Yeoman vs just cloning a template project and customizing it.
Huge code smell these days to be honest (like someone took a shit on your keyboard). I've actually built an eslint rule for my team to warn them when a `self` or `that` variable is being closed over.
Would you mind sharing more detail on some of these issues and how you fixed them? I've been meaning to work on a calendar app for a while but haven't gotten to it yet. 
Just my 2c, but I think that looks super ugly. The W is practically unreadable.
Do you know why there is slush? What's better about it ? Why a new tool? Website doesn't give too much info
Thanks! Here's another project that uses a bit more Web Speech and a little bit of Arduino too: http://www.webondevices.com/the-arduino-plant-with-javascript-voice-recognition/
You're right. But fuck you anyway!
We've had a couple of conversations on `this` in this same subreddit. One that comes to mind is [this one](https://www.reddit.com/r/javascript/comments/j2j8b/the_this_keyword_is_extremely_simple_and_doesnt/) which was well regarded as clean and clear and also spawned some comments which may be worth something. I would suggest either that one or the MDN page already linked to by /u/tencircles
ya i dont like it either.. its got that 5 years ago jquery vibe
First, I don't find storing a reference to `this` in a variable and closing over it is actually a very useful technique, and I don't actually write code in that way myself. Second, because `self` or `_this` are semantically correct and easy to type, whereas `THIS` is ugly, harder to type/read, and implies that it is a constant. Third, because even though variables are case sensitive in JS, it's a terrible idea to rely on that. I would absolutely flag anyone relying on case sensitivity to make their clever code work in a code review, and while this is probably the least egregious example of that you're likely to find, it's still a bad road to go down. "No identifiers that differ only by case" is a good rule; I don't see this as a good reason to make an exception.
https://developer.mozilla.org/en-US/docs/JXON#Reverse_Algorithms
Pesudo typecast it as i_this - pseudo typecasting will save you a LOT of headache (has for me since I started using it - can not take credit for inventing it though - but have never seen it before me and a mate started doing it. * a_foo = array * b_foo = boolean * d_foo could be a date type object I guess - I do not use it * f_foo = function * i_foo = instance of something * n_foo = number * o_foo = object * r_foo = regex * s_foo = string * $_foo = jquery object 
Basically you will need to weigh the requirements specific to your project. With Angular expect to rewrite most of your 'legacy' code and spend a lot of time learning the the Angular Way; depending on project complexity you might run into performance bottlenecks or maintainability issues due to oversights during the planning phase. On the other hand you will be needing some Angular expertise for your ionic app anyway, so depending on that app there might be some/a lot of code that can be shared with your web app. Be aware though that AngularJS will be superseded by Angular2 (likewise for [ionic](http://blog.ionic.io/angular-2-series-introduction/)) and another rewrite might some come knocking at the door (holding up a sign "Check it out - there's a better way to do this"). With Backbone/Marionette you'll probably be able to get to a working app sooner, but you'll need to keep a bit more discipline to a get well maintainable codebase than with Angular (e.g. while Angular is designed to be testable and comes bundled with its own testing tools, there is no standardized testing methodology for Backbone/Marionette [recentish reddit on this](https://www.reddit.com/r/backbonejs/comments/2w2a50/how_to_unit_test_marionettebackbone_views/)). In any case, when Angular2/Ionic2 becomes production ready you will still have the choice jump on that bandwagon as well. It might be a good idea to prototype your app using both to get a feel for each platform's suitability. Edit: typo
Probably they are keen because the ES6 stuff is new and shiny. That being said, I think the React change is good. Instead of saying why you love the old React classes so much, you should probably be thinking about why you hate the other classes in your code. I mean, automatic binding and easy use of mixins sure sound super convenient for objects other than just the ones that make up your view layer. To take a different perspective, the React team has said "Fuck it, we're not in the class business" - and instead of forcing people to use the React specific object model, they have said "Use whatever JavaScript class mechanism you want" i.e. ES6 classes are still just syntactic sugar. There's nothing stopping you (or anybody else) from using automatic method binding or mixins - but in a manner that isn't specific to just your classes involved with React.
You want to test the user's query (accents removed) against the database contents (accents removed). Now you are just testing plain strings, but the database can reply with the actual text (including the accents). 
You could look into TypeScript
… which means "jew" in Estonian:-) 
https://en.wikipedia.org/wiki/Hungarian_notation
Very aggressive. It comes in handy when you're working on a Backbone/angular app for quickly creating view, model, template blah blah blah files.
Also there's [JSDoc](http://usejsdoc.org/) styled comments but that works only on APIs.
thank you that what i was searching!
I'm not the one who created the tool, but I'm sure the guys at Bitovi will see this
Yes, of course. I was merely pointing out that what OP was referring to, already existed. I do hope he/she reads up on it and, hopefully, decides against using it.
While the styling on the demo I saw did look a bit dated, I was actually referring to the API. I mean, looking at the "all features" example on the tutorials section makes it feel like a god object with a long parameter list. &gt; `&lt;div id="grid1" ui-grid="gridOptions" ui-grid-cellNav ui-grid-edit ui-grid-resize-columns ui-grid-pinning ui-grid-selection ui-grid-move-columns ui-grid-importer ui-grid-exporter ui-grid-grouping class="grid"&gt;` I mean, just look at that, it's a complete mess. I feel that a more modular approach would be better. This is mainly because it's easier to see what's happening, why it's happening. This is my opinion after leading a few projects for angular development for about six months. Watching people get confused by large magic objects, being frustrated at the amount of work I have to do I to customise reusable components if they do too much, etc. I think it's much better to let people write out the table in html with ng:repeat and some pagination directives, etc. By doing it like that, you can make things much more reusable and maintainable. Because if you need to pass a value though a filter you can just add it to the html rather than messing around with a config object or some pretty imperative code.
as an embedded systems programmer that dabbles in web programming, I am frequently boggled by the complexity of front end code. A primitive page is easy but doing a real web app that is effective and secure is hard.
That's actually pretty cool.
"Dig through the ditches And burn through the witches I slam in the back of my Dragula!"
Right, I get that they're just syntactic sugar but in transpilers you'll get a warning when you try to use a decorator on a regular function saying that you have to attach your leading decorator to a Class Declaration. If you look at the bottom of the repo you'll see the Grammar for decorators and they are defined only on Class Definitions, Class Expressions, and Class Elements. Example: https://babeljs.io/repl/#experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;code=function%20log()%20%7B%7D%0A%0A%40log%0Afunction%20foo()%20%7B%7D
Bind has a non-trivial performance cost so in performance critical loops you can't use bind unfortunately.
Can you expand on what you mean by, "works only on APIs"? You can use jsdoc pretty much anywhere, whether it's a global chunk of procedural code or tucked away deep in the internals of some OO code.
Hi /u/kevincennis, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `medium.com/@kevincennis`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [medium.com/@kevincennis](/search?q=%28and+site%3A%27medium.com%27+author%3A%27kevincennis%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|9|100%
Font size was reduced for the items when i began dragging the first item in each section... Otherwise it worked great (chrome on Android)
Right, in that case, I can't immediately think of a good reason. But I could be overlooking a good use case here 
[This](https://github.com/Feverqwe/Transmission/blob/master/src/js/background.js) is the *background.js* of Chrome Extension