Erm, It still doesn't work, weirdly. This is my gload function now. ```javascript //Load function function gload(){ likes = Number(store.get('likesl')) babies = Number(store.get('babiesl')) cps = Number(store.get('cpsl')) var nextCostb = Number(store.get('nextCostlb')) babycps = Number(store.get('babycps')) babymodifier = Number(store.get('babymodifierl')) refStats() } ``` Except not on weird lines like that 
Use `parseInt()` instead of `Number()`.
okay EDIT: will that work? since sometimes a number might be 1.5
Try `parseFloat()`.
Write tests, use them to understand the system, use that understanding to write a high level document.
(Leans back in chair, places feet on desk)
Done. Still gettin NaNs
Yea you're basically right; agsave is called every 10 seconds, which should handle setting babymodifier1 to the value of babymodifier, but gload has already set babymodifier to equal to babymodifier1 which is undefined... So now they're both undefined. I'm on the bus so I can take a slightly closer look when I get to the office. That's just what I was seeing in the browser. If babymodifier1 is supposed to be 0.5 at the start then it could be related to the nextCostb var declaration being scoped in gload, so it's throwing errors in agsave.
Ok thanks, feel free to fork it if thats easier.
This. Migrated some large applications from Backbone+Marionette+... to React w/ Redux and it is pleasure to see how a complex software can be built with many self-contained small parts. And it's so damn testable.
Looks cool but it's suuuuuuuuuper slow for me.
Here is the bottom line, according to me. Unless stated otherwise, all code is copyrighted. Even code without any comments regarding licensing is by default copyrighted. On the paper you are not allowed to use any other people's copyrighted work without their consent. Even if the code is "public", like JavaScript is - since JavaScript can, and has, to be public accessible in order to work. In reality though, if anyone cares depends on if you are a private person or a company using someone' code. For example * if Google uses JavaScript written by Microsoft which is copyrighted, then there will be legal issues. * If you as a private person has stolen JavaScript code from Microsoft, then there will be legal issues. * If you as a private person uses a 12 row code snippet from a blog - yes its technically wrong, but no one will care and no one will pursue you. Its too much fuss for that that blog author to create a legal matter regarding this, and he will have a hard time proving its their code. So, in reality, there isnt a right answer there. Just common sense. If you are company, people are much more eager to create a legal case about it, since there is always money to gain from that. **To answer your original question** - No, that is probably not free. You can read its from 33Across Inc. But if you want to reuse it, or use parts of it, as a private person, no one will probably care.
I did exactly that. Just submitted a pull request. Not sure if it's behaving exactly as you want but the NaNs are gone. Hopefully a good start for you.
are you kidding me? dependency: ***home-or-tmp*** *Get the user home directory with fallback to the system temp directory* Sure enough: 'use strict'; var osHomedir = require('os-homedir'); var osTmpdir = require('os-tmpdir'); module.exports = osHomedir() || osTmpdir(); wow
`element.innerHTML +=` `element.insertAdjacentHTML()`
NPM's ideology is surely great! /s
Hi /u/_etoxin, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Please use the [Showoff Saturday](https://www.reddit.com/r/javascript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AShowoff%2BSaturday) posts for these types of submissions.
You also appear to be storing `"null"` (string) in `localStorage` (check your `localStorage` and see) so visiting [the site](http://emojiclicker.github.io/) without any interaction also yields `NaN`. parseInt("null") === NaN Number("null") === NaN Make sure you're only storing what you expect in `localStorage`, otherwise you're going to have issues when it's brought back.
`appendChild` _is_ supported by Firefox. https://jsfiddle.net/eptgc0jz/ Maybe you're using it incorrectly and Firefox is more strict about that usage?
Questions about code should show the code. Otherwise only crystal-ball owners will be able to give you a qualified reply, and there are few of those. &gt; but Firefox refuses to work. You probably didn't feed your fox.
[You hurt Firefox's feelings](https://media.giphy.com/media/Cx9wp0bDEenfi/giphy.gif)! I'm 100% sure it's a problem with your code rather than with `appendChild`. Debug why it doesn't work in Firefox.
_An aside: What's that from? I feel I want to watch the whole thing..._
Maybe it's my code. It's first time I had to work with javascript, so yeah...
Just wanted to point out that `NaN === NaN` evaluates to `false` If you want to detect if something is NaN, you have to use the `isNaN` function. 
You made me research... I'm happy to say I think it's from [The Fox and the Hound](http://www.imdb.com/title/tt0082406/)!
Also `element.insertBefore()`.
Yeah, but sindresorhus usually has very small modules, which is his philosophy. Even his "number-is-nan" module (which is used in dependency tree above) is literally written as: module.exports = isNaN || function(num) { return num !== num } Edit: [His AMA states it better](https://github.com/sindresorhus/ama/issues/10#issuecomment-117766328)
https://opensource.org/osd-annotated point 1.
My point was that kik was not a little angel in this dispute, and they made mistakes. The devil really is in the details, and their details amount to someone speaking on a wavelength that azer didn't appreciate, threatening him, and then trying to walk it back by offering compensation.
Hi /u/rinkisharma, your link didn't work so I removed the post. Feel free to repost with the correct link. Thanks!
We have passed from Dependency *Trees* to Dependency *Networks* and I don't think that is a good thing
wat
A lot of those issues have been fixed over the last two weeks. The thing is that you will have to deal with (and probably eventually run into) many of those issues yourself when using more low level frameworks like Express (which Feathers is really just a small extension for) or Koa (which Feathers will support in v3). Throwing websockets in there will make things even more complicated. So even if you are having issues, try reporting them and you should get help quickly and if it is a bug, it will be fixed for you instead of having to spend hours (days?) to figure it out yourself because the framework doesn't have an official way to support it.
Seems they could've cut out some dependencies by relying on lodash more: `repeating` could be replaced with `_.repeat`, `is-integer` with `_.isInteger` and `trim-right` with `_.trimEnd`. Especially given that lodash is already a dependency, that would save quite a bit...
This is a catchy title, but the article was mostly fluff. Javascript could actually be great for managing data for ML, especially on distributed peer-to-peer networks. I made a joke about using Javascript for ML a while back in an ML sub and got linked to [this](http://karpathy.github.io/neuralnets/) which was pretty cool and is a great intro to neural nets. One of the most common objections to using JS for ML is that there aren't as many libraries, but fortunately [that's changing pretty quickly.](http://www.datasciencecentral.com/profiles/blogs/machine-learning-in-javascript-a-compilation-of-resources). If anyone has some better sources for this topic, I'd like to see them. 
trim-right, is-path-absolute, these really need to be modules? And why is number-is-nan a module? https://github.com/sindresorhus/number-is-nan/blob/master/index.js - seriously, not implementing this yourself helps you "reason" about your code somehow? It's time NodeJS gets a proper stdlib like every other mature language out there so we don't have craziness like this.
waaaay less overhead, configuration, setup. It's super simple JS, throw in AMD requirejs and your code structure is set. 
Personally I enjoy small modules and make frequent use of them. For me it's not about being able to reason about my code, it's not that I couldn't write the module myself, it's convenience, and the knowledge that whoever published that module probably put a lot more thought into edge cases then I would have. I don't see this dependency graph as a "house of cards," it seems perfectly reasonable to me. People point to left-pad being taken down and builds breaking as proof that small modules are somehow delicate, but that's foolish. The reality is that engineers are trying to place blame everywhere except on themselves. If, when you made the decision to use NPM, you had taken the time to think about what you were doing you should have realized what a horrible idea it is to rely on NPM so heavily. Forget left-pad, NPM could easily be down, or nearly as bad, extremely slow, this should have been obvious to anyone. There are quite a few solutions out there to prevent this stuff from happening, so do your job and use them.
Nevermind, I solved this by using append.
Hi, project came out of beta and so i posted it again.
Exactly. I do not see the reason for a simple JSON response to be an Observable and I cannot due to restriction from others.
Ok, if you want to make a post talking about what's changed since beta, or more about the project in general (development practices, framework/libs discussion, etc.) then that'd be fine, but you're just linking to the same page that was up before. Perhaps there are some small changes that have occurred since then, but it's not obvious to me what those might be.
We should take the cocopods approach of abusing github as our package manager :D 
Was there a time where isNaN wasn't available in Node or why the need for that? Also I would really like to know who introduced that dependency because it is so simple I can't get my head around why you would add this as a dependency.
I'm sure they'd appreciate PRs. 
&gt; There are quite a few solutions out there to prevent this stuff from happening, so do your job and use them. Name them, please. 
The benefit of having focused modules is clear, and sindresorhus makes a good analogy to lego blocks. But I have yet to see a good argument for why we should create modules that are one liners. Even the smallest box of legos generally contain tens of related pieces. Why should we make modules that are equivalent to one lego piece? In the open source community, we should strive for coherent packages maintained by distinct groups of individuals so that it's not up to one person or even one particular group of individuals to rage quit and eliminate hundreds of packages which we depend upon.
As an added bonus, npm install time drastically improved when I started going through nexus, I'd assume shrinkpack would be even better.
&gt; One of the most common objections to using JS for ML is that there aren't as many libraries, but fortunately that's changing pretty quickly.. I'd also say speed. If you're doing non trivial work beyond prototyping, then i'd imagine something like python (which uses c++ underneath, apparently), or straight up c++/matlab would be be better. I take your point on data management/processing though. EDIT: &gt; This is a catchy title, but the article was mostly fluff. Strongly agree.
If I had access to a server that would be great.
You can also use a program like [Telerik Fiddler](http://www.telerik.com/fiddler) to locally modify the response and eliminate the offending code before it gets to your browser. I've used Fiddler to remove headers and edit responses for various development and testing needs. It's not easier than the Chrome DevTools, and using it on HTTPS pages involves (at least temporarily) installing a self-signed certificate to allow the proxy to intercept all traffic and pretend to be the original host.
D:
Not an appropriate community for job adverts - try r/forhire, topcoder, etc. Also Java is not the same thing as Javascript.
Hi /u/maxmacks, this post was removed because /r/javascript is not a job board.
Using your software, I was able to find the code for the login and how the code would send the username to the second page. &lt;form name="FormLogin" method="post" action="LoginReq.srf?Etape=2&amp;Login=1"&gt; &lt;input type="hidden" name="NomLogin" value="F01893" /&gt; &lt;label class="LabelBold" for="MotPasse"&gt;Mot de passe :&lt;/label&gt; &lt;input type="password" id="MotPasse" name="MotPasse" size="25" maxlength="49" /&gt; &lt;button type="button" name="Valider"&gt;Valider&lt;/button&gt; The value F01893 was the username. I inputed a registered username, and changed the value in the Chrome DevTools so it would be mine, and I was able to login using the form! Thanks a lot for your help! My account is saved.
Speed isn't everything. Python is actually not very fast. C++ is faster, but for other reasons is less popular than python for ML applications. [I came across a post in a similar thread](https://www.quora.com/Why-doesnt-anyone-recommend-JavaScript-Node-js-as-a-language-for-machine-learning-or-data-analysis#!n=12) about using node with julia for running async processes in parallel across a network. I would speculate that python is still faster than js on most hardware configurations, though. Edit: Huh, I can't find anything definitive on the python vs. node speed question. There are a lot of factors, like data format and choice of python tools, that affect the outcome. I'm surprised no one has actually tested this...perhaps I'm just not looking hard enough?
You can view the dependency clusters within the network from this direct link: https://graphcommons.com/graphs/a67121c8-dbd8-43f4-a8bf-dd2e725c4278?show=analysis-cluster
you dont have access to any computer that can run one process that is accessible on the network? How are users getting your html file served?
Correct. People log into their account get their email and have access to files. No webserver access. I was thinking about a portable webserver, but I don't know where to start. Yes, It would be easier to just create an online form and they can download via script into Excel Spreadsheet. Not an option.
ah, sorry about that.
You're referring to [this AMA post](https://github.com/sindresorhus/ama/issues/10#issuecomment-117766328), right? An extended portion of that post includes a few more rationale: &gt; Some years ago. Before Node.js and npm. I had a large database of code snippets I used to copy-paste into projects when I needed it. They were small utilities that sometimes came in handy. npm is now my snippet database. Why copy-paste when you can require it and with the benefit of having a clear intent. Fixing a bug in a snippet means updating one module instead of manually fixing all the instances where the snippet is used. &gt; For example. I have this module negative-zero. Its job is to tell me if a number is `-0`. Normally you wouldn't have to care about this, but it could happen. How do you figure out if a number is `-0`. Well easy `x === 0 &amp;&amp; 1 / x === -Infinity`. Or is it? Do you really want to have to know how and why this works? I would rather require negative-zero and be productive on other things. &gt; Another example. Chalk is one of the most popular modules on npm. What you might not realize is that it's actually a collection of modules. It depends on a module for detecting if the terminal supports color, for getting the ansi escape codes, etc. All of this could have been just embedded in the main module, and it probably is in many cases. But that would mean anyone else wanting to create an alternative terminal string styling module would have to reinvent the wheel on everything. By having these supporting modules, people can easily benefit from our work in Chalk and maybe even help improve Chalk indirectly by improving one of the dependencies.
in that case, just use google forms. Though in general, its a terrible practice to be storing user's usernames and passwords in plaintext in a location that anyone can see it.
1. It looks like slideval isn't set but it's hard to guess from just reading your code. Make a demo on codepen/jsfiddle/etc for us to have a look at. 2. If the number accuracy of your fee calculation matters then use something like [big.js](https://github.com/MikeMcl/big.js/) instead of normal floating point math.
Thank you so much!!! A lot of people can learn a thing on face-value, but especially when it is something like this, I find it way easier when you understand why a thing is to implement how it should be used.
This just seems overly convoluted. The whole point of redux is to keep track of and manage state, but if that's getting wiped on each page load, what's the point? 
No problem. For what it's worth there are quite a few places online that will do cheap development work - also check out places like rentacoder, guru.com, etc.
Quit the browser within a few minutes of use because of this issue.
Keeping state synced between components across the page?
Safari is the new IE. Apple has been acting like 90's era Microsoft for the past decade. It's a shame too...their hardware is soooo nice...
&gt; A function used as a parent function is called a constructor, what is the child function type called? No, a constructor is a special type of function explicitly created a certain way. It has nothing to do with parent/child status. * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor The term *parent function* is just a parent function that provides a higher level of scope. function parent() { //parent function var refA = 0; function child() { //child function refA += 1; //a reference used in closure } } &gt; So then what is the JS class instance equivalent called? As of ES6 JS classes are shallow vanity layers that resolve to prototypes to allow inheritance in a way that works with JS's prototypal inheritance but looks something more like Java and C++ classes. &gt; How about the equivalent in JS to an instance method? A typical method is just a function called as the property of an object. myObj.myMethod(); An instance is anything created from poly-instantiation which is typically invoked with the keyword `new` or the `Object.create()` method. var blueprint = function () {}, instance = new blueprint; * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create The cool thing about this language is that inheritance is entirely optional and you don't have to use any of the inheritance madness to write large elegant applications. If you learn things like scope, closure, and encapsulation you can write code without repetition. You will probably have to learn about scope anyways, because it isn't optional and is forced upon you.
The "It just works" thing is Kool-Aid leftover from the iMac launch in 2000 when connecting a computer to the Internet was still somewhat of a voodoo science. It hasn't been even close to true for 10 years or more. It is a fact that Safari compliance is far behind other web browsers with the latest tech. It does not "just work". Not even close.
You make a good point. However I still think that in any sane language, isNaN(x) will return false for any x that is not NaN. The problem with JS is that there are tons of weird edge cases like this, and I can sympathize with people who use stuff like `number-is-nan`.
Indeed. I guess it's essentially multiple single page apps.
They're essentially just polyfills. ES2015 defines a Number.isFinite(). Firefox &amp; Chrome implement it. IE does not. So the polyfill is: Number.isFinite = Number.isFinite || function(value) { return typeof value === "number" &amp;&amp; isFinite(value); } 
To be fair... I could write a trim function, however every language I have used has defined it as part of its standard library. Elixir, Ruby, Python, C#, Java all have some form of String.trim. Javascript on the other hand didn't have String.trim till Javascript 1.8. IE only supports it in IE9. IE still has no support for Number.isFinite() and other simple often used functions. 
1.) I'd rather have the option of including support, rather then it taking space when its not needed. 2.) NW.js does this already via chromes codecs, just need to be enabled via flag.
Seriously lol... I was looking at the versions going wtf?
Cause IE is a lousy browser but [Safari is still better than IE and even holds a candle to Edge!](http://html5test.com/results/desktop.html)
The first Edge trailed slightly behind Safari in overall support.
You're in /r/javascript citing an html5 benchmark.
He's talking about web browser compliance so I'm pretty sure he's talking html and css. Then, again, maybe not if he brings up Kangax's thing.
[removed]
Why an installer? I don't really trust installers anymore. 
That link shows the latest version of safari having lower scores than the latest versions of other browsers. Not sure what you're trying to prove?
Wait... You are trying to make a point that current Safari is better than an older version of IE? Safari has the lowest score on that table. I guess I'm the fool as you're just trolling... 
Forgive my ignorance, but what is the benefit to this to web developers? Is it early access to new WebKit features?
Right? And that's without considering how long Apple have had to catch up, much less trend set. 
The meat of this method is that it animates the `opacity` property very slightly, and very quickly, in order to trigger the `animationstart` event whenever the subtrees of certain elements are changed; I'm trying to ensure that this can only ever match *direct* descendants but without writing my own CSS parser, to keep the rule performant (I considered splitting on `' '` or `'&gt;'` or other non-direct selectors, but I know there are problems involved with attribute selectors by going that route). The reason IE10+, or a reasonably recent version of another browser, is needed is that they're the only ones that support CSS animations. Also, I just tested this [here](https://lewisje.github.io/nodeInsertion.html) and it turned out to be a good idea, because some of my loop optimizations were a bit too clever, and picking just the right prefixed event name is important (or else the handler fires multiple times); I also noticed that when the CSS rule is added, the handler will be triggered for *all* matching nodes, even ones that had already been added, so ideally you would just add the handler once, before the observed element has any descendants.
&gt; While this community is doing some soul-searching over how large we want modules to be, the idea of "do one thing, do it well" is well-established in *nix philosophy. &gt; Bullshit. Most programs don't depend on each others on a unix system. They are self-contained. The second different is that C has an extensive standard library unlike nodejs or javascript. So the "unix" philosophy excuse is bullshit propaganda. 
IE as a whole!? No fucking way. Edge, sure, all 10% of my Windows users are easy to support. The rest are way worse than Safari. 
Sure, you might see a 50mb browser based desktop app, but you won't be seeing 50mb web apps in the immediate future. I don't think the savings you'd get from micro packages are that relevant to desktop apps as clients can permanently cache desktop apps' assets, so minimizing bundle size is not as important. 
You shouldn't care how deep the chain goes, always treat the promise as a single thing that will eventually give you a value. What it does inside doesn't matter. Once you get the hang of them you will start treating them as though they were already the value. You will modify the data and filter the json and set up multiple sub requests all before the data is actually available. Each action you chain up will return a new promise, but the calling code will never see the chain, they will just see the final result. 
Although you were down voted, I am curious why it needs an installer. 
I present you: The smallest JavaScript compiler, written in JavaScript: alert(eval(prompt())) /edit: it's a joke, please don't hate me. My thesis was about compiler theory, so chances are that I'm not entirely stupid. 
You don't need to load the entire app in one hit - you can have a very small bootstrap, and then load additional components as needed by the app.
Koa. Koa2 needs babel. Do you like developing with babel? Promises everywhere make error handling a breeze.
Take a look at [Redecorate](https://github.com/Wildhoney/Redecorate) for handling nested immutable data, as well as [Keo](https://github.com/Wildhoney/Keo) which crafts its own `shouldComponentUpdate` based on `propTypes` and the assumption that your props are immutable.
always try to flatten your chain http://solutionoptimist.com/2013/12/27/javascript-promise-chains-2/ so you'll keep it one-level, otherwise use Rxjs and you'll be fine to handle any async complexity
`numer-is-nan`: `return x !== x`
Are you on some weird, anti IE crusade or something? All your posts are focused on bashing it
Have you ever wanted to create your own website or project? If you are going to spend time learning something, might as well build something that interests you =) and who knows, it might be the new Facebook or Twitter!
Ahem... http://caniuse.com/#compare=ie+11,chrome+49,safari+9.1&amp;compare_cats=JS%20API IE and Safari have lots of RED. Chrome is still the leader in supporting new APIs. Go back to your toy browsers!
It's such an easy thing to do. Accidentally or on purpose since 2004. No real developer has anything nice to say about IE. In fact, it's so bad, even Microsoft dumped it!
No, you were implying Safari is better than IE. It is not, it is the same, e.g. poop.
Our most common promise use in production is something simple that looks about like this: function getData(params) { if (isCached(params)) { return Promise.resolve(getCached(params)); } return new $.getJSON(makeRequestURL(params)).then(cacheThis); } EDIT: added the `cacheThis` bit. Adding a layer like this makes caching transparent to the caller and allows you to swap out or completely eliminate the caching mechanism without breaking anything else. I was involved in the design phase of an API that worked something like this (simplified for convenience and because I didn't write the thing): function generateImage (text, font, style) { // Returns an array of promises which may be immediately resolved (cached) or may be AJAX requests var charPromises = text.split('').map(function(char){ return getCharData(font, char); }); return Promise.all(charPromises) .then(processCharData.bind(null, font, style)) .then(convertToImageURL) .then(fetchImage) .then(generateImageResponse) .catch(generateErrorResponse); } Several of the steps are capable of failing, so it's nice to have the "happy path" code together and then the failure at the end. I recently helped with something that was more complicated... I think it went about like this: // Resolve all responses; we want data for everything. var requestMultiple = urls.map(function (url) { var longRequestPromise = startProcessing(url) .then(pollUntilComplete) .then(processResponse) .catch(resolveFormattedError); // Use a race to stop long-running processes. // This probably isn't how it worked. return Promise.race([ longRequestPromise, stopRunawayProcess(url) ]); }); return Promise.all(requestMultiple) .then(function(values) { // New requests for alerting on failures // These could fail, so there's a catch for each. return Promises.all(values.map(function (response) { return !response.error ? response : followUpOnFailedRequests(response) .catch(resolveAlertingError); }); }) .then(logEach) .then(mergeResponses) .catch(somethingUnexpectedHappened) .then(sendResponse); EDIT: I should try to provide some explanation of the above beyond the inline comments. This allows us to kick off several requests at the same time. Some of them may return immediately, but some may notify us that the job started, and we have to poll the server for updates. The initial request or any subsequent polling request could fail, or the request could run too long. Then we accumulate them and move on to the actions which apply broadly. I'm forgetting some logic, as there is a reason the alerting is after they all resolve and not on the individual requests. The two times I find it reasonable to nest promises are aggregation tasks (as both examples, above) or a series of actions where several failure/recovery states may need different results: fetch(url) .then(function (data) { return fetchAdditionalInfo(data) .catch(useGenericInfo); }) .then(generatePageContent) .catch(generateErrorPage); We haven't played with async/await much, but the flow control of Promises makes them easy [for me] to follow whether you have asynchronous actions or not.
The thing that really pisses me off about safari is the fact that you have to pay $99 per year to develop extensions for it. Like why?! I have to pay Apple $99 a month for improving their browser and giving their users a free extension.
Promises and Async functions solve very different problems. In-fact Async functions USE promises (because awaiting on a plain value would defeat the purpose.) If you're finding that complexity is increasing as you 'go deeper' it means that you're not using promises correctly. All a promise should give you is either "This worked, here's the value" or "This failed, here's the error." If you need more information than that then you've got the wrong promise. At any level of your "deep" chain of promises you should only care about the success/failure of the previous step, and what you will pass on to the next step. You shouldn't care about anything further back, or further forward. If you need to add retry logic or anything then it should happen at that exact level and the rest of chain will never need to know about it.
 s/xbox/vim/g
Just an FYI, this sub *really* does not like people who do that 
I have :), I've built my website -&gt; www.whizbangapps.com (shameless plug). Currently working on my two CRUD projects, but I feel like I need to do more animation work with CSS and JavaScript. Currently looking to build a menu with JavaScript.
I suspect this has something to do with the fact that updates will come through the MAS. It probably drops an app receipt somewhere on the system so MAS recognizes it as its own.
How do you feel about programs like `cat` and `grep` then? Are they just anomalies? 
@arendjr - great that you have decided to spend some time on explaining why you don't agree. The fist problem here is that I surely love ReactJS approach but I do not like all decisions made by it's creators. Long story short: **Round I: Functional Components** - I choose TypeScript, not Flow, because it fits my needs better - the loss of `this` problem does not exist in functional components of course, but there may be many reasons (not only use of TS) to choose class components, and then it's a huge pain **Round III: Change detection** &gt; Personally I think that's a much bigger game changer, so I'd hand the victory to React here. Ok, here I can say that Angular would win if there was easy way to decide once what is preferred strategy for whole application. React's simplicity may be a win for smaller apps. But when there is need to handle som part of component tree differently, I see no gain in not providing other strategies. And `shouldComponentUpdate` lifecycle hook is not the best answer. **Round IV: Extending HTML** &gt; Or, you know, you could just create a simple function that you reference from the event handlers where relevant. The function would be even simpler than an Angular directive. Composing many such functions is a real pain for me. Use of directives is much cleaner. &gt; The downside is that you need to reference it manually wherever you want to use it, but at the same time that makes it more transparent and easier to debug, because it avoids the problem of collisions between directives. Never had problems with collisions between directives (in Angular 1.x) and I have used it almost each day for last 3 years in quite huge applications. And never had problems with debugging - I think that poorly written code can make debugging a hell, it doesn't matter what framework/library you use. --- In one thing you are completely right - I know *"my"* Angular quite well. But I know Angular 1.x. I decided to write this post after I have spent few days on creating apps in (both new to me) Angular2 and ReactJS. And you should know that Angular2 is different than Angular 1.x. Maybe it should have been named differently…
&gt; Thanks for writing it OP or whoever /u/thejameskyle wrote it 
This is great for teaching people about what it takes to compile stuff (and coding standards, especially the comments). Is there a future planned for this, or was it just an academic exercise?
I am building my Koa backed MVC framework Kratos to be focused on ES6 and API's by default. https://github.com/kratos/kratos
That's a pretty simple one, assuming you already know html and css. Give it a try and feel free to ask me any questions... or I'd be willing to throw one together and add comments explaining what does what if you'd like... Yeah, FCC is good practice!
Now, I'm no expert or pro, so take this with a grain of salt, but... Yes, js is intended to give functionality to the front end. It's intended to create interactive/rich user experiences. Node.js has extended js to the back end and beyond, but js is primarily a programming language used to give functionality to the client side. Let me know if you want help with that menu!
"On the other hand Makefile’s version is straight forward:" css: lessc style.less | autoprefixer-cli &gt; style.css Unless you've already had some experience with makefile, "lessc" and "autoprefixer-cpi &gt;" are not straightforward. In other words, this is straightforward to someone who has already used the tool, which really can be said about any tool.
&gt; Correctly mentions it's a matter of taste, so I'll just say I personally disagree with his taste :) It's not just а matter of taste. There are a lot of rational arguments against Angular way. 1. It's like completely new unfamiliar language and syntax inside html for doing same tasks that Javascript can do simpler, faster, better. 2. It's inserted right inside html, mimic to tags and attributes yet does not stick to html rules like xslt does. 3. *ngFor, wtf does asterisk mean? [todo]="todo", why brackets, what does it even mean? why do we need prefix ng? why camelCased? you have to know that stuff, you have to learn yet another language, and because of HTMLishing, that's definitely not a good one. 4. Bad error handing for templates, if you made a mistake it will take time to figure out where did you screwed up React way = implement markup features inside programming language Angular way = implement programming language features inside markup 
Sorry, I'm not gonna read through all of your code and check it out for you (unless you're willing to compensate...). I can tell you that js allows you to add eventListeners to html elements. It's done like this: var element = document.getElementById("element's id here"); element.addEventListener("click or mouseover or whatever", aFunction); function aFunction(e) { //do stuff... //..................... //e is the event that was heard by the listener... //the click or whatever //the this variable within the scope of the function here //refers to the html element on which the event was heard } Does that make sense? Is it helpful at all?
Thanks, yeah each Slurve instance is responsive. It's out of beta now too fyi - https://github.com/braindroplabs/Slurve-js
Sine you understand the basics of programming, i suggest maybe working on a small web based game. Might be fun!
Why use a makefile when you can include these commands in the scripts section of your package.json \s. In these types of discussions you're just switching one tool for another and trading one set of pros and cons for another.
In Node yes. In Chrome and Firefox, uncaught errors do propagate to console (although in FF it does so after a timeout). Note that instead of `.then(nextFn, errorHandler)` you should do `.then(nextFn).catch(errorHandler)` since the former can still swallow errors if `nextFn` throws Also, you can use `.catch` as a catch-all statement: .then(foo) .then(bar) .then(baz) .catch(errorHandler) // catches any errors in foo, bar or baz
actually have a question but it's not about javascript rather a jQuery selector which I can't wrap my head around. I'm okay with CSS selectors but this one is confusing a[href*="#"]:not([href="#"]) source: https://css-tricks.com/snippets/jquery/smooth-scrolling/
Oh there's a little methods/functions I'm not aware of, I'd say I would be spending a lot time looking them up and wondering if they exist than coding. It seems to be my main problem when I start a new framework, language etc they all have different naming schemes for stuff. It's on the roadmap though. After I do the FreeCodeCamp tutorials.
[edit2: this is wrong; see below] In node you can listen for un-handled rejections: process.on('unhandledRejection', function(reason) { console.error(reason); process.exit(1); }); Unfortunately there's no way to log a stack trace here. All you get is a `reason` string. [edit] /u/EatenByTheDogs helpfully points out that the rejected promise object is passed as the second arg. So I was wrong, you can get the stack trace: process.on('unhandledRejection', (reason, promise) =&gt; { promise.catch(err =&gt; { console.error(err.stack); process.exit(1); }); }); [edit2] I could have sworn Node was passing `reason` always as a string, but /u/pertheusual is correct and I have verified, node passes the full error through here. (Or whatever thing you reject with, which in my codebase is always an error object). process.on('unhandledRejection', function(reason) { console.error(reason.stack); process.exit(1); }); 
I thought it was a pretty clever joke. Were you actually getting hate over this?
Come on guys! He just meant javaScript.
It can be use to prevent future bugs, you won't get much new features in Safari that doesn't already exists elsewhere, but you can see what your app will look like in the next releases of the browser just like firefox nighly and chrome canary.
Here's a couple pointers for your general project management: * Don't put needless comments throughout your code (e.g. there is no need to explain that '// initialize a global variable to keep track of the program starting var start = false;'. Code should be intuitive and any person who goes through your program and sees that at the top of your program you have a variable defined start; then we as coders will already know what your note is saying intuitively. Save comments for short blurbs/descriptions (such as what your function overall is doing, etc). In other words, make your variables, function names, etc as clear and as easy for the person to understand. * Why have two separate variables to control the state of your process. If you have a start and you have a stop, just condense those variables down to 'state' and then have 'true' represent 'running' and false represent 'not running'; e.g. var state = false; * This isn't C or C#, write your () { like this, not () [return] { * Use triple equator (===) in your If statements to enforce type conformity, unless you don't want that. * Regarding HTML, look into HTML5 - right now your HTML is very ID/class happy and it makes reading through it tough (HTML5 solves a lot of this). From there you can simply section off your HTML and then refer to your elements via selectors like '#about article p' or '#about header h1', etc - it makes reading the code a lot easier. * Regarding your issue with setting values, I didn't dive through all of your inputs/fields/etc, but setting the value will not always change what actually is appearing. For example, change the value in a select option, will only change what the value is stored (not seen), you would still need to change the select's text (which is what is rendered to the user); e.g. I might have a select that says &lt;option value="1"&gt;Option # 1&lt;/option&gt; - I can change the value all I want, but the DOM will continue to show the user 'Option # 1'. Try going to w3 schools and looking over the types of elements there are (and what you're using) and see what properties you may need to tweak. * Regarding maintaining a loop that draws and updates the screen, you're going about the approach in a very linear/difficult manner. Look at this fiddle to get an idea of how to initiate an actual continuous loop that responds to user input: https://jsfiddle.net/smgbwfkr/5/. Overall, good first attempt, etc - you'll get better and better, but writing clean code will make this much easier to figure out exactly what you are trying to do.
True! Lazy loading can help a lot!
http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/ http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt/ https://medium.freecodecamp.com/why-i-left-gulp-and-grunt-for-npm-scripts-3d6853dd22b8#.hbqmfghzf
The event handler also gets the promise that was rejected. https://nodejs.org/api/process.html#process_event_unhandledrejection
nicely written 
Except it's not a *compiler*. It can be considered a single REPL iteration, so it's much more of an *interpreter*. This is a complete modal-window-based JS REPL: while(confirm("Next?"))alert("Result:\n"+eval(prompt("Enter your expression"))) P.S. As you know, every joke has a bit of truth. 
I'd also like to hear what u/przemko87 has done wrong. 
Try googling "jQuery serializeObject". https://github.com/hongymagic/jQuery.serializeObject $('form').serializeObject()
&gt; `number-is-nan` What's just wrong with plain `isNaN` builtin function?
I think the problem is that "malicious JavaScript" is not well-defined. What are your requirements for a piece of code to be deemed malicious?
Agree'd. In general its input filtering. If you are expecting HTML; ensure there are no links or script tags. If you are storing into your database; ensure your 'strings' are escaped with the appropriate method (in [node-mysq](https://github.com/felixge/node-mysql)): connection.escape(userId)
Thanks!
 $('form').serialize()
To add onto what /u/my_ledge_ends has said, you're going to face the same problems with _any_ external dep, whether it be just `negative-zero` or `math/negative-zero`. So the choice is between a dep, or committing that code into CVS alongside your app code. &gt; At least then you or the open source community can later contribute related functions Create `negative-zero`, `is-integer`, `is-finite`, etc as a separate modules, then create `math` that has all of them listed as deps. Heck, create a [monorepo](https://github.com/babel/babel/blob/master/doc/design/monorepo.md) to make it easy to work on, but expose them separately on npm so that people can pull just what they want/need. &gt; Installing requires additional network usage. If your builds are non-trivially effected by the increased network usage of deps, then put an npm caching layer in front of your build server, or use something like Artifactory.
Holywhat? Is that jQ, html, and php all mashed up?
Are you wanting to save html as a string to a php variable and then echo it to your html page?
thats the right answer.
you dont need '', if you use "" for php, php will parse "" and replace $test and $test1 `$test = $test1` outputs: `1=10` which does nothing if your gonna mix JS and PHP maybe you want `var b = $test1;` 
Basically, after the first `=` you're no longer in the domain of the `var` declaring variables. You're now in the expression that is being assigned to the new var (c). Because d isn't being var'd, it goes into global scope, or causes an error if you're in strict mode. For `var`, you'll need a comma to allow you to declare more than one variable with the same `var`, but you can't assign to var'd variables to the same value that way. var c, d; var c=10, d=10;
hmm, i made progress :) , i think now I can make it , thanks! :D
You've not given much information. You can certainly use JavaScript with already present HTML. You can also use JavaScript to make and insert HTML if you want. A function is a little ball of code that can take input and give you output. A method is the exact same thing except it's usually attached to an object and may be using `this`, which is a keyword that references the object from which it is being called.
Nah, you want [logest-length](https://www.npmjs.com/package/longest-length). ~~Or [longest-line](https://www.npmjs.com/package/longest-line) which is actually the exact same package a version behind.~~ Edit: Actually, longest-line gives you the length of the longest \n delimited text in a given string.
I want to build something more interactive, something more translatable. It's not meant to be actually used for anything
Yes, the patterns or anomalies being traced for specifically being those that happen to have malicious intent. 
I suggest going html --&gt; css --&gt; js, but of course it depends on the specifics and type of project you're doing. Very basically, a function is a free block of code that does something when called and a method is a function that's a property of an object.
Thanks. I was playing with this and it seem to work as required.
Yeah, thought so.
Alright that made alot of sense, thx man!!
If the current HTML design is already completed, you just need to add the functionalities with JavaScript. However, you may need to change or add a bit to the design to fulfill the functionality requirements. e.g. if the existing design still lack of some elements to provide the controls. A method is a function that is a member of object(s). A method is a function, but a function is not always a method since a function can be defined on its own and not as a member of one or more objects. e.g. function A() { console.log("A", this.val); } //func is a function A(); //"A" undefined var obj = { val: 123, B: function() { console.log("B", this.val); } }; //obj.B is a method obj.B(); //"B" 123 obj.B = func; //obj.B is now a method. Which is a reference to the `A` function. obj.B(); //"A" 123 //note: the "this" refers to the current object HTH.
For fun I tried it, with no splitting. let longest = 0; let count = 0; Array.from(string).forEach( char =&gt; { if( char === ' ' ) { longest = Math.max( longest, count ); } else { ++count } } ); return longest;
This may not be true today, but I'm hoping the benefit of Typescript will be that it *isn't Javascript*. Things like ES6 decorator syntax are continually rehashed, but they're available in Typescript... and hopefully the semantics will remain unchanged even if they never make it into native Javascript.
Being a lightning rod can be fun...
Did he say something was wrong with your library of choice?
ui-mask=$999999.99
Smallest JS-to-JS compiler, written in Javascript: alert(new Function(prompt()).toString()) Which is mildly more interesting than doing absolutely nothing - it does parse the input before transforming it into a string.
so look here at the top http://swagpot.com/indextest.php its that script
I've been writing JavaScript for a long time and I've never regretted sticking with event handlers. For one thing, you know exactly where to go when one fails. In a related development, AngularJS, in a way, reinstated the notion of an event handler with ng-click, so when I transitioned from mostly pure JavaScript to Angular, it was fairly intuitive.
That's a full webpage... there's html/css/js/php and who knows what else happening... If you're referring specifically to the image animation at the top, the slideshow thing... It looks like there's a css animation controlling that.
Maybe I should, as in the standard `Array#sort`, allow the user to pass in a comparison function.
Thanks!
Quite the contrary. This is a quirk of the DOM that is only still present in modern browsers for legacy reasons. In browsers, variable names not defined in the current scope will be interpreted as names of properties of the global `window` object (including `window` itself). The "name" attribute results in properties with corresponding names to be generated on the `window` object, thus polluting the global namespace. An easy way to avoid this problem is to never rely on implicitly defining "global variables": always use `var` to declare variables before using them (or `let`/`const` if you target only the most recent browsers) and wrap your browser code in immediately invoked function expressions (IIFEs) starting with `"use strict";` to active strict mode -- modern build tools will generate IIFEs automatically for you to encapsulate your code. The "feature" you discovered actually dates back to the early days of the web. In HTML 4 and earlier the "name" attribute was present on all elements and served a similar role as the "id" attribute in addition to its role in form elements. There are a lot of other strange things in the DOM such as the `document.forms` property, which contains a list of all form elements on the page. In modern JS it is best to ignore that these still exist as relying on them means you're relying on global state, making your code harder to test and maintain.
The most troubling part is that nobody at npm Inc seems to consider the decision to just hand over the package name (rather than letting azer and kik interactive work it out amongst themselves) dubious or problematic. The only thing they have responded to is the outrage about their unpublish policy, the outrage about their dispute handling doesn't even seem to have registered.
The event-handler property (sometimes called "DOM 0") approach will never become obsolete, and for some events (I believe `message` is one), it's the only way to go (it is deprecated, however, for most events). The main problem with event-handler properties is that it's difficult to attach more than one to a particular element for an event (you *can* write a wrapper function, and that's what some shims for event-handling for old browsers do), and impossible to remove just one (because if you have more than one, one of them encapsulates all of the others); however, unlike event listeners, it is possible to enumerate all of the handlers of a particular type, and it is possible to remove all of them by setting `element.onclick = null` for example. (I'm not sure you can modify inline HTML event handler attributes like that, and instead, event-handler properties, if set in the JS itself, just shadow the inline handlers.)
&gt; $999999.99 What if I want to enter $55.00?
 window.fetch(url, {method: 'POST', body: new FormData(theFormElement)}); Or if you're targeting a browser that doesn't support `window.fetch` yet (and don't want to include a polyfill)- var x = new XMLHttpRequest(); x.open('POST', url); x.send(new FormData(theFormElement)); The [constructor of FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData) will populate it with a given form's keys/values.
Fascinating. Thanks for the further information!
Isn't it node? Or are the libraries Windows only?
Yes, the concerns are for all external dependencies, but the point is for each module you include you have to be concerned with all those things one more time. Essentially, there is a certain amount of overhead and risk per module, so if you use tons of micro modules then you will have lots of overhead and risk. Better to depend on a few large modules if you can help it.
I updated the script -- I scraped all of the emoji from [the full list](http://unicode.org/emoji/charts/full-emoji-list.html) and added them to a gist, which I then load via XHR. [Link](https://gist.github.com/huttj/746b32d3f5c9fcd36f82) Unfortunately, that means that it won't load on some less permissive sites. You could potentially inline that whole list of emoji and use that, instead... **Edit:** I just went back and pasted them in. Seems to work alright. 👌
If you look in the javascript console of your browser, it will tell you the error its running into: &gt; Uncaught TypeError: ctx.fillStyle is not a function ctx.fillStyle("red") ctx.fillStyle("white") should be ctx.fillStyle = "red" ctx.fillStyle = "white"
[Image](http://i.imgur.com/QsdpLgF.jpg)
mobile version is not ready yet! I was hoping people can check it out on desktop first but thank you for the feedback
Most developers have no sense of humor and absolutely must prove everyone else wrong.
Thanks!
I recall reading about this recently and somone recommending an eslint rule to check for it. Maybe this? https://www.npmjs.com/package/eslint-plugin-promise
From my quick read through of the APIs looks like its mostly providing an architectural framework for creating bots, not much in terms of the intelligence that is needed for something like Tay. There are some basic natural language tools for understanding human queries, but nothing in terms of AI responses. 
That is great to know. Thanks for explaining .catch(), I've been using .then(nextFn, errFn) as well. Not anymore!
Any DOM api's you recommend?
Okay. So what a terrible title and function name. A function called FindLongestWord should return the WORD not the length. It would be like me asking you to find my car keys and you find them and come back to me and say "I found them". 
Promises are not a tool that allows you to avoid architecting your code properly. And neither are async functions. It's not chained promises that are making your code complex, it's how you're writing your code. Your comment about scope confuses me. As the person writing the code you have full control over how your variables are scoped. It's fairly straightforward to promote the result of each promise to a more global scope, but then you start turning the chain into more of a mesh that is far harder to reason about. For example these two snippets accomplish the same thing with zero scope troubles.: async function(){ let resultA = await somePromise; let resultB = await anotherPromise; // Do something with resultA and resultB }; function(){ var resultA, resultB; somePromise.then(function(data){ resultA = data; return anotherPromise; }).then(function(data){ resultB = data; // do something with resultA and resultB. }); } As for chaining of failures: if you're not handling a failure the moment it happens then you're going to run into troubles at the end. The simple ideal situations are what you should be striving for. If you can't do that, then you need to look at the promise that's giving you grief and make it behave as a proper encapsulated chunk. It has to handle it's own problems, not bubble them up for the rest of the application to handle.
You need a `catch()` for the *entire* Promise chain, not for each `.then()`.
Its className not class.
Cool... thanks for that! Since, out of the ones you mentioned there, jQuery is the one with which I am most familiar, would you mind explaining the architectural constructs it provides? If you don't mind...
swap, less and length should be functions. Also on line 12 you wrote if (len &lt; 27) { when you meant to write if (len &lt; 17) { 
I'm using the transform-class-properties plugin which allows me to use class instead of className
What makes bigger packages "better"? What threshold needs to be crossed before a package is "better sized"? 10 functions? 200 LoC? A certain cyclomatic complexity? If all I need is `negative-zero`, why do I need to consume someone's entire `math` package? If I'm the author of `negative-zero` and all I wanted was a way to share that function across my projects, why do I have to figure out a broader namespace to create?
The risk is basically eliminated with [npm's updated unpublish policies](http://blog.npmjs.org/post/141905368000/changes-to-npms-unpublish-policy), and sane behaviour like `--save-exact` and shrinkwrapping. And the overhead should be minimal. As I responded in another thread, if the network load is non-trivial, put a cache in front of npm. An extra line in `package.json` isn't really a big deal (IMO). The disk space should also be a non-issue in almost every case.
Have you tested whether handleClick is autobinded? E.g. [ES6 classes no longer autobind to `this`](https://github.com/goatslacker/alt/issues/283). I see that you have `this.handleClick.bind(this);` which I would think works but it's worth confirming. You can confirm this by adding `console.log('handleClick', this);`of `handleClick()` to see that this isn't what you'd expect. Alternatively try changing `handleClick () {` to `handleClick = () =&gt; {`
Yes they most likely used these tools for Tay. And it was a wild success. Opening it up like that was brilliant
Pick one: this.state.isSelected or this.state.selected
It's open source the tester is on windows. It is as cross platform as they come
this.state.selected should be this.state.isSelected
+1 on the animate feature
[D3](https://d3js.org/) takes a bit of focused practice to get comfortable with, but opens a lot of possibilities if you are even slightly interested in data visualisation. Think of it as the Swiss army knife of translating data to the DOM. 
`swap` *is* a function, I'm not sure why `less` or the `array.length` property (only instance of the word "length" in the script) should be functions, and I just guessed that the jsPerf user who wrote [the JS implementation I heavily modified](https://web.archive.org/web/20141119215047/http://jsperf.com/javascript-quicksort-comparisons) saw that 27 was a better magic number than 17 in this environment.
Not in JavaScript, but this language is an opportunity to remove them. 
This actually returns `NaN` because reduce passes four arguments to `Math.max`, `(previous, current, index, array)` and the array one causes it to be `NaN`. If it was a suffuciently long string with lots of spaces, the index might also give you an invalid length answer as well. If you made it `reduce((p, c) =&gt; Math.max(p, c))` it would work though, but not as pretty of course.
Forgot about that, yeah your fix should work of course. Edit: you need to specify the staring value though, otherwise it's NaN.
That reminds me. I really need to clean up the code for this, and release it: https://canvaswhiteboard.firebaseapp.com/#reddit Multi-user, saves to PDF, but doesn't have a nice API.
Splitting itself is O(n). It's possible to do this without multiple (implicit) passes using a single for loop, maintaining the counter for every [\s] encounter, and updating a running maximum when eligible. 
Ditto here! Updating it tomorrow.
`this.func = this.func.bind(this)` in the constructor is the preferred method of binding a method in react in ES6 and does work as intended (it's more performant than binding inlined or inlined arrow functions)
Well, it's not really declaring a new global variable. It's just accesing a DOM node that is already in the window scope. window.foo is just a reference for a DOM element that will exist no matter the name or id you use. Not giving the form an explicit name or id will prevent the (involuntary) use of the reference shown in your example, but the node is still there. 
Hey, FYI the layout only seems to display correctly in Chrome.
Good deal!
The short answer is no, OAuth and SAML are not what you're looking for. OAuth and SAML are technologies used for authentication, that is ensuring that when a user asserts their identiy you're able to verify who they are. What you're looking for is authorization. Once you know who someone is (they're authenticated) you need to control their access to secret widgets or other functionality. As /u/EyeAmAhEr said, this can get ugly. The "standard" way of doing things will always depend on the technologies you're using, your current/future business requirements and your budget.
I overrode the default Promise then to log the error in a pretty way and submit the bug to NewRelic/Honeybadger (depend on whether or not the day has an odd number of letters), but then again, I'm evil &gt;:) We're also using polyfills so we can guarantee implementation, but that's another story.
Thanks! Will fix it up! Does Safari not work for you?
[removed]
I didn't know about Array.from - good thing to know! Your function will return the same as string.replace(' ', '').length since you never reset count. Also, unless the string ends with ' ', you'll fail the last test case listed since you don't do a final check after the loop. Corrected your version would be something like let longest = 0; let count = 0; Array.from(string).forEach( char =&gt; { if( char === ' ' ) { longest = Math.max( longest, count ); count = 0; } else { ++count } } ); return Math.max(longest, count);
I use Windows so I can't test on Safari but it doesn't work on Firefox or Microsoft Edge (nor IE) for me.
Perfect!
Sorry if my post is messy. I'm kind of new to reddit.
You had me worried there :).^Who^uses^Edge^anyway!
I'd say I'ts because the value of uniqueCupcakeTypes is never getting updated. Try uniqueCupcakeTypes++ or uniqueCupcakeTypes+= 1 instead.
Where? I have read [github.com/mapbox/node-sqlite3/wiki/Binaries](https://github.com/mapbox/node-sqlite3/wiki/Binaries) and [NW.js Docs » For Users » Advanced » Use Native Node Modules](http://docs.nwjs.io/en/latest/For%20Users/Advanced/Use%20Native%20Node%20Modules/), and see no easy way to enjoy SQLite. I don't want to "install" anything, I want to see a direct URL for downloading all required binaries, and then "plug-and-play" them. (I am not talking about command-line version of SQLite; it would be easy to use this version in a separate process, but that's another story)
let me try 
 if (cupcake1 &gt; 0) {uniqueCupcakeTypes+= 1}; if (cupcake1 &gt; 0) {uniqueCupcakeTypes++}; Is what it should be.
I also tried taking out the 1 so it was if (cupcake1 &gt; 0) {uniqueCupcakeTypes++ }; but that returns a value of NaN.
I just thought I'd help you cover all the bases!
Is uniqueCupcakeTypes initialized to = 0? 
No problem, good luck :)
the variable your returning has the same name as the function, its overwriting/returning the function. try naming the return value `count` and initiliaze with `var count = 0` * initialize the variable with `var` and name it different from the fn * to add 1 use: `count++` or `count+=1` or `count = count+1` or `++count` * the semicolon goes inside of the {}: `if(foo) { bar(); }` 
Intl.DateFormat is the standards track way to format dates, it's built into most modern browsers, but you'll need a polyfill for Safari and older browsers.
yea thats kind of broken the period key isnt working &lt;wtf&gt;. http://stackoverflow.com/questions/19576202/angular-input-field-with-a-currency-mask-directive-for-money-format-on-the-fly (from looking at the issues on github they say ui-mask does not have this feature) 
Note that if you do this `onClick={() =&gt; todoActions.toggleTodo(this.props.todo.id)}` you are effectively breaking any `shouldComponentUpdate/pureRender` optimizations. Bind your methods in the constructor instead. A good rule is that you should never be creating closures within the render method.
yea afaik its unique to &lt;form&gt;, (and also iframe and object) pretty cool. its definitely an old DHTML/xhtml feature not something new
mc_hammerd has the right answer. if (cupcake1 &gt; 0) { uniqueCupcakeTypes +1; } ^ This is nonsensical, since `uniqueCupcakeTypes` is a function. initializing `var count = 0` and incrementing that var will fix the problem.
i think its actually operator precedence... (foo=bar=baz='wat') it has to assign baz first, so to be able to assign bar, then foo...
check out momentJS and vuejs 
Could really need someone to look at and give Feedback to Qoopido.demand ( localstorage Caching xhr module loader with a promise like interface) as well as Qoopido.nucleus (atomic &amp; modular Js/Dom utility library) ;)
You can get them all from the Date object. Just make a variable date = new Date() And you'll have the current timestamp in that object. You can then generate a time stamp with date and accuraty to milliseconds. [Check out the documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)
What *do* they get right?
Uh ... why call out ES6 specifically? This is perfectly doable in ES5. 'abc defg hijk lmn op qr stuvw xyz' .split(' ') .map(function(s) { return s.length; }) .reduce(function(p, c) { return Math.max(p, c); }, 0);
Further confusion: inspect reports that origImg.getRBG is not a function.
I know most browsers give warnings when you use the shnchronous flag on ajax calls. But dunno how he's getting errors
Can you post the rest of the code?
Oh lawd, the grammar
I add this to all my Node apps, too easy to get bitten by swallowed errors if you're not careful, and that applies to `async`/`co`-wrapped functions as well. The Node people were debating doing some sort of logging by default (like the browsers) but nothing eventuated.
&gt; Oh lawd, the grammar**.**
Yeah, that part was a lie, but please don't tell anyone :(
I researched this recently, there are a couple of JS options but none of them have great browser compatibility, especially on Safari.
jsPDF is maturing but AFAIK it doesn't *convert* from HTML. Right now your best bet would be to use the "Print to PDF" function of the web browsers. Chrome's implementation gives rather good and consistent results. You can ask for printing programmatically, but i don't think you can automatically select the PDF printer, your users would have to do that. Otherwise, projects like wkhtmltopdf (or potentially Electron's printToPDF API) would help you do that server-side.
Interesting. Thanks again!
I was expecting an article with native Promise or async/await based on the title. But since it masters async js *with a library* I think using `bluebird` instead of `q` could yield a lot better performance (if you can handle that extra 17ish kilobytes in lib size). Based on [benchmarks](http://bluebirdjs.com/docs/benchmarks.html) with the lib file size in parentheses (read worse &lt; better): q (~5kb) &lt; native es6 promises (~2kb polyfill) &lt; bluebird (~22kb)
What kind of performance are we talking about here?
Yeah, you don't hire that guy because he doesn't know what he's doing yet.
You need to learn callbacks (or promises).
I guess with a bit of weirdness and duct tape you could use https://html2canvas.hertzen.com/ to convert the html to an image and then use jsPDF to turn the image into a pdf. Doesn't really help though that they are both in the experimental phases.
But then wouldn't you lose selectable text, links, and all the advantages of text formats?
That is true but I was just proposing a hacky method if they absolutely had to do it automatically etc without any serverside script.
As a professional coder, this sounds like someone without a degree justifying their own choice. And most people who say a degree is not necessary do not have one. They are entitled to their own opinion, but I disagree. There are two ways a degree can help you - a CS degree gives you underlying CS and algorithms that DO get used all the time in daily coding. A non-CS degree give you more capabilities for critical and analytical though, in particular if coming from a liberal arts focus, where you spend 4 years deconstructing and reconstructing every topic you ever study. Based on 20 years of observing coders, anyone can be an average coder with or without a degree. Some people are great at it without a degree, but those are rare. But I do not know anyone without a degree who can effectively refactor, re-platform, and re-architect large complex systems. And that is what makes a difference between just being another guy in a cubicle vomiting out code, and truly being able to accomplish great things.
That's not the way syntax analysis works. It starts at the beginning of the line, detects a variable creation token (var) followed by a label (c) token followed by an assignation token (=) so the JS interpreter knows that the instruction token that follows (d=10), which stops at the instruction delimiter (;) needs to be evaluated before it can be assigned to the c variable. That's when it creates the d variable in the window context. This is obviously a browser quirk and is most likely not valid ECMAscript.
Hey man, edit your post so your lines of code start with 4 spaces and it will be much more readable for everyone. It's what everyone's doing in their replies to you.
What's the purpose of testing your javascript code?
Check out youmightnotneedjquery.com if you know how to do something in jquery but not regular. Don't be too hard on yourself about not knowing the DOM APIs, if you never worked under the constraint of no libraries why would you know them? Personally I spend my free time learning new stuff, but DOM APIs are pretty low on my list lol. Also Kyle Simpson just released a new course on asynchronous JavaScript, it's on frontendmasters.com, sounds exactly like what you need as far as basic JS understanding goes 
I spent quite a while doing this on a previous project, but it's *very* difficult to find a library that can reliably do this for whole complex pages, let alone anything with charts etc in it. I'd be surprised if there are any libraries that can get close, if you're looking to automated it totally (if you just want a single page manually, print to PDF is definitely the right choice) For us, in the end we just automated PhantomJS and took screenshots from there. Phantom can be a little unstable (you definitely need to be doing it asynchronously to requests, with some kind of retry mechanism in there), but it renders things almost perfectly, and it's just a normal browser that knows how to [export to PDF](http://phantomjs.org/screen-capture.html), not a crazy HTML to PDF conversion engine, so you get a lot of standard controls over page sizing and layout etc.
I confused this with [pdf.js](https://mozilla.github.io/pdf.js/) and was really confused :d
and here's a [waffle recipe](http://allrecipes.com/recipe/22180/waffles-i/)
i suggest PEG.js, in my team, we are using it to define a basic language and its fun and useful!
How do you organize your own personal packages? Do you actually create a separate NPM package for each function you write? A separate git repo? A separate build? &gt; why do I have to figure out a broader namespace to create Because there is no cost and only benefits to broadening the namespace even if slightly. How does it hurt you to require("jasontrill-math") instead of require("jasontrill-negative-zero")? I can understand if your function does something really unique and isolated. But in this thread people are harping on: &gt; is-integer &gt; is-finite &gt; number-is-nan And I think have a point... As an observation, the current situation where people are happy to publish individual functions is a testimony to how easy NPM and Github has made our lives where creating a package feels cost free. But just because it's easy doesn't mean we can't do better as a community. JavaScript is being used now for larger and more complex applications than ever before but the JS platform doesn't always encourage good behavior for reaching that scale. It's left up to the developer community to be disciplined in our use of the language. I think having reasonable namespaces is a good discipline.
Checkout TodoMVC on Github. It has Todo implementation in variaus JS Frameworks and Vanilla JS too...
I was expecting this to be an april fools post.
You can combine html2canvas and jsPDF. I've gotten some decent results doing that. It has a few issues rendering svg properly, though. If anyone has gotten something to work perfectly, please let me know.
I think you underestimate how much rendering performance can be improved by implementing shouldComponentUpdate.
Commenting cause I'm curious... If everyone is on the same *page*, then you'll use some kind of async push or something and the page on the other devices has to be constantly listening for push... I don't know that js and browsers are the best way to implement this, but like I said, I'm curious to see what others have to say here...
FTFY: Mastering fucking up scrolling in a few simple steps.
Whatever you're passing the closure into is what's going to take the hit. shouldComponentUpdate will always return true. Function based components are always re-rendered, so you want to avoid them for components that have expensive renders or contain children with expensive renders. It's really something you should only be using for simple leaf nodes.
Yes, you're right. But in my defense, in the example from the article the component was actually a leaf component and the closures were applied to DOM elements :)
If you want it to be completely browser based, and by that I mean no node server, then you'd need to use a third party to do PUBSUB. https://www.pubnub.com/ It's pretty trivial to do with node and socket, happy to discuss more if you want. I made www.gotindergarten.com that uses a timer with pub/sub. 
All of the answers would fail you on an interview, cause they are all at least O(n) in time and O(n) space complexity. Maybe more. The problem can be solved in O(n) time with O(k) space. This can be achieved with imperative code easily. To achieve it with functional code, the language needs to support tail call. With no tail call, functional implementation would be O(n) space. 
I just saw this discussion... I'm not sure that in near-term I will have time to look into this, I want to do other listed features first.. but it's interesting.. also have to see if this is of advantage for more users, for me personally I'm not sure I need it that much :| If someone really wants it, they can fork the project and try? 
FYI using a "deferred" is an anti-pattern. You should be using the Promise constructor and putting all of your logic inside of it.
Like most of jQuery, it handles cross-browser issues and other corner cases. For example, with a `&lt;select&gt;` with multiple values selected, `elem.value` will only give you the first one, whereas `jq.val()` will return an array. (And likewise for setting values.) [But jQuery is open source so you can see exactly what it's doing](https://github.com/jquery/jquery/blob/master/src/attributes/val.js). 
Sounds good - but I'm on a trackpad. Eeek! Thanks for the tip though.
You are correct, sir. Hats off to you!
What's the point of this line? sort.sort = sort;
not sure this is what u want, but one way of doing something like this is: $('.headers').click(function(e){ $('.downarrow').removeClass('uparrow') // reset everything to defaults at once, saves a few lines of effort var titl1e = 'title 1', activeselector = '.header1'; if ($(e.target).hasClass('.header2')) { title = '22222'; activeselector = '.header2'; } if ($(e.target).hasClass('.header3')) { title = '33333'; activeselector = '.header3'; } if ($(e.target).hasClass('.header4')) { title = '444444'; activeselector = '.header4'; } $('.titlebar').html(title) $(activeselector).addClass('uparrow') }) if this happens to match your code you could just do $(e.target).addClass('downarrow') and skip the `activeselector` stuff
I wouldn't use css background for a canvas element, instead drawImage on canvas of the background image. This isn't working code but it might give you an idea of how to start: var img = document.getElementById("#yourimageid"); var canvas = document.getElementById("#yourcanvasid"); var ctx = canvas.getContext("2d"); var circles[]; render(){ ctx.drawImage(...); for(var i in circles){ var circle = circles[i]; ctx.drawArc(...); } } setInterval(render,1000/30); canvas.addEventListener("mousedown",function(e){ circles.push({x:e.offsetX,y:e.offsetY,radius:4}); }; 
step 1: save the image data, google get canvas image data use something like `original = ctx.getImageData()` step 2: global array clicks, `clicks = [];` step 3: addEventListener for 'click' to the canvas and add to the array, something like: // (psuedo code, sry im a jquery guy not vanilla) clicks = []; original = null; canvas.addEventListener('click',function(e){ var ctx = canvas.getContext() if (original == null) original = ctx.getImageData() // backup the original image // add click to array var click = { x: e.localX, y: e.localY } clicks.push(click) //draw circle ctx.drawCircle(foo,x,y,bar,baz) }) function restoreImage(){ canvas.getContex().drawImage(original) } step 4: profit
how is Best formed. how pm get JS good
Exactly, and no huge debate about stronger or drastic rule change would emerge.
I could use some help as well. Anyone willing to help me out?
Boom! http://codepen.io/anon/pen/aNLJRK
I love javascript. It has a vibrant and innovative community, it's managed to be forward thinking while maintaining legacy code and maintaining elegance (take that OBJ-C). The compilers, transpilers, build tools, frameworks, may have thousands of clones that are at varying degrees of quality, but the bigger ones have tons of community support and are reliably very high quality. Show me any open source programming community where this isn't the case. I'm just tired of all the moaning within and out the JS community about JS. If you don't like it, don't use it. If you're a front-end dev, change your career. The people who make great software don't sit around whining like spoiled brats, they build things, push boundaries, they make their tools and their community better. There are always those who have their ego hurt when they can't understand or keep up with something and choose to criticize it to make themselves feel better. But please keep your drama to yourself.
Sure ... it's just kind of unfortunate to see so many ES6 examples of code when it's not the easiest thing to get working. Imagine you're a newcomer to JS, someone posts an example of code you're interested in, and now you need to learn about babel, how to set it up (how to install node and use npm), and so on.
You may be write about developer attitude maybe a little. But the motivation is fundamentally different.
More performant than the arrow function? You've peeked by interest. Care to share how? 
arrow functions tend to be slower because how they have to grab outside scope, but the real reason this is faster is because you aren't redeclaring the function or rebinding the function on every state update, only once in the constructor. There was a recent talk on react performance (list of ten performance tricks in react) where perf tests were done on this, as well as other things such as es6 class vs createClass.
BINGO! Awesome! Thanks for all the help!
Good alternative. Thanks for the help!
&gt; Their version numbering system is really nice We'll have to disagree on this. I've seen (and read about) semantic versioning fail so many times, and simply fall apart when considering practicalities and not theory, that it's essentially worthless. &gt; If I were going to replace NPM I would create something No! That's exactly how these problems with NPM exist in the first place. *Great* package management systems already exist, but NPM was created from scratch regardless. Depending on the project and platform, I would use NuGet, Portage, or Apt instead.
threejs is always fun, I made this starter repo that uses threejs and the web audio api https://github.com/a-axton/threejs-web-audio-api
Works in browsers with JavaScript disabled.
Great refactor. Removing the kick, mass, and gravity variables also made a small difference since they're not really used in the version I originally posted.
`catch` works beautifully from what I've seen, combined with `reject` inside your promise.
Wow cool! How good is the conversion? Does it handle any of the css3 for paged media specification? Or any css at least?
That's not actually "completely browser based" though, is it? There's still a server involved, it just isn't _your_ server (or service).
This looks pretty interesting, bookmarking for now. Thanks for sharing!
I'm too lazy to check but are they actually submitting the form or are they just catching the submit event and doing something else with it?
Thanks! That sets a global variable board and a global variable gameBoard equal to an array full of 13 arrays in which all 13 indexes of the inner arrays hold the value null... Is that what you want? 
Which form exactly are you talking about?
Not necessarily related. You can also connect to RESTful interfaces without the use of forms. In fact, for methods other than GET and POST, you *have* to use JS.
How so? There's no caricature of other languages or any implication that other tools can do these things better. It's simply a cartoon bashing Javascript (and it seems to be a theme when looking at this guys other posts). If you actually read the cartoon the point is that the author chose Javascript for several tasks when he should have chosen a different tool. Rather than climb out of the hole he kept digging, and digging, and digging. The world of Javascript has gotten so big that you can dig forever. For someone who doesn't have the foresight to pick a correct tool, this can be a bad thing.
There are many reasons: 1) they create forms in simplest form and then they add rich interface, based on feature detection 2) accessibility 3) it's easier to support native buttons like enter, etc 4) it's easier to do automated testing 5) they are more reliable, less error handling, because most of this work it's done by browser 
Agreed. I've seen at least a half-dozen articles from him linked in the last couple months, and every single one boils down to "I hate Javascript". Surely there's something more constructive he could be doing.
Hmm... Neither while loop will run unless token is equal to null. And the second while loop will never run because it has the same conditions as the first while loop. Or am I missing something?
[Forms and AJAX are not mutually exclusive](http://stackoverflow.com/questions/16323360/submitting-html-form-using-jquery-ajax). Are you sure your example isn't using AJAX with a form?
Maybe I could remove that, but the idea was that the first version exported an object with `sort` as a method, then I switched it to just export the `sort` function itself and added that line for backwards compatibility, despite there being no existing users. I guess I should remove that, because as I've been changing that gist, I've been turning it into an optimized version of `Array#sort` that could also be applied to strings.
It was an interesting analysis too, I don't know too much about performance optimization, so I just tried things out that people suggested, some things that look like they should speed things up turned out to slow things down instead!
&gt; but it's more important to choose the right tool for the job. That's the joke. People use JavaScript, an extremely bare-bones language, for tones of things that they probably shouldn't, like for servers. This leads to the situation in the above photo.
yeah, seems good. but can you make me clear smthng, like does code climate online ? I mean, without any clients but browser (I got about CLI, but would it works without ?), and codacy use pre set tests in code or in codacy itself ? yeah, silly questions, but I need to be sure. 
They may still be using AJAX/etc to submit, but want to block robots from submitting the form... well behaved bots, like the google bot, don't scout down POSTs because they can take actions (like delete).
The function is being used like this: function isWinningMove(row, col){ if(enumerateSquares(gameBoard[row][col], row, col, 1, 0) &gt;= 5){ return true; } } It is a helper function that counts the squares around the most recent move.
Is this April Fools? Solving Javascript Fatigue by introducing another acronym which encompasses 4 libraries with steep learning curves? 
Well, you do solve framework fatigue by just picking something and getting to work. But considering there are probably a thousand articles like this written every day, it hardly is going to convince anyone else.
You know, there is a third and fourth option: 3. Use Lodash 4. Use a language that has a standard library that's deeper than JavaScript's puddle
You're not providing any row or column information here. Is this one row of buttons? One column of buttons? Some combination of both? There's no way to tell... unless maybe the `b` and ` 0-2` in the id means anything?
Lodash will never cover every micro-library someone could possibly want, and Javascript is bundled with every browser used (incase you haven't noticed).
I do this in the practice of "progressive enhancement", wherein features are built out for the lowest common denominator, and then additional functionality is built on top of it. This allows me to easily build features across platforms (including test browsers that are often very basic)
Happy cakeday /u/tomdale!
&gt; Javascript is bundled with every browser The vast majority of people using npm are users of node.
&gt; You can read through my comment history to see my various positions against node and npm, but you'll find none of them are due to ignorance. I even use node on occasion, as much as I don't enjoy it, and NPM because it's so prevalent. This is nice to hear. No hate from my side, only suspicion. Your username is a little offensive, after all. I do believe that NPM is a reinventing the wheel type of scenario, but one where all the other wheels simply didn't fit very well into the frontend/fullstack mentality that was appearing at that time. There are definitely better tools than NPM, but not for managing javascript code for node at a platform agnostic level. If you're not using node, great, no worries. But node and NPM have both gotten the javascript community very far in a relatively short amount of time.
npm is the most popular packaging tool for browser and server
&gt; Your username is a little offensive, after all. It's intentional. Trolls be trollin' ;)
The harm comes in the effort expended having to create a taxonomy that doesn't need to exist. Sure, these examples all have a clear grouping, being math functions. But what about a function that pluralizes words, `pluralize`? Do I create a `language` module to host it? Or `string`? What happens when I want to support multiple languages - then do I change the hosting module to `i18n`? Keeping it just `pluralize` allows me (and others) the flexibility to organize collections of modules as we see fit. `pluralize` can be in all three module collections. It also avoids the ghost-town project where someone starts with lofty goals ("Yeah I'm going to make a whole `language` library!") and then just stops at `pluralize`. Namespaces solve the problem of name collisions, so I would have `jasontrill/pluralize` and you could have `ishouldrlybeworking/pluralize`. But I don't feel like we have to go deeper into namespacing just for the sake of an arbitrary collection of functions. I agree that the JS platform and community has a long way to go. I just disagree with you on small modules.
I propose the PLAIN stack. * Vanilla JS * No build step in development * Any abstraction layer for your favorite DB PLAIN looks like an abbreviation because its all caps.... but its really just plain. Super increase in productivity across the board, but it requires that you have a team that doesn't suck.
&gt; Great package management systems already exist What would recommend that simultaneously works on both *nix and Windows? It doesn't even have to have a registry. I have been having trouble finding cross-OS alternatives.
&gt; If you actually read the cartoon ... I actually did read it, and to me it's clear that the author is making fun of the Javascript community's insistence on somehow cramming JS into everything (or, perhaps more accurately, cramming everything into JS) - and there certainly are implications of other tools doing it better - see for example the bubble reading "Compile a better language ...". Did you?
You probably want to use PhantomJS most of the time or even real browser instance if you can afford it. You know how for some unit tests you mock out some objects and in other unit tests you mock out other objects? When you use JSDom you are saying I am mocking out the DOM. Now whether mocking out the DOM is the right thing to do depends on your implementation or testing strategy. For example, if you intend your code to be isomorphic between Node and browser, then mocking the DOM might help you validate that. If your testing strategy says your test must be nonflacky, fast, and cheap to run, then something headless like PhatomJS and JSDom are your only options. However, if your testing strategy is to be as accurate as possible, then you would have to run it in the real browsers. 
I understand it's the true hipster thing to hate on javascript, but the response 'don't use javascript' is juvenile and a poorly thought out, overly general statement. 
This is specific to context (what `this` is) rather than scope (global, or function blocks from where local definitions are referenced). The value of `this` is dynamic for functions. It is determined when the function is called based on who is calling the function. Given: foo.bar(); the value of `this` in `bar()` will be `foo`. You can assign that same function to another object and call it, and that will cause `this` in that function call to be the other object. When you are not calling a function as a method of another object (&lt;someobject&gt;.&lt;somefunction&gt;()) and just call it as a standalone function (&lt;somefunction&gt;()), it has no context - no this-object it can relate to. If you use `this` in such a case, it will default to the global object or `window` for browsers (it will be `undefined` in strict mode). When you call `forEach`, you're passing in a function that will be called by `forEach` without any context. There is no object to represent `this`, so the global object will be used, and in your first example, this is what is getting assigned to `classroom`. In the second example, you avoid using `this` and instead reference a local variable defined in the parent scope of the function passed into `forEach`. This variable retains its value of the Classroom instance since it is not derived dynamically like `this` is. Another alternative is to force the `forEach` callback you're using to to have an explicit, non-dynamic `this` value that you specify. This can be done with the `bind` method. Called from a function, it returns a version of that same function where the value of `this` is what you specified. students.forEach(function(student){ student.classroom = this; }.bind(this)); // callback will now use Classroom instance for `this`
haha
In general they are identical- however be careful: if you are polyfilling the Element.placeholder, you want to be sure your polyfill supports jquery .val so that it handles the values correctly 
The problem with the statement "If you don't like it, don't use it. If you're a front-end dev, change your career" is that programming languages are tools and tools should get out of the way of the people who use them, I shouldn't have to change my career because I have some annoyances with JS. 
Ultimately, the people coming into the industry in the future and those of us working in it now; will make the call on that. Each business has its own choice. I just got off an ASP job and nothing sounds more refreshing that to get back to JS.
What are you doing server-side? Given that this is /r/javascript I'm going to assume it's node.js var fs = require("fs"); var text = "Your text"; var filePath = "text-file.txt"; fs.writeFile(filePath, text); If it's another language you're working with on the server (like PHP) then it'll be different. PHP: $text = "Your text"; $file_path = "text-file.txt"; file_put_contents($file_path, $text); 
Let's see, does the M stand for Mongo? \*checks\* Yep. Pass, I'll stick with solutions that don't make toxic choices, thanks. &gt; Mongo because of wide support, easy of deployment and reasonable storage That's a ridiculous reason to pick Mongo. It's like picking Haskell for your server side language because "everyone knows it and it's already installed on most shared webhosts". It might be a good choice, but not for *those* reasons. (Edit: More generally, I'm a bit confused by the whole "people telling you to use a new stack is terrible, solve it by using this new stack!" logic...)
Assuming you're using Node: var fs = require('fs'); fs.writeFile('test.txt', 'this is something useful to save', (err) =&gt; { if (err) throw err; console.log('it has been saved'); }); Checkout more about [filesystem here](https://nodejs.org/api/fs.html).
I'll drop MongoDB too... EH? 
I'm unsure what you mean by building it offline. Are you needing a server? If so, why don't you setup a node.js server on localhost? edit: after checking out the Ionic site, I understand what you mean by building it. Although, it seems strange that you'd need an internet connection to do a build.
There's no specific function for it, it just needs to be written to the same directory as the html file itself so it can be read back. The website is just for a local network, so I guess you could call it a learning project.
`npm install --save-dev ionic` then look for it in `node_modules`
I am unsure what the problem is here. If you want to reduce the repetition of the while loop with the same condition, then encapsulate both loop bodies into a single helper method with an optional parameter to control which code lines need to be executed. Then return the finished calculation as an object so that you can refer to it easily after the helper method returns to your main function. If your problem is linking between current DOM states and JavaScript variable, consider using array access coordinates in data-* attribute of the DOMs. In your JS fiddle, you are using jQuery library to listen to delegated events. I assume in your actual application, you are creating the buttons via JavaScript as well. Then assigning the data attribute to that generated button is as simple as $(id selector).attr('data-board-coordinates', value) You can also use $().data() method to assign data attribute. Since I'm on phone, I am running out of my patience because of so many typos. PM me if you need help. 
HEH... I like to use HyperSQL.
Here's an update, I decided to use PHP instead, with this code: &lt;div id="submissionform"&gt; &lt;form id="myform" name="myform" method="POST" style="display:block" target="_parent"&gt; &lt;input type="text" name="submittext" id="submittext"&gt; &lt;input type="submit" name="submit" id="submitbutton" class="button" value="Send"&gt; &lt;/form&gt; &lt;/div&gt; &lt;?php if (isset($_POST["submit"])) { file_put_contents('output.txt', $_POST["submittext"]); } ?&gt; It works almost completely perfectly, but there's one problem. Every time the form is submitted, the page refreshes. Is there any way I can avoid this? (Preferably without using .ajax, as it seems to never work for me)
Really should just read: "Yesterday: HN outraged at people developing in Javascript" "Today: HN outraged at people developing in Javascript" "Tomorrow: HN outraged at people developing in Javascript" e: sp
Code golf is a lot of fun in Javascript! It can also be fun working through traditional CS algorithms in Javascript (although sometimes Javascript applies some constraints that make these kind of things silly, performance-wise. The DLL is just one example). Also, If you would like to try your hand at an open-source project, I recently started working on https://github.com/Yeti-CMS/yeti-frontend
Well, most code-review and CI services offer an API that you can use, browserless, but most people never get to use it. The workflow is more or less as follows: - You have your project in source control (github) - You create an account in a SaaS provider of code reviews or continuous integration (codacy, code climate, travisCI, codeship, etc.) - In your SaaS dashboard, you add your github project. It most often includes authorizing said SaaS to interact with your github account Under the hood, the provider will clone your repository. You won't need to actually upload your code. Moreover, if you just want some code-review and linting, you are done by now. The SaaS provider will run its predefined tools against your code. The tools are language specific, but are de-facto standards. CSS runs against csslint, javascript againts jshint or eslint, PHP against php_codesniffer and so on. In your SaaS dashboard you can [customize the rules to evaluate each project](https://www.codacy.com/versioned/images/features/img-5.png), because several *best practices* are just conventions that you can safely ignore. This means that, when presented with 1000 code style issues, you can relax the ruleset to close on the real serious violations. Then you save the configuration and run the check again. Once you get to know the benefits of these tools, you will want to optimize your workflow. For example, you don't really want to manually click "review" every time you push a commit. You actually want the SaaS tool to detect when your codebase changes and then refresh the code-review (for which you'd need to configure an [integration](https://github.com/integrations)). Even better, you want the SaaS to notify you when the style rating changes after you push, or [evaluate the incremental code-quality of a given pull request](https://scrutinizer-ci.com/images/tour/project/home.png). With time, you'll feel that manually configuring each project is a waste of time. Most of these SaaS providers let you use a YAML file to have the review conf in version control: [.scrutinizer.yml](https://github.com/doctrine/DoctrineModule/blob/master/.scrutinizer.yml), [.codeclimate.yml](https://github.com/railsconfig/config/blob/master/.codeclimate.yml). Regarding CI providers, it's more or less the same, except they don't perform a static analysis of your codebase, but instead run your tests. This means you have to actually write tests. Again, which tests and with what settings can be configured in a web dashboard or a YAML file, like [.travis.yml](https://github.com/emberjs/ember.js/blob/master/.travis.yml). There are dozens of test runners but the stack is more or less a de-facto standard for each language. I'd suggest you get some experience with code-review SaaS before embracing TDD. Not because they are related, but because you don't need to write additional code to see them in action, as opposed to CI providers that won't do anything if you have no tests to run. 
Yeah I was looking at linked lists and algorithms. The CMS looks interesting I can't look at it in detail at the moment but I'd love to contribute to something.
To add to that, I'd like to see how Glimmer is affected by the number of Ember's computed properties that I can cram on a single page (comparing to Rx or Elm etc.). And the times for initial render and memory usage since it sounds like that would be the more problematic area.
yep
Tom tweeted this: https://twitter.com/tomdale/status/714911271078879232 The graph lacks actual numbers though
lol @ the prototype criticism. It's just a different way, there's nothing wrong with it. It works fine in lua. It works fine in JS.
terrible scroll. 
Because there are thousands and thousands of Ember developers who already know the framework, and sites with billions of hits every month who probably would not be stoked if we abandoned the framework. They will, however, be stoked when we give them a 5x performance improvement with nothing more than a dependency upgrade. (Glimmer 2 is fully backwards compatible.)
Hahahaha best April Fools goof yet.
Just in case this isn't April Fool's, why is it so important to have these kinds of "stacks"? LAMP, MEAN, MECH, whatever; why not build a frontend in whatever language/framework you want (angular, react, vanilla js) and have a RESTful API backing it? Why does it matter if you use Flask, or Express, or Spring Boot? If I made an angular app backed by a Flask service and postgres, I don't call it FAPP (Flask, Angular, Python, Postgres). I call it "this is my app, and I built it using these tools". What is the purpose of these acronym stacks?
&gt; However, this isn't supported by what I've read so far about JavaScript scopes. Isn't it? It's in a different function, so it has a different scope. Remember that you're defining a function inline. `this` inside your callback function is set to the global context object. That's what you get when you call a function normally without a dot, e.g. `some_func()`. Remember that `this` has dynamic and not block scope (unless you're using ES2016 an fat arrow function), which means it matters how the function is called, not how the text of its definition is nested. 
&gt; If you try to use prototypal inheritance like "classical" inheritance your going to have a bad time. That's not a problem with the language, that's a problem with your understanding of the language. I'm not entirely sure about this. Javascript has been around for a long time and a lot of people still struggle with prototypal inheritance. If you as a developer make something that the majority of people struggle to understand and use, is it your fault or theirs? 
No, I'm aware of that...but when the form says method="POST" and has an action and does a full page reload, it's a pretty safe bet it's actually submitting the form
Firebase is not open source. Google could opt to close the service (or alter the pricing or terms) at any time. You may disagree that the risk is significant, but it's not an invalid decision. And he mentioned Parse, which was a very similar service to Firebase, so let's not pretend that this isn't a real concern.
Would you say that ... Just this morning you `npm install`'d `jspdf` and expected `pdf.js`?
Check the date.
&gt; But why would we want to? Because there is a thing called common sense. I think that if a programmer is incapable of writing a left-padding function (if that's really needed), he should not post any stuff to npm or any other public repo at all.
HN is run by statically-typed morons on drugs that promote direct hatred on JavaScript.
&gt; Use Lodash Overhead, overhead, overhead. Out of literally nothing. &gt; Use a language that has a standard library that's deeper than JavaScript's puddle A typical ES6-compliant modern browser standard library already has everything you ever need. Not being able for some self-proclaimed "developers" to read through MDN docs isn't the fault of the language, or its standard, or a particular environment, or package manager, or whatever else.
A lot of people struggle with CSS too, that doesn't mean it's bad, just that people are too lazy to learn it. There's absolutely nothing difficult about prototypical inheritance, especially not compared to classical inheritance in statically typed languages. 
Nice shot, though I didn't quite get why gzipped size matters more than raw one. I'm also into micro-libraries but always state their *non-gzipped* size. Because they seldom are used stand-alone, they are usually combined with our libraries, and their actual effective size in gzipped bundle may vary due to the way gzip compression works. So specifying just minified size is much more... honest.
Mousewheel is broken in my mouse anyway, so I just moved the scrollbar and enjoyed reading. Well, not really enjoyed.
This: .then(key =&gt; { return fetch('http://getlogin.com?key='+key) }) can be rewritten as this: .then(key =&gt; fetch('http://getlogin.com?key='+key)) I liked the part about a function that could take a promise or a regular value as an argument. I never thought to use `Promise.resolve()` like that.
Here are some good examples which they are working on adding to the docs: https://github.com/ReactiveX/rxjs/pull/1571/files?short_path=7f5c456#diff-7f5c45637b561dd8246390824b7df826 I have recently started looking into RxJS, and streams are simply a better tool to create uni-directional flow. With Flux/Redux, the flow is rigid, but with streams, the flow is composable. 
Interesting that the `style` attribute can take both strings and objects, I wonder if one might be more performant than the other?
But you're always catching up, this is not innovation. You answered from the point of existing users however new users can see where you're heading to a choose a tech stack that's already there. Much of this comes from development in isolation. Why not for example base CPs on Rx or some other FRP library. I wonder how much work on bug fixing and perf optimizations would that save up to this point and for the future (because you're going to rewrite CPs for sure).
To be fair I often make up acronyms to describe my stack.. I am currently sticking with GoRP not least because it's fun to say.
This still seems strange to me. Use something else for syntax highlighting? Use a better editor? I don't own the code in node_modules, I should not modify that code and I don't want linting errors to fail my builds because they happen in a space I don't control. What you're doing is like using a shovel to hammer a nail.
I live in Australia... its the 2nd. I get your point but if this is too stupid to be a joke. It's not even remotely funny.
I maintain some open-source npm modules and change them frequently while working on a proprietary code that contains these modules in node_modules directory (as git submodule). If you dont want linting for node_modules, add a rule to .eslintignore file. I created a fork because I didn't find a way to un-ignore that default rule for node_modules that eslint has. Changing one line of code seemed more simple to me than swapping my editor or linting tool.
Having some built-in hard-coded (!) folder preferences for an abstract JS linting tool — that's stupid. Users should explicitly decide what to ignore and what not.
I'm sure there are loads. Why not search github with 'language:javascript' and some ES2015 specific terms? Unfortunately '() =&gt; {' won't work but maybe 'class' or 'import' would.
I don't think there is any intention for dishonesty... just that he didn't follow the typical convention of stating the minified size.
It does. They may be worried about slipping into the abyss of irrelevance... And losing the position they worked so hard on.
Pretty cool, I'm just wondering, why not requirejs?
Today I found out I've been using NPM for years; Nginx, PHP &amp; MySQL. Could cause a lot of confusion if I describe this stack with the acronym.
https://xkcd.com/927/
[Image](http://imgs.xkcd.com/comics/standards.png) [Mobile](https://m.xkcd.com/927/) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini\-USB\. Or is it micro\-USB? Shit\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/927#Explanation) **Stats:** This comic has been referenced 2722 times, representing 2.5753% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d1mzohh)
Ember CLI has been shipping with Babel turned on by default for over a year, so almost any open source Ember app will be written in ES2015. Some big ones off the top of my head if you're interested in how ES2015 scales: * Ghost https://github.com/TryGhost/Ghost/tree/master/core/client * Travis CI https://github.com/travis-ci/travis-web?files=1 * HospitalRun https://github.com/HospitalRun/hospitalrun-frontend 
This is pretty cool.
Pick up a Particle Internet Button. You can make it buzz from any internet connected device with hardly any code at all. 
Hi! Thanks for feedback. Yes, I agree that the shorter version is more convenient in the real code, but I think the longer one makes the code easier to understand for beginners. Btw. it's good to know that you found something interesting for youself :)
I wouldn't go quite that far, just I've noticed something of a double standard against javascript. When it does something good, it's just "finally becoming less terrible". When it does something bad, it's clear confirmation that the language as a whole is not worth the while and should be burned to the ground.
Might be interesting to share some thoughts if you like. Also wrote my own async, promise like loader some time ago: Qoopido.demand (also on github) In addition it uses local storage for caching and can also load CSS + legacy scripts as well as anything someone writes a handler for (it is quite modular). To manage the cache it also supports semver versioning and local storage compression via lzstring. In addition it is capable of loading bundles from, e.g., jsdelivr.
&gt; if a programmer is incapable of writing a left-padding function Nobody is using a library because they're incapable of writing one. By that logic a talented programmer should never use a library!
What are you trying to accomplish with this project. Hard to tell from the readme.
Thanks for the input! I'll take a look 
I like it, looks nice! Breaks on empty values for me though. Also, when you have a large item with a tiny scrollbar, the error bar on the bottom covers up the scroll so it's hard to click it.
This is interesting but I find these slides insufferable why is there an animation between slides. It takes forever to read. 
`is-positive` is a ridiculous module, and it should not be used as some sort of archetype for small and focused packages.
Bastard.js?
Is the animation always RTL? I tested it in Edge, and even when the sample says LTR, it goes the other direction.
Played around with raycasters in [A-Frame](https://aframe.io): http://ngokevin.github.io/aframe/examples/test-raycaster/ Drag to look. Eventually, once WebVR gets hand-tracked controller APIs, those raycasters could be your hands. Check out the source, at most abstracted layer, it's all HTML which is cool.
You can add global variables, that's probably the easiest way. Other way is when setting the event listener, use a closure to access outside variables. var outside = 0; element.onclick = function(event) { outside = 1; };
Uncheck `transition` and `-webkit-transition` for `.bespoke-slide`.
Is there a way to use destructuring on the function parameters and them make them accessible as global variables?
I... what? This is only more evidence that the author shares our opinion that JavaScript shouldn't be used for everything. I'm not sure what you're trying to argue here.
If you don't have time to learn the platform that is *constantly evolving*, you shouldn't have gone into Web development at all. The time of "IE6 everywhere" is over. Live with it or leave it.
And those hipsters have nothing more to differ from others, yes. Their pseudo-elitist nest is about to fall from the binary tree. But heck no, they still differ from normal people by admiring CSS-less web pages that look like a hello-from-nineties and are totally unreadable on mobiles.
"Functional" is a pretty vague term – what are you looking for exactly? Canvas/webgl is based on mutating state so it will be hard to find a completely stateless API that wraps these in an CPU/GC efficient manner. However there is [stack.gl](http://stack.gl/packages) which embraces a lot of functional programming concepts like pure functions, higher order functions and functions as a first-class citizen.
Sublime has way more plugins. Also, the fuzzy search and command system are great.
I've just tested in on IE Edge and it seems to work as expected. I don't know why yours is not working.
For the many times I need to query the service in the browser, paste the thing into a file as a JSON variable and start chopping it off using lodash.
You're almost certainly not going to find a pure functional solution to computer graphics. Think about it, your functions couldn't modify an existing canvas, only return a new one. The performance would be orders of magnitude slower than an imperative solution (and for most applications unacceptable).
Are Global variables for caching document nodes a good idea? I read that this is a good practice, for example var globalTable = document.getElementById('tableToEdit')
How about abstracting the function function addItThenSubtractIt(x,y) { addIt(x,y) subtractIt(x,y)
You're totally correct doing that, but you should still try to contain/modularize those variables as much as possible. So if you need to cache a DOM node for use with a feature but don't want to pollute the global namespace, you can use an IIFE (assuming you're rocking it old school without a module bundler a la browserify/webpack): ;(function () { var _myTable = document.getElementById('tableToEdit') // rest of your feature that repeatedly accesses this node... })()
[Source/how-to](http://github.com/zwhitchcox/zwhitchcox.github.io) I kind of tried to make the how-to so anyone could do it. Don't worry, I know you guys didn't need that level of detail.
Hey there, when I put myself to learning Polymer, I had this difficulty of just constantly asking how I was supposed to do things i'd learned in react or angular. I feel like there's a lot of indirection in polymer. There's so much going on with the properties for me it was confusing. When I created WebBlock.js I really tried to emphasize that all you are concerning yourself was how to turn attributes into local dom properties, and from them you can use React just like how you are used to doing for the internal DOM. Initially I was also confused using HTML as a module/template loader. I mean, I get it, that those things are super valuable, and html is powerful, but they existed as just one more barrier to me getting started. My WebBlock components can exist entirely defined in javascript, and as someone coming from an NPM/require/import world, that made a lot more sense to me how to fit it into to WebPack. I have a lot of respect for the ideas Polymer is doing, but they just feel very detached form mainstream javascript.
Needs to have larger text on mobile.
Rendering to a canvas is an imperative process, requiring your functions to generate side effects. While canvas doesn't have as stateful an interface as the DOM does, it is still a stateful interface (such as `beginPath` and `closePath` function calls). You can, with a bit of finagling, use [d3 to render to a canvas](https://bocoup.com/weblog/d3js-and-canvas), though whether you'd get either the performance benefits or mathematical safety that functional programming paradigms are typically associated with is less likely than what you're probably expecting.
You have to hit right arrow button to start the slide. ;) 
Linux works fine. Many people use a VM rather than dual boot.
You could just install virtualization software such as virtualbox and run Linux that way. Easy.
&gt; arrow functions what are they? 
You might enjoy [this tweet](https://twitter.com/ianstormtaylor/status/712798309266497537?lang=en), which has quickly became my favorite on the subject. 
There's no actual learning content on the channel. It's just a video that says there will be. 
So it's like [jq](https://stedolan.github.io/jq/)'s [jqplay](https://jqplay.org/) without filters?
I have a small suggestion. Your bullet claiming "author" of react feels a bit heavy handed. It sounds like you're claiming to have written the library. Maybe use "contributor" instead? 
Yeah, I know, but that's what they call it in AUTHORS.md...do you think I should change it even though that's what they call it?
So, one thing. There's no way someone is going to look at all 500 articles in one session and you shouldn't have to ship all 500 items down to the browser in one go. I imagine you would rather have a paging mechanism to *step* through articles by some increment. So, you should only issue N requests per day, where N is the total number of articles seen by users in a day; not all 500. If users only viewed page 1 &amp; 2, and you were only showing 20 results per page, then that's 40 requests (which you can cache; or not...). I imagine you may actually get rate limited for making that many calls, so caching will be good. All that said, **if** you really need all 500+ calls (maybe to sort by highest shared), I'd be really surprised if you don't get rate limited. In that case, yeah I would probably start early in the morning and issue as many calls as you can before your users start hitting your site. A JSON file can work, but if this is all your server is doing, storing the data in memory would be better. You could just update the storage object in memory and write it out to a file on every update (with JSON). This way, if your server goes down, you could just read today's file in to restore. I can't imagine 500-2500 records in memory is going to be a big footprint on your server.
Yes, I do. Anyone tech savvy reading it will see it as an exaggeration. Besides, your résumé is already good enough to at least get a phone interview with most companies. A foot in the door is all you need. If you're good, they'll hire you. 
Your comment is totally unconstructive.
Ahh, OK. I now tried in Firefox and seem to get a more consistent result. 
Probably? So, you don't even sure? Then how it's a *fact*?
Sweet. I just use [JSON formatter](https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en) chrome extension
I wanted compare WebRTC / JavaScript client side video encoding/decoding to other solutions. 
In firefox you get the exact same thing, but the console function output is outputted first before your codes console output is written. So the 10 or 'duplicate' 9 are at the top of your output. 
I am specifically talking about [getStats()](http://w3c.github.io/webrtc-pc/#widl-RTCPeerConnection-getStats-void-MediaStreamTrack-selector-RTCStatsCallback-successCallback-RTCPeerConnectionErrorCallback-failureCallback) which can be done against a peerConnection object. There are many examples of getting the stats in javascript but [here is a specific one](https://github.com/webrtc/samples/blob/f22ec717ed7193250eb05e434cc7fff08355221c/src/content/peerconnection/constraints/js/main.js#L194)
I was reading a few threads on stackoverflow earlier but it was mostly going over my head, I have a very basic programming background. How would I go about using an API?
What does it mean to be "a leader in the web component space"? I don't see how is this different from just using Angular (preferably Angular 2.0) where you can create your own components. 
The url for the facebook graph API explorer: https://developers.facebook.com/tools/explorer/ There is plenty of documentation. You can query different endpoints by typing in different urls into the query. You could try stuff like `/me` or, per your question, `/me/friends`. After you are able to get your data in the debug message area successfully, you can click on the "Get code" button on the lower right to get code examples for a few languages, namely javascript and cURL. 
I'm not trying to knock on you, but your point isn't very really clear. For example, Angular components can also "exist entirely defined in javascript". I'm trying to understand your vision and goal with this project, but it just seems like you're recreating what's already available.
Tree shaking [1] cannot come soon enough. [1] http://www.2ality.com/2015/12/webpack-tree-shaking.html
You seem to be using a lot of custom void elements (self-closing tags) but AFAIK those aren't allowed in the HTML spec nor in the web components spec. Only these elements are allowed as void elements: `area, base, br, col, embed, hr, img, input, keygen, link, menuitem, meta, param, source, track, wbr`
Wait, why does the console output anything at all? while statements don't evaluate to anything, so I'd expect undefined. What exactly is the console printing here?
Its a special folder only under certain conditions, which are not valid universally. A linter (as an abstract JS validation tool) should not take a preference here. There exists configurable .eslintignore mechanism for that purpose. Why a linter should enforce what should I edit and what not? Its not a linter's job.
&gt; you should never need to edit files in there If it contains files that are part of project I'm working on, then I want to be able to edit them. My current workflow is simple and does not require `npm link`: I have project "A", that contains npm module "B". That module is deployed as a git submodule of project A's repository. And yes, it resides in `node_modules` folder, just like any other npm module. Do you know how git submodules work? It is convenient thing when you work on multiple projects from different repositories and want to deploy all shit together.
Totally possible. If all you care about is a JSON file you can read from you could just do a cron job, a series of curls to the target urls, output the results somewhere you care about.
So I've figured out how to use graph API, and learned that you can only get a friend count for people who have given permission to graph API. There must be an easy way to do this. The friends list is visible, I could literally count every name if I wanted to.
It's possible to create a library which allows a developer to develop in a declarative manner when the underlying implementation is imperative. This is actually the basis of the Virtual DOM in React, you can develop declaratively which then gets mapped to a set of ultimately imperative instructions in an efficient manner. In fact you can use D3 to use functional/declarative paradigms which is one of the reasons it's so powerful. Look up the Enter-Update-Exit patterns on D3 which will give you a good basis for this approach. All things considered, it's true the naive approach would not work for the exact reasons you stated - thankfully we are a bit more resourceful than that :). The Benefits of a declarative approach are worth the extra layer of abstraction on-top of something which is imperative at core. The key is to push side effects to the edges, as stated by the creator of redux.
Some good ideas! Thanks
And, in general, I share your motivation and thoughts about why you developed it, why you think it has a place in addition to require.js and that native modules are not yet ready for the browser ;)
Almost every module in NPM is sourced on github, so you can fork and reference your github repo... for that matter, you can reference any git repo you can access via http(s) or ssh.
If you'd write an UWP application with JavaScript you can use the Windows APIs to access the file system. Maybe you could even replace the `.bat` file.
I understand that it's generally a bad idea, but couldn't there be a setting to allow this only for local files within specific folders? or per file?
Of course it solves the problem. &gt; all it does is creates a symlink Which is good, because that's all you need. 1. Put `my_app` in a folder (eg, `~/code/my_app/index.js`). 2. Put `my_lib` in a folder (eg, `~/code/my_lib/index.js`). 3. Run `npm link` in the `my_lib` folder. 4. Run `npm link my_lib` in the `my_app` folder Boom, done. Now every tool that relies on you following npm's rules (and it's way more than just `eslint`), will work correctly, `npm publish` and `npm install` will work, etc.
ActiveX and old old IE could do that. But just use local server, it will be easier.
Cool changes! Thanks
Yes, it's great, but I also wanted to be able to write some JSON transformation code in the browser.
You want to generate an AST and crawl through that to get what you need. See this site for a demo of how that would work http://astexplorer.net/ which uses acorn https://github.com/ternjs/acorn 
It does not solve the problem. Regardless of having a symlink or not, eslint refuses to run on files residing inside node_modules. I checked that. So if I open `my_app` in Sublime, I don't get `my_lib` files linted when I edit them. You see? You tell me to have a two separate Sublime windows, one for `my_app` and one for `my_lib`? No, I want to see everything in a single workspace. Even if that worked, it's far more complex than my current workflow. I don't have to maintain separate folders linked via some special npm command. I just do `git clone --recursive` and have all my shit ready. And I don't need to write a documentation on how to deploy a project to be able to edit it as a whole. When you work in a team, simplicity matters.
https://www.devside.net/wamp-server/running-exe-and-batch-files-as-cgi-scripts-in-apache-under-windows 
I'm not seeing how they're similar.
same here x
You're thinking about this wrong. Your client side code should hit an API (server side) that executes something on that system, like your scripts.
Haha just what I thought.
Thank you!
I have another question, does anyone have any idea why Rob left Angular 2? He said Angular 2 was going a "different direction", I can see that. But what specifically was this direction?
While [it is possible to record video with JS](https://github.com/muaz-khan/WebRTC-Experiment/tree/master/RecordRTC), it isn't exactly pretty ([webm's are a bit prettier if all you need is to record a canvas](https://github.com/antimatter15/whammy)). A much simpler, more performant and more usable solution is to just use a desktop recorder.
Look up any socket.io tutorial. Write a small Node program to execute the media centre stuff. Then send Socket.io events from the browser to that Node program.
Is This going to be recorded? 
This is pretty nice and simple code IMO. No semicolons. https://github.com/riot/riot
Guessing Reddit auto filtered what it thought were email addresses but that format is meant to specify (package name)@(version). You may have seen upgrade instructions to `npm install npm@latest` to upgrade npm. It's just a way of specifying a package version to install.
&gt; no semicolons ew
https://github.com/jquery/jquery
If you're looking for comment porn, check out https://github.com/thejameskyle/the-super-tiny-compiler
I was actually thinking about this repo when I posted this post. Awesome stuff!
I personally use them, but code without semicolons looks so clean... 
it just looks incomplete to me you can't quickly tell if a statement continues on the next line or not
If you want to have information about scoping etc, the already mentioned acornjs is not going to be enough, since it just provides the static AST tree, I think. [Babel plugins](http://babeljs.io/) receive information about scoping and the ability to introduce new vars etc.
Even 'co-author' would be better than just 'author', as it doesn't imply you did it alone. IMO, you should use 'co-author' if you were part of the initial creation/architecting, and 'contributor' if you helped afterwards... Though if you did significant architecting afterwards, you could still honestly claim 'co-author'. And of course, if you designed and created something yourself, just 'author' or 'creator' is appropriate then.
So what polyfill should I use to make them work with most browsers?
It's almost like punctuation at the end of a sentence.
Are call and apply still considered voodoo?
As a relative beginner, this was great. Thanks!
I bet he's a CF fan :D
I maybe talking out of my ass, but the most common thing I see in introductions is usually an example of a normal situation approached with vanilla language and then how using a framework solves it magically.
try something like this: describe('coffee machine', function() { var myService; var anotherService; var coffeeController; beforeEach(module('my.module', 'another.module')); //load up the modules beforeEach(inject(function(_myService_, _anotherService_, $controller) { //inject services for testing and mocking myService = _myService_; anotherService = _anotherService_; spyOn(anotherService, 'makeCoffee').and.returnValue('with milk?'); coffeeController = $controller('coffeeController', {coffeeOptions: {hot: true}}); }); it('should make coffee', function() { expect(myService.coffeeWithMilk()).toBe('delicious'); expect(anotherService.makeCoffee).toHaveBeenCalled(); }); });
Using`Array.prototype.slice` and `call` to slice array-like objects is very common and there is nothing wrong with it. There's no reason to avoid `call`. There's just no reason to write a function to do this when you can get the same result using `call` on a native prototype method.
I don't know if I'd call it voodoo, but the first line is not useful (`slice` is used exactly once, meaning that assigning it to a variable takes more characters to make things less obvious) and the second is not clear at a glance why it's necessary. In fact, I have a solid informed guess as to why that line is there, but I'm not 100% sure. It could be a lot more clear if it was written in a less "clever" way or at least had a *comment* there explaining why they're using slice with the only argument being a zero (which *on its surface* does nothing). Of note, the code in question has been changed at least slightly since sime copied and pasted, but it's still written in a non-obvious way with no comment.
No, they aren't. They are perfectly valid ways to call methods within a new scope. They are confusing at first but they are often very useful. Don't listen to people who say they are magic or convoluted. They just take a little more time to grasp.
Good question. I do like React. Had polymer offered up easy capabilities for expressions I would be less inclined to write my own library, but React really does do a good job at syncing data and Dom, so I used it. I struggle with answering why people should use web components over React, but I think web components solves some major issues of modularity and reuse in a standards based way. I wrote an article to elaborate my ideas a bit: https://medium.com/@richardanaya/web-components-why-you-should-take-a-second-look-548c9966fafa
https://github.com/code-kotis/barcode-scanner a progressivewebapp
Thank you, you are correct, I always forget that.
What is CF?
Web Components are a specific W3C spec whereas angular, react, etc are simply architecturally built on an idea of "components".
You are missing the point. Expecting people to remember to use call or apply at every call site is the reason why it is a bad idea to code like this.
fair point. I don't think I've ever seen a good example of what you describe though (certainly not the ones mentioned here). The language itself is almost by design anti-clean code IMO. But I'm happy to be proven wrong... 
Thanks for your perspective. By "indirect", I mean because polymer doesn't have expressions, I find myself having to define my logic and the use of my logic in two places all the time. Maybe it shouldn't be such a big deal to me, but I love the conciseness/expressiveness of many of the things I'm doing in WebBlock, a lot more logic can be put in a render function with JSX rather than spread across computed properties and Dom.
It's so prevent "local" variables leaking into the global context by using a function closure. It's not necessary anymore if ES6 modules are used.
Very good. I still think the language itself unfortunately prevents you from fully achieving your readability goal. 
Have you read Clean Code? 
People who argue over semicolons are fucking cultists 
maybe you can find that on npmjs.com or github using node, use either phantomjs or some image writer library, dump each as png, use node-imagemagick to make a gif or shell cmd to ffmpeg (?) to make a webm from the frames
Then we are in agreement.
r/atwoodslaw
I think he meant more like: var a, b, c, d; which is fine for minifier to do but imo is more fragile to work with and harder to read than: var a; var b; var c; var d; For example here they are going off the deep-end with it: https://github.com/jquery/jquery/blob/master/src/callbacks.js#L67
Hmm, could you please give me an example of this functionality? Right now, I tried this: http://pastebin.com/TDCjxQMx swapping out the piece of code and the original code doesn't work. Please help...?
You're right, thought it was used to deal with arguments. Which I expect people to know how.
I think you've earned the downvotes not because you came to a javascript thread to bash javascript, but because while doing so you also contributed nothing to the conversation.
No comments, only JSDoc summaries of what things are supposed to do, and human readable variable/function names. Here's an example. https://github.com/spaceribs/Writ/blob/master/server/users/users.ctrl.js#L94
But why couldn't they use a separate `var` keyword on each variable? That would be more readible, IMHO, than only using `var` once and having a big huge list.
I prefer abstracting my callbacks away via generators but this gets a lot easier with async functions. But yea, I was curious what he was basing his opinion on
So what are you basing your statement on? 
[d3.js](https://d3js.org/) Maybe you can look at this, from what i read i think it is used for create beautiful data visualization. I am sorry if it isn't because i never used it personally yet.
Github repository: https://github.com/ahvonenj/peli1 The game uses [Pixi.js](http://www.pixijs.com/) for graphics, my own interpolation library [lerppu](https://github.com/ahvonenj/lerppu.js) for interpolations, [Victor.js](http://victorjs.org/) for some vector calculations and [chance.js](http://chancejs.com/) for random number generation. For the game loop I used this gist I have been polishing for a while now: https://gist.github.com/ahvonenj/847668032c77c0efa87c Background music: https://www.youtube.com/watch?v=SGYOliPfnGA Sound effects made with: http://www.bfxr.net/ Taking the game this far took me couple of hours. I started from scratch, but used some of my old repositories code for quick reference.
Some people just want a bandwagon to jump on.
not GP, but having read it, I'm not sure how JS _necessarily_ can't be clean.
Yeah I noticed something like that as well. I will revisit how the nodes move and stuff to make it a little more interesting.
http://stackoverflow.com/questions/9130422/how-long-do-browsers-cache-http-301s This should be helpful
Some of that code is very good. But the function is 60 lines long. It uses JSDoc to explain things that can be made clear through variable naming (and types). In a better language it would be a constructor, or a method in a factory class.
my 2 favorites are [DIY.js](http://diy.lab.io/) (source code is available on github) and [ParisHilton.js](https://github.com/fbrandel/ParisHilton.js).
Closure Library https://github.com/google/closure-library. If you browse the source you'll see some of the most robust, well-structured, and comprehensive JS code out there. It gets a bad rap because, at a glance, it looks verbose and intimidating to your "typical" web dev. That's because it's inherently designed to be compiled by the Closure Compiler, which does dead code elimination, type checking, and advanced optimizations. This means the code doesn't have to be terse in its uncompiled state. Maintainability, scalability, and a solid API takes precedence over trying to create super overloaded APIs (eg jquery) or hand optimizing raw source that some libraries do. 
I like the idea of it!
Not mine.
It has its flaws. Whatever. That doesn't take the beautiful from the work some coders do. 
Minifiers don't do that automatically?
Just looking over your index.html. you set a variable "URL" to a video that you already have linked to from your Google Doc. Did you mean for that to be your public URL for the Google Doc and then your httpGetAsync call that url instead of hard coding yours?
Woah, why the downvotes?
I made it harder! :^) Added overkill yellow bombs and now when the white circles first spawn, they wander to mouse position first.
can you please elaborate?
Oh wow, good catch! 
I also foolishly assumed you have a sense of humour 
The 1.5 update always seems to be better than I expected. The new component syntax is great, and being able to never use `$scope` ever again is even better.
It must have something to do with how I am getting the coordinates from the client then. I am sending them over to the server with: function sendToServer(xCoor, yCoor){ var coorToSend = {x: xCoor, y: yCoor t: token}; socket.emit("sendIt", coorToSend); } Then on the server I am doing this: socket.on("sendIt", function(data){ var x = data.x, y = data.y, t = data.t; if(isOCaptured(x,y)===true){ console.log('an O has been captured'); }
https://jsfiddle.net/Amidi/s3gnx3rL/10/
&gt; into PHP Im sorry for your childhood.
sorry but your way of thinking makes me sad. JS has always been filled with "trendsetters" who bounce between "best practice" and "considered harmful" on pretty trivial things. it's how we lost extending native protos, for instance. frameworks like Prototype and MooTools taught me more about JS than anything else. deeper understanding and study of js should be encouraged, not stomped upon. and if you consider use of call/apply a bad practice, I am lost for words. for example, a modern day JS dev needs to know at least 3 different ways to convert arguments to an array. but back when that lib was written, it was one. there was no destructuring and default values. etc. 
Coffeescript (while technically not javascript) has some nice bits in it. e.g. https://github.com/jashkenas/coffeescript/blob/master/src/grammar.coffee
Our definitions of fun must be totally different.
Still, many functions are still slower than their native counterparts
Added tutorial :^)
Will do. Thanks for the input!
Another option would be to use https://github.com/jquery/esprima to perform the parsing and AST building for you. I'm not familiar with the AST it produces but even if it does not include scoping information, you can extract it yourself from the AST or maybe even find a project that does it for you as its AST's structure is a standard. https://github.com/estree/estree 
I concur. There's some things I don't like about it (no function header comment blocks even if to just separate them visually a bit, and actually a little TOO much whitespace in some spots) but overall this is better than most. 
Seriously with the performance argument? 99.999% of the time slow app performance is because of repaints or the browser doing some other kind of layout. Using `_.map([1,2,3])` vs `[1,2,3].map()` is *never* going to be the root of your performance issues. If it came down to that you would be looping over millions of items and in that case you're clearly doing something wrong.
While it is true, you cannot always prevent paints, but any slowdown that can be prevented, is one. Plus it needs to be loaded too. But still. When you look at certain functions, its still better to use native as there isn't a lot of difference anyways. Anyways, people need to think better about what dependencies they really need. I see people integrating underscore when they seriously don't need it. Just like with jQuery its better if people learn the native code instead of relying on these kinds of aids. Plus with a lot of uglifiers it doesn't really help much if it cant be compressed/replaced.
ES5 supports getter/setter properties. And you could define them before that as well (ignoring IE)
Looks good. A very minor issue: If a string contains a newline an error will be printed to the console but the UI itself will cease refreshing. 
After spending some time debugging, it became apparent that isOCaptured() only returns true if the X's are first placed on each side, then O moves in between. 
If `sum` computes something on demand, I'd call it `computeSum`. If it returns the state of `myInstance` or returns a slightly modified version of the state (e.g. for easier printing) I'd make it a getter.
Amusingly, the [lodash map is actually faster than the native map](https://jsperf.com/native-map-vs-lodash-map) in some circumstances (7,931 lodash versus 269 native here). I totally agree with you. It's even worse here, as javascript is a funny place where even the old arguments about "native is faster" doesn't even hold water, sometimes. Micro-optimizations are truly pointless without measuring them first. 
Not to take away from your main point, but `_.reduceRight` isn't a good example of clever composition. What it's delegating to is a factory created specifically for `_.reduceRight` and `_.reduceLeft`, not some other part of underscore.
The functions are so small I generally find them "self-documenting" where any comments would be redundant (again, assuming you have a knowledge of 3d/webgl - the code won't teach you webgl, that's for sure!). I only ever get the urge to write 3d stuff once a year or so (and rarely delve too deep into it) but each time I go back the codebase seems to get more simple and clear year after year (after year after year...): they're doing an amazing job of maintaining it!
Fair point. A better example is [`_.pluck`](http://underscorejs.org/docs/underscore.html#section-34)
myInstance.sum() implies to me that you are summing something on the class... if there is a private variable called _sum which you need to access in a public setting, getSum() would just return _sum. You should only be using getters to get values already set on a class, rather than doing any form of computation. If you are needing to compute something then computeSum() should be called at some point, and then later, getSum() should be called to get the value. 
I think an important word there is *functions*. OOP orthodoxy would disagree and states we should be composing opinionated and self-contained *objects*. It's then a game of trying to organize all of those objects and their subclasses to do what you want. There's also a good deal of programmers who have disdain for needless abstractions, so the whole idea of writing as much as your code base as possible to be as small and unopinionated as possible would be unappealing. So I don't think I agree all programming amounts to making things small and reusable. I think it's a very specific philosophy that you have intentionally and thoughtfully use. e: accidentally a word
Wow i didn't even know i was being downvoted. Pathetic really. Isn't this topic all about opinions anyway?
I'm so sick of blanket statements like this. I spend a ton of my time devoted to writing performant and maintainable React/ES6 code and I couldn't be happier about it. I would argue the people you are talking about are those who have JS thrusted on them due to Web dev and just want it to be over. They then write unmaintainable spaghetti code and blame JS for their crappy code. The people who actually get deep into JS acknowledge it's shortcomings but have since learned how to work around them to produce clean and performant code. 
To be fair typing done right is really nice. I'm not talking C# or Java. I'm talking how functional languages use typing and nomads for control flow. They can guareentee no run time errors which is really cool. But if I can't have that benefit, then I don't want types. 
Which is being phased out since it's just a fancy name for .map 
&gt;[this jquery plugin] hasn't been updated (or will be) in a while that's because everybody's ditched jquery for react you should give it a try! react is pretty awesome
ha, nice... i feel like there should be a "warning" period for the yellow bombs before they explode - otherwise it feels a bit unfair just getting squished from a yellow bomb from offscreen. And something to collect to fight back! Oh, also, "High score" and a way to restart when you die xD Then go and watch [Juice it or lose it](https://www.youtube.com/watch?v=Fy0aCDmgnxg) (three times) then implement some stuff from that - and you're in business! 
Exactly. Comments also allow you, when well written, to get inside the head of the author. It's less about telling me what the code is doing... the code itself tells me that if it's written decently... but why you did it this way, how you expected it to be used, how it works with other functions, any gotchas or tricks that might be present and why... that's all stuff you can't get from code alone no matter how well-written and "self-documenting" (a phrase I personally despise, but whatever) it is. Comments also help to separate thoughts. I personally use comments as sort of markers between steps in a larger procedure. You can actually read my comments in isolation and understand the flow (ostensibly) of the algorithm in play. Each comment separates a unique step or thought of that algorithm. It really helps people comprehend what's going on at a higher level than the code alone - and frequently that person is me months or years later. 
You really think so? I opened a random file and it's probably some of the uglier code I've seen on Github. What do you find beautiful about their codebase? https://github.com/jquery/jquery/blob/master/src/queue.js#L28-L72
There is a small warning period when they turn orange and shake. I can increase it a bit though. I also just added "growable" shield to left click, which lets you run over white nodes, but your score gets wrecked based on the size of the shield. You can also now stand in the yellow bombs for a score multiplier, but remember to go out before they blow!
You could probably fetch the html from the link with an XMLHttpRequest (https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/HTML_in_XMLHttpRequest), then parse the html that you fetch.
I'll look into that, thank you very much man. I was just wondering if there was a simple function I could make, but it makes sense that such as task needs a more complex solution. Thank you very much!
Oh. Not sure how to make it so that it checks if there are already two O's in there, then if my next move is an X on the outside of both O's the function returns true.
that sounds awesome. wish I was a super-smart folk. my JS is ugly as balls.
One issue with any "abstraction" is that if it is not user-friendly then it's basically an "indirection". Unlike Java DI containers which are class/type based -- meaning you are one click away from the implementation with any IDE, allowing them to do the Inversion job of IoC perfectly -- JavaScript DI containers are namespace based, which means they have more in common to a pub/sub than IoC containers. Add on the fact that Angular implementation 1) does name remapping 2) doesn't easily allow introspection, makes debugging difficult. 
[Looks more like golfing to me](https://raw.githubusercontent.com/mame/quine-relay/master/QR.rb)
i had used regular expressions once to find matches in a grid-based game. probably not as performant of an approach, but for science, something like: `/XOX/.test(gameBoard[row].join(''))`
Answer this question: &gt; Why are SQL injections bad? Once you can, you'll have the ability to answer your own question.
Is there a good JavaScript unit testing framework out there?
I'm not sure I agree with that. How do you feel about `Array.length`? The fact that it's probably cached doesn't really mean that it's a value already set on the class, because what it represents is a computation -- counting all records in an array. So by your logic, it should be `getLength()`. 
I use mocha pretty much exclusively. If you've never written unit tests before - you may need to rethink how you structure (i.e. decouple) your code to make it more testable. I've been working on a checkers game - actually quite similar to yours, using sockets and the like for the two players to interact. In mine, I have a Board class that has a move function that accepts a series of moves. Board as a `state` object that has all the current pieces on the board. The function checks stuff against `this.state` and in the unit tests I provide that state to check against things (like doing a move from 0,0 to 0,-1 is invalid)
stuff like get_method('https://www.badurl.com/?cookie=' +document.cookie)
If it returns a primitive and feels qualitative then I like a getter. If it's imperative, has side effects, or returns an object[, promise, fn] then a method.
Most computer systems are designed with the idea of immutability of running code in mind. This means once the program is running, it cannot and should not be changed. If you want to change its behavior, modify the data it has. This applies to programming languages, frameworks, and applications. This is for a number of reasons: * security * stability * predictability * maintainability * inter-operability * re-usability `eval` and `Function` constructor are basically tools that allow you to break that convention. Now for normal applications, you should pretty much never do this for half the reasons listed above. However there are special applications where you would need to use it, mostly tools for other developers to use: * a REPL (e.g Node or Chrome dev console) * a basic logic-ful template (e.g. underscore template, micro template) * a module loader (e.g. Webpack) * a runtime optimizing code (e.g. Lodash) 
Is there a way to do this to check vertical and diagonal matches too?
Assigning `Array.prototype.slice` to a random variable is still bad though, how is someone supposed to know that you need to use call when it's simply called `slice`? There's no way to normally invoke it either, so it makes no sense to assign it to a variable.
What have you tried? This sub will generally meet you half way if you show us we're not just doing all of the work for you.
If the items your are searching are related to amazon only you can use their api:http://docs.aws.amazon.com/AWSECommerceService/latest/DG/Iteme. One of their examples: http://docs.aws.amazon.com/AWSECommerceService/latest/DG/ItemSearch.html#ItemSearch-resp. The result is returned as xml ,which then you can parse.
Yeah, I tend to use this kind of style as well, though to a less severe extent; this guy is *really* into it. But I always put a newline before my *return whatever;* statements, a newline after variable initialisation/setup, or between two sections of logic in-between that can be considered individual steps in the algorithm. On the one hand, it provides a nice way of highlighting that different sections do different stuff (e.g. variable initialisation, groups of variables, business logic). It's a bit like syntax highlighting but on a larger scale, using newlines. On the other hand, if your function doesn't make enough sense without it, it could be a sign that the function is doing too much stuff at once and should be broken up - or that you should just give in and finally switch over to proper, functional programming /s Three.js is pretty excessive though. Once you start doing stuff like this you need to think about how your code looks in a design/typographic sense, and sometimes there are better ways of doing it. E.g. the way blocks are spaced get count() { return this.array.length / this.itemSize; }, This is better tbh get count() { return this.array.length / this.itemSize; }, 
Might be the case for map, but other functions are in fact slower. The foreach is a good example.
I'm not 100% sure what's going on in the codebase with these two https://github.com/mbostock/d3/blob/master/src/core/noop.js https://github.com/mbostock/d3/blob/master/src/core/true.js But it must be interesting. Can't help feeling like this would have been nicer in coffeescript :)
Sidenote: I find it hard/impossible to really determine whether a codebase is beautiful if I don't know the full details of what it's doing. Like, with most of the suggestions in this thread, I can browse through the files and maybe the *style* is nice, or I can see that functions are decomposed properly, but understanding the nuances of the architecture - which is the ultimate reveal of how well the author has understood the problem domain and designed an elegant solution - takes a lot more time than a 5 minute click-through. Other than for really small codebases. This degree of comment overload is a bitch to write, but makes it way easier. I'd probably want my IDE to strip them out to actually work on the code though. Come to think of it, if your functions are long enough that you have to comment within the function, it's too damn long. Comments go at the beginning. Put citations if you really have to do it. E.g. for(;;) // [1] 
thanks, rikka94, I'll try that!
I attended one of Michael's talks on React. It was very well organized and I'm not surprised his code is structured similarly. Although, he is a bit brazen with the lack of semicolons! Seems particularly inappropriate for a talk, maybe less so for [a project on GitHub](https://github.com/mjackson/npm-http-server/blob/master/modules/index.js). Something else I noticed in the same file is the ES6 import aliasing of node core functions: ```import { parse as parseURL } from 'url'``` It's a small thing, but I wonder if `url.parse()` is even more readable, since it's a direct reflection of the API and would seem less like a project-specific function in the calling section of the code.
http://prntscr.com/anvxjo
your grid is a multidimensional array, that is arrays within arrays. if you want to transform `[row][column]` to `[column][row]`make a method 'asColumns': var gridColumns = []; for(i = 0; i &lt; gameBoard.length; i++) { gridColumns[i] = []; gameBoard.forEach(function(row) { gridColumns[i].push(row[i]); }); } return gridColumns; this function will return an array of columns. compare each of these columns to the regular expression XOX and OXO using `indexOf` instead of `test` so your function will tell you precisely where the capture is located. just one approach, more of a compact than a performant one, but it's neat.
Tried that and still received the same error. 
Everything TJ Holowaychuck codes seems really easy to read and elegant to me.
Glad to know it's something you would be interested in too! I'll work on that :) btw, by "super-smart" folks I mean open source developers that are well known in the community ^^
Honestly I find this really hard and time-consuming to read. Adding more comments doesn't necessarily make for better code. It's a balancing act.
Nothing will ever get me to agree that the brace should be on the line after the function declaration
rest api is a nice mechanism to handle management of resources. i.e. creating, updating and deleting *persistent* data but if your site consists solely of forms which takes input, perform computation and displays result. then you do not need persistent data or rest api. 
I'm not using it in production yet, but planning to. The big downsides at the moment are no built in support for web sockets and no server side rendering (although it's in progress). 
It really needs a quick 'What is Brunch?' added to the start of it, along with a few reasons why to use it rather than something such as Webpack. I can see that the Advanced guide does include these, but not having a short description at the top of does seem rather odd.
That's an awesome idea. Similar; is there anywhere that you can submit code for peer review for those unrelated to the project? 
Thanks for the feedback. RFC are mare initials, I understand the coincidence. The spider is very bare minimum, so it won't follow links automatically, the idea is to parse a page and push more tasks based on the content of the page. I am thinking about using promises in the next version, maybe something to follow links by default too.
GraphQL servers are an alternative to RESTful Apis and Relay just lets you to declaratively define what data you need from the server. The GraphQL endpoints can all sit behind an authentication wall just like REST though, so I don't think there are any inherit security weaknesses. Only downside I can see is that not many people have built GraphQL servers and there aren't any established conventions, so there might be a few fuck ups through human error.
Hahaha. Yeah, either way. I don't actually do it in js because... Well... Nobody does in js. 
&gt; The "standard library" is pretty limited. I disagree. Speaking of building blocks, it's quite complete. &gt; Sometimes you need utility functions. Yes, and I have a set of them used in all our projects. I'm pretty sure any experienced programmer has such a utility set. But it doesn't have to do anything with completeness of standard language/platform features. These functions just make things more convenient for me. But they aren't a replacement. If I lose my files with them, I can easily recreate them from scratch because I know how they are supposed to work. &gt; Lodash is a good example of a big collection of what are essentially language extensions - not an "abstraction layer"... etc Nope. Lodash doesn't introduce any new syntax or new platform APIs or concepts itself. It's just a large opinionated set of utility functions, not language extensions.
I don't know, I always see that as a low-fi literate program (which would likely be better with semi-literate programming support as in haskell), my "comment porn" is more along the lines of Xee's [PSD is not my favourite file format](https://bitbucket.org/WAHa_06x36/old-xee/src/fe1cec107972603523e67e7be29a83e493f5cac2/XeePhotoshopLoader.m?fileviewer=file-view-default#XeePhotoshopLoader.m-108) rant.
Has bind actually anything to do with currying, or I am completely lost in the woods?
Same here.
Modern browsers [are faster](https://jsperf.com/getter-setter) with accessing properties directly. The overuse of custom getters and setters will slow your application down, if you're working with large amounts of class instances. That's why React people are striving for stateless components, they do not require classes at all.
good point - I'm thinking more for user created classes though, in the system I work with, we don't have public variables on our classes.
You can use bind to partially apply, since it will return a function with arguments prepended. E.g var multiply = function (a, b) { return a * b; }; var times5 = multiply.bind(null, 5); times5(3); //15 
Yes, it can be used for currying. var add = function (a,b) { return a + b; }; var add2 = add.bind(null, 2); // first argument is the `this` value. console.log(add2(2)); // 4
&gt; **Frequently asked questions** &gt; Q. Why?
Even if I'll be downvoted into oblivion for that: Use vanilla JavaScript. No bloat, and you know what's happening in case something breaks.
That's not what I intended! Anything I can help you clear up?
Hmmm, I could see it as a fold/filter - how do they implement pluck in terms of map?
Ha, reading this comment first thing in the morning before coffee and I've decided I'm going to trial the Three.js style now - it's quicker (for me) to parse the blocks of functionality all spread out like that.
(a)pply = (a)rray (c)all = (c)omma separated
I just did get it after re-reading it, I always thought the context had to be an array with apply instead of the parameters. So actually it did help clear things up. One point on the formatting, on mobile it wraps midword which reads a bit awkward, perhaps disable word-wrap.
John Resig, the original author, was a big fan of the "new wave" band Devo from the 70s and early 80s, who wore funny red conical hats. So when he released jQuery in 2006, he based the jQuery logo on the Devo hat and called it new wave JavaScript. So, yeah, that tag line is really dated at this point. I wish they'd drop it. At this point "new wave" is not new in the slightest, or innovative.
Nearly every language has some method for dynamically reflecting/modifying themselves at runtime - it's a very powerful feature... but most don't give that power to arbitrary strings from users xD 
Good stuff. I will look into that - thanks for letting me know. 
This is `pluck`: _.pluck = function(obj, key) { return _.map(obj, _.property(key)); }; 
Plain JS solution Fiddle: https://jsfiddle.net/5rz9rbvz/6/ What you basically do, is the following: * give the HTML DOM element an ID so you can access it via Javascript. * take it's text and save it into a variable. * split the text into its characters. * make a function which makes a new HTML text with one letter surrounded by a span which gives the letter the color. * replace the HTML text with the new HTML. * The function calls itself with an increasing index every x amount of time to change the next letter.
The only JavaScript you have in that code is the `href='javascript:void(0);'` bit. I think that's an old way of saying `e.preventDefault();`. Regardless, we'll use it... Here, I wrote this to achieve what I think you're wanting... var subMenuA = document.getElementById("subMenuA"); var subMenu = document.getElementById("subMenu"); subMenuA.addEventListener("click", function() { if (subMenu.open) { subMenu.style.display = "none"; subMenu.open = false; } else { subMenu.style.display = "initial"; subMenu.open = true; } }); You can see it in action here: http://codepen.io/anon/pen/LNOVpq
When you post this link in Slack, you end up with this preview: Data Down Actions Up ember-cli addon that provides simple redux bindings for ember.js Might want to look at fixing that for blog posts to give a better overview of it, or at least not claim the link is just for your CLI addon.
The beauty of getters and setters is that it allows you to refactor a member of a class into a method (with side effects) without touching any of the call sites. My preferred pattern looks like this: MyClass.prototype.__get_name = function() { return this._name; }; MyClass.prototype.__set_name = function(value) { if (this._name == value) return; this._name = value; this.invalidate(); }; Object.defineProperties(MyClass.prototype, { name: { get: MyClass.prototype.__get_name, set: MyClass.prototype.__set_name } }); Because getters and setters are proper methods now, you can call them directly or override them in inherited classes. It's still a long way off from the elegance of ActionScript 3, though: public function get name():String { return _name; } public function set name(value:String):Void { if (_name == value) return; _name = value; invalidate(); }
a lot of the syntax will be familiar and you'll get up and running pretty quickly. But how it fundamentally works is about a 180 in a lot of ways. And that's a good thing. As long as you don't try to make it work like Java or C you'll be fine.
That was partly it! For some reason it didn't like using Edge as a browser, so switching to Firefox and fixing the directory fixed it! I'm having another problem though. I made some of the models myself in Blender, but when I import them they don't have colour? It's like they only have one colour but don't apply the other colours for the other faces, it's like it reads the first colour and assumes the entire model is that colour and stops. Is there a way to fix this?
&gt; Has some actually said JSPM of all things is difficult to configure? It's basically just npm install jspm and then jspm init. Your example is already using system js - that's most of the difficulty in configuration with jspm. Yeah, I don't think JSPM itself is hard to configure. System.js is hard to configure, and JSPM takes care of that for you. Having done this little project, I think if I'm going to use System.js, I'm just going to use JSPM as well. I don't want to be in the business of making manual changes to System.config. &gt; Also, I was a bit surprised about how much you were using gulp in a post talking about simplifying things, since it's one of those build tools that has itself a learning curve and adds complexity. If you're just bundling TS only, you can probably just set up your tsconfig to compile all of the typescript and just have to invoke tsc. Indeed, that's what the post you mentioned was an inspiration talks about doing. Fair point, I think gulp can probably be entirely eliminated from most of the workflow; not sure if it makes sense to entirely remove it from a real world app, but at least items like TypeScript, SASS, etc.
 var pHello = Array.from(document.querySelectorAll("p")).filter(a =&gt; a.textContent === "Hello"); var pH0TxtArr = pHello[0].textContent.split(""); var i = 0, int = setInterval( function() { pH0TxtArr[i] = "&lt;span style='color:green'&gt;" + pH0TxtArr[i] + "&lt;/span&gt;" pHello[0].innerHTML = pH0TxtArr.join(""); i++; if (i &gt; pHello[0].textContent.length - 1) { clearInterval(int); } }, 3000);
Ok, interesting. Sounds exciting, thanks for the response!
Not bad, just be prepared to actually learn it. Don't be fooled by apparent similarities.
Correct me if I'm wrong, but it looks like you're just adding templates to a dict. In which case, the API seems a little heavy, and I'd prefer something like templates = Dimples.addTemplate(key, template); Dimples.getTemplate(key).render(state);
Is anyone else not particularly excited for decorators? I've seen how libraries like angular use them and ... yeah, don't care for that much at all. As an aside note, the author mentions C# among the language with them, but C# does not have decorators. It has attributes. This may sound like splitting hairs, but attributes are *metadata-only* and do not have any meaningful impact on code of themselves, you have to use reflection to pull meaning out. Java does something similar. Python and JS' decorators are closer to *aspects* than much else. 
Does the "return" make a difference? I normally exclude it.
As impressed as I am that you've managed this, I'm horrified because the thought of allowing sloppy data to be parsed ... Ugh. Hopefully people will only ever use this during data creation to highlight issues and correct them, rather than at run-time and accept crazy user input. I can just imagine there will be cases where the user thinks one thing will happen, but you end up with another and no idea *why* it happens.
Good post on the topic, but I think having a _greeting_ function with the same name as the target function is a bit confusing. I might do something like this in order to demonstrate the difference between the outer scope's _this_ context and the `context` object as the called context: function sayHello(firstName, secondName) { console.log(`${this.greeting()} ${firstName} ${secondName}`); } function greeting() { return 'Hi'; } var context = { greeting() { return 'Hello'; } } const firstName = 'Alex'; const secondName = 'Perry'; sayHello(firstName, secondName); // Hi Alex Perry); sayHello.call(context, firstName, secondName); // Hello Alex Perry This way you avoid a stack overflow scenario of anyone experimenting around with the `.call` vs calling the function directly. Which is a nice exercise in understanding why that happens but is not the focus of the topic.
Web components are primarily concerned with making html as your interface to modular ui components. It's not a technology that lets you write components. That is exactly why I created WebBlock (a marriage of html as interface and virtual Dom as internal), and why these framework-of-the-day components are limited (They make it easy for people to write components, but not for distributing under a standards interface like html).
I don't think it'll allow you to make a request to another domain, will it?
The fault tolerance can be disabled. As you mentioned, it depends on the context If you are building a compiler then you should not allow invalid input. But what about building an editor\IDE? should not the capabilities of an editor such as: displaying syntax errors /outline / navigation / code assist/... / Work on "mostly valid" inputs too? 
Feel free to post an example along with the criticism. I just spat out a quick example.
Derp... I was thinking of `pick`. Thanks.
The `+` operator is overloaded and can either perform numeric addition or string concatenation, depending on the operand types. String concatenation is always performed if one or both operands are strings; the other is implicitly converted to a string if necessary. `'5' + 3` is therefore string concatenation, yielding `'53'`. That's not the case with the `-` operator, which is not overloaded in that way. It always performs numeric subtraction, coercing strings to numbers if necessary. Both operands have left-to-right associativity, so `a + b + c` is evaluated as `(a + b) + c` and likewise for subtraction. 
Get a copy of the "javascript the good parts" This shows you some cool things you can do with the language, and also shows you some of the syntactical deficiencies. If only Brendan had had another 10 days to fix the uglies. Spend time here understanding "scope" since it's VERY different than C/java. I would also spend some time understanding the event loop. The event loop is fundamental to javascript, but is a pretty foreign concept to java or c programming. (If you happened to program the mac back in the 80 and90s there are some similarities there). 
Do you have a typo in your `call` example? You show it being used with `Array.prototype.slice` but you use `.apply` instead of `.call`. The linked SO even uses `.call`.
The example is fine, it's just an example of partial application, not currying. You can't do currying with `Function#bind` (more generally automatic currying in JS would be difficult as all functions are semantically variable-arity).
"Angular isn't worth it" FTFY :-D
I've interviewed and hired many people, and those with CS or Applied Math degrees have been far and away more successful than self-taught, non-CS majors, or coding boot campers. Yes, there are good self-taught coders out there (I have a non-CS degree, and hope I'm pretty good :), but the right degree gives you a huge headstart out of the gate, especially finding that first entry-level job where you really learn how to work, but even after that people with a strong CS foundations tend to do better.
I'm using requireJS and the angular DI at the same time, because fuck it. 
How many languages give REPL access to the end-user? :) Browsers give end users access to the debugger, when most other languages you have to download that separately.
Functions like that are usually used for callbacks. The `true` function could be used as a default parameter for a filter function, for instance (resulting in no elements being removed). `noop` might be a default for an event handler. In practise it means you can invoke the callback without a null check first.
As far as i know those aren't paid as good as backend jobs unfortunately :'( But as master_rux said the syntay is kinda familiar. [ ](http://java-books.com)
I feel like I elaborated my points in the article, but i'll summarize. * Most people know HTML and not &lt;insert framework&gt; * Html is entirely capable as an asynchronous module loader * As programmers we want to reuse components as much as possible * Most frameworks have limited components, and we often turn to other frameworks creating a codebase of many mixed code idealogies * Isolating components behind HTML interface (i.e. web components) so we don't have to care if a component comes from React, Angular, etc. Let's us reused components without getting locked down by framework paradigms. All these frameworks (React, Angular, etc) that exist do not address these issues, and it is primarily why web components ( polymer, webblock, xtag, etc.) are so valuable. HTML is never going to go away and will always be the first thing most webdevs learn.
You should be able to append a new script tag to the head/body and it should work.
 &lt;div ng-repeat="..."&gt; &lt;component-1 ng-if="item.isType1"&gt;&lt;/component-1&gt; &lt;component-2 ng-if="item.isType2"&gt;&lt;/component-2&gt; &lt;/div&gt;
Yeah, that should work. I didn't think of that. Thanks! 
Thanks! What can you tell us about Koa2 and what you like about it?
X-Post referenced from /r/reactjs by /u/acemarke [Redux Ecosystem Links: A categorized list of Redux-related addons, libraries, and utilities](https://www.reddit.com/r/reactjs/comments/4dbrdi/redux_ecosystem_links_a_categorized_list_of/) ***** ^^I ^^am ^^a ^^bot ^^made ^^for ^^your ^^convenience ^^\(Especially ^^for ^^mobile ^^users). ^^P.S. ^^negative ^^comments ^^get ^^deleted. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Maybe! It's the reasoning I see talked about most often when we have a conversation about how most javascript programmers managed to agree on something like brace style, which is otherwise quite controversial.
I might be rude, but these are my honest opinions. &gt;Most people know HTML and not &lt;insert framework&gt; that also applies to web block. moreover aurelia and Vue allow templates to be written as html instead as string containing html, so they are certainly more html-like than webblock. &gt;Html is entirely capable as an asynchronous module loader what the? how many browsers support that? if loading is to be done via js library, then it is moot point whether config is written in html or js. though aurelia does use `&lt;require&gt;` for loading html and css. &gt;As programmers we want to reuse components as much as possible another moot point, components written in web block can not be used without web block. so components of react or vue are as reusable as web block component. &gt;Most frameworks have limited components, and we often turn to other frameworks creating a codebase of many mixed code idealogies which framework are you talking about? react, aurelia and vue allows pretty powerful components. &gt;Isolating components behind HTML interface (i.e. web components) so we don't have to care if a component comes from React, Angular, etc. Let's us reused components without getting locked down by framework paradigms. this makes me curious. how are components of web block different from those framework in this respect?
https://github.com/Schibsted-Tech-Polska/good-guy-http
Let's say we're talking about someone with the necessary rights to edit the HTML and JS on the page in question (or as an analog, DBA role on the database). What is the difference, *technologically* even, between `eval()` and the actual JS interpreter? The only one I can find is that `eval()` happens within the language itself (it is a meta-circular evaluator) and perhaps, even though it is physically and practically a script, that it has access to the privileges of another script? But then why is one script worse than another script, if the one is expected by the person developing the webpage to be Javascript (since eval'ing the e-mail address field is pointless unless you're [Hack This Site](http://hackthissite.org))? This also doesn't apply to SQL in the same way, since SQL injection is allowing someone who doesn't permission to run queries to do so.
you may also want to check https://github.com/tc39/ecma402/issues/47 - we're working on Intl.DurationFormat which will handle this scenarios in i18n-aware way :)
1. Currying is the process of transforming functions taking n arguments in a sequence of n functions taking 1 argument each. There are languages (mostly in the functional ML-derivative world) where the default function style is curried, so that the standard way of defining an n-argument function semantically defines a sequence of 1-argument functions (the syntax of both definition and application makes that convenient). A well known example is Haskell. Currying is orthogonal to but a convenient lead for: 2. Partial application, which consists of packaging a function and a subset k &gt; 0 of its arguments. Curried functions can trivially be partially applied[0] and partial application is a common idiom of languages with curried functions hence the confusion, but many languages have built-in or library support for partial application without having built-in currying support. Assuming a 2-argument function "fn": function curry(fn) { return a =&gt; (b =&gt; fn(a, b)) } whereas function partial1(fn, a) { return b =&gt; fn(a, b); } and function partial2(fn, a, b) { return () =&gt; fn(a, b); } Note that you can define `partial1` in (inconvenient) terms of `curry`: `curry(fn)(a)` but not `partial2`, at least not without wrapping it in a new thunk. `curry` also changes the calling conventions, you need one call operation for each parameter rather than one call operation for all of them, so where you'd have `partial0(fn)(a, b)` (`partial0` being the identity function, it just returns `fn` as-is) you have `curry(fn)(a)(b)`. [0] to an extent, you can't "partially apply" *all* parameters of curried functions (unless the language is lazy I guess)
You can't. However, you can use some external API such as http://mcapi.us
I agree with you, in my opinion decorators hide what's actually going on. But in some cases it really makes some code cleaner. Though, I probably won't use them often but I don't see an issue with them existing in JS.
How can an eval'd string come from anywhere? if the input you are looking for is an email address, you use that type of input field, because eval'ing it as JS code will give you a ReferenceError. If you're looking for input that is valid JS code, which you plan to evaluate, you use eval. It seems as simple as that; if there is something I am missing, please elaborate. EDIT: And even if there is no way to prevent eval from being used maliciously, why and how is using the `eval()` function different from any other use of javascript? It is an *interpreted* language, the whole point is that it is a regular string that the JS engine interprets and executes, whether that string is read from a file, received over HTTP, or input in an HTML form.
&gt; What is the difference, technologically even, between eval() and the actual JS interpreter? The only one I can find is that eval() Nothing. eval is basically what's called under the hood when compiling scripts. &gt; But then why is one script worse than another script, if the one is expected by the person developing the webpage to be Javascript (since eval'ing the e-mail address field is pointless unless you're Hack This Site)? It's the same problem [as SQL injection]. Javascript is just terribly more susceptible to the problem of injection. Yes, you can replace entire scripts, but that requires man-in-the-middle attack unless you're just &lt;script&gt;ing random, untrustworthy .js files around the web. But not all javascript files are web-based now. We have node.js which means the problem of injection can be a backend security issue. `eval` is bad because if you use it you rely on it. And when you add user input that compiles into functioning code that you can't "escape" without parsing the string itself as code (that is, use eval or implement a "safe" eval), you have a recipe for utter disaster. Or you could limit the input such that you wouldn't benefit from eval in the first place. Either way, eval is bad. Don't use it. 
Maybe its because `not.to.equal" doesn't exists...? You may want to provide a minimial not working example? Or read the introduction on unit tests here: https://docs.angularjs.org/guide/unit-testing And also try to write tests that will really help and guide you in case of a failing test: Test behaviour instead of structure (A failing test "Controller A not found in module B" probably has no value instead a test "Coffee with milk was not delicious" does tell what part of your app is broken even when you can't remember that such a behaviour was ever requested by the client). http://dannorth.net/introducing-bdd/ 
Awesome!
For better or worse, the term "context" means "the value of `this`." At least in every discussion of ES I have ever seen i.e., on [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)
I disagree with this. I think it adds a layer of complexity and performance that is unneeded and actually makes things more obscure. Doing an ng-repeat with ng-ifs in them makes it very explicit what you're trying to do. If this ng-repeat+ng-if pattern gets repeated more than once, then maybe it's worth putting into a component, otherwise I don't think that it's worth the indirection.
Eval itself is not bad. Passing potentially malicious code to eval is. The danger of malicious code is that it can access things it should not, such as credentials or APIs. If safe-eval blocks access to global scope and any node or electron api, it should be a good way to go. Otherwise you may want to read up on sandboxing iframes and/or web workers and double check that electron does not leak access to anything undesired into them. 
I like to return values where possible, but here, you can omit it, because nothing will ever use it.
JavaScript programming
You can create a new context in electron which doesn't have access to the node APIs. Eval'ing in this context will limit what any potentially malicious code can do from your app.
Good to hear that!
It's difficult, because most of the function words aren't the names of tools.
Fair enough. I just would argue that it's not "beautiful code." :P
&gt; The event loop is fundamental to javascript, but is a pretty foreign concept to java or c programming. (If you happened to program the mac back in the 80 and90s there are some similarities there). Excuse me, but isn't the event loop feature of DOM or node.js, not JavaScript itself? You can pretty much have event loop in C or Java, it's just question of some library or runtime environment. 
&gt; However, in reality, I’ve found that I don’t use them all that often I don't understand this, and I hear devs say this on here frequently. Does no one work on actual Javascript applications? I use these functions all the time, `bind()` especially. How else do you pass functions to promises or events or `forEach()` calls? Something like this is super common for me: var SomeClass = Whatever.extend({ someArray: [/* with stuff maybe */], someFunction: function() { this.someArray.forEach(function(el, i, arr) { // do stuff this.someOtherFunction(el.someProperty); }.bind(this)); }, someOtherFunction: function() { // stuff } }); Basically any time you change scope, but need your current context, you have to `bind()` your current `this` to a function to pass it.
Become familiar with prototypal inheritance and functions as first-class values; don't try to shoehorn the classical inheritance model from Java into this language, even though we do now have keywords like `class` and `extends` and `super`.
Here's a basic auto-curry function: var curry = (f, ...args) =&gt; (f.length &lt;= args.length) ? f(...args) : (...more) =&gt; curry(f, ...args, ...more); var add = curry( (x,y)=&gt;x+y ); Ideally though, you should use a library curry that is a bit more helpful with errors (i.e. defines a toString method on the curried functions that points back to the original function signature). I think this is going to be added to ramda's curry, for instance.
&gt; I need something for my Brunch. Mocha or Chai? Maybe some Broccoli. :D
Well, MDN explains to what 'this' refers in which context. That's important e.g. when the global context isn't provided by the browser.
But he's right on some points. JavaScript is a toy language cobbled together in 10 days and never intended for anything even remotely serious. By sheer accident it ended up as the language of the Internet. With bazillion of various band-aids in the forms of libraries, module formats, extensions, package managers, coding patterns etc. that add astounding amount of complexity to it. Everything is in constant fast flux, so newbies trying to learn it have freaking hard time picking up the bits that they need.
Do you refer to : var log = console.log.bind(console); ? Then sure it needs the console as 'full blown' object, because internally .log() is implemented using 'this'.
Who thought you'd React to a Mongoose byte like this? And who in the world lets one in to a Dojo?! Anyway, here take a Gulp... It's an Express cure for your swollen Node and fractured Backbone. It's not Vanilla, doesn't taste great, so try not to Grunt. I promise, it'll Git the job done. jQuery.
We can probably list all the the good use cases from other languages: * linter/compiler annotations (`@deprecated`, `@readonly`, `@notnull`) * decorator-based logging * DI/IoC container * coroutine The linter annotations require linter/compiler/editor support, given how well JSDoc is doing, that's a pretty hard sell. Decorator based logging and DI are entirely dependent on the project. Decorator-based coroutines is only slightly better than function-based coroutine, which is going to be superseded by `async`/`await` for majority of the use cases anyway. So hard sell. TypeScript is going to implement `@deprecated` and `readonly`, so we might see something there. 
Follow the advice here to understand the basic concepts of the language. Do not assume you know because the syntax is similar. Scope is very different, inheritance is very different, Javascript has its own set of commonly used patterns and paradigms and the sheer number of frameworks, libraries and tools that are used in production is absolutely mind boggling until you get a grasp of it. Be humble of the differences to anything you already know or it will end with tears and frustration. Understand the language and the execution environment before you get started with anything DOM, and when you eventually get to the DOM, learn the DOM and how to access it in plain Javascript before going into frameworks. I'd say starting with plain Javascript in Node would be an idea, learning the language, essentials such as the scope and event loop, where to find documentation, easing in the Node API, npm and modules and learn patterns for handling the essentials mentioned earlier. After that, you could either focus on continued development of backend in node, or progress to front end development which is a chunk in itself. For the backend, check out popular frameworks in the field your are interested in, make a project for yourself and remember to look for packages that might be useful. A key skill here is recognize what parts you should make yourself and where to trust others. There are surprisingly many even for edge cases, but not all of them are useful due to quality, performance or applicability. They might still be useful for learning how somebody else approached the problem you have. For the frontend, start with the DOM (as mentioned above), understand the differences between some of the popular frameworks and settle with one to focus on. Don't only use shortcuts provided by the framework, but understand what they do for you. From there you'd find out about patterns for that framework (because they tend to have their own), scaffolding, testing and build tools that are used. For both front and back end, expect to do the work yourself. Don't spend more time finding a package or plug-in than it would take you to make it yourself and do not shoe horn in complex third party libraries for simple solutions you could make yourself. Especially for front end, application size and performance is very important. And from there you'll be able to move to other frameworks, learning new tools, specific patterns, brand new whatsits and spectacular thingymajingies and progress faster because you do then understand not only what these bells and whistles do, but also how and why, which is what I personally find essential to be a good developer. Now, go. After the initial threshold, it is a quite spectacular environment to be working in with a lot of intelligent people making amazing, crazy, fantastic innovations on almost a daily basis. 
use an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), which retains the context of `this`. someFunction: () =&gt; { this.someArray.forEach(el =&gt; { // do stuff this.someOtherFunction(el.someProperty); }); }, edit: assuming you transpile to ES5 or don't need to support IE.
/u/Masklinn's explanation was good, but the intuitive way of thinking about it is, currying transforms a function so that it **it will automatically partially apply when you provide arguments**. So if you call it with fewer parameters than it takes, it will return the same function but with those parameters paritally applied. A code example might look like this: function multiply(a, b) { return a * b }; var curriedMultiply = curry(multiply); //Assuming you have a curry function defined somewhere... var times5 = curriedMultiply(5); times5(3); //15 curriedMultiply(3)(4); // 12
Warning ?
I don't write classes at all. I also very rarely need to use 'this'. I write modular code instead. I would probably write your example code like this: someArray: [/* with stuff maybe */]; someOtherFunction () { //stuff } module.exports = function () { someArray.forEach(function(el, i, arr) { someOtherFunction(el.someProperty); }); } 
it's heavily inspired by the work in react-redux - I wanted to see what ember looked like with a functional-ish take on components and the hbs helper you see just makes it simpler to get work done. Switching between the "hbs file" and the "js file" is painful and I totally understand why the react community likes JSX (one reason anyway - separation of tech isn't always sep of concerns done well)
oh wow thanks. this is great. But where do I put the JS code? do i put it after the HTML text or do i put it somewhere is on the website?
Because they're solely defining and returning function objects, these examples are significantly less readable using old-style functions, the behaviour is completely lost in keyword noise: function curry(fn) { return function (a) { return function (b) { return fn(a, b); }; }; }
I am not certain on this, but it sounds like a performance change for tabs that are running in the background. I found a somewhat similar reference here: http://www.ghacks.net/2015/09/04/finally-google-starts-optimizing-chromes-memory-consumption/ My bet would be that is what is happening - it may be worth doing some local performance tests to see if you can isolate it by shutting down other applications and seeing how long it takes before it freezes again. Just a guess though, good luck man!
It's much harder to reason `return (a,b)=&gt;fn(a,b)` because of confusing parenthesis. `(a,b)` could mean evaluate expression `a` then return `b`. With the function keyword, at least we know when a new statement is starting.
Ahh thanks man! 
In essence yeah that is what it does. But there is no "state", because I wouldn't know what rendering engine the user will be using. It's merely an easy way to get html templates accessible in your js apps. Purely just an array of strings. The reason for the "heavy" outputted code, is mainly for the scalability of it, i want to add basic interpolation down the track, you know to be able to pass a js object, then at the build phase send that object as locals to Jade. Just remember, this is a build step, so you'd never be accessing Dimples api directly. 
This is funny...
I'm glad someone mentioned this, I was getting quite confused about scope and functionality 
Sorry, definitely server side. The data is basically a task list. It would be considered relational I guess, which is why I don't really want to use JSON. You could have the same task on 5 different projects and each one would need a separate "status", for example.
Yeah, the user should be able to write to the file system and use networking, etc. I'm thinking that if I provide the user with the possibility to use fs, http, (basically the full Node.js API) they are themselves responsible for what they do with the tools. I just don't want them to be able to mess with the internals of the application itself. 
Everyone is going to migrate to AngularJS V2, just like everyone migrated to Python V3. Learn V1. You can build a lot of good stuff on V1, and it will be around for a very long time.
Angular 2 is just a reactjs ripoff. Learn react instead angular 2 will never be popular.
And of course the reddit retards have to ruin this. I'm guessing you're going to add some moderation. Nice project.
Have you investigated [knex.js](http://knexjs.org/) or [sequelize](http://docs.sequelizejs.com/en/latest/) in order to connect your node process to a database?
I meant myFunction.bind("a string") which won't work.
They always do. Probably need to change it so I decide which ones get sent. Shouldn't be too hard.
Yeah I figured they were being used in composition in some way. Good to know
[removed]
Needs some prettying up for mobile. Nice work though
Wasn't...wasn't idea from a thread on /r/programmerhumor a week earlier?
My mobile skills are suboptimal, but that is on the todo list. Thinking about porting it to react-native if it gets enough love.
My first commit on tindergarten was back in october so I doubt they coincide.
This is a really great way to ruin your tinder life.
Did you *only* see rubyists use it or something? Because it was *everywhere* for me a few years ago. I even heard [Brendan Eich](https://brendaneich.com/2011/01/harmony-of-my-dreams/) speaking quite positively of it for a while.
[Well not quite the same, but fairly close](https://www.reddit.com/r/ProgrammerHumor/comments/4cplpu/finally_met_a_programmer_on_tinder_she_was_100/d1kbd21). Excellent timing!
checkout the second param of .forEach(): this.someArray.forEach(function(el, i, arr) { this.someOtherFunction(el.someProperty); }, this);
Ah cool, wasn't aware of that. I just checked, and it looks like you can do this with Underscore as well. Still doesn't help for promises or event emitters, but that is super helpful. Thanks.
Great text. You said that forEach is concise twice here: &gt; for allows you to break out of the loop while forEach is cocise but doesn’t allow you to break out of the loop but is concise. 
I set up Koa2 about a month ago on a small project and found it and some of the modules for it were super immature. Async/Await is AWESOME. But I didnt feel things like koa-router 2 and some other packages were just ready. Sidenote: Do you know if there's an upgrade path between 1 and 2? I know in the middlewares in 1, everything is on `this` where as in 2 its on ctx. 
What's the ELI5 for this? I'm on a laptop, so I don't have swiping action.
Sad I missed this - I like vue and read the docs, I have yet to put something together.
This is awesome! You know what would be even better, if we had an IRC-like chat beneath the suggestions so people could discuss what to say next.
ELI5: Each card on the home page is an actual tinder match. Click on her, you will see 1) left: iphone window - actual conversations between tinder person and tindergarten 2) middle: chat window - suggest things you want to say based on the conversations, you can upvote and downvote current responses. When the timer hits 0, the highest voted message will be sent 3) right: most recent responses, which tinder match has responded to us most recently. I need to make a better FAQ page ;)
Great idea, I've been toying around with something like that. Have a queue basically for messages you want to send next, right?
No, just a chat so people could discuss. Although a queue is also a good idea... Anyway, for me I'm suggesting stuff and it's not coming up. And a lot of things seem to be being sent twice. 
Nice article. Thanks for posting.
Haha, good point. Does feel like the fish is playing pokemon 
The sad part of it is that ES6 took some inspiration from coffeescript. Or at least I assume it did. I think it should be viewed in the same light as jQuery, as a tool that helped advance the language. jQuery is also controversial to some extent now, but just because it's not as useful as it once was doesn't mean it wasn't influential or overall a good thing at the time it came out.
Check Reddit's formatting help to style your code. Won't read it otherwise.
lol, it´s work, thanks :)
Is that not functionally the same as just using eval?
&gt; I set up Koa2 about a month ago on a small project and found it and some of the modules for it were super immature. This is the reason that I continue to watch these things develop, but stick with Express for big projects. As backwards as that is, and as much as I hate supporting what's going on with Express, it's clearly the better choice simply because of the plugin support and wealth of documentation. Self plug: If you get into koa-router-2 and deal with subdomains, I wrote [a koa-router-2 plugin](https://www.npmjs.com/package/koa-router-domain) that deals with this.
Another idea is you could require a minimum ___ upvotes to send the message. Only be able to submit one message per ip address every 10 minutes... Maybe also only send a message every hour. And it seems to be sending multiple messages at least on our side it looks that way 
While transpiling is definitely the way to go for running koa2 in production, you can still get away with `babel-register` and `babel-polyfill`(for async) while developing. I wrote a [super-tiny koa2 example](https://github.com/ScottKaye/koa2-barebones-example) a few days ago which only goes over the absolute basics, but doesn't compare to OPs (btw saddq, love your stuff). If you're not a fan of including polyfills or transpiling, and you develop under Windows, you can actually run your application under [node-chakracore](https://github.com/nodejs/node-chakracore), which works flawlessly. The ChakraCore engine supports async/await (among more bleeding-edge stuff), so it might be fun to play around with.
https://xkcd.com/1333/
Then use regex to read all the replies match when you get someones phone number
Morgan just gave you her number! Let us know how it goes OP
Does it filter messages when people try to write gotindergarten.com
"I'm not crazy I'm just the internet."
on it chief
This is a valid point. However, the NW.js team has committed itself to releasing a new version with each new Chromium version. Version 0.13 took a long time but brought a lot of improvements (including some major ones like Chrome App support).
That's not what I said, sure there is a global context, just not always provided by a browser. At least we agree 'this' is not a context, instead it is defined by a context.
I that feel that in this case (comparing to jQuery) the syntax is enough to make it different. Some love it (me) and some hate it. Coffeescript allows you to skip parenthesis, brackets, semicolons, and use compact looping and comprehensions. I agree that this *can* make it harder to read or understand. However I also feel that if used with a standard style, and taking care to write it so it isn't all just a one liner (which you can do in a lot languages like python, and to some extent java) it is great. Sure it introduced features that ES6 is now using, but I personally love the simplicity of: console.log penguin.name for penguin in penguins when penguin.color is 'blue' 
Fixed. Thanks for pointing it out.
Learning JavaScript should be easy for you. Just keep in mind that it isn't Java; it's a much different monster.
Fixed. Thank you.
JavaScript is my first programming language and I was only a year in when I kicked off my personal project: https://github.com/prettydiff/prettydiff
The problem is that array's are zero based. The last item is the length of the array minus 1. It should be: for(var o = 0; o &lt; wordCount; o++) { avgWordLength = avgWordLength + splitt[o].length; } There was also something wrong with the way you were adding the length of item too. Another thing to note is that there was an extra parentheses in the console function console.log(superCounter("Count me in!")); Otherwise the function is solid. Though one thing that might be better is when you split the string, you can assume that the number of spaces in the string is equal to the number items in the array -1. 
Maybe you could add auto suggestion for package names, too. 
 o &lt; wordCount not o &lt;= wordCount //Array index start from 0 Amount of characters should be charCount - spaceCount imo and your charCount should not + 1. The rest should be ok. 
No, that's quite reasonable. With ES6, the spread operator replaces apply, arrow functions replace bind, and no one uses call often.
No, that's quite reasonable. With ES6, the spread operator replaces apply, arrow functions replace bind, and no one uses call often.
Think about this for a moment then: what would be the purpose of using eval if not to dynamically generate code based on some input? Somebody mentioned this in another comment: this is basically the same problem as SQL injection: https://xkcd.com/327/
[Image](http://imgs.xkcd.com/comics/exploits_of_a_mom.png) [Mobile](https://m.xkcd.com/327/) **Title:** Exploits of a Mom **Title-text:** Her daughter is named Help I'm trapped in a driver's license factory\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/327#Explanation) **Stats:** This comic has been referenced 1254 times, representing 1.1835% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d1qb0ge)
Some tips when posting: 1. Do not start post with PLEASE HELP ME, instead tell us your problem. 2. Tell us what is working and what is not. Following is the solution, I hope it helps you. :) I have paste and edited your code at [jsFiddle](https://jsfiddle.net/yxxcdpav/1/). To see the result you have to open the developer tools of yout browser and access the console tab. Following is the new code in case you dont like jsfiddle: var superCounter = function(text) { var spaceCount = 0; var wordCount = 0; var txtCount = text.length; var avgWordLength = 0; //Step 1: text counting, it works, see: // console.log(txtCount); &lt;-- it proves the text.length is working //Step 2: space count, it works too: for(var i = 0; i &lt;= txtCount; i++) { if(text.charAt(i) == " ") { spaceCount += 1; } } //Step 3: The counting words process works too: var splitt = text.split(" "); wordCount = splitt.length; //Step 4: the word's average length: for(var o = 0; o &lt; wordCount; o++) { avgWordLength = avgWordLength + (splitt[o].length); } avgWordLength = avgWordLength / wordCount; return ("The amount of Characters:" + txtCount + " Amount of spaces:" + spaceCount + " Amount of Words: " + wordCount + " Average Word Length: " + avgWordLength ); } console.log(superCounter("Count me ind!"));
I love arrow functions. My only challenge is not to over-use them. I wrap almost every callback in an arrow function that I pass through React props, for example. I suspect many of those are unnecessary.
If you make it a chrome extension is possible for someone at Google to fork your code and do something of the liking, just like they did for the bookmarks extension (even though that failed, that was done horrible)
Thanks for the suggestion! Definitely moving that to the top of the project's todo list :) IIRC there's no public api for searching modules by name, but there is an endpoint where you can get a huge json file with all the package names that I can then ETL into a service of my own. Having trouble finding it at the moment, anyone have the link? edit: found it warning: these files are _huge_ https://skimdb.npmjs.com/registry/_all_docs (25MB) https://registry.npmjs.com/-/all (150MB)
Thank you, this is exactly what I mean. If you eval user input, it had better be because you *want* users to input javascript and you want to execute that javascript in the current scope. If that is not the case, then you should not use eval. But saying that eval is just bad in general is like saying that, well, everything is bad because it can be used maliciously. If I am wrong, how?
 chartData.map(function(obj) { return Object.keys(obj).map(function(key) { return obj[key]; }); });
Typo, ‘function ()’ part is redundant here and it is just block after the implication i.e. ‘var sayHello = ()=&gt; { return 'Hello World'; };’ Thank you for pointing out.
Holy crap, thanks so much! I guess what I want to use is something like https://skimdb.npmjs.com/registry/_all_docs?startkey="query"&amp;limit=5 edit: it doesn't look like it's meant to be directly queried though, no 'Access-Control-Allow-Origin' header is present. edit: update It looks like that endpoint doesn't have CORS enabled https://github.com/npm/npm-registry-couchapp/issues/157 An npm staff said if it'd be okay to proxy if not doing a ton of traffic
How is Vue.js the real Angular 2 ? There was no real argumentation in the article other than that Vue reminded the author of Angular. Also TypeScript isn't a requirement to use React at all. 
It isn't a requirement to use Angular either, although there are some strong reasons to consider doing so. I'd guess the author of this article probably wouldn't benefit much on small for-fun projects but as a project and team grow larger, static analysis tools like Flow/TypeScript/Closure can be really useful.
Wow. these are great. I am impressed not only by the quality of the product, but also by creativity to think of something like this. Thank you so much for the sources. This is good motivator and inspiration. 
Wow. This is quite intense. It is really awesome that this is five year old project and still active. How were you able to get a project going active for this long? 
"I'm using gulp to hook up my minifiers, uglifiers, browserify, and babel. The project uses a mostly-pure functional style with lodash, js-defined-css through jss, and seamless-immutable for stores."
Nice one. Will come in handy for sure!
JSX is just syntactic sugar. It's definitely not a requirement. Your project is probably easier to read if you use it though. So I guess static analysis and JSX are related in that they both help with maintainability. The only additional barrier to entry for JSX is that you'll need a build tool in your pipeline to convert it to JavaScript- same with TypeScript. Neither adds _that_ much complexity, and since TypeScript (like Flow and Closure - and JSX for that matter) interops with vanilla JS, you can gradually wade into it if you choose. Maybe OP sees it as kind of a "straw that broke the camel's back" sort of thing.
&gt;Neither adds that much complexity how much complexity they add is very subjective. for a newbie, anything extra to learn is same as added complexity. &gt;JSX is just syntactic sugar. It's definitely not a requirement. I didn't say it was a requirement. I just said that typescript is as required for angualr as jsx is required for react. 
here https://developer.mozilla.org/en-US/docs/Games
&gt; yes, you can use angular 2 without typescript, but will you really do that? I ***will not*** be adopting Typescript to develop Angular 2 applications. No "javascript" framework should require you to adopt a transpiler. 
For ES6(ES2015) I find ["Understanding ECMAscript6"!](https://leanpub.com/understandinges6/read) to be very helpfull and thorough and it's free for online reading.
In practice, most newer ones do.
Chrome already allows you to middle-click links for a new tab. Assuming you have a middle mouse-button. **Edit** Many touchpads can be configured for two-finger-tap = middle-click
Looks cool! Thanks :)
My books are free online. Both are in-depth guides to JavaScript, for programmers. * ES5: http://speakingjs.com/es5/ * ES6: http://exploringjs.com/es6/
I started this in March 2009 and back then it was pretty bad. It started out as a collection of tools written by other people. Over time as defects kept emerging I eventually rewrote most of the components myself. I didn't learn to write language parsers over night. It took some practice and a lot of failure. I feel pretty well practiced at this point. I also realize that I am continuing to improve in API design, application architecture, and simplicity. Lessons learned the hard way: * Always keep things simple. If it isn't simple or requires some hacky convention it is probably wrong. * Always prefer predictability. I have had to learn to throw away hard fought algorithmic code for primitive things that look way less sophisticated. * Never be afraid to solve a problem directly. Many people writing in this language are absolutely afraid to write original code. I was once there too. Don't be that guy. * Solve problems early and at the lowest possible level. Avoided problems become a cancer that grows and festers under the hood. Some developers need abstractions over abstractions to solve really simple problems and ignore why the problem is there in the first place. So long as you remain afraid of the technology you will continue to suck and produce sucky applications. * Well written applications take a lot time and are probably rewritten a couple times with a lot of input and criticism. You have to fail a lot, but not be a quitter to produce something worthy of people's time.
Why not just [ chartData.map((data) =&gt; data.uniquekey.key1), chartData.map((data) =&gt; data.uniquekey.key2), chartData.map((data) =&gt; data.uniquekey.key3) ] If you want to have less declarative code, you can grab the keys from the first element: Object.keys(chartData[0].uniquekey).map((key) =&gt; chartData.map((data) =&gt; data.uniquekey[key]) ) However, this is not going to work if the objects have missing props. 
I was the same as you, but after having worked with it (jsx), the devil has setup shop in my soul.
You are welcome to use parts of my Asteroids clone if you find it helpful: https://github.com/Omnicrola/SpaceRocks No libraries, just vanilla js, uses a basic game update/render loop with an event messaging system. It was built using TDD, making use of Karma, Mocha+chai, and sinon. You can see it running here: http://omnicrola.com/projects/spacerocks/v1.0/
sounds like you're asking if you can use a database with node ... ?
Thanks. Glad it was helpful :)
I have cronjobs running to send things to tinder. I had to up the number of servers to support you bastards coming in from reddit, and its spawning 4 cron jobs, one for each server now. Will investigate when I get to work.
The vast majority of your matches are dudes. Is this because of the reddit idiots fucking up your matching algorithm somehow (I'm totally clueless about how Tinder does matching)
Wow. Thank you so much for a wonderful advice. Sometimes I do feel rather disappointed at myself for not being smart enough when I try to solve a problem. But I guess the point is to be patient and continue on. Thanks a lot. I gave me a lot to think and reflect. 
Transpiling for future JavaScript isn't quite the same as transpiling for TypeScript which will ALWAYS need transpiling.
Exactly. It was there just to demonstrate the idea, the example that you stated is there among the other examples.
I don't see how that changes the meaning of the sentence. Was it supposed to indicate sarcasm?
Even though the major version bump is due to the API change, I'm happy for them making this symbolic milestone. Grunt is as "production-ready" as a dev tool gets. I've been using it for years happily, and it has probably saved me countless of hours in automation.
Doesn't actually appear like there's any major changes here :/ It seems like 1.0.0 was only needed because of semver and upgrading a lot of out-of-date dependencies that had breaking changes. I'm sticking to gulp for now, I guess. 
the state of javascript tooling: obsolete before 1.0
Ah! Smart, to use it like that
It is quite the same today, however. Also, e.g. JSX is quite popular and those folks will be transpiling forever
* Can the content take an html string? * No samples triggered on a standard tooltip ? icon (no various triggering examples) * Does it work the same on mobile as desktop? * Browser support?
Can't you just use a Promises Polyfill to add support on Android? Such as: https://github.com/taylorhakes/promise-polyfill
I wonder how many people still care. I'd like to see statistics of Grunt vs. Gulp vs. webpack usage in new projects. Edit: below is a table of the most "popular" ones sorted by amount of stars on GitHub to date: Name | # of stars ----|----------------- [gulp](https://github.com/gulpjs/gulp) | 20,321 [webpack](https://github.com/webpack/webpack) | 13,853 [Grunt](https://github.com/gruntjs/grunt) | 10,684 [browserify](https://github.com/substack/node-browserify) | 9,486 [RequireJS](https://github.com/requirejs/requirejs) | 9,062 [Brunch](https://github.com/brunch/brunch) | 5,141 [Rollup](https://github.com/rollup/rollup) | 4,015 [jspm](https://github.com/jspm/jspm-cli) | 2,839 [Broccoli](https://github.com/broccolijs/broccoli) | 2,718 These are the ones I could recall of the top of my head that would qualify as module loaders/bundlers and/or task runners. Then there are of course a metric shit-ton of [Static Site Generators™](https://www.staticgen.com/) which *could* potentially serve a similar purpose depending on the project. Edit 2: Added Rollup. Thanks /u/jesstelford
Most everything in JavaScript it seems like... I'm just curious when/if the bubble pops.
I'm not sure what the context is, but the data structure looks pretty strange to me. If you are listing player stats, a flat array would be better: [ { name: 'John', scores: [ 2, 4, 1 ] }, ... ] Your solution only works when all the keys are in the right order. Here is another way: const keyMap = data.reduce((data, d) =&gt; { const firstKey = Object.keys(d)[0]; const items = d[firstKey]; Object.keys(items).map(itemKey =&gt; { if (!(itemKey in data)) data[itemKey] = []; data[itemKey].push(items[itemKey]); }); return data; }, {}); console.log(keyMap); //=&gt; { key2: [ n2, n2, n2 ], key1: [ n1, n1, n1 ], key3: [ n3, n3, n3 ] } Notice the output is an object, not an array. It makes no sense to use an array for the output since the keys are not guaranteed to be in any particular order. :)
Yea, agreed - game dev. concepts easily translate from language to language anyways. Often the difficulty is not with the language itself, but more building an engine that renders similar on all platforms/systems and is designed with OOP.
Can anyone ELI5 Grunt for me? 
When the real world bubble pops and companies can't afford to have oversized developer staff reinventing tooling &amp; frameworks all day.
I thought all the tooling and frameworks were made by 20-somethings as "GitHub resume builders"?
There were times when a problem felt to big for me so I put it aside. I come back to it 6-12 months later and it seemed relatively painless to figure out.
- Hi, yes the content can take HTML, you have to set `allowHtml` to `true`. - This is a positioning library, its scope is not to manage the classic tooltip behaviors like fade-in fade-out etc, its scope is to position the tooltips (I'm open to PRs to introduce modifiers to add such behaviors but probably I would not include them in the core library). - Yes it works well both on mobile and desktop - I've tested it on Safari, Firefox, Edge, Chrome, Safari Mobile, Chrome Mobile (latest versions) and it worked well. If any bug is found I'll fix it and/or I'll accept PRs 
Pre-compiler for es6: https://babeljs.io/ 
Awesome I was looking for a package just like this yesterday and was deeply unsatisfied with the existing options. From an initial glance this looks much closer to what I've been after. Good work!
Forcing strict mode on third party modules maybe, but writing your own code in strict mode is definitely not a way to screw anything up. If anything, I'd consider it *good practice*.
Right about when I'm competent enough to start getting work in the field.
I work for a consulting firm full of .NET developers. .NET Core moves closure to modern front end dev. So me and my boss are trying to create a reference app and enlighten so seasoned devs to new ideas.
Sorry, ported is probably the wrong word. I built up an app with node/react. Then I moved the react app to sit inside of a .NET core backend. Not the most fun task.
Thanks for you link but I don't think it answers my questions. It's not clear how the transition between "strict on demand" and "strict by default" will be handled.
Haha OK I shall disregard any reading I encounter on the issue. Deprecated?
yep that would be cool. And don't forget webpack-only/browserify-only/npm scripts etc. There are many ways to the same goal nowadays 
If you disregard the edginess, that's still a terrible explanation 
No, it's just a hack more than anything. AND is short-circuiting. That means it only evaluates as much as it needs. So (false &amp;&amp; true) never looks at the true. But that means that so long as everything returns true, you can make things evaluate in order. "But wait!" you say, "Some functions/values DO evaluate to false." Well yes, that would be an issue. Except you can use OR to get a true value back... So that means that with enough AND or OR statements, you can make thing evaluate in order.
That, and there's a line somewhere in between "promote the library you like" and "being obnoxiously repetitive". If it's directly relevant to the question at hand, sure, post a link, but if you're just bashing something and insisting that your way is better, that gets real tired real fast.
Do you have a demo where the popup opens on hover? I'd like to check the repaints, because a single localized paint is not a problem. `translate3d` will always set the antialiasing to greyscale, but the rounding will make the font not as blurry. I'd reccomend just giving the element `top`/`left`, since the priority of a tooltip is to be readable. You can do the animating with `transform`, with the open state being `transform: none`, but the positioning itself should avoid it. 
More like not using proper versioning... As soon as api is stable you should be on a major version
15 hours and no one-handed web browsing jokes yet? ;) 
Can't tell if you're joking or telling the truth. Both are equally believable.
No Popper.js has not "open on hover" feature (refer to [this reply](https://www.reddit.com/r/javascript/comments/4dgihy/popperjs_the_definitive_tooltips_positioning/d1qqkvc) ). You can disable the `translate3d` positioning and fallback to the `top/left` positioning by the way. May you open an issue on the repo to help me keeping track of it?
You may want to end up using https://github.com/Jam3/devtool for debugging
lodash is easy: `_.unzip(data.map(v=&gt;[v.uniquekey.key1, v.uniquekey.key2, v.uniquekey.key3]))` es6: ['key1','key2','key3'].map(key=&gt;chartData.map(o=&gt;o.uniquekey[key]))
I'm still using *Angular 1* for new projects because I feel like Angular 2 just introduces more stuff that I need to remember, half of which is boilerplate. Plus, the size of Angular 2's vendor code is absurd, even in the latest betas. Adding in RxJS, which Angular 2 strongly pushes on you, only exacerbates both of these issues.
Yeah it certainly makes more sense in that regard.
Not so long ago I encountered a demo on Hacker News which worked fine on Blink-based browsers and didn't load at all on Firefox. Why? Because of the differences of how their engines parse the code in strict mode. Firefox was throwing an exception regarding it. When I looked at the code I realized only one thing: there was no need in that `"use strict";` directive there at all. It wouldn't help anything anyway and just made an incompatibility mess. And yes, I don't consider turning JS into another Pascal good practice. And yes, what's the answer to my question - how to turn this madness off?
yup, i'm thankful for all the help Grunt has given me a while back even if i haven't used it in a long time
I have been learning Aurelia. Should I, in your opinion, stick with that? I primarily have come from a C# web background so I have some learning to do in the java world as things have changed a lot it feels like since I last dabbled heavily in JS
I like your positivity.
What do you mean by "middle man"? Node is a runtime environment, you have to have some environment this code is executed within. Even in the browser there's a runtime environment. I think people are assuming you mean node because you're talking about accessing and writing files and saving persistent data. These are things that are very common in node.
couldnt you say the same for grunt and gulp?
Trial and Error. It's the only way at the moment to actually understand what the hell is going on. I basically just worked through different boilerplates until it started to make sense. On one of the webpack doc pages it's just a link to the page that referred you in the first place and a lot of 'wtf' comments. Documentation is not WebPacks strong point.
Also, AJAX requests are a type of HTTP request, they are not disconnected. The other type of request that OP may have been thinking of would be Websockets. 
I don't know about tutorials but atom have made it quite easy to write packages. You can reads the [API](https://atom.io/docs/api/v1.6.2/AtomEnvironment) which are really good. You can also view the source of some similar packages on github. I think the [spellcheck](https://github.com/atom/spell-check) package is a good place to start.
holy shit that's exactly what it is. I've been trying to figure out why it *seems* like everything is documented, but I still can't figure out what's going on. Even the first page of http://webpack.github.io/docs/. First item: &gt; **Plugins** webpack has a rich plugin interface. Most of the features are internal plugins using this interface. This makes webpack very **flexible.** ... continuing to use the word plugin doesn't help me understand what the fluff plugins are supposed to do.
Eh, webpack is very opinionated about some things. Doesn't work for some use cases.
I use Gulp, but good work Grunt team! 🤓
I saw that option earlier, but in this case its helpfulness is questionable. My criticisms are by no means critical of your tool or your analysis. Your tool absolutely rocks. I am just dissatisfied with how NPM counts things and the utter lack of transparency around that counting.
Sure, which is why you can use webpack for your web packing related needs inside of gulp..in case you need to preform any non codebase packing tasks
It's crazy that Composer and Grunt both reached 1.0.0 today. I wonder if that's just a strange coincidence. 
Thank you
I don't get this "Oh if I want to learn React I have to also learn JSX" argument... do you not know HTML? Is it too hard to type className instead of class?
I think the point is that Grunt had already become obsolete, _before_ releasing 1.0.0. Not saying I agree, but I think that's what he means.
ng2 is verbose but it's also pretty powerful. I have zero experience with vue.js but I have a feeling once you need to start doing really in depth stuff it will be harder in vue because of it's lightweight nature.
I see one omission here: [tagged template literals](http://odetocode.com/blogs/scott/archive/2014/09/30/features-of-es6-part-8-tagged-templates.aspx). Honestly I haven't seen many people use them, much less talk about them, and I don't think most people are aware they exist. e.g. function markOddEven(stringArray, ...values) { var result = ''; for (var i = 0; i &lt; values.length; i++) { result += stringArray[i]; if (values[i] % 2) result += '&lt;ODD&gt;'; else result += '&lt;EVEN&gt;'; } result += stringArray[stringArray.length - 1]; return result; } // Note no parens to invoke the function, instead the template literal is 'tagged' markOddEven`${123} and then ${222}`; //"&lt;ODD&gt; and then &lt;EVEN&gt;"
It's good that JS task runners at least stick to the theme of subverbal bodily noises. Someday I'll encounter Snort.js and immediately know what category of software it is.
Yup, I agree with your points. Koa 2 doesn't really have too many new features besides the change from generators to async/await and using `ctx` instead of `this`. So something like this: app.use(function *(next) { const start = new Date() yield next const ms = new Date() - start console.log(`${this.method} ${this.url} - ${ms}ms`) }) is now going to look like this: app.use(async (ctx, next) =&gt; { const start = new Date() await next() const ms = new Date() - start console.log(`${ctx.method} ${ctx.url} - ${ms}ms`) }) I believe the fact that there isn't much change is the reason they won't be pushing for the release of v2 until async/await is available natively in Node. This boilerplate was mostly created just for people like me who wanted to try it out right now for fun. It took me awhile to get all the right versions of each module that was v2 compatible and the babel plugins that were necessary, so I thought it might be helpful to just create a simple skeleton. Wouldn't recommend using it in production or anything, but would definitely suggest trying it out for fun or for educational purposes.
But some of the names you list still relate to what they do. How does grunt or gulp relate to what the applications actually do?
Dealbreaker for me. Life is too short to mess with things that other systems do out of the box easily.
I don't disagree with you. I came back to it several times over the course of a few weeks. But I will say the final product is pretty damn cool once you figure it out. What no one seems to say anywhere I've seen, though, is absolutely do not use assets like images in Webpack. It slows it down to a damn crawl. Adding about 15 images, small 16x16 icons at that, added about 20 - 30 seconds to my build. Removing the assets got it back down to a couple seconds. edit: added
Did an article on it, if you [want to give it a shot](https://blog.madewithlove.be/post/webpack-your-bags/)
Sure - thanks for the hint. Will fix that!
https://youtu.be/1tavDv5hXpo?t=6m3s
isnt module bundling a task that runs? and webpack runs other tasks as well?
doing the grunt work?
See my edit above.
Thanks for this! I was just typing out a list sorted by GitHub stars before I saw this. See my edit above. The installs- vs. stars-stats don't seem to correlate all that much.
Useless microlib. Dress up meaningless 6lines of code in a nice readme and splash it onto github.
What do those numbers look like if you have a lot more of them on the site? What do they look like when there's a lot of other layout and/or computations taking place? Not saying that what you did isn't performant, just pointing out that there's more to a performance analysis than logging a single method call. eg. not taking dom layout/reflow into account etc. (Which does not happen in the middle of your javascript) Performance is a complicated topic, and rather than claiming it's fast or it takes only x amounts of ms, you should rather just focus on selling the project based on the fact that it's a very simple, light-weight abstraction, with clean code, instead of claiming something that you haven't measured in a more scientific manner. What you're saying is probably true, but how you got the conclusion is probably wrong. 
I think you should, at least while scrolling. almost no time is quite meaningless when there's 16.66666 ms to pop and everything else besides just that one thing. With scroll events you should debounce anything that gets away with it. Also, for performance inquiries I suggest you take a look at Performance.now(), it measures in milliseconds. https://developer.mozilla.org/en-US/docs/Web/API/Performance/now
As with most of this sort of announcement, it says nothing about about what the program IS, what it DOES, or why I should give a shit. Yes, there's a link to 'documentation', but it suffers from the same failings.
I mean you're right, in any other case you can consider those types Primitives, but in this specific case we were discussing the need for a object and in that context, nothing in JS is primitive because everything is an object. A true primitive would be something like 'bool' or 'long' from Java
Regardless of language this is something that should be defined from the server. * You need a centrally controlled clock by which to set/unset promotional offers * You need to control whether or not this information is provided to your users
The code has been used on production for almost an year on a really heavy Ember.js app. No problems with performance of any kind was encountered. Also, as pointed out previously, adding a debounce, the popper could not stay sticked to its reference element. If you find any performance problem and you can reproduce it then please open an issue and I'll be happy to work on a solution.
Hi /u/joppe1543, We're not going to do your homework/exams for you. Academic dishonesty is sad, and you should feel bad for trying to cheat.
I'll check it on mobile safari ASAP. Thanks for the heads up
I'll add some stress/performance test to the repository to make sure the performance are good.
Exactly. He's so full of himself. 
I'm hoping Angular 2 will be better. 
The fragmentation isn't the problem so much as it is the extremely manual configuration you need to do of them. Webpack's documentation is not very helpful and you need to configure every single part of it.
Backbone is unrelated to the server. You can basically use whatever you want for the front-end that you're comfortable with or want to learn. Meanwhile you can totally use Express for the back-end routing. Or Koa. I like Koa more personally. There's a lot of vitriol on /r/javascript for Mongo that I still don't fully understand since I'm not big on databases but depending on your needs it's probably fine.
because ```var b``` in the second part of the for declaration will try to redeclare ```b``` on every loop, not just reassign it. it's like doing: ``` var b = 0; var b = 1; ```
You're looking for for(var j = 0, b = tabs.length; j &lt; b; j++) You can't have a var declaration after the first semicolon.
there isn't. You probably want ```for(var j = 0, b = tabs.length; j &lt; b; j++)```
the comma (`,`) operator, by itself, can be used to separate expressions. This can be useful in something like a for loop where semicolons have meaning. However, in conjunction with `var`, commas are used to separate declarations. If you follow `var` with a comma separated list, they will need to be declarations and not just expressions. // expressions a = 1, alert('hi'), j &lt; b; // declarations (new variables) var a = 1, b, c; An expression like `j &lt; b` in a comma-separated `var` declaration list will cause an error.
Cool as a module, but to call it ES6 implies it's part of the spec. In the ES* spec it would be bloat, much like most modules. 
They are not asking why the comma works, they want to know why **this** works; for(var j = 0;b = tabs.length, j &lt; b; j++) ... I can't figure out why it would work either.
What's with the dollar signs?
JavaScript returns the last statement evaluated by the comma operator. But it also evaluates all of the statements before it, provided there aren't any syntax errors. var x = 10; x + x, true, false; // returns false console.log(x); // 20 You can't declare a variable in the second part of a for loop, but if the variable already exists, it won't complain, will evaluate `b = tabs.length` and will return the value of `j &lt; b` This is probably less efficient since you're essentially setting the value of `tabs.length` into `b` on every iteration. But it's valid. This is also valid: var y = (x + x, true, true, false, [], true, 10 + 10, true, false); console.log(y); // false; Edit: This might provide some background: http://www.2ality.com/2012/09/expressions-vs-statements.html
Totally disagree: op sounds like they've got the ordering situation already taken care of, since it works for them to manually edit the current message (which, timing wise is going to be much worse than client side changing the message.) OP: if what you'd like is to have the message visible on the page, anytime after 4 weeks prior until the day after, you can do that by simply checking the current date at page load and toggling the DOM node's visibility accordingly. If you're not comfortable doing that and it's for a business, I hope you don't mind me suggesting you find a freelancer to get it done and deployed for you. Shouldn't be more than a days work tops and it'll be better quality and better integrated than a script pasted from Reddit. (Note; not a freelancer, not looking for a gig :))
Thank you! These resources will be very useful and I'm looking through them now. Do you think it would be difficult to inject a script? Would it be a similar process to entering a macro into excel? Do you use Javascript to create efficiencies at work or in your processes? I'm wondering if it's worth delving into just for experience sake. Thanks again.
WhatWasThatClackingSound.js
Then where is the security? A user can simply extend or modify the promotion messaging and availability.
This appears to be standard npm procedure. Two years ago they yanked a certificate, then put out an "oh, yeah, update, lol" tumblr post.
Here's how I've muddled through with "learning" Angular: Step 1 - Search SO for example of how to do thing; Step 2 - Go to the Angular docs and look up whatever SO told me to use. I'm rarely successful finding what I'm looking for when I start with the Angular docs. 
Is it a good or bad sign of the times when a great project like grunt is adopted and dismissed before it's even released version 1?
Useless comment. Dress down meaningless 2 sentences with shitty grammar and splash it onto Reddit. 
How does this compare to Hubspot's family Tether + Drop + Tooltip? http://github.hubspot.com/tooltip/
You *can* inline it, but it might be easier to enter the URL into the "JavaScript/CSS URI" field under External Resources. With that said, I noticed in line 68 of your markup, where you have `&lt;input type="button"&gt;text&lt;/input&gt;` you should instead have either `&lt;button&gt;text&lt;/button&gt;` or `&lt;input type="button" value="text"&gt;`, because `input` is a void element; also, your placeholder in line 66 has the wrong format, it should look like a per-kWh cost. Also, in line 49 of your JS, the variable declaration `areaSelection` shadows the function of the same name in the outer scope (that is, defined outside the function where this variable declaration is); you should pick a different variable name. In line 75, you're defining a function called `totalPanelPotential` that, when called, defines a variable inside, multiplies that variable by the function itself and does nothing with that, and then returns the function itself; you probably wanted something like the two lines above that you had commented out, just with proper `var` declarations: var panelPotential = 190/1000; var totalPanelPotential = totalPanels * panelPotential; Anyway, with that erroneous declaration, `totalPanelPotential` is still a function, and when you multiply an ordinary function by a number, you get `NaN`.
Okay cool. Thanks! 
There are a couple of module systems for JS at the moment. Here's a break down: * **Standardised** ES2015 modules are still being implemented: `import {func} from "./funcs.js"` and the SystemJS API `System.import("./funcs.js").then(doSomething)` * **CommonJS**, which is basically what node.js implements: `var funcs = require("./funcs.js");` * **AMD (Asynchronous Module Definition)** as implemented by things like [RequireJS](http://requirejs.org/). You can use all these today through the use of various tools. Things to look at would be [Webpack](https://webpack.github.io/), [Browserify](http://browserify.org/), [Rollup](http://rollupjs.org/) and [JSPM](http://jspm.io/).
Reduce, reuse, recycle function markOddEven(stringArray, ...values) { return values.reduce((p, c, i) =&gt; `${p}${stringArray[i]}${c % 2 ? `&lt;ODD&gt;` : `&lt;EVEN&gt;`}` , ``) + stringArray[stringArray.length - 1] } Update: Does anyone know why I can't call `stringArray.pop()` or `stringArray.raw.pop()` ? Throws: `Cannot delete property '2' of [object Array]`
I think the historical reason is back in the bad old days, you'd never need it. Just include a script tag above the one you had an you're off to the races. When JS started no one had any idea it would be used like it is today. As for import/export statements - I sure as heck hope so. You can check the status of various browsers: https://github.com/whatwg/loader everyone looks to be `in development` so hopefully soon. (actually, edge hasn't been updated there yet but according to this: https://developer.microsoft.com/en-us/microsoft-edge/platform/status/moduleses6/, it is under development, not consideration)
I've been dealing with these npm install issues for the past couple of weeks now. Can you tell me about your proxy setup? Hate to commit my node_modules folder. 
Obligatory legendary quote: http://programmers.stackexchange.com/a/221658/214387 &gt; The by-design purpose of JavaScript was to make the monkey dance when you moused over it. Scripts were often a single line. We considered ten line scripts to be pretty normal, hundred line scripts to be huge, and thousand line scripts were unheard of. The language was absolutely not designed for programming in the large, and our implementation decisions, performance targets, and so on, were based on that assumption. 
Seems more like a polyfill for `const` and `Object.seal`
&gt;Front-end world has changed tremendously in the past year or two. We might say that the front-end is a new back-end. More and more complex business logic and computation are moving to the browser. This show everything wrong in this new trend
Once you know your way around Angular and its documentation, it's OK as a reference. But yeah, that took a lot of SO'ing.
Having taken a short look at it, it's not that much better... But it is better, so that's something.
It's a cheap way to prevent a comparison on an attribute of an object that may not exist. I use it all the time because I have to deal with a codebase that is developed at such a breakneck pace regressions are ridiculously common. For our OP, this looks like: If (object &amp;&amp; object.attribute) {do stuff(); }
Thanks :)
I found [unpacking webpack](http://blog.tighten.co/unpacking-webpack) to be helpfull. The next step would be to [integrate something like Babel](http://jamesknelson.com/using-es6-in-the-browser-with-babel-6-and-webpack/) so you're up and running with modules and ES6. And a quick [demo project](https://github.com/jamesknelson/webpack-black-triangle) where everything comes together.
Why would you choose backbone in 2016? That framework belongs to 2011. Use react for god's sake.
He says "Tindrettes" a bunch of times.
I find it strange that there are so many (more than 0) people here mentioning their corporate proxy... I'd like to make a rather *controversial* suggestion: fix your proxy. In the age of Snowden, dumb/malicious ISPs, malware hijacking DNS, etc. I'm surprised this is still an issue.
This.
Dude it's cool. They are actively seeking for a rockstar front-end developer. ACTIVELY SEEKING. I'm sure they will have no trouble finding a top notch guy who wants to work with a couple java developers on an Angular 2 app.
This is not the main purpose of the library, but for sure someone can write a plugin to add such behaviors!
The idea is that if you `'use strict';` then you're using strict mode, so you should write your code in strict mode. I'd like to see that HN demo / example out of curiosity - I assumed that if a browser supports strict mode, it won't behave differently from another browser that supports strict mode. I'd expect to see different behaviour only between browsers that do and browsers that don't. From the [MDN article](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode): &gt; Browsers not supporting strict mode will run strict mode code with different behavior from browsers that do, so don't rely on strict mode without feature-testing for support for the relevant aspects of strict mode.
I think windows and Ubuntu are actually great names.
You'd somewhat expect that this isn't the first time their proxy bites them. Then again, I haven't tried it using our proxy yet...
Really cool, Hey, how funny, I've just gone to buy your es5 one on Amazon and I already own it!! It must be somewhere in my stupid large Kindle collection. :D
On my list now! Thank you :)
Yeah, I’m quite familiar with that phenomenon! ;-) Hope you’ll like it!
There's no point translating Java design patterns into a language which doesn't suffer from Java's problems. Take the Command Pattern for instance. The only reason to have the Command Pattern is if your language doesn't have functions/lambdas as a first-class construct. A Command object is a poor-mans function. This is/was true of Java (depending on which version you're running), but is not true of Javascript, making the Command Pattern in Javascript completely pointless. I would encourage you to contemplate the difference in feature set between Javascript and Java/WhateverLanguageYouAreComingFrom, and to learn about the patterns which actually apply when writing Javascript.
Observer pattern using jQuery. Here I was hoping to see some things without using a library.
Facade doesn't work..? - You're not () invoking your IIFE - Remove the , after the object, before returning the function - You need to return the result from the function call It's fun to practice some design patters, but it may be more suitable to patterns specific to JS :)
You should use a module system. There is a lot of solutions of different types (server side or client side). In every case there is a lot of refactoring work. Here is one I use : http://requirejs.org/. You could only load a "page.js", which load its dependency depending on context.
done! I don't have much knowledge of java. Read few books and tried to implement those. Now would try to implement the ones specific to the language. Thanks for the feedback :)
No it's not. It is idiot over engineers with their monolithic Angulars and Embers who do this. These people should be making back-end instead. All you need on front-end is a model and a view. 
ok so unexpected end of input means your missing a `" ' } ] )` somewhere usually. that code is missing a } at the end. maybe more the second thing is with a funtion like that your gonna have to attach it to the blur or change event... maybe not for the table but for every cell... so how are you attaching the event? 
Will try to implement according to the specs and update it. Thanks for the pointing out. :)
When I went through this 6 months ago I wanted a module system that did not require a build step (works natively) and works in Node and legacy browsers. I was able to make it work... but with severe limitations. http://prettydiff.com/guide/nativeModules.xhtml
It seems kind of ironic that a corporate proxy (whose ostensible purpose is security, presumably) is the most common obstacle to actual security by breaking https.
It doesn't make them obsolete, though. Unless webpack runs tests, starts servers and databases, updates versions, etc, they're not obsolete. Task runner != module bundler, but I see your point. 
is this two different ports though? that might trigger a CORS error. example: `localhost:80` loading a script from `localhost:5000/sw.js` ? i dunno tho
Cheers. Nice to see it without it all hidden through $.on/$.off. Especially since I tend to read this from mobile and won't actually play with the example code.
I can't tell from your replies but just wanted you to be clear on this, Java and JavaScript are two completely different unrelated languages. They only share a similar name. That being said these are pretty nifty I will bookmark this and keep it around for reference.
Cheeky answer: "Unsuccessfully attempting to program using JSON config objects."
Hi /u/ryzmen, please don't resort to name-calling.
webpack doesn't deal with servers though, unless I'm missing something major. It'll "serve" you static files, sure, but it doesn't deal with servers. I still need to boot up my api server to even do anything. 
75 dependents screams insecurity and absolute reliance on some remote system completely unaffiliated to your application.
The best way to start is to think of a project to work on. Work out exactly what you want it to do, and go from there.
Thanks a lot. I will take a look on that.
I actually have a project but i am too overwhelmed with it because i don't know much about JS and i am having problem with reading parameters which i find online. I have found many things but i need to learn how to edit/modify them. Although i have learned some things on past 2 days by searching and searching.
Is Uber!
`&lt;div class=a&gt;&lt;div class=b&gt;foo` if you click foo its technically class b and class a... sometimes you want to watch a events for class A or Window (document.body or window or whatever) ... but if they did not propogate you would never get the event!
Funny, this just showed up in my RSS feed about 4 posts before this one in the Dew Drop on Morning Dew. [Tools to Learn JavaScript By Doing](http://developer.telerik.com/featured/tools-learn-javascript/)
I think you posted this for the first time a few weeks ago. I think the the idea is solid and the design is quite nice. Quick question, is the point of the it to search for how others implemented a function (like isString) or to look up code to solve problems? I feel like its great for the former, but difficult for the latter.
Command patterns are not an artifact of language idioms. It's a valid design pattern, useful in any language. For example, if you're implementing something with an "undo" feature, having discrete commands that can reliably change the state of a model make it simple to reverse those steps. There are loads of applications for the command pattern; it has no role in overcoming any particular language's quirks.
My only comment is that you correct the spelling of your repository. If you are making your GitHub history part of your online professional presence, correct spelling matters a great deal.
Hey! I'm no expert nor pro, but... Here's a simple example of bubbling (ie, event propagation) and capturing (preventing the bubbling/propagation): http://codepen.io/anon/pen/reYbvj As to the why? Hmm... I guess if you have a parent element and you want to listen for events that might occur within any of it's children, then it's much more efficient to add a listener to the parent instead of putting one on each of the individual children..?
I'd suggest [Eloquent Javascript](http://eloquentjavascript.net/). It's on the web, but you can also buy a physical copy if preferred.
It's also a very well commented module, so you could also just go ahead and [read the source code](https://github.com/reactjs/redux/tree/master/src).
you can use codecademy.com it's good and very explicative :)