Good question! I just wanted to use ascii code for cloud and umbrella somewhere... You see the result.
I wouldn't be writing tests for their code. I'd be writing tests for the interactions between my code and theirs.
I wouldn't be testing their code. I would be testing that my code passes the correct data to them. In the same way that I'm testing my code in this thread.
Java is not the same programming language as JavaScript. Please refer to /r/java.
&gt; * the probability of not getting heads over 16 attempts is (.9375)16 = 36% &gt; * If you inverse that, the probability of getting all heads is 64% Wait.. what? Do I need to go back to school? :/
console.log(response.items.map(x =&gt; x.distance));
Why is that hard to believe?
You guys are all awesome!! Thank you so much. That has helped a lot. 
`import` is supported in Chrome, but you did still use a bundler. There are alternative methods, but using a bundler preferred for a number of reasons and is the easiest. https://caniuse.com/#feat=es6-module-dynamic-import
This is good, thanks for the share.
Why not just have your plugin file call the function to add its own code into the main library? pluginWrapper.addPlugin({ main: function(x) { if(x = 1) { console.log("plugin A"); } } }); Then just use boring old javascript to create a script tag with the correct src attribute and let it go? You could even subscribe to the script tag's load event so that you know it's happened. https://developer.mozilla.org/en-US/docs/Web/Events/load
Hmm. That’s what I was afraid of. You know anything about prerendering? I’m trying to figure out if that would work here. (And yep, it’s a client-side rendered site.)
Gatsby, Next.js, Nuxt.js, VuePress, Razzle, Hexo, etc. You can also configure it for most of the top frameworks on a Node server yourself.
Thanks! For what are infinite loops used then? I'm playing CodeCombat and it's something I need to use a lot.
thanks please provide to other friends 
Infinite loops are very useful when trying to crash your browser :). Otherwise they are mostly found in tutorials of what not to do :)
Yeah, I'm practicing jQuery though. 
Javascript executes synchronous code as fast as it can until completion. Infinite loops will cause the browser to "hang" because most of the rendering process in also on the same thread. Regarding what the top level comment said: it doesn't matter if it's "while(true)" or recursion, the key part is "setTimeout" which queues the function call to the event loop which will execute it at a later time. If you want to sync your animations with the frame rate then you should use window.requestAnimationFrame() instead.
&gt; You're introducing logic into unit tests I've interpreted this as: *you are adding more complexity into your tests by generating the input* I agree, a single unit test is less complex than a property test. The issue is that you need a lot of unit tests. Take the **isRaining** example with 4 variables. Instead of having 1 property test, you now have 16 tests. There must be logic involved in writing and maintaining all these cases, is there not? &amp;#x200B; &gt;...and o*bfuscating the error messages.* I don't think I fully understand what you mean by this. Could you please elaborate? In the article I have avoided talking about what the actual output of an error would be. This so that I stay neutral with regards to which library you use. In most libraries you will be provided with a counter example to your property (if it finds one). The counter example will be the inputs needed to invalidate your property. Nothing more, nothing less.
I think the value proposition here is testing that corner cases are handled correctly (for example handling unicode astral plane characters correctly). Testing corner cases is important where rigorous semantics are required (e.g. a standard-compliant Ecmascript parser) or where the the range of data isn't homogeneous (e.g. reversing a string has to care about fun things like diacritics). With that said, once you know to test for those edge cases, then you can just write a unit test for that category. At the end of the day, you want to build expertise in the domain more than you want the tooling to hide everything from you. Issues with diacritics, for example, are something that tooling can't really warn you about. If all you're doing is unit testing something like `getName = user =&gt; user.firstName + ' ' + user.lastName`, it's pretty safe to assume that all cases fall under the same rules. No need to mount a rocket propeller to the bike. 
If you're genuinely interested in Parcel, I'd say give it a look. For simple applications it's crazy fast to get started with, and I've quickly begun using it for any prototyping, proof of concept type work. If you're specifically interested in React with Parcel, and Create React App in general, you might be interested in a CRA alternative I built called [Crab](http://crab-cli.info/) (see what I did there?). It's a CLI tool that scaffolds a reasonably advanced React app building with Parcel, with Sass implemented, a router, and optionally Redux. TypeScript support is under way. It also supports cli-based code generation for components, again with optional redux bindings.
Can't speak for other search engines, but [Google executes Javascript during crawling with some limitations](https://developers.google.com/search/docs/guides/rendering).
I think your isRaining example isn't a good one. If you have arbitrary logic, you might as well write out all the tests for all the permutations of cases. You only really want PBT is when you have a quirky, unchanging specification to code against. If you do PBT with ad-hoc requirements, you're just going to get brittle, difficult-to-maintain tests.
Well, for example I had an issue in which I had some files that were part of the front end and I needed to know their production name in order to use it in the server, but with parcel you cant know the name of most files in advance. Another one that was fixed(but I haven’t tried it yet so I don’t know how well it works) is service worker files and also web manifest files. The problem is that all the files are handled by Parcel, and if it doesn’t know what to do with the file, and you don’t have a way of telling it what to do with it. And also I like to know how my final file structure will look like, but parcel doesn’t let you configure that, it will just dump all of the files in the root level of the dist folder, and sometimes this can be critical. There are other issues, but I still like it and use it because I think that it is moving in the right direction and needs the support of devs.
pre
With a little bit of tweaking this, this worked - thank you! Here's what I'm not understanding - when I log this to the console, it prints each unique value. But when I have it spit out the same thing into the spreadsheet, it's the same value duplicated. - I don't imagine you any any experience with Google App Scripts? for(var i = 0; i &lt; data.items.length; i++) { Logger.log(data.items[i].distance) // All unique values var property = data.items[i].distance; sheet.getRange(1,1,30).setValue(property); // 1.18 each time }
Because of a "legacy" internal app I support that deals with *lots* of html tables that have complex "show/hide this column" rules in CSS, that. Much easier to just have some JS conditionally fire or fire with a swutch than deal with many confusing media queries in the same CSS document. Depending on the implementation you also save in "time it takes for the dom to load because all the CSS has to be parsed and applied".
Render props are better.
Is nice. Will borrow logic at some point. Cheers!
Great answer, thanks. The only issues I’ve run into have been cache/build artifact related, but I’m not doing anything particularly scary with it. 
Look into setTimeout, setInterval and requestAnimationframe
That NodeHelper object wrapper is messing things up. Why are you using that? I'd take the functions out of the object, just make them plain functions, then at the end write: module.exports = {start, socketNotificationReceived, loadVcards, parseVcard}
Yesh. Yeah that makes sense there. 
[JSON](https://www.codedribble.com/json.php), Javascript, [CSS](https://www.codedribble.com/css), [HTML ](https://www.codedribble.com/html)or [XML ](https://www.codedribble.com/xml)and what not? These all are the integral parts of web developer. And we know how cumbersome it is to get well-formatted code. We know the pain of making the validated code. Yes we code suffer these everyday. Ever wondered how easy it would be our life if we could get everything above in one place where with a single click you can validate, format or minify your code??? Well Yes, this is certainly possible with [codedribble](https://www.codedribble.com) Have yourself on codedribble and see what power you may have. Give this a try and feel how worth it is.
They fixed most of the critical stuff so most projects now will do fine with parcel, and dice it so much easier to use, I don’t see a reason not to try it. As I said before, im now using it for a new medium sized project, and for now it seems like it covers everything I need. And I like to do things “the right way”, so no hacks. Just awesome ;)
At my day job, I work on Fusion.js - a framework w/ SSR, and I use Gatsby for its docs. As you said, the main difference between SSR and SSG is how much client-side logic you want. If you're going to be doing data fetching and the like, you'll probably want a SSR solution. In my experience, Gatsby adds a lot of complexity and shifts the type of flexibility that you'd get from just writing a quick script to generate HTML from markdown files. On the up side you get to work with React (assuming you think using React is an up side). On the down side you might find yourself doing `dangerouslySetInnerHtml` for even basic things like code highlighting, and grappling with a weird GraphQL API because oh-it-is-the-shiny-new-thingie. Personally, I prefer the flexibility of simpler scripts (which is what I did for Mithril.js). I have not tried Nuxt or Vuepress. SSR (and particularly SSR + bundle-splitting-at-any-component that Fusion.js provides) will give you an enormous amount of flexibility in terms of where code is run. As my coworker says, it gives you a all the knobs to tune performance. In addition, it can also provide higher level tools to work with data fetching (for example Fusion.js provides RPC utilities, and Meteor provide its universal mongo-like API), whereas SSG is generally assumed to have no server component to make requests to. 
Are you running any sort of VM? The folder `windowsshare` seems to currently used by another system (windows?), and you can't write to that folder. Actually the error msg refers to a specific file in that folder, but I would assume it affects multiple files.
isRaining is fine for me because the article is only introducing the concept of PBT. I didn't want to introduce a complicated example. I'm also fairly certain I would prefer having 1 property test over 16 unit tests. &gt; If you do PBT with ad-hoc requirements, you're just going to get brittle, difficult-to-maintain tests. Would this be much different from doing the same with unit tests? &amp;#x200B;
I don't think there's much CSS can that JS can't. It's more the opposite, CSS can't do a lot of stuff JS can.
Yes im using a vbox with ubuntu
Possibly due to a hoisting issue. handleBeforeUnload(event) { event.returnValue = '\o/'; }; is hoisted since its a function declaration. while handleBeforeUnload = (event) =&gt; { event.returnValue = '\o/'; }; is not hoisted because its a function expression. So handleBeforeUnload(e) would be undefined if called before the expression is evaluated.
Use a button instead.
Maybe? If you can point out where you think I've gone wrong, we can try and work it out. But as far as I know, success and failure probabilities are just inverses of each other. 
Discovered the problem: # npm does not work with Virtualbox shared folders
Absolutely. Tests are not for the convenience of the person writing them, they are for the person maintaining. Let's walk through the logical progression of `Only isRaining(true, true) should return true`. You then changed it to `Only isRaining(true, true, true) should return true` and modified the test accordingly. But what if requirements change further and state that `true, false, true` should also be true? If compare your test with your implementation as complexity grows, you might realize they are starting to look awfully similar. That's not really what you want, because if the function is complex enough, then you won't be able to have confidence that the test is correct either. Remember, you want to assert that some output matches the requirements, not that some function of your input is true. You want to make a change in your code, run tests, find that "Such and such condition required for such and such use case was not met: expected X, actual Y", grep, then make a change to the test so that the assertion matches the business requirement (or add a test to ensure the requirement is met if tests were all green).
That's a good point, but the value proposition presented in the article wasn't the same as you proposed now, thus the comment. However even for more advanced tests, you second point still rings the clearest - knowing test cases are significantly more important than having the tooling providing you with a sense of security.
Your docs "globals" links are broken.
Did I just get hypnotized? 
matchMedia can still be combined with resize if you want components and functionality to adapt to a changing screen size or orientation. def simplifies things in any case...
*"But it works on my machine!™️"* I can see that happening using this testing strategy. Tests should always be deterministic.
“Weird things” in this case would include loading content via Ajax from a headless cms like contentful. If you have a SPA and you want google to crawl it effectively you should prerender it. 
Sorry for notifications. I was playing around with a tool (subscribers) and forget to disable it that's why you are receiving notifications. I'll disable them. I've read it twice i don't know how that typo slipped from my hand. There isn't any web developer around so i didn't have any second pair of eyes of read them before i publish them and people other then techies hate reading tech stuff. I'm lost at your this point. Btw thank you :)
It look nice and clean, thank you
Good point, they are awfully similar. Next time I'll have some better examples :)
It really depends on how **static** or **dynamic** your data is and not how much you've got or how complex it is. If your data is static, it never changes, or it doesn't change too often, then a static site generator might be the better choice since the static pages can be cached for a good amount of time giving you better performance. Good examples of this are landing pages, documentation sites or blogs without comment sections. If your data is dynamic, it's constantly changing/growing or most of it is generated at runtime, then you might want to go with server side rendering. This may impose a heavier load on your sever because it has to generate new pages on the fly for every request, so you might want to fetch most of your data with AJAX calls instead. Good examples of this are interactive web applications, social networks or big media sites.
Wish I would have known this sooner...
I don't really know what's the purpose of the website and why would I use it.
i agree with you although it thought the window object was part of the dom
Note that String.prototype.startsWith does not work in IE. That said, easy enough to code your own solution.
&gt;items This was the missing puzzle piece from the OP's original question I think.
I really don't see the point of this website, since all these functions can be accomplished by any modern ide or editor
Yeah you could easily use indexOf or something similar if you want to support older browsers 
Here goes! I'd be interested in making this project more developer friendly so any advice would be appreciated. [SmushIt](https://github.com/davgothic/smushit) - A PHP client for the popular Yahoo! image compression web service Smush.it (although since Yahoo wound down the service it now uses resmush.it).
I use it for enabling carousels in larger screen sizes, and just falling back to showing the first "slide" in smaller screen sizes. 
You're a bit sloppy in the description of your outcomes. In particular: &gt; If you inverse that, the probability of getting all heads is 64% can be easily misread as if you are saying that there's a 64% chance that all of your flips end up heads, instead of the intended meaning that there's a 64% chance of at least one group of four being all heads.
Property based testing - yes, sometimes. Random tests? Not even once.
Andddd you ruined it.
That could happen, but wouldn't that be better than having no failing tests? If all you care about is for the test to be deterministic, you can supply a constant *seed* (the article didn't discuss this topic)
Author of the blog post here. Feel free to ask any questions about it here. I'd be happy to answer/clarify the details about the vulnerability.
You need to bundle it. Check out Parcel.js.
[removed]
Could also use str[0]
im so fucking baked
You did not say you had 20 deps... Use parcel. The tutorial on the site should be enough.
Why does the 'validate' modal pop take you to your instagram? Why is it even do that on the entire page even trying to click off the modal? Stupid design choices like that will make people not want to use your site. If I didn't organically want to go there on my own, tricking me isn't going to make me like and subscribe, or whatever. 
Fun. Can I suggest a NURBS one next?
If I am not mistaken NURBS follow the same principle. Their peculiarity is the parametric aspect, where you can attach points to a certain coordinate(s) on a line/surface and have the resulting structure follow changes from parent elements.
hey, really cool tech, wanted to look at the raw code but seems the link to the open source repo is giving me a 404. &amp;#x200B; its in the text below, specifically the link is on 'released an open source tool' \`\`\` I recently [released an open source tool](https://thekevinscott.github.io/ml-classifier) to quickly train image classification models in your browser. Here's how it works: \`\`\` &amp;#x200B; the link is sending me here: [https://thekevinscott.github.io/ml-classifier](https://thekevinscott.github.io/ml-classifier) but looks like you want it to point here: [https://github.com/thekevinscott/ml-classifier](https://github.com/thekevinscott/ml-classifier) &amp;#x200B; there isn't a plugin i need to view [github.io](https://github.io) pages is there?
the cards are way to tempting to not have deeplinks to the tools they list, thought it was broken. well the cymk -&gt; patone is broken tho (404) why is the footer not on the bottom? why does the link to "JSON/Find Difference" not work? why do all menupoints only link to the main category tool and not to the specific sub tool? why do the fat-footer links dont work and just yield javascript:void(0) ? why doesnt the search work? but the look and feel seems good. 
Mashallah!! Qamar Bhai. Keep the good work. Will visit your blog in future also.
Similar principle but different basis functions. You are right, changing the parametrization of each segment I believe is similar to setting the weight of the control point which will change the resulting path.
If you’re project isn’t setup for module bundling (or doesn’t need it) check out UNPKG. https://unpkg.com/ For something like this it will probably do the trick. 
From waveform-playlist's README: &gt; If you want to download and run the already compiled website, navigate to folder /dist and run python -m SimpleHTTPServer 8000. The website will be available at localhost:8000/waveform-playlist. To me it seems that you can just use `dist/waveform-playlist/js/waveform-playlist.var.js`.
Some packages provide a "UMD" bundle, which is a carefully constructed file that can work as a CommonJS module (Node), AMD module (Require.js), or a standard script tag that creates a global variable. Unfortunately, in this case it looks like `waveform-playlist` does not (per the [package contents on Unpkg.com](https://unpkg.com/waveform-playlist@3.0.4/) ). I think your primary option here is to set up some kind of script bundler for your project, like Webpack or Parcel, and spend a bit of time learning the basics of installing packages with NPM. It'll be beneficial in the long run to know how to do those anyway.
ES6 does not introduce static methods, and JS has no concept of a static method.
That's just syntactic sugar for `Example.foo = () =&gt; {...}` which was always possible in JS since the earliest days. It's a function in a field on the `Example` object. It has a "this" just like any other function, so it's not "static" in the same sense as other languages.
That's fine, but "same sense as other languages" isn't what was asked; JS _does_ have the concept of a static method, by the definition of an accessible method that does not require instantiation. It's internally consistent, regardless of whether or not it's syntactic sugar.
And what was your requirement ? What were you trying to do?
Just nitpicking, but the code indentations in your article aren't consistent: some are indented with 4 spaces, some with 8. The bracket `(` and `{` spacings aren't consistent either. You could use a beautifier to format your code for better consistency.
It is well supported and works flawlessly, so that's nice. **But** in case you build a JS-powered web application, be aware that ```window.matchMedia``` (or ```window``` in general) is not available in Node, so if you ever try to get into server-side-rendering, relying too much on it can really bite you! Learned that the hard way, lots of refactoring necessary...
True! I remember now the control points had weight to them.
It provides methods related to classes and class instances that don't necessarily require a class instance to be used. Note that these have existed before ES6. ES6 only added the `static` keyword used to create static methods when using the `class` syntax. A common use case is factory functions. These functions are used to create instances in ways contrary to normal construction. You can see these in JS builtins like: Array.from(&lt;array-like&gt;) Object.create(&lt;prototype&gt;, &lt;descriptor&gt;) Promise.resolve(&lt;value&gt;) Other, similar examples are utility functions that generate data relating to that type Number.parseInt(&lt;string&gt;, &lt;radix&gt;) Date.now() They can also be utilities for obtaining information about instances Array.isArray(&lt;object&gt;) Object.getOwnPropertyDescriptor(&lt;object&gt;, &lt;key&gt;) Note that, as static methods, these operations can be run against values that may not be instances of that type. For example `Array.isArray()` wouldn't be very useful as an instance method only available to `Array` instances. 
Wow, you surely got some determination to help haha. I'm thankful for the great explanation, that really was helpful. I might not have given $4000, but I've given time, yet my institution also failed giving me that. Here we have no rich men among us, only equal! Seriously tho, that's some determination. Thanks. 
Yup, I am the creator of that site 😀 We use modular-css a lot here, the class names are prefixed with a hash of the file path so they are namespaced.
Oh nice. Cool website by the way.
Thank you!
You should write more specific titles. The code you wrote isn't really a plugin (it doesn't plug into anything). "How I wrote a tags-input library" would be a more accurate title. Also, unless you are using standard tooling, you should talk about the edges of your system (namely, how does one distribute said library and how does one consume it from a standard registry like NPM). These days, telling people to copy and paste code into their projects is not a best practice. You also need to think about who your audience is. Not that many people care how you wrote a specific thing, but they might be more interested if in the process of writing that specific thing you talked about things that would be useful to them. For example, many people write articles about how they wrote X in React/Vue/whatever as a proxy for teaching how to use the framework, not because X is any interesting in and of itself. With that in mind, it's more important for them to structure the article to showcase relevant aspects of the workflow, rather than how some specific feature was implemented. In your case, you assume the reader knows JS OOP and DOM API and spend a significant amount of time on implementing features - which a reader who knows JS OOP and the DOM API will most certainly know how to do already. So first decide if you are targeting newbies (and if so, focus on teaching concepts that are foreign to them such as the DOM API), or if you are targeting more seasoned developers (and if so, focus on things that are likely to enrich their tool belt)
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
You are totally right, thank you for letting me know! Just updated the article. No plugin needed for github.io, just a bum link on my part.
\[Nest Safely\]([https://github.com/kylehovey/nest-safely](https://github.com/kylehovey/nest-safely)), a JS library using the ES6 Proxy pattern to create functional-style data access and stop the "thing || thing.thing || thing.thing.thing || . . ." pattern in its tracks.
Hey thank you for the Feed back. I got it and now after reading this i am aiming to make another article with title "how to structure your javascript plugin". This will be for intermediates where I'll tech them how they can strurture their vanilla JS plugin to be used by node.js, require.js and by directly adding cdn to their script tag. Would this be a good title for this purpose? And and more can i add in here ?
I'll take care of them from now :). Anything else that you find bugging you?
Hey! Thank you bro BTW from Pak?
NURBS (non-uniform rational b-splines) are piecewise continuous rational beziers. The parts of the curve domain where the each point has influence is controlled by something called a "knot vector". So, if you want to evaluate a point at a given parameter, you first need to determine which bezier curve the parameter is defined on, then you can apply the casteljau algorithm to that sub-interval. So, something like this would show the parameters kind of "snapping" between knot intervals and that, IMHO, would not be as beautiful. :)
Check out \`react-fns\` - &amp;#x200B; [https://react-fns.netlify.com/docs/en/api.html#media](https://react-fns.netlify.com/docs/en/api.html#media)
Check out react-fns - ​ [https://react-fns.netlify.com/docs/en/api.html#media](https://react-fns.netlify.com/docs/en/api.html#media)
JS has static methods, e.g. `Array.from` or `Object.create`. class Array extends Object { static from() { /* ... */ } map() { /* ... */ } } 
How so? What has changed? 
&gt; ES6 does not introduce static methods, and JS has no concept of a static method. Ctrl+F "static method" https://www.ecma-international.org/ecma-262/6.0/index.html In the 5.1 spec, "static" only occurs in the list of future reserved words. https://es5.github.io/ &gt; just syntactic sugar So? How does that change anything? It's still a language feature. Same goes for async/await, arrow functions, destructuring, for-loop iteration scope, and whatever. It's all syntactic fluff. *Async/await is just syntactic sugar for some super complicated transformations which was always possible in JS since the early days.* There are very few things weren't possible before. E.g. WeakMaps is something you can't create on your own. It's something the VM has to provide.
Always? For example?
It was mostly poking fun at the ecosystem, but there is some truth to it. Task runners like gulp and grunt aren't used often anymore in lieu of using npm scripting capabilities. Nobody is writing new projects in backbone. Most all that legacy code has been migrated as well. The author says this to a degree, but jQuery is out. New standards render it largely useless. Things like Babel extend the JS specification in ways that are useful now. And NPM doesn't stand for Node Package Manager.
The bracket seven lines up from the bottom...?
It looks like project uses [webpack](https://github.com/naomiaro/waveform-playlist/blob/v3.0.4/webpack.config.js) with a libraryTarget of `var` and library of `WaveformPlaylist`. it is configured to put everything into a single file, `waveform-playlist.var.js`. So, this basically means in this js file, the following appears -- something like this -- var WaveformPlaylist = ( // entire bundle )() Something like that - there's probably some webpack boilerplate in there - point is, all it does is export a var to window global scope. If you don't want to maintain a build step (i.e., need to install from npm, create build tooling to transpile requires) -- all you really need is their `waveform-playlist.var.js` file -- include that as a script tag and you'll be able to access `WaveformPlaylist` as a global.
Hey @PMA66 I'm not sure I understnad what you're asking? 
Yes! Thank you... but one last thing! How would I get "idx" to output to the var name and send to post of ajax? Thanks for your help! &amp;#x200B; &gt;$.ajax({ &gt; &gt;type: "POST", &gt; &gt;cache: false, &gt; &gt;url: "../../html5/src\_v2/includes/photoAds\_companyTracker.php", &gt; &gt;data: { companyName: name, adText: adMessage }, &gt; &gt;success: function(response) { &gt; &gt;} &gt; &gt;}); &amp;#x200B;
I like to think of as `((((a + b) + c) + d) + e)` because it resembles what's going on internally.
In addition to the great explanation from the previous comments, one case I use all the time is for custom events (similar to the Number.MAX\_SAFE\_INTEGER example). &amp;#x200B; Say I have a class which dispatches a custom event: **const** ce = **new** ***CustomEvent***('onSomeEvent'); **this**.dispatchEvent(ce); &amp;#x200B; To listen for this event, you'd do myClassInstance.addEventListener('onSomeEvent', e =&gt; this.onEvent(e)); &amp;#x200B; If you mistype 'onSomeEvent' in either place, it'll just silently fail leaving you to debug what you did wrong. If instead you used a static getter on the class, you could do: &amp;#x200B; class MyClass { static get SOME\_EVENT() { return 'onSomeEvent'; } randomMethod() { **const** ce = **new** ***CustomEvent***(MyClass.SOME\_EVENT); **this**.dispatchEvent(ce); } } &amp;#x200B; myClassInstance.addEventListener(MyClass.SOME\_EVENT, e =&gt; this.onEvent(e)); &amp;#x200B; In this case if you typed things wrong, your code would throw an error, and if you use an IDE it'll actually suggest the event property for you.
Typescript is next on the list. Babel and CSS modules are really good suggestions. Will add those too. Thanks for your feedback! :)
Yeah, there are [left and right folds](https://en.wikipedia.org/wiki/Fold_%28higher-order_function%29#As_structural_transformations), javascript's `reduce` is left one. Lodash has [right one](https://lodash.com/docs/4.17.10#reduceRight) as well.
You can do anything you set your mind to doing. Yes, you will need to communicate and articulate complicated concepts in front of others but what happens over time is you can lose that fear once you get a sense of how people will react to you. And generally people are not going to do things to make you anxious on purpose. Just chill and look at everyone as a friend and your talents will shine. Carry on. 
I get what your saying about facing my fears to overcome it and all but telling someone with anxiety to chill is the same as telling someone with depression to cheer up. It just doesn’t work that way. I appreciate your input nonetheless.
You presume i haven't walked the proverbial mile in your shoes. 
I would personally simplify your problem. Get rid of all the webserver stuff and just have a test script. Does hashing give you the value you expect when you pass in a string. Maybe the your parameters are not set right. After you've hashed a string you know. Copy and paste that hashed string and see if the compare works the way you expect it to. If that works as expected then start checking the framework values. Are the parameters strings or buffers or something else. Are the values coming back from mongo strings? I personally don't know anything about the bcrypt NPM module (I assume you are using the first result on Google, https://www.npmjs.com/package/bcrypt) Also if you are using that package you can await on the promise instead of using the callback which might help make your code more consistent and easier to read/debug.
I have SAD ( :\_( ) too, and Joey's right, you can work through it. Big part is getting away from negative people and around a better crowd (often a smarter crowd). Coding is full of guys with social issues. There are lots of things you can do to overcome SAD, read up on the web (or implement what you've read).
That is correct. /u/ViridianBlade comment shows the different probabilities quite well. It's up to the developer to decide the trade off between number of loops and testing every possibility.
You need webpack plain and simple. Script tags are dead, there may still be a handful of packages around that offer support but it’s getting less by the day. Set up a small webpack (or parcel) project, npm install the lib and literally import it in the code. Do not worry about node_modules getting big, think of it as a portable environment. Bundles bundle only what they need eventually and when you distribute you upload the bundle, not node_modules.
Please add information about the hardware you used to test your (undisclosed) PoC and numeric results.
Not many people do so it’s easy for me to presume that. Again thanks for your words of encouragement and advice.
MDN listed android browser, chrome for android and Samsung browser as unknown. Guess they need to update that.
You can either render the JS to HTML and serve the HTML. framework such as next.js do that. Or you can use a static site generator such as gatsby to create all html pages at build time and then serve them. 
I just finished migrating our product listing pages and product details pages for a larger ecommerce site to Gatsby (static site generator). These pages uses data from an API that it fetches during build time. We are right now setting up an automated build that check if there are changes in the API every hour so. If it is, we automatically redeploy. For some parts of the site such as stock availability we do the API call on the client only because that data need to be live so an hour old data is not good enough. TLDR; gatsby (static site generator) works even if your site uses APIS.
Looks sinusoidal. You’d probably have to implement this from scratch but you also might be able to get a reasonable effect with a bunch of images layered on top of each other. Depends what you’re trying to achieve to be honest 
I wouldn't worry about it at all, you can use whatever you want. Even if ts-loader would become abandoned, there always will be alternatives that you can easily switch to. My preferred setup is webpack + awesome-typescript-loader, without babel (although I'm pretty sure that there is some babel magic somewhere under the hood, but I don't have to configure or even think about it).
This big part is sometimes also extremely hard. I've never had a good company in office but my last few jobs were pure hell. People were acting like they are trying really hard to make me insane.
My team took over development of a react site that rendered recipes. The app uses server side rendering to make it crawlable, but the massive js payload is absolutely impacting seo in a negative way. Googlebot apparently will execute js on your site, but unless your Ajax calls return really fast it will not get indexed. So if you want to use js, make sure everything is server-rendered.
I think practicing in a safe place where you can pull back if it gets overwhelming could help. I've had jobs where you can more-or-less keep to yourself, and jobs where every day you've got to tell a large group of people what you're working on and what issues you're running into, so in terms of 'communication skills required', it can be a bit of a mix. If you'd like some practice talking out loud to someone about technical stuff, please feel free to DM me and we can hop on Discord or something. I know it'll be uncomfortable at first, but treat it like learning to code. The more experience you've got, the less intimidating it'll seem. 
I have poor communication skills, thats why I don't want to work as a freelancer or start my own company, I work in a company where most of the time I am told what to do and I just do my job. I work from home and I talk to my colleagues over Skype messages and sometimes with clients over emails, so I am pleased with this. I hope that technology don't advance so I have to use my voice :D 
I have generalised anxiety disorder and also have a hard time articulating thoughts as I’m constantly shitting myself, but a career doing something I enjoy and that I’m good at has done a world of good. I think you should go for it, you’d be surprised how much a career can help build confidence and give you a positive mindset.
I had a crippling fear of public speaking. I know it's a common problem, but the severity of mine was so bad that I once feigned being mute to avoid speaking in front of a group, which of course just drew more attention, leading to more intense feelings of anxiety. Then I taught and got over that real quick. Being thrown right into the middle of it forced me to realize that the things I was afraid simply did not exist. What I'm suggesting is to face your fears head on. Barring the occasional freakout, the anticipation is usually much worse than the actual situations that trigger episodes. Lastly, have you sought help or have you tried all the self-help stuff like exercise, healthy diet, and meditation? They all work. 
You just saved me! Thank you very much!
Well written article, even if a bit informal. Surprisingly easy to understand. Is the V8 team aware of you posting this before sufficient fixes are in place?
[json-aggregate](https://github.com/salvadr/json-aggregate) a toy utility I've published to perform aggregates on json data, inspired in the mongo aggregation framework. Any feedback is welcome, thanks for your time!
If you're good at coding, people with work with you. Do not worry. However, have you thought of seeing a coach or therapist for these issues? Helped me a ton.
Yes you can see it’s right after the function 
You can even make it symple naming css files with buttons id, so you can make it like this and have all buttons you need (instead of if hell...) $(function() { $('button').click(function() { $('#ss').attr('href', 'https://www.yourdomain.com/styles/' + $(this).attr('id') + '.css'); return false; }); });
Go to /r/LearnJavascript and ask about arrays and loops.
I guess you could do this? &lt;script type="text/javascript"&gt; var javascript_array = &lt;?php echo $js_array; ?&gt;; console.log(javascript_array.map(a =&gt; a.company)); // Output ["apple", "microsoft", "reddit"] var index = 0; $(".flexslider").flexslider({ animation: "fade", controlsContainer: ".flexslider", slideshow: true, keyboard: false, randomize: false, slideshowSpeed: "20000", controlNav: false, directionNav: false, after: function(slider){ $.ajax({ type: "POST", cache: false, url: "file.php", data: { companyName: javascript_array[index]}, success: function(response) { } }); index = index === javascript_array.length ? 0 : index += 1; } }); &lt;/script&gt;
Maybe someone else with more experience could answer than me :) &amp;#x200B; But from my general understanding. You'll always need to do that, they're different operating systems. You're running Windows build vs a mac/linux build of MongoDB. The reason Docker is so popular is because it containerises your environment and runs across multiple environments. So you can run a linux container, with your app/mongo db etc in there and run it on a Mac, Windows or Linux OS. &amp;#x200B; Either that, or maybe you're looking for this: [https://www.npmjs.com/package/npm-run-all](https://www.npmjs.com/package/npm-run-all) it's what we use so we can run commands across Windows and MacOS.
Searching around I found the [mongodb-download](https://www.npmjs.com/package/mongodb-download) package which lists these as dependents: * [mongodb-prebuilt](https://www.npmjs.com/package/mongodb-prebuilt) * [mongodb-prebuilt-cross](https://www.npmjs.com/package/mongodb-prebuilt-cross) * [mongodb-prebuilt-cross-2](mongodb-prebuilt-cross2) The download numbers of the first look encouraging.
You can overcome your anxiety gradually, however if you are only getting into Dev because you think it pays well you are not going to enjoy it. 
I had in mind to cover it at some point. What's your approach of doing it? :)
I use [join monster](https://github.com/acarl005/join-monster).
no
Sorry, I don't understand what you're saying. 
Are you doing this for pseudo type hinting?
It is super necessary, but the communications do not have to be verbal. I am always asking my devs to write things up so that I can explain them to others. Being able to write clearly and make sense is just as much a skill as talking that shit out. TL;DR: Yes its that important, but there are lots of ways of working on it.
&gt;People were acting like they are trying really hard to make me insane. You are allowing their actions to effect you. People don't drive you insane, you are the driver, just listening to where these idiots want you to go.
&gt;its not fair but that's life. Try having a major heart condition or an un-treatable pain related problem and then you will see how unfair life is.
Well, I'm going to play devil's advocate for a second. If you believe that you will never overcome your ability to communicate to a team, you will not have meaningful work in the software industry. I've worked at a handful of consultancies, and the common thing between them is people who work well together (and get stuff done) will be promoted and congratulated, and people who do not work well with others (be it communication, attitude, etc.) will either be fired, or at the very least, never promoted, no raise, etc. &amp;#x200B; I think /u/realjoeydood isn't trying to dismiss what you have, but the reality is, people tend to loosen up around people who accept them, and if you're one of the few who don't, you're going to have a bad time.
Unless its a number instance num = new Number(123) // number object Number(num) // number primitive
Good God, do people actually like you ?
&gt; an un-treatable pain related problem Hey, that's me! Trust me, I know what I'm talking about.
Oh, I see. How do developers deal with this, I mean isn't it discouraging to learn a tool one month only to see it replaced by another months later? 
Modules are available both in [Firefox](https://hacks.mozilla.org/2018/05/firefox-60-modules-and-more/) and [Edge](https://blogs.windows.com/msedgedev/2016/05/17/es6-modules-and-beyond//)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [rwieruch/fullstack-apollo-react-express-boilerplate-project/.../**resolvers** (master → a61cb80)](https://github.com/rwieruch/fullstack-apollo-react-express-boilerplate-project/tree/a61cb80511b12e3dba83c2d5d112a5d7569e04e6/server/src/resolvers) ---- 
For the longest time you've been able to edit CSS styles from within JS. So when CSS introduces media queries, JS needs a way to work with those to continue being able to edit CSS styles properly. As far as I know, that's about all this is. Also, as with other CSS styling, you'll want to prefer defining those directly via CSS. Handling them via the JS DOM is for those use cases where CSS itself isn't enough - such as when you need variables depending on runtime state.
&gt;Best practice is to not client side render anything that needs to be crawled. Never thought I'd say this, but Trout Fucker, you're awesome! As a total non-dev, is there a way we can change the rendering for our site so it's not client-side? 
thanks to argument your answer
Thanks for the reply. I will look into this. As it is a node app and my users usually build from source was hoping to just post one solution but looks like not possible. Choco I think is also a solution similar to docker, but I was hoping someone out there has been through this with a client app before and able to do it somehow as simply as an npm. I was under the impression meteor took care of this but I neglected to remember that meteor requires an install also... which is probably how they get mongo embedded in all - its in the install files. THANKS
the weirdest people i know are programers. one guy barely spoke evenyually you will need to talk if you want to be a rech lead. if you do scrum daily stand upnwill require you to talk but for the most part us programers are strange birds
wow - this may be what I am looking for (at quick glance). Will try and let you know. Thanks!!
Is any of this still relevant today? 2 months have passed by... in javascript land that's like a year... :)
I would know, in case I have to declare a number taking account of the comment above, with an unknowed value at the beginning 
It can be difficult and really depends on the specific situation. 
I’m a co-worker of a guy that is unable to articulate his thoughts, feelings, or even discourse with people in a productive manner to get the job done in our tech company. It is extremely frustrating working with him as he constantly tries to misdirect the conversation instead of just directly answering questions.
var target_sheet = target.getSheetByName("TUESDAY"); // target var target_sheet = target.getSheetByName("WEDNESDAY"); // target var target_sheet = target.getSheetByName("THURSDAY"); // target var target_sheet = target.getSheetByName("FRIDAYI"); // target var target_sheet = target.getSheetByName("SATURDAY"); // target var target_sheet = target.getSheetByName("SUNDAY"); // target ​ in this block you are overriding the target_sheet variable in each line. It is applying it to sunday because that's the last line that assigns a value to the target_sheet variable.
&gt;Personally, I prefer the flexibility of simpler scripts (which is what I did for Mithril.js). I have not tried Nuxt or Vuepress. Hi Leo. Am I reading it correctly that you've made scripts for static site generation using Mithril.js? Something that I can get my hands on? :-) And by the way, are you at all using Mithril.js for your day job in any capacity?
Hi /u/techie_ninja, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Scoops_McGeee, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/tpiros, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `fullstack-developer.academy`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [fullstack-developer.academy](/search?q=%28and+site%3Afullstack-developer.academy+author%3Atpiros+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|70|89%
very cool. I like the TLDR nature of most pages
If I'm reading your example correctly, you have one slider per company. You initialize all sliders at once with the same configuration, and probably have one slider per company in your HTML. If this is true, then every individual slider is linked to a company, so simply 'taking the next company name' for every next AJAX call will not do. To solve that type of case, you have to further link the slider to the company name, in such a way that JS can pick it up. For example, assuming you're generating the HTML somehow (which already generates one slider per company), you can add a `data-company="apple"` to the slider's HTML element (ofcourse substituting "apple" with the relevant company name for each slider). The flexslider's `after` callback seems to receive a `slider` argument, which presumably is the sliding HTML element, therefore it's also the element with the data-attribute. So you can then fetch the relevant company name with something like `var name = slider.dataset.company;`, which you can then directly put into your AJAX data. As the names are now being sent through HTML, you no longer need PHP to output the companies into a JS array either. If that's not the use case you're actually trying to implement, then you may need to provide some additional information on what exactly you're trying to do.
Interestingly I don’t have social anxiety, but I have horrible GAD and Panic disorder - I go through spurts where I get panic attacks and often end up in the hospital. What I will say is the industry is more progressive than others, and you will definitely be given room to breathe in your situation. I’d avoid open office layouts though. That usually mean it’s more of a social culture with a lot of interaction. That doesn’t sound like what you’re looking for, and there are plenty of remote positions or offices with cubes. Talking to others at work in some capacity is unavoidable though. So trust me, I understand that you can’t simply “chill” your way out of anxiety, but you definitely need to improve your interactions however you can. It is a skill and it can be improved on. 
Look at all the people who already think you can do this. For one reason or another... We're all just awkward nerds in the same room of life.
You need a method to track your AJAX requests and a common handler function that is called on every succesful AJAX response/error For example a counter variable let count = 0; in every AJAX request you increment that count++; and on every AJAX response, you count it down. count--; if (count === 0) allDoneCallback(); 
Then you have your answer. Don’t do programming for a job.
I'll put it in my facebook. Good job.
Great work, I’m pretty new to node and now understand async/await far more than I did from earlier tutorials
&gt;mongodb-prebuilt-cross This one worked for me!! Thank you for the major time saver
Came here to see this comment
Usually by not always using the latest and greatest for production projects. For me, if something looks like it has staying power, I'll build something with it outside of the 9 to 5 to get to know it. If that goes well and I can see an advantage in using it, I'll try to incorporate it into a production project if it makes sense. For a lot of these technologies, you don't necessarily have to go all in right away and can build a component or two using it before retroing on it.
You might've found some bug. However the case you described worked just fine like this: `import { Selector } from 'testcafe';` `fixture \`New Fixture\`` `.page \`google.com\`;` `test('New Test', async t =&gt; {` `await t` `.typeText(Selector('#lst-ib'), 'google')` `.click(Selector('#tsf').find('[name="btnK"]'))` `.expect(Selector('#resultStats').visible).eql(true);` `});`
I don't suggest you take any job \*just\* because it pays well and would enable you to not talk to people... However, if you like programming and it interests you then go for it. It paying well should be an afterthought. Just my opinion at least... I know money is a big deal because it contributes to an individuals overall quality of life, but trust me. Working a job that you don't enjoy just because it pays well sucks a lot more then working a job you do enjoy that may pay less. It's your call at the end of the day. The software industry does tend to have a lot of people that are more reserved I feel though. 
good joke 🤪
It is possible. It is a common stereotype that people in IT are socially awkward. This is not really the case, but I feel that people in the field are more accepting towards those who have social anxiety or lack of communication skills if they are technically adequate. You may have some trouble dealing with managerial or sales people, but you could try and write them e-mails instead of taking meetings. Either way, I would recommend seeing a coach. They might not take away your anxieties, but could make it easier for you to deal with.
I’m planning to up-skill my node.js knowledge &amp; this is exactly what I was looking for. Kudos friend :)
It might cause a few embarrassing moments around those who don't get it, but just accept that going in, pre-forgive yourself, and you'll be fine. So long as you are good at the actual work. I would avoid applying to large corporations for now, they are the worst. Use your intuition about places that feel more comfortable. It takes many years, but slowly it will become less of a problem. You sort of forget about it, like you forget any sort of information, because that's all it is.
Really useful comment. Thanks!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [MithrilJS/mithril.js/.../**generate.js** (next → e62f0f3)](https://github.com/MithrilJS/mithril.js/blob/e62f0f38f63217bf85f358b67fd057f14dfacbe9/docs/generate.js) ---- 
Are you seriously implying that people aren't allowed to complain about their problems because someone out there has it worse?
use promises, and `Promise.all()` for example const getData = fetch('/api/data'); const getOtherStuff = fetch('/api/otherStuff'); Promise.all({ data: getData, otherStuff: getOtherStuff }).then(({data, otherStuff}) =&gt; { // data = response from getData // otherStuff = response from getOtherStuff }); (This may not be exact syntax, as im writing this off the top of my head and without testing any of it, but the general idea is there. `Promise` is vanilla JS and should handle all your needs)
No
No. You at least need JavaScript. Otherwise you can't do anything functional.
I know some medium level HTML and CSS and I tried to study JavaScript but I can not get more than basics like variables and objects I have trouble understanding ecmascript 15 and trouble understanding concepts. 
I had some issues with JS, but what really helped was working through the tutorials at SoloLearn. I then started over with the book Eloquent Javascript? Maybe following a similar route might help?
package.json and package-lock.json links lead to wrong articles (“lock” one leads to package and vice versa).
This doesn't do exactly the same, but I mainly ES6-ified it. function getPerformanceTiming() { const { timing: t } = window.performance; const PageLoadTime = t.loadEventEnd - t.navigationStart; const DOMContentLoadedTime = t.domContentLoadedEventEnd - t.navigationStart; const ResponseTime = t.responseEnd - t.requestStart; const Connection = t.connectEnd - t.connectStart; const Response = t.responseEnd - t.responseStart; const DomainLookup = t.domainLookupEnd - t.domainLookupStart; const LoadEvent = t.loadEventEnd - t.loadEventStart; const UnloadEvent = t.unloadEventEnd - t.unloadEventStart; const DOMContentLoadedEvent = t.domContentLoadedEventEnd - t.domContentLoadedEventStart; return { PageLoadTime, DOMContentLoadedTime, ResponseTime, Connection, Response, DomainLookup, LoadEvent, UnloadEvent, DOMContentLoadedEvent }; } function getTimingEntry() { const { host, pathname } = document.location; return { host, pathname, timestamp: Date.now(), pageTimings: getPerformanceTiming() }; } function addTimingToStorage() { // use a more custom storage location const { host } = document.location; if (!localStorage.getItem(host)) { localStorage.setItem(host, JSON.stringify([getTimingEntry()])); } else { const timings = JSON.parse(localStorage.getItem(host)); timings.push(getTimingEntry()); localStorage.setItem(host, JSON.stringify(timings)); } } const getTimingEntries = () =&gt; JSON.parse(localStorage.getItem(document.location.host)); addTimingToStorage(); console.log(getTimingEntries); * If you set a value on localstorage you should be sure that the script of the page doesn't also set a value. Perhaps set a localstorage item to a value more like \_\_\_MyCustomPerformanceSnippet\_\_\_. * IDK the performance API, just noticed that you're using \`navigationStart\` in connection with pageloadtime and domcontentloadedtime - is this standard? * Data is now saved in an array and then stringified.
Thank you
ps. I'm not promoting SoloLearn - but hey, it's free and there's a place you can ask questions and generally get a response. 
Yes. But you need design skills like Adobe CC, Wix, Wordpress, etc
This worked like a charm! I just modified it a little! Thank you!
Double Thank you! I've updated the repo with the license!!
Could you give a more high level description on what you're trying to create? Are you writing a NodeJS server and web browser is the client? Or are you trying to send HTTP requests with NodeJS?
I feel you. How does the saying go? "Hell is other people"?
Convert each ajax to be handled with promise. const request = () = &gt; { return new Promise((res, rej) =&gt; { .... res(data); }); } Now we can merge all request and wait for all of them to complete in parallel. Promise.all([ request(), request() ]) .then( () =&gt; console.log("all done") ) .catch( err =&gt; console.error("error") );
Take it how you want I guess, for me its more about realizing it can always be worse. 
I was not intending to point a finger at you here, my apologies. My point was more about realizing it can always be worse and using that as an advantage, it CAN always be worse.
`setValue (arg0)` on a Range object writes for each cell the same value. What you need is either to set the Range so only one cell each iteration is targeted or you use `Range.setValues (array of values)` and give it the array of all ticket ids.
Depends on your definition of "pays well". If you are lucky enough to be a US-person, good programmers working remotely with minimal face-time could 'pay well'. Communications can be carefully constructed before going outbound which can be considered a protective layer to cover the real problem. Where I'm from, at least what I'm being told, inadequate communication skills &amp; self-doubt is my biggest wall to the next level. Regardless how good of a programmer (I have over 10 years doing solely JS, still under-evaluated). The reality is, you desired to be paid well but not willing to give up something in exchange. What if I tell you that's a $10k, $20k, 50k/yr difference? Will you seek professional help to get you overcome this? &amp;#x200B;
Hi /u/InekeR, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/RiceKrispyPooHead, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/JoonDoe, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/yepyepcomputor, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/alenathomasfc, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/jcoolarts, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/timmylogue, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
No problem! :)
Good article but the takeaway that "react is evil" instead of "Facebook doesn't give a fuck about performance of their users" seems misguided. I love building tiny, performant apps using reacts component api (granted with Preact).
Many developers have social anxiety. I could barely give my update in our stand up scrums at first, it felt like I was about to throw up. I eventually went on to lead a team, run meetings, give presentations, etc. Just had to chip away at it. That, along with following some doctor's orders, I'm fairly comfortable with my team now.
Yes and no. Software development is a field that has less social communication on a daily basis than, say, retail or other popular career fields. You spend most of your time looking at your computer screen and inside your own head. Programming is a great hobby for an asocial person. It is also very important to note that 9 times out of 10, the thing that employers want from their software developers is _communication skills_. You not only have to write your code, but you have to explain how it works to your teammates. You have to work with designers to implement designs. You have to walk the less knowledgeable through different potential solutions to work as a team on determining the one that will be implemented. Communication skills are, almost unanimously, considered one of the most important aspects of a software development career. You will find communication skills less important in freelance, where you can function as a one-man army instead of a team. However, the pay for this on average is _significantly less_ and requires major _self marketing_ skills, which is just a specialized form of _communication_. I think the fact that your day is spent 90% of the time in your head on the computer is a great option for you. I think the remaining 10% is very important, and you should seek help in overcoming your troubles with articulating such that that 10% does not ruin your career aspects.
There are more options than just "getting over it." In particular, practice is the best medicine for communication issues. /u/realjoeydood stated that your issues will fade over time through _practice_. You are also free to practice before your career starts. You may also find the use of a therapist to speed up this process and relieve some anxieties that exist currently in your life.
I have two developers in my team, that were really untalkative. One got there way before I ever worked here, and is currently one of the best ones we have, if not the best one. I didn't believe people when they told me "he used to not talk to people at all for like a year". The second one has been really quiet, and I've noticed that about him the moment I got in here. A year later, he's telling us stories of his 7-day long festival binge, drinking at parties with us, and is overall a great developer. Once you get used to the team, it starts to feel a bit more familiar. You spend so much time with people, even while not interacting you grow to like or hate some of them. You don't need to interact with anyone at all, since you could just be assigned a ticket, told to work on it, wear your headphones all day, and simply do your job. Noone will fault you for doing that. 
I've been trashing a lot of these nodejs info dumping grounds (for being less-than-helpful if not wrong) but so far this one looks quite useful! Thanks!
The argument needles (and all rest parameters) are an array of the "rest" of the arguments provided after haystack - in the case of your two function calls, an array of length 1, where the only element of that array are the letters z (in the first call) and b (in the second). The for of loop is simply looping through that "needles" array. Does that help?
"Conclusions: React is evil." What a horrible conclusion. The article was sorta interesting until this; seeing the different versions of FB and their memory usage. But to go from "Facebook, one of the largest companies with the most complicated sites uses a lot of memory and bandwidth" to "and therefore the underlying technology they use is evil, rather than their specific implementation" is harmful.
Rest arguments act like implicit arrays. So defining and call containsAll like this: containsAll(haystack, ...needles); containsAll("banana", "a", "b"); is similar to doing it manually like this: containsAll(haystack, needles); containsAll("banana", ["a", "b"]); 
Oh ok, so in this case it does only one loop right?
Pretty good. I'll keep it in mind. One thing I didn't find there, the child processes. I think it would be nice to have in that handbook :)
Nope!! Not from Pakistan.
You spoke Urdu so i asked. 
The way I see this sentiment, it is meant for personal use. This realization is for YOU to stop beating yourself up, or pitying yourself, or whatever. You can't tell this to someone else because the only way it works is when you come to a point in your emotions that you're able to see a bigger perspective and move on from the negativity. The sentiment doesn't mean you can't feel bad about something, it only provides you with the means to stop feeling bad about something and to have a more positive view point. The way you are using the sentiment is creating more negativity, which is the opposite effect intended.
Why does this comment fit so well here?!
I am a designer/developer with OCD, depression, anxiety. I am also a recovering anorexic which was caused by my OCD (contamination affliction that focuses itself on food-borne illnesses making it extremely difficult for me to eat). I know what it feels like to hear advice that comes from lack of insight into disorders and afflictions. When people hear OCD they think of whimsical traits like being organized or having to turn a light switch on and off. When people see how skinny I am they envy me. When I'm held in a thought loop and end up in a panick attack I'm told to relax and let it go. It's not helpful and it can be offensive and frustrating. But you know, while their advice is cliche and all, their willingness to give is not. And it never will be. I'll take "just chill" or "eat more" over nothing at all anyday. Because at least someone is taking the time to care and say something, and at the end of the trail support is the real healer. Take all you can get. You and I both know some of the things we were "given" aren't great. So when something positive comes along, use it to be positive. Even if the advice or comment aren't definitively helpful, the compassion always is.
The `Map` object does not have a `.map()` method attached to the prototype, so you can't use .map on it. Were you mistaking `Map` for an `Array`? [Here's the MDN Docs about `Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)
2nd
Is there a reason you can’t just perform all the checks in a single filter function? Nesting the filter calls like that seems a bit overly complex to me. ``` const filterProducts = (products, category, name, price) =&gt; { return products.filter((product) =&gt; { if ( (category &amp;&amp; product.category !== category) || (name &amp;&amp; product.name !== name) || (price &amp;&amp; product.price !== price) ) { return false } return true }) } ``` Note that this will break if any of your values evaluate to false (0 for price or “” for category as examples). That can be fixed by checking if they are undefined or null rather than if the value itself is truthy. 
Try joined = myMap.entries().map((v, i) =&gt; v + " - " + i );
You rigth, i was using an example from a google search
The way i did it seemed cleaner and many ppl have said to me that breaking bigger functions into smaller ones is generapy a good thing.
Your current function won't filter anything since you are assigning the filter parameters to the product object instead of testing for equality: eg `product.price = price` should be `product.price === price` Also, you can filter everything at the same time, saving a lot of iterations const filterProducts = (products, category, name, price) =&gt; products.filter( p =&gt; p.category === category &amp;&amp; p.name === name &amp;&amp; p.price === price )
I saw it ,i copied the first one and just changed the arguments. Thnz
Not being sour or anything, but if you can't ask for help what is the `help` flair for?
Breaking functions into smaller ones is really not generally a good thing and I wish people would stop parroting it without context. Here you've managed to turn what should be an O(n) operation into an O(n^^3 ) one. 
Although this is generally true, In your case there is no real benefit: the function you are splitting is very small, and unless you are planning to use the new ones separately, they are just making the code longer, and the nested function calls are making the readability worse. There is also the problem of performance, since you are filtering the same data three times instead of just one, hence making everything three times slower
Thank you.
yeah, np, again really cool stuff, probably gonna play around with this this weekend
&gt; So why does that not show up on caniuse? How should I know that I don't maintain that site sorry For Edge and Firefox you're right, you might have to enable a flag but I mean that it's possible to run your modules in those browsers 
&gt;How should I know that I don't maintain that site sorry It's because it's hidden behind experimental features. So it's not supported and you can't rely on it. 
Yeah, maybe Babel is under the hood somewhere? I know ATL supports Babel, but I dunno if it relies on it? So, you're saying it likely doesn't matter, but that I could probably get away with *just* Typescript + Webpack, and remove that additional layer? Are there any particular "Pros" to this vs Babel with TS plugin + Webpack that you can think of?
IndexedDB is basically SQLite
We need to shore that up; at one time we were more lenient with allowing help posts, but not anymore. There's still some help posts that we allow, but they have to be either fairly advanced or otherwise nuanced.
I see thanks for answer
Yeah, this is honestly what I’m thinking. 
From Silicon Valley perspective. Well you can be Big Head if you want to a pursue a career that pays well and seems promising or if you are good then people like gilfoyle will gladly work with you and make you his Anton. "Yeah Anton doesn't called me anything. It grimly does it's work and sits motionless until it is time to work. We could all take page from his book" \- Gilfoyle
[This](https://blog.twitter.com/engineering/en_us/topics/open-source/2017/how-we-built-twitter-lite.html) says React/Redux, but poking at twitter.com on desktop, I see jQuery and jQuery UI.
[removed]
Too bad it's not been updated recently, I have to imagine there are some nice changes from recent browser updates that could be taken advantage of.
It bothers me that this functionality is possible but not a core part of the language. I wonder if other languages have this issue?
What what! This totally works! Thank you! I had no idea that the FileReader object even existed.
Hi /u/vbroskas, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Don-g9, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/psiphi75, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
I write mainly back-end JavaScript (a.k.a Node.js). However, I pick up various open source projects and contribute to them in different ways. Having one set-up that works for all was important for me, writing vanilla JavaScript is important too. TL;DR I got the following tools to work together to make the ultimate JavaScript "IDE" (for me): * TypeScript TypeChecker; * ESLint; * JSDoc; * Prettier; and * VS Code helps too. Would be glad to hear your comments, what works for you. The above works for me. ​
Idk why you got downvoted. You're right. People are going to do whatever they do. You can't control that. What you can control is your reaction to them. 
So put in the effort and work. The point is that it's able to be overcome. It took me two solid years of working at it to finally feel comfortable and confident and holy shit did I suffer through some shit in the process but unless you do something about it you'll never be able to beat it. 
+1 for ESLint I personally like WebStorm over VS code
I am on my phone, sorry for formatting of the code. ... // Get date string then split from dom const firstdate = moment([here_goes_date_strings]); const today = moment(); const differenceInDays = today.diff(firstdate, 'days'); if(differenceInDays &gt; some_amount) { // Change status text }
Hey! I'm in the same type of boat. I'm a junior dev and Grunt is still used at my workplace, however I would like to use Webpack instead. Do you have any good resources that I can use to convince the other developers? 
Whatever it is it’s so slow to boot up on mobile that I instantly regret clicking links. 
Yes, WebStorm is a very good IDE for JavaScript and it's my second favourite.
Didn't know I needed this in my life but I do.
In what earthly way is IndexedDB remotely like SQLite, apart from the fact that they both store data? IndexedDB is a schemaless NoSQL JSON-based key value store with specific path-based indexes you have to restart the database to generate. SQLite is a RDBMS supporting SQL queries, with structured tables, types, etc. They are about as far away from each other as you can get, in terms of different approaches to storing and querying data.
You obviously haven't been paying attention. You realize that you failing to understand that most people don't thoroughly read documentation reflects just as poorly on you as people's ignorance of specific aspects of the specs reflects on them?
So you're saying, that using Babel because it's a superior product and offers other added value, to transpile TS code into JS, is better than just using the raw TS compiler to transpile?
&gt;They didn't like the &gt; &gt;visual design That would annoy me, where does it say "designer" on my CV?!
I haven't been paying attention... to what exactly? What are you even talking about??!? I am no longer interested in this conversation.
I’ve used this before in a raspberry pi / arduino project and it’s a great API! Really easy to work with. 
Pretty useless
Preless. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'Pretty useless'. To learn more about me, check out this )^[FAQ](https://www.reddit.com/78ilq0).
Is there somewhere that collects super high quality animations like this one
OP, I too suffer the same hardships. It can be troubling for me to come in to the office every morning, knowing I'll eventually have to do some thinking on my feet. I think I'll never be at the same level as my boss or even my colleagues, but in the long run, I _never_ regret coming in to the office, even on the days I feel I almost can't handle my anxiety. I have come to learn that it's okay to say "I need a sec" when someone asks me a question I wasn't prepared for. Over time, I've come to feel better overall about my communication skills. Basically all I'm trying to say is that if you want to find success in a career path like this, you absolutely can, even if communication is something you feel you need to work on. It will come with time, believe me, it will. You can't get better at something until you just do it.
needs some proofreading, but what a great resource. Thanks!
Yes, its acceptable. There's nothing requiring that promises be resolved with explicit values. If you don't give it anything yourself, `undefined` will be used.
[`axios.get` _is_ a promise, and it _is_ being returned.](https://i.imgur.com/36Nj210.png) 
Rather than use resolve(); use return this.results; You should then be able to chain the promises. They just need to return a value in every then handler. 
You can... but I would say don't. Your function is called getResults ... but it doesn't get anything. It sets some private value which is harder to debug and is a side-effect. Instead have getResults return the problem that resolves to the value (i.e. res.data.recipes), and set this.result to THAT, like this.results = await getResults()
Well, it does get data from the API and assign it to a value of the search object, it is just the method to fetch the API and store the result 😅
Are you 100% your function is returning the promise? I see you're putting it on an object which means there is potential it was copied wrong
I would try tomorrow because now I am just stuck. Thanks for your help, I think I need some better understanding on promises.
Saw a great demo of it today at jsconf 🎉 looking forward to seeing if I can integrate it into any pet projects
I think the function is not returning a promise, because after the first 'then' the return value isnt a promise anymore... maybe?
The example pomlife gave should work as is. The first then resolves that value to the promise which is returned, it doesn't just straight return the value of this.result For your variable state.search, is this created like so: state.search = new Search(query) That said, I would personally throw away this class and just call a function to call axios with the query that you want to use, you're making it more complicated than it needs to be by instantiating a class instance and then calling the function which sets the result on the instance for you to then read. You can just do this: function getResults(query){ return axios.get(URL) } getResults(query).then(result =&gt; {//do whatever with result}) And get your query directly on your state or however else you can get to it.
Did I read that right? Code is running via Node on the laptop so tethering is required? 
There are NodeJS micro-controllers! Check out the Tessel, it’s pretty neat.: https://tessel.io/ There’s Espruino as well, though I haven’t used it: https://www.espruino.com/ (Not a sponsored post but I wish it was, cause I need a few more.)
 export default class Search { constructor(query) { this.query = query; } async getResults() { const response = await axios(`http://food2fork.com/api/search?q=${this.query}`); this.result = response.data.recipes; } } I don't know why you would do this though - I would assume a method named "getResults" actually returned something. It doesn't make sense.
I do it every time I tell my girlfriend I'll quit drinking 
Does it support PostrgeSql?
Yeah just find those pieces and leave jQuery in 2010.
Damn nice. Learned lots of new things. Thanks for this great resource. 
You can just grab the code for whatever widget you want and not use the rest.
https://www.amazon.com/Smarter-Way-Learn-JavaScript-technology-ebook/dp/B00H1W9I6C
@flaviocopes offtopic: what did you use to create that?
[removed]
"Javascript: The Good Parts" [https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742](https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742). I think it is must read for any js beginner. 
This is pretty neat dude
Kung fu bow. 
This is a great resource, thanks!
preact-compat (~4kb) and a modular UI lib like antd: https://ant.design/components/dropdown/ https://ant.design/components/tree/ https://ant.design/components/table/
Are you kidding? This is the best field for you...I talk to the guy *I sit next to* all day...on slack.
I've never tried it myself but https://getmdl.io/ looks ok and its only 208kb. How small are you trying to go?
[Yes](https://join-monster.readthedocs.io/en/latest/dialects/)
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://join-monster.readthedocs.io/en/latest/dialects/) - Previous text "Yes" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Yeah. It took me to an Apple phishing site.
There's nothing wrong with using stable, tried-and-tested, wide-spread technology, which jQuery is. jQuery UI might be a different thing, but jQuery's still great.
Generally speaking, this isn't great functioning design. A method called `get&lt;Something&gt;` should not set some internal state value - it should just return the value, and then let you decide how to handle that later on. The less state you hold on to, the better off you'll be. State is evil. I would argue that storing your query in the class constructor is unnecessary state. What is the simplest API that will solve this problem? To me it's `getRecipes(query).then(results =&gt; // do stuff with results);`. It's basically a clean, simple pure function. No state. No side effects. Just input and output. Having to instantiate a new search instance with query state, and then call a generic `getResults()` on it to hydrate the search class state with data, which you then still have to extract out of it anyway, just seems unnecessary statefulness to me. 
Yup that’s my point to OP.
Espruino is not NodeJS. I highly doubt this would be compatible. It's more of a different purpose.
Links should be anchor elements both for semantics and accessibility.
sure you can
Agreed. "Old" is not synonymous with worse and if your priority is stability and your requirements don't prioritize cutting edge then Jquery is perfectly functional. &amp;#x200B; I agree that it's less exciting, but that's a separate thing. &amp;#x200B; Using jquery is nothing to be ashamed of, if it's an informed decision even while aware of the current state of the art. Just like using your own library from 2012 that is nonetheless 100% adequate.
Uuu thank you for telling me, that slipped under the radar!
Going to add this next, thanks for asking!
Self-hosted GitBook ([https://github.com/GitbookIO/gitbook](https://github.com/GitbookIO/gitbook)) It's very cool because from the same folder structure you can generate both the site, and the ebook (which is PDF, ePub, Mobi), and the code snippets are all formatted nicely (something I struggled to find a proper solution for)
Your discord ID isn't valid.
Recently the Angular Team has released their brand new version Angular 6 Beta on 28th March 2018 with lots of new features, not only will Angular 6 be smaller, faster and easier to use but will also make developers life much more easier. 
That’s pretty neat! That dash in the name bothers me for some reason though
You could use https://github.com/gajus/eslint-plugin-jsdoc/blob/master/README.md in conjunction with https://github.com/okonet/lint-staged
 Advice first: If you ask this kind of question you really need some basic knowledge before jumping head in. get some Examples working first and a feeling for WebRTC and JS. To answer the question, if a user joins a group you have to inform the backend that user "a" is in group "y". The backend always holds which user is in which group. if a user speaks you send only to the users in the group. 
Yes, Frontend handels: Init Connection, Voice Event handling, Join and Leave Backend (socket.io in your case) Handels: user regestration (set socket id etc.), grouping of people to send to, &amp;#x200B; "On Voice" &gt; Send To backend &gt; check which group sender is in (based on socket connection id) &gt; send to users in group
No problem. Thx for a nice recourse!
https://javascript30.com from Wes Boss
I see no reason why you guys bullying eachother with downvotes, I'm not here to find the silver bullet, I'm here to gather opinions and gain some knowledge, so every post is valuable.
Because you are adding javascript inside head. DOM is not loaded yet, so the element you're trying to access, doesn't exist. You have to either set document.ready(jquery) or DOMContentLoaded in your js, or place the script before closing &lt;body&gt; tag.
People like validating their own incompetence. There is honestly no reason to use it. I've been through this argument many times and it always boils down to saving a couple keystrokes, ignorance of standards, or superstition. Besides that, even if you are, the UI components you mentioned **are** very easy to build yourself and there are plenty of tutorials out there.
I think it may seem reasonable at first (to have all functions documented) but could detrimental in the long run. Do really ALL functions be documented? Even smallest internal ones? What if somebody is writing some unstable code (unstable = to be changed soon)? E.g. if somebody makes bigger refactoring and changes/create multiple functions at once? (half of them will be probably removed in the coming days because they will be subject to further refactoring). Writing docs for such functions is just waste of time. I think self-discipline and Code Review would be better solution to ensure good amount (and quality!) of docs than a pre-commit hook.
In the projects we have where I work we don't have to do this kind of refactor and we have enough time to write doc, if someone doesn't have enough time to write a jsDoc comment so it doesn't have time to do code review and so on the docs stay in the code and pr will be forgotten, new devs come frequently so they will know how that code works, I've already had issues trying to understand others People code many many times, if they get tothe point of documenting it they will also improve their code
This! Code should be self as documenting as possible. Meaning that of your code is readable then there's no need to document functions. Personally I'd spend more time documenting a readme file with the projects caveats and getting up and running than write jsdocs
Thank you!
How about: &amp;#x200B; getResults() { return axios(`http://food2fork.com/api/search?q=${this.query}`) .then(res =&gt; { this.result = res.data.recipes; return res; }) } &amp;#x200B;
[https://i.redd.it/ks4vuhowecp01.png](https://i.redd.it/ks4vuhowecp01.png)
Your math looks correct, for as long as requestAnimationFrame remains at 60fps. Just add a quick MAX_SAFE_INTEGER check, reset your counter and move on. 😀
The fact that its a number object is unnecessary in the first place. i.e. var num = new Number(123); Here, `123` is already a number. Only a special purpose script would require a number object.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax —&gt; Spread aka ...
This doesn't apply to what I said: Don't document functions, this is why we have type script. Comment the shit outta your code, just in the right places
Even more hilarious: clear comments from people writing code that’s not clear at all. Pure joy of reading.
¿Que?
How much are you paying?
It’s still a proposal that isn’t well supported. Compatibility tables here say no Edge or Safari. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
Nope, too late, Deno exist. You all wasted your time.
Thanks a lot! I will add a "Further reading" or "Resources" section and add this link to it. 
Ah, yes you are right. Actually your example of spread on a nested field is really useful. Someone should write a blog article on it 😀.
depends on the context, can be spread operator or rest operator. when used as function argument it is rest operator -gathers the 'rest' of arguments as one array. if it's used with array or object it is spread operator and populates an array items or object props with items/props of spreaded array/object.
I think socket.io has built in rooms, which users could join with the name of the room or something. https://socket.io/docs/rooms-and-namespaces/
I know that's why I was thinking of using that. Thanks 
I did not say that it's a JavaScript app
How are you planning on doing the webrtc with multiple people? I tried something similar a while back and couldn't find an easy way to do it. I had every user connect to every other user, but I feel like there should be an easier way
I guess the user emits an event to the server (with socket.io `talk` or something like that) then the server sends that mediastream object to all users in the room
I will take a look. Thank you
with git, can you choose which branches these hooks apply to? I see your point with regards to say, a feature branch. But once you're ready to merge (thus the feature is stable), then the precommit hook can kick in. &gt; Even smallest internal ones? These are probably the most important ones to document because they are small. You don't need to document what the function is doing, but why it even exists in the first place. For example, I have written a small function, called "slugify", that takes an arbitrary number of arguments, and converts them into a string that is useful for DOM IDs or other attribute values. It's very small, and it's obvious what it's doing with its input and what the output will be. It's just after all, a series of string replacements. But I didn't document what it does, I documented why you would use it. 
If it's an error you know how to handle, then handle it even if you aren't sure it'll ever occur. But yeah there's no real reason to track how many frames you've rendered, at least not in your current use case. requestAnimationFrame gives you a high res timestamp so you should use that instead
[https://imgur.com/7V87CSh](https://imgur.com/7V87CSh)
[https://imgur.com/7V87CSh](https://imgur.com/7V87CSh)
Even ignoring the frame's delta time, it looks like there could just be 2 values, and they could alternate between them, instead of incrementing infinitely.
No, that's all Browser/OS controlled.
You can definitely resolve with nothing. That will just send `undefined` along which is very common. That said, `axios` returns a Promise so you don’t have to construct your own. Just return the axios call directly. 
Show me function docs and I'll show you some out of date docs that more often than not get neglected by the developer who refactored the code
Show me function docs and I'll show you some out of date docs that more often than not get neglected by the developer who refactored the code
Hopefully http://lowjs.org/ also gets released in the future :)
Definitely true. I have seen some projects that adopted a draconian policy of failing the build if documentation was in place. One guy demonstrated a "cool" tool that generated stub comments by reading the name of the function or class. The codebase must have turned to shit by now, since this is what people did. Writing good documentation is very difficult, and the thought that you get lots of good documentation by simply getting more of it is stupid beyond measure.
yeah. most people wanna see what you can do. so have a piece of paper that says you know stuff about computers is cool. But a lot of employers want to see examples of your work that demonstrates your knowledge of the subject. 
Okay so this isn’t really ideal for Arduino but the Pi or something else w Linux. Thanks for the clarification 
Okay so this isn’t really ideal for Arduino but the Pi or something else w Linux. Thanks for the clarification 
JavaScript powers most of the front end these days - and increasingly the back end, but it's definitely not as established on the server. So yes, if you want a job, JavaScript can be a route you take to get there. But it is not the only path. I'm primarily a self taught JavaScript developer and I have a pretty decent job and lots of opportunities. But it takes a while to get there. JS has so many gotchas and little quirks that I feel like I still learn something new everyday after working with JS daily for 4 years. I guess evaluate what kind of job you think you might want in the industry and then decide what languages and tools you need to know to get there?
I use a [TSLint rule](https://palantir.github.io/tslint/rules/completed-docs/) for that. The linter runs before the code is pushed. Keep in mind you can use TSLint not only with TypeScript, but also with JavaScript.
I'd rather call that method `make&lt;Something&gt;`
Yes; when elements are removed from the document they are garbage collected (unless there are variables somewhere holding references to those elements), and the event listeners attached to the elements are also garbage collected (unless there are variables holding references to those listeners).
Why don't you just set updated to false at the start of the loop and at the end of the loop you change it back to false so it'll track it without needing the number?
Silicon Valley companies hire the top graduates of *good* bootcamps, like Hack Reactor in San Francisco (I should know, I hired two). They'll also hire anyone with equivalent *demonstrable* skills. This means two things: having a comprehensive understanding of not just Javascript but also the whole larger ecosystem (a framework like Angular, Vue, or React, Babel, Git, etc.) Boot camp graduates spend three months, typically working 12-hour days, being trained by skilled professionals, to master those skills. Since you don't have such skilled teachers you should expect to put in *at least* as much time. Then, once you do, comes the second part: demonstrating your competency. Hack Reactor invites companies at the end of the course and students get to demonstrate their final projects so employers can tell who actually has the skills necessary. Since you won't have that you'll need several (or at least one very good) open source project(s) which demonstrate your competency both in terms of being great applications that do something cool, and in terms of having well-written (ie. readable, tested, etc.) code. So yeah ... none of what I just said = "guaranteed". But if you put in the time, learn the skills, and then build stuff that proves you learned the skills, you absolutely can teach yourself into a web dev job, especially since it's such a quickly growing area.
I couldn't get the second player to fire :( &amp;#x200B; player1 W - move up A - move left S - move down D - move right F - fire player2 Arrow Keys are control to move. fire --&gt; \* &amp;#x200B; Is "\*" the fire key?
Would like to know more about have reactor , I am from India by the way , but I am open for jobs and opportunity in US .
https://www.hackreactor.com/ I'm not affiliated with the school in any way, and I can only speak to their in-person training (not their online courses, although I'm sure those are just as good). But I can say I went and visited them for one of their "final project show-off days", and wound up hiring two (really great) employees from there.
By doing this you will get a lot of documentation, but not very usefull one. &amp;#x200B; Funny how people go nuts over code size and keep refactoring to reduce it, however more docs is always better. &amp;#x200B; I only ever used pre-commit hooks to lint and to enforce a structured commit mesage.
I know English very good , and isn't a problem for me . Let's see about online courses 
It's important to understand the dividing lines in browsers. One very important line a web app can never cross is having any control whatsoever over the user's system. Web apps stay in the browser, and browsers make *certain* they stay that way. For your app it really sounds like you should just let people worry about where they put their own files. Once they open their first file from the downloads folder that will become the default folder (at least in Chrome) the next time they try to open a file, so your desired goal (opening into the right folder) will happen naturally. * That being said, there are ways to control such things using browser plug-ins, and possibly (depending on the browser?) to do it with extensions too. But again, you really don't want to.
Awesome, that will definitely be an asset for you.
Actually showing the operator in your example would have made this worth an upvote.
Just learned about this in one of my last projects and wrote a react HoC that takes a breakpoints object, adds listeners, re-renders when breakpoints change, and passes the active breakpoints to the wrapped component: function responsive(breakpoints) { return Wrapped =&gt; class Responsive extends React.Component { state = Object.keys(breakpoints).reduce((breakpointValues, key) =&gt; { breakpointValues[key] = false; return breakpointValues; }, {}); constructor(props) { super(props); this._queryList = Object.entries(breakpoints).map(([key, breakpoint]) =&gt; { const query = window.matchMedia(breakpoint); query._key = key; query.addListener(this.computeBreakpointMatches); return query; }); this.computeBreakpointMatches(); } computeBreakpointMatches = () =&gt; { const { state } = this; const newState = {}; let changed = false; for(let query of this._queryList) { const key = query._key; const { matches } = query; if(state[key] !== matches) { changed = true; newState[key] = matches; } } if(changed) this.setState(newState); }; componentWillUnmount() { for(let query of this._queryList) { query.removeListener(this.computeBreakpointMatches); } } render() { return (&lt;Wrapped {...this.props} breakpoints={this.state}/&gt;); } }; } @responsive({ large: 'screen and (min-width: 1100px)', medium: 'screen and (min-width: 700px) and (max-width: 1099px)', small: 'screen and (max-width: 699px)', }) class MyComponent extends Component { render() { const { breakpoints } = this.props; if(breakpoints.small) return (&lt;div&gt;Small&lt;/div&gt;); if(breakpoints.medium) return (&lt;div&gt;Medium&lt;/div&gt;); return (&lt;div&gt;Large&lt;/div&gt;); } } 
&gt; What the code above does, is to spread over the adrian object and get all its properties It doesn't go through all properties, only own, enumerable ones. &gt; It’s a similar situation with arrays. Except that instead of spreading over keys and values, the operator spreads indexes and values. Not indexes and values, just values &gt; Unlike object spread, where you won’t have duplicate properties because that’s just how JavaScript objects work (you can’t have an object with two fullName properties), with arrays you may end up with duplicate values... This isn't exactly the same thing. You can have duplicate values in either case. And in both cases you can't have duplicate keys. But because array spread considers only values, not keys (indexes), there's no concern for collisions. For arrays values are inserted into the array at the appropriate position and keys (indexes) are generated automatically based on that position. &gt; Think of it as a replacement for Array.prototype.concat. This is not exactly the case. While object spread does very much provide functionality similar to `Object.assign` (not mentioned), array spread doesn't exactly work like `concat`. The biggest difference is that array spread uses iterators and is not specific to array values. That means you can use things like strings and spread them out within an array - something concat does not do: [ ...'abc' ] //-&gt; ['a', 'b', 'c'] In fact, array spread only works on iterables, and only includes iterated values in the resulting array whereas `concat` adds values from within arrays, or non array values directly: arr = [ 4, 5, 6 ]; arr[Symbol.iterator] = null; [ 1, 2, 3 ].concat(arr); //-&gt; [ 1, 2, 3, 4, 5, 6 ] [ 1, 2, 3, ...arr ]; // Error, not iterable obj = { a: 4, b: 5, c: 6 }; obj[Symbol.iterator] = () =&gt; Object.values(obj).values(); [ 1, 2, 3 ].concat(obj); //-&gt; [ 1, 2, 3, { a: 4, b: 5, c: 6 } ] [ 1, 2, 3, ...obj ]; //-&gt; [ 1, 2, 3, 4, 5, 6 ] // works because iterable &gt; When used within the signature of a function, where the function’s arguments should be, either replacing the arguments completely or alongside the function’s arguments, the three dots are also called the rest operator... Uses of "arguments" here should be "parameters". Parameters are the variables used in the function definition. Arguments are the values passed into the function when called that get assigned to the parameter variables. &gt; To manipulate this object and use array methods on it such as reduce, from my previous example, you’d have to do the Array.prototype.slice.call(arguments, 0) thing. Technically, you would need this because you _can_ use reduce directly on `arguments` as it's generic enough to work on array-likes. Other situations may require this conversion, but the reduce example wasn't a good one. &gt; This should be everything you need to know to be productive with the rest/spread operator in JavaScript. Missing is spread in function calls ;) sum(1, 2, 3, ...[4, 5, 6]); As with array spread, this works on iterators placing values from iteration into the ordered arguments.
Have ur upvote while i show myself out the door..
Method 2 runs faster on my iPhone, FWIW
Each event is attached to a certain element(s), so yeah, they are removed together and no longer occupy memory, that's the correct answer
&gt; I had every user connect to every other user WebRTC is peer-to-peer. This is the correct way to connect everyone.
Yea that's why I did it, I think for some applications it might be better to pick a "server" out of all connected users like some multiplayer games seem to do
Do you have a better suggestion, like how to make in a friendly way the devs to produce documentation, update the readme and so son?
Sorry but this is garbage answer. Others provided much more maintainable code.
You could use a mixture of [eslint](https://eslint.org), which has rules that allow you to enforce JSDocs, and [husky](https://www.npmjs.com/package/husky) which will help you setup git pre-commit hooks.
Aaaaand I will ignore this tool because of OP's sneaky tactics. Thanks Plorntus!
Only because that's an additional loop over a million items. Maybe that's not a problem tho, I will have to test.
 'You\'re a lewd, crude, rude, bag of pre-chewed food dude',
I'd say that learning good design patterns and testing approaches is more important than k owing JS really in depth. You hit the point of deminishing returns with a language, learning all of its janky edge cases and how absolutely everything works under the hood is less important than writing high quality code most of the time. 
Thanks :)
If it's used in an object `{...obj}`, it means `Object.assign({}, obj)`. `{ a: 1, b: 2, ...obj1, ...obj2, ...obj3, c: 3, d: 4, ...obj4 }` =&gt; `Object.assign({ a: 1, b: 2 }, obj1, obj2, obj3, { c: 3, d: 4 }, obj4)` If it's applied to an array, it means concat: `[ 1, 2, ...arr1, ...arr2, 3, 4, ...arr4 ]` =&gt; `[ 1, 2 ].concat(arr1).concat(arr2).concat([ 3, 4 ]).concat(arr4)`.
I hope it's stock options coupled with 'exposure' and 'experience'... sign me up!
Yeah, solid plan. I looked at that as well and will likely go the central server direction when I get back into it. Of course, I was only using the data channel, not sure that setup will work for video or voice.
I have absolutely no qualms with someone advertising their own work, because I understand that if you work hard on something, you need to advertise to build a user base and make money. It's actually quite smart for startups to use things like Reddit to build a following. &amp;#x200B; This kind of shit is sneaky though and gives me a really gross feeling.
To answer the second question, no. Changing an elements innerHTML will not remove its event listeners. You can use .removeEventListener to remove an event listener.
Is the CSS grid better than Bootstrap flexbox of columns?
Why?
&gt;A quoted key would be treated as a string by the JavaScript interpreter, meaning that reserved words could be used safely.
Well take a look at the alternatives... YAML? _guffaw guffaw_
No way
&gt; They had used do as a key, but do is reserved. Since JavaScript has so many reserved words, Crockford decided that, rather than avoid using all those reserved words, he would just mandate that all JSON keys be quoted. A quoted key would be treated as a string by the JavaScript interpreter, meaning that reserved words could be used safely.
I'd say THE biggest reason JSON is better than XML is the readability. IMO you really need to focus when reading XML, but in JSON the structure is clear from the first glance and you can easily spot the data you are interested in.
&gt; “The good thing about reinventing the wheel is that you can get a round one.” ***SHADE***
"Secrets of the JavaScript Ninja" is a fantastic book, although maybe a little advanced for you if you're just two weeks into learning. But keep it in mind as a second book. [https://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/1617292850/ref=sr\_1\_1?ie=UTF8&amp;qid=1535143336&amp;sr=8-1&amp;keywords=javascript+ninja](https://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/1617292850/ref=sr_1_1?ie=UTF8&amp;qid=1535143336&amp;sr=8-1&amp;keywords=javascript+ninja)
I had to press both fire keys at the same time, and the second fire key had to be on a num pad.
If you will excuse my usage of jquery $('.element_target').children().remove(); $('.element_target').unbind(); 
Exactly. Size reduction comes in a close second, imo. I mean, it's not like that difference in data is huge, but in a world still without any truly unlimited data plans (i.e. putting you at 2g/3g speeds after X GBs), size reduction is still very important and relevant, especially when certain websites could have hundreds of AJAX calls just on page load alone. 
I appreciate that, I definitely will
personally would not use pixels, would use fr or vh &amp; vw also, you shouldn't have to get these weird percentages, the image size should really adjust itself inside the grids
My first experience with YAML was editing Command and Conquer config files and it scared me away from programming for a couple of years.
Size reduction is, I'd argue, more important in dev than prod. Not only can I easily read JSON, 100 lines of it has a lot more information (vs data) than 100 lines of XML. &gt; Oh, we're opening another `&lt;comment&gt;` object? Wowzers. Oh and now we're gonna *close* it? Holy shit, edge of my seat. vs &gt; Here's the pile of crap I call "comments". It has `"comments".size()` members.
I like to use husky for pre-commit hooks, it integrates directly into you package.json. https://www.npmjs.com/package/husky There are some eslint rules for JSDOCs you'd probably have to check them out to know if they are suitable for your project, but they tend to be pretty good!
Staticly typing =/= documentation and you will hate yourself if you try to substitute one for the other.
Man! .Net, SOAP and XML will eat the world! Everybody at 2001. 
Hi /u/TunnyTuna, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
I think it boils down to simplicity. XML had a whole lot of stuff like namespace, schemas, complicated entities that are not that useful, plus they don’t map very well to data types in most programming languages.
If you're doing it on AWS, why not buy the domain from AWS and use ACM?
You're right. It would be easier to do it that way. Pushing it to aws in this article was an optional step. Main focus was intended to be on Let's Encrypt. Its just easier to test with AWS. 
Check out json5.
Well, to be fair, it really surprised me too :) But, alas, while - "foo" - "false" - "5" is indeed an array of strings, - foo - false - 5 is an array of string, bool, and number.
XML is overly verbose for daily grind while YAML is confusingly sparse.
missing indentation?
nope, that indentation is valid :)
Ok, good to know! I was considering getting rid of local storage in favor of files in folders, but I guess I'll keep it. Thanks for the perspective.
I believe 0x13mode got it right, a strong code review process and self discipline are the way to go. Honestly it also depends on who will consume your docs, is it only for devs? or maybe it's used to build a pdf for some kind of report you need to deliver to your client, these things can be a huge factor. Decide whats the purpose of the docs you want written then look around for ways (githook or custom eslint rules) to enforce the kind of docs you need. Also typescript can help a lot in terms of reducing the need for boilerplate docs.
Glory to JSON
Oh. Makes sense. Still not planning on using YAML anytime soon :)
Hadn't head of Google's Protocol Buffers before this. Anyone use it in production apps?
I like yaml. 😞 It has its limitations, but I find it so much faster to write and easier to read. I respect peoples' preferences tho, still have love for JSON, different tools for different tasks.
Even though I like JSON more, there are situations in which I miss XML. XML can describe data in a more advanced matter, using tag attributes for example.
All well and good if those standards were widely adopted by tools. But someday. 
Holy crap that's awesome. Thanks for that insight!
no comments is the real killer... so many times it would have been useful
We use it for communication between microservices via [GRPC](https://grpc.io/)
CI on PRs is a better place to enforce linting and documentation standards. I’d rather devs commit more often and I don’t believe in discouraging that. If you want a squeaky clean master just squash merge, though that isn’t really necessary.
There is also FlatBuffers which is also google. Flat buffers have some benefits if you want your transport/parsing to be very fast. Pokemon go uses protobuf I think, if you want a real world example. If you are willing to lose readability and bundle the schema in your client you don't need to waste a huge amount of bandwidth storing repetitive schema's and can use binary transport of data.
Check out hjson
Not this stupid article again. CSS Grid is awesome but that design they are deconstructing for the example in the article looks like it was created by a blind toddler.
`bind()`/`unbind()` [is deprecated](https://api.jquery.com/category/deprecated/deprecated-3.0/): . You should be using [on()](https://api.jquery.com/on/)/[off()](https://api.jquery.com/off/) instead. That said, if you're going through the jQuery APIs, `remove()` will automatically remove event handlers. If you want to "remove" without removing the event handlers, use [detach()](https://api.jquery.com/detach/).
Bootstrap flexbox columns look like a thin layer over CSS Flexbox. I haven't used Bootstrap, but I have used CSS Flexbox and CSS Grid. Basically, Flexbox seems better if you want your columns within each row to have some independence, Grid seems better if you want your columns within each row to consistently line up. With the right work, you can get your columns to line up in Flexbox, but it's easier and works in more cases with Grid. 
I can't tell whether you're referring to a specific library, or just the general tendency to prefer styling elements directly via Javascript and avoiding static external stylesheets.
I’m interested. Trying to build my portfolio. 
I’m intrigued. 
&gt; FWIW Thanks man. 
Oh my god. Now i know why my Lando setup throws up when doing just this!
Oh my god. Now i know whu my lando setup throws up when doing just this!
Spaces don't go before punctuation like commas and periods. Only after.
The only recent time I've used yaml was for docker. Actually, it's the only. 
This is the real reason. XML can be structured reasonably well for readability. There is no good access pattern.
You'll get banned if you get too many 'i don't knows'
iam87x#9799 copied straight from the app. I don't know why.
I know all the people on the list. But the problem is just to click on all the addresses and request the friendships. We all actively participated in the same professional group and it would be to make it easier for everyone to join us. &amp;#x200B;
200 contacts, 5 seconds per contact, should enjoy about 15 minutes
YAML is a superset of JSON though which is nice, so you can make things like config files YAML, and gradually make them more human readable and friendly as patterns in the codebase solidify and settings/config parameters become canon. It's not a great data format for transmission, but for configs, I much prefer it to JSON.
I just make a key with a name that I know won't be used by the program it's for. E.g., ```{ "data":{ "key1":"value1", "comment":"This won't get seen in most contexts because 'data' is probably being parsed into a data structure that doesn't have a 'comment' key.", "key2":"value2" } }``` It's not "invisible", but it won't be seen if the app is just looking for `data.key1` and `data.key2`. Note that I'm probably less experienced than 95% of JS programmers here, so I could be making terrible assumptions.
 $(document).ready(() =&gt; $('.parent').click(() =&gt; $(this).hasClass('active') ? ($(this).next().target.slideUp(300), $(this).removeClass('active')) : ($(this).addClass('active'), $(this).next().slideDown(300)))) &amp;#x200B;
It's interesting, although my main pain point is in unit test files where I'd like to document certain things to make clear what a snippet of json is actually testing in the code. That and any place where json is used as a config file. hjson looks neat for composing json but I'd still need to convert it into json for the machine to use, which means I lose my comments (I think anyway, will have to look into it more). Anyway thanks for the suggestion.
 $(document).ready(() =&gt; $(".parent").click(() =&gt; { const target = $(this).next(); const active = $(this).hasClass("active"); active ? target.slideUp(300) : target.slideDown(300); active ? $(this).removeClass("active") : $(this).addClass("active"); }) ); &amp;#x200B;
I really wish that MessagePack would also take off. Sure, it's not human readable, but it can do just about everything that JSON does in significantly less space, with simpler code.
If you just want data transport, and not human editing, MessagePack is pretty great. In most languages it is also faster than JSON to encode/decode.
Super easy, don't run their ads. If they aren't screening them, then find someone else. Stop using shady services.
I tried that first one and it didn't work. 
In the past doing this created reference leaks in Internet Explorer, but this has been irrelevant for a couple of years. It works fine nowadays. Anyhow, event delegation might be a better option. You can add/remove new elements without having to touch your listeners.
I've never seen the need.
Only problem is if you iterate over the keys. 
Move the definition of `target` out of the blocks and use `toggleClass`.
Yup exactly it will be translated to json and you will loose comments then... , it would be nice to have comments and no quotes on keys by default
 $(document).ready(function(){ $('.parent').click(function(){ var target = $(this).next(); if($(this).hasClass('active')){ target.slideUp(300); $(this).removeClass('active'); } else { $(this).addClass('active'); target.slideDown(300); } }); }); &amp;#x200B;
Just use a linter.
Yeah JSON is kind of shit for config files.
i just spent 6 hours at work unsuccessfully parsing json into an object with different fields than the json. I am plotting the downfall of json. (ps if anyone actually has advice please lol)
That's the plan as soon as the current contract ends. I'm just looking for a solution for the next couple of months so I can move to a new provider without any legal issues.
The only guys I know who said that .Net was better were Java EE folks who refused Spring because it wasn't EE. But liked .Net because EE sucks. Though that would have been 2002/3.
On-the-fly compression should sort out most of the size difference.
Why? Comments make sense in configuration files, which you use YAML for since it is simpler, but if I'm sending a message between systems comments just make your messages bigger. 
Jesus Christ
An addition to the deprecation list: https://github.com/bluepnume/deprecate.js
JSON pulls no punches in describing the data. XML attempts to describe why the data is the way it is 
Naively, I'd use an array, like so. "Comment": ["first line", "second line", "more lines" ]
Thanks :)
Well, I'd like to have an accurate `typeof` operator ;) I wonder how many pages would break if suddenly `null` would have stopped being an `object`.
"clean code" to increase your meta skills
If you want this to be taken seriously you should present your proposals with well thought out arguments rather than brief rants about issues that aren’t bothering most people.
Fair. I guess the only universal comment style in JSON is [whitespace](https://en.m.wikipedia.org/wiki/Whitespace_(programming_language)).
Non-Mobile link: https://en.wikipedia.org/wiki/Whitespace_(programming_language *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^207653
Mostly for documenting test data. You’re correct that machines don’t need comments. There exist cases where JSON isn’t just for machines. 
Number conversion can come back and bite you: - react: 16.1.2 - postgres: 11.0 will parse as: { "react": "16.1.2", "postgres": 11 } 
The JSON.net project is probably one of the best ever examples of open source gone pro to-date. It's so damn fine that even MS scrapped their internal implementations in favor of leaving it as a dependency.
http://www.ransomizer.com/
Maybe a strange idea, but something like CSS selectors would be quite good, no?
I assume you want to generate the colors on each page refresh or on any other predefined event. First of all, font elements are discontinued since HTML5. See https://www.w3docs.com/learn-html/html-font-tag.html as reference. What you would have to do is writing a javascript function that sets the css style on a specific event. E.g. on load. You can easily set a class on the HTML elements and then in this function query all those childs with the class, set their styles with some random generator ( should be enough to google for hex random number generator ). Hope I could help!
I'd drop jquery tbh. Coding like this, dumping state into classnames, crawling through dom-nodes, it's not a very nice way of expressing UI. This: https://codesandbox.io/embed/zxr0m26x8l may not look "smaller" on first sight, but think of it, you have a re-usable component at this point already, it carries its own state, the UI it spits out is just a function of state.
XML has XPath for that which is the exact same thing with another notation: `/foo[5]/bar/baz` XML has all the tools any many more than JSON. *But* XML is also very verbose and much harder to parse. *That* is the actual reason why JSON is so much more popular than XML.
Actually, there is. It is called XPath.
"*" is fire key, but it is at num keys. I will read setting for replaceable keys. Because some keyboards haven't num keys right side. :(
Font tag was deprecated already in HTML 4.01 which was released in 1999. Sources: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font https://en.m.wikipedia.org/wiki/HTML
Non-Mobile link: https://en.wikipedia.org/wiki/HTML *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^207680
CSV?! Why?
Well, truly unlimited cell data is a thing in Finland at least. If they say it's unlimited 4G, it's illegal to have a clause that would limit it somehow. And indeed they don't have such a clause and they don't limit it.
https://codepen.io/Ryuukaze/pen/EePXXQ I probably just did your homework for you, but whatever. It was fun.
In the world of [semver](https://semver.org), where you write version numbers as ```MAJOR.MINOR.PATCH``` – so this here is React with a major version of 16, minor version of 1 and patch version of 2. And it becomes a problem because while 16.1.2 obviously isn't a proper number, 11.0 is and now your version declarations are of different type.
You can leave out the document ready event if you use [delegated events](https://learn.jquery.com/events/event-delegation/): $(document).on('click', '.parent', function() { var target = $(this).next(); $(this).toggleClass('active'); target.slideToggle(300); }); Saves a couple more lines :)
The access pattern that works best for XML is having a strict xsd schema that you can use to generate types in a strongly typed language. With dynamic languages becoming so popular and the fact that we're not all writing csharp and java services anymore, XML loses this benefit. 
dont forget the last coma, that annoys me as well
There's also XPath (https://en.wikipedia.org/wiki/XPath).
I realize I probably have a lot of bias (being far more familiar with JSON, and not being the biggest fan of whitespace-sensitive languages), but besides comments (which, don't get me wrong, are terrific and something that I sorely wish that JSON supported), I couldn't find any other compelling reason to use YAML over JSON for configs. 
I'm an American expat living next door to your country. Internet service in the U.S. - mobile, land - is appalling and incredibly expensive comparatively.
Like every configuration file in Node-world: package.json, webpack configuration, *et al.* The lack of comments is maddening.
It's popular in Rails-land.
&gt;JSON, which is so straightforward that no new version of the JSON specification is ever expected to be written Take that dates/timestamps! We'll just, uh, use strings. Strings and a gentleman's agreement. 
Can you elaborate?
&gt;Anyhow, event delegation might be a better option. You can add/remove new elements without having to touch your listeners. care to elaborate more? do you mean like using \`onclick=\` and it's family rather than using \`.addEventListener\`?
Something like this: function emptyEl(el) { while (el.hasChildNodes()) { el.removeChild(el.lastChild); } } function genColor() { return '#' + (Math.random() * 0xFFFFFF &lt;&lt; 0).toString(16); } const el = document.querySelector('.my-class'); if (el) { const words = el.textContent.split(' '); const newEls = words.map((word) =&gt; { const newEl = document.createElement('span'); newEl.textContent = word; newEl.style.color = genColor(); return newEl; }); emptyEl(el); for (const newEl of newEls) { el.appendChild(newEl); } } Not tested, but this probably works. This assumes that your text is the only content within `el`. The generate colour function I just grabbed off of StackOverflow, but it seems to work okay. I'd usually grab something off of npm for that. Ideally you'd move `emptyEl` and `genColor` out into other modules/files, and then the rest of the script would be inside a callable module/function. This would allow you to invert the if statement and utilise early termination.
More-so the rise of libs over the past couple years that let you style with JavaScript. At my place of work, we have been using emotion quite a bit, and have created some responsive helper components that use `matchMedia` to render certain components at corresponding breakpoints. The nice thing is, we declare all our breakpoints and stuff just right there in our JS , so we are able to both style our components based on breakpoint (standard media query css) and also render them based on breakpoint, all referencing the same variables! 
Yup, xpath is really decent and can accomplish even not straightforward things.
Either method works. Setting `innerHTML` to a string causes the browser to replace the old child elements with whatever is parsed from the string. When the string is empty child elements are removed, and no new elements are added. Regardless of how elements are removed from the document, once they are gone they are no longer referenced, and they are garbage collected.
Worked for me. Just make sure you really actually love it and aren't just doing it for a job, because if you do then it will show through and people will want to hire you. 
One way is to do it like below, if you want to use named colors. var txt = "I love javascript"; var colors = ["red", "green", "blue", "yellow", "cyan", "magenta", "brown", "#55aaff"]; var htm = txt.split("").reduce(function(p, v) { var clr = Math.trunc(Math.random() * colors.length); return p + '&lt;font color="' + colors[clr] + '"&gt;' + v + '&lt;/font&gt;'; }, ""); console.log(htm);
Ah ha. That was my problem. Thanks for the reply :)
my controller is receiving a json with a username, first name, and last name field. My user object has email, first name, last name (and some others but they’re able to be null so no worries). I’m in java spring and used JsonProperty to change the field name on user but then the issue became the json was an enumeration ( ie instead of it being User={ it was 0=User{......). This is our first sprint in java spring so i’m new to the technology stack. 
I think what u/inu-no-policeman means is that if you use `.addEventListener` then you can use `.removeEventListener` to remove the listener without removing the DOM element that the listener is attached to. But IIUC that is not what you want to do. "Event delegation" usually refers to setting a general-purpose listener high up in the document tree - often on the `document` root itself. That listener handles events from all elements further down in the tree. This can be useful to avoid cross-browser event-handling discrepancies, or to support abstractions like a virtual DOM. For example, event handlers in React apps use event delegation behind the scenes. When using event delegation handlers are *not* automatically garbage collected when elements leave the DOM. Usually one depends on a framework, such as React, to clean up event handlers at the appropriate time.
Yes , thanks :)
This is really cool. I haven't done any IoT with JS in a few years, but it may be about time to try it out again
Thanks for compiling! Is it open source?
It it's based on the StandardJS style guide, so I already win by default by using semicolons.
You add the event listener further up in the tree (maybe even all the way up at the root node) and when the event bubbled up to the listener, you check the event's target to figure out if you have to react to that event. https://jsfiddle.net/aju39902/
Good luck! 
Ahh! I see! So this way the event listener belongs to the parent node and we don't attach listeners to child elements on 1-to-1 basis. And we use \`event.target\` as opposed to \`event.currentTarget\` so that we get the element under mouse position rather than \`document\` object itself. Such a clever trick! &amp;#x200B; Thank you thank you! I wish I could upvote you 10x !
&gt;When using event delegation handlers are not automatically garbage collected when elements leave the DOM. Why..? I thought they should belong to the root?
And what can CI do about that? 
What an absolutely horrible idea! Legacy code would still exist, and a complete transition to what would ultimately be a new language would take many many years, if it ever actually happens. Browser vendors would have to support both, lest they break nearly the entirety of the web. Popular library developers would have to either completely reimplement their solutions and develop two versions in parallel, or piss off the majority of their user base. It’s just totally beyond my comprehension that anyone could think this is a better solution than applying a set of sane rules to what we already have. That fragmenting JavaScript into “old” and “new” is somehow better than encouraging that people just use the good parts of the language.
With event delegation your event listener is bound to `document` (the root of the DOM tree). That listener delegates to event handlers that you provide for handling specific events from specific elements or sets of elements. In that case the specific handlers are referenced by the general-purpose listener, not by DOM elements. So when elements are removed from the document corresponding event handlers are not garbage collected unless the reference from the general-purpose listener to the specific event handler is also removed. (Some frameworks will automatically remove that reference at the appropriate time.) If `document` goes out of scope then everything will be garbage collected - but that only happens when the page unloads.
At best I can answer you here. Since you are asking about AJAX,I am assuming that you are interested about Java Script in context of browsers. You may consider Java Script as programing language for web pages. It's executed on client side ( in browser ) It can be use to manipulate elements of web page. Java Script code can either be kept inside we page (html), or can be put inside a separate file (usually with . js file extension, and then linked to html page ) AJAX is a functionality implanted using Java Script - purpose of AJAX is to fetch content from webserver with reloading entire page ( or vice versa, send content to server without reloading entire page ) Do you already know about CORS headers? Or, is it even part of your syllabus?
Real //comments would be nicer as they could be easily stripped out for production.
Guns for show, knives for a pro.
Just create an array of Users surely? Also instead of changing the name of the field, keep it the same internally, and have your object accessor getUsername() {return wrapped.email}
I just need to create a single user object given a few fields that are passed via json. My big hurdle is getting the properties from json into the user object. I don’t know how to get a single field from the json to create the object manually (and i’m having trouble finding it because the json is set up like it expects a possible list of them like 0=User, 1=User, etc). That’s making me not able to use some of the more common methods that i’ve found online. 
json95
you write,"with reloasing web page"
You should use [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)
Sure. My point is, start with the primary functionality of `this` and then layer on edge cases. Don't rely on poorly understood concepts like execution context which will only confuse learners more.
YAML is basically just JSON with a syntax that is easier to type.
You may want to use fetch, but it is always good to understand what is going on behind the scenes, and on older browsers. This is where I started, and it links to a more modern approach as well.lots of great information about how things work and why. https://www.ibm.com/developerworks/library/wa-ajaxintro1/index.html
I've updated my virtual keyboard package: [simple-keyboard](https://github.com/hodgef/simple-keyboard) ! It now has multi-language layouts and (now fixed) emoji support. **Demo**: https://franciscohodge.com/simple-keyboard/demo **Repo**: https://github.com/hodgef/simple-keyboard All feedback is welvome !
true is a keyword, you want "true". :P An editor should color-code that, but it *is* fairly silly.
This is a good solution. I edited it to make a bit more readable using ES6+ const txt = "I love JavaScript"; const colors = ["red", "green", "blue", "yellow", "cyan", "magenta", "brown", "#55aaff"]; const output = txt.split("").reduce((sentence, nextLetter) =&gt; { const color = colors[Math.trunc(Math.random() * colors.length)]; return sentence + `&lt;font color="${color}"&gt;${nextLetter}&lt;/font&gt;`; } &amp;#x200B;
XML maps into strict OOP languages nicely.
/s
lmao god bless
I might be able to help depending on the timezone. Is it a pratical test like you have to code or is it more theoretical test? And can it be done with jquery or old fashioned XmlHttpRequest?
Yeah it’s an array of objects but it’s only sending 1 (which is the intention, i think the jquery plugin just sends an array by default). I’ll keep looking for a library to parse it. Every one i tried to use wouldn’t work because it was considering it an array of json object. 
https://www.w3schools.com
Learn fetch first, Then learn XMLHttpRequest, which is what Ajax use
[https://www.hunker.com/12606231/how-to-clean-a-bathroom-with-ajax-clorox](https://www.hunker.com/12606231/how-to-clean-a-bathroom-with-ajax-clorox) .... I'll take my down votes now.
what is fetch? &amp;#x200B;
Simple is better than Complex.
You can also use for-of to iterate over the characters of a string. for (let c of 'abc') { console.log(c); }
Advanced? Es6/7/etc.. typescript
A framework maybe. 
Frameworks like React or Angular
Advanced javascript
Even in 2007-2011, I had to fight so many people regarding XML and JSON... like WHY do you like XML... what kind of sick bastard are you?! (tbf SOME tools auto-translated XML, but didn't do that for JSON... but it was unreliable, and translating XML into maps is SO much more difficult than doing it with JSON)
Once you’ve learned something, it’s time to put it to use. Maybe an app that uses a third party API? You could learn and use a framework to build the app or you could be a bit more adventurous and try building the app from scratch.
We already do that. “use strict”;
Ah. Never had a reason to take that train :p
It parses "true" as bool and tries to run `(bool)True` as a command, instead of the `true(1)` command.
What's your level? Do you know HTML, CSS and JavaScript?
this pretty much all you need to know: http://devdocs.io/dom/xmlhttprequest/using_xmlhttprequest the newer fetch API is overrated and also cant do everything xmlhttprequest can do. ive never needed to use fetch. after u know xmlhttprequest use a library like axios for larger projects. 
If you want to be a little fancy and use some `async/await`, this can become very pretty code. `async function getAllBlogPost(url, pageNumber = 1) {` `let hasNextPage = true;` `let blogPosts = [];` `while (hasNextPage) {` `let data = await fetch(\`${url}?pageNumber=${pageNumber}\`);` `blogPosts.concat(data.posts);` `if (!data.nextPage) hasNextPage = false;` `pageNumber = pageNumber + 1;` `}` `return blogPosts;` `}` &amp;#x200B;
I only started using JS recently, and am working on a project that requires XML. I can easily see why it has been replaced so quickly by JSON. 
If you make a system like npm for dotfiles be sure to have them signed and checked for authorship on delivery. That prevents someone from taking over an old source and getting it pulled to each app. (I say this without knowing much about your project.)
Oh, I'm dumb it was evaluating the true before the call, so it tried to execute the true rather than the command "true". Makes sense.
Yep, it was a forehead slapping moment when I noticed I misread the command and it was erroring on "1". I didn't notice that at first and thought it seemed a little vague.
Profit!!!
i know intermidate js , html , css now i want to learn the next thing 
Hi /u/phnxde, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
What are your goals? What is your level in general in tech? Do you want to find a job? Build an app? Front end? Backend? I hate these types of 1-line questions. People asking "what car should I buy?" Giving no detail about heir budget, what their needs are... Waste of everyone's time.
im learning react , if i know i dont need ajax? 
sorry bro hahaha i just stuck thats all and ye i want to find a job a front end , then learning back end
Xml can express JSON and include comments as well. I’m not complaining about the lack of work-arounds. 
I was scrutinizer for us... Took *weeks*
Have you thought about this? Even if you don't pay, should give you a list of topics to work on https://www.w3schools.com/cert/cert_javascript.asp Otherwise, go to identify and find a topic you are interested in
I get not knowing things, but not googling stuff... As for what fetch is: basically a modern replacement for the XMLHttpRequest object used for sending AJAX requests.
_Confusing_ seems an apt description of this article. The author starts with a generic assumption which, it seems, he has not understood correctly. He says "JavaScript is a single-threaded language, but browsers use multiple threads to handle asynchronicity" and then sets up some `async`-based function under the impression that this might _for some reason_ be executed in different threads. And when it _isn't_ executed in different threads (as he wrongly assumed) he: - is surprised, but does not attempt to understand why - claims it is because "the function is exceedingly simple" So he makes it "busy" and when results again don't match his expectations, he is again surprised but does not attempt in any way understanding why this is so or if he made some erroneous assumption. A lot of hand-waving later he comes up with some unexpected news about how he was using _WebWorkers_, when he hadn't actually made any mention at all about this. Still this seems pretty irrelevant, as, at most, he would be starting _one_ thread for the WebWorker and then all the corresponding calls would happen in that same thread. To be fair, the article ends up in a sincere declaration: &gt; I don’t even come close to having a suspicion about what’s going on here. But this, still, doesn't excuse the general approach, which seems to be just throwing lots of numbers around on different combinations of benchmarking, without pausing for a moment to actually try to figure out where he was wrong.
Yes its like a test we have to make a project inside class which is like this: Its 5 html pages 1 main and 4 side ones which is user,comments,catagory and post, we have to make a form inside the main that contains user and password I believe one more thing nit sure and they have to be with ajax so the entire page doesnt load up also this form should be on all the pages thats it but when we are inside the class they even give us more challenges as the test so yea aince I dont even know how to make the form work with ajax I dont even know what I should be doing lol I am really bad
https://medium.com/@Jasraj/so-i-got-a-front-end-dev-job-after-almost-12-months-on-freecodecamp-9e8b4712e0e4
YAML is basically just JSON with a syntax that is easier to type. JSON is valid YAML, and at any level of a YAML structure, it is possible to use JSON literals as value.
Build something and you'll find out what you need to learn in the process
 Have you considered allow-top-navigation-by-user-activation? https://www.chromestatus.com/feature/5629582019395584
I recommend following specific people on code pen. Sras is one of those.
I used [the library](https://github.com/anvaka/panzoom) in almost all personal projects, and I just wanted to share it here, hoping you can find a good use for it as well. The library can work with HTML/SVG elements out of the box. I also used it with WebGL ([demo](https://anvaka.github.io/ngraph.path.demo/#?graph=amsterdam-roads) ). It is written in a way, that should technically allow you to use in any rendering platform (including regular terminal window, if that's what you desire - all you have to do is implement a callback that moves the scene). To quickly play with it, you can add a script tag with a CSS selector for an element that should be zoomable. E.g. adding this script to reddit's website: &lt;script src='https://cdn.rawgit.com/anvaka/panzoxom/v6.1.3/dist/panzoom.min.js' query='body'&gt;&lt;/script&gt; ...makes reddit panzoomable (if there is such a word). You can also just type `javascript:` in the address bar and paste this snippet: ``` s=document.createElement("script");s.src="https://cdn.rawgit.com/anvaka/panzoom/v6.1.3/dist/panzoom.js";s.setAttribute('query','body');document.head.appendChild(s) ``` That should make any website without aggressive content security policy panzoomable (that excludes Twitter or Facebook): https://imgur.com/gallery/0tXr6G8 Hope you like the library. If you don't - please let me know too :).
As long as youre managing state from a single source of truth, option 2 is the best approach, and completely fine. As long as we assume the following two things: 1 - Front end state may deviate from backend state 2- Backend state contains persisted data, and is considered to have a higher precedence So lets look at the flow of your userbame example. I update my username on the frontend app. This action commits a change to the current "user state" held in memory, triggers an api call to persist the changes. The workflow looks like this: Usernamechange -&gt; update local state -&gt; api call Then branch starting from the api call: ,-&gt; 200ok -&gt; commit Api call - `&gt;error -&gt; handle -&gt; revert This will give you the flexibility to not be tightly coupled with your persisted models, i.e. block while requests are outstanding. As long as you handle incoming errors appropriately and notify on failures, it should always produce expected behavior 
I’ll give it a shot monday! Thanks for your help. 
I've done projects with semicolons. I've done projects without semicolons. It works fine either way. Either you use them dogmatically when they're not needed 99.999% of the time, or you omit and add them at the **beginning** of the line whey they are needed 0.001% of the time. /* eslint semi: ["error", "always"] */ let x; let y; [x, y] = [1, 2]; vs. /* eslint semi: ["error", "never"], semi-style: ["error", "first"] */ let x let y ;[x, y] = [1, 2] // OH NO! WE'RE ALL GONNA DIEEEEE! If you're starting your own project, do it however you want. If you're working on an existing project, do it however the guy who created it did it. The only "wrong" way is to be the one asshole committer who does it differently from all of the others. ;-)
&gt;If you're working on an existing project, do it however the guy who created it did it. If you're not using Prettier or ESLint you should start. 
Thank you for your feedback. I was hoping it would be apparent from my article that I don't take myself to have any good answers to the issues I raise. One thing that you don't mention is the fact that Chromium-based browsers seem to use all cores for `asyncFib` (except on iOS). If we ignore that fact, then my findings would be less surprising. Perhaps you can help me understand why Chromium-based browsers use all cores for `asyncFib` but not for `asyncBusyFib`.
You might check it out this solution (approach) https://github.com/jukben/dotfiles
no idea why people are making this so complicated just return the updated information from your server to the client. in your .then() (success path) after your API call, update your frontend with the new username that you're getting from the backend. if it fails, in your catch(), relay that information to the user through whatever way you want 
Will definitely check this out for https://github.com/dodekeract/config Perhaps your tool could steal some of the concepts of what I did in my repo, especially having meta config files so that I can auto-generate themes from the system’s color profile.
1. Client -&gt; Server: Request Update name 2. Server: Update Name 3. Server -&gt; Client: Success -&gt; updated name, failure -&gt; failure 4. Client: Success -&gt; display Update name, failure -&gt; display failure
bingo
I don’t get what this is for. 
Makes sense, but what if you wanted the update feedback to be fast, like a Facebook like? And therefore do something like update the username *as* the API call is being sent?
What is wrong with just using `stow`?
Then I fail to see how that is surprising behaviour on YAMLs part :P
Looks good. Very small. I only took a glance at the code which looks well documented and written but I did not look very closely. I think the examples in the README would be more consistent if you added this line? `getGoogle();` &amp;#x200B; If I'm reading the code right, the first example with promises actually executes, but the second example just declares the function. &amp;#x200B;
Wanted to make a quick project using vanilla, so it's a [small Pokemon game](https://markdibarry.github.io/portfolio/pages/programming/pokequiz.html) where you try to name all 151 of the original gen.
Oh yeah didn’t realise that until now, will add that in ASAP
This behavior has been on the internet a looong time before graphql and react. Those tools have nothing at all to do with this. 
I switch between the 2 &amp; 3 techniques depending on the item. For example, item 2 for messages sent to the server or likes, but 3 for profile saves. I think you need to balance UX and data-correctness-risk as you go. Personally, I am not a fan of #1 as the risk is to high for me to justify not reverting on fail. 
What you're describing is called "optimistic" UI. I've worked on systems where there were separate redux actions for the UI gesture and the server response, which helps reason about this.
There is a library called Zenscroll that might work for you, if you don't mind including it. It's lightweight and simple to use. https://zengabor.github.io/zenscroll/
It will set message to true eventually but will then be overwritten in the next for iteration. You need to `break;` out of the loop once you found a match.
It's most likely because you're not stopping the loop when the name is found in the list. Let's say the entered name exist at index 5 in employeeList and the length of the employeeList is 7. So when i is equal to 5 the names are equal and message is set to true. Then the next iteration starts. Now i is equal to 6 and the name at index 6 in employeeList is a different name so message is set to false. The same process happens for index 7 and so message is set to false. The loop is now done and render is called with the value of message which in the end got set to false. This is why you always get false. To solve this, write break; after you set message = true in the loop. This will stop the loop when the name is found. I also assume that you forgot to copy the beginning of the if statement ;) 
THANK YOU!!
Thanks, I'll look into it.
From the following test, it looks like it works. Ler me create a local test and check. http://w3c-test.org/html/semantics/embedded-content/the-iframe-element/iframe_sandbox_allow_top_navigation_by_user_activation-manual.html
Just update your frontend state twice: optimistically assuming the request will do fine, then again with the updated value from the server. The tricky part is to decide what to do with your frontend state if the server request happens to fail, revert to the previous value? Retry? Show an error? That's up to you and your specific use case.
Cool project! Looks more fully featured than the library I'm currently using: https://github.com/freshshell/fresh
And yaml.
Sorry about your experience being in a coma. Hopefully you're doing better now.
Ever wanted to just comment out a key/value pair?
Being able to comment out sections of a config are useful. For example when working with kubernetes configs you can just comment out a container definition (to test what happens in an app or for whatever reason) and not have to go to git later and unstage your changes to bring back the definition. It brings the same usefulness as commenting out blocks of code.
Demos look good on mobile. I'll done into the code tomorrow
Why wouldn't you use reduce to concatenate strings? I don't see why you wouldn't
&gt; I don't know what's wrong with the json file, I tested it in ie.
Ok.
I just looked at your code. I don't see anything that would smooth scroll to an anchor on the page - is your question about animating font sizes or smooth scrolling? All I can see your code doing is increasing font sizes in a very roundabout way. You've got 10lbs of code in a 1lb bag there. You are literally changing their style (CSS = cascading STYLE sheets) attributes. Any reason why you don't want to just use CSS class toggles? Also mouseover and mouseout are janky on mobile if you were planning on supporting other devices. One of the principles I think is important when developing any web app or site these days is requiring an action (click or touch) for functionality - unintended actions are terrible. That's why :hover in CSS is great, it requires an action on touch devices. I added some sections, divs and anchors, included minified ZenScroll and now it scrolls to the sections. https://jsfiddle.net/ykvj756p/13/ You can adjust the positioning of the anchor divs with CSS if needed - usually with fixed navigation bars. Not sure if that's what you were looking for or not. You can set up ZenScroll to behave differently if you need to, just read the docs.
Nice work! I’ll get around to trying this. When I finish my 2737747493 side projects....
use twillio much simpler
Price though?
Is this made for the dotfiles you would have at the root of your user directory or the ones the root of a project?
This is dope.
This is sweet! Awesome job!
Thanks for checking it out!
YourmobileNumber@carrierSMSemail.com
its something like a 7 cents for every 1000 messages sent?
Man if you can help me with JavaScript in general I would be very grateful cause like I said I am terrible
Currently the scope of the project is limited to standardising a few things and making it easy to share and experiment with someone else's dotfiles. I don't know if the project will go in the direction you mentioned, but if it does, checking for authorship will be a priority. Thanks a ton! :)
The tool is meant to standardise your dotfile management workflow, and make installing someone else's dotfiles painless. It's meant to help you manage your dotfiles, so in most cases it doesn't make sense for the run command to work outside your dotfiles repo. It is similar to the `scripts` section of the `package.json` file that is used by npm projects in this regard - you cannot use the scripts from a certain `package.json` file unless you're in the directory of the project. That being said, I do see your point. Some custom commands (like the one to reload the shell that is given in the example `autodot.json`) should be accessible globally. Perhaps there should be a global `autodot.json` config file or something similar. Or an ability to use commands from a local one everywhere (I guess this is your use case). I would like to hear more about this. If you're free, please open an issue/hit me up. This was valuable feedback. Thank you. :)
The idea is to standardise the way people manage their dotfiles while allowing them to be free in choosing their approach to dotfile management. And to make sharing/experimenting with someone else's dotfiles easy. Please check out the [motivation](https://github.com/ajmalsiddiqui/autodot#motivation) section of the readme.
There's this new hip tool every kid on the block uses called Google. You should give it a try too ;)
Well that’s the obvious one but something aside from that.
Thanks a ton! If you end up trying autodot for your dotfiles, make a PR to the repo to add your dotfiles repo to the [list of dotfiles that use autodot](https://github.com/ajmalsiddiqui/autodot#dotfile-repositories-that-use-autodot). And let me know how that works out! And feel free to contribute with ideas for improvement and bug reports. :)
The primary use case is to manage dotfiles at the root of your user directory. Autodot can be used to manage config files in the root of a project by using the [scripts](https://github.com/ajmalsiddiqui/autodot#autodot-run-scriptname) functionality, but for such use cases I would recommend systems and tools specific to your technology stack/language. For example, for a NodeJS project, using [NPM scripts](https://medium.freecodecamp.org/introduction-to-npm-scripts-1dbb2ae01633) is a great idea. NPM scripts were the direct inspiration for the scripts functionality of autodot.
Well if you are looking for inspiration, go to codepen.io If you are looking to learn JavaScript try w3schools or mozillas documentation
Thanks I’ll check codepen.io 
dont do me like that lmao 
my problem is idk what comes before what 
Think of this a telling someone very dumb to do some work - you'll have to carefully choose right words, and statements should make exact sense. Computer is very very dumb. So, we usually start with variables, we tell computer to reserve empty space to keep something later ( consider them like empty boxes ) Plan your variables to achieve a task, infact you should plan functionality before you start to type any code . So, start planning you project, inputs, processing, and outputs - just think out loud, I will keep correcting where needed.
My man thanks I will try
Oh sorry, I have linked to different repo: https://github.com/jukben/gbck but you found it, so just in case for someone else 😂
Yeah I figured. 😂 Thanks for posting the correct link :)
It can quickly become a mess.
Standard lib is pretty much nonexistent
This is a pointless article - if you can use yield you can also use async/await. Mentioned 60 lines for Babel async probably comes from polyfill included for yield.
If you're toggling it while you're developing.
Honestly, there is not a thing that I hate about javascript. I do notice that it can get a bit messy when doing big projects, but for web, it is just right.
Well it will sound weird, but sometimes I search on Pinterest, UI design, UX, things like that, and really good ideas came.
not sure why this got downvoted, it's very cheap. 
Ok thank you. There was a syntax podcast on “dotfiles” and it seemed to focus on the kind inside of a project which confused me because when ppl referred to dotfiles I always assumed they were talking about the user directory kind.
I'm looking at their website now and it's not free as far as I can see. It's asking for my credit card and telling me it'll be $10 for 250 messages. What am I missing?
If you can use an arrow function in setTimeout, that will solve your problem. An arrow function looks like () =&gt; {} instead of function() {} Another option is to add another function to your class (like the toggle function) but it would do all the stuff that is being done in the setTimeout callback. And then in main you could call your function like this: setTimeout(callExecuteAndMain, this.dtime) 
I used them in a project a few years ago, guess they're not free anymore! That being said, if you can get an email client running, most phone numbers will allow you to send an email for a text. For verizon, it's `number@vtext.com`, you can google the other. I'm not sure if replying works!
v5tgfhlpe9p09
`Number`
&gt; the fact that Chromium-based browsers seem to use all cores for `asyncFib` I didn't mention it mainly because of, again, _confusion_. You can't say "it's a _fact_ that it _seems_...". If _it seems_ then it's your appreciation, and a conclusion you're making, not "a fact". What you have is an external observation that Chromium (probably) is using multiple cores **for something**, but you don't know what for. That is, there's nothing in that external observation that implies those threads are all running your JS code. V8 in general uses multiple threads frequently for its own activities, running the GC, the statistics collector, the optimizer, the compiler... all in their own thread. Mind you, I'm not claiming these _are_ the threads that you're observing, though. I'm simply claiming that your conclusion does _not_ follow from your observation. I would suggest you investigate this further. I'm pretty sure you'll find it interesting and you seem to have the skills to investigate it. You might then write a more insightful article about it. **But** before doing so, do take some time to leave aside your assumptions and preconceptions. Try to _always_ ask yourself "why is this so?" instead of quickly grasping for "aha, this confirms what I thought earlier". At least until you find clear and solid confirmation.
That's cool too, it totally depends on your needs. For some, though, especially if you only need it for alerts, this can be much faster and nicer to add: require('gmail-send')({ user: 'user@gmail.com', pass: 'asdf', to: '11234567890@vtext.com', text: 'Text message' }); 
Thanks for the suggestions 
Let's say you want to join the letters with a hyphen in between. In the case of `join` it becomes `join("-")`. With the reduce operation you will need an additional check to skip the first element. So there is a native operation that is generally better suited IMHO.
Or [jq](https://stedolan.github.io/jq/)
oh, thats a good point. &amp;#x200B; \&gt; A Promise can only be fulfilled once. 
This happens because of your closure defining its own this context. One way you can do this is to use .bind with your function and bind it to the instance. Another way is to use arrow function so the enclosing function uses its immediate parents context. On mobile now but if you don’t get it, lemme know. 
except those are EventListeners and not callbacks
And what do you call the names of the functions you pass to event listeners?
huh, fair point. sorry.
covfefe 
can you provide any source? Last time I checked it was around 3 (?) cents per single SMS
How so?
`this`
this, Number (no int), undefined + null, NAN, loosely typed, type coersion
Yeah, when someone says "dotfiles", more often than not, they're referring to the config files in the home directory. 
&gt; setTimeout(callExecuteAndMain, this.dtime) This doesn't fix the context issue. You'd still need to make a bound version of that function with `bind()` or define it as an instance member as an arrow function rather than just having it as a class method.
My b
Unless I'm misunderstanding the code, you subscribe a number to a topic, publish its message to the topic, and then unsubscribe it from the topic? If that's that case, then handling multiple requests concurrently means subscribing all users to the same topic at the same time, leading to them receiving each others' messages.
https://www.twilio.com/sms/pricing/us $ 0.0075/text, so like 1 cent per 13 texts. [Amazon's pricing](https://aws.amazon.com/sns/sms-pricing/) is comparable, albeit slightly cheaper at $0.00645/text.
It seems to me that every person who's vehemently against bootcamps didn't do their research and went to some trash bootcamp that's just a scam, other than those on the other side who have interviewed candidates.
Because they didn't do their research and attended a bootcamp that's a scam. Sure, a lot of bootcamps are scams and predatory, but if you didn't do your research before investing a large sum of money, that's on you.
Yup, this is SOLVED. This doesn't need a creative solution, just rely on REST and normalization.
&gt; They won't help beyond your allotted time. I disagree with this. The career counselors worked really hard to help us even after graduation, like attending meetups, doing mock coffee chats, doing mock behavioral interviews, etc. I also know that the instructors help with mock technical interviews outside of class time as well, because they want students to succeed. But I also went to one of the top 3 coding bootcamps so YMMV.
Something like this const sleep = seconds =&gt; new Promise(resolve =&gt; setTimeout(resolve, seconds * 1000)) export async function* createStream() { let todoNum = 1 while (true) { const url = `https://jsonplaceholder.typicode.com/todos/${todoNum}` const resp = await fetch(url) const jsonResp = await resp.json() todoNum++; yield* resp; } } const stream = createStream(); for await (const todo of stream) { console.log(todo) await sleep(2) }
You should state if it doesn't work on mobile in your post
Generators aren't replacing the callbacks, though. They're being used here as an implementation for the stream iterator. In the case of iterators, you're effectively replacing callbacks with `for await`. Of course not all "things that resolve more than once" are going to have iterators. DOM events, for example, use the EventTarget interface which use callbacks. And I don't think that's going to change any time soon - at least not as iterables. Observables are the next likely evolution there, assuming they ever get standardized.
Pinterest, Dribble are sites where you can find some inspiration. Codepen is also good, there is code included.
It's the FAB right? It's really nicely done. Looks great. Only thing is it isn't terribly clear what you're doing until you click on one of the languages and it tells you it's copied. Also on mobile, they should stack vertically.
No. Promises are just a wrapper to make certain stuff ”easier” to code. async/await builds on top of promises to make things ”easier” still to code.
That's the approach I've taken. I also move all of the config files into a `/config` directory in my projects. The only JSON config file for tools I commonly use that it doesn't work for (e.g. no option to specify a different config file location in `package.json`) is Github's label file (`.github-labels.json`). I'm stuck with commenting what each label means in the project Wiki.
Ha! Quote from [a blog post](http://2ality.com/2018/08/impatient-js.html#supporting-offline-use) where I describe some of the thinking behind my latest book, “[JavaScript for impatient programmers](http://exploringjs.com/impatient-js/)”: &gt; As important as practicing in front of a computer is, it should also be possible to read a computer book without a computer. To that effect, I attempt to guess what readers would want to try out and try it out for them. You can [preview](http://exploringjs.com/impatient-js/) over half the book online.
Hey M_Zoon Thanks for the comment Ok I understood your problem. But here I am not sending a message to a number. I published a message to a topic. The users who had subscribed to that topic will receive the message. Although you don't need to subscribe a number to the topic if you have a numbers that already subscribed. Unsubscring is also your wish. If you don't want to send messages anymore to that number then unsubscribe. When you run multiple requests concurrently you must subscribe and unsubscribe the number. Otherwise it leads to receive each other's message like you said. If you still have any queries reply me 
It gets downvoted because it's not true
Hello everybody who read it :) Recently I created my first open source project. It isn't something innovative or kind of. Just pure JS form validator, created with purpose of sharpening my skills. At this moment I have no contributors or at least someone who report about any issues. So I want to ask somebody look at my code and write here if there's any issues or if you see some way of improve this one. You can look at my code here: [https://github.com/IvanGrimes/f](https://github.com/IvanGrimes/slippery)ormhandler.js You can find documentation and more demo here: [https://ivangrimes.github.io/formhandler.js/](https://ivangrimes.github.io/formhandler.js/) I'll be glad and thankful if you'll spend a few minutes to review it.
Is there a service that sends mms to international numbers?
Lol wtf
Why does it load so much?
On mobile right now, commenting so I can easily find this later to take a look
Fun idea. Is the score supposed to be shared by everyone or is each session supposed to have it's own score?
Looking good! Tested it out and it works well. I skimmed the code, one thing you might want to look at is adding .gitignore file. You should add .DS_Store and .vscode so they aren't checked in.
I'm really hoping this solves maybe half of those. https://youtu.be/4kBvvk2Bzis 1. Frame works -done✓ 2. Node, webpack, ect - done✓ 3. Making things obvious - done✓ 4. Nesting - done✓ I'm just really hoping for a Dom type system so you don't have to manage html/css with a middle js files with extra js libraries like require with managing backend files that execute files with js that except json that also executes js that changes the HTML/css with J's frameworks that do server side rendering that interact with both.... I'm tired... But you get the idea. Basically screw npm, screw workflows, screw different managing States between front end and back. I'm simply done and want one platform only. 
https://www.twilio.com/sms/pricing/us
https://www.twilio.com/sms/pricing/us
I'd recommend the You Don't Know JavaScript series. Wish I found it sooner myself. You can read it for free on GitHub or you can buy a physical copy. 
Definitely looks shared.. It also has a bug where if someone else answers a question before I answer mine I get their little flavor text rather than my own..
Do you know about the save button?
The ecosystem is a double edged sword. There's a way to do almost anything using some open source package. There's also 15 ways to do anything so finding the best tool for the job is difficult. NPM is filled with massive packages that reference each other so \`npm install\` can pull in massive downloads. &amp;#x200B; No static types. This means that a properly written function is filled with large amounts of pseudo type checking to prevent passing in of the wrong data type. Also leads to runtime errors, which are the bane of my existence. &amp;#x200B; Undefined. Possibly the most uninformative return value for a function call possible. There's no context as to why something is undefined. Give me a proper error any day of the week. This sort of malarky can be worked around with the Maybe monad, but after working in compiled languages it feels like a cheap hack. &amp;#x200B; Everything is asynchronous - all the time! You need things async for web pages -- but besides that you mostly want procedural, blocking calls. Async should be something you switch on and off depending on the context. If 95% of my code is procedural I shouldn't need to specify that via an await call every 5 lines of code.
What “certain stuff” specifically? ...callbacks?
Thanks for the feedback! I'll look into making the UX a bit more clear as well as optimizing the copy function itself. Cheers!
7.5 USD per 1000 sent
I can't comment on the special use cases you mention, but have you tried enabling typescript type checking for JS in VS Code? Just create a `jsconfig.json` something like this in the project root: `{` `"compilerOptions": {` `"target": "ES2017",` `"alwaysStrict": true,` `"checkJs": true,` `"strictNullChecks": true` `},` `"include": ["src/**/*"]` `}` I found it revolutionary! It guesses a lot of the type info, and the rest you fill in with JSDoc comments like this, for example in a Class constructor: &amp;#x200B; /\*\* \* Text to be rendered line by line to the HTML &lt;canvas&gt; element \* \* @param {Array&lt;string&gt;} linesOfText &lt; means an array of strings \* @param {number} yStart \* @param {string} textStyle \* @param {string} fontColor \* @param {string=} textAlignment &lt; = means it is optional \*/ &amp;#x200B; When you bundle you can strip out all the comments, so zero code bloat. &amp;#x200B; There were a few edge cases that ate a LOT of my time, but now they are solved everything is amazing. Here are the ones that cost the most time to correct where typescript guessed wrong: `const canvas = /** @type {HTMLCanvasElement} */ (document.getElementById(` `'gameCanvas',` `));` `const ctx = /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));` The amount of info that now appears in vscode intellisense makes programming JS a joy :)
 const session = require('express-session')
I find myself agreeing with you, and I am a client. It is almost 1 cent per message. Someone is treating $0.0075 as 7.5 cents per 1000 messages?? WTF. It is instead $7.50 (seven dollars and fifty cents) for 1000 messages.
Twilio is like 1 cent per message.
Your two cents per message are more realistic than the other numbers being cited by others. The actual cost is 7.5 cents for ten messages; 75 cents for 100 msgs; $7.50 for 1000 messages.
Hi /u/memebok, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
LocalStorage may be an option but I'm not sure that would be the best solution in your case
Are the linked articles / reddit-threads supposed to correspond to the answered question? &amp;#x200B; I'm getting something like: &gt;@app: &gt; &gt; \- "SOME\_HEADLINE" &gt; &gt; &gt; &gt;\*click answer\* &gt; &gt; &gt; &gt;@app: &gt; &gt; \- "CORRECT!" &gt; &gt; \- "SOME\_OTHER\_HEADLINE" &gt; &gt; \- article &amp; reddit links to SOME\_OTHER\_HEADLINE
First of all, thanks for sharing. \\ If you are going to make a library, make sure it works in all browsers. I don't know if formhandler works in all browsers, but while I'm reading the documentation I saw: \\ * **EcmasScript 6**: uses last features of Javascript. \\ And unless the reader makes sure that you are using babel, they would be scared and not use the library. I recommend you to change the line to the browsers you support: IE11, Firefox 50, Chrome 49, Edge 14, etc. Gives a sensation of security and control over what you have made.
Vuex seems a bit overkill, no?
Hello PessimisticCoder, for an app, that only logs in, for sure. But I wanted to show how the pieces work together and provide a base from where you can develop a bigger app :) Cheers
This is very useful advice. I will add it later. Thank you :)
They totally replace callbacks in this specific scenario: doSomeAsyncStuff(someParam, function(err, res) { // do some async stuff }) This is typically what people think of when you say “callback”, but it’s a very general concept, and really just means “stuff to do when some trigger happens.” That trigger might be an async function resolving, or it might be something like an event listener: $(‘#button’).on(‘click’, iAmACallbackToo) So for the specific use case of something asynchronous resolving once, Promises can totally replace callbacks. Not for all the other uses for callbacks though. 
Ive never seen an express server start from a bin folder before. Whats the purpose of that?
Perhaps you could’ve simply stored the logged in user? Your example now sends the message that everything should be in a global store. Your login component could easily do with a local state, it would make your example much easier to follow as well.
I simply followed the tutorial for deploying to AWS Elastic Beanstalk here: [https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create\_deploy\_nodejs\_express.html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs_express.html) I believe that was generated right when I instantiated the project with the "express" command. Everything worked as expected both locally and in AWS, so I decided not to change anything.
As a dev, why don’t you take some initiative and figure it out for yourself?
Use session storage 
When the correct response appears, why is there another different headline with the link to the article which had nothing to do with the one I have guessed?
Specifically in the case that you have one or two of them and only one of them is called (and only once). 
It only appeared to be different on my phone. Tried it on the PC and it worked like intended i guess. Nice idea of a game :)
Hello PessimisticCoder, as I said I wanted to show how the pieces (including vuex) work together and where you go from there is up to you of course. I know that for this particular example without further code local state would probably fit better and I appreciate your comment. Cheers
Just save it to localStorage. Easiest way to implement this for you.
Thank you for your thoughts. I use language very deliberately. But as with any act of communication, success partly depends on interpretive charity on the part of the audience.
I do not want to release source code as of now :) thanks
Wow that is a huge enormous bug honestly.
I made a dead simple 20LOC state machine solution and weights less than 1KB [https://www.npmjs.com/package/maquinaria](https://www.npmjs.com/package/maquinaria)
Both "You don't know JavaScript" and explore js books are the best.
Thanks bud 
What I'm getting at is that generators are an implementation detail. They don't dictate API - that is, whether or not a callback is used. More than likely if a generator is used, the API is providing access to an iterable rather than using callbacks. But iterables also don't have to be from generators. And you could just as well use a generator to drive callback execution. Either way, if you're talking about what can be used in place of callbacks, generators are not one of those things (you wouldn't make a generator to consume a stream of http requests, for example). &gt; Promises could not replace callbacks in streams This one is a little tough because they kind of can... but only in the same way that you could say promises don't replace callbacks because they _use_ callbacks. While technically true, we tend to use the terminology to distinguish between the patterns. Similarly async generators can be used for streams, but they _use_ promises. So in that sense, promises are replacing callbacks in streams... only promises also use callbacks... so... 😨
As promises are on the same level of browser support as fetch ([https://caniuse.com/#feat=fetch](https://caniuse.com/#feat=fetch) , [https://caniuse.com/#feat=promises](https://caniuse.com/#feat=promises)), you should be using fetch instead of xmlhttprequest ``` function fetch(pageNumb) { get(blogURL + pageNumb) .then(function(resolve){ data.push.apply(data, resolve); if (nextpage) { return fetch(pageNumb += 1); } }); } 
As promises are on the same level of support of fetch, you should be using fetch instead of xmlhttprequest. Change the name of your function `fetch` to another thing. https://caniuse.com/#feat=fetch https://caniuse.com/#feat=promises
Since you are using express, the express session library is perfect for you. With this, you can just assign variables to the context that will stick to the current session. 
Why doesn't this compile? `int main() {` `int a = 5;` `std::cout &lt;&lt; a*10;` `return 0;` `}` Is it required to actually \`use namespace std\` ?
‘connect’ and ‘connection’ fire regardless if it was the first connection or a subsequent reconnection. The ‘reconnect’ event on the client is emitted just so you can know when a reconnect happens (maybe you want to notify the user you’re reconnecting to the server). As for the warning for registering events outside, that’s because when you register events that are sent from your server, you’re registering on the Socket object. For ‘reconnect’ you’re registering it on the Manager object which is always there regardless of if there’s a connection or not. So lets say you want to register a notification callback on a ‘reconnect’ event. You want to do it outside of the ‘connection’ callback. Because every time you are connected to the server (which can happen multiple times) you will reregister your notification callback. It’s important to know the difference between the Manager object and the Socket object. As far as why ‘connect’ is fires multiple times on the client, that doesn’t sound right. You may have registered the connection callback multiple times. Lastly, yes but it’s important to know that it’s not the same instance it’s just replicated to feel like that through TCP.
I've created a pull request that resolves this problem at least. Instead of storing headlines in a global variable, they are created for each request, and the ID is passed to the result page so that different users aren't sharing the same headline. https://github.com/patlaff/redditOnions/pull/1
In fairness, I looked at the source code and it makes and is also shockingly easy to have variables that are global and shared across sessions by default. It's obvious that this is how JavaScript would behave by default, but in many other web frameworks the way they are designed mean that you have to explicitly assign data to exist across sessions, while in this node.js does this by default. OP, a good rule of thumb is that you should only define variables that a user will be looking at or modifying from within the route function. In other words, never this: var firstValue, secondValue router.get('/', function (req, response) { firstValue = "Hello user!" }) Always this: router.get('/', function (req, response) { var firstValue, secondValue firstValue = "Hello user!" }) By specifying the variables inside, you're guaranteeing that they can't be touched or modified by other requests.
* Native browser scrolling * Native scrollbars on mobile devices * Fully customizable * `requestAnimationFrame` for 60fps * No extra stylesheets necessary * Cross-browser &gt;**IMPORTANT:** default component styles uses [grid layout](https://developer.mozilla.org/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout) for proper scrollbars display. &gt;But you can change it by passing `gridless` parameter on initialisation. ##### Installation ```bash npm i --save react-scrollbars-custom ``` ##### Usage Minimal configuration ```javascript import React, { Component } from 'react'; import Scrollbar from 'react-scrollbars-custom'; class App extends Component { render() { return ( &lt;Scrollbar style={ {width: '100%', minHeight: 300} } &gt; &lt;p&gt;Hello world!&lt;/p&gt; &lt;/Scrollbar&gt; ); } } ```
If you intend to ever work with another person on a project - spare yourself and don't check the editor settings in. When you work with people who use 4 different ides it gets super obnoxious, especially when they keep committing those changes and they bleed into their pull requests.
fuck no
Wouldn’t that just be solved by committing changes to the settings separately and then rejecting any pull request that contains a commit with changes to ide settings? I mean I guess it’s still not great and each individual should probably just find a way to manage their settings on their own.
You’re totally right I should not have generalized. Maybe link him/her to the bootcamp you went to, could help them out a bunch.
That's not a tutorial. That's a code snippet. https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm There, everything you need to figure it out for yourself instead of just using a code snippet.
It is solved by not committing changes to IDE settings. That's the only solution as far as I'm concerned.
Thanks
I have to say the interface is quite confusing for me. I keep getting confused. "Yes, this is a real the onion article, should I click REAL or FAKE?"
The code requests that a window be opened, each time window.open() is executed. Your page is not aware of which other windows or tabs might already be opened, since the browser does not expose that information.
\&gt; but with the benefits of componetization, modularization, state management and testing &amp;#x200B; you will end with another one, but your own framework, with many bugs and problems that already have been solved by more mature ones
See the note at the bottom of the Examples section here: https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Examples
Thanks
why not use existing Frameworks as a foundation? I mean, do you really want to write a new Testing Framework just for the reason of not using an existing reliable one? I would agree on the componetization and modularization, that with the introduction of CustomElements and type="module" the need for an external framework dwindles, but we aren't there yet that we can use VanillaJS for all those things. State Management is yet to be seen (I'm still on the fence for not having state whatssoever)
beautiful code.
Better than that, put them into git ignore global. 
No for-in-loops? Excuse me, whaaat? Ever wanted to replace keywords in a text with a well-defined dictionary of functions or wanting to know the index of the current item? Boom, can't do it anymore. The Web API is supposed to be legacy compatible so that for example current used Features won't break in 10 years. 
Yes, that can happen if we want to achieving the levels of component isolation of vue or react. I was thinking of something simplier, rendering html from the server and then instantiating behaviour with javascript classes or functions. Like: `&lt;div state-js="TodoList"&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/div&gt;` and then my javascript would be a function or class TodoList that gets instatiated on that div context and fill the child `ul` with `li` of todos.
existing frameworks are slow on load, require great files and large functions ceremony to work and hurt SEO badly if not used with SSR. And SSR is hard to do it right. It seems that we escaped from server rendering to come back again with SSR because the path we took is too bad. And the results are an over-engineering pain. State management doesn't have to be hard. But it seems that there is a need for making everything hard and everything complex, when there is no need to. Here is a 400 bytes library that manages a state of an application: https://www.npmjs.com/package/almy I don't need more than this. 
I provided a link. The word fetch is a link to the mdn documentation but this subreddit styles links as regular text which is terrible. 
Figured something out that works for me using anime.js. The idea is to use this as an index page and animate the blocks into a sidebar for browsing the website. Here is what I have: https://codepen.io/jackson-hermitt/pen/OoNyNG (Codepen actually shows the animations) I still think that u/THERGFREEK's advise was correct and that I am doing way too much to get this effect. If anyone would like to recommend a way to simplify the code that would be appreciated.
Try Chrome Puppeteer.
Thank you for your prompt reply. I see that it is Node.js right ? Is there anything I need to do to use Node, like installing libraries or things like that... However, I was looking for things like this, so thank you a lot. 
Phantomjs 
Nice client-side code. Is the project on GitHub?
Have you looked at lightweight frameworks like Vue.js?
You might check out https://editorconfig.org
Always share code. Its almost imposible to see what you are seeing without code.
That's a very stupid question. How would you do anything without jQuery? My company uses it to modulate the wifi signals so that we get better reception in the cafeteria.
I recommend using [add-gitignore](https://github.com/TejasQ/add-gitignore). You can run `npx add-gitignore` to easily add one.
I'm not asking for someone to look at my code. I'm simply wondering if anyone has run into this same problem. Everything works as intended on desktop and mobile alike, but v-model doesn't register with GBoard until the keyboard disappears. 
You can take a heap snapshot and then search for class instances but as far as I know you can’t see them instantiating and destructing in real time. I guess it depends on what you need the info for. Heap snapshot may be enough for what you’re trying to do. I think it’s the profiling tab? There are a few different options on there. I’m not at a computer at the moment or I would give you better instructions. It’s pretty helpful for tracking down memory leaks.
It's usually easier to have these in your global `gitignore`, then project specific files/directories in the local `gitignore`.
Simple fix, tell the fork-er to clean up the PR/merge!
Thank you, just what I was looking for!
Are there any other types of curves that have an already-existing JS implementation? I didn't find anything on [graphicsriver.net](https://graphicsriver.net) &amp;#x200B; I don't have anything specific to implement. Just some moving curves and they can be any types. The one above is just an example.
Sadly Tesseract does not perform well with receipts. 
&gt; while in this node.js does this by default. TIL.
thats doubtful. tesseract isnt just some small open source project. Its still supported by google because its the foundation of most of the OCR tech in existence today. If its not working for you something is likely wrong with how its configured. or it may not recognized the font on the receipt. check out https://github.com/tesseract-ocr/tesseract/wiki/Fonts.
I believe an old project in Meteor (Nodejs) that does that: http://www.telescopeapp.org
https://github.com/gothinkster/realworld
Hey nice work. Just one thing, even though this is a website and stuff but I think you should add README.md file just to people know what is it and what all it does. Maybe add a section to build this website locally for testing etc
Highcharts is nice and has excellent documentation. 
Now we just need to port V8 to this interpreter, and then V8 improvements will cause faster compilation times. Win-win!
PM me, let’s talk. I’m more than happy to give you some pointers/resources that could help 
www.theodinproject.com
Simpler fix, use a gitignore.
Checkout gitignore.io. There’s also a few contextually appropriate gitignore templates on github
With all of JavaScript’s issues/limitations/capabilities it’s still one of the highest growing languages and the most fundamental way the web works. Reflecting on your question, I think the only solution would be **time**. In time, technologies will start being built around JavaScript - if it’s not already happening. For the time being I think factoring your code to serve your biggest user demo would be the right approach, and then moving on to the lesser percentages. I know this doesn’t directly answer your question, but I hope it helps giving you an alternative view on things.
Happy to provide some tips if you PM me. Let me know what you’re struggling with most.
Nice list, more please. This comes in handy in the node REPL: https://www.npmjs.com/package/prototoy
watch advanced java script course [https://www.youtube.com/watch?v=o9nnYb8lNdQ&amp;list=PLAET2V7ZwO6dq0wIqdnRIZtXWVuRzDOWM](https://www.youtube.com/watch?v=o9nnYb8lNdQ&amp;list=PLAET2V7ZwO6dq0wIqdnRIZtXWVuRzDOWM) &amp;#x200B;
// function declaration that takes in two arguments: a function for displaying // a message, along with a name of a movie function movies(messageFunction, name) { messageFunction(name); } // call the movies function, pass in the function and name of movie movies(function displayFavorite(movieName) { console.log("My favorite movie is " + movieName); }, "Finding Nemo"); Like messageFunction disappears and name changes to movieName. How can that happen?
Looks very cool. Reckon I'll aim to use it in a personal project I've had banging around upstairs for a while. Thanks heaps!
The global gitignore is intended for personal IDE specific ignores, particularly if you’re using an IDE that may not be common amongst your development peers.
Nice one. What was your goal working on it? Was it for learning purposes?
Teach me master
&gt;I also want to trigger a chrome extension when it needs to run it. ​It's been awhile since I checked, but I believe extensions either do not work, or are a complete pain in Puppeteer.
For these type of things, add them to global gitignore.
Give this a try: [https://jsbin.com/tajobeqina/edit?html,console,output](https://jsbin.com/tajobeqina/edit?html,console,output) You can't declare a function in a parameter: movies(function displayFavorite(movieName) { console.log("My favorite movie is " + movieName); }, "Finding Nemo"); You should put your displayFavorite function outside as a separate function, then pass it in like in my example in JS Bin. :)
That's incredibly nice of you to show him a way to fix it. 
No, it's the standard. It's an executable script. 
i've saved many things on reddit over the years, but i have never actually gone back and looked at them. 
how many times are you going to post this? :O
From a different perspective, if someone is willing to help you, they'll need to build an example test so they can try it. I don't have a suitable phone so I can't help you, but you _could_ make it a lot easier for other people to help you if you set up your already existing example so that they can test it :) In any case, phone keyboards _are_ quirky like that. While I wasn't using Vue at the moment, I have indeed experienced some phone keyboards not firing events on an input until a final one when the keyboard is dismissed/disappears. Yes, it is somewhat known. `keypress` is _not_ fired and `keydown`/`keyup` are fired with a keycode of `229` signalling that the buffer is busy (i.e. the user may still be typing and so what the input has _may_ not be exactly the same as what the user has typed in the keyboard at that moment. I don't think there's much you can do about it but to avoid relying on changes happening until the input is blurred. Other than that, you _might_ take it to the Vue developers for their consideration. They probably can't do much either (the behaviour comes from the browser/system/keyboard itself), but if someone can do anything at all about it, it would probably be better if this was done on Vue's side rather than on your particular project.
Why ? And how do non A+ promises work in a modern application (meaning you probably use async/await for example) ? 
They all used to do that back in the day ~2014
Is this a joke? It’s a fucking text file. 
Did you bother to look at what the tool actually does
Hey, cool man that looks inspiring. I didn't check the code but the idea is really good. I also struggled to find a way how to deal with permissions in react. ATM we have something like this {isUserAdmin &amp;&amp; ...} and that is really ugly
Plotly is just built on D3 though. Data transfer is certainly an issue more people should consider, if it looks awful when on the guest WiFi, or at a conference it'll be resented. As for OP, D3 / Plotly / Highcharts are what I use most, it really depends on how much customisation, interactivity and features you want to develop. 
[removed]
The instance will be garbage collected, but the anonymous function will survive and will be called periodically.
Pretty sure that there are methods for drawing Bézier curves. Something like bezierCurveTo. So use that and clear the canvas each frame. 
all of this is implementation-specific. * you can turn on a linter that complains if you default-import something with a different name as it was defined as or even the filename. * a better refactoring will understand when a class/function is imported under the same name that it was defined with and will change both. * a decent autocompletion will of course suggest the default import. that’s the whole *point* of ES6 import syntax: all of it is statically analyzable. The only problem here is when the exported object isn’t a class or named function, because then the name has to be “magically” derived from the filename. They’re right about the CommonJS interop, but i hope few people have to write anything else than ES6+ these days. Typos are a problem of course. You don’t want to write a linter for everything like this.
&gt; Personally felt the "considered harmful" title was a little over the top [ Considered harmful](https://en.wikipedia.org/wiki/Considered_harmful) It's become a meme by this point
I am not sure if I like the idea of changing coding style just so that tools works with it. 
I'd be reluctant to have my linter complain about what names I use for default-imports because sometimes using a different name is the only way to avoid a collision.
that only means the linter can’t be dumb and take that into account.
'this' isn't used however. So wouldn't an optimised interpreter be able to just throw it away, or isn't that how things work?
As others have already pointed out, a lot of this is a (valid) complaint about tooling. A couple of remarks I do have, though: * **Adding named exports**: If you started with a default export, and want to export more, the import syntax can accommodate you quite easily: Go from `import theDefault from "./module.js";` to `import theDefault, {namedExport1, namedExport2} from "./module.js";` * **Re-exporting**: Note that you can do `export {default} from "./module.js";`
Honestly, the title should be changed. I could imagine a bunch of inexperienced developers getting confused and blindly becoming opposed to default exports, because they read they're harmful without actually understanding that it's an opinionated take.
If you run the exact code OP posted: maybe the instance will get GC’d (although I doubt it!). But then again it wouldn’t matter in terms of execution. &amp;#x200B; What I am saying is: OP shouldn’t need to worry. Implementers need to guarantee the code semantics stay correct so those kind of optimizations would only ever take effect if the optimizer can prove it is allowed to do so.
Time for the next article: \&gt; **considered harmful considered harmful**
&gt; If you refactor Foo in foo.ts it will not rename it in bar.ts. Yes it will if you use a sane IDE like VSCode &gt; If you end up needing to export more stuff from foo.ts (which is what many of your files will have) then you have to juggle the import syntax. Oh the horrors... it was a single variable, now it might be 2 or god... three. If a module has default exports then I don't need IntelliSense, it's a single damn module &gt; You don't get typos like one dev doing import Foo from "./foo"; and another doing import foo from "./foo"; So yeah, that takes a few second to discover. I doubt that this is a problem since you start with the import and using the imported variable will come from the autocomplete. Keep using defaults folks when it makes sense, like a module only contains a single class / object / variable.
Your are right . I guess I need to practice more to become more comfortable.
 class Main{ constructor(config){ this.client = redis.createClient(config.redis); this.blockingClient = this.client.duplicate(); this.queue = "Asd" this.blpop(); } blpop(){ this.blockingClient.BLPOP(this.queue, 0, this.blpopHandler.bind(this)); } blpopHandler(err, result){ this.blpop(); if(err){} else {} } } 
Yeah definitely 😂
As said, I wish you all the best. Science and technology ars all about lifelong learning ;)
It's been around, just a bit older: [https://meyerweb.com/eric/comment/chech.html](https://meyerweb.com/eric/comment/chech.html)
I love to learn new thing every day. But for some you need time and patience , to develop a new skill. But after you get there your reward is great.
Do people really find "Eloquent JavaScript" to be that useful? I don't get it. It's just a pile of super-theorical stuff, it's useless to get anything done in js, atleast in my experience. Why it is so endorsed by the js community?
StringManipulation is not an object, but a function, so you can't access SetUpper using dot notation. What exactly are you trying to achieve?
`function StringManipulation(word) {` `function SetUpper(word) {` `return word.toUpperCase();` `}` `StringManipulation.SetUpper = SetUpper;` `}` `StringManipulation();` `console.log(StringManipulation.SetUpper("Chaos Engine"));` &amp;#x200B;
From here https://stackoverflow.com/questions/8817872/javascript-call-nested-function
Then don’t use that rule.
Thanks so much for the reply. I'm sorry if I came across as ungrateful. Next time I have an issue, I'll try to share a snippet that recreates it so anyone helping has some context. 
I think it’s that you are missing the `function` keyword before `billingFunction`.
Oh well, okay, thanks for the information, do you have any recommandations ? + Can you emulate mouse movement in puppeteer ? Again, thanks a lot
This is exactly why I use the ternary operator and goto for all control flow. Just because someone is a savant of algorithms does not make them a brilliant software engineer.
In JavaScript, functions are objects. 
oh, okay, ... I resolved it now but I got another error (unexpected identifier), but it's a big step :-)... thank you very much. :-)
Interestingly, I don’t think a single CSS selector can achieve that. This is a great use-case for `closest()` however (complete demo [here](https://jsbin.com/homulux/1/edit?html,js,console)): `closest()` gives you the nearest _ancestor_ matching the given selector. In this case: If an element doesn’t have an ancestor matching `#wpadminbar` (`closest()` returns `null`), we want to _keep_ the element. ```js Array.from(document.querySelectorAll("[name='s']")) .filter(el =&gt; !el.closest('#wpadminbar')); / ```
Your comment doesn't make much of a case for defaults, other than characterising the objections as whining. I am curious to know why some people prefer them. I am aware of the [airbnb decision](https://github.com/airbnb/javascript/issues/1365) but I am not completely convinced. In fact, I don't understand why they added this quirky and seemingly unnecessary extra to the specification.
Hi, since two years i continue the same project without any framework, it's a webapp called gridsound (on github) and i could not imagine the same thing with an additional optional layer for the databinding. &amp;#x200B; If you don't have to handle IE11 you can considere the library standard as a framework and the MDN as its documentation, and you will have very easely a website lighter than [google.com](https://google.com). The most complex thing is to have to find your perfect JSON conception for your inner store, after that you will have to follow the same rules as if you was used a framework, you have to follow something like Flux diagram to obviously not allow a component changing another component's state directly. If your webapp has to maintain a undo/redo mechanism, this can help a lot to handle a Flux circle.
add \`.not('#wpadminbar input')\` or \`.not('#wpadminbar &gt; input')
Is Typescript necessary for all your examples? If not, I think it just muddies the waters and makes your article easier to dismiss for those who don't use Typescript. Other than that, I usually need more time to try out something opinionated like this before deciding, but this looks promising.
In order to reference the values that you have got from 'name1' and 'zip1', you need to remove quotes from the 3rd and 4th line of that function body: `document.getElementById("billingName").value = name1;` `document.getElementById("billingZip").value = zip1;` 
I don't understand the need for `import`. I liked the super dynamic `require`; it's straight forward, intuitive, and treats JS modules as the scripts they are rather than some kind of C.
I would expect this as well. Doing a simple test we can throw a breakpoint in the setInterval callback and see what's there... Yeah, in chrome, `this` is being reported as undefined in the debugger for that callback. Adding a reference to `this` in the function body and repeating and the debugger will show `this` as an instance of A.
If you want to learn programming in general, it is extremely useful, imo. If you did the exercises and case studys you are prepared to create other things.
Sure here is the link: https://github.com/ExtensionShoe/extensionshoe.github.io
I get basically the same result in Firefox, the debugger literally says 'optimised away' when I lookup the value of 'this'
Especially in node (f.i. threads) and now with the webs import() spec it's pretty useful being able to import something with little more than a url without having to know internals and names. Personally i think it's silly to do import { foo } from 'foo' if 'foo' is the the only export. If tools can't handle it, that's their issue.
I already knew that. Got a little bit confused with the intention. I thought xe meant to do something like: ``` const StringManipulation = { SetUpper(word) { return word.toUpperCase(); } } console.log(StringManipulation.SetUpper("Chaos Engine")); ``` 
\`export default\` considered harmful if you use TypeScript and rely on Intellisense.
I'm also writing exclusively in typescript, and I don't use default exports at all. It's mostly a personal preference thing though, although I do like the slightly better refactoring capabilities. I also am usually exporting multiple values from a module, having a default export doesn't make much sense. As an example, if I'm working on a react+redux project and need to add a new connected component Comp, my process is: 1. mkdir src/components/Comp 2. touch src/components/Comp/index.tsx 1. export interface CompProps {} 2. export class CompComponent extends React.Component&lt;CompProps&gt; 3. export const Comp = connect(...)(CompComponent) 3. touch src/components/Comp/actions.tsx 1. export const FOO_ACTION = '...' 2. export type FooAction = ActionPayload&lt;{ foo: string }&gt; 3. export const doFoo = (foo: string) =&gt; {...} 4. export function reducer(state, action) {...} (sorry for bad formatting, on mobile) So at a minimum for a single component I might have 7 exports. For a non redux component I'd probably only have 2 or 3, depending on whether I needed a state types interface. I could put many of these in their own files or something, but it becomes cumbersome very quickly. I don't necessarily use all of those exports, but when I do need them it's really handy to have vscode import them automatically for me. Again, this is all personal style. To me, a default export is conveying the idea that a file only has a single thing you should use. I use default exports in those cases, but it's just not as common. 
Thanks! Will have a look
Or one of my favorite conventions: export class Thing extends... // later... export default connect(Thing)(... Your "usable" component is always default exported, and the un-connected component is always exported by name for testing.
If you use redux, you should not export it but “export default” the wrapper instead. There is no reason why sometimes you only want to export the class, but sometimes you export it wrapped in a Redux wrapper
Read the rest of my comment, it's for tests. That way you can `import { Thing } from './thing` in your test files and be able to test the component without having to stub out redux.
But do you really want the class without Redux? I mean even in a test.js file, you will still want to test functionality that redux props bring? I don’t think it is a good idea to separate the logic of redux from the presentational component. But if you really need to test the presentational ones, you can directly import the class as we should isolate the container, which is wrapped by a connector, and the presentational component,
Yes, you really want the class without redux, you test redux separately. In fact, you test the action creators, the selectors, and the reducers, all separately. You are talking about more of an integration test, or even higher level than that. And why go through all that trouble of stubbing out what you need to just to get the component underneath, when you can just import it by name... No extra downsides...
The link points to a book about TS, so logically all the examples are written in TS.
A more comprehensive collection already exists: [https://github.com/vuejs/awesome-vue](https://github.com/vuejs/awesome-vue)
It is whining or bikeshedding to sat the least. Thanks for the AirBnB link, I missed it. &gt; I am curious to know why some people prefer them. Like I said, if you have a single thing in a file, then defaults are perfectly fine. I'm using it right now: https://imgur.com/a/20Wutgv It's just nice that I don't have to use `{ Stuff }` to import a class when it's all that a file contains. MDN says the same thing: https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export#Using_the_default_export
Listened to half of these already. And just added the other half. Thanks!
Glad you like it. If you have any ideas on how to make it cleaner or easier to use, throw them my way.
[http://javaonexperiance.com](http://javaonexperiance.com)
Not sure if you forgot to include some text/a question with this code block, but if you're wondering if it would behave similarly, it would not. Unlike arrow functions, bound functions (created through `bind()`) explicitly maintain a reference to the object to which it was bound. This would mean, even if you never used `this` in that function, a reference to `this` would still be maintained by that function holding on to the class instance as long as something like `setInterval` maintained a reference to that function.
The way we've been doing it where I work is you have `/components/SomeComponent` under there is a SomeComponent.js, which is written as a "plain component" without HOC wrapping it. So it'll be something like `export default class`. The index.js then pulls in that component and wraps it as necessary with HOC components.
If you think that it's useless you might be a good candidate to read it, the book actually looks pretty hands on. General programming knowledge and concepts aren't super-theoretical, they are building blocks of good software. As you learn more and more programming concepts you will start to notice a pattern that most of the very popular software and APIs are designed based on theoretical concepts. Just look atthe design though that went into LINQ in C# for example.
Isnt this more about tooling? Intellij solves most if not all problems you mentioned for me
Just use this selector: `input[name="s"]`
You could use something like [JsonPath](http://goessner.net/articles/JsonPath/index.html)
As long as there's no instance exist for that class, it will become garbage. Unless the class was declared in the global context.
Thanks. I didn't test it or anything so we'll see if it fixes it as is or if OP has to make further changes.
Pretty basic discussion. When I clicked the link I was hoping for performance-related info as well.
That's an interesting idea. I'm not sure what performance you'd measure though - maybe setting by innerHTML vs DOM manipulation?
Well you have a: 1) `function declaration`. ``` function functionDeclaration () {} ``` Defines new variable and sets newly created function as its' value. It's hoisted. 2) `function expression` ``` function () {} ``` Simply returns newly created function. Since it is an expression it's supposed to be used in places when a value is expected. ``` var functionExpression = function () {}; (function () {}) // returns function ``` 3) `named function expression` It's basically the same as `function declaration` but it does not create new variable. Also it's not hoisted, it's an expression :) ``` var namedFunctionExpression = function myName () { // you can use myName here }; 4) `arrow function` It does not have its' own `this`. So it uses outter `this` object. ``` function doSomething () { function printThis () { console.log(this); } console.log(this); printThis(); } doSomething.bind({})(); // {} // Global or undefined function doSomethingButPreserveThis () { var iLostMyThis = () =&gt; { console.log(this) }; console.log(this); iLostMyThis(); } doSomethingButPreserveThis(); // {} // {} ``` There are also generator functions, async functions and methods. I hope I didn't forget anything. I'll drop you some links: http://2ality.com/2012/09/expressions-vs-statements.html https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Obiekty/Generator https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function
Rule of thumb is to use js and css where possible, but I think that's a style recommendation, not a speed recommendation.
[Security Now](https://twit.tv/shows/security-now) is the Alpha and Omega of security podcasts. Now in its 14th year.
Side question: I'm new to /r/javascript. Should I remove the "help" flair from this post? It's not *code* help, it's a request for wisdom from the more experienced :)
Hi /u/CHKing325, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
looks like a polish link (pl) snuck in there with all the us english ones 
On the server side, f you're writing an application you're offering to others to self-host, then you alienate users who are running an older version of Node they can't or won't update from. They may want to stick to long-term-support (LTS) versions, which lag behind the cutting-edge versions. Right now the current Node is 10.9.0 while the LTS version is 8.11.4. If you're targeting a platform like Amazon Lambda, you have to run on whichever Node version they offer. AWS currently offers 8.10, 6.10, or 4.3, so they lag even behind the LTS version. On the client side, you obviously alienate users whose browers don't implement the features you're using -- which will be *everyone* for at least some things. Check [this compatibility table](http://kangax.github.io/compat-table/es2016plus/) and [CanIUse.com](https://caniuse.com/). It's not recommended to publish cutting-edge JS because it's almost guaranteed that a significant share of your users are running something older. I say "directly." What you want to look at is [Babel](https://babeljs.io/). It's a tool that takes your JS files full of cutting-edge ES2018 code and converts them to functionally-equivalent code that only uses older features, making them compatible with older browsers and server runtimes. It even supports, using plugins, features that are only *proposed* for future versions of ECMAScript, but not yet approved. In fact, implementing a Babel plugin to let people use your proposed feature is an almost universal step of proposing new features for the language. ([Everyone please support the proposal for a pipeline operator.](https://github.com/tc39/proposal-pipeline-operator)) [Here's a nice guide to using Babel.](https://flaviocopes.com/babel/) If you use it, the risks mostly wash away. The downsides are an additional step in your deployment/build process, needing to implement source maps for debugging (making it harder for users of the production site to submit bug reports), the risk of a bug in Babel somewhere, and alienating collaborators unfamiliar with the new features you're using (less of a worry on a professional team than on an open-source project where you're attracting volunteers). 
I want to emphasize that you should not just practice. You should practice efficiently. Following a tutorial to build something is fine as long as you get something out of it. A good way to do that is to add small features to it after the tutorial is done. If you can’t break the feature down into manageable parts on your own, you can then either think of another feature, or you can utilize other resources to solve the problem. Theory is very useful because it helps you think like a programmer, but it also sets a standard for language. Terminology is important in any cognitively intensive field, and computer science is certainly no exception. Try going to Stack Overflow and asking how you do the thing about the thing with the thing (Please don’t do this). The terminology and conceptual understanding allow you to ask specific questions. Specific questions are good because even those usually have 10 answers in programming. Most of my progress over the years came from experimenting. Console.log is a powerful debugging tool. Do not underestimate it. At the end of the day, we are all problem solvers, and developing that skillset does take time. Another option is to have someone do pair programming with you on a project. It may be difficult to arrange, though. You could also look at some open source projects and see what you can contribute. I hope this helps.
ITT: misleading title
I think the thing that confuses people between expressions and declarations is that expressions are designed to provide you with an answer to something, whereas function statements can be used to manage a little more complex code. It's all about keeping code organised. For instance: function renderPage(){ // business logic to render a web page } var getAddress = function(){ // query API to get customers address } I don't think there is any hard and fast rule on which to use over the other, other than hosting and expressions having closures.
Downvoting is fine, but please give your opinion :) &amp;#x200B; And yes, it's simplified and yes, I know usually developers should know this. But apparently many developers don't - and this is why I wrote the article.
I don't think it's necessary. As it is, the article on point and an easy read.
Thanks for the insight! Interesting point about open-source projects. I know some professional teams do participate in open source, so I suppose the problem of alienating outside collaborators could still apply to some projects. I have used Babel (mostly indirectly, with create-react-app) so I'm familiar with what it does, but less familiar with the downsides of using it. I could see how a bug in Babel could really disrupt things.
I'm a junior front-end dev and I'm wondering if some of these are better for beginners (besides the one with Wes Bos). I kinda hate it when its something that is 40min of some obscure topic that may or may not be useful to me.
now you have an intervaled function that you need to clear or it will keep logging for the lifetime of the program. Also you never assigned the instance so that reference is gone.
&gt; ...and expressions having closures. What's that about?
Actually it's pretty smart if you give a name to the default export. Eg: export default function foo() {} instead of export default function() {} Or with a bit of boilerplate: const foo = "something" export default foo 
Good list, thanks for sharing. Judging based on your list another one that may interest you (and I just found myself) is Masters of Scale. 
Uh, do you mean something like ​ fetch('r/https://yourURL.com/').then(response =&gt; response.text()).then(text =&gt; { /* use text */ })
learn some other languages...
Sorry that my suggestion isn’t your preferred method. I find it easier to type the npx command and generate a comprehensive gitignore file versus creating a new file and typing in the necessary files/folders. But if you prefer the second method, no worries, I can understand that. There’s no need to hate on how someone else does things :)
Works fine for me.
I suppose that may be true. I've been using Lynda.com (I know, not the best resource but I like it), Youtube, and a few books to learn and immerse myself. I might as well explore some podcasts while I'm at it.
Yes and no. You can inject Javascript with chrome extensions, but you usually can't load Javascript, sideload, on a website or someone else's browser without significant intervention. 
News at 11: Variables that start with the letter "A" are *considered harmful*. Why? Because I say so that's why!
The downsides of using Babel are that you have to use Babel to compile your code (one more step), and the resulting code can be hard to read. However, that last one is more of a feature than a bug in production, and in development you can use source maps to get around it. Oh, and maybe Babel-generated files might be slightly larger, but I'd think it'd be pretty inconsequential once you factor in gzip and such. Other than that there really is no disadvantage to using Babel, which makes sense because all it really does is replace chunks of code with similar but slightly different chunks of code that do the exact same thing.
Technically he/she is right.
Not sure why OP is being downvoted. Seems like a genuine question. The other thing you have to take into consideration OP is the itteration of ECMAScript. New functions have been derived to solve problems. 
This is not exactly correct, but close enough.
I think of it the other way around. If I'm doing a project and the tooling better supports one way with no obvious trade-odds, why not do it that way? Specifically on this issue I don't see the benefits of default exports, tooling aside.
about what?
I have to wonder what your intention is here....
Okay thanks. &amp;#x200B; Client wanted price for it. I was thinking would take 50-60hrs for UI design and development. $20/hr. Thanks for the advice.
Can't tell if you're joking or not but yeah it's [a thing](https://meyerweb.com/eric/comment/chech.html)
I actually did some work on this myself. Was looking for solutions for the same problems. The following is a summary of the solution. 1. The cost of Javascript can be reduced by removing the need of Javascript all together. Everything can be rendered on the server side and any interaction can be kept the same way. This does give some interesting challenges with forms but it can be solved on the server when parsing the data. Another challenge is the hydration problem but when you render all needed data on the server a component can take over on the client side and just load the needed data when interaction takes place. 2. Rendering on the client side isn't that slow but you need to keep the the amount of JS running on your main thread as low as possible. Not using any virtual dom or dirty checking mechanism helps a lot. I'm still looking into web workers to remove even more jank off the main thread. 3. In my opinion the best way to support search engines is to allow every content to be rendered on the server side. The solution for \[1\] fixes this problem as well. 4. Scaling a rendering server is not that much of a problem if it is just a templating engine. The way I set it up in my project it does not need any browser emulator or headless browser. Scaling should not give any problems this way. As commented by others you will end up with a framework yourself. The advantage is that this framework can be really lightweight because a single project doesn't need to handle every possible scenario. On the other hand it's more work and from a business perspective it might not be the best choice depending on the resources available. More details of the solution described above including an example and a Github repository can be found here: [https://medium.com/@tomdezentje/progressive-enhanced-website-with-custom-elements-7b2b194b5aa9](https://medium.com/@tomdezentje/progressive-enhanced-website-with-custom-elements-7b2b194b5aa9)
Cool
Not everyone uses your tooling, and your tooling is not in its final state. Your code should be forward facing, not stuck in the past. When others manage your code, they shouldn't be subjected to the limitations of your personal choices. When your tool publishes a new version, one shouldn't have to change your entire code base to catch it up to good code style. Use better tools.
What about them?
You can run JavaScript anywhere on your own computer. You can't run it on others' computers.
As an investigation project, this is quite nice and a very robust achievement. I like this web components and typescript working together. From the post I'm keeping this: `The web is moving at a fast pace but a lot of the newer specifications require JavaScript to work. This forces a CSR strategy wich may come with it’s limitations like SEO, time to first meaningful paint, etc. Some of these problems are getting solved, but in the mean time, we are not there yet and there is still so much to discover.` I'm not an expert on typescript and I need more time to fully investigate your code, but so far I'm learning a lot from it. thanks for this new point of view (for me).
This is a lot nicer, looks good and I like the scores and search. Sadly, I am not a Vue developer. Bookmarking for future use!
sick city
Listen here you little
i don't want to run on different computers just on my own
just to code a bot that can retweet and follow stuff with specific words
How do you calculate these scores? Why am I supposed to think the 5.8 project is better than the 1.2 project&gt;
This plugin allow you to delete files/directories before or after bundle compilation. #### Installation ```bash npm i --save cleandir-webpack-plugin ``` #### Usage ```javascript // webpack.conf.js const CleanDirWebpackPlugin = require("cleandir-webpack-plugin"); module.exports = { plugins:[ new CleanDirWebpackPlugin(paths [, options]) ] } ``` ##### paths _(required)_ Paths can be a valuable string or an array of strings. _Each string should be a valid glob pattern_ (node-glob is used under the hood). ##### options _(optional)_ ```javascript const options = { // The momen when cleanup will be triggered, before or after emitting assets to output dir. // This way you will be able to remove redundant files generated by webpack // // Variants: "before", "after" // Default: "before" stage: "before", // Same as paths parameter, but files and direcroties matching given globs wont be deleted // // Default: [] exclude: [], // If true writes result of each glob processing // // Default: true verbose: true, // If true, will not generate any console output (excepting error) // // Default: false silent: false, // If true, will only emulate deletion (will not remove files) // // Default: false dryRun: false, // Allow plugin to clean paths outside of given root path // // Default: false allowExternal: false, // Path that will be treated as relative root for globs // // Default: path.dirname(module.parent.filename) root: path.dirname(module.parent.filename), } ```
never tought of that lol. i use a mac so i didn't want to change the source code for my mac
Make the open links in new tabs the default option, so when I open a demo doesn't get me off the page.
This, scores need explanation.
That's important for a fixed-price contract, or if you don't get your money until it's done. If you're able to bill every 1-2 weeks, they can ask for as many revisions as they want, right? 
That's not a problem with Reddit. I was trying to point out that there is a feature in Reddit that does what the op uses comments for.
For me, understanding 'this', like so many other concepts in javascript, came from just experience and experimenting.
imho one of the best ways if understanding “this” is looking at python and lua (both dont have a this) Lua makes it explicit that “this” is just another function parameter and that it is a reaponsibility from the caller. (In lua, when a caller uses : instead of . the self object is prepended as 1st parameter)
Don't get desperate, lack of confidence, frustration and not knowing are a big part of development. It's normal, it's part of the process and it's going to be your day to day. That's why we suffer from Impostor Syndrome so much. What bootcamp are you trying to get into? Some of them offer some free tutoring if they see your interest. Hack Reactor gave me 2 months of tutoring free of charge because they saw I was willing and not prepared.
[removed]
plus i don't even know how
Good article but a little bit long winded I have to admit.
Pay your developer a living wage, meaning at least 650$ per week. You can not do that, but your results will be.... Just pay your dev properly ;)
You can just command click it. Why mess with the OS defaults and confuse users?
Does something like this exists for React ? Not awesome list but something like this. Thanks
I can vouch for this, $25/hour for a junior developer sounds correct from experience.
here is an Example * https://github.com/atopdev/express-mongodb-graphql-react/tree/master/server * https://github.com/kellenschmidt/graphql-express-api * https://github.com/drog/starter-project-graphql
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [atopdev/express-mongodb-graphql-react/.../**server** (master → 7dd3fb8)](https://github.com/atopdev/express-mongodb-graphql-react/tree/7dd3fb8b7d37883a593474eeff7259299f36f5fb/server) ---- 
Oxford comma means the difference between the author introducing a new library that reduces the need for "this", and the author arguing that "this" is "is a terrible concept and introduces a library that allows developers to avoid using 'this' in many circumstances." Please fix.
"Here are our sponsors, now let's talk about me."
You're absolutely right. The ranking takes into account the last commit date, the project creation date, the number of forks, stars and open issues, and a couple of other metrics with smaller impact. We will be writing about it soon and showing it on the website 🙂 we want to improve the ranking with your feedback as well so as soon as we've added it to the website I'll let you know. Thank you!
Thank you 😊 hope you become a Vue developer in the future and that VueToolbox can help!
Did we give it the Reddit hug of death?
There's virtually no downside if you and your team prefer coding in ES2018. Babel is a transpilation tool, which means it takes your JS code and turns it into older versions of JS so that it can be run on older environments. The benefit of using babel or any transpilation tool is that you don't have to worry about cross compatibility. You can see what transpilation looks like by playing around with Babel's repl environment: [https://babeljs.io/en/repl](https://babeljs.io/en/repl)
Up and running here 🙂 are you having trouble getting access to [vuetoolbox.com](http://vuetoolbox.com)? 
What did you try? 
Abandoned still works, I wouldn't dismiss it simply because it is not maintained, code does not age like flesh does, it is essentially timeless so long as the environment it runs in remains the same.
Works now thanks
Open the developer tools in chrome and go to the JavaScript console. You can run any JavaScript you’d like from there.
Hi /u/PaulShartTrashCan, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/jsscrub, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
&gt; which means a more complex dev setup, waiting every save, This is what build tools exist for. The setup isn't as bad as it used to be. The wait is trivial. &gt;and difficulty debugging. You don't debug the built code, you debug the source code using a sourcemap.
Hi /u/JSislife, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `blog.bitsrc.io`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [blog.bitsrc.io](/search?q=%28and+site%3Ablog.bitsrc.io+author%3AJSislife+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|108|85%
&gt; you'll hit the refresh button on your browser Why even do this? https://www.npmjs.com/package/livereload https://www.npmjs.com/package/reload https://www.npmjs.com/package/browser-refresh https://www.npmjs.com/package/browser-reload Oh wait I misread. I thought you were suggesting they should manually refresh.
Hey everyone, Daniel from the TypeScript team here. Feel free to ask a few questions and I'll try my best to answer them soon. One thing I'd like to do is call out the collaboration between our two teams was stellar. Andy from our team put in a lot of hard work and I think he really did make improvements to the Babel codebase beyond the feature work necessary to add TypeScript. Likewise, the Babel team was super welcoming/inviting, helpful, and supported our efforts here. The other thing that I think a lot of people have asked up until this point is: "what does this work mean for me? Can Babel replace TypeScript now?" The answer is no. TypeScript and Babel can now cooperate together in a different way, where TypeScript continues to check types, and Babel strips those types away and transforms your code. Without type-checking, all you have is syntax that doesn't get checked, which isn't super useful, so TypeScript is still essential. If you're interested, I dove into this a bit more on the [linked blog post](https://blogs.msdn.microsoft.com/typescript/2018/08/27/typescript-and-babel-7/) which I encourage you to check out!
There's really no downside as long as you are covering all bases (eg. transpiling to ES5 for wider support). The benefits greatly outweigh the costs. 
Awesome! We've been using the betas in production for months and couldn't be happier. The Babel team are a great example for open-source.
Respec
I missed that. Limiting the number of revisions is good advice. 
Looks interesting, what types of data does it already support? We're looking for simple things like integer/boolean/email but also some more complex, or at least less common ones, like currency (with local support) and so on.