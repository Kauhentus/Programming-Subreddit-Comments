Broccoli fever-dream re-skin.
Awesome, I’ll have a look through those. Thanks!
The main drawback of classes is the lack of private props. The main drawback of closures is increased memory from not sharing methods with a single proto object. It's kind of a dilemma. You can polyfill private props in classes with a WeakMap though, but you might also need to polyfill WeakMap depending on target browsers. Methods can easily be faked by using standalone functions outside the class and using `.call(this)` to set the context. I've kinda had this dilemma with my own lib which is using a class and resorted to the "accessor" pattern to get around using WeakMap (to keep size down and to prevent the need to include a polyfill). It leaves a `_` function property on the instance but that's better than having them all accessible and just prefixed with `_`. For the next version I think I'm just going to use a closure, because I don't think the increased memory is that big of a deal.
I had a lot of fun playing! Thanks for the share!
&gt; Technically, there are no classes in JS That depends on your definition of "class". Just prior to this, you also say, "Each object has a class, and that class dictates which methods are available to that object." - which is exactly what JS's version of classes do. Much of the JS class discussion revolves around this notion that JS doesn't have real classes. But as /u/ugwe43to874nf4 pointed out, /u/MoTTs_ debunks this on the regular showing how JS's implementation is very similar to other languages that are accepted as having "classes". Some additional minor corrections: &gt; Every single object has a prototype, which is another object `Object.prototype` doesn''t have an object prototype. It's prototype is null as it's the end of the line for the prototype chain of most objects. Also, you can create objects without a prototype using `Object.create(null)`or overwrite existing prototype values to null using `__proto__` or `Object.setPrototypeOf()`. &gt; ...literally any object can be another object's prototype! There are some exceptions. For example you can't have a circular reference in the prototype chain. const a = {} const b = {} Object.setPrototypeOf(a, b) Object.setPrototypeOf(b, a) // Error &gt; What the new keyword does is create a new object using the function you called it with as the prototype for the new object. It doesn't use the function, it uses the `prototype` property of the function. function MyClass () {} const myInstance = new MyClass Object.getPrototypeOf(myInstance) === MyClass.prototype // true
Gosh two of the other answers are wrong. var arr = [1, 2, 3]; arr.name = 'homer'; var notAnArray = { length: 3, 0: 1, 1: 2, 2: 3}; notAnArray.name = 'marge'; 'for-in' iterates through the enurable keys of an object, and that of its ancestors in the prototype chain. Nothing to do with iterables - plain objects are NOT iterables. It just happens that an array is has object as its prototype, and array indices are also treated as object keys for (var k in arr) { console.log(k); } // 0 // 1 // 2 // name // no length, because it's not enumerable for (var k in notAnArray) { console.log(k); } // 0 // 1 // 2 // length // name '.forEach' is a method of array and iterates through the array elements and only the array elements arr.forEach(k =&gt; console.log(k)); // 1 // 2 // 3 // no name, because it's a key of the object 'arr' and not an array element notAnArray.forEach(k =&gt; console.log(k)); // TypeError: notAnArray.forEach is not a function Perhaps you got confused and meant 'for-of'? THAT is the one that loops through an iterable, and only iterables. It's equivalent to forEach, use whichever you prefer for (var k of arr) { console.log(k); } // 0 // 1 // 2 // no name, because the iterable only handles array elements // no length, because it's not enumerable for (var k of notAnArray) { console.log(k); } // TypeError: notAnArray is not iterable 
This is simply wrong.
This is also nonsense. What does 'was more optimized' even mean? They are actually different constructs, with different meanings
OOP is used ”wrong” in 90% of cases i have seen. The fact that Java style classes were so much hyped as the best thing ever has been a big disaster for programming in general. We can only recover slow, but its getting better. Now heres what i mean: Lets say you have a MVC style framework, and use a controller of some kind, the only way is usully to instanciate the controller, this happens only once, defeating the idea of ”classical” OOP. Same with any object. You must make a new one, even when its ever used once. The solution? Use plain functions. Simple and easy. If you have a (large) collection of items, then sure use a class. No matter the language.
Knowing your shit is more than learning contemporary tooling. That should be as arbitrary as your OS or editor. Typescript and CSS preprocessors are not permanent, some day you won't need them. I argue that day might as well be today. I prefer to concentrate on building my app, not my toolchain.
Since v8 rolled out turbofan they are pretty close in performance. 
How can they be close in performance if they are doing different things... source?
you made it look cool
Very Nice work! 
And this is simply a very bad comment since it doesn't explain why the original reply was wrong and how it would be right.
And this is also a very bad comment, since you come across as a sanctimonious snowflake, I have explained it in another comment in this page, it's not hard to find, it's huge.
I automatically assumed op's talking about "for of" otherwise it just doesn't make sense. Chill, bruh.
Well you assumed wrong, and by so doing you just add to the confusion...
Enjoy your downvotes, insufferable cunt.
I've made two largish apps with it. No major complaints. I've since used Vue for another project and although Vue has a lot more support and a larger user base it does lack some features. For example the way Aurelia handles navigation lifecycles is far superior to Vue. Aurelia has 'activate' method that you can put in your view component that expects a promise to resolve before navigating to that view. This allows you do some async tasks before navigating to the view. there's nothing like this in Vue yet. Also Aurelia's 'dialogue' plugin is far superior to Vue's 'modal' implementation. It's all promised based and everything.
Not sure if this was mentioned but you can't break out of a forEach with a return statement.
Yes
when I see ignorant people giving the wrong advice - yes.
Right-to-left vs left-to-right should only matter if you traverse sorted binary tree, where [traversing in-order will produce sorted data](https://en.wikipedia.org/wiki/Tree_traversal#Depth-first_search), but OP's code does a pre-order, so it's probably doesn't matter in this case.
Oh right
For what it's worth, they are [technically considered the same](https://en.wikipedia.org/wiki/Tree_traversal)
In theory you could hack the vtable in C++ to do the same thing. I assume the same construct exists in most languages with classes, you just don't usually have (official) access to it.
Also you can return out of a function in A for loop, but a return in a foreach loop only returns out the callback
The "not real" and "syntactic sugar" grousing is just gatekeeping by insular devs. Ignore it.
Those are called inline source maps, back in the day I remember setting up source maps with gulp and I got those by accident. Now that I'm using webpack I don't really think about it much, they just work.
Do some reading Higher Order Functions, specifically how things like map and reduce work. That should help you to understand the power of being able to pass functions around. 
Hmm, a recursion, [let's see how deep we can go](https://www.reddit.com/r/javascript/comments/89zomz/is_it_possible_to_disable_inputtime_clear_button/)! 
https://router.vuejs.org/en/advanced/navigation-guards.html Unless I'm misunderstanding what are you saying, vue-router has always had a way of handling async actions before allowing navigation to a route, per each route, or all routes. If you wanted to do this inside of a component instead of in the routes file, you might have to think about the problem a little differently, but it's totally possible. As far as the modal implementation goes, I totally believe you that Aurelia has a more thorough, opinionated plugin for that. Vue's documentation provides a modal example that is extremely simple and unopinionated. However, that doesn't mean you can't implement super awesome modals in Vue, just that you kinda have to do it yourself. I ended up with a fairly complex modal component that uses slots, `portal-vue`, and `vue-focus-lock`, and expects async/promises for validation.
Ok, thanks for the answer but that indeed doesn't solve my problem :).. seems to be difficult to many..
I ended up using g2.js over chart.js because it's a bit more sophisticated, without being as low-level as something like d3. Only catch is that the documentation is only in Chinese at the moment, lol https://github.com/antvis/g2
With respect to the difference, I think it mainly comes down to how JavaScript overloads existing structures to use in the class implementation. As /u/spacejack2114 suggested earlier, with classes in other languages, the class implementation is hidden away. But with JavaScript, its all normal functions and objects, and its all out in the open for you to muck around with at runtime. Though the ES6 `class` syntax is mostly sugar, ES6 did move in a direction to help make a distinction between a "class" and a "function". For example, classes defined with `class` cannot be called like normal functions. class Foo {} Foo() // Error Additionally, new function types are not constructible, meaning not every function can also be a "class". const Foo = () =&gt; {} new Foo // Error const Foo = { Foo () {} }.Foo new Foo // Error function* Foo () {} new Foo // Error async function Foo () {} new Foo // Error On top of that, the `class` syntax is the only proper way to extend certain builtins like `Array`. So while there's still weirdness around what makes a class in JavaScript a class (`class` definitions are still functions), it's gotten better as of ES6.
vue's equivalent to Aurelia's 'activate' hook is 'beforeRouteEnter' but it's far inferior to 'activate'. You don't have access to 'this' inside 'beforeRouteEnter' it also uses 'next' callback instead of returning a Promise. This is not a game breaker but it is an example of something that Aurelia does better. I hope they implement something like this in the future.
Remember: everything written more than 5 minutes ago is outdated.
Huh?
Which I find even stranger. SharePoint 2013, for crappy compatibility reasons, forces browsers down to IE10. And that... sucks, but it's still not IE8, so event.target should exist.
Kinda of. I think we could say it's regex for a specific use case
[Here](https://studio.code.org/projects/applab/zQ3-YVuWZ32nAjH9-JExnxiJaDFjYzPm2zwTzZWK7m0)
I've used Google's Firebase for this sort of thing.. It's *relatively* straightforward.. You can achieve: 1) user changes something 2) db gets updated 3) db sends out change to other clients 
You should store the output of $.extend in some obj and return the same object. Something like this var retObj; if (data.text.toLowerCase().indexOf(q) &gt; -1) { retObj = $.extend({}, data, true); return retObj; } Hope this helps.
Ouch 😂
Wow. Haven't heard of that. Will check it out. 
Good idea. Have you considered making it a bookmarklet so that people don't need to save anything to their hard drive, but could instead just click a bookmark on their toolbar?
It's not really a route hook but a component hook. Let's say you have Users component/page. You want to fetch all of your users from database before you navigate to the Users page. In Aurelia you would do something like this: class Users { users = [] activate() { return axios.get('users') .then(data=&gt; this.users = data) } } with this code Aurelia won't navigate to Users page until the 'activate' method has resolved. This is extremely convenient if your application is Database fetch heavy and you don't want to display your page before all the data is available(which is what 80% of my apps are) I'm not hating on Vue. I've used it for my last project. I wish they would implement something similar to this. 'beforeRouteEnter' hook is not good enough. 
https://firebase.google.com/
Cool man. But the sound didn't work for me. Anyways, awesome job!
Thats one way to do it. Another way would be to return a new object each time so branches off of one chain wouldn't be affected by side effects of other branches.
Can you not do the same thing via `beforeMount` hook in a vue component? Personally I prefer to show a loading icon anyway, so I usually do those API calls in the `mounted` hook and show a loading component in the meantime.
If you read the rest of the comments I explained why 'beforeRouteEnter' is inferior to 'activate' It's not just the fact that it's not promised based. It's also the fact that you don't have access to 'this'. They need to add a new hook that's called after the component is created(so you have access to 'this') but is called before you navigate to the component.
I personally thought Eloquent was too long winded with overly complex examples to teach simple concepts. Kyle's books are much better, IMHO.
Give https://edabit.com a try (free tool I made).
Hm, that's not a bad idea. A trimmed down version at some level, or perhaps something that does a pull-down as you type into password fields.
great job! would it be possible to copy-cat any wordpress them, but turn it into a video tutorial. I have some ideas for good gatsby themes, but if you could document the process of skinning a theme from some existing theme provider would be tremendously helpful.
Well I posted a question with a link in it, the same link as you posted :)
Oh... .. . I getcha. Sorry bout that.
Obligitory [beware](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dku34cl/)^1 [referencing](https://www.reddit.com/r/javascript/comments/5c5lkq/what_eric_elliot_wants_to_say_can_somebody/d9u6tv3/)^2 or [learning](https://www.reddit.com/r/javascript/comments/837t82/who_are_some_of_your_favorite_speakers_educators/dvh0br6/)^3 from Eric Elliott.
Things get really complicated when you’re forced to look through Chinese docs. I find a lot of Vue plugins and stuff are that way too. 
Groovy.
https://edabit.com/challenge/bfBTeRqsZ3Jwmyz6P matt goes out for a drink and decides to drive home i think you should change this to walk home because its not good to drink and drive
Looks nice. You got a blank entry under gamification in the https://edabit.com/roadmap
Not really. I have used charts.js and it’s actually quite easy
no
I see. I just read through some older issues in the vue repo about this, it seems like they have no intention of making the lifecycle hooks async. Personally I wouldn't consider showing a loading component to be extra/unnecessary code because it serves a UX purpose. You can call it cosmetic but showing visual feedback that something is loading is usually a good thing for the user. I do agree that Aurelia's way of doing it is a shorter way to get what you are looking for, and if you are used to doing it that way, it feels like a loss.
It’s dynamic, so unlike Java where types are set at compile time, JavaScript can add functions to objects at run time and create new instances of those objects.
I sit right in front of the author at my office :) He's also the author of `If Hemingway wrote Javascript`
Hire me
Doesn't this do exactly what you want? ``` async beforeRouteEnter (to, from, next) { let users = await axios.get('users') next(vm =&gt; { vm.users = users }) } ```
I don't really get this joke, but you can just use Promise.resolve()
Hi /u/meisteronimo, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/Kujame, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Walkingtreetech, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'.
Hi /u/turtlemachines, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/gagamylady, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/HemiDemiSemiYetti, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/JavascriptFanboy, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/iamrootnotgroot, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/captainXcannabis, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/plyanrant, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/SeanCarroll17, For javascript help, please visit /r/LearnJavascript. Thank you!
I'm sure even the wikipedia can help you more, but I feel like writing. To use recursion you need to know a base case (something you know the solution to) and how to get from a general case to the base case (which has a mathematical name I don't recall, induction?). You know odd(0)=false. You don't know odd(n), but you can figure out odd(1), it's !odd(0). Generalizing, odd(n)=!odd(n-1) for n&gt;=1. Now you've got everything. Return false for 0, !odd(-1) for &gt;=1 (and in a real program, blow up for n&lt;0 or your users will be pissed).
All JavaScript is valid TypeScript. TypeScript is a superset.
Thanks for the link, will definitely look into it for later projects. Whats your experience to flexibility when it comes to design and layout using ReactXP?
Alright , thanks
I actually liked Ember quite a bit. The mental model worked well for me. I think I might even prefer ember to React honestly, but it requires a full buy in to the ecosystem, which is more than I need in most cases. 
I get `ReferenceError: x is not defined`. Did you mean`(x=()=&gt;x())()`? This is one character shorter: `(x=_=&gt;x())()` 
Well they added some buttons at least
I use it for all my Development. I have created websites, web-apps and Cordova based Android Apps. I recently made an Electron app with it as well, I love it. I recently tried out Vue, and after using Aurelia I found it far to restrictive. Aurelia comes with EventAggreator outta the box, (RxJs) which is found significantly more valuable than using Vuex orwhatever. I have since stopped learning Vue and am going to stick with Aurelia. The community issue is real, but go on Gitter, you will find lots of people on there and I have gotten help on there regularly from very knowledgeable people.[Gitter](https://gitter.im/aurelia/Discuss) The other thing i have to say; its so close to Vanilla JS in so many ways that even if it does not get market critical mass, you will not be wasting your time. That was my beef with Angular 2. Having to learn typescript to use that Framework was a MAJOR turn off. Aurelia, you can use either, and they documentation for both. They also have decent documentation. Could be improved on too They just opened a discourse on the official site as well [Discourse](https://discourse.aurelia.io/) I love Aurelia, it's a real shame that it isn't more popular.
This pretty much sums up how I feel about all things WP: Someone _should_ do some cool stuff with their API but god knows _I'm_ not going to.
Cool, so you would suggest skipping Eloquent JS and diving into YDKJS? 
He's not very busy at work lately, eh?
I'm really disappointed that the signal only allows to react via an event listener... Why doesn't it have a method whenCancelled() that returns a promise that is being resolved when the signal is aborted? That way you could use Promise.race to always return the correct promise :( function someAsync(signal) { return Promise.race([fetch(), signal.whenCancelled()] } 
I would read YDKJS first. Pretty much all of it is good except his async coverage (it's not up to date with async/await, he recommends his own async libs). Then read Secrets of a JS Ninja, 2nd Ed. by John Resig et. al.. Those two will get you very far. 
Site not good for mobile
Does no one else see the irony in this. 
&gt;You are talking about the global object with `this` when inside an arrow function. That is the exact opposite of correct. Redefining `this` for each new function is literally the problem that arrow functions solve. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions "An arrow function does not newly define its own this when it's being executed in the global context; instead, the this value of the enclosing execution context is used, equivalent to treating this as closure value. " In other words, arrow functions are equivalent to: var that = this; function() { that.doStuff() } What you do need to be careful of, is that you are now unable to rebind `this` on the arrow function, either through bind, call, or apply. Exactly as you're unable to rebind `that` in my example above, since`this` was closed over in the arrow function.
Will do, appreciate the advice!
This is a very common pattern for building [fluent APIs](https://en.m.wikipedia.org/wiki/Fluent_interface) (which is exactly what you've done) and is often a staple of the `builder` pattern. u/senocular goes into a more functionally pure way of defining a fluent API that can create very powerful builder expressions.
They're language agnostic and if you looked at them implemented in Python for example, you'd have a strong sense of what's going on. https://www.udemy.com/coding-interview-bootcamp-algorithms-and-data-structure/ Not a book but this course helped refresh my mind on these topics. (Just gotta say that coding interviews are a skill on their own... :/ )
This works on Firefox https://pastebin.com/JJirKdY8 It has a special character between in and alert. The char is 0xfffe. I had to post it on pastebin because reddit doesn't allow it =)
Here is a practical example of not minify it. Coss team did not minify and loading 9 mb takes 1 min to load site. https://www.reddit.com/r/CossIO/comments/7qedld/can_we_have_a_skeptical_discussion_about_coss_and/
Ironic given your title but ‘Practical JavaScript’ by Gordon Zhu is free and extremely good. Other than that you’ll want to read Eloquent JS and You Don’t Know JS a bit later on. These should help you get going.
Thanks :)
I haven’t actually used it myself, just read about a few good experiences with it. Here’s one I read a few days ago. https://www.monterail.com/blog/react-native-reactxp
Cool, thanks for getting back to me!
I wish :\-\( 
No.
RIP Leonard Cohen.
Yes.
Reskin or not still looks cool! 😃
The book that gave me nightmares when in algorithms class. Nevertheless it's the bible of this topic.
Hi /u/munyee, For javascript help, please visit /r/LearnJavascript. Thank you!
This is exactly what I am talking about. Why did they only add the event emitter and not also a promise to allow for the way shorter Promise.race pattern? The promise option would also make the signal.aborted check obsolete, since the promise of the signal would already be resolved. Edit: Using the Promise constructor when you are working with another Promised based api and mixing it with an event emitter seems really backwards to me. 
This is weird.
The advantage of `signal.aborted` is that it allows for synchronous checking of the state of the signal. In `doAmazingness`, for example, if the signal comes in aborted, there's no reason to even start the "amazing" operation. If it were a promise, your only option would be to start the operation and wait in the promise `then` to see if you need to abort it, possibly immediately after it started.
Right now the api supports a synchronous access (via signal.aborted) and and asynchronous access (via event emitter). Im not arguing about the synchronous access and I'm not even saying the event api is bad. I'm just missing a promise based api to allow the usage of promise primitives like promise.race
It's not a simple reskin: the Outrun-style game mode was implemented, as well as procedural track generation with increasing length and traffic difficulty, turbo, day/night background cycle, mobile touch controls. The reskin was done to provide opensource reusable assets, because the original demo used Outrun sprites under license :-) In other words, CodeIncomplete made the game engine, and I built upon it to make it a (minimalistic) opensource game with fully reusable assets. The [full list of changes is available here in the PR](https://github.com/jakesgordon/javascript-racer/pull/5).
That's weird, it's using HTML5 audio element to play the sound, with both MP3 and OGG depending on what is supported by the browser. Could you tell me what browser and OS you are running?
BTW one of the reasons I'm posting this here is because I think it could make a great mobile game, but since I made this for a one-time event that is now over, I'm not planning to continue working on it, so if anyone else is interested feel free to do so, it's opensource :-)
Hey! I actually majored in Philosophy (Wittgenstein is my homie)! I've got about 3 years of javascript career experience under my belt, tho this is all web-development centered... so I'm not able to give you any suggestions outside of web-development or native applications. Honestly, It's going to be a bit of a struggle finding data-viz javascript tutorials that are totally outside of those worlds tho. Anyways... If you arn't against web dev, by far the most popular JS data visualisation library is D3 ( https://d3js.org/ ). It has a steep learning curve, but once you've mastered it you're really able to do quite a lot. As far as tutorials, I'd suggest this ( https://www.amazon.com/gp/product/1491921285/ref=as_li_qf_sp_asin_il_tl ). But whatever tutorial you end up following for D3, just be sure it's for version 4.X.
The author seems confused
I was tempted to say DFS and BFS, but technically traversal sounded better, as @ronny mentioned below.
did not know this, thank you for pointing it out!
I would recommend the goalkicker book, it's free and continually updated. http://books.goalkicker.com/AlgorithmsBook/
Final Answer: tt = (n, arrModFn, children=[]) =&gt; { if(!n) return; console.log(n.v); children = children.concat(n.children || []); return tt(children[arrModFn](), arrModFun, children); }
I am reading about Wittgenstein now and trying to wrap my head around his private language argument (and how it is impossible to have a private language). In any case, I was hoping to avoid D3 for the time being because R and Python have very good visualization tools which are much more intuitive. For making more crazy, unique stuff D3 is very good though.
https://bigmachine.io/products/the-imposters-handbook is a pretty great book. A fair amount of the examples are written in JS too.
&gt; Recently I have begun experimenting with Shiny, Bokeh, and Dash (which are interactive frameworks in R and Python for creating dashboards and displaying data interactively), and I have found most of these packages are actually just wrappers for Javascript libraries. Actually Shiny and Bokeh are wrappers for [D3.js](https://d3js.org/). I don't know anything about Dash, though. D3 is the _gold standard_ for data visualisation in JavaScript. There is a really good book, [Data Visualisation with Python and JavaScript](https://www.amazon.co.uk/Data-Visualization-Python-JavaScript-Kyran/dp/1491920513), by Kyran Dale on O'Reilly. It's designed for devs who know a little of either Python or JavaScript, and the first few chapters go over the basics of both, comparing one to the other. Then it goes through a Python web scraping, data cleaning, web back end technology stack, then turns the data you scraped into something beautiful and interactive with D3. Or if you'd rather just deep dive into D3, I can recommend [Interactive Data Visualisation for the Web](https://www.amazon.co.uk/Interactive-Data-Visualization-Scott-Murray/dp/1491921285) by Scott Murray, also on O'Reilly. Despite the title, the book doesn't spend long discussing web development, just the minimum HTML you need to make your D3 projects display. The book is an expanded tutorial on D3, from the very basics to some of the really far-out features. Either one of these books will give you exactly what you're looking for, depending how much time you'd want to spend with Python before getting into visualisation. And by the way, D3 can also do maps.
it's atypical until it happens to you 🙄
The problem with studying CS fundamentals in JavaScript is that JavaScript as a language is missing several language features that are required to truly understand a lot of basic data structures and algorithms. JavaScript’s lack of pointers and C Arrays (among other things) will end up giving you a lot of misconceptions about the need and implementation for a lot of popular data structures and algorithms. I would strongly encourage using this as an opportunity to learn C, or even Java. I know it sounds scary but you will come away with a much deeper understanding and appreciation of CS Fundamentals. 
Was looking for this.. I too have this book. Bought after taking the coursera algo1 by those two. Worthwhile purchase, between the book and bookstore I found it very consumable (dont want to say easy. But it's a good resource)
Yes because you are awaiting the return of the non async function, which will be an async function.
Have you tried observables? It runs on streams so you can cancel anytime. I believe they are also going to be included natively in the near future.
 But you’d have to return the async function, right?
Oh, wow, I had no idea this guy had such a bad reputation. Thanks for warning me! I'll remove his article from my comment.
Or should it be... _shorter_ (_=__=&gt;_``)``
Well, that's weird. The first time I tried out sound was not working. But now it is working. Anyways, nice job!
Maybe?
await has to be inside of an async function. For example: (async () =&gt; { const test = async () =&gt; true await test() console.log("test") })()
C will have more documentation but maybe learn some rust because rust really trains you to handle all these low level concepts but with the added benefit of safety and really ergonomic features in the standard library resembling the higher level world of Javascript. Either way tackling at least at a conceptual level certain techniques and features present in low level languages like c++ powering Javascript will make a lot of stuff make sense like how pointers make up arrays or make other things like skip lists possible really cool stuff once you get over how daunting some it may at first appear.
https://www.amazon.com/Learning-JavaScript-Data-Structures-Algorithms/dp/1785285491/ref=sr_1_3?ie=UTF8&amp;qid=1523058942&amp;sr=8-3&amp;keywords=javascript+data+structures+and+algorithms
Hi /u/Claillarckant, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
can you give me an example/algo that can't be translated to js?
I’d ask in /r/programming - you wouldn’t do this in JavaScript 
Good monday mooooorniiinng! That's all I can say.
Idk, they like to bump numbers.
Oh. Anything can be translated to JavaScript. It's more a question of if it makes sense when translated to JavaScript, and what misconceptions you will get from it. If you want an example look at a linked list. Probably the most basic traditional data structure you will learn in any CS 101 class. You definitely can implement a Linked List in Javascript, but why would you. I mean if your only exposure to Lists is through JavaScripts "Array" object, you will look at a linked list and think "but y tho". You will come away a little confused at why data structures are such a big deal and definitely come away with some misconceptions of when to use them and when not to. I've also noticed that when someone wants to learn CS fundamentals, while they think they want to learn data strucure/algos, that's not the knowledge they are missing out on. Frankly most of that stuff is useless in most modern languages and has little practical value. What they really want to learn is computer architecture. They are interested in things like how memory gets allocated. Stacks vs heaps. How operating systems work. What is virtual memory. How does garbage collection work. How do threads work. How do CPU's work. What is a register. How does machine code work. And so forth. That stuff is much more practical, and I think truly the only way to really learn that stuff is through learning a language like C. At least as a starting point.
Why not? Seems perfectly reasonable, although real-time processing may be a different story.
Do you understand the physics at play? It seems that if you did, it'd just be a matter of finding/creating a library to do what you needed. If not, and there's no existing library, then there may be some education required.
Not necessarily true anymore... Modern Browsers support the Web Audio API that can do powerful things. [Here is a pitch-shift project written in javascript](https://github.com/mmckegg/soundbank-pitch-shift)
Sadly I don’t. I was hoping for help in that aspect.
Can't even killed me.
If I wanted to do something like this in JavaScript, I would find a sound processing library. One popular library is Tone.JS at https://github.com/Tonejs/Tone.js/ Here's a StackOverflow article about the theory of AutoTune. There are some references there about the specific algorithms you'll need to implement to make this happen: https://stackoverflow.com/questions/10739229/theory-behind-autotune-vocoder Good luck!
Thank you! Hopefully I successfully build one. So I can share it with you!
I have Sedgewick's, CLRS, and a few others. Buy Sedgewick if you want clear and detailed explanations of how algorithms are implemented in practice, optimization tricks that are commonly used to work around edge cases in production algorithm libraries, and practical advice about situations in which you might choose one algorithm over another, and why. Buy CLRS if you're interested in designing new algorithms and need to know how to mathematically prove algorithm complexity and correctness. 
[https://github.com/jamiebuilds/itsy\-bitsy\-data\-structures](https://github.com/jamiebuilds/itsy-bitsy-data-structures) Not what you're asking for but this is a nice little reference.
Its third edition is coming in this month. They are also going to include Typescript.
In that Sedgwick book does he use Pascal for the examples?
Tone.js isn't really an audio DSP library, mainly it does synthesis and sequencing. Not really a good fit for what OP wants to do. He'll need to use the raw Web Audio API using either ScriptProcessor nodes or Audio Worklets if we're talking about a browser app.
OP specifically mentioned .wav or .mp3 formats so I don't think he's trying to do real-time pitch correction. 
Java, I think there's a C edition as well
TIL the word "threnody".
"Monkeypatching" possible in many languages.
While Highcharts is sweet, it cost 600 bucks. Which is still better than some of the libraries that are trying to charge hundreds per year. Chart.js and Chartist are the two best free charting libraries I've found. 
I would just like to thank you all for the help! You are all so generous
I very much disagree. &gt;If you want an example look at a linked list. Probably the most basic traditional data structure you will learn in any CS 101 class. &gt;You definitely can implement a linked list in JavaScript, but why would you. If your only exposure to lists is through JavaScript's "Array" object, you will look at a linked list and think "but y tho". You shouldn't have that reaction if your class or book does a good job of motivating the data structures and algorithms that it covers. &gt;I've also noticed that when someone wants to learn CS fundamentals, while they think they want to learn data strucure/algos, that's not the knowledge they are missing out on. Frankly most of that stuff is useless in most modern languages and has little practical value. No modern language allows you to escape from the sorts of design decisions that are aided by a good working knowledge of data structures and algorithms. In Python and JavaScript, no less than in C, the programmer has to be aware (for example) of the different costs of searching an array vs. a hash set, or of when pre-processing some data is worth it in order to speed up subsequent operations. Of course, languages that provide core data structures in their standard libraries frees one from having to implement them. But they do not do away with 1) the importance of understanding their behavior and performance characteristics; 2) the importance of being able to recognize a particular DS/A when it's called for (what is the use of having `heapq` in Python if you've never heard of a heap?); and 3) the good practice that data structures and algorithms provide for coming up with novel solutions to novel problems. Additionally, data structures and algorithms are ubiquitously tested in technical interviews, which are bound to be a practical concern for any professional programmer. &gt;What they really want to learn is computer architecture. ... Maybe that's what the OP wants, though I don't know how you could read their mind. But that's different from saying that you can't study data structures and algorithms in JavaScript.
Second. Especially for someone like myself who learns much better by watching, following along and being explained how to solve problems.
Doesn’t work on mobile?
Hello, Thanks for your input about the funny image I made and posted regarding JavaScript and TypeScript. I'll admit I read the posting guidelines only after the fact and realize that the reason for my post being removed was probably because it violated the "no memes" rule. That is probably just as well, because as a programmer I can guarantee that the last thing I want when I search the web for an answer to a question is a laugh. Sincerely, Daniel Raillant-Clark
The music is a bit heavy, it's about 5MB so if there was a packet drop this might have stopped the streaming maybe :-)
async is just syntactic sugar for a promise. You can await *any* function. function favoriteColor() { return "orange"; } let color = await favoriteColor(); console.log(color); // orange
Just picked this up. Lookin forward to reading it. 
isnt it specficLly Promise.resolve ?
Thanks :)
&gt;Rust If you stick to safe rust, there are data structures you absolutely cannot implement. They're impossible. Binary search trees, for example, require hacks. The damn borrow checker makes you do a lot of funkiness to implement things. Rust is a *terrible* idea for learning data structures.
`await fn();` is literally (or very close to, I haven’t looked at the spec) `await Promise.resolve(fn());` Likewise `async` functions just wrap whatever value is returned with `Promise.resolve` So you can await anything, or you can ignore that some functions are `async` and deal with the promise directly.
Unsure what you are trying to say... but it feels like you want the calculations to be done automatically. my guess is that you need to listen to an onChange from your input fields, and recalculate accordingly. You would probably also need some default values in your inputs, if you dont want logic to handle empty variables in your recalculation 
&gt; In Python and JavaScript, no less than in C, the programmer has to be aware (for example) of the different costs of searching an array vs. a hash set, I would argue that if you are doing a task where the cost difference between searching an array vs a hash set will make a noticiable difference than you probably shouldn't be doing that task in Python or JavaScript. :) Or at the very least find a library that can reach down into native code to do that for you. Now don't misunderstand me. I'm not saying that knowledge of data structures and algorithms is useless knowledge or shouldn't be learned. It absolutely should be. My only point is A. Studying them in JavaScript specifically runs the risk of misconceptions. And B. Most modern languages aren't really made to deal with the set of problems where that knowledge is particularly useful. 
If you are okay with text books, "Computer Systems: A Programmer's Perspective" is a great read. If you want something less dense, "Code: The Hidden Language of Computer Hardware and Software" is an excellent place to start. I've also heard great things about "From NAND to Tetris" though I haven't personally read it. (I have read the other two). 
&gt; I would argue that if you are doing a task where the cost difference between searching an array vs a hash set will make a noticiable difference than you probably shouldn't be doing that task in Python or JavaScript. :) Or at the very least find a library that can reach down into native code to do that for you. First of all, if you're targeting a browser then "just reach into native code" isn't an option. Second, you don't have to be doing especially performance-sensitive work to run into situations where switching from an *O(n)* to an *O(n^2)* algorithm becomes problematic. That's rather the whole insight underlying big O analysis: even if you're taking it for granted that JS is 100 times slower than C, that constant factor is the least of your worries if you pick a bad algorithm. &gt;My only point is A. Studying them in JavaScript runs the risk of misconceptions. So you say, but the only reason you've given in support of this claim is that having JS's `Array` available will keep people from seeing the point of linked lists. In the first place, I think this is erroneous: any half decent introduction to linked lists will make it clear what they accomplish that arrays do not. In the second place, DS/A classes typically cover lots of data structures and algorithms with no direct analogs built into JavaScript. In the third place, whether you are implementing a data structure or just using one from a language or a library, you need to understand the sorts of properties that are learned in studying data structures and algorithms in order to know when and how to use it.
Confused about what ?
Oh good, thanks. I'll run over there and see if the image that I created this afternoon has "already been posted there".
 &lt;button type="button" onclick="myFunc"&gt;Click here&lt;/button&gt; &lt;script&gt; function myFunc() { // place the actions in this function } &lt;/script&gt;
In case where the function does not return a promisse, the return value is the value that is resolved by the await call. That’s why color === “orange” in this guy’s example.
What would be your recommendation?
`&lt;input&gt;` tags fire the change event each time they are changed (the same way a button fires a click event when it's pressed).
Yeah, it’s hard for me to explain, but I think what your saying makes sense. So, everything works correct, if I input values in the correct range it calculates correct, and if I input incorrect values, it’s says Input Invalid. However, I was wondering if there was a way to have it run the correct output with all the correct inputs, but once I go back and change an input, and then hit calculate again, have it remove all the results that were displayed and have it say Input Invalid again. That might not have been any different than what I said, haha. Sorry, I’m still trying to learn all of this, so my terminology is pretty shit.
The Maybe monad?
I strongly disagree. Most modern languages have no equivalent or need of something like pointers. What is present is the concept of references, which is what's needed, not direct memory access. JS does have arrays. In fact JS is a pretty good language to learn CS because as long as you don't abuse the language or use bad practices, both of which are incredibly easy in JS due to its history, there are a lot of good things you get. Note that this assumes using ES6. Things like high expressiveness, first class functions, terse yet readable, functional programming friendly etc. With Java, you have to write 3x verbose code and think about types/casts all the time. This is good to know, it is not needed at all to learn DS &amp; algo. If you have a decent grasp of JS, try to implement a few common structures like a BST, write a depth first search, quick sort etc. All these are really easy to do and play around with. e.g. https://legacy.gitbook.com/book/pmary/data-structure-in-javascript/details 
I knew it was going to be this song! They went downhill once the makeup happened. Oh well. 
Get the book JavaScript for Sound Artists. I picked up a copy a few weeks ago and I learned a lot and it allowed me to really understand how to expand on the concepts of the Web Audio API
From NAND to Tetris is an excellent book/course. It's focus on implementing practical examples really solidified the concepts for me. 
Np. I think if you are just learning. Scale down your problem like I suggested.
Build a basic calculator from scratch using nothing more than vanilla HTML, CSS, and JavaScript. Then come back here and tell me that you didn't need a DS and Algorithm to complete it.
&gt; Well it goes like this: the source, the dist &gt; The ES five, the ES six &gt; The sacred script transforming Hallelujah Okay that part was actually really damn good.
What do you mean? I use high charts in one of my applications for free
You're an idiot.
What's your personal experience got to do with anything? You didn't address what /u/L72_Elite_Kraken's said at all. "Agree to disagree" is a cop out. You gave plain bad advice and it's a shame your comment is the highest voted comment in the thread.
okey
Nice work, but you might want to consider changing the name, jEdit is already a reasonably well-known text editor, see http://www.jedit.org/, https://en.wikipedia.org/wiki/JEdit, etc.
thanks. I have a copy of "Code: The Hidden Language of Computer Hardware and Software" on a shelf that I've been meaning to pick up for a while so I'll start there.
I changed it to jsEdit, is that good enough?
&gt; JS does have arrays. Ah! A great example of what I meant when I said sometimes things get lost in translation. :) The data structure that JS calls an "Array" is actually referred to as a "List" in classical CS terminology. Meanwhile, the word "Array" when used in CS terms generally refers to a fixed and continuous block of memory. Sometimes called C Arrays to avoid confusion with the data structure most of us know and love. As far as I'm aware JS has no concept of C Arrays. (Though maybe something was added in ES6. You never know! :) As far as to your greater point, you can definitely learn a lot about various data structures and algorithms in JavaScript. Absolutely. (Albeit some more than others) My point is that all this data structures and algorithms stuff was all originally created in a world of computing that is very different from the world that JavaScript exists in. As in all learning, context is key. If you are willing to step into that more primitive world of yesteryear, learn C or something equivalent, learn the context which this stuff was thought of, you will come away with a much deeper and better appreciation and understanding of the context of all this fancy CS stuff. Not to say you have to learn C to learn a lot of it. Just that I think you will come away with a deeper understanding and appreciation if you do. 
Here is a recording of it https://youtu.be/40abpedBKK8
Something like [this web audio mp3 pitch shifter](https://github.com/urtzurd/html-audio) ? :)
@types/react does not support it yet. Neither does enzyme. So you can't use it with typescript and your tests will absolutely fail as enzyme throws errors when it comes across the jsx tags 
thank you very much should've post this on /r/LearnJavascript
Works for me. Just tiny.
Interesting. I wasn’t aware. That’s actually pretty awesome. 
It has very bas support, so on mobile it's all over the place. On some it doesn't work at all. On mine it works partially. It looks like, that it works better on the newer phones.
I'm glad my school required some architecture classes, but it still wasn't enough. I think you make a great point. There's a huge focus on theory in CS and not enough on how computers really work.
Cool. Thanks for showing the list of modifications :) I just want to point out, it's not a game engine that you've built a game from, it's an actual game in iteself. And it was already open-source (I mean...it's on GitHub!) Building a game upon a game engine would be totally different from what has happened here. This is more "Game Racer V5" than a new game. That being said, I do see that you've made a lot of changes, and swapping out the resources for reusable assets was a good idea. I also think the procedural generation was a nice addition. I can see you've put some effort into this :)
That's actually impressively small. Nice work.
Tanks. That was the challenge that I set for myself, make it as small as you can. Maybe later, when I get better at coding, I'll make it even better.
Good discussion about this on /r/node recently: https://www.reddit.com/r/node/comments/4u1jcn/is_bcrypt_the_best_possible_password_hashing/ Relevant Hacker News entry from this week: https://news.ycombinator.com/item?id=16748400 
I hate how the type queries and mutation definitions are stored as a plain string. It feels so hacky.
VS Code
vim, or neovim. weird at first but once you get used to it, there's no going back.
Linked Lists for example. Implementing linked lists in C++ with classes/structs using pointers gives you a clear idea of linked lists that no other language can beat. Not saying that linked lists can't be implemented in other languages, just that the level of understanding that comes from implementing them in C/C++ is different.
Give Brackets or Atom a try.
This is fine, but imo it's a little clearer if you return a new object, e.g. ``` return { orderBy, equalTo, val } ``` This will also give the added benefit of created a new `this` within that concrete object so you don't accidentally use the global scope 
There is no point in using it if it doesn't work on mobile.
This is really cool, thanks for sharing. queryCommandValue is a new one to me!
Thanks :)
Cool. It would be nice to do a split-view demo where one could see the code output. Did a quick version of it here: https://jsfiddle.net/hq1treL8/2/
Not OP but... It's a great subject. I got into it because of the logical side; being able to form coherent arguments and defend against fallacious ones. 
Highcharts is free for personal and non commercial use.
It sounds like you want a minheap data structure. Add some IDs to the heap, and take the minimum element. If the heap is empty, add new elements starting from when you finished. To recycle, add the IDs back into the heap, and the heap will do the rest. A binary heap is usually quite easy to implement. 
thx
Hey man, no problem at all. :) Cheers, and congrats on a nice project.
&gt; there's no going back mainly because nobody knows how to quit it
Thanks again :)
I vote VSCode. My journey has been Eclipse-Netbeans-Sublime-Atom-VSCode and I’m very happy with it. I think that’s probably a reasonably well-trodden path for JS devs of a similar “age”
So it is. I stand corrected. Since my usages are not non-commercial, I didn't think to look for that particular case. My bad. 
It's called the "builder" pattern, and is used a lot.
How about "jeditor".
Pangram.js You're welcome
Atom comsumes a lot of RAM!
For me I use Notepad++, some people says that Sublime Text is better because you just start writing the tag and the editor write down all the skeleton of that tag, maybe is faster for the developer but for me is better to write everything, so you can learn write faster even if you are a professional coder you still need to learn how to be faster
I use an ergodox keyboard normally and I’ve mapped capslock to ctrl on my laptop keyboard. My pinky finger is fine so far, but I am considering evil-mode for vim keybindings since I’m often working on remote servers where vim is more convenient. I think the benefit of emacs goes far beyond the keybindings you choose to use. If RSI is a serious concern, there’s also ergoemacs-mode. It pretty much eliminates the need to use the ctrl key whatsoever. I tried it briefly, but decided I like the standard keybindings enough to stick with them for now. 
Sublime is nag ware, but you can use it for free. Brackets is also good.
Thanks :). I will look at the bug soon.
Wow, thats smart. Thanks :)
that's cool I must have an old copy! It's the only place I've ever needed to spend time learning Pascal syntax so I can understand the points being made and even then I don't understand much I rather go copy and paste an algorithm from somewhere else to use on whatever I'm working on
Here's a sneak peek of /r/node using the [top posts](https://np.reddit.com/r/node/top/?sort=top&amp;t=year) of the year! \#1: [Multiple CoC violations by Node.js board member Ashley Williams](https://np.reddit.com/r/node/comments/6whs2e/multiple_coc_violations_by_nodejs_board_member/) \#2: [When you run out of disk space](https://i.redd.it/t5y8zb1kosm01.png) | [55 comments](https://np.reddit.com/r/node/comments/85nlo8/when_you_run_out_of_disk_space/) \#3: [Node.js Cheatsheet - Everything you should know in one single file](https://github.com/LeCoupa/awesome-cheatsheets/blob/master/backend/node.js) | [41 comments](https://np.reddit.com/r/node/comments/7v0rn7/nodejs_cheatsheet_everything_you_should_know_in/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [LeCoupa/awesome-cheatsheets/.../**node.js** (master → 14051c5)](https://github.com/LeCoupa/awesome-cheatsheets/blob/14051c5e7bb38d41f2b0b3e60809e24f74e3e9ab/backend/node.js) ---- 
why is decimal-math so funky?
vs code for sure , sublime is also good but with little to no off the self addons maybe good for beginners 
Why do JS developers always talk about size? I don’t see that in any other developer communities 
If it's smaller it loads faster to the browser, less data to transfer to the user. Because it is not loaded from the users hdd, it's loaded from the server, and a lot of people have bad connections, so the smaller the better.
Hope this qualifies. I built a React app so you can design REST backends in your browser then deploy them to the cloud with DB support. You can give users access tokens to interact with the deployed REST endpoints. Probably best for prototyping right now for Javascript developers when they need a quick REST backend that supports CRUD. I've been working on this for fun, and its still work in progress, to play with React / Google app engine and try to build a tool to help with my day job that involves designing REST API's. https://www.restpoint.io Appreciate any feedback.
Ok that makes perfect sense. I’m new to web development, still learning haha
Unless your organization or client demands separate repos, the best approach is a monorepo (just put all your code in the same repo). Can you think of a reason not to use a monorepo? If you want to get fancy with monorepo , try out Lerna to split up your package.json, but Lerna is not required. If you absolutely cannot have a monorepo, give [bit](https://github.com/teambit/bit) a look.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://github.com/teambit/bit) - Previous text "bit" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20dwyrd5z) 
I would also pick VSCode. There are so many extensions, it's free and fast.
Thanks :) I might write something about it but this is easily answered and mostly unrelated to JavaScript: the reason is just "because JS doesn't have an integer number type", only [IEEE-754](https://en.wikipedia.org/wiki/IEEE_754). All the funkiness comes from doing [integer Math with floating point numbers](https://docs.python.org/3/tutorial/floatingpoint.html).
The [LBRY code is Python](https://github.com/lbryio/lbry), and not Javascript. There's also a fork of [Bitcoind in C++](https://github.com/lbryio/lbrycrd), which has had very little work done in the last two years. This is a good indication that it will get hit with the first vulnerability patched out of Bitcoin Core. All that's in Javascript is an [Electron based browser](https://github.com/lbryio/lbry-app). The Github quality tends to be irrelevant to these shitcoin startups though.
I’m reading “why in javascript” like “what in tarnation” and it feels appropriate 
Actually... yes, a lot of times it feels extremely appropriate xD
Emacs I even wrote a [blog post about why](https://medium.com/@chasinglogic/why-use-emacs-ede521733fda?source=linkShare-32ca7f96767-1523108617) 
Exactly. I got lucky picking it at random!
The question is too vague, nobody can understand or answer it properly. Someone would have to write an essay of all the potential interpretations before getting anywhere.
Vim. You'll never experience anything as powerful as vim.
&gt; RECORDING
There are a million articles on this, but it’s personal choice. Download it, try it for a few days, and make your own decision
Thank you for explaining this, as I'm not technically savvy. So, you don't think lbry has much potential- right?
My daily driver has been sublime for a long time, though it is not free. The sheer functionality and simplicity of VSCode is making me begin to switch to it.
Take netbeans out and we're practically brothers
Functions are the correct answer. The despicable answer is to separate each statement with a semicolon like this: &lt;button type="button" onclick="alert('1'); alert('2');"&gt; Click here&lt;/button&gt; Just replace the alerts with what you want. But also don't because this is really bad code.
Vscode is also browser based. 
For me it was extensions. Higher quality extensions. So much easier to install, update, and configure as well. 
I'd strongly suggest you don't do that, because if you ever have to look at an old user who did something, and now that id points to another user, it'll be confusing as fuck, pardon my french. Numbers are cheap. I mean, there's 18,446,744,073,709,551,615 of them in 8 bytes (unsigned bigint). Notice that's more than we have people on Earth now. In fact, it's more people that were ever born on Earth, and more people than will born in the next at least 100,000 years. So don't recycle, don't make your life hell for no reason at all. Just increment.
Why do you think js cannot be served as a precompiled bytecode, making browsers perform an extra interpretation step? The additional level of obfuscation could benefit on production as well
Vs code + extensions all the way.
Thats why i asked if hes doing that alone. There will always be tradeoffs, depending on requirements, conditions, business priorities etc. Custom solutions can become such a burden over time.
I don't know what you're doing but that sounds like you're asking for problems. How are you going to know user id 2342 is the same person 2342 was an hour ago? What is something caches data based on that? PI data? If this is your personal project or something I guess its fine but if you intend to ship something and have other devs work on it, recycling something like a user id is asking for a world of wtf and hurt.
you hit the nail on the head man, i *don't* understand the significance of linked list having used arrays.
Sure. Why is `null` in math arithmetic the same as zero, but `null == 0` is `false`? `Math.round(null) = 0` `null * 3 = 0`
Not if they're the right tool for the job. Even in a project with hundreds of devs, that's still no excuse to sacrifice performance for some modicum of (perceived) improved developer convenience.
I have to say that while there's a bunch of quirks in JS that are semi-valid complaints, I always get annoyed when people whine about NaN and whether or not it's a number. As you said - that's not JS, that's IEEE-754. 
What do you mean "you people"?
Nano 
Do you mean like WASM? Well, wasm apparently shows it _can_ be done to some extent, I guess. The problem has always been getting to a common ground that people would agree on, instead of everyone trying their own thing (ActiveX, Flash, NaCl...) and failing in the long run not so much for technical reasons but for the inherent _politics_ (in the general sense of the word). On the other hand, with _more obfuscation_ the web might have not evolved in the way it has.
I taught myself JavaScript around the turn of the century using only this book: [Pure Javascript: A code-intensive premium reference](https://www.amazon.com/Pure-JavaScript-2nd-Allen-Wyke/dp/0672321416) disclosure: I already knew how to program, but I didn't know Javascript's conventions for structuring loops, iterating over arrays, accessing the properties of objects, passing parameters in and out of the script, etc. It is still the only reference I need, although these days, its much easier to look up the syntax of particular statements online. If you don't already know how to program in at least one other language, I'm not sure it will help. 
Tested just quickly. The output seems quite unintuitive. a b [empty line] outputs a &lt;div&gt;b&lt;/div&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt; I would expect something like &lt;p&gt;a&lt;/p&gt; &lt;p&gt;b&lt;/p&gt; or &lt;div&gt;a&lt;/div&gt; &lt;div&gt;b&lt;/div&gt; 
There's a lot to learn by just comparing the two, so thanks for sharing.
I'm working with some older ES5 code where we were passing promises around instead. Here's the example that I was curious about where we return a promise but "async function" was never added to the function definition: const color = await nonAsync(); console.log(color); //logs orange function nonAsync(){ return returnsPromise(); } function returnsPromise(){ return new Promise(function(resolve){ resolve("orange"); }); }
Yea, I know, it's not the best, but it works. I'll try to make it better in the future.
&gt; Why do you think js cannot be served as a precompiled bytecode Because their is no such thing a "JavaScript Bytecode". There is "V8 bytecode", "Chakra bytecode", and "SpiderMonkey bytecode" but these are proprietary implementations/encodings. Sometimes JavaScript isn't even converted to bytecode at all. WASM is a modern take where all of the major players got together in standards bodies to decide a common bytecode for the web.
Sorta like WASM, but plain JS cannot be compiled to WASM, as I recall. Maybe producing a lightweight version of an AST tree (like asm.js) would do the trick, but I guess browser engines are already established around certain specifics, so it's indeed difficult to agree upon such things
I get a different result. I get `"[object Generator]"`, which makes sense. You're concatenating (`+`) that _thingie_ with an array, which will try to coerce your thingie to a string calling `toString` on it. And what _is_ your thing? Well, you create an object with a property `f` then get that property (`.f`) and call it. And it happens that `f` is a generator function and when you call it it will return a [Generator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) as seen in the docs. So, it's string representation is indeed `"[object Generator]"`.
CLRS is the best Data Structure and Algo book, it will help you understand the subject better and you will be able to write codes in any language once you understand the techniques and provided that you know the language. 
"Impressive" is subjective. I think it would be best to interpret the question as an opportunity to explain how you solved a complex problem or implemented an important business process with a solution that balances simplicity, maintainability, and readability rather than the dick measuring, code golf contest that most would take this question as for face value.
Well, yes, but that is mostly a current limitation of the features supported by WASM (it doesn't have garbage collector, currently; it may have one, someday, they say). From a theoretical standpoint however, if WASM had a GC, JavaScript could indeed be compiled to WASM. The thing is that its an _important effort_ and as browsers currently have well optimized JS engines which already execute JS well, it is doubtful whether that effort is (currently) necessary. You might find [this discussion](https://github.com/WebAssembly/design/issues/219) relevant in that respect.
atom with [vim-mode-plus](https://atom.io/packages/vim-mode-plus)
Using a library still counts as using JavaScript! I'm guessing the interviewer just wanted to hear about anything you're proud of building on the web. You probably want to demonstrate how the problem you solved wasn't trivial, and what you did to fix it. Ficitional example: I had an ecommerce client that wanted to allow their customers to write and read reviews for various products. I used a markdown parsing library and built a WYSIWYG editor that allowed customers to create and save richly formatted content. I implemented the read-only view of comments, which was challenging because some products would have several thousand of reviews. After adding the reviews section, the client saw an XX% growth in sales.
Totally agree with this. If Sublime had a better way to find and install plugins, it would be a much closer call. But VSCode is miles ahead in that department.
Aha, I now see, but there's a slight but maybe revealing difference between that code and the original question (and the answers you received). The original question was about a synchronous function which returned **an async function**. As such, the typical answer was _yes, of course_ and showed: (async () =&gt; { const test = () =&gt; async () =&gt; true await test() console.log("test") })() This is example is fine, but it is showing something somewhat different. In this example _it doesn't matter at all what `test` returns_. Let's modify it a bit: (async () =&gt; { const test = () =&gt; async () =&gt; (console.log('async called'), true); let a = await test(); console.log(a); })() If you execute that, you'll see that the async function is what is returned and that it is _never called_ at all. This is why I mentioned that the answer is "yes, it doesn't matter at all what you return". The answer is actually: Yes, you can await a synchronous function. (async () =&gt; { const test = () =&gt; []; let a = await test(); console.log(a); })() Whatever the synchronous function returns, that is what will be returned. On the other hand, in this code you're showing, what happens is _a tiny bit_ different. `nonAsync` is not returning `returnsPromise`, but is returning the result of `returnsPromise()` which is indeed a Promise. So, the question would be about awaiting on a "non-async function which returns a promise". Which is, in fact, the same, as doing: const color = await returnsPromise(); console.log(color); //logs orange function returnsPromise(){ return new Promise(function(resolve){ resolve("orange"); }); } Because your `nonAsync` function doesn't really add much; it simply returns the same promise returned by `returnsPromise`.
I use brackets, it's my favorite. I have used Atom, it's too slow and not so good. VS code is also good. Try out brackets and then decide.
Why not return something else and check based on that? Check the edit on your bin.
Never heard of screeps until today, gonna check that out!
Yeah, don't stress over how long it's taking you especially since it sounds like you're a beginner. Sometimes projects never even feel "finished". Just keep learning and working :)
I fixed it, it works like the second version.
That's a pretty considerable point, I guess that's just another wall of implementation uncertainty waiting to be negotiated
This sounds obsessive compulsive
So, you want to explain basic programming language concepts?
as a noob/js kiddie it seems "unnecessarily efficient" for like 99% of applications. but wtf do i know.
Oh i see thank you. The reason i got a different result from you is that in the original code i was getting the property without parenthesis, like this: myString = {\*f(){/\*code\*/}}.f +[] And in this way it makes sense that the whole function is returned as string for the reasons you said 
So you're telling me I should create a game in javascript?
vim, macvim
Yes! It's fun and you will learn a lot. And it gives you something interesting to talk about. 
Gotchya. Have you built anything for fun or for school? It doesn't have to be related to sales, that was just an example :)
thanks so much!
Not only does it feel hacky, it seems overly complex to query basic data. In the majority of use cases, there's going to be one, maybe two consumers of your data. A simple REST service is suitable most of the time.
Just curious if it's possible to extract the comments since the browser and compiler automatically ignore the comments. So wondering how I would run a function that would look for a /* and save the text to a variable as a string ?
It's the difference between a 2s load and a 10s load on someone's spotty data plan
Well, this one is already too frequent, and it's also unrelated to JavaScript. The behaviour of `NaN` is defined in the specification of the [IEEE-754 standard](https://en.wikipedia.org/wiki/IEEE_754#Total-ordering_predicate), and JavaScript just follows that standard.
If you are a student, give Webstorm a try. It's by far the most powerful Javascript IDE ootb.
I built a todo app for my mom, she was impressed
Is there any reason to use React now that Preact exists? Preact is 3kb whereas React is 100kb. They perform pretty much equal in every metric except startup time where Preact beats out React pretty handily as a result of being so light. You could probably argue that React still has its place, though. My point is simply that Preact is not just a workaround for licensing issues.
Why not?
To everyone who is so against recycling here, I want to add a usecase where it is valid: Game Networking. For example in the source-engine lower IDs can take less bandwidth in some cases (as less bits are required to use them), so re-using the low slots is important.
They should have asked what are you most proud of, not what’s most impressive. What impresses one person doesn’t impress another. Further, how are you supposed to read someone’s mind to know they would be impressed by something you did? You could have done something that, to you, was really normal and unimpressive, but to someone else they could have had their mind blown. Stupid question. I would have answered like that. Basically the interviewer wants you to supplicate to him and try and impress him. I am not impressed :/
Trick question, nobody worth a damn uses vanilla.
Walk out of that interview.
Pure JS wise, either when I added SSR and better axis labeling to graphjs when it was in v1 during my internship, when I leveraged threejs to get “VR” views of 360deg images on your phone for a friend’s mom’s project (the code wasn’t impressive but the effect was), or when I glued the antd Form component to a searchkitmanager. Nothing too crazy, but I have worked on small pieces of far more impressive projects 
I am temporarily using this solution for typescript support: https://medium.com/@mtiller/react-16-3-context-api-intypescript-45c9eeb7a384
Why would you do that?
I didn’t know this thanks
As some have pointed out, it kind of depends on just what you mean by text editor. Sublime Text is more of an IDE, so I suspect that's what you're looking for. I use VS Code, which is kind of an IDE-light. I also use emacs, mostly when I'm either in a non-GUI environment or just wanting to edit a single file without invoking something that wants a whole project to suck in. I've used Atom and Brackets a little on the IDE/IDE-Light end of things, and nano, vi (and variants), joe, jed, and probably a few others that I don't remember right now on the text editor level. I chose what I did based on what I feel comfortable with. Different people value different features and properties differently, so getting your hands on a variety of different possible solutions and evaluating them will give you the best idea of which ones suit you the best. 
A good interviewer will use those types of vague questions to determine how you answer the question. If you focus on an algorithm detail or if you focus on the business win can help determine your focus.
VSCode plus Typescript as your transpiler. You don’t even need to write .ts files or properly typed Typescript to get additional benefits. . 
I interview and this is the kind of thing I want to hear, confidence, competence and ability to communicate.
As a socially capable person, I would have answered by rephrasing the question instead of being a dick in an interview.
X-post from WTF Wednesday, my latest side project: https://github.com/codearoni/omg-like-literally 
I got it to work on ie 5.5
I mean, the same could be asked why you can't compare to null in SQL: SELECT * FROM table WHERE column = NULL; I haven't run across a situation where NaN botherd me as much as some people are bothered by it.
I'm not bothered by it. JavaScript supplies the isNaN function. It was just a question of curiosity.
&gt; Why can I delete the properties of a prototype from a class inheriting those properties? Hmm, could you expand on this a bit, please? Maybe some simple example code what you mean exactly, or at least, why would this be _surprising_ or confusing? Considering how prototypes and objects work in general, I guess I don't see how deleting a property in this particular case would be different from deleting properties from any object. So, if you could expand a bit on this question I would appreciate it. Thanks :) &gt; Why does JavaScript have hoisting? I'm willing to bet that the answer to this one is that it was _simpler_ to implement in this way. I will try to investigate to see if there was any other particular reason to do it that way.
RGraph is a wonderful piece of software - though I'm a little biased - I make it. https://www.rgraph.net
Thank you :) 
Just in case you want to read it. This is what I have right now as a [mostly final draft](http://www.tinselcity.net/whys/numbers) 
You're reading too much into it. It was an opportunity to share some experience. And, as I'm learning by reading these comments, an effective way to filter out people who can't handle trivial social encounters.
hahaha
I noticed any recommendations for brackets is getting down voted, fast. Can anyone explain why people turned on Brackets? A few years ago it created the same buzz you are seeing for VS Code. I personally loved Brackets. 
Super interesting - thanks for the pointer! A main driver for my interest in emacs is the insanity of vimscript, and the desire to be able to write plugins to extend my editor to my specific workflow. Would you say spacemacs would be more or less suitable than vanilla emacs for me given that goal? Looks like spacemacs adds its own reality on top of emacs, would I end up having to learn two worlds instead of one?
Depends on the context too. I presume frontend hiwever JavaScript is far more powerful than that. My response, a social monitoring system that hooks into the various live data streams (i.e. firehose) and captures data depending on various rules. From backend to frontend it was built in JavaScript (node on the server side) and HTML. Many people have built far more impressive things too!
I'm more curious why (null === null) is true but (NaN === NaN) is false. They both have the same semantics in that they're 'valueless' so it makes sense for both to be false, and there to be a 'isNull' function for checking for nulls.
I wrote an app in pure javascript (no libraries) that used GPS location and a bunch of shape polygons from the DC government and the Washington Post to tell you which neighborhood in Washington DC you were in at the moment. 
I've included the explanation about `NaN` [here](http://www.tinselcity.net/whys/numbers).
This is nice.
How often are people coding on mobile??
I like to use Excel as the columns create even indentations. Then copy this over to Notepad
console.log(‘answering this dumb ass question’);
Looks like you snagged some of this from toastr. Both projects fail to do progress bars correctly for mobile devices. And yours are even too wide on mobile devices. 
Ah. I think I understand, but then again this is more general, isn't it? I mean, if instead of _deleting_ you add a method to the base class, then any classes that _inherit_ from it, will then have that property, right? And also, this is just how _"inheriting"_ works: If I make a class A that extends (or inherits from) a class B, it doesn't mean that A gets _its own copy_ of B's properties and methods. It means that A will "delegate" to B or route the calls to B's methods. So deleting from your base class will not really "delete from all the classes that inherit from it". It was never _copied_ to those classes. This is also more general in the sense that it's not something that is particular to JavaScript. I'd say it's just common object oriented programming.
I programmed a little game on a tablet while being on airplane. No build tools, no internet access, no great IDE, no comfortable keyboard (just a touch keyboard). The game actually was very simple and not too impressive: just a flying rocket and randomly generated meteors, and you have to fly around them, and I also had a ton of time (~5 hours on one flight and ~4 hours on another flight), but I guess it sounds impressive.
MIT uses Python for algorithms and data structures courses if you look in OCW. If it's good enough for the best school for CS in the world, then it's good enough for OP.
My mom thinks I'm special too
Preact existed well before reacts former licensing issues made tech news. For long time preact was superior to react in almost every performance aspect. At some point the original dev went to go work at FB.
Yes your learning duh. It took me 5 months on and off to build Tic Tac Toe with my own code. It was painful but I learned a lot vs following a video and copying code. Learning is a process. 
I use Brackets. I’m an Adobe fan boy 
Well using libraries and snippets is still using JavaScript. It's what you do with it that matters. 
Learning node is very marketable. I would say focus on express but some other good ones are koa, sails, and hapi.
The original developer, Jason Miller, went to go work at Google, not Facebook. You might be confusing him with Dominic Gannaway, author of Inferno who did get a job with the React team at Facebook.
Not OP but my question is similar. As you may know JS is actually a compiled language, i.e. using just-in-type compilation where JS gets parsed and compiled into machine code. Isn't it possible in theory to precompile the JS code into machine code and just run it, saving us the parsing and compilation steps? Has it been done in practice?
I've used mostly Brackets, and Atom both of which I've liked. Also, used Eclipse. I recently switched to VS Code and I have to say, I'm kicking myself for not changing sooner. I'd say try them all and find what you like. Everyone's tastes are different. Find your favorite flavor. 
Can you explain why learning node is marketable? I am new. I wilk have to look which one i am going to choose. Going to look up Koa, Sails and Hapi.
Why do floating integers causing certain calculations to get messed up. 
I created a billiard game using only JavaScript and HTML5, it even has an AI bot that you can play against: https://github.com/henshmi/Classic-Pool-Game Here's a demo: https://henshmi.github.io/Classic-Pool-Game/ I also began a tutorial series guiding on how to build this game: https://www.youtube.com/watch?v=49mVOkCw-UE&amp;list=PL8pAAuuU6yuMqwJS9_122arsrwTLI3gSr Please let me know what do you think:)
Well, yes, that's more or less what I said. But, it's not that different from other systems in relation to your question. What I meant to say is that the question seems very particular, but the behaviour is actually both more general and more common. And so I think the question is better answered in a more general way.
Ah the elusive interviewer who wants skills that make you better at any job 
I added 1 and “1” and got 11. 
I created a billiard game using only JavaScript and HTML5, it even has an AI bot that you can play against: https://github.com/henshmi/Classic-Pool-Game Here's a demo: https://henshmi.github.io/Classic-Pool-Game/ I also began a tutorial series guiding on how to build this game: https://www.youtube.com/watch?v=49mVOkCw-UE&amp;list=PL8pAAuuU6yuMqwJS9_122arsrwTLI3gSr Please let me know what you think:)
Your teacher thinks the same
CLUE: It doesn't necessarily have anything to do with Javascript. To quote the Soup Nazi: "NEXT!"
When you say you're using JavaScript on the back end, you're using node. Node is what executes your backend JavaScript.
Because in your first example you are setting x to be the value returned when calling console.log (which is 'undefined'). Your second example creates a function which you can call.
I ran into this question, but for React, when interviewing for my current position. Took me by surprise and really made me think since I honestly love React. Been with the company almost 10 months now.
I totally second this. Nothing I've done in React feels quite as satisfying as the one time I built a pure Vanilla JS game. You could try building a clone of a simpler game like Snake or Pong or Space Invaders, or something more complicated like Tetris or Pacman. This can all be done with Canvas, requestAnimationFrame, event listeners, and good code organization—no jQuery or React required—and it's a great way to build up a very 'javascripty' codebase you can point to for this kind of question.
Me and a college built a full fletched indexer + search engine in nodejs only. The tutors laughed at us for using node. In the end our engine was just as fast as other engines written in java, c# or python, that project was when I really started to like node/js
Yeah but i mean why would JavaScript on the backend be marketable? Why not Java or C# or something like Python or PHP or Ruby?
Like someone else pointed out, I was talking about non-commercial use
"I delivered the feature to spec and and on time"
I don't believe you.
Indeed. I have been hiring engineers and participating in tech interviews for almost 20 years, and would consider that a "strong hire" kind of answer. 
At this point, you should probably test mobile before desktop. 
Yea exactly and I feel like learning without vids let’s you find your own style 
No, no. It's not about other languages. That part is about a standard specification that goes beyond languages. But anyway, why doesn't it apply to `null`? Because the nature of `NaN` is different from that of `null`. `null` maybe seen as _valueless_ as you say. But `NaN` is not _valueless_, it's not the _absence_ of value, but the _negation_ of a quality of a value. What this means is that `NaN` is not "I don't have a value for this" (which is what `null` means) but instead it means "this value is _not_ a Number". So, you may indeed have a value, but, when working with numbers, the only thing you can say about that value is that it is _not_ a number. It is still a value, though. Imagine we're talking about bikes. You have some means of transportation which we'll call `Arffbike`. I have some other means which we'll call `ugwebike`. Meanwhile, JeanUncanny above does not have any means of transportation, so `jeanbike` is `null`. And nschubach doesn't have one either, so `nsbike` is `null` too. Now, comparing to `null` is easy because we can indeed look into Jean's garage and see "there's nothing here", or if you prefer "the thing that is in the garage is nothing". We look into ns's garage and it's empty too. Now, if there's nothing in `jeanbike` and there's nothing in `nsbike`, is there the same thing in both? Yes, nothing. On the other hand, remember that we're talking about _bikes_ specifically. It turns out that you have a car, some make and model. And I have a car too, some other make and model. And so, we both have some value in `Arffbike` and `ugwebike` but the value he have is "Not a Bike". That is, you have something, but it's not a bike. And I have something but it's not a bike either. Can we make a meaningful comparison? Does both of us having something which is not a bike, provide us with any evidence as to whether what we do have is the same or different? No, we can't know more. Because we know we do have some value, but we don't know about the values themselves, we just know one aspect of them: that they are not bikes. This is, again, fundamentally different from the case above. In the case of `jeanbike` and `nsbike` we do know their values: "no value", they have no bike.
Wrote a 50 line util class in my app without requiring 436 dependencies and 7 frameworks all released post 2017
koa/vue
Why did Javascript never add (optional) strict typing, like TypeScript? Also why is there both `let` and `var`? (I actually know the answer, but that might be a good question for you to approach)
Yeah. Thanks. I hoped to become a js backender but it seems to me that there arent a lot of jobs in my area for that if i am correct. So i will first have to check the market here and aim and choose for a language and framework. That would be wiser. 
Made it work on IE and normal browsers.
Fucking recruiters... I love that the answer you want is a fictional one. Reality schmeality, just give me something that sounds nice!
Using nodejs, I made a two-way streaming API for smart cameras. Someone walks up to your WiFi connected camera with a mic and speaker and you could see them approach and instantly talk to them over the speaker and hear/see their responses. It wasn’t terribly difficult to pull off, and I’ve had significantly larger projects, but when it comes to quick wow-factors, nothing beats being able to open an app on your cell phone and start yelling at people in front of your house. 
As an interviewer: I love to ask those questions. The goal is to gauge if you're interested in the technology, not just looking at it as a tool. Don't get me wrong, if you're good at what you do but don't care about it after working hours I'm not going to deny you the offer. It's just a "let's see if this guy is entusiastic about it, and if there's something he always wanted to do but couldn't because he was working a boring job". As for what *I* did that was kinda crazy: we did one of those "upload your photo and and we will embed it in the video" thing, entirelly in JS. I've used CSS transforms to overlay the image onto a video clip, mix it all in canvas, then send the composed frames to a processing server that would insert those frames into the overall video and serve you back a .mp4 file. Was a pain to setup, would still be jumpy at times but man did it look sexy as fuck :)
Both are interesting questions, thanks. About the first one, though... It might get into the old and tired discussion on dynamic vs static typing, which is something I try to avoid getting involved in :)
Backend JS is indeed marketable. The most popular is definitely still Express since it's small, and easy to get started with. At my current job we build most of our backends in node (unless a client asks otherwise, in which case we have used all of Java, C#, Go, Python, etc.). That all said, our current goto backend JS framework is Hapi. We used to use Express for our projects but switched to Hapi, since its more of a convention based framework which makes it easier for us to get started. I personal prefer to start pet projects with Koa since it's very thin, approachable and easy to get going with.
Turn them off in my browser.
Start with Express and React and build yourself an application. Mongo if you need a DB for persistent storage. The 'MERN' stack is very popular and there are loads of resources for learning it. Building a MERN project will set you up to go wherever you want from there. Try out a different front-end library, or a different DB, or another Node framework...the rich ecosystem of MERN makes it great for learning full stack JS, and you'll have skills that can be translated easily to many other JS libraries and frameworks. Don't neglect pure JS skills either. Do some JS exercises, code challenges, build little things with just plain client-side JS. It'll help tremendously.
No im on linux. And im pro hacker. CIA is searching for me.
Never been a recruiter, just an engineer/manager. No one wants a fictional answer, but am HONEST answer with the FORM of thelis fictional example is clearly an excellent answer. If you would like, I could break it down for you so you can understand how to apply the FORM to your own HONEST answers. 
Vim
Regex is pretty reliable and could probably get the job done. Another option might be to use Babel and write a plugin. It builds what's called an abstract syntax tree and you can do certain mutations based on that. Not sure if they parse comments, but I would guess that they do.
I wrote a 6502 emulator. I didn't finish implementing the rest of the machine, but it was enough to see the OS ROM boot up and detect the other ROMs.
&gt; Why does JavaScript have hoisting? What's wrong with hoisting? It's just that JS does static analysis of the code before it runs.
That's a good point actually.
Well. If you know what you are doing, that makes sense
Will there be a live stream?
Being fictional, it really doesn't matter if it is real, as long as it "sounds" confident and ... Okey
Hey, it is really interesting :D Is this list of genres defined by spotify? I'm missing post-rock there. Cheers!
You might all laugh, but learning C and/or C++ as a first language is a great idea :)
Not this again.
I wouldn't even know how to start coding something like that 🤔
That's absolutely not a valid use case. If you want to save bandwidth, use compression. For example you can pass the users once, and assign them local ids for the current session, i.e.: 109727230974 = 1 907340309209 = 2 273497390101 = 3 Now you need to pass just 1, 2, 3, which would take less bits than anything resulting for global *reusing of user ids*. That's an example of dictionary-based compression.
This right here is the dopest thing i’ve read so far
What do you mean?
You’re hired. 
Running a dyson sphere out in rigel
&gt; I mean, there's 18,446,744,073,709,551,615 of them in 8 bytes (unsigned bigint). In JS, we get 9,007,199,254,740,991 (2^53 - 1, Number.MAX_SAFE_INTEGER) out of the box. That's probably good enough for user IDs.
What weaknesses of React did you give?
So awesome! Thank you
A power so ancient and not understood
If you said IE9 it would have been believable
Here's a sneak peek of /r/Buttcoin using the [top posts](https://np.reddit.com/r/Buttcoin/top/?sort=top&amp;t=year) of the year! \#1: [I'm having an orgasm watching the prices dropping - upvote if you're a sick a degenerate like me](https://np.reddit.com/r/Buttcoin/comments/7vglz2/im_having_an_orgasm_watching_the_prices_dropping/) \#2: [a shitcoin startup called Prodeum just exitscammed with millions of investor dollars and left them the following message on their site](https://i.redd.it/bkr8lx4ekvc01.jpg) | [181 comments](https://np.reddit.com/r/Buttcoin/comments/7tn6ld/a_shitcoin_startup_called_prodeum_just/) \#3: [And the returns have already begun. One person and a known reseller we get regularly.](https://i.redd.it/emlo797voie01.jpg) | [287 comments](https://np.reddit.com/r/Buttcoin/comments/7vkrk7/and_the_returns_have_already_begun_one_person_and/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Okay, so lots of devs use it as an easy way to transition their OOP knowledge to JS. That's fine. But this post is highlighting the issue: classes cause confusion because OP doesn't understand prototypal inheritance.
Yes it is, both sides of the comparison operand are `Infinity` (this is true in both JS and mathematical theory)
I built a plugin for after Effects that cut down time and errors creating animations. 
I made my own basic midi format and a way to play it with the web audio API, as part of a basic game that plays a few basic melodies.
It's indeed good enough, however you also don't to treat a user id as a number, because you won't be doing any math with it. I.e. you won't be adding, subtracting, multiplying or dividing user ids, they're an opaque identifier that is what it is. For example, in my APIs a bigint identifier is exposed as a 12 character (at most) string, produced by encoding the internal bigint bytes in a base64-like URL-safe scheme, so a user ID looks like "o9D7juf1". Would the need arise and humanity spans to other galaxies or whatever, the internal bigint representation can grow, and the string can grow accordingly, because a string can be as big as you want (in practical terms, that is).
nice presentation! bookmarked.
I absolutely hate questions like this. My background is as follows: I have been a full stack web dev for 10 years, specializing in C# for 4 years, Ruby on Rails for 4 years, and node.js for the last 2 years. On teh front end, I started out using JQuery, Then moved to knockout.js, now I use React and backbone. The point I'm trying to make: I am easily somebody you could call a qualified web developer and don't tend to struggle to find work any more. The most impressive thing I've ever done? I don't know. I've certainly impressed myself over the years but it's usually just by getting something done in a very short period of time under a great deal of pressure. Even now I can't think of a specific example of this because it happened so often. None of that really helps you though - "impressive" is such a subjective term. I would probably turn it around and suggest you tell them the thing you're most proud of - this is probably an easier question to answer for you, less subjective, and probably gets them the answer they were looking for anyway (which is probably just to get you talking and see how enthusiastic you are).
You shouldn't do that, it only serves to encourage clients who demand full ie support. Stop. Please?
Hi /u/saif_sadiq, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
captain, if you are going to share your repo, at least use the right link https://github.com/captainwz/react-pocket
He/she wasn't looking for a "right" answer, or even something they thought was impressive. They wanted something you were excited about, and they wanted to see you get excited. I talk all cool, now. This is actually a complete parroted quote from two of my friends after I BOMBED an interview and basically gave up about three quarters of the way through... turns out, I would have gotten the job, too, if I hadn't done that. I just decided I didn't get it, and gave up. Told 'em as much. Like a complete asshole. They really liked me up to that point, as well, and my programming skills were better than expected. They weren't as high as I expected in a clutch situation, so I turned that in on myself. Don't do that. Tell them about something you did that got you excited. That's all they want. They just want to get excited with you and say, "that's really awesome", even if they don't care about the concept. They're programming nerds, just like the rest of us, who are forced to sit through who knows how many interviews. It's painful. Hearing about something someone is excited about is fun. Even if the concept isn't =)
I built a little tool that walked through specified directory recursively and checked the mime types of each file within all sub directory and moved them to a single location,
fuck typescript.
x = () =&gt; console.log("hi") will work though
Wrote my own webgl library that did everything from creating transformations (translate, rotate, etc), matrix operations, swapping shaders, caching buffers, creating scene graphs, and a bit of physics support too. I thought the syntax was pretty elegant too, better than three.js imo. It was for a computer graphics course where we werent allowed to use third party libraries so I was just like, fuck it, I'll write my own. [Here it is](https://github.com/woojoo666/Cartesia) if you want to check it out.
"NodeJS is the only real dev language"
I made pong in 5min.
I didn’t say it was recently.
A genuinely useful font loading library code golfed for gzip compression. It is simultaneously the most fully featured library of its kind, and almost four times smaller than its main competitor. The goal was to make something so short and so compressable that you wouldn’t mind inlining it on every page to handle the font loading experience. https://github.com/dwighthouse/onfontready
Nothing in the article actually accomplishes immutability. Instead, the author talks about how one can avoid mutation in such cases as redux state management. IMO the title of the article should be more along the lines of "Avoiding Mutation".
I forget, was there `try-catch` in IE5.5? I can recall faking it in IE4 using `eval()`. Then I would crouch down by the side of the road and rub gravel into my hair for a hearty lunch.
Why does JS not have proper tail calls/tail call elimination? This was added to the ES6 standard, and there's a V8 team blogpost about why they've given up on proper tail calls. IIRC, Safari does proper tail calls. But then also: our catechism is that Brendan Eich wanted to write something approximating "Scheme for the browser." In Scheme and other LISPs, proper tail calls/tail call elimination is really important to the language: there aren't loops, so recursion is the normative way to iterate. So why weren't proper tail calls baked in at the beginning? Why did they get added to the ES6 standard? Why aren't we getting proper tail calls now, since it appears we won't? Is it really just about breaking people's stack traces? (I mean, more generally, why isn't JS actually more like Scheme? And I don't mean just because Netscape wanted curly braces so it looked like Java.)
clap clap clap clap clap
It is quite fun to make a game in phaser, bonus points if you use react or angular to make the game ui on top of it and redux to communicate between the two, if I were asked the question you were that would probably be my answer 
It can lead to bad coding practices potentially. My questions are more around the thought process and philosophy per the thread. I'm just curious about the why in this case.
Heretic!!
Rewrote XML4Script before AJAX was a thing, adding namespace support and 100x faster parsing, and a never released XPath library. Taught internal technical courses called "Javascript: It doesn't suck as much as you think it does" in the early 2000's (90% was about how to deal with the shit that was/is IE/Edge).
How does it compare to https://github.com/mzgoddard/preact-render-spy
I wrote a relational database with spatial indexing, a binary file format, and a render-pipeline to hook it up to WebGL and run CAD software in the browser while WebGL was still in beta. Turns out CAD people were just fine running auto-cad on Windows 95 and that startup went out of business.
"I used 4 of the most popular frameworks in a single application and I made my code so complicated that only someone who knew all the corners of JavaScript could possibly understand it!" ??
Did they mean an entire application or a specific thing you did with JavaScript? I would see about building a nifty library or something that you can use in your JS apps and then talk about the library. E.g. I built a state management library that I really like.
Don't you still have to type x () for it to work?
Reversed engineered Vine’s Private API, Created a web based client that emulated an iPhone basically and enabled you to upload from uour web browser using Chrome extension’s request blocking / cross-origin reformulation tactic. Made over 100k and landed some development gigs from it with companies in SV. 
Yeap. This is the same as the first answer but using an arrow function
The difference is the R and the A. React or Angular.
Does it though? The only reason I could see that ever being good practice would be for performance reasons, but even then I'd have to see an example and evidence where it was better than `1 + parseInt("1", 10)`;
Open source? I'd really like to check that out :3
It was proprietary software for my former company, but it was made with node socket server with some distributed service logic. 
Is Angular a big frontend framework? Does it take long to learn Angular compared to React?
Check out webpack's source. But beware, it's a big project.
https://www.khanacademy.org/computing/computer-programming/html-css-js/using-js-libraries-in-your-webpage/a/whats-a-js-library
..same here, a couple interviews recently had asked similar questions. My biggest issue with React has nothing to do with React, as much as it's more like JS libraries tend to evolve quickly, and I've now been using React long enough where recommended best practices have changed (stuff like using mixins being deemed antipattern). The React code I write now looks completely different than it did a year or so ago. A lot of other languages don't really move that quickly.
Thank's, but this kind of falls in the same category as libraries and frameworks inthis case. Rather than reading the webpack code, I want to read code of nice applications that modularize their JS with webpack. Like a payroll system or blog site or something like that
What did he say that doesn't apply to JavaScript?
Used Typescript, never going back
Yea maybe I should have specified it a little more. I was looking more for JS in the browser, including DOM manipulations, events etc. But definetely I will look into the webpack source code. In fact I already watched the "everything is a plugin" talk on youtube which is a good entry point in the inner workings of webpack
The Node.JS framework is soon to replace PHP, because of its asynchronous programming (handles multiple requests at once, in comparison to PHP only being able to handle one request at a time). Because of this I'd recommend learning Node.js as it is already and will likely soon be even more marketable!
cobbled together a few npm libraries (dv, imagemagick and nforce) to automate some OCR for my first real programming gig. i was pretty proud that it worked at all, it was callback hell and some ugly code.
This one took me off guard, so the only real pain point I could speak of without sitting there looking dumb for too long was using the version of react-transition-group that was available at the time. I find building applications using React/Redux/RxJS a blast, but back then I was really uncomfortable with transitions and animations, and doing them properly as a junior dev in React was a bit of a hurdle compared to doing so with jQuery handholding in my limited experience. I may have gotten lucky, but my interviewer had the same opinion. Having recently updated our project to using RR4 + v2 react-transition-group, I have to say things are much nicer now, or maybe it's just because I'm more experienced than I was. However I did run into some small issues where the new `CSSTransitionGroup` was causing components within a `Switch` to fire `componentDidMount` TWICE if I didn't also explicitly pass react router's `location` prop to the `Switch`. 
Yeah that's why i didn't like PHP. I prefer asynchronous programming. 
Learned it on my own.
It wasn't that special but I wrote a quick little script that would draw pin points on a Google maps, was searchable and when you clicked on a pint it would open a modal for e-mailing that location. I didn't have access to a database to store the email addresses or other information and had to use a JSON file. I didn't want the email addresses to be easily read so I encrypted them. It wasn't that special but I was in a zone when I wrote it over about 1.5 hours and the code was incredibly clean. Not to mention that with about 60+ views a day over 3 years the email addresses don't get spam as a result. 
Have you written a chrome extension? They are a kind of weird little subset of Javascript which interfaces with the browser. You can write things which filter pages, or which create context menus, all kinds of things like that. You can also write your own interface for reddit by accessing Reddit's JSON feeds of content, for instance a gallery which accesses /r/natureport and turns it into a slideshow.
"Hello, this script either increases or decreases the current brightness value in Photoshop when executed." FYI: Math.floor(Math.random()*1) will ALWAYS be 0 ( Math.random() gives you a random float number between 0 and 1, while Math.floor rounds it down to the integer value, in this case ZERO, so Math.floor(Math.random()*1) - 1 is ALWAYS -1 so I don't think your script is going to do anything random... maybe what you really want is +1 or -1 ? something like: Math.random() &lt; 0.5 ? -1 : 1; "The problem is that it can go over the maximum value, or under the minimum value." The fix for this is called a '[clamping](https://en.wikipedia.org/wiki/Clamping_(graphics))' function, i.e. the value gets clamped between 0 and 255, like this: A JavaScript clamping function looks like: Math.min(Math.max(min, num), max) , e.g. Math.min(Math.max(0, num), 255) So putting it all together, a function that RANDOMLY increases or decreases the brightness by +1 or -1 while never going below 0 or above 255 looks like this: app.foregroundColor.hsb.brightness = Math.min(Math.max(0, app.foregroundColor.hsb.brightness + (Math.random() &lt; 0.5 ? -1 : 1)), 255); Hope this helps! 
Yes and yes. If you are doing a large single-page-application, it makes some sense to use Angular or Ember over React.
I don't understand the point you're trying to make, sorry.
The way you answer this question can give me a lot of insight. I don't think a reddit comment box can do complete justice to it, but let me share some of the good things I found the above example, some things that could be improved, and then some negative examples I've heard in the same vein: What was well done in the fictional example: * As written, it sounds like a person who is pretty engaged in getting things solved; I love this! Unless you've been a hiring manager looking for senior engineering resources, you cannot imagine how hard it can be just to find people who know how to express their passion in a job interview. * They were able to concisely explain what the problem was which needed solving, as well as their solution; * They were able to translate the customer's pain point into a technology solution; * They were aware of, and selected, Markdown as a solution, rather than allowing arbitrary HTML injection; * They gave the project enough thought to consider the impact of thousands of reviews on a product; * The biggest plus I found above all of this was the final sentence. It shows me the developer didn't just throw their code solution over the wall and never think about the problem again - they actually followed-up enough to know the impact it made on their customer's needs! This shows a level of mature thinking I find pretty rare in interviews. Beyond that, they knew enough to include this number in the story they told me, which I would tend to read as "they *really* cared that their solution helped this customer." Or, at the very least, "they are a wise enough person to know that this kind of follow-through on a project is something which will impress me, because it implies they will treat my customers with the same kind of follow-through." What could have been better: I don't want to come across as nitpicking the fictional example, I only offer these up for those people who already might have answered in this way and are looking for that extra little "edge" to bring to their interview responses: * Tell me why you chose Markdown. I'm certainly glad you did, but if you explain your reasoning, it can reinforce my good thoughts about you; e.g. add the phrase "for the obvious security benefits"; or even just "because it seemed like the easiest solution". Don't get too detailed, but the more chances you can take to show me HOW YOU THINK, the more I will be impressed to hire you - because that's exactly what I'm trying to draw out of you with a question like this. I care more about hearing your thought process than I do about the specifics of the answer. * Tell me more about the platform in use. Again, not too much detail, but you need to engage me in your story - put some meat on that skeleton! * What kind of testing was done on the component? * What kind of requirements gathering was done? * Aside from the statistical result, what was the customer's response to the solution? * When answering this kind of "story question", it's always good to give me a concrete example of how you faced and solved a problem. For example, you probably had at least one bug in the code at some point - tell me about it. If you don't OFFER an example, you can almost garuntee my next question will be "Can you tell me about a problem you faced while crafting that solution, and how you overcame it?" What you really should NOT do: When I see these in an interview response, they become strong marks against the prospective hire; if you commit one of these "interview faux pas", you'll be hard pressed to recover my respect in the time allotted for an interview. * "We had this one customer than just wouldn't listen to me, and insisted on having reviews on thier products…" - This is the opposite of the final "positive point." I would interpret this kind of comment as a developer who wasn't able to understand that the customer's problem is the DEVELOPER'S problem. Software engineering is too much of a commodity - to survive in today's market, you have to love your customers, and care as much about their problems as they do. * "My boss made me write this code for one of our customers…" - Don't spend one second telling me how bad your last job was. If I get the impression you're still carrying emotional baggage from the last job, I am less inclined to hire you. I want people who can at least PRETEND they're ready to hit the ground running working on my problems, rather than spending time bellyaching over the problems their last employer had. Hopefully some of the above is useful to you. It's hard to keep my thoughts as orderly as I'd like to be in the context of this reddit comment, so I think I may later come back and write a longer blog post, maybe even a series, expanding on these concepts.
having spent time with most of them (sublime, atom, brackets, vs code) vs code was the clear winner for a few reasons, in particular terminal/git gui integration... i reduced three app windows into one!
Oh yeah I agree, people who write code to be hoisted are annoying.
I built a dropdown "menu manager" that controlled dropdown menus on the page. Whenever you opened one menu, it would close all other menus on the page except for the ones that contained the menu you activated. It required one less click than the bootstrap menus and it didn't cancel events that were traveling up the DOM. I was pretty happy with it, although implementing menus that were compatible weren't so intuitive, so I rewrote it in typescript and used interfaces to enforce the correct programming style. I built a library that would take any table and perform statistical analysis on the data within. It would detect whether the data was Nominal, Ordinal, etc. and calculate the appropriate stats for each type. All you had to do was click on the table heading to see the stats for that column. I built a basic tile game world with a viewport that would scroll as you moved your mouse close to the edge. I built a tampermonkey plugin that would scrape data from a business school simulation software. It would determine what your competitors \(other students\) strategy was and advise you on how to price your products optimally. Took me a couple hours, saved me many hours. I built a neural network just to learn. I have made a bunch of useless things too.
I used Prototype to build a ui to interface with a sonus switch api. The company I worked for used it to manage rates on thousands of npa/nxx (area code + first 3) phone combos. I guess I'm still pretty proud of that.
*Instantly hired and advanced to senior god architect emperor*
Thank you dud ^^ i appriciate your help and time for writing this
You can do everything you want with JavaScript, it works everywhere. To impress your boss you can start hacking some hardware. I put a few lines of javascript on a raspberry pi, hack my shutter remote control and now I can open and close them by saying « ok Google open/close the shutter. ». I participate to an event called hacking health camp and create with other guys a thing to detects nearest object with ultrasound and produce a sound in a headset to prevent blind people to hurt their head. I also use javascript for my all day script thing. I work in radiology and some time have to handle a huge amount of images. This week I analyse 3To of files to feed a database, average file size was about 250ko. It took a few hours to read all the files but The script was a hundred lines and it juste took an npm install and node index.js to run. You can do that with a lot of other languages certainly more efficiently but hey I’m a web developer and i don’t now c++ or other things like that. 
If you want to compress React, but even for that there are better options now as Preact blocks you from progress. There's JD.com's nervJS now, 4kb and React 16 compatible, it's a drop-in-replacement. Otherwise, yes, with Preact you get a very small package (also around 4kb), but you would miss out on everything that came after React 15. It doesn't have the new return types, especially arrays or fragments, portals, context, scheduling, etc.
A Hello World application that was only 8gb
Wisdom of the elder Gods 
TIL. But the JS evaluation returns true
That is a quite interesting question. Thanks :) There's a problem, though, and it's that there seems to be a certain amount of politics involved. At least the part about being in the ES6 spec but not being available yet in browsers. And reading through TC39 meeting notes and mailing lists frequently leaves me discouraged. I will try to investigate it at least, though. So, thanks again.
But I work in teams. The end result is impressive, but it's hard to assign any part of the impressiveness to a single person, so I'd be boasting if I claimed that. Meanwhile I'm proud of making _boring_ code, where it's immediately obvious what it does and that it works. Actually the most impressive is when I manage to keep functionality the same while removing hundreds of lines and improving readability, but that's rare and not something I can point at interviews. And I have a good feel for what works technical design wise and what doesn't, I know lots of details of languages and libraries, and I'm good at coaching colleagues. But doing impressive things with Javascript? Are we talking about a job in the demo scene? 
I'm not web developer so I kinda forgot that, yeah, I would get hired instantly if this was enough.
check out this: https://github.com/redom/redom/blob/master/src/setchildren.js
I did a complete 3D editor on the web, just by myself, without using any library beat that, interviewer! http://webglstudio.org/
There are hardly any real life applications that use a 'pure' version of a language. Every decent piece of software uses libraries, the only problem is that we don't have a exhaustive Standard Library so we rely on lots of npm packages like leftpad.
A complication is that as an interviewee I don't know the technical level of the interviewer and what he's looking for. HTML insertion is not a problem if you use any of a range of solutions, like an alternative markup language such as Markdown. But simply escaping the tags is builtin in many frameworks and works, Markdown isn't the most user friendly. Or maybe you can just disallow any free input and just offer some buttons, there are lots of solutions. We haven't had HTML insertion issues in our products for over a decade, so it would never enter my mind to mention it. None of that is ever going to be an answer to "what is the most impressive thing", as it's _mundane_. I would never guess you'd be interested in that sort of thing with such a question. This reminds my of a profile I recently saw for requirements for "Developer 3" in some company (on a scale 1-3, 3 is their "senior"). Where their code should be "of the highest level" and the "always pass tough code reviews" and the level of the code review was "PEP8". What?!
Just a quick note: `typeof` is an operator, not a function, so you'd use it like so: `typeof something`. Although it works just fine as `typeof(something)`, you just need to remember that you can't use it as a function in any other regard (like passing it as an argument etc.)
Every expression is "evaluated" when the containing statement is executed. When `someFunction(args)` is evaluated, the function executed with the arguments. In the first example, since `console.log` returns `undefined` no matter what you pass it, `x` becomes `undefined`. As for the second code, any code inside a function literal is not executed until the function is executed.
Using Vanilla.js only
Yeah totally agree. Very vague. Would it be wise to question what they meant by impressive. One key skill is to understand customer requirements. Conitinuous feedback and reiterating the goal is useful. Maybe it could be something they want to pick up
Very good tutorial, I feel much less uncertain on the topic now. I absolutely agree with your sentiment on examples &gt; definitions and the value of metaphors. You often see authors of tutorial articles using copy &amp; paste dictionary definitions, and very mealy descriptions: I tend to assume such articles are not written to be read so much as written to be put on a CV. That environment makes it hard to be trusting of new sources - but you've done a great job here - don't be disparaging of your abilities to write tutorials at all. 
Im the guy who wrote a physics engine using getters and setters in redux reducer objects. In currently doing game development with generators and custom tick yield effects. That said, if you want to impress an employer, tell them how fast you made the most boring, but useful tool. Tell them how little and concise the code was to make it. Having the skillset to make innovative code is useless for 95% of IT companies out there, including most start ups
troll detected
This is not a strong argument, especially since you acknowledge the need for a professional coder to be fast. Text editors with auto-complete features, like Sublime Text, allow coders to be faster and more productive. If you are still learning, typing in everything might help you remember syntax and keywords, but so does auto-complete allow you to learn by discovery.
Oh, and what product are you going to ship without using libraries? I completely got your point, my point was that this 'purity' thing is nonsense. If you work as a developer you should master the language of your choice that's a given, but that doesn't mean you should care about purity. It's more valuable to care about decent dependency management and using a few select, well-thought-out libraries i.e. Lodash for your everyday utils. Because I'd rather trust the authors of those established libraries to care for perfomance, compatibility, documentation, api design, of our utilities ... than my teammates when we're trying to build a product.
made fully working subtractive synthesizer using web audio api and webmidi. it's quite fun on ipad. http://recrof.github.io/jsSynth/
I build this silly [Meme Machine](http://mememachine.pw) with JS yesterday. It's not the most interesting thing in the world but I'm proud of it.
I've been working on a side project for the past couple of months but built this [Meme Machine](http://mememachine.pw) based off the tech from it. It creates memes based off subreddit content all on the client side which I'm pretty chuffed with!
Thank you
I was never talking about purity or using only pure javascript for real projects. Stopped reading past the second sentence because, I have to repeat myself and tell you that you missed the point completely.
Often more useful than `console.log` is `debugger;`
Your passive aggressiveness is leaking, might want to get that fixed so you can keep further discussions more respectful. 
This isn't "Javascript Debugging Like a PRO", this is "fancy console methods" 🧐
It's the same info you would get from the Google Chrome Dev Tools help page. As previous comments stated - "debugger;" is probably a better statement to use. 
Very nice. I extended it a little to fit my needs. https://codepen.io/MichaelZ_dev/pen/aYQrga?editors=1010 Didn't know about insertAdjacentHtml, love it.
Why not just make a breakpoint using the browser so that it isn't part of the code?
Hey, i made a small webapp that shows the current time of any city typed in. [zonetime.xyz](https://zonetime.xyz) let me know what you think :\)
I debugged errors generated by by Angular in Typescript. Obviously the javascript was minified to add that touch of additional fun. I still like javascript more than typescript: that's impressive.
Thanks for the in depth explanation, works perfectly now!
This is the third time I've seen this blog post. Quit spamming bro
Oh, thanks)
Done. Thanks)
Pros are not debugging using console.log 
...Koa is a framework/library
Try writing a distributed database where nodes can come and go, with fault tolerance and recovery. Like, blockchain but not. 
Interesting, thanks!
There's no passive agressiveness, and I am not a purist either, sorry for your reading comprehension issues though.
Thanks! I was genuinely curious cause I also love React 
Elisp is elisp no matter which distribution of Emacs you use. Between the great spacemacs docs and the emacs manual I learned emacs by writing my own [spacemacs layers](http://spacemacs.org/doc/LAYERS.html) 
in older browsers it was allowed to assign new values to the global 'undefined' variable. this is not allowed anymore. and in addition 'undefined' is not a reserved word, so you can have variables or parameters named 'undefined'. see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined for more information about undefined. the IIFE in your example code you posted accepts one parameter named 'undefined', but no parameter is passed to the IIFE. so its value will be the default value, which is 'undefined'. and that is exactly what somewhat explicitly-implicitly sets the value of 'undefined' to 'undefined'. see https://developer.mozilla.org/en-US/docs/Glossary/IIFE for more information about IIFE. this is one example of some Javascript weirdness that exists ... pretty shitty to encounter as a beginner or even advanced Javascript developer.
VSCode
so this basically means, that if someone/something messes the value of undefined, still our IIFE is safe? 
the title should be "console.log like a pro"
Something missing in the quote and explanation is the result of: undefined = true Which will not change the value of undefined, even in a local context. For example; undefined = true; (function IIFE( ){ console.log(undefined) // log: undefined })(); The assignment to undefined will not work in a modern js environment. You can emulate this behaviour such: Object.definedProperty(window, 'thing', { value: 42, writeable: false }) console.log(thing) // 42 thing = 99 // console may log 99 if you are interactive console.log(thing) // 42 So the example is pretty bad in that it's conflating variable shadowing (scope dependent variable) with an object variable that cannot be assigned to (in most environments). In the [6th edition of the spec](http://www.ecma-international.org/ecma-262/6.0/#sec-undefined), this is explicitly true. window.undefined will always have the value of undefined. So IMO, it's a pretty bad example to give a "n00b", since it is misleading and wrong from the very first statement ;P.
Nice proof-of-concept and good use of emoji, but...*why?* What's the use-case for taking stable, portable ES5 and running a robo transform that could break the code in so many ways for any number of edge cases? Smells like a recipe for disaster. If the code needed to be revisited and the dev really wanted to work with class syntax, she could "upgrade" it by hand and be more confident. I don't mean to come off harsh but, I wouldn't touch this for anything remotely resembling production code. At least add some test coverage if you're intending this to be anything more than "funsies".
yup you are correct. modern browsers explicitly never allow to configure undefined and the spec says, Although it is possible to declare identifiers with the name undefined, its not recommended. Although I think the point the author is trying to make is for older browsers, which indeed poison the undefined but still our IIFE is safe. atleast thats what I understood from the replies here. Thanks a ton for the reply. :) btw on a side note, what does definedProeperty does? :3 
Object.defineProperty (misspelled in my reply because I seem to automatically hit e+d together, lol) allows you to control certain properties on an object that are otherwise impossible to express in javascript). See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty If the author wanted so show how javascript variable shadowing works, including that older environments had undefined behaviour when assigning to undefined (lol, irony) is a poor trap for anyone trying to learn.
Yes, but you’re question is extremely vague. There’s nothing about pivot tables that are inherent to JavaScript. 
Yes to the first part. The second part is a bit trickier. React itself is simple, but when you combine that with the ideas you have to learn for React Router, Redux, etc. They become about equal. In my opinion, React has *too much* choice when it comes to making a full app with it. However that just makes it equal in terms of learning curve compared to Angular. If you like TypeScript (or types in general), Angular offers easier support for it out of the box.
Don't ever do this
If I am a troll, then who's the trollee? OP? All web developers? Or the architecturally corrupt, company driven arena of buzzword technologies they fight in for peanuts?
exactly. but this should be no real issue nowadays. I never used this pattern and never had an issue in the past seven years, although I have to deal with third party code and ad frameworks almost every day. I'd say the necessity of this pattern is pretty outdated, in general.
Looks neat! I might give it a try with a project I am going to start in a month.
What’s wrong with wrapping whatever element you needed with a label paired with the file input hidden?!
Cool! Let me know if I you have some questions or ideas on how to improve the library! :-)
that's pretty impressive. Do you have a link to it?
You need to create a js object using the new keyword before assigning properties to it. let obj = new Object(); obj.x = [1, 2, 3]; obj.y = [4, 5, 6]; obj.radius = [7, 8, 9]; // result obj = {x: [1, 2, 3], y: [4, 5, 6], radius: [7, 8, 9]} 
No problem, didn't take it as a critique and can relate to the arguing completely! :) I'm a bit in the middle of building another library so would be great if you could make the wrapper happen! If you do, please let me know, would be great to have a link to it on the website and readme!
Yeah of course, I would give you proper credit.
I meant the other way around, me publishing your wrapper on the website and readme but that sounds good too! 😬
So basically like this example: https://pivottable.js.org/examples/mps_csv.html Except, I would like to be able to click on a cell and have it take me to another website. 
Is this accessible?
So still yes, I guess? It’s not clear what you’re asking for. 
Hey hpm6748! Very good observation. I will work on this ASAP. Just double checking, when you refer to accessibility, do you refer to [this](https://www.sitepoint.com/accessible-web-components/)? Cheers and thanks for pointing this! 
oh but how does new Object() differ from let obj={ x:[] y:[] radius:[] } Im asking because I heard that its preffered to use [] instead of new Array()
Ok thanks thats what I was doing I had a for loop with push. I guess I had a typo In the code.
You know what really sucks....almost every one of us know the feeling of "getting something done incredibly fast under incredible pressure". Does it ever occur to someone that this is a recipe for burnout?
It wasn't JavaScript (ECMAScript, As3 in fact, yes it was FLASH), but I built something that forced VMWare to release a Linux version of VIClient. (They did it with Wine, just to be insulting. Mine was better.) 
My question has been answered. Thanks.
In my experience the best engineers are those who have both excellent technical skills as well as (at least) good communication skills. Someone who thinks good communication skills are bullshit probably hasn't spent much effort developing them. An engineer who comes up with an ingenious way to solve the wrong problem isn't contributing anything to the team effort. An engineer who solves even the right problem in a convoluted way that they can't (or won't) communicate to the rest of the team may actually hold the team back, as they can become a bottleneck when changes need to be made.
Err, well. I have. IN cases where I needed real performance and had to do something obscenely twisted.
As someone that still has never used Twitter I find it very interesting it made it to your shortlist of JS resources.
"in" iterates over values "of" iterates over keys what else are you having problem with? An array is an object that can have custom keys, but otherwise, the index is the key for each value. 
I built a library that turns the browser dom into your playground. Essentialy, it allows you to extend the browser dom with custom html elements. I invented the principle before the web components business and the shadow dom. Further more, the custom elements remain part of the visible dom, and as powerful. You can take their innerhtml, you can move them around, you can use templates to construct them from more complex html, and you do not actually pollute the original dom with any non html elements including the custom html elements originally in the html. Think angular, but components are real components, as in just other nodes in the dom, and you use them like the dom. You implement their rendering, and I am not talking about their html output, they can have children, same interface as the interface to the native dom elements, they have xml specification related to parent child relations, and on top of that you have proper OOP, (search for my crxoop library), true inheritance, including template inheritance, true encapsulation, and the power to do the processing of the custom html on the browser, or on the server using any server language, and have a website running with js enabled and disabled, without any extra sweat. An the whole thing built on top of a security suite I built, and deveopment without the need of any external tools, but straight on the browser. Needless to say, something like this, I ended up finding, to be too powerful for a web site, and I ended up using it for mobile apps only. Till this day I am yet to come across a framework to give me any where near the same power and with the same simplicity of the development environement. I could be wrong.
Just use `Object.keys`, `Object.values` instead, they're more intuitive and are composable, unlike plain `for` blocks
what do you mean by composable?
Technically for loops are more performant, so while I agree for ease sake this is a great approach, for loops do have some use cases.
I use both =&gt; they have different use cases.
react sucks
Thats offensive.
Yep, `for` is probably preferable if you're writing a library, or if you're having performance issues in a *very* long loop (unlikely), or if you're using `await` in serial.
WERD! Holy cow, MERGE CONFLICT VISUALIZATION FTW. At least, that's how happy it makes me, when I'm managing crazy projects.
Ok? I actually like React, but your comment seems a little non-sequitur.
When iterating over arrays, you pass functions into whichever array method you're using - those functions can be standalone and referenced elsewhere. const incrementAge = person =&gt; person.age++; Object.values(arrayOfPersons).forEach(incrementAge); // ... // use incrementAge later, such as on arrayOfDogs But when you have a plain block `{` `}`, you can't really do that: for (const person in arrayOfPersons) { // whatever operation you perform on each `person` here won't be usable elsewhere // unless this whole for..in block is wrapped in a function that gets passed the array to be iterated over // and at that point, might as well just use Array methods and `Object.` instead }
YES YES YES
Generally classes are used for visual representation, not for containing data. It's better to use data-attributes here. 
Why an alternative language has not been proposed/accepted?
Ya I don't like everything about pretier but it's super convenient. The only other option is linters but those require configuration and prettier just works.
... i don't use 1 letter variables
I agree there are times when the prettified code is uglier, but I like the objectivity of it. Since integrating into our workflow at my job I've found that we almost never talk about code formatting anymore (maybe some confirmation bias there), which I think is a great thing. I'd much rather be talking about architecture or the domain problems. Also, even if you don't like the way prettier formats something, at least it's consistent and everyone's code will be formatted that way.
Except, we're already using eslint to enforce the basics, so coworkers' syntax is fine.
I agree with this guy... But those are some wise words dude. I'm not anti prettier but that doesn't mean I'm for it. It can't be all black n white. Kinda obvious after thinking about it. 
I don't like the objectively to it. Formatting is subjective. Or rather, some aspects of formatting are subjective. And some objective parts of it require more information than `prettier` has. I'm happy with indentation size being enforced, or brace style, or space after `if`. But some things are more subjective than that, and I want to retain control over them. And I don't mind if Alice and Bob format their code slightly differently. Consistency isn't really that important at that level.
The engineer who can spout bullshit about some react website feature they implemented and how it totally changed the company they work for is likely neither.
Not if you're accepting answers like that
Then /* prettier-ignore */ that line and get over it.
It's not actually idiomatic; the two kinds of loops have entirely different purposes and behaviors. for...in iterates over enumerable properties of an object, in a non-deterministic manner (e.g. it's not alphabetical, and may vary slightly from environment to environment). This has been part of the language since the beginning of JavaScript. While it can be used to iterate over indexes of Arrays... you shouldn't (because there is no guarantee that it will run over the indexes in "proper" order. it only works in the first place because array indexes are enumerable properties with integer names). It's also important to note that for...in iterates over *properties*, not values. for...of was introduced with ES6 to, amongst other things, fix some of the limitations/problems with for...in. Unlike for...in, for...of loops over *iterable objects*, going over the *values* of the iterable. The two looping methods are fundamentally different and not just a matter of syntax. In addition to values vs. properties, for...of iterates in a deterministic order, dependent on the iterable. In other words, it will always loop in the same order in every environment. The [code examples on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of#Difference_between_for...of_and_for...in) highlight these differences.
I kinda agree with you in the sense that throwing prettier at bad coders isn't really solving the problem. In a perfect world, everyone would read their code 2 or 3 times before committing it. And I do that most of the time, depending on the size. But then again, I would reread a one line change after typing it and when I do a git add - p. Bigger code I go through more times. Does that make me code slower? Yes. Does that make my code less error prone so I spend less time debugging it every week? Also yes. So it just depends in what you think is better. Looking at your code for an hour or fix it for hours if not days. Enough of my ranting, what I mean is, I don't want to spend my hours CRing a more junior member on inconsistent code styling. Those literally distract me from the actual code. I code review twice pointing out all kinds of immediately spottable mistakes. Just to see that the third time, I realise the logic itself is weird. Everything needs to be refactorred and I probably had spent less of my time if I had just written it myself in the first place... So I conclude... No I don't want to be forced on using prettier, but yes, let's have it anyway, I will just turn it off in my editor. And advise anyone that doesn't read their own code, to turn it on. 
The point of a thing like Prettier is that after a long-winded, stupid meeting between engineers about whether to use tabs or spaces, one dev can just throw up their hands and proclaim, "Fine, let's just pick a thing that does this for us, and whatever it does is now our standard." It's possibly less fun for individual projects, but that's cool, use something else for those, I'd say.
Actually prettier respects some of the deliberate choices you make. It lets blank lines stand, it also doesn't unpack things you want terse (you give it hints like trailing commas). That was what made me fall in love with it in the first place, because auto-formatters before prettier behaved like machines. 
I don't feel like I spent much cognitive capacity on formatting. Maybe it's because we already have a ton of eslint rules, some of which I think are dumb, but which I've internalized. And my IDE does a decent job at formatting my code as a type it. Typing speed is not an issue for me, I spend more time thinking about the problem then typing and formatting my code. I doubt that much time is actually wasted. What does waste my time is reading a PR where someone reformatted the file with prettier, and now there's a ton of noise in the diff. &gt; Now I just write whatever I want, save it and boom, it's formatted. My feeling on that more along the lines of: Now I just write whatever I want, save it and boom, it's **destroyed**, and replaced with what someone else wanted. Or I guess a shorter version of that: Now I can't write what I want.
The point is ending arguments about nit-picky standards amongst developers, full stop. That's why you can barely even configure it much. My team uses ESLint, and honestly, we've configured it into a hot pile of shit. I'd rather we use Prettier, even if I don't love every setting.
Don't use it then?
It doesn't come at the cost of readability though. 
But can you provide an explicit example where this is in fact working? I know syntax highlighting works, but I've yet to see the actual distinction in syntax highlighting detailed in the three bullets above. I'm looking for an actual example (editor, screenshot, link, etc.) that showcases them truly distinguishes between them. The syntax highlighting I've seen doesn't distinguish as granular and this is what I'm after.
&gt; What does waste my time is reading a PR where someone reformatted the file with prettier, and now there's a ton of noise in the diff. Formatting commits should be made on their own anyway. If the file was already formatted with prettier, this doesn't really happen.
I'll see if i can get it to do that, the next time I'm free and on deck. Sorry if it's mis infos, will try to help further. 
You could try using data instead, like data-date=12-18-2018 inside your div tag, that way you can grab all elements with data-date to do whatever.
`/* prettier-ignore */` seems rather ugly to me. Besides, my experience with eslint ignore is that someone will come along and remove them all and "fix" the code, even though there we reasons behind them.
Hopefully it just means the future is a place without Safari :) Jokes aside, either I'm misunderstanding something or it's broken on Firefox desktop, too.
Fixed and released on 2.1.0!
The eslint rules are set a higher level, so while we do have an .eslint file with a couple of tweaks, we don't really have discussions about it. We probably are about to waste some time debating `prettier` though. Unless I just decide to stay silent on the matter.
Hi Fordiman! Could you give me some info about your device browser? Thank you!
It only comes at the cost of readability if you let it. I think my poorly stated point was that any restriction can become a nightmare if you don't intend to operate within the bounds of said restriction. OOP can become a hellish landscape if take the OO restrictions and just abuse the design by having a God-Object that holds every application property in a mutable state.
Fluent APIs are brittle anyways :)
I don't work alone, or live in a vacuum. So I'm attempting to find a sub-community of people who also don't like prettier, and see what they're doing and how they're coping.
I'd say you're right. ESLint is less reliable and difficult to maintain because of the abusive flexibility that people expect from it. I've found that sometimes I just don't have the time to understand what ESLint is doing and whether that is what I want, too many options.
2.0.1 😅
Excellent reply.
Yeah. We just prettified everything in it's own PR when we initially integrated it into our workflow to avoid the diff problem. There are tools for only prettifying the hunks that actually changed, but it seemed easier to do just prettify everything and not worry about it again.
This is a big part of why I don't like python. There are times when the way you lay out your code is important, for a number of reasons, and tools that don't allow this are far from ideal in my mind.
Try to detach your ego and accept Prettier's restrictions. After using it for a few weeks, you'll realize that you've never felt more fluid writing your code.
eslint, editorconfig and strict code reviews
[Gofmt's style is no one's favorite, yet gofmt is everyone's favorite.] (https://www.youtube.com/watch?v=PAAkCSZUG1c&amp;t=8m43s) 
I understand you don't mean something that _compiles to JS_ but a different, independent language. But indeed through the years many have actually been proposed and many attempts have been made at running other languages in the browser. As for not being accepted, it's a combination of: - economics - the first one wins - the open web All these, and other, factors make it _difficult_ for other languages to be supported by browsers and used by programmers. In any case, the situation and the reasons for it, have very little relation to JS itself.
Sure you can reference external functions, but you can't easily take a `for` block and *use that block elsewhere* like you can with functions.
We use prettier, and eslint (airbnb style + a couple of own rules). One of the best choices we made. The most annoying is stylelint, but all the linting and pretting keeps our code style consistent across several apps. If things get to stupid we disable linting rules in some cases, but our PRs go through reviews anyway. It's just essential when couple of people work on the same codebase.
I am not resistant at all, simply interested in the vanilla Js way of doing it. It's not that this is an actual side project of mine, just wanted some ideas on it. Also sometimes you join teams that started projects with nothing but jQuery included (yup, still happens). I cannot just revamp the whole thing and use react, compile my code etc. Personally I get this done with vueJs in a much neater fashion.
Agree! I was a massive anti-prettier I used to call it shittier, but my opinions on it has changed later, prettier plugin in VS code made my life so much easy. It will take some time getting used to. But once you go prettier there's no slippier.
I don't want to say Vim, but, Vim can do it, provided you use the appropriate highlighter. There are even some that highlight certain popular libraries.
If you haven't started using it, definitely wait until you have a go. Try and forget about style. At the end of the day, style does not contribute value to your team or business, but not having to worry about it does.
...but doesn't Prettier offer a configuration for that? So it's not a one\-size\-fits\-all.
I agree 100%. How is adding configuration going to break their whole purpose? Do they care what my code looks like? The whole purpose of all these tools is to take formatting out of the equation for a project or company, not to make everyone's code look the same everywhere.
Our compromise is ESLint with org-wide rules enforced at commit time. ESLint + formatting on save is just a fluid as `prettier` from a DX perspective, and you get to have your weird rules if you're one of those folks that don't like a decision that `prettier` has made and won't let you configure. That said, the most important things about _any_ styling ruleset is that it's consistent, not that it's perfectly aligned with any single developer's preferences. 
As I said, "looking at Github's top 10 repos" ... I don't want them to be listed here because they are very easy to find.
Why are you dragging everyone through your ego? Doesn't sound like you know how to pick fights that matter.
The thing is, if the matrices are big, it's probably better to do it on the GPU. But if they're small, it's probably a 3D graphics usecase, where you're kind of always using 2x3, 3x3, 4x4 :/
Also, linters are incredibly annoying when they tell you shit but can't just do it. Eslint can't autofix most of its rules. 
Being so picky and snowflakey that you care about minor reformatting code temporarily just for your pleasure sounds autistic rather than the future. Like someone who can't live with others doing things slightly different. Not the sort of person you want on your team. Better is to relax and remain unfazed by small differences. Not just in programming, but life.
I appreciate it. I'm just trying to get proven wrong as I've never seen the granularity I'm after.
I can't help but feel like not wanting someone on your team because they have different code formatting preferences is incredibly petty
I'm assuming various editors *can*, but have you seen Vim do this? I feel at this point (trying to be proven wrong) that this granular syntax highlighting I'm looking for has yet to be implemented.
It is. But that's not what I said, so I'm unsure of why you chose to reply to me.
I also work with other people i trust and we do code reviews. By and large prettier solves problems i don't have. 
This project, while an amazing concept, has been dead for almost two years. https://github.com/gss/engine/issues/219
There are options to do that with things other than prettier though?
Completely agree with this
Depends what you want to achieve. Do you want to focus on acquiring knowledge of all kind of programming? Be more employable? Be more efficient? Have alternative to your current set of tools? Everyone has different objective. I would learn python if I want an alternative to node.js which let me do small tools faater than node.js. I wouldn't learn python to learn new stuff because its too similar to nodejs. If I want to learn new programming concepts, i would look at Java, Rust or Haskell for example. No matter what you learn, think what you expect to learn and as you learn think about the benefits and drawback of any solution, there's always both.... 
So, when someone suggests we should use prettier I should call them a junior developer and ask them why they're wasting my time? Or does that only work in one direction?
I agree! Code readability is not always objective. Sometimes a piece of code is compact, but semantically complex, so you want to space the individual parts out a bit. Sometimes you're doing things which are trivial over and over again so you want to make it more compact so it scans easier. There's lots of little examples like this where an algorithm will make your code less readable, not more. We've solved this problem a long time ago: create a set of coding guidelines up front. Use peer review to enforce. If mistakes get made repeatedly, add it to the linter rules. I was part of a project recently, where the lead dev went overboard with prettier and ESLint set to the strictest level possible. Imports had to be sorted alphabetically, which means you couldn't group things together (which I sometimes do e.g. when two imports are related, or when I need to add a comment that pertains to multiple imports). I encountered more than a handful of cases where the tooling would *conflict*, which means there was no way to get the code through the git hooks because there was no way to get both tools to agree. All in all I spent more time struggling with the tools than actually writing code. It sometimes seems like people like prettier because they see their coworkers as imperfect machines and they want to "fix" them using tooling. These are social issues, which should be solved using social tools (communication, agreements, compromises, trust, etc.)
There are, but having a solution that is used by the entire community by consensus is a huge win. Prettier is style only and it's the best tool for the job.
Gofmt, rustfm and prettier aren't different. They're just taking the nuclear approach and making a fuss about the formatting of everyone on the team. It's still one group passing their preferences onto the team. 
The same old complaint for form over function... This is why I really like Go: no need to waste time parsing the code you write in that "lovely" special format. Usually accompanied by some super clever object-oriented-functional-inheritance design when just a simple map would solve it.
Pretty nice! No issues on mac + chrome.
Yes. Because it's really a browser. Turned into a code editor.
my guess is WebStorm by JetBrains
Thank you! 😬
I use it, but I only use it selectively when I know my code isn't formatted well (which is rare since I'm pretty obsessive about that stuff) so I don't have to fix it up manually. In VS Code: select -&gt; right click -&gt; format selection.
I use both too. Often unintentionally substituting one for the other. 
I learned to program in perl. I'm quite aware of what life is like without formatters. I just don't feel like they matter half as much as folks think they do. Work with decent people(woth code review) and the code style will emerge with the folks you have and that's okay.
hehe le autism meme xD
I thought it was a mental disorder.
Awesome job. I'm having fun playing. 
&gt; your talking across an API instead of scripting editor behavior Hm, right. And I do quite like the idea of writing macros/plugins in the same environment in which most of the editor itself is written (as would be true for elisp but not for NeoVim). And I quite like the elegance of lisp as a language, most of the time. It's long been on my todo list to try getting more under the hood with these editors so thanks for the pointers.
You are not alone!
I agree with all comments: Consistency + Coworkers + Focus on coding instead of style &gt; Personal preferences
And new developers? How much time are you going to make them waste trying to decipher a style that has emerged from your team of "decent people". You've got to think about all the different levels of people that you are working with. If your lucky enough to be working on a team with only experienced Devs, then sure. Honestly, maybe a code formatter isn't for you. But, if you've got people on your team that are new or opinionated enough about style to the point where it impacts productivity and delivery then code formatters are essential.
I definitely lose my mind over it. Can't help it. 
Formatting rules already exist, just use those if you want a team standard. 
If they could get over minor aesthetic differences they wouldn't be insisting everything be formatted to adhere absolutely to a single rigid standard. I've been coding for over 25 years. Beyond the basic _ergonomics_ of a single indentation style and linting for obvious typos, what makes code readable is not the formatting but the stylistic expression. You can prettier up shit code as much as you want, but it's not going to be more readable. But if I have some really good and on-point code, then some extra formatting flair can improve its readability even more, which tools like prettier just destroy in their naive attempt to mechanistically know-it-all. I liken it to insisting one should never end a sentence with a preposition, or banning oxford commas from a text. Only anal schoolteachers do that, the ones who couldn't write any brilliant prose if their life depended on it. Here's some actual senior level advice: juniors will often insist on giving their variables veryDescriptiveSpecificThing names, because there are a lot of different Things and they need to be disambiguated. But if your code is really good, then you rarely have more than one Thing in play at a time, and there is nothing to distinguish. Writing everything with descriptive variables like writing without pronouns at all, talking about so many different things that you can't trust that the reader is following your train of thought at all.
I've onboarded dozens of junior devs, including interns, and have never had these types of issues.
Please don't use autistic as an insult.
It's not an insult, just what an austic would do.
im not sure what you mean as that sounds like the point of syntax highlighting, hers a thing from the default vim syntax js highlighter syn keyword javaScriptConditional if else switch syn keyword javaScriptRepeat&gt;-------&gt;-------while for do in syn keyword javaScriptBranch&gt;-------&gt;-------break continue syn keyword javaScriptOperator&gt;-----&gt;-------new delete instanceof typeof syn keyword javaScriptType&gt;-&gt;-------Array Boolean Date Function Number Object String RegExp syn keyword javaScriptStatement&gt;----&gt;-------return with syn keyword javaScriptBoolean&gt;------&gt;-------true false syn keyword javaScriptNull&gt;-&gt;-------null undefined syn keyword javaScriptIdentifier&gt;---arguments this var let syn keyword javaScriptLabel&gt;&gt;-------case default syn keyword javaScriptException&gt;----&gt;-------try catch finally throw syn keyword javaScriptMessage&gt;------&gt;-------alert confirm prompt status syn keyword javaScriptGlobal&gt;-------&gt;-------self window top parent syn keyword javaScriptMember&gt;-------&gt;-------document event location· syn keyword javaScriptDeprecated&gt;---escape unescape syn keyword javaScriptReserved&gt;-----&gt;-------abstract boolean byte char class const debugger double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile
So you're against style guides in general. Yeah, can't say most people would agree with you there. I've seen bikeshedding about style slow code reviews to a halt. Not very convincing.
You should never use for/in. Easy as that.
Yes, I have. I have used it. I don't find it specially useful as you can quickly end up with an saturation of different colours which then produces not better visual information but worse. If you very carefully choose your colours it can be somewhat helpful. But in any case, yes, I have used it.
Sure, but why get rid of my parentheses? Now my math operation doesn't work right.
My only complaint about the vscode Prettier plugin is that there doesn't seem to be a way to have it enabled only for repos that have a .prettierrc file in them, without manually setting editor.formatOnSave in the workspace config. I just want a way to say it's enabled when it's there and otherwise disabled.
Can you explain why it's a hot pile of shit?
&gt; Everyone must have the same settings On the contrary, each developer can have their own settings. Only the comitted code needs to be consistent. I have own my own prettier config with some personal tweaks.
Prettier has some config options yeah. As long as the comitted code chooses one set of configs, each dev can tweak it in their own editors however they like.
We have code reviews and people just go through linting rather than learning, understanding and asking questions. I'd love to have them say something a little more constructive than: "please add a space here"' they're literally scanning for low hanging lint fruit so they can pretend they're reviewing
&gt;Plenty crowded? what? How does an object get "crowded"? Perhaps by having more properties on it than a developer could be reasonably expected to peripherally remember at once. Yes, `window` already has many more properties and methods by itself - don't add more unless absolutely necessary (such as for a library interface). Instead of window.libraryMethodOne = () =&gt; ... window.libraryMethodTwo = () =&gt; ... do window.myLibraryName = { libraryMethodOne: () =&gt; ... libraryMethodTwo: () =&gt; ... And if you're not writing a library, there's rarely a good reason to use global variables at all. If you elaborate on your situation and what you're doing, we'll have a better idea of what you're trying to accomplish and the better practices you can utilize to avoid globals.
That's the approach I'm going for, React Native + GraphQL and then Python. Thank you for the breakdown :)
Nah i'm not having a problem, just trying to grok the whole "too crowded" statement. It's just a metaphor, sure, but it's like saying &gt; Let me adjudicate into something more comfortable. what??
I'm confused at all the `let`s. If you aren't reassigning the variables, why not use `const` instead? Instead of referring to `document.IOFilterJS` everywhere, why not create `IOFilterJS` as its own variable, assign it to the as a property of the document, and then reference the standalone variable? Much less syntax noise. Same thing for properties inside IOFilterJS that are often re-referenced, such as `IOFilterJS[filterName]`. Instead of `for..in` and then a `hasOwnProperty` check, it's nicer to use `Object.keys`. Instead of if (condition) { // long block you'll reduce your indentation hell by doing if (!condition) return; // or break, or continue // long block
If you're "building a project that adds 39 methods/properties to window", then even if they are documented, you definitely do have a problem.
I don't understand why it's so hard to have a build enforce linter rules. That's what we've always done. 
Style may not add value to your code but it can certainly take it away. Any extra time spent reading and understanding code costs a business time.
Why would you need an "anti-prettier" movement? It's perfectly acceptable to not appreciate a popular tool, but all you have to do is just "not use it". Seems like a strange thing to organize around... /2-cents
Failing a code review on linting is such a waste of time 
prettier doesn't have dominance. eslint is far more popular. In downloads this past week: [eslint](https://www.npmjs.com/package/eslint) 2,690,752 [prettier](https://www.npmjs.com/package/prettier) 982,289
ESLint uses an AST internally as well. (just in case you were unaware.)
I'm not acquainted with the `fso` library, but I'd see if there's a `istream.CloseTextFile` method. Try logging the `istream` object and see what methods are available.
If I can just stop it from wrapping one-liners and template literals it's all good for me. I appreciate 99% of it, I'm not gonna shit on it for uglifying a few lines here and there. In a recent project, among 1800 lines, in only 2 places did prettier actually stand in my way.
I'm assuming they've overridden a bunch of defaults and disabled enough rules because some individual developers didn't like them at the time, until now it's a crazy-quilt with no coherent 'opinion' on code.
yeah i was just on a project for a while with really restrictive eslint rules. Would get annoyed when the code was fine but the function needed fo be defined alphabetically, when sometimes i’d like to group things together by what they did vs what they were named its usually a non issue though and enforcing some code quality tooling on save/commit cuts down on the amount of ~~ //TODO: Clean this up~~ comments
This. Eslint is the modular prettier they're bizarrely begging for. Why the fuck would we fork prettier when it's so much easier to just tweak eslint rules?
I remains a novelty.
what was it called?
I think the main problem is that as you add more and more properties, you run the risk of accidentally re-using the same name twice, at which point you're going to start having a lot of problems that are hard to debug. By grouping everything together into objects that store related properties, you reduce the risk of this happenign.
I think it was Breach, but I'm not seeing any development in awhile. Looks like it's fading away.
This isn't really in line with your goals but I think Python is the choice that most diversifies your resume and I'd much rather diversify than go deeper into the MERN stack or any other A/R/V stack. You already have a DB under your belt, react native is just going deeper into your stack (of course, towards a different goal, but still, you're just learning more React here), but I'm not seeing that you already know a high-level, general purpose language like Python or Ruby.
I think simply not having conversations about syntax is the real benefit here, it is a total time waste and happens WAY too often.
Nah.
Not to mention 99% of all programmers agree on majority the same stuff, with a few outliers such as indentation style (spaces vs tabs, 2 spaces vs 4 spaces), and semicolons or no semicolons. If you're worried about onboarding a new dev and them being confused because you're not using prettier, then there's deeper rooted issues than what formatter is used.
I just got a hankering for peanut brittle. 
Twitter is just one of the best way to keep up with a lot of developers. I list it as one of my primary resources because I find tremendous value in seeing who the authors of open source libraries I use are interacting with and what they're talking about. It's also the primary way people at conferences and tech events tend to want to connect. I can't say how many times I've seen someone give a talk or something and followed them on twitter only to find myself having discussions with them a year later. Or how many times I've tweeted bigshot devs or tech companies and gotten sincere responses. I even find it to be the most effective way to communicate with my local utility/cable service providers. Twitter didn't make much sense to me either until I got in to the tech scene; now I love it.
Twitter is just one of the best way to keep up with a lot of developers. I list it as one of my primary resources because I find tremendous value in seeing who the authors of open source libraries I use are interacting with and what they're talking about. It's also the primary way people at conferences and tech events tend to want to connect. I can't say how many times I've seen someone give a talk or something and followed them on twitter only to find myself having discussions with them a year later. Or how many times I've tweeted bigshot devs or tech companies and gotten sincere responses. I even find it to be the most effective way to communicate with my local utility/cable service providers. Twitter didn't make much sense to me either until I got in to the tech scene; now I love it.
I like prettier because I really don’t care about formatting. There is something to be said about never having to think about it while coding. Also not having a huge diff when you change one line of code in another project and run your different IDE’s formatter. 
k
Vivaldi is still alive but yeah I believe you were referring to Breach
Until you run into // eslint-disable and all bets are off. Prettier is at least all or nothing (if the file isn't ignored, of course)
&gt; Vivaldi actually that might be it.
Hopefully you have code reviews and make sure people don't do that without a good reason.
what version of node?
I like using prettier, but I hate one thing about it, and every post related to prettier I say the same thing, hoping eventually I get a response. I don't want prettier to put chained functions calls on multiple lines when they are under the print width, or at least let me configure how many I want to be able to chain. Because as it stands the max is two. So when building tables with knex, or any code using "builders" I can't use prettier without doubling the length of the file and making things altogether less concise and harder to read. Please prettier let me configure how many chained function calls I want to be able to make before you automatically break it onto multiple lines. Anyone feel me? 
This is ES6 module syntax, which Node.js doesn’t support, yet. You need to translate it to `require()` or transpile it (Babel, TypeScript, etc.). const tf = require('tf');
This comment was a condescending pile of garbage.
&gt; I've seen bikeshedding about style slow code reviews to a halt. That is a company culture problem, not a code formatting problem.
wish they would take note from how Atom does it. shows the status in the bottom bar and allows you to toggle it on click.
I simply don't use it, tried it once and it was too far removed from my personal preferences which I have tailor made in my eslint config over the last few years, but as they say, it is extremely opinionated, so it's not for everyone and its most certainly not the only option.
its such typical js dev bullshit if i dont like it its bikeshedding if i do its meaningful fuck off, the team will deliberate on things it deems meaningful or interesting or not imo prettier is a heavy handed solution to a non problem code formatting has never amounted to more than on the order of minutes or discussion on teams im on its a solution for a nonexistent problem. the people who feel so strong about it were probably the ones “bikeshedding” in the first place
Most style discussions are to do with personal preference. Prettier is a preference, but it is a consistent one that is automated. Can you explain how you might think what it produces is more difficult to read than anyone elses? If anything it's a dramatic speed up because you don't have to get used to a style, you're already used to it because everyone uses it.
&gt;You'll find that half the time you get hung up because you're not sure how to style something. Nope, never really been hung up by formatting that much. Most hung-up is trying to think how to code something, rather than some formatting issue.
We just use Airbnb's eslint rules and didn't tweak it much. We checked couple different ones and Airbnb's was the most sane. Discussion over, everyone writes nicely formatted code. It works for Node, browser, React, FlowType. Eslint autoformats too if you want. What's the advantage of prettier? 
How about when you're coding in a new language? So you're saying you automatically know how to style your code in a new language?
Prettier ignore comments could confuse someone who is unfamiliar. Honestly I was trying to say automated formatting was a good thing but when asked to explain how I might think what it produces is more difficult to read than anyone elses code it that one point is kinda undeniable. Like if you already have good style the biggest difference when using prettier is going to be //prettier ignore bfore special formatted section like 2d array definitions.
I love Prettier with format-on-save. Now I type lines in the laziest, most horrible way possible and Prettier saves the day.
This is the decision I came to when working with a client's team as well. By prettifying everything at once we eliminated the formatting noise from PRs. Now subsequent PRs would only be driven by changes to code. I also found a solution to the "one big Prettier diff" problem by using git filter-branch, but the pain of rebasing in-flight work more than outweighed the benefits of retaining line annotations and cleaner histories.
I don't like it either, I disliked the halved indentations most particularly.
The benefit of going from a reasonably complete ESLint configuration to Prettier is going to be far smaller than going from no formatting rules at all to Prettier, so I'm not surprised you don't feel the huge benefit. In my case, I've been working with a client who's had a team of developers with no style guide, linting or formatting rules. So there was pretty much every possible style of formatting at play in the code base. Often in the same file, which was *super* distracting. Especially when another developer with a different rule set would go back in and change the formatting back another way. &gt;.&lt; When I merged in Prettier, we went from a dumpster fire of inconsistent code to a Brutalist complex of well organized code. Is it always the best looking code? No. But it's deterministic and that means that you know that every changed line will be changed only because of some code change, not because someone's changed spacing. It's a huge benefit for teams, IMHO. For a single developer? It's a matter of preference. I like it because I'm a neat freak when it comes to code. But that's just me. 
I guess this meets your criteria. I was looking through my stuff for something neat, but most of the big ones are pretty messy... If you'd like an example, this is how I'd like to organise most of my real projects, but this was just made for a GraphQL demo. https://github.com/3stacks/car-explorer Create React App for the boilerplate, express for the server. 
OOC what are the formatting options you'd want to see added?
It's like nails on a chalkboard when I see code that's formatted inconsistently. Like some lines with semicolons and some without will drive me crazy. Same with single vs double quotes.
What is the filter-branch solution you used?
Not perfectly, but never had that much issue figuring out formatting as it's usually fairly similar between languages. (Unless it's a language which entirely enforced formatting like Python, but it takes at most a couple minutes to get used to some of that.)
Hey there again ! Will look into this asap and adding multi device, multi version testing to the library. Thanks! 
is incredible how programmers always think their own code is tight and awesome but others code suck... this is the first symptom of the problem. Prettier comes to unified all the design conventions people got in their minds to produce one single pattern design, and yes some will love what it does to their code, some will hate, but in the end will give so much to the whole that in my mind it makes it worth. 
Yes same here. We do code reviews. All my collegues know how to write readable code
&gt; there's a pro-prettier movement, but not an anti-prettier movement (or a pro some-other-tool movement). That's because you don't need an "anti-prettier" movement. You can just not use it. What everyone uses on their project is their own business. If you don't want to use it on your project... don't use it.
&gt; Everyone loves what prettier does to their coworkers' syntax Always be careful when you try to speak for "everyone". 
Is it in high demand? How hard is the learning curve coming from JavaScript?
&gt; What does waste my time is reading a PR where someone reformatted the file with prettier, and now there's a ton of noise in the diff. And there you have your problem: Your team is not aligned. Either everyone uses the same formatting or you end up in discussions, possibly following rework. It's not just your time and nerves wasted, but also other peoples. Automating code style is a possible solution to that problem and is what prettier does. Of course if you go that route everything should be formatted with it first. In our case you won't even get green light from CI if your committed code doesn't match formatting.
It can be frustrating especially when converting an existing project cause stuff like ESLint aren't compatible (you gotta use TSLint) and sometimes types just inexplicably won't work, but for the most part, making interfaces and function input/output types is actually quite satisfying. I'd say it's definitely in high demand, but the company I'm at is using Flow, however, they are regretting it as the Typescript uptake is way higher than Flow.
Yes, but those two infinities _are_ of the same size.
Sorry, nope. I don't care how long files get, but I care how wide
&gt; That's why you can barely even configure it much. The funny thing is that we started with JSLint that was barely configurable for the same reason. People didn't like it and switched to JSHint and later ESLint, because they were more configurable.
Maybe it's maybelline
.. but it does, right? I use prettier on VS Code, and I can toggle it on and off from the bottom bar. Am I missing something here?
Another bypass but this time it works on Edge. 1 in᠎alert(1) The character between in and alert is 0x180e.
Before prettier I didn’t realize how much time I’ve been wasting thinking about formatting and arguing with Douglas Crackford (eslint). It’s like somebody was standing on my foot all this time, and now walking is a lot easier. I don’t mind that it is rewriting from AST, because the AST is the ground-truth anyway. Still my favorite language is clojure(script) which skips the syntax step entirely makes you program in terms of data structures directly. prettier gets JS one step closer to this, sort of. Text-input for programming languages is a convenience thing. There is no reason why a sufficiently advanced language shouldn’t shift towards more and more tool-assisted input and only treat the text files as storage format (this is already happening, since most code also contains comments as ground-truth for docs generation, eslint flags, etc.) If anything, prettier doesn’t go far enough. 
The idea of prettier is to avoid discussions like this. If code style is really that important for you then you need to re-evaluate your priorities. 'Prettier' is not really about pretty code style but consistent code style, removing the mental effort of (what I think is) an irrelevant choice so you can focus on what matters. In our 20 dev team we didn't all agree on code style, and while we tried not to waste time on it, we did have a few discussions around line-length, tab/spaces, single/double quote bla bla. Once we added prettier it all went away, it does something we all liked - automatically format code even if we didn't agree with every option. I can honestly say we've never had a discussion around code-style since. And you know why ? Because in the bigger picture it's IRRELEVANT. Also, you really have the option of not using it while developing and just have it at commit. You get to style like you want using w/e you when you get it in the repo that x other devs use it's consistent.
If people spend hours discussing formatting for their projects, then these people have to grow up
&gt; prettier doesn't have dominance. yet. Wait for it.
It seems to me like you've got a room full of people who have been in your situation, switched to prettier, and love how it affects their work. I say "work" rather than code, because I think that's what it is for. The fact that it changes your code is more like a side effect of doing something designed to decrease friction, decrease congnitive load, decrease time spent in pointless discussions. Considering everyone is here saying "honestly, it's a great thing to have in your workflow" should probably tell you something. I can think of literally about one example of when prettier might not be a good idea. If you're working on something where the exact layout of the code has some analogue in the domain. For example, unit tests for a chess game might be clearer if the data structures being used are formatted in a grid. For everything else, prettier is great. One of your other arguments against prettier is that it's your program design that really makes your code "pretty". You are right, but this is actually an argument *for* prettier, not against it.
having a longer file is very nice for git conflict resolution. It's a very good thing Prettier does it like that-it's still very readable and much more resilient for conflicts than longer lines.
 // prettier-ignore is a thing. It's great for things like matricies. &gt; How do you deal with teammates pressuring you to use prettier? You don't, this is frankly the strongest argument for prettier. If your team uses it, and you don't like it, just bite your gripes and start using it. Consistent code across an entire code base is FAR more valuable than adhering to whatever non-standard quirks you have.
It totally throws me off when reading the code and makes it 10x more difficult to comprehend and use. I'm glad for prettier, some of the stuff it does drives me nuts but I can get used to it, and it'd have to be only one code style to get used to. 
&gt; Everyone loves what prettier does to their coworkers' syntax The more Prettier deviates from well-established JS formatting, the less I like what it does to my coworkers' syntax. Prettier goes for two mutually conflicting goals: they want to both have their very specific opinion on how JS is formatted, and be a universal JS formatter. One of those has to go.
I don’t disagree, but rather than getting angry about it, why not just ignore them into irrelevance. People defend against angry groups. There’s nothing to fight agaif you are off doing something productive.
&gt; Or you could fork a standard ruleset, airBnb for example's, and overwrite rules. But how is that different from using prettier? One is a choice, the other is not a choice.
True, but unless you overwrite every rule, at least _some_ of them will have been decided by someone else. May as well go the whole hog
This one https://github.com/prettier/prettier/pull/3038
complaining about things you havent even used this.. is javascript development
If you are used to static typed languages(C#, Java) and know Javascript, it's a matter of a few hours. If not, i don't know. You need to learn quite a few concepts, then :)
Truth
The most important value of Pretiter is simple: Stop wasting time thinking about how code is formatted, regardless if it's yours or in a PR. Once you free yourself of that burden, you'll be more productive. Instead of spending time asking yourself what's the best way to make that array or function call look nice, leave it to the tool, for you have to think about more important stuff.
 [1]+[3]-[2] // 11
Oh, you have edited your comment &gt; Is your company’s programmers’ code only distinguishable by formatting style? As opposed to ... ? &gt; Or you could just read the code as it is and match the (by definition) behaviorally non-active formatting of the file you are in when you edit it. Sorry, what?
I believe gmail caches the images on their servers to avoid giving information on who's open an email when, so it wouldn't work
Yeah I have the exact same issue with prettier. It values line length above all else. I want a formatter that values consistency above all else. 
I'm using editorconfig-checker in combination with a linter like xo, I don't like tools which touches my code
Yeah, but its go. ^lol ^no ^generics
Last thing that made my neck hair rise was no spaces after commas in argument lists, not just that the spaces were missing, it was inconsistently missing. Dear God NO! 
It's an open question which is supposed to show "what you are really about". There is no right or wrong answer (well, if the coolest thing you have done is a tooltip then maybe _it is_ wrong for a senior position...) It's a chance to give them your sales pitch. The kind of question it's worth preparing in advance. And if you have nothing at all - do something cool in your spare time! Doesn't have to be big or complex. It can be just, for example, a simple HTML canvas visualisation using some publicly available data or something
Oh man, I hear ya, this is why I left consulting after a year. 
It’s Douglas Crockford and he created jslint, not eslint.
git add -p
[Editorconfig is your friend](http://editorconfig.org/)
I find myself just writing code asastreamofconsciousnesslikethis on one big line and then just Ctrl+Sing and continuing without missing a beat. It's taught me to just not care about formatting and to focus on content. There are some cases where it makes it harder to read but they are infrequent enough for me not to care and I like the fact that it completely removes argument and the need to make an effort to be compliant with style.
&gt; What will happen is that someday soon someone is going to fork it or build a completely new tool that allows for far more customization than Prettier, and then Prettier will go the way of jQuery. You mean like [this](https://github.com/arijs/prettier-miscellaneous) ? 76 stars in Github, looks like nobody gives a shit.
Yeah, negotiating a new contract right now actually.. For a permanent job, in a non-consultancy tech business. I can't stand consulting. I really stagnated as a developer in this position because you never get to quite build things the right way. It's spaghetti cowboy code everywhere, to a lesser or usually bigger degree. 
I know, but it doesn't change the fact that this should never have been an issue in the first place. It's amateur hour. 
Well it is a &gt; An opinionated code formatter 
Exactly the way I felt. All the colleagues I had there were coasters, like, they wanna come into their office and do the same shit every day, not learning anything new for years if they don't have to. I work remotely now and I'm constantly on something new, new technologies, new projects, colleagues that wanna grow as devs, no more legacy crap code. I grow more in a week than I did the whole year as a consultant. The most I learned then was in my free time anyway. So good luck dude, I hope you find a job that will give you what you need and that you can grow to become better every day. 
Signing a new contract today actually. Will work with Golang! Coming from old Java projects it's gonna be amazing. Likewise dude!
I mean I'm going to possibly offend you here, but the major reason prettier is amazing is to defend against coworkers with your sort of mentality. &gt; but also trusts me. The whole point of continuous integration and unit tests is because we don't and shouldn't trust anyone. We're human and we make mistakes. I tend to trust my coworkers a lot less. &gt; Yes, wrap that long line. But no, don't unwrap those short lines, I did that on purpose. Or I wanted an extra new line there. Or these variables are a matrix, don't reformat them, and don't make me add an ugly comment to turn you off. In the grand scheme of things, this literally doesn't matter. Prettier's slogan has never been "hey, we aim to please everyone!". It's mostly to save time in code review. The fact that you don't mention or factor this in, is illuminating. If you'd like to not use Prettier on your pet projects, go ahead. But to say "oh my teammates are pressuring me to use Prettier" reminds me of previous teammates who had the same sentiments. Guess what: We introduced Prettier, and immediately saw massive benefits in the amount of time not debating this stuff. Further than that, the standards established by Prettier are mostly well debated. Whenever someone comes along and wants to change things, 99% of the time there's a good reason not to do it. Again, the fact that you don't go "hey, why is this an established default", and instead go "hey I want to do it this way" is again telling.
Sweet! Go is high on my list of what languages I wanna try next, I'm even kinda jealous :p
You may try `document.querySelector('[class~="12-4-2018"]')`; But I would suggest you change your class name to make it easier.
&gt; Crackford For some reason that just made my day.
&gt; I hear that GraphQL works smoothly with MongoDBs it does. It's great that it gives your API typesafety where mongo lacks it so it's a great match.
What a problem ? Just stop using it. Find another job, or just stop programming for money if it was a vacancy requirement. 
I love not pressing tab anymore. Also love when I don’t press tab and it doesn’t format anything because then I know there is some parse error like await without Async. Those kind of things makes me love my colleagues code. Don’t get me wrong but try to work in a big company and you’ll see the benefits.
That’s exactly why you need prettier.
I don't know if Vue will be functionally the same behaviour as Angular (specifically services), but if it is, what will happen is that every import of it will be a new instance, and the data operations (e.g. modify/write) will only modify that instance but not reflected across the others.
There is also a prettier-standard plugin, so I don't think they're that different.
I care about that space in front of a curly brace *only because* it tells me they aren't using the tools that could save them from bigger mistakes.
AFAIK in Vue instances will be created not on import but when you put them to wrapper method named "components". When this wrapper component will be initilized, sub components will to. So in short - there will be multiple instances of you imported component.
It can be as clear as reading a reddit post, or as complicated and obtuse as the spaghetti code of any language. It's been a rapid evolution for JS for the past few years, but this has slowed lately as it's maturing well. How big do you want to get in terms of projects? JS can scale for anything from simple widgets up to full scale enterprise platforms. There's been demonstrations of Node scaling up to over 1 million concurrent requests in a highly optimised proof of concept, but even on an unoptimised project (e.g. no clustering/multi-processor support) with a low-end system, you can still run projects such as chat servers that can easily support 1000+ connections. With optimisations that aren't just proof of concept, getting 5000+ connections isn't a monumental task. So, to clarify, JS can scale, and it can scale well, but it depends upon the code and environment, just as with every other language. Speed of development depends entirely on the project. Having never developed in Python, I can't provide a comparison, but I've managed to build full single-page apps in less than a week on my own (albeit skipping much of the admin work, but on personal projects that doesn't concern me much).
Thanks i fixed it i used data-* and element.dataset
Last year I wrote a [binary file comparator](https://rodrigocfd.github.io/binary-file-diff/) using about 150 lines of JS. Repo [is here](https://github.com/rodrigocfd/binary-file-diff). It's modularized/OO and it barely relies on jQuery for presentation. I just looked at it now, and it still looks organized to me.
A leftover debug statement is a clear mistake, not a formatting preference. 
Well, in this case you ignore it and pretty soon it's enforced on you by someone in your team?
You could do that using an object. But the important question is: Why do you want to do that? What are you trying to do?
You don't really want to do that. What if you did it and the user inputted a variable name that you don't want the user to be able to change? Instead, what you're asking for seems to be much better served by having a structure with named properties. This is just an example, but what you'd do would be _something like_ this: let foods = { burger: 0, hotdog: 0, pizza: 0, fries: 0 }; Then you get the input, say... let name = prompt('introduce food'); And now you can do something like... foods[name] = 2; And not only that, you can first check to see if the `name` is one of the supported ones: if (foods[name] === undefined) { alert('Ops! I don't have ' + name); } In any case, I would suggest that you'll get better answers if instead of asking so specifically _how to do this particular thing_, you explained what you're trying to achieve.
To add to what others have said, the default behavior is that each import is a new instance. However, if you instead create a variable for the new Vue instance and export that, it’s possible to import the same instance everywhere. I don’t recommend this but it is possible.
Rather let tools / auto-formatters / linters do that for me, can then focus on the meaningful parts. If I'm solo on a project, or just doing a toy app / PoC - I use whatever settings I feel like. On a project - just conform to whatever the team norms are, and as long as the linting / formatting / etc is automated, and everyone is using the same rules / config - one less thing for me to worry about.
If you really wanted to, you could add the flag `--experimental-modules` (works since v8.7? of node) and rename the extension of every `*.js` file to `.mjs`. /u/AspiringGuru
I think the issue is that the drawing portion is unrealistically simple. If you're doing something more complicated the cache should start being faster.
In my experience, the fight to add prettier is then the last fight. 
another thing that is highly useful as a JavaScript developer is Redux. Do you have any Redux experience yet? If not, I highly recommend it as a MERN developer and even for JS devs in general. Redux pairs beautifully with React as well. IMHO, you definitely want to stick to fullstack JavaScript for now. JavaScript is an extremely powerful language if you know how to use it, especially now that it's being used on the backend more often. "Diversifying your resume" can be a good thing, but i'd much rather be an expert at a few things than a novice at many things. 
Think of prettier like a preset for eslint?
The name of the variable isn’t relevant, the only thing that needs to be dynamic is the value. There shouldn’t be any cases where variable name matters, in some cases you may want to use dynamic object property names to create lookup tables on the fly but that’s as far as it goes really.
Absolutely. Why does the team not have linting built in? Code shouldn't even hit a review phase it if doesn't pass a predetermined set of automatic checks, which should include linting.
I highly doubt it personally. It's possible, but although it's lack of configurability has some advantages, I feel like it's a feature most people want.
Personally I think python is less readable than JavaScript, assuming you are comparing identical code, because I don’t think significant white space is a great way to define code blocks. Just an opinion, but yeah any language can be used poorly and made to be overly complex 
Yeah I absolutely love to commit a fix for this thing and the precommit hook prettifies some other code in the same file that somebody else did. Makes my commit look like garbage. Prettier? No thanks. Eslint? Yes.
Let me be clear, I still want to it to respect the print-width. Have you every used knexjs for example? Say I am defining fields in a table, table.string('name').notnullable().unique() Defines column name, and this line will be split onto 3 lines. But I have a lot of columns. This more triples my file length. I agree if the width of the line is longer than print-width we should then wrap each function call in its own line. 
Exactly. I get all cagey thinking one dat ill be seeing "remove semicolons" in my code reviews.
You can disable prettier from formatting intentionally-arranged lines. The canonical example is a 2D matrix array, where you want it to look like its shape: [ [1, 2, 3], [4, 5, 6], [7, 8, 9], ] But honestly, that should be pretty rare... if you feel like you constantly need to set overrides, that suggests to me that you're spending too much brainpower worrying about how code is arranged on-screen. The sooner you realize that this stuff really doesn't matter, the sooner you'll be free to focus on the stuff that does, like figuring out the right abstractions. And yeah, I think the bigger point is that if you're working on a team that uses it, you need to use it, regardless of your personal sentiments. Otherwise, whenever a teammate works on code you wrote, their PR will be full of unrelated changes when it formats your code. Seems like a nightmare.
I personally set it to auto save and just write my code down, hit save, and suddenly it's beautiful!
I actually do not know. Let me find out. 
You can easily create a one time URL that redirects the first visitor to one place and all subsequent visitors to another. 
If you haven't been hung up, then you haven't been formatting consistently (or, well, maybe it's consistent to some internal ruleset, but I guarantee it's not as obvious to others working on the same code, and their code will be styled differently). Agree that formatting issues don't take up the bulk of my mental focus, but I was amazed when I switched to prettier how much effort I _was_ spending on it.
1) More config -&gt; more complicated Prettier code -&gt; more likely to have bugs, harder to maintain, slower releases. 2) Actually I think part of the point is to give JS a standard formatting style. Go has this with gofmt. I think Elm has one too (or, at least, it has an overwhelmingly popular style that everyone respects). It's a wonderful thing. What is the benefit for every organization having their own bespoke formatting? We can get creative with our abstractions and problem-solving, but we shouldn't be creative with our formatting. All it does is add friction when trying to understand someone else's code.
There are a lot of CS grads who get into web dev because they can get a job doing it. Web dev is not really well suited to fastidious people. Linters help enforce rigidity. It is psychological.
Give it a prefix. I.e "date-2018-04-12". And oh for the love of god (or equivalent) please use iso format.
Watch this, downvote city, ready? eval(variable + " = 2");
Computers are not perfect at floating point arithmetic, so these errors are always possible. Your best option is to use `toFixed` or `toPrecision`
Yes that's fair enough. I think my only complaints with prettier were 1. jsx/html multi line props (1 prop per line like how it handles functions and objects) which seemed to be fixed (or maybe I never was doing it correctly) 2. I like reduce to behave more like that as well, so I would like prettier to respect that spacing as I think it's easier to read (and more in line with a lot of the other rules already) Ex: const someObj = myArray.reduce( () =&gt; { // some code }, {} ) That doesn't stop me from using prettier though, I do love it and how well it works.
Sorry, you’re wrong. Your syntax is not better than Prettier, it’s just different. Prettiers choices are not better than yours. And different syntax styles on large teams is a disaster. And that’s why Prettier is popular. 
I guess the algorithm itself isn't serious, but it is a great example to explain callbacks and promises :)
Our frontend stack is using react (webpack) and after one year, our codebase becomes quite huge. My company is a startup, you know as startup we might change our flow quite often, it leads to a lot of code are not used anymore and we want to clean them as much as possible. After spending few weeks to research, I found several approaches to attack that problem, therefore, I wrote that blog What do you think about those approaches? What do you use to detect deadcode in your project?
Parameters there to pass a variable into a function. Without them, the only other way to do so would be global variables, which is rarely a good method. Try writing your own functions to get a good understanding. If you were to create a function to to do addition, how would you get the values to it? The whole point of functions are to be reusable, so assigning the values inside the function wouldn't have the desired effect.
One thing not mentioned though is that a promise will only fire once whilst a callback can be fired multiple times (making it useful for events, whilst promises not so).
I tried your code and it says "result is an object look in console" ? and it only plays it once? o:
it's usually incorrect for experienced JS/ruby/python devs to pick up one of the other two, as opposed to say, a functional language or a typed language. this can be reflected in low lateral movement in job markets between those languages. the paradigms are so similar that you're not adding much to your skillset. learn them if you have a project that calls for it, but just learning python for the sake of it as a JS dev is a worse use for your time than learning graphQL, react native, or a totally different language
Yes, but the whole point is passing something into a function. Sure, I should have used value and not variable.
As a function creator, you get to decide how you want to name your parameters. You write the code that goes in the function, where you can create and name new variables whatever you want, so it makes sense that you can name the parameters for the values that the function are called with. If you like cheese, you could write your functions like this: function myFunction (cheddar) { console.log(cheddar); // what was passed into the function } myFunction(4); // logs the number 4 The caller of the function only decides what goes into it. Above was the number 4. The caller doesn't necessarily know what names are being used. In fact, they don't have to. They only need to know what kind of data is expected to be passed in and in what order. Most of the time, you're probably calling your own functions. You write them, then you call them (like above). With callback functions, however, like those you pass into `addEventListener`, you may write the function, but you are not calling the function. You instead pass the function to someone/something else that is now responsible for calling it. When it calls the function, it will pass data in. It won't know what that data is named inside the function. That is still controlled by you. But it does know what it's supposed to pass in. This what, however, isn't defined by you. It's defined by them. In the case of `addEventListener` its an `Event` object. Luckily, you can know this thanks to the [addEventListener documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) (though there's more to the whole event system than just that call...). helloReddit.addEventListener("click", myFunction); // logs an Event object (named `cheese` inside myFunction) The arbitrary name is just a way for you, the function creator, to be able to access the function call input (argument) with an identifier - an identifier you get to name just like any other `var` or `function` name you create.
It could be built up resentment to a lot of software developer "movements" If you aren't doing the latest hip thing, then you're obviously a trash developer. We joke and deflect this with everything, EXCEPT anything to do with defensive programming. Everywhere you look everyone suggests you bubblewrap the fuck out of your code. Look, I haven't written code in Java since 2009 for a reason.
Learn Elixir. 
I think this is just people rallying to make others care more about code clarity. Prettier is heavy handed, but if you shoot for the moon, then maybe you can at least get more people to install eslint ;)
Maybe I'm misunderstanding the Java reference, but you realize this is a formatter for JavaScript, right?
Yes. This is a common pattern. People often think they want to inherit from promise for e.g. new NetworkRequest(url).then(process) when in fact they should just create a regular non-async then() function in their class that returns a vanilla promise. The promise might be created in the constructor, held as a property, and then returned in a non-async then(). Guess what, then() is still async because it returns a promise. This works! x = await new Promise(x =&gt; x(42))
I just paged through 39 pages with 50 individual color settings per page, for VS 2012 using the theme editor (that's 1950 settings). This uses an Extension for VS 2012 called 'Visual Studio 2012 Color Theme Editor' and vastly expands access to the colorization settings far beyond the standard Tools | Options. It was created by Microsoft and is version 2.3. I have not tried to locate this extension for any other version of VS yet but likely it is either there or incorporated into the newer versions. Happy coding!
Or you could use webpack 4 or rollup to do tree shaking and typescript to allow your editor to find references for you, any function without references is probably dead.
Interesting, I hadn't realized that was a convention! I'm definitely familiar with padding some _operators_, though not parens, and not all operators (or even all unary operators): * `1 + 1` seems clear * `!isEmpty()` but not `! isEmpty()` - the `!` unary operator seems to not get padding (by the style guides I'm used to) * `!(object instanceof SomeConstructor)` but not `! (object instanceof SomeConstructor)` - the latter is what you would expect if either `!` or parens must have spaces * `i++` but not `i ++` for another case where I'm unaccustomed to seeing padding on operators. I think you probably have a point around padding on `typeof` though, but the space-before-parens rule apparently hasn't made it to my radar yet.
Cool article. Tangent: I wish I could get on board with Fira Code's ligatures but I just can't get used to them.
Seems like a potential successor, but clearly it's not a Prettier-killer yet. Patience.
1. did you change the actual link to the audio file? 2. of course, there is, as you requested, an interval. So it doesn't instantly play again.
You should absolutely not do this. If you don't know what a variable name is going to be when you write your code, how are you going to access its contents in your code? But, hey, why not, let's hack our way there. It's JS &amp; reddit after all. There are actually two ways of doing this that are pretty straightforward. We can use eval (whose use is nearly always abuse), or we can abuse how the browser handles globals. First, eval: let value = 2 let input = prompt("What do you want to name the thing?") eval(`var ${input} = ${value}`) Now, if you're in a REPL (i.e. Chrome console), you can enter whatever you put in the prompt (e.g., 'burger'), and you get 2 out! Note that you can only access this variable either at a REPL where you know the name you entered and are in control, or through subsequent invocations of eval (let retrieved = eval(input) ). (Note: this will not work if you're using strict mode, but strict mode isn't that smart and you can get around it if you really want.) Or, you can abuse globals: let value = 2 let input = prompt("What do you want to name the thing?") window[input] = value This stores the value in a global variable with the name culled from input. Once again, you can access this only by addressing it as window[input] or at a REPL. This is a bad idea because it effectively gives your user access to the window object, which has lots of important moving parts attached to it. In short, it's possible. It's not wise, but it's also not smart: it does not appear to solve any problems, and only makes ones. Running eval on user input is an especially terrible idea, since it allows your user to break your code intentionally or not. But giving your user access to the window object is also a terrible idea. In short: because it's JavaScript, nearly all things are possible. You should not do this thing.
1, yes 2, well what do i change for it to play it every so often?
Agreed on all of those, those are consistent with Airbnb and Standard configs. You actually did pad an operator that is comparable to `typeof` in your example, `if`, at least the first time you used it. `for` is another similar one. It's subtle, but it totally makes a difference once you are used to being consistent about it (and/or your linter yells at you as you type). 
1. what kind of file is it. Check if you can play it with javascript. 2. this part: "1000* 60 * 10" is the duration of the interval. It's in milliseconds meaning 1000*60 makes it a minute and * 10 = 10 minutes. So the file starts to play every 10minutes until it has finished. Now do your calculations.
The function is not "pulling", it's being passed information. Image this simple scenario: function exampleA(myAwesomeParam) { alert(myAwesomeParam); } function exampleB(myOtherParam) { alert(myOtherParam); } exampleA('hello world'); exampleB('hello world'); This will alert 'hello world' twice. You can see that we can name our parameters whatever we'd like, and they will be equal to whatever value was passed into the function. This is exactly the same as what is happening with the `addEventListener` function, except you don't see the explicit `addEventListener(event)` call, because it's internal. But that's what is happening.
I'm the complete opposite now, hate fonts without them.
Thanks for the link to the video, it definitely shows a lot of quircks that I wasn't aware of in JavaScript. The theorems will take more time to consume, interesting nonetheless!
This isn’t unique to JavaScript, it’s a fundamental rule of binary computing.
Wasn't my choice to go down this road, this precision error got me by surprise in someone else's codebase which left me wondering. I agree precision is needed when dealing with such large numbers.
I believe using prettier is in a sense about *taking the high ground*. As a growing developer and one that wishes to be a valuable teammate, you have to understand that what you personally prefer often shouldn't matter. It is totally okay to have your own opinions and preferences, but to be productive in a team and to be helpful in a project you need to understand that consistency within that project is what matters the most. What if, for any reason, you preferred `superagent` to `axios`? When asked to add a feature to a project that uses `axios`, I'm sure you're not gonna install superagent just to express your individuality or your strong feelings about how it's "better" in some way. You're going to use what the project uses. If you feel strongly about the need to change a used technology, you would discuss it separately. Formatting code is kind of similar, but also not. One thing that's different is that there are just too many small things that people may disagree about. Far more than the project's dependency list :) And another thing is that these disagreements are not as important as the actual choice of technologies or the project's architecture, no matter how strongly you feel about them. What matters is code's readability, and most important factor for that is consistency. I believe that the core philosophy of `prettier` is that it really doesn't matter *how* the code is formatted as long as it's always the same. But of course the project wouldn't become popular if nobody liked the output, so it does a really good job of formatting the code the way the majority of people would like. And if sometimes you feel like you're not in the majority — **it is ok**! It happens to everyone. Value this tool for what it was initially designed for. And for those *rare* cases when you think that the code should be formatted in some unique way which would be beneficial for all readers of the code, but *prettier* disagrees with you — you're more than welcome to use [`prettier-ignore`](https://prettier.io/docs/en/ignore.html) comments!
If you need to have multiple newlines to group blocks of code, it might be a a sign of deeper problems.
How?
&gt; Oh, you have edited your comment Yes, to add more thoughts and clarify, rather than add multiple separate comments. &gt; True, but unless you overwrite every rule, at least some of them will have been decided by someone else. May as well go the whole hog The difference is between defaults and dictation. Default choices that can be changed at will, even bad ones, are better than (comparitively) no choices. &gt; As opposed to ... ? There are programming structures and techniques that are higher level than formatting style that one programmer might use that another might not. There is also the language used in naming variables: how verbose they are, or the amount of vocabulary the programmer can bring to bear. &gt; Sorry, what? Code style formatters operate on the TEXTUAL STYLE of the program, not its behavior. How much whitespace, whether you use semicolons, etc., these don’t affect the running behavior of your program in a way that can change the output. I am suggesting that the style of your project might be whatever is already written, and other programmers adapt to the style of the file in which they are editing. If you make a new file, you stule that however you do, and expect other programmers to read it that way and make modifications using that style. You do the same for others’ files. That is, no standardization on style, and focus your skills and energy on things that actually do stuff (program logic, fixing bugs).
You can handle the "persistence" using [Garlic.js](http://garlicjs.org/) and avoid the refresh using preventDefault ( [vanilla](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault) or (jQuery)[https://api.jquery.com/event.preventdefault/] ). After "preventing" the data to be sent using the Submit button you should send the data to server (for example using (serialize)[https://api.jquery.com/serialize/] + (Post)[https://api.jquery.com/jQuery.post/] )
Yes, but formatting is much more obvious - you open the file and bam!, you know who wrote it simply by looking at it a for a split second. Eventually you may find out anyway for the reasons you mention, but it's not as bad. Having to adapt to someone else's style is distracting and wastes time. House styles exist for a reason.
Even though I don't *always* like what it does to my code, it is nice to be able to just write ugly code and then `Ctrl+Shift+I` and have it automagically look decent. That is the biggest win for me. In a project, I define a `.prettierrc.yml` file and things look more toward what I would prefer, but being able to stop focusing on formatting and just focus on code is a life-saver when I want to get code written quickly. Also, paired with precommit hooks has caught even me (imagine that) attempting to commit poorly formatted code. As developers, our craft takes us down lots of rabbit-holes, and that's why we develop tools to keep ourselves in check. The human mind is scary-forgettful sometimes.
How long have you been using it?
Redux and React, like tea and honey, I can't do one without the other. I agree with you, I'd like to be an expert at one thing, I'm planning on learning more MERN related topics, React Native + GraphQL
So this basically means that not everyone is using prettier or you didn't run prettier for the whole project (just a single commit with only formatting then). We just use a precommit npm package and have hooks defined in package.json. That way everyone commits prettified code. After that, no more issues.
I don't know another high-level language like Python and that's a motivation to learn and understand one. I plan on doing this and I'm interested in learning of a good pathway to follow. I'll do research on the best way to approach this and build with Python soon. 
There is a space after function, there is no space after a function name. 
I think the article could spell out why you shouldn't do this, lest some junior bootcamper decides it's neat to actually use in production. - does not minify, at all. - get method internals are difficult to mock for testing. - a function declaration and call is much less performant than inlined code (browser-dependant) - browser support may be iffy. 
yes remembering...
The best way to decribe this is using the "black box" idiom. In pretty much any language, functions are "black boxes". You give them inputs, and they give an output (some languages will let you return multiple values from functions). So, imagine that want to create a function named `max` that returns the maximum of two numbers. We stub it out like so: `function max(...) {...}` Visually, this "box" might be represented like: [Pastebin: see "Figure 1"](https://pastebin.com/PH8tkVgN) Now, let's define our two parameters: `function max(a, b) {...}` Here, we are creating what are called "local bindings" to whatever is "passed in" to our function. This just creates names on "our side" of the boundaries of the box. That is why it does not matter what they are named: [Pastebin: see "Figure 2"](https://pastebin.com/PH8tkVgN) Passing parameters this way is treating parameters as being ordered tuples. There are other ways that are kind of cool. For example, Python lets you do named parameters: `def max(a, b):...` Later you can call it like: `max(a=1, b=2)`, and basically saying "this input goes to this parameter, and this other one goes here". In JavaScript you do that by only taking one parameter as an object: [Pastebin: see "Figure 3"](https://pastebin.com/PH8tkVgN)
You should uninstall it then. The document code renders in consolas for me :D
Welcome to the party.
``drawImage`` is one of the slowest operations in canvas. E.g. ``fillRect`` with width, height á 1 pixel should be faster than doing the same with ``drawImage``. Caching makes sense as soon as you have something complex or large. Also remember to use all 9 parameters of ``drawImage`` and optionally round it's values to avoid sub-pixel rendering.
Yes. Easiest way, since you didn't specify the form submission method, is to mimic a GET type form post with a query string. You probably meant a POST type form submit, which you can mimic with fetch. You just fetch to the URL of the form target, with the method POST, the body of "input1=value1&amp;input2=value2", which looks like a query string, and can be constructed either by hand or by serializing the form (I think). The one trick you got to do, though, is send it with this header 'Content-Type': 'application/x-www-form-urlencoded' Having just said all that, you normally don't try to mimic a form post if you are not actually submitting a form, you just pass the data in the body as JSON.
That's true, but I think it's kinda inevitable; it's a new tool for a large and much-older language, and so it's gonna take some time for them to work our all the kinks and find the ideal solution. Most of the changes, I believe, were fixes for awkward side-effects from the rules. I could be wrong, but I haven't seen much churn from version to version where something works totally differently.
I'm pretty sure it used to be the trailing comma that gave the hint, but in the recent version it simply respects how you pack or unpack: [Imgur](https://i.imgur.com/HvHrQvu.gifv) The same applies to blank lines.
Math.random() generates a random number between 0-1 (not including 1). By multiplying by 2 you now are saying pick a random number between 1 and 2 (the mod is pointless because you can never get the number 2 but the code was probably written not realizing 1 wasn't inclusive and so it was a protection from the random being 1 and thus creating the number 2. The math floor then turns that random number into 0 or 1 with math floor. then checks the result 0 is equal to false and 1 is equal to true. if its 1 it makes the "/" if it is 0 it makes "\". Finally it just prints out the slash and moves to the next column/row.
Running this fixed it: npm i next@latest react@latest react-dom@latest
Yeah I get that. I came into a project that was prettier enforced, they did run prettier on the complete codebase first and I had a precommit hook - Didn't matter, I had commits where prettier was updating code for someone else. This can be the result of a) one person commiting without prettier or b) prettier package was updated and the whole codebase not updated again. *@prettier:* Changing this one little thing? Let me completely reformat your code and make the commit diff look like something completely different than it was supposed to be. I could argue with you all day long, but in the end, it's **my personal opinion** that I don't like tools that change my or other's code automatically. 
var s = (Math.floor((Math.random()*2)%2)) ? "╱" : "╲"; Is a ternary operator (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator), and since javascript uses Truthy/Falsy (https://developer.mozilla.org/en-US/docs/Glossary/Truthy) it's checking to see if there is any remainder leftover from the math calculation, if (Math.floor((Math.random()*2)%2)) is truthy, then it writes out / else it writes out \ Hope that makes sense
yep exactly, just listen to the submit event in your javascript file by adding an Event-listener to your form html &lt;form id=“someForm”&gt; some content... &lt;button type=“submit”&gt;Submit&lt;/button&gt; &lt;/form&gt; js document.getElementById(‘someForm’).addEventsListener(‘submit’, (event)=&gt;{ event, preventDefault(); // add your logic here }) this should do the job (but just typed that from my phone so you might wanna double check that the syntax is fine) you can also check out this question on stackoverflow: [link](https://stackoverflow.com/questions/7410063/how-can-i-listen-to-the-form-submit-event-in-javascript) 
I see a heart in chrome dev tools but nothing on the page.
Does his code have less bugs than yours?
Ok why is this a thing, does the developer have nothing better to do?
The only thing I can see that some people might find inconsistent is the space between `foo (i)` given `function()`. Maybe? Otherwise, I'm not sure.
Really? How would you separate say, 20 small functions into 3 conceptual groups? You sound inexperienced.
Java has a lot of protections built into it by default that suck to program with.
I would suggest having it as simple lookup object as: const where = function (property, symbol, value) { return { '&gt;': function(property, value) { // TODO: with property and value }, '&lt;': function(property, value) { // TODO: with property and value }, '=': function(property, value) { // TODO: with property and value } }[symbol](property, value); } If you have more conditions propping up, just add a name, value to the existing object literal... as 'switch' involves additional case and break statements that are redundant. 
True, I just assumed it was included as a webfont but yeah I do have it installed
Maybe use helper functions like: const largerThan = function(value) { return testValue =&gt; testValue &gt; value; } const lessThan = function(value) { return testValue =&gt; testValue &lt; value; } const equals = function(value) { return testValue =&gt; testValue === value; } const like = function(value) { ... } { where: function(property, testFunc) { return this.filter(x =&gt; testFunc(x[property])); } } .. and then just: .where('age', largerThan(40))
Perhaps you could build a compiler and support `where('age &gt; 40')`? https://www.youtube.com/watch?v=Tar4WgAfMr4 Alternatively, there are countless open source ORMs which have implemented similar functionality. Perhaps check how they do it? Eg: https://github.com/rails/rails/tree/master/activerecord
You sound like the kind of person that's really nice to work with.
🤣
🤣 well I learned about the new static deriveStateFromProps with this :P
Move each group into a file named after the concept they handle? And calling me inexperienced was uncalled for, and is just a sign of insecurity from your end.
Hi! Thanks for the message, you’re gonna be disappointed because yes...that’s it :) 
Odd, Prettier does not add the space for me, so I think it's actually something that would be fixed by Prettier.
Had issues with code formatting.Have a look at : https://jsfiddle.net/whr37y8f/5/
Valid point. My hope is that those who understand it know how *not* to use it. Maybe I'll add a little disclaimer or something. Thanks for checking it out!
Hey thanks for the input! I'm looking more to trigger the browser auto complete storage than I am to store the input of the form if that makes sense. This seems to only trigger on form submission, and if prevent default is used it stops this storage from happening.
In Javascript, parameters and arguments are matched by **position**. So the first parameter will get the value from the first argument, the second parameter will get the value from the second argument, etc. The only thing that matters is the position; the names of the parameter and argument are ignored.
It doesn't add it in the stable builds *yet*. But they're currently bikeshedding on adding the space.
cool.. abstracting out as helper functions is recommended. Makes debugging much easier.
So javascript is has some really, really powerful functional features. Why not use those features? I'm thinking you would be much better off passing a callback to `where`. This would be far more easy to implement, something like this: class Filter { constructor(collection) { this.collection = collection; } where(predicate) { return this.collection.filter(predicate); } } But now the name 'where' doesn't really make sense, because you're just calling `Array.prototype.filter`. Let's go deeper! Here, we pass a comparator function to there `where` method, passing in static functions defined on the `Filter` class: class Filter { constructor(collection) { this.collection = collection; } static greaterThan(threshold, orEqualTo = false) { return (input) =&gt; orEqualTo ? input &gt;= threshold : input &gt; threshold; } static equalTo(compare) { return (input) =&gt; input === compare; } where(prop, predicate) { return this.collection.filter(item =&gt; predicate(item[prop])); } } Well, how would you use this? Something like this: class Person { constructor(age, firstName, lastName) { this.age = age; this.firstName = firstName; this.lastName = lastName; } } const myPersons = [ new Person(15, 'Alice', 'Cage'), new Person(21, 'Bob', 'Johnson'), new Person(32, 'Johnny', 'Appleseed'), ]; const myFilter = new Filter(myPersons); console.log(myFilter.where('age', Filter.greaterThan(20))); // logs: [ Person { age: 21, firstName: 'Bob', lastName: 'Johnson' }, // Person { age: 32, firstName: 'Johnny', lastName: 'Appleseed' } ] And finally, we really want to be able to chain our filtered predicates. What if the `where` method returns another `Filter` instance? No problem! class Filter { /** implementation details ... */ where(prop, predicate) { const filtered = this.collection.filter(item =&gt; predicate(item[prop])); if (!filtered.length) { throw new RangeError(`No more items in collection! :(`); } return new Filter(filtered); } // finally, let's be able access our initial array toArray() { return this.collection; } } Now you can chain your method calls along like so: const myResult = myFilter .where('age', Filter.greaterThan(20)) .where('firstName', Filter.equalTo('Johnny')) .toArray(); console.log(myResult.map(person =&gt; `${person.firstName} ${person.lastName}`)); // -&gt; Logs [ 'Johnny Appleseed' ] This has been fun. As a bonus, I've written this all in typescript. You can find the gist here: https://gist.github.com/WouterSpaak/9a9eed375ead33688e688c0ddce0db8d
As mentioned on every other comment, you shouldn't (want to) do this, but if you actually want a global variable, you can assign to window[inputValue] (browsers) or global[inputValue] (nodejs).
I meant dominance among true (AST) code formatters; I think of ESLint as a validator with some formatting capability.
it is still a weird area though, unlike other reserved keywords, attempting to change the value of undefined does not throw any error. compare that to what happens if you try to reassign null: null = true // throws a ReferenceError
It's not correct, And I'd recommend all of you to watch Douglas Crockford lecturing about numbers in javascript: https://youtu.be/lVzS-2n3yrI?t=34m19s
You're doing this: for (var i = 0; i &lt; noOfGames; i++){ recentGamesData.averages.kills += ((recentGamesData.matchData[i].kills) / noOfGames) ... ... ... } ...where I think you want to be doing this for (var i = 0; i &lt; noOfGames; i++){ recentGamesData.averages.kills += recentGamesData.matchData[i].kills ... ... ... } recentGamesData.averages.kills = (recentGamesData.averages.kills/noOfGames).toFixed(2); That'll cut down i-1 divisions per property. If you can guarantee that the properties in matchData and the properties in averages will have the same name you could use reflection to match each piece of data up instead of that explicit load statement. I don't have time to test this at the moment, so if it doesn't work (it probably won't) just drop me a reply and I'll fix it when I'm out of the office. var Reflector = function(obj) { //Create an object called Reflector that takes an object in its constructor this.getProperties = function() { // Create a get properties method on our Reflector var properties = []; // Create an array to hold our property names for (var prop in obj) { //Loops through all the properties in the object if (typeof obj[prop] != 'function') { //Throw it out if it's a method, we don't want those properties.push(prop); //Push the property onto the end of the array } } return properties; //Return the array of property names as strings }; } var reflector = new Reflector(YourSourceObject); //Create a new reflector and pass in the object we want to pull data off of var properties = reflector.getProperties(); //Get the property names as an array for(x=0;x&lt;properties.length;x++){ recentGamesData.averages[x] = (recentGamesData.matchData[x]); // passing a string into those square brackets at the end of an object evaluates as the property of that object that matches the string. } Hope this helps!!
Actually, if you create a form correctly, name your inputs and catch the `submit` event on the form, the browser should still treat this as a submitted form even when you're invoking `.preventDefault()` method on the submit event. Chrome actually also expects a redirect to happen (it's ok if it's done on the client-side).
That makes sense (the drawings are a bit more complex, this was just a test). But what's even more confusing is that Mac's and iOS systems in general perform better with caching. 
The part about browser only refreshing at 60 fps max isn't true. In Chrome on Windows, it will at least go as high as 144 fps if you have a monitor that supports it. Just be wary of it and calculate frame time with delta time :)
Holy shit you're a genius, thank you so much! :D
I managed to find a solution, but I'll definitely do your first bit to reduce the amount of code :D
Add 'return false;' after ajax call for no refresh. Not understanding autocomplete question, to disable with autocomplete="off" on input fields.
I'm curious how `this.filter` is working in your code sample. Are you adding `where` to `Array.prototype` or is filter a custom function? If you don't mind pulling in a dependency, lodash's filter function is pretty nice: https://lodash.com/docs/4.17.5#filter
Yeah it was something very close to that! I seem to have misplaced the commands I came up with but it's very close to that. I think there were some optimizations I tried with looking for only the changed files, similar to the ones mentioned in the article.
"bob,bobby, robert,bobert" *screams into a pillow*
Glad I could be of some help!
Maybe &lt;form autocomplete="off"&gt; ?
I like the Line element ;)
&gt;But no, don't unwrap those short lines, I did that on purpose. &gt;How do you deal with teammates Those two lines don't really seem to go together. If you want to write your own code that in 5 years time you don't care if you will understand it, then yeah prettier is annoying. If you want to write code you or someone else can pick up and work with - prettier, eslint -- fix, standard or other such are pretty much a godsend.
Eheh :) Well it’s just a silly thing really :)
Wow...cool idea using Reflector. Never tried to leverage it my life despite knowing about it.
Welcome neeyol. Happy to help!!!
Yup recently read about it. It even prevents us from eval and with. ✌
If code is compact but complex I highly doubt formatting will make it much better. Then there are much better ways to state your intentions (naming, jsdoc, etc.). And if you use your own preferred formatting you'll be formatting it the way it would make most sense to you, but your coworkers might disagree. Honestly, using peer review to enforce something like formatting or coding guidelines is a huge waste of time. I don't want my coworkers to have to check if something adheres to coding guidelines. I respect their time. This should be done automatically. Setting all kinds of eslint configuration options has nothing to do with prettier. Like someone said, if you have enough configuration options, someone is going to hang themselves with them. The fact that the tooling was configured improperly shouldn't be a reason not to use prettier. It's rather ironic that you mention coding style etc. being social issues but complain about the lead dev going overboard with the tooling. Why wouldn't that be a social issue in your case? You could just talk to the lead dev and figure out a way to fix it. Your problem wasn't with the tooling but with the way it was used. Yes, my coworkers are imperfect. So am I. It has nothing to do with trust (that said, I wouldn't even trust myself with something that tooling can easily do for me). People forget things and make mistakes. And when I'm working, the last thing I want to do is have to think about formatting. If the code is 'unreadable' after prettier formats it then it's most likely my own fault. Why would you put an unnecessary burden on the developer when there's absolutely no need for it. If the code ends up perfectly readable (which means something different for everyone) in 99.99% of the cases AND is always consistent when using tooling, why wouldn't you use it. Let's say we treat the code style as a social issue and not use tooling to fix it (linters are tooling as well). This is what I've always seen happen: - Lots of discussions about all kinds of code style with most of it being personal preference, having nothing to do with actual readability - There are always a few people who care way too much about it - Someone has to force a decision and some people won't like it at all (and might cause friction with the decision maker or other team members) - When writing code you are working on a business problem (I hope) so you end up with style issues regularly because you were focusing on more important things - Someone creates a PR and a coworker not only has to check if the code works like it should, but also if it adheres to the guidelines - The PR often contains diffs that contain both code changes AND formatting differences - A coworker finds a problem with the code style and mentions it - Often added discussions follow (the "You think THAT's readable? This is much better" kind of thing) - Someone has to fix it - The coworker has to do another review ... Now what's the business value? Or what's the value to the team? Did you solve any social issue? You end up with too much time spent on discussions. Peer reviews take longer than they should and only tend to frustrate coworkers. You have to worry about formatting when the business problem you're trying to solve should be way more important. It doesn't make the team any happier than when using an automatic formatter. Most likely they'll be less happy. When using tooling: - No more endless discussions about formatting - Even if someone doesn't agree with all the formatting, the tool gets blamed, causing no friction amongst team members. They accept it and move on - PR's hardly contain any formatting differences anymore, meaning time can be spent on reviewing the actual business solutions - People can write code any way they want, it gets formatted on precommit or on save, whatever you like. You can even format the file the way you like before working on it, it will get fixed anyway - The business ends up with code formatting that's consistent, no matter who works on it - Enhances the communication between team members because of the consistency. Focus is on the meaning of the code, not the style In my experience, prettier doesn't make anything unreadable. People do. Would I format everything like prettier does, no. But that would be personal preference. It would add absolutely no value by doing it differently. Making code style a social issue feels like making the fashion sense of team members a social issue. If the general consensus is that something is really terrible, then you probably want to do something about it. Otherwise, not even worth discussing. 
It's probably not the best solution, since if OP's object starts coming back with extra properties that he's not expecting those will be brought in too. Might cause some problems if this object gets shoved into a DB or passed to a backend somewhere. The solution you proposed is probably better for that reason. Reflection is my go-to solution for things like this as I've been writing data integration code in C#/.NET for the past few years where reflection has been insanely useful. 
And I don’t mind house styles. I do mind the “our way of the highway” development philosophy of Prettier.
Would this be a bad idea to use for a testing framework in Node or for database calls? Seems like it might be a good idea to make writing tests/making ORMs easier.
Neat! 
yes. the example code seems to be pretty old, or at least the explanation around it. but that's Javascript life. for inexperienced developers it's hard to figure out if it's really a problem, still a problem or even regular Javascript. since I now understand much more Javascript than my past self I really wonder how much hidden errors I made in my past that I never discovered or that even got "fixed" by another hidden error I happened to do in the same line of code. :D I think this happened much more often than I may think.
The pages doesn't load for me. Server down?
This may not be ideal(hackish from the olden days), but for backward compatibility you can do this without javascript: &lt;form target="hidden_iframe_name"&gt; &lt;iframe name="hidden_iframe_name" style="display:none"&gt; 
Good find.
Thanks for the info. I'm thinking about this mostly from a beginner perspective so their editor can quickly identify for them the differences between what words belong to what. I agree that the saturation is likely messy, but I still want to see for myself (and edit from there potentially).
Thank you ! I Will take a look at it. 
Which one would be my best bet to start with ? 
Here's a bit of cultural background, since someone else has very clearly explained the code in itself: This is a new implementation of one liner from the 80s, in Commodore 64 Basic. There's a free book that uses that one liner as a starting point to discuss about creative computing: https://10print.org/
I think you should go with: - [Eloquent JavaScript ](http://eloquentjavascript.net) - [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS) book series
Which one in the series do I start with. Or does it say ? Sorry
"Up &amp; Going" "Scope &amp; Closures" "this &amp; Object Prototypes" "Types &amp; Grammar" "Async &amp; Performance" "ES6 &amp; Beyond", Published: Buy Now
Min might be what you're looking for.
https://minbrowser.github.io/min/
So, axios isn't nearly as flexible as apicase :) 
https://maximdenisov.gitbooks.io/you-don-t-know-js/content/ You don't even have to wait. Enjoy. 
I try not to be a conspiracy theorists... but the only 3 comments \(prior to this one\) are by users who: 1 aren't very active 2 have low karma 3 all around the same time 4 thank OP 
I think the important part you're slipping up on is "the result" meaning _the result after the add operation_ rather than the return value from valueOf. Basically, you have two ways to get primitives to perform primitive operations on arbitrary values (particularly objects), the `valueOf` function and the `toString()` function. `valueOf` is a little arbitrary and can mean anything is returned. For objects, this is the object itself by default. `toString` specifically returns - or is meant to - a string value. This can match `valueOf`, for example, with strings, but doesn't have to. The increment/decrement operators work on primitive values, in particular numbers. When presented with an arbitrary object value that is attached to one of these operators, and the primitive representation is needed to perform the increment/decrement operation, `valueOf` and - potentially - `toString` is used. `valueOf` is used first, and no matter what the value is that's returned, the +/- operation is used and a result is determined. If _this_ result is NaN, that's when `toString` is used as a fallback. It doesn't have to be that `valueOf` returns NaN, though that could happen as well. As far as the need for `toString` goes, it's the result of `valueOf()++/--` that matters. If that's NaN, then use `toString` and try again using the same thing you did with `valueOf`, but just with the value obtained from `toString`. As for "the other rules", I'm not entirely sure what that means given what you've included there, but I'm assuming that just means the increment and/or decrement operation itself? That being: get value, convert to number, add/subtract 1 to/from that value, obtain result. At that point you know if you have NaN or not. To make things more clear, lets create an object that demonstrates this behavior... var addToMe = { valueOf: function () { var value = 1; console.log('VALUEOF'); console.log('result = ' + (Number(value) + 1)); return value; }, toString: function () { var string = "2"; console.log('TOSTRING'); console.log('result = ' + (Number(string) + 1)); return string; } }; console.log(++addToMe); //-&gt; VALUEOF //-&gt; result = 2 //-&gt; 2 Since the `valueOf` here returns a number - or anything that works with a `+` that doesn't result in `NaN`, that value is used as a result. But, if you go through and change `var value = 1` to `var value = {}` and run again... var addToMe = { valueOf: function () { var value = {}; // ... console.log(++addToMe); //-&gt; VALUEOF //-&gt; result = NaN //-&gt; TOSTRING //-&gt; result = 3 //-&gt; 3 You can see this time that `toString` gets called because the value from `valueOf` didn't cut it, resulting in (not returning) NaN. Even though `toString` returns a string, that value gets converted to a number which for "2" becomes `2` which when added to 1 becomes 3, the final result. If `toString`'s version of a number was NaN, then NaN would be the final result (or you could also get an error if toString didn't return a primitive).
So, JS has the concept of "truthy" and "falsy" values. Essentially, in situations where a boolean state is needed, all other values and types can be coerced into a boolean. Falsy values include: * false * 0 * "" (Empty String) * `null` * `NaN` * `undefined` Everything else is a truthy value.
Wow! Thanks for sharing! 
It's perfectly fine to be. I'm not a karma whore though, my reddit age and karma are a living proof of that. :) Rock on \m/
No need to argue. I was just saying that if the commit diff is way off then it's a project/configuration issue, not something to blame on prettier. Like not everyone having the precommit hook. We had that problem as well. After that was fixed, no issues at all. Personal opinion is another matter. I prefer not having to think about formatting at all, but to each their own. 
L-Systems. Did these things on a TRS-80 when I was 13 or 14. I originally did it by recursion and later by string iteration. F-&gt;F+F--F+F for Koch Snowflake.
Just put the two pieces of code together function getDifference() { let sum1 = 0; $('.chkclass:checked').each(function() { sum1 += parseFloat($(this).closest('tr').find('.value').text()); }); let sum2 = 0; $('.chkclass2:checked').each(function() { sum2 += parseFloat($(this).closest('tr').find('.value2').text()); }); console.log('diff: ' + (sum2 - sum1)) } 
I am sorry but this sounds to me quite banal. Yes any tool used badly is bad. And when used good is good. That's not the point. The point is (1) can you justify the investment and effort in looking after eslint as compared to prettier? (2) can eslint do everything prettier do? The answer is "no" in both cases.
You accuse me of having "deeper problems" and then play the butthurt card? Sorry, but no.
The code on the site. import React from 'react'; import ReactDOM from 'react-dom'; class Line extends React.Component { state = { ticker: 0, count: 0 } static getDerivedStateFromProps = (nextProps, prevState) =&gt; { const getNextState = (nextProps, prevState) =&gt; { let count = nextProps.loop ? prevState.direction === 'down' ? prevState.count - 1 : prevState.count + 1 : Math.min(nextProps.maxCount, prevState.count + 1) let direction = prevState.count === nextProps.maxCount - 1 ? 'down' : prevState.count === 1 ? 'up' : prevState.direction return { ticker: nextProps.tick, count, direction } } return nextProps.tick === prevState.ticker + nextProps.speed ? getNextState(nextProps, prevState) : null } shouldComponentUpdate = (_, nextState) =&gt; nextState.count !== this.state.count render() { return ( &lt;React.Fragment&gt; {this.props.children(this.state.count + 1)} &lt;/React.Fragment&gt; ) } } const drawing = { fig1: ' 🔴', fig2: ' ・', data: [ [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ] } class MoveIt extends React.Component { state = { tick: 0 } componentDidUpdate(prevProps, prevState, snapshot) { window.requestAnimationFrame(() =&gt; { this.setState(_prevState =&gt; ({tick: _prevState.tick + 1})) }) } componentDidMount() { this.setState({tick: 0}) } render = () =&gt; ( &lt;React.Fragment&gt; &lt;Line tick={this.state.tick} speed={2} maxCount={20} loop={true}&gt; {count =&gt; ( &lt;React.Fragment&gt; {[...Array(count - 1)].map((_, r) =&gt; { return ( &lt;React.Fragment key={r}&gt; {`${[...Array(count - 1)] .map((_, c) =&gt; { return drawing.data[r][c] === 1 ? drawing.fig1 : drawing.fig2 }) .join('')}`} &lt;/React.Fragment&gt; ) })} &lt;/React.Fragment&gt; )} &lt;/Line&gt; &lt;i /&gt; &lt;/React.Fragment&gt; ) } ReactDOM.render( &lt;React.Fragment&gt; &lt;MoveIt /&gt; &lt;/React.Fragment&gt;, document.getElementById('core') ); 
Nope. The problem with the "current style of a project" is it's much more open to alteration and interpretation. 2 spaces vs 4? (and by the way, using something like airbnb-eslint doesn't help you get around this either). Single vs double? And about 100 more things, some of them incredibly vague to about 90% of people. When you use something like Prettier, you basically say "Not only is this our style, but by using this, we are insulating ourselves from possible updates". The same semantics are not in place when you use eslint. The reason this is, is not only are you encouraged to add rules, but the default rules you're using in eslint are almost never great (or evolved) so it makes it certain people will keep trying to poke and prod at those rules. Again with Prettier, you get something you really aren't supposed to change, that will evolve on it's own, without your interference.
Similar to what other people are saying: you could pull those functions out into their own module or whatever, then pass them in: where: function (property, predicate, value) { value = value.toLowerCase(); return predicate(this, property, value); }, .. And then: // predicates.js function gt(o, p, v) { return o.filter(x =&gt; x[property] &gt; value); } function eq(o, p, v) { return o.filter(x =&gt; x[property] === value); } function like(o, p, v) { if (~value.indexOf('%')) { return this.filter(x =&gt; ~(x[property].toLowerCase().indexOf(value.replace(/\%+/g, '')))); } return this.filter(x =&gt; x[property] === value); } Which can be used like: const { gt, lt, like } = require('predicates.js'); myThing.where('age', gt, 40); If we want to get fancy and allow special symbols like "=", "&gt;", we do have to use a switch statement, but we can treat them as special cases: where: function (property, predicate, value) { value = value.toLowerCase(); switch (predicate) { case '&gt;': return gt(this, property, value); case '=': return eq(this, property, value); default: return predicate(this, property, value); } }
Thanks! It's on github and on glitch.com too :) https://github.com/albinotonnina/apps-are-real-people glitch.com/edit/#!/apps-are-real-people
Just keep the sums around in some commonly accessible scope (you can merge the load handlers for this) and update a difference when either are updated. $(window).load(function(){ var sum = 0; var sum2 = 0; $('.chkclass').click(function() { sum = 0; $('.chkclass:checked').each(function() { console.log(parseFloat($(this).closest('tr').find('.value').text())) sum += parseFloat($(this).closest('tr').find('.value').text()); }); $('#sum').html('&lt;b&gt;'+sum); updateDiff(sum, sum2); }); $('.chkclass2').click(function() { sum2 = 0; $('.chkclass2:checked').each(function() { sum2 += parseFloat($(this).closest('tr').find('.value2').text()); }); $('#sum2').html('&lt;b&gt;'+sum2); updateDiff(sum, sum2); }); }); function updateDiff(sum, sum2) { var diff = Math.abs(sum - sum2); $('#diff').html('&lt;b&gt;'+diff); }
Project is finished, I've attached a [LINK] (https://www.reddit.com/r/raspberry_pi/comments/8b35mz/digital_refrigerator_conversion_is_done/) to look at the post. Thank you again if the first one didn't work- https://www.reddit.com/r/raspberry_pi/comments/8b35mz/digital_refrigerator_conversion_is_done/
Nope, I have folders of them. I keep telling myself I might be smart/skilled enough to want to learn this some day. 
Thanks dude! Helped a lot 💙
Was it [dwitter.net](https://dwitter.net)?
Hi I am a human man and I love the book. Thank for make.
Yeah, person preference to read a book instead of a screen... but now that you said that... I almost checked out of amazon for $40 but I might just read them for free ! LOL 
Everyone’s been using this. Nothing new.
With only little experience with this stuff I would just use python with bottle. It's ideal for stuff like this. Especially keeping in mind: &gt; KEEP IT SIMPLE! &gt; Try to ship as few bugs as possible. &gt; Focus on a minimal usable interface. Functionality takes priority over design. Setting up a database with schema for saving a single value? Just save it to a file. Make views? Just write one html + inline javascript site. This should be maybe 90% of the required backend. from bottle import route, run, template import os SAVEFILE="selected_token.txt" @route('/') def index(): if os.path.isfile(SAVEFILE): with open(SAVEFILE, "r") as f: selected_token_number = f.read().rstrip() else: selected_token_number = None return template('This is &lt;b&gt;some&lt;/b&gt; html with embedded javascript &lt;script&gt;alert(\"hello\")&lt;/script&gt;&lt;br&gt;Selected token: {{selected_token_number}}', selected_token_number=selected_token_number) @route('/save/&lt;selected_token_number&gt;') def index(selected_token_number): with open(SAVEFILE, "w") as f: f.write(selected_token_number) return template('&lt;b&gt;You selected token {{selected_token_number}}&lt;/b&gt;!', selected_token_number=selected_token_number) run(host='localhost', port=8080) Just add some functionality to read the text from a txt file and add the client side javascript. I'm not really sure what OP expects... Going like this quickly and effectively fulfills the requirements but do you really want a front end developer who develops this way?
man thats really some next-lvl stuff. I reckon that's what occurs when using yahoo as my bookmark lol
I don't love any 'extra' frameworks / tools....that don't result in me making an extra $. I'm not a coder, could care less about how dirty about my code is, as long it' maintainable and the customers love the product
Just reply with "stop bikeshedding" and all will be good /s
RemindMe! 1 Month
I will be messaging you on [**2018-05-10 02:26:31 UTC**](http://www.wolframalpha.com/input/?i=2018-05-10 02:26:31 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/8b18y2/frontend_developer_handbook_2018_a_free_original/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/8b18y2/frontend_developer_handbook_2018_a_free_original/]%0A%0ARemindMe! 1 Month) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
hmmm, you've definitely got my attention. Give me 3 minutes to deliberate about it ...
I've started using A Smarter Way To Learn JavaScript and it seems pretty solid. Very basic, in a good way. I guess time will tell.
Either way I think this actually a cool bit of code. I don’t really see a major application for it but it’s cool!
No offence, but I'm a bit over the whole "new in JavaScript" for features that were released 3 years ago (ES2015)
&gt; the power of an entire Operating System Ummm
I've never really need ebooks like this for web dev. A lot of stuff I've done kinda becomes like muscle memory, if that makes any sense.
``` // Perhaps something like the following for each attribute const averageKills = games.map(({ kills }) =&gt; kills).reduce((prev, curr) =&gt; prev + curr, 0) / games.length ```
Because "function" is not the function's name, it's a keyword, you have a space after it. This is how it's been written for ages in JS.
^The linked tweet was tweeted by [@bower](https://twitter.com/bower) on Mar 28, 2018 19:22:25 UTC (2 Retweets | 30 Favorites) ------------------------------------------------- Bower takes backward compatibility very seriously. 5 years after the first release of 1.x version, the newest one still works on node 0.10 even it's used by very few😌 Now, we're going to release 2.x that just drops support for legacy node versions for easier maintenance of Bower ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
Only noticed it when `yarn global upgrade` upgraded Bower to 1.8.4. The 'Bower is deprecated. Go away!' message when installing is gone too it seems.
The examples look very nice. Being a Mithril user, which takes a relatively simple approach to the vdom with lifecycle hooks to access the dom directly when needed for performance, I must say I find it a bit amusing to see a React library arrive at where we've always been. React's attempt to wire up state &amp; props perfectly to render the VDOM they affect just seems too much trouble to manage (the new context API being the latest attempt.) In the end it looks like it just doesn't pay off after all.
Create a killer GitHub profile, with at least one full stack application, and also a bunch of smaller standalone libraries. Your own work, fully documented and each with unit tests. Good startups are finally starting to realize how valuable a GH profile is to the hiring process. When I interview candidates, it's one of the first questions I ask.
Only a bot would use the blue heart emoji. Human hearts are red. Sometimes purple. Never blue.
Oh shit, wrong heart.
Ummm
Ummm
🤖 
Shit!
"slideIndex" is a counter that gets incremented by 1 every 2 seconds. When slideIndex is greater than the number of slides, it's reset to 1. All slides are set to "display:none", except for the slides[slideIndex], which is set to "display:block".
Does anyone remember [Desktop.com](https://en.wikipedia.org/wiki/Desktop.com) from the late 90s? It ran in IE 4. Fizzygum reminds me of that.
Wow could you show us several examples? I understand that you have no right to show us exact code, but well, change variables etc to make it look different? Very interested.