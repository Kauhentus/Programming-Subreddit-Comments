That's just a regular pub/sub implementation, though, right? jQuery custom events do just that.
Backbone's is a pub/sub, yes. Flight shows events bubbling through the DOM, so if it isn't jQuery it's something very similar.
Why meh?
You probably don't want to use [classList](http://caniuse.com/#search=classList) yet. CSSStyleSheet is also still a working draft. 
I don't doubt that you have good reasons for saying "Meh", but please, for the rest of us, explain why you say so.
Since when is Object.defineproperty bad? I use it and it's quite nice for watching vars for changes and running stuff when they do change. Not a problem I would think needs fixing, and if the only fix is making your code 'less ugly' as the article states then that's idiotic.
Ah, I see what you're saying. I'm not sure how that applies here. I mean, that's already kind of what the 'v' object is, but in this case, the 'catch-all' function isn't actually catch-all. It has a single job, and that is to add a form (an arrangement of previously-defined parameters) to the list of valid forms. All it takes are lists of strings. In this case, it's saying: "OK, to call this function, either pass it a category, or pass it an end, or pass it a category and an end, or pass it a start and an end, or pass it a category, a start, and an end".
&gt; "OK, to call this function, either pass it a category, or pass it an end, or pass it a category and an end, or pass it a start and an end, or pass it a category, a start, and an end" Which is my point - this is the thing that is fundamentally not-Javascript-y. 
JavaScript's interface to HTML is the DOM and everything in the DOM is a node. Your question is vague in how you wish to add something and what you want to specifically add, so my answers will be extremely generic. The simple way: The easy way is to get the node that you want to insert stuff into and append to its innerHTML property. Example: myNode.innerHTML = myNode.innerHTML + " &lt;strong&gt;some other code&lt;/strong&gt;"; The easy way is generally frowned upon because it will likely destroy all dynamically assigned events to all elements inside of the targeted node and if you are sloppy you could also destroy parts of the code inside of the targeted node since you are treating it like a string. Be sure to escape all angle braces and ampersands before using innerHTML. The easy way is far slower to execute in the case of many small operations, but far faster to execute in the case of extremely few very large changes to the DOM. The right way: The safe way is to use the DOM for all this stuff. Create an element with *document.createElement("theTagName")* or create a new text node with *document.createTextNode("text stuff")*. You can append the new nodes with the *appendChild* method or insert the new nodes into a specific location using the *insertBefore* method. The DOM methods will automagically escape control characters at insertion time and are considered safe. The DOM methods are much faster now than when I first started learning this stuff. They are so fast now in modern browsers that there is a massive speed difference between vanilla DOM interaction and framework execution. This divide continues to grow as the browsers continue to get faster even though the frameworks are written in JavaScript.
OK I think I see what you're saying now. I think that's the point of the library. It aims to add something that JavaScript lacks (but often needs, IMO), which is function overloading. You're right, it's not "JavaScript-y", but that's why I made the library.
myNode.innerHTML += " &lt;strong&gt;some other code&lt;/strong&gt;"; 
That's equivalent.
&gt; because it will likely destroy all dynamically assigned events to all elements inside of the targeted node Of course nobody assigns event listeners directly to elements anymore, *right*? ;)
So again, a solution looking for a problem. There's already a Javascript way to do this, but you'd rather do it some *other* way. That's fine, but it's not a good practice to code not-javascript in javascript. Re: phpjs.
I'm not sure how long I just stared at their homepage for but it's rather hypnotic.
Whether the events are assigned by an event listener or to an event property of the node the events will still be lost. Appending to innerHTML will destroy all nodes in the targeted node and then recreate them all.
To append html strings to element you should use: element.insertAdjacentHTML('beforeend', htmlString); This exists since DOM 1 and works on all browsers: https://developer.mozilla.org/en-US/docs/Web/API/Element.insertAdjacentHTML
Unless you assign the event listener to the document and let events bubble up, which seems to be the recommended way to do things with jQuery these days (which makes sense as you won't have to re-bind when loading content via AJAX).
This is fixed now, thanks! https://github.com/HubSpot/tether/commit/8914da2438b1d4087c6fd771006bf281b24bfd60
Excellent explanation, thanks :) Is `constructor` the only "general management property" that I might have to concern myself with? How can I totally redefine a prototype, and still maintain all of these general management properties (even ones that may be added in the future)? PhotoAlbum.prototype = new function(){ // &lt;-- My Prototype this.Photo = function Photo(x){}; this.addPhoto = function(x){ this.photos.push( new this.Photo(x) ); return this; }; }; // How can I all general management properties, like 'constructor'? restoreGeneralManagementProperties(PhotoAlbum.prototype,PhotoAlbum); I must admit, with regards to `addPhoto` -- there's something that creeps me out about the way prototypes must be declared *outside* and *after* the constructor. Perhaps misguidedly, I savagely wish we could instead do it like this instead: function PhotoAlbum(){ // basic photo album functionality this.photos = []; this.Photo = function Photo(x){}; prototype.addPhoto = function(x){ // &lt;-- desperately wish this was possible this.photos.push( new this.Photo(x) ); return this; }; } // I can't help but feel this is conceptually "outside" the PhotoAlbum, feels misplaced? PhotoAlbum.prototype.addPhoto = function(){ this.photos.push( new this.Photo(x) ); return this; }; Is there any way I can *emulate* the pattern of encapsulation that I so desperately wish was possible? Could the language have worked this way to begin with, or is there a good reason it's decidedly not possible? Thanks, //Chase. 
The word "Hybrid" in this context means that it is an HTML5 app that has access to OS level functionality. Hybrid mobile apps typically use some sort of bridge that allows native code to be called from Javascript. 
I love when my /r/javascript and /r/angularjs front pages have the same content. NOT.
I don't really have any use for this at all, but the demo is very well done indeed. Really sells it.
Thanks! I didn't know about browserify. That looks like a great way to incorporate libraries into projects. I definitely need to start using it
Have you looked at [the srcset attribute](http://www.w3.org/html/wg/drafts/srcset/w3c-srcset/)?
I don't think there would be much of a performance difference. Simple checks are fast. There would be a huge compatibility difference though. visibility:hidden works with every browser. pointer-events:none only works with the most recent browsers. It doesn't work with IE10 and below.
Here is how I do it on one of our sites. We have a "finder" for trivia nights, and here are some of the results. &lt;script&gt; var geocoder; var map; function initialize() { geocoder = new google.maps.Geocoder(); var mapOptions = { zoom: 8, center: new google.maps.LatLng(38.6272222, -90.1977778), mapTypeId: google.maps.MapTypeId.ROADMAP }; var map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions); var location = "O'Fallon (IL) Garden Club"; var address = "308 5th Street"; var city = "O'Fallon"; var state = 'IL'; var zip = '62269'; codeAddress( map, location, address, city, state, zip ); } function codeAddress( map, location, address, city, state, zip ) { var new_address = address + ' ' + city + ', ' + state + ' ' + zip; var formatted_address = address + '&lt;br /&gt;' + city + ', ' + state + ' ' + zip; geocoder.geocode( { 'address': new_address}, function(results, status) { if (status == google.maps.GeocoderStatus.OK) { var contentString = '&lt;div id="content"&gt;'+ '&lt;div id="siteNotice"&gt;'+ '&lt;/div&gt;'+ '&lt;div id="bodyContent"&gt;'+ '&lt;p&gt;&lt;strong&gt;' + location + '&lt;/strong&gt;&lt;br /&gt;'+ address + '&lt;br /&gt;' + city + ', ' + state + ' ' + zip + '&lt;/p&gt;' + '&lt;/div&gt;'+ '&lt;/div&gt;'; var infowindow = new google.maps.InfoWindow({ content: contentString }); var marker = new google.maps.Marker({ map: map, position: results[0].geometry.location }); google.maps.event.addListener(marker, 'mouseover', function() { infowindow.open(map,marker); }); google.maps.event.addListener(marker, 'mouseout', function() { infowindow.close(map,marker); }); } }); } function loadScript() { var script = document.createElement('script'); script.type = 'text/javascript'; script.src = 'https://maps.googleapis.com/maps/api/js?v=3.exp&amp;key=AIzaSyDQFuBo0WcKkSNOcdfgN7upE1X16KWw9j8&amp;sensor=false&amp;' + 'callback=initialize'; document.body.appendChild(script); } window.onload = loadScript; &lt;/script&gt; 
Pretty sure I need this to help customers navigate my client's awful designs.
It doesn't work... Firefox 26 Win7
If you just want to run JavaScript in your build, Grunt allows you to do that very easily. (It's pretty much the same amount of code as Gulp, actually.) Here's how: grunt.registerTask("taskName", "An optional description", [optional, dependencies], function() { console.log("Look, I'm running arbitrary JavaScript!"); }); For comparison, here's how you do the same thing in Gulp: gulp.task("taskName", [optional, dependencies], function(done) { console.log("Look, I'm running arbitrary JavaScript!"); done(); }); The biggest difference between the two is that Grunt provides more support for self-documenting tasks and has ways to pull information out of Grunt's global config object. The king of "just runs JavaScript" build tools is Jake. It has great support for self-documenting tasks and its CLI has very nice tools for passing options into tasks.
That's cool. I didn't see much of that in the Grunt setups out there. (One thing I don't see there is how to handle asynchronous processes, such as my server example. I assume there's some simple way, though.) In your gulp example, there's no reason to use the `done` callback — if a task is synchronous, then it's handled normally. You only need to accept the callback if you have an async task that doesn't return a stream. The gulp example would then be: gulp.task("taskName", [optional, dependencies], function() { console.log("Look, I'm running arbitrary JavaScript!"); }); Which is basically the same. :-) I wasn't so much trying to knock Grunt, as explaining the rationale behind the way gulp works, and why new plugins are viewed with suspicion. I definitely wish that gulp had both task descriptions *and* something similar to `grunt help` built in. Thanks for the info!
Thanks for the clarification. I knew there were some cases where Gulp would run tasks concurrently, but I couldn't remember the rules. I didn't think you were trashing Grunt, actually. I just wanted to point out that the ability to run regular JS isn't really something that sets Gulp apart. (Unlike its focus on pipelines, which *does* set it apart.) But I agree that the "Grunt culture" is more focused on plugins than on running normal JavaScript. By the way, you're right that Grunt also has a way of dealing with asynchronous tasks. It's pretty elegant, although not quite as nice as Gulp: grunt.registerTask("taskName", "An optional description", [optional, dependencies], function() { var done = this.async(); setTimeout(function() { console.log("Look, I'm running asynchronous JavaScript!"); done(); }, 1000); }); 
Is this using webgl?
I love the Amazon review that gave it 5 stars, http://www.amazon.com/JavaScript-The-Web-Technologies-Series/product-reviews/0538748877/ref=cm_cr_dp_qt_hist_five?ie=UTF8&amp;filterBy=addFiveStar&amp;showViewpoints=0 From someone named Donald.
The library itself appears to just be for the geometry but the webpage itself is using webgl
Well technically, it exists since IE4, was adopted by HTML5 and implemented since Firefox 8 and Safari 4.
Well, that's a quite new feature, so not implemented by Firefox and IE. Very interesting though, thanks!
Can't connect to server.
It's like a* but is much much faster, there are downsides though, it's performance degrades with grid density, so it works better with a grid that is flush with open areas, not a tight maze. edit: jumppoint is how easystar.js makes money.
var hoisting got you there. You lose the value of 'image' because your declaration "var starbucks" is hoisted, while the declaration of the var image is made later, inside a function. Move your "var image = 'images/coffee.png'" outside your initialize() function. After that you can also wrap your starbucks marker creation inside a function : function getStarBucksMarker() { var marker = new google.maps.Marker({ position: new google.maps.LatLng(33.744236,-118.015271), icon: 'images/coffee.png', map: map, title: 'starbucks' }); return marker; } https://developers.google.com/maps/tutorials/customizing/custom-markers#customize_a_map_marker This article should also give you some insight about what is JavaScript variable hoisting : http://johnkpaul.com/blog/2013/02/11/what-is-hoisting-really/ 
I would suggest to you to check out [ReactJS](http://facebook.github.io/react/), not sure you could use this along with Angular, but they do provide a means to do exactly what you're asking.
I would discourage from doing this. When someone sees the $-sign, they **will** think of jQuery. When this object then does not support the regular jQuery functions it will be a unpleasent surprise.
This is more inspired by the picture el spec. I think the srcset syntax is far more cluttered then the picture tag syntax. However I am very curious which spec will eventually be the default (or maybe something totally different?). The plugin was mostly inspired by the picture tag polyfill js library, but using jquery and with some additional options. 
Why is this demo being downvoted?
I thought this was already happening, are you talking about the examples page?
That's nice, but without support info, I'm still going to use [Can I use](http://caniuse.com/).
I think it's perfectly fine within your own codebase. Another developer working on it should first get enough familiarity with your code to understand how `$` is used. But I can definitely see confusion if you use it in, eg, a blog post, without very clear explanation.
&gt; Jake Archibald has some excellent slides showing the issue here, whereby `setInterval` won’t be smooth and will quickly start to drop frames Do you have a link to the slides or example code? I haven't noticed this.
&gt;Even when I use jQuery, if I (or my company) have control of the project, I very, very rarely use document.ready (or the shortened version $(function)). &gt;This is because I put all my JavaScript below my DOM, before the &lt;/body&gt; tag. This way I always know the DOM is going to be compiled by this point. Is this true per the spec, or is he relying on implementation details?
That's nice, but without usage info, I'm still going to use [HTML5 Index](http://html5index.org/). Basically, I think the two sites compliment each other nicely. I agree, however, that OP's link would be greatly enhanced with browser compatibility information. Or at least links to Can I Use. 
* _"The world's most powerful dropdown library yet"_ is pompous, and I'm going to go out on a limb here, but it's also most likely factually incorrect. * Despite being _"The world's most powerful dropdown library yet"_, it evidently has problems [handling](http://www.reddit.com/r/javascript/comments/1vtsq1/dropjs_the_worlds_most_powerful_dropdown_library/cevqqa9) common [runtimes](http://www.reddit.com/r/javascript/comments/1vtsq1/dropjs_the_worlds_most_powerful_dropdown_library/cevrb9e). * The page has virtually no information on it other than a couple simple demos; seriously, did anyone spend more than 15 minutes making it? * The _documentation_ link is nothing but annotated CoffeeScript source, and even then it's a stretch to call [the few comments there](http://github.hubspot.com/drop/source/drop.html) "documentation". Where the API reference, usage options, compatibility chart, license, etc....? * It's CoffeeScript. * Only 1 of the 3 demos is actually a 'dropdown' (that, or the script is actually buggy for me too [on Chrome/Win7]); one is just a tooltip/hover-over and the other is... I dunno, a pop-up div. For what it's worth, I can do all 3 examples today pretty painlessly with just jQuery -- as opposed to 1600 lines of external script.
I just restarted the node. It ran out of memory overnight… I definitely need to look into that :)
Slides: https://speakerdeck.com/jaffathecake/rendering-without-lumps Presentation: https://www.youtube.com/watch?v=cmZqLzPy0XE edit: [Vimeo might be preferable](http://vimeo.com/67050197)
Sounds to me like he's relying on implementation. Generally, a browser will load the HTML, then start loading assets while building the DOM tree internally. One could realistically assume that the DOM is built by this stage, but not using an event is still chancing a race condition, however slim.
&gt; When someone sees the $-sign, they will think of jQuery I'm sure this same argument was brought up when Prototype was king.
Well I think a minute and thirty seconds is enough of that.
tl;dr: Spoiler: [jQuery is less relevant now than when it was introduced](/spoiler), and people like to treat jQuery like a fad diet and will look down their nose at other devs for using it.
Works now ... sort of. The ship doesn't move. Feels like lag :) 
Have you had a look into the error console of your browser? The first Error I find on line 7 where you forgot the ; at the end of the statement before var. Then you named your function calcAvg, but called calcavg. Also your form is named num, but you try to get the info from numform. If you correct all these errors, it works. It's not a beautiful solution, but it works.
Neat! I've been messing around with node/socket.io and 2d/3d mp games for fun! I made an ARC (http://en.wikipedia.org/wiki/Attack_Retrieve_Capture) clone first then a very simple 3d space dogfighter via threejs. Both very much prototypes. Care to share any development pearls of wisdom? Especially with respect to syncing game state or reducing message size?
#####&amp;#009; ######&amp;#009; ####&amp;#009; *Here's a bit from linked Wikipedia article about* [***Attack Retrieve Capture***](http://en.wikipedia.org/wiki/Attack%20Retrieve%20Capture) : --- &gt; &gt;**Attack Retrieve Capture** (**ARC**) was a free multiplayer, 2D computer game created by John Vechey (jv) and Brian Fiete (bf) as a college project and later published by Hoopy Entertainment in 1995. The game was primarily capture the flag (CTF), but other game modes existed. In the 2-team CTF mode, each team tried to capture the other's flag(s). Players piloted small ships equipped with 4 types of weapons: lasers, missiles, bouncy lasers, and grenades. --- [^(**Picture**)](http://i.imgur.com/Tvqp80t.jpg) [^(image source)](http://en.wikipedia.org/wiki/File:Attack_Retrieve_Capture_logo.jpg) ^| [^(about)](http://www.reddit.com/r/autowikibot/wiki/index) ^| *^(/u/_ThereAreFourLights can reply with 'delete'. Will also delete if comment's score is -1 or less.)* ^| ^(**Summon**: wikibot, what is something?) ^| [^(flag for glitch)](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=bot%20glitch&amp;message=%0Acontext:http://www.reddit.com/r/javascript/comments/1vu1g0/star_sovereign_a_multiplayer_html5_game_written/cew0jel)
Yep. TypeScript, Dart, ClojureScript...
I don't think so - the DOM tree is always loaded up until the point your JS executes.
I noticed that the site is using frames and frameset, weren't those deprecated in HTML5? I find it kind of ironic that a reference site for HTML5 uses tags deprecated in HTML5. edit: They were actually made **obsolete** in HTML5.
I'm confused, then how is my "marker" variable able to call the "myLatlng" variable defined in the initialize function? The first marker is able to show up on my map just fine. I have moved my "image" variable outside the initialize function, but to no changed result. Here is my updated code. &lt;script src="https://maps.googleapis.com/maps/api/js? v=3.exp&amp;sensor=false"&gt;&lt;/script&gt; &lt;script&gt; var image = '/images/coffee.png'; var starbucks; function initialize() { var myLatlng = new google.maps.LatLng(33.7442357,-118.015271); var mapOptions = { zoom: 17, center: myLatlng } var map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions); var marker = new google.maps.Marker({ position: myLatlng, map: map, title: 'My Business' }); var starbucks = new google.maps.Marker({ position: new google.maps.LatLng(33.744236,-118.015271), map: map, icon: image, title: 'Starbucks' }); } google.maps.event.addDomListener(window, 'load', initialize); &lt;/script&gt; Thank you for your help, by the way
My less-educated mind thinks this is absolutely brilliant: var $ = document.querySelectorAll.bind(document); Element.prototype.on = Element.prototype.addEventListener; $('#somelink')[0].on('touchstart', handleTouch); Is there any reason why I shouldn't use this whenever I can in my own vanilla JS? Would adding "on" to Element's prototype introduce some kind of performance hit?
I looked at Google's customizing markers link you posted, but I didn't understand it at all. I tried using the "iconBase" variable with the https://maps.google.com/mapfiles/kml/shapes/ link (especially since the coffee image in that url folder is the one I'm trying to use anyway) and I couldn't get it to work. 
Awesome iends, these are all great ideas and thanks especially for number 4. It's funny I had a demo of staggered tile maps working a long time ago, the maths in general though for calculating the represented tile from mouse position was pretty difficult (for myself at least). So when it then came to updating the pathfinding to work with this system I dropped and ran... Maybe I'll look into this again now that I have a bit more confidence in it all! Many thanks again for taking the time :)
Everyone and their dog has to make a post about how "you don't need jQuery, you can replace it with these couple lines of vanilla JS", and it's just funny that so much time and energy is spent on something that is a) so trivial, and b) so blatantly obvious (to me, at least). Seriously, this topic is as old as "How to do OO in JS", "The truth about closures", or "Demystifying 'this'".....these vanilla JS posts have been common since jQuery itself was released; they're neither new or novel.
I thought you were joking about the 1600 lines. [1626 LOC](https://github.com/HubSpot/drop/blob/master/drop.js)
That is correct. There are many frameworks for using WebGL, so I opted to keep the library agnostic.
I spent a *ton* of time playing around with staggered maps but could never really get things right. See https://github.com/andrewaustin/iso for my basic work. I had so much trouble getting tile picking to work correctly, I basically stopped working on it in frustration.
I ended up implementing a hit box, rather than calculating the co-ords myself. It worked, but seemed really inefficient.
&gt; Care to share any development pearls of wisdom? Especially with respect to syncing game state or reducing message size? * Prior to connecting, server repeatedly pings the client to measure the latency between the two (and thus their resulting game tick offset). * After the initial connection (in which an old, fully resolved game state is sent to the client), only players' commands and game events are communicated. This works because the simulation is written to be deterministic. * Regarding reducing the message size, there is definitely some more work that I should do. Currently I'm sending back and forth JSON, and while I do my best to compact and compress the data, I still feel like there's too much overhead. That being said, JSON is nice and readable, so debugging-wise it's not so bad. * Every 30 game ticks or so, the server calculates a hash based on the current game state and sends it to the clients. When they receive it, they also calculate that hash, and thus can detect that they are desynchronized.
I think there is some usefulness in type and arity checking at runtime for throwing early errors. I have a library where if I don't do type checking users can accidentally end up with a mangled AST that they don't know about until many lines of code later where the emitter tries to process the AST, at which point they would get a disgusting stack trace that doesn't give them much useful information.
There are plenty of HTML+JS calculators on the web, have you tried searching? I'm not telling you to copy them verbatim but I think you're asking for help with &lt;input type="button" value="number"&gt; or &lt;button&gt;number&lt;/button&gt; and attaching an **event handler** like onclick and updating textareaElement.value
I've been this for a while (IE8+ support): function zQ(selector){return document.querySelector(selector);} function zQA(selector){return document.querySelectorAll(selector);} function zBindEvent(el,eventName,eventHandler){ if(el.addEventListener){el.addEventListener(eventName,eventHandler,false);} else if(el.attachEvent){el.attachEvent('on'+eventName,eventHandler);} }
Can't. Win. That little bugger needs a spinner when he's thinking, though.
Cool, but there is no /r/javascript in the post. Should be /r/webdev or /r/html
Just played with you for a sec (guy from the uk). Works really well, good job.
Thanks! Any suggestions?
so remove all of this: this.mqo.onmouseout=function() {mqRotate(mqr);}; this.mqo.onmouseover=function() {clearTimeout(mqr[0].TO);}; ?
is something wrong with [your other thread](http://www.reddit.com/r/javascript/comments/1vuwlh/i_need_help_this_is_suppose_to_calculate_the/)?
Here's a library that makes doing this super easy: https://github.com/JonAbrams/arity
This should be the the bible of the client side optimization
That sounds logical to me. I never used it before so I created an account and added 50 cards to my 'advanced' list. Now my 'Basics' list has 4 cards and will no longer show them to me. Not sure if it is a bug/regression or I'm just a n00b. Based on the little I've seen it doesn't seem like all the cards would need to be in the DOM.
/troll Then it should be in /r/coffeescript This was actually a very interesting read and I am glad it was in /r/javascript.
It depends on webgl support by your graphics card. There should be a warning in the console if there is an issue regarding the card.
Trello's usefulness depends on your personal style, as well as the type of team you're on. My organization is battling over Trello right now. My team loves it. It fits our personalities and workflow. We -- and just as importantly, our customers -- find it extremely simple to use and understand. Another team hates it. They prefer a different tool -- one which, to me, is completely incomprehensible and which has cost us many hours of lost productivity in the past. They don't understand our love for Trello and we don't understand their love for the other tool. The fact of the matter is, neither one of the teams is "right" about which tool we should be using. We should use whatever tool helps us be as productive as possible. Now if we could just convince management that it's ok that we don't all use the same tools... 
Best I could get was 16. http://i.imgur.com/nhDT2gi.png
You might not need javascript to do this, have you just tried with the html marquee tag? http://www.tutorialspoint.com/html/html_marquee_tag.htm
&gt;I tried using the browser’s native innerHtml and getElementByClassName API methods instead of jQuery’s html and append. I thought native APIs might be easier for the browser to optimize and what I read confirmed that. But for whatever reason, it didn't make much of a difference for Trello. jQuery falls back to the browsers native methods when available so I guess that's why. While it does technically take some time to call the jQuery function it's not really noticeable. Using jQuery for animations can be pretty slow though. While you can get JavaScript animations to the same speed as CSS3 animation, it won't be as quick if you use jQuery. 
Interesting read, thanks for the write up.
I imagine a title like "I just wrote a powerful dropdown library - Feedback appreciated!" would accomplish that goal better.
Yes, as I resize down, scrollbars appear until i let go or the debounce ends
Kennan's 1600 LOC comment isn't really a good comparison; It might be 3 lines of jQuery, but jQuery is also an external script - which is a whole lot larger than 1600 LOC. There's also the fact LOC isn't really a useful metric, I'm more concerned with (minified) bytesize. Everything else is fair criticism, however.
Hey @kenman, thanks for the feedback. We take this stuff seriously. - The hero is a bit tongue-in-cheek, but we really believe that Drop is that good, especially because it takes advantage of Tether's powerful positioning engine. (http://github.hubspot.com/tether) - The FF bugs should be fixed, but please let us know if you see any others. - We've added some basic documentation which should make things a lot more clear: http://github.hubspot.com/drop. - What's wrong with CoffeeScript!? Most of HubSpot's JS libraries are built with CS and have received some pretty positive feedback from the community: http://github.hubspot.com/. (Cumulative 19k+ stars on GitHub.) - Since Drop uses Tether for positioning, the http://github.hubspot.com/tether docs are a good place to learn about how Drop works as well. But basically, Drop sets the Tether `element` property, and manages opening and closing, and Tether does the rest. As for the length of the library, yes it's long, but keep in mind the bulk of that is Tether. So if you use any of these libraries: - Shepherd - http://github.hubspot.com/shepherd/docs/welcome/ - Select - http://github.hubspot.com/select/docs/welcome/ - Tooltip - http://github.hubspot.com/tooltip/docs/welcome/ Only one copy of Tether is needed for all four, making the total size of the combined library quite small, especially for what you're getting! Much of this is listed in the new Drop docs (http://github.hubspot.com/drop), but here are a few of the may powerful features of Drop: - Automatically repositions on page resizes and scrolls. - Highly efficicient and precise positioning. - Positioning done with `transform: translate` to avoid repaints, always supporting 60fps scrolling, even with many drops open at the same time. - Automatic collision detection with the edge of the page means your dropdowns are never cut off by the edge of the page and can even flip up/down or left/right automatically. - Flexible animation structure supports all possible CSS transitions for opening and closing, or if desired, no animation at all. - Drops can be nested within other drops. - Drops can be attached to any of 12 attachment points on the target. - Attachment points can be tweaked for perfect alignment using custom offsets. Thanks again for your feedback. I hope you reconsider using Drop in a future project!
bottom line is that dom operations are by far the slowest. Minimize and batch those together and any other optimizations probably aren't necessary. I wrote something for rendering large lists of backbone views that would batch all the changes together - though the logic should work elsewhere: http://modernjavascript.blogspot.com/2013/06/rendering-large-lists-with-backbone.html
Now this is the type of information that devs expect to find when investigating a new project! With all of the data here, you're making a much better case for the tagline; I won't go so far as to say it's now true, but at least you're backing up the basic argument. With that said, the only real problem I had with the post was the complete lack of information; I've ranted in this sub (and others...) before about the lack of effort given to project pages. So many times it's a "here's my project, be sure to +1" and that's basically it... and for someone like me, who reviews (at varying depths) hundreds of projects a month, the complete lack of information means I'll just pass it up. Which is a shame, because I know I'm passing up quality projects at times, but I simply don't have the time to do all the legwork myself. And so, if the developer doesn't make it obvious, it's on to the next project for me... I mean, if the dev doesn't care enough about it to write at least a few paragraphs and examples, then why should I care? Last thing I'll touch on: &gt; What's wrong with CoffeeScript!? You must not read this sub much ;) That's a [very touchy subject around here](http://www.reddit.com/r/javascript/search?q=CoffeeScript&amp;restrict_sr=on), though it's mostly died down now. _"It's just JS!"_ ... _"No, it isn't."_ ... _"Yes it is!"_ ... etc. is the basic gist. Personally I ~~hate~~ don't prefer it, as it seems to introduce just as many wtf's as it claims to correct, but then again....I'm not a Ruby dev (I'd imagine it's a lot more natural for those with Ruby experience). For me, I'm much more likely to move to TypeScript (PHP is my 2nd language, after JS). Point being, I'm sure there was probably at least a couple of downvotes on account of it using CoffeeScript. You could make the reasonable argument that such voting is immature, but that's just how divisive the topic is. Anyways, thanks again and good luck with the project. edit: that's a lot of upvotes in a short time-frame (6 in ~10 minutes)....hrmmm.
The other tool is [Jira](https://www.atlassian.com/software/jira).
No offense to the Trello engineers, since i'm sure they're more than competent, but I was surprised to see them just learning about the negative performance implications of making repeated updates to the DOM (in the preventing layout thrashing section.) This should really be front end dev 101 stuff here; you should always batch your DOM updates since that's the slowest operation you can perform in a browser (outside of an http request of course) They should probably look into facebook's react.js to make that more manageable.
No, but close. The `.next()` tells the iterator to invoke the first run. It's not `left off`, it's just not started. 
[This API](https://developers.google.com/maps/documentation/directions/) (Google Directions) will return a polyline that you can plot on Google Maps. Just use something like [this](https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-addressform) twice to set your origin and destination, have a submit button, and on submit construct your Google Directions url/request the JSON file with jQuery. Once it returns you have your distance so perform your price calculations/display them, take your polyline and add it to the map, and place descriptive markers for your origin and destination. That's how I'd do it in theory. Personally I've never touched Google Maps (I do everything in Leaflet) so take it with a grain of salt. If you have any trouble throw it up on jsfiddle and we can figure it out.
Ideally, both. The first one is just the basics, so unless you already know it, you need it for the second one. The second one deals with slightly more advanced topics, so you may have trouble folowing if you don't have the basics.
If you put it at the bottom of the page before the closing body tag, it should wait until everything else is loaded before executing.
So in order to take the 'JavaScript Essential Training' course, I need to first do the 'Introducing the JavaScript Language' one? That's strange because I sorted them by beginner-level too.
Is proxying the number of arguments through anonymous functions something these languages do? I wasn't aware of it and haven't really explored many compile to JS languages since most of the time I find it's an unnecessary overhead. I also don't see how the compile to languages would force the number of arguments a function accepts without a wrapper? It's not magic. If I wanted to do make it more strict, I would have written about it. Instead what I wanted was to make functions accept a maximum number of arguments and also be able to proxy the number of arguments being accepted. These are both useful little utilities that can be applied to any existing function.
somebody is doing it for real: [js-git](https://github.com/creationix/js-git) with $ backing from mozilla.
You can rewrite document.write, and then load the script asynchronously; so you can get what the script is trying to write in the page and then inject it with a different method wherever you want to put it (e.g. with innerHTML). It's hacky, but probably the only way.
I don't have the luxury of using abs positioned elements to control appearance, or this would be the first thing I'd try :)
&gt; rewrite document.write I'm sorry, what? Let me google about that. Thanks!
[Typescript Example](http://www.typescriptlang.org/Playground/#src=function%20foo\(a%2Cb%3F\)%20%7B%7D%3B%0D%0Afoo\(\)%3B%20%2F%2F%20error%0D%0Afoo\(1\)%3B%20%2F%2F%20ok%0D%0Afoo\(1%2C2\)%3B%20%2F%2F%20ok%0D%0Afoo\(1%2C2%2C3\)%3B)
I'm not certain what you mean. If you have the script tag you can just place it before &lt;/body&gt;. This has nothing to do with absolutely positioning elements or CSS at all. You can even do something like: document.addEventListener("DOMContentLoaded", function(event) { .... append your script here .... }); Which will wait until all resources are loaded.
A foot element would be lovely to stick scripts into. We already have the head and body.
Let's pretend you're actually interested in having a conversation and not just being snarky. The reason Jake is a great tool for a "just run JavaScript" build is that Jake takes care of a lot of common build needs. It runs prerequisites automatically, without running them twice, so you don't have to worry about wiring that up. It lets you selectively document your tasks so it's easy to tell what your task options are. (*Selective* documentation is important because it lets you hide the intermediate steps that people won't normally run directly. This is an area where Grunt falls down.) It provides CLI processing so you can easily provide options to your tasks. It does dirty file checking so you can avoid running slow tasks on files that haven't changed, and it provides file rule analysis so you can automatically do this on a large directory structure. Sure, if you're on a one- or two-person team banging out a simple little website, you can just write a little JS script (or a little shell script). `npm run` has great support for that approach. But if you're on a large project, with multiple people coming and going over time, that lasts for years, your automation needs get complicated. For those, using a build tool like Jake is a better choice than writing it yourself. tl;dr: use tools to get shit done.
If you want bonus points, read about event bubbling. You can listen for click events on a form element that surrounds the buttons. When the event callback is called, an Event object will be passed in as the first argument. You can check out the target property of that object and you'll get a sense of how to start building your input string. Good luck!
Technically, it doesn't "fall back" to them, it uses the fastest method possible and falls back to other ways if not supported. You're right about animations though, jQuery is painfully slow. Hopefully soon they will begin adding support for CSS-based animations for those browsers that support it. I believe there's already some plugins out there that attempt to add this functionality, but I haven't used them yet.
&gt; Because you can get to the value using this.value. More importantly – you should think about how you’re using a JavaScript library. jQuery's $(elem).val() property should be used instead of attr("value"). It's assumed that using the val() property, or the prop() property instead of attr() for example, does some sort of DOM parsing or manipulation that a direct access will not provide. The reason why you use the framework's method is so you don't have to figure out why elem.value isn't giving you back some dynamic value that was pasted in but didn't modify the value property (an example). You would hope that the framework's developers have already encountered that bug and wrote their function around it.
I actually use both depending on what stage of the project I'm in. At the beginning when I'm creating features and whatnot I use Trello for my personal task list. Once it's time for QA and review, I switch to Jira for collecting feedback. I find the workflows easier to use in Jira. I will admit that I haven't really used the collaboration features of Trello, so I may be missing out. 
&gt; Would adding "on" to Element's prototype introduce some kind of performance hit? Since this is JavaScript, the answer is of course: maybe. Adding stuff to built-ins can break heuristics which may result in degraded performance. In general, you shouldn't modify objects you don't own.
&gt; I also don't see how the compile to languages would force the number of arguments a function accepts without a wrapper? It's not magic. They do it at compile time. With Dart and TS, the editors/IDEs show a red squiggly line right away.
My example was that a function like `parseInt` accepts two arguments but filling in the second argument is causing an bug, why would it throw an error on that? There is no way to infer this sort of thing (I don't think). 
I felt like I knew the answer before I scrolled to read it :( Do they use the Agile™ stuff, or the old school tickets/milestones/projects/epics/stories?/tasks/bugs workflow that we all know and love?
The ship auto-rotating to face my direction of movement is mildly infuriating EDIT: It doesn't appear to be doing it anymore. How strange
Yeah, other than that, just be yourself and bring your iPod.
This is not about making JS more strict, it's about making combinators compose with each other. Yes, there are other languages that accomplish the same goal in another way, but it is totally valid to write a JS solution rather than change languages.
I ran into exactly the same problem when I started to compose various variadic functions with each other, and ended up solving it in a similar way. Nice to know that I'm not alone in this asylum. https://github.com/raganwald/allong.es/blob/master/lib/allong.es.js#L265
Not sure about TS, but Dart supports optional positioned and named arguments with default values. So, you could have something like: int parseInt (String input, [int radix = 10]) { ... } ... parseInt('1234'); parseInt('1234af', 16); Or: int parseInt (String input, {int radix: 10}) { ... } ... parseInt('1234'); parseInt('1234af', radix: 16); Dart's `List.map()` only passes the value to the function. print(['11', '22', '33'].map(int.parse).toList()); Prints `[11, 22, 33]`. In the example above, you cannot replace `int.parse` with a function which expects 0 arguments or more than 1 argument. The analyzer will notify you of this issue immediately.
I'd recommend [Eloquent Javascript](http://eloquentjavascript.net/).
just going to drop what i said on HN about this. i expect disagreement, "so it goes". &lt;&lt;harsh criticism - i feel bad for, yet I also feel the standards are too low in general&gt;&gt; pre-rendering the board on the server would have solved his perceived problem immediately. then in more detail: layout thrashing only now a consideration? (advice use a mock dom and see what your operations do in your testing if you decide to handle dom manipulation yourself) as a developer you only started using the profiler when? too many http request, can be much optimised (yes i realise cdn, but ttl there can be managed nicely even for a single delivery) css not remaned and compressed own js badly minified using jquery ffs! &gt;&gt; anyway, perceived rendering would have solved this by the metrics solved is measured here and simply rendering on the server and giving a 500ms ttl on the cdn would have been faster + not overburden their servers. I don't know their stack so perhaps the next staement is useless: is this api with the big taskboard open aka can I have a stab at it and try to explain and proof what I am talking about.
First of all, don't use the language attribute in your script tag; it's deprecated. One way to accomplish what you're trying to do is to just give your form and/or your input an id attribute and use that to reference those elements Also, your function names don't match, and isNan() should be isNa**N**()
That was how I read this as well. That said, it's a good thing for web devs to learn when leveling up, so it was nice to share their experience. 
I didn't know the progressive rendering trick. Although other stuff is noobish (DOM updates), nice stuff.
Thanks for answering! I'll definently give it a go. I'll let you know if I got it working.
The callback to map does not *need* to have a certain signature. The idea that you need to use three arguments is ridiculous, you could just as well have zero. The bug is that it passes in three arguments to the callback. But yes, you can write out the function if you wanted to be specific here. Edit: Grammar
Ok, sorry. I'll try to phrase it more obviously next time. "The cause of the bug is that `map` passes three arguments to the callback function and the second argument of `parseInt` is the radix."
Don't use that script. document.write will always either block rendering or destroy your dom. If you absolutely must load it, either use an iframe (I know, that's ugly, too) or rewire document write to do everything async.
Short answer, no. It won't matter unless you're doing thousands and thousands of iterations a second. Don't worry about it. Just make sure to use "hasOwnProperty" as a safety measure.
With your advice along with Bergi's, I've abandoned the pattern I've presented in this thread, and created this cute little `extend` function to achieve both the visual encapsulation I've been aiming for, as well as the performance. In short, this helper `extend` function simply allows me to specify a constructor's prototype prior to defining the constructor itself. function extend(p){ return { to: function(C){ for (k in p) if (p.hasOwnProperty(k)) C.prototype[k]=p[k]; return C; } }; }; var orifice = new function Orifice(){ this.exhaust=function(){}; this.ingest=function(){}; }; var Sphincter = extend(orifice).to(function Sphincter(){ this.relax=function(){}; this.tighten=function(){}; }); Code excerpted from [my SO community wiki answer](http://stackoverflow.com/a/21298679/1033426).
Thanks, I don't think it will make a big impact on my code but want to ensure that I'm getting everything running perfect. 
No problem. Good luck on your future coding!
Perfection is not something you can reach in javascript. You will find that iterating over an object/map collecting the keys and then iterating over them with a plain old for loop is faster than doing the iteration with a for in loop in chrome, but slower in firefox and safari. Tomorrow, maybe, it will be the other way around.
Thnx for the tip will look in to this. 
I have to admit I had the same question the other day in my head. Hacking around a bit with NodeJS, after doing JS in the browser for years now - spending some time digging out all the cool new methods I can safely use without fear on string and array prototypes :) 
From the readme: "Google doesn't support IE8, Microsoft is dropping support in a few months, and not supporting it saves us a whole lot of trouble. If you are interested in adding support, get in touch, we're happy to accept a PR.". Are you interested in supporting IE8? Send a pull request!
More packtpub spam.
&gt; "...ever want to insert an extra row with ng-repeat? yeah I do and it's look simple: &lt;tr ng-repeat-start="item in list" class="item"&gt; &lt;/tr&gt; &lt;!-- and last row --!&gt; &lt;tr ng-repeat-end class="second"&gt; &lt;/tr&gt; and the output will be: &lt;tr class="item"&gt;&lt;/tr&gt; &lt;tr class="second"&gt;&lt;/tr&gt; &lt;tr class="item"&gt;&lt;/tr&gt; &lt;tr class="second"&gt;&lt;/tr&gt; &lt;tr class="item"&gt;&lt;/tr&gt; &lt;tr class="second"&gt;&lt;/tr&gt; ...
Generators are pretty neat and I'm looking forward to being able to incorporate the into my work at some point, but I hate that `*` syntax. It seems like you should be able to automatically detect if a function is a generator by whether or not it uses the `yield` statement, right?
The problem with generators is that they make everyone who uses them create what is effectively a message pump. The lesson learned long ago on GUIs (notably Windows) is that[ Nested Message Pumps are Evil](http://blogs.msdn.com/b/nickkramer/archive/2006/05/06/591252.aspx?Redirected=true), [re-entrancy is hard](http://blogs.msdn.com/b/timng/archive/2006/09/06/743795.aspx) and there really [can only be one message pump](https://groups.google.com/forum/#!msg/wpf-disciples/kLdMgVzeWig/tbx5-DiJnJ8J). Event based programming is hard and well designed apps end up modeling their application flow as a state machine. [Continuations](http://en.wikipedia.org/wiki/Continuation) promise [sic] to make it easier to have implicit state in a sequence of statements. This is all well and good so long as there's only one message pump. Every generation "loop" is effectively its own message pump. It will either not yield to the real message pump or it will yield in some custom way that will can only screw up. I'd recommend taking a look at iced coffeescript's await and defer. This is a language integrated approach that compiles to callbacks. Debugging is still going to be an issue but I'm optimistic that the next generation of debugging tools will make effective use of source maps and message pump awareness to let you step into an async callback. Of course this would be much harder to get right if every library has its own message pump. I truly hope that generators get deferred from the ES6 standard. I'd much rather have real continuations. Edit^2: corrected duplicate link. http://blogs.msdn.com/b/timng/archive/2006/09/06/743795.aspx
Read about the performance in "High Performance JavaScript" http://books.google.co.uk/books/about/High_Performance_JavaScript.html?id=ED6ph4WEIoQC&amp;redir_esc=y 
this is awesome!
If I recall correctly, they couldn't make yield a keyword since that could break existing code. So yield is only a keyword inside a generator/star function.
I don't know the first thing about windows GUI to be able to follow your links -- is it possible to provide a snippet that would highlight the problems with generators?
omg I don't like the sound of that one bit.
On mobile, free floating modals are usually a bad idea because they can't fit in the viewport without getting cutoff. Tried on ios and this indeed happens as the calendar always renders below the input. What it should do is fall back to the native mobile calendar instead as the UI is much more responsive.
Well, first of all, it would be really good to learn JS BEFORE you're gonna use any frameworks (jQuery, Anguluar JS etc.). This seems obvious, but I know many programmers who can program in jQuery but not in pure JS. This is a problem, because they don't understand the logic behind the language. I learned JS mostly by just doing. It's not a hard language to learn, so you would progress your knowledge pretty quickly by making small JS-scripts. Without it getting boring. Just think of something small, but requiring to use new things. Maybe a good exercises is making a calculator? It requires basic code, like math (Math.*), events and logic. But i dunno. Anyway, a good time to choose JS. Everything seems to be ported to JS, because it's so easy to get started with. Have fun learning!
Very true, embarrassing for me :p
How about a simple todo list using event handlers? That should help you get started with writing event driven JavaScript
You haven't included your JavaScript in the HTML. Use this: &lt;script src="YOURFILENAME" &gt;. The function being called on onclick is different from the one in your JS. Change one to the other. You can also access values in an input field by placing an id in the tag, and grabbing the value using: document.getElementById("IDNAME").value Hope that helps!
Store the last clicked link somewhere and just swap them out and apply/remove classes when another is clicked.
There is a surge in vanillajs post as more advanced JS features are becoming production ready as old versions of IE are being dropped faster.
#####&amp;#009; ######&amp;#009; ####&amp;#009; *Here's a bit from linked Wikipedia article about* [***Event loop***](http://en.wikipedia.org/wiki/Event%20loop) : --- &gt;In computer science, the **event loop**, **message dispatcher**, **message loop**, **message pump**, or **run loop** is a programming construct that waits for and dispatches events or messages in a program. It works by making a request to some internal or external "event provider" (which generally blocks the request until an event has arrived), and then it calls the relevant event handler ("dispatches the event"). The event-loop may be used in conjunction with a reactor, if the event provider follows the file interface, which can be selected or 'polled' (the Unix system call, not actual polling). The event loop almost always operates asynchronously with the message originator. --- [^(about)](http://www.reddit.com/r/autowikibot/wiki/index) ^| *^(/u/kenman can reply with 'delete'. Will also delete if comment's score is -1 or less.)* ^| ^(**Summon**: wikibot, what is something?) ^| [^(flag for glitch)](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=bot%20glitch&amp;message=%0Acontext:http://www.reddit.com/r/javascript/comments/1vwqu0/javascript_generators_first_impressions/cewvr7q)
Nice catch. Fixed. Here's the link I meant.http://blogs.msdn.com/b/timng/archive/2006/09/06/743795.aspx And yes, event-loop, event based programming, message pumps all go hand in hand. EDIT: Argh, too many tabs open. http://blogs.msdn.com/b/timng/archive/2006/09/06/743795.aspx
Allright, so i got my search bar to autocomplete address, but i cant make it work with google directions and i cant seem to find which variable the location that i pick gets stored in. Heres my code: http://jsfiddle.net/Se9Me/
put framwork as jquery, forgot to do that
It's called [AJAX](http://en.wikipedia.org/wiki/Ajax_%28programming%29) \(Asynchronous JavaScript and XML\). The computer works behind the scenes to send data that you post, to their servers, and updates your follower's pages. It only updates a particular part of the page, so it appears seamless to you.
&gt;you could setup an array that stores all of the keys of the map [Something like Object.keys(obj), maybe?](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) [For old browser support, use es5-shim](https://github.com/es-shims/es5-shim)
Hi, javascript is amazing, you'll notice soon. Learning isn't sth done in steps, it's a really long progress. I'ld recommend you to do some side Projects. Small things you can finish within a day. Try: make a chat, todolist with vanilla js or frameworks you consider using for your job. So you gain in this framework and how others tried to solve a common problem. E.g. i struggeled with backbone one time, so I reinvented the wheel. Not for production, but to get a really deep knowledge how they did it and especially why. Make small games. html5 and js is powerful enough to make small short games. It'll be fun for you and people you might show (coworkers family, friends). if they like it extend it with other technologys to make more content an online highscore. Experience with new technologys. html5 is way more powerful than we are allowed to use by the force to support IE. This shouldn you prefenting to know whats could be done, only because it's not buissines relevant. Websockets, canvases, ecmascript6 tldr.: Do small side projects to gain experience. look at frameworks and realize how they solved problems with vanilla. 
Practice white board coding. I interviewed with Google a while back for a JavaScript position and I wrote about it here: http://wesbos.com/interviewing-with-google/
XMLHttpRequest or XHR for short is the type of request commonly used for AJAX. Unlike a regular HTTP request, XHR does not trigger a page refresh and can send and receive data within the context of the current page. Common data types to send and receive over XHR include XML, HTML, JSON and plain text. Usually, the request is made to a server-side script that will take the input data, process it and return a response for the browser to handle. The response could be a success message, some raw data or even HTML markup that the browser can then parse and use in the current page. AJAX requests are almost always asynchronous, meaning that once the request is made, the browser can return to whatever it was doing while it waits for a response. This technique has allowed web pages and apps to deliver desktop-like responsiveness when written well, as content and data can be sent and received on demand without interrupting or blocking the user of the page unnecessarily.
For what it's worth, you can just put angular into a section of your site - it controls everything within the ng-app directive. However, it does get a bit tricky if you have more than one ng-app on a page and they can't be nested. Also, it's a pretty big thing to download. You might want to check out backbone - it's hugely popular and has a much smaller footprint.
I would rather not have to store any data if its not necessary. What I am trying to understand is why the function works on the index content column but not on the ajax loaded pages inside the &lt;div&gt;'s.
Because you can look at it with your eyes. Its on github...
Pretty cool!
In Chrome when I inspect the elements, I can see the class `active` being added and removed from the [ Shows ] and [ Movies ] list items (`&lt;li&gt;`), but not for the list items in the `&lt;div&gt;`'s.
Minor correction: AJAX is always asynchronous.
There is the `data-use-native` option to fallback on native mode. Issue is you don't get working min/max live check. On the iPad at least the modal is quite usable.
Try using event delegation with .on.
Nice explanation, but it's worth pointing out that an AJAX request can be triggered at any point, not just when you submit a form (although that is a common use case).
Sure, the source is on github but the backdoors like the one abramz mentions (Dual_EC_DBRG) are *not* backdoors in the traditional, code sense but in the cryptographic sense, eg. the algorithms are very subtly tweaked to make them weaker* instead of adding 'if (key == '0xf00f00f00f00f00f') return true;' or whatever in the middle of the code. I doubt too many people on the planet (let alone on this sub-reddit) are well-versed enough in cryptography to pick up such backdoors in something originally published by the Stanford Computer Security Lab. *) in Dual_EC_DBRG's case, recommended input values given by NIST in the standard seem to be fishy, allowing someone who knows how they were generated to guess the random numbers generated after seeing only a little but of input. 
Follow it up with Crockford. http://www.youtube.com/playlist?list=PL5586336C26BDB324 or/and http://www.yuiblog.com/crockford/
Looks like they are just adding a random query string to a script tag. Probably to bust any possible caching. This seems like an old/hacky way of a [JSONP](http://en.wikipedia.org/wiki/JSONP) implementation.
The casting is definitely pointless, but the awkward concatenation has to do with how the [HTML document is parsed](http://stackoverflow.com/questions/236073/why-split-the-script-tag-when-writing-it-with-document-write) The HTML parser may not be able to tell the difference between '&lt;/script&gt;' and &lt;/script&gt; so the resulting code would be interpreted as &lt;script&gt; document.write('&lt;script src="..."&gt; &lt;----- syntax error &lt;/script&gt;'); &lt;/script&gt; &lt;---- extra closing script tag
This smells of doubleclick style advertising adcode - they are always so rubbish out of the box. It's for cache busting so the correct / fresh advertising asset is loaded for a campaign. EDIT: really? downvoted?
That's news to me - but if that's the reason, bit of a shame. Still it's (possibly) a handy marker to know that something 'yields'.
I can't say I understand what they are talking about in those links, it seems to \be technical, they talk about the layout process in a gui runtime being parallelized, how does this prohibit some general like technique like generators? The way I see it generators are a "more imperative" way of writing sequence transforms, especially for those that have a "select many" part, or later steps depend on the value of earlier steps. And in addition they can be used when the sequence returns data asynchronously. In the second example of the article it shows how you'd write something that "greedily runs statements until it hits a wait condition then continues with the next statement after it has been satisfied", this kind of thing might be usefull in processing data from the internet, or in game scripting etc. Normally in javascript you wrte this chaining functions in a continuation passing style, but it doesn't scale well enough, which could be solved with the "co" function, or better yet with await as in c#. But from those links above I can't understand why "real" continuations are a better way to do those things. What's the difference of continuations than "calling co with a generator yielding promises", that they have a call stack saved?
Your javascript functions are included with the javascript files and only need to be included on the page via a script tag. For ease of use, put the absolute url to the script as the src attribute, then call the function as if it was on the same page, because it is. &lt;script src="absoluteurlgoeshere"&gt;&lt;/script&gt;
Awesome, thank you for an actual response that doesn't ooze with douche.
Thanks for all the info, guys. It's definitely an ad service, I just pulled the actual URLs out since this did come from a clients site. Good to know that I was correct about the ebRand stuff, and thanks to /u/backwrds SO link, the concatenation on the script tag makes sense.
I never said anything about a form. I used terms as abstract as possible while relating to what the original question was (text in a text box). I don't understand why I was downvoted though.
Reddit is a fickle beast :/
Give the [Project Euler](http://projecteuler.net/) problems a try. I usually solve several of the easier problems when I'm learning a new language. The [S-99 Scala Problems](http://aperiodic.net/phil/scala/s-99/) are fun too.
Especially when there's no response. If I am wrong, correct me so I'm not spreading false info.
This is how we used to do it in IE6. Those were the days.
It's a (weirdly implemented) cache buster. I use the following in several bookmarklet snippets which works well and is very compact: 'http://www.someurl.com/somefile.js?cb=' + Math.random().toString(36).substr(2, 5); It generates a random number, then uses the somewhat lesser known radix argument in toString() to cast it to alphanumeric characters, then trims it down to a reasonable length. Output would look like this: http://www.someurl.com/somefile.js?cb=VcwRY
When `Object.observe` becomes commonplace, you could use it to keep your "key cache" up-to-date without needing to mediate property addition and removal.
Paste this in jsfiddle (the html section) and press run: &lt;script&gt; alert('&lt;script&gt;nope&lt;/script&gt;') &lt;/script&gt; Still relevant today! (at least in chrome)
Or you know, with just CSS: body { cursor: url('../img/pointer.png'), auto; } 
Oh, please don't. We've been through this already.
&gt;folder.anotherfolder.file.function() just curious, do you come from an actionscript3 background? as /u//PlNG said, once the js is attached to the html page, all js runs within that context. &lt;script src="/js/script.js"&gt;&lt;/script&gt; &lt;script src="/js/different.js"&gt;&lt;/script&gt; &lt;script&gt; externalFunctionDeclaredInScriptJS();//declared in script.js differentJSFunction();//declared in different.js &lt;/script&gt; 
This is just a fluff piece on some very superficial aspects of React, and doesn't really go into any depth on any particular aspect. It would be more interesting if there were some example code for using it on both the server and client (as the submission title implies), but it just says "you can render to a string and React is smart enough to just attach event handlers to it". The follow up posts might be worth submitting here, but this isn't really interesting.
I have come up with: $(document).ready(function(){ $('body').delegate('#showslist a', "click", function(event) { alert(event.target.id); }); }); Which shows the id for the link clicked inside the ajax loaded div. But I am having trouble finding a way to then apply the class to the link when clicked and removed when a different link is clicked. So far I have come up with: $(document).ready(function(){ $('body').delegate('#showslist a', "click", function(event) { $(event.target.id).addClass("active").not(event.target.id).removeClass("active"); }); }); But that does not seem to work.
 $(document).ready(function(){ var lastClick = $(); $('#wrapperDiv').on("click", 'a', function(event) { lastClick.removeClass("active"); lastClick = $(event.target.id).addClass("active"); }); }); Delegate is deprecated, use on instead. I suggest wrapping the required areas in a div tag instead of delegating from the body to avoid any potential event issues.
Possibly repeating sequence? Oh, you mean Math.random() * 1000000? That's 10^16 odds. Go buy a lottery ticket!
AJAX stands for Asynchronous Javascript And XML. You could have simply said "XMLHttpRequests are asynchronous most of the time" instead of AJAX.
Except people who aren't versed in crypto aren't making the decision between the 4 NIST sanctioned PRNGs and the people that are, are smart enough not to choose the suspicious and slow one. It took $10mil, plus a patriotic speech, to convince the people at RSA (the company) to let go of their conscience. People should be worried about greedy people in power, however the crypto should be. If hundreds of cryptographers say RSA and ECC algorithms are safe then they are. People should be worried about the trust the implementations of these algorithms, not the algorithms themselves.
Seen this before, @FoundryInc is correct, JSONP+Cachebuster 
I could have said that, but AJAX has become a catch-all term for sending/receiving data without incurring a page refresh, so I think it's more appropriate to say that AJAX requests are asynchronous most of the time, even if it pisses off the pendantic purists.
It's literally **in** the name.
And the name has outgrown its original meaning. Like it or lump it.
This is great - I personally love whimsical animation like this. There do seem to be some browser issues with some of your examples in case you didn't know. For your message and grid examples, I'm getting vertical hiccups at the beginning of each scroll in Chrome 32 on Windows when using the mouse scroll wheel. These vertical hiccups don't occur in Firefox on Windows. Your message and grid examples also have horizontal issues in both Chrome and Firefox with the content jumping sideways during scrolling when the window is narrower than the content. 
Maybe, but I'm pretty sure the star syntax throws parse errors for js engines that don't support it, so I don't really see why that's a problem. EDIT: I didn't fully think that through. I get it now, existing libraries or apps might be using `yield` as an identifier, and they didn't want to cause problems. I still think that is a lame approach. In order to prevent potential conflicts with old code, they chose to introduce a funky syntax and add a special _conditional_ reserved word? That seems more terrible to me.
Which word's meaning has changed? Asynchronous, Javascript, And, Extendable, Markup, or Language?
You can change it to something like this... var cacheBuster = document.createElement("script") cacheBuster.src = "http://XXXX?rnd=" + (Math.random() * 1000000) document.head.appendChild(cacheBuster) You can use document.write(cacheBuster.outerHTML) potentially too if the head element isn't in the DOM yet.
Are you really this much of a pedant, or are you just dense? &gt; Despite the name, the use of XML is not required (JSON is often used instead. See AJAJ), and the requests do not need to be asynchronous. &gt; Ajax is not a single technology, but a group of technologies.
 var single = []; for( var i=0; i&lt;100; i++ ){ many.push( singleFn ); } Shouldn't this read as *single.push( singleFn );*? Or am I missing something here? Edit: I went ahead and edited your test case -- I hope this is okay! The two test cases are comparable in speed... the 2000x speedup came from the fact that the for loop never ran at all, since *single* was an empty array and *single.length* was 0! Edit 2: Here's the link to my revision: http://jsperf.com/single-function-vs-many/2
Pretty interesting, a few critques: 1. Intro was a bit long. One or two color changes would be enough to get it. 2. The first 3/4 levels were too slow -- just not engaging for me at the speed the ship moved. 3. Maybe just me, but the graphs were jerking around a lot. Made it kinda hard to focus. Good work and keep it up.
I really want to make sense of why they needed to cast out to a string before multiplying. But I'm apparently not that clever. Some floating point precision work around? Don't think so... Grr
Is there a citation for that quote? The AJAX marketing buzzword that you seem to be referring to covers everything from XHRs to Web Sockets to just about anything loading data on a web page without a full-page refresh. And if you're attempting to give a technical explanation to someone trying to learn, it seems like a poor idea to use technically incorrect terms in said explanation. In my first comment I specifically said it was a minor correction. Instead of simply ignoring it or conceding that it was a minor mistake, you attempted to debate the meaning of the acronym AJAX. It was a pointless endeavor on both our parts because I couldn't be wrong and you wouldn't admit to being wrong. So we'll just have to agree to disagree.
There is no answer, I assure you.
Dang. I threw this together just before leaving work, I should have known something was up. I'll delete this in a bit out of shame. Sigh.
Might be cool to go the other way and use backbone views (ie a FlickrBoxView) and put them into a collection with a constructor argument array of photo set IDs. You have an HTML template for FlickrBoxView, like mustache or underscore or whatever. Feel like you'd have a lot less code and it would be a lot easier to follow. I just got on the MVC train though, I could be biased. You've already got 80% of a collection-type object in your global meow array.
&gt; XHRs are not always asynchronous. Call it Synchronous XHR, SXHR or whatever you like, it's a part of the technology and usage of XHRs and it's good to point that out to someone who's trying to understand it. FTFY.
From [package.json docs on npm](https://npmjs.org/doc/json.html): &gt; **Don't put "js" or "node" in the name.** It's assumed that it's js, since you're writing a package.json file, and you can specify the engine using the "engines" field.
It's not safe to do this. The tag being written is likely an old advertising tag, which very possibly contains it's own document.write. which could overwrite the entire page if loaded asynchronously.
You can actually just change the last line to this: $("div.showFlickr").each(flickr); The flickr function will get called for each div, with that div as the context.
If I do recall, casting a string was never understood by anyone, there was an odd error in (IE?) javascript that caused certain situations to run into NaN when adding then multiplying. This sounds crazy, but the solution was to convert it to a string then try again... these were back in the days were typedef always returned object. Man javascript has grown up.
I think you just solved a mystery that was plaguing me at work today. 
Obviously need to use the document.write(cacheBuster.outerHTML) option if this is the case then. I'd hope that they know what the adverising site was doing since they're trusting the advertising site's code to run on their site. AFAIK it is generally better practice to load third party scripts asyncronously so that you don't run the risk of their script load blocking your page load.
Cool. Glad I could (maybe) help. 
It's always better to load them asynchronously, but the ad industry is really behind the times. That tag very likely loads another tag from a different 3rd party - which could load yet another party's tag. And depending on ad budgets, user profiles, geo, etc the out put of any of the tags in that chain could change. Almost no way to really 'know' what it's doing, and the industry is just too old and established to get them to change quickly. With tags like this, your best bet is to rid yourself of them as easily as possible - just throw them in an iFrame where they have their own document and execution thread. 
1. find the basic description of a library. 2. Ctrl + C. 3. Ctrl + V into your blog. 4. ???? 
So the js engine can throw a hissy fit and lower level optimization functions would shit themselves and incur penalty because they now have type mismatch and must recover gracefully. Good bye performance. 
You're correct about wrapping things in methods... Unless you plan on using that code elsewhere, it just adds unnecessary overhead. Also, you're attaching the functions directly to the DOM which is messy. [There are a few other things you can do to make the code more succinct.](http://jsfiddle.net/6CPCb/10/) - replace that switch with a key/value hash (i.e. an object); - use $(el).attr('name') instead of mapping them to an object. - map the url query string to an object (jQuery converts it for you) Also it's a matter of preference but I tend to use short-circuit logic whenever it's reasonable. var photos; if (attr.photoset_id) { photos = data.photoset.photo; } else if (attr.user_id) { photos = data.photos.photo; } becomes var photos = (data.photoset || data.photos || {})['photo']; As far as the context goes, you were doing it properly. That said, jQuery already binds the callback's scope to the element though so you can just write $(...).each(flickr) instead of $(...).each(function(){ flickr.apply(this) }) ---------------- Let me know if you have any questions about how the version I wrote works.
The concat is there because some html parsers treat '&lt;/script&gt;' as though it was the end of the opening &lt;script&gt;, they don't "know" about quotation.
Amen to the iframe if you can get away with it.
5. PROFIT!
lol ur actually the first one who kinda said it was to easy :&gt;
Read up on JavaScript name spacing, and how things attach to the global scope (i.e. the window object). If a script declares your function at the top level (i.e. not inside another function) with 'var foo = function' or 'function foo', then that'll be available once loaded in the rest of your app as window.foo or just 'foo'
Code something and do a project. Build it. But first, learning: Choose a JS MVC-style framework and do some tutorials. I'd suggest Backbone as it's pretty lightweight and there's no magic going on. Look up Addy Osmani's Backbone Fundamentals free ebook. Also read up on a module definition / dependency management system. I'd suggest getting your head around RequireJS and AMD to chunk your code up into one file per model, view, collection, etc. Get to grips with underscore/lodash and how that style of functional programming helps avoid spaghetti JS
Unrelated to your question: You're only using jQuery in 3 spots and only performing basic operations with it. You don't *need* jQuery for writing JavaScript. It might be a fun exercise for you to attempt to write this in pure JS :)
As others have said you need to get the browser to load your script while it's reading your HTML file. Either put the script in-line in a &lt;script&gt; tag or in a separate file referenced with &lt;script src="..."&gt;&lt;/script&gt;. It might be code academy is doing some injection for you, depending on whether it's giving you an on-line editor in which case ignore the above. OnClick is fine for the button for now, and when the submit button is clicked it'll try to run the function specified in that on-click. Again, as others have said the functions need to have the same name.
Preparation is everything. I don't know if you'd be going in more as an Engineer or as a photoshop/Designer guy. Engineer stuff below from my personal experience: You'd better be able to talk eloquently about, and show code on a whiteboard, for things like closures, function contexts, prototypical inheritance (and how this is different from classical), the DOM, how you'd do things without jquery in modern browsers, CSS box model (and questions like What CSS would you add to this piece of HTML to make it do X and Y, design a speech bubble in HTML and CSS), performance considerations - things like reflows, redraws, how you'd profile your code. Functional approaches to JS. How would you patch/implement [].filter if it didn't exist in the browser the user is using? What are polyfills? How would you write one? Add to that normal CS questions on Big O complexity and algorithms. What are the complexities of common JavaScript patterns (object hashes, arrays, etc). Be able to talk about modern frontend coding like html5, MV* frameworks, build tools including minification and preprocessors, module systems (commonjs, amd, etc), and async loading. Promises. JS on the server - node. And of course, jQuery - selectors, traversal, operations, and performance costs of the different ways of doing these (especially selector performance cost). How would you write jQuery call X or Y in vanilla JS? e.g. How would you write contains()? What's the Big O notation for that? Now how would you write it without iterating over every child? Basically know your JS and CSS shit inside out from memory. Google some hard interview questions and work through them. General development questions and practices - unit testing (what is a unit test? How is this different to an integration test?), when do you refactor (and how do you avoid getting lost down the rabbit hole), when do you stop refactoring? What's the worst project you've worked on? How did you make things better? What's the worst thing you've done/ fucked up at a job? What source control have you worked with, what branching models worked for you? How would you deal with a co-worker or more junior programmer messing up your code. What are your views on code ownership and tech debt? Why do you want to work here? What will you bring to the team? (That was a braindump, if you have any questions, shoot)
Jeez, meant to write "less known". I even looked the argument up on MDN when I first used it as I hadn't seen that behaviour before. Corrected my post.
Ad bugs are almost universally poorly written injections using document.write and therefore blocking. Hate them. Continually implement them. Sometime rewrite them to use async techniques.
Remember this? &lt;script&gt;&lt;!-- document.write('&lt;script src="..."&gt;&lt;/script&gt;'); --&gt;&lt;/script&gt; Such oldskool.
Try with SVG and [d3](https://github.com/mbostock/d3).
You could only crash the browser assuming you're talking about client side javascript. It's really unclear what you're trying to do though from what you're asking and it looks like you don't really know what you're doing.
[Psst](https://github.com/shaper-pmp/docwriteshim). It's a quick hack, but it's useful for temporarily working around problems caused by third-party code, or for code you otherwise can't modify.
[Here's an example using SVG](http://bl.ocks.org/mbostock/4062045) [Here's an example using canvas](http://bl.ocks.org/mbostock/3180395) They're both based on d3. Canvas will generally be a bit faster, but you will have to manage the scene graph yourself. Implementing things like clicking, dragging, mouseover, etc will require a bit of thought. Contrasted to SVG, the DOM is your scene graph. As you create elements, you can always get handles to them using jQuery or something of the like.
Yes, but the question here is an optimization we might want to use in one specific place under very specific circumstances where it makes a measurable difference to performance. That said, when we get `Object.observe`, we need to re-measure, you never know when some implementor will notice that `.forEach` over `Object.keys` could be faster and implement an optimization.
Hehe, I see your concerns, but it is for work. Not sure how I can prove this without showing which application/address... It is not illegal, and the security team in the company have asked me to try as I'm an external in the company, while they have full access to the system, which I don't have. If you have any ideas on how I can prove this to you, please inform me, and I'll give it to you
I'll try to give some more information about the system (and yes, I do not know what I am doing): * It's a web based system where end users in a company can send their enquiries * I have already tested with copy/pasting a javascript which has a popup window, and this works If there is no way for you to know what I mean, I guess you all must disregard my request for a script... But please don't be afraid to ask for more information!
I'd take a look at pixi.js, it uses webgl with a canvas fallback, not much else out there that performs as well as pixi.js.
This is the code I added, which worked * [code]&lt;script type="text/javascript"&gt;// Popup window codefunction newPopup(url) {popupWindow = window.open(url,'popUpWindow','height=1000,width=800,left=1,top=1,resizable=yes,scrollbars=yes,toolbar=yes,menubar=no,location=no,directories=no,status=yes')}&amp;lt;/script&amp;gt;&lt;a href="JavaScript:newPopup('http://www.quackit.com/html/html_help.cfm');"&gt;Open a popup window&lt;/a&gt;[/code] EDIT: and obviously, I have NO idea what I'm doing!
AngularJS's dependency injection library is also a standalone repo under the angular name- everything after that is either a standard design pattern (factory, singleton, etc) or a component that builds on the standard design patterns and could have just as easily been written by anyone (i.e. the assorted built-in directives).
So my presumption was correct. You're thinking of crashing the server with code on the client side. Those two have nothing to do with each other and that's why I also presumed you might not know what you're doing. I'm still not convinced you do, so let's end this exchange here.
It just looked like HTML being generated by JavaScript to me. That means any classes, inline styles, etc., has to be made part of the code. The amount of code isn't much of a reduction from using jQuery to find items and manipulating them directly. I like the way AngularJS handles the [React](http://facebook.github.io/react/) examples better. You can make directives to handle custom markup, but you still write the markup in the .html file (along with any classes, etc., just like you would expect). Also, your HTML decides what data goes where, and what gets iterated over into a list, etc. All the UI elements are built in the .html file itself. The controller just provides the data it needs. Also, compare the AngularJS "todo app" example to React's. Look how much work you have to do in React compared to AngularJS, and the end result is magically hidden JS pushing HTML into the DOM. Anyone working with the HTML would have no clue that was coming. Meh.
http://www.reddit.com/r/javascript/comments/1vh82g/nodejs_what_is_the_best_full_stack_web_framework/cexqo6d
'ecc' was taken :)
That code wont work either, the alert will still show the ID of the link I clicked, but the class is not being applied to the link.
Hi, sorry. For some reason it stopped working when I put it all onto JSFiddle, so here's the bare code. **INDEX.HTML:** &lt;html&gt; &lt;head&gt; &lt;title&gt;Quick Craft&lt;/title&gt; &lt;/head&gt; &lt;link rel="stylesheet" type="text/css" href="style.css"&gt; &lt;script src="variables.js"&gt;&lt;/script&gt; &lt;body&gt; &lt;div id="header"&gt; &lt;h1 align="center"&gt;quick craft&lt;/h1&gt; &lt;/div&gt; &lt;div id="game"&gt; &lt;div id="inventory"&gt; &lt;/div&gt; &lt;div id="items"&gt; &lt;/div&gt; &lt;div onclick="wood+=1; document.getElementById('items').innerHTML+= 'Wood: ' + wood + '&lt;br&gt;';" id="choplog"&gt; Chop Tree &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; **variables.js:** //VARIABLES var pickaxe = "wooden"; var shovel = "wooden"; var sword = "wooden"; var hoe = "wooden"; var axe = "wooden"; var wood = 0; var stone = 0; var iron = 0; var gold = 0; var diamond = 0; var emerald = 0; var redstone = 0; var lapis = 0; var coal = 0; //UPDATE var increment=setInterval(increment,1); function increment(){ document.getElementById('inventory').innerHTML="Pickaxe: " + pickaxe + "&lt;br&gt;" + "Shovel: " + shovel + "&lt;br&gt;" + "Sword: " + sword + "&lt;br&gt;" + "Hoe: " + hoe + "&lt;br&gt;" + "Axe: " + axe; } I don't think the CSS should be necessary here.
Looks like a fun project to get back into the swing of things! I've got a few important comments. - The comment was made elsewhere, but you don't need that 'returnAttributes' method. $(el).attr('photoset_id') works perfectly. - This is an extremely bad pattern in Javscript: if (x) { var y = 0 } else { var y = 1 } "Scope" is the word in programming used to explain where a variable can be used -- where, based on its declaration, other code can use it. Javascript has a big "gotcha" for scope which can lead to problems in more complex code. All variables in Javascript are function scoped. That means that if you declare a variable *anywhere* in a Javascript function, it's accessible *everywhere* in that function. The value might not have been set (referred to as *initialization*), but no errors will occur if you try to use it. A better pattern would be to do this: var y; if (x) { y = 0 } else { y = 1 } Honestly, my company requires that all Javascript variables be declared at the top of the function, even if they aren't initialized yet. It saves way too many potential errors in complex code. - Your use of "this" is something I would avoid for now. Your flickr function will actually have the parameters (index, element). This will allow you to remove the need for "that", and spread out your functions. You should do: var apiKey = "10bfdbe0b99556c5257b69c346407455"; var pullPhotos = function (element) {...code...}; var returnSize = function (element) {...code...}; var displayPhotos = function (element, photos) {...code...}; var buildPhoto = function (photoObj, size) {...code...}; var flickr = function (index, element) {}; This will keep your functions well spaced out, and force you to think more specifically about how to separate them cleanly. The "element" variable in flickr is the same as the 'this' you are using now, but you shouldn't be adding methods to it. Just declare them separately, and call them. - Your returnSize method could be replaced by: var sizeMap = { thumb: "sq", thumb-large: "q", small: "s", medium: "m" large: "l", }; var returnSize = function (size) { return sizeMap[size] || "sq"; }; Then in displayPhotos: var size = returnSize(attr.size); I've got to head to work, but if you would like some more help, or have questions about my suggestions, feel free to comment back!
Here's a fiddle with working example for you: http://jsfiddle.net/Ct7TU/ Just a quick suggestion: Cache the element to variable if you are about to call its method multiple times. This will reduce a number of times your code is looking into DOM.
Thank you!
Thanks!
Ok so a little more messing around and I have come up with: $(document).ready(function(){ var lastClick = $(); $('#wrapperDiv').on("click", 'a', function(event) { lastClick.removeClass("active"); lastClick = $(this).addClass("active"); }); }); But it removes the links when I click on a new link. So I tried: $(document).ready(function(){ $('#wrapperDiv').on("click", 'a', function(event) { $(this).addClass("active"); }); }); And that adds the links to all links clicked, but does not removed them. Then I tried : $(document).ready(function(){ $('#index_column').on("click", 'a', function(event) { $(this).addClass("active"); }); $("#season_list_div").on("click", 'a', function(event) { $(this).addClass("active").not(this).removeClass("active"); }); }); But that does not work on the ajax loaded divs. Its kind of hard to explain in words what I want to do so I took some screenshots of the intended flow: http://imgur.com/a/U0uJc
What's the point in cross-posting Yeoman's implementation details here?
http://jsbin.com/EKOBuLIt/2/edit
Read that hundreds of times, still can't understand why would you name a file 3902840293-main.css on a live product. Have you seen a live website name their files like this?
Yeoman subreddit isn't active. I posted it there were the question belongs trying to revive the subreddit and in the same time was seeking help. I hope that doesn't bother you.
Nice, I've had to do exactly that for some funky requirements on a few jobs. 
Try to build something, like a game, or for example, write your own jQuery image rotator. Make it responsive, things like that. I would also learn JS as well, jQuery will only get you so far. If you want a more detailed book, check out Head Start jQuery.
Why are you so hung up on what the file is called? Nobody will see the name, only in the source. As mentioned before this allows for caching of files without worrying about outdated files being cached. Try viewing the source of this site itself...it will prove you wrong. &lt;link rel="stylesheet" type="text/css" href="http://www.redditstatic.com/reddit.UlGbTiEmbr8.css" media="all"&gt; &lt;script type="text/javascript" src="http://www.redditstatic.com/reddit-init.en.-d9g8d2B9K8.js"&gt;&lt;/script&gt;
thanks!
Performance improvements are always welcomed!
Well, how would you do this with clicks? It's the same thing just with a different event handler. Also, this might be better suited for /r/learnjavascript
By far the best jQuery learning tool I've used was [Jeffrey Way's Learn jQuery in 30 days tutorial](https://tutsplus.com/course/30-days-to-learn-jquery/).
I apologize if the answer to this is obvious and I'm just missing it, but why would I want to use jQuery in Node? Edit: TIL. Thanks for the great answers. Now I'm full of ideas. 
Now you should forgot everything you've learnd about it, except plain JS stuff.
[Browserify](http://browserify.org/), as the post says. You can then do this for client-side code: $ = require('jquery'); module.exports = function() { $('#bill-yall').show(); };
Hooray for modularity and package management deployment. Great release!
You should really understand what jQuery.each really does. It's not a simple for loop that goes through every iteration in an array. In 90% I see someone use jQuery.each it is much more appropriate to use a for loop. From the perfomance side checkout this test, http://jsperf.com/browser-diet-jquery-each-vs-for-loop. On my Chromebook jQuery.each ran about 95% slower than a reverse for loop: for (var i = a.length; i--;).
Check out the TodoMVC React example for a simple app. For a more complex app toolkit you can use https://github.com/andreypopp/react-app which includes a Router and everything.
For better performance, you could try using translate/translate3d instead of setting the "top" property.
To abort the handler in the first fail function, change it to something like: .fail(function (reason) { // do something regarding failure return Q.reject(reason); }) To complete the chain, use done(): .fail(function (reason) { var deferred = Q.defer(); deferred.promise.done(); // prevents any other handlers from running return deferred.promise; }) The reason for this is that if the readdir fails, it will be called. The result of the handler is used as a promise for the next handler in the chain. If the result looks like a promise, then it will be treated as such. Any other result (including undefined -- no return value) is treated as a fulfilled promise. 
You're right. It's a tradeoff and I'll be the first admit that there are times when it's better to have a low level feature. While this may be one of those times, I think it's going to end in tears. Lisp drives away all but those who can use it effectively and &lt;flamebait&gt;tends towards people who write a lot of code themselves&lt;/flamebait&gt;. The Javascript world includes a very wide range of programmers. Everything from very experienced framework engineers to designers who paint jquery fragments onto their HTML. You're also right in that many javascript libraries have their own event loops. Angular's event loop is so integral to the way that Angular works that it's not really possible to be an advanced Angular developer without a keen understanding of that event loop. However, Angular has done two things very right: 1. Their event loop is built solidly on top of the browser's event loop. 2. They explicitly prevent anyone from nesting the Angular event loop (just like WPF did in one of those links I cited). It's still hard to debug. I would love for debuggers to become callback and event loop aware. In Windows it was a common practice to set a conditional breakpoint on the event dispatcher. There's no such thing in the browser or (to my knowledge) node.
The [jsdom module](https://npmjs.org/package/jsdom) creates an HTML DOM in Node, which you can then run jQuery on, as if you were in the browser. [Cheerio](https://npmjs.org/package/cheerio) is a more lightweight alternative which doesn't actually simulate the full DOM, it just mocks the jQuery API. 
Holy mother of YUCK. Seems a lot more sane just to re-write the original script if that is an issue...
It is? Link?
The DOM methods apply the exact same for XML as they do for HTML. If your data is contained in the same type elements with the same type parentNode types the addition of the category element would not make any difference. Here is an example of how to get all the data from all the child elements into an array: var myData = (function () { var a = 0, child = document.getElementsByTagName("child"), childLen = child.length, data = []; for (a = 0; a &lt; childLen; a += 1) { data.push(child[a].firstChild.textContent); } return data; }()); If the identity of the parent element actually matters then use something like this: var myData = (function () { var a = 0, child = document.getElementsByTagName("child"), childLen = child.length, data = []; for (a = 0; a &lt; childLen; a += 1) { if (child[a].parentNode.nodeName.toLowerCase() === "parent") { data.push(child[a].firstChild.textContent); } } return data; }()); These code examples conform to all the DOM standards and is fully cross-browser compliant back to IE5 (maybe earlier).
* I notice you have angular, jQuery, angular-ui-bootstrap, and bootstrap.js. Do you need all of these? Are you using jQuery features in your angular not provided by jqLite, or are you using jQuery for bootstrap.js/wiki? Why do you have bootstrap.js? The most recent version of angular-ui-bootstrap should support all the bootstrap 3 functionality. * All your source is in one file. I would normally not suggest you split your files this way, but because you don't have a lot of different 'components', this way should be fine: public/ controllers/ directives/ filters/ services/ otherwise I would suggest public/ search/ results/ another_component/ cool_whatsit/ * Use yeoman if you want to organize the first way, angular-generator does it that way. If you want to do it the 2nd way (which I personally prefer), then you would have to make your own generator (ugh, good luck) or just enforce the structure yourself. * Use bower for client side dependencies, if you don't want to use bower, at least put files you don't own in a different directory like 'vendor/' or something. * You can use html5 mode if you own the server, this will make the urls look nicer (no hash), but will require some messing around on the node.js side. I don't know how this works with jade, but you could probably do something like: app.get('/*', function(req, res, next) { res.render('index'); }); note, this doesn't mess with your other routes on the node side. * I would look into replacing ngRoute with uiRouter. If ngRoute has everything you need, it might not be something you want to do. But I have found uiRouter to be much more robust, for example uiRouter supports nested views. Angular team actually removed ngRoute from their core so people wouldn't be penalized for using uiRouter. * Look into using resolve, or at least using promises. Either way will prevent [shit like this](https://github.com/jsplaine/HiveMindHealth/blob/master/public/js/HiveMindHealth.js#L91). I am not 100% sure if ngRoute supports resolve, but if it doesn't, one more reason to switch to uiRouter * [$http calls should be in services.](https://github.com/jsplaine/HiveMindHealth/blob/master/public/js/HiveMindHealth.js#L152) * [I would just make 2 directives, redditResults and fatSecretResults](https://github.com/jsplaine/HiveMindHealth/blob/master/public/js/HiveMindHealth.js#L299) the way you are doing it just seems weird to me. Let me know if you want me to go into more detail/explain things/etc Lastly, I see that pineapple in the corner, someone is an /r/trees fan. edit: formatting cause reddit markdown sucks edit: for travis-ci badge on your github repo, just put this at the top of your README.md [![Build Status](https://secure.travis-ci.org/jsplaine/HiveMindHealth.png)](https://travis-ci.org/jsplaine/HiveMindHealth)
I glanced through the code on your project and I saw no major issues. I suspect the fact you only have one repo and your github profile looks very plain might be hurting you more than your code. Spend some time to get a profile icon and fill out your profile then contribute bug reports on and pulls for JS related projects. Github is about collaboration and I don't see any of that with you. Plus your profile has only had activity for a small amount of time, which doesn't help sell it either. Basically all I'm saying is that as it is now, your Github isn't strong enough to get you a job. If I was making a resume, I probably wouldn't link to it. Focus on your past history as a developer and your passion which drives you to change your focus to JS. Then once you get a job that way, working on filling out your profile with projects and contributions on the side :)
To the stars, my friend, to the stars
'CoffeeScript, ES6,... have "classes"' - both Coffee and ES6 just give you class like syntax on top of the existing prototype chain... don't make the mistake of thinking they are actually implementing 'classes' in a different way.
Try http://codereview.stackexchange.com/. You'll need to put a bit of effort into posting the questions, though — one link to a GitHub repository won't get you a positive response. Maybe ask a separate question for each important file, and talk a bit about what your intentions and concerns are.
Behold... Crockford almost put this to bed ages ago: http://javascript.crockford.com/private.html 
q is promises v1.1 compliant, so you don't have to go and create a whole new promise - it will work for any "thenable". so you only have to do: .fail(function() {return {then: function(){}};}); to short circuit it. Though this may be confusing when you consider how promises flow. Really you should be putting the block3 and it's error handling flow inside a function of it's own.
This is actually the kind of stuff I like in this subreddit. Please don't drive people looking for help/critique away. Thanks.
1. They say a picture is worth a thousand words, well code accompanied with a plea for help is worth a million. 2. [When using XML, XPath is your friend](https://developer.mozilla.org/en-US/docs/Introduction_to_using_XPath_in_JavaScript)
To abort the chain, just rethrow the error in whatever handler, then or fail alike. .fail(function (error) { // handle error, but do not recover throw error; }) If you do not want to rehandle the error in the second block, you can nest… .then(function () { Q.fcall(function () { // or .try // block 3 }) .fail(function (error) { // or .catch // only sees block 3 errors }) }) Or annotate: .fail(function (error) { // handle block 1 &amp; 2 errors // handle, annotate, rethrow error.handled1Or2 = true; throw error; }) .then(function () { // block 3 }) .fail(function (error) { if (!error.handled1Or2) { // handle 3 error.handled3 = true } throw error; }) As always, either return the last promise or call .done() on the end of the chain. 
So you can figure out what logo belongs to who if you see it out in the wild. At least, that is what I am guessing one of the uses would be.
I guess that makes sense... Those are one evil I've never had to deal with in web development...
This is a massively broad question. It also seems like a question for school. Assuming that is the case and you are learning IT, one of the best skills you can acquire is how to find information on the internet. So, in the least patronising way possible, here is a starting point for you: [The Great Finder of Information Online](http://google.co.uk) Good luck in your quest! EDIT: After some further digging, you are on a programming course at college, you should absolutely be able to go away and find this information out. If you are serious about become a games developer or any kind of software engineer, you will need to be more proactive, seriously...
I understood what all of this code was doing, I just didn't understand WHY. This is actually not anywhere near being the worst I've found in this project, though.
Ok, chief.
As far as I know, jQuery has been supporting the AMD format for a long time now, but it has a catch, even though it detects the presence of a module loader, it will still grab the global $ symbol. The reasoning behind that, is even though jQuery supports AMD, 95% of its plugins do not, and they still refer to the global $/jQuery symbol.
I'm pretty happy about the sourcemap thing 
Excellent! I will look into this. 
Javascript improves websites by allowing you to talk to (give commands to and receive status updates from) traditionally non-web devices, such as Roomba vacuums, e-toasters and other appliances. Javascript causes problems when you use the wrong version for the device you want to talk to. For instance, if you try talking to a Roomba using Apple Javascript instead of MSJS, it just won't work. Roombas only support MSJS and Linux-Script.
This is fantastic! I so very much appreciate you looking at it. &gt; /r/trees no actually! Not a smoker (true story). &gt; why all the bootstrap, angular, angular ui, etc... Ah, I'll get rid of bootstrap.js; no need. The reason why I'm using it all is to help with responsive CSS .. though, at this point, I believe the only thing it buys me is [this tooltip](https://github.com/jsplaine/HiveMindHealth/blob/master/views/partials/reddit-result.jade#L7). I can likely, at least, compile a version that supports just this (reducing the filesize). &gt; jquery Now that you mention it, I'll be ditching it when I replace the the [wikipedia tooltips](https://github.com/jsplaine/HiveMindHealth/blob/master/views/layout.jade#L45) &gt; yeoman vs roll your own Yeoman (or grunt) is on my todo list -- probably go with that first option you mentioned. &gt; bower, /vendor Good idea .. that directory looks like a mess right now. I'll try out bower. &gt; html5 I got rid of the ugly hash via [enabling html5 location mode here](https://github.com/jsplaine/HiveMindHealth/blob/master/public/js/HiveMindHealth.js#L16) &gt; uiRouter Interesting, I'll look at it -- perhaps I should just use it to make life easier later. &gt; promises. It's like, no matter how much I read about promises / deferred &lt;whatever&gt;, they still don't make sense to me. Can't see how it gets me past having to poll for something that a consumer needs but might not be immediately available. (like where you mention [here](https://github.com/jsplaine/HiveMindHealth/blob/master/public/js/HiveMindHealth.js#L91)). Does a promise somehow help me avoid this? Either way, I'll try to see if I can use a promise there. &gt; $http calls in services and not factories Another thing that I have trouble seeing how one is more appropriate than another. Both factories and services are providers. After much investigation, I don't see how one cannot replace the other. Any insight on that? &gt; two directives, redditResults and fatSecretResults The way the app works. I can add a Node API, declare it in the server side properties file as "active". And then add a template for it, and it just works. It'll show up on the website without any changes to the Controller code. Totally dynamic. So something has to dynamically figure out which directive to use. Still, like you're saying to, the way I'm doing it feels like an ugly hack. Definitely open to more inspection and response based on my feedback-feedback. This is just what I needed!!!! Thanks again! 
That's a pretty big catch. If I'm including my built javascript on a page that already has a different version of jQuery on it then I have to specify `jQuery.noConflict(true)` or it could break functionality that already existed on that page. Meaning it's not encapsulated like modules are supposed to be.
can go a long way with just lodash.
&gt;I got rid of the ugly hash via enabling html5 location mode here I totally thought you had to do something on the server for this. But actually looking at the URLs, it looks like you are right. &gt;It's like, no matter how much I read about promises / deferred &lt;whatever&gt;, they still don't make sense to me. [try this](http://andyshora.com/promises-angularjs-explained-as-cartoon.html), it really helped me figure promises out. &gt;two directives Ok, I understand what you are doing. I can't think of another way to do it atm. &gt;services vs factories I am not sure if it is just convention, but I have always used, and always seen $http/$resource/RESTAngular calls in services. If you want, I can whip up a simple example of a controller calling a service for $http calls using promises. Or even an example using resolve. Let me know.
The answer is nesting. If you want to have a rejection handler that only handles the rejection of the immediately preceding `then`, you have to expand that `then` into a function. Instead of doStuff() .then(doMore) .fail(handleRejection); write this: doStuff() .then(function(result) { return doMore(result).fail(handleRejection); }); See [this stackoverflow question](http://stackoverflow.com/questions/20714460/break-promise-chain-and-call-a-function-based-on-the-step-in-the-chain-where-it/20715224#20715224) for a similar problem. Unlike what you may intuitively think if you haven't used promises before, promise chains *always* run all the way to the end. They just skip over the next fulfilment handlers if the promise is rejected or the next rejection handlers if the promise is fulfilled (i.e. resolved). If you want to "branch off", you need to branch off explicitly, i.e. by creating a new promise chain in a function. It may help you to think of promise chains as conveyor belts: at every "stop" (i.e. then/fail) the current value is inspected and possibly modified or replaced, then put back on the conveyor belt where it is moved to the next stop. No matter what happens, it has to pass every stop. When you "branch out", you stop the conveyor belt, place the object on a second conveyor belt and then place it back on the first belt when it has passed all stops on the second belt. It can also help to try to always explicitly use `.done` at the end of promise chains. This can make it easier to avoid unhandled rejections or errors, too. I generally try to always end the main promise chain with `.done(null, handleRejection);` so even when the a rejection happens at the final `then`, there's still something that can handle it.
Second this. Lodash and jquery functions make up most of my calls. I also like: - datatables w/ tabletools plugin - moment js - require js - marked - bootstrap js - d3 That covers a lot of the things you might want to do for any given type of site. Unless its a game, in which case, three.js is pretty cool too, although I've never used it in any serious way. 
Nah. JQuery makes a good call with this imo. Having multiple instances of it loaded in the same browser environment is rare enough to warrant a call a .noConflict, instead of having to patch every plugin that relies on it.
That's the point of the article I wrote, but as you can see looking around, this is an unpopular view. It's easier to just use different, more precise words. For example, if I say "metaobject," that doesn't apply to a keyword that is implemented as syntactic sugar, because the thing that exists at runtime is the prototype.
I got confused at the beginning cause I thought it was related to yeoman
but why does something that's been in existence for almost 20 years all of a sudden need an "official" logo?
It isn't JUST the JS logo. Did you even go look at the github?
I did, I looked at all of them they're boring, AND, they're not JS, they're logos for groups, and companies, and at least one useless twitter account. I reiterate my original question, what is the purpose of this? Because to me, it looks like this is just a place to put your logo, and get free referrals to your site. In which case, maybe I'll add mine, since they seem to have no quality control, or guidelines (which makes sense since it's WTFPL), I can put anything there.
Why are you trying to argue with me? I offered you 1 possible explanation, either agree with it or disagree with it and move on.
I'm sorry, it's hard to figure out tone on the internet. Please accept my apologies.
&gt;Output the highest prime palindrome &lt;1000. ie 929 So, I just put a nice 'console.log(929);'. And it was successful....
Thanks. Should be easy to switch to a service. Re: promises, thanks for the link. Still mostly the same understanding I already had. So I guess, you're suggesting that I have the factory return a promise so that I can use .then() in my controller, and that I must put all of the logic that depends on that config information in the then() block? The problem is not that I don't understand what a promise is, the problem is that I don't see how it's very useful when you really need to wait/block. Getting config information is the perfect example. Nothing else really has an excuse to block. edit: another thing I need to mention. My [doSearch()](https://github.com/jsplaine/HiveMindHealth/blob/master/public/js/HiveMindHealth.js#L82) function, which has that recursive weirdness, needs to be available on page load because when a user clicks on a bookmark to a search results page, doSearch is going to get called. Something has to either wait or keep trying.
This is where resolve would come in. [go here and ctrl-f resolve](https://github.com/angular-ui/ui-router/wiki). &gt;If any of these dependencies are promises, they will be resolved and converted to a value before the controller is instantiated and the $routeChangeSuccess event is fired.
Putting huge chunks of code inside a resolve looks unfortunate! What about having the factory return an infoDataPromise, then in my controller... infoDataPromise.then( [execute this stuff](https://github.com/jsplaine/HiveMindHealth/blob/master/public/js/HiveMindHealth.js#L105) ) ..?
I use browserify, so lots of small modules. Crel, doc-js, interact-js, ooze/gedi. Yes they are all may mine.. I really like writing things in a way I understand. :)
I'm picking up what the article is puttin down, but I don't agree with the use case. I would argue that if grunt is a part of your workflow, it should be installed on the CI server. Cool stuff nonetheless. 
I prefer to roll-my-own until I reach a "breaking point" Need XDomain ajax, roll your own. Need cross browser selection (IE 8 standards mode and above), roll you own. Need to add cross browser animation on top.....let's think about including jQuery and refactoring. Need two way data binding....let's think about knockout and factoring out some jQuery (maybe greensock for animation ?). Need more than that? Start thinking angular/ember. 
Well, the thing that I like about React (purely in theory) is redrawing in batches instead of two-way data-binding. If you have a lot of elements with rapidly changing values, two-way data-binding becomes a bottleneck. Drawing in a batch the way React does reminds me a lot of the things CoreGraphics on the iphone does to squeeze performance. The older iphones had such smooth animation compared to android at the time because of the way CoreGraphics rendered everything to the screen. But yes, the React code doesnt look especially clean. I think the batch updating (done cleanly) could be a useful technique for other frameworks to have as an alternative to two-way data-binding when needed.
Oh, wow. I forgot how much people hated my response in that thread. My response here is almost the same. See /u/rpk152's response. :) That said, I'll use jQuery to simplify DOM interactions and cross-browser support. If I need client-side templates, I'll pick something at random, or whatever the client requests. I use RequireJS to modularize things.
Are you looking for someone local or remote. If local, why? I code with people all over the world, some really brilliant people are in places you wouldn't think of. How many devs are you looking for? Are you offering: (a) Average rates for average devs, (b) average rate for great devs, or (c) great rates for great devs? Where else have you looked? One thing to keep in mind is that if the lack of good/great dev is holding your growth then the person(s) who can make it happen are well worth their rates. It is better to spend $150/hr on one person who can deliver than $25/hr on 4 people who cannot.
 window.clipboardData.getData('Text') will work in some browsers, but for security reasons, it's not terribly easy for JavaScript to access the clipboard's contents at will. You might want to look into [this library](http://zeroclipboard.org/) for a cross-browser solution.
Extension to some other app, like from a firefox browser to chrome? 
I have: javascript: window.location = window.location.protocol + '//' + window.location.hostname + window.location.pathname + I'd be always hitting a bookmark (for in my hypothetical www.reddit.com/user/) So in theory, the quoted part could be added to the end of my string? &gt; window.clipboardData.getData('Text') 
I've been an actionscript contractor for 10 years. I am always pleasantly surprised how happy my clients are when I show up and can start on the job from day 1 and then deliver it on time. Unfortunately, if you want to stay employed for most of the year, you have to say you know a wide range of languages, tell some white lies to get the contracts, and then hope you can figure it out when you get there. There are experts, but you never know if you are getting one.
Yes, that would be how it would work from a technical point of view. If you don't need to manipulate the clipboard text in any way, you could just do something like this: javascript: var w=window;w.location=w.location.protocol+'//'+w.location.hostname+w.location.pathname+w.clipboardData.getData('Text'); But as I said before, this will only work on a few browsers, not sure which ones though, you'll need to investigate that yourself.
Thanks for a point in that direction. I will invest some more time on this when I get some sleep and hopefully I'll get it. 
Yah, I guess you could do that. I personally would rather have a function in resolve that calls a service/factory that returns the promise you need. Then it all gets resolved before route change and you don't get any FOUC or anything like that.
That's only if you're outputting special characters in an html element. For alert, you want to pass a plain string. You could encode the `&lt;` and `&gt;` in hex instead as `\x3c` and `\x3e`
If you have to ask, it's a pretty good sign that you don't know how to tell the "right people" from the "wrong people," which suggests that you aren't technical. You should put an engineer in charge of finding good engineers. There's really no other way to do it. Regardless, you have to offer a pretty solid baseline to get good JS devs right now: * Hawaii is comparable to SF in cost-of-living, where $150k is a normal salary * Comfortable office environment (flexible hours, catered meals, top-notch equipment and space) * Solid benefits * Interesting projects and problems * Open-allocation / Servant-leader / "Agile" organizational approach 
This is a tedious and error prone approach. XPath is the correct tool to use. 
I thought "Hey, maybe I can take a look..." Nope.
Please make patient. ;) Edit: One step closer: http://www.unphp.net/decode/d7ccbbee03889eddd5f5430604e1f872/ Edit #2: OP asked why there's CSS. Well, the person who wrote the code wanted to give you a reason to paste the malicious code into your facebook account. This video explains it: http://youtu.be/yvGmp77qTLk
nice! I'm curious as to why there's CSS in it.
http://youtu.be/yvGmp77qTLk
It's a fancy wrapper for closure-compiler. jspretty is also a fancy wrapper for jsbeautifier. Going with the pattern I'm going to assume that jsobfuscate is also a pretty wrapper for Dean's Packer. Nothing new to see here, unfortunately.
I love XPath, I really do, but it is not supported from JavaScript in any version of IE. The above solution could be tedious, but it is not really error prone. You are just getting child nodes of tags with a certain name and the DOM is absolutely stable.
I always use YUI Compressor: http://refresh-sf.com/yui/
To find great developers, you first need great developers. First, no developer wants to clean up the mess his predecessors left him. Second, without a good developer, you have no one who is able to be the judge. One way to get good developers that might suit you is to hire talented freelancers and offer them a secure position once they are comfortable with the way you work. 3 of my colleagues joined our team that way.
I honestly am not sure if this is a joke or not. **A prompt on every page?** Presenting the user with a prompt has been an option for quite a while. There is a reason it isn't a popular technique. A prompt breaks user flow. If they browse with cookies off or localStorage off, then you prompt them on every page... **Javascript required** I know most developers think it is a travesty that some people browse with javascript off. However, it happens and the page should degrade gracefully in that case. Here, there is no image at all when javascript is off. Then this line really made me think it was a joke: &gt;We are finally coming close to the moment where we no longer need the W3C, as all the standards to standard will have been standarded. This on the demo page clinched it as being a joke. &gt;This solution was implemented by Jenn Schiffer for her upcoming Kindle Single "XML Is The Only High-Level Programming Language You Need". Is the author planning on writing BobX 2.0? Back to the issue of responsive images(a real solution): If the W3C were to standardize an http request header that stated the browser's current pixel width, that would solve the problem. edit: when i said javascript in the "prompt on every page section I meant localStorage or other types of javascript storage. Server side sessions could work but still prompts are no good.
&gt; The difference between partial and bind is that the a partial functions this context is set when the returned function is called, while a bound functions this context has already been defined and can’t be changed. This, an ∞ number of times this. `bind` is very useful when doing non-OO JavaScript, but when you want to do partial application on *methods*, you often want to allow `this` to be set when calling the method.
Does it not give you a print button? I could see using this if it did.
I'm a front end developer and I wouldn't mind remote working. Due to current circumstances, some people may not be able to move at the moment. However, after working remotely for a little while, it is possible the situation may change. I disagree with the person who said don't offer relocation packages. Salary and benefits are a big deal also though. So that could also be a problem. It has to be competitive, usually better, than what that person is already making. 
[Edited]. That is odd. Maybe the toolbar is configurable?
Doesn't the script get parsed by the HTML parser before Javascript gets a crack at it?
As others have pointed out you need to specify whether you are looking for just local or remote. Remote should certainly open things up for you including if you are willing to consider part-time freelancers who can work after their day jobs on the mainland; they could start noon-ish or early afternoon and work half of one of *your* business days, thereby ensuring proper communication. You might want to start with one such person, and then not only have them do some analysis/coding for you to begin with, but also coordinate phone screening to help you find more talent -- it will take a good/great developer to help you find more of the same. Then there's also the rate/salary issue as raised by others: be prepared to pay good-to-great.
a button with javascript:window.print() + css @media print (to hide e.g. the toolbar) will suffice i guess.
This is damned impressive.
Thanks! The most common criticism I hear is about the editor's appearance. Perhaps I should get some help from a graphics/visual design person with the look. I am personally happy with how it currently looks, but I would probably be wise to listen to the people saying that it doesn't have the appearance of a professional program. And I am currently being protective of the source code. I'm still holding out hope that I might be able to make a little money off of this thing, so I would like to keep the source code private. This is obviously difficult with javascript since some version of the app's code is loaded by the browser for everyone who visits the page. I actually am currently keeping the code in the opposite state of open source; I slapped it up with a copyright, obfuscated the code, and integrated the javascript with the backend platform a bit among other things to deter people from 'stealing' the source.
Ahhh... a short list of ideas (for better or worse) for this: - Better analytics: track their mouse hotspots *and* their eyes. The data made available would be splendid and I'll bet, surprising. (Worse: *'Guys the latest data indicates everyone spends their time staring at the bottom of the screen! Move everything important below the fold!'*) - Smart websites: Your user is reading an article and looks at the top right corner of the website. Must be looking for a menu? Show that button! They're reading the article? No need to show it! Your user is looking directly at an ad. Maybe you can pop a non-instrusive notification at the bottom of their mobile device that says 'would you like to see more from this advertiser?'. (Worse: *'This website doesn't have a menu'*, *'Looking at our ad? Let us make that full page for you, and we'll play 'find the close button' for ten minutes.'* - Accessibility: Scroll by looking down/up. Incrementally-scroll by a quick nod. Games too: Incorporate dual-face tracking and have two people try to navigate X past their opponent's Y. (Worse: *'Honey! Something's wrong with our mouse and keyboard! This website keeps scrolling everywhere!'*) - Expansion: Is there any reason this can't be used to track hand movements? (Worse: *Up...down...up...down...up..down..up..down..up.down.up.down.up.down.updownupdownupdown....Javascript crashes the browser.*) 
I've been teaching JS this week, and think canvas programming is fun. No library needed! You can make a game or a generative image/animation in 20 or 100 lines of code. Here are some exercises to hack around with: http://softwarestudies.mlog.taik.fi/category/html5-js/
no bluebird?
Nice work! I wonder if I had a bug with transparency-sliders of layers, but I might have missed something. Did you write everything by yourself? And I'm sorry but I have to agree with davros_ about the looks of the interface. It looks like some 90's drawing app for kids..:) edit: As a developer I know how little looks mean compared to functionality and you got a nice set of features there. Collect the all fruits of your good work and make it look good too.
Travis-ci supports grunt if you have grunt-cli in your devDependencies. Then you can use `grunt test` as value of the npm `test` command.
Not every feature of the app has been tested to perfection, so it is definitely possible that you encountered a bug with layer transparency. I did write it all the code for the front-end myself, though I had some help with the backend code for managing accounts and saving/loading image data. And maybe the look I was going for was the "drawing app from the 90's" look :D Seriously, I'll ask a couple of the graphics people I know for some help with the appearance. 
FUCK I got stuck and *had* to watch it until it cycled over to a pure horizontal line. Reminds me of this: [whitney box](http://whitneymusicbox.org/)
Nope. HTML entities are not parsed within a script tag.
Well done, I'm working on a project of similar scale, and I can tell a lot of work went into this. I am a UX Designer by profession, and I use PhotoShop every day. I hate to be blunt, but would say that there is absolutely no way this would replace PhotoShop. Considering they have 10 years and hundreds of people working on it, there is no way. But, as a Paint replacement, I can already see feature parity, and yours is better in many ways. I just don't know how many people use Paint as their primary image editor. And, just in my three minutes of using it, I found something odd: select an area, rotate it, then re-size the area - it kind of floats around and doesn't behave as expected. I don't mean to be so negative, it's a great project, and has a lot of value just to you in undertaking it. The project I mentioned above that I'm undertaking is [Glyphr](http://glyphrstudio.com/), a HTML5 Font Design tool. It won't ever replace professional font design tools, but i'm still having a great time writing the app... even 3 years in :-) you learn a lot by biting off more than you can chew. 
When you use document.writeln it wipes out everything that was already on the page, so you either need to write in a &lt;link rel="stylesheet" type="text/css" href="something.css"&gt; or more ideally don't use document.writeln. You could also add a style="" attribute to the html you're writing in.
Wow, I should put together a Twitter-Bootstrap site like Aviary has to accompany my app. Making a mobile app version is also on the horizon for me, since I actually have experience making iOS and Android apps which are all HTML5 javascript using phonegap. No matter what, I believe that getting a base of people who actually use my product needs to come first. Or maybe I should just apply for a job at Aviary hahaha. 
It's honest feedback. I am not even aiming for feature parity with photoshop, since that would indeed be impossible for me to achieve! I'd like to think that I could make my tool more accessible than photoshop, and being based in the browser makes that goal feasible. I'm curious what precisely you mean about the selection rotating-resizing-etc not behaving as expected, since that particular I thought that feature worked quite well. And perhaps I have bitten off more than I can chew... I am far enough in with this particular project though that I feel obligated to see it all the way through to the finish. I'd like to put some polish on the platform, take it through a solid round of user feedback and revision, then give some money to a buddy of mine who does software advertising to drive a bit of traffic to the site. Perhaps the program will end up without a single true frequent user, but no matter what I will have learned a lot from the whole thing and will have made something that I am proud of. Too many personal projects have ended up on the shelf collecting dust without ever having a chance of becoming a product which people actually use because I never gave them the follow-through needed for it to be a possibility. If this thing ends up collecting dust as well, I want it to be because it wasn't good enough, not because I never bothered to truly finish it and publish it.
Thanks dude. pixlr is one of the top 1000 sites on the web, and has been something that I have looked at longingly/jealously all throughout the development of this project. I tell myself that the sun is setting for flash-based apps like pixlr, and the day for HTML5 apps is just beginning. It is true that flash apps require plugins which are becoming less supported while HTML5 stuff is becoming the universal standard.
And Glyphr is slick. I played around in the sandbox, and it seems to do everything I would expect a font editor to do very smoothly, and right in the browser. That being said, I have never actually tried to make my font before, so I really have no idea what other tools are out there for the purpose.
I have a similar tendency to have a great idea, start a project, and never finish it :-) scoping is key, it sounds like you are on the right track. Keep it up. I'll try and explain the issue a little better: * if you select an area, then resize it by the lower right corner, the upper left corner stays put while the area is growing or shrinking. The corner you grab stays directly under the cursor. That works as expected. * If you select an area, then rotate the area, then grab a corner to resize it, all the corners move. And the corner you grabbed does not stay underneath the cursor. The area seems to resize in some relation to cursor movement, but not in an expected way. I would expect the corner I grabbed to always stay under my cursor, and at least one of the other corners to stay in one place. Having done similar stuff to this, I know translating cursor movements to shape translation areas, especially when rotated, is incredibly difficult. Good luck, I hope the issue is more clear now. I'm on Chrome v32, which is the latest. As another small note, you probably don't need 8 rotation handles. They all do the same thing, you can just have one on top or something.
Wow, this is really cool. My mustache seems to trip up the mouth detection a bit, though.
I know precisely what you are taking about, and it is indeed a bug of sorts. The 8 resize handles all each have unique behavior, and if you rotate the box 180 degrees, the resize handles react to dragging in the opposite way that they should; the top-left handle is now in the bottom-right, but it still reacts to being dragged as the top-left handle. I should implement a fix for this, but since there is no super simple solution I can think of, I'm not sure how quickly I'll get around to this piece. And perhaps I don't need 8 rotation handles, but since they are already there and work, I'm not in any rush to get rid of them! Good luck to you as well.
Am I screwed if the first thing I thought reading the title is "someon created a client-side transaction support"?
[We are watching you.](http://fforw.de/static/demo/many-eyes-canvas/)
I disagree that developers don't want to clean up old messes. I love that work - coming in and refactoring, improving performance, receiving great feedback on how the product improves. Many of my favorite projects have been of that ilk. It just a matter of preference, and you will find some people who hate it, and some who live for it.
Thanks so much! This was exactly what I was looking for! Got it too work!
Messing around a little bit: http://jsbin.com/ObOTADo/50/edit?js,output
Mind = Blown
You are not alone.
Already had a hangover when woke up and now this...am tripping.
I've found this very useful, looking forward to more
I generally agree - though if you have complete freedom to rewrite, then that's fun. But working with old legacy systems and bad code is just annoying. Like I said before though, If you're running a software company with a great software developer, you're gonna have a hard time attracting others.
Same.
I was expecting the old Acid 3 test... although in moder browsers, you could just use &lt;img src="100of100.gif"&gt;
The bookmarklet was only going to be for phone or tablet but I decided use of java coding would be counterintuitive for this application. I already had a "good enough" solution. I was just going it perfectionist (my 1st in a while). Your suggestion is actually in key with the approach I already side-stepped around, just mine's more geared toward mobile OSs. The scheme has to be totally inconspicuous, now I think java would expose a huge question mark.
It sort of reminds me of the [Infinity effect](https://www.youtube.com/watch?feature=player_detailpage&amp;v=HjvIPq8m0yU#t=270) from Breath of Fire 2.
Warped, melty distorted objects and faces = shrooms Bright happy rainbows shooting out of people's foreheads, and while listening to them speak you can taste their words = acid 
http://www.youtube.com/watch?v=lLl0DVzRksk
Isn't zepto for mobile?
Despite the criticisms on the interface, the functionality is there and it's great-- details of interface / theme can be improved later. I really like your spin on the history window with the icons in place of space-consuming rows of text!
d3.js looks interesting, and quite easy to use. And [this](http://flowingdata.com/2012/08/02/how-to-make-an-interactive-network-visualization/) looks visually quite close to what I'm trying to achieve.
I'm not sure if that's the intention. It's a lightweight replacement for jquery, so it's certainly a viable candidate for mobile use. I don't know what the shortcomings of zepto are for desktop use, hence my previous question.
Tomorrows frontpage: Gates of Hell opened in 45 lines of js
If you have the freedom to throw stuff away and start anew, that's one thing, but I have ssen many other cases in which too much time was wasted on repairing code that shouldn't have been put inside a repository in the first place, because the management decided that's the way to go. Otherwise I agree with you, refactoring and optimizing can be fun.
Ha yeah, as a prototype I wasn't exactly worried about IE...
I was thinking to create a repo in GitHub for those prototypes, are you able to fix/improve some code ?
nice. reminds me of escher, somehow.
I was confused since I've used both ACID transactions and LSD (not at the same time, I think). 
That's fucking incredible.
*Kinda*. First of all, the command pattern is redundant in a language that has first-class functions because in order to "encapsulate all the information needed to call a method at a later time" is trivial with closures (it's really just a description of `Function.prototype.bind`). A promise is also actually a return value rather than a function. It encapsulates future state. It's uncertain what the state will be but it will only be resolved once and it will either fail or succeed. If you're into FP, I believe you can think of promises as lazy Maybe-monads. Basically, instead of returning the actual result, you return a promise object. The promise object may or may not hold a value (or an error) yet. The promise object offers a `then` method which allows attaching a callback that will be called when the actual result (or error) is known, with the guarantee that the result will only be resolved (or rejected) once and that the callback will always be called asynchronously. I think a lot of design patterns are too trivial to implement in functional programming to be really meaningful as architectural concepts, the command pattern being one of them. So, yes, the command pattern essentially describes something that is going on here, but that information does not provide any insight as to what it is that is happening and why.
Affero GPL :( EDIT: To clarify: WebODF is available under the AGPL but KO GmbH provides commercial licenses (with no public info about the pricing as far as I can tell). AGPL means that if you just include this library in your app, you have to open source your entire app under the AGPL, even if it is privately hosted. To avoid that, you have to buy a license. But there's no mention of the exact cost of doing that on the site, so it's either prohibitively expensive (as with enterprise products: "If you have to ask, you probably can't afford it") or they don't want you to know for some reason (i.e. being intentionally intransparent).
http://imgur.com/ZjsoK6m.png
Oh my god, alerts. `console.log()` is your friend.
Alright, after looking at the code, what are you actually trying to do? Setting periods on dates isn't really a goal.
I see what you're getting at, but using JSON for a deep copy of a value makes it really limited. It doesn't work properly with functions, undefined, prototype chains, DOM objects, etc. You'd be better off implementing a deep copy function (which in JS is not at all trivial) or grabbing one from a library like lo-dash.
Yeah I know this has it's limitations (I've mentioned some of the issues in the readme). This is just my first stab at it, I'll probably revisit the cloning bit and replace it with something more versatile. I just felt that this is a good enough first solution and covers 95% of my requirements :) Cheers!
You're right, I misread. Sorry for the late response... I thought I posted this already.
wow
Having created a bunch of projects recently where I set up the Grunt-based tooling, I can definitely see the value in this. With every new project I create now, I basically copy-paste the Gruntfile of another (no need to start from scratch every time) and customize it as I see fit. Obviously, having a more streamlined process for creating new projects could save some time. The problem though, I created 4 Grunt-based projects over the past year, but only one was a true client-side JavaScript application. Another was also a true client-side JavaScript application, but containing the Node.js server in the same project, which brought its own set of challenges with the Grunt configuration. The third was a rather small project with a very minimal client-side part and the last one is a pure server-side Node.js application (for which I'm using Grunt only for running jshint and the tests). It seems Lineman would be a good solution for the first, but the second and third are already doubtful. Either way, creating projects is not that common that it will be guaranteed to be a huge timesaver, and there's always the risk of betting on the wrong tools (what if Lineman doesn't achieve critical mass and dies in a year?). Still, if I have some time on my hands, I might experiment and even try migrating some stuff to this to see if it would help to get a bit more consistency in my process and (hopefully) save time in the future. Some questions I have: - How hard would it be to configure Lineman with CasperJS rather than Testem? - Do the distribution builds already take care of MD5 versioning?
Yeah this is most certainly a joke
&gt; With every new project I create now, I basically copy-paste the Gruntfile of another (no need to start from scratch every time) Sounds like a job for yeoman.
No, that's the entire code. The only other stuff I removed was a billion lines of commented out crap I was trying that didn't work. I thought that CalendarApp was just some built in part of the Google Apps Script. Might not be, though. All I found about it is here: https://developers.google.com/apps-script/reference/calendar/calendar-app
You're on the right track for setting up the prototype chain. Take a look at the first example here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create Note that it's generally better to do `subclass.prototype = Object.create(superclass.prototype)` than it is to do `subclass.prototype = new superclass()`.
Maybe the ID isn't valid for a calendar? It seems strange that it work sometimes but not others. From the API you linked, &gt; Returns Calendar — the calendar with the given ID, or null if the calendar does not exist or the user cannot access it Maybe you've hit some sort of lock on the calendar where it works the first time but if you click again quickly it will not work the second? I'm not entirely sure how Google Apps works so that is just a guess.
Part of the problem, in my experience, is a substantial disconnect between the interests of hiring firms and the talent of prospective employees. There are three kinds of people who develop web technologies: * Engineers * Marketers * People internally reassigned or looking for work that just want to get paid The first two groups are generally genuine but have extremely different attributes, goals, perspectives, and interests. The third group is completely disingenuous give me a strong fear of failure, because they are more interested in an employee paycheck than growing their business or understanding of the technologies. Engineer types care about implementation decisions, how things actually work, and risks to the business from technology decisions. These types care that it is done right, because they know the technology has to scale to grow the business. These guys are critical and generally do not trust popularity or recommendations without testing something first themselves, because safety is important. Smart engineering types will try to better understanding the decision making process of the marketing types and passionately convey the engineering approach to achieving that marketing vision. Marketing types primarily care about consumer awareness, gaining market share, and making beautiful products. Product reputation and brand strength are very important to marketing types. This group tends to care more about speed to market and vanity concerns than spending time or money to see what is happening under the hood. Smart marketing types will listen to the warnings of the engineering types even if in conflict to a marketing vision, because more often than not prettiness means very little in big business and e-commerce. During interviews strong marketing types will likely appear immature, inexperienced, and possibly incompetent to engineering types. Engineering type candidates will likely appear arrogant, sluggish, and less of team players to marketing types. One extremely good developer from on perspective will not appear to be a very good developer to the other perspective. That is an incredible disconnect with substantial bias, which explains why many firms cannot supposedly find good developers.
Have you tried removing the document.write calls? Document.write will clear the document, and write the values passed. In your case it will rewrite *he2* and *wi2*. I would suggest to either remove them or replace with *console.log(he2 + " " + wi2);*
I'm not sure why it's returning 0 ... this implies the image has not yet loaded and by the time that function has run (i.e. after you click an image) it should have loaded. I can't exactly explain it, but can provide a workaround -- if you need to get the height/width of an image, add a load event to each IMG element and set some data attributes for the actual height/width at a time you know it will be there, something like this : var imgs = document.getElementsByTagName("IMG"); for( var i=0, j=imgs.length; i&lt;j; i+=1 ) { imgs[i].addEventListener("load", function(ev) { this.setAttribute("data-height", this.height); this.setAttribute("data-width", this.width); }); } You can then retrieve this height/width later like this : image.getAttribute("data-height"); image.getAttribute("data-width"); --- The way in which your document is structured with elements not being visible you'll get inconsistent results from `document.documentElement.clientHeight`.... with nothing else on the document the height will crunch down to the line-height of a single paragraph.... I got 22px with your code. Try adding 'height:100%' to the `body` declaration in your css to get around that. --- But, if you want the image to use 100% of it's container, you can just set width to "100%" and height to "auto" mitigating a lot of the need for manual ratio checking, etc. image.style.width = "100%"; image.style.height = "auto";
You are right. I looked at some more posts in that sub of medium.com Boy do I feel foolish. I thought this was a serious subreddit.
Thank you. I have found that instead of using the var for the calendarId, just inputting it as a string seems to work, sort of. Not sure how that affects it, though, I feel like it shouldn't. Do I have to restate ”var calendarId =” inside the function?
It's the lowest barrier to entry for a lot of people getting started with Backbone; but you could drop in the [lineman-browserify](https://github.com/testdouble/lineman-browserify) plugin and get all the benefits of Browserify in a snap :)
I'm one of the creators of Lineman; somebody just mentioned that this was on the front page so I figured I'd drop in and try to answer any questions anyone might have! Thanks for checking out Lineman. I hope if it fits your needs that it'll help you out!
I'm sorry to hear it turned you off. Could you offer some more specific feedback? Maybe there's something we can smooth out?
Lineman was developed to solve the same issue (copying the same grunt file time-and-again across front-end web projects). Unlike Yeoman, we're also committed to encouraging a common set of conventions that make all Lineman projects immediately understandable and usable. We avoid generating (m)any files in user's projects so that upgrading is a breeze. We also have a drop-in plugin system so that simply installing an npm module like "lineman-angular" can both configure angular-related tasks *and* your build without any work on the user's part.
Lineman's core template introduces quite a few opinions about building front-end web projects, but we chose our battles carefully. There are a lot of totally valid competing packaging strategies just like there are numerous legitimate front-end UI frameworks. Like @davemo mentioned, users interested in browserify need only `npm install --save-dev browserify` to have it automatically configured for them.
Read the edit in the post...sorry for wasting your time :) Ill try this tomorrow. Thanks for the suggestion. The reason I dont use 100% is that I want the height to width ratio for the pictures to be maintained. 
Have you tried it?
Read the edit in the post...sorry for wasting your time :) Ill try this tomorrow, thanks.
Read the edit in the post...sorry for wasting your time :) Even when their commented out the height and width return 0 as is evedent by the size of the picture displayed. Thanks for the suggestion though.
Looks like you're referencing "wrapperwidth" like it's a PHP variable. I think it should be just "wrapperwidth", not "$wrapperwidth". 
If you're interested in contracting some strong developers to work remotely from home until you're able to find more talent, let me know. I run a small agency here on the mainland. At the very least, we could possibly help get you going so when you do ramp up your own FT devs you're already plowing along.
So, claiming that it replicates everything you love about building server-side applications by thinly wrapping some other tools isn't the answer you were looking for?
Same with $contentdiv. Sometimes it helps to use the debugger or add console.log statements to chase through what's happening.
Should I be using it instead of Yeoman? If so, why?
[You might know the answer to that if you read the OP.](http://linemanjs.com/) -- Search for Yeoman.
browserify???
Take the title only: **hyper focused**, **first class**. Those are marking hyperboles. If you strip them down, you're left with "Lineman is a command-line utility that helps web developers build applications". Hmm, so? You were so hyper-focused is saying that "hey, brogrammers, this is so super cool!" that you forgot to mention what your product does. Is it a code linter? Is it a document generation? A package manager? A minifier? Any guess is good. I, as a developer, don't care about catchy sentences, I just want to know if a tool is useful, worth the time I have to spend trying it and maybe integrate it in my workflow. I checked the site to know more, only to find out that it follows the same line of reasoning. There, you even highlight the useless parts: "Lineman takes **everything you love** about building server-side applications so that you can **find joy in your client-side applications**". Again: Hmmm, so?! I think you should downtone it all and just humbly present your tool and what it does. If it is any good, users will review it and let others know. The fact that it puts joy in development and lets you write **awesome apps** is better left off to people commenting it in forums and blogs, otherwise you're like saying: no need for you to try it, I did it, I'm smarter than you, and I know better than you can possibly know that is awesome, so just use it. See what happened yesterday with "*bro*", the manpage like tool someone showed to /r/programming and HN. I think the whole discussion is ridiculous, but what could be a good project has only been negatively commented because of the choice of name that pretended to sound cool and smartass. Other than that, this really seems a very cool project and I'm gonna investigate it.
Our media team at work was concerned this native iOS functionality would negatively impact our conversion rate, so I built this plugin. I'm still very new to building plugins and certainly appreciate any thoughts or feedback
Thanks for your feedback @twolfson. I'm aware of that. I wrote about the background here: http://schickling.me/override-system-time-in-javascript/
i cant get over the "ascii graphics" dont using a mono spaced font. edit:// it was my first and only impression. sorry guys, its not monospaced for me :3
OKAY BAD TRIP.... &gt; increment = increment + 0.01;
[pixi.js](http://www.pixijs.com/examples/) does look nice, though it's far more powerful than what I need now and it does look like its interactivity is very limited: those examples only respond to mouse clicks, at most. I should be able to click on nodes, associate a link with (parts of) it, drag them around, select them to interactively change attributes, etc. Thanks for the tip, though it's something I'll keep in mind maybe for another project.
[Unobtrusive JavaScript](http://en.wikipedia.org/wiki/Unobtrusive_JavaScript)
#####&amp;#009; ######&amp;#009; ####&amp;#009; *Here's a bit from linked Wikipedia article about* [***Unobtrusive JavaScript***](http://en.wikipedia.org/wiki/Unobtrusive%20JavaScript) : --- &gt; &gt;**Unobtrusive JavaScript** is a general approach to the use of JavaScript in web pages. Though the term is not formally defined, its basic principles are generally understood to include: &gt; &gt; --- ^Interesting: [^Progressive ^enhancement](http://en.wikipedia.org/wiki/Progressive_enhancement) ^| [^Responsive ^web ^design](http://en.wikipedia.org/wiki/Responsive_web_design) ^| [^Ruby ^on ^Rails](http://en.wikipedia.org/wiki/Ruby_on_Rails) ^| [^Lightbox ^\(JavaScript)](http://en.wikipedia.org/wiki/Lightbox_\(JavaScript\)) [^(about)](http://www.reddit.com/r/autowikibot/wiki/index) ^| *^(/u/thebuccaneersden can reply with 'delete'. Will delete if comment's score is -1 or less.)* ^| ^[**Summon**](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| *note: /u/allinonebot is an impostor*
You don't need an "else" after an if statement that ends with a change in program flow (return, throw, break, continue). if(!xx) return console else if (xx&lt;2) return 'log' else return 'Hello World' could be shortened to: if(!xx) return console if (xx&lt;2) return 'log' return 'Hello World'
looks like these bots dun-goofed.
That SVG example looks very much like a fancy version of what I was trying to achieve. Speed isn't very important, as this example is already a way more complex graph than what I am trying to show. Thank you very much.
Or even shorter (although I don't really know what your goal is): return !xx? console: xx&lt;2? 'log': 'Hello World';
&gt;Anything that you can run on a static web server (just files, folks) without writing custom back-end code. Note that you are allowed to use back-end services like Firebase, Parse, GoInstant, or PouchDB. Hey! Come try out our cool tools that take the place of a backend and we'll call it static.
A: var c='constructor'; c[c][c]('console.log("hello world")')(); B: var x = (function () { var y = ['hello world', 'log', 'console', window]; return function () { return y.pop(); }; }()); x()[x()][x()](x()); A + B: var x = (function () { var y = ['hello world', 'log', 'console', window, 'constructor', 'constructor', '']; return function () { return y.pop(); }; }()); x()[x()][x()]("x()[x()][x()](x())")(); A + B + bind: var x = [].pop.bind(['hello world', 'log', 'console', window, 'constructor', 'constructor', '']); x()[x()][x()]("x()[x()][x()](x())")();
I'd say that the answer to the question posed in the article would be something like Flightjs mixed in with express.io.js By this I mean flight components emit a data event which goes to a model component which in turn sends an event in the form of a socket.io to the server and then gets routed using node's EventEmitter interface or the like. It would be an interesting and exciting project to build a full, opinionated stack using this method. Just my 2c
remapping the parameters is seen more than I would like out there in the real world. Just don't do it please.
Yeah, alert("hello world");
Since you asked... A specific and, personally, annoying trend I've seen is 'hyperbole creep'. A tool can be "useful" or "very useful". At conferences it would appear that "useful" no longer cuts it in presentations and so "very" becomes a ubiquitous presence. But now the next generation comes along and thinks "but my thing is better that X which is *very* useful and so mine is *super*-useful." Take a step back and listen to some modern-day presentations on tools at conferences. The prefix "super" has now been robbed of any meaning and is simply added as seasoning to all sentences. A solution is no-longer "elegant" or "easy" or "convenient". It is "super-elegant" or "super-easy" or "super-convenient". So we have the "very" problem all over again. The "super" prefix is used everywhere and so means nothing. The fact that the blurb on this tool's website now uses "hyper" made me quite literally face-palm when I saw it. Read the text without the Valley-boy sunglasses on and it appears to be written by some over-active, sugar-rushing, babbling buffoon with a complete disregard for appropriate register in language and non-hyperbolic speech. To me and, it would appear, other commenters in the thread, such language is more than a little annoying and, quite frankly, makes me unlikely to believe a thing said in it.
Maybe the localStorage API will help you to achieve what cookies did not.
What is exactly your problem with cookies? By the way, have a look at the [Web Storage](https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage) API. There is an example that does exactly what you are looking for. Just out of curiosity: what is the point of "Candy % 999999999999999999 + 1"?
While I'm more of an advocate of 'the right tool for the right job', pixi.js can do everything you ask, it just doesn't have the libraries to do so encapsulated in an easy to follow manner. Drag/drop is just a function of mouse picking/clicking... what I mean is that you'd have to appropriate/write your own libs.
I don't think you fully understand what twolfson is trying to say - at least not in what I gather from your blog post. What he means is that in business logic code, you should never do new Date() or similar. Always treat current time as an input parameter as far as possible. Ideally an object providing current time should be passed from dependency injector or similar. This object can then be mocked to performantly simulate various conditions and anomalies. Whenever I see libraries that attempt to monkey patch the current time (like TimeCop and similar) I think "you're doing it wrong". Dead simple example: var doSomeStuff = function(someObj) { someObj.modifiedDate = new Date(); // Wrong, hard to test } var doSomeStuff = function(someObj, currentTime) { someObj.modifiedDate = currentTime; // Correct, testable }
brilliant. 
The original spec used console.log, you have used a completely different function. Sorry, I cannot permit this.
I was just messing around with Javascripts quirks and learning what can be done, then I got interested in writing difficult to read code! 
What does bind do sorry? This is actually really interesting, thanks!
I dont think its a ploy to get people to use their tools but im sure it in aid of advertising them. I think anything that brings devs together to work and make something good cant be a bad thing. 
Original spec? What are you trying to accomplish?
Sure, nobody is forcing you to do so :)
The code I posted used console.log, you used Alert. I asked how to improve my code, not change the end result ;) 
First class isn't hyperbole, it's a reaction to the way frontend code is treated in many projects. As a JavaScript developer, my work often feels like a second class citizen when compared to whatever is written in the server language. More detail on what we (Test Double) mean when we say first class web development: https://speakerdeck.com/searls/1st-class-web-development-with-lineman
I work at Test Double and use Lineman on most projects. My take might be a little different than the authors' since I spend far more time using it than developing it. We spend an annoying amount of time on every line of text that we put forward publicly to double check that it's something we believe and not utter bullshit. That being said, the tagline might be true for us and not you. I don't know what you love about building apps. Here is how the tagline was true for me: * I can work independently of a server-side team because of the API stubbing and proxying. * Since it only wraps grunt, I've got the full ecosystem at my disposal for when Lineman and I disagree. * Version upgrades are typically painless due to minimal code generation. I don't know if you should be using it instead of Yeoman, that's another awesome project. Use what works for you and what makes you happy. :) -Zach
Just like on the server, MVC is about separation of concerns.
he's suggesting the best improvement. removing the horrendous code that is there and replacing it with an actual 'hello world' program. Seriously, I think you may be trolling with that steaming pile of x's.
I've seen enough mature projects that use require to [disagree](http://blog.testdouble.com/posts/2013-06-16-unrequired-love.html) with namespacing being a step backwards. Browserify is interesting, and as Dave mentioned, there is a plugin for it.
IMO it's more-or-less all just MV\*, with people using "MVC" most often -- whether or not it's completely accurate -- since it's already very well known. However, most of them will tell you that it's not true MVC, or that it's MVC-ish, or just plainly state it as MV\* (where the \* can be any of controller/router/view-model/presenter/etc.). I think it's because we all understand models and views very well, and they translate well from server-side contexts, and so we all know that we want a _model_ and a _view_, we're just not sure exactly what to call the rest of the code that glues it all together.
&gt; This is how I have coded WPF applications in the past - MVVM MVC is well-known and used in various forms for, what, 30 years? Whereas MVVM is a relatively obscure term only well-known among people who develop within the Microsoft ecosystem. So MVVM might well be better, but there isn't a lot of evidence circulating for that yet. Although, responding to your comment - it's strange that you suggest MVC wouldn't work well in a 'stateful environment'... that's what it was always designed for, as a way to change the state of the model. That's its main reason to exist - to allow you to view and alter a model from an interface without the model needing to know anything about the interface - which is a reasonably good mapping onto a client/server application.
Think up a better one and people might start using it. At this moment in time, for a non-trivial single page application, MV* is the best solution we have. How is MV* not the best solution in a stateful environment. The point of the model in a client side application is to store state.
&gt; Also chaining will be more performant: This is incorrect; consolidating the multiple `attr()` calls into one via by passing in an object literal may yield a performance increase, and avoiding repeated [duplicate] calls to the jQuery constructor `$()` will as well, but chaining on its own gives no performance benefits. 
Better? In what way? More obfuscated? 
You're asking for best, which has little to do with the pattern, but the developer. The reason why MVC is so prevalent is that it works well for the majority of the developers who need to assemble reusable components. 
&gt; First class isn't hyperbole I'm not suggesting it is hyperbolic. OTOH, "hyper-focused" is. It is highly grating as a phrase.
&gt; It works because the classical web is essentially stateless Not quite - it works because it's an excellent, commonly-applicable architecture that cleanly separates concerns (model, view and controller) and makes it easy to keep your code clean, modular and well-factored. There's nothing about MVC that makes it inherent (or even particularly applicable) to web-development or statefulness/statelessness - plenty of native mobile and desktop apps follow the same structure because for most use-cases it's just *fundamentally a good idea*. &gt; It is a great way of receiving a request, preparing some data, and rendering it to a view, which is then rendered to the browser via a web-server. Actually it's a great way of *modelling some data*, allowing users or other code to *interact with that data* and then *rendering a view of that data* to one or more front-ends (for consumption by human users, aggregation tools, other programs, etc). If you look carefully, none of those tasks or behaviours are remotely specific to web development. Even in the context of web development, the following are **all** MVC (respectively) in structure or approach: * Used properly, with progressive enhancement, the triumvirate of HTML, CSS and Javascript in your browser. * A client-side javascript app that contains some data in one module, package or class (regardless of where it originally comes from), renders it to a screen using one or more other modules, packages or classes and allows you to interact with the data it renders by means of other modules, packages or classses. * The *combination* of a back-end API or database, the front-end rendered in your browser and your back-end code that responds to HTTP requests. TL;DR: MVC has nothing to do with front-end or back-end web development. It's a general pattern that's applicable in a variety of ways and at a variety of levels of abstraction across the entire score of software engineering as a discipline, and it's popular across **all** those areas because it's a good, structured, generally-applicable architecture that encourages separation of concerns (data, representation and interaction).
I don't understand why document.querySelector needed to be reduced down to `menu`... 
The controller handles events in client-side MVC. Clicks, loads, etc.
Couple of people have said this. Thanks for replying.
Excellent thanks. Helps a lot.
Similar, but much smaller overhead and faster due to advanced JS transformations on compilation step instead of dynamic handling in runtime ;)
 avoiding repeated [duplicate] calls to the jQuery constructor $() This is what I meant. Thanks for the clarification
This is a bit off topic. I'm trying to do something similar, in that I want to create "appointments" in a Google Calendar using a web form via javascript. My question is, why are you using the spreadsheet instead of going directly to the calendar?
Because its degree of abstraction allows to test the model independently of the view even out of the client, which helps development. Also, you can run the model with different views and don't have to rewrite it every time you change the view.
Thank you. There was a redundancy issue. I managed to modify it down to a single function and it works basically as it should. Now there are a laundry list of over things to do to make it better. Thanks for pointing me in the right direction!
I thought your article would talk about object literals, or touch on the notion as functions as objects. These are the sort of things I would associate with the title "An Introduction To Objects in JavaScript". Instead, it talks about constructor functions. In addition, there are a number of errors in your code examples: function Box(){ this.width; // [1] this.height; // [1] this.getArea = function(){ // [2] return width * height; // [3] } } myBox = Box(); // [4][5] myBox.width = 10; // [6] myBox.height = 10; // [6] var area = myBox.getArea(); // [6] console.log("The area of myBox is :" + area); [1]: These don't do anything because you're not assigning anything to them. I get the feeling you're under the impression that these create empty fields for the object. They don't. [2]: For every new object that you create, you're assigning them their own individual `area` function, when you should be putting this on the `Box` prototype, where it only exists once, so that every instance can inherit from it. If you are covering object oriented programming, this is something you should be embracing and elaborating on, not avoiding. [3] `return this.width * this.height;` [4] Missing `var` [5] More importantly, missing `new`. Omitting `new` when calling a constructor will break your code, as all references to `this` inside it will refer to the global object. `myBox` remains undefined. [6] These lines will fail because you accidentally assigned the `width`, `height` and `getArea` to the `window` object, not `myBox`. I feel bad for pointing this all out, but at the same time, I hope it's constructive. I didn't want to shoot your post down, as I'm sure you had the best of intentions, but there was little else I could do.
There may be (and probably is) a way to script directly in the form, but I only managed to figure it out in spreadsheets. So the form submits the content to the spreadsheet, and the spreadsheet activates whenever a new entry is made and submits the latest row to Calendar. This is what it has been narrowed down to, and it creates a single all day event each day for an entire range of days. //below are the column ids that represent the values used in the spreadsheet (these are non zero indexed) var startDtId = 4; var endDtId = 5; var crewId = 3; var oiId = 2; var formTimeStampId = 1; //Creates all day event recurring daily until end of bid week. In theory. function createAllDayEventSeries() { var sheet = SpreadsheetApp.getActiveSheet(); var rows = sheet.getDataRange(); var lr = rows.getLastRow(); var startDt = sheet.getRange(lr,startDtId,1,1).getValue(); var endDt = sheet.getRange(lr,endDtId,1,1).getValue(); var oi = sheet.getRange(lr,oiId,1,1).getValue(); var crew = sheet.getRange(lr,crewId,1,1).getValue(); var eventTitle = oi+" - "+crew+"\u00B9"; var subOn = "Submitted on: "+sheet.getRange(lr,formTimeStampId,1,1).getValue(); var desc = "Added by: "+sheet.getRange(lr,oiId,1,1).getValue()+"\n"+subOn; var loc = 'Miles away from ordinary.' var eventSeries = CalendarApp.getCalendarById("CALENDAR_ID").createAllDayEventSeries(eventTitle, new Date(startDt), CalendarApp.newRecurrence().addDailyRule() .until(new Date(endDt)), { description : desc, location : loc }); }; Pretty basic, and then all you need to do is set up a trigger in the Resources menu on the script page. It also creates an unintended back-up, since anyone who has edit access can delete events from the calendar. If it was unintentional, it does not delete the entry from the spreadsheet. The next step is to build a check for redundancy, so if anyone submits something that has already been used in one of the fields, it throws an error, which I also think would be easier using a spreadsheet. I have no idea how to do that, though.
By the way, eval via `'some string'.constructor.constructor(...)()` is way more obscure. &gt;&gt;&gt; ''.constructor String() &gt;&gt;&gt; ''.constructor.constructor Function() &gt;&gt;&gt; ''.constructor.constructor('return 5') anonymous() &gt;&gt;&gt; ''.constructor.constructor('return 5')() 5 Since every function is a `Function` object, `Function`'s constructor is also `Function` since it's a function (derp). This prints "foo": var c='constructor'; c[c][c]('console.log("foo")')(); So does this: var c='constructor'; c[c][c][c][c][c][c][c][c][c][c][c][c][c][c][c][c]('console.log("foo")')();
Joining therapistfinder.com, speedofart.com and penisland.net in eternal glory.
&gt;then I got interested in writing difficult to read code Why?
the js community hasnt really explored options. mvc is a safe paradigm and better tham what they had before, just a mess of functions.
MVC was created for use on the client (or, more accurately, for the Smalltalk user interface, which wasn't client-server). It was a way of coordinating the system's *underlying state* (models), *widgets* (views), and *input devices* (controllers). Its most notable feature was that Views could update "live" to changes in the Model. Many other apps of the 80s and 90s couldn't do that; they required the user to explicitly refresh the screen. The live updating was accomplished with the use of the Observer pattern (events). Server-side "MVC" is really something entirely different that uses the same name and a somewhat similar grouping of concerns into database access (models), HTML rendering (views), and HTTP request handling (controllers). But the pattern is different enough--particularly since it doesn't provide live updating--that I think that calling it "MVC" is really unfortunate. *Edit: Martin Fowler goes into excellent depth on historical client-side MVC patterns here: http://martinfowler.com/eaaDev/uiArchs.html* 
Looks promising. I want to see the config used in the sample dir.
Caching the DOM element basically. This means that if he ever needed the menu element again he wouldn't have to launch another expensive query to get it. He has it cached. However, if you don't need it more than once, this would likely be less "performant."
MVC was not originally meant for server HTTP. It was originally for GUI's so MVC can be applied anywhere that a view is being rendered.
Good job so far! The only thing I would suggest is trying another algorithm for generating a random phrase. A large chunk of the names repeat after one or two iterations through the generator.
"I don't like the way you talked about this thing, so instead of trying it and without even using it, I am enraged and hate you! Don't you dare try to make useful tools that are free ever again!!!" -_-
After reading the article... His function is useless unless you use it as a callback for an event (cause it's expecting an event).
Good feedback, thanks rjw57
Could you use a different _gaq object name? For instance, call it something else. Granted, you could just look up the name in the source, but maybe its helpful to not use the default? Or do you have to use _gaq
Do not be hard on yourself. With the advent of the JavaScript boom of the last few years, the client-server relationship has gone from mostly black and white to grey, grey, grey. Using socket.io it's actually possible to very literally share variables and data structures in real time between the client and server. The distinction between the two has all but been eliminated. It gets even more "murky" when you consider SEO and rendering particular sets of pages on the server for search engines while maintaining the single page app for the average user. I think that one of the strongest points of client side MVC is that it handles user interaction much, *much* better (clicks, scrolls, general DOM events). The evented system you described as being your ideal is actually exceedingly hard to implement from scratch, and gets much more tricky when you consider scale. I enjoy the syntactic sugar of frameworks like Ember and Angular that give you native two-way data binding and lots of other freebies, but historically I prefer Backbone because it is less opinionated and allows me the freedom to build the application the way I want, providing just basic structure and event handling. 
Oops, I failed at reddit and replied to the wrong post. As Todd said, good feedback. :)
Looks good... 1: You could start getting into the habit of using === and !== at this stage rather than == and !=. http://stackoverflow.com/questions/523643/difference-between-and-in-javascript 2: Your freebieText and adjective vars can be inside your generateLine function, making it tidier. Looks great though :)
Honestly, one thing I never really understood or agreed with is the flip-side of what you're asking... MVC in a stateless, server-side generated HTML approach like in Struts. Ideally I believe all three parts of MVC should live for the duration that the user is using the application, but with Struts or other server-side MVC frameworks, the model and controller are gone once the view has been served. Not to mention that this view is inherently static and cannot be changed without either refreshing the page or using AJAX. It then boils down to the view checking if the model has changed, not the view reacting accordingly to changes in the model, which is one of the key premises of MVC.
Ah, you're right -- didn't see the entire line on my phone. I thought he was reducing `document.querySelector` itself to `menu`.
Because MVC is a useful pattern for constructing applications. People are writing applications in the browser, and therefore looking to this pattern to help structure their applications. &gt; Is the "controller" just a fancy name for "event-broker" In a sense, yes. In the handful of browser-based apps I've worked on and looked at (most of them Backbone or derivative), it seems that Views end up doing a lot of heavy lifting and the distinction between View and Controller sometimes gets muddied. I think it's important to separate in your mind the concept of the MVC "View" from specific implementations named "View" found in various frameworks or in live application code. It's instructive that in early versions of Backbone, Router was instead called Controller. I've experimented with being more strict about what my Application's View does, so that it is *only* dealing with viewish things: displaying templates and UI, handling DOM events, etc., but then using events to communicate with listening controllers to perform actions involving models. i.e. a View would never talk to a Model directly. It's definitely possible, but it requires a lot of forethought and may be more effort than a small project might warrant. On the other hand, if you want your app to eventually run using SVG instead of HTML or using Canvas calls to draw the UI, this is the way you would want to structure your app. 
Function.prototype.bind would do that for you, too, I believe, although it's not available in older browsers, and you'd have to make the signature aCallBackFunction(aDifferentVar /*bound*/, event)
Could someone explain why he needed to use `bind`? He pointed out that JS would execute the event handler but I fail to see why!
What's your alternative?
2) they can be inside, but seeing that it is static data that only has to be initialized once, I would keep them outside. It would be neater to store them in an object somewhere to keep the global namespace cleaner though.
You can also just simply name your anonymous functions: document.querySelector('menu').addEventListener('click', function togglemenu(e) { /* do stuff */ }, false); This will throw the function name in stack traces, while letting you use a standard anonymous function format.
1 thing people haven't mentioned so far: You have "if (element.value == 'Free')" followed by "else if (element.value != 'Free')". You don't need "else if(cond)". Just "else" is enough because the 2 conditions are the opposite of each other.
So I decided rather than talking at you in comments I would simply write your example software in a way that showcases a bunch of different valuable techniques in writing "good javascript". In particular, we are driving everything in our user interface through DATA. We populate the DOM based on data, update the DOM based on data, and perform our calculations based on data. The data is separated into constant data (categories) and the values that are subject to mutations. Our functions are all called via event delegation and the DOMs event system. This helps to decouple markup logic from code. I threw in a "setter" which is a valuable concept to really mull over. The setter I used encapsulates changings the subjectLine value and then updating in the DOM. In a real production system you would abstract your setter system and the corresponding side-effects so that your setters themselves didn't become needlessly coupled. If you have any questions/comments/concerns fire away by all means. This is an intentionally robust implementation of your problem and it will probably seem a little intense at first. http://jsbin.com/AREcoSali/16/edit EDIT http://jsbin.com/AREcoSali/19/edit -- fixed a few typos
I took a stab at cleaning it up a little. http://jsbin.com/AREcoSali/17/edit?js,output Let me know if you have any questions related to my changes. Most of the comments should be self-explanatory.
&gt; what is getting controlled by the controller in a client-side The controller is responding to input and updating the view &amp; models accordingly. Controller is "controlling" the data between the view and the model. &gt; "Is "controller" just a fancy name for "event-broker"" I guess you can think of it like this, but the concept of controllers is more specific than just an event broker (which implies no separation of concerns). It just refers to the updating of models and views by responding to inputs. So a controller shouldn't contain templating logic as part of the MVC, where an event-broker might have templating logic because it has no implied architecture. &gt; Why do people use MVC for client-side? MVC is a historically used software architecture that provides a nice separation of concerns for user interface development regardless of medium. JavaScript is primarily used to develop user interfaces so MVC is popular as a result.
This is the thing. MVC as a server side application architecture isn't *technically* MVC as it was conceived. I found this to be a really good intro to MVC: http://www.youtube.com/watch?v=_Qn-JUtQrsM#t=1371 (from about 22:53 if I've somehow borked the link up.) In terms of how MVC is a much misused term with regards to PHP Frameworks, I saw a good talk given by Stefan Priebsch once, but can't find it. In summary, MVC means two entirely different things between HTTP / RESTful server side code and JS applications, which cleave much nearer to the original intent. Ignoring the fact that technically correct is the best kind of correct; either is just as valid (if somewhat unfortunately named) but the two are not the same and the HTTP variant doesn't really translate well to JS.
Bind is being used to pass variables from the scope that the handler was attached to, to the handler itself. Example: http://jsfiddle.net/path411/a6TcH/ Since the function "onButtonClick" naturally wouldn't be able to access the local variables, this lets you pass them to the handler. The downside to this is the handler will not receive the event as a parameter. From my experience, this is a pretty rare use of bind. The most common use of bind I've seen is for passing the scopes itself (especially helpful in OOP style js and using events). Example: http://jsfiddle.net/path411/UfL4C/ Without the .bind in this case, the function "onButtonClick" will have a "this" value of the button instead of the object. .bind lets you pass what you want the "this" of the function to be. Also you can still use the event passed to the function, if needed.
In his example, are there any reasons why he would need to use "===" and "!=="?
Thanks a lot. I appreciate your answer @magwo and I do apply this design decision where ever I can. Nonetheless `timemachine` might be useful to somebody, so I shared it. Cheers 
"Test" code can be a part of your production build system.
Here: https://github.com/juancabrera/demos
Nope, same results would be achieved. However it's just good practice in my opinion to do type checks, in the long run it will help. It's an easy habit to get into and since he stated he's a beginner its a nice and simple thing to understand and do from the get go.
&gt; I understand MVC: I have used it extensively server-side and have a lot of experience writing websites and web-APIs using server-side MVC. MVC was originally created for clients, and its use on stateless server is a bastardisation of MVC as initially conceived. These are the original MVC papers: http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html (note that they're all from the 70s, aside from a retrospective) And this is a description of MVC in Smalltalk-80 2.0 updated for 2.5, probably an easier read: http://st-www.cs.illinois.edu/users/smarch/st-docs/mvc.html MVC has nothing to do with statelessness, or with request/response (the original implementation systems wer. You do not understand MVC.
As others have said, MVC originated on the client with Smalltalk. Understanding the mechanics of the original MVC design is actually very instructive, especially for the role of the controller. tl;dr; MVC was the pattern implemented by a triad of classes that ultimately manifested themselves as a single "control" to the user. The controller and handled input routing, often relying on the model and view to help. Today most GUI frameworks have standardized input routing using a standard tree of controls and so the controls are both more opaque and harder to repackage. Details: Smalltalk was built as an object "world" where the overall system was a set of classes and derived classes. There were no operating system calls or GUI libraries. Instead there were base classes that implemented a specific pattern: MVC. The view was literally a set of drawing instructions. Composition of multiple components was handled by having custom views that would recursively render their children. The built-in views had a relatively limited set of declarative layouts. In other words, there was a lot of code in the views. The first signs of change in GUI design were in this area where views and layouts became declarative. Notably Dialog Box files in Windows and of course HTML. The controller was responsible for routing input. When an input event was received from the user (notably the mouse and keyboard) the top level controller would decide what to do with it. Often this was done by hit-testing on child views and forwarding the event on. Hit-testing wasn't some magic black box or system function. It was a method on the view that the controller called with the coordinates of the event. This would recurse until one of the controllers decided to handle it. Clicking on an input control, for example, would ask for keyboard focus (more on this below) and set the location of the cursor. To most GUI or browser developers that seems like an anachronism. The "system" does it all for you upfront. Modern GUI frameworks have built a standard view tree architecture and do a single hit-testing pass based on the mouse coordinates and some notion of visibility. This determines the "target view" (which in many frameworks gets called the source element to be consistent with internally generated events). There are several problems with this approach but for the most part it works well enough. The problem is that implementing something like mouse capture is almost impossible if the GUI has already routed the event to the smallest inner-most visible view. GUI frameworks have resolved by having a magical top level capture system and/or using tunnel / bubble event routing that gives every element in target element's hierarchy a crack at the event. That this is a little confusing is one of the reasons why I don't like this approach. Keyboard events are routed the same way. The top level controller gets the event and uses internal state to decide what to do with that event and to which child it should forward it. It's perfectly possible for a controller to multi-cast the event to all of its children if wants. Again, modern GUI frameworks bypass the controller and have a global notion of keyboard focus to which keyboard events are automatically sent. Again this causes problems for things like keyboard shortcuts and accelerators (see [TranslateAccelerator](http://msdn.microsoft.com/en-us/library/windows/desktop/ms646373\(v=vs.85\).aspx) and my recent [comment](http://www.reddit.com/r/javascript/comments/1vwqu0/javascript_generators_first_impressions/cewt01a) about message pumps for why this is a nightmare. In Smalltalk an application GUI was built by deriving subclasses from the existing models, views and controllers. Want to create your own input (e.g. a tagit like input)? You're going to end up using a triad of classes that combined to create the system input or rolling your own equivalent. Modern GUIs package up a lot of MVC into a "control" like an input or button. You'd be amazed at how much model state and controller logic there is in a a simple button. This makes it easy to just use a button instance but harder to create an extended button class. Instead we extend each button (onclick=) to add new behaviour. Unsurprisingly this doesn't make it easy to extend the button's internal model state. It will be very interesting to see how the forthcoming [HTML Web components](http://www.w3.org/TR/components-intro/) change how we think about MVC. So the modern GUI tends to be built on top of a single, hard-wired input routing system and a set of built-in model-controller-view packages called controls (or elements). In most cases the model part of the control is locked inside the package and difficult to extend. Instead we have bridge solutions like angular's databinding that synchronize between the control's model and your application's model. Now when one thinks about Javascript frameworks it helps to remember that they are a layer on top of a declarative MVC framework called HTML. Javascript views emit HTML and do no hit-testing. Controllers do no real input routing but are really just glue between external models and control events. OK, this is already a long and very geeky post. I'll be happy to provide more if the interest is there.
First and foremost, console.log is your friend. When you hit these kinds of issues as a beginner it helps to console out your variables to ensure they are populated with the expected values. Next, you have variables being referenced with "$" prefixes when the local function variables do not. For example: "$wrapperwidth", your local function variable name is actually just "wrapperwidth", you'll need to pick one name to use. The same for "contentdiv" and "$contentdiv". Finally, you have your load calling: "" + href + " #content" which is going to cause you to have problems, I think what you really want is: $(contentdiv).load(href + "#content);
This. See my other [comment](http://www.reddit.com/r/javascript/comments/1wa77g/why_is_mvc_favoured_so_much_amongst_the/cf0ckni) in this discussion. MVC ain't what she used to be. In fact, there's remarkably little in common between the original MVC pattern and the many forms we use today. 
Insomuch as HTTP controllers are responsible for routing input (the request) and choosing which view to render I believe that today's HTTP MVC frameworks have more in common with the original Smalltalk MVC pattern than current GUIs do. Modern MVC has changed a lot because of how GUI frameworks have centralized input routing and packaged up controls (which combine a fixed triad of Model, View and Controller).
I don't understand why people try to improve readability of testing code by making up syntax not a single developer is familiar with and effectively achieve code that is completely and utterly incomprehensible. What's the problem with just using standard Javascript syntax and comment your code properly? The people who write the test code are usually also the same people who write the main code base, which happens to be standard Javascript as well, why make matters more complicated?
Non-free: $1350 for a license for 250 internal users, $2795 for unlimited users. For that much fucking money I could eat for a year.
Pretty much yeah!
I'm not even trolling, I obviously know how to do hello world... I'm just trying to figure out javascript's quirks!
Learning. No point? 
You may want to have a look at: http://collaboradev.com/2007/05/09/javascript-execute-scope/ This will help get you up to speed.
A lot of languages simply wouldn't allow this kind of behavior, and it interests me! 
&gt;When its clicked, it loads e new page that shows the contacts, BUT now the name of the button has changed to HOME. If i'm understanding you correctly: home.html would include something like this at some point: &lt;form action="/contact.html" method="GET"&gt; &lt;input type="submit" value="CONTACT" /&gt; &lt;/form&gt; contact.html has this somewhere: &lt;form action="/home.html" method="GET"&gt; &lt;input type="submit" value="HOME" /&gt; &lt;/form&gt; But I have no idea what this has to do with javascript
I like to limit the scope to keep things tidy. The [rule of three](http://en.wikipedia.org/wiki/Rule_of_three_\(computer_programming\)) (and sometimes two) overrides this though.
#####&amp;#009; ######&amp;#009; ####&amp;#009; *Here's a bit from linked Wikipedia article about* [***Rule of three (computer programming)***](http://en.wikipedia.org/wiki/Rule%20of%20three%20(computer%20programming\)) : --- &gt; &gt;**Rule of three** is a code refactoring rule of thumb to decide when a replicated piece of code should be replaced by a new procedure. It states that the code can be copied once, but that when the same code is used three times, it should be extracted into a new procedure. The rule was introduced by Martin Fowler in Refactoring and attributed to Don Roberts. &gt;Duplication in programming is a bad practice because it makes the code harder to maintain. Triplication is worse because it makes it harder yet. When the rule encoded in a replicated piece of code changes, whoever maintains the code will have to change it in all places correctly. This process is error-prone and often leads to problems. If the code exists in only one place, then it can be easily changed there. This rule is typically only applied to a small number of lines of code, or even single lines of code[citation needed]. For example, if a program calls a function, and then calls it again when it fails, it is acceptable to ... `(Truncated at 1000 characters)` &gt; --- ^Interesting: [^Don't ^repeat ^yourself](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself) ^| [^Rule ^of ^three](http://en.wikipedia.org/wiki/Planescape) ^| [^Computer ^science](http://en.wikipedia.org/wiki/Computer_science) ^| [^Prototype](http://en.wikipedia.org/wiki/Prototype) [^(about)](http://www.reddit.com/r/autowikibot/wiki/index) ^| *^(/u/boomerangotan can reply with 'delete'. Will delete if comment's score is -1 or less.)* ^| ^[Summon](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
This is silly. It's no harder to debug an anonymous function than a named one. Yeah, obviously you should follow the DRY principle, but three separate statements for a single use callback is more verbose than an anonymous function. The single statement is not hard to read at all. 
Excellent and well written response. Could not have done it better myself. 
This is exactly what I was talking about in the [comment thread for the latest jQuery release](http://www.reddit.com/r/javascript/comments/1w1k9r/jquery_111_and_21_released/cexxusk). jQuery claims they support AMD, but they fail to adhere to the principle of module encapsulation. Globals a shouldn't be leaked for this exact reason.
I can think of 2 combined reasons: 1. You only need to be able to express a very small subset of standard functionality and, 2. Standard notation make expressing that small subset unnecessarily verbose.
Yes, or hire a good programmer for a week or less. When you buy something like this, you're essentially buying thousands of man-hours of thoughtfulness in order to make sure things like drawing, link logic, undo management, layouts, model state etc is all well done and considered, so your own programmers don't have to plan, consider and refine all those things. If you paid your own programmers to do it, $1350 might pay for a week of work. They wouldn't be past the planning stages, never-mind just implementing the layouts alone involved (Tree layout, Layered Digraph, Force-directed, etc). Companies pay prices like this because, if they need the functionality, it *saves them money.*
I agree. This is daft, anon functions are a great feature of JavaScript 
Find a new way to learn or no one will ever want to work on a project with you. 
console.log("hello world");
I'm not learning to actually use this in any actual scenario, it's just interesting.. I don't see why everybody is acting like I wished death upon them..
Seriously. This place is starting to turn into Hacker News with the way people love to come into comment threads and absolutely shit on project creators. It's disturbing to watch. If you don't like it, don't use the fucking thing. If you have something constructive to say, say it. If not, move on.
Care to elaborate?
The very first software design principle I learned on the job was "Don't mix data with its presentation." This was way before MVC became such a ubiquitous design pattern, but "MVC" feels like shorthand for expressing that idea. No one can quite agree on how MVC should be done, but the common thread is always the principle that data ought to be separate from its presentation. MVC seems to be everywhere because that is about the most universally relevant and applicable principle in software design. It comes up any time you need to manipulate and output data, which is more or less what programs do.
Thanks for all the corrections.
It's simple `pure-cjs -i sample/a.js -m -e window.A`.
One of the first things I ever built in MVC fashion was an interactive spline editor written in Digitalk's Smalltalk/V. This was long before web apps existed.
It can be dangerous just simply saying: "remove comments"... I tend to remove comments when I think my code is legible enough to prompt their removal. Normally, I tend to skip comments when reading source because they can be out of date, wrong, or don't match the condition in the last revision of the development summary. I know it's not politically correct to suggest that clean code is code without comments, but I consider comments "smell". If I have to put something in with my code that has to explain my code... I need to refactor it or think about it in another way so that the person following along knows what's going on. If they have to read the cliff notes, I've done something wrong. Browsing my code, you'll find a comment here and there, but I tend to use them on special cases where a more optimal (to read) solution is not prudent or the algorithm does some "interesting" things. (ie: bit shifting, et al) But for the most part, method/object/variable naming and proper use of techniques can deprecate a good portion of the comments I see on a daily basis. Everyone always says to comment when you need to answer a 'why' question (opposed to a 'what') and I think that is a good start. Most of the time, I don't find it necessary to put a 'why' answer in, but there are a few.
And what's the problem with that? I mean I guess he could have named it toggleMenuCallback or something, but what's wrong with writing a function that expects an event?
What frameworks are you using? Every good framework is opinionated and each opinionated software has somewhat different ideas about how things are accomplished, which is why they were created. They each have their strengths in different environments. MVC and MVVM need to be considered with these facts in mind. MVC with ASP.Net and MVC with ObjectiveC are different beasts. They each use the same terminology, but the syntax, frameworks, and pipelines are significantly different, which results in significantly different code structures. AFAIK, the ViewModel, Controller, Presenter are basically interchangeable as they each are concerned with interacting with models and views and attempt to accomplish roughly the same thing: display data. 
"Hipster"? "[Spacedrum](https://en.wikipedia.org/wiki/Hang_(instrument\))"? Neat page, kinda jerkish title. 
Follow the angular tutorial on the angular site. You build a phone gallery step by step with full unit testing and end to end testing through both of these packages
that's how my friends referred to, so I liked to use here :) This instrument has a lot of names, spacedrum is one of them.
Thank you. Changes I made: * referenced separate file using &lt;script src="script.js"&gt;&lt;/script&gt; * made function names match Nothing happens now when I click the "Submit" button. I'm curious if this is because CodeCademy just isn't programmed to display what I'm trying? Or should it in theory execute anything I plug in? Edit: problem solved. I had written "form" instead of "input." Woot, bug fixan! Thanks again. *function formResults(){ var formAge = parseInt(***input***.ageInputBox.value,10); if (isNaN(formAge)){ alert("please input a number") } else{ alert("You typed: " + formAge); } }* 
Thank you. Changes I made: * referenced separate file using &lt;script src="script.js"&gt;&lt;/script&gt; * made function names match Nothing happens now when I click the "Submit" button. I'm curious if this is because CodeCademy just isn't programmed to display what I'm trying? Or should it in theory execute anything I plug in? Edit: problem solved. I had written "form" instead of "input." Woot, bug fixan! Thanks again. *function formResults(){ var formAge = parseInt(***input***.ageInputBox.value,10); if (isNaN(formAge)){ alert("please input a number") } else{ alert("You typed: " + formAge); } }*
Haha... sorry friend, it seems as though we've found our hipster, and it's you!
My understanding is clean MVC is where controllers control events, models control data logic (ergo validation) and views are in charge of rendering (be it a models data or not) and delegate events up to controllers for handling, or more traditionally, controllers have listeners.
As a heads up, [Angular is switching](http://docs.angularjs.org/guide/dev_guide.e2e-testing) to [Protractor](https://github.com/angular/protractor) for E2E testing in the "near future". Might want to tackle that instead.
In ES6 you can write `[0, 1, 2, 3, 4, 5].filter((x) =&gt; x &gt;= 4)`, which is almost as short and has the advantage of avoiding eval.
Thank you, I just came across this. 
2 characters shorter: [0, 1, 2, 3, 4, 5].filter(x =&gt; x &gt;= 4)
As near as I can tell, your code says "Yay! Thanks for loading that content for me, I appreciate it. Now, [remove all elements](http://api.jquery.com/empty/) from that video. Thanks so much." Of course, I don't actually know lightbox, so this might be the correct behavior, but why are you clearing the content in afterload? Have you tried *not* doing that?
That's the callback for after you close the lightbox. This is a race condition, like I mentioned before. Sometimes it works, sometimes it doesn't depending on how quickly that load statement takes.
According to [the documentation](http://fancyapps.com/fancybox/#docs), `afterLoad` is called "after content is loaded". The callbacks for closing the lightbox are `beforeClose` and `afterClose`. I don't know fancybox either, but are you *sure* you're using the right callbacks?
http://staging.tm.com/work/ Click on any of the wide videos at the top of that page.
Yeah, that's not what's happening. There's no way in hell there is a race condition between "called when the content is loaded" and "called when the lightbox is closed." The only possible race condition could occur is if they both get called at almost the same millisecond. Those are both firing waaaay before the lightbox is closed. If you remove that afterLoad and it still has a problem (related to this code only), I will eat my hat.
Right, I get that. What I'm suspecting is that the lightbox is taking a measurement of the div that's empty in the time that it's attempting to load content in. As you can tell, when you click on one of the videos in that link I posted, it loads up but is cropped. If the video gets there quick enough though, it'll show at the right size.
Huh? he's asking about Karma, not E2E test suites.
Karma is a test runner. It can help you run unit tests through a variety of different browsers. Typically I like to use Karma with PhantomJS (a headless browser, there is no view). This lets you run tests continuously as you make changes to your code without having to have a browser window open dedicated to running tests.
Browserify doesn't actually do much at runtime — just amount of work similar to what this lib does.
I'll also take general critiquing. I know it's not done yet, and doesn't error-check to make sure that all dots are filled in from left to right. Those are "after it's working" features, but their lack may make this "legal" (I'm not sure if White Wolf will allow this to be published as-is).
What you should be considering is that you're going behind the back of your API and loading a different content into the box instead of what it expected. Did you know that [.load()](http://api.jquery.com/load/) takes a callback that will be executed once that content is loaded? Did you know that fancybox has an [.update()](http://fancyapps.com/fancybox/) method to resize the box to its contents? You need to add a callback to the load call to tell fancybox to update the container's size. http://imgur.com/pwozb11 
Here is a hint, *sunshine*: **business logic goes in the Model layer**. Controller's responsibility in MVC architectural pattern is to take user input and, based on it, alter the state of model layer (and in rare cases - current view).
[You want to be compensated for your time!?!?!?!](http://i.imgur.com/OH6rN7v.gif) 
I patched jQuery for this purpose and removed the export to the window object and changed the AMD module name from jQuery to jquery. Now I can run two versions, one on the page that was included by the publisher and my own loaded via RequireJS.
I used to refer to server-side MVC as web-MVC, but now that there is real MVC (variants) being used on the web client, that becomes unclear as well. Also, get off my lawn! 
Like it. But performs badly on my iPhone 5
We use these at Facebook via [jstransform](https://github.com/facebook/jstransform) and they're wonderful. Really helps with readability, especially for map, filter and forEach calls. jstransform is part of the build process and just converts them to standard function syntax so there's no runtime performance cost (compared to using eval() like the OP's library). Traceur compiler by Google is similar but covers a lot more stuff too. A really nice thing with these arrow functions is that 'this' is bound, so you don't have to write ".bind(this)" or keep a reference in a temporary variable (var self = this). jstransform only puts the .bind call if you actually use 'this' in the lambda. 
I just wanna say, this is awesome, and I definitely will be reading more into this tomorrow.
To answer both of you, sort of: I included comments as a learning method for me. I'm still an absolute beginner and forcing myself to write out the comments is another way to ensure I understand what's going on and why. Sort of like writing from a text book in class.
Thank you for this super in depth reply! I think the code you've used could be slightly above my skill level as of yet but I love how clean and simple it is, this is what I strive to be able to do. The way you write is also great, it makes me feel like you're talking at my level without being condescending. If you have a blog, I'd love to read it.
Thanks for this. This looks really nice, once I've finished my morning coffee I'm going to dive in and examine it all.
I think you're trying to equate MVC on the server with MVC on the client. I've seen lots of PHP MVC frameworks and I think they do not implement the MVC pattern. Server apps are not statefull in the sense that once the response is sent to the client the connection between the user (the browser) and the app is lost. MVC requires a continued relation between the user and the app; the app watches for user interaction and responds accordingly. On server there are no "views"' that take user input and passes it to the controller or watch for an item being clicked and update its content. On the server the user makes a request and waits for a response. The fact that server-side frameworks use terms like "controller" and "views" does not mean they properly implement the MVC pattern.
hahaha, thanks anyway :)
oh, thanks for reporting it! I will check it at windows, I've been testing only on mac :(
It looks like you've got a large ish client side project with a REST API, and a project in need of a proper MVC architecture. I'd look a bit further than browserify and consider the likes of Backbone and maybe even Ember. The learning curve with Ember can be difficult but in return you could end up with binding to your HTML when your data changes, backbone doesn't have this. If you chose Ember you could also consider creating your own REST adapter based on theirs which could do some interesting stuff like honour the caching and store it in local storage (although doing this server side may be a better option). TL;DR I'd highly avoid rolling your own solution with jquery and other similar frameworks, it's definitely worth using a MVC framework. 
But you can't reuse that function, so it's not "simply do this". You're missing the point of the entire article.
That it's not abstract enough so you can send only an element and a class. And if the the function is a method of another class that needs others siblings methods, you are breaking the context. 
a little vague on the cost of this or if it costs at all, iv a feeling that those wishing to pay will be picked first. 
An interesting little project, but you probably shouldn't use it for anything serious _unless_ its getting converted to real functions as part of a build script. For me, if you are just looking for more readability, try something like coffeescript where you can get about the same terseness sans-plugin. 
I used to feel the same way. I worked on WPF architecture in the early days (when it was called Avalon) and gained a deep appreciation for how modern GUI frameworks really aren't MVC. MVVM is a better description but it's inadequate because a lot has to do with how one extends the framework components. The difference between Smalltalk and modern frameworks is huge. A Smalltalk GUI was built of a triad of tightly coupled classes (Model, View, Controller) which were extensible through class derivation. A modern GUI is built using a family of very tightly coupled components (aka controls) which are extensible though event handlers. If you look at a Rails MVC, it looks more like the Smalltalk model. There are Model, View and Controller base classes and the application developer derives from those classes. Inside a modern GUI framework component (e.g. an input control) is a Smalltalk like relationship of MVC. An input control has a controller that processes input events, asks the view for information about coordinates and updates an internal model (cursor / selection location, current text). So why did the purer form of MVC find life in web frameworks but not in GUI frameworks? I think it comes down to two reasons. 1. Performance. Hit-testing and event routing the Smalltalk way hits a lot of classes even when they are going to default to the base class implementation. This has very bad memory locality behaviour. A tree walk of homogeneous view nodes by a single hit-testing function is always going to be faster. 2. Component re-use. It's a lot easier to drop an input control or a listbox control into a form than it is to derive 3 classes from their bases. This started with GUIs like Windows but became even more prevalent with VB and HTML. However, as I said above, many of those lower level components exhibit very MVC internals.
Well I am using bluebird for managing my async code and sorry, this syntax just looks too weird and I dare to say too verbose. I will stick to promises until ES6 generators arrive.
Promises will be available in ES6 as well, as far as I know Chrome Canary has already implemented them, so you can start using them now. About the example, why can't the example be rewritten as: Promise.all([loadPenguinFather, loadPenguinMother], function(father, mother) { // build family using father and mother variables }); I just fail to see the big difference between a classical Promise (and promises are very valuable when chaining), and the library above. Initially I thought I was going to see this: var fileContents = file.read('some URL in here'); // fileContents available here... 
I've been working on this for a few months now and use it for personal use everyday. I'd be interested to see what others think. Further, it is far from a fully production ready version. However, I'd be interested in seeing what features would be useful to add.
If you want to play with ES6 syntax right now, you can use Plunker (http://plnkr.co/edit/). It will translate files with the .es6.js suffix into es5 using traceur-compiler in the background. Demo: http://plnkr.co/edit/ET8zfy7uVYif1JlGFNV5?p=preview
Just plonk in a 'return;' where you want the function to exit. 
That's even better, thanks for the tip!
&gt; there's no runtime performance cost (compared to using eval() like the OP's library) If you do use a library like this in production, it can be an enormous help to cache the generated functions. They aren't associated with closures,* so you aren't caching every invocation of the function, just each unique function generated from a string. (\* Yes, yes, any function that binds all of the variables it uses is a trivial closure. But we both know that in JS parlance, a closure is a function that closes over at least one variable inherited from its lexical scope.) 
I like it. I tried adding a new feed and it didn't actually do anything, but maybe that's not working yet.
These are baked into [allong.es](http://allong.es). Any library function that takes a function as a parameter can also take a string: var doubleAll = mapWith('+ 1'); doubleAll([1, 2, 3]) //=&gt; [2, 4, 6]
I hope people only use this to "play"... it takes one line of code and turns it into 2021 lines... http://run.plnkr.co/wFmpNcOacfvwxXyz/script.js when all it needed was: document.write([0, 1, 2, 3, 4, 5].filter(function(x) { return x &gt;= 4; })); For IE9 and up. A Simple polyfill for IE8 and prior shouldn't be 2000 lines.
I have never used Ember but it looks very interesting, i especially like the idea of their Handlebar templates. I'll definitely look into it, thanks!
The point of anonymous functions is typically because you only need the function once. If you are binding identical functions to multiple events, you should have them share a handler instead. The author lists 7 bullet points as to why you should "never" use anonymous functions, and I think by naming them it takes care of most of his reasons. 
Also, i will addd: undestanding and asynchrnous code. Use of promises, flow libraries like https://github.com/kriskowal/q , https://github.com/caolan/async or even better harvests: https://github.com/salboaie/harvests
ES6 is the [Adam Osbourne](https://en.wikipedia.org/wiki/Osborne_effect) of programming languages.
#####&amp;#009; ######&amp;#009; ####&amp;#009; *Here's a bit from linked Wikipedia article about* [***Osborne effect***](http://en.wikipedia.org/wiki/Osborne%20effect) : --- &gt;The **Osborne effect** is a term referring to the unintended consequences of a company pre-announcement made either unaware of the risks involved or when the timing is misjudged, which ends up having a negative impact on the sales of the current product. This is often the case when a product is announced too long before its actual availability. This has the immediate effect of customers canceling or deferring orders for the current product, knowing that it will soon be obsolete, and any unexpected delays often means the new product comes to be perceived as vaporware, damaging the company's credibility and profitability. &gt; --- ^Interesting: [^Osborne ^Computer ^Corporation](http://en.wikipedia.org/wiki/Osborne_Computer_Corporation) ^| [^Adam ^Osborne](http://en.wikipedia.org/wiki/Adam_Osborne) ^| [^Osborne ^1](http://en.wikipedia.org/wiki/Osborne_1) ^| [^Self-defeating ^prophecy](http://en.wikipedia.org/wiki/Self-defeating_prophecy) [^(about)](http://www.reddit.com/r/autowikibot/wiki/index) ^| *^(/u/homoiconic can reply with 'delete'. Will delete if comment's score is -1 or less.)* ^| ^[Summon](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
That's fixed overhead. It doesn't add 2000 lines per lambda.
I'm making my way through it. There is definitely some good info in there if you have a moderate grasp of JS, but aren't 100% on the more advanced concepts. So I'd rate it a buy.
Actually is quite similar with your code: harvest.let("myFileContent", fs.readFile, "./fileTest.js" , {encoding:'utf8'} ); harvest.do(console.log, wait("myFileContent")); encoding stuff, is from node.js ;)
Synchronous code for my example would be: father = loadPenguin('MrPenguin'); mother = loadPenguin('MrsPenguin'); family = loadPenguinFamily(father, mother); *compare with:* harvest.let('father', loadPenguin, 'MrPenguin'); harvest.let('mother', loadPenguin, 'MrsPenguin'); harvest.let('family', loadPenguinFamily, wait('father'), wait('mother')); For me is almost the same, much better compared with chaining things using when, wrapping callbacks in promises, etc . Sure, you add those let calls, put some waits and parentheses moved a bit. Something should change, obviously the code can't be identical with synchronous code. **Comparing with promises, we manage to maintain the same number of statements and you can read the code line by line as usual.**
The syntax is a bit like calling functions in lisp... but only on a single level of parentheses ;) Could you rewrite the penguin examples using ES6 generators? 
ES6 isn't here. For most intents and purposes, it won't be here for at least 5 years, given how long legacy browsers are supported by most companies. Yeah, eval, whatevs, your ray-tracing algorithm will be perceivably slower if you use it. BTW, why are you implementing a ray-tracing algorithm in JavaScript?
Read the edit in the post...sorry for wasting your time :) So i tried this, and it still returns 0, which is odd, because that's what it's supposed to be when it's not loaded, which is impossible, because to activate it you have to click on the picture. I think i do have an idea though. Does the size of the image return 0 when an image is invisible?
Single letter variables are not horrible because they are a single letter. They are horrible because they do nothing to describe their purpose. This does nothing to counteract that.
&gt; I know I shouldn't judge a book by its cover, but... Conversely, if the book manages to include a mistake *before you've even opened it*, it's probably safe to assume you shouldn't trust everything you read in it. ;-p
Of the 5 words in the title, 2 set off my BS detector. That's not a good start.
Perhaps, but multi-letter words are easier to parse and recognize. 
I agree with you that a framework is needed. I am just disappointed that you failed to mention the best MV* framework-Angular. Really nothing else even comes close. Checkout angular-seed or yeoman.
I somewhat agree, but where this could come in handy is if you need to reverse engineer some minified code and want to replace variable names as you go. Search and replace doesn't work very well on single letter variables as you'll search for 'a' and replace a bunch of unwanted stuff. Having a tool that creates unique var names with scoping taken into account seems somewhat more useful as you'd be able to properly rename those variables. Though, a JavaScript IDE with refactoring features would be able to handle this entire process more smoothly, I guess.
Not to rain on the parade but to me, "parameter1" is no different from "a". It's much easier to just to use source maps.
Yes. It would be neat if they could do something like Resharper, which (during a Rename refactoring) tries to suggest names for variables that take into account how it is assigned or used. So, for example, if the only time a variable is read from is to pass it into a function, a good name for that variable might be the corresponding parameter name. That sort of thing.
This is something that [jstransform](https://github.com/facebook/jstransform) does differently. It's only focused on transformation of code, and the [arrow syntax transform](https://github.com/facebook/jstransform/blob/master/visitors/es6-arrow-function-visitors.js) is trivial. Traceur compiler is focused on a LOT more and needs associated JavaScript code for the more advanced functionality.
&gt;It's much easier to just to use source maps. That assumes you have access to the original source code.
With minified code the single-letter identifiers are not only meaningless but usually reused in many unrelated scopes. This will disambiguate them, which is a start.
Specific examples of why angular directives are better?
Insert the output from this script in the email. #!/bin/bash echo $RANDOM Also, why is "Google" in the title?
I'm not sure if the readers here want job postings or not, but as a moderator here I'd like to know how readers feel about that... technically reddit does have /r/forhire and you should definitely post here - I feel the community should decide if they want to see javascript specific requests here or not. I'd throw my hat into the ring but unless you're looking for something that doesn't start for at least several weeks, I'm just too busy to take anything new on.
Congrats! :D
This approach kind of breaks down when you need to create lots of async calls. You'd have to give them all a name and then apply `harvest.do` with lots of `HarvestWaitingVariable` objects created with the correct name. If there's a collision you're screwed. You can code around these problems, but in the end you'll want to be able to have anonymous objects abstracting away the pending results of an asynchronous function call. And you want to be able to pass these things around without having to pass around the object that maintains the name - result associations with it so that the receiver is able to read the results. Let's take your example and just act like we just don't have any names harvest.let(fs.readFile, "./fileTest.js" , {encoding:'utf8'} ); harvest.do(console.log, wait()); Of course the wait function now cannot do anything. It has nothing to wait for. So let's imagine `harvest.let` would now internally generate a unique ID and return a `HarvestWaitingVariable` immediately on invocation. var testFile = harvest.let(fs.readFile, "./fileTest.js" , {encoding:'utf8'} ); harvest.do(console.log); But now what the hell are we going to do with `harvest.do`? Well, we can just make it a method of the `HarvestWaitingVariable`. var testFile = harvest.let(fs.readFile, "./fileTest.js" , {encoding:'utf8'} ); testFile.do(console.log); Now let's just rename some variables var testFile = Promise.promisify(fs.readFile, "./fileTest.js" , {encoding:'utf8'} ); testFile.then(console.log) Voilà, we just refactored your code into a Promise implementation. As you can see, both approaches are fundamentally similar. The people who came up with Promises simply went one step further and realized: "Hey, those names would be really quite a pain to maintain. Let's get rid of them".
So people are taking a stab at microformats again? *snort*
yep thats what i figured.
No, but it makes it easy to pronounce. Speech plays a huge role on how we associate concepts to things. If we can't pronounce it, we have a hard time thinking about it.
I may be misunderstanding what you mean, but I believe the basic handlebars example shown on http://emberjs.com/ under "Auto-Updating Handlebars Templates" does exactly what you said it can't do? Unless you mean you can't have and expression (Like post.created_at - now() or something) in a handlebars template? Also, I find it interesting that you can say with surety that angular is better when you say you don't know about about ember...
You can use `document.getElementsByClassName(className)`and then loop through the returned list, and call `Hammer` and the other function for each element in turn in a loop.
Anyone know a good library that makes web workers cleaner to work with by abstracting away the creation/termination etc.? Sort of like https://news.ycombinator.com/item?id=7126745 for JS? Would be nice if Coffee had an ObjC like ^ block syntax that ran in a web worker. Or channels like Go. I'm tired of handling workers manually like threads. Some links I came across while digging in: * http://jsfiddle.net/bgrins/YUKSu/ * http://stackoverflow.com/questions/5408406/web-workers-without-a-separate-javascript-file 
if the element is the only item on the page just use a fucking ID, im struggling to understand this hatred to ID's lately in the community 
*shrug* dunno, haven't looked at it. Maybe some one should propose it to the author.
I can see that you're not even remotely interested in [making any profit out of it](http://i.imgur.com/UiPfhvk.png). The functionality is great, but the design seems to be a little heavy (using the border too much?).
Try testing it with http://jsperf.com/
might be better to make a getValue rather than access the value directly. I don't think you'll see much of a problem with performance either way. The big problem I have here is that you're checking a value of counter where counter should probably have an "isDone" method to check to see if it's done. If you know you want to count 100 time, then just count to 100 with a number, otherwise you should trust the counter to know how to count.
The modulo would be better performant and less memory intensive... but doing it your way, you can encapsulate some of the processing and logic so your loop wouldn't need to care about the progress bar logic.
http://catilinejs.com
Maybe if you have less than 10 variables in your entire program, but I would find words much more memorable than letters.
This should be an enforceable rule really. Nobody wants to read dozens of lines of irrelevant, haphazardly formatted code mashed into the post itself.
In backbone: View is actually a controller and templates in HTML/CSS are the view layer. Confusing naming..
It might not work *well*, but it would work *better*. When I do a search-replace like this I'll often do it one at a time (just spamming enter pretty much) which would catch any possible text occurences. This would make that process nicer on minified code. However, I cannot really imagine myself ever wanting (or remembering) to use this.
P.S.: the title should have been demo #2—oh, well.
Keep it up! I like your enthusiasm sir. You have barely scratched the surface. I look forward to seeing what excites you a year from now.
Oh come on, you are just grasping at straws with that. Even IF a random word happens to be found in text, you click the next button and move on, that is not even close to a fair comparison to trying to find all variables with the letter 'a'
Am I the only one that sees prerender.io as a half step. The only ones who have it right are React who are creating a way (in-house) to render these pages on the server first and display them the way sir Berners-Lee intended... with HTML. 
Maybe the ads are coming from the feeds?
var hammers = document.getElementsByClassName("hammer-pinch-1") , stop = hammers.length , index; for (index = 0; index &lt; stop; index++){ hammers.on(......, function(env) { //find second pinch element }
It would be a much better state of affairs if Javascript directly supported a proper threading system with mutexes etc. 
XML is just a formatted string until it is converted into an object. I believe the idea is that Workers themselves aren't particularly heavy objects and should be used for a particular sub-task instead of a way of having multiple full-stack threads.
What specifically do you need help with? 
&gt;Single letter variables **that repeat everywhere in the code** are **~~not~~** horrible because they are a single letter **that repeats everywhere**. &gt;This does **~~nothing to~~** counteract that **because now you can clearly see actual dependencies in the code instead of guessing which variables are in scope**. FTFY edit: formatting.
Will that drop me out of the whole sequence, or just end the current function? edit: nevermind, got it figured.
JS is a pretty huge topic with a lot of frameworks and libraries and styles depending on what you want to do. What is your project? If you give some more specific information, people can guide you in the right direction.
If you just want to do a cursory check there is a cookie all logged in users are assigned. I can't remember it's name off the top of my head, but you could just check for that before delivering the html page. 
Yup, I noticed that. I'm going to go ahead and just use my base test. Using an object seemed more elegant, but I don't think it's worth it given the performance hit.
This feature was working, but I recently broke it. I'll be fixing it shortly. Also, I want to add direct addition of urls rather than just searching.
This could be an option in the future. However, this project arose out of a desire for a highly configurable rss reader that is readable on both a desktop and on mobile. It is more of a hobby project than anything.
See ToffeeScript
 var mottoes = [ "the red dog jumps over the hill", "the blue cat jumps over the fence", "the green cow jumps over the tree", ]; var motto = mottoes[Math.floor((Math.random() * mottoes.length))]; alert(motto);
It is pretty easy to do. Here is an implementation of a one time only promise worker function that takes both a uri or anonymous function: https://github.com/eborden/Keep-Your-Promises/blob/master/extras/promiseWorker.js
Messaging between workers that do not share explicit state is a far more elegant solution for JavaScript's use case.
\#! and escaped_fragment are you fucking serious?
If you were so inclined, you could load some text into something like my [jsmegahal](https://github.com/seiyria/jsmegahal) library. If it's backed by a large enough database (or however you choose to store this data), it can be pretty nice.
Thanks brother. 
Or even, using [sugar.js](http://sugarjs.com/api/Array/sample) if you're so inclined... var color = ['red', 'blue', 'green'].sample(), animal = ['dog', 'cat', 'cow'].sample(), thing = ['hill', 'fence', 'tree'].sample(); alert('the ' + color + ' ' + animal + ' jumps over the ' + thing);
What is your preferred lambda syntax? Just curious..?
Yeah, I need this. I need to display the one sentence with the various words changing each time, like the old theyfightcrime website.
To answer your last question first: * http://jsfiddle.net/ * http://codepen.io/ * http://jsbin.com/ To answer your first question second... actually, first another question, is this for a homework assignment?
I saw sugar when it first came out, but never did read into it. After a quick look, I can see how nice that can be. There's also an NPM for it. Hmmm.
Not familiar with that website?
No problem, good luck!
If anyone is interested, I wrote a worker library a while back but lost interest in it. Thought somebody might find it useful here though... https://github.com/arei/Threadful. Comments and suggestions always welcome.
I can see their point of view of wanting to create a self-contained module, since it could be a confusing for someone not seeing that another library was included, but if you have a good IDE, it should be able to track down the information / docs need to figure out what it does. Of course one could come up with a test of prototypes vs self-contained module on JSPERF to see if there's any benefit to the end user. No sure which one win the speed test, of if both would be the same.
this is simple, if you know html and js. If you are a newbie i suggest using jquery, as it has easy options to grab input from elements. 
`element.val()` vs. `element.value`... I'd argue that vanilla is easier there... 
It seems to be completely unusable on Android. Aloha worked OK, so do NicEdit and TinyMce.
Best for reverse engineering. Minified codes will definitely be easier to understand with this.Atleast better than nothing. 
see https://github.com/farfromunique/vampirrePoints/issues/4 for how I solved the problem.
Well, I believe webstorm is a subset of IntelliJ? Not sure, I use PyCharm and PhpStorm and both incorporate webstorm functionality. Further, maybe checkout Sublime Text 2. It's almost the same price as PhpStorm or PyCharm but it does have an indefinite free trial if you can get past the nag screens. Sublime Text has some great plugins, Sublime Linter comes to mind, that will lint your js files with every save.
You need the ultimate version to get code intelligence for javascript. If that costs too much you can always try Eclipse or sublime text.
I agree that react has it right, but too say only them! I have been arguing this list silly for 2 years about pre-rendering. Use mustache, soy or anything that allows you to render on your server layer, but just do it.
This is interesting. We use html5 history when it is available and fall back to fragments when it is not for in app redirects. Obviously fragments mean we cannot pre-render properly, but a large chunk of modern browsers have the html5 history object available.
Best case scenario: $('#month').val() vs document.getElementById('month').value Worse case scenario... fetching the value using classes... or tagname.
Somewhat off topic, but how well have you found Drupal to play nice with Angular? Ever think a fully HTML5 appcached and CDN served AngularJS frontend might be powered by a Drupal back end in the enterprise, or will the benefits (specifically for a CMS) of server constructed HTML outweigh the client-side gains of a totally decoupled deployment?
If you're working on a open source project, WebStorm is free. http://www.jetbrains.com/webstorm/buy/buy.jsp (click on the "Open Source Licence" tab).
isn't phpstorm just the same as webstorm + php? sorry, I really don't know
AFAIK There is no good code. What you think is good today will be outdated in 3 years and bad practice in 5 years. 
Very nice! I don't have any ideas myself, although I wonder if zepto.js has anything useful in it (src/event.js)? *If you haven't already read it that is.*
There are some basic principles about good code in any language that will reflect in some examples: * thy code shall be consistent * thy code shall be readable * thy code shall be self-explaining * thou shall not write duplicated code * thy code shall reflect the problem which it aims to solve * thou shall handle all data according to its context * thou shall use a configuration object to replace more than 3 arguments in a function * thou shall not assume the existence of anything in your scope For JS there are a few additional "commandments": * thou shalt not spam the global scope, but expose only what is necessary * thou shalt not try to overwrite native prototypes, unless you really know what you are doing * thou shalt not worship other kinds of object inheritance, for only the one true prototypal inheritance will grant you the object orientation you need
That reminds me of the tongue-in-cheek Perl module [Acme::Floral](//search.cpan.org/perldoc?Acme::Floral), for which the purpose is the exact opposite: *obfuscate* source code by replacing all (meaningful) variable names with names of flowers.
Look into Markov chains
As with promises you have to create something for every call... We have letAt function, you give names in an array (index) or an object member. You just do letAt in a for or other loop. When all calls returned then the whole array or object is marked as fulfilled and will trigger new calls . You consider to be better wen manage objects and not names (actually values). I see your point but still I think that with harvests I got simpler code. Instead of promises may be in a future version of JS we could have an wait keyword and statements with wait are executed only when they are ready. Much better for me but may be I'm crazy about this idea :)
https://github.com/douglascrockford/JSLint/blob/master/jslint.js
Now, in an ideal world, I would love to have a wait keyword in language and the statements with waits to be execute only when possible. I don't have a real problem with .let or .set It is entirely a matter of tastes I suppose until subtle bugs hit you:) My instinct is to avoid creating dummy objects and dummy functions (for then or do) but I know that is somehow inevitable..
We were just talking last night in ##javascript about why Underscore is certainly not an example of good code.
The editing part is based on Proper (see http://quasipartikel.at/proper/). They actually call it a issue ;-) I'm with you on that one.
Thanks, /u/smithren! Did you try on the iPad on PC?
/u/omniuni, read "I don’t have an Android device yet, and I really don’t think it would work anyway because in the code I’m still implicitly checking for iOS". It's only iOS just yet. ;-)
Paste the log?
Nope. :-) It's based on Proper, see http://quasipartikel.at/proper/ with source from here: https://github.com/nbrogi/Proper Then, there's one file that is referenced in the source code and linked in the original post. I did not put it on GitHub just yet, though. I would like to solve that bug, it's stopping me from finishing it up...
If the code applies any of the following I consider it an example of bad code: * Constructors * use of *this* outside of eventing and handlers * use of *new* outside of external APIs (attempts at polymorphism show a complete disregard to understand this language) * any use of *Object.create* * any use of *bind*, *call*, *apply* without very careful scrutiny Generally, violations of the above list tend to be from programmers coming from other languages were OOP practices are good and necessary and such practices simply cannot be abandoned in this language for emotional or religious reasons. Clean and well written code can generally be thought of in three dimensions: * Cyclomatic complexity - the measure of decisions in a given scope * breadth - the quantity of variables defined in a given scope * depth - the deepness of scope levels in a given global function Cyclomatic complexity is generally the dirties of the three and should be reduced where possible. Generally a high cyclomatic complexity is an example of sloppiness or bad code design. I have not been able to write an ASI function into a parser that achieves low cyclomatic complexity, though, and there are other examples when high complexity may be necessary. A high quantity of variables in a given scope is less a barrier to the readability or understanding than cyclomatic complexity, but is a barrier none the less. The least of the evils is certainly scope depth. Breaking apart a program into numerous structured functions may certainly solve the prior two points of confusion. It can also make a very large application easier to understand in each of its parts while simultaneously exposing the fullness of its structural complexity. A high functional depth is far cheaper to maintain than cyclomatic complexity or too many variables at a given scope, but still represents a point of complexity to maintenance. Developers unaccustomed to not seeing nested functions, particularly developers from other languages who are not familiar with JavaScript, may find such code entirely beyond understanding. The safest approach is to consider these people illiterate, so long as all other best practices are considered and this is the only actual barrier to readability. These people can be trained, if they are willing to accept their absence of education, but otherwise their ignorance does not suggest a fault of good practices or cleaner code design.
If you can show me where ##javascript logs are kept I can point to the correct date and time.
I recommend jumping right in and writing programs in the language. Struggle through it and learn it the hard way much like you would any other language or even a formal computer science education. Doing this you will learn the pain points and learn what not to do with a crystal clear precision. If you are ever required to reflect upon your early days of learning and maintain some of this code you will learn far more than any tutorial or guide could possible tell you. Experience is certainly the best teacher.
Do you have any experience with other programming languages? How much do you know about JS? [Mozilla Developer Network](https://developer.mozilla.org/en-US/) is your best resource for all standard web development stuff. Try to get the habit of adding "mdn" to your Google searches and staying away from the W3Schools results. You said jQuery, so I assume you are interested in working with web browsers. In that case, understanding the [document object model](https://developer.mozilla.org/en-US/docs/DOM) is important. It's a piece of shit, but you should know what you are dealing with. I can't recommend any entry-level guides or books, but as long as you have basic understanding of programming, I'd recommend [JavaScript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) by Douglas Crockford. It does a very good job at explaining the pitfalls and strengths of the language and can save you from a lot of frustration. What comes to jQuery, don't go in blind and start copy-pasting one line examples to your website. It can seem appealing at first, but you'll thank yourself later if you don't do it. Go for jQuery when you can pinpoint the exact reason you need it and have a basic idea of what is going on under the hood. At that point the documentation they have should be enough. Also, start various projects early, even if you don't know how to complete them yet. Learning by doing is great and the internet is full of information and people struggling with the same problems. Just remember to check MDN first, because JavaScript probably has the most bad practices and information out of any language. EDIT: Also, when you inevitably end up in [Stackoverflow](http://stackoverflow.com/), try to stick to popular threads with lots of votes and comments. If you are seeing one unaccepted answer from 2 years ago, chances are you can find much better solution by changing your search a bit and trying to use correct terminology. (unless you are working with some abandoned unpopular API, in which case it sucks to be you)
I will definitely look into it! I'll let you know if I find anything useful there. Thanks for the tip!
This is actually the first I've heard of ##JavaScript (can't really Google it) and was hoping it'd be something that has logs. General gist of why it's not good code then?
Not OP but also getting started with JS. Thanks for this response and the book recommendation!
The summary of the conversation is that somebody was frustrated that an instance of *this* bubbled up to the global scope when the appearance of the code suggested it would be trapped to the local scope. Somebody suggested this is not a fault of Underscore, but rather an architectural fault of the language. Several of us thought it was just a shitty of JS since *this* is essentially a pronoun and there is no way to tell the difference between *this* of one scope versus *this* of some high scope. My personal opinion is that Underscore is using a shit OOP architecture that is not ideal for a language with native lambdas. Several of the other opinions were similar but less extreme against general use of OOP in JS.
So using javascript as an object-oriented language?
actually our professor said that it should be javascript.. I do know basic, but the logic behind data is the biggest hurdle for me.
Isn't this the entire reason source maps are used? Edit: I didn't consider situations where you don't have access to the server and source. Sorry. Habits!
ITT: No examples of good code.
I backed this up in kickstarter https://www.kickstarter.com/projects/getify/you-dont-know-js-book-series
WebStorm is like PhpStorm but without PHP stuff. Also it comes with JSLint, JHShint and Closure Linter support built in. It can also use your `.jhsintrc` file (handy to check-in your settings, and if you also use `grunt-contrib-jshint`). It has realtime highlighting in editor, also in tasks like pre-commit. Also it's git integration is really extensive (in-editor changes, and nice diff viewer).
I continue to find David Herman's "Effective Javascript" (http://effectivejs.com/) very helpful. If you already know the basics of the language, this book is filled with more advanced and idiomatic usage. Take a look at the table of contents to see the breadth of what is covered.
I'm far from a Javascript ninja, but I've read and highly recommend "Javascript, the good parts". It's simple and gives you the basics in a verye asy-to-follow way.
`(lambda (x y) + x y)` ;-)
I tend to agree with that. I am just curious to see examples of code that are not bad in regards to the first list in your post.
I know about non-greedy regex, but in some browsers (read: older IE versions), they will decrease the performance, so I don't use them out of habit in such cases. Also, in your example, the square brackets are superfluous.
&gt;I need something with a debugger/compiler to tell me where my errors are with parts of my code. Ever heard of a web browser?
Oops, shame on me for copy/paste.
Happens to the best of us now and then.
Hm, not really sure if this is good or bad advice. It may have some insight on how to get around some of the flawed behavior of JavaScript due to its immaturity back in 2005, but its not necessarily the same beast anymore. And to look at JQuery (which really was just making the best of an awkward situation) and trying to apply it to more formalized/newer methods of handling javascript and DOM isn't helpful. I guess what I mean is JQuery was a band aid, but we don't have a cut anymore. 
Interesting. Any idea how much tickets will cost?
Love that he breaks his own rules by modifying the hell out of the `String` prototype. With that said, while I think he has some good ideas, I hope to hell he's never responsible for naming any part of the public API again. First, we end up with `JSON.stringify()` -- c'mon, really? And in this script he cooks up a `String.prototype.entityify`....would it be accurate to say that he's Crockifying code? There's also way too few comments for my taste; while the preamble is really good, and at some places he does a good job, the majority of the code is bare with little to go on but the code itself. This also smells: `filter.first.first.first.first.string`
The question was for _good_ code, not _clever_ code.
And good code again in 15. Stick around the software world long enough, you'll see the same trends come and go.
Honestly, that was my thought too. However, with this post I more wanted to start a discussion about it, so I figured people would be more receptive if I didn't come out and say "this should be an enforceable rule". 100% agree though.
Just reporting in! In many cases, iOS and Android work the same because they're both based on WebKit, but with Google switching to Blink, it's possible that the compatibility is becoming less. To get a good idea, check out Genymotion's emulator. It runs Android using VirtualBox. 
Do it! Let them be the judge. An entertaining mid-level talk is worth as much as an interesting high-level talk and an inspiring low-level talk is worth more than both. 
Just to be clear, the difference is that react can render the static html on the serverside without needing a headless browser whereas angularjs uses a headless browser to render static html?
is this a part of (or inspired by) the jsconf family? seems to be competing directly with jsconf.eu (which is usually on at around exactly the same time). it does look pretty sweet, and that location looks beautiful... but if jsconf.eu is on within a month or so of nordic.js, it's pretty hard to justify the expenses of going to two conferences on the same subject within a short timespan.
I second katsujinken's comment to "Do it!" First, you don't know what they consider to be "mid-high." Maybe everybody else will be submitting proposals on using Ember.js's foobars to compose Angular whatsits, but then again some idiot might be giving a talk about how prototypes really *are* classes, [no matter what some idiot writes in his blog](http://raganwald.com/2014/01/19/prototypes-are-not-classes.html). Second, almost any topic can be as challenging as you like, as long as you leave out the word "beginner." For example, what does *An introduction to JavaScript's functions* cover? It could be some simple stuff about syntax and what happens if you don't include a `return` statement. Or it could dive down really deep into wrappers, combinators, variadic and unvariadic functions, closures, constructors, functions as objects... I'd say pick a title, describe a little of what you want to talk about, hit "submit."
&gt; splay the one sentence It's down now, but someone recreated it in Perl; http://paulm.com/toys/they_fight_crime.html It just displays a silly sentence with varying attributes, which are randomized each time. However I don't know Perl and I barely know Javascript. I just need something to learn on. 
&gt; * Constructors * use of *this* outside of eventing and handlers * use of *new* outside of external APIs (attempts at polymorphism show a complete disregard to understand this language) * any use of *Object.create* So any use of the prototype chain? &gt; The resulting overhead causes more problems than it usually solves, most typically for people new to the language, and also even for language veterans. Because people don't know how to use it properly? That would seem to ignore a large and very useful (if somewhat complicated) aspect of the language...
I wish these were closer to Seattle or I had enough money to fly around the world. :(
So this is a 1k version of jquery if all you need are selectors and event handlers? Interesting. As far as the $, I don't know if you'd ever use breif.js *and* jQuery so you're probably ok as is.
&gt; Because people don't know how to use it properly? That is one perspective. Blaming people for arbitrarily misapplying concepts they learned in some other language to a language it is not well suited for is no more productive than using such practices at all when there is little other reason to. These practices are unnecessary and there is risk associated with any enhancement or addition to a code base, which makes this practice unnecessarily risky. Associating blame to that risk does not reduce the risk or solve a valid programming problem. &gt; That would seem to ignore a large and very useful (if somewhat complicated) aspect of the language... I am ok with that. Ignoring OOP has not prevented me from doing anything in this language in a clean and efficient manner.
I spent a little time debugging a broken site with this yesterday. beautify-with-words was super confusing to use to follow program flow. The nonce words were too distracting to my brain, I think: https://cloudup.com/cEB2J2QjWdZ I ended up using a regular beautified (single letter variable) file--comparing a to b c d or e in a local scope is easier than looking around to see if there was a `stefob` I missed. But when I needed to find other instances of variables or function calls the beautify-with-words version was super useful. I think this is where it shines--the ability to search unique strings. But for everything else it was more distracting.
And another reason: If there is a small cost to asking for help, it filters down the requests to a more manageable level. Going to the trouble of reproducing it in a JSFiddle is a signal that you care about the answer.
Mousepointers are usually hardware supported, if you route the signal through the browser instead it's getting slow...
Interesting. I'm using Chrome. In your fiddle, when I replaced native requestAnimationFrame function with setTimeout(cb, 17), it drastically reduced the lag. I wonder if Google has done more work optimizing setTimeout() since that's what's in common use nowadays, and the performance benefits of requestAnimationFrame() are all still in the future. This is all just sheer speculating of course. [edit] When I change setTimeout(cb, 17) to setTimeout(cb, 16) the frame rate goes from ~55 to ~60, and lag reappears! This leads me to guess that raf() versus st() might be irrelevant, except insofar that raf() pushes the frame rate up to some threshold where the lag begins to appear.
You're missing ) at the end of the javascript. $(document).ready**(**function(){ $("#cell11, #cell12, #cell13, #cell21, #cell22, #cell23, #cell31, #cell32, #cell33").click(function(){ alert("working"); }); }**)**; The parentheses in with **** have to match. Take out the * in the above code and it will work.
"The Good Parts" is probably one of the most commonly recommended books, and I think it's great as well. However, it can be a bit dry and too condensed if you're not well versed with programming concepts in general. So if you're coming from a different language to take up JavaScript, I really recommend it. Otherwise, you probably want to wait a bit with it.
[Tether](http://github.hubspot.com/tether/) has [Shepard](http://github.hubspot.com/shepherd/docs/welcome/) as well.
Do you mean `var cell = ...`? And is this in the same click handler as above, or somewhere else, or? Instead of posting these little snippets of code, put the whole thing on JSFiddle and link to it so that we can see the actual code and interact with it and suggest edits. 
Turns out my base test had an error - I was iterating the return value by doing counter++ instead of ++counter. As such, the counter was never properly iterated and the dom element was not updated. When I fixed the error the modulus math test had the fastest performance.
http://jsfiddle.net/Nn3c2/5/
Pretty much I guess. I haven't look at jQuery's source code to figure out how they are doing each part specifically. But this implementation is probably mostly for modern browsers and IE8+ (IE8 only supports CSS2 selectors in querySelectorAll though). I have some updates that will be up later today that add delegating to any selector (instead of just id, class or tag) and auto-removing the listener after the first call
I thought the [Send](https://github.com/visionmedia/send) library was well done. For bigger &amp; front-end code, I'm partial to my own [Object Playground](https://github.com/jamesshore/object_playground) codebase, although I got a bit lazy in the top-level tests.
The fiddle doesn't work because you're referring to a relative URL for the pngs that doesn't exist. [Use a URL that exists and it works.](http://jsfiddle.net/Nn3c2/11/) 
I'm seeing base is still the fastest, but the modulus is only 6%-7% slower. I would say that would be OK then.
Now we're talking. Thanks, man!
It is unfortunate that the op decide to add "quintessential" to his question. It pretty much stifles discussion. Anyone who dared post examples are getting downvoted
this is sweet! nice job!
With this release the team have added ssm.isActive so you can now check if a state is active from anywhere in your code
You can get there and back for under $1000 with Icelandair. The conference tickets will likely be a similar amount... if your company can afford the ticket, they can probably afford the transport
If applicable, consider setting a custom cursor through CSS. You'll bypass the "hardware event -&gt; JS event -&gt; store mouse position -&gt; wait for next frame -&gt; draw order to canvas -&gt; canvas repaint" flow. However I can't think of a great reason for that lag to be there in the first place. It's likely to be one of those "good enough" things browsers do, that could be improved if there was enough demand for it. 
I am not saying that prototypes should be avoided.
You probably want to delegate by using .on(). $(parent).on('hover', HOVERABLE_ELEMENT_CLASS, hoverCallback) http://api.jquery.com/on/ 
You want the `.on` function. It works like this... $('#container').on('mouseover', '#something', function() { ... some code ... }); The jQuery selector `$('#container')` is some element that is always there and `#something` is the selector for some element that's part of the output you receive. What happens here is that the event fires when over the container but then searches through its child elements for '#something' and only actually fires it when you hover over that element.
Then I guess I don't understand... How can you take advantage of prototype without `new`, `Object.create`, or `this`?
edit: NVM, should have used mouseover instead of hover. Why do they use hover for one, and mouseover for the other? thats just confusing Oke so something like this should work right?: $("#content").on("hover",".highlightablerow",function(){ if($(this).css("background-color")!="rgb(0, 255, 0)"){ $(this).css("background-color", "#FF0000");} }); Where #content is the ID of a paragraph in which the fetched table is put (which is there from the start), and where each row in the table has class "highlightablerow". Im asking, because this isnt working:p
Nice, as always. :)
Thanks for the help
This would be better if real words were substituted for variable names instead of (phonetic) gibberish, like "apple," "banana," etc.
Haha, I should have guessed. Don't you mean:? (lambda (x y) (+ x y)) I mean, I agree... Although, the reason that's so beautiful is because it's an S-expression, with all that entails. Severed from an entire language that also implements that syntax, it's just nice sugar - sugar which looks jarringly different to the rest of javascript and therefore in this context, is not as elegant and clear as it is to us when we consider it within a LISP-like context. The thing I like about this implementation (even if I do agree, it would be nice to have it as part of a build process, rather than simply eval'ing on the fly - unless you are explicitly using it for generating the lambdas from user input, etc... but there must be better less dangerous ways to refactor such a thing...) is that it automatically generates partials for you. Instead of having to do: (x) =&gt; x &gt;= 4 , you can have: lambda ('&gt;= 4') or even lambda ('&gt;=') (good for sorting), And it will infer what params are needed, magically.
 penguins.map(function(name){ h.letAt('allPenguins',name,loadPenguin, name); }; h.do(function(all){ all.map.filter. ... }, wait('allPenguins')); Actually ther is nothing longer or uglier, just wait for objects and when ready do the usual stuff with real objects not with fake wrappers that can create issues...
This is exactly what you can do with developer tools in chrome and with the firebug extension in firefox. 
Very true, would cut down on the high school and college kids asking for help on their homework assignments with a 2 line description from their assignment handout.
My problem with react is that you either use JavaScript to make HTML elements, or you use JSX in your JavaScript . Both fly in the face of the separation of concerns we have between HTML and JavaScript.
Sounds like it to me.
Are you making the music for these also? For making one every week, the polish on these is really goddamn impressive. Im quite jealous.
Your best bet is to start way way back. you need an engine for the types of things you're doing. what are you doing? you're presenting situtations, and accepting responses. is it always 3 choices? or can someone do something unexpected? if it's three choices, you should use a series of presented forms. if it's unexpected, you need a text input that can parse the returned data. ... basically, you need to make a whole game engine. Not just something simple.
loved it OP, keep up with the good job!
rad 8 bit tunes
&gt; giving elements a CSS class if you className: 'small-caps' is used to add the small caps from the css. The other classes are just for debug purpose.
Oh, these "classes"? style: { backgroundColor : '#50629E', padding : '5px 0 9px 5px', lineHeight : '20px', margin : 0, } Those are inline styles, not classes. Styling has no place in JavaScript code.
I've detected a hexadecimal color code in your comment. Please allow me to provide visual representation. [#50629e](http://color.re/50629e.png) *** [^^Learn ^^more ^^about ^^me](http://color.re) ^^| ^^Don't ^^want ^^me ^^replying ^^on ^^your ^^comments ^^again? ^^Respond ^^to ^^this ^^comment ^^with: ^^'colorcodebot ^^leave ^^me ^^alone' 
Good point, /u/colorbot! You should tell /u/wdpttt that a hexidecimal color code was detected in his JavaScript, where it absofuckinglutely should not be!
Possibly this? http://code.google.com/p/chromium/issues/detail?id=117032 I'm not sure though - I get it even with Hardware Acceleration turned off, and I'm seeing about the same *number* of events fired. edit: or perhaps: http://code.google.com/p/chromium/issues/detail?id=124309
&gt; ase allow m What's the problem with that?
Why on Earth would anyone use or want this? Does it even conform to a Promise spec? Can these promises fail? Q.all([clicked1, clicked2]).then(what, ifItFailed)
You are confusing two different separations of concerns.
It's easier in that case. All you need to do is create a "database" or json object of questions and answers, like a test, and then create an engine to roll through these, and present them in a form. For instance, question 1 has three answers. a, b, c. A leads to question 2. B leads to question 4. and C leads to question 7, and so on. Present the question. Present the options. Respond to the input. Very easy to do.
&gt; paratio As you can see the model part in the example is not shown. The only thing shown is the react part, which is the view. And a view can be in JavaScript too. And the separation is quite sharp here.
&gt; Most typically a prototype is executed as a method by assigning a function to the proto property, or some newer similar property, of an object. Assigning methods to the `__proto__` property is, as far as I'm aware, [strongly discouraged](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto). I don't know the technical details but something about it messes with internal caching, and forces a check for a cyclical prototype chain. Aside from that, in many cases where you might set ``` obj.__proto__.whatever = function(){ ... }; ``` it would make just as much sense to use ``` obj = Object.create({ whatever: function(){ ... } }); ``` --------------- &gt; prototypes have a much longer lookup time than local variables. This actually got me thinking and now I think I see what you're getting at. I ran some tests and found that (in node at least) accessing a property one level deep on the prototype chain takes more than 3x as long as accessing a property defined directly on the object. a property 3 levels deep takes almost 5x as long. That said, it's 5x a very short time, in my test, running that operation 1,000,000 times showed a difference of 2.2 milliseconds. Actually, I was testing this in node, but when I run the same test in chrome there is literally no penalty... I tested up to nine levels deep and it actually takes less time sometimes! I'm sure that in a more realistic scenario than my test, there is a performance hit... You've convinced me to consider prototype vs closures more carefully in the future, but __proper__ use of Constructors and `new` and all that stuff (I'm on the fence about `apply`/`bind`) is very useful, and certainly not "bad code." 
Chrome's odd behaviour aside, there's a few things you can do to speed it up in general. Caching DOM values rather than repeatedly querying them is one of the bigger ones. http://www.html5rocks.com/en/tutorials/canvas/performance/
I think that he want's to make a custom prompt() window, (like wpf, mcf, swing, all the drag/drop things that some IDEs for some frameworks can do)
Can you write an example or link me to one
Gratzie!
I was playing around with Wintersmith ( http://wintersmith.io/ ) for a bit and it seemed to meet most of my needs. I would love to know some other good options though :) What have you looked at so far?
I've written a fast example. Super fast, just to get you in a good direction. http://jsfiddle.net/F2es9/
No I think that's the only way he knows how to frame his question, not what he actually wants or needs.
Damn. I'm on the smartphone :-(. 
&gt;That paradigm isn't effective when your app reaches a certain level of complexity, like Facebook I completely disagree. You are still writing or creating HTML inside your react components. They could have just used a reference to an HTML file that acts as the template. Or they could have just polyfilled HTML templates, I mean, they are already polyfilling ShadowDOM, might as well keep a decent separation of concerns and polyfill templates.
I've started looking forward to these every week.
Do you think that the same rendering speed could be maintained? Why did facebook come out with this? It obviously solves issues they were having. I don't think they just did this for shits and giggles. Plenty of frameworks are fudging the separation of concerns between html and javascript because it's more useful.
I use [liveweave.com](http://liveweave.com) a lot, simply because it has an awesome code-completion feature. Being a designer and dealing with CSS/jQuery a lot, I find it very useful. &gt; but I would much prefer that most code help posts be removed. Reddit does not work well as a Q&amp;A site, at least not in the same capacity that StackOverflow does. I would much rather host the "unanswerable" type questions that SO won't allow, as those are the most interesting IMO. "Why isn't my onclick firing" just gets old, and there's very little chance of someone with a similar problem finding it again here on redd 
Those spikes, man....
Great games, I hate those damn spikes !!!
Why is that beneficial?
Thank you. This is very helpful. I will spend the next few days figuring it out lol.
Sorry, could you clarify what you are asking is beneficial?
Really nice job man. You're inspiring me to start producing some games myself. 
I did a couple things here on purpose, and a couple things are hack-ish. Normally I wouldn't bother with explicitly attaching functions to the window, but jsfiddle wraps everything in a closed function, so I needed to give my html access to the functions, and I didn't want to bother with eventlisteners. If none of that made sense, tldr: normally you wouldn't do window.setLocation, just setLocation. As for the rest of my structure, if you're brand new, just notice my separation of concerns. Model, Control, and View code is all separated. The code that updates my model (setLocation) does not touch the view. The code that changes my view (printCurrentLocation) does not actually change any model values, just uses them. This is all done on purpose, and will help you in your long run of programming if you get into it now. tldr: MVC model view controller. go look it up. It's high concept programming shit. And I guess to anyone who questions my use of the term MVC for what I did here. Baby Steps. Introduce the concept with something simple.
Nope. Code and Code Principles are different. Principles stick around. They get battle tested and peer approved, then finally get written in books and blogs. I also think that's reason there was a sudden boom in "write good code" books a decade ago.
Very cool
&gt; JSON.stringify It *is* easy to remember :D 
The part about the separation of HTML and JavaScript being beneficial.
just add the following line $('.oneononechat').removeClass('chatopen').addClass('chatclosed'); at line 63 (right below your var open declaration). example: http://jsfiddle.net/billydryan/76fNA/7/ as a side note, the entire code could be cleaned up and shortened to only a few lines (javascript). You should also look into using custom attributes, and keep in mind that jquery also has a .show() and .hide() which simply adds/removes display: none; to the style. 
I'd love to get them, but I have no chance to bake (anymore). Any Idea where to get them? Thanks!
I only got to 3390, good game though.
Personally, I've always thought unit testing the gui code of a web app is rather odd, like you're testing the flying capabilities of a plane by looking at all its components individually. That said, ideally your code is decoupled enough that you can unit test everything *but* the gui code combined with integration tests for the whole thing. So don't switch but use the strength of both. 
I agree with all of your statements if you add the condition "unless you know what you're doing". Never forget: it is amazing what you can get away for with in JavaScript ;-)
I'd make the spike area smaller at start, and then increase it as you go higher (i.e. at first, if you miss the spiky platform by a little, you still get a 2nd try)
664! Not the prettiest thing, but that was a pretty fun little casual game, and that's what a game is supposed to be above all else! With a few powerups and in-game economy of some sort, that game could net you a bit of money on a site like kongregate. 
I've just added another function, pack that collects multiple calls in an array penguins.map(function(name){ h.pack('allPenguins', loadPenguin, name); }; h.do(function(all){ //filter, whatever }, wait('allPenguins'));
A list of libraries without a real test or a comparison or list of supported platforms... Useless.
filter, map etc in Bluebrid are not the core functions but promissified ones.. Looking on how much code you have to wrap everything as promises... I suppose that harvests are faster and less riskier. Harvests have just a few hundreds lines of code, don't duplicate and don't wrap anything. 
Bloody addictive. I thought "Just one game". Then 20mins later...
Or just use http://phantomjs.org/ directly, for which casperjs is a wrapper with testing in mind.
External page sources can only be requested by using JS by 1. using CORS requests (page required to send CORS headers) or 2. using a Service that rewrites the resource to a JSONp response Since most pages will not send CORS headers, 2 is probably your best option.
You don't really need JS for a "choose your own adventure" kind of game. Hyperlinks would work just fine. Each option would just be a link to one of those hundreds of numbered documents. Well, JS allows you to do that kind of thing with an inventory and you could "roll some dice" to determine the outcome of battles.
Please say a bit more about the problem with sending CORS headers. Is the problem with current browser implementations?
&gt; icial? You can build all your app in JavaScript. And build it bad or good, that's up to you. You can do the same with templates, you can put your logic there. Why does it matter if your view is in js or HTML? What if you don't want to write row HTML and you want to manage all in js? Is a lot more flexible and you can make it crossbrowser (like qooxdoo, for example). "In computer science, separation of concerns (SoC) is a design principle for separating a computer program into distinct sections, such that each section addresses a separate concern.". Is exactly what I've told: view section just deal with rendering and interaction stuff and model with model data and logic.
Awesome - thanks. Do you have any recommendations for JSONp services?
Yahoo Query Language would probably work. You can choose to have the response in JSONP format: http://developer.yahoo.com/yql/guide/yql-tutorials.html
I'm trying to imagine a non-Dickish use case for this 'feature'.
I think you're falling victim to dogmatic thinking &gt; Both fly in the face of the separation of concerns we have between HTML and JavaScript. There is a separation of technologies, which is often used to separate concerns: content / presentation / behavior. If you follow this approach, you should also use progressive enhancements, which means that you use no client-side Javascript at all to build the fundamentals of your website, but pure HTML and then enhance that in presentation and behavior. There are certainly libraries that support this approach (jQuery being the most famous example), but there seem to be more that in the end don't support that at all. React would even be better than others in this regard as it supports server-side rendering with the client-side just attaching event handlers to the pre-rendered DOM. &gt; &gt; My problem with react is that you either use JavaScript to make HTML elements And a template engine does not create HTML elements from Javascript? So why is that ok while in React it's not? If that makes you feel better, you can see JSX / flyweight DOM as a description of HTML, just like your templates are. The normal template approach also has its downsides. It works ok for simple cases like using one signal class to turn your input title attributes into fancy hover popups. For more complicated widgets however you start introducing lots of signal-classes and conventions and everything gets really complicated and you still have to create lots of markup with Javascript. There is a separation of technologies, some separation of concerns, but those are not the only things that matter. What about encapsulation and cohesion ? Your high-level widget is a mess of some base markup here, some class conventions, one or more scripts that add to it. The widget concept drowns in code noise, it's not encapsulated at all and the reuse is mediocre at best unless you use yet another (meta-)template / macros to be able to express that widget more centrally and with less noise. The react approach can be a real alternative here. You only have one technology / layer that assembles your view-stuff, composed from components that are meaningful for your application -- all while also reducing the mental load required to write the application. The conceptual refresh greatly simplifies things. You just need to write a method that turns your state into components and no longer need to bother with updating stuff. 
&gt; Styling has no place in JavaScript code. Nothing in React forces you to use inline styles. 
listen to some events (mouse, keyboard) and inject a hidden div at the end of the highlighted text. just a guess but that's how i would do it.
Yeah, I'm mostly curious about how they do it.
&gt; harvest.let doesn't return anything, that is the whole point of the library. Do not create fake objects as with promises because those objects are not a real replacement for real objects and increase the cognitive effort for programmers. Deferred, futures, promises and harvests are about having actual values and about order of asynchronous calls and not about creating fake objects but people criticizing harvests are a bit in love about their promise implementation and don't see that they are chasing the wrong whale. My impression is that there so many premise implementations because something is wrong with the concept itself. I could be wrong, but keep your head open... 
I recommend [Howler.js](http://goldfirestudios.com/blog/104/howler.js-Modern-Web-Audio-Javascript-Library) for a cross platform audio playback library with an useful set of features, nice API, and low overhead. It defaults to **web audio** and falls back to **HTML5 audio** (no legacy flash fallback like SoundManager2). It has some nice features, including [audio sprites](http://remysharp.com/2010/12/23/audio-sprites/) (build them with [audiospritler](https://npmjs.org/package/audiospritler)).
CORS works mostly like a normal XMLHttpRequest, but over cross-origin boundaries. When the response header contains "Access-Control-Allow-Origin: *" (or the origin of the request instead of "*"), everything works great; if not, the response is discarded, so if the page you want to get doesn't send those headers, well, you're out of luck. Alas, this also doesn't work in IE up to version 9.
The first I ever found was http://pipes.yahoo.com/pipes/ - but there are a lot more, once you start digging.
True enough!
Thank you. After some digging around on Google, I was finally able to get an idea of what I should be doing. I got it working just fine with maybe 8 lines. How would you suggest I clean up the page switching? I have a feeling there is a better way to do it, but I haven't thought about it all that much as of now.
Note: it's hastily cobbled together as a test for a larger [game](http://news.nuhack.com/) I've been creating for ages.
If I understand this question correctly you want to read some variables on the external page? I scrape JS in one of my chrome extensions. Description of how I did it on my blog: http://xiaox.in/post/70260458950/scraping-javascript-code 
I have to name and describe all the rooms?
For some reason it doesn't work for me and the Tracer.js file is empty, probably an extension I have installed. Maybe try: This with the id/class you are copying from: $._data( $('.story-header')[0], 'events' ); or http://www.sprymedia.co.uk/article/Visual+Event+2
Wordpress?
I tried doing this. But I don't have a host that works let me host hundreds of pages
Which browser/os are you using? I tested this in Cr, FF, and IE on Win7 and none of them exhibit the behavior you describe. I'm fairly certain that tracer.js is just a tracking script btw, it looks to merely inject a 1x1 image into the page.
I love the last project listed: screenshot shows it hasnt been touched in nearly a year and the article provides no explanation of what it does. 
You can add meta tags to the head tag in codepen. Just click the gear icon in the HTML section. There is a field for meta tags.
Good to know. Thanks, Sunshine.
http://stackoverflow.com/questions/2026335/how-to-add-extra-info-to-copied-web-text
Wanking Profusely
Here is your pure javascript key-value store in ES5: var db = Object.create(null); New for ES6: var db = new Map(); 
Inlining these solutions into your own libraries makes them less stable, less cross-platform, less future-proof, and more difficult to read. A better solution, if your goal is to reduce the size of your dependencies, would be to depend on small NPM modules for the particular features you need. For example: [domready](https://npmjs.org/package/domready)
This is an excellent resource to learn at a high level how some jQuery features work under the hood. Ignoring things like the Promises interface and jqXHR object that would be confusing to new comers. I'm happy this title includes *might* as well, we need less arrogant advice from developers claiming nobody needs jQuery. I will continue to use jQuery for a very long time, because I don't want to worry about edge cases that I've now taken for granted as non-issues. Edit: Forgot word.
An alternative if you don't want this to be 100% clientside: http://rip.rarchives.com/ (mostly used for porn as you can see in the "recent rips", but it works very well regardless)
In my first test rip.rarchives.com created a zip with 580 images and redditjs created an archive of 881 images. It looks like rarchives only looks at images hosted on imgur so I suppose that causes the difference. Either way, rarchives.com looks like a sweet project, thanks for sharing. 
Hmm, I don't think there is that much benefit of not using jQuery, because some other library is very likely to require it.
Interesting article. I will bookmark it. Do you have a version that show the compability of that code for other browsers?
I tried it in Safari, Chrome and Firefox on OS X and it has the same behaviour.
I'll check it out, thanks!
Not sure why you got downvoted, this is the real answer. Source: I used to do this shit for a living.
I think the point of the site is that if it's a small chunk of code, then taking care of the maintenance yourself isn't too big a deal. Of course if what you're doing would result in you rewriting large sections of jquery then it's easier to just use the library. The author seems to be pointing out that if you're including jquery for one or two of these tasks, then it's the same amount of work (approximately) to just write a short function as it is to include jQuery and whatever plugin you may be using. Also the whole site is dedicated to things that are fairly stable, shipped-with-browser or easily cross-platform. Difficult to read is true, especially for his longer examples, but this seems to ignore the whole argument of the site by just stating the opposing argument again.
You are being misleading. Though in your examples you may be able to show that IE8+ is similar to modern browsers this is just not the case in any serious/professional situation. All versions of IE, including 11 are way behind the curve is many areas that other browsers have been on top of for years. IE compliance will still be needed for many many many years to come. And also, cross browser compatibility is not the only value of JQuery. 
IE has also been ahead of the curve in many aspects, so this comment doesn't really add to the discussion.
This is aimed at library developers, not app developers. Keep that in mind.
I worked on that site, and I can confidently tell you: use jQuery.
Everything posted works for all browser including Chrome, Opera, Firefox and basically anything released in the last 3-4 years that has a significant market share. Internet Explorer is usually the only the one that's harder to support and that's probably why it's the only one mentioned. The thing is that if you learn that, it will always work for all browser, because all the call you see there are standardized for all browser. The time where Internet Explorer was an issue for cross-compatibility is slowly starting to fade. Pretty much everything is standardized and works very well on all platform now. 
&gt; less stable, less cross-platform, less future-proof Could you expand more on this ? We are talking about things that are standardized across all browser ...
Agreed. If you're targeting an evergreen browser and not doing that much heavy lifting like $.extend, these are more than adequate. Especially all the 1-2 liners are just now standards calls.
This is what I really wish existed. A site where I could check a few boxes with the helpers I actually need an use from jquery and download a much smaller sub library.
I guess I was downvoted for calling out the parent comment. IE gave us XHR and Pointer API. Both fundamental for the future of the web.
Except for Android 2.3, which is &gt;20% of all Android.
Most of the examples are showing HTML5-y ways to accomplish the jQuery actions. These are usually far different from how jQuery does thing "under the hood". For example, jQuery certainly doesn't use CSS3 Transitions to accomplish jQuery.fn.fadeOut().
I find it funny how many young developers I meet have a fair amount of IE6+ hate due to pain of having with work with them but don't know that XHR was birthed from there. The faces they make when I tell them. bahahahahahah. 
A nice compendium of equivalent functions, nice one!
Oh for sure. All examples on the page are *far* different from how jQuery does it internally, because jQuery has historical compatibility code paths. A more accurate thing for me to have said is: "how some jQuery features could work under the hood."
I like what you've done, but I think you may miss the point of using jQuery. It is a library for cross-browser handling, sure, but it is also a library that you can learn once and be quicker during development than figuring out the best plain-JS way to do something, and have pretty high confidence that jQuery is doing it in a pretty efficient manner. Doesn't mean you don't need to know the plain-JS way to do things, but it is really nice being able to rely on the jQuery org. to continually keep their code up to date with best practices so developers can focus on the logic of their app. Also, just a minor irritation, but in some cases the jQuery example each property is on a separate line, but the DOM example is all one line, giving the appearance of being less complex when in reality they are both one line snippets with different formatting rules applied.
Ya, also crazy how IE 8 has local storage. Usually blows minds when devs learn that.
Yeah it was missing so many other things that one doesn't expect it to have something as large and important as local storage. I've spoken with the team lead for IE9 or 10 a couple of years ago and the poor guy and his team are really trying to shed the cruft. Any time you bring up IE6 he has what is clearly a rehearsed speech that no one on the current team was around for IE7- and there is nothing they can do about the old browsers. 
&gt; IE gave us XHR No, IE gave us `new ActiveXObject("Microsoft.XMLHTTP")`. Mozilla was the first to create a JavaScript object called `XMLHttpRequest` in December 2000, which was a wrapper for Gecko's internal `nsIXMLHttpRequest` interface. The W3C then published a working draft spec for Mozilla's `XMLHttpRequest` in April 2006. It wasn't until October 2006 when Microsoft finally added the `XMLHttpRequest` object identifier to its scripting languages with the release of Internet Explorer 7.0.
You can easily [build a custom version of jQuery](https://github.com/jquery/jquery), have you considered that? It would let you pick &amp; choose which modules you want to have included.
Bless your heart.
&gt; We are talking about things that are standardized across all **popular, modern** browsers Fixed that for you.
I doubt there are that many reposts.
$.extend is not heavy lifting and certainly not a reason to include jQuery. Libraries like xtend provide this functionality by themselves in a concise package, and it's insanely easy to write it yourself, even the deep extend flavor.
And the reason there isn't a "check the boxes" version of jQuery core is that once you start including plugins from other people it's impossible to know in advance which features they'll use. If your greatest concern as a developer is the fact that jQuery is 30k instead of 10k, you aren't doing a very complicated project and should just include it all anyway.
Yes, it conveniently ignores the hundreds of bugs that jQuery has corrected, across not only IE but in other browsers as well, since it's well known (or should be) that there are a lot of inconsistencies in DOM implementations. Granted, these are becoming less over time, but they still exist and people still use non-evergreen browsers. For instance, the jQuery source code (v1.11) has 150+ references of "IE", plus an additional ~60 references to the rest of the browsers. While not all of those are going to indicate special handling, a good majority of them are, and so that's around 200 special cases that are handled for you. Of course, v2.x has many fewer references, but if you have the luxury of ignoring legacy IE then I envy you, because I don't. And personally, I much prefer focusing on domain problems then some stupid browser bug.
My company and I are proud that we have been jQuery free since inception 10 years ago.
`show()` is wrong, you should set `element.style.display = ''` instead of explicitly specifying a display style. **Edit:** It has been fixed, hooray!
Introducing a few things, but being inept at everything else, doesn't gain you rep points. IE has more ineptness than any other browser and always has.
Hey, your name looks familiar....I think you might be biased ;) Wasn't there plans for a "check the boxes" builder at one time? I seem to remember it being a highly-requested feature, but then Grunt _et al._ came along, which allowed jQuery to instead offer a roll-your-own (without having to support the website to power it). Of course, my memory could be failing me about all that.
The custom build lets a dev who knows what they are doing build just what they want, and the feedback we've gotten shows it's done what people wanted. A custom build for most sites would be a mistake, you'd spend more time going back to pull in things you didn't need until you included that last plugin and started getting failures that took you a day to figure out. And for what? 10 or 20kb? Go compress an image or two. :)
To be fair, it's still a smart move to consider whether you need a tool before you use it as opposed to needlessly adding it out of habit or convention.
[Not unrelated](http://substack.net/weaning_yourself_off_jquery)