Nice! I live in Boston and continually hope that I'll run into John on the T. 
Real designers will never use JS, and the JS that real designers produce typically gives them away that they're a designer. No offense to any designers out there, but they're not coders at all (regardless what they can do with jQuery), just like real coders aren't designers. Either you make pretty colors, logos, and layouts, or you write the code that powers everything. Not both.
&gt; **slang.capitalizeWords** &gt; Capitalizes each word in the string &gt; `slang.capitalizeWords('hello world!'); // "Hello world!"` Err, since when is "world" not a word? &gt; **slang.guid** &gt; Returns a unique guid of the specified length, or 32 by default &gt; `slang.guid(); // "gE9FEtJknQVy3qkN9fxmTucYKTwFOno2"` That is not a [GUID](http://www.ietf.org/rfc/rfc4122.txt). 
Konami code it for great justice. 
Preferences -&gt; Clicking Options -&gt; Open Links in New Window. also, cmd/control + click on a link.
Yup. I got into JavaScript a couple of years ago just because I was interested in it and there's a lot of JavaScript work out there right now. Besides people I know offering me work there are now recruiters cold emailing anyone with Node experience. Never was a better time to be a backend JS dev no matter what kind of design chops you have. I'm starting a 100% JS, year long (sub)contract for a fortune 500 this summer.
You can take it as far as you like, here is a [fully functional javascript pc emulator](http://bellard.org/jslinux) that runs linux 2.6.20, read the tech notes here to get some more info: http://bellard.org/jslinux/tech.html
I know for sure there will be only one element in the object. It's just a couchdb attachment, with the {name of file : {properties of atachment }}
Yes, you can contract out designs and slice the design. That's what I/we do (my shop) - we have a designer(ish) on our team whom is pretty good, but for total redesigns we have a couple contractors we regularly use. I do the programming, they do the slicing - though I often end up doing slicing because there is often more design work than programming (I'd rather be programming). 
I think the OP is ok with HTML and CSS. Design != those. He doesn't feel as if he is an artist. I guess it is semantics, but there is a strong difference between "Being a designer" and slicing a pre-made design. I suck at design but put a psd in front of me and I can slice anything. 
When people say they hate the DOM, not JavaScript, that's essentially the same as blaming it on the browser rather than the language.
I thought Web Workers used message passing, like Erlang.
What about ActionScript? Sounds more dynamic!
This is great advice. Dive into node to do funky awesome things, and in the meanwhile if you can HTML and CSS with someone else's graphics, then you are a front-end developer, and you're just A-OK.
http://dmitrysoshnikov.com/
I still don't get why you can't just initialize elements = []. If you're going to create an instance of the stack, you're most likely going to push something to it at least once. Also, why can't you just do elements = [element] the first time?
I could, but then it takes a few bytes in memory. It's probably over the top, I know. Oh, I didn't even think of that. Thank you :)
If you care about memory so much then why don't declare the methods on the prototype? You're using more memory by defining the methods on each object instance rather than through a shared prototype instance. Not to mention the slight cost of defining the methods in the constructor. Don't take this the wrong way, but this is a rather useless "optimization." You're actually degrading performance by having a wrapper which only defines an extra `peek` method over native JavaScript Array instances.
True - I don't have a javascript enabled tooth yet, and as far as I know, my router can host JS files, but not run them. 
Point taken. Using the prototype would be better overal. Just wanted to show off 'do once and rewrite'. Think it's a great way to lazy initialize things. 
Not an expert by any means, but why are you are you doing "return audio;" ? Do you mean return snd?
You're missing the ); for addListener( 
... and you probably want snd.play(); inside your if statement.
* You should load your audio resources separately and make a call to snd.load() for example. * The only thing your handler should do is play the loaded resources * I've only got the sound to work when loading from a website site * Not all audio files will work so it depends on the format of the sound file too
JS: The Good Parts will teach you a little about the inner workings of the language - scope and closure, as well as good habits and some OO design patterns, but it doesn't go into jQuery plugin construction (which is easy) or Ajax (which is also easy). It's well worth reading, it'll improve your JS coding.
I believe that name is taken. lol
I'm looking at them right now. I might just have to learn more about them o.o. Is there any guarantee they aren't just fads and aren't going anywhere though? I'd love to jump to JavaScript for everything, but at the same time I know PHP and MySQL aren't going anywhere.
If that's his entire code then this is the problem. Add ); after the closing } before the &lt;/script&gt;.
Hm. Is there any way to get web hosting on a Node + Mongo stack?
Looks cool. [STOMP](http://stomp.github.com/) supports subscribing with selectors against message headers. Pubsub.io appears to be different in that it selects against the message body. Of course, that's much more computationally expensive since you need to process the content of every message. What can you tell me about the "scaling magic" mentioned in the slide deck? Is it literally magic? :)
There are no guarantees, but I use MongoDB at my job. I haven't used Node for anything commercial yet though.
1. That is just a typo in the readme. It actually works as expected. Thanks for reporting! 2. It's a unique identifier. Should I rename the function to something else? Thanks for the feedback!
The point is to open all the links inn new tab without the clicking.
If you keep the implementation as-is, you might want to rename it to avoid confusion with the standards-based [GUID](http://en.wikipedia.org/wiki/Globally_unique_identifier) and/or the [UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier) family. Or, you could modify yours so that you can implement one of the standards; I think setting a couple of your bits manually would conform to UUID v4. There's also some good discussion and a few other JS implementations over at [stackoverflow](http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript).
I just had to do a reports system using charts and such like. I used xhr to get json data. Each chart widget had it's own calls it made. Helped to make the page feel like it loaded faster even though it didn't. I had a lot of joy using Sencha (extJs) to implement my charts.
I have a data abstraction layer that supports Select, Create/Update and Delete. It loads the data with XHR using JSON format. 
I do. You mad?
Interesting that everyone so far has said AJAX. I think there are times when it makes sense to save an HTTP call and put it straight into the HTML. I'd go for the second of your approaches- pretty much JSON-ing my data as much as possible, then doing a simple variable assignment.
~~Technically, yes... but~~ I've used it in a pinch.
Yes I did. And I'm just...awful at this.
Ah-HA! Thank you!
You know...yes. Yes I do. I'm, well, not very good.
Thank you!
A technique I picked up at my last job, similar to "scraping" as described above, is to put the json inside a hidden textarea. You have to entityify it slightly to make sure you don't close the textarea in the middle of the string, but it succeeds at getting pure data from the server to the browser, with no FOUC.
Portfolio link?
Similar to your invalid 2nd example... &lt;script type='text/json' id='foo'&gt; { x:2, y:3 } &lt;/script&gt; JSON.parse($('#foo').html())
[JavaScript: The Definitive Guide](http://books.google.com/books/about/JavaScript.html?id=2weL0iAfrEMC), [JavaScript: The Good Parts](http://books.google.com/books?id=PXa2bby0oQ0C), and [Eloquent JavaScript](http://eloquentjavascript.net/).
Your first approach also has the advantage of rendering progressively. Browsers will execute each script block as it comes in without blocking or waiting for the full load to finish. For escaping, use hex numeric entities, eg. \x3c and \x3e.
Would anyone care to break this down and explain whats happening and how they managed to upload an exploit to the server?
Actually, it looks like [HTML 4 accepts it](http://www.w3.org/TR/html4/interact/scripts.html#h-18.2.1): &gt; If the src has a URI value, user agents must ignore the element's contents and retrieve the script via the URI. It's not that I couldn't write another script element, but that it was more self-contained to use the same one. No need for defining an ID or classname to look for, less potential for trouble if elements are reordered, etc.
Ah, *nice*! If I'm writing JSON, I can guarantee that any &lt; and &gt; are inside strings... so I can always use string escapes! Fantastic.
Yes, but how do you handle strings with angle brackets?
In PHP: ~~`&lt;?php echo htmlentities(json_encode($foo)); ?&gt;`~~ EDIT: it should be `&lt;?php echo json_encode($foo)); ?&gt;`
&gt; There is no context-less way to escape the data so that it is read in safely and correctly as JS. Are you aware of [CDATA sections](http://en.wikipedia.org/wiki/CDATA)? Anyway, to answer your original question, my personal approach is to use JSON and XHR as most as I can, and embed the data on the page when I judge it's better to do so; the reason is mostly to minimize HTTP requests. HTH
&gt; You can't use &lt; inside the script block, because (infuriatingly) SGML character entities are not decoded I'm not sure I understand the problem exactly - why can't your JSON strings contain the literal '&lt;' character? I've never experienced any problems doing that before...
Because your JSON might be this: {title: "Number of &lt;/script&gt; tags over time in this page", series: [[2005, 0], [2006, 2], [2007, 4]]}; Or do those encoders convert &lt; and &gt; into the appropriate JS string hex escapes?
Oops, edited my reply. The escaping of &lt;&gt;'s are not necessary. &lt;script type='text/json' id='data'&gt; &lt;?php echo json_encode($foo); ?&gt; &lt;/script&gt; If you're afraid of invalidation: &lt;script type='text/json' id='data'&gt; &lt;![CDATA[&lt;?php echo json_encode($foo); ?&gt;]]&gt; &lt;/script&gt; 
Their previous work was done using JS injection attacks. What probably happened was that The sun has a web parameter that they append directly to a SQL string. Hackers play around till they find a variable used in this manner, then append the character to start a new command (; in SQL sever) and then they start to break in. If they know the existing table structure, it's totatly trivial at this point to start manipulating content, and adding in a JS redirect. I'm not sure if that's exactly what they did here, but that was how they messed with PBS and other sites. That's the most basic form of Injection attack, I did a big security pass at work about 5 years ago, and I now get an email everytime someone tries one on one of our sites. I get 5-10 a day, mostly from some kind of bots trying the exact same commands over and over on different pages to see if one works. I'm not sure if the actual JS they used is actually that interesting though, they are basically just creating an iframe with a parent.redirect. That's the trivial part, the SQL injection is harder. 
JSON-P: http://www.json-p.org/
Looks like he forgot to escape the entity.
On our search page we inject the initial results into a JSON object on the main HTML document but every call afterwards is XHR + JSON. It's definitely worthwhile for the initial load.
My question was why do you need to bother - I've never escaped '&lt;' in my inline JavaScript before, least of all when they're in strings. Edit: Ah, sorry, I see. If you're including user data they could theoretically add &lt;/script&gt; to their string, and borx your site. Got it. Encode your strings ppl! :-)
Well, first, pick either "EXAMPLE WITH LINK TO ARTICLE" or "EXAMPLE WITH NO LINK".
Indeed, fixed.
I didn't really think about this, until I read your comment. Then I started thinking about all the time I spend fighting cpan, or installing python libraries. Upboat, fo' sho'.
Ah, CDATA! I completely forgot about that. You just have to split the section wherever there's a ] ] &gt;. (Apparently Reddit breaks when I try to write ] ] &gt; without spaces.)
You may be interested in this http://jsperf.com/mega-trim-test :) 
You could get a VPS and set it up any way you want. I setup Node on Amazon's EC2 (I was just messing around though, I've never setup stuff like BIND or anything) - I don't know if they still have their developer deal going on, but you can get a micro-instance for free (enough hours to run all month). One of our public services runs on http://www.slicehost.com/ using nginx, which is fairly nice to work with, but there are definitely cheaper.
I work as a Developer, mostly doing web applications. I'd say about 98% of what I do is completely independent of 'Design', and the other 2% is just ensuring that the markup is valid enough for the Web Designers to do their thing with. Most of what I do is business applications, and most of my JavaScript is in dealing with objects and has very little tie-in with the actual DOM/display of the page. 
&gt; So you're just writing ignored code? Precisely. The script that is loaded via the `src` then reads in the code (text of last &lt;script&gt; element so far in the page) and parses it as JSON. &gt; So were you just making shit up when you said "I've used it in a pinch"? Nope, just used it yesterday. Worked beautifully. Today I switched over to using this approach, as suggested in a comment here: &lt;script&gt; mergePageData({ title: "\x3c/script\x3e", count: 5 }; &lt;/script&gt; ...where `mergePageData` merges the key-value pairs into a global pageData object.
Turtles all the way down.
This blog post: http://mathiasbynens.be/notes/etago In short, angle brackets aren’t a problem, only the ETAGO delimiter (`&lt;/`) is. After encoding the string for JavaScript (say, with a JSON encoder), replace occurrences of `&lt;/` with `&lt;\/`.
&gt;Replying so I can save **this comment**. Please ignore. 
Try reading my comment again. &gt; According to everything I've read, once a src attr is set on a script tag, it will ignore the inline contents. That is correct. The inline contents are not parsed and executed as JS. &gt; Change it to this, and tell me if it still works: Why? I told you, I switched to a different strategy. Pay attention, Donny.
I have already addressed these in reply to your other reply.
* http://javascriptweblog.wordpress.com/ * http://perfectionkills.com/
Hm, how much does a VPS run? I doubt I could justify too much cost when I can get LAMP hosting for $2 / month.
Obviously they have never coded in x86. 
so true...and i miss it.
What's stopping you from coding in x86 now?
Money.
So, are we going to get to the point where we have JS compilers, but true JS artists know how/when to go into the code and optimize by hand? Then someday compilers will be so good that even doing it by hand won't really help?
Time.
Women.
To prevent leakage we use this pattern at work: &lt;script type="text/javascript"&gt; (function () { consumeData({ json: 'true', values: [ 1, 2, 3 ] }); }()); &lt;/script&gt; It doesn't pollute the global space in any way (other than the global consumption function, we use the same one throughout our entire front-end codebase). I don't think the wrapping anonymous function is strictly required, but we do it out of superstition :) 
So, is this meant to be the rationale behind projects like CoffeScript? (e.g: JS is too low level, so lets "build a better tool on top of it"?)
&gt; extends native Javascript objects with helpful, intuitive methods. Yuck. I thought we all agreed to stop doing that crap. Touching Object.prototype is antisocial.
I think I must be doing myself a disservice by using the word "object" here as just a general term. Sugar will NEVER EVER EVER modify the Object.prototype by default. ONLY other JS objects (by which I really mean "classes") ever get modified. 100% agree with it being "antisocial".
It's not so much that it's too low level, it's that many people (myself included) find it to be an unpleasant language.
its not antisocial, its sociopath
And btw I would appreciate any suggestions to alternative terms to "object" if you have them. Kinda hard when EVERYTHING is an object.
They have a [whole article](http://sugarjs.com/native) addressing the issue, in which they explicitly state that `Object.prototype` is left untouched in order to avoid breaking your object loops, but the issue still exists with arrays. I'm not totally convinced, but the library is at least thoughtful about how it goes about its business.
Ah, okay. I'd call it a mixin for your object prototypes.
Site looks good &amp; kudos on TDDing a JS lib. One question, though -- if &gt; Sugar modifies native objects, and is more concerned with intuitive syntax, whereas Underscore.js leaves native objects alone... and &gt; Sugar will never overwrite methods that already exist, and so is safe to include in any of your pages. Don't these statements mean I can't confidently and reliably introduce this into a large legacy codebase because several Sugar methods may have previously been defined? Underscore feels like drop-in help, while this feels like I'd have to spend lots of time searching the existing code and worrying about it breaking in the future. Disclaimer: just finished a project with ~ 20,000 lines of untested procedural JavaScript. Hidden gems like redefined Array.concat really stick with you.
How does this tool account for accessibility? If you do have an incredibility specific and thoroughly thought through answer than the project is a terminal and horrendous failure. I say this because every penny this tool supposedly saves is actually a business cost, and this before you get sued.
Well it depends on what you're expecting, where you drop it in, and what that legacy code is doing. If it is unconditionally rewriting the methods, then no problem, Sugar methods get wiped away and on your merry way. If they themselves leave pre-existing methods alone, then you may have a problem (but would such timid methods really be existing in the codebase in question?) In any case if it's that much of a concern, drop it in as the very last load, and you can be sure that all methods are the same.
&gt; ## What is Sugar not? ## &gt; &gt; Sugar is a not a framework for AJAX, animation, or DOM manipulation. In fact, Sugar is not tied to the browser in any way. &gt; &gt; (...) &gt; &gt; ## Sugar... ## &gt; &gt; * adds cross browser functionality when it is broken or missing. ?
JS implementations embedded within browsers sometimes have inconsistent implementations of things like methods available for arrays. In that sense, you can have some cross-browser functionality that is not concerned with the presentation layer of the code.
Yes. Or even Google's closure compiler, which takes your JavaScript source and mangles it to extreme optimization (it does a lot more than minifying).
As a Prototype fan I really like it. I will use it in my next project for sure.
A fair question, though harshly stated. If your requirement is single web content that gracefully degrades with the absence of JavaScript then this tool certainly isn't going to meet your requirements. I'm unsure of the legislative requirements in the US (as your imminent fear of being sued would seem to imply), but in most of the world there's only a requirement for government websites to provide accessible content - which just reduces the problem down to business cost. This business cost can be manifested in a couple of ways: * loss of business by not supporting the disabled * cost of providing alternate interfaces for the disabled I could similarly argue that having highly interactive content provides business opportunity. For example Google Maps quickly dominated the online maps category without having any accessibility fallback. Or more recently consider people's excitement of dragging and dropping people into circles... This tool is intended for doing interactive forms and/or web gadgets, not entire web sites. Depending on how you use the features, you should still remain accessible to the majority of the disabled, though probably incompatible with many screen readers. If you are doing work for the government for an external facing portal, you would probably be better served just using plain HTML. Other than that specific use case, I can't really argue against generalities. By your logic Adobe could never have sold a single copy of Flash (though I'm not going to argue whether this would have been a good thing or not).
Not bad at all... the best to me is the date/time helpers... very flexible, pretty awesome.
Excellent. I never bought into the whole 'don't extend native prototypes' attitude. I've uses a private lib that provides much of the same functionality and I love it. 
In the US if you are a major online business and are horrendously inaccessible then you will likely be visited by a concerned special interest group before they sue you. Canada and the UK has far stronger accessibility laws than do the US, so there you are likely to be sued by the government just the same. Many developing economies are continuously raising the legal requirements associated with accessibility. This is deemed non-cost prohibitive economically, because as development talent and online businesses spring up in these economies so do the necessary regulations and policies. There is understanding now of what the necessary regulations and policies should be by looking the examples provided by other nations with more developed online commerce. The big difference is that such emerging economies are able to draft and deploy such regulation as it is needed without discovery, while this is not the case in nations that were early adopters and thus developed a legacy of bad practice in the absence of such regulation. In the near future it is reasonable to expect that much of the world will have more advanced accessibility laws than the US. &gt; By your logic Adobe could never have sold a single copy of Flash (though I'm not going to argue whether this would have been a good thing or not). Flash was commercially deployed before accessibility laws were applied to online domains. Now Flash is primarily used where accessibility is commonly ignored such as games, video, advertisements, and other media.
@Samus @homoiconic that's precisely correct. Methods like "indexOf" are simply layered in when missing, but there is no browser sniffing done whatsoever and in fact no reference to the "window" object, either. There was a solitary reference to it before which added a "params" object to the window.location, but I took it out, basically for the sole reason that I could make the above statement. Cleaner and I'm thinking ahead to bigger things like node.js.
Time.
I really like this idea. Can you explain &gt; Sugar will never overwrite methods that already exist, and so is safe to include in any of your pages. It can be opted in over existing frameworks like Prototype, YUI, and MooTools, adding in only the extra bits of sweetness. So, it checks before modifying the method? What if I have some libraries that depend on Sugar's implementation, and some that depend on Prototype's. Admittedly, that would be unlikely but not impossible.
They actually aren't touching Object.prototype directly. But besides that, I certainly see the point of those who don't like messing with the native classes. Personally, I'm OK with it if everything is well tested. One of the biggest things I missed when switching from Prototype to jQuery was being able to do things like myArray.indexOf(7), as opposed to jQuery.inArray(7, myArray). The Prototype way just seemed way more natural. Hate me if you want, but I'm thinking about including Sugar in my jQuery based projects. I like all the methods they added to array. I write a lot of Groovy at work because I love how much easier collection processing is, and I think you'll get a lot of the same benefits out of Sugar.
I wondered the same thing. I didn't read the API in extreme deatil, but does anyone know if Prototype and Sugar have any colliding methods (different behavior or arguments)? I think to play it safe I'll put this in my jQuery based projects only.
Ok, at first glance, I thought, "This looks kind of nice". But after going through the site, I think this looks like it could possibly be brilliant. The site itself is perfect - The top nav is just "API, Features, Tests" - no bullshit. These are the only things I care about. Everything is completely clear about what it does, and what the philosophy behind the library is. Really fucking nice.
The only thing I missed about jQuery moving to prototype was being able to simulate a standard event (e.g., click) being fired. It's unfortunate that the team doesn't have time for serious development of the library.
I find these attitudes a little nuts, and it makes me wonder about coders today. I'm a coder by trade, first real coding job in 97. I've worked in basic, pascal, c, c++, perl, php, vb, vb.net, c#, java, actionscript, JavaScript, and others I'm forgetting. JavaScript is a high level language. Just recently with the advent of v8, nitro, and node is it getting the respect it deserves. There's a lot of terrible, and a lot of awesome in the language, but by no stretch of the imagination is it comprable to assembly. Anyone that says so has never used a low level language.
@sizlack @gstep That's a really good question. The simple answer is that there are a number of colliding points with both Prototype and Mootools (I don't know if anyone really cares about Mootools here, but I'm still a fan, so I do). In all cases I have made an extensive effort to follow the syntax of the other libraries (especially Prototype) to the best of my ability, so that even if Sugar WERE to overwrite the method, you would end up with the same result. In approx. 95% of the colliding cases, Sugar is enhancing functionality, not changing it. That is less of a problem because the bottom line is that OLD code won't break. Now, on the other hand NEW code that is expecting Sugar functionality but receiving that of Prototype may be unhappy. I've just confirmed that Prototype WILL overwrite methods if they don't exist, whereas Sugar won't. That means that no matter where you include your libraries, Sugar will always defer to Prototype in the case of collisions. This is how I want it but I also want devs to be able to access methods if they wish so I'm considering a solution to this, such as a flag to overwrite all methods unconditionally. So far I have identified only 3 methods that will return an unexpected result outright: .max .min .camelize max/min will return arrays, whereas Prototype returns a single element in the array. camelize will capitalize the first letter (as in rails) whereas Prototype leaves the first letter lowercase. Additionally .each returns the enumerable in Prototype where Sugar does not. .each isn't likely to be using a return value, however and I'm probably going to change it anyway. As for the others they were decisions that were consciously made while weighing the consequences. I will probably release a list of collisions in the near future for reference. 
You raise some good points and certainly highlights the necessity of having accessibility fallbacks in some domains when adding interactive content for the public internet. I don't necessarily agree that my tool can serve no useful purpose for anybody, ever.
I was very interested and listened to quite a few of those Douglas Crockford videos; recently though, I heard that he is considered a bit of a syntax nazi etc...
A good book I can recommend to help you nail the basics is - http://eloquentjavascript.net/ there is a free download &amp; if you download the html zipped version there is an interactive console that you use as you're reading so you learn as you go. I found a great companion to this book was, 'Javascript: the good parts' by Douglas Crockford. 
Google treats hidden script as malicious, because in the real world it nearly always is. A legitimate reason to do this other than "hey look this is neat" doesn't exist; tons of malicious reasons exist. They're pretty clear about this in the text on GWT. Having a well reasoned discussion about whether there are cases where it might not won't actually change their ranking algorithm.
&gt; recently though, I heard that he is considered a bit of a syntax nazi etc... Is that supposed to suggest that you are gullible? What the hell does it matter what other people think when you are either just as capable of forming your own opinion or have absolutely no idea what they are talking about.
I completely agree. It just means your tool needs to be extended to support accessibility by default with options to disable best practices. Once that is accounted for I have absolutely no doubt that your tool would be completely fantastic.
"View Source"
$('myselector').click()?
Yes you can't do that in prototype (I switched the opposite way that you did).
I respectfully disagree. There's SO many bad practices and inelegant solutions being used on many websites.
Thought the very same thing
IDE ... errrr in a few releases no?
yes, behind a text editor window :)
&gt; I love how terse you can make code in loosely typed languages. Modern statically typed languages allow you to write incredible terse code because they use type-inferencing to automatically determine the type for you. For example, in F#, I can define an operator to combine two functions like so: let (&gt;&gt;) f g = fun x -&gt; g(f(x)) This allows me to combine functions like so: let PrintFile = ReadLinesFromFile &gt;&gt; PrintList What you have to understand is that creates a typed function which roughly looks like this in C# (We can't create operators in C#): Func&lt;A,C&gt; Compose&lt;A,B,C&gt;(Func&lt;A,B&gt; f, Func&lt;B,C&gt; g) { return x =&gt; g(f(x)); } In JavaScript, your compose function looks like this: function Compose(f,g) { return function(x) { return g(f(x)); } } That's better than the C# version, but languages like Haskell and F# tend to be far more terse.
Indeed. Very well, then: "View Source" + [JavaScript: The Definitive Guide](http://oreilly.com/catalog/9780596805524/) (O'Reilly).
Disclosure: Shameless self promotion to my blog.
It's hard to debug obfuscated code...
Sorry about that...was in a rush to get out the door and accidentally posted this before including the code.
Ever tried using jslint? Yes, the man has very strong opinions. I can respect that though, I know people get pissed at me for being upset with them for bad indentation and things. If you have been doing this stuff long enough, you know what you like and what works for you. Sometimes being set in your ways is a good thing.
Did you try to set IDs instead of classes for &lt;div class="inner-slider"&gt; elements ? E.g. &lt;div id="inner-slider-1"&gt; ... &lt;div id="inner-slider-2"&gt; And in the script: $('#inner-slider-1').cycle({ ... $('#inner-slider-2').cycle({ 
I tried that, with the same results. I guess another problem is that I am developing this to work within WordPress, so I don't know exactly how many categories will be within each nested slideshow.
&gt; There are of course many options for jQuery (even a reincarnation of Prototip for jQuery called Tipped), but they were all either way too bulky (Tipped is 172kb!), or didn't offer enough functionality. And now I'm going to port this back to Prototype, for the same reason. I've always skipped over Prototip because of the file size and licensing requirements. This looks like an awesome alternative. I honestly don't understand why anyone already familiar with Prototype would switch to jQuery. That's like tossing out your tool chest because you found a good swiss army knife.
Actually, when trying to debug the jquery cycle library obfuscated code (thanks to chromium which is able to pretty print it), I see that $.fn.cycle.createPagerAnchor function does not iterate on links from second element with "inner-slider" class. It seems to attach twice click event handlers on links from first element with "inner-slider" class. I think the library does not understand your nested structure. edit: minor typo fixed
Hmmm...crap! There must be a workaround...
Great idea porting it over to Prototype! To be honest, I really wasn't all that familiar with Prototype to begin with (barely tapped into its usage) and jQuery fits better for the needs of the projects I'm working on, which is why ultimately I decided to switch. Nothing against Prototype.
Is http://craigsworks.com/projects/qtip2/ really that bulky for the mass amount of functionality it provides? Now if you don't need all that functionality I can understand, since this seems like a nice alternative for simpler and even slightly more advanced use cases.
Ditto for tipsy.
qTip is almost 10x the filesize of miniTip.
Did you see these examples ? http://jquery.malsup.com/cycle/nest.html http://jquery.malsup.com/cycle/nest2.html EDIT: they don't give any help for nested cycles with (nested) links BTW, when using IDs did you change '.inner-slider-nav li:eq(' + (idx) + ') a' to '#inner-slider-1 .inner-slider-nav li:eq(' + (idx) + ') a' ... in the JS ?
I never said a made any action based on that opinion. I simply regurgitated what I had heard in order to start some comments on an otherwise dead submission.
This is great, nice work.
And as I said it also packs way more functionality in it, so it is a trade-off.
I actually changed the navigation classes to .inner-slider-nav-1 and .inner-slider-nav-2, in both the HTML and JS. Yeah, no dice. There really just aren't many examples for nested cycle slideshow. I found some info on Stack Overflow, but nothing regarding nested thumb navigation. I have a post over there, so hopefully someone will be able to help me find a solution. Thanks for your help, too!
Yes, hence the reason for making a lightweight plugin that doesn't need every functionality known to man. This isn't intended as a one size fits all plugin.
I'll check it out. I work on intranet sites off and on and will deal with accessibility outside of this tool. 
I don't even find it to be unpleasant...I just find it way *less pleasant* than CoffeeScript. Basically JavaScript, like C++, has a lot of non-obvious gotchas that CoffeeScript eliminates. Though you can eliminate those same gotchas by always linting your code.
https://developer.mozilla.org/en-US/learn/javascript
and if you enable js minification and gzip compression, it's barely an issue. seriously, 1.4k vs 10k? And you take into account browser caching? This is a classic case of penny-wise and pound foolish. 
Nobody is forcing you to use it. Sorry for making something and giving it away for free.
Well, I hope you've learned your lesson.
Look, take the advice of people you're targeting or not. I'm in this /r/ because I work with JavaScript every fucking day. And I do it for a venture-backed startup that's all about the New Hotness(tm) when it comes to technology. And I make decisions all the time about whether or not to replace libraries (we're migrating a lot of homegrown m-v-vc javascript code to backbone.js) or to adopt them. And I'm telling you, with the weight of a decade of experience and the trust of millions of dollars behind me, 1.4k vs 10k is not a factor. If you want to prove "lightweight," prove it with benchmarks in render time. Show me how others render the tips with SVG which is slow, and you are able to use native css (and how that impacts your browser compatibility). Show me differences in final markup. *Make your case*. Lightweight isn't just a function of the size of the library. Don't take it as demoralizing: everybody here loves writing code. But you don't get to just tack "ultra lightweight!" onto something due simply to file size. "Lightweight" has a lot of implications to professionals. Speed, extensibility, (lack of) lock-in, modularity, support/compatibility with existing popular libraries, styling ease, z-index issues -- all of these things contribute. I don't want to say "you suck and your penis is small," I'm just trying to explain why, given the choice between qtip and this, I'd probably lean towards qtip. It's meant as motivation to make something even more awesome!
Oh, I didn't realize I was in the presence of Mr. New Hotness. Last time I checked, you don't have to have venture backing to do something worthwhile. I have no problem with people critiquing my work, in fact I encourage it. I want my work to be as good as possible. However, those critiques are most helpful when they are constructive rather than saying that the work is pointless and that there was no reason to make it in the first place. I write Javascript every day as well, and I have been at this for nearly as long. I simply had a need and I filled it with something that others clearly also have a need for. I know there are lots of other options, and everyone has a perfectly reasonable right to select any option. The code is out there, free to do with what you want. I'm not trying to sell anything here, I don't even put ads on my blog. You prefer qTip and that is perfectly fine, it is a great piece of code, but it just wasn't what I was looking for. If other people want to use miniTip then great. If they want to use qTip, Tipsy, etc then that is great as well, I'm glad they found what they were looking for.
Wow, humble much? Give the guy a break posting liscence free clean code to do something quite useful.
Update: I've released v0.9.1 which now uses Object.defineProperty to map methods to the prototype. Long story but for those unfamilar this means that in modern browsers, extending native prototypes will no longer break the for..in loop. This is THE major argument against modifying native objects, so I think it's a big step forward. And once again to reiterate, the Object.prototype object is never touched by default.
Make that last function look like this: function setMarkers(map, locations) { var image = new google.maps.MarkerImage('mapimages/image.png', new google.maps.Size(30, 52), new google.maps.Point(0,0), new google.maps.Point(15, 52)); var shadow = new google.maps.MarkerImage('mapimages/shadow.png', new google.maps.Size(60, 52), new google.maps.Point(0,0), new google.maps.Point(15, 52)); var shape = { coord: [1, 1, 1, 20, 18, 20, 18 , 1], type: 'poly' }; for (var i = 0; i &lt; locations.length; i++) { var studio = locations[i]; var myLatLng = new google.maps.LatLng(studio[1], studio[2]); var marker = new google.maps.Marker({ position: myLatLng, map: map, shadow: shadow, icon: image, shape: shape, title: studio[0], zIndex: studio[3], animation: google.maps.Animation.DROP }); } } All you need to add is the `animation:` line near the bottom.
Wow, you just don't get it do you? I don't see qTip on Google's CDN, which means there is going to be an initial 10k download from your site. Every byte does count. Why would someone choose qTip over MiniTip if all they needed was what MiniTip offered? That's like saying all I need is a selector engine, so I'm going to use jQuery instead of something like [Qwery](https://github.com/ded/qwery). For a programmer, you sure lack some logical thinking skills.
That worked, you're awesome!
" Sugar is also not interested in adhering to a Ruby based syntax " ... are you kidding me, or do you think we really are all idiots?
One quick suggestion, if the tip gets clipped from the top of the window, maybe it should come from the bottom instead of the top? I do like how if its clipped from the right it goes to the left, nice. I would also make any place where you reference an integer like 16 or 8 declared only once in an override-able variable.
Hows it stack up to cuetip
Why dont you just use knockout for your mvvm?
I am glad you posted your code. Choosing a good tooltip solution..well theres so many to choose from. What makes yours selectable, and if you could improve it how would you? :)
I was pretty sold at the theory of it, then I got to the comparison part: [Normal loading](http://headjs.com/test/script.html) [HeadJS loading](http://headjs.com/test/headjs.html) I reloaded a bunch of times and the HeadJS version actually came up slower a bunch of times. Not the best demo
It also doesn't seem to perform well once cached. Maybe use this as a one time loader, then decapitate.
I tried it with Firefox 5 and head.js was faster then normal loading. I will try it in different browsers soon. BTW: I noticed that the head.js version loaded 5 files less (Firebug -&gt; Network tab) and for both the jQuery-loading threw an 404
I still depends on the speed of github where the sources are. Better test would be to put JS files on fast static-files-only server (and to execute fetching in paralel using frames for example).
Note, however, that Webkit browse have a lot of trouble with most JS loaders (LABjs, HeadJS and others): loaded code becomes essentially impossible to debug (via the debugger), because the browsers can't correctly find the source (the code is often run using `eval()`). Firebug is a crapshoot with that.
I tried this a couple of months ago, but found it's often slower in real world situations. Now I have one .js file and put $.getScript at the bottom to load any other javascript files I need. It's fast, and keeps my html clean.
Just the tip?
I started using this at work recently, and in my tests HeadJS was about 2x as fast.
It should go to the bottom if it is going to be clipped at the top. What browser are you using? Edit: Okay I see the problem and it should be fixed soon. Edit 2: v1.1.0 has been pushed out with this fix and a few others. Thanks!
Almost. You can do the toggle no problem by setting the event rigger to click instead of the default hover. This tooltip will then only close if you click the link again or click anywhere on the page outside of the tooltip itself. You can specify a function to be fired every time the tip is shown. However, as of the current version you can't specify a clicked tooltip to go away after a specific amount of time.
It's a rare event that [IE gets it right](http://www.w3.org/TR/html4/interact/scripts.html#adef-defer), but they do in this case.
This is an interesting technique. I didn't know it was possible to load scripts in parallel before reading about this. However, I'd provide some valid counter points to using head.js. * Loading a script in multiple parts is not always going to be faster than loading a combined version using one request. By that logic, [Yahoo](http://developer.yahoo.com/performance/rules.html) should recommend that developers stop using CSS sprites and load images in parallel instead. But it could make sense to do this for JS that you KNOW will change frequently. * I would be just as condescending by saying that "if you care about iPhones", you would use HTML5 offline application cache. * Caching scripts in headjs works off of a magic number of "300". Let's hope 300 stays magical for all of your visitors. Also, 300ms overhead before script starts loading/your browser start processing cached JavaScript. 
Use control.js. You wont have this problem (for the most part).
I just tested it. HeadJs loading was about 1200ms, and Normal was averaging on 1900ms. n=8. So pretty impressive to me. It probably depends a lot about the latency of your network. I am on a wireless, which is on a switch, that is on a sky box, on UK. 
This and the box model, and a few other things (I seem to recall events being much simpler in IE, but it's been a while since I rolled my own event handling code).
Now let's not get carried away....IE's prior implementations of the box model are one of, if not _the_, biggest PITA's known to webdevs!
You have it backwards. IE made a sane, logical box model, and then the W3C lost all sanity and came up with the completely illogical box model that's the default today. Try to make two 50% width elements side-by-side with padding in the W3C box model and tell me which one has caused more webdev nightmares.
The lack of support for saving state back to the server via REST was probably the biggest thing. I mean, you're trying to build a fancy web 2.0 app with a single page interface, and you don't support state change saves via the same interface you get data from? &amp;#3232;\_&amp;#3232;. We eliminated JavascriptMVC because of it's heft (i.e., we wanted a lightweight framework :)). We also didn't like that Knockout sort-of forces you into using their templating engine as well. Backbone lets you do it however you want -- jquery builders, moustache + json, whatever. The lack of lock-in (as I was trying to explain above) and it's compatibility with existing libraries (like jquery) were huge factors. That said, I *do* like the templating concept they have -- the problem with heavy JS apps is where elements get created, where event definition/listening lives and gets defined, etc. I think it's a big reason why GWT existed before a lot of these. Backbone is solid but not overbearing, and we really like it's encouraged-but-not-enforced support for dependent/composed views (i.e., you have a master view, with sub-views -- one for a summary, and one for details, for example -- all built off the same collection)
Much though it grates to admit it, IE's box model was more intuitive. However, given there was already a well-established consensus box model defined by open standards, that still doesn't excuse IE deciding to go its own way. :-(
Great article John - I learned something today! Had no idea about the issue you mentioned. Related: If the ternary operator in the javascript2coffeescript project worked, I probably would have converted everything to coffeescript at my last gig. 
https://developer.mozilla.org/En/CSS/Box-sizing
&gt; [...] IE's box model was more intuitive. Not really, both are pretty arbitrary. However, the "broken" one (`box-sizing:border-box`) is indeed the better default. **auto**: doesn't matter, either is fine **all values are known:** doesn't matter, but `content-box` means you have to do some math yourself (wtf) **percentages:** doesn't work with `content-box` (unless you throw `calc()` into the mix [wtf²])
I meant intuitive in the sense that people think of the border as being "the outlines of the element" (with the margins on the outside and the padding on the inside), so setting "the `width` of the element" to content-width+padding is a bit more intuitive than setting `width` to content-width and then having to remember to add the padding to get "the width of the element". With IE's box-model you slap on a margin and set the `width`, and that's the total internal space the element has - you subtract any padding you want and everything else fits in the space that's left. With the W3C model you set the width and a border, and then when you set padding and style the inside of the element the "width" of the element (ie, the space inside the border) changes, necessitating re-calculation of all your distances (at least as a beginner, before you learn to account for it). It's something of a moot point because after a while you just get used to it whichever way around it is (and it's been many, many years since I had to learn it ;-), but coming at it fresh I could easily imagine the default W3C box-model was a bit counter-intuitive for beginners compared to IEs.
From my point of view it doesn't really matter which one is more intuitive, since that's a bit too fuzzy for my liking. With a survey they could have gotten some numbers, but that wouldn't have been necessary, really. With the way CSS works, `border-box` should have been the choice of the W3C. Not because it's more intuitive, but because it works much better in typical use cases since all 3 parameters (width, padding, and border) are decoupled. If you want to change one value, you only have to change that one thing. But to be fair, it was probably kinda hard to predict how CSS (and which parts) will be actually used (and in which way). I mean, now we do know about these little annoyances, because we stumbled upon them while we were trying to build something. Hindsight is 20/20, they say. ;)
I argue that much of the weak typing in JS isn't useful at all but leads to less robust programs that are harder to reason about. For that reason I created [restrict mode](http://restrictmode.org) for JavaScript, a proper subset of the language.
Very true. It's typically not until a technology's been available for several years that the community around it has fully worked out how best to use it - just look at the development of "best-practice" Javascript, for example - and there's a limit to how far into the future you can see when designing it.
Heh. Yea. Took me over a year to come up with a systematic approach for writing CSS (I'm doing front-end stuff for over 10 years by now). Had to restart from scratch 2 times so far (ouch). It just didn't work out as expected. It was just too ambitious, too idealistic. Now I got something which is much simpler and yet it seems to work pretty damn well so far. Like Crockford, I'm using subsets. Once you start building things only with those parts which are absolutely essential (took me a while to identify them), things become a lot easier. Getting all of that right from the very beginning looks completely impossible to me. Sure, *now* it looks completely obvious, but without all that trial and error I would have never reached that point.
I don't know what it is, but the programmer spirit in me always cries when I see CoffeeScript. The very notion of compiling one language into another never sat well with me. If you're going to use JavaScript, you should learn JavaScript. To do otherwise just seems lazy to me.
i think thats a good reason, thanks for the insight
Here's data on max concurrent connections by browser/os. generally only about 6 at a time can be downloaded http://www.browserscope.org/?category=network
Sorry, my mistake. Read your comment wrong.
It is [lazy](http://en.wikipedia.org/wiki/Larry_Wall#Virtues_of_a_programmer), and that's why you should encourage it. Maybe I can help you feel better about CoffeeScript this way: C is higher level of abstraction than assembly, which allows you to be more productive, yet occasionally dive into assembly when you need it. Java and Python are high level languages than C/C++, yet you can dive into C/C++ when you need to. Scala and Clojure are higher level languages than Java, but you can use native Java APIs if you want to. But in general, you stay within the higher level language because they allow you to be more productive and more lazy. JavaScript is in a particularly bad place. There are a lot of bad parts to JavaScript that a programmer should avoid and have to work needlessly hard to avoid. Wouldn't it be nicer if there is a higher level language that does that for you? At least, wouldn't it be nice if there is an alternative to using JavaScript to create web apps?
I'm glad you found it helpful!
I love this. Thanks a bunch, it's nice having it sit in my bookmarks bar
&gt; The very notion of compiling one language into another never sat well with me. Does this opinion hold with ORMs as well?
I agree. There's some really good View Source out there to look at. The [source code](http://github.com/DmitryBaranovskiy/raphael/raw/master/raphael.js) to the [Raphaël](http://raphaeljs.com/) drawing library being my favorite example of decent + tricky JS coding in the past couple years. 
Here is more http://dustindiaz.com/scriptjs http://labjs.com/ 
Yeah, even the standards bodies finally got around to acknowledging it and made an option for it. Unfortunately, you have to specify it for every browser individually now, and IE doesn't work with it if you trigger standards mode (go figure).
It's `box-sizing` for IE8+, Opera, Chrome, and Safari. Only Firefox needs a prefix. For IE7 (we don't support IE6 anymore) I usually use an expression. .GridLine&gt;.size1of2{width:50%;*width:expression(this.parentNode.clientWidth*.5-parseInt(this.currentStyle.paddingLeft)-parseInt(this.currentStyle.paddingRight));} Yuck. :) There is also some HTC (and a somewhat improved patched version) for that, but it doesn't work well enough.
So, here's some history for you. Netscape 4 also did it the 'wrong' way. The CSS spec simply didn't exist when those browsers were written. Then the W3C, in its infinite wisdom, wrote a spec that went against what both of the major browsers were doing and against common sense. IE 'fixed' it with standards mode in IE 6. I'm not sure when Mozilla 'fixed' it (I think Netscape 6, but they might have in a point release for 4, it's been too long). Then somebody at some point decided to retcon the whole thing and make IE out to be the standards-defying outlaw. That's when fixed-width layouts became popular because few people could make a decent CSS layout with the retarded box model. So, the W3C finally saw sanity and added the box-model to CSS3, but now most versions of IE doesn't work with that (was it IE 8 that finally added that support or 9?).
This must have changed in the last couple years then, because last time I messed with it, I had to do vendor prefixes for at least webkit and mozilla, if not more.
The vast majority of his nazisms make sense to follow especially for newbies. People that fancy themselves code ninjas want to write "clever" code, the problem is, in a team environment "clever" code is unmaintainable code. I would wager these are the vocal minority that are at odds with Crockford's coding standards. The others are those that want all their code to pass a lint but they don't want to fix 3rd party or legacy code so they want to the linter to forgive bad code, similar to people that would make their html w3c compliant by putting non standard markup in a `document.write`. Also those that want to write programs like it's another language with block scoping or see no problem doing some bad practice coding shortcut like using the `with` keyword, or switch case fall throughs or if conditions/loops without braces.
&gt; Try to make two 50% width elements side-by-side with padding in the W3C box model &lt;div style="width: 50%; float: left;"&gt; &lt;div style="padding: 20px;"&gt; Content, woo. &lt;/div&gt; &lt;/div&gt; &lt;div style="width: 50%; float: left;"&gt; &lt;div style="padding: 20px;"&gt; More content, woo. &lt;/div&gt; &lt;/div&gt; Sure, this method requires an extra &lt;div&gt; inside of the 50% wrappers, but it's hardly difficult or challenging to get this functionality.
I'd actually forgotten that Netscape 4 did it that way too. However this assertion in your comment this is just factually incorrect: &gt; The CSS spec simply didn't exist when those browsers were written. The W3C's CSS1 specification was [defined as a formal Recommendation](http://www.w3.org/TR/CSS1/) (ie, not even a Draft) by December 1996, but [Netscape Navigator 4.0 didn't come out until six months later](http://en.wikipedia.org/wiki/Netscape_Navigator#Release_history). Moreover, the W3C specification was a Draft for some time even before it achieved formal Recommendation status. In other words the W3C standard had already been written, set in stone and published for half a year before Netscape and IE both "went rogue" and did it their own way, and it was clear to browser-makers which way the wind was blowing for months or years even before that. It is a bit unfair calling it the "IE" box model and ignoring the fact that Netscape were just as guilty of violating the standards, but it's understandable given how quickly Netscape died off after 4.0, and how a generation of web developers grew up with IE6 being the only mainstream dissenter. However, it's also wrong to claim that both browsers didn't clearly and intentionally disregard the draft process, let alone that they didn't violate the published open standards at the time.
Hey cool. I achieved something similar with the BlobBuilder interface and createObjectURL(). Example: https://gist.github.com/1101836 I used this in a pretty neat way to allow in-browser editing of a file that would then be 'created' and loaded in an IFRAME to give an effective preview of a static website w/o the need for any server help.
Interesting. Anyone else have trouble getting it to do anything in Firefox? 
I am.
But that is so retarded. You have to create 2 divs solely as a presentation hack to make what should be an absolutely trivial layout. 
Should have called it 'Just the Tip'.
Test-driven development is a great in an academic environment.
It's great in a commercial environment, too - having an automated test suite to ensure new code doesn't break old code is extremely helpful when there's time / money at stake.
great scripts to pollute the window object :(
Having automated tests is fantastic, I would not work without them. Test-driven development, at least in my experience however leads to writing a whole lot of test code that gets thrown out when you realize how you thought you were going to program it won't work the way you wanted it to.
For a compare-and-contrast exercise, here is a jQuery version. It's a bit different in that it uses setTimeout rather than setInterval. On platforms that support requestAnimationFrame, this will save CPU time and battery by not running the animation while the window/tab is not visible. $(function(){ var rotateList = function(){ $("#rotate &gt; li:first-child") .animate({ opacity: 0, height: 0, marginTop: 0, marginBottom: 0, paddingTop: 0, paddingBottom: 0, background: "#ffd" },{ duration: 1000, complete: function(){ $(this).remove(); setTimeout(rotateList, 4000); } }) .clone() .appendTo("#rotate"); }; rotateList(); });
Yeah, I don't know what the author's understanding of the usage of `var` is, but it's completely unsatisfactory.
Neither "version" is 10 lines, and the only reason that either version is close to 10 lines is due to horrible noob formatting. When formatted by a [beautifier](http://jsbeautifier.org/), example 1 is actually 30 lines and example 2 is 33 lines. And although I don't use MooTools, I'm pretty sure that there's a built-in method for handling the insertion of HTML (as opposed to using `innerHTML` as demonstrated here). Javascript Awesomeness? No, just a run-of-the-mill "hey ma look what I made" post.
Why are you creating a function expression (`rotateList`) only to turn around and call it immediately? 
Maybe because of the deferred call via setTimeout ;)
Oh, missed that. Stupid head is stupid head.
Nevermind my other silly comment; thanks for the tip about `requestAnimationFrame`, I hadn't heard of it yet but it sounds really great.
What version of Firefox and your OS are you running? Also, what errors are you getting? You can open the error console with Ctrl+Shift+J.
As I asked the above user, could you please provide the version of Firefox and your OS that you are running and any errors you're getting (Ctrl+Shift+J)?
A [demo](http://jsbin.com/ajozaw) of your codes.
Looks OK, but I think I prefer [starter](http://starter.pixelgraphics.us/).
I see we're getting closer and closer to [Boilerplate Boilerplate](https://github.com/raycohen/boilerplate-boilerplate#readme) every day.
As a heads up Knockout doesn't lock you into their templating engine. It just lacks additional templating engines. You have to write your own wrapper around whatever engine you'd want to use.
Never seen that before, looks pretty cool.
Make your own private subreddit, submit the permalinks of comments you like to it.
Interesting idea: Your sprites and game JS are one HTTP request.
Nice, I thought of authoring exactly this yesterday! Glad it's out there.
&gt; Fork on Github -- bit.ly link &amp;#3232;\_&amp;#3232; 
I see the point of Sass (it adds variables and mixins and so on) and now only rare code in normal CSS, but I can't see the point of Coffeescript other than that it sometimes looks nice.
I wonder why would you store a JSON in the URL hash though.. Talk about ugly URL. There are other places where you can store state gracefully.
Kudos for trying to be creative, but I honestly think this is a really bad idea. I would definitely look into using sessionStorage or localStorage before throwing some JSON into the URL hash. It definitely makes for some really ugly, and completely transparent, URLs.
I always used this one: http://stefangabos.ro/jquery/jquery-plugin-boilerplate-revisited/ Served me well. :-)
 document.getElementById("thediv").style.width = document.getElementById("image1").offsetWidth + document.getElementById("image2").offsetWidth + document.getElementById("image3").offsetWidth And so on. As for the references, someone will be along soon enough to provide these. W3Schools and MDN Seem decent resources.
Possibly your problem is that you try to get the width of the image before the images are loaded properly... You can solve this by setting the width attribute in the &lt;img width='200' /&gt; html tag. Otherwise you could use the onload attribute of the &lt;img onload='somefunction()'/&gt; to trigger the widthsetting function. 
for flashers... possibly not the best title
I agree that's it's quite ugly. Nevertheless, I use this technique in a chrome extension to save the UI state through bookmarks. There, sessionStorage or localStorage isn't an alternative since you couldn't bookmark multiple UI states.
lol boileplate boilerplate is too funny (cause its true)
Does it have to be a purely JavaScript solution? If not, the syntax for this in jQuery is much easier to follow for a newbie and will see you in good stead for the future. If each element has an id, you can reference each object via this where hash represents the id followed by the actual ID tag: $('#divID').width( $('#imgOneID').width() + $('#imgTwoID').width() + ... ) Its essentially the same as PlNG's great example and is very heavy weight if you are just doing this, but IMO the syntax is a little easier to read and depending on what else you are trying to achieve, [jQuery](http://jquery.com) has some great helper functions.
I'm going to explain my downvote thusly. This is not twitter, this is reddit. Reddit is not twitter, therefore do not use twittering (eg, the hashtag) ; on reddit. I like twitter, I like reddit, but let's not mix the two. I appreciate that you may be new around here, I haven't checked how long your account has been around. So consider this a friendly instruction on one of our unwritten rules. I hope that it is taken with the tone of respect-laced-with-annoyance-that-reddit-is-slowly-evolving-to-something-I-hate it was written in. 
Thanks! Is "for flash platform users" better?
yup :-)
Thanks for the review. I'm completely new here. My account is only 4 days old. Are the rules completely unwritten or is there any article on it?
:-)
Great article ... I didn't think I would understand what Javascript MVC Framework does... I think I do now! :)
I'm still waiting for batmanjs. I want those node.js bindings so bad. 
Upvoted because this is very likely the stumbling block. Note that attaching an onload to body also works, since it fires after all the images on the page have been downloaded, but that will likely result in a great delay, so stick with the onloa on the individual image (attach the load event in your JS if possible.. it's the best practice not to write calls to functions in your HTML markup). One word of warning though: since you don't seem to be using a library/framework, you're going to have to work out the cross-browser issues by yourself (i.e. with the help of Google). What this basically means is issues in IE. For the image onload event in particular, IE decides to unconveniently NOT fire the onload event on images that are loaded from the cache, meaning that the script will work when you first load the page, but will fail with future page visits. Bummer. As a result, you have to do some ugly JavaScript hack: http://codetrinis.blogspot.com/2008/07/imgonload-error-with-internet-explorer.html Just a heads up... hopefully this saves some folks some time.
Mootools can be written in the EXACT same manor var rotate = $('rotate'); var rotate_list = function(){ $('#rotate &gt; li:first-child') .set('morph', { duration: 1000, onComplete: function(e){ this.dispose(); rotate_list.delay(4000); } }) .morph({ opacity: 0, height: 0, 'margin-top': 0, 'margin-bottom': 0, 'padding-top': 0, 'padding-bottom': 0, 'background': '#ffd' }) .clone() .inject(rotate); }; rotate_list(); 
He actually helped with jQuery Boilerplate.
I've had some flaky issues with img onload in IE. If this is the issue you're running into, I suggest setting both the width and height attribute on the images because it's considered best practice for several reasons. One reason is the issue you might be running into and another is [it can cause quirky visual behavior](http://37signals.com/svn/posts/2979-css-tip-spot-unsized-images-during-development).
Well, there's redditquite, a quick google ought to find it, I'll see if I can find the link. Alot of the rules are unwritten though. The big one is "don't assume reddit is &lt;other-social-newsy-site&gt;" chances are the memes and idioms from other places won't fit. Redditors used to be nice about this, though recently there's been a trend that makes it look like our eternal september might be coming soon. The best thing to do is observe people who get the shit downvoted out of their posts, even when the content is relatively good (not unlike your post) -- chances are they broke some unwritten cultural more and someone (or, likely, everyone) will call them out for it. Some general rules of thumb to help are: * use correct grammar/spelling (you did well on that front). Exceptions are generally made for things that look like homophone substitutions, or errors a non-native speaker of english would make, but things like 'u' for 'you', 'ur' for 'your' - that shit don't hover, much less fly. * avoid using @&lt;person&gt; or #&lt;tag&gt; in posts and comments. This is not because those things are bad, but because they're useless. Reddit doesn't support # search, nor does it send messages to people you @ (and, occasionally, @&lt;person&gt; is appropriate -- for instance, if you're responding up thread in a three-person conversation -- essentially, @&lt;person&gt; is valid in thread-scope, not global (like on twitter)). Reddit has a different mechanism for these things -- namely, replying directly to someone in-thread, and subreddits. Subreddits are like more generic hashtags, we self-sort posts (as you have with this one), we presume all incoming information is useful, and downvote it if it's not. (Reddiquite suggests this, roughly. Though you will likely end up with downvotes when people simply disagree -- this is unfortunate, but roughly how the world works). * Avoid general uselessness. That's the big one. If reddit doesn't support a feature you are aiming to use, the response will not be like twitter's (whereas, when #'s and @'s were new, they were just convention. That convention led to the feature as it stands today). You'll do fine, I'm sure. 
Yea that's pretty dumb, though I have an extension for chrome, [bit.ly url shortener](https://chrome.google.com/webstore/detail/iabeihobmhlgpkcgjiloemdbofjbdcic). which displays the full link in a hover tip on links like that which removes mystery of where you're going.
This is pretty kickass.
Does look promising, where'd you come up with the name though? Doesn't seem to really describe the project at all. Also, possible bug (or feature?): when you mousedown on an element, it moves a few pixels (bottom/right movement) even though your mouse never moves. Thus, simply clicking any element is a semi-destructive action. I tried this on most of the demos and observed the same behavior. Chrome 12.
Pedantic reply: jQuery _is_ Javascript. Perhaps it'd be more accurate to call non-jQuery code "vanilla Javascript" or similar. Alose, jQuery does _not_ have a different syntax from Javascript. It has it's own API, yes, but it does not have it's own runtime interpreter. These are all minor points, but they could be confusing to someone new (like the OP).
Thanks a lot for such a huge post. I see the community here really differs from the other social sites. Thanks once again for Your support. I'll do my best to keep my posts interesting, suitable and useful.
Nice. The little joint on the arrows works really well for rearranging graphs and drawing multiple arrows between two nodes.
noun 1 a point at which parts of an artificial structure are joined. Makes sense to me, the main chunk of it is a library for keeping the lines joined to the boxes at the right places :)
_I guess..._ still doesn't particularly make sense to me, but at least it's not flat-out stupid like some that I've seen lately.
Can't believe this only got a handful of upvotes, is there so little vision here? Basically looking at a POC for the kind of Visio replacement we'll see in a few years (a product that sells today for up to $1000/licence).
This pretty much has it summed up. I'm not so sure I can predict the intentions of the nay-sayers but Crockford's intention has been objective and open. He wants to reduce JavaScript to a subset that produces the highest quality code. He drives this idea with JSLint. Who can argue with that? Therefore I use JSLint as much as possible.
This won't be possible because it would create a security risk. Google would have to create something purposely built to be embedded on a website inside an iframe. Using JavaScript, you could add yourself to their circles without them knowing, just by them visiting your site. With an iframe, this vulnerability is taken away.
The JavaScript should stay inside head tags. The only part that will determine where the map appears is the following piece of code. &lt;div id="map_canvas" style="width:500px; height:500px"&gt;&lt;/div&gt; You may also won't to apply some CSS styling to get it positioned exactly how you want.
Wherever you put this div is where the map will show up : &lt;div id="map_canvas" style="width:500px; height:500px"&gt;&lt;/div&gt; Don't remove the &lt;head&gt; tags. It is kind of important. You adjust the position of the div with css.
well shit, when I tried moving it around, I accidentally forgot to cut the whole code, specifically the part you quoted. Doh! Thanks
JavaScript should usually go at the bottom of the page. Script execution blocks rendering, so if you put it at the top, the rest of the page won't load until the script has finished downloading. You give users a much better experience if you move the script tags to the bottom, so that the rest of the page can load before you add interactivity. The linked website is a particularly bad example - it freezes up, with nothing displayed, until a couple dozen scripts have finished loaded.
I know, I wanted to give the solution without confusing him/her.
It looks like your code was eaten. [You should paste this into a gist.](https://gist.github.com)
thanks hope [this](https://gist.github.com/1108672) works
FYI, what you're trying to do is not normally the best way of doing something like this. But since it seems like you're just trying to get something working, here you go: &lt;script type="text/javascript"&gt; var doodle= "http://gatesunique.mybigcommerce.com/doodle-daddles/"; if (location.href==doodle){ document.write('&lt;label for="compare_%%GLOBAL_ProductId%%"&gt;Add to my design&lt;/label&gt;'); } else { document.write('&lt;label for="compare_%%GLOBAL_ProductId%%"&gt;%%LNG_Compare%%&lt;/label&gt;'); } &lt;/script&gt;
Those were the same three I was going to recommend. 
great thanks very much
Checkout Amazon EC2 - I saw a tutorial for setting up DNS and fun stuff like that. Would definitely require some elbow grease and not the best option for a production environment, but would be fine for a personal site (which is about all I would want to do with Node+Mongo, at least for now). http://hostpolar.com/vps.htm http://www.hostingfuze.com/unmanaged-virtual-servers.php No experience with either, but cheap and had some decent reviews on the WHT forums (take with a grain of salt). 
FWIW, I completely agree with you. This is kick ass as I've been waiting/looking for something to replace visio with.
Remembered this post from a few days ago, and I just used it in one of my sites. It's really nice, I love it, but I did extend the code to handle form elements, on focus, and on blur. It works pretty well, and maybe you should consider adding that as well? I can send you the code snippet if you'd like, it's a really simple change. Thanks for this! Edit: grammar.
Thank you for the explanation Ryan.
It should be simpler to implement this sort of functionality, yes, but I still think it's a rather trivial layout to begin with, and attempting to create it certainly doesn't present a "webdev nightmare." But you're right that it sucks to use a second div purely for presentation. Things could be better.
Absolutely - I used to follow Crockford to the letter. Now that I've advanced a bit I take his crocklamations with a pinch of salt. I think they're invaluable for newbies though.
It's simple once you know the answer, but if you actually set out to do this with nothing but the CSS spec in hand, you're are going to feel some serious pain. This kind of problem permeates all the way through your page. Say, in one of the 50% divs I'd like a horizontal menu that spans the whole 50% that has 8 subdivisions, each surrounded by a 1px solid border that merges with the neighbouring element's border. Good luck finding a solution to that within an 1 hour. 
Alternate title: _How to use map()_
Next up: reduce()
Try putting it into JsFiddle - you'll get a lot more help that way than by sending a zip file.
Pls use [jsbin](http://jsbin.com/), [jsfiddle](http://jsfiddle.net/) or some similar service so we don't have to download anything.
Call context.beginPath() at the top of your drawline() function.
Oh okay, I didn't know about that. I did, thanks!
I did, thanks for letting me know about that!
Did you test this and if so did it work for you? I tried and didn't get it. Perhaps I'm putting it somewhere incorrect.
Did not. I didn't look closely enough at your code to satisfy myself that it was safe to run. As other people said, putting an example on jsfiddle.net would make it much easier for us to help. I'm looking at your code again and I see you do have beginPath() in there. When I didn't see it at the top, I assumed you forgot it since that's the most obvious problem. My bad. =( I've done a lot of work with canvas and not calling beginPath() is a common problem when working with paths. Methods like lineTo() don't actually do anything until you call stroke(). All calls to lineTo() get stored and "replayed" when you finally call stroke(). beginPath() clears what was stored so that you don't see the ghosts of previous paths. Since you didn't forget to do that, it's not your problem. Again, I apologize.
Oh alright. I did put it into jsfiddle: http://jsfiddle.net/LCfqj/ I'm not sure if it's an issue with the canvas itself, I think it's with the way i'm gathering the positions of each word. Could you explain the uses of save(); and restore(); for me? Thanks alot!
try adding a unique identifier to the class name. For instance, for the first search, try making the class name 'word0', then the second search 'word1' and so on. The problem is that the class 'word' exists 4 times for the 2nd search. (only twice for the first search) The other option is to remove the span (or remove the class from the spans) after the search is over.
Selector was also taking old nodes (TARGET) when calculating for "People" http://jsfiddle.net/LCfqj/18/
part 2? 
In Nodejs you should be able to do just net.isIPv6(input) And have your answer quite quickly. Browser side though this is pretty cool. Definitely adding to my watch list.
Yeah, I noticed you were calling restore(), but didn't see any corresponding calls to save(). Properties like strokeStyle and lineWidth are part of the "canvas state". When you call save(), it pushes the state onto a stack. You can then modify the state as much as you want to draw something. When you call restore(), the state is popped off the stack, restoring all of those properties that you may have changed. By putting save() at the top of a function that draws something and restore() at the bottom, you can avoid interfering with the functions that call your function since they might not be expecting you to change state on them. I find save() and restore() really useful when drawing multiple instances of the same object. You can translate() to the x and y where you want the object to appear and then just pretend that your x and y are 0, 0. This makes it easier to write functions that can draw an object at different coordinates since you don't have to do any math in your calls to moveTo(), lineTo(), etc. So save(), translate(), do your stuff, and then restore() and your canvas is in exactly the same state (as far as subsequent drawing operations are concerned) as it was before your function was called. The paths that you define when you beginPath() and then start calling moveTo() and lineTo() are not part of this state so there's really not much of a reason for you to be saving and restoring in the example you have so far. Canvas programming is fun. I hope this helps. Looks like somebody else found the problem in your findElement() function.
Please skip to _.after(). Once you figure out _.after, asynchronous programming becomes wayyyy easier.
You're not wrong :) Obviously these posts aren't aimed at people with experience of functional programming. The whole point is to introduce the topic in a straightforward way. `map` highlights what makes functional programming functional - e.g. functions as first-class citizens, and working with data immutably. If you already know `map` and its brothers and sisters, then please don't bother reading these posts. Otherwise, I think they could be quite useful.
Sorry to be a grump. But downvoted for being a video. What programmer learns from watching videos?
The problem is that you're running the loop faster than the UI updates. This is traditionally done with delays via setTimeout or setInterval (and recently should be done with CSS3 as much as possible), but since you're using jQuery you should use its built-in animation functions: http://api.jquery.com/animate/
Well I've replaced the .css() with animate and it still doesn't seem to work. Ill put it on jsfiddle for you. 
Good to see efforts to making mobile web development easier. Check out Weinre too (http://phonegap.github.com/weinre/), which is really handy because allows you to use the Webkit Inspector tools remotely. 
I'm sorry that you did not find it interesting, but I don't mind listening or watching talks as long is I get to learn something interesting. Anyway, if videos don't work for you, they have a site that lets you try out tutorials &lt;http://learn.knockoutjs.com&gt; which might be more to your liking. I saw this being used for the first time today and I'm still blown by how awesome it is.
Knockout is a pretty cool library, it uses the MVVM pattern (Model-View-ViewModel). After you watch the video, which is well worth it, check out the new interactive Knockout tutorials: http://learn.knockoutjs.com/
Try peepcode or screencasts. They work well. 
If you haven't tried this, get the Selenium plutonium for FireFox. It has a UI you can use to click on elements to get the x-path.
If you haven't tried this, get the Selenium plutonium for FireFox. It has a UI you can use to click on elements to get the x-path.
Take a look at this: http://jsfiddle.net/HLGzX/29/ Comments are inline and should help you get your bearings.
Interesting.. something like.. var candlejack = _.after(3, name.call()); Would like to hear more
Ah! Thank you very much! I'm sure that was incredibly easy for you, but this has been stumping me for quite some time now. At what point does the offset() method return? The top left of the box? Also, one thing I'm curious about, while messing around with your code I found that if I change the initial value of incY to something like 3, the box will move out of the barrier. Why is that?
I give this framework 2/5 stars. Let's take a look at the tutorial: &gt; Notice that, because the meal property is an observable, it's important to invoke meal() as a function (to obtain its current value) before attempting to read sub-properties. In other words, write ${meal().price}, not ${meal.price}. So the view has to be modified based on the model's data structure. Generally not good, but syntax for scoping of variables always requires some consideration ({data:{id:1,data:[{id:1}]}}). So I have to modify the template because of datatype...meh, I'll let it go. The fact that there's different syntax that isn't semantically clear...not good, but I'll let that go too. Oops, if I don't pass the template a structure+typing it expects, the whole thing barfs. That's just wrong. Templates should be data agnostic. It's a template, not a script. You know, let's just agree to disagree and when knockout decouples the templates so that I can use whatever templating I would like, it becomes a lot more attractive. What else does it have? Oh it seems like it's just a repackaged Amplify.js. So what's the pattern for how to integrate Knockout into an existing stack. When WidgetX needs to update WidgetY, am I just stuck shoehorning in custom events like I already do? What's the default behavior? Automatic binding? Nononono Who thought this was a good idea? "hey I totally have a problem where I can't seem to completely hand over flow control for my client elements (objects/dom) to an automatic mechanism" See the main site. This is one of Knockout's 4 main features. Not cool. You don't want this by default. So that's 2/4 - The declarative binding, good idea AND done well (data- prefixed attributes are HTML5 compliant). The dependency tracking is just chaining of the UI refreshing, which is NOT GOOD. If you go to the documentation landing page, you'll see that they restate the main points and dependency tracking/UI refresh are combined. That's 3/4. There is a claim on that same page that "it is trivially extensible". This is true enough. You can't really change the bad parts of the framework, because of the tight coupling, but it's not so bad that I can't imagine people manipulating it for their own uses. I...just...I just can't stand it.
I did this once, I forget the exact syntax, but I do remember there was a different path to use for IE and everything else :(
Nice! Thanks for the tip looking into it now.
If you should happen to remember it feel free to send that my way.
mrfunktastic you are a genius. Works like a charm.
Might be a great video, but it's silverlight, so I'll never see it.
Check out v6decode.com for a demo of the rest of its capabilities; I'm planning on extending it to do subnet calculations in the next couple of days :)
Glad you liked it :-)
You missed all the downloadable options? They even tell you how to do it: Right click “Save as…” 
You can use the same technique in my previous post to accomplish the horizontal menu you described. There ends up being more than one place where an extra div is required, which I agree sucks, but this is still a 15 minute implementation. http://pastebin.com/rWx2stvu EDIT: Forgive the inline styles. I was originally thinking of just copying/pasting it into my reply here, but decided against it since there's a reasonably large amount of mark-up. Again, I'm not arguing that this approach is ideal, I'm only arguing that it is possible to work-around the limitations of the box model without too much hassle.
I'm sure someone is going to come along and make me look like a complete fool.
Can't say I'm familiar with chrome extension development, but are you sure it's not being called? Try putting a console.log('test'); or alert('test'); in the click function, and see if you get the message. View the console using CTRL+Shift+J (windows) or Command+Shift+J on mac
I did the alert. Still nothing. Going to try the console. 
I can replaced the click(); with alert('test'); and it works. I'm not sure, but it doesn't look like the console works with extensions.
Make sure you give appropriate permissions in your manifest file. According to the docs you need the "tab" permission.
I do have the tabs permission. It shouldn't be that because the button "Create" works, but "Create2" doesn't.
Hmm. Yeah I might not be able to help you very much here. Only other thing i can suggest is to double check the click function is defined before your button (like how you have it above the button in your example). I generally do this stuff on regular pages :).
Rename it to something else like clickHandler. Looks like click is a method on the button element. And if you must use click for whatever reason you could call window.click() instead.
It is. Thank you for at least trying.
I can't upvote you enough. That solved it.
&gt;The good news is that this will be fixed in ECMAScript 5. The language has so many warts they should have called it wartscript. At least they are fixing them. 
When the onclick event is called, the scope is set to the DOM element (button) as *this*, meaning that the engine will first look to find a *click()* function there. Only if the engine cannot find one there, it will look in the next higher scope, which is the *window* and thereby *window.click()*. JavaScript scope can be a pain, especially in the DOM. Having unique function names helps a lot in the beginning.
Ok, yes the offset method returns the coordinates for the top and left-most corner of the box. The reason the animation was screwed when using numbers &lt; 3 was that I put a border on the body which isn't really a good idea. I moved the border to a div and now the coordinates are correct and the animation is smooth: http://jsfiddle.net/HLGzX/36/
You should be able to simply use: document.frames['leftnavtop'] I'm not sure you're doing your HTML correctly, though. I am pretty sure that you're not supposed to have &gt;1 HTML or HEAD tags in your document. Frames are such a 1990's paradigm though and I honestly haven't used them since then, so I could be way off.
Paragraphs, my friend.
For people who want to know your solution, and to give credit, you could edit your original post to say "\[Solved it thanks to xlu:](http://www.reddit.com/r/javascript/comments/j249p/just_learning_javascript_because_i_wanted_to_try/#c28i3e0)"
I agree with you. They take what is about 5-10 minutes of reading content and blow it up to a 30m giganto-file download (180mb for the "medium quality"). Can't search videos, can't copy code samples to run locally, have to put up with the annoying voices and marketing buzzword bingo that MS is so fond of. I haven't watched the video yet but I'm willing to bet that they mention "solution" at least eleventy-hundred times.
I know this may be a stretch, but is it possible to have it open only unread links?
will look in to it when home from holiday :-) 
Bad article. Why do people insist on making this so complicated?! I really don't understand. &gt; The topic of this can be confusing, but it does not have to be. Just remember that, in general, this is used inside of functions to refer to the object the function is contained within, as opposed to the function itself (exceptions include using the new keyword or call() and apply()). NO. This has NOTHING to do with the context of a function, you are making it WAY more complicated than it is. This is set by the CALLER ONLY, at the point in time you call the function. Here, let me write some rules that clarifies 99% of this usage: * Does your function have an explicit receiver (foo.bar())? This is the receiver. * Does your function have an implicit receiver (bar())? This is undefined or the global object (depending on if it's strict mode or not, respectively). * Was your function called with new (new Bar())? This is a new object that will be returned by new Bar() once Bar completes (assuming Bar doesn't return an object). * Did you use call or apply? This is whatever you specified in the function call. Done. Not at all complicated.
Yep. The only reason it was ever confusing to me is because nobody says what you just said. It really is that simple.
you really should put "this" in quotes or **this** in bold
I just made a submission about this because of all the crazy this articles that get posted here. Hopefully it helps a few folks.
Made them *italic*. Good idea.
It's simple to you, because you understand it. It's not simple to people who don't get it, and don't have a solid understanding of software development. So like 90% of people who write JavaScript. 
This made *this* finally click for me. Knowing the primitives at play here removed any uncertainty and complication. Thanks!
Do you think the 4 bullet points above are difficult to understand even if you don't have a software development background? My main point though is that 4 page articles only confuse the matter.
this is always just this from it's point of view.
In the second use case, there is an actual explicit receiver (global object *window*). Thus, **this** is bound to the *window* object: window.setTimeout(function() {console.log(this);}, 1000); //after one second it prints: &gt;DOMWindow My point is that the second bullet is in fact a particular case of the first. Good post by the way!
I don't believe this is true exactly. Check out section 11.2.3 of the ES5 spec, step 6. It looks like we can say that there is an implicit receiver of the environment record (step 6.b.), but in all cases other than inside a with statement the environment record returns undefined for its ImplicitThisValue. The only reason the global object gets used as this is because of legacy ES3, and this doesn't occur in ES5's strict mode. See ES5 section 10.4.3, if the function is strict mode code, thisArg will remain undefined rather than being normalized to the global object.
Well that's just like...your opinion man.
You seem to be right and also more informed then me, but I tested my code in Chrome 12 (with strict mode enabled) and that is what is misleading me into making that assumption: setTimeout(function() {"use strict"; console.log(this);}, 1000); //still prints the *window* object I think that there must be a simple explanation of what is happening but you know... too much beer and it's getting late :)
You still should make it **bold**. It stands out a lot more than italics.
You still should make it **bold**. It stands out a lot more than italics.
It stands out a lot more, but so much as to impede readability IMO :) Had bold first but it was bothersome with so many bolded this's all over.
I hate it when some languages use self, I feel like I'm coding skynet.
Thanks for the write up, I had just spent some time this morning reading a rather long article explaining the same thing. I think, though, if I had spent a ton of time reading a variety of lengthy articles about the 'this' keyword I'd also try to explain it at length. I completely agree with you but it's probably why there are so many long explanations out there.
Use Chrome 13 or later, chrome 12's strict mode implementation is very lacking. That said, the above still happens in Chrome 14. I think it's a bug. The HTML5 spec says to pass undefined as the this object, so it should behave exactly the same as (function() { "use strict"; console.log(this);})(); which does give undefined as expected.
This is broken - don't use it. That is the real answer :-)
or `backwards single quotes` because I can't remember the name. This \/ &gt; \`this\`
Backticks. Best idea yet. Monospace is the standard :) :%s/\([^\*]\)\*\([^\*]\)/\1`\2/g
Guido FTW
Four pages can confuse the matter. But pictures do help.
I'm not convinced this explanation is entirely correct. For instance, you say that "this" has no correlation with the function it's called in... How do you explain this? http://pastie.org/2287178 It's my understanding that "this" isn't tied to the scope that its called in, but rather the context that it's run in. What things like call and apply do are run the given function in the context of the given object, regardless of scope. These two terms are often used interchangeably, but I think it's important to understand their differences. The clearest way I can think to explain it is to imagine the context is where the code is being executed, while the scope is what named variables are available. "this" is always related to context, and never to scope.
I believe this is the explanation: &gt; Does your function call not have an explicit receiver (bar())? This is undefined or the global object depending on if it's strict mode or not, respectively. In both bar() and the immediately invoked anonymous function, the 'this' keyword ends up being the global object. EDIT: Try this - var bar = function () { console.log(this.attribute); }; (function () { this.attribute = "testing"; bar(); console.log(window.attribute); // Also logs "testing" })()
Most good demos include a link, at the end, or in the doobly-doo @ bottom to a hardcopy of the notes + code. EVERY programmer should be learning by watching. Be it by video, presentations at public usergroups, or office demonstrations within your own company.
OK. This is weird I feel like I'm disagreeing with myself. :) &gt; EVERY programmer should be learning by watching. Be it by video, presentations at public usergroups, or office demonstrations within your own company. Totally disagree with this. I learn from reading. Anything else is way too slow. I also like to be able to cut &amp; paste from examples. Video tutorials are a relatively new thing. It's a trend I'd like to see end.
edit: Looks like I made a mistake :)
Not sure what you mean by "a second call to bar returns undefined" but if you're testing on node the global object will probably not be called window. Replace window above with Function("return this")(), which should return the global object outside of strict mode. (edit: I just realized that this depends on you accepting that this is bullet point 2 above, so I guess see below). By the way if you're interested in verifying the above information, refer to the Ecmascript 5 specification, Section 10.4.3, Section 11.2.3, and Chapter 13. This is what the original bulleted list is derived from. Edit: here's a way you can verify. We know that x = "foo" without a var statement makes a global variable. Do that, and then afterwards test whether this.x === "foo".
and it's is a contraction for "it is"
more fun with *this*: var obj = { f: function() { console.log(this); } } (obj.f || true)(); The result is the global object instead of `obj`. 
*this* has definitely given me the most trouble with more complex Javascript. Maybe someone could explain where I'm going wrong after a brief example. I'm creating a Prototype object, we'll call it *Post* function Post() { var x=0; } Post.prototype.increment = function() { this.x++; } var myPost = new Post(); document.write(myPost.x); myPost.increment(); document.write(myPost.x); so obviously, *this.x++;* is modifying some variable, x, internal to the function itself, NOT the object or instance. Would the following modification work? Post.prototype.increment = function(obj) { this.x++; } ... myPost.increment(myPost); or do I even need to reference the myPost instance? Could I just use: Post.prototype.increment(myPost);
I think there are a few things off with your example. function Post() { var x=0; } *x* in this case is a local variable and not available i.e. in your increment function. Post.prototype.increment = function() { this.x++; } Instead, your increment function increments an undefined member (*this.x* is unknown at this point) which will then be assigned 1, because JavaScript engines deal with broken code all the time. The next example does not quite make sense. You supply *obj* as argument, but you don't do anything with it. An argument does **not** modify the *this* scope. Instead, you still do the same as above. Post.prototype.increment = function(obj) { this.x++; } What you maybe meant to do was either .. Post.prototype.increment = function(obj) { obj.x++; } .. - but that's just a plain normal function - or the following: You can use *.call* or *.apply* and modify the *this* keyword thereby: // calls your myPost, but uses another object as 'this' myPost.call(anotherObject); A piece of advice: When you write something in the object prototype, *this* refers to the object instance (unless you used *.call* or *.apply*). Anything which you don't store as *this.variable* i.e. using *var myVariable* will be lost between calls. Hope I could help. JavaScript scope is hard to understand, but you'll get there.
When you call "new Post", a new object is created and is assigned to *this* in the Post constructor. If you want to keep anything from the constructor, you should use function Post() { this.x = 0; } There's nothing wrong with your first version of increment - it's the way you're initializing x that's the problem. Side note: if you used: var myPost = Post(); then the value of *this* would be the global object (window) in the Post constructor instead of a new object. Hope that clears things up for you.
d'oh. i actually meant to declare it as this.x = 0; Still, when I've tried this, myPost.increment hasn't actually incremented the obj.x, but an internal "this.x" that seems only to exist within the prototype method.
right, as i mentioned below, I goofed and actually did intend to declare x as this.x = 0; in the constructor. My problem is that the this.x within the increment function does not point to the object or instance variable, x, but instead to an x that only exists within that particular method. And my second example goofed, and definitely should have read obj.x++; thanks for catching that. I'll have to try a few simple variations and see which does what I expect. Thanks for the help
Call me stupid but the following code, put together from what was mentioned above outputs 1, behaving as it should: function Post() { this.x = 0; } Post.prototype.increment = function() { this.x++; } var myPost = new Post(); myPost.increment(); console.log(myPost.x); // &lt;&lt; outputs 1 
So you did exactly this: function Post() { this.x = 0; }; Post.prototype.increment = function() { this.x++; }; var myPost = new Post(); console.log(myPost.x); myPost.increment(); console.log(myPost.x); and didn't get this? 0 1 I don't quite understand what you mean by "an internal this.x". Post.prototype is not a method, it's an object that instances of Post (created by "new Post()") will inherit methods from. So if you call myPost.increment(), inside the increment function the value of *this* will be the new object created when you called "new Post()", NOT the prototype or an argument passed to the function. You have to use "this" as the object to store things on in both the Post function and the increment function. Variables declared with "var" will simply disappear after the function ends, because you haven't assigned them to anything.
I think I see why I'm not seeing this. *this.x++;* is actually enclosed within an anonymous function inside the prototype method. I'm using jQuery as well. Something like this: Post.prototype.increment = function() { $().get('/php/test.php', function(data) { this.x = data; } } in THIS case, does *this.x = data;* imply the parent object or the anonymous function within the $().get request?
Thanks! Will check them out. 
this can actually be very entertaining. If you call a base function (without passing any object as reference) you can use this to create static variables. Helps to keep from having to use global variables to track certain things.
It looks like you polluted the global namespace. Inside the a anonymous function there is no explicit receiver. That makes `this` the global object in that context. var bar = function () { console.log(this.attribute); }; (function () { // this is the global object (window) this.attribute = "testing"; bar(); })(); console.log(attribute); 
ah - well yeah, that does make a big difference. The value of this inside that anonymous function is completely dependent on how jQuery decides to call the function you gave it. It probably calls it like this, where "callback" is your anonymous function: callback.call(request, data); This would make *this* into the request object inside your anonymous function. So the mysterious internal object that your x value was being stored on was probably the request object in this case. The easiest way to get around this problem is to recognize when you're going to be using callbacks and store the value of *this* in the outer function for use inside them. Like so: Post.prototype.increment = function() { var self = this; $().get('/php/test.php', function(data) { self.x = data; } } 
`This` is set by the caller, so its value depends on the caller of the callback function. JQuery could set `this` to whatever it wanted. However it seems impossible that it's setting `this` to the instance of your post as you expect because the library couldn't access it (you didn't send it in, and it's not accessible from global scope).
That means they must mention the world "cloud" twenty-two hundred times!
Okay, thanks. That actually is pretty relieving as I've been fighting it for awhile and figured I was just failing to grasp something simple. Appreciate the help.
I appreciate the help. I hadn't been considering jQuery was stepping in and stomping on my stuff. It makes sense now that I hear it, though. Thanks.
I think it's reserved for &lt;button&gt; and I was using the name of that function from an exmaple I was reading about the chrome api
Thanks, this helped. 
This is interesting. And it confirms the intuition that the very high level and powerful strike methods are heavy for the processor. I don't know if big optimizations are in view in the canvas code in order to make those methods fast. But the title is misleading : what is cached is not the path but the rendered path (as an image).
I've [published part 2 now](http://www.reddit.com/r/javascript/comments/j354d/easy_functional_programming_in_javascript_with/): reduce, select, all and any.
like reddit addiction?
My issue with `this` is not that it's complex (as you say, it's not). It's that the standardized behavior is complete shit and utterly useless, especially in relation to instance methods: javascript essentially does not have bound methods (unless you create them explicitly) and that's an absolutely painfully idiotic and useless behavior. Essentially, javascript's `this` uses some weird form of dynamic scoping, and implicit dynamic scoping is *bad*.
This is a really good explanation about what the "this" keyword means in Java. When possible try to avoid using variables with the names of "that" (way too close to "this") -- I prefer "parentObj" or, if you need fields, defining them outside the declared function. var foo = this.foo; var handler = function () { ... // uses foo }
&gt; This is a really good explanation about what the "this" keyword means in Java. Careful, `java != javascript`.
This seems pretty awesome if it is real.
WTF? Care to explain?
this
This is not a free optimization. This form of "caching" is actually rasterizing, and will have reduced quality when applied in any context which is not the same scale and orientation. It might even cause anti-aliasing issues when rendered at the same size and orientation if the "cache" makes use of the alpha channel. I would recommend it if you have a complex rendering for a small onscreen object that will be rendered and rerendered hundreds of times. For larger objects, the errors are likely to be more visible. For less frequently drawn objects, the added complexity of a second buffer will outweigh the performance benefits. I used this technique in my game, [Runestone Wisp](http://runestonewisp.appspot.com) for all the map objects except the Wisp. (The Wisp is never drawn the same way twice.) I was nervous about the performance of the canvas.
The code is not very clean, and there are some functions missing, but it is definitely real!
These are great, skilldrick. Keep them up!
I can't figure it out, but in the handleTabs function there is a chrome api with a callback function to 'fuck'. The window gets created, the function fuck is never called. Console Log: * false * popup.html:37 ReferenceError: newWindow is not defined * popup.html:23 true * popup.html:37 ReferenceError: newWindow is not defined * popup.html:8 209
I know you won't take me seriously, but I'm you (or is it me, or us) from the future! Be warned, your code has grown much larger in my time. So large in fact it appears to have an artificial intelligence, at least it acts as it has a mind of it's own. No one understands what's going on! We've identified where this tangled labyrinth of machine all started. It was when you named your callback function "fuck". I can't prevent the future without your compliance, please sanely label your methods! Your future depends on it. Also your future co-workers want me to kick you in the dick. But I won't because I know how much it hurts! Back when I was your age someone crazy bastard kicked me in the dick while mumbling some gibberish about "maintainability" -- Whatever that means.
heh, I understand. It was 'newWindow', but I changed it to fuck because it was pissing me off. Have an upvote though.
A few more things (on top of my other comment)... 1. Disclaimer: I'm not primarily a Javascript person / nor do I make a lot of Chrome Extensions. 2. If this is a small project and you can put it on bitbucket or github, it'd make sharing the code with us (for instance a manifest.js) a lot easier, and reduce the barrier of entry for testing/debugging. ** As far as the problem with your code: ** *chrome.windows.create* has a *createNewWindow* callback... a few lines later we try to use the return value of this to set the value of *newTab.windowId*. The problem is that *createNewWindow* or as you call it *fuck* is being called asyncronously and might actually return a value AFTER the line of code below. The value we're assigning to *newTab.windowID* doesn't exist. If you break apart that code into it's own function (or place it in your callback) you should be good. === **TLDR**: function *fuck* may not be called until after 31-35; so move lines 31-35 into *fuck* or a create a new function and have *fuck* call it. 
You're right. I was thinking this before, but forgot that console.log(Window.id); wouldn't write anything if it doesn't exist yet. Thank you for helping me. 
The value of the grouping operator (obj.f || true) is determined by first evaluating the binary logical operator ||. When evaluating this operator, you first evaluate the left hand side. This result is a reference with a base of obj and a name of 'f'. At this point you know nothing about the value of obj.f so the || operator calls getValue on this reference. This asks obj what the value of f actually is (in this case, a function object). The || operator then checks to see if this value is truthy, and if so, returns the value, and if not, returns the value of the RHS instead. So here we return the value of obj.f, which is critical, because when you're calling a function it checks first to see if what you're calling is a reference so it can set the proper this value if needed. Since all you have is a value now (just some function object, maybe it's a member of an object, maybe 100 objects, who knows), you can't know what to set the this value as and so this becomes the global object. By contrast, when you do obj.f(), you first evaluate the member expression obj.f, which returns a reference. You don't have the or operator calling getValue on it so the function call sees a reference and knows to set the this value to its base (obj).
Again thank you and no I wasn't too lazy to read. I do have it hosted on bitbucket, but I don't like others writing the code for me because then I don't learn anything. 
No problem. -- If I would have had a manifest.js I wouldn't have had to make my own just to get your debug stack; so it would have saved 5 minutes and if was busier at work possibly my ability/willingness to help. I'm not trying to be a dick [completely], just making a suggestion that may help you out long-term too. 
I don't think there is such a thing as a "base function." What do you mean by that? The only way you can create something like static variables is if you set them on your constructor: function MyClass(){...} MyClass.someStaticVariable = 10;
Try to avoid using variables like "parentObj" as it is a lie. It is not a parent object. Use "that" or "self" or "t" since "close to this" is what you mean. Edit: I think self is technically reserved though. So I prefer to use "undefined". ( :) )
ES5 Section 7.6.1.2 does not contain self, so it's good to use. I should really make an EcmaSpec vanity account...
I also use XHR and JSON with MooTools. One thing that I have found quite handy with regards to strings and escaping and what not is to **base64 encode the string** on the server, then decode it on the client. This next bit is kind of a Hack and definatly not proper json; but it works nicely because the base64 decoder adds to the strings methods a .fromBase64() and .toBase64(): obj = eval('{ "str":"SLKJFSL4LKJOSDI9084==".fromBase64() }'); 
Totally useless, no one has ever built anything awesome in Javascript /s
That's awesome.
Firebug in firefox or Javascript console (control-shift-j) in chrome use it, live it, love it
Firebug requires that I visit each page on the website, I want the tool to spider the site like Xenu does.
Dump your J's files into a jslint
Won't actually test that it works on a real page. (Missing ids, string errors, etc.)
Pretty sure you could script up Selenium or something similar to crawl your pages, checking functionality.
`rhino`. `rhino` is a command-line tool for validating (and running) javascript files. It also has a -strict option, which will complain about even the smallest problems. Write up a bash script that checks every JS file on your site (and add them when you add files) with rhino, and you should be good.
I shared this: http://mclear.co.uk/2011/04/06/introducing-catch-a-multiplayer-html-game/
Place your javascript into an external file. Check it with jslint. As for references, well, dead references can be a pain, and the only way is to test your javascript.
Use jasmine for bdd style testing with awesome syntax. Check it out at pivotal.github.com/jasmine. 
Override the general error handler in JS and have it send errors messages to your server via AJAX. You can do this in the code natively. Either let your users be the "crawlers", or use some other automated crawler or testing utility that opens and runs pages as if in a real browser. If your site is fairly simple, you could probably code up your own crawler using Greasemonkey fairly quickly.
This - it's the only way to truly test the JS, when accounting for external data, user input etc. Some browsers have window.onerror; in all of them, you can wrap everything in a try..catch and post the errors back to your server.
You should be unit testing your web pages, then you will get Javascript errors caught for free :D I use JWebUnit.
You're a complete moron.
TestSwarm is also worth mentioning. From the jQuery folks. It's a nice way to run unit tests on all browsers. You can set it up with a CI system like JenkinsCI so that all tests are run in all browsers everytime the code is changed.
But, wait... http://dev.el-mekki.fr/testing.png
Let me get this straight... You run a site, and don't want to actually look at the pages? If they are just dynamic pages I can understand, but you should only have to test one or two.
Checking the pages in my browser will only show errors for the browsers I have. Each browser interprets Javascript differently, a good piece of software would test it more thoroughly. So yes I look at the pages, but not all of the pages in every browser.
what is a test spie (spy?)?
Looks like Selenium is the winner here. I think I looked at Selenium before but it looked like quite a steep learning curve. As a pretty rapid/sloppy developer I don't want to invest too much time into this. If I was to ask someone else to do this work what type of questions should I be asking them? Or would you guys suggest that I also write the tests myself as a priority? I guess the question is something along the lines of how important is it that the person who writes the code also writes the tests? Do the developers here have a team that writes the code and a team that writes the tests or do they tend to be the same people? Thanks guys!
if you use Firefox, just use Firebug, if you use Chrome (use command + alt +i) if you use MSIE, change your browser :)
this isn't always true for javascript newbies, it's a bit confusing sometimes, I'm not saying you're completely wrong, but I totally understand that some people have a hard time understanding the concept, which is sligthly different thant in Java or strong typed languages, check this :) http://jsfiddle.net/julien/dhf3Z/
Cheers - much appreciated :)
I already stated why using firefox isn't an option.
At my office we have engineering developers, infrastructure developers and then integration developers who write all the tests. Its the best team setup Ive ever been a part of. 
Interesting idea. Why even use eval(''), though? Seems redundant.
Nevermind, I fixed it: $(".res-cctv").tooltip({ effect: 'slide', offset:[91,115], relative: true, position: 'center left',});
I do frontend deveopment (mainly JS) for a living an I've never really run into a problem (on one of the top 25 sites online). As long as you spot check you should be fine. You could setup a script that logs client-side errors by utilizing onerror.
It's not just slightly different, it's completely different... until people realize that it's hard to understand. Your example seems to illustrate bullet point 1 and 3.
The eval is for converting the string received from the server into a javascript object. Unless you use jquery/mootools/etc built in XHR request/response functionality you will need to use your own eval on the xhr.responseText to convert the string into an actual javascript object. ex: make request -&gt; receive response -&gt; eval response -&gt; use object my example was showing what would be inside the xhr.responseText it would look more like: **obj = eval(xhr.responseText);** or **eval('obj = ' + xhr.responseText);** where xhr.responseText contains the string from your server: '{ "str":"SLKJFSL4LKJOSDI9084==".fromBase64() }' Of course your don't need to include the .fromBase64() directly in the responseText. It could also be done like this: **1. Request:** ?xhr=getGraphData&amp;... **2. Response:** '{ "str":"SLKJFSL4LKJOSDI9084==" }' **3. eval:** gData = eval(xhr.responseText); **4. Decode:** gData.str = gData.str**.fromBase64();** **5. Use:** div.innerHTML = gData.str; ***note*** this does not fix the script tag problem when setting the innerHTML it will still cause the DOM to evaluate the tag. I use encoding/decoding mainly for quotes and newline characters which would otherwise break json/eval
Is the font size larger for anyone else using this update? It threw me off when I first opened it.
Seems like it to me. I wonder how you change it. To the Googlemobile! EDIT: It says "Alt + Ctrl + -" in Firebug.
FirePHP doesn't work with it. Had to install the previous version.
that version of FirePHP doesn't support Firebug 1.8+ &gt;This extension supports Firebug 1.5 to 1.7 only. For Firebug 1.8+ use DeveloperCompanion instead. See http://docs.sourcemint.org/firephp.org/firephp/1/-docs/Clients 
Thanks GordonFuckingFreeman, I'm considering a few approaches. Will aim for the laziest. 
A test spy is a function/method that makes its job but records calls, arguments...
I got as far as "When one of their heads was **cutted off** two grew back."; surprised I made it past "mithological" really. Seriously, why should I be confident that you can design an API with appropriate nomenclature if you cannot consistently spell or apply correct grammar? Indeed a cursory look through your API and I must conclude the naming sucks. 
I'm pretty sure English is not their primary language.
Heil Hydra!
Yeah I figure; I didn't mean to be harsh but that type of thing *is* going to pretty much stop me in my tracks. I'll just join all my little pedant friends… ^_^
Fine, but spell-check? If a developer can't even bother to spell-check things I am not sure how comfortable I feel using his code...maybe I am being a bit pedantic...but, well...I'm going to be pedantic :)
For completeness: * Alt Ctrl + increases the font size * Alt Ctrl - decreases the font size * Alt Ctrl 0 resets the font size
The computed tab still doesn't show you were a computed value came from. Chrome's Inspector thingy added this ages ago. (Surprisingly IE8's F12 thingy was the first tool which supported this.)
Sounds grandiose. How does it compare to backbone? I can't tell, because the google doesn't reveal.
Thank you for your comments. Right now I correct the grammatical problems. I expect you to know Javascript well as English grammar and you can appreciate the work behind Hydra.js. Otherwise, I think this is not the forum to talk about grammar. Sorry! Update: Fixed. https://github.com/tcorral/Hydra.js/blob/gh-pages/index.html
As you say, my first language is not English. I'm from Spain. Thanks, "plantian". 
Also store a map of URIs and whether or not an error has occured in an object and put that object in a cookie. After the main program select another link on the page that isn't in stored in the cookie already and have your script proceed there. After it's dont just check out the cookie in the console or on the server to see which URIs have had errors. This would be should spider the whole site if you choose the "next" link wisely
You must be really stupid not being able to describe precisely what you want. On the other hand you should/could use jQuery: jQuery("#rightSidebar").mouseover(function(){ jQuery("div#stupidMessage").fadeIn("fast"); }); div#stupidMessage should be originally {display: none;} and it should have some sort of a "close" button.
Meaning?
cockhead
Check your facts. "click" is [not reserved keyword](http://javascript.about.com/library/blreserved.htm), [nor it's predefined class or object](http://javascript.about.com/library/blclassobj.htm), [nor it is global property or method](http://javascript.about.com/library/blclassobj.htm) in JavaScript... 
For the hover, there's heaps of jQuery tooltip plugins, search Google for one you like the look of.
The website uses jQuery UI for the [Resize effect](http://jqueryui.com/demos/resizable/#max-min) and [jQuery Easing Plugin](http://gsgd.co.uk/sandbox/jquery/easing/) for smoothing transitions. To get the same effect you will need some work though!
jQuery Easing us now bundled Into jQuery UI (full version or custom build) so just use the UI plugin. The easing works exactly the same.
Thanks for pointing that out. I just looked at the javascript plugins used in the source code.
Are you 12? This is not Facebook. Talk like an adult.
I see, you are getting the string from XHR. In that case, why bother with Base64? And then you're using innerHTML... if you're worried about script tags, why not use innerText or an equivalent?
thank you but thank you
WTF is this even supposed to do?
Novel, but doubt I'll need it.
Pretty horrible page. Ugly distracting animated header on every page. Cute (but confusing) animated 3d buttons (Hi MS Frontpage, we haven't forgotten you!), and a complete lack of focus on presenting the actual project. I clicked lots of shit before I finally found a code sample but it was actually just a jsFiddle page that didn't include much context as to what I was supposed to be looking at. [Broken links](http://terrific.os/learn/module), 3 sentences per page of "content", and an otherwise ugly and broken design (could the font/text be any more gaudy??), and I'm done. Author needs to spend less time making the project page gimicky and cute and more time making it informative. 1/5 stars. EDIT: Here's an example of a 4/5 star (IMO) project posted today: [Hydra.js](http://tcorral.github.com/Hydra.js/); the author of "TerrificJS" should study the Hydra.js page and learn from it. EDIT2: Seems the best source of info about what this stuff actually is would be on the [github project page](https://github.com/brunschgi/terrificjs/), and there is also a [github for OOCSS](https://github.com/stubbornella/oocss/) but I have no idea if they are related in practice or just theory.
What am I supposed to be looking for here?
I gave up trying to figure out wtf TerrificJS or OOCSS was. If someone can figure it out please let me know.
I completely agree their site is not conducive to getting across useful information. On the other hand, what it does is pretty cool. I looked at hydra briefly but their page is so boring I didn't even stick around to find out what it does. [the githubs](https://github.com/brunschgi/terrificjs)
This is a good place to start: [Examples](http://www.terrifically.org/learn/play)
Short Version: a way of encapsulating functionality Check the [examples](http://www.terrifically.org/learn/play) to see it in action. I didn't really know what it was until I looked at those.
I believe "OOCSS" is _OO-CSS_ aka. _object-oriented CSS_ **_\*shiver\*_**.
Point was that Hydra's page 1. tells you exactly what it's for, 2. how to use it, and 3. where to get it. That's the basics of what's required, and they nailed it. Can't find but #3 on the "TerrificJS" page.
Yeah, I gave it another look when you mentioned it and agree with you. I just thought it was a particularly boring page for something that is actually really great.
Oh ok, thanks... For the record I expected "Learn more" to teach me something relevant about wtf this thing is. I never dug into "Play" because I can't play unless I know the rules.
That's what it stands for, but the idea is you write modules (objects) that you can then add other modules to get the specific styles you want, rather than writing extremely specific rules. I would classify it as good techniques with a misleading name.
I think I did the same thing :(
Think I will send the authors a link to this thread.
This is the Javascript spec in extreme detail. I think the audience here is beginning spec junkies -- those who would like to get involved in ES.Next or something similar. Notice you've got ECMAScript heavyweight Allen Wirfs-Brock adding to the discussion.
What is this, a relevant description of the content that I could expect to find? I guess that's too much for the OP to worry about... Didn't know what I was looking for, so this is the mental list that I ran down to try and figure it out: * a glaring omission * a glaring bug * a glaring BC break * a paradigm-shifting change * a paradigm-shifting addition * a flamewar in the comments If there's nothing special regarding the linked article (e.g. the OP isn't attempting to steer us into a discussion of something), then deep-linking to a specific article is a disservice as it a) makes readers think they are looking for something specific, and b) doesn't give readers the larger view of what to expect (these problems could be alleviated by a clever title, but unfortunately the OP isn't clever). If what you say is true, and the goal was to introduce us to a superior page covering the ECMA spec, then the OP should have linked to [root of the site that contains these articles](http://dmitrysoshnikov.com/ecmascript/) to demonstrate that there is not 1, not 2, but many good articles. Sorry, it's Monday and I'm being grumpy, but I bore of these submissions which just throw up an obtuse link and expect the world to read their mind as to why it's posted.
not sure what you're asking. this is pretty straightforward stuff. the input is hidden until you click the magnifying glass, then it comes up, probably absolutely positioned via css. whether or not the glass opens, closes or searches is a result of 2 questions being asked: is the search input hidden? does it have text in it? only 4 possible answers. hidden/no text: show it hidden/text: show it showing/no text: hide it showing/text: search (so hidden will always open it, showing depends on if there's text or not).
I feel like this would benefit **enormously** from a one page overview of how it all pieces together. I think there are some good concepts here, but they are obscured by an excess of text. Does anyone know of a concise overview of this?
There's 110 ways to do this... Here's an example using an Immediately-Invoked Function Expression to encapsulate a dom reference variable. This would prevent scope pollution and provides a simple means to keep track of the active link so it can be deactivated. This really only works for what you are trying to accomplish above, though. It probably wouldn't scale very well if you want to increase the complexity of the JS... http://jsfiddle.net/rmZM5/
I understand the logic perfectly, I'm just new to the language and having trouble actually coding it. 
I'm a complete newbie, so I thank you tremendously for this. One more question - how would I set it so a link as the "selected" class on page load (blueText), but then it's class would also revert to redText upon clicking a different link? Thank you again, and feel free to PM me your paypal email if you'd like a small reward :)
No reward necessary, glad to help (thanks for the gesture!). You could simply make the changes here: http://jsfiddle.net/rmZM5/3/ If the only purpose of this page is to control the link classes, this would work perfectly. If you plan on getting any more complex, there's things like inline function calls and dom manipulation you would probably want to change. It's generally a good idea to separate your JS code from your html when you can.
I think u need a HTML element instead of ID string in there.. http://jsfiddle.net/rmZM5/4/
Okay actually what I'm stuck on is keeping the search button from searching when you click it to display the input.
Good call, thx for the update.
no, "click" is a **type** in the event-object, as your source says. you can try it youself: HTML: &lt;div id="foo" style="width: 100px; height: 100px;"&gt;bar&lt;/div&gt; JavaScript: document.getElementById("foo").onclick = function(ev){ alert(ev.type); } there is nothing stopping you defining a method named click. It works [on Firefox, Chrome, Opera, IE](http://www.cs.helsinki.fi/u/tkairi/kuvat/click.png)... So, check your facts
It was developed by a .NET developer. I know it only by looking at the example. I have no idea what problems this suppose to solve or how to use it.
Oh my, you can explain `this` and also have a thing for usability? A true FED you are!
Cool, maybe not the most detailed explanation but, I'm sure, one that will help a lot of new comers. I know I had my time with `this` and trying to figure out how it works, and the way you describe it is basically the mental model of `this` I have in my mind.
In my criticisms of the page itself, I forgot to say that I think the content of this submission is good and so I'm upvoting you for that; I don't want to _shoot the messenger_...
I just wanted to express my regards on this hideous task you have at your hands. May the gods of sensible code will smile upon you and guide your bosses and your godforsaken project towards Chrome and other modern browsers.
I have a well-worn copy of "The Design of Everyday Things". Doesn't everybody? ;) What's FED?
OOCSS is not a specific implementation, but rather a theory of how to do things. I think the OOCSS github is just a few examples of that theory in practice. As far as I can tell terrificJS and OOCSS are only related in how they approach problems.
I think that thanks to the fact that it has such an easier to swallow introduction and perhaps even that image, really helps to continue reading something that at first looks quite uninteresting. The fact that it's on the familiar Addy's website makes sure that I'll at least try to get the general idea behind his article.
I'm intrigued. I wonder how worthwhile the certificate would be as continuing education. Edit: From the syllabus &gt;Prerequisites A solid understanding of probability and linear algebra will be required. Uh oh, I've not used either of those mathematics skills in a decade. I think this might require 20hrs/week as I relearn that stuff too. 
are you using a library or raw js?
Nailed it. It happened exactly like that to me, and since then I'm just having fun with Javascript.
Damn. You've just described me. Down to the fixed-gear bicycle. Freaky
jquery. My coworker suggested basically an invisble button over the submit button. I did think of that its just I'm not familiar enough with the scope of js to know if there was a better way.
This is the pseudo-code in jquery: $("#magnifyingGlass").click(function() { if ($("#q:visible").length == 0) { // if the input isn't being displayed $('#searchBox').show(); } else { if ($('#q').val().length == 0) { // if the user hasn't input anything $('#searchBox').hide(); } else { // the user input a search term document.href = 'search.cgi?q=' + $("#q").val(); } } } Obviously you'll want to modify it for your needs, but that's the gist. 'magnifyingGlass' is the ID of the magnifying glass image 'q' is the ID of the input field 'searchBox' is the ID of the div containing #q
Khan Academy should supplement this course nicely...
Ok, a few things. 1. If you are going to say your new framework is the "definitive" modular architecture, you might want a few sentences about how you differentiate from your main competitors. Looking thru the source, I see nothing new at first glance. 2. You have @author Tomás Corral Casas in the code 26 times. For some odd reason that really bothered me (not sure why) 3. All your modules run thru a try...catch, i cant imagine this is fast 4. Your API documentation link is 404 on you github page... 5. You look like you are trying to poorly recreate YUI. Maybe watch http://developer.yahoo.com/yui/theater/video.php?v=zakas-architecture 6. List the compressed/uncompressed size. As a user trying to quickly evaluate a library, i dont want to have to do this myself. All these things, along with the "definitive" claim make me not want to give this a shot. And who knows, it might be great! But it needs some basic polishing before many developers are really going to take it seriously. 
Why back to XML/JSON? Why would you want to do something like that? Well, generating a form is pretty easy. All you need are a few client-side templates, some simple template engine, a simple function which renders the whole thing, and of course some JSON. http://kaioa.com/k/td/generators/form/index.html The templates are stored in the document itself. It uses underscore's template function. The whole magic happens in a small function at the end of *formGenerator.js*.
Take a look at XForms, specifically http://www.agencexml.com/xsltforms latest SVN version. Here's a brief tutorial I wrote: https://docushare.xerox.com/dsdn/dsweb/View/WeblogEntry-42
http://www.khanacademy.org/#probability http://www.khanacademy.org/#linear-algebra
Good find. Thanks a lot!
I'm interested. I took Intro to AI at UC Berkeley and did okay, but I had the off-season lecturer and never felt completely comfortable with the the second half of the course. Thanks!
I/O Docs !!!
MIT OCW has excellent materials on both of these subjects, if you're good at being a self-directed student, I'd recommend these above the Khan Academy materials.
Hi k3n Thank you for your feedback (although its quite excoriated ;-)). We are already aware of some of your points (header on every page, examples should be more prominent) and I will change them as soon as possible. In the meantime: maybe the best starting point is the presentation from my last blog post (http://www.terrifically.org/blog/20110715/3-2-1-launch) … and to get familiar with OOCSS, please take a look at https://github.com/stubbornella/oocss/wiki/ or http://oocss.org/ Hope this helps Cheers Remo
what does that even mean? "Today I learned, not a single fuck was given" is not coherent sentence.
&gt; Sorry, it's Monday and I'm being grumpy, but I bore of these submissions which just throw up an obtuse link and expect the world to read their mind as to why it's posted. Thanks for the feedback, it won't happen again.
This is pretty common gotcha. What happens is, your JavaScript-function does get invoked but in the mean time, also the submit gets send. You need to prevent the button doing what it normally does with jQuery: $("#magnifying-glass").click(function(event){ event.preventDefault(); // &lt;-- important line doOtherStuff(); $("#query").submit(); // re-submits the form (I'm assuming you're using form to send stuff to backend) }); 
So how does this exactly work? Do you actually have to do assignments or a final test or can you also just observe? I'm very interested in this but I have a feeling i might don't get anything of it.
agreed, ok ... I often reply to fast :)
assuming &lt;input type="text" name="textInput" id="textInput" value="" /&gt; &lt;input type="submit" name="submitBtn" id="submitBtn value="submit" /&gt; code: $('#submitBtn').click(function(e){ var $textInput = $('#textInput'), isHidden = $textInput.is(':hidden'), inputVal = $textInput.val(), hasText = (!inputVal.length || inputVal.replace(/\s+/g, '') === ' '); /* no length === empty string, plus some browsers like to leave one space in string replacing if someone only input spaces */ if(isHidden){ // hidden, nothing else e.preventDefault() &amp;&amp; e.preventDefault; $textInput.show(); } else if (!hasText){ // not hidden, no text e.preventDefault() &amp;&amp; e.preventDefault; $textInput.hide(); } // anything else submits }); EDIT: needed to see the code in something other than this tiny box to make sure it was formatting right; it wasn't. 
Nice! Gonna give it a shot.
Why is this in r/javascript? ;-)
revolutionary!
Nice to be able to test in line.
Also, more freezing while debugging the crappy autogenerated js by Telerik. Nice feature!
Thanks so much, and thanks for taking the time to explain it to me, seeing it all these different ways is really helping me understand. super grateful.
Thanks so much, and thanks for taking the time to explain it to me, seeing it all these different ways is really helping me understand. super grateful.
That's no excuse. Spanish is my mother language, too, and I can't see why wouldn't you take the time to learn proper english. _gawd_ it's elemental at programming world.
Thanks so much, and thanks for taking the time to explain it to me, seeing it all these different ways is really helping me understand. super grateful.
Every API should have this kind of live doc. 
nice to see the exact response
I dig it the most
From what I can tell a test spy is a Mock Object.
pretty cool... this is game changing
JSLint is a good tool. You can integrate it into your build (I used a Maven plugin), which I find to be quite helpful.
This maybe? http://ajaxian.com/archives/inputex-json-form-builder
the end result is not the same and **you** will know better next time
Why not check the code, to make a real estimation? I'm not a .NET developer! I'm only using camel notation with Hungarian nomenclature! Programming techniques! Please check the code, the examples, the api, the documentation in jsDoc...
ಠ_ಠ I'll play ball. Where the link to the code? (hint: I don't want to download anything...)
Hmmm. So here's a jsFiddle representing what's on my site http://jsfiddle.net/rmZM5/20/ and it works fine. Now here's my site... http://nerdi.net and it's not working. Check line 248 for the JS and 325 for the HTML. The only difference is that it's in a &lt;UL&gt; and &lt;LI&gt; ... Any idea?
Didn't know about playmycode. Looks interesting, thanks. :)
hrm this would be useful for [this game](http://mclear.co.uk/2011/04/06/introducing-catch-a-multiplayer-html-game/)
I feel like this is easier to understand than the current fiddle http://jsfiddle.net/rmZM5/21/
Interesting... implemented it here: http://nerdi.net with no success. JS at line 248, HTML at line 324
That site uses jQuery you could make the process a bit simpler by using that. But document.getElementsByTagName('a'); returns 23 nodes, do you want to use it against 23 links? a jQuery version would look like var links = $('.category_filter_list a'); links.click(function(e){ links.attr('class', 'button brown'); this.className = 'button red'; }); that should probably work
No luck... fucking weird. Still, I'm convinced you're a wizard. Teach me.
I posted that code into the console and it worked as expected
For your specific example: For plain javascript you would listen on a parent element. So if you have: &lt;div id="container"&gt; &lt;span class="clickable"&gt;a&lt;/span&gt; &lt;span class="clickable"&gt;b&lt;/span&gt; &lt;span class="clickable"&gt;c&lt;/span&gt; &lt;/div&gt; You would listen for click events on "#container". If a ".clickable" is clicked, the event will [bubble up](http://www.quirksmode.org/js/events_order.html) to the "#container". The event will have a property called "target" which will tell you which ".clickable" was clicked. This means you won't have to add events to every span, or manually add events to html content returned as part of an ajax request. For jQuery, they have the [delegate()](http://api.jquery.com/delegate/) method, which I believe is the preferred way to handle it currently. In general, I find the best way to keep up with best practices is to follow web development blogs. I recommend [John Resig's blog](http://ejohn.org/) and [nettuts](http://net.tutsplus.com/category/tutorials/javascript-ajax/).
I'd recommend looking at posts on the difference between jquery live/delegate/bind [like this one](http://www.alfajango.com/blog/the-difference-between-jquerys-bind-live-and-delegate/) . I'd also recommend looking up DOM event bubbling because it's pretty interesting and good to understand.
There's no function called getElementByTagName, only getElement**s**ByTagName (note the plural), which returns a list of elements. Assuming you have the element: &lt;audio id="song" src="mymusic.wav"&gt;&lt;/audio&gt; You could use one of the following: document.getElementById("song").play() document.getElementsByTagName("audio")[0].play(); The "TagName" in "getElementsByTagName" refers to the type of the tag, "audio" in this case. I suggest heading over to [Stack Overflow](http://stackoverflow.com/) for future questions. Also, look into troubleshooting javascript using either Firebug for Firefox or the Web Inspector for Chrome. It will tell you when you try to use a function that does not exist.
The first one worked. I swear I tried that combination already! I'm burned out for the night. Thank you a ton Blazeix for the response. Much appreciated.
Off the top of my head here is the short list of the most important things to keep in mind when dealing with JavaScript and jQuery: **JavaScript** * Don't pollute the global scope, wrap your work in a closure and only expose what you need to on the global window object. * Understand the DOM API and the limitations it imposes when considering multiple browsers. * Load scripts at the bottom of your page near the closing body tag, or better yet, use an asynchronous script loader that knows how to defer loading of scripts until the DOM is ready (aka: all the page content has loaded). * Don't jump right to jQuery to solve your problems, many problems can be solved with JavaScript itself. In the same train of thought, use jQuery for what it is good at: DOM manipulation and a nice ajax abstraction. * Understand the HTTP verbs, AJAX, and caching implementations (ie: GETs are implicitly cacheable). * Learn to use Firebug and the Webkit Inspector, they are your best tools. **jQuery** * *Cache references* to selectors instead of re-querying the DOM for the same selector string. * Understand *event delegation* and how it can help you simplify event binding. ($.fn.delegate) * Don't use jQuery to manipulate style with .css, instead use it to add and remove classes ($.fn.addClass, $.fn.removeClass, and $.fn.toggleClass) * Avoid nesting callbacks, it creates code that is hard to test. Instead, consider defining callbacks as references to named functions stored elsewhere. * When creating DOM elements on the fly, use well formed markup. Hope those help you with some context, googling any of those should bring up a good list of things to research. If you need a good starting point I'd recommend [jQuery Enlightenment](http://jqueryenlightenment.com/) and the newly released [JavaScript Enlightenment](http://www.javascriptenlightenment.com/), both by Cody Lindley. 
https://github.com/flatiron/jsonForm
[JavaScript best practices](http://dev.opera.com/articles/view/javascript-best-practices/) [Stop misusing return false](http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/)
&gt; Personally my response would be no, you introduce in your stack a **very big point of failure** And that's why I don't use them. The problem with all of these loaders is that they require *scripts* not *things*. It's easy to detect the existence of an object but it's much harder to detect if a script has loaded.
That's not true if, at compile time, you're familiar with the purpose of the loaded script. You can easily duck type check the module/class that you've loaded to ensure that it's loaded properly.
YUI's module loader framework is fairly robust in my experience.
a simple little script
Interesting. I just started using Modernizr/yepnope. I really like it. It tests fine on IE6/7/8/9 FF3/4/5 Chrome12/13/14 - seems the author 'stubbed his toe' a few times with script loaders and just wrote them off as a bad idea. IMHO, if you're doing a web app that requires javascript the only reason not to is if you haven't budgeted for QA/testing and can't afford the extra debug time.
Interesting article! Thank you for sharing.
my 2 cents in addition to the already listed: * divide your JavaScript to several files with *meaningful names* to avoid large, multi-hundred source files. * Keep in mind the load time of your JavaScript with [YSlow](http://developer.yahoo.com/yslow/) or similar. Know about minifying and gzipping javascript for more optimal perfomance
Hehe I did stubbed my toe a couple of times, generally it's not a good sign in the coding world :P , Modernizr is an interesting script, its seem also maintained by a group of people vs most script loader (from what I know). Well if you maintained one web app it can work, but for web agencies and people with multiple products, it just seems risky. But maybe loaders are a lot more stable now..
Ah, finally got it to work. the js/jq had to be in the body AFTER the links. thanks again for the help!
I didn't want to get into details over an anecdote, but since you mentioned agencies when I said "I just started using Modernizr/yepnope" what a I really meant was "We started evaluating its use at work". I work at a medium sized agency :) We're trying to decide if it's worth it to include Modernizr (with yepnope) in our default starting templates or if it's not worth the effort. Thus far I think we're more leaning towards it than away. Again though - I don't think we'd even consider it for a project with a very conservative budget.
&gt; Cache references to selectors instead of re-querying the DOM for the same selector string. I don't know why, but this is the hardest point to drive home to my team. I've gained limited success when I point out to them that `jQuery()` is a factory method, but there are some that insist on re-querying the DOM for each and every line they write :\
Some general advice: * [jQuery Tips and Tricks](http://stackoverflow.com/questions/182630/jquery-tips-and-tricks) * [What should every JavaScript programmer know?](http://stackoverflow.com/questions/2628672/what-should-every-javascript-programmer-know)
Concatenated and minified files are better in my book for this one reason: **reduced number of connections**. The biggest constraints with JavaScript on the front end is getting the script to the browser. Most connections are fast enough to download a 100K JavaScript file before the engine has gotten far enough to do too much meaningful painting of the screen. You don't want to hong up the number of available pipes with a bunch of tiny script files. Let the browser be concerned with downloading images, CSS and other non-interactive resources. And unless you're trying to cram 100% of your desktop functionality into a mobile device you don't have to worry about parsing time. Add a concat and minify stage to your post build (never pre – you want your tests to pass before you care about minifying) process and add some flags in your code to automatically include raw or minified code based on build environment. Then never think about this problem again. 
Supposing you're using jQuery: $.get( ..., function(url) { $.prettyPhoto.open( url + "?iframe=true&amp;width=100&amp;height=100", "modalTitle", "modalDescription" ); });
Yes you can do this. You can use jQuery UI to get the modal window bit done in very very few lines and then putting an iframe in there is super easy. [jQuery UI](http://jqueryui.com/demos/dialog/#modal) Of course you could do this all in regular javascript too. I would suggest if you wanna learn about the how it works you try to implement this without a frame work it can be alot of fun on a saturday afternoon :) 
Concatenation makes caching less effective if you don't use it right.
Use the live() method to bind events to all matched elements currently and any that may be added in the future
I don't completely understand what's going on, but I like it..
I've done quite a bit of research and testing into parallel async loading. My research all points heavily to the fact that two 50k files loaded in parallel will almost always load faster than a single 100k file. Now, I don't advocate loading 10 files in parallel -- that's crazy. But if you take all your code and combine it into one file, and THEN split that file in 2-3 chunks of ~equal size, and parallel load them, you'll almost certainly have quicker load time, *EVEN WITH HTTP OVERHEAD FACTORED IN*. Moreover, grouping all code into a single file ignores the fact that most sites have at least two "classes" of scripts: stable scripts (jquery 1.4.2 is never ever going to change) and unstable/volatile scripts (your UX tweaks for your site). Why on earth would you cache those the same amount of time? Every time you tweak 1 character of the volatile code, you force every single user, on their next visit, to re-download all that stable, non-changing code again. Absolutely silly. Cache the stable code for a long period (1yr+), cache the volatile code for much shorter (like 1-2 weeks). You can't do that with all one file, you need chunks loaded in parallel. Another reason script loading makes sense: don't load all your code in one file at the beginning of page-load... statistics show that as much as 80% of JS is not used early on in a page. So it's a complete waste and slow down to load all that at the front. Instead, load a smaller chunk of code for bare minimum during page load, and load the rest in one or more chunks as the user starts to interact with your loaded page.
The simple solution to the debugging issue the article points out is to turn off XHR loading in LABjs for your dev environment. This is well documented. Also, browsers are getting better about that sort of thing.
&gt; IMHO, if you're doing a web app that requires javascript the only reason not to is if you haven't budgeted for QA/testing and can't afford the extra debug time. Eh, this is the reason for ~75% of my decisions. 
Thanks for convincing me I'm not mad. That's exactly what I was doing but the modal never seems to open. I've used Firebug and it steps right up to the call to prettyPhoto.open and then seems to "crash" as I have an alert right after the call and it never reaches that. I found a thread which covers the thing I am trying to do. I'll try a couple of those solutions tomorrow. Cheers! edit: forgot the link: http://forums.no-margin-for-errors.com/discussion/263/how-can-i-open-a-lightbox-by-a-function-call/p1
I agree with all of that. Except the italicized caps. Research aside I can tell you that in my production app (pretty healthy user base) we split out jQuery and other "stable" code away from the volatile app code. It works well. 
Providing what you have so far would help. Could be a silly syntactical mistake that's causing the 'crash'
Really impressive stuff!
Use .delegate() on a parent element instead and save on the traversal all the way up to the root element.
god damn it, i was about to go to sleep. now i am endlessly entertained by nostalgia
Welcome to Reddit, you must be new here. 
The only problem I have with it (though the same with the one before) is that using X and Z for A and B makes it rather unpleasant to use for people like me with a QWERTZ-Keyboard. Any chance you could change those to something like X and C by default (or using a checkbox to change it to that)?
Wouldn't that cause the same issue with Dvorak? Different keyboard layouts = oh noes...
Explain how :)
I guess so, though I'd say QWERTZ-Keyboards are way more common. QWERTZ is the standard here in central europe, and eastern europe, too, if I remember right. It always bothered me that most webbased games use Z and X by default without giving an option to use an alternative. A checkbox option (or select list if really more than support for QWERTZ and QWERTY is needed) is the only simple solution that comes to mind, aside from full configuration options.
This is how I have it at the moment: $('#submit_fourth').click(function(){ //AJAX SUBMIT OF ALL INFO TO SERVER var url = 'testpage.html'; //&lt;- URL of TestPage which will be returned from AJAX call alert('Data sent'); $.prettyPhoto.open( url + '?iframe=true&amp;width=100%&amp;height=800', 'TestModal', 'FFSPleaseWork' ); alert('Here be pirates!'); }); and the HTML sources are thus: &lt;script type="text/javascript" src="js/jquery.prettyPhoto.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="js/jquery.main.js"&gt;&lt;/script&gt; Where the above bit of code would be in the second script. The first alert displays fine, and as I said, using Firebug I stepped as far as the prettyPhoto call and then.. nothing.
http://www.grantgalitz.org/gameboy/js/GameBoyCore.js
try switching the order of your &lt;script&gt; tags. Since prettyPhoto is a jquery plugin, jquery probably needs to be loaded first. You'll want to make sure the scripts are loaded in the following order 1. jquery library 2. jquery.prettyPhoto 3. your code that uses jquery and jquery.prettyPhoto
It's on [GitHub](https://github.com/grantgalitz/GameBoy-Online)
What's new with it?
It has a new GUI with games preloaded. Also the emulator core has been updated.
QAOP BNM =) Just like in the days of the ZX Spectrum.
Proxomitron and re-write the control keys? Or save the page and run it locally then amend the keys?
I'm not sure there are more QWERTZ keyboards than QWERTY, but I'm sure a lot more Americans are going to visit his site than Europeans
Noob article + misinformation. AJAX is not a "communication protocol", it's a set of technologies that uses either the HTTP or HTTPS protocol. Not to mention that he creates a global variable `gmtTimeDelta` that is never used... 
I haven't even used backbone, but I question his suggestion to add business logic into the view; I usually try to avoid any direct interactions between the view and the model, but that's just my interpretation of MVC. &gt; The server is not holding a ton of resources in memory, allowing you to manipulate them directly through your browser. Maybe in that author's myopic world; let's see, PHP and .NET have native sessions, node.js has frameworks that handle sessions, and Java has servlets. It's only up to the developer to determine what is stored in those sessions, and they could very well persist memory-intensive constructs.
 eval('eval( And I'm not sure I want to!
yeah, these coding competitions are neat, but they need to require the author to submit a thoroughly documented version if they win. I'd actually be really interested to learn why he did that, but it'll take me all day to wade into that minimized js and figure it out. 
I think they meant there were more QWERTZ than Dvorak keyboards. 
It changed games on me a couple of times. I'm guessing that I hit the wrong key, and the select box picked up on that. Other than that, it's pretty damned impressive.
Wow.
Yeah, I actually just looked at the code again and I'm really not impressed at all. Perhaps the coder is a genius, but at least I know when to use `var` (there's not 1 use of `var` in the whole script). Also, it [does nothing on jsfiddle.net](http://jsfiddle.net/yRgub/), and running the JS locally results in an error due to the first bit of the eval string `w=c.width` (_ReferenceError: c is not defined_). So at this point, I think there's either more script that isn't included or there's some other trickery.
His point is that the entire object model representing all the data of your application is not persisted on the server. You can't just call some method on a model directly for example, it has to either be fetched from DB or cache or rehydraded from session data in response to a request. This is in contrast to a backbone app where your entire application lives in Javascript, likely in memory. I'm sure the author is aware of session storage. Regarding business logic in the view, I think what we're looking at is more like the MVVM pattern than anything. The backbone view is more like a view-model, shuttling data and events back and forth between the view (HTML markup) and model. It's a compelling pattern in certain circumstances.
&gt; there's not 1 use of var in the whole script well, in his possible defense, he was trying to keep the progam under 1k in size. But I would still like him to do a walkthrough just because I'm sure I'd learn something.
callback functions
Cool. I had noticed the new GUI. Was curious about what's changed in the core as far as optimization and bugfixes. I didn't realize I could find a change log by checking out GitHub. 
http://jqueryui.com/docs/effect/#option-callback
 $("p").hide(1000,function(){ alert("The paragraph is now hidden"); });
the queue call might be for you also (http://api.jquery.com/queue/)
You left your select box focused on. Just click somewhere else on the screen to prevent that.
IMHO, Backbone is not exactly MVC at all. Typical MVC-way thinking doesn't always apply analogously to Backbone, in my opinion. What are views in Backbone are more akin to controllers in web frameworks like Rails, templates in Backbone are more like views, and controllers in Backbone are more of front controllers ("router"). Backbone views are for attaching logic to templates (something controllers typically do). His approach, IMHO, fits the Backbone model.
Wouldn't that just do it every second and not once the animation completed? 
Just an example of a callback function.
Doesn't really say what it's used for?
I was reading that wrong. Hide takes 1 second to run and then the function pops the alert. 
It puts something into something else.
If you are interested on see how Cutter.js works, you can see it in action on this page: http://vlc-media-player.en.softonic.com/ Scroll to "Softonic review" ,you will see how the code is cut and keeps the HTML original markup. Click on "Read more" and you will see the full content.
I don't appreciate deleting old submissions to resubmit new ones. I'd suggest moderators curtail this sort of behavior.
You could use web workers for some tasks (if you're doing something that takes a second it's likely something that would benefit from them -- note code in a worker has no dom access). But other than workers there's no way to do anything like a thread based "yield", because the "thread" in question is the UI thread not a separate JS only thread.
I'll look into that and update if it works. Thanks a bunch.
Ah, so it's for creating short "excepts" from longer articles of HTML, while maintaining the general HTML structure and not chopping off things mid-word.
Be aware that Web Workers aren't available in IE. Apparently they'll be added in IE 10.
Gah, i thought they picked them up in IE9. Not that it helps with all the IE6/7/8/n users out there.
The only real solution is to break your code up into separate functions, and run them separately with setTimeout. I wrote a tiny 200 line library to manage this for me. The most useful bit is that it seamlessly added functions in relation to the one currently executing. So if you break your code into functions A and B, and A splits itself into A1 and A2; the execution order automatically becomes: A, A1, A2, B. Really simple to build, and meant I just wrapped my sections in 'run(function(){' and '});'. It could also auto-break up for-loops to iterate using a different function for each element. Pretty certain multiple libraries already exist which provide the above, the overhead of doing this is tiny, and it makes the browser _MUCH_ more responsive. Even for non-JS elements like .gif animations. I'd also argue if that you broke up your main loops with this, then your problem would be solved within an hour or two.
In Actionscript we run into this from time to time as well. What I've done in the past to force a "frame refresh" is to break intensive function into multiple functions and at the end of each step in the proces I run a setTimeout(nextStep, 1). This usually happens during loops so a simple execution might look like: var i = -1; var endi = 10000; function myIntensiveLoop(){ doSomething(); if (++i &lt; endi){ setTimeout(myIntensiveLoop, 1); } else { setTimeout(nextStep, 1); } } 
Even more annoying is the fact that IE9/10 are Vista/Win7 only. You can require users to upgrade their browsers, but you can't exactly expect them to run out and upgrade their OS.
There are some great answers, so I'm going to let them speak to the question. I just have one thing to add: Try not to pass strings to `setTimeout` and the like. It is a bit of an anti-feature that they take strings at all. Instead, just pass in a function: setTimeout(mainLoop, 1000); Otherwise, the code will need to be eval'd on every loop. - - - You're free to use anonymous functions if you need to pass your own arguments: setTimeout(function(){ mainLoop(a, b); }, 1000);
I think the author's point is valid, but can be generalized to say that you shouldn't use routing for create / update / delete actions. 
or it gets the hose again.
Plus the other ten files that power it.*
Yeah, GameBoyCore.js IS the emulator core. It computes the CPU+APU+PPU emulation in it (All of it). The other files are helper files that are either libraries or custom scripts for interface handling.
If you setTimeout with 0 or 1 ms then it will yield to the browser and allow it to run any queued events, but it should then get right back to your task as soon as any queued events finish. Note: often there's an additional browser-imposed delay like 4 to 15 milliseconds (if the tab is open, or up to 1000ms I think if the tab is in the background?). You shouldn't be tying up the browser for more than a couple of hundred milliseconds at a time - it hangs not only your web application but other pages the user might have open in other tabs, as well as the browser UI itself. Of course, in your situation (distributed computing application?) maybe you're not worried about that. So I would break down your task, if possible, into smaller chunks that are likely to each finish in 20 to 100 milliseconds, then do a setTimeout with 0 or 1 after each iteration. Also as others have said, the first parameter to setTimeout should be a function, not a string - using a string evals it, which is bad for reasons you'll find on Google under "eval is evil". Your application will be fairly robust provided you ensure that each function called from a timeout event returns fairly quickly, and you always set one and only one timeout event at a time. Remember that javascript is single-threaded so you don't need to worry about two events happening simultaneously and screwing your logic up. I'd favour using settimeout() each time over using setinterval() - so many things can go wrong with setinterval() and you don't know how busy the browser is and whether the interval is realistic. Web worker threads will be nice but unfortunately unless you're creating something for a particular browser only, you can't use them yet.
Several people mentioned setTimeout, but there's another way to do this that will execute even faster: function yield(callback) { if (!!window.postMessage &amp;&amp; !!window.addEventListener) { //uses the postMessage feature when available. postMessage events fire before the timeout loop triggers var wrapper, id = Math.round(Math.random()*1000000); window.addEventListener('message', wrapper = function (event) { if (event.data === id) { window.removeEventListener('message', wrapper); callback(); } }); window.postMessage(id, '*'); } else { //setTimeout fallback for browsers that don't support postMessage. setTimeout(callback,1); } } window.postMessage will yield to browser processes, but when execution continues the message event will fire before setTimeout loops are evaluated, and bypasses the delay time entirely. Granted, we're talking a difference of a thousandth of a second, but if you really need speed this gives the best result.
You can also pass additional arguments to setTimeout and it will pass those arguments on to your function (example [here](http://jsfiddle.net/MSpjL/) ) Of course, this doesn't work in IE. It might work in IE9 or 10 though, haven't tried it.
Code that freezes browsers makes me cry. What kind of computation are you doing? Do you really have to do it all in Javascript? I can't imagine this would actually be a normal web application.
This crashes my Firefox.
This kills the crab. But seriously? LOL! Works perfectly on mine (Firefox 5).
It's a distributed computation application to find cycles in the integer field. It's searching for counterexamples to the Collatz Conjecture. The dispatching side is written in Web.py and hands out bignums. The clients connect, pull down the Javascript, then retrieve numbers. They step through the sequence until the number hits one or falls below the 'everything below this number is okay' level. When this happens, they submit their vote to the server. It's tallied, and a new one is deployed. I love things like Seti@Home and Folding@Home, but wanted something ubiquitous that people could just run in their browsers. I don't expect it to be fast or even really effective, I just wanted to have some fun and got caught up in the fact that you can't do a thread yield in Javascript.
You might be able to use generators for this. If you've been playing with Python, you might know what they are. I think Firefox is the only browser that implements them, but I haven't researched them in a year or so. https://developer.mozilla.org/en/JavaScript/Guide/Iterators_and_Generators
Generalized even further, you shouldn't use routing for any data manipulation, just use the objects directly. In the server side world it would be akin to putting a router in front of your ORM.
I've been working on a chat client for over 4 years now. Sure gonna check this out.
edit: So frakin' stooooopid. Forgot to copy over the initialising call. Sorted now. It is calling the modal.. but new problem: it doesn't open in the modal, it opens in the same page, underneath the current content. I know I had this same problem before but I can't for the life of me remember what I did. Going to go have a cup of tea and see if lightening strikes twice. edit2: the prettyPhoto CSS file. It's really been one of those days. Thanks for your help good sir!
Like aGorilla said, I meant compared to Dvorak keyboards, my point was mainly that Dvorak is more of a flavor choice, that a small minority (if any at all) use, while QWERTZ actually is in use by a lot of people, not as much out of choice but simply because it's the standard here (germany for me that is). I agree that more Americans are going to visit his site, but don't underestimate the amount of people with QWERTZ and AZERTY (france and belgium mainly I think) keyboard, both of which could use an option to use X and C instead. 
I don't have any problem doing that, though it takes most of the comfort if I have to do things like that before I get to play. Others will most likely not even try, or worst case don't even know how to do that.
Doesn't work on IE9 I believe, based on my own tests. :(. Haven't tried on IE10 yet.
lol yeah exactly. Ive participated in all of these so far, its not about clean code or "proper" code, its about packing as much as you can in 1k.
Nice, I like it. I'll be impressed if someone can figure out how to truly replicate etch-a-sketch controls on a computer though :)
NEAT!!
Does anything ever work the way it should in IE?
Nice. That was fun. :) A couple of suggestions: 1. It looks weird without the knobs. At least add them as a visual, but maybe instead of just using the arrow keys, you could also click on the knobs and it would draw as long as the mouse button was held down. You could sort of make them function as rocker switches instead of knobs in that case, but keep the knob visual and maybe just add light grey arrows or something. 2. I want to be able to scroll the window up and down really fast to erase it (bonus points for the sound effect).
you could use a plugin like this one i guess: [jquery-waypoints](http://imakewebthings.github.com/jquery-waypoints/)
the dotted line is a div with id of red_path. it is position absolute and has a bkg image of the dotted line. On initial load of the page its height is zero, overflow hidden. as you scroll the page its hight is changed. simple shit, but it is a damn cool effect
[Main code.](https://evertale.com/scripts/evertale.landingpage.js?v=5) Ctrl+f: * init() * evertale.scrolling * evertale.landingPage.chapterArrow * evertale.landingPage.redPath The code is really clean, I'd recommend glancing through it. The page is divided into chapters, which is what the red arrow goes to on click. The dots are shown based on how much we've scrolled. Have a look at $('#red_path'), specifically - the background image. It's basically just a transparent image with all the dots. At the very beginning, that picture is position at the start of chapter 1, with height = 0. As you scroll, the height value is increased, showing more and more of the path. The rest of it (strokes around pictures, etc) is handled by functions that fire based on how much you've scrolled down the page. 
Well they finally added addEventListener after ten years :P
Tried to shake my laptop to clear the canvas, didn't work.
Well done, simple and effective.
fantastic! Do you capture a frame after each stroke is finished and store it as a version history row?
Four years?
https://evertale.com/media/small/red_path.png
i'd have to say the most obvious best practice for a new javascript programmer would be to use prototype instead. [prototype](http://prototypejs.org)
I should have known better than to click back to the public canvas... penis.. penis EVERYWHERE!
Very nice! What is the capacity of your servers? Did you find node.js easy to code with and how well would it scale? Did you use anything like nowjs? 
I would just split the main function into smaller functions. The overhead of 5 function calls shouldn't be that bad.
Still unconvinced that the class sugar adds much beyond confusion.
&gt; While it is questionable whether web apps will ever be as successful as iOS apps *boggles.
betazoldberg, you're good. You put into words, exactly what I understood. Don't understand what you mean in the last sentence though... what is "fire based"?
I meant that there are functions that are called (fired) on page scroll. Something like: if (the page is being scrolled){ function1() function2() } That's very, very oversimplified but it's the basic gist. There's basically a function that's bound to window onscroll that fires an array of other functions.
Ah, Ok. I think I get it. It's a really cool effect with the scroll to function. Could have been nice if the page bounced a little once you pressed the arrow down and it landed. Is there a jscript function for that?
There's no such thing as a bounce function, but it wouldn't be that hard to implement. Pop open a console here on reddit and type in: $(window).scrollTop(700); Then try plugging in 710, 720, 730... and go on with higher numbers. Then try it going the other way, so 800, 790, 780, etc. You should see the page 'go down' when the numbers are rising, and you should see it going 'up' when the numbers are falling. Now, it's not too hard to imagine a for loop that makes those numbers go down, then up, then down, then up, etc quickly so it looks like the page is bouncing. If you want to make the bounce realistic, just play around with how much quickly you change those numbers. If you wanted to make only one part of the page bounce (like maybe an image of a ball), then I'd just change its css top attribute in pretty much the same way.
The ES4 -&gt; Harmony -&gt; ES6 track seems increasingly decoupled from the reality of production JS implementations and the evolution of the ratified standard. Does anyone really think that it will eventually produce a widely accepted "big bang" successor? It seems to me that Brendan &amp; Co. will keep playing around with prototypes (ha), and the better ideas that emerge will filter down into the "real world" implementations and eventually be standardized in a series of incremental updates. Given the sheer inertia of literally billions of deployed implementations running millions of "applications", it's hard to see how it could be any other way.
This bouncing behaviour is also present in [YUI3 scrollview](http://developer.yahoo.com/yui/3/scrollview/), as well as other libraries.
I am sure the next version will be a "big bang" successor. Google, Apple, Mozilla, and Microsoft aren't collaborating on this just to build prototypes. ES6 is the next version of Javascript, and whatever ECMA puts in its standard document the big browser vendors will implement.
nice! everytime i mention node &amp; mongodb they downvote me hell... :/
So this is an HTML/CSS layout engine? Interesting...
What's wrong with my solution to the last quiz? Code: var bothC = function(a, b, s, f) { a(function() {b(s, f);}, f); }; Results: PASSED No JSLint errors PASSED bothC(S, S, A, B) === undefined PASSED output === "SSA" PASSED bothC(S, F, A, B) === undefined PASSED output === "SSASFB" PASSED bothC(F, S, A, B) === undefined FAILED output === "SSASFBFSB" PASSED bothC(F, F, A, B) === undefined FAILED output === "SSASFBFSBFFB"
Have been looking for something like this for almost a year! Upvote for you sir!
Why should I need "client-side integrity checking" ? I already have a CRC on Ethernet and TCP.
has this final agreed version of ES6 ben published? I can't see it [on the website](http://www.ecmascript.org/). I would like to see more of ES5 implemented, so it might be years before ES6 is common enough to be used in production. I note that a lot of what is new and has been added can not be shimed into older versions either.
"Your function bothC should call both fC and gC no matter what" Also, I noticed that test is picky about what order you call `fC` and `gC`. (Call `fC` first. Call each only once, too.)
Another term helpful in understanding is a closure. As the name suggests, it closes over something. function makeGreet(greet) { return function(name) { return greet + ", " + name; } } This would return a function which takes a name as a parameter. For example: var hello = makeGreet("Hello"); hello("world"); // "Hello, world" This is part of 'higher-order functions' where functions can take functions as parameters and return functions. function(fn) { return fn("Hello world!"); } Or more useful with some common higher-order functions, like filter and map. `somelist.map(function(x) { return x*x; });`
The ability to return functions is one of the things that makes javascript a functional language (for certain definitions of functional) - functions are a first class value. In the global space, when you define a function , it has access to everything in the global scope, and can read and write variables that are in the global scope. var x = 0; var counter = function(){ return x++; }; counter(); // 0 counter(); // 1 counter(); // 2 When you define a function inside another function, the inner function has access to the global scope and the outer function's scope. var someNames = function(name, count){ var x = 0; var makeName = function(){ if (x &lt; count) return name + (x++); }; var names = []; var made; while (made = makeName()) names.push(made); return names; } someNames("steve", 3); // ["steve0", "steve1", "steve2" ] someNames("larry", 100); // ["larry0", "larry1", ..., "larry99" ] Now when you return a function, since it has access to the scope of the function that defined it, the returned function keeps that scope alive. Even though the defining function has returned, the returned function can still manipulate values that were in its scope. var nameGen = function(name){ var count = 0; return function() { return name + (count++); }; } var fooMaker = nameGen("foo"); var barMaker = nameGen("bar"); fooMaker(); // "foo0" fooMaker(); // "foo1" barMaker(); // "bar0" fooMaker(); // "foo2" fooMaker(); // "foo3" barMaker(); // "bar1" Not that the defining function's scope is associated with a particular call of that function - each call of a function creates a new scope. Does this help?
Do you understand passing a function? Like the key parameter to list.sort or sorted in python: &gt; sorted(['1', '100', '2', '20'], key=int) ['1','2','20','100'] Returning a function is much the same thing. 
it was smart to make the page resize if the browser window has a width greater than 1400. The design is very cool, but it's much more enjoyable on a big screen
Currying: var makeAddX = function(x){ return function(n){ return n + x; } }; var addFive = makeAddX(5); // addFive is now // function(n){ // return n + 5; // } addFive(100); // 105 (makeAddX(5))(100); //105 Passing a function to a function: var applyFToFour = function(f){ return f(4); }; applyFToFour(addFive); // 9 "Omega": (function(f){ return f(f); })(function(f){ return f(f); }); // To understand this, evaluate it in your head. // Replace the 'f's in the body of the called // function with the function being passed to // it (which is an equivalent function). You will see // that this evaluates cyclically. It is an infinite // loop.
I love this page.. kind of the same concept of a long page like nikebetterworld.com... but i dont understand.. is the service going to be only an app for a smartphone or a webservice?
You can return a function in Python. def functionMaker1(): """Return a function.""" def retval(): print("Made by functionMaker1") return retval func = functionMaker1() func() def functionMaker2(): """Return a lambda function.""" return lambda x: x + 1 func = functionMaker2() print(func(1)) In languages like Python and JavaScript functions are automatically treated as objects. In other words, function(var x) { ... } would be something like the following in Java public class FunctionObject { call(Object... x) { } } So if it eases your transition, do not visualize passing functions around, but visualize passing actual objects around - objects that have a standard interface for being invoked as functions. JavaScript is a really weird language (e.g., calling new somefun() is different than calling somefunc()), so this analogy may not apply. Ask more questions if you still have trouble with the "function as objects" idea.
returning a function instead of a value is very useful for function composition (creating higher-order functions). i was able to understand more after reading the tutorial at learnyouahaskell.com and working through the examples. you should have a better grasp on the concept once you get past the first few chapters.
So a good place to return a function is when you use a passed in value in the returned function. var curry = function(x) { return function(y) { return x + y; }; }; And you would use it like this: var three = curry(3); var sum = three(10); console.log(sum); // 13 So this code creates a variable called three that holds the function returned from curry, which returns a function. Curry has the value of x passed in in its local scope (in this case 3). This is known as a closure. When you pass in 10 to three, it adds 10 to the value it has for x, which is 3 (passed in from the line above).
Good information. :-) I'm a bit nervous about traumatizing someone by introducing closures when they aren't even comfortable with function references yet. In this context, this probably shouldn't be the first thing the OP sees.
Java also allows you to pass functions around too. Sort of. The "Method" class is close. (Half-assed if you ask me, but I don't love Java.) In fact, for static methods, it's basically a function reference. &gt; How do you use it? That's the important question, and it varies by language. Generally, if you have a function named "foo", using "foo" by itself is a reference to the function object. Calling a function is "invoking it", and each language has its own syntax for invoking a function when you have a reference to it. In js, "foo()" is how you call the function. (It looks just like any other function call. Adding the parenthesis turns it into a invocation instead of just a reference. There are all two methods on the function object for doing more interesting invocations, "apply" and "call", but you usually won't need them. Since I mentioned Java above, I should point out, Java makes it harder. You have to call "foo.invoke(obj, params)". For a static method with no parameters, that can be "foo.invoke(null, null)".
[Mozilla](https://developer.mozilla.org/en-US/learn/javascript). They have pretty good documentation too.
Some good books if you can find them in time: *JavaScript The Good Parts by Douglass Crockford *Pro JavaScript Techniques by John Resig *Eloquent JavaScript by Marijn Haverbeke (this one is particularly good of you have limited general programming experience)
For beginners: http://net.tutsplus.com/tutorials/javascript-ajax/javascript-from-null-video-series/ also: If you hear a lot of talk about jQuery, MooTools, or DoJo.. Those are Javascript Frameworks and you will probably want to look into one of them AFTER you've trained yourself in the core of the javascript language. As a front end coder they will make your life a lot easier.
It depends on if you want to be able to use JS for doing things you can't do with HTML/CSS, like AJAX and validating forms, or if you want to be a 'proper programmer' (for lack of a better phrase). For example using JavaScript to build a programming language, a text editor, a terminal, an OS in the browser, a game, or something else which is more JS-heavy. If you want to be in the former camp, then I'd recommend spending x amount of time trying lots of different frameworks; jQuery, Prototype, Moo tools, etc. You won't be an expert in any of them, but you will pick up different things from each, and get ideas on how to solve future problems. If you want to be in the second camp, then I'd pick a project which would involve very little pre-done HTML/CSS (like building a text editor), and then just get coding. You could also try building some common JS-powered UI components like modal boxes or drop down menus, and then try to re-build them as a library. There are plenty of excellent web designers out there, who build excellent websites, but their JavaScript code is badly structured. I've seen plenty where it's 1000s of lines long with no functions/prototypes used for code re-use.
why? idk. cause people think it's some hipster BS. i use php and mysql since 1998 and i still use it but i know that mongo and node just make more sense sometimes. some people dont...
Learn about DOM, get yourself comfortable with changing CSS properties of various thing in JS code (like finding all &lt;p&gt; of class "foo" and color them red), then learn how to do it with jQuery and Prototype. And remember that there's no substitute for actually writing code so spend as much time as possible doing just that. Maybe you could try solving a few [Project Euler](http://projecteuler.net/) problems or something, the most important thing is to actually get comfortable with the language. And read up on OO and prototypes in JS, it's ... different there.
From your description of a job that requires web designer skills and some JavaScript, I bet that what they have in mind is the ability to use jQuery, for instance to add effects, hide/show DIVs, change images, or add the odd widget like an accordion. So your weekend will probably be best spent [here](http://docs.jquery.com/Tutorials).
He's being considered for a web designer/developer position that apparently requires minimal javascript.
When I use functions I strive to use assigned anonymous functions 99% of the time. Consider this example: var a, test = function (x) { return x + 1; }; a = test(3); //a will be of type Number with a value of 3. //this is because a value is returned to the test function //I will talk about this more below The return statement has one primary function and a secondary capability. The primary function of the return keyword is to exit a function immediately. In this case the return statement can be used as a stand alone instruction, example: var test = function () { //do something here return; }; The return statement can also be used to execute an instruction and immediately exit a function at the same time, example: var a = [], test = function () { return a.push(0); //adds an index to the "a" array. }; The secondary ability of the return keyword is to assign a value to the immediately containing function. The secondary capability only occurs when a primitive, variable, math operation, or string concatenation occurs directly after the return keyword. Example: var test = function (x) { if (x &gt; 5) { return "big"; } else { return "small"; } }; In the case of the prior example a value is returned to the test function. This value can be reassigned to other variables, such as my first example, or it can be used like any other variable. The "test" variable is assigned to a function so it is of type "object" even though it has a value of type "string". There is one exception to this rule though. var test = (function () { var a = 3; return a + 1; }()); In this prior example the variable test is of type "number". The reason for this is because the anonymous function executes immediately when it either enters the interpreter if not otherwise contained, or when its container is called. Therefore the variable "test" never sees the function and only sees the value and type returned by the function.
I am also using FF5, but it works well on Chrome for me. For a while in early spring this year JSLint was also crashing my Firefox, but was working great for me in Chrome. Some problem must have been discovered and corrected, because I have not had this problem with JSLint for a while. Good work though.
I still find it funny it crashed your Firefox. I've also heard it crashes 3DS a whole bunch too when used in its shitty web browser.
Whatever you do, don't even look at W3Schools. As a matter of fact, if you can, block it.
the "functionality as data" idea is often expressed in object-oriented languages (like java) as [delegates](http://www.cutthecrap.biz/software/delegates.html). in javascript, more or less the same pattern can be applied - the difference being that in javascript, you don't need a special object type to do this, since functions are themselves objects in javascript (as opposed to methods in OO languages, which aren't themselves objects).
Lol, is it really _that_ bad??
I think you need to first come to terms with the fact that everything in Javascript is an object. If we talk about everything in terms of objects, it becomes easier to imagine how we would use objects in our programs. For example, I might want to store a reference to the object in a variable. A function is just a *function object* in javascript, so when you return a function, you're just returning an object. 
very cool format, let's see if I finally get closures
If you're expected to know minimal JS, than you are most likely going to be doing stuff with jquery. Get a brief understanding of the DOM, basic javascript, then lookup how to do the following things in jquery: 1) DOM selection, insertion, modification 2) Basic animation 3) Basic form handling 4) Figure out how to use a jquery plugin 5) Just your run of the mill stuff (tabs, overlays, etc) That can be done in a weekend I think. I doubt you'll have to know what JSlint is or what a first-class function is, so you skip the books for now.
awesome app.
yeah i dont understand that either... the worst is when they make fun of it like youre some sort of hipster idiot... sorry, i tried it out and i handle large amounts of traffic... you ever tried to scale mysql? no? well than shut up... ;)
Watch douglas crockford's lectures on JS
Hey'all, thanks for the suggestions and kind words! I created this as a small experiment, and it's really cool to read your feedback. I spent a lot of time thinking about the controls - The current keyboard controls are definitely not satisfying. Here's my ideas so far: - Something like the [middle-click scroll cursor](http://t2.gstatic.com/images?q=tbn:ANd9GcTzRDyNSJJxQs0xSW3dIy5EPBC5zAXX3VBaEMR7v0Pt4gF_wnTQAw) that paints in the direction of your offset from it. - Using iOS accelerometer &amp; gyroscope to draw - Actually try to replicate the original by somehow allowing the activation of the two knobs simultaneously. I'd love to hear your thoughts and get more feedback for future versions ;-)
**Make an application.** Reading and tinkering may help a little bit, but not as much as *doing something extensive* with JS. I suggest you make a completely client-side TODO list: 1. Text box with submit button. 2. When submit button is pressed, create a new list item based on the text box's contents, and clear the text box. Focus the keyboard on the text box. 3. Each todo item has a checkbox. When you click any part of the todo list item, the checkbox should be checked. It should then remove the item from the list. (You could have the item be removed only after, say, a minute, so accidental clicks can easily be undone.) For someone new to JS, I think these three components (layout and two types of interaction) will be enough to get you started but won't be overwhelming. When learning, don't worry about making your code pretty or using best practices. Just make it work. When you're done, refactor the code to make it shorter, clearer, and more extensible. When you're comfortable with what you've written, take it to the next level: 1. Animate adding and removing items. 2. Use HTML5 local storage (preferred) or cookies (not recommended) to have the todo list persist between refreshes. 3. Ask for a code review. 4. Rewrite the application using a different DOM framework (if any). 5. Style it and make it sexy. Happy coding!
YUI theater. Google it. Watch it. 
See a [recently-posted tutorial on JS functions][1]. Real world examples from my game: * [Return a function to get the current time of an `&lt;audio&gt;` element][2], depending on what is best supported by the browser. ([Rationale for using this method][6]) * [Returning a "class instance" with instance-tailored member functions][3]. In this case, I thought it was clearer to use closures instead of prototypal inheritence (classes). * [Function currying][4], which made code a lot simpler. There was a pattern matching function, but I wanted to give a default pattern to remove `function (object) { return mapObject.match(object, { /* pattern */ }); }` boilerplate. Applied heavily in my [RuleSet class][5]. Hope this helps in terms of *actual* examples. ;P [1]: http://www.reddit.com/r/javascript/comments/ja2vu/pretty_good_interactive_tutorial_on_closure_in/ [2]: https://github.com/strager/owp/blob/2857fe32acfcd05727fc833ecf6dc42fc9a7fdda/src/Util/audioTimer.js#L5 [3]: https://github.com/strager/owp/blob/2857fe32acfcd05727fc833ecf6dc42fc9a7fdda/src/WebGLRenderer.js#L1135 [4]: https://github.com/strager/owp/blob/2857fe32acfcd05727fc833ecf6dc42fc9a7fdda/src/mapObject.js#L92 [5]: https://github.com/strager/owp/blob/2857fe32acfcd05727fc833ecf6dc42fc9a7fdda/src/RuleSet.js#L62 [6]: http://owp.me/blog/articles/3/firefox-currenttime-problem
Basic: [Mozilla](https://developer.mozilla.org/en-US/learn/javascript) Advanced: [JavaScript: The core](http://dmitrysoshnikov.com/ecmascript/javascript-the-core/)
Yes, it's quite bad. See [w3fools](http://w3fools.com/).
I like prototype but I don't see a future for it, most of it's core devs seem to be working on other things these days. More and more I'm looking at a Backbone/underscore &amp; jquery combo.
In Python you can pass functions just like any other value referenced by a variable. They're just objects. The only difference between a function and another object is that it has an __invoke__(*args, **kwargs) method. (It may be called something else.) In this way you can define any object to be a function, just like you can give any object a list or dictionary interface so that you can use the language's syntax sugar for lists and dictionaries on it. In Javascript, you can attempt to "invoke" any variable just by using the function invocation syntax. You'll just get a TypeError if the current value isn't of type function. It *can* be a bit of a mind warp at first. It helps to know that there are two ways to define a function in Javascript. // the boring way function myFunction(parameter) { return parameter; } // the fun way var myFunction = function (parameter) { return parameter; }; The former is mostly syntax candy. (There are some small differences. Functions defined with the first syntax are available before they're defined in the file.) The latter form uses what's usually called an anonymous function. This is a "function literal" just like a list literal or an object literal. var aList = [1, 2, 3, 4, 5]; var anObject = {one: 1, two: 2, three: 3, four: 4, five: 5}; var aFunction = function () { return true; }; You can pass all of these objects around and attach things to them just like regular objects. The only difference is that objects of type 'function' can be invoked. Mentally you can model this like how a list or an object works. var aList = [1, 2, 3, 4]; var anObject = {1: "one", 2: "two", 3: "three", 4: "four"}; var aFunction = function (n) { return anObject[n]; }; aList[2]; // equals 2 anObject[2]; // equals 2 aFunction(2); // equals 2 EDIT: Don't worry too much about "closures" at first. It just means you can reference things in your function defined outside of it and they'll still be in scope if you invoke the function in a different scope. (Say, because you passed the function to another function.)
I posted this recently [What's a Closure?](http://nathansjslessons.appspot.com/lesson?id=1000) Teaches with examples... the best way!
It was built in a week, so I'm sure you can learn it in a weekend &lt;[obligatory](http://instantrimshot.com)&gt;
Where do you live?
thanks for that second link
Heh, I've seen that.
yeah I didn't get it either... 
Very cool! I learned some stuff! Something I wonder about the continuations.. If nothing ever returns, wouldn't your call stack just get bigger and bigger and bigger? Wouldn't that eventually be a problem?
For quick learning read javascript the good parts book first and then check out [Learning Advanced JavaScript](http://ejohn.org/apps/learn/) by jQuery creator John Resig. It will cover almost 80% of javascript knowledge. The other infinite 20% part is practicing, learning from others code.
Closures sound like an odd or rudimentary form of ordinary classes to me. 
Salt Lake City
Awesome site! Very well done. Care to share a bit more details on implementation? For example - why mongodb vs mysql, is node the full http server (or mixed with apache etc), did you also build the paint app yourself, etc? Would be interested in hearing your thoughts.
Would you learn English without reading English books? Read some code! Go to a page, view source, repeat.
open thread, look for Mozilla Developer Network, upvote.
Good idea! (function(){function a(c){this.t={};this.tick=function(c,e,b){b=b!=void 0?b:(new Date).getTime();this.t[c]=[b,e]};this.tick("start",null,c)}var d=new a;window.jstiming={Timer:a,load:d};try{var f=null;window.chrome&amp;&amp;window.chrome.csi&amp;&amp;(f=Math.floor(window.chrome.csi().pageT));f==null&amp;&amp;window.gtbExternal&amp;&amp;(f=window.gtbExternal.pageT());f==null&amp;&amp;window.external&amp;&amp;(f=window.external.pageT);f&amp;&amp;(window.jstiming.pt=f)}catch(g){};})(); var loadTimer = window.jstiming.load; loadTimer.name = 'load';var OZ_buildLabel = 'es_oz_b803.23_p2';var OZ_pathPrefix = ''; var OZ_jsVersion = 'r7nkij-CJ2o.en.'; var OZ_windowName = 'oz'; var OZ_lang = 'en';var OZ_initWidget = 1;var f=this;var h=RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$"),i=function(a,b,c,d){for(var g=c.length;(b=a.indexOf(c,b))&gt;=0&amp;&amp;b&lt;d;){var e=a.charCodeAt(b-1);if(e==38||e==63)if(e=a.charCodeAt(b+g),!e||e==61||e==38||e==35)return b;b+=g+1}return-1},j=/#|$/,k=/[?&amp;]($|#)/,l=function(a,b){for(var c=a.search(j),d=0,g,e=[];(g=i(a,d,b,c))&gt;=0;)e.push(a.substring(d,g)),d=Math.min(a.indexOf("&amp;",g)+1||c,c);e.push(a.substr(d));return e.join("").replace(k, "$1")};var m,n=function(){var a=window;return a.history&amp;&amp;a.history.pushState},o=function(){var a=window.location.href.match(h),b=a[7]||"";if(!b)return null;for(var c=["","buzz","about","contact","sidewiki"],d=0;d&lt;c.length;d++)if(b==c[d])return null;n()?(c=a[4]||"",d=a[6]||"",a=(a[1]||"")+"://"+(a[3]||""),c&amp;&amp;(a+=":"+c),a+=f.OZ_pathPrefix+"/"+b,d&amp;&amp;(a+="?"+d),b=a):b=null;return b},p="OZ_prog".split("."),q=f;!(p[0]in q)&amp;&amp;q.execScript&amp;&amp;q.execScript("var "+p[0]); for(var r;p.length&amp;&amp;(r=p.shift());)!p.length?q[r]=0:q=q[r]?q[r]:q[r]={};var s=function(){var a=window;if(!a._jsl&amp;&amp;0&lt;=m){var b=document.getElementById("js").src;(new Image).src="/_/resourcefailure?type=js&amp;url="+encodeURIComponent(b)+"&amp;hl="+encodeURIComponent(a.OZ_lang)}else m=0,a.setTimeout(s,3E4)};if(n()){var t=window;if(!t.opera){var u=l(t.location.toString(),"gpcaz"),u=l(u,"tab");t.history.replaceState(null,t.document.title||"",u)}}var v=(window==top?null:"about:blank")||o(); if(v)window.location=v;var w=f.OZ_pathPrefix,x=window.location.href.match(h),y=x[5]||"",z=x[7]||"";if(z&amp;&amp;(w&amp;&amp;y.indexOf(w)==0&amp;&amp;(y=y.substring(w.length)),y.indexOf("/")==0&amp;&amp;(y=y.substring(1)),y!=z)){var A=document.createElement("style");A.type="text/css";A.styleSheet?A.styleSheet.cssText=".maybe-hide {visibility:hidden}":A.innerHTML=".maybe-hide {visibility:hidden}";document.getElementsByTagName("head")[0].appendChild(A)} window.setTimeout(function(){for(var a=!1,b=0;b&lt;document.styleSheets.length;b++){var c=document.styleSheets[b],d=c.href;if(d&amp;&amp;d.indexOf("/_/ss/")&gt;-1){try{if(c.cssRules&amp;&amp;c.cssRules.length&gt;0||c.rules&amp;&amp;c.rules.length&gt;0)a=!0}catch(g){}break}}if(!a)a=document.getElementById("ss").href,b=window,(new Image).src="/_/resourcefailure?type=css&amp;url="+encodeURIComponent(a)+"&amp;hl="+encodeURIComponent(b.OZ_lang);s()},3E4); 
jsbeautifier 
OK, is there a reason why? My rationale is that everyone uses *some* library, and while jQuery may definitely be too big for some things, it is well known, it will be asked about on the interview, it's well documented and is definitely a good example of the power of JS. And we really don't want begginner programmers to invent these things again and again, with little subtle bugs. Oh, and also, as opposed to pure JS, it works the same way across browsers :).
Unless you specifically implement indexOf your script won't run on IE. Best is to check for the existence of the function and add it if missing. if (!Array.prototype.indexOf) { Array.prototype.indexOf = function (obj, start) { for (var i = (start || 0); i &lt; this.length; i++) { if (this[i] == obj) { return i; } } return -1; } } Or, if you have jQuery loaded, use inArray. http://api.jquery.com/jQuery.inArray/
That script is from Google Plus and runs on IE.
There's no "final agreed" version of ES6. ES5.1 was just published, and ES6 is the next planned edition that the committee is working on now.
Very well done! I keep laughing when I imagine someone getting to step 6, though.
I'm not saying jQuery is bad, I'm just saying don't recommend a library as a starting point. It's better to learn how to do it in pure JavaScript, and then use the jQuery library to handle the cross-platform functionality.
I'm sorry, I have to disagree. The point is, JS by itself really sucks. That's why libraries exist, to make your life a bit easier. To me, it seems better to just learn the way to do it you will almost always use and then, when it's needed, you can learn the pure JS way. I don't know if you know perl, but if so, it's the same difference as between teaching a novice the OO via bless, hashes, @ISA, Exporter, ... or just teaching Moose. You might need to know the gritty details some day, but it's useless if you just want to start coding.
What if he is required to do something in pure JavaScript at some point? It's easier for him to learn pure JS now, and then become familiar with the libraries later on. He'll have a better understanding of how the language works, and he won't become dependent on the library to do *everything* (jQuery can't solve every problem). And no, I don't know any Perl.
Well, by the same token, if he doesn't learn to use some library, what if he later has to use it? Either way, he'll learn later. And starting with pure js, he might learn to do things the wrong way and unlearning something is much harder than learning something new.
That's why you make sure you learn it correctly the first time (and it's easier to learn a library when you have a good understanding of how the core language works).
Oh right, anything with .min.js as a file extension won't help unless you're REALLY HARDCORE.
Awesome, I look forward to reading it! Any rough idea on an ETA?
Ok, I agree with that. But still, in this case, if you only have one weekend...
Great, I'll keep an eye out for it!
My point is that reading JavaScript source code from production websites was a trick that helped newbies in the olden days. He better start elsewhere and thankfully there are lots of introductory material available. Besides, this guy just needs to learn some basic jQuery tricks for his interview.
First, don't do it this way. Use a library. I recommend jQuery. http://api.jquery.com/jQuery.ajax/ Second, XHR doesn't work cross domain. So on your site domain-a.com, you can't do an XHR to domain-b.com (or google.com). I think this is probably why you're not seeing results.
Oh I thought that by including the setRequestHeader method it would allow for this. 
Reddit is bugging, I'm not sure why, so I'm going to re-post my comment: My brother and I are learning Javascript and decided to co-write a little Hangman game together (go us!) When we finished it worked perfectly in Chrome / FF but failed hilariously in IE. [Here's the code.](http://pastebin.com/RLADgvqz) and [Here's the game if want to play for yourself.](http://www.josephbleau.com/hangman) PS: Bonus if you can help us figure out why. &gt;:(
what doesn't fail in IE?
It seems I resolved the issue: word[i] == letter needed to be changed to: word.charAt(i) == letter I guess comparing a character that's accessed by the [] operators is undefined when compared to a string and for whatever reason it evaluated to false in IE but not Chrome / FF. Edit: See [this](http://www.reddit.com/r/javascript/comments/jbx2d/so_is_this_what_its_like_being_a_javascriptweb/c2auh24) for a little more info.
pretty cool game! Here's a protip though: Don't expect to make anything even on the cusp of cool work in IE. There be dragons down that road. Libraries like jQuery and Prototype help with that though.
You're right! I didn't know this, but adding a standard transitional HTML 4.01 doctype made the javascript execute in the way I expected it to.
You're accessing the string as an array, which is not part of the ECMAScript 3 specification. Use charAt instead. See http://stackoverflow.com/questions/5943726/string-charatx-or-stringx Correction at http://pastebin.com/diff.php?i=8QmHieqR Edit: as noted in other comments, if using a proper doctype, a string can be indexed as an array for read-only access.
Yep, this is what was wrong. :) Do you know why setting the Doctype allowed the [] behavior to work on strings? I'm guessing there are different rules between accepted modern JS and ECMAScript 3?
I don't know for sure but I'd guess it's because without a doctype, the browser goes into "quirks mode" (compatibility with old versions), and with the doctype, it goes into a more modern set of rules. From what I've read, indexing the string like an array won't work in IE7, and I think that would be with or without doctype (I don't have that around to test now, though). Anyway, in JavaScript strings are NOT arrays and I think it's better not to think about them like they are.
Pretty fscking slick (Chrome 13.0.x).
Actually in ES5 strings behave array-like, so I would say techinically speaking strings are like arrays but if you want to support IE &lt;= 7 they aren't :)
And I fully agree with that, but it's very easy to pick up jQuery while in the middle of the project (provided it isn't a large one), and if it's a job requirement, then any other developers are sure to be familiar with it, and can potentially help / give advice on some of the more complex stuff.
Just use the html5 doctype. Will trigger standards mode in all versions of IE and it's lots less typing :) &lt;!doctype html&gt;
Would love to see any script engine fails in IE9/IE10 if you've got any off hand.
You must use a doctype otherwise IE will render in quirks. The script engine is also in quirks mode (eg. IE6 mode). In this mode, string indexing doesn't work. This feature was added in IE8 (and continues to be supported in IE9 and IE10), so just add your doctype and you should be good to go. You can hit F12 to open the F12 developer tools and it will show you the document mode (ignore browser mode, it doesn't affect the script engine). If you see something other than IE9 standards mode you'll probably hit all manner of crazy issues.
True that, but you still can't modify strings as arrays even under ES5, right? That's what I mean they're not really like arrays.
i can't even run either of those, since my only Windows copy is XP
[This](http://www.lgr.ca/uploaded_images/time_breakdown-739233.png) is old and not as relevant as it was a few years ago, but it's still pretty true.
Yeah, truth. I guess I agree then I wouldn't call it array-like.
Oh, ok. I thought you had some idea of something that failed to support your "What doesn't fail in IE" statement.
I probably should have put something like IE6-7
I read your comment before the OP's where he gives out the code. For 30 whole seconds, I thought we had found the One.
I would maybe try dropping the while, calling settimeout and then calling settimeout again from within sq.draw... And your timeout period could probably be lowered. Haven't tried this myself... Just guessing
Ah. Yeah, Javascript probably isn't the best tool for that, especially considering that Javascript is one-thread-per-interface. You might want to look up HTML 5 Web Workers or the Google Gears worker threads -- they let you do multithreaded computation in background threads. Or you could write some browser extensions, such as ActiveX or XUL.
Old: `setInterval` New: `requestAnimFrame`
So as a rule, JSON is always a string. You can't iterate through a string, so you have to "eval" it into a javascript object before you can iterate. In jQuery it's var stations = $.parseJSON("{\"json\":\"string\"}") So after that, you have an array of BART station objects. You iterate and render the data like so: $(stations).each(function(index){ document.write($(this).stop_name+" lat: "+$(this).stop_lat); document.write($(this).stop_name+" long: "+$(this).stop_long); }) Or however you want to format it.
Thank you for your help. I am a bit confused on what to do though. I wrote the following - $.getJSON('data/stops.txt', function(json){ var stations = $.parseJSON("{\"json\":\"string\"}") $(stations).each(function(index){ document.write($(this).stop_name+" lat: "+$(this).stop_lat); document.write($(this).stop_name+" long: "+$(this).stop_long); }); but here's the result I am seeing - undefined lat: undefinedundefined long: undefined Any ideas?
Remove the while loop. Instead package your mainloop into a function, and then call it using 'requestAnimationFrame', but only if it's supported. If it isn't, then use setInterval or recursively call setTimeout. However for FireFox you should use the 'MozBeforePaint' event listener instead of recursively calling 'requestAnimationFrame' as it's more efficient. Edit: you also need to pass in the canvas as the second parameter to requestAnimationFrame, for Webkit browsers. It declares that you are restricting your changes to just the canvas, which can give you a speed boost. Alternatively, build your game on [Play My Code](http://www.playmycode.com) and have my runtime sort these JS issues for you.
You don't want to wrap plain arrays in a jQuery object. (It's more trouble than its worth; sorry.) Use C-style iteration: for (var i = 0; i &lt; stations.length; ++stations) { var station = stations[i]; document.write(station.stop_name + ...); } You can also use ES5's Array#forEach (be sure to get a shim or some older browsers will not work!) or jQuery's $.each: stations.forEach(function (station) { document.write(station.stop_name + ...); }); $.each(stations, function (i, station) { document.write(station.stop_name + ...); }); 
[Details on requestAnimationFrame][1] Haven't heard of `MozBeforePaint`; will look into that. Thanks! [1]: http://paulirish.com/2011/requestanimationframe-for-smart-animating/
Your issue is you never return control to the browser. The way JS and the browser works is the JS engine runs code for a bit, once its done, it yields to the browser, which will then update UI, and do some other things. Then it lets the JS engine do more work, then yields to browser, etc. When you do while(1) and never exit, you are essentially having the JS engine keep control of the thread and never let the browser update UI, which results in the hang. setTimeout will yield the thread to the browser, but you want to run your code every x seconds, so instead you can do a setTimeout(code, 16) (16 milliseconds is about 1 fps at 30 fps) to initially start your code, and then at the end of your draw code, call setTimeout again. This will keep running your code while yielding to the browser.
first ... change var stations = $.parseJSON("{\"json\":\"string\"}") to var stations = $.parseJSON(json) See http://api.jquery.com/jQuery.parseJSON/ for details Next use $.each or a for loop as suggested by strager 
I appreciate your comment. I put together this code, with the help you have given me - var stations = $.parseJSON("{\"json\":\"string\"}") $.each(stations, function (i, station) { document.write($(this).stop_name+" lat: "+$(this).stop_lat); document.write($(this).stop_name+" long: "+$(this).stop_long); }); but it doesn't seem to run correctly. I really am a beginner when it comes to javascript (or jquery for that matter), so you will have to treat me like an idiot. Please help!
jQuery should have returned an array of 2 objects(json.length === 2) on to the callback of $.getJSON . You can simply iterate the objects with a for loop. function(json){ for(var i=0; i &lt; json.length; i++){ document.write(json[i].stop_name + " lat: " + json[i].stop_lat); document.write(json[i].stop_name + " long: " + json[i].stop_long); } } If you're ever unsure what you're getting back, use developer tools to inspect and set breakpoints. This lets you see the javascript objects which will help you setup the code to work properly. I like Chrome developer tools myself.
Don't use `$(this)`; use `station` directly. See my example. 
*javascript:void($("a.title").each(function(i){if("rgb(0, 0, 255)"==$(this).css("color")){var t=open(this.href);}}));* Semi tested in FF :-) 
Because data link is only one layer out of the 7 according to the OSI model, not to mention procedures that are out of the scope of the network transfer (moving file, etc).
yeah it took me a few attempts too. Not sure when you'd use CPS... 
Good stuff! I remember making this exact kind of thing when I was starting out. Keep at it!
I am confused about giving and not giving w3c a punch for this. EDIT: I still remember when all I had to start with were the html tags.
Here's an example which may help. something=function() { x=123; thisIsAClosure=function() { //even though this happens after the scope of 'something' stop existing, the variables declared within 'something' such as x are still available to this closure alert(x); //alert(123); } setTimeout(function(){thisIsAClosure()},1000); }; something(); 
Oddly, the first example isn't actually a closure. Closures and anonymous functions are different, though an anonymous function can be used as a closure, not all anonymous functions. are closures and vice versa.
Using the up and down arrow keys in Opera will cause the page to scroll. And, holding down an arrow key won't do continuous drawing. To work around this for Opera, the code in sketch.js has to use "keypress" instead of "keydown".
:) It wasn't so difficult to spot the bug using IE9's integrated debugger. But what was doing more harm was the absence of a doctype.
Your question is a little confusing, it that the only list of station's in a route is in a format that makes it hard to look up the lat/long? If so, does the file with the station info include the abbreviations in the xml that you linked to and if so, are the abbreviations unique? Then you can just parse the station info file to get the relevant stations. Or have I misunderstood your problem entirely? 2) 
Extra space character throws off Firefox? How?
Darn it didn't work for me, it still opened every link
You don't need the while loop, you can either use setInterval (which automatically repeats), or repeatedly call setTimeout from within the timeout function. But, as suggested by others, in modern browsers you would be better off using [requestAnimationFrame](http://paulirish.com/2011/requestanimationframe-for-smart-animating/) I have also been experimenting with html5 canvas games at [codeincomplete.com](http://codeincomplete.com) * [pong](http://codeincomplete.com/posts/2011/5/14/javascript_pong/) * [breakout](http://codeincomplete.com/posts/2011/6/11/javascript_breakout/) * [snakes](http://codeincomplete.com/posts/2011/8/5/starting_snakes/) Hope that helps. Keep at it! 
Which browser are you using?
Which browser are you using?
This is what it's like to be almost any type of web developer who has to 'make it work' with IE.
I created this simple tool last night because I needed to reference some JSON of mine in an IRC discussion. I could not find a pastebin that also auto-formatted the JSON for me, so I just made one. Check it out: http://jsonifier.com/ example output: http://jsonifier.com/paste/4e3f84b46f3b792dde000000
oh nice, very clean! BTW, there already was a similar online tool, which also reports validation errors: [www.jsonlint.com](http://www.jsonlint.com)
Nice, you made us a proxy tool so that we can store arbitrary data on your server! I'll have to mix it in with my [jdrop](http://jdrop.org) usage.
If you have python installed, you can use a command line like this to pretty print JSON: echo '{"json":"obj"}' | python -m json.tool
I think it's awesome. I can actually remember this one.
Good read, I liked the ending: &gt; With classes in JS, I think we have a similar opportunity. If we provide a default way to define and inherit classes, I'll be able to have my code inherit from classes in libraries A, B, C without having to worry about whether they do Dojo-style or Closure-style, or whatever. &gt; &gt; Rather than baking into ES.next a syntactic class abstraction that is largely inspired from static OO languages experience lets just make these &gt; primitives available and see what happens in the real world. If a single &gt; dominate abstraction pattern emerges then we can consider baking it into &gt; ES.next.next syntax. &gt; Haven't we done that with ES1-3 already? Users have had 15 years of prototypes and what they chose to do was make classes. We've got Closure's goog.extends(), Dojo's dojo.declare(), Prototype's Class.create() (ironic, given the name of the framework!), JS.Class, and CoffeeScript's class syntax. How many more cows do we need before that path is ready for paving?
nope. you missed the most important step -- *replacing the author's name and program title with your own* this is like, step 0, dude. what if you made changes and the author thought his game was broken? gotta make sure it's branded properly before all else... (edit: sarcasm misplaced - i see you're talking browsers. meh on that.)
Thanks. I'm sure there could be some cool additional features that'd make this more than "just another pastebin" and perhaps closer to than jdrop seems to do. Because my initial reasons for making it were simply for a pastebin though, the ideas as to how to make it something more than that are not apparent to me yet.
this could be considered similar to what i am doing on the back-end. the output of that would be what i am storing in the database.
Firefox
Might cross-post to /r/gis and/or /r/geospatial.
Nice, also for realtime formatting I like: http://json.parser.online.fr/
Responding to your last question about using the XML files, what prevents you from maintaining and storing your own mapping of station names to lon/lat coordinates and using those to populate google maps?
You should: 1. create an array of google.maps.LatLng objects (starting from your json) 2. then set it as path of a google.maps.Polyline object using the method setPath() of that object or passing the path parameter as config option when you instatiate your google.maps.Polyline 3. set you google map object to the Polyline, using the method setMap After you defined the needed variables, the first step has to be done in a cycle (like the "for" you posted). 2nd a 3rd steps can be done after the for-loop. Note that the 3rd step is needed to plot the polyline on the map object.
The PNG files are loaded and parsed entirely in JS and then rendered to the canvas element using putImageData. Works with both normal and animated PNGs.
I meant, I thought you had found it only looking at the picture :p.
Your eyes can deceive you; don't trust them. 
Thanks for your help. Do you mean something like this? - var route = [ $.getJSON('data/stops.txt', function(json){ for(var i=0; i &lt; json.length; i++){ new google.maps.LatLng(parseFloat(json[i].stop_lat),parseFloat(json[i].stop_lon)), } }) ]; Is it ok for me to have a looping function inside of an array like that?And how do I make it so that the last object in the array won't have the comma at the end of it?
Great find. I'm surprised there isn't more emphasis on finding memory leaks in JavaScript... the browser and engines keep getting faster, but if your application takes up a gig of memory after an hour of use those improvements do you little good.
It depends on how you parse the data from the Json. I'm not sure the syntax you used is correct. To make it cleaner, it's better something like this: var route = []; //Declare an empty array $.getJSON('data/stops.txt', function(json){ for(var i=0; i &lt; json.length; i++){ var latLng = new google.maps.LatLng(parseFloat(json[i].stop_lat),parseFloat(json[i].stop_lon)); //build the latLng object route.push(latLng); //push the latLng object into the array } }); var polyline = new google.maps.Polyline(.. config options..); polyline.setPath(route); polyline.setMap(map); 
As far as I can tell, the laptop, vinyl record and trees don't animate, but everything else does. Or am I missing something? "Chompy" puts Chrome/the Chrome Renderer up at 4.6% CPU, which doesn't seem too terrible. I'd love to try it out with bigger images. Edit: Almost forgot, since you appear to be the author -- nice work :)
The code really looks great. For some reason though, it's not drawing any path on the map. map.Polylines = function() { var route = []; //Declare an empty array $.getJSON('data/stops.txt', function(json){ for(var i=0; i &lt; json.length; i++){ var latLng = new google.maps.LatLng(parseFloat(json[i].stop_lat), parseFloat(json[i].stop_lon)); //build the latLng object route.push(latLng); //push the latLng object into the array } }); var polyLine = new google.maps.Polyline({ path: route, strokeColor: "#ff0000", strokeOpacity: 0.6, strokeWeight: 5 }); polyLine.setPath(route); polyLine.setMap(map); } **map.Polylines is being called by the following - ** $("#showmarkers").click(function(e){ map.Polylines(); map.Markers(); }) the map.Markers function runs without problem (and I can see the markets on the map). 
That's correct - those images you mentioned are not supposed to animate. They're to show that it supports normal PNGs as well.
The code looks fine to me. If I was you, I would check: 1. If the parsing of the Json is correct (latLng's are correctly created) 2. If the route array is really populated just after the getJSON block of code 3. if the variable map used as parameter of setMap() correctly references to the map object. For performing such checks, try to debug the script in Firebug (for Firefox) or use some console.logs in oder to read the real content of those variables.
tried in safari 5.05 but didn't work, worked in chrome fine though
Yeah it doesn't work in Safari &lt; 5.1 because it uses typed arrays. So upgrade your safari to get it working! :P
... but the others have been on mozilla's APNG support page for years (at least as far back as 2008). What's new here?
You must find out the station lat/lon. Create an object that holds all of the stations. var allStations = { A: [36.6, -121.7], B: ['lat','lon'], C: etc.} The when you need to set a lat/lon using the google maps API just use allStations.A[0] and allStations.A[1] or whatever your station is. Sorry if this isn't what you're asking for.
Related: [Javascript Memory Management](http://engineering.socialcast.com/2011/06/javascript-memory-management/)
maybe it's me, but that seems like...pointless.
I really really really appreciate your help. I think I've figured out what the problem is. Even though I've console.log-ed the route array outside of the JSON parse function and it displays the correct data, it's considered to be different (I don't know in what nature) if it's pushed within the JSON parse function, and outside the JSON parse function. Here's what I mean. This - $.getJSON('data/stops.txt', function(json){ var latLng = new google.maps.LatLng(37.475, -122.518333) route.push(latLng) }); is different than JUST this - var latLng = new google.maps.LatLng(37.475, -122.518333) route.push(latLng) I don't understand though, since in this case, the JSON parse function should have no effect on what's inside the function. What do you think? 
It's got a point until browsers properly support apng. 
isn't that what this is trying to avoid though? upgrading or changing browsers to view a file?
StackOverflow.com
Well, Firefox and Opera are the only major browsers to [support apng](http://en.wikipedia.org/wiki/APNG#Application_support), whereas canvas is supported by pretty much every popular modern browser. Animated images with an alpha channel supported cross browser without the need for plugins may be useful for a number of reasons.
well... I mean, it was more an experiment than anything else. It won't work in any browsers without a canvas element, that's for sure. So no IE &lt; 9. Most people upgrade fairly quickly on the other browsers so... Idk, I guess I could add a typed arrays shim layer for older canvas supporting browsers.
thanks
You really need to put some text that says if the image is supposed to be animated or not. If it wasn't for the comments here, I would have assumed that the code didn't work.
I added this. The images are now grouped in the list. Thanks for the suggestion!
*facepalm.
Even though it's just an experiment, maybe you could fall back to just embedding the pngs for Opera and Firefox as they support apng natively. Opera doesn't support typed arrays yet.
Thanks. That helps.
You might want to look into these projects: https://github.com/davidmz/apng-canvas https://chrome.google.com/webstore/detail/ehkepjiconegkhpodgoaeamnpckdbblp 
And javascript PNG parser is a good library to have around. I might use it.
I could help you for 10 bucks. Let me know if you agree and i'll start looking into it.
There is a [nice blog post](http://blog.chromium.org/2011/05/chrome-developer-tools-put-javascript.html) related to working on memory leaks in chrome. As more and more complex applications are getting built on Javascript for browser, it seems memory leak will be prevalent. If I am right [gmail faced some memory leak](http://code.google.com/p/chromium/issues/detail?id=5820), may be they fixed it now. 
If the elements inside the route array are the same, there is no reason for being considered differently. If the problem is that the route array is empty after the callback of the getJSON, then it's probably a matter of scope. The only difference between the two snippets of code is the "scope" where the route array is populated. In the first case, you're doing it withing a callback function but since you correctly declared the route variable outside the function, it shouldn't be a problem.
I've been doing a bit of research...looks like the app is used to gather all the information, and then you can view it as a web service. Or at least, that's my understanding of it. I don't get how this can happen automatically though?
It's compiled from CoffeeScript right? Very cool.
Wow. I'm moved :)
Awww.
yeah that is a cute turtle.
I had same thoughts, so I ran the following code - var latLng = new google.maps.LatLng(37.600006, -122.38653399999998) route.push(latLng) $.getJSON('data/stops.txt', function(json){ for(var i=44; i &lt; json.length; i++){ var latLng = new google.maps.LatLng(parseFloat(json[i].stop_lat), parseFloat(json[i].stop_lon)) route.push(latLng) } }); When I have that leading first block of code (which hard-codes the first lat/lon point in the path), the rest of the points looped by the $.getJSON are plotted correctly. Now, if I take away those first two lines of code, the rest won't work (although I can see by using console.log that the points are correctly pushed into the "route" array). If I move those first two lines of code to the bottom, it works again. I don't have much experience in programming, but this seems really weird and random to me.
That did it!! over 5 hours trying to find this mistake... THANK YOU VENKMAN, AND THANK YOU JLPICARD84!! I might have given up on this project without your help. Do any of you folks live near NH/MA by any chance? I owe you guys.
Awww.. you guys!
When I looked it seemed to work, shall I assume it has been fixed?
&gt;give me a break I am a chick Can we please get rid of this kind of thinking? I am a guy and I cry for all kinds of reasons. Don't be ashamed to be who you are, OK?
Guys don't cry. We ejaculate water from our eyes on occasion. 
http://developer.yahoo.com/yui/theater/
just curiosity - I only know enough to be dangerous and sound stupid here: Is this methodology more efficient (from a display / rendering standpoint, not a production standpoint) than animating a PNG sprite sheet instead? I'd think that might be more efficient than having to parse the whole apng, etc. Of course that means having to create sprite sheets... Either way, it's a really cool proof of concept / thought experiment... I just wonder what the best thing is for clients to be rendering.
[Notepad++](http://notepad-plus-plus.org/).
I can't believe she is gone. HNNNggghhh awwww boohooo hnnnngh. Time for a nap.
vim
sublime 2. sometimes komodo with jslint and all js extensions (for when it gets complicated) edit: also, very useful with syntaxhigh.: nano.
Sometimes I'll use NotePad++, but that's mainly because I use it for PHP and other files. Otherwise I sometimes use Visual Studio, as it has an auto-formatter. It means you can write something like: this.foo(){return this.blah++;}; ... and it'll turn it into... this.foo() { return this.blah++; }; That's dead handy, as it allows you to type in a more lazy way. But sometimes I'll use NetBeans instead because it has better multi-line comment support. Hit enter whilst writing one, and NetBeans will append a * at the start of the next line. VS and NotePad++ don't : ( .
Spending a week really investing into learning vim was the best and worst decision I ever made. Best because it's an amazing editor, worst because I can't stand developing on my windows machine anymore, editing through a cygwin shell or gvim just don't cut it, all other editors like notepad++ and visual studio are streets behind.
I love the Aptana plugin for Eclipse; I get all of the good stuff I want but none of the other junk they put into their Eclipse package (considering that Eclipse is bloated enough as it is, this is a good thing).
vim via putty is just as good for me.
Textmate.
Notepad++ or gedit.
So what happens to the Elance guy then?
What's wrong with gvim on windows? With all the title bars and window decorations and stuff turned off, it seems really great. Combined with 32bit color schemes and great font rendering (and Consolas, which I enjoy) not only is it trim and functional but it looks really nice too. 
TextMate or Sublime2
Eclipse and Textpad.
Upvote for sublime text!
MacVim w https://github.com/carlhuda/janus add ons 
same here :'(
Emacs.
I dunno, just doesn't feel right.
I'll give it a shot but last time I used it I recall there being some issues with key mappings or something
I had the same problem (numbers on the numeric island on your keyboard for instance), but that's fixable with a little bit of mapping and/or setting things up properly (or so they say, I've gone the lazy way and mapped that shit). The only thing console vim doesn't that MacVim does is obey my map for shift+space.
Terminal vim can do full colour schemes as well if you set up your terminal properly.
Not free, but worth every penny. [WebStorm](http://www.jetbrains.com/webstorm/). The productivity and refactoring support for Javascript is amazing.
The fact that it runs under windows? The fact that it runs in a window? Is it just with gvim on windows or on other platforms, too? (Just trying to figure out what it could be =] )
Though they're not often distinguished, there are two kinds of memory leaks: 1. A page runs some JavaScript, memory gets allocated, and that memory is _never_ freed, **even after the user leaves that page**. This is the _browser's_ fault; it's a bug that needs to be fixed in the browser itself. 2. A page is designed to exist for a long time (a single-page app or something like that) and does complex things that need memory allocation. Over time, the page uses more and more memory, usually because it's not properly disposing of things it no longer needs. This is the _author's_ fault; even though all that memory will eventually be freed when the user leaves the page, it's exceedingly impolite to hog so much of it for so long. The first kind of leak is quite rare in current browsers (but is easily reproducible in IE 6–7). The second kind of leak is increasingly common. If you're writing a single-page app, please spend time thinking about this sort of thing. When you replace parts of the page, are the old DOM nodes disposed of, or are they kept in memory through references that are never used? If the app keeps a cache or a lookup table or something like that, is it the sort of thing that will only ever get larger over time, or is it pruned once in a while? Kind memory management can even result in apps that _feel_ faster because the browser pauses far less often to do garbage collection.
I don't think it's that, I prefer using vim through terminal on my linux machine as well.
Web Storm by JetBrains http://www.jetbrains.com/webstorm/
What's wrong with VS? Just use VsVim. It's perfect.
You just like terminals very, very much then. Nothing wrong with that. Oh, and happy bday, btw =]
I've tried vsvim, didn't like it. I used to be all about VS.net and it's a great IDE don't get me wrong, but it's just not vim.
I regularly use: * Vim * PhpStorm (WebStorm) I have also heavily used: * Netbeans (I replaced this with PhpStorm) In a nutshell I tend to use an IDE like PhpStorm for most development (Javascript, PHP and also HTML/CSS) but tend to use Vim (usually MacVim but also just whatever Vim is installed as needed) when working over a remote connection or when making small, quick edits. When I work on Windows I use Notepad++ but I have never gotten all that into it as I prefer an IDE to a text editor (and I don't like developing on PC's... strongly prefer Mac or Linux for the powerful, built-in, command line options)
Probably. I used to love VS.Net and before I started at my current job, once I started here (k)ubuntu was the standard dev build and after trying a few IDEs like eclipse, netbeans, aptana and zend studio I threw in the towel and started using vim and never looked back. Everything else just feels too bloated and klunky. And... Damn 5 years seems like just yesterday I grew bored of digg and stumbled on Reddit.
IntelliJ, Aptana and TextMate - depending on what I'm working on.
really gvim doesn't cut it? I really like gvim.
Awesome emulator. How are my save files stored? As cookies on my computer?
Don't know what to tell ya, it's just not my thing.
hell yes. emacs or geany. *in this specific order*, depending on my mood during the day. 
notepad? editplus?
[e](http://www.e-texteditor.com/)
edlin
Yeah. Are you a javascript-mode fan or js2? I know people get very partisan about such things...
Virtual Machine. Full screen. The only way to "fix" the Windows problem. :)
You could always install a virtual machine, then you could have an actual vim installation on your Windows machine along with all the other Linux goodness and still be able to play games on Windows.
Fucking hipsters.
[gedit](http://projects.gnome.org/gedit/)
&gt; Eclipse With or without the Aptana plugin?
Photoshop
gedit at work, TextWrangler at home.
[PSPad](http://www.pspad.com/)
Editplus
[Komodo Edit](http://www.activestate.com/komodo-edit). It's free.