Hahaha. That's hilarious.
No generics for JSX? :\(
Thank you, that's awesome! 
As far as I know - inertial scroll got disabled only on mobile, and only for internal containers. And there is no "documented" reasons why.
Well, maybe if web components actually get implemented everywhere and IE suddenly dies that's going to be the standard for interoperable components. Until then, plain dom manipulation is the best we have.
Honestly, which economic system are you advocating for if you're against communism **and** capitalism?
Yep, it's in there. Not sure why it wasn't mentioned in release notes. I've been looking forward to this release for a while because of this feature. Just upgraded, and it simplified a bunch of stuff alot.
Hi /u/Damien_Doumer, For javascript help, please visit /r/LearnJavascript. Thank you!
Can you please explain why asking for money is banned here? I mean they gotta make profit too right? PS: I am not being sarcastic, I am genuinely interested to know 
Hi /u/Damien_Doumer, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `doumer.me`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [doumer.me](/search?q=%28and+site%3Adoumer.me+author%3ADamien_Doumer+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|23|96%
I'll tell you for $5.
TIL saying that you won't earn money from blogging means that you're against capitalism.
:/ Medium is letting me publish something and some more, thus they charging something. if a user like it, they will buy it. I do not understand what service you are offering here. We are just discussing here. You are the most, you can take any decision you want(like Medium). As a user I was just asking the rationale.
Might want to take your own advice and stop paywalling your shitty blogs you write in your moms basement on your free time (which is entire day since your mommy wipes your ass and father earns enough money anyway, right?), kiddo.
That's actually very interestingA
&gt; you won't earn and &gt; you shouldn't be allowed to earn are two different things.
so ... only people who are paying will be able to read? oh!
Yeah, closed the tab as soon as I saw "blockchain" mentioned. 
knex is a query builder, while objection seems to be an ORM that uses knex as the query builder.
yes, that's what a 'paywall' means.
It's useful to know about reselect. But at the same time this article repeats about 95% of what's in the reselect documentation itself. Personally I also feel that having selectors tied directly to a component is the wrong approach considering they are meant to be reusable throughout the application. Having a selectors folder at the top level is an easier approach and makes it nicer to refactor in the long run if things change. One thing to note is that selectors have a cache size of 1. So if you're going to be re-using them then you should create a factory for that selector [docs](https://github.com/reduxjs/reselect#sharing-selectors-with-props-across-multiple-component-instances). 
&gt;It's a place designed and intended for people to *find interesting content...* and no matter how great the article, if 99.999&amp;#37; of people can't see it, then the submission is nothing but annoying spam. I agree with you, but I also think this is self regulating. Why would people upvote content that they can't view? I'd rather know that good content existed, and have the option to pay for it, than not know it exists at all. Couldn't we have labels like 'Behind a Paywall' like other subreddits?
According to the person who created this https://reach.tech/router/credits 
Am I dumb, or does their solution for the "string mask" question unnecessarily use str.slice(0, 4).length when Math.max(0, str.length-4) would have been clearer and more performant?
Most of the articles I see are just really pretentious people forcing their opinions on everyone
Isn't this kinda like Steemit, though?
When I started seeing premium articles from other sites and realized they were free to view on that other site, I pretty much immediately stopped going to Medium.
Clap clap. This was bound to happen. Any platform which promises free content without ads is guaranteed to do a bait and switch once they have enough users. This is what medium did, they got popular and now more and more content is behind paywalls.
Here some documentation on Github, seems more complete and better presented than the one of the Google official website. [https://github.com/google/google\-api\-nodejs\-client/blob/master/README.md#reference\-api](https://github.com/google/google-api-nodejs-client/blob/master/README.md#reference-api)
Not at all! If you think a question can be improved please make a PR: https://github.com/fejes713/30-seconds-of-interviews This project is a community effort not from an organisation.
What if we can create a platform, with ads, inside blog posts, anf authors earn money for clicks on ads on their page, you know youtube/adsense but for blogs ? This would pay authors and keep all the content free.
Just because I'm interested in JavaScript doesn't mean I'm interested in literally anything else the creator of JavaScript expresses interest in.
Looks cool. I'll check it out. Thanks for recommending.
I don’t speak for the mods, but allowing people to ask for money here is effectively advertising. You can buy such advertising from Reddit directly. Additionally, it makes us exclusive vs inclusive. Just my thoughts.
Lol ok whatever guy. WASM is going to obsolesce JS despite all of the people who already have other options and choose to use it anyway. You know all of the use cases for every project/language/developer combination and everyone who uses JavaScript is dumb for being good at something you're bad at. There's no difference between writing Lua and writing Assembly, and anyone who says otherwise is arguing semantics. Wah wah wah. I bow to your omniscience. Hah.
Do you know why the state gets set sometimes before the for loop finishes? It's because the 'axios.get' returns a Promise, something that will definitely be returned, but not right away. When the Promise is settled (finished) the function you defined in then() is executed with the result. However, and here's the issue: the whole statement of get() / then() / catch() is executed immediately and the script continues to execute while the HTTP GET is being invoked. So when it reaches your setState assignment it may, or may not be finished. You could put that assignment in the then() function, or you can add a finally() function after the catch to perform the set state. It's a good time to acquaint yourself with async / await since it makes Promises a bit easier to follow, at least IMO.
Eiche also contributed substantial funds to prop eight. He does lots of things that aren’t a good fit for this sub. 
I don't see how prop 8 is relevant to a JavaScript subreddit. So I don't see how his donation behaviour on prop 8 is "not a good fit" for this subreddit when it isn't even relevant to the subreddit.
Thanks for you response I am actually familiar with async and knew that the state was being set before the for loop ended because of that. I tried putting the assignment in the then() function but it didn't work there. I just tried the finally function which I didn't know about earlier. Your explanation was excellent and very helpful! Thanks!
I'm great at JavaScript. I just think it's a shit language. Also it's funny you mention Lua since Lua can compile to WebAssembly (or interpreted or whatever) just fine. I'm not even arguing about compiled vs interpreted. It's simply that JS is an incredibly poorly designed language, I'd take Python over JS any day. Most people "like" JavaScript because of Stockholm syndrome. 
&gt;Unfortunately the pipe function in my example cannot be typed in TypeScript. Yes, yes it can as evidenced by the [createSelector](https://github.com/ngrx/platform/blob/master/modules/store/src/selector.ts) function used by ngrx to create memoized selectors. It has nothing to do with methods vs functions. You might have contributed something to typescript but you are showing a serious misunderstanding of how it works. I have provided 2 examples that directly show how your understanding is incorrect. I'm not sure what else I can do. You seem unwilling to consider that you might be incorrect.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ngrx/platform/.../**selector.ts** (master → ab92903)](https://github.com/ngrx/platform/blob/ab9290342c7298ea30c955917820e401edeb4874/modules/store/src/selector.ts) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dzwx1u4.)
Thanks for your thoughts on this! Making the connections between public methods and the code is definitely the key in!
Thank you! I'm new and actually not familiar with unit tests. Can you offer a pointer as to how to find/understand/do this? To be honest, I'm in the "explain like I'm five" zone regarding this topic :) 
Sure. But then you're arguing against something I didn't say. Whether Lua compiles to WASM is totally irrelevant to the question of whether writing Lua is the same as writing Assembly, which it objectively is not. Which, by extension, means that it is objectively incorrect to conflate them. I use JavaScript for rapid prototyping because I know enough about the language to build quickly while avoiding the dumb parts. That said, you thinking it's a shit language is not the same thing as it actually being a shit language. Hell, Python's stupid print keyword was a shit design choice. C++ has half a century of shitty choices baked into it. Rust abandoned some of the really great things from C++ and replaced them with traits. Scheme is packed with highly opinionated design choices. JS has some really stupid design decisions and owes it's success to the browser market share it dominated, this is true. But none of that changes that it's better suited for its niche than WASM is. WASM is stepping in at the opportune time to fill the void left by Java Applets, browser plugins, and flash. That's the market I think it's going to dominate, not the "let's animate a dropdown menu" market.
Are you being sarcastic? Because blogger had been that for like 15 years now.
Yeah sorry, totally forgot about that, but i read here people like medium because its simple and neat, one design, not have to woory about theing like blogger. Plus blogger is all about separate blogs, I believe medium is better because tou can just go to the homepage and have fees of posts you might like, or interested in based on categories.
You can check out the demo here: https://expense-tracker-demo-1.firebaseapp.com/
Wow, your post and comment history is a real treat to read. Real enlightening stuff. 
I have to go against the grain here and say this sucks. A lot of us dislike ads and tracking on the web, and I would much rather foster alternative ways of funding the web as a whole. One of those ways is the ability to directly pay someone for what they made, paywalls. Another sub I frequent did something similar to this, but after some discussion decided instead to tag all sites behind a paywall as such, and I personally much prefer that method. That way people who don't want to pay can still comment and be part of a discussion on Reddit or can ignore/filter the post entirely. And those that do want to pay content creators directly can do so. I know this would require changing your sub rules, and I obviously still support removing low effort posts, spam, and things like "first x users free", but I'm sad to see such backlash against what is in my opinion a valid, ethical way of monitizing content creators.
What about a compromise. Articles behind a paywall are tagged as such and all readers can easily choose to ignore them, or can even setup their Reddit to filter them out? 
You're really only speaking for yourself (and I'm sure many others) there, but not everyone. I see the point the above poster is making. Why outright ban paywalled content? It should be available simply for the sake of no censorship, if nothing else. If you don't like it, don't pay for it. All it does is raise the signal-to-noise ratio for you personally while you browse Reddit on your phone. Add a per-user filter on paywalled content, done. Stop trying to be so absolutist in an argument for the sake of being an edgelord.
This is clever idea. Good job!
My dude. That's the point
I have to say I agree, although the quality of the content on medium is often questionable (a lot of self promoting, or very poorly written opinion/advice posts) overall there is some very good quality content there. I hope Medium focuses on making sure the content quality increases and content creators are properly rewarded without having to bow to advertisers demands, which is a good thing. I also think the impact of the GDPR and decline of online advertising except for the big boys (fb/google) means we're going to be seeing a lot more paywalls. 
Here is the thing. Those reps might seem meaningless but they are doing something amazing inside of your brain. Each rep is strengthening the connection to your long term data stores. Don't be fooled to believe that just because you get it now, you will retain that knowledge. You won't. At least not much of it. The one thing I would recommend is try to space out our reps. This helps with retention. Instead of doing JS, JS, JS, JS, add in some other things in between. JS/CSS/HTML...repeat. There are a million things you could interleave between these reps. I am currently in a JS bootcamp and while my JS is strong, my knowledge of the DOM is on the weaker side. I didn't/don't sweat it because React is doing the DOM heavy lifting. There ARE times however, were you have to touch the DOM \(albeit rarely\) and I'm always having to look things up. I just think that I won't consider myself a complete JS developer until I have command of the DOM. Fortunately, it hasn't held me back in bootcamp. On the subject of this, have you tried Wes Bos' Javascript 30 course? He does 30 days of pure JS projects and from what I hear \(I've only done the first few\) they are a really good way to expose yourself to a variety of barebones JS concepts.
Why bother with Reddit then? Isn't Medium enough of a platform for paying subscribers to find and discuss paid articles?
Oh, man. So just because Eich was involved in it doesn't make it relevant to this subreddit? It feels like somebody was *just* making that point...
##r/vuejs --------------------------------------------- ^(For mobile and non-RES users) ^| [^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| ^(-1 to Remove) ^| [^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/853qg2/ignore_list/)
I am willing to help. PM me and we'll take it from there.
Isn't the Reddit redesign going to break subreddit filters? I thought I heard that somewhere, but I haven't been following that kerfuffle too closely.
Folks would rather get pig headed about accessibility(and also hate ads) than admit content isn't cheap to create, curate or maintain. 
There are a lot of folks whose livelihood is blogging....
Yes, it'll make creating components significantly easier with styled-components.
No... I like the community, I like the layout, I like the to curate. I honestly don't think it's that big of a deal that some people have to see clearly labeled paywall articles, especially if it helps curb the constant influx of shitty blogs written as fast as possible for the ad money. If they become so common that it's a detriment to the subreddit, then I could see limiting them to one day a week or something, but an outright ban seems less like good moderation, and more like enforcing a mods opinion on paywall on everyone in the sub.
I don't believe so. IIRC they are working with major subreddit a to make it an official feature, and not just css hacks.
It's there! It's just not very useful given that our inference has improved in 2.8, so I didn't put it in the blog post. Just check out [the Roadmap](https://github.com/Microsoft/TypeScript/wiki/Roadmap) for an authoritative list of noteworthy features.
&gt;He does lots of things that **aren’t a good fit** for this sub. I was trying to say that what Eich does that is irrelevant to the sub is neither a good fit nor a bad fit for the sub. That is, is neutral because it is irrelevant. The above quoted bit suggests that Eich dies things that are not a good fit, regardless of whether they're actually relevant to JavaScript.
\&gt; I like the community Well, the majority of that community will not be able to view paywalled content or discuss it in a meaningful manner. \&gt; I like the layout, I like the ability to curate. Then start a /r/javascript_paywalled subreddit \&gt; a mods opinion on paywall on everyone in the sub I don't think it's just an opinion. It's a legitimate response when you want to avoid building community that discriminates against people who don't have a disposable income. \&gt; I could see limiting them to one day a week or something That's one day a week that /r/javascript is useless to those who cannot afford it.
Which is why I feel a tagging system is ideal. You get the community, you get the ability for everyone to discuss an article even if not everyone can read it, and everyone is free to either programmatically or manually "ignore" a post if it's paywall. It's not discrimination anymore than English articles being allowed are discriminating against all other languages. I do need to point out the irony in attempting to avoid discrimination and promote inclusiveness by banning an entire category of posts.
\&gt; everyone to discuss an article even if not everyone can read it Do you really think it's a good idea to encourage discussion of an article when the majority of the community can't read it? Reddit already has a problem of people not bothering to read an article before commenting on it, I can't imagine it would get better if literally couldn't read it even if they wanted to. \&gt; I do need to point out the irony in attempting to avoid discrimination and promote inclusiveness by banning an entire category of posts. I'm not afraid of irony. By that same measure, it's pretty ironic for an author to benefit from free and open technologies and then exclude people of that community from reading an article because they can't pay for it.
\&gt; not be told to shove off and start my own community Sorry, I didn't mean that as an affront. I legitimately think it's an interesting alternative to this problem \-\- to have the paywalled content in a separate subreddit. Perhaps the /r/javascript mods would even endorse it for you.
\&gt; Because from my point of view, removing paywalls will just lead to more low quality blogging, which will harm the community, because many good content creators will go to where they can earn something. I agree, it's a problem. I don't like that the web is so ad\-driven either. I'm hoping efforts like Flattr will take off, so that you get to effectively pay what you can \(if you can\). But I also don't agree with paywalls, which is why I support the mods' move here. 
I do think it's a good idea to encourage discussion even if everyone can't consume the media. Not only is it going to happen naturally (I'm not watching a video at work), but not all discussion is about the article alone. Talking, responding, discussing can happen on subtopics within a thread that pop up which are related to the article, but not solely about the article. I don't see it as a big problem, but more of an inevitable conclusion. And I'm not trying to exclude people from the community, you are. The community isn't just the posts that are made, it's the comments, the commenters, the help and solutions and discussions that are had. Reddit to me isn't about the articles, it's about the commenters. Also, not all articles are about open source, and benefiting from open source isn't the least bit ironic, nor is it unethical in any way. I've contributed to several projects that are used in commercial products, that doesn't give me any right to demand free access to those products. Singing is another free/open thing, but it's not the least bit ironic that singers charge money to see them or hear a recording of them. Like you said above, if all you want is the article, just go right to medium. But if you want the Reddit community, you need to come here. And I really feel that allowing paywalls to be posted and still allowing discussion on them even though not everyone can read it is more inclusive, better for the community, and will benefit more people.
But "pay what you can" isn't sustainable. This has been tried again and again and again, and the result is always the same, you make nothing. I know a Dev that had multiple donation systems, and after a couple years and over a million app downloads, got exactly $0. So he made the app cost $1, and suddenly he was making several hundred a month. Like it or not, the world isn't fair, and there is no way to make it fair. Simply blogging at all excludes people without a computer/phone, that don't speak the language, that don't have the money for a data plan to view the content, that are in oppressive countries that don't allow the content to be read, etc... Not to mention that now with laws like the GDPR advertising/tracking is becoming a payment method that is illegal for users to pay with, meaning you end up with the only option being paywalls or nothing for large parts of the world. And again, 100% of the people in a region not having access is worse than even 90% of the people in a region not having access.
I think splitting the question into levels was a mistake. It's the depth of the answer that should differ depending on the level of the candidate. A junior should know about closure, an intermediate/senior should know about currying. A junior/intermediate should know what a linter is, a senior should know what an AST is. A junior should know how to use promises, an intermediate should know the difference between: promise.then(a, b) promise.then(a).catch(b) Junior should have heard about unit testing, Intermediate should know how to write test, Senior should have setup testing frameworks. 
Well alternate subreddits have never worked, even with explicit permission of another. But I will point out that you still haven't made any points about why paywalls shouldn't be in this sub other than "I don't like them" and "not everyone can read them". Why does the existence of something on the sub make the entire sub worse? Especially when efforts can be taken if necessary to limit the amount of these articles to prevent the subreddit from being overrun by them.
I think "not everyone can read them" is a legitimate and sufficient point. Reddit is about sharing and commenting on content. If a large majority of a community cannot read the content, the premise is broken. I never said I don't like paywalled content. I subscribe to Netflix, YouTube Red and heck I might even want to try a Medium membership. But I would never bother submitting a Netflix show or a YouTube Red show to reddit, and I wouldn't be alarmed if mods of any subreddit banned those posts. Paywalled content just doesn't make sense for a platform like reddit. \&gt; Especially when efforts can be taken if necessary to limit the amount of these articles to prevent the subreddit from being overrun by them. Now you're asking about the effort it would take to moderate this content on a subreddit with 285,000 subscribers and goodness knows how many submissions per day. I can't speak to how much effort that takes, so it's better if you message the mods directly.
Jesus I never once talked about writing ASM directly. If it came off that way then I'm sorry that you misunderstood me. I talked about Lua because it shows that even people who like scripting are going to be swapping out JS to instead compile/interpret to WASM. All those languages added together have less quirks and bad design decisions than JavaScript. Compile to WASM is going to dominate the "not completely trivial and on the web" market.
Not the author FYI, just cross-posting from /r/programming.
I don't think u need to "learn" visual studio code. You just use it.
This is a fantastic answer, thanks. 
You could always post those questions over at /r/LearnJavaScript as well. It’s a great sub for that type of stuff. And I think many times other people end up having similar questions so they get to learn in the process, too.
I think it might have been interpreted as discrediting any of his ideas (even ones relevant to this sub) because of that view 
Well you're obviously free to think that.
How about you see the product yourself first? Ever tried Brave browser? I just find it funny that people dismiss amazing things without even checking what it is. Brave browser is really good. So much negativity in this sub all of the sudden what the hell.
I think it's actually "hear hear". https://en.wikipedia.org/wiki/Hear,_hear
Actually, I use Brave on a daily basis, and its the default browser on my phone.... soo yeah. Not really attacking you my dude, you just made a strange point, almost implying that we should be interested in whatever the creator of JavaScript is interested in. Just not how it works.
I get your point. I made a statement in a way that lacks context. 
Lately, I have been working on a new project; super fast and minimalist frameworks for the modern web. Nodejs has been the first one to released. Please have a look, fork it, submit PR, submit issues. Contributions in the other languages would also be very welcome. \-\&gt; [https://github.com/GetRayo](https://github.com/GetRayo) Helping spread the word would be highly appreciated. Star it. Watch it. Follow it. Save it. Share it. 😎
All good, marketing a brand is helpful. I know all about trying to come up with click bait titles from my YouTube days lol. Looks great tho keep it up
You forgot to put the project link!
# *REDEEMED*
Pure genius!
…and most of what isn't is "20 Top Lifestyle Hacks You Must Do Before 8 AM To Become Rich In Two Weeks". I've been [on Medium](https://medium.com/@jeff_dickey) since December, 2014. For the first two or three years, it was a *fantastic* place: incredibly dynamic; open to all sorts of writing and writers; appearing to walk the talk of "a different, more open publishing platform". And then the Twitter roots became more and more blatantly obvious. The once-thriving poetry and literary-criticism communities were the first to be shoved under the bus, followed by the addition of "mainstream" publications (_The Atlantic_, _The New York Times_, _The Washington Post_), the paywall with its *utterly ridiculous* three-stories-a-month limit and, finally, the degeneration into a den of self-promotion and "lifestyle hacks". It's become the 1970s UHF TV of the Web, with a paywall that lets you watch VHF as well. What absolutely cemented my decision not to subscribe, however, was the practice of sending iOS/Android notifications for articles published by authors you follow, or simply "popular" authors — with nine out of ten of those links leading behind the paywall, and thus counting against your three "free" views. Jack Dorsey and crew obviously intend the paywall to annoy people into putting their $5 a month in. It may have brought them a few new members. But I'm quite certain that it's driven many more, even those of us who were originally rooting for Medium, to say "no way in hell". Good that paywalled articles are on the spam list. There are good writers that will be affected; they deserve a more ethical platform.
[removed]
Thanks for doing this mods. 
[removed]
I couldn’t agree more. People need to make money, maybe they do that by writing fantastic content and charging for it. This sub shouldn’t take a stance on this, but focus on building a community around great ideas and projects, no matter where they come from.
Sounds good, and thank you! This was really helpful for me :)
Where are you serving the .js and .css from? It seems like you are not sending it from the server. I would go to 'http://localhost:1234/scripts/main.js' in the browser and see what it returns, as I suspect it is not .js and .css.
&gt; if a user like it, they will buy it. No. It's "pay first, see what you bought later". 
My thoughts: Technical: 1. Sound is _way too low_. 2. Since you don't have a large piece of code, you should use a larger font size. 3. I would also use a colour scheme with more contrast and vivid colours. Video encoding will later tone it down a fair bit anyway, so even if you choose colours that are too loud the final result will probably be ok. If you use those colours at that size, the final result is bland and harder to read. 4. The end is a bit abrupt, isn't it? I mean, you don't _need_ to say goodbye or whatever, but this looks like it's cut unexpectedly. As if it was not on purpose. Content: 1. You don't need to start from a completely blank editor. In fact, most of the first one minute or one and a half minutes could've been cut out and pre-written. 2. Motivation doesn't seem to be well justified. You give two reasons: "It's ugly, but not such a big deal" and "With 10 parameters it could get annoying". This doesn't really sound like enough motivation. Later in the video, you mention saving time and typing less. Those also don't seem like the best of reasons. 3. Related to the previous point: function design should be carefully considered and not solved in such a _casual_ way. Simply throwing all the arguments together into one object does not carefully consider the implications on your function interface. To expand a bit on this: If, as you mentioned, you have a function with ten arguments (*) and it is common that most of the times you only use 2-3 of them, then _quite probably_ you should put those three arguments first, and group _the rest_ into one optional object. 4. Expanding on this even further, you only focus on one particular case where everything can have a default value. This isn't always possible and you should take this situation into account and show the case where some of the values don't have a default and are required. 5. While it is _fine_ to use a synthetic example with names like `abc`, `param1` and `param2` for this explanation, it would be _better_ to prepare a _real-ish_ example that makes some sort of sense. It doesn't have to be anything very sophisticated, but having something that, at least, appears to be real, will actually make it more relatable to watchers and this, in turn, makes them understand the explanation better. (*) Which is, in itself, something you quite probably shouldn't have anyway.
[According to the docs, this might be it](https://rchipka.github.io/node-osmosis/Command.html#fail__anchor)
Some of the questions make no sense to ask in the first place. &gt; What is the only value not equal to itself in JavaScript? How does answering this make you a senior developer? &gt; What is a focus ring? What is the correct solution to handle them? I've been programming frontend since 2008, yet this is the first time I encounter "focus ring" term. &gt; What are some differences that XHTML has compared to HTML? What? Why in earth do I need to know that in 2018? 
They technically are Medium blog hosted on a custom domain. If the sub decides to go total non medium in the future, that'd have to go as well.
Oh intersting, I didn't know about levelDB , your project seems nice but I wish there was a readme
Yes, and that's fine if the discussion happens on medium itself as everyone reading the article will have already paid. Here on reddit only a small part of the community will be able to read the article so it won't add much to this forum.
You haven't saved a form into localStorage. You can't. You can only store strings! **\[object HTMLFormElement\]** is the string representation of a form element. 
If that is what gets them the required funding to pull it off, why not? Adding blockchain is more about getting funding these days than it providing a benefit. But its not like its a big issue to use it either.
The main issue is that they don't allow reading for non paying visitors. If its some premium subscription or even something like Reddit Gold does, its fine. I also don't get why Medium is doing it like this, because this will hurt their views for certain articles. I'd rather have them go harder on people who use adblock than completely blocking views altogether
Check out FunFunFunction channel on YouTube there are a lot of videos about basic and advanced JS concepts also u can become a patron and join FunFunForum for only 1$ a month and can ask questions there, its very fun and helpful community
in console of any browser :\)
alright thanks. so how can i convert the string representation back to a form element 
By using JSON.stringify, JSON.parse methods and DOM APIs. You can also store the values individually which doesn't require JSON. Some related articles/questions: [http://blog.teamtreehouse.com/storing\-data\-on\-the\-client\-with\-localstorage](http://blog.teamtreehouse.com/storing-data-on-the-client-with-localstorage) [https://stackoverflow.com/questions/2010892/storing\-objects\-in\-html5\-localstorage](https://stackoverflow.com/questions/2010892/storing-objects-in-html5-localstorage)
 const RE_SHOULD_QUOTE = /",\n\r/ const RE_ALL_QUOTES = /"/g function quoteCSV (value, force) { value = String(value) if (!force &amp;&amp; !RE_SHOULD_QUOTE.test(value)) return value; value = value.replace(RE_ALL_QUOTES, '""'); return `"${value}"`; } function gimmeCSV (data) { // Data is an array of lines, i.e. Array&lt;Array&lt;string&gt;&gt; return data.map(row =&gt; row.map(val =&gt; quoteCSV(val)).join(',')).join('\r\n'); } 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Did they not simply copy Svbtle to get started with? It seems that Svbtle has the right idea and charges the writer $6 per month to use their service, but promises to maintain you content when you end the subscription.
I just did some work on a Frozen-flask + Github pages tutorial. I will publish it shortly and hopefully it will help some people move. Github itself integrates Jekyll (Ruby and a bit more restrictive) Another one to take a look at is GatsbyJS. Certainly with the Netlify CMS and hosting (generous free plan).
The console.log() line is executed before the request.onload set function, therefor it's logged as undefined. It looks like you're having a race condition. 
That's medium on a custom domain and apparently you get a 109px header before any content starts. Real annoying.
Loot boxes all over again
I second this. In the post-GDPR world we need to consider that not everything can be free. That shouldn't mean we can't discuss about it on more general platforms like reddit.
I wouldn't hate ads, if they were not: * Obtrustive (popups, etc) * Distracting (Flashing, autoplaying video &amp; sound, etc) * Malicious (actually had an ad install malware in the background via javascript back in 2010... heavily blocked ads ever since) * Spyware
Amazing, thank you! I hope they will implement support for this very soon.
Put the console.log inside the onload handler.
1. The `colorz` variable *is* updated with the response of the XHR call, just not when you are logging its value. This is because XHR requests are async. 2. Like that. Unless you want to use an XHR library for convenience. 3. The `request.onload` function is a callback method that gets executed once the network request completes. 
Not with that attitude ;) Try XHR loading all possible filenames, loop through them, starting from "a", through "aaaaa" and "aaaab" to "zzzzzzzzzzzzzzzzz.zzz" - or start from digits, 0 ideally ;) - you get the idea. If it doesn't return 404 then increment your counter. Some months later you should have a result.
yea, sometimes i go to developer tools delete that banner first
Visit /r/LearnJavascript and ask your question there. Mention "asynchronous execution".
I don't think it's reasonable for "content authors" to monetize their own work, and then expect to be able to [ab]use open platforms like Reddit for free publicity. 
The issue is that the sub would be filled with content that 90&amp;#37; of people cant read because they have to pay. Why would anyone want to encourage that? It's for the exact same reason that many subs don't allow links to paywall newspaper articles.
At a high level, unit tests are tests that prove your code is working as expected. They're like a "safety net." Remember when you had to do proofs in math class? They're kind of like that. All projects differ, but many follow the folder structure of putting the code in *src/* and the tests in *test/* (or *tests/*). I'll link one of (my own GitHub repos)[https://github.com/coreyc/es6-curry-compose-pipe] here to demonstrate, just since it's my code I know it well. This repo is very simple in terms of structure too, so that also makes it easy to demonstrate unit tests. In the *tests* (folder)[https://github.com/coreyc/es6-curry-compose-pipe/tree/master/tests] I have one test file (a .spec.js file) that "maps" to each of the files in *src/*. Again, all projects are structured differently but you'll usually find one test file per JS file. You can see that in the (compose.spec.js)[https://github.com/coreyc/es6-curry-compose-pipe/blob/master/tests/compose.spec.js] test at the top of the file I've imported the code I want to write tests for: `const compose = require('../src/compose')` And then in the body of the test file, you'll find a `describe` which generally is just a grouping of tests, followed by a bunch of `it`'s which are the unit tests themselves, i.e.: `it('should compose a function from right to left', () =&gt; { etc....` `it('should compose a function with one function', () =&gt; { etc...` and so on. These tests declare what the `compose` module should do under a set of given circumstances, which you as the developer come up with. There are guiding principles for things to test, like should accept the right type of argument, should return something if it's supposed to, etc), but a lot of this will depend on the application and how that function is supposed to behave within the application. Which brings me to one more important point. Unit tests tests things at the **unit** level, meaning the smallest piece of functionality that makes sense to test for. Unit tests will not test something like: "user should be able to click a button, which should call a service, which should register the user, which should return a success message to the user." This would be considered an end-to-end test, and if you find yourself writing tests like this you need to break them down much further. You could break that end-to-end test down by each "should" and that would be closer to unit tests, depending on the code of course. A good general rule of thumb is to have a unit test for each public function in your codebase. So if you were studying the library I linked to, you could start with the `compose` module for example. And what I'd do is, in your editor or IDE, open up the tests file in a split view with the accompanying code. That way you can easily reference what *should* be happening with the code if you get stuck on understanding what it's supposed to do. Make sense? 
Yes there should be one, but right now I have a kind of writer's block on that, and am busy making some kind of Active\_Record system to make the API simpler for put operations, but there is some auto\-lookup\-and\-create functionality that is proving a little bit tricky to implement. This project will stay around and develop further. I could get the readme done soon, but could do with a bit of advice on what to include there. Would you be interested in giving more feedback on the project if I get a readme made?
Yeah, that makes sense. I thought it's for publisher's only not for readers. 
Did not know that. I thought it was only for publishers not for the readers. My bad.
We already have rules and limits about self promotion, and like it or not many people are already profiting off platforms like reddit by showing ads and monetizing data. I'm hoping that the widespread usage of ads and data tracking can be reduced by allowing people to pay content creators directly. Also, why do people keep bringing up that reddit is an "open platform". Reddit isn't open sourced, it's absolutely not free (you paying either for gold, or with your information for advertising), it does quite frequently block and ban people that don't follow their rules, and it's run by a corporation which is profiting from it. I find it extremely ironic that people are upset by a push for content creators to get paid for their work on a platform which is profiting from that comment being made.
Newspapers are loot boxes confirmed! /s
In most places you can look at the newspaper before buying.
What makes this better than date fns?
To me, `step()` seems awkward to call. If you're aiming to be Express-like and compatible with Express middleware, then IMO it makes sense to keep it named `next()`. Naive developers may thing there is a major difference between `step` and `next`. That's just my thought. Overall, nice job.
Thank you. My intention was not to be an exact express replacement, but rather sort of inspired-by and compatible-with. step() was more in line with my stack/middleware implementation. Ultimately, it is possible to name the arguments anything you like, so next() will work just fine. Thank you for your thoughts. ✌️
&gt; People need to make money You and /u/Klathmon have convinced me that we should look into a paywall for /r/javascript. Us mods put in hundreds of hours per year maintaining this sub, so we should definitely be entitled to some compensation; agree/disagree? And the same goes for the FOSS authors &amp; maintainers -- maybe they should go commercial, seeing as they collectively put in orders of magnitude more time than any of us, all for zero compensation.
Has the paywall declined the free-side of publishing things on Medium?
I love how you're getting downvoted to hell for simply asking a question. Good ol reddit.
Medium spammers are the bane of all discussion and knowledge sharing of programming on the internet. Thank you, MODS. 
Copy pasting from a module's docs and titling "How to use X with React" is not "funding" anyone. 
God this is so disheartening. I like this community, and I really feel like it's rocketing downhill in front of me... I didn't say that, you know it. I don't like shitty articles any more than most of you, and I try to downvote them and comment why I feel they are shitty articles when I see them. But there are articles which do pay the author, and there are articles which are well written that would not have been made if the author would have been banned from this subreddit. Man I don't even know why i'm still typing...
I definitely recommend NGXS if you are using Angular.
Hey! Thanks for your reply! I actually figured out how to make it work by telling Express to serve files statically.. this one line fixed it: `server.use(express.static('./'));` Thanks again!
Come on man, you are a moderator of this subreddit. Can we have a discussion about this without dropping to silly straw man arguments? If you want to make a paywalled subreddit, I'd fully support your decision! make /r/Curated_Javascript, require a subscription, hell if the content that is posted is good, i'd probably subscribe! Let this sub get run by others if you want, that's okay. You don't owe us anything, as like you said you are an unpaid volunteer. If you are talking about taking the current sub dark and charging for access to what was once free, I can't say I agree. That's a shitty move, a bait and switch, and I don't support that idea. Those feelings apply to articles posted on reddit as well. If someone takes all their medium.com articles that were once free and puts them behind a paywall, I feel they should be removed and have to be resubmitted fresh tagged as "paywall". But posting new appropriately tagged articles behind a paywall is okay in my book. And nobody here is saying that content creators are entitled to compensation, but that they should have the freedom to choose which method they want to use, and not be banned from subreddits because of that choice. If an author posts something and puts it behind a paywall, the entire sub is more than free to downvote and ignore it. And the author probably knows that, which is a tradeoff they need to make. Do they go for a large amount of readers that pay next to nothing, or a small amount of readers that pay a lot? And as you said, the same goes for FOSS authors and maintainers. Many of them do go commercial. Dual licensing is relatively common, and many will charge for support to be able to afford to maintain the project. But nobody is requiring that, and nobody is disallowing that. Each author is free to choose how they want to monetize (or not monetize) their projects , and I don't feel they should be entirely banned from a platform because of the strategy they choose. I used to moderate a few small-ish subs, and I know all too well how shitty of a job even that was, so I don't envy you at all, but in the end it's clear you've made up your mind, and i'm in the minority here. I'm just super disappointed because of all of the subreddits I frequent, I honestly felt that /r/javascript was one of the better run subs. But if even my favorite sub's moderators aren't open to discussions, then i'm pretty sure I don't want to be an active part of the community. Anyway, i'm done with my pity party. I deleted and retyped this like 4 times now, so i'm just going to send it at this point. I genuinely hope this decision works out well for you and this sub as a whole.
Looks interesting. Do you know if it has router store and side effects modules like ngrx? I like the way it uses metaprogramming to cut down on boilerplate but I don't know if I could use it without those two modules or something to replace them.
Yes it has a router plugin. You can find more information in the docs here https://ngxs.gitbook.io/ngxs/plugins/router. And yes you can create side effects. More information here https://ngxs.gitbook.io/ngxs/advanced/action-handlers
Or GitLab pages and use their built-in CI runner.
Agree completely. If we don't like ads, and we don't like paywalls, how do we expect to get any good content if there is no way for sites to get money. We can't just have everything for free. To me, the best thing about reddit is that it is a democracy. If people don't like a post, or don't want to pay. They will downvote. Why is this something mods need to decide for us?
Hi /u/Iduoad, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/ZankaZ, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/SirSkylark, For javascript help, please visit /r/LearnJavascript. Thank you!
I cannot upvote this enough
Neat, thanks!
even you got downvoted :v 
IMO the fact that you have to bundle the whole lib if you want to use it as opposed to just the functions you actually use make Luxon inferior to date-fns. That's a whole 74KB for the minified version 
Eh, I'd much rather make the round trip.
This looks cool
I thought you got a few free premium articles in a certain timeframe as a non premium user? I could be remembering wrong though.
Go create /r/medium_subscriber_javascript. This is not a link aggregation subreddit, it's a discussion board about links. If not everyone can read those, than it doesn't belong here.
easily manipulate dates. its lightweight compared to moment.
aight, sorry didnt know there was a learn javascript sub thanks
Thanks , I am just learning JavaScript. I am also really interested in contributing to open source. This list will help me a lot. If you have any advice on how I could start off , or project which I should start with. I would really appreciate it. Thanks again.
Seems like I haven't been able to explain myself clearly. All your rxjs examples show that you haven't actually used function composition and your only familiarity with the term is the specific implementation rxjs uses. It's not that I'm incorrect this is an issue that has been reported multiple times to the TypeScript team: [https://github.com/Microsoft/TypeScript/issues/9366](https://github.com/Microsoft/TypeScript/issues/9366) [https://github.com/Microsoft/TypeScript/issues/10247](https://github.com/Microsoft/TypeScript/issues/10247) [https://github.com/Microsoft/TypeScript/issues/15680](https://github.com/Microsoft/TypeScript/issues/15680)
Fix documentation and write tests - these areas are often neglected and PRs are always appreciated
 I am looking for a solution to standardize code formatting across multiple machines and editors. Only choice i found was [js-beautify](https://www.npmjs.com/package/js-beautify). But it has an horrid and very opinionated way of formatting. Does anyone know an alternative?
Any particular reason?
Looks great, can't wait to try this out. 
[Prettier](https://prettier.io) is what you are looking for :)
Ok so first off this entire argument is dumb because my original statement was: &gt;No, it doesn't really have anything to do with the lack of a type system. It has to do with functions being 1st class objects. Which doesn't reference typescript *at all*. So anyway deficiencies or not with ts say **nothing** about whether a type system has any bearing on a language being functional. Once again, there are a multitude of strongly typed function languages, like haskell, that disprove the idea that functional programming inherently benefits from the lack of a type system. Furthermore, that first issue isn't valid. At least not anymore. Maybe when it was written 2 years ago it was true, but this code works 100% fine for me, with the types correctly inferred: function flip&lt;a, b, c&gt;(f: (a: a, b: b) =&gt; c): (b: b, a: a) =&gt; c { return (b: b, a: a) =&gt; f(a, b); } function zip&lt;T, U&gt;(x: T, y: U): [T, U] { return [x, y]; } const expected: &lt;T, U&gt;(y: U, x: T) =&gt; [T, U] = flip(zip); const actual: (y: {}, x: {}) =&gt; [{}, {}] = flip(zip); // correctly determined to be &lt;number,number&gt; let numFlip = expected(1,2); // correctly determined to be &lt;string,string&gt; let strFlip = expected("1","2"); // correctly determined to be &lt;number,string&gt; let multiFlip = expected("1",2); For the 2nd issue I will admit that exactly what he is trying to do the way he is trying to do it is currently supported poorly by typescript but there are other means to the same end. It *does* mean that you are coding around the limitations of typescript rather than documenting existing code with types. But, now we are getting strictly into limitations of typescript, not the abstract idea of functional programming with a type system. Finally, none of those links directly address currying and I have no issues with currying properly resolving the correct types. I won't claim that there are no specific types of currying that ts has problems with but, again, that only says something about what typescripts current limitations might be, **not** what the limits of a strongly typed functional language are. tldr: even if ts does exhibit some defects with regards to describing all possible fp notations, that is *explicitly* an issue with ts and not fundamentally an issue with a type system in a functional language. My original assertion is that it was **not** js's lack of a type system that enabled it to use functional styles. And I stand by that statement.
I'm not familiar with jsbeautify but would [Prettier](https://prettier.io) work? It has been getting a ton of hype in the past year (so sorry if you've already tried it). It's also opinionated but seems reasonable imo and has a minimal config file if there's something that you don't like. It's made writing and reviewing code much easier and more productive on my team. We love it. 
Hi /u/myrrtle, For javascript help, please visit /r/LearnJavascript. Thank you!
... that’s kind of a complete dodge of my question 
Added a shortcut CMD+R for running the script :) 
I think you misunderstood miloszpiechocki's comment. I don't think he is arguing against type systems in FP languages, I know for sure that I am not. What I think he meant is that TypeScript will force you to write functional code in a different way than if it's written in JS because you either lose most of the type\-checking or you have to manually write types to help the compiler every now and then which is a bummer. Because you have to spend more time and effort to write functional code in TS compared to JS, I think that his comment that it's "more convenient" is reasonable \(notice that he said more convenient, not that it's not possible as you said \- "..lack of type system that enabled it to use.."\).
Ability to resize is something I'm currently looking at, also the imports. Thank you so much for checking it out! 
Thanks!
i said why. wtf.
It's still very useful in certain scenarios, for example for specifying result/variable types when using react-apollo for graphql.
You forgot Mithril.js 
Out in mighty name of jesus!!!!
This is a great article, but I dare say it swings the pendulum too far to the other side. The author speaks of the audacity of releasing a public product using a framework, meanwhile great products are built on top of Bootstrap, and a zillion other frameworks every day with no issues whatsoever. Moreover, these frameworks use consistent design patterns that make the web a better experience for everybody involved. Anybody who has worked with in-house creatives on custom UX/UI for a product knows the frustration of custom elements since they seldom adhere to consistent design patterns. It's not the creative's fault necessarily, unless you are a huge company, who has the time and budget to come up with a company-wide design system. These frameworks abstract that very cleanly and give you very good patterns to work with out of the box. Can you misuse them? sure! But in general it is better than the alternative of creating custom classes for literally every element on the page because somebody insists on building something from scratch.
No, you answered "what does this do?" and potentially part of "what makes this better than Moment.js?" What makes it better than [date-fns](https://date-fns.org/)?
&gt;Interestingly, JavaScript's lack of type system makes it more convenient for functional programming than C#. I'm not sure how else to read that statement. He even followed up with (emphasis added) &gt;What I meant is that it's easy to implement compose that takes arbitrary number of functions in JavaScript while it's impossible in C# - and that's **because in JS you don't need to worry about types.**
Why do you want this? Normally you'd just set up a build process which packages only the code paths you really need.
Didn't realize day.js existed. Been looking for an immutable Moment.js! Thanks for posting.
[https://developer.mozilla.org/en\-US/docs/Web/API/Canvas\_API/Tutorial](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial)
I love that every framework has a fundamental flaw with state and you need an external library to fix it. Redux I'm looking at you. 
Anywhere outside of the public directories. Using a build tool to compile them into \`/css\` or \`/js\`.
My C++ coursework at school definitely made me a better JS developer. It was also nice taking a break from JS via C++, good read. 
I like them in the same directory as the rest of the component. I also put tests for that component too in there. I’m assuming you’re meaning specific component styles. 
I don't find advertising interesting, and everyone and their mom are starting blockchain companies \(blockchain Iced Tea?!\). Forgive me if I'm fatigued with the clusterfuck that is cryptocurrency.
Do you import your stylesheets in to your jsx code?
this is basically npm `npm install my_package`=&gt; `node_modules/my_package`
or with `package.json` { "name": "my_package", ... dependencies: { "package_one": "1.0.0" } } run `npm install` =&gt; `node_modules/package_one`
Hi /u/danielecook, For javascript help, please visit /r/LearnJavascript. Thank you!
I wouldn't characterize React as having a flaw with state. React is a library meant for building user interfaces. The built in state works perfectly well at the component level. React was intentionally designed to not deal with application level state. As soon as your app gets complex enough to need application level state you need a different library for that. Even when you add Redux to the mix it does not replaced React state which you will still use at the component level. The creator of React explains this in detail. https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367
Hi /u/Azizinator22, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/platinumbjj, For javascript help, please visit /r/LearnJavascript. Thank you!
So i was implementing a service worker to an old angular 2 project with system js and couldn't figure out how to precache bundled js files in the build folder... Thankfully boss started migrating it to ng5 or 6
Except this installs additional files that are not necessary. In a \`node\_modules\` directory...
Half expected this article to just say "Got you! Just learn Rust". But in all seriousness, learning any low-level language is a great asset. You don't have to write system-level code much, but just having the mental model for it can help in the way you think about things.
Which of the 18 most popular repos is mithril supposed to be?
I can not begin to thank you enough for this post. But C++, C even if just under a C++ compiler, and the most basics of assembly.
Yeah, that's what I meant. I do the same for tests. Everything related to the component basically lives in the same folder. There are some generic styles that go in a directory called \`less\` off the root of the project. Right now I'm including them in the base app component, but I guess I should ask if that's the best way to approach it. Esp. curious if any of these decisions cause the app to take a performance hit. I know styling the element directly can, not sure about style tags though..
I don't disagree with the premise that learning C++ will make you a better Javascript developer. It's great to read real low level code for real projects. But as a learning exercise, it will be painful and steep. C++ is a bad language, like Javascript. It is bad for different reasons. Javascript is lax, has some poorly thought out features and just makes it hard to build huge apps because of that. C++ has a lot of well thought out features and is very powerful, but it has so much inside the languages that it makes it almost impossible to learn. If you're going to write a C++ program, you must choose a small subset of the features and have discipline to not use something clever. It is a language of other languages. It has every language feature in it, plus the kitchen sink. It has so much legacy. [It's amusing to read Linus' rant against C++](https://lwn.net/Articles/249460/) I've been thinking. Javascript is bad, but enjoyable to work with. C++ is bad, but very painful to work with. That is one of the reasons Javascript is winning at the moment.
My way of doing open source is using an open source library, finding either a bug or a missing feature, then fixing it. Keep in mind adding a feature might be considered as out of scope, but finding and fixing bugs is always welcome. Plus it forces you to actually follow some kind of style guide and correctly use git/GitHub. I learned a lot from my first PR lol
What app is that in the screenshot?
Good read! But I mostly came to say that your vscode theme is amazing.
It's Things. 
If this got you excited, check out http://openframeworks.cc/ It's like processing for C++
Oh. I misunderstood. Never heard of date-fns. I thought you meant vanilla js date functions.
Out of interest, what makes you think js is ‘winning’? They’re two completely different languages used for two completely different things.
In your city job listings, look at the number of C++ jobs versus Javascript jobs.
I'm a JS developer that feels somewhat overwhelmed lately as to what to learn next. I'm currently making a living using React Native, so I was thinking about just trying to go for Swift. Do you think swift would also help me become better at JS? 
Should start w/ Rust and then learn C++. You'll end up having formed better habits and thought-processes, imo.
I agree with pretty much everything you said here. That said, I do feel there are too many JS devs that only know JS. I like writing JS but it's so flexible that it lets you do *anything* - a lot of which maybe you shouldn't do.
&gt; Likewise, in a field where young straight white dudes take an overwhelming majority of the jobs (including most of the management jobs) it’s perhaps to be expected that web making has lately become something of a dick measuring competition. How is this anything other than casual bigotry? I get, and even agree with the rest of your message, but this seems like a very abrasive way to start off.
Swift, JS, and RN programmer here. Learn Swift, then apply Swift techniques to TypeScript that transpile to JS. Swift is all about compile-time safety, and JS can only really offer that via a typed abstraction like TypeScript.
That is the crux of the matter. Anything that is low level. Anything that is precise. Anything that is pedantic. Anything that is about removing all assumption, is formal, is going to be complex, and is dull as some might say. Complex mathematics is quite dull. But that is where the point is. And that is also why I say that the problem around javascript is its easy entry point. Remember, doing something right, takes hard work, otherwise, why else does the world turn from order to chaos. Not many would want to take the route of complex mathematics to solve a problem. And so it is certainly, not a matter of numbers, a matter of how many people use a particular language. Learn C++, C and very basic assembly if you want to actually learn to program. And also note that there was a time when developers were producers, but now they have become consumers themselves. Reflect on that.
No? JavaScript goes everywhere.
I was really lucky my 2 year course taught us basic JS, React JS, Java, Swift4, C\+\+, PHP and C#. We spent a bit of time on each but I feel it was enough that I have a basic toolbox for whatever my job throws at me now. I got hired to write apps in Swift4 \(the language I spent the most time on beside JS\) but as soon as I showed up on my first day I got told "nah you'll be working on this react.js project we've been planning" ... You can't get by knowing 1 language/framework anymore, too much technology and too many advances in current technology to stagnate
I mean this doesn't really answer the point I made about them being used for different things. People are hardly coding games or operating systems or things like facebook in javascript. Neither one can 'win' because they aren't in the same race. Obviously people use higher level languages when they can and more to-the-wire languages when they need do, that's how it's always been. If you could write your OS in python or ruby it'd be amazing but there's always going to be a disconnect between super low-level, lowkey-electrical-engineering and pretty website languages.
I mean OS's aren't written in js. The latest games aren't written in js. Performant things aren't written in js. You've got electron apps and all this cool 'wow now we can write desktop apps in web languages!' but they're horribly horribly bad for eating up processing power
Try running JS on an 8051 micro-controller. If there's a language that *goes everywhere*, it's `C`.
One of the first languages I learned how to code in, after PHP and JavaScript, was C++. That was over 10 years ago, and so it is not up to the current standards. It would be great if I could get back with enough patience to catch up to the latest iteration of the C++ and build something worthwhile with it.
Is moving to Birmingham one of you goals? Are you working for Shipt?
If you will have a reason to learn C\+\+ then.
You may not. I suppose learn-as-needed at that point. But a lot of jobs still call for C++ familiarity.
this should help, https://stackoverflow.com/questions/5898656/test-if-an-element-contains-a-class?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa
I learned a smattering of C\+\+ a few years ago for a project involving Qt. I want to update my project to use some new non\-backward compatible libraries so am going to have to re\-learn that smattering all over again
``` if (document.querySelector(".view-school")) { document.querySelector(".body").style.backgroundColor = "#111"; } ```
&gt;I mean OS's aren't written in js. Just look at this abomination: http://node-os.com/
Why even bother with writing terminal emulator with electron? 200MB memory footprint? Huge latency? Crippled performance? Just let it die.
As someone who is thinking more and more about Qt (and GTK) for desktop apps lately, I'd love to read your experience writing code on it.
Try running C in a web browser.
If we'll talk about libraries and frameworks in general, I agree, some promote best practices, useful patterns and so on. But Bootstrap is none of that. It uses classes for visual information rather than semantic information, it's highly restrictive in terms of supported layouts, takes over basic class names that surely would class with other existing CSS code, no prefix or anything, and overrides defaults like the box model, that once again messes up other existing CSS code. Bootstrap is certainly useful. Certainly makes basic things fast, quickly and makes them look neat. But when you have to maintain Bootstrap in the long term, it's like having to live with a chronic disease. It's always there putting obstacles between you and your goals, it's hard to get rid of, and you wish you never ever had any contact with it in the first place.
Thanks.
I detest identity politics, it helps no one and only further divides people.
Well put. Agree that frameworks like bootstrap are restrictive in those situations. Counterpoint from me would be that people get in those situations (maintainability issues) by not following the patterns of their chosen framework. I think if you go all in on a framework because you did the necessary research you can be much more productive in the short and long term. It’s when you start fighting it that things get hairy real fast. Good discussion. 
I agree it's best to leave such topics out of a technical article. Just a small remark - bigot means someone who is intolerant of other people's opinions. It doesn't mean someone who's prejudiced, or discriminates etc. This poor word's meaning has been butchered so much, it's unrecognizable.
Same. I've had a year of C++ and now learning JS. The differences are interesting, but C++ definitely taught me a lot.
Google Chrome and Chromium have had the ability to run both native `C` and `C++` code for more than five years using the Pepper API, and with the continually expanding popularity of [WASM](https://webassembly.org), I don't see this capability going away anytime soon.
Odd. I have never heard it used that way. I would have thought that definition matches with zealot better. It does look like you're right (that usage is apparently 16th century), but that modern usage has shifted over time to map that meaning on to zealot instead. It also appears that there's a difference between [American and British](https://www.collinsdictionary.com/us/dictionary/english/bigot) usage, such that the British version is a more broad definition. Perhaps this is a Britishism that's spreading across the English world? [The American Heritage Dictionary](https://www.ahdictionary.com/word/search.html?q=bigot) also notes that the definition has been expanding to include any/all differences. But mostly, I'm just going to point out that languages do in fact evolve. And unlike the woeful case of "literally", there are several words which accurately map to the old definition. For instance, "zealot", "fanatic", "ideologue", "hard-liner", etc.
Languages do evolve yes. But the case of the evolution of "bigot" is just as bad, if not even worse than "literally". Initial meaning: &gt; A person who is intolerant of other people's opinions. Current meaning, in practice: &gt; A person whose opinion I'm intolerant of. It's a reversal, like "literally". But it says a lot of sad things about our society.
Love It!
Could not have been said better.
No, that's not what the modern definition is. The modern definition merely adds "or traits" to the end. A working definition would be "a person who is intolerant of other people's religion, opinions, or traits". For instance, take Merrium-Webster's definition: bigot : a person who is obstinately or intolerantly devoted to his or her own opinions and prejudices; especially : one who regards or treats the members of a group (such as a racial or ethnic group) with hatred and intolerance And while, technically, one who is intolerant of a bigot is also a bigot, the implication is that a bigot holds *unjustified* intolerance.
Hence why I said "in practice". The dictionary meaning is the theory. For example, if I said "it's unreasonable to expect men and women to be equal proportion, with equal pay in every job under the sun" this is actually backed up by plenty of studied and science about the differences of genders. But if we were in a sub where such topics are discussed, I'd be called a bigot as there's zero tolerance towards fact-based discussion of these topics like adults. "Bigot" these days is not used as an invitation to discuss our opinions and align on topics we differ, it's used as a way to shut down discussions and label undesirable opinions. Anyway, I think we're getting off topic a bit. It's /r/javascript :D
Why is Chrome the only browser that can run a web app in a plain window without an address bar?
Ugh, after using apollo (and a graphql stack in general) Redux and all of the supporting tech and boilerplate it needs to work seems like self-flagellation 
The [Pepper API](https://developer.chrome.com/native-client/pepper_stable) is deprecated on all platforms other than Chrome OS. You may be able to still use it, and Chrome itself still uses it for its PepperFlash plugin, but the day may come soon when PepperFlash is among the only whitelisted Pepper API plugins.
Uh, C++ is low level? 
You'll probably fit in much better over at 4chan.
Pedantically, no. Colloquially, yes. Unless you use assembly on the regular it’s lower-level than what most use. 
Oh, emscripten? 
Fair enough. Just realized I was in a /r/javascript and not /r/programming \- probably explains the downvotes.
That sounds like an awesome curriculum!
How does Java compare to C++? I dabbled in Java development here and there but it feels so tedious working with arrays and objects compared to Javascript. I'm sure C++ is similar. I know this is probably better for less error/bug prone code, just curious I guess to what language you like the most and why? 
Uhh.... why?
i would've downvoted your fake confusion there as well
Yeah. I could maybe see being male as a feature that might make someone more likely to engage in "dick measuring" but the other 2 are just pure social justice brownie points for Zeldman.
This seems really cool. I had no idea you could run a local web server on iOS. A few questions: Can you give me a practical example of how you would use this? What was your inspiration? Open source?
Saying one language is "winning" over the other is like saying your hammer is "winning" over your screwdriver. If all you have is nails, sure.
Vanilla Java saves you from a lot of Vanilla C++ boilerplate (C++ doesnt have native garbage collection and requires header files), and Java hides pointers/direct memory access from you, but theyre both pretty annoying when it comes to complex collections. 
Why are you and the author referring to C++ as low level...? 
C\+\+ is a swamp of complexity, I doubt you have what it takes to handle a real C\+\+ job if you learn 6 language beside it in *2 years.*
Oh please. Sure, you can do low level things \(struct padding/alignment, pointers, manual memory mangement\), but there are plenty of C\+\+ features that aren't low level per se. What about virtual function tables, references, smart pointers/RAII, templates, exceptions and the STL? There's still fair degree of abstraction between the generated machine code and the stuff you write. You don't *have* to think about CPU word sizes and memory endianness when writing C\+\+. Many computer engineers would not consider C\+\+ low level. But I admit that in the context of this sub, C\+\+ would be considered low level.
Thanks that's interesting. I'm getting back into webdev after about 10 years and it's *so* different. 
I mentioned that earlier and received a torrent of downvotes
Yeah... but C++ isn't a low level language... just because it's lower than other languages... 
For people unaware what a [low level language](https://en.wikipedia.org/wiki/Low-level_programming_language) is
So, its like bluebird/q... Please just stick to standard promises. They're not perfect, but they're finally standardized and widely supported, so everything will interop and anyone new to your code will know what to expect. If you write your code relying on promises to have these properties, then whenever you interop with promises from other libraries you have to end up wrapping them anyways just so that you can be sure its safe to use all these helper functions you want. For that reason, its better to just implement these helpers as plain functions (which most of them trivially are), or in the case of the un{then,catch,finally} methods, just not all (you're really not using promises as control flow if you want to do that).
Ha ha ha. Good spot. Yes, I am moving to Birmingham because thats the place where my girlfriends Uni is. No I don't work for Shipt. I am starting a new job in a week time — I am going to work for Mindera from Porto / Leicester. Thanks for reading.
Thank you a lot. I will update it very soon and introduce a light variation — equally contrasty and beautiful. Thanks for reading and using my open source stuff.
Because it is much closer to binary code than other languages that I have experience with. Author of a book referred in my article calls C\+\+ a low\-level language multiple times \(he is a creator of C\+\+\). Thanks for reading and have a good day.
Thanks you for reading. Have a good day :-)
I confirm what knubie just said. It is a Things by Culture Code. Fantastic productivity tool and I use it on mac OS and iOS. Love it! [https://culturedcode.com/things/](https://culturedcode.com/things/) Thanks for reading / looking at the pictures :\)
It is looking super interesting. I will bookmark it and definitely dig into it. Thanks for reading and have a nice day.
I disagree that it necessarily has to be complex. Look at the linux kernel, written in C. Is that not complex? Yet C is a very simple and understandable language.
One of the core premises of my diet is to eat salty things. My girlfriend must avoid salt by all means. Who is right? Which diet is better? You will always find pros / cons of XYZ tool. My perspective is not that serious as yours is and definitely not market \(number of open job roles\) driven. I do it because it is fun and let me keep it this way and pay my bills via JavaScript and enjoy myself using C\+\+. Thanks for reading and have a great day :\)
Because I enjoy it — is it a valid reason? Thanks for participating and have a nice day :\)
&gt;Thanks for reading and have a good day. Lol what a passive aggressive douche 
People write OS cores and drivers in C. As for the stuff on top of it, Microsoft is switching to Javascript (no joke). This is exactly my point.
Yeah, pretty much I am.
What makes me really is excited is better native integration for progressive web apps on desktop. Currently, behind a chrome flag, there is support for A2HS for desktop. So instead of companies packaging their own version of electron, a user can have the PWA experience (which, in my opinion, is much better than the native app experience)
Yes they are, but cross compatibility is worth it. I remember game communicator wars, where ventrilo users screamed how much less ram their program of choice is using compared to teamspeak, a stunning 20mb difference! Soon those woes like (400mb to open a single txt file in vscode!!) will be looked upon the same, because most people will have more ram. Intel even got their optane memory on ddr4 stick, so 512 GB of ram in single stick is reality now.
I get what you're saying [but this is a good point too](https://twitter.com/markdalgleish/status/1002707098889621504).
That's true. That's why your fridge, microwave, vacuum cleaner will come (and some already do) with like 8 core processors. Fridges have web browsers today. Nobody will use for their internet of things product a chip like 8051.
Web-dev 10 years ago and earlier was painfully hard. I mean, we had to do all these things essentially *by hand*. No transpiler to abstract the dom, so we created deeply nested div-soups that couldn't be re-used. No bundler and npm, we would go hunt instead for code snippets and libraries to include them manually with their full size. We wrote state into globals, events and the dom in the form of classes, leading to abstruse spaghetti code. The internet was complete shit back then because of it, meanwhile on native you already had mvc, templates, components. The other two (directives, di) only exist in older frameworks like knockout, angular and so on.
I also have 15 years of experience in java and C and 2 other degrees in software development. I went back for web and mobile.... maybe don't go making assumptions
It was a brand new program at my college tailored for Mobile development, I learned a LOT and it was all by accident because Web Dev was full when I applied. I got real lucky, best thing that's ever happened to me
I honestly suggest \(if you have the time or patience\) to look into Kotlin ... it's a new language that uses Java as a base and expands on it. It's a sort of evolution/replacement and a lot of development is moving towards that now \(at least in mobile, native android applications are generally coded in Java but Kotlin support is growing\)
&gt; "fixing" awkward/bad parts That, on paper, sounds nice. But then again, `unthen`, "after the promise has already been synchronously resolved [...causes the promise to be rejected with that exception."
Fine, but why are we giving code examples with both `var` and `async/await` right next to each other?
&gt; "fixing" awkward/bad parts That, on paper, sounds nice. But then again, `unthen`, "after the promise has already been synchronously resolved [...] causes the promise to be rejected", `deferred`... Maybe it's just me, but this seems to _add its own awkward parts. I mean, I would tend to think that "fixing awkward parts" should generally result in evidently _simpler constructs_, not in other, more, -arguably equally awkward- constructs.
The question is asked in the comments and he answered: https://gist.github.com/getify/1173cac45d15fc4ff0a880f32fd598ab#gistcomment-2601221
Kyle answered this in the comments: “I use var for variable declarations at the top level of a function, and let for variable declarations inside of blocks. IMO, var signals "will be used across the whole function" while let signals "will be used only in this limited scope of this block". Both signals are important, but using let for both degrades that signal difference.”
kinda noticed date-fns utc function is buggy. should probably open an issue on GitHub but I forgot 
Okay?
I have to implement this in my proxy and i don't know well programming. So can this be done and how ?
So is it closed-source? Can it use/install node_modules easily? Does it have all the features of node (e.g. path, fs, os, etc.)?
No. Anti-virus can't be detected at all, and adblocker detection is very, very hard and is never reliable. You should find something else to write your project on.
In my opinion, you can write slow JavaScript and or fast JavaScript, having a very good understanding of C\+\+ will help you write fast JavaScript without extra effort and help you understand why certain approaches are fast and other approaches are slow. Key points are containers \(aka. how data is stored and accessed\) and garbage collection.
I mean the title says “ A strawman experiment”. My guess is that he fully agrees and maybe that was even the point?
I mean the title says &gt; A strawman experiment My guess is that he fully agrees and maybe that was even the point?
It _could_ be. I thought about that. But then, there is _very little_ to judge whether the actual intention goes one way or the other.
Yes, I think people would be interested in what you learn from this. There's a lot of documentation on it out there, but finding people who have done it and documented it thoroughly is tough.
[YoYo](https://github.com/metrue/YoYo) is a blog comment hosting service I am building, it's being built on top of AWS lambda, no server required. it's obviously on a very early stage currently, but it's being used in my [blog](https://minghe.me/2018-05-31-Testing-in-Golang.html) and several websites out there. You can try it by adding the following piece of codes into your page. ``` &lt;div id="YoYo"&gt;&lt;/div&gt; &lt;script src="https://yoyo-client-production.s3.amazonaws.com/dist/index.js"&gt;&lt;/script&gt; ```
[YoYo](https://github.com/metrue/YoYo) is a real-time messaging chat, it's just a blog comment hosting service built on top of AWS lambda.
Please don’t put shame on people for having to use a tool to get their job done. No matter if you prefer VS Code or JetBrains IDE’s both are great.
They’re often just bad apps too. With the single exception of where an application on a platform simply wouldn’t exist without it, write-once-run-anywhere has only ever benefited developers. The product suffers and with it the user experience. 
You could try the Attribute Equals Selector as described here: [https://stackoverflow.com/a/17314161](https://stackoverflow.com/a/17314161)
const elms = document.querySelectorAll('.foo:not(.bar)') [].forEach(elms, elm =&gt; record.push(elmel.textContent))
I’d be interested in following this 
thanks
Should it be typescript?
A little over a week ago I announced my attempt at a full port of React Native to the web: [React Native DOM](https://github.com/vincentriemer/react-native-dom). It shares the same multithreaded architecture, layout engine (Yoga compiled to WebAssembly), and DX (projects are built using the metro bundler). Still very experimental but [early results are very promising](https://rndom-movie-demo.now.sh).
I'm definitely interested in this. Maybe a blog would work good for this &amp; we could follow your blog.
The Chrome dev team is leading the charge in the standards bodies and implementation for Service Worker, App Manifest, and the rest of the PWA (which their devrel team named). When you're the one proposing features, you get the features first. The general ideas have been kicking around for 20 years. Mozilla 1.0 is an XML/javascript application rendered using gecko and laid out using a precursor to flexbox. There have been a number of standalone web app runtimes you could use to turn web pages into apps (e.g. Fluid for Mac) and this chain culminated in Electron. Apple came up with the app manifest idea/set of elements in the header as a workaround to not having a native SDK for the first year of the iPhone's existence.
Wut is reacte
I'm concerned about what you're hoping to do with this proxy if this is part if your expectations for it.
Sorry, forgot to reply to this! Data on the client is often stale/incomplete and you never want to give a user stale/incomplete records
It doesn't look like real real-time. setTimeout is not cool :) https://github.com/metrue/YoYo/blob/fc77179bd65f15563163ec9219a438422ba4f4b6/client/src/index.jsx#L80-L82
What do you mean by page? Do you mean the body element, html element, or what? If it's one of those, then you can use CSS only. eg. .view-school .body { background-color: #111; } Or, if `.page` will be on the body element ... .view-school.body { background-color: #111; } 
 records = records.concat(document.querySelectorAll('.foo:not(.bar)').map(element =&gt; element.textContent)) a less readable, less good, more compact version
That's your fault on thinking everyone is aware of your history and writing sentences that can mislead.
I like the blog idea. It’s good to keep your findings publicly available for others to access in the future. Plus it’s great for a resume!
I guess it depends on your situation. If the data you’re looking at are snapshots or history like order date or payment data or invoices or anything that isn’t as of right now then the data can’t be stale. I guess I mostly deal with data that’s based on time which is always already happened. 
What I originally wanted to say is &lt;strong&gt; 'YoYo is not a real-time messaging chat'. Sorry for the mistyping, just updated my comment already, hope it's not misled others.
A single invoice might not be stale but your list of invoices might very well be. You assume users are always going to use your app in the perfect flow you have in your mind's eye. I'm looking at the reality where someone will have your app open in a tab for five days, come back and download a CSV from it, and then call you up screaming because the orders they made yesterday aren't in it and that screwed up something or other when they used the CSV.
That’s very true. I also have customers mad because the report they are looking at is what they expected the CSV to be and instead has all the extra “recent” data in it. Can’t win sometimes. 
I like some of the features of Kotlin (and I've had to use Groovy, the spiritual predecessor, at work before), but I'm just not a huge fan of the JVM. I feel like Node.js offers more powerful abstractions while at the same time being closer to the metal (since you can drop down to C++ if you need to), and aside from Android, I don't see the JVM going away anytime soon. 
&gt;But a lot of jobs still call for C\+\+ familiarity. This. I would learn Rust, but the overwhelming majority of job listings I'm interested in asks for C\+\+ and C. C\+\+ also has a huge amount of legacy. On my Linux system alone, most programs are written in C. Second place is C\+\+, Python and other languages are far behind that.
No but the angular team is currently developing [elements](https://angular.io/guide/elements) with the goal of making platform agnostic angular components. Elements is still brand new so I don't think it's ready for prime time yet but I haven't done anything with them yet either.
AFAIK elements are web components wrapped with Angular. I wanted to create npm module that would be platform agnostic, so i wondered can I use this Angular cli option to do that. 
I'm interested. Just 2 months ago I learnt react and redux. Now I'm learning react native. 
What I don't understand is why both Firefox and Edge previously allowed this (via some kiosk mode flags) and no longer do. IMO having a plain window and a task bar/dock icon is more important for making a web app usable as a desktop app than any of the service worker stuff.
It might be a while, I've got a lot of other stuff on my plate. I'll save your comment though so I can come back to it.
My team at work has actually just started migrating our mobile app from AngularJS to React Native, and my first task was to implement unit testing with Jest and Enzyme. So yeah, I’d be very interested in seeing another person’s approach to React Native testing!
Thanks for the article and linked video. Also, you have reminded me to take a look into V8's source code. My dev experience is opposite to yours. Initially, I was hired to do backend work for a web app in cpp. Over time, I have been writing JS for front end as well. I learned JS on the job. I have been enjoying it so far.
Most low-low level projects are written in a combination of assembly and C, it's not likely they'll be moving to slower languages because that's the whole point of writing something low level. In what regard, exactly, are microsoft switching to javascript? Is the office suite going to be writtin in js? Is VS? Or is it just VS Code?
Yeah we should just give up trying to make good or efficient programs because computers will catch up. Who needs algorithms or clever data management right? I feel like this is the big gripe people have with JS developers who think they don't need a language that's strongly typed and rigorous because they don't want to learn one and then try justify that it's pointless to know any better.
I work with android which is why I bring it up. It's a really nice language but you're right that it's not really necessary especially with the huge push on cross platform lately. Things like Cordova, React Native and Xamarin are getting really great support
People in this thread seem to be confusing C and C++. I consider C a language that isn’t too bad, if a bit sparse. https://docs.microsoft.com/en-us/windows/uwp/get-started/universal-application-platform-guide
Interested!
I think it's on the order of five free articles a month, and you don't know if what you're reading is one until it's already been subtracted from your free quota. Would be slightly less obnoxious if it asked you whether you wanted to redeem one of your free quota articles first. 
I'm interested
updated, receive message and return context [https://jsbin.com/tiviwic/edit?js,console](https://jsbin.com/tiviwic/edit?js,console)
I'm interested in following this. 
The cli generates angular libraries. I'm not sure if you're asking a different question here or what.
Possibly in a polyfilled world. I know older browsers have some weird hacks to get promises to be invoked in the right microtask. You shouldn’t see much of a difference between Node and Chrome, unless there is an optimization that hasn’t been pulled into Node yet. But between Node and Safari, I wouldn’t be surprised if the timings were off.
React, in my opinion.
And why is that?
I'd be interested. So far I haven't found proper material on the topic 
You probably want to check my (old) blog post https://blog.valuemotive.com/unit-testing-react-native-components-with-mocha-and-enzyme-1d8a669ece29 about unit testing react-native and related repo https://github.com/varmais/react-native-unit-tests – it's two years old post where I share my journey into unit testing RN applications and example application where I've tried to keep RN updated and added Jest tests as well when they came relevant option for mocha&amp;co.
I've studied both Angular and React and found React lightweight to use, thus leading to a more enjoyable learning experience. From there, I built all my projects in React, including a mobile app with React Native. I now work with Vue, which shares a lot of similarities to React and means I can be fluent in both without feeling out of practice.
Learn how to do it without a framework first so you can appreciate the features enough to make the decision yourself
The hard questions were easier for me than the easy ones...
You really should have a go at both, and see which you prefer. Jobwise, React is pretty hot right now. Dunno if that'll still be the case by the time you're job hunting.
There is no good answer to this question. Both of them provide the same kind of features, and many long arguments can be had about the benefits and downsides of each. Just focus on understanding the problem they solve, and how they do it. Then you can switch between frameworks pretty easily.
The core functionality of React is incredibly simple to understand and use. I would start there. Also, I think it will be a more valuable skillset than Angular.
I just want to add that while it's possible to find differences, that would be considered a bug in the transpiler. I doubt there are any known bugs for the most recent Babel polyfill and transpilation process.
Yeesh, keep it to yourself...kidding! Please share it, sounds like you have a vision and it would be helpful many including me.
&gt; is it better What does _"better"_ mean to you?
Stats paint a pretty clear picture on that: http://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core As for learning curve, it can't get simpler than React. I think i needed an hour to learn it, took [a course on egghead](https://egghead.io/courses/start-learning-react). The rest is debatable, depending on what you're comfortable with. React isn't like the previous generation of frameworks that had templates and lots of features baked in. It's a tiny view layer basically.
I work as c# dev. Its not about attitude. I have no feelings toward any language. But I accept that JS is the only thing for web. And that's the reason why it will be always the most popular ever. I tried webassembly. Its a joke.
what problem are you solving by going with react or angular? usually when questions are phrased this way, the problem is "i'm not doing it how you're 'supposed' to." if you can't answer that question don't use either. use the native dom manipulation api until you run into problems that react or angular solve for you, then pick which one hits the problem you're running into.
Yes please share. Would love to read your summarizations!
Prior to it, learn js
Depends on your local job market. Are there lots of jobs? If so, keep going at it. I was a complete career changer and got a customer tech support role in just a bit over 2 months.
I am in bay area. There are definitely lot of jobs. I think the concern recruiters have is with me having so much experience on the testing side.
Check out!!!!!!!!
Cool thanks! Will do! 
It's so difficult to distill down a career into a 1-page resume -- I recommend focusing and highlighting your projects and coding skillsets. Focus less on the manual testing, and highlight the automated testing tools you've built, then highlight the projects you've built over the last couple of years. Also, going through a recruitment agency will be difficult if you have no production experience -- go direct.
React. I went from knowing not a single line of javascript to my first full react app in only about a month
yes sir. I have been going through personal referrals. Would you suggest me to remove my current positions completely? I also built a portfolio site [mmenghnani.github.io](https://mmenghnani.github.io) I haven't really done much automation. So, did not want to mention that.
It’s pretty much lo dash for dates. You may like it!
Angular is very complicated with hight learning curve and all this complication is unnecessary. React is very simple and efficient in that regard.
I'm gonna give you some advice that I wish someone gave me years ago. TDD is largely misunderstood technique. It's not about writing tests or writing tests first (you write your tests first in BDD too). Actually you don't have to write tests first to do TDD - I often find myself to write some of the code first. TDD is a practice that is easy to understand but requires time to master. It's basis is short feedback cycle. Basically the best setup for TDD is where you have one column for tests, one for code and one where you have terminal running your tests on file change (just like Jest does). Now with this setup you write a little bit of test (not the whole test), see it fail, write a little bit of code, see it pass. Repeat. TDD is about this short feedback cycle and incremental progress. It's fine if you sometimes write a little bit of code first. The moment when you do this and realize that you know what you wrote works and you have confidence in it without going through UI to see if you're right is magic. This magic breaks down when you try to apply it to a larger system - it's not easy to do that. **It's because TDD doesn't work in vacuum.** It needs to be supported by other practices, patterns and architecture. So, if you find TDD hard or if you find it constantly slowing you down (it will at the beginning due to learning curve) there is something wrong. Usually architecture or you are trying to apply TDD when it just can't perform. 1) Architecture is very important for TDD. If you construct your system from modules which can be tested in separation then TDD will be easy to do. It's also good architecture. See SOLID, especially SRP and DIP. See Dependency Rule. See hexagonal architecture, Entity-Control-Boundary and Clean Architecture. 2) Fiddling - it's just that not everything makes sense for TDD. UI, external I/O is hard to test. React components are no different. Even though they are JS I find them to be as testable as templates. A good idea is to move logic somewhere else and test it (see viewmodel and humble object pattern) and just test your UI with your eyes (or use something different than TDD like snapshots). TDD is not always applicable. 3) Don't treat your tests like "hacks". Tests are part of your software just like production code is. If you follow this rule, design your tests as a part of the system (this means planning dependencies and responsibilities of modules) then you will not run into something called "fragile tests problem" (when single change breaks 100s of tests) which can easily discourage you from writing tests. And for the love of god - do not ever use mocks. It will put you in a different mindset and is number one cause of fragile tests. Write your own test doubles that respect proper system design. 4) TDD is just one part of the testing pyramid. It's not supposed to test connections between modules/components, nor it is supposed to test if the system works as a whole. You don't need to test for that when doing TDD. Now - that's a lot to take in. But the benefits are huge. You will refactor with courage, you will have confidence in your code and TDD won't slow you down - you will finish your tasks faster. It will also make your tests more maintainable but this has nothing to do with TDD but rather proper software design and architecture.
Uncle Bob does this for years, he documented the hell out of it and people call him an extremist for saying that you should have 100% coverage. TDD needs other practices and good architecture to work. Read Clean Coder, Clean Architecture and his blog at https://blog.cleancoder.com/. When you connect all the dots in your head and understand how to make TDD work then it will be easy to find more info on the web.
Generally when I transitioned my career (from a Designer-Programmer role to a [whats now called] Full Stack) I was able to pick up a few contracts that had some overlap. I would first ask your current employer if you could take on some small tasks on a project. If that doesn't work out I would start looking into setting up some automated test scripts. There are some end-to-end testing frameworks written in javascript. Generally I was successful in transitioning to Fullstack because I was able to overlap my skills into other projects. I had started out building a form... then simple CMS that used a database. Then eventually eCommerce that sold one product. From there it went on and on until eventually I started having to configure servers. From there I started having to pick up some devops stuff. 
My biggest issue with promises is `Promise.all([a, b, c])` if `a` fails, I still want `b` and `c` but it is all or nothing, looks like this is not addressed in the link.
I’d definitely be interested, I’m still a beginner when it comes to react native but testing is important. Maybe we could have a slack group or something 
If I was to start learning a JS framework right now it would definitely be React. The main reason for that is that it's the framework which is closest to the language itself. By improving your skills in React you will improve your JavaScript knowledge as a side-effect and I believe that the concepts you learn will help you make easier transitions to other frameworks if you have to. Also, the React knowledge you have can also be applied in React Native to build mobile apps or in React VR (haven't used it don't know how good it is). Lastly, the concepts of React together with Redux are a good introduction to functional programming. In the end of the day, every library has it's learning curve. Yes, you may start to write React apps faster than you would do with Angular but in order to build something meaningful you will have to sink some time. Place your bet on the technology that would expand your skillset the most. 
It could also be that the job market there is really competitive, ie. experienced developers are heading there for good jobs, so the standards are super high. 
&gt; date-fns Cool.
&gt; Moving within my current company is not an option because they are only looking for senior Is this your assumption or you've asked? Your manager should be aware of the fact that the cost of new recruitment and getting up to speed within an organization is huge. You should let them know that they can gain dedicated frontend developer, already familiar with the company culture and inner-workings or just lose a good QA which isn't happy with what he's doing. You can also play the card of someone who wants to learn more about automated testing and working as frontend developer would help you to understand what you test better and will make you a better QA Engineer. If you show your value, your new team won't let you go and you probably won't go back to QA. Good luck!
I took a look, and your portfolio looks like little mini-projects people usually ask engineers to code in lieu of technical questions part of the interview. Maybe try for something more complicated / realistic? If you out of ideas what to code to impress potential employers, maybe you can find some open source projects to contribute to? Or volunteer to make some web application for free for a non-profit, etc. I hope this doesn't come across as criticizing your work or being condescending - it's not my intent at all. 
I think they are security matters. Hard disk access is a risk to the user
It's absolutely necessary as a security measure. Do you want random porn popups to have access to your hard drive? Also, it's certainly not a language limitation. Node has built in APIs for accessing the file system.
Thanks a lot for your kind advice. I really like the idea to contribute to some open source projects. I will look into that. I don't mind at all. I really appreciate it :)
Good idea, thanks :)
You should also consider Vuejs
Flip a coin. Seriously, there's no right or wrong answer, and whichever you try first is likely to become the most natural one for you. You could try both, but to really appreciate either you need to spend more than a few hours using them, and you need the context of being an experienced programmer to appreciate the design decisions each make. So, rather than do a straw poll of people, which will mostly just tell you which way their coin flip went, flip your own coin. (Or go with React, which is what I personally would recommend, and I'm teaching an "Introduction to Web Development, With React" course this fall. But, as you might guess, I tried React first, and only looked at Angular later.)
We have been trying to do that since last 2 months. We are using jest with appium. Definitely We would like to know more from you.
Consider using the [event delegation](https://stackoverflow.com/questions/1687296/what-is-dom-event-delegation) pattern for these types of issues
The observed behavior should be the same. Under the hood though there definitely might be differences, especially if on any non v8 engines (Firefox, Edge, etc). I wouldn't worry too much about it though.
great article, definitely helped. Thanks for sharing.
For local use, look into electron. That's meant to be a local applicationa and has local filesystem access.
Just curious, have you reached out to Udacity ? I thought they had a career services group 
I will have to add my support for React as well. The one drawback I can think of over Angular is that getting a dev environment up and running can be a bit more complicated. However there are already solutions for that. Install create-react-app and start hacking away. 
**Fam**, I have recently been working on theme for a client on Shopify. I needed to implement a MailChimp subscribe form and to my dismay and utter distaste I found in order to achieve an ajax like embedded form implementation I was required by Mailchimp to include this monolithic jQuery dependant script. I was utterly horrified considering this build I am on is strictly vanilla and done in ES6. After some searching all I could find was jQuery implementations besides a vanilla implementation via CSS Tricks that was just an absolute overkill and still came in at 15kb. I searched and searched until I thought to myself, fuck it. I'll build one myself. Let me introduce you to 🍔 McSub (MailChimp Subscriptions). An ES6 module available on [NPM](https://www.npmjs.com/package/mcsub) and coming in at 1.4kb. Very simply approach taken and several callback functions for you own flavour. If you've got a static build and require a MailChimp embedded forms on your website then maybe consider McSub, it makes your life easier. Github: [panoply/mcsub](https://github.com/panoply/mcsub) NPM: [package/mcsub](https://www.npmjs.com/package/mcsub) Demo: [Codepen](https://codepen.io/panoply/pen/erqbwx) 
&gt; limiting the capabilities of the language? It's not a limitation of the language - Node.js has a **[File System API](https://nodejs.org/api/fs.html)** that can access a computer hard drive. It's an absolutely necessary security feature for browser-resident JavaScript. The popular internet would never have graduated from the early '90s if we allowed websites like www.no-virus-here-we-promise.com to exist.
Yeah, we found out in the early days that file system access could be abused.
React, easy choice. Angular is not a beginner friendly framework, and both are useful and powerful
React, easy choice. Angular is not a beginner friendly framework, and both are useful and powerful
React, easy choice. Angular is not a beginner friendly framework, and both are useful and powerful
Sure, let's give every website direct write access to your hard drive
I suppose that’s why they made NodeJS, because people fucking love lower level code right?
It really depends on your needs. There are a lot more options to consider. If you want to learn I'd first learn vanilla js and remember that react diverged from the paltform and needs to have special support for platform things like pointer events. https://custom-elements-everywhere.com consult this - if you want react like ecosystem I'd go with preact instead.
This. React will make you a better JavaScript developer, Angular will only make you a better Angular developer. 
How do I get this to work. I'm not that familiar with npm or node. But I have a simple express app and I tried npm install wired\-elements and just including in a one of my view files but I'm getting errors of it not being found. I tried it in php and same thing.
Your comment literally made the point that we shouldn't even compare how much ram programs use because bigger ram sticks are coming out. Development like that is why atom exists. It is bad. And I don't think that your belief that wasm is a joke is going to stop or even slow it down.
You should check out detox for E2E testing, it is really really awesome: https://github.com/wix/detox/ 
Tutorial Rater - An easy way to see if a tutorial is up to date. Just copy and paste the projects package.json and check the score. www.tutorialrater.com I am still working on this, but it mostly all works I do need to make a more sophisticated scoring algorithm, but thats coming. 
You realize this is the project of Brendan Eich, right? \(original creator of JavaScript\)
[create-react-app](https://github.com/facebook/create-react-app) you from most of that so you can focus on learning React. Highly recommend. So it is more complex at first. But it's way cleaner. Each tool in the stack does one thing well. And unlike five years ago, it's no longer constantly changing. React has been around for five years. So have many of the tools. Yarn improved in npm, but it takes 15m to learn if you know npm. I think right now is a sweet time to get into frontend. Things are only getting better, and slowly enough to be manageable. 
[create-react-app](https://github.com/facebook/create-react-app) shields you from most of that so you can focus on learning React. Highly recommend. So it is more complex at first. But it's way cleaner. Each tool in the stack does one thing well. And unlike five years ago, it's no longer constantly changing. React has been around for five years. So have many of the tools. Yarn improved on npm, but it takes 15m to learn if you know npm. I think right now is a sweet time to get into frontend. Things are only getting better, and slowly enough to be manageable. 
[create-react-app](https://github.com/facebook/create-react-app) shields you from most of that so you can focus on learning React. Highly recommend. So it is more complex at first. But it's way cleaner. Each tool in the stack does one thing well. And unlike five years ago, it's no longer constantly changing. React has been around for five years. So have many of the tools. Yarn improved on npm, but it takes 15m to learn if you know npm. I think right now is a sweet time to get into frontend. Things are only getting better, and slowly enough to be manageable. 
[create-react-app](https://github.com/facebook/create-react-app) shields you from most of that so you can focus on learning React. Highly recommend. So it is more complex at first. But it's way cleaner. Each tool in the stack does one thing well. And unlike five years ago, it's no longer constantly changing. React has been around for five years. So have many of the tools. Yarn improved on npm, but it takes 15m to learn if you know npm. I think right now is a sweet time to get into frontend. Things are only getting better, and slowly enough to be manageable. 
I'd like the join you in learning RN testing. I've just started a new react native product at work so this is a timely opportunity. Thanks. 
There shouldn't be such scenarios. If you find any, file a bug. Async/await is not rocket science, it's a simple transform if you have the right compiler infrastructure (as Babel, TypeScript etc. do have).
So we just started going to full C# MVC apps to .net core api’s and a React front end. Most of our testing was historically done with selenium on a selenium grid (which I hate) and we found cypress.io. I installed it and booted it up and holy shit it’s awesome. I’m still figuring out how to make it work with our existing Jest tests, but it looks very promising.
Can you not generate vanilla web components and npm module that can be imported to react and angular?
Awesome post, thanks! 
I created a react telegram group a while back but couldn't find anyone who's interested in joining it. Maybe we can just use that one. All those who want to join, dm me and I'll send you an invite. 
Make sure you know the core first. Be good with HTML, JavaScript, CSS, Http and some server side stack, PHP ASP or Node. Then maybe do a TypeScript course. Then pick a framework to learn.
Hey man, sorry for not responding earlier, have been busy. Technical: 1. True, I noticed that after rendering too :/ 2. Also true, will take that into account next time. 3. I think that it will look alot better if I just used a bigger font size. That would negate the washed out colors. 4. Yeah it is, the video was actually a bit longer but I didn't wanted to drag things forever and decided to cut a bit away from the end. The whole video was sort of a experiment so to speak. Content: 1. In this particular case yeah that's also true. But I believe that sometimes it's good to first talk about the topic before showing code, because sometimes when I watched videos about coding, things distracted me on the screen because I was already reading code unconsciously. 2. Why aren't saving time and typing less is not considered a motivation to use such method? Sure there are more reasons and better ones behind this, but I thought that saving a bit of time would be reason enough honestly. Writing down repetetive things might slow down productivity. 3. I wasn't that clear in the video but I didn't meant that you would only use 2-3 arguments all the time and the rest is just default values. There will be sure cases where you will write 5-6 arguments or 4-5. The point of the video was just to show that grouping things into an object makes calling functions (in this case with lots of arguments) a bit less of a pain. 4. That's true, but I thought that dragging the video too long would make the viewer disinterested, so I kept it a bit simpler. 5. I will note that down for further videos, you're correct in every part of this. * There are certain libraries that have this amount of arguments if you instantiate. Sure it's best practice to avoid so much arguments, but sometimes it's inevitable. Going around this is either to redesign alot of code or introduce different functions that will partially apply the arguments. That's considered a better way but it also introduces new code that adds to the complexity. Thanks again for you feedback!
Hey man, sorry for not responding earlier, have been busy. Technical: 1. True, I noticed that after rendering too :/ 2. Also true, will take that into account next time. 3. I think that it will look alot better if I just used a bigger font size. That would negate the washed out colors. 4. Yeah it is, the video was actually a bit longer but I didn't wanted to drag things forever and decided to cut a bit away from the end. The whole video was sort of a experiment so to speak. Content: 1. In this particular case yeah that's also true. But I believe that sometimes it's good to first talk about the topic before showing code, because sometimes when I watched videos about coding, things distracted me on the screen because I was already reading code unconsciously. 2. Why aren't saving time and typing less is not considered a motivation to use such method? Sure there are more reasons and better ones behind this, but I thought that saving a bit of time would be reason enough honestly. Writing down repetetive things might slow down productivity. 3. I wasn't that clear in the video but I didn't meant that you would only use 2-3 arguments all the time and the rest is just default values. There will be sure cases where you will write 5-6 arguments or 4-5. The point of the video was just to show that grouping things into an object makes calling functions (in this case with lots of arguments) a bit less of a pain. 4. That's true, but I thought that dragging the video too long would make the viewer disinterested, so I kept it a bit simpler. 5. I will note that down for further videos, you're correct in every part of this. (*) There are certain libraries that have this amount of arguments if you instantiate. Sure it's best practice to avoid so much arguments, but sometimes it's inevitable. Going around this is either to redesign alot of code or introduce different functions that will partially apply the arguments. That's considered a better way but it also introduces new code that adds to the complexity. Thanks again for you feedback!
I'd love to see this project come throught. Expecially with explanations, if appropriate, why you decided to do each task, how you went about planning and doing. What went wrong and how you addressed your issues. Hopefully, it would be supported with code snippets on git so we can reproduce your steps. As a side note, I find way too many blog posts never going deep enough with code examples so they just repeat 1:1 documentation. 
`getElementsByTagName` return an array, and arrays don't have a function called `getAttribute`. Try this: document.getElementsByTagName("form")[0].getAttribute("action") Although, be warned it will always return the first form element where there might be a variable number of form elements on the page.
It's `getElementsByTagName`, plural, and no it doesn't. Otherwise you wouldn't be able to call `getAttribute` with what it returns. A: `getElementsByTagName` returns a NodeList", which is like an array, so it doesn't have attributes. You probabl need to extract the first item, using `[0]`. And B: `getAttri ute` returns undefined/null when the attribute doesn't exist. There is no default.
There was a += difference that came up recently
Does the behavior change between native and async? 
I dabbled in it. You still have to do a lot of JavaScript interop. Its pointless. Its not what those old purists thought. And it doesnt need to slow down, it already did.
Also "variable number" might mean zero in which case you're going to get an error, but for this use case it seems probably fine. 
I'm in
Hi in, I'm dad!
Yes I would be very interested
nice
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Learning some of the background and overarching of computer science principles can be done by listening. Honestly to get good you'll need a lot of fingers on the keyboard time practicing and trying things. As for having an audio resource, I have enjoyed the .Syntax podcast for learning some of JavaScript. If you don't know any HTML or CSS, I would recommend taking at least a crash course on those as well. The base.cs podcast will give you some ideas of how computers at the basic level as well. Advanced topics of web development podcast by ETSU is another resource.
As with everything: it depends ;)
Wow this is super interesting thanks for sharing!
Anything but angular. Vanilla is better than angular. The longer you work on an angular project, the more you work around angular than on your project. I specifically tells recruiters "anything but angular."
Google uses a js interpreter for their spiders, so as long as your component output is reasonable, it should be picked up the same, though you might get more points for doing additional server side rendering of your react components for the initial page load.
Please do!
&gt; Google uses a js interpreter for their spiders, so as long as your component output is reasonable, it should be picked up the same, though you might get more points for doing additional server side rendering of your react components for the initial page load. Awesome! thanks for the tip
That’s amazing. Is this library agnostic, or are there react specific actions taken when doing this?
I second this suggestion. Vue has a much friendlier developer experience, and easiest API of the big 3 choices. React suffers from decision fatigue, with too many competing 3rd party libraries that take a lot of time to research and figure out. React is definitely still the most popular choice out there, and you can’t go wrong with any of the choices out there. I just would recommend Vue over the others as having the easiest learning curve to climb. 
I agree with the previous comment, it's not really something you'll learn by listening (probably, prove me wrong!). It's fairly straightforward, but you'll need lots of hands-on experience. One way to help learn faster is to find websites that use what you want to learn heavily and recreate them piece by piece. This way you see what the result is and learn what code does what -- and more importantly, why.
Hey, I'd like to join. Can you send me an invite? Do you need my phone number or something?
&gt; ~array~ Array-like. ;)
Frontendmasters.com - I recommend starting with React. You are just not using the new tools, but that doesn’t make you a monkey tapping on a keyboard! Good luck 
Go watch this on zipf's law. He talks about the room fulla monkeys theory and even if you feel like that, the odds ARE kinda sorta in your favor! Happy Monkey Coding Time, my dude (or dudette). https://youtu.be/fCn8zs912OE
You're not a disgrace. There's nothing wrong with using native JavaScript for simple projects. If you want to grow your projects and building something bigger I would recommend learning: Node, NPM, React, Redux, Webpack and if you dont know it already ES6\+. 
Hey there! [We actually just did an AMA](https://www.reddit.com/r/cscareerquestions/comments/8na87e/were_reddit_engineers_here_to_answer_your/) on r/cscareerquestions that includes advice about getting your first web developer job. The AMA had a focus on bootcamp grads, but your past QA experience plus your personal projects puts you in a similar position \(or, perhaps an even better position\), so I think some of the advice might be applicable!
Why not just use React.renderToString ?
thanks
Perfect, thanks :\)
&gt; mostly in manual testing Use what you've learned to write scripts to automate your tests. For example, write code to test API endpoints, then include your tests in CI/CD pipeline. It'll give you opportunity to get comfortable with code, structures, etc. and it gets your code "in production" if you will.
The answer is jQuery. 
Learning git or some other source control should be a high priority because it allows you to make changes and experiment safely. You won’t have to worry about accidentally messing up something you’ve made because you can always revert. The rest is to try new things and continue to make challenging projects. Try a few popular tools and libraries.
[Vue.js](https://vuejs.org) Angular uses TypeScript now, you are a beginner, learn JavaScript first. React is very good but uses JSX which will force you to map arrays like so: `{this.props.items.map(item =&gt; (&lt;li key={item.id}&gt;{item.text}&lt;/li&gt;))}` where VueX uses more HTML-ish v-for: `&lt;td v-for="key in columns"&gt;{{entry[key]}}&lt;/td&gt;` Also, check out state management via [VueX](https://vuex.vuejs.org), [Nuxt](https://nuxtjs.org/) and the good old [Awesome Vue](https://github.com/vuejs/awesome-vue) 
I typed up a [cute little UI ](https://fantasyui-com.github.io/synthwave/)for [Synthwave](https://github.com/fantasyui-com/synthwave) \(CSS backgrounds, Iam posting to Reddits about now\) which is my 99th repo on GitHub, yay! but the coolest thing was [cmo](https://github.com/fantasyui-com/cmo) and [csshue](https://github.com/fantasyui-com/csshue) the first creates hslstrap.css and second the wonderfully named pukestrap.min.css. I really love me.
The V8 engine used in the google bot is much older than the one on the desktop. If you're using newer features, you'll have to polyfill. I don't know exactly what set of shims you need to ship to it get it to work, I spent a couple hours trying to figure out a feature test before just dumping in a full set of es5 polyfills (to my annoyance).
[aPasswordGenerator.Website](https://www.apasswordgenerator.website)
Couple things I see right off the bat, the cyclomatic complexity of some of your code is very high, where you have nested ifs in for loops and such. You should reduce this by refactoring complex branching logic into separate chunks (into a function call or something similar). Also it seems like you could simplify the code in `select` by using `querySelectorAll` for all cases, rather than parsing the string for ids or class names.
Are we the same person? I'd recommend you do a few of your own projects. I've been working intently on a project that I thought would be fairly easy. It's forcing me to try functions I've never used and also how to architect my app. I've refactored a couple times and it's helping me learn a ton.
Looks like it's [Chrome 41](https://www.elephate.com/blog/chrome-41-key-to-website-rendering/)
I started testing in backend even though I was mostly a JavaScript developer at the time. Then I started doing JavaScript testing and to be honest, it's the absolute worst. Mocking data and mocking the dom is a pin in the ass and we doing that all of our developers were spending more time on tests than the actual development code. So now we only test what we deem important, or what will be used by our "clients". It just isn't worth it. Whereas end to end and unit testing in backend is not only much easier, but also much more needed. Tread lightly. 
I use Sublime all the time at work. It’s a fine tool, and in JS you can generally just use whichever editor is your favourite. If you want to feel fancy, use ESLint. With a preset like AirBnB’s, it’ll call you out on all your minor mistakes. I’ve learnt a lot from just reading recommendations in linter rule descriptions. Also, dive into Babel, Webpack, and React. They’re fun 😉
Yeah. Toggle the env preset enabled: https://babeljs.io/repl/#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;code_lz=DYUwLgBAHhC8EAYDcAoFBDAzgTwHYGMIAzAVwLAEsB7XCMETMACgEoIBvFCaCAannQB3dBUgAmVN3SgATsygtUAXzT1GrVDH4QAjEiA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=true&amp;fileSize=false&amp;lineWrap=true&amp;presets=es2015%2Cenv&amp;prettier=true&amp;targets=&amp;version=6.26.0&amp;envVersion=1.6.2
Git is a lifesaver and you should use it ASAP. Commit all the time. Revert commits. Etc. Also, good for working on a team if you’re into that. I love me some git blame 
Well as long as someone on twitter doesn't know... must be true.
Everything you say is true but I'd recommend OP to start by learning the ropes with Vue instead of React. Far easier learning curve, amazing docs and ecosystem and a good gateway for React (if he ever wants to leave Vue, that is).
I’m really confused with where your going with this. You seem to be setting up REST endpoints along with GraphQL while saying that GraphQL is a replacement for REST. Your two articles feel like random words thrown together with no coherent direction. If you want to teach someone how to use GraphQL why are you teaching them REST and showing them swagger?
So they should write his own browser rendering JavaScript library first?
Might as well jump in, React by itself is super simple too. For beginners, I feel like the only advantage of vue is that you don’t need extra tooling off the bat. Create-react-app pretty much evens that out for you. 
I held out on Sublime for a long time. Hell, I'm even the first result if you Google "Sublime JavaScript".... but VSCode is just better and it's hardly a painful transition.
Hey Sublime Text is awesome (i just switch to vscode though), nothing wrong with your current setup for small to medium apps, but you should checkout a library like react or vue for bigger projects, they help. [Create React App](https://github.com/facebook/create-react-app/) is officially supported by Facebook, it configures babel, webapack and such for you. [vue CLI](https://www.npmjs.com/package/vue-cli) is like CRA for vue, also officially supposed by vue. I would start with react, because i like react :P and i don’t know vue, other that that git is something most developers use today, but most of us only know like 4 commands, and you can use nice UIs like [Git Tower](https://www.git-tower.com/) or [Git Kraken](https://www.gitkraken.com) Also you may like this article by Sarah Drasner, [“Replacing jQuery With Vue.js: No Build Step Necessary”](https://www.smashingmagazine.com/2018/02/jquery-vue-javascript/) But most importantly I would say don’t stress out, this tools, libraries and frameworks are not something you need to use to be a “smart kid”, you may choose to use them if them bring value to a project, if not why use them? Happy coding!
Good advice. I would say go with Vue though, less steep learning curve and does almost the same things.
You can define [custom getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) for your object. Then access it via bracket notation (`obj[‘key’]`) or dot notation (obj.key), but *no* you can’t implement a slice operator, or any operators at all. 
A huge amount of the complexity of the Javascript ecosystem is the tooling. The actual libraries themselves are varying levels of complex. It sounds like you're pretty okay with your applications fundamentally so I'm gonna make most of my reccomendations based around that and not do much about reccomending libraries like React / Vue since those are both specialized around setting up the portion of the interface that user's interact with. I'm also going to be assuming that you're a solo developer and not a part of a larger team. They'd be the people to ask this question to if you were. **Disclaimer**: This stuff is just my opinion. I'm not what i'd call a senior developer, I just feel pretty comfortable in the ecosystem. Some people might agree with me, but i'm sure many will disagree with me as well on what i talk about / suggest here. At the end of the day, you have to be the one to choose the thing you want to look into and make decisions based on what you feel fits for your personal situation. ______ There is nothing wrong with using sublime text only for coding still. Vscode would probably be the one that won the popularity contest among developers if they were polled today, but who cares. If you like sublime text, theres really not much you're missing out on by continuing to use it. However, if you're dying for a change or just want to see how it measures up to sublime, vscode is free. Heres some documentation-y videos about vscode: [Link](https://code.visualstudio.com/docs/getstarted/introvideos) If you're already making sizable Javascript apps and you would like to organize the codebase better, build tools and version control are going to be what you want. **a note about build tools:** They almost all involve using the commandline on some basic level. You should have node installed on your machine so that you can run node from your command line, im assuming you do because you said you `very basic nodejs`. The good news is, you really don't **need** to know a lot of node js for some of the quality of live improvementy tools. Keep try and section this out a bit so it's easier to follow # GIT Git is version control, it usually is used as a command line utility. It's pretty easy to use / learn and I use it mostly to clone github repos. cloning means to go to a github(or gitlab or bitbucket, anything that uses git) url. You want to setup a free account on one of those websites to use git properly. I reccomend [github](https://www.github.com) As for an example of what it can do, it's easiest to demonstrate this with an example of how it'd work example: you'd open your command line, copy git clone https://github.com/Tor020/LinkedFileStructureHTMLBP and then paste and press enter it downloads the the repo(repository) entirely with the same structure and same file names. I have a bunch of little boilerplate esque setups for when i just want to throw an idea at the wall and dont want to screw around scaffolding stuff out. The other big thing git does is it allows you to have backups of your code someplace. If you don't have git installed, this video will walk you through how to get it setup [video](https://www.youtube.com/watch?v=albr1o7Z1nw) After you finish watching that video and installing git, here are some pretty **TLDR** type guides for common git commands. I say TLDR because git can do **alot** of complicated things that you probably won't need most of the time. [Basic Solo Dev Git Commands setup](https://gist.github.com/alexpchin/102854243cd066f8b88e) [More examples of solo git usage](http://web.mit.edu/git/www/giteveryday.html) [Detailed reddit comment expanding on the commands of git](https://www.reddit.com/r/learnprogramming/comments/88bl5o/why_is_gitgithub_so_hard_to_understand/dwjd8t1/) ______ # Build Tools Build tools are simutaineously amazing and terrible, but they don't necessarily have to be terrible. **Good parts of Build Tools:** * They save you a lot of time * They create a better developer experience **Bad Part of Build Tools:** * They are another thing to learn **Automation Tools** Gulp - Grunt Grunt is a task runner, it is used from from the command line. Gulp is a task runner, it is used from the command line. Gulp is generally less opinionated than grunt is here's an article with comparison between Grunt and Gulp [G v G](https://medium.com/@preslavrachev/gulp-vs-grunt-why-one-why-the-other-f5d3b398edc4) It's from 2015, but it's still accurate. **Bundle Tool** Browserify TLDR for browserify is that it lets you write node.js style modules in the browser and have some code splitting functionality. **Bundle &amp; Automation Tool** Webpack Does everything Gulp/Grunt + Browserify can do and more. Webpack is also probably the `proper badass JS war dog` thing you were mentioning To get a good idea of what webpack does / can do, I strongly suggest reading [this article](https://blog.andrewray.me/webpack-when-to-use-and-why/) It sums up a comparison between all of these tools better than I can, and it clearly outlines the benefits of webpack in total. **Webpack can do ALOT** This is a good tutorial to get started with Webpack 4 [Link](https://hackernoon.com/a-tale-of-webpack-4-and-how-to-finally-configure-it-in-the-right-way-4e94c8e7e5c1) ## A few more of my opinions I used to use gulp. Then as I got better with Javascript and got tired of not being able to use code splitting with imports and exports(relating to es6) I switched over to webpack. I love webpack now. I used to hate webpack. There are going to be a flock of people who disagree with this next bit because #opinions, but webpack is hard. That being said, Webpack used to be much harder. Like stupid complex with poor documentation. Now it's still stupid complex but it's got great documentation and some good tutorials out there. ______ Hope this helps, if you have other questions there's a discord you can join with a bunch of other developers where you can ask questions like this, if you have anything similar in the future it might be helpful for you. https://discord.gg/9MMbTde goodluck :) 
I asked that. But apparently it makes Angular npm module. 
Go sign up for interviewing.io for some technical interview practice. If you do well on your practice interviews, you unlock the ability to book real interviews with companies on the platform, like Lyft, Twitch, and Quora. The best part of this is it's completely anonymous, so you don't need to even reveal your QA background until AFTER you've demonstrated you know how to code. (disclosure: I work for interviewing.io)
At the same time, with React you learn a lot about vanilla ES6 that you may overlook with Vue. 
I think it retains its dynamic capabilities, just with React itself compiled down to raw doom manipulations.
Is it real?
this is the comment i came to post. good stuff :)
It's very real! I picked it up for 15$ and got all the books 
Great find then! 
Yeah, it's real, but you need to read &amp; learn quickly. The faster you learn, the more money you save.
Your JS File? It's something in there.
 var $overlay = $('&lt;div id="overlay"&gt;&lt;/div&gt;'); var $image = $("&lt;img&gt;"); //An image to overlay $overlay.append($image); //Add overlay $("body").append($overlay); //click the image and a scaled version of the full size image will appear $("#photo-gallery a").click( function(event) { event.preventDefault(); var imageLocation = $(this).attr("href"); //update overlay with the image linked in the link $image.attr("src", imageLocation); //show the overlay $overlay.show(); } ); $("#overlay").click(function() { $( "#overlay" ).hide(); }); 
didnt think it was important, i thought itd be only the linking. also is there any better way to make it look like code in reddit that isnt 4 spaces before every line?
Orrrrr you can just read on what's new in ES6.
Agree Vue is a lot easier than react, I'd say start with that
I don't think I've seen someone mention it here however it's - besides **git** - the best way to become more confident in your code: **TESTING** Go and start unit testing and every time you changed something, run your tests. Jasmin is a popular test runner. If you wanna get really fancy look into Test Driven Development (TDD)
You can download files and upload files to the browser that can then be manipulated by JS. For persistent data there is webdb, local storage. What else do you need? I assume you understand the security implications.
Oh. That is amazing then! 
Huh, wow, that's a good catch.
&gt; &lt;!DOCTYPE html&gt; &gt; &lt;html&gt; &gt; &lt;head&gt; &gt; &lt;meta charset="utf-8"&gt; &gt; &lt;title&gt;GETTING STARTED WITH BRACKETS&lt;/title&gt; &gt; &lt;link rel="stylesheet" href="Sastre_style.css"&gt; &gt; &lt;script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"&gt;&lt;/script&gt; &gt; &lt;script type= "text/javascript" src="Sastre2_js.js"&gt;&lt;/script&gt; &gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt; $(document).ready(function () { var $overlay = $('&lt;div id="overlay"&gt;&lt;/div&gt;'); var $image = $("&lt;img&gt;"); //An image to overlay $overlay.append($image); //Add overlay $("body").append($overlay); //click the image and a scaled version of the full size image will appear $("#photo-gallery a").click( function(event) { event.preventDefault(); var imageLocation = $(this).attr("href"); //update overlay with the image linked in the link $image.attr("src", imageLocation); //show the overlay $overlay.show(); }); $("#overlay").click(function() { $( "#overlay" ).hide(); }); });
somehow, it gives the same error, but it works, so im confused. Either way, you probably just saved my grade, thanks a fuck ton.
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
X-Frame-Options: SAMEORIGIN will redirect the user to my website or will it fail page load within iframe?
Your first sentence should be a quote. 
This. Switch now. VS Code is better than Sublime... And free.
I think its distribution problem. If it's a tutorial, you could make some code examples payable. 
Why is that? Are they subscription based?
In these cases it's w Always good to debug the code. Place a breakpoint, Do a console.log. or RTFM ;)
Yes. I agree with you. But isn't it faster to use getelemeentbyid or classname rather than queryselectorall?
Sublime is indeed awesome. I’ve used webstorm and vscode instead of sublime over the last years just like all the other people. But always kept using sublime on the side as a scratchpad or for taking notes. Something that i find very annoying to do in the other mentioned editors. I see a lot of fellow coders using notepad++ for this purpose and that really hurts me in the soul.
feel free to quote me :p I would appreciate it if you would credit me like this. "A huge amount of the complexity of the Javascript ecosystem is the tooling." [#DEPENDENCIES](https://youtu.be/2Tt04ZSlbZ0) 
It’s not going to load. 
Any way of redirecting?
Stop using this dumbass term.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Could you please elaborate what is the problem ?
Not at a computer atm. Maybe try one of [these](https://css-tricks.com/snippets/javascript/break-out-of-iframe/). 
Tried these. Didn't work. Seem outdated. 
I am a college student and recently did an intern where I needed to use tons of React. It’s beginner friendly. I would highly recommend Wes Bos’s React for Beginners course if you want to get started with React. 
Prepack can optimize generic JavaScript that you give it. If you have functions that you want to optimize that isn't run upon bundle initialization, you can explicitly tell Prepack to optimize them like shown on https://github.com/facebook/prepack/wiki/Optimized-function. We've also taught Prepack about the internals of React, ReactDOM and ReactDOMServer so when you require them with the compatibility option set to "fb-www" or "react-node" – you use our internal mock version instead. You can see how this done here: https://github.com/facebook/prepack/blob/master/src/intrinsics/fb-www/global.js#L50-L85. No reason why people could not add their own for their own uses too. More info on the React internal settings is at https://github.com/facebook/prepack/wiki/react-compiler.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [facebook/prepack/.../**global.js#L50-L85** (master → 8bf0e78)](https://github.com/facebook/prepack/blob/8bf0e78a584500789cf4ea09d85027799e0e09a5/src/intrinsics/fb-www/global.js#L50-L85) ---- 
&gt; And literally EVERY editor/ide is like that. Take it you've never tried Vim.
you write code in the console?
Your uglifier is confused, there is nothing from ES6 here.
You should get started with Git. It's great to have the freedom to experiment and know that you can roll back anything. Initialise one of your projects, make a branch, try adding webpack, or converting one of the modules to a Vue component. You'll probably break everything horribly but you'll learn lots and you can checkout master and everything is back to normal! If having your code public sounds scary, Gitlab have free private repos. Plus their CI stuff is amazing. I just configured an old project to upload any changed / new files over sftp every time I push a new Git tag. 
VueJS. Because it feels more like vanilla JS to me. Although I haven't dived deep into React. 
Yeah, I thought that something else might be happening. I am following select2 documentation and I doubt they used ES6 I will look into this further...
About three years ago I was setting up a new build system at work. Grunt was the taks runner of the time, spent ages writing that God dam config file and it was flakey as hell, took ages to write and get everything working correctly. Last week I spent a morning writing my webpack config to do the same thing, it literally took me a morning to open the documentation have a read, whack on a few modules and I had a working config, thank god for web pack! 
Yes!
absolutely, i gotta admit it was weird at first though.
Yeah I'm not getting the other comments that are jumping into JS frameworks. Git really is absolutely essential for every project, shortly followed by some good build tools.
Thankfully, work is underway to make GoogleBot always up-to-date with the latest Chrome 
It's pretty humorous right now, most of the dependencies are handled via `package.json` in npm anyway. You don't need to actively think about them once they're configured and IIRC they come with decent defaults out of the box. Personally though i side with vueJS over react.
The plan is to slowly replace rest, e.g mimic real world scenario where you might already have a rest api.
This article is the equivalent of wondering why we need government and society, when we could just continue hitting women over the head with big clubs, living in caves, and cooking with fire. The answer is that everything seems complicated to the newcomer because there are decades of problems being handled easily instead of making the programmer do everything for themselves. And if it's really too much to think about, there are generators like create-react-app that bring that entire article down to a single command. So essentially, the entire article is a joke and you shouldn't take any of it seriously.
That's the argument for React, not Vue.
Nope, non subcription, yours to keep
Ooof. I studied/built my projects in React, but currently work in Vue. Since both have a lot of similarities, you can easily learn one and transition to the other. That being said, I'm a big fan of Vue and prefer Vuex over Redux. However, React is highly, highly desirable with employers and is pretty much the hottest thing right now. Due to this, if the person asking was looking to study something and aiming to get a job eventually, I'd say go with React.
I think what they’re trying to say is that using aws/azure is not actually serverless but just a different type of server. That’s the non-confrontational or passive aggressive version :)
~10x faster if some benchmarks are to be believed. But I've found that difference to be utterly inconsequential in day to day use, so don't worry about that.
Thanks. Thought he was not happy with the work.
create-react-app is probably by far the simplest way to get everything set up. Keep in mind that this may leave you wonder "what is this" if you're unfamiliar with the ecosystem, so you may have to be proactive about learning about the little details.
As I write in all of these... that depends
Do you have a better suggestion for terminology, then? You knew what "serverless" meant, right?
I would add Jest to that stack, its not very hard to learn the basics of, and tends to improve the quality of any stack and can make it easier to work with.
It also transfers to whatever other software (or even some non-software) projects you'd ever get involved with.
Really great comment, thanks for it! 
No, the answer is "programming". As others have said, get elements by tag name will return a list of 0 or more form elements. It's definitely valid to have more than one form on a page, and you'll likely want to check all of them. Another gotcha you'll probably encounter next is that it returns a node list, not an array, so use Array.from to convert the result. You'll be working with arrays a lot, so my next piece of advice would get familiar with looping over them with forEach or map. Get comfortable looking at js documentation, and always check MDN (Mozilla developer network) first. Good luck! 
Definitely Vue, worked with both, Vue is easier to get started, you can even just embed it into your webpage, the syntax is easier and much less obtrusive also well suited for larger apps, checkout Gitlab for that.
I'd also like to stress to the OP that by using these libraries you can step over complexities of Webpack et al as these do all the heavy lifting needed to get you off the ground with some nice code organization and best practices baked in. So now Babel(ES7+), Typescript, SCSS etc just work and after you get comfortable with them and the library you can then slowly learn how things like Webpack actually work while still being able to produce working apps and learning skills required for actual applications development. 
Then I’d recommend stick to that as a focus. Make your article ‘Migrating from REST to GraphQL’. Your showing them how to query a setup/ database and how a web framework of your choosing works. Nothing about that has real world implications for someone switching their API interface. There are also some GraphQL best practices I’d use like AST, a resolve map, and using GraphQL ID types for IDs instead of strings.
But Vue is all magic. At least React (sans jsx) is just js. 
What makes it magic?
They are both great libraries. I prefer Vue because it is very easy to get started and also allows you to be very productive after the initial learning curve. It's also mature enough that the ecosystem, while smaller, isn't far behind react's. React is crazy popular with employers these days, so if that is a factor, then React may be better for you. I think that with Vue's fast pace of growth, it will get to a similar level in 1 - 2 years as more companies are making the switch right now and will require devs further down the line. That is complete speculation on my part though. 
How long has OP been learning/working with JS? Coming from someone who seems to be in a similar position (2ish-3 months JS xp), though I’m a VScode advocate. I’ve just been writing native vanilla js a ton. Haven’t gotten into the plethora of build tools/frameworks quite yet. Trying to dial down the basics. Also likely going to opt for React when it comes to a framework. 
I understand your rage. It's justified. I recommend you do a tutorial with create-react-app, razzle or nextjs depending on your requirements.
I have yet to see one good argument, to prefer Vue over react. The react API is super simple... Jsx is not mandatory, it's more JavaScript than anything else. People also seem very confused with what react actually is. Redux is a completely separate library, in fact you can manage your state the way you want. By the steep learning curve they might mean that you in fact need to know how to architect your app, which is in my opinion, if you don't know how to do this, a great indication that you're not a great developer to begin with/ very junior.
if you use create react app youre already using webpack dude
Thanks for the great feedback
I … don't have any rage. I didn't write the article. It's obviously supposed to be funny. I just want to know which bits of it I have to take seriously.
I wouldn't bother with webpack or redux, one has a a too verbose config and redux just adds a ton of boilerplate, and it makes your app model less extendable (with class decorators for validation for example). but git, react, mobx or react-easy-state, I would definitely recommend and the learning curve will be smaller imo. as a bundler use parcel, it's not as robust as webpack yet, but it's zero config and if you've learn typescript you can also skip babel. everything works out of the box. my favourite stack atm is parcel, typescript, preact, react-easy-state, postcss and bulma CSS. if you need backend integration I would stick to nodejs and typescript as well as learning the previous stuff will help you here also.
You got a source for that?
Oh get lost mate!
I love Vue, but I would agree with this. Though to be fair I prefer Vue’s approach. 
Fyi: Bing and many other crawler still won't execute JS.
If you’re starting out then there’s no question that Vue will be the easier one to grasp quicker and it’s great! So it’s not like that is some kind of compromise. Both have their positions in the ecosystem. They are tools that you should use depending on the jobs requirements. However, if your aim is just to learn a JS framework then Vue will give you that and make a transition to React (and back and forth) a whole lot easier, as many of the concepts are similar. After that it’s just a whole lot to do with syntax and peculiarities. Check out the Vue Cli to get a new project up and running in minutes! 
Take my upvote and be fucking man ... just take this shit and leave
lads what the fuck is a CVS? \- senior front end developer.
Just to counter a lot of the current suggestions. I really like React a lot more than Vue. I prefer my HTML in my JS, because it makes more sense for me. React is also much closer to vanilla JS and performs less magic out of the box. 
React, do not want to learn Vue templating engine syntax. More library integrations are already done for React. If you do not want to use redux, you can use mobx. Both frameworks are good actually, React is simplier, Vue is easier.
What are you hoping to achieve? If you only need it for your own projects, or you are a freelancer then I guess you could choose Vue. For coding job, check your local jobmarkets and choose the one that is in demand.
[removed]
Yeah why learn programming just read what's new in each iteration of each programming language
Serverless obviously. Like "the cloud" was not bad enough already.
I know what people are implying with the term, it is just the worst term that could have possibly been coined for this.
I enjoy React Native so... Trying Mithril for small webapps now. 
Well, I've made this benchmark, and it seems that querySelector is about \~339x slower... Vanilla is \~10x faster than mik.select\(\)... [https://jsperf.com/mik\-js](https://jsperf.com/mik-js)
React is the far better library, Vue has the more active fanboys.
i would somehow like to get my hands dirty with vim. but coding with it is too high level for me. :D
Text editor is the category of software where you always have a big choice.
Vue is really nice for smaller projects in my opinion, much lower friction between starting and getting something going. Vuepress and nuxt are also very impressive static site generators.
&gt;A: `getElementsByTagName` returns a `NodeList` It actually doesn't. It returns a `HTMLCollection`, which is live (i. e. it updates if you modify the DOM). `querySelector` returns a `NodeList`, which is static. There's not really any reason to use `getElementsByTagName` these days.
`getElementsByTagName` is outdated. You should be using `querySelector` or `querySelectorAll` instead. There are two significant differences between `getElementsByTagName` and `querySelectorAll`. First, `querySelectorAll` allows you to use CSS Selectors to query for your element (though in your case, the CSS selector for a tag is just the tag itself, so no difference there). The second difference is that `getElementsByTagName` returns a HTMLCollection, which is live meaning it updates itself if you add/remove elements, whereas `querySelectorAll` returns a static `NodeList`. `querySelector` simply returns the first matched element, so I would suggest you use this method instead.
High level? Rofl that's just an excuse, try it. It's actually pretty easy once you get the conceptual understanding out of the way. - 3 modes : normal, visual, insert. Visual is more of a hacky last resort. - Buffers : think of it like a copy/paste clipboard with history - Commands : structured as *&lt;number&gt;&lt;verb&gt;&lt;noun || motion&gt;* With that + plugins you should be fine.
If you have problems with Mithril, make sure to visit the [chat room](https://gitter.im/mithriljs/mithril.js), it is full of helpful folks.
React for sure. Vue feels like it's for people who weren't ready to take the dive into fully managing the Dom via a 100% ecma controlled vdom. Lots of HTML strings and `v-` prefixed attributes. It's a big step up from angular, sure, but I think a lot of it's design is more about catering to familiarity. I've felt for a while that the common approach of learning the big three web languages: html, css, and js, is based more on tradition than the actual strengths of the languages. Good, functional programming can build your dom, especially with a lot of the more recent syntax updates (implied prop names, trailing commas in function args, etc). Ditto for building your styles via objects (with something like emotion, which is also a good fit in vue). Hell, even jsx isn't all that useful anymore, though I understand being reluctant to take that plunge. 
Start with Vue to grasp the concepts of view libraries/SPAs and then learn React because you have to (it's stupidly popular). Continue with whichever you prefer.
What are you talking about?!
The truth hurts haha
If you have to choose one I’d say React, because I’ve been using it heavily for a few years and absolutely love it (#bias), but use/learn both if you can. React is by far the biggest of the two in terms of community, ecosystem, use in the real world and work opportunities, but I’m seeing demand for Vue growing steadily in dev shops and job ads. I doubt it will ever overtake React... at least before the next big thing comes along.
Honestly, get a job doing it. The fastest way to learn is to be surrounded by people who know more than you. Barring that, start reading some open source projects. If you have questions you can probably contact the maintainers for help.
I've written some helper functions to deal with promises, observables and callbacks. [https://github.com/metabench/fnl/blob/master/fnl.js](https://github.com/metabench/fnl/blob/master/fnl.js) Interested in your opinions. Sorry about it lacking a readme, if that's the first thing you would need, I understand, and I should make a readme for it.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [metabench/fnl/.../**fnl.js** (master → 72f054c)](https://github.com/metabench/fnl/blob/72f054c3733b3705bbcff1d552df657eedf4e614/fnl.js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e01e794.)
All the custom attributes in the html. They do the logic in almost-but-not-quite-javascript, with Vie parsing them(?), to determine what properties it needs to watch. Works great for hello world, but become a nightmare in a larger project. In my experience. 
What if I told you that it’s possible to learn ES6 *without* learning React? Shocking, I know.
&gt; Concurrent Versions System. - Anyone with the ability to type three letters into a Google search.
Vue follows an older technology stack modelled after Angular and Knockout, it thereby has all the inherent problems that this approach brought: big api, lots of concepts to digest and study, it often feels like a foreign body as most constructs are arbitrary, everyday problems often need framework-specific solutions, and perhaps the most distinct: it artificially separates presentational code from the view. React was made to fix it, but in a way that is radical, so it may be as familiar as some people would like. So, it's easy, if you like Knockout and Angular, or javascript is mostly foreign to you, use Vue. There's a couple of things to take into account: React is the most used, [statistics are pretty clear on that](http://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core). Despite the fact that all frameworks grow, React is the only one that steadily gains mass, in a month alone it grows about as much as Vue in it's entire 4-5 year lifespan. It's leading the job market, the eco system is the largest, and for me this is the most important: it's where all the innovation happens. React is constantly pushing the edge, while the community is doing the same with 3rd party constructs.
I have 25 years of internet dev experience. I've founded multiple tech companies. We recently chose Vue over react because we needed to incorporate more interactive UIs in a few key places. After evaluating Vue and React, Vue was the simpler path in terms of learning curve and ecosystem requirements. This had nothing to do with not being able to climb the learning curve and everything to do with pragmattic choice.
Comments like this piss me right the fuck off. There’s nothing simple about React, particularly if you’re not familiar with some pretty complex tooling like Babel, Webpack and NPM, ES6 and functional programming techniques. I’ve been coding in JavaScript since the late 90s and it took me weeks to be able wrap my head around React. Once it “clicks”, React becomes a lot easier to conceptualize, but if the best resource you can recommend is a 5-hour long video course, then it sure as shit is not “super simple”. 
I'd pick Vue if I wouldn't need a heavy frontend, like traditional webdev where most logic ist handled in the backend, and React if i'd build a web app that behaves more like what people expect from mobile or desktop apps. Vue seems to be more popular with traditional webdevs and web designers who both favor lighter frontends, while React seems to be the tool for people with mobile or desktop app programming backgrounds, and people who really like JS. 
You must start using Git. I pay for GitKraken. Well worth it, but still learn the Git CLI. Node.js + Express + something like Bluebird (read up on callback hell.) Use a build chain (like Grunt.) It opens up being able to transpile ESx, Typescript, etc. into what browsers can currently handle, and Sass to replace writing CSS. Node.js allows for using jade(now pug) for avoiding html's necessary, but annoying, tagg ... endtag bs, as well as other goodies. Jade/pug gets converted to HTML so you can write at a more abstracted level. The hard part is figuring out which tools would help you most. I'd actually not focus on Angular or similar for next step. There's a lot to learn above and is a better foundation because you'll probably want to use above techniques for about any project. Being self taught with no CS schooling to fill me in, it took me about 3 months to start using things usefully, but about a year to really iron out my build chain and preferences. 
I don't see any es6 here either, Maybe it's mistakenly looking at that comment, which does have "key of" which is es6. Just a guess.
It's a humble book bundle, why make the title sound like clickbait? Yes it's legit, they have these bundles often. This looks like a very solid compilation.
yeah ... the "smart kids" ... ¯\\\_(ツ)\_/¯
Oh look, a fanboy calling other people 'fanboys'. If your comment doesn't add value to the discussion, please do humanity a favor and just stfu.
MS *hiss* ;) 
It's just that vue has a lot more and more virulent fanboyism without much to back it up. GTFO with that template shit.
So how exactly is it easier, I'm just curious. You can just as easy do a reactDom.render for a few places in the Dom with a few components. 
serious question, but how old are you? just curious because anyone I know under the age of about 30~ is pretty excited about blockchain (even if its use-cases are being over-hyped). Just seems weird to me to dismiss something soley because it has blockchain tech. blockchain isnt the new flash already, is it?
You're pretty much describing yourself. I have dev experience for both frameworks. And I was browsing through this thread hoping to see some good discussions. It really annoys me when some stupid guy like you start a framework war out of nowhere. Grow-up kid. 
yea, i find the web dev related subs here are full of downvoters. watch, i'll get downvoted too. And I actually think it's cuz of my name and the fact I'm a woman.
I'm not the one starting this "war". OP asked what to chose and there seems to be no real competition: React. Adoption rates, real life *huge* websites, lots of big companies backing it, IDE support. On the other side we have rehashed template bullshit and fanboyism.
[removed]
https://eloquentjavascript.net http://speakingjs.com http://javascript.info
"Adoption rates, real life huge websites, lots of big companies backing it, IDE support." -wait I'm confused, what exactly are you describing? because that description applies to both React and Vue.. You could just provide you counter arguments without the name calling on your first comment, fyi.
I will try removing that comment. Thanks
Spend $10 on a gift course on udemy or maybe find a decent YouTube video. It will go a long long way. 
I prefer Vue, it's simple and easy to use. The react todo example VS the vue one speak by themselves.
$15 worth of books
I disagree. With Javascript, this can be one heck of a rabbit hole and overwhelm the learner if not. It certainly did not instill confidence in me. It actually about made me give up because of all of the subtle gotchas and false positives that can happen when testing JS. Granted, I was really learning JS itself and refining myself, but JS is so flexible that it became a major time sink for me. I write tests now for anything that's going to be prod, but I still don't bother if personal project/learning. Exception being now that I'm learning Rust programming in my personal projects. Test creation while developing has fit really well with Rust, but the language really lends itself to TDD.
Can't help you with you the nitty-gritty as I'm new to JS myself but thought I'd share [one of my favorite inspirational quotes](https://twitter.com/daisyowl/status/841802094361235456?lang=en) on this general topic 
Much appreciated 
While that guy was being pretty trolly, the adoption rates aren't at all similar. React continues to grow each month at a similar pace that Vue has achieved in years. http://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core
I've seen it used successfully on some large enterprise systems. For instance, it was used on a large bank payment processing system across hundreds of countries \(with lots of associated payment methods \(SEPA,ACH, FT etc\), regulatory and tax reporting and so on. Python would have failed for a lot of different reasons\-one of them being the amount of type checking it does, its performance characteristics, and the way it handles concurrency. Other languages might have worked, except that: 1. Most languages don't have the tooling support Java has 2. Most languages don't have the community that Java has \(documentation, user groups etc\) 3. Most languages don't have the number of developers that Java has If we had tools like React, Elixir/Phoenix, and Couchbase 20 years the bank might have made different choices. We didn't make a bad one however.
You don’t need a library for this. Just use an array of arrays filled with booleans
Vscode had a vim extension but if you want to learn vim I would do the console for a while. It allows you to do immersion learning. 
What more, they didn't even bother to check if the way they implemented it could be made compatible with existing libs. JSX fragments are not compatible with Mithril fragments.
Essentially, the culture and approach of the framework may allow that, but doesn't embrace it. Often aligning your own project requirements to the needs of another project has more immediate benefits since you aren't chafing against the gravity of the project. If you need a specific example templating in Vue allows more direct reuse of existing code while we transition elements of the app. In addition the criticism of "v-on" are particularly tone deaf for us since we are committed to some arbitrary philosphy of reactness. We're focused on pragmatism and classic JavaScript style interactions that feel like events and data attributes are nice to have. With a different team, different goal we might make other choices.
and don't feel bad about using a GUI like sourcetree, at least to begin with.
I used to swear by parcel, but I think [this issue](https://github.com/parcel-bundler/parcel/issues/1165) is a really central thing to know about it. The inability to use sass or css variables via import is a huge, huge issue, and I'd have to imagine that it limits the scope of this thing to all but the smallest projects
If you asked me this question last year I would have instantly said React, and at the same time try to dispel Vue as just another framework fad.. (inb4 react is a library attack) In fact, this actually happened when a friend I met at a weekly UX group tried turning me into it. My response was that react did the job well enough and Vue likely did the same thing with an ever slightly different syntax. A few months ago I decided to follow up on a medium post I found in my inbox, and from there built out a simple web app, and the entire experience was great. The framework is intuitive and does what you want with minimal configuration. I say build a react app from start to finish, then do the same with Vue and see if you feel the same way about it’s intuitive nature.
\+1 on using ESLint with the Airbnb preset, it's like having a community of engineers reviewing your code style. I've learned a lot from it, I can only imagine how incredibly useful it would be if you're relatively junior.
I am new to both. I started a project with React, but switched over to Vue. Vue is working much, much better for actually getting things done, and it's running faster. I am working on a game, and I want to be able to keep the game data separate from the UI state data. Vue allows this to work without even writing any code because it watches the objects you set as data, whereas React requires a call to a setState function. It's been really nice and easy. When I was doing the same thing with React setState, it was slowing the game down dramatically, such that each 0.1ms tick in my game was taking more than 0.1ms. Since I was having so much trouble setting up my project with React, a cynical part of me wonders if there are disproportionately more jobs available for React because it takes more people to get the same thing done. But I'm pretty sure it just didn't fit my project and programming style.
ITT: everything.
Yes I do understand that. The idea is to configure the project source ground up without CRA. 
Learn ES6, learn a component framework. 
Ok, so if I understand you, you want to use code that already existed and use it in Vue? Then I am onboard with your approach, though there are examples of teams doing this in react. For example Pinterest if I'm not mistaken did a gradual migration of its codebase by plugging in components. So it all comes down to using real HTML and not the react interpretation in jsx... To be fair, this is really a small issue but okay, I get it.
As far as tooling is concerned, Sublime only is also what I use. Gives me a lot of freedom to use other computers and keeps me honest without learning all the keybinds of fancy editors and such. As far as build tools and such, I highly recommend learning git/webpack at a basic level at least, and npm. This way all you need is a browser, sublime and terminal. Learning ES6 is also highly recommended since it really is so nice. 
I picked Vue because it's easier to learn and because I already use Laravel so it integrates well with Vue.
I said that was one concrete example, not the totality of the reasoning.
So what is the totality? It doesn't sound too complicated... Might as well explain things thoroughly instead of a small portion of it. Because now it doesn't sound that pragmatic at all xd
Just figured what caused that error. See my update Thank you for your help
could you elaborate on what you mean by CSS modules? i'm not a fan of styled components either, but i'm also not a fan of what i'm doing now which is `mini-css-extract-plugin` with `ignore-styles` to stop the imports during SSR. i ideally want something similar to how angular 2 does component scoping, where it attaches dummy attributes to the elements to restrict the selectors in the style definition. i'm happy to keep `ignore-styles` around if i have to, seems like it might come in handy down the road.
&gt; Just figured what caused that error. See my update Thank you for your help 
I've been using Sublime for years and one of the biggest reasons why is probably the variety of plugins and vi "emulator" (vintage mode) which I usually just use for some basic features like moving the caret position and setting markers. Although, based on your comments, I'm intrigued by VScode. What are it's major selling points in your opinion?
Does it do well with styled-components and file-loader? Looks like it should. That combo can handle the stuff sass does pretty well, in my (less than extensive) experience
I'm not a power user, for sure, but I think one of the biggest advantages in my book is that it's open source. Also just the pace at which it's updated and improved upon, it seems like it's advancing much faster than Sublime Text is. Vs code has a huge plug-in community, and a lot of the details are just done so well, I think Sublime Text and vs code are essentially the same thing... And vs code wins out slightly in a lot of the details. I was also a Sublime Text user for years, and I was very surprised at the rate people jumped ship and flocked to a Microsoft product, but I did and I've been very happy ever since :-)
I created a modular bingo.
Dude, I'm just sharing some experience, not putting together a slide deck for you. I'm not going to engage further with you if you're going to cop an attitude like a few exchanges of information gives you some sort of high horse to invalidate my claims of pragmatism. The solution we chose efficiently solved the problem we had, met our goals and has proved to be maintainable. It's in the past.
I wasn't trolling because I mean it like I say it. React has been transformatory in the way people do client side UI, with a million competing solutions to do the same "faster" or "more efficient" and whatnot. The common feeling among react developers is "I'm so done with other shit..". Vue.js is the same template shit all over again, a revamped angular. The popularity is a mystery to me but maybe I am underestimating the amount of people coming from jQuery spagetti code or the difficulties of setting up babel. I don't get it.
ironic that you mention the high horse attitude while you started off with, 25 years of experience in big companies... Since you're not specific well what can I say, not a single good argument still stands I guess.
Use Next.js
Having worked extensively with both, I much prefer vue. Key reasons being cleaner templating , much better state management, far less boilerplate, fantastic documentation, and single file components out of the box.
Use Next.js. It's the easiest way to provide server-side rendering with React. 
The reason I stated experience was due to the quote below, not due to being on a high horse. I was merely stating that I did have experience. &gt; By the steep learning curve they might mean that you in fact need to know how to architect your app, which is in my opinion, if you don't know how to do this, a great indication that you're not a great developer to begin with/ very junior. Also, I'm not arguing with you. I was sharing an experience and a decision and some of the reasoning. 
You have... class SpeechRecognition{ // &lt;-- name of your class // ... getSpeech(){ window.SpeechRecognition = window.SpeechRecognition || webkitSpeechRecognition const recognition = new SpeechRecognition(); // .... So when you do `new SpeechRecognition()` in that line there, what are you expecting to do? Instantiate _your_ `SpeechRecognition` class or the `SpeechRecognition` API class? You should give your class a different name.
do you have the reddit link for the post that brought this problem up? 
This is the new religious battle lately it seems. Granted the format of the question makes it very subjective. Most of the replies tend to make it sound very clear one way or the other. Different replies often say the same things about both frameworks though. "This one is easier", "this one is better plain JS", etc. I feel like the answer depends heavily on your current experience though. Me personally, I spent a ton of time building fairly advanced AngularJS apps. As such, I heavily dislike the style that Vue follows. The API surface alone means to me that it's harder to learn and teach (similar to AngularJS). React however, if you actually focus on just React is very small. However, lots of guides you'll find are teaching integrating something advanced, so it's easy to get in over your head quickly. Those integrations certainly are potentially complicated. But you shouldn't need them right away. You really should start with Create React App without ejecting. My advice is to try both. Build a small app quickly to get a feel. Decide for yourself.
Webpack can't replace gulp completely can it? I mean you don't meed gulp for compiling or file watching, but in what way can webpack do task running?
Well document.cookie is just a string, so you'll need to do some string manipulation. Something like: -get the cookie -break the string into parts (array?) -change the part(s) you need to -rebuild the string -save the cookie again
I tryed ,even when i do it still dosnt work
Exactly. Learning git makes it easier to learn everything else because it gives you a safe place to play.
I completely agree with this. React is the current hotness with employers because of the community and the way it works, but I can see a transition to Vue coming soon in the same way we saw employers move from Ember, Angular, AngularJS and similar over to React. I think it will come down to the coders convincing their employers that trying Vue will be worth it since the comfort zone with react in many workplaces is already well established (and any downtime for learning has potential financial implications). My heart is still with Angular for personal projects because I like the separation of logic and views (and I generally found the workflow from code to build was much better), but I'm comfortably moving across to React because the support is that much higher (and the flexibility it offers once you get going in a project is huge) and I use it every day at work. My next stop will be Vue - getting ahead of the curve is going to be good for me, and good for my employer.
Yep, and then: - Accessible by default - You may or not prefer the API
Have you any idea on what's causing it to crash? Errors? Specific trigger words? Annyang always worked well for me.
If you can figure out how to get the cookie (hint: It's going to be in the same library you used to set the cookie so check the docs), and then you can use something like string.split(); https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split That will return an array of individual items in the string (i.e. cookie content) which you can process as you need.
It is whenever I speak non words such as 'Aaaaaaaaaa' and noises like these. I opened an issue in the Artyom repository: [https://github.com/sdkcarlos/artyom.js/issues/59](https://github.com/sdkcarlos/artyom.js/issues/59). But it is basically the same problem with Annyang.
Frameworks for what? Single page applications? Chat platform? API platform? Narrow down what you want to do, and I can offer some recommendations.
You might want to reread the quote a few times and think about why you replied in the first place. No offense but ehm.. 
In the beginning, google created unobtrusive ads. And it was good. These little 2 line text ads sat in between paragraphs in an article, a block of them off to the side, and on and on. Adblockers didn't exist. Then people had to go and fuck it up with flash, strobes, giant billboard panels the size of a dinner plate... death and annoyance tore the web asunder, and it was not good. I don't have a problem with unobtrusive ads. I'll leave them unblocked. But annoy me and I'll strike down upon thee with great vengeance and furious anger... either that or ublock origin.
well as learning curve is important to you you shouldnt use webpack as its a configuration hell. Go with parcel it works with plugins you can install and then youre all set up.
i use both react and vue and while the templating syntaxes are super different the concept is the same. wrapping an element in a ternary or a v-if v-else directive is largely the same concept. as are their lifecycle hooks, passing props and dynamic attributes for elements. vue’s familiarity is not a reason to discount, especially if it’s just as powerful. at worst, one framework litters your template with proprietary directives and the other litters your js with fragments of html. in fact the latter is familiar because pre-framework, it was not uncommon to build dynamic elements with jquery or createElement. and i don’t understand what you meant by jsx not being useful anymore...
I work at a massive multinational company. It is Angular all around and I don't see that changing anytime soon. There isn't even discussion about anything else.
Nothing public, but at least when I worked there, that was the case. 
@OP, pretty much every time I start a new project I'll run a 'git init' in that folder, then 'git add .' At the end of each day (or before I try something "crazy") I'll 'git commit -a -m'. I don't have super indepth git knowledge but just that amount lets me "time travel" with my code. And it's easy!
Learn both and pick the one that you enjoy more. They both have large active communities. The major difference between them is how opinionated they are. Vue is fully featured in that it provides an entire framework for handling state, how to handle html templates, styling, etc. React is more hands off and let’s the developer choose how to incorporate these pieces. For that reason, some people have a tough time jumping into react and it can feel a bit overwhelming.
I am surprised by the number of Vue lovers. I use both, but if I begin a new project, it will be React for me. I found TypeScript support to be better in React. .tsx vs .vue Because everything in React including JSX is a JavaScript after all. So, TypeChecking is done everywhere without any config. Also it is not a huge deal but you don’t have to remember directive syntax in React. It is always `prop=“”` instead of something like `v-demo:foo.a.b="message"`. Standard HTML element’s JSX prop names are close enough to real HTML element’s attributes. But I think you know both frameworks anyway and just use what project requires in the real world. I love React, but I don’t always use React because you have to consider other things like “what frameworks your colleges are familiar with” should come first and if you also have UI/UX markup teams, they usually hate JSX because the templates are tightly coupled with JavaScript and makes them hard to understand. 
I'm not sure where this came from at all on this sub but as a fellow JS dev I am glad that life is working out for you and you are doing well (:
the answer is obviously [vanilla js](http://vanilla-js.com/).
I changed the name of your class and the error was gone.
Sites that don't annoy their users get adblocked too. Meaning, they too will soon be wrapping their content around a paywall. The end result of all this is that folks that can't afford content get second rate garbage instead of decent news. The whole open access for everyone idea dies in a post ads world. 
Yeah but i get SpeechRecognition is not defined
tldr: The difference are significant but it isn't just a case of JSX vs Templates or large API vs small API. The choices that React and Vue devs have made may have consequences down the road that you may not realise when you first pick up one or the other. React and Vue can accomplish much the same thing, they just go about it in very different ways. From some of the responses I wonder if people have actually used both libraries for anything beyond simple components as that is when you really start to see the difference outside of relatively superficial differences. As you may or not know, Vue pushes the idea of Single File Components. A file with a separate block for your template, script and styles. Some people find this comforting as there is an element of familiarity with traditional front-end development. I personally really like them, not because it 'looks like html' but because it creates structural landmarks on the page which make it quicker to navigate the file itself. Reacts JS/JSX combo works fine but things are a little more muddled (especially when you add styled components to the mix). You get used to it regardless. It is worth pointing out that the use of SFCs requires a build step, while Vue itself does not. I doubt this is a concern if you are considering React as an option because JSX requires a build step. if you need the ability to drop some script files into a project without a build step then React is not really an option unless you're willing to drop JSX and use ```React.createElement()```. In this case, Vue would be the obvious choice. The other criticism of Vue that it uses a DSL and has a large API surface area. Both of these things are true, as least it has a larger API surface area than React, it is quite small compared to some. these are separate but related concerns. The DSL that Vue uses is just another abstraction, just like SFCs are. They are designed to make you more productive and keep your code clean and declarative. JSX exists for the same reason, it is also a non-standard abstraction but allows you to leverage the full power of JavaScript within it. JSX is not JavaScript and never will be, airbnb's style guide prohibits the inclusion of JSX inside ```.js``` files for example as they are non-standard. They must go in their own ```.jsx``` file. This is a personal choice, once you know Vue's DSL you can be more productive due to lots of helper methods and shorthand. On the flip side you have more Vue specific syntax to learn. Some people talk about cognitive overhead regarding learning new APIs and its a valid concern (although I would question it) but I would argue that React introduces significant cognitive overhead itself for the exact opposite reason, it's small API mean we need to use relatively complex patterns in order to achieve certain things. I'll come to this. Lets not forget that Reacts API size is growing and continues to grow at a reasonable rate. We recently got the context API and we will get Time Slicing and Suspense at some point. Also worth pointing out the Vue documentation is the gold standard for API docs and are incredibly clear. React docs are average but still fine, it's a smaller API so you shouldn't need them as much in principle. Let's talk about abstractions though. All of these frontend frameworks are abstractions to a greater or lesser degree. Writing UI components in a declarative fashion is incredibly difficult with pure JS so React and Vue provide ways of doing this, along with a whole host of other helpful additions that allows us to bind State to the DOM without storing that state in the DOM and render changes in a performant manner. All this said, you don't have to use Vue's templates and DSL if you don't want to. You can use JSX or the ```createElement()`` function just as you can with React. You can also use a template language of your choice such as Pug. Vue is very flexible in this regard, which I'm not sure people realise. Being able to write real UI components with SFCs, write renderless components with only JS (exporting only the script block with no template or styles) and then switch to JSX or render functions based on your needs give you an incredible amount of control over the way you work and can keep your code clean. When you start writing more advanced components or want to write truly reusable components (especially components that wrap other components giving them additional behaviour) you will start to see some stark differences. With React you will need to make use of one or more of Higher Order Components, Render Props, or the Fuctional as a Child Component pattern. There is nothing wrong with these patterns at all, they're greta solutions to a real problem but they add significant cognitive overhead (more so than learning new syntax does) as they are relatively complex patterns. In Vue they are mostly unnecessary due to the larger API exposing a number of methods of passing data around (look into Scoped Slots if you are interested). That said you can use these patterns for the most part in Vue (if you really want to). I wonder if some of these patterns sacrifice some of the declarative nature of JSX in order to create more reusable components but that's another discussion. They are both powerful libraries with their own advantages and anything you can do with one, you can do with the other (pretty much). React has a much larger ecosystem and better tooling. There are more jobs for React devs. Vue is faster to get started and provides remarkable flexibility and an API that allows you to avoid some of the more complex patterns required when working with React and work in a more idiomatic 'Vue' way. Things like emitting events to parents rather than passing down callbacks as props. It can make your code cleaner but it is also an additional abstraction. Vue also has more core libraries that offer tight integration with Vue while working in much the same way that alternatives for other frameworks do. React has far less core libraries (some standard functionality in Vue requires a library with React, like checking prop types) but far more libraries in general (authored by the community). It's worth bearing in mind that as ecosystems grow you end up with lots of libraries doing broadly the same thing and most of the libraries I use with React or Vue have nothing to do with the framework itself outside of styling (and React will ask you to rethink everything you know about styling, which isn't necessarily a bad thing), so your mileage may vary there. I use both, I like both. They both annoy me in different ways. They both have their own quirks that you have to get used to. If I had to pick one? I'd choose Vue. But that doesn't mean you should. Try them out for yourself and see what you think. Take any harsh criticism or excessive praise with a grain of salt as they are both really excellent libraries made by really smart people and you won't go far wrong with either. I've tried to be impartial and note the significant differences, I may have failed, some irritations are more worse than others. Edit: I forgot to mention vue-cli which is like create-react-app on steroids. It's a really great tool and will soon have a visual ui, which is pretty interesting. So in some ways tooling for Vue is really amazing. I also forgot to mention that TypeScript integration with React is better than with Vue, this is something that will be rectified at some point but the current situation is that TS integrates far better with React than Vue. Food for thought. Go and play.
Have you changed line 21 too?
So question.. why or in what ways is react or vue better than angular?
I saw it thnx
 \&gt; The popularity is a mystery to me but maybe I am underestimating You aren't making any effort to understand. Look, it's very simple. If people use Vue over Rect that's obviously because they are winning there. And it boils down to how they feel about both engines, how fast and easier they get the work done. This has nothing to do with being a fanboy or not. I tried both, I love VueJS because I can't stand React stuffed code \(just look at any render function, my God...\). That's all. That doesn't mean I trash on React calling their users fanboys. People use whatever framework they feel good with.
/u/wesbos has a good series on javascript, with 30 different lessons that walk you through some applicable things. [Here](https://javascript30.com) is the link to that.
Thnx im doing it right now,almost finished.
That the concepts are much the same is really my point: vue is introducing a microlanguage, defined in html attributes, for syntax that already exists in ecma. React lets you keep things more strictly fp, because you manipulate data the same way everywhere in your app. Any mapping, filter, reduce, etc array methods I have defined can be cleanly chained in, and my static analysis doesn't require understanding what's really 3 languages now: ecma, html, and vue. React is little more than a handful of lifecycle methods and a nice vdom. You're also pointing out how vue has an advantage because it's closer to approaches used pre-framework, which is again my point that the appeal of it is familiarity. Jsx is still nice for people -- personally I was on it for many years, and really began with what I'd consider Facebook's spiritual predecessor to it XHP. It was amazing because ecma used to feel pretty clunky as a declarative language. Since then, ecma has improved leaps and bounds in ease of use declaratively. Object and function argument syntax is much nicer now (rest, spread, implied prop names, trailing commas, variable prop names, to name a few) and I'm seeing way more jsx out in the field that would probably be cleaner without the jsx. Eg &lt;Foo bar={bar} baz={baz}&gt;Hello&lt;/Foo&gt; Or maybe &lt;Foo {...{bar baz}}&gt;Hello&lt;/Foo&gt; Instead of just h(Foo, { bar, baz }, 'Hello'), We see this much more since redux style thinking has taken over, since we often have one big controller component at the root that manages a state, and passes these down as props to stateless components. I think right now it's a matter of personal preference, and the big style guide (Airbnb) being jsx based definitely nudges a lot of devs to use jsx. I mostly just question if there's enough of a benefit to warrant transpiling, when you can have clean, readable, declarative components built using standard ecma syntax. YMMV of course - I'm not super opinionated on this, since it has no effect on how I integrate with other modules or vice versa. It's also trivial to switch components to use one approach or the other. 
[This](https://flaviocopes.com/sample-app-ideas/) looks promising. [One more](https://github.com/tuvtran/project-based-learning#javascript), If you still have more time. 
how bout generic\_container.removeChild\(Name\) and then generic\_container.appendChild\(Name\) I'm not really too experienced, but maybe this helps?
not as far as I know, but you can remove then append, and if you need to maintain order, you can add each inside its own div, so removing then append inside that div it'll act like a replacement... you could even wrap all this in a functionthat detects the parent of a passed element, removes parent.thatElement, creates a new element then appends it to the parent with one function call
I just realize I can do a: Generic_Container.innerHTML = ""; Generic_Container.appendChild(Name); In anycase, I DO appreciate you trying to help, THANK YOU :D 
&gt; If people use Vue over Rect that's obviously because they are winning there. Or because they don't know better and fail to see the big picture. There were reasons for every single outdated library and reasons why people left looking for better alternatives. &gt; I love VueJS because I can't stand React stuffed code (just look at any render function, my God...) Seems very general to me. Apart from DOMish attribute names, a simple render function is indistinguishable from HTML and doesn't require anything but Javascript. Even JSX is optional. No template language to learn, no gazillion attributes and overall small surface of stuff you need to learn. props =&gt; &lt;h1&gt;Hello { props.user }!&lt;/h1&gt;; just horribly complicated.. 
I just realize I can do a: Generic_Container.innerHTML = ""; Generic_Container.appendChild(Name); In anycase, I DO appreciate you trying to help, THANK YOU :D 
There is specifically a replace child, https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild You need to get the node to do it, so if you just want to clear all nodes, you're existing option of `.innerHtml = "";` is probably better.
I replied to add to the discussion. Clearly a mistake.
[removed]
The summer is coming i have all the time.
Confirming this. In the last year since I've picked up React, I've learned more about Javascript than in 4 years writing Angular apps.
Try a different browser or browser version.
I believe he meant VCS (version control system)
This sub Sucks because of questions like this. 
I assume based on the statement that we're talking about Angular 1.x. My work also was heavily involved in that space. We've since almost completely converted to React. In hindsight, the biggest thing is probably complexity. We love being able to create very small components that have very clear reusability and are easily tested. There was so much boilerplate to do that in Angular. Also, looking back, there's so many things you end up injecting with Angular. But we're nearly all plain React and don't feel that same thing. The build system in Angular was needlessly complex too. We use create react app now, which makes that a total non issue. I understand that for a lot of projects that may not work though. We had to sacrifice a bit to do it, but I highly recommend it. I should also say that we evaluated all the major options. Vue was probably the second choice for us, but pretty far behind React. We really didn't want to go back down the JS inside HTML route again after Angular. JSX isn't really a whole lot different I suppose, but we really like the plain JS feel to it in comparison (map, filter, etc, instead of ng-* tags). I really can't see ever going back at this point.
Lower friction than react? I thought so too, but create-react-app is magic
Could you elaborate a bit?
/r/learnjavascript would be the right place to post your question. Also vanilla JS supports get requests
Thank you for the help. I'll head there.
AngularJS, which is the 1.x version, is definitely worse than the current frameworks or libraries. It was a big thing when it was new, but now the time has passed on. Angular, on the other hand, is a whole different beast. It isn't better or worse than Vue or React, all three are pretty equal. It's more about how you code them.
It is not more valuable. Angular is preferred in enterprise because it works better. Js already have too many modules problem, and working in react feels like LEGO building.
I personally use Vue, because it feels lightweight and unopinionated, and tries to get out of your way. The confrontations I had with React gave me the impression that it's the exact opposite of all of these things.
While i agree with you that webpack is better than gulp/grunt.. I would definitely not say it's a breeze to get up and running.. especially if you are setting up a complex application build. I found finding the *correct* documentation for the version of webpack you are doing a little misleading. 
I'm not quite sure what the directive syntax you're referring to is all about, I work on several large Vue applications in production and 99&amp;#37; of it is just components and props, just like React. The only difference is that React wants you to use \`prop={thing}\` for non\-string props, and Vue wants you to use \`:prop="thing"\`. The\` v\-bind:prop\` thing is the old way of doing it, I've never had to use it.
This is a pretty good introduction to a [tool stack](https://medium.com/@peterxjang/modern-javascript-explained-for-dinosaurs-f695e9747b70)
Thanks for this. Best response in the thread. React developer for 2 years and now learning Vue. This helps put a lot into perspective from someone whose vastly experienced in both.
Can you think of something that you see yourself using, or something that would make some task easier? Thinking like this always works for me, also they keep me motivated and i won't abandon the project (easily). Example i wanted track shows im watching but have an app that opens in a chrome new tab. Or i wanted a desktop app that sends notifications for certain activities on github. Currently i'm working on a cli script to generate some templates because snippets aren't enough.
Try to make a modular framework from the scratch, with no 3rd-party libraries. Something close to React, just waaay more simple. Also, read about BEM metodology.
This. And I would also recommend Udemy as a learning center. You can find some really good courses there on these topics for some really affordable prices. I'm always buying there and learning some new skills.
[too complicated](https://cdn-images-1.medium.com/max/800/1*1akEKXC95jhmIudAayITPA.png)
He’s saying the book will be out of date with the technology quite quickly. Certainly by the time you finished learning everything in every one of them. I don’t think it was meant to be a negative statement. 
I agree that this is the single largest issue with webpack configuration. I think it's really what people mean when they generally criticize the documentation overall too. I've helped programmers many years my senior troubleshoot build issues they couldn't figure out not because they weren't looking at documentation, but because they were just looking at the wrong documentation. A really common example that springs to mind is issues with UglifyJS and es6. It used to be required to use something like [uglify\-es\-webpack\-plugin](https://www.npmjs.com/package/uglify-es-webpack-plugin). Now it's built in to [uglifyjs\-webpack\-plugin](https://github.com/webpack-contrib/uglifyjs-webpack-plugin), and so on. In a webpack v4 build, I wouldn't expect anyone to not immediately discover something like this, but it can be trickier across versions and with people unfamiliar to webpack. 
VSCode will have all the plugins you use in Sublime and can even pull in your Sublime settings. The amount and quality of plugins is far better and VSCode includes a lot of features that make it more IDE like, like [type checking in vanilla JS](https://code.visualstudio.com/docs/languages/javascript#_type-checking). Performance was my biggest hold off for a while, but it's actually pretty close now. I don't even notice a performance difference unless I'm purposely looking for it. It's like if you take all the great plugins from Atom and put them on a platforms with the performance of Sublime.
In order of importance my tools are: Git Prettier Eslint-airbnb Editor: vscode
Absolutely love this \- starred.
Microsoft is quickly killing the M$ memes. They are obviously still a company and their primary focus is on the bottom line, but they have been playing nice with others (e.g. web standards in IE) and have been producing some incredible free and open source projects (e.g. vs code). I’d say it’s high time we welcome them back into the clubhouse.
Would love to wrap react around this 😍
*ngFor(let key in columns) seems best to me.
I clicked on this post just to post that link. Glad to see someone beat me to it. 
I switched from SourceTree to [https://git\-fork.com/](https://git-fork.com/), it's brilliant
[Directives](https://vuejs.org/v2/guide/syntax.html#Directives) [Custom directives](https://vuejs.org/v2/guide/custom-directive.html) Nothing like these exists in React, which makes React closer to native in that regard and makes the DSL smaller and easier to remember.
A.) as long as you don't need anything else in that container to keep existing, and B.) as long as you remember... friends don't let friends set innerHTML to user provided input... so don't do it. ( empty string's probably fine though )
Thnx i will look into it
Thnx,
Fair enough, it's definitely not necessary to use those unless you are using some plugins that require them. I like React just fine but I don't think Vue's DSL is big enough to be a major deciding factor, and it could be argued that React has DSL as well. That's just an opinion, they both achieve the same goals at the end of the day.
How easy are React / Vue to pick up if I am already familiar with AngularJS?
I'm pretty sure most of them are downloadable for free as pdf, unless I've stumbled on some illegal copies. 
It's better using nothing than using CVS. You're in the right way!
My best advice is to find yourself a full time job coding and learn from your peers. Find a junior position where you can learn.
Ok, so it’s that you taught prepack about react, not that prepack is now able to understand arbitrary library abstractions. Do you expect this type of thing will become a standardized step in the build process of all React apps?
Prepack does understand library abstractions, but that’s when Prepack is run on a bundle - so it only affects the initialization path. In the case I’m explaining, we want to optimize specific components or functions that don’t get run on the init path. Furthermore, teaching Prepack about React allows us to do neat things in terms of how we serialize out. We can choose to serialize to JSX, createElement or any other format we choose in the future.
If you are coming from Angular. Vue will be a breeze. While it may be a bit of a steeper learning curve, If you are well versed in ES6 React shouldn’t be too bad either. Any reason you’re looking to switch from Angular?
Yeah, I don't generally think "it's not necessary to use those" is a great argument for including something in a language. That said, I have very little experience with Vue but I do think certain directives like `v-if` are quite helpful. I do wish they stood out a little more and perhaps existed before the tag was started to clarify. For example: &lt;div v-if="Math.random() &gt; 0.5" :prop="func()"&gt;&lt;/div&gt; An initial look at basically just the shape of this does not tell me that this component will be conditionally rendered, if that makes sense. To me, whether a component is conditionally rendered is of "higher" importance, than "normal" props. I also can't tell whether `func` is evaluated if `v-if` gets evaluated to false. Compare this to {Math.random() &gt; 0.5 &amp;&amp; &lt;div prop={func()} /&gt;} And I think it's much clearer exactly what's happening. As a bonus, we don't need a special "prop signature" like putting : in front of the prop name to determine whether the property is evaluated as JavaScript or simply passed as a string. I think this makes tooling easier to create and it's easier for the human eye to parse. But, like you're saying, this is mostly opinionated.
If you are coming from Angular. Vue will be a breeze. While it may be a bit of a steeper learning curve, If you are well versed in ES6 React shouldn’t be too bad either. Any reason you’re looking to switch from Angular?
You can use Mobx with React, which is very similar to vuex. Your react apps will get much less verbose.
I know it. I've been putting it of for a long time cause...well, it seemed alien somehow. Guess gotta pony up and get my hands dirty.
Thank you for the help. As far as your FYI: are you saying not to ask questions or be more comfortable doing so?
DOM manipulation is the easiest thing to do in Javascript. If you're a beginner, you likely won't be starting with the most complex app in existence.Learning how to do it manually gives you a better appreciation of what the framework/libraries are doing for you. The amount of junior developers I've interviewed who had never touched vanilla Javascript methods is shocking
i don't understand what you're on about. what would you prefer? two handed shortcuts work because you keep both hands on the keyboard because you type a lot as a programmer. the whole point of a shortcut is to be able to do it quickly. the idea is you hit the meta key with your left hand and hit the command with your right hand.
Although I agree parcel is probably better choice for a newbie, webpack is not a configuration hell anymore. At leas for simple projects. Webpack 4 and up should work with no config. 
So, I was reading through the prepack docs, and it said the compiler can optimize arbitrary functions with `__optimize`, so long as they are pure. My entire component structure is 100% pure, as are all my utilities, save a handful and the single, top level reference to my store containing all immutable data structures. Would prepack’s optimization work on everything in my codebase?
Front-to-back React is overrated, honestly. It's perfectly enough to use React only on the client-side for interactive content, and render static content the good old-fashioned way on the server. Just my opinion. The architecture separation is cleaner, and you get 90%+ of the benefit of using React at 10% of the preparation, set up and hassle.
Have a look at Vectorious
You're right - I definitely need to give all the libraries and tools a try. They do seem to be so many though and I feel intimidated - but I'll dip my toes into each and get wet, just so I get a feel for them. I'm already using some features of ES6 and I tried reading in the past "You don't know JS" - which proved to be a correct title :) - but I do have to get a final grip on the language once and for all. I always fear that one of the quirks that I'm not aware of is going to bite me in the ass. Same goes for Node - I'm using it because of the modules - but I'm barely familiar with 10% of the concepts behind it. 
I'm saying it's good that you asked for help rather than an answer (or not asking at all).
Not everything, as there are still likely bugs we need to fix that are around JS issues. Running it and finding issues (and hopefully providing an issues with a repro) can really help us move forward and fix things though. So, doing that would actually be a great help to us. You might also want to check out `debug-fb-www`: https://github.com/facebook/prepack/blob/master/scripts/debug-fb-www.js#L53-L81 Specifically, using those configuration settings when running Prepack with `__optimize`. These are the settings we currently use when running Prepack internally at FB and might help you too. One of the main things is the `compatibility` config setting. `node-react` or `fb-www` (as in the case of the file I linked above) tell Prepack to use our mocks for DOM, node and a bunch of other things (like making `require` and `module` globals available and abstract at build time).
Oh okay. I was just wanting clarification. I don't like to be told the answer. I love the "aha" moments. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [facebook/prepack/.../**debug-fb-www.js#L53-L81** (master → 0dd23e3)](https://github.com/facebook/prepack/blob/0dd23e364aee386f8ac617e916ae3410bb02d2a3/scripts/debug-fb-www.js#L53-L81) ---- 
Yours is the type of comment that I save to a .txt file in case it ever goes down offline. I will literally save your comment to a .txt file, like now. :D I can't give you gold but I'll give you a deep "Thank You". Can't reply yet to the contents of all the info you so generously provided cause I need time to read it properly, couple of times probably. :)
It is, readability is based on what you are used to reading. I hear lots of opinions that ternary operators are less readable than if statements, which I think just means people may be less used to seeing ternary operators.
I think a good way to think of it if you're familiar with the comparison is, webpack is declarative whereas gulp is imperative. The main idea in regards to how webpack would replace gulp in the task running / file transforming sense is the way it utilizes loaders to do the transformations for you when you run a build command. Say you want to optimize images. ## Gulp Way - Configure your gulpfile according to the documentation of [image-min](https://github.com/sindresorhus/gulp-imagemin) - Run the gulp command to optimize the images, the images get spit out in a different folder, probably your /dist ## Webpack Way - Configure the loader according to the documentation of [image-min for webpack](https://github.com/tcoopman/image-webpack-loader), - When you run a build command to compile webpack it will automatically run the task you have configured with the loader The same relative thing is happening, webpack just keeps everything together, whereas gulp keeps everything isolated. Webpack groups the solution(s) together, ie: every loader gets run and it all works together and spit out together, it bundles everything Gulp doesn't bundle anything together unless you tell it to. 
VSCode has been on my radar for a while now. I even installed it and played with it for a bit. I couldn't say if it was better than ST3 in that short amount of time but there was one thing that really prevented me from doing the transition: the lack of proper VI bindings. I found a package that emulated some features but not as completely as Vintageous for ST3. I felt like missing one hand without all the familiar controls. Still, maybe things got better in the meantime so I'll surely give it another spin, maybe it sticks! :)
No worries man, glad to help
I used to use Sublime for note taking and documentation but I switched to Scrivener and haven't looked back. Nowadays I'm using it for each and every note taking or project documentation endeavor - it's waaaay superiour to tools like Evernote IMO. 
Rofl! Yeah right. When I want to beat someone in chess I play nice too. A threat is easier to subdue disarmed. Playing nice never reflects intent so it's not a good measure for that. Most likely, they are using it for positioning against competing tech. I've been a staunch Linux user for many years, so I certainly have bias here, but frankly, I feel I should be biased against them on moral grounds. The had their chance for trust, have been weighed, measured, and found wanting. 
You’ll be in for a pretty hard transition. React is only a tiny fraction of what Angular provides. So, you’ll need to not only learn react but also decide what other components to integrate to create a full fledged app. For example, you’ll need something like Redux to handle state. But, you could also use any number of Redux alternatives. 
Have not used Vue but have done all my recent projects in React and would keep doing so until I find a reason otherwise. I love React's declarative API and logical structure
Hey, thanks for mentioning testing. In the past I played for a while with C/C++ and C# and have stumbled upon TDD. I think it's a great tool to have in one's arsenal - there are times when I change one thing somewhere and the way I test that everything else works is by running the app and see if I encounter errors. Obviously it's bad practice. But I wouldn't know how to begin doing TDD in my day to day coding. It just seems cumbersome to have a test for every function - in a way it seems like I'm writing the code twice. So I'm guessing that maybe some higher level tests would be a good compromise or maybe just some critical components. How do you use it in your projects?
You're right of course and I might get a job in the industry in the future. But in order to get that job I need to ALREADY know most of the things I'm asking about here - so it's like a catch 22. But all things considered I agree: working with other knowledgeable people it's a great learning experience
I would start with React, because it is simpler. It also encourages a better, more functional paradigm overall
Thanks for mentioning ESLint. I think I had it installed once but it annoyed me cause it worked badly with Node.js "require". Altough I could've tweaked the settings probably. Anyways - it's a good reminder and I'll look into it again - it never hurts having an extra pair of eyes to check one's code, even if they're note exactly eyes. :)
That's the thing - I've already worked on quite some projects and like you said it teaches you how to think in terms of designing the app. But projects have grown large and unmanageable lately - and no amount of refactoring is helping much. It's just time to learn more advanced ways of doing things I guess. 
They aren't. Companies which aspire to have a proven, reliable framework for large teams to build long-lived, large applications, will be drawn to Angular. Companies which aspire to ship software quickly and cheaply with inexperienced developers, will be drawn to React. 
What do you mean breaking it into parts via the semi colon? What is stored in the cookie? Try something like JSON.parse(cookie) to split it into a usable JSON object if thats what you need
Yes, public code does sound scary! :) I have some modules that I intended to share with the community but I'm a bit ashamed of them - they work but sometimes they are not elegant/polished. As for private repos - I do have a bitbucket account - I think they offer private repos, not sure though.
Because people and their workflows are different. I wouldn't use a separate delete line shortcut. Selecting a line and delete is fast enough. Ctrl/Cmd-x is also extremely fast (tho it has side effects) VSCode's shortcut is ctrl/cmd-shift-k, which is one-handed for all keyboards that double the modifier keys on both side of the keyboard. &gt;but I don't get how a company ends up investing so fucking much into Usability &amp; UX, but they have such CRAPPY shortcuts. &gt;And literally EVERY editor/ide is like that. Could this mean that literally almost everyone else has different sensibilities than you on the keyboard shortcuts? Finally, most editors have keyboards shortcuts freely editable for as you like. A good editor UX is when it has the flexibility to support feature what most users would imagine they need, sensible defaults and good documentation. You can't ask for an editor that's created by reading your mind. 
What if you were to create a class (where you put common code) which would be extended by both of your component classes? 
If I was still a small time PHP Laravel developer, I'd probably go with Vue. Its familiar and better to integrate into the workflow. But I mostly work with SPA's and apis nowadays, so React is much better for that. I also love JSX.
The project I had in mind (but don't have the time for, sadly) is a webapp that stores some images. When you upload new images, the webapp compares them to existing ones and tells if you there are any major similarities. At this point, you have the choice of continue adding the image (in case a false positive) or delete the new image. Image comparison can be done efficiently using perceptual hashes. When the app starts, you scan the image directory and generate a perceptual hash for every image, storing it in the database (e.g. Sqlite3 file). When the user add a new image, you generate the hash for it, and compare it to hashes in the database. Do you think you can try that?
Injecting same service into both.
I used vue for years before touching react, I love them both but react wins for me. Just to point out something I haven't seen here – Preact is a 3kb drop-in replacement for React — vue is smaller than React but doesn't come close to Preact. 
Finding the actual problem is of course, ideal, but if all else fails... The old try catch might help. Not too familiar with the libraries but you can restart in catch after validating that it has crashed. The libraries might even have an “on error” callback 
I wrote a blog on this exact topic: https://medium.com/@kylemh/yet-another-react-vs-vue-article-a47b5946f1eb Lemme know if it helps you!
You could try building something with the Spotify API, if that sounds interesting to you. They give you access to more or less everything on their platform, although you only get access to 30s previews of the songs. You could start off building something fairly simple that just lets the user search for an artist and then shows that artists info, but you can keep building it up and more features to it. You could basically rebuild their web client if you keep adding features to it lol. 
pretty easy? Let's see how I would fare with it: ```vim``` Oh, here's how I get help: ```:help``` Let's see, move cursor to a ```|tag|``` and hit `Ctrl-]` to enter that link. Doesn't work. Well, ] is difficult character to write, so maybe I made a mistake. Let's see, first `:` and then alt-9. And it shows up as ```:]]]```. That the help in vim is so broken within first 3 minutes if you have a different keyboard layout tells a lot of how much they value new users.
You should look into AIML. It's a language made for this.
i use the mouse here and there. it's weird that i really seem to be the only one in here that hates it. compared to eclipse, it is so much worse imho. i mean, why no one handers for the most common shortcuts? sure 2handers work too, but that's like saying "why buying a macbook over a windows for fouble the price, when windows can do the same stuff". statement is true, but for some reason, apple is booming like nothing else.
[Go Vue](https://medium.com/@Jaesung2061/if-you-havent-jumped-on-the-vue-js-train-yet-it-s-time-to-jump-on-the-vue-js-train-3530c28c329d?source=linkShare-376541556ddb-1528058237).
I chose React and am starting to regret it. I love working with React, or rather, I *did* until they started aggressively deprecating parts of the API that I was using. One thing that makes Vue particularly appealing is that there is no company involved (e.g. no Facebook, no Google) so you are getting the thing the community needs rather than something that a company made and are "letting you use".
Looks like you got a \[shout out for the great explanation\]\([https://twitter.com/youyuxi/status/1003366017840631809](https://twitter.com/youyuxi/status/1003366017840631809)\) :\) Congratz
Webpack may seem complex but it’s really worth spending a little time learning it (people overstate the config complexity). There’s a huge ecosystem around it and you’ll find loaders/plugins for nearly anything you can think of. Other bundlers don’t have this advantage 
&gt;measured, and found wanting does it also get divine shield whenever you target it with a spell? 
Try the content security header. Content-Security-Policy: frame-ancestors 'none'; https://content-security-policy.com
All fair points except that Prepack is something than can be used with many packages during the build step. I don't see that having a small /dist package really means that much since Webpack will want to build from raw source. I don't follow Prepack all that much so I'll admit that it could be that the React team is changing their code around to allow increased optimization from Prepack but any framework can do that. I wouldn't even be surprised if Webpack 5-6 simply has a "prepack" configuration key for turning it on and it might even be a default someday for the "production" mode. Its cool but unless I'm missing something I don't see how it is a React selling point. &gt; Fiber is bringing native performance to the web We'll see. That sounds like a bold PR claim to me though.
\&gt; aggressively deprecating parts of the API that I was using Do you mean componentWillMount, componentWillReceiveProps, componentWillUpdate? If so, this is the part of what the community needs to get async rendering working.
I'm out. Back to sourceforge! /s
Then change your key-bindings. And yes, apple is booming like nothing else, but maybe that's evidence that your arguments are a tad simplistic &amp; aren't accounting for certain things that other people see as beneficial.
I've found Vue to be incredibly fast out of the box. I only ran into one huge issue where I was bringing in thousands of records and I needed to perform calculations and/or transformations on them. These calculations ran dog slow if I put huge new batches of data into the store first because each property is then accessed through a function. So I broke that logic out to perform it on POJOs for the new data and on the store state object for existing data. I figured out that existing data would only need to be referenced this way for dozens of records. That was pretty late into my app though and it only took a few days to remedy that. So in the future if I'll be dealing with something that can return hundreds or thousands of records then I will just try to think about ways to use the POJO data first before I put it into the store instead of accessing it there the next moment.
Woo! In all seriousness, it's nice just to be able to dispel some misconceptions and talk about the details that make a significant difference when working with these tools.
Hm.
The matrix is too powerful for a JavaScript library. You need something stronger like Rust.
You can also try Turbo360, they have a wealth of video/tutorial ideas along with walkthroughs in case you need guidance. For a more intermediate project, you can try their newsfeed app at (https://www.turbo360.co/tutorial/news-feed-app)
That can't be real
Please no.
Are you having trohble paraing cookies, or retrieving? Parsing, there are many libraries about that. Accessing is another matter. Maybe you're not aware, but where (your code about reading cookies) runs. All of this to make you look if your cookie related code runs browser side, and your cookie has HttpOnly flag set. Check at the initial Set-Cookie HTTP response, if it has this. If so, it's good. Because session cookies (i.e. a random hash used as proof of authentication) can't be stolen by other script from same document (e.g. any other script not maintained by author). Hope that puts things, you didn't think of, in place.
Embrace (open source software), extend (control by acquiring GitHub), extinguish (yet to come)
What a disaster that would be. 
I thought the TS story for Vue was pretty good, but I’ve only browsed the docs, not tried it in production . As for TS in React I assume you’re referring to some of the create-react-app Typescript forks?
Doesn't sound serious. 
¯\_(ツ)_/ ¯ 
I'm not that used to styled components, but that could potentially be workable. If the styling variables that you need for your typography and color scheme \(for instance\) are exported from a javascript file rather than a CSS file, then parceljs will properly handle dependencies and your variables will be available. The main issue is that parceljs renders all CSS files in parallel, so if you have any dependencies between them, then that won't work.
I've learned some vue from youtube but never heard of DSL, what are those?
Haha, they did that for so long, it's a good observation. Am I a sucker for thinking MS has actually changed course and realizes open source is the future?
the SFC clarification is definitely important. As a react dev, I initially read it as Stateless Functional Components and was fairly confused.
Maybe Github will finally get their shit together.
I expect Github to become more buggy and unstable over time. 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Please don't 
&gt; Try them out for yourself and see what you think. I can't stress this point enough. Every time I have tried to take a short cut in making technical choices by only reading articles and asking other people for their opinions, it has been a mistake. Research is important, and you gave a great starter list of things to compare between the two. But then you just have to try both. It shouldn't take more than a few days of trying each to understand which one fits your style of programming better.
I want to believe. But instead I'm doubling down on an internal gitlab repo might even revisit fossil. 
This isn't that bad ladies and gents. I grew up hating MS but they've been good contributor's lately. VScode is a great product and they've open sourced a ton. I'm hoping they figured out a few years back that their closed source nickel and dime nature wasn't working for them. 
I guess I'll be moving all my repos to GitLab :(
Horrible news. Hope everyone moves to the same place.
Clearly buying GitHub shows they have not changed. Going to be a hassle but everyone will move with big tech and big projects first. Hope everyone goes to the same place.
It's nothing about open/closed source. For me it's that when MS takes over things they tend to mess with them until they suck and die. Then, hey whadyaknow! There's a new MS suite that's available to take it's place. I just plain don't trust them not to meddle with something that I enjoy and use a lot.
What issues do people have with Atlassian's Bitbucket? I've never gotten on the Github train for my personal projects, as Bitbucket has been great.
yeah webpack has gotten a whole lot easier; of course if you want to do more complicated stuff (minimizing/uglyfying, optimizing, sass/scss, styles compilation), you gotta configure it but you have to do very little to none to just get it going
What is wrong with github?
A DSL is a Domain Specific Language it is contrasted with a General Purpose Language that can be used in a variety of different contexts. It is basically just syntax that is specific to whatever or wherever you are using and cannot be used elsewhere. A DSL could be something with a broad application such as CSS or HTML or it could only apply to a specific piece of software. In Vue's case the DSL is just the syntax that is unique to Vue such as Vue Directives: v-if, v-for, etc.
Thankfully I use bitbucket. You know that free unlimited repos service? I find it incredible that anyone would use github. 
amongst all the other things people mentioned intellisense is a pretty great feature
great, we have fanboyism for web dev front end frameworks
None!
\- Slow \- UX not so intuitive
Let me preface by saying I’ve been a long time supporter of Atlassian. Loved their stuff for a long time, but the last UI release to Bitbucket is an absolute nightmare. Every time I try to find something that I knew where it was before now, I have to think, “where’s the most unlikely place for it?”
I don't think it will be that bad. Microsoft 2018 is not Microsoft 2010. They have really changed three image (in my mind) over the past 2-3 years. The work with Typescript, VScode, .net core and Linux. Hell they even dropped IE....
What could possibly go wrong?
try GitLab 
What are the alternatives? I mean, other than Gitlab and Bitbucket.
One example of that’s is Skype (and Skype for Business) 
I prefer bitbucket just because its free to host private repos and have small teams work together on it. Not sure why github limited the free aspect of their platform only to public open source stuff. Great cause i guess but most people arent working on free software.
lol sourceforge are currently [trying to remind people that they exist](https://mobile.twitter.com/sourceforge/status/1003379401541726208)
Or Minecraft..
\&gt; they are using it for positioning against competing tech To which I refer you to: \&gt; They are obviously still a company and their primary focus is on the bottom line Every single major tech company is the same in this regard. Facebook, Google, Amazon, Apple, Microsoft, etc, etc, etc. The point I'm trying to make is that at least Microsoft has started giving back to the dev community in the process. It no longer makes sense to say "hurr durr it's a M$ product so it sucks" because they're actually doing some great shit now.
The deal maker for me is that with React, JavaScript is your templating language. I already know JS, so that's a huge win. That is the major difference between React and all of the other frameworks out there, which require you to learn their DSL. The other thing about React I really like is it will make you a better programmer. The guys who wrote React are at the top of their game and React is largely responsible for making functional programming concepts popular in the JS world. These guys really know what they are doing, their thinking is very clear, and you'll learn new ways of thinking about programming from them. A little history - I have been developing web apps for a long time so I have had to learn many templating languages, DSLs, and frameworks, and they always fell very short in one area or another. Hi Backbone! If they hadn't, I probably would still be using them. But they fell out of popularity for good reasons. I was also convinced that it was wrong to put HTML inside my JS. Which kept me away from React. And then someone insisted I just try it. I have never looked back. I doubt I will ever go back to an approach that tries to turn HTML from a simple declarative markup language into a programming language using directives and a DSL. I just don't want to learn yet another DSL. I'm sure I'll try Vue.js soon though just to make sure. But I'm already pretty sure. This is just so ugly to me now: HTML file: ``` &lt;div id="app"&gt; &lt;span v-if="seen"&gt;Now you see me&lt;/span&gt; &lt;/div&gt; ``` Now I need to look in another file to see the JS: ``` var app = new Vue({ el: '#app', data: { seen: true } }) ``` Why do I need to learn `v-fi`? JavaScript already has an if statement. Compare to the same solution in React: HTML is just a skeleton on which you mount the app, nothing to see here: ``` &lt;div id="app"&gt; &lt;/div&gt; ``` And then it's just vanilla JavaScript which I already know: ``` const Seen = () =&gt; { const seen = true; if (seen) { return &lt;span&gt;Now you see me&lt;/span&gt;; } return null; } ReactDOM.render( &lt;Seen /&gt;, document.getElementById('app') ); ```
Understood! Thanks
How exactly did the fuck up Minecraft? They rewrote it, while still letting the Java version co-exist, and helped distribute it on other platforms. 
Skype for Business is Lync. Also, let’s not pretend that Skype wasn’t trash before Microsoft acquired it. 
Really? Lerna's [creator](https://www.reddit.com/r/linux/comments/8nztqi/i_think_its_time_i_publicly_shared_about_how/) has something to say about current day Microsoft.
Last time I looked at it the interface was horrible compared to GitHub. And because GH were the first to do it well, that's where most open source projects went, so that's where I stayed for public and private projects. $7/month is nothing in the grand scheme of things. 
http://2ality.com/2011/12/fake-operator-overloading.html
The UX is simply awful to the point that it's a nightmare to use. Gitlab for me is by far the best. 
I'm kinda allergic to their design.....I kinda like GitHub for now.
It's okay, a lot of work has been done in that area and there have been a lot of recent improvements. I haven't looked into it in too much detail outside of messing around a bit but as far as I understand it, Vue's object based API makes it more difficult for a typing tool to do its job. Obviously it is in Microsoft's best interests to ensure TS works regardless of what libraries you sue so I'm sure it will continue to improve. The current situation requires quite a bit of setup and a few extra packages for the best experience (I'm not sure what the TS/ Vue Cli 3 situation is, that may have improved things a lot). React's class based API just make type checking easier for tools like TS. All this said, I think Evan mentioned recently that typing tools will be considered when they take another look at the API for 3.0, so we can be pretty confident that things will only get better, and like you say, the TS story is decent at the minute, its just more difficult due to the object based API. I haven't worked extensively with TS (with React or Vue) so I'm a bit blurry on this. 
Yes. 
All atlassian products are designed for aliens. They are fine with this UI/UX.
They did it so they would have enough money to support a free model. Don't mistake the costs Github makes for all those open source projects. Many package managers are working with Github and everything is automated but that doesn't mean bandwidth, storage and hosting is free
Sorry not up to date on this (Lerna). I will read up before commenting.
Well GitHub is hugely important to open source. And I think Microsoft is the top contributor in the world to open source on GitHub. So the problem for me is that the purchase makes sense if they have good intentions or bad intentions. Really hard to guess. I haven't been able to stand the company for decades, but I think they may have turned a corner. Let's hope.
Please nooo... Github was the awsomest thing i discovered helped me with a lot..i basically deployed my first website for free because of github
I’m a little worried but I’m trying to be cautiously optimistic. I feel like Satya Nadella has overall done a great job since taking over Microsoft and they’ve definitely changed their culture to embrace open source more (e.g. great projects like VS Code, TypeScript, etc.). I just never personally cared for their CodePlex site (which granted was way better than Google Code at least) and I wish we had more independent companies instead of most everyone selling to a big company but that’s just personal preference. 
Interesting to consider Atom’s future, since Microsoft already has vscode.
What you are referring to as "open source" is actually Microsoft.
I just think they went about it weird is all, Bitbuckets business model seems much more useful to small time devs. They didn't need to create all the extra costs of bandwidth by running a free hosting service as well, just stick to source control. Something like high 90% of projects go no where or fail, its good to have a free playground until you get to the point of needing more. I just don't put money into software until its earning me more money back so maybe I'm different than most.
Github is the least useful application that I am forced to use.
I've interviewed two separate times there. The first time I got the job, then after leaving years later I interviewed again. I did not get the job. The first time they just ask me to solve some sort of puzzle. Marching ants I think its called. I only talked to a couple of people and I got the job because I knew XML and XSLT which nobody knew \(this was back in 2004 or so\). The 2nd time was around 2008 and they had moved away from XML to javascript. But they had one of these alpha millennials jackasses who was more interested in texting on his crackberry than interviewing me. I almost walked out, but I saw a few people I had worked with previously who were still there so I said hello. I didn't get a callback.
Sourceforce was always that place with the shitty bundled downloads.
Yeah this is a mess. But to be fair, MS deserves some credits on their recent open source projects.
I hear ya, but that's what I disagree with. Why does M$ giving back have any weight or meaning at this point? I don't particularly trust the others you mention when they play nice either. M$ has just been the least trustworthy of that set over time, so it makes no sense to me to give them any benefit of the doubt at this point. Great claims require great evidence (over time.) I'll peek over my glasses if they open source and GPL the OS and their office suite, standalone and server hosted versions. Until then, they may as well hold their breath. 
And only available through the Windows Store somehow...
This was GitHub’s chance to become legendary. If their response had been “We stand for free and open-source, and our values can’t be bought out” they would have done irreversible GOOD for the community. They could have doubled my $7/month fee (or added another tier). Instead, like most of the brands here, it’s money first. 
I'm talking about Angular 4. The developers in our support group use the Visual Studio starter bundle: IIS, ASP.Net Core, MongoDB, and Angular 4. (I think that is what comes with the starter.) I am working in MEAN (MongoDB, Node, Angular 6, Express) because I don't use a big IDE and just use VS Code. NodeJS and Express is not the best for a web server because it is single threaded and Mongoose sucks but it lets me throw it all into Docker easily.
I agree 90%..but I do prefer bitbuckets interface for pull requests/checking diffs
Motherfucker.
It's quite frustrating how the documentation gap makes the gulf between these fairly similar tools seem much larger than it is. Vuex/Vue docs are so easy to follow. The Mobx 'Hello World' I had to read three our four times. 
Aren't those the main alternatives? GitLab seems pretty nice.
Attending charity events doesn't make someone a good person.
Clearly not turned a corner as they are buying GitHub. Which is suppose to be neutral and why we had Google, fb, Amazon all use. Now they will not and move. None would have done this. MS doing it shows they have not changed.
It's a little bad. Skype, anyone?
Did you write that from your MacBook™?
Yeah, Atlassian is garbage\-tier UI\\UX. Jira couldn't a bigger mess if literal children had built it. 
I have some unpopular issues with all of those. Another interesting bit is okay technologies backed by large companies like Microsoft and Facebook seem to gain a lot of traction in tech areas, more than I think they warrant. There is a lot of advertisement and bandwagoning going on.
Not sure why this is being downvoted, you are right.
vue-cli vs create-react-app; vue-cli everytime. The improved vue-cli currently in beta will make this gap even bigger imo.
I'm using gitea.
That's why they closed Codeplex at all?
I lament this. I lament this so hard. I love atom. It's such a hackable text editor, and it has a slower learning curve than other hackable text editors. I know it gets shit for its RAM usage but end of the day my convenience can warrant a hardware upgrade if it becomes an issue.
ugh, that is the worst! I interviewed with Walmart a few weeks ago and I had similar experience. The guy was typing away on his laptop the whole interview as I was explaining my approach to solving the problem he asked me to. I got the feeling that he had already made the decision to not hire me by looking at my face when he entered, so he spent rest of the interview working on his sprint stories. It is very counter intuitive. Also I started second guessing my approach thinking... I must be doing it wrong since he is not interested! Anywho... thanks for sharing your experience!
no but doing good sort of makes you a good person
MS is competing with github though. Github will be murdered. MS bought MSN. And killed it in favour of Skype. Many lament that there still isn't something like MSN out there! Github competes with MS in github vs bitbucket, and in atom vs vscode.
Yes. Is your point that I am somehow a hypocrite because I hoped for more of an open-source hosting site? I don’t think we are comparing Apple™️ to Apples. 
It's confusing to use, they added paid mods, and they released a windows only version and mobile version both of which are really shit. They're fragmenting the user base, and being really greedy.
I've heard of gitlab
UI is better. Githuv also have a really dope open source push, so there's a lot of really cool things to explore or contribute to. Their search features are really good too.
I don't know about all the file-loader edge cases you may have for your use case but it has worked fine for me importing assets. Also styled-components works great since it's just JS library that handles all the CSS style injection for you, and is also the only thing I've used for styling when using parcel for my own small projects.
Oh fuck I just realized Electron is a GitHub technology. 
They are a publically traded american company. Even if you feel some of their decisions have not been bad that is a fluke. By history's standards they are too big a company and should be broken up again.
Others have already responded with a list of the tools and what they do, so I'll try to add on to that with some other thoughts. Another way to approach this is to ask yourself what current problems you would like to solve with your current codebase. Just for example, if your codebase is big and complex, would it help you to create many experiments with your existing codebase, totally refactoring the code one way in one version, and then refactoring it different way in another version and then incorporating some of those changes from each version back into the main codebase? You need Git. People make the mistake of thinking it's about source control and going back to previous versions. But the real killer feature of Git for me is that I can instantly create a new experimental version of the codebase every time I have an idea I want to try out. One more tip with Git: learn about and choose a simple Git workflow before you try to learn just individual Git commands. Once I discovered the concept of workflows, it gave me the framework I needed in order to understand why I was using each command. In fact, I think you'll find that a lot of these modern tools are about workflow. Another important thing to cosider is that some of these tools only take a few hours or days to learn. I wish I had known that ahead of time, because my fear of steep learning curves and complexity kept me away from stuff like Babel and Webpack for too long. Finally, there is nothing wrong with learning a tool and then deciding it doesn't have much to offer you. But having an informed opinion about why you don't use a tool, rather than "I have never looked at it", is the mark of a "proper bad ass JS war dog". For small experimental projects, JS + HTML + CSS might just do the trick.
I feel like someone took a dump in my coffee right now
Do good in the spotlight and highlight it, and say the bad was a misunderstanding or a fluke when someone accidentally peaks under the carpet
However the font color changes are easier to read. But yeah... Hard to find stuff for sure
Goddamn it... I love my Atom. She's not the fastest, but she sure is dependable.
I don't really see much difference. If you're coming from a web background the first might be easier to get. If you're coming from a purejs background the second might be easier.
Oh, Atlassian can't UI/X worth shit. JIRA used to be beautiful and interactive, now... Still, I've use the bucket for many years now.
Took me a while but I like the fluid design of gitlab better. Give it a shot! 
It's difficult, because as someone who started out by default against TypeScript, VSCode, and React for the sentiment you feel, I've come to accept each as somewhat subjectively the best at what it does. These projects are legitimately very, very good. I wouldn't go anywhere near them if they weren't open source and easily forked.
Given JIRA and Confluence are Atlassian's core products it scares me to think what BitBucket's UI is like. I've never used.
If only git was designed in such a way to make moving easy.
&gt; React will ask you to rethink everything you know about styling Disclaimer: I've never used Vue, but I'll try to contribute something helpful. I don't think React asks you to rethink anything compared to styling, at least nothing more than I would imagine Vue does. The only concrete different thing that React asks you to change is `class` -&gt; `className`. Everyone else is the same. Then, the *ecosystem* has introduced some newer takes on styling, like Styled Components. Personally, my favourite is CSS Modules which still feels so 'normal CSS' to me. The scoped CSS in Vue's Single File Components still requires you to understand and learn a new way of how styling can work.
Community. That's the biggest part for me.
I suppose that's true. However, as Vue is implemented in entirely JS, the second is "more valid" and I guess that's my opinion. 
When it got bought out the president of the new company did an AMA on that stuff: https://www.reddit.com/r/sysadmin/comments/4n3e1s/the_state_of_sourceforge_since_its_acquisition_in/
GitHub Windows Edition with extra features (ala Minecraft).
do tell / link?
Just out of curiosity have you tried vscode? It has an extensive plugin system as well. So I'm curious what, if anything, is vscode lacking in compared to atom's hackability?
Honestly for enterprise we've found running our own instances of gitlab to be the best solution for us. We don't expose them to the internet in general, we instead require a vpn to access them so that in case there are any zero days we don't have to worry about people targeting us. Its got nearly all the features of github, only one that it doesn't support last I checked was MRs from one fork to another of the same project. Keeping it updated is pretty simple if you're running it on an ubutnu box, you just re-run sudo apt-get install gitlab-ce and it migrates everything to the latest version. I have had that fail on me one time, but found others had the same issue and had commented on how to fix it.
GNOME just announced they moved to Gitlab - https://www.gnome.org/news/2018/05/gnome-moves-to-gitlab-2/
&gt; I wouldn’t go anywhere near them if they weren’t open source and easily forked. And that’s what makes them good.
damn! that was fast 
Pretty sure Skype sucked pre-acquisition.
Okay, that's true, it's not React that asks your to reconsider it specifically, and you're right it's only the ```class``` =&gt; ```className``` that changes. But certain patterns have emerged over the years and css-in-js solutions have become popular with styled-components being the current favourite. I don't really have an issue with this and it wasn't meant as a criticism, css-in-js is incredibly powerful and some of the other solutions are great too. Managing your CSS is probably one of the more challenging aspects of working with React, not that its complicated in itself but the range of options can be very daunting.
It's far worse now, before Lynn was rubbish but basic and functional. Latest Skype now is slow and unresponsive, especially noticeable when you remote into your machine 
I am neutral on typescript. The fanbase irks me a lite but it is a useful technology for those who have preference. I just don't like how pushy some are about their preference. To be fair I've never used VSCode. It could be good. From what I've seen the GUI irks me because it is not as flexible and I have nothing but love for Atom so I have not explored VSCode. React on the other hand... I have tried and tried. Must be 8 times now. I've read articles, pros and cons, guides, even tried to set it up a couple times but it just annoys me so much, and I've even joined various chat groups and had talks with people about why they like react and what they get out of it (and I prefaced this every time with 'I want to like react because it is is popular, however I seem to be having issues personally adopting it'). However, my issue is... My stack is so much easier to setup. So much quicker. There's no vagueness in the debug. There is no hand holding/being constrained into a boilerplate framework that would add time or needless logical constraints. There's a hell of a load less files too. And all the pros of the framework I have already figured out with my own stack, so I can only see cons. Of course any time I've been honest in these chats with people about react people get very belligerent: "why are you here if you don't like react?!"... Really? I'm reasonably sure that it is not powered by logical people but by emotional people just following a popular trend.
That was decided a very long time ago
Can I use this web app to write custom indicators/strategies and automate my trading?
For me, if you compare the trajectories between Atlassian and Github, they've achieved entirely different things. I've heard from friends at GH that they had worked on and finished entire suites of tools for organizations and just never launched them. I wish we had seen GH become the entire operating system of development organizations. Right now it's the primo destination for OS projects. I would personally want better tooling around project management, deployment, CI, etc. This has been the model of Gitlab because GH failed to do so.
Why? I understand the differences in the frameworks, but what makes vue-CLI a superior scaffolding tool?
What exactly do you think Microsoft is going to do with github? Make everyone charge for the code they put on there? 
Omg, this is exactly my thoughts \(in different thread\). I really consider them as probably a good thing, even though I use only linux.
Yes, there are features that I love in atom that cannot be implement in vscode. For instance [semantics highlighting](https://github.com/Microsoft/vscode/issues/585) or [elastic tabstop](https://github.com/Microsoft/vscode/issues/3932).
Yeah this. I just really hope they don't try to turn this into \[team foundation\]\([https://www.visualstudio.com/tfs/](https://www.visualstudio.com/tfs/)\)
That's before plugins get involved. To call jira a piece of shit is an insult to literal pieces of shit. 
Well after the way they force users to upgrade with malware style tactics and added all the “freeware” shit on windows 10 it’s hard for me to see they have changed much. 
This is what I'm most worried about.
It got much worse after. 
I've been using Jira for my last three companies and I still don't know how to navigate the damn application.
Don't get me wrong CRA is good. Personally I find CRA slightly less transparent and potentially overly simplified. Invariably you want a degree of customisation in tooling -- the new vue-cli makes that very smooth --- and doesn't give any ground on simplicity if you want it eg. ```bash vue create myapp ```
&gt; Yes. Is your point that I am somehow a hypocrite No, my point is that you *are* a hypocrite. lol. Championing open-source initiatives and virtuously stating *"it’s money over values"* from behind severely proprietary Apple hardware is nonsense.
I have not, to be fair. I could and get back to you. From a distance it seems to behave like eclipse to me. Atom's strength was how easy and extensive its plugins can be (I don't think there's anything they CAN'T touch), hell I have changed the CSS on a plugin (didn't like the font face) with one file earlier, and the file is a couple clicks away in a menu. Atom has an element inspector and everything. From a distance the thing that turned me off from considering VSCode is that the layout was pretty static and not designed in the way I like my system to be setup/is most efficient for me to work in. I also had Atom where I could find every plugin or make so why bother.
[Embrace, extend, and extinguish](https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish) is a documented MSFT strategy for eliminating competition. 
AI - The ease of access to the entire design/development process for every piece of software on the platform. Access - That they’ll somehow hate access behind the Azure platform. Future - That it’ll be the next Skype. 
The mobile version of the game - and even the console version! - predate Microsoft’s acquisition. That was all Mojang.
Have you considered getting yourself a puppy? They are lovely
Still faster not to.
We’re somewhere between Embrace and Extend. We’re supposed to be applauding and feeling less uneasy about them. There is an agenda to this move. It wouldn’t make much sense to buy them if there wasn’t. GitHub will probably be largely unchanged for a while because MS needs to keep building good will. But in the long run, I don’t see it being positive. I have no good reason to trust Microsoft, and LOTS of well documented reasons not to. 
Look them up on glassdoor
Old confluence was great. I just started at a new job and they have the newest version of confluence, it's so bad.
Well you better have written that from your Libreboot T400 running Trisquel Gnu/Linux and Ice Weasel. We can all support free software without being Zealots about it. 
Yeah fair. I agree though the thing about templating type langs (eg jinja or pug) is that their arrtraction is that seem readable but then you try and write them and you're deep in the docs. Mind, I don't think you're entirely immune to that with React.
Its totally rude to not give the interviewee your undivided attention. Only a jackass would do that.
Championing open-source initiatives while virtuously stating *"it’s money over values"* from behind severely proprietary Apple hardware is nonsense.
Gitlab has been great for me as well! The only issue I see for new users is that issue they had last year. To be fair they were very transparent and handled it very well.
You don't need to move out for add extra configuration to your CRA. Every project that I use CRA I add [https://github.com/timarney/react\-app\-rewired](https://github.com/timarney/react-app-rewired) on top of it so I don't have to deal with the same issue from CRA of not allowing me to extend the webpack file. I would recommend you to do not move to your own setup \(or Parcel, please don't\) and use react\-app\-rewired. So far, it will do everything you need it, at the end of the day it comes down to modifying a configuration and react\-app\-rewired allow you to a full language for do transformation on it.
K ha
Actually viscode is WAY more like atom than eclipse. In fact it’s based on the same platform, electron. In my experience it’s like atom but much more stable and smooth as it has the direct backing of Microsoft. 
I use it for my personal repos and quite like it
The frustration corporation is buying the productivity website. While I see nothing good coming from this, at least this is as good time as any to move away from GitHub to something else.
I don't know what your preferred stack is, but at my company I've greatly reduced development time and bugs by introducing React. Previously was jQuery and some handlebars and whatever other weird library they brought in to accomplish a specific task but got left in the boilerplate because no one else knew what it did. Seriously, having a nice React Redux boilerplate repository to start off our projects has really improved our overall process. It is also way more flexible than you state: yes, there are some React gotchas and patterns for sure, but in the end most of it just feels like writing JavaScript. I've incorporated all kinds of libraries that don't have any React APIs and rarely have issues because it's all just JS in the end. I mean, if what you are doing works for you, gets the job done fast and well, and you see no need to overhaul everything, that makes total sense. But I would suggest building something on the side with React just to know it... it's not going away, there are too many of us that love jt.
I think it's more because blockchain has been so overhyped that everyone and everything is doing something with blockchain even when in many cases there is no reason to use blockchain there. So it's led to some people (myself included) to react with "oh God not another one" whenever I see anything with blockchain. PS. I'm under the age of 30. Barely. Lol
That doesn't work on Windows 7...
Rewriting it fucked up all the cross platform support and I can't play with my friends now.
&gt; they dropped IE And Edge mysteriously started with version 12 for no reason whatsoever.
By forcing users to either use Windows 10 Spyware or not be able to play with their friends that are stuck on mobile or Windows 10 Spyware.
If you already have all the features you need in your stack, feel free to use it. The reason people usually recommend that something like React be used is that open source projects with such a large userbase are used in a wide variety of contexts by many people. This means that things like bugs and edge cases are handled much better than a personal setup. Also another main reason to use something like React is if you're going to be working with other people. It's much easier to get people on the same page and working efficiently if they don't have to learn someone's specific implementation. 
R.I.P. GitHub. It was a fun time. Let's hope GitLab uses this opportunity to become the market leader.
Gnome moved before this was announced 
https://github.com/gajus/babel-plugin-react-css-modules/blob/master/README.md#css-modules
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [gajus/babel-plugin-react-css-modules/.../**README.md#css-modules** (master → f635b35)](https://github.com/gajus/babel-plugin-react-css-modules/blob/f635b3570e7da27dc71191f65ad4c6654b81f900/README.md#css-modules) ---- 
Oh. Oh dear.
So you have to be running linux in order to support open-source initiatives? That is nonsense. The point is Github's relationship with the open-source community and the possibility of their values being compromised, not that everything must be open-source.
That's a stupid thing to say. You won't notice anything in years to come if ever.
True! Though I would add, there's probably much more react code out there written using regular class names and no fancy approaches. Though, that doesn't discount the confusion and "best" practices you mentioned. Thought, just like Scoped CSS in Vue's Single File Components, CSS Modules is _obviously_ the superior choice. Just joking. But not really. 😉
Pugjs
The UI is a fucking disaster, for one.
Confluence blows my mind with how amazingly unintuitive it is to use.
I can understand the strengths of having a similar culture/setup I just find it baffling this paradigm is the one that is standard
The problem with angular is that romance with Typescript they no longer say it is JavaScript they say "Typescript/JavaScript ", OP is a beginner, using JavaScript would be best for now. The leap to Typescript is easy if you feel comfortable with JavaScript. Learning Typescript just to find out that in 2022 nobody wants to hire a TypeScript coder \- the way nobody cares about ActionScript today \- would make OP regret not going with more mainstream approaches that focus on broadly adopted standards. As to \*ngFor, personally I would like the option to use [cheerio](https://github.com/cheeriojs/cheerio) on my HTML markup codebase. I just want it to work and not think about AngularAST stuff. I loved angular, react was awesome, but you know, I still love Perl, and original ASP \(pre dot net\) but if you don't follow the mainstream you'll become a fossil, the Master of COBOL and King of NYNEX. Let's just keep to the main roads this is a battle for our kids, for happy homes, battle against poverty. Dear friends, germs and moderators; let us not bring knives of questionable alloys, to laser gun battles. Do the Maverick stuff on Sunday morning, rest of the week keep following learning the new mainstream stuff as it emerges. Don't get stuck in the short bus. Peace. No Flame Wars.
Fuck that will suck. I can't imagine what horrible shit they will get up to with that site. Guess its time for a Github alternative to rise to prominence. 
This is just a personal opinion. I don't use any Microsoft products by personal choice (I don't like them as a company or what they do to products), so I won't be using this one. Apologies if I offended.
Yup, Azure will rear its buggy, useless head for sure. Then I wouldn't be surprised if Microsoft didn't get up to some anti-competitive bullshit (apps that only work on Windows, etc). 
Satya has been an incompetent CEO who has basically just moved everything to India and the cloud at the expense of customer experience. He's put ads in explorer for fucks sake. 
Not really, Microsoft has not improved, they've just followed the Apple model of pushing cloud software, building an "app" ecosystem, and waiting until they can clamp down and have a nice little walled garden for themselves on Windows. 
No idea who would downvote obvious truth.
So it sounds like Github focuses more on OSS developers than orgs, because as someone who contributes to open source a lot, Github and all its integrations with free open source tools is the greatest tool on the planet
I don't wish to use a Microsoft Live One password or whatever they're calling it now. 
I agree, you can always count on it to stop responding and crash when opening large projects.
\&gt; Microsoft is the top contributor in the world to open source on GitHub. Not trying to jump on you, but I've seen this statement a few times and I think it needs explaining. When you say "contributing", do you mean that they've forked and submitted pull requests to many other projects, or do you just mean they store a crapton of their own code in GitHub repos? IMHO, there's a huge difference between contributing and just taking over a space.
Somebody doesn't like this phrase being talked about... I can't image who...
No, Sourceforge went bundled crapware long ago. Lost me when they started doing that. 
&gt; I find it incredible that anyone would use github. Maybe because it wasn't made by shitlassian and actually has an usable UI/UX