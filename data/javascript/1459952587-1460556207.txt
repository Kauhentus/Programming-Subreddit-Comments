Hi, thanks for pointing these thinsg out. I am learning and will try to improve upon the points you have mentioned. :)
omg..really grateful you pointed it out, I didn't see that at all. Thanks a lot.
http://jui.io/?p=chart - these works fine. I suppose chartplay is debug mode or something? edit: Alerts were defined using user-code var showEventMessage = function(obj) { alert("[" + obj.dataIndex + "] " + obj.dataKey + "=" + obj.data[obj.dataKey]); }
As /u/--epicgirl1998-- mentioned, you would want to use the `some` method which returns `true` if one or more elements in an array match a test you provide. If you want to use the lodash version, it would be the same thing: _.some(items, function(item) { return item.code === '1'; });
Look into call, apply and bind. Pretty useful js function invocation patterns. Also be very careful about using this, it can get dicey if you don't know exactly what you are doing. Context and scope is very important but also very confusing. Prototypical inheritance is confusing but you have to learn it. In general this feels super java-y, probably because that language uses these design patterns the most.
Thanks. Will check them out on MDN :)
You could also do this using ES6: items.find(item =&gt; item.code === '1') !== undefined; Or ES5: items.reduce(function(prev, next){ return prev || next.code === '1'; }, false); EDIT -- As /u/vlad27aug points out, the native Array object also supports `some`: items.some(item =&gt; item.code === '1');
I have also found that many classic OO design patterns don't translate well to JavaScript (not surprising because OO doesn't either!), especially now that we have native modules. I've rarely come across them in codebases aside from stuff like Iterators. Of course, some do. That's why we have `EventEmitter` and similar APIs. Observables, while not a JavaScript-specific thing, are a mixture of the Iterator and Observer pattern.
I don't know how I've gone years without ever using that function. You learn something new everyday. Thank you!
Perfect!
Oh interesting, I've never actually used lodash before but that's a cool shorthand. 
Dan Abramov's Egghead course also implements Redux from scratch: https://egghead.io/series/getting-started-with-redux
Can you recommend a good book on JavaScript design patterns?
it can also be `items.some(({ code }) =&gt; code === '1')` 
pros of .babelrc (or any .*rc file): * separation of concerns in files * easier to find and modify your settings (depending on how stuffed your package.json is) * you get to feel cool for using a runcom file pros of package.json: * limit file bloat (you could have other .*rc files, test config files, task runner files, readmes, etc.) * "single source of truth" for app configuration * you get to feel cool for using a package.json hack i'm not personally aware of any "meaningful" differences (like performance), so to me it comes down to project style.
Agreed ... the implementation in the repo there looks more like a message bus. They look pretty similar, but a message bus is designed to trigger actions across a barrier over which only data can pass. The command pattern is designed to encapsulate the action, and I don't a point where the action is encapsulated.
Its not necessarily a classic "proxy", its [lockdown](https://www.npmjs.com/package/lockdown) by mozilla, for pinning dependencies without being as strict as shrinkwrap. We had to fork it and fix it for https, I'm sure a fix is coming down the pipeline by them, though.
Have you thought about breaking out the positioning into a separate library? Hubspot does that in Tether, which allows quite a bit of reuse as they use it in both Shepherd and Select.
I read https://addyosmani.com/resources/essentialjsdesignpatterns/book/ You can refer the same, there are many more implementations in the book.
That's kind of an unfortunate name... https://en.wikipedia.org/wiki/Poppers
On the php ajax page I am echoing the results. So the result from that page is: { name: 'Microsoft Internet Explorer', y: 56.33 }, { name: 'Chrome', y: 24.03, sliced: true, selected: true }...... I have tried: echo json_encode($browserStats); But the result was the same, no pie :( edit: Sorry, yes php. 
Static (on GitHub)
Unfortunately I use a static page.
I feel like a lot of packages are declaring `devDependency`s as regular `dependency`s.
For code maintainability, I usually follow the convention so developers ramping on the project have less to figure out. In this specific scenario, I use .babelrc along with .eslintrc. The N of files isn't really a big deal because you're still equating to the same effort for management within a giant package.json. 
I have the ajax.php page generating a string that is the HighChart example, just for troubleshooting. That output is: $browserStats = '{ name: 'Microsoft Internet Explorer', y: 56.33 }, { name: 'Chrome', y: 24.03, sliced: true, selected: true }'; I have tried the following: 1. echo $browserStats; 2. echo json_ecode($browserStats); When the ajax request response returns this I can throw it in an alert to verify that it is coming across loud and clear. $ajax({ url: 'ajax.php', type: 'POST', data: dataIN, sucess: function(recvData){ alert(recvData); } }); But if I replace the alert with the HighChart function and then try to use the recvData in the series/data area, it doesn't display the chart. function{.... data[recvData] } Maybe I am just really bad at explaining this, I have not posted to JSFiddle before, could I possible recreate this in that environment to better explain? 
Could you elaborate? I'm more likely to listen to Addy, who has a stellar background in development, than a random person on the internet.
Keeping those SOCs tidy.
The response was: Local recvData: "↵{name: 'Microsoft Internet Explorer', y: 56.33....." So its coming back but is the return character up front part of the issue? 
this book always helped me: http://bdcampbell.net/javascript/book/javascript_the_good_parts.pdf
I also don't get why it's a good idea to load CSS to JS with webpack. Totally nuts concept. If you remove these, the only selling point is that it's relatively seamless to load babel with it with multiple module formats, but good luck if you want to modify the config for something specific. 
Maybe take a look at something like pretender.io (I think that's right). A service like that can crawl your js pages and store a static, cached version for crawlers. This way you can continue your react work without having to dive into the work required to fix that. If your wanting to dive in, a bunch of work has been made available so that react can work on the server side as well. Youll need to search "universal react" or "isomorphic react" to get help. If you're okay with putting in a lot of work I would recommend grabbing a nice boilerplate and begin porting your app to it. That way your starting from a good foundation instead of hacking it for future technical debt.
Could you perhaps do something like this: print_r($browserStats); echo "###"; print_r(json_decode($browserStats); Then copy and paste the results here as a code block, or in a pastebin? Just to firstly verify that the output is what you expect. 
In this case it qualifies as "Invented Here", which can be worse: * https://www.reddit.com/r/programming/comments/2x343u/invented_here_syndrome/ * https://en.wikipedia.org/wiki/Invented_here With "Not Invented Here" the two big factors are wasted time and some potential for increased risks in rediscovering conformance and coverage. With "Invented Here" you are basically dealing with people who are absolutely afraid to do their jobs.
Yeah, the whole list is super rough - there are way too many variables to get an accurate feel for things straight out of npm installs. /u/KnifeFed's edit with github stars is probably a little closer to the mark.
Yeah, the numbers will be all over the place - too many factors involved in npm install to get meaningful data. I guess if we had access to all the npm install stats, we could do a uniqueness filter based on the installing module's name - that way each project is only counted once, and would also allow us to reconcile the differences between `grunt` and `grunt-cli`... We can dream :)
The method signature for callbacks in map is function(arrayElement, index, array); The method signature for `parseInt` is function(value, radix); Here's how your `parseInt` calls in a `map` get translated: parseInt("10", 0); //-&gt; 10 (radix default of 10 is used) parseInt("10", 1); //-&gt; NaN (1 is not a supported radix) parseInt("10", 2); //-&gt; 2 (binary, first of supported radix values) ...
Building on this, something deletes half the buttons and adds 150 new ones. A.) Find the newly-added buttons and attach handlers to them, so that all of the buttons still have handlers. B.) Don't need to do anything.
Let's get that syntax a bit better first and foremost. I think this is what you're wanting to say: xs = ['10', '10', '10']; console.log(xs); //["10", "10", "10"] xs = xs.map(parseInt); console.log(xs); //[10, NaN, 2] xs = ['10', '10', '10', '10', '10', '10', '10', '10']; console.log(xs); //["10", "10", "10", "10", "10", "10", "10", "10"] xs = xs.map(parseInt); console.log(xs); //[10, NaN, 2, 3, 4, 5, 6, 7] Sorry if I've misunderstood something...
Yes. Thanks, I just copied my console output. This is much clearer though. 
So basically this prevents code from being called until a variable is created? That's exactly what I need for a few circumstances. 
Interesting! Thanks for the detailed explanation. &gt; I suppose the example is supposed to demonstrate that there was not sufficient care given to considering how different parts of the language would work together (or not work together) when the language was being designed. Indeed. In most other languages I've dealt with this would generate some kind of error, where as `parseInt('10', 0)` just ignores the invalid parameter passed to it. I'm just starting to wade my way into JS, and the number of times it's left me scratching my head... and I come from Perl! :) Anyway, thanks for the explanation.
Blanket statements don't help any sort of conversation.
Let's not confuse module pattern with singleton. There are things you won't be able to do in the module pattern (the one you are suggesting) that you can do with a singleton. For example, after instantiation, if a variable is mutated during run time then it should be reflected everywhere. That's the whole point of a single instance. In your example, let's add 2 methods: getX and setX function init(options) { //some private variables var x = '1', y = 2, z = 'Abc', pi = Math.PI; //return public methods(accessing private variables if needed.) return { X : x, getPi : function() { return pi; }, setX: function(newX) { x = newX }, getX : function() {return x } } } var singleton2 = init() undefined var singleton = init(); undefined singleton.X() "1" singleton2.X() "1" singleton.setX(3) undefined singleton.X() 3 singleton2.X() "1" Now consider the following for singleton (basically the same as OPs code): function Foo() { if (Foo._instance) { return Foo._instance; } //if the function wasn't called as a constructor, //call it as a constructor and return the result if (!(this instanceof Foo)) { return new Foo(); } Foo._instance = this; Foo.x = 1; } Foo.prototype.getX = function () { return Foo.x; } Foo.prototype.setX = function (x) { Foo.x = x; } var singleton = new Foo(); var singleton2 = new Foo(); (x) { Foo.x = x; } singleton.getX(); 1 singleton2.getX(); 1 singleton.setX(3); undefined singleton.getX(); 3 singleton2.getX(); 3 You can use the module pattern as a singleton if you don't have mutations going on, but if you do then the module pattern will fail as a singleton. That said, idempotence does not equate to singleton, but it does if there are no mutations on the singleton.
Wow, that looks awesome. I did the basic redirect though, I'll add that functionality if the project grows. Merci!
I don't have anything against MobX. It seems like an interesting alternative to Flux or Redux, and I can appreciate that it's probably somewhat simpler to approach as far as "just assign my data and stuff works", rather than having to worry about immutability. You're right that I probably won't be actually doing anything hands-on with it any time soon, but that's primarily because 1) I've settled on Redux as the solution I want to use for my current work project, 2) I'm busy trying to write that application, 3) I only have so much free time... and 4) the attitude isn't exactly inviting.
Then next I time I will preface the blank statement with "*I think*"
How is that any better than eval? 
Are you hoping to build up an Array of selected ids? In that case all you need to have a variable defined outside the scope of the event binding functions (like var areasSelected = []); Then you'd just push to that Array. Or you might choose to forgo this idea of "storing" the id and instead have the event binding do whatever you intend to do with that information directly. By and large, it's better to build chains of behavior as functions rather than trying to have some larger tracking of state (unless you're prepared to actually handle and trigger behaviors based on changes to states). Is there a reason you are binding an event listener INSIDE the callback of another event listener? That seems pretty strange, especially if &lt;area/&gt;s are inside map. var mapSelection = areaSelection();//does nothing: it returns undefined $("area").on('click', areaSelection);//will bind an event to the click... //EXCEPT to bind a new listener to a higher element that then binds the 1ST listener all over again $("map").on('click', 'area', namedCallback);//this is all you need 
it's an example. The point is design patterns emerge because they solve a specific problem in a specific language or programming paradigm. They're not universally applicable because some language designs make something that's difficult in other languages trivial in another.
So, you're looking to build something similar to Flow-based programming? [NoFloJS](http://noflojs.org/) might be a good start then.
[removed]
Try Aurelia, React and Vue. They are all based on components and can handle custom DSL easily. I can't say about drag and drop.
Sure which is fine in development, but if you're throwing random code you found into production you deserve the consequences.
Any other regex challenges site?
Yes, Regex101 is to test your regex with test cases.
 var n = [10, 5, 200, 3500]; var strN = []; var len = n.map( function(s){ strN.push(s.toString()); return strN[strN.length - 1].length; } ); HTH.
Interesting that you used map for the second task, but not for the first :p I'm on mobile so forgive me if formatting sucks: var nums = [1, 2, 50, 100]; var numStrings = nums.map(function(i) { return i.toString(); }); var stringLengths = numStrings.map(function(str){ return str.length; }); With es6 and arrow functions and no intermediate array: const nums = [1, 2, 50, 100]; const stringLengths = nums.map(i =&gt; i.toString().length); Edit: formatting 
&gt; var strN = n.map(String); That is what I couldn't figure out (what to pass in to n.map() at this point). Thanks!
Design "patterns" are signs of a highly inexpressive language. Javascript is not one of those languages where they are necessary.
I like the idea, what different operating systems has it been tested on?
I couldn't figure out how to use map() to create an array of strings so that is why I had to resort to the old for-loop :(
Also, I think Number.isNaN does *not* cast, even though the global one does.
Awesome idea. Already downloaded &amp; implemented it for the current project I'm working with. One thing that would make this even better for me personally would be the ability to make ~ point to a folder of your choice. So while ~ is the root i would always import files from a subdirectory. For an example: ~/src/... - so a way of making ~ act as ~/src/ in my case would be awesome. Btw - I've tested it for Mac. Works perfectly.
cynged is correct if `x.y` doesnt exist `&amp;&amp;` will stop and never make it to `x.y(1)`. its called short-circuit evaluation.
I'm using a very similar technique in another context at work (to make the Gruntfile from our reusable build-process module accessible from the root directory of repos that use it), and it works on Linux, OSX and Windows (both git bash *and* cmd.exe shells, which was a pleasant surprise).
Adding "~/src/" to the front of every module you want to require is not ultimately a big deal, especially if you're already adding the "~/" anyway. Having to add *variable* numbers of "../"s to the front of every require statement *depending in the depth of the file doing the including* is a really big deal, as it rapidly makes entire codebase agonisingly painful to refactor (believe me - I just spent a few weeks of my life doing exactly that). Plus, is it even possible/advisable to somehow parameterise postinstall scripts in the way you're asking? Stopping a hands-free installation process like `npm install ` to take input from the user is a non-starter, and even keying it off an environmental factor like an environment variable or the contents of a file on disk feels pretty gross and non-idiomatic.
The author is Italian and didn't take the time (or thought) to translate the comments.
I see where you're getting at. 'absolute' paths relative to root of project makes it more readable too. I always tend to have a hard time wrapping my head around ../../../../somelibrary/fanzyscript.js as to where it might be located. Absolute paths relative to the root gives you the perfect image as to where it is located.
&gt;this post is aimed at readers with very little experience of programming no offence but if you have little experience in programming, you shouldn't really be making front end web app with something as advanced and complicated as React. Copy pasting code from stackoverflow without understanding it will sooner or later get you into trouble.
Italian Comments are related to article written in italian within the blog, not to this article that actually does not have comments. Disqus plugin shows latest comments from the blog
What is RTE?
if you're returning the css, html and js all in one api call, why do you need promises? It should be near-instant when you load them into the dom.
aurelia is a a js framework like angular but has cleaner and easy to use syntax. while vue is view-layer library like react, but vue is easier to learn and is more intuitive. I heard somewhere that react supports 2 way binding. though i don't the details. I know both aurelia and vue support 2 way binding. you might like this [example in vue](http://vuejs.org/examples/svg.html) 
Actually I'm not returning CSS/JavaScript code, but URLs. There can be one or many, depending on the custom element. This is the actual response for the custom element, I redacted the HTML part to make it smaller: { "html": "&lt;div class=\"popover popover--adjust-thumbnail …", "assets": { "css": [ "\/vendor\/icanboogie-modules\/images\/public\/module.css", "\/vendor\/icanboogie-modules\/nodes\/public\/module.css", "\/vendor\/icanboogie-modules\/thumbnailer\/public\/module.css" ], "js": [ "\/vendor\/icanboogie-modules\/images\/public\/module.js", "\/vendor\/icanboogie-modules\/nodes\/public\/module.js", "\/vendor\/icanboogie-modules\/thumbnailer\/public\/module.js" ] }, "mode": "popup" }
I see. not the approach I would have taken...but to each his own.
Thanks for your feedback xintox5, I'll update my article with what we have discussed. A "Why?" section would do it good :)
&gt; Design Patterns are key lol
@feross do you happen to have any performance metrics for this?
~~It's a good explanation.~~ To make it more more clear I'd also add that a monad is basically something that incorporates a flatmap (bind), and i would parallelize Promises (which are monads) with the code the post provides, since Promises are pretty well known and seeing a real life scenario/impelementation of a topic always makes it more understandable (.then is the promise's .bind or flatmap)
Correct, my bad.
This likely won't work in nested packages. Because npm flattens the dependencies to the top-most package, any nested package that relied on this will start from the top-most instead of the location nearest invocation. There's a library called include that handles this by doing: var include = require("include")(__dirname); var myMethod = include("src/to/myMethod"); This is an interesting concept, but prior to a recent change, include had this same problem. Here's the issue that was brought up: https://github.com/anthonynichols/node-include/issues/2 Edit: added reference to relevant issue
Great idea. I think you should consider submitting this functionality to the CommonJS guys and see if they'd be interested in adding it to the spec.
If you wrote your scopes to be private then eval will have access to them. Honestly neither is a good idea 
I'm sure there are cases that this works well for, but the "verbose, repetitive code" example there is better code than the "much more elegant alternative"
Hey feross! Ive been following your progress on webtorrent for a while, it is great stuff! Quick question: wasn't the end goal for this to be a stepping stone for bittorent-based p2p CDNs in the browser? I thought PeerCDN was a fantastic idea. Is this still a possibility? We could save huge amounts of traffic across the web by serving media files to local (or close) peers by webtorrent.
If you don't mind a little ES6 in your life, I reinterpreted what you're doing: // function that will be passed into second function function add (...nums) { return nums.reduce((prev, cur) =&gt; { return prev + cur }) } // the function that accepts a function as an argument function findArguments (func) { return function (...args) { args.forEach((arg, i) =&gt; { console.log(`Argument ${i + 1}: ${arg}`) }) return func(...args) } } console.log(findArguments(add)(1, 2, 7, 10)) So now `add` will accept any number of arguments. `findArguments` accepts a function and returns a function (in this case `add` but it can be anything), which, when called will log each argument and then return the actual function call. EDIT: Went ahead and used a template string while I'm already using ES6. EDIT 2: To clarify my reasoning, /u/mattas is correct. You can't go `findArguments(add(1, 2))` because that will call `findArguments` on the result of `add(1, 2)`, which is `3`. `add` is a function, but `add(1, 2)` is a function call.
&gt; You shouldn't expect the passed function to know about its context. Hmm... I suppose you're right if you want this `Maybe` implementation to be specifically about handling `null`. In Haskell, it looks to me like you can more specifically define what constitutes a "non-value". I was attempting to translate that into Javascript, but it now occurs to me that I didn't actually go far enough, because what I wrote still references `null`.
I agree it is important to learn Javascript fully before starting a major project but why not learn javascript with React, also their "little experience" was 6 months of experience, in that time I think you can really learn quite a lot about the language and learn enough to learn React itself. If I wanted to teach someone PHP, I could ask them to create a PHP application on their own or I could ask them to use something like Laravel and get a feel for the language in a somewhat easier setting and then have them learn the language fully to learn how it works behind the scenes. If you're just dabbling and having fun with it there is no reason to limit yourself to learning the boring details.
Next step would be to also strip comments : function uncomment(fn){ return fn.toString().split(/\/\*\n|\n\*\//g).slice(1,-1).join(); }; 
Look alright, although the regex is a bit messy. Here's how I would do it: https://jsfiddle.net/4tq0ydnr/2/
Is the goal simply to produce a function that has the new behavior, or are you trying to manipulate strings and output new source code?
This is exactly wrong. Monadic bind expects a function that returns a value wrapped in its own type. I think every "monads in JavaScript" tutorial I've ever seen gets this wrong. Edit: Here's the monadic instance of Maybe in Haskell, which gels with /u/atrigent's answer. instance Monad Maybe where (Just x) &gt;&gt;= k = k x Nothing &gt;&gt;= _ = Nothing The funny-looking `&gt;&gt;=` is the bind operator in Haskell, and `k` is any function that accepts a single value of type `sometype`, operates on it, and returns it wrapped up in a `Maybe sometype`. It has to be this way otherwise bind wouldn't work properly, and fortunately in Haskell it can be enforced by the type system. (No such luck in JS.) On the other hand, `Nothing` bound to any other function ignores the function entirely and returns `Nothing`. 
This is the core problem with monads. What the pattern works well for is almost always incredibly complicated. As others mentioned, the Promise is a monad. People have struggled for years grokking the workings of the Maybe monad... well Promise, is just a lot more complicated than that. But the things it'll do, and the fact that it tends to implement more efficiently than any async flow utilities (async.waterfall, for example)..is pretty incredibly.
As far as I can tell, this is the Identity Functor (and some other Functor with a side effect, which is a no no) explained with Javascript, not Monads. What he builds here fails the very first Monad Law (if he means .map to be his .chain/.flatMap: if he doesn't then he hasn't even defined the core method of a Monad in the first place!). Here's that law: if you call Foo.of (which he doesn't define, but we can infer) on a value and then chain/flatMap the result with a function that returns a Monad, it should exactly match (in structure and inner value) the output of just calling that Monad returning function directly on the value. Here's a little test suite you can run yourself to see if his .map qualifies as a legit .chain/.flatMap: function Foo(value) { this.get = ()=&gt; value; this.map = fn =&gt; { let result = fn(value); return new Foo(result); }; this.chain = this.map; } Foo.prototype.of = x =&gt; new Foo(x); Foo.of = Foo.prototype.of; (function(MType,Minterface){ var testValue = 6; var testFunc = x =&gt; MType.of(x+1); var left = MType.of(testValue).chain(testFunc); var right = testFunc(testValue); console.log( '.chain -ing a func: ', left[Minterface](), ' should == running that func on value:', right[Minterface]() ); }(Foo, 'get')); That will return a Foo[Foo[7]] in one case and a Foo[7] in the other (the test will log Foo and 7, since it calls get automatically to make things clearer). So it's not a Monad. The other types define fail in the same way. This is absolutely critical for understanding Monads: they MUST work in a predictable way that obeys the 3 laws, or else you're going to end up with all sorts of weird results. Different Monads are able to encapsulate all sorts of wild and different computational behaviors precisely because those laws create a common interface. One other important thing to note is that once you've properly defined .chain/.flatMap, you get .map for "free." That is, all Monads are capable of being Functors (and Applicatives) because you can always just define map like this: MONAD.prototype.map = function(f) { return this.chain((a) =&gt; MONAD.of(f(a)) ); }; There are many great resources for learning about Monads in javascript: here's the [most popular free resource out there](https://drboolean.gitbooks.io/mostly-adequate-guide/content/). Here's also my own take on the tiny amount of work that would be necessary to [make Array into a Monad](https://medium.com/@dtipson/hey-let-s-make-a-monad-e276802fdb0c).
It's not a Monad. See some of the other comments. Foo is basically the Identity Functor, but not a Monad.
This the enemyPositions variable and it's content. Updated the OP var enemyXCoords = [525, 1025]; var enemyYCoords = [750, 650]; var enemyPositions = [enemyXCoords, enemyYCoords];
I call it in the main.js file with this line. buildLevel(platforms, game, enemies, enemyContainer);
Here is a breakdown of the main.js file. It contains the variables that are put in as parameters. // Initialize Phaser, and create a 400px by 490px game var game = new Phaser.Game(1300, 600); var platforms; var player; var enemies; var enemyContainer; // Create our 'main' state that will contain the game var mainState = { preload: function() { ... }, create: function() { ... buildLevel(platforms, game, enemies, enemyContainer); ... }, update: function() { ... }, }; // Add and start the 'main' state to start the game game.state.add('main', mainState); game.state.start('main'); 
You could've done a better job by just linking to AngularJS's documentation.
This is just a pattern. The invoker says to some intermediate component, in this case the executor, "hey I've got this command I'd like to be executed" and then this can dynamically pass that request on to the receiver.
The regex matches something in single quotes followed by whitespace and a number, e.g. 'dklasjdkjas' 13213 'dkasdl' 842384 'mboijeojkd' 23234 You can see it here (it's also explained in a bit more detail): https://regex101.com/r/sR9iC9/1
Aren't we already? This is why everything is being rewritten in Go, because Node is so 2014.
Can we kill the corny acronym stacks yet? Is that ok? ಠ_ಠ
how is this different from copy pasting a torrent into popcorn time ce?
Take a look at [this function](https://github.com/rmcc13/deprecated/blob/master/index.js) I wrote a while ago. It's a higher order function that takes an argument `function A` and returns a new function `function B` The new function `B` has the same signature as the argument function `A` and executes `A`, but just adds some custom code before it, and you can use function `B` just like you did function `A` 
Yep, this would be the right way to do it. Use 'arguments' instead of parsing the function. 
Hi /u/spleenteo, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `leanpanda.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [leanpanda.com](/search?q=%28and+site%3A%27leanpanda.com%27+author%3A%27spleenteo%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|13|93%
See also: "Isomorphic" Javascript, "Composable" components
This is more of an article describing functors with an added `get` function.
&gt; Sometimes I’m not satisfied with the way things are. I like the post.
Yup, equality without coercion is based on reference const toString = () =&gt; 'Hello there!'; const objA = { toString }; const objB = { toString }; alert(objA == objB); // false
Can you remove the first and last {} so it becomes a string? JSON.parse("{\"childFirstName\":\"value\",\"childHeight\":\"value\",\"childLastName\":\"value\"}") // &gt; Object {childFirstName: "value", childHeight: "value", childLastName: "value"}
[Penny drops](http://www.phrases.org.uk/meanings/280900.html) in 5... 4... 3... **Edit:** Adding something valuable to an otherwise pointless comment. Try adding `eCount = eCount || []` at the top of your `buildLevel` function.
&gt; {"{\"childFirstName\":\"value\",\"childHeight\":\"value\",\"childLastName\":\"value\"}"} That solution results in: Uncaught SyntaxError: Unexpected token c(…) 
Agreed. It's the result of posting the object to a postgres text field.
simple functionality, just want the tab i choose to have the active styling over the inactive styling. the current tab will switch to inactive styling 
Hmm yeah, you're most definitely correct. i glanced over it too quickly, what a mistake 
Thanks this was very interesting to read.
This feels like an XY problem. What are you trying to do / where do you get this data from?
Postgres. The original object looks like this: [ {"childFirstName":"value","childHeight":"value","childLastName":"value"} ] When I select it from postgres. I get this: {"{\"childFirstName\":\"value\",\"childHeight\":\"value\",\"childLastName\":\"value\"}"} ng-repeat does not like that structure so I must convert.
Hey, welcome to OO.
I'm using it to add source to existing functions, like: var oldFunction = new Function(func_arguments, func_body);
Thanks for the info. I'll have to take a weekend or two to learn some of this.
I didn't think a language like Java would do the same. Am I wrong? class Dog { public string toString(){ return "Woof woof"; } } public static void Main(String[] args){ Dog dog = new Dog(); if (dog == "Woof woof") // Won't there be a compiler here? System.out.println( "It worked!"); }
2 things I'm noticing. 1. In the js you're referencing `'#custom-tabs a'` when you want `'.custom-tabs a'` since custom-tabs is a class, not an id. 2. `this` in your click handler will be the anchor (`a`) not the list item (`li`) which is what you have your active and inactive classes attached to. From your handler, you'll want to reach up into list items and add/remove classes there. You can do this with `parent()` or `closest()` in jquery.
In Java "==" operator does check reference, you should use .equals try: System.out.println(new Dog()) if ((""+dog).equals("Woof woof")) System.out.println( "It worked!");
Thanks. Thought it was too simple to be right, but I've never grasped monads myself to be sure.
These aren't monads Please delete this article and try again.
I don't care if those were monads or functors, but this was a concise and well-written article and I left off feeling I learned something. Please keep writing great stuff like this.
I don't think it can: it's tied to how Array is defined. That's the only way to get at the Array this is working over afaik and still have it work via pointed methods. You could pretty easily define a `chain` that accepted an Array as an argument though, and then ran reduce on it or whatever else was necessary to reproduce the behavior, and that could avoid the use of `this` entirely.
The beauty of promises is that returning a chain only "returns" (really only *resolves*) when the final chain is completed. So putting a `return` in front of `aPromiseReturningMethod` will actually return the result of `anotherPromiseReturningMethod`. Think of it like return myArray.map(x =&gt; x.prop); You're not returning `myArray`, you're returning the result of the .map operation. The same is true with promises. 
Is there any reason you're not using a postgres JSON field?
Not sure it's supported in the version of postgres I'm working with.
I honestly haven't thought very hard about porting monadic code to JavaScript, but my intuition tells me I'd probably do something like this instead: function MaybeUnit(value) { return new Just(value); } function Nothing() { // "pipe" to avoid confusion with JS's "bind" this.pipe = function(f) { return new Nothing; } } function Just(value) { this.value = value; this.pipe = function(f) { return f(value); } } It overlooks a `Maybe` type constructor, but I don't know if I want to try to emulate types with objects (especially in a pedagogical example). Monads don't typically let you peek inside them with something like my `value` attribute, but they do let you pattern match, which is just as easy. Without pattern matching in JavaScript, this could get tricky. Maybe it should be some kind of getter or descriptor, but it works well enough for a small example. This should actually satisfy the monad laws and give the expected behavior: m.pipe(MaybeUnit) = m MaybeUnit(x).pipe(f) = f(x) (m.pipe(f)).pipe(g) = m.pipe(function(x) { return f(x).pipe(g) }) And overlooking currying, it should be syntactically convenient: $ var a = new Just(10); $ var b = a.pipe(addTen).pipe(subFifteen); $ b &gt; Just {value: 5} It should also let us define additional functions on the behavior of the monad (e.g., `join` could be prefixed with some naming convention and become `MaybeJoin`) akin to how you might define a typeclass instance in Haskell. It could use some type error checking, though. Then you could do stuff like this: function deposit(amount, balance) { return new Just(amount + balance); } function withdraw(amount, balance) { if (amount &gt; balance) { return new Nothing(); } return new Just(balance - amount); } var bankAccount = new Just(300); // Currying would be so nice here :( var newBalance1 = bankAccount .pipe(function(bal) { return withdraw(100, bal); }) .pipe(function(bal) { return deposit(300, bal); }); // newBalance1 == Just {value: 500} var newBalance2 = newBalance1 .pipe(function(bal) { return withdraw(501, bal) }) .pipe(function(bal) { return deposit(100, bal); }); // newBalance2 == Nothing {} 
In a project I work on we try to send the most efficient and/or smallest code to browsers. arrow syntax is a more efficient and smaller way of doing many of the functions we run. We need to support some older browsers so we have a function that checks for features and then grabs whatever additional code is appropriate for that browser. When I attempt to check for arrow functionality it breaks the whole check.
What exactly have you tried?
I was assuming this wasn't meant to provide separate code paths, but rather just for informational purposes. If not, then yeah, either avoid ES2015 altogether or transpile it.
For sure, I kinda switch it up a bit and included jquery and it works now! I thought jsfiddle would include jquery -_-.. Thanks a bunch for the help. It has been a minute since I've used JavaScript =D
This worked great. Thanks
The return values of the function is actually the same in both, it is just being printed differently to the `console`; try calling `console.log` with the return value of `match` to see what I mean. I believe this is a difference in the implementation of `console`. In Chrome, since the function returns an "Array-like" object (an object which has the properties `0` and `length`), it will print it as an array. In Node, it is printed as an object and thus shows the `index` and `input` fields also.
Are you using the Reactjs.net?
Wow this is brilliant!
Lol... Once again, this behavior is only "weird" or "bizarre" if you don't understand Javascript. Hint: check the function signature of parseInt
Looking for feedback from you ladies and gents. I know there are other things like it, I'm sure there are things that "x" does better. We built this because http://pubnub.com is too damn expensive for us (and because it was fun and easy to build). Any feedback for suggested additional features etc would be greatly appreciated! As a side note; if you're not a big fan of your hearing, check out the piano example here. http://104.236.219.214/examples/keyboard/ (originally a pen by David DeSandro minus the real time part.) Invite your friends and play some beautiful tunes.
Here you go. You can also remove the `else`, since if the conditional is met, you'll return out of the function. returnPromise() { if (someCondition) { return Promise.resolve(42); } return aPromiseReturningMethod().then(result =&gt; { return anotherPromiseReturningMethod(); }); }
They have slightly different ES support, and Node lacks most of the DOM functions (but does have `setTimeout` and `setInterval`), while Chrome lacks the filesystem operations.
Or you can get the nw.js 0.13.3 SDK version, hit F12 and use a Chrome+Node console as a sandbox. And then you'll never know the difference! Nah honestly, both use V8 so there shouldn't be much difference besides how Chrome specifically displays console stuff.
/u/getify has an entire suite of [feature tests](https://github.com/getify/es-feature-tests) that rely on this method, but a one-off like this is probably better for small projects.
Hi /u/ahan224, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Will not work with this string. {"{\"childFirstName\":\"value\",\"childHeight\":\"value\",\"childLastName\":\"value\"}"} ...and regex seems overkill. I'm comfortable with stringify before insert/update. Thank you.
There aren't, these are just two ways to get the same thing. Note that once you define .bind/.flatMap/.chain (plus a way to get the value in the type functionally, which OP doesnt quite do) you can then define .map almost for free. So in both cases, you end up implementations of .of, .bind, &amp; .map. All Monads are Functors.
I guess I'm not entirely sure of the use case for this. Why would I use CatsnakeJS over something like Socket.io?
No more span tags! Awesome! 
No surprise during an alert call, but my point was that I was surprised to see that coercion occur during a comparison.
I like the idea, but because these are filesystem paths and `~` already has a well-established meaning in that context, I think it's very confusing to use a symlink with this name. Maybe it should be something else?
Real-time would require that the delay and throughput of the system be accurately measured. Good luck with that on Javascript.
Gotcha, thanks.
i wouldn't say that is immediately obvious. i imagined it was casting it to a string using an internal method.
I'm working through the eloquent js book too. And I read every chapter atleast twice. The phi formula is fairly basic. If that stops you I would look for other learning resources. The formula you quoted above should not be off putting after you have read what the symbols mean.
Yeah.. I didn't consider a strict evaluation.. Otherwise `eval` + `try catch` it is :)
Nothing is wrong with Faye. &gt; I know there are other things like it, I'm sure there are things that "x" does better. &gt; We built this because http://pubnub.com is too damn expensive for us (and because it was fun and easy to build). As a side note we do offer a bit more functionality from what I see at first glance. (I'm sure they also have a bunch of things we don't) I don't know much about Faye, but I don't see history, or client management. It's also worth noting we're planning to add quite a bit more to take some load off developers that use us. A small list would include: * Subbing to groups, instead of just channels. * Geo / Mapping plugins. * Native clients and Clients for Python, Java, etc. * Administration Suite, like Robomongo but for Catsnakejs * Permission nodes for access control and management. 
https://github.com/dan-nl/wave-a-flag First result in Google.
Great update, love the quality of work that is put into this project.
HTML5 validation is based on your computer's time settings, whereas the format is based on the settings you give to the jQuery calendar. Obviously this isn't ideal, as it means that even if you fix it for yourself, somebody who has their computer set to `YYYY-MM-DD` (like me) will never be able to submit the form. However, you actually have `novalidate` on the form, so HTML5 validation isn't happening here (and `type=date` isn't relevant)`. The validation error is coming from their service (e.g. https://www.big4.com.au/caravan-parks/vic/mornington-peninsula/mornington-peninsula-holiday-park/booking/accommodations?SiteType=Cabin&amp;ArrivalDateString=04%2F20%2F2016&amp;DepartureDateString=04%2F27%2F2016&amp;NumAdults=2&amp;NumKids=0&amp;NumInfants=0&amp;Type=&amp;Width=1&amp;Length=1&amp;Unit=Metres) The really short answer is this: you need to set the datepicker format to `DD/MM/YYYY` when initialising it like so: `$('.datepicker').datepicker({ dateFormat: 'dd/mm/yy' })`
Wow thank you for this response! Being rather uneducated with this I was hoping you might be able to tell me where to put this code so it will work.
It's a replacement for line 2 of your JavaScript.
Thank you for your help!
Another stupid acronym for another pointless full stack? Fine, whatever. Does the acronym contain an M? It does. Does the M stand for Mongo? It does. Sorry, but I'm not going to listen to anything you have to say after you've made it so clear that you have no idea what you're talking about. &gt; I don’t think I have to develop why Mongo is cool. You can find plenty of articles explaining why MongoDB is a great choice. I wish I could believe this was just a subtle parody.
I wouldn't do this. Playing around with parsing function bodies is going to really bite you if/when you do transipilation, minification, or other optimizations. Also, modifying functions in strings at runtime could cause security risks, unless you take VERY special care of where your inputs come from. Instead, in ES2015, you could wrap functions like this: function myFunction(arg1, arg2) { console.log(`myFunction: ${arg1}, ${arg2}`); } function wrappedFunction(...args) { console.log("Before function"); myFunction.apply(this, args); console.log("After function"); } Or, make a generalized function wrapper thinggy like: function wrap(func, before, after) { // not using arrow functions below on purpose to prevent binding "this" return function(...args) { if (before) before(); var result = func.apply(this, args); return after ? after(result) : result; } } And use it like: var myWrapped = wrap( myFunction, () =&gt; console.log("Before"), () =&gt; console.log("After")); myWrapped("args", "to", "myFunction", "go", "here"); However, the best way would be, assuming you control the code you're wrapping, to make your functions that you intend on wrapping higher-order - meaning, they take in a function as a parameter to do the thing that you're trying to accomplish by modifying the body. So for example, function betterWay(someBehaviorThatCanChange) { // code var something = someBehaviorThatCanChange(someArguments); // other code } Now you can use this function with a variety of "someBehaviorThatCanChange" callbacks to modify the function's behavior. So for example: betterWay(() =&gt; "modification 1"); betterWay(() =&gt; "modification 2"); That would be the proper way to do this; but it does take time to get your head around passing functions into other functions. Good luck!
Hope you are getting better weather than us right now!
valueOf didn't tell you how it was being coerced: into a number, string, etc. 
Got a link to this issue/example? I'm not familiar with it. Edit: Oh is this just excessive span tags generated for the output of text? Ie. this isn't some usage of span tags in JSX?
I've just pushed `1.0.1` which works on all 3 major OS's
That's the point. From the React team's perspective, the last several release _have_ been major releases, and probably should have been labeled as such per semver. And, since most people say "React [12|13|14]", rather than "0.13", going to 1.0 would appear to be going backwards and lead to potential confusion down the road. So, just make it 15.0 and be done with it.
That's definitely more reasonable than the Windows 8 to Windows 10 argument, but it basically leaves version numbers feeling a lot like trying to pin down actual Final Fantasy or Street Fighter sequel numbers. I wonder if our general fear of leaving the "beta" stage leads to this tendency to stay in pre-1.0 forever, like the Gmail "beta." It makes me wonder if we should start just being realistic and numbering things as 1.0.0 at the beginning.
Oof that's very ugly. Happy to see it's fixed despite not knowing it was an issue. :)
Sounds like you stopped reading one sentence too early? Your company is fine 
Sounds like a micro-complaint about a micro-library to me.
&gt; While this will make it more difficult to know if a website is using React, the advantage is that the DOM is much more lightweight. My favorite part lol
Sounds like JavaScript fatigue to me.
Yes, because no one could possibly get confused why a library went from version v0.14 to v15.
They went Windows 8 to Windows 10 because there are a ton of old code libraries that handled checking Windows versions by looking for the substring "Windows 9" for Win95 / Win98.
They specifically mentioned that a very small fraction of people actually use valueLink... (it's actually an anti-pattern and pulls you back into the "binding hell" that React was supposed to free you from originally.)
Soooooo, shit is pretty arbitrary is what it sounds like. Kind of defeats the purpose of semver.
The other side of the coin is that leaving in unpopular apis that should be avoided for most projects is that everyone pays the price of the additional files being included in `react`. As far back as 2014, &gt; If you're new to the framework, note that ReactLink is not needed for most applications and should be used cautiously. React has explicitly recommended not to use it, data-binding goes against the core of how the majority of people use react. The warning signs have been available for a long, long time. Just install your package and move on.
Nah a lot of lazy legacy code out there.
Looking forward to seeing if this improves perf noticeably on m.reddit.
Man I just cannot get used to the =&gt; function syntax. So hard to read
You can see the implementation of `setTimeout()` in Node.js under [`lib/timers.js`](https://github.com/nodejs/node/blob/master/lib/timers.js). But honestly I don't see how this is going to help. There's really nothing of substance in that file. The real meat of it is in the C++ binding of the [`TimerWrap`](https://github.com/nodejs/node/blob/master/src/timer_wrap.cc) class, and that's dragging in a whole bunch of V8/libuv internals, none of which is necessary for understanding how an asynchronous function works. When you register a timer handler, you tell the implementation to fire the callback at some time in the future. The function that registered the handler returns immediately, before the event has occurred. When the specified amount of time has elapsed, the callback function is called as soon as the engine is idle and not executing JS (i.e. it's impossible to interrupt JS that's currently executing, so anything currently running has to finish first and yield control back to the main event loop.) That's pretty much it. You don't need to dig into V8 internals or any of that. 
Not entirely. You need to make sure that, when you break certain kinds of compatibility, you increment the correct digit, so that you don't screw over your users. But the number itself is somewhat arbitrary. I could go from v1.2 to v1.1098767565. It doesn't matter, as long as I made the updated digit a bigger number.
Pretty sure that was just a rumor and someone posted an example of what that would look like. I never saw anyone post a real world example of that issue. The more likely answer is marketing.. 
&gt; OS X stands for OS 10. I don't remember there being an OS 1 - 9. What? https://en.wikipedia.org/wiki/System_6 https://en.wikipedia.org/wiki/System_7 https://en.wikipedia.org/wiki/Mac_OS_8 https://en.wikipedia.org/wiki/Mac_OS_9 
I already addressed that. Not a single end user knew or cared about that at all. As far as they were concerned, they didn't exist.
&gt; It's not a rumor. It's literally what the case was. All I have ever seen on the matter was a single anonymous comment. &gt; There were 1 - 9. But none that no one ever knew or cared about. They collectively had many millions of users. &gt; How does that change with a skip of version numbers? Yeah, the skip doesn't matter, it's all about the decimal place which has been incremented.
Gotcha, thanks for the clarification!
Don't be scared of being a software engineer because of the math... instead worry about data structures and algorithms, and learning to think in a very systematic way so as to make code readable. Don't be discouraged! A web developer is not the same as a software engineer. Alrighty, now onto your questions. Front-end development is about what the client sees, and it will typically include HTML, CSS, and Javascript. Back-end is not lots of random advanced math.. no differential equations, no integrals, no polar equations haha, the backend deals with talking to the *server*, which is the computer where your web app is being hosted. For back-end development, you'll need to know a language for the back-end (Javascript is fine, there is a tool called Node.js that allows Javascript to run on the server-side) and you will also need to know how to work with a database. It may sound complicated, give me about 5 minutes and I'll make a drawing for you explaining how it all interacts. Brb! [Here is a drawing of how a web app works](https://imgur.com/a/fKPf9) The drawing I made (I'm sorry if it looks bad!) is what's called an MVC app, which most web apps follow to a certain extent. An MVC app is the front end and the back end working in conjunction. Model, View, and Controller, and it's just a way to structure code on the back end. Model: handles data and business logic View: Presents data to the user Controller: Receives user's requests and calls appropriate methods to carry them out Let me know if you have any questions or there's anything I can help with 8\^)
Thank you so much!
Oh for some reason I though Semver was still a digital system.
Ok, that is great. How about algebra? I actually always loved algebra. It always just made sense without having to try. Some other math, like statistics, felt very boring. So I wouldn't need to have strong math skills to be a back end dev? It is something I could learn on my own like front end? I am using Treehouse primarily, and they have a full stack JavaScript program, and also a php dev and ruby and ruby on rails program. I would likely do the full stack JS + one of the other back end languages. 
Ahhh I know it's all extremely exciting and you just wanna learn it all at once! Well since it seems like you have an aptitude for Javascript and you enjoy working with it, yes I would suggest becoming a full stack developer with Javascript. That's what I do 8\^) Here's my advice: Don't learn languages just to learn them, they are tools with which you can create whatever type of app you want. For example, if I wanted to make an Android app, I would learn Java (which is not Javascript). If I wanted to make an iOS app, I would learn Xcode or Swift. If I had to develop a Wordpress site, I would use PHP. A quick app or a prototype of an app? Ruby on Rails would be my go-to. Now I'm not saying I know them all and I just pick and choose which one I feel like working with today, but languages really are just tools with which you can build whatever you want. To answer your job question, yes, you can get a job with only Javascript (with HTML and CSS, obviously). I don't have a full time job because I got school in the way (my high school is from 7am to almost 4pm some days) but last summer as a sophomore I applied for an internship and today it's a job where we do MEAN stack apps. The MEAN stack is all JS: MongoDB for the database Express.js for the backend framework Angular.js for frontend Node.js for running everything server-side 
Wow. That is awesome. I wish I had started this earlier, but I am happy I finally found it. Thanks. I guess I will just keep going ahead with JS, and I will continue to learn HTML/CSS on the side, but keep JS my main focus and try my best!
Better late than never! Yes, keep going ahead with JS because it's awesome and there's a very helpful community willing to aid you with whatever you need. There's tons of great online resources and books as well (Eloquent Javascript is very tough but very good). I wish you the best!
It's the exact reason why both '==' and '===' exist. The former converts/coerces values, while the latter strictly checks the identity/reference of the values.
Embrace your true calling. :) Knowledge of advance math (linear algebra, not calculus) will be helpful for a lot of things, and you need geometry, trig, and vector/matrix math for graphics work. Other than that, it's just basic math and a lot of logical thinking.
Thanks!
But forms on the web is pretty common. What's the recommended way of handling inputs in react if ReactLink is such a bad practise?
* Disable debugging information is another one * Reduce watcher count * Don't bind to function expressions but rather their result
I have two questions: will Swift replace JavaScript? and is it time to start learning Swift?
&gt; somebody who has their computer set to YYYY-MM-DD (like me) will never be able to submit the form. That's the first thing I do as soon as I log on to any machine I'll use longer than 20 minutes. I just can't stand arbitrary combinations of numbers, slashes or colons to represent a date. It has to be ISO8601 or I can't take it serious. To the actual question: Try to separate client-side display of the date and internal processing of the date.
Someone else made one before I did.
While I agree that this could be improved, there are reasons for doing this. For instance, if `new sql.Request()` fails, this would not catch it somethingAsync('foo').catch(e =&gt; { ... });
Thanks. In terms of confidence and experience, I think I can do well with the matching code in js. Not so much with HTML/CSS though,. I'm concerned with the difficulty of popping up a select dialog on the input caret position and I was hoping there was a js library that helps me with that. I'd also like completion-on-tab like in typeahead. Was wondering if there's an out of the box solution to this already; the online code editors should've something like this already right? --- Edit: Found these, looks promising: 1. http://hakib.github.io/MassAutocomplete/ 2. http://urbanoalvarez.es/smart-area/ 3. http://eranhirs.github.io/jsTag/ 4. http://ascarbek.github.io/suggestbox/examples.html 
Every example of Redux to API has the URL hard coded. How would you handle a dynamic url, config params, user credentials ? In particular this is one action. You have multiple endpoints.. do you pass in each endpoint ? That doesn't really jive for me. Not to mention.. if you have a lot of actions, middleware effectively intercepts each action whether it has anything to do with it or not. In the worst case.. has to check every single action when an action is triggered. 
The High-Level-Component isn't even be a full replacement. What about selects? text-areas? check-boxes?
If you want it to be available within a textarea, that gets significantly harder. If that's what you want, the SmartArea you linked looks like the way to go.
Sure except I don't think their approach is much better. Instead of binding to a model directly you have to write separate code to do the same thing. They didn't actually solve anything.
&gt;without showing a better way to do it. OP did: &gt;Just chain it god damnit.
oo...... So sorry I wrote someone else's reply to u....... I din't recognize suddenly who is who ..
Thanks for providing improved alternatives. This will be useful for those just getting into promises.
You aren't handling many edge cases here. This is how you do title case: https://github.com/gouch/to-title-case/blob/master/to-title-case.js
Thanks for that! Makes things a lot clearer. I have a question about a pretty specific use case. Imagine you have a search service which invokes another two services (results from two different external search engines). Currently I have something like this: class Search { find(query) { return new Promise((resolve) =&gt; { Promise.all([ (new aSearch(query)).getResults(), (new anotherSearch(query)).getResults() ]) .then(results =&gt; resolve(this.transformResults(results))) catch(error =&gt; handle(error)); }); } } `transformResults`does a bit of normalisation. Does that make sense to you or what you recommend another way of doing this?
So should this give leeway for Dan to create an improved React Transform?
I think I meant to say decimal system. In regular math, 1.2 &gt; 1.109 But in Semver, it seems 1.2 &lt; 1.109 Because 2 &lt; 109.
Hey, do you mind explaining why you start the chain with a Promise.resolve(). Errors are not swallowed when you do this? Tried to google it but came empty.
It might seem foolish, but I believe you should use React for any app with a GUI. Not only on the web, but mobile apps as well(react-native). There might be couple of usecases, where you might need extra performance-for example something like atom editor. In these cases manually rendering would be better. Otherwise in 98 percent of usecases, I think having this abstraction on your UI elements is highly beneficial. Forget Angular, Ember and others. React is the real deal.
Frontend basically is Javascript HTML and CSS?
Indexed color PNG images only allows 8-bit. To add support for 32-bit, I would have to make many modifications. However, I note for future changes. Thanks!
I used https://jqueryui.com/autocomplete/ for an autocomplete field. It works excelent with data coming from an REST Api. With adding this snippet you can even make style the dropdownlist using normal HTML Code: // (found that on stackoverflow) .data("ui-autocomplete")._renderItem = function (ul, item) return $("&lt;li&gt;&lt;/li&gt;") .data("item.autocomplete", item) .append(item.label) .appendTo(ul); }; Why do you need it to work for multiple words at once? Just save the keyword once it is selected in a seperate field and empty the input field, so the user can search for another one. Alternatively you could save the selected keywords, not empty the input field and do string splitting (to remove previously selected keywords from the searchstring) of the input before you pass it into the autocomplete function.
You could use [PhoneGap](http://phonegap.com/) or [Cordova](https://cordova.apache.org/) or [React Native](https://facebook.github.io/react-native/) or [Ionic](http://ionicframework.com/)
It's a way to force the function to always return a promise. If there's an error, instead of the function throwing, it will return a promise that rejects.
learn the UI language for whatever app you're making
I guess I just disagree with you. I see noobs fussing with the DOM with jQuery for hours or weeks, writing nonsense and never getting to write a single line of "JavaScript" because they just want to make a dropdown menu or a slideshow from an ajax request. React allows beginners to write DOM stuff comfortably, so that they can get into the good stuff sooner. It also provides the organization a lot of beginners could make use of while they learn the language.
I think your API isn't self explanatory enough to just provide an example. How is it an improvement on React? How do I make an element with attribute and text? Or attributes and child elements? Looks interesting though!
I also see your assigning to this inside a method call's parameters. That's super confusing. 
then what about: // imagine you have a function which sometimes returns a promise that resolves and other times rejects var returnsAPromise = () =&gt; (Math.random() &lt; 0.5) ? Promise.resolve(1) : Promise.reject(2); function whatever() { return returnsAPromise() .catch(error =&gt; console.log('caught', error)); } and you can do: whatever().then(val =&gt; console.log(val))
Right, skipped that part, but expand the promise initialize method out and put the 'new Request' code in it for the same effect: return new Promise((resolve, reject) =&gt; { var request = new sql.Request(); request.input('a', sql.Int, a); return request.execute('createUserMBoxMessageForAuction').then(resolve, reject); }); 
Possibly helpful then: http://exploringjs.com/es6/ch_promises.html
PhoneGap or Apache Cordova is the way to go.
Sure, that works, but it’s quite different from the original example.
The idea is to build the DOM and get the references at the same time. It's perfectly valid JS and that's just a matter of writing style. Feel free to use your own style ;)
Hi /u/pieroit, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `pieroit.org`. **Also, this post was removed because I see no relation to /r/javascript.** Thanks for your consideration! domain submitted from|count|% :-|-:|-: [pieroit.org](/search?q=%28and+site%3A%27pieroit.org%27+author%3A%27pieroit%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|5|83%
Looking at that I feel like I need to unlearn everything I learned from the Bluebird docs. This is new to me. Thanks.
vdom just doesn't fit to my use cases..
`setChildren` is actually quite fast: http://pakastin.fi/perf
Absolutely, yes! But note that your version never rejects, because `catch()` doesn’t pass on `error` (it fulfills with `undefined` which is the value that it – implicitly – returns). If you wanted it to reject, you’d need to throw in the body of `catch()` or return `Promise.reject(error)` from it.
Things are changing a lot, and Javascript is only going to get better. Good news for you is that JS is becoming more popular in the backend too, if you choose to work on that end. Optionally you can work on both ends just using JS. Further more, JS is dominating the frontend so much that some developers are ditching HTML all together (like myself), and writing everything in JS. If you are curious check out the virtual-dom project and the frameworks based on it (React, Vue, Mercury, etc). If you learn one of these frameworks/libraries they will make you're life much easier than using jQuery. If you want to find out about the backend check out nodejs - its JS for the backend and its lovely to work with. Don't worry about math, for most projects its just not an issue. If it is there is a bunch of libraries out there to ease the pain. Good luck!
Sorry about your team mates.
Mostly these patterns are solutions for OO problems - being that OO is a fairly problematic paradigm. Javascript doesn't suffer from such problems because it doesn't force you to make everything an object. You can be functional, and just make everything functions, and all these problems disappear. It might be value able to do a similar repo but with functional patterns.
No kidding. This article doesn't implement title case *at all*. Capitalizing every letter is not title case. The code in this article would (incorrectly) turn its own title into: &gt; Three Ways To Title Case A Sentence In JavaScript
From [Brave Software](https://brave.com/#safer) Brave's Response to the NAA: A Better Deal for Publishers The NAA has sent a letter to Brave Software filled with false assertions, indicating that they have fundamentally misunderstood Brave. Here are a few misconceptions we’d like to clear up: Brave is not, as the NAA asserts, “replac[ing] publishers' ads on the publishers' own websites and mobile applications with Brave's own advertising.” We do not tamper with any first-party publisher content, including native ads that do not use third-party tracking. Brave is not trying to steal the “profits” from publishers as the NAA asserts. Here again, the NAA has fundamentally misconstrued what Brave does. Brave is building a better ad network with a bespoke browser tied anonymously to the network. We will actually pay the publishers more of the revenue shared through our system than most websites are getting now from third-party ads. The letter falsely asserts that Brave will share an "unspecified percentage of revenue", when our revenue share split has been public and fixed from our first preview release in January.
Angular has a great tool called [Batarang](https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk) that you can use to figure out how many watchers your pages have and where they're being created.
That's fair... though I'm wondering of a scenario where that would really matter enough to write a custom function for it. Any type of CMS system would likely just have the authors do their own capitalization anyway, by design.
Dude what? What isn't css allowing you to do?.. *http://codepen.io/anon/pen/eZyPgE
&gt; I can't believe how much money they throw away. do I have some news for you...
You could easily get the styling and all in a 1kb html file. What a joke (both the TSA and using React &amp; Redux).
Apparently, it has struck a nerve. Seven days after publication, it has garnered over 7,400 views (over 5,600 reads with a Read ratio of 76%) and 58 recommendations (the **most** of all my publications). This makes it my 6th most popular article of all time. Pretty damn impressive. And it's still going strong (the day is half over and it has received over 200 views). If people don't like JavaScript bashing, they shouldn't be reading this (albeit very funny) cartoon. For the record, my Top 5 most viewed articles are: 1. The Three Worst Programming Languages (24.1k) 2. JavaScript is a Dysfunctional Programming Language (19k) 3. The Smalltalk Revolution (17.3k) 4. Dart is Dead (13.3k) 5. A Word from The Beegoist (13.2k)
Adding to that: the most common desired resources that a browser can't access are contacts, calendar, and camera. However, since you're not creating a real product (for the time being), there are workarounds for that. For the hackathon, you can substitute native contacts and calendar with a Google API, and most camera functionality can be hooked in as a file upload. 
no
Indeed, I'm doing something very constructive: advocacy. As a retired IT veteran, I believe I have much to offer in terms of experience and perspective. The advocacy work I do is a purely **philanthropic** act, a civic duty. So last year, I advocated for [Smalltalk](https://medium.com/smalltalk-talk). This year, I'm trying to warn the IT community about JavaScript's unsuitability for proper software engineering. I believe the community is being led down a garden path. Moreover, some of my articles are constructive, for example, [The Super Surrogates of JavaScript](https://medium.com/javascript-non-grata/the-super-surrogates-of-javascript-862460199915). Next week, I will be publishing another *constructive* article, "JavaScript: The Next Generation." I think you'll find it most interesting. Also, in my Medium portfolio, you will find a number of programming tutorial articles. They don't get any more constructive than this.
@author, what is your motivation for creating frzr when react, riot and mithril are already present?
Did the contract include the physical devices?
..and here's server side support: https://github.com/pakastin/frzr-dom/tree/master/src ..also quite easy to get your head around
This [example](https://jsbin.com/ziwod/2/edit?html,js,output) worked fine for me. Edit: [Source](http://stackoverflow.com/questions/2271156/chrome-desktop-notification-example)
No, I'm not. I usually curate the web for the best material to present in my publications. Occasionally, I do create my own graphic art. Occasionally, I do write programming tutorials.
I still need to be able to do **then** on the data which is returned to the controller though
middleware overhead is visible to me when I look at the way some middlewares are coded. It may not matter.. I mean it definitely does it if impacts UX but I haven't tried testing that either. My design choice was to put an application object into the react context, and have the application dispatch the actions. Works for me. Though I would really like to see a redux system that has that value coming from a single configuration point the way I have it done via an application instance. The reason is that if I have say an AuthReducer as well as FooReducer and BarReducer .. if at any moment the current access token is no longer valid, a refresh flow must take place to use the refresh token to fetch a new access token. That would happen in the AuthReducer, however any action throughout the app that calls the API would need to be able to do that. In which case it makes sense that is some kind of middleware. I had a lot of duplicated code that I didn't understand how to refactor.. so I grouped it all into one application class and create an instance of that object on app init. I'd like to see a similar implementation using redux..
The top comments on the [HN article](https://news.ycombinator.com/item?id=11417050) about it go further down this line of thinking: you are making an app for government deployment. Once you have security clearance crap then costs will go through the roof and it's completely independent of what functionality is offered by the app.
... I'm not sure "emo jizz" was the best name choice...
Sure, you can pickup and build both ends if you really want to. But it goes without saying that if you spend more time with one you'd be better at it than if you work with both. I work with both but I spend most of my time in the front. The key to learning the frameworks is appreciating what they can do for you. Understand what pains they remove and what optimizations they provide. I guess you might not appreciate these things until you've spent some time working with vanilla JS and jQuery. You don't have to learn the frameworks, probably the most important part to learn is what they do to make your life easier and understand the concepts they operate on. For example, React has largely popularized functional &amp; reactive programming in the frontend. This is a massive game-changer as it improves the way every front dev works. You can take these concepts and apply them mostly without any framework, and it'll save you a massive amount of frustration and wasted hours. For JS backend, there are not as many frameworks, as it is still a new field. If you want to explore the back without JS I'd recommend PHP, then the Laravel framework. Then again, that means learning object-oriented programming which is a whole other ball-game. What is it you like about JS currently? What might you think you'd like about the backend vs frontend, based on your understanding so far?
Sounds like you might have already chosen deny in the past, you should be able to click the icon next to the url and see/change the permissions there.
No, frzr-dom is just for server-side rendering..
You can mount both elements and components (when they have HTMLElement in `el`-parameter) to both elements and components.. Basically it works just like: `(parent.el || parent).appendChild(child.el || child);`
Cool, good to know. It's been a few years since I've looked at either one. Last time it was right after the Adobe acquisition and they were the same thing at that point.
[💦💦💦💦](http://emojipedia-us.s3.amazonaws.com/cache/f3/30/f3302eeb52b7601fb36fb4c35a362c55.png)
I used to have a co worker who complained about how much my old company would sell a site for. It would take about 2 weeks of pure development and not one was under $75k. However, after the countless meetings with the client (travel cost, plus account director salary), then UX, then design, and then development. Include testers, managers, project owners, software and equipment used...etc. and you easily see where the $75k price tag comes from. I mean for the developer alone, you are paying about $3-7k. Now add the rest of the team whose numbers are double digits and the profit is cut quite a bit. 
&gt; example Thanks for the example link. I gave it a Notification.requestPermission(function(p){ console.log(p);}) And checked in the [console](http://imgur.com/7kS3AM2) and it showed denied. So how can i just ask for user permission instead ? Any idea ? 
No prob!
The same usually. once you get the foundation which may be overkill for this, it's smooth sailing. Actually a lot of basic todo app examples look overkill, but it's just initial framework overhead. with complex apps, it makes it much much easier to code and manage and in the end you end up with much less complexity. 
It happens with the public and engineering infrustructure projects as well. Everyone looks at the face value of a product like an interchange, and goes "well theres no way that is worth 2 billion dollars" and dont realize all the background stuff that happens. From engineering, design, paperwork, materials, surveying, etc etc etc.. People look at face value and stop there because their understanding usually doesn't go much deeper that what they see.
I wouldn't call it "great". It's buggy and not as helpful as it really should be. That being said, it's sadly the best dev tool for Angular. I wish Google put as much effort into Angular's developer tools as Facebook puts into React's.
Hahaha, let's hope you're the only one who thought of that ;)
&gt; This is the reason you will still find Angular code that wraps the $http calls in a proper Q promise. Angular is starting to seem like PHP of MVC frameworks. Popular, but shitty.
Well at least it can serve as a good react-native, redux boilerplate
btw. you could probably make another `List` for cells? Just make a `Cell` component and use that.. that would simplify it hugely.. It's really nice to see you get excited – and at the same time good to see what's easy to understand and what not.. I try to make my own version tomorrow, and let's see how it differs :)
From a users perspective, he might as well be cutting and pasting the content onto his own servers, less the "third-party" ads. I think it will be an intresting case. 
..you can also avoid nested updates by using components more ;)
I like it a lot. Very easy to get started with.
I've used nearly every popular view library and I can recommend Vue as perhaps the easiest to comprehend among Angular, Ember, React, Aurelia, etc. It's got a very simple API but enough powerful features to be able to build serious applications with. Give it a shot!
&gt; The TSA is no longer using the randomizer app Well, there goes the meetings, development, testing, deployment and 336k dollars straight to the toilet. Easily they could have made initial trials, and analysis with a simple app, detected it wouldn't work, and save 336k taxpayer dollars. I wish the developer community moves from "hello world" tutorials, to something like this app. It would be hilarious if the standard "hello world" tutorial becomes the "million dollar app" tutorial.
Then it seems like Uknight is right, it is being blocked in your browser settings. Go to chrome://settings and search notifications, check that you aren't blocking it by default, if not click Manage Exceptions.
Sometimes this is needed, if you are using a library like Bluebird, those API that return promises won't come with the sugar that comes in Bluebird so wrapping it make the code that consumes this be sure that it will always be a Bluebird Promise, I agree with you tho, I have seen this problem too many times.
There's "Ohter" written instead of "Other" in acquisition channels mate Apart from that it's fucking beautiful, congrats :)
I haven't used it very extensively, but the page that shows watchers is pretty helpful. What have you found buggy about it?
Here's an example of using the second arg: http://codepen.io/pakastin/pen/NNXoRG (create couple of links and click up/down votes + use the dev tools elements inspector to notice DOM updates)
Oops) thanks!
Not sure about gamified stuff, but here are a few [resources](http://codecondo.com/learn-ecmascript-6-resources-javascript-devs/). I really like the [babel REPL](https://babeljs.io/repl/), too. Good luck!
But any browser can do this. I can write a Chrome extension that does this. And people have. It's called AdBlock. The only difference is that Brave actually tries to ad drive revenue back to the publishers. I.e. more than the 0 they get with adblock.
Egghead has a bunch of [free video tutorials on ES6](https://egghead.io/technologies/es6), and if you pay, you will get the challenges as well. This Github project will give you a [step-by-step guide](http://ccoenraets.github.io/es6-tutorial/) to building a a basic calculator with ES6. [Nodeschool](http://nodeschool.io/) has a bunch of command-line based challenges on ES6 for beginners.
I love how it's written. It doesn't feel too abstracted while providing all the functionality you could want. And more importantly, *I* get to write the whole component. I'm a huge fan of rolling my own work and this feels like I've already built it. Hell, think I'll finally rewrite the views on my twitch app with this!
What is your goal for learning JS? If you are a beginner looking to do web development, have you checked out the free interactive courses on [Codecademy](http://www.codecademy.com)?
True. Fixed now, thanks!
I'm just trying to learn some basic front skills. I've done a few courses on Free Code Camp but not Codeacademy. I'll check it out, thanks. 
It's all well and good until you start making money selling ads to view other people's content. Then the lawsuits happen, and a judge will decide whether your business unfairly profited. It's a pretty big risk, I'd be selling my investments in their company right about now. 
The watchers page is great for finding performance issues. However, I more commonly use it for debugging and have found that the page that shows the scopes will sometimes not show data that is there, and the dropdown for each of the scopes doesn't always work. I like ng-inspector more for debugging scopes, but it doesn't have the watchers page, so I generally still use Batarang.
Oh calm yourself, it's just joke
You've got an extra semicolon at the end of that last one (inside the lambda).
Consider riot.js too. Even simpler to get started than vue.
TL;DW?
VueJs actually targets beginners. It is easy to learn and plays nicely with other js and CSS frameworks. [Vuecasts](http://www.vuecasts.com) is a good place to start
Hi /u/firasd, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `medium.com/@firasd`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [medium.com/@firasd](/search?q=%28and+site%3A%27medium.com%27+author%3A%27firasd%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|10|91%
And that's certainly something we can agree on :)
Pretty much all of those shady search toolbars have been replacing ads and hijacking links for 15+ years. That practice is not exactly new.
The code school one of very good IMO
Renamed: https://www.npmjs.com/package/magic-window No bonus points though ;)
I will let you know the updates on this front in the next weeks.
It's nothing to do with "trendy". He's upset because it's code using a stable, non-trendy part of JS (Promises) in an entirely incorrect and ineffective way.
Thanks!
Actually the thing with React is that it makes writing a simple TODO hard, but large and complex apps easy. 
I'm giving a talk next week, where I will teach in 40 minutes how to build the whole thing (a bit simplified version) and use it. The beauty is that you know how everything works and are not dependent on anyone. I've had too many situations where framework updates break my work. Investing on plain JS is a safer bet!
&gt;But dbmonster doesn't even test DOM reordering which is where FRZR shines Benchmarking one use case like reversing nodes doesn't show anything, try to sort nodes, move just one node, something that is closer to real world scenarios. Or you can just reimplement this simple React app https://github.com/localvoid/uibench-react/ with your library and we will see how it handles different use cases in http://localvoid.github.io/uibench/
It has been a pleasure to work with Vue. Do it!
Can I push an html example?
*unjustified* is more like it. /Flickr used to be such a great place. :(
Fixed, thanks!
reordering is the extreme case, when only few items are reordered, it does nothing extra: https://github.com/pakastin/frzr/blob/master/src/setchildren.js#L12 I've battle-tested FRZR in couple of large apps and Riot.js uses the same reordering method (since I wrote that part).
A few good points: - if you turn on HSTS don't assume you can stop using the secure flag: HSTS-unsupported browsers will be left in the dark - generate a new unique session ID for each authentication - invalidate the session on the server-side when a user logs out - omitting the cookie domain may allow the cookie to be read from subdomains, which may be more accessible to attackers - the HTTP-only flag prevents reading the cookie in JS but not necessarily overwritten in JS There were others and I didn't watch the whole thing but this is a good list to start.
It'll also crawl the prototype, which may have unintended consequences. You should check 'hasOwnProperty' if you're using for in
Thanks for the reminder. Will make an effort to be more broadly active on Reddit.
Probably [these](http://gsec.hitb.org/materials/sg2015/D1%20-%20Dawid%20Czagan%20-%20Hacking%20Cookies%20in%20Modern%20Web%20Applications%20and%20Browsers.pdf)
The thing is that more complex diffing could be even slower, and the whole point is to keep it simple.
All fastest vdom libraries doesn't have problem with such cases.
I highly doubt that..
**Absolutely not.** Copyright restricts my ability to distribute a work, or to distribute new works derived from that work, subject to a wide array of exceptions (first sale doctrine, fair use, etc.) Copyright does not restrict my right to modify a work. I can purchase a copy of the *Twilight* series (copyright Stephenie Meyer), cut it into strips, rearrange them randomly, and laugh uproariously at the fact that the story now makes more sense than it did before: No problem. I can, in fact, do anything I want to my copy up to and including lighting it on fire. What I can't do is make new copies. To the extent that Brave is modifying the users copy of the webpage, obviously (in my view) copyright is in no way implicated. (Now if Brave was operating servers that acted as proxies, stripping out existing ads and adding new ones, then redistributing that to the users, that might not be okay. And in fact, this is similar to what Google News does, and they've lost lawsuits in some European countries over it. But it's not what Brave does.)
It has some drawbacks as others have noted. Also, I personally have more or less abandoned for loops of all types in preference for `map`, `reduce, and `forEach`. The link gives the example of: let iterable = [1, 2, 3]; for (let value of iterable) { console.log(value); } But you could also do: iterable.forEach(value =&gt; console.log(value)); In general, I find for loops a code smell. They're verbose, awkward, and are vulnerable to a couple of classes of obscure bugs (`hasOwnProperty`, off by one errors, scoping issues, accidental mutation, etc.).
This can be achieved by styling the label and hide the actual input. Similar to a checkbox/radio input. Or am I missing something?
I have taken the post in question down.
I have indeed taken down the post - but not on your account.
Reading your post history, you seem to be a very, ah... agitated personality.
I love laracasts!
Is there a short explanation of what Vue is good for and how it differs from the competetion? I see a lot of angular-inspired syntax, but I also heard it has React-like virtual dom. 
Yes it is.
Not *very* short but vue's site has just the thing: https://vuejs.org/guide/comparison.html
Not something new or cool, but i tackled a frustrating issue with our dev environment. We use a docker container to run our local environment with necessary dependencies preloaded inside. Midway through the week our builds suddenly started failing with an error while cloning the bower dependencies. Head scratching ensued because the git repositories bower was cloning from worked just fine for us to try outside our docker container, and nobody had changed any of the dependency versions inside the container. Upon further inspection, turns out bower themselves converted all repository addresses to https:// from git://. Normally this would not have been an issue, except we realized we hadn't included any user info in our git config. Simply adding a user.email and user.name to the git config inside the docker container allowed bower to successfully clone the https:// repositories. 
Got any tips for making async calls in the backend synchronized?
I really don't get this post. I understand he proposes to have different functions in the dev/prod environments instead of having conditional statements inside the functions checking the current enviroment, but how he wants to implement this? 
Yeah, this would fit in one file (one component!). Why did the author use Redux?
A for/of loop doesn't have the hasOwnProperty issue since it uses the object's iterator. I prefer the functional programming methods too but I don't view loops as a code smell. 
It's such a shame, I did some early work with DNode (and did a [very bad talk on it](https://vimeo.com/45140585)) had so much promise (no pun intended). About the only thing still actively being maintained seems to be https://github.com/strongloop/strong-remoting, but I'd be wary of using it with Strongloops restrictive licencing. I wish I had time to take on DNode and bring it up to spec.
Why not use [socket.io](http://socket.io/) instead of RPC? That allows you to write a client for browsers as well as pushing data from one nodejs service to another.
We had an application with a lot of custom events once. After a few months you forget which controllers are listening to events, or you find a $on without knowing where the event is coming from.
Sounds great, but 8-spaces tabs are disgusting :/
Just published a pre-release of Pretty Diff 2: * http://prettydiff.com/ignore/testlocation/ * https://github.com/prettydiff/prettydiff/issues/292 Release notes at http://prettydiff.com/ignore/testlocation/changelog.md
great. now i know that meteor was not on npm before.
Exactly, at some point we forbid to declare any events in our apps. Now we have mandatory constants for each events, and only use them for the specific uses cases described in the article =)
A chess game I made :) https://rawgit.com/quoctran98/Chess-Js/master/Chess.html Just starting out learning to code and this was a really fun experience 
Is it still possible to deploy basic Meteor apps for free? I am confused about how the Galaxy platform works. 
Well, I use it because it's simpler, fast as fuck and has no baggage. Edit: ooh.. express-fans. :) Edit2: Look.. I'm not trying to be a jerk here.. but .. feedback, guys. A downvote without an explanation is worth nothing to me and frankly makes me think you're ganging up on me just because.
don't know. Have a look at phaser.io too.
Why it is so discontinued then? Today more and more applications are build as micro services communicating between each other, and in this case it is much easier to communicate it using RPC instead of rest - no needing to bother with rest apis, controllers, middlewares and such, just call remote procedure, get its result and volia.
Thats a quite good solution, but it does not allow to write me a request-&gt;response, only pushing and pulling data. I'd love to have a feature that waits for result and returns data, like a remote function call with result.
/u/smdaegan did. :)
Depends on what you mean by code smell, I guess. For me, seeing a bunch of for loops in some code is a sign that the code may deserve a second look to make sure it's not doing something obviously stupid. It doesn't mean it's wrong or shouldn't pass code review; just means that it's something to give a second glance. Maybe "code smell" is too strong. Code that uses it has started to look funny to me though, I guess? :)
Literally just found it, looks quite a lot better than kiwi tbh.
it seems it is a child project (pahser being a rewrite of kiwi) AFAK
They should completely stabilize when under certain distance from their original position. I can increase this distance a bit. Edit: Oh but it seems to be bugged a bit. I will work on fixing it. If you blast same nodes multiple times they sometimes never understand to completely stop.
So are they mainly targeting professional developers?
Serve request from php file, jQuery that file
Really? I would guess the other way around. Phaser seems to be a lot better written.
If you put that code in the wild everybody would see your key
I just released a quick start project for making Electron apps with ReactJS frontends. I'm considering making one for Angular/Aurelia/etc as well. * https://github.com/ayasin/electron-react-minimalist-bootstrap
I wouldn't say so. Removing the free hosting tier was possibly a strategic move to avoid having to use resources on maintaining it instead of developing the actual product that is Meteor. I would say it sucks that they removed it as it makes it harder to develop and deploy demo apps, but I think the resources they used on the free tier just so people could deploy dead-simple apps wasn't a good priority. 
I almost puke every time I see a for loop with "hasOwnProperty" checks inside. It's like time traveling to the JavaScript world of 10 years ago. 
Exercism.io has code exercises for ES2016. They are labeled under ECMAScript rather than JavaScript, which is ES5. 
I love Meteor and it's exciting that they introduced NPM finally. Next biggest step for me is introducing the Apollo Stack so i can finally move away for Mongo
Html developer 30 year experience. High value tag skills.
Cool story, bro
Hide the cursor. You'll notice it's much harder to identify the lag. Now try to hide the real mouse cursor, and show a fake one pinned to the circle. This will almost eliminate the perceived lag. Of course this does not work for touch, where the finger shows up the lag in the input pipeline.
You could deploy Meteor apps for free on Heroku. The Galaxy platform doesn't have a free tier.
Digging through your code, aside from the Apache proxy configuration, it's just a package that gives examples on how to structure your files according to the MVC philosophy, not a "framework" per see. A framework provides an API and/or structures/objects/modules to help build an application according to the way they see it's best. In case of MVC, on models, the framework would provide a querying API, for example. Your framework just tells "put files in here and structure them however you want", which is how everybody was doing before without any framework at all anyway. Why would you use your framework, if I actually need to do all the "framing work" anyway?
They had their own package manager: https://atmospherejs.com/
Good to hear. Monads aren't simple. Many people have made articles, and as you have learned, there's reasons as to why they are not straightforward although I commend you trying, be wary of spreading misinformation to novices who will propagate flawed knowledge. 
You provide really good documentation for such a simple frame, so props to that. I'm sure that, even if people don't use your framework, they can still refer to the documentation for tips on how to structure MVC.
Well, back then when using mySql seemed to be a daunting and arcane challenge (lol), I turned to Firebase to simply access my asset configuration files (ie. my data, not the actual assets, although it is a perfectly good hosting solution too). And for that purpose, it is a really good tool. There is a bit of a configuration task first, regarding access priviliges, etc, but then, you are pretty much free to make connections (two-way-databinding types, to say the least) with the server, and that works well. But now, I think Firebase itself is better suited to chat-like (forum-like) applications as well. Not to say I would not use it for anything else, but now that I have a solid handle on mysql calls, I hold no fear over that anymore. Crossplatform is easy, since you do not need to manage platform at all. You just create a firebase ref from your javascript code. So it is all handled client-side, the type of your machine does not matter at all. 
I have a free project-based video course about learning JavaScript for web development, http://practicaljavascript.net. It focuses on a single project that you build throughout the course. That way you can immediately see how to use different JavaScript concepts in real-life projects and scenarios.
don’t forget `forEach`’s cooler brother, `some` (it’s the same, but supports breaking and returns `true` if broken out of) but for..of has no problem with `hasOwnProperty`, off-by-one errors, … furthermore, using for..of loops combined with generator functions and for comprehensions, you have more power with nicer syntax IMHO.
Huge!
Fantastic!
Good stuff. Server's getting wonky though. I picked a class right as the server had a rollback and good god I started getting obscene drops, health, energy, shield, max power etc. Pretty sure I was playing as every class.
THANKS for dat.gui!
Really bad. I downvoted this.
Hahahaha what a fucking idiot you are, /u/derfleurerx. You are going to fail and you absolutely deserve it.
ok?
That was a fun game, good job! Any plans for future updates?
&lt;3 Thanks for checking it out! 
We've been working on it off and on for about a year. We wrote it from scratch, it's just HTML5 canvas :) The collisions are one of the most fun parts to program. And they could still use a bit of work for sure. Thanks so much for checking it out.
I think it depends on the type of product you're trying to build. If you need real time data syncing across multiple clients, then firebase is a great way to go. If you're just thinking in terms of data storage, I would recommend looking at mongodb or couchdb and nodejs. If you have mostly front end JavaScript experience, look at node based web servers like express or hapi. You're already a full stack developer if you know JavaScript.
Thanks for the reply ricemast! And example would be really appreciated. We have no coding experience on our team and most things have been difficult to follow.
Good work! It's inspirational to see people make cool things! I've messed with websockets once and its pretty cool. Definitely opens your mind to some cool ideas.
Very fun
That was about `for in`, not `for of` ;) 
It can. I believe this approach is better because it applies no styles, introduces no extra DOM, and has better defaults. Having no extra styles means you can style it as you do any other button, without fear of breaking it. Likewise, having no extra DOM means the element doesn't require special treatment from JavaScript that handles it. Buttons, by default, have non-selectable content, are focusable, and catch theming you've applied to other buttons. These are generally things that people end up manually doing to non-buttons serving as file inputs.
That's what I said.
d3.js
I was talking about all the variations of `for` in general. I suppose that was unclear though... :)
Array.map, Object.keys, lodash methods. 
Thank you for the feedback, I've added a link to a JSFiddle in the README.
Really cool - the [article on how the algorithm works](http://code.flickr.net/2015/03/24/much-photos/) is great too! OT: I think there's [a typo on this line](https://github.com/flickr/justified-layout/blob/master/src/index.js#L65) - else you just want to be *realllly* sure that item is truthy ;)
Nice job, networked games are really hard. Next you should try to implement clientside prediction, which will help make the movement feel much more smooth.
It does not crawl prototype, you confused it with `for...in`. `for...of` is implemented using ES6 iterators, a regular JS object (plain or extended) doesn't have an iterator implementation. http://www.2ality.com/2015/02/es6-iteration.html
`for...of` does not crawl prototype. `for...of` is implemented using ES6 iterators, a regular JS object (plain or extended) doesn't have an iterator implementation. http://www.2ality.com/2015/02/es6-iteration.html You can try this yourself on [Babeljs](https://babeljs.io/repl/), it will tell you `obj[Symbol.iterator] is not a function` ---- Also `forEach` is not functional, unlike `map`/`reduce`/`filter`, it is guaranteed to produce side-effects. This article goes into detail: http://aeflash.com/2014-11/avoid-foreach.html . 
I refuse to `then` off of anything except the finest Bluebird promises 
1. When your server side app is turning into a brittle monolithic codebase. When you need to hook up your data to multiple front-ends (for instance web and native mobile) When your front end needs to talk to multiple backend servers (micro-service architecture). When high traffic causes you to pay for multiple fat servers. 2. For anything app like I would start with js right away. Simple blogs or static pages with forms I would not. In fact I would like not use server side mvc for that anyway, just plain html with some jquery ajax to a restful backend. 3. Your backend server would need to be in charge of interfacing with the database the same way you would in server-side mvc. Only difference is you're generally sender back json data to the front end rather than rendered html.
TL;DR ;-) (the whole story) http://www.html5gamedevs.com/topic/4281-kiwijs-vs-phaser/ 
1. If the app you already built is hitting some type of performance peak in PHP and you need more out of it. NodeJS is definitely faster but remember if your logic / code is not profiled and has its own issues than transferring it to JS may not help you to gain any real value. 2. PHP has a TON of support. There is practically a library available for anything. If you don't have experience with JS and want to solve a problem quickly, you go with what you know. PHP, Ruby, JS, Python, whatever.. if you know something and you need to solve a problem.. you use what you know unless you have the time to learn something new. 3. DB's are language agnostic. It doesn't matter what language you're using to call the DB. If your queries suck then so does your DB performance. While NoSQL's have gained in popularity.. it should be noted that SQL (MySQL, Postgres, etc..) are FAST AS FUCK. Any time I have personally had to deal with an issue related to DB performance.. its almost always the logic in front of it, the queries, or lack of proper indexes. Though of course this is generalizing.. everyone uses DB's in their own way. In any case you can always shimmy a Memcache / Redis server to provide a caching layer that absolutely helps with performance. 
Yes see https://npmjs.org/co or https://npmjs.org/bluebird which has a coroutine method 
Good point, although I meant in a native context. The coroutines in the screenshot are all executing on different cores.
Hello, when Famous abandoned the open-source project, some of us in the community started our own alternative. We're building it from scratch, in the open, and it's here to stay: http://infamous.io (name subject to change). Join the discussion at http://forums.infamous.io and contribute at http://github.com/infamous. Cheers! - Joe
&gt;When your server side app is turning into a brittle monolithic codebase. When you need to hook up your data to multiple front-ends (for instance web and native mobile) Wait what? First of all, is very quesitonable that a monolithic architecture is actually bad (as in, it should be avoided at all cost in any project). But ignoring that part, the fact is that if you use a server-side MVC framework there's no reason why your app: * Has to have a monolithic architecture * Can't be connected to multiple front-ends 
[removed]
[removed]
Not quite sure what you mean? In terms of fetching data from the backend I'm just using regular callbacks and promises before calling the rendering function.
It's late, so I apologize that I'm too lazy to provide a lot of detail. Regarding the simple animations on the site you linked, CSS3 animations probably do a lot of it. For any charts and visualizations that use data, you'd use d3.js.
What is wrong with Mailto.ninja that has you looking for alternatives? I would suggest standing up your own mail server and posting the output of the modal to the mail server. You can build your own modal pretty easily with a `&lt;form&gt;`. You can use `e.preventDefault()` if the href starts with `mailto:` and instead open up your modal. Alternatively since you are in control of the website you could just make a button launch the modal.
I think a Symfony framework can do everything, however for dealing with nice sleek DOM manipulation using Angular or React may prove better than just Twig and jQuery. I find there is a happy middle where Symfony is an API engine with template generation and security considerations, while Angular takes care of the candy in front. Frankly I think the JS world has gotten a little bit out of hand, putting too much responsibility on the front end of the stack. Everyone is croaking about efficiency as a key factor of good front end manipulation but they're forgetting that not everything has to be generated by JS. I can see that slowly tapering off with server side rendering and thanks to Node server capabilities. Also the new Symfony will come with Angular Twig integration which will smoothen the process. The way I like to build things is let Symfony manage Bundle scope routing, then let Angular deal with individual mini apps like they are SPA's. This way things are relatively well divided and independent, but they share a common ground with the framework and they're easily swappable and relatively easy to maintain.
I don't think there is any question that problems with scaling monolithic architectures was the primary driving concern that sprouted all of these distributed, client-side solutions. That being said, many implementations just don't have enough users to care. Also your idea of "front ends" seems to assume that they are all web clients. Once you start dealing with native clients on mobile platforms, I don't see how your PHP solution generating HTML helps anything, whereas a RESTish (or whatever) solution with client side rendering works just fine.
Maybe I'm missing something, since I'm viewing on mobile, but couldn't you just use semi-transparent gradients, without the need for a plugin? Please correct me if I'm wrong. 
Woosh
&gt;Also your idea of "front ends" seems to assume that they are all web clients. No I don't. You can expose a REST service easily with MVC frameworks (at least in the .NET world. I doubt things are different with PHP).
&gt; NodeJS is definitely faster.. And NodeJS is not particularly fast, so that's saying something. The TechEmpower benchmarks shows that Java and C/C++ based solutions are almost an order of magnitude faster than either, so if speed is your honest concern, you wouldn't be switching to NodeJS. 
Call me ignorant, but despite the attention it has received so far, the fact that it is coupled with Mongo left me completely uninterested in it. Ended up playing around with other technology and completely dropped JS on the backend. No regrets.
The point of Promise is not to write try/catch manually.
That's an unnecessary micro-optimization. /s
Accessibility is an unnecessary micro-optimization. /s
You can check whether the key is populated using: Object.keys(xp).length &gt; 0 Or if you want to be more specific and look for the existence of a specific sub-key: typeof xp.favorite !== "undefined" // or "string" or whatever type you're expediting it to be // or this xp.hasOwnProperty("favorite")
Mailto.ninja didn't use JavaScript to send the mail, just to present the form. Once you set it up people could click your mailto link and a nice looking email form would pop up to be filled out. It'd then use Mailgun or Sendgrid behind the scenes to deliver the email. 
They aren't selling it. An end user makes a request for a page and their browser displays that page as it sees fit. That's not stealing. You made your content accessible to browsers.
Comment of the year
* 1. I'd have to evaluate if the change would negatively impact my existing users, as in... some crazy esoteric son-of-a-bitch is going to probably be using my system with lynx cross compiled on to run on his old SCO-Xenix box.... If I'm okay with alienating him (which I am) then I know the option is at least viable within my userbase. * 1.b can I offer both options as an upgrade path.. (leave existing php pages, extract data collection into some api, use those for front end data points) * 2. I almost always just start with a js framework tooling path. * 3. I do a lot of work as a "scale up/out" consultant so often whatever business logic they have tends to stay in whatever language it was already in. We just patch it into a MQ like Rabbit to inter-operate with the NJS api server. * 4. For my previous applications, it's been considered a bit of a time sink, with the ability to move forward, it was marked as a tech upgrade because we/the know they wanted to implement X in the near future (usually involved web sockets) * 4.a Also sometimes its just easier finding JS talent now. * 5 I would probably suggest keeping all user/session validation mechanisms as modular as reasonable (which is good design practice anyway) That way user_profile_page.php and api_user.php can be upgraded to server rest_api_user.php and your rest api will follow the same ACL's your original user_profile_page did (at least... in theory) I also suggest going through the trouble of having some sort of at least simple ACL - your SPA's need to be able to say "can I get to user profile or (what do I got)" through the ACL api (so it can present a user error, or deny functionality) , I often find these sort of standard view questions, hacked on top of some random function/api that has magical constants.... do better than that... 
The main question is how to display in each element appropriate chunk of background. JS plugin may be ommited at all, I mentioned this at "How it works" section.
Indeed, I've tried to contact the original dev, but he's just not replying.
How would I set something like that up?
In DDD land this is called a repository. And once you start using them you don't need sinon at all. Just pass in a repository implementation that returns a constant and assets the arguments. How do you pass in your another implementation of repository? Why with dependency injection of course. Make all your objects factory functions and injecting dependencies is easy
What do you mean by let the browser tab be the session?
You store the session state in Javascript objects in the browser instead of on the server or in a database somewhere. 
If performance is your problem, GO is a very good contender with a very simple syntax compared to C++ and even Java.
I don't follow. Isn't this just a background image with a couple of boxes on top? And since these boxes have a slight transparency the background image shows through.
*Now* I get what you mean. After re-reading the description on your site I understand what this is all about. I thought you were talking about the background photo.
True, the specific implementation here could be called a repository. The high level name for any kind of object (repository included) which hides away hard to test code can be said to be humble object in testing lingo anyway :)
I used firebase for a couple of pet projects. REALLY liked it. Only problem was that storing more than a trivial amount of data can get really expensive. But if you don't plan to store large amounts of data I'd recommend if.
Ive been using Symfony as a platform of choice for the past seven years. PHP itself has improved vastly over the last couple years. Personally speaking, language choice isn't as important to me as the problem that needs to be solved. If performance is a problem then first step is to definitely find where that performance bottleneck is. If the view layer is the issue, then you may want to offload (some) rendering to the clients. Though again.. not all clients are equal. The server side is the only thing that (usually) remains consistent. Animations for example are probably client dependant. You can detect whether a client is good enough for animations.. and if so, allow animations, or provide a toggle. 
I did this once, with the NodeJS Twit npm too. If I remember correctly, you need to pass the "in_reply_to_status_id" to Twitter API on a status update to tell it what it's in relation too. I'm guessing your code might not be passing it through correctly as it is in there. 
Yeah, you definitely have a point here. That's why I mainly like to call it a DOM building utility. For full fledged templating for a large project I also prefer Jade. (I also try to keep them as dry as possible by keeping all business logic out of the templates). However, for small single page apps and prototyping I like to use Shaven. It's just much more convenient than fiddling around with `document.createElement` or with jQuery. Another great use case is creating SVGs. Because of the heavy usage of inline styles and the necessary geometric calculations normal templating just doesn't cut it. This is really where Shaven shines!
sorry, I dont know why I read it otherwise.
This is all you need to know. [Memory Management Masterclass with Addy Osmani](https://www.youtube.com/watch?v=LaxbdIyBkL0) [The Breakpoint Ep. 8: Memory Profiling with Chrome DevTools](https://www.youtube.com/watch?v=L3ugr9BJqIs)
In front-end: this could be a question about clearing up outstanding async calls when you navigate between states in a single-page-application.
ES6 generators are shallow coroutines: http://calculist.org/blog/2011/12/14/why-coroutines-wont-work-on-the-web/ But true coroutines are not compatible with JavaScript’s “run to completion” semantics.
Ah! That sounds like exactly what I need. :) Thanks!
:)
Arrow functions serve two ideals - a little nicer syntax, and a developer guarantee that the this object is sane. Because mixing sane arrow functions and insane function-functions is a bad habit - stick to using arrow functions as much as possible. In my code, the only exception is when I have inner functions that are for some reason unreasonable to declared inline. I find "const fn = ()=&gt;{};" too unappealing. 
This is really big news for advertising metrics.
You should use fat arrows for 95% of use cases.
I'm always using fat arrow. Fat arrow prevents usage with "new". It also makes currying concise. const gt = a =&gt; b =&gt; b &gt; a [ 1, 2, 5, 7 ].filter(gt(3)) // [ 5, 7 ] The only exception right now is when I want to extract "arguments" object.
Well, I'm not really sure about that. I think that they should be used: * When you want to bind `this` * To simplify return statement, e.g `ar.filter(item =&gt; item.checked)` The only reason I can see to use them elsewhere is for styling reasons - which is debatable.
I'm not sure that mixing the two styles would be a bad idea as they both carry a different sense as it tells you something about what's going on (at least it should). I agree about `const fn = () =&gt; {}`, I've always found `var fn = function () {}` to be sad anyway.
Good point regarding `this`. I thought about the fact that `() =&gt; {}` implies the use of the outer `this` but not that `function () {}` implies nothing clear about `this`.
Actually, writing functions like that reminds of Haskell's type annotations because it is already curried. It does mean that code can look like this `though()(a)(b)`.
What would you convey with something(() =&gt; {}) vs something(function(){})? That you can't reason about the this? That the this shouldn't be used? I really don't see the benefit... It's not that I'm too lazy to type "function", I just think arrow functions are way easier to reason about. I prefer their behavior in *all* cases. 
I don't think that's easily done. Traditionally, JavaScript is designed to be run in a single-threaded event loop. If you try to execute them in a non-single-threaded environment, a lot of existing code might be incompatible. * There is no mechanism for resolving state changes by more than one concurrent thread. (e.g. if 2 threads assign different values to the same closure variable, what do you do?) * There is a predictable execution order when everything is executed in a single-threaded environment. * Promises and most async callbacks have exact execution orders specified in the spec. Maybe you can keep track of all the states yourself, and manually unload/resolve discrepancies. 
It has nothing to do with HTML or JSON, it has to do with where your data model is bound to your user interface. Terms are only stupid if they don't communicate information to other people/developers. "Back-end MVC", communicates architecture very well IMO. 
Come to think of it, I think you're right. I think I'll have another look at my approach, and use separate contexts for each thread. This should make sure that no two threads can access the same variable at once, while still allow concurrency in the engine.
[removed]
I was actually thinking about something like that as well. Currently the lines are drawn with just lines, but the graphics library allows for arcs and bezier curves as well. Arcs I haven't figured out yet and they show up invisible, and for beziers I need a way to draw them from point1 to point2, meaning that the control points need to be calculated somehow. Then again I could also add invisible points to the lines to make them more "elastic".
Two more points. First, the maintenance path for both are different. A PHP version upgrade can involve running an executable that makes all the needed changes to your files. Maybe consulting a comprehensive PDF describing any remaining breaking changes. A JS upgrade... Well, the template library you selected is hemorrhaging market share. The core MVC library itself is totally different in the new version. May as well throw it all out and start from scratch. Admittedly I'm comparing the best case PHP upgrade against the worst case JS but it's still valid. Lastly, if you're working in PHP and JS, you'll never be as strong in either as you'll be in JS if that's the only thing you're using. 99% of the time this doesn't matter but when it does it can be the difference between relying on someone on stackovwrflow to fix your issue for you or being able to work through it yourself. 
Yup. "Viewability" is the bane of web performance engineers everywhere. This could go a long way towards alleviating that pain
I wish that we had the benefit of fat arrow without the inconsistent formatting. Arrow functions are good because of the optimization potential... no `this` and no `arguments` means the compiler can slim down the overhead of executing that function. I really dislike the variability of the syntax: foo.map(a =&gt; a.bar); foo.map((a, b) =&gt; { let c = a + b; return Date.now() + c; }); foo.map(() =&gt; 2); Then you get into the unexpected yet not invalid syntax: foo.map(a =&gt; {foo: a}); Which returns an array of `undefined` because the brackets represent a block scope, not an object, and the `foo:` represents the [nearly-forgotten label](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label), so you don't get what you want, you actually wanted this: foo.map(a =&gt; ({foo: a})); // As pointed out by hombrebuffalo foo.map(a =&gt; { return {foo: a}; }); // Still valid, but crappier. Edit: Incorporated return object syntax from hombrebuffalo.
If you want an expression returning an object, you can put it in parenthesis to disambiguate the braces: foo.map(a =&gt; ({foo: a}));
It has nothing to do with HTML or JSON, it has to do with where your data model is bound to your user interface. ^this. I'm rendering my json in a 'view', however the information returned in that view may only be loosely correlated to the way the data is shown in my front end. It's that freedom to manipulate and associate that data in varying ways that makes client side apps so attractive, even in the absence of native mobile consumers. 
I have a hard time remembering that one. Rather than having one return mechanism, we now have *three*, depending on what you are returning or how many operations it takes.
Why not foo = doStuff
I disagree with the premise that this is inconsistent syntax. Arrow functions require a way have a function which returns nothing. Having outer brackets without surrounding parens is a fantastic way to denote this that is consistent with the current function syntax, as well as every other conditional blocks, i.e. switch statements, if statements, for loops, etc. Should we break that convention just because new users to es6 might make a mistake assuming all arrow functions implicitly return? If you wish to return an object literal, as /u/homebrebuffalo stated, `() =&gt; ({ object, goes, here })` This being said, this seems to be a reoccurring complaint amongst new users of es6 which I think is completely unfounded. I challenge you to think about the feature in the greater context of javascript syntax, as well as to suggest what you would consider a superior syntax to be which both meets to requirements of arrow functions as well as not breaking any backwards compatibility of any earlier Emcascript versions.
That reads super clearly to me. I suspect it will for you before long.
Parallax all the things!
Doing it the way he did makes the example very comparable between function expr, fat arrow, and function declaration. 
Well, this binding in function is the pre-ES2015 default but it's confusing as hell. The fat arrow behavior is how anyone not familiar with JavaScript will assume it behaves.
I built it with the help of a friend. The commentary in Readme file is from him
I think there's almost no use case for function expression. (Named) function statements are good for multiline named functions. There's an abridged syntax for class methods that should be used. Everywhere else: why not arrow functions?
Sweet sweet syntactic sugar :D
Completely agree. I've found not using the fat arrow (even if you don't need the outer this) leads to bugs when somebody else (or later you) comes along and isn't mindful about what 'this' points to based on how the function was declared. It's just easier for everyone if 'this' points to what you think it should everywhere in the code.
This is awesome
I agree with all of this. Additionally, is is wise to use named functions often as debugging code written exclusively with anonymous functions is a nightmare. With great power comes great responsibility. 
https://developer.mozilla.org/en/docs/Web/API/File
Originally from [here](http://falstad.com/circuit/). This guy has some other cool things as well.
Good call, I have it doing both now. Please do open an issue if you find any bugs or missing features.
Great start to a JS implementation! Been working with SageMathCell lately but would prefer to do live math in the browser without any plugins like Mathematica CDF Player. Where's the official original C source code for Eigenmath? Thanks
These are the important take aways: * It is under the hood and entirely beyond control * Varies by run-time * Leaky as hell on mobile platforms (primary cause of performance failure on JavaScript based mobile applications) * Older browsers (particularly IE, but to a lesser extent all of them) tended to leak memory when references pointing to DOM nodes were used as closures. * To increase performance related to garbage collection limit or abstain from use of inheritance in applications that are long lived (single page utility applications) or tasks that execute continuously in rapid fire (think games).
But it's itself an anti-pattern. Functions that ONLY execute other named functions (without even a thunk interface) don't make any sense, so why use that as an example? Why not a simple intelligible function with an argument and an output?
If you come from a ML background (Haskell, F#, SML, OCaml), this is very familiar code.
You should do http://practicaljavascript.net. (I'm the author) It focuses on a single project that you build throughout the course. That way you can immediately see how to use different JavaScript concepts in real-life projects and scenarios.
I'm a little iffy on the entire ES6 scene. Yes, it's cool in some ways, but I feel like ES6 bastardizes the syntax.
+1 for "You Don't Know JavaScript", it's an awesome series. Then, what if the function is not using `this` at all (which `() =&gt; {}` may suggest)? I'm not saying that arrow functions are evil but sometimes there are no reasons to use them and doing so might be confusing.
That snippet alone is pretty clear and in general it'll always be until it's in the middle of a lot of other code.
Nothing there?!
+1 for awesomeness. I could have used this 15 years ago so bad when I needed a circuit simulator haha
My understanding is that it's not strictly beyond control. There are things within our control that prevent garbage collection, so we need to give the browser the freedom to actually perform garbage collection when it needs to. 
Most of the times, I use closure and little to no `this`, e.g: const state = (function () { let text = ''; function onChange (e) { text = e.target.value; } function onClick () { $.post('/endpoint', { text }) .then(giveFeedback); } function giveFeedback () { alert('Message sent!'); } return { onChange, onClick }; })(); const input = document.getElementById('input'); const button = document.getElementById('button'); input.addEventListener('change', state.onChange); button.addEventListener('click', state.onClick); That's indeed a simple example but as you can see, there's no this and `text` is truly "private".
Unfortunately, I'm not very good at estimating that sort of thing, so I can't even begin to throw out a time. I took a closer look at the website today and see that it's not all that complex. If that's what you're aiming for, just study their source code. Most of their javascript is broken up into two files: http://visualgo.net/js/common.js http://visualgo.net/js/viz.js The player and animations stuff is mostly in viz.js. They're using basic jQuery for it. All of the actual visualizations are in a script tag at the end of each page. They are using D3.js. D3 is (to my knowledge) the most popular graphing library on the web. It's extremely powerful, which can also make it a chore to learn. If you want to take a shortcut, there are derivative libraries built off of D3 with the intention of making things easier. C3.js and NVD3 are two that i know of. If you're a competent JavaScript programmer then I don't think it will be too difficult to learn D3. With it being so popular, there are a lot of tutorials online. I recommend you just start digging in. Here's where I started: http://alignedleft.com/tutorials/d3 Good luck!
Thank you for looking into this! The alignedleft tutorial is exactly what I needed.
Let me know what you guys think? Is it any good? What could be done to make it better?
Am I the only person who didn't have a problem with webpack? I can't be. Webpack is amazing.
You're missing `react` in your package.json!
I personally never understood why people would ever want to check in a node_modules directory. Especially when devs can do things like `npm update` or even `npm install` when there is a matching higher semversion of a package.... causes all sorts of chaos and is just adds to the many things devs have to manage.
Ok, lets do this, do you have a github account? If so, tell me your user and I will follow you and then the three of us can collaborate and think of a project to do. https://www.reddit.com/user/AyXiit34 and me: https://www.reddit.com/user/Pokerchip28/ 
Hmm I will try that when I have the time!
what do your calls to the API look like?
People usually introduces webpack as a grunt/gulp replacement and even there are guides out there instructing how to make the switch. However, I think they are two totally different thinks.
Here is the github page: https://github.com/ncteisen/the-hypertextual-library It has a more detailed writeup of the project
As well as what jsmtt mentioned, there's also https://github.com/betsol/gulp-require-tasks
No one's giving up on it, I suppose I was just thinking out loud about how most angular-related blog posts these days have to do with either learning 2 or transitioning 1.x apps to be easier to convert to 2.
The regex `replace()` method is not asynchronous. Just because something takes a callback does not make it asynchronous. All of the work is done (including calling your callback multiple times to get the replacement text for each match) before the `replace()` method returns. In other words, the method blocks, making it synchronous. It would only be asynchronous if the `replace()` method returned immediately before starting any work, and only at some later point in time completed the work (making it a non-blocking function.) It's incorrect to say that JavaScript is asynchronous. Some selected APIs are asynchronous (e.g. `setTimeout()` and `XMLHttpRequest()`) but not all of them.
Parts 2 through 4 are now written as well.
This is a pretty common confusion - hopefully we can help! When you use a callback, that doesn't automatically make something asynchronous. A callback is just when you pass a function into another function. If that function just calls your callback immediately, there is nothing asynchronous about it. What would make it asynchronous is if the function that gets the callback does an HTTP call or writes to the filesystem (in the case of node.js). So if it doesn't "interact" with the real world (i.e. handle clicks or do timing things), it's not asynchronous. If it does interact with the user or an external thing like an HTTP or filesystem call, then it is almost certainly asynchronous (because you don't want to block the JavaScript thread while that thing is happening). Here's an example of a synchronous and asynchronous callback: function myAdder(a, b, printFunction) { var answer = a + b; printFunction(answer); } function myAsyncAdder(a, b, printFunction) { // Uses "promises", which are like a future value var addPromise = myHttp.get('http://addingservice.com/' + a + '/' + b); // .then() says to run a function when the async thing is done addPromise.then(printFunction); } // happens immediately myAdder(5, 3, function (answer) { console.log(answer); }); console.log('is done'); // prints after the answer is printed // happens asynchronously myAsyncAdder(5, 3, function (answer) { console.log(answer); }); console.log('not done yet'); // prints before the answer is printed In the sync case, it's just a function. You can use a function synchronously just like you would numbers or strings. In JavaScript, functions can be assigned to variables and passed around just like any other object. In the async case, it's only asynchronous because the HTTP call _has_ to be asynchronous.
&gt; Just because something takes a callback does not make it asynchronous. Aww okay! This clears up so much of my confusion now. I always kept thinking a callback is always async.. Thank you!
The two points of view aren't mutually exclusive. It *is* amazing, but also confuses the hell out of me. I'm not complaining though. The amazingness outweighs the confusingness.
Aww I see now. So the function can be async dependent on what's inside, but not all functions are async. I think that's what got me confused so much in the beginning. Appreciate this response. I think this kind of makes JS even more powerful? I'm really starting to like it now since I'm getting my hands dirty within nodejs. And I can mix async with sync code, that seems like it could be a big advantage.
I believe this is what you're looking for: https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API
&gt; eriously, webpack fullfills everything you need. I am laravel noob. I need help in setting up laravel. can we work together ? It seems like you have some experience in laravel seeing your directory structure. I am trying to use external package not modules. Let me know. Email me at alexk345@gmail.com when you get time. 
I found Webpack to be on part with how awful JS packages and documentation are in general. Everyone has an opinion, Everyone assumes a certain level of knowledge about the ecosystem. It's not our fault that JS is so incomplete and needs all these extra layers. But it's our responsibility to do a good job with them. Documentation is most of that.
This is where learning something like node is especially useful. I've taken to trying to script things that could possibly be done faster manually when taking into account my learning time. You learn scope, callbacks, limitations etc. The guys above have posted much more complete and coherent answers. But you need to play and code :) you'll see the situations where these things don't make much sense. There is nothing more satisfying than a horrific original idea you've somehow turned into an async script :)
Here's one very popular one: https://github.com/airbnb/javascript/blob/master/README.md#arrows--use-them I have to agree with that too. The use cases for this needing its own context are so limited in our day to day usage that it makes much more sense to default to the newer syntax and only fall back as needed. 
Webpack is not an alternative to Grunt/Gulp. Webpack is an alternative to tools like Browserify and Rollup. Grunt/Gulp are task runners that do whatever tasks you create. Webpack and it's kin allow you to write CommonJS/ES Modules and use them browser side, which Grunt/Gulp aren't technically designed to solve. Both Browserify and Webpack allow for a lot of other things, like requiring css files. Browserify and Webpack just happen to do a lot of what most people use task runners for, combining, minifying, js &amp; css. They aren't designed to do things like update a changelog or increment a version number on release. What you'll find is that you often can reduce or remove a lot of your tasks by letting Webpack do the heavy lifting.
I am with ya, took me about 10 minutes to convert from SystemJS to Webpack. Might have helped that I have had experience with other loaders/bundlers but I think it is pretty easy to use.
This may help you: https://www.youtube.com/watch?v=8aGhZQkoFbQ
Just using something like local storage?
You can still write code that looks like that without relying on hoisting, especially nowadays with modules. And I'll always remember the day I was told / realized that whenever you have filter + map + reduce, you can do it all with just reduce.
In a way, it's similar to `var` vs. `let` and `const`. `let` and `const` let me quickly read code and understand if something is going to change later in the program. While `var`, I really have no idea.
Why would your javascript source code expose Oauth passwords? Typically Oauth will divert users to a third party authentication provider's login page in order to get them a token and redirect them back to your site's callback uri ... you should never even see their password in your system at all, as OAuth is basically outsourcing the authentication system to a third party entirely. are you trying to authenticate with a 3rd party OAuth provider, or do you have your own OAuth provider?
In one of my very complicated classes I have a yaml file in its module directory and I import this into the class file. It makes tweaking settings super easy and I don't have to look up the constructor or find some constant listed above the class. Then later if I need the versatility I can then easily move this out of the module directory to set it with a DI or something like that.
It may be invalid to the linter, but it's valid ES6. Running across it in an example or some quick and dirty code in an interview is plausible. eslint in default configuration also doesn't allow calling the arguments without parentheses, complains about braces and content being on the same line, the lack of the function form of `use strict` and fourteen other things, including two separate issues about using a label *and* an unused label. That one line of code returns 17 errors from 23 characters. In that noise level, the bug is less obvious than in the code itself. To make eslint happy, I had to write this: const baz = function baz () { "use strict"; const foo = ["a", "b"]; foo.map((bar) =&gt; ({ "foo": bar })); }; baz(); A linter is a great tool, and I do use them. Not every piece of code I see is mine, and not every piece of code I maintain was built to the linting specs I want, so not every project has the same listing rules. eslint is a "Good Parts" solution, but not everyone is writing using only the good parts. You still have to know the bad parts exist. I think there was an opportunity to not have some of these bad parts. Edit: I accidentally a comma.
If its ultimately something that you will bundle in your app (even asynchronously) then you can write your own loader to have it do some really nice stuff.
True. That's why other languages like Elixir or Clojure have different syntax for anonymous and "real" functions—they each have a place.
Two proposals: **Edit**: I realized *both of these* are subsets of the current spec. Also, some grammatical errors. Don't comment tired. Is it so terrible to have to explicitly state `return`? -- (a) =&gt; { return a+1; } I can't mess that up. It's consistent with the existing function syntax: function (a) { return a+1; } And I can return different data types without changing anything: (a) =&gt; { return { foo: a }; } And I can have operations that don't return: (a) =&gt; { a++; } How about enforcing the parentheses for implicit return? -- All we needed to do was remove the ambiguity of sometimes allowing parentheses to be omitted on either side of the arrow. (a) =&gt; (a+1); Then the syntax for returning an object isn't unique to objects, it's common to all types: (a) =&gt; ({ foo: a}); (a) =&gt; (true); (a) =&gt; (a * 2); (a) =&gt; ([1,2,a]); () =&gt; (a++, 'default'); It also clears up things like this: a =&gt; b =&gt; a + b + c; a =&gt; b =&gt; (a + b) + c; // Does this seem like it should be different? Which becomes: (a) =&gt; ((b) =&gt; (a + b + c)); (a) =&gt; ((b) =&gt; ((a + b) + c)); Now I have clear nesting in parens which most syntax-highlighting editors will helpfully match for me. --- &gt; meets to requirements of arrow functions as well as not breaking any backwards compatibility of any earlier Ecmascript versions. I do not understand your meaning, here. Fat arrows aren't backwards compatible. As a result, the opportunity to do anything was opened, paving the way for the state in which we currently find ourselves with multiple choices for parameters and different ways to represent the function body.
`/s` is a common way to indicate sarcasm; I actually &lt;3 a11y
Actually [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) are always anonymous: A variable or object-member name is not the same as a [function name](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name). Also, an arrow function isn't quite the same as `.bind(this)`: First, an ordinary function can be bound to the `this` of a scope different from, and not containing, the one in which it was defined; also, bound ordinary functions can still be used as constructors, while arrow functions cannot.
Thanks for writing this! Reading this last year is when I finally cracked into Webpack and my team has been using it since.
&gt;Thankfully, due to function hoisting, JS is one of the few mainstream languages that allow us to get close to english. Function hoisting has nothing to do with your example.
[Look at how the wise old ones have done it.](https://github.com/angelsl/misc-Scripts/blob/master/Greasemonkey/YTGrab.user.js)
Wow this is trippy. Is the source available?
&gt;The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf. https://tools.ietf.org/html/rfc6749 If you are in control of everything and don't intend to grant access to third parties, oath might be a bit overkill. OAuth is typically used to obtain access from a user of a system to do something on their behalf on a third party system. In answer to your question I think the idea around password grant is that it's the user that supplies their username/password (i.e. in the form of a login form) and you get back a token that can be used for subsequent requests.
I use `() =&gt; {}` for callbacks typically and the `function` keyword elsewhere.
He is probably thinking of accidentally exposing the client ID and client secret while using the password grant type in his SPA He is new at Oauth2 and is understandably confused by the whole thing and its giant amount of use cases and complexity he doesn't care about at the moment. Since he is on the SPA bandwagon he is afraid of the single page load the initial login screen can have more than likely. He is probably also creating his own oauth2 provider or using one of the millions of do it yourself open source security providers. He will hopefully soon realize that he can directly send in the user id and password through an API endpoint's body and not have to worry about following the spec to the letter. And more importantly that if he is not part of a large development team doing microservies and both mobile native as well as web development he can just return a jwt encoded token back to act as the bearer. Good luck OP. Don't be afraid of implicit grant type. The redirect is a security feature for multiple clients when you are a VAR (value added reseller) or a platform as a service. If you are small single monolith back and front just use simple json webtokens and be safe out there. Stay security thirsty my friends. 
The AI likes to make illegal moves. x] It also moved right into "check" illegally. xD
Very cool
Disagree. You're asking "why?", but you haven't justified why the correct question isn't "why not?". &gt; Shouldn't we use things for what they are intended to? Sure, but you haven't demonstrated what the fat arrow syntax is "intended" for. What if I say it's intended to provide a clearer and more concise syntax with less-surprising lexical `this`; and as such it's intended to be used everywhere? You haven't provided any source for your preconceived notions of what various language features are "intended" to be used for. &gt; Also, when I see a fat arrow, I assume that there's a reason for the author to have done so (but most of the times I'm wrong). If you keep making an assumption which is wrong "most of the time", the lesson might be to stop making that assumption?
The results view pane [wraps improperly](http://i.imgur.com/PlBJwOT.png) under Firefox if the screen is wide enough. 
Yup. 
This taught me that I learned nothing in my Electro Magnetism course.
Are you getting that info from credible source? Because, PropTypes does dynamic type checking while Flow/TypeScript does static type checking. They have similar yet different responsibilities. Based on Facebook's github source codes, they use both PropTypes and Flow.
Indian developers need not necessarily build apps that are to be used by fellow Indians. A lot of stuff is outsourced to India. 
Yep -- a very significant portion of the time I see Grunt/Gulp being used, it is mostly being used a pseudo build system. Webpack (IMHO) finds a better middle ground by being primarily a build system with some task-runner-esque stuff mixed in.
What about [nordic.js](http://nordicjs.com/)?
Thank you, I now see the point ;)
You're right, while arrow functions involve certain specificities, they probably clear even more of them.
And for things like dom shifts caused by other elements/advertisers . Not having to poll is a God send, but unfortunately it's not supported universally yet so better to have a polyfill set up for it. 
It's not *that* confusing. If you're in a class/prototype then *this* refers to the class. If you're in a function/callback inside the class then you will lose the context so hoist *this* to a variable outside such as var self = this; and use self to reference. 
Clearly not enough people care about Webpack to become core contributors though so it seems that this expectation is unreasonable.
Hoisted! That's the term is was searching in my head for a long time. Thanks for reminder.
^^^^^ wot @third-eye-brown sed about node.js &amp; using their 'fs' library. https://nodejs.org/api/fs.html
How many gigawatts of power do I get from those "*powerful* ES6 web apps"? Are there any servers that can safely run them without exploding or at least going up in smoke?
... because people forgot how to code.
..no, because people don't want to keep reinventing the wheel again or copy-paste code without tests..?
A blog post or two recommending a package is as good as testing. /s
I am so sorry. I must have missed that. Thanks for the reply.
Wow, this is exactly what I was looking for. Thanks so much for doing this.
I use and love webpack, but I can't wait for the next thing. Like how gulp was to grunt, I'm waiting for the next thing that can do all of the same stuff in a much simpler way.
&gt; https://css-tricks.com/how-do-you-structure-javascript-the-module-pattern-edition/ It'll help you massively when coding if you have some structure :). Good code though, keep on learning :D
Yes, re-using in-house stuff with validation and whatnot is great. And npm is very suitable for that if configured to ONLY server stuff from the company's repository. But personally I'll never rely on 3rd-party content I did not check manually by myself. So npm doesn't have any benefit for me because I'd end up checking every update of every package before installing it.
&gt; But personally I'll never rely on 3rd-party content I did not check manually by myself. That's what everybody should be doing for production, I agree. &gt; So npm doesn't have any benefit for me because I'd end up checking every update of every package before installing it. I assume you are referring to npm the server in this case, since you can still use npm the client as before, you just have to change the registry and it's good to go. 
Hi /u/GoblinSmasher, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Please use the [Showoff Saturday](https://www.reddit.com/r/javascript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AShowoff%2BSaturday) posts for these types of submissions.
A simple way of doing it is via a helper function. Changing bindings is unusual, and is more likely to become confusing. Changing IDs is even more unusual. (function() { var counter = 0; $("#click-button").on('click', function() { switch (counter) { case 0: firstClick(); break; case 1: secondClick(); break; } counter++; }); }());
I learn better with someone there to immediately answer my questions. Having said that I love the look for that egghead.io course so thanks for that :)
Thx for the info... the services API will be available by other 3rd party applications, so with OAuth already a requirement for that I was going to try and leverage that my front-end as well. Sounds like Implicit might be a safer bet so I'll take a look at that.
You may also be interested in the [memex](https://en.wikipedia.org/wiki/Memex)
Not so much that people don't care enough about Webpack, and more so that people don't care about contributing to the tools they use. They'd rather bark orders at someone else to do it.
Yeah if all you use Grunt/Gulp for is bundling of assets. Many of us use it for a LOT more.
Bundling assets, a bit of code generation, test running. All of that is also on webpack (note that I'm not for or against it, if I had to choose I prefer gulp). What other popular uses are you talking about? I tried searching on github for popular gulp plugins but didn't find much.
Remove the smoothing function and it will follow faster.
There's a pretty solid react community on Discord, http://join.reactiflux.com. Lots of Beginners asking questions in there. 
Implicit will only be a two legged hop if you don't use a consent form since you are a consumer of your own API and not a 3rd party app. The redirect uri it sends back with the token can be parsed and removed from the uri so you don't have the extra step of exchanging a back channel code for a token. It's slightly less insecure because uri's can be cached by reverse proxies. Think nginx when you put it in debug mode and open the log files. There are uri listed for every request. JWT.io tokens are the best way to encode the bearer token rather than just using opaque random generated strings. You can do cool crazy things with jwt tokens such as encode an ID, your expiration, an audience flag, and.....and.....you can sign them using an asymmetric key. Which means anyone with a public key can verify the token came from you. A neat trick to avoid the constant token info checking back end services might have to do. Google Oauth2 playground if you haven't already and read some of their docs. They have really good docs for Oauth2 and their follow on protocol openid connect. Enjoy man. Good luck.
Well for example in my case, my `gulp build` not only runs webpack, but also builds sass files because I am not a real big fan of loading css with loaders. It also runs exec commands because my `build` step isn't just building CSS and JavaScript but also building a Docker image for distribution. 
Sorry, haven't had the need to use a serviceworker yet. What is your trouble, exactly? It appears webpack has a [loader](https://github.com/markdalgleish/serviceworker-loader) for service workers.
Webpack can also run shell commands and compile sass files, I still don't see which popular use of gulp/grunt isn't already covered by webpack.
This is really cool. Any plans to add support for heatmap? Keep up the good work!!
I'd say have fun learing to know the JS world - it's a fascinating beast! I think this is a really good repository to show a ReactJS newbie, too - it's very clean and it uses the best practices around. Good job and kudos to your friend - she/he knows his stuff!
how can I implement a parent function for the whole process to run and the parent function should call from the onClick event of the button
[removed]
That's why I asked for some examples, and all you gave me are shell commands and SASS. Also I searched for popular plugins because you said "many of us". You don't have anything to back up your claims and no effort in that sense, at least I tried.
Perfect, that's just what I was looking for, thank you!
my button is on another page created dynamically using php and where the clickeroo function is written that is in another page where there are more than 70 java script function implemented so when I click the dynamically created button it doesn't call the particular clickeroo function. When I add the attribute onClick="clickeroo()" then first click and then second click is automatically clicked and so on.
Haha yea, no problem. I'm working on the code now, I'll show you in just a second. But ya, basically, you will just setup your own HTML file, setup a local script file (for your custom script) and then make sure you run the process in IE &amp; have admin privies to all the sites. You won't have to pass credentials/etc since you will be running it in Internet Explorer (e.g. SharePoint = Microsoft App, IE = Microsoft App - they allow for local apps to be run and access privies/etc assuming you have the right credentials, the SPServices library will handle all this for you automatically - this process won't work if you run it in other browsers like Chrome/etc).
* Garbage Collection should be a last resort. While GC is fairly optimized, manual memory management done right is the better option. * Unsubscribe event listeners, watch out for closures. They can be especially dangerous when you have fat as hell objects that are orphaned and just won't die. When you make an object, try to figure out it's lifecycle and remove it from memory yourself.
X-Post referenced from /r/programming by /u/thinkingdots [I got tired of opening links from r/videos in new browser windows so I combined r/videos with YouTube's player API...](https://www.reddit.com/r/programming/comments/4e9ey6/i_got_tired_of_opening_links_from_rvideos_in_new/) ***** ^^I ^^am ^^a ^^bot ^^made ^^for ^^your ^^convenience ^^\(Especially ^^for ^^mobile ^^users). ^^P.S. ^^my ^^negative ^^comments ^^get ^^deleted. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
I thought this would be a better subreddit because the code is almost entirely javascript / React. 
Also, made a few updates, refer to /4 (version 4) of the fiddle I posted. And yea, SPServices seriously is a huge time saver. edit response to your edit: Yes, it is a very easy way to create snippets of front-end applications and share them with others. You can also of course keep editing/add versions, etc. It's a neat little tool and you can pre-load headers/wrappers/JS libraries/etc (there are a lot of options hidden by default).
Use `Promise.all`. This may not be as simple as putting the folder items in all; you may have to build your all list from your conditions, and resolve after the loop. Its hard to tell from above how much is pseudo and what is actually working as it should. For example you wouldn't want to repeat the same `this.graphService.getUser(userid)` request over and over again in the loop.
Honestly, I didn't look to see if your code worked, but it was formatted well, it was clear, and it supposedly passed the tests you made. I'd have absolutely no problem with the code you presented as long as it actually passed the tests. If they didn't give you any specific feedback, then I'd chalk it up to them just wanting to hire someone else. "Not up to our standards" is simply a bullshit excuse if they don't actually tell you what the standards are or how you didn't meet them.
Weird. Did you try running the demos in a smaller window (not full screen)? Retina and full screen may kill the fill rate...
Yeah I found that loader, but it appears to still add a lot of Webpack-related stuff in there instead of the worker code (leading to `this` being undefined), and it doesn't appear to load it correctly. Which makes sense, because the loader doesn't really appear to be maintained - it's [based on an old version of worker-loader](https://github.com/webpack/worker-loader/issues/11), which hasn't been updated for ServiceWorkers. I'll figure it out, eventually. But it's definitely not simple :P
Both are "brute force" and pretty inefficient, will perform poorly on larger data. Squares problem, for example, you test every value to see if it's square root is an integer. That's a LOT of cycles for numbers that will be far apart. A bit of thought suggests you can find the square root of the start and end, and then loop through the integers between those two values. I didn't look as closely at the balancing solution but you appear to be doing scans to see if there's a matching character repeatedly. Can you improve it by scanning the string just once and testing as you go?
I wrote about how you can use http://feathersjs.com/ as an open source alternative to Firebase at https://blog.feathersjs.com/using-feathersjs-as-an-open-source-alternative-to-firebase-b5d93c200cee
Starting at the sqrt of the high end and working your way down is a common trick for stuff like this (I usually think of it in terms of finding prime factors), but I wouldn't ding an applicant for not knowing that trick. An idea for the balancing code. Just step through a character at a time. When you find an opening bracket, push it onto an array; when you find a closing bracket, pop from the array and check if it matches. If you find any that don't match, or if you make it to the end of the string and the array isn't empty, you have an unbalanced string.
I agree with what you're saying, but for asking someone to solve this in an hour you're basically hoping they have prior knowledge of solving problems like this. That's not a good interview question if you're entire basis of a problem is to see if they've solved that particular problem before and know how to optimize it.
My button has the two following function. When button value and id is accepted then it has to perform the following conditions. Firstly, it changes the attribute id to reject and secondly it changes the value to reject, thirdly, it will change the attribute of a select option will be disabled and it will perform summation of a value which I get from session variable. When the button value and button id changes to reject it will perform the following condition. Firstly, it will change the button id and button value to accept. Secondly, it will remove the attribute disabled of select option. Thirdly,it will perform subtraction of a value which i performed the total above. Eg- when i select price/pack for a product then i select the product amount,after selecting product amount i have to click accept and this will perform summation of total amount for the selected quantity and the total amount is the grand total amount when i click reject the total amount should be subtracted from the grand total amount. I might add more products later and the grand total should be increased automatically after clicking accept button.
The reason this is undefined is that service workers use self, not this. [I made a repo with working code using serviceworker-loader.](https://bitbucket.org/soldoutactivist/webpack-service-worker-test/src/24e25406b6ffdbf36e6e025e5809c8a91e691ba9?at=master)
http://codepen.io/anon/pen/LNQeWb
...but won't look as nice
I think both are correct. "The ECMAScript 2015 Language Specification" is the "ECMA-262 6th Edition". But since the spec has moved to a yearly release cycle, I think its authors are trying to emphasize the year component of the name.
[Here](http://www.2ality.com/2015/11/tc39-process.html) is a good breakdown of the updated release process. *edit*: removed incorrect pieces per motts
Your solution is O(n) where n is the range of numbers. A solution is possible in O(sqrt(n)) by first taking the square root of the range. For example, say they wanted the range 998,000 to 1,002,000. Your solution would run through the loop 4000 times. If you took the square root of 998,000 (= 998.999), 1,002,000 (= (1000.99), you would have to go through the loop 2 times: 999 and 1000. function squaresWithin(a, b) { var result = []; for (var i = Math.ceil(Math.sqrt(a)); i &lt;= Math.floor(Math.sqrt(b)); i++) { result.push(i*i); } return result; } console.log(squaresWithin(998000, 1002000)); 
Sorry. Out to lunch ATM. It'll be 40 min till I'm back at my desk. 
This is a really good comment, thanks! Regarding the dictionary, would it look somewhat [like this](https://jsfiddle.net/uk2d1got/)?
Your squares solution is brute force, but is written in a clear fashion, I wouldn't have a problem with it. However, your second solution is way too convoluted. You're constantly mapping the brackets variable just to get the opening and closing brackets (consider a data structure for this). Also you should learn about [scoping rules](https://stackoverflow.com/questions/762011/let-keyword-vs-var-keyword) around `var`. 
Releases of the *spec* are yearly, but individual features are not. That's why, in the article you linked to, he says, "Don’t call them ECMAScript 20xx features," because we won't know if an individual feature will make it into that year's spec until it actually does.
I perfer to see javascript broken into as many functions and call backs as necessary so I doubt that was the problem. I also think his first solution looks fine .
ES 6 == Ecmascript 6 == Ecmascript 2015 Im guessing its because it's the 6th Ecmascript version but was released in 2015 (Someone correct me if I'm wrong). It was also very confusing for me too.
A common use case for arrow functions is in statements such as `a =&gt; (b, c) =&gt; d =&gt; a + b + c + d` this becomes `a =&gt; { return (b, c) =&gt; { return d =&gt; { return a + b + c + d } }` if you enforce explicit return statements. I believe this is a far inferior syntax, which is a feeling shared by many developers in many languages which is why you see a popularity in the more compact syntax. `a =&gt; ((b, c) =&gt; (d =&gt; (a + b + c + d ))` This is definitely much better, and is often a great choice. Why not instead leave this as an option (as it already is) and have teams enforce their stricter subset of rules via a linter? I personally don't see the value the parens add expecially in the commonly written statements such as `collection.map(obj =&gt; obj.name).filter(name =&gt; name === 'oculus');` vs `collection.map(obj =&gt; (obj.name)).filter(name =&gt; (name === 'oculus'));` Is this really helping anyone? &gt; I do not understand your meaning, here. Fat arrows aren't backwards compatible. As a result, the opportunity to do anything was opened, paving the way for the state in which we currently find ourselves with multiple choices for parameters and different ways to represent the function body. If your sticking with fat arrow syntax this is correct. I am opening up the discussion to any alternative syntax format. There are languages that deal with functions with alternative syntaxes. 
Arrow functions are often used for compact notation especially in the context of functional programming paradigms. Grabbing the scope of the outter context is just one of the reasons to use it, but it certainly is not the reason to use it. This would be like saying only use `function` syntax when you want to use `this` within the function.
It's ES2015 now. ES6 was the old name, but they changed to an annual naming scheme to encourage thinking about faster adoption. They mean the same thing and everyone understands both.
I'm currently paying for egghead.io to also learn advanced ReactJS While they might only have training for a handful of technologies, IMO they easily have the highest quality training in their category. I've paid Lynda, Code school, Pluralsight and Thinkster.io, but egghead is just too good. Each video is fast paced and short (which I love since I have a very short attention span and get bored easily), surprisingly well explained, high quality (Pluralsight and Lynda had varying quality standards), and they give you the source code for each lesson if you get stuck. Also, paid members get to ask questions in the form of comments and the video creator or someone from egghead.io will reply in a reasonable amount of time. It helps that egghead has a TON of content on React and Angular. It's quite easily the closest thing to a physical course.
(y)
I- Wh- Wow! Is that Webpack-specific? ([MDN uses `this`.](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Install_and_activate_populating_your_cache)) How did you find this out? Also: you went above and beyond actually trying this out and sharing the code. Thank you so much!
get an account on https://www.pluralsight.com/ and then find modules about javascript in general and work through them (dont just watch them, actually do the example projects along with them), and then when comfortable with the basics, find modules about the specific things you are trying to accomplish with javascript and work through those example projects / tutorials as well 
Well no, I doubt that any of them knew how to code in the first place.
 error undefined undefined error undefined undefined There is your console log. var json = [{"Id": "emorris5", "site": "A1"}, {"Id": "mhumphrey2", "site": "A1"}]; var json = [{"Id": "eagle\\emorris5", "site": "A1"}, {"Id": "eagle\\mhumphrey2", "site": "A1"}]; I've attempted both formats for json above.
I suppose that depends on your experience. No prior knowledge of the problem should be required for a programmer with a CS degree or equivalent.
No, it's not webpack-specific. MDN does use this. Which is why if you look at my repo's initial commit, I use this. Even their example repo uses this. But then I looked at every other service worker tutorial and they use self. Doing some more googling just now, it may not be that ServiceWorkers use self, just that self is another say of saying "window" in newer js for windowless contexts. In other words: \*shrug\* It works, lets not poke it too hard.
Did you try adding the userEmail property like I mentioned? Also, the eagle\\\ needs to be have a double slash appear in your code as it needs to escape the single slash. Are you sure you picked the correct group name, etc? There may be a back-end name like 'My_x0020_Group_x0020_Name'. Additionally, since your 'data' is undefined, it means the query isn't even reaching the server in the first place, which means there is something wrong with your webURL, I would double check that value and makes sure it is actually in fact pointing to the sub-site correctly.
do you really need the square root? function retSq(start, end) { var sqs = []; var num = start; while (true) { var numSq = num*num; if (numSq &lt;=end) { sqs.push(numSq); num++; } else break; } return sqs; }
those functions are not SPServices specific, SPServices does what you were initially trying to do (e.g. access the SharePoint API and use it's features, such as 'AddUserToGroup'), but things like webURL, operation, etc - those are default components of SPServices, whereas the list you pulled from is Microsoft's list of 'AddUserToGroup' properties. I just tested it and got it all working, just add the support cors property I commented on before, that will fix it all. Also, you don't need to add e-mails, I tested it without emails and it worked correctly. Also, pretty certain your user group name is correct - I'm 99% certain the culprit for you was the support.cors component I mentioned.
You can see in the responseXML the reason for the error: **The user does not exist or is not unique.** At least we know you're now sending requests and getting a response from the server. I would double check these user names are correct &amp; domain including case sensitivity. On a separate note, are these completely brand new users to your sharepoint infrastructure? I'm assuming they already exist, else you may need to first add them to the root of the entire sharepoint site, which in that case I would make sure you add them there first, define all their properties (email, notes, etc), and then assign them to groups on various sub-sites.
taking a quick break. brb
Thanks. I'll look into it.
Haha OK, in any case, thank you for helping out. A lesson in humility for me :)
&gt; I agree with what you're saying, but for asking someone to solve this in an hour you're basically hoping they have prior knowledge of solving problems like this. I think that depends a lot on the level of the position. If this was a junior developer post, hiring someone with minimal experience, then sure, I'd mostly be looking for correct code that met the requirements. However, for more senior positions where you're looking for experienced programmers, I'd also look for efficient code, clean design, awareness of different techniques and how they apply in the language being used, reasonable coding style, and so on. In this case, the solution given to the first problem was an O(n) algorithm, where O(sqrt(n)) is possible. The first solution was also performing a relatively expensive square root operation on each iteration, instead of only performing it a fixed number of times at the bounds and then using relatively efficient operations within the loop. These are rookie mistakes if you're doing anything performance-related, and you most certainly don't need to have solved that specific problem before to appreciate this. What you do need is some awareness of how much an algorithm will cost to run, that you're really working with data from two different problem spaces here, the squares and the square-roots, and that solving the problem in one space will be more efficient for both the reasons I mentioned. The problem itself makes the two spaces obvious in this case, so I would expect anyone applying beyond rookie level to get this right within a few minutes without introducing obvious inefficiencies. /u/mvartan posted [a much better implementation](https://www.reddit.com/r/javascript/comments/4eb61r/interview_exercise_feedback/d1ypcgt) in another comment. The solution to the second problem was better. The OP had recognised the possibility of using a stack as a data structure for matching pairs of operations, which is a good sign. However, again the implementation isn't very efficient or easy to read. Both could have been improved by choosing a more suitable representation for the paired operators, and by building up data that won't change ahead of time instead of redoing the work every time the opening/closing tests were called. For example, you could change the OP's code to start something like this without changing the remainder, and it would be significantly easier to understand and more efficient: var brackets = { "(": ")", "{": "}", "[": "]" }; var openingBrackets = Object.keys(brackets).join(); var closingBrackets = Object.keys(brackets).map(function(k) {return brackets[k];}).join(); function isOpening(b) { return openingBrackets.indexOf(b) !== -1; } function isClosing(b) { return closingBrackets.indexOf(b) !== -1; } function bracketsMatch(b1, b2) { return brackets[b1] === b2; } I'd expect a more experienced JS programmer doing this to also consider whether we were using a utility library, and suggest something cleaner like this instead: var openingBrackets = _.keys(brackets).join(); var closingBrackets = _.values(brackets).join(); I wouldn't care if they used some equivalent in another tool set -- the points I'd be looking for are a clean and straightforward coding style and an awareness that some basic things are quite clunky in vanilla JS but there are widely available utility libraries to keep the code clean and tidy. Again, these are things I would expect of any moderately experienced JS dev. For a senior dev, I'd be reassured if they also knew why `Object.values` would be a bad idea in my earlier example and/or they raised a question about IE8 support when they saw `Object.keys`, talked about polyfills, and possibly used that to come around to discussing the advantages of utility libraries.
Nevermind I got it working. I have two states, they work fine from the documentation I was just doing it wrong.
You are asking on JS subreddit about some-non-JS-framework (Xamarin) vs some-JS-framework (ReactNative). Why not spend a few days prototype an app with a screen in both? If you are making a decision that's you will have to live with for the next few years, investing 2-3 days on it is probably worthwhile. 
Thanks for catching that. I was rushing through it
Btw you don't need to use a regular expression for this problem and it is probably the wrong way to approach it since Balanced parenthesis is not a regular language. 
They already exist. I have tried adding all their properties. You've gotten me pretty far. I'll keep fishing around for a solution. If you can think of anything let me know.
If there are any eventListeners on the p that you're changing, they'll be lost when you change its html. If that's your issue, then to avoid it just add eventListeners on elements outside of the target element... Something like this? http://codepen.io/anon/pen/pyaaVR?editors=1010
Java, jQuery, Angular, Yahoo, isomorphic macros beta v15, Verizon ES, IoT, everyone knows what you're talking about.
lol
Math.ceil is correct for the initializer, Math.floor would be better for the condition. Even better would be to not call Math.floor(Math.sqrt()) on every iteration of the loop, since b never changes. Some compilers may fix that for you. var i = Math.ceil(Math.sqrt(a)), limit = Math.floor(Math.sqrt(b)), result = []; while (i &lt;= limit) { result.push(i*i); i++; } If you really want to be efficient (C-style) you can preallocate the array and avoid growing it on each loop iteration: var from = Math.ceil(Math.sqrt(a)), limit = Math.floor(Math.sqrt(b)), result = Array(limit-from+1); for (i = from; i &lt;= limit; i++) { result[i-from] = i*i; } For good measure add checks e.g. a &amp; b both positive numbers and a &lt;= b.
It wasn't necessary to break it in to two functions like OP did... But yeah, seemed okay to me.
Apparently not! 
What kind of position was this for? What kind of work would they expect you to be doing? From my point of view, your code is understandable and gets the task done. I would ask for feedback on your interview, its a reasonable request and companies will usually oblige. I see people getting in to algorithmic detail and Big O in the comments but honestly for this tiny task is evaluating something in that detail typically expected? (I'm presuming this was for a junior-ish position)
ture ture, but hypothetically in a production app you want to modularize all your code. Although finding a number sqr is a small task, but it is good practice to create code that has functions for all lower level tasks. In this case it would save almost no time but obviously if the function was larger with more complexity it is good practice . but yea this particular case it was not necessary 
Note to /u/Kaseiyo, be careful about copying this answer. /u/ForScale has some newer Javsacript syntax in there that your teacher may not have taught you, more specifically the foreach statements. You may have only learned for statements in your class.
Hey guys! It's been a month since I started this challenge and now that I'm sure it's doable, I'd like to invite you to join ;)
YOU ARE AWESOME AND GRACIOUS! Your answer was huge in insight and huge for my understanding. One thing that definitely had me tangled up was the conflation of properties and prototypes (and maybe somehow I got this coming from Ruby). I am now divorcing the ideas of properties and prototypes in my mind. So that's a huge start! But it also brings up a few more questions: In your example: var myDefaultsDefaults = { c: 1 }; var myDefaults = Object.create(myDefaultsDefaults); myDefaults.b = 2; var myInstance = Object.create(myDefaults); myInstance.a = 3; myDefaultsDefaults is declared literally. I was wondering then what its prototype looked like, so I put the following into Node: var myDefaultsDefaults = { c: 1 }; Object.getPrototypeOf(myDefaultsDefaults) It returned '{}' as the prototype. Shouldn't it inherit from Object a bunch of prototypes? I sort of expected it to have a hidden property like everything else so that it would actually really somehow be: { c: 1, prototype: whatever_Object_s_prototype_looks_like } Another question has to do with this example: Object.getPrototypeOf(myInstance) === MyConstructor.prototype; //-&gt; true and then also with this one: var myDefaults = { b: 2 }; function MyConstructor (){} MyConstructor.prototype = myDefaults; var myInstance = new MyConstructor(); In the first, it looks like the prototype of myInstance is MyConstructor's prototype, that is the &lt;i&gt;object's prototype&lt;/i&gt;. But in the second, the prototype of MyConstructor is set to myDefaults, and the prototype here looks like it is &lt;i&gt;the object itself&lt;/i&gt;. Lastly, how do programmers choose between using a property or a prototype? At this point they seem very very similar, but somehow also different. In your example: function MyConstructor (){ this.b = 3; } MyConstructor.prototype.b = 2; var myInstance = new MyConstructor(); myInstance.b; //-&gt; 3 MyConstructor.prototype.b; //-&gt; 2 why would one choose 'this.b' over 'prototype.b' when essentially they are doing the same thing, in this case storing an integer?
Yeah I wanted to come to this one but there are already a lot of people going from my company so I have to find another one ... 
*===*
Interesting... Yeah, I do enjoy the concept of modular programming. And that's a good example of it.
Try adding this at the beginning of your code and seeing what Microsoft believes your userdomain and username is: var xobj = new ActiveXObject("WScript.network"); console.log(xobj.userdomain + '\\' + xobj.username);
I understand. This is very valuable advice, thanks again.
It's the exact same thing I am using for userLoginName
That's a fair distinction. I think my comment isn't totally correct, in that case. I'm just going to clear it out to avoid any further confusion. 
Hopefully if it works well, it'll make its way into other browsers soon. We've fortunately reached a place where new features can propagate into majority usage in a matter of months rather than years, so it might be that we're not forever away from this being widely available.
Did you get to test the above function? Just wanted to make sure you didn't miss it.
I started using it today, only on Linux for now, thanks for the effort and the nice idea.
Every basic object, created with an object literal (`{}`) or something like `new Object`, will have a prototype pointing to `Object.prototype` which is the default, and end of the line for prototypes (and prototype chains). As the end of the line, if you were to `Object.getPrototypeOf(Object.prototype)`, you'd get `null`. It _is_ possible to have a prototype chain that doesn't end with `Object.prototype`, but for the most part, pretty much everything you work with, numbers, arrays, functions, all have a prototype chain ending with this. If you were to log the value of `Object.prototype` in Node, you'll see `{}`. It looks empty, though it is an object that has more definition to it, just hidden from this representation (`toString`, `valueOf`, etc. are all part of `Object.prototype`). Each of these are effectively the same thing: {} new Object() Object.create(Object.prototype) And if you want to see this a little more clearly, you can try something like: var myDefaultsDefaults = { c: 1 }; Object.getPrototypeOf(myDefaultsDefaults) === Object.prototype; //-&gt; true myDefaultsDefaults.toString === Object.prototype.toString; //-&gt; true Things like the prototype itself are also generally hidden. It is defined in an internal slot in the object (known as [[prototype]]) not directly exposed to you in JavaScript... well, with the exception of `__proto__` which _is_ just that, but developers will often like to pretend that property doesn't exist. &gt; In the first, it looks like the prototype of myInstance is MyConstructor's prototype, that is the &lt;i&gt;object's prototype&lt;/i&gt;. But in the second, the prototype of MyConstructor is set to myDefaults, and the prototype here looks like it is &lt;i&gt;the object itself&lt;/i&gt;. If I understand what you're saying, its the same thing. With this: var myDefaults = { b: 2 }; function MyConstructor (){} MyConstructor.prototype = myDefaults; var myInstance = new MyConstructor(); These are all true: Object.getPrototypeOf(myInstance) === MyConstructor.prototype; //-&gt; true Object.getPrototypeOf(myInstance) === myDefaults; //-&gt; true myDefaults === MyConstructor.prototype; //-&gt; true There's nothing special about the `prototype` property. Its just a property like any other property. If you assign it to equal an object variable, it will just be another reference to that same object. The purpose of this property is to give the prototype object a safe place to live that is specific to the constructor function. It could have also been decided that if, when ever you create a function, a prototype object would be created in a `Prototypes` global under the same name as the function. And when new instances are created from a constructor, that object would be used // NOT A REAL THING IN JAVASCRIPT function MyConstructor () {} Prototypes.MyConstructor === {}; //-&gt; true (the place JS is storing prototypes for new instances) var myInstance = new MyConstructor(); Object.getPrototypeOf(myInstance) === Prototypes.MyConstructor; //-&gt; true Instead it was created with the constructor itself, and made accessible through the `prototype` property. Something else that might be helpful to understand is that this prototype property is accessed internally by JavaScript only upon creation with `new`. Its ignored except in that case. Even if you change a constructor prototype after you created an instance with that constructor, JavaScript doesn't care if you mess with `prototype` some more and makes no efforts to re-assign prototype references. It's just a property used in `new` to basically call in `Object.setPrototypeOf` with the new instance. In fact, as an exercise we can write new ourselves from scratch: function myNew (constructor) { // create a new object to be what's being constructed var instance = {}; // assign the prototype - this is where we use the // object referenced in the prototype property of the // constructor function Object.setPrototypeOf(instance, constructor.prototype); // call the constructor function on the instance using // `call` allowing `this` in the constructor function to // be the instance so values assigned to this are assigned // to the instance var override = constructor.call(instance); // if a constructor returns an object, that is the object // it constructs instead, so we need to return that // instead of our original object if (override &amp;&amp; typeof override === 'object') { return override; } // with no override, we return our new object with // the correct prototype and any additional member variables // assigne to it in the constructor function return instance; } function Construct() { this.one = 1; } Construct.prototype = { two: 2 } var a = new Construct(); var b = myNew(Construct); a.one === b.one; //-&gt; true (1) a.two === b.two; //-&gt; true (2) Object.getPrototypeOf(a) === Object.getPrototypeOf(b); //-&gt; true (Construct.prototype) Both `new` and `myNew` are doing the same thing. Both simply reference the constructor `prototype` at creation time to assign to the new instance. And to show the effects of changing between creates... function Construct() {} Construct.prototype.a = 1; // default prototype var inst1 = new Construct(); // has default prototype inst1.a; //-&gt; 1 Construct.prototype = { b:2 }; // new prototype var inst2 = new Construct(); // will use new prototype inst2.a; //-&gt; undefined inst2.b; //-&gt; 2 inst1.a; //-&gt; 1 (still old prototype) inst1.b; //-&gt; undefined Object.getPrototypeOf(inst1) === Construct.prototype; //-&gt; false Object.getPrototypeOf(inst2) === Construct.prototype; //-&gt; true So here you're just seeing that it only matters what `prototype` points to when an object is created. Whatever happens before or after doesn't matter. Its just a holding place for an object for JavaScript to grap to use in a new object's `[[prototype]]` slot. &gt; Lastly, how do programmers choose between using a property or a prototype? It can be preference. If you want a more complicated chain, you're pretty much always overriding the default prototype. If not, its safer to use whats there because it has the right `constructor` value, which may get lost if you redefine it to some other object (your original code correctly fixes it). It can also be very verbose to say `MyConstructor.prototype.myProperty` for each definition which some people don't like.
MysteryScript
Others have given better explanations. Allow me to state my preference, however, for the ES6 / ES7 convention. 
Yet another one with a title you can't pronounce. Too many r's. 
If you refresh a page, then you are essentially reloading all of the assets minus anything that may be stored in an input, select, etc element. So in other words, if you have events where you modify something, you need to figure out when the page is reloaded how you wish to save that session and make sure it is loaded in to your process. On the back-end, this is typically handled by deploying sessions for the user. Otherwise, if you are developing this front-end, you can look into a lot of different methods to handle the state of how your application should be re-rendered; such as storing values in the hash or in the search ?= query or in cookies values, etc. Once those are stored, you can have a function that runs before you draw your calendar that checks if it should pre-populate anything into the function and if nothing is there, then simply load your default calendar. You can also look into Post/Get ajax calls to a server somewhere, where you store the actual values in a calendar (for example if you wanted to create something that was passed around between multiple users). Looking at your source, your javascript loads and draws the starting calendar, you don't have anything that handles checking all these storage systems I mentioned and loading it into your function - that's why the event appears to 'go away'. Further looking at your source, you are using a jQuery-dependent plug-in, 'fullcalendar', so I simply searched on google 'fullcalendar API remove event' and it pulled up the developer's API on how to remove an event: http://fullcalendar.io/docs/event_data/removeEvents/. Essentially, you need to figure out how you want to 'remove an event' and bind that method to remove it. Something like this: $('#myRemoveButtonId').on('click', function() { $('#calendar').fullCalendar( 'removeEvents', '#removeThisId' ); }); Here's also a stackoverflow discussion that asked something similar to your question http://stackoverflow.com/questions/34297915/fullcalendar-how-to-remove-event.
Without getting into it, it seems like you need to re-initialize your event listeners per click. After all, they don't exist when the page loadss, so they aren't linked to the event trigger.
Sorry. I left work. Ill have to try it tomorrow. I had to hit the grocery store and drive home so I didn't check Reddit yet. Same time tomorrow? Haha
For anyone interested in routers, have a look at [cherrytree](https://github.com/QubitProducts/cherrytree). A hierarchical router, not dependent on the framework/library.
I dont want to debate what copyright with some random dude on the internet, but I would recommend you spend a few minutes reading about it. Here I found a great link. Check out the section under infringement. http://www.copyrightkids.org/copyrightbasics.html
You're trolling, right?
You're right, to be honest I wrote what came into my head the moment I read the exercise. "Return all numbers within a range that satisfy a certain condition: loop through it!" I didn't take a minute to think.
Run from any company that asked questions like this.
Yep, this is the sad, sad truth.
&gt;I'd have absolutely no problem with the code you presented as long as it actually passed the tests. I don't intend any offense here, but you need to raise your standards. There is a lot of room for improvement in the posted code. "works" is a low bar.
Why? They're perfectly reasonable basic programming exercises. Anyone who is going to be trusted with writing production JS code independently should be capable of handling them quickly and easily. Sadly, plenty of candidates in the real world who claim to program JavaScript would struggle, and you're better off weeding them out early and saving everyone some time. For a new starter going for their first job who's effectively going to be a trainee, these exercises are a sensible size for some open-ended discussion to see what they do and don't understand, how quickly they can pick things up, and how much potential they've got. If you run from any company that asks you to do a few simple programming exercises in an interview for a programming job, you're not going to get very far in this line of work. And remember, anywhere you do get, it's likely that the colleagues you're working didn't have to prove they could program either and sooner or later you're probably going to have to maintain some of their code!
why is this not valid? console.log(Bracket.validate("{{[]()}}")); // false
I agree that the sqrt may not be constant time because its probably successive approximation, but it wouldn't depend on n in a linear relationship anyways. So I disagree, that it would really affect the time complexity with respect to n
Check if it matches, then pop
I found this page but I don't really understand how to use it correctly. Is this code implemented ? Should I copy paste it somewhere ? How do I put my `focus` , `blur` method as a hook to the event trigger. How can I get the state of the focus at any time ? Thank you 
That's a great question, and I almost said something about it but I didn't (did I forget? Did I think it wasn't necessary?)... i dunno. Anyway, the reason this is done is because we need this intermediary layer that applies only to `MyError` instances. If you stuck with `MyError.prototype = Error.prototype`, would it still work? Yes (with exceptions...). Objects created with `MyError` would have a prototype that points to `Error.prototype` so they can share all the definitions shared by `Error`. Basically that's the whole idea of making that connection. Seems right. The only problem is, once you want to start defining definitions for all your `MyError` instances, where are they going to go? `MyError.prototype` you say? But this object _is_ `Error.prototype` - its the same object reference. So if you started adding things to `MyError.prototype`, they'd be affecting `Error` too. function MyError(){} MyError.prototype = Error.prototype; MyError.prototype.myWhatever = 'blah'; new Error().myWhatever; //-&gt; 'blah' You could add them as instance members in the constructor, but that defeats the purpose of having this shared object accessible by all instances (thats not to say that approach is not an option if you want to go that way). So what is needed is a new, clean-slate object that is specific to `MyError` instances that can be shared only by them which won't affect other object types. But if we want `MyError` objects to also gain access to what `Error` has, then that shared object needs to inherit from `Error` so it can pick up its definitions to share with `MyError` objects too. MyError.prototype = {}; // clean slate (though it already starts off as an empty object) Object.setPrototypeOf(MyError.prototype, Error.prototype); // get some shared values MyError.prototype = Object.create(Error.prototype); // one liner version of the above ^ This is why each constructor is inherently given a new object (`constructor.prototype`) to use for the prototypes of the instances it creates - because instances created with that constructor should to be able to have unique definitions specific to that object type. The JavaScript "class" is represented by a constructor function and the definitions in that constructor's `prototype` property which ultimately go to define the members accessible to instances of that class. Instance members are defined in the constructor and shared instance members (specific to the class) are in the prototype. Additional members inherited from other classes are inherited from what the prototype inherits. 
AppCache isn't all the author makes it out to be. https://bugzilla.mozilla.org/show_bug.cgi?id=1237782#c34
Oh, and the `constructor` bit, I should explain that too. Constructor function `prototype` objects (probably contrary to what I've been saying so far) aren't actually empty. They have a single property called `constructor` which points back to the constructor function that uses the prototype. function MyError(){} MyError.prototype.constructor === MyError; //-&gt; true When instances are created with the constructor, and thusly get the constructor `prototype` as their own real `[[prototype]]`, they inherit this property allowing them to know who made them var myErr = new MyError(); myErr.constructor === MyError; //-&gt; true Now this is fine and dandy until you need to replace `MyError.prototype` with some other object so you can have a prototype chain tailored more to your needs, like a prototype that inherits from `Error` and not just `Object` like the default prototype does. When you do this, you end up creating a prototype with a different `constructor` value. function MyError(){} MyError.prototype = Object.create(Error.prototype); MyError.prototype.constructor; //-&gt; Error (not MyError) So to fix that, you need to ressign the constructor to point to the right constructor function: function MyError(){} MyError.prototype = Object.create(Error.prototype); MyError.prototype.constructor = MyError; // fix constructor I won't argue with you, this is messy. Inheritance with JavaScript, up until ES6/ES2015 with the new `class` syntax, has been a little crazy. Not only do you have to deal with all this prototype mess, but you also have to do fixes like this which are just... annoying. So annoying in fact, that you'll see a lot of people not doing them. So the `constructor` property in JavaScript has always been historically unreliable, because its easy to forget (or not care enough to) make sure its right in cases like this. On that subject, `Object.create` hasn't always been around, either. Before then, you'd see prototypes being defined as something like: function MyError(){} MyError.prototype = new Error(); Now, if you think about it, this still works, almost the same way. What is `MyError.prototype` instance now, but an object that inherits from `Error.prototype`... its doing almost the same thing as `Object.create(Error.prototype)` except `Object.create` allows us to skip the constructor. This can be important in keeping side effects of the constructor out of the inheritance chain. 
I finished up a mapping extension called Segments++ using Mapbox GL-JS and the Strava API: https://design.athletedataviz.com/demodesigner Select Viz Type "Segments++" from the drop down menu and have a go!
I disagree. This looks a lot cleaner and more elegant to me. var left = brackets.pop(); if ( matches[left] !== right ) { return false; } vs. var left = brackets[brackets.length - 1]; if ( matches[left] !== right ) { return false; } brackets.pop();
Dead? I just checked and it still works on my machine.
Good for you for following up and asking the community. And don't be afraid to reach out to the company and simply say "thanks for considering me. I'm trying to improve my skill set every day. Could you let me know what specifically you didn't like, and perhaps show me a better solution?"
The other comments explain the issue. Solution is to do $(document).on('click', '.editp', function() instead. Also you should probably just use the contenteditable property in most such cases and strip away the HTML when using it for data if you need to. 
&gt; Is this really helping anyone? It could have. If we *required* the parentheses, nobody would have to learn that these are undefined, not objects: (foo) =&gt; { foo } (foo) =&gt; { bar: foo } Because they would know that an implicit return requires you to write the parens: (foo) =&gt; ({foo}) (foo) =&gt; ({ bar: foo }) It's a few more characters but there is no confusion. By having it as an option, we introduce bugs that couldn't exist with the required syntax and the *requirement* of tooling to catch it or arcane knowledge to repair it. Scala has the same fat arrow anonymous function syntax but not the object literal of JavaScript, so it doesn't have this kind of ambiguity. It's all academic at this point but I think it's unfortunate that we added inconsistency with functionality.
I'd walk as soon as you brought up IE8 🖕🏻
Interviews allow you to gauge the value a given candidate will provide the company. Hence you should ask problems that have a high correlation with what you'd be doing there. For 99% of companies, a take home project or live coding session is more applicable. Sure, if the job is to work on optimizing google search, ask algorithm problems; but the biggest cost to most companies is technical debt and crappy code. Straightforward algorithm problems are fair to get a feel for the candidate, but their importance is way overemphasized. I work in SV and I've seen TONS of insanely smart people who produce terrible code and really don't provide much value to the company. That being said, the code here could be much improved.
thanks so much for the help. I ended up making the same map with jvectormaps
Maybe. A hostile fork usually has the *intention* of usurping the original project, right now this is just a fork with a different use case, the Arch Linux to Debain Stable. The devs that use RR will decide whether the two projects can coexist and which one will be more successful long term.
I would guess "Are-Router", just Router, or Rotor for the adventurous.
All hail the mighty ERR TURR framework.
Damn Javascript* at it again with your ADHD. *JS community.
There is a karma webpack "thing" that lets you run tests through karma while applying a webpack config to them to build a bundle that can be easily tested and just includes all of that. I'm on mobile and about to go to bed, but if you ping me I'll see if I can find it in the morning. I've successfully used it in 2 projects before, and while the "first load" time is very slow, its easy to setup file watching and repeat tests are very fast.
&gt;Ryan Florence 5 hrs ago &gt;I was running 4 workshops across 2 states that week in March. &gt;Best of luck. From the comments. 
There you have it (I guess for once, reading the comments would have been a good thing).
Cool idea. 'd like to join in, but unsure of how to start / if my skills are up to scratch.
I personally say ES6 and ES7. I find the yearly naming to be less useful. Even though the spec may be released in 2015, it likely won't be fully implemented in major browsers till 2017.
&gt; I wonder if `Math.pow()` is slower than `i * i`. Probably, I suppose? I don't know the current state of the art for JS engines, but it seems like the dynamic nature of the language could limit how much an optimiser could safely do up-front. You'd probably be relying on some sort of JIT/hot code optimisation at best, and it would have to be checked every time the function was called in case the meaning of `Math.pow` had changed. In any case, I'd argue that `step * step` is cleaner and that moving the increment to a separate line is no bad thing for readability.
&gt;Jimmy Jia &gt;5 hours ago &gt; I have a full-time job building deep learning models, high-throughput data processing algorithms, and web applications that will transform the world and save the lives of people we love – every week of the year. &gt;I’m not hacking on the Router for fun; I’m doing it need good front-end routing, among many other things, to help make the world a better place and save lives. So then he responds by saying that his job is more important than Ryan's because he's making the world a better place. Seems like a bit of a dick move IMO.
I *was* planning to refer to ES2016 as ES7 until I saw just how minor the changes were; from here on out I'll refer to them by their proper annual release names, but I still do refer to ES2015 as ES6.
&gt; I'm curious if anyone has ever had to actually use functions like this before? Basic arithmetic and text processing? Many thousand of times by now, I imagine. How often do we all write code for things like displaying a choice of valid options or validating the current contents of a text box, for a start?
Savage 
Just because you dislike it doesn't make it inconsistent. If the total merit of removing the more concise syntax is someone doesn't need to learn some basic syntax, consider me unconvinced. In the meanwhile, many of us use this concise syntax gladly on a day to day basis.
The anti-semicolon advocates love this argument because it's easy to pounce on: the rules for semicolon insertion are just as well-specified as the rest of the language, so you're not being ambiguous. The reason I use semicolons is so you can read my code one line at a time. Omit the semicolon and you can't be sure what any line does until you've found and read the next line with code on it, which means you're being forced to scan around more and to keep more things in memory. Add a semicolon, and you can be certain, without reading another character, that you've read the entire statement and can now think about it.
And *saving lives*! 
A perhaps silly approach, but included here for variety since it's very different from the suggestions so far: https://jsfiddle.net/voa1gxfz/3/ 
 ES1+5=6; ES1+6=7; and so on..
`client_id` is public info in most implementations, `client_secret` should be private. If you are doing password grant, then you would probably end up exposing `client_secret` when you are doing it client side. You can use web flow, which would only expose `client_id`
&gt;What am I supposed to call these versions? Javascript. In all seriousness, the yearly release cycle for Javascript releases means we should just refer to it as Javascript.
I wrote this for the company blog, and it can take a little while to make it from being written to being published. At the time that I was reading the PR (in February) the MDN docs [didn't have that header](https://web.archive.org/web/20160304055633/https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment); they've since added it (likely since [the bug was fixed](https://hg.mozilla.org/mozilla-central/rev/bbab21ac3b8c)). I've added a footnote explaining. Thanks for the catch!
Of course not, just reminiscing. Also, we didn't call them apps, they were called websites.
&gt; The anti-semicolon advocates love this argument because it's easy to pounce on: the rules for semicolon insertion are just as well-specified as the rest of the language, so you're not being ambiguous. That's the "easy to pounce" rebuttal? That's terrible. We mean it's ambiguous to us **humans**. And there are tons of examples where we use the word "ambiguous" to mean exactly that. For example, `++i = i++`. Is this ambiguous? Not to the interpreter, of course, but to us humans--absolutely. The issue isn't whether it's well specified. The issue is whether we humans can quickly and easily figure out what's going to happen. EDIT: Another example is the "with" statement, which has long been described as "ambiguous", even though it too has well specified behavior. So when the anti-semicolon advocates "pounce" on usage of the word "ambiguous", you're missing the point.
Take a look at that web archive link again, for "Function argument defaults". It's the same as my second link, and it's actually closer to the syntax that you were looking for than the first link.
Is there some part of the syntax that is confusing for you to read? 
Damnit, that is genius.
i just call it "babel" now....because it'll never end.
I am not sure what the point of this is, since everyone who doesn't use semicolons is well aware of this, and understands how ASI works. So yes, a semicolon matters if you begin with (, [ or `, but you can easily avoid those cases. I don't use semicolons because I find they are misleading in regards to what they *should* do (and for that matter what they do in slightly more sane languages). In C, I can have a statement go all over the place but it is all one statement as long as I end with; With a few exceptions, Javascript decides to terminate on the first line, thus destroying the whole point of having a semicolon as the terminator. No, says Javascript, I know better. I am going to pretend newlines are not significant but then go around and put a semicolon everywhere at the end of a line. OK, no semicolons for you then Javascript. If there ever was a "use stricter" option (which apparently will not happen) that disables the ASI, I'd switch back to semicolons. But I'm not going to use something which pretends to give me freedom but absolutely does not. 
We get it, you ~~vape~~ use semicolons.
FYI, "Right of the bet" should be "Right off the bat".
;)
I would add that you should even worry about mini fixation when just getting started.
There's nothing ambiguous about ++i and i++. The first increments then returns the second returns then increments. Not only is it not ambiguous, it makes absolute sense. Edit: Taking 1 minute to read about something doesn't mean its ambiguous. The only reason people are confused by pre or post incrementing is because 99.9% it won't matter. How often are you *really* reusing an incremented variable in the same statement you incremented it? Ambiguous and uncommon aren't the same thing. Especially when talking about programming.
So basically it's complaining about the multitude of options JS offers. You don't need to use all that infrastructure if you don't need it, some very useful libraries are standalone and only requires you to include a single .js files to reap all the benefits, that's a perfect fit for middle of the curve projects. As for a simple Hello World example in JS it should be: console.log("Hello World"); You don't instantiate a JFrame and add a JLabel to it when writing a Hello World example in Java, same treatment should apply to JS. 
looking forward to part 2 with the auth stuff! does ember integrate nicely with phoenix channels yet? i know something was in the works.
well you could, combine rule into a tree, with "and" &amp; "or" - then nesting them - then run them all at once. [like here](https://github.com/GauSim/rule-engine#logic-combine-conditions-with-some-or-all-alias-and--or) im working on some rete-like stuff like rule-files, hot reloading, and state modify after rule passing, but i wanted to keep it 'functional' clean for the first steps. But im totaly open to more ideas and directions this could go 
I know that this is slightly off, but I recently wrote a blog post for getting started on testing with Webpack and Typescript (https://medium.com/@fay_jai/getting-started-on-testing-with-typescript-reactjs-and-webpack-a45a72f4f603#.8ryrcocw4). If you look at the github repo I provided, it's actually super simple to strip out the typescript part and you'll have a working version for ES6. Hope this helps a little!
Well, there is a use stricter. You can use one of the typescript forks that allow disabling ASI
Depends. North Carolina or Mississippi?
 function generateSquares(h, k) { let squares = []; for (let i = h; i * i &lt;= k; i++) squares.push(i * i); return squares; } Knowing how floating point error can give incorrect solutions (try doing `1.1 - 1` in your JavaScript console of choice), I went about solving the first problem exclusively without using `Math.sqrt`, and it came out quite succinct :) It's interesting to see how different people went about the problems though. Good luck with your future interviews!
We do this in our JS. Makes my skin crawl a little bit, but it is worth it.
I had a pretty easy time with Rollup. I just piped my app through it, and then through babel, and that was that. It runs on Node v0.10, and without the overhead of extra wrapping functions. What issues did you run into with Rollup?
ES2015 was by far the biggest change to the language, and so far browser support is pretty good - at least in modern browsers. By comparison, ES2016 adds pretty much nothing. Exponentiation operator, and Array.includes. Some browsers already support them.
It won't.
Why do I have a feeling that he was down-voted due to saying the word "terrorist
The kid who wrote this post shows some pretty serious symptoms of Asperger's syndrome (not trying to be insulting to him), it's just my take based on his shockingly blunt and unempathetic writing about others, coupled with a narcissistic and grandiose sense of self and his involvement in the maintenance of a javascript router software project (that he sees as something that is indirectly a means of *saving lives* based on one of his comments)
W T F
Your medium post is pretty much a case study of how *not* to go about announcing your fork of a popular project. Holy shit, what a trainwreck. I'm sure a large contingent of people actually hope your fork fails, if for no other reason than the fact you were a complete dick to some good people who have done a ton of work to build and maintain a highly popular project that has helped out many others. Open source communities go beyond just code dude (look up the word "community" if you don't fully understand why) WTF is wrong with you?
I have to make that `getUser` call because I get different userid for each folder. Sorry for not making that clear.
&gt;At what point is a project owner just not fulfilling his or her obligations? Are you serious? How is Ryan Florence *obligated* to do anything for you? It's an open source project.
Yes
What is funny is that if you run this code through standard.js, it actually warns about: `Unexpected newline between object and [ of property access.` So for me, this proves that writing my code without semicolons with standard.js is actually safer option than to try put semicolons where they belong myself.
Lol Jimmy my dog is dying of cancer SAVE US!
HTML stands for *Hyptertext Markup Language*. It exists for semantically defining the outline of your content. What you want to have is conditional output. HTML is not designed to handle conditional output. It is exclusively designed to define the semantics of your output. You need some sort of scripting language (either client-side or server-side, the later is more reliable because it's independent from the client) to add conditional pre- or post-processing of your output. Btw. `alt=""` is not for displaying Unicode emoticons but for providing alternative/descriptive text for the image if the image can't be displayed.
[**@FarPixel**](https://twitter.com/FarPixel): &gt;[2016-04-12 08:45:47 UTC](https://twitter.com/FarPixel/status/719808722575474690) &gt;[#Javascript](https://twitter.com/search?q=%23Javascript) poll time! Do you use 'var' to declare variables? ---- [^[Mistake?]](/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/4efc2p%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/joealcorn/TweetPoster) [^[Issues]](https://github.com/joealcorn/TweetPoster/issues) 
Since I use `'use strict';` I have to :)
I'm the same as you. I hated the concept, especially as someone coming predominantly from PHP, but as my new workplace adheres to the Standard code style I've had to adapt and have found myself loving it. It's just so.. clean. But yeah, it's preference. What matters is consistency.
I use JSLint, so if I don't use semicolons Douglas Crockford will break into my house while I'm at work and shit in my bed.
jQuery-Videosync does exactly what you want: https://github.com/MA3STR0/jquery-videosync
http://MA3STR0.github.io/jquery-videosync
And I don't like the creation of an extra variable just to be used exactly once.
I always thought the intention of plugins was to make life more difficult
Thanks for your response here mate, what you've said actually makes a lot of sense and I certainly agree with what you're saying. That being said I would've performed similarly to OP had I taken those tests and wouldn't have expected harsh feedback for a small task however I expect that's more to do with my incapability!
Yeah I find Webstorm's autocomplete to be pretty useless too.
Agreed. The first few days I hated standard, now you'll have to pry it from my cold dead hands! Like you said, its just nicer to work with.
Not only will it take care of it, it will remove semicolons where it can. Edit: the most common example being the last statement in each block will not have a semicolon with just about every minifier out there.
I could be wrong, but I think it was just a poorly executed joke.
You "reinvented" so many words in your paragraph, why not import them as modules?
Or you could use a simple library, that will tell warn you about this. (https://github.com/mmagyar/semiless.js/tree/master)
Expect that if you remove the first line in a "comma first" array it will fail. With the method presented in the article it won't.
standard.js would have caught this problem... EDIT: In the end I think the best idea is to use a linter and use one that's community backed. Like standard? Use standard. Like semicolons? Use semistandard. Like tabs as much as you like semicolons? Use XO. This frees up your brain to think about more important things than the nitty gritty of code formatting.
Is `this.someService.addNewItem` asynchronous too? I'm going to assume it is since you went to the trouble of calling the object a "service". Basically you can parallelize the user requests, and any promises needed to ultimately get you your add data since you potentially hae things like `this.graphService.getFolderChildren` in there. That's two `all`s that gives us those results in an ordered list, though not necessarily completed in order. We finish off with serial calls to the adds (new or some) to ensure they complete in order. // parallel user requests var userFoldersPromises = folders.map((folder, i) =&gt; this.graphService.getUser(userid).then(user =&gt; ({ user, folder, id: i+1 }))); Promise.all(userFoldersPromises).then(userFolders =&gt; { // parallel item data requests var addItemCallsPromises = userFolders.map(({ user, folder, id }) =&gt; { var someUser = { id: user.id, name: user.displayName }; if (someCondition) { return this.graphService.getFolderChildren(folder.id) .then((files: any[]) =&gt; { return () =&gt; this.someService.addNewItem("", id, title, files, someUser, folder.id); }); } else if(anotherCondition) { return () =&gt; this.someService.addSomeItem(new ItemModel({ id, title, user: someUser })); } // else ... }); // serialize adds return Promise.all(addItemCallsPromises).then(addItemCalls =&gt; { return addItemCalls.reduce((chain, addItemCall) =&gt; chain.then(() =&gt; addItemCall()), Promise.resolve()); }) }).then(() =&gt; console.log('All done')); Something like that, at least ;P
I'm fairly similar - especially with CSS (I know this is JS sub). It just makes it so much easier to make sure that small pieces of code are working before moving on to more complex code. Unit tests can help with this a bit. With your current workflow, the best think you can do: * Put your windows side by side, preferably on separate monitors * Use something like Browsersync or Livereload to refresh the browser when you make your changes, so you don't need to switch over to refresh.
Well my entire company is using standard-js so that's not really a good argument for us. As for open source stuff, there are enough people not using semicolons, and it's a small enough change that i have no problems with using it for open stuff. I'm going to conform to whatever config the project wants if i'm contributing to others, but for my own i'm using standard and i'm not going to apologise... Some pretty big open source repos don't use semicolons. npm, karma, fs-extra, and a surprising number of others. 
I use it because I agree with what he says, and there is a database of error explanations. There's also probably a linter option available that stops him from coming to your house.
well there is no difference in size between a newline and a semicolon (but most minifiers use semicolons anyway) But most minifiers will actually remove semicolons, and pretty often. They know the rules of ASI, so they will not use a semicolon when the engine will add it anyway, this is most commonly seen as no semicolons for the last statement in a block.
Apparently I should have obfuscated or whatever that's called... I'll have to look in to how to do that! 
It could be a confidence issue, but that doesn't mean it's necessarily a bad thing. If your confidence is low, it's low. We all start somewhere. I've been working with JavaScript for almost 20 years and while I may not check the functionality of every single line of code I write, there are definitely still times that I will check up on certain blocks of code or something that I want to ensure is working before moving on. Admittedly, I have written entire plugins or large blocks of code without ever "checking" it in the browser first, but I would describe this more as a solid understanding of the problem I'm trying to solve rather than the correctness of my syntax. If it's important to you to not check up on yourself as much, I would encourage you to think about the problem rather than the code. Think about how it could go wrong before it does. This will allow you to create your entire picture without getting distracted. If you've written out your entire solution, finding little things like syntax errors or gaps in logic can be easier to find. Good luck and keep up the effort!
This happened to me too. We switched to Standard at work, I bitched a little bit*, but it turns out it's not the end of the world. It's actually easier to type code, since an editor can automatically close your braces and parens and add indentation but has no way of knowing where to add a semicolon. I still use semicolons in my own code, but I find myself accidentally omitting them now. \* "This is like saying YOU CAN'T TELL ME WHAT TO DO, DAD except Dad is Crockford!"
Per your first point, that's a bug in the diffing software, not a bug in how the code is written. There are ways to fix that in git, and have it not show the whole line as a change because you removed a comma. it will instead just highlight that the comma was added/removed and won't show 2 nearly identical lines.
&gt; I have written entire plugins or large blocks of code without ever "checking" it in the browser first That's what I wanted to hear so bad. So it is possible... as you said it's most likely my own personal confidence issues that are getting in the way. Not to go to far off-topic, but I am extremely "unconfident" in real life aswell. I guess this translates over to programming, which I thought it wouldn't :(. I also use JavaScript as an escape from personal issues so maybe that plays a part too. I don't want to go into too much detail here, but appreciate your support and thanks!
Separate your code in smaller fractions and use codepen.io maybe? Or accept that Alt+Tab, F5 is a part of the usual workflow more or less every web coder has ... :)
&gt; makes strawman &gt; beats it up
In what way is it less readable with the dangling comma? 
Some friendly advice, I don't think it's having the effect you intended. Posting what appears to be a private conversation you had with someone else looks bad enough - but then to post a bit of it which begs for more context just sets you up for the other person to respond in such a way that makes you look bad, as Ryan did here.
In C this is undefined behavior, because the order of evaluation within the statement is left to the implementation. The problem is not the semantics of the prefix and postfix operators, it's that they have side effects, and when used within a single statement it is ambiguous whether the i++ or ++i is evaluated first. This is not a great example because the outcome for the statement is the exact same either way. Apparently, according to other comments, this ambiguity does not exist in JS. Edit: cf. https://en.wikipedia.org/wiki/Ambiguous_grammar for the general problem in computer science and in generating ASTs in particular.
It's a pretty poor way to show it, then. I'd be pretty miffed if what I thought was a private conversation was used to score points in a game I didn't know I was playing.
Yeah, not touching this one *again* ...
I used to make trivial changes and see if they worked. It's a confidence thing. Now I know what needs my eyes and what I know will work. Takes time. Don't best yourself up over it.
You could use `webpack-dev-server` instead of the combined watch &amp; http-server to make it even more simple. (Without additional configuration).
I suggest using something else than a iPad, any old PC or laptop will be good.
This. Add one of the auto-formatting tools that are readily available for these standards and there's even less work. 
author is advocating the use of commas inside JS files, not JSON. Obviously this breaks JSON. There is no harm in dangling commas there-even when we call `JSON.stringify(["apples","banana","pineapple",])` it still works as expected
This is really what bothers me most about the whole semi or not argument. I've used plenty of languages with semi colons. I've used plenty of languages without semi colons. I really just don't have enough time in the world to care about styling issues like this - pick a formatter and go. Standard js and semi both have an auto-formatter, so you literally don't have to worry about it. Just don't tell me through LOGIC and REASON that your preference is the one true way. By the time your code hits production, all of your preciously-argued styled choices are totally stripped out.
Not this time definitely, it supports easy navigation through the project among components and stores. I personally missed this for a long time.
TypeScript and VSCode is waiting for you. 
Reasons to not enforce it: IE8 (and below) doesn't support it. It is also invalid JSON. 
The primary reason I have found that people tend to like coding in interpreted languages is because the code/test cycle can be very short. It's precisely this feedback loop which gives you confidence that you're on the correct track. Other languages, such as java or C#, have an IDE which gives you a similar level immediate feedback. But it can sometimes take a minute or so to actually run a new piece of code. The point is, the alt-tab loop is not something to feel bad about. Instead you should figure out how to make that loop work better for you. If you use an IDE, can it give more immediate info, if you are writing a complicated app, can you use something like webpack with HMR to quickly get your changes running. There's a entire camp of coders which write specific tests (Test Driven Development) which provide that same feedback. I will say that there is a higher order of thinking about code design which is hard if not impossible to do in a tight feedback loop. I actually find this level of thinking best done while dreaming or walking, not sitting in front of a screen.
The superior and irrefutable argument can be summed up in three words: semicolons specify intent.
Well, today a friend told me the same thing, and I can see what was going on. It should be fixed by now: https://github.com/franverona/loadgo Thanks for reporting! :)
Cool, now it works! Thanks!
https://www.browsersync.io/ and a 2nd monitor
&gt; I will say that there is a higher order of thinking about code design which is hard if not impossible to do in a tight feedback loop. I actually find this level of thinking best done while dreaming or walking, not sitting in front of a screen. That's actually how I do it as well! For example last month I remember waking up with an idea to implement and I just coded it out in hours. I wish my thinking like that could happen while on the computer.. But it doesn't, which is kind of weird tbh. I am going to look into an IDE. That might help a bit and give me that extra confidence. Thank you
I have integrated it into our original code. https://jsfiddle.net/ezvdxzv4/
While you're absolutely right, I think you're also being pedantic. A more productive comment would have suggested a better example for "ambiguous code".
In my day we only had [vanilla.js](http://vanilla-js.com/) uphill both ways! [#]getoffmylawn
Here is the showcase. I just add your question and answer to [LiveComment Demo]( http://acpul.org/livecomment) for future use when that topic is going down. Just expand FAQ. Because thanks by your question. I just select block '# What is it supposed to do? []', copy-paste text and push changes to git.
If you are coding javascript, I would look into any sort of IDE which can run eshint ( http://eslint.org ) in realtime. This will give you much better "error" information than what a simple javascript syntax checker can give you. I personally like web storm, but I know other can do this as well. (perhaps M$'s new project Visual Code Studio ). 
No actually it is only set for one function. You need to either enable that property in a global closure or set it within each button click event. For simplicity sake, copy that cors property into the other button click event
Reasons not to use IE8: not supported by Microsoft! (among other things)
You're problem is not with your logic but with the scope to which `this` refers. `this` is pointing to the `Window` object because you've used an arrow function. When you would rewrite is like so: ```javascript String.prototype.sayHi = function() { return `${this} says Hi`; } ``` It does return the desired value. To learn more about arrow functions checkout the [MDN arrow function docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)
What do you mean? Windows what? React native is for mobile ios and Android. Not sure if it doesn't windows mobile. This course is made to..do react native in ios so you will need a mac to do xcode compiling. Edit: not sure for the down votes. If you read the article it clearly tells you how it works. Found this today React Native on the Universal Windows Platform https://blogs.windows.com/buildingapps/2016/04/13/react-native-on-the-universal-windows-platform/ http://www.reddit.com/r/javascript/comments/4emt5y/react_native_on_the_universal_windows_platform/
The link /u/Ld00d points to is probably the best resource. React Native on Windows is a bit of a challenge. The core team doesn't directly support development on Windows, electing to delegate it to the community. Though limited, there's also more information about this in the React Native docs.
That simple... You're kidding me?! :) Thanks! TIL more about arrow functions.
jquery is enough for an SPA. the two guidelines i have that may help: * if you have tons of spaghetti (ex 100s of event handlers): use a framework * if you have components that are resuable or would be using jquery's `.clone()` a lot: use a framework 
You might be right, but that document isn't really conclusive. Otherwise Linux support would be doubtful as well, whereas I'm doing Android development with React Native on Ubuntu without issue.
/u/FezVrasta is it possible that there may be no default "popup" created? Not sure what the problem is when I looked at the source-code, but if I just provide the trigger and content, there is no popper showing up. I couldn't even get a simple jsfiddle to work with a default "popup". But it work if I provide my own html... also, I'm not exactly sure how to work with the arrow. will popperjs "move" the arrow around? so for example if I provide, say, an image, will it turn according to the position the popup has?
Ryan said essentially that he was busy that week, and so Jimmy shot back by stating he too has the potential for being busy---but not too busy for React Router. Then Jimmy implies that Ryan isn't as commited as he is and may only be doing it 'for fun' because workshops are his real passion, and obviously that doens't need React Router to improve. Jimmy is implying that he *can't* turn away from React Router, because he needs it so he's a better maintainer despite only having done 0.01% of the work (literally true, I calculated the github commits). Taken all together, its way more than a dick move... it's delusional.
Oops, you're right! Thanks for the correction.
Yeah... I tend to take a "start using it and see what works and what doesn't work" approach to things. Frankly, confessedly... I was just using it in a little project because I thought the syntax looked cool. Lol! But now I've learned something new. Thanks again!
F5
Real programmers use Dvorak. :) 
Ditto. They're not a leaky abstraction. They're not an abstraction at all because the situation of changing the DOM based on something that occurred elsewhere in the DOM (or from polling a data service) is an issue that doesn't exist until we make it exist.
I think this is just javascript fear mongering. If you use babel, you're going to get compiled to perfect code anyway. If your shit don't work, you fix it. It's not like I'm going to accidentally expose passwords without semicolons. Languages like python don't even use them and readability is fine. The only time I used semicolons now is to enhance readability, or if I'm not writing es6.
Is it me or is RN much easier than React? Everything is set up for you—hot reloading, bundling, Babel, etc. Why does Facebook not do a similar CLI tool for regular react?
I guess you missed this one :) https://www.reddit.com/r/javascript/comments/4e5dlk/should_we_stop_abusing_fat_arrows/
You peeps minify your js, right? It'll take care of that dangle for IE8 or whatever you're worried about. 
Still nothing. I've researched everywhere and I cannot find a better way. I may try to use my old plan of using SWWebServices and it's functions that has getCurrentUser and see what it says.
Also, just FYI [unless in strict mode; thanks for claification /u/lewisje], `this` for primitives use their object form. So if you do something like: this === "test string" within your `sayHi`, it will be false, even though you're calling it from the string `"test string"`. That's because `this` is equivalent to `Object("test string")` rather than the original primitive value calling it, `"test string"`.
If that's the case, then perhaps I'd finally find a proper IN into learning this stuff.
Ha! Indeed I did... Quite relevant.
Good to know, thanks!
I actually started with TypeScript then moved to ES6 for a specific project. I've been wanting to go back, thanks for giving me a reason!
And then they speak about javascript fatigue... :) babel does the job no? which also kinda needs close to zero configuration, though I cannot judge it on slowness, don't notice that with the size of projects I am on.
Update your user button to exactly this, don't include the other parameters, etc: $('#user-btn').on('click', function() { $.support.cors = true; var myUserName = $().SPServices.SPGetCurrentUser({ webURL: "http://yourSPsite.com", fieldName: "Name", fieldNames: {}, debug: false }); console.log(myUserName.split('|')[1]); console.log(myUserName); });
One guy at our work does just this. He wrote a small script to run his code through a formatter to how he likes it on load, and it formats it according to standard-js on save. He only ever sees code the way he likes it, and the rest of us are happy with the standard format we use.
The `with` statement actually is ambiguous to the compiler: before runtime, it can't know what variables names within the statement refer to. And I'm not sure what you mean by `++i = i++`, that's not valid code. `++i === i++`? `++i` vs `i++`? Anyway, I think you're being way too aggressive about this. I'm not "missing the point", whether the point you're referring to is readability (which is what my first post was entirely about) or the counter-argument (this is literally what I've seen brought up time and again, including in that famous argument between Crockford and the Bootstrap dev). Besides, "ambiguous" clearly isn't incorrect in either usage, so you should really specify which way you're using it. Otherwise you're being ambiguous ;)
I agree, but I think this is how it always is when you compare mobile to web development. Mobile is a much stricter environment, and so enforces more rules and tools that follow those rules specifically, whereas the web is much more open and nuanced, so it's harder to enforce a standard way of doing things, which is why you see the septillion frameworks.
[No more horrible than Qwerty.](https://www.microsoft.com/enable/images/products/kbdvorak.gif) And it makes regular typing a hell of a lot easier. 
When you say "real-time", is that just to sound cool? Because the definition of real-time that I'm familiar with is "guaranteed to terminate within some small, very specific amount of time", which of course no JavaScript is even remotely able to guarantee.
It's more than one keypress. If you have auto completion and you type e.g. `somefunction({&lt;return&gt;` it completes to something like somefunction({ | }) , and adding a ; there requires 5 additional inputs, which includes your hand leaving the typing position depending on the keyboard layout. That quickly adds up.
you can also run a 'linter' to see if the javascript is valid/breaks. like `jslint` or `eslint` theres multiple plugins that sync with your editor and browser. someone suggest some? for sublime `browserrefresh-sublime`, `livereload` or `auto refresh` but there may be some newer better ones 
Well, if the users are all part of the same domain, which if there just employees in your company (they should be), then you can just make the blatant assumption that you need to format the logins similarly with the email being a variable. Here, I'll put a fiddle together to show you an example.
Declare all the things!
You've never worked in a team... ;)
&gt; By the time your code hits production, all of your preciously-argued styled choices are totally stripped out. Just to be clear, this isn't about visual style. It's about code safety. In exactly the same way that [always using braces](https://www.reddit.com/r/programminghorror/comments/4eagen/why_always_use_brackets_with_if/) is about code safety. EDIT: Apparently people think I pulled this reasoning out of my ass, but actually [code safety has always been the reason](https://google.github.io/styleguide/javascriptguide.xml#Semicolons) we use semicolons. If you thought we use semicolons because they look pretty, then you've been misinformed this entire time.
Perhaps yes, I'm only aware of the es-2015/stage-0/react presets, and then the plugins you add as you go (object spread etc), not really a burden for a 10-minute setup you can reuse as you go. Just found it a no-argument as I read it :)
Awesome! Thanks! I am currently going over the entire script and removing all my debugging console.logs and commenting some thing. I try to make sure I understand exactly what is happening everywhere in my script at the end of the day, because I will have slept by the time I get back. ;) lol Yeah, thanks for the API advice. Basically I can do a lot of the complicated algorithms that sites try to test me with. I've completed those and am moving onto learning how to utilize other sites. Basically what I am saying is, theory is done. Real world practicality is up next. Hence Sharepoint. :P
I'm talking specifically stuff like "find all the squares between x and n". Outside of some very niche cases, I can't say that this sort of problem has come up in my daily career, and I've been doing this professionally for 7 years now. The sting/text processing is perhaps a little more on-point. I guess my problem is that both examples seem so abstract compared to daily realities. I'd be much more interested in talking to a candidate about legit problems that we've actually faced over the past 6 months to see how well they could actually handle the daily tasks handed to them.
&gt; Babel adds overhead and configuration complexity, and so it's not the right tool for every project .pipe(plugs.babel({ presets: ['es2015'] })) I admire his dedication but did he really just write a transpiler because he thought babel is complex to set up?
But .babelrc is optional. The preset is a tiny, little option. I really don't get it ...
It works in general, but app cannot auto start after being sideloaded. You need to call `react-native start` after sideloading. This is the only difference I found till now.
Well the form can be narrowed down in to small components witch appear as much as the add button was klicked so a framework would definitely help. I've learned a bit of angular 2 (maybe 40 hours) but the user base was rly low and mostly too intelligent to find solutions on problems of a newbie. While I like the full stack thing of angular 2, the idea behind the components of react sticked to me more. I can just not grab my mind around redux, I know what reducers, actions, and all those things are, I just don't know when and how to use them. 
This isn't an April Fool's joke?
Oh, I am sure they'll come up. lol 
[removed]
Yeah, I got similar auto completions.. But they just do somefunction({ | }); instead! :D
Ionic produces apps using HTML/CSS/JS, so they're essentially web apps rendered in a minimal browser. What you can do is limited, performance is bad, and they won't look as good as real apps. React Native produces actual native iOS/Android applications, rendered using the actual native APIs and UI elements.
Hahah thats awesome - glad this helped!
Nope
Babel was once comfortable under 3Mb. When Bublé is as old as babel, it'll either be as big or as simple as it is now.
Yeah the config thing just sprang in my face. I can relate to the other two at least, Babel does take some time to transpile and often goes overboard with transforming code in ways that hit page-performance. Though with the es2015-loose preset the output is basic es5 without es6 decals.
Not necessarily. The scope of Babel increased dramatically to basically allow you to do *anything*. This seems to have a very straightforward function with little creep.
&gt; I wasn't talking about the grammar. There's a reason I strongly emphasized "humans". English also has a grammar, although it's most definitely an ambiguous one, so emphasizing "human" doesn't change the context. Ambiguous has a special meaning when discussing language (grammars) of any type. &gt; it would be helpful to also recognize that the word "ambiguous" has been commonly used to describe things that are hard for us humans to understand, and it should be obvious that this is what the OP's article meant. Using a word that has a *meaningful* definition in the context your using it (language) and then using a definition that's, at best, a secondary use is... a little ambiguous ;).
Assuming perfect knowledge, nothing is ambiguous. This argument quickly becomes "No True Scotsman". Certainly, the Javascript semicolon rules aren't ambiguous assuming you understand them. Nothing is ambiguous when you understand it. http://inimino.org/~inimino/blog/javascript_semicolons &gt; The rules are: &gt; When the program contains a token that is not allowed by the formal grammar, then a semicolon is inserted if (a) there is a line break at that point, or (b) the unexpected token was a closing brace. When the end of a file is reached, if the program cannot be parsed otherwise, then a semicolon is inserted. When a "restricted production" is encountered and contains a line terminator in a place where the grammar contains the annotation "[no LineTerminator here]", then a semicolon is inserted. &gt; Approximately, these rules state that a statement can be terminated without a semicolon either (a) before a closing brace, (b) at the end of the program, or (c) when the next token cannot be parsed otherwise, and furthermore that there are certain places in the grammar in which, if a line break appears, it terminates the statement unconditionally. The practical effects of these rules are discussed below. &gt; The exceptions are that a semicolon is never inserted as part of the header of a for loop of the form for ( Expression ; Expression ; Expression ) Statement, and a semicolon is never inserted if it would be parsed as an empty statement. Perfectly clear. Not ambiguous at all. Assuming you underst... Well, maybe you get my point now.
Hey Rich, this project looks very nice. FYI, just a quick issue I found, the Rollup link in the read more page is broken.
Well hey, I'll just let my users know that and they'll surely upgrade immediately! /s
Thanks for the reply, you're right on both counts (though without the transaction it really doesn't hit 1 FPS). Performance is up to about 10 fps for 3 calendars once the JIT warms up, which is reasonably good on a stress test.
Can we stop with "batteries included" as a way of describing software. 
Good question. I was asked this recently before. First of all, I wouldn't use tags that aren't valid, like `&lt;news-menu&gt;` but maybe you meant `.news-menu` If `a` is the component in .a .b { ... } What happens when you have a component `c` in which you want to have the class `a`? .c .a { ... } Now you're bringing with all your component-level styles. Being explicit that a selector is a component is very useful against things like this. You might have a "menu" component somewhere [data-component="menu"] .something { ... } But in another component you might want to use this name as a simple class for something that is a lightweight menu, like a regular `ul` [data-component="modal"] .menu { ... }
"silly" data attributes are valid HTML. Custom tags are not. :) Also, now you have to blacklist all the other default HTML5 tags like `article` or `detail` as you might have collisions with other libraries.
I think I need you to elaborate here... But so far, "just add dependencies!" sounds like a rookie mistake in the programming world. Why is the introduction of a dependency better than following a coding pattern? And what JS library exactly? Why JS to manage CSS?
Like with web components, you'd almost certainly namespace the name of the tag, e.g if you were working at facebook: fb-news-menu .title { ... }
I did not mean class selector actually, I was intending to use the tag name `news-menu`. I've seen and have used such tags in production before with no issues (though IE8 requires some bodging, as is customary). Using a tag name makes it very explicit that it is a component, just as the `button` tag would. I suppose if you were to make several non-unified HTML structures styled by the same set of styles your approach would fair better. I can't say I've had to do or want to do such a thing, though, and I'd prefer to have all versions of that component be powered by the same mechanism. In this day and age, that'd mean a single implementation through e.g react, vue, mithril, etc.
Thanks for the heads up!
Const in Javascript has nothing to do with immutable data, it's just that you can't redefine the reference 
Babel started the same way. You're project is just babel 0.x in the current year.
Unused variable! 
Well that's in the hands of the creator. Creep isn't inevitable.
If basic arithmetic really does never come up in your line of work then that's fair enough, maybe another exercise would be better. If you've got a real world problem you can talk about that is the right kind of size for an interview scenario, that's probably more useful anyway. I'd say never needing even basic mathematical aptitude is pretty unusual, though, even in front-end work. It's not exactly a complicated problem, and a good solution only needs a simple iteration and a little thought about the data you're working with, which seem like pretty everyday things to me.
Expiration dates are a wonderful thing! I *love* software that has an expiration date, because I don't need to worry about whether it'll still be actively maintained in a couple of years. (Or, in this case, whether I'll still want to maintain it.) Bublé doesn't need to become Babel, because Babel already exists.
Do you have any examples? I look up Ionic apps every once in a while to see where they've gotten and always come away a little disappointed. It may be because I'm paying close attention to the behavior of the UI but it never feels right
&gt; Performance has changed a lot form the early iPhones Sure, the newer phones are a lot better. But hundreds of millions of people are still on older or low-performance budget phones. I do work in Asia and there are easily 200 million people on phones with the capabilities of an iPhone 3GS and tons of popular apps are laggy as hell on the average phone here.
Can you elaborate on a specific struggle you've had with ionic?
I also don't think this is cross-browser compatible. 
I just jumped on an Ionic app at work for the first time so I don't know any examples and cannot share my own work just yet. I remember looking at old examples of Angular sites and being throughly unimpressed much in the same way you seem to be... it took awhile for me to figure out that much of the impressive shit that was using Angular wasn't really advertising it. I think that may even be more of the case with webview style mobile apps... there's little to gain.
Going after these markets is an active choice - a choice that recognizes the technology you build the app with will require it to handle shitty old phones. If running well on a shitty phone is a priority, then you're not seriously considering using a technology that's slow on shitty phones.
 function(arr){ var copy = arr.slice(0), result = [], i; while (copy.length &gt; 0) { result[result.length] = copy.splice(Math.floor(Math.random() * copy.length), 1)[0]; } return result; }
Assuming we were doing this for some psuedo privacy, how would you handle the following? [_encode](data, callback) { return csModEncode(data, callback, this); } then in another module where I passed down this _this[_encode]({... the symbol for encode wouldn't be available, I don't want to add another param just to hand off the symbol so my gut reaction would be to define the symbol in the generator of the class. The kicker is that is not aloud in Babel because it's importing something that is not at top level. I've tried declaring the Symbol at the top level and assigning it but still get the same issue with importing at lower scopes. What would be the best way to do this?
yeah, i thought react native was all about 'write once, run everywhere'?
dependency free? a lot less lame than Batteries Included IMO
Huh. Not only is it recommended but it's been there since the beginning of time... Not sure how I missed that
That is an interesting situation. You have to pass your public methods to the next module. Things get hairy with private methods. They are also untestable, so it's a trade off. I would assume defining it in the generator is the proper solution! I like that idea.
Gotta agree with /u/drunkenfaggot. You shit the bed with your dismount. You should have been more respectful. Looks like rrtr is dead. Long live react router. 
It means something different though: ID expect something "dependency free" to not have any library dependencies, not come with extra library dependencies in order to provide the batteries. 
What stack are you introducing it into and for what reason? As already mentioned, it's popular in React+Redux world for managing state, as state mutations are super bad. It helps with more than that, but that's the basic idea.
It's learn once, write everywhere
You can actually use Redux while mutating state, but it is recommended to create new objects / arrays instead.
Pros: - immutable data structures and all the niceness that comes with them. (Easier to reason about, less worry about side effects, etc..) - a robust api to work with - performance gains in some cases Cons: - you will always have to work with plain JavaScript objects eventually so converting to and from the two can be kind of tedious - if you are using es6 features, you lose out on some of the nice syntax improvements for objects such as spreading and destructering
The actual coding is about 17 minutes. So I apologize about going over the initial 15 minutes!
well... what problems are you wanting to solve by bringing immutable into the stack? As a general rule of thumb: If you have to ask other people (who dont have any context on what you yourself are actually building) why you should bring X into your stack... you should probably NOT bring X into your stack. When it is time to bring it in, you will know so, because you will have tons of reasons to bring it in, and wont need to ask other people why to bring it in. 
one thing that you might want to look into is how much of your codebase is going to change in order to implement it. with some data structures if you are passing a child node into another function and changing that child node in that function in order to replace it, or pass the new values back up to replace the immutable object there. some frameworks are better for this (ie redux) and some are better at managing state for you (ie ember)
Don't forget about [IE support](https://phabricator.babeljs.io/T3041).
You know what would have helped avoid this in the first place? If `valueLink` were a micro-library to start. =)
Since you didn't go into Webpack, I thought I'd mention [survivejs](http://survivejs.com/). Helped me a ton to get up and running with webpack with HMR.
Interesting, but I somehow doubt any of this would run on Windows 10 either way. 
This is great, thanks for posting!
http://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/
Thanks for sharing your project, which you obviously put time and thought into. It looks useful, and I totally get where this fits snugly into a gap that Babel missed. Between this and rollup, it looks like I can achieve transpiled code that much more closely matches the original intent (I.e., without extra wrappers and other bloat). Best of luck with the project!
Agreed. If we never tried to reinvent the wheel, we would all still be using YUI, or even Prototype. (Yikes!)
More like 6 months of technical debt in 15 minutes ;)
You aren't required to use persistent data structures with Redux. You are guided (via documentation) to not mutate data in-place within your reducers though. Persistent data structures make that goal easier, but again, it's not a requirement for using Redux.
B-but it's a trending library, why not use it? /s
Am I the only one who thinks it is crazy to put Javascript inside html inside Javascript? And you cannot even use words like class and you have to put your Javascript inside curly braces what is known as an object but now it is used as a "put Javascript here"-thing?
Can you explain why it is easier? How is it better? 
Not the only one. I think a lot of people gets weirded out by jsx at first. But once you get the hang of it it starts to make sense. Now I really like writing it. 
Okay I looked at all of them and I found vue to be really easy to understand in comparison with react. Plain Javascript would be annoying to write with all the Dom manipulation. Thanks for the help, gotta go learn vue for now. 
Apparently Symbols don't ensure true privacy, according to [this](http://stackoverflow.com/a/22280202/4361297).
Ionic 1, I'm not brave enough to use a beta on production. React Native is more like a boilerplate project, it includes most of the bells and whistles needed to create a typical React Native app. 
This is the right answer. As a .NET / JS developer, I much prefer having the ease of accessing a private member for that once-a-year situation where it's a necessary evil. The rest is all best practice stuff. Sure, it'd be great to get a private keyword in the next draft, but for now, _member() works just fine.
only for ios. might have been better to add that to the title
If you're into 'write once, run everywhere', you should try Ionic (v2). 
babel. var. wat.
Hi, please open an issue on GitHub providing a codepen of the problem. About the arrow, Popper.js will simply set its position to be centered with the reference element. You have to style it using CSS and the `[x-placement]` attribute assigned to the popper.
 function returnTrue () { returnTrue = true; // Define (already declared)! try { if (returnTrue === true) { return returnTrue; // Return! } else { return returnTrue; // Just to be sure! } } catch ( returnTrue ) { return returnTrue; // Gotta error handle! } finally { returnTrue = arguments.callee; // We will never let you go, callee! } }
Silly question: why did you use gitlab instead of github to host the project? Cheers!
tl;dr; you'll know when to bring it automagically, if you need to ask, it's too early. sounds legit.
This may be one of the cases where you're better off with cygwin or something because the interoperability between the built-for-Linux bins and the Windows bins isn't really there.
 // I'm sorry for that but at least it works! (Actual comment I read in some code once.)
Stop trying to reinvent the wheel. You can just take advantage of closure to achieve private members. function Foo(x){ this.getX = function (){ return x; } } 
What does batteries included mean? It has nothing do do with a web application. It means that you don't need to externally find a power source. It's a meaningless term unless it's universally codified which as far as I understand it is not. 
You're saying react decreases tech debt?
I just feel awful mixing HTML into a scripting language.
No. you can do private members using function constructors and closure. Look at my comment below.
I work with promises every day in Node. Its really not hard to just use a catch(); myPromise().then(...) .then(...) .catch(function (err) { console.error(err); }); 
For us it's WHY we should be using Immutable with Redux: we've had several extremely-difficult-to-chase-down bugs that turned out to be caused by us accidentally mutating an object/array instead of copying.
flux and redux make it zoom
JSX simplifies working with react, switching from class to className is worth the trade
I often think that, but would never presume to admit it in a comment. One of my favorites // add 1 to i i--;
Hey! That's pretty cool! I'm not real well versed in bitwise operations... You have those going on in there, right? I'm going to have to look in to those. Thanks for putting that together!
ow, my sides ...
https://github.com/feross/eslint-config-standard/blob/master/eslintrc.json
The following syntax would be pretty awesome in my opinion: https://github.com/zenparsing/es-private-fields
If you like vue, you might also like aurelia. But good to hear. 
That is when you are also aligning items inside a container. But when you are aligning two adjacent elements and margin &amp; paddings come into play, only God knows how that CSS works. I have, more than once, hard coded margin top and down to place an item correctly.
I'm at work, and I'm not sure whether its safe to click this, because I don't know what 'DIY' means in the context of something that is named [FapFap](http://www.urbandictionary.com/define.php?term=fap).
If you honestly value open source, use NPM, and are aware of a problem why aren't you solving it? Do you really think trolling me is more effective?
"DIY" is for "Do It Yourself". It's completely safe to be open at work. It's only a parody of a JS Framework.
Thanks! A) No – that's something I want to steer away from, as it introduces the complexity of the project and would ultimately make it harder to use. Instead, the plan is to offer target-based transpilation, with additional customisation, e.g: var result = buble.transform( source, { target: { chrome: 47, node: 4, ... }, transforms: { taggedTemplateString: false } }); // { code: ..., map: ... } B) Partly as an experiment, partly because we've been using it at work for a while and I've been using it for private projects (you get unlimited private projects for free!) and I've been impressed. It has some great features such as integrated CI (and some that GitHub are now playing catch-up too, like emoji reactions to issue to cut down on +1-ism), and it's nicely customisable. Plus I've always found it odd that the open source world keeps its DVCS repos on a single closed source platform...
yes. Unless these people are making an operating system or a 3d game engine, they shouldn't be worrying about such trivial optimisation. Adding Class to JS was a mistake because it's not really Class and it confuses people who come from other programming languages who expect it to behave like a Java or C# class.
But this is irrelevant to the discussion. If the framework lets you expose REST services then you can support different clients easily. Exposing a service to a mobile platform is not a reason to switch to a JS framework.
&gt; If you require ad networks, analytics etc. etc., the performance starts to lag and there is little you can do about it. The good thing about this is if you are willing to build out your own plugins for things like logging events and such, you'll save yourself from a ton of performance issues.
Put `animation-fill-mode: both` on your thumb animation because it plays the animation then instantly backs down. With animation-fill-mode to both it will stay up :)