 (function refresh(){ window.animationFrame.then(refresh); ... })();
You can actually just use CSS for this, no need for javascript. 2 approaches come to mind, both very easy to implement: 1. make an image (PNG with transparency) for your corner, put it in an element (eg. a `&lt;div&gt;`), and position that element absolutely in the bottom right corner of your page. add a `:hover` effect to resize the image. 2. use 2 elements (or pseudo-elements) and CSS tranforms (rotation + linear-gradient) to avoid images. otherwise same as #1.
Oh, ok. Thanks for clarifying.
currently its displaying GMT/UTC 
I've been doing callbacks for 15 years. There's nothing that complex about them, and many non-trivial things have already been done with callbacks. I've used promises too, and I don't prefer them, and I've seen them abused just as badly as callbacks can be. 
So simple to polyfill.
This has unnecessary recursion, move the var name declaration inside the for loop.
My eyes, they burn D: please reformat this, use four (4) whitespaces before each line to make it into codeline Like this You can even indent
I could kiss you. Seriously, thank you. I didn't have to fiddle much at all to get it working. I see my problem was that I was not thinking about functions, and the possibility of calling a function from within itself(!!) I didn't know we could do that. Is there a name for that?
Ah, damn. Alright, I tried creating a script to reproduce the error but am not getting the same result. I get `getaddrinfo ENOTFOUND` for the `xxx.yyy` address and the program hanging for an address like `http://google.com:23/`. What version of node are you using and what's a better address to reproduce the error?
Hmm, now I'm getting "undefined" come up sometimes in the pair, time for a bug hunt!
Ah it was to do with my array indexing sometimes trying to access element -1 of the array when Math.random() generated an index that rounded to 0. Should be fixed now.
All good, I also went with "Math.ceil" rather than Math.round and this helped.
This depends upon a shuffle function, but can move *x* random values from source to target. Does not mutate. Works thusly: 1. Shuffle the source array. 2. Remove any elements already in the target array. 3. Returns a new version of the target array with *x* elements of the source array added to it. *Mike Bostock's optimised Fisher-Yates shuffle from http://bost.ocks.org/mike/shuffle* function shuffle(array) { var len = array.length; var temp, i; while(len) { i = Math.floor(Math.random() * len--); temp = array[len]; array[len] = array[i]; array[i] = temp; } return array; } The actual function, `moveXRand(source: array, target: array, x: integer) : array` function moveXRand(source, target, x) { return shuffle(source).filter(function(val) { return target.indexOf(val) == -1; }).reduce(function(acc, val, i) { if(i &lt; x) acc.push(val); return acc; }, target); }
&gt; So how do you do this? How do you know in advance where there are these kinds of people? Well, it's not easy, and you can end up in a situation like yours even if you are careful, but there are some things you can do that may help. When you apply somewhere, take some time before to study the company and its circumstances. Are they new? Small? Growing? Mature? Don't just focus on "what they do" but also on _how_. Do they have a product or are they developing one? Do they ask for someone to be part of their (already formed) team or to be part "of our _new_ team"? If they have public stuff (maybe code, maybe documentation, an API reference...) take a look, again, not only at what it does, but have a critic eye towards other characteristics. And it's not only about quality, about how clean the code is or if they're doing tests. It's about how they do it. Are the tests done correctly? Is the API stable or is it changing a lot? Do most commits come from a single person? All this can give you a rough idea of the _team_ behind the company. But of course the most important bit comes when you actually go there for interviewing. When that time comes, remember that you're interviewing them as much as they are interviewing you. Do **ask questions**. Questions not only about what they do, and what they want you to do. Ask about the team, ask to meet them if possible, or at least some of them. If they tell you they are "rewriting most of their apps to be based on" AngularJS (or whatever), ask why. Ask who decided it and what's the most immediate goal. Don't be afraid to ask these things in an interview, ever. Of course, be polite and ask things nicely and correctly. Don't be pushy but don't leave an interview with doubts or without a clear idea of what you would be getting into. If somehow you find yourself in an interview where they don't want to answer those questions, it's _probably_ not a good place.
Strictly by the ECMAScript specs, this is true; however, [in a reasonably modern browser](https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all), `document.all` will be in the same equivalence class as `null` and `undefined` for the purposes of `==` and `!=`, `typeof document.all` will be `'undefined'`, and `document.all` will be falsy, although `document.all === null` and `document.all === undefined` will still be false. However, property accesses on `document.all` may still work; this is done so that browsers could implement the properties of `document.all` for legacy code built for very old versions of Internet Explorer, and yet explicit tests for `document.all` in standards-focused code will return false (although curiously, `'all' in document` still returns `true`). It's just something interesting to know about: In any JS code written in the past 10 years or so, `document.all` should have been assumed to be dead in the water.
user to server please
so it is user to server please
I know that used to be the case, but at least on chrome the canvas offloads to the GPU when it can. You can check chrome://gpu/ to see what's using hardware acceleration. I can't notice any difference between them in the demos on my machine, though the effect seems to work instantly. 
It's actually simpler to check `val == null` because in standard ECMAScript, the only two values that are loose-equal to `null` are `null` and `undefined`. (In the [latest HTML standard](https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all), `document.all` is also loose-equal to `null` but you shouldn't be dealing with `document.all` anyway, it's just there so legacy code can still work.)
The only huge functions you should have are the ones that wrap the rest of the code in a JS file into a closure (to avoid polluting the global scope), and that's only for environments without proper module support.
Because of how JS compares objects (by reference, not by value), it's not even a good shorthand; a better one would be... * `usercount.length &gt; 0` for arrays * `Object.keys(usercount).length &gt; 0` for normal objects * As an abstraction, something like `isEmpty(usercount)` I have heard of proposals for "value objects" (which could be easily copied, and checked for equality by comparing properties and prototype chains and so on) but nothing has been implemented yet.
If you're using loose equality anyway, condense it to `usercount != null ? usercount : 0`; `usercount != null` is only true if `usercount` is `null` or `undefined` or, in [a quirk of HTML5](https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all), `document.all`.
I'm a little confused about what makes the author's second example lazy and the first one not-lazy. Is it because the original `priceLt`method returns a custom function, but the `contains55` method simply returns a prototype method? How could the first example be implemented lazily? It seems inevitable that the `chosen` result needs to first filter by the price, then take the first 3 results. How could this step-by-step algorithm be reduced to even less and lazily?
There is no server in javascript. It runs only on the client. You need to write a server with WebAPI, Java or Node.js. These will expose methods your client can call. A different client will have to call them aswell. Maybe this is a starting point for you: http://socket.io/get-started/chat/ 
Thanks, that's all very helpful!
Non sense
That interactive debugging looks fantastic.
 var names = ["Bob","Sally","John","Sarah","Frank","Lucy"]; function getNames(total) { var new_names = {}; while(Object.keys(new_names).length &lt; total) { new_names[names[Math.floor(Math.random() * names.length)]] = true; } return(Object.keys(new_names)); }; * Make an object new_names * add a random name to it (if the same name is added, it just overwrites the previous one * Keep doing this until we have TOTAL names) * return the list of object keys (i.e. the names) * TODO: this will fail if total &gt; new_name.length! A better way would be to shuffle the array and take the last 2, but Javascript lacks a decent shuffle. 
2kb minified is great, and I really like simple solutions over including a giant &gt;200kb library. Style looks kinda like Mithril.js. How would this compare to other smaller VDOM UI library such as Mithril.js or Vue.js in terms of ease of use/performance? What are the other sell points?
so i wouldnt worry about it if your the most experienced in your team. i would also guess you can replace this by hanging out in irc for angular or whatever stack. the amt of knowledge ive gained from helping other ppl and just reading how to fix *X* in irc is huge.
Would it be possible to use arrow functions instead of regular functions? I know that you guys want to not require ES6, but I don't have a problem with that.
thanks i Favorited that, cheers for your help :)
Really great read. Being freelance, I need to get myself more involved in open source.
Well - NOTHING happens - all that happens is you will have the wrong impression of the variables type - you do realize you can not typecast in JS right???? I'm SERIOUSLY amazed at the level of "professionalism" here - you all blow me away, amazing JS programmers!
Agreeing on IRC chans for questions, news, debates etc - just remember to try to fix things yourself and google first, and deal with it if you inadvertantly annoy someone because remember they're giving you their time As for teams, in UK agencies the structure is often teams of three - a junior, mid level and lead front-end dev. You can learn just as much if you're solo but in these teams you'll get one-to-one guidance which can be an advantage (i didnt realize i was so far behind the times until i joined a team, learned to use SASS/Grunt a few years late). Sometimes JS is a separate team, sometimes not. Try to learn vanilla JS when possible and dont fall into the jquery-only trap. (the good parts o'reilly is a great book) As for progression, most places will try to keep you a junior. You're experience will dictate whether you 'know how much you dont know yet' and you'll know deep in your heart when the time is right to move on
and remember that a re-skin is never a re-skin, and that you'll probably always need more time than you think if its a html email, and responsive html emails arent really responsive on android atm 
Hey guys! I built GentleForm to focus on validating forms when it makes sense from an user perspective. I tried to make it as simple as possible while using "native" technologies. Let me know what you think :)
Done. But this isn't the whole code (this is a really small bit of it)
Cool but why no child components by design? That would really limit code reuse.
That's when I knew I was going to be disappointed 
I have a good feeling this is going to become an industry standard for webgl, that's how important it'll be. If your compiled glsl shaders are as fast as (and they should be) hand written shaders.
Can you explain why ES6 makes you shake your head? Or why JSX is considered a 'super heavy abstraction'? From what I can tell your syntax is equivalent JSX, except it uses arrays instead of pre-processed HTML syntax. In fact if you were to use React without JSX I believe the method signature is the same (element type, props, children). It isn't difficult to see the translation from JSX -&gt; code, only makes it easier to read.
Oops... Posted of my phone. Ment to do !==. I'll fix it.
Would love that for Visual Studio
There are a number of extensions that do this. One such example is DevExpress' CodeRush.
Dude you're my role model, thanks for making these!
Looks nice, though pretty complicated to use (for those not use to Angular). Just as a cheeky plug, I've created another validator that may interest those who use Bootstrap (and possibly Laravel) called [dominar.js](https://github.com/garygreen/dominar)
Using [lodash's transform](https://lodash.com/docs#transform) for something like this would be optiomal
Both examples are evaluated lazily, because they both begin by wrapping the input array in a Lodash wrapper (e.g. `_(gems)` and `_(phoneNumbers)`) which enables method chaining, which is necessary for lazy evaluation. The article uses the two animations to show two different possible approaches to how the gem filtering example could be evaluated, but as written the second one is the one actually used by the library. If you wanted eager evaluation, you'd have to write them differently. Have a look at the linked JSPerf example: var r = _.take(_.filter(_.map(arr, square), odd), limit); # eager var r = _(arr).map(square).filter(odd).take(limit).value(); # lazy The first version is doing traditional function application with unwrapped arrays, the second uses chaining with wrapped arrays. That's also why the second version needs `.value()`, which is what actually kicks off the computation. 
This looks great, I'm going to add this to my list of things to try after Mithril
Post a test case on jsbin or jsfiddle. Indent your code by 4 spaces or 1 tab before pasting it here. The function which turns relative x/y coordinates into an angle is Math.atan2. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2 Then you can either use this for the rotation or use sin/cos to get the normalized offsets. I'd do the whole thing with 2D vectors, because I have a lib for that. Subtract the eye position (eg 5 | 5) from the cursor position (eg 8 | 8) and you get the difference (3 | 3). Then normalize it (0.707... | 0.707...) and since this vector now has a length of 1 (it's a direction vector), you can just multiply it with the distance. It's two lines of relatively simple code.
COFFEESCRIPT SHADERS!?!? I'm *really* loving the whole "language X compiles into js". Different people like different syntax, as well as the language features....
Name is very close to [jsfxr](http://github.grumdrig.com/jsfxr/), a JS utility for generating sound effects for games.
&gt; I recently read an article that noted that having many functions slows down your application. That article was wrong. Small frequently called functions will be inlined. Today's VMs are pretty smart. As usual, if you want to figure out which parts are actually slow, use a profiler.
And with its syntax... it should probably just use JSX. JSX at least isn't cumbersome to write or maintain.
Why should I use this over duktape.org? Having Samsung behind a piece of software isn't a reason to use it. Samsung's track record with open-source is quite bad and they're fond of doing very aggressively anti-competitive moves. A great example is taking over the Tizen project and forcing their way with everything (despite it being a Linux Foundation collaborative project). Making things worse, they proceeded to make the 'official' SDK proprietary under a license that locks down the developer's code. Thanks, but no thanks Samsung.
Then don't write your docs in ES6, don't act like this tool is special for it though
I'm just annoyed at some of the syntax for things like `import` and classes. I feel like the module loading "problem" has been solved 5 times, but now there is a new convention that somehow managed to introduce a something that does not look like any of the popular methods for loading modules. Like, why not just make `require` native? I do like templates and arrow functions though. JSX requires a build step (or transforming/transpiling) so that is a little annoying if you are looking to sprinkle some react into an existing application. It requires a lot more modification to your code base than a simple script or set of scripts. I know you can write React without JSX, but whenever I have played with it, it seems like you are punished a little for not using it. Also, I agree that it makes it easier to read, there is just a lot of extra magic going on that makes me personally cringe a little. But hey, such is the React way.
example: var show = []; haveYouHeardAbout setup() { console.log(whatsTheDealWith show); } setup(); output: &gt; object 
It's more of a statement for ease-of-use and compatibility. If something uses ES6 today, it means that you need a build step or you are targeting a browser that has actual support for ES6. This may mean refactoring your site/app. Kilroy can be used by including a single script in your HTML. I don't believe it is trying to compete with full-feature frameworks like React. I plan on using it for tiny dynamic parts of a larger project.
help? :'(
Not sure why you are being downvoted, you are absolutely right. The code to pass to the engine has to be stored somewhere so this will take a ton of ROM for any meaningful program. Most of the microcontrollers I use dont even have 64kb of RAM. 
I am really liking Typescript. I have been working on a fairly large javascript project this year, and things are starting to get really messy. Refactoring properly is near impossible (to the point that both facebook and google have their own tools that let them refactor javascript across a large codebase). I think TypeScript fixes a lot of the problems I have with javascript. In jsfx's codebase, the only "hack" I had to use when converting my pure javascript library was that there were certain variables that pertain to a webgl rendering context, and cannot be used outside it. In javascript, you can just assign an object any property, and it's happy, but in TypeScript, I had to cast it to &lt;any&gt; first. Here is an example: https://github.com/inssein/jsfx/blob/master/src/webgl/texture.ts#L52. I am sure there is a better fix here (storing the data differently), but I couldn't think of one.
whoops, completely non-intentional. Name was derived from glfx, the original library based on WebGL.
https://developer.mozilla.org/en-US/docs/Web/JavaScript
Here is a Dart demo: https://dartpad.dartlang.org/a8e6b7f6710cd1771d5c Should be easy enough to understand, I think. Without operator overloading, you'd write something like: mouse.subtract(pos) instead of: mouse - pos And that "clamp" function keeps a number within a specific min - max range. The most simple option would have been: (mouse - pos).normalized().scaled(scale) But keeping the distance in mind when scaling does look a lot more interesting: http://i.imgur.com/NnpFFlY.gif That's why I spared no expenses and used a whole 3 lines for that.
Even in a worst-case scenario you can still include it on a resume, which IMHO is very appealing.
You don't need to write ES6 to consume a library which was distributed as a built ES6 file.
I distribute many libraries that are compiled down from ES6 that you can use simply by including them with a script tag. There is nothing special about this library.
Do you have a reason for that belief? It is nice to be able to jump into a code base without having to learn each persons own home-rolled solution for something such as async control flow.
Yep. Again, I never said it was special. All I said was that it isn't written in ES6. I'm not sure what you are trying to accomplish. 
It doesn't take 15 years to understand callbacks, and it doesn't qualify anything you say any further than you already have, which is, "In my point of view". It's true, anything done with promises can be equivalently implemented in callbacks. That has absolutely nothing to do with a discussion on designing language specs, or promoting a coding style that the vast majority of developers agree makes their code easier to read.
I threw together a quick JSBin to do this: http://jsbin.com/nabadidela/edit?js,console I tried to break the functionality into separate functions to keep it easy to follow.
I ask because arrows use lexical this.
Out of the box, I believe
&gt; But when you add in classes and interfaces and some of the other bits, we can actually start to follow classic software design patterns in a very natural way. ༼ つ ◕_◕ ༽つ ▄︻̷̿┻̿═━一 Is classical inheritance, classical OO, rigid typing, and other Java "goodness" actually considered a feature in 2015?
http://dailyjs.com/ closed the shop few weeks ago, maybe you can close the gap.
First of all, it is nice to see someone making an effort into making their work accessible to people using assistive technologies. More often than not this is forgotten. I do however have some pointer as to how you could further improve the wai-aria support. 1. the `aria-checked` is not needed for native checkboxes or radiobuttons, as the browser handles this for you. [MDN - Using the checkbox role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_checkbox_role) 2. Add `aria-required` in addition to `required` for backwards compability for NVDA. [For validation with HTML5 and WAI-ARIA](http://www.deque.com/blog/accessible-client-side-form-validation-html5-wai-aria/) 3. The containers holding the error message should have `role=alert`, which implicitly adds `aria-live=assertive` and `aria-atomic=true`. Though I prefer to all three of them to make it explicit. [W3C - The Roles Model](http://www.w3.org/TR/wai-aria/roles#alert) and [role=alert browser support](http://www.paciellogroup.com/blog/2012/06/html5-accessibility-chops-aria-rolealert-browser-support/) 4. The use of `aria-invalid`is nice, but does not provide the user any indication as to what was wrong. I suggest adding `aria-describedby` to the form element, linking it to the error message id. (If you test this with VoiceOver beware that `aria-describedby` has a 5 second delay.) 
Yup. Wait until you work with developers who completely abuse weakly typed languages because they're lazy. There are so many problems and bugs that can be prevented using some classic software design patterns. Typescript doesn't force you to use any of it though, that's the best part. Also, it's still not technically classical OO, it's just made to look that way. You can still choose to use prototype.
Apart the password field (which has a minlength of 6), everything is actually valid (according to their validation). Could you please provide me with some info about your os and browser please? So I can have a closer look at the bug related to the minlength attribute. I'll also see what I can do to make the fields' constraints clearer. Thanks for the feedback anyway!
Ah, you are right, Vue is more like Angular. It even has "v-repeat" instead of "ng-repeat". The way Kilroy handle event is interesting. It asks you to put all the event handling into an single handler object and Kilroy will match the events by type/id/classes. I think this could work nicely for smaller projects, but when the project grows too big, you end up with a huge event handler object that can be very difficult to maintain. Same issue apply for the 'init' and 'view' properties. Unlike Mithril, Kilroy doesn't seem to encourage you to separate UI/logic code into small parts. Instead, you just put everything into an object and feed it to the 'Kilroy' function.
Is there something like this for Sublime?
Not a 100% sure what you are trying to achieve. But you also might be able to use links to find common paths among them and match links between data this way. E.g. A reddit title has a href of reddit.com/some-post. And a comment has a href of reddit.com/some-post/some-comment. Something like that maybe. You could figure out some common patterns in urls of website content and work from there. 
Typing is good. Classical OO is bad. You don't need to use classical inheritance to get strongly-typed code.
&gt;It doesn't take 15 years to understand callbacks You're twisting my words here, and it's really shitty of you to do that. I in no way implied that it took me 15 years to learn callbacks. You're being ridiculous here. &gt; That has absolutely nothing to do with a discussion on designing language specs, or promoting a coding style that the vast majority of developers agree makes their code easier to read. Your anecdotal evidence doesn't prove anything at all. Programmers can abuse promises just as badly as they abuse callbacks. When either are abused, nobody wins. 
I'll give you that on inheritance, but what's bad with OO?
I don't disagree that static type checking and type annotations are a good thing. But you don't need to use classes and inheritance. (See for example, Golang.) The design patterns book was created primarily as a way of getting around the problems caused by inheritance.
Happy to share. :) And I fully understand your struggle, as do most developers I know. When it comes to good resources for learning wai-aria I usually rely on [MDN](https://developer.mozilla.org/en-US/), [W3C](http://www.w3.org/TR/wai-aria/), [A11Y project](http://a11yproject.com/resources.html), and ofc google. While MDN and W3C covers every aria-attribute it doesnt always show how you should use it. Unfortunately neither of them contain any complex examples really, and you are often left to try it out for yourself. You could look at [jQuery UI](https://jqueryui.com/) for examples. Not saying you should use it, but they have solved alot of accessibility problems and are by far on of the better ui-framework when it comes to screenreaders etc. The final step, if you really want to learn accessibility, is getting yourself a screenreader and start testing. If you use OSX then you already got VoiceOver, for windows I would suggest NVDA. 
I feel really strange moving into CS, specifically Web development, as a career through Javascript and keep seeing this sentiment pop up. Javascript is dead, long live javascript! Meanwhile I'm just here going, hey guys I'm about to have a real Web app up and running when can I get a job?
I'd love to see this have CSS filters as the first "attempt", so it would go CSS-&gt;WebGL-&gt;Canvas. Since CSS filters seems like the standards approach to this (albeit pretty unsupported) that seems like the way to go.
Is that a factor of inheritance, or the lack of expressivity in Java, which you need to compensate by using functors and what not, because you can't pass functions, and can't do closures?
Exactly - I think people are arguing for the former, not the later. Something like scala sits in a happy place, and hopefully JS moves there.
Actually, Kilroy uses event delegation based on which parent element you tie the Kilroy application on. So you can have multiple instances of the same "app" as long as they are tied to different parent elements. Just like Angular controllers. This is how it is able to play nice with jQuery and other frameworks. They instance, and all the data, are scoped within a class and a HTML parent. 
&gt; Something like scala sits in a happy place, and hopefully JS moves there. Agreed. Scala is perhaps one of my favorite programming languages.
Anyone else feel like streams are a much better than promises/generators...shrug.
There's a [part one](http://jonnyreeves.co.uk/2015/basic-typescript-dependency-injection-with-decorators/) where I setup the project, all code on [github](https://github.com/jonnyreeves/ts-prop-injection).
Choropleth, not Chloropleth. This is really awesome by the way. I still lean on Leaflet for things that are more GIS than graphics, but am always envious of how beautiful D3 can make maps.
Here is how you would do it on the client side: http://codepen.io/short/pen/Jdwzzj?editors=001 However, you'll need to build the back end to handle it. Do you have a server running already? If so, what stack are you using?
Okay, stop using frameworks, stop developing your browsers, stop advancing JS, for God's sake stop with the languages transpiling to JS, everybody just stop what they're doing right now, for a year. So we can all have a good think. Right? That's the point, right? It strikes me that Javascript must have reached a certain level of maturity as a language to be able to inspire conservatism.
&gt; I am really a terrible programmer and I need all the help I can get! A linter is one thing, but a linter can't really tell you about as much stupid stuff as a type system can. Trust me, *good* programmers need these tools too. &gt; because I couldn't easily reason about what I was doing That's the real test. Anyone can sling miles of JS code and adhere to the latest style guide, use functional principles, "I don't need no stinkin' type syntax", etc. Now, put that down and come back to it in six months and tell yourself that it doesn't look like garbage. Good code can be understood by *anyone* with fresh eyes, including the author. We all need all the help we can get here.
pointersgonewild.com is the PHP of blogs
&gt; SingletonFactoryProxyFacadeBeans. Honestly, this Java anti-pattern manifested for two basic reasons: * no free-functions allowed anywhere in Java (*everything* is a class) * a fetishistic adherence to service registration of all resources, often to support a fictional future integration environment. Sometimes you just want a free function, or an anonymous one. With both you can have lightweight APIs, and easily smooth over any API that doesn't 100% conform to your application. Java started with neither.
They actually aren't different in this respect. A promise is just a stream which can only be consumed once. You can use streams exactly like you'd use promises, but the reverse is not true. Streams &gt; promises
C++ is the C++ of the web. Remember that Unreal demo? That was C++. As popular languages get older, they grow. That's just how it is. ES7 will introduce a bunch of new features and I'm already looking forward to ::, SIMD, operator overloading, and value types in general.
You're thinking of VBScript
Well considering there's no real challenger to JS for front end web, it's pretty much the everything of the web.
Coolest thing I've seen on reddit today :)
&gt; All compilation is cached, so the cost of incremental reloads is never more than the cost of compiling the files that changed, and only those files. So does that mean reloads won't get progressively slower as you add png files and other assets to your build? For me, that was untenable and required annoying hacks, such as running two web servers and a proxy in development. If I recall correctly, lots of scss/less/js files caused similar symptoms.
Whoa, awesome collection! Going to add some of those resources to my Javascript board. PS. You just got a follower and here is my resource list too https://papaly.com/Randy/fn31j/Programming-Resources
Uploading all assets to a CDN in development seems like a very expensive hassle. And I imagine it would be a nightmare to iterate on if the assets are in constant flux. (Keep in mind I'm only talking about development, not production.) I'll have to do some testing on the matter again soon. Is there a way to exclude certain classes of assets from being watched during development? (With the obvious trade-off that changing such assets would not trigger automatic reload.)
I think that the effective (not literal) lack of all that makes a lot of things harder and promotes a lot of bad habits. Prescriptive frameworks (like Angular) and following TDD and other rigor all help make things better. But having interfaces, strong typing and classes - all optional - are certainly new "features," even in 2015 as far as JS is concerned. I think this conversation has morphed into a much bigger topic than I had in mind with the post :). Basically - if you're using plain old JavaScript, you're making your life harder and you should just accept the cost of learning the most basic bits because the payoff is so large in comparison to that cost. So, yay reddit! I know you guys aren't doing it for me, but I really appreciate all of the ideas expressed here. Lots of food for thought. Thank you. 
It's possible to specify that a stream will only have one value in your type system if your type system is sufficiently powerful. Its equivalent to specifying that a list will only have one value. As far as i know you need dependent types to encode this type of information in your type system.
I'm not sure "grumpy old man" is right. It seems like commercial has beaten academic in more ways than one (optimization and popularity) and the author chose academia. 
WHUT this is awesome! Would love to contribute to this.
Javascript is dynamically typed. Promises dont give us static checks either. I'm not exactly sure what compiler you're talking about. You can create a promise that represents a user's first click and memoizes this value, and a stream which does the same thing. You are correct. You can't pass functions expecting a stream a promise, but you can always lift a promise into a stream, in the same way that i can lift a value into a list.
&gt; Javascript is dynamically typed. Promises dont give us static checks either. We still have types, and the type `Promise` has specific semantics that a function may depend on that aren't provided by Stream. (And vice versa). &gt; I'm not exactly sure what compiler you're talking about. I was simply following your lead on a theoretical "sufficiently powerful type system". &gt; You can create a promise that represents a user's first click and memoizes this value, and a stream which does the same thing. You can. But a function that takes a stream is not guaranteed that it's passed a single-value memoized stream. &gt; You are correct. You can't pass functions expecting a stream a promise, but you can always lift a promise into a stream, in the same way that i can lift a value into a list. You can convert (not lift) a promise in a stream. But this is not the same as them being interchangeable.
Thank you. That sounds like the right thing to do.
Thank you for that Perl of wisdom
Been a .NET developer for 10 years. Recently ditched it and now will only write JS (maybe a little Python too). Here is my advice... 1 - Forget everything you know about C# and OOO. Start with a fresh slate. JS will infuriate you if you try to compare it to a modern 4G language. Its different, by design. Just go with it. 2 - Buy Crockford's book The Good Parts. Read it. Wait a few days, then read it again. Read it again a third time when you're further along in your JS journey. Its a great book that is extremely dense. It takes time to absorb it all. Yes its a little old, but still applies. Hopefully he updates it for ES6. 3 - Start writing apps in node. I say this because it removes the web piece from JS. You'll work with the language itself. You'll actually see what prototypical inheritance is all about. You'll experience the frustration of how "this" changes. You'll understand what functional programming is. 4 - Once you can explain what a closure is to a 5 year old, then start learning frameworks. Angular is for children. Use it for a week and then move on. Learn jquery just so you can have it on the resume. Learn react so you can talk to hipsters at conferences. Once you've tried enough of them you'll figure out on your own the ones that are worth a damn and the ones that are just fluff. JS is an awesome, powerful language, you just have to look at it through a different lens. I haven't looked back and I don't think you will either. Stick with it, you won't regret it. 
[Stop pushing the web forward](http://www.quirksmode.org/blog/archives/2015/07/stop_pushing_th.html)
I don't understand. Through my eyes?
From ESLint's [docs on the semi rule](http://eslint.org/docs/rules/semi): &gt;On the other side of the argument are those who say ASI isn't magic, it follows a set of rules as to when semicolons are inserted and it's fairly easy to remember them. In short, as once described by Isaac Schlueter, a \n character always ends a statement (just like a semicolon) unless one of the following is true: &gt; &gt; 1. The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with . or ,.) &gt; 2. The line is -- or ++ (in which case it will decrement/increment the next token.) &gt; 3. It is a for(), while(), do, if(), or else, and there is no { &gt; 4. The next line starts with [, (, +, *, /, -, ,, ., or some other binary operator that can only be found between two tokens in a single expression. 
You can put files into a folder that starts with a dot (as in unix hidden files), then Meteor tool wouldn't watch it. I don't know if it will keep serving them though.
As someone learning d3.js this is an excellent write up. Great read! Amazing what you can do with d3js and angular.
I just installed this on firefox running on Ubuntu. When I open up the network toolbar, it says `no react found on this page` even on the facebook website (which uses React). Anyone else running into this?
I have a repo for all Natural Earth's GeoJSON converted to TopoJSON [here](https://github.com/mtraynham/natural-earth-topo) (if you want to skip that step).
&gt; This is perfectly valid code. It actually isn't. There are two implied globals. You can't do that in strict mode. const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; function addNums(arr) { return arr.reduce((a, b) =&gt; a + b); } const sum = addNums(arr); It's not that bad, really. Same thing in Dart: final arr = new List.generate(10, (x) =&gt; x + 1); addNums(a) =&gt; a.reduce((a, b) =&gt; a + b); final sum = addNums(arr); An "Array.generate" method would be nice. The "Array.from" workaround is a tad too ugly for my taste.
$(document).on('click', '#go', function(){ something something });
I thought most people used Coffeescript largely as a stop gap for new feature development in ES? That being said, ES2015 introduced a lot of things that Coffeescript provided. The only notable thing you mentioned is semicolons, which aren't even required in JS. Granted, if you submitted a pull request to me without semicolons I'd promptly decline it!
http://pastebin.com/684DJY1Z There is the full code.
I'm going to quote that on my Personal Home Page.
I didn't realize you had to include the bootstrap.js for dropdowns but you're absolutely right! I guess I also need to include the jquery script too, because as soon as I added those two things the dropdown started working! Thanks so much for thinking about it, I was fighting with this for a couple of hours today and I really appreciate your help. If you're ever in the Denver or NYC area I owe you a beer.
Link to operator overloading? I would be very interested in that.
&gt;Promises represent the result of a computation that may complete in the future. RxObservables/Streams represent either a value changing over time, or a series of discrete events. A promise also represents a value which changes over time, or a series of discrete events. It represents one change over time, and a series of length one. &gt;While there is a small overlap in behaviour that you could consider to be similar &gt;They appear quite similar on the surface and might look like they can be interchanged - but they can't, I think this is our core disagreement. It's not just that the behavior is similar, one can write streams in such a way that their behavior is *identical* to promises, possible with a different api depending on the implementation. I could take Rxjs, write a wrapper on top of it, so that it's api and basic behavior is *identical* to bluebird. I can understand you are making a practical argument that streams give people more room to shoot themselves in the foot. However, fundamentally you can use streams anywhere you can use a promise, and they give you more flexibility. 
I prefer function declarations over assigning some function expression to some variable. Unfortunately, ES6 doesn't let you use arrows for this or for methods.
http://www.slideshare.net/BrendanEich/value-objects2
It just means you can write plugins in ES6/7 and Fly will transpile them on the fly out of the box.
I mean I don't understand how you're grouping these elements together.
Interesting. Thanks for the link. That was a long time ago, though. Any newer news? I was curious if it was catching any traction and if we could expect anything to show up in babel (or something similar) in the future.
&gt;But if you write a function that expects a promise, and you pass it a stream, you've broken a crucial invariant about how that function expects to work. The function won't break if the stream library fulfills the same contract as the promise library. A promise could be switched out for a stream depending on how your libraries are written. Regardless, any function that accepts a promise can be trivially re-written to accept a stream, even if the apis are different. &gt;What extra flexibility would you gain from using a Stream instead of a Promise? Here's an example. I wrote a small load testing library recently to test a web server that I was writing for work. I wanted the api to expose an option for N requests to be made in parallel or in sequence, and to be rate limited. This is trivial with streams, but would require the use of event emitters to get to properly work with promises, which is ugly and bug prone. Using promise-like streams, you get all of the power of higher order streams and stream combinators.
Thanks for that. When I commented I was thinking more about general JS than a particular alternative build tool. Going to give fly a try for those odd times that there isn't a nice cli to use in npm scripts.
This is total pedantry. It wasn't specified that anyone was using 'strict' mode. The code would work in any modern browser. Whether or not your personal philosophy involves using 'strict' or not, and defining your variables as global or not has no effect on whether or not this is valid JavaScript.
Thanks! Do try it out and please report all the bugs you can find ;)
Code inside classes is always in strict mode. Also, if you think you could just use globals for everything you're gravely mistaken. This has nothing to do with anyone's "personal philosophy". It simply doesn't work.
&gt; Code inside classes is always in strict mode. I may be blind, but the code given was not placed inside of a class. It was in fact ES5 code, which does not have ES6 classes. I also didn't see any assertion that global variables should be used for everything. &gt; It simply doesn't work. [Are you sure?](http://i.imgur.com/0Cj8POC.png)
1. This was a &lt; 10 line example to show that you don't need semi-colons. It seriously doesn't matter. I'm not implementing this into my enterprise-level code. 2. You are talking about ES6 spec *for classes* (which this is not), which isn't even fully supported by any browser. That's literally pedantry at its best. I promise you that if you write a script that is: x = "apple"; console.log("apple"); The world isn't going to fall apart because you didn't put a `var` in front of it. And you are reaming me about not using `var` in a post that regards coffeescript? Really? ... Really? &gt;It simply doesn't work. It does. Once again, the *example* doesn't explicitly say `'use strict'`. Find me a web browser that will take that code and shit it out with an error due to me not putting vars in front of it. You won't be able to. Why? Because it's simply bad practice, not something that "won't work". You're adding nothing to this post by whining about proper variable declarations when the points on-hand were about coffeescript and semi-colon usage.
&gt; I also didn't see any assertion that global variables should be used for everything. They said that not using globals was just a philosophical thing which it [obviously isn't](https://www.reddit.com/r/javascript/comments/3foz7m/is_there_a_coffeescript_for_es6/ctquak8). &gt; Are you sure? Yes, I'm 100% sure that using implied globals isn't an option. (See above.)
That's because it *is* valid code. He just is frustrated that I didn't use `var` in a basic 9 line snippet to demonstrate the semi-colon rule in JavaScript.
That's not what the guy is saying. Arguably, we could freeze the language at ES5, and still use everything we want by transpiling. Then all the browsers would have to do is improve the compilers, year after year, while we keep adding features to our transpilers, and while js stays the simple language with few features. The fact that we can transpile ES6 to ES5 is a testament to how unuseful the improvements are. Language improvements shouldn't be syntaxic sugar. If anything, implement macros in the language (a la sugar.js) and let people define whatever they want.
If you want to continue to argue about things that don't matter then you can PM me to continue this retarded conversation. I'm done having it here.
Couldn't get that to work in JSFiddle.
"Perfectly valid" and "perfect" are two different concepts, just like "I'm pretty okay" doesn't also imply "I'm pretty" and "I'm fairly mad" doesn't imply "I'm fair". Straws.
Strict mode modifies the semantics of the language. If you change the semantics of a language, then code that works in one context may break in another. There are many instances where strict mode code would break if put into a codebase that uses default mode, but that doesn't make valid strict mode code invalid JavaScript. And to reiterate, the posted code was ES5, which has no classes.
There's a button that you click to move on to the next section. It becomes enabled when the video finishes playing. I thought maybe I could enable it? Not sure :( And that's what I'm currently doing, but it doesn't allow me to work at my own pace.
Hmm. Sounds like you could possibly skip it then. Does the button like un-grey out, or does it appear? You'd have to know the code better to know how to do it.
"Perfectly" is an adverb. Furthermore, "perfectly" is most often used as an expression, rather than as a literal statement of fact. Therefore "I'm perfectly happy" does not normally imply that: * you are perfect, or, * that your happiness is perfect and could not be improved.
&gt; Got some examples? [There you go.](http://i.imgur.com/gURC0QT.png) There are many more instances where moving strict mode code into default mode would break said code. &gt; The topic is ES6. The code is valid JavaScript.
So, you'd say you're "perfectly happy" even though you got cancer? You might be happy right now, but all things considered, you aren't entirely happy. Well, let's try some synonyms: * wholly valid * entirely valid * completely valid * valid to the fullest extent `ReferenceError: assignment to undeclared variable ...` That's not what I'd call "valid to the fullest extent". It's only *syntactically* valid under specific circumstances. It's not perfectly valid.
I'm sorry, I'm a noob at this :( How would I go about seeing what is outputting the result?
&gt; There you go. That's the wrong way around. "There are many instances where strict mode code would break if put into a codebase that uses default mode"
&gt; So, you'd say you're "perfectly happy" even though you got cancer? That is actually something that somebody might say. It does not imply perfect happiness. But yes, it is valid code. It conforms to the spec. Any JS code can be broken when put into a different context. Imagine this perfectly valid code: var derp; if (derp !== undefined) { console.log('herp system failure send out the nukes'); } You just beat your colleague at a game of chess, so he adds this line somewhere else: var undefined = true; You mention *syntactic* validity, so perhaps you aren't sueded, but consider that one day we might have strong mode added to JavaScript. That does not invalidate all spec-compliant JavaScript code that sticks to default mode or strict mode. Code that doesn't work in strong mode would not be valid strong mode code, but it would remain valid default and strict mode code.
It's valid ES3. But okay, imagine the code is later wrapped in an IIFE, making it valid ES5: (function (undefined) { var derp; if (derp !== undefined) { console.log('herp system failure send out the nukes'); } })(true);
How do I do that? Sorry about all these questions
You press the F12 key, then you switch to the console tab... and then you paste that line. If that page contains a single HTML5 video element (or if the one you meant to target is the first one), it should do the trick. It sets the playback position to 5 seconds before the end. It won't work if a plugin like Flash or Silverlight was used. **Edit:** If you want to see if there are any video elements on the page, run: $$('video') On YouTube, you get something like: [&lt;video class=​"video-stream html5-main-video" data-no-fullscreen=​"true" style=​"...​" src=​"..."&gt;​&lt;/video&gt;​] **Edit2:** "$$" is a predefined alias for [document.querySelectorAll](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll).
That means that there aren't any video elements on that page. Do you see some "Flash version blabla" context menu if you right-click the video? If so, it's Flash and the HTML5 stuff won't work.
&gt; ES6 implements a lot of unnecessary, overly complicated features for example? 
There is of course a way, but it requires some poking and debugging. Without access to the site, it's pretty difficult. (Do not give me your login credentials.)
Pfft. We settled on DHTML.
Ah, alright. I'll see if I could find anything. Regardless, thank you so much for your time. I appreciate it :)
It depends on if those "grayed out" buttons are part of flash app or they are html thing. Use "code inspector" in your browser and try to highlight this button. It would be nice if you could provide some screenshots of this.
Okay. But the posted code is valid ES6. You could have pointed out that the code would not work inside of a class or a module, instead of insisting that the posted code is not valid code. (Still not really sure it does any good to nitpick like that, though. Perhaps I give people here too much credit and assume they aren't going to use global variables just because of a comment in /r/javascript.)
Do you happen to know if this works with source mapping? I like me some babel/browserify.
&gt; You could have pointed out that the code would not work inside of a class or a module "There are two implied globals. You can't do that in strict mode." &gt; Perhaps I give people here too much credit and assume they aren't going to use global variables just because of a comment Well, writing code like that does not create globals in CoffeeScript. If you write to some variable which doesn't exist in the current scope, a new *local* variable is created. (This behavior does create some weird shadowing issues though.) whatever = (x) -&gt; y = 5 x * y is compiled to: var whatever; whatever = function(x) { var y; y = 5; return x * y; }; So, if you want to show some CS-like JavaScript, you really shouldn't omit the variable declarations, because you can't actually do that in real code.
&gt;My point is that a Stream doesn't fulfil the same contract as a Promise. If you made a stream that does fulfil the Promise contract, then you've just got a Promise - the underlying implementation doesn't matter, it's a black box. My point is that it's possible to implement streams in such a way that a subset of those streams satisfy the promise contract. Members of that subset would be both a stream and a promise, which is why streams are a superset of promises. &gt;On the surface I don't see why this precludes the use of promises - can you elaborate why this was not possible with them? It is possible, just not without using traditional callbacks (or events, streams etc.). The easiest way to do it as far as I know would be to wrap setTimeout's callback e.g. function ratelimitedExecute(requestPromises, cb) { var results = []; var numResults = requestPromises.length; setTimeout(function () { requestPromises .pop() .then(function(res) { results.unshift(res); }) .catch(function(err) { results.unshift(err); }) .then(function() { if (results.length === numResults) { cb(null, results); } }); }, 1000); }; function ratelimitedExecutePromise(requestPromises) { return new Promise(function(resolve, reject) { ratelimitedExecute(requestPromises, function(_, res) { resolve(res); }); }); } Using pseudo code, a streaming library could so something like everySecond.flatMap(requestStream).take(100) Here's another one. Let's say you want to execute 100 http requests, but you want to set a max concurrency of 4 (at any given time exactly 4 requests are executing, until we run out of requests). How would you do that with only es6 promises? (no event emitters, streams etc.)
That demo, my ears... Nice work!
Try googling "C# for JavaScript developers", because it certainly didn't get me what I was looking for.
oh god no...
How about trying some kind of Hello World first? Also, you just stick some "ondeviceready" function in some "app" object and then what? Where do you register it? https://cordova.apache.org/docs/en/4.0.0/cordova_events_events.md.html document.addEventListener("deviceready", yourCallbackFunction, false);
I recently asked [a somewhat similar question in another thread](https://www.reddit.com/r/webdev/comments/3e2u2p/a_simple_real_time_chat_room_example_built_with/ctb9rro?context=3). Some of the answers people gave: * [Parse](https://www.parse.com/) * [Hoodie](http://hood.ie/) * [Back&amp;](https://www.backand.com/) (seems it might be for Angular only) You could also host your own database on [Amazon](http://aws.amazon.com/) (or somewhere similar) and use something like [Postgrest](https://github.com/begriffs/postgrest) which basically builds your REST API for you. Easy enough to do, but there's obviously more setting up involved than Firebase/Parse etc.
It's all subjective. You can't slate anything without someone saying it's integral to their workflow. I could say **let** was useless, but someone'll espouse that it's *the* greatest thing to have happened to JS ever. **class** seems to be the one that everyone is arguing over the most.
Well, no need to apologize for that. Nobody forced me to read the code :) What I actually wanted to transmit is that you should "come clean" from the start. I mean, it's much better if you had just posted something like: &gt; I have this code which I don't know nothing about and I would need someone to help me do this and that. [link to code] You may or may not have gotten better responses but my opinion is that you would have indeed. I do believe that making it _easy_ to help you and being honest about your needs, does make people more inclined to help.
That was very interesting. I thought that value objects and operator overloading might be pushing the language into bloat territory, but I'm more positive about it now. Brendan appears to be squarely aiming at numeric data types. JS may get a set of standard numeric data types which resembles what other languages have, and the people who complain that JS doesn't even have real integers can then shut up for good. Even better, the facility to do this is open for everyone to use. I just hope that people use it wisely (i.e. Python with restraint) and stupidly (see C++ stream operators). 
Thanks for showing that answer. rAF is something I definitely considered. In addition to creating a clock, I was trying to show some more info about setInterval. Why do you think raF is a better way to render the clock? 59/60 of the loops you are not displaying anything.
VBScript 4 lyfe!!!!
The improvements in ES6 *are* syntactic sugar. That's not saying that improvements in general are not useful. The article was disapproving of "design by committee", which I agree with. See Classes, for example. Javascript doesn't have classes in the classical, and adding the keyword only makes things more confusing for the newbie. But since everyone wanted classes, they're now part of the language, making harder for any newbie to understand and embrace prototypal features.
I made [a library](https://github.com/mrchimp/tock) that helps handle setInterval drift. Might be overkill for a basic clock but someone might find it useful.
What about them? I'm not sure I understand the question.
If you are ok with using react, a good lib to create educational material is khan components. For drag and drop, look at the sortable and drag target examples: http://khan.github.io/react-components/#sortable
BTW. there's also [jsfx](https://github.com/loov/jsfx) and [jsfx](http://www.reaper.fm/sdk/js/js.php) :). *PS: I'm the author of first and I really don't mind the name clash. Name-clashes are bound to happen as more and more projects arise.*
The comment that the spec is twice as long is a red herring. There are lots of places in ES5.1 that were open to interpretation. One of the things that ES2015 does is properly nail these parts down, using what various implementations are already doing as the guide. Because of this ES2015 would have been larger than ES5.1 even if no new features had been added.
Oddly enough, some languages get heavily criticized for growing (C++) and some languages get heavily criticized for not growing (Java).
Yes, that was the case for me too, but I've also gotten used to the light syntax. It's not just semi-colons, it's the whole whitespace philosophy. Implicit returns and not having to use curly braces among other things.
What do you mean by 'Angular is for children'?
TL;DR: Seriously consider Parse. I've used Firebase in personal projects. Loved the ease of prototyping, real-time, auth-handling, etc. My biggest gripe is it's lack of proper querying (`users.find({a:'foo', b:'bar'}`). Everyone points me to [this](https://www.firebase.com/docs/web/guide/retrieving-data.html#section-queries) plus denormalization, but it's not the same. I've been scoping out Meteor as an alternative, which offers a similar degree of rapid development, but with proper querying via MiniMongo. However, to use anything outside its ecosystem requires 3rd-party support (front-end frameworks, ES6, npm modules, etc). It's still an option, but I'm iffy about it. Anyway, I paired with a dev recently who uses Parse and showed me around. BaaS w/ SDKs (incl JS) and a REST interface, + Auth + Real-time (I think?), so we're at FB-level now. The selling point to me was its robust querying interface. Additionally, while it's NoSQL (like FB), it offers SQL-like JOINs (like RethinkDB) which is a huge perk. Also, it has this interface "Cloud Code" which lets you write server-side code (incl REST endpoints?) so you don't have to spin up a Node on Heroku just for those edge-cases. It looked pretty freaking awesome. Don't want to get too hype-trainy when I haven't even used it yet, but I'm definitely gonna give it a shot on my next project. 
&gt; a fetishistic adherence to service registration of all resources, often to support a fictional future integration environment. *sigh* so true. It is such a pity that Java has a culture where people's brains are removed and replaced with design patterns and "best practices" and kinds of cargo cult programming. 
Babel doesn't include a module loader. It doesn't know how to require() stuff by default. For that you need to use something like browserify with the babelify transform. You can find setup instructions here: https://github.com/babel/babelify
I have to agree. A lot of us started out just hacking around with frameworks and libraries. I never fully understood what was going on, until I went through a vanilla JS course or three. JS is quite small, it's just very different from all other languages. The silly part of this being that learning vanilla JS takes a lot less time than learning stuff like Angular, React etc. Start with vanilla JS and learning the frameworks will be so much faster and easier later on, as you will actually understand what the frameworks are doing.
Hmm that's a good question. I'm really sure. Maybe make an issue in the repo asking for a demo?
moved my script tag to the body and the error went away.
It says it's based on Backbone. I don't want to use backbone, am I able to use angular or react as my frontend and just interact with a REST API? If I can do that, Parse looks really appealing. My current project is angular + Django and I'm hating the whole devops / optimisation stuff. Eg watress vs gunicorn and managing the caching of the API data
 alert(), confirm(), prompt() *Why so downvoted? Help me understand! These built in methods (are they methods?) allow user interfacing without any html. They do so in panel/window format and are dynamic. Are they not precisely what OP is asking for?
Well, if you're just using the REST API instead of the JS SDK, then there's nothing Backbone-specific about it. Else, the mentioned dev's project was actually Parse + Angular, and he didn't mention any hitches. There is [this repo](https://github.com/brandid/parse-angular-patch) which seems to imply the SDK would require bridging, so depends on how good that project is. Backbone... Parse, you're showing your age :)
Decorators for example. 
IIRC decorators are a ES2016 proposal and not part of ES6 (correct me if I'm wrong) 
You don't really need an extension with Angular because scope is accessible with jquery / jqlite.
this is true, but `setState` 2nd parameter allows for a callback that is called once the state is updated. I use this callback to log the state.
Ditto. I think avoiding HTML entirely isn't a great idea, but it's certainly possible. You can do everything with [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement), [`Node.appendChild()`](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild). Add in [`document.querySelectorAll()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll) and [`addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) and you've got most of what people use jQuery for in vanilla JS.
Oh cool. Thanks.
Ok, I've tried switching to browserify with babelify transform browserify: { dist: { options: { transform: [["babelify", { "stage": 0 }]] }, files: { "www/js/main.js": ["dev/src/**/*.js"] } } }, And now the error is different, but I'm getting: Uncaught TypeError: Cannot read property 'apply' of undefined The end code is here: https://jsfiddle.net/8fw9c968/ Looks like it's not liking: _lib2["default"].apply(
&gt; import log from "lib"; import {log} from "./lib";
your probably looking for something like http://famous.org/ which is a very JS-OO architecture for rendering gui's and apps on the web. You'll still need to know and understand html, css well, but you will also be able to generate interfaces that are hard to do in plain js, css, and html. good luck, and happy hunting. :-)
Forgive me if I misrepresent, new to Meteor. The thing about npm I saw was the (requirement?) to use [meteorhacks/npm#Meteor.npmRequire()](https://github.com/meteorhacks/npm) wrapper when dealing with npm modules, and `Async.runSync()` when the module's function is asynchronous. Perhaps it's pretty bullet-proof and I should just get used to that format, it just kinda made me "hmm...". For frontend, I was thinking MV*: React &amp; Angular. I realize the 3rd-party support for these are strong, and Meteor plans to offer 1st-party support soon (which is awesome!). One thing I'm concerned about there is - I'm using React, who's pushing _hard_ on ES6 such that many 3rd-party components require the transpile step. Will [this](https://atmospherejs.com/meteor/babel-compiler) just work kinda as-is with React written in ES6? Then there's Postgres, as the app requires SQL... I guess where I'm coming from is: it seemed that every piece of the equation requires a Meteor wrapper of sorts, which makes me nervous. Then again, maybe it's not fair to come to Meteor expecting to override all of its defaults. Anyway, sounds like in your experience the constant "wrapping" isn't as big a deal as it seems? 
Indeed, with React, you can embed predefined components with minimal code. For instance, `&lt;Rating defaultValue={3}&gt;&lt;/Rating&gt;` will give you a fully functional rating component.
Why downvote? ExtJS is exactly what he was asking for - creating screen stuff with javascript with absolutely no html needed at all. That said, I freakin' HATE ExtJS.
Or alternatively [webpack](http://webpack.github.io/) which has a [babel-loader](https://github.com/babel/babel-loader). My personal preference.
For a basic text clock like this, they are equally valid. rAF and setInterval has different performance characteristics. rAF offers higher animation timing accuracy. setInterval offers a more flexible timer. If you care about the visual clock being accurate to the dot, you should use rAF. If you care about the clock using minimum resource, but potentially off by half a second or skip a second, use setInterval. P.S. There is small optimization you can do in the rAF implementation to not touch the DOM unless it needs update, but even then it would cost a few more cycles than setInterval. 
I look at the wrapping as benign because the first party lib is really good for covering typical use cases and I'm fine swallowing the pill of wrapping. I think fibers is the right choice until async await comes. Fibers cut down on complexity of callbacks and/or promises in the backend, IMO. So yeah I think it's not much to ask for everything else to need to be wrapped. es6 wouldn't be required for a third party component ever you can always just use the compiled js, if that's what you mean. The es6 usage is entirely up to you. Have your ide transpile or yeah use that package. For front end blaze is very nice and it's very react like actually though lacks server side rendering. If you need sql yes you should absolutely wait. 
&gt;\#1 jQuery is Obsolete And.... I'm done. 
Surprised to not see this mentioned sooner. It should be `import log from './lib'` Other comments are still correct in saying that Babel doesn't load modues, only converts ES6 module syntax to CommonJS or whatever you want. I would recommend webpack for that myself.
&gt;I'm taking the approach that strong typing is more important. A function that has a constraint requiring a promise should only work if you pass in a promise, and it's best to always use the most specific type possible. &gt;there is no reason for a library author to avoid using Promises I understand that you believe it's best practice to use promises because their functionality is more limited than streams. That this will give developers a simpler mental model, and less potential to make mistakes. You've said you don't think their use cases intersect very much if at all. However, in a very real sense streams can do anything a promise can do. When I'm writing client side javascript, I have to choose between importing my favorite promise control flow library, and my favorite streaming control flow library, because I'm space/network constrained. I'd almost always rather having a streaming library because again, streams can replace promises in every case, and they do much more. For me, promises' use case is encompassed by streams' use case. &gt;flatMapWithMaxConcurrent(in RxJs) does solve this issue however, so I assume that's what you meant. It's pseudo code, it's not specifically an RxJs stream.
I've got a gulpfile I've been using that works really well with watchify. var gutil = require('gulp-util'); var watchify = require('watchify'); var babelify = require('babelify'); var browserify = require('browserify'); var source = require('vinyl-source-stream'); var buffer = require('vinyl-buffer'); var bundler = watchify(browserify('./src/main.js', watchify.args)); bundler.transform('babelify'); bundler.on('update', bundle); gulp.task('browserify', bundle); function bundle() { var start = new Date().getTime(); var b = bundler.bundle() .on('error', gutil.log.bind(gutil, 'Browserify Error')) .pipe(source('bundle.js')) .pipe(buffer()) .pipe(gulp.dest('./build')); var end = new Date().getTime(); var time = end - start; gutil.log('[browserify]', 'rebundle took ', gutil.colors.cyan(time + ' ms')); return b; } gulp.task('default', ['browserify']); You will need to use node style requires (like in your "var $ = require('jquery');" in all of your modules) but it builds very quickly (sub 100ms) so works great with any livereload or testing tools. 
Just migrated from RequireJS to Webpack, and I'm loving it. It's not just that it's easier to set up (which it isn't really yet - the documentation is shit, but would be easier if it were), but it's that its an extensible platform for creating your code, not just an import loader. Which means that you can do things like hot module replacement, which means you get awesome next gen dev workflows. Seems like the right horse to back on a new project. 
Not every application or website is, has to be, or should be a js app. Saying jQuery is "obsolete" is incredibly short sighted, adding "*in many cases*" doesn't do anything to help. It is absolutely not obsolete and it will continue to not be obsolete for a long time still. As a (mostly) frontend JS developer, am I going to use it in every new application? Probably not. But I can look outside my bubble. 
VanillaJS? Damn.. Another framework to learn! (/s)
Thanks. Ashkenas' dismissive attitude towards ES6 features feel like he is being overly arrogant and ignorant. 
Eh, it's not easy being in the limelight. His original philosophy was that CoffeeScript was a remedy for ES5 only and that something new ought to take the helm if a transpiler is identified as needed in ES6, but I get the sense he's moving away from that. I've been working with ES6 for the last couple months now and actually prefer CS syntax, and that preference is probably not rare, and will drive the improvements to CS. All in time.
Do you really need something like Firebase or Parse? Why not just use something like RethinkDB? You can setup a web API in your language &amp; framework of choice, and you can have arguably better real-time capabilities if you decide to use them in the future by using socket.io.
Thank you for all the insight. I appreciate everyone's answers. I have not been able to find time to investigate each answer to provide comments or questions, or to see if will work for my situation. Once I get to it, I will respond. Sorry for the delay. 
^^[reference](http://vanilla-js.com/)
Hmm... He literally asks, word for word, &gt; Is there a library/framework that will let me create UIs without using much HTML? Maybe I'm just completely missing something here... 
&lt;script type="module"&gt;
Yes, you're missing that "UI" implies something much greater than OS dialogues.
Not just showing a pop-up. Using a pop-up to enable user input and interaction with a program. All with virtually no html! What's your definition of UI?
I haven't considered Parse and it looks like a recurring recommendation. Taking a quick look at it, it seems to meet all my requirements. Thanks for the help guys/gals!
Great work! I wished the the developer could chose an alternative service for server side rendering without hacking the code though. By the way, from a SEO point of view, it would be better to return a 404 (or 301 to the appropriate page) for invalid URLs like http://www.sumeetdas.me/blogs/posts/2015/07/28/invalid?_escaped_fragment_=.
Pop-ups are to UI what a seat is to a car. Yes, *technically* to build a car you need a seat. However we need a car, not just parts of it.
I can only imagine how he'd do in a job interview. I would definitely hire.
Somebody just got really upset by me asking questions here... So if you don't feel like answering or if I'm offending in some way I'm not seeing, obviously please feel free not to respond, but... I'm like noob intermediate level with js and web dev... Would you mind giving a brief explanation of what is required to build the whole car with respect to UI? *Honestly, I'm pretty confused right now. I simply saw OP asking for a quick and dirty way to do user interfacing with js without using much html. The built in pop ups immediately jumped in to my mind and I commented them. People got rather upset over pop ups.
&gt; Not every application or website is, has to be, or should be a js app. Saying jQuery is "obsolete" is incredibly short sighted, adding "in many cases" doesn't do anything to help. &gt; I don't consider frontend development with jQuery to be JavaScript development. If you read and looked up the point I made about the WebAPI, and web components, you'd agree that for JavaScript developers, jQuery is obsolete.
In regards to UI: a User Interface is a *collection* of interactive graphical elements that allows the user to modify the data states with relatively simple actions. The collection part is important: you can't just use a single part and say it is a UI. See Facebook for instance: if it only had some text and popups, would you say it has any UI at all? *Technically* it does, but at such a small scale that it would be geocities-level laughable. You could maybe look at the UI article on Wikipedia for more information, or more advanced websites such as Smashing Magazine and their UI/UX category. (sorry, on mobile, no links) In regards to the discussion: yes I saw the remarks. The fact that you repeat multiple times a rather (sorry if you take it the wrong way) naive question make it look like you're deliberately wasting people's time. I imagine that it is not your intention, just explaining how it looks like from the outside. Try not to take offence when people throw words like that in the air. Sometimes, when we're behind a screen, we forget there's a person on the other end.
For the third time: **OP is asking for a way to construct a DOM without HTML**. There is a reason **every single other person** in the thread interpreted the question that way. 
Using Angular, you can create Directives that can encapsulate some larger functionality. For instance; you can create a clock Directive and load it with a custom tag such as: &lt;clock&gt;&lt;/clock&gt; You still have to create a template and all the code behind it to make it function but once you do this, you can reuse it at your leisure in other Angular apps.
'2D' WebGL is, technically speaking, the same as '3D' webGL, but you don't care about the Z-axis all that much. I think this is a good article at explaining the concepts: http://www.html5rocks.com/en/tutorials/webgl/webgl_fundamentals/
&gt;I don't consider frontend development with jQuery to be JavaScript development. If you base a developer's choice of libraries or frameworks on whether or not they are doing development, then I don't think you should be considered any sort of authority on the subject.
Nice work. Suggestion: make the resize handles more visible / explain that they're there to be used. I had no idea what the examples were supposed to do at first.
I'm really liking JSPM so far, but the loader &amp; polyfilled transpiler (whether traceur or babel) seems pretty slow on the development side.
Angular and React are a great way to go to cut back on the raw HTML you're putting on, both basically act as a templating platform allowing you to do repetitive templates applying logic to them.
Fair enough, since I am not a contributor to the repo, I can only sit still and be patient!
Cool... OP probably should have said he was looking for a way to construct DOM without HTML, instead of asking how to "create UIs without using much HTML". Plus he said he's trying to learn more js and that he's confused. I didn't/don't know his level of familiarity. My guess with the reasoning is that other people have more experience with this kind of stuff and just assumed writing DOM without html was implied when asking about how to create UIs without much html (but I still think it would have helped for OP to clarify). I'm pretty new to it all; never claimed to have a ton of experience. I'm just commenting and asking questions. I'm not attacking anyone... not being rude.
I wouldn't go as far as to call it obsolete - but it is dramatically less useful than it once was.
Is there not a "beginners javascript" subreddit cos questions like this are kind of getting on my nerves, yes you can do this with javascript and yes there are several frameworks that will suit. But with zero JS knowledge none of them will actually work for you.
[Usage share of JavaScript libraries across the top 10 million websites in the Alexa database](http://w3techs.com/technologies/history_overview/javascript_library/all/q) shows jQuery continuing to trend upward, currently at 65.2%. Maybe it's considered obsolete in hipster circles, but in the real world it's anything but. 
Look, you asked for why you were being downvoted. I explained why. Then you tried to argue that your comment was actually right. I don't give a shit about whether or not your comment was actually right. The fact that you were downvoted should tell you that in fact you gave a bad answer. I told you why your answer was bad. Stop arguing with me. I did you a favor. Your answer was simply bad. Learn and move forward. 
OK fine if you're building a React application. But there are plenty of smaller projects that would most likely require at most jQuery for manipulation and (I personally find this a big part of why jQuery is useful) cross-browser functionality.
&gt; I don't consider frontend development with jQuery to be JavaScript development. Are you not using JavaScript?
Underneath everything of course you know there is the DOM. This is an object representation of all the elements on the page and their properties. Every browser of course has built-in functions to modify the DOM exposed through JavaScript. You can and should start by learning the Vanilla way to do this. Learn to create and add elements, to modify existing elements properties, to find elements by characteristics and to remove elements. Then try layering in some jQuery. Do all the same things you did before but use jQuery instead of Vanilla. A lot easier right? It's not too low level but not too high level either, you can use it for a lot. Now try using a templating engine on the client side like Handlebars or Mustache. This abstracts the JS code even further but this is precisely what you want. You want to modify HTML from JS but you don't wanna write HTML in JS because it would be a nightmare to change. Finally, I would move onto something like Angular. I say move onto but not end up with, because there are lots of alternatives to Angular that are just as good or better, but if you can learn Angular you will be all set to learn others.
Don't you mean SystemJS?
Vanilla JavaScript is more if the base language and not actually another framework built on top of it. Although as someone else mentioned there is a framework titled vanillajs. I'm just not sure its what was initially mentioned
"It’s not enough to be able to duplicate jQuery snippets into your website, the same way it’s not enough to learn how to open, close, and save a document in Photoshop.", go read it: https://github.com/getify/You-Dont-Know-JS/blob/master/up%20&amp;%20going/foreword.md
Here's an [example project](https://github.com/fforw/react-shim) showing a shimed react with gulp / browserify / babelify / watchify.
Vanilla JS = js. There is no actual framework, just lots of jokes!
&gt; I could say let was useless Well, you'd be wrong. Function scope never has been desirable. "`var` was a mistake." -- Brendan Eich &gt; class seems to be the one that everyone is arguing over the most. Since almost every framework used ES3/5 wannabe classes, there was obviously a lot of demand. Having this standardized really helps a lot. It also makes it accessible to tooling. Here is a real issue: Recycling the destructuring syntax for parameters was a huge mistake. https://www.reddit.com/r/javascript/comments/3f2zi4/destructuring_objects_as_function_parameters_in/ctky49e The syntax is very complicated and even the simplest examples are hard to understand. Being imperative also makes it inaccessible to tooling.
I have used PouchDB/Cloudant with Plain AngularJS, as well as with Ionic. PouchDB as the client (browser/mobile webview), and Cloudant for backend. There's "OfflineFirst" support - a live bidirectional sync between PouchDB and Cloudant. If user has no network connection, live synchronization resumes as soon as it detects that user is back online, so user can still work with data even if user is offline - kinda like gmail app - you could still use the gmail app and reall your emails even if you have no network connectivity. Pouchdb is CouchDB for the browser/webview. Cloudant is a commercial version of CouchDB. PouchDB is free. Cloudant is free if your monthly usage is less than $50 USD for the month: * storage : $1 per GB / month * api calls: $0.015 per 500 requests The only big difference between Firebase and Cloudant is this: With firebase, you don't need to refresh the browser to see the data change. With Cloudant, you do need to. 
[ChartJS](http://www.chartjs.org/) and [C3JS](http://c3js.org/) are free and easy to use.
There's a joke that "ES 2015 has merged Coffeescript into master". Granted, there still are some syntactic things that are different (that few people actually miss in ES2015), but a good deal of the features that make CS attractive are now native in ES6.
have you tried logging the state in the render method just to make sure? I also looked at your code on the issue and you probably aren't supposed to be setting your own height and width styles
For example, what are the most commonly used jQuery methods?
Not in IE8 it won't. Some of us still have to support that POS.
So you *are* trying to be snarky. I want a guide to jQuery that assumes knowledge of JavaScript and HTML/CSS. For example, I just found out that there is a "slideToggle" method in jQuery that's useful for animations. I'm not trying to accomplish any particular task, I want you to think about my question subjectively and determine whether or not you know any resources for jQuery that cater to intermediate to advanced users.
Seriously not trying to be an ass, but I assume you meant FalconJS? I haven't had time to watch the video yet. I only ask because there are so many javascript frameworks that FalcorJS could be a thing and my googling just isn't finding it.
I noticed they have react listed under mobile. I'd be surprised if the support react native and not vanilla react. Will have to look into it. If I can just use a REST api I'm super keen to have a crack at it. 
I'll catch your fish...
Code is code, regardless of language, and proper nomenclature and an adherence to idiomatic JS ([example 1](https://github.com/rwaldron/idiomatic.js/), [example 2](http://google.github.io/styleguide/javascriptguide.xml), etc.) will be most of the documentation that you need. For the oddball (unobvious) cases, throw in an explicit comment -- though this is true for any language. Regardless, I always focus on comments that explain _why?_ and not _how_, e.g.: var userId = 1; That's pretty obvious, no? Why would you ever need to comment that? // This code is only invoked for automated testing, and a `userId` of `1` // is our special user that has full permissions and all features enabled. var userId = 1; 
The OP's account is pretty spammy if you ask me. Blatant self-promotion.
The 2 is not actually a log, its a return value. If you just put `2` in the console and hit enter, it will give you the result in the log (usually preceded by something like a `&lt;-` showing its a return value and not a log). Whatever the last statement is in your code will result in the return value. For you that value is x whose value is 2 in the last iteration of your loop. Try putting `x++` above the console.log and you'll get undefined returned instead because thats what console.log returns and it would then be the last statement in your code.
The last line is not your code's fault, it's the console's doing, x++ is treated as a command so it outputs to the terminal if it's the last statement to execute. You can fix it by switching when you increment the variable var x = 0; while(x&lt;3){ x++; console.log("this should print 3 times"); } 
Care to expand?
Probably a poor choice of words, sorry. I actually like Angular. What I was trying to say was that it's the poor man's framework. It comes cheap (low cost of entry, learning curve wise), is full of gotchas, is good for building smaller apps quickly but kinda comes unraveled when you try to build stuff across an enterprise with it. I wouldn't really ever use it for a business critical app. 
they are setting it on the child div element, not the Resizable component component. it might not have anything to do with your problem just something I noticed. componentWillReceiveProps: function(props) { if (!this.state.resizing) { this.setState({ initialWidth: props.width, initialHeight: props.height }); this.refs.draggable.resetState(); } }, This may be your issue, from https://github.com/STRML/react-resizable/blob/master/lib/Resizable.jsx What's the error you're receiving and what are you actually trying to accomplish by editing the x,y? Maybe there's another solution
Am I missing something? I thought Netflix just switched to React 
To be clear, doing it this way means that `undefined` will show in the console after the logging statements, because the return value of `console.log();` is `undefined`; the way it is in the OP, the last statement to be calculated is the expression statement `x++;` and that means "return the current value of `x`, then try to increment it" (that's why `2` showed in the console instead of `3`). Note that if you load code directly on the page, whether inline or via an external script, the console won't show the return value of the last statement executed by on-page code, but it will still show things like logs, errors, and XHR status messages.
I think he missed the point of that statement entirely and equates jQuery with copy and pasting code snippets. 
"100% server free" wat
The developers on hacker news are calling this "serverless" https://news.ycombinator.com/item?id=10005415 Your definition of serverless must be different than the author's. 
Talks by Netflix are almost always full of hype - it makes sense given their structure which comes down to "be a rockstar or be fired". There is no room for calm disucssion, its always a "we've considered all the factors already, end of story" thing, but strangely enough a lot of very intelligent and experienced programmers and especially big companies just plain don't use their methods. Note that I honestly don't know enough for the technical merit, but nobody else does. I'm criticizing Netflix's bombastic nature here cause there's nothing else to really criticize.
&gt;So you are trying to be snarky. No, I'm not. I'm asking you to better define your question, because as posed I think the best answer is the API docs.
oh yeah, you are right. I didn't even write the code yet and just assumed that could have been a problem. So it's actually a non issue. but anyways, do you know any good resources where I can learn about client side JS cookies?
Too bad that arrow functions didn't make the cut. Chrome 45 (beta channel, V8 4.5.103.11) already supports them.
I typically create a common bundle that is just a list of things I want required before anything else. Stick that in the &lt;head&gt; of my HTML file or body before my other scripts and let it be. I'm sure what you want to do is possible in some crazy way, but it seems like you're overcomplicating things. Having a common bundle let's the browser cache it even if you have multiple entry points. Look at [script-loader](https://github.com/webpack/script-loader) to load stuff like es5-shim in a pure way.
You're right, I probably am. I just figured I could have it built with everything else. What you've described is exactly what I'm doing for react, but I'm having a really hard time figuring out how to just include a file like that. Is that what "shimming a module" is? It's just weird wording, and the docs were kinda hard to follow.
Okay, thanks. I'll check out the docs.
I wasn't challenging the validity of `$()` being the most commonly used method. I'll check out jqapi.com, thanks.
[**@NetflixUIE**](https://twitter.com/NetflixUIE/) &gt; [2015-06-15 17:57 UTC](https://twitter.com/NetflixUIE/status/610506318860783616) &gt; Our new website experience (built on \#reactjs, \#nodejs and @falcorjs) is rolling out over the next few weeks! http://blog.netflix.com/2015/06/the-netflix-website-gets-major-upgrade.html ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
[MDN is a great resource](https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)
Thanks for responding. I was actually using the commons chunk plugin, I guess I was just misunderstanding purpose of that chunking. I was using it so that those files that didn't change often would just be bundled separately and cached. I'm really new to developing like this. I used to just write everything in a single JS file, manually minify it, and then include it in a script tag, but I wanted to get into modern practices. A lot of this stuff isn't documented well on the internet. At least, because I'm kind of ignorant, I don't know how to go about finding the stuff. There are plenty of "how-to's", but most of them give direction without explaining anything. Again, I appreciate your explanation.
&gt; By the way, it's fairly unlikely that everyone else is an idiot. It's more likely that you just got a big ego. Maybe I do or do not have an ego, but that is absolutely irrelevant to the accuracy of my claim. If that is all you have in opposition I stand by my opinion. A logical person would see this as a red herring. If you demand some manner of social credibility as a success metric then perhaps you are not as strong an engineer as you believe yourself to be and perhaps you should do some soul searching before whining about ego.
Considering what's in my future, this actually terrifies me a little bit. This was for front-end?
I...I can't even. &gt; I made JAWS. It has no servers. ... &gt; In production, you deploy all static assets (HTML, CSS, Javascript, Images) to AWS S3/Cloudfront Clearly, there's no server there. &gt; Whether AWS uses servers to power their Lambda technology is completely irrelevant to you as a developer. As if to imply there's some magical way to run the code without servers? And how is that not relevant!? It's entirely relevant! Lamba comes with all sorts of implications about the kind of code you can write, how it should work, be coordinated, etc. You can't just toss any 'ol JS at Lamda and expect it to work. &gt; Again, JAWS has no servers. You're arguing semantics from a silly perspective. Sure, "JAWS" _as a framework_ might not have any servers, but that's akin to saying the [Jekyll](http://jekyllrb.com/) has no servers -- sure, it's true, but without server infrastructure behind it at some point, the code's kinda pointless. &gt; If you are tired of developing/configuring/deploying/maintaining/monitoring/scaling/financing servers, then JAWS is for you. WHAT?! Fine, you don't have to deploy servers, but you trade that for needing to know how Lambda orchestration works. Perhaps you don't need to know how to configure a server, but you've traded for understanding how AWS services work in tandem. No server monitoring? Sure, except you need to monitor Lambda now (how do you even do that? Distributed stack traces? Performance monitoring per function? Reporting?) Finally, Lambda (and all AWS services) _**are not free**_. So, fine, you don't have to finance _servers_ but costs don't magically disappear. Tag on top of this that AWS is a very, very different paradigm than server deployment. Sure, it's easy to get into, but when you actually need to start scaling, enforce security constraints, and more, you're going to need to become AWS experts and that is not nearly as happy-go-lucky as you might imply. I will grant you that, as a developer with this system, I may never SSH into a box, but all this hand-waving about "It's serverless!" is highly disingenuous to the reality that there _**are**_ servers, you're just one step further away, and that step is not as inconsequential as implied. 
Pardon my ignorance but isn't the point of FB, the Websocket/reactive style connectivity from back end to the front end? If you need just a simple datastore. I'm thinking an Amazon RDS instance would do just fine? You can choose whatever DB you want. Also Parse is a good alternative as everyone else mentioned, but again, Parse gives you alot more than just a Storage solution
&gt; you are not as strong an engineer as you believe yourself to be I don't believe that I'm an awesome engineer. I know many who are much better than I am. I also don't believe that the authors of Backbone, Ember, etc, are "shit developers". Browsers and JavaScript engines also use classes. Are those also written by "shit developers"?
It's interesting that most of the comments are negative. I wonder if it's a vocal minority or if it's just really unintuitive.
Look into JSDoc, I use it in all my personal projects and at work. Since JS is loosely typed and allows you to pass objects of any type, including functions, as arguments, it can become impossible to know what an argument or return object is supposed to be without checking at runtime. If a method takes in an object called "opts" that's supposed to have 5 specific propeties attached to it, it's very difficult to tell without documenting it. Plus you can use JSDoc to generate your documentation as HTML pages with something like gulp-jsdoc in your build step
It also says: &gt; Access operations may be faster in some circumstances but the exact performance profile and difference over previous versions will depend on how Buffer is used within applications. From the [PR](https://github.com/nodejs/io.js/pull/1825): &gt; Left column is old implementation. Right column is with this PR buffer-slice.js type=fast n=1024: 6646.1 2570.8 buffer-slice.js type=slow n=1024: 6711.2 2617.4 buffer-creation.js type=fast len=10 n=1024: 5103.1 2498.6 buffer-creation.js type=fast len=1024 n=1024: 2648.3 2054.9 buffer-creation.js type=slow len=10 n=1024: 2190.0 2067.8 buffer-creation.js type=slow len=1024 n=1024: 1294.9 1677.7 http-simple type=bytes length=1024: 21588.6 18053.3 http-simple type=bytes length=10240: 8601.9 8439.7 Although, I'm not sure what "old implementation" means, if that's pre/post V8 upgrade. The test case that was noticeably slower is [here](https://github.com/nodejs/io.js/blob/master/benchmark/buffers/buffer-creation.js). Right, Buffers are typically used for binary streams, such as file system I/O (fs.createReadStream) or TCP.
FalcorJS is an internally-developed client-side datastore similar to [js-data](http://www.js-data.io/). When I looked into it for work I noticed that the NPM project was empty and the git project had nothing in it. The only public reference to this project was the video. FalcorJS works by making an API request to an endpoint that returns a very large JSON object map structure. Instead of arrays it resolves JSON maps where the keys for the map are the IDs for the objects within what would have been an array. For instance, if you needed "posts" on your website then you would make a request to the posts api and get a map: { "posts": { 1: { "title": "Test", "comments": { 1: { "comment": "Maps are huge." } } } } } To display the comments you would iterate over the object keys in dataStore.posts.1.comments. It gets more complicated as you could have links to additional data, so that the comments object contains links to access the comments. These links can be lazy-loaded when the comments are needed. Typically your datastore handles this automatically, but you still need services that supply the data correctly. Architects and managers love this idea because they think that they don't need APIs to create these large maps. Instead they use an ETL provider to publish huge JSON files and have the UI download JSON maps from Akamai (or whatever CDN they use). They seem to think since Angular has the ability to $filter things that the UI can do all of the filtering client-side, even for complex filters like comments on a posts that were submitted between 2 dates where the comment contains some keywords.
&gt; Browsers and JavaScript engines also use classes. Are those also written by "shit developers"? Browsers don't use JavaScript to compile JavaScript. I am not talking about shims and transpilers either. They typically use C++, so I don't think that counts. Game engines are a rare exception because the primary problems to solve are continuous execution and consistent execution speed. Most other applications of JavaScript are primarily about execution only when called and executing as fast as possible all other considerations be damned. As far as MV* frameworks I could give 2 shits. I don't use them and typically think they introduce just as many problems as they claim to solve. I would rather write vanilla code every time. This isn't my ego talking, its my experience that using these frameworks results in a net negative time savings over a given time period. The weight of these frameworks destroys rapid prototyping capacity in the short term and introduces considerable maintenance bottlenecks over long time frames. These observations are pretty common to frameworks generally and not confined to JavaScript. I have seen the same problems in large Java applications.
Its not about disrespect towards your craft, its about the dilution of the language. Web development is hard, but it doesn't make a frontend dev an engineer. 
No mobile support 
I just thought about doing that as well, but I was worried that doing that would cause problems down the road. I read somewhere (I can't remember where at the moment) that entry points were executed immediately, which is good in the case of polyfills and shims. But, I was thinking that it would treat those files as though they were entry points into the bundled application and cause issues. I guess I just never tested it. I just wasn't sure. I needed to hear from someone else that it was something to do *shrug*. Also - did you have to install babel instead of babel-core in order to use the polyfill like that? That's what I had to do just now. Does that evaluate it?
Create a Log singleton, add i, e, d, and l, then check for console in the closure of the Log. Create if it doesn't exist. Then log to whatever remote error logging services you use.
&gt; C++ classes don't count because...? Because C++ is not JavaScript. More specifically C++ is not natively a lexically scoped language. I understand lambda expressions were bolted on several years ago, but still the internal architecture of the language is fundamentally different and intentionally not designed in this way. &gt; Your only argument against classes was that using them makes you a "shit programmer". My only argument is that **requiring** classes **in JavaScript** makes you a shit developer, and I continue to stand by that assertion. &gt; I also do think that familiarity is a good thing. I don't. I think that is just good enough if you want to work with mediocre people writing mediocre software. I think learning the actual technology as it was designed is a far better thing. If you were to hire a lawyer would want somebody who is vaguely familiar with the law or somebody who has deep experience in a specific legal criteria? Consider how many developers you know, in person, who are actually capable of writing code using vanilla DOM methods and if they are stronger or weaker than the average developer you know, in person. Of course you can let a framework do absolutely everything for you and of course the end result may not be complete crap, but don't confuse a framework for a competent developer with deep technical experience. These are not interchangeable pieces and familiarity is not enough to lend you technical competence.
What are the traits of a software engineer that make it so that no one who specializes in JavaScript is an engineer? 
Works well for runtime error logging, but this case seemed to be debugging from the development side of things - dispatching to remote for logging 'yes the modal is about to appear' seems a lot of overhead
Maps are not databases, and won't have indexes that are optimized for complex filters, which are essentially queries. I'm not familiar with FalcorJS, but I'm guessing the objection is this: Complex queries over these maps are going to be O(n) in the size of the map, no matter what. So if you have 100,000 entries, you're going to be running your filter predicates over every entry, every time you want to query the map. This is compounded by any attempt to do dynamic queries over the data, or if any binding operation causes additional, rapid queries. A counter-argument is that doing so over an API would take at least as long as a network roundtrip each time, so pushing your data to the client and having them do an O(n) filter might very well be faster. That seems likely if their dataset is reasonably small. The links someone else mention refer to proxy objects, it could be that they are doing smarter filtering on their datasets, or lazily loading data. I am not sure.
My thought as well
console.table ....wow awesome, thanks!
Your question is a bit confusing, are you looking for a framework that includes pre-built user interface widgets, or a way to make a dynamic UI in JavaScript, generally speaking? If you want to streamline your UI workload, you can try frameworks like AngularJS, Bootstrap or Ember.js. There's tons of frameworks out there. I don't use a framework unless I have a very good reason. If I need to create some HTML within JS I would use DOM functions like `createElement` or `appendChild`. I wrote a tiny constructor function that makes it easy to define structures of nodes in a chain.
The backend to falcor can be any type of traditional storage (SQLDB, Document store etc). Falcor is a solution to the client side caching problem that plagues complex web apps. It also provides a nice way of composing rest-like endpoints into a reusable cacheable client-side graph. You should be filtering/sorting/grouping etc in the server, we rarely have to extensively modify the result from a falcor path, they are tailored to the client. In the same way that if you are doing excessive client-side munging of your rest endpoints json response, you are doing something wrong. The nice thing about falcor is that you can save those nuggets of data client side, and avoid querying the backend for them, it will manage the cache for you, allowing you to treat your data fetch the same whether it was delivered from the client side cache or a server call.
Why does he sound so unnatural when he talks, almost robotic and at times condescending.
Using the post/comment example, think of an Android app that displays posts, then a iOS app that also displays posts, then a mobile website, and maybe even a desktop site if the company hadn't gone responsive yet. Each one would need to filter posts and comments using the same methods, so why reinvent the wheel? Why not create an API that could handle filtering? This is just an example. A similar argument applies for business logic, which should be kept in the API, while display logic is kept in the UI. I assume from your comment that you're thinking that one UI has a completely different display and API needs than another UI. This is like saying that every website using Google Maps needs a different SDK with unique functions built specifically for its data set. The filtering logic is exactly the same in every website, so Google provides an API for it.
At least that way you'd know that debugging code had gotten to the live site though. If you don't do that you could go like a month before you find out thousands of users have been seeing your debugging message every time they logged on. . . . **ctrl+alt+down** **ctrl+shift+f "alert"** \* *sigh of relief* *
I actually have a really good example to illustrate /u/Buckwheat469's point, with angular code to boot! My application used to have a pretty complex object model Template, which had Sections, Columns, Fields, Values: $scope.template = { 'id': x ... 'sections': [{ 'id': x ... 'columns': [{ etc, all the way to Values... }] }] } I had 1 database table, Templates, which had "sections" as a column, as a 'text' datatype. Before going into the DB I would stringify $scope.template.sections in Angular, and coming out of the DB, I had to do something like this: factories = angular.module('factories') factories.factory("TemplatesFactory", ['$auth', '$resource', 'ParseMapService', ($auth, $resource, ParseMapService)-&gt; return $resource('api/templates/', { format: 'json' }, { query: method: 'GET' isArray: true cache: true interceptor: { response: (response)-&gt; response.data.forEach (obj) -&gt; obj.sections = ParseMapService.map(obj.sections) return response.data } }) ]) services = angular.module('services') services.service('ParseMapService', [-&gt; map: (json)-&gt; $.map(JSON.parse(json), (value, index)-&gt; value.key = index return [value] ) ]) But I realized that this is obviously not ideal. I use Rails as my API, so I ended up creating individual models for each part of the Template model, which meant I was no longer messing with stringify. Now all I had to do was this: factories = angular.module('factories') factories.factory("ClassFactory", ['$auth', '$resource', 'SessorCache', ($auth, $resource, SessorCache)-&gt; return $resource('v1/:class/:id', { format: 'json' }, { query: method: 'GET' isArray: true cache: SessorCache update: method: 'PUT' isArray: true get: cache: SessorCache isArray: false }) ]) ... ClassFactory.get({class: 'templates', id: $routeParams.id}, (res)-&gt; $scope.template = res ) And I have complete control over what gets returned from my Rails API. Nowadays I have learned to use Rails to my better advantage and completely eliminated the Sections and Columns models, but that's a story for another day. I hope this helps someone.
I smell something like sockets (http://socket.io/)
This is a great question that can be investigated with your browser's developer tools. Watch the network activity from the developer tools for activity between the browser and Twitter. You can see what type of request it is, get an idea if it is periodic, the data it contains, etc.
The primary use case is loading dynamic data from a server side data store (SQL etc) in such a way that you can treat is as if it's a static json object that lives on your client.
You can just open the console and see [something like this](http://i.imgur.com/EUyI1bV.jpg). So, yes, they poll about every ~9 seconds.
Server devs decide what data is available to the client and the structure of that data. Client devs access the data just like its been stored in local memory.
Use https://github.com/visionmedia/debug as well. Very simple and easy to use 
It really depends on how what level you want to play on: 1. [D3](http://d3js.org/) does pretty much anything you could ever want. It's one of the most elegant JS frameworks out there and I highly suggest getting into it if you are serious about charting. 2. [C3](http://c3js.org/) is a framework built on top of D3 that makes it easy to do most of the usual stuff like bar charts, pie charts, donuts etc. Should be enough for a vast majority of people. 3. [angular-chart](https://github.com/GraFiddle/angular-chart) is a framework built on top of C3 that makes a lot of sense if you use Angular.
Well I actually used client side filtering for a recent project, and I had to do it because of the speed problem, doing it on the server with API calls wasn't cutting it for the client. Of course for huge datasets this could actually reverse, for my project the data was &lt;1 Million rows. The concerns against it are pretty valid though, I was working web app only project, but if I had to also make Android, iOS Apps it would mean much more work implementing the filtering on each platform.
The frontend-to-backend query language that allows them to eschew boilerplate rest code on the server must map to a backend-to-datastore query (or similar) at some point. I'm wondering what support exists for minimising the labour required to allow this to work.
As mentioned by others, falcor is a library for the data layer. React is mostly UI. If you watch some videos on youtube falcor is often presented in combination with Angular(2) because it is highly specialist and can be combined with any other library/framework. As I understand it, it enables you to define the required attributes in the template and falcor takes care of fetching the correct data in the most efficient way. It seems that to use its full potential you need to structure the back end API a certain way. 
v8 version of iojs follows to v8 of chrome stable channel. (from 2.x.y) to 3.0.0 update is by chrome stable channel switched to 44. In github repository, branch "next" or "next+1" might be updated to v8 4.5.103. 
Except for all the servers involved.
I disagree with the React shoutouts. JSX is similar to HTML and React is translating into it anyway. Just learn DOM manipulation with JavaScript first. It will pay off.
You first want to find the relevant object in the collection, and then resolve that object to the index in the array. Once you know the index of the object, then you can use splice: const deleteId = 2; const models = [{ id: 1 }, { id: 2 }, { id: 3 }]; const index = models.indexOf(models.filter(model =&gt; model.id === deleteId)[0]); ~index &amp;&amp; models.splice(index, 1); // Let's see what we have remaining... models.map(model =&gt; console.log(model.id));
&gt; I don't want to be cynical, but their hype-it-but-don't-release strategy is rubbing me the wrong way. Yeah, a bit, but I can also see why they would do it that way. For example, setting the API truly in stone before going public is an *awesome* idea, as due to the origin of this, there *will* be traction from day 1. Also - to get some outside feedback on the concept itself (and probably pointers to similar ideas that they just can't research) is probably worth it.
 var myNode = document.getElementById("idValue"); myNode.parentNode.removeChild(myNode); `idValue` would be the actual value of your id.
The issue is that you update `counter` when x chooses a spot but not when o chooses a spot so the condition that is meant to stop the loop when all spots are taken can't take effect. Consider not using the loop at all, however. Look into [filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) and see if you can use it to filter `spots` down to only the spots that aren't taken.
Alert feels so Web 1.0. I can't think of a case where you'd want it today.
Another option is to place counter++ before computer() in your click handler.
I've been working with js-data for a little while now and I find that it does exactly what you said Falcor does as far as client-side caching. It has several adapters as well for localstorage, firebase, and HTTP REST calls. I like it because while it has a simple API standard, but it also allows for APIs that are not designed in that simple manner. For instance, you can override the endpoint parameter if the URL needs to change, and you can deserialize the data before it creates the data store objects. It includes lifecycle methods that you can run before and after object creation, as well as object time limits, cache busting, and preventing a request from updating the datastore. It does JSON sideloading as well, following the methods proposed by ember-data. As far as filtering goes, it has a client-side filtering method that is a bit like a SQL query but the desire is to push the filtering to the API. I feel like if Netflix wants to contribute to the community then they should release the code and offer it as a competitor to js-data and ember-data.
You didn't even bother to look at picture, did you?
Or... they are just _quickly_ fixing something on the live website!
 * http://javascriptweekly.com/rss * https://hacks.mozilla.org/feed/ The later is mostly for the ES6 spotlights
filter makes a new array, splice edits the array itself, be sure to choose the right one for your needs.
As you wish.
Don't modify objects you don't own. Don't want your code show any alerts? Don't call alert. Don't want it log stuff in the console? Don't call console.log and friends.
Your linter should be configured to warn you of alerts and your compiler should automatically remove them
Another option, just saw [JAWS](https://github.com/servant-app/JAWS) on this subreddit. Take it or leave it, but consider AWS which it's built upon (JAWS adds sugar). When I used Firebase, I used AWS for misc. tasks: * File-storage (S3) * Hosted DB (not when using FB). I use RDS for Postgres, but JAWS uses DynamoDB * Push Notifications &amp; Real-time (SNS) * Hosted code (Beanstalk), a PaaS alternative to Heroku for those situations you can't achieve client-only (S3 key signing, image manipulation, etc). I'd previously overlooked another solution which JAWS makes heavy use of (instead of Beanstalk): Lambda, which is "hosted functions" rather than a hosted server. Especially useful in our situation where we think we can do everything client-side, but turns out there's _just one stupid thing_ which needs a server. Spin up a Lambda function instead of a server. I'm still pro-Parse per my previous recommendation, but just another option to consider. AWS will be a much steeper learning curve (so many moving parts), but it'd be more powerful and _much much_ cheaper (their services are almost always cheaper than their competition, I think of AWS as the Costco of web services). It'd also likely be a more valuable mark on your resume, hard to find a web-dev job listing sans AWS in the description these days.
It's fine to edit your post and add a "solved" note at the very top. Deleting everything, however, is not. You made the thread entirely useless for everyone else.
 debugger;
If I was to guess starting in SF about 120k
http://www.glassdoor.com/Salary/Netflix-Salaries-E11891.htm
That's a really narrow definition. By that, I've never worked with a software engineer. Based on degrees, I've worked on software projects with a large number of computer scientists, a couple of mathematicians, and one electrical engineer. Couldn't someone with a computer science degree learn enough software engineering principles after college to become a software engineer?
I don't know how well known this keyword is, but probably not as well as it should be.
&gt; I'm not saying this is a remotely good practice or that it should be done. "Add alert = function() {}to your production build. And console.log = function() {}and all the other console methods too, for good measure." You might want to work on that. &gt; I was going to originally type log, warn, error, table, etc. https://getfirebug.com/wiki/index.php/Console_API https://developer.chrome.com/devtools/docs/console-api And if a new method is added... then what? You can't use proxies yet. &gt; If you modify console.log directly and it breaks in IE9 or any other browser, it's your damn fault for not checking if there's a console object, and if it has a log method. If there is a "console" object, there is a "console.info" method. Code which does not additionally check if the "info" method exist, will work perfectly fine in all existing and all future browsers. However, it will fail if you overwrite "console" with an object which does not have this method. As usual, the fault lies with the person who modified built-ins, because they created their own environment which was never tested. &gt; at the end of the day your page would still be showing alerts and consoles. There are many sites which log some stuff to the console. As long as you don't flood it, it doesn't really hurt. Breaking functionality, however, does hurt quite a bit. &gt; I'm all for NOT modifying native or host objects in JS, it's a sane advice, but don't take everything as a dogma. [Dogma](https://en.wiktionary.org/wiki/dogma)? "An authoritative principle, belief or statement of opinion, especially one considered to be absolutely true and indisputable, **regardless of evidence or without evidence** to support it." "Don't shoot yourself in the foot with a shotgun" or "don't snort asbestos" isn't dogma. There is plenty of evidence that doing that isn't a good thing. &gt; I think that responsibly modifying and augmenting objects is a good History disagrees. Polyfilling is okay, but adding random stuff or modifying stuff will break things. For example, we now have to write "array.includes" instead of the more common "contains", because some shit lib used "contains" and using "contains" would have broken countless websites. You can do everything you need without modifying objects you don't own. ES7's virtual methods will make that even easier: function last() { return this[this.length - 1]; } console.log([...'abc']::last()); // c
I use `alert()` when I'm just too damn lazy to open dev tools. Sometimes I want to punch myself in the face. 
This was a simple example to illustrate the concept. http://babeljs.io/blog/2015/05/14/function-bind/ &gt; document.querySelectorAll("div.myClass")::find("p")::html("hahaha"); You can also use it for method extraction: const qs = ::document.querySelector; Instead of: const qs = document.querySelector.bind(document);
yeah already read that babelpage ;-) Still u could do the same thing w/ functions. Not sure what the benefit really is.
Is there still any good reason to be having debug logs shipped to production users anyway?
I want to do the same
Punch me in the face, or yourself?
You are not wrong, but I think they just didn't think about it, because this was the title of the livestream, before they even knew what they could cover. 
Yes. 
Back in 2005 or so I had a client call me to ask why their application kept showing a pop-up window that said "poop" when they saved an invoice. Oops. :)
Just as an example of what I mean: http://haxe.org/manual/target-details.html There is no documentation for Neko, C# or Java. Also, one particular problem I had finding documentation for was how to export your project as a javascript library.
I looked a little bit on TypeScript (the official tutorial, and the part named handbook). Looks like all it brings is static typing and class/interface syntax. Did I missed something ?
Right, I see what you mean. I guess it, as usual, comes down to the specific use case. For example, if it more often happens that you're displaying the same data in different contexts (such as e.g. the number of likes in a Facebook comment being used both in the display of the comment, and as part of the sum for the actual post), then there's something to be said for keeping the data fetching close to your data presentation, without duplicating requests. When, however, you have multiple interfaces for the same data (e.g. mobile website, app, whatever), then that's less advantageous.
Agreed, but that's what a degree in engineering delivers. To be honest, I really disagree that anything front end related deserves the phrase "engineer". Designer, developer... Sure, but it's not engineering. Let's just be honest here.
See? No reason to use it today.
Good job! This should come in handy http://docs.aws.amazon.com/lambda/latest/dg/limits.html
You are correct. You can toggle to the correct environment and get the console messages there. Took me a few months of frustratingly working with iFrames before I learned that. 
&gt; waaait a minute... [...'abc'] is confusing. Is it an array of strings or a string or whats going on o_O. &gt; [...'abc'] ["a", "b", "c"] It's just less annoying to type. It's an array literal with spread. Spread works with any iterable (arrays, strings, NodeLists, etc). let a = [0, 1]; let b = [2, 3]; a.push(...b); // much simpler than a.push.apply(a, b); console.log(a); // [0, 1, 2, 3] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator You'll see array literal + spread often in conjunction with QSA: [...document.querySelectorAll('.foo')].forEach(...)
Is this all regex?
or maybe you are a dick for not blurring out the site
&gt; let a = [0, 1]; &gt; let b = [2, 3]; &gt; a.push(...b); // much simpler than a.push.apply(a, b); &gt; console.log(a); // [0, 1, 2, 3] It might be less annoying to type (for you) but its a completly different way to think.
Yes.
 ...a is like a[0], a[1], a[2], etc, a[a.length -1] That's it. It's super simple, really. It's already supported by Firefox, Chrome (flag required?), and Edge.
I've read each of your comments. Your issue with TypeScript is that it shares specific terms with Java: classical OO, inheritance, typing, etc. *TypeScript is not Java*. None of these things are required. Inheritance can easily be avoided.
I've used this on Angular projects without any problems. As a rule of thumb, you don't want console statements in production code. Log it to your backend if you need debug data from your live environment. Usually, though, I only run this on my own code, separate from any third party code.
Kind of bloated. I just wanted the GFX part.
Also, make sure any line of text you put in your app is spelled correctly.
debugger; to the rescue. It is hard to explain how much I have learnt about the window object in JS just by placing a debugger and fooling around the sources tab in the Chrome Dev Tools to check how the clojures and local scopes work. tl:dr; use debugger; and chrome dev tools sources tab
This is nice, but C++: http://algoholic.eu/qnodeseditor-qt-nodesports-based-data-processing-flow-editor/
so what's your point? do you have something better, or can you magically make it happen over night that the web doesn't depend on javascript anymore?
yeah thats exactly the reason why I am not sure if it is awesome or just "sugar". 
First line pushes all items from "b" into "a". It's like a.push(b[0], b[1]). Second line should be a.concat(b), which would create a new array which contains all items from "a" and "b". The equivalent of a.push(...b) is a.push.apply(a, b).
so, don't use it
Nice. :) pretty creative solution.
I would go the easy way, that you include that script and wrap it with some if(ie), like: var isIE = (navigator.userAgent.indexOf("MSIE") != -1); (this detects IE &lt; 11, see http://www.geek.com/microsoft/internet-explorer-11-will-pretend-its-firefox-1543903/) Or, http://stackoverflow.com/a/14555015/1421327 for IE &lt; 10 &lt;!--[if !IE]&gt;&lt;!--&gt;&lt;script src="zepto.min.js"&gt;&lt;/script&gt;&lt;!--&lt;![endif]--&gt;
Client dictates pure JS only. Mainly what I have to do is work with data in tables and lots of calculations. My main problem so far is working with the DOM to get values from cells in ASP.NET GridView (which just renders as HTML table). So I just need some kind of reference to check why my code works in one and not the other. I've mainly found answers on StackOverflow, but it takes a lot of time. And Jesus H! Why can't this language have f'ing datatypes?! That's also a pain &amp; extra code.
For some of the tests cases I am getting negative improvements. And it seems to not be consistent in the results.
Hey /u/Zhouzi! I didn't mean to sound accusatory. I took that screenshot on my iPhone 6+ while viewing your CodePen link in Reddit's in-app browser (which I believe is safari). 
I can see the utility of something like this. I don't need convincing. Client has told me not to bring stuff like this up. They have their reasons, and there is no room for debate. I respect their position, they give me money... My problem is that I do something that works in IE compat mode (what they use), and then it doesn't in Chrome (what their customers may use). So I then have to back and forth on Google/StackOverflow until I find the thing that works. Very time consuming.
Looks really good, although performance varies a lot depending on parameters and even between runs. Still, I see similar performance gains as yours in Chrome but big losses on IE and Firefox, as you might expect. I'll definitely try this on some projects.
javascript (function)
Well the problem is `IE` has different shit, so your going to have to figure out what's the equivalent of doing things in `IE`. Take the old `attatchEvent` in `IE`, you'd have to do: if('addEventListener' in document) { document.addEventListener('click', cb); } else { document.attatchEvent('click', cb); } So again you'll have to find the equivalent, by Googling, there's no way of solving cross browser compatibility without a good library like `jQuery` which solves that and allows you to use `.on()` So you'll have a whole lot more work :), now if that person knows about web development (which I'm assuming they do, since they don't want to use third party things like `jQuery` they probably know it's slow) I'd show them `NodeList.js` and who knows they may comply, now you'll still have to do: if('addEventListener' in document) { } etc
If the issue is with Edge this won't work (the UA string is very Chrome-like). But hopefully Edge doesn't have the same issue. If it does I wouldn't mind taking a look.
FYI, WebStorm has done this for a while now, it's not just an ES6 thing. Though ES6 may make it easier for WebStorm to parse.
Internet Explorer, Edge, and Firefox do not implement navigator.hardwareConcurrency which is needed for the library to detect how many threads to allow at any given time which is 125% x logical cores, since they do not implement this the library falls back to a maximum concurrent thread count of 4 therefore scaling will see negative returns past that point. Thanks for the support!
This is a result of that you don't lint your code. You should lint or run static code analysis on your code regardless, prior to pushing it to production. That's the correct answer, not discouraging using "alerts" or "console.logs".
[Problem: JavaScript is incredibly popular](http://cube-drone.com/comics/c/relentless-persistence).
I've made a similar library also: https://github.com/pakastin/clocktick
falling over laughing at that - all of it is true!
To answer the socket.io question, it's because it's using a socket connection, not a traditional http request. It's a different technology, allowing for both sides of the connection to push data to the other while the connection is open. Before websockets were available, a common solution was to use an ajax polling setup like you described. If I remember correctly, Facebook and others used (maybe still use) a technique called ["comet"](https://en.wikipedia.org/wiki/Comet_\(programming\)) to simulate data-pushing.
You're not missing anything. Polling with Ajax is a perfectly valid solution for this problem. Sockets have their merits but so does the simple HTTP request/response model. With the right setup it can have almost the same latency as a message pushed to the client through a socket.
Use a linter
My favorite: &gt; Solution: gulp &gt; Problem: gulp
`alert.bind('needs').call.apply.bind('more').call.bind('javascript').call.constructor.bind.constructor.call.apply(alert)`
Haxe is a better language, Typescript is a better Javascript (which has a lot of practical advantages.)
Any benchmarks? Cant imagine its super fast.
Oh I use debugger constantly - screenshots are from my end user experience, someone else's fuckup :/
So what happened Nov 4 2013?
That's fine. :)
I ran into a situation just last night where I could not use the debugger as it kept calling my apt's scripts twice, which is normally not an issue except I had just put in code to put a unique ID into every web page; so the calling twice gave me two ids. I had to use alerts some then. 
Use [conditional comments](https://msdn.microsoft.com/en-us/library/ms537512\(v=VS.85\).aspx).
You're welcome
Ah, middle school. :)
Sometimes you just gotta tell 'em like it is.
I can try but it might break after i run it through the es7 transpiler and then the es6 transpiler (you know cause backwards compatibility) and then reverse transpile it to coffeescript
&gt; coffeescript no
Part 3 of a series, [Part 1](http://jonnyreeves.co.uk/2015/basic-typescript-dependency-injection-with-decorators/) (property injection) and [Part 2](http://jonnyreeves.co.uk/2015/injecting-into-methods-with-typescript-decorators/) (method injection).
None that I could find the FAQ suggests this would be as fast as your code is.
Considering the extra network requests, i find it hard to believe that it can be as fast as "server"-based code.
What? Any normal web app runs an external network request on a user action that touches data. You know ajax? There aren't any additional requests over what you might see in a normal web app. I'm sure its as fast if not faster. Based purely on implementation.
Microsoft Word is not the correct answer.
Especially after being spoiled by the speed of webpack, react and react-hot-loader
using reddit to get more points is lame OP.
Inline a bunch of polyfills you find on MDN, and also look for a shim for dealing with events (to encapsulate the whole `if ('addEventListener' in document)` logic), if you're using several event handlers.
there is a hot reloading loader for jspm as well: https://github.com/geelen/jspm-loader-jsx
&gt; Reload times of 20 seconds? No thanks. Really? Is it really that slow? The reason I love gulp with browserify is that can bundle, test, lint and reload in about a second on smaller projects. It makes a huge difference when having your browser open on a secondary screen and never have to move over to refresh but can just stay in your editor. You just type away and save whenever you want the browser to update. Combine with Vimium and you never hardly ever have to leave your keyboard.
So the answer to my question si No.
I recommend using [this conventions](https://github.com/ajoslin/conventional-changelog/blob/master/conventions/angular.md) and enforcing it to whole team with [githook](https://github.com/angular/angular.js/blob/master/validate-commit-msg.js) Not only it is clearer but using [conventional-changelog](https://github.com/ajoslin/conventional-changelog) (e.g. with grunt/gulp) will generate changelog for you.
Nah, you don't have to learn the config syntax. It's entirely automated by the jspm cli. It does give you the option to tweak things if you find there are issues, though.
Now, call a pessimist but... no matter how convenient, I really hope the usage of GitHub as a package repository will never catch on. There's a reason NPM is vastly superior to GitHub in that regard. Mainly that GitHub has never been or intented to be a package repository and that your dependencies might just magically disappear when someone decides to clean up their GitHub. As someone who maintains a large project with tons of dependencies over many years, this looks like a major disaster just waiting to happen.
Hi /u/bluejavakk, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
In iOS the popular package system, Pods, uses GitHub. Just last month I had an issue where a popularish repository was missing because the dev deleted his entire GitHub account. Thank God I found some random Joe who had forked the repo. But if he deletes it, and I didn't have a backup, I literally couldn't build the file any more. "Real" package managers should care about this and make packages permanently accessible. But GitHub should let us delete repos and history as we please. They have competing interests. 
Oh, bummer. I had read them (and just read them again) and thought I was okay. It is my own blog post, but I don't advertise on it or anything - just my thoughts on development. Is that why it was removed?
Hosted on a static web page. Feel free to let me know of any questions/critiques you have! This uses the EchoNest Api to conduct Musical Analysis. Here are the weights I used (derived from trail and error) * Timbre - 30 * Pitch - 40 * Loudness at Start - 10 * Loudness Max - 10 * Duration - 100 * Confidence - 10 Would it be better to keep my weights hard coded or allow users to configure these values? 
Tell me one single resource that is as comprehensive as Eric's course and is cheaper. There isn't any. If I can save 17 hours with Eric's course, it is already worth it.
It has nothing to do with JavaScript. You might try /r/programming, /r/webdev, /r/frontend, etc.
I use Vim. I love it, and don't see myself ever using anything else. It has a pretty steep learning curve, I've been using it for 2 years and I'm still learning new commands. There are a plethora of plugins for Vim, and provides a high level of customization. Your hands never have to leave the keyboard, you navigates files entirely with the keyboard. I used sublime text 2 before switching to Vim, and my efficiency in general has gone way up because of this. I highly recommend it, but be prepared for a slow start, at first you will have a hard time doing even the most basic things.
It's bizarre to me how many things are reinvented in the JavaScript community. What's wrong with the much older and much more reliable rsync package systems?
Ugh, I can't be the only one that thinks background videos are ridiculous? Backgrounds should be minimal and not distract from actual content. If the video is the content you want people to watch...it should be in the foreground.
This is an awesome thing to know. I had no idea!
It can definitely be abused, but if done right it's a pleasant experience. The videos would have to have very minimal movement and be there for atmosphere.
I'm not sure why method names would be less likely to change than event names, especially when they're homonyms. `storage.emit("write")` vs `storage.on.write()` - both invoke the "write" event and would be likely to change in the same breaking ways should the API change. Also, this is arguably less transparent and harder to update - rather than being able to handle event aliases (thus maintaining backwards compatibility) inside the `emit()` method, you'd have to export a new method and still expose the old name for the method in order to allow the same compatibility on API change. Also wondering why you're doing all the unnecessary context binding for exporting the interface - why not just use module.exports = emitter and avoid the overhead of having to use `bind()` at all? Definitely a cool idea, I'm just wondering what problem it's solving without creating many other problems.
Thanks for the suggestions all. I may stick with Sublime Text 3 until Atom becomes a little more mature and move on to that.
That looks like a homegrown version of the approach that most virtual DOM libraries use. Based on that, it's certainly not unreasonable, although at that point my thought would be to go use an existing library rather than a reinvented wheel.
Like this? html &lt;input&gt;&lt;/input&gt;&lt;label&gt; corresponding text&lt;/label&gt;&lt;br/&gt;&lt;br/&gt; &lt;input&gt;&lt;/input&gt;&lt;label&gt; corresponding text&lt;/label&gt;&lt;br/&gt;&lt;br/&gt; &lt;input&gt;&lt;/input&gt;&lt;label&gt; corresponding text&lt;/label&gt;&lt;br/&gt;&lt;br/&gt; &lt;input&gt;&lt;/input&gt;&lt;label&gt; corresponding text&lt;/label&gt;&lt;br/&gt;&lt;br/&gt; &lt;button onclick='check4Blanks()'&gt;Check For Blanks&lt;/button&gt; js var input = document.getElementsByTagName("input"); var label = document.getElementsByTagName("label"); function check4Blanks() { for (var i = 0; i &lt; input.length; i++) { if (input[i].value === "") { label[i].innerHTML = ""; } } }
Vim! or Spacemacs.
Haha, yeah I really enjoyed making that one.
I don't really see the point of this function. A boolean would have the same effect. console.log(isNotifying()); // false console.log(isNotifying(true)); // true console.log(isNotifying()); // true console.log(isNotifying(false));// false console.log(isNotifying()); // false With `var isNotifying = false`: console.log(isNotifying); // false console.log(isNotifying = true); // true console.log(isNotifying); // true console.log(isNotifying = false);// false console.log(isNotifying); // false
are you ok to lose 800mb+ of RAM? use sublime 3, atom, ou webstorm. do you care about resources? use vim or emacs. i use emacs.
Yeah I get that a lot. It's nothing offensive in my language but I suppose I will eventually have to change it.
I still prefer butterflies
For me too. I just found this offered for free in the break room http://imgur.com/uHAfTbB
Misleading title, should be: How to (mis)use online services to convert a video &amp; how to install this particular script. If you think you've learned any JavaScript by reading this article, think again. &gt; The sad truth is that the video backgrounds are not supported on touch devices, because HTML5 does not allow autoplay there. Instead there will be a "play" button underneath your content and the user will need to click on it to activate the ambient video. Not so ambient anymore, right? The best option for now is to use a full screen image instead of the video as described here. I'd assume this restriction would be trivial to bypass with just a [few lines of js](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_HTML5_audio_and_video#Controlling_media_playback).
https://www.youtube.com/watch?v=HXKOsajNZY4
Google's Go language already uses GitHub as a package repository.
Atom isn't more extensible, but it's more easily extended by javascript/coffeescript coders because it's written in that. The UI for installing plug ins is also way better in my opinion compared to VIM, Sublime, or anything else. It's slow as a sloth on heroin though... Still use it myself.
For me it sometimes removes corresponding text as it should,but it leaves parts unfilled, and also leaves parts that are empty. Could my string replace function that was already in place be interfering? 
1\. Event *method* names are as likely to change as event *string* names. The difference is in the errors you would get. Missing methods **will be** reported by your JavaScript engine with clear stack traces. 2\. I haven't thought about aliasing events for backwards compatibility. A couple of quick solutions would be: /// Two-way aliasing. Verbose but clear. emitter.on.oldEventName = emitter.on.newEventName; ... emitter.emit.oldEventName = emitter.emit.newEventName; ... /// One-way aliasing: emitter.on.newEventName( emitter.emit.oldEventName ); A full solution would probably need a `BoundEmitterWithAliases` ;-). 3\. I need to export both EventEmitter methods (`on`,`off`,...) and storage module functions (e.g. `write`). I would need to slap the storage functions on top of the `emitter` object if I want to `module.export` it. This is dangerous as it may break the EventEmitter implementation.
This technique actively encourages XSS vulnerabilities -- please don't do this.
Some recommendations: * create an online professional presence using something like LinkedIn, and keep it up to date * create a public repo using something like github with some of your recent projects. Include a link to your repo on your resume or cover letter. * google for resumes for positions you're interested in. So, for example, if you're looking for a JavaScript Developer position, good for resumes and review other people's resumes. * make sure your cover letter addresses most, if not all, of the job requirements. Give a specific example of a recent project and use key words used in the job posting so that your example shows how well you fit what they're looking for. It's hard to give more specifics unless you want to share your resume and cover letter.
Because THERE'S NO *TIME!!!!!*
It looks nice, though the CPU usage is a little bit too high. But then there's codingame.com which let's you play / solve many games single player and multiplayer in your language of choice. There are also competitions https://www.youtube.com/watch?v=wNcWLCuAAIA
Memes are not allowed on /r/javascript *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I use WebStorm + IdeaVIM 90% of the time, and just VIM the rest.
yep i wonder if thats why ramjet didnt work for me. i was so baffled... lol!
levelup tuts is really good (youtube), though i cant say i watched the JS vids
You should be seeing scaling in chrome, have you run the test case more than once? Normally the first run is the slowest as the JIT has to optimize. I can't speak for Edge but Firefox and IE11's worker implementation is often not fast enough to beat the main thread, you will still see scaling between single thread to multiple thread but often they will not outperform the main thread the main benefit for those browsers is the non blocking fashion and ability to do work on the main thread and across other threads concurrently. 
Yeah... I don't ever use replace(); don't know much about it. Can you do what I was doing with my example code? Just check for empty values and then display everything that isn't empty? /u/mc_hammered commented some code...
so whatevers on line 335 or so returned `null`, [] or `undefined` ... so the bot broke when it didnt check if `row[0]` existed before trying to read it `if (typeof row != 'array' || !array.length) return;`, or throw an error, something like that...
Have them as suggested defaults, and let the end user play with the values, IMO. I really dig the concept!
Thanks :)
I agree about ES6 modules. I would definitely convert to that, if you're already using a build step / considering adding one.
I tried this, works great, except for the WEIGHT part, but I changed that to global replace and everything is perfect! I think you solved my issue! :) 
[are all the numbers supposed to be negative?](http://tinypic.com/r/2ltlj6t/8)
np :)
We can't really help you if you're not posting your resume (of course remove any identifying info). Also, are you putting stuff on Github or Bitbucket? That tends to help quite a bit. 
That seems a bit high to me. I'm using JSPM + Aurelia. Have gulp-watch running, and on changes, my reloads take 2-3 seconds.
Yeah, but more often than not when I look through someone else's source I think - wow that's a pretty fucking neat way of doing X. Whereas mine looks to me like a patchwork of random code snippets.
I will look into them!
Yeah took me a while to figure that one out. Probably, there's a way to make it work with jquery but I just took the ugly shortcut.
Where is the line between the View and Controller? Would it be alright to assume that if a functionality doesn't affect the application state or model it belongs to the View? i.e animations, drawing DOM elements? Everything else either interacts with the state or model(s) and should be a Controller?
It's such a buzzword that I had companies on ancient javaserver and PHP asking me if I knew Angular. I don't even know if they know what it is.
Thanks for catching that!
Yea, I'm on windows.
GitHub: It's the ultimate implementation of the oft-cited advice, "Show, don't tell!"
Babel also allows you to blacklist or whitelist certain transformers. Running `babel --help` will give you a list of all transformers available. Running `babel --blacklist=es6 file.js` would for example leave all ES6 constructs in place.
Also worth reading https://github.com/babel/babel/issues/2168
If you follow the link to the issue and the linked issue, you can see that there's plenty discussion around the thing OP's asking about. And what I posted is the best solution that exists. Unless you have different information.
`JSON.parse('[' + strjs + ']');` the alerted value shows valid-ish JSON, on the exception that it doesn't have enclosing brackets.
With es6 it would be something like this: [ 'div', {class: 'divclass'}, ['h1', {class: 'title', id: 'theh1id'}, title], ['p', body], [ 'ul', listItems.map( li =&gt; ['li', ['em', li.name], '-', ['em', li.type]] ) ] ] ES6 arrows make functional programming far less verbose than before. And you have the full language, not some stripped down markup. Added benefit is that you don't have to mentally switch languages. Although I admit that Mustache looks okay enough, I guess.
I can't speak for anybody else, but I really like them, as soon as your codebase grows beyond a non-trivial size. Like the inference example in the post, it just means there's a whole class of bugs and errors that you just can't make any more. So many things that I'd eventually catch in unit testing later, when I'd then have to remember how exactly things worked, and debug and work out why they're failing etc, and instead with type checking they get caught instantly and immediately as I write them. On top of that, all the tools you use just magically become better at helping you, since they've got way more information about what you're doing. Easy refactoring, instant access to docs, dropdowns listing everything you could possible want to type next, since that's now knowable. Makes coding quicker and easier. I definitely get the pushback against Java et al, where you have to explicitly type everything. I still think can be worthwhile in quite a few cases (although fewer), but you have to commit to it upfront, and it does add an obvious day to day cost. Good type inference though, where quite often you don't have to do any extra typing at all but still get your errors spotted seems like free money to me. What's not to like?
I've been using WebStorm + IdeaVim for a long time, but recently I've been having big issues with it hanging constantly while I'm trying to edit :( It's gotten bad enough that I've had to fall back to plain old Vim for most work.
i created a JSON string in the format of: {"cols":[{"type":"date"},{"type":"number"},{"type":"number"},{"type":"number"},{"type":"number"}],"rows":[{"c":[{"v":"Date(2015,8,5)"},{"v":"112120.1000"},{"v":"225.2772"},{"v":"213.6447"},{"v":"61524.8100"}]},{"c":[{"v":"Date(2015,8,5)"},{"v":"65658.7594"},{"v":"895.4552"},{"v":"297.6843"},{"v":"40802.9800"}]}]} and then add it to the chart as follows: $.ajax({ type: "POST", url: "r_Charts.aspx/GetData", data: {}, contentType: "application/json; charset=utf-8", dataType: "json", async: false }).success(function (data) { console.log(data.d); var chartData = new google.visualization.DataTable(data.d); var chart = new google.visualization.ComboChart(document.getElementById('chart_div')); chart.draw(chartData, options); if you want to do this with an array, I believe you need an array of arrays. So you would create a "parent" array and add each of your arrays to it. 
There's also /r/resumes (which is quite a bit larger than /r/resume), as well as /r/critiquemyresume. Also, something that I didn't realize for the longest time, but I believe makes a big difference: when listing your past experience (accomplishments, etc.), you need to frame it in reference to "this is how it helped the company", because after all, that's what they're hiring you for. Sure, they want you to do fun and exciting things, but ultimate, your contribution to the company is what really matters. For example, where I originally may have had this: &gt; * Created a data-driven dashboard using D3 and ReactJS. I'd phrase it more like: &gt; * Created a data-driven dashboard to facilitate management in quickly analysing trends and pinpointing areas for improvement. Powered by D3 and ReactJS. Just a simple example, but hopefully you get the gist. Another mistake that I made in previous job searches, is that I'd make a single resume + cover letter; however, you should get much better results if you customize both your resume and cover letter for each specific job you apply for, so that you can highlight what they're looking for. For instance, if the job ad mentions ES6 and a focus on unit testing, then you will want to make sure that your experience with Babel, Karma/Mocha, etc. is prominently listed and given due attention. Less technically, you should also review their public website, and read up on their 'about us' page; if they mention that they're big into FOSS, then you will want to be sure they see your Github profile and all the many contributions that you make to FOSS. Hope that helps!
&gt; ES6 arrows make functional programming far less verbose than before. It certainly does. However, it's still longer than the Mustache version and probably also harder to type. It also doesn't escape by default. &gt; Added benefit is that you don't have to mentally switch languages. It doesn't look anything like the DOM tree in your browser's dev tools though. So, I don't really think you've gained anything here.
Looks like you can: http://support.screeps.com/hc/en-us/articles/203022612-Commiting-scripts-using-direct-API-access
If you're writing tests, then your tests are probably doing explicit type-checking as it is. And while you're writing code, you're keeping these types in your head. As long as you keep things simple and don't spiral into the world of Java-inspired inheritance hierarchies and over-abstraction, having the compiler verify these things for you frees up your mind to focus on other things. It also makes it easier to explore a new codebase and generate documentation for it. The key is to keep things simple and predictable, without being too clever. Type inference is one of the best ways to do that.
First of all, I guess it is matter of preference to some extent, so I don't want to make bigger deal of it than necessary. But my example has character count of 211, yours 216. And I can think of various ways to trim that Javascript-only example by a large percent w/o losing on readability. For example I can have frequently used tags added to template. Like div-c can have class:'divclass' by default and h1-title can have class:'title'. We can also have special functions for making stuff like lists (and tables). And we don't have to follow one [] is one tag rule. So the trimmed down version of the above would maybe be [ 'div-c', ['h1-title', {id: 'theh1id'}, title], ['p', body], [ 'ul', toList(listItems, li =&gt; [['em', li.name], '-', ['em', li.type]] ) ] ] A tad nicer, huh? :) This could get really handy with forms, as we can have special forms with some pre-made parts. For example in html there is weird inconsistency where one line text is input tag with text property and multiline text is textarea tag. You can make them all be special text tag with different multiline property. &gt; It doesn't look anything like the DOM tree in your browser's dev tools though. So, I don't really think you've gained anything here. Fair enough. You have me there, I guess.
I think it depends a lot on a *type* of HTML you are generating. If it is run of the mill webpage, then having plain JS templating might get needlessly convoluted (although it can end up good if one is careful). On the other hand if you have plenty of e.g. forms with a lot of common elements (e.g. same basic structure and a lot of boilerplate questions), it might be justified to automate their creation with pure Javascript.
You need a server for this. As this is /r/javascript I would recommend nodejs, this should easily be doable in &lt;20 lines of code. The libraries you could try would be: * Nodejs (For the server) * Express (For simplifying the serverside) * Socket.io (Server, and client, for realtime communication)
what's not to like is having to specify type everywhere you go. I feel like I get enough with just autocomplete in webstorm
Thanks for the info!
Thanks! I will look into those. I have no experience with making applications work with one another. 
That's awesome! thanks! One more question. I wrote it out to say "Glad you finally decided to play" if they didn't say yes the first time. so, using your code, is there a way for me to get it to say the "We are glad you finally decided to play! Press OK to begin." but only if they don't say yes? I don't want to say anything if they say yes the first time,, but if they don't say yes the first time i would like to sass them a little. 
That's a fair point. Maybe something like... var refusedPlay = false; while(prompt("Play?").toLowerCase() !== "yes"){ refusedPlay = true; alert("You meant 'yes'."); } if(refusedPlay) alert("Glad you finally...");
Yeah, that'd be a little ridiculous.
if you're going to go this route why not look into something like [Hyperscript](https://github.com/dominictarr/hyperscript) There's also virtual-dom with a similar syntax, but with virtual-dom. And mercury for a whole framework. 
Don't use template to create JSON strings. Instead, just use JSON.stringify(myObject) to produce a string from an object.
I've never heard of anyone using lodash templates to create json before, I've mainly seen it used to generate html. I'm just curious why you wouldn't use a js object and then use JSON stringify to generate the string. 
That was a brilliant read, thank you.
Everyone else is right about posting your resume, but you could also try directly contacting recruiters on linked in.
Your code looks pretty organized. I think you need more of an app architecture than code structure/organization, and you seem to have realized that as well. Angular is awesome for rapid prototyping, and you probably know this already. However, it starts to break apart and become a mess when you try to turn your prototype into something maintainable and something to build on top of - you probably know this already as well because your "model" (a.k.a. your `$scope` variables) would be all over place. You then need to introduce a lot of rules and disciplines that you enforce onto yourself and your project to contain this mess - never touching the `$rootScope` is a great example for one of such rules. I had this problem with many of my projects written in Angular, so I switched to React+Flux. Now I feel so genuinely happy when I work on new projects where I can write React code in ES6. The framework (React and Flux as a whole) encourages me to write clean, maintainable and composable code while giving me flexibility in implementation details. So it's not so much of a solution for code organization, which is more easily fixable, but it's helping me simplify my software architecture so I can have a clearer mind to solve problem with the code, instead of battling with the framework all the time (e.g. where the hell exactly do I look for bug that caused the "10 $digest() iterations reached. Aborting!" error??!). Now back to your project. I haven't had a detailed look at your code, but the problem with building an app without using a framework is that your app lacks structure logic wise. And you end up writing a lot of imperative code. So instead of saying "what the UI **should look like**", you have to write relatively lower level code to specify what you want to do to the UI as a result of a change. Angular solves this problem by allowing you to have templates. You are now able to give Angular a blueprint of what your app should look like, instead of saying when to add an element or remove a class name. React solves this problem by implementing a virtual diffing algorithm that refreshes your UI every time something changes, but the actual DOM changes are kept as minimal as possible. Hope that helps. EDIT: typos
App architecture is exactly what I'm struggling with at the moment. I love Angular and because it sort-of enforces the architecture on you I was able to build some cool things relatively quickly without worrying too much about the maintainability of the code - by following best practices I have a proper separation of concerns. Now I can go back to the code I haven't touched for couple of weeks and know exactly where to find what. I'm so used to the angular way that this current project is starting to become a little bit confusing. I have to remember that this function influences the UI in that way but it also triggers something else and depends on another function. Everything, especially DOM manipulation, is like you said, low level and it makes the code look ugly. I suppose this is to be expected with no-framework-but-the-project-is-too-small-to-code-my-own-abstractions approach? Do you know any good resources on app architecture? Also, I can't wait to fiddle with React + Flux. I'm going to use it in next project, as soon as I'm done with this one.
From the JS side, there is no limitation. An object can have a very large number of properties without any performance or other issues. You should of course keep the structure of your code in mind. If it's possible to split the module into smaller modules each of which has a single clearly defined responsibility, you should probably do that. Also keep scope in mind: for example you probably want to keep internal/private variables and methods only where they are needed, i.e. not in the module root. But if your module already has a single clear responsibility and splitting it wouldn't seem to make the structure any cleaner, you probably shouldn't worry about it. Until the size starts to make it hard to develop further, at least. A small code style -related tip that in my opinion makes working with large modules cleaner: you can move the functions out of the object so you can see with one glance which variables and functions are part of the module's public interface. For example: function initProfile(elements) { profileModule = { someVariable, anotherVariable, someMethod, anotherMethod }; return profileModule; } function someMethod() { // code } function anotherMethod() { // code }
yeaaaaa reduxx!!!
Error: Logon fail
The official tutorial is a good place to start.
Zak is kind of a dick though. Fuc that guy.
Hi, the most basic way to do it would be like this: var twoDArray = [["AB", 1], ["AL", 5]]; var convertedToObject = twoDArray.reduce(function(acc, val, i, arr){ acc[val[0]] = val[1]; return acc; }, {}); console.log(convertedToObject) //{AB:1,AL:5} if you can have duplicates in your base array, you have to update this to handle them. 
same as other posters answer. gl :) `_.reduce([["AB", 1], ["AL", 5]], function (res, v) { res[v[0]] = v[1]; return res; }, {})` 
Your fellow coders will greatly appreciate your typing effort, as reading the code with assigned types (checked at compile time) reveals your intentions far better than ad hoc comments. 
Can you extrapolate? I'm not real familiar with either but have looked at some Flux implementations before including Reflux. What larger ecosystem of tooling does Redux have? How does Reflux dictate your app structure? From what I've seen you can store your actions and stores anywhere in your application structure, there are no requirements. 
Wow, I didn't even know that chrome plugins in Javascript is available. Same goes for audio mixing! Great stuff for me to learn from, I'm definitely going to read through the source code, as well as use the extension. Thank you kind stranger 
I would suggest asking @dan_abramov on twitter. From what I've seen he's very good about answering questions and engaging users.
https://lodash.com/docs#zipObject: var arr = [["AB", 1], ["AL", 5]]; var obj = _.zipObject(arr); console.log(obj); // Object {AB: 1, AL: 5}
Was looking at it for quite some time, but avoided getting deep until stabilization. Using flummox for now. But, I guess, it's time to do the jump :)
&gt; The endpoint info encoded on the url is redundant. So we could have just one single entry point and the backend will do the rest. &gt; `PUT /` Good god, why? Don't go subverting the URI RFC "because the url is redundant." There's a reason HTTP specifies the use of URIs. Use them. Don't want to generate the URL from the data? Write a small method to do it for you. 
Something like this? http://jsfiddle.net/vjt2s4nf/ 
 var html = "" for (var s of student_array) html += '&lt;option value="' +s.Name + '"&gt;' + s.Name + '&lt;/option&gt;' someSelectID.innerHTML = html someSelectID.onchange = function (e) { console.log(someSelectID.value) } edit: http://jsfiddle.net/pmhox3o1/ it sounds like your teacher was implying there was an array and giving you an example of how to access it. maybe you have to copy the sample array... or post your data (the array) cuz its hard to work with data you dont have access to. good luck
If you want to know how Redux works internally then you could probably just read the source code. It's surprisingly straight forward and there's not a lot of lines of code.
sorry, but I don't know what Lovelace's work is, can you please explain me?
The only reason the url is redundant is because the data type is also in the body. They made it redundant themselves. They could just infer the data type from the URI.
This article shows a clear ignorance of HTTP and REST. These recommendations are trying to make JSON APIs look like SOAP.
Just gave this a shot and it still doesn't seem to be working. Here is the export from the console log for the following: console.log (strjs); gives me: ['Month','2014 Sales','2015 Sales'],['Jan',36386.43,23522.30],['Feb',27994.50,30639.90],['Mar',12178.65,27696.57],['Apr',20235.13,24676.91],['May',48599.76,30237.15],['Jun',29456.90,28909.56],['Jul',45326.82,14130.42],['Aug',25048.62,7573.17],['Sep',25835.77,0],['Oct',23128.51,0],['Nov',18735.23,0],['Dec',12504.99,0] console.log(JSON.parse('[' + strjs + ']')); throws the error: Uncaught SyntaxError: Unexpected token ' Hrmmmm
If you put that snippet in a function, "html" and "s" will still be globals. After you've called the function once, there will be now global "html" and "s" properties. http://jsfiddle.net/86ma1gng/ In strict mode, you'll get an error: http://jsfiddle.net/urbtt8yf/ By the way, inside classes, you're always in strict mode. Secondly, linters can catch this, too.
So you'll be able to run up to 5 threads concurrently, I'd look into updating your chrome or try running the same test size multiple times without refreshing the page. Even my android phone sees performance scaling under chrome. 
Hey, this worked great for a personal project I was working on. Thank you so much for this. My only other challenge is that I have an array that is a list of Cities, the array is messed up and not listed alphabetically. Is there a way this list can be sorted?
yea, they will overwrite global vars if you dont put `var` in front of html and s so for example if you had a template stored in `html` it would get erased when you used my snippet, even if it was in a function, which is a PITA to debug. its also extra bad with functions and for loops, because you use variables like `i`,`k`,and `l` so often, and it will make the loop count wig out. tl:dr; my answer needs `var` before `s` and `html`
I hope no inexperienced developer would get the idea that this is anything close to a good design. It is anything but. This goes totally against the concept of HTTP/REST and is even worse than SOAP. This destroys the very idea of data as a stateless, uniformly locatable resource and moves data into RPC-like teritory where it is an input-dependant output of an arbitrary excitation. Please, read about REST, HTTP and finally HATEOAS as API design concepts that both properly conceptualize APIfied datasources into what they truly are -- a graph structure of related data nodes, and which utilize web technologies as they were meant to be utilized.
whew, ok. i understand that and realize now what i had overlooked. i thought for a minute there i had completely misread the concept of scope and hoisting. so would you say wrapping that snippet in a function, **and** including the using var to define your variable would solve the issue of unwanted globals?
That's not working because I am using JSON to populate my array. It's still scattered.
I think something like GraphQL will become more popular than REST. As great as rest is I find it always ends up fragmented or you end up creating one off endpoints for menial tasks just to stay compliant. 
I kind of wish the author would have talked more about the reasons *why* you might want to use this style of API vs a traditional REST style API. I'm not going to say that this is bad design, just because I'm used to REST. But I would like some context as to where this is coming from.
Those are very strong opinions. Could you provide some arguments to back them up? I understand your point of view, and I'm also more familiar with RESTful APIs, but I can't discard more exotic approaches like the ones the author proposes so easily. It would be really interesting to see some practical examples of problems solved better by a RESTful design.
To be honest, I'm kind of confounded by the question. HTTP is built around URIs. It has always been intended as a protocol for requesting and sending data at any given URI. To propose that URIs are eliminated and replaced with content bodies is nearly the same as creating a new protocol. If you won't take my word for it: https://tools.ietf.org/html/rfc7230#section-2.7 &gt; Uniform Resource Identifiers (URIs) [RFC3986] are used throughout HTTP as the means for identifying resources (Section 2 of [RFC7231]). Now consider at least one possible anecdote. Many existing technologies use URIs to handle various types of caching. A request for `/doctor/1` is easy to ship off to a server that has the cached data. If the request went to `/` then no processing on the URL can happen, all headers must be processed, and the request body must be parsed before anything else can happen. You've effectively tied your application logic to your infrastructure. In short: this isn't how HTTP works, so don't do it.
How do Redux and Baobab stack up? Both look very interesting.
how do you make a HEAD request to see wether a resource has changed or not with a single / URL for all your API ? EDIT: and by the way what you are doing is called JSON-RPC, and it's not new. While REST doesn't describe what the URL should be good luck with stuffs like caching with your system.
&gt; It doesn't look anything like the DOM tree in your browser's dev tools though. So, I don't really think you've gained anything here. What do you mean? It is a tree. It's just using arrays instead of html syntax....
I'm not the author, but I don't think he is saying that he has invented this approach. I think the post is just an explanation of a technique.
Hey, man... That's not an array. What it is is a not defined variable. 
He's suggesting that the technologies already exist by other names, like SOAP. He's correct; this is mostly using JSON for non-RESTful services. IMO JSON is ill-suited for this in large part because of a lack of semantics in its structure.
&gt; And wouldn't the mustache version have to be kind of "hard coded" in a script tag? If you want to parse the templates at runtime, you've to load the templates as strings. Inlining them via &lt;scritpt type="whatever"&gt; tags is one option. You can of course also automate this and keep each template in its own file. Inlining them is convenient during development. Once they are precompiled it's just JavaScript. http://handlebarsjs.com/precompilation.html &gt; What if you wanted to generate html more dynamically? I'm not really sure what you have in mind, but there are plenty of builtin helpers and you can also register your own helpers: http://handlebarsjs.com/block_helpers.html http://handlebarsjs.com/builtin_helpers.html http://handlebarsjs.com/#helpers
http://i.imgur.com/2iZdVa9.png Does this look more like Mustache or more like nested JavaScript arrays?
&gt; Yeah took me a while to figure that one out. Probably, there's a way to make it work with jquery but I just took the ugly shortcut. If you mean that you would like to get a DOM Node from a jQuery object, simply access the list with subscript notation like `$('body')[0]` or use [$.get(index)](https://api.jquery.com/get/), like `$('body').get(0)`. I think you could change the line from `var b = document.getElementById('commentary');` to `var b = $('#commentary').get(0)`; if you feel inclined, but vanilla JS is fine. Best of luck on your project!
I imagine this is sarcastic, but I have no idea what you're referring to. What's the story?
replace `JSON.parse` with `eval` if you can be sure it's safe, but the problem is that JSON doesn't support `'` for strings, you can do a replace to swap them out but it might create issues `strjs.replace(/"/g, '\\"').replace(/'/g, '"')`. The first replace escapes all existing `"`, second replaces all `'`s with `"` So your code would look like `JSON.parse('[' + strjs.replace(/"/g, '\\"').replace(/'/g, '"') + ']');` or `eval('[' + strjs + ']')`
I'd argue it complicates the entire process. Since most existing code works around URIs you'll have to reinvent a slue of functionality just to support some idealist approach. I don't think anything is gained doing this, and a lot is lost.
Eeeesh --&gt; the amount I love and hate you right now.
http://i.imgur.com/PNYRZ.gif
This is the funnest, most childish, argument I have seen here so far. I love it. 
&gt; but on the other hand validation is going to be a nightmare How so? A simple tweak to the dispatcher can handle that no? What am I missing?
Plain and simple, there are servers involved. Its not server free. Stop calling it that.
I have a degree in Computer Engineering, my title is Software Engineer, and I primarily work in front-end JavaScript all day. So, what's the actual difference?
Pretty opportune time to be pedantic. 
I'm glad you know what every single person coming in here thinks. /s
Jesus Christ men. Worse case scenario the minority that DOESN'T follow, would see it's a paid Amazon service and would realize not to use it. This IS a childish argument. 
Its a simple argument, and the claim is simply not true. Its that simple. Theres nothing "childish" about the argument. The only thing childish here, is your response to people having an issue with a selling point of a framework.
There's a childish flavour to being so pedantic that you don't discuss the actual product because the slogan is not 100% true.
what I am doing now is all of my functions that are not simple what the module functions do is call external functions and pass all of the relevant counter variables and cached DOM elements. Because some of the functions are like compressing webcam photos into jpg. Also taking it out the module makes the module more simple to read since there won't be huge blocks of code between. 
Just because I disagree with you doesn't make it wrong. Grow up.
the actual file, seems to be a decent indicator imho
Why is everyone downvoting this? This is a model being rapidly adopted by major tech companies. It's basically SOAP + JSON. It's at least worth considering. It looks like the way it abstracts the data will prove extremely useful and efficient. Check out FB's GraphQL: https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html Check out this video, very convincing argument: https://youtu.be/WiO1f6h15c8 
Of course you need to be wary of stuff you put in your HTML but this is no more or less insecure than OP's example.
It looks the same but just with html syntax 
A couple of resources 😉 https://github.com/enaqx/awesome-react
You're correct, but I don't think you're wrong because you disagree with me.
What I am suggesting is that the problems being "solved" by the author have already been solved with REST and HTTP. If the author had researched REST, he probably would not have re-invented solutions for problems that don't exists in RESTful services.
No, the actual content type (`application/json`, `text/html`) should be in the headers. If you want to be more specific, it should be in the URL (`/doctors`) The `Accept` header is used to request a content type, the `Content-Type` header is used to tell what is being returned. They are two sides to the same request/response pair.
Haha, wrong! Babel 6 won't do any transformations by default. Although that was announced like yesterday, so you're forgiven!
he's wanting to create a closure, so if you do isNotifying(true), next time you call isNotifying() - it would return true
Generally speaking - I'd avoid trying to mix getters/setters like this as it can start to confuse things and lead to a hard to follow api. When I see 'isNotifying' - it makes me think that I am checking for a value, not setting a value. By trying to mix get/set into one thing - it starts to obfusticate what the purpose of the function is. Could just use getters/setters var notifier = (function () { var val = false; return { set isNotifying(input) { val = input }, get isNotifying() { return val; } } })() notifier.isNotifying; notifier.isNotifying = true; notifier.isNotifying; 
So the answer is no, sort of. There is the `valueOf()` property that you can set on any object including functions. So you can have a function, f, and write, f.valueOf = function() { return 5; }; Then when you do `Number(f)`, it returns 5, and when you do `f()`, it works as normal. You can also call `'' + f`, and get the string '5', and then get confused why `String(f)` does something different—but that's easy to fix. f.toString = function() { return '5'; } However, when you call Boolean(f), it's always true no matter what you try. All objects when converted to booleans return true regardless of any properties, and you can't change it no matter how hard you try. All objects apart from `document.all`—the only falsy object. ;)
How does this render the URI and the request body redundant?
I have 4 GB of unused ram for atom, is that enough? :P
es6 or use common style modules with browserify (a bit more versatile as es6 modules don't quite work with everything yet)
So, why even use jquery? Generally nowadays you should avoid using it if you can do what you want natively without too much work.
You should console.dir a jquery object and just poke around.
this is awesome. this also makes my head hurt :) 
By the way, ever heard of this? https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule Those nested arrays are some kind of ad hoc Lisp. See also: https://en.wikipedia.org/wiki/S-expression Anyhow, I think it's easier to just work with HTML, because that's what you see in your dev tools and it's also what you see in the living style guide. For CSS, you also need a crystal-clear picture of the hierarchy. In my opinion, there isn't much point in abstracting this since you aren't writing that many templates anyways. Modern editors and IDEs auto-complete and auto-close everything. They also auto-indent and auto-unident. You actually don't have to press that many keys. If you still want to use something which doesn't look like HTML, try Jade: http://jade-lang.com/ ES6's template strings are also quite powerful: http://jsfiddle.net/wa1ddafe/ (Chrome 45+, Edge, Babel/Traceur)
Why are you trying to do this?
I guess you're right. The fact it uses Coffeescript in every single aspect really limits its extensibility. I'm not gonna learn Coffeescript just so I can write plugins for my editor. 
I don't understand your description nor your non-working example. Use multiple shorter sentences. Explain it step by step. As for your example... null? That's supposed to be undefined, right? What's "name1"? Do you want a default value? ES6: function foo(bar = 5) { console.log(bar); } foo(); // 5 foo(7);// 7 ES3/5: function foo(bar) { bar = bar || 5; // won't work for falsy values console.log(bar); } foo(); // 5 foo(7);// 7
Hi /u/RReverser, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I bet buggy as fuck and hardly supported
I'm new to REST but I find huge value in how it self-documents. It becomes quite obvious as an API what you do where and how.
You have a few thing to understand here: - first, a variable is a binding between a name and a value. to be able to use it, you have to first *declare* it so that the name exists for the runtime (and it will be 'undefined'), and then *assign* it so that it has a value. You can somewhat use a binding which hasn't been assigned through the undefined value, but you can't read from a binding which hasn't been *declared* (by 'var' keyword in ES5, 'var', 'let' or 'const' in ES6. If you're not in strict mode you can also declare and assign in global scope without keyword if you directly assign, but that is considered very bad practice) - second, the first thing that a function does when executed is reading the values from the supplied arguments and copy them to new bindings, which only exists inside of the function, and only while it's executed (named as the parameters that you defined when declaring the function). - third point, don't use non-strict operators (!= and ==) in comparisons unless you know what you do. Because of type coercition 'feature', javascript will convert the values before comparing and give unexpected results. a != null in your condition would return 'false' for both 'null' and 'undefined'. (plus, I suppose that you wanted to check if 'a' was empty, and assigning if it was the case, but you're doing the opposite) Back to your case now: you've never *declared* name1 before feeding it to getName(name1). So according to my second point, the first thing that your function execution tries to do is reading the value of the binding name1, but according to my first point, as this binding is not *declared*, it's impossible to read from it, and so the runtime throws an error at you. (giving a binding name as an argument is not considered as a declaration) It's really important to get that: a *variable not declared* is not the same as a *variable never assigned* and it neither is the same as a *variable with a null value*, those are three different things. Something else you have to get: a function **makes copies** of its arguments. The values you get inside the function are **not the variables that you pass as arguments**. So modifying your named parameters inside of the function won't modify the initial arguments. (except for arrays and objects, because the bindings are made on references which are copied, but that's a whole other subject) An additional thing, if you define your function with a parameter, but call the function without argument, as there are no bindings to read from, the parameters are bound to 'undefined'. Let's wrap this up with code: **case 1**, let's declare name1 var name1; //name1 is now declared, even if not assigned. It's value is 'undefined' var Employee = getName(name1); function getName(a){ //the binding 'a' will equal 'undefined' on execution, because it's bound to a copy of the value of name1 if(a === undefined){ //this is what you will really get if name1 has never been assigned or if nothing is passed when calling the function a = "Steven"; //this changes the value of 'a' inside of the function, however it doesn't change the value of 'name1' return a; //this makes the function return the value of a, which will be assigned to Employee } } alert(Employee) //'Steven' alert(name1) //'undefined' **case 2**, what if we don't give anything to getName when calling? var Employee = getName(); function getName(a){ //the binding 'a' will equal 'undefined' on execution, because there wasn't any given argument if(a === undefined){ //this is what you will really get if name1 has never been assigned or if nothing is passed when calling the function a = "Steven"; //in this version, this is useless, I could return "Steven" directly return a; //this makes the function return the value of a, which will be assigned to Employee } } alert(Employee) //'Steven' alert(name1) //'undefined' **case 3**, let's feed the function with a value directly instead of a binding var Employee = getName('AlphaRaptor'); //I pass a string defined in place instead of a binding function getName(a){ //the binding 'a' will equal 'AlphaRaptor' if(a === undefined){ //this is false a = "Steven"; //this will not be called } return a; //I put the return out of the condition, otherwise I would have returned nothing, and Employee would have been undefined } alert(Employee) //'AlphaRaptor' **last case**, let's give a value to name1, and reverse the check condition var name1 = 'AlphaRaptor'; //this time name1 has a value var Employee = getName(name1); function getName(a){ //the binding 'a' will equal 'AlphaRaptor' if(a !== undefined){ //this is now true because I reversed the condition a = "Steven"; //now 'a' is equal to Steven } return a; //will return 'Steven' } alert(Employee) //'Steven' alert(name1) //'AlphaRaptor' I know this answer is lengthy, but I hope it clarifies some inner workings of the language that didn't seemed understood looking at the question asked. [edit: formatting, typo fixing]
Linux
I also use ConEmu with the Quake Dropdown mode and usually Git Bash inside a pane split. There can be a few pain points, especially when you have bat files to set environment vars and such, but you can just open a new pane with cmd (or the specific shortcut - ie. for the Visual Studio environment) for those instances. I also stick ST3 inside a pane, which works fine.
I guess because it goes against the grain of most frameworks. .NET MVC for example, your controllers are automatically wired up and get strongly typed parameters without you having to parse the inputs.
These are interesting experiments. I feel like some of them are a misuse of props though. @bindProps Use a constant instead. That is a misuse of props @defaultProps Use the standard getDefaultProps built into React @computedProps Moving this type of logic from the render would cause me more confusion @rxProps I think there is a typo in the sample code. count is not defined in the increment and decrement functions 
You stick ST3 inside a pane? How do you go about that?
Half expected to end up at buzzfeed with that title.
I'm not saying it's an end all be all, but there's no use in suppressing free and open discussion of ideas, even if you don't think it's going to be the wave of the future. People always get so butthurt about this stuff, if you don't like it, cool, don't use it. All I said was its worth investigating.
It's not a special trick. You can even get IE and FF in there, but I tend not to do that. When you're opening a new tab or splitting, just write the path of the program you want in there when the dialogue comes up. There will be predefined things and you can make your own. You can also configure your own tasks to save workspace layouts. So for example, you're working on some project, you can have a split for the repo folder, a split for your database, a split for the server, and a split for an editor if you want. Easy to get back to when you close everything. There's also a hotkey to toggle the currently highlighted split between occupying the full window- that can be handy, although the buffer doesn't tend reflow for git bash at least, which is annoying in my opinion. My advice to anyone just getting started would be to go into the preferences and look at all the hotkeys.
http://conemu.github.io/en/SplitScreen.html I didn't know about this until I saw this guy's post. This is life changing. I got this to work for VScode.
This is absolutely insane. Did you use any framework for the UI?
No shit sherlock. I said in the post it was based on **CLOJURE'S HICCUP** Edit: Clojure is a lisp, dumbass And since lisp is literally the best programming language, I don't see what's wrong with making any language behave more like lisp. And either way, you have to press less keys for the cool lispy version and then it's easier for stuff like smartparens/paredit. Yes I understand smartparens works with html, but html is stupid and so are you. Also who even cares about css; this is /r/javascript Edit2: You're just a stupid, stupid person.
Thanks! This helped me a lot :)
came here to say this, cmder is awesome!
it should work "everywhere" with a proper uri instead of just the empty fragment. https://en.wikipedia.org/wiki/View-source_URI_scheme
You asked for feedback. There is no reason for you to be so butthurt. I simply don't think that this is a good idea. It's one of the ugliest most inconvenient template languages I've ever seen. Yes, it's less verbose, but in return it's very noisy. It's actually *so noisy* that it ends up being longer than Mustache. &gt; I don't see what's wrong with making any language behave more like lisp. "an ad hoc, informally-specified, bug-ridden, slow implementation" That. Pretty much. &gt; Also who even cares about css; this is /r/javascript You need CSS for frontend stuff. The same isn't true for your array-based template language. Secondly, when you write templates, you have to create markup which matches the structure of your building blocks (OOCSS, BEM, SUIT CSS, etc). Templates are *very tightly* coupled to the CSS. With those modern systematic approaches, you write markup which matches your CSS. That's how you keep the number of rules low. New rules are only added when it's absolutely necessary. Try being less emotional. This isn't about you. It's only about that idea. I think it isn't a good idea and I told you why. This is exactly what you asked for (see title).
[Babun](http://babun.github.io/) is quite nice. It's basically a wrapper for cygwin, with zsh as the default, a built-in package manager, and some other things.
i'll change the name to avoid confusion 
I am curious. What RFC specifically (the number) and what section are you citing.
GraphQL solves some big problems that REST struggles with and that REST hasn't "solved".
Interesting, so you just typed it in? I was clicking the `[view-source]` link in the upper-right. I'm on Cr-beta. My OSX Cr (which is regular release) works as expected (opens view-source), and manually typing it in doesn't crash either one. At this point it appears to be related to Cr-canary. I'm not seeing anything on the [Chromium bug tracker](https://code.google.com/p/chromium/issues/list), perhaps it needs to be reported? Either way, I appreciate the report, even if it appears OP had benign intentions (and has since deleted the post himself).
I'm pretty sure that this OP/author is missing the point of JavaScript.
https://www.reddit.com/r/javascript/comments/3g4k34/the_future_of_json_apis/ctuwd0g
**Input interpretation** (0.105904677/(0.105904677+2))^3+((1-0.105904677)/(0.105904677+2))^2×(-0.000705568) [Image](http://i.imgur.com/y3uGkCK) **Result** 5.532000494839220448287924123839899693145254999... × 10^-11 [Image](http://i.imgur.com/5Nd7kJL) **Repeating decimal** 5.532000494839220448287924123839899693145254999... × 10^-11 [Image](http://i.imgur.com/D0jINAQ) **Number line** [Image](http://i.imgur.com/NXwPIKR) *** [^(Delete (comment author only)^)](https://www.reddit.com/message/compose?to=WolframAlpha-Bot&amp;subject=WolframAlpha-Bot%20Deletion&amp;message=delete+https://www.reddit.com/r/javascript/comments/3g7igx/why_is_this_math_so_inaccurate_and_how_can_it_be/ctvmek8) ^| [^About](https://github.com/JakeLane/WolframAlpha-Reddit-Bot) ^| [^(Report a Bug)](https://github.com/JakeLane/WolframAlpha-Reddit-Bot/issues) ^(| Created and maintained by /u/JakeLane)
When making multiple ajax requests you can't tell which one will finish first as they are fired one after the other not waiting for the previous one to return. If nothing depends on the ajax request, then it's not much of a problem, but when the order matters you should start using something to help with that such as promises. In the case of your save button, js is single threaded, but ajax calls are async and won't block it. But if the save action uses data from an ajax call and that request is not yet done, you will get undefined. Example situation: Ajax request 1 =&gt; we ask for value X Ajax request 2 =&gt; we ask for value Y return ajax request 2 =&gt; value Y Click Save =&gt; we have value Y but X will be undefined because the first request hasn't returned yet. return ajax request 1 =&gt; value X 
&gt; You have a bug in your pow functions. Heh. Good eyes! :)
Nah hes just betting.
Well, I just restarted Beta to apply updates, and it's now crashing....it tried to navigate to `view-source:http:/#` then promptly bombed.
Sure descriptive titles are good in general, but sometimes a little bit of irony and humor are ok.
Most Unix-like commands are supported as aliases of Powershell cmdlets, such as Get-Help. There is also Get-Command which supports a wildcard search of commands. I don't know if it returns aliases but there is likely a Get-Alias cmdlet as well.
Hi /u/Jihdeh, it looks like you're new to reddit, welcome! Just a heads-up, spamming your site (`nowwehere.io`) will get you banned.
Those titles end up in lists like this sub, search engine results, and even URLs. You need a descriptive title for that kind of thing. That title is all your potential visitors can see. Put some thought into it. Be clear and descriptive. The title is very important. No one will search for "one weird trick" when they want to search for whatever OP wrote about. (Yes, I couldn't be bothered to figure it out.) And if this somehow shows up in the search results and this article is indeed what that person was looking for, they still won't click it because the title doesn't sound right. "Clever" titles are pretty dumb. They do everyone a disservice.
Ah yeah, that's actually a good point.
 &gt; ((1/10) + (1/5)) 0.30000000000000004
oh thanks /u/kenman
This is amazing kudos
Well since Im already including it for Bootstrap, why not use it?
Thank you for typing this up. I read a lot on the internet and your post really made me understand functions. 
&gt;Last week I learned that I can call a function from inside itself That's called recursion and is an extremely basic concept in computer science. Have you considered getting an education?
Didn't mean to come off as a dick, sorry; was genuinely curious in whether you saw value in going back to school to get a comp sci degree
there is absolutely no reason why user data should not be embedded into that response. you seem to be mistaking REST with RDBMs and even there you can have multiple views into actual normalized data much as with rest you can have multiple view "path uris" for the same purpose. The C.UD ops should be clean (yet still allow bulk edits and nested resources where applicable eg master-detail, in your example obviously not nested for writing). Reading should be application optimized. Single entry point and verbose SOAPy payloads using JSON even where HTTP headers and response codes should be used solve no performance issue, might even make a few, and are still wrong design. Edit: Oh, btw, on "pedantic mode" that should probably be `GET /threads/1234/comments` in that first example of yours to get all comments for that thread as thread is not a primary ID of comments but a FK constraint.
Ahh, haha! Oops, ok; yeah I'd love to get an education but for now just reading articles/books and taking away what I can, it's a good pace for me :)
Once you learn the Native DOM APIs I'd use [NodeList.js](https://github.com/eorroe/NodeList.js) to make it way easier. Your welcome :)
I've coded my own, it is called litegui.js https://github.com/jagenjo/litegui.js
thanks :)
Use [this](https://github.com/eorroe/NodeList.js) instead. Your welcome :)
For performance that gets as close as possible to the Native DOM APIs use [NodeList.js](https://github.com/eorroe/NodeList.js) because its using the Native DOM APIs
Why is there a PHP file involved?
ya 3Fyr is right i'm using heroku to host the demo so i'm uploading it as a php file. But you can use html if you want.
I use [NodeList.js](https://github.com/eorroe/NodeList.js) instead of jQuery. I'd think you'd love it, because I'm the same, don't use frameworks at least for frontend.
On a phone. Sorry for the formatting. What if you stored Date.now() in a variable on pageload. Then, when using date.now subsequently, calculate the seconds between that and the value you strored initially. Then add the seconds to the start time you sent from the server to get the real time.
[moment.js](http://momentjs.com/) could also come in handy. It has some nifty methods for calculating difference between times.
have you got any online demo ? ( yes I'm that lazy) Is it possible to use another language (for example french)?
Created the issue, thank you https://github.com/720kb/butler/issues/10 
Why does it matter if person A sees something before person B? You need to explain the other constraints of your application before a solution can be suggested.
If you arent familiar with powershell, and looking for a cmdline replacement for cmd.exe ... your wasting time by not just diving in... its a cmd line shell with its own integrated object oriented scripting language, that can natively compile and execute C# code in memory, tap into any object offered by the .net framework, has extremely impressive string manipulation / regex/ etc features built directly into the shell (not having to rely on third party utilities), is extensible (modules).... has native support for converting data structures between common formats (csv, json, html, xml, etc), oh yeah, has pipes, but they pipe objects from cmd to cmd, instead of just piping a stream of text you have to parse, and tab completion on just about everything you could ever fantasize over. I love using object oriented shell for cli instead of having to awk|grep|sed every command in order to be able to use its output. Once I learned powershell I went from being pretty much "the new guy" , to "the guy". It was the most productive thing I have ever done for myself, not just in regards to computers, but in life in general. Also, you have the powershell console which is just a cmdline interface, but then you also have the Integrated scripting environment, which is a free , extensible IDE specifically for writing and running powershell. I do most of my work from here because its an incredible experience fairly new to CLI / interactive shell execution. I highly recommend you upgrade powershell on your system to the latest version supported by your os and then start learning to use it, its a little different, but holy shit is it amazing, if you give it a chance.
same thread, same time (no queue) actually due to latency or dropped packets, even if he clicks save twice a few sec apart, the 2nd one might reach the server first :o
This one ^^ Have one source of truth, your server (more accurately: the time at which your server receives the event). Calculate the offset and present the user with timestamps relative to their locale. Drop Date.now() from clients, the server/db tells you the order EDIT: If you happen to be using MongoDB, the document _ids can serve as timestamps if second granularity is acceptable (http://docs.mongodb.org/manual/reference/method/ObjectId.getTimestamp/)
thanks for your feedback but the log is actually happening in the examples controller, the directive can take a function to call when the type animation has complete. I'll update the demo to make this clearer
If of us mortals are forced to work on windows at work. No virtual machines is not an option as your entire development environment is supported only on windows.
eBay sorted this years ago using offsets and even show what the server time is to the user.
Unless you have geolocation then geo IP location is only accurate at a country level (and sometimes not even then). Doesn't help with countries with multiple time zones... In any case you'd have to know if you and they are using some daylight saving offset for the current date plus the minutes offset from GMT (it would be hours but Chavez and Jong Un have mucked that up a bit).
I think most devices now sync their clocks with a time server anyway. 
The Mostly Adequate Guide is an incredible resource -- you probably won't see explanations and examples for deep functional concepts, demonstrated in JavaScript, anywhere else. However, "functional programming" encompasses more than just purely functional data manipulation. In languages where mutability is widely accepted and used (JS), you can still do "functional" programming without diving into monads. In my own work, I feel like the (largely overblown) functional-vs-object-oriented debate comes down to: "What would you prefer to be your underlying abstraction?" Objects (in JS and similar languages) are fickle. You pass them around and they may change unexpectedly. Functions on the other hand are immutable. If you define a function and pass it around, nothing can change what it does. The receiver could ignore it, wrap it in some crazy stuff to alter its arguments (or return value) or do all manner of other things **before passing data to YOUR function**. However, your function will always act the way you designed it. EDIT: That said, there are many times when "classical" OO is the correct choice in JS. In particular, if you are designing a library, many feel more comfortable instantiating an instance than composing functions.
The first example is to stop using for-loops because they're not as understandable as _.times(n, callback). This doesn't seem clearer at all to me, but even the article says something like, "but don't do this for too many loop iterations, it's too slow--use a regular for-loop, instead." So, don't stop using for-loops all the time, just use another way sometimes. -1
i dont think it works like that, the script tag just loads the src into the javascript engine, so even if you change the src the old one is still going... which means its just as easy to put them all on one page and do `if(current == 1) { /* do first example stuff */ } else if (current == 2) { /* do second example */ }`. however if u still wanna try you can use ajax to fetch the js and `eval()` it. i highly suspect the code from script1 will still be running tho. best bet is to load all the js on one page and disable the animation somehow, maybe stack all canvas on top of eachother inside a parent div and start n stop each one as the user clicks your button.
Im reading through the you don't know JS series and it's fantastic. It covers the good parts of JavaScript a bit but also covers the bad parts and explains why they should be avoided which I find really helpful
Personally, I find the official docs a poor introduction but a decent reference once you understand the basics. Try this instead (no offense): [ReactJS for Stupid People](http://blog.andrewray.me/reactjs-for-stupid-people/)
Typically, when a record is sent to the server then the server will assign a time stamp. If the security of the time stamps is not important then you could send the current time to the client on page load and compare it to he clients time to get a difference. Then use that difference whenever generating actual time on he client. 
I hate timezones. Hell, even all the different date formats should you choose to display it in the client's local format. 
Oh cool looking forward to it - the Douglas Crockford videos on Youtube are great as well for that type of material.
You clearly didn't even read the post because you think you're like a genius for noting that it looks like lisp when that was like the third sentence. You're a one trick pony - you don't even know what clojure is. How is it noisy? I don't have to read close tags with this version. I think you're just jealous that I'm more creative than you. You would have never thought of something like this. You also keep plugging mustache even though there's like a thousand template libraries out there. Like you clearly have no idea what you're talking about; you're just repeating some bullshit that was spoonfed to you. And oh no! Someone was mean to you on reddit. I'm not your self esteem engine dude. You're not my boss so I have no obligation to kiss your ass over your shitty ideas. Welcome to the real world kiddo. It's pretty pathetic that you keep downvoting everyone's comments just because they're smarter than you. Your mind is so tiny that you can't even imagine how this would be useful. Code as data dipshit. This also isn't bug ridden or slow. Retard.
Wow 4 handlebars links. You really did your research there didn't you? You must be a really smart person.
Looks nice, a few questions if you don't mind. Is there a limit to the length of the string you can pass? Could you pass a string that's 1000 characters long? Does it handle \n characters fine?
This does not help if setting the clock gives you an advantage that you should not have, hence my question.
I'll have to look into it. Thanks for the info :)
big +1 for this book.
I meant it in the sense that redux takes all of the messy complexity of traditional flux implementations (with syncing between multiple stores with waitFor, a seperate dispatcher instance for coordination, etc etc) and boils it down to reducing over actions. In the same way maxwells equations captured the messiness of all forms of electromagnetic phenomena in a few compact and elegant equations. (Also wasn't referring to EM flux, but flux, the data flow architecture)
Exactly, one thing you *can* rely on the client for is time zone.
what if you convert user input to utc
How can you be so sure?
give it a try and find out.
i found out, it does overwrite it. ok good stuff
If you're trying to control a YouTube video programmatically, you need to use the YouTube API, [which is documented here](https://developers.google.com/youtube/iframe_api_reference#Getting_Started). Your markup won't be quite the way you have it, as you can see in the link, but playing and pausing the video is trivial once you've got it set up.
Well, if you have to include there's not much harm I guess. Looking at your site though, I don't really feel like you need much from bootstrap besides maybe the grid and the buttons css. 
If you're already using lodash, zipObject does exactly what you want
Accessing the date header can be an denied with CORs and cross-domain requests, unless the server allows that header. In which case you need to send a response which contains the information.
Answer would require case by case. Unless your question is specifically about VND, then the answer would be because IANA said so. VND for vendor specific, X- for experimental, and PRS for personal/vanity. 
Use the server timezone. When you receive a request, determine whether an event is live using the server time and just return a Boolean flag, is_live, for example with each event. The user's timezone should not matter.
Having a *full viewport* autoplaying video on your landing page isn't going to impress your visitors. YouTube can get away with autoplay because you're expecting to watch a video when you click a link. Using the XHTML doctype is not necessary either FWIW.
[You think you hate them now?](https://www.youtube.com/watch?v=-5wpm-gesOY) *hint: You might want to grab a drink first*
Most of time yes, but shit still happens and date/time gets messed up. Few weeks ago time messed on my pc and I noticed while trying to use skype and noticing that all messages I m sending are being shown in history as if they were sent yesterfay 
Try looking here: http://tf.nist.gov/tf-cgi/servers.cgi
Both unix time and JS time numbers are *per definition* UTC *for exactly this reason*. See my comment above.
There are areas where there are two timezones in the same location.
 var date = new Date(); var h = date.getHours(); console.log(h); This gives me 1 - which is correct because im in GMT+2 So if you send that to the server, you will have a problem if the server thinks its UTC. And yes, you will need to use ```getUTCHours()``` when you send a date
This is what I meant a few days back when I said you should do a little research before spamming the programming subs with little questions. You said it's easier for you to ask a question and keep programming while other people find the answers for you: &gt;no problem, and yes I do realize that my questions are either super basic, or quite specific and complex. It's mainly because id rather shoot off a question and continue coding then check up on it later. But part of programming is learning to figure out how to answer your own questions. And it's sort of presumptuous to think that your time programming is more valuable than a whole sub's (or many subs') energy in trying to answer this type of question. 
You can't. But if their system isn't set to the correct timezone, that's still fine - as long as the behaviour of your app is consistent with 90% of other apps.
Insanely cool, did you consider using something like React.js instead of jQuery?
Yeah I know I will stop posting these types of questions. I guess i have been just trying to do a lot in a short period of time, I have been coding 13 hours a day every day for the past 3 weeks to get my portfolio projects ready. Honestly this javascript subreddit is by far the best and I feel bad polluting it with dumb questions. 
Interesting project. This would probably get more attention reposted to webdev/node/angular sub-reddits.
I also see a blank white page and I'm on iOS safari.
It also works in Firefox, as FF supports the new [MediaDevices.getUserMedia](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Browser_compatibility) as well as the legacy [Navigator.getUserMedia](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia) (for accessing the mic). Safari doesn't support them so it's not going to work there. You should wrap that in a try catch so the page can fail gracefully.
If an ancestor is absolutely or relatively positioned, absolute positioning is relative to that box. Absolute positioning is always relative to the closest absolutely or relatively positioned box. http://jsfiddle.net/hnvnt19L/
Date.now() is inherently a bad way to determine the current time as a multitude of errors could occur. The most obvious of which is the time being set wrong. The key thing to see here aswell is that timezones play a big part in time calculations as well and if a users Time Zone is set incorrectly, everything breaks. For the situation you are describing you should not rely on client side time AT ALL. Rather constantly request from the server a list of `live` and `not yet live` events. Possibly using continuous `AJAX` requests or the use of `WebSockets`. If that would introduce too much load onto the server you could instead send a list of deltas (seconds until the event goes live) and count time difference with javascript. This way the client would receive "40 seconds till live time" and then wait 40 seconds. For me I have one rule when making web applications / tools **Rule #1: Never trust the client**
Thanks. I believe it's still the same. This part is still the data just repetitions are removed.
Sorry, reference to Ada Augusta Lovelace. I didnt want to say you were doing the Lord's work so I tried to make a joke....which did not work =)
Looks good. Does it parse in one go or can it do streaming parsing? E.g. parsing 40kb of JSON can cause delays of 20ms, so I'm trying to break up parsing into chunks.
hmm at the moment it uses regular `JSON.parse`. Streaming kind of make sense but It might be overkill for this library. What I can do however is to expose the reference resolver function and you would stream and parse your JSON string on your own way, then apply the referenceResolver on top of parsed object. This is what JSONPlus essentially does.
What's a fixture file? Google didn't really provide much information.
I was somewhat downtrodden about teh massive downvoting but I'm glad I've managed to help one person on here better understand functional programming in javascript. My next blog post will demonstrate how to use observables to create mutation free code in stateful systems which has been traditionally been the bread and butter of Object oriented programming. PS: thanks for pointing out the error, I've corrected in on the site.
there you go http://programmers.stackexchange.com/questions/211959/what-are-the-different-meanings-of-fixture
If I understand it correctly, it makes a copy of the referenced value, right? So the _goal_ in this is... Smaller size for transport? Avoiding repetition in hand-written JSON? (Just asking; I don't mean to imply anything negative)
Hi here is a little one right now http://720kb.github.io/butler/
TBH I think self-referencing can be very useful in other areas not just fixtures.
Hmm, I see. Thanks for the clarification.
I think the first assumption that you need to challenge is that [DRY](http://code.tutsplus.com/tutorials/3-key-software-principles-you-must-understand--net-25161) and Modular are mutely exclusive. The second you need to examine is that "Modular" really should be [SOLID](http://www.infoq.com/news/2014/01/solid-principles-javascript) design principals. All my enterprise projects combine these two principals everyday. If these two ideals are implemented correctly you will minimize a lot of the issues you are having 
DRY is the reason to be modular :) You don't want to repeat yourself, so break things out into reusable modules.
&gt; you should never rely on clients for anything Literally laughing out loud right now. In a perfect world maybe. In the real world, you're relying on clients to perfectly implement every aspect of literally thousands of pages of specs spread over hundreds of documents, to leave a plethora of native values at their defaults, to have 100% reliable hardware, and the list goes on and on and on and on and on. Maybe time-keeping is best delegated to the server in this instance, but not relying on clients for "anything" is utter fantasy.
Yeah, I guessed that was the case - but you should probably point that out to people. Also I have no idea how to allow a website microphone access. 
The reason why Underscore implements its own bind function is because IE8 and older don't support native bind, so in some cases it still makes sense to use the Underscore function instead of native bind.
Yeah as I said above he needs to wrap it in a try catch and handle the error so it's not just a blank page if the user disallows mic access. The first time you load the page you should see a box in the upper left asking you if you want to allow it. If you click no, you should see an icon on the right side of the address bar on subsequent page loads that you can click to open a dialog that will let you allow access or continue blocking it.
Would love to see a working demo.
The value of JSON is its simplicity and universality. If you want self references or variables or logic for a fixture file or something else then there is already a universal standard superset of JSON. It's called JavaScript. 
There's usually a whole lot more going on than what you see in the front end. You copy pasted a websites front end , but you didn't copy any of the server side code used to make a connection to the server to start broadcasting. 
Abstract from http://www.w3.org/TR/webdriver/ &gt; "This specification defines the WebDriver API, a platform and language-neutral interface and associated wire protocol that allows programs or scripts to introspect into, and control the behaviour of, a web browser. The WebDriver API is primarily intended to allow developers to write tests that automate a browser from a separate controlling process, but may also be implemented in such a way as to allow in-browser scripts to control a — possibly separate — browser." We are using the Selenium Webdriver to make e2e testing. Glad to see that now we have an standart.
Just out of curiosity, does this send data of the site you're on back to your servers? Not really concerned you're going to do anything bad with that data its just not something I'd want to be sending especially when on bank statements and searching for something on there (which is pretty common for me to do). Edit: Also not sure if its intentional but on a mac its cmd + F for browser search and not CTRL + F.
I always love hearing Jafar Husain speak, he really enabled me to wrap my head around async primitives back when I was still doing `$.get` requests. This video is another great intro to the es2015/2016 scene and I'm very excited to see where we're going to go from here.
Hi, So I took a quick look at the code on the github and outside of some normal beginner JS issues, you're on the right track. your biggest issue is the `GameLoop`, which you're using a `setTimeout()` for, which is not the best way to go about this. You should take a look at `requestAnimationFrame`: http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/ I could talk about why `requestAnimationFrame` is great, but I think Paul Irish does a great job in that link, so check that out. also, this tutorial/demo was pretty boss: https://vimeo.com/105955605 Good luck on the learning!
Check out this 1 minute video: https://www.youtube.com/watch?v=x05KubVlh_M
OK, I'm starting to understand your problem now, but it has nothing to do with relative paths and everything to do with your nginx conf file IMO. Correct me if my understanding of the problem is wrong, but here's some things you can try: 1. rewrite everything after the root to your index.html, which is what you are doing already, and match everything that has an extension to the actual file. E.g., "/component" and "/component/item" both route to index.html, but "/config.json" routes to the actual file config.json 2. have distinct routes for your app and assets, that is, rewrite everything after "/app" (or a different prefix you'd like to use) to your index.html, and rewrite everything after "/assets" to the actual static files like images and config files. Hope that helps.
Frankly, I'd rather see people contribute back to the d3 sub projects rather than try to one off sell a chart... For instance, I think you can do this same chart with [Plottable.js](http://plottablejs.org/examples/finance/).
The concept isn't any different, it's just that the hash function (and the implementation of the hash table) is already written for you. And the hash function that was chosen has been tested and reviewed by experts so that it's a good hash function that produces as few collisions as possible (which is not the case of summing each byte.) 
oh yeah, i wasn't saying I would use the ascii sum method, I was just wondering how they accomplish this feature in the JS engine
&gt; I'm sure people said the same thing about REST. Absoutely, and people will say the same thing about GraphQL 5 years down the road if it ever become successful. See thanks to me you may not have to witness that /s
Take a read if you like, three of the big four are open source!
We will add a demo to the repository in the next days.
The walking and standing animation for my character tends to draw way too fast. Should I add a delay for each frame?
~~I would listen to spizzike and use requestanimationFrame instead of setTimeout or setInterval.~~ For walking, I would definitely recommend looping between the sprites with a delay. I used an arbitrary 100ms in past projects so that it doesn't look too speedy, but, 100ms was a very arbitrary choice.
i forget how thats done for games. good question. off the top of my head if you switch to requestanimationframe, it passes a measurement of how long its elapsed since last draw, so you can easily time your animation off that. https://remysharp.com/2015/07/13/optimising-a-canvas-animation this guy kind of does that with 35msec mininum time for redraw, that might put you most of the way there. someone on here knows how (if not try r/gamedev/! cool subreddit)
OK after digging around in this, I came to the realization that a template/reference library of sorts could be loaded and applied against multiple json files and it's something that needs to happen for me. If I'm creating game asset value containers lets say a couple hundred, similar but different this would be a, pardon the pun, game changer. Thank you op!
I think you mean `if(!refusedPlay)` on that last line.
Web assembly looks like future in front end web development, if it comes into his role. its not gonna take more than 2 years to vanish the JavaScript language.
&gt; In cases where the framerate remained consistent (frames weren't dropped), this worked really well Heh. It actually doesn't because rAF does not necessarily aim for 60 FPS. If your monitor's refresh rate is 120 or even 144 Hz, rAF is supposed to aim for that. Chrome does that while Firefox doesn't do that yet ([#707884](https://bugzilla.mozilla.org/show_bug.cgi?id=707884)).
If you have four animation cells you want to loop through and you want each one to last 250 frames/redraws you could keep a counter on the object that counts from 0 to 999 then loops back to 0. You calculate the current cell using Math.floor(counter/250), for example: setTimeout(function() { me.counter++; if (me.counter &gt;= 1000) me.counter = 0; me.cell = Math.floor(me.counter/250); me.draw(me.cells[me.cell], me.x, me.y); }, 1000/60); This should give you 60fps overall, and the animation at 4fps. It's not the best method, but simple enough to not have to worry about massive amounts of optimization.
Half of the stuff is DOM or browser related, and is irrelevant due to abstraction libraries. Another sizable portion is either an easily avoidable part of the language (constructor functions, this being weird in random to them, and their complication of the inheritance system) or a flat-out good feature that is just misunderstood. Automatic type conversion between is avoidable by overriding the `.toString` and `.valueOf` prototype methods of `Number` and `String` respectfully (and possibly `Object` and `Array`). `var` using function scope is unintuitive, maybe, but very fast for interpreters. &gt; JavaScript puts the world into a neat prototype hierarchy with Object at the top. In reality values do not fit into a neat hierarchy. That's just totally false. &gt; You can't inherit from Array or other builtin objects. Also completely false. &gt; In JavaScript, prototype-based inheritance sucks: functions set in the prototype cannot access arguments and local variables in the constructor, which means that those "public methods" cannot access "private fields". There is little or no reason for a function to be a method if it can't access private fields. It appears this person knows nothing about inheritance in JavaScript, factories, or closures. &gt; JavaScript inherits many bad features from C, including switch fallthrough, and the position sensitive ++ and -- operators. All optional features (function hashes, +=1, -=1). 
&gt; // 2. Using Array's join and split methods &gt; Array.apply(null, Array(5)).forEach(function(){ &gt; // ... &gt; }); &gt; [...] By using array's join and split methods, we can achieve the N loop without creating an additional variable. Huh? There's nothing about join or split there. &gt; var this = this; What is proofreading?
thanks
Hardly. REST/HATEOS is not CRUD. Yes, JS is very important but, no, the backend is not a glorified SQL API
Small on-topic plug for my library [bluebird-co](https://github.com/novacrazy/bluebird-co) which is written partially in ES6, and is much better than tj/co IMHO. Just look at the benchmarks and supported yieldable types. Heh. Also, I recently helped rewrite [toposort-class](https://github.com/gustavohenke/toposort) in ES6, which does take advantage of more ES6 features like classes, for..of loops, arrow function(s), etc. I've optimized the hell out of it, though, so it's probably not the most readable to people unfamiliar with the algorithm. Another project I've written in ES6/ES7 is [Scriptor](https://github.com/novacrazy/scriptor), which takes advantage of quite a few ES6/ES7 features throughout.
Circular data structures are usually bad news. There is potentially a need for such a system though. I'd recommend using something more like this to represent an internal reference. His current solution is dangerous. The double mustache format is already used extensively in templating languages which you might want to represent in JSON. {"$ref":"/json/path/string"} 
usually yes but you still need them sometimes. how else are you going to represent a cyclic graph?
The complications of JS and stacking JS will be replaced. I'm not sure if web assembly is the way, but some (maybe memory managed) language designed for DOM manipulation, will appear. You have to remember this is /r/javascript where anyone not saying JS is comparatively good over another choice, is wrong.
So saying Vanilla JavaScript - say Vanilla DOM instead.
https://en.wikipedia.org/wiki/Perfect_hash_function
Your assumptions are completely wrong because you have failed to account for what's around the corner... *web assembly*. Web assembly is a language that is not available yet, but will attempt to be as similar to vanilla JavaScript as possible except that it will not allow loose typing and will require a static compilation mechanism to binary. This will be a game changer for a couple of reasons: * Binary is faster to execute and smaller to transfer than JavaScript. * Binary does not require or care for modularity. Native modularity was only recently defined for JS and is not supported anywhere yet. To get around this you have to use some bloated framework and force your code through some kind of a build process. Build processes never at benefit to developer productivity. * It is a safe presumption that DOM manipulation will become less of a bottleneck. The bottleneck will likely still exist, but so long as a binary format is communicating through to an in-memory representation of the DOM directly this bottleneck will be a low level problem. * Most UI developers cannot be bothered to learn or understand the DOM without some kind of abstraction. This is slow and bulky. It is always easier to introduce new technology to account for this problem instead of requiring competence in the workforce. * Since a binary format will execute faster and likely achieve superior memory performance you can do more on a distant end to analyze and crunch data even as additional data is still being transferred.
As someone who hasn't done any async stuff, is there a simple way to apply a function on each item in an array asynchronously and be signaled when it's all done? Without webworkers. Es2015/16 way? Even something as an example multiplying the value by itself, I know many ways to do it with blocking, but not async. Any help would be great, but more than "look at promises" would be much more helpful.
[Here's another good video that goes over the stack and heap](https://www.youtube.com/watch?v=HQ3YI70PDe0&amp;index=9&amp;list=PL4BBB74C7D2A1049C). It's a lecture taken from a Computer Science course at UC Berkeley. Don't let that scare you though, it's fairly straight forward. If you want a better understanding of how the stack and heap work then it's worth checking out. The lecture covers the stack and heap from Java but JavaScript is the exact same.
Hey I am extremely excited then! But I guess my point was more about the front end being more complex and and taking a larger role than in the past, what's your thoughts on that? Also when will web assembly be ready and can I start playing around with early builds yet?
Check this out https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
wait how can a C array even if it's all the same data type not change in size or worry about size, What I seem to remember is for C you need to allocate the number of or spots in advance, or is it like calling a new c++ class that has a predefined array and if it gets filled then just creates a new C++ function with a new set or something? 
If that is the case, then there's something wrong with your application architecture. If you trust the client to see and call your code, then you must trust them to not modify it (if they want to overwrite ANY variable you create, they can). If you do not trust them, then make them give their code to your function and execute it inside your closure where you control everything. If you have any more details you can give, then I may be able to offer some architecture advice.
All code running in Node has total read-write access to all values in the execution environment. Sounds like you'll have to apply the sandbox at a higher level: create an environment such that you could safely run *any* user-provided Javascript, and think of your framework simply as helper functions that the user can use or ignore as they see fit. These helpers can't contain any privileged code; instead, they must trigger interactions with external services that contain the privileged code.
I'm making a game where you program robots using JS and the server runs your code (it needs to stay on the server side to make sure the user isn't cheating). There are two ways I can accomplish this: write a custom interpreter (which is a lot more work) or find a way to make the classes immutable. I understand what you mean by the architecture thing, but it doesn't very well apply in this instance.
@whoever downvoted, No need to downvote for not understanding. We have all been there before we learned. There's a short answer and a long answer. The short answer is that you are `eval`ing untrusted code, so all bets are off. The long answer is that sandboxing isn't easy. You need to convert the incoming code into your own AST (consider [Esprima](http://esprima.org/) and [Escodegen](https://github.com/estools/escodegen)). Once you do this, you must manually specify which types of code trees you consider safe enough to trust (a trusted subset of the JS language) and only calling the functions you consider safe. At this point, you can convert this back into JS (you must verify that the conversion uses only approved methods) and then eval this code. Overall, I would say that you need to keep the user code in the browser where the sandboxing is already being done by FF, Chrome, etc. If they need to use your functions and you can't put these in the browser for some reason, have them send the raw data to you and then return the results. It's slower, but much safer and easier to implement.
note that `Object.freeze()` does a shallow freeze on what the variable *points* to, but doesn't keep the variable from being re-assigned.
I would like to point out that I'm not a total noob in terms of Javascript, it's actually my job; but I digress. The only reason I need to keep the code running on the server is because I need to make absolute sure that any code that's being run isn't cheating. The sandbox isn't to protect me, it's to prevent cheating. I'm not sure I'll get much more help unless I fully explain my idea which I'm not really wanting to do at this point. 
If you need to prevent cheating, then the client running code on your server isn't the answer (and in fact makes many other kinds of even worse cheats possible). You need each client to send data (not code) to your server, diff the data against the previous data to look for illegal operations (moving too fast, to the wrong area, finding the target too easily, etc), and then apply the data to your global model calculations before sending your global calculations to all your clients (websockets are the best system for this I would presume). EDIT: as far as protecting you, when you eval code in node, it runs with your user permissions. It's very easy for that code to crawl your filesystem, steal your login to your db, or start shipping malware to other user. I'm sure both you and your users don't want this kind of danger to exist, but it is very likely if you are evaling untrusted code without a proven sandbox (a very difficult task indeed).
&gt; It gets really difficult to maintain page-specific JS as your application grows. I'm guessing this isn't a SPA? It's part SPA. It's an application that incorporates an instant messenger using Faye and Private Pub with Ruby on Rails. The instant messaging system is getting pretty built up because I have to handle stuff coming in from private pub and stuff loading from the database which synchronize (there's also an instant notifications system for when other users submit friend requests) and I also have to set up all these jQuery bells and whistles for finding friends and sending a new message sort of like Facebook. &gt; Some advice would be to not go overboard with DRY principles because you often encounter situations where you need to fork some functionality you've extracted out to make a more specialised version, but that feels like it goes against your work to abstract things out, so you patch the function with more arguments (often a boolean flag) and that just gets horrible and messy. Maybe try to abstract functionality out only when you need to or it makes solid sense. That's what I was going to do but I just thought I'd check up to see what other developers think before I make my decision. I don't want to go too far off-road and want to make sure that what I'm doing isn't ridiculous. Thanks for your advice. 
Awesome! I'll check that out. I appreciate the help.
The eval is happening in a new vm context, AFAIK, it's safe from these sorts of attacks, so long as I keep it that way.
I did take a look at that and it only partially solves my problem. The biggest problem being protecting my classes from being overridden/modified.
With this in mind, I suppose I could do what you mentioned above, although I really would love to see something that I'm trying to implement someday.
Seems like aside from Relay/GraphQL, this is *the* standard. And that's not to say that Relay is a replacement - I can see redux as a better fit over relay for some use cases 
&gt; little one You're welcome, please let know here or on github about your tries and needs if you can, thank you too!
Thank you, but no :/
That could mean that it's piping a websocket feed in to the video element. Blob stands for "Binary Large Object". If you are new to programming, this is probably not the best thing to start with. :)
Thanks, that's actually the reason I built this. I'm planning to add multi file referencing feature soon. it will probably look like this { // external references "@ext": { "addresses": "/path/to/file.json", "emails": "/path/to/file2.json" }, // JSON Value "first": "John", "last": "Doe", "address: "@ext.adddresses.users[1].address", "email": "@ext.emails.users[2].email" } 
Yes, most of them are done in either C or C++. There are some exceptions like Rhino and Nashorn in Java, and some [odd ones](https://mxr.mozilla.org/mozilla/source/js2/semantics/), like a couple of them done [in JS](https://github.com/mozilla/narcissus/) [itself](https://github.com/NeilFraser/JS-Interpreter) or one [in D](https://github.com/higgsjs/Higgs).
I think I am discovering that?! I kind of knew I was diving in at the deep end. Probably just trying to get ahead of myself in my enthusiasm.
[This is the correct search](https://www.google.com/trends/explore#q=angular%20js%2C%20backbone.js%2C%20react.js%2C%20ember.js%2C%20knockout.js&amp;date=1%2F2011%2056m&amp;cmpt=q&amp;tz=Etc%2FGMT-1) (wrong Angular keyword in original link) This example shows how easily you can manipulate data to suit your needs.
You can address some of these issues by using HTTP 2.
Are you targeting a browser environment or a server environment like node?
XML uses the same DOM as HTML. Therefore you interact with XML from JavaScript using DOM methods. Here is an example of using the DOM: (function () { "use strict"; var Address = document.getElementsByTagName("Address"), column = [], a = 0, len = Address.length; for (a = 0; a &lt; len; a += 1) { if (Address[a].getAttribute("column") !== null) { column.push(Address[a].getAttribute("column")); } } console.log(column); }()); You can run JavaScript in your XML document in a browser like so, but be sure the script tag immediately precedes the closing root tag of your document: http://stackoverflow.com/questions/384639/how-to-include-javascript-in-xml-document You can change the value of the column attribute with the `setAttribute("column", "my new value")` method used similar to the `getAttribute` method in the code example.
Yeesh, your architecture is deeply flawed (this fact has been repeatedly pointed out to you by people more patient than me) but you stubbornly refuse to start rethinking it with their excellent suggestions. I'd not enjoy having you on any of my teams.
You could try using jQuery. https://api.jquery.com/jQuery.parseXML/ var doc = $.parseXML('&lt;DB&gt;...&lt;/DB') $(doc).find('Address').each(function(index, row) { $(row).attr('column') // returns 'Maintelephone1', etc }
Try running these tests https://github.com/promises-aplus/promises-tests
Or you could just read the jQuery docs. They're pretty good. 
It's not a promise library, check the document, it has its own usecase.
jbrantly, I just tried this; couldn't get that far with it. Would love to see your sample code.
This mpj guy seems to be you.
Anyone recommend waiting till 1.0 is released before playing around with it? Seems like there's going to be a lot of breaking changes. How close is the release candidate to the final version?
Hmm, so what are the rules for calling parameterless functions in Javascript? I've called functions in other projects without using any parenthesis and it's worked fine...
TL;DR?
&gt; red = randomColour; That assigns the function to that variable. You forgot the "()" at the end. &gt; Math.floor((Math.random() * 255) + 1) That should be: Math.floor(Math.random() * 256) That produces a value from 0-255. &gt; colour For the sake of consistency, please use the AE spelling. &gt; $(".content").css({"background-color": bg_colour}); &gt; document.getElementById("colourcode").innerHTML = bg_colour; Use either the DOM stuff or jQuery. Second line with jQuery: $("#colourcode").html(bg_colour);
They're adding an option to sacrifice speed for memory when needed. Doesn't seem like a big thing really. 
&gt; most of the changes are seemingly unnecessary too Yeah, I still don't see the value in removing controllers. It's a lot of work to transition old code for no benefit. They also deprecated views too early (before routable components were implemented), making some stuff simply not possible during the transition without having a ton of deprecation all over the place. ember-cli is also less than perfect, which is pretty harsh considering that they intentionally killed all alternatives, and it requires a very specific way of referencing other classes. When moving an old project to ember-cli, you could just rewrite everything, because that's less work. I applaud the amount of energy invested into developing ember, but I don't feel that it's actually improving, it's just mutating all of the time.
It's also relevant for environments which don't allow JIT like iOS.
Oh, thanks for all the random tips. What's wrong with how I changed the CSS though? It works, so I'm assuming it's moreso an efficiency/resources thing? Edit: Never mind, misread what you were saying. My bad :)
Are there any error messages appearing in the console?
Yea, JavaScript got first-class functions. This means you can assign them to variables and pass them to functions like any other value. In that line above, you aren't calling "setColour", you're passing it to "addEventListener".
Yes, some like this: `Failed to load resource: the server responded with a status of 401 (Unauthorized)`
I like the idea of integrating some lodash/underscore functions into the function.prototype but only if they're nonenumerable and nonwriteable, your debounce is a good example, but I think this'll be sorted out with decorators in the future anyway.
it can also be a security hazard
There isn't really any more example code than what I posted. It assumes you have jQuery available though.
Looks fine to me. Are you still seeing an issue?
I was thinking the exact opposite while watching this section about [pdb/pudb](https://www.youtube.com/watch?v=EwI-e3WlTew&amp;t=18m45s). In chrome dev tools (and probably for the other browser's built-in debuggers) when you've reached a break point you can hit the escape key and the console would open up, which is kind of a REPL? You can also select an expression and evaluate it with ctrl+shift+e.
I think it's a big thing. Chrome can be an absolute whore when it comes to memory and battery and for most pages it's simply not necessary.
As someone who's used V8 in a variety of embedded systems, this is potentially a big win. It's not clear what relationship this google doc has with the V8 and Chromium projects, though. Is this something that the V8 team is actively working on? 
Hmm let's see, compile javascript to byte code. Interpret said byte code. Instrument said intepreted execution Optionally compile said byte code to machine code. This smells oddly like the JVM. Thankfully no need for multiple threads, or fancy stuff like a memory model.
Use factories instead of constructors at least.
I was just making use of [xml-object-stream-sax](https://www.npmjs.com/package/xml-object-stream-sax) to do that kind of thing.
These are all pretty bad. I rarely, if ever, append "js" to any queries.
Heh. If you don't like Java for those reasons, don't read up on WASM.
What stops them overwriting/augmenting natives (Object etc.)?
My sarcasm, needs a dash of hot sauce I'm afraid. 
Link to [NodeListJS](https://github.com/eorroe/NodeList.js)
Well, constructors also can't be used with apply and call unless there is already an instance, and they simply don't belong in the language at all. Look here: “JavaScript inheritance patterns” @P1taJ https://medium.com/@PitaJ/javascript-inheritance-patterns-179d8f6c143c I prefer using Object.create and an explicitly defined prototype object within a factory. Methods 3 and 4 follow the language more closely and don't hide the prototypal inheritance structure. `new` is evil. Constructors and `new` are only in the language to make Java developers feel comfortable in the language. They are bad in Java, and worse in JavaScript.
`node-inspector` is the best there currently is, but it still runs in the browser. Looking for a CLI based REPL debugger.
More at /r/programming: https://www.reddit.com/r/programming/comments/3gdvyv/emberjs_another_year_of_churn_instability_and/
Why? What difference does it really make? Everything a terminal based debugger can do, chrome dev tools can do too. You can detach it from the browser in its own window if you want. On top of this you have visual breakpoints, variable watchers, etc, which wouldn't be easily achieved in the terminal. Technically speaking, it is a CLI, since it has an input box where you type commands. I don't even care about what you use, it just sounds like you're some kind of hipster who only wants to use the terminal, which is objectively worse in many scenarios.
Day full of adventures. Here is what I was up to: * https://github.com/gajus/redux-immutable Tested and working. * https://github.com/gajus/canonical-reducer-composition Spec. * https://github.com/gajus/canonical Spec validator.
It is not. It might be in the future though. See the comment regarding that at the bottom of the doc.
Since the API is stable and any bugs found in the RC will presumably be addressed by 1.0, why not?
ELI5 the difference between an interpreter and a JIT compiler?
Definitely dig into the RC. All new documentation is written with v1 in mind and I am not sure how much is backwards compatible. I believe it's pretty stable.
The linked article says that JIT code amounts to 15-20% of the total JavaScript heap. Presumably that's in Chromium, with a "typical" web page. So the memory savings are probably noticeable, but not revolutionary. It might be the case that the (presumable) reduction in latency for initialization code would actually be a bigger win for slow/small systems than the reduction in memory. I'm not sure whether Node.js (which is where I mostly used V8) is going to have a greater or lesser percentage of JIT code vs other JS heap compared to Chromium. But yes - it is a *huge* library. 
You may be interested in this: https://github.com/metabench/jsgui
Strongly disagree - there is some theory that gets taught in CS classes that's useful. Some paid, or useful open-source tasks are very theoretical too. It's not exclusively CS grads who would have that area of knowledge - but some of the people with practical commercial experience are totally lost when things become more abstract or theoretical, and won't find their way in those areas because they view them as too abstract or theoretical. I could really do with someone to write trie data structures efficiently which I could then integrate into the indexing system of the jsgui library, which would enable full text search. In fact, I could do with someone who's interested in programming and testing the library generally.
I know very little about javascript but the jQuery sample looks preferable to me. What's the benefit of the other? (I'm presuming that you are advocating for the NodeListJS version)
Is it possible to inspect a DOM element from developer tools and find out what javascript event is being called on it? I'm working with a legacy jquery project at the moment, and there is just a mess of event handlers. Ideally i would love to be able to inspect a DOM element and see where in the javascript code the event was being bound.
The interesting thing here is that all javascript used to be done by interpreters. But over time we wanted faster javascript so we replaced those with JITs. To see us go a few step backwards for memory is amusing the say the least.
As far back as the 1960s (when memory constraints were more severe) it was commonplace to compile some parts of a large program to a compact code and execute those parts in an interpreter. It was often called p-code. Microsoft's C++ compiler generated their own flavour of p-code in the 16-bit era, and less performance-critical parts of Office were built using it. So it's not exactly a step backwards - just a recycling of a very old idea.
I hope this is at right level of abstraction, feel free to ask if it's unclear: An interpreter goes through "something" and executes code based on it. Common somethings are byte code, abstract syntax trees, and source code. A compiler goes through "something" and generates machine code from it, which is then executed. A JIT compiler does this just before the thing is executed, as opposed to a classic compiler, which does this in a separate pass before code distribution. There is to some degree a continuum between all these things; they're labels we place on code that does things, but that code don't have to be structured so it only uses one of these techniques.
I stopped using them. A lot of the benefits of CDNs are gone when people started concatenating their vendor libraries into one script.
No, it's not. You clearly don't understand my intentions. I wouldn't enjoy you being on my team either, you NEVER have anything decent to say to anyone here in /r/javascript.
I don't have to explain to you why I prefer the command line. I spend 98% of my time in the terminal. I want the debugger where my code is. Switching out to a browser is a hassle. I do it, because I love Node.js. But I also code in Python, and the debugging workflow with `pdb` is 10 times faster. If I have to touch a mouse when I'm developing, something's gone seriously wrong.
Of course you don't, you need to use those seconds saved not touching your mouse writing code faster! Because writing quality code certainly doesn't take order of magnitudes more time than moving your hand to your mouse. Get over yourself. Terminal isn't the end all be all of development. It's 2015, we have 4ghz processors, terminals were built in a world where memory was scarce and monitors didn't support colors. Visual IDEs and Visual Debuggers are more efficient and more capable. But use whatever works for you, I don't think there's much else to discuss. Rockstar away with your dynamic language code written in VIM or Emacs, with little or no static analysis, where debuggers are necessary to solve runtime exceptions because your work environment is so archaic.
Of course you should be using a CDN, just not a public one. Loading static assets from your application box is insanity. The performance benefits from offloading your statics to AWS cloudfront where they are propagated to the clients' nearest datacenter are *huge*.
&gt;My current role is “lead Ember.js engineer” It's 2006-2008 all over again, but instead of "Rails Programmer" its "[Ember|Angular|React] programmer."
You're barking up the wrong tree, mate. I'm more strongly tied to the terminal than a religious zealot to his god.
The developer edition of Firefox can do this. Haven't tried in chrome.
Everything that can be done with constructors and classes can be done without them using factories and Object.create. The function of a defined function should be detailed in documentation, not left to be inferred by syntax. `new` violates the open-closed principle. New is not the only bad thing about constructors. In a constructor function, this is automatically bound to the new Object. How does that make any sense? It is a completely inconsistent part of the language. If new were a function, it would be written this way: function new(clazz){ return clazz.bind(Object.create(clazz.prototype)); } // usage var db = new(DataBase)(8000, "username", "password"); See, even new is an unnecessary syntactic sugar which adds nothing to the language but inconsistency and confusion.
&gt; In a constructor function, this is automatically bound to the new Object. How does that make any sense? It is a completely inconsistent part of the language. This is how 'this' is used in pretty much every other language with the keyword. &gt; new violates the open-closed principle. Objects created with new can be extended with both prototypical and parasitic inheritance. I don't see what you're getting at here; saying an *operator* violates open/closed doesn't really seem to make much sense. You still haven't addressed how to handle private state with object.create, either. I mean, not being funny, but... do you actually write any production code in a commercial setting? Because it looks from your Medium bio that you do not, and I think that if that's the case, I think you should start using the language "in the wild" before you carve out your own personal subset. &gt;The function of a defined function should be detailed in documentation, not left to be inferred by syntax. I hope that this is a joke.
Sadly they addressed that this doesn't fix that: &gt; Explicit non-goals of the project (at least at this stage) are: &gt; * Support for platforms not allowed to JIT code (e.g., iOS) &gt; * * JIT code generation is still required or ICs and code stubs.
But how do you do something like that with browserify or requirejs? From all of my research it seems these tools don't allow building using libraries from a CDN. They have to be installed locally via NPM.
How? Modern build tools like Browserify/Gulp require locally installed libraries via NPM.
You don't need the dev version (at least any more). If you inspect an element you can see the "EV" tag on the code which will list the bound events.
Hmm, not sure I understand you. The company I work for concatenates everything together (we leverage [Gulp](https://www.npmjs.com/package/gulp) for this) we then tell the CDN to pick up this newly concatenated file. We then serve from the CDN. This is simplified. Feel free to ask questions.
Using uglify in the build process removes these though right?
I had to go to my work repo and dig up some old code to refresh my memory. I had to get autoplay to work in a SPA with iOS devices, and part of it was loading in the HTML for the video and having the autoplay work. There has to be a previous user interaction in order for my code to work. In the SPA's case, the user loads in the HTML for the video via JSON by pressing a button to navigate to the video. I posted some snippits of it in action. It looks absolutely silly. Yes, all it's doing is regurgitating the video on the page that was already there. http://jsbin.com/zuqonalere/edit?html,js,output That being said, I wish canvid existed before...
It's not really a build tooling thing, it's an ops-infrastructure thing. Your static assets live at site.whatever.com/static/ and you configure a CDN to serve everything under site.whatever.com/static/. On the first request the CDN doesn't have a file, fetches it from your boxes, and the rest of the requests go through CDN
Thank you so much! This is by far the most straight forward code I've seen. I'll have a play around and look up WebRTC. Thank you!
More discussion is helpful. Some of the things you mention are 'stuff', but more specifically directed towards getting this ready and a usable release. Thanks for your advice. The 'eac' function exists because of switching away from how jQuery did 'each', it's a temporary compromise. The controls collection has indeed been implemented within the control. Now your controls can contain controls, and its implemented using a collection.
Correct. I was talking about the first usage. We have modules that depend on jQuery, other libraries, etc. It appears to be the best practice now is to install those libraries via NPM which creates local copies to be minified in task runners/builders like Gulp.
It is a build tool thing if you need to send all your files in a single request. I'm not talking about the architecture of setting up your own CDN, that's easy enough. I'm talking about relying on third party CDN's in your web applications and to best include them. If you have a module that requires jQuery - how do you include it? From what I see, browserify/gulp does not pull from a CDN
I have no idea.
Can you find an example of browserify-shim loading a library from a CDN and concat/minifying into a single request? I cannot.
You can either install it via npm and bundle it with your project or you can specify it as an external dependency like so: http://stackoverflow.com/questions/23125338/how-do-i-use-browserify-with-external-dependencies If it's an external dependency, just add a script tag above your main bundle script tag with the url of the resource.
You seem a bit confused. A common workflow would be: 1. `npm install` a bunch of libraries 2. Write an app using those libraries 3. Use gulp/browserify/webapck/uglify/etc to turn the app into one large, minified file. 4. Upload it to a CDN 5. Serve to clients In my view the CDN step is more important—and more commonly used—that ever. And that was always the real role of a CDN anyhow. What we're *not* doing is just linking directly to a bunch of client libs on a CDN, mostly because in practice that's not really very helpful: 1. It causes browsers to make more requests, which is usually a bottleneck 2. The code needs to be downloaded *anyhow*, unless it's cached, and... 3. ...studies have found that users basically never had even very common libraries like jquery cached. So the tradeoff is basically 6 requests to 6 CDNs to download 6 different files, or 1 request to 1 CDN to download 1 large file. The latter actually is *better* in practice. But that's got nothing to do with CDNs being dead, and of *course* you should use one. Tools like browserify are how you make the file you put on the CDN, not a replacement for the CDN.
Yes you are talking about CREATING CDNs. I'm talking about USING CDNs. 
You can specify external libraries with webpack: http://webpack.github.io/docs/library-and-externals.html EDIT: I'm not sure what you mean by "pull from a CDN". You don't want browserify/gulp to use a CDN package, you want the NPM/bower package. The CDN asset should be included as a separate `&lt;script&gt;` tag.
Ok - that's closer in line to what I was talking about. So basically you have to load the libraries in script tags and let the build tool know that's how you are loading them.
That's kind of like asking how you'd make a pizza, but without the base? Like... 1. You can't? 2. Why would you want to? 3. What are you even trying to do? I mean, you could use bower or jspm or manually install libraries from github, I guess, but all of those are ways to install libraries locally, becuase we want to have them locally, because that lets us create bundles to serve to clients. I don't understand your question.
What if enterprise won't allow it? The architects (myself included) have doubt in its stability long term, etc.
How did you generate this?
No. I guess you could have gulp download it and concat it into your minified bundle. But that really defeats the purpose of using a CDN. You will get better performance by telling browserify that the library is global and letting the CDN do the hard work. The benefits of caching are better than making a single request.
Okay, **THAT** actually is a legit question. You left out all the important details before. :) Everyone has been talking about npm in the context of pulling in third party libraries to build an app; you're talking about using it to distribute your *own* libraries internally. That's a radically, radically different application. Yes, npm would work, and no, I don't have great confidence in it either. I can 100% understand your reluctance to embrace it. Hell, I'm working at a startup and *I'd* be cautious. I think the real answer though is a political one, not a technical one. You can't **force** developers to refrain from writing stupid hacks, monkey patching libraries, rewriting core lib functions, using the wrong version of stuff, etc. But you can fire (or demote, transfer, ding in their performance review, etc.) the first couple who do it, and the rest will stop. Having six versions of a core library in production is bad, but it's sounds like a management failure, not a nuget failure. How could something like that have possibly passed code review? But if you really do want a technical solution... ...write one? I dunno, a couple hours, some python, maybe a git pre-commit hook, maybe a script on your CI servers? Nothing you want is hard; just a script to download libraries from a hard coded URL, and maybe another script to check MD5 fingerprints during the build step to make sure the right versions are being used. Make an XML report during the build step that spits out the hash of every client library used, flag any unrecognized hashes for "core" libs? Come to that, why are developers even running browserify locally? Make your CI servers redownload core apps and re-run the tests on build? If you're relying on developers you don't trust to build an app using libraries they shouldn't modify, but you have no way of checking whether they've modified them before something gets shipped to production, I feel like you've got bigger issues than your build tools.
I've found the [js-assessment](https://github.com/rmurphey/js-assessment) repo to be helpful for brushing up.
You're welcome ;) 
Even though is from 2011, I think it is still applicable (title was deliberately antagonist, I guess): http://www.gunnertech.com/2011/08/if-youre-using-node-js-youre-evil/
There's also https://github.com/kolodny/exercises
Its stated as a non-goal, but seems that they will get the benefit anyways. Its just that they aren't working on it specifically.
In the article I linked earlier, there is no shared state. A new parent object is created with every child object.
If this is for a junior level position then you can probably start writing code now and seriously cram on solving hard problems and be ok. If this is for a senior level position then you should already be prepared to interview at any time.
One major issue with checking in node_modules is that dependencies that are comprised of compiled binaries will most likely not work between different machines. For example, imagine your dev machine is OSX and your production server is centos. Modules compiled on your dev machine are not going to work on your production server, meaning you have to run an npm rebuild every time you pull changes. Also committing every single dependency will result in unnecessary files such as documentation being added into your repo, making your history cluttered. At the end of the day, it's personal choice. But for me, I would much rather use a single shrink-wrap file to preserve my specific dependencies rather than commit an entire huge dependency tree. 
it won't matter. some jackass will ask you an algorithm question you've never heard of.
Non-optimizable code will run about 1.5 to 2 times slower while using 75% less memory (this only affects the memory usage from the actual JIT, this will not reduce overall Chrome memory usage by 75%) Any "hot" or optimizable code will still run just as fast. Also its ambiguous if this will actually fully replace the first (non optimizing) JIT or if it will only work in memory constrained environments.
https://nodejs.org/api/debugger.html
Meteor is going smooth B)
Isn't the whole point that you haven't heard the question before? I'd find it dishonest to not let an interviewer know you'd heard the question before...
Core js doc added, helper doc working in progress
what exactly is the point?
to test your ability to figure out a solution to a new problem
It's not ready to be admired yet. Much of it is running nicely.
No because they still use the JIT to generate the implementation of each bytecode instruction.
More often than not, the memory usage is due to poor programming. We have a single-page app that is very large and deals with a lot of data. Looking at the task manager in Chrome, it's currently ideling at 65K. It's peak usage is about 200K. We're careful to release resources and unbind events when they're no longer needed. This is an application that manages business workflow and stays open for the full day. This 65K iteration has been open for 70 hours without a refresh. Like so many traditional applications, the problem isn't Chrome. It's bad developers.
That's a really good question. I followed the source, oth@chromium and rmcilroy@chromium.com are commit authors on [V8's repository](https://github.com/v8/v8-git-mirror). $ git log --author "oth@chromium.org" | grep !:3 -c 9 $ git log --author "rmcilroy@chromium.org" | grep !:3 -c 130
No...you really don't understand npm if you feel that VS2015 is less of a risk.
Because it's not as cool as Android. They are worried that you bypass the app store, but they like to pretend that it's about security. **Edit:** Maybe I should have phrased that a bit more diplomatically, but that's pretty much the reason. iOS is a walled garden. All native code has to go through their approval process. If you could do JIT, you could as well download native code. You could do your own app store where Apple gets 0%.
&gt; often called p-code is generally a specific bytecode/VM spec that was developed for Pascal. https://en.m.wikipedia.org/wiki/UCSD_Pascal
Can you set up something like [sinopia](https://www.npmjs.com/package/sinopia) or use another private/managed NPM server? We're talking about using NPM for the enterprise and my largest concern is inconsistent dev environments over time. I may explicitly require `amazingModule 1.2.7` for my project, but if it requires `lodash ~3`, each new developer could end up with a version across minor and patch changes. This introduces any number of unexpected inconsistencies and code might not work as expected, or even exist, across different versions. We've already run into this issue with Handlebars compilation for some one-off testing work over the last year. You should be able to sell them on it being like Windows Server Update Services in front of Windows Update. Microsoft pushes new patches and even breaking changes whenever they want, and you have a team that vets the updates and sets schedules to release any changes that might have risks. The same is true for a local NPM service.
Well it's absolutely *important*, but for the vast majority of users I doubt anyone notices any change. 
https://en.wikipedia.org/wiki/Bleeding_edge_technology
I don't see what problem a CDN can solve that private modules or private github repos can't. If you frame to you team that npm just downloads the architect controlled library for bundling and nothing more, you might be able to push this through. If you exclude /node_modules from the version control your developers will not be able to modify any libraries and have that change live though your bundling on the integration side of things. Example: Developer pushes code to a repo being watched by Continuous Integration, the continuous integration pulls clean libraries from the repos controlled by the architecture team. Tests are run in CI and the app is bundled in CI and pushed live. Any changes made locally to an npm module will never go live, unless they are merged into the architecture controlled repo that is pulled by CI.
So how is the job hunting going?
Got shot down because I didn't know how to memoize a function. My answer was use `_.memoize`
I'm going to focus on the non-technical as I feel this is where 90% of the interview is made and I'm assuming you're competent with the tech and others will post good resources for the tech questions. - Know the company. Understand what they do and their marketing / identity. Use their own buzzwords where possible. Understand why they might need you - are they growing? do they have a lack of skills in your area? - Make **them** feel comfortable. Walk in and try to relax and think of it as a conversation rather than a test. - Come well presented and with enthusiastic attitude. They dont want to force you to work, they want you to be self motivated and a good addition to their culture. They want to know they will create a working relationship with you as much as you're competent with the tech. - Always ask a few questions. Dont make it about money. Make it sound fucking smart. "what do you use for version control here" "what project methodologies do you use" "Is there something I should read up on before I start" and the most ballsy "can you give me some feedback on how I interviewed? I'd like to learn from this even if I am not successful in the position" - Be prepared for standard questions (where you see yourself in 5 years, whats your biggest weakness) and point these out. Make a joke of them if you can. "I was expecting that one" etc - Show your dedication / enthusiasm if you can by talking about your side projects or things of interest in the scene. They might ask you about this anyway - If you dont know something, be honest rather than taking a stab. Say how you would go about solving the problem and instead of mentioning youd google for it, mention some better sites such as stack overflow or other good resources to find the answer. 
Upvoting, these are really good tips! Also, take your laptop to the interview and show something you've actually done. If you have no projects to show - make some game, like Tetris or Candy Crush - they are very good front end dev examples and you will have fun developing them. To be honest, I would not know answers to 30% of things listed here https://github.com/h5bp/Front-end-Developer-Interview-Questions, but I always have several real-world projects running in production and some unfinished projects on my localhost, and never ever had problems with job interviews. In last 4 years I've changed 5 jobs until I found one that I really love. If you are interested: First job was a long term online project that I've been running as dev for several years, got tired and bored and decided to move on; Then it was several months of contracting job, was building a website, really nice client, but job was over and he had no more projects at the moment; Third one was a very depressing company that I left after 3 months; 4th was mobile gaming company, it was not bad, but i wanted more money and they could not match my requirements; And my current job is an advertising agency, perfect company, happy working for them for 2 years now and not even thinking about leaving it. So conf it up and good luck!
Read about the time accumulator principle, also created a game class that do that for you https://github.com/yuvalsaraf/game-time-accumulator
Ah, I see. I should have looked at it more closely before dismissing it.
Completely! I like how this article takes on the future potential problem of "my npm script is too complex and isn't scaling" with a completely reasonable incremental solution: write an ordinary node (or shell) script. Once that gets too complicated, something else might be appropriate. Smaller, sharper tools are very good for the incrementalism advocated here: when your problem changes or your tooling is not as well suited, you can swap out pieces as necessary for other tools more tailored to other use cases. Unfortunately and as usual, there is not much of a marketing department for "use appropriate tools, swapping them out incrementally as necessary".
&gt; Know the company Try to understand the company's approach. One of the reasons I'm here is not purely because of my technical skills, but because of my business awareness too. Keep in mind this is completely company-based, so they might want a really good technical guy, or they might want some sort of evangelist. &gt; Come well presented and with enthusiastic attitude. This shouldn't mean you must suit up. Some places are more casual, and if you don't want to fit in during the interview, you might want to ask before what's their dressing etiquette. The enthusiastic attitude always help :) &gt; Make a joke of them if you can. Unless it's a serious-ish business (banking, maybe?). But, also, do you want to work on an environment you can't joke with your coleagues? &gt; If you dont know something, be honest rather than taking a stab. Please do this. You can also try to search for the recruitment process online, either on Google or on websites like Glassdoor. I found the entire recruiting process on the company I'm working at currently on their own website, and this helped me relax a bit. Also, maybe try searching LinkedIn for contacts / 2nd degree contacts that work there. You never know, they might help :) I wish you success in this. Keep us updated :D
I've been doing exactly the same and I completely agree with you. Problems only arise when you've installed dependencies that have native C bindings, or you haven't checked in your node_modules (like you should) For [my own project](http://duckie.tv/) I only use node modules for the gulp scripts. All the rest just comes form a js/vendor folder. One of the cool things that brings is that you can just start developing without having to run npm install, which lowers the bar for contributors that just want to submit a patch to a language file for instance.
That *is* the problem he's describing here. Not everybody understands semver, therefore semver is a risk until everybody does. Also, the added administration of having to update and re-test potentially N dependencies if your build fails just before release is a frickin' hell. 
u wish.
I am surprised noone mentioned _Cracking the coding Interview_ book, I spent the last 3 week interviewing and that book is pretty much all I used. If you're going for a JS position, I'd reread Javascript: The Good Parts too. And skimming through Code Complete never hurt anyone.
no way to enforce it. bad code is bad code. people just copy what node does....and think its correct.
https://famous-views.meteor.com/
&gt; https://famous-views.meteor.com/ &gt; Deprecation Notice: The current stable release of famous-views (0.x) has been deprecated. It still works great and you can still use it (it's the only stable release), but since the famous 0.3.5 API is deprecated too, all future development will be focused exclusively on famous-views 1.x for famous 0.5+. See the Official Notice and Latest 1.x News on our Forums.
JITs need the ability to turn off the [NX bit](https://en.m.wikipedia.org/wiki/NX_bit), allowing the code they just compiled to actually be executed by the processor. The iOS sandbox disallows any memory page that was writable from becoming executable, as a security feature.
yup, with some Flux framework.
Dagre + D3, why? *oh wait I wanted to say I was sitting during the last week and manually writing SVG in text editor cough cough*
If you're wondering why almost all your comments in this thread are getting downvoted it's because you don't seem to understand this nearly as well as you think you do. Why on earth would you ever, *ever* want to download from a CDN, and *then* bundle it into your own application? There is absolutely no point in this. Just install the dependency on your own machine first, and then browserify it. *Then* upload this new file up to a CDN and serve that to all your users. The reasons frameworks like jQuery are served from CDNs are the exact same reasons your stuff should be served from one. But to have CDN -&gt; build-step -&gt; CDN... say wut. If you want the benefits of a cached version of jQuery served to your users, then carry on doing what people have always done and serve the file straight from the CDN, and not have it go through your build step.
For a long time when I was in .NET land in an enterprisy shop, what I did was: * Point my browser at their download page * Click the download icon * Unzip it * Move the files over to visual studio * Check them into source safe * Update my MVC bundling info if needed Basically, did it manually - and it was kind of annoying.
Where you get the PDF file, shouldn't that call be using copyID instead of docID?
Yes, you need to set up an interval to periodically flush expired objects since localStorage doesn't have expiration events to let you know. I'd still use the error handling method, though, because it'll keep your app from crashing if you add too much. I just clear everything when that happens (minus userId and access token), but you could also selectively delete until you're below your threshold.
&gt; They didn't even bother looking at it. How do I get junior position if they won't even test my skills? Write this code as hobby and solve valid problems. This is the experience you speak to in an interview. The ideal candidate is somebody who writes this code because they enjoy it opposed to some worthless leach who is just looking for a paycheck.
I would say know the quirks of JavaScript. You should understand things like hoisting, duck typing, scopes &amp; namespaces, etc. In the interviews that I did, most of the questions involved debugging bad code and understanding some of the weirdness of JavaScript really helped.
sorry, but this article is terrible. takes basic concepts to an unecessarily confusing level. 
do a lot of interviews.
These are good tips. Just had a phone interview yesterday. This is the kind of stuff they pretty much asked/were looking for. Next steps are a coding challenge and then an in-person. 
This is the correct comment.
Ask them what browsers they support. Ask them if they do scrum. Ask them if your direct superior ever did any programming. Do not try to impress them by coming up with complicated solutions instead of simple ones. And most importantly, relax and be yourself. After a couple years of full stack JS, you will be interviewing companies to see if you want to work for them.
Hopefully, this will increase compatibility with Linux!
I don't see why the downvotes, it made some developers happy for a while, what's the problem with that? I used it for a bit, but went back to es5 after a bit. I'm just glad source maps are a thing now lol.
On one hand I agree with you on asking better interview questions. On the other hand though, you seem like you'd be difficult to work with. I'd wager that you're being rejected not because you didn't know how to memoize a function, but they didn't like your attitude. You'd be surprised how far that goes.
Will this make the site not painfully slow in Firefox on my Nexus 7?
Another sensationalistic headline hiding nothing more than half truths. Don't bother.
Ah, this actually just changes the language that builds the HTML for the page on the server, although it sounds like they might be doing some client side stuff too. It doesn't actually change how the video stream is played at all.
This is the first mention I've seen of "Universal JavaScript", is that the preferred nomenclature now, or just an enterprisey rendition of ~~"isometric"~~ "isomorphic"? Or are they different somehow?
From the article: &gt; As applied to JavaScript, Charlie Robbins presented the idea in 2011. He called it "Isomorphic JavaScript" which has resulted in years of debate over the poor name. In recent months, the term Universal JavaScript has gained acceptance.
Pack it up boys, the internets not going anywhere.
 books.forEach(book =&gt; { console.log(book.title); }); for(let book of books) { console.log(book.title); } For-of looks nicer. If there is a body, for-of is 1 character shorter, it's easier to type, and the line starts with a keyword which makes it a bit faster to scan. Since each iteration has its own copy of the "counter" variable (if you use `let`), closing over it is also fine. If iterating over some iterable is the primary thing your function does, for-of is probably the better choice. ForEach, on the other hand, is nice if you're chaining stuff or if it's just a simple lambda expression. You also still need a regular for-loop if you want to iterate in reverse and remove some items as you go.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description &gt; `forEach()` executes the provided `callback` once for each element present in the array in ascending order. It is not invoked for index properties that have been deleted or are uninitialised (i.e. on sparse arrays).
You could say something like, "well, in the real world I'd probably just use `_.memoize`, but for the sake of this interview, I'll give it a shot -- it'll be fun!" Then crack your knuckles and get coding. That way you make your point but you're still appeasing the interviewer - that's the point of an interview anyway.
Dude....90% of the people in programming are shitty programmers.
Disagree. While I wouldn't want to write CoffeeScript, the library's build process doesn't (shouldn't) affect the product I see when I use it as a JavaScript library. The only real effect CoffeeScript has is reducing the pool of people who will contribute source code or bug fixes. Also, it amazes me how confident people are at every stage of these fads. A few years ago you're stuck in the past if you don't use CoffeeScript, now it doesn't even require explanation that you're an idiot if you do.
Anyone want to provide the reasons for the sensationalistic headline I'm not clicking on but already have the answers to (ts;dr)?
right. #weagree
Just install angular batarang, select an element and type $scope in the console. Also: the angular dependency graph in the chrome webstore.
Hi, I don't understand what do I miss exactly? primefaces.org is where we announce the details.
What I do is briefly mention my work experience as lightly as possible and spend more time describing my projects on my resume. Your work history is relevant to show some employment experience and the type of leadership needed to solve technical problems at the employer. Sometimes interviews can go off on tangents. It is up to you, as much as the interviewer, to keep things on track. You can direct the flow of conversation to focus on your project work by using it as an example to answer most of the technical questions. Be prepared to show them cool things from demos on their own computers.
I'm curious as to why you wouldn't just get the app at that point? 
These aren't 10 GOOD reasons. They are just 10 poorly thought out reasons someone made up in order to write an article. Very few of the assertions are well justified (ex: Java failed, Flash failed, therefore Javascript will fail). The author must have little knowledge of or exposure to the types of decisions that both CEOs and IT professionals must make on a daily basis. Meanwhile, in a neighboring article, Netflix has just more heavily invested in Javascript.
I think the biggest news here is the dropping of Java in a company that was plum full of Java developers.
As I mentioned in another reply, the app doesn't have feature parity with the web site. The app is clearly targeted at streamers only, whereas I do both. So, things like viewing and manipulating my disc queue, searching for things not available for streaming and adding them to my queue, these are things I can't do with the app. 
Yeah, rules wouldn't allow use of File Picker. I'm thinking that the blue channel part of the task is so I WILL run into the CORS error and document my understanding of why the error is occurring.
It very well could make the site faster on a tablet. It depends why the site is slow on the tablet. If the initial page loads are completely rendered to HTML on the server, then the initial page might load a lot faster, and you may be able to see the content while the JavaScript is downloading and executing.
try loading `https://dl.dropboxusercontent.com/u/168703818/image.png` they supposedly also have CORS enabled for their server
isomorphic has a very specific meaning. universal just means they are using javascript everywhere. isomorphic means you have same code running on both sides.
Doens't it require flash?
js will be a low-level language. you will write abstract languagues that transpile down to es.
Should probably link to the [Netflix blog post about it](http://techblog.netflix.com/2015/08/making-netflixcom-faster.html).
No mention of recursion? The forEach method seems less powerful than the for loop because you can't use [labeled (for nested loops)] break and continue statements. I guess you can simulate non labeled continue statements with early return statements, but still... Also it's probably not a problem, probably... but when you are iterating millions of times (unlikely, maybe) and that function call is not optimized you are going to pay for it. 
On Chrome they use a built in DRM component provided by Wildvine. This runs with HTML5 Encrypted Media Extensions, so no. On Firefox they use silverlight, but I imagine now they can use Adobe Primetime's Encrypted Media Extension to play movies. edit: Firefox still uses silverlight Basically it's all html5 now, but they have DRM that makes it so you can't just download videos off netflix and share them. 