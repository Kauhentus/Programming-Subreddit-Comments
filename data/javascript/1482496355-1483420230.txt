What about old browsers?
 // Are there any values in array1 which exist in array2? var exists = array1.some(a =&gt; array2.some(b =&gt; a === b));
I think I found the right font, looks good in linux/windows
Really interesting game! Did you choose to go native JS for any particular reason? I spare you a "*just because you can leave out the semicolon doesn't mean you should*" rant - at least you are consistent :) Did you manage to implement all that in just 3 days? Maybe I should also try to go back to native JS.
Agree, this seems like a cool thing. Will check out some of the problems myself during the holiday.
Cool write up Bro. If you want a job go with Angular. If you are going to mess around/join a company of 10 employees you have options. first convince everyone that Angular is not enterprise enough. Then make your own framework, when that fails use Vue or React. 
Did you try https://customelements.io/? For your first component you could use https://github.com/vaadin/vaadin-combo-box
Ya I'd like to know this too
I think it's only missing some touch events no? Seems to be working smoothly otherwise. 
Thank you. I've been trying to replicate the behaviour of Chrome's "Add to Desktop" feature on MacOS (as it works on Windows and Linux) without any luck.
That looks like a useful component for long dropdowns, but appears that the list of items it searches through is local only. I'll look into it more to see if it has the events and functionality necessary to build searching into it. I found all the other components I was looking for on that website! Thanks!
r/requestabot
And this doesn't change that programming is the application of CS.
https://javascript30.com
This is really cool, except I waited the whole game and never got that one straight piece I needed! Sound will really make this shine, and it's fairly easy to do with the Web Audio API and a few oscillator nodes. How did you set up the leaderboard microservice? I need to do something similar for a project I'm working on and I'm not sure where to start.
yeh, fixed this exploit, thanks for pointing that out
Oh. Sorry. I didn't read the post properly
Thanks! This is the approach I'll take.
I look forward to version 13 being the most secure implementation imaginable. (bad rot13 joke)
I've used electron, it's been fine. has it's issues but it's also used for Atom Editor, Visual studio Code etc... so it is production ready so to speak. 
The best thing you could do is GO ON VACATION. Enjoy your life! You get one pass at it. When you're on your death bed, would you rather remember an awesome trip or that time you learned ES6 proxies?
I think one of the main reasons to flatten things out is to remove duplication of data. For instance, the Post &lt;--&gt; Author thing, where an Author might have hundreds or thousands of posts, by moving Authors to another reducer, you stop duplicating the Author data below Posts. But, with your data, unless Questions are duplicated/shared between Exams, you're not going to gain anything there. Another reason to split things out is if different Entities get updates separately - Again, in the Post/Author case, when the Author's information gets updated (change of "First Name" for instance), it needs to only be updated in one spot vs. hundreds or thousands. Would Questions be updated independently of Exams? Or do you PUT the whole Exam to update a Question? When you say your Exams reducer has grown large, what do you mean by that? That there are many lines of code?
I would say if you havent done the intermediate projects on freecodecamp, get through those and make them your own / expand on them. With two weeks, you should be able to start something and finish a v 1.0, push it to github / make it a github page, then try adding features to it, re-factor it, etc. I think this is nice because there's a physical reminder of the work you did and you will re-visit it and think "actually...I could probably add just one more thing". This is where some of the most crucial learning comes in terms of structuring and scaling your projects...and then suddenly the use case for a framework or library might make more sense than it did before. My example is that I did one of the intermediate projects on freecode, made it my own and added features, and quickly had a few hundred lines of spaghetti code. Adding features at that point was already a bit tough. I decided to do the whole thing over in react, and that was extremely effective in terms of understanding and learning react, and just fun in general. I know that in general, the idea is master vanilla JS before touching a lib like react, but I do believe there is middleground because as a beginner, I don't like complete freedom. These constraints helped me to chunk out my code, and it made the project more enjoyable. TL;DR - Make something from freecodecamp's projects, push it to github pages, re-factor it some and add features. 
For a moment there I've thought that my monitor is in a serious need of cleaning https://tylergaw.com/images/bg-crud.png.
if you are at the point where you are slapping comments onto closing braces, you need to refactor your code. at the very least, extract some of the nested loops themselves into separate functions.
the user can edit Exam and Question, where editing Exam simply means editing multiple Questions
Cool stuff just started trying out MobX and have been liking it. Will probably have to check this out for side projects that don't need to support older browsers. Seems as that is really the only advantage of using MobX over this.
It's better than no build steps at all. "Modern web development" is now following exactly the same process as other development environments, which is, of course, a good thing.
I think "feasibly" is the key. Testing and maintainability seems to be a big focus of a lot of projects. Demands also used to be less. Today there are a lot of web platform APIs that big web apps can and do take advantage of. That said, I don't know that React, Vue, and co. really target or abstract these parts.
It's not necessarily that any guide is calling out not to use it, but considering it becomes optional if you start the constructor, I was just trying to brain storm when I would ever want to do this for some reason.
&gt; A web browser game? In JavaScript? TypeScript, Dart, Java (GWT), C/C++, Rust, C# (Unity), ...
I am simply an extremely satisfied MobX user and have contributed a little on discussions around how to improve it. MobX also makes everything recursively observable by default, "hand mode" is mainly there to omit things from getting transformed. And the use case is very simple : you want to observe everything but one or two properties (or items in a collection). As long as IE11 is still around (not to mention older versions), the compatibility problem isn't going away, sadly. It's the only browser that still supports old legacy business things. 
Based on your screenshot, it doesn't look like anything is wrong. You're seeing a few warnings, but the package is still getting installed. You should be able to see it in your node_modules. The warnings at the bottom, the ones about fsevents, are referring to a package that's used to monitor file-system changes. This isn't supported on Windows, so things like watch tasks might not work for you.
Is it OK if I use `setInterval` to click the buttons? Normally I'd call it cheating, but I wasn't sure given the genre
Nevermind just peaked at the source - going to have to go through this more lol - I was not able to get decent results at all with only 128 freq bins
Open up the visual you sent me. Now draw an imaginary line from the center of the green pacman, through the center of the red line. This is the direction in which the red ball should move. You can calculate the difference in x,y between the two center points of the balls. These will help you determine how to move the ball. For example, if you were to hit the ball exactly on its right side, it should move exactly towards the left. In your visual you're hitting him about 30 degrees lower, meaning the ball should be pushed 30 degrees upwards. So the ball moves a bit upwards, in addition to moving to the left. To compensate, it moves to the left by less than if it were hit exactly on the right side. This is why you calculate the delta between the circles' center points. Another explanation, going back to the line you draw between the two center points. Express this line in two lines: one horizontal, and one vertical. For example, say one circle's radius is 4, another's is 5. If the still ball is hit exactly on the right side, your horizontal line will move 9 points to the left (x - 9), your vertical line moves 0 points. If it were hit 30 degrees lower, the horizontal line will move only 6 points left (x - 6), and the vertical line will move 3 points up (y + 3). Hope that helps explain things a bit more.
Don't get me wrong I have no problems with MobX, but I needed a fresh start for my project (without the need for backward compatibility). I aim the NX framework to be a next gen library (it is still in alpha and it will enter beta early next year). (NX observe does not make everything observable recursively. It waits until something is used in an observer context and only then makes that single object observable to achieve a minimal observable tree.) I checked all of the MobX issues related to Proxies a few weeks ago and I found them a bit abandoned. If you need any advice with Proxies I am happy to join a MobX Proxy version discussion (Proxies has a lot of bug like traits).
There's one very good thing you haven't mentioned about your "Neutral" picks; that they're cross platform. That immediately makes them better than their native alternatives. Not to mention that they will likely be smaller and be usable quicker than the native versions, i.e. downloading from app store, waiting for install, then start up vs clicking link and it loads up. Your bad picks are either just examples of uninspired usage of PWA tech, poorly implemented, or just exactly what you get with native apps. But you now get the benefits I mention above (cross compat, size, ease). So that sounds like a win over what we have now. You also identify some good examples, making the question kind of redundant. The way I see it, there's literally no down sides (unless you really fuck it up somehow) and things either stay the same or get better. The only problem is with education and discoverability; how do people know what a PWA is/where to get one/etc. Browsers are somewhat fixing that by suggesting you install PWAs if you use them, but I doubt many people are searching the web for guitar tuners right now: they go to the app store.
Yeah, but the problem is, you didn't list those as part of your process. You're using all these tools, but only listing half of them, and then just pile on 15 more at the beginning of the "tutorial" for the other things. It's bad writing.
[Electron](http://electron.atom.io/) is used in many products and I can recommend it. Also [Chromium Embedded Framework](https://bitbucket.org/chromiumembedded/cef) which is used even by Adobe on its Creative Cloud application.
I have yet to build a PWA, but I thought the advantage wasn't necessarily as "offline capable," but that they're resilient to flaky connections. That, and subsequent visits load incredibly fast. Performance is a feature!
Neat, although looking through the code you should really consider generalising it. For example looking at this: https://github.com/naoxink/devlife/blob/master/js/shop.js there's tons of repetition.
Use Firebase?
Thanks for the post. I'm not sure why there's always *that* guy in these threads pointing out how much is involved in modern JavaScript, it's hardly the authors fault that so many awesome tools are fragmented, he's simply trying to inform others of his experience using them.
Damn you. I can see what I'll be doing for the next few hours. GREAT WORK!
few improvements: * use more meaningful variable names - `w`, `l`, `t` doesn't say anything * `parseInt(document.body.style.paddingRight, 0)` is the same as `parseInt(document.body.style.paddingRight)` - I assume you added that `0` because of eslint errors, it should be replace with `10`
Hey guys, I added sound effects) I cut out the audio of key strokes and background noise from the Youtube video and now we have a little more deep immersion
Thanks so much
ITT: css template monkeys upset they need to learn more to keep up with current trends. Exciting. 
Isn't the performance of PWA inferior than native apps? 
Well, either you're using a bundler, so yes, or you're adding a script tag to the page, which is basically the same thing.
ES6 proxies always
Yeah man, no alignment issues in Firefox or Chrome for Mac now. I see no gaps or anything now when the blocks are falling. Are the button controls supposed to be on the side like that? Is that for a touch screen? http://imgur.com/a/dsfGT
Offline is not the sole focus of PWAs, it is just one of the parts that makes up a good PWA. Plus offline doesn't mean all features work perfectly offline it just means offline is handled and you don't get the broken dinosaur of doom. Similar to how native apps don't always function offline if they rely on web content.
yes, controls on sides are for touch devices, they are very basic, working only on click, for people to have at list any control capability
Well, tomorrows browsers and Chrome. 
$('#add') vs id='addrow'
What about this should I change? #add to #addrow ? 
For Javascript and coding in general I recommend freecodecamp.com. For Javascript, I suggest watchandcode.com. I hope this helps.
Just wondering. What other type of JavaScript use is there outside of the web?
Thanks that sorta worked, how can I make it only output the table in a certain location below the previous table?
Atom is definitely awesome, but while considering editors for HTML/CSS/JavaScript, I would recommend Brackets. Its live reloading and inline editing are fantastic and work well out of the box
Some of these things probably got mentioned already, but I am too lazy to go through all the comments. It is kinda bugged. After clicking the 'achievements' tab, I didn't find a way to quit it, so I tried to at least save my game via console and reload the page. I had had that auto project upgrade on the way, but When I loaded it, I could buy the parallel project upgrade second time. The upgrade computer cost was weirdly off too after loading the game. Energy drink seems to have much bigger effect than .75% There absolutely should be a lottery history. I don't like that you cannot stop renting a space object once you rent it once. And I cannot hire more people after loading the game too (nor fire them). Really liked the game (especially the web design upgrade), but the amount of bugs kind of ruined it for me.
You are right, I will improve my code in the few days. Thx for your advice.
I'm a meteor developer so I can't give much advice on node and sockets but meteor is basically a framework for front and backend that handles all Ajax and sockets for you which makes something like a chat app really easy to do fast. Using meteor it can be done with just a collection of chat rooms each with a messages array field that meteor will keep synced with the view. As I say this is definitely faster than using just node but I don't know that much about it honestly
What kind of project did you create? What build configuration/debug mode does it say it's started in? 
JavaScript will be any changes to the content of the page that don't require a page reload pretty much. Stuff like clicking a drop down and getting a new menu or maybe next page on a table of records. CSS does the aesthetics. Animation could come under both of these categories and can in fact be done with either
The problem with engineers is they have no sense of humor and take everything for face value. Also you forgot CoffeeScript, ClojureScript, and Elm.
Oh, that is not me. It was just a relevant thread that I had seen right before this. It is a Facebooker who is also a fan of Vue. I know it does not weigh the Vue side. That is probably just due to Facebook's big creation/adaption of React before Vue came to be.
What? You can do that with NPM also though?
Hey there. So.... I submitted again but it appears that didn't go through. We will have Douglas Crockford speaking at 4 of the 20 cities of the event series. So I think this is extremely interesting for Javascript developers. Could you please make it appear on subreddit?
You also never need loops. Just recursion! ;)
 function isEven(number) { return number % 2 == 0; } ...?
This is why we can't have nice things. Please don't modify the prototypes of build-in objects to facilitate hair-brained schemes!
What isn't there to understand?
It's more declarative. It makes it more obvious your function is to be understood and used as an argument. They can't be hoisted so again, more declarative, the function will be read before the code calling to it (by a human). Just good practice for readability and structure. Especially with the immutability of const and the lack-of-bindings simplicity of a closure/arrow function. tldr; coding isn't always about fancy one liners, your code should make sense
No time like the present! CodeAcademy.com
vs code? or some other suite?
Thats great stuff. I like all those options. I'm not certain Object.assign the best way to go, it creates a new object instance each time, not sure how expensive that is. ... maybe: const carsById = {}; cars.forEach( car =&gt; { carsById[car.id] = car; }); Of course, we're talking ECMA6, so who knows what it transpiles to. 
I'd keep it all in a single folder that can be uploaded all at once to the server. Set the hooks up on your server (nginx config, for example) and just have the git be that deployment folder. It is the same 'application' after all.
You say that like it's a bad thing. Having lots of options is one of my favorite parts about javascript.
http://www.htmlgoodies.com/beyond/javascript/article.php/3471221/So-You-Want-To-Open-A-Window-Huh.htm
Separate cause they probably have little in common even if you write them in the same language.
 // solution 1 const ifStatement = (condition, callback) =&gt; { Array(1).filter(() =&gt; condition).forEach(callback); } // solution 2 const ifStatement = (condition, callback) =&gt; { new Promise((resolve, reject) =&gt; { [reject, resolve][0 + condition]() }).then(callback); }
why is hoisting a bad thing? it allows you to define pure functions at the bottom of a file, and have all declaration/logic at the top giving you a much better understanding of a file without having to read the entire thing. personally can't stand const/var/let and try to stay point free whenever possible.
It's not Javascript, but Phoenix/Elixir is perfect for web sockets and chat rooms. It integrates well with Node and JS.
Yes, if you want header row be static, just set property onlyBody to true. See third example. If you like it, please star it. thx😀
The declaration is hoisted, but not the definition. With regular functions, I believe the definition is also hoisted 
Well, if they're developed separately they probably don't always need to be deployed at the same time. For example you could fix a bug in the frontend that has nothing to do with the backend. This would mean that you would have a separate deploy process for each part.
I would keep them together. Rolling back is so much easier when its a mono-repo, all you have to know is the git hash to rollback to. Makes deployment and rolling back super easy. 
As many have said it really depends on how you like to work. If you've got separate teams/people working on the Back End vs the Front End, they might want separate repos so that they can run things slightly differently. We found that as our product matured, separating repos was inevitable because of the complexity. One benefit we did find early on from having everything in one repo is that every engineer, no matter what part of the software they worked on, got a good understanding of the structure of the whole beast, and a rudimentary feeling for how all parts work together. I once worked with a team that went repo mad and had separate repos for their Front end models, views, and controllers. That was insane. They didn't even link the three together in the package.json as dependencies... you had to clone all three repos to get the product working. 
yep, thats even worst than minified javascript
vs for mac = xamarin studio + a few features to enable web
Having tried doing the same with two repos in a team of 6, I would suggest go with one repo (we're in the process of merging them). The reasons we decided on separate repos at the beginning was that each one was compiled to a different docker image and independently deployed. Also each one had its own unit tests. The reasons we decided to join them to one repo was that in the end we were always deploying them together as the only consumer of the API was our own Frontend. Additionally, it does not bake any sense to run the (slow) integration tests between these two components twice whenever we need to deploy. To make sure we dispel any assumptions: - will anyone else consume the same API? - is this app developed by one or two teams? - on the frontend, is there more work to be done on static or dynamic pages?
roadsweeper would be better suited to you than web dev
I know there's a bug over there as you say but this Christmas I don't think I have enough time to fix all bugs :/ Thank you all for that feedback and I'm glad for the acceptance of my little game ^^
I know there wild bugs running freely all over the code but I really haven't that time to fix'em all :/ Thank you for all your time and I hope you liked it ^^
ok. 
I know, I separated that code (shop.js) for precisely that. My intention is giving a lot of play to the shop, buy "things" to earn more money (or even spend for just "achievement objects" or something).
Isn't that the million dollar question?
Not million but pretty difficult, it was solved by imitating ants using Agent Oriented Programming 
Ah yes, [the two definitions of FRP](https://medium.com/@andrestaltz/why-i-cannot-say-frp-but-i-just-did-d5ffaa23973b#.rzwt6g117). This article is, of course, about the interpretation "where you build applications using listenable event streams (or "signals"), creating and composing them using pure functions".
Your argument is undermined by the fact that you give horrible examples. 1. Hack makes no sense as a series of patches for PHP; it was a major rewrite to solve problems largely unique to Facebook. The PHP project was never going to (nor should they have!) accepted all the changes Facebook made with Hack as patches. And in any case, PHP and since adopted (slowly, in managable chunks) the actually good parts of Hack, leading to a huge improvement to the language. The way Hack was handled was good for Facebook and good for PHP; what's your actual concern? 2. Flow and Typescript solve similar problems, but they have very different approaches. One is a series of optional annotations to valid JS, the other is a compile-to-JS language. Both are great, but again: Obviously Flow makes no sense as some patches to Typescript. (Also again: Typescript has improved in part by incorporating ideas from Flow.) 3. Yarn isn't a Facebook project, and in any case arguing they should have contributed to JSPM instead is pretty weird, considering that yarn is a replacement for NPM, not JSPM. But even so, again: Yarn makes no sense as a series of patches to NPM, because NPM has decided to prioritise backwards compatability and *cannot* fix most of the things Yarn fixes. In all three examples, you don't seem to have identified anyone who was actually harmed, nor identified anything which could realistically have been done differently. &gt; Hack, Flow, and Yarn all rub me the wrong way. Poorly thought out criticism likes yours rubs me the wrong way.
Well no, I only want to get all the possibilities, which should be possible...
I think he means no dependencies.
Why does Vue community behaves like fanatics on a mission to convert as many devs as they can? So toxic.
Well, couple of reasons. First, the bundle is separated to stuff that needs to load for landing page and stuff that only loads when user navigate to the page using it. It can be trimmed down further, if you optimize the libs used, especially if you use Webpack and tree shaking. Second, no loading screen is used. Instead, we render the first version of the page on server and then replace it when everything loads. For now that has been done manually, but Aurelia team is working on a solution for server side rendering.
It's ok but it's not the fun of the game. The fun of it it's playing honestly :D
That's more like learning JavaScript apps development. Not learning JavaScript itself.
Many of us here are complete novices. You might as well talk to us directly man! &gt; If you want to learn JavaScript, checkout Hacksaw Academy....
Do you think we'll see juniors starting to come in knowing a specific framework ie angular / react etc. without a base knowledge in JavaScript? (In the same way it used to be all jQuery knowledge without the base)
So, nobody else in this thread seems to actually understand the Traveling Salesman Problem (TSP). The complexity of the TSP arises from the fact that you have to find an optimal path. This can be trivially done by enumerating all possible paths and checking them, but this takes O(n!), which is not a polynomial time algorithm, and thus not in P. What you are asking for is an algorithm to create all these permutations. One such algorithm is [Heap's algorithm](https://en.wikipedia.org/wiki/Heap's_algorithm). This algorithm generates ALL permutations however, so you'll have to modify it since the direction doesn't matter. In JS, it would be something like this: function generatePermutations(Arr){ var permutations = []; var A = Arr.slice(); function swap(a,b){ var tmp = A[a]; A[a] = A[b]; A[b] = tmp; } function generate(n, A){ if (n == 1){ permutations.push(A.slice()); } else { for(var i = 0; i &lt;= n-1; i++) { generate(n-1, A); swap(n % 2 == 0 ? i : 0 ,n-1); } } } generate(A.length, A); return permutations; } function generateCityRoutes(cities){ var pems = generatePermutations(cities.slice(1)); for (var i = 0; i &lt; pems.length; i++){ pems[i].unshift(cities[0]); pems[i].push(cities[0]); } return pems; } console.log(generatePermutations([1,2,3])); console.log(generateCityRoutes([0,1,2,3])); 
I hope this title is not SJW bait.
Hah, that is confusing!
I've already seen this for the last 2 years.
Nope. Not a social justice warrior. I just wanted to share Hacksaw with everyone interested in learning JavaScript interactively. 
I want to edit the title but it seems I can't and I don't know why...My english is not very good, I'am trying to practice..
And if you like the plugin just star it, this is my first repo, every star make me excited.😏
Yeah, I've not consider about pagination...
have *them* check out Hacksaw Academy...
Are you sure it has been solved? Afaik there are only aproximation algorithms for TSP. It's an NP Complete problem -- pretty sure it would be a BIG deal if it was solved!
You're referring to a relatively large problem with education as a whole. People skip the basics/fundamentals to "skip ahead" and learn more advanced topics.
Node v6 doesn't give you all the ES6 features. Plus, you need to use Babel to remove the type annotations. 
No worries. 
Nope. Just interested in a devs perspective on the site and the topic of the thread.
not sure i believe that tbh
How do you know what to import in python? Ruby? Java? Haskell? How do you know what to #include when writing c++?
Ok. Have you tested Code School or Codecademy? 
You don't need any of that. Check my one-liner plain JavaScript answer.
I tried to do it myself first, but I'm unfamiliar with recursive functions. Note that just *this* isn't my homework. But it has helped me out for sure.
OP is kebab_guy.js
That's a great username.js
`Object.assign` does not create a new instance each time. It "assigns" to the first parameter all the properties from the rest of the parameters. That's why it's often recommended to pass in an empty object as the first parameter, to prevent undesired mutations. Eg: const newObj = Object.assign({}, someObj, { some: assignedValue }); ECMAScript@next even has a shorthand for this: const newObj = { ...someObj, some: assignedValue }; However, in our case the mutation of `byId` is limited to the scope of our `reduce` operation. So we can make some (trivial) performance gains without undesired side effects. From a readability standpoint, I also much prefer using `reduce`, as it clearly indicates that I'm _reducing_ (or "transforming") an array into an object. For me, it's easier to think of my code as a flow of data transforms, as opposed to trying to keep track of side effects within `for` loops. 
&gt;[**Philip Roberts: What the heck is the event loop anyway? | JSConf EU 2014 [26:53]**](http://youtu.be/8aGhZQkoFbQ) &gt;&gt;JavaScript programmers like to use words like, “event-loop”, “non-blocking”, “callback”, “asynchronous”, “single-threaded” and “concurrency”. &gt; [*^JSConf*](https://www.youtube.com/channel/UCzoVCacndDCfGDf41P-z0iA) ^in ^Science ^&amp; ^Technology &gt;*^258,326 ^views ^since ^Oct ^2014* [^bot ^info](/r/youtubefactsbot/wiki/index)
codewars.com
My forever growing worms! (With no slowdown..... it's an effect I saw first on a ZX Spectrum demo several years ago.) http://codepen.io/SarahC/pen/YpBNdV They follow your mouse if it's on the panel, else they go their own way. They blink, they wriggle, they stick their tongue out when they go fast. I use a two encapsulated objects ([wrapped functions and attributes]{I prefer C#'s objects and interfaces, prototyping's always felt 'off' to me}) for the mouse control object, and also for the decorations of the worms. The balls (worm segments) that make up the worms are objects that contain x, y positions, and velocity stored in an array. An element for each worm head. I didn't stick it in anything to encapsulate the object and related functions - I liked the freestyle it enabled me to code with. ------------ Does anyone know how to access member variables without having to call a public function that returns the variable? I can return objects ok by using return {public_var_obj: private_var_obj, public_bool_2: function (){return bool2} }, but it doesn't work for bools. 
Thats cool, I've used the spread operator as well, but I assumed it created a new instance. I like the reduce method too. I think the first call of reduce may not operate the way your code assumes it does. I think the first call to reduce assigns car[0] and car[1] as attributes, the code would mash the cars onto car[0]
What version of node &amp; npm are you using? Might be an issue with how file paths are handled by the `fs` module, which IIRC had some changes between major node versions. EDIT: I ran into this exact error (and stacktrace, except for line numbers) a couple weeks ago on my team and downgrading to an earlier version of npm fixed the issue.
Recursive functions are a must have. var x = function(i, stopAt) { console.log("called " + i +" times. "); if(i &lt; stopAt) { var j = i + 1; x(j, stopAt) ; } } x(1, 10); run that in your chrome console. think about it. (if there are syntax errors, I'm typing this on my phone. I blame SwiftKey.) 
It seems you're right. I'll check out the express server idea, though spinning up a server just to intercept the JS "feels" wrong to me. In any case, I don't really believe in doing _anything_ manually, so even if I choose to go the route of injecting the contents of a JS file into the HTML, I can do so with (worst case scenario) a Python script. Or Bash, if I want to avoid the Python dependency and am feeling particularly masochistic.
My idea of Xmas fun!!! Happy holidays everyone. Feel free to fork and improve this. https://codepen.io/pastranastevenaz/pen/JbKGjO …
I bet you're fun at parties.
Are developers working on just the back-end and is the back-end being used for multiple front-end uis, each of those worked on by various teams? Then a separate repo might be a good idea. If not then a separate repo would be too much work.
Yeah, basically the first param is the entire match and the params after that are capturing groups. So a is the entire match
And there I thought you'd go with the uninspired Asperger defense, but then you went the other generic reply. I expected nothing and was still let down. GJ.
https://github.com/tunnckoCore/parse-git-log - finally finished (partially, just I'm lazy these days to write tests). It gives you commits from given git repostiroty. They are VFile objects with useful data, such as which is the parent commit, what is the hash of the commit, who is the author, what's the "body" and what's the "header" of the message of the commit (useful for things like Conventional Changelogs - more parsing needed through using `plugin` argument)
Oh boy, did I just catch you contradicting your own self? Come off it. It's Christmas, let that shit go just for a little while, it ain't gonna kill ya. You may may even have a good time. 
Is meteor also back-end framework that sits on top of node (or leverages the node server)? I only have read about it but isn't it a front-end framework, akin to Angular/Backbone and the like?
There's plenty of use cases for using middleware. In our work we use it to replace any get/post requests with fake backend server calls. It allows us to develop in parallel with the backend and mock an entire expected environment. We can also ensure requests at various url's return an index.html file where applicable (which is crucial for mocking an environment that uses something like react-router). But I agree, in your scenario it's rather pointless (other than you would probably learn something from building it).
&gt; Oh boy, did I just catch you contradicting your own self? No.
Sure, that's why I let it be at not removing the repitions. This is an interesting problem though. Also, who's doing homework on Christmas eve?
I don't know much about the pros and cons of firebase or the best tool for OP to use, but if you're going to give him advice actually give pros and cons of the tech instead of attacking OP's choice with logical fallacy.
I've updated the repository but seems to be cached in rawgit :/ Commit changes: https://github.com/naoxink/devlife/commit/e2d84352977802c03d4528b14903beec4e1aa5ba I think I've fixed the save/load problems.. at least what I was able to test. Next stop: Get rid of the rentings you don't want/need :)
Racism has been around longer than that, just because something exists for a long time doesn't mean it's good. Also since you are obviously talking about SQL you might actually talk about the pros and cons for this use case, since SQL would probably be a good choice. Also firebase is fine. It will get the job done. Use what you know and make adjustments as they are needed.
Ah! Everything's clear now. Thank you!
vscode rapes both of them
&gt; Random thing you just saw on Reddit I've been using Firebase on-and-off for over a year.
codility.com
Firebase is great. Its use of NoSQL makes it easy to change your models on the fly and it really speeds up development. The admin console is great. The data is essentially stored as a JSON document, so it is permanent and can easily handle an insane amount of querying. It has great APIs for mobile, web, etc. so again, that'll really speed up development.
Some drawbacks: limited API, poor GUI tools, younger therefore less credibile in companies' eyes, not tested in large applications. Pro: convenient. Overall, it's OK for a limited set of situations; if you are 100% sure you will never need something more, go for it. Otherwise, stick wit the classics.
I'm using Node v4, we haven't yet moved to v6 (also AWS Lambda still uses v4.x). I've managed to get it working in the end using `webpack-node-externals`. 
why is there a need to capture the entire word to add space? if you take only the 2 characters and add space between them it works the same way
What's the benefit to just running the `build` on Travis? Wouldn't you want that running your tests?
You are the one who sounds like a fanatic. God forbid technology would advance and find a way to do things more efficiently. React was a great framework for it's time, but the truth is Vue is better in nearly every metric possible. If people like you ran the world we'd probably still be banging rocks together.
Looks like there's no thing like creating a new project in VS preview. It only has two options i.e New File and New Solution. New solution can be thought of as a 'new project' as far as I've noticed. Then we have to choose a template like multiplatform, .NET core, and Other. Since I'm writing a javascript code, I selected Blank Solution in Miscellaneous under 'Other' template. I am not sure how to determine the config/debug mode
^ **So toxic and so salty as well.
You asked for it. &gt;And there I thought you'd go with the uninspired Asperger's defense Versus &gt;I expected nothing and I was still let down. 
Here are some problems to solve that will make you a better programmer: **vanilla JS** * JavaScript parser written in JavaScript * An application that can analyze code and output a list of closures and the number of steps (scopes) away they are from their declaration point. * An application that can analyze code and determine type recasting **Browser** * graphic user interface, like the windows desktop * browser plugin that blocks all third party requests * output all properties added to the window object by the page **DOM** * gather nodes by node type * detect all text nodes that are not properly described (for accessibility and semantics) by their parent/ancestor node * create and add comment nodes to the document **Node** * simple file copy, recursively works with directory trees * simple file delete, recursively works with directory trees (like Unix `sudo rm -rf`) * create a CURL utility that works with both HTTP and HTTPS
There is no contradiction. Your canned response was simply even lamer than the lame kind of response I expected. Copy-paste "wit" is about as pathetic as it gets. Even bots have more interesting things to say. If you want to be a total twat, fine. But you should at least put a little bit of effort into it.
That's why we love nodejs and that freedom. Everyone can create how he think it can be. Nodegit does more and is bigger. There's also `conventional-changelog-parser`, but it is bigger and complex. We need small and specific thing.
You could do what /u/HarrisonBeck said and always increment the version of both, or you could also have each deployment script check the version of its counterpart installed against a list of versions known to be compatible with each other. If they don't appear compatible abort and report incompatibility.
Yup comes down to complexity really. My last job we never separated them but in my current job there is no way we could have them together.
I tried your suggestion, and now I am getting identical contents on the JSON files. Both are the same. Would it be because of the html variable?
I'd forgotten you can't do `LIKE` queries in Firebase, so I guess that settles it.
Ahh yes that one 👌🏻
Stop hitting yourself!
Advent of code is popular right now
&gt; Flow and Typescript solve similar problems, but they have very different approaches. Also I'd add that Flow has nominal typing, and Typescript has structural typing. These two approaches are incompatbile. Flow also attempts for type soundness out of the box. Typescript is willing to allow you to do unsound things. 
I haven't used Preact, but from what I've read, Preact does not support React Native. And more exhaustively you can find the difference here : https://github.com/developit/preact/wiki/Differences-to-React
Where are you running the script at? 
Sorry to be a buzzkill, but that's hardly DI. That's a callback. Even if you would be able to technically classify it as rudimentary DI, it is so far from the architectural pattern that is most often referred to as DI that it will only confuse newbies. "Angular uses DI? No worries, I read that blog. Wait what on earth is this?!". 
This is not dependency injection.
Could you update the documentation with some example commits? What does a merge commit look like? Maybe show an example plugin modifying commit data (for example, generating a github URL to the commit would be good). How would I pass arguments to `git log`, such as `--reverse` to switch the order, or `--max-count=100` to limit the response? I'm looking for a library that specifically parses log output, but think this needs a few more tweaks before it's flexible enough for me.
This should be cross-posted to [r/nottheonion](r/nottheonion).
your markdown fu sucks yo.
If you want something with tutorials, https://javascript30.com is not a bad starting point.
how racist of you.
SyntheticEvents, Browser normalization (IE8 support), and proptypes type validation are the big ones.
Care to elaborate on this? https://www.reddit.com/r/javascript/comments/5k72qj/how_is_the_new_package_search_by_quality_on_npm/
Try This.. use href var linkSkyrim = 'www.nexusmods.com/skyrim/ajax/'; var linkSkyrimSE = 'www.nexusmods.com/skyrimspecialedition/ajax/'; if (allowedGame) { var linkDownloadButtons = document.getElementsByClassName("download buttons"); if (linkDownloadButtons[0].children[0].href == linkSkyrim) { linkDownloadButtons[0].children[0].href = linkSkyrimSE; }
I am not sure about the examples, but I have a course - Just because you are interested in learning - Here is a free coupon for you... Worth $195 usual. https://www.udemy.com/javascript-from-beginner-to-pro-best-course/?couponCode=PROGRAMMINBUDDYCLUB 
I'm curious to hear what your issues with Promises are.
Nice
don't assume my intenter.
Hi, yea I thought for that and when release v1 docs will be more better. I just published v0.2.1, as pre phase, because it is finished and is working. As about the flags.. Good point, thanks, I'll do something.
OP, I'm gonna say this nicely, you are *terrible* at being funny. Stop commenting.
I assumed since you put this as a comment and not a private message that it was for anybody. Thanks! Let me know how I can show my appreciation 
your comment fu sucks too bro.
To the right of the search results there's a little blurb that reads: &gt; **Thanks to [npms.io](https://npms.io/)** &gt; &gt;For improving our search. Want to [learn more about these results](https://npms.io/about)? 
I think the problem here is that promises aren't directly tied to HTTP requests. They're tied to asynchronous functions that you would like to stick in another "thread" (I say "thread" because it acts like one, it's not really a thread). Just because HTTP methods are also async functions doesn't mean all promisable functions need to be cancelled. There are many libraries that already offer cancelable HTTP requests, and the ones that don't should be given tickets to fix (or should be given PRs with the fixes in place). These HTTP libraries can also be wrapped in a promise, but should that promise offer cancellation functionality on something it knows nothing about? The problem is that people are suggesting that a promise does everything without understanding that it's just a wrapper around a long-running function.
Hey, thanks for helping! The `$1` syntax is neat.
It'd make learners tend to focus on the app development and disregard the details of the JavaScript language. i.e. more focused on the app framework's classes and methods, rather than JavaScript objects, functions, statements, operators, etc.
[removed]
Note that string values are immutable in JS, unlike arrays, so methods called on them must return new strings rather than modifying them in-place.
They're eagerly evaluated, so impure (making it harder to abstract cleanly), their resolve and .then methods duck-type &amp; auto-unnest (so they can't truly be made to fit basic ADT laws or specs like Fantasy Land), and they swallow errors even outside of the original constructor (since every .then is implicitly a new constructor with its own try/catch) which gives you a lot less control and also forces expected errors and unexpected ones into the same channel (not to mention also making them very slow)
Holy shit that webpage is ancient.
npmjs isn't for now showing the scores, but you can check them at: https://npms.io/search?q=mobx As you can see the code quality of those first packages are all very good. You can even check every information that is collected about that package at: https://api.npms.io/v2/package/mobx-utils
thank you! have a nice day
It places your front end deps in a different directory than your backend deps... thats it.
Yes, it's for others, who are passionate about learning javascript too! Learning should be free! :) see, www.programmingbuddy.club for more.
Yes, it's for others, who are passionate about learning javascript too! Learning should be free! :) see, www.programmingbuddy.club for more.
cool...
Oh, I love his stuff. His new egghead.io series has a bunch of stuff on Task and semigroups that's great. Flutures and Data.Task from folktale are also something I keep a close eye on/use. My recent work has a type that's an... Array (or not, if it's empty) in an Either inside a Elm-style RemoteData type as a single key redux state store that's driven by Task-based requests (which wrap xhttp, and autocancel if the calling view is unmounted). It sounds complicated, but it's extremely natural when folding the data out into a React view (because every case is accounted for and indeed HAS to be dealt with).
The two big things that Preact doesn't have (from my experience at least) are controlled inputs and propType validation.
Their rationale was that not everybody used it and so it made sense to leave it out. At first I really didn't like that, but upon reflection, proptypes didn't really do a lot for me. If you really want assertions, it would be better to just use something like Flow. I'm making the switch right now at work. For me, the lack of controlled inputs was a bigger deal. I really don't like the idea of having the DOM be a second source of truth for my app. I built one of the frontend services at work using Preact and then switched to Inferno. It's a little bit heavier and younger, but I've found it's quite a bit more ergonomic to use. We deployed it to production a couple weeks ago and it's been great so far.
`.flatMapLatest()` handles this scenario. [Someone else's example](https://jsfiddle.net/leahbentley/rc8uba90/)
I think that suggestion of releasing both with the same versions is pointless - just have one repo that can't get desynced. So, having worked on systems with dependencies like this, this solution seems flimsier than ever. We've now got 2 repos + a list that has to be in sync with their histories. At least with a single repo you can have a frontend and backend directory and you have a solid feel that if you check the repo at any point in its history the parts will run correctly together. If either part needs to be released alone you can easily build a heuristic to compare changes in a subtree vs a tagged release in order to work out whether this is viable. I'm struggling to understand the utility of two repos.
It's not really worth your time, to be honest. This is something people do because they believe that they should. However, these style guides really primarily offer relief from the differences found in working in a team where people disagree. For your own private stuff, just go through the eslint rules once, turn on the things that prevent bugs, then go on your merry way. Don't get too bogged down in things like this. 
Standard is not a standard. To be honest, I found Airbnb in startups I worked at way more often ; and enforced by people serious about js. Also, no commas is idiotic, which makes standard an idiotic JS standard. I agree mostly with /u/StoneCypher comment: those guides offer only relief from the differences in a team. ESLint all the way. The tool is always right!
CSSTransitionGroup which is wired into React and cannot be used with preact
Maybe, I'd be interested to see what the approach is. My understanding was that there is no real way around it, but maybe there is. The mandatory opt-in to it would still be an objection even so: unexpected errors should fail outright, imo, not get subsumed into a channel that normally handles unwanted, but non-error, results. The stateful nature is still always going to be an inherent slowdown as well. 
&gt; It's to ensure code is formatted and used in the same manner. which rarely applies to single developer projects &gt; Linters can also be used for Notice that I was pro-linter, and told him to go look for these things. What I'm anti- is style-guide.
it's react, so it's babel, so this is a non-issue
yes. why?
With the way that Promises are designed to work, there is just no way to have a generic Promise object at any given point in the promise chain and expect it to be cancelable. That's just dumb. Apparently my opinion is unpopulare but as /u/dmtipson mentions below, the fetch API is not likely to be revisited which is the crux of the problem. As others mention, there could be a Task object or "CancellablePromise" object that is works as you want, but the API contract and way it works would likely be very different from the way Promises work today. It seems pretty straight-forward to me why adding a "cancel" method to the Promise API is not going to be useful or work as desired in most cases. I stand by the fact that this is a corner case related to APIs that might not have thought about users wanting to cancel them and the generic base Promise object should not implement a "solution".
I'm talking about the code executed in node (such as his webpack config)...
I use [my (Airbnb-derived) own](https://www.npmjs.com/package/eslint-config-flying-sheep). I think picking Airbnb and changing it to your preferences is a good idea of you're opinionated. If you aren't, standard is a good idea since it comes with tooling to fix non-compliant code! It helps you to ensure a consistent style, and ESLint generally serves to avoid error-prone code.
Why shouldn't being consistent be a good idea?
nobody said it shouldn't.
[please stop downvoting for disagreement](https://www.reddit.com/r/ClickerHeroes/comments/574yty/psa_the_downvote_button_is_not_to_show_that_you/)
I keep a big list of links to high quality tutorials and articles on React, Redux, and related topics, at https://github.com/markerikson/react-redux-links. Specifically intended to be a great starting point for anyone trying to learn the ecosystem. 
using style rules in your ESLint config helps you with that. you just said to not use that kind of rules. you’re contradicting yourself
&gt; so they can't truly be made to fit basic ADT laws or specs like Fantasy Land Can you expand on this? What's wrong with considering `Promise.then` on a `Promise&lt;T&gt;` to have the type `(T -&gt; (V | Promise&lt;V&gt;)) -&gt; Promise&lt;V&gt;`?
Nice work. Needs to scale rather than scroll on mobile though.
Should just rewrite the webpack config to support pre-7, no reason to write a transpile for another transpile process. Either way, minor issue since node 6 supports a majority of ES6.
Anything by Wes Bos. Most of them are insanely cheap or free. This guy had won a few awards for his work! I found it really approachable and I'm a designer with pretty limited experience outside of pure front end code - he makes learning MVC (really just V) patterns simple. Which is wicked hard to do! Ex: https://learnredux.com/
AirBnB
Yah, it not smooth on mobile...I will consider to scale them.Thanks for feedback.
Just curious - why?
Getting started is still a joke why is there no explanation of the terminology between loaders, plugins extensions etc
only incompetent developers put 4 spaces though
.then() is like both map &amp; chain/bind/flatMap rolled into one, automatically duck typing to do one or the other instead of taking any value and behaving lawfully (Promise.resolve has the same problem, breaking the laws for .of). ADTs and their interfaces generally aren't supposed to check or behave differently based on the inner values: they're supposed to explicitly model a particular context without making assumptions about what's inside. Because of this, with FL compliant types, you can often swap out one type for another in a composition and rely on very strict behavior guarantees (like writing Tasks but then in testing using Identities to test operations without waiting, or the reverse: writing your operations starting out using Identity and then adding the context of, say, Maybe or Task or IO or whatever later on). That's not soooo so bad in most practical cases (you just have to be careful, and a Task[Task] isn't exactly a common pattern), but it still gets weird if you want to rely on higher abstractions and it prevents you from defining other interfaces. Things getting unexpectedly weird is exactly what FL compliance is trying to avoid. 
Well I thought it was funny, people here get their panties in a bunch because someone makes a joke.
Yep, this is the "scope smuggling" approach that cancelation Tokens were going to sort of make routine. But it still doesn't solve some problems, like, what if you want to bundle .then( x =&gt; x.json ) into the return value of some function using fetch: then you no longer have access to cancelation unless you increase the scope of the cancel function, manage multiple ones that could be in the mix, etc. Or have each new Promise derived from the cancelable one inherit both its cancel function and maybe even merge it with a cancelation for ITS effect... And then there's the problem of what happens if the promise is used multiple times, and one "subscriber" calls cancel but others do not. Bluebird manages this by having to keep track of all derived Promises. It's not that it's an objectively unsolvable problem, it's that there are tricky implications and edge cases that have to be dealt with, and most of the solutions involve cascading states and messy extra interfaces.
oh, i read most carefully. consistency also means style rules, not just “those that prevent bugs”. you argued against style rules at all, but fore consistency, while the former help with the latter.
The scroll wouldn't be too bad if you didn't rescroll to the top after choosing a choice below the y barrier. Pinch zoom would be nice to scale it, and remove autoscroll...or rescroll to the last position or selection immediately. 
&gt; If ! becomes an infix operator, that code will throw. standardjs won't tell you anything. Your code is simply less future proof. good thing that can’t happen, because ECMAScript is backwards compatible. JSMin can’t correctly parse JS, that’s the real bug here. (see “Caution” on its webpage: [here](http://crockford.com/javascript/jsmin)) /edit: the creator of JavaScript [explains it best](https://brendaneich.com/2012/04/the-infernal-semicolon/)! &gt; Also, no semicolon is grammatically incorrect, the fact that asi exists doesn't make it correct. Haha you’re funny! ASI is part of the grammar
man? no thanks ;-)
Can't stand 4 spaced code. Just because my text editor has a horizontal scroll doesn't mean I want to use it. 
I know but this jQuery plugin is lighter.
You are a smart boy ;-)
Turned on developer tools and got a perfect score by looking at the img file names.
If your backend is a BFF backend, then you should keep it in the same repository. Otherwise, as projet grows, the need to split will come. BFF: [Backend For Frontend](http://samnewman.io/patterns/architectural/bff/)
I stand corrected on new infix operators. However it seems to be pretty much a hack and another complication due to asi ;[1, 2, 3] is needed but ! true is correct? Seems even weirder. &gt; good thing that can’t happen, because ECMAScript is backwards compatible. Python 4 is backwards combatible and lots of code will have problems during the transition. &gt; Haha you’re funny! ASI is part of the grammar ASI is part of the language, not of the grammar: https://www.ecma-international.org/ecma-262/5.1/#sec-7.9 First rule : &gt; When, as the program is parsed from left to right, a token (called the offending token) is encountered that is not allowed by any production of the grammar, then a semicolon is automatically inserte
"Components"
I don't understand why we should get rid of HTML (I know you still use it) and all that came with it (syntax, concern separation). I tried jsx and I didn't like it for being in the middle of JavaScript, for the change of atributes names, JavaScript in the middle of the code... Using JavaScript to create elements is even weirder. To have the option of having the template separate makes much more sense to me, to have a string with placeholders... In the end all seems to be about comfort for me though. I actually don't like the CSS transition thing also but that is not an issue of jsx but the virtual dom and the way react does stuff.
The back of the cards is translucent in Firefox, all cards are visible.
So in order to *really* understand JS, one needs to understand the ASI rules (otherwise there are gotchas like the `return\n` thing) `;[1,2,3]` is to prevent `something\n[1,2,3]` to be interpreted like `something[3]`. The semicolon could go anywhere between `somewhere` and `[`, but to avoid this situation people usually use one of those habits/tools: 1. always end statements with `;\n` 2. always prepend `;` to lines starting with `(`, `[`, `+`, or `-` 3. never start a line with such a character (use `for..of […]` instead of `[…].forEach()`, don’t use IIFEs) 4. use a linter I use 3 and 4, because manually written IIFEs are useless, I prefer `for..of`, and a linter catches much more problems &gt; &gt; good thing that can’t happen, because ECMAScript is backwards compatible. &gt; &gt; Python 4 is backwards combatible and lots of code will have problems during the transition. i think you underestimate the effort that goes into JS backcompat. New version have to be literally *completely* compatible with all spec-compliant JS ever written. Brendan Eich’s post sketches this: They’d have to include `[no LineTerminator here]` tokens when introducing new infix operators because ASI would otherwise break previously valid code. And that’s a no-go for JS. &gt; ASI is part of the language, not of the grammar: Hmm, seems like you’re right, sorry! It’s pretty weird though: E.g. the [*StatementList*](https://www.ecma-international.org/ecma-262/7.0/index.html#prod-StatementList) is clearly defined without semicolons, while the [for loop](https://www.ecma-international.org/ecma-262/7.0/index.html#prod-IterationStatement) has them. so the grammar can’t exist without being extended by ASI if i understand correctly·
[Chrome OSX] when i get a pair wrong, one of images from the previous pair flips again, nice background tho 
Usually I just Ctrl+A, Ctrl+C the page, paste it in a text editor, delete all the junk and then copy-paste again into Excel for another round of cleanup.
&gt; you argued against style rules at all I actually did not. Please have a nice holiday. I'm not interested in arguing with you
Yes, there's some bug in there that will flip single images of already solved pairs back and then the whole thing can no longer be solved.
Just do something like this: function to_csv(table) { var escape = str =&gt; str; // your escape function var rows = [].slice.call(table.getElementsByTagName('tbody')[0].getElementsByTagName('tr')); return rows .map(row =&gt; [].slice.call(row.getElementsByTagName('td')) .map(col =&gt; escape(col.innerText)).join(',')) .join('\n'); } Takes a table element as input and returns CSV as text.
Yes 95% of my code is one or two tabs deep, and comfortably fits within 80 characters regardless of indent spacing. But for the 5% that necessitates deeper nesting, 4 space tabs get ludicrous in a hurry. That alone is reason enough not to use it in my opinion. But personally, I also just think it looks ridiculous. 
The free egghead intro to react course is fairly solid. And, for redux, certainly no resource quite as amazing as Dan Abramov's course, although it is quite fast-paced so it probably is worth watching it a few times to really let it all sink in.
Your demo looks good. I wouldn't bother trying to match that design exactly. I don't think it would be an easy task or run quickly. 
I was doing something similar for a game. I think the better way is to create a vector from start to end and fill that space equally. 
I've only got left to say that modern runtimes can use for..of, and block scoped const/let. An IIFE is basically a crutch to get a new scope for variables, just like const/let works in combination with a raw block.
It is up to date :) he updates it once angular updates their framework. Not sure how much longer he will update it for though.
You can just interpolate the coordinates/timestamps of the circles you draw. It's not perfect but better.
This matches my experience. I started with 4-spaced, and at first 2 seemed claustrophobic. Now 4 looks so far apart related pieces of code look disconnected. I do think 2-spaces is the "correct" choice, but it does not make a huge difference. 100 characters probably makes sense considering modern displays and the tendency for veryDescriptiveVariableNames. When I really get annoyed is when I have to make a simple statement multi-line because 4-spaced indents and long names have conspired against me. Agree that often an 80-100 character lines indicate complex enough logic that it *should* be multi-line though. 
last 2 versions policy when testing because most of the browsers are quite backwards compatible, except in the case of IE where i actually test IE10 upwards to the current edge.
I'm gonna try this or the interpolation and see which solution work better!
I'm gonna try that and update the pen!
I think it's a matter of just trying it out. Make a relatively simple app in both React and Angular 2, and see what you like better. Angular 2, from what I know is better known as Angular, since the next version, Angular 4 is going to be released in a few months, just so that they can use TypeScript 2 fully. (source: http://angularjs.blogspot.com/2016/12/ok-let-me-explain-its-going-to-be.html). In terms of mobile, I haven't tried NativeScript yet. React is working on an improved engine called React Fiber, (https://github.com/acdlite/react-fiber-architecture) &gt; is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is incremental rendering: the ability to split rendering work into chunks and spread it out over multiple frames. I've tried React Native a bit, but the developer experience to me is still kinda awkward - when I launched the basic standard app but I had trouble making my phone do hot reloading or any reloading of any kind, and I would have to tell adb to expose port 8081 everytime i hot reload. 
Just finished building an live-content streaming app with VoIP at a company here in Denver. We set out to support IE10. Eventually we decided to drop IE10 support and target IE11 since the cost was too high.
The two javascript snippets are identical except the URL they hit. All signs point to a difference between `entry_delete.php` and `draft_delete.php` Perhaps they don't return the same thing? Still, you'd get a different alert. Actually, if the response code isn't 200 you won't get anything. Check the network tools when you hit the one that doesn't work and look at the actual response the server is sending. Might be a 500 or something that the JS code doesn't handle.
You must be new with js, it was like javascript 10 years ago. Maybe the result of "php/entry_delete.php?del=" is different ( xmlhttp.readyState != 4 or xmlhttp.status != 200). And you should use console.log instead of alert. Use developer tools to show this.
But repeat messages are meaning of twitch chat Kappa
Not sure if a link to the github issue has been posted already, but if not it is truly worth reading the comments: https://github.com/tc39/proposal-cancelable-promises/issues/70 Love how the community was genuinely concerned about the developer. 
There's probably some ways of doing it with global composite operations or blend modes. But a clean way of doing it is with a path that trails behind the ball and a radial gradient to give it a fade. Here's an example implementation trying to match your reference. Move your mouse around the canvas to see. The code is commented but feel free to ask any questions. http://codepen.io/mattdesl/pen/oYRmZw A more involved approach would store history states to get a bit of "twist" so it doesn't feel so rigid. I wrote about this a while back, it might be a good reference for this sort of thing: https://github.com/mattdesl/lwjgl-basics/wiki/LibGDX-Finger-Swipe
Thanks for explaining. I like to separate the two a bit also, but a string template is too cumbersome if you ask me, even if it's a template literal. I like the `template` tag in Vue better than both JSX and template literals/strings.
Sorry buddy, you're probably going to need to read/write some code for this one. There isn't a simple way that doesn't require a basic understanding. 
[removed]
Solved scroll problem by adding meta viewport user-scalable=no.
Lol, that happened to me also...But i knew the animals
Lol removed now
Nice, thanks for the example!
Yah, it is mozilla backface-visibility issue tho.
Ooooo, that's good.
thanks for that, I'll have it in mind!
Have you tried contacting any of the bttv developers? It would be great if you could get them to incorporate this into bttv.
IE9. Money is money, and really it's not that hard to support. Fewer layout issues than current Safari and runs babel's transpiled code just fine.
Wow thanks for posting that link!
(Full disclosure: I’m one of those who feel sad about the current state of the JS ecosystem.) With that out of the way: how is kopy different to Yeoman?
We'll support IE11 for at least 1-2 more years, unless some cool new framework comes out that demands service workers, web components etc :)
Google doesn't know about anything about the quality the package. This example is pretty cool: https://twitter.com/zebnat/status/813016534285217792
you're comparing apples to oranges. NG2 is a fully featured, opinionated framework. React is a view rendering library, which you can use in a framework. Redux is the default library to pair React with, but again, it's not complete and requires you to integrate other libraries to provide data fetching, routing, form validation etc. It's a great library, and you'll inevitably learn a lot about architecture - but you'll probably want to rewrite your application core after 6 months when you realise the long term implications of your early decisions. It's really a question of choosing where you want to pitch your tent along the axis between freedom and convention. The advantage of opinionated frameworks is that you don't have to reinvent the wheel. The disadvantage is that sometimes you realise you need a boat, not a wheeled vehicle, and then it gets painful to extricate your application from the framework. I can't speak to NG2 having no experience with it, but I did a fairly beefy app with ng1. I use React-redux at work, and I really like it - but as I said, we wrote our own core. I would base my choice on the following: * does it help me get work once I've learnt it? * do I want to work in the places that use it? * will I deepen my general understanding of architecture through using it? * do i just need to ship an app in the shortest possible time? * how long will I need to maintain the app? will it need to scale? * do I like using it i personally feel that NG2 (as with NG1) is just too opinionated for me, skills I learned in Angular were not really useful elsewhere. Redux, however, left me the freedom to explore architectural ideas fairly painlessly, and I'd certainly use it again. If you need to get from 0 to product quickly, I might take a look at something like Vue/MobX/Choo - all lightweight frameworks, with some batteries included, but less lock in than NG Other than that, as others have said, just try and build a little app in both and see which you prefer. 
https://medium.com/js-dojo/react-or-vue-which-javascript-ui-library-should-you-be-using-543a383608d#.vt6ug8m35
The whole page is getting re-drawn every time you scroll which makes it janky. add transform: translateZ(0) to .grid {position: fixed;} That should reduce some janky though not all.
Look into some of chat bots used on twitch.tv in pretty sure you some are open source with guides as many streamers are not tech savvy. 
I am also in your situation my friend
Evergreen and fuck Safari.
IPad Air wifi (three generations back, superseded by Air 2, then two iPad Pro versions), released in late 2013. Viewing his demo on iOS Chrome, which uses the Safari webview. Also super janky in Mobile Safari 10.0. Tap and drag sometimes pauses, or simply stops responding until the next initiated drag. Tap and fling (to scroll very quickly using inertia) often simply does not work.
I have tested it. You can generate VERY obvious parallax things with this technique.
Mobile Web dev reporting. iOS (Safari) 7+ * Bug reports for Chrome+iOS go straight into trash. Not a real Chrome browser, no matter what version of WKWebView it's on these days. Android (Chrome) 4.4+ * Android 4.3/Stock browser can't render most of the useful CSS these days. * Chrome, most versions in the wild have what we need. HTML5/History * Test on Samsung Internet once in a while. Thanks Samsung! /s
At my job we continuously look at our analytics and make our decisions regarding browser support based on the percentage of visits we get from each browser. Currently IE 10 still makes up for about 4% of our IE traffic and not supporting it would mean less money. Our site has to be 100% functional in IE 10 and look good for as long as the revenue from these users is still relevant and the cost of implementing fallbacks and alternatives is still worth it. However, we would not switch to a JavaScript-based version of a CSS feature because IE doesn't support it. In this case we would just make a less fancy fallback, or in the worst case even disable a feature for browsers that don't support it. We may drop IE 10 soon but IE 11 is still very relevant and will have to be supported for another while. Safari is also becoming a problem though. For personal non-commercial project, however, I wouldn't give the tiniest shit about legacy browsers. It all depends on your audience, and whether this audience makes you money. _Fun fact: In the last 30 days we had 7 users using IE 4.0_
I have my doubts that he will influence 16 a great deal. Fiber is almost complete and I think 16 will be released when it is. But I wouldn't be surprised to find out he has a significant influence on React/Fiber from that point moving forward. 
I guess Inferno will be abandoned, right? Edit: Apparently not.
I have deadlines. I'm not reimplementing stuff that works if I can include jQuery with a single line. Everything I write has to be tested and verified. This has already been done for most of jQuery. 
Hey thanks for checking this out! I think getting some of this functionality into existing twitch extensions is the right way to go.
In a way if it was, that's a good thing, no? Fewer choices going around and more consolidation in a JavaScript community awash with option paralysis. Could be a good thing. 
You should really pair your answers with your line of work or purpose for development in the first place. The decision on what to support depends on a lot of things. Some rando with a bootstrap website saying "*evergreen only*" doesn't really convey anything meaningful.
I'm sure you're capable of figuring it out, but what I described is a lot of work, especially if you haven't done that kind of thing before. So yeah, whatever works.
Dominic is one of the coolest people on the scene right now. Incredibly humble, always willing to help, and just overall a great dude. Very happy for him. =) and that's to say nothing about Inferno, one of my favorite libraries.
Hey everyone, this game is now a progressive web app, so enjoy the gaming offline.
The man does know his symbols.
Pretty much anything for which there is a jQuery plugin, there's also a stand-alone library that will work just as well. Some of the more popular jQuery plugins have even turned into stand-alone libraries over time (JS-Cookie comes to mind, but I've done the same with my Selectivity library). I won't deny jQuery is useful and has plenty of useful plugins, but nowadays I'd be hard-pressed to use it in a new project of mine as the need for it has mostly dimished.
Protip: proofread that
I tried this: `Math.abs(3 * Math.sqrt(i/2.5))`, that sets the curvature outwards, do you know how can I set the curvature inwards like in the picture? I can't figure it out!
You shouldn't need Math.abs. You can make that curve inwards by subtracting it from 1 (or some other constant, but you'll probably want to divide the whole thing by that constant then, so it starts at 100%). Note that any sqrt based function you do this with will eventually cross the x-axis (because sqrt goes to infinity). You can just clamp that to zero, or try a different function that has a horizontal asymptote, so it never quite hits zero.
Yeah you can just do `Math.max(0, &lt;your equation here&gt;)`
I'd say the bigger question is how it compares to React. From all the debating I've read, my opinion is that unless you have a massive SPA the size/speed differences between most of the libs in use remain negligible and it mostly boils down to whether you like the dev experience with Vue or React better.
true
I'm sure many would disagree with me though! 
Why not you implement a configurable higher order component for React? ;-) Yeah, I know it would actually not be that hard technically to create a react component. Finding a name for it would be hard tough - "react-javascript-less-parallax-js" or maybe "react-parallax-pure-css-hack"?
This is nice. Really cool with the iterable support. If possible, it would be cool to have an option to lose some features that require Proxy support, since that can't be fully shimmed (or do you only need the shimmable parts?).
Appreciate you testing out the lib and pointing out the other alternatives to js based parallax. Google's CSS version is preceded a couple of years by Keith Clark (http://keithclark.co.uk/articles/pure-css-parallax-websites/). The concept was laid out (no pun intended) and subsequently pursued by the Mozilla and Chrome teams to make it work across browsers and devices. The Google article you linked to does show more formal endorsement but still maintains a few of the bugs from Keith's 2015 version. The current main bug is that scaling DOM content introduces blurriness which is most readily apparent with hard edged graphics (as example: http://assets.itsnicethat.com/system/files/052014/536ba6a45c3e3c7115003afc/images_slice_large/afd-shapes.jpg?1438270354). For our initial use case blurry images (and a custom HTML layout) weren't an option which is why it made sense to write Rellax. But as more retina screens become maintstream and browsers improve their scaling algos this will be a solved problem. Again, thanks for your feedback. This is my/our first open source library and I prefer critical responses like yours that help me think more deeply about the problem and perspectives.
Oh, well, I don't really have that much experience with other languages except for html, and that's minor. And yeah, that's the kind of bot I'd like to make.
I'd take the advice of the other redditor who commented and look into already existing chat bots. There should be a lot available that are customizable. I don't think this is something you'll find developers willing to help you with for free, however. 
You see how easy it is to get hired at facebook? All one has to do is create the fastest virtual DOM implementation. No biggies. I wonder if he got the same interview normal candidates get.
Without Proxy it wouldn't be possible to access numeric properties (for example `r[2]`), because they're generated on demand. I could make a function like `r.get(2)`, but IMO it's more convenient to access them like array indices.
&gt; I need to meet other humans that like javascript. Have you considered going to a Starbucks in San Francisco?
How about validate.js? http://rickharrison.github.io/validate.js/
Thanks. That looks interesting. I'll check it out.
Exactly, I will edit my original comment
Good for dominic I guess... sad for inferno....
Since we are in this topic, is it possible to use webRtc technology to create a p2p online game with a browser-client being a server? I mean, I need a server to know which computers are the host of the game room, and list all current game rooms. This way a user can host a server in it's own computer and all other computers will connect into him.
I thought it would be sad too, but Dominic has said he wants to continue to help the core team of the project. I am happy that Inferno will will continue too. https://twitter.com/inferno_js/status/813485194535575552
I know but I fear it won't be the same... Inferno is my favorite framework. :/ Anyway, totally understandable. Gotta put food on the table.
Oh, I'm already there ;) I've had so much fun with Inferno and the community. Won't abandon it just yet. I guess in the end it's just Facebook that makes me so sad. I love all the enthusiastic and wonderful programmers working there, but the company and the product... Feel very conflicted now. However, congrats and best of luck!
I believe it is yes. You can connect any browser to any number of other browsers. So you could select one browser to be the master, and connect that one to all other browsers, while the other browsers only connect to the master. The master then distributes any messages it gets to the other browsers.
The twitch bots can be used anywhere not exclusively twitch.com. From my understanding a lot of them are pure JS. What your asking is something most web devs / js devs would asked to be paid for. My rate starts at 22usd/hr and goes up with complexity. JS is a great language to learn. Tons of resources for it across the web, plus it sounds like from another comment you have some HTML experience. Learning and using js is a valuable skill to have in today's market and will grow in value overtime as we become more web dependent. But if you don't want to go that route you will have to be lucky enough to grab the attention of a developer that has interest in your project. (Thus why I recommended have more details since devs are EXTREMELY cautious of projects with poor project details) 
Sarah Drasner just published a guide to 2017 front-end conferences for CSS Tricks: https://css-tricks.com/guide-2017-conferences/
Have you considered going to a Starbucks in any major metro area?
They are not the same, or even close. Are you doing client side or server side JS?
PSA: the creator of an open source library getting hired somewhere isn't the death of that library :/ 
This is one of the things I miss most from Python. I really wish `range` was in the JS standard library.
If you're working on Front-end / Web related technology it really feels like Facebook is the top company to be at. Congrats to this guy!
[This one's gonna be big.](http://conf.reactjs.org/)
I did see that. I think that's what made me think of this actually. I'm looking for more stuff like this. Thanks! 
You can definitely recycle some Python (not Java) concepts in JavaScript. Since you're already programming I would go through MDN's splash page https://developer.mozilla.org/en-US/docs/Web/JavaScript then come back here (the internet) when you get stuck.
&gt; Should I start looking for another job? Yes! That doesn't mean you have to take it, but developers are pretty high in demand now. Good ones, at least. Usually that just means being a nice person and having the ability to learn from mistakes, read about and try new things (new to *you* that is). One year in is still pretty new so just keep learning and getting better, but don't let the job bring you down. Happy coding :)
You guys rock
This is great. Between this and Fiber, Facebook seems committed to pushing React's performance.
The same way car and carpet are similar.
Til [this parallax.js script with dom manipulation _and_ event listeners (scroll!)](http://googlechrome.github.io/ui-element-samples/parallax/scripts/parallax.js) is 0 btyes gzipped. The demo doesn't work with JS disabled :p
And the connection will be directly between the 2 computers, without a server between of them? 
I'll be going to the [Portland react native conf](https://infinite.red/ChainReactConf) this summer. Lets get some beers :-)
If you're not interested in using a library, I'd advise you to at least look through the libraries and other similar code to get an idea of where to start. If you already know javascript better to start there and do both the front end backend in javascript(node.js). You might make your life easier using a component library (react, vue, angular) to better keep track of you Shop UI state. Since it's ecommerce i assume you'll be wanting to implement a payment system. I recommend Braintree which has a javascript SDk and support pretty much every payment form. There's actually a lot more to building an ecommerce site. Feel free to message if you have any specific questions. Also if you have discord, I'm usually online there.
That sounds incredible. Any idea how much it will cost? If I can't afford it, maybe I'll just come out for the beers!
Good move by Facebook, React really needs this. I'll be moving to Angular 2 though: * TypeScript * I prefer templates than JSX * No need to waste time developing tooling since the CLI takes care of all that plus other nice features such as scaffolding * Standard project structure Both React and Angular 2 are great, this is personal preference.
You should not advertise that you can handle a payment system when you can't.
You almost have 'templates' by having components that just do rendering. For a little while it's been the 'best practise' to do things that way. You can use typescript with react.. nothing stopping you. create-react-app takes care of cli and project management. At this point I think it's more towards preference and inertia, nothing wrong with that though.
Except most of their questions are not even related to web development at all. How often do you sort AVL trees in web dev?
also, spam
Learn more about it, maybe? You shouldn't be putting anything on your portfolio you need to ask questions about how to achieve. That's the exact opposite of what a "portfolio" is meant to convey. 
&gt;You almost have 'templates' by having components that just do rendering. For a little while it's been the 'best practise' to do things that way. Is it no longer always the best practice? Can you expand a bit on that please? 
24 years as a programmer, I can say never. 
&gt; You almost have 'templates' by having components that just do rendering. For a little while it's been the 'best practise' to do things that way. To expand: Yes, this is dubbed as "presentational" components, whose job is just to do presentation, and nothing more. https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.12xz0ku3g Following this pattern would allow to make more React components reusable across the app, not just focused for that one specific moment. 
Holy shit I'm stealing this
react-perspective-origin-parallax
Hi /u/avi00, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Yes, never when developing business apps. When developing device drivers on the other hand... 
I've focused on developing business apps and commercial products. Mobile apps and web is all I do now. I never wrote any device or hardware stuff, except porting apps written in C/C++ to other platforms. And I stopped that stuff about 14 years ago. That's why I think it's odd that some interviews focus on the wrong thing. Problem solving for the job is more important. 
Sorry if my grammar made it seem like it is no longer the case, it absolutely is ! as /u/hrgui mentioned they're called presentational components. React, Redux and Inferno all "suggest" you design your components this way and have them take functions that trigger events, and their data to display through pros.
Someone has picked a misleading title for this article. Wouldn't *The Problem with Different Browsers in 2016* match much better? The case study shows, that `matchMedia` has been implemented differently and web developer need to handle those issues since - yeah, when, 1993? I don't want to whitewash these issues, but they aren't really bound to (specifications of) native APIs.
You could use [phantomjs](http://phantomjs.org/) Here's an example for your specific use case: var page = require('webpage').create(); var url = 'http://www.unixtimestamp.com/index.php'; var timestamp; setInterval(checkChanges, 1000); function checkChanges() { page.open(url, function() { newTimestamp = page.evaluate(function() { return document.querySelector('#content &gt; div:nth-child(7) &gt; div:nth-child(1) &gt; div &gt; div &gt; h3:nth-child(3)').childNodes[0].nodeValue; }); if (newTimestamp !== timestamp) { timestamp = newTimestamp; console.log('timestamp changed', timestamp); // will always trigger of course, but it's just an example } }); } You could start from something like this to achieve your goal :)
&gt; Nice to see a cto not going with the hype though just because. Thanks! My main personal goal is to be a relevant CTO even in 20 years, so I'm always trying to stay on top of the game. Don't want to be that guy that people hate showing up in meetings or discussions.
[Support is actually OK so far](https://jakearchibald.github.io/isserviceworkerready/), the major dealbreaker being of course iOS, but there have been some positive signals from them lately, which signals to me that it's coming along nicely. Worst case scenario, you have a normal website on iOS and a PWA on Android.
good work, but I must say that the jquery guys are first-rate, that being said I think that it is important that there should be standalone scripts like this for the sake of creativity, imagination, freedom of expression and so forth,
Single page app ? Ajax support ?
I don't know, do I get time to Google it? Or would that be in poor taste while interviewing for Facebook I wonder...
SPA preferably, yes ajax.
well thats not really js framework, the backend will be some form of c# mvc, but thats besides the point
Who uses a framework to write a CV?
https://www.youtube.com/watch?v=fWNaR-rxAic - The song for callbacks And for Promises I prefer : https://www.youtube.com/watch?v=llDikI2hTtk
&gt; No need to waste time developing tooling since the CLI takes care of all that plus other nice features such as scaffolding &gt; Standard project structure Yes, you're right. Angular is a framework, and React is not. &gt; TypeScript Is a language that can be used with React. Or any other Javascript library. 
For me it hasn't come up that a third party has access to the API for the redux store instance but can't rewrite the application code. Most external actions run through HTTP requests or are triggered by UI interactions. Is this more designed to enforce strict coding patterns?
Create an HTML file, load your JS in it, open the HTML file in your browser?
If you're using JS on the browser context (which you apparently are) be sure to learn HTML first.
I'm working on this right now! Learn programming by making games. Unfortunately I only have the first lesson done. But good to know folks are looking for this.
Awesome, well if you need someone to test your website. let me know :)
I just took some time to look at the npmjs page, but I find it rather confusing. From the "usage" info on npmjs it seems I have to broadcast the data, but when? What if I broadcast if there is no-one connected? There seems to be no callback for when someone connects? So I have signaling data of the initiator, and want to send it to the other player. How do I do that with signalhub?
Perhaps I'm missing your goal but I would recommend a simpler approach. Google is notoriously difficult when it comes to automating tasks, both because their web applications tend to make it difficult to automate DOM events like clicking and form input change events, and it may violate their terms of use. Instead, I'd consider using the Google places API for something like this.
Freecodecamp.com
That calculator is a written for the linux desktop Gnome. You want to learn how to build linux GUIs? The syntax of the JS is ECMAScript 2015.
Mithril js
If you want shopping carts, you really should be learning the PHP programming language, since the vast majority of mature shopping cart solutions are written in that language. I'd highly recommend that you learn one of those major shopping cart frameworks (e.g. Magento), since if you were to land a job in that pocket of the industry, you'd most likely be using it or one of its competitors. The other reason why it's a good idea to learn an established framework is to find out what features exist in the market. Modern shopping carts have a *lot* of functionality that doesn't quite fit the one-table, create-read-update-delete thinking model. Payments in particular can get hairy (because of things like PCI), and then there are features like discounts, bundles, inventory management, internationalization, and all sorts of other curve balls. If that's the sort of thing that you're passionate about and you want to dedicate your open source time to that, then by all means go for it. There are lots to be learned there but be aware that it's a very commitment-intensive endeavour. You mentioned your portfolio, so I assume you're not interested in contributing to OSS, but rather in gaining industry experience for employment. A large portion of ecommerce work involves integrating some existing ecommerce solution to wordpress (and I'll be frank with you, it doesn't pay as well as other pockets of the software development industry - there are lots of picky cheap clients). If you want to leverage your Node.js experience, you'll want to focus on product development (think Trello, Slack, things like that). Node.js is most popular with startups and javascript-centric agencies, and projects vary a lot. IMHO, it'd be more fruitful to focus on full stack development. There's an equally large breadth of topics to learn about, and a lot of that knowledge is transferrable (and pay and career paths tend to be better)
You have files in the same folder right? If so for example, name your JS file main.js (or whatever) and simply link it like this: &lt;script src="main.js"&gt;&lt;/script&gt; But I would suggest that you start with CodeAcademy or something related.
it's not needed to add it. Anyway. In first glance it misses "var" keyword before the `draw`. But anyway. Back to your question. Basically can create some file called "foo.html" and in it is just enough to put your javascript code in `&lt;script&gt;// your js here&lt;/script&gt;` tag. Another way can be to install nodejs and just create normal javascript file and run it with `node myjs-file.js`. Don't be afraid of nodejs, it's nothing special or hard - in 99% of the cases it's same as that javascript in the browser, but with better support for modern features. 
 const getDataThroughRest = (query) =&gt; { const url = c8yBase.url(query); return $http.get(url); } const updateAggregatedSensorData = (childDevice) =&gt; { const query = `measurements/serie&amp;source=${childDevice}`; //Call here getDataThroughRest } return { getDataThroughRest: getDataThroughRest, updateAggregatedSensorData: updateAggregatedSensorData } This is also a nicer way to construct services too in my opinion because you can achieve a level of encapsulation, for example you can split the service into public and private methods and only expose your public api through the service eg. you might want `getDataThroughRest` to be private, all you have to do is leave it off the service object.
I haven't completed it yet. But they have some of the best front end exercises I've seen so far in my js adventure. And they have incredibly helpful Gitter chat rooms. Could it prepare you for a job? I'm sure. But don't limit yourself to one resource. Getting multiple perspectives is very helpful. 
Javascript is a language that was made to run on Internet Browsers like Chrome, Firefox, Internet Edgesplorer, etc. It doesn't have any connection to your operating system, it can run on any computer where you have an internet browser. So try this: Copy and paste this code into a text file and then rename the file to something like "index.html" &lt;html&gt; &lt;script&gt; console.log("Hello World!"); &lt;/script&gt; &lt;/html&gt; Then drag and drop that file onto your favorite browser, and it will automatically run. I added a console.log which will log some text to your console (if you're using chrome hit cmd+shift+I and go to the console tab). Feel free to reply if you have any more questions. P.S. Atom is a great program for coding, but I just want to clarify that it is just a text editor. It has nothing to do with running your code, and if you really wanted to you could write all of this entirely in notepad or something. Atom just has a lot of great built in features to do the equivalent of grammar and spellchecking but for code.
Hi /u/kitanganday, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
There must be something wrong with my iMac because it doesn't appear as it should, even your simple Hello World is not displayed properly, it's just the whole code with the &lt;html&gt;, &lt;script&gt;,... I don't understand where the problem could come from. I tried to download a sample html file that should write some very basic text when opened in my browser but it keeps showing the whole code instead of the text without the &lt;&gt; thing. I tried Chrome and Firefox, same problem.
Yes, it's (a) way to learn. Doesn't mean that's a good or ethical idea to "learn" something simply to put in a portfolio. I'm simply saying that if I were a potential client, and I saw a shopping cart system in your portfolio, I'd be under the impression that you understand that system explicitly - enough so that you wouldn't be putting my merchant account in jeopardy by mismanaged code. If you just learned how to do that by asking some forum online, you'd be leading me to that altogether incorrect assumption of security by putting that demo in a portfolio. Off the top of my head: "How are you connecting to my merchant account? How are you encrypting the user's information? Is it encrypted *at all*? Why are they using Javascript to handle a cart - this is server-level programming territory?" That's all without even touching the fact that you're essentially building an inventory system and chances are you haven't thought of a cart like that. Put it like this: you wouldn't open a mechanic's shop because you just learned how to disassemble and clean a carburetor. You wouldn't open a bridal gown shop because you just learned how to sew a backstitch. You wouldn't open a bakery because you just learned how to bake a french bread baguette. You'd do all those things a hundred times until you know them inside and out and all their variations and what can go wrong and what should go right and *then* open the respective shops. It's one thing to ask for help while learning, it's quite another to ask for help in developing something that is supposed to represent and summarize **your** ability and **your** skill. I'm not reading too far into this either. You asked an extremely open-ended, generic and yet, wildly detailed question in "how can I create a shopping cart (*without a pre-canned system*)", and you fully admit ahead of time that you have zero experience with it ("I have no background in it. I’m starting from scratch."). Up to that point I'm totally okay with it, we all started somewhere. Hell, I've built a dozen shopping cart systems from scratch now. But then you said this: &gt; The website won't be functional, **it's going to be for my portfolio**, so the actual payment system won't work. First, a shopping cart without a functioning payment system - at least one that could function - isn't a shopping cart. And second, a portfolio is basically like a menu, or a sample of what you are telling your clients, "I can do this for you". And you can't. You'd be lying if you included this half-built shopping cart on your portfolio. You absolutely should not add whatever demo you come up with based off this or other posts to your portfolio. It'd be unethical and unwise, because you'll get someone asking for it, and you won't realize you bit off more than you can chew til midway through building it when you start to ask questions. You'll bomb or tarry a project and be left hanging on the bill with a pissed off client. I'm not saying all this to attack you. I'm just giving you a fair and reasonable warning about what to include and what not to include in a portfolio. Don't advertise that you can do something unless you're confident that *you can do it*. You don't sound confident at all in this; you're hardly asking the appropriate questions and you're focused on javascript as your backbone. Giant warning lights, red flags, "Danger Will Robinson!". That's what I hear and see. 
Perfect answer :) 
Also: &gt; Writing bad code is better than not writing any code. Learn from your mistakes. &gt;Read other people's code. &gt;Don't listen too much to other devs / books / blogs. &gt;Do things your own way. Again, learn from your mistakes. &gt;Don't be afraid to reinvent the wheel. You'll learn a lot doing so. http://mafintosh.com/learning-javascript.html
Are you sure the filename is index.html and not index.txt?
Yes absolutely, I even tried to rename it HTM. Doesn't work. I saved it as html, rename it by placing .html. Hopeless. I don't understand how I'm not able to figure out such a simple thing to do...
weird. never had this with sass compilers, so dunno about this less package. check the package git to see if there are any bug reports on this. or try another?
No. I can't see how this bring more value as existing tools to a project. As you wrote in your README.md npm scripts maybe only useful in non-complex build cases but gulp is way better than this. Larger adoption, more production readiness, more plugins so on. 
Forgot /s
HTML, CSS, and Javascript: You're a front-end developer. That's nothing to be ashamed of. You can work out the UI and such of the cart system, along with forms and all that, but don't advertise that you can do the whole, full-stack (that is, the front *and* back end). What you're describing is a blossoming field: Front end UI/UX development. Check out dribbble.com for instance; These are all just little snippets of design, not functional modules or carts. That's what you want to do, that's what you want to advertise. That will land you a job on its own, no back-end needed. 
Yeah I assume Mac hides the true file extension. Not a lot of help I can offer there as I'm on windows.
Got it. Thank you!!
I'm sad to recommend Ext.js, but for IE8 support, that's one of the few out there. YUI isn't officially maintained anymore, but it might be an option as well. The benefit of one of these over the other recommendations here (angular, backbone, aurelia) is that they provide more out of the box, which means less digging around for plugins that *also* have legacy browser support.
Check to see if the site / page has an rss feed.
Don't they have upvote buttons now for "clever" and "best practice" in an attempt to distinguish between the two?
Just use React, or whatever you already know. Newer versions might be dropping support going forward, but the old versions are still there and it's not like there are any significant new features or very serious bugs that have been fixed to justify not using old versions.
They do but people vote both anyways unless it's some insane one line thing. 
I used TextEdit. It's an HTML file, not .html.txt so I guess the problem doesn't come from here. 
Did you ever figure this out?
guys, really? -4? he/she clearly is new to programming. don't be a dickhead.
Does the HTML file start with the following line, or something similar? &lt;!DOCTYPE html&gt; Is it saved as UTF-8? Do you have either `&lt;script src="script.js"&gt;&lt;/script&gt;` (note that nothing is between the tags), or `&lt;script&gt;/* JS code here */&lt;/script&gt;` (note that there's no `src` attribute)? Is this tag below any part of the HTML that it will be modifying? (Usually you would put that at the bottom of the `&lt;body&gt;`.) What browser are you using for this? I don't know whether Safari suddenly started having trouble opening local HTML files.
You need to refer to your resource from your Web root, usually a folder called `public_html`; for example, your Web root might be `/home/dooogle/public_html`, and if the resource is, say, a JSON file called `test.json`, then you might put it in that folder, so that its path is `/home/dooogle/public_html/test.json`, and then you would refer to it as `http://localhost/test.json`.
vue.js way better.
Did you have a portfolio? of what? What in general did you have? What was the interview like? Would appreciate any insight, thanks! type of job and what you do as well would be nice to know.
 &lt;html&gt; &lt;body&gt; &lt;div&gt;hello world!!&lt;/div&gt; &lt;/body&gt; &lt;script&gt; console.log("Running JavaScript!"); &lt;/script&gt; &lt;/html&gt; 1. Open atom (should open and have an area to type code) 2. Copy and paste the code above 3. Click on File (found on the toolbar) &gt; Save 4. The save popup should appear, in **Save As** put index.html, in **Where** select your desktop 5. The index.html should now be on the desktop, open chrome and click on File (again on the toolbar) &gt; Open File .., select index.html from your desktop 6. When it loads you should see a white page with text "hello world!" 7. Right click on the page select **inspect element**, this will open chrome developer tools. One of the tabs in the developer tools should be **console** 8. Click on the **console** tab, you should then see the text "Running JavaScript!" The message is being generated by JavaScript in the &lt;script&gt;&lt;/script&gt; tags within the index.html. Hope this helps you get going! 
Are they using js for the business logic and internal servers or just the frontend (the tip of the iceberg? How many more are? How many complex and relational projects are done in js? Js is not a server language, and it's fast because of the reactor pattern, not the language itself.
The issue is that the _values_ for the specified keys in `updateIDs` need to be strings, not that the keys need to be strings.
I mean what gets me about this code is the lack of things I understand. For instance I would think that there would be some sort of canvas to draw the menu. I can't find any reference to any sort of canvas function. So I literally do not know how the darn thing even shows itself.
http://www.codeabbey.com/ I think it's user posted problems, and you have to solve them in any language you like. I'm pretty newb but I've solved a few now.
He didn't get hired "somewhere", he got hired onto the mainstream version of his project. Big difference.
Consider 1.5 and performing round: Math.round(1.5); 1.5.round(); However, what about 2: Math.round(2); 2.round(); You encounter complex parsing rules, possible ambiguity, and add significant complexity to what should be a primitive. Plus, if it is attached to a number, you can't pass the function as a parameter to another function without defining a new, useless number primitive.
Thanks! I was thinking in terms of variables but when you mention primitives that makes a ton of sense! 
Thanks guys
The proxy thing was something I've actually prototyped just last week as well, your implementation looks much more detailed with the getOwnPropertyDescriptor handler and everything else, whereas with mine I simply have a get handler on the proxy to intercept index access and call the getter, and reflect everything else. Any particular reason for having all the other handlers on the proxy? Would love to know if there's something I could be doing better with my Proxies.
I'm not sure what point you're trying to make. Don't migrate to any new frameworks at all?
After looking at this mess I really appreciate ember's liquid fire. 
I believe the issue was why they couldn't be made static methods of `Number`, the way the strict versions of `isNaN` and `isFinite` are; IIRC the original idea was to imitate Java, except that there's no way in JS to just "leave out `Math`" if you don't need it, the way you can do that in Java. Later on, my guess is that ECMA decided to use `Math` as a namespace for useful mathematical functions, the way it created `Reflect` as a namespace for the kinds of data-reflection methods that would otherwise be static methods of `Object`, along with stricter versions of such data-reflection methods that already existed.
The first example assigns the *return value of* `update` as the event-handler, not the function itself; what you ought to do, instead, is `some_button.onclick = update;`
Who uses backbone in 2017?
Schedule a lunchtime or afternoon "tech talk" and put together a presentation that introduces the concepts of Angular in a general sense. The idea is to talk about a new technology, not necessarily impose it on them. You can keep it general at first, but then end with the benefits. See if you can transition that into a debate about how it could benefit your team and gather other's reactions (maybe you could have a 'plant' in the audience that asks "so how can this help us?"). They may be positive, they may be negative, but it's important to listen. I'd warn you that sometimes people try their best to find negative things when really what's going on is that they're afraid of learning something new. I've done this before with React and it worked really well. I followed up by making a "React-ers" Slack channel where we would post interesting articles. This can help it be more of an organic transition. Edit: Another idea I just had is to schedule time for a hackathon. Everyone learns the basics and goes through a tutorial together and then split into groups to make your own fun project. Could only last a day or two but would go a long way. The rule of thumb in training is 1/3 of the time learning, 2/3 of the time doing.
&gt; and then you would refer to it as `http://localhost/test.json` You don't need to worry about the domain name or TLD, just `/test.json` is fine. You should always leave it relative so you don't have to update hardcoded URLs. 
I think they are making a sarcastic point that Angular 2 was such an abominable train-wreck that you'd have to believe the 'lie' to effectively indoctrinate your minions. 
It doesn't matter. If it has parens you are invoking the function instead of referencing it.
The unicorn error page is from github.com when it's under heavy load.
I've tried using webrtc in a server before but ran into a lot problems. Even the ones that were based on chromium's webrtc code would segfault on me frequently, and ultimately just gave up trying to use webrtc in a server. Has anyone had any better luck with webrtc and servers?
Look into [.bind()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind). So you could do `el.onclick = myFunction.bind(this, "arg1", "arg2");`. If your target browsers support ES6 you could do the slightly shorter `el.onclick = () =&gt; myFunction("arg1", "arg2");` with the same effect. If you're interested in the second option, look into [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).
If it has parameters, then you will need to wrap it in an anonymous function as per your second example.
I'm not sure that Marionette is a great starting point. Honestly, React is so much easier to understand from a conceptual stand point. We have both in our code-base and I now dread having to work with Marionette. But if you're just starting in JavaScript you should really make sure you understand the language first. 
Eh.. that's not really an issue. 2..toString() // Double period (2).toString() 2 .toString() // Note the space all work well. 
Granted you could shift your logic or use a shared array buffer, but it still seems a bit silly that this is a problem.
Where does **public_html** directory reside actually? I found a **public_html.html** in the extracted apache folder but that's not I think you mentioned above. Or wait, are you referring to the path of JS project? On this site, it says that once your apache webserver is running, you can goto: http://127.0.0.1/~USERNAME/ to see the contents and then I can put my JS file in the directory of the server but for some reason this doesn't work for me -- it says **The requested URL /~USERNAME was not found on this server**
e.g. function sumDigPow(a, b) { l=[]; for (i=a;i&lt;=b;i++) {s=i+""; c=0; for (j=0;j&lt;s.length;j++) c+=Math.pow(s.charCodeAt(j)-48,j+1); if (c==i) l.push(i)} return l; }
Oh that sounds like a straightforward race condition Again - I don't have enough context, but a simple 'onload' will probably fix it. 
Object*
if performance issues are what you're hinting at here, a library isn't going to solve much for you =&gt; how you've structured your data and how you're iterating over each request is probably the issue. You should post your code if you want any valuable feedback.
After using the Vue.js [transition api](https://vuejs.org/v2/guide/transitions.html), I can't see myself using this syntax. Angular 2 seems so clunky to me. 
Do not try to reinvent full text searching. Use a time tested library or application. Databases might have it. Solr, elastic search...
Well I followed the steps shown here http://osxdaily.com/2012/09/02/start-apache-web-server-mac-os-x/ to run a webserver and also edited the .conf file located in /etc/apache2/users/USERNAME.conf. I just don't see why this doesn't work for me and it worked for the guy who made this article. Even if you check the youtube video in that link, it seems pretty straightforward and I did the same thing. And yeah, apache folder does have index.html but it doesn't have the public_html directory 
Yes, you are probably right. I now realize that fs.readFile is not the same as loading in the actual browser part of NW.js.
What do you mean by default? The native elements have different CSS defaults. 
I'm wasn't. I was speculating.
I use Fuzzy https://www.npmjs.com/package/fuzzy
Try unchecking the use upvotes downvotes thing.
What about normalize.js? That would be a cool feature, i guess..
That works for me
The upvotes/downvotes checkbox gives me a 404. Otherwise, it seems that rather than "consumption" it's more about "interaction". I consume it several times a day, daily, but only my interactions are taken into account.
Html5 validation attributes and presto. 
I find the most bizarre posts on reddit. I found two within a minute this morning.
Why not, if it's solving problems and make money...
Yeah. The server side webRTC options are a chore to setup and unreliable. The best way I've found is to run a headless Electron instance as your server and treat it as an authoritative peer.
please no
:D Sorry, really
Yea, I'm the biggest retard here :D I just like it.
Gulp is not real streaming actually. So I still can't get why is so loved. /u/ooojtua, what problems? All around gulp is wrong, believe me. :D If everyone love it because streaming - there's no real streaming there. But anyway, the biggest problem and slowness comes from node-glob which is used, because the lack of other so many years. Gulp4 is better. But it is delayed for years. Gulp4 has that modern "presets" thing aka shareable configs and tasks. Start is absolutely small and the cool is its simplicity sitting on top of the power of promises. /u/mlebkowski there's no big advantages, it's a matter of thinking and self prefs.
Don't now if "up" is working on reddit (damn I'm so old ?), but I try :p I also started working on something.
I think those are actually some great tips. Ground work for not only learning various frameworks and tools, but also just becoming a more effective developer with JS. People skills, especially for working with designers is also very valuable :)
Upvotes/downvotes only works when you've set those to be public in your Reddit preferences
just don't and let backbone RIP.
Why are there pictures of trees in this article? I agree with the article's content as in write clean, readable code but maybe a good thing to learn would be to not litter your frontend with unrelated imagery?
You could: 1. Think of a project you'd like to develop and try to build it; 2. Practice at https://www.codewars.com; 3. Try to learn libraries like jQuery, Vue, and React.
It's not a list of frameworks!
Hi /u/tim_macgyver, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `askmacgyver.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [askmacgyver.com](/search?q=%28and+site%3A%27askmacgyver.com%27+author%3A%27tim_macgyver%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|10|100% 
Hi /u/likid_geimfari, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Out of curiosity -- why do you dislike it so much?
Things to learn in 2017 that should've been learned in 2013...
It gives me 404
Look up advent of code
Can I ask you what you mean with the term components in this post? There's a lot of different uses for the word component in development.
I think you need to head to the section in the article titled 'Learn design basics'.
People are used to that already, sort of. You have Styled Components and CSS Modules out now, as well as things like MDL and Bootstrap being available on npm.
[removed]
&gt; Do you have any criticisms of specifics I could look for this time through? It's tough to answer that in a single Reddit comment. There's some advice I would agree with in there as well, and perhaps that is what your boss was hoping you'd pick up on. However, overall I find the style of programming he advocates to be fundamentally flawed, and it's hard to describe the different but interacting reasons why without practically writing a book of my own in response. Perhaps the most constructive thing I can suggest here is to read critically. Keep an eye on when the guidelines he gives are backed up by logical arguments or hard data and when they're just his personal, subjective preferences. When he makes a brief, off-hand remark about not having supporting evidence or about there being a better way to do something that he's not showing, turn your skepticism meter up to 11. You haven't mentioned your own experience level, so take of this next part whatever works for you, but the other thing I always recommend when I'm mentoring juniors is to read a variety of books and look for the recurring themes and common advice. There are classics like *SICP* and *Code Complete*, of course. *Programming Pearls* is probably still worth a read through as well. Naturally many of the "classics" are starting to look a bit dated going into 2017, so you have to read them carefully as well, but a lot of the underlying principles and ideas are as relevant as ever. If you're looking for more substantial, modern, real world examples of effective software development, you could try *Beautiful Code*, *The Architecture of Open Source Applications*, and some of the related books. If you want to separate a few facts from urban legends, look for books like *Facts and Fallacies of Software Engineering*. I'm sorry that I haven't given a direct answer to your question, but I hope that if you're the kind of person who takes the time to study programming books and learn independently then that advice will be worth more to you in the long term than any brief critical review I could write here.
EDIT: Oops, didn't notice OP was using curly braces around `a`. JavaScript, even with WeakMaps, does not give you any way of observing when an object has been garbage collected. JavaScript will never garbage collect anything that is "reachable." As far as the garbage collector is concerned, you still have a reference to the key (`a`) and you still have a reference to the map (`wm`), so you can still access or "reach" the value. Therefore, the value will not be garbage collected. The magic of WeakMaps is this: If either the key *or* the map is unreachable, then the value is also unreachable and will be garbage collected.
Components are how the UI is broken down. Everything is made of components that encapsulate their own state and render to markup
Or, "learn if the shiny framework is relevant to your work"
Thats why I triy to learn standards - webcomponents and polymer are a nice option. Those will stay with us - its not hyped but its something that will be handled more and more by your browser API - thats the best recommendation for me.
Move only if you really need to. That is to say the benefits of using Vue would somehow outweigh using React. Is React's performance hindering you in some way? Is the cost of development for Vue that much less? If not, then meh. 
That was a prime example for me too. I have been using React. Love it. React allows me to get the job done. I have no complaints. I see a lot of Vue hype right now, and I have to say it's really easy for me to ignore (thankfully). I really don't care if it is better, or how it is different. I want/need nothing more than React provides. I'll spend my brain cycles on learning *other* things that are actually necessary, instead of running on the front-end treadmill.
Which element? Which browser? Which OS? Mobile or Desktop? Or is it TV?
EDIT: I didn't notice you were using curly braces around `a`. Whoops, my mistake, I thought you were keeping a reference to the key. Do you think this is some sort of DevTools exception? Without a reference to `a` there's no way to access the value in the weakmap, so maybe DevTools is doing some funky caching of the values? Totally guessing.
There are tons of choices out there. But the two big ones are Angular and React. I personally prefer Angular but I'm going to try and keep this objective. Angular was made by Google and React was made by Facebook. So they're both quite reputable companies to grab a library from. Here is an article more biased towards React: https://www.codementor.io/reactjs/tutorial/react-vs-angularjs But in my opinion I prefer Angular. The main reason people dislike Angular though is because of the deep learning curve. It's easy to make mistakes as a beginner. But I feel as I've gotten more used to it, it's helped me out immensely. I can build large scalable apps with absolute ease. But really you just have to jump into it yourself, any option can be made to work for you and your team.
Snaaap. You're right. That's it. If I never expand the triangle, then garbage collection works as expected. Or, likewise, if I clear the terminal and then click collect garbage, then it works as expected.
looks like you need to clear the canvas before redrawing.
Cool, sorry about my smarty-pants answer earlier. I get used to questions on the JavaScript sub having easy, obvious answers. Not that it's any excuse. :/
Make some `p` element below that `button`, give it some `id`, then in your JS, use `document.getElementById` to get a reference to that `p` element, and inside `myFunction`, update the `.innerHTML` property of that `p` element.
&gt; He advocates that you refactor your code such that the contents of the file are read from top to bottom in terms of level of abstraction. In itself, I have no problem with that principle, but I don't think using many small functions just for their own sake scales well even with that rule. For one thing, if you decompose a substantial algorithm into a hierarchy with several levels and several elements at each level, you can't have every child in the tree shown next to the parent that depends on it. Sooner or later -- and it quickly becomes sooner -- you have code at one level depending on something that is now off-screen. That in turn depends on more functions that are off-screen, and so it continues. So now, instead of reading the algorithm start-to-finish and seeing the big picture, you're jumping around and relying on a combination of your memory of the context (which call stack you're exploring, for example) and your editor/tools to navigate. It's not that this can't be done, of course, but there is a cost to doing it. To me, considerations for breaking out a lower level function are things like whether there's a *significant* jump in abstraction, so the amount of detail being hidden away justifies the boilerplate and separation, and whether the code you're breaking out implements a relatively self-contained and reusable concept or whether it only really makes sense in-context anyway. No doubt there is some positive correlation between such factors and smaller functions, but it's not the shortness of the function that matters. In practice, if you really are separating out useful, self-contained lower level functions that will be used to build higher level functions, you probably don't have a single hierarchy either, but rather several higher level functions calling several of the same lower level functions, which only strengthens all of the above arguments. &gt; The idea behind really "small" functions make sense. Haskell does something similar in that it makes heavy use of currying and partial application to limit the amount of logical transitions that can be contained within a function. OK, but in Haskell, the generic functions you have available for manipulating data often represent quite powerful patterns, and the syntax is so expressive that often you really can get a lot done with just a few short lines of code. If I can write a three-line concrete function and then run `mapAccumWithKey` over some `Map`, and in doing so I can get the same work done as would take a dozen lines of imperative loop logic manipulating a `HashMap` in Java, great, I'm going to write that three-line function and use the library. I'm using powerful abstractions, and the fact that the concrete logic I had to write separately only needed three lines in Haskell is just a happy coincidence. On the other hand, if you're trying to do something that *doesn't* fit neatly into Haskell's conventions, being stuck writing very short functions to do trivial things anyway is just as annoying as in any other language IME.
No worries.
Usually you would use an XHR to fetch some sort of data file, like XML or JSON, but you *can* fetch any other resource, including JS; I also do mean actually copying the resource to the web root (which I understand to be the apache directory in your case).
When you don't have much to say, you just head over to Medium.com and pad your article with pictures and single-sentence paragraphs. 
Hello thx for your quick answer but I still don't get it fully. This here works: document.getElementById("some").innerHTML = "test"; But what do I have to write instead of "test" to get my functions output?
you are looking for something like this I guess: http://codepen.io/Ankit0404/pen/PbMwEb
I believe that would be `convertToRoman(num);`.
You'll need to use a combination of the native Date methods: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date 
Always tutorials a google step away. Get a basic understanding. Probably the most important thing is to get a mentor. A mentor can help you when you get stuck and exponentially increase your learning potential.
&gt; You can use typescript with react.. nothing stopping you. But you can't use OOP principles such as inheritance with React components.
I actually found the problem. I forgot to write "()" after "canvasContext.beginPath" at line 60. Thanks for helping me anyways!
Are you talking about components in general or some specific framework components?
Its not a good example unless you want to learn how to build for Gnome Here for instance is where the ZERO key is created: https://github.com/kaer/gnome-shell-extension-modern-calc/blob/3fb873a4371d7e67d335f9d5158ee63fe3657f62/modern-calc%40kaer/basic_calc_button_grid.js#L290 And here it is attached to the grid of numbers: https://github.com/kaer/gnome-shell-extension-modern-calc/blob/3fb873a4371d7e67d335f9d5158ee63fe3657f62/modern-calc%40kaer/basic_calc_button_grid.js#L322 The parts you don't understand like: new St.Button( are parts of the GnomeShell JS framework. https://wiki.gnome.org/Projects/GnomeShell/Development 
It really is. But I still don't understand all of the hubbub regarding classes. I know the arguments, but I guess I just don't agree with them. I like them as nice wraparounds for prototypes. I think functional programming is a great tool, granted I don't use it or really know it very well, aside from everything's a function and there aren't side effects. (There's more to it than that, I understand, I just don't know right now.) I like being able to block off a section of my code. I guess I kinda just use classes like namespaces, except instantiable. The thing that's most important out of all of this (well, almost) is consistency. I'm in no way putting FP down, or OO, prototypal, or any other methodology ahead of it. Like I said, I think functional programming is good. I just think people have a bit *too* much of a hard-on for it. Unless whatever you're looking it is written horrifically or unsustainably, then I don't believe there's really any reason to reel in terror at the sight of classes, or what have you. Ninja edit: Sorry for the big response to your comment.
Angular 1.X doesn't require TypeScript and is very powerful. As for my example project: https://www.collaborate.center Made by a small team of 3 people. 
One of my objections to Martin is that he tends to include those little disclaimers somewhere, which means he can say "Well, I did say...", but in reality most people reading his books or watching his videos aren't going to catch the significance of the momentary one-liner next to hundreds of pages of other material. I find his presentation style often deceptive and inflammatory, and I think he does that deliberately. Also, it's not really my disagreements with him on subjective issues that wind me up. I'd be the first to agree that there are plenty of subjects in the programming world where reasonable people can differ on the way to proceed or where different ideas make more sense in different contexts. It's when he's saying things that seem to openly contradict the evidence, or when he presents things as if they had the weight of substantial evidence behind them when in fact they are just his own subjective preferences, that he really irritates me. As for critical analysis of code, the reason I'm so down on certain high profile consultant/trainer types, Martin included, is precisely that I've been the guy cleaning up their mess, in the sense that I've had junior devs starting who have seen a few very opinionated articles or blog posts or books or presentations but *didn't* then think critically. For example, I have literally seen a new starter who'd been programming for about five minutes come in and tell a 20-year vet that their clearly readable, efficient, tried-and-tested, twenty-line function was a maintenance hazard because it had a three-level nested loop in it. Newbie proposed a refactoring, using I can't even remember what buzzwords, that resulted in about triple the line count and at least half a dozen functions, none of which made any sense outside of their original context anyway. When asked why the original function was so bad, the newbie in question cited three different sources by the same person of exactly the kind we've been talking about, and stated without any qualification or nuance that triple-nested loops were a code smell and should always be refactored. As it happens, that particular developer went on to become pretty decent after a couple of years, but they were one of the hardest cases I've ever mentored. I think it took three or four different senior people challenging the same sorts of assumptions at various times before they realised that maybe not everything they read that was written to sound authoritative should actually be taken that way.
Hey thanks for the input! yeah I actually was working on a project where I would create a PWA that uses the flickr api but I guess I forgot to change everything to be more generic haha. Do you have any advice on how to fix some of the issues though? For example you mentioned | service worker is called my-service-worker.js and not versioned How would I go about attaching a version to the service worker? 
Why people hate Angular2 so much?
you are the man!
[deleted] ^^^^^^^^^^^^^^^^0.0675 &gt; [What is this?](https://pastebin.com/64GuVi2F/33845)
For one thing, there are quite a few who seem to not really appreciate the most important advantages of components still. Such as reusability. I see quite a lot of one-off custom components and relatively little reuse. Kind of amazed my comment was so unappreciated by everyone. Best not to bother trying to participate.
Kind of proves my point. A UI component. There are many different variations but it is a definable category.
It really depends on your needs. Different patterns make sense to different people. If you want to simply get the benefits of virtual dom and move away from things like jQuery and direct dom querying/manip, you may be quite comfortable with a fast vdom view layer and handle the rest of the architecture yourself. Many vdom libs use hyperscript and don't need any tooling setup or compilation steps. They are also very fast to pick up and understand. Mithril, Dio, vidom, snabbdom, domvm [1] are examples. If you want to benefit from large ecosystems and just use ready-made components, then the big frameworks are better, though typically require more learning, tooling, etc. Look around, see what clicks. [1] https://github.com/leeoniya/domvm (disclaimer: my own)
Preact is the best option if you really do need a framework.
Change the contents of the index.html file, particularly the contents of the `body` element, so you can see any changes you've made.
ITT: Geez garbage really does look like garbage. It's not subjective, it really is dumb and shit.
Yes and no. Maturity is part of it, but seniority will also give you the experience to adapt your old frameworks to the new tricks. You don't always have to adopt new frameworks to learn the patterns and leverage they would give you. Once you learn how to do that, you won't be as hot to just jump onto a new framework. It will look far less attractive.
The SPAs I usually work on are internal back-office type stuff and manufacturing interfaces, so it's not something that can be made public. However, if you're looking for something a bit more fleshed out than Hello World, you can look through `/demos` [1], particularly ThreaditJS [2] which is an implementation of [3] that forces app implementations to handle routing, error responses, network timeouts, slow replys, throttling, etc. It's rather difficult to evaluate frameworks without dedicating at least some time to implementing a widget of some sort. For me, React seemed like a no brainer (hype and all) until I ran into its performance implications and the officially sanctioned workarounds that were "par for the course". It didn't impress me, though I do understand its philosophy and the trade-offs it brings to the table. Mithril and domchanger were much closer, but still either had performance issues or surprising gotchas. In the end I wrote domvm which was a mix of Mithril and domchanger with the performance and API for the type of code I wanted to write. The hype train moves too fast for me :/ I'm quite content with letting the dust settle in 1 year cycles to see what survives. I just recently moved to a Rollup -&gt; Buble -&gt; GCC dev cycle from a basic IIFE -&gt; concat &gt; minify cycle. Typescript might be next :) [1] https://github.com/leeoniya/domvm/tree/2.x-dev/demos [2] http://cdn.rawgit.com/leeoniya/domvm/2.x-dev/demos/ThreaditJS/index.html [3] http://threaditjs.com/
Sorry about that, thanks.
&gt; var promises = []; &gt; for (var j = 0; j &lt; cName.length; j++) { &gt; promises.push(requestify.get('https://api.glassdoor.com/api/api.htm?t.p=PRODUCT&amp;t.k=KEY&amp;userip=0.0.0.0&amp;useragent=&amp;format=json&amp;v=1&amp;action=employers&amp;q=' + cName[j])); &gt; } &gt; Promise.all(promises).then(values =&gt; { &gt; }); So I'm working on this project for fun, and to learn javascript. So my question is can you explain this line. Promise.all(promises).then(values =&gt; { });' Sorry if it's a dumb question!
Why are you building twice? Not sure if I understand, but what we do is that we build once on push, and pack the result in a RC tarball. Any deploys to environments are using the same tarball. If you have push-to-deploy CI, you can track the tarball with the SHA, so any push would use the existing RC if there is one.
A few things: 1. I'm pretty sure you realize this, but the entire point of having a staging environment is so that you promote the *same* artifact from staging to production. I.e., you do validation on the same artifact that is going to end up in prod in stage. 2. I don't understand why you need different configuration in stage than in production. Our staging environment is a mirror of our production environment in ever way, except it's run on less hardware and, obviously, not live. I really can't understand why you would ever need a "different" configuration for a stage environment (why would you possible want to pull different content?). 3. Even if you _have_ to use different application level configuration for whatever reason, these should all be set as environment variables so they aren't hard coded into the build artifact, i.e, `const { info, version } = process.env`. This way, the deployment plan is responsible for setting the environment, not the build. It sounds like you know this is a problem, but you should really push management on this. You're doing the right thing to push back. I realize some people consider themselves lucky to even *have* multiple environments, but if I was a devops and joined your team I would have a heart attack. 
I would guess because they were forced to use it? I've been programming professionally for a long time, and there are some Kool-aids that i'd take a new job to avoid. Angular 2 is one of those. But if you like it, that's fine -- use what you enjoy! 
Looks good, all in all a fairly basic implementation I would say. Not a big fan of the linked article about JWTs (http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/), the author says they are a terrible, terrible idea. But never actually succeeds in explaining why they are so terrible. He only seems to shut down arguments for using JWTs, the same arguments that he uses for sessions.
Thank you for the feedback. It looks like it's a question of whether or not I feel like learning React Native myself. Was planning on learning eventually but I take this on it will have to be learned ASAP.
We use docker and pass different environments vars. The package called dotenv is quite useful for this. 
My take on FP is that it is objectively better than OO, but it also has a much higher learning curve. In order to effectively read and reason about about pure FP code you need to have learned and internalized quite a bit. OO meanwhile just matches common sense. It is more messy and less reliable, but it works more or less like stuff in the real world that we're used to. That's definitely an advantage, especially in big teams. 
Basically, it'll return an array of the normal responses. That way you can check through the array for all the data and can help you return the data you need. Promise.all(promises).then(function (responses) { console.log("Received promises", responses); var gds = []; for (var i = 0; i &lt; responses.length; i++) { var response = responses[i]; gData = response.getBody(); gData = gData.response.employers; for (var x = 0; x &lt; gData.length; x++) { //Purpoe of this if statement is to only return companies if (gData[x].name === cName[x]) { gData = gData[x]; gds.push(gData); } } } res.send(gds); }, function (response) { console.log("err", response); res.status(500).json({err: "Failed to get response from glassdoor"}); }); 
&gt; Feel free to learn the ropes. Programming is a magical experience — I’m coming up on 10 years and it still is, every day. But, if you’ve got the kind of experience that sees you diving into the internals of React, Angular, Ember, Vue, Preact… The thing standing between you and becoming a better software developer isn’t your lack of exposure to frameworks. It may not even be programming. Part of software development is the business of software which has many complex, nuanced, as-deeply-experiential-as-programming moving parts outside of the engineering team. 17 years here, 100% agree.
This might be helpful [https://forwardjs.com/](https://forwardjs.com/).
I read the title and instantly agreed with it. That's the answer to JS fatigue, build cool shit.
Yes you can. I did exactly that when writing my own framework built on React. Just use ES6 classes. You can subclass a React component, then use that as your base class in your own project. MobX for example, uses that method to manipulate componentShouldUpdate and trigger rendering changes on components docorated by it.
Examples files are from the existing site, but I slapped the React interface together. Thanks so much, really appreciate the kind words! 
The "comical" reality of *picking the latest greatest hype* is that it is just a way to escape from whatever boring tasks you're likely doing in tandem with your stable corporate job as a personal project either for fun or a way to stay on top of what is actually current for when you take on your next job. 
You mentiond that it's both CMS content and configuratiln that gets pulled in to the build. The configuration shouldn't be to hard to remove from the build and just let the environment (staging/production) inject its configuration at startup. Could you elaborate on what do you do when you pull in CMS configuration? One thing could be to automate back copy from the production database to the staging database. So when something is pushed to staging, it'll be almost identical to production.
The more you use it the more you realize its advantages. It's hard to explain when somebody has never felt the pain of using state in OO. I think most people is happy enough with OO and don't really see a problem with it but those who has grown out of OO see the advantages/disadvantages from both. Personally I think FP is better than OO but is harder to get into it because it's not teached as widely as OO and most used programming languages are geared toward OO. Not because FP is harder than OO. And the second reason it's hard to use is because code is maintained by a team of developers and most likely the next developer is going to be lost if you show him a FP codebase. That said, the best thing for now is to incorporate both into the codebases. Surprise surprise, that's what React and Redux does! They are built on top of FP concepts but with a Dev friendly API so you don't get scared when you use it. I recommend you to read https://github.com/MostlyAdequate/mostly-adequate-guide if you want to go past the "everything is a function and there are no side effects" phase.
Kind of. But the state is likely to come from outside the view (instead of kept inside the component) and you don't do direct manipulation to the DOM. 
Well, it depends... what do you estimate your trafic / users on the admin part would be? If it is not very high and your team is better on the server side / jade / mvc programing paradigm, than do it like that. From an architectural point of view, client side apps ar cheaper on the CPU, but on the other hand feel snappier, but they add a lot if complexity to the app and if this is paired with a team that does not have experience building spas and apis, thing can get pretty bad pretty fast. In conclusion, my best advice is to leverage your team experience. Build it as you know best, and down the road you can start refactoring pages in a spa if you really need it. Don't belive the hype! Hope this helped, have a nice day :)
The cure for [language] fatigue is to spend a little time in another language. If you don't know a Lisp, learn a Lisp. If you haven't played with Prolog, try it. Maybe some Haskell. Or 6502 assembly. A change is as good as a rest. When you go back to [language], it will will be with new eyes and maybe a new technique or perspective. Sorry, this is generic advice. It works as well for JS as Java or C++ or whatever language rut you're in.
Great article, thanks! I was pleasantly surprised to see that it wasn't just another list of frameworks to wrap my head around.
Great article, thanks! I was pleasantly surprised to see that it wasn't just another list of frameworks to wrap my head around.
Hey, the author is here ;-) Thank you for very interesting comments! I didn’t have that impression after reading the *Clean Code*, but I probably have a strong bullshit filter and treat most of the things I read as a personal opinion. Actually that’s why I suggest all three books: to read different opinion and to make your own. I’m against any programming religion: there’s no the only true way of doing anything. 
I also have 15+ years and completely agree. I like the article but it is hard to follow a path where you actually don't have to worry about those things (unfortunately). Everyday I see the hype of the javascript world, the developer stardom, companies requesting React/Angular just because it is cool and used by the "great ones" instead of asking for good developers who know the languages and the best way to solve their issues. Breaking the facts: Developers are no stars. Developers are fascinated by things that the rest aren't and most of the times find boring. Developers like to solve logical problems. Or at least that is what it should be. React/Angular were created for specific platforms with a specific scale. Most of the websites and web applications could live with just vanilla js or jquery and I'm not even entering the realms of why I don't like Angular and why I think React isn't actually the way to go. I'm getting tired of the frontend world exactly because of this. Clients now know some buzzwords, CTO and CTX and CTY and CTZ just want the popular and hypest thing... At this point, I'm frustrated and thinking on moving on... Maybe moving to the backend, to some role that you can test your code and see it working.
Use Typescript, make a HTML5 WebGL game. It's fun.
Bit of vocabulary: return is a *statement*, not a property. Return allows you to… return a value as the result of a function, that was "called" function multiply(a, b) { return a * b; } var result = multiply(10, 2); Line 1: *function definition*. Function is named "multiply", and takes two *parameters*: a and b Line two: the function does what it does: it multiplies the two parameters and *returns* the result. Line 5: the function is *called*, with parameters a=10 and b=2. The *result* of the function is stored in a variable named result.
Nope, not relevant.
When you return a function you terminate execution of said function and "return" a value from that function. In this example, we will never print "end" to the console, because the function has already returned by that point. function someFunction(x) { const myVariable = x + 1; return myVariable; console.log('end'); } And if we are to call the above function and assign it to a variable, what we will be getting is the `return` value of that function: const someVariable = someFunction(5); // returns 6 and assigns to someVariable
Just use [Start Runner](https://github.com/start-runner/start#npm-scripts) and make alias for `npm start` would be more better - in bonus you get the full power of javascript :D
Mostly React and material-ui. The main list of dependencies are mentioned in the landing page.
&gt; Actually that’s why I suggest all three books: to read different opinion and to make your own. I’m against any programming religion: there’s no the only true way of doing anything. Yes, I agree wholeheartedly.
This looks cool, but feels like a bit of a regression to things like gulp/grunt. Lots of the work I do nowadays can be accomplished with CLI tools, and don't really need another layer of abstraction like the one start runner provides. For tasks that are more complex we would move them into executable js or shell scripts. 
There's no abstraction in Start. It just allows you to run any script you want and in combination with `husky` things goes great. Instead of big and ugly `npm scripts` fields. Don't seeing the regression. It's just a matter of thinking and self preferences. It's good small alternative. Codebase is few lines of code, strategy and concept is pretty small and easy.
Truthfully I write Python and JavaScript sometimes within the same hour as our stack has a Python server side solution and JavaScript on the client side. I mostly find it just to be annoying for the first 30 minutes. Try changing your editor color when you're in a new language to get you in a different mindset. And just deal with accidentally adding a semicolon to the end of your Python line every now and then ;) 
Looks awesome thanks! 
Sure there are, you're abstracting cli tools like `webpack`, `babel`, and `eslint` - which are relatively straightforward to use. For example: NODE_ENV=production babel src --out-dir build --watch eslint src webpack --watch are all the interfaces for the tools mentioned above. But with `start` I now need to have a package for each of these, as well as adding the `files`, `watch`, `write` packages. export const build = () =&gt; start( env('NODE_ENV', 'production'), files('src/**/*.js'), read(), babel(), write('build/') ); This is the start equivalent of the single line above; while it's nice to read, and is composable, it's 100% an abstraction over the cli tool itself. `start` does look cool though, I like the composability of it. However, it is solving a different problem to the thing I posted, which is to allow you to not have to remember exactly all the different tasks you have. Which would still be a problem with `start` itself! 😁
What do you think about this?
Custom console not implemented, yet.. You can use browser console.
Looks good, but what makes this better than a tool like codepen.io?
In my experience if you have complex backend and frontend application - don't combine js on front and on backend. node does not yet have fully capable of many things framework/methodology/philosophy/combined-toolbelt on backend. I chose Symfony3 on backend for enterprise-class application and won a lot in long term development and improvement. Everything is in place, tested, working, with best practices of this framework.
Admin has limited users only, not much. But data, complexity &amp; performance should work well, We need to update lot of data in pages without refreshing page &amp; in realtime. Would you give some best practices examples or links if we go solo with Express for complete mvc so that our developer use best practices to architect structure so that our code can be readable by other developers &amp; they can also dig in If existing developer leave job, Also any recommended IDE which will help us writing code bug free. Thanks a lot 
This article is redundant because it repeats itself over and over again a few times. Did I mention const bindings can't be reassigned?
Plnkr is the only tool I know of that allows multiple local files but it always chokes up on me if I add more than a handful. Most times I just need a straight-forward tool like what you've created. If I need eels and whistles I can add them myself. Keep this thing as simple as you possibly can and you've got something pretty unique 
No, it isn't. Try unity instead, for example. (js can be used for 2d/3d, but its not optimal)
I want add support Libs from cdnjs to sidebar, like a file, but in readonly mode, look prototype: http://libs.playcode.io. It's my priority. What do you think?
Awesome tutorial! Simple no BS approach, very refreshing!
&gt; Most of the websites and web applications could live with just vanilla js or jquery I guess you could probably make something that is maintainable using vanilla or jQuery but it would take more work than making something maintainable with Vue/React/etc. Even for a pretty small scale thing the overhead using a (relatively) small view layer framework like those is pretty tiny compared to the dividends you receive by not having to maintain your state in the DOM. And at that point you don't even need jQuery anymore.
You could load a hidden iframe that's like 1x1px that hits Facebook/Instagram etc. and if the user was logged in to those sites you could scrape their private info and use scripts to interact with those pages. Load slack/box/Dropbox/google, use scripts to steal data, send phishing messages, change passwords etc. 
Yeah as long as the processing it takes to do that doesn't wind up hindering multiple file functionality
[context](https://swizec.com/blog/animating-svg-nodes-react-preact-inferno-vue/swizec/7311) [source code](https://github.com/kirjavascript/webgl-fractals)
&gt; it's not about being creative, it's about having a reason to write code If you were a creative programmer, you would have plenty of reasons to write code. More reasons than you would have time. &gt; start with a problem you want to solve, then start solving it. A lot of non-creative programmers will take to reinventing wheels because they think there's a problem they can solve that wasn't already solved by 10 other things that do the same thing. They *want* to solve problems, but they aren't really doing anything creative. Some of them might be *clever*, but that isn't always the same as *creativity*. The problem is still a lack of creativity - doing the same things over and over with nothing really *new* to come from it. That only adds to the fatigue. One example of this is Coffeescript and the dozens of off-shoots of that language that all ended up going nowhere. There were too many people creating off-shoots with minor language tweaks that it really added to the fatigue of the entire javascript ecosystem. Even ES6 is an example of it, ES5 Javascript still works well and is very powerful, yet some people obsess over syntax and things they don't really need to get a job done. The time they spend re-implementing toolchains just to save a half second of compile time, or add some obscure functionality, is time they could spend actually being creative, if they were creative. 
&lt;iframe sandbox="allow-non-pwd-read" ? So this would allow document read except for input.value / getElementsByTagName('input') would fail etc. getElementsByTagName('*') would fail ... window.frames.frameID.getElementsFromIframe('*') would get non input elements ? 
Very cool! Buttery smooth. Nice job.
The conditional module loading is interesting. Does anybody know if there's a possibility of that making it into the ES* modules spec?
I don't get it, do you compile js to js by compiler written in js? What's the point?
No, You Don't Know JS.
same reason why babel and buble exist
What if the iframe contains information they don't want you to have access to? Such as emails or their google drive files or their medical records or their bank account. Nope; find another way.
How do I access someones emails? If I know the url then it doesn't matter if it is in an iframe, does it? What is so special about the url being in an iframe? I need to know the url first?
Alright so using your way, leads to an 'access-denied' app.get('/api/gd', function(req, res, next) { connection.query('SELECT company FROM jobs WHERE gdLink is not null ORDER BY company ASC', function(err, results) { if (err) { console.log('There was a problem reading from jobs database :' + err.stack); res.sendStatus(500).send('There was a problem reading from jobs database'); return; } for (var i = 0; i &lt; results.length; i++) { cName.push(results[i].company); } // res.json(cName); var promises = []; for (var j = 0; j &lt; cName.length; j++) { promises.push(requestify.get('https://api.glassdoor.com/api/api.htm?t.p=PRODUCT&amp;t.k=KEY&amp;userip=0.0.0.0&amp;useragent=&amp;format=json&amp;v=1&amp;action=employers&amp;q=' + cName[j])); } Promise.all(promises).then(values =&gt; {}); Promise.all(promises).then(function(responses) { console.log("Received promises", responses); var gds = []; for (var i = 0; i &lt; responses.length; i++) { var response = responses[i]; gData = response.getBody(); gData = gData.response.employers; for (var x = 0; x &lt; gData.length; x++) { //Purpoe of this if statement is to only return companies if (gData[x].name === cName[x]) { gData = gData[x]; gds.push(gData); } } } res.send(gds); }, function(response) { console.log("err", response); res.status(500).json({ err: "Failed to get response from glassdoor" }); }); }); }); But when just doing a url call, from the browser it returns the data.
Thanks for history API recommendation. I will check out that. I was thinking some kind of browser store that can keep user session based prefs to improve the experience on repeat visits. About markdown: which markdown are you referring to? Is it gihub style markdown? or a JS framework that can support a templating approach like Marco? Or something else?
Wow that's incredible! I'm working on an svg + 2d canvas thing and am having performance issues around 5000 nodes. Maybe this could be a good solution for me. Thanks for sharing!
`const` should be the default way to declare a variable for everyone of us. Use `let` only if you need a variable in different child scopes. That makes a lot of things easier: - reading the code is easier, because you dont need to check if the variable is reassigned or not. That helps in code reviews. - it makes you think in constant variables as something that never changes, so you will avoid reassigning variables from one type to another for example. If you declare a var as a string or a number, it will always be that And I susbscribe to what others have said about IDE help but to me the most important thing is that `const` is an easy way to enforce "immutable" variables and makes you think in a different way because you can't reassing and reassign all the time.
I just looked it up, you need to replace the t.k=KEY with your partner KEY and t.p with your partner ID. This will allow you to authenticate properly. Source: https://www.glassdoor.com/developer/index.htm
I did! Enter the actual key but only when using the promise it gives me the error. I'll keep checking on it though! Thanks :). 
In addition to what others have said, the way I see it is actually the opposite. It's not that `const` sends the message that this doesn't change - it's that if you use const by default, then `let` starts sending the message that this variable definitely changes. In other words, "be careful around this variable, it's a weird one". Because once you start making this distinction, you'll find that most of the time, variables don't really change. 
Sounds cool. For same reasons I created https://github.com/tunnckoCore/charlike and `charlike-cli`. I have more work todo on that "template" thing (git configs, github repo downloading, npm package tempalte and etc) that you already have. edit: btw, `docute` feels great too :)
already, let me be more specific. the point of this particular project is to show a minimum amount of code necessary for a source-to-source js compiler to be self-hosting. the context of this project is that source-to-source js compilation is a highly visible field of inquiry (as evidenced by the success of babel). hopefully that clears it up more :)
Thats actually nice if you have whole team in confident nodejs and goals! In my experience it's rare
It has certainly caused issues, which has help move the conversation along (thankfully). We have opened communications with most of the stakeholders to see what it would take. My hope was that there was a backup plan in case this falls flat, or just takes forever to make it. On the front end, our entire application is a static single page application site that sits behind CloudFront in an S3 bucket, so process.env doesn't exist anymore at that point - that's why we have it setup like we do. (I'm not defending it, just explaining) With that in mind, does that mean we are stuck with this if we aren't able to make stage a prod-mirror?
Yeah, this is pretty much what we are dealing with exactly. The biggest hurdle we are up against is our back-end. Given that our site is a SPA that just lives on S3, we haven't been able to come up with a way to pull in environment vars without bundling it at build time (with the require noted above). We have talked about pulling it in over HTTP at runtime, but that seems a little less stable - plus it makes it *really* easy for people to find stuff that's not necessarily private, but that we would prefer to remain less-than-public. The stickiest thing is probably the API url. If we *have* to have *all* environment variables be the same for this to work, our QA would be spending real $ when they test on stage.
This is really cool work :)
I like mobx w/ React. Redux adds too much boilerplate, but the boilerplate necessary with vanilla React is unbearable (calling setState all over the place). With mobx, you just decorate your "observables" and the rest is taken care of.
Yes, copy the file.
Thank you!
"Build a side project with the express goal of making money. This is the fastest way to learn how unimportant the latest framework is." Bingo!
you'll have to be a bit more specific about what "a lot of data" is. in addition, a lot of data can be displayed in many forms, for example an svg graph which is a pathstring of 3000 datapoints will be very fast but a 3000 cell interactive table will be slower. also realtime updates depends on how much of the data actually changes, etc. it's hard to talk specifics not knowing the task at hand. all i will tell you is that virtual dom libs of late 2016 are more than fast enough.
I've been working with both of them and they are all fantastic. It's like **comparing Vue with React**. Completely different approach, same goal *-- inner peace*.
It would be cool as an experiment to expose the AST and allow kind of plugins, haha. :)
Great post! React.createElement('div', className: 'container', 'Hello!') You're missing {braces} inside that line of code for the object.
I wrote [this tiny article](https://medium.com/@benevolentNinja/minimal-redux-setup-e6a10fcbcb68#.d4rqdxu4j) about the fact that Redux requires almost no boilerplate at all. It's up to you to decide how much or how little boilerplate you want. That being said, MobX is cool, but I always think it's worth mentioning that Redux doesn't require a lot of boilerplate to be useful.
Feature request: gh-pages demo with AST output
thx, the logo of charlike is really impressive 😬
Oh I C, it is probably like Jekyll - that is already supported by github but if I run Jekyll on my own machine then I can push static website to any web server. 
btw, &gt; custom `render` function passed through options is a good idea :D
One thing I'd like to point out: &gt; React is able to analyze the object, then analyze the actual DOM, and then update the actual DOM only where a change occurred IIRC React actual does the comparison between two VDOM trees, not between the DOM and the VDOM.
&gt; why stampit requires you to explicitly create stamps, or factory functions, as opposed to being able to compose any object / function Turns out you can, so long as you put it all under a "properties" key. const objA = function() { console.log("Something"); return this; } const objB = { propB : "Property B", sayNothing : function() { console.log("Nothing"); return this; } } const superObj = stampit().compose({properties: {saySomething: objA}}, {properties: objB}); superObj().saySomething().sayNothing(); ---- &gt; I love stampit and composability in general. I'm going to go off-topic a bit here to point out that what the stampit author calls "composability" is actually just multiple inheritance. For example, since Python natively supports multiple inheritance: class objA: def saySomething(self): print("Something") return self class objB: def sayNothing(self): print("Nothing") return self class superObj(objA, objB): # &lt;-- inherit from multiple pass superObj().saySomething().sayNothing(); &gt;&gt; Something &gt;&gt; Nothing So whatever issues you used to run into with inheritance, you will *still* run into with "stampit composability", because "stampit composability" *is* inheritance.
That's strange: Usually, your HOSTS file or DNS implementation would map `localhost` to either `127.0.0.1` (IPv4) or `::1` (IPv6), and the whole `127.0.0.0/8` range is for loopbacks like that.
So both address should show the same result? Shall I still copy the file and try? But I don't think merely copying the file will do the job.. how would the server know which file to open?
The server knows which file to open, by the URL of the file. I presume that by now you know where the web root is, so if you point your browser to `http://127.0.0.1/data.js`, the server will look for a file at `&lt;web_root&gt;/data.js`; if it finds the file, it will send that to the server as part of a `200 OK` response, and if not, it will return a `404 Not Found` response.
&gt; The render function of a React component is a pure function I died a little when I read this…
Use context: I use jsbin a lot, mainly for throwing up examples on stackoverflow. I really like the versioning + subdomain public link of your site. The only thing stopping me using this over jsbin at the moment would be: * long term stability (will this be around in 3 months, 6 months, etc?). I know this is very hard to tell, but it would be nice to know that my snippets would exist in the future * some level of auth, so i can same my snippets and revisit them (currently stored in local storage? didn't check) Nice to haves: * Quick add libraries (like lodash, react) * (imo) the html tab should be white if no css is set. I understand style-wise, it looks slicker matching the other panels, but it could be confusing. * Folders (like someone else mentioned) would be a real winner over jsbin * One thing that is really annoying about jsbin is viewing all your projects is pretty horrid. So a nice project summary page would be great * Export project would be nice. I could imagine spending a lot of time in here because the interface is so clean, but then having to copy paste out everything would be slow * Tabs. Split panel is ok for something like codepen/jsbin, but its not as natural (imo) as tabs. This is more feedback than I normally give, but can really see myself using this. 
I'll give this a go. You have the potential to be the greatest human alive.
The only thing `const` does is fix a name to a value. In the current scope that name cannot have any other value. In the case of primitive types (String, Number...) you can use `const` if you intend for that name to always have the same value (`const PI = 3.14;`) or `let` if you want that name to refer to a different value for the duration of its lifetime (`let countClicks = 0;`). For objects however I don't see any valid argument to use `const`. The object is not affected in any way. It's only the name that will always refer to the same object. But an object can have many names, and you can make changes to the object using any of them, even if they were created using `const` or `let` (or `var`). So `const` doesn't have anything to do with immutability, you shouldn't use that word as it may send the wrong message to some readers. If you want some level of immutability you can use [Object.freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze), [Object.seal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal), [Object.preventExtensions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) or you can use a library like [Immutable.js](https://facebook.github.io/immutable-js/) or [mori](http://swannodette.github.io/mori/) But if we get lucky maybe the guys from TC-39 will accept a proposal for immutable data structures (like [this one](https://github.com/sebmarkbage/ecmascript-immutable-data-structures)) and we will have it in the language. One can only hope.
This might have success in the right subreddit like /r/videos
&gt; But babel is translating ES6 to previous version JS. Actually babel is a general purpose JS compiler which can do all kinds of transformations on your code, ES6 transformations are just one example. &gt; Compiling js to js can be achieved by copying a file No, that's copying, not compiling. The difference is that he has all the bones for compiling the JS here. If you want to compile to something else, you probably want to add an intermediate step modifying the AST, and modify the generation process. But he's still implemented all of the proper abstractions for compilation in this program.
But that can't be right, cause we're definitel geniuses and way more better at all the things than everyone else! We're code ninjas! WE MUST BE FEARED!
why? I don't understand. const myComponent = ({title, subtitle}) =&gt; ( &lt;div&gt; &lt;h1&gt;{title}&lt;/h1&gt; &lt;h2&gt;&lt;small&gt;{subtitle}&lt;/small&gt;&lt;/h2&gt; &lt;/div&gt; ) isn't that a pure function? it takes an argument and returns a result without side effects.
I can't say I fully 'get' this analogy, but I will say that using React and MobX (and TypeScript) together has been one of the most satisfying combos I've had in my many years as a developer, web or otherwise. It's a really fantastic library.
The example you're giving is a pure functional component, which is not the same as a non-pure component with a render method. Many functional programming advocates don't consider class methods pure functions because they rely on the `this` pointer besides their arguments. Personally, I don't agree with that viewpoint as you could consider the `this` pointer to be just another argument and as long as you don't perform any mutations on that argument inside the render method (and React does tell you not to) I'd say you can consider the render method to be a pure function. The component as a whole may not be pure (it probably isn't, otherwise you could've used a pure functional component like in your example), but its render method is.
Can you check the code that I added in the description?
Haha, yea. If it is not enough to use hundreds of engines by JSTransformer it can use `render` function to use what he want :D
Can you explain what to use readystatechange for? I am actually new to this so please bare with me. 
So just to ensure that readystatechange is used to indicate the state of the document for instance whether it's completely loaded or not?
Totally agree. Stampit also doesn't solve the issue of objects being tightly coupled. I have seen some work being done to detect if two objects contain the same methods and throw an exception but that seems less than ideal. I don't think it solves many issues if I'm honest and I think my question came out of me trying to understand why stampit is so explicit thinking it must be that way to prevent a number of issues that occur with traditional inheritance / composition but that doesn't seem to be the case.
Having a single-use variable for holding values between promise chains is code smell -- Promise.all() is mentioned yet this use case is relevant. You can put regular non-Promise variables into Promise.all() and you will get the same effect of passing data down the promise chain without the single-use variable.
A similar concept in other languages is forward reference.
From my understanding, I think I am missing the onreadystatechange function (below) after receiving HTTP request [**var Connect = new XMLHttpRequest()**]. What do you think? httpRequest.onreadystatechange = function(){ // process the server response };
Did image zoom in articles not exist before Medium? This isn't like their editor or anything--which has a unique feel. This is akin to Amazon One-Click, something obvious, that really need not have trademark attatched to it.
Have you changed the permissions on your working directory?
So in this function, am I just supposed to output the state of the document being loaded? 
After all that time, I finally chose Socket.io and I'll begin directly with MySQL cause I want users to be able to create accounts but I'll make a function to flush accounts or content. Thanks for your advice. Next step is to find some casual players and a good story for the main mission... I'll be able to develop around that. :) I'll keep you guys in touch. :D 
 function loadDoc() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 &amp;&amp; this.status == 200) { // Process Your Data Here. var Document = xhttp.responseXML; var myAge = Document.getElementsByTagName("age"); // You can also call a function here and pass in 'this', which is the XHR object. // This way, you can extract and process the data in another function and keep this function short and clean. } }; xhttp.open("GET", "ajax_info.txt", true); xhttp.send(); } I am gonna try to explain 'onreadystatechage' function here. XMLHttpRequests have 5 'ready' states and each 'ready 'state is associated with a code. You can see the list [here](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState). Now anytime a state change occurs, the onreadystatechange callback will be executed. Now, you only want to process data when the following conditions are met: 1) readyState is 4, meaning the response has been fully received and operation is finished. and 2) The HTTP status code is 200 - OK. (Ofcourse, there are exception, but I am speaking generally here.) That is why the function has that if statement. Once these conditions are met, you can process your data. Also, use XHR asynchronously. The third parameter in the XHR.open() should be true. Hope this helps, lemme know if I missed anything. **EDIT:** I also wanted to add that please do use camel casing for naming. 'Document' is not a good name for a variable. Call it data or something. 'Document' can easily be mistaken for 'document' which is the root DOM elem. 
I know this is super annoying, but `add(1, 2)` is more common than `add(1,2)`.
Image zooming is not new, but Medium's implementation is REALLY good. Really great animations, and the scroll to un-zoom is a nice touch.
I don't understand this article, this is literally one of the first thing you learn in React, not some obscure secret
It's really pretty much just a script that makes task-scheduling a tiny bit easier than editing cron. In short, crontab runs the same script, run.js, at a bunch of different increments, with an argument that tells run.js which increment to run. Then run.js just looks for any commands that are in tasks.js at that increment and runs them. So, for example, if you wanted a bot to tweet every two hours, you'd put a line to run it under the `2hours` property: ``` "2hours": [ "/usr/sbin/node /home/pi/pi-bots/bots/ascii_bot/app.js", ], ``` 
In your file.html, or your JS, or wherever you're referring to file.xml, make sure that file.xml is in your web root, and then use HTTP, not file:///, to refer to file.xml. Try putting file.xml into the same directory as file.html if it isn't already, and then making the `XMLHttpRequest` to load `http://127.0.0.1/file.xml`.
Tyler's courses are the best. He deeply understands JavaScript and his approach to teaching is phenomenal. 
Thank you so much for this questions. - It'll exists as long as I'm alive, because I use it (and before that used jsbin) - All code automatically save to server. Only you have access to edit you code (in LocalStorage you have autogenerated authToken. You can save it, it is ensure that it's yours code). A little bit later I'll add github, google auth. You old authToken will updated and your projects will available. - Yep, I'll add library support with this snippet: https://playcode.io/libs - Not sure about tabs, I'll think about this. - Folders - in todo list. 
I wrote a simple discord bot recently, let me fish up the repo. Its stupid simple and should give an idea.
On bus, I'll explain once I get in office 
:) Thanks!
Indeed this is the best way to go about it. It ensures that you only need to iterate over your `posts` array twice instead of ~N*(N/2) times: const postIdByTitle = posts.reduce((memo, post) =&gt; { memo[post.title] = post.id return memo }, {}) posts = posts.map((post) =&gt; { post.related_posts = post.related_posts.map((related) =&gt; { return postIdByTitle[related.title] }) return post }) I am curious though, if the titles of the posts are unique (which you seem to imply), then why even bother switching out the `related_posts` array of post titles with posts ids?
&gt;If you’re interested in learning whether or not you’re capable of building that thing — you should probably use The Boring Stack If your primary question is whether or not you *can* build something, then yes, use the technology that you already know and don't get crazy. But senior developers *know* they can build whatever they put their minds to. Their driving question is how to build it efficiently instead. That includes both the initial development and the maintenance. For that, "the boring stack" may very well be less than adequate for the job. *That* is the reason there are so many new frameworks and tools and *non-boring stacks*.
_ is often used to denote that the value won't be used, underscorejs choice is a bit weird in that regard. Some languages [*go*](https://golang.org/doc/effective_go.html#blank) further and make _ an actual meta-variable that nulls any assignments to it. On the perfomance side I do not know, but JITs ought to void the creation of arguments that are not used... maybe? JIT are complicated.
Just use [Axios](https://github.com/mzabriskie/axios), and do something like: axios.post('/my_script.php', { firstName: 'Fred', lastName: 'Flintstone' }) .then(function (response) { console.log(response.someText); }) .catch(function (error) { console.log(error); }); 
I'd like to point out that I think the idea of customizing how you schedule your repetitive tasks is a decent idea. That being said, I'd also like to point out that I think the title of the project is a bit misleading. Sure, you use this for the bots on your pi but is this really a bot or pi project? Seems more like a general purpose task scheduler for those who don't actually want to the full force of cron. Also, two suggestions off the top would be to: 1. have a script (like a make) which sets this up. No need to have them edit and paste the cron stuff by hand, for instance. 2. Set up an @reboot portion for scheduling, as that's another nice feature of cron. 
&gt; {}[0] &gt; //=&gt; Array [0] &gt; // Weird, actually didn't know this That's probably because it's being interpreted as a block followed by a literal `[0]` array. `({})[0]` will be `undefined`. 
Native javascript fetch: let payload = { firstName: 'Barney', lastName: 'Rubble' } fetch('/my_script.php', { method: 'POST', body: JSON.stringify(payload) }) .then(function(response) { console.log(response.text()); }) .catch(function(err) { console.log('Error', err); });
Thanks! I agree; as I say in the readme, it's essentially just a thing that makes cron task scheduling a little easier to manage and gives you a handy option for changing recurring events remotely via GitHub. It could certainly be used for scheduling any kind of task, and could run from many different systems. That said, when I originally looked around for a good, cheap solution for running persistent bots and having total control over scheduling, the Pi was the best option I could find. I don't have a desktop computer and, even if I did, I wouldn't want to keep it turned on 24/7. Also the free cloud services I looked at had very limited scheduling options. In that sense, I think it's _kind of_ specific to the Pi, but I'm sure there are good alternatives I haven't thought of. (FWIW, the project also accounts for some Raspbian quirks, which I'm sure are common knowledge among avid Linux users, but that I hadn't been familiar with.) In any case, thanks for your feedback! #1 is a great idea. I don't totally understand #2 but will read up.
because `ids` are set by the database and are used in table joins etc.
I picked it up from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) and [Go](https://golang.org/doc/faq#unused_variables_and_imports), and used it because it was easier to read. Good point about unnecessarily creating event objects. Fixed now, thanks.
For #2, I meant that cron as an @reboot option which runs a script on reboot or startup. Which would be nice if people want to start their scripts or bots whenever the pi or machine starts up. So maybe add a "reboot" option to the schedule list. 
Looking awesome, may I suggest some features? - Ctrl + S to save the current project. - More behaviour features like: - Disable auto-updating (for example when working with APIs to avoid sending a lot of requests). - Control the amount of spaces of the tab, and give the possibility to make tabs or spaces for indenting. Some others that would be great: - Tabs instead of panels, they feel more natural as if you are working with a text editor or IDE. - [This feature from Chrome Dev Tools] (https://gfycat.com/ReadyUnlinedAracari). Allows you to change CSS values with the scrollwheel or the arrow keys. - Be able to change the color scheme with a JSON file you can import. - When creating a new file (CSS or JS or whatever, being able to name it in the creation moment, as oposed to naming it after it has been created). Anyways, looking really good!
And to reiterate both of your points in even different words, great developers can analyze frameworks and different tools and make a determination whether the time invested learning and implementing will be worth it, compared to developing your own solution. 
Thank you. Most of the credit goes to the the original jQuery implementation: https://github.com/fat/zoom.js
But a lot of jobs require you to know at least some of the 'interesting stack'. I'd rather be less productive and learn new interesting things than coast on what I know. 
Where are you using it? Or, why do you need to load 5000 posts at any point? edit: I mean, you're still requesting a huge amount of posts, potentially with duplicate info. You shouldn't be looking to dynamically map this but probably just transform the way it is stored to the second way you describe. Still though, why are you using 5000 posts?
I've moved the vowel check to its own function cleaned it up a little: function isVowel(char) { return (char === 'a'|| char === 'e'|| char === 'i'|| char === 'o'|| char === 'u') } function toPigLatin(string) { if (isVowel(string[0])) { return string + "way"; } else { if (!isVowel(string[1])) { return string.slice(2) + string[0] + string[1] + "ay"; } else { return string.slice(1) + string[0] + "ay"; } } } I think that works correctly. EDIT: moving explanation here Your main problem was on the first part of the first else if (str.charAt(0) !== 'a' || str.charAt(0) !== 'e' || str.charAt(0) !== 'i' || str.charAt(0) !== 'o'|| str.charAt(0) !== 'u') According to Boole's logic, !(A || B) === (!A &amp;&amp; !B), so that condition should have &amp;&amp; instead of || (that's easier once you take the check to its own function
 what you should do is break down the if's into separate expressions that output the result and then you can see what is coming up true. keep breaking it down further until you see what is happening. like &gt;str = "california"; &gt;const x = (str.charAt(0) !== 'a' || str.charAt(0) !== 'e' || str.charAt(0) !== 'i' || str.charAt(0) !== 'o'|| str.charAt(0) !== 'u') ; &lt;"california" &gt;x true 
You dont want the 'a' to match any vowels, but your clause accepts if there are any vowels which it doesnt match ('a' doesnt match e - so it accepts) Change the ||s to &amp;&amp;s so it musn't equal any of those Chars.
the said code is part of a content aggregation platform and needs to be run once each day. the data i used in the question is just to highlight the problem i am facing - `post` is just a placeholder resource; could've used `foo` instead.
It's just a function that gets called when the server is created. Don't over think it 😃
You are passing a function as a callback, and it is bound with those first two arguments and then called upon completion. Functions are first class citizens is JavaScript, and it is very common to pass them around like this. 
None of those tools have anything to do with gzip. 
I'm not sure you understand, these tools try to make the output repetitive so that it can be better compressed.
If anything, I'm underthinking it at this point.
That doesn't answer the question with regard to what type **red** is. How does the system know what type **res** is?
It's unnecessary to check that the character at position 0 isn't a vowel in every if block (str.charAt(0) !== 'a', etc). If the code makes it through the first if block, then you already know that the character at position 0 isn't a vowel. Checking it again is just redundant.
It seems you're using node, [this] (https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/#sending-response-body) should answer your question. It may not be a helpful info at this point, but generally, JS uses duck typing, so don't think of rigid types as in classical object oriented programming (unless you're using TypeScript I guess). You should think that there is no intrinsic indication that ties an instance to a class. More or less any object that has at least required properties and methods will work in any case. 
No, that works the other way around. If you had a compiler from JS to machine code, and the compiler was written in JS and compiled to machine code by itself, that would be a self hosting compiler. But something that takes JS as input and produces identical JS as output is a trivial identity function. If what this thing does is take ES6 (for e.g.) and produce ES5 or some other dialect of JS, then it would be interesting to know; otherwise "JavaScript compiler" by itself either means compiling to machine code (which I don't think is the case here?) or makes no sense. So, I have to ask again... compile to what? If to JS, from what dialect to what dialect? That's a pretty critical piece of information that is missing in the README. Otherwise, I can write a compiler from JS to JS in one line of code.
Nope, I'm talking about the second parameter of `then`, a function executed when the last promise is rejected. The article skips right into the `catch` method, which handles errors for all promises in the chain.
No offense taken :). I don't think there's anything in the post which opposes that view. I know I personally don't disagree with you and if I've communicated otherwise in the post it was unintentional. Perhaps this additional context is useful: &gt; This post comes from years of failed side projects (not financially failed, failed to ship). I would get an idea for something that I wanted to create but instead of just grinding it out, I would adopt two or three new technologies and try to do allthethings. My 2015 was all about learning how to actually ship and I got quite good at it. 2016 was spent trying to build a business instead of just a side project. Building a software business has absolutely been the most effective way to ingrain just how little difference the tool you build with makes. If you can get it out the door, use whatever you're most proficient with. If you want to learn new language, frameworks and tools, by all means, live it up. If you want to ship something to the world and make money from it, find your boring stack and start grinding. &gt; https://www.indiehackers.com/forum/post/-K_HNLO3TGHcXDdyWVam
 __exports.compile = function(str) { let tokens = scan(str); let ast = parse(tokens); return (generate(ast)); }; `generate` returns a source code string. So, uh, it compiles from source code to that same source code. (`compile` is the only export.) I assume it's meant only as an education tool.
If you do promise.then().catch().then().catch() then its more effective. The first catch will handle a rejection from the previous then() chain. The last catch will handle everything. It's more easily understood than something like: promise.then(... really long function...., ... more statements about handling the failure ... )
Well if you have JQuery, why don't you lookup the $.ajax doc…?
charat(0) = c does not match any vowel so go to first else if charat(1) = a a is not equal to e is true (maybe you meant to use &amp;&amp; there) 
Javacript is a dynamic language. You could do res.piggyback = myObject; Perfectly acceptable. 
Excellent post. I started learning to program 3 years ago and dabbled with the three major open-source backend options: Ruby on Rails, Django, and PHP. In the end, I went with boring PHP because it was the simplest. Same thing for cloud hosting. Tried AWS, it was too complicated. Tried DigitalOcean, it was a breeze, and so now that's what I use. Anyway, I think that's the best way to pick a stack. Try a bunch of shit, and see what's the easiest/simplest. Long live the boring (simple) stack.
I think the local mutation solution is more readable than Promise.all, but both are options valid options. // Local mutation ES5 function userWithImage(userId) { var data = {}; return request("/users/" + userId) .then(function(user) { data.user = user; return request(user.avatarImageUrl); }) .then(function(image) { return { user: data.user, image: image }; }); } // Local mutation ES6 function userWithImage(userId) { var data = {}; return request("/users/" + userId) .then(user =&gt; { data.user = user; return request(user.avatarImageUrl); }) .then(image =&gt; ({user: data.user, image})); } // Promise.all ES5 function userWithImage(userId) { return request("/users/" + userId) .then(function(user) { return Promise.all([ user, request(user.avatarImageUrl) ]); }) .then(function(data) { var user = data[0]; var image = data[1]; return { user: user, image: image }; }); } // Promise.all ES6 function userWithImage(userId) { return request("/users/" + userId) .then(user =&gt; Promise.all([ user, request(user.avatarImageUrl) ]) }) .then(([user, image]) =&gt; ({user, image}); } 
It doesn't, it just says you hve to release changes you make, and can't alter the license. (You can do bitcoin mining)
I second that - Tyler's react course is very good; 1st you get a lecture that you can follow along in code, and then he gives you objectives that you reach with what you learned in the 1st part, but more on your own this time ... very effective approach!
This will fail if you have three consonants in the beginning of the word, as in "string". An easier way would be to find the position of the first vowel, and slice relative to it.
I see, I misread your question. The http module would be responsible for that knowledge. It knows that **res** is an object and has a property which is a function called **writeHead**, that's it. EDIT: /u/Rhomboid has a great response, which I didn't see. Please refer to his answer :]
What you're looking for is a profiler. I have not had to use one for node yet, but it might point you in the right direction?
Yes. Thank you, I think this is what I am looking for: https://nodejs.org/en/docs/guides/simple-profiling/ 
&gt; But senior developers know they can build whatever they put their minds to... omfg, omfg. quite likely this will be the most ignorant, arrogant, most stupid thing I will have read on reddit for 2016. 
Check here: http://stackoverflow.com/questions/9640266/convert-hhmmss-string-to-seconds-only-in-javascript
You can try parsing the XML separately: var req = new XMLHTTPRequest(); req.open('GET', 'data.xml', false); req.send(); var parser = new DOMParser(); var doc = parser.parseFromString(req.responseText, 'application/xml'); var myAge = doc.getElementsByTagName('age'); Just FYI, it's common style to use camelCase for all variables. Only use PascalCase when defining a class or interface. That's why I changed your variable names. It's also the norm to use single quotes for strings, since double quotes are used for HTML elements. Also, you don't need *any* attributes on `&lt;script&gt;` elements anymore. They are JS by default.
I didn't read the docs well enough. It doesn't require es modules; using a "script" preset would have worked. The following would have resulted in equivalent compatibility $(babel) js/*.js --presets=es2015-script --plugins=iife-wrap Using it now.
That is true. I've learnt to tell "no" and fire clients also for that and other reasons but done that as a freelancer also. Yep, I've been researching for some time what would interest me more than frontend at this point. Tools is cool but hard to get money, backend is kind of following frontend steps, maybe just decide myself on a language and work from there? I don't know... for now my expertise is frontend and will stay there until I have a clearer idea. 
do you have the source code for curiosity?
Thank you. - Project autosaved alsways - "pause" btn can help to stop livereload - Modify numbers by arrow: win: "Alt-Shift-Up", mac: "Shift-Option-Up" - About creating filename - added to todo.
Twitter: https://twitter.com/playcode_io (@playcode_io)
awesome! and happy new year!! 
One thing you could look into is devtool, it's an NPM package that lets you run a node process inside chrome devtools, allowing you to use their profiles/timeline features on your server code the same way you would with client code. It's as easy as **npm i -g devtool** and then run your app from it instead of node, like **devtool app.js**
https://codetuts.tech/flatten-deep-nested-array-object/ enjoy the read. also try this: https://jsfiddle.net/sn1L8gpo/
Slack is built with lots of PHP. Enjoy your groans!
I think there is some danger in this. Your employer probably wants you to use the boring you know. Let's say it's Java - 15 years of Java. They have their own way of doing Java and you've been doing it their way for 15 years. You got stuff done! Good for them! What happens next time you are looking for a new job? Is 15 years of the same thing going to cut it? Even if you're an expert in that one thing? Sometimes I think employers want to keep your skills limited to keep you from going elsewhere. I think it cuts your value when it comes to raises as well. Why pay more if you can't move anyways?
* **minify** - Is simply the removal of all excess white space characters and code comments, essentially making the code smaller while not changing the code logic. * **obfuscate** - Is the radical alteration of code. The word literally means to hide behind confusion. This can include changing of all word characters so that they become something tiny, such as converting *copy_into_directory* into something like *ab*. Obfuscation will include minification and is intended to make the code even smaller. It will include additional changes to the code. If, for example, all non-essential white space characters are removed then semicolons (where missing) must be inserted to keep the logic from breaking. For many developers the terms are completely interchangable and there isn't any difference. Most developers that go through this will choose the most extreme solution, put their code into production, and never debug it from that environment. Personally, I have given up on this madness. Its a pain in the ass. You can typically get superior performance by concatenating your code into the fewest number of files so as to elimination additional HTTP requests opposed to obfuscation alone.
I finished a Node.js Express web app as part of a Twitter bot to review and retweet anagrams. [The Twitter account is here](https://twitter.com/anagrammatweest) and I also [post anagram tweet pairs to Tumblr here](http://anagrammatweest.tumblr.com/). [I wrote a blog post yesterday](http://blog.briandrupieski.com/building-twitter-bot-to-retweet-anagrams) on building it. This was my first real Node.js app, other than doing some knockout and jQuery at my old job. It was fun to really dig into Node.js for this, and now I can't wait for async/await in Node v8. [I also have an older post here](http://blog.briandrupieski.com/finding-anagrams-on-twitter) on coming up with a way to filter and score pairs of tweets in the firehose to come up with interesting anagrams. More importantly, [the code for the Node.js project is here](https://github.com/bdrupieski/AnagramReviewer).
You're right! I couldn't think of an English word starting with 3 consonants (English is not my main language) 
You are correct, unpacking would be an issue in ES5. Haven't really coded against ES5 in a while to be honest (coming from TypeScript).
I was under the impression this method doesn't block the page while loading. But I could be totally wrong. 
This is a perfect example of where recursion is your friend. I'm on mobile so I can't really type up an answer. Consider writing a function which only examines the first element of the array, flattens it, then calls itself with the remaining elements of the array, concatinating the two results together. This is the basic form of recursion. If the first element in the array is itself an array, then call steamroll on that array, concatinating the results with the remainder of the outer array.
When you run `http-server` you start webserver. I am assuming you are talking about frontend code that your browser executes once it retrieves stuff from the webserver? In that case the easiest would be to use browserify (you don't have to change how you write code if you come from nodejs): http://browserify.org/ Note that using a tool like that you are writing code that needs to be compiled/transpiled by a tool (like browserify). It will spit out different code which you feed into your browser.
For the http vs https, you can just leave off the protocol altogether and just do "//myhost/whatever.js"
AFAIK this is the oldschool way to do &lt;script async src=...&gt; http://caniuse.com/#feat=script-async Old IEs for instance still don't support this feature. Related SO answer: http://stackoverflow.com/questions/1834077/which-browsers-support-script-async-async/1834129
A nice article comparing that option to other alternatives, including html5's async attributes: https://www.html5rocks.com/en/tutorials/speed/script-loading/ 
This still applies.
Life expectancy of humans across the global. https://git.io/life-expectancy
Not sure why you are using map. Can't you just call flatten on the original array?
This has been an [anti-pattern](https://www.paulirish.com/2010/the-protocol-relative-url/) for a few years now. It is recommended to just always use `https://` if available.
Analytics uses different hosts for HTTP &amp; HTTPS so that can't work in this case. But I think that's irrelevant now since it always uses the HTTPS version anyway. 
I wrote a quick react app that queries Reddit for the top posts on r/listentothis. It isn't much I just used it to practice with redux and the router. https://cleverjam.github.io/listentothis/#/ It is currently only able to handle YouTube links from the sub, it ignores SoundCloud and other providers. Maybe I will introduce those features in the future if I find the time
Well it seems what you'd rather be doing is learning than building. 
Well, yes, but it states that protocol relative links in general are an antipattern. As long as the code in the OP is already detecting the protocol and constructing the url accordingly, then using the protocol relative link isn't any more or less of an antipattern by comparison, because it achieves the same thing. It's just less convoluted. 
This is the answer. A good read-up on immediately-invoked is in 'Learning Javascript Design Patterns' in the name-spacing section. "In JavaScript, because both variables and functions explicitly defined within such a context may only be accessed inside of it, function invocation provides an easy means to achieving privacy." "IIFEs are a popular approach to encapsulating application logic to protect it from the global namespace but also have their use in the world of namespacing." It uses a closure to ensure private state. These immediately-invoked functions were best practice for ensuring namespacing before module loaders, and it's how most of them work under the hood. 
Hi /u/rohitksh, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Please use the [Showoff Saturday](https://www.reddit.com/r/javascript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AShowoff%2BSaturday) posts for these types of submissions.
This used to be one of my favorite blocks of code to discuss during interviews. Candidates and I would talk through what the code was doing and make educated guesses as to why. They didn't need to get the right answer, so long as they asked good questions (of me or on Google) and showed progress when approaching the problem. 
once you set a variable on top you don't need the var before the name anymore. Also when you are checking to see which operator to use, you should use '==' instead of '='. any reason you set them to strings instead of just using numbers?
Yeah, I'm surprised that most other people are missing that the URL changes depending on the protocol. You couldn't do this as an ~~HTTP~~ HTML snippet without doing it that way, even without the blocking aspect. Edit: what even
# I solved it for now In a very crude way, there's probably a more beautiful way, but this is what I came up with to solve it. Basically I started the field with: &lt;?php $onix = rand(); ?&gt; Then I slapped that crap on every id of the html. On the javascript side I slapped it basically everywhere. It's ugly as a mofo but it works like a charm: &lt;script type="text/javascript"&gt; var onix&lt;?php echo $onix; ?&gt; = false; function onOffButton&lt;?php echo $onix; ?&gt;(id&lt;?php echo $onix; ?&gt;, text&lt;?php echo $onix; ?&gt;) { var select_id&lt;?php echo $onix; ?&gt; = $("#addfield&lt;?php echo $onix; ?&gt;").prevAll('select').attr("idx&lt;?php echo $onix; ?&gt;"); console.log(select_id&lt;?php echo $onix; ?&gt;); if (onix&lt;?php echo $onix; ?&gt; == false) { document.getElementById(id&lt;?php echo $onix; ?&gt;).style.display = 'block'; document.getElementById(text&lt;?php echo $onix; ?&gt;).style.display = 'block'; document.getElementById("addnew&lt;?php echo $onix; ?&gt;").textContent="[Close] Add New"; onix&lt;?php echo $onix; ?&gt; = true; } else if (onix&lt;?php echo $onix; ?&gt; == true) { document.getElementById(id&lt;?php echo $onix; ?&gt;).style.display = 'none'; document.getElementById(text&lt;?php echo $onix; ?&gt;).style.display = 'none'; document.getElementById("addnew&lt;?php echo $onix; ?&gt;").textContent="[Open] Add New"; onix&lt;?php echo $onix; ?&gt; = false; } } &lt;/script&gt;
I would just use $.ajax{
This is a great post! Rails is my 'boring' stack, however I don't find I boring at all lol. I still really want to learn vue though
Per the [official ECMA-262 specification](http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.1): &gt; Time is measured in ECMAScript in milliseconds since 01 January, 1970 UTC. In time values leap seconds are ignored. 
That would be a bad idea in this context. It's a snippet users are supposed to paste into their pages. Requiring jQuery as a dependency would be really silly.
The single equals in your if statements are fucking you over. They are reassigning and making those statements always true. Lot's of unusual ideas here. Why use multiple flags when a single enum like flag, doing string comparison would be less complex. Also, you can put your prompts straight into a parseInt, to save assigning multiple vars It's also worth investigating if a switch is useful for you here. Good luck. 
Not an expert in this area, but that's a good question. The issue is even deeper than this - IEEE standards are inconsistent with each other. If you're interested in learning more, check out this resource: https://www.ucolick.org/~sla/leapsecs/epochtime.html
It's easily one of my favorite JS libraries right now. If you're trying to build something basic in React, just use Inferno hands down. Lifecycle events are slightly different and there are no proptypes, but otherwise it's mostly just win.
[Wrote an article](https://medium.com/@dtipson/considering-cancelation-a96e0f3c2298#.90m62xdz3) going over why cancelable Promises are such a tricky (if not bad) thing and how one of the major alternatives, functional Tasks, overcomes those problems.
It's very close to a final 1.0 release. You can install and use version 1.0.3 right now as they're in the final stages of a stable release. Easiest way to get started would probably be to use the [Create Inferno App](https://github.com/infernojs/create-inferno-app) fork. Having played around with it for a while I'm incredibly impressed at what it accomplishes. It shaves a ton of weight in file size and outperforms rendering/scripting performance in React by around 2-5X going by the Chrome developer tools Timeline. The only bug I've run into so far is you still get a production warning error after minifying the build but the maintainer says it's fixed in the dev branch and are just waiting for the next merge into master for the fix.
It's kind of tough. If you want to use a lot of react libraries then you have to use react compatibility which kind of ruins the point. It is a different ecosystem unfortunately.
&gt; am i the just missing by a mile More like a thousand miles: var Chart = require('chartjs');
Thank you! Now I understand what happens when you create an array with the constructor notation with only one element. So basically when this happens you create an array of `n` length, though element1, element2, elementn, etc are undefined. Oh, no! The two arrays I provided were declared using the constructor notation. 
Great news for the react project as a whole. 
Does it help get around some SOP limitation perhaps 
One can become more valuable in a lot of different verticals. Take the time that you would be spending learning new technical stacks and invest it into other areas of the business. Design, leadership, management, operations, sales, marketing. I completely agree that one shouldn't spend their time exclusively chasing productivity at the cost of all growth. My goal for the past year has been growth in more than _just_ programming, which I appreciate is a different goal than many others have been chasing.
HipChat's web side (of which there is very little) is PHP, the clients are native code and the backend is mostly Python with some Node and Java spread about. The view that users look at to see chat is actually HTML and Javascript built in React piped through whatever web view is available on the client platform.
If v8 supports WebAssembly, Node will
It's probably not, but a reason nonetheless. At google scale you most likely rather offload this to the client (in the case where ssl over non ssl is actually a performance penalty). My point was that you can dynamically decide what resources to fetch based on host environment (want something different for mobile / etc).
Pro tip: unless you have a really good, specific reason, don't use the constructor. Literals are the way to go, and array spread (in ES2015) mostly eliminates the cases where array constructors are useful. Edit: It's also worth noting the pitfalls of the array constructor. `(new Array(10)).map(() =&gt; console.log('this will never get called'))` is a pretty good case. The array constructor creates an array full of holes. Even `.fill()` doesn't work on them. If you're a hedonist and use for-in loops on your arrays, you'll find only `'length'`.
Script-tag injection is not subject to the [Same-Origin Policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy); it's difficult to remember what *is*, but stuff like the DOM inside an iframe or a popup window, or attempts to load content via XHR or Fetch, would be subject to the SOP. Now something like this that *does* work around SOP limitations is JSONP, where a script tag is injected that includes a parameter specifying the name of a function to call, with the JSON response passed in as the first argument to that function; this is an alternative to setting up proper CORS headers so that XHRs will work.
That ink is going to fade in a few hundred million years. Stone tablet and chisel? 
Interesting sidenote: Google uses something called a "leap smear" to cope with leap seconds. https://googleblog.blogspot.co.at/2011/09/time-technology-and-leaping-seconds.html
Thank you for the advice!
You have an error when trying to assign something to "panel-body" You can't have "-" in your variable names since it's reserved for subtraction. Try panelBody instead
second this
Yeah, but I think this is more of a freeby they take because it's hanging around anyways. The main reason is `&lt;script async` was not supported for a long time, leading to annoying load times - which you want to avoid as much as possible. I know there are other reasons, but unless someone from Google tells me otherwise (or someone gives me a better reason) I'll just assume load times due to async load is the main reason. Maybe the other thing added to it, but that isn't really google. They process 4k video, the re-routing of SSL is laughable in contrast.
A pattern like `(new Array(11)).join('.').split('').map(function(){return null});` is a good way to code-golf an array with 10 `null` elements.
`[...new Array(10)]` produces an array of undefined with no holes. Tack `.fill(null)` and you've got an array of nulls. That's one of two ways that I can justify the use of the array constructor. 
The difference is that my example works even in ES5 (although it's surely not efficient).
That's what transpilers are for. 
O c'mon, part of the family of the biggest node modules - it's not a problem the huge number so much, it's more that they are deep. When you have small tests and they can be in only one file (because your package is small module for example) it is absolutely overkill to use such "awesome" runner - time wasting job - both install and run. Why is overkill? Because concurrency comes when you need more files and your package has many tests. Any other "feature" and sugar can be done in few lines of code with correct thinking. And with few lines of code I mean, really, few lines of code (maximum 1k to be full compat with ava) and 3-4 modules - even working on 0.10 without problems if you want. But yea, we can drop it completely, so everything will work on v4 with native/vanilla javascript, no build step, no runtime magics, no shits. With support for everything from callbacks to promises, streams, child_processes, observables, sync and async/await. There's tons of things that I can say. For example, I'm against that babel and Co. are included, transpiles test files in run time and so on. It's absolutely bullshit and I don't see sense. Because in anyway, everyone nowadays has build step (or sort of some tooling, scaffolding and etc) and tons of devDependencies and he is thinking he is awesome. It's not runner/framework job to do such things. Most cool thing is the modern (default) reporter, nothing more, nothing so special. Sorry for the offensive tone if it sounds like that, but I just don't like such "awesome" tools - don't like big devDeps, don't like big install times (yea even if you use yarn) - seconds and milliseconds matter. That's my thoughts and I can say more and more and more, but will stop here. Sorry, maybe I can't write it as it is in my head, but yea, I'm not the best.
Not understanding any of this, I copied the address and google-analytics.com and put it into my address bar. It was blocked by ublock as being some kind of malware. Is that the point? To load files that might otherwise be blocked? 
As shadowmint said, wasm is essentially another representation of the JavaScript syntax tree. The main purpose is to deliver large packages of compiled code (like C++ games) to the browser and have them be ready to run faster. Node is a different environment and I'm curious which sorts of new services you are thinking of? I ask, because I can imagine other ways of getting at that. For example: if you have a C++ library, you could compile that to native code and talk to it from Node, no wasm involved. It doesn't seem to me that wasm actually buys much, if anything, for node.
&gt;/s
Well JS isn't really designed for a good OOP model, but that's a good thing. Currently I work on a project that **DEMANDS** dry hierarchical code where everything needs to abstracted out to a base class to inherit from. What OOP does is severely slow down development, and cause the codebase to be extremely inflexible and brittle. OOP is the worst programming paradigms ever, and it's zealots refuse to see the truth. The reality is OOP forces developers to try and find commonality between very separate and different things. For example an airplane, helicopter, unicycle, and submarine are all vehicles. . . . but to build a giant hierarchy of shared "dry" methods and attributes takes a shit load of time and monkey patching when you realize things like **"Oh a unicycle doesn't have fuel"**. What you need is to throw that garbage out the window and just write functions and objects and compose them together as needed. This way you build as is, and you don't need to reason about how a unicycle and a submarine are similar. 
happy new year to you 🎊
&gt;You can essentially do what you're describing today! You can take many languages that can compile to LLVM (Rust, OCaml, Reason, whatever floats your boat) and then use emscripten to convert that code to asm.js which is supported in all browsers *and* very fast in modern browsers. asm.js lacks aot compilation in v8 and is not as fast as in FF.
I'm not sure you're understanding my point, and that's ok.
You said that you can get it to show up as a hyperlink, without the right styling. Have you tried clicking on it? If it is working correctly than it's going to be the theme's CSS giving you problems. It would probably take someone who knows a little about code to check it out and change the styling manually. Not a very hard job though if you know anything about HTML/CSS. Edit - And you can go to CodePen - paste your JS code into the HTML box of the editor - I know, it might sound weird but just do it. If it shows up differently than it looks in your theme than it is definitely what I said above.
One rule of thumb in OOP is the single responsibility principle: each object should just one job. Your game object sounds like it has too many jobs and so should be split into several objects.
This. Just write C++ node modules.
Hi /u/bkittens, this is a wordpress question, you might try /r/Wordpress.
I love AVA. I've been using it on my open source projects for a little while, and I always get a bit sad when I have to go back to mocha/chai at work. My opinion: Using async/await helps make your test code really clean (obviously not exclusive to AVA), and being forced to write atomic tests can be handy. The main reason I hate going back to mocha/chai though, is the beautiful stack traces. Sounds a bit silly, but it honestly makes finding bugs that much faster - which is why you write tests, right? Oh, and it really is stupid fast 😊 Obviously, your milage may vary.
Ehhhh. I just spent a bunch of time migrating a project to it. It's not any faster. It takes *so long* to instrument each of the forks. The startup time is *forever*. Not loving it. Edit: also, it doesn't seem to be great at reading source maps, especially with async await. I get so so many '_callee' and my stack traces. 
My guess is ntp. 
Yes even es5 can do really good OOP. 
I don't know if there is one, but I liked the idea. So I made a server: https://discord.gg/HTpH5
Wrote a recipes library for service workers. Still under development. Please star. Pull requests are welcome! https://github.com/phenax/service-worker-js 
Article about a team at paypal that started with AVA, but switched to and preferred Jest. https://medium.com/@kentcdodds/migrating-to-jest-881f75366e7e#.1x8udv48z
The Instant Invite expired already.
Or, in the case of code golf, as long as it's already in the spec, it's fine either way.
https://discord.me/servers/1/Javascript Pick the SpeakJS
What's your point then? You said using inline code is for compatibility, and I've pointed out that's wrong. What did I miss?
TIL there is a directory of public Discord servers; previously I've just been adding any random links I found on the Web.
&gt; It is a different ecosystem unfortunately. someone should make a lib which would allow you to use react component with inferno. There's no reason it should not work. Like 90 percent of react components on github should work when you would just replace React import for inferno at the top.
We recently switched from karma+jasmine to Ava, but I didn't see that much of performance advantage. We're using jsdom to test dom interactions and the execution speed is basically the same. I'll try to get some time measuring tomorrow, but I think the gain was not significant. One thing I liked is seamless integration with nyc for code coverage.
Try `import styles from 'styles/foo.scss'` instead
but i do not want to use the extension. that's the whole point of extension resolution in webpack + eslint. the problem is that only `*.scss` files are not being read properly by eslint
You can install `power-assert` to get those stack traces. It's really not too difficult.
I agree with the comments about it not really being much faster and the source maps not being 100%, but even then I enjoy the simplicity compared to other libs I've used. I can usually throw together a few tests from memory, including the precompile dependencies if I want to test against my source code using es6 modules. Overall I would decide based on how you like the syntax and flow, not necessarily on promised performance, speed, etc. Oh, and as for browser testing, it works very well with nightmarejs.
Ava is the test runner to use if you want tomorrow's technology (concurrent test running) today. I would not recommend it as a "batteries included" test runner, or at least not yet, as the framework has some maturity issues. Here's two examples: .jsx files and suites. Ava supports Babel, which means it supports JSX. However, you can't actually have AVA test files with a .jsx extension. There's a ticket for it, the AVA team recognizes the problem and has a proposed solution ... but the ticket is almost a year old and shows no sign of being resolved. Then there's test suites. Pretty much every testing framework since the dawn of time has had the concept of test suites, or something equivalent like BDD frameworks' `describe`. AVA has nothing: if you want to organize your tests, your only option is to put them in separate files. Again, there's a ticket in GitHub, but that one's more than a year old and still shows no signs of resolution. Now do you need to name your test files with .jsx, and do you need the concept of suites to build your own suite of tests? No, and that's why people are using AVA today. But if you're looking for relatively basic features that frameworks like Mocha added long, long ago (if they didn't just have them to begin with), you should probably wait until AVA matures a bit.
https://www.quora.com/Why-are-classes-and-prototypes-bad-parts-of-JavaScript/answer/Sean-May-6
that's a pretty shitty way to spend the countdown
[Try jscodemods](https://github.com/skovhus/jest-codemods)!
WebAssembly is just an LLVM backend (a compile target). If you want to run your code server-side, you'd just compile for the server architecture/toolchain (example x86_64 linux-gnu). You don't need WebAssembly Node.js support to run your code on the server!!!! All it would do is run your code slower. It would be like implementing a HTML renderer in a canvas2d context/tag. I'm actually scared that developers think this is a good idea.
Why not use scss-lint?
WebAssembly more or less a binary format; it's something you compile to that gets run in a VM. If you want to run "the same code", then just compile a native binary for the server. Then you don't need to run it in a VM. It's very simple. 
I think you're just trolling now but I'll bite... Why? Can you explain the pros of compiling to WebAssembly vs. compiling to native? From my point of view, running WebAssembly on the server would be like trying to run the 100 meters in flip-flops. You totally can - but they the hell would you want to.
Are these artisanal voxels or did you use a library? 
I agree those are some pros - but are they worth the big performance cost. Software such as Redis seems to do just fine with portability and sandboxing. 
The webpack cobfig is missing the scss loader.
Absolutely. Inheritance is a declaration of very strong coupling between two components and planned incorrectly will result in invalid relationships.
khan academy *also* uses biology references in its JavaScript tutorials. I wonder why that is... edit: edx.org needs to higher a fucking UX designer. That site is a mess. edit 2: [let me save everyone the trouble](https://www.youtube.com/watch?v=tas-p2o416I&amp;list=PLgNxd3KRDkEcfXT-mmbS3cPxFAkh7jfW6)
🙄
Any test/explanation will be for a moving target. All JS engines continue to add internal optimizations. For example, no matter the current situation (I don't know right now), in theory `forEach()` should be worse than a `for` loop iterating over an array. But the runtime can (more or less) easily create a for loop from the function, and if it does there will be no difference. To make simple performance testing worse, it may not do so right away but only when the runtime detects it's actually worth optimizing a section of code. As or if functional style becomes more popular focus will shift and optimizations will be implemented.
no, it was there the whole time - i just didn't put it there. updated the snippet
You can use webassembly in node version 7 now. Use `node --expose-wasm` and `WebAssembly` will be available. 
A video link is only half the lessons - there are plenty of coding exercises.
true! but for people who don't want to sign up and want to see all the videos/lecture style, this link is for them. 
I'm self taught. No college degree in computer science and extremely minimal formal education in regards to programming. When I was really young, I programmed in Visual Basic but didn't really understand fundamental concepts. Nothing stuck. Tried C and C++ but it was a different time and we didn't have youtube or the vast online resources we have today. Fast forward to 2009, I realized I needed a career change and development was still interesting to me. I picked up several books, went through several video and written tutorials, and wrote a lot of really bad code. My a-ha moment was a culmination of going through a combination of various books, tutorials, and one-off simple projects that ultimately led to me understanding object oriented programming. The most important thing I learned while learning, was that no amount of listening to youtube videos, reading books, or following tutorials would make me grasp the concept. I had to attempt it and see it in action.
Good luck, that's a lot of projects and not a lot of time to complete them in :)
I dunno about the security angle. The node API has some pretty liberal system access already. If you've ever used `apt-get` or `brew` then you'll know it's essentially the `npm` of the native code world. And we don't tend to sandbox these libraries. I mentioned it below - software like Redis seems to work just fine without WebAssembly. If you're looking to further protect your machine, then tech such as docker should provide that. I can't see a solid use-case for WebAssembly on the server-side without reinventing the wheel.
Thanks, I feel like attempting it and seeing it in action might help me learn the best. Right now I'm reading about loops and don't think I will get it until I actual code it.
Yes there's that too---the rejection handler only handles errors within a single then, not in the previous chain above it. This really only makes it useful for cases where you can recover from the error---like a cache handler where the rejection handler retrieves the object via ajax.
spamming my inbox is not free, that has a cost. that said, yea, they seem to have some nice offerings.
Theoretically your currying example allocates memory for every call to the top level add function. As does your partial application example on the call to bind. The wrapping version shouldn't. Theoretically the wrapping version should have the worst run time of the three since it calls two functions, the other two only have a single function call at the call site. In practice who knows, especially with non trivial use cases, code, and optimizations. 
7 months ago to be exact
I second converting the models first, but when it comes to refactoring the view components top-down vs bottom-up, I find it easier to go top down. Having a bunch of `ReactDOM.render`s within your backbone code is IMO more annoying than having a bunch of react components that delegate to backbone via lifecycle methods. In my case my 'leaf' components were more complicated than their parents. I guess I'd go top down where the *views* are complicated, and bottom-up whem the *logic* is complicated. 
Currently the game object is getting the league objects from it's local array, and querying the user array within that object directly. I'm going to look up encapsulation as I'm not familiar with that term. My first thought is this refers to using a method of the league objects to get data rather than access the data directly? As for a renderer object, would I have this object store the methods for displaying the correct HTML for each object, or would I store that in each object and simply use the renderer to coordinate those calls to each object to display itself?
He he... that's the most hacky part: just a [very simple state machine](https://github.com/mrspeaker/fraggled/blob/master/entities/Blerb.js#L51), no collisions or anything, based on some random numbers. Pretty cool how much life comes from such simple and stupid rules!
MPJ's Funfunfunction
“[Exploring ES6](http://exploringjs.com/es6/)” (my book – free to read online)
I had a great experience learning JavaScript, no big "aha" moment though, it all came gradually. I learned on the job, I have a computer science degree but JavaScript is the first language I've gone deep into. Before graduation I had used Java, C# and C++, though it was the programming fundamentals I learned from my degree that really helped. Instead of thinking purely in terms of JavaScript, think in terms of what you want the computer to do exactly, then work out how to do it with JavaScript. A good example is sending an HTTP request. It's a standardised format, as with most things you'll come across, so you only need to learn how HTTP works and then you can make HTTP requests in any language with only a little extra knowledge required. I would say take the time to understand computer science fundamentals, even if you're only planning on doing front end it is beneficial. Do an online university course, enroll on an actual computer science course, or try something like Udemy. It really helps demystify most of what is happening under the hood, once it clicks and you understand how it all ties together you will have a much easier time writing code and learning new things.
You should absolutely read everything written by /u/rauschma . Beyond that, I keep a big list of links to high-quality tutorials and articles on React and related topics, at https://github.com/markerikson/react-redux-links . Within that list, I have several categories that may be useful for you: - [Basic Concepts and Overviews](https://github.com/markerikson/react-redux-links/blob/master/basic-concepts.md) has articles describing what tools, technologies, and concepts are used in modern JS - [Javascript Resources](https://github.com/markerikson/react-redux-links/blob/master/javascript-resources.md) points to a number of other places to learn more about Javascript in general - [ES6 Features](https://github.com/markerikson/react-redux-links/blob/master/es6-features.md) links to a bunch of introductions to the newer features in the ES6 spec, as well as more in-depth articles on specific ES6 features
First, I keep a big list of links to high-quality tutorials and articles on React and related topics, at https://github.com/markerikson/react-redux-links . Specifically intended to be a great starting point for anyone trying to learn the ecosystem, as well as a source of good info on more advanced topics. Within that list, I've got few articles related to React and Backbone. Most are more "here's why we switched", but I think there's a couple that talk more about _how_ to switch. Also, I have a number of articles and libraries related to Backbone-&gt;React integration and migration bookmarked in my Pinboard account. You might want to browse through that list : https://pinboard.in/search/u:acemarke?query=react%2Bbackbone . In particular, http://jgaskins.org/blog/2015/02/06/gentle-migration-from-marionette-to-react looks relevant. 
I don't think its really particular to JavaScript, or programming, or a lot of different skills/tasks. Programming in general is not easy. I've been coding for decades and it is still frequently frustrating. But if there wasn't a challenge then it wouldn't be interesting. I would give it at least 2-3 years before you expect to feel more comfortable with programming and JavaScript. But again, you still run into problems all the time. You just get used to having new technical problems and expect to solve them. We have great debuggers like Webstorm or Chrome Dev Tools, plus google/stack overflow/npm/etc. that helps a lot. But really you have to be patient and don't expect to learn or master everything in a short time.
X-Post referenced from [/r/elm](http://np.reddit.com/r/elm) by /u/toastal [Anatomy of Maybe - Part II: Functor](http://np.reddit.com/r/elm/comments/5ljih2/anatomy_of_maybe_part_ii_functor/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
I think he's mostly wrong because it's a strawman. What if I wrote a single function 5000 lines long, found it to be inflexible and brittle, then proclaimed functional code severely slows down development and is the worst programming paradigm ever? Obviously a strawman, right? We can write bad code no matter the paradigm. /u/TheBeardofGilgamesh says his project *demands* lots of hierarchies, then blames OOP. But that situation sounds to me more like the project's lead developers and architects are to blame. Paradigms are not silver bullets, and ditching one paradigm in favor of another won't fix anything if the real problem is the programmers themselves.
love this! learning to code right from the command line...
thanks for your generosity. appreciate the depth.
Very good relevant talk by Ryan Florence: Don't Rewrite, React! https://youtu.be/BF58ZJ1ZQxY
What's the reason for the rewrite?
Thanks for sharing this 
&gt; browse a website using motion cap from your webcam. Well, if you're going to use it for that, sure. I wanted to make a magic-mirror with a tablet behind it and use the tablet camera to detect motion so I can interact with it, but the solution at that time was too demanding - might give this one a try.
Here's a great how-to from a medium-ish sized app: http://blog.wercker.com/switching-from-backbone-to-react-router
You should split your leaf components into smaller and simpler components then.
 &gt; Gzip-aware coding style for higher than normal compression, making unusually small programs Could you write more on that topic? 
I agree. Maybe separate some logic from those components. Anyway, however you feel comfortable. I prefer to start from bottom because if you start from top you may have side effects on bottom components. Starting at the bottom you won't have side effects because you're already at the bottom. 
Yes. /article
Indeed, old news: https://webmasters.googleblog.com/2014/05/understanding-web-pages-better.html
Well, "real world challenges" often consist of combining approaches/technologies/etc and applying them. Codewars (and similar) serve 2 things (separate or both): 1) given you know some algoritms and math, learn specifics of new language on them 2) given you know language, learn how to solve some algorithms/math problems Which IS really usefull and really applicable in real world usage (given, you can link it in your head) Back in the topic - if you want some "complex real world example", you cannot possibly expect to solve it in 1-2 hours, right? In this case, i would suggest you something like picking some small funcionality you would like (like - i want to do simple form in Angular. Now i want simple form in React. And now i want some particle animation done...). And then do it most efficiently (time-resource wise) way, you could. (this means for example finding way to create simple React app without few days of webpack, or finding new libraries/ideas on net). If you keep simple goals, you can do well :) No point of "i want full fledged web game covered in tests and well architectured to be able to accomodate 10 people working in parallel..."
Hmm, it's not as simple as "Yes, it does. Move along". For example, here's a post from March of last year by John Mueller of Google stating that Google still has issues with Ajax. https://plus.google.com/+JohnMueller/posts/LT4fU7kFB8W As you can read, he says: "The features Googlebot currently doesn't support include Service Workers, the Fetch API, Promises, and requestAnimationFrame". Also, remember that Google isn't the only show in town. Other search engines and web services accessing your content might not support JavaScript at all.
What I've been doing lately is optimizing section of open source libraries like jquery and so forth. I'm not really looking for complex code as in huge projects, more sort of high level stuff, though maybe taking a big project and splitting it up into sub projects is a good idea, but what I'm missing there is review, like is my architecture good, am I missing something that can improve performance, so on. 
well, that sort of things you want is not material for standardized/automated evaluating (like in codewars) :/ Maybe some discuss/sharing group then? Or working in an agency, which takes multiple different projects (it has its own dowsides of course) for different customers (=with different requirements) instead of working few years on one product (i dont know your work, only general thoughts here)?
too mush slow, better use a real term
Either you're massively drunk after the NYE or auto-correct screw you over man ;) Either way - sounds kinda like a [Theremin](https://en.wikipedia.org/wiki/Theremin), nice work.
Browser standards move very slowly, but I imagine that eventually browsers could get this feature built in. I'm not sure if it would look like setting `innerHTML` but for an example of how it might look, you can use [morphdom](https://www.npmjs.com/package/morphdom) right now to diff real dom trees, not virtual dom nodes. The performance is comparable and in some cases faster than virtual dom implementations.
And things are static, forever. Nothing ever changes.
&gt; Still somewhat a blackbox. Exactly, so it's not as simple as just "yes".
Can I do that, my server is doing like this: domain.com -&gt; varnish port 80 -&gt; apache port 8080 -&gt; nodejs port 3000 -&gt; express. So does it connect that way? I can't probably connect directly to the port 3000 because it is proxying through varnish and apache
afaik, with `innerHTML` the browser have to parse html, which is hard (or at least it's hard to do it 60 times per second)
Thats a really interesting library, never heard about it before but worth giving it a try. Actually since it supports a string as "toNode" could do the trick for what i wanted. Also I found interesting the explanation against virtual-dom approach, just wondering why they don't allow a string as "fromNode" 
Author of mithril.js here (one of those virtual dom libraries). I actually brought up this exact idea to mozilla folks a few years ago, and the conclusion of the discussion was that it probably wouldn't become a standard for a number of reasons. The main one was that there are a lot of murky semantics. For example some libraries have shouldComponentUpdate at a component level, while others employ thunk vnode types; some libs have removal deferral hooks; and nobody agrees on the actual vnode structure. Inferno code, in particular, would be nearly impossible to write without its JSX transformer, since the actual compiled code looks nothing like a typical react call tree. The string based nature of the innerHTML API was another criticism. Etc etc. I've seen some efforts to create a polyfill to define semantics. DiffHtml is one of the most mature ones. But again, unlikely to go on a standards path.
What do you find slow about it? I recently switched from iTerm 2 to it, and I haven't found any noticeable performance differences.
I personally love [Coding Math](https://www.youtube.com/user/codingmath). It teaches some very good fundamentals (like matrix math) for graphical applications, etc.
Thanks for the downvote for updating my own thread. Thanks for offering a better solution too.
I wrote something called diffHTML for this exact reason. I even had the same idea as you, improve innerHTML to do VDOM diff/patch. Check out this: https://github.com/tbranyen/diffhtml#prollyfill I'm currently focusing less on the standards part and more on improving the library to get it popular enough to make a case for the specification. I've already written an application in production at Netflix with this tool and am currently in process of working on v1. Check out this component for an example of what a Web Component using diffHTML would look like: https://gist.github.com/tbranyen/e33fd48171704a7562e027916e6240de
wow, i thought that it's much more slower, thanks for the insights :)
The introduction to Quad Trees looks useful, thanks! But I do think that you should mention the simpler way to rotate the rectangle (just use `transpose`) more prominently. The code is a nice *example* leading up to Quad Trees, but it's unhelpful to recommend such a complex recursive technique for the simple rotation task. (**edit**, I mean e.g. the equivalent of Haskell's `transpose`. There are some Javascript implementations at e.g. http://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript )
socket.io is trying to connect to localhost, which is what it defaults to when you don't pass a URL, so I think you're on the right track. Try including the port as you say, I think that is your problem. Here's mine from a cordova project: &lt;script src="https://cdn.socket.io/socket.io-1.4.5.js"&gt;&lt;/script&gt; &lt;script&gt;var socket = io('http://localhost:3030');&lt;/script&gt; Here when I ran my cordova app it was running on port 8000, my express server was listening to port 3030, so I told the clientside socket to connect to localhost:3030. You should do the same with your domains.
Then, replace any with string?
*2 and a half years ago, which is when Googlebot started executing JS.
It also makes it a `const`, which is a good deal.
Look into [javascript coercion](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md). Taken step by step, js coerces each array into a joined string: `[1] + [2]` is now `"1" + "2"` which is "12". Then for the minus operator, it coerces the strings into numbers: `"12" - [3]` to`"12" - "3"` to `12 - 3` to `9`
My best results with a nearly pure React app have been throwing page state into a script tag and rendering based on that. Basically, render it synchronously and you're fine. I don't think AJAX is reliable.
The simplest 90-degree clockwise rotation is probably `zip(array)`. But you know, I had something in mind when I started writing this post a week ago, and I forgot to complete the thought later. So thank you for reminding me! Back in a jiffy with an update. [done!](https://github.com/raganwald/raganwald.github.com/commit/bf7d2842d597142a2d4917388eef79856bd8e9fc?short_path=5aed2a8#diff-5aed2a88782075e23a50d785c3e46446)
no, it doesn't. my site contains *links* that are updated by javascript. google always crawls the dummy links that don't go anywhere. 
I am using these three files. https://github.com/socketio/socket.io/tree/master/examples/chat/public Then I run them with python simple server, or cordova or what ever server. I tried against local server as well, but still getting poll error to localhost404. My express is running on localhost:3000 &lt;script&gt;var myIoSocket = io.connect('http://localhost:3000', {path: '/socket.io'});&lt;/script&gt; So even if the error was because of my apache configuration, I can't get this to work even with localhost. Any more advices? Thanks.
Tc 39 is js, this would be a DOM api, so not surprising it wouldn't be there. It would most likely be an extension to browser DOM specs.
yeah. i used it for a week. was too buggy.
At a certain point you say: &gt; Optimizations like this can only be implemented when the algorithm and the data structure are isomorphic to each other. It might be that I've missed it, but I think you haven't explained _why_ these kind of optimisations can only be performed with isomorphic algorithms and data structures. I'd appreciate some more theoretical underpinnings of that :)
I believe you mean "when two values are": In particular, the example in the OP doesn't have any variables. Also, the more precise way to put it is that `+` is overloaded for both numeric addition and string concatenation, rather than talking about "adding" strings. Still, that was a good explanation.
&gt;But I’m also told: Server-side rendering is necessary for SEO. This is probably because google cares about time to first render for its rankings. Sending the HTML that you want to display in the initial request is significantly faster than having that HTML constructed by a Javascript SPA at some point.
&gt; POST requests are never performed by spiders [_Almost_ never :)](https://webmasters.googleblog.com/2011/11/get-post-and-safely-surfacing-more-of.html)
This: function mapWith (fn) { return function * (iterable) { for (const element of iterable) { yield fn(element); } }; } function multirec({ indivisible, value, divide, combine }) { return function myself (input) { if (indivisible(input)) { return value(input); } else { const parts = divide(input); const solutions = mapWith(myself)(parts); return combine(solutions); } } } Remembers me this when I studied backtracking (Java code unfortunately): public abstract class Backtracking { public boolean resolve(int l) { if (!firstValue(l)) return false; while (true) { if (checkConstraints(l)) { if (solution(l)) return true; if (resolve(l + 1)) return true; } if (!nextValue(l)) return false; } } protected abstract boolean firstValue(int l); protected abstract boolean nextValue(int l); protected abstract boolean checkConstraints(int l); protected abstract boolean solution(int l); } Recursion is so powerful! 
XML file is really simple. I only have one tag for now. &lt;myAge&gt;20&lt;/myAge&gt;. 
Thank you! To clarify: *Whatever is in [a-z] is passed to function(char)? Is there anyway you can explain the process for this?* So can this: **{ return (char === 'z' || char === 'Z') ? 'a' : String.fromCharCode(char.charCodeAt() + 1); });** be translated as: if char === 'z' or char === 'Z' return 'a', else String.fromcharCode(char.charCodeAt() + 1;}); This code might be confusing because there's a replace method with function(char) as the replacement and within that is another sort of variation of replace with the return method. But it was written this way to take care of the 'z' and 'Z' string in a simple and organized code. Is that accurate? 
Doc is null. So at this stage it's irrelevant what method you call on it. Try logging Connect.responseText and see what's actually being loaded.
Shall I do console.log(Connect.responseText) to see the output?
It does load the XML document.
DOMParser should look like this? var parser = new DOMParser(); var Doc = parser.parseFromString(Connect.responseText,'application/xml'); var myAge = Doc.getElementsByTagName('age'); Can you also briefly explain the purpose of overriding?
Your code seems to work fine, copied &amp; pasted verbatim into a jsfiddle here: https://jsfiddle.net/6rLbk03f/ Click Run then look at your browser's developer console: ``` 18 22 884 20 ``` I think the problem is that you just need to find a good runtime environment to play in. Try installing Node.js on your machine and you can run JavaScript on the command-line, or just wrap the code in a SCRIPT tag in a HTML page. Good luck!
It's a counterintuitive result. What lessons should language designers draw? (1) Overloading '+' to mean string concatenation leads to confusion when dealing with numeric values. (2) Implicit type coercion complicates the semantics of dynamic languages greatly.
That has almost certainly been superseded by Googlebot executing JS. 
Yes, that should give you the xml element (assuming the tag is `&lt;age&gt;` and not `&lt;myAge&gt;`). Then use `parseInt(myAge[0].textContent)` to get the actual age as a number. It's needed because the response to your request isn't specifying that its content is XML, therefore not parsing it, and therefore `responseXML `is null.
Ah, that totally makes sense now. On a side note, I was reading somewhere earlier that it's faster to create the initial page view purely using multiple `document.createElement` calls inline in a `&lt;script&gt;` tag on the page, rather than having HTML due to the lack of needing to parse the HTML content. I guess modern JS engines have come a long way since the old days!
I agree about the wording in the first sentence; I've edited it. I'm not sure about your second point. Does it technically count as overloading if it's a single shared implementation? In JavaScript, addition is a single "function" that takes any two values.
`GetValue` resolves references to values and has nothing to do with OP's snippet: arrays are already values. `ToPrimitive` is what calls `toString`, among other things.
Good old JavaScript. Where errors that should be caught at compile time aren't even caught at run time.
The plus operator in JS = concat, it's an overloaded operator on strings, so if you have '1'+'2' - 3, it's really "12" - 3, due to how js gives priority to the concat operator, if it was 1+2-3, as integer values, you'd get what you expect since no string operator overloading would be applied.
/u/lewisje is correct about the second point, this is textbook overloading.
The best one I've seen yet is injecting code with physics engine. I'm not sure how exactly it was made, but basically seemed like every element\div on page is assigned a rigidbody box, and stuff fell down. Very entertaining.
How are you actually running this code?
Selecting 'Build' within Sublime Text. I have a little experience with Python and that's how we ran programs when I learned it, which is why I'm not sure if the same method applies to JavaScript.
Well [MoTTs_](/u/MoTTs_) I agree in theory or when done correctly OOP isn't that bad, since mine is a case of a RoR project that takes Dry and abstraction to an extreme degree, but the fact is OOP is often taken to extremes. It also doesn't help that Ruby is a toy language unsuited for large code bases(where lack of a good IDE, and clear direction make figuring where something happened a wild goose chase up the tree), but also the amount of effort put into maintaining or adding to the beast is cumbersome. Honestly I much prefer the module pattern in Node where hierarchy doesn't matter, why do I need to think up some useless base classes that hold random attributes and random methods to have two *somewhat* related things inherit from? Why not just take what you need? I mean most programs don't even deal with things that could even be thought of as an object in the real world which makes it even worse! &gt; What if I wrote a single function 5000 lines long, found it to be inflexible and brittle, then proclaimed functional code severely slows down development What you're talking about is more procedural programming. When people talk about composition they mean in many ways something similar to inheritance, only without top -&gt; down hierarchies. More like including methods, functions and things as needed. So two similar things could possibly include many things that are similar, but without needing to worry about how they differ. For example, what if you have two classes documents and video files they inherit from an Asset base class and issue emerge when an expected attribute does not exist for one and not the other. **Now I know sure you will say**, but that can be avoided if done properly. . . which is true! But! if composition was used instead of inheritance then the issue would never arise anyways. What is better is to flatten it out and just include functionality in whatever module you're trying to create and avoid shared state. I mean this way everything is more transparent since you always know **what's to be included** and there is no hidden class far far up the tree needing to be tracked down. Each Module can be it's own little world that deals with only one specific thing without needing to care about everything else. 
FYI, this article on recursive combinators from 2008: http://www.lazutkin.com/blog/2008/06/30/using-recursion-combinators-javascript/
Probably not. Not sure what that button does in ST, but even if it correctly detects that you're using JavaScript, you'd need nodejs installed for it to work anyway. The syntax error implies that it's looking for some other language. Just google "w3schools run js" or something. w3s is not generally the most recommended resource, but they probably have some straightforward example of how to run js in the browser. The other option is, as the other guy said, to run it through nodejs. So you'd have to google "install nodejs", and then you'd open the terminal / command prompt in the correct folder and type "node test.js".
adding a plus before the value converts it to number
Demo - https://facebooknuclide.github.io/atom-in-orbit/demo/testpage.html
&gt; When people talk about composition they mean in many ways something similar to inheritance So... yes, that's true, but it's actually a bad thing that folks in the JavaScript community have conflated composition and inheritance. I've written about that before here on reddit. https://www.reddit.com/r/programming/comments/5dxq6i/composition_over_inheritance/da8bplv/ Best practices such as "favor composition over inheritance" are only meaningful if we all agree on what each of those words mean. &gt; What is better is to flatten it out and just include functionality in whatever module you're trying to create and avoid shared state. I mean this way everything is more transparent since you always know what's to be included and there is no hidden class far far up the tree needing to be tracked down. In fact, there's already a best practice to prefer shallow hierarchies. So, without realizing it, I think you're actually advocating for OOP, just done properly. ;-) Though, since similar-to-inheritance-composition still carries many of the drawbacks of inheritance (such as the [fragile base problem](https://www.reddit.com/r/programming/comments/5dxq6i/composition_over_inheritance/da8ea5v/)), you still need to be careful not to overuse it, just as you would be careful with any form of inheritance. And instead, you should favor holding-reference-to-encapsulated-object-composition.
Maybe for small projects it can work. I used it in a company for few years and I learned to hate it. Its development path isn't clear, stuff is deprecated without giving alternatives. They struggle to stay up to date with the new component based approaches... I would recommend you to try `create-react-app` if you want to learn something that will help you find better job positions in the near future.
I think you can have operator overloading or implicit conversion, but having both is a problem. Perl has implicit conversion but its concatenation and addition operators are different, so the operator tells you what type you get. Python has + overloaded but does not do implicit conversions, so [1] + [2] - [3] results in a type error.
`2` is a valid number ofcourse, but so are `2.4`, `.4`, and `2.`. In a sense, the engine will greedily try to take as many characters as are valid for a number. Thus, in the code `2.toString()`, `2.` is interpreted as the number. Afterwards there's an immediate `toString()` without a dot, and thus the JS engine doesn't know how to deal with this. The code `2..toString()` works, because a number can only contain one decimal separator. Thus the number parsed by the engine will still be `2.`, this time leaving `.toString()` as the remaining code to parse. And at this point it's obviously recognised as regular dot notation for property access.
Wow! I'd love to read that, can you share the link to that?
You have not answered him. He asked, what do the brackets do in this scenario. You did not explain that.
These are good: * https://www.ssllabs.com/ssltest/ * https://httpsecurityreport.com/
In the React world it's assumed you will either use composition or HOCs. If you deviate from that you may encounter problems down the road. For example you can't extend a HOC which is what you need to use `withRouter()` from `react-router`. Even [the React docs](https://facebook.github.io/react/docs/composition-vs-inheritance.html) favour composition over inheritance. There's [this guy that worked on ReactOO](https://github.com/mazong1123/reactoo) to be able to use inheritance and common OOP patterns but I don't really know if this would clash with other React packages or patterns such as HOCs. Don't get me wrong, React has some nice things going on, but deviating from decades of design patterns is not a good one IMO.
wow that was a savage interview question. Thanks!
If one of the arrays is not converted to a number with the unary plus, the other will be coerced to a string, even after converting to a number. You can imagine the sequence of operations is *something* like this (no guarantees of real accuracy): +[1] + [2] - [3] Array `[1]` can't be converted directly to a number. Coerce the Array to a String. +"1" + [2] - [3] Coerce the String `"1"` to a Number. 1 + [2] - [3] Can't add array `[2]`. Coerce it to a String. 1 + "2" - [3] Number plus String is valid. Make them both Strings. "1" + "2" - [3] Concatenate them. "12" - [3] We can't subtract from a String. Coerce it to a Number. 12 - [3] We can't subtract an Array. Coerce it to a String. 12 - "3" We can't subtract a String. Coerce it to a Number. 12 - 3 Ahh, math. 9
You do see coercion bugs in real code. This tests whether you can identify them or not, albeit quite a difficult one.
Adding two arrays together? If the question was what is "1"+"2"-"3" that would be reasonable, but I've never seen someone add two arrays together, even by accident, in nearly 10 years of writing JS. I saw another example, which was (edited): var foo = {}, bar = {}, x={}; x[foo]="foo"; x[bar]="bar"; console.log(x[foo]); // "bar" Do you really expect someone to just know that quirk off the top of their head? I think these type of questions are ridiculous and made just to find an excuse not to hire otherwise competent developers. 
Personally I stub everything above the DAO. The DAO I'll usually test with an in memory DB to ensure that the persistence queries are working correctly. Testing the entire API downward against an actual DB would be considered an integration test.
why would a company not want to hire a competent dev? That makes no sense
Stars don't mean anything except that someone starred a repository.
&gt; I read somewhere that it is security risk to have nodejs directly available Oh that's cool, didn't know about that. What did they say? &gt; Maybe I just don't get it, should be simple, but well... Don't be so hard on yourself! Just remember, "simple" is NOT the same thing as "easy", and whatever simple is is relative to the individual. You will be doing things already that will look like total magic to people of a different experience level :). Even at work I see some brilliant developers get stumped by relatively "simple" problems, it just comes with the territory. &gt;then I installed the other chat to localhost:80 with apache but I only got error for socket. I'm clutching at straws here, but maybe your Apache server isn't setup to proxy WebSockets and it can currently only handle HTTP? Can you send HTTP requests to the node server or is it just failing on everything? Trying pinging the server, if that works you know the problem lies specifically with WebSockets. If HTTP and WS fail, but it works without Apache then you know the problem is there. It's really hard for me to say what it could be though, doubly so without much information.
I think your example is slightly wrong, JS console outputs `"foo"`
So much this. We literally dumped a large ember project in 3 months after I spent my 20% time bringing a React app to the same production level as our 2-man team on the Ember frontend. Frankly that framework is fundamentally broken.
My post was wrong. But if you accidentally assign an object to an object reference it will coerce it to (EDIT: [object Object]) "{}" regardless of what object you pass in. Here's an example: var foo = {}, bar = {}, x={}; undefined foo Object {} x[foo] undefined x[foo] = "foo"; "foo" x[bar] "foo" JSON.stringify(foo) "{}" JSON.stringify(bar) "{}"
That is a stinker... good to know about though
What was the proposal you brought to Mozilla? It seems to me that a good midway point would be to have the browser diff the DOM and only rerenders the parts of that the page that are changing (and I expect that they would do this already). This would be transparent to any page. Is a full component API really necessary here for a perf improvement?
TBH it's sloppy AF not to use parenthesis when using the Number function. Honestly, the + is really confusing to read in code and I almost always use Number() instead of +(). Which one of these is easier to read? [1] + +[2] - [3] [1] + +([2]) - [3] [1] + Number([2]) - [3]
I primarily work with Django (and have experience with Rails and .NET). Yes, you should test with a live database. If you have constraints on your tables (e.g. unique key), you want some assurance that your code does not violate these constraints. You also just want some basic assurance that you've configured database access correctly.
You're right, it uses [object Object].
I don't know about existing engines, but I do know a bit about game programming. First up, if you are attempting to run collision detection on every collidable with every other collidable, you should do some kind of spacial segmenting to reduce the number of tests significantly. http://gameprogrammingpatterns.com/spatial-partition.html Next, axis aligned bounding boxes are the most efficient form of collision detection I know of after circular collision detection. Your problem is non axis aligned. Why not do initial circular bounding collision first to use as a quick way to reduce the calculations of the more complex non-axis aligned bounding box first? http://gamedev.stackexchange.com/questions/20809/non-axis-aligned-bounding-box-collision-and-physics
I dunno, breaking a program into discrete objects with associated properties and methods seems pretty dead simple to reason about. "This is a box. The box has certain qualities like color and size. It also has a button. When you press it the box does something." I certainly can't rule out it being my personal biases, but my education was never very heavy on OO concepts, and most of the "pure functional" stuff I've been reading lately has relied on fairly heady mathematical properties for its underlying logic. Seems much harder to grok than a box with a button.
Curious as to what you mean by "stay up to date with component based approaches"? As far as I'm aware it's been component-driven for quite a while now.
Unit tests should test logic only. They should be able to run without any other installed software, file access, or other systems. Integration tests can test all of the plumbing and make sure your application actually runs.
Thanks, I think the spatial segmenting will help and I have added an initial detection circular collision which has helped a lot. Still have no idea how to implement better collision resolution.
Thank you, I will check those out. I wasn't even aware it had an ecosystem, I will stay as native as possible until I get a grip.
Thanks for your input, I appreciate it.
do you mean to say they'd rather not hire 3 good devs if it comes at the cost of hiring one bad one?
Why is the + interpreted as string concatenation rather than addition in this instance? Does it have to do with the square brackets?
Because those aren't errors?
Which is at least some kind of quasi-indicator of "trending"-ness. I don't think you can really argue it's objectively more popular than React when you compare npm installs. (React has about 10x the installs in the previous month as of now).
I recommend a Chrome extension [ScratchJS](https://chrome.google.com/webstore/detail/scratch-js/alploljligeomonipppgaahpkenfnfkn), which adds a widget to the DevTools window and allows you to quickly run JS. You can also run JS from the built-in console but I prefer Scratch.
and: console.log(x) // Object {[object Object]: "bar"}
Brendan Eich apparently ;)
Just be careful not to run out of stack space!
&gt; Traditionally, without JS, browsers can only perform GET and POST requests. What does JS have to do with that?
&gt; The fact that JS requires a 21-step process just to decide what a + b means is one of the more disturbing aspects of the language spec. Not sure why anyone would find this disturbing, the spec is so low-level that even if you didn't have implicit conversion and only did numeric addition it would still be at least 11 steps.