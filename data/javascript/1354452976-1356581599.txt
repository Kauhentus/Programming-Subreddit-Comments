I'm not saying JS does, but I'm saying there needs to be something which does that can combine it with backend programming more efficiently, although that might require changes in how the browser functions. I find it highly unproductive to have to switch between languages completely when working on the back end versus the front end, sometimes when tasks are similar especially.
You clearly have not been paying any attention to the current state of the art. Go have a look at node.js and get back to us. :)
I stand corrected. Is this still run client side?
I have written pages and pages of JS which could be rewritten as CSS transformations and animations. It will be shorter, smoother, and use less resources. I presume that is what he is referring to. However any real JS application is more than a few visual bells and whistles.
Thank you. 1. for reference, the old diagram : http://h.dropcanvas.com/521xc/prototype_inheritence.png 2. you easily found out that I'm clearly mixing both prototypes and [[prototypes]], I still can't wrap my head around this. 3. if people want to contribute / edit the diagram, they can with the dia program. Here's the source : http://dropcanvas.com/521xc/114 4. the line `Child.prototype = Object.create(Person.prototype)` is supposed to be the line that does the inheritance business by creating an object who's [[prototype]] is Person.prototype. That way, all objects created with new Child() will have both properties defined inside Child and those defined inside Person. Is this correct ? 
Your if statement should look like this: if (one === '111010') But if you want to be smart, you can check the answer like this :) if (answer === decimal.toString(2)) by giving the toString method of Number argument 2, the decimal is converted to base 2 (i.e. binary). Also, you should use var when declaring variables.
Animations and fading? Are you kidding me? There are MVC frameworks written in JavaScript. There's server-side JavaScript. JavaScript has AJAX and JSON. CSS has nothing to do with this. Accessing the DOM and manipulating CSS is a small subset of what the language is capable of. CSS is a styling language dude.
3 equals signs? That's bizarre. I wasn't sure if 2 or 1 was right for this, never would have considered 3. And I suppose 'one' is my variable, where I'll need to add 'var' ... I wasn't sure if that was a variable or what it was exactly. Anyways, this looks like it should solve my dilemma. Thanks!
I dunno, I work with a massive business app with a java backend and javascript front-end. You just have to plan it carefully.
1 equals is assignment. 2 equals is comparison, but since every js object will convert to true, double equals might not be the value of the object. 3 equals is evaluating the actual value of the object. There are several good examples online if your interested in further reading about this subject
I agree 100%. JS is simply not expressive and powerful enough to deserve the spot as *the* future language of the web. In the future we will need new elegant and rock-solid abstractions for control flow, concurrency and communication that I believe will be virtually impossible to ever express in JavaScript. However, for the question "is JS going to be prevalent, and will there be interesting things to do with it?" then my answer is "certainly" for the next 2-3-4 years, and "probably" for the years after that. 
I believe this ties to the fact that Web-application development is becoming more and more stable, and more capable, as an alternative to the desktop application development you currently use. Since web apps require less up front for the user (no need to install anything, works on any system including mobile), it is a very ideal solution. Since you already have knowledge of Python, I would recommend the following: 1) Lean [Django](https://www.djangoproject.com/), the popular python-based Web framework. 2) Learn Javascript &amp; jQuery. Of course that means you would likely need to learn HTML &amp; CSS, which should not be too hard.
Just because it can be done doesn't mean it should be done...
http://www.javascriptenlightenment.com/ http://eloquentjavascript.net/ http://shop.oreilly.com/product/9780596517748.do There's a load of Crockford vids on youtube.....and some good Google I/O ones too. The following are excellent, but it's $30/month. You can get a free trial. http://www.pluralsight.com/training/Courses/Find?highlight=true&amp;searchTerm=javascript
Hi, First, I think image.onload should be before image.src, otherwise I am afraid there might be a corner case when the onload never executes. What browser are you testing with? For me, in Firefox, the image title already includes the image size, so my submission using your bookmarklet looks like: "plate with 5.jpg (JPEG Image, 315 × 309 pixels)" for instance.
Even those animations and fade effects often can't be used flexibly without still using Javascript. 
You sound pretty aimless. Let your projects and ambitions guide the languages you learn. There is no 'language for everything.' Your project requirements will do more in determining which language and framework you use than anything else.
I don't have any "projects" or "ambitions", like I said in the OP, this is just as a hobby. 
 Let's make it more obvious: var Person = function(isSmoking){ this.isSmoking = isSmoking; } Person.prototype.foo = function() { }; var Child = function(){ } var steve = new Person(true); Child.prototype = steve; Now every child smokes.
css3 transition opacity is not supported by IE only way around this is use IE's version of opacity called 'filter' has a different set of obstacle's and also the actual element has to be positioned otherwise even that doesn't work for IE browsers, or use a fallback method with conditional comments, ie; two sets of javascript. IE 10 is going to stop even allowing conditional comments for all HTML5 pages, good old microsoft
false. language by itself doen't quarantee good maintaineable code. I'm a senior developer and seen terrifying shit done in oop languages. 
Gotcha. How about: &gt; javascript:location.href='http://www.reddit.com/submit?url='+encodeURIComponent(location.href)+'&amp;title='+document.body.firstChild.width Works in both FireFox and Chrome.
np, you are welcome
Do you have any kind of example already present?
I would say that both are the future. I would learn both, JavaScript is quite cool, and as it is supported "everywhere" it's very rewarding to use. C# on the other hand got a lot of really cool features, and a powerful base library. I can't wait to see where System.Linq.Expressions will take us. Generics, Linq, lambdas ... How did I ever manage without them?
It's generally not a good idea, your giving your users a worse experience for research that could fairly well, be done upfront. A key difference with CSS screen-sizes and performance are screen-sizes have big differences. Today's PCs aren't going to have a big enough gap in performance that it could be something you'd notice on 99% of sites out there, especially not in the same web-browsers. If your doing something that behaves differently on a PC vs tablet, there's better ways to figure out what your user is using than load-testing your application run-time. Unless your into a niche area where your really pushing your user's browsers to the point their crashing or locking up I can't think of what you'd want to be behaving differently. Everything I can think of can just as easily be figured out ahead of run-time, so the user's get the best possible experience. You might have a reason to do it, but it's still probably something niche that the majority of sites won't benefit from.
The future of what? The future of everything? No. However, I'm sure it'll have quite a bit of use, at least for certain fields, for quite some time to come.
Protip: add four spaces before code, and your bookmarklet won't be coerced into a link: javascript:function%20x()%20{var%20i%20=%20new%20Image();i.onload%20=%20function()%20{location.href='http://www.reddit.com/submit?url='+encodeURIComponent(location.href)+'&amp;title='+i.width;};i.src%20=%20location.href;};x();
Without trying to run it or anything, I see that: Num1=parseInt(Num1) Num2=parseInt(Num2) are both missing semicolons. Maybe that is it. ----- I also created this for you and removed the '=' in all of your operators: http://jsfiddle.net/kH6Y8/1/ Works great now.
Didn't change anything :/. Thanks though
Try this. You had some extra equals in there. That JS operator is used for assigning variables... http://jsfiddle.net/wdZgK/1/ var Num1=prompt("Enter a number","Enter it here."); var Num2=prompt("Enter a number","Enter it here."); //missing semicolons Num1=parseInt(Num1); Num2=parseInt(Num2); var total=Num1+Num2; document.write("The sum is " + total + "&lt;br&gt;"); //calculate absolute to get the difference instead of just subtraction. var subtract=Math.abs(Num1-Num2); document.write("The difference is " + subtract + "&lt;br&gt;"); var quotient=Num1/Num2; document.write("The quotient is " + quotient + "&lt;br&gt;"); var product=Num1*Num2; document.write("The product is " + product + "&lt;br&gt;");​
That's great that you are trying out experiments like this to learn the language. You ought to make things a lot easier on yourself and try out those expressions in the JavaScript developer console, where you can type in JS code directly and see the results immediately. Or you can step through your code and see the values of all your variables as you go. If you do that it will clear up the mystery you're seeing. (Hint: watch the value of Num1 as you step through the code. Did you expect it to change like that? What does the `-=` operator do?) My favorite JavaScript developer tools are in Chrome. In Windows you can just hit F12 in a Chrome window and open the developer tools panel. On the Mac you can open it from the menu or there may be a keyboard shortcut too. To step through the code, add this statement at the beginning of your script (inside the &lt;script&gt; tag): debugger; Now reload the page with the developer tools open and it will stop on that line. You will find buttons in the tools to step through the code, and in the Chrome tools you can roll the mouse over any variable in its code to see its value. Or you can add a variable name to the Watch Expressions panel, or find it in the Scope Variables (that works better inside a function than it does at global-level code like this because there is less clutter). Or go to the Console (or click the mini-console button at the bottom of the debugger tools) and start typing in stuff. You can do anything there that you could do in a script.
No they shouldn't. "difference" here is clearly referring to the result of a subtraction operation just as "sum" is the result of an addition. It is true though in some practical applications when you want to know the difference you would use the absolute value; like if you were calculating how far you traveled by subtracting the mile marker on the highway you ended at versus the one you started at.
I realize js is increasing in usage, as are other languages, I just think your examples are poor.
That's not to say that we don't degrade sites for people with older browsers / PCs, it's just not a real-time performance test e.g. Feature detection or UserAgent Most developers are going to assume people have the minimum requirements to run their OS.
You are close, Win98 with Firefox 2;). But here is more real case: automatized adjusting of details in WebGL.
I sure hope you are right, IE holds back most of the web. A lot of complicated code has to be written just to get it to work properly in IE and every other browser :) Microsoft did one good thing in the last year, auto update for IE. That basically killed ie7 support for my application. And now we are watching ie8 dip below 10%. I have to give it to microsoft they seem to be trying really hard to move the web forward! I have heard people talking that jquery 2.0 will not support older versions of IE (&lt; IE9). IE10 is pretty nice, too bad window 8 is very alien for most people comfortable with windows. I think the alien UI (metro) will hurt windows 8's desktop / laptop adoption. But IE10 is coming to windows 7 soon :) 
Nice, well certainly there's nothing stopping you. And if your younger or newer to web development it'll be a good learning exercise. I just wanted to point out why more people aren't doing this now and that you can do it but you should have just as much success using other less unobtrusive metrics. It's all opinion, may be you'll make your libarary &amp; prove me wrong; instead of feature detection libraries we'll see performance driven libraries popup.
If there's one thing I like about jsFiddle it's the ability to see revisions people are making... what surprises me is that there are over 500 now: http://jsfiddle.net/uzMPU/500/ Edit: it's actually over 1800...
I was just writing up something to explain that... but you beat me to it. Well done on the explanation!
How does this work with such little code. I could see myself writting this but my code wouldve been liek 40x bigger 
splice and indexOf. I think you're making your task harder than it needs to be or you're not telling us everything. Is your assignment/job to write a splice function without using the actual splice method? &gt;Right now I'm doing this with a super comlex function of eval()'s that's like 30 lines long and I'm sure there has to be a much simpler solution. That made me cringe and really hope that's not going to be used in production/public somewhere. If you're learning, *fine*, but understand that eval is almost never the right tool for the job and you should drop that bad habit quickly. Post a [JSFiddle](http://jsfiddle.net/) so we can see what's going on and help you accordingly.
I lied, it doesn't use eval()'s but only really messy variable declarations and it's kind of hacked together and I feel like I'm doing something wrong. I couldn't pass the variables into an array because they are localStorage items and I do convert them to objects at some point but they turn back into localStorage items. For demonstration purposes, i've set them to strings in the jsFiddle: http://jsfiddle.net/sNUEu/
Rad screencast, thanks.
There's some discussion on HackerNews about it. Basically it procedurally generates the textures and the game world and then uses simple ray casting for rendering.
Ahh, awesome! I literally just bought the course on Tuts+ premium as I've been trying to get into Backbone and a lot of the other resources are either out of date or just explain the concepts without demonstrating implementation in real-world examples.
Wtf "Java Scripts"!
Please, stop. You're writing outdated articles with incorrect information.
Just increment it by 100 or 500 until you get a 404 then half the difference (-250) until you find the max
This is targeted at google chrome. It may not work well or at all in other browsers.
Hard to believe those textures can be generated with that code. Notch is twice as smart as me. Anyway, in case anyone wants to view .mca files in the browser, I have some code. Not anywhere near as cool as that, but it loads the files and shows them in 3d. https://github.com/ithkuil/mcchunkloader Looks like this. https://vimeo.com/50111926 Right now on minecraft-dungeons.com I just have the point cloud version up because the other version needs a lot of work. 
I see no point in doing that, because now everytime you change the prototype of Child you're also changing the prototype of Person, this is not how inheritance works var Person = function(isSmoking){this.isSmoking = isSmoking;} Person.prototype.foo = function() {}; var Child = function(){}; var steve = new Person(true); Child.prototype = steve; Child.prototype.play = function(){console.debug("Weeeeee !");} barry = new Child(); barry.play(); // -&gt; "Weeeeee !" steve.play(); // -&gt; "Weeeeee !" ?? we don't want Person_s to play Now you have no way to define a property in Child without affecting Person. Second, In your code, Child.prototype.constructor is Person, not Child. I've been taught to always set the constructor right but I don't remember why do I have to do this... 
https://twitter.com/notch/status/275329867984302081
This is awesome. But you don't really need that many key/mouse combinations. I'd go for: Right click and drag = rotate Left click on empty = place block Left click on block = remove block Click and drag = rotate
Left click on block to remove wouldn't work, since then you would have no way to place blocks on other blocks. Maybe you meant right click to remove, which I would agree with.
*Nested* callbacks.
http://www.reddit.com/r/PornOverlords/comments/147uwz/heres_a_bookmarklet_that_will_automatically_put/
nice, good luck with everything :)
i wouldn't call *that* creative. but i think it's exceptionally well done! everything works as expected - it's exactly how apps should be done. kudos! the predefined color scheme is a bit weird though, and i couldn't copy&amp;paste my own hexes in.
Use [`.on()`](http://api.jquery.com/on/) if you're using jQuery v1.7+. Otherwise, use `bind()` (or the equivalent for whichever JavaScript library you're using instead of jQuery). Don't use `onclick`. That's old and crusty.
My childhood is now in a web browser. Nice!
Yes, each .click is adding a function to an "array" (probably literally for all I know). Each time you click from there on out EVERY function in that array gets run. That means that in your final example BOTH functions would run every time. I'd like to be able to say that the functions will run in the order that you registered them, but I don't really know for certain, and there's a good chance it's implementation specific. Most likely you'd always end up with optToggle === True Edit: Updated the fiddle to exemplify better what's happening.
~~[I think you probably should look at this to understand better](http://jsfiddle.net/kHzxH/)~~ Edit:[Didn't save the results before](http://jsfiddle.net/kHzxH/2/) Edit 2: The results of test 2 actually surprise me. It looks like jQuery might be seeing that onclick on deciding to override it... Edit 3: [Nope there was just a bug in the code](http://jsfiddle.net/kHzxH/3/)
This works on my phone. That's pretty impressive.
I remember spending 8 hours downloading the demo.
Picking up a coding language as a hobby is an ambition, and would be pretty useless unless you had a project to use it for.
 Correction : you don't have a way to define a property in Child.prototype without affecting steve. steve and Child.prototype are references to the same object. var Person = function(isSmoking){this.isSmoking = isSmoking;} Person.prototype.foo = function() {}; var Child = function(){}; var steve = new Person(true); Child.prototype = steve; Child.prototype.play = function(){console.debug("Weeeeee !");} barry = new Child(); barry.play(); // -&gt; "Weeeeee !" steve.play(); // -&gt; "Weeeeee !" ?? we don't want Person_s to play var herbert = new Person(); herbert.play(); //error I'm not saying that your Children should be extended from steve. I'm merely saying that a prototype is always an object, and not a function. Maybe it makes no sense for Child to descend from an instance of Person. Maybe you need a second prototype level and another type of object. It all depends on what you want to do. Structure your code the way it makes sense with what you want to do. If it makes no sense for Child to extend from an instance of person, then don't do it like that. var Person = { breathe : function() { console.log('mmmmpppphhh') } } var Child = function() { }; Child.prototype = Object.create(Person); Child.prototype.play = function(){ console.log('weeeee!'); } var Adult = function() { }; Adult.prototype = Object.create(Person); Adult.prototype.play = function() { console.log('Meh.'); } var steve = new Adult(); var barry = new Child(); steve.play(); //Meh. barry.play(); //weeeee! steve.breathe(); //mmmmpppphhh barry.breathe(); //mmmmpppphhh I suggest you console.dir the objects in order to see the prototype chain.
No! Don't pick up the pho- ... Fucks sake.
Interesting, thanks for the link. There's one thing/gotcha I've encountered with web storage local stores: Everything is stored in UTF-16, so the number of characters you get is exactly half of what you'd expect. 5meg instead of 10. The solution is to encode/decode your (probably JSON serialized) data in "base 32k" when pulling from /putting to the local data store. Not super-fast, but better than losing that 4.7MB or so of characters storage! For this, I use Simon Ratnor's excellent ["base32k.js" lib](https://github.com/simonratner/base32k) Another small note: using one or two larger stores is vastly more efficient than many small key/val stores. 
I'm sorry I did not answer about the constructor. Constructor is a property of the prototype. It returns a reference to the prototype's constructor function. If you want it to point by default to the actual function you called to create your object, then your function cannot have a prototype. I don't know who told you to always set your constructor right. Some say you should set it manually, some say you should'nt. I suggest you don't rely on it. I use isPrototypeOf() instead (as I mostly inherit with object.create) and you can also use instanceof if your prototypes have constructor functions.
I call this period my dad's golden age. He was divorced, and with me locked a way in my room 16 hours a day, he could write his novels about spirituality..
I consider it the golden age of PC games. Some of the best games came from that era.
but angularjs!
I think it's worth it ... CoffeeScript is another way of writting JavaScript and it definetly brings cool additions, seeing how CoffeeScript gets compiled to JS might also teach you some stuff, + if you like exploring new languages or libraries it surely won't be a pain... I think that if you like JavaScript you will like CoffeeScript for sure
If you are looking for a resume booster, then don't bother. All these js alternatives are too new, too experimental, too obscure for that. If you are looking to improve your performance and have more fun writing code, then why restrict yourself only with CoffeeScript ? There are other js alternatives that are worth trying. [LiveScript](http://livescript.net/) imho is a CoffeeScript done right. 
[charCodeAt](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/charCodeAt) is a method of String, that gives you the Unicode value of the char at the given index. So basically in your code instead of concatenating alphabet[i], you'll want to use alphabet[i].charCodeAt(0). You can convert the decimal value to binary like this. alphabet[i].charCodeAt(0).toString(2) [Read more](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toString) about the toString method of Number. Other hints: - The preferred way to intialize arrays is to use the literal notation: ['a', 'b', 'c'] - You forgot to declare the loop variable with the keyword var. Without var it becomes global, which is a bad thing. - When asking for help, please paste your code on [jsFiddle](http://jsfiddle.net)
109 characters... /(A[glrs]|B[er]?|C[adloru]?|Fe?|G[ae]|He?|In|Kr?|Li|M[gno]|N[abei]?|O|Pd?|R[bhu]|S[ceinr]?|T[ci]|V|Y|Z[nr])$/
binary to morse code? 1 is "•----" and 0 is "-----" so I hope your time signature can cope with that.
 /^([BCFHKN-PSVY]|A[grs]|B[er]|C[adloru]|[FH]e|G[ae]|In|Kr|Li|M[gno]|N[abei]|Pd|R[bhu]|S[ceinr]|T[ic]|Z[nr])$/ Apparently also 109. Removing the initial ^ passes the tests but violates the goals. This assumes case-sensitivity matters. 
First of all CoffeeScript is just javascript with a different syntax. I have been writing coffeescript for 1.5 years or something. The nice things about it is the -&gt; syntax for defining a function. The =&gt; when you want to bind a function to another scope (bind(function...).. is kinda ugly). It has the support of post if's like return "cool" if name == "monkey". It lets you skip paranthese and curclys in most cases. It has optional parameters like (a = {}) -&gt; . It also has classes and stuff like that but that I don't like and could be implemented myself or any lib. But the other stuff are kinda nice, one last thing what about this [a,b] = ["monkey","hello"] for parallel assigment :)
Callbacks are really not that bad. var db = require('./db/callbackDb'); function doStuff(next) { var str = ""; function handle(err) { if (err) { throw err; } } function setKey1() { db.set("key1", "value1", setKey2); } function setKey2(err) { handle(err); db.set("key2", "value2", setKey3); } function setKey3(err) { handle(err); db.set("key3", "value3", getKey1); } function getKey1(err) { handle(err); db.get("key1", getKey2); } function getKey2(err, key1value) { handle(err); str += key1value + "-"; db.get("key2", getKey3); } function getKey3(err, key2value) { handle(err); str += key2value + "-"; db.get("key3", dumpResult); } function dumpResult(err, key3value) { handle(err); str += key3value + "-"; console.log(str); next&amp;&amp;next(); } setKey1(); } Avoid the crazy pyramids of doom, define functions that have somewhat descriptive names, avoid wrappers whose only purpose is to rephrase the API slightly without changing its functionality. You'll usually end up with dumb, boring code that doesn't rely on clever tricks, and that maintains well. ( speaking of clever tricks, you may be tempted to refactor the code above with a few functions that return functions. But would it really be easier to understand/more maintainable? ) That said, here are two gotchas off the top of my head where callbacks alone will be unsatisfactory: 1. Instead of having a nice little sequence of callbacks, you get the bright idea of starting a few things in parallel. Awesome. Keeping track of which things completed and what you're still waiting for is a bit awkward to do manually. Well okay, it involves decrementing a counter. Not rocket science. Still, some little helper object/function to synchronize things for you will make things simpler there. 2. If you find yourself writing code where the same callback fires multiple time, something went wrong. You probably meant to use an event emitter. In fact, you may well have meant to be using a stream. Use the right abstraction. 
Great explanation, thanks :)
I think `alphabet.charCodeAt(i)` is equivalent to `alphabet[i].charCodeAt(0)` (and more succinct).
That's it. I quit. I can't keep up. This is just too awesome. Seriously, this is just amazing. Absolutely amazing.
How is this even a reasonable task for regex?
Not 100% correct, but gets through all the cases (94 bytes): /(A[gls]|[ABCKSZ]r|C[dlou]?|[GHBSFN]e?|[KOPVY]|[LNST][ci]|M[go]|[CGN]a|Nb|Pd|R[bhu]|[IMSZ]n)$/
The issue you're having doesn't sound like it has anything to do directly with XHR, but rather your own code. Since XHR doesn't do anything with page rendering, there's no 'magic solution' other than fixing the problems within your javascript.
Golf. It has no practical applications at all.
Animations are eye candy. My statement wasn't about having them looking good enough, it was about not having them get in the way. E.g. if drawing each frame takes 2 seconds, then it will take 4 seconds in total to draw those two frames. You won't be able to use that thing until it's over.
This is terrible advice. It will not increase performance, it will reduce it, because now you have to check that the element clicked is the one you care about. Horrible from efficiency perspective, horrible from a design perspective. *Edit*: I've expanded on this [below](http://www.reddit.com/r/javascript/comments/1499vq/bubbling_in_javascript_what_its_good_for/c7b25nx]). In short, the following snippet is a serious code smell in my opinion: if(event.target.innerHTML === 'SomeString')
Oops, I should've looked at the OP's code before commenting :P
Much better to do that processing at the point it is clicked, than constantly during the lifecycle of the page as the DOM changes, or worse when the page loads and slows things down (if you're setting a considerable number). Setting event handlers on every individual dom node also introduces a risk of memory leaks that can be avoided. If you watch on a parent instead, you don't need to worry as much about leaking memory when dom nodes are removed without their event handlers first being unset. That said, it's worth being as specific as is sensible, in my opinion. I don't think it's worth watching *everything* on the document, if you can watch on #container instead, for example.
102 characters, and unlike some of the other ones posted, I believe this will match all 50 elements (including Aluminum) and will not match anything else, even if there was no test case to prove it. :) /^([BCFHKNOPSVY]|A[gls]|[ABCKSZ]r|C[dlou]|[BFGHNS]e|[CGN]a|[IMSZ]n|[LNST]i|M[go]|Nb|Pd|R[bhu]|[ST]c)$/
If you have few enough elements where checking individual strings makes sense, then delegation isn't worthwhile - and setting individual events probably isn't a problem either. If you have a list with hundreds of items, that changes dynamically, and you want to do something with an individual one when it's clicked, you should absolutely be using delegation. If you have a list with hundreds of items and you still need to check individual strings on each of them, there's probably a better way to do whatever you're doing, I would have thought.
I would definitely suggest assertTrue, I got it working on my script.
Here - Have mine! &lt;3 http://jsfiddle.net/rossc1/RKCdZ/ I'll let you try to work it out ;)
Actual link... http://www.adityaravishankar.com/projects/games/command-and-conquer/
Here you go: https://github.com/wwwtyro/perlin.js It's someone else's that I wrapped up into something simpler.
Do you have a source on the memory leaks when deleting nodes that have handlers? I think so far that's been the most interesting point raised.
Javascript has functional scope. You are sending an anonymous function to setTimeout. That function has scope.
Why not? Because he probably doesn't need it. We've been using Ajax for years without jQuery and our stuff works cross browser minus the usual bugs from IE. Once you know the bugs, you work them out without any jQuery crutch.
I commend you on trying to implement XHR on your own, but, blaming IE is just as bad a cop out as the people who are saying "just use jQuery" (or any other library). The only times the XHR request will hold up rendering is during a synchronous XHR call (versus asynchronous) or if you have multiple asynchronous XHR calls occurring at once while the page is loading. The browser will only have a certain number of connections to a server opened at once, so, if you have a bunch of XHR calls waiting for a response, the rest of the images and CSS on the page, that haven't loaded yet, will to wait until the XHR requests have been closed. I can only speculate what the problem could be since I haven't seen your code. The only way to answer your question is to see your code.
setTimeout is not special is any way. You're actually using a simple "closure", you just don't know it. You'll encounter closures when you nest functions within functions. Closure means that variables from an outer function are available to inner functions. It's also important to remember that the inner functions and variables are created new every-time the outer function is run. Here's a classic closure example. Notice how the variable "base" in the add function is available to the inner addBy function. function add(base) { return function addBy(amount) { return base + amount; } } var add5 = add(5); add5(8) // returns 13; var add2 = add(2); add5(8) // returns 13; add2(8) // returns 10; 
Hey all, I recently wrote an article trying to help people understand Grunt.js In hopes of making people more productive (and furthering Grunt's influence.) :-) Hopefully you find this helpful and hopefully it changes the way you work for the better.
This is simply awesome.
that's true, but it means that there are multiple instances of what appears to be the same object. I think this is partially because of how Javascript deals with HTML elements as objects, I still think it's weird.
What do you mean by "the same object", are you talking about the function that's being returned?
What's up with these beginners learning basic JavaScript stuff and posting it here like it's an amazing new discovery that everyone needs to hear about? It's been happening a lot lately.
I'm thinking about the variable inside. I know it's just how JavaScript does this sort of stuff, but it looks strange to me.
I've been using Javascript for several years, actually, but I always considered local variables to be gone once their called function was done executing. I found it interesting that a locally created variable could continue to exist after the fact.
Great feedback. Doing a find on my article yields the fact that I totally over-leverage that word. ;-)
What graphics library did you use for this?
You've been using JavaScript for years and you're just learning about closures? You're still a beginner if your skills are those of one, no matter how many years you've been programming.
The only issue with these, every combination of [CGINR] and [abhndl] will match even though they're not on the match list? eg. Cb So although hitting all the cases given, it's not quite the intent?
Technically this one isn't Perlin noise but some other kind of noise generation.
Every time you call addFader, that creates a new closure (collection of variable/value bindings) and a new "instance" of your timeout function. When the timeout function executes, it looks to the closure it was instantiated in for the value of currentElement. In this case, it's a jQuery set containing the new HTML element.
I know, I understand, I said that. It doesn't mean that I don't find the behavior interesting.
No, I wanted to better understand the lifecycle of setTimeout, and I thought others might find this example illustrative and useful.
(X-post from proggit)
one large if block can be made to read well: var clickFuncs = { grape: fn(){}, banana: fn() {} } then you can just call what you need with clickFuncs[fruit] what is worse is having click handlers sprinkled through your code. Every time you add an element you will need to put in a whole new function (or at least point to an existing one). Then you will be doing the check when you add in the element. It might be a faster one because you're not checking the DOM for the info, but the processing time is more likely to be during load. A user would prefer a slight delay when they click - because they made the action they're expecting the page to do something. Sure it might take a whole millisecond more, but it's about the user perception, and really if that's your worry then you're looking in the wrong place
in IE the XHR does not get to readyState 4 so no responseText
ok, www.trekkatravel.net, its a project of mine. i dont have bandwidth yet, so i didnt want to advertise, so if i take it offline its because its being hammered and im not ready to pay for it. JS front end, PHP API, mySQL backend. After looking into jQuery $(document), is like a post load, i will investigate. Might also look into how they are loaded in the html, at the moment they are all loaded in the head and the site initialised from the onload and onresize.
www.trekkatravel.net, do what ever you want, its still in development, i have some js to upload throughout. I am currently working on 2-ajax-core.js and 3-ajax-request.js. This works in FF. And id rather keep everything vanilla. if the site goes offline its because ive pulled the index.html down due to bandwidth concerns. Also, I AM NOT the best JS developer im a PHP/mySQL dev, i can get by with JS, im trying to learn as much as i can.
A base library takes care of browser normalization. An application framework, on the other hand, provides the basic structure for an application. jQuery, for example, is not an application framework. It "just" does things like browser normalization, animation/effects, ajax, events, utility functions, and things like that. There are many beginner xhr tutorial which cover the browser differences. It shouldn't be too difficult to find some example code. Also, in case you didn't know, xhr is actually a Microsoft invention. They were the ones who introduced that stuff.
its a massive project, first i dont want dependencies on core items. second i have settled on jquery as the dependency. and people SHOULD learn to do these things without frameworks before they start using frameworks. 
introduced it via ActiveX HTTP Objects, so yeh i suppose your right. ive learnt alot in the last 48 hours, i am still trying to get my grips around the prototype keyword. Im not the greatest programmer in the world, but ive learnt from some good people, and ive put a brain to the task. id really like to understand the code underneath the framework first. And only use a framework where its necassary, and so far, i am still 100% vanilla.
There is mathematical existent of the right spelling but no uniqueness.
I was going to say this as well. I remember a white paper about how performance is better using .on() than .click() but I cannot find it.
Is their terminology backwards? In other languages, the long running process keeps hold of the promise and returns a future.
You're probably thinking of the advantages afforded by using event delegation with .on/.live as described in [jQuery's documentation for .on()](http://api.jquery.com/on/): &gt; Delegated events have the advantage that they can process events from descendant elements that are added to the document at a later time. &gt; [snip] &gt;In addition to their ability to handle events on descendant elements not yet created, another advantage of delegated events is their potential for much lower overhead when many elements must be monitored. On a data table with 1,000 rows in its tbody, this example attaches a handler to 1,000 elements: &gt; &gt; $("#dataTable tbody tr").on("click", function(event){ &gt; alert($(this).text()); &gt; }); &gt; &gt;A delegated-events approach attaches an event handler to only one element, the tbody, and the event only needs to bubble up one level (from the clicked tr to tbody): &gt; &gt; $("#dataTable tbody").on("click", "tr", function(event){ &gt; alert($(this).text()); &gt; }); The downside of using delegated event handlers is that `event.stopPropagation()` can get tricky if you've got multiple event handlers hooked into the same part of the DOM.
You are using synchronous requests? asynchronous: false, Synchronous requests are blocking, that is going to kill loading. Nothing will be able to load/render/run, while the blocking requests are active.
can you clear something up for me. if async is true, does the onreadstatechange still work, or do you need to use handlers. this is whats confusing me. and when i append a function to the onreadystatechange, i dont get scope inside that function to see my ajax objects other functions. See below, this._onException is not available because its not in scope (i guess scope is now the transport) this._transport.onreadystatechange = this._respondToReadyState; AjaxCore.prototype._respondToReadyState = function(transport){ log("info", transport); if(transport.target) readyState = transport.target.readyState; else readyState = transport.readyState; if ((readyState &gt; 1) &amp;&amp; !((readyState == 4) &amp;&amp; this._complete)){ if(readyState == 4){ try{ this._statusHandler(); return; } catch(error){ this._OnException(error); } } try{ this._stateHandler(readyState); return; } catch(error){ this._OnException(error); } } } 
Awesome, I'll probably use a couple of them.
This is probably the most important comment from that discussion: You're Missing the Point of Promises: https://gist.github.com/3889970
I've been writing javascript for many years, I know it inside and out - warts included. When I stumbled onto the coffeescript project several years ago I was smitten and have not looked back and insist on writing all my javascript as coffeescript first. As others have said, CS is simply a dialect of JS, it does not introduce anything that JS can't do on it's own but what it does do, at least for me, is provide a cleaner work space to express my ideas. I've always liked prototyped based languages but I felt that JS was a bit clunky and verbose but CS clears away some of the cruft and lets me think of things differently. My JS code has been far and away improved when generated from CS source. With that being said, many equally experienced JS devs don't see the need for applying an abstraction on top of what they already know so well. So all I can say is your milage may vary, but learning CS wont hurt and you might take to it like I did. 
What about sus2, sus4, sus7, sus9, augmented, /5, /6, /9 ( / == flat ), inversions, etc. ;)
since I only have the ending matcher (`$`) with out a starting match (`^`) It acts like `/^.*[chir]$/` but saves a few characters. I'm aiming for test passing rather then the actual question (atomic elements &lt;50)
Slight improvement down to 57: /(Ca?|P|[BFHKNOSVYcr]e?)d?$|[GNR][abe]|[^E-HPY][g-ou]|As/ 
That's crazy. I think you win!
Yes
Anyway, is the new diagram correct now ?
Me with my sucking 70 so sad... `/[BFH]e?$|[CR][^es]|N|[GS][^btu]|[A-DK-NTZ][cg-s]|I[cin]|[CKOPSVY]d?$/`
These were just examples, not a comprehensive list. You will find that Callum will always try to make the challenge interesting, to leave room for improvements.
Ha! I didn't see that. (I was just being a jerk... I like to tweak the brits when possible ;-) )
thank you for that great answer... all i needed to know!
You can use the .constructor attribute to find out; Usually it is an instance of NodeList or HTMLNodeList, which is either an object or a function. document.getElementsByTagName('div').constructor // returns "function NodeList() { [native code] }" in Chrome You can abuse the prototypical methods of an array to create one out of such a NodeList: [].slice.call(document.getElementsByTagName('div')); // returns an array with all the nodes
I see, in firefox it returns an HTMLCollection So to check for such a thing I'd have to do something like: if(list instanceof Array || list instanceof NodeList || list instanceof HTMLCollection) { // It's array-like! } Maybe even more for other browsers. So I'll probably go for [].slice.call() instead :P
I don't really get what you need this for. But instead of using multiple comparisons, you can just compare to the real thing: list instanceof document.getElementsByTagName('head').constructor The bad thing about [].slice.call: if you don't give it something with a length (e.g. a single node), it will return an empty array and if it doesn't get anything (null, undefined), it will even throw errors, so if you want to have all cases, use: list ? (list.length ? [].slice.call(list) : [list]) : []; On the other hand, why use an Array if you can use your own Prototype with interesting methods? function x(nodes){ return this instanceof x ? this.init(nodes) : new x(nodes); }; x.prototype={ init: function(nodes) { ...; return this; }, manipulate: function(options) { ...; return this; } }; This way you can do something very much like jQuery.
If you wrap the expression in backticks, it won't do that: `/[BFH]e?$|[CR][^es]|N|[GS][^btu]|[A-DK-NTZ][cg-s]|I[cin]|[CKOPSVY]d?$/`
I really wanted to like angular, but after using it I found myself getting stuck at the last ~10% of a project. Getting something up and working is very quick in Angular, but the refinement (like this article) is where you need tweak. Not very straight forward to integrate with jQuery UI, etc. I realize there is angular UI but it's pretty early in the game.
Very nice write up! It be better for slightly more advanced Angular coders. I think a lot of people still stink at understanding things like directive basics, or how JQuery itself even integrates.
It is also very browser specific, the actual type it is is different on firefox, chrome and IE. While the implementation is very similar in firefox and chrome, IE, of course, screws it up. Most reliable way to create an actual array with them is to loop through it and copy the values into a new array.
May I suggest you to just stop using the DOM api and use JQuery?
Some of those 'game engine libraries' listed *don't even have any games*, **only** support bleeding edge browser versions, have poor or no documentation, or run so slow as to be **useless**. Not very good with google if they missed the [GMP javascript game engine](http://gogomakeplay.com/). That's a shameless plug for my engine, but no kidding - how did they miss it? Google 'javascript game engine', and GMP is on the first page of results. And really, how is it every one of these lists omits the great grandparent of them all, Scott Porter's GameLib js game library? You can find copies [here](http://code.google.com/p/javascriptgamelib/). Google Scott's name and you will see **tons** of arcade classics implemented in js. 
Sure, but I'm afraid I have to ignore the suggestion, since I'm working on my own JavaScript framework :)
What exactly would this be used for?
Agreed - it's taken me quite a while to get the hang of directives, and I'm still learning things. But I'm nearing the end of a large project now that I never would have been able to achieve without angular. At the very least, its support of MVC and clear separation has made my programming much cleaner (than the CGI-world I was accustomed to.) and my projects are much more maintainable as a result.
Why is this guy being downvoted for asking his questions?
So does anyone have any experience with any of these? I'm curious to know if there are definitely ones I should stay away from (poor documentation would deter me right away), and if there were ones that stand out above the rest. If you need to know what type of game I'm interested in making before answering a question like that then here you go: I'm interested in a making a side scroller with typical movement (think Braid minus the reversing time part). This is just for fun to see if I can do it. 
&gt;//musicInit("propane.ogg", "propane.mp3", "propane.jpg"); &gt;musicInit("cinema.ogg", "cinema.mp3", "cinema.jpg"); So what's wrong with Propane that you decided to go with Cinema instead? ;-) [edit] Been looking for a project that involves Three.js and you just gave me an idea. I want to make something similar but as a Christmas e-card. So I want to make a line drawn cone shaped Xmas tree in the same effect as your that sort of pulsates to an Xmas song. Very minor amount of movement compared to yours. And the user can of course rotate it 3D space. Hope you don't mind that I reverse engineer yours (with tons of credit and link backs of course)
If you can code in JavaScript it's way more of an asset. Although if you've been away for years, you'll probably need to pick up on the EcmaScript5 changes. Check out the 8(?) part "History of JavaScript", starting with Part 7, which succinctly describes the changes: [DailyJS's History of JavaScript part 7](http://dailyjs.com/2010/07/05/history-of-javascript/) 
I think all that is wrong with the code you have is the slashes before the double quotes. Try the following code instead: javascript:var x= $(".content").find("a").each(function(){var href=$(this).attr("href");if((!$(this).hasClass("drowsapMorphed")) &amp;&amp; ($(this).next(".drowsapMorphed").length==0) &amp;&amp; href &amp;&amp; (href.indexOf('imgur')&gt;=0 || href.indexOf('jpeg')&gt;=0 || href.indexOf('jpg')&gt;=0 || href.indexOf('png')&gt;=0)){var ext =(href.indexOf('imgur')&gt;=0 &amp;&amp; href.indexOf('jpg')&lt;0 &amp;&amp; href.indexOf('png')&lt;0 &amp;&amp; href.indexOf('gif')&lt;0) ? '.jpg' :'';var img = $("&lt;a class='drowsapMorphed' href='"+href+"' target='blank' style='display:block'&gt;&lt;img style='display:block;max-width:780px;' src='"+href+ ext+"' /&gt;&lt;/a&gt;");$(this).after(img);}}); Also, this code assumes jQuery is loaded and all imgur links are within a element with the class 'content'. This seems to work for me on Reddit, but if you are trying to use on another site, it might need to be modified slightly.
&gt; Game developers have dropped Flash for its competitor, HTML5, which, along with some help from a Javascript plugin, makes smaller and more interesting online games for browsers or game apps for mobile. wat? I have to say that sentence doesn't seem very true. GameDevs still prefer Flash, go hang out in the r/GameDev subreddit and see. Flash usually produces smaller files except for some rare cases which the EaselJS only implementation manages to edge it out(could be wrong about onyl Easel). And as for interesting, I'm constantly pushing against the limits of HTML5, the number of times I'm thinking "I could have this done already and add new features if this was Flash" is ridiculous. A blanket statement like that just seems blatantly false. The list is impressive but I feel proper descriptions for all the libraries would of been appropriate, if that was too much work then vetting the list some more could of been beneficial as some seem questionable in their origins and development level.
True! But then everybody knows that 200 is a numeric name for success, isn't it?
Don't know why all the downvotes. Seems like every goddamn esoteric thing I can think up as a "did someone do this already?" is done in jQuery when I need it in plain JS.
Demo does not work in windows xp &amp; chrome, the file dialog will not let me choose from my C:\windows\fonts folder.
Sometimes this error happens: TypeError: Cannot read property 'home' of undefined at new RouteController (https://dl.dropbox.com/u/28763/angular-tutorial/js/site.js:26:33) at d (https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.2/angular.min.js:27:325) at Object.instantiate (https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.2/angular.min.js:27:455) at https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.2/angular.min.js:50:431 at j (https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.2/angular.min.js:146:279) at https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.2/angular.min.js:88:100 at Array.forEach (native) at m (https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.2/angular.min.js:6:193) at Object.e.$broadcast (https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.2/angular.min.js:88:63) at https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.2/angular.min.js:80:114 You can replace 'home' with whatever page you want. I'm guessing that it's because of the file loading order or something? Only happens when you go directly to page using the url.
Very cool!
Without going thru' all that hoo-hah, I got bottom of the second page of results. Does being in UK make a difference?
Firefox has the firebug extension (http://getfirebug.com/) I personally prefer this to the console in Chrome.
[Visual Event](http://www.sprymedia.co.uk/article/Visual+Event+2).
You can use breakpoints to pause on specific lines when they are run. So set breakpoints for what you want to monitor and you can check on variable values at that particular step. Also allows you to step into functions.
I'm not sure if I'm explaning it right (or maybe I just dont understand enough to know what you're saying). Let's say that I don't know anything about the underlying code, is there a way for me to see "oh, hey, i clicked on that button and it fired the saveAjaxForm() function"...now I go search the code for that function and then make my modifications. I believe with the breakpoints I would need to know about the saveAjaxForm function before hand -right? 
Thanks, this page has a lot of good info on it - just installed eventbug and it's definitely closer to what I'm looking for. 
Looks pretty cool. It actually made sense to a JS newb like myself. :)
Got an example page? I just want to see some demos...
How about just a bitmap? Instead of using the builtin gradient function, draw it manually onto a getPixelData-like typed array (or just use create a canvas, use the builtin gradient, and use getPixelData). Use a second typed array as the image; draw it by copying the reference matrix onto the image one, multiplied by whatever opacity. Then each step consists of modifying the matrix, then drawing it as an image over the entire canvas. It would make you round everything to pixel values, but it might be faster. edit: that's actually likely one reason copy-pasting is faster - it's less accurate. Instead of calculating the exact value of each pixel, you're anti-aliasing an approximation into it. So while the original algorithm would need to calculate the average distance from the centerpoint for every pixel, yours simply takes the values of overlapping pixels (totalling 1 for drawings at whole pixel values, otherwise 2 or 4) and mixes them using the appropriate ratio.
Is it not possible to use jasmine spys to test require.js modules?
I believe `nativeNode` is any type of node implemented by the Web Audio API. They're denoted as native because they're implemented by the browser rather than in JS.
Which browser are you using? Dragging to end works for me with Chrome and Firefox. Dragging to empty list is a good one. Since there isn't a list to drop on, you can't seem to drag it back. I'll have a look to see if I can find something to fix this. Well spotted!
You can fix the drop on empty list by adding a style="min-height: 100px" to the lists. This will make sure you'll always have an array to drop an item from the list on. *edit, which only seems to work on chrome :( I'll fix it to make it a conditional ng-class based on the size of the list.
I updated the article. It now shows how to do this :)
If you only care about modern browsers (Firefox, Chrome, IE9+) then [this CSS-only approach works](http://holloway.co.nz/sa/checkbox.html). (well it uses an image for the tick but you could replace it with a unicode tick I guess)
Yeah I'm getting this too (Chromium Version 20.0.1132.47 Built on Ubuntu 12.04, running on LinuxMint 13 (144678))
Awesome. Exactly the missing piece for a project of mine.
This might be the closest thing to what I was looking for - but it is adding a lot of extra stuff that I don't care to see! 
The breakpoints only work when you start debugging. "Initialising Page (v0.1)" appears in the console, though.
yeh the log class outputs to the console. i noticed that you dont even have to start debugging. you just f12, then refresh and it loads. i also notice that it hangs on document.body.appendChild(this._elements.sitecontainer); without the debugger open. it will write the append to the html, but wont go any further.
Why didn't you create an example? Would make it easier to see what it actually does.
I've heard a lot of good things about Impact, but yeah it has a $99 fee which has kept me from using it.
Awesome! Pressing too many keys on the website has some weird behaviour. Some times it displays the first six keys I pressed, and others it clears everything or just acts plain weirdly. Is that the website or the library? It would also be nice if pressing space on the website prevented the default action of scrolling down.
mainloop and miniloop are missing semicolons at the end of their declarations. That's the only serious complaint from jslint. You're already aware largest width and height are unused.
&gt; If you can find a way to reduce the same of the library after minification without removing features or behaviour Please let me know. I'm not sure how anyone will ever really know if they removed features or not after altering it, because there are no unit tests to confirm all of the features still work.
anyone tried using it with the konami code?
They should add intall too, cause I did that one today :p
Try it on the demo page.
I was all in favor of this plugin until I saw ROUND CHECKBOXES. CURSE WHOEVER CAME UP WITH ROUND CHECKBOXES TO THE SEVEN LAYERS OF HELL.
Just insert this somewhere in &lt;body&gt; after your target div has been declared. It builds all the elements to make a slide show and appends them to the target div. &lt;script&gt; var show = new SlideShow({ slides: [ 'slide1.jpg', 'slide2.jpg', 'slide3.jpg' ], backgroundImage: 'slideBackground.gif', slideTop: '13px', slideLeft: '13px', divClass: 'center', container: 'showDiv', mainInterval: '5000' }); &lt;/script&gt; EDIT: for grammar 
Would there be a way to ONLY load images from classes called "title " and "title loggedin "?
the google maps thing started throwing Image is not a constructor errrors all over the place, it loads a map, but it wont drag it, seems i may have to register a uid with google maps. 4 images are ok, i know about them, that is css, so shouldnt affect ie loading. ive added an if(window.console) condition to the console call in the log class. the bind function in generic.js was added to support IE, im using IE9. it has seemed to work, i havent tried it in IE8. If it causes any issues ill re investigate. most newer browser support a bind method, IE does not. Its a copy pasted bind function from some online research. my onload problem seems to exist from this issue. http://dean.edwards.name/weblog/2005/09/busted/ after lots of googlng, it seems to have been a design decision going back as far as ie6. probably because its so integrated into the OS, where as the other browsers are not. conditional if is true if anything is available, they do work. as once IE decides to load, they do their thing. the getTransport script is in 3-ajax-core.js at the top in the Ajax var. I was only checking for 2.0 but i added checks for 6.0. i seem to get a transport when in debug mode. I think it has something to do with appending to the body during init before anything else is written seems to kill the script. Ill have to investigate preload, then append. or i was thinking &lt;div id=body&gt; and appending to a hidden div instead as its not part of the body, and gives the body a chance to close. cheers for your help, i really appreciate it, one man band here, sometimes you get a bit of cabin fever and your brain starts to miss things.
Here we go: var ary = []; for (var i = 97; i &lt;= 122; i++) { ary.push([[[["shift", String.fromCharCode(i)]]], [String.fromCharCode(i - 32)]]); } Results in `ary` being the horrific mess above. Isn't bad resource-wise.
after a few hours investigating, i now see what you mean about the bind and losing the transport when assigning it to the onreadystatechange. when i run in ie7 mode it loses the transport on the bind. this doesnt occur in ie9 mode and bind is native to firefox and chrome. i have the site loading now, some slight modifications to load order, and some changes to the handlers. The last thing i guess is the bind issue. Im not big on javascript. So any suggestions on getting scope into the onreadtstatechange function.
I agree for simple games. However if you want to give the user the ability to configure there own key bindings locales come in handy, especially when you have a lot of key bindings.
This is because of hardware limitations, not software. Most keyboards will only allow a few keys to be pressed at the same time.
A native node is any audio node as defined in the web audio specification. Working on an example in my free time (I don't have much) showcasing all the effects. I'll post a link once I finish it up.
While we wait for part 2, here's a little bit about minifying js and css from one of my replies on stackoverflow http://stackoverflow.com/questions/13713273/how-to-concatenate-and-minify-multiple-css-and-javascript-files-with-grunt-js 
what would you called tiny than?
In other news, parseInt has a second parameter. 
You can do a .animate({width: 100px}) on both of the elements, or you could set the images up in a horizontal row and just animate them only so far to the side... TO JSFIDDLE
Great article!
I wouldn't describe what you've got currently as elegant, though. I'm also not sure what is wrong with `String.fromCharCode`.
There is a WIP tutorial on how to build a very simple web application with RingoJs: http://ringojs.org/tutorial/ edit: or even simpler: start with the example from the frontpage http://ringojs.org/ and use the filesystem module http://ringojs.org/api/master/fs/ to read/write your data as JSON files. that's probably the least-amount-of-work way to do it.
Surely they'll be functional tests, not unit tests?
Server Side Javascript is a bit tricky. Not because it's very complicated or anything, but because you have to look at JavaScript in a different way then you did before. Learning server side JavaScript starts at the same place as any other server side language. Write a simple static website and go from there. Node.js is the place to start doing that. I recommend building a site with a few pages in node without any libraries so you learn what it does and what libraries do if you want to use them later for more complex stuff. Don't worry about sockets, databases or other stuff. Take it 1 step at a time. After you have a simple static website, add a database, go further.
Isn't it [keyboard ghosting](http://www.microsoft.com/appliedsciences/antighostingexplained.mspx)? Or are these different things/the same? Edit: meant to reply to maritz comment
You could also try [Rhino for Webapps](http://rhino-for-webapps.appspot.com/) which allows you to use server side javascript within a java jvm appserver like Tomcat or Jetty.
"need" is not true but I'd also recommend express. 
You have the old unofficial cocos2d-javascript, but you are missing the official [cocos2d-html5](http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Html5) Cocos2d-html5 is arguably one of the best options as well, as the same javascript code you write for it can be used as scripting code for the native iOS cocos2d and cocos2d-x for android/windows/etc. This means that you can create a web game and also a native mobile game for just about every platform using the same (mostly) unchanged code. When used as script bindings for the mobile apps, it's not running in a canvas, its actually executing native code so it's super fast.
Why do you want to use javascript for this?
They are very related, far as I can tell, from https://en.wikipedia.org/wiki/Rollover_%28key%29 ("...use isolation diodes in their keyboard matrix to implement full n-key rollover [...] making them immune to both key ghosting and key blocking")
If you want to do it no one is stoping you. Go nuts. But you're right, its a bad idea.
This could probably be done with the [data-* attribute](http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/all-you-need-to-know-about-the-html5-data-attribute/) and it's api. However, this seems like a weird idea. For the 'load in the head', you can use [shortest domready ever](http://www.dustindiaz.com/smallest-domready-ever)
Say I did write it. You could render the page your working on in your browser, and then copy the source code. You could then use that source code(as long as there isn't php or similar stuff in it) that would be standards compliant after the javascript works its magic.
Why? You are writing out href/title/etc anyway, why not just write it in an &lt;a&gt;? You aren't really saving yourself any work as far as I can see...
Uh, no. N in this case means any number of keys. USB keyboards *can* be too, but most are expensive or have max 6 key-rollover. Most cheap USB keyboards have 2-3 key-rollover. And for some even that is only valid for the WASD area (except modifier keys which are usually not counted). I mean, it might be difficult physically to do this, but technically if you press all the buttons, the signal gets to the PC.
Agreed. The general principle is this: When you want to build something with 2 new and complicated pieces, break it apart and first do just 1 complicated piece by itself, then do the 2nd piece by itself, and then finally merge the two pieces together once you know they are working on their own. 1 = Communicate from Client to Server. 2 = Communicate from Server to Database. 3 = Communicate from Client to Server to Database.
I've taken the time to learn javascript this last year and have decided to stick with it for another one or two years before diving into other languages (or at least keep Javascript as my primary tool). Server side javascript seems to be something that will become more prevalent and a more in-demand skill in the professional world. Also, I have audio-based javascript applications I've been developing and would like to see how much of the stack I can do strictly in javascript.
ie. How to write non-maintainable code. Don't get me wrong; functional programming is great. But dear god, the whole point of higher abstraction levels is to make things understandable, perhaps at the expense of performance. Don't give up both!
I like the ambiguity of "ie" here, because it can mean both "in example" and "internet explorer" - the latter's inability to handle sparse Arrays make the whole thing rather useless at the moment (unless one doesn't need to support IE&lt;9).
I would suggest using HTML5 data attributes (e.g. data-href="...") to keep the HTML valid. Other than that, it's a bit difficult: when do you want the transformation? On mouseover? When it's loaded? You will very probably run into formatting and performance issues. So let me propose a better way to do that: // needs attachEvent/onclick fallback for older IEs: document.addEventListener('click', function(event){ event = event || window.event; var node = event.target || event.srcElement, url; // only mouse clicks if ((event.which||event.keyCode||event.charCode) !== 1) { return; } for (; node &amp;&amp; !(url = node.getAttribute('data-href')) &amp;&amp; node !== document.body; node = node.parentNode); if (url) { // you can also add something like data-href-target and use window.open instead location.href = url; } }, false); This way, you can use event capturing/bubbling to set a single event and still let all tags behave the way you want.
You are explicity calling the "onclick" event handler. The only bind to a click event. You could possibly bind this to another handler such as "submit", but writing this in a inline handler is very poor form. What you are asking for is a very simple "GET" request that could follow a very simple REST pattern. I would very much consider why you are doing a very large amount of work to retrieve what is likely a very small data set. Also, you should avoid returning false on a click handler. You are telling the browser that it is in a fail state, when it really isn't. Proper event handling should just prevent event propagation, and not fail outright. 
From here on my child, I cannot join you on your journey. It's dangerous to go alone. Take this: google.com
http://pastebin.com/AtxAHFG8 - there you go.
I knew most of that stuff, but the second parameter to `map` and the like was a bit surprising. I mean, the following two lines are the same; ["foo", "bar", "baz"].filter(RegExp.prototype.test, /^b/); ["foo", "bar", "baz"].filter(RegExp.prototype.test.bind(/^b/)); and the latter probably being more readable to most people. But then again, they are common functions and would probably be accepted eventually. What bugs me though, is how roundabout the ways you have to think about doing these maps in a way that was normal in the prototype.js era with `Array.prototype.invoke`. I personally made an protype style `invoke` for my own utility library so I can do stuff like; [[1,2], [3,4]].map($.invoke('join','w')); // [ '1w2', '3w4' ] ["Hello", "World"].map($.invoke('slice', 1)); // [ 'ello', 'orld' ] [f, g, h].map($.invoke('apply', this, argAry)); Which I would argue is quite readable, as it's just a way of saying, do with all the elements this function on the prototype and here comes the arguments as usual. These simply aren't possible except in the very few cases where default usage is required (like `String.prototype.trim`). Here's how far I got without `$.invoke`: [[1,2], [3,4]].map(Function.prototype.call, Array.prototype.join); // ['102', '314'] ["Hello", "World"].map(Function.prototype.call, String.prototype.slice); // [ '', '' ] On the other hand, when the method isn't on the prototype, like when you want to regex test a bunch of strings and `test` is somehow not also on `String.prototype`then this stuff is useful. As long as you remember it's basically a shortcut for binding a function, and it's generally difficult to find a lot of use-cases for it elsewhere. I think. [invoke function code](https://github.com/clux/autonomy/blob/7b9cec3d719e03abad23c1732b15b96b93ac5da5/autonomy.js#L248-254)
This works!!!!!!!!!! You are a genius!! Thank you so much. I wish I had more upvotes to give :-) Thank you Thank you.
you are quite welcome :)
No, I mostly agree with you. I was arguing for one point-free style rather than another really. The point I was trying to make is that in this one way it's very finicky to get the parameters across except in a few select cases were the extra parameters are ignored. Things quickly become overly convoluted when you try to stick to any point-free style convention too strongly. These two ways are sort of borderline; cool, but use with caution : )
I agree with the other posts, that you shouldn't use any framework/module when starting out with Node.js in the beginning, but you are right. There is a severe lack of code that shows how to integrate everything together, once you move past the basic steps. I wrote this really simple basic example of how to use node-mysql with an actual webpage for another Redditor, if it might help you in any way: https://gist.github.com/3180770
Oh wow, thanks. Tonight I'm going to install node and play with it using your example. Just having an example with the js and the html page separated gives me a bit of order . It seems silly but those little unspoken things are the most difficult to weed through.
I've got to wonder: why would I buy this shirt as opposed to just designing it myself on something like Zazzle? It would take all of two seconds to make. If you could find some interesting/artful way of putting NaN on a shirt then it would be a different story but this is just three letters on a shirt...
Yeah I think the reason it isn't working is because I am not using a document.ready code right or I am missing one of them. I'm just not sure which ones.
You may want to put the results inside the corresponding fields, for example: document.getElementsByName('price')[0].value=price;
honestly, your docs are way too dense. i spent a few minutes and still don't understand what's going on. i'm using this now and am loving it: https://github.com/component/,
Agreed. AMD is solid.
Really? I would have thought that jQuery.ajax would have ranked higher since we are talking about jQuery and all.
I never said it being a bad thing. Hell, it's probably a good thing since the DOM can be quite annoying.
AMD is great no doubt. But i'm tired of define(function(require){}) or define(['Bla], function(Bla){}). Package builder can do that wrapper for you, don't it? Today every script is passes through some kind of builder tool. make grunt r.js or whatever.
Looks interesting but I think you some words in your readme: &gt; ScrobMaster works with elements that have been registered create "Scrobjects".
Thanks, I'll try to explain easier. LMD and component are different. LMD is closer to build manager with some cool options like 1-click code coverage or 1-click transparent localStorage cache. Please take a look on Getting Started https://github.com/azproduction/lmd/blob/master/docs/getting_started.md
no idea what "1 click code coverage" or "1-click transpaernt localStorage cache" are nor why I owuld need them.
I do not want to say that RequireJS or AMD is bad. I love them both and use them. But there is no just an AMD and r.js. There is more than one way to write modules and manage builds. Showing LMD I want to share my experience of managing JavaScript applications.
It's not about typing a few more words. I think that require('stuff') and exports.stuff = stuff; is already a contract. And many of us think that single js file is a module. And more, requirejs demand that one file should contain only one define call. So why we still type define I do not know. I come here not to insult Requirejs and AMD. I use them both. I just want to say that there is a different way to write modules and manage your builds. 
You a really username. I like.
r.js can do the whole define( thing for you. http://requirejs.org/docs/commonjs.html#autoconversion
I just read this yesterday in *Javascript: The Definitive Guide*!
No problem. A word of advice: take your time writing docs. If they're badly written people may assume (however wrongly) that the code is written as sloppily. I on't have a use for ScrobMaster now but I'll keep it in my bookmarks. It looks useful.
Uh, how is negative zero not a valid value? I'd say that any interpreter that claims to follow IEEE754 MUST treat negative zero as valid. The only question is to how inputting it is done. 
Although sort of unrelated, this reminds me of a video I love... http://www.youtube.com/watch?v=kXEgk1Hdze0
Interpreted by what? printf?
What's the performance like? By the sounds of it, it's certainly usable, but I'm interested in knowing how it compares to node.js. Microsoft have shown they are capable of making a very performant JavaScript engine, has this been incorporated into their server-side stack?
Sorry, but you really got it wrong, interpreters do store negative zero as a separate number. Check this: [http://jsfiddle.net/cs5v5/1/](http://jsfiddle.net/cs5v5/1/)
This isn't really about javascript but about IEEE754. You'd have the same in most modern languages.
Oh, haha. Get 'Javascript: The good parts' by Douglas Crockford for him. It's filled with snippets and short bursts of information, and so I didn't find it boring.
I know I saved this for a reason.
Not specifically JavaScript, but he may be interested in books on game design. I found the books "The Art of Game Design" and "A Theorie of Fun" very interesting reads while not being too complicated or scientific.
Try Code School, they have courses on nodejs, jquery and more. http://www.codeschool.com/courses/jquery-air-first-flight http://www.codeschool.com/courses/jquery-air-captains-log http://www.codeschool.com/courses/real-time-web-with-nodejs http://www.codeschool.com/courses/coffeescript http://www.codeschool.com/courses/anatomy-of-backbonejs
Most other languages I work with throw divide by zero exceptions, so not really. I think actionscript would do it.
Javascript: The Good Parts
I learned a great deal about working with Javascript by learning my way around MooTools. There's a book available "Pro Javascript with MooTools" that's based on 1.3 - It's very good, and covers a lot of bases, including discussing OO programming with the framework, which is great for learning JS, as it's built to extend JS, rather than wrap it like jQuery.
I understand where you are coming from and from that point of view I agree however my point of view is not the same for one reason. jQuery is a whole is becoming less relevant because JavaScript itself is catching up across all the different engines. jQuery has become a temporary stop gap measure that is going to get used less and less when the older internet explorer browsers finally die out and it's value proposition becomes less and less. I really should have said ~~jQuery.ajax~~ XMLHttpRequest for clarity's sake because without this one important "tool" the internet as we know it would be drastically different today and moving forward it has little risk of being irrelevant anytime soon. Hell maybe I should have said WebSockets because that is going to be a damn important thing to know in the near future. ;-)
When I was 13, I knew nothing about programming at all. I used rpg maker back then because I wanted to make a game. I ended up learning a lot of programming concepts. I recommend this as well, especially if he likes games and might want to make one. It's much easier to learn if he has a project that he wants to work on. 
+1 for websocket. Too bad it's hard to use due to Microsoft... *But I'm curious : where do you think I'm coming from ?*
+1 for ImpactJS. Great engine to get started with JS game development if that's the kind of thing he's into.
They do? Ruby: irb(main):001:0&gt; x = -0.0 =&gt; -0.0 Python: &gt;&gt;&gt; x = -0.0 &gt;&gt;&gt; x -0.0 Javascript is not exactly a paragon of good practices. EDIT: Also, note that the spec also says that both positive and negative zero should compare as equal despite not being bitwise equal, so that test doesn't say anything. 
I agree that the head first series should be good for a 13 yo. I did not read the one on Javascript though, but the ones I read had nice examples that made it easy (and fun) to grasp very theorical concepts. As for Crockford's book (Javascript : the good parts), it is a must-read for Javascript programmers, but I am not sure if it'd be interesting for a teen... it's not exactly what I'd call a spark. Crockford's style is quite rigid and imperative, not the kind of things I wanted to hear when I was 13.
Inveterate Jade/Stylus/Coffeescript user here... it takes very, very little time to get used to the new syntax, and once you do, you will not go back to HTML/CSS/JS, your development time will decrease, and you will enjoy the languages again.
If he's on codeacademy, he probably will be able to understand it. When I read it, I had literally no background of JS, and I found it easy. I don't think age would matter that much.
C# (on .NET 4.5). One compiler warning about equality checks on doubles (the proper approach is to subtract and then compare against the epsilon) static void Main(string[] args) { var a = -0d; var b = 0d; Console.WriteLine(a == b); Console.WriteLine(1 / a); Console.WriteLine(1 / b); Console.WriteLine(1 / a &lt; 1 / b); } True -Infinity Infinity True Press any key to continue . . .
My 13 year old nephew is also learning Javascript on CodeAcademy. It shocks me how much he as learned so far. His name is also Hassan :) 
I ~~would~~ also recommend the head first series. I read the AJAX one a couple years ago and really like the approach they take. It's a lot more engaging and less "boring" than some of the other books can be. Should be perfect for a teenager. [Head First JavaScript](http://www.amazon.com/Head-First-JavaScript-Michael-Morrison/dp/0596527748/ref=sr_1_1?ie=UTF8&amp;qid=1355158644&amp;sr=8-1&amp;keywords=head+first+javascript) [Head First HTML5 Programming](http://www.amazon.com/Head-First-HTML5-Programming-JavaScript/dp/1449390544/ref=sr_1_2?ie=UTF8&amp;qid=1355158644&amp;sr=8-2&amp;keywords=head+first+javascript) [Head First jQuery](http://www.amazon.com/Head-First-jQuery-Brain-Friendly-Guides/dp/1449393217/ref=sr_1_3?ie=UTF8&amp;qid=1355158644&amp;sr=8-3&amp;keywords=head+first+javascript)
https://github.com/mikaa123/chimney ANSI escape sequence animation of an ASCII fire which intensity is modulated by the amount of (console) logs you feed into it.
I'm currently finishing up a book on game programming in JS / HTML5 as part of the 'Dummies' Series. I'm aiming this book squarely at folks like your brother. I wrote my own game engine specifically for teaching (only two primary objects - a relatively clean interface.) You're welcome to the game engine whether or not you eventually get the book. Here's a quick overview: http://aharrisbooks.net/h5ge/SimpleGameDoc.html And here's the documentation: http://aharrisbooks.net/h5g/documentation.html I've not yet finished the web site. but here's a directory with a few 'starter' games: http://www.aharrisbooks.net/h5g/h5g_13/ I've done some other books on web development and gaming. PM me if you want a bit more information. 
Nope, they would only throw exceptions for an integer divide by zero, floating point division is fine (and defined as being fine). I'd be amazed if you can find any language that throws in response to a floating point divide-by-zero
Maybe you could buy subscriptions and licenses for hosting, services, editors and IDEs. Accounts for Github, Heroku, Phpstorm/webstorm, Sublime text 2 etc...
In numpy dividing by zero yields zero... http://docs.scipy.org/doc/numpy/reference/generated/numpy.divide.html
For JavaScript? Github works. Free.
I like WebStorm by JetBrains. It's a widely used IDE for JavaScript. Or get a license for Sublime Text, which some other prefer. ... I guess you could find out more about his tastes just by talking to him.
Totally unintentional, sorry. Missed it last time round and my reddit companion didn't spot it submitting. I thought it was cool but if you've seen it, just move on.
Came here to recommend a license for an IDE/Editor (I'm a Sublime Text 2 user). Toolkit would be a good way to go. Another option is a paid GitHub account so he can have private repositories. Having a long history of work in a public place by the time he's the age for a job in the industry would give him an edge.
A lynda.com subscription? There are a ton of very good video tutorials on the website, and not only on Javascript. I would imagine a 13 year old is interested in a wide range of subjects, so if he wants to learn some HTML 5 or something, he will certainly find some good tutorials on lynda.com.
NaN
I'm a big fan or meaningful parameter and variable names. Slideshow(p) seems confusing. Is it p for photos? Options? It's not quite clear. Not a biggie but always a good habit. 
Do you program? Use JS? The best thing for someone learning basically anything is mentoring. Spend your time rather than your money nurturing his development. Encourage his progress, give him projects to do that he can barely handle, but can complete without too much time, and will let them grow steadily, by inches. Help him when he's stuck by showing him good resources to get answers quickly. But let him struggle, and make mistakes, because he won't learn as well if you hold his hand all the time. Programmers have to be curious, and they have to be willing to fiddle and search for answers, rather than rely entirely on one person to help them. Personally, I don't like CodeAcademy. Their examples are often too simplistic, or contrived, and aren't things you'd really want to do, and you're in this really artificial sandbox. The most empowering thing, and the thing that will get a person hooked on programming is solving your own problems with it. Maybe you do Secret Santa? Have him write a name chooser. Play board games and have people with poor motor skills clobber the game pieces with dice all the time? A dice simulator. That sort of thing.
The cool factor goes up when your name or handle is the URL and hosting is configured etc. you can also get him into the basics of minimization if you want, maybe even obfuscation if you want to go wild with it.
I'd also recommend this book. It was recommended to me by an instructor teaching an ExtJS course I took. 
You could write, run, save, and share code on http://jsfiddle.net/ And learn some basics on http://www.codecademy.com/ Also, the folks at /r/learnprogramming are all about helping!
Yeah im currently using Codecademy haha! jsfiddle.net, ill try it thanks!
Have you tried a browser?
Jsfiddle is great, but CodePen is another option: http://codepen.io/ edit: also, as icantthinkofone pointed out below - these tools are more for sharing code than testing. for learning and testing javascript just use your browser, like a normal website.
How?
JavaScript can be written directly into an HTML file within &lt;script&gt;&lt;/script&gt; tags, or you can write it in a .js file and include it in the html file: &lt;script src="myjavascript.js"&gt;&lt;/script&gt;. Then you just load the .html file in the browser (either locate it and open the file, or open your browser and hit ctrl + O).
It may be best for you to start with CodeCademy and get the basics down first. they'll show you how to test the javascript
Create a file using your favorite editor and save it with a .html file extension. Write html with your script at the top and go to town. &lt;!doctype html&gt; &lt;script&gt; alert("I'm alive!"); &lt;/script&gt; Make sure you use a modern browser (anything but IE).
Assuming this is for the browser, my strategy is typically to manually (as in: plain HTML in the header) include most vendor scripts. This is because * a) some of them are not r.js friendly * b) because they need to load before I even hit my $(document).ready (in jquerys case, for instance) * c) because using google apis you can hopefully have them be cached on the users side before having ever come to your site. So you've got a handful of &lt;script&gt; loads on your page. On of them is your loader or core or whatever you call it. That file essentially just waits for the dom ($(document).ready()), then starts loading in pages. A fairly easy way of dealing with loaded modules is to use an object like so (excuse the coffeescript it's faster and I don't have a ton of time to write this post). loadedClasses = {} filesToLoad = [ 'thisClass', 'thatClass', 'foobarHelper' ] require filesToLoad, () -&gt; for i, klass of arguments className = filesToLoad[i] loadedClasses[className] = klass startMyProgram() Then startMyProgram would do whatever it needed to, ie: site = new loadedClasses['controller/site'] site.render() Hope that helps! This way all your vendor libs are in global, but your actual program code is very segmented. Also remember in the actual "module" code, (ie: the file r.js includes), you can add dependencies. For example if I wanted to extend a object out of a shared base: define ["/shared/classes/settings.js"], (settings) =&gt; return class Settings extends settings Hope that helps! If the coffee confuses you i recommend either using the coffee site or "npm install coffee-script" and (even if you don't learn or use coffee) just seeing the js something like "return class Klass extends BaseKlass" compiles into. Essentially it just copies the properties of an object into a new object. Note that this way is highly unoptimized. For a production environment, I'd write a build script that would cat all the files together, minify, then serve them minified, bundled and gzipped. But that's the sort of thing that can be done to a massive application in the 2 hours before launch (ie: not the sort of thing you want to deal with while building the application).
It's cryptic? Really the only "cryptic" bit there is the function definitions, which you'd learn in the first 25 seconds of learning coffee. () -&gt; is exactly the same as function(){. doThing arg1, arg2, () -&gt; alert 'ima callback! doThing(arg1, arg2, function(){ alert('ima callback!'); }); Of course, the best way of learning is to just compile the coffee I provided into JS. Should be pretty clear what "for i, klass of arguments" is doing. The new keyword exists in JS, despite how little the average js coder uses it. I suppose no braces might be confusing for someone who _only_ knows JS? As far as programming languages go, IMO coffee is by far an away the _least_ cryptic. Try learning LISP!
My favorite approach nowadays is using the async library.
+1 for separating vendor dependencies. You can do them in RequireJS, but what's the point? Just causes more hassle. As far as correctly loading a lot of files, just chain require them... for instance, I usually put an "all.js" (or .coffee, or sjs...) in my module directories that includes all major components by name, so using it is something like require([ "models/all" ], function(models) { /* do something with models.course, for instance */ }) This way I can be sure that all of the needed model files are loaded, and it's much more convenient for accessing more than one model without having to require each separately. Of course, you're putting more dependency loading into a single call, but such are the tradeoffs.
Your README needs less random screenshots and more code examples. Particularly useful would be a side by side comparison of a LMD module vs. Require.js module. Does LMD come with an optimizer similar to r.js? If not, I don't see many people migrating over.
I think you meant to link to https://github.com/component/component. Can component be used on the client side as well?
Pretty neat. I'd love to see some scenarios I could use something of this sort
It depends on the libs you are using. I was struggling with this last month with a jquery/backbone/bootstrap app as well, but found use.js and that made everything work out really nicely. As long as your own code is require.js compliant, and your libs are friendly it is REALLY nice having all the dependencies managed with requireJS. https://github.com/tbranyen/use.js/
3rd party, leave as is if you can (especially if you link to then on s CDN). For your own code, depending on the size, I would concatenate and compress them. Had a small Javascript code base that was around 400kb and got it to 25kb. 400kb nowadays is no big deal, but 25kb for everything related to the application? Great. Even if you write them all separately (which is a great idea), you don't need to keep them separate when it comes to production.
&gt;it has fewer opinions about how I should implement things, and it has fewer syntax rules to restrict me This. You can be every bit as expressive with native JS and more so. If you get hung up on typing function a lot or some other keyword, there are many ways around it and resorting to a precompiled lingo just makes it harder for others to read your code... And isn't readability of the masses the point? Why use a niche dialect?
aside from that, catch key press for extra points :D
I know you're asking about design, but I ran some basic tests to see how it did. It doesn't remember values after you press =. I used this key sequence to test: 5 * 6 = / 3. It doesn't gracefully handle overflow. Try pressing 8 repeatedly. 
Ok. 
Oh, you created something you don't understand! Now you know what God is.
Code is a bit terse. All that is going on here is that on the change event for the input, it reads the files property for that input element (something new in HTML5), gets the file path and passes it to the FileReader object which loads the file then creates an image tag with src equal to the FileReader callback value.
 Calc.global.valuePast2 = Calc.global.valuePast1*1; Calc.global.valuePast1 = Calc.global.valueCurrent; break this out into a helper function. it's an anti-pattern to repeat that code so many times
Forgive me for commenting before checking out the code. Currently on my phone so it makes it tricky. The word calculator instantly springs to mind issues with floating point numbers. Depending on how accurate you want to be with this it may be fine as is. 
Correct me if I'm wrong, but IE9+ seems like a perfectly capable development browser to me. I personally use Chrome when I'm dabbling around, but JavaScript debugging in Visual Studio using IE makes my life so much easier.
I bet you say that to all the ladies.
Thank you for this one. Since I play guitar and sing in a choir, I always wanted an excuse to match chords ;-) /^([A-G]|[ACDFG]♯|[ABDEG]♭)(°|(d[io]m|ø)7?|([mM+]|maj|min|aug|)[67]*|)$/
Fibbonacci would be proud... (Try 1 + 1 + + + +...)
General programming: You don't need so much repetition. Glaringly obvious refactoring http://jsfiddle.net/Nha5Z/4/ Usability: it does not retain the old value. You have an unnecessary stack clear on = If I input `3 + 3 = (returns 6) + (returns 0) 3 (returns 3)` but I expected 9 Web dev: You've separated code concerns from UI/markup concerns very well. This allows you to change the UI without worrying too much about internal logic that performs the calculation. This will be an easy one to maintain and expand. Good job. JS: you are bundling everything up in a 'static' properties table of sorts. This is not wrong but these properties could be 'dynamic' and referenced internally from Calc. Your way you could never define more than one instance of Calc per page... for which there is no requirement so I suppose my comment is really grasping for straws... But for argument's sake: var Calc = function() { var _self = this; this.operand = "="; this.accumulator = null; this.sum = function(x, y) { return x + y; }; this.divide = function(x, y) { if (y == 0) { alert("Can't divide by 0"); return 0; } return x / y; }; this.multiply = function(x, y) { return x * y; }; this.subtract = function(x, y) { return x - y; }; this.calculate = function(currNumber) { if (!_self.operand || _self.accumulator == null) return; var newVal = 0; switch (_self.operand) { case "+": newVal = _self.sum(_self.accumulator, currNumber); break; case "-": newVal = _self.subtract(_self.accumulator, currNumber); break; case "*": newVal = _self.multiply(_self.accumulator, currNumber); break; case "/": newVal = _self.divide(_self.accumulator, currNumber); break; } _self.accumulator = newVal; }; }; var calculator = new Calc(); calculator.accumulator = 0; calculator.operand = "+"; calculator.calculate(1); calculator.operand = "+"; calculator.calculate(1); calculator.accumulator; //2 And so on and so forth 
Found this one quite complex, a good challenge, thanks again. /^([A-G]|[ABEG]♭|[CF]♯?)(maj|min|[Mm+°])?6?(aug|d[io]m|ø)?7?$/
you need to round your decimals i suppose. value = Math.round(number * x^^100 ) / x^^100 var result=Math.round(8.111111*1000)/1000 //returns 8.111 remember number of 0's is number of decimal places
[IE9 is not a modern browser](http://people.mozilla.com/~prouget/ie9/) [HTML5 Tests](http://html5test.com/compare/browser/ie09/ie10/chrome23.html) [CSS3 test](http://css3test.com/) All versions of IE are always the worst on the planet. Inept at best and years behind all others in modern standards and practices. Never, ever use IE as a reference for how things should work. 
Chrome tab crashes when you click on the preview image.
Looks neat, but the game state and logic seem to be very tightly coupled with the GUI. Reading a program's state from its GUI is very bad design. Ideally, the part of program that implements the game logic and state knows nothing about presentation. It should offer a clean interface which the GUI uses.
Yep. I still, almost without fail, get a few people a week asking me to write their regular expressions. It's an important skill to have.
Nice. When I press an operation button, please could you highlight that button until = is pressed? I'm not sure whether I've actually clicked something or not as I'm on a phone.
Pretty cool. I'm glad the ability to do this has been added in HTML5. Besides simply showing a preview, this could be used to manipulate the image completely on the client side. It's nice to eliminate a round trip to the server just to get the image data.
This will probably fit better in [/r/ProgrammerHumor/](http://www.reddit.com/r/ProgrammerHumor/)
I love the stunned look I get when I run a mad one line regexp. These tuesday regexp are excellent. I was presently suprised to see it on /r/javascript. 
Isn't E# a valid chord though? I know it's enharmonic to F, but in certain keys it would still be counted as E#, right? For example the [C# major scale](http://en.wikipedia.org/wiki/C-sharp_major) goes C#, D#, E#, F#, G#, A#, B#. So E#m at least could well be a chord in the C# major scale. EDIT: not that it really matters. I'm being unnecessarily nitpicky.
E# = F. I know that it exists, I just wanted to keep the challenge challenging
I feel like I learned a lot from this comment. Thank you.
I found it difficult that we had to match a subset. Leaving out synonymous chord names wasn't that difficult, but rather processing in my head what chords do exist but shouldn't be included.
Counter argument. I personally don't think it's a good practice to choose require/AMD and only use it partially. &gt; a) some of them are not [require].js friendly True, but to date I've always been able to find branched AMD alternatives to my favourite opensource libraries. &gt; b) because they need to load before I even hit my $(document).ready (in jquerys case, for instance) I don't see why this should be an issue if your dependencies are setup correctly. &gt; c) because using google apis you can hopefully have them be cached on the users side before having ever come to your site. Personally I don't like to assume users will have all my regularly used libraries &amp; frameworks cached. I also develop with the cache disabled as much as possible to help my sanity so maybe I'm biased but that assumption is a little counter-intuitive to me. This maybe OK for jQuery core but the more scripts you leave out of AMD the greater the likelihood things won't load correctly. &gt; This way all your vendor libs are in global, but your actual program code is very segmented. *-twitch-* On large scaling projects that will potentially have a few hands touching it I'm very vary that what I define as $ can be very different from what others may define as $. I'll concede to a few things that have to be committed to the global scope but not if it's avoidable. &gt; Note that this way is highly unoptimized. For a production environment, I'd write a build script that would cat all the files together, minify, then serve them minified, bundled and gzipped. That's exactly what [RequireJS's optimization tool](http://requirejs.org/docs/optimization.html) is for so keeping things properly loaded via require's AMD helps streamline the process.
Sorry about that - I'm a drummer, so I don't often have to deal with chords.
Seems like you're trying to hook readers simply with a blurb. Try getting some fucking content.
I agree with you. This is good advice. I will consider refactoring the code.
here's the top of our 'all.js' ` define(function (require) { var $ = require("jquery"), _ = require("underscore"), Backbone = require("backbone"), Debug = require("mentis/core/utils/debug"), FlexView = require("mentis/core/views/flex"), Application = require("mentis/core/application"), FastView = require("mentis/core/views/fast"), Event = require("mentis/core/events/event"), Intent = require("mentis/core/events/intent"), Interface = require("javascript/extensions/interface"), Decorator = require("javascript/extensions/decorator"); `
I like how the physics pay attention to where you grabbed the elements when dragging and throwing by putting a spin on them.
Using this right now in a framework built off Backbone, but modeled after Flex. This class can hook any function or property either before or after their original function call, we use them to hook `render()` methods in components.
It's more idiomatic to write: var calc = { buttonPressed: function() {} } Repeating the `calc` is line noise (and I'd argue actually less clear). var calc = {} calc.buttonPressed = function(){} I can't see any advantage to this: var calc = { globals: {a:1, b:2, c:3} } compared with: var calc = { a: 1, b: 2, c: 3 } The reason being that the values *aren't* global. These are just called *members*.
Very slow...
I'm really enjoying Regex Tuesday, so thanks for these; I have a suggestion to improve the interface: Every week I find myself doing the same thing: opening the inspector and setting .passed to display:none. Then the list of tests shows me only the failing tests, and I don't have to scroll past the easy ones to see what I'm missing. It's also really satifying watching the list collapse down to nothing. If the page had a checkbox like 'Hide passing tests' which enabled this, that'd be stellar. That said, thanks for your work! My entry: /(([ACDFG]♯?)|([ABDEG]♭?))(\+|°|M|m|dim|aug|maj|min|dom|ø)?[679]?$/
 method # That doesn't work method() method argument That makes perfect sense to me. But then again i've read the coffeescript source code... Also I really _wouldn't_ want "method" to invoke method. "method" is a function, "method()" is whatever "method" returns. method argument secondArgumentExceptItsNot method argument, secondArgument Right, arguments are comma separated... Why would this change? method key: value While this does compile sensibly, I would never write that. Just because a language lets you do a thing doesn't make it smart at all. method( key: 'value' otherkey: 'othervalue' ) Makes sense to me.... # Some cryptic syntactic sugar {foo} = foo: bar Would you ever attempt to do what you're doing in JS? Overriding scope works -exactly- like it does in JS, so I have no idea how thats a hit against CS. Why would arrays"drop syntax"? Eh, shrug. You've got some weird ideas about what coffee is supposed to be doing, or what its goal is. I've been using javascript for about a decade now and not a single time as coffee confused me other than the first week I was learning it and the whitespace difference between "method()" and "method ()". Anyways, I'm not about to argue it has the same rules as anything else. Because it doesn't. What I _will_ argue is that any (JS) programmer should be able to read my OP and understand exactly what's going on.
Your functions are fine, but "print" isn't valid JS that I'm aware of. It may work in ActionScript, but I'm not familiar with that. The following should work like you intended. ops = [function(){alert("0");}, function(){alert("1");}] ops[1](); // alerts 1
Is the code sample above the code you're working with? I pasted my snippet into Scratchpad and it seems to work. if you're defining a function as part of an array, it's implicitly setting it to: ops[0] = function(){} defining a function on its own isn't valid unless you immediately execute it since there is no handle to call the function in the future. function(){alert('1');} gets /* Exception: function statement requires a name */ but (function(){alert('1');})() or var func = function(){alert('1');}) work fine.
Don't knock it till you try it. A few months ago I was all about using JavaScript instead of coffeescript. Then some of my coworkers convinced me to try it. We haven't looked back. As long as you build automatic compilation into your workflow the benefits of coffeescript greatly outweigh the drawbacks. 
I'd continue replying but since I disagree that it's "shitty" as it currently pays my rent, not sure we'll get anywhere. Also, people down voting me charming. I use { } and [] even though theyre not needed, due to the reasons above. I've never run into the "scoping problem" on several projects with 6 contributors. Probably due to the fact that we understand the javascript coffee is writing.
I need to set up my web page so every 1000th user gets that.
This fails on 5 tests
Crockford's been one of JS's supreme pontiff's for a while now. Visit http://crockford.com/ for fun and profit
Thanks for the suggestion - I will introduce a checkbox.
Yeah and whats wrong about that? btw thanks for summing it up..
Cool, how about one that works on all sites? :)
&gt;"No one else is doing it" is a pretty weak reason not to do something. Except when you're trying to define standards and consistency.
Got it. Thanks for all your help.
Hmm I am pretty sure as a Uni Course your meant to do this by yourself, what if they ask you what/how you came to build/design it as you have or even if someone in your class uses the same code (normally a 0 mark and quiet a stern lecture. But as general theory goes, first work out what you are trying to do. So really the rules of the game, after that you can work on a simple UI that takes it in turns to place your "chips", then you need to have a system that will check the conditions to see if they are met/no more moves are available and what to do if that happens. If you are allowed to use jQuery I would defiantly recommend it as it will take some of the time out of development/ give you some simple animations to drop the chips in/highlight them on win etc etc. Sorry if this seems a bit rambley or is no use to you what so ever, but (cant believe I am using a bible reference) "give a man a fish and you will feed him for a day, teach him to fish and you will feed him for a lifetime" Bit of extra elbow grease now, and a better programmer you will become.
If it helps you: the fish thing isn't a bible reference, the actual source is not clear, some claim it to be a Chinese proverb (maybe by Lao Tzu), other sources claim it's from some writer named Anne Isabella Thackeray Ritchie in her novel, Mrs. Dymond.
Wow, never really looked into it and just took it for granted as a Christian/bible thing, Great info thanks!
/([CF]♯?|[ABDEG]♭?)(dim|dom7|\+|°|ø7?$|aug|M)?m?(aj|in)?6?7?$/ Another 62-symbols solution. Can't beat it
if you are just trying to show them some code and what happens after you compile it, it is done server side but have you looked at codepad.org? Or are you trying to show how the c compiler works?
And JS pays my bills. And PHP and VB.NET pays others' bills. Whether or not a language makes you money doesn't mean you can't criticize its deficiencies. JS's implicit type conversion and global-by-default variables were bad ideas, for instance, but Coffeescript's attempt to solve this has simply produced far more warts, to me, and I can simply use jshint to find bad code before commit.
You might check [Fabrice Bellard](http://bellard.org/)'s projects. Among other things, he's written a [bootable version of Linux in JS](http://bellard.org/jslinux/) (be sure to check the _technical notes_ link at the bottom), which includes his [TinyCC](http://bellard.org/tcc/) compiler.
"Also, underscores are annoying in general since they usually count as word boundaries. So, double clicking such an identifier or using ctrl+shift+left/right won't select the whole thing." I've never encountered this in any IDE or non-IDE editor (and I've used a lot), where are you seeing this? I have seen this with dashes (lowercase-with-dash), which is why I absolutely hate dashes and can't stand when people use them instead of underscores.
Someone asked something similar on SO: http://stackoverflow.com/questions/6142193/c-interpreter-written-in-javascript
It's a business application so we don't want Google inside it, its behind a wall.
thats an amazing project, but I only want to have a textarea where people can code and see the results instantly, without the drawbacks of having to deal with the compiler.
Hah, I did play with making it work on less specific selectors, but with duplication I got bored too quickly. I did however, put the selector at the very end of the bookmarklet so you could easily modify it to your own ends. :)
You could also write the binary to disk using the HTML 5 file system API, then redirect the browser to the uri for that file - I think that would give the user the option of running or saving the file at that point.
Will this fit your needs? http://codepad.org/
It's not as difficult as all that, just monotonous, the real problem comes in when you don't have lex or yacc, so you have to actually write the lexer by hand. Maybe I'll try to figure it out later. Until then http://codepad.org
I included Moment.js for date parsing. Just a heads up
An alternative starting point would be to go back further and look at the ancestor of TinyCC, [OTCC](http://bellard.org/otcc/). The code is remarkably short. http://bellard.org/otcc/otcc.c (3,301 bytes) It's easier to read in this form http://bellard.org/otcc/otccn.c (15,000 bytes) It's a C subset and outputs 386 code, but it is small enough that relatively quickly converting it to something else is feasible. At only 630 lines of code You could possibly port the entire thing to javascript by hand. A nice weekend project that will do considerable sanity damage. 
Wouldn't [Jison](http://zaach.github.com/jison/docs/) work? 
Yeh I know :D
Great, thanks!
Dear lord, I hope browsers never start saving binary stuff to disk using JavaScript without the user allowing that.
Are you saying that isProbablePrime() is asynchronous? If so, it probably includes a callback parameter. Otherwise, I'm not sure how it would work.
I agree with TheMiddleManz, I was vehemently opposed to CoffeeScript but had never tried it. Once the team I'm on built a custom workflow with grunt that eliminated the need to think about the compilation step, and files just auto compile on every file system change, it became a huge productivity boost.
Browsers do this, for example. E.g. you're browsing some API and want to copy some parameter name or something like that. If there are underscores, it won't be as convenient. Text fields (some search box, the address bar, etc) also usually behave like that. The primary editing component of an IDE (or a semi advanced text editor) usually uses slightly different language-dependent word-boundaries, but usually they aren't perfect.
It's been reported that Googlebot will run javascript: http://searchengineland.com/google-can-now-execute-ajax-javascript-for-indexing-99518 http://www.webpronews.com/matt-cutts-talks-about-how-google-handles-ajax-2012-04 How effective and how often its ran? Who knows...
NO no no... for some little hokey application .. sure, whatever, queue up your resources and optimize your load and overhead, but in a more complex and intricate environment, this simply will cause massive headaches.. Applications, especially ones with specific work flows powered by JS, that link to specific controls and data upon initialization could be a pain in the ass to wire events and relationships.. This can be useful for small things, but dont use this if you are looking for approaches for something large scale. Lazy load can sure be used for content feeds -- fetching objects, but when it comes to your front end layer's component and controllers/event handlers, dont lazy load this stuff...
stepping_isProbablePrime(t) is the asynchronous version of isProbablePrime(t). It does have some sort of callback implemented within the structure its called from, and that's where I get confused.
Sorry about the sloppy code, I threw it together really quick to get an example for my question. But I will definitely use what you've told me for future reference. 4.) It takes too long to expect no browser message, since I'll be calling it anywhere from 1-1000 times. However, in the RSA.sample1.html, it is being used asynchronously, this removes and browser prompts and/or freezing. This is done with the call stepping_isProbablePrime(t) which is where my uncertainty comes from. 5.) I'm sure this solution will work, but it will not prevent the freezing. I made a mistake in my post, I wasn't clear, I should have mentioned I was looking to find out how to work with stepping_isProbablyPrime(t), the asynchronous version of this method. This method will work in the background completing all the computations and not prompting or freezing the browser. 6.) Hmm.
What are you looking at?
Ah, interesting. (I recommend posting on stackoverflow with a question about how you are supposed to call stepping_isProbablePrime (i.e. what do you pass into it).) If you need help hacking at this on your own, feel free to PM me. :)
Doesn't really apply here, but I've found [Lo-Dash](http://lodash.com/) to be a great replacement for Underscore.
Great improvements.
jQuery expression. $('.data input').each(function(index, field) { $(field).attr('name', $(field).attr('name') + index); });
Awesome, thanks. That certainly is much more concise. I have jQuery as the next thing on my list to focus on. Hopefully I'll be writing code like this soon.
Also look up "hoisting" in JS and look up the "onevar" rule which solves that problem. Your code is somewhat vulnerable to hoisting. Try out the JSLint tool as well to learn other best practices. Although it's worth noting that some of the things JSLint bitches about by default are not entirely agreed upon by the community as good practices.
&gt; &lt;p class="slogan"&gt;Only JavaScript … Always JavaScript&lt;/p&gt; Erm...
I appreciate this, exactly the reason why I posted this. I especially appreciate your nitpicky point. If I ever hope to do this professionally, then I can't be aggravating co-workers with my code. Thanks again **EDIT: Hijacking my earlier comment to give everyone an update:** I revised the code last night after reading everyone's suggestions ( You guys rock). http://pastie.org/5522943 I understand that it is probably not perfect, but it is certainly a vast improvement. Hopefully a month from now I won't be proud of this at all because I will have gotten significantly better. 
Mine is here: https://github.com/capaj/Weighted_voting_for_building_owners/blob/master/web/Scripts/BuildingOwnersVM.js It is utterly terribly written KnockoutJS view-model but it worked at the time and that was all I could do.
This makes no sense for (var i=0; i&lt;data.length; i++ ) { var nameLoop = function() { ... } nameLoop(); }
without jquery: Array.prototype.forEach.call( document.querySelectorAll('.data input'), function(inputEl, index) { var uniqueName = inputEl.getAttribute('name') + index; inputEl.setAttribute('name', uniqueName); }); 
The nameLoop function shouldn't be there at all. Also, *threw
yep, I know emscripten, I put it in the initial message. I was asking for somebody who already did it because dealing with emscripten is not so easy.
Everyone I urge you to not use this-if we all put our minds together we can kill IE! Only thing you have to do is: ignore IE issues. That and one small thing-force all your clients to use Chrome...that might be a wee little problem...uhmmm ok.
I saw that and was experimenting but a few probs with elements extending the page size to infinity, LOL!
You don't need parseInt where you're using it. It's already an integer. 
One I was proud of, although now I shake my head in shame of "what the hell....", was an approval grid / contact search control in JavaScript. The list of required approval roles would change depending on a bunch of inputs/rules on the page. Now, looking at the code - and how horribly coupled the rules are to the grid, and the grid is to the contact search dialog. It was so tightly coupled that when my work decided 'we want to use this search dialog on other screens' - it was a total nightmare to get it working. That said, the end result was still pretty good - even if the actual implementation is total shit. Especially considering that at that time, my work had a 'don't use JavasSript' mindset. It really sort of sparked my interest in doing client-side programming 'the right way', learning from my mistakes and setting out to build our own in-house JavaScript framework for building apps/widgets, it's main thing was pub/sub communication between widgets, common elements/functions/utilities/etc. The framework I built as a result of that, has been used in 3 major projects since then + countless small ones. It's getting scrapped/re-written soon - my overall understanding of programming in general has improved a great deal since then, and it's time to get a fresh start for my next big project. tl;dr -- The code you are proud of today, will shame you tomorrow. 
Glad you brought up these points, I was about to comment on nested function definitions and what he should know about closure. Closure is a BEAUTIFUL thing, and its what helps makes JS an awesome language. 
When does `changeImage()` run?
jus the "src", so when the user sees the image change they have to click on it to change it back to the original source
what is S.O.S and where is your fancy script all I see is html. You talking about php and java? what does that have todo with javascript? 
This is the code I am trying to apply to a standard form,any suggestions?
Not everyone can handle getting critiqued. I like your attitude.
&gt; The code you are proud of today, will shame you tomorrow. Sooooooooo true. That saying unfortunately restrained me from having a blog for a long time, as I know very well that what I might say today, I will find stupid tomorrow. I just did not want to pollute the web with these stupidities, but in the end I decided that I should still give it a go. I find that blogging is a very good way to continue to learn about your trade, so even if your blog is of little use to anybody, it will be immensely useful to you.
Not related to the way the code is written, but to what it does. If your backend is PHP (I dont know about other languages), do you know that you can just add [] at the end of your input names, and they will post as an array? &lt;input type="text" name="foo[]" value="a"&gt; &lt;input type="text" name="foo[]" value="b"&gt; &lt;input type="text" name="bar" value="c"&gt; in PHP will result in array( foo =&gt; array( 0 =&gt; a 1 =&gt; b ) bar =&gt; c ) Edit : formatting
If you can't fit your function on one screenful of code, there's a good chance you need to refactor it. It's not a hard-and-fast rule, but it's a good indicator.
&gt; "how is that done? Do I *really* need this?" If more people were like this, mainting webistes would be so much easier, but yeah, libraries make things easier. Including making a mess. That becomes very easy aswell.
in a month youll be embarrassed by it.
That's just such a generic rule to have. I mean, with screens having different sizes and all :) I think its a better approach to have a function doing one thing, and taking how many code of lines it requires to do that thing. Sure, if it needs like 1000 lines yea...
I suggest you look at [**Highcharts Documentation, section 4.1**](http://www.highcharts.com/documentation/how-to-use) which contains example code for doing what you are. It may take you a while to understand what the code is doing and how you must adapt it, but the code under point 3 processes the comma separated values like you have. If you cannot get it to work, I suggest you find a way to put the code in a [**jsfiddle**](http://jsfiddle.net) then link it asking for assistance. 
I didn't use dependency injection, since it's just a simple demo. Where would you suggest to put this? In a service isn't an option, and since the event gets pushed from the backend, having this in the controller seemed the logical place. Any suggestion are welcome :)
At least one of us cares enough to keep track.
[Reddit Enhancement Suite](http://redditenhancementsuite.com)
The first thing I'm proud of was a userscript, written for a browsergame I used to play, which was used by quite a lot of people.
Thanks for actually bothering to help ! I've gotten that far, the problem I've got though is that the example in 4.1 is a bit backwards from what I want to achieve I've tried to fiddle around with the code to use the first column as the series name and the second column as the data but I've not really succeeded. Here's what I've got so far, though it doesn't work. http://jsfiddle.net/4mz6T/ The data.csv loads the sample data I posted above.
Please do yourself a solid and read this from cover to cover: http://eloquentjavascript.net/contents.html And after that watch/complete: https://tutsplus.com/course/30-days-to-learn-jquery/ and quite possibly: http://learncss.tutsplus.com/ If you want to make a standard form easier to read on mobile you likely will just need some css to re-arrange it.
Why wouldn't a service be an option? A service could be anything. You could have it return your event source object, or wrap it even.
&gt; When a user clicks on the button, the images change at random intervals What do you mean "change at random intervals"? Intervals of time? Does this imply that multiple changes may occur in response to a single click?
True, and its very important to pass in 10 to parseInt. parseInt("some number", **10**); Need to make sure you are doing base 10. It works in base 8 if not specified I believe? That can cause some seriously annoying bugs.
The base 8 stuff is if you pass in a string like "012" and you end up with the integer 10, because the leading 0 triggers octal parsing mode.
Since no one has pointed this out yet: this can be simplified, $(document).ready(function () { extend_names(); }); To this, $(document).ready(extend_names); Even better, unless you're calling it from somewhere else you don't even need to name `extend_names` in the first place. 
The gravity is set to 5 instead of 9.8 for some reason
The one thing that I don't really like is the made up attributes. (eg box2d-shape should really be data-box2d-shape) Other than that, nice work
I'm only pointing this out because a lot of people have no idea how to structure their Angular apps, as it's not a commonly used tool yet. If this were an example in some more widely known tech, then the structure wouldn't have been important at all.
Your first if statement is broken. JS expects: if (expression resulting in a true value) { code to execute... } I think the closing script tag in the code also mucking with jsfiddle. Finally if everything went correct, chart has the data, but no way to display it.
The first piece of code I was proud of was something that computed the specificity of CSS being applied to each individual element without the need of a browser. It was a fucking huge associative array. It was written for a unit testing environment and worked great. Thinking about it now I realize it doesn't take inheritance and !important into account. I'm not proud of it now, but it's pretty goddamn useful (to me) since I will be using it in a later project.
The real test is to come back to some code you wrote a year from now. Ideally, you will be horribly embarrassed by it. That's good, it means you've gotten better since. Alternatively, you'll be amazed by it, and will find it wonderfully clever. That's less good. 
Might as well cross-post from HN... This is an "almost-1.0" preview release -- so if you've got a Backbone app, I'd appreciate it if you'd take the time to upgrade, and report issues and concerns. Some of the more significant updates are: * `listenTo` and `stopListening` for easier event unbinding. * HTTP PATCH support, for partial updates. * collection.update(models) for "smart" add/remove/merge in one method. * Events.once, a-la jQuery. Also jQuery-style event map syntax. * Lots of performance tuning for triggering millions of events per second (should you find the need) in modern browsers. http://jsperf.com/events-vs-events2/3
Looks awesome, thanks! The PATCH support is huge for us, we have some larger models and full-model updates could be unwieldy.
So, is pasting puzzles you've found in Javascript books a new thing for this subreddit? Downvoted.
I came up with this one as far as I'm aware
And what book do you think I got this from? I don't have Dave's if that's what you think
You realize you're in the JavaScript sub, right?
Glad to see your comment. This was my planned learning approach and it is good to get some validation for it.
If you should notice improvements or (gah!) huge problems with that test, please feel free to edit it. Also, I don't have IE, Safari or Opera handy. Results may vary for them. [edit: Also an interesting test of $().toggle() that [James H added](http://jsperf.com/various-methods-of-hiding-content-after-dom-ready/3). It performs even worse than $().hide().] [second edit: This has turned into a really interesting discussion and I'm learning a lot from it. [Just wanted to say thanks for the comments, tests, and revisions folks.](http://i.imgur.com/dlUc6.jpg)]
Almost--I should have been more specific. It's not a tooltip sort of thing but rather a div element that will float to the right and slightly above, wherever the "see also" element is. I figured I could work out how to set the offset from the original, so long as I could make it align vertically. They're both in the same parent element/container, yes. However, I can't make one contain the other easily because it's hosted on Tumblr, so the content is supplied on their server side and I never know where exactly it will be, and I want to make sure that my client doesn't have to worry about manually adding markup to raw text when he is posting. On Tumblr, paragraphs are automatically formatted with &lt;p&gt;&lt;/p&gt; so I can locate the "sea also" paragraph by content with consistency. I imagine one way I could do this is iterate through all of the divs that have the "see also" content and then dynamically write a social media array div into that div, but I was wondering if there was a simpler, more CSS-centric JS solution. EDIT: testu_nagouchi suggested position(), which should be exactly what I need. I'll try to figure out the implementation from here, but if you have any advice to give, I'm all ears. Thanks!
This is good to keep in mind: just because you are using jQuery it doesn't mean you have to do every little thing using the most convenient utility method. I would assume the reason it's so slow is that calling $().hide() sets off a longish chain of function calls. Notable stops are [here](https://github.com/jquery/jquery/blob/master/src/effects.js#L456) where the effects are handled and [here](https://github.com/jquery/jquery/blob/master/src/css.js#L53) which does the actual showing/hiding. This brings up another thing to keep in mind: all these examples are not necessarily equivalent. $().hide() is a very generalized method; it handles animations/transitions, it detects whether the element is already hidden, saves state, etc. This saves you the effort of having to set up a special "hidden" class and keeping track of what it's been applied to, etc. You can just call hide()/show() without too much thinking. A general rule of thumb for jQuery is just go ahead and do the most convenient thing that applies, as even though it's comparatively slow it's probably taking care of a bunch of stuff behind the scenes. If for some reason you need to do DOM manipulations, animations, etc more quickly then you'll need to move lower and handle it yourself which isn't too difficult. For basic cases show/hide or setting the display property with .css() should be plenty fast. You should try to be aware of what jQuery functions are doing behind the scenes so you can make judgment calls about what's appropriate to use. I don't think it affects the results much, but the $(document).ready() framework in your tests is basically extraneous.
I agree with all of your points (including the $().ready() call - it was the mindset I was in). In the [documentation](http://api.jquery.com/hide/) it stated that &gt; With no parameters, the .hide() method is the simplest way to hide an element: &gt; $('.target').hide(); &gt; The matched elements will be hidden immediately, with no animation. This is roughly equivalent to calling .css('display', 'none'), except that the value of the display property is saved in jQuery's data cache so that display can later be restored to its initial value. It got me wondering if it was equivalent to $().css() calls and others while I was at it. Perhaps the overhead is from the data cache.
really you shouldn't be using jQuery if you want it fast. Libraries always slow things down when compared to custom built code. You've got to ask yourself, is the performance increase of doing it manually worth the time it takes me to invent/upkeep exactly the wheel I need?
I agree and do know this. I have used $().hide() and it's ilk out of convenience plenty of times though. To me, quantifying that difference was interesting.
You might be tempted to try the popover plugin from over at bootstrap - http://twitter.github.com/bootstrap/javascript.html#popovers It should be an easy enough task to just extract the plugin from their git source
Probably a very wise idea... 
Ah alright. So this is probably it. var A = B = { v: 0, valueOf: function(){ return this.v=1-this.v; }}
it's that .each() that's slowing it down. I bet this code will will be pretty close to native: $(document).ready( function () { for ( var i = 0; i &lt; thePs.length; i++ ) { $(thePs[i]).hide(); } });
~~The only $().each() is in the teardown~~ (unless there's an implied one from just handing a result set to $().hide() that I don't know about), where it's not counted for the testing. [I'm already a fan of for over $().each().](http://jsperf.com/fn-each-vs-for) [edit] I double-checked and I didn't even use $().each() in the teardown. $('p').removeClass( 'hidden' ).css( 'display', 'block' );
I certainly wouldn't put $().hide() into a loop, but the jQuery portions of these tests are applied to the selector's result set completely. I'm assuming that the underlying code *should* be optimized some and I figure it's a common use case.
Which .each() are you referring to? $(document).ready( function () { for ( var i = 0; i &lt; thePs.length; i++ ) { $(thePs[i]).hide(); } }); I would expect this to be about the same as thePsJ.hide(), adding it to the benchmark seemingly confirms that; it's actually slightly slower which makes sense.
Oh, that's interesting. Good catch. On with the upvotes!
I'm afraid it is even worse in that scenario, and I included the length as a predifined copy: http://jsperf.com/various-methods-of-hiding-content-after-dom-ready/6 Original gave me 94% slower than native JS, this edit gave me 98% slower. EDIT: Looks like I was a little slow on this one. Now I'm more curious how jQuery made $().each() faster than a regular loop, but also how they failed so miserably in simply setting a style.
showHide() is already using a loop to do the actual iteration through the elements; so this is just duplicating that effort.
Yep. [thejsjunky](http://www.reddit.com/r/javascript/comments/14tloc/i_knew_it_was_slow_but_i_wasnt_expecting_jquerys/c7gb196) has been really getting into the nitty-gritty of it. It's been interesting to look at where they are "dog fooding" their own stuff and when they resort to native code.
I'd say Reddit is pretty feature-filled and has large chunks of elements/content. It's running jQuery. I've worked with things that end up having a lot of JS drag from a lot going on. Knowing what performs helps, IMHO. 
:)
&gt; Now I'm more curious how jQuery made $().each() faster than a regular loop They didn't. There's no .each() happening here.
I'm a fan of the loop style: var iterator = myArray.length; while (iterator--&gt;0) { ... } ...for readability if you can get away with going from last to first element. To me, it's a much easier to read format than the typical 'for' loop. Visually you know it's going from the iterator value to 0. forEach is even better.
It's muuuch easier now with the querySelector native methods and such. In past years it could be a real pain in the ass to traverse the DOM. Now is a really good time to learn!
Your flair threw me for a loop... I thought, "Who down voted this to 0?"
&gt; Also an interesting test of $().toggle() that James H added. It performs even worse than $().hide() Yeah, if you look at [toggleClass](https://github.com/jquery/jquery/blob/master/src/attributes.js#L112) you can imagine why that might be. It uses .each() to iterate over the jQuery object where .hide() uses a loop. So that adds at least an extra function call for each element, plus it has to do all kinds of processing on adding in and removing classnames...also as you can see [here](https://github.com/jquery/jquery/blob/master/src/attributes.js#L127) it creates a new jQuery object for each element just for usage inside the iteration. 
It ultimately depends on the library. jQuery is designed for ease of use, fast prototyping, and browser compatibility. That's why performance is bad, because it is not a priority (which is exactly why jQuery is so awesome). If the library is designed with high performance in mind, then it may have algorithms implemented which are more intelligent than what you were planning to do. String searching is a good example, where most programmers attempt is also often the slowest. It all depends on the library.
This is how Family Guy flashbacks are made.
Love it. I quickly tire from the plethora of libraries which circulates through here. Wouldn't mind seeing some submissions primarily about JS, instead of yet another announcement for some webpage framework. I mean, you can only keep up with so many of them. Another pet peeve of mine is the seemingly compulsory assignment of ridiculous, non-descriptive names to every project with more than 10 lines of code. Each to his own I guess...
It's not that `.each()` is faster than a `for` loop. The difference here is that the loop version is calling the jQuery constructor in each iteration. That's what is slowing it down.
Love it!
If you're really interested in speed, try iterating with splice() http://jsperf.com/various-methods-of-hiding-content-after-dom-ready/8
This is frigging awesome. "Cross-domain grids with Django, Bootstrap and Squish."
Done! It stays checked between page loads, too.
Done: http://jsfiddle.net/neuroflux/PNJKR/19/ [edit] Better Version http://jsfiddle.net/neuroflux/xWrsu/7/ 
Awesome and funny! Make a novelty website out of it?
&gt;Remember the time when I met Ben Stiller in the mens toilets? &gt; &gt;[Peter]: Hey Ben Stiller, what are you up to? &gt; &gt;[Ben Stiller]: Eating &amp;#3232;\_&amp;#3232;
Thank you. The css is ready to use , I just didn't want to put it up. 
http://i.imgur.com/y3Qlg.gif
I'm looking into things like backbone/ember/angular/etc for my next project at work. So far I've given a pretty good luck/done some demo apps with Ember and AngularJS, looked a bit into Knockout - Backbone is on my list soon of 'things to check out'. But, could someone give me a '10 second sales pitch to why use Backbone? 
You could store the alternate image in a data- attribute right on the image, to reference:, i.e. &lt;img src="" data-alternate="/img/other-image.jpg" /&gt; Then, in jQuery, something like: if (....) else (....) $('#my-image').src = $('#my-image').data('alternate')
This reminds me of Alain Sokal hoax and the Postmodernism generator.
Yeah, OP could use said frameworks to through together something that has a bit of bullshit docs, description, etc, and link to the dependencies with big ole buttons to make it seem legit at a glance.
A minor correction -- Spine's MVC and Backbone's MVC are structurally the same. If you add a line of code: Backbone.Controller = Backbone.View; ... they'll even be named in the same way ;)
But Spine has separate Controllers and Views, wouldn't that mean that the logic in Backbone is also managed in the view? Furthermore the Model in Spine not only represents a single object but can also be used to interact with the collection, whereas Backbone has another object type for a collection.
Damn. That blows the doors off of everything else. Thanks!
500 internal server error
whole site is down from where I am sitting, including http://thomaspark.me/ Internal Server Error The server encountered an internal error or misconfiguration and was unable to complete your request. Please contact the server administrator, webmaster@thomaspark.me and inform them of the time the error occurred, and anything you might have done that may have caused the error. More information about this error may be available in the server error log. Additionally, a 500 Internal Server Error error was encountered while trying to use an ErrorDocument to handle the request.
Woah. Why is that so fast?
&gt;library names that i pulled out of my ass I'm pretty sure Ricochet, TopHat, and Wombat already exist. Flenser would be a great name for a screen scraper. Frickulous is going to be the name of my next project basically no matter what it ends up doing. 
hi, thank you for your response any feedback is greatly appreciated, if you have suggestions on improving my post it would be much appreciated
I mean performance wise, it runs at like 4fps. Choice of gravity is completely arbitrary anyways, even though box2D uses metres for measurements since you still need to define how many 'pixels' a metre is, and depending on this choice what feels natural can vary wildly.
A few tips: - Your question is rather vague. - Don't put code in your post unless it's really short. Format your code properly. Any code longer than a few lines you should put on jsfiddle. - The code you posted doesn't make much sense...
Your right, but the issue is that it being a Library means it's designed to support several theoretical users and not just your use case. 99% of the time these features to support other potential users means that it's going to be slower than if you'd of coded it for just yourself, provided you knew all the tricks the library architect did. On a really well designed library this means a very minor performance gain, but it again comes back to my original question. Don't get me wrong I like jQuery. But I kinda laugh to myself whenever I hear people complaining about performance or using it inside of a HTML5 game.
The splice there is pretty much extraneous. var l = thePs.length; while(l--) { ps[l].class += ' hidden'; } performs just as well, or even better.
Melkor, Morgoth... Hobbit's coming out soon.
The biggest improvement you can make to your original is caching the value of .length. JS engines are actually getting better at optimizing these things, but it never hurts to help it along. [Converting your original loop to a simple while(length--){} will do really well.](http://jsperf.com/various-methods-of-hiding-content-after-dom-ready/9)
thanks i think event.value is the final out come which is basically the user filled out filled concentenated together, so for example 0012-123456-111012222
Am I right in thinking that, aside from the .length, the while() is reducing the number of operations in the looping evaluation? Going to just a type-coercion from (type-coercion compare type-coercion)?
Premature optimization is evil. I wouldn't recommend people optimize too early at the cost of productivity. Secondly, you can't begin optimizing until you are actually measuring. The latency of other parts of your code may have orders of magnitude performance impact. 
I think many people underplay how important websockets is. It is the only thing out there right now that has the potential to completely change the internet as we know it. Kinda like comparing the internet of the 90's to now, it will be cool to see how it all comes about! It seemed like you were coming from a jQuery centric point of view because of the way I stated my response when I really was never talking about jQuery or any library for that matter in the first place. The thought of jQuery or any other library being a more important client side tool than say the tools that make up the language of JavaScript itself seems completely backwards to me :-)
I see lots of value in knowing what habits will have a dramatic impact on performance. I've seen situations where pervasive shortcuts and conveniences can make optimization a complete pain (especially with things such as SQL). I don't think the entire focus should be optimization or that it should be segregated to an individual step. What I consider well-written code is at least aware of it along with readability and maintainability. Isn't performance part of productivity after all? This was a worthwhile exercise to me, but I'm pretty open-minded when it comes to technology. I tend to be leery of dogmatic sayings such as "______ is evil".
Personally, I think this is way too hard to read and understand. Maybe if "obj" had a better name, it would help, but it took me a couple minutes to understand how this thing works. Also, if you're using Underscore.js, take a look at [_.uniq](http://documentcloud.github.com/underscore/#uniq).
Here's a solution that *may* be somewhat reasonable in this case: function eliminateDuplicates(array) { var len = array.length; var out = []; var seen = {}; for (var i=0; i&lt;len; i++) { var key = JSON.stringify(array[i]); if (! seen.hasOwnProperty(key)) { seen[key] = true; out.push(array[i]); } } return out; } This has its own caveats as well, as equality of JSON representation is not exactly the same as any other kind of equality either, it just may be less surprising. The upcoming [Sets](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Set) will be the most proper answer.
reddit doesn't rely very heavily on jQuery. It seems to me that it's mostly used for responding to submitting comments and clicking tool links to do lightweight DOM manipulation and handle ajax calls.
Regarding using jQuery custom events, the Backbone Global Event Bus is useful because it allows you to be less coupled to jQuery; part of the beauty of Backbone is that it utilizes jQuery so sparingly. Most people were just creating their own event bus anyways; having it as part of Backbone just canonizes it and brings more awareness of Backbone.Events to people who weren't doing it, which is a good thing.
Basically. I used xor to just toggle between 0 and 1 to ensure there were never any precision issues accumulated.
Nice feature. Next thing to work out is the extra space left by the hidden tests. Looks to be caused by extra empty dds between each set of tests. 
I think we should get together and come up with some of the most fun "puzzles" we can come up with. I'll start: Number.prototype.times = function(a) { return this * a; } 2.0.times(4) // 8 2.5.times(4) // 8 3.0.times(4) // 12 Weeeee!!!!!!!
I like MDN, but I didn't like this list of 10 things developers should know about MDN. For example why should I, as a developer, know "over 4.5 million page views and 2 million visitors per month."? How does that help me?
This uses a JS object as a hashtable. It's probably reasonably efficient, but really you don't know, because you're not in charge of the hashtable implementation. For a million strings, will this even work? And of course it will only work on arrays where every value is a legitimate key. If the source array contains nulls, for example, then I think the result will end up containing duplicate null values: because obj[null] is undefined, every null gets copied into the output.
I honestly did not notice that the last items in the mash-ups were made up names. Not sure whether that reflects well on you, or poorly on the Javascript community. Next up: A Markov-chain text generator that creates Github projects for each of the made-up frameworks?
I really wish JS had some borrowed more from languages like Perl. This is the equivalent in Perl: my %found; my @unique = grep { ! $found{$_}++ } @original;
Damn, that's a fine effect there! (using Chrome 25.0.1359.0 on Win8-64, if you're looking to validate effect per browser). Thanks for the tip re: Color Thief and the YIQ color space - both also very interesting. 
Or perhaps http://www.ruby-doc.org/core-1.9.3/Integer.html#method-i-times Number.prototype.times = function(f) { for (var i = 0; i &lt; this; i++) { f(i); } }; 
&gt; he says it didn't work. Ask him to be more descriptive. Does it yield a compile error? A runtime error? Does it not yield any error, but the behaviour differs from the desired behaviour?
&gt; I don't have Adobe Professional There is no product called "Adobe Professional". Try to find out the actual name of the product you're using, so that we can (1) determine that the language you are working with is, in fact, JavaScript and not, say, ActionScript. And (2) to find out what API is available to us.
Here's a better solution: http://bbenvie.com/articles/2012-06-10/Array-prototype-unique-in-O-n-time-complexity
 elem["func" + (2 - flag)](arg1, arg2, arg3);
Resume booster
What @davemo said. The features that are provided are a bit different as well ... and then there's performance: http://jsperf.com/events-vs-events2/8
I think it boils down to: Are you helping the people around you, or hurting them? And this question is relevant both in programming and in communication. If you choose definitions for words in way such that they mislead the people you are talking to, you are doing the people around you a disservice, and you are doing yourself a disservice if you actually want to communicate an idea to someone. Similarly, if you write code with the specific intent that some of your coworkers will not be able to figure it out, then you're doing them a disservice, and you're doing yourself a disservice if they introduce a bug into your code since they were unable to understand it, and if they bring up your antagonistic attitude to your manager. I understand that it feels nice to have some evidence that you're "smarter" than the people around you, but perhaps you can find some way to boost your self esteem in ways that do not inconvenience members of your team.
Needs more symbols, i can still read some words.
Unfortunately care must be taken when overriding `.toString()` too… Imagine you've got a "Person" type: var Person = function(name) { this.name = name; }; Person.prototype.toString = function() { return this.name; } And you use this `.toString()` to store `People` as keys of an object: var ages = {}; ages[john] = 42; ages[jane] = 31; Bad Things wills start happening when peoples names change: &gt; ages = {}; &gt; ages[jane] = 31; &gt; ages[jane] 31 &gt; jane.name = "Alice"; &gt; ages[jane] undefined Or if you happen to get two people with the same name.
I'm not aware of any uniqueness algorithm that wouldn't need such a performance caveat. "Don't check for duplicates in a one-million-string array" is prudent advice for life in general.
&gt; Curiously, I never mentioned stupidity or ugliness, you did. How is that curious? Or is that another example of you using words in ways that deceive your listeners? &gt; Just like in real life, you can avoid both stupidity and ugliness instead of conforming to them. If you want to, of course. Yes, it's possible to avoid stupid people and ugly people, just like it's possible to be mean to stupid people and ugly people. I am not disputing the possibility of this action. I'm criticizing the morality of it. If one of your primary goals is to intentionally antagonize stupid people or ugly people or whatever, then you are a morally bad person. And at any rate, I feel there's a difference between "I have an obsession with writing write-only but elegant code that my successors will likely swear at" and "I usually avoid teams and companies where I'd have trouble explaining code like in my example above." If you simply didn't write what you call "elegant" code and for example, got a job somewhere else, then you wouldn't be actively causing harm to people. If you take sadistic pleasure in watching people struggle with your code, then you ARE actively causing harm to people.
Now that I think of it this is the likely use case for [ECMA6 Set() objects](http://www.nczonline.net/blog/2012/09/25/ecmascript-6-collections-part-1-sets/) which test equality such that thing1 === thing2 is the equality test rather than object contents.
Oh I don't know. Sorting a million strings is harder and that's no big deal in most languages. To handle nulls, just add null as a special case. You might want to count all nulls as the same value, or separately report how many nulls you have if you're treating null as "unknown."
Recursive functions are faster, and prettier in my opinion. 
bonafidebob made the criticism, I think it'd be fine :)
[seems](http://purple.site50.net/) that doing indexOf every time(method#1) is slow as hell
yes
Yup. They are definitely better… I'm really looking forward to those and proper Maps (although a user-defined method for geting an "object identity token" like Python's `id` would be even better. But I'm not bitter or anything).
A million is getting to be a pretty small number depending on the domain, for example Twitter gets a million tweets in a minute or two, and I think there's a lot of value in deduplicating that data set! An article that this screencap is based on (linked elsewhere in the comments) mentions the solution as being specific to strings, but the problem there wasn't array deduplication, but rather filtering a file to remove duplicates. For a reasonable sized file of reasonable length strings in reasonable character sets, using a JS object as your hashtable is probably fine. As a general purpose algorithm for finding duplicates in arrays, there are problems. As a beginner, it's easy to get confused about the scope of the solution you're looking at, and far too easy to overlook edge cases when you're copy/pasting code from all over the web. For a more solid approach to removing duplicates from large files of strings, it's probably worth digging in a little more. Implementing your own hashtable isn't terribly hard, and then you'll be in control over how it responds to any key. Or you could implement a bloom filter (or find a suitable JS module that implements one) and be able to do deduplication over billions of rows in reasonable space.
This is good advice -- validating that each array element is a string would go a long way towards bulletproofing this bit of code, so at least when it didn't work you'd know right away, rather than producing a result array that did contain duplicates (which might then break some downstream system.)
Why do you believe that they're faster? Most JavaScript engines don't optimize tail recursion, and even then it would just be *as fast* as an equivalent iterative method.
if you're allowing non-primitives like grep: foo = jQuery.unique(bar); // you are a unique and special snowflake
I'm intrigued by your comment. I've got a vague understanding of big o notation, but I'd like to understand your train of thought when determining: &gt;That one has a complexity of O(n2). I'd understand if you don't want to type a wall of text - maybe recommend some reading or projects that might enlighten me a bit? edit: I appreciate any advice you can offer, I'm still learning and can get a bit lost sometimes :)
I'll refine it moar soon!
iTunes is a PhD level example of what not to do. Ever.
I had never seen Object.create(null), and didn't know this was possible. Do you know if there are any benefits, such as lower memory consumption etc. when using Object.create(null) instead of just {} to create an object?
The complexity is just an approximate measure of how much work that need to be done given the size of the input. _indexOf_ works by iterating over a list of elements. The algorithm I commented on therefore iterates over the input list for each of the items in the input list, meaning it needs roughly _n_ operations for every of the _n_ input elements. OP's algorithm only needs to go through the _n_ elements once, because it uses an object as a hash table which allows for look-up in constant time. (I've assumed linear time for building the object structure too.) To be fair that is barely touching the surface. A more accurate evaluation may reveal that markow_twain's function is faster for most normal use cases. Big-O notation is a generalization, and leaves out constants and the actual size of the operations performed on the input. So it's not necessary that one algorithm is always the better choice, even though its complexity function grows slower. Also note that I was talking about time complexity. The spatial complexity also differ, this time in favor of not using hash tables, because by using the hash table we essentially duplicate the input in memory. Anyway I hope you get the gist of it. There's much more to be said, but I'll stop here. This is algorithm 101 material and you'll likely find lots of free resources online. For a non-rigorous approach you could try looking up something like sorting algorithms at Khan Academy and try to understand how they work, and how their complexity differ. 
You're awesome, thank you. Your explanation shed a bit more light on what I could understand from the wikipedia article - i can grasp (for the most part) the mathematical concept of the "simplified version" of big o notation, but having someone explain an example that applies it to a real world scenario is fantastic. 
http://jsfiddle.net/qK732/ You're welcome.
Thanks. But if I use null, then the new object will not have a prototype at all - is this beneficial in any way? Like if I want to create a simple object to just hold some data, would it be better in any way to do this: var o = Object.create(null); o.name = "potato"; Instead of this? var o = {name:"potato"} Or if I create an object to hold a namespace: var nameSpace = {}; vs var nameSpace = Object.create(null); I realize that I lose some functionality, I don't even have hasOwnProperty any more, but sometimes I might not need to do anything special with the object at all, and as long as I created the object and know what it's for in the code I wouldn't need hasOwnProperty for example. This means I could do for (var property in object) without having to check with hasOwnProperty since it never loops through a prototype chain.
Yeah, I can't see the benefit of using Object.create(null) over just {} unless there's some proven performance benefit (perhaps some test on jsperf.com?). Also, just simply using {} is universally supported - no need to worry about JS polyfills for older browsers and such.
Try it in CoffeeScript: removeDuplicates = (xs) -&gt; s = {} s[x] = i for x,i in xs xs[v] for k,v of s
Nice work! 
You sir, are a gentleman.
Was about to post this. I love this line from the [fuckit.js](https://github.com/mattdiamond/fuckitjs) install instructions: &gt; 1. Include jQuery, because everything requires jQuery
Oh dear, you wrote that. Well, another quibble is that your algorithm is not strictly linear as you claim, it just greatly reduces the constant in front of the n^2. That is, if you put enough different values with the same hash bucket (in whatever way the engine hashes property names), your performance will degrade to O(n^2). 
&gt; Recursive functions are faster From what orifice did you pull this vacuous statement? Please explain how incrementing an integer is slower than the overhead incurred by continually pushing function calls to a stack. Please explain how your statement relates to this example i.e. implement array unique using recursion and have it be "pretty" or at least not some convoluted garbage.
Ha-ha! /([ABDEG]♭?|[ACDFG]♯?)((([Mm](aj|in)?|\+|aug|dim|°)?6?)|(dom|ø?))?7?$/ 
Correct - but 'polynomially easier' doesn't exactly roll off the tongue.
Or just: [].forEach.call(document.querySelectorAll('.data input'), function(el, i) { el.name += i; });
&gt;OP's has some problems it has linear complexity It doesn't. There is a loop and inside that loop you look up things in a hash table (or some similar data structure). It's *n log n*, which is better than *n²*, but it's not as neat as *n*.
I dunno, my experience is that yacc and other BNF grammars can be more trouble than they are worth. Grammars can often end up with subtle ambiguities which are a nightmare to debug. If you look at mainstream compilers and runtimes, a surprisingly large number do roll their own parser, instead of generating one. V8 for example.
Anyone else read it as "dropdown dot dot dot js"?
&gt; Functional programming wonks will explain that something called partial functional application would be handy here. If JavaScript had it. Which it doesn't. Oh well. What about Function.prototype.bind? I don't see how partial application would help in the example this comment refers to though... so maybe I've misunderstood what you meant?
you are not worthy enough of my time. especially with your rudeness. Check this [link](http://stackoverflow.com/questions/2651112/is-recursion-ever-faster-than-looping) out. it depends on the language though for performance.
Well, `.bind` does do partial application, but my understanding is that it has two limits: It binds the context (`this`) and zero or more arguments left-to-right. So you can't do partial application of arguments and rebind the context, or bind arguments while leaving a "hole," such as binding the second argument. So in the case of a function `map` with arguments `array` and `fn`, you can't partially apply argument `fn` but leaving argument `array` unapplied.
PING's comment was referring to the fact that after your RAF (requestAnimationFrame) runs there is more work left for the browser to do before it can present the page for display. This work done by the browser eats into that 16ms, a good rule of thumb would be 12-14ms RAF, leaving a few ms for Chrome to finish it's work.
I don't understand why anyone wouldn't include jQuery. In fact, browsers should come with embedded jQuery. Think about how much bandwidth and parsing time we would save.
Good post. As someone who writes JavaScript up and down all day professionally I can say, it would be nice to have some forced structural consistencies and better docs. Why there isn't better documentation out there at this point is a mystery to me. As a side note, I would like to see a new jQuery project start up that would be about strong type casting and more object oriented syntax, so you could be sure that if you were working with jQuery objects of the same version then strict type casting would be enforced, object syntax would be consistant, and so on. As long as there are multiple browsers that have to run the code it doesn't make sense for a developer to write one batch of code for one, and another type of code for the others,, so something like jQuery will probably be a necessity when some new language gets introduced. I look forward to a day when JavaScript evolves to a more professional, sturdy, language.
I would worry that this: splat(get('oranges'))(inventories) ...is the type of thing that would make a code maintainer want to shoot himself in the head. Mainly, the word "splat" is meaningless to someone who hasn't been told what it does. Why not simply do: inventories.map(get('oranges')) Or else think of a better name than "splat"? [edit] Something I've done in the past is to use the "er" suffix when functions return functions, so: mapper(getter('oranges'))(inventories) ...which is perhaps marginally more friendly, although I guess you could argue that functions returning functions is generally going to confuse many code maintainers. Anyhow, good post :)
Could you post a gist, please?
One of the first thoughts that pop into my head when I see something like this, right after "woah, that's neat" is "how does it perform?" Here's a little contrived benchmark based on the functions in the post: http://jsperf.com/combinator-vs-the-world A few take-aways: - On firefox and chrome, and by extension with node.js, those combinators get optimized well, and perform roughly as well as traditional functional approaches. - IE doesn't care for your shenanigans, and penalizes you fairly heavily for using combinators. - JS engines generally suck at optimizing functions that use "arguments". That's painfully obvious on IE, but still fairly noticeable on other engines. See tests with `maybe` vs an arguments-free variant `dumb_maybe` - caching combinators helps a wee bit, but not nearly as much as I'd expected. JS engines are likely doing their own caching/inlining there. - boring procedural approaches end up being way faster than anything else.
Ah, I was unaware of those text sharing sites, and kind of did this quickly in a pinch. I'll definitely be sure to do that next time. Thank you!
Such a silly silly mistake, to be honest I was unaware that the capitalization of a statement gave it a completely different meaning. Once I changed that "I" and refreshed the page, I was so upset with myself. Works like a charm. Thanks a lot my friend I appreciate your willingness to help out!
The layout of the code was almost set for us, as we are in the introductory course to JS. We learned arrays later on in the semester and thus I was unable to use them in an assignment that was given out a few weeks back. And thanks for the advice I was unaware that capitals gave the statements different meanings. Thanks a bunch!
I am building an MMORPG for programmers. I am hoping that many people can use this game as a tool to learn Javascript. The idea is that you can program any of the creatures in the game, and have them autonomously performing work even while you are 'logged out'. Additionally, you can custom-create your own powers and abilities that can have a huge impact on the game world. There are numerous built-in scripting and interface editing tools within the game for programmers to use. Also, the script marketplace will allow programmers to share scripts with players that may not have as much experience. Here is the latest screenshot of the live game: http://www.topiaonline.com/content/images/topia.png Our Kickstarter is trending slowly, and we're having a hard time explaining to non-programmers how they can enjoy the game. We're reaching out to a lot of IT / 'technical' communities to help us get a following. I'm not trying to advertise the Kickstarter, so I won't link it here, but I would definitely like to spark some discussion about 'programming in online games'.
Nice! Good info. Thanks for the rev!
* How do you prevent from just taking the "fireball" ability and putting 1,000,000 damage on it? In other words, how do you balance the game knowing people can script their own abilities? * In a more general sense, how do you prevent exploits?
This seems like an awesome idea! Any idea when people will get to play it?
My apologies if you thought I was referring to you directly. I was more referring to what the current state of things amongst the hive mind of web developers is hence why such a narrow minded article was written in the first place :)
how come you run the interface(s) in an iframe? Is there a performance benefit?
Security mostly.
[Here](http://www.kickstarter.com/projects/1784263141/topia-online)
Amazing! Keep us posted and post it on HN.
I did a lot of memory leak testing a while back with jQuery in IE6/7. In short, if your doing any serious JavaScript in these browsers it appears that you need to bypass jQuery for ajax, events and DOM to have a chance of things working on machines with little ram because the memory leaks are that bad. I was using IE Sieve to figure out what was happening to all the memory. A specific thing I remember because it was such a pain to get to the bottom of was that ajax.abort was leaking ALOT of memory, so it was not possible to use jQuery.ajax if you wanted to cancel your ajax request unless you didn't care about leaking memory. This was one issue out of many. I have since returned to writing JavaScript without jQuery, and surprise surprise, no more serious memory leaking issues in IE6/7. Experiments like this further confirm my beliefs that the problems with jQuery performance are actually not limited to IE6 and 7 at all, it's just that all the other browsers use entirely different garbage collection models and are just faster in every way imaginable which helps disguise the problem that jQuery really isn't that great at all for any *serious* javascript.
true story, need to find a better name :)
[Part II](https://github.com/raganwald/homoiconic/blob/master/2012/12/combinators_2.md#combinator-recipes-for-working-with-objects-in-javascript-part-ii) is now online.
So I know this isn't great and I'm sure I didn't follow all the PBPs in the script, but I wondered if anyone else is doing more things like this, or if there's even any point in shrinking the contents down more (with gzip working on the main lumps of repetition) but I found it interesting to work through breaking down a JavaScript file and thought I'd share!
Have a look at [140byt.es](http://140byt.es) - especially the [Byte-saving techniques](https://github.com/jed/140bytes/wiki/Byte-saving-techniques). Replacing stuff to make it shorter (e.g. d instead of document) will not help because gzip is good at packing that stuff, anyway. Try to make those snippets shorter that are different from every other part of code.
A smaller codebase is great, but not at the expense of maintainability/readability/structure. It took me a long time (longer than it should have) to understand this. Going back to 1+ year old code, and not understanding WTF I was doing was an eye opener. Obscure variable names, strange conventions... All in the name of trimming a few bytes here and there. The time I had to spend relearning what I had done cost me much more than the additional 0.34kb I had saved in size. Now, as with everything, there are exceptions to the rule. Take Google for example: A byte here and there can save them thousands of dollars per year in bandwidth. However one can imagine that if they had gone down the path of strange conventions, it was likely very well documented to prevent the pain of relearning. Just my two cents... Or -- in the spirit of this topic -- *My $0.02*. **Edit: Yes, you should always use a minifier for production. However; modifying your code by following the suggestions in the article will obscure your UNMINIFIED source, making it harder to maintain.**
Care to explain why this was downvoted? Same origin policy prevents HTTP requests from the client from different domains. JSONP will only function correctly if the exposed service accepts a callback parameter, and is loaded to the page using a `&lt;script&gt;` tag.
Yes I'm fairly certain this central collection of strings is one of the minification steps of Closure Compiler, and I'm surprised uglify doesn't already do this. Closure Compiler with Advanced Optimizations turned on should get you an even smaller file, but it takes a lot of work to get your code to work in that mode.
Needs more history history management. :)
I don't see why anyone would do that - he makes a comparison between parsed and minified and just minified - so his parsing would just be part of the minification process. He never says he's doing this to his unminified source code - that's an idea you seem to have introduced and criticized.
Excellent idea. I haven't looked through the code there in quite a while thanks for the pointer!
Thanks, I'll have a look at adding that in!
Sounds interesting... I've not worked with it too much, yet alone the advanced optimisations, there's something else to look at later on. Thanks!
I enjoy this review, but I'm still miles from being able to understand the deeper combinatorial magic of YouAreDaChef. I haven't found a coffeescript debugger and feel like I'd be cheating myself tracing the JS version, so my normal tactic of watching it run is out. That presents more than a little challenge, and I'm resolved at some point this week to give up and just trace the JS, lacking for other options. That said, YouAreDaChef takes higher-order restructuring to a height I do not see elsewhere, and it's made diving into the codebase far more trying than any JS codebase I've come into: there's some base level execution engine, the one [Combinator](https://github.com/raganwald/YouAreDaChef/blob/99b2155c58e6332403354344edaa9a2c59f294a1/lib/YouAreDaChef.coffee#L3), backing an AOP engine, and I haven't begun to get a feel for the vectors the outer Combinator walks to evaluate the inner AOP core. The Combinator itself is composed via another higher order wrapper, beginning around [Line 160](https://github.com/raganwald/YouAreDaChef/blob/99b2155c58e6332403354344edaa9a2c59f294a1/lib/YouAreDaChef.coffee#L161) where the Combinator is first fronted by an executor engine, declared, and then it's methods are fronted yet again with another executor engine. There seem to be a number of layers to YouAreDaChef, it internally exhibits some fierce decoupling (the generic-ness of handling of verbs, out through the various executor wrappers). Yet I have failed so far at building a constructivist model of how these pieces work together, keep getting waylaid as I try to travel from the inside out, and have no illumination as to how so many combinations add up to the run time they create. Documentation on how the program combines itself to become a runtime are less apparent to me than I would expect, and I am more troubled than usual at guiding myself into that vital wisdom.
i misread their code :D
Get ready for an adventure. It involves Google's own special way of handling JS comments, some of which guide the minifier in how to minify your code. It also involves either bundling all of your code into one, gigantic file before minification so it can consider ALL dead code possibilities, or carefully declaring external dependencies that need to not be removed because you know they'll be called later. But the upshot of all this work is it can often identify code you're not using at all. For example if you do things right it can throw out a lot of jquery and jqueryui for you, getting you dramatic code savings you can't get with any other minifier. Big trade off. https://developers.google.com/closure/compiler/docs/api-tutorial3
Thanks for being big about it! I think this is one of 4 times on Reddit I've seen someone actually agree about something like this. Civility on the internet! Refreshing!
So I think generally declaring variables in a closure is great and I utilise the methodology a lot, but I can also see that if all the recurring strings/keys were declared in that fashion (as per these parsed source files) it could easily be confusing to someone else picking up the code at a later date. So I don't think I'd go quite as overboard as these examples manually, unless it was for something small or just for my own amusement. Having said that, after checking out the [byte saving techniques](https://github.com/jed/140bytes/wiki/Byte-saving-techniques) linked in a-t-k's comment, I think having keys/strings in a closure is much less confusing than some of the ideas there, totally amazing!
Oh sorry...I won't be of much help here-weighted voting here is very simple- every voter has defined how strong his vote is. Then when I count the final resolution, instead of counting votes themselves, you count the strength of votes. There is nothing interesting or complicated about that. From the implementation point of view looking at this code is not a good idea. Like I said-it was the first bigger view-model I did, so it is ugly.
They don't call it uglify for nothin'
&gt; In essence, YouAreDaChef implements a new kind of semantics on top of JavaScript, I got that already, and tried to state that. I'm not sure why you have failed to understand that I understand what YouAreDaChef is, and I am sad that what I've done has only gotten an answer that cruises very high over the points I was trying to get us to work through together. In a nutshell I find YouAreDaChef to be very terse code, and I'm having trouble understanding it. Perhaps or perhaps not it is due to the use of Combinators and Method Combinators inside of YouAreDaChef: my belief was that 80% of the code being in a thing called Combinator, and it being wrapped by some higher order invocation functions, was representative of a more advanced usage of the kind of Method Combinator techniques you describe here. Perhaps if you could illuminate *how* YouAreDaChef works better, under the hood, we'd have better grounds to relate to Method Combinators acros. As it stands, I only have suspicions as to why I'm finding it so hard to understand, and one of those is a weak tentative belief I still maintain is that much of the difficulty is due to innermost methods going through numerous level of combinators to surface to the outside world: everything kind of trickles down into "advice," but how it does so and the paths it takes once inside are not, to me, readily apparent.
My vote: Stop minifying. It is one of the worst forms of premature optimization that we do. Turn on gzip compression on your web servers instead, and aggregate your app into one or two .js files. If you find the milliseconds gained from minifying are worth it in terms of conversion rates, fine. Until then, the time saved from being able to debug readable javascript outweighs any performance benefits, IMHO.
&gt; It depends on the language For example, it depends on the language not being javascript. Unfortunately, javascript doesn't really have the functional data structures (collections with performant non-destructive updates), so a performant translation of this particular algorithm to recursion would be asinine. function recursiveUnique() { var hash = Object.create(null), out = [], i = array.length; function reqUnique(i) { if (i &lt;= 0) return; if (!hash[array[i]]) { hash[array[i]] = true; out.push(array[i]); } return reqUnique(i - 1); } return reqUnique(i - 1); } It's basically the same code, but less likely to be optimised by a javascript compiler and more likely to just fail in older browsers, (also harder to read for a **lot** of good javascript programmers). There's really no non-destructive update of javascript Object without copying... I guess you could clone it with Object.create? I imagine that's close to worst case, given that in e.g. chrome it would lead to each version of it being treated as a different 'class', and to non-destructively update the array (e.g. with Array.prototype.concat) would just mean copying it n types. If you did have e.g. a singly linked list type you might want to look at a higher-order function instead of explicit recursion. function dedup(arr) { var ls = arr.reduceRight(function (ls, item) { return ls.contains(item) ? ls : List.cons(item, ls); }, new List()); return ls.toArray(); } Of course, lookup time in a singly linked list is O(n) to the length of the list. So imagine instead that it's an persistent orderedset that supports cheap non-destructive updates. In a world where you have the correct data-structures, recursion can be very performant. In javascript this is basically only primitive value types (numbers, strings, booleans) as far as I can tell, even then ES5 doesn't mandate tail call optimization, so recursing a large number of times is dangerous compared to looping over the same range of values. If you want to achieve a similar level of concision and functional programming look at the higher-order functions on ES5 arrays.
Yeah, I used to do crap like that around 2000/2001, and this: [42, function(){alert((this[0]));}][1]()
Premature? No, it's as mature as it gets. Thousands of people have measured the effect of this particular optimization. &gt;Turn on gzip compression http://mathiasbynens.be/demo/jquery-size jQuery 1.8.2 is 267kB. Gzipped it 79kB. Minified and gzipped it's 33kB. An empty cache is the worst case scenario. First impressions are very important. Being able to reduce the size of your JS by over 60% is absolutely worth it. Even more so if you have lots of JS. &gt;the time saved from being able to debug readable javascript You aren't supposed to debug it on the production system.
&gt; Premature? No, it's as mature as it gets. Thousands of people have measured the effect of this particular optimization. You misunderstand what premature optimization means. Any optimization is premature until you have a reason for using it, whether the optimization is novel or if "thousands of people has measured the effect of [it]" is orthogonal. &gt; Being able to reduce the size of your JS by over 60% is absolutely worth it. I was not claiming it was *never* the right thing to do, only that it generally isn't: &gt;&gt; If you find the milliseconds gained from minifying are worth it in terms of conversion rates, fine. If you are shipping to someone sitting on a broadband line or a fast mobile line, not minifying will add 50-200ms of load time for a medium sized app, which is literally not perceivable. Load time differences of 250ms and below has been shown to have no effect on web usage behavior. If you are shipping to an older 3g mobile device, (averaging at [about 1.5Mbit](http://www.culture.gov.uk/images/publications/digitalbritain-finalreport-jun09.pdf)), you will add maybe 500-1000ms. Keeping in mind that the average load time of a mobile page is 9 seconds, 500ms may or may not make a difference on your conversion rates. The point is this: We all think minification is massively important, but the benefit is actually marginal in most cases, and it *comes at a cost*. This is precisely what the idea of premature optimization is about. &gt; You aren't supposed to debug it on the production system. No, but modern webapps automatically report stack traces from production failures. We can TDD all we like, but bugs will get into production. The lost productivity of tracing bugs through stack traces from a minified code base vs. one that has retained the naming and structure of your original source code is huge.
contenteditable=true... what an ugly hack of a solution.
find var s = new GuitarString(srect); add this line after that var s = new GuitarString(srect); s.id = i+1; this will add identifier to the string, first one will be 1 and last one will be number of strings x,y meant every time when strum() is called it accepts x,y,zone but you have to modify it to accept id also. try learning, or else i can of course do it and get the prize money :)
"Does gzip totally negate this work?" Yep... that's how gzip works (interesting read: http://www.infinitepartitions.com/art001.html) Normal jQuery + uglify + gzip: Uncompressed: 90.43 KB Gzip: 32.49 KB jQuery + Wrapping + uglify + gzip Uncompressed: 80.74 KB Gzip: 33.85 KB
This would be brilliant as a module for [express](http://expressjs.com/).
generally i use drag and drop because its often easier than the crappy file browser an open dialog gives me. but i run multiple monitors so life is a bit easier for me in that regard. it is appreciated when its available. whether you think that giving 1% (less) of your visitors that ease of use is worth it - is up to you. 
I would never bother with true drag and drop because people make mistakes. Just using the drag/drop to facilitate not typing in names works fine (make them click a submit). On multiple file drag just add them all to new inputs. I'm fooling around with web workers at the moment. In my view fallback is failure. Getting a current browser is as hard as going to google.com. My HTML5 app isn't targeted at corporations though (or sales), just a fun application :-) 
I think this is an honest question and, unfortunately, a fairly common perception by many in the dev community. The top rated answer on quora is an excellent example of how to counter this perception. Edit: in case you don't want to log in, here's the best answer to the question, from [Simon Willison](http://en.wikipedia.org/wiki/Simon_Willison), as decided by quora users: &gt; You're starting with an invalid assumption. Front end development is absolutely not "easier" than other forms of engineering. &gt; When you're writing server-side code, you're writing for one language on one operating system with (usually) one database implementation. Write the code, test that it works, go home. &gt; Front end developers have to write code that works in dozens of different environments. It's not just different browsers (IE/Firefox/Safari/Chrome/Opera) - it's also the different versions of those browsers. IE 6, 7, 8, 9 and 10 all have their own bugs and limitations. Mobile is even worse - hundreds of different browser/OS/device variations, and even Android has bugs and even feature regressions on different browser versions. &gt; To make things worse, they have to do most of their work in HTML and CSS, which provide extremely limited tools for working around bugs (hence the past decade's obsession with CSS hacks). JavaScript helps a lot here because at least you can use feature detection (though that in itself is controversial due to the performance overhead) - but now you're handling even more code branches and potential areas for bugs to creep in. &gt; Not to mention that a good frontend engineer will need an understanding of web performance - which incorporates everything from DNS lookup times to HTTP caching behaviour to minification build scripts to CSS layout engine implementation details. &gt; Oh, and they're on the frontline of web application security, so they need to understand CSRF, XSS, Click Jacking, DNS pinning (that was a fun one), UTF-7 character encoding attacks... &gt; And these days there's responsive design, media queries, HTML5 AppCache, WebGL, CSS transforms, SVG, Canvas, localStorage, WebSockets and so on to worry about as well - each one introducing exciting new capabilities, and each one introducing brand new browser support challenges to figure out. &gt; Seriously. Server-side developers have it easy.
&gt;[a delay of 50-200ms] is literally not perceivable. [...] Load time differences of 250ms and below has been shown to have no effect on web usage behavior. Well, you're wrong about this. Google, Microsoft, and Amazon tested this. In Amazon's case, adding 100msec resulted in 1% less sales. I recommend to watch some of Steve Souders' talks. Here are some frame grabs: http://kaioa.com/k/speed_impact_compilation.jpg &gt;averaging at about 1.5Mbit Total theoretical bandwidth doesn't really matter that much. With HTTP you only utilize about 25% of your connection. Also, latency is typically more important since it really hurts a lot since round trips will take very long. There is also this thing called TCP slow start. Usually you won't even reach the full speed of your connection before you're done with downloading that file since that file was either too small or because that connection wasn't "warmed up" yet. &gt;Keeping in mind that the average load time of a mobile page is 9 seconds Many people won't wait longer than 5 seconds. &gt;We all think minification is massively important No, it's not. It's just one of many basic optimizations. The thing is, it's a very simple optimization which can be fully automated. In most cases it just means that you have to add one line to your build script. &gt;[minification] comes at a cost Like... what? Not being able to debug your code on the production system? I don't do anything with the production system. &gt;The lost productivity of tracing bugs through stack traces from a minified code [...] Ah... okay. Well, if you have source maps you can make those stack traces readable with tools like this one: https://github.com/janekp/mapstrace
because for a business it's more important to look good that to actually *do* something
Not to criticise your (valid) points, but what you said was already mentioned in the answers to that question.
The main post was TL;DR so I just came here to answer the title. My ADD has burned me yet again =( lol 
For backend programmers, you just look for people with a computer science degree and some experience. Nothing like that exists for front end because it is so new. I think this is why we earn less, typically; however, I would venture a guess it will change in time.
&gt;When you're writing server-side code, you're writing for one language on one operating system with (usually) one database implementation. Write the code, test that it works, go home. ... Seriously. Server-side developers have it easy. I think this guy has never written worthwhile server-side code.
To expand a bit on that a back-end C# developer, for example, often operates only within C# (and some form of database language). And while C# certainly is a great language that has incredible depth, one only deals with one syntax. A front-end developer needs to know many different syntaxes.And there are many ways of writing the same thing (just think about the many ways to create "classes" in JS). Often front-end developers also need to know a little about back-end, even though I do know some that are front-end only. Personally, during my web development years, I've ended up with knowing about html, javascript (and several libraries), css (with all the browser specific elements), PHP, ASP classic, AS2, AS3, C# (mostly for file handling/conversion and file monitoring services) and C# mono for Unity3D, Obj-C (for phonegap plugins), MS-SQL and MySql, Flash Media Server (or streaming in general) even some multi-player gaming concepts (which is huge just in itself). Next to that I need to know how graphics, video, animation, and audio should be done so I can tell the people responsible for that how to deliver that. And since I'm mostly the last one in the production queue I often end up fixing some of those things, so I also need to know Photoshop, Illustrator, After Effects, SoundForge and what not. Then there is the platform issues, IE6-9, webkit, firefox, opera, android, iOs webkit, screen sizes, performance, the list goes on and on. There are probably some things I forgot. It's not for bragging, because of course I could never be as good as someone who does only one of those things. So if it's true that front-end developers are in high demand, i suppose it's because you can get a long way with just them before you need to bring in extra man-power. (I've been working with this since '98. Also I still sometimes wake up at night, crying, because of Real Player)
As wolever stated, this solution has issues... and what's wrong with the simplest solution? function removeDuplicates(arr) { var out = []; for (var i = 0; i &lt; arr.length; i++) { var item = arr[i]; if (out.indexOf(item) === -1) { out.push(item); } } return out; }
Nothing like a bit of fresh [Ad Hominem](http://en.wikipedia.org/wiki/Ad_hominem) to start the day.
"indefinitely" worse ;)
&gt; There, now I'm not calling him an idiot, I'm saying he's just putting forth the appearance of one. Better? Not really. Arguing that the author is an idiot is not sufficient to demonstrate that what he says is wrong, but you're relying on people reading your argument to make the inference "Oh, he's an idiot, therefore he's wrong", which is where the core of the fallacy lies. If you think he's wrong, argue for why he's wrong, rather than arguing for why he's an idiot.
Having worked on both the front end and the back end at a startup, I'd much rather work on the back end than the front end. Which means if you want me to work on the front end, you'll have to pay me more. If you think that front-end development is significantly easier and yet pays more, then the smart thing for you to do is to start taking on front-end jobs. Either you'll have have made your life easier while simultaneously getting paid more, or you will have learned a valuable lesson about your industry. It's win-win.
I don't think you can compare difficulty between front and backend development. They're just too different. 
&gt;Obviously development on both front and back ends are non-trivial i any relatively complex product. Agreed. I'm just not sure why so many people said that he has the "best answer" when he simply takes the opposite opinion as the one in the question. "Why do people think front-end is so easy?" ... "It's not. Back-end is easy." And the people rejoice. I develop for both front-end and back-end when I'm doing work on the web. The APIs that I write can be consumed by any language on any system that can connect to it. The code I write has to be deployable on both 32- and 64-bit systems. The database layer has to be abstracted enough to work with any database, with any number of syntaxes for doing the same procedures. If someone decides to move from Oracle to SQL Server, the back-end code should not break. If a new piece of hardware is introduced to a system and you need it to give you data that the included drivers do not provide, guess who gets to write a new driver for it? Maybe the author of the post could crank one out for me, since it's cakewalk for him and all. I'll take up his herculean task of writing a javascript module that'll work in older versions of IE in the meantime.
Actually, to be fair, I think many of those answers have been blurred out for users who aren't logged in. I didn't realise till my workmate mentioned it - I think Ghostery or something similar on my system might've unblurred the rest of the answers for me.
It depends on the needs of your application. You should probably evaluate whether or not you actually need a separate offline application, given the availability of AppCache, File API and IndexedDB/localStorage. If you have small data requirements, then those can provide a solid online/offline to modern browsers. If you just want a solid experience and avoid browser support issues on what is otherwise an online application, then distributing a locked down embedded browser might be a good option. You would have full access to native features, and can expose them to JavaScript yourself, while keeping a Chrome environment. (e.g. Chromium Embedded, open source: http://code.google.com/p/chromiumembedded/ Awesomium, closed source, free below $100k revenue: http://awesomium.com/) You could either just point them at the online site, or package up the files with them and put in some kind of update mechanism. If you need deeper integration with the OS, such as file extension associations and the like, then they're probably a good path to investigate too.
You're right. It's almost as if I was making my statements based on what he said in his post, rather than what his wiki article says about him. Weird.
I don't really want to stir the pot, but I do hope that you appreciate the irony of pointing out an argumentum ad hominem and proceeding to use its twin brother, the [appeal to authority](https://en.wikipedia.org/wiki/Argument_from_authority).
Nothing like a bit of fresh [Appeal to Authority](http://www.nizkor.org/features/fallacies/appeal-to-authority.html) to start the day.
Touché :)
I think you're underestimating how much a modern front end tends to do these days. There are applications where the entirety of the application logic happens on the front-end. In these cases, the server-side ends up being little more than a data persistence layer.
happy cake day!! why do you want to work on backend more than front end?
Find a nice place where people are discussing the very tech you're interested in. Reading about (and sometimes solving) other peoples edge case problems is underrated. [google groups](https://groups.google.com) [stackoverflow](http://stackoverflow.com) [github](https://github.com)
Front end development request: "Make this element do this effect like i see on YouTube and Twitter" Back end development request: "Make my search more relevant, like Google" i still prefer backend.
so we need UI/UX design degrees? I could support that.
Your experiences may be different, but my experience is more like: Front end request: "I don't like how this form looks." Back end request: "We need to store the last modified date of whatever the user changes on this page."
I think this will be epic if you can pull it off. I'll be keeping a close eye on this project.
Well, I tend to pick up patterns on need to know basis. Sometimes you have this nagging feeling that this isn't as clean as it could be. That's when some pattern might come in handy. There are certain code smells that imply this. If you find yourself duplicating a lot of code or doing certain things all the time, you might benefit from rethinking your approach. I tend to use functional patterns quite a bit these days. It is often quite easy to decompose a problem and then present it as a series of functional operations. In fact JS is a nice language for this given its design! I guess I would be able to give you more concrete advice should you post some code.
many thanks!
I earn more, but that's because I have proven what all I can do. I generally prefer to also call myself an architect, because I am more than just a developer. I have to work with the designers so they don't do something insane, and I also try to keep a pleasant user experience across the entire site. Between having to know browser differences, making Canvas act properly, explain timing / performance issues, and talking clients off a ledge (as well as that silly JS / CSS / HTML work), I am a lot busier than most of the back end guys with a lot more questions being asked. I get paid more, certainly not less. 
I could post some code. However, I'm more interested in your experiences. I've been told the "need-to-know" basis is very important. But sometimes I'm just bored and looking for something interesting to read. Even if its not exactly relevent, if its a common design pattern, I'm sure I'd run into it elsewhere. For example, functional programming. I don't quite understand what it is, and I've never specifically understood it when I used it. For example, I "curry" a lot. Not because I know what the hell I'm doing - because it's the only way I know how to do what I'm doing. I'm also a huge fan of linq.js - but I have trouble thinking of all my problems that deal with collections in ways which can be solved elegantly by linq.js. I've also begun learning the idea of creating very small functions with a single purpose in order to write cleaner, readable code. Is this all part of "functional" programming? How can I learn more about functional programming? 
Yeah, I've got your job and I earn quite a bit less than the rest of my team. I became friends with the secretary and found out she earns more than I do. I'm a bad salesman, just starting to figure out that I should probably do something about it.
Fair enough!
[From the masters](http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/) You'll have to tolerate LISP syntax (which is very very simple and straight forward) to pick it up though.
http://en.wikipedia.org/wiki/Design_Patterns_(book)#Patterns_by_Type
beautiful, thank you
You migh wanna take a look at http://www.pokki.com/ 
Appeal to authority isn't a fallacy, even though many internet lists of mal-education include it. If it was, you would also ignore the surgeon general's warning against smoking. The thing you're trying to refer to is `appeal to inappropriate authority`.
I'm sure he started web development in the 90s... and hasn't kept up with what's going on since. Back when there were difficulties with multiple event bindings and before there were libraries to assist in cross browser development. That's when I started developing. Back when you could keep up with **all** the cutting edge techniques. Where the same person did the full stack. It was a good time to start, but if you've been under a rock since then you're much less relevant. Web Development in the 90s... where the layout were tables... dynamic meant CGI-BIN... and the gifs were all animated. 
It's not easier, possibly more accessible because you can look at any front end code in a window in your web browser. But, that accessibility means the whole industry is filled with a huuuge range of people, from douchebags to grandmaster wizards of script, and the likelihood of some non-front end developer meeting a few bad apples who make front end development look like a silly pursuit for absolute clowns is pretty high. This is all wild speculation built on all the stories I've heard that go like, 'I hired a web developer and it turned out he was a total idiot and now I have no monies and no functional website, either.' This also is why *good ones* are in high demand. 
I think it's a two sided coin. Ultimately as a front end dev when you implement or design something really cool, the business side can appreciate it. When I implement a sweet caching solution in the backend of a new system (ie its never been perceived as slow)... well nobody cares :(
I wish my tasks were that easy. Response to first one is sending it back to design, response to second one is a 10 minute fix.
client: "yes."
After spending most of the day trying to work this stuff out, I can attest to the head banging. I'm starting out with a modified version of a task manager that also allows me to record the duration and methods used to complete a task, so I think that's simple enough. Unfortunately I have a &lt; 2 week deadline for this so here's to hoping the learning curve speeds up a bit!
I think my problem is that databases are my weak point (Lack of experience) and this job has been forcing me to use them at a somewhat high level while trying to focus on doing my regular job as well. We should have a DBA, we don't, I end up looking like I'm not pulling my weight sometimes. I get things done, it just tends to lag a bit when I've got a lot of database work to do. Maybe that's legitimate though - I mean, I'm not a DBA at all and I wasn't hired to be one. I just feel like this situation has been putting me at a disadvantage in the last few months. It's given me a new appreciation for DBAs. Databases are cruel things. The deeper you go, the crazier they are. I wouldn't wish some of the things I've seen on anyone. edit: Congratulations on your progress!
...which is shortened to "appeal to authority" by pretty much everyone, because it is implicit that the authority in question is inappropriate, because "appeal to appropriate authority" would be meaningless in a discussion about fallacious reasoning.
The minification step should not bring in new errors - so you can debug on your full source code. Minification should be a build step, like compiling C code - you don't usually debug byte code. All it means is an extra step at the end before being pushed to production and saves everyone bandwidth. I'd say minification should be the first thing you set up, once you've got it running, everyone wins and there really isn't a down side. Also, sourcemaps.
&gt; If you just look at the transferred data for one website, it takes about 4 times as long the given bandwidth suggests. (With SPDY you get something like 50% instead of those 25%.) Ah, right, then I totally agree. I thought you meant HTTP as a protocol inherently underutilizes the network. As those figures show, that is not the case, since SPDY is just an alternative layer below HTTP. The problem is tightly coupling TCP to HTTP in most implementations of the protocol, not that HTTP itself is slow. &gt; So, yea, saving bytes is very important. +1, it does make a big difference. Especially proper caching and minimizing the number of required downloads. And yes - minifying as well :)
No, definitely "infinitely" and not "indefinitely". Indefinite means an uncertain amount of time, and wouldn't make sense in that phrase.
Great stuff, I always wonder about the opinion of those who take there work seriously.
The best way to learn patterns is to make awful mistakes in your system design, and have it be totally unmanageable, so you really appreciate why you need a pattern. Alternatively, develop like normal, have someone more experienced review your code, and they can point out where a pattern would make it simpler and you can see a direct comparison. I think the worst thing you can do is read a book about patterns, and then always be trying to prematurely optimize and over-pattern everything. If you haven't been burned by the lack of a pattern, you won't understand it as well and will probably try to use it inappropriately. Do it organically, and you'll waste less time overengineering things in the long run.
Thanks for the input!! I agree, going forward with patterns in mind might not be useful and might cause you to overthink things. However, when faced with a problem, since learning of MVC and MVVM I don't see an alternative to it. I feel that, once I've learned some design pattern, it's almost impossible not to use it. Infact, many of the patterns I've "learned" so far, I've done so through coding experience and being told to use a specific pattern by a more senior developer. Just by reading this list, I found out I'm using patterns that I didn't know I was using. I guess its just nice to know what the common patterns are, so that I can be aware of them when I am using them to solve problems. 
That's a pretty comprehensive list. Right now my two favorite are three.js and GLOW, but the types of projects they are suitable are quite different. three.js has a bunch of out of the box preconfigured shaders and lighting models, and lots of fancy tools to get you set up and running quickly. The disadvantage though is that for larger or more complex scenes, or in situations where you need better control of the underlying hardware (ie GPGPU, custom shaders and vertex buffer management) it is incredibly awkward. Trying to extend three.js' architecture is unnecessarily painful - but it is by far the easiest way to get a simple 3D scene with camera controls running in a browser. GLOW on the other hand doesn't come with much at all, but it wraps the underlying GL calls in a nice and unobtrusive way. I find that it definitely saves a lot of headaches in setting up and tearing down, with few disadvantages performance-wise. On the other hand, it also doesn't give you much high level stuff to work with. For bigger projects, this is mostly a good thing but it may not be enough if you are just trying to throw something together quickly. 
&gt;&gt;Obviously development on both front and back ends are non-trivial i any relatively complex product. &gt;Agreed. I'm just not sure why so many people said that he has the "best answer" when he simply takes the opposite opinion as the one in the question. "Why do people think front-end is so easy?" ... Because the phrasing of the question brings out people defending front end complexity so pointing out back end as easy is complementary to the majority of users. The answer is socialogical not technical. 
Because users and investors couldn't give a shit about the back end; they see the front end as being the product.
http://en.wikipedia.org/wiki/Memento_pattern
That's true as well. While on the frontend you mostly just have to deal with browser bugs, Javascript errors &amp; design fixes, on the backend you get to deal with optimization, automation, APIs and theory and all the fun stuff. :D (I work on both sides pretty much equally.)
I'd say moving graphs to client-side is more useful for usability &amp; interaction, considering you'll have to have server-side graphing for older devices &amp; clients anyway. Pre-emptive optimisation is bad.
To be fair, expert backend developers are priceless - they're the ones that build SQL optimizers and network load balancers in their spare time. Good QA people are truly amazing. My work is so much better now that we have one.
&gt; There is ample evidence for this fact. He says, providing none. . &gt; (I'm trying to ignore the irony of the appeal to authority I'm sure. Except there hasn't been any. Neither of us have named a specific person, which is required by this thing you keep pretending to understand. You can't appeal to a hypothetical person. Incidentally, irony is what most people think is called "sarcasm" - to use a word differently than its superficial meaning on purpose, expecting someone to pick something up from the difference. http://rhetoric.byu.edu/figures/i/irony.htm If a highway director embezzles guard rail money money then dies from the things he didn't build, that is not ironic. If someone leans over the side of the wreck and says "good job keeping us safe," ***that*** is ironic. . &gt; What do you mean "That's what I get for trying to help"? Exactly.
&gt;While there are certainly some challenges in front end development, they aren't fun challenges. Speak for yourself. Not every challenge is tricking Ie into doing tricks - many of hte challenges are related to user interaction, animation, programming visuals, dataviz, games.... you know- fun shit.
This guy is [Simon Wilison](http://en.wikipedia.org/wiki/Simon_Willison), co-creator of Django and Founder/CEO of Lanyrd. I imagine his remark was made tongue-in-cheek, and there are plenty of people who'd vouch for his back-end skills.
Now we should discuss the salary disparity between lead/senior developers and "code managers".
&gt;Anyone can write html, css and javascript, yes. And anyone can write a hello world Java app, or MVC CRUD app. Now go write a RESTful dashboard that performs complex data viz. Go write the next D3, Dom manipulating or data-binding framework. There's both easy and hard shit for both front and back end.
you are either a moron, troll or both.
Checkout Node-webkit -&gt; https://github.com/rogerwang/node-webkit One of the more promising offerings if it gains traction. A lot like Awesomium but with all the node goodies. 
Yeah, the things I'm most proud of either no one else understands or cares about and then I throw together some Unix commands to sort directories by size and suddenly I'm "revolutionizing how the company does business".
Pretty &gt; Functional
"We could process ... server side" - this suggests OP decided to optimize from the start. (And it may be that caching rendered graphs is much faster for both server and client - something that profiling will identify.) I personally find it disappointing how many applications disregard how the web was _designed_ to work. How many applications have links that can't be opened up in a new tab? (Still broken on Gmail.) How many applications break history navigation, scroll bars, hotkeys, screen readers, small screens, accessibility guidelines... for a few shiny widgets that only work on 10% of clients? "With so many browser targets" is actually a good excuse to move _more_ things into the backend. That's why we have libraries to fix IE Javascript. Innovation and experimentation must be encouraged but not at the cost of usability, especially when web users have zero loyalty. (I'm also a front-end and back-end dev.)
&gt; It may be that I think there's a distinction between a back-end dev and a mid-tier dev. Generally if someone is making a few changes to customize a CMS or write something quick in Rails, I'd consider that mid-tier development. Not an unfair spectrum to look at -- but you're looking at something with way more granularity (and knowledge) than those who write job descriptions and pick titles like "front end dev" or "back end dev"... Traditionally, in a generic webdev job position request - "back end dev" means PHP or Rails or Python, etc... &gt; And have you seriously never written a driver? Define "driver"... When I hear "driver", I think "video card driver" - low level code stuff... If you're talking about something higher level, I'd usually call that something else... an abstraction layer, or some such.
You're absolutely right. I think part of the problem is I entered this industry unsure of myself and it's left me very self doubting. I'm very competent and productive, but I always assume I have so much left to learn that I can't be worth *that* much more. But then I realize I contribute to our product as much as anyone, help solve problems all of us have trouble with, deal with issues others literally cannot handle themselves, and provide a really versatile frontend one-man team to the company. I earn as much as my friend who's a line cook for a living. I'm a pretty solid php developer, extremely familiar with Symfony 1.4 and 2, strong design skills, loads of experience with html/css, getting great with Javascript. No idea why I just let this happen... Ugh. I feel pretty fucking stupid.
I think you're reading too far into it. He's not trivializing the complexity of back-end coding by saying it's easy. He's saying they "have it easy" in the sense that they don't have to deal with a wide range of environments to run their code in to deal with tons of edge cases on the end user. For example, I've had to fix a problem that was coming up for some users that came up that I couldn't reproduce until I realized that it was a firefox browser extension that was causing the rendering issue. Then there's the whole IE6/7/8 bullshit and not to mention cross domain issues and the quirks of loading a site in the same domain or outside of the network and how IE defaults to compatibility mode if you're in the same domain and how compatibility mode shits on the code. That's not to at all diminish the problems that come up on back end at all but his point was that not having to deal with these things in particular means back-end has it easy when it comes to having to develop against multiple environments. Generally with back-end you might have to develop against some environment quirks related to how the running environments are set up between different machines, which front end doesn't have to worry about as much. The advantage of front end is while there's so much variation between all the different browsers and technologies, it's more standardized. Generally a bug that only affects IE7 will be able to be reproduced on any machine running IE7. Or a bug that comes up on OSX Chrome can be reproduced on an OSX machine running Chrome. It gets much ore complicated once you have a bug that comes up only on certain machines but those are much more rare. On back end, however you can have two identical machines as far as specs go but aren't able to reproduce the bug because the dev environments have forked since they were first set up due to how the devs have changed their settings. Those can be huge headaches that I'm happy not to have to worry about on the front-end as much. But once you have the environements set up and working, the actual day to day development is more straight forward on back end. The headaches generally don't involve making things cross compatible across dozens of environment configurations across a huge userbase that includes a significant percentage of users who don't want to upgrade their old browsers and thus forcing us to find solutions to work around dumb problems that simply never come up in any modern browser. Front end seems easier because the barrier of entry is much lower but once you get into the more complex stuff for companies whose traffic is big enough that a 2% userbase for IE7 still means millions of dollars in revenue, you start dealing with a lot of little problems that come up whenever they change a part of their site. I've not had to do much back end professionally but whenever I've come up on problems that are related to back end work, it's usually because of some front end issue that came up which causes me to have to dig into the backend to figure out why it's doing this or that and has less to do with actual architectural issues on the back end. Back end problems seem to have to do with more efficiency and logistical issues rather than bug squashing related to end user's browser preferences. And the farther away from end users you get, the less often recurring problems pop up.
There's no caching of graphs, every graph is unique per user and pretty much unique by request (this assumes the user won't request the same graph in the same date rage). We have our browsers we need to support, IE8 +, and handhelds aren't applicable. Generating a PDF is done by hitting the rendering service and using a screen scraping utility. This isn't a preoptimization, it's necessary considering the scopes of the graphs and the number of users expecting to be hitting the site. It's specialized, that's why we can get away with this. If it was to be used on handhelds, then I would agree with you, but by offloading the report generation to the browser, we can reduce the load of the report generation on the web servers. Also, by doing the rendering on the browser, the CSS can control all of the look and feel, which means the same JS can generate reports based on the CSS size set, allowing for the same JS to work off of different style sheets. This way, when they want something tweaked I only need to touch the CSS, and not the CSS and some java config file somewhere.
Yeah RIT!
I've added a "Hide passing tests" checkbox, let me know if there are any problems with it. Christmas next week! Has anyone got any ideas? Mine are all lame
A very good read and very thorough on the subject!
Matching the description, something like the following is pretty obvious: /^(A[cmtu]|B[aki]|C[efms]|Dy|E[rsum]|F[mr]|Gd|H[fgo]|Ir?|L[aru]|Md|N[dop]|Os|P[abmortu]|R[aen]|S[bmn]|T[abehlm]|U|W|Xe|Yb)$/ If the goal is to simply pass the tests and not match the description, I managed to squeeze it down a little: /^([BLPTR][aik]|[G-Y][bd]|[AFPS][cmtu]|[E-P][ruo]|[ECO]s|I|W|U|[CN-X][elnp]|[DCHT][fghmy])$/
Exactly, think 'video card driver'. A piece of software that allows your computer to communicate with a foreign device. All of the drivers I've written (I've only written 4, and 2 of those were for school projects) were built in C for Unix-based systems. To be fair, the page title had listed the difference between "front end devs" and other types of "engineering". The author that I disagreed with said server-side code is easy whereas front-end development is difficult. If he's talking more about "using python to script together a shopping cart", then I can understand his confusion by thinking server-side development is easy. If you've already got the code built for you and you write a few scripts to tie it together (think using a plugin for jquery), then of course it's easy; someone else has already done all the work for him. If he's talking about actual back-end development, then he has no idea what he's talking about.
SublimeText 2 has good syntax highlighting for Jade. I recommend giving it a look.
I can't think of a Christmas-themed challenge, but a couple suggestions: - Add a character count to the page. - Provide test data in JSON format so one would have an easier time writing a program to write the Regex if one cared to. - Stuff besides regex \(\^\_\^\)
Small nitpick: everywhere you have this line... return this You forgot the `;` Also, about 1/2 way through the piece it seems like you forgot (or got tired of) making all of the code blocks have JS formatting. It's not a huge difference, but when reading multiline code every little bit of contextual information helps. Other than that, I enjoyed the write-up; these are the types of paradigms that make JS fun.
You can use one of the shims to do ES5 style coding in ES3 browsers: https://github.com/kriskowal/es5-shim#readme Edit: It should also be noted that the author is one of the few people who seem to abhor the semi-colon at the end of their code. I don't think it's a terribly smart thing to do while trying to teach.
I'm just starting to learn JavaScript patterns so I can't speak from experience, but I have found some resources that have been helpful to me in trying to learn what patterns to use and what they are doing. Also working on a mobile web app at the same time triggered a lot of 'a ha' moments were I realized the pattern they were talking about would have been a good idea, which gave me the opportunity to make a branch and tryout that pattern. I haven't finished the book in the last link but it's really solid so far (and free!). http://youtu.be/vXjVFPosQHw http://addyosmani.com/scalable-javascript-videos/ http://addyosmani.com/largescalejavascript/ http://addyosmani.com/resources/essentialjsdesignpatterns/book/
as a front end dev, i make close to 100k. startups generally have less money to spend on their sole front end developer, because the team of backend guys take up their dev funds and they all think that the front end guy is doing all the easy work implementing all those cool features.
you're selling yourself short dude. your employer knows exactly what they're doing...
I know it's not JavaScript, but what/who uses this syntax besides the author?
It's BNF (Backus–Naur Form), see http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form
nice API!
What is the advantage of this over AMD (requirejs)? And did you notice that the last change to this project was December 26, 2010? 
I've missed out 104 to 118! Sorry, I have no idea how that happened! As always, it's too late to change the challenge. I'll amend the description, though - and in the future I'll stop writing the challenges first thing in the morning / last thing at night &gt;_&lt;
If I remember correctly, with ControlJS you can download the script as a text object and then you can parse it on demand. For example if you had a big script that took a long time to parse, you could download it as text (essentially commented out), and then right before you need it, convert it and parse. If you would lazy load it like normal, then the ui would freeze while it was being parsed. That being said, i've never used it, and unless he's going to maintain it there isn't much if a reason to use it.
Incredible. For me Greensock manages 20 fps at 3000 where all other libraries fail. Kind of fun when you find the balance you can see how the coding style works. One library did the work in bursts and released, where another tended to do the work in waves and the starfield oscillated.
Thanks, I hope you find it useful.
Hmm... that's impressive optimization. What did GreenSock do differently than the others for their animation?
People downvoting you aren't using a Mac ...
Yep. For example, MooTools was about 50% slower with 300 dots, and 50% faster with 3000. Neither approached GreenSock or Zepto, though both of which worked very well comparatively. 
Has anyone looked under the hood to see what exactly makes it so fast?
Oh yes. IE6 can die in a fire. :) (FWIW I develop to Firefox &amp; Chrome and only fix IE if someone actually requests it.)
Separating your code into separate files may help readability but I'm hesitant to adopt the practice due to the additional calls to the server. Assuming you're not using a loader Is readability worth the performance hit?
I'd be curious to see how d3 performs.
A fire made of lava made of suns.
A related side note: in Lisp this same trick can be, and has been, used to define `let`. (defmacro my-let (bindings &amp;rest body) `((lambda ,(mapcar #'first bindings) ,@body) ,@(mapcar #'second bindings))) Usage, (my-let ((a 2) (b 3)) (+ a b)) This gets expanded to the immediately-invoked function form. ((lambda (a b) (+ a b)) 2 3) 
If you think using functions solely for scoping is weird, you'll be delighted to know javascript has a scoping statement. Here's the first example in the article rewritten to use it: with ({ // notice myNamespace is now initialized where it is declared. myNamespace: myNameSpace = window.myNamespace || {}, // Private Variables helloWorldMessage: "Hello Javascript", sayHi: null }) { //Private Function sayHi = function () { console.log(helloWorldMessage); }; //Public Function myNamespace.helloWorld = function () { //call our private method //Prints "Hello Javascript" to the console sayHi(); }; } A few things to note here: - no iffy iify calls. - all variables have to be defined upfront. An unfortunate side effect of `var` statements ignoring `with` scoping. - counter-intuitively, this ends up being significantly slower to run in all JS engines I've tried it on. That last point is a cue that something's wrong here. We're avoiding a function call and setting up a predefined scope set with an object literal. There's no plausible reason for that to be slower. And yet here we are. In truth, javascript *had* a scoping statement. As of ES5, in strict mode, `with` doesn't exist anymore. Back in 2006, `with` was ["goto'd"](http://www.yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/) by Crockford. Unlike many other "feature I don't like considered harmful" posts, this one took, perhaps in part because, like `goto`, you can do truly dumb things with `with`. Still, that never resulted in `goto` being removed from the C specifications. In contrast, JavaScript is losing its one and only scoping statement, leaving us with iify as the only practical alternative, cludgy as it may be. 
That's a well-known pattern and works with browsers old and new. It should be roughly the same as `$button.onClick(this.someFunction.bind(this))`, and that's fine with me. If you want to bind a function's context, either the pattern or `.bind` do the job perfectly: They're tools that do one thing well. But when you want to do partial application, namely to bind some values to arguments, `.bind` is a poor fit because it forces you to bind the arguments *and* the context, it's doing two things at once. If that's what you need, great but if what you want is just the binding of arguments, yu need to roll your own partial application or use one of the many libraries out there that provide it. I think it's telling that so many libraries include a partial application combinator. One library, `node-ap`, is entirely devoted to partial application variations!
Usually, the JS files you work on are not the ones that get sent to the browsers. You'll want to process them through a build step during which you'll minify/uglify them, and that'll usually be a great spot to concatenate all your little files together. There are some cases where loaders are worth using, but in many cases, you're better off grouping all your files into a few buckets and using those directly as big minified files.
Excited to see checkboxes fixed in this version.
How is: (function (MyObj) { //do stuff } (MyObj = window.MyObj|| {})); How is different than: function MyObj = new function(){ this.myprop = true; } var obj = new MyObj Is it just that the first example only works for what could be considered static functions, while the second method is for instantiated functions?
Damn, well I did suspect that would be the case. I guess it does make sense as there' the extra overhead of the closure and each param, thanks for providing numbers, I should have tested it directly, I'll add your/rhysbrettbowen's figures to the blog post in an edit. Thanks!
126 chars /^([IWU]|Os|L[aru]|S[mnb]|[XTCR]e|P[rbmtoau]|[GNM]d|E[urs]|T[bmalh]|Dy|H[gfo]|Yb|Ir|B[aki]|A[ctmu]|R[an]|F[mr]|N[op]|C[fsm])$/
In my opinion code readability/maintainability is way more important than performance (unless we're talking about "so slow it's unworkable" performance issues). Code that's written for optimal performance can easily cause hours to days of extra work when it needs to be maintained. These extra hours cost serious money. Shaving off a couple of milliseconds per visit is probably never going to pay back for that money. Having said that, in this case it's a false dichotomy; you can easily develop using separate JavaScript files which will automatically be concatenated and minified before being deployed live. This is pretty standard practice.
Hmm, there are a couple of design patterns I personally find 'good to know' but there is only 1 'must know' in javascript, I think (Of course, it depends on the project you are working on) **Must know** * Modules, **Good to know** * Facade, * Observer, * Adapter
I believe this falls under the factory pattern, but I could be mistaken. 
Also worth noting that JavaScript has real block scoping as of ~1.7: let (x = 10, y = 10) { console.log(x + y); // 20 } console.log(x); // ReferenceError: x is not defined let can also be used to introduce block-scoped variables in if, for, etc blocks as well. It will be coming in EcmaScript too. 
I'm not sure I'd say it is easier to read, but it's information any good JS Dev should be aware of. (Specifically, the fact that the symbols return the value of the evaluated left/right values and not specifically true/false.)
&gt; x.hasError() &amp;&amp; y.hasError() Here, if x has an error, y will never be evaluated and thus the error message will never be shown. That's wrong surely, as according to the very first sentence: &gt; for &amp;&amp; if the first operand evaluates to false, the second operand is never evaluated
+1 on the fourth link, that's a great book.
Ugh, more blogspam. D3 is pretty effing amazing, I have to say - and nvd3 adds some nice wrappers on top. I'd like to try Rickshaw as well (again, another d3 wrapper). Flotr, and processing didn't really impress me. Highcharts are pretty good, but not worth the price for commercial projects - I'd say FusionCharts is though. The rest of those are just filler, I'm afraid.
No, `with` simply cannot be optimized and it was removed for good reasons. It's not possible to know at compile-time what an identifier inside a `with` block refers to, so the lookup *must* be done dynamically at run-time. That means few compile-time optimizations can be done. It also puts additional unnecessary constraints on the surrounding scopes, whose bindings must be accessible to this run-time lookup (i.e. affects JITing). 
Our commercial project uses HighCharts. You can lean on it in fairly clever ways if you use their API well... And it's actively maintained. 
You blew your opportunity to help them [become one of the lucky 10,000](http://xkcd.com/1053/).
You took the time to reply to me instead of the OP; I'll consider that success.
That was helpful. Thanks.
mods: this question seems to come up every couple of weeks. Can we add a link to this article in the sidebar?
Ah darn, you're right. I didn't consider changes to the Object prototype chain. That pretty much invalidates my whole `with` crusade.
I went ahead and made you a post on /r/ImGoingToHellForThis/
A project I'm working on has some very JS heavy components. We have been working with the module pattern and a lot of data attributes to store information inside the DOM. Still, this approach quickly grew over our heads. Introducing backbone has helped us a lot (even though I see it more as a collection of best practices and design patterns than as an actual framework). 
You're right about burnout. I guess I'm not too prone to it because I teach a lot, and hearing the same question time and time again is just part of the job. But it's also easy to forget that other people haven't developed the coping mechanisms for that. Anyways. You and me. Let's both be better and let's both make the world a better place, one helpful comment at a time. I'll do a shot for you this weekend. :) Keep on keepin on, my friend. 
So I learned about closures before JavaScript, from NewtonScript which came from Self. And the explanation that stuck with me was that they "close over" the context in which the function is created. Whether a scope is "open" or "closed" is kind of a weird temporal concept. Once the parser finishes, all scopes are closed, and it's only then that the functions start executing. So I don't see how talking about whether a scope is "open" or "closed" is in any way enlightening. You can talk about whether some code is "inside" or "outside" of a scope, that makes sense, but talking about a scope being "open" or "closed" is just ... foreign. And the innerFunction in the example really is a closure. Just because there doesn't exist code to modify the closed-over topping variable from pizzaParty doesn't make it any less closed over, or any less a variable. The example probably should have demonstrated by adding another inner function to set the value the variable topping, but that wouldn't change the nature of innerFunction's closing over the execution state of pizzaParty at the time the innerFunction instance was created. Edit: returning innerFunction rather than just calling it immediately would also help shed some light on the magic of closures, so I'll give you that the example could be a lot better, but it's not wrong.
CoffeeScript won't help you deal with large application complexity. (I use it for my apps, and I find it helpful for making classes a bit easier, but that's not the complexity that kills you.) TypeScript or Dart might, but TypeScript is still fairly new, and Dart is only just starting on taking integration with existing JS very seriously, so both are probably risky choices at this time for something large and wanting to reach production. If you go with JS then you can (in theory) switch to TypeScript fairly easily later, as it's a superset. Things that will help: I hope you have http://requirejs.org/ or similar setup so you can iterate and split into files without worrying too much about compilation early on. If you are on the beaten path (inspecting data, grabbing it from the server, showing chart/form kind of thing) then one of the larger frameworks like Angular, Ember, Knockout etc will probably be a good fit for helping manage your data and views. If you're going to be doing more custom interaction (Canvas / SVG) then something lower level like Backbone might be worth looking at. I would separate communication concerns from data requests, and your data model from your display of it. This [Offline First](http://blog.joelambert.co.uk/2012/11/26/offline-first-a-better-html5-user-experience/) blog article covers some of that separation, for other purposes, it's good practice even without wanting an offline mode. Separate your handling of the data model from the handling of the views. Ideally, your models should have no information about views. This may be somewhat framework dependent however, as they differ in their views on where and how strong these separations should be. A lot of this depends upon the specifics of your app. You need somewhat different approaches to things if you're making a gmail/trello kind of app versus document/interactive diagram versus game. In all of them though, separation of concerns brings the greatest help in keeping the complexity of size down.
I think you're a little confused between the back-end (things that run on the server) and the front-end (things that run in the browser client-side.) Node.js is an implementation of a JavaScript engine server-side. Backbone and Knockout are client-side frameworks. The two serve radically different purposes and have radically different challenges. There's no DOM API server side for instance, because the code is not running in a browser. Prior to Node.js, it was not at all common to use JavaScript in the back-end; even today it's much more likely that you'd find one of the more traditional server-side languages in use, such as PHP, Python, Ruby, Perl, C#/ASP, or Java. The language used doesn't really matter -- anything that can output plain text (i.e. virtually any language) can be used. Client-side, you are much more restricted. Putting aside browser plug-ins like Flash and Java, virtually every web app will use JavaScript or some language that translates or compiles to JavaScript, because that is what all browsers support. AJAX is a technique for initiating a HTTP request in the browser asynchronously from JavaScript without a page reload. Despite the acronym, the requested object can be anything -- HTML, JSON, XML, an image file, etc. It's just a regular HTTP request for a regular URL, except it's driven by dynamically by scripting instead of being something that is explicitly written into the static HTML or clicked on by a user. For example, on reddit when you vote or add a comment, a HTTP POST request is sent to the reddit server in the background to register that action, but the page is not reloaded. The dynamic state of the DOM is changed locally to reflect the action i.e. the arrow is turned orange or the comment is added as a `&lt;div&gt;`, but the page is not reloaded. That's really all there is to it. You can use that any way you want -- what those requests represent, how the responses are encoded, and how the result is used are all up to you.
Can you post this as a jsfiddle instead of an image? Not much we can do with that.
A book that I have found to be highly recommended is "JavaScript: The Good Parts" by Douglas Crockford. It is short, like 170+ pages, and as the title infers it focuses on the important things that will help you to start understanding JavaScript. Also there is some tutorials on [code academy](http://www.codecademy.com/tracks/javascript-combined) which should be helpful to learn the concepts. 
Are you using something like Chrome's developer tools or Firebug plugin for Firefox? They will help you track down errors in your javascript, and invaluably helpful for learning js. 
Wow thank you this really helped. I had another solution that I made myself from what I've learned so far, but this is much more concise.
This is also helpful as a quick reference: http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/
Depending on where this regex is to be used... Integer: \d+[\*+-]? Decimal: \d+(\.\d+)?[\*+-]? does the trick I think. Cheat sheet of mine * = 0 or more of last match. ? = 0 or 1 of last match. + = 1 or more of last match. {} = limiter; min required, max optional {3,5} = at least 3, but no more than 5. () = grouping. . = wildcard character. \d = Digit \w = character Anytime you need to use a character that would be valid operation in a regular expression, escape it with a \\ to make it normal, any time you want to apply a generic effect or boundary, "escape" a certain letter, there are cheat sheets of these.
That's a really neat and succinct save feature, I didn't know canvas had that toDataURL method: window.open(canvas.toDataURL("image/png")); 
Hmm I'm wondering if the reddit comment syntax somehow messed up your regex? Looks like that would just match, something like 23+ or 564.24+ and not 1+1
yeah I still get tripped up by that and I tend to edit a lot.
[Reddit Enhancement Suite](http://redditenhancementsuite.com)
I'll definitely pick it up. Thanks! I've actually been going through this http://javascriptissexy.com/how-to-learn-javascript-properly/ so I've done quite a bit of codecademy.
Thanks for clarifying all of that for me. I felt really lost in all of it to be honest. I still have a ways to go with just learning javascript but I always like to have a somewhat clear path on where to go next and what you've told me has definitely helped. 
I know, I learnt something from this today. 
You didn't mention jQuery.. that is one library that is very popular and useful. Node.js is an easy way to make applications. Express is a popular module. I think the trick is to find something relatively simple that is actually an interesting exercise. Graphics are fun so you might look into things like Processing.js or Three.js etc. The main thing is to stop reading books so much and instead work on some projects. You might start with bare JavaScript inside of script tags running inside of your browser. That way you don't have to worry about the server side of it initially. Here are some interesting JSFiddles: http://andrewwooldridge.com/blog/2011/03/16/stunning-examples-of-using-jsfiddle/
Nice work for a first try. I like your choices of brushes: A bit more natural than a circular line. If I might make a suggestion, though. Try adding 'mousemove' and 'mouseup' events to document or window, rather than to the canvas. This will prevent the thing from continuing to draw when the cursor has left the canvas.
1. Do not pollute the global space with variables and functions. 2. Do not use inline event binding, like onClick, onload, etc. 3. Do not use inline javascript, always put it in the separate files 4. Do not put javascript at the beginning of the page, put it before &lt;/body&gt; tag. 5. Always use the same naming styles all over the app. For example: naming a function getThis() and another GetThat() and another get_this_and_that() is a very bad practice. If you are working on someone else code, use the existing style. There are expections to some of these rules, but generally, to have a maintainable app, you should follow these.
Thanks for the advice! I made this in college as our first assignment. The only thing I knew from your advice is never use inline. I was wondering why our lect insisted on using inline for this.
I would be ashamed of my code in terms of neatness. But the better I am with layout the more OCD I get about it every time.
Was told by the lecturer that it can invoke a security issue. But he didnt explain it anymore then that. Need to ask him after the holidays.
Chrome's JavaScript console shows me this error: "Uncaught TypeError: Cannot read property '0' of undefined " which refers to the ChildNodes[0] array element, I believe. 
You learn jQuery AFTER you know javascript and only if you need it. Most of the time, it's not needed but, due to statements all over the web, noobs think jQuery IS javascript. My web dev company is entering its ninth year. Of all the sites we've worked on, only one uses jQuery and only because it was already on the client's original site. We will remove that should it ever get re-designed.
because of the whitespaces, the childNode**s**[0] will return a text node: http://screencast.com/t/zKVVXYhCO I recommend that use .cells instead of .childNodes (and .rows if you are using the table element). Here is the forked jsfiddle: http://jsfiddle.net/czj6r/ As others mentioned before, use Developer Tools/[Firebug](https://addons.mozilla.org/en-US/firefox/addon/firebug/): Press F12, then select the Console to debug your code:)
As pcdevil pointed out, childNodes treats white space as HTML document nodes. Better to use an alternative to the childNodes array. Here's another example of the error on [StackOverflow](http://stackoverflow.com/questions/920478/javascript-traversing-the-html-dom-using-childnodes-causes-errors-in-non-ie-br).
FYI: The Metacharacters that I am certain MUST be escaped are as follows: ^ $ ( ) &lt; [ { \ &gt; . * + ? |
But the text says the error message will never be shown, which makes no sense at all. Unless the .hasError() prints an error in itself, but I read the text above it to mean that 'if there is an error we will print an error message'.
It's not *my* example... and just because the example could be better, that doesn't make it wrong. The innerFunction here is a closure. It's not used as one in the example, but it still is one.
Why such focus on raw CSS? There is absolutely no reason why someone should avoid using a CSS preprocessor if they're already using build tools like grunt. If a CSS preprocessor is used, your CSS include order and CSS linting is not relevant as users can use @import to dictate order and get linting for free at compile time.
The tool allows for easy integration with a CSS preprocessor, which would give you that control like you mentioned. The idea is to be abstracted to allow anyone to take this and run with it, not forcing them into a specific preprocessor. The same could be said for js as well, I didn't want to pick Backbone when Ember or AnguarlJS would work too. The goal is to get novices started with Grunt quickly and provide a framework for more advanced users to extend Grunt to build websites.
I don't think I understand your definition of a closure. If I returned the innerFunction object, and then called it later, would you then grant it the status of closure? Assuming yes, exactly when does the function object transform itself from an ordinary function to a closure? Is that transformation something that we could detect by looking at the function object? That is, could we implement isClosure(fn) and have it return true or false for any given function object?
There's no reason why your tool needs to be prescriptive as to which preprocessor to use. At the moment, your documentation doesn't mention CSS preprocessors at all and enforces a directory structure and odd file naming scheme as a mechanism to control include order. You should consider including a configuration flag that dictates which preprocessor the user wants to work with and react accordingly. Furthermore, truly advanced users won't require boilerplate for grunt as their configurations will be extremely custom, so I suggest you focus on novices. Start by setting a good example; force them to opt-out of using a CSS preprocessor instead of opt-in.
Thanks! :) I didn't know about d3's range function.
have you tried: console.log($element.html());
Zepto uses plain CSS3 transitions instead of JS. Those are supposed to be faster, but in all my tests GSAP still beat Zepto visually. Beware that some browsers (like recent version of Safari) incorrectly fire off requestAnimationFrame events even when the browser clearly isn't updating the screen and/or they handle JS in a different thread, thus a 10fps transition may report in JS as running at 50fps when it really isn't. It's actually very tricky to accurately measure fps with CSS3 transitions, so when you're watching Zepto animate, don't pay much attention to the fps counter in the lower right corner because it may be artificially high. Instead, watch the actual animation of the starfield and how smooth it is (or not). For those that are curious, there's also a "cage match" comparing jQuery and GSAP in various categories at http://www.greensock.com/jquery/ If you've got any questions about the architecture or specific optimizations, feel free to swing by the forums at http://forums.greensock.com where the author is known to hang out :)
Did you even read the article?
you cant see the element in the panel then.
It's the same as going (function () { // some stuff })(); just to denote that it's self-executing. Edit: To explain further, it's completely unnecessary to put anything in front of a self-executing anonymous function. You could just write function () { // some stuff }(); But people have ways of making sure others notice it's self-executing more quickly when reading their code, like wrapping the whole thing in parentheses, starting with an exclamation point, or even starting with a semi-colon.
this seems to work for me: console.log($(element)[0]); That should select the actual html dom element from the jquery wrapper
Actually, the semicolon is a preventative measure against unexpected concatenation results during minification. Omitting it could lead to the function definition being interpreted as arguments to a function call from a different file. Robust build steps will ensure this isn't an issue but naive ones will often produce broken builds.
But what if want a letter range from a to ö, or from α to ω?
I would recommend you to try [CanJS](http://canjs.us/). Since AJAX methods are just jQuery functions it is pretty easy to modify it to support your own API. Here are the docs for the [update](http://donejs.com/docs.html#!can.Model.static.update), [create](http://donejs.com/docs.html#!can.Model.static.create), [destroy](http://donejs.com/docs.html#!can.Model.static.destroy), [findone](http://donejs.com/docs.html#!can.Model.static.findOne) and [findall](http://donejs.com/docs.html#!can.Model.static.findAll) functions which show how you can customize them (disclaimer: I'm core contributor to the CanJS framework)
You can write your own sync backend for Backbone. See https://github.com/jeromegn/Backbone.localStorage for a starter. 
I think the enclosing parenthesis fix this as well -- at least it guarantees that the reference will always be to the result of invoking the function, not the function definition. (Hey -- I just grokked why JSLint complains about the parens being the other way around -- cool!)
From my understanding, the only reason why Touch Events is "dead" is because it it isn't implemented on Internet Explorer -- and that is on Microsoft. The Webkit group cannot submit a patch to IE because they don't have access the source. Is the answer to that problem to create a new spec? I understand that Microsoft is pitching the idea of a unified pointer interface probably because of the Surface/Win8, but I've yet to understand exactly what Pointer Events brings to the table that Touch Events doesn't already have. Does anyone know?
If you're feeling messy there's always `(Array(10)+'').split(',').map(function(a,i) { return i*2; });`
`0.1 * 0.3 = 0.30000000000000004` for me in Chrome. I guess there's not much I can do about the inaccurate floats, that's just how floats in JS are. You're right with the performance. :) I'll refactor the code a little bit soon, and will add this. I also thought about making some benchmarks.
Exactly. You need some operator that makes the function a function expression. I prefer `!` because it's shorter than wrapping the function is parentheses and it also behaves like a defensive semicolon.
unfortunately I am not sure what you mean. Could you elaborate? 
That's pretty neat! One thing that could make it much better than just an MS Paint imitation, is recording exactly what a user did to create the drawing, in an array of actions, so you can recreate it, possibly dropping (undoing) or altering steps in the process, such as changing the thickness of the pen or the size of the circle or the rectangle. Even if the user drew something on top of it. 
Is highcharts that expensive? I used it on a few projects a while back and thought it was cheap at time. Powerful flexible and well documented. 
You'd create generators... function counter(start) { return new function() { this.next = function() { return start++; } } } var c = counter(10); console.log(c.next()); console.log(c.next()); console.log(c.next()); http://jsfiddle.net/3vDrS/ (Slightly modified to document.write)
We use javascript. The site that uses jQuery is for a simple image slider. The total code is something like 80K or more including the download for jQuery. We can do the same without the extra fetch in 50 something lines of js that gets downloaded with the rest of the js.
This is reddit where it's uncommon to understand things this technical.
&gt;In case you guys missed it, the W3C has accepted and published To be clear, the W3C published their submission. This is in no way accepting it as any form of approval.
I thought the use of ! wasn't recommended for some reason, but I can't remember why now. Do you know of any drawbacks? I know heavyweights in the community don't usually do it this way (e.g. Isaac). Just curious.
No. Java and JavaScript are two different languages. jQuery is a JavaScript library. Given that you don't know this, if you're desperate to get this extension working, you're better of sticking with the jQuery provided and learning how it's implemented. Better yet, you should learn more about how JavaScript works so you can understand how jQuery works. Regardless, jQuery itself has a [massive documentation](http://jquery.com/) that you can thumb through.
That range is not as "complex" as this one. It only ranges over numbers: https://github.com/mcandre/node-range/blob/master/range.js
[] matches character lists. [http://] means "match one of these characters: h, t, t, p, :, /, /" So, if you wrote "as[sp]" it would match both "ass" and "asp". If you know that all of the URLs are in this exact format (with only the numbers changing), I'd simply match on the end section. /\\/N\d+\\/(.*)$/
Yeah. The node guys write code that's used in node or browser also though. I admit, that's where most of my experience lies, but I've definitely seen (function(){}()) in many places, but never saw !function(){}. I thought there was some reason, but can't remember.
note that because of the variable scope, it will change the coin **only once**! if you want to do a real coin flip button, you need to declare (or even redeclare) the x variable inside the coinFlip function.
My "one of today's lucky 10,000" moment here: a function's .`length` is its number of parameters. And, while we're on the topic, `.name` is ... its name. 
yess this is exactly what I was looking for. Works perfectly. Thank you very much good sir
Cool, kind a like a souped up geckoboard?
wrap the $(".po") in a for loop... jquery does everything in arrays as you may know... its as simple as that
got it man. working perfectly. thanks for the help
I discovered the childNodes/whitespace problem while writing a screen scraping app using XPATH in C# a couple of years ago. I see it doesn't matter what language you use to traverse the DOM.
TLDR; Microsoft are being less evil than Apple. Still evil though...
No... no it isn't
Now that you mention it, I believe that's it. It's not pragmatic and it's counter intuitive. (fucntion(){}()) is unique enough to make you stop and look it up to figure out what's going on. It's already kinda a of JS idiom at this point. Where as !function(){} is a head scratcher. It's completely non-obvious what's going on here.
I wouldn't bother, you'll probably just alienate people :) I would think that these days, a lot more developers would recognize it as a Ruby construct anyway.
1. No you couldn't do everything that this does in 2 or 3 lines. Did you look at the code? 1. Who says you have to include another .js file? You could minify it inline with your other JS includes, or you could just copy the function into your own library.
"shouldn't be hoehorned with it". I agree, however, touch and mouse still can share some actions (button presses, for example).
Here's how I'd do it in plain JS: console.log( ( window.document.getElementById( 'header' ) ).innerHTML ) It only returns the node's *inner* HTML though. I don't know if that's what you want.
Yes, although `.length` has some issues for functions, it's not robust in all cases.
I'd say it's more similar to [Backbone Aura](http://addyosmani.github.com/aura/)
If you invoke a function as a method on an object -- `obj.abc()` -- then `this` is that object. If you invoke the function regular-like: `sub()` -- then `this` is the global object, `window` (in a browser). If you invoke the function using `.call()` or `.apply()`, then `this` is the first argument to call/apply. obj.xyz(); // this will be obj var xyz = obj.xyz; xyz(); // this will be window xyz.call(obj); // this will be obj xyz.apply(obj); // this will be obj function newFunction() { } newFunction.call(obj); // this will be obj again var boundXyz = xyz.bind(obj); boundXyz(); // this will be obj --- The reason `function sub() { obj.xyz(); }` works is because the JS engine is looking two levels up to where obj got defined. That's bad news bears, though; it would be better to write it like this: &lt;script&gt; obj={ xyz:function(){}, abc: function(){ var self = this; function sub(){ self.xyz(); } this.xyz(); sub(); } } &lt;/script&gt;
This is a technical subreddit, not a default.
Well written, just one technical correction... &gt;If you invoke the function regular-like: sub() -- then this is the global object, window (in a browser). It's not always the global scope. In this instance it will be, but it's the scope that the function is called from. If you call the function from within another function that has modified scope, 'this' will be that function scope. E: the reason that works is because it forces you to call obj.abc() which creates a new scope. Since you are creating a new var self and assigning it to the function scoped 'this' the call to sub now looks back for a var named self. Without that, sub acts like a closure in the window scope which is where the initial confusion is coming from I believe.
I think its just not as common...although I am starting to see it pop up on random github projects...
This is subreddit where it's uncommon to understand things this technical.
It's pretty snappy here. Somebody is using IE. Hey everybody this guy is using IE! Just kidding it doesn't work in IE and is very slow in FF.
 "Touch Events were modeled on the proprietary touch API that Apple added to Safari for the iPhone."
Firefox really struggles with rendering things quickly. I wrote a [connect4 AI](http://www.roadtolarissa.com/connect-4-ai-how-it-works/) a few months ago; in chrome several pieces could be played in a second when the bots played each other but firefox looked much laggier. When I looked at the logs though, it turned out firefox was finding the moves at about the same speed as chrome but couldn't display them. In terms of these fire smudges though, firefox is doing better than IE &amp; Opera which won't even load the examples on cssdeck.
I'm looking into other ways of zooming for mobile and weird trackpads. You might want to try using chrome; for some reason firefox zooms in really slowly. 
Renders very smoothly for me in Chrome and FireFox on Linux. In Chrome it renders so fast that I feel like I'm being tricked into watching a very complicated animated cursor.
Good catch. I just quoted someone else from the jQuery blog.
The company where I work maintains [Regexr](http://www.regexr.com) It's a regex demo tool like redit_redit linked to but it also has a community submission system of regexes so you can see if someone wrote it already and borrow/alter theirs.
Michael Jordan is, and forever will be, the greatest.
If the aim isn't significantly different, why not just use and contribute to yeoman? I'm not trying to bust your balls or anything. Just curious about the reason. As for linting/minifying CSS/JS and compressing images, CodeKit does that pretty well and kind of magically. Seems more user friendly than command line tools if you're working with a lot of different experience levels.
Yeah I work for gskinner, I have it as my flair on a couple other reddits. Probably another good subreddit to make it my flair :) I still barely get the hang of regexes myself, but it wasn't me who wrote that tool anyways :)
Yeah, GruntStart is just stripped down and simple. Not as opinionated as Yeoman. Just a nice basic project structure for you to get started with, then customize as you see fit.
I don't watch much basketball, but I'm pretty sure your shooting % might be off by a factor of 100. Also, your labels seem to indicate they only got ~30 points. 7 rebounds, etc. per season, not per game. Some minor fixes to an otherwise very nice presentation could really improve the overall effect.
+1 for requirejs to help with your module management. You can also add the compiler (r.js) into your build step to combine and minify all the dependencies into one big js file. Works really well. Also, if you're thinking about adding any type of MVC/MVVM system into the mix, I strongly urge you to look at angular. Works just like backbone, except it doesn't make you do all the bolierplate junk to wire it all up. Definitely worth looking into. 
Nice :) High charts has quite a robust API, and their documentation is superb. Every one of their (like 40) demos has a link to it running in JSFiddle. Tons of custom functionality. I use it any time i need to display something other than a simple chart
Frankly if you are going the module loading route, it feels foolish to reinvent the wheel when Common JS/AMD modules are becoming the standard for pre-ES6 code. My recommendation is to use curl.js. It has the best cross platform module support I've found, it's lightweight and allows you to remove the parts you don't use. It also has a minification tool for compiling all your modules + non module scripts into one file. I see no reason to use anything else.
Yeah it is definitely a bad idea and will lead to errors. I think the last time I had one requireJS gave me an error that was more understandable than something being undefined. I may be misremembering what my coworker said to be what requireJS said.
you forgot the "rings" histogram. 
Definitely more concise, but: * This calls the array constructor for no reason * el.name += i isn't as self documenting
&gt;CoffeeScript is just JavaScript No it fucking isn't for the billionth time already. You coffeecritters are dense. 
Yeah man, *fuck* lebron. Also Javascript is the shiznit. I haven't looked at your code but I'm sure it's awesome. Keep on keepin on, man. Also alcohol.
I don't recall requireJS giving a very good error message for circular dependencies. Usually it's something along the lines of "circularModule.someFunction is undefined" and the module I'm trying to use is just an empty object.
Here is a more recent [function name proposal](https://mail.mozilla.org/pipermail/es-discuss/2012-November/026403.html) that Brendan Eich approves of and planned to [present to TC39](https://mail.mozilla.org/pipermail/es-discuss/2012-November/026457.html) at the last meeting, but didn't get around to I presume due to a hectic schedule or a full docket at the meeting. This is the function name proposal I have implemeneted in [Continuum](http://benvie.github.com/continuum), an ES6 interpreter implemented in ES3 that runs in Chakra, JSC, Spidermonkey, V8, and...the unnamed interpreter that is IE8's JScript engine (and itself and probably other ES5 host environments but this is untested).
Nice logo, though.
&gt;\d+(.\d+)?[*+-]? You need to escape the dot within the parens (the decimal point) - as written, that'll match "4567B981+", which is undesirable. 
Just a trackpad (mbp). 
Holy Christ you're an overachiever :)
Really like the app, but I keep drawing things that are disturbing on accident. For some reason creepy clown faces appear a lot.
For ajaxy type of things for a situation like yours I might look into the seemingly unpopular Closure Library. It, as far as I know, doesn't require any restful backend stuff. Though, there is a learning curve involved. As others have noted, Backbone and your own sync backend via localStorage may be of interest, too.
You would still need to decode the gif file to find out the frame rate per second and the position within the gif at the moment of hitting pause. And playing 100 gifs simultaneously would eat quite a bit of memory. It would be possible to decode the gif and do the playback via Javascript, I guess. Then it'd be possible to advance or go back or pause the gif. But implementing that would be bit complicated.
I was thinking of something like... get the contents of the 4th complete TD...
So I'm trying var todayCloseTime = today.substring(today.indexOf('PM&lt;/TD&gt; &lt;TD class=ms-vb&gt;&lt;/TD&gt;') I get an undetermined string constant
Provided the last time `td` is always succeeded by an empty element, and it's the last in the row, then var a = document.querySelectorAll('td:not(:empty)'); var lastTime = a[a.length-1]; This is also highly reliant on the structure of the HTML, ie how many td/tr etc, presence of other 
 &gt;&gt;var a = document.querySelectorAll('td:not(:empty)'); "Object doesn't support this property or method"
 &gt;&gt;today "Wednesday&lt;/TD&gt; &lt;TD class=ms-vb&gt;7:00AM&lt;/TD&gt; &lt;TD class=ms-vb&gt;12:00PM&lt;/TD&gt; &lt;TD class=ms-vb&gt;1:00PM&lt;/TD&gt; &lt;TD class=ms-vb&gt;5:00PM&lt;/TD&gt; &lt;TD class=ms-vb&gt;&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD class=ms-vb width=1&gt;&lt;SPAN xmlns:ddwrt="http://schemas.microsoft.com/WebParts/v2/DataView/runtime" ddwrt:ammode="select" ddwrt:amkeyvalue="''" ddwrt:amkeyfield=""&gt;&lt;/SPAN&gt;&lt;/TD&gt; &lt;TD class=ms-vb&gt;"
 &gt;&gt;var a = today.querySelectorAll('td:not(:empty)'); "Object doesn't support this property or method"
You could use jquery to select the last TD using :last...
it's the 4th TD element in that string...
I added the closing parenthesis and made it 1 line, and it didn't find it :(
yeah i'm checking through the console, the output in the OP shows the contents of the variable today
You could insert the TD html into a created &lt;div&gt; and find the 4th TD. I haven't tested this but it could look like: var html = "your string of TDs", $div = jQuery( '&lt;div/&gt;' ); $div.append( html ); var $lastTD = $div.find( 'td' ).eq( 3 ); // get 4th TD 
Why isn't jQuery popular here?
Man…I *wish* I was hard enough to live in Bushwick…
msvbs = document.getElementsByClassName('ms-vb'); msvbs[3].innerHTML
Hmm, what would it take to make this useable/installable locally on the device? I'd love to see this on an FFOS tablet.
I don't own a firefox os device, but I assume it would need to be put on their store.
Two comments: 1. The `getElementById()` comment reads `// Returns the div and its contents` but this is wrong, or at least misleading. This method returns a single `element` corresponding to the `&lt;div`&gt; but *not* its contents. Some developer environments (e.g. Chrome developer tools) try to be helpful and pretty-print DOM nodes by recursively walking their child nodes and printing the whole tree rooted at that element, but that is a convenience, a side effect of having a fancy console display the return value. It does not mean that the return value of `getElementById()` has anything to do with the child nodes (Orange, Chocolate, etc.) 2. The single nodes returned by `getElementById()` and `querySelector()` are no less "live" than the `nodeList` returned by the other `getElementsBy...()` methods. The outlier is `querySelectorAll()` which is the only method of the bunch that makes a static copy of elements. The way the post is worded gives the impression that `getElementsBy...()` is the outlier for returning a live list. 
Hmm, I'm not sure I understand the exact definition of an "event" in javascript, but whatever it is, a function with a name can't be used for those? And forgive me, I don't understand when you (and everyone else xD) use the term "reference." So like... whatever function was written for window.load, you wouldn't be able to write the same function anywhere else in the code? And lastly, so I'm clear, the first example being declared in the "global namespace," that means I could use it anywhere else in the code? And then for the second example... it could possibly be used "globally," but only if that variable is global? Sorry for the confusion &gt;.&lt;
A lot of this went straight over my head, but I think I'm understanding it a little bit more after looking at the articles and reading your reply. So in the example you listed, function bar() { ... }; wouldn't be able to be used elsewhere because it was declared within the foo variable, so it can only be used there? Am I understanding that correctly. I think I'll take your word for it though about it not being too terribly relevant for me as a beginner, &amp; not get stressed over it :P
The [Named functions demystified](http://kangax.github.com/nfe/) link you posted is solid gold. Thank you! Now to answer the OP: Let's step back from the difference between a function expression and function declaration for a moment. Then let's throw the word "anonymous" away, as it suggests there's something special going on. What makes JavaScript's functions special and different from some other languages is that they are values just like strings, arrays, numbers, or objects. So you can assign them to a variable using var: var add = function (a, b) { return a + b }; var subtract = function (a, b) { return a - b }; Put them in an array: var operations = [function (a, b) { return a + b }, function (a, b) { return a + b }] Return them from functions: var K = function (x) { return function (y) { return x } }; Pass them as arguments to a method: [1, 2, 3, 4, 5].reduce(function (a, b) { return a + b }, 0); //=&gt; 15 And do anything else you would do with a number or a string or whatever. When you assign a number to a variable: var answer = 42; You can use the variable instead of `42`: console.log(answer); It's the same with functions. If you assign them to a variable, you can use the variable instead of the function's expression: [1, 2, 3, 4, 5].reduce(add, 0); //=&gt; 15 And so on and so forth. This simple idea, that a function is a value like any other value, is very powerful, so much so that nobody expects you to infer all of the consequences with a snap of the fingers. Thus, you keep reading and learning and looking at examples, and gradually the possibilities unfold for you. But start with the notion that in JavaScript, functions are values that can be treated alike all the other values. p.s. I wrote a book about functions in JavaScript called [JavaScript Allongé](http://leanpub.com/javascript-allonge). I sent you a coupon for a free copy in a PM. Please let me know if it helps or if you find anything confusing. Feedback from people that are new to JavaScript is vital to improving the book for all of its readers. Thanks!
Wow, thank you! (For the detailed reply &amp; the book =] ) One thing I want to be 100% clear on, when you say functions are values in JavaScript, you literally mean they are always considered values, or that they can be treated as such? And the fact that functions are/(can be?) values, thus be assigned to variables, this is good simply for the convenience of only having to write the variable name if you want to use it again in the code as opposed the rewriting the whole function? Or is there more to it than just that?
Ohhh, okay, so more than likely all I'll ever see/write is either: 1) A function with a name, but not assigned to a variable like: function FunctionName(parameters) { bla bla bla }; 2) An anonymous function found within a variable like: var FunctionName = function(parameters) { bla bla bla } ; 3) Or rarely something that's named *and* assigned to a variable, like you listed. Am I understanding this correctly?
They are always values. And there is more to it than that. Let's leave methods out of things and work with the following. This is an array: [1, 2, 3, 4, 5, 6] //=&gt; [1, 2, 3, 4, 5, 6] This is how you get an element of an array: var arr = [1, 2, 3, 4, 5, 6]; arr[3] //=&gt; 4 This is how you get the length of an array: arr.length //=&gt; 6 This is how you put something in an array, even on the end: arr[6] = 7; arr //=&gt; [1, 2, 3, 4, 5, 6, 7] And this is a for loop: var i; for (i = 0; i &lt; 6; i++) { console.log(i) } //=&gt; prints the numbers 0 through 5 on the console This is one of the most famous functions: var map = function (array, transformer) { var i; var answer = [] for (i = 0; i &lt; array.length; i++) { answer[i] = transformer(array[i]); } return answer } It takes an array and another function as arguments. So: map([1, 2, 3], function (x) { return x * x }) //=&gt; [1, 4, 9] Thus, a function being a value means we can pass a function as an argument to another function, and the other function does something with it, like applying it to each element of an array.
While the function expression in your #2 is technically anonymous, you immediately assign the function to a named variable, making it no longer anonymous. Both functions declared in your #1 and #2 can be called/used the same way: FunctionName(parameters); Aside from those mundane details that I listed, they act nearly exactly the same. #2 does not really act like an anonymous function, even though it's built from one. #1 and #2 are both common techniques for creating a function and giving it a name. It's not really useful to think of the function in #1 as not being assigned to a variable -- the declaration creates a variable by that name. That's what is meant when it's said that functions are first class objects -- a function *is* a variable, just like any other type. When you talk about anonymous functions, it's more commonly used in the context of things like the *immediately invoked function expression*: (function() { ... })(); Or things like returning an anonymous function: function foo() { return function(a, b) { console.log(a + b); }; } If you call `foo()`, the return value is a function. If you choose to assign the return value to a named variable, then it's no longer anonymous: var somefunc = foo(); somefunc(10, 20); But you might not give it a name and instead have it continue to remain unnamed: foo()(10, 20); or: var stuff = [1, 2, 3, foo(), 4, 5]; or: return {'foo': foo(), 'bar': function() { ... }}; 
A lot of these examples are broken with the new version (0.4.0a) of Grunt. Grunt is a decent tool, but because they broke EVERYTHING with 0.4.0; I would highly recommend against using Grunt for new projects.
I only used an arrow function for the outer function which is not `this` sensitive. The inner function is a normal function and the lexical `this` binding from the outer function does not transfer inward because of that.
An event in javascript is something happening that can be either initiated by the user or by other parts of the application. For example, a user clicks the mouse, that's a "onclicked" event, ie something happened. Or a user typed, that's a "keypress" even, ie something happened. Sometimes other libraries can fire events, like after downloading code from a server, a library can fire an event saying "hey here's the stuff you asked for". It's essentially a notification that something has happened. Anonymous functions are handy because you can just say "here's a function, run this when something happens" For example lets say you have a button with an Id of "testbutton" &lt;button id="test"&gt;Click Me&lt;/button&gt; You can use jquery to bind to the onclick event (there are a few ways to do this, don't focus on the syntax). This just says when something with an id of "Test" is clicked do whatever is passed in. //this isn't real code, but I wanted to show you where the function goes $("#test").click( /* function here */ ); //we just moved the last paren down 1 line $("#test").click( /* function here *. ); // here's the function $("#test").click ( function() { alert("button clicked"); //fire any code you want, when a button is cliked. } ); //this can be shortened to $("#test").click (function() { alert("button clicked"); //fire any code you want, when a button is cliked. });
Some key points I didn't see covered in other comments. A function is either an expression or a declaration, and which one it is is decided contextually (by what comes before it). `function ...` with nothing between it and the previous statement is a declaration. Otherwise it's an expression. A function declaration must have a name. function(){} // throws an error A function declaration creates a binding in the surrounding scope for its name with the function as the value. __A function declaration's binding can be overwritten__ by simply assigning a new value to the name from either inside or outside the function. function x(){ x = 10; } x(); x(); // TypeError, 10 is not callable A function expression creates a scope only accessible inside the function where the name is defined, and the binding is __immutable__. Assigning to the name has no effect. var y = function y(){ y = 10; }; y(); y(); // works
THANK YOU! This seems very clear to me now. So in your first example, when you have this: var a = { foo: "bar" }; and then you say this: var b = a; and then this: var a = null; So variable b is still { foo: "bar" }; because the JavaScript interpreter looks at the code in a very linear fashion, so what's done is done in line 2 where b becomes equal to a, regardless of what happens on line 3, where a is now null? Is that right? &amp; thank you also for explaining that about how the different levels of scope work in regards to how the JavaScript interpreter reads code &amp; also about how writing the exact values/contents of a function/object will *not* be treated as the same thing unless referenced as having the same name or whatever. I didn't see this ANYWHERE else in all the stuff I've looked at so far about JavaScript. 
Also can you explain the optimization benefits to me? It just seems like concat + uglify? I do this in grunt, does require make some other optimizations? I'm really skeptical of code "optimizers".
Your assumptions are bad assumptions. Most JavaScript devs are nesting functions all of the time. Your statements are simply only true for SOME cases, not all cases. By giving him a bad understanding of closures now, you're only setting him up for more confusion later on, and an understanding of closures is necessary to be a competent JavaScript developer.
same here
that is a function expression.
I think your question was sufficiently answered, so I'd like to make a suggestion that you might already be aware of: Whenever you're reading an article, tutorial, anything with code examples - open up your console, copy and paste stuff, and play around.
&gt; So variable b is still { foo: "bar" }; because the JavaScript interpreter looks at the code in a very linear fashion, so what's done is done in line 2 where b becomes equal to a, regardless of what happens on line 3, where a is now null? Is that right? Yes. When you create _thing_, and you assign `a` to _thing_ and assign `b` to `a`, `b` will point to _thing_ no matter what happens afterward. Don't imagine arrows pointing from `b` to `a` to _thing_ in sequence; imagine `b` and `a` both have arrows pointing to _thing_. &gt; &amp; thank you also for explaining that about how the different levels of scope work in regards to how the JavaScript interpreter reads code &amp; also about how writing the exact values/contents of a function/object will not be treated as the same thing unless referenced as having the same name or whatever. I didn't see this ANYWHERE else in all the stuff I've looked at so far about JavaScript. No problem. I had written some stuff about pass-by-value and pass-by-reference, then removed it. But if you feel curious, and not overwhelmed, google those things, because that's what I was getting at when I said "you'll eventually learn other ways in which objects and primitives differ." Also, to elaborate on the event thing (feel free to stop reading when you get confused): Events are not a built-in part of JavaScript. But they're a big deal in browser-based JavaScript because that's the model that browsers use to tell JavaScript that stuff happened — where "stuff" usually means user input like clicks, scrolling, window resize, pointer movement, and so on. Events are like someone in the house who narrates everything they're doing loudly enough so that everyone else can hear them. "I'm taking out the trash now — last chance to throw something in the can before it gets put on the curb." "I'm going to the store — last chance to add something to my shopping list." In other words: this is something that happens whether you're interested or not, but if you _are_ interested, you can listen for specific kinds of things, and then you get a chance to do stuff before/after/while those things happen. As it happens, because JavaScript treats functions like values, it's natural to program this way; first-class functions let you say, "I want you to do this particular thing when you're about to go to the store, but it's all contained in this box, and all you have to do is push this button at the appointed time." Functions are "portable" like this in JavaScript because they'll automatically remember all the stuff that's in their scope, even if they get called from another scope, and even if none of the other stuff in their scope can be seen/referred to from another scope. As an example: function defineSomeStuffGlobally() { var called = 0; window.countHowManyTimesIHaveBeenCalled = function() { called++; return "I have been called " + called + " times."; }; } defineSomeStuffGlobally(); Run that in a console, and then run `countHowManyTimesIHaveBeenCalled` over and over again (defined globally because I attached it to `window`), and note how the number keeps incrementing. And then think about the fact that you can't get to `called` from the global scope, but it's obviously still there, because that function keeps adding 1 to it. That's how functions stay portable: because they keep all the stuff they know they'll need, even when nothing else needs it.
By wrapping it in parenthesis you automatically turn it into function expression (see my first point on differentiating between declarations and expressions). Function expressions can be anonymous. Often, the entire reason to wrap a function in parenthesis is precisely to convert what would otherwise be treated as a declaration into an expression. For example, a declaration cannot be called directly, but an expression can, which is why immediately invoked function expressions are usually found wrapped in parenthesis (I prefer void when the return value is unused). function declaration(){}() // SyntaxError, unexpected ( (function expression(){}()); // works void function(){}(); // works
There's no such thing as a constructor function type in JS. Any function can be used as a constructor if you stick "new" in front of it.
=D
The API is somewhat unstable, yes. But that is to be expected before they reach v1.0. The Grunt maintainers have however been good at describing changes that break backwards compatibility on the release history [0] list. The last time I did an upgrade it took me approx. 10 minutes to fix all my tasks. And this is not something that you need to do very often.. [0] https://github.com/gruntjs/grunt#release-history
Thanks for the explanation.
Such functions probably rely on `this` to be a specific thing, and that's why they error when called with `new`. But just because a function _doesn't_ error when called with `new` doesn't mean it was meant to be called that way, or that it won't error somewhere down the line.
I'll answer the part about anonymous functions. As the name implies an anonymous function is a function without a name. It is used for places where you need some stuff to be done, but you don't need to have a specific function name. This is best shown with an example. Suppose there'a bakery, it bakes pies and sends it to the customers who ordered them. So there may be some code like this, function notify_customer(){ // notify the customer that the pie is ready } bake_pie('apple', notify_customer); In the example above, the function "bake_pie" accepts 2 arguments, first is the type of pie, which is "apple", the second argument is a "callback function" which can be any function, which is called when the pie is baked, in this case, it is a function which takes care of notifying the customer that the order is ready. "notify_customer" is not an anonymous function because it has a name, we can refer to it multiple times here and there. The code could also be written as, bake_pie('apple', function(){ // notify the customer that the pie is ready }); As you can see we are creating and passing the "callback function" on the same line that we call "bake_pie". In many cases this makes thing more convenient. As you can see the function also has no names so it is an anonymous function.
Why? Side note: passing judgement without well formed criticism is, in my strict moral code, incredibly unethical. So this kind of statement, completely devoid of any criticism at all, is the worst kind of sin.
I'm sorry, but leave that attitude at your place of business. This is a programming community -- building things *should be encouraged*, even if the problem is old and solved.
&gt; not the DOM which may or may not follow these rules Yeah, that's the other thing: host objects can do whatever the hell they want, so there's no good heuristic for those. (Of course, the vast majority of them don't respond to `new` anyway.)
Differentiating DOM interfaces that aren't constructable is easy though. function isDOMInterface(o){ return typeof o === 'function' &amp;&amp; Object.getPrototypeOf(o) === Object.prototype; }
Rx is way too complex to compare. This is a nice exercise and lightweight for simple use. You can check js-signals on github for a nice, more complete but still light alternative
I'm not sure if that's a good idea. My first implementation wasn't using IDs, so calling `off` removed internal events that my library needed. Why would you want to unbind all events instead of just unbinding the events you use yourself? It could possibly destroy 3rd party code that uses the event system.
Yeah I'm trying to imagine if it would be possible with static code analysis to determine whether a function is intended as a constructor, but it seems like it still wouldn't be completely reliable. For example it's not impossible that a function would be intended to sometimes be a constructor, for example behaving differently if used with "new" as opposed to called some other way. I think ultimately you're right, it comes down to stated intent in whatever docs you have access to.
Any suggestions for a better explanation of monads that might also be applicable to JavaScript programming?
When you want to destroy an instance, it's useful to unbind all events. Look at listenTo/stopListening from Backbone and namespaced events from jQuery.
Yeah good point on Image, although you only need to take away the DOM interface check for it. The check for prototype properties is what's going to filter out most functions and without that you're just going to get nearly every function (except the ones with no prototype). The prototype property can be set to a primitive value, but if it is a primitive value it won't be used at all. function Ctor(){} Ctor.prototype = 'hello'; console.log(Object.getPrototypeOf(new Ctor) === Object.prototype); // true So while the function is constructable in the sense that every user made function is, I filter it out because of the same reason I check that the prototype has properties on it (because this is right 95% of the time in my experience). It's also needed in order to prevent `Object.getOwnPropertyNames(o.prototype)` from throwing a TypeError. If your criteria for "is a constructor" is that `new Func` won't throw an error, then what you've got is close enough, although you need to add the DOMInterface check back in and figure out a way to find the few DOMInterfaces that are constructable. One way to pick up most of them is something like, assuming you're testing a global property, for (var k in window) { if (isDOMInterface(window[k])) { window[k].isConstructor = functionName(window[k]) !== k; } } This would pick up Audio, Image, Option, and a few others (any IDL interface specified with the [NamedConstructor] attribute). The remaining ones you'd either need to explicitly test for, or use a pre-assembled list like https://github.com/Benvie/idl-for-javascript/blob/master/json/html5.json which specifically says which DOM interfaces can be constructed.
I'm going to sound like a jerk but it uses another library for parsing. Writing interpreters is not too hard, you can write a C interpreter with JS relatively easily as long as you have the parse tree. Then again, this is very cool.
I made the test repo and site above (https://github.com/jsantell/web-audio-api-bugs) It's been awhile, but I think this is an issue in webkit that was corrected in Chrome, so both webkit and safari have this bug.. not sure if it has been fixed and just waiting to propagate (I'll relook at the webkit issue tracker)
Heh, I think you just summed up Crockford in general: often makes authoritative statements on subjects he doesn't quite understand and puts way too much of himself into his presentations/writing. 
I'm not sure if javascript is capable of sending key key presses however I know that it can easily be performed with python which is very easy to learn. 
[Javascript](http://en.wikipedia.org/wiki/Javascript) is actually not (originally) a scripting language for [java](http://en.wikipedia.org/wiki/Java_%28programming_language%29).
it can. look at gmail compared to outlook(c# maybe) and firefox.
Thanks for creating this BTW. Would you be able to link to the issue/bug mentioned on [here](https://github.com/jsantell/web-audio-api-bugs/tree/master/safari/MediaElement-to-AnalyserNode)? I tried [WebKit Bugzilla](https://bugs.webkit.org/show_bug.cgi?id=12400561) and Apple Bug Reporter, but wasn't able to find #12400561. The closest one I could find was this one: [[GStreamer] AudioSourceProvider support in the MediaPlayer](https://bugs.webkit.org/show_bug.cgi?id=78883).
&gt; it'd might actually be easier to implement a C interpreter I wonder.. you're leveraging an awful lot of pre-existing javascript stuff.. arithmetic, operators, even types are strictly identical. You wouldn't get that with another language Also, you're kinda "cheating" by gleefully mixing native objects with interpreted ones by just exposing the global object. Because you don't have a meaningful separation layer, it's possible for interpreted code to escape and run within the above layer (and I don't just mean because `global` is exposed. `"".constructor.constructor("return global")()` would still access `global` and everything on it regardless.) Still, it's a good start. It could become an esprima-based implementation of something very similar to [narcissus](https://github.com/mozilla/narcissus), although I'm not sure yet what benefit this would have over it. 
I know this is not a book, but its a GREAT site to learn from. http://bonsaiden.github.com/JavaScript-Garden/ Edit: just wanted to add, theres probably a bajillion threads on this topic if you just search for them
Head First HTML and CSS - http://shop.oreilly.com/product/9780596159924.do - the Head First series uses interesting, engaging writing with activities, multiple learning styles, stories, pictures, and so on, so they aren't just dry, boring reading. They are excellent for beginners to programming. 
it's basically a central place to store your models. This is one of the things that is essential in any large application. In PlastronJS it's called the store: http://rhysbrettbowen.github.com/closure_from_jquery/#/11/5 (https://github.com/rhysbrettbowen/PlastronJS/blob/master/store.js)
JavaScript: The Good Parts by Douglas Crockford Permalink: http://amzn.com/0596517742
This was going to be my first suggestion but i resisted because im not sure its a good FIRST programming book. But a must-have, after one has learned basic programming skills!
https://developer.mozilla.org/en-US/docs It's all you will ever need.
&gt; I wonder.. you're leveraging an awful lot of pre-existing javascript stuff.. arithmetic, operators, even types are strictly identical. You wouldn't get that with another language It's not too difficult to emulate C's stricter type semantics on top of JS' more relaxed ones. You can get pretty far using Typed Arrays and 'casting' operations like `a|0`. (I did these things in the course of implementing a JVM in Coffeescript.) &gt; Also, you're kinda "cheating" by gleefully mixing native objects with interpreted ones by just exposing the global object. I think the ability to mix the two is much of the point of making a metacircular interpreter -- it allows you to experiment with the semantics, scoping etc without having to reimplement the entire runtime. Admittedly, I did gloss over the fact that a "complete" C interpreter should have the whole standard library ported as well, and that would definitely take a lot of time. But I reckon that a basic implementation that does I/O and date/time would still be easier. Porting pthreads might tip the scale, however... &gt; Still, it's a good start. It could become an esprima-based implementation of something very similar to narcissus, although I'm not sure yet what benefit this would have over it. This was mostly meant to be an educational exercise, and not "fit for any purpose". Still, one possible advantage it might have over Narcissus is that it uses only ES5 features, whereas Narcissus is using ES6 stuff like WeakMap.
use a switch/case statement instead or try/catch statements, slightly more control over a basic if 
I thought singletons were only one instance of a class. Here, there are many instances of a model, just no ones that have duplicate IDs.
Haven't looked too hard at the code yet but I can see this being useful. 
Will do! There's actually a play/pause feature that I implemented, but the example doesn't even show it. I'm working on it!
You're totally right. Using a singleton makes sense when you're dealing with one resource but in this case there could be many model instances yet they're not all necessarily duplicates; so a singleton wouldn't work. I'm not sure what I was thinking... but at least now I better understand what problem he's trying to solve.
I'm just now finishing a book on HTML5 / Javascript game development aimed towards younger readers. (HTML5 Game Development for Dummies) I'm in the final edit stage right now so it's not on the shelves yet, but you can take a preview of it at my site http://aharrisbooks.net/h5ge/SimpleGameDoc.html I start with a quick introduction of HTML and CSS (using games as examples) and provide a simple but complete game engine that makes it quite easy to build web and mobile games. I've used this material with middle-school and high-school students with great success. PM me if you want more information. All the examples and the game engine will be available for free on my site whether you use the book or not. 
It sounds like "point A" should probably be it's own function. I really wouldn't know unless you could show us something more substantial. For example, what happens if x or y is false? Maybe you just need to refactor your logic.
This is very interesting, but how does this work? Is the translation happening at the C# level or at the MSIL level? What features aren't supported? How are collections translated to javascript? Say I have a `List&lt;string&gt;` and I want to cast it into a native JS array, how do I do that? I always get nervous when I see these language translation projects without a 'pitfalls' page of some type. There are always holes in the implementation and tricks that you have to know. --- I ran the installer, opened the HelloWorld solution, tried to compile it, and got this: Error 1 The "ScriptGenerationTask" task failed unexpectedly. System.IO.FileNotFoundException: Could not load file or assembly 'Roslyn.Compilers, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified. File name: 'Roslyn.Compilers, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' Server stack trace: at Blade.Compiler.Models.ModelRegistry..ctor() at Blade.Compiler.Models.ModelRegistry.BeginRegistration() in c:\code\blade\source\Core\Compiler\Models\ModelRegistry.cs:line 46 at Blade.Compiler.CompilationPipeline.Execute(CompilationRequest input, Stream outputStream) in c:\code\blade\source\Core\Compiler\CompilationPipeline.cs:line 52 at Blade.Compiler.CompilationService.Compile(CompilationRequest input) in c:\code\blade\source\Core\Compiler\CompilationService.cs:line 37 at Blade.Build.ScriptGenerationTask.Execute() in c:\code\blade\source\Core\Build\ScriptGenerationTask.cs:line 78 at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs) at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg) Exception rethrown at [0]: at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg) at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type) at Microsoft.Build.Framework.ITask.Execute() at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() at Microsoft.Build.BackEnd.TaskBuilder.&lt;ExecuteInstantiatedTask&gt;d__20.MoveNext() WRN: Assembly binding logging is turned OFF. To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1. Note: There is some performance penalty associated with assembly bind failure logging. To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog]. HelloWorld --- When I start a new Blade project, I see this in my warnings log: `Warning 1 Could not copy the file "obj\Debug\BladeClassLibrary1.dll" because it was not found. `
Thanks for the feedback! Translation happens at the C# level, Blade uses Roslyn to parse the C# code and output correct JS code. It's kind of like TypeScript but using C# instead of some new language. There is an unfortunate dependency on the Roslyn June CTP from MS; I'll see if I can figure out a way to include the Roslyn dlls in the installer so everyone can use it. Curiously, do you get the same error if you create and try to compile a new Blade Class Library project?
Yes, I get the same error for a brand new project with no modifications done to the skeleton. What is the future of this project? Is this something your company uses internally, a side project, or..?
Ok, this is cool. But the problem I see with this (sorry!) is the same one as with GWT: why force a static typed language into a dynamic language? It causes so many headaches... especially if you have to deal with external libraries like jQuery.