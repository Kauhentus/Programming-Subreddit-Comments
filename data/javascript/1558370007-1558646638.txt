Proxies is the new meta! :D &lt;3
20 minute bundle, god dang! :D
[removed]
Hi /u/pzelenovic, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
No problem, here's more stuff to learn [http://lmgtfy.com/?q=how+to+load+db+file+into+sqlite3](http://lmgtfy.com/?q=how+to+load+db+file+into+sqlite3)
Stuff like this always blows me away. Our codebase is massive too, but we've never had builds that are over 3 minutes, and like 30 seconds for dev. I think it might be that we rewrite webpack configs from scratch when a new version comes out.
Probably for those times when we need a murder-robot-dog. With OP's library: class Barker { bark() { console.log("Woof, I am " + this.name); } } class Driver { drive() { this.position = this.position + this.speed; } } class Killer { kill() { console.log(`${this.name} has died`); } } class MurderRobotDog extends classes(Barker, Driver, Killer) { constructor(name) { super(); this.name = name; this.speed = 100; this.position = 0; } } const bruno = new MurderRobotDog("bruno"); bruno.bark(); // "Woof, I am Bruno"
I’m switching to Parcel.. so much simpler.
If OP is the author of the library, I'd suggest _not_ [writing to global variables](https://github.com/fasttime/Polytype/blob/master/lib/polytype.js#L504), and instead use module exports.
murder-dog-robot is a poster child for preferring composition over inheritance. OOP is busted anyway and inheritance is its worst part
We are web devs, so reading an article on a website straight out of 2005 doesn't give me that much confidence :D
&gt; murder-dog-robot is a poster child for preferring composition over inheritance Wrongly so, which was part of the point of my example. The poster child for composition was never actually composition. It was always multiple inheritance in disguise.
And so much less configurable
Yeah, for many applications parcel is pretty great. I'm not in a particular camp, but webpack's plugin system makes for some really powerful builds.
yeah its 20 minutes over \~100 bundles...
Yeah we've had many iterations on webpack configs, but we've had to rewrite all our configs for webpack 4. Actually, it was a great opportunity to rethink our entire implementation, which was part of the trigger for the blog post.
In my experience, you just have to take the reins, and make the changes. People will notice once their "bathroom break" is ruined as one person told me in the hallway recently.
yes! you are correct ;) @ThatBriandude
I tend to agree. Parcel is easy to set up and get a basic configuration, but difficult to customize.
Is that only WebGurus? If so, how on earth did you manage to spread that app over 100 bundles...
its all of our code... &amp;#x200B; 1. There are international only features/pages 2. We have a whole suite of tools and features we give to dealers. 3. We've probably got bundles that are never used (actually something, I'm currently investigating by analyzing our load balancer logs)...
in my opinion we build Uis to make our life easier. Of course we don't want to cancel the command line..command line will always be useful for the hard stuff. ;)
Instead of us, look for web security and browser exploiting. Security focuses on the platform, not the language. Also, If you want to deal with sensitive data that does not belong to the app user, do it of the browser.
Do you guys use TS? I love that the TS team bootstrapped the compiler, but it also means that it’s bound by node’s performance. Which means compilation is fairly slow. Got any tips on how to squeeze some performance out of the TypeScript compiler?
I disagree. A composite doesn't have to be the same type(s) as the sum of its parts, whereas multiple inheritance forces an object to be the same type as the the sum of its parts. Your example illustrates a single use case where it makes sense for the subclass to inherit from all types, but it may not be the case that you want your robot murder dog to be a dog type.
Problem sometimes is finding the time to make these changes, where more often than not who knows how to make them is needed in 30 places at once because of lowest denominator hiring processes and awesome management of priorities. Other than that, sure
Hi /u/malakepringles, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/wookiewin, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tracktech, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/makedonec888, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/the01guy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This seems like its more a project for someone's resume than actually useful.
Hi /u/lokeshkane, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Andrew Mead's Javascript bootcamp for rock solid fundamentals, followed by Colt Steele's React course if you want to get into front end development (It's one of the few courses that covers newer features like Hooks and context API thoroughly). Both on Udemy for $12/ea (Never pay more on Udemy) If you want something free, Traversy Media on youtube has great courses. If you want something free and don't mind reading instead of following video tutorials, Eloquent Javascript for the fundamentals followed by Javascript Allonge to absolutely master the JS language and it's quirks and fortes.
Built-in Date constructor [can parse strings in a format conforming to ISO 8601](http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15), and [RFC 3339 is a profile of ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Usage) so the difference is pretty small. Why do you need an absolutely strict conformance to RFC 3339?
Using newer versions of TypeScript, you can recompile only the parts of code that have changed. This should make it pretty fast in development! And, since it just becomes JavaScript, you could just make sure TypeScript builds before you push it into whatever image/server, and push the JavaScript along with it. Note that this may require some careful tuning of tsconfig and defining the shape of your dependency tree if you have a multi-project build you want to do with shared dependencies. There's a lot of situationally dependent things in this comment, but I guess I'm saying that regardless of your situation, there ought to be a way forward if it's the TS compiler that's your build bottle-neck.
I can agree with that.
Some of our bundles use typescript, but its not many, maybe like 1% of the codebase
Nice name...
Never knew the practical usage for Reflect and Proxy APIs. Cool stuff !
This elitist attitude needs to die, like, yesterday.
I can on Nightlt. Try DevEdition this week.
try Firefox DevEdition.
try Firefox DevEdition
try Firefox DevEdition
ff uses babel internally to map source maps and breapkoints
it works
Wes Bos' Javascript 30 course is a great way to jump in and work on some cool projects. And it's free. Other good free Youtube channels I can think of off the top of my head; Traversy Media, techsith, dev ed, the net ninja
Browser support for fetch will only grow as older, non-supporting browsers (IE) get phased out. It’s easy enough to write a polyfill, as you’ve already discovered. Fetch is more or less a delight to use so I would suggest using fetch with a polyfill and calling it a day.
how big is your site? our dev builds take a couple minutes and our prod builds can take longer... surprised not other people have ran into this. and this is with a bunch of these refactors already...
I personally like some of the design decisions behind the `fetch` API. For instance, responses with status code 400 or 500 are not treated as errors. Those are just HTTP responses like any others. This leaves promise rejection for things that actually went wrong in performing the request itself. However, fetch (and most definitely XHR) are quite low-level abstractions and require a bunch of boilerplate code to get things done. You'll eventually want to build utility libraries on top of those abstractions, so that you can get there faster. I would only do that for personal projects though. For you job, I would recommend that you capitalize on what the open source community has already done, and focus on building actual value.
*cackles in mangled prototypes...*
Project Page (?): https://github.com/paveldogreat/WebGL-Fluid-Simulation *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I concur. Multiple inheritance sounds like a really good way to code yourself into a corner down the road.
Very stupid prediction. People are forced to learn JS to make websites, which makes JS the English of languages. JS usage will keep growing in different runtimes infinitely, until JS is no longer required to know to make websites. We're at least 1 or 2 decades away from that.
[Shameless plug](https://soal.red/fennch)
What you think about updated React course from Stephen Grider?
Often Webpack gets slow not because of the code base size but because of what you are doing inside of webpack that takes time. Traversing the code base takes almost no time.
Sadly I still need to support IE11, but it looks `Promise`'ing 😉
Oct 14th 2025. I have that date set in my calendar long ago, and it will be a day of celebration.
I'll try and experiment some more and see what causes the most headaches. Thanks.
Every five seconds, someone on reddit asks this question. Every 10 seconds, someone on reddit gives the same answers.
Hi senocular. It is a *design* bug, not an implementation bug, but it is still a bug, and it is going to bite developers in the foot.
You can streamline the parts where you're changing classes on the same element by using toggleClass. [http://api.jquery.com/toggleclass/](http://api.jquery.com/toggleclass/)
Use toggleClass() instead.
Thanks for the insight! I believe the current private fields are limited, and not well-designed. I simply don't think that modeling them after an engine's implementation details is helpful for end users. It should be modeled from the outside in, based on what the users of the language want.
It's *good*. Not great. Definitely good. I took the old one and skimmed the new one, doesn't look like it fully embraces hooks iirc which is definitely the way the community is moving (Although it's absolutely worth still knowing class components) Stephens courses tend to cover new and trendy technology well before others like Mead, Steele, Schwarzmuller get to them, and has all the same good content, but doesn't plan or structure his courses quite as well.
It sounds like a conscious decision that was made given what options were available. Is that a really a bug at that point?
Good bot.
This is incredibly smooth on my 7-year-old MacBook Pro. Amazing work.
3.4 had a big build increase time which is being addressed in 3.5. But otherwise its not that big of an increase because the recent babel pipelines split the cheap transpiling and the expensive type checking.
Looks amazing on my iPhone X, too.
There's no reason you can't build a ui around a command line script.
Works great on my Latitude E6420.
Until you want basic functionality of CSS modules. `include` is impossible. It's been requested for over a year, and all they say is "wait for parcel 2". Great, what's an ETA? I've seen no indication that such a basic issue is being worked on.
Why not both? ;D -&gt;Use \`axios\`, it uses fetch, with a XHR fallback ;) [https://github.com/axios/axios](https://github.com/axios/axios)
That's so fun to just play around with for a solid couple of minutes. I recommend setting bloom threshold to like 0.02 (not 0, but very low), as well as fiddling around with the other settings. Very cool!
Same on my 6S. Impressive!
I prefer Employee[XYZ]
so cool!
spelling /s build a react app, use RxJS for some event handling maybe. Build an analytics dashboard based off of a dataset from kaggle.com, like the one on all the pokemon, that is a fun and clean one.
And it's multitouch. Very cool!
nooooice
Galaxy S8, in the barely functional bacon reader embedded browser, and it's still fucking beautiful
I just realized that you can do multitouch on it, too.
Incredible!
This isn’t actually accurate? It’s not a learning article your bot just picked up some keywords I think.
&gt; For beginner content, please post to /r/LearnJavascript instead of here.
Lmao I’m not the op I’m saying your bot is fucked up
Not a bot, Einstein. Check my comment history.
Thanks, Kepler, I misunderstood the intent of your reply. I get what you’re saying and why you feel this should be limited. Excuse me if that first response looks EXACTLY like a bot response.
It's ok, it's a templated macro.
i delete it
Amazing work!!
# Shoryuken!
Thanks for the feedback! I should have mentioned it was made for desktop as it's generally used for searching and downloading JSON from api's
Amazing, even looks good on old iPhones.
I can agree to a point, Webpack's for sure makes the biggest impact to build speed. However if you have 100 bundles transpiling ImmutableJS for instance. Using webpack's DLL plugin, or reducing any duplicate dependencies can have massive improvements.
We have about 170 engineers working full time on the code base, and its been in development since 2006.
So...very big.... &amp;#x200B; ...and it's far from tech debt free. Plus I'm sure we're probably compiling completely dead code.
This is an Ad...
Is it a glitch in my browser or is it supposed to look like this once everything fades away? https://i.imgur.com/q0L7xYo.png
For the slide up/down part, you can simplified it like below. let viewMore = $('#view-more'); $('#more-products')[viewMore.hasClass('view_toggle_active') ? "slideDown" : "slideUp"](); Do it before toggling the other elements' class, and use `viewMore` in place of `$('#view-more')` when toggling.
Glitch in your browser
super impressive. amazing work
This looks incredible at 60fps. Does webgl support 120 or 240 fps?
You obviously missing the code for multiplying `textToCalculate' values before it's added into the `total` variable. But your description doesn't clearly state from which value to use. It's clear that `ModelName` is a property of an object, but it contains a string rather than a number. Is `ModelName` an element ID/class? If so, then you'll have to retrieve the element first, then retrieve its value. &gt; Some of my text boxes will be (ModelName * 100), some will be (ModelName * 50), others (ModelName * 37), etc... Where do those `100`, `50`, `37`, etc. numbers came from? And how are they chosen for the calculation?
I am easily amused.
They all take the best of the others and mix it, same like every remake its best to stick with the stable and successful one with one of the more big companies backing it and an active development team that will make sure it only gets better in the future!
Compile with Babel and use TSC strictly for type checking.
I'd prefer they just allow JS in their templates instead of their proprietary template language.
!thanks
Running pretty smoothly in Safari on my 1st gen iPad Air (2013) as well!
Yo this is incredible, good on who ever made it, would pay more than a dollar for the app
+1 for axios
Hi /u/empire-of-peace, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Maybe you can use Angular or Vue.js .
Nice work! What tech stack you used to develop such application?
I think MDN is a good place for studying web. [MDN Java​Script](https://developer.mozilla.org/en-US/docs/Web/JavaScript)
Great thanks, I’ve been working with redux but not with rxjs. Analytical dashboard sounds cool. What about react native, is that something a React dev should learn ? Good advice with the OOP, I think I’ll go with c++ cause that’s used in unreal engine and can be used in multiple game development engines.
Super fluid on my Pixel 2 in Chrome!
really awesome! does the decay time cause a slow down?
And it supports 5 touch points. Nice
Amazing!!
Mind-blowing looks cool.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Well for starters to remove jQuery and use vanilla JS.
Don't, just do what he tells you to do, it's no one's fault but his own.
Yeah. I‘m intrigued by svelte.js but I’m wary of how fast it seems to be iterating despite the fact that it‘s essentially a completely new language. The `export let` syntax to define properties is guaranteed to confuse people in the future given that with regular es6 imports, you can’t redefine an exported `let` statement from outside the module. And the whole `$` sign means reactive stuff seems half-baked at best. It’s difficult to Google, completely inconsistent with how variable declaration works outside svelte, and after 3.0 was released, Rich Harris pulled an audible to support Observables after spending a bunch of time creating a custom store interface, just to chase some clout with the RxJS folks. Also, the template `block` syntax itself is kinda senseless: blocks start with hashtags (`#`), end with slashes (`/`), and can optionally continue with colon-based keyword blocks (`:`)? i.e.: ``` {#if something} &lt;div&gt;true&lt;/div&gt; {:else} &lt;div&gt;false&lt;/div&gt; {/if} ``` and then the actual interpolated code inside blocks is completely arbitrary. For instance, `{#each expression as name, index (key)}`, like what I’m supposed to remember that `as` is a keyword (it’s already a completely different thing in typescript), it’s followed by two identifiers separated by a comma and an optional identifier in parentheses (without trailing comma?) for the key? I dunno. I decided a while back that I should start looking beyond JSX because render props/higher-order components are just horrible, but when you switch back to templates you’re completely at the mercy of the language designer, and svelte.js just doesn’t seem to have a coherent philosophy guiding language features and eventually they’re gonna implement a horrible `GOTO:` equivalent for html stuff (if they haven’t already).
I know really. But the problem is that i personally want to develop my own skills in newer EcmaScript and workflows. I can do this at home, yes. But it feels stupid to work with jQuery at work? Am I totally wrong here?
Are you interested in extending this by means of a transpiler? This would make closure variables passing possible, implicit parallelism, software transactional memory synchronization and more.
&gt;Most of the time you want a method argument. Sometimes, you want composition. Occasionally, you want inheritance. That’s a pretty good rule of thumb for OOP
Yeah. I‘m intrigued by svelte.js but I’m wary of how fast it seems to be iterating despite the fact that it‘s essentially a completely new language. The `export let` syntax to define properties is guaranteed to confuse people in the future given that with regular es6 imports, you can’t redefine an exported `let` statement from outside the module. And the whole `$` sign means reactive stuff seems half-baked at best. It’s difficult to Google, completely inconsistent with how variable declaration works outside svelte, and after 3.0 was released, Rich Harris pulled an audible to support Observables after spending a bunch of time creating a custom store interface, just to chase some clout with the RxJS folks. Also, the template `block` syntax itself is kinda senseless: blocks start with hashtags (`#`), end with slashes (`/`), and can optionally continue with colon-based keyword blocks (`:`)? i.e.: ``` {#if something} &lt;div&gt;true&lt;/div&gt; {:else} &lt;div&gt;false&lt;/div&gt; {/if} ``` and then the actual interpolated code inside blocks is completely arbitrary. For instance, `{#each expression as name, index (key)}`, like what I’m supposed to remember that `as` is a keyword (it’s already a completely different thing in typescript), it’s followed by two identifiers separated by a comma and an optional identifier in parentheses (without trailing comma?) for the key? I dunno. I decided a while back that I should start looking beyond JSX because render props/higher-order components are just horrible, but when you switch back to templates you’re completely at the mercy of the language designer, and svelte.js just doesn’t seem to have a coherent philosophy guiding language features and eventually they’re gonna implement a horrible `GOTO:` equivalent for html stuff (if they haven’t already).
I can trip balls to this
thank you very much!
jQuery is can work in little project while labor cost is low. If I am the boss, I love jQuery. I think you should improve yourself then find a new job which need framework.
Holy shit, this runs sooo smoothly on my phone I just can't stop
What features of jQuery do you need to use these days?
If you have everything written in Jquery, it depends on the effort and time it takes to write everything from scratch. For a new project: There's simply *no benefit*. Bundle size is larger, it's a dying technology that gets less support every day, most of the contributions in the eco system are outdated. Jquery was never meant for building UI's, it's mere purpose was to cover browser inconsistencies, layout-inflating remains the oldest and most troublesome approach to UI design and leads to messy code, maintenance problems and apps that don't scale easily. Option #1 would be to remove jquery in favour of "vanilla js", though that is still layout-inflating and the eco system for controls and parts is practically a zero sum. It's also the slowest path to performance. Option #2 would be to use a framework. You safe bundle size, it'll 50% less code, the code that's left over will be clean and understandable, there is a huge collaborative eco system for practically everything. They're fast because they cancel out the dom (f.i. by avoiding layout thrashing as they read/write to the dom in order, they diff updates so only the parts of the UI that need to change will do so, they schedule and virtualize content in general).
Someone has to say he may be right. Can you answer the opposite question ? Why *not* using jquery?
It ran amazing on my note 7 until it exploded.
Typescript is a superset of JavaScript, they are both great, having them both allows for different usercases. For example, using TS on servers is nice with its static types. JS is great for prototyping when things aren’t as definite, you can develop quickly with dynamic types. Having them both allows developers to “level up” code when the time is right. The JS ecosystem has allowed for some amazing innovation over the past 10 years so I wouldn’t be so quick to put it in a box on the shelf.
&gt;se a framework. You save bundle size, they're all smaller than jquery, it'll be 50% less code, the code that's left over will be clean and understandable, there is a huge collaborative eco system for practically everything, scaling up is easy. They're fast because they avoid layout thrashing as t Could you make a recommendation for option #2? What framework would you use for small 4 - 10 page websites?
You must realize the fact that technology is evolutionary. Ten years ago program language A was invented. Now we find that language A has many problem and has to invent new language B to solve problems. In the future, new language C will be invented to solve new problem and over again and again. Embrace change !
These are the common choices more or less: [https://www.npmtrends.com/react-vs-@angular/core-vs-svelte-vs-vue-vs-preact](https://www.npmtrends.com/react-vs-@angular/core-vs-svelte-vs-vue-vs-preact) React is the default, it was one of the first frameworks to stray from templating and OOP, going into functional territory. Preact is React but smaller. Vue is React but with an Angular-like coating. Angular is focussed on OOP templating. Svelte is template based, but has no runtime which makes it small. If you research these you'll find the one that suits you best.
I'm going to play devil's advocate here for a moment, and throw some questions back to you. &gt; Personally I'm against jQuery, since I'm a young developer, who wants to work in an up-to-date workflow. So let's look at it from the other side. What reasons do you have for [whatever alternative]? You've mentioned: "I'm young", "an up-to-date workflow", "the possibilities with ES6", "personal development", and a "we want to move on". ### I'm young How is this relevant? ### up-to-date workflow, ES6 Having a good, up-to-date workflow is probably your most reasonable argument. But then again, the _workflow_ is not really that much related to which library you use or do not use. So, how is using jQuery precluding you from improving your workflow? In a similar fashion, you can use ES6 _and jQuery together_, so this doesn't relate much to jQuery. I'm going to guess that you're blaming "jQuery" for a larger absence of tools you _want_. We'll get to that in a moment but meanwhile, it would be a lot more useful if instead of generically blaming your problems on the particular use of jQuery you did a better job of analysis and better identified your problems with the current situation. ### personal development This is a _fair_ concern but little more than fair. That is, it's important for you to seek personal development; it is _fair_ and _reasonable_ to expect that a job would provide you with opportunities to learn and grow technically and professionally. I insist, it's perfectly reasonable to expect this. But then again, that should compromise neither the projects nor the company. That is, you should **not** expect the company to provide that "personal development" _at the cost of the success of a project_ or the success of the company itself. And this is important because it means that you're a _professional_, and that you know that decisions about a project should be made taking into account a lot of different factors. Cost, in particular, is a very relevant one. It's of course important to invest resources in keeping a project reasonably up-to-date (previous point), but it's _more_ important to keep it working and cost-effective. The concern of "personal development" is important, I insist, but relatively much less important than these others. What you're asking requires, quite probably, a _noticeable_ investment, and you should -as a professional- consider if that can be balanced against "personal development" - maybe, but maybe not; I can't know, but you shouldn't assume either. You haven't explained why the insistence on using jQuery, You haven't explained if, maybe, this is because you're reusing code that is already built, tried and tested. I won't assume that, but since you haven't specified, I can't assume otherwise either. Personal development, in any case, is something which can be achieved in various ways and it doesn't _necessarily_ have to be done on all projects. You might have a much more reasonable argument if you proposed this as _research_, which is generally done on small, secondary, and/or non-critical projects. This way, you're not compromising -or not so much- important projects' success, and you have _other arguments_ that support you, not _only_ "personal development". I mean, you try _some_ new tools, you _evaluate_ them objectively and then you _all_ compromise and accept the results of the evaluation. Did the use of X tool really improve something? If it did, you all agree to use it in more projects. If it didn't -or not enough-, well, at least you got your chance to try that new tool and work with it in a project. Finally on this point, you _seem to be_ assuming something wrong: That you cannot learn from tools that are not the latest and most up-to-date. If you do think that, you are **extremely wrong**. You can learn _a lot_. ### we want to move on There are three points to think about here. I'll leave out the one about "moving on", because it's mostly related to the things I have already mentioned above. But there's still two important points: "want" is not an argument. You cannot present a professional argument to your boss or to anyone based on "because I want to". You do it twice above and a third one on a comment. Do not do it. It's not an argument. But the point that most interests me here is this "we" you mention. Because, you see, up to that _we_, this all sounded mostly like a childish, selfish "boohoo, I want to play with the cool React thingy" (no offence meant, but this _is_ what you sound like when your arguments are reduced to "I want" and "this is old, yuck"). But now you mention a "we". So, who is this "we"? Do others in the team agree with you? Who are these others and what are their arguments? ---- Now, I'm going to add a few more questions, not in response to what you said but to what you didn't say. What are the actual requirements of the projects? i.e. you said "static sites", but _fully static_? What about browser support? About that code reuse I mentioned, how is it? Do you actually reuse code from previous projects? Do you reuse tools, structures? Do you, maybe, have components -developed in-house or external- that you reuse throughout your projects? Something? Anything? Nothing at all? And finally: Have you honestly, and in a non-confrontational manner, asked the person responsible about all this? Have you had a _conversation_ with that person and talked about _their motives_?
First: Go apply for a different job. Second: Nothing inherently wrong with jQuery, it's just outdated. If you have VERY old browsers to support (like IE7, IE8, and up) then it makes perfect sense because most modern libraries only support IE9 and up but require polyfills. If your target audience is mostly on IE10+ (which is likely the case) then you would benefit from using React or Angular or Vue. Reasons: 1. Developer comfort. Modern libraries are more fun and easier to work with than whatever you're currently doing with jQuery. 2. User experience. Modern libraries function as single page progressive apps out of the box. Offline capable and blazingly fast navigation is a guaranteed and easy improvement for everyone involved. 3. Business interests. Seriously, would a car manufacturer like Mercedes or BMW ignore Tesla's performance and innovations? Of course not, you need to catch up, keep up, and preferably outdo them. 4. Customer interests. A modern website converts their users significantly better. I've done plenty of A/B-testing on medium-sized commercial websites and making things faster ALWAYS makes for higher conversion rates. 5. Employee retention. If you give your employees only outdated and boring tools, making them feel that they are missing out, then they'll leave the second they get another offer. I'd build a list of reasons like these, do a bunch of research online (find some statistics of before and after situations when it comes to SPA/PWA and conversion) and sent it to your manager. Tell him that you strongly recommend choosing a modern library or framework (I'd advise React) for the aforementioned reasons. Include his boss in the email. Tell them you'd like to give them a presentation about it, plan a date in their calendars. Be proactive. Have your presentation ready and demonstrate that setting up a website with React is effortless, quick, and that you no longer need jQuery. You want to modernise your stack. Looking forward, you strongly advise against jQuery except for legacy projects. End the presentation with the final point: - Our sales team can reach out to existing customers with outdated websites and offer them to modernise, for a price. You can upsell them while doing so: Sell them a new design, new features, new technology, maybe a new CMS, maybe new CRM, etc. But most of all, write up your resume and apply for other jobs. Take it when you can because your current work environment seems to be made up of old-fashioned people who refuse to innovate because they're scared of learning.
Congratulations! I found a small typo in the final screen: "You recieved"
Are you the dev?
not sure my computer can handle if, at least my phone definitely can nice
Good job... I think development is such a great tool for a child's education and your son has made a great game, top lad!
Something strange is going on with memory. f12 -&gt; perf tab -&gt; record about 20-30 seconds and look at the profile.
I listened to an interview of the lead maintainer of Svelte, and if I recall correctly, I think he was saying that he built it largely because his own use case demanded certain kinds of performance that React couldn’t achieve for him. So it was born out of a real need, apparently.
This sums it up well. I think the separation of JS and TS also greatly benefits beginners. I could imagine it being very intimidating if one had to use TS on their first day with the language. JS provides a simple introduction.
That is very interesting. I didn't know you could do that! I took a look in firefox; the program is generally 96% idle, with 3.9% in Gecko and various DOM/UI, with my program taking up about 0.1% of time. The memory remained pretty flat at 4.5mb, but I don't think that is unusual; in aggregate view filtering for local scripts my scripts are taking up about 1% of the total memory. So I am not sure what I am missing but wow this is cool, I had always wondered how to profile javascript!
You dont convince your manager or boss to change something that's working perfectly. You as an individual want to move away from it? do your personal projects jQuery-free, learn all those fancy things you want, and get a new job at a place that fits you.
More then 5 touch points as I see
Senior frontend dev here. Please be mercy with your kid. Js is not the best choice for a beginner. In my opinion python would be much better. Great game btw!
I saw the simulation and recognized by its style. It's the same as in the android app. I got the full version and it feels amazing playing with it.
A couple of things: 1. jQuery is not a framework, or is it in the same category as a framework, in terms of its functionality. It’s primarily a library for cross-browser abstractions over native the JS/browser API’s. People often combine jQuery with frameworks like React or Angular, because they do different things. 2. JQuery is about 30kb gzipped &amp; minified. The react core library (not create-react-app) appears to be about 39kb gzipped &amp; minified, while Angular 2 is over 100kb. So jQuery is hardly a burden due to bundle size alone. Now, if you’re just using it for a couple of functions, then sure, leave it out. But it’s not going to make a huge difference to bundle size. There are plenty of reasons not to use jQuery. Or rather, reasons not to *abuse* jQuery: jQuery makes direct DOM manipulation feel super easy. But that easiness can be dangerous for long term development. In large applications, it’s often a very bad idea to directly manipulate the DOM without incorporating those changes into some sort of reactive flow. It often leads to race conditions or other various bugs that become hard to fix later on. That’s the real value of frameworks. A framework offers an opinionated architecture for your app. It enforces a cohesive structure that eliminates entire classes of errors. It’s the deliberate limitation that makes them powerful, not necessarily their ease of use (and they do try to make things feel easy as well). That said, there is still definitely a place for jQuery. For small, simple apps/pages, it makes a ton of sense. You don’t need a framework because the complexity is so low in those cases that jQuery-based DOM manipulation is probably totally fine.
Minified code is not meant to be read or reversed. That's what source maps are for.
Although using Python for my work and loving it to death, I don't see the problem with Js. In fact, I really like Js for toy projects as it's so easy to tinker around with user input and rudimentary frontends. (Admittedly, as I'm a data scientist who never codes frontends, this may be a very flawed view. In fact, I've never even attempted to write a GUI in Python.)
I also want to add that the TypeScript type system is somewhat opinionated in the sense that the compiler can’t infer types super well for every conceivable case (I’m specifically thinking about curried functions, although I’ve heard they recently made some real improvements in that area). And more generally, TS was clearly designed with OOP and imperative programming styles in mind. That’s fine, I like those styles a lot. But ordinary JS allows for a whole lot more options than that. You can write JS in pure functional style (almost) if you want to, and it’s pretty straightforward, although ideally you would have a FP-style compiler to help you (this why PureScript and ReasonML exist). If you try to write functional style in TS, it will feel a bit clunky, tbh. But it’s getting a lot better very quickly. I’m also super curious about Microsoft’s new “bosque” language. It looks a lot like typescript, but appears to be more functional? Vert interesting...
Cool. I’m about to write a couple of Express-based backends for some personal projects. I’ll give this a look.
I don't have experience with it, but if I was giving a presentation on it I'd surely have...
The problem, I guess, is in how you do input. const async_timeout = async ms =&gt; new Promise(res =&gt; setTimeout(res, ms)); async function myinput() { input_on = 1; keypress_on = 0; // Wait for input_detected to be set to true but don't block browser. while (input_available == 0) { await async_timeout(50); } input_available = 0; // ... } In particular in that while. You are creating and discarding a Promise every 50 ms. That's 200 promises created and discarded each second just to simulate a `sleep` instruction. Of course the _correct_ solution is to use the events and to _let them drive the execution flow_. But even if you don't want to do that yet, then the next correct approach is to invert the flow control there using a simple `setTimeout`, without wrapping it in a Promise.
Oof, I pride myself at being a younger coder than most people, and this makes me sad :(
Welp, I’m gonna be unemployed lol
Hi /u/unz1974, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt; Typescript is a superset of JavaScript To make this absolutely clear: Apart from three non-necessary TS-exclusive features enums (can now be achieved using JS standard conform "as const" on object literals), namespaces (just use modules and ignore this feature), and a special import=export/require syntax, **if you remove the type annotations you are left with 100% "ES next"**, i.e. 100% ECMAscript. You can see that in the Babel TS plugin: It does not support those three features I mentioned, because all it does is remove the type annotations. Same as the Flow plugin for Babel. Transpiling is completely orthogonal and optional! If you use the Babel workflow with TS you donÄt even use that capability of `tsc`. So the "superset", part from those mentioned features, only is... the types! By bundling transpilation in TS they (TS team) unfortunately created a lot of confusion. In reality TS is not that different from Flow. If you use the Babel workflow it's pretty much exactly like Flow - you write **Javascript** and add types.
i am a bot weary of axios at the moment after taking a look at &amp;#x200B; [https://github.com/axios/axios/issues/1965](https://github.com/axios/axios/issues/1965) &amp;#x200B; i.e. im not convinced of the roadmap for this &amp;#x200B; projects last updated a year ago &amp;#x200B; [https://github.com/axios/axios/projects](https://github.com/axios/axios/projects) &amp;#x200B; although there does seem to be alot of resource from the community for some reason the number of issues and open PRS has only grown.
Note 7 jokes will always be 🔥
I think i already answered this, in the original question. My opinion is, that it is an unnessecary dependency to load on every page. Also; personally its a matter of motivation. I get motivated by learning new stuff, and keeping myself updated.
Not any that i couldnt do as easy with vanilla js.
Should have read the code before playing. I died in 2 moves. Brutal game.
Thank you for this post. Alot of nice points.
I put packages to manage the monorepo like lerna in the root packages.json and all package dependent dev deps in their own package.json The main advantage of this setup is that you can extract packages quickly from the monorepo into their own without breaking something.
&gt; it is an unnessecary dependency to load on every page If you're using the CDN, chances are your users already have jquery in their cache, as its still [very widely used across the internet](https://trends.builtwith.com/javascript/jQuery)
I will be working on this until the talk. It's about 5 weeks away so there's plenty of time. Is there anything you are not sure about regarding Svelte?
If you're dealing with static pages, it sounds like you don't need anything more than jQuery, and it really may be your best option. But if you find yourself with any free time, I'd suggest some side projects that would allow you to explore some of the newer libraries and workflows. And if you can make something compelling, providing tangible benefits towards your current work, you might be able to convince your manager to adopt it. I've done this a few times myself. But start small. I wouldn't try to disrupt your entire, established workflow. But anything that you can show that will clearly save time/money and can be easily integrated into what you guys already have, I think might just have a chance.
[removed]
Hi /u/Chrimlino, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I would always opt for putting *any* dependency, whether it's for dev or runtime or test *as close as possible* to the codebase that actually needs it. There are some that advise to hoist them up as high as possible but to me it just creates more confusion.
Hi /u/B3zo0, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/cheako911, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/notop20, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
The funny thing is, i never mentioned that i want to change to a framework. I just want to covert to Vanilla js. Its the fact that i cant see the reason why anyone would use jQuery today.
Hi /u/texxxo, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/laser-dave, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; Of course the correct solution is to use the events and to let them drive the execution flow. But even if you don't want to do that yet, then the next correct approach is to invert the flow control there using a simple setTimeout, without wrapping it in a Promise. That is interesting but I am not sure I agree. I had assumed async/await to be lightweight, especially since it returns control to the UI thread while you wait. I not aware of any other way to wait on user input without having to code a new function to handle the output of the last input statement every time you want to ask for user input. That feels more like a kludge than anything else; Javascript really does need a sleep() function, running on the UI thread was a decision made during a time when processors were single threaded. Being able to wait on user input is vital, whether you want to simulate it via hammering events and function calls to do it, or whether the program does it inside of regular program flow, it's something that needs to be done.
Good idea! We plan to do Python after PHP (maybe). The reason we didn't do python is that I felt shell script would be better for our environment, and you can't run Python on a web page (well now you can; see web assembly). Actually we'll probably never learn Python. I just don't see a use case. However, if Python went head over heels into supporting web assembly it actually has a chance to take over the world; currently Rust is doing that, but I think Python is in an excellent position to take 2nd place and then edge out Rust. But not as an interpreted language.
Best reply of all time. That's what I myself meant ;-) &amp;#x200B; I would add: If you want to play, to being furstrated, just ask your boss a little time during the week to do some R&amp;D Stuff (namely playing around with the last JS toy everyone is talking about)
I would have preferred if it was a transpiler for react. From the presentation, it sounded like he just used if statements to determine if a change occurred. Couldn't the react team implement something like that natively to improve performance?
Hi /u/clientside_nyc, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You said: &gt; ...so there's probably not really a need for any fancy JS framework, yet - however... Which suggests despite not having a need, its something you'd be interested in ;) jQuery is still useful today. Looking at https://netmarketshare.com/, it looks like IE still makes up close to 10% of desktop browsers. I, for example, just cannot get my father to stop using it. Stubborn, old man. But outside of compatibility concerns, you can quickly go through http://youmightnotneedjquery.com/ and just see how much more terse jQuery is compared to many of its vanilla counterparts. After working with jQuery and then switching over to vanilla, I found myself missing it. Sure, there's something gratifying about dropping dead weight and reducing dependencies - getting closer to that metal - but at the end of the day, when it comes down to getting the job done, jQuery really does help.
[removed]
Using variations in whitespace for syntax and flow control is extremely bad..
Awesome! My son and will be doing the same. He's already learned HTML and done some js. Looks like we have some steps to follow in. Great job!
He's doing bash too apparently [https://www.reddit.com/r/linux/comments/bpa0fk/my\_11\_year\_old\_son\_wrote\_a\_game\_in\_bash\_shell\_on/](https://www.reddit.com/r/linux/comments/bpa0fk/my_11_year_old_son_wrote_a_game_in_bash_shell_on/)
Well... I'm not arguing whether a `sleep` function is _needed_ or not, but more that trying to _emulate_ it, in the way you were doing, is generally a _bad idea_ (i.e. it's going to have a non-trivial cost). Particularly, wrapping a simple timeout in a promise to await it is quite wasteful. It is, indeed, noticeable how it affects the responsiveness of the game's input. Again, I'm not arguing whether your approach is bad _in general_. Just that, for this it doesn't really work that well and it's better to adapt to what the platform works best with. And in this environment, reacting to events generally works much better than having a hammer-sleep-loop.
I love python for terminal stuff, but running js in a browser is so convenient and easy compared to python. (IMO)
Somebody give this guy a cookie mines are still in the oven Awesome work man
It's basically Dark Souls 4.
dude tf? i just realized how bs my 6th grade coding teacher is
No worries, it's a marathon, not a sprint. Momentum matters more than when you started.
I'm aware that it's not efficient to shoehorn waiting on user input in an event driven environment, but can you tell me another way to do what we did in the game? If there is no other way then it's not bad. I am however open to any explanation of why it is bad, it's just that no one has yet explained this to me and I can't find it on the web. In fact given the tutorials surrounding async/await it seems painfully obvious that the reason that syntax was invented in the first place was to wait on user input...
While I know that async is for writing asynchronous code, I can't seem to get why there are so many async functions here. Care to explain further, thanks and good job.
Very nice!
This is beautiful. It was smooth on my Pixel 2. I'm downloading the app.
Never said it was a framework, neither is React/Preact/Vue in the strictest sense. &gt;For small, simple apps/pages, it makes a ton of sense. You don’t need a framework because the complexity is so low in those cases that jQuery-based DOM manipulation is probably totally fine. Anything you can do with Jquery can be done with less code, real components, more support for leaf-controls/controls and usually smaller bundle size with a view layer. No matter how tiny your app is. It makes little sense to start anything in Jquery unless that's the only thing you know. &gt;JQuery is about 30kb gzipped &amp; minified. The react core library (not create-react-app) appears to be about 39kb gzipped &amp; minified, while Angular 2 is over 100kb. Size will also shrink drastically since Jquery produces more code in general. Don't know much about Angular. You have lots of options to cut into React using aliases or alternatives. Vue is about 20, Svelte 0. package-size react,react-dom react,react-dom-lite nervjs preact package size minified gzipped react@16.8.6,react-dom@16.8.6 882.36 KB 115.83 KB 36.27 KB react@16.8.6,react-dom-lite@0.4.0 456.54 KB 69.52 KB 21.42 KB nervjs@1.3.13 72.34 KB 26.77 KB 9.85 KB preact@8.4.2 21.42 KB 9.17 KB 3.51 KB vue@2.6.10 237.65 KB 68.06 KB 24.02 KB
Why do I not find these things when tripping on acid?
Learning another programming language, say PHP as a JavaScript developer, is like an order of magnitude easier than learning German as an English speaker. There is not a whole dictionary of thousands of words. If is still if. It is just minor syntactical things, like $obj-&gt;prop vs obj.prop. That anxiety that learning a new language will be too hard is just so lame.
Wow nice!
Yeah I know, it's just a big ego hit :D
Because he doesn't know what he is doing and neither do I :) It's probably only "needed" in the routines that await myinput().
And also C https://www.reddit.com/r/cprogramming/comments/bp9x3y/i_taught_my_11_year_old_son_to_program_in_c_and/?utm_source=share&amp;utm_medium=ios_app
This is really cool. I would like to get my children interested in coding someday. Whatever their passions, it would be nice if they integrate them to coding. My passion is coding so I code for coding lol.
Yeah, but where are they?
It's probably the infinite async cascade; when you use async in a nested function, all functions above it need to be async too.
Using two fingers and making them hit each other is so satisfying
I'm out of the loop. I played a text-based Spider-Man game on my TI/99A in the 80's.
That's exactly what I do. I run tslint in vscode only, use babel to strip types, then have a "typechecker" npm script that runs tsc in watch mode ... which I don't even keep running all the time since vscode does a pretty good job running things through TS as it is.
How can I play on mobile browser?
If their build support is exactly what you need and you'll never need to tweak the configs, sure.
..... something awesome without modern tooling support (linting, typescript), and yet another template language to learn
Hi /u/MalhotraRohit, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt;Anything you can do with Jquery can be done with less code That is very untrue.
Interesting hook, but I can’t handle any more disappointment
I'll try to explain a bit. First a small comment: No, `await` syntax was not added to wait on user input. It was added to allow people to write their code in a more linear/imperative way. The full explanation is [longer](https://www.tinselcity.net/whys/so-much-async), but the basic idea is that callbacks -&gt; promises: re-inverts the _control_ of the flow that callbacks produce. promises -&gt; async/await: is purely superficial; allows _writing_ the code in a visually linear way, nothing more. Anyway, I was going to write an explanation... in fact, I've already written about 400 words, but I don't think it's really needed. I mean, you don't really need to change much, just split it in some places and move it around. You build the _game_ as a state machine. You _remove_ all the places where you have `var cmd = await myinput();`. Instead, you _only_ read the input in the main loop. Your main loop right now, removing the initial salute and name input, looks like this: async function play_game() { room = 1; playing = 1; while (playing) { await goto_room(room); } } So it _just loops_ but doesn't do much. Instead, what you do is replace this with an actual "game loop". Something like **(note that this solves nothing; it's just a first step)**: async function play_game() { setUpInitialGameState(); playing = 1; while (playing) { let command = await myinput(); play(command); // probably better gameState = play(command, gameState); // and then showOutput(gameState); // but ignore this for now } } As I said, this solves little yet. We're still actively awaiting for input. But at least, the game code has been separated from the input code. All input is read in just one place. The `play` function will of course need to know what to call not only for each room (as `goto_room` did) but for each "game state". Say we're in the pirate area but the pirates have already come and gone, that is `pirate_status` wouldn't now be managed in the `pirates` function as a whole thing, instead, we'd have some state that says `{ room: 3, pirates: 'gone'}` or whatever. The idea is that, you keep all game state together and separate it from _each_ game action. There will be a state machine -or a rule system or whatever- that does _just_ that: It receives the current state and a command and decides that this or that action should be done (or that you've written something invalid). Right now you have a bunch of small, dispersed state machines. So, anyway, we do all that and we're still actively listening for input. Yes, but now, changing it is _really simple_. We do 2 things: One, we simply remove the loop above completely. That `while(playing)...`? Out. And two, instead of actively waiting for input, we realize that we know when there is input to be processed. In your key handler right there, when enter is pressed, instead of simply signalling `input_available` what we do is call the single entry point to act on the game: case 13: /* enter */ let command = input_buf; input_buf = ''; play(command); break; And that's it. Now the all input is received in an event driven fashion, and we no longer need active sleep loops. While no input is received we _really_ do nothing. --- Just to add a bit on this: Do search information on game loops. There's a ton written about it. Much of it won't be for _text driven_ games but it still applies. In fact, you can still keep keep an internal game loop, separate from user output, so that you could have stuff happen independently from user input. Imagine a dog running around the beach, and while you're thinking about what to do, the game outputs "the dog comes from the cave", "the dog leaves into the mountain", etc. Also read about separating the user input, the game, and the output. This is absolutely _key_ when building a game. Not only to not block the game for input, but mostly because the game becomes much more maintainable and better structured. Imagine you have your game built as discussed and you now decide that instead of doing a keyboard input based interface, you want to do a Lucas and offer a number of "action buttons". If the code is well separated, the changes are easy. If not, it will mean changing most of the code. I'm sorry I can't write much more right now, but if you need links for further information, just ask and I'll do what I can. But it should be easy searching for terms like "game loop", or look for articles on "game design patterns" (there's a pretty good book available online under that name, iirc).
And also in a C128 simulator: https://www.reddit.com/r/c64/comments/b6e60t/my_son_wrote_this_game_in_a_c128_simulator/
/r/quityourbullshit
I don't know if I understand the question correctly but when you want to send a message to your phone this may be right https://www.youtube.com/watch?v=PxphXQmtHLo . In this article https://www.twilio.com/whatsapp/api are also lots of examples for different programming languages.
This article was writen in 2017 and shared here pn reddit multi times...
Take a look at https://www.freecodecamp.org/. I found it a very nice way to learn when I started getting into web development and it's free.
That’s awesome...I’ve explained cyclomatic complexity to my three year old but we haven’t started coding together yet because mommy limits his screen time and he still thinks every screen is a touch screen like the dang iPad...
This should be a bannable offense.
It depends on a number of factors and is best found through testing. Test with various sizes and validate that you keep the performance you need in the various scenarios and environments you need to support.
It's still a new post, new learning for someone :)
Look at the dates of the posts, how the posts start, and that is apparently a 11 years old coding in all those languages.
What do you mean by this? Could you please post more unfolded suggestion?
Wow, that's a pretty bad bug.
Amazing !
I don't think this is real.
yeah but wouldn't you agree that if another developer suggested storing 40,000 js objects in browser cache as opposed to breaking this up with database calls that would return in &lt; 1s that this would be a big red flag? assuming a backend response time of &lt;1s, wouldn't storing even &gt; 1k js objects in browser cache seem excessive?
I'd say there's a distinct difference between how much data you have cached, and how much you want to try to render at once. In theory, having a large (100K? 500K? 10MB?) amount of data cached in the browser costs nothing but actual memory, plus the one-time fetching and parsing time. As long as you're not trying to continually process and update it, it's just hanging around. As far as rendering, you should probably avoid trying to display more than a few hundred items. They're not all going to fit on the screen anyway, so start thinking about either doing pagination or virtualization.
I work now on a transpiler - https://github.com/awto/effectfuljs and it can be used to achieve the following things (I plan to implement something like this myself but don't know when) ok, for example, I use pseudo-API (fork - starting a new thread) 1. using closure variables let count = 0; fork(function thread() { count++ // some other payload }) Here count value can be passed to and from WebWorker and synchronized using locks or (better) something like Software Transactional Memory, where we maintain a trace of changes and re-run conflicting threads. The ability to reset all variables values and the control state can be achieved using the same transpiler. 2. Implicit parallelism. With this no needs to make a function for thread, the transpiler can automatically check analyze data flow dependencies and run parallel threads if needed. Say, { "par"; // specifying we want this block to run in parallel ("seq" cancels this) const a = task1(); const b = task2(); task3(a); } Here `task1` and `task2` can be run in parallel, however, `task3` needs to await finalization of `task1`. This works for loops too, and with explicit threads, the code is much more verbose and not readable. 3. There are really many more
but I'm thinking that a javascript filter() routine which queries against 40,000 js objects in memory is probably going to take a few seconds right? so a server-side call which always returns in &lt; 1s is probably going to be more scalable, right?
I died in two turns :(
It depends. Obviously you want initial load small. But if the data can be loaded in the background and isn't changing much, then having it loaded on the client side is always going to be faster.
Yep. As soon as I saw the intro about giving his son chips if he made a game, I remembered seeing this before recently. Looked it up and it was the same author, same post. Thought it was fishy, but then others shared the ones they found. Looks like an attempt to drum up site traffic masquerading as a father-son project.
I built it in reactjs with mysql hooked through node/espressjs. It's connected to various api's to mesh all the info I need.
Here is a GitHub repo for testing this. Also, you may not want to use filter, as the good old for loop often outperforms. https://github.com/dg92/Performance-Analysis-JS If I recall right tho, even looping over 10k items was a fraction of a second. So it really depends on your application. If a one time cache of 40k reduces your ajax calls, maybe that's worth it. If that data updates regularly, and if you only ever need a smaller slice of it at a time, maybe cache less and read from your db more often. I don't think there is an established best practice here tho, because it is so dependent on your application needs.
how do you even begin to get good at creating things like this?
 ..... .... ... .. . Everything turns black... you pass out.... GAME OVER
Also he says that prior coding, the kid was learning stop motion. Too little time to learn all of this and still being 11 years old.
Holy fuck this is some amazing performance
Don't use localStorage as a caching mechanism, ever. At best you're reinventing the wheel (browser caching semantics), at worst, you introduced cache consistency bugs that will come back to haunt you in fun and exciting ways some day down the line that will be very hard to diagnose. General rules I've seen used a lot: * If the content is immutable, set cache headers for immutable and having &gt; year max-age for browsers that don't understand the immutable flag. * If the content is non-critical and unlikely to change, 4-24 hour TTL. * If the content is critical and unlikely to change, 15min TTL with must-revalidate flag. * If the content is critical and likely to change, no-cache or &lt; 15 minute TTL with must-revalidate flag depending on how it might be used. [When in doubt, Cache-Control out.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control)
Hi /u/xmartlabs, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
First of all - i appreciate the throughout reply. ### I'm young Tbh, it's probably not. It was more of a statement, that i'm young, and i want to keep up latest tech. ### up-to-date workflow, ES6 Actually, my concerns are probably broader than just that fact that we still use jQuery - jQuery just became a target. Honestly, i just feel that i am limited by our stack. ### personal development First of all - good points. I understand this, also for the companys perspective - dont get me wrong. ### we want to move on Okay first of all, ignore the 'we' - *yes*, i'm not alone with this though. But let's keep it on me. It is truly static sites, yes - browser support is fortunately limited to IE11 and Safari as the worst ones. We reuse some jQuery *snippets*. But nothing major. And last - yes, I have talked to the responsible, in a respective manner. We talked about it - but he's not easy to discuss such things with. &amp;#x200B; **Again - thanks alot for your viewpoint.**
Hi /u/Wratch97, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/software-dev-2020, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/RandomMiscAnon, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Mandelbrot would be proud...
Hi /u/gusericson, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/HolidayInternet, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I integrated Svelte with page.js pretty easily. I had navigation trigger a function that assigned different components to a variable, and used a Svelte dynamic component.
Hi /u/SssensationalVK, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I want to learn this. Where should i started?
lol. You're asking for pirated materials of someone's hard work. No1 is going to help you with that. &amp;#x200B; There are a lot of free tutorials on Youtube. Fun Fun Functions, Net Ninja... you can learn from there for free.
If you are in the US check with your local library or with libraries in large cities in your state. The San Francisco Public Library, for example. gives you access to Lynda and Treehouse if you live in the state.
Oh boy are you people going to be embarrassed when you figure out this is real.
Usually you encrypt the secrets using json web tokens or similar, but it needs to be supported by your APIs. If it's about hiding a private token to access a public cloud API, I guess you must do it server side.
My company was looking into this for a while and came to the conclusion that there's no method that's infallible or even close. Basically it's a good idea to always treat front-end security as non-existent.
Firebase cloud functions () are free and fast to setup
No way to do it if your api is simply expecting a single key to verify. It's almost like having a website with a global password. What you could do to get around it is public/private key cryptography. Generate a public key and private key on the client, then send the public key to the server. Once the server sends a response, encrypt it using the public key. Then the client can decrypt it using their private key. The issue here is that all you're doing is protecting data during transfer. You can also use CORS to make sure only your site is accessing the api.
Well, there's the stop motion
Ok I think I understand what you are saying, the difficulty I am going to have in implementing it is for my own pet project (netwhack; see [netwhack.ca](https://netwhack.ca)) which I am going to be porting to Javascript. It will alternately need to process key by key (easy enough to do in an event driven model) but will also sometimes need to request a short string, such as when #naming an object. For example in the nethack game, there is a scene where you have to play a tune on a musical instrument to open a drawbridge. Saving the entire game state or passing it to a second function is going to be hellish. I do have a sort of idea where the game could state itself into attaching a message to the next text string that comes down the pipe; it could print for example "What do you want to call your dog?" then just let the user input and when it returns it will attach a rename\_my\_dog message to the input. I am only worried if there is some issue with needing to return to a specific point in the code when this happens.. I am not sure if this will be a problem but I will try experimenting with it. Maybe also include a callback function (function pointer?).. the flow control would be somewhat unnatural compared to what I am used to but it might work. The way this would work in web assembly/C is by the use of something like emscripten\_sleep which yields back to the browser. ex. "emscripten\_sleep(1) can be used to 'interrupt' your code, such that the JavaScript engine can do the rendering and process events." The deal here is that behind the scenes emscripten is splitting your function in two at the callback, saving and restoring program state for you. Overall, I sort of think I understand what you are saying but I am feeling an aversion to actually trying it because most programs I have seen simply don't work that way. I want to at least try running a main loop in a pthread or a web worker first -- I have seen code for passing keyboard messages to a handler and it looks like what I was thinking before. The other way out is probably to use SDL (for web assembly/c++).. ugh, it just feels too easy to keep doing async/await, especially for ported programs.
Stunning!
I'm not sure why my mobile keyboard doesn't work on the game. But for the robots game (for example) I am thinking of adding a touch handler to detect where you are pressing on the screen and then allow you to move that way. I've also thought about adding buttons; [https://www.reddit.com/user/deadc0der/](https://www.reddit.com/user/deadc0der/) above said something about 'pulling a lucas' which I assume refers to a maniac mansion style interface. It could work. I was more interested in doing a full terminal simulator though to ease my son into javascript by giving him a similar environment. We are probably going to explore web assembly at some point and I am hoping we can use mainly the same kinds of concepts in C in web assembly.
Yeah better wait eight more years for that one.
Hint: You have to get a pirate sword :)
&gt;We talked about it - but he's not easy to discuss such things with. That happens sometimes. I wonder, though, what you think of the arguments he gave you. In any case, I'd just summarize all this in two points. One, consider the other perspective and try to look for arguments that also make sense -both financially and technically- for the company. Two, take a slower approach and instead of setting out to radically change all the stack try to propose smaller changes and always as a controlled experiment. Approaching it this way you may have not only better chances but a better outcome in general for everyone.
Hi /u/jellymarketing, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ddeenniiss90, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Vlad246, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/OlegSerov, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Sorry about that, I should have read the rules prior to posting. Do you know if there's an appropriate subreddit for my needs?
Honestly, if you start going on and on about the Liskov substitution principle when I’m interviewing you for a job, you’d better be able to answer: - how does the Liskov Substitution Principle bring joy to our app’s users? - how does LSP help us get stuff done? - how does it deliver ROI for our investors? - how does it help better monetize our app? - how does it increase user growth and engagement? If you can’t answer those, and well, you’re not the right hire for an early stage startup IMHO. SOLID can be a help. But it can also be a crutch to avoid dealing with the psychological anxiety of business risks, that engineers SHOULD fret about, because for most startups, business risks are far more likely to cause failure of the startup than engineering ones ... Just my $0.02. 😀
That's fucking neat
Thanks, By no means I'm trying to change the full stack in one go - *trust me, it needs to tho -* im not *that* naive. I soon have a meeting about the stack ;-)
Yeah it's the best of both worlds! Don't really know what you mean by vscode running things through TS? Are you referring to linting?
It looks like that's because the browser wraps automatically the CDATA into a comment tag.
Added to my favorites, thanks!
🙏🏼🙏🏼🙏🏼🙏🏼
I did some tests and it appears emscripten\_sleep\_with\_yield(ms) will allow me to do what I wanted to do with async/await earlier, and is the way you are supposed to do it. I'm really torn, I know what you are saying now but I don't see a reason to warp program execution in such a way just to do a "what is your name" input prompt. I'm going to have to think about this for a while.
Hi /u/ffxsam, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
you are welcome!
Just wow!
I'll definitely check this out
My display doesn't... so moot for me.
Yes, because once you switch to a new framework, the company still needs to support all the existing customers. Now when you get a new job, the company still has to support the websites you did. You just doubled the workload for the company just to make you happy.
I ment quit jQuery totally in our stack. Not just me. Also, jQuery is not a framework, and I dont wanna switch to a framework neccessarily.
Appreciate it! Great work.
So you're gonna rewrite all the websites the company has ever done in the years before?
You're doing JS God's work
No? Are you seriously telling me, that you would suggest a company to keep the same stack for their entire life time? Never optimize?
Same, thanks a ton!
Why do you think banks are still running Cobol on mainframes?
Because that would probably be a pretty expensive upgrade from there. This is not. You really cant compare this. Although I appreciate your points, I dont think i can understand it.
Nice work!
Well you just failed to convince me that you have a case for upgrading. Good luck with your manager and the boss.
It's funny how you and him sounds the same
Thats true. We dont use CDN - he also refuses that.
AWS lambda functions let you do this. Stick the secret in the lambda, then hit the lambda endpoint from your front end app. It's a cheap and easy way of creating Microservices.
Yep. ts itself catches various bugs, as does tslint. vscode gives me nice red squigglies :)
Life's too short, find yourself a new job
I see your points - however I've never got used to jQuery, and there for personally wont miss it. Hope fully newly graduates wont either (imo). I can see how my initial post could have mislead to thinking I'm trying to change our stack to use a js framework - thats not it. Would i be interested? Yes. Do I want to do this in smaller steps? Yes.
Awesome. Thanks a bunch!
Jesus what a load sanctimonious twaddle
I see your point, but for some reason I want to fight for this. I love my collegues.
As a heads up, TSLint is getting depreciated in favour of typescript support for ESLint.
Hi /u/wilfredinni, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
That's a bit of a myth - there are MANY versions of jquery out in the wild, and given that it's being used less and less, this is by no means true.
If you want to learn how to do it yourself, then r/LearnJavascript. If not, then you should probably look into hiring someone -- how much marketing work do you do for free?
It's hard to help without seeing the code. An Electron app is doing something like `const { dialog } = something`, and something is undefined or null, so it doesn't have any properties.
This is the most stupid thing that had ever happened to me in Reddit
If we're the same, he's probably thinking about firing you too.
😂
Thanks for answering. I am not skilling in programming so i dont know where to find that code. :s
Anyone can forget how to [Match Whitespaces with a regex](https://javascript.pythoncheatsheet.org/#Regular-Expressions), [Remove an element from an Array](https://javascript.pythoncheatsheet.org/#Remove-any-element-with-splice) or do a [For Loop](https://javascript.pythoncheatsheet.org/#For-Loops). This cheat sheet, mostly based on the lessons on [freeCodeCamp](https://www.freecodecamp.org/), tries to provide a basic reference for beginner and advanced developers and lower the entry barrier for newcomers. [Javascript Cheatsheet](https://javascript.pythoncheatsheet.org/) &amp;#x200B; Edit: Original Post was deleted... for some reason...
You're such a script-kitty :P Nice, thanks, well done!
Your way of exporting functions seems silly. Why not just `export function capitalizeString(s) { ...`? Why are you exporting it on a different line?
Yeah I know. It seems tslint is still better at the moment.
Indeed.. It's very pleasant to read.. All the cheatsheets should be like this..
Thanks! Yup, just trying to learn so I can get better at this. I give free marketing advice in subreddits all the time (other account).
something like this: const inputName = { appliances: 'appliances', floor_covering: 'floor_covering', indoor_features: 'indoor', } Object.keys().forEach(name =&gt; { $(`input[name='${name}']`).click(function() { $(`#property_${inputName[name]}`).val( checkboxToArray($(this)).toString(), ) }) })
If you worry about this before even learning to code you will give up, learn to code until you are somewhat confident and then start thinking about all this stuff
A lot of people use frameworks such as React, Vue or Angular to achieve this. These frameworks organize your code into components with their own styles and logic that you can reuse throughout your app. I'd start by looking into MVC and MVVM patterns and then checkout Vue (personal favorite) or React.
Hm I guess this might be the best option. And I am already using MVC for the backend
Hello, this sub is probably not the right place for you. I'd head on over to r/gamedev and *before* posting read the wiki, starting here: [https://www.reddit.com/r/gamedev/wiki/faq#wiki\_i.27ve\_never\_programmed\_before.2C\_where\_do\_i\_start.3F](https://www.reddit.com/r/gamedev/wiki/faq#wiki_i.27ve_never_programmed_before.2C_where_do_i_start.3F)
Hi /u/Idjosko84, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/wilfredinni, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
 JQuery, due to the size of it's bundle, is a bad choice if it's not served gzipped and you're designing a small app which doesn't require implementing a large amount of DOM-based logics. Otherwise, you don't need to move away from JQuery, in order to try out new things, e.g. build apps with ES6. If you write code in procedural style and you projects usually consist of a pile of files with a bunch of functions, you need a better architect, not a fancy JS framework. Actually, if you lack personal development, what you migh want to do in a new project is to try to implement an architecure that corresponds all the SOLID principles, without getting rid of jQuery and without using any fancy framework. Remember that jQuery is a library designed to perform specific tasks, not to build an architecture around. By the way, a fancy framework might become a great pain in the ass, especially if most of your team members are inexperienced. Sometimes it requires A LOT of time and effort, whether it's configuring tools or reading the docs, in order to implement something trivial. And all of your knowledge in this framework might become irrelevant in a year when most of it's APIs become deprecated. Or you'll be assigned to another project that uses another framework. In toher words - it might turn into a waste of time.
So, this is not a project? Yes it is... I'm asking for help? no. Wasn't you who told me to post this as a link? Dude, what is wrong with you?
Yes, Unless you know what you are doing, it's better not to do DOM manipulation by yourself. React/Vue and similar frameworks have better and optimised API that are performant and cross browser compatible.
A lightweight reactive framework like Mithril might be a good fit.
It's beginner content.
My company recently did a large project by using jQuery to do manual DOM manipulation. I knew from the beginning this was a **bad** idea, but I had just been hired and didn't get a say. As a result of this extremely poor technical decision, we've had near-daily regressions as someone adds or changes a feature, only for that change to break 10 other features. Don't get me wrong, jQuery has its uses, but in my opinion, doing manual DOM manipulation for a large project is inviting trouble. Please save yourself the headache, use a framework. It'll allow you to focus on your project instead of worrying about the DOM too much. Let the framework handle the DOM for you so that you can focus on the behavior of the page.
Stop being an asshole.
Oh man, you need to try a framework... if I had to go back to plain DOM manipulation I'd quit programming, haha.
this is dumb. bad mod.
It is a project. A project that I wanted to share here so advanced and beginners Javascript developers could collaborate and help it grow. Maybe beginner content, but still a project. &amp;#x200B; I did the same project with Python, and thanks to sharing it in both r/python and r/learnpython, it has grown a lot with the help of advances programmers. &amp;#x200B; Thank you so much for your great work!
It all depends on what you want to do. Don't be too ambitious right away. Coding is time consuming, and a game needs a lot more than just coding skill. Start simple. And plan ahead. Visual studio code or sublime text are fine. If you have any issue, stack overflow or some other website probably already has an answer on it. Just Google it. Although learn the basics of the target language in some kind of dedicated tutorial. Languages evolve with time, what was true yesterday may no longer be true tomorrow. So pay attention to that as well. Javascript doesn't require much, you only need a browser and a few libraries. Like pixy. Js for instance. Chrome is good with js. Browser like Chrome or Firefox have good built in tools for debugging. Avoid internet explorer. You will find that browsers don't always work the same way with your code. For instance access to file is different between chrome and Firefox, Chrome is a little more restrictive. Comment a lot, document if possible. You're doing it for your future self. On large projects it's a must. It doesn't matter if you work alone. At the very least, take the time to name things clearly so that you know what a function or variable is for. Javascript is good to start with, but later you may want to look into other languages like c++. You may also want to use git at some point.
What about creating isolated js files which are included in the HTML for specific pages? Since you're already using an existing MVC backend, this might be a quick solution. Have unique js code live in a directory with that page's code. Have common js files be in a shared space and either shared on all pages or imported only when needed.
Gimme the link please
[Javascript Cheatsheet](https://javascript.pythoncheatsheet.org/)
This looks very useful! The one thing I don't like is specifically labelling things as "ES6" features. ES6 is 4 years old now, and there's a new release every year. We're up to ES10/ES2019 now, and in general people should be using it. (Possibly with a compiler if they still need to support older interpreters.) There is nothing special about ES5 that's now a decade or of date.
Hi /u/PaddiM8, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Cs_Sunshyn3, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/angelg__, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yeah, this is definitely a major problem
Httpbin.org
THAT'S WHAT I NEEDED!
Well I think you cannot do that because, you said it before, they don't need fancy framework for the business... I think you should find another job ! not really hard to find for a js dev
Hi /u/katiekodes, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
 [https://homehost-demo.herokuapp.com/](https://homehost-demo.herokuapp.com/) media app made in react
Sorry, thanks -- knew web devs would know all the best test APIs, but couldn't think of where to find them besides /r/javascript. Now I know about /r/webdev !!
I hate this shit
That's a thing, cool
Paywalli
I'll apologize upfront because I didn't realize the project was hosted on github -- it's really rare these days that there's a "fork me on github" link on non-github.io domains, and I simply missed it. Feel free to repost at your leisure. And thanks for not being petty about it -- our job is tireless and thankless enough as it is, so it's really refreshing that you're handling this like an adult! Thanks again!
Syntax is weird so the whole idea looks that good only on paper.
Have you planned when you will publish the blog post yet? If not, could you respond to this comment when you will do it, just in order to be notified? Thank you!
Shit game
That makes it a router - and not a framework - as [smurfpappnenene](https://www.reddit.com/user/smurfpappnenene/) already pointed out!
Did you get a chance to explore reportportal.io?
Get one more story in your member preview when you sign up. It’s free. lol no thanks.
lol. me either
Those are legit concerns. Are the mainteners aware of this?
Not available in your country :(
If you look at Darhty's comment and the others they clearly haven't bothered to investigate the blog or wiki or youtube channel attached to this story, and are making an accusation out of thin air. I told Neo that some people on the internet said they didn't believe he wrote the games. I asked him what can we say to these people to prove you wrote it? He looked a little sad and said "I don't know". Then I told him that [Braggison](https://www.reddit.com/user/Braggison/) said it was a shit game and people were upvoting his comment. He didn't say anything but 20 min later he said he came up with an idea, that I could take a video of him writing a game. While that is an honorable thing to offer I had to explain to him why you people aren't worth it. Just write the game if that's what you want to do, and then put a password on it and don't give it to those jerks online unless they pay for it. He seemed to like that idea. But then he said something amazing. He said that 'everyone should be able to see and play my games for free'. Oh my god he's turning into a FOSS developer!
You might want to add which browsers you support to the documentation... or if it's there, you might want to put it somewhere on the front page. People interested in a toolkit like this will want to know which browsers are supported before they decide whether to try it.
As the creator of Cascade Framework, I wish you good luck with your framework. I also once left my job to focus entirely on my CSS framework. And like you, I hoped to be able to use that framework in future jobs. Unfortunately, convincing companies to adopt a one-man-project for customer projects is hard... very hard. And it relies not as much on the quality of your project as it relies on the size &amp; reputation of the team developing it. Most companies are very reluctant to adopt a framework or toolkit created by just one person. The bigger the organization behind it, they figure, the greater the chance that the project will continue to be maintained for years, the more documentation there will be, the better that documentation will be, the better the support will be, etc. Therefore, most companies will stick with projects that are backed by large companies, even when there are better alternatives out there. If you want people to adopt Reakit, you'll need to find sponsors to promote it to corporations and build a team of developers around you to help you maintain the project. Once you get a job, it's going to be much harder to find time to work on the framework, and as the number of users grows, the need for maintenance &amp; support increases. I eventually had to give up on my dream of getting paid to use Cascade Framework by an employer in customer projects. While having created my own CSS framework sure helped me find the kind of frontend R&amp;D job I'd been looking for for years, my current job barely involves CSS at all. And my spare time is already so fully booked that I'm not even close to finding time to maintain and improve the framework. I wish you more success with Reakit than I had with Cascade Framework. You already have quite a few contributors to your project, and Reakit sure looks promising, so maybe you'll succeed where I didn't...
Love Nativescript. We’re using it for our crypto portfolio app.
Hi /u/leosoft_4, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Wtf is this
Great!
That's insanity! What's next using objects as indexes?! a={a:1} Object { a: 1 } b={b:2} Object { b: 2 } c=[] Array [] c[a] = 25 25 c[b] 25 Well shit lol
I am the mom. These replies make me chuckle. I know how unbelievable this is. If I haven't seen it myself, I wouldn't believe it either. We are doing homeschooling for more than a year. Neo started to do stop motions when he was 10 almost 11. We've been very supportive to him and got all the equipments he would need like the camera, lights and LEGO pieces. I taught him how to edit the videos just a couple times and one day he came to me said he was done with a stop motion all by himself. I was surprised cuz he did something that I didn't know how. On YouTube, you see Big Lego Play(2017) and Steve's Lego Minecraft Adventure(2018 I think). My husband made the channel for Neo's stop motions just this early year. Neo has learned Scratch at school before homeschooling and tried Khan Academy programming lessons since homeschooling in 2017. This year, my husband has seen Neo's potential and talent and decided to teach him C programming and others. You might be wondering how he could learn programming in such a short time. Well... we live in an Asian country, we, as his parents, don't have many work hours, our kids don't go to school here, my husband basically spends all day talking to Neo about programming. If you are interested in our homeschooling, go on FB and search for Learn With Kids 尼薇全美語學習，you might find information. It's my page, so it's mostly in Chinese. It's a page mainly I share ideas how kids in Chinese environment should learn English and how we do homeschooling.
This was informative, thanks!
Great article, wish I'd seen it about six months ago as I learned most of this the hard way
 I am the mom. These replies make me chuckle. I know how unbelievable this is. If I haven't seen it myself, I wouldn't believe it either. We are doing homeschooling for more than a year. Neo started to do stop motions when he was 10 almost 11. We've been very supportive to him and got all the equipments he would need like the camera, lights and LEGO pieces. I taught him how to edit the videos just a couple times and one day he came to me said he was done with a stop motion all by himself. I was surprised cuz he did something that I didn't know how. On YouTube, you see Big Lego Play(2017) and Steve's Lego Minecraft Adventure(2018 I think). My husband made the channel for Neo's stop motions just this early year. Neo has learned Scratch at school before homeschooling and tried Khan Academy programming lessons since homeschooling in 2017. This year, my husband has seen Neo's potential and talent and decided to teach him C programming and others. If you are interested in our homeschooling, go on FB and search for Learn With Kids 尼薇全美語學習，you might find information. It's my page, so it's mostly in Chinese. It's a page mainly I share ideas how kids in Chinese environment should learn English and how we do homeschooling.
Anything can be used as an index. If its not a string (or a symbol), its converted to one (a string) first. The index itself is just an object key, so it applies to objects as well as arrays (which are themselves objects). Those keys which aren't positive integers won't be counted towards arrays' lengths. a=[] a[NaN]=9 a.length // 0
🤯
Oh right - that makes sense.
Next time someone asks me why I hate JavaScript, I’m sending them this post. Downvote away, this is ridiculous.
Why would you hate Javascript for that?
Not solely for that, but it’s a nice clear example of how JavaScript tends to just throw the kitchen sink at things. It breaks all the traditional rules of arrays, including clear access by array start + index and size of array being N-1 when one of the indexes isn’t a normal integer &gt;= 0, etc. If indexes can be basically anything, my brain thinks that’s a dictionary, not an array. Not that I don’t find uses for something like this, it’s just WAY outside the norm for arrays and when you utilize it, people will go: WTF JavaScript? All that said, I use JS in my daily work, although I’m still pretty new compared to my other languages. It has its place, but coming from strictly typed languages, it can be infuriating.
Super weird but interesting. Does it still print to a console? Does it still act like part of an array? Or no?
You have to use Map for this. For a regular object, this is just converted to the string “[Object object]”.
Why is everyone downvoting him. He didn't make this stupid rule, he just has to enforce it.
For objects: let a = {[Number.NaN]: 1} Object.keys(a) Array [ "NaN" ] console.log(a) Object { NaN: 1 } a[Number.NaN] 1 For arrays: let a = [] a[Number.NaN] = 1 Object.keys(a) Array [ "NaN" ] console.log(a) Array [] a[Number.NaN] 1 Keys are all converted to strings, with the exception of Symbols. Arrays ignore ones which aren't integers for their array-specific operations, but the values are still set.
Have you looked at Typescript?
Because `$0` is a feature of Chrome's DevTools Console and JS executed via selenium is not executed in the console. https://stackoverflow.com/questions/36999739/what-does-0-double-equals-dollar-zero-mean-in-chrome-developer-tools You should use a selector to get the element and pass that instead.
It's written in node.js I forget to mention
Omg I really need smth like dis to my wallpaper! Looks great on IPhone 6S Plus 🖤
Also: &gt; arr[NaN] = 'abc'; &gt; arr['NaN'] 'abc' &gt; arr.NaN 'abc'
 &gt; a={a:1,toString:function() {return 17}} { a: 1, toString: [Function: toString] } &gt; b={b:2,toString:function() {return 18}} { b: 2, toString: [Function: toString] } &gt; c=[] [] &gt; c[a] = 25 25 &gt; c [ &lt;17 empty items&gt;, 25 ] &gt; c.length 18 &gt; c[b]=26 26 &gt; c [ &lt;17 empty items&gt;, 25, 26 ] &gt; You can make objects appear in the array as indexes :)
Except they don't work well as arrays if they aren't properly keyed. You can't fully iterate over an array that has objects as keys.
Well, Wordpress is around.
It’s a trap!
The spiders are OP
I think the main point is that JavaScript has fluid types. If you looked more into how V8 handles arrays, you'd see that they can be downgraded as certain types get added. For example, an all integer array is much more efficient than adding integers and strings and nested objects. Or adding an item at an index far outside the length of the array. It downgraded it further. But if you notice, the behavior of Arrays and Objects in JavaScript is almost identical. So an Array is really just a more efficient Object which can be iterated. That's the best way to think of what's happening. If you treat an Array in certain ways, it can basically become an Object.
Hi /u/insinai, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Ha, I was about to call you out on non-serializable objects like functions, but it turns out you're right, it just converts them to strings and checks for string equality. Good to know! &gt; a = [] [] &gt; b = function() {} [Function: b] &gt; a[b] = 1 1 &gt; a[b] 1 &gt; a [ 'function () {}': 1 ] &gt; c = function() {} [Function: c] &gt; a[c] 1
Use this thread: https://www.reddit.com/r/javascript/comments/bozrqh/wtf_wednesday_may_15_2019/
Took a day to learn it the other week, but honestly, i'm not gonna hack out projects in template languages ever again, some of the syntax is the weirdest yet. The runtime never was my problem, 4kb, 10kb, 20kb, 30kb, it doesn't matter. Templating, oop and observable edge cases were a real problem on the other hand - but this seems to delve right back into it. My hats off for all the deliberations that went into this, but i hope the pre-build step will find its way into a functional view layer.
This game is filled with viruses- destroyed my Dell 386. IT RUNS POORLY ON WINDOWS 95. Take note. Also, the 'little boy' is a North Korean hacker team. Caution. You've been warned.
Unbelievable? It's not that hard for kids to learn programming if they find it interesting. The logic behind this text game is very simple and definitely something that kid could do.
 &gt; var a = [1, 2, 3] undefined &gt; a[NaN] = 5 5 &gt; Object.keys(a) ["0", "1", "2", "NaN"] &gt; a[({})] = 23 23 &gt; Object.keys(a) ["0", "1", "2", "NaN", "()=&gt;5", "[object Object]"] If the key isn't a symbol, it will be turned into a string if it isn't one already. https://www.ecma-international.org/ecma-262/8.0/#sec-object-type &gt; Properties are identified using key values. A property key value is either an ECMAScript String value or a Symbol value. All String and Symbol values, including the empty string, are valid as property keys. This is also why "a[NaN]" lets you retrieve that value even though NaN doesn't equal NaN. (Maps use a special equality rule to make NaN usable as a key.)
Seems like it moved to https://jsdoc.app/.
You say so because you are smart at coding I guess. It seems so amazing to me cuz I don't know anything about programming. And maybe that's why some people think its not real.
Because all JavaScript keys are converted to strings first.
Yes, at first I didn’t realise that’s what’s going on.
Great thanks!
You care entirely too much what people on the internet think about you and your fake kid.
Agreed, i hate that template language.
Hi /u/brunezy, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Very helpful and great timing! I need JWTs in an upcoming project and your article gave me an easy to understand instruction about making it secure.
Maybe you can look into [puppeteer](https://github.com/GoogleChrome/puppeteer/blob/master/examples/pdf.js)? Here is the documentation of different options regarding [page.pdf](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagepdfoptions). Not sure if it supports the extracting an HTML element as pdf out of the box, but I believe you could use `Document​.query​Selector()` from the DOM to extract the element you want and then run puppeteer.
The fact that you can do something doesn't mean you have to. I've never seen something like OP in the wild. It's interesting trivia, but that's it.
I just created my first free Chrome Extension :) It uses javascript to inject a &lt;style&gt; tag on YouTube pages, with CSS rules for text-transform. It's been fun learning how to make an extension! Let me know your thoughts and questions!
Your article covers a lot of useful improvements to make code cleaner, but I have one question: Why should I use this "function getUsers({ fields, fromDate, toDate })" over "function getUsers(fields, fromDate, toDate)"? The only scenario i can imagine is if the values are optional so I dont have to write "getUsers(null, null, date)"
Yeah but at least I'm not an asshole ;-)
You have to get the pirate sword, so your damage is +1. If you fight with your fists your damage is -1. Try hiding in the mountains then going back when the pirates are gone.
May I ask: Why do you do this? I can see only negative effects when you do this. You save potentially old infos with potentially old/expired links and probably loose "Search &amp; Find" (right now your 200MB PDF are just images. No more text to select ...). &amp;#x200B; It might be better to save the page "As it is" ...
In the second classes example. When 'this' is returned for chaining, is 'this' a promise?
because you can tell by the shape of the function call what it's probably going to do with it within the function. &amp;#x200B; In an example with 3 params instead of object destructuring, you'd call getUsers like this: &amp;#x200B; getUsers(\['name', 'surname', 'email'\], '2019-01-01', '2019-01-18') and then had to remember the order of the dates for example. Or check it within the function.
#notjavascript
Hey /u/sanjibukai, I've decided not to write it, only 2 people seem interested in that :'(
Thanks! Not having to remember the order of arguments can prevent some hard to find bugs
Good stuff. Event though it’s exclusively es6, I’d mention the spread operator where you’ve got the Object.assign example.
Sorry, I'm late. It seems that you've already got an answer.
No, it's not a promise. It's the actual object instance. That's what's chaining all about. You get the ability to call method after method.
Thanks. Glad you liked it.
&gt;May I ask: Why do you do this? The only reason I do this is because I want to note on the pdf . I find it impossible to read through something without noting on it . Take a look [here](https://drive.google.com/open?id=1gokJ4bvggwutC419nGzhDXxWJHRJONn_) for example when I started to read about JS programming when the only thing I knew was if , while , for . I note an x on things that now I do know really good (by heart) and I think I should not read again or will be of no interest in the future , I note a circle or a + or ? on things that I do not understand so that in the future I will look more at them , I put a big box or ! on things I find really useful and that I need to learn by heart or they will be of interest in the future . Like that I can learn new stuff on an efficient way and locate exactly what I do not know and what I know to further improve my knowledge . I do not want to use the pdf as a reference book so there is almost never a need to use "Search &amp; Find" . I read through all the pdf until every page is filled with a big X . But for any case I use Google , Duck Duck go and such , if I ever need search and find . The learn on demand when you need it (which is the exactly opposite thing I am trying to do) by searching internet (stack overflow , reddit , youtube etc.) and avoid reading books from the start to then end has been tried by me and the results were extremely bad . Duct and tape crippled non-fluent knowledge . I still can not understand people who say do not read books to learn programming . Maybe these people read books as novels . Of course you have to write code If you want to understand what a programming book says . If someone can not understand that then he does not know how to read . &gt;You save potentially old infos with potentially old/expired links Nothing of that has happened to me and that is because when I create the pdf I read it . I do not want to create that pdf to read the next year .
I thought it couldn't get any worse that Lua array indexing with -.001 but in javascript you can index an array with a function. What has the world come to?
It's never too late to talk about it bit by bit with your kids cuz you never know what kind of smart kids you have. When it's time, they will surprise you.
I can’t close the settings on my iPhone. Is there a way to do that?
Yup, I started using this pattern recently too.
Thanks that makes sense.
Its the Dark Souls of text adventures :D
OK, thanks for your clarification. Nevertheless, creating PDFs and annotate them seems annoyingly slow and labour intensiv. &amp;#x200B; As you stated, taking a note on a specific part of a webpage is what you want, right? Is there anything against using a Chrome/FireFox Plugin like [https://addons.mozilla.org/de/firefox/addon/notes-by-firefox/](https://addons.mozilla.org/de/firefox/addon/notes-by-firefox/) or [https://addons.mozilla.org/en-US/firefox/addon/sticky-notes/?src=cb-dl-updated](https://addons.mozilla.org/en-US/firefox/addon/sticky-notes/?src=cb-dl-updated) ??
I'm mostly hating on the CSS framework you have chosen, What de fuck is that :D
First of all, go bucks! Thoughts on https://paragonie.com/blog/2018/03/paseto-platform-agnostic-security-tokens-is-secure-alternative-jose-standards-jwt-etc as well as "don't use JWT (or paseto) for sessions"?
`NaN` (like any non-string) is automatically converted to a string when used as an array index. `a[NaN] === a['NaN']`. It's the same as adding any other associative array index (value addressed by a string name) in JS.
Nope, its an object of the type Person.
About "Learn on demand": In my early days, I also read a lot of books about programming and the concepts of programming. I think once you got the basic concepts, all languages are the same and are only syntactically different. From this point on, you do not read books anymore and start "learning on demand" (mostly concepts). &amp;#x200B; Bye the way, for Chrome: [https://chrome.google.com/webstore/detail/beanote-note-taking-on-we/nikccehomlnjkmgmhnieecolhgdafajb](https://chrome.google.com/webstore/detail/beanote-note-taking-on-we/nikccehomlnjkmgmhnieecolhgdafajb) looks need.
Great post! One thing to be careful of with default values is the default is used only when the value is undefined where as using || inside the function handles any falsey value.
beware though, if you have a weird visitor pattern, you can't put that object back together or manipulate its parts.
It's two people here.. I'm pretty sure once published many people will find it useful... Thanks for the library btw!
To clarify, those keys which aren't ~~positive~~ integers *greater than or equal to 0* won't be counted towards arrays' lengths..
``` &gt; a = []; [] &gt; a[NaN] = 9; 9 &gt; a.NaN; 9 ``` `NaN` is not the index; `"NaN"` is.
Indeed!
Hi /u/mrTang5544, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/cexij, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; If indexes can be basically anything Indices can't be "anything". They can be numbers (normal array) or strings (associative array). Anything that's not either of those types is implicitly converted to a string by calling its `.toString()` method, and the resulting string is used as the array index. Implicit type-coercion is not unusual in weakly-typed languages and can be very useful and expressive... even though it's prone to frighten fans of strong typing. The fact arrays can have string indices is sightly surprising, but it's a consequence of the fact JavaScript is a dynamic language and any Object in the language can have new members added to it at runtime using the same syntax as array access (`myObject.foo === myObject['foo']`, by definition). As arrays are a type of object, they also have this ability... though it's bad form to mix string and number indices in an array unless you really know what you're doing and understand concepts like enumerability (etc). None of this is particularly unusual for weakly-typed out dynamic languages. It's only alien if you're generalising from strongly-typed and/or static languages... but why would you do that? Apples are pretty ugly and taste weird if you're generalising from oranges, but that doesn't mean apples are *objectively bad* - just that the basis for comparison is flawed.
Hi /u/noarts, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/raccoonranger73, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tatswa, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/txustice, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/davidesantangelo, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/liaguris, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Nostalgic_NukeZ, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
thanks, corrected ;) Fun fact side note, JavaScript distinguishes between 0 and -0.
Alternatively, you could understand what's exactly going on. Arrays are still objects. And `NaN` in this case is not an array index at all. Instead, it's an object property name. `NaN` gets converted to `"NaN"`. So you could also access the same property using `array["NaN"]` or `array.NaN`. Actually, this entire thing has nothing to do with arrays at all.
*But what about Svelte??? /s*
Why would you tell your kid that strangers on internet think that his game is shit?
It basically gives JS (and any other language that supports arbitrary anonymous objects) support for named parameters, which just make code easier to read and maintain. Surely you've come across something like adjustWidget(300, 250, 0.6, true, true, null, {}, false) And there's basically no way to know what any of that stuff means. It also means you can have optional parameters without forcing people to pass in `null` to skip over the ones they want.
It could happen very easily. You have an array of items and you fetch one of them using a calculated index. Now some data in that calculation is wrong or missing and you might end up with something like that. This could be a really nasty bug in your code.
The one of the Asian named is interesting and I will use it . Thx . I had not clue such extensions existed . The only thing that is missing is drawing arbitrary lines .
I get what you're saying, but as a VS2017 user, I disagree that it's necessary. As long as you're naming your parameters reasonably, I find that using intellisense to see the parameter order makes it easier than figuring out some arbitrary object.
Great point, this is a big deal.
Ah but does it count negative zero for length calculation? Or is it just a stringified key like all the other weird options?
&gt;About "Learn on demand": &gt; &gt;In my early days, I also read a lot of books about programming and the concepts of programming. I think once you got the basic concepts, all languages are the same and are only syntactically different. From this point on, you do not read books anymore and start "learning on demand" (mostly concepts). I agree . &gt;Bye the way, for Chrome: [https://chrome.google.com/webstore/detail/beanote-note-taking-on-we/nikccehomlnjkmgmhnieecolhgdafajb](https://chrome.google.com/webstore/detail/beanote-note-taking-on-we/nikccehomlnjkmgmhnieecolhgdafajb) looks need. Thx also for that useful extension .
this is a misinterpretation. a) there's no associative arrays in javascript, just objects and object properties. b) because of a), you cannot index an array with a function, but an object property can be any string. this is what happens here. the only thing that should concern you is coercion (implicit type conversion) of the function to a string (and maybe the fact that the `toString()` function of a function returns the full function code ;))
This is dark magic...
What you're saying isn't wrong but I'd rather have the code be explicit and clean than rely a particular editor's feature to make sense of the code. Firstly, your colleagues might not use such an editor. Secondly, you might not always have access to such an editor.
I dont really understand, why is it better to pass getUsers({fields:['name','surname','email'],fromDate:'2019-01-01',toDate:'2019-01-18'}); ?
Another reason is that three or more params starts getting really difficult to read, and if you ever need to add another param you may end up with a very ugly design. someFunc(1234, true, null, false);
I like the website design a lot
Yeah that bothers me not at all
that's because `Object.prototype.toString()` returns the string `"[object Object]"`, which is then used as the property name of an object. so basically your `c` is now ``` { '[object Object]': 25 } ```
Right, and we can’t fail to mention that JavaScript offers typed arrays as well. You can allocate a specific amount of memory to store an array of a specified low-level types like 32-bit integers or floats. And you can manipulate them via bitwise operators and some native methods. Their use cases are limited to certain expensive calculations, because the memory allocation process (and the switch to “asm-mode”) is not terribly time-efficient.
I would recommend typescript, or at least adequate tests that assert expected types.
It's definitely a personal choice. I'm a c# developer in a c# shop, so everyone has access to visual studio (and this has been the case throughout my career). Even if the company didn't pay for it, community edition and vscode are free. And frankly, even if I didn't have that option, I usually prefer separate parameters to an object. The only real difference is extra visual noise in the object literal notation.
Wait, JS arrays are like Lua tables now?
@kerbal ye, I don't live on social platforms and frankly I couldn't give a shit if I'm -3000. Why would anyone even care about karma on crappit? Clearly is matters to you and that is to say the least very sad... &amp;#x200B; I login in occasionally to troll some nerd kids and it seems my mission has been accomplished yet again. Thanks bucko.
&gt; because you can tell by the shape of the function call what it's probably going to do with it within the function. Name is supposed to do that.
First, it emulates names parameter (similar to Python’s `**kwargs`). Second, it auto destructure for you — imagine you call this function from an API handler (for instance something based on Express.js), if all 3 of the needed parameters are packed in query string, you can simply passed down the full `req.query` context, and the destructuring on the callee will do the work for you to only get what it needs, everything extra are ignored; on the caller side, you save the imperative logic to extract them out of `req.query`.
&gt; I'd rather have the code be explicit and clean Separate parameters are explicit and clean.
I built this beautifier because I'm tired of all the ugly, hard-to-use tools out there. It's not a unique idea, but I think the experience is a lot better than most I've seen (and there aren't any IN YOUR FACE advertisements). Features include HTML, CSS, and JS beautifying, light/dark mode, one-click clean+copy, drag and drop, and basic + advanced settings. The tool uses Vue.js, Element UI, CodeMirror, and JS Beautify. I started it yesterday and finished it up today. Any tips on improving, making more accessible, etc. are welcome!
What's wrong with Svelte?
Keep the comments about the game, thanks, if you are concerned about trolling.
As a newbie, thanks for posting this! The chaining method was so simple but so brilliant
&gt; Surely you've come across something like &gt; &gt; adjustWidget(300, 250, 0.6, true, true, null, {}, false) &gt; &gt; And there's basically no way to know what any of that stuff means. That's why you don't do that lol.
Thanks. Glad I could help
Ye I'm stereo-typing but if someone is a programmer over the age of 35ish and butt-hurt by this then they need to toughen the fuck up. Below that age and butt-hurt is just a soft-ass millennial babied by a ridiculous society (who should still toughen the fuck up).
because you dont need to check the implementation of getUsers to find out what the array is for, what the first date is supposed to mean or the second &amp;#x200B; you can see it right there: youre getting users, probably some properties (name, surname, email) but youre limiting the user selection to dates between 2019-01-01 and 2019-01-18. the only thing unclear for me here would be to find out whether it means "active users" or "newly registered users", or both but thats probably because its not a perfect example
Because in the code that is calling that function, you have the parameter names already. So for example, you have: `callFunction({fromDate: '2019-01-01', toDate: '2019-02-01'})` But with normal params, you just have: `callFunction('2019-01-01', '2019-02-01')` You'll have to rely on your IDE to figure out what the two dates are used for (minor issue, I know) if it's say, legacy code or just not your code. And you'll need to remember the correct order.
You don't. They see you just as grunts doing grunt work and not as a valuable resource they could be mining and improving. You're in the wrong place. It doesn't take much to learn jQuery, but it does to learn modern frameworks, processes and what have you. Just learn them and leave. We're lucky to have you.
TypeScript doesn't help here because it doesn't check at run time. So, it comes down to your tests, yes.
I understand your concern but I do not know the answer..I decided to build the application to help the community so they can handle their dependencies via a modern UI. Maybe npm make their own.. I do not know, but when I spoke with npm employees about the project they were really excited!
... which is the point being made.
TypeScript should catch everything unless you use a generic type for some polymorphic return value. But you have to add types to everything that array/object might touch, including function parameters and return values, some of which the compiler will accurately infer. It will tell you if it can’t be inferred at compile time. Which, tbh, is pretty nice. Every runtime type check has some (admittedly almost negligible) overhead. But the main benefit is that it keeps the code cleaner, since you don’t need runtime type checks in every function body. And you’re also shifting the possibility of failure to the development process instead of the user experience. But I digress.
Some thoughts: 1. &gt; You can end up with duplicate code for various reasons. For example, you can have two slightly different things that share a lot of in common and the nature of their differences or tight deadlines forces you to create separate functions containing almost the same code. Removing duplicate code in this situation means to abstract the differences and handle them on that level. Better ([https://kentcdodds.com/blog/aha-programming](https://kentcdodds.com/blog/aha-programming)): *prefer duplication over the wrong abstraction* 2. Use spread operator over `Object.assign`. 3. Instead of: ```js class SuperArray extends Array { myFunc() { // implementation } } ``` I find myself doing this is instead: ```js export const myFunc = (array: any[]) =&gt; { // implementation } ``` I don't know which is better if either. Would be interested to hear other's thoughts on this. 4. &gt; Use this approach only for boolean values and if you are sure that the value will not be undefined or null. ```js if (user: User | undefined) return 10 ``` The above is completely fine. 5. &gt; Use polymorphism and inheritance instead. I almost never do this in my code. For that matter I hardly ever find myself using `extend` (apart from things like `extend React.Component` before Hooks came along), and mostly use classes when a library needs it, but not much more than that. Am I doing things wrong? :laugh:
Nothing really. It's just its advertising that's a bit obnoxious lately.
"Classes are the new syntactic sugar in JavaScript. Everything works just as it did before with prototype only it now looks different and you should prefer them over ES5 plain functions." \*Kyle Simpson is typing\*
Interesting article. There's one developer I work with where almost every time he uses `reduce`, it could be done more simply with a `map` or `filter` instead. It's come to the point where I've warned him to look closely the next time he writes the word `reduce` and see if it's really just `map` that he needs. I guess the cases where it may make sense is if you're chaining `filter` and `map` and so on and you could do things in one pass instead of multiple passes. In terms of readability and simplicity I'd favour `filter().map()`.
Or what about this example: class User { constructor(firstName, lastName, phone, email, friends, isActive) { Object.assign(this, { firstName: firstName, lastName: lastName, phone: phone, email: email, friends: friends, isActive }) } } new User('Jane', 'Doe', null, 'jdoe@gmail.com', null, true); VS: class User { constructor(data = {}) { Object.assign(this, data); } } new User({ firstName: 'Jane', lastName: 'Doe', email: 'jdoe@gmail.com' })
I believe this is the most common definition/explanation of the ES classes. There is no other way to put it with the same effect. On the official MDN a similar sentence is used.
ES6 has [Maps](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), which can accept any value as a key, not just strings.
I have a feeling youre right. Thanks
yeah its the same as 0 in this context (-0 becomes a key of "0" which is also its toString value). It's not often you see the difference, even `-0 === 0` is true. `Object.is(-0, 0)` is false, however.
On top of this, use Typescript.
No it doesn't. Arrays are objects, you can use a string as a property just like in any object, but only numeric properties (that are &gt;= 0) count towards the length and can be iterated over.
I wrote some software around finding defects in code. Function calls were one of the highest areas of defects overall. The reason was because the changes are highly dispersed. By passing an object you don't need to change every single call to that function if you have defaults set within the function. You also don't need to worry about order and it increases code continuity as it's very easy to keep things named the same (something that isn't hard, but people still miss out on it).
I made a ReactJS website for my band's album release. It has a media player, lyrics, credits, and artwork from some of our close friends in Toronto. Would love if you guys checked it out! [https://www.roseredyouth.com](https://www.roseredyouth.com/)
In JavaScript, everything except primitives are built out of objects. This includes arrays. As a result, both of these are valid: const obj = {}; obj[NaN] = ‘foo’; const arr = []; arr[NaN] = ‘foo’; Knowing that JavaScript is structured on objects, this makes total sense and is not unexpected. For developers coming from other languages, it is certainly unusual that objects and arrays are not distinct. Is it bad though? Other than being a very minor learning hiccup for transitioning developers, what is the downside?
JavaScript Cookbook: Programming the Web
Anyone can forget how to [Match Whitespaces with a regex](https://javascript.pythoncheatsheet.org/#Regular-Expressions), [Remove an element from an Array](https://javascript.pythoncheatsheet.org/#Remove-any-element-with-splice) or do a [For Loop](https://javascript.pythoncheatsheet.org/#For-Loops). This cheat sheet, mostly based on the lessons on [freeCodeCamp](https://www.freecodecamp.org/), tries to provide a basic reference for beginner and advanced developers and lower the entry barrier for newcomers. [Javascript Cheatsheet](https://javascript.pythoncheatsheet.org/)
&gt; I'm a c# developer in a c# shop, so everyone has access to visual studio (and this has been the case throughout my career). Even if the company didn't pay for it, community edition and vscode are free. I'm not referring to an issue of cost but rather situations where you may not be using your own machine or have logged into a server remotely that only has a basic editor. But it's fair to say that may be an extremely rare event for you. &gt; The only real difference is extra visual noise in the object literal notation. This I disagree with. This function call: doSomething({ destination: object1, source: object2 }) provides additional information (not noise) relative to this function call: doSomething( object1, object2 )
"Clean" is subjective so I'll walk that back, but this function call: doSomething({ destination: object1, source: object2 }) is more explicit than this one: doSomething( object1, object2 )
In this context you're right, but I honestly can't remember the last time I used a constructor directly in javascript. Data comes from the server side (c#) and mostly anything else I do is either a react component or a const utility method.
"Prefer classes over functions"? Nope.
Man, JS is a strange language, but I love it.
Forgot to mention firebase for authentication. Authentication was always my weakest area but with firebase It's amazing and simple.
Nothing wrong with the sentence I am just referring to the author of "You don't know JS" books (great books btw, strongly recommend to read it for every frontend dev). He has some strong opinions on JS classes and in general he dislikes them so I imagine he would get triggered by this sentence
I would NEVER log into the server and edit files. That's asking for trouble. Your example is dishonest. If you're naming things object1 and object1 you have much bigger problems than discrete parameters vs an object. A more reasonable example would be doDomething(source, destination) Or doDomething({source: source, destination: destination}) Which I would usually write as doDomething({source, destination}) And then literally the only difference is the brackets, which are visual noise. I'm certainly not saying there's NEVER a use case for config object parameters, but I think setting a hard and fast limit at 2 or 3 parameters is absurd.
JS objects are like Lua tables. JS arrays are JS objects. There are two things that separate JS arrays from JS objects. The first is a set of array methods, like `push()` and `pop()`, that gets inherited from the Array class (from Array.prototype) in addition to all the other normal Object methods (in Object.prototype). Though these methods belong to the Array prototype, they're actually very generic and can work on non-array objects as well. But for Array instances, they come for free through inheritance. The second is an internal implementation that functions to facilitate the special `length` property. This special behavior makes arrays _exotic objects_ in JS (which is the root of most problems people had trying to extend Array without using ES6's `class` syntax). The `length` property is calculated based on the numeric keys (though, as keys, they're really strings) in the array object where its value is the largest numeric key + 1, that is at least those within the range of 0 - 2^32-1. If there are no numeric indices, the `length` is 0. Being objects, arrays can have any properties you want, just like non-array objects, but only with arrays do you have numeric keys counting towards a special `length` property.
The constructor is just happenstance in my example, the same thing can be applied to a function. &amp;#x200B; At this point I don't even see why you took a hard stance against this pattern, if you are only using very simple features of the language, lol
I presume you are a fan of functional programming? 😊
Indeed I am. : ) Don't get me wrong: I love OOP too. (I write PHP on the server side of things.) I just don't think it's a good fit for JavaScript.
I never said I took a hard stance. I think the specific limit he set is absurdly low. That's all. If it were 4 or 5, I'd be fine with it.
Fair enough, I agree with that
In this case you're passing a flag, which is a code smell in and by itself.
Wondering what the point is. Most is super basic, so actual developers won't need it, and learners will not have the context of what to do with it.
"Composition over inheritance." This is a core SOLID principle. Your approach, generally speaking, is better than "extends". Additional reading: https://en.wikipedia.org/wiki/Composition_over_inheritance
Not using classes could equally well be procedural programming, which in many ways is still JavaScript's most natural territory. JS has elements of OOP, more so since ES6 classes and the subsequent developments, but it has never really been about the everything-is-an-object, communicate-via-messages style of programming. JS has elements of functional programming, but it has never really been about structuring code as one big expression to be evaluated and all the architectural implications that come with that either. One of my main criticisms of Robert Martin's work, which carries through to the article here that is based on it, is that he has his own personal preferences but tends to write about them as if they are objectively justified (often with a small caveat hidden away that it really is just his subjective opinion and he really doesn't have hard evidence to back up his claims). In this particular piece, I think some of the points such as favouring classes over functions or favouring inheritance to solve the expression problem look quite out of place in JS, though the advice was debatable even in the more OO-centric languages where it originated.
I agree, but it was just an example, you could replace all of those args with integers
What's the answer from the server?
That makes sense. I don't use string key names in arrays, so it isn't something I've run into as far as iterating, but it's useful to keep in the ol' notebook.
Looks slick. But I have to ask, what's wrong with Prettier?
Hi /u/no1melman, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/thedifferenceisnt, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/akaJoystix, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jammy-git, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
But wait! There's more! There's also the new [BigInt](https://github.com/tc39/proposal-bigint) primitive on the horizon. It's like the existing number type but for, as you can probably guess, large integer values. And while there is some interoperability between the two types, there are also some differences, including _not_ making a distinction between -0 and 0, or in bigint syntax, `-0n` and `0n`. So Object.is(-0, 0) // false Object.is(-0n, 0n) // true
Wait, what the fuck is going on here.
That's gonna be a bit more controversial of a statement
I think (hope?) you misunderstood. /u/marinespi is arguing that _"you wouldn't create such a function signature, since it's not intuitive"_. And I tend to agree. If you're having a hard time intuitively understanding how to call a function, it's signature should be corrected to make it more intuitive. Using the technique demonstrated here is more of a band-aid than a fix.
From what I've read from Bob Martin, he doesn't mind dynamic types because he does TDD, which automatically checks for types. I believe the same thing. Why would I need to add type annotations in my 100% test covered code.
It also conflicts with the advice in the article nearly right afterward to use the default arguments pattern when possible. If a single object is the argument of the function, I can only set a single object as the default. And then if a function call passes in any other object in order to set some of the values, all the other values of the the default object will be unobtainable.
Based on the context and the code example, pretty sure they meant prefer classes over _constructor_ functions.
YDKJS is _generally_ a good book, but Kyle's writings about classes and inheritance are biased and misinformed, and we probably shouldn't recommend those chapters to others. Kyle assumed that Java-style OOP and inheritance is the only correct way to implement those features, and anything implemented differently than Java is not "true" OOP. But that just isn't so. [There are as many varieties of OOP and inheritance as there are languages.](https://www.reddit.com/r/javascript/comments/8q6267/why_are_js_classes_not_real_classes/e0gyorf/) Python's inheritance model, for one example, is also objects linked to other objects, same as in JavaScript, and the same pattern that we JavaScripters would identify as prototypal inheritance. Here's [JavaScript and Python classes side-by-side](https://i.imgur.com/p9Kw815.png), demonstrating classes as objects and inheritance as delegation.
I thought this was starting a discussion SSR, and I was wondering if that was how people also interpreted it.... I don't need any help with JS, I doubt it is beginner content, its not framework/library specific and I would class it as general web dev. I thought it was just general discussion of javascript....
That's cool, I didn't know about the last one(chaining methods).
Transform your Typescript code into UML diagram (PlantUML) with tplant https://github.com/bafolts/tplant
They are both great frameworks! It really comes down to personal opinions &amp;#x200B; For me it's a religious thing. I really don't like facebook :D
&gt; I don't need any help with JS Your title literally starts with, `Question:`... asking a question = asking for help.
Nothing, if you like prettier and you're in the comfort of your own editor :) I personally think it's too opinionated and I don't like my files changing when I hit save — just personal preference, really.
I made major updates to my TypeScript library: [https://www.npmjs.com/package/@overnightjs/core](https://www.npmjs.com/package/@overnightjs/core)
Thanks. Glad I helped you learn something new.
Do you know of any reason why we would want to use strings as an array index? Seems like if they don't count towards length you'd just be asking for problems down the line. Or do you think this is just a javascript quirk that should be avoided entirely?
This is great! I've been writing javascript full-time for a long time and I still have this bad habit: ```A function should do one thing. Avoid executing multiple actions within a single function.``` Also, I'm going to take this one to heart: ```Avoid conditionals whenever possible. Use polymorphism and inheritance instead.```
Thanks! Unfortunately that's usually the way these things happen haha. I always find what I'm looking for after I don't need it anymore
Thank you! Glad to hear that I could help you learn something new :)
Changing example is brilliant 👑
&gt;It will tell you if it can’t be inferred at compile time. It does? But what I want to say is: even if a function is perfectly typed, as soon as you're in JS land, you can pass any type to any function you want. If the compiler tells you that some value can be of any type because at run time anything can happen, this might be helpful. I checked this in the context of a library. There it would apply to the entire public API. But TS doesn't do that in this case. Or at least I couldn't find out how to do that, yet.
Interesting read, being a subset of the JWT standard, I think the strength of paseto shines in its simplicity to configure. It can rule out simple configuration issues breaking the security of your implementation, but in that you can also lose some flexibility as well. Either way, I still think it's important to understand the concepts that happen behind the scenes. &amp;#x200B; As for not using JWT for sessions, that's a valid argument. A JWT really only represents a claim between one or more parties that can be verified quickly and cryptographically. Typically, you would store things like the user id, maybe the user's role, their email address, and things of that nature, so you can pass them to another application directly. If you are using JWTs as a session store, the client could simply choose to ignore a newly issued token, and proceed to use the previous, still valid, token. JWTs really shine in a stateless application such as a REST API, because sessions shouldn't matter.
In JavaScript, you can write object oriented code without classes, and it’s usually much cleaner. Classes can be useful for cases where you have lots of instances of an object, and don’t want each object to hold a copy of common methods.
Thanks. Glad I could help 😊 It is hard to follow the guidelines if the deadline is tight.
What? Don't you guys use IDE with autocompletion and hints?
You can turn off the "format on save" option in your editor settings.
maintainability &gt; sexy but difficult to read one liners
I don't like facebook either, really enjoy react though.
All indexes are ultimately strings (or symbols). But for arrays, it really about the `length` property which automatically provides a "count" based on the numeric ones. This is what separates arrays in JavaScript from normal objects. If you want to mess with any arbitrary key, use an object. If you want something a little more specialized that can target numeric keys that can help you work with ordered items, thats where arrays come in. Using the special `length` property means you can use a counting for-loop (instead of for..in) to iterate over numeric keys rather than arbitrary named ones as you're left to with normal objects. But, because arrays are still objects, they can have named, non-numeric keys too. You may not need or use them, but they're there. In fact `Array.match` will return arrays with named keys for things like `index` and `input` etc. providing additional information on top of the ordered items.
But that's exactly what we're talking about. What makes a function call intuitive? Is `person.setName('John', 'Paul')` intuitive? Are you sure? It goes without saying that you should use this approach selectively, just as with anything.
So I’m not positive that I’m following your question correctly, but I think you’re finding an issue where the type annotations of the library are not being exposed to the public API that you are using to interface with that library. Is that correct? Because that’s entirely possible. A couple of things to note about the TypeScript system: 1. You need to use the TypeScript compiler yourself in order to gain the benefits of type safety in someone else’s code. VSCode or any IDE that provides the type *information* is not doing anything more than *informing* you of the types. If you want it to warm you of type errors, you have to use the `.ts` extension for the files you want to be checked, and run them through the compiler yourself. Otherwise you’re absolutely right, JS provides no inherent guarantees about what will get passed to a function. 2. You can provide a special `any` type to an identifier, which will instruct the TS compiler to allow all possible types for input/output of the identifier, and the IDE’s intellisense (or equivalent) should inform you of that as you type it into your code. The downside is you lose all type safety for anything that takes a value from that identifier. So if it’s a function that can return type `any`, then anything that calls that function should perform a runtime type check before proceeding. 3. Some libraries were originally written in plain JS, adding TS support later by creating a separate `types` file that exports all the type annotations. This means the type annotations are not written directly into the code, and you must import that file in order to populate the type information. I hope that answers some of your questions. But let me know if it’s still unclear.
Can't u do something like (though it could get unreadable): &amp;#x200B; function getUsers({ fields = [], fromDate = new Date(), toDate = new Date() } = {}) { // implementation }
So either you’re truly a horrible parent who is telling their kid what a bunch of strangers on Reddit are saying. Or you’re continuing to dig yourself into a deeper hole. Which is it?
It's also easier to compose functions that take a single argument
Hey, thank you so much for this! I'm a newbie and this will help me!
Third option -- you've made a terrible mistake and you're too proud to apologize.
Cheatsheet? I thought those were suppose to be a bunch of information crammed into 1 page. This is a cheatbook.
Numbers in Javascript are IEEE 754 double-precision floating point numbers by default. -0 is a valid value in that format. If you perform a bitwise operation, the number gets converted to a 32-bit two's-complement signed integer, where -0 is not a valid value and so it becomes 0.
I commend you for what you’re asking for, if you can make a community meetup group out of it, fantastic. But, in the meantime, I highly recommend PRAMP (PRActice Makes Perfect) https://www.pramp.com/#/ ! I’ve done over a dozen mock algo interviews in vanilla js and python, and they have questions that rapidly reach the high level problems of the big tech companies. In each pairing, you interview them, they interview you. It’s a fantastic way to practice real interview problems in dozens of available languages.
Sorry for the late reply. Just the default theme!
100% code coverage doesn't mean your code is type safe. Also, why spend 25% of your lines of code writing runtime type guards and sanity checks when it can be done at compile time? Save that effort for your public API, which by all means, write some type testing around.
The first glaring thing I'd notice as a hiring agent is that you seem to only commit your projects to GitHub then leave them there. You may as well use Google Drive. That could come across as a lack of investment in projects. Second - you need to network if you can. If you're taking classes make sure you make connections and those friends can someday help you get in somewhere. Third - make a blog, not just a GitHub. Create a website that people can use and go to so that they can see your actual code running and working. This helps a TON, it'll allow people to not spend time going through all your projects and rather just see your stuff surface-level. Fourth - maybe try a remote position or try doing some freelance work. Have a friend that needs a website built. Offer to build it for free if he pays for the server costs. Good luck out there.
Shift your code to the bottom of the page and try again.
Huh, would that work? Interesting. I guess I don't know exactly how destructuring combines with default argument assignment.
Thanks for taking a second to look at it! I do have several of my projects published on netlify and/or heroku, I just didn't post them here. I do have CV and portfolio website which I created last year, but it's oldish and I'm waiting to create new one and then put my work on new one. I am constantly sending proposals on Upwork and I got few jobs but they were smaller projects that you can finish within 2-3 days. Thanks again mate!
Well in this case the one liners may be more easy to read. If you’re using map/filter it’s shorter than writing out a full reduce for example.
Because of using `document.getElementById()` you also have to set the `id` of element. So there should be `&lt;div id="enterimg"&gt;`.
I have an admittedly irrational opinion about Vue - its very existence makes me angry. I tried Vue, and the differences between it and React just seemed so superficial and shallow that I couldn't help but wonder why someone even bothered to make it. It doesn't do anything fundamentally different from React - sure the syntax is different, etc, but I could tell that the way I structure and design an application wouldn't change during the switch to Vue. So I came to the conclusion that there was no reason for me to even consider switching. It's further compounded by the fact that, at the time I tried it, it was missing a whole bunch of stuff. So the things going around online to promote Vue were like, "True, it doesn't have Native for mobile devices yet, but Vue Native is coming soon!" And I'm like, "Okay, that's nice, but React **already has it,** so it is indeed a point against your weak little framework." I admit my opinion of it is irrationally hostile, but that's just how I feel about it. Every time I see the name Vue, I shake my fist and say, "Why does that stupid potato of a framework even exist?"
getFromApi("g4adf", false, false, true, "realm1") &gt;!getFromApi({ userId: "g4adf", createIfAbsent: false, getFullProfile: false, debug: true, serverName: "realm1" })!&lt;
Question: how are old are you? != asking for help
Oh, so sorry, no. I was talking about the opposite case. If I write a library in TS and it gets consumed by JS (usually not by myself) the types in my TS library code don't help me check the parameters that get passed to my library's API because JS can pass anything to any function. I just wanted to point out that I've noticed that by fiddling around with TS. And I haven't found a way to tell the TS compiler that my function could potentially be called from a JS context and the parameters could be anything despite the type annotations. And my other point was: This problem also applies to values that get calculated at run time and get passed to my (originally TS) function. If I understood you correctly TS is able to catch at least this case? And thanks, I already know about the 3 points you mentioned. I can also add you that you can have type safety in JS by setting `compilerOptions.checkJS` in `jsconfig.json` to `true`. But using JSDoc for type annotations is kinda verbose, but again better than nothing.
I'm sure you know, but as a reminder to others: Spread will create a new object, which might not be what you wanted to do in this case, or could be using more memory than necessary.
Why use spread over Object.assign?
Use ‘this’ as an reference to the element
It’s cleaner. Why write out 2 words when you could do ... with surrounding braces instead?
Looks like you are trying to get by Id, but I don't see an id in your html.
&gt; being a subset of the JWT standard, I think the strength of paseto shines in its simplicity to configure. Paseto isn't a subset of JWT. &gt; you can also lose some flexibility as well. That's the point of it. This kind of flexibility isn't useful and only harms security.
Ohman, awesome! Thanks. I think I've got about 3 people from today. I can definitely use that site as a good source for practice problems. Much appreciated.
Didn't know about this, pretty awesome.
Hi /u/Choltzklotz, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hawaiianwaffle, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
There was a very similar thread a few months ago, and I wrote up [a high-level summary of why people might pick each major framework](https://www.reddit.com/r/javascript/comments/avsuei/react_vs_vue_a_sidebyside_code_comparison/ehi6g1m/). I'll quote that here: &gt; Each of the major frameworks has its own totally valid selling points, and it's perfectly reasonable for different folks to pick different frameworks based on their own opinions. &gt; &gt; Some examples: &gt; - React &gt; - "It's just JS" - no templates, no special syntax other than JSX &gt; - Big ecosystem, pick and choose the pieces you need to fit your use case &gt; - Lots of new concepts and innovation with React itself, and the broader ecosystem &gt; - Very widely used &gt; - Core team provides tools to help migrate older code patterns to newer ones &gt; - Angular &gt; - "Enterprise-class" &gt; - Batteries-included, well-defined patterns, CLI for generating new functionality &gt; - Use of TypeScript works well with large-team dev and maintenance &gt; - Vue &gt; - "Just drop it in and go" &gt; - Single-file components provide a simple pattern &gt; - Core team maintains and integrates all pieces, with great docs &gt; - Don't have to worry about doing things "by hand" - state changes update UI automatically &gt; - Ember &gt; - "Stability and consistency" &gt; - Convention over configuration means projects work the same way every time &gt; - Careful addition of new features in a backwards-compatible way makes incremental updates easy &gt; - Excellent CLI tool for managing various aspects of development &gt; &gt; So, plenty of reasons to choose any of these tools.
Hi /u/MalhotraRohit, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Thanks.
The debate here was really interesting but I think the example is a bit convoluted. It'd be easier to understand if you hadn't put in the fields parameter. It seems strange to give a list of fields that you want out of a getUser request unless you're using some sort of graphQL endpoint and that may have led to some of the confusion. It might have been easier to understand if you'd just done a method with getUserDetails({name, surname, email}) because then you can call the method with something like getUserDetails(userSummary) which shows how it will pull those specific fields out of that one object, so you're just passing in one object parameter but as long as it contains all those fields it's fine. This also demonstrates the advantage of destructuring. This would be a good example of clean code. However... if you're forcing someone to create an object arbitrarily to call a method then this isn't particularly clean. Really this sort of object destructuring should only be used where there's an intended object it can be used with. Also if you're forcing people to pass in an object to reduce the number of parameters required in a field then actually you're going against the good naming requirements and just hiding the parameters in your fields array, this causes a shitload of wtfs when people read how you use those fields array values and so it's not clean code. If you're just forcing people to create objects to use a method then you're creating structures which aren't intuitive and easy to understand therefore defying the principals of clean code. The destructuring is genuinely valuable, for example it's used a lot with react and the props object. But just leveraging it to fake a fewer number of parameters in your method signature isn't clean, it's confusing and makes the code harder to follow.
JSX is insanely great. Templates are weak.
Great article overall, thought most of the points were brilliant. The debate on this one was really interesting but I think the example is a bit convoluted. It'd be easier to understand if you hadn't put in the fields parameter. It seems strange to give a list of fields that you want out of a getUser request unless you're using some sort of graphQL endpoint and that may have led to some of the confusion. It might have been easier to understand if you'd just done a method with getUserDetails({name, surname, email}) because then you can call the method with something like getUserDetails(userSummary) which shows how it will pull those specific fields out of that one object, so you're just passing in one object parameter but as long as it contains all those fields it's fine. This also demonstrates the advantage of destructuring. This would be a good example of clean code. However... if you're forcing someone to create an object arbitrarily to call a method then this isn't particularly clean. Really this sort of object destructuring should only be used where there's an intended object it can be used with. Also if you're forcing people to pass in an object to reduce the number of parameters required in a field then actually you're going against the good naming requirements and just hiding the parameters in your fields array, this causes a shitload of wtfs when people read how you use those fields array values and so it's not clean code. If you're just forcing people to create objects to use a method then you're creating structures which aren't intuitive and easy to understand therefore defying the principals of clean code. Why should they have to read the method and understand the syntax to figure out they have to create an object to pass one in - are they gonna spend an hour looking for the object it's designed to be used with which doesn't actually exist?? The destructuring is genuinely valuable, for example it's used a lot with react and the props object. But just leveraging it to fake a fewer number of parameters in your method signature isn't clean, it's confusing and makes the code harder to follow.
I think Svelte hit the nail on the head of identifying the problem of current frameworks. However the implementation is kind of magical. I would rather see Observables integrated into the language as first class constructs. Imagine if you could do something like: (Mouse.x + Mouse.y) |&gt; console.log Which would log the sum of coordinates everytime you move the mouse.
Each destructure gives you a new 'layer' of props to work with. For each 'layer' u can set default props. You can keep destructuring ad infinitum but I think 2nd destructure already gets pretty unreadable x)
Its really hard to get people to change once they are stuck in their ways. That isn't just true when it comes to coding, but life in general. You should of made yourself aware of what their stack was during the interview process, and went somewhere else if you couldn't stomach it. Nothing is keeping you there though, if it really bothers you I suggest looking for a job elsewhere. Learn react or something in your free time so you can make a case for yourself.
What a great function name, "getUsersWithFieldsWithinDateRange"
On the 7th line, remove the semicolon. That ends the if statement.
I have a nagging suspicion that the "ISO8601" might be coming from a php source. Php's implementation is non compliant, and needs to use Atom instead. Moment can also be taught standards iirc.
&gt;Paseto isn't a subset of JWT Fair enough, I do see the justification for that. &amp;#x200B; &gt;This kind of flexibility isn't useful and only harms security. However, I will have to complete disagree with this statement. Flexibility does not harm security. People configuring security parameters that do not understand how to properly does. Look at TLS for example. There are known issues with TLS, when it is not properly configured. If we take that as a security weakness, and lock it down to a single encryption/key exchange algorithm, then it would be massively incompatible, and unstable. TLS has several cipher suites that are supported, which allows for flexibility between server and client compatibility. The flaws 'uncovered' with JWT are at the implementation layer. If you configure your implementations properly, then those security issues are nonexistent. But again, that would be a people problem and not a problem with the standard itself.
Worked on my portfolio site: https://www.karanpratapsingh.com And updated my app: https://github.com/karanpratapsingh/kcards
Or something else, depending on how it’s been called :]
Uh... That site is really bad
Your argument basically boils down to *"if nobody makes any mistakes, it's secure"*. Well, people do make mistakes and anything that wants to be secure has to account for that. We know what happens if you take the flexibility approach. That's why the cryptography field has sharply turned away from that way of doing things. Sounds good in theory, but it turned out to be terrible in practice. Then JWT came along and repeated the same mistakes all over again, and it caused security problems all over again. There have been issues with JWT that almost every implementation have suffered from. It doesn't matter where you would like to point the finger, that doesn't make the problems go away. *"Yes, there were security problems, but it's okay because it was the developer's fault not the standard's"* does not help anybody, there's still a security problem. It's far better to use a standard that is designed not to have those problems in the first place.
JSX was invented to facilitate the VDOM, not as a rejection of HTML or using templates.
Better yet, maybe use something like Ramda for piping map/filter/reduce into seamless functions. Idk, it depends on the style you guys prefer...
On that matter, there is also an optional chaining proposal for ECMAScript using operator `?.` https://github.com/tc39/proposal-optional-chaining
Hi /u/Clauric, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/immortalcoder, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
JSX was only ever invented to facilitate the VDOM, and artifice of diminishing value. The VDOM still uses the DOM, the DOM is getting better. Their convergence makes the VDOM redundant, and JSX extinct.
A lot of people already pointed this out, but.. I guess I can add one thing. There are not such thing as Array type in JavaScript. We have array like abstractions, but technically those are just objects with properties 1, 2, 3, 4 etc. And the length is the highest integer property +1. A lot of people do not read official documentation I guess -\_-'
JSX is far more than a vehicle for virtual DOM. It allows to - declaratively describe user interfaces. This paradigm keeps React code simple to reason about, whatever the size of the application - group related concerns together (as opposed to templates, which fragments a single concern into multiple files) If DOM APIs get better (as you state), React will greatly beneficiate from it.
Which one are you using? Neither VSCode nor WebStorm warn me when I call a function with less arguments than the amount of parameters it accepts. (because I forgot to add some `null`s or default values for params I want to skip) Maybe if you enable strict TS checking for JS files, but that's not really a solution in a lot of environments.
Could you explain what you mean by that? :)
Maybe the book series So you think you know JavaScript would be ideal for you. Very granular
Yeah, I mentioned the optional chaining by the end of the article, I also show how the example code would look like by using it. It's still on stage 1 for now, there's already a babel plugin to play around with it, though.
That's true. But imo less of a footgun than `||` which breaks as soon as you want to accept a number where `0` is a valid option. `foo == undefined` to the rescue...
The code looks fine. You may have to define an environment for ESLint so it will recognize the globals.
See [https://eslint.org/docs/rules/no-console](https://eslint.org/docs/rules/no-console) It explains various ways to switch off the warnings.
Thanks a lot
You're running eslint, which is a syntax checker. Browsers are written so that they accept nearly anything vaguely resembling computer code as JavaScript and try to make the best of it, sometimes even doing what the original author intended. Eslint attempts to help the programmer not run into these failure-prone error correction precautions. The flags shown in the brackets are rules that eslint checks for. You can use this to get a more detailed explanation (as somebody else here already explained), or disable that specific warning. For example, the `no-console` check doesn't make sense for your application, since you definitely want to use the console.
Nice
so when I disable eslint, what will happen to the ones that are actual error preventing me from logging to console? Will those error warnings show up?
Yes, if the browser gives up trying to make sense of your code, it will log error messages to the web inspector console (not the editor!).
&gt;Creating an array from the keys of an object Example seems like quite a bit of overkill when `Object.keys` exists.
console.log will break IE if the console isn't open. it's not a fun error to figure out.
Do you have good examples of #1? I feel like I agree, but I can't think of something concrete to reinforce it.
I'm going to guess.... adjustWidget({width, height, opacity, isGarlic, isDragon, equipmentHistory, hatProperties, hasHat);
Fuck, you're good.
There are a lot of professional developers who don't even know most of these stuff.
lol yes it does retard. assert.equal(spellNumber(5), 'five') automatically checks for type string.
This seems like more on how the language works in the first place than a little cheat sheet. Good work but a bit overkill.
ah yeah, I've heard that using multiple console.log all over put you into some shit so it's not recommended for production and that it's a bad practice. I'm still at beginning stage learning but for future reference, what is the standardized way in the industry???
Got it, so your plan to avoid type safety issues is to throw runtime errors and then handle those errors all throughout your code? Absolutely brilliant, how have I never thought of this...? It's pretty obvious that coding is not your forte, perhaps you should avoid calling people "retard" when it comes to areas where you are obviously inexperienced.
&gt; Why would I need to add type annotations in my 100% test covered code. Because tests check one case and types check all cases. To the extend that they overlap in the errors they can prevent, strong typing is strictly more powerful.
Why is it asking for trouble to edit files on a server?..
Actual developers will always go to google and find the relevant stackoverflow or mdn article instead of this.
So I'm obviously biased because I love typescript. But I just consider type annotations or sort of inline test. Obviously types by with no testing is silly. But 100% coverage doesn't necessarily mean much either. As a hyperbolic example you could run some code then just assert true is true and boom "coverage". I think of types as just another testing tool and a sort of documentation, but obviously it's no silver bullet. Testing and types can should be used together to make incorrect implementation easy to spot.
I really doubt that. Maybe don't have the exact syntax memorized but definitely know they exist, which means they're all basically 1 google search away.
Honestly, I don't think it's good advice. Using chaining like that promotes mutable state and impure functions. In some cases it's fine. Like `[].map().filter()`, because it doesn't mutate the original object. The example as given isn't a great idea.
Exploring ES6 is a little like drinking from a fire hose. It goes into details, some history, some design rationalizations, sometimes a little redundant, JS limitations, etc http://exploringjs.com/es6/
Now console log it and check out the length. Minor irk but I also dislike that arr.length assignments also throw TypeError with anything other than a number. All minor things but still one of those cool wtf moments to show to new devs
I have colleagues like that...
Sometimes using a boolean param to signal the code path in a function can be a good indication. Sometimes it's ok to have two separate functions with some duplicated logic. Don't be afraid of code.
For a while, the answer to all those questions was "read the [Flanagan](https://www.amazon.com/dp/B004XQX4K0/)", but at some point it stopped keeping up with the ever-accelerating happenings surrounding the language. Nonetheless, it should still provide a healthy foundation.
Check the EcmaScript specification then)
I ran into a nuxt.js hook at passed into a page object. if I destructured it into html, path, route, I couldn't modify the html property because it didn't expect a return object but if I just accepted the page object, I could set page.html and that modified the html. it's just a comment to realize that destructured objects are no longer a sum of their parts. so it the nuxtjs case, page can't be destructured in the hooks because it's not reconstitution the object
Why not [MDN Javascript Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference) ?
You're not debugging first. There's no code review or qa. You're not running your automated tests. The changes aren't in source control and could be undone by the next release. Basically you are bypassing every step and check that is normally in place to prevent bugs and other unintended consequences. We have those processes for a reason.
In your example &amp;#x200B; let count = 0; fork(function thread() { count++ }) 'count' would exist in a completely different execution context. Either the thread is copying 'count' into the thread or its sharing count (with atomics). For inline threaded code like this, you would probably want to outlaw this kind of thing and raise an error that shared access on state is being attempted. And you probably want to think about how you would utilise SharedArrayBuffer in such a setup. &amp;#x200B; Given the nature of threaded worker stuff in JavaScript, im not sure this abstraction is fitting at all. Perhaps you should spend some time with Rust, it might give you some ideas.
That is fine and understandable but this example did not specify at all what environment you are working in. For instance if I have to set up a NEW development environment for a new web application my team is starting. I am going to inevitably have to ssh into it and poke around to help facilitate further steps like automated deployment. &amp;#x200B; There are 100% times when you will poke around with files on a server.
BTW, David Flanagan is still documenting JS, just in a different forum. He's part of the MDN team at Mozilla now. https://hacks.mozilla.org/author/dflanaganmozilla-com/
Probably you mean "You Don't Know JS"? https://github.com/getify/You-Dont-Know-JS
Good catch. Yes that’s what I meant. I read an article on MDN called so you think you know js lol
Good catch. Yes that’s what I meant. I read an article on MDN called so you think you know js lol
just turn off eslint extension on vscode, because it will be just annoying, also there should be a setting for eslint to treat them errors as warnings in case you'd want to keep it on.
You Dont Know JS is pretty cool, and its free to read.
The source?
Rule #2
Hi /u/CharlesPolley, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The most compelling reason I can think of is if you know who will be maintaining the code and you loathe that person specifically.
well, syncing its value between contexts is exactly what I wanted to highlight there
You could switch to using GraphQL for API queries and alias the fields in the queries.
We simply ignore the lines where we deconstruct the variables. It’s way too much work to convert things or convince people and it’s only a linting rule, so it’s not that important imo. Merge requests should see if someone abuses the linting disable rule or not, but in the case of backend data we are fine with disabling it.
Hi, you can maybe try this and check if the linter is happy. ```const { rand_var: randVar } = someObj``` Else, I'm pretty sure you can change the rules of the line to be happy with deconstruct and rename. On my phone right now, but do let me know how this turns out. Good luck!
We use Django for our backend and React for our frontend, so I know exactly what you're talking about... Absolutely no way to ask one side or the other to deviate from convention - that would be pure madness and you would have a riot on your hands. We use Django Rest Framework for our api and installed [this](https://github.com/vbabiy/djangorestframework-camel-case) convenient middleware. The basic idea is that you setup api middleware to parse camelCase to snake\_case on request bodies and parse snake\_case to camelCase on response bodies. You only have to write it once and both sides get what they want without ever realizing the other side is doing anything different. Highly recommend doing it this way.
Hi /u/Igneel64, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
But then, when I want to use the function, I now get no type hints whatsoever about what information it needs to work. All I see is that it can give it a mysterious blobby object that might have fields of some kind. Never mind if I accidentally misstype one of the keys. That's a nightmare level error to find. This can only be solved by extensive documentation of the function and we all know that such documentation often lies when people refactor or extend functions and forget to update the docs.
Yeah, so? Characters are not a limited resource. I'd rather have a little more verbose function name than a "this might do anything" name.
Smart
That's the thing, don't forget :) I got it into my habit to also add some JSDoc comments to at least know what type of values the function expects. Then, when I type my functions name, the popup appears (VSCode) with all acceptable arguments, theirs expected types and if they're optional or not. The code you write is also for humans, make it human-friendly. If a function HAS to accept a lot of arguments, not all of them required, then I sometimes use and object of params like so: ``` function(name, options) {} function("Gregory", {foo: 1, bar: 2}); ``` But that depends on what I code, I don't treat it as hard rule.
Mostly ok advice - but I disagree with the advice to use inheritance as a method of code re-use. Avoid inheritance wherever possible and focus on pure functions and composition instead. Also be careful when DRYing your code - allow for some duplication until you know you're making the right abstraction. Plus, do TDD and don't test against implementation details wherever possible. This means in React for example, you should never shallow render in your tests.
Isn't it possible to add a response/request middleware to your http client (fetch, axios?) and then deep transform snake_case keys to camelCase keys? Then you only have one place to convert it and it's abstracted away.
Indeed, either rename the variables during destructuring, have your deserializer on the front end automatically convert to camel case or configure eslint to ignore case when destructuring.
The vdom is a platform independent abstract for functions. This is why React can utilize its eco system on all platforms, the dom being one of many. Each and every platform improvement is available to JSX, because it is a DSL, not a language. The only diminishing value is the platform itself, they're all aging. If you see giants like Windows tear down their own platform api's in favour of x-platform React that should give you a hint. This framework was written with the explicit purpose of abstracting platforms into implementation details.
are you Colombian?
Yeah just what I was thinking. With Typescript you wouldn't have that problem because it would clearly say what date you would be filling
I hate that trend too. If you search for cheatsheets they're almost all full-blown references or formatted like a blog post, very rarely do you get a 1 or 2 page information dense quick reference
What comes to mind is when you're passing an object in like: myUserObject = { fields, fromDate, toDate, } getUsers(myUserObject). When you destructure the parameters of your function, this will allow the passing of arguments in no particular order or you don't have to pass them all in. I actually just came across this today so I might be wrong.
Hi /u/rachevo, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
just use a comment for eslint in the specific file where you do the renaming. https://eslint.org/docs/user-guide/configuring.html#configuring-rules section is Using Configuration Comments
You're on the wrong subreddit. This is /r/javascript, JavaScript is not the same as Java, what Minecraft is written in. &amp;#x200B; I don't have any experience with writing MC mods so I can't help you out here. I am going to assume that you followed the Minecraft Forge tutorial so I think that the people on their forum should be able to help you.
You said BOTH suggestions were met with resistance... So, what does your team currently do? Do they do &gt; const firstProp = data.first_prop for every prop?
Thanks! Less fire-hosey and covering more ground: http://exploringjs.com/impatient-js/
Your CTO (or whoever is in charge) should enforce the coding style rules. You shouldn't have two sets of rules, that's silly.
Ask back end guys to add both a response and request filter/middleware where they would just transform camelCase into snake_case. Now both are happy and that potentially expensive operation is done on a machine with bigger muscles.
It's really cool, definitely makes the website more memorable
JSON should be camel case. Python devs shouldn't let their conventions leak out of their environment. They should be converting to camel case whey they serialise their data.
I used Flow for years, and TS a little bit on the side too. I followed development and "issues" sections of both projects on Github regularly, also filed quite a few myself, for both projects. I switched our projects from Flow to TS - **but not for technical reasons!** Flow is at least as good and a bit more strict than TS. There is no technical reason to switch. The external lib definitions are a lot better with TS. The switch was easy and mostly menial work. Only a few sophisticated types had to be rewritten, but mostly using TS conditional types that was easy too. For me TS is slower than Flow, especially when I check the whole project (no big deal on the command line, but when I tell he IDE to always "Show all project errors" I have to wait quite a bit after typing something, and that takes less time with Flow). The reason I switched was: My worry about how "good" something is is secondary to how wide-spread it's use is. TS wins hands down in this category. I could barely get the rest of the team to use Flow, lots of "any" all over the code, they avoided it wherever they could. It's *a lot* easier to get them to adopt TS. That's also because we have quite a few (Master) students on the team, so no fixed employees, and they are much more open to spend time learning something that will be valuable to more potential future employers. As far as issues go, *both* TS and Flow have tons and tons of legitimate unsolved and sometimes unsolvable issues. It's instructive to spend some time again and again reading the Github issue sections. There are lots and lots of scenarios where the type-checkers had difficulty. Remember, it's a program that tries to understand what another program does - a very, very hard task. Even by restricting the code that can be written there still are plenty of tough cases left.
Something like this library could be of interest as well: [https://www.npmjs.com/package/change-case](https://www.npmjs.com/package/change-case) &amp;#x200B; import changeCase from 'change-case' const camelize = data =&gt; Object.keys(data).reduce((acc, key) =&gt; { acc[changeCase.camelCase(item)] = data[key] return acc }, {}) const dataFromBackend = { user_name: 'Bob', user_email: 'bob@poop.com', } const camelizedData = camelize(dataFromBackend) console.log(camelizedData) // { // userName: 'Bob', // userEmail: 'bob@poop.com', // } I think the resistance is warranted because doing that is a) additional code, therefore more surface area which increases chance of bugs and increases complexity overall, and b) extra cpu/memory/garbage collection pulses/bandwidth usage. &amp;#x200B; I might prefer just disabling the rule for destructuring via \`"ignoreDestructuring": true\` on the \`camelcase\` ES Lint rule. I think there is some merit in the idea of essentially obfuscating your database schema by using camelcase or totally different keys in the client-side bundle. If you imagine that a bad actor could reverse engineer your JavaScript bundle and see that all fields related to user take the form of \`user\_\`. A person could make assumptions and start probing API endpoints, etc. For example, if they know everything is \`user\_\*\`, they could try mutating values such as \`user\_admin\` or \`user\_phone\`. Long story short, you could think of that as a leaky abstraction, or a leak of the API's implementation details related to model schemas. However, I am still focused on, what is the absolute least amount of code needed to accomplish the functionality. One of these ideas will net the least surface area and likely the best performance also, even if we are only talking 15 milliseconds. I don't see any harm in \`&lt;input name="user\_name" :value="inputs.user\_name"&gt;\`. I empathize with your concern, but I might try to convince the "anti-snakecase crowd" to just pass through the immutable data with as little processing as possible. With transformation steps comes chance of malformations. The solution should be what is the most realistic to enforce as numerous people are working on the code. You need to know more from those people what their exact concerns are so you can apply weight to each choice and see which choices are aesthetic. I think you will win if you can appeal to maximizing performance.
I always use snake\_case in my personal front end project.
It's not just slower, it's also less readable than for...of. Map, filter, reduce are all great, but if you need a for each functionality, use for...of instead of forEach.
Go to the middle term and use kebab-case :)
I'd do that like this: &amp;#x200B; Array(7).fill(0).map(() =&gt; String.fromCodePoint( 129300 + Math.floor(Math.random() \* 20) ));
Explicitly gate objects as they go from one boundary to the other, even if not needed. Also, most JSON payload are in camelCase, so you probably need to do this transformation on the backend. ```function thingFromApiToThing(thingFromApi) { return { someVar: thingFromApi.some_var, // and so on. } }```
Interesting thread on this: https://mobile.twitter.com/addyosmani/status/954254600193769473?lang=en
[`camelize`](https://github.com/substack/camelize) ftw, baby! Also write your API in node :P
now when you say "javascript's".. surely this is an engine implementation fault? different browser, different execution time?
It sort of depends, I think. I do like `for...of`, but sometimes I do think the `forEach` is better. Chaining map/filter/reduce can be great for performing a calculation. I tend to add a `.forEach` to the end of that chain as a way of expressing the *effects* I want to perform with the resulting data. So it all flows in a seamless chain of method calls. It looks a lot cleaner when you’re not using complicated lambda functions inside the `map/filter/reduce/forEach` arguments. Ideally you would pass in pre-made functions, so it looks like this: ``` data .map(stringifyInput) .map(toLowerCase) .filter(byInputLength) .reduce(toMultipleArraysOfSize(3)) .forEach(renderToTable); ``` The ‘forEach` at the end is a nice clean way of tacking on an imperative “then-do” expression to the end of the data transformation. And part of why it looks so clean is that all the inner functions have been defined somewhere else, and they’re descriptive. In a real application, those functions would likely be imported from some module that the whole team uses for handling that specific type of data. Now, in some cases you might want a faster algorithm for this stuff, especially huge arrays, and I think it’s valid to switch to `for`/‘`while’ loops speed things up. But that is often a sacrifice to readability IMO.
Yes it's implementation dependant. Oddly Chrome's forEach is much faster than nodes despite both being based on V8
We integrate Ruby and JS and come across this problem plenty of times. Our solution is to `// eslint-ignore-line camel_case` throughout, where necessary. If you have a data abstraction layer, you could ignore a block, or a file. Remember that linting is there to help you write good code; it shouldn't be getting in the way of writing _correct_ code.
You can also create a new object with assign. But cleaner to use spread literal if you want to avoid mutation. a = Object.assign({}, a, { age: 27 }) a = { ...a, age: 27 }
Why not just use map?
Cool, thats a new one, looks like its not finished. Hmm, says the PDF is 50% done and its 265 pages and called "JavaScript for impatient programmers".
JSON has no convention.. it's just data.
exactly this
What are you trying to achieve here? Also, clientside authentication can be very easy to circumvent, serverside is better.
I agree. Don’t be afraid. But one example I can actually think of is when someone on my team recently tried to combine 2 similar but really quite different components. He passed down this isSmall flag and then within the component passed it down to another 5 sub components and so on. In reality I would have preferred he just copy and paste the code than trying to fit 2 components into 1. At the same time I understand why he did it because there was a decent amount of code shared between the 2. It felt like there was a better way to abstract. In the end we’ve left the code as is because it does work. An example where I’d prefer flags over 2 components is Button with a small flag. That’s nicer imo than 2 components called SmallButton and Button.
&gt; More clearly, Array.from(obj, mapFn, thisArg) has the same result as Array.from(obj).map(mapFn, thisArg), except that it does not create an intermediate array https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from
That’s valid. Their example used an array. They should have used an object imo
The `Array.prototype.from` method will generate an array from any array-like or iterable object. That includes normal arrays, but it also includes ES6 Map, Set, iterators, ordinary objects that have a behave like iterators, or other structures considered to be “array-like.” So it’s just a more generalized form of `map`.
Just different versions of V8. If you'd to take Node 12.x - the results should be on par with latest Chrome.
That’s a super useful bit of middleware. Excellent idea!
This is what I do. But be careful in case any of the attribute names are meaningful. For instance, one of our datasets is an object where the keys are IDs. Converting them to canelCase means you have the wrong ID (ie, `’thisVar’ !== ‘this_var’`)
Use Zope 2 for your Python web framework, it predates when the Python community switched from camelCase to snake\_case :) &amp;#x200B; Working out that situation right now, but since I'm the sole dev I can just use snake\_case in the JavaScript and no one is making a lint-stink.
Will do. Thanks!
This seems to be one of the most recommended books. Thanks. I'll check it out.
Interesting, Ive never heard of it. Thanks for the info. I'll definitely read it.
This is the way to go. Conventions in the backend _language_ shouldn't define conventions of your api
Oh okay, thanks for the information.
This, and if the linter still complains about this, your linter needs changing to adhere to the real world instead of forcing rules that don't work for you
Tested on node v12.2.0 for Each has exactly the same time as for...of
Standard for being still &gt;x2 faster
plus there are plenty of popular APIs that deliver data in snake case
If you're littering your files with ignore statements wouldn't it be better to just change the rule?
The benchmark was such a simplistic case it’s unfair to extrapolate those results to anything close to real world cases
forEach makes sense in a functional programming style, while for...of makes more sense in a imperative style. They’re both useful.
That makes sense. Thanks
That's good. Thanks
That's true. But I also think it's interesting that it was so close to C.
It doesn't. &amp;#x200B; But it's called JAVASCRIPT object notation and Javascript does have conventions.
I totally agree. I would say they are sort of like different hierarchical categories of programming. Imperative is somewhat lower-level, while functional is higher-level. I think the programming experience is often nicer at the higher level, where ideas translate directly into simple, idiomatic code—almost pseudo-code. And OOP can provide that as well. I mean, technically, chaining a bunch of method calls implies an object-oriented approach. But yeah, I agree with you... different tools for different problems.
Browser sandboxing is going to make it difficult for you to access OS specific functionality directly from JavaScript. If you do it's likely to be seen as a security hole and will be shut off pretty quickly. At best you might be able to use NTLM authentication on a web API call then query your server for the current users login details.
Would this be faster on a faster CPU? Just wondering if that is what is limiting it.
Just take a quick look at the comments and you'll see a full breakdown of what kind of mistakes the OP made writing these tests.
Ok, those may be fair. I've never worked with docker before. These days I work mostly in azure AppServices and Function apps. In that case, I'm not really even sure I _could_ log into a server. I know you can't edit functions if they were deployed from local code (rather than typed into portal). I suppose every use case has it's own limitations. But these days, the idea of editing javascript files on the server gives me the heebie jeebies.
Isn't this true for any programming language? This is expected behavior. And I'd still say defaults are preferred.
In any case, DOM APIs are (and will remain) imperative. Using them as is does not suit large application development.
Yes, but so would everything else (roughly). It's the relative speed we are interested in.
It _is_ finished and all essential chapters are free to read online. The 50% refers to the preview PDF. JavaScript has become huge and this book covers almost all of it (hence the page count). But it is structured in a way that lets you decide how quickly to progress (from skimming briefly to in-depth reading).
CORS is not designed to prevent you from accessing white-listed domains, but to access the others.
Can you generate the array first with those elements, then shuffle it?
Not using Django, but with Symfony there is something similar with the serializer component. So I would've suggested something similar. It's great tho.
```javascript const base = [ "red", "red", "red", "red", "red", "red", "blue", "blue", "blue", "blue", "blue", "pink", "pink", "pink", "pink", "pink", "pink", "pink", "pink", "black" ]; const randomComparator = () =&gt; (0.5 - Math.random()); const alteration = (base) =&gt; ( base .concat() // clone .sort(randomComparator) ); const generateAlterations = (base, length) =&gt; ( Array .from({ length }) .map(() =&gt; alteration(base)) ); console.log(generateAlterations(base, 10)); ```
Yes, i do know the exact amount I want of each color
I would not do either of your two options. There is at least one more option. Convert to/from camel case when communicating with whatever API you're using. I write APIs in Flask and use Marshmallow for the user-facing serialization/deserialization. It has a way to use a different key for the JSON side of things: class PackageSchema(Schema): date_created = fields.Date(required=True, data_key='dateCreated') So on the python side I would use `date_created` but in the serialized JSON (and JavaScript) it would use `dateCreated`.
How else would you test a simple loop?
You have two options. You can rename the destructured properties right as you are de-structuring them or you can you constants in your initial state tree in your reducer to rename them. I worked a similar project in the past.
and vice versa of course.
I ran these in node 10.15.3 first and they were all around 25000ms, except for reduce. Then I switched to node 12.3.1 and got them all down to a few hundred ms. That's some impressive optimisation.
^ this is the right answer. API should be agnostic of language, but I would choose snake_case fir the API. This leaves the front-end building a simple transformation layer for response/request bodies to change them to/from snake case. This could get difficult depending on what your API looks like (acronyms/inconsistencies). It may be better to just code generate classes for transformation if you have a declarative API definition.
Of course :)
Hi /u/sour-patch-kraut, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/LEWMIIX, this post was removed. Well, this is awkward. This subreddit is for **javascript**, which is different than **Java**. In other words, `javascript !== java`. Maybe try one of these instead: * /r/Java * /r/JavaHelp * /r/LearnJava Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sonemonu, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MysticalChungus, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/yjy3, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
These are all different kinds of iteration as well. - for/while - custom conditional but generally over indexed elements, densely - for..in - iterates over all enumerable properties - for..of - iterates through iterator, must be an iterable (but can be customized) - forEach - iterates over indexed elements, sparsely `for`/`while` are low level tools that the developer implements. `for..in` has its own internal rules, consistent across all objects, though the `enumerable` settings for any property can affect whats caught there. `for..of` relies on the iterable implementation, which expects the object to actually be an iterable (arrays inherently are, using Array.values; plain objects are not) which can limit its usage. And forEach is a method of the object so is controlled by the definition of that object, but typically follow the same rules (Array.forEach as a baseline). As with for..of, it would need to exist to be used, though as with most array methods, the array version is generic enough to use on any array-like (NodeList for example uses Array's forEach but is not itself an array). Just a quick example of forEach vs of const a = Array(10) a.forEach(console.log) // &lt;nothing&gt; for (let v of a) console.log(v) // undefined x 10
I wonder if it's "fault" when honestly a construct should be faster than calling a function. JavaScript is so fuzzy, optimizing the runtime must be fucking hell. Manually writing special logic for bunch of apis like forEach().
Yesterday I got the same idea. Cool I got to use it without creating it first. :)
The browser is the one enforcing CORS, and it will not let you override the CORS headers sent by the server.
Hi /u/oneevening, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
But being much less readable. Honestly, how many things have you written that would noticeably benefit from that speedup?
Hi /u/mrsalvini, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dogeboz, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
These 'rules' are for readability and to help prevent typos and other human errors. Now-a-days we have IDEs which mostly handle this for us anyway. I'm not saying we shouldn't care - but if your coworkers are so caught up on it that they can't handle a little deviation then... maybe they should reevaluate why we're using these rules.
CORS doesn't whitelist a domain. CORS headers exist on every call to the server, and any endpoint that shouldn't be accessed cross-domain shouldn't have CORS headers returned.
I see two problem here: 1. ' I want to be able to destructure the object I got from the back, like the following: ...': Don't to this. Make explicit parseDataFromBackend function. When your backend will change you have one place to change. 2. \` our linting rules \`: disable lint for parseDataFromBackend function. Linter is only a tool and you have to adjust it to your environment.
Hi /u/spacegloves, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Psyman2, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Semantic assumptions...that will make for some fun code.
they have both
Hi /u/poezzie, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
how is it low effort ? it's just me asking a question that could be solved in seconds. Now im no where further cause I need a discord server which I can join.. Thanks.
Actually they give it an object with the property `length: 7` which creates an array that is 7 items long. Which honestly is more confusing. Does that mean if I give it an object it will iterate over the keys and map the values? What if that object has a length property? Does it then actually turn into an array mapping the value of length? What if length isn’t a number?
Yeah if anything I'd say this is a perfect example of when to use destructuring.
Adding on to your comment, you can also use LDAP with NodeJS. I've mapped the login user and password to authenticate against Active Directory for some clients, instead of an maintaining a list of users and hashes in a proprietary database. https://www.npmjs.com/package/activedirectory There is also SSPI authentication which passes the NTLM/Kerberos information, but I've honestly never tested it and requires the host to run Windows.
I do the front and backend. We use snake case as returns since they come from the backend. On the frontend it can easily be parsed I to any variable you want. Either way I would not be introducing camel case variables to my Django backend...and I would not use them on the frontend either. To me it's just dealing with the linting convention and not letting it control my working environment. I also use Dart, Vue, etc, and using camel case outside of top level objects is not really used. Dart is using snake case as well. Using hyphens breaks everything for me. I also like knowing where my data is returning from and the data having that clarity of origin...I can deal with frontend digestion as needed. But knowing my.api will be consumed by Dart, JS, Vue, React, Angular, I choose to keep the server side convention as pure as I can and reconcile that on the front as needed.
API's should always be camel cased especially if JS is the majority consumer but also it ensures that the API can be consumed everywhere. We also use python for backend and our API's are camel cased
Hi /u/Wojtek1942, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
wat
Wow. I ended up using this 5 minutes after I learned about it. Thanks, procrastinating on Reddit! I'm sure this one case justifies all the time I spend on here at work!
A value with a `length` property is known as an _array-like_. This is what `Array.from` accepts as its first parameter, an array-like or an iterable. This can be an array, a string, or a generic object with a custom length property. It can even be a function as they, too, have `length` properties. &gt; if I give it an object it will iterate over the keys and map the values No, not exactly. Not unless that object is an array-like or iterable. If array-like, the `length` property of array-likes would represent the indexed elements, or the numeric keys, of that object as it would pertain to an array. It would not be used with any of the other named keys. If the object is an iterable, that would have precedence over the array-like behavior and `Array.from` would map over the iterator values. This may or may not include all of those other keys but normal objects are not iterables, so you'd have to supply that behavior yourself. &gt; What if that object has a length property? Does it then actually turn into an array mapping the value of length? Yes, an array would be created in length size and each key 0 to length-1 - even if it doesn't exist - will be mapped over. They don't exist in the `{ length: 7 }` case, so you'd be mapping over 7 undefined values (keys 0 - 6). &gt; What if length isn’t a number? The number will be converted to a number if possible, otherwise it will be treated like any other generic property and ignored, assuming a length of 0.
+1 Check out this library normalization of api responses: https://github.com/codeBelt/sjs-base-model There’s a built-in utility that will covert property names, example here: https://github.com/codeBelt/sjs-base-model/blob/master/README.md#real-world https://gist.github.com/codeBelt/5ae6ff9474340a77e2ab4abbb9204aba
&gt; it’s only a linting rule, so it’s not that important imo Agreed. Lint is there to call your attention to potential problems. There may well be times where it makes sense to do something that your linter complains about, and in those cases the correct course of action is to pause, consider whether your usage is actually the best way, and either fix if not or move on if so. Possibly add a comment explaining rationale for why you're ignoring the specific issue, or if possible adding a pragma to make lint ignore that rule in that block.
So does parseInt. RTFM.
Be careful here. This has a whiff of magic, and magic always, eventually, backfires.
&gt;much less readable. I don't get the hate for the traditional for loop these days. It's perfectly readable, especially if you use classic i, j, x, y convention. You see one of these, and you know that statement is your iteration, and generally speaking, the rest is probably exactly the same code going into the new structure.
+1 to this. This first thing you should do to improve your quality is to use static analysis on your code. That means type systems like TypeScript. Once that is in place, then you can worry about unit testing and other automated tests. I prefer the view expounded in this post https://kentcdodds.com/blog/write-tests with the "testing trophy".
The problem is mainly in creating a new anonymous function for each iteration. You can speed up forEach by defining your function in a variable and passing that variable to the forEach.
Who cares?
Removing transformation in frontend reducers/data stores is a worthwhile optimization, especially if multiple clients are required to perform the same operation. Nit: Transforming on the frontend also creates a mismatch between received response and component properties. Depending on debugging pattern, it might save a few seconds having the same property over the network and in your application.
More mental overhead, more room for faults (mistyping i for j, missing a `- 1`, etc.), having to explicitly index `arr[i]` rather than just getting the element right away.
wow pretty neat I've to say. Good job I will try to use it in one of my future webapps
If you are using Axios, you can use an intereptor and camelize the keys of the json there. Otherwise, you can build a module that wraps the http library you are using and camelize the json responses there.
I'll give a shit the next time I am iterating over a million objects.
&gt; Javascript does have conventions. You may have conventions that you use, but Javascript itself does not prescribe any. It doesn't care what you name almost anything.
yeah man
My thoughts exactly. I think it's insane to ask your backend team to include middleware of any kind just so variable names are camelCase in the frontend code, which can do much more harm than a single lint ignore line can ever do.
ok thanks
Very likely the v8 jit produces something extremely close to C codegen. It could be possible the \~2ms delta is just the jit generating the inner loop codegen.
It's not hate, it's just that if you don't need the index for anything other than the array value for your present iteration then it's another variable to keep track of and needless mental overhead. Compare these: for (let i = 0; i &lt; arr.length; i++) { doSth(arr[i]); } for (const item of arr) { doSth(item); } arr.forEach(doSth); I don't know how you can look at these and think the first is preferable.
I started off in React and I switched to Vue last year for work on some new stuff. In a few months I'll be switching back to my old team and thus back to React, so I think I'm decently experienced at both. And you know what? I think they're both fine. Vue is pretty mature by now, and underneath it all both frameworks are JavaScript. If you're a good JavaScript developer, a good front-end developer, you'll have no problems with either. Which makes some of his comments a little irrational. Some are valid, like the lack of fragments in Vue. Others aren't, like the comments on the small API surface and TypeScript. Vue might try to come off as 'magic' but under the hood it's just JavaScript. I work in Vue on TypeScript just fine. My personal observation however is that junior developers tend to have a much shorter learning curve with Vue... but that's a double-edged sword because they don't learn as much. I think React is the far better learning experience for new developers. The junior developers have a much easier time with Vue, but the lazy ones end up worse when it comes to thinking in terms of organized, reusable patterns. It's not that the framework itself has anything against good code, it's just that it doesn't demand you to think in that way as much as React does. React forces you to think in certain functional patterns, because if you don't your code gets unmanageable very quickly. And I think that's the point he's trying to make - all the elegant solutions junior developers appreciate in Vue all exist in React, they're just not as obvious.
It's the backend's job to provide the data to the frontend in the correct format on a project imo. So, the answer is that right before sending you the data, they put it into the right convention. No need to change all the code. This can also be done in a middle wear if they want to be dumb about it, and refer all traffic through that.
1. Allow both styles. 2. Any backend property, directly use it as given from backend.
Maybe true in systems with one backend and one frontend. But in systems with many frontends? Creating difrent API for every client is a waste. Every client should parse API data to his prefered internal format.
I'd still make it: `arr.forEach(doSth)` if I could get away with it.
lol wut https://i.imgur.com/PdWu9rF.png Is this a type of spam? What's the point?
Neither Javascript nor Python allow hyphens in identifiers.
I guess this is what he/she wanted to point out. That both the second and third version are much easier to read.
I didn't say preferable, I said perfectly readable. It's also faster. To me, however, it is actually preferable now that you mention it, but that's because I've been doing this longer than the new conventions, so obviously I'm going to have a different perspective than someone who has recently picked it up. I instantly know exactly what the block does. I can use it on an array. I go through sequentially. I can control where it starts and stops. The second block I have to stop and think: Wait... for of... does this iterate over the array? Yes, ok. I have to start at index 0, but can I break out with continue or break? Yes, ok. What if I need an index? Well, I can use destructuring with .entries, but now our mental load is higher than with the straight for loop. The third block thought process: Ok, forEach, this iterates over the array, starting at 0. Can I break out? Nope, this one must continue through except if I throw an error. How do I get an index? Oh, yeah, that's right, optional second param, not included in this case. etc...
Yep, this is what I do too. Has so many benefits. If an API key name changes, then on the front-end you'll only need to change the key name in one place instead of many. Also, you can add some type safety here -- if the API returns null and you expect a string, you can do `someVar: thingFromApi.some_var || ''` to fallback to an empty string so you can safely call methods on it without checking if the value exists.
I was making a joke, but always good information! thanks
This is the kind of problem people love to solve, and it looks like you have a lot of answers already. I'll just put my vote towards putting a programmatic key name conversion routine into your API that deals with backend services (you do have such an API in your codebase, right?).
Hi /u/javinpaul, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This is irrelevant 99.5% of the time.
I’ve always found this type of destructuring maybe... iono. Too far? Like, it’s entirely valid. But the syntax looks like you’re defining an object or something. I’m not saying it’s wrong, I use it a lot myself, but I worry that people won’t find it as clear to read as I do. Even more so when you get nested objects. const { user: { _id: userId } } = loadUser();
I’ve always found this type of destructuring maybe... iono. Too far? Like, it’s entirely valid. But the syntax looks like you’re defining an object or something. I’m not saying it’s wrong, I use it a lot myself, but I worry that people won’t find it as clear to read as I do. Even more so when you get nested objects. const { user: { _id: userId } } = loadUser();
Just watch out for userID -&gt; user_i_d
Why? Even Micro$oft doesnt support ie11 any more.
for_sure
Logical assumptions. JSON was make to communicate browser–server. Guess what language is on the front side.
If it makes you feel any better, `.forEach()` isn't really functional anyway because any for-style loop produces side-effects by it's nature. :)
&gt; declaratively describe user interfaces Aren't templates also declarative? Isn't HTML is declarative? Anyways, the point of things like template syntax in Angular is to wire the UI to the model. Now, in your controller, you have a concise description of the UI state, not the whole stinking UI as a whole other language that runs through a rendering engine. That is bizarre. &gt; group related concerns together (as opposed to templates, which fragments a single concern into multiple files) Doesn't the paradigm of MVC separate the view from the controller? I don't want my UI in my controller. I mean, the whole point of giving the &lt;script&gt; tag a url attribute was to separate the JS from the HTML. This 'fragmentation' you speak of is *is* separation of concerns, right?
On modern javascript engines for ; ; and for of are the exact same speed. The other ones will always be slower but it won't usually matter. You should usually use for of or for in depending on your needs. The only reason that people use forEach so much now is because it's required by react since html must all be returned in a single expression. There's usually no other good reason to use it.
Just because you prefer camelCase does not make it Javascript's convention. Javascript does not have an official naming convention. It actually goes to great lengths to avoid it, seeing as one can use unicode symbols to name variables.
Hi /u/richardalpa, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I guess every JS dev just likes camelCase while Py devs love underscores. Must be some kind of invisible correlation caused by their personalities. Or... Conventions.
Lmao do you work where I work?
I never used BigInt, but the article looks accurate. That commentor never specified what their issue with it was.
Right, the comment looks like some kind of weird spam
I am not changing concerns for front-end assumptions. Front end could be anything, even python. Consistency with the output from the server is the most important thing. Customizing output for a single JS frontend can screw up other environments. The back-end is the only cosntant. How about a Dart dev. How about Lua? How about Haskell? How about Rust? etc. Having a single standard from the backend makes developing the frontend with consistency of output. Who wants an api that spits out data in variable formats due to frontend development?...that seems crazy to me.
Just come up with a simple project of your own and build it. Google and even reddit's search feature are your friend. Search for solutions to any obstacles you encounter, take the time to understand how they work (might involve additional Google searches), and then implement your own version of them. You could've saved yourself some time by searching Reddit for the answer to this question because it has been asked many, many times.
To me, using `.map()` is more readable to other devs, but it’s kinda cool you can do this: `const range = Array.from({ length: 10 }, (v, i) =&gt; i + 1);` Vs. `const range = Array.from({ length: 10 }).map((v, i) =&gt; i + 1);`
I don't agree with mental load, see my comment here: https://www.reddit.com/r/javascript/comments/bs0gda/javascripts_foreach_is_very_slow/eoinqj6/ &gt;mistyping i for j This is true for literally every character you type while coding. &gt;having to explicitly index which can be a good thing if you need the index for another purpose...
&gt; Who wants an api that spits out data in variable formats due to frontend development?...that seems crazy to me. That's literally JSON. &gt; How about Lua? How about Haskell? How about Rust? How about Java? How about C#? How about C/C++? How about Javascript? I'll take a wild guess and say that only those 4 are used for more than 50% of back ends for web development. And I'm being generous. And 100% of languages used on the other side are Javascript. &gt; Front end could be anything, even python. It couldn't. Only JS is run in browsers.
Not everything consuming a backend is in a browser.
This should not be a problem of you had a strong understanding of the language. Just build something, anything?
Sure, the other ones are services written in Java.
I have python consuming apis and json where I am working right now.
The plot thickens... https://i.imgur.com/74G8b1H.png
Majority of languages use camelCase (especially in web development, which I think we're talking about) and if you're building an API for others to use, build it so it uses a format and variable naming people are used to. Like who TF uses Haskell to build an API? Of the most used languages only Python uses anything other than camelCase and now all the rest of us are supposed to have underscore =&gt; camel and camel =&gt; underscore mappers ready if we ever come in contact with a stubborn Py dev? Lol
Lol already es10 out and I am here like digging deeper in es6, deeper than arrow functions I feel like I will never catch up
Dart uses snake case. lol! Others as well...but you seem to already know what everyone else should be using, doing. Best.
JavaScript as a whole is very slow compared to good languages so I’m not sure why this is surprising.
a horse is a horse
&gt; Absolutely no way to ask one side or the other to deviate from convention - that would be pure madness I was hoping this was sarcasm, but apparently it's sincere. Honestly, conventions are just habits we adopt to avoid bikeshedding. I would really just shift the linting rule on one side or another. I don't know Python terribly well, but my impression is that snake casing is built in "hard" to that ecosystem and it will be easier to adapt on the JS side. Using middleware to translate between the two seems frankly a bit silly. You are adding another layer onto every request; you are introducing the opportunity for unintuitive behaviour; you are adding small but annoying unnecessary function calls and heap allocations on every HTTP call - and you will end up having to use snake casing in your integration tests anyway (when you write up your stub API data). Really, I'm not sure what it is about both the JavaScript and Python communities that makes them so... rigid about quite small matters of style. The fixation on using e.g. Airbnb rules or so-called "Standard.js" goes beyond convenience and sometimes borders on a strange herd mentality. Nothing bad will happen if you start using camel_case in JS.
Still not an accurate list.
What others? Haskell? https://stackify.com/popular-programming-languages-2018/ Dart sure is owning the lists. Oh, wait, no. It's Java. Out of the first 7 only Py doesn't use camelCase.
Ok...wel,l now you have a popularity contest and no future vision. Sorry, flutter will be used. Dart will be used. And, as an employee, you will use what you are told to. Take care. Enjoy
&gt; Aren't templates also declarative? Isn't HTML declarative? Yes and yes; But neither of them is a framework for building user interfaces. What I was referring to is React's programming model. It allows you to declaratively describe your UI at any point in time. Through this, dynamic UIs can be seen as a sequence render passes, all isolated from each other. This mental model makes mutations quite easy to reason about. &gt; Anyways, the point of things like template syntax in Angular is to wire the UI to the model. Now, in your controller, you have a concise description of the UI state, not the whole stinking UI as a whole other language that runs through a rendering engine. That is bizarre. I understand your opinions towards JSX, but I think you misunderstand its purpose. JSX is not a langue, it's an immutable descriptor of HTML markup. Once you get this, you should have no issue having them walking around your codebase. &gt; Doesn't the paradigm of MVC separate the view from the controller? True. And React is not about MVC. It's about composing reusable components to build an application. The component abstraction claims that UI is inherently related to the logic that surrounds it (event handlers, side effects, etc.). &gt; I don't want my UI in my controller. I mean, the whole point of giving the &lt;script&gt; tag a url attribute was to separate the JS from the HTML. This 'fragmentation' you speak of is separation of concerns to me. This more about separation of technologies if you ask me. Isn't you Javascript code working on your HTML ? I would rather have a button component (where the `onClick` event handler lies next to the `&lt;button&gt;` fragment) rather than having to look up multiple files to know what's going on with the button rendered on the screen.
I wrote a module that converts all API responses to camelCase, recursively (so nested objects are also converted). It also parses time into JS `Date`s Unfortunately this module is internal, so I don't think I can share it. But there might be some others on npm.
And your employer will tell you to use camelCase. https://google.github.io/styleguide/jsoncstyleguide.xml?showone=Property_Name_Format#Property_Name_Format Bye
I don't work at Google and I am the employer. Tootles.
Is there something off with the ’object’ resolver example: https://github.com/victorvoid/dinoql/blob/master/README.md#object Or does it just need a better explanation for me to understand?
As long as the end result variable is well named, it shouldn't matter that the destructuring is a little nested. Everybody knows what a userId is, so it's all good.
Standars and conventions are not the same thing, employer. Please let your devs decide, you'll ruin your business.
Guess it’s just the age that’s wrong in the output. First, I thought ’object’ itself was a method. I see now that it’s just a second example for ’merge’..
I am a dev since 1996. We are doing great, thanks!
User approved
Holds up in browsers: https://jsperf.com/various-loopz/1
This is something I use to transform data front/back end [https://www.npmjs.com/package/cerialize](https://www.npmjs.com/package/cerialize)
As pointed out in the comments - the testing is incorrect for several reasons - some are using closure and others aren't, it was only tested in a very specific version of node, and not even across other browsers, etc etc.
We have a bad community habit of calling everything post-babel "es6", but most of what you use is probably from es6-8. You probably know more than you think!
It's the usual trade-off between higher abstraction and more power. *If* you only need to iterate over a collection, then the foreach constructs are simpler to write and easier to read because there's less unnecessary details. If your use case is more complex then you can "drop down" a level of abstraction and use a traditional `for`. In my experience &gt;90% of the for loops I write are the former scenario. &gt; The second block I have to stop and think: Wait... for of... does this iterate over the array? Yes, ok. I have to start at index 0, but can I break out with continue or break? Yes, ok. What if I need an index? Well, I can use destructuring with .entries, but now our mental load is higher than with the straight for loop. I'd argue that's just because you're more used to the construct. If I see a `for...of` or a `forEach` I'm not going give it a second thought over how exactly it's going to work. With an indexed `for` on the other hand I'm going to need to check what its bounds are, determine whether it usual any special control flow (breaks/continues), etc. &gt; This is true for literally every character you type while coding. If I mistype a variable name or make a syntax error I'm going to know because the code will crash, or static analysis will catch it. These kinds of errors are much more subtle. If I'm two levels deep in a "for i ... for j ..." loop and I accidentally use the wrong index that's going to a lot harder to catch. &gt; which can be a good thing if you need the index for another purpose... If you do, feel free to use a `for`. In most use cases you don't so it's just an additional piece of state to keep track of.
You don’t need that performance 99.9% of the usecases. I have 0 ‘loops’ in my codebase nowadays. Map / filter / reduce is where it’s at. Declarative functional &gt; imperative
Also it doesn't work with non continuous arrays/datatypes. You miss index number 2 and it blows up. Then you add checks for it =&gt; less readable.
Arr[i][j] is definately harder to reason about. I prefer declarative functions with map / filter / reduce. Index is still available but if you use it then, it has the added value of showing that we need it explicitly
For example you do data transformation inside the loop. Something that resembles real world usage.
" The second reason relates to how we teach people about reduce() " &amp;#x200B; You're spot on about this, took me the longest time to figure out reduce outside of the million articles show you how to add up numbers... Thanks for the article!
&gt;Nothing bad will happen if you start using camel_case in JS The problem is that even though you would be technically right in the sense that it doesn't matter *which* convention you choose, you would also argue that the chosen convention should be used consistently, right? You got a problem there, because every javascript package including the standard library use camel case, so you will have a messy mix of both conventions in your entire frontend code base. That would be only an annoyance if it was only relevant for accessing request and response properties, but of course it will manifest itself everywhere, because you will be saving response objects elsewhere and using local objects in requests. And then you will always have to think more about what convention is the correct one in a given place than this issue really deserves CPU cycles are cheap, developer time and bugs are not.
Maybe I'm late to the party, but it may be helpful to someone else: If you're using `lodash` on the frontend you could use something like this. It recursively walks the object and change the keys using `_.camelCase`. This also works on the backend (node), maybe you have an API and want to clean up incoming JSON data. ``` function prettify(obj) { if (!_.isPlainObject(obj)) { return obj; } var result = {}; for (var key of Object.keys(obj)) { result[_.camelCase(key)] = prettify(obj[key]); } return result; } ``` Demo: https://repl.it/repls/PastPaltryFunctions
I’m on mobile and don’t really know what FizzBuzz is but shouldn’t your for loop be &lt;= 25 if you only want it to run 25 times?
Stuff like: Array.from({length: 5}, (_, i) =&gt; i ** 2) is a nice workaround, but there really should be a "generate" method (like the one from Dart's List class) which can be used like this: Array.generate(5, i =&gt; i ** 2)
I don't think an argument from familiarity should be used to judge what code is more readable, or indeed what code you should write today that your colleagues will have to read tomorrow. You can make some exceptions to this in the case of obscure language features that very few devs understand (bitwise operators), but I really, really don't think that applies to the likes of `for..of` or `Array.prototype.forEach`, unless you're still hand-writing ES5 - in which case, oh god why?
JavaScript also allows comments and unquoted keys
I was hoping someone was going to mention Marshmallow. This is what I was going to recommend but wanted to check first to see if someone else has. IMHO this is the best way to go hands down.
I definitely agree with you on this, but I do want to bring up a point about mental overhead. In a `for` loop, anything goes. It’s up to the individual programmer to decide whether there will be a return value, what that value will be, what type it will be, etc. They also might mutate some global state, or change the value of the `window` object... who knows? The same is also true for something like `forEach` or `map` or `reduce`, but it’s less “anything-goes.” You know there will be some kind of return value, likely any array (although `reduce` might use a different type of accumulator). And that return value will not be a reference to the same array, which is often desirable. Now, I realize that both situations basically come down to convention, not true enforcement of the language. But the imperative style of the `for` loop almost encourages things like mutating stateful variables and accessing information from outer scopes, all of which can make testing more difficult. On the other hand, the `map`/`filter`/`reduce`/`forEach` chaining pattern encourages the operations to confine themselves purely to transforming the data. And the `forEach` is conventionally used at the end of those chained methods to say “then go do this with the transformed data.” I know some folks just might not be familiar with that pattern, but those conventions do tend to make for cleaner, more maintainable code. And that’s more important than personal preferences. `for` loops are perfectly fine, and I use them all the time. I just think they are much likely to be abused, especially by newer developers who haven’t yet experienced “global dependency hell.”
Or 3. Disable linting rules on pointless things like local variable names
In browser, on a 2014 MBP: &amp;#x200B; 13:07:21.514 VM82:6 for: 653.245849609375ms 13:07:45.089 VM86:6 for of: 965.156005859375ms 13:08:00.543 VM90:6 forEach: 930.1298828125ms 13:10:40.302 VM152:5 reduce: 681.747802734375ms
It's a tectonic shift. But things are starting to settle now. Everyone is getting familiar with higher-order functions vs. for-loops, at least that is my hope. And don't get me started on absence of semicolons!
Yeah, it’s not clear whether the JS engine is going to optimize those function calls or not (I suppose it could save an internal reference under the hood for the duration of the iteration).
this is a wise response
FizzBuzz is. If the number goes into 3 with a remainder of 0 you have to write Fizz. If it goes into 5 with a remainder of 0 write Buzz. And if it goes into 3 and 5 with a remainder of 0 write FizzBuzz. And thanks it should be &lt;= to because I'm getting 24 not 25 when I run it
What's missing?
You should ask backend to solve it with response middleware but if they won't do that you can just write a funtion to do it yourself and call it on the app data. ``` const {paramOne, paramTwo ...} = parseResponse(apiData) ```
something like this? https://codepen.io/anon/pen/gJvQgb
No. I don't think occasionally breaking convention to deal with domain objects is that big a deal. In fact I think it can be a good signal as to when one is dealing with a "business" data structure versus "system" data. The "cognitive overhead" meme is overused and is generally abused for the purpose of developer aesthetics. Adding translation layers substantially increases the chances of bugs and weird behaviour, and incurs its own "cognitive overhead" by turning straightforward AJAX requests into multistep operations mediated by e.g. Redux middleware.
I'm only seeing 22 shapes. Your canvas dimensions appear to be flipped. You set the width to 800 and the height to 2000 instead of the other way around. Since your shapes are 35 pixels apart and 35 \* 25 = 875 you run out of space. Also keep in mind that the location of a circle is its centerpoint, but in a square its the top-left corner.
just about any error you would receive in the js console should be fixed so that it doesn't happen. Console.log is basically like using print statements to debug your code. Which you only do until you've learned how to properly use a debugger. All the browsers have nice debuggers built in now, with other commands like (trace, debugger ...etc) If you really really want to print to console you just wrap it in some code which first checks if console is defined. Plenty of places to google for that. On the backend it makes more sense to use logs to keep copies of things going on in the system, that can't be seen by the user. But the browser log basically goes away when you close it. And, the user would be able to see it.
No, I don't think it is. I have worked with "translation systems" like this in the past (e.g. JSR in J2EE) and they have always, always ended up incurring just as much "cognitive overhead" as they promise to solve.
I specifically addressed this in my second sentence.
- BigInt - still [stage 3](https://github.com/tc39/proposals#stage-3) - string.prototype.matchAll() - [stage 4 but ES2020 (ES11)](https://github.com/tc39/proposals/blob/master/finished-proposals.md#finished-proposals) - Dynamic import - still stage 3 - Array.flat() - ok - Array.flatMap() - ok - Object.fromEntries() - ok - String.trimStart() &amp; String.trimEnd() - ok - Well-formed JSON.stringify() - ok - Stable Array.prototype.sort() - ok - New Function.toString() - ok - Optional Catch Binding - ok - Standardized globalThis object - still stage 3 - Symbol.description - ok - Hashbang Grammar - still stage 3 - ES10 Classes: private, static &amp; public members - still stage 3 For an accurate list, see: http://2ality.com/2018/02/ecmascript-2019.html
Yes, but my retort to that was that you should care not just about what you're most familiar with but also about those who'll come after you.
Every API should use camelCase because no one on the client side uses anything except JavaScript.
thank you! I don't know what I was thinking lol
Yes that how it should look i was trying else if statement before i uploaded to code but, i guess my else statement must of been the problem
We implemented this translation when we first started the project. It has never been an issue, never lead to bugs, has not even been a thought since. The api expects camelCase, it returns camelCase. I work on both sides, the backend vs frontend codebases are entirely different animals, and are only connected by api endpoints which makes it really easy to track down any issues (again never been related to the translation part - they still read the same). Performance issues are insignificant. I found it to be a fairly elegant way to nullify the entire issue permanently. I can see you feel strongly about it, but it really hasn't lead to any problems.
Furthering the point: [Microsoft bloged how they used strictNullChecks to resolve 4500 unchecked null errors in Visual Studio Code](https://code.visualstudio.com/blogs/2019/05/23/strict-null) and how tests wouldn't necessarily prevent these issues, even if you had 100% coverage.
This sounds like a massive kludge. Casing in the API is important design decision and can be easily controlled in the serializers.
Install Camelcase-recursive module from npm. It does exactly this.
I don't understand why the Django API would generate snake case to be transformed. You can make your serializers output whatever you want. The backend people need to design their API for nice JSON output instead of lazy dumping their python objects.
Imagine getting your balls busted at work over some insane micro optimization like this.
Whatever the rules are, as long as they're simple, clear, everyone on the same page... ok do that.
Tell that to my corporation :/
Yup linting for the sake of linting is dumb. This is a good use case of disabling the linter for this block.
I'd appreciate a concrete v3 -&gt; v4 breaking change list / migration guide.
Awesome, love that they addressed struggling with the classes API, it's always seem difficult to apply the correct style, but I think their solution will make it easier to understand. I also love that they're adding more components like pickers. I've been working on bringing as many components as Material UI has to react native, guess I'll have to have work overtime to get that done now.
 # Pardon the interruption. ## We’ve seen you here before. Let’s make things official. &amp;#x200B; &amp;#x200B; Oh just fuck off!
oh I'm trying to make career change to web development so I'm learning javascript for it now.
It was easily controlled in the middleware, only had to add it in one spot - it's also easy to opt out for any endpoint. And it *was* a design decision - camelCase in, camelCase out. Not really sure what is kludgy about it?
both systems have the potential for chaos. I have experienced both sides. I think the most important thing is to take note of how tricky this type of situation is, and to remain cognizant of it
the medium article has one https://material-ui.com/guides/migration-v3/
MS is supporting IE 11 with patches and technical updates today. There is some confusion about when that will end. Some of their documentation says 2020 and other documentation says 2025. Regardless it's still considered supported today and knowing how MS works it's likely that if any big corporation wanted to continue using it they could pay a fee to get that support time extended (it happened with XP) Even when the global population is only using IE11 like 2% some companies have clients that are using IE11 at 80%. So solutions like this are still needed due to contractual obligations.
of course of course
and `user_id` → `userId`
This is why you see ```for (let i=0; i&lt;arr.length; i++) { ``` let item = arr[i]; ``` doSomething(item); ``` ``` for (let j=0; j&lt;item.length; j++) { ``` let subItem = item[j]; ``` ``` doSomethingElse(subItem); ``` } } ```
If you can't read a for loop, you shouldn't be developing applications period. We have to have some level of baseline. Not being able to read one of the most basic and most common implementations of a fundamental control structure is unexcusable.
Or: ‘’’ const addOne = item =&gt; item + 1 const addOneToSub = arr =&gt; arr.map(addOne) const arrPlusOne = arr.map(addOneToSub) ‘’’
Adding middleware to correct the serializer instead of fixing the serializer is a kludge.
ES10 is not a thing. The name is ES2019.
I used to be strict with snake_case vs camelCase. Today i just dont care. However i try to be consistent, so model-like objects, and interfaces (i use typescript) are all mapped to the database columns. The rest of the code uses camecase.
YOU USED A WHAT??? A forEach LOOP???
Hi /u/redneckHaterTA, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/vanillathick, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
GraphQL sucks. Change my mind.
Wow, sanity checking...
I'll put in as much effort as you did: GraphQL is pretty great.
Implements classic data structures and algorithms in JavaScript. [https://github.com/amejiarosario/dsa.js](https://github.com/amejiarosario/dsa.js)
var obj = { abc_dog: 1, 'dceee_croc':2 }; var obj2 = {}; for (var prop in obj) { if (obj.hasOwnProperty(prop)) { var sp = prop.split('_'); var k = sp[0] + sp[1][0].toUpperCase() + sp[1].slice(1, sp[1].length); obj2[k] = obj[prop]; } } console.log(obj2);
What about iOS and Android client apps? Those are written in obj-c/swift/java/react native/who knows...
`const circles = [];` you’re done, don’t need to worry about size or types, add like it’s an arraylist using `circles.push(new Circle())` and access like an array `circles[0]`
The top part looks nice but I think the portfolio section needs to load faster. When skimmed the page it only show the first column. Which looked a little wonky. I had to scroll and wait many seconds and then I was able to see the other columns
I have written js code that I refactored to for loops for noticeable improvements after doing some profiling. It's definitely not the first thing I reach for, though. And it shouldn't be. Readability is almost always more important for stuff like this.
Var blue_circle = [circlered1, circlered2, circlered3...] You can make this and after add items with blue_circle.push(circlered4) or .unshift() and delete one of there with .pop() or .shift()
Yeah I need to optimise it, just made this recently, thank you for the feedback 😄
awesome thank you! also this is more of a programming style type thing but is it better for me to have that list as a field for each circle or to go about creating the circles around in a function or in some other way? im pretty new to javascript so im not sure what the best practices are. Also, how does the const keyword work in javascript? I only know it from c++ mostly but im assuming its probably not the same?
No problem :)
Like restricting the contents of an array?
const assigns a variable, and prevents it from being reassigned.
So one is an iterator - forEach the other is a separate command that is Used as an iterator. What the for loop does is equivalent to a while loop essentially. It operates separately to the role of getting the key you want from the object. You manage a variable that you set to 0 and check against the length of the array and you increment it by one each time. You then have to use that variable to get back the entry from the array and place that result into another variable. That is an awful lot of repeated code to essentially emulate iterating. Whereas with a forEach you let the language handle iterating and just deal with the entries. It’s far simpler because you have now removed the responsibility of How to iterate out of your hands.
Well since we only wanted our API to do the camelCase thing, it seemed right for it to be responsible for the translation. We use serializer's for other things outside of our API, ie. throwing stuff in redis/message queues, etc. where we don't want it to be camelCase. Maintaining two serializers for the same data didn't make sense and creates more overhead. We didn't consider our serializers 'broken', we just chose to do it in another spot. Calling it a kludge seems like a bit much - I don't think it's a bad design decision.
What happens if you change those loops to 100 items at most and increase the traffic volume? Does the performance still matter for this use case?
Strangely unpopular opinion, but I agree with everything you said. Used TypeScript at my last gig, saved maybe 4 or 5 errors over the course of 1 year that I would have noticed by opening my dev server anyway. At a new company with much larger application and I'm thrilled we don't use it.
I'm all about readability in code, but this seems a *little* nitpicky. I really doubt there's any real mental overhead.
I saw the Youtube channel. It shows just the stop motion videos. Assuming there is really a "son", I like that he took the time to do those videos. They are really good. Didn't say anything about the code itself. Couldn't find a blog or a wiki. You DM me asking to say sorry. I'm wont. I went through your post history, and saw that you just can't take criticism or different opinions, and you just cut the communication by accusing disrespect. I stand by my accusation and agree on some of this comments. Or you are just living through your son on the Internet, which makes telling him the opinions of strangers more awful, or just can't admit that there is no son, maybe there isn't even a wife, and you are too deep in your lie. There is no shame in admit that the code is yours. Keep the work up. I used to code in C++ and now I work coding in JS, but never made a game.
I had this very issue with PascalCase in the back end. In my API interface, I would recurse JSON object structures with a convenience function and convert their own property names to camelCase. On the way out, I'd do the same thing in reverse.
I'm sure there are lots of cases where this can be useful to be honest. In terms of UI, milliseconds really matter. Then again, if you're using the type of absolutely massive data sets that would necessitate this sort of optimization, you probably have much more impactful optimizations you can make.
Holy shit. That’s so much fun to play with. It makes me want to turn it into an actual game somehow.
&gt; You can make your serializers output whatever you want. Agreed. This seems like a serialization problem not a language problem. Probably best if the backend does the translation though.
Well swift object and java react native all camel. So you’d be forcing way more people to change code if the front end did it. Plus most sites and projects have vastly more code on the front end. The backend should either provide camel or a middle layer to get camel.
I'm not disagreeing here. You should return the data that's formatted correctly for your frontend (AKA camelCase). Just saying that there's more than just JS when considering "client side".
IAM trying to follow tutorial but it throws error after triggering train. What is the confidence score you got, may be I will submit it 🤫
&gt;I'm sure there are lots of cases where this can be useful to be honest. that's the 0.5% of the time part
You need to compare the raw requests. Look in the network console when axios makes the request. It doesn’t seem like axios is setting the correct content type header.
I like how React has a better material component library than Angular.
Not sure if you browser will give you access to that interface, but if it does, I'd expect it'd be though this: https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode
Glad there is a free tier but I think paying per server is a stupid metric at the higher tiers. Of course it's a great metric for the product to charge for.
https://kaliatech.github.io/web-audio-recording-tests/dist/#/test5 Check this out. If you’re using Firefox or chrome you should be able to access your audio interface if it’s the default for the system. This should get you started in the crazy world of web audio.
`response.features[0].attributes['PGIS.PGIS.Parcels.HISTORICDISTRICT']`
Honestly I think there is a good reason why functional programming has come **back** in style in the past few years, and why imperative programming has taken a back seat. I'm not going to argue about readability because that gets so murky, and is mostly about what you are familiar with (though there can be some objective metrics like good naming conventions). But without a doubt, pure functions are infinitely easier to test, and since you are necessarily avoiding side effects, you are less likely to write buggy code. Yes, you can include side effects inside array methods, but they are a step towards functional programming and help you stay in that mindset. I'm not telling you that you're wrong or need to change your mind, but with the exception of niche use-cases like extreme performance needs or iterating an arbitrary number of times, I tend to request changes on pull requests that have traditional for loops (or any imperative code for that matter) that could be otherwise handled with a pure function.
I get a 404? was the post removed?
You almost definitely need to track your data in a store. It can just be an array of objects or something, but you need a way to track where each blue ball is. And then depending on how you want the red balls to behave, you could probably just have a function that calculates their position around the blue balls. Honestly it seems like you're over thinking this. Just build it, stop worry about best practices until you actually need to know them
Not for that much longer. JS keeps taking more and more from the front end.
That's it! Thank you so much!
Hey can anyone help me understand why (v, i) are passed into the callback? Array.from( {length: 7}, (v, i) =&gt; String.fromCodePoint( 129300 + Math.floor(Math.random() * 20) ) ); Also how do guys make your Reddit comments into those neat little code blocks
It does say the author deleted the post.