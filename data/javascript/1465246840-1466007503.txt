Can't we agree that they both make awesome stuff while still being amazingly shitty and exploitative companies?
There's just a gross misunderstanding of what ES7 actually is. I'm assuming the author was expecting ES7 to have a scale similar to that of ES6 rather than what it really was, probably assuming much of what had been proposed after ES6 would ultimately be part of this idea of ES7.
Working on a framework for that. &gt; Bullshit.js -- Why I Won't Change My Library's Name To Placate The Haters
In what way are we heading towards the end of a cliff? Frameworks have made my life a web developer waaaaaaaaay more manageable than the alternative of jquery mess or vanilla javascript mess. I am genuinely curious as to why progress isnt being seen?
Write the function and have it only return an expected value.
Someone should tell you it's not even out yet... its still a release candidate.
Though I do appreciate the contributions they make, Google could do a much better job with their software. They need to spend more resources on their API's and projects like angular. I've had some frustrating experiences with their API's and documentation. Google is make enough money to easily hire hundreds of extra programmers.
throw new Error('unimplemented')
i give big points to dev working conditions I guess. half hte people that write about their experiences at amazon sound like they want to die IRL 
&gt; This trend of accommodating lazy devs coming from other languages which isn't bad, is it?
Thanks! I have been looking into angular but im not sure whether it would be best to stick with it or look into react too. Where do you think the most jobs will be in the next few years? Or do you think there will be plenty of riles for all the different frameworks?
I'm learning angular at the minute so once I know the basics I plan on making a few small scale js apps to learn and go into my portfolio, thanks!
ah yeah, I had "fixed" it so I could see what the result would be using node. good call!
Something about JavaScript makes some people go a little crazy. Only when it comes to JS do you see "real developers" giving advice like "don't use NPM, just copy the code into your codebase" and "progress should stop, things are getting too good" and "I can't use a build step, that's much too difficult"...
I fucking love Typescript. Amazing. 
That's a good point, and totally doable if you simply avoid nest imports in Meteor. Also, changing the `import` statements to `require` calls isn't so bad anyways.
I have tried it. I didn't need it, and I don't like transpiling code when I don't really have to. Angular should not have tried forcing Typescript on their user base. I can deal with some breaking changes but adding typescript into the mix is too much.
Snark aside, this lib wants to focus on Angular 2 as they believe it is what most people will want to use moving forward (and i'd agree) Whether or not ng2 will be successful is still to be seen, but wanting to support the newer version isn't some kind of mistake on their part. They have been trying to rewrite it for ng2 for a while now, but they just don't have the time or manpower to support the 1.x version while doing it, so they are focusing on 2.x until it's released.
I remember when a lot of "ES Next" features were considered ES7. Then the spec was defined (I'm not sure what to call that...) and it was just 2 features (which I love: time to breathe).
Until you need multiple inheritance
&gt; Whether or not A2 will be successful is still to be seen, but wanting to support the newer version isn't some kind of mistake on their part. They've made plenty of mistakes on their part already. Why isn't this another one of them? They fail to recognize how entrenched Angular 1.5 has become. It is wishful thinking that everyone will jump to Angular 2. It's also wishful thinking that everyone will adopt Typescript. That's *not* snark, that's what's *actually* happening. 
[**@RemoteMeetup**](https://twitter.com/RemoteMeetup): &gt;[2016-06-06 23:06:31 UTC](https://twitter.com/RemoteMeetup/status/739956667228524544) &gt;Got some questions to @dan\_abramov ? Use the form and ask him! [*docs.google.com*](https://docs.google.com/forms/d/1QLuK8YyGIwY0H9FKc02qkgZ-4R0Mi_KXg1YYfzEtdbg/viewform?c=0&amp;w=1&amp;usp=send_form) Questions will be live at [*bigmarker.com*](https://www.bigmarker.com/remote-meetup/interview-with-dan-abramov?utm_content=buffer40cf1&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer) ---- [^[Mistake?]](/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/4mvwdv%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/joealcorn/TweetPoster) [^[Issues]](https://github.com/joealcorn/TweetPoster/issues) 
Strikes me like "waaahhhh! This IS NOT easy" Yeah, no kidding.
You don't continue being profitable by throwing tons of money and manpower at something which will provide 0 income... This is an open source project, not a paid product.
you don't need to use typescript for ng2, we use it just fine without it.
Because the web is no longer just websites. People are building full applications in client-side web pages, and that means that the complexity has increased. You'd be laughed at if you wanted to build a full desktop or mobile app without a build step. You'd be ignored if you tried to create a cross-platform native app on window/mac/linux without some kind of framework. So then why are those considered "too much" for the web? If you are using angular 2, a build system, tons of unit tests, a CI system, etc... for your company website, well then you might be over engineering it. But when you are building a massive application, those are necessary pieces that will be done in just about any other platform. 
You don't have to find *new* problems. You could try writing a clone of an existing application.
I actually only refer to that for that one little function which changes the text from Activate Offer to Offer Activated. Here's a pen http://codepen.io/mkstvnsn/pen/dXYpdW . I can't get event.target to work for some reason.
https://eeemo.net/ Often called zalgo text.
So, I made this over the past few months to do some experimenting :-) What do you think?
thanks for the thorough comment.
AS2 is a mess. AS3 is what I wish JS will become.
Thank you! I took this advice =)
Thanks for your input!
It is awkward for a cancel to go to `.catch`. If you don't put a if (error instanceof CancelledError) { ... } in the `.catch` then the error is seen as an unhanded rejection and you get an error on the console. I don't think that a cancel should be considered an error.
I might be wrong but I don't think vue handles all these cases like I'm describing. For example if I look at the observable array code [here](https://github.com/vuejs/vue/blob/dev/src/observer/array.js) when `splice` is called the array doesn't notify dependencies where in the array the items were added. If I insert an item at index 3, and I have a map on that array, to process this change all I really need to do is call the map function once, and insert the result at position 3 in the mapped array. I don't see this happening in vue (although I haven't looked at the code much so I might be missing something).
"Need inheritance"? Inheritance is a tool that should be used sparingly. If you think you need it, you probably don't. Prefer composition. (No, multiple inheritance is *not* actual composition.)
Manpower? I thought Google has 25,000+ engineers[1] and maybe even 2,500 of those capable to support such a task, I would wager. How can they not have enough manpower? 1. https://www.quora.com/How-many-software-engineers-does-Google-have/answer/Jeff-Nelson-32 
While I agree in theory, in practice consolidation never seems to happen in JavaScript.
WebStorm is nice. Honestly, anything JavaScript, I use Atom. If you are not familiar with it, it is an IDE GitHub made. The IDE itself is actually built in JavaScript. Theres plenty of plugins in it, and if there isn't one you want, you can write it. In JavaScript.
I tend to agree with this. There are definitely issues with dynamic web apps on mobile, but the time it takes me to adapt for those issues seems a lot less time consuming than investing in an entire proprietary ecosystem and tech stack. I also agree that React Native is also a useful tool for this space. 
What's really the difference between using JSX, an Angular 1 template or an Angular 2 component/template? Especially since, generally speaking, JSX is going to be located in a single file per component; while actual business logic will be separated out into other pure-JS modules. With Angular you're still mixing logic in with your templates; loops, conditionals, formatting, etc. But with JSX it's JavaScript first, that generates HTML (well, a virtual DOM, but whatever). With Angular it's HTML first that is modified with special syntax that needs to be parsed, processed and evaluated at runtime. JSX is considerably cleaner since it's mostly "just JavaScript", and it's becoming more and more popular, even outside of React. And using a transpiler... That's something everyone needs to be doing anyway. If not for JSX specifically, then simply to order to use JavaScript modules and other ES2015 features. I mean, you likely already have a build step already (minification/concatenation/unit testing/etc), so what's the big push-back from using something like Webpack instead and ploping in Babel with literally one line of config logic? I'm not saying everyone has to use React, or even like it, but the reasons you listed aren't valid concerns in 2016.
I'm bummed to see them do this. I think just using functions to return objects you can create an analog for private methods and it is more idiomatic to the language and you can still chain inheritance. People just don't want to learn proper JavaScript in which case they should use typescript.
&gt; What's really the difference between using JSX, an Angular 1 template Our designers don't need to reason about tweaking layout on angular 1 templates, because they are valid html. It's easy for designers to work with. JSX isn't even valid javascript, it has to be transpiled. It has to be reasoned about. It's more learning curve. Most of the people who I see promoting React don't work in mixed teams of developers, CSS programmers, designers, copy writers, and others that contribute to the HTML without having to muck around with javascript. This is separation of concerns, which *isn't* what JSX is doing. &gt;And using a transpiler... That's something everyone needs to be doing anyway. No, it's not. That's your workflow, that isn't mine or any company I've worked at and I have a looong work history. Not everyone likes transpilers. It's not as mandatory as you think it is. It seems like you're in an echo chamber. &gt; the reasons you listed aren't valid concerns in 2016. Bullshit. 
Visual Studio Code is amazing for TS. Atom is great as well. I would pick both over either Brackets and WebStorm. 
From a demo perspective, it'd be preferable to have a button that you click to test it out; as soon as I loaded your example it prompted to download.
Sure it looks pretty skookum, but how well does it chooch?
Angular2 hasn't been released.
Angular2 hasn't bee released, so not really sure what exactly you're talking about.
I like playing Pokemon games, so I built an app for those. Pick something you enjoy, start small, and build away!
Angular 1 is more popular than React at large corporation by a wide margin and they will be moving to Angular 2 because it is backed by Google and Microsoft. Both of those are technology companies. Facebook is a group of children running a PHP website. Google and Microsoft are building the future and React is a speed bump that will only hurt developers who try to learn it's poor design pattern and hacky schizophrenic amateur community ways.
Whenever, prototypes and classes come up in JS I always wonder how and where people are using them in the real world and in real apps. I've so far never come across a case where I've needed instance off, new person or inherit whatever. My code might not be advanced enough to understand the power of prototype maybe... I'd love to see an actual interface example of using prototype. 
just checked again and it works for me.
The same reason 9 women can't make a baby in one month? Just throwing tons of resources at something isn't going to just magically fix it. Plus this is a fairly small project in the grand scheme of things. It doesn't make them money, it doesn't really help pull users into their ecosystem, its mainly just an open sourced version of a tool they seem to use internally. Asking them to throw tons of time and effort at this so you can use it for free is asking an awful lot... This is open source software though, feel free to contribute to closing some 1.x bugs if you really feel it's necessary.
Ok but before I explain why I would like to point out when I say Vanilla JS for frameworks, what I really mean is Vanilla + Libraries. And when I mean Frameworks I am talking about large monolithic frameworks like Angular and Ember. But anyways when you write with plain JS, all modules, helper functions, and functionality are explicit and directly written for the problem on hand. For example one of the reasons why even the fastest framework is 40 times slower than plain JS is because it's built for "every project", so before anything gets done, it needs to call all sorts of factory/constructor functions. Another plus side of not having to have a huge abstraction layer is things don't randomly break outside of your control. When as framework uses like 15+ plugins, sometimes problems arise and it's a pain to debug. Additionally, with plain JS you have way more flexibility in how you organize a projects architecture, allowing for more efficient and problem specific modules, as well as optimizing server-side and client-side rendering. But I understand why people think plain JS === spaghetti, but honestly that's more of a jQuery thing. Anyone that is going to write something complex in Vanilla JS isn't doing so because their lazy, but they value control, and would rather invest more time upfront now, than to have to spend the next year or two reading things like what "error let factory.const.$scopeBinder.eval is not an Object" means on Stackoverflow all day. Also I really do feel bad for the future grads stepping into a new job in 2018, having to maintain and debug the companies Angular 1.x app. It's way easier to understand code when you know exactly what it's meant to do, then to figure out where a bug is coming from within a dead framework. But the good news is, most frameworks realize that singletons, modules, and composition is way easier and maintainable than 1mb frameworks like Ember. 
This has been out since last [October](https://developer.apple.com/library/tvos/documentation/TVMLJS/Reference/TVJSFrameworkReference/RevisionHistory.html#//apple_ref/doc/uid/TP40016076-CH99-DontLinkElementID_3) Document Revision History This table describes the changes to TVJS Framework Reference. 2016-03-21 Added a link to the TVJS Global Functions Reference document. 2015-10-21 New document describing the JavaScript library used to perform actions on Apple TV. 
&gt;Angular2 hasn't bee released, so not really sure what exactly you're talking about. It hasn't been withheld from the public either, so I'm not exactly sure what you're talking about. Angular 2 has been available for many months. There are companies using it in production *right now*, and I know a few of them personally - so your saying that "it's not released yet" isn't really a valid argument for anything.
I've been burned by Angular and its team a couple times. I have also never chosen Angular for new projects, and always inherited a disaster.
now if only they can make their web inspector suck less
Javascript Framework Releases Javascript Framework to make Javascript Frameworks
So, how does one go about using this? Do I learn how to write Apple TV apps in XCode but just write JS? Or do I transpile my normal code some how and drop that file into an XCode app? 
You obviously haven't been following what's happening in the real world, only in your theoretical little bubble. If you had any real world experience you wouldn't be bothering to type that *pedantic* comment.
jquery deferred is a bad example because they have intentionally been out-of-step with the promise/a+ spec (to the point that some libraries [throw errors](https://github.com/domenic/chai-as-promised/blob/4bc1d6b217acde85c8af56dc3cd09f05bb752549/lib/chai-as-promised.js#L28-30) when trying to pass a jquery deferred object as a promise).
cancelling promises defeats the point; you're supposed to use them to define asynchronous data flow by guaranteeing a returned value. if your application can create a promise without needing its value, it's quite likely you're wasting bandwidth on an unnecessary operation. if you really need the functionality that cancellable promises give you, you can get them from [Promise#race](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race) and/or generators.
do you really need cancellation or do you just need a control flow for early resolution
i think it does that already? the code you're looking at includes the $set action for a view model which, based on my reading of the comments, [does notify dependencies](https://github.com/vuejs/vue/blob/dev/src/observer/array.js#L52-L53). 
This isn't new at all, so no 
This really brings home the point that Google doesn't use Angular that much. If they adopted Angular heavily in their core products, they would be more invested in it's growth and allocate more resources which is exactly what Facebook does with React. Their biggest product, Search, doesn't use Angular. 'Nuff said.
I have used this for my API projects on Express https://github.com/apidoc/apidoc
&gt; and big company that dodges the enterprisey office culture (its a meme here to hate this though I guess) Not sure I understand. I'm at a small start up that also avoids "enterprise-y" office culture. I have worked at large companies before and enjoyed it too. The size of the company doesn't bother me, just the ethics. 
Good point 'tau-lepton' I will improve that. 
&lt;Insert 'Yo dawg' meme here&gt;
I'm ok with that. Better of the two at least. 
No, TVJS.
Great, thanks for the source. Further reading for you regarding common sense: https://en.wikipedia.org/wiki/Argument_from_ignorance#Argument_from_incredulity.2FLack_of_imagination
Woah weird. Not so in character of apple to do anything that is standards based, especially w3c based. I wonder what that means. You'd think that they would have just made a swift library... I wonder if this means they are desperate to have people make apps for apple TV?
In the past 3 years I have worked with Backbone, Knockout, Angular &amp; React. The point is your knowledge in any framework is transferable to other frameworks ( this is the most important thing to take away in all this.. ). Learning in the world of front-end is a continuous process. You cannot just learn one framework once and reap the benefits forever. That is not going to work for the most parts. Keep learning - keep improving yourself. 
Technical tests have been rare - atleast for me. "Quite well" - I understand is a subjective term.. But trust me, when you know one of these frameworks quite well - you will "know". You will be confident in them - to do almost anything. Can you start and build a largish project in Angular / React from scratch using all the known best practices out there ? Are you confident enough to go and contribute to Angular and React ( you need not actually contribute! )? 
People prefer arrow functions in all cases. They choose to use only arrow functions in their code.
If it only works on Apple TV (which I guess it does?), I think you can argue to what extent it's standards-based...
While that might change in the future, the fundamental differences of the execution model make it so running all Node modules will never be possible. Everything is up for experimenting with though! Regarding performance, the engine used, Duktape, doesn't have a JIT compiler, so it won't be as fast. I haven't done any benchmarks at the moment, here is some note about performance from the Duktape author: http://duktape.org/guide.html#performance
Any reason in particular? 
Thanks so much! Really appreciated
See, this I don't understand. My data is usually processed by my server side language. Php or a templateing language. If, I'm retrieving any data it's usually Ajax calls to fill a select element or maybe retrieve a form or whatever, but in every case it's never JS doing the super heavy lifting. Maybe, this applies more if you are using angular or something where the app is doing everything? 
You can draw SVG on a canvas, a canvas in turn can be converted to base64 jpeg or png. At that point it's just an image.
Yeah, you definitely see the need more in single-page web applications and when using node, which can run both on the client and as a server-side language.
I don't follow. It's based upon a standard programming language and standard DOM APIs. The target is a specific platform - but then the same is true of loads of "standards-based" programming frameworks.
&gt; ~~Fancy~~ Useful features
Why do you get personal against him? But let's give you an example: I had to decide around a month ago about the framework we'd be using for our frontend. I tested a lot of them, it came down to "Angular 2" (because we love TypeScript) or "React + Redux + Router". The lack of a release (and IIRC even release-date) made me pick react instead of angular. (React "1.0" (v15) was just about to be announced back then). Generally you should refrain from personal attacks on technical discussions, people generally don't like that.
I used a react-starter project, with routing, redux, scss, ... all set up - heaven!
To be fair never tried it but I have heard good things about it. 
Yo dawg
Thanks, I had read a thread last month about this too. Proxy it is :) https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy 
Usually you would use a store (such as Redux) and get the data from there, but it varies depending on your application structure. You could aggregate the props that your top level element receives so that you don't have to type more. I might be wrong on this though, I've started working pretty recently with Redux so I might not be the best guy to answer React/Redux structure questions.
There are some companies whose work I just pass without looking. One of them is apple. They do over complicated ugly looking stuff. Even if it's JavaScript whose simplicity I love by heart, if it is made by Apple, I will just pass without even taking a look. Send me those down votes now. See if I care.
Only if you like strongly typed OO languages
Excellent summary, but a small point: you *can* achieve [mixin functionality with ES6 classes](http://exploringjs.com/es6/ch_classes.html#_simple-mixins).
For #2 you can avoid `this` ambiguity completely if you use `event.target`. button.addEventListener('click', (e) =&gt; { e.target.textContent = 'Clicked button'; }); 
Interesting I will be checking this out later after work.
To be fair, the arrow function syntax _is much_ shorter by allowing you to omit `return` - and that's the most common use-case I see. Once you need to expand it to multiple lines, though, then yeah you're right.
So the traditional "wait until version 3 when things will be nearly right"?
If someone says to you "the sun will rise again tomorrow" and you ask for a source, common sense/knowledge is a perfectly acceptable one. You can call it an argument from a lack of imagination if you want, which I'm sure would make you very popular at parties. Or, you can accept it in the spirit it was offered. To anyone who actually understands the tech we have been talking about your need for a source was equally laughable. Obviously WASM is currently run through the JavaScript engines on all major browsers. Obviously the sun will rise tomorrow. It would take a truly extraordinary turn of events for those things not to happen.
Safari, the new IE.
Could you expand on this? Not really sure I understand :/
Yea, when you want to give your function a name, a function declaration should be the obvious choice. ES6 has block-level function declarations. You can declare them wherever you want. An expression isn't needed for this anymore.
I don't really get the premise, why would you want to make your server side code isomorphic? Your examples link on GitHub also leads to a 404.
Yes, this is possible. But why should you do that? When using function expression the code looks clearer: button.addEventListener('click', function() { this.textContent = 'Clicked button'; }); 
Google is also a marketing company, and unlike Google, Facebook eat their own dogfood. Google just recently began doing the same with adworks, but with Dart thrown in. 
Cheers for the reply, That's sort of what I want, except I want to make this for a enduser so I would like it to be extremely simple. I would also like it to be local, as in they just open up a html file I provide (or a gui or whatever) which opens a page, loads the particular json file with each object in a readable way and also has a 'form' they can fill out and submit to add another object I'm not sure if rhat makes sense and perhaps this is out of the realm of js
It is known.
yes
yodawg.js function yodawg() { return yodawg; }
&gt; why should you do that? I've had to do it a number of times over the years having to write quasi-OOP and having to bind *this* to the pseudoclass object since I would need to update properties within the object I've changed context to. If you're just writing a one-off anonymous function, leaving the context bound to the DOM is fine, but if you're planning on reusing it in a library, e.target is more reliable.
I would recommend clipboard.js - I use it at work and it works great!
Chrome fully supports ES6 now too. 
Actually, no. I bind the listener to the parent element, because most events bubble up - that is, unless explicitly told not to, they'll first trigger on the element itself, then on the parent element, then on the parent elements parent element, so on and so forth. So while the listener on the parent element is triggered for every child element, it's still bound on the parent element.
I'm not sure what you mean by "copy it's code to a clipboard". Do you want it to save the actual javascript as a string to your clipboard? [Here's a stackoverflow example of a button that saves text written in an input] (http://stackoverflow.com/questions/22581345/click-button-copy-to-clipboard-using-jquery), you can adjust it to save content I suppose, but I don't know about code, unless you are typing in the code in the input/textarea. 
&gt; crucify someone for not using the more elaborate and powerful syntax. Sorry if it came off that way - I have plenty of code with classes in it, that I embraced after saying "Whhaat, JS has classes now!? Neat" myself :) A lot of it is just unfortunate timing, because I think if all these object updates came in before classes, nobody would really see the point to move. Both approaches matured at the same time, and `class` had better press, so it's what everyone used. Interestingly, I see that lodash (which has always been regarded as an extremely well implemented and considered lib) aliases its own `_.extend`, which is essentially the same approach I described using pre-es6 syntax: https://lodash.com/docs#assignIn
why's it wrapped in two IIFEs? also, os x's spotlight does math for you. i just hit cmd+spacebar then type "14/16" or whatever i want. boom.
 yodawg('framework'); function yodawg(x) { console.log('Yo, dawg, I heard you like ', x, ', so I put ', x, ' inside your ', x, ' while doing ', x, ' in ', x, '.') }
You push a button, and it copy's the button's code to the clipboard with "TEXT" for where the text is copied to go and "TITLE" where the text on the button goes.
I need it in 1 to 10 lines, PURE javascript, and be able to copy it's own code to the clipboard with "TEXT" where the text to copy goes (It's code) and "TITLE" where the button's text goes.
I never knew that console.log excepted multiple parameters like that.
At least one problem is that you have multiple nested quotation marks. I'm on mobile, so I can't test out a solution, but I think clearing that up will resolve it for you. 
The relevant code for those interested: const Storage = Sup =&gt; class extends Sup { save(database) { ··· } }; const Validation = Sup =&gt; class extends Sup { validate(schema) { ··· } }; class Employee extends Storage(Validation(Person)) { ··· } Pretty clever! This approach will build a longer prototype chain, and it does declare its functions in a much less flexible way (e.g. you basically must declare it knowing it's a trait you want to mix in, and you couldn't just use any old function/object of functions from anywhere). Still, you're right you could do a mixin like that, and I think it's quite readable.
Can we set and load variables?
Thanks for your reply. It's certainly seemingly like it's more complex than I expected. I'm thinking maybe js is not the best suited language and it might be a hell of a lot easier to accomplish using something else.
Hi /u/GrosSacASacs, is this for an open-source project? Is this for a non-profit or for-profit organization? Is there a public project and/or organization page?
Very neat.
`event.currentTarget` is a better equivalent.
&gt; often we're forcing the use of the new operator in situations that don't need or benefit from it. &gt;there's no reason to use optional syntax These are all your opinions, and it's not my intention to say that you're not entitled to them. But they are just that. Just because you don't see the benefit of Classes or don't see how they would be useful doesn't justify a reason not to make them available. We all have different needs as programmers, and its clear that you haven't came across a scenario where you see the benefits outside of the ones you mentioned in your post, and that's fine. &gt; there's definitely a downside to adding a whole lot of 'optional' syntax to a language if there isn't a significant advantage to it. I don't disagree with your statement here. I disagree with your use of relative terms like "whole lot" and "significant", which is again totally your opinion. &gt;This is a programming sub; we all come from different places and have different experiences with the language. For your own benefit, it's wise to try and learn from those differences (within reason), rather than outright accusing anyone of a "lack of understanding". It's unnecessary, and trying to tear down others doesn't make you seem any smarter. Who's goal is it to seem smarter? Not mine. Just because someone disagrees with you doesn't mean that they're tearing you down. If you feel that way, you may just need thicker skin, especially if you're going to share your clever opinions about what should and shouldn't be included in a programming language that is used and supported by a ton of users that find its features valuable. 
Sounds nice. I'll have to look into it as I have a small react project coming up soon. 
It doesn't look like Chrome (51) supports the tail call optimization in the spec (not that I've tried to understand what that is...) https://kangax.github.io/compat-table/es6/
Read the docs for document.execCommand('copy') - you're misunderstanding how it works. You don't just pass it the string you want to copy. You have to call it with the string "copy" and it will copy whatever text is selected currently on the page. So to copy arbitrary text, you have to append a textarea to the DOM, then put your text in it, then select the text via element.select(), and *then* call document.execCommand('copy'). See the second answer on http://stackoverflow.com/questions/400212/how-do-i-copy-to-the-clipboard-in-javascript
Tis is the one I recommend: https://github.com/rangle/typescript-react-redux-starter * TypeScript * Webpack * React * React-Router * Redux * Scss * Live-Reload * TSLint Works in atom, vscode, sublime without problems (I only got linting to work in atom though, didn't try with the others). Getting it running is as easy as running npm install, and then npm run dev. Everything works right from the start.
I disagree that this is cleaner. The longer I spend writing JS, the more I come to believe that "cleanliness" is a function of ambuguity, not of shortness or niceness to look at. The former is unambiguous, the latter is not, I'll take the former.
Access to the clipboard is a huge security risk -- therefore there isn't a straightforward solution. clipboard.js is probably your best bet. Not all browser support it like safari where you have to do a bit of a hack to get it somewhat working.
Why can't you add a click event listener to your button in a script tag? You can't do everything in one line.
What are the use cases for this? 
Interesting post, I always wonder about when to use the arrow function. It looks clean.
You can't access clipboard via JavaScript
It would just be nice, you could set up servers for learning or testing stuff without having to install anything, and on any OS. Edit: also stuff like really private chat room, you can host the room on any device. No fear of a server logging anything.
You're much more likely to get help if you have a page for it setup already, especially if that page includes source code demonstrating that you've already put some work into this. 
Yes I know, I just spelled out the exact recipe for achieving what you want to do. You're gonna have to use your brain a bit, I don't have time to write it all out for you. It's not gonna happen in a one liner. You're welcome.
I tried to use it with Angular 2 but had issues with it. The Angular Cli promises to make it easier but it is having some issues of its own too
Yeah, I'd probably cr that and ask for string interpolation. Its pretty common to monkey patch log functions with other tools that don't share this api.
I did an implementation like this for Ludum Dare last year. You can start a server in a browser window and then anyone can connect to it from anywhere. Just don't run the server in a tab or the game will freeze. [Here is the game, Space Amoebas!](http://ancient-plains-7885.herokuapp.com/examples/space/exampleClient.html) [Here is all the source code](https://github.com/sanojian/ld34) The game is sort of like Agar, but there is gravity and planets that squish you.
Since when, I did research on this subject about a year ago, apparently It's possible now, nice :)
I have use VS code and Atom. If you like intelisense and code completion then VS code is better. If you prefer speed then go for Atom
What do you mean by "throughout the code"? If the original value updates, then the reference variable might be out of date. Alternatively, you can have a function instead of a variable e.g `getEatenFoodsArray()`
How is multiple inheritance relevant to the original discussion? The point of my original comment was just to illustrate that it isn't relevant to real-world code in an attempt to nip the derail in the bud, but you're welcome to post about multiple inheritance if you'd like. BTW I'll eat a door if you name me one problem solved by multiple inheritance that can't be solved in another (usually simpler) way.
From my knowledge creating a variable essentially as a pointer is more memory allocation, guess it just depends on the scope of the project, but I would only do it for something valuable like caching a selector, etc (e.g. the point would be to lessen impact performance-wise or improve project management/readability). I would just go with whatever is easiest for you, although I also tend to avoid structuring any data I need constantly through a parent object that is already essentially a global variable. In other words, I know it seems pretty to wrap your data into globalValues, but it really serves no purpose unless you're iterating over the object, etc., but even then you can always iterate over the object itself or individual arrays, etc. var someValueArrayClass = function(array) { this.array = array || []; }; var eatenFoods = [ new someValueArrayClass(), new someValueArrayClass(['cabbage', 'turkey'] ]; var foodsToEat = [ new someValueArrayClass(['carrots', 'turkey'], new someValueArrayClass(['lettuce', 'chicken', 'cheese'], new someValueArrayClass(['cabbage', 'turkey'] ];
Sure, but that link shows classes being slower across most browsers. Regardless, if javascript execution time is your bottleneck...you're doing something very very ... very wrong. 
&gt; It also failed to mention that arrow functions do not have the magic 'arguments' variable in it. It does not allow introspection. I do not mention this because ES 6 offers an equivalent as the rest parameters in an arrow function, which can be used (and should be) instead of `arguments` (including in a function expression). &gt; And lastly it does not mention that you can't rebind the context of an arrow function It is mentioned "the arrow function binds the context statically on declaration and is not possible to make it dynamic" and "When a click event happens, browser tries to invoke the handler function with button context, but arrow function does not change its pre-defined context.", see 2. Take care.
You do lose the `const` when you go with the normal function definition.
&gt; Using your knowledge of a field to reason through how things work is fine. The problem is "common sense" isn't proof of anything. Citing your assertions is important, and you showed proof for your statements. [Citing your assertions is not important when something is common knowledge \(or as I put it sense\)](http://guides.main.library.emory.edu/c.php?g=49955&amp;p=323973). :) Even if common knowledge is wrong (as in your case of the orbital patterns), you don't need to cite it. Edit: I probably should not continue this conversation. I keep having to edit out dickish overtones from my responses, and I still did not catch nearly enough of them. I sincerely apologize if I have offended you or come off as brusque. Especially if you did not quite grasp how WASM works and thus would not be part of the community where this is very common knowledge. When we first started chatting I was under the impression this was your field of expertise.
the number of module-wide definitions tend to be very small for me. in other words i rarely declare many module-level functions within one module, so redefining one isn’t a thing that ever happened.
I think it means putting *return myFunction ()* in a method, will simply start running myFunction() without adding it as a new layer in the callstack. The idea that you can do recursive functions without ever getting a stack overflow.
Indeed, I might have called for action with haste
 ESLint **Error** *no-use-before-define* 'yodawg' was used before it was defined at line 1 col 1
They still haven't fixed the breaking sanitization of URLs!? I deleted the app within a week because no Medium articles would work outside of opening it in Safari and manually having to change the %23 to a #. Same thing would happen to GitHub links that were trying to anchor link onto the page.
I released [fetch-sync](https://github.com/sdgluck/fetch-sync) today and debugging the service worker during development was probably half the battle. They throw errors and log data from previous sessions which can be very confusing... so there is much room for improvement!. But that it can only get better is quite exciting!
That's awesome. Thanks for sharing. 
Full article: https://hacks.mozilla.org/2016/06/helping-web-developers-with-javascript-errors/
[GIFV link](https://i.imgur.com/EOztwbI.gifv) --- _^I ^am ^a ^bot. ^[FAQ](https://www.reddit.com/r/livven/wiki/gifv-bot) ^// ^[code](https://github.com/Livven/GifvBot)_
XSS where someone sends session information to a server can be bad. Then they get to login as you :)
But modern browsers don't even allow you to post a cross domain request. They block your request with a message like `Cross-origin request blocked` or something like that. The only way you can perform CORS (Cross-domain resource sharing) is if the remote server allows it in headers. 
not true for outbound requests
You'll bind a click event to the submit button, or possibly to the submit-action itself. Then, you'll prevent the default action of the form, retrieve the values from your fields by ID or name or something like that, and then you'll create a js object containing those values and feed it to your handlebars template. 
Np, glad it was helpful :) Good luck on your project.
MDN docs are really good. I always click them in they appear in my search results for generic terms.
I didn't mean you should run the whole thing server-side, only to extract the smaller preview files from the RAW and send them back client-side, and use those for your adjustments. The kind of work you'd be able to do eg in canvas would be very limited, so using preview-quality image data would be fine.
I played with this for far longer than I should have. Very cool. Reminds me of the original commandos series :D
Very nice. It's a small simple change but extremely useful as the MDN docs are some of the best out there. Hopefully this will encourage someone to NOT use w3schools ;)
W3schools is fine nowadays and way more beginner friendly imo. When I was just starting out I found MDN pretty overwhelming, although I use it every day now.
I almost always add "MDN" to the query when searching for Web stuff.
a function that throws as a default parameter is a funny idea... but what if you need a default AND required parameter ;)
The flux architecture is based around the idea of having no components own state. Components show some representation of data and trigger events. I'll be home shortly and I'll take a look at your fiddle and type up an example for ya
If it were required, there wouldn't be a point to having a default. ;D
omg, time for beer I think.
Really thought that link was going to open Chrome
TIL. Wonder if there's something similar for Firefox.
Here is a fork of your fiddle with 'Temperature' implemented using a store (there are easier ways, but I implemented a gritty store so you can see the workings) https://jsfiddle.net/fvgv5rb2/2/ Component: presents data. can fire off actions based on user input. "Action happened! User changed fahrenheit to value X" Dispatcher: passes events along to all the stores Stores: inspect events. if the event is relevant, modifies the data as needed and emits "my data changed" Actions/ActionCreators: turn some input into an event / tell the dispatcher
I like it. Default json viewer is pretty nice 
Very neat 
Thanks for this! I suppose I should start learning Flux or Redux now. 
Because I'm a big fan of it, I also implemented this using Redux. Redux has the stance that "all of your data should live in _one_ store" and you implement handlers field-by-field. This is a more functional approach and takes much less bootstrapping code See the code at https://jsfiddle.net/fvgv5rb2/3/
In other words: you can start out writing an app with "just" React, and keep all your data in the top-level component's state. However, as you add more child components, and more levels of children, you have to explicitly track which components need which data, and make sure everything gets passed down all the way from the top component. That quickly becomes harder to track. That's when it's time to move the canonical storage of your data away from the actual top component itself. Data management libraries like Redux and MobX allow you to store your data separately from your UI, then hook up individual components to request just the data each component needs. It also separates concerns - your components just display the data and turn user inputs into application actions, while the real logic lives elsewhere.
Allow me to introduce you to the wonder that is Dash: https://kapeli.com/dash 
I AM SO SICK OF PEOPLE TELLING ME WHAT TO DO WITH MY RADIX.
Here you go https://velocity.silverlakesoftware.com
Thank you that makes more sense. So in a way your saying have a separate database that defines "styles" that individual components can query for and receive?
You can add `site:developer.mozilla.org` to your search query to search the website directly.
I do not agree that the `e.target` usage is clearer, it's simply a way to avoid `this`. And first of all the correct equivalent is using `e.currentTarget` - the element on which the handler was attached. If you know how the context works in JavaScript and how the handler function is invoked, it's fine to access the element using `this`. It is not a question of ambiguity, but a question to know how the context works in JavaScript and how it is used when handling events. In in real world applications people try to avoid `this` because of its difficulty. But I do not consider the lack of knowledge about it as a sufficient argument for making `e.currentTarget` a better practice. The `event` object is provided as an additional information, for example when is necessary to use `.preventDefault()`. But the context is sufficient to access the element. Also the jQuery documentation on .bind() [mentions](http://api.jquery.com/bind/#event-handlers) (which is true for native events handling too): &gt;The event object is often unnecessary and the parameter omitted, as sufficient context is usually available when the handler is bound to know exactly what needs to be done when the handler is triggered. You can check [this article](https://toddmotto.com/avoiding-anonymous-javascript-functions/) by Todd Motto and see the style of accessing the event element. And a bit more details on [jQuery event handling function](http://learn.jquery.com/events/inside-event-handling-function/). 
That's 760% more typing, though.
Is it possible to make this for Chrome as well? (Google obviously can, but can we as outside devs can also do it?)
http://devdocs.io is dope.
Wouldn't this be pretty hard to make use of when not simply returning a param? The code inside the function would fail if the parameter was undefined. It's not like that 'uh oh' function is blocking the rest of the code. And at that point why not just throw conditionally from within the main function?
Since I fall under the Instagram use case of; "1) To help individuals share their own content with 3rd party apps" -is it true that ONLY "basic" permission will be given? even though I want to request the use of follower_list + public_content. Under valid use case example here: www.instagram.com/developer/authorization it seems like basic will only be given..
I would get rid of the do while and the sum variable. Wrap everything in a function that takes one argument that you can dynamically set to the max integer you want to loop through in your for statement.
Someone should write a FF extension to do just that...
The while is checking the variable c which is created in the loop. At the end of the loop the variable c is 14 which the while can evaluate and break out the do while loop. If you change this to any other number in the do while section will go into an endless loop. This is problem simply requires the for loop, the do while is rarely used in programming and not required here.
React first. keep it simple. once you have a handle on it, try to do something more complicated. and if that task is a good fit for redux, learn it then, but not before no point in over-complicating simple tasks, or in over-reaching. hell, plenty of react apps never need redux
Can you give an example of having to do routing twice in isomorphic apps? I don't have that experience…
How would this different from what we already have on chrome ?
Great idea, but there's no osx port of their dev preview. Starting about 6 years ago the macbook pro became the choice of developers, and a lot of companies issue them to new hires (I say this as someone who resisted until last year) The shitty thing is they have both a 32-bit and 64-bit linux version. 
The day ES6 templating arrived I never looked back. ### Use the backtick! (**`**) * it's easier to type, you're less likely to fatkey it vs. **'** &amp;nbsp; * double-quotes require two keystrokes/a chorded keystroke. &amp;nbsp; * you can output variables with ${varname} vs. the messy "startstring" + varInMiddle + "endstring" junk &amp;nbsp; * if it's a single argument function you can even leave off the parens! (yes I know this takes a little extra work to get embedded variables output, but it's life-changing to not have to hit the shift-key to, oh, write out a simple log message) 
It IS way nicer. I'd go a step further and leave off the parens even: alert`&lt;b&gt;${o.name}&lt;/b&gt;` 
Memories! And there were no braces either on the Atari 8-bit keyboards. A buddy of mine wrote an editor and changed the font used so that he could code C with braces (ATASCII didnt have the brace character)
Have been using it for at least a year. I can't even remember how many times I've CTRL+T + devdocs'd the hell out of web stuff.
Because all the cool kids are doing it!
I would guess using reverse proxying would be the way to go here. https://www.digitalocean.com/community/tutorials/how-to-use-apache-http-server-as-reverse-proxy-using-mod_proxy-extension
Seriously try [DevEdition](https://www.mozilla.org/en-US/firefox/developer/) :)
Until then you can take [DevEdition](https://www.mozilla.org/en-US/firefox/developer/) for a spin :)
I feel Chrome has fewer shortcuts for it's dev tools than Firefox.
&gt; Chrome's personal blocklist Probably "Chrome's personal blocklist" but installed in Firefox since Firefox is reimplementing Chrome's extensions API :D
`@apiName` should be unique for the endpoints. 
This isn't a use-case with a proper solution, so the various methods will have varying degrees of success and different trade-offs. Browsers weren't designed for this use-case, so you're going to have to jump through hoops. As far a client-side solution: (caveat: I haven't tried to do this cross-browser before) an attempt could be blocking rendering until your script executes and can manipulate the document into whatever state you need before anything gets rendered. Traditionally, browsers will defer rendering until all link elements have been fetched and applied; their intention being to only render styles once they've been fetched. In principle, you should be able to place a link or style element after your script so as to force execution of your script before anything displays. Note that there are two assumptions with the above: 1) browsers block rendering until a script has executed, however it may still render content above the script. This is known and to be expected. 2) browsers block rendering until all link elements are ready to be applied. This has been a fact for a long time, and is why best-practices suggest styles should always be referred to from the &lt;head&gt;. However, this may not be the case for future: https://jakearchibald.com/2016/link-in-body/ I'd probably recommend investigating. All the browsers (and versions of each) have subtly different behaviours and edge-cases. You should be able to use something like browserstack to test assumptions. Another alternative may to be to place a proxy server in front of your other server, parse the document, make your modifications, then feed the modified document down the wire. Although this is basically a MITM attack, so you should be aware that it wont work on secure connections (in addition to the many other problems that proxies introduce).
`window.open` can!
FF still has the best horizontal tab plugin.
`window.opener` can be manipulated to a certain extent, especially with `target="blank"` anchors. https://www.jitbit.com/alexblog/256-targetblank---the-most-underestimated-vulnerability-ever/ Yet another reason to not open links in new windows/tabs *cough*
There's also [Alfred](https://www.alfredapp.com/) which is a great spotlight replacement and also allows [custom searches.](http://www.giphy.com/gifs/3o72Faa1vpI2BvGoxy)
The most important first question is whether it's even possible to put an `a` element in SVG, and the answer is yes: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/a I think you'll need the [`document.createElementNS`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS) method here.
Or if you use DuckDuckGo !mdn
I've been using vanilla Firefox Developer edition for several months and I'm afraid I have to report it is still slow as molasses. I'm working on a fairly sizeable SPA, and its Javascript tools just chug.
 let sum = 0; for(let i = 1; i &lt;= 15; i += 2) { sum += i; console.log(i); // 1, 3, ... 15 } console.log(sum); // 64 Use F12 -&gt; Console to view the output. **Edit:** Doing the math is also an option: Math.trunc((n + 1) * (n + 1) / 4) https://jsfiddle.net/5t0omb99/
My text editor has documentation built in including MDN as a resource. Quite amazing.
Electron seems to be a good choice.
I know you guys all mean good but the question was: how to change DOM before render.
thx, I was hoping there was a way I have overlooked. But doesn't seem so.
I made a thing to track and rate houses cause I've been looking to buy a house. http://107.170.78.145:8089/#/login Funnily enough I'm not looking any more after the weekend spent working on it... Just use any credentials and click register, it'll make you the account.
Woah, had no idea you could do this!
Use GreaseMonkey or use a local filtering proxy to inject JavaScript code.
I've been a Firebug user since before Firefox built their own developer tools. Have they matured enough that I should make the switch? (I do more development in Chrome these days either way though...)
Great guide. Love the legwork on this one ...
You host TVML/TVJS on a web server, and use a tiny Swift app to load it in to the framework. [Tutorial here](http://jamesonquave.com/blog/developing-tvos-apps-for-apple-tv-with-swift/)
Not at all, perfectly happy to use well written libs (Ramda, React-lite, etc), just don't see the point in using sugar that removes existing functionality and provides zero new functionality.
You can use TemperMonkey/Greasemonkey as someone already mentioned, or you can make a bookmarklet (doesn't require a browser plugin). You'll need to create an iframe on the page (it can be hidden or positioned off the page so you don't see it.) and navigate to the account page check the box and save/submit. You're likely going to have to refresh the current page you're on anyways to get the change to show up unless twitch pushes those settings changes to currently open pages.
This is the correct answer, javascript doesn't have interfaces to give you the functionality by default. If you really want this functionality I'd check out typescript, I think you get things like this with it.
To me, React is pretty close to the ground in terms of pure JavaScript. It's mostly for code organization, easy reuse. Honestly, for me, 90% of the benefit from a 'framework' comes down to writing templates in pure JS, I could almost not care less what tool I'm using to achieve that. That being said, Angular does not meet such criteria.
Thanks. I was mostly aiming for gzip, since it's very backwards compatible. With my most recent optimizations, I got a brotli size of 379. I've spent a few days trying increasingly exotic methods to try and reduce the size, and at best the size remains the same. I think, code-wise, it is at its minimal possible size.
In my very limited experience with things like npm and nuget, I always wondered about this. It's always seemed like an obvious venue of attack. Glad someone else thought so and did the study. Programmers are far too trusting of other programmers, in my view. Call me crazy, but I want to know how stuff works. I hate the concept of just typing in a single line and having some massive package dumped into my project, ostensibly 'wired and ready'. It just screams danger to me. 
Well, either way, the function isn't pure as it mutates the DOM. Edit: the articles example with the mouse position is actually "pure".
Definitely check out lodash, it has a whole set of string manipulation functions that handle *all* edge cases. It's pretty much industry standard
keep spawning webworkers in the thousands. silent but deadly
I know lodash, and I use it a lot. But for some reason I did not really think about checking there for help. Thanks for the feedback!
I think he means in the context of an environment that provides Async/Await? I can kind of understand that then.
Yes that's exactly what I mean. Moreover, repeatedly in the post I couch these observations in language like "avoid if possible" rather than literally saying something like "`then(..)` should never ever be used, period."
Here's a demo page for the smart and impatient: ##### [Scroll latency](https://rbyers.github.io/scroll-latency.html)
Right on. thank you!
he wants to do something when all the ajax calls are done,something like `function call(){ return $.ajax({/*options*/}) } var arr = []; arr.push(call(1)) arr.push(call(2)) arr.push(call(3)) $.when(arr).then(function(){/*all done*/})`
No, he didn't.
Might be overkill, but on a large project I'd recommend using a library like https://github.com/caolan/async Really delivers. To accomplish what you want, you'd use async.parallel.
MakerSquare also has /u/getify. He's awesome! [DevSchool](https://devschool.rocks/) is also missing, which is interesting because it's a different paradigm, online, and is much cheaper.
instead of using forEach, use map to get an array of promises. then use Promise.all on that resulting array. you could also use reduce to chain the promises together but that can be harder to understand
A bit awkward when their example doesn't work. [Their example](http://i.imgur.com/WWR5vE0.png) versus [example with barebones HTML](http://i.imgur.com/GYjergE.png) (and red instead of white).
Ah that makes sense, thought he was having issues of iterating easily over a group of http requests.
Might be able to do something with google spreadsheets. Here's what a 3 second google search gave me: http://blog.pamelafox.org/2013/06/exporting-google-spreadsheet-as-json.html Good luck
I'm sorry but this is just a ridiculous issue to open. Bower has a great niche that is difficult to fulfil with npm, and its existence doesn't cause any issues for those that don't use it. While I agree that bower needs some work, more options are never a bad thing.
this is because of angular's dependency injection. It's seeing that you are looking for $window and injecting it into your function. Same with $element. The order of the parameters don't matter as much. 
Nitpicking here, but I always use querySelector(/All), I like that it gives some context to a string, that now shows it's a selector: ”#foo" vs "foo". Again, a really small detail but perhaps helpful to someone.
If it's so ridiculous why did the **second top contributed of bower** reopen it saying he 'partially agrees'? Part of this whole 'omg javascript fatigue' is due to the fracturing of the tooling infrastructure.
Heh i tried to do that out of curiosity and it's a waste of time. You need to learn the angular way of doing things to use angular :-D
I browsed through their extension APIs and doesn't look like there's anyway to intercept or react to an error event. I'd love to be proved wrong though.
The last bit about using generators instead of promises for flow control is really nice, I've been doing it with promises for lots of stuff but generators deffo look much better. Cheers!
Thanks for all the input, much appreciated. In the end I was able to do these updates on the backed and save a bunch of calls, but good to know how to handle a similar situation in the future. 
Thanks for the suggestion. This is for work so I don't want to add any more dependencies, but it looks cool. 
&gt;why did the second top contributed of bower reopen it saying he 'partially agrees'? He has still yet to expand on that, and i'm honestly curious what his thoughts are. &gt;Part of this whole 'omg javascript fatigue' is due to the fracturing of the tooling infrastructure. And IMO that's bower's biggest benefit. Bower is simple, like stupidly simple. And because of that it provides a way that people can bypass all the js fatigue. Use bower, include the thing you want in a &lt;script&gt; tag, and go on with your day. Deprecating that in favor of npm + webpack + babel + god-knows-what-else will only serve to greatly increase the amount of work that many developers will have to do. Not to mention legacy websites, and any small-ish "static" website. Those benefit immensely from bower's simplicity. I want jquery, bootstrap, and a table sorting jquery plugin? It's a simple bower install, insert 3 script tags into the html and use the global variable it creates. Leaps and bounds better than the old method of "download the .min.js file and check it into your repo, never to be updated again" or "use the CDN served from god knows where and with no idea on it's uptime, speed, or if it's even reachable by the client". No worrying about needing dependencies of dependencies, no testing if that library is node-only or if it works in the browser, no need for webpack or any kind of build step, no working around the issue of accidentally including 3 versions of jquery and 2 of lodash by accident.
This is all true but deprecating bower and recommending people move off of it won't stop legacy sites and casual web developers from using it. The focus should be on simplifying the modern tool chain so it is just as easy rather than maintaining last decades best practices.
What do you mean it's a waste of time? This question is not about Angular. I'm interested in learning about position vs naming of arguments. Angular was just what I was using when I noticed this.
&gt; let's deprecate mysql mysql is already deprecated
Watch your mouth man. More options? Jesus, we have Webpack which has too many ways to do one thing--it does module loading well, but fuck it's interface to hell (loaders/loader--is it so hard to check for an Array?). We have Grunt which is stable and works and people think it's dead. We have gulp which feels like a toy. Because these newbies don't recognize stability as a good thing, they think constant change is good... They yearn for instability, the kind that makes maintaining any project hell on earth. Now, now, you say "more instability is near a bad thing" I say, take this consideration seriously. Death is a good thing. It solves many problems. 
Right man. People fail to see that simple focused processes improve efficiency and scalability. 
it will happen naturally, but if we could decide as a community on a technology to nurture and really thoroughly plan and examine--something really good. And I'll put one step further, we could utilize a learning algorithm to determine the natural interface based on how coders use it. I think the language would be plugs of functions you want to use, and you write the interaction model on how you want to interact with that plug. Basically writing a language becomes as easy as plug and play. Meanwhile in the background the learning algorithm looks at the language being written and determines the natural flow creating branches for people to download and test. Those branches in turn mutate from the same efficacy of mutation and eventually it reaches a point of stability. And the releases start to trickle and growth slows because we have achieved a simplicity of interaction which is beneficial. Now, because I believe in more than one way to do things, I anticipate a few branches which emerge as popular.
He's posted in the past that Bower is pretty much dead and he's talked about ways to merge with NPM. This is hardly new news, but this issue is absolutely ridiculous and should be closed. 
i'm pretty sure they're already aware of that
You lament that grunt is out of use but in the same sentence call for the death of bower... IMO they are very similar. Bower isn't "broken" it still works great for its use case. I agree that it needs some TLC, but calling for others to move away from it is exactly the kind of churn you are talking about.
Deprecation isn't just a label, it represents that the thing is going away. Starting a new project with a deprecated tool would be a bad idea for any developer to do. And as for pushing for a more simplified way of doing things, monoculture is rarely a good thing. I agree that bower needs to get some updates or go away, but I really don't think that the solution to simplifying things is to try to bend a package manager like NPM to work like bower does.
Using webpack in any fashion on a simple 5 page static website is massive overkill and will almost definitely eat up more time than the whole rest of the project.
In the open source world we don't need a person or specific directing committee to arbitrarily decide whether a software project should live on. The beauty of open source is that these projects grow and sunset themselves organically. If a community over time goes away from a project then it will start to die. When more developers gravitate to another project, this project will then grow and flourish. Look at the many Linux distributions that have grown and died of their own volition. This is the way of things. The lifetime of these projects is crowd sourced if you will. Edit: smart phone keyboard grammar
What we need is to summon the obligatory-xkcd-bot by talking about frameworks.
Hmm. What do you want?
As much as that post comes off kind of harsh. I'm moving towards NPM scripts, because I can create small easy interfaces and when I complain about the API I've written, I can change it. So, I wrote this provocative thing to stir some opinions and see what people think. I like being able to control the workflow. I like easy so I'll make an easy API and throw that anxiety out the window. And as someone who writes open source software and tools, I know that my post can hurt. But, there is a blindness which we have accepted when we look at our dependency tree and the complexity which comes with Webpack (the new kid on the block) and then we say "if you wanted this to be easy, you should of went somewhere else" -- our job is to make complex things appear easy. That is mastery. "It only looks easy kid, because I make it look easy" When we aim for ease of use, I understand the undertaking and the difficulty which comes from distilling the seemingly complex into something which can be up and running in 5 minutes. It's hard and these guys need our support, because most OSS runs on love and dreams. 
Yes that's right, I can't tell if you're being sarcastic or not. It's pretty obvious that having one less package manager will help with fragmentation. You may have a point if they were creating something new to replace it. But that something new already exists and having both is making the problem worse.
Spoken like a truly wet eared newb.
Hi /u/mjanisz, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Please use the [Showoff Saturday](https://www.reddit.com/r/javascript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AShowoff%2BSaturday) posts for these types of submissions.
They'll switch to Maria or the next version of Postgres, like the rest of us. 
Indeed. This is the type of shit people like to argue about while developers are out there committing code. It's noise. If you've got a better idea for something, get it out there. If others agree, there will be a consensus. If not, it will be a demonstration of your abilities and you'll learn something. 
Death to all things not created or radically changed in the last six months!
Pretty sure the hipsters said that about five years ago. They'll switch to pure js too huh...
That's worse. You've basically just moved the `document.getElementById` into `changeElementToRed`, which is an aggravating restriction: who's to say we don't already have a reference? Who's to say the element has an ID? You're imposing unnecessary restrictions, and you've added an implicit dependency to boot: it now references `document`.
Bower is complete garbage. I would not recommend using it. Ever.
I did this recently on a project and my team was so impressed by how much it simplified our node build pipeline that we migrated all our node projects to npm script based tasks.
Feel free to fix it: https://github.com/jsbin/learn/blob/master/public/help/import-gists.md
Cool! I had no clue such game data was freely available.
It can be hard to "pick" what to learn and use—but remember, modern JavaScript and web apps are in their infancy[1], we're still trying to figure things out so we're all in the early stages. Anyway, I think the worst thing about being a frontend JavaScript developer is that a lot of jobs and culture are dictated by the framework you use. I've never been "satisfied" by any framework or library (not their faults, just none have clicked with me in the sense that I can see myself getting proficient at them), so it's always been a struggle for me to get the motivation to dive deep into any for career purposes. The best thing about being a JavaScript developer is Node. Maybe it's just me, but I love writing servers, services, npm modules, etc. It's fun! But, the number of backend Node jobs is dwarfed by frontend ones sadly. Not that I dislike frontend—I just prefer Node. Also, it can easily do anything. Web, backend, robots, iOS and Android apps that compile to native code, desktop apps, etc. It might not be the *best* way to do some of these, but hey if you know JavaScript well you can ship to a lot of platforms, and none are very hard to learn. [1] The language is old, but I mean the renaissance brought by Node, npm, and ES2015/Babel.
Webpack is intimidating at first but it's honestly not hard or time consuming to set up. You can be up and running in a few minutes.
It's still better to have the project go away gracefully than leave it as a zombie locked away in the darkness of the crypt of abandoned software projects. Someone might encounter it there by mistake, which would harm them in many ways.
It's more of an issue with how they present JS if there's no HTML (wrapping it in a `&lt;pre&gt;` tag instead of in a `&lt;script&gt;` tag). Since there's no HTML by default when importing gists, the code isn't executed. Fixing that would require changes to the backend (or whereever they process input -&gt; output), which would take deeper knowledge of the system than I'm willing to invest.
For such a small app, callbacks being passed down in the view hierarchy still work fine in my opinion. Generally the idea is to move the state up in the component tree until all children using it can receive it as props. So your first idea was right I'd say. In Redux you will only have "UI state" left, so make sure to not mix up these concepts. For example wether a button is currently hovered would still be component state in a Redux+React app, as opposed to the persistent global app state used as props. 
Actually reduce works equally well for both cases. You just have to flip the order in which you wait for the promises so you kick off the fetch immediately. Try this: return fetch('/add-number/'+ n , { method: 'PUT', body: ''+n }) .then(result =&gt; { return acc.then(results =&gt; results.concat(result)); });
The best AND worst thing are the frameworks.
Hmm, looks like you're right :(. I've only ever developed what feels like "front-end" plugins using their JavaScript API. This feels like it may be something a little closer to the source code :/ I'm not sure they even have an API for the underlying code. I will look into it if I find some time because I would love to write some more chrome plugins :P Edit: Maybe using [events](https://developer.chrome.com/extensions/events) to listen for JavaScript errors. Granted I haven't really read the whole page but that seems like the only thing on there that would be remotely capable of this functionality.
So is bower.
Yep, that's what Angular does: https://github.com/angular/angular.js/blob/master/src/auto/injector.js#L81-85
Great point!
Really nice! There's a little bug in certain spot though: http://imgur.com/DwU1vOI
Looks very similar to [CloudUp](https://cloudup.com)?
People shouldn't write frameworks, they are rigid and coercitive. They should write libraries, where you pick what you need without having to learn trendy concepts.
Bad features such as?
Damn Javascript developers, they ruined Javascript.
So I have to start learning 1000 different libraries and their usecases. I need to be up to date which library is still maintained and the right thing for me. And in the end I have to put all those libraries together and wire them up myself. I'd rather take a framework that solves those problems for me and I can concentrate on getting stuff done. 
&gt; So I have to start learning 1000 different libraries and their usecases. I need to be up to date which library is still maintained and the right thing for me. And in the end I have to put all those libraries together and wire them up myself. Or you could hide all that behind a framework and hope the maintainer(s) do all that for you. Plus addend abstraction layers to all the libraries.
Code something. Dump it somewhere. It runs instantly and on every computer. That is really, really amazing. The community is enthusiastic and there's a constant stream of new ideas and new solutions. It's quite inspiring to see so much time and effort being used to improve things, and it's exciting to always have new libraries and tools to learn about. The language is quite minimal and the lack of a standard library means that we don't have the usual rot that occurs in other languages. New libraries constantly emerge to improve on the status quo.
Good: js runs everywhere Bad: Async (which leads to an innatural coding style like callback or promise), DOM and CSS instead of a proper gui library. 
I am a little confused about controlled components vs uncontrolled components. It appears I created controlled components, and here https://facebook.github.io/react/docs/forms.html it says "A Controlled component does not maintain its own internal state; the component renders purely based on props." 
Same for webpack. No wonder it takes more time if you don't know how to set it up quickly.
Webpack requires you to define and use modules which takes up considerably more time than simply inserting a script tag. Plus webpack is not a dependancy manager like bower is. Bower is for retrieving them from source, webpack is building it for local deployment. 
i'd have to say JavaScript ;-) 
The random downvoting in these comments is fucking insane.
So ... You're telling me I have to learn 1000 different libraries when using a framework instead of having an unified interface to them?
&gt;nevermind, I'm done being sarcastic. ...But we can still get rid of php and mysql, right?
Somebody's been reading /r/programming
I expected Angular to be on top, but the difference is huge.
I don't think Bower is bad, but I prefer to use just one package manager. Ironically, Bower has to be installed via npm anyway. Ridiculous issue though; its audacity made me laugh!
That's... The definition of abstraction. You don't know where or what the implementation is, you just know the exposed contract.
Npm didn't used to have a nice flat structure to the Node_modules folder which caused some irritating problems with including scripts on your page or even knowing which script was loaded at times. With npm 3 this changed and that's when there was a push away from bower. 
The worst things are frameworks, except jQuery. If you want to use jQuery to make things easier.. it's pretty much okey. But if you HAVE to use jQuery, because your Javascripts are to bad. Well, then you shouldn't use Javascript. The only valid frameworks are if you using like heavy work technologies.. like if you want to use 3D Libraries it's ok. No one is gonna tell you to reinvent the calculation wheels for some primitives. Or if you using some APIs like Facebook or Google, then it's ok. They are made for it. But if you need to change the name of a page or use some Ajax, don't just download Angular oder anything else, because you don't know how to do it. In worse case if you more like `$.ajax` rather than looking for the full Javascript AJAX inclusive Fallback for IE, then it's okey. I do like jQuery in this case too, because it's way easier to play around with instead of handling the whole ship alone.
Slow down boy. No body is quitting their jobs.
At this point by saying "built with React" doesn't it basically imply React and associated technologies such as Redux, etc?
Is that Meteor + Blaze? Lots of Meteor folks are working with React as a replacement rendering engine in that stack.
Hi Reddit, I'm a dev on the CloudFlare UI team. We're super excited to be releasing this after working on it for so long. There should hopefully be more things coming out in the next few weeks where we can share more about how we choose to build apps at CloudFlare. Let me know if you have any questions and I'll do my best to answer them
thanks!
I dont know if its ever really useful. Angular is pretty unique in the sense that it implemented its own dependency injection. It's more about injecting than it is about dynamic / positional arguments. This also depends if this is a controller function attached to a directive or not. As someone else mentioned, Angular takes the function and does a "tostring()". It uses regex to pull out the names of the parameters you want to inject into that function. It then finds that registered module with that name, and passes it in at that location to that function. If that name is not found to be registered with Angular, it fails and is not injected, hence why if you change the name $http to $conf, $conf wont be "$http", it would be "$conf" if $conf existed, but $http could be in any position, it doesnt matter. It's a name based look up. But outside of Angular, I cant ever think of a use case for this. Especially today with module loaders and ES6 import syntax. Now this style of injection fails when you minify the file. The parameters lose their meaning as they would get changed from function($http, $window){} To function(a, b){} Then when angular stringifies the function, tries to locate "a" and "b" as a registered module to inject into that function, it fails. So they implemented the array syntax to solve this, ['$http','$window', function($http, $window){}] and when minified ['$http', '$window', function(a,b){}] at that point, if its an array, the last index is the function, and all the other strings it can use to look up the modules and inject at those positions. so $http is injected at a, and $window is injected at b, and so on.
&gt;We’re not open sourcing cf-ui because we think our buttons are any better than anyone else’s buttons, but because it’s an opportunity to share some of the technical decisions that we’ve made while building out a massive React application. The hope is that this will be an awesome technical resource for many other devs. Thought I should point this out before someone asks about the reason behind a new framework (CF calls it that, it looks like a component library to me)
Bower is cool when you store the bower_components folder in your source control. This way you just use it to download a certain library or update it. Bower is really bad when you think that you can just have a bower.json file which specifies how to automatically load all the libraries and guess the correct versions. Just use it properly and enjoy it.
I haven't really worked too much with the Audio API, so I don't have any sample code, but can point you to a few places to check out that might help. Navigator.getUserMedia() is a legacy API, so I would recommend looking at MediaDevices.getUserMedia() (returns a Promise). Here are a few links: * [MediaDevices.getUserMedia()](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia) * [Audio buffers: frames, samples and channels](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#Audio_buffers_frames_samples_and_channels) * [Using the Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API#Basic_concepts) * [Recording Audio from Microphone with Web Audio](http://html5-examples.craic.com/microphone_input_with_spectrogram.html) (this should help, just take a look at the source) There are quite a few demos out there as well, but most of them are visual demos (i.e [Voice-change-O-matic](http://mdn.github.io/voice-change-o-matic/)) Let me know how you get on. Am interested in looking at this stuff for a project in the future. Edit: Typo
Hi /u/clowndeveloper, we're going to need to see some code before we can help you. Please edit your post to include some code (see our sidebar for "JSFiddle, Codepen" if it's a lot of code) and then reply to this comment to let me know so that I can make your post public. Thanks!
This guy is https://github.com/muaz-khan is like a webrtc god. Here is the sample project of webrtc + audio https://www.webrtc-experiment.com/one-to-many-audio-broadcasting/#meeting-roomid-c9i2fo38-0xjemi
Neither is Backbone ¯\\\_(ツ)_/¯
Nothing to do with popularity. With es6 and bundlers frontend and backend are pretty much the same and npm serves for both, which simplifies things greatly. The problem is rather that once you make that step bower is in your way. Also it encourages es5 monoliths and script includes.
The guy who raised this issue is a fucking dickhead
going to editorialize this with my personal opinion: &gt; Bad: &gt; Other JavaScript developers who used to be ruby developers 
Woo! I'm an exception and life is great :) There are opportunities out there for JS devs that *will* change people's lives / progress humanity.. if you keep looking for one, you will find it.
&gt; simplifies things greatly &gt; frontend and backend are pretty much the same until they are not... http://andrewhfarmer.com/aws-sdk-with-webpack/ https://github.com/aws/aws-sdk-js/issues/603 **node** package manager an sdk meant to run in the browser has nothing to do with node
You can't automatically know what the communal opinion is. For example, here is a shiny-looking blog post all about how to get started in bower: http://blog.teamtreehouse.com/getting-started-bower Then you read recent comments about people getting excited about using bower. See? It's easy to go down an old pathway and not realize you are using abandon-ware.
Sad to see Ember only having 2000 sites. I think it is a solid framework now. I hope more people would take another look at it.
Anyone use Apollo yet? I'm about to dive into a project with a friend using it but always looking for feedback from those already experienced
He expanded on it https://github.com/bower/bower/issues/2298#issuecomment-224950668 
route.js is the library
OAuth
Sure, but it's regular/raw javascript, i.e., "vanilla js".
Because they are afraid of stability.
Those two are already merging as most npm packages are working fine in the browser and the one you mentioned is probably bugged, hence the issue. 
Why you didn't add "MAC" to your title ... Srsly please stop wasting my time looking at a electron app which is tied to a specific platform.
&gt; Worst: You're probably not working on something impactful. There are exceptions, but you're probably not working on something that's going to change people's lives. This applies to all programming languages.
Google has great documentation on [this...](https://developers.google.com/identity/protocols/OAuth2UserAgent)
&gt;aurelia &gt;Did you mean? Algolia ._.
&gt; Then let's deprecate mysql because we have... mongo. lolololol
How about deprecating nodejs?
It's my go to framework for serious home projects. I use angular 1.5 at work. 
Bower isn't abandonware. It is being actively worked on an updated.
Nice read.
I question how accurate this is. It says facebook.com is built with YUI, not React.
**Best things** Javascript + npm is almost neural, casting ideas directly onto the screen by putting blocks and bits together. I haven't had this rapid prototyping experience in any other language. Developing is fun again! The community at large is like a beehive buzzing with enthusiasm. It sets out to create a crutch and ends up with solutions that are downright revolutionary. **Worst things** Browsers. The DOM. Verbose config files.
Our team decided to switch to Ember. It's very easy to develop with. It's kinda slow to start up though, and FastBoot isn't an option for us... Ember-cli is the tits though. I love it
Depends on how you define framework, it's a rather vague term ¯\\\_(ツ)\_/¯
Here's the thing, it's a fucking framework. jQuery is something you put on the side of your app. You use it to call some functions occasionally, from random places. React is what you build your entire frontend view on. Yes, maybe it's a VIEW framework, not an MVC framework, but it's still a bloody framework. It's not just a collection of convenience functions. It heavily dictates how you lay out your code. And how you lay it out is ontop of React's framework. All your HTML, and the associated interactivity, goes ontop of React components. That's a framework.
Did they cleaned it up or is it still full of messy workarounds? Edit: wow. are we here on me_irl? Even jquery devs say it is full of slow messy workarounds. And I never said it should not be used. Fuck yourself with a cactus, people.
Just skimming the read me highlighted some interesting ideas around integrating components with redux stores, particularly the TableBuilder concept, that are of particular relevance to me at the moment so thanks OP.
Hi /u/caro1love, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Personally I feel that learning redux is orthogonal to learning react. Being able to design a deterministic one-way data flow with redux (or its many look-alikes) can help you regardless of which view platform you go for (e.g. React, Angular2, Aurelia, etc). 
It sounds like someone got really high and then wrote it
Messy workarounds is the reason to use jQuery. All browsers have bugs with the DOM and with jQuery I don't need to worry about them.
how is this commented out? I'm only seeing one slash..
This kind of thinking overlooks the huge demand still for things like wordpress sites. Not everything is a single page app that needs real time 2 way communication or node or nosql. Huge numbers of traditional sites still being developed. jQuery and things like wordpress (or joomla, or drupal) work very well together. Therefore, theres still tons of reasons jQuery is still important. 
Can you give examples of messy workarounds? Or is this just a jab at at useful library because it isn't the trendiest thing?
here ya go new Function((function(){ // alert("I was commented out, but still ran!") }).toString().slice(18, -2))();
Think of a registration form. The view is the input boxes that you see. The model is where the data lives that you fill into that form. The router is how a single page webapp figures out when you show you the registration form and when to show you something else
Sometimes you won't need it if it's really basic (and most of my static websites don't have any libraries at all) but if I want a bit more (but still a webpage) I'm not going to spend time rewriting existing libraries for fun. It might be some vanilla js lib, it might a jquery plugin but it's very far from being a binary no-lib/framework-only choice.
i don't really care if jquery is 100% spec compliant, it's just surprising to see them even appear to move toward A+ compatibility given that as far as i had heard they were pretty dead-set against it
Oh, this helps a lot, thanks!
Oh, I see, it looks very useful. Is that Ember or Angular? It kind of reminds me of other Object Oriented programming languages.
my reddit app didn't show the * after the slashes so I was confused. http://i.imgur.com/uDTMfrz.png
That's angular.
I think it was a Jab at cross browser boilerplate , not Jquery
Nm seems like a jab I'll doe vote op lol
Oh god... No offense, but why are you studying Backbone? It was a very ... less than magical experience for me. React is the way to go.
I don't think that's general to all languages. There's tons of important stuff going on in AI, VR, GIS, robotics, drones, self-driving cars, where JS is simply not the right tool for the job.
Well to start ember uses jQuery.
&gt; We set out to create a slimmer, faster version of jQuery (with backwards compatibility in mind). We’ve removed all of the old IE workarounds and taken advantage of some of the more modern web APIs where it made sense. And yet, filesize grew. Welcome to modern JS.
All the features that bad code use?
[they pulled a 180](https://github.com/jquery/jquery/issues/1722#issuecomment-59849586). (granted apparently they did it 18 months ago)
Probably, and I'm guessing here, one of the opening bits in domenic's [You're Missing the Point of Promises](https://blog.domenic.me/youre-missing-the-point-of-promises/) &gt;Contrary to some mistaken statements on the internet, the problems with jQuery’s promises explained here are not fixed in recent versions; as of 2.1 beta 1 they have all the same problems outlined here, and according to one jQuery core team member, they will forever remain broken, in the name of backward compatibility. But anyway, I'm quite pleased they've decided to go with A+ compliance for 3.x
is this still a problem with modern web browsers? I mean back in the IE6 days yeah but what problems do modern browsers have?
This is genius, and fun to watch too. good stuff - thanks! 
Pretty sweet.
Yes, there is a list of browser bugs fixed by jQuery excluding IE. I went looking for the list but couldn't find it. Most of the issues are with mobile browsers, but Chrome and Firefox still had a good amount. jQuery isn't a must like it was in the IE6 days, but browsers do still have bugs and jQuery will fix those bugs.
[baobab](https://github.com/Yomguithereal/baobab) is great.
File size growing doesn't imply it's more bloated. It could still be much faster. Have you looked at any performance metrics? I personally have not. 
Well that's not helpful. 
jQuery has been considered a real natural extension of the vanilla JS world for front end dev for everyone. For its quirks, the thought behind it is pretty well scrutinized. Writing a lot of code, you'll want to save 50% or more of your lines whenever you can. jQuery can do that for some work. You can just do it vanilla, but instead of writing the same things over and over, you could write some functions to clean it up. jQuery are those functions ready to go. 
Looks like this could be exactly what I'm looking for to use [mozjpeg](https://github.com/mozilla/mozjpeg) in the browser client-side. At the `a.out.js` and the helloworld html step, a little disappointed that there's ~500kb of what appears to be overhead, is this necessary because of asm.js? It works, but I don't know why, I couldn't even find the `"hello, world"` string inside the generated files. This is a rabbit hole I want to fall in, but I'm hitting a bunch of errors, and I think most of it has to do with mozjpeg itself. It all seems very possible, but porting mozjpeg is definitely not as simple as running emcc on the existing code, and I don't have the prerequisite experience with C to know how to do it. For now, I'll have to use a slightly inferior solution such as [JIC](https://github.com/brunobar79/J-I-C). Hopefully once the website is done and have time to do so, I'll take another look at emscripten and try to port mozjpeg.
Is this as awesome as it looks? 
It doesn't have to be OOP though.. you can achieve model -&gt; view bindings in a purely functional world.
How in the world does this work? var myFoo = FooFactory.createClass({ someInit: function() { return { a: 123 }; }, doFoo: function() { return 123; }, doBar: function() { return 456; }, doBaz: function() { return 789; }, }); Why would you need to name your functions? Aren't you just doing it twice? FooClass.prototype.doFoo = function doFoo() { return 123; }; FooClass.prototype.doBar = function doBar() { return 456; }; FooClass.prototype.doBaz = function doBaz() { return 789; }; Thank you. 
On the other hand: jQuery is pretty big, you probably don't need a significant chunk of its features (even the "slim" build is a lot of code) and for the ones you do actually need there's probably a much smaller and more focused library. 
I'm not studying it, but just suggesting it. I use it for work and enjoy it, and I think it can be valuable to learn models and views through
JQuery slim excludes ajax support? That's stupid, surely they could provide a small wrapper around that clunky XmlHttpRequest.
In fact, that's what React largely does. It doesn't feel similar to Angular at all...
Bonus: you get slower versions (due to special case handling) while also ensuring you include extra polyfills anyway (because es6 support is still only available in the latest browsers, necessitating transpilers). https://github.com/stevemao/You-Dont-Know-Lodash-Underscore
I tried this with my site it could not tell me its written with reactjs 
Don't forget the jQuery Migrate plugin. It's useful for spotting uses of deprecated APIs. Maybe not necessary for small projects but in bigger projects where lots of separate teams depend on jQuery it can be useful.
So, you instantiate a Function object, passing one and only one parameter to its constructor, which is thus taken as the function body, its source code if you will. Said argument is var innerFuncObj = (function(){ /* alert("I was commented out, but still ran!") */ ).toString().slice(19, -4) which looks a bit like a IIFE but is not because it is not invoked, so that is another Function object. Against this inner Function object, you invoke the method `toString()` belonging to the Function prototype, which overrides Object.toString(). Read [the fine prints](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString) : &gt; toString decompiles the function, and the string returned includes the function keyword, the argument list, curly braces, and the source of the function body. thus here returns the string function (){ /* alert("I was commented out, but still ran!") */ } said string is then sliced to the content of the comment : alert("I was commented out, but still ran!") So we now have var outerFuncSourceCode = 'alert("I was commented out, but still ran!")' which is then used to construct the outer Function object : var outerFunctionObject = new Function( outerFunctionSourceCode ); and the later is then finally invoked outerFunctionObject() Sure enough, what is executed is the code we passed to the constructor as sole argument, that is the sliced string representation of the inner function object, in other words the naked alert. The same happening in slo-mo : var innerFuncObj = (function(){ /* alert("I was commented out, but still ran!") */ }); console.log( innerFuncObj ); var innerFuncObjSourceCode = innerFuncObj.toString(); console.log( innerFuncObjSourceCode) var slicedCode = innerFuncObjSourceCode.slice( 19, -4 ); console.log( slicedCode ); var outerFuncObject = new Function( slicedCode ); console.log( outerFuncObject ); console.log( outerFuncObject() ); -------------------------------------------- Nice puzzle that got me going for an hour. Say, how did you come upon such a convoluted piece ? So, the final verdict is that no, comments don't get executed. What we have here is a silly way to handle a string that indeed looks like a comment, but only looks like.
Just awesome, thank everyone for explanation. function -&gt; toString -&gt; take part of it as a source for new function -&gt; execute the new function
I trust the lodash people will use ES6 internally when appropriate. Plus they always handle edge cases, optimize their performance and so on whereas my implementation will probably be naive (i.e., worse). If they took the time to do all that for me, why not use it in every case?
If you didn't notice, you are building some sort of dependency injection container. Some features that common di containers supply are: Register function to register new modules (you are just manipulating the project object directly, I would rather call a method "registerModule", as the client doesn't have to know about the structure about the container. At the same time I would add the possibility to add different types of modules, so for example you could use registerSingleton to add a module that will only be instantiated once and has a common state or you could use registerFactory which always provides a new object with its own isolated state. 
Wait, is there anyone that runs user provided JavaScript except for codepen.io et al?
I like the idea of registering a module. The less learning to create a new module the better. Factories and Singletons would be good too. I don't want to go full blown requirejs. Otherwise I would just use that. Thaks for the tips.
I still use native version when js speed isn't a bottleneck because chaining is so nice to use (generally with stuff like map, reduce, filter, and friends). But when it's time to filter over an array with 300,000 elements in it, it's time to pull out lodash for the perf boost. 
The term and it's meaning is not vague. How people use it and how junior/beginner programmers abuse the term can be deemed "inaccurate", but probably a little vague too.
The native `map`, `find`, `some`, `forEach`, etc. don't work on node lists. Lodash always works.
Which one do you recommend to start with? I started with Angular, but I didn't like it very much.
Wow. I used ES6 but I didn't even know about these Lodash functions. I must try them sometimes. Lodash is better library than I thought. (do you see what I did here? ;) 
I'd suggest you should really know your JS first. React is more popular but I prefer to work with Ember. I like hbs kinda templating. 
He did mention in the live stream that they are deprecating more things than they are adding.
Thanks.
Might try in /r/threejs.
At least on JavaScriptCore lodash's map/filter/reduce is significantly faster than the native implementation. As I'm working on a React-Native app that is targeting iOS devices, we have a standard of preferring the lodash implementations. 
Your point was that you dont need it. Cause mine was that huge numbers do use it.
I resolved this issue by taking a different approach, but I'll make sure to include some code for next time. Thanks!
Correct, that is actually how I originally stumbled across this (I needed to inject some CSS, and I wanted it to stay pretty in the JS). The issue with this method is that if you run your code through (essentially) any minifier, you'll lose functionality. Relying on comments to hold valuable information for the execution of the program is a terrible idea.
Yep, probably a good policy, especially just for code standardization. Lodash cuts out some of the really obscure edge things the native language has to take into account, but are almost never relevant to everyday use. And if you follow the lodash docs as to api usage, you are never going to run into those cases.
Any idea how long it should take [Google to update their hosted library](https://developers.google.com/speed/libraries/#jquery) for version 3.0?
No, ESLint would not catch a certain class of typo. Let's say you have an object in your App called `settings` that's shared across the entire app, and it has an optional property called `settings.prop`, you made a typo in one file for it, lets says `settings.pop`, there's no way for ESLint to know whether `pop` is a real or a typo. This may be caught via tests if you have sufficient test coverage. However, even for the best test implementation I have seen, the coverage is around 98%. So there is 2% chance this would fall through the cracks. The average project is between 30%-60%, so there is a pretty good chance to fall through the cracks. In addition, the developer might make the same typo when writing test!!!!
I disagree, react does require you to structure your application in a specific manner (at least the view layer). I'd call it a framework for the view layer. Anything which has a 'Library way' (angular way, react way, etc) is probably a framework of some kind.
Go on.
For what the clear explanation, try in the console ``` var str = (function(){ /* alert("I was commented out, but still ran!") */ }).toString().slice(19,-4) ``` and then ``` new Function(str) ``` It is work as intended, the (19,-4) is nothing special ``` (function(){ /* alert("I was commented out, but still ran!") */ }).toString() ``` gives you string "function (){ /* alert("I was commented out, but still ran!") */ }" position 9, you get the first star(+-1, depends on how you understand), and -4, up til last star It is not a security loophole, the reason you shouldn't use `eval` in context involves foreign foreign information. you essentially evaluated a modified string.
Spot on, but not having jquery is no big loss
Thanks for your input. I meant, when it is worth using virtual dom? Is there ever a time where using it will actually be slower? I am actually using backbone right now and am considering adding a virtual dom layer to it. This example is a bit old but looks like it can be leveraged https://github.com/tiagorg/marionette-vdom This is using an underscore template, and using some library to convert an HTML string to vdom, then patches the dom accordingly using the virtual-dom library. What are your thoughts on this approach rather than using backbone directly without virtual dom (basically re-rendering the entire template instead of finding the diff and patching with virtual dom)?
&gt; a JavaScript FPGA Are you implying using using Javascript as a Hardware Design Language? This compiles into a binary that can *interpret javascript*, which doesn't seem at all close to a Javascript HDL
What /u/MahmudAdam said; plus in the [2.0 introduction post](http://vuejs.org/2016/04/27/announcing-2.0/) on Vue's blog there is info about planned LTS period.
Most implementations keep comments in the source code; curiously, comments count toward V8's 600-character limit for determining whether a function can be inlined to speed up computation.
My latest application is entirely written in jquery, probably like many of you. This time around my application is a lot closer to an SPA though, so I'm having to write a lot more lines to keep the UI synced, so I started poking at alternatives when I stumbled on this. Vue is sounding pretty good, as my application is not really complex enough to warrant full blown Angular.
nbd. I think there's some work in converting C to HDL. If someone creates javascript-&gt;C then it's maybe possible to do javascript-&gt;HDL (FPGA)
&gt; Wait, is there anyone that runs user provided JavaScript except for codepen.io et al? Every site. You can open up the console in-browser and start typing arbitrary JS.
they said they will be providing a 2.0-migration build to help in migration from 1.x -&gt; 2.0 just as there was 1.0-migration build to migrate from 0.12 -&gt; 1.0 so migration won't be much painful 
how can that be considered "decent" comparison when the author was obviously biased? 
I'm not quite certain what you're working in (tip: providing your sample code is usually a minimum for anyone to bother commenting), but I can't think of too many API's/etc that have a 'exists' method. Additionally, I can't think of too many API's/scenarios where a variable defined to a string would be able to simply invoke a method that tests 'if it exists'. That being said, usually to test if a file exists through an API, you need to use existing methods that would only function if the file either existed or didn't and then just simply get that test case as your evidence of said existence, e.g. function exists(newFileName) { try { // this is some heavy PSEUDO code, but again, we'd need to see all your code to really help you someAPIYoureUsing.someMethodToCreateAFile(newFileName); someAPIYoureUsing.someMethodToDeleteTheFile(newFileName); return false; } catch(err) { // you tried to a create a file and caught an error (because it existed), thus... return true; } } if (!exists(newFileName)) { // your code }
Might be easier just to skip out C and go straight to an HDL, but it might end up looking kinda funky.
&gt; Is there ever a time where using it will actually be slower? A good vdom implementation will almost always be faster than manual dom manipulation. Why? Because it knows a lot of dom-mutating optimizations that you do not. For example, iterating Node.childNodes is slower than node.firstChild &amp; node.firstChild.nextSibling. Node.firstChild.nodeValue is faster than node.textContent, etc, etc, etc. If you were to write optimal dom code, your code would be difficult to read and to maintain. If you're coming from Backbone, you may find it fairly easy to transition to a fast/small tool-free vdom lib that still allows you to structure your apps the way you want, such as domvm or Mithril (Mithril's current vdom is pretty slow, but the WIP 1.0-alpha is much faster). Basically, good vdom implementations more than make up in code maintainability and dom-mutation speed for the tiny overhead they introduce. That being said, there are many sub-optimal vdom libs. React's is quite slow, but "fast enough", obviously. There are *a lot* to choose from. You can compare their speeds here: http://mathieuancelin.github.io/js-repaint-perfs/, repo: https://github.com/mathieuancelin/js-repaint-perfs. Currently, Inferno and kivi lead the pack, but domvm, mithril-alpha and some others are not far behind.
D3 is a low level graphics library. It is meant for a different audience of users than Tableau. D3 expects programming ability, knowledge of how to transfer your data around yourself, and design sense to make your own charts. It is meant for people making new things. It also is meant for the browser primarily. There are higher level easier plotting libraries written on top of D3 that are options as well; charts.js or plotly and so on, there are dozens of them. Tableau is very high level and meant to be usable by non-technical people just as easily as technical. It gives you less freedom to create whatever dynamic presentation you want in exchange for ease of use. Typically this is worth it imo. It also offers data transfer tools for you from company databases or other sources that would require a bit of a struggle to replace for a non-programmer. It's basically a more modern, visually oriented excel with less focus on spreadsheets than data presentation. If you are a data analyst then Tableau is perfect. If you are a web programmer wanting to design your own beautiful and dynamic graphics then D3 is better. 
Set that connection up within the controller view and mutate state accordingly. Similarly, if using redux, dispatch an action each time data is received.
Thanks again for your help! It makes sense to me that a web language would have limited local file access. Interesting that Adobe would choose it for use in scripting, then. Regarding the extensive commenting, it's more of a way for me to keep my thoughts organized as I go, and for my own reference reading back. Again, I'm new to JS so sometimes I need to refresh myself on my though process between sessions. Anyhow, I've been planning to use the Document.saveAs method to do the saving. I *did* discover [this document](https://www.adobe.com/content/dam/Adobe/en/devnet/scripting/pdfs/javascript_tools_guide.pdf) detailing error handling on the File object (page 44) in Adobe's ExtendScript toolkit. I feel like this is the path I'm looking for, but I'm not sure how to get and then use the error message out of the File object.
Has writing joke projects become a new requirement for aspiring developers?
I downloaded it a while ago and got docs for a few things. Never really used it though, as straight up docs are often not as helpful as stackoverflow, because normally when I encounter a problem it's very specific. 
Ok, that document definitely sheds some light as it looks like the file object property does have an exists method. Where you're going wrong (leading back to my first point where I was saying it's strange to call a method on a string), you need to take your filepath (which is currently just a string) and use that to create a fileObject. From there you'll be able to then use the .exists method via the fileOjbect. Here's an example where let's say you want to iterate over 20 objects: e.g. var PDF = activeDocument; var totalFilesToCheck = 20; var fileObject; for (var i = 0; i &lt; totalFilesToCheck; i++) { fileObject = new File(PDF.path + '/' + i + PDF.name); if (fileObject.exists) { // true } else { // false } }
Was enjoying this but the autofocusing on the camera made it unbearable. If the creator made a proper version for youtube I'm sure it'd be popular. 
&gt; I think there's some work in converting C to HDL Yep, there are [several such projects](https://en.wikipedia.org/wiki/C_to_HDL) including of course [SystemC](https://en.wikipedia.org/wiki/SystemC) which allows C++ to be used as an HDL.
Awesome, this is exactly what I was hoping to do! But my only question is, if the file doesn't exist... didn't we just create it by calling new File(yadda yadda...) before checking to see if it does?
Thanks for posting this. While I'm not sure if I'll use the library or not, it's really great to see more large scale production React/Redux codebases opened up for reference. Even if I don't leverage the library, I've definitely learned a lot from it!
Yeah It'd be better but probably not common enough of a path at this point to justify making that
Atwoods Law and mostly just for poops and giggles pretty much. As much as it's fun to shit on javascript and I actually like writing it so it might be fun.
It's easier to predict outcomes and track data through large (and small) applications. [This presentation](https://youtu.be/nYkdrAPrdcw?t=654) talks about why Facebook moved from two-way to one-way data binding with the Flux architecture. 
First of all, if you're going React, I'd highly recommend using a Flux-inspired library for state management. React is essentially designed around it, and your code will get really ugly really fast without it. Some of the benefits: - User actions (and therefore model manipulations or AJAX calls) are centralized, this helps code be more maintainable and reusable, as well as adds an extra benefit in that it is super easy to integrate analytics. - Application state is also centralized, making it easier to manage as you always know the true source of the data populating your application. There are some side benefits in that libraries like Redux can allow you to step back and forth in time in your application state, given that it's centralized -- this is awesome for debugging. - There's a common problem in the UI world, which is that if you ever present the same data in more than one place, you can run into syncing issues. By leveraging immutable data that flows from the top down, you avoid an incredibly common (and constantly regressing) source of bugs. - All of these benefits combine together to allow you to use productivity boosters like Webpack's hot module replacement. There are libraries for hot reloading React components and Redux stores that enable you to actively develop a UI without ever having to reload the page (it patches dynamically at runtime).
Hmm, I'm interested in this as well. Let me know if you find anything :)
Ghost is very nice: https://ghost.org/
Two-way binding isn't de facto bad (there used to be a wrapper for it in React called ReactLink, though it now looks to be deprecated). However, using two-way binding as a message bus is bad, because it makes it hard to follow the messages through your system (a triggers b, b triggers c, d and e, e changes a again, etc.). The essence of one-way data binding is that data flows in one direction _after some change_. This makes it easy to identify the source of the change, and then follow that change as it moves through your system, potentially with side effects.
&gt; Does it translate to less code No usually the opposite. Two way data binding may get your where you want to go a little faster, but it becomes hard to predict what state your application is in. One-way data flow is highly predictable, and as such has gained great popularity for lots of devs. Better long term developer experience.
I recently went with [Contentful](https://www.contentful.com/) as a CMS as a service. Have had a really great experience so far!
The easiest way to refactor Javascript is to change the file extension to `.ts`.
If the native implementations of those collection methods are too slow for you and you actually want to optimize your code, then you should be dropping down to lower level constructs like for loops instead.
why? lodash handles what i need it to with almost 0 overhead compared to a for loop, and it does so much more concise and in a "new-developer-friendly" way. (not to mention the other benefits of it, like being able to use traditional "array" functions on objects and other collections) When someone else looks at my code, they know instantly what the 3 lodash functions are doing compared to the multiple for loops and temp variables that i'd need to use without lodash. With a good webpack config i'm only including the absolute minimum of lodash that i'm using. With some of the larger projects i work on, I'm pretty sure that including lodash is saving bytes compared to what we would have to do if we didn't have it. There was only one time when i really needed to drop down to raw for loops for performance, and it was when i was doing some image processing in js with canvas and the ImageData object (and i actually ended up using some cool bit-shifting and packing to treat 4 8-bit values as a 32-bit int and got rid of all the benefits the raw for loops were providing over something like lodash).
It's great that they're making it easy to embed ("simply copy two files: v7.h and v7.c into your project"), but it's definitely at the expense of being easy to contribute to. v7.c is currently 33,561 lines long; GitHub only shows the first 18,362 lines. That's a lot to grok, and merges may be a tad painful :)
The 'von neumann' quote is here, https://facebook.github.io/react/docs/two-way-binding-helpers.html I can see how React's approach might simplify things. I suppose I would need to implement a websocket server on top of React if I wanted to avoid writing AJAX. 
For those looking for an embedded JS engine with a more liberal license I can recommend [Duktape](https://github.com/svaarala/duktape). The documentantion is fantastic.
the JIT in most JS engines is a bit smarter than that. It's not going to allocate n new stack frames if it can figure out that it's not needed, and in most cases it can. Funny enough a for..of loop is actually about 5x slower than a forEach in most cases as it's just had less time applied to optimizing it at this point. And order of magnitude my ass! Most of the time the native .forEach are only about 2x slower than a for loop, less if it meets certain criteria (like being a dense array or having a consistent type for all elements) Mind you, most of my knowledge about js speed is from v8, so it might be pretty different in jsc, chakra, or spidermonkey. But that's another benefit of using a lib like lodash. Let them do the analysis. I trust that lodash is going to use the fastest version they can for the most platforms most of the time, and i'll reap the rewards. Lodash already drops to native implementations in many cases because they are faster. Anyway, i'm going to keep using lodash as it's much easier to read, much easier for my team to use, and is fast enough for most cases. I'm going to use the native forEach functions where they make sense, and i'm going to drop down to a for loop if absolutely necessary. It's all about choosing the right tool for the job.
&gt; However, using two-way binding as a message bus is bad, because it makes it hard to follow the messages through your system (a triggers b, b triggers c, d and e, e changes a again, etc.). Why would that happen? I assume that, in this example, `a` is an input bound to some model property `b`. But why would it be bound to `e` also? Perhaps I'm exposing my ignorance of JavaScript frameworks here - most of my experience is limited to Knockout and Vue - but I did not believe that frameworks like Angular or Ember would ever allow `a` to be bound to more than one property at once. The example you give seems to be more a problem of circular data flow and a lack of 'canonical' model properties more than anything else, and this seems to more an issue with how a developer uses and abuses observables than two-way bindings on UI elements. What am I missing here?
Keystone.JS http://keystonejs.com/
v7.c is amalgamated - several files are concatenated at some "prepublish" step into a single "v7.c"
Agreed! However there are other state management systems that are not flux-inspired like MobX that are doing quite well.
[Eloquent Javascript](http://eloquentjavascript.net/)
I'm going to use Angular as an example, mostly because that's the framework that popularized two-way databinding. Say you have a User edit page for your app, you probably have a UserController: // UserController.js $scope.user = { firstname: 'John', lastname: 'Doe' } And you'll have a form to control the model // user-edit.html &lt;input ng-model="user.firstname"&gt; &lt;input ng-model="user.lastname"&gt; This is fine and the magic of Angular, but what if you have a list of items populated from a database? Say it's one of those online stores with products that match your name. // StoreController.js $scope.searchByFirstName = 'bob' $scope.items = items.filter(function(item) { item.firstname = $scope.searchByFirstName }) // store-index.html &lt;div ng-repeat="item in items"&gt; &lt;a href="{{item.url}}"&gt;...&lt;/a&gt; &lt;/div&gt; But if you change the user in UserController how do you get it into StoreController? You have a couple of options, but people would look through Angular docs and see that you can $scope.emit('userChange') so let's go with that. // UserController.js $scope.$watch('user', function(newUser) { $scope.$emit('userChange', newUser); }) // StoreController.js $scope.$on('userChange', function(newUser) { $scope.searchByFirstName = newUser.firstname }) This sort of thing is an [anti-pattern in Angular](https://github.com/angular/angular.js/wiki/Best-Practices). But it demonstrates an inherent problem with two-way data binding because you're firing an event _any time_ the user model is changed. This could be from either the template through the input binding or from the controller through an `$.on()` event. With uni-directional data-flow, you never mutate the model directly, you call some action that changes data from some singular source down into the two controllers, here I'll use Vuex/Vue since you know Vue already // store.js export default new Vuex.Store({ user: { firstname: '', lastname: '' } }) // component/User.js export default { vuex: { getters: { firstname: function(state) { return state.user.firstname } }, actions: { setFirstName: function({dispatch}, e) { const firstname = e.target.value dispatch('SET_FIRST_NAME', firstname) } } }, template: ` &lt;div&gt; {{ firstname }} &lt;/div&gt; &lt;input @onKeyUp="setFirstName()" :value="{{ firstname }}/&gt; ` // note I actually can't remember how to both bind the onKeyUp and value at // the same time off the top of my head but you get the idea } // mutations.js export default { SET_FIRST_NAME: function(state, firstname) { state.user.firstname = firstname } } Instead of watching the user model in your User Component (which you could still do with Vue but isn't a Vuex pattern) you dispatch a mutation called 'SET_FIRST_NAME' which updates the store which updates the getter in your User component. That way you don't have the confusion of what mutated the user model, you have actions that are implicitly called and that you can track (which allows for time-travel debugging) that trickles down into what gets rendered. A circular flow that's easier to understand than a mess of $emit and $on functions.
Thanks!
With this example in particular you can see it's building up a string line by line, so I just logged the output and ended up with a semi-obfuscated code block. The rest was just figuring out what the variables and functions meant, and as the code was quite simple this didn't take much effort. 
I'm actually looking at vue.js in the hopes that it handles transitions better. What are you using with D3? Any advice helps.
What kind of refactoring are you planning on? In general making sure you are using a linter with your JavaScript can help catch many small bugs if you aren't using one already. The free Brackets.io editor has linting by default and I think the free Visual Studio Code (different from Visual Studio) has a linter by default as well. If you're set on Visual Studio you can add linting with the Web Essentials plugin (though I haven't tried to see if it works in the community edition). Most modern IDEs have js linting in some plugin these days. Things to search for are jslint (very opinionated), jshint and jscs (together cover features of jslint but are more configurable), and eslint (extremely configurable and extendable).
Thank goodness! I guess I didn't look deep enough into the project structure. Might want to add something into the readme for potential contributors? 
I'm sorry but this is just BS. WordPress has its flaws but in the right hands and with the right needs it's a great choice for even a large corporate website.
You can still use an ajax call, it would just occur on an action and when the result comes back trigger another action or update your model depending on which libraries/methodologies you are using. Your react app would then only need to trigger that action. The model would then be responsible for making the view update with all the data it recently collected/aggregated from various sources. If you had multiple edits occur, you could throttle your update to let it gather multiple changes to apply at once (for instance.)
Funny you say that. WordPress is transitioning to use NodeJs. https://developer.wordpress.com/calypso/
Ghost is a blogging platform, not a CMS 
They do, but you have to invoke them using call/apply like: [].find.call(document.querySelectorAll('div'), function (el) { return el.id === 'header'; }) Or similar using Array.prototype.find. Certainly not as clean as using lodash.
Dat plugin market lock-in fever in wordpress is ridiculous. Can you imagine if Everything on NPM was offered as a crippled free version that was designed to make your life harder to move to an alternative in the future while trying to flog you the full price version. :s
TS has something in common with jslint , it is very opinionated e.g. there is only 1 way to use classes. At least last time I tried.
It's PHP-based, but [Craft](https://craftcms.com/) is far and away the nicest CMS I've ever worked with.
Nice positive article!
Thanks :)
Some days, but not many :D
Might be a weird question.. lol... Do you know of any smart phone apps that are "on-the-go" study material at all? 
may be helpful http://www.opensourcecms.com/
Javascript is not the gateway drug. Javascript is cocaine. It's where people end up and they can't get out.
Create an `index.html` file: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;h1 id="myHeading"&gt;This is my page!&lt;/h1&gt; &lt;input type="text" id="myInput" /&gt; &lt;button id="myButton"&gt;Update!&lt;/button&gt; &lt;script src="myScripts.js"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Create a `myScripts.js` file: document.addEventListener("DOMContentLoaded", function () { document.getElementById('myButton').addEventListener('click', function (e) { document.getElementById('myHeading').innerText = document.getElementById('myInput').Value; }); }, false); Then open `index.html` in Chrome. Type something in the text box and click the button. You will see the header text update. Boom! You are looking at a webpage without being online, and with an external, linked script file!
Lots of content from Josh these days. That's good. 
Hey man, loved this article. Very apropos!
nice one!
At least it's not Joomla, am I right? I've had great luck with WordPress until Corp decided the Joomla, they had laying around, should be used instead. awful...just awful
[JavaScript: The good parts](http://shop.oreilly.com/product/9780596517748.do) is **absolutely a MUST** for any JS developer, in my opinion. [JavaScript Patterns](http://shop.oreilly.com/product/9780596806767.do) Is a great book that will give you examples on how to get things done, with a special attention to the 3 types of inheritance in the language.
Eloquent JS is great for people who already know another programming language. [JavaScript for Kids](https://www.nostarch.com/javascriptforkids) is great for people learning their first programming language. Just my 2 cents. 
Do you intend to blog? How often do you anticipate updating? Are you delivering dynamic content or static content?
Loading all of my javascript classes from a root class in body onload. Here you go, I made it public domain: https://1drv.ms/u/s!AquMSGTWcHvVtXcwAcc-zdAaQj6Z
Josh is that dude. This is a great read.
I feel like JS is underpowered and its ecosystem is largely crazy but, on the other hand, it runs everywhere. I'm not really a "JS developer" though, maybe
What closures where and how they actually worked.
Hey hey, 2 for 1! https://1drv.ms/u/s!AquMSGTWcHvVtXcwAcc-zdAaQj6Z
You will have to pry semicolons from my cold dead hands.
Functional programming techniques.
Abstractly, it's very much like wordpress with the exception that it's not as rigidly developed. It's much more forgiving to lower level extension. And "CMS" is a label that wordpress has after it began it's life as a "simple" blogging engine... where one of the original devs broke off to build Ghost.
The important distinction is not so much AJAX vs websockets, but rather how much code needs to be written to send data to the server. If clients can just say `Post.update(content: "hello")`and this gets reflected on the server, then it's not necessary to add custom AJAX / websockets. 
Not really. A CMS would at the very least have support for custom post types. Ghost has just... well, blog posts. And it doesn't have a plugin API to easily to extend it such that it is more than just a blog. Heck, its tagline is says Ghost is 'just a blogging platform', and [their own comparison page][1] says you should use WordPress if you want to build a full business website [1]: https://ghost.org/vs/wordpress/ 
Ah, the Great QBasic Fatigue of the 1996.
&gt; never be your default decision People should fuck off micro-managing other people's decisions and making sweeping statements, this is incredibly petty.
Looks like noone's mentioned Perch, so here's a link: [https://grabaperch.com](https://grabaperch.com) 
This is the correct answer. 
Go watch, enjoy https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q
You know the answer.
Did you do this part? html = new EJS({url: '/template.ejs'}).render(data) So, template.ejs will have the template like Hello, I need to get some new &lt;%= title %&gt;. data will be the js object you want. Then in another js file add the EJS call and the html variable will have the template filled in.
Lol what? Public user registration costs 300...
Well, having a new major version number means that they must increase because that will be backwards incompatible with previous versions (unless it's some marketing bs). So if someone adds new features with minor version increase, it means that they designed the software properly and thought ahead. That's something noticeable.
Asynchronous programming (like callbacks, event handlers, promises) Using and understanding the event loop.
I can also vouch for Craft. Really well made, great docs, nice API for plugins, great community. 
Don't work with languages without a good package manager.
Sure, NP. Also got to 379, replacing "function" callls with ES6's "=&gt;", and using the backtick (`) so you don't have to escape out the quotes.
First of all, please code in English, even if it isn't your native language. It's really hard to understand your code when I have no connection with the variable names :/ Try wart = textbox.value.reverse();
Learning how to use promises properly. Realization, that you can abstract any computation/task behind it, no matter how many side effects it has.
I still don't get the reason to not use semicolons. Whether it works or not is not the question, semicolons greatly help readability, that is the reason to use them.
Isn't it like the opposite of a gateway drug? That's imply that we'd move onto harder things? That being said, we _have_ got Web Assembly on the way.
Mixins – passing prototypes around to decorate them. It's like multiple inheritance, but much more explicit. I've found that these days, about 80% of the time I end up writing a mixin instead of adding a superclass.
Why do this when we have tools like Browserify and WebPack? As a side note, it kind of looks like you have some misconceptions about how OO works in JS. It's very weird to say `var SomeClass = new function () {`. `new` is how you make an instance, not a class. I'd recommend reading up on how prototypes work.
Yeah, thinking about checking out vue.js myself. To me, the issue is around recreating the full enter, update, and exit pattern in React. Doing something to a node as it enters (or "mounts") or when it updates is pretty manageable. I think anyone who works with React can see how that might be accomplished. In past projects just grabbing the DOM node (using findDOMNode or refs) and running a transition on it during the life cycle methods works fine, but it feels a little icky to select the node using D3 selection in order to run the transition. However, it works, done it in apps and it's fine. The exit selection is the problem. It's a node that's both there and really "not there". For me, you need to make this status part of your state. Nodes (bars, paths, axis ticks, circles, etc) need to be in your state with their current enter, update, and exit status. You also need to consider cases where a user is jamming buttons on your interface and transitions aren't completing. So, for instance, an "exiting" node may be in an exit transition, but never actually reach the end and be actually removed from the DOM. If you run an new transition on a node in D3 it will interrupt the current transition and start the new one. So you update the data and now an exiting node, because it's still in the DOM, has become an updating node. I've been doing some experiments with the new D3 4.0 modules, which expose more internal methods and address long standing problems with mutating your data. With these modules you can, I think, more cleanly use just the parts of D3 you need to do a transition. The two most important I think are the d3-timer and d3-interpolator modules. I put together some experiments with Redux that demonstrate the idea. I'm already working on some new ones because these still don't feel quite right, but they are working examples with no D3 selections at all. The bar, paths, letters, axis ticks, etc all animate by managing the state of the nodes. You can check it out here: https://github.com/sghall/react-d3-transitions All questions, comments, criticisms, welcome. 
Allright, thanks I will keep that in mind.
And now I know why you need bourbon.
No. Anything I learned using javascript had nothing to do with the language itself but the environment; the web.
This function: https://github.com/pakastin/frzr/blob/master/src/setchildren.js ..probably the easiest way to add/remove/reorder children of a html element.
Because code organization is important. I mean, sure, if you're working on a tiny project, go ahead and document.write some shit into a file, or just add a handful of script tags. I've done that before, and I'll do it again. But if you're at the point of needing a tool to manage your source files, use the right tool for the job, and don't reinvent the wheel unless you have a good reason to. Also, if learning and installing another tool is an impediment, that's a good reason to practice at it.
Created a jsom script for SharePoint which will be used as a key button click event in the event registration process. https://github.com/dhawalc/JSOM-EventReg 
You are implying that one can't, or we don't, organize our code but organizing code is a fundamental of programming. There are lots of tools that have existed for decades, on *nix/BSD at least, and Browserify and WebPack are wheel reinventions themselves. 
`reduce` Really, you should get used to all the higher order functions available to you, but you can use reduce specifically to solve almost anything. And once you get used to replacing your for loops with reduce, your whole mind will open up.
&gt; You are implying that one can't, or we don't, organize our code No, I'm not. I'm saying that using mature tools instead of making your own is a good idea, and that one of the reasons for that, in this case, is that they make it easier to keep your code organized sanely. Obviously if you have requirements that can't be met by the existing tools, *then* it makes sense to start building something new. Saying that Browserify and WebPack reinvented the wheel misses this point.
You need to have a function that gets called at a given interval (tick function), that updates the game state. // in start(), set the interval window.setInterval( tick, 1000 ); // this gets called every 1 second, where you update the game function tick() { // move the snake, based on the key input if ( right ) { x++; } // etc // then need to redraw the map with the updated game state } Other thing you need to do, is to keep track of all the snake tails positions. Right now you only have a `x` and `y` which is the position of the head of the snake, but what about the rest of the tails? When you turn the snake to a different direction, the tails won't turn all at the same time, they keep moving until it reaches the position where the direction was changed, and then that's where they will change direction. So you need to keep track of all the tails position, and also have to know the path they'll need to take. You should also consider using the canvas instead of using html elements, its normally better for games, although in this case you can do it in html since it's a simple game.
Broken link
That moment when I came from 3 years C# dev. to learn that in a script language...
Actually more features were deprecated than added. I'm totally on board with this. 
For me, the problem with two-way data-binding is that it can create the messy change routes. Even though there are nice ways to propagate those changes in Angular, the easy (not simple) way to do it is probably going to involve some .on and .emit calls along with some services and factories. You can do it nicely, but the framework encourages bad behavior in the same way that Java and C encourage robust use of null pointers.
Here's an example of adding the numbers of an array. http://jsbin.com/mofimemuvu/edit?js,console,output One piece of advice that really helped me know when to use reduce is: use reduce when transforming an array to another type of data. For example, calculating the sum of a list of numbers is converting an array to a number.
This is one I've been really struggling with recently. Do you have recommended tutorials that helped you out?
I like to transform arrays of objects I'll need to reference later into hash tables (where I can simply reference the object I want by its key in the table) using an empty object as an accumulator. Instead of looping with a for...in and leaving a comment describing what it does, I am already communicating my intent to future me and other devs by using reduce. I also don't have to declare the accumulator outside the context of the for (yes, we could say for(var x = 0, accumulator = {}; ... ) but that's noisy). Anyway, by doing this translation once, I don't need to subsequently traverse the array every time I need to find an object. Maybe I can type out the specific example later when I'm not on my phone...
I work as a full stack javascript developer at a relatively large company that asked me to redo their website for them. I used bitnami wordpress on aws, barely had to touch any php, I wouldn't say I enjoyed it but it was quick and rather painless. Used page builder to do the blogs, Eventually they were able to get a few interns to do that. 
Yes, they can do the same thing in terms of creating graphs. Differences are mentioned by other posters. Tableau is a paid software too and I imagine only your company would purchase it. Maybe it would be better to compare tableau to excel for data analytics.
https://www.reddit.com/r/javascript/comments/4nlwya/lifechanging_tip_on_console_logging_javascript/
Oh wow this is great I just transformed one of my own functions using it. Way more readable.
Neat project, definitely makes me want to play with the Audio apis. Might suggest one change though: function stopeNote() { gn.gain.value -= .05; if(gn.gain.value &gt; 0 &amp;&amp; activeTones.length === 0){ t = setTimeout(stopeNote, 50); } else { gn.gain.value = 0; } } Setting the gain to 0 in an else helps avoid weird JS floating point math issues if you change the values (negative gain seems like it's treated as an absolute value?)
Good tip, I had never heard of this. Also good video, got straight to the point. Found docs here: https://developer.mozilla.org/en-US/docs/Web/API/Console/table Does not work in IE or Safari. 
The two most popular editors for JS seem to be: WebStorm for those that want a full IDE and Atom for those that do not. As far as refactoring, I'm not sure what you're looking for. Are looking for automatic refactoring similar to Resharper or something? To my knowledge, no such thing exists for JavaScript.
Thanks for the feedback! I had no idea about weird floting point issues. I have to read about that. :) Do you mean that gain.value is treated as abs? I guess that is okay for now. Don't want to add more bytes if it _kind_ of works already.. :D 
Thank you for the advice, sorry for the late reply, I've been busy with PHP and college algebra.
They work in Chrome, FF, and Safari. What am I missing?
ye, sorry about that, should have been a couple of hours. edit: fuck, this also sounded like it. anyway, not my intention at all. 
A lot of people recommend this: http://eloquentjavascript.net/
I haven't looked back since starting to use ES6
Very nice. I've heard of this before just never got around to using it. 
Wow! What a unique and impressive way to clear your head. You must be a very gifted individual, indeed.
So is the key the hash? 
Wrote a testing function for testing an implementation of 'el' (a node creation function, based in part on the implementation in FRZR) in the DOM. https://github.com/SeanJM/create-node/tree/master/test
Deleting lines is good
Well, it seems like Tim Berners Lee also likes them, hence his customised standard repo: https://twitter.com/Rich_Harris/status/741615307626840064
This is the best tl;dr I could make, [original](http://www.helicalinsight.com/) reduced by 77%. (I'm a bot) ***** &gt; You can also connect to flat files such as CSV and text as well as fetch information from any API.Helical Insight&amp;#039;s unique and developer-friendly framework enables you to build your own projects and connect to any custom data source using Java APIs. &gt; We support traditional methods of reporting like tabular reports, cross tab reports, dashboards and geographical dashboards, as well as modern methods of data analysis such as infographs, storylines, mashups, what-if analysis et. &gt; For advanced users, the self-service component has ability to add javascript, HTML, HTML5, CSS, CSS3 and AJAX. These allow you to create dynamic reports and dashboards. ***** [**Extended Summary**](http://np.reddit.com/r/autotldr/comments/4nmrz5/helical_insight_first_open_source_bi_tool_with/) | [FAQ](http://np.reddit.com/r/autotldr/comments/31b9fm/faq_autotldr_bot/ "Version 1.6, ~67035 tl;drs so far.") | [Theory](http://np.reddit.com/r/autotldr/comments/31bfht/theory_autotldr_concept/) | [Feedback](http://np.reddit.com/message/compose?to=%23autotldr "PMs and comment replies are read by the bot admin, constructive feedback is welcome.") | *Top* *keywords*: **add**^#1 **reports**^#2 **Data**^#3 **Database**^#4 **tool**^#5
I think a major reason for the downvotes (other than the lack of semicolons and other not-quite-logic-based "standards") is that this is literally a screenshot of two tweets, with no useful content from a /r/javascript perspective. If he had posted a link to the GitHub repo, it might have actually contributed to the subreddit, but this just... doesn't.
Neat synth! FWIW it's not recommended to use timeouts with WebAudio -- the audioContext has [its own clock](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/currentTime) which is more reliable and should be used instead. [Here's a good article](http://www.html5rocks.com/en/tutorials/audio/scheduling/) about timing with WebAudio.
Great little tip.
you should definitely use the tools available to make your goal easier to accomplish. 
Hm, I haven't updated the repo in a long time, but it worked for me just now in Chrome 51 on OSX -- do you see the modal when you click share? When you click the icon in the modal, does it change to a check mark? Do you get a console error? 
I don't know what is a microlibrary.
This phone is 1920x1080
I think his point is that his phone has a higher resolution than the stated restrictions. 
Personally syntax highlighting/autocomplete makes me less productive. Except when learning a new language/library. JS is not typed so most autocompleters are trash.
Callbacks. And in Node.js that callbacks received an error param first wasn't a requirement or part of the language - just a sane convention. [EDIT]: Meaning that javascripts syntax is very simple and loose but therefore also extremely powerful and expressive -- however you can easily write bad code if you don't know what you're doing (then again also true for any language...).
If you change the semicolon to a comma in lines 6 and 11, your source goes down to [821B](http://jsbin.com/lisijomule/1/edit?html,js,output) shaving off another 17B :)
np, just forked it
I love it, I played with it along the [Kung Fury OST](https://www.youtube.com/watch?v=EpqaMY_RdAo). s-d, s-d, g-h-j ! Very cool, thanks OP !
No, no-one hires someone who would say they know typescript but not JavaScript, you gotta do both. (They are similar enough that it would be hard *not* to!)
All Typescript still compiles down to Javascript to run. It also interoperates with Javascript libraries, sometimes with a sort of wrapper, but not necessarily. So even teams working mostly in TS will be exposed to a lot of JS. 
I recommend to use canvas an a requestAnimationFrame-based loop. Just clearing the canvas and then drawing the current state is much simpler and also much faster than messing around with the DOM. By the way, your functions should contain a verb. E.g. "addFruit" instead of "fruit".
&gt; no-one hires someone who would say they know typescript but not JavaScript Sure, because people who'd say that kind of thing evidently don't know what they are talking about. Since TS is a superset of JS, knowing TS implies that you also know JS.
Thinking in terms of Delegation rather than inheritance. 
I always had a favorite Bruce Lee quote that I think is relevant here: &gt; Before I studied the art, a punch to me was just like a punch, a kick just like a kick. After I learned the art, a punch was no longer a punch, a kick no longer a kick. Now that I've understood the art, a punch is just like a punch, a kick just like a kick. I read the Wikipedia entry just before I offered my challenge. The problem with this particular definition is that it relies primarily on special pleading. Libraries exist to offer inversion of control, default behavior, extensibility, and non-modifiable code. So do programming languages, operating systems, virtual machines, web servers, etc. So nothing about this definition is particular to things that are commonly referred to as frameworks. Nothing that can be used *objectively* to distinguish frameworks from other things.
Observables and eventemitter to fit any context [craft-observable](https://github.com/SaulDoesCode/craft-observable). also [Crafter.js](https://github.com/SaulDoesCode/Crafter.js) is getting better
Known this for a while, still very cool. Just FYI this doesn't work in IE, and in fact will cause a critical error causing all your JS not to execute. Fucking IE... 
If it's not too much to ask, what are the prime concepts (or methods) react has? Most examples show a component with a render method, props, and rendering + mounting a component (reactDOM.render() I believe). Is that really all there is to it?
So is Wordpress...
it modifies an existing object or function it need not use new as it's not exactly object orientated in that way. it's completely possible to convert a pre-existing object into an observable ``` let myObservable = observable({ prop1 : 1, prop2 : 2, prop3 : 3, }); ``` ``farm.set(key,value);`` but the object method is good idea will implement that. ``` farm.$change('key', (method /* 'get' || 'set' */, key, value, isnew) =&gt; { // do stuff }); ```
thanks for the suggestions I think a lot of people like the idea of diffing so I'll implement newVal and oldVal. 
I made a small change to the 'get' method. Yeah, I like Constructors because they make me feel safe. :) Passing an initial state is nice to.
I never suggested Wordpress. OP mentioned Wordpress. He knows about Wordpress and is looking instead for a CMS that is JS-based.
nice work this is cool, only comment I have is about the UI - would be nice if the keys were positioned similar to the keyboard
TypeScript is a superset of JavaScript, so knowing TS implies knowing JS. For the most part if an interviewer asks you to implement something in JS, you'll just leave out the type annotations and it'll work in a browser or node or whatever. If you know TS well you should feel comfortable putting both TS and JS on your resume.
There's other handy console methods too, like count, group and profile. https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference
Jesus Christ man you've really swallowed the cool-aid. 
Facebook keeps people from communicating? That's not really true now is it?
`JSON.stringify` does not handle functions, since functions are not a valid JSON datatype. All keys that refer to a function are simply ignored. [Your module works fine.](https://tonicdev.com/575c9be6c455fb130052c6e5/575c9d85175fc4120064fd2c)
Thank you I thought I was going crazy but that totally makes sense now.
Something I'd really like to see added is a console function which acts like how an fps-counter would in a game. Continuously display the most recent value of a variable in the same place, it is so very useful when building interaction-heavy applications, like I often do when playing around with the canvas!
Fair point, though it's just silly fun in the end and shouldn't be taken so seriously.
John was a core contributor to WordPress (there are many), but he's definitely not one of the "original developers".
Negative values for gainNode#gain [will invert the phase of a waveform](https://www.w3.org/TR/webaudio/#h-attributes-6). This can be used for instance to create [pulse width modulation in WebAudio](https://speakerdeck.com/stevengoldberg/pulse-waves-in-webaudio).
Yep, OO means object oriented. Code reuse is one of the goals of OO, but it's more complicated than that. JavaScript's version of OO is a bit different from most other languages. Most languages have "classes", while JS has "prototypes" (es6 now has classes, but it's just [syntactic sugar](https://en.wikipedia.org/wiki/Syntactic_sugar) for prototypes). Since you're already using JS, I would totally recommend learning how it works with respect to prototypes, because it's very easy to understand how classes work once you understand prototypes - classes are basically a subset of what prototypes can do. I probably can't give a very good overview here in reddit comments (and I'm really not a very good teacher), but I'd definitely recommend checking out Crockford's book for an introduction to that, and several other important JS concepts.
To be fair calling an undefined method in any browser will throw a fatal exception
Thanks for sharing this, I've been wanting to do something similar recently and this is a great example to follow.
I'd like to thank you once more. I've just finished researching prototyping and you're correct, it's much, much cleaner. Basically, it's the difference in calling it a class and a prototype along with the cleaner syntax. Have a look: http://gyrospring.github.io/ Thank you so much. Oh ya, this was my help: http://www.w3schools.com/js/js_object_prototypes.asp
I use netbeans 8.1 though, and that too works great with JavaScript.
Awesome! Glad I could help.
/u/yesdist did the best thing, using an event listener instead of an inline event handler; however, to answer your question, when an inline event handler is encountered in the code, the function being referred to must already exist; that is, the `script` block defining the function must be above the `body` element, if you wish to keep using that inline event handler.
This is awesome. I use .map and .filter quite a bit, never knew I could use a single function instead. Tip for the future: posting the expected results would be helpful/nice in the future so we don't have to run them in console or elsewhere.
This is clever: is it meant to confirm to this? https://github.com/jhusain/observable-spec
Thanks. I hate videos.
First time to know the existence of console.table
`if ( x = 1 )` is, every time, setting x to 1. Use `===` to compare and `=` to assign value
Longer explanation... `x = 1` is an expression. The expression assigns a value to x and then returns that value. Type it in the developer tools and you'll see "1" `x === 1` is also an expression. It will be true when x is exactly 1, otherwise false. The developer tools will show either "true" or "false" but there was no assignment What's happening is you run `if ( x = 1 )` and the expression `x = 1` (which sets x to 1 and returns 1) is executed first. Now, you have `if ( 1 )` - and since 1 is truthy, the "if" matches and you see the woot text
For the record, we never said anything like that. Vue 1.x can perform better in certain scenarios because of the reactivity system, not because of the real DOM. 2.x essentially combines the reactivity system with vdom to get the benefits of both.
Developer tools -&gt; console section (at bottom, if not there top right menu, show console) -&gt; top left menu of section -&gt; rendering -&gt; FPS meter. This will give you an in-page real time FPS meter with min &amp; max rates as well as graph with GPU resources for that tab. You can also globally enable this ind chrome://flags. Far better than any console output unless you wanted to save the raw frame time data for future use.
Is there something similar for node?
Spoilers: you cannot use this in IE. I only am able to use IE so it'd be nice if someone would put these restrictions in the title. https://developer.mozilla.org/en-US/docs/Web/API/Console/table
Lol same here good sir. Hope your education is going well!
I like Node.js but holy shit would I not get in a spacesuit that was running it.
Wow, Atwood's Law is more true than I would have supposed. 
/u/Combinatorilliance is not referring to a *literal* FPS meter but rather something that can display any arbitrary variable (in an arbitrary scope as well) in real time, similar in appearance to an FPS meter but different in utility.
That would be more useful if, after telling me the one I want is not available, it would suggest alternatives that are. Otherwise, it's effectively no different from just searching npmjs.com directly, where you can actually see all the useless junk that has already claimed the names I'd like.
[Atom](http://atom.io) with the [JavaScript &amp; NodeJS Snippets for Atom](https://atom.io/packages/javascript-snippets) plugin is what I use, and it's just about everything I need. It doesn't do autocomplete, but it does save a lot of keystrokes over time!
Ahhh. That's actually something that has always bothered me. Yeah you're right about watched variables, you have to either enable a breakpoint and manually mash "next" to run the code or mash refresh. I suppose it could be implemented in a dev tools extension, don't know of anything in the standard tools. 
Its all fun and games until some pissed of developer pulls his hyper-small module from npmjs.com and spacesuits start murdering their occupants
This is really, really cool!
"Embedded systems" used to mean VERILOG/HDL/FPGA, which means there is no room for higher level languages. "Embedded systems" now mean low powered arm SOM modules that are effectively traditional computers with plenty of RAM/eMMC. I don't know if people just have a problem with node in particular, but I see no reason why mission critical embedded systems can't use some form of higher level languages/runtimes. C code is easy to have memory leaks, overwrite buffers, invalid pointers, etc.
I work at NASA, and we use Node for a wide variety of use cases, though this is arguably one of the cooler ones :)
Thanks for the reply. 
[removed]
Checkout this youtube channel: https://m.youtube.com/c/readthesource - there are framework creators invited to walkthrough source code. 
This title is misleading. They use node in "ground ops leading to spacewalks," not "in" space suits.
Seems like it's time for me to investigate the circle of life when it comes to the DOM. It's just that typically I don't need that in my work (or react at all for that matter) but there are those hundreds of job offers that require React. Thanks for the outline.
Node is C++ and JS.
What would you personally commend about node instead of other languages used in NASA?
Oh I have a working solution, it's just that when I really need it, it's not instantly there for me :( console.track = (function () { var loggers = []; return function (name, value) { var isFound = loggers.filter(function (logger) { return logger.name === name; })[0]; if (!isFound) { var logNode = document.createElement("div"); document.body.appendChild(logNode); logNode.style.position = "fixed"; logNode.style.left = "8px"; logNode.style.top = loggers.length * 20 + "px"; logNode.innerHTML = name + ": " + value; loggers.push({name: name, node: logNode}); } else { isFound.node.innerHTML = name + ": " + value; } }; }());
&gt; I would not get **of** a spacesuit that was running it FTFY
Why not use TypeScript directly?
Learn and Understand Node.js and Learn and Understand AngularJS do a pretty good job on teaching you how do they work under the hood. They don't teach you how they were made tho
That is a far superior search. I wish this was around a few months ago before I pulled out of NPM.
Have you installed the base sublime linter plugin?
update: spent some more time on it and got it down to 771bytes. :) http://jsbin.com/palobo/49/edit?js,output
&gt; Its all fun and games until some pissed of developer pulls his hyper-small module from npmjs.com and spacesuits start murdering their occupants for the last time, the "pissed of developer" isn't at fault here. It is npm with it ass backward policy of just rolling over to kik that was the problem. They should never have given the name to the messaging company. are you supposed to be /u/mr-nice_guy ? fuck npm 
"Oxygen-Pad"
I think the logic is like this: If we use C, we can take these steps and hopefully not get anything wrong. If we do get something wrong, we can find the problem and fix it. The language and hardware provide clear and relatively simple guarantees in regards to execution times and logical determinism. If we use a high level langauge, we have lost many guarantees that the software will run correctly all the time, and when it doesn't run correctly, we may not be able to fix it without changing to other languages/frameworks/libraries that also give no guarantees.
Yes but it also takes a LONG time and a lot of manpower to program like that. When it comes to non-vitals, getting the same thing done in the fraction of the time is a great idea.
That's what I thought, thanks for confirming.
I add this to my files. It won't make IE work, but it will stop it from causing errors: if ( !window.console ) console = { log: function(){} };
You, or someone over there, should do an ama in /r/programming about the dev environments you use.
Exactly.
Brings a whole new meaning to deploying into the cloud, or continuous integration :D
FYI: I've started a new bookshelf (imprint) called Fun Press that collects great books in Markdown about JavaScript n friends. Using the [Octobook Classics Book Theme](https://github.com/octobook/book-classics-theme) turns the pages into a single-page (online) book. The first books in the series include: 1. [You Don't Know JS: Up &amp; Going](http://funpress.github.io/up-n-going) by Kyle Simpson 2. [Babel User Guide](http://funpress.github.io/babel) by James Kyle et al Happy reading &amp; coding. Cheers.
I think ES6 tail call optimization works in safari.
Thank you! &gt; Definitely. Check the link from /u/mdiez2. You will probably want to start with something basic, framework (e.g. Express) + db (e.g. Mongo) would be more than enough to build what you described. I keep hearing about Express, Mongo when searching about this topic. Are these like add-ons to Node? Something that makes it easy?
Still doesn't give me information nor options I've really been wanting for package results: Show / Filter by / Order by: * Downloads in last 30 days * Amount of GH stars * Last updated date * Quality (mildly amusing that this is calculated but isn't sorted on) * Dependency count * Dependent count * Past version count * Current unstable/RC version * Direct GH link so I can bypass going to npmjs I quite like that "Quality" number though
https://github.com/prettydiff/prettydiff/issues/291 In summary: * I believe it is dangerous for vital infrastructure to managed by a dictator willing to dictate my opinions to me. * There are at least two critical defects that make the infrastructure completely undependable. * The convenience of dependencies in the system has resulted in extreme over-reliance in many critical applications upon the system itself to manage those applications' internal application architecture. The combination of points two and three make NPM too risky for the value offered, but the first point was the straw that broke the camel's back for me. I have an idea to write a URI scheme for modules, so that resolution is address based instead of application based. That way modules are universally and uniformly accessed in a way that is self managed, and public or private provided resolution of the given address. I still need to write this up though.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/tinycode] [Had to clear my head so spent an hour creating a synth below 1kb just using JS. \[\/r\/javascript x-post\]](https://np.reddit.com/r/tinycode/comments/4nqqhg/had_to_clear_my_head_so_spent_an_hour_creating_a/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
UglifyJS maintainer here: we just merged full support for generators. ;-) Also, feel free to inform us of important missing features. We're working towards feature-completeness, but ES2015 is large and we can use all help we can get.
For now the results are sorted according to their relevance and total score. Our idea is to allow the user to define the weight of each score (quality/maintenance/popularity), abstracting all those attributes you listed. This is already implemented in the API, but we are not sure about the UX... For better discussion: https://github.com/npms-io/npms-www/issues
&gt; abstracting all those attributes you listed That's kinda my point though, why not start with giving me this information and then abstract it away later and tweak the results with that? Currently this doesn't offer me anything different than the other ways of searching NPM, I still have no search site that gives me the above information that I actually want to see when finding packages
webpack for transpiling, module bundling, static asset management and code splitting. crazy powerful tool
Both come to Node as packages, so they may feel like add-ons, but it's just a form of distribution. Express is a framework, like Laravel for PHP, Rails for Ruby or Django for Python. You hear about it a lot, because it's the most popular one, one of the longest running, with well established position. It's not like it's the best and only, there are other very good frameworks (e.g. Hapi, Koa), but due to its popularity, Express has lots of resources useful to people who are starting out (big community, many tutorials, easily reachable solutions for well-known issues etc.). Mongo is a database, like MySQL which (for 99%) you are using with WordPress. It's a different concept, a NoSQL database, has its pros and cons - may feel a bit weird after coming from relational database, but it's very nice to work with once you adjust your thinking. Of course, you can use other DBs with Node, it's just a matter of a driver. 
Yes, I know it was broken on Firefox, you are totally right on it. Regarding the double scrollbar in Chrome, it was happening because we wanted to stick the table of contents when scroll down, that's why. It can be improved? of course, the whole page can be improved, actually you can do it, the page is also open source https://github.com/devlucky/devlucky.github.io Just next time better find a better word when you talk about other people work, or at least try to understand why things work like that, I personally don't care about it. The issue is fixed now btw.
Yes, you should implement generation of the spin result on the server side. As an optimization in the future. If it matters in your case... you can generate bunch of "results" to client in one go. Then rate limit how quickly they can get these batches (to prevent bots). I would only bother with that if you're targeting mobile where the user could be on a unreliable connection (slow, latent) as way of masking that issue to provide a better user experience.
This looks interesting. Thanks for sharing!
It's all fun and games until the company that makes Orbit gum decides to port their web site to Node and demands NASA rename their open-sourced trajectory modules. Unfortunately nobody tells NASA and suddenly mission control screens are showing gum ads instead of escape velocity.
I just had a serious incident happening to a relative, and when bad shit happens to me, I tend to flee into some silly hack, and sometimes it feels better to chat with other people about it. I guess I should've spent another hour thinking about the god damn title. :)
The bare minimum. Lots of tools tend to hinder my productivity. And it all depends on the project. That being said, for Angular + Salesforce stack I use: git, Gulp, Webpack, a text editor (Sublime/VSCode), unit test suite (Karma+Jasmine), e2e test suite (Protractor), Jenkins, Chrome dev tools, jsforce for Salesforce deployment, MavensMate for Salesforce development.
it sounds like it should be npms - node package manager secure
Thanks! So, maybe the naming is confusing you are right... But basically the goal of Kakapo is to replicate any kind of Api, doesn't matter if is yours or a 3rd party one, so, Kakapo gives you some tools to try to make that easy. Regarding Nock, mmm I think the main difference is that Kakapo.js runs in the browser and Nock in the server? but anyways Nock looks like a great library which actually have more features and almost the same goal as Kakapo! Thanks for the feedback
You should use webpack. Npm can't serve anything over http for you. Npm can be used as script runner, nothing more really.
Thank you, these are great resources
There is *nothing* you can do to guarantee a client-side value has not been hacked into existence. As the others have said, you need to do these calculations on the server and display them in the browser.
&gt;Are these like add-ons to Node? Something that makes it easy? What you want to look at is [npm](https://www.npmjs.com/). Also, I recommend [yeoman](http://yeoman.io/) if you want to make the initial setup easy.
I can't decide if recommending Mongo is the right call. On the one hand, for someone at this transitional point, it's the easiest choice, and its shortcomings are not likely to get in their way. But man, oh man, does it become a pain in the ass if your project ever needs to grow in complexity.
Even today, new packages are not namespaces by default. Even github puts everything as username/packagename but npm won't do that. And the butthurt node "developers" are downvoting us. 
Maybe something like [dokku](https://github.com/dokku/dokku)?
Does something like this exist to be installed? A one time fee is a-okay, 99$ a month is pretty steep to me.
Would be interesting to see the response there. JavaScript in /r/programming = instant downvotes.
Hmmm yeah when I did eslint --init it asked me if I wanted to follow a popular style so I chose airbnb but I haven't seen anyone come across my error so I'm guessing most people create their own eslintrc file on their own? 
Check out: http://youtube.com/watch?v=0nh2EK1xveg 😉
PLEASE set this up with an API. There are many systems which use separate npm modules for plugins which would benefit greatly from such an API. I would donate $5/mo for it.
How about [docker-machine](https://docs.docker.com/machine/)? From the ```docker-machine``` overview &gt; Docker Machine is a tool for provisioning and managing your Dockerized hosts (hosts with Docker Engine on them).
The frontend already uses an API, but for know it's blocked only for https://npms.io. Code: https://github.com/npms-io/npms-api/blob/master/lib/controllers/search.js#L5 Donations: https://salt.bountysource.com/teams/npms :P
Donated, and opened an issue to keep track of progress on the open api idea: https://github.com/npms-io/npms-api/issues/23
There are a TON of options. The simplest and easiest Ive found is [fleet](https://coreos.com/fleet/). &gt; With fleet, you can treat your CoreOS cluster as if it shared a single init system. It encourages users to write applications as small, ephemeral units that can easily migrate around a cluster of self-updating CoreOS machines. The [step-by-step tutorial](https://coreos.com/fleet/docs/latest/launching-containers-fleet.html) is a pretty great place to start and explains everything you need to know. If you want to go bigger and have more fine-grained control over orchestration, then Id look into something like [Kubernetes](http://kubernetes.io/) or [Rancher](http://rancher.com/).
There are a TON of options. The simplest and easiest Ive found is [fleet](https://coreos.com/fleet/). &gt; With fleet, you can treat your CoreOS cluster as if it shared a single init system. It encourages users to write applications as small, ephemeral units that can easily migrate around a cluster of self-updating CoreOS machines. The [step-by-step tutorial](https://coreos.com/fleet/docs/latest/launching-containers-fleet.html) is a pretty great place to start and explains everything you need to know. If you want to go bigger and have more fine-grained control over orchestration, then Id look into something like [Kubernetes](http://kubernetes.io/) or [Rancher](http://rancher.com/).
By creating a variable for gn.gain and editing some CSS you can get it down to [754B](http://jsbin.com/fiwasuveko/1/edit?js,output) :)
Have you considered writing an intermediate "SDK" library for connecting your own client to the server? This would ensure than no matter what you choose for request/response, software depending on the API would still work if using the latest versions.
I use: Editor: Atom Shell: Fish / iTerm REST client: Paw System sync: Mackup Cloud: Dropbox, Amazon Cloud Drive, iCloud VPS: Digital Ocean VM: Vagrant 
Technically this belongs to you to. It's open source, it belongs to everyone. Do you want to help them?
Sublime Text, Atom, Git, Grunt, SASS, NPM scripts
what I meant was he acted like a douche in this instance, going straight to "go fuck yourself" mode. If he'd have simply responded "Nah I think i'm going to just keep it. Thanks for asking tho", how much would the ancillary conversation have changed? But that's a lesson in individual manners that is purely secondary to the grand hypocrisy. 
Yes, and for simple maps/filters I definitely would never suggest someone use `reduce,` but it's useful to illustrate that most array transformations are simply a specific type of recursive fold. While this kind of performance isn't usually important for the kinds of applications we right in JS (i.e. we should prefer declarative code even if it's slower), it's worth noting that that on a large collection, the `reduce` implementation of something like `some` is silly because there is no way to break out of the loop without throwing an exception.
I have not, but a quick Google tells me [yes it is](https://developer.apple.com/library/mac/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW1), [this](https://github.com/dtinth/JXA-Cookbook/wiki) appears to be a nice introduction to it, and here is a nice looking [iTunes](https://www.macstories.net/tutorials/getting-started-with-javascript-for-automation-on-yosemite/) example.
pointers are still used however they generally allocate a big block at the start of the program and handle that manually.
This is strange to me, because we already have a design pattern that is relatively the same. You're creating new keywords here which increase the cognitive overhead. Here's my "2 cents" let o = new Observe({}); o.addEventListener('set', function (event) { // event.which --&gt; 'path.that.was.set' // event.value --&gt; 'value' // event.history[0] --&gt; 'value' // event.history[1] --&gt; 'previous-value' }); o.set('path.that.was.set', 'previous-value') o.set('path.that.was.set', 'value') This is consistent with the existing JavaScript API, it's intuitive and takes advantage of pre-existing understanding. I like keeping things simple. We could add some "sugar" like this. o.addEventListener('set:path.that.was.set', myFunction)
thanks for the clarification!
I run JS from the command line using Node.js for automation across various OSs including OSX. Here is an example of an automation script I have written to do various things: * https://travis-ci.org/prettydiff/prettydiff/jobs/137149560 - demo * https://github.com/prettydiff/prettydiff/blob/2.0.4/test/lint.js - code
Ah that makes sense. Thank you for clarifying that for me. Is there any reason you wouldn't want to check them in *as* you develop (and not just after main development has completed)? At work we don't check them and this has caused us problems before (some have been alleviated by using npm shrinkwrap). But when we load the project into our CI build we need to redownload/retrieve from cache all the dependencies each time.
They don't count unless they are from the official vuejs blog, or written by me. If any of those claim what you said, they are wrong.
Wow that's really cool, my big complicated project with generators seems to work on the latest version of your harmony branch now. Much appreciated!
You could use duckduckgo for that: https://duckduckgo.com/?q=npm+react&amp;ia=software
Git, NPM, Sublime, GitGutter (ST Plugin), JavaScript Next (ST Syntax), TodoReview (ST Plugin). Also, this is a great Git bash prompt: https://github.com/jimeh/git-aware-prompt
Froala plugin for text editor, React developer tools is a Chrome extension DevTool.
I think npm is more interesting thing , I can learn 
As a newer developer I was looking into design patterns and when I came across the observer pattern and pubsubs the idea of redux started to make a lot more sense to me. What are the key differences?
Thanks for the reply. :)
So ExtJs is not dead and somebody is using it? =-O Last time i checked, forums were empty dead after releasing version 5...
Posting this thread doesn't mean you own this part of /r/javascript. His comment wasn't helpful to your goal, fine. He's still allowed to comment. In fact, you probably still want him to comment, because why would he be asking that question unless he's working towards trying to help you? The fact that you're getting defensive about this suggests to me that you're trying to do something illicit.
VS-Code, Atom, eslint, babel, bash, vue-devtools, npm cli commands, postman, karma, nightwatch, jasmine, webpack
Agreed, docker compose sounds like what OP is after.
There is currently no protection against memory consumption or execution time. The point of the sandbox is to protect the main application scope and the environment from suspicious code, for this purpose Jailed forks into a subprocess, runs the code in a new context using the mentioned vm module, and provides a convenient API for the application to interact with the sandboxed code. You are right in that possible security issues of the vm module might be a problem, I will have to investigate on this (and will also appreciate any hint concerning what exactly is insecure and how can it be worked around).
Yes, they're platform dependent. 
That's what he did, until they responded with threats.
What, users can just pull up the dev tools and delete the nodes that block the view. Get with it plz.
Haha that's bad.
I suppose [you already did it?](https://github.com/npms-io/npms-analyzer/issues/48)
If I scroll slowly on mobile it spazzes out and goes up and down
[this video](https://www.youtube.com/watch?v=8aGhZQkoFbQ) is a really good video to watch, because he gives a real world example of how the event loop works with a visual breakdown. but that for loop, if its doing something like console.log(i) will absolutely block all subsequent requests until its complete. to do a asynchronous version you could do something like in the response of [this question here](http://stackoverflow.com/questions/26615966/how-to-make-non-blocking-javascript-code) here is my [example code](http://pastie.org/10874734) so, to answer your question, node js will not create a new thread, the event loop will become blocked entirely, and no one will be able to get a response back from your server. thankfully, for loops are (generally) not a huge cost in terms of blocking. 
yup i agree. which is why im looking for supplemental material that i can be reading up on outside of the classroom. maybe it wouldve helped to provide a list of topics im currently studying: **JavaScript, HTML/CSS, Node JS, Express, MongoDB, REST API, React, Redux, service-side React, user flow.** any highly recommended books on any of those topics would be great. just trying to get the most out of my time at the bootcamp. thank you
Thanks. The loop is just a dummy thing I've placed to understand what happens when blocking or time-consuming things are happening in the script. Instead of loop, it could be accessing a file or a mongodb database or even just doing some computation. &gt; Unless your server is configured to auto-scale Is the default Node.JS configuration not enough to scale as many new incoming requests? What happens with auto-scale?
Relevant question: there is no need for something like a GIL (Python) because there is an event loop right? Have there been any efforts/experiments to make JS parallelized? Web workers provide a form of parallelization I believe, because they're essentially relying on no side effects?
It took me 5 minutes to break this "sandbox" and access main process. [Related issue](https://github.com/asvd/jailed/issues/33).
That second one was recently fixed: &gt; let a = 1; &gt; a &gt; -&gt; 1
Yes we have created it meanwhile, and it's already fixed. Thanks for reporting.
Ok. How does the performance of this async i/o compare to synced i/o of traditional languages like PHP/python/etc.? Is it always better than them? (Agreed that async makes your app non-blocking and fast, but there is also some overhead of switching contexts, right? I'm interested to know how does it pan out as the application starts scaling).
Profile it in your specific use-case. Not using these functions because of performance-concerns would be "premature optimisation".
Hard to tell at my level. Javascript is mostly an event-driven language, and as such it is certainly well optimized in this way. I believe you may have other issues before this becomes one. As an example, sync or async, file i/o is always slow. If you can, build a cache system in memory for those data.
Okay. Thanks!
Editor - Atom * Slowly migrating from Sublime text * I find it has better code completion, syntax highlighting and plugins * I started using it this month and found there was no slowness (I found it slow a few months back) * Sublime-&gt;Atom migration was frictionless. Tried the same with VSCode and didn't like it. * I still use Sublime for handling large text files and todos (PlainTasks plugin) Browser - Chrome * Extensions - JSON Formatter (formats JSON "pages"), React devtools * USB debug Commandline * fasd * Ranger * Custom aliases for commonly used commands Misc * licecap - Make cool screencapture gifs. Useful for sharing bugs with others etc
This depends on a lot of different factors. There is some overhead to a for loop that methods don't have, but a for loop can be broken before complete.
Still an area where I'd want to keep Node.js the fuck away from. And JavaScript in general, for that matter.
For the back-end I can recommend Express, PostgreSQL as a database and knex as a module to connect with the database.
Yes, loops are faster. map/reduce/filter can have method call overhead (sometimes not, if the function gets inlined by the JIT engine), and have a bunch of other overhead to handle obscure corner cases like sparse arrays and getters. There are even [libraries](https://github.com/codemix/fast.js/tree/master) that reimplement map/filter/reduce for the sole purpose of providing faster drop-in alternatives to those methods. However, beware that loops that declare variables using `var` share context between iterations, which can be a source of bugs if creating closures within the loop for (var i = 0; i &lt; elements.length; i++) { elements[i].onclick = function() { alert(i) // bug: i is always elements.length } } Another thing that is worth mentioning: there are old articles around the web benchmarking several convoluted ways of writing loops (caching length, reverse while loops, etc). These days, performance-wise, those techniques are obsolete, because JIT engines are now smart enough to correctly optimize idiomatic loops. If you're using loops, always use them idiomatically. Anyone that tells you to prefer map/reduce/filter is coming from the point of view of maintainability: map/reduce/filter are generally less "noisy" (read: they don't explicitly require a `i++`), though frankly, both map/reduce/filter loops and for loops are quite readable and maintainable (see e.g. lodash source code). I'm going to against the grain here and say: don't waste time "profiling" for loops vs map/filter/reduce. For loops are faster. Period. With that being said, loop mechanics are likely the last thing you need to optimize. First you should look into algorithms to reduce the complexity of your operation (e.g. sometimes it's more efficient to use a hashmap for its fast lookup properties than an doing a linear scan of an array multiple times); second, seek to pull things out of loops (e.g. sometimes doing a step unconditionally to all items and undoing it once is faster than testing for the condition on every iteration, sometimes you can memoize parts of the loop body, etc); third, look for ways to reduce the cost of the loop body, e.g. break/continue early rather than late, simplify convoluted if/else branches, memoize, etc. When doing these other optimizations, then *do* profile. Unless you're writing a library that is highly sensitive to performance (e.g. a virtuam dom library), don't waste time optimizing if you don't actually perceive any benefits to doing so. Most important of all, if you're sacrificing idiomaticness for performance, alarms should be ringing in your head.
Don't agree with the directory layout. The high-level breakdown should be by the individual app, not the module types. Each app should have its own directory. Instead of app/components/{name}/stuff it should be apps/{name}/components/stuff 
For Ajax, the most popular library is superagent. For disaying data, among popular options only vue.js fullfil your requirements.
You got that backwards, it's the methods that have extra overhead. Test it.
I was giving an example that side effect and response object might be unnecessary complicated with you simply want a server that returns something. Could you give me an example of a feature fun-http cannot provide when you need or a problem it claims to solve but didn't?
The most common AJAX-only libraries are probably Axios, Superagent, and the Fetch standard or one of the polyfills. I personally have been using a small library called https://github.com/albburtsev/fetch-please, which I'm pretty happy with. There's also a nice comparison of AJAX libraries at http://andrewhfarmer.com/ajax-libraries/.
https://libraries.io/search?platforms=NPM allows for lots of those sorting options
&gt; map/reduce/filter are generally less "noisy" That's another thing that's changed quite a bit. With `for .. of`, you can rely on iterators and don't need to do all that silliness with counters. The inclusion of block-level scope also makes for loops way, way cleaner than they used to be. They'll also work on anything with a `Symbol.iterator` defined, so your function could accept arrays, NodeLists (e.g. from `document.querySelectorAll`), Map, Set, etc. Of course, as soon as you introduce iterators, you're paying a small abstraction penalty for those too. At very least, using the `forEach()` method seems antiquated. Don't: ``` mydataset.forEach(val =&gt; { ``` when you can ``` for (const val of mydataset) { ```
I know but it would be weird for the user that 3/64in = 1.19mm and 1mm = 3/64, no? I have to keep it consistent. 
If you're only trying to replace a single `&lt;br&gt;` instance, then try the following code: var str = '&lt;p&gt;Here is a &lt;br&gt; string &lt;/p&gt;'; var newString = str.replace('&lt;br&gt;', '\n'); Be careful with the quotation marks!
That's exactly what I have tried... but when I view the source of the page... it is rendered like this... var str = '&lt;p&gt;Here is a &lt;br&gt; string &lt;/p&gt;'; var newString = str.replace('&lt;br/&gt;', '\n'); SOMEHOW, the replace string is having a '/' injected... Was there a solar flare today??? This shit is crazy.
Still doesn't work. I even tried to do replace('&gt;','something') to see what would happen... it is executed in code like so... replace('/&gt;', 'something') It's injecting / every time there is an open &gt; like that.
I guess I don't know really. I mean for example if you look at the ES6 compatibility table it's very spotty in terms of JS functionality being implemented across browsers.
In my opinion (I'm not an expert on Node.js) this code will block the event loop because it isn't a I/O code so it goes to the execution stack and stays there until all the JavaScript code is executed (V8 the engine that executest JavaScript is synchronous). If it is an I/O code (DB access, HTTP request, TCP, etc) it goes to a different execution stack managed with the integrated library called uv (I think libuv is asynchronos) and then is returned in form of JavaScript to the main execution context managed by V8
* there's syntax errors in your example code (missing quotes) * your 2 snippets of sample code are exactly the same (except the 2nd has a single leading space) Based on both code samples being identical, I'm not exactly sure what your issue is? It's working just [as expected](http://i.imgur.com/3siew6I.png) for me...
[Image](http://imgs.xkcd.com/comics/standards.png) [Mobile](https://m.xkcd.com/927/) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini\-USB\. Or is it micro\-USB? Shit\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/927#Explanation) **Stats:** This comic has been referenced 3036 times, representing 2.6528% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d47hsvu)
Understood. However, I this is a string variable and not an html element yet. So it just has &lt;br&gt; in the string. When I try to replace in JS, it doesn't work. Even if I do this.. replace('&gt;','something') it will be replaced with .replace('/&gt;','something') 
I'm partially talking about things like "const" and default function parameters, I don't think those are related to the DOM are they?
Have you done any ReactJS tutorials? Properties are a pretty basic concept to React and the tutorials will explain them.
Thanks raheelak!
Even if there were a standard JS engine used cross-browser, you'd still get this problem because browser vendors would have to update the version of the engine they're using, and some browsers are on a much slower release cycle than others.
&gt; At very least, using the forEach() method seems antiquated I disagree for the case where you have a reusable function that you can plug directly into the loop. I'd prefer `someArr.forEach(addToTable);` over `for (const val of someArr) { addToTable(val); }`
It's cool that you've pointed out the issue, I really appreciate. As mentioned, the point of the release was finalizing the solution across browsers' sandbox implementation, and as for Node.js - the existing solution was built-up more than a year ago, at that point I used the safest approach I could figure- and google-out. But now I think I'm going to cover this case as well. In fact, Jailed provides the convenient API for the sandboxes built as described at the bottom of it's readme, and it's up to a user to decide wether he considers such a sandbox being safe and suitable for his purposes.
Render functions take in data and return a view. Props are your arguments.
what do you mean? afaik `const`and function parameters are the same across most every javascript engine.
Well, this one is mine. :) But seriously, from what I can tell my project: 1. Allows namespaced actions 2. Action names flow from reducer names so you don't have ever write them. 3. Provides some default patterns/reducers for CRUD and collections. 4. Has low cyclomatic complexity since the reducer methods are in a map instead of a switch statement. 5. Is small (around 100 lines). 6. Includes tests and documentation. 7. Adheres to flux standard actions. The ones I tried didn't have all this at the time I wrote it. Not saying they don't now. But if you'd try it out and let me know what you think, even if you hate it, I'd really appreciate it. This is my first OSP.
At least, this seems to be free... But I agree.
Does not work on mobile. Would be more perfomant using animate.css mixed with some scroll spy? Edit. It is working now on lightning browser, not sure why it didn't first.
If you dispatch an action into Redux, all reducers see that action and are able to act on it. It's not restricted to some naming pattern. If you use namespaces in reduxr, your reducer methods can have simple names like "create" without conflicting with other reducers of the same name.
I would recommend `ajax` from jQuery or `fetch`. `$.ajax` is simple, powerful and battle tested. `fetch` is natively supported in most browsers and there is a working polyfill from Github where it is not. My issue with fetch is how it handles passing `GET` parameters (spoiler alert: it does not). That is literally the only reason I still use `$.ajax`, because I can just pass my data to the `data` key, and jQuery handles it whether I'm `POST`ing or `GET`ing data. I wouldn't buy the claim that superagent is the most popular, as I've never even heard of it until a few months ago, and the API quite frankly looks convoluted as per the README. Another point is that `fetch` and `$.ajax` work natively with Promises, which will allow you to use `async/await` and get rid of all your callbacks, whereas [superagent requires a plugin for that](https://github.com/jomaxx/superagent-promise-plugin). Unless you're programming for low bandwidth cell connections and/or low end hardware, I wouldn't be overly concerned with weight. Build your app first, then optimize :)
Works fine on mobile chrome over here…
Hello friend! First, whenever you post code, please indent your code so that the reddit formatting kicks in. You will need to indent by four spaces on each line for reddit to recognize it as code. Your code would look like this. question = 2; var questionLeft = ' There are ' + question + ' more numbers needed'; var firstNumber = prompt('What is your first number?' + questionLeft); question -= 1; questionLeft = ' Only ' + question + ' more needed'; var secondNumber = prompt('What is your second number?' + questionLeft); alert('Now for your random number!'); var answer = (Math.floor(Math.random() * secondNumber) + firstNumber); alert(answer); Much better. Now this definitely outputs a "random" number. What is your real problem here? You said something about it being far greater then a max number, but there is no indication of any kind of a max input here. Could you clear this up?
Not trying to correct You but, as I understand, in REST theory you can't pass arguments to GET - server response should always be the same. 
 &lt;audio id="player" src="music.mp3"&gt;&lt;/audio&gt; &lt;script&gt;player.play()&lt;/script&gt; But seriously, don't add audio to webpages, it's really tacky.
If he wants autoplaying audio, there's no js necessary: `&lt;audio id="player" src="music.mp3" autoplay&gt;&lt;/audio&gt;` That said, sure *autoplaying* audio is tacky, but that doesn't necessarily apply to all audio on the web.
These were my thoughts as well. Thanks. :)
jQuery is just a library for manipulating the DOM, you're still writing JavaScript. It's used now (as in 2016), when you want to support older browsers without polyfilling manually or want a few of the extra features provides and don't mind the extra weight. It helped a lot when there were major discrepancies between browsers, especially IE, but it isn't really an issue anymore. Version 3 was just released the other day and I'm actually not sure what good reason you'd have to use it today over another framework that abstracts the DOM through some other method, like Angular, React, Ember, or Vue. Even with all of these, you're still (mostly) just writing JavaScript. The modern way to build an interactive page, would be to use Web Components rather than manipulating the DOM. Anyway, here you go: * Do you find javascript easy or hard to learn? Explain why? Easy to get started, but difficult to master. There are lots of issues with asyncrhonization, single threadedness, prototypes, weird dynamic typing, and lots of other small things that can cause a big headache. * Would you rather use a framework/library such as Jquery rather than plain javascript? Why or why not? Not jQuery, but if you're trying to build an interactive application, then you should absolutely choose a framework. * Did you often times depend on jquery to get whatever project you were working in done? Yes, when I had to support IE8 and below it was the best thing ever invented. Most don't support that anymore. * Over the years what made you lean towards one over the other? jQuery and JavaScript is the same thing. jQuery is just a library. Some functions that you can use to make your life little easier. Nothing more. * What kind of situation was Jquery or Javascript the ideal to use? When you want to build an interactive UI, that needs to use web technology. Today, that would be the large majority of UI's. 
Your issue stems from type coercion. When you multiply a number with a string the string gets coerced into a number. 10 * '10' #=&gt; 100 But when you add a number with a string the number gets coerced into a string: 10 + '10' #=&gt; '1010' It's a common pitfall in JavaScript. The answer is to parse your user inputs from those prompts. firstNumber = parseInt(firstNumber); Etc.
You shouldn't be writing anything the "jQuery way" in 2016, as in the whole paradigm of manipulating objects and using things like `$.map`, `$.each`, or creating elements through methods like `$('div').attr({id: 'crazyId'})`. If that's what you're asking. There are native methods that work just as well, but don't have any dependencies.
In theory - yes. But in practice, many APIs out there (including those claiming to be RESTful) return different responses depending on the query string. Also as a side note, my guess is that REST is going to be replaced by [GraphQL](https://facebook.github.io/graphql/) or something similar soon. At least for retrieving information (which is what REST is mostly used for), GraphQL seems so much better.
Ok thanks. Do companies often times have developer learn jquery to save cost and time? 
There is a lot written using jQuery. There's nothing to really "learn". It's just a library. You use libraries to save cost and time, yes. 
I can haz? or rather, when can I haz?
Doesn't jquery make the code easier to maintain and to debug for developers this is what I often hear. And if your a experience I would be interested in conducting a interview with you about this.
Ha! The documentation is certainly lacking: * [ApplePay JS Data Types](https://developer.apple.com/reference/applepayjs/1916082-applepay_js_data_types) * [ApplePaySession](https://developer.apple.com/reference/applepayjs/applepaysession) The only block of code I could find [has a typo.](http://i.imgur.com/joh6Jg6.png) 
Not complex modern applications, no it does not. 
In my experience they are not. Default parameters that work in one browser throw an error in another.
So many of these technologies are new/constantly evolving. I just don't think you will find many "books" on the subject. The react how-to is how I start and I found it the best approach. One bit of advice (that I have proven to myself over and over again), don't try to learn a new technology like redux and react at a high level. Start with the most basic app you can think of, make that and then expand. I tried to learn redux with react-redux and redux-thunk all at once and I wasted a lot of time. Start small, get bigger. It often means you can't implement it on the project you want straight away, but it is worth it.
Thank you for the tip! My problem was the random number wasn't coming in between firstNumber and secondNumber but the comment below cleared things up. Thank you again. 
Worked perfectly, thank you!
Please don't.
true. thank you!
That regex seems really impractical. 
If its before render you cannot determine the height. The height is determined, by the browser, as a result of rendering. You could render the element off the page, gather its exact height with something like `node.clientHeight`, and then move it into the viewport when ready.
Not really mobile friendly eh. That course pop up obfuscates the content and can't be closed (iPhone 5s)
JSDoc can document ES6+ code also, but that looks like a neat tool.
Can somebody explain this: So managing script ordering for mid-size projects got tedious, and in a large enough project (50+ files), it became possible to have a dependency relationship for which there wasn’t any possible order that would satisfy all the dependencies. How can it be impossible to do it with script tags, but not impossible with AMD?
¯\\\_(ツ)\_/¯ 
you win
Not sure. Maybe lots of modules rely on lots of others, all intertwined. 
can you throw something in a gist or a jsfiddle? i'm not familiar with what you mean, but i don't disbelieve you -- i'd like to see what you've experienced.
Of course now I'm having trouble reproducing it... I just upgraded my OS so the browsers are all different. But for example if you look at the ES6 compatibility table it shows default function parameters are supported in chrome 52 but not safari 9. Something like this used to give me errors in chrome but not firefox: https://jsfiddle.net/0p6z1h4L/
Nothing is simple in Extjs
Parallelization != speed. I just meant: it lets you do many things at once. And I say parallelization because we have an event loop so we can already so stuff that is essentially non blocking. But on your note about speed. Does that mean that workers are all in the same thread? Because I can imagine huge performance gains for some very long running tasks.
Thanks for that info. I understand that `libuv` handles the async i/o of files for nodejs. But what about other things like database connections (mysql, mongodb, etc.) and things like message queues? Are they all async or not? Because if they aren't my node app is going to crumble beneath the load since its running on only one thread!
&gt; If you can, build a cache system in memory for those data. Yeah, for an app I'm about to build, I'm thinking along the lines of using redis for in-memory storage instead of persistent ones like mysql, mongodb, etc. redis will drastically speed things up, but my RAM cost is going to skyrocket! Besides, with usual web-hosting, you hardly get 1-2 GB of RAM in the basic package which is going to filled soon. Is there any strategy to get best of both worlds (persistent and in-memory storage) such as a cached database between mysql and my node app? Can you give any examples of such?
Check out Aurelia instead of Angular. I used it for a project at my last employer and was really impressed with it. Much cleaner code and lightening fast.
Is it possible to do some sort of application level parallelization? For example, can I host my main app on port 80 and a different chat app based on socket.io on say port 8080 on a different node instance? Does such a thing work?
Just ask /u/sebmck :)
&gt; What grinds node to a halt is when you perform intensive CPU bound calculations Which is usually not the worry in about 99% of web apps. But maybe, if you are doing an ERP/Accounting system and it comes to doing some math like FIFO/LIFO stock valuations, maybe Node.JS will slow you down in that case. But I think there can be strategies like keeping that cpu-bound stuff in your mysql procedures? **edit** Just came across [this article](http://neilk.net/blog/2013/04/30/why-you-should-use-nodejs-for-CPU-bound-tasks/) which seems to suggest that Node.JS can be good for CPU bound operations under certain circumstances.
&gt; When choosing a module loader for your next project, be careful of falling prey to analysis paralysis. Try the simplest possible solution first: there’s nothing wrong with skipping a loader entirely and sticking with plain old script tags. If you really do need a loader, RequireJS+Almond is a solid, performant, well supported choice. Browersify leads if you need CommonJS support. Only upgrade to a bleeding edge entry like SystemJS or Webpack if there’s a problem you absolutely can’t solve with one of the others. The documentation for these bleeding-edge systems is arguably still lacking. So use all the time you save by using a loader appropriate to your needs to deliver some cool features instead. I disagree. Sure, a simple script tag will suffice in small cases, and that's fine. But breaking the other loaders into the tiers the author does is just wrong. AMD is dead. AMD is complicated. AMD is hard to write universal JavaScript with. Do not use it for new projects. Period. WebPack's documentation is just fine.
This is why clustering is highly suggested (whether though node's built in cluster utility or using some kind of external process manager). As long as CPU bound operations are kept in moderation, 8 processes on a box will still be able to handle requests even if one or two processes are hung up at any given time. Obviously if all you're trying to do is calculations, Node isn't the best tool for the job, but I agree that in practice being CPU bound is much less of a problem than it might seem. Edit: These kind of operations can also be mitigated well simply by breaking up calculations into smaller pieces and liberal use of process.nextTick.
yes. basically 1 single API call gives me a gigantic multiple page JSON file...
nah, you can hard-code data into the API layer if you want
Look into an in memory cache like Memcached or Redis. You'll benefit from very fast read times and as long as you don't mind warming up the cache every once in a while.
Then maybe mongodb or something would be good so you can save the JSON into it without converting into tables and rows, and still get better query tools and stuff than plain JSON.
Thanks, will take a look.
That's a fun bit of trivia, but I wouldn't use that in production code. You're better off doing: num = num * 1; if you want to force coercion through an operator, but I don't recommend doing either of these. Just stick to the parseInt and parseFloat functions as they show intent better.
Oh I totally agree, just fun to screw with JavaScript's type coercion.
1.) When you render a React Class you can pass it props, which are simply values that the class may use to render or use as an event listener. As for your specific question: there is a prop called 'items' in TodoTimes that takes a list of todo items. This is the list of items that it renders as a bunch of 'li' components. 'addTodo' is a prop in the TodoInput that is called when you submit the input. When the submission happens, it calls the addTodo function that was passed into the TodoInput class as a prop, and then takes the todo item that the user typed in the TodoInput class and sets the state of the TodoList class by adding that item to the list. 2.) The TodoInput class is creating the input DOM element. This has an event for when a change happens in the input. This event is called onChange. If you set the onChange prop an input to a function, whenever the input's value is changed that function will be called. The TodoInput has a state that represents the value of the input. When the input changes, the onChange function changes the state to be the value of the input and re-renders the component. 3.) As for why it was done this way, it has to do with where you want your information. In this case you can store your actual list of todo items in one of the three classes TodoList, TodoItems, or TodoInput. It makes the most sense to store the list of todos in the TodoList class as that class needs to pass that list into the TodoItems class as a prop for it to render.
What's the complaint?
Actually the author gives a lot of reasons *not* to use node for these tasks.
As an mvp Amazon s3 flat files make a great alternative.
what's your backend tech stack? Sounds to me like you could just save the JSON to disk and load it to memory then cache it for a bit, reloading as necessary. KISS
&gt; Only upgrade to a bleeding edge entry like SystemJS or Webpack if there’s a problem you absolutely can’t solve with one of the others. Yah this is pushing it for sure. Webpack is so full featured basically out of the box, I think it's a great choice for any starter project.
Try https://www.npmjs.com/package/require-hooks to get around trying to require non JS files in node. There are better ways to get around this but this works and is pretty easy. 
Which is?
Nice, works out-of-the box. Thank you :)
Really depends on the task, but Clojure definitely comes to mind as an all around good choice.
[relevant xkcd](https://xkcd.com/927/)
[Image](http://imgs.xkcd.com/comics/standards.png) [Mobile](https://m.xkcd.com/927/) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini\-USB\. Or is it micro\-USB? Shit\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/927#Explanation) **Stats:** This comic has been referenced 3040 times, representing 2.6543% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d48igta)
this again? Are we reviving the 90's?!
That is a best answer so far. Just expect that file the the JSON content is stored in a certain place, thus every time simply return the content of the file. You don't get any advantage from making things complex and putting everything in the db just because everyone likes to do that.
Just don't do it. That is a worst thing when a person expects when he opens a page.
I would not trust this approach, the best way is to run it in a real browser, be it a headless chrome or firefox. Phantomjs has its specific bugs and obviously jsdom also has specific bugs, so this method with using a jsdom is not reliable Finally, what is a purpose of this hack? If you need the unit tests, which is rarely a goal by itself, you can write something absolutely non related to the ui, and thus run it really fast. But as soon as you start testing your page or even a certain part / component of the page - you need a real browser, otherwise you spending your time running your code in a non realistic environment
Won't be implementing this based on previous experience of how shit apple treat their developers. Thanks, but no thanks. 
Yep.
Jesus christ, why the commenting in caps?
if you use a DB its stored in memory anyways the deal breaker is do you need to query it... DB's have very optimized query engines. so use a db if you need to do things like `where productid in (1,2,3,4)` or `where price &gt; 25 and price &lt; 50` to answer your question: when do you need a DB? when you are `updating/writing/saving the table (to a file) multiple times per second`, or when your `running queries on a million+ rows`. 
Properties are variables passed to init function... ex `new Player(playermodel, level, hp)` but its the JSX flavor so its `&lt;Player model=ninja level=20 hp=100&gt;` if you want to use Javascript inside your properties you can do that: `&lt;Player model={ foo? "ninja" : "warrior" } level={ levels.filter((x)=&gt;x.whatever==true) }` State is like a data store that represents the current hidden data assocaiated with an element, so if your playing a RPG player1's state might be `Health: 25%, MP: 25%, model: ninja.mdl` state used to be done in the constructor, ex `foo::foo()` or `foo.init()`, but its used so often that its now done in its own initializer... before: foo.init() { this.hp = 100 this.mp = 100 this.model = player1 ? player1model : player2.model // thousands more lines like this } now: foo.getDefaultState() { return { default stuff } } this is done so we can use reactive programming and have one function `onStateChange` where we can draw new updates. before youd have to code all the reactive stuff yourself, and then litter the code with your own reactive stuff `if(stateHasChanged()) render()`, its sloppy. but its used so much its built in now! react was one of the first frameworks to get state handling mostly right! 1 How do you explain what is the onChange function doing on TodoItems component. `onChange` is calling `this.setState()`, the reactive programming function that sets a new value(s) to `this.state`, and notifies `this` that we have new data and might need a rerender. Hes setting `this.item` to `e.target.value`... this.item part of the todos render data (maybe shown maybe not), and `e.target` is the control that got an input event (event.target ... a textbox or button or html element), and `e.target.value` is the text of the textbox 2 Or how do you explain pieces of code like this: &lt;TodoItems items={this.state.todos}/&gt; &lt;TodoInput addTodo={this.addTodo}/&gt; These are JSX properties, if this was vanilla not JSX its basically: render( new TodoItems(todos) , new TodoInput(AddTodoFunction)) 3 why is this.state.todos setting the props there and and why the name addTodo={} there with this.addTodo? Its just "abstraction" its cleaner to write the code by putting the `addtodo()` logic in its own function. But! But the AddTodo function belongs to the `TodoList class` (where the todos are stored `this.todos array`), not TodoInput (where the user types). So he has to link them together, instead of using a global variable `myTodos` he passes "a link" to the AddTodo function 
&gt; You could have googled it yourself, you know? I searched the WHATWG site but wasn't able to find it for some reason. So thanks.
&gt; issue with the CMS I am working with. probably! the fix is usually to just let it format then reformat the data after page load. using jquery $(function() { //doc ready var elem = $('#myElement') elem.html( elem.html().replace(/&lt;br\/?&gt;/g,"\n") ) }) gl!
Agreed. RequireJS makes you write you code in a deeply illogical way. It's time to move on.
Almond is useful when you use TypeScript's built-in bundler - it's the smallest loader.
Webpack's base loader is 243 bytes: http://webpack.github.io/docs/comparison.html
[] means array, {} means objects. Objects in javascript are basically associative arrays/ hashmaps, which means that you can access entries either via dot notation myObject.myValue or via bracket notation myObject[myValue] as long as the identifiers are syntactically valid (don't start with a number etc.).
Coming from another OO-esque language, I think the thing that confused me the longest was `obj.func()`. It took a while to realize that `obj.func()` is a single action, which can't be decomposed into `obj.func` and `func()`, no matter how much it *looks* like it. Still not sure whether implicit method-binding like that is one of the worst design decisions in javascript, or one of the underpinnings of some of the flexibility that I love about javascript, or both :)
If you click on a date with an event, it brings you to the event card I.E June 16th. I would prefer to only show this list of event cards, opposed to a monthly calendar view. Here is the repo for the plugin – https://github.com/ericwenn/kalendar
Compared to other OO like languages `this` largely makes sense in how it is executed. The challenge is context, because `this` resolution and other inheritance related items are NOT related to scope, which is the biggest difference between JavaScript and other OO languages. With JavaScript being my first programming language it actually took me a while to get the grasp of `this` and inheritance related concepts, but lexical scope and nesting functions seemed almost immediately obvious.
Created a MVC framework for React http://jitcoder.github.io/RadMVC/ 
No, if you do that then `this` would be the global object (`window` in the browser) inside the func invocation. Whereas if you do: obj.func() `this` would be `obj`.
I don't think so. Just a library, you just look at the documentation.
That "should be" is exactly the thing I thought too, initially. But it's not. `obj.func()` is really a *three* step process: get attribute value (`obj.func`), implicitly bind `this=obj` for duration of call, and invoke `func()`. Decomposing into `obj.func` and `func()` looks right visually, but it looses the "implicitly bind this" action... So when you call `obj2()`, `this` will be ~~left bound to whatever it was from the scope you invoked it in~~ bound to the global context instead. E.g. if running your sample code in a browser console, when `obj2()` is called, `this` will be bound to `window`. *edit: corrected per smrq's comment below* --- As an example, try var obj = {func : function(header){console.log(header, this); }}; obj.func("composite"); var obj2 = obj.func; obj2("separate"); You'll see the "this" value changes between the two calls.
Can I hug you for this link?
Seems like there are a lot of improvements you could make to the coding structure in general (such as only drawing when necessary, proper frame limit control, limiting control inputs, etc - this system will hit some major hiccups if you ever implement sprite animations, AI, etc), but nice first attempt.
This is nearly correct. &gt; So when you call `obj2()`, `this` will be left bound to whatever it was from the scope you invoked it in. Not quite--it will get rebound to the global scope (which in a browser is `window`). If `this` was already bound to something other than the global scope, it won't keep that binding.
Cheers...let me give this a try!
I keep a list of high-quality React and Redux tutorials over at https://github.com/markerikson/react-redux-links. Specifically intended to be a great starting point for someone trying to learn the ecosystem. Also includes tutorials for some other related categories, like the basics of Node, Git, Functional Programming, and so on, as well as several articles that describe the common tools and terms that make up the modern JS world.
I learned JS back in the day when things were a whole lot simpler (write JS in notepad and script src on the page) I can't imagine starting up in this current ecosystem. I've heard good things about https://www.freecodecamp.com/ looks like they have all the classes to get you up and running on modern JS.
Of course. Especially that I'm the post author ;). (hug)
&gt; That "should be" is exactly the thing I thought too, initially. But it's not. It would really make no sense in a non-classical language with first class functions and where objects' methods are mutable. If we had a version of javascript where this worked: var obj = { bla: 'hello world', func: function () { console.log(this.bla); } } var f = obj.func; f(); // hello world What about this: window.bla = 'oh dear'; function func() { console.log(this.bla); } var obj = { bla: 'hello world', func: func, func2: function () { console.log(this.bla) } } var obj2 = { bla: 'confused', func: obj.func2 } func(); // oh dear var f = obj.func; // Is this still the same as the original func? Or did assigning it to an object bind it somehow? "hard" binding such as with .bind() creates a new function, we would have to radically alter what assignment means in js f(); // ??? // Is this still bound to the original object even when it's invoked through a different object? obj2.func() // ??? f = obj2.func; f(); // hello world? confused??? console.log(func === f) // true??? console.log(obj.func2 === obj2.func) // true??? Methods aren't a one-to-many relationship in JS, they are many-to-many and the same function can belong to multiple objects. People who don't understand this have a serious misunderstanding of the relationship between objects and their properties.
Somewhat off topic, but if you asked me to do an assessment in advance, the process would already be over. The interview is a two way street. You are interviewing me, but I'm also interviewing you. You are free to test my technical skills, but not before I've had a chance to determine whether or not I *want* to work for you.
The parameters are actually called [rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) . 
You're right about the coupling and [Dan Abramov pointed that out](https://github.com/reactjs/redux/issues/1065) on GitHub. My feeling is that this covers 90% of cases. You can still hand code reducers if you want. I'm considering updating the code to allow you to specify reducers that should be able to respond to all actions. Thanks for the feedback.
Not sure what you mean.
limit the blog spam please. 
I think the way js handles it makes a lot of sense given that it has first class functions. `obj.func` can be the same as `other.func`, but since the parent objects are different, `this` should be `obj` and `other`, respectively. And there's always `.bind()` for excplicit these.
[Image](http://imgs.xkcd.com/comics/standards.png) [Mobile](https://m.xkcd.com/927/) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini\-USB\. Or is it micro\-USB? Shit\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/927#Explanation) **Stats:** This comic has been referenced 3046 times, representing 2.6578% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d499ttb)
I've been writing Javascript since Pontius was a Pilate, I've never seen 'this' described quite so well. Kudos OP, fantastic article! Your "three dots" explanation is pretty neat too, thanks :)
I've been writing Javascript since Pontius was a Pilate, I've never seen 'this' described quite so well. Kudos OP, fantastic article! Your "three dots" explanation is pretty neat too, thanks :)
I've been writing Javascript since Pontius was a Pilate, I've never seen 'this' described quite so well. Kudos OP, fantastic article! Your "three dots" explanation is pretty neat too, thanks :)
hah ive got css library+coffee/typescript+sass+template+macro+yeoman skeleton dependencies. my png images are run through pngcrush then webP converter so i can deploy as .png and .webp for browser support, and actually have a build script for them *not serious*
Also see: https://egghead.io/lessons/react-redux-peer-to-peer-todomvc-over-webrtc-using-swarmlog 
Yeah, it can be decomposed easily at the AST / VM level. But not syntactically... note that you had to use all three syntax constructions (`obj.attr`, `func()`, and `obj.func()`) to even write your example code!
Hi /u/markdonalds69, please keep it civil.
Hi /u/x-skeww, please keep it civil.
It comes in handy if you're doing something like event delegation where you have one method written, but the context is going to change based on how it's applied.
I decided to stick with VanillaJS in the browser. That is, no JQuery or any other frameworks. Really get to know how JS works in the browser. On the node side you can then keep it simple. I do use express, and passport, but really just getting express to work right is the trick, and you should be off and running. There's node 0 through 6.0, and express 0 through 4.0+. Just make sure you're using the latest and greatest and find tutorials that are somewhat recent so you're not looking at express 2 or 3 examples when you want 4. Personally, I find all of it a bit overwhelming too, and thus do what I've always done, find simple ways to do what I want, and build from there with the project.
There are alternatives, like Python's solution of implicitly creating a closure, represented by a `MethodType(obj, func)` instance that gets returned when you access `obj.attr`. Though that solution has drastic effects on how you pass function references around without requiring explicit "unwrapping" to get the underlying function; and demarcating when to create that closure forces a fundamental difference between objects &amp; classes... neither of which are acceptable in javascript, as it would make a bunch of really useful things impossible (or at least much harder to do). 
because "import ...." doesn't work in the console 
The thing I find unique about javascript is that fact that there isn't such a thing as "method tear-off" because there isn't really a concept of a method... for the most part there are just first class functions, which happen to get their `this` variable set differently depending on how you invoke them. The emphasis is on when/how the function is invoked, rather than where it came from. I'm not sure if you could easily make lint rule, because one bit of code might be accessing `x.f` to grab a callback from an options object... and another location might actually be accidentally tearing of a method when the coder didn't mean to. Since there's no distinction in prototype inheritance between "class" and "instance", only the coder's intent can answer the question about whether something should be invoked as a method or not.
You could start with just learning React because it is a view layer it removes some of the complications other beefier frameworks introduce with data management. Also JSX is mainly just JS and HTML so you don't have to learn a new templating language to render content to the DOM. You will have to learn to use a transpile tool most likely to use JSX effectively but this is where modern JS development is headed so you might as well understand the current state of affairs.
ya dropped this \\ you've gotta escape any backslashes, like so: `\\`
You may want to take a look at [vue-cli](https://github.com/vuejs/vue-cli). Take a bit of time to get a feel for Vue, then look at vuex (state management) and vue-router. Ember is nice too and will require less setup. But it also takes more time to learn. Personally I prefer Vue and its ecosystem, and it has more momentum, but different strokes for different folks. I've tried out Angular 2 periodically since its announcement and I'm really not a fan. It's over-complicated and over-engineered. Its only clear upside is performance in my experiments. And I guess it'll be familiar to Java programmers. React is probably the best framework right now, but it seems Vue 2.0 will be its strongest competitor yet. The downside is you'll be spending considerably more time making choices and tweaking build tools. Unless you use a [boilerplate](https://github.com/mxstbr/react-boilerplateboilerplate), I suppose.
if you use new, you can take advantage of the prototype. Let's say you want to chain functions here, what object are you augmenting? And then you are using more memory. The prototype gives you 'this' and will protect your object from side effects. Similar to `new Date()`, it's just cleaner.
If you're going for a pure ECS your implementation kinda falls short of the mark (my first attempts certainly didn't either). Your components should just contain raw data and nothing else. All logic should reside in Systems. Check out [Richards Lord's Ash Entity Framework](http://www.ashframework.org/) and his accompanying article on the topic [What is an entity system framework for game development?](http://www.richardlord.net/blog/what-is-an-entity-framework). He provides one of the most clear and concise introductions to ECS. Then there is the ubiquitous [tmachine.org](http://t-machine.org/index.php/2007/09/03/entity-systems-are-the-future-of-mmog-development-part-1/), you should read through Adam's articles on the topic at least one or two times. He has devouted a good chunk of his life to Entity-Component-Systems so they are worth the read.
If I had to pick a framework today I would use [Choo](https://github.com/yoshuawuyts/choo). It has a really tiny API to learn, and all the dependencies are clearly defined. In fact, if you still feel the whole framework itself does too much then it's easy to pick out it's dependencies and just use the ones you need. 
Cordova's incredibly easy to set up, and works with webpack after a marginal setup; boilerplates are coming. I'm not sure why we're using React-Native over Cordova's WebView; React-Native can't render to default HTML. Why would we, again, build for an app rather than for the browser? If you're looking for push notifications.. https://github.com/phonegap/phonegap-plugin-push 
This was a really cool talk! I too, have been experimenting a bit with hyperlog and webrtc-swarm. I'm excited to see what the future of P2P and webrtc brings!
Ha, I hear ya. I got a bit of kickback for coupling, but then some people make the argument that it's not quite coupling. So, I think you're right on the mark. :)
For me it comes down to: Do I ever want to think about that again? Sometimes external library code includes prefixes, or legacy code, or some new features. Flexbox is a pretty gnarly one if you need enough support. The point is, with autoprefixer, you don't think about it at all.
Whyyyyyyyyyyyyyyy
&gt;The point is, with autoprefixer, you don't think about it at all. You can still get bitten in the ass if you're not careful. We use autoprefixer with the "last 2 browser versions" setting. But none of the last 2 browser versions require the `-webkit-flex` prefix anymore. Except we use a library for printing PDFs that *does* require that prefix. So some time in the recent past, all of our flex styles broke when printing PDFs. It was kind of a pain to track down. Our solution was to explicitly pass `iOS 8.4` in addition to last 2 versions to autoprefixer. 
I would guess that perhaps there would be a first high-level screening with a recruiter or HR or something along those lines before a technical test is handed out.
I found the tutorial interesting but the fact that I can't view it on mobile is sad for 2016.5
He mentioned the assessment coming before the phone screening.
Before the initial phone screen is bad, I'll agree with that. But I think it is acceptable after that point.
This is a pretty thorough book: [https://leanpub.com/javascriptallongesix/read#](https://leanpub.com/javascriptallongesix/read#) 
Any code you can execute in the chrome javascript interpreter can be turned into a bookmark (bookmarklet); Paste this, for example, into a bookmark: javascript:(function(){alert("hello");})()
Oh, another thing. If you want to loop through all elements on the page and change their color to a random one every second: setInterval(function(){ var everyelement = document.body.getElementsByTagName("*"); for (var i = 0; i &lt; everyelement.length; i++) { everyelement[i].style.backgroundColor = '#'+Math.floor(Math.random()*16777215).toString(16); } }, 1000); The number that gets put into the console log is an id. To stop the interval function, just do clearInterval(the ID you saw in the console);
 $('a.subreddit[href$="The_Donald/"]').find('.arrow.down').trigger('click');
Ya no problem. Just google things. For example, google: javascript random colors or google: javascript loop through every element Hardly anyone can code without googling a ton 
I wrote an app at Netflix to manage our global content ratings for every title interally that used Redux w/ a library I'm working on called diffHTML. I used Redux because it helped me pin a given application state to the the view and have perfect time travel support. Worked great on the server as well. Basically my app was a mess until I integrated Redux and suddenly nearly ever major issue I was hitting disappeared. Redux and it's associated tools are fantastic and I love the community, it's great that it's well received in the React community as well.
\^ this
&gt; `this` resolution and other inheritance related items are NOT related to scope Do you mean they're not related to lexical scope? Clearly they're related to dynamic scope.
I don't like that there is no back button, sometimes I want to go back and reference what I just learned. edit: I think it would have make more sense to continue the tutorial with a garden theme and show how the graph was being built. I was a little confused to see the graph at the end for the first time. http://i.imgur.com/BI7P8yK.png
Yes, but please don't start using for loops everywhere just because they are faster. 
If you aren't already, you should do a complete treatment of ECMAScript in the same tone. Or better yet someone should pay you to do it. In either case it would be a valuable reference.
[removed]
you could still throw a `SyntaxError` to match the success state, or you could halt execution with a thrown constructor error (which would still be preferable, since spec behavior gives you useless error logs after this) anyway, in my preferred world, this still works: &lt;script&gt; // bad constructor error // reference is retained but unusable until reassignment, // possibly throwing again if trying to use in this state let x = somefunc(); &lt;/script&gt; &lt;script&gt; // program gracefully degrades to a usable state x = 'foo'; &lt;/script&gt;
Doesn't this: (obj.func)() accomplish the same thing, namely breaking the method invocation into a plain old function call? (Though I can't imagine when you'd want to do this...)
The problem with making such a rule is that there is no way to statically distinguish a method from any other property. You could do it so long as the function gets called within the same scope (with further caveats around async), but if it just gets pulled off and passed somewhere, you won't be able to detect it reliably.
An easy way around that is to allow `x = foo['bar']` but disallow `x = foo.bar`. If, that is, you can somehow tell that `foo.bar` is a method at linting time (which is quite difficult even in limited cases).
I had seriously considered Ember but poor typescript support meant it didn't remain a viable choice for me. Other than this one thing, there's no denying that Ember is pretty darned good. 
fwiw, doing this will likely incur the wrath of the spam filter.
It's not specific to reddit, it's just a script you can run in the console. Hit f12 for chrome, and copy the script when you're logged in. You can change reddit settings to remove downvoted/upvoted items to show on the pages, so if you run the script on a few of the pages you can browse them subreddit free. It'll work for anything if you change the name out. This is definitely not the most efficient way to do this, RES does it, but I though it was kind of fun to come up with real quick in the console. 
Your post history is fascinating.
100 should be fine try new jquery 3 it has faster animations if not jstween has better performance, and css3 anim even better (but harder imo to position) 
How to get shadowbanned easily, step 1
&gt; [data-subreddit="The_Donald"] .arrow.direction This one works very nice for vote manipulation. However, not a big fan of mass downvoting a subreddit just because you disagree with the content. I would rather: $('[data-subreddit="The_Donald"]').hide(); 
While I can see some use for this, especially since they gave those examples, I'm not sure it's worthy of being implemented into the language itself. And I'm definitely not a fan of the name 'papp'. edit: Changed to 'they' instead of 'you', since the OP isn't the author.
Not sure what I said that would give the impression that it's a bad idea or not possible. I am simply wondering if people are using these technologies with VanillaJS.
Thank you, I will take a look at it!
&gt;Create an empty set of rect elements with class 'colorBar' is different than &gt;Please use selectAll() with rect elements of class 'colorbar' 
Hi, I was in the same boat as you at the start of the year. At first I tried to learn React in my free time but found it overwhelming and so reluctantly gave up... Soon after i needed to choose a framework for a project at work and decided on Vue. Vue is simple and has official routing and state management libraries and a first class development tool with 'vue-cli'. However i always felt that i was shooting myself in the foot not learning React as it really is the 'hot' framework. So i decided to re-approach React with the knowledge and experience of es6, webpack, components, props, routing and state i got from Vue. Right now i would say i actually prefer React, it is in a much more stable position to when i first tried to pick it up and has some great libraries like Redux and React-Router. It also has a massive community, who are producing great applications, libraries and talks. Not to mention that it is backed by Facebook so shouldn't vanish anytime soon.
I made my canvas 800 x 400px and it still told me it has to be at least 400x400. The trick was to make it 401px.
That is why I originally used single colon in my readme. I now do not believe function bind will ever be a part of the language. It has too many problems, as shown by it being stuck at stage 0. I think using it for partial application is a better use.
Yeah definitely agreed, need to clean those up. Many have been confused about garden to graph transition. 
Not bad. It shows you know things like Promises, and how HTTP works. It shows you can use Node fairly well. Just keep uploading to Github and build a well rounded portfolio. You should also be unit testing ;)
 $('[data-url*=Don] .down').click()
I've finally looped back to this old project and actually added some crypto. http://xqt2.com/p/e/encryptedPageMaker.html You are partially inspirational.
No, I mean that the class name is different.
So far I like Vue, but I am open to taking another look at React. How much of your Vue knowledge transfered?
Take a look at [nock](https://www.npmjs.com/package/nock) for mocking requests
This article covers it pretty well -&gt; https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b
Var t = this;
I was hoping to see it do something. It either throws an error for me or doesn't do anything.
There is hope. Very difficult to offer any advice without seeing any code. Maybe offer up a gist or a jsfiddle?
Vue taught me the concepts of single page applications like routing, components, state and props which i could never grasp with React (not sure why). The two libraries are very similar, though they have differing ideas of how to do stuff such as defining the template Vue with html and React with JSX. I would say learn one, get comfortable with it and then learn the other. You'll be amazed at how fast you will pick up the other and you may turn out to prefer it or hate it and just go back to the first. 
Is there any modern software for generating this sort of color terminal ascii/ansi art?
Hah, I don't think I got TO step 1. The big thing in the middle of the screen told me to resize the box, so that's what I was trying to do. There may have been text on the right, but it didn't look as important.
Do you really think Javascript engines will implement partial eval? Sounds like too far for Javascript.
If I were in that situation, I'd write a shell script that concatenates all those files in a particular order. Then I'd write a Makefile to set all the input JS files as dependencies and the concatenated file as the output and the shell script as the command to update the output from the input. Then I'd set up that Makefile to be run with a git hook. And I might even mess with inotify to run make automatically after changes in the relevant directories. 
[Code School: Explore and Master Chrome DevTools](http://discover-devtools.codeschool.com/)
&gt; https://www.npmjs.com/package/sinopia Whoa - didn't even know that was an option, that's cool. I'll have to poke around a bit but it seems like that's a great way to always keep a safe offline backup.
The absolute best way to make sure your dependencies don't break is to fork them into your own repository and in the package.json refer to those repositories. See this link of SO about it: http://stackoverflow.com/a/28729646
Also an interesting strategy. The only thing I'm worried about is the sheer number of dependencies of the packages we use. Would each of these need to be independently forked? A simple Angular2 install must have at least 100 packages in the node_modules folder.
You're mixing stage and time in your PHP. The submitted values will be in $_POST['stage'] etc... $_POST['time'] will never be set, so it'll never execute any of the inside code.
I'd hide that "Please resize me" box until the user clicks "go to step 1"
Unless you are using modules with very obscure dependencies forking the top level should be enough. You could even go so far as to store the node_modules in your forked repository, which coincidentally should reduce your npm install time substantially.
Any plans to integrate with something like [Snyk](https://snyk.io/) as part of the scoring system?
Amen to that!
I almost got stuck on step 2 since I didn't realize that it was "gardenDiv", not "myDiv". There should be a progress indicator.